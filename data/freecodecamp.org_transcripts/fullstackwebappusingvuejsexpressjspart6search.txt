00:01 - hey everyone this is cody and welcome to
00:03 - part six of building a full stack web
00:04 - application
00:06 - using vue.js and express.js
00:09 - so in this part what we want to do is we
00:12 - want to add a panel up here which has
00:14 - like an input box where we can search or
00:17 - have a user search for artists by name
00:20 - title
00:21 - genre or whatever they like
00:24 - so let's go ahead and get started on
00:26 - doing that
00:28 - so to start off let's go ahead and go to
00:30 - that
00:32 - client and go to that view
00:35 - so if you remember here we have this
00:37 - songs file which is basically
00:39 - responsible for rendering that
00:41 - view here
00:42 - i think this file is going to get kind
00:43 - of large over time so let's go ahead and
00:45 - make another folder
00:47 - called songs
00:49 - and we can just click and drag that
00:51 - songs view into that
00:53 - and i'll rename that into
00:56 - index then we can go to our router and
00:59 - we can go down here so wherever we're
01:01 - recalling songs before i think we need
01:03 - to import it
01:05 - from
01:06 - song slash
01:07 - index
01:12 - so refresh the page make sure that's
01:14 - still working and it does
01:16 - so at this point i would like to kind of
01:18 - pull the two different panels so we're
01:20 - gonna have a search panel and we're also
01:22 - going to have a
01:25 - um the display panel so i'm going to say
01:27 - songs panel
01:28 - now view and that's going to contain
01:34 - all of the information related to the
01:36 - songs
01:37 - so in fact i could probably just copy
01:40 - and paste that
01:43 - right so
01:45 - basically what we want to do is have the
01:47 - songs panel
01:48 - fetch
01:50 - the songs from the database or from the
01:52 - back end and display them instead of
01:54 - having it done in the index
01:56 - so if we were to just go over here
02:00 - and i'm going to kind of refactor all
02:01 - this and remove stuff we don't need
02:03 - so we just want it to be a panel here
02:06 - which means we can get rid of all that
02:09 - and unindent
02:12 - so just to kind of link this up let's go
02:13 - ahead and go down here and import
02:18 - the songs panel
02:19 - from
02:21 - i'm going to do a relative path this
02:22 - time
02:23 - from songs panel
02:26 - and of course i'm going to add that to
02:28 - our components
02:32 - so then i should
02:34 - be able to just delete
02:37 - the previous thing we had there and say
02:39 - songs
02:40 - panel
02:43 - go ahead and close off that panel there
02:45 - that dom element
02:47 - and then it should just render as
02:50 - before
02:52 - so that should make sense as to
02:54 - how and why we refactor that
02:58 - and
03:00 - the second panel we need
03:03 - i'm going to add a new file called song
03:05 - search panel dot view
03:08 - go ahead and scaffold that up
03:10 - and this panel
03:13 - is going to basically have
03:16 - again we're going to have a panel
03:19 - so
03:20 - oops
03:26 - and this one's going to say search
03:29 - and if i go back to the index i want to
03:30 - go to
03:32 - song search panel and include that one
03:36 - also include it as a component and make
03:38 - sure that something renders for that
03:42 - i don't think i actually added it yet so
03:44 - like say songs
03:45 - search panel and then again close off
03:48 - that dom element
03:51 - um
03:52 - so we're getting an error saying panel
03:54 - did not register
03:56 - correctly
03:58 - and what i'm starting to notice is that
03:59 - almost in every single view we have the
04:01 - panel thing included in the components
04:04 - so what we can do instead is i think i
04:06 - said at the beginning it's not good to
04:08 - have for globals but i think in this
04:09 - case we're having a lot of globals
04:11 - everywhere
04:14 - so i'm going to go ahead and just make a
04:15 - new file or folder called globals
04:19 - and i'm going to put that panel.view
04:21 - into that globals file
04:25 - and inside our app.view
04:28 - or sorry our main
04:30 - we can just go ahead and say import
04:31 - panel from
04:33 - and i'll say component slash global
04:37 - panel
04:40 - and here if you wanted to define a
04:42 - global module that you can use in your
04:44 - entire application you can say view dot
04:46 - component
04:47 - pass it the name and then pass it the
04:50 - actual component object
04:53 - so if i were to save this i think a lot
04:54 - of stuff might crash because i moved the
04:56 - location of panel
04:59 - so while i'm at it i'm just going to go
05:01 - ahead and
05:02 - find any instance where i have panel
05:06 - and in fact there is a lot of instances
05:08 - so instead i'll do import panel
05:11 - and basically anywhere i have import
05:13 - panel i'm just going to go ahead and
05:14 - remove
05:16 - and i'm going to just remove it from the
05:18 - components too
05:22 - so bear with me really quick as i do
05:24 - this really quick refactoring task
05:34 - and then this will make our code a
05:35 - little bit
05:36 - easier to manage
05:38 - because obviously
05:40 - if you're using this panel on every
05:42 - single component why exactly are you
05:45 - importing it as a local
05:52 - all right so there's like five more to
05:53 - go almost done
05:56 - bear with me
05:58 - sometimes it's it's fun to just listen
06:00 - to music and do these
06:02 - boring repetitive tasks when you're
06:04 - programming
06:08 - but oftentimes it's also not fun to do
06:10 - something like this so
06:15 - so at this point i think it's been
06:16 - removed from everything except for this
06:17 - main file where we included it so if i
06:20 - were to go back to our app and refresh
06:22 - the page let's just kind of do a quick
06:25 - check to make sure nothing broke
06:28 - yep seems like everything's working
06:29 - that's fine so what we just did there is
06:31 - we pulled out the panel
06:33 - component and we made it global so that
06:35 - now when we make new stuff we don't have
06:36 - to import a panel every single time
06:41 - so going back to what we were doing
06:43 - before if we go to components
06:44 - and go to songs
06:47 - and go to the index let me go ahead and
06:48 - close some of these other things
06:52 - uh first things first
06:55 - i'm just going to add a little bit of
06:58 - margin top
07:00 - to that panel so that it gets pushed
07:03 - down from songs
07:04 - add a little bit of space there
07:07 - so in our song search panel
07:10 - what we want to do
07:12 - is if i go to register i can just go
07:13 - ahead and grab
07:14 - an existing text field
07:17 - and i'm going to go ahead and just put
07:19 - it right into the song search panel
07:22 - and call the label search and the model
07:25 - will also be searched which means that
07:26 - we need a data
07:30 - which has some
07:32 - blank string for the search model
07:35 - and basically this whole search thing if
07:37 - i were to save this
07:40 - when we search through this we want to
07:42 - do something to filter the results
07:45 - by artist album so in fact i'll say
07:47 - search by artist
07:49 - album
07:50 - genre
07:53 - sort by song name
07:56 - ooh song title because that's what we're
07:57 - actually using in our data
08:02 - or genre let's make sure this looks good
08:11 - all right so the first thing that i want
08:12 - to do is as someone searching through
08:15 - this
08:15 - we want to keep track of what they
08:17 - actually typed in and how it's changing
08:19 - so in view you have the ability to
08:21 - create a watcher so i can say watch
08:23 - as an attribute on the main view
08:24 - component and then i can say
08:27 - watch
08:29 - as search changes let's just go ahead
08:30 - and print out the value of search so now
08:34 - if i were to say modest mouse we see
08:36 - that it prints out the modest mouse
08:37 - string down here that's pretty cool
08:42 - so what we want to do is as a user is
08:45 - typing inside this search panel
08:47 - i want to go ahead and create a query
08:49 - string such as like
08:50 - search equals
08:52 - modest mouse and basically i want to
08:54 - store this information the query string
08:56 - so that people can easily bookmark and
08:58 - share
08:59 - their you know latest searches with
09:01 - other friends or whatever
09:03 - because if you were to try to store this
09:04 - state
09:06 - in ux
09:07 - or just internally inside the scope and
09:09 - passing around with props there's no way
09:11 - to like bookmark that so that's why i'm
09:14 - taking the approach to do the router
09:15 - link up here
09:18 - so the first thing to do
09:20 - is as we type in the search value
09:22 - changes
09:23 - we can basically just keep on pushing a
09:25 - new route so i'm going to say cons to
09:26 - route is equal to name
09:28 - of songs
09:30 - and i'm going to say this dot search is
09:32 - not equal to an empty string so
09:34 - basically
09:35 - we don't want to add
09:37 - money sign or question mark search
09:39 - equals if there's nothing to add
09:42 - so if as long as this is not equal to an
09:44 - empty string we can say route.query
09:46 - is equal to a search this dot search
09:50 - which will basically put the key search
09:52 - and the value that we're doing inside
09:53 - that route.query
09:55 - and then finally we can say this dot
09:57 - router that push and then go ahead and
09:59 - push that route in so if i were to save
10:00 - this search panel now
10:02 - and say modest mouse you see how it's
10:05 - changing the query string for us
10:06 - dynamically so that's pretty awesome
10:10 - now the next step
10:12 - is
10:14 - if we were to let's say refresh this so
10:16 - i say control refresh
10:19 - notice that it didn't set modus mouse
10:21 - here in the search text box
10:24 - even though it's up here in the query
10:25 - string
10:27 - so we can kind of handle that
10:30 - by going down here
10:33 - and we want to go ahead and add a
10:34 - watcher
10:36 - to the search query string
10:39 - and
10:40 - we want to say this is immediate so
10:41 - basically when this
10:43 - value is initialized whatever it may be
10:45 - if it's undefined or an empty string or
10:47 - whatever it's going to go ahead and call
10:49 - whatever our handler is
10:51 - so in this case i'll say handler value
10:53 - and then i can say this dot search
10:54 - equals value
10:56 - so if i were to save this now
10:58 - and change this to hello world and hit
11:01 - enter see that it changes our search
11:04 - and vice versa we can type in and then
11:06 - if we don't have anything in the text
11:07 - box the entire query string search
11:10 - goes away
11:13 - all right so now at this point what we
11:15 - want to do is made it or we can edit
11:18 - this songs panel down here and we want
11:19 - it to kind of read that query string
11:22 - that we've been creating
11:24 - to fetch
11:26 - the song is using whatever the search
11:28 - parameters are so if we were to go to
11:31 - in this case the songs panel
11:37 - and let's see
11:40 - basically when we're going to do
11:42 - something similar so whenever
11:44 - that query string changes remember we
11:46 - can just do a watch and just say
11:48 - listen to when that
11:50 - query string dot search value changes
11:54 - we want to go ahead and do the same same
11:56 - thing
11:57 - so again immediate so right when this
11:59 - component
12:01 - has a value defined in that we can just
12:03 - go ahead and invoke a handler
12:07 - and we can say
12:09 - this dot songs equals await
12:11 - song service dot index
12:15 - and we can just go ahead and pass a
12:16 - value
12:17 - and of course do not forget the async
12:19 - here
12:22 - um
12:23 - so instead of mounted we don't need that
12:24 - anymore because immediate should kind of
12:26 - do
12:27 - justice it should do the same thing
12:30 - and one thing you'll notice is i'm
12:31 - passing a value to
12:33 - song service index which we don't really
12:36 - handle right now so if i were to go to
12:37 - services and song service and go to
12:39 - index i could go ahead and just do
12:41 - search
12:43 - and then here
12:44 - i can say
12:46 - i'm pretty sure i could just pass
12:49 - params search
12:53 - search call and search
12:59 - all right so basically we're passing in
13:01 - some search parameters
13:05 - and we're going to put it on the query
13:06 - string as we type so in fact
13:09 - if i were to go over here and just do
13:12 - network tab
13:13 - and type
13:15 - an extra character like two
13:18 - if you see here it did a query or it did
13:20 - a um
13:21 - an ajax request to
13:23 - this endpoint
13:25 - and it appended that query string of
13:28 - search equals modest two and that's
13:30 - because we defined it here so if i were
13:31 - to say like
13:33 - some random key equal search
13:37 - again as i change that value it's going
13:39 - to say some random key is equal to
13:40 - modest 2 3.
13:43 - and then another thing i should note
13:46 - is that if i were to change this to an
13:48 - empty string
13:52 - i think actually everything works fine
13:53 - it's just an empty string
14:00 - right so now we have all that logic set
14:03 - up to kind of like
14:04 - query the back end based on
14:09 - what you type in
14:11 - and i notice that all my songs over here
14:12 - kind of it's kind of vanished so let me
14:14 - go back to my song panel
14:17 - and try to figure out why that went away
14:19 - and of course
14:21 - the same issue i keep on doing is this
14:23 - needs to be data
14:26 - so go ahead and refresh the page
14:28 - and i thought it needs to be data hold
14:30 - on let's see what's going on
14:32 - there we go
14:37 - alrighty um
14:41 - so now if we were to go
14:43 - to our songs controller in the back end
14:46 - so find our server
14:52 - and go to the songs controller
14:55 - what we want to do is add a little bit
14:57 - of new functionality so to the index
14:59 - method basically
15:00 - we want to check if that
15:03 - rec dot
15:04 - um query.search is set so if search is
15:07 - in the query string
15:09 - we want to do a search a certain way and
15:12 - otherwise we just want to do
15:14 - the original search that we were doing
15:16 - which is a limit of 10. so up here i'm
15:19 - going to say
15:20 - let songs equal to null
15:25 - so that we can assign it based on
15:27 - which path we take
15:30 - and then here
15:32 - we're going to do something a little bit
15:36 - complicated so we can say songs is equal
15:38 - to await song.fine all
15:42 - and we want to find
15:43 - all the songs which match any of these
15:47 - criteria so there's going to be an or
15:48 - statement that we can do in sqlize and
15:51 - basically we want
15:52 - to see if any of these cases are true
15:56 - so in this case we can say
15:58 - title
16:00 - artist
16:01 - genre
16:02 - or album
16:06 - dot map and i'm gonna go say key
16:08 - and just map that
16:10 - to
16:11 - an object here
16:14 - and then we could do this cool little
16:17 - feature where we can just say
16:19 - that
16:20 - and inside here i'll say con searches
16:22 - eagletorec.query.search
16:26 - and i'm going to abstract that and do
16:28 - this
16:29 - and boom hopefully this all works
16:32 - i'm not sure why this is
16:35 - some reason this is white there might be
16:37 - something wrong with the code here
16:41 - um
16:43 - well i guess i could save it see what
16:44 - happens
16:47 - so now as i type mo
16:51 - yeah there's definitely something wrong
16:52 - i'm missing a
16:55 - am i missing
16:59 - ah
17:00 - let me just end that with another
17:02 - parentheses
17:04 - that's why that was not
17:06 - colorized
17:07 - so again let me just refresh the page so
17:08 - i can kind of demonstrate what's going
17:10 - on
17:11 - so as we type i'm going to say
17:14 - d
17:15 - it's going to do a request to the back
17:16 - end for mod
17:18 - and it's going to search for search
17:20 - equal mod it's going to do
17:22 - the response is in energy string
17:24 - right now
17:27 - and basically
17:32 - this is an issue right now because i
17:33 - actually forgot to do this
17:35 - i need to search where like is
17:38 - so basically in sqlize you can do a
17:42 - a like search
17:44 - and what we want to do is just
17:46 - find anything
17:51 - actually let me uh
17:53 - change that i think i have my order
17:55 - backwards
17:58 - so for each key so for title for artist
18:00 - for genre for album we want to create a
18:04 - giant array of objects which is why
18:06 - we're doing this map
18:08 - put it into this money sign or
18:10 - and then for each key we simply want to
18:13 - search
18:16 - that key to see if whatever we provided
18:19 - is existing
18:25 - so now if i were to refresh the page
18:27 - you see that it's returning
18:30 - modest mouse and so if i wanted to
18:31 - search for let's say alternative
18:34 - it's returning only alternative i go
18:36 - here our response only has a single
18:38 - results which is alternative i could
18:40 - search for an exclamation mark which
18:42 - only returns that float on with
18:43 - exclamation mark i can search for modest
18:46 - where the server is going to return to
18:49 - responses
18:50 - so awesome at this point we can search
18:52 - on any of these keywords and i don't
18:54 - know if this is the most performant way
18:55 - to do it but it works for now um
18:59 - basically optimize it later on if it's
19:01 - just too slow or something is crashing
19:03 - your server
19:05 - but at this point there's one thing i
19:07 - want to
19:08 - kind of point out
19:12 - so basically if for whatever reason your
19:14 - user were to type in extremely fast
19:17 - let me just demonstrate this
19:20 - you see that kind of like froze up the
19:21 - page a little bit and is doing all of
19:23 - these requests to the backend which is
19:24 - not
19:26 - that great
19:27 - so what we can do
19:29 - is if we go to the client
19:32 - and we do an mpm install and go ahead
19:34 - and install a library called lodash
19:36 - they have a lot of helper methods which
19:38 - we can use
19:40 - for looping over objects or arrays or
19:42 - collections
19:43 - but the thing we're interested in is
19:45 - called debounce
19:47 - so inside the song search
19:50 - if i were to just
19:51 - get rid of the server now
19:54 - inside the song search panel i can
19:56 - simply just do
19:57 - import underscore from low dash which
20:00 - will bring in the load hash module
20:02 - and we want to refactor the search
20:04 - method a little bit so that instead of
20:06 - just calling a method each time
20:08 - we want to cal the debounce method
20:11 - so i'm going to go ahead and pass in an
20:12 - async function
20:14 - with value
20:16 - and down here i can go ahead and pass it
20:19 - something like that
20:21 - so very very similar logic nothing much
20:23 - has changed but now if i were to save
20:26 - this
20:27 - and type in
20:28 - modis mouse
20:33 - is awesome
20:34 - notice that only after 700 milliseconds
20:37 - after the user is done typing well it
20:39 - would do that
20:41 - server request
20:47 - so it's just kind of a little bit of
20:48 - optimization just so it's not so like
20:51 - bad when you're doing searches
20:53 - um
20:54 - yeah look in the d bouncer looking the
20:56 - low dash if you want more cool like live
20:58 - library function you can use but
21:01 - cool i think that's
21:02 - pretty much all set up we have the
21:03 - search panel it's searching to the back
21:06 - end the backend is doing queries against
21:07 - the database and it's returning data
21:09 - that is filtered based on what you're
21:11 - searching
21:14 - all right so before we go on
21:15 - implementing more functionality
21:18 - there is one thing that i have you know
21:20 - someone left a comment on one of my the
21:22 - videos
21:24 - about how to do routes
21:26 - so basically if you remember
21:29 - if i were to go to like
21:32 - one of my files where i'm navigating so
21:34 - let's go to header
21:36 - and if you remember that i'm doing this
21:37 - whole navigate to method
21:39 - i actually
21:41 - don't need to do this
21:45 - instead
21:47 - i could just simply do
21:49 - let's say
21:50 - [Music]
21:52 - what's it called navigation
21:54 - [Music]
21:55 - oops
21:56 - navigation link
21:59 - or sorry it's called a router link
22:02 - so i could do router link
22:04 - and then instead of doing this whole
22:07 - click thing i could just say tag is
22:09 - equal to
22:10 - a span which will just kind of replace
22:14 - whatever this is with a span tag
22:16 - and then in that case i could just do
22:18 - two
22:19 - equals and then pass it in object
22:22 - instead of doing what i was doing before
22:27 - so i were to save this now
22:30 - and go up here
22:32 - notice that i can go to
22:34 - the root by clicking that now so
22:38 - i don't need to use this whole navigate
22:40 - to throughout my entire application
22:42 - so if i were to just go ahead and search
22:46 - so find in folder i'm going to search
22:47 - for navigate to
22:49 - i just want to go ahead and remove any
22:50 - instance of navigate to
22:52 - and do something else with it
22:55 - so same thing with the v button in
22:57 - beautify if you look at the docs they
22:58 - give you the ability to pass a again
23:02 - an object to it so i can say
23:05 - do this
23:08 - and i can go to down here same thing
23:12 - in this case i'm just going to go ahead
23:13 - and copy
23:15 - and paste this here
23:18 - and go to login
23:22 - same idea with register
23:25 - so at this point i can just go ahead and
23:26 - get rid of navigate to and the header
23:29 - all the links in the header should work
23:31 - as they did before
23:35 - so that was just kind of a little
23:37 - workaround that i was doing with
23:38 - navigate 2 inside the methods object
23:41 - instead of just using some
23:44 - features that i did not see in the
23:45 - documents but i
23:46 - was aware of them now so
23:49 - let's just go ahead and go through
23:50 - anywhere we can and just remove that
23:53 - navigate to
23:55 - so like in this case i can say two
23:58 - equals again name
24:00 - is songs create
24:03 - and get rid of the navigate to click
24:08 - go down here
24:09 - i could say two
24:11 - is equal to again
24:20 - that object
24:21 - awesome
24:23 - and let's see where else i'm doing it i
24:25 - don't need to use navigate to here so
24:27 - i'll delete that
24:29 - here again i could say 2
24:32 - is equal to
24:33 - the string of the navigate to object
24:42 - make sure that's all working and then in
24:43 - methods i can just remove that
24:47 - and i think if i were to go to songs
24:51 - go to the console
24:52 - i get the strange this uh warning or
24:55 - missing prams
24:56 - thing and basically i'm passing down a
24:59 - props to this panel right here
25:01 - and so at when the page first mounts or
25:04 - when the the main view page or component
25:06 - mounts
25:07 - song is undefined and it gets passed
25:09 - down to edit which means that song id is
25:11 - also
25:13 - not defined
25:16 - so instead of right here instead of
25:17 - doing params equals an object
25:20 - we can have it equal a method which
25:22 - returns an object
25:24 - so that
25:26 - it will dynamically change that id
25:29 - so i'll go ahead and refresh the page
25:30 - just to show that the error message no
25:31 - longer comes up
25:35 - so dynamically change the id
25:37 - as we go through our application
25:42 - it looks like there might have been a
25:44 - bug on the edit page but we can kind of
25:46 - figure that out later on
25:51 - all right so a couple of other things i
25:53 - want to kind of
25:54 - change up a refactor is
25:56 - if i go ahead and just put bogus data
25:59 - inside the login panel notice how this
26:01 - has an ugly
26:02 - background color
26:05 - so i'm going to go ahead and just try to
26:07 - fix that up really
26:08 - quick so i can go to the login page
26:12 - and instead of having error
26:15 - i could do danger alert
26:18 - and just remove error from that
26:22 - just to make that look a little better i
26:24 - think the same thing is happening with
26:26 - register
26:28 - danger alert and remember danger alert
26:29 - is kind of defined as a a global css
26:33 - style so
26:38 - and i think actually create song or edit
26:40 - song may be doing the same issue
26:43 - no we have danger alert there what does
26:45 - edit song have
26:47 - danger alert okay so now
26:49 - that's all good to go i don't think
26:52 - there's anything else that maybe we
26:53 - could uh
26:54 - refactor in the spare time i think
26:57 - actually when you register and login it
26:59 - doesn't redirect you
27:01 - so just to kind of demonstrate that
27:04 - uh i think testing gmail.com
27:13 - actually i'm not sure what we should use
27:15 - i'll say
27:17 - hello
27:18 - gmail.com go ahead and give it a
27:20 - password and hopefully it should
27:22 - register me and it does but it didn't
27:24 - redirect me to anything so on the
27:26 - register page
27:28 - we want to go ahead and say this dot
27:30 - router.push
27:32 - name and i'll say songs so after you log
27:34 - in just go ahead and just push the user
27:36 - to the songs page
27:38 - and we want to do that same
27:40 - functionality
27:42 - for the login view our login component
27:48 - so if i go back to sign up and say
27:50 - something random
27:53 - register takes us to the songs page
27:56 - log out and go back to
27:59 - how do we remember what the username i
28:01 - created was
28:04 - i think it was hello yeah i'm pretty
28:05 - sure it's hella white gmail so i'll try
28:07 - hello gmail.com
28:10 - you know pass it that password
28:12 - and again login has now taken us to
28:15 - that songs page and then lastly there's
28:17 - there's this hello component
28:24 - which takes us to this welcome to your
28:25 - vue.js app page and i don't even want
28:28 - that anymore so first i'm going to go
28:30 - ahead and delete the hello view i'm
28:32 - going to go to my router
28:34 - and i can go here and just delete hello
28:38 - i can delete root we don't need a root
28:40 - anymore
28:41 - and down here we can just have a default
28:42 - path so
28:44 - we can say
28:45 - i think it's path is star
28:48 - and then we can say redirect
28:50 - to songs
28:52 - so basically if you try to hit a path
28:53 - that doesn't exist
28:55 - let's just go ahead and redirect that
28:56 - user to
28:58 - songs
29:02 - let's see no trailing spaces with router
29:05 - index
29:09 - right here's a trailing space
29:13 - so notice now if i were to just go to
29:15 - some arbitrary route it takes us to that
29:18 - and then i think we have a couple
29:20 - components that are going
29:22 - to that root
29:24 - thing
29:25 - so name instead of root
29:27 - let's just say songs
29:32 - so if we long out log out it's going to
29:34 - go ahead and take the user to the songs
29:36 - section
29:39 - and make sure this goes to songs so i'm
29:41 - gonna go to add song go back to that
29:44 - takes us to there i'm gonna log in
29:46 - with hello gmail.com
29:49 - and
29:51 - make sure that logout takes us back to
29:52 - songs whoops
29:55 - might help if i went to a different
29:59 - route
30:00 - before i log out so i'm on the add or
30:02 - crate song
30:04 - click log out it takes us back to songs
30:07 - awesome
30:10 - all right so at this point the ui is
30:12 - looking a little bit pretty good i mean
30:14 - it's looking pretty good we've got some
30:15 - decent functionality going
30:17 - hitting a couple of back and end points
30:20 - now i think at this point i'm gonna try
30:22 - to add a new
30:23 - piece of functionality where we can
30:25 - bookmark songs
30:27 - so to start off before i actually get
30:29 - into doing that
30:32 - i kind of want to
30:34 - do some changes to the back end
30:38 - so that when we add a new model
30:40 - we don't have to clear the database and
30:42 - keep adding that data to the database
30:45 - manually so one thing we can do
30:48 - is if we go into
30:50 - the server folder i'm going to go ahead
30:52 - and create a seed folder
30:54 - and create a new file called index.js
30:58 - and inside this file
31:00 - basically it's just going to be a script
31:02 - which populates our database so if i
31:05 - were to first
31:07 - go into
31:08 - let's see how we do it in our app
31:11 - we bring in
31:13 - sqlize so we're going to do something
31:14 - very similar to that bring in sqlize
31:17 - and we're going to go ahead and call
31:18 - sync and make sure we call force a true
31:22 - and then
31:23 - once sync is done running
31:27 - i can go ahead and just bring in some of
31:28 - those models so like in this case i can
31:30 - bring in the
31:31 - song or i can bring in the user model
31:34 - and what we want to do is have some
31:38 - pre-created json files so i'll say like
31:41 - user.json
31:42 - which has an array
31:45 - and i could do songs on json which also
31:49 - has an array
31:52 - and inside of those
31:53 - we could simply just say s const songs
31:56 - is equal to require
31:59 - a relative path to songs.json and then
32:02 - same thing with users
32:07 - and i'm also going to include
32:09 - bluebird
32:12 - which i think we have installed on the
32:14 - backend already
32:17 - let me just ignore this
32:20 - i don't want the linter to run anymore
32:26 - i can kind of fix those lent issues
32:28 - later on
32:29 - so we don't have to get bogged down with
32:30 - that but basically
32:33 - we're loading in those json files we
32:35 - should just have you know
32:37 - a collection of users and whatnot
32:42 - and the reason we brought in
32:45 - this promise library
32:48 - because we want to make sure that we
32:49 - finish inserting all the users and all
32:51 - the songs before we do some other stuff
32:53 - so what i can do is i can say promise
32:56 - dot all and i could say
32:58 - await
33:00 - in fact i'm going to change this to
33:02 - async function instead of that
33:04 - fat arrow
33:06 - so wait promise not all and i can do
33:09 - i simply do let's say do the songs first
33:11 - or maybe the users first
33:13 - users.map
33:15 - and that's going to take a user object
33:17 - and it's going to return
33:21 - or it's not going to return anything
33:22 - it's actually just going to run
33:23 - something so we can do
33:25 - user dot create
33:27 - and let's go ahead and pass it that user
33:29 - object so basically it's going to run
33:30 - through that json array and for each one
33:32 - create a new user object
33:34 - so it wasn't not that complicated
33:38 - and we want to do the same thing
33:42 - for
33:43 - the songs
33:46 - so
33:47 - song
33:49 - song.create
33:50 - awesome so if we were to assume that we
33:52 - actually have some songs in here
33:54 - and we can kind of populate those so
33:56 - let's go ahead and go to
33:58 - the songs request just get all the
34:01 - response back
34:02 - go over here you can just format this
34:04 - and just go ahead and put that data into
34:06 - our songs json so we have something
34:08 - that's ready to go
34:11 - and then as far as user
34:16 - if i were to log in with
34:18 - testing gmail.com
34:20 - one two three four five seven eight
34:23 - hopefully this lets me log in
34:25 - uh no what was it again hello
34:29 - all right so hello works so let's just
34:30 - go ahead and
34:31 - snag that user
34:33 - and go ahead and format it and we just
34:35 - want to grab
34:37 - that user information there and put it
34:38 - right there and we don't want to put the
34:40 - id because that's going to be auto
34:41 - incremented by the database
34:43 - and we don't care about having a hash
34:46 - for the password so i'll change that to
34:47 - a real password there
34:50 - and i'll change that to testing
34:52 - so that should create when we run this
34:54 - seed function it should create that user
34:56 - called testing at gmail.com with that
34:57 - password and then we should also create
34:59 - all these songs
35:01 - and again we don't want to include the
35:03 - ids so i'm going to remove the ids
35:06 - and we do not care to include
35:09 - either created at or updated at
35:15 - so at this point i think this function
35:18 - should be pretty good to go
35:21 - and before i run this i think
35:24 - one thing we want to do is inside this
35:26 - config file
35:27 - let's go ahead and change where we're
35:29 - saving the storage path because now
35:31 - we're having two different files try to
35:34 - load in that configuration so it may
35:37 - this is going to be relative to where i
35:38 - think running your
35:41 - your process
35:42 - so we want this to store into the same
35:44 - location
35:46 - so in here we can do cost
35:49 - path is equal to
35:50 - require path
35:56 - and then here we can say path.resolve
35:59 - der name
36:00 - so get the actual
36:02 - directory that this config file is and
36:04 - then go up
36:07 - to i think
36:09 - go up to
36:10 - let's see
36:13 - config go up to
36:18 - yeah i think that should work
36:21 - so now i think if we were to run this
36:24 - seed function hopefully everything is
36:26 - good
36:28 - in fact let's not run it yet because we
36:29 - want to make an npm script to do it for
36:31 - us so let's make a new script called
36:32 - seed and basically he's just going to
36:34 - run node
36:35 - of
36:38 - seed cool so at this point
36:42 - we can go make a new tab to the server
36:44 - go into that c project and simply run
36:47 - our seed uh unexpected token
36:51 - hmm
36:53 - totally forgot to add that
36:56 - so let's try it again
36:59 - can i find models and that's because we
37:01 - need to go up a level
37:03 - we need to go into source and we need to
37:05 - go into models
37:07 - i think model says index awesome
37:13 - run that cool we get all of our
37:17 - data dropped and then re-added as we
37:20 - need it
37:25 - so now again whenever we want to run
37:28 - that seed function we can do npm run
37:30 - seed
37:31 - and it will just go ahead and run that
37:33 - seed script drop everything that's in
37:35 - our database and re-insert it so this is
37:37 - really good if someone for your team to
37:39 - just come in and you can make this part
37:40 - your build or your setup to just spin up
37:43 - the database or clear it out as needed
37:48 - all right so now
37:51 - we're getting into the domain of
37:53 - building more complicated models that
37:55 - have associations between them
37:57 - so in order to get our system set up to
38:00 - do that
38:02 - let's go into our models index file
38:04 - and add a little bit of logic to kind of
38:06 - run the associations
38:08 - over our models if they exist
38:11 - so basically we say object.keys db for
38:14 - each
38:15 - function
38:16 - model name
38:18 - and then for each model that we find
38:21 - check if it has an associate method
38:26 - if it does we can just go ahead and call
38:28 - model name dot associate and then pass
38:31 - it the db object
38:34 - so as of right now this doesn't really
38:36 - do anything because
38:38 - we don't actually have
38:42 - any associate methods
38:44 - declared so for instance
38:47 - what can we do with this well if we
38:49 - wanted to add that new feature which was
38:51 - bookmarking songs
38:54 - we need to add a new model called
38:56 - bookmark.js
38:59 - i'm going to rename this one to be
39:01 - song instead of songs
39:04 - but basically if we have a model called
39:06 - bookmark
39:08 - so bookmark
39:10 - and this one is actually going to have
39:12 - nothing
39:13 - in it it's just a default object and
39:16 - we're basically using it for the
39:17 - associations
39:20 - what we want to do is inside we can say
39:22 - bookmark
39:24 - dot associate
39:26 - is going to be a function which takes in
39:28 - a list of models
39:32 - and then what we can do is start
39:34 - associating that bookmark to some other
39:36 - model so we can say
39:38 - bookmark
39:39 - belongs to
39:41 - models.user
39:43 - and bookmark belongs to models.saw
39:46 - because basically we're building an
39:47 - association between the user
39:50 - and the song
39:51 - as a bookmark
39:56 - go ahead and save this
40:00 - and i think
40:02 - that should be all we need to do
40:04 - object.keys i think i need to do keys
40:06 - type that wrong
40:11 - let's see if it works
40:14 - alrighty
40:15 - so
40:17 - now
40:18 - since we made that new object
40:21 - called bookmark it makes sense to go to
40:23 - our seeds let's create a bookmarks.json
40:26 - file
40:28 - let's go ahead and require it
40:31 - and let's go ahead and make it in a way
40:33 - a weight promise
40:42 - so the main takeaway here is make sure
40:43 - that this await to promise all for
40:45 - bookmarks comes after your songs and
40:47 - users because you need them to exist
40:49 - before you try to build up an
40:50 - association so
40:54 - if we go to
40:57 - bookmarks and make that
40:59 - an array we could do a song id is one
41:02 - and a user id is
41:04 - one and that needs to be wrapped
41:09 - all right so basically we're associating
41:10 - user id of one with the song of id of
41:14 - one
41:15 - um so go ahead and run my seed function
41:17 - hopefully it all
41:19 - bookmark is not
41:21 - defined
41:24 - uh here i forgot to define it as
41:26 - bookmark
41:36 - okay so at this point there's not really
41:39 - a good way to grab
41:41 - um
41:42 - the bookmarks so i think
41:44 - we need to start working on the next
41:45 - piece of functionality which is an
41:47 - endpoint
41:48 - to access the bookmarks
41:50 - for a particular song so if i were to go
41:53 - in the routes
41:56 - and i go into
41:58 - here i can say book marks controller
42:02 - and i can say app dot
42:05 - get
42:06 - bookmarks
42:10 - that's going to be the index method of
42:11 - that controller
42:13 - and we can kind of refactor this routes
42:14 - method in in a little bit
42:17 - starting to get a little bit too
42:18 - complicated imagine this having like 50
42:20 - or 100 routes
42:23 - but anyway if we go to the controllers
42:25 - now
42:27 - we can add a book marks controller.js
42:32 - go ahead and copy songs
42:35 - we need book mark here
42:38 - we need an index method let's not worry
42:40 - about the other ones at this moment
42:47 - all right so what we want to do the
42:48 - first step is we want the ability for or
42:51 - we want the user to have the ability or
42:53 - the ui to search for a particular
42:56 - bookmark based off of the
42:59 - song id
43:01 - so if we were to
43:04 - just allow the user to do like
43:07 - something like this so if i were to go
43:08 - to here
43:10 - and say
43:11 - do a get request on bookmarks
43:14 - and do song id
43:16 - is equal to one
43:19 - so like if we wanted to be able to do
43:21 - that
43:27 - let me save this
43:30 - all right so obviously this is not going
43:31 - to return anything because we don't have
43:34 - uh bookmarks yet
43:37 - but if we did
43:38 - we want to be able to grab that song id
43:40 - in the query string so i'll just say
43:41 - song id here
43:45 - and say if
43:48 - up here we can say song id
43:50 - is rec dot query dot song id
43:54 - in fact i'll just do that
43:59 - and go ahead and just cut out some of
44:01 - this stuff
44:03 - so we could do cost book mark is equal
44:05 - to await
44:07 - bookmark.find1
44:10 - because you should only ever have one
44:11 - bookmark that correlates the user to a
44:13 - song you can't bookmark a song a
44:15 - thousand times you can only have one of
44:16 - them
44:17 - so we're just going to use find one here
44:19 - we're going to do where we're going to
44:20 - do where song id is equal to song id
44:23 - which is passed in in the query string
44:26 - and i can go ahead and just kind of
44:28 - delete all this other stuff
44:31 - and return bookmark there
44:35 - right so
44:37 - if the user has
44:40 - a bookmark for a particular song
44:42 - this will return that bookmark otherwise
44:45 - it will return
44:46 - an undefined
44:48 - so to test that out we can go over here
44:50 - and say give us the bookmarks for song
44:52 - id one
44:55 - and this will give us one bookmark back
44:57 - for that song id
44:59 - and
45:01 - we're gonna have to have the
45:02 - functionality to also do a query for the
45:03 - user id
45:05 - and i'll go ahead and just hack in
45:06 - something for right now so if i did like
45:08 - user id
45:09 - is also required
45:12 - so user id
45:13 - user id
45:16 - basically if we were to just pass in
45:19 - that and use your id is equal to one
45:22 - boom we get a result if we do two we
45:24 - don't get anything back
45:32 - uh but i think we probably should get at
45:35 - least something back so what is bookmark
45:38 - actually set to
45:52 - set to null
45:53 - so
45:55 - i think maybe we want to return an empty
45:57 - object instead
45:59 - makes a little bit more sense than just
46:00 - returning a null object
46:06 - well
46:07 - maybe not we'll keep it as null maybe
46:09 - null makes more sense
46:11 - all right so if the bookmark doesn't
46:12 - exist we return null and in the ui we
46:14 - can kind of use this endpoint to say hey
46:18 - i'm on song
46:19 - six have i already bookmarked it and if
46:21 - i have let's go ahead and display a
46:23 - bookmark in a certain style and if i
46:25 - haven't display it in a different style
46:26 - and allow the user to click on it to
46:28 - actually bookmark or unset that bookmark
46:31 - on the song
46:34 - all right so now that we have an
46:35 - endpoint to get back the bookmarks and
46:37 - we have a way to easily spin up
46:39 - a database or refresh it with some good
46:41 - fresh data
46:43 - let's go ahead and go back to the ui and
46:45 - let's try to
46:47 - add a section to the song view page
46:52 - which allows a user to bookmark
46:54 - a song so if i were to go to song
46:56 - metadata which if you remember
46:59 - song metadata looks like
47:02 - this panel right here
47:05 - basically we want to be able to add a
47:06 - bookmark
47:08 - link here
47:12 - so what we can do is
47:16 - right next to this button we can just
47:18 - create a yet another button and
47:21 - it doesn't need a two
47:25 - but it does need a click
47:27 - callback
47:28 - and we can say bookmark
47:31 - in fact i'll just say set as
47:36 - bookmark and i'll say bookmark
47:42 - um
47:43 - [Music]
47:45 - yeah so down here i can go to methods
47:48 - and set as bookmark
47:50 - it's going to be a method
47:52 - make sure we have
47:55 - clicked it
48:01 - so every time i click it it's printing
48:03 - out bookmark
48:04 - and so first of all
48:06 - we're gonna have we could just have two
48:08 - buttons i guess we could have one button
48:10 - which is used for bookmarking the song
48:12 - and the other one
48:14 - for not bookmarking
48:17 - so i'll say bookmark and
48:19 - unbookmark
48:25 - let me just let me just change these to
48:27 - bookmark and on bookmark
48:33 - all right so we have these two different
48:34 - functions
48:37 - one of them should just simply unbook
48:39 - mark or song the other one should do the
48:40 - opposite and bookmark the song
48:43 - and first of all we don't want to
48:45 - display this if the user isn't logged in
48:47 - so i'll say
48:50 - store dot state that is user logged in
48:54 - so only displayed if the user logged in
48:58 - and we can probably refactor this in a
48:59 - little bit to do
49:01 - map state
49:04 - um in fact i'll just do that now so kind
49:06 - of jumping around but we can import
49:08 - something called map state
49:10 - from
49:11 - view x
49:13 - which allows us to inside the computed
49:15 - if we do comp
49:17 - computed
49:19 - is
49:21 - an object
49:22 - where we can do map state
49:25 - of
49:28 - i think we can pass it let's say is user
49:31 - logged in
49:32 - i might have to look up the docs for
49:33 - this one
49:34 - but i'm pretty sure what this does is if
49:36 - you pass it whatever state variables you
49:39 - want
49:40 - it'll just go ahead and put them
49:42 - right on this computed function so
49:44 - instead of having to do
49:45 - stored on say that is user logged in we
49:47 - could just do a shorthand just say that
49:51 - um
49:52 - let's try this out it doesn't work i'll
49:53 - look up the docs
50:02 - right so we're not logged in
50:03 - the buttons do not show up
50:05 - so if i go here and so hello gmail.com
50:10 - and go to
50:16 - that
50:22 - man shoot let me just register something
50:27 - oh it's called testing not hello oops
50:29 - my bad
50:34 - all right so we're logged in now we go
50:35 - to view boom the bookmarks and on
50:38 - bookmarks show up so that's kind of just
50:39 - showing how you can do map state to just
50:41 - grab something from the store and put it
50:43 - as a computed
50:45 - method
50:48 - i might go back through my other files
50:50 - and do that as well
50:52 - not sure if this is better for doing
50:54 - like a map state or maybe you can do a
50:55 - mix-in there's also something called
50:57 - mixes mix-ins in view
50:59 - um we haven't really covered that in
51:00 - this tutorial yet but
51:02 - it might be nice to look that up and see
51:03 - if we can find a use case for using a
51:05 - mix-in
51:08 - but in this
51:09 - what we're trying to do now
51:12 - is we only want to show
51:14 - the bookmark or the unbookmark if the
51:17 - user doesn't already have it so
51:18 - basically
51:22 - when this component is mounted
51:28 - we first let's say we can import a book
51:31 - marks service from
51:34 - services book marks service
51:40 - and if i go to services
51:42 - and i go to
51:43 - copy that
51:46 - and i go to rename this to book marks
51:49 - service
51:51 - again we only have one method so far in
51:54 - the bookmark
51:55 - in point
51:57 - bookmarks
52:00 - and i'll just go ahead and say
52:01 - this requires a song id and a
52:06 - user id
52:15 - i'll just say params for now keep it
52:17 - simple
52:19 - all right
52:22 - so what we have now is the ability to
52:24 - call that bookmark service
52:26 - pass it some params so if i were to go
52:30 - to mounted and say actually async
52:32 - mounted
52:33 - and say
52:34 - const bookmark is equal to await
52:38 - bookmark service index
52:41 - and we can pass it
52:42 - song id of one
52:44 - and pass it user id of one
52:47 - just temporarily
52:49 - we can see if it returns true or not
52:52 - so i'll say
52:54 - bookmark
53:01 - and go ahead and print that out
53:06 - all right so now when the page loads or
53:08 - is mounted we get this bookmark back
53:12 - and be sure to
53:15 - wrap that and get back data
53:21 - so you see here we got a bookmark back
53:23 - for
53:24 - song id1 user id one
53:26 - so if that's the case because remember
53:28 - the other case is um
53:30 - let's say we were to do like
53:32 - use your id of 10
53:35 - just go ahead and refresh the page that
53:37 - should return null right remember the
53:38 - back end returns null for that
53:40 - so if that's annoying at the re-login
53:43 - huh
53:51 - if it returns null we need to show which
53:54 - button we need to show the bookmark
53:57 - button
53:59 - so i can say if the user is logged in
54:02 - and
54:06 - if this dot bookmark
54:08 - is actually defined
54:11 - or if it's not defined actually
54:15 - um
54:18 - in fact
54:20 - i'll just
54:21 - go data up here i'll go say data and
54:23 - just return a data object
54:29 - and say is bookmarked is equal to false
54:31 - and i'm going to set it
54:33 - so this dot is bookmarked is equal to
54:36 - bookmark
54:41 - and just cast it to true or false
54:45 - if it's defined
54:49 - so up here i could say
54:55 - v if it is not bookmarked
54:58 - and then over here i can say
55:00 - v if
55:01 - it is bookmarked
55:05 - and i think that should work
55:10 - let me uh where is that
55:15 - make sure to put this there in the
55:17 - method all right so in this case
55:19 - remember bookmark returned false
55:21 - so we have the ability to click bookmark
55:24 - to set it as a bookmark
55:26 - and then if vice versa if i were to
55:28 - change this back to user id of one
55:31 - save it
55:33 - we should get the unbookmark button
55:35 - awesome
55:39 - so now at this point we actually want to
55:40 - use some
55:42 - of the real data that's returned
55:44 - so if you remember back then a while
55:46 - back and like i don't know which part of
55:48 - the tutorial was
55:49 - but we have access to the user id by
55:52 - doing this dot
55:53 - store.state.user.id
55:58 - so we can dynamically set the user id
56:00 - there and the song id of course is
56:04 - inside of the
56:08 - route
56:10 - so i should be able to just copy and
56:12 - paste um
56:14 - where do we do that view song
56:20 - oh it's actually passed in i think we
56:22 - pass it in as a prop right
56:24 - so
56:25 - what we can do
56:26 - is just say song dot id
56:29 - so now we're gonna do a request for that
56:30 - particular song that we're at using the
56:32 - particular username that we have
56:36 - and save this and see what this does
56:43 - okay so if you remember in that whole
56:45 - seed stuff that we created
56:47 - we went ahead and set that to true and
56:49 - that's why song of id one and the user
56:52 - i'm on is user one this is already
56:54 - bookmarked for us
56:57 - all right so now for the next part we
56:59 - want to be able to click and unclick
57:00 - this button and change the state of the
57:02 - bookmark
57:03 - right so we're going to need
57:06 - to
57:08 - implement these so i can just go ahead
57:09 - and get rid of this
57:13 - and let's go ahead and change those to
57:16 - async methods
57:19 - and the first thing we want to do is
57:22 - we can say post to the bookmark service
57:25 - with song id and user id
57:29 - and i don't think we care to
57:32 - um
57:34 - well
57:35 - i don't think we need the information
57:37 - back so i'm just gonna go ahead and get
57:38 - rid of that
57:39 - but one thing we do need is for whatever
57:41 - reason
57:42 - let's say the endpoint returns an error
57:46 - we want to go ahead and catch that
57:49 - we're gonna try catch
57:50 - and
57:52 - just go ahead and print out in here for
57:53 - now
57:58 - and then same ordeal with
58:01 - unbookmark
58:03 - but instead of post let's just do a
58:04 - delete
58:08 - let's see i think it would make
58:11 - more sense to wrap this again
58:14 - in a try catch just in case our back in
58:17 - for whatever reason decides to fail out
58:20 - and i'll just
58:22 - print out the error
58:24 - all right so now
58:26 - in bookmark service we don't have a post
58:27 - and we don't have a delete
58:30 - so let's go ahead and add those
58:33 - so add in um yeah add a post
58:37 - add a delete
58:42 - and here
58:44 - we can do a post to bookmarks and delete
58:47 - we can actually do a bookmark id
58:53 - bookmark slash
58:54 - bookmark id
58:56 - we don't need the past parameters
59:10 - in fact instead of prams i'm going to
59:12 - say bookmark
59:14 - just so it makes a little bit more sense
59:19 - okay so
59:21 - now we have these extra methods but we
59:23 - don't actually have endpoints to process
59:25 - them so if we go back to the server now
59:28 - we can go back to our bookmarks or
59:30 - should we go back to routes first and of
59:32 - course let's just go ahead and create
59:35 - two more routes
59:40 - so we need a way to post a bookmark
59:43 - and we need a way to delete a said
59:46 - bookmark so i can say book mark
59:49 - id
59:50 - that's going to be a delete method
59:54 - so here if i go to bookmarks controller
59:55 - now
59:57 - let's just go ahead and create those
59:59 - endpoints
60:03 - so
60:04 - post
60:05 - and delete
60:07 - so for post
60:10 - on the body we should have the bookmark
60:12 - so we could just do bookmark
60:15 - physical rec dot
60:17 - body
60:20 - and of course
60:21 - we can say cons to bookmark
60:25 - or just say await bookmark dot create
60:28 - bookmark
60:31 - and then send back the bookmark when
60:33 - it's done creating
60:41 - and these aren't final we're probably
60:43 - going to come back and change these a
60:44 - little bit when we add put a passport
60:46 - and do some more user authentication
60:48 - with the jwt token but i think these are
60:50 - a good start
60:56 - and then for the delete method if we
60:58 - were to come down here and say
61:00 - book
61:01 - mark id
61:03 - and that's going to be from the prams
61:06 - what we can actually do
61:12 - is we simply
61:14 - want to find the bookmark by an id so i
61:17 - can say find by id we can say bookmark
61:21 - id
61:24 - constant bookmark is equal to that
61:26 - and we simply want to call await
61:29 - bookmark.destroy
61:32 - and that will go ahead and delete the
61:33 - bookmark
61:34 - from our database and
61:37 - for what we send back we could just say
61:39 - send back
61:41 - um
61:44 - yeah i guess just this select the
61:46 - bookmark that was destroyed if it was
61:48 - successful
61:57 - all right so just a quick recap let's
61:59 - just make sure this is a work posting we
62:01 - grab the bookmark from the body we
62:03 - create that and then we send back the
62:05 - exact same thing that they sent in
62:08 - and then arrows occurred trying to
62:09 - create the bookmark and then for delete
62:11 - find the bookmark by id
62:13 - go ahead and destroy that bookmark and
62:14 - then send it back to the user if it was
62:16 - successful and then an error has
62:18 - occurred trying to delete the bookmark
62:20 - let me rename this one
62:27 - so assuming all is well
62:29 - if we were to
62:32 - uh refresh this page i saw an error i'm
62:35 - not sure if that's
62:37 - can i read property id of null
63:00 - um
63:02 - it's probably this is not all so
63:08 - i can say
63:14 - if the user isn't logged in we don't
63:16 - even want to do
63:17 - this
63:18 - logic
63:20 - so
63:21 - if
63:23 - this dot is user
63:26 - logged in
63:28 - if they are not logged in let's just go
63:30 - ahead and return for now
63:35 - so that we don't get that error when
63:36 - they try to
63:38 - mount that page
63:43 - cool
63:45 - so one thing that's really starting to
63:47 - get on my nerves is that every time this
63:49 - page refreshes we kind of lose our state
63:52 - or login state
63:55 - so there is a
63:56 - view local storage view x component that
64:01 - we can use
64:02 - it's called ux persisted data
64:07 - so if i were to just go ahead and
64:08 - install this
64:10 - one npm install save boom oh wait there
64:15 - we
64:16 - let's see
64:23 - so install that persisted state and then
64:25 - tell you how to use it until you just go
64:27 - ahead and go to your main file
64:30 - and import it
64:33 - and then go ahead and
64:35 - pass it to your store so actually this
64:37 - needs to be in my store not my main so
64:38 - if i go to the store file
64:41 - and then i go to
64:43 - where i create the store which is
64:46 - line seven i go ahead and pass in
64:48 - plugins create persisted state
64:56 - so
64:58 - the great thing about this is whenever
65:01 - the page
65:02 - um
65:04 - refreshes or whatever it's just going to
65:06 - store or refresh whatever state you had
65:08 - in ux because that's all stored in local
65:10 - storage so notice that i'm already
65:12 - logged in
65:14 - and basically any state such as the user
65:16 - token
65:18 - is user logged in boolean
65:20 - and
65:21 - the user
65:22 - object
65:23 - is going to be grabbed from local
65:25 - storage and put into my view store on
65:27 - initialization
65:30 - so now we can kind of start like
65:32 - debugging and make sure this is working
65:33 - i think there's a little bit more work
65:34 - we need to do but so the first part if
65:36 - we were to click bookmark
65:38 - we noticed that it makes a post request
65:41 - to bookmarks and that returns a response
65:43 - back but one thing i'm noticing is that
65:45 - you can click it multiple times which
65:46 - obviously doesn't make sense
65:48 - and then secondly this bookmark thing is
65:50 - not changing
65:53 - so the first thing i want to do is go to
65:54 - the database
65:56 - side or the server side and make sure
65:57 - that we can't try to bookmark the exact
65:59 - same
66:01 - song more than once
66:04 - so if i go to the server down here
66:08 - and just go ahead and dive down into
66:09 - that
66:10 - bookmark service or bookmark controller
66:14 - so again we're hitting the post method
66:18 - and we need to add a little bit more
66:19 - logic to this to be able to support that
66:22 - so if you were to think if we were to
66:23 - hit the back end with
66:25 - a post endpoint
66:27 - we need to first check if the user
66:28 - already has a bookmark for that song and
66:31 - if they do we can throw back some type
66:32 - of error
66:34 - so
66:35 - um first thing we're going to do is i'm
66:36 - just going to refactor this a little bit
66:38 - to be
66:39 - song id in book or user id
66:44 - so grab those from the body object and
66:46 - put them into song id and user id
66:48 - and we want to first check if that
66:50 - bookmark already exists in the database
66:52 - so we can say cost
66:54 - bookmark equals await
66:56 - bookmark.fine1
66:59 - and then of course where and we just
67:01 - pass those two criteria so song id
67:04 - and user id
67:08 - and i don't know if i mentioned this but
67:09 - in the model when you do relationships
67:10 - or associations
67:12 - it's going to give it um this type of
67:14 - format capital s and then id at the end
67:17 - so capital song id or capital user id
67:19 - and you can overwrite that to be like
67:21 - camel case if you wanted to
67:24 - but i'm just kind of going with whatever
67:25 - the defaults are for sqlize it's not
67:26 - that big of a deal
67:30 - so again we get the request information
67:33 - we check if there's already one in the
67:34 - database
67:36 - and if one exists so if bookmark
67:39 - we can go ahead and just return
67:41 - a 400 error
67:43 - and just give a you know useful message
67:45 - saying like
67:47 - you already have this set as a bookmark
67:52 - so again sending back a 400 status the
67:54 - bookmark already exists
67:57 - and then otherwise we're going to create
67:59 - a new one here so let's go ahead and
68:01 - save this and see
68:02 - how that works out
68:05 - so now when i click bookmark it's
68:07 - getting back an error now
68:08 - because that bookmark already exists
68:14 - before i go further i think i added like
68:15 - before i added a bunch of bookmarks so
68:17 - i'm just going to go ahead and clear out
68:18 - the database
68:19 - so that remember we do npm run
68:22 - seed just to get rid of all those extra
68:25 - bookmarks that we don't really want
68:28 - so i'll refresh the page now and then i
68:30 - can go ahead and just click
68:32 - bookmark
68:39 - and this one's already bookmarked
68:40 - because remember in the seed code we
68:42 - told it to bookmark song one for user id
68:45 - one
68:46 - and i think we're on user id of one
68:47 - right now okay so that should make sense
68:50 - um
68:52 - the second thing we want to do is
68:54 - when we create this bookmark down here
68:56 - we're not actually currently associating
68:58 - it with any song id or user id
69:02 - so we first need to grab the
69:04 - song actually in fact i think i could
69:07 - just do this
69:09 - so i could just say
69:10 - set song id is equal to song id
69:13 - and user id is equal to user id
69:18 - so then when we save it into the
69:19 - database it's going to actually
69:20 - associate with the song id and user id
69:23 - and then we'll have a correct
69:25 - association set up so let's go ahead and
69:27 - try that
69:29 - just to make sure
69:33 - again this shouldn't work
69:35 - all right so i think our post endpoint
69:38 - should be okay if not we'll come back
69:39 - and fix any issues
69:42 - um our delete endpoint again just takes
69:43 - a bookmark id
69:45 - finds that bookmark by the id and then
69:47 - destroys it and sends back whatever so
69:50 - let's go back to our song metadata view
69:53 - and i want to just go ahead and kind of
69:55 - change some of the logic so instead of
69:57 - saying is bookmarked
69:59 - we're just going to keep track of the
70:00 - bookmark so we can have like an id
70:01 - reference and stuff so i'm gonna change
70:03 - those to bookmark and bookmark
70:06 - and then here i'm just gonna say unset
70:09 - as bookmark
70:11 - maybe just unsaid bookmark and then set
70:14 - as bookmark
70:19 - and set as bookmark
70:22 - for the click method and then unset as
70:26 - as bookmark
70:28 - i'll just keep it consistent
70:34 - so let's go down here and rename those
70:36 - methods so remember we had
70:38 - set as bookmark and unset
70:42 - as bookmarked there
70:44 - and then of course for the data
70:47 - instead of having this boolean
70:50 - what we want to do now is we can just
70:52 - keep track of the bookmark that's
70:54 - returned from the backend
70:57 - so instead of saying cons bookmark and
70:59 - then setting this
71:00 - i can just say
71:02 - this dot bookmark and keep track of that
71:04 - bookmark that's returned from the
71:05 - database
71:08 - if there is one
71:10 - and then down here
71:12 - set as bookmark of course would just do
71:14 - the same thing
71:15 - set this.bookmark equal to whatever the
71:18 - backend returns
71:20 - go ahead and just wrap this
71:22 - and return data there
71:24 - and then unsaid as bookmark is going to
71:26 - do a delete
71:28 - method or a delete request
71:31 - to the backend where we're going to say
71:32 - this.bookmark id
71:36 - and then of course when the delete
71:37 - method is done running we'll just set
71:38 - the bookmark to null
71:42 - so let's save this
71:43 - and see how this works
71:47 - so now we have unset as bookmark
71:49 - we click it
71:50 - we see that it makes a delete request to
71:52 - bookmark id of one
71:54 - seems like it worked fine
71:57 - we click says bookmark
71:59 - makes a request
72:01 - and that should be updated
72:03 - so i can just keep on clicking this to
72:04 - unset it or set it as a bookmark
72:08 - to make sure it stays persistent when i
72:10 - refresh
72:29 - so i noticed that this one bug
72:32 - when the page load loaded
72:34 - um we actually got a bookmark back from
72:38 - the uh service
72:40 - i think let me see
72:44 - let me just refresh this one more time
72:52 - all right so we actually are having an
72:53 - issue when we try to post
72:57 - so if i were to go back to
73:01 - our post endpoint here
73:06 - let me just make sure that we're posting
73:08 - the right stuff so i think we are
73:11 - see click post
73:13 - sending song id and user id that's fine
73:23 - i think the issue is here we're only
73:24 - doing a request for user id and we
73:25 - should be doing for both
73:27 - so a little
73:28 - fix for that is instead of having this
73:30 - on the mounted thing because i believe
73:33 - we're passing in that
73:36 - song id reference in a prop
73:39 - if you notice here we're passing in song
73:40 - as a prop
73:41 - so when this is mounted it might not
73:43 - actually have that prop defined yet so
73:46 - instead of doing this in the mounted
73:47 - logic we could say put this
73:50 - in the watch logic so i can say async
73:52 - song
73:54 - and then
73:55 - go ahead and just run this code inside
73:58 - that watchlogic instead
74:06 - okay and then get rid of mounted
74:09 - go ahead save that
74:15 - okay so now it's actually doing the
74:16 - correct request for song id1 and user
74:18 - id1
74:19 - and we should just be able to keep on
74:21 - alternating at this point
74:27 - let's see unset as bookmark
74:30 - make sure that persists
74:33 - click set as bookmark so whenever your
74:35 - refresh is say unset as bookmark
74:38 - all right so everything is working for
74:40 - the bookmarks now
74:42 - and i think at this point we can kind of
74:44 - wrap up this part six
74:49 - and stay tuned for part seven where i'm
74:51 - probably going to start displaying those
74:52 - bookmarks on the main page
74:55 - and again feel free to subscribe to my
74:56 - twitter if you want notifications when i
74:58 - make new videos alright thanks for
75:00 - watching