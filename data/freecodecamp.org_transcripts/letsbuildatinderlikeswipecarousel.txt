00:04 - [Music]
00:06 - hello and welcome to a live stream of
00:08 - dungeons la my name is jason lahara and
00:11 - i'm not going to move my laptop
00:13 - in fear of messing up the hdmi
00:15 - connection but i'm here live with a
00:17 - bunch of people at codesmith's office in
00:19 - venice say hello
00:21 - hey
00:22 - i'm not alone all right uh and i'm gonna
00:25 - share my screen
00:28 - uh
00:32 - and present all right just infinite
00:34 - infinity of screen okay
00:36 - um so yeah uh my name is chase lahar and
00:39 - uh tonight we're going to learn how to
00:40 - build a
00:42 - tender tinder-like uh carousel so this
00:45 - app that you see on the right this evil
00:46 - tinder uh you might see some faces or
00:49 - some things that you recognize um some
00:52 - evil characters uh so we're gonna build
00:54 - this app it has uh a uh like and note
00:58 - button um that we can say yes or no uh
01:02 - and then it has swiping as well so if we
01:04 - swipe left uh there's this little nope
01:07 - animation that comes up where if we
01:09 - swipe right uh it'll be the little like
01:11 - and then when we let go we go to the
01:14 - the next character um so that's what
01:16 - we're gonna build um before we get into
01:18 - it i wanna say thank you to our sponsors
01:21 - so uh here is uh here where we're
01:24 - hosting tonight is code smith if you're
01:26 - not familiar with uh codesmith
01:28 - definitely check them out good smith dot
01:29 - io um they are not a boot camp they
01:31 - focused on
01:33 - programmers who um especially self
01:35 - taught if you're like me and self taught
01:37 - and then you want to kind of up your
01:38 - skills and go to that next level of like
01:41 - developing your software engineering
01:43 - your programming your
01:44 - machine learning skills that's all
01:46 - things that they focus on
01:48 - so definitely check out codesmith.io
01:50 - they have offices obviously here in la
01:53 - and then new york and then oxford
01:55 - university as well
01:56 - and then my employer i'd like to thank
01:58 - them uh is betovi we're a javascript uh
02:02 - consulting company we
02:04 - have a wide variety of clients from
02:06 - small non-profits and startups to
02:08 - fortune 500 companies that
02:10 - we saw and we sign ndas with and can't
02:13 - talk about um we build apps for them
02:16 - we have a team of developers i'm one of
02:19 - them
02:20 - and an awesome user experience team um
02:22 - so we tackle design uh we we tackle
02:25 - building applications from both like the
02:28 - design and the development so check out
02:30 - thetobii.com
02:31 - and that brings me to like why we're
02:34 - here today and what i do uh so i said
02:37 - i'm jason i'm part of the core team that
02:39 - develops a bunch of open source tech for
02:41 - betovi uh that includes canjs john js
02:44 - clgs et cetera so we're going to use kjs
02:47 - today
02:48 - to
02:49 - kind of give us the tools to build our
02:51 - application um and k andreas is
02:54 - a client-side javascript framework it
02:56 - has its roots going back 10 years ago in
02:59 - a framework called javascript and bc so
03:01 - it's been around a long time um but it
03:03 - makes it really easy
03:05 - from to build simple widgets all the way
03:08 - up to scaling to large applications and
03:10 - this is how we build
03:12 - uh apps at bitobi um so it has three
03:14 - kind of main principles um and
03:18 - make sure that my screen is as large as
03:21 - it can be okay
03:22 - um so basically the the core concept of
03:25 - kjs is you build components and a
03:29 - component is a
03:31 - a tag a custom element tag so when you
03:33 - put that tag anywhere in html that that
03:37 - tag gets upgraded into a custom element
03:40 - or into a component
03:42 - and it's rendered with a view so you'll
03:44 - see between the tick marks this is what
03:46 - we call a can stash view who's seen uh
03:50 - like handlebars or mustache before
03:52 - yeah okay so
03:54 - um it's a very it's a similar syntax
03:57 - where wherever you have
03:59 - double curly braces like this
04:02 - that means that that value is going to
04:03 - be replaced with something dynamic so
04:05 - we've got the double curlies and count
04:08 - and kinsash also has a binding syntax
04:11 - for listening to events
04:13 - so this on colon
04:16 - will listen to click events double click
04:19 - mouse out just any dom event that you
04:21 - can think of you can put there
04:23 - and then when that event happens on the
04:25 - element then um then a method fires
04:29 - then the last part so that's so uh
04:32 - custom elements are with tags they're
04:34 - rendered with a view and then the third
04:36 - part is um that's backed by a view model
04:40 - so a view model it's just a model for
04:42 - your view like you're providing whatever
04:45 - properties and methods that you need in
04:47 - your view so in this case we have
04:49 - account property uh that starts off with
04:52 - an initial value or a default value of
04:54 - zero and then we have an increment
04:56 - method
04:57 - so that when um the button is clicked
04:59 - it'll call this method in the view model
05:02 - and we can put whatever logic we want in
05:04 - there so in this case we're just
05:06 - incrementing our our count
05:08 - um and that's it this this is how we
05:10 - build like simple widgets this is how we
05:12 - scale up to
05:13 - entire
05:15 - web applications that are built from
05:17 - these principles so if you have custom
05:19 - elements that are components
05:20 - that have a view uh that are rendered
05:24 - with a via model for all of the
05:25 - properties and actions
05:27 - that's it any any questions comments
05:30 - before we move on
05:40 - yeah so um view and react in angular and
05:44 - kmjs and ember like there there's
05:47 - yeah there's
05:50 - so so when um the toby started 10 years
05:54 - ago there was no view or angular or
05:58 - ember or react so we started developing
06:01 - our own framework and from there it's
06:03 - grown into what we have today with canjs
06:06 - so yeah
06:08 - yeah um there's other companies that
06:10 - contribute to
06:12 - um canjs and other frameworks um but
06:14 - we're the major contributor so
06:16 - um and why like the
06:18 - um maybe a little bit
06:20 - yeah um and we can definitely get into
06:22 - like specifics of like what are the
06:24 - trade-offs and and um
06:28 - like why you would pick hopefully from
06:30 - just going through the
06:32 - um going through the um building an
06:35 - application today you'll get a feel for
06:37 - like
06:38 - oh what you like about this framework
06:40 - hopefully it's all what you like about
06:41 - this room
06:43 - um
06:44 - cool any other questions
06:46 - no okay uh so take your laptops
06:49 - everyone's connected to the internet uh
06:52 - go ahead and go to candidates.com
06:55 - and
06:56 - uh on the left hand side
06:58 - uh that's kjscanjs.com
07:02 - um and then on the left-hand side you'll
07:04 - see a
07:06 - a guides link and then under the recipes
07:09 - section
07:11 - there's a tinder carousel
07:14 - when you click on that you'll end up on
07:16 - this page you can also search for it if
07:19 - you're feeling fancy search for tinder
07:21 - it'll come up
07:24 - can i have
07:25 - a
07:26 - stop
07:27 - when that page when everyone's on that
07:28 - page
07:30 - go to kjs.com and then guides and then
07:33 - under the recipe section there's the
07:35 - tinder carousel
07:37 - everyone good
07:56 - do you have another browser do you have
07:57 - um
07:58 - uh firefox or chrome installed
08:02 - you don't okay
08:03 - um
08:05 - we're just looking here i mean that
08:07 - could be pretty good
08:09 - yeah
08:10 - that that might be the issue yeah um if
08:13 - you're able to download um a newer
08:16 - version of like chrome or firefox
08:18 - um
08:19 - and go from there
08:21 - um
08:24 - cool sounds good
08:26 - um okay so basically how tonight is
08:29 - gonna work is we're gonna go through all
08:32 - of these steps of building the app that
08:34 - i demoed a little bit earlier so we'll
08:37 - uh we'll set everyone up and then we'll
08:40 - go through these steps of like showing a
08:43 - current and a next profile image adding
08:46 - the um i think it was a heart i can't
08:48 - remember what is the like button yeah
08:51 - the like button will add the
08:53 - um the x note button and make those work
08:56 - we'll um make the
08:58 - like sliding and tracking mouse events
09:01 - work um we'll have the overlays we're
09:03 - going to do those all in
09:05 - in steps
09:06 - so i'm gonna talk about the the problem
09:08 - that we want to
09:10 - tackle
09:11 - the
09:12 - um give you everything you need to know
09:14 - to try it out on your own and then i'm
09:15 - gonna give you guys five or ten minutes
09:17 - for each step to actually try it on your
09:19 - own hack away see if you can get it
09:21 - working
09:22 - and then we'll go over a solution
09:24 - together and after that um
09:26 - the site has these really handy
09:30 - uh copy buttons in the like upper right
09:32 - of all of the code examples so
09:34 - don't fret if you
09:36 - it didn't come up with a solution on
09:38 - your own it's really easy to just like
09:39 - copy paste and get up to speed
09:42 - so
09:43 - uh go down to the setup section you can
09:46 - do that from like clicking the nav or
09:49 - this nav or just scrolling down to the
09:51 - setup section and you'll see
09:53 - an almost completely blank
09:55 - code pen and click on the edit on
09:58 - codepen
09:59 - button in the upper right of that so
10:02 - they'll open a codepen um the html field
10:05 - should be blank the css we're not going
10:07 - to worry about styles at all that's just
10:09 - there for us to utilize
10:11 - uh so i'm going to collapse that
10:14 - um but our js let me bump this up js
10:18 - we're going to write a lot of js in here
10:20 - so um we'll we'll expand that up
10:23 - um
10:24 - cool everyone have their their code pen
10:26 - open you don't have to sign up or
10:28 - anything just open it we'll edit away
10:30 - um cool so let's go through
10:34 - uh what the javascript does
10:37 - it's
10:38 - fairly straightforward who has seen the
10:41 - es6 import syntax before who has seen
10:44 - this like import
10:46 - yeah so
10:47 - um until recently the best way to load
10:50 - scripts was with a script tag and
10:54 - that
10:54 - puts something on the window and you
10:56 - start using it
10:58 - which isn't great for maintainability or
11:00 - modularity or what have you um so in
11:02 - canjs you can use the um the native
11:06 - import statements this isn't running
11:07 - through like
11:09 - uh
11:11 - webpack or steel.js or any of the other
11:13 - bundlers
11:15 - it'll load this file and then import
11:16 - this module out of it so components is
11:18 - basically all we need to build a kjs
11:21 - application
11:22 - um so we're gonna we're gonna make heavy
11:24 - use of uh of component tonight um so the
11:28 - first thing that i want to do is kind of
11:31 - similar to what we had on the home page
11:33 - i want us to
11:34 - create a component
11:36 - we're going to create an evil
11:38 - tinder custom element
11:40 - and when that is in our html i want it
11:43 - to render
11:45 - uh
11:45 - to render this html so
11:48 - you might tell me okay well i can put
11:50 - that html in there and then it's done
11:54 - but we're going to want to make this
11:55 - dynamic we like right now
11:57 - the current and the next it's all
11:59 - hardcore coded in there so that's why
12:02 - we're going to want to have that as a
12:04 - component in our javascript
12:06 - uh so what do we need to know okay so
12:08 - we've been through some of this already
12:10 - so we can use components and we'll use
12:13 - component.extend
12:14 - and we'll set evil tender as the
12:18 - excuse me as the tag
12:20 - so when we have
12:22 - you know brackets evil tinder in our
12:24 - html the component will take over
12:26 - um and then in our view we want
12:28 - everything up here so i would make heavy
12:31 - use of this copy button you can copy
12:34 - copy that html and you're going to want
12:35 - to put it in your view and then
12:37 - viewmodel we don't need it yet there's
12:39 - nothing dynamic yet but go ahead and
12:41 - toss that in there because we're going
12:42 - to be adding properties and methods and
12:44 - stuff
12:45 - pretty soon
12:47 - so go ahead take a couple minutes on
12:48 - your own
12:50 - to create the evil tinder components
12:52 - that has
12:54 - this html rendered as its view and then
12:57 - we'll go over a solution together in
13:00 - a few minutes
13:06 - do you want to try to
13:08 - okay
13:18 - and always feel free to raise your hands
13:20 - if you have any questions throughout the
13:23 - night
13:24 - i'm happy to help
13:44 - foreign
13:49 - okay
14:12 - uh
14:26 - it might just be the styles
14:28 - [Music]
14:54 - oh here we go
14:56 - okay austin thank you
15:11 - is
15:53 - i'm sorry
15:55 - i think the browser is just old enough
15:57 - that yeah
15:59 - that's not gonna load
16:00 - sorry about that
16:07 - who feels like they're coming to a
16:08 - solution they've got got it working
16:12 - got one two three four
16:14 - five
16:15 - it's most people
16:17 - okay cool let's let's go through a
16:18 - solution together
16:20 - um
16:21 - who wants to get me started
16:24 - who can give me step one
16:26 - or their step one there's no
16:29 - it's no actual step one
16:33 - yeah let's do it okay
16:37 - all right so what are the three things
16:41 - uh which is evil tinder
16:44 - all right
16:50 - i'm gonna totally copy paste this
16:54 - from over here
16:59 - if you're ever frustrated with the
17:01 - alignments in
17:02 - um in the editor
17:04 - um at least on a mac you can
17:08 - hold down the shift key and then click
17:10 - to another
17:11 - um another like place on the document
17:14 - and then you can
17:16 - tab everything all at once
17:18 - that's why um okay so we've got our view
17:21 - and then what's our last thing
17:24 - yeah let's add that
17:26 - it's just gonna be an empty object
17:29 - okay we don't have anything rendered yet
17:32 - what's our last step
17:35 - yeah
17:36 - so in our html we'll put
17:39 - evil tinder
17:42 - boom all right
17:45 - i'm gonna collapse this because we
17:48 - we don't need this anyway all right all
17:50 - right so we've got our
17:52 - uh we've got our custom element we've
17:54 - got our view
17:55 - it's actually rendering and page this
17:58 - looks good who has questions comments
18:02 - anything you guys want to talk about
18:03 - before we move on to the next step
18:09 - nope cool
18:12 - all right so
18:13 - uh if you okay so if you keep scrolling
18:15 - down on the page uh you'll see the the
18:18 - solution uh section um i'm gonna just
18:21 - add a habit i'm gonna copy paste this
18:23 - every time just to make sure i have
18:25 - exactly what's uh what's there so i'm
18:27 - gonna i'll delete what's in the
18:29 - javascript and paste in and then i it's
18:31 - probably exactly the same uh but to make
18:34 - sure we're naming things the same
18:36 - um okay
18:38 - uh
18:39 - next okay so we wanna show so right now
18:42 - in
18:43 - um in our app we have this um
18:46 - this current image and this next image
18:48 - hardcoded and we want to make this
18:50 - dynamic so we want to have an array of
18:54 - images so these are all of the urls to
18:57 - the different characters that we have so
18:59 - instead of having these hard-coded we
19:01 - want to put this
19:03 - in our viewmodel and then show a current
19:06 - image and a next image so our current
19:08 - image will just be whatever is first in
19:10 - the array and then the next image is
19:12 - what's next in the array um
19:15 - so what do we need to know okay so
19:18 - um
19:19 - we we already actually talked about this
19:21 - a little bit so when we have properties
19:23 - in our view model
19:26 - those are made available to us in our
19:28 - view so in this example we add a
19:31 - profiles property
19:33 - basically all of the the keys and this
19:35 - object
19:36 - are the properties that we want to make
19:38 - available
19:39 - so we have this profiles property that's
19:42 - available to our view and then
19:45 - this bit is kjs specific so we're saying
19:47 - the default or the initial value for
19:49 - this property is going to be what's
19:51 - returned by this function um so this
19:54 - little bit of syntax is the like is the
19:57 - like getter syntax in es5 es6 yes
20:01 - yes what i i don't remember which uh
20:04 - which spec this was added in um so this
20:07 - is saying okay this this default is a
20:09 - function that returns um returns an
20:12 - array um so in this case we just have an
20:15 - abbreviated version we just have the
20:17 - uh an array of a couple of things um
20:21 - and then
20:22 - uh
20:24 - the
20:24 - next thing about that is
20:27 - the um so in this example the profiles
20:32 - in the view comes from the view model
20:34 - and then there are helpers for
20:36 - um being able to like do stuff in the
20:38 - template so we're not gonna go through
20:40 - all of the docs but there's uh helpers
20:42 - like if and each and things to um to be
20:47 - able to like do loops or conditionals or
20:49 - that sort of thing the other question
20:51 - yeah sorry can you go over that again
20:56 - yeah so this so this view model has all
21:00 - of the like properties and actions that
21:02 - are made are made available to our view
21:05 - and then so for properties um they
21:08 - basically have a like type definition so
21:12 - um this is kind of like setting up what
21:15 - that property is going to be like
21:17 - so we have a this default getter is
21:21 - basically whatever the initial value is
21:23 - for the property um there's a couple of
21:26 - other we'll we'll kind of get into a few
21:29 - other things
21:30 - that we can put in this type definition
21:33 - of like
21:34 - getters and setters and and that sort of
21:36 - thing but to start off we're just going
21:38 - to have uh this default method does that
21:41 - make more sense yeah does it um does it
21:44 - have anything to do like is there any
21:46 - cores issue if it's getting
21:49 - images from a different source
21:52 - uh there shouldn't be and um we uploaded
21:54 - all of these images to github's uh
21:58 - server specifically because their server
22:00 - is meant for
22:02 - putting images you know wherever you
22:04 - want um so that's why
22:06 - there shouldn't be any issues with
22:08 - loading these
22:09 - good questions yeah
22:13 - yeah okay so basically um in our stash
22:17 - templates wherever we have
22:19 - um curly braces or double curlies um
22:22 - that's where like stash is taking over
22:25 - and it's going to do something special
22:27 - so like here we have the double curlies
22:30 - and then we're just printing a
22:32 - property value and that's kind of the
22:34 - most simple case and then second to that
22:37 - is whenever we have the
22:39 - hash this means okay i'm calling like a
22:42 - helper function um that's
22:45 - that's made available by the like
22:47 - templating engine um so
22:50 - there's a bunch of different helpers
22:52 - like each hash if
22:55 - uh
22:56 - just various things um and we'll we'll
22:58 - go through a few of these
23:00 - does that make more sense sweet
23:03 - cool
23:05 - any other questions before we
23:07 - okay
23:08 - so
23:09 - we've talked about
23:11 - um
23:12 - we the images that we want to show
23:15 - we've talked about adding something to
23:17 - our view model to make it available to
23:18 - our view
23:20 - um
23:20 - and uh there's so one more
23:24 - kind of syntax that you can have in your
23:26 - view model is this getter syntax so this
23:30 - isn't specific to ks if you've seen the
23:32 - getter syntax and
23:34 - again es5 es6 i don't remember which
23:37 - spec
23:37 - um this is just saying okay
23:41 - this is a property name and then this is
23:44 - a like getter function for that so
23:46 - whatever is returned in this function is
23:49 - going to be the value of that property
23:52 - um so we could have done the same thing
23:53 - up here where this could have been like
23:55 - get profiles and then just returned the
23:59 - array um it's a same
24:02 - or a similar idea
24:04 - um so this is going to be helpful for us
24:07 - because
24:08 - you can imagine there's a current
24:10 - profile you might want to make a next
24:11 - profile and then
24:13 - this is how you can get something from
24:15 - the profiles array and um and return it
24:19 - as the value
24:21 - so you can create a like next profile
24:23 - property that gets the like second thing
24:30 - cool any questions before
24:32 - i let you loose
24:35 - no
24:36 - okay
24:37 - take a few minutes uh
24:40 - try and make
24:41 - the
24:42 - um let me go back to the html try and
24:44 - make this
24:47 - uh
24:48 - this current image and this next image
24:51 - dynamic
24:52 - with stuff that you put in our in the
24:55 - view model so you don't want to have the
24:57 - hard-coded like image source here
25:00 - you want to have that be some value that
25:03 - you get from the view model
25:14 - and again please just put up your hand
25:16 - if you have any questions i'm happy to
25:19 - explain more
26:17 - um
26:59 - um
27:25 - oh
27:37 - all right
27:48 - okay
28:12 - uh
28:25 - foreign
28:32 - foreign
29:00 - um
29:15 - foreign
29:26 - okay
29:46 - so
29:57 - uh
30:33 - um
31:30 - who feels like they're starting to come
31:32 - to
31:33 - a little bit of a solution
31:36 - yeah all right we'll go through it
31:38 - together then
31:40 - um
31:43 - who wants to get me started where where
31:45 - should i start from here
31:49 - the images
31:51 - change the word sources
31:55 - okay
31:56 - uh sorry say that again
31:58 - so
32:10 - is
32:20 - okay
32:21 - should we do the same for
32:24 - this guy
32:26 - uh
32:26 - i'm gonna call this next profile.image
32:30 - okay
32:31 - i like where this is setted what's next
32:38 - did you need to create
32:40 - yeah let's do it so
32:43 - uh should we start with profiles or the
32:45 - current profile in next profile getters
32:48 - uh
32:49 - oh
32:51 - all right let's do that so we'll do
32:53 - get
32:54 - uh current profile
32:58 - uh so this is a kind of standard syntax
33:01 - uh getter uh so in here we can return
33:03 - whatever we run we want uh who's who's
33:07 - got a line for me
33:10 - should we return uh
33:14 - yeah so
33:15 - we'll need to define this profiles
33:17 - proper property but yeah
33:19 - so this top profiles.get
33:22 - we'll do the same thing for uh next
33:24 - profile
33:25 - um so we'll have a getter for it
33:28 - and then we'll return the stop profile
33:30 - so i've got
33:31 - one
33:33 - since that's the second thing in the
33:35 - profiles array uh and what's our last
33:37 - one
33:40 - it's the last little bit that we need
33:42 - all right
33:45 - yeah
33:45 - so
33:46 - uh we could
33:49 - say like get profiles
33:52 - and
33:53 - return
33:54 - this array so that's one way of doing it
33:57 - what we showed in the like what you need
33:59 - to know was a little bit of a different
34:02 - syntax
34:03 - of
34:04 - saying okay we're going to have a
34:05 - profiled property and then this object
34:08 - is what defines what that property is
34:10 - like so
34:11 - in here
34:13 - this syntax kind of gives us a lot more
34:15 - options of what we can do so we could
34:18 - have the same thing as the getter syntax
34:21 - uh
34:21 - with a
34:24 - with a get method that returns the array
34:27 - uh i think what we actually want to do
34:29 - is just
34:30 - define a
34:32 - default value
34:34 - which is going to be the array so the
34:36 - difference in like a default versus uh
34:39 - get is that this is saying the this is
34:42 - an initial value it's not going to
34:44 - change you can modify this property
34:46 - but
34:47 - if you need an initial value or a
34:50 - default value then here's one for you
34:52 - whereas the get is saying
34:54 - anytime you access this property here's
34:56 - what your
34:58 - here's what we're going to return
35:00 - um okay so
35:03 - uh see if this actually works so in the
35:06 - in the problem section
35:08 - it says
35:09 - um we can kind of play around with the
35:12 - consoles to see if this like actually
35:15 - made it dynamic right it looks the same
35:17 - i guess we could
35:19 - one way we could do it is we could
35:20 - remove stuff from here and see if it
35:23 - updates correctly okay so that's that's
35:25 - one way of testing it another way is
35:28 - uh codepen makes a console available to
35:31 - us so in the bottom left there's this
35:33 - console button you don't have to do this
35:35 - you don't have to follow along along but
35:37 - i want to show it um so
35:39 - it has there's this console button that
35:41 - pops open this little section and then
35:43 - we can
35:45 - paste in what we had before so this is
35:47 - saying
35:49 - document.queryselector this is like a
35:50 - native dom api
35:54 - native browser api that says i want to
35:57 - give you a css selector and i want i i
36:00 - want a single element that matches that
36:01 - selector i want the first element that
36:03 - matches that selector so we're getting
36:05 - our evil tinder uh custom element um and
36:09 - then on it is a viewmodel property and
36:12 - then we've got all of the data that's in
36:14 - our viewmodel so the same thing that's
36:16 - rendering the view is in this viewmodel
36:20 - property so we're accessing profiles and
36:22 - then we can call shift
36:24 - which
36:25 - i have a hard time
36:28 - bringing
36:29 - and splice the array methods shift is
36:31 - the one that pops off the first thing uh
36:34 - from the
36:35 - the first index of an array or zero
36:37 - index of an array
36:39 - so when we run that in our console um
36:41 - that'll actually like
36:43 - modify our viewmodel which updates the
36:45 - view automatically i'm going to do that
36:47 - again do that a couple times we're going
36:48 - to write code that does
36:50 - the same thing
36:54 - uh any questions before we move on to
36:57 - uh probably adding like and note buttons
37:00 - any questions before we move on
37:05 - no cool okay um if you want to you can
37:08 - do the same thing that i'm going to do
37:09 - every time under the solution there's
37:12 - the copy button
37:13 - and i'm going to replace all of this i
37:15 - think it was i think it was basically
37:17 - the same thing
37:19 - in a different order but same code
37:23 - um
37:24 - okay
37:25 - we're gonna add a like button okay so
37:27 - when someone clicks on the like button
37:29 - which is this this heart this green
37:31 - heart button uh at the bottom uh we
37:33 - wanna console log
37:35 - liked and then we want to remove the
37:37 - first profile image the same thing that
37:39 - we were doing in the console earlier we
37:42 - want to remove the first profile image
37:43 - so it comes off the stack
37:45 - and then show the next one in the list
37:48 - so what do we need to know well uh just
37:51 - like the example on the home page we can
37:53 - use on
37:54 - colon syntax to listen to whatever event
37:56 - so we can listen for
37:58 - click events on that like button um and
38:01 - then
38:02 - inside here is the method in the view
38:05 - model that we want called so this isn't
38:08 - going to like call that method as the
38:11 - template is being rendered it'll call it
38:13 - once
38:14 - once the button has been clicked
38:16 - so in our view model we can define
38:19 - a an action or a method like this and
38:23 - this is just kind of standard syntax for
38:25 - um for defining a a method so um we can
38:29 - have do something it can take arguments
38:31 - so like in this example we're passing
38:33 - dance
38:34 - uh from the view into the view model and
38:37 - then when that button is collected we'll
38:39 - make the alert um and then the last
38:41 - thing shift shift is what you're looking
38:43 - for to pop off the
38:45 - zero index uh
38:47 - of something in an array
38:49 - um that's it go ahead and take a couple
38:52 - minutes any questions before we
38:54 - break for hack
38:56 - no okay cool so you want to make this
38:59 - you want to make this like button
39:01 - actually like do something
39:18 - so
39:28 - all right
40:19 - come on
40:52 - um
41:32 - uh
42:28 - who feels like they've come to a
42:30 - solution
42:45 - take another minute and then we'll go
42:47 - through a solution together
43:01 - so
43:22 - here
43:37 - foreign
43:40 - all right
43:41 - who wants to get me started with a
43:42 - solution
43:45 - what should i do first
43:49 - uh
43:50 - define the function in your viewmodel
43:53 - let's do it what do we want to call it
43:56 - um
44:01 - i'll go with likes profile
44:03 - okay
44:04 - uh so we've got our
44:07 - method
44:08 - uh inside here what do we want to do
44:15 - yeah oh you want console.log as well we
44:18 - can do both
44:19 - so we'll do a console log uh i think we
44:23 - have all caps liked
44:25 - and then
44:26 - um this dot profile slash shift so um we
44:29 - haven't quite gone over it nope
44:33 - nope
44:35 - oh that was exciting
44:42 - we're
44:43 - we're having screen issues all right
44:45 - there we go
44:47 - that's okay
44:49 - uh let me switch back to
44:52 - not showing my face
44:57 - sweets
44:59 - and then let's
45:01 - not have this be a million times smaller
45:04 - oh
45:06 - sorry guys
45:08 - uh
45:09 - [Music]
45:13 - sweet okay
45:15 - all right
45:17 - i think we're back on track
45:19 - i get this right okay
45:21 - uh okay so um one thing we haven't like
45:24 - 100
45:25 - talked about but now is as good of a
45:26 - time as ever so this this
45:29 - inside the
45:31 - inside of like these scatters and this
45:33 - action this always refers to an instance
45:36 - of this
45:38 - view model so essentially what ks does
45:41 - is it takes this viewmodel
45:43 - object and it uses it as
45:46 - uh as like the base for creating new
45:48 - instances of the v model for each
45:51 - component so
45:53 - in our app we only have the one instance
45:55 - of
45:56 - um we only have this like one evil
45:58 - tinder but if we had multiple evil
46:01 - tinders in here
46:03 - they would each have their own instance
46:05 - of the view model so if we
46:08 - swiped on i don't know if i can actually
46:10 - show this
46:13 - so if we like
46:16 - um
46:17 - oh we uh can i show this not yet okay um
46:21 - so if we like made modifications in one
46:23 - component it wouldn't affect the other
46:25 - it's a new instance of the view model
46:27 - for every
46:28 - every like html custom elements that's
46:31 - in the page um so that's what the this
46:34 - refers to
46:36 - um
46:38 - that's what the this refers to inside
46:40 - here
46:41 - um so okay so last thing we need to do
46:43 - is actually hook this up
46:45 - um so on our like button
46:48 - i'm gonna add the on colon click
46:52 - and we're gonna call like profile so now
46:55 - when we click on
46:57 - uh when we click on the heart uh we've
47:00 - got the first one disappearing and then
47:03 - in our console we can open up the
47:06 - the uh codepen console and we'll see
47:08 - lights lights light
47:10 - for every time let me clear that for
47:12 - every time that we click on the like
47:16 - cool any questions
47:17 - any comments
47:20 - nope
47:21 - okay
47:22 - let's create a nope button i'll give you
47:24 - guys a minute or two and do basically
47:27 - the same thing just hook up the note
47:29 - button maybe add a console log that says
47:32 - noped
47:33 - uh
47:37 - actually i'm gonna copy paste the
47:39 - solution so we're all on the same page
47:42 - yeah this one had its method called like
47:44 - so go ahead and create a
47:47 - working note button
49:08 - so
49:16 - where's there no button working
49:19 - sweet
49:22 - let's make this one work okay so
49:27 - just we'll have our note method let's
49:29 - say
49:30 - note
49:31 - um we're going to do the same this
49:33 - profile shift we're not doing anything
49:35 - special there we're just removing the
49:37 - top one and then
49:39 - on our
49:41 - disk button we're going to say on click
49:44 - nope
49:46 - and call that method then when we open
49:49 - the console
49:51 - we should see when we click liked we've
49:53 - got liked and when we click nope we've
49:55 - got
49:56 - notes
49:58 - sweet any questions
50:05 - all right now we're gonna make this
50:07 - more interactive not just button clicks
50:10 - now when we swipe on these images we're
50:14 - actually gonna move them left and right
50:16 - so
50:17 - let's go through what we need to know
50:18 - for that oh actually i'm gonna like
50:20 - always i'm gonna copy the solution make
50:22 - sure we're all on the same page
50:25 - sweet okay um
50:27 - so dragon move the profile to the left
50:29 - and right so
50:31 - when
50:32 - as the user drags left or right the
50:36 - image will essentially kind of just move
50:38 - left and right we're not going to do
50:40 - um we're going to keep it simple we're
50:42 - not going to do like complete tracking
50:44 - of like wherever your your mouse or your
50:47 - finger moves
50:48 - we're just going to move
50:51 - move horizontally
50:53 - we want it working on desktop and mobile
50:55 - so if you were to pull out your phone
50:57 - this would actually like work on your on
50:59 - your ios or android device um
51:02 - and the element that we want to move is
51:04 - the current one so we're gonna
51:06 - specifically
51:07 - like we specifically want this div to be
51:09 - the thing that we're moving back and
51:11 - forth we don't want to move
51:13 - like anything else in our uh in the dawn
51:16 - um so what do we need to know okay so
51:20 - the first thing is that the way that
51:22 - we're gonna move it is just with css um
51:25 - so we're gonna
51:27 - assign a left style
51:30 - essentially to the image to
51:33 - to move it back and forth so essentially
51:37 - this would be similar to
51:40 - if you oh that is not readable
51:43 - oh that's also not readable
51:45 - um
51:48 - move
51:48 - this
51:50 - okay so
51:52 - this is the same as saying
51:55 - this this div that is the you can kind
51:58 - of see on the right that it's
51:59 - highlighting the current image so this
52:01 - div is what we want to manipulate to
52:04 - move back and forth so if we if we give
52:06 - it a left of 100 pixels you can see that
52:09 - it'll it'll jump that way and then as we
52:12 - as we change this value that's how we
52:14 - can have the image like be moving and
52:17 - then essentially if we
52:19 - go into negative values it's the same as
52:22 - like swiping left so positive negative
52:25 - values are all allowed here so we want
52:27 - to do this except with javascript and we
52:30 - want to be able to
52:31 - have that actually track where the where
52:33 - the mouse is moving
52:35 - um so to do that
52:38 - um
52:39 - oh sorry last thing is that so we can
52:42 - um so in our in our view model we can
52:45 - have like a
52:46 - left property or how far we have moved
52:49 - property and then render that in the in
52:52 - the view
52:53 - with the double curlies so
52:56 - just like a normal html attribute
52:59 - and then inside there we'll have the
53:00 - double curlies for the viewmodel
53:02 - property
53:03 - so we'll do that we'll define
53:05 - how far we have moved as a number again
53:08 - the viewmodel is just
53:10 - whatever is to the right here is just
53:12 - saying
53:13 - like a type definition so this is a
53:15 - shorthand to say
53:17 - number or string or at any value or what
53:21 - have you
53:24 - the next thing is that we're going to
53:25 - need to listen for when
53:28 - the
53:30 - when the current element moves that
53:32 - current div when it moves um so kenjus
53:36 - has this way of um of listening for
53:39 - events or
53:41 - let me take a step back kjs
53:43 - has a way of being letting your code be
53:46 - notified when
53:47 - the custom element has come alive or
53:50 - it's been inserted into the page so
53:53 - all of these view models are like new
53:56 - unique instances and when a new one is
53:59 - created for an element that's in the
54:01 - page this connected callback
54:03 - uh method is called on your viewmodel
54:07 - and it's give and you're given the
54:09 - custom elements so in our case this l
54:12 - would be this l variable would be the
54:14 - evil tinder custom element
54:17 - um so this matches the custom elements
54:20 - spec so
54:21 - this isn't
54:23 - basically ks matches what is
54:27 - um what is specified in the custom
54:29 - elements spec um so connected callback
54:32 - lets us know okay our element has been
54:34 - inserted into the dom which means we can
54:36 - start like doing dom related things um
54:39 - so we can get a reference to our
54:41 - to that div to this
54:43 - where is it to this uh current div
54:46 - by using
54:47 - the query selector
54:50 - method that's on every html dom element
54:54 - um
54:57 - um so that's how we can get a reference
54:59 - to current
55:00 - and then
55:01 - kjs gives us a way to listen to
55:04 - events and before i get into the kanji s
55:07 - part i want to talk about
55:09 - um i want to talk about events so
55:13 - for years there were just desktop
55:14 - browsers that had events like mouse over
55:17 - mouse out mouse move mouse mouse all the
55:20 - things right and then
55:21 - started having mobile browsers and there
55:23 - was a different api that was implemented
55:26 - that were all touch events so instead of
55:28 - mouse
55:30 - mouse events it was all touch events
55:32 - and eventually
55:34 - most of the browsers came to a consensus
55:36 - to implement uh what's called the
55:39 - pointer events api so this is uh
55:42 - this is a standard api that essentially
55:46 - melds together the mouse and touch
55:49 - events
55:50 - and puts it into pointer events so like
55:53 - mouse down there's a pointer down or
55:55 - mouse move there is a pointer move of
55:57 - course not all devices are going to fire
56:00 - all of the same events right like
56:02 - there's um for stuff that would be
56:05 - related to hover you don't have like a
56:07 - hover state in
56:09 - on mobile right but
56:11 - um for
56:12 - um for things where there are there is
56:15 - an analogy there's uh pointer events
56:18 - um every browser except one has
56:20 - implemented the spec
56:23 - that one browser is safari it's not
56:25 - internet explorer it's safari actually i
56:27 - don't know if internet explorer ever
56:29 - supported it i know edge supports
56:31 - pointer events uh safari on desktop and
56:34 - mobile uh they so far they have refused
56:36 - to implement this spec um so we can use
56:39 - what's called a polyfill who's who's
56:41 - heard of the term polyfill before okay a
56:44 - few people so a polyfill basically says
56:47 - okay i'm going to write javascript to
56:49 - mimic the same apis that are native to a
56:53 - browser if they were to implement
56:55 - those apis so
56:57 - um
56:58 - in our codepen i actually already set
57:00 - this up so under settings you'll under
57:03 - javascript i added this pepj
57:07 - pointer event
57:09 - uh
57:10 - i can't remember what the p stands for
57:12 - uh it's a polyfill for uh for safari so
57:15 - that's already loaded if you pulled it
57:16 - out on your on your phone um on an ios
57:19 - device it would just work um so we're
57:21 - gonna be able to use these pointer
57:23 - events and just not give any cares about
57:26 - safari support
57:28 - so
57:29 - we can listen to these events with some
57:32 - apis that kjs provides
57:34 - so
57:35 - this dot listen to
57:38 - is an api inside of our view model that
57:41 - lets us provide the three things the
57:43 - object that we want to listen to the
57:45 - events that we want to listen that are
57:47 - being dispatched from that object and
57:49 - then a callback when those events fire
57:52 - so
57:53 - in our case we want to listen for
57:55 - um we want to listen on the current div
57:59 - whenever there's a pointer down which is
58:01 - like a mouse down or a touchdown um i
58:04 - don't know if the event is actually
58:05 - called touchdown but uh we want to
58:07 - listen to a pointer down event and then
58:10 - when that happens we'll we'll have our
58:13 - code um we'll have a callback called um
58:16 - we already talked about the oh the p
58:19 - stands for polyfold uh pointer event
58:21 - polyfill that's pepjs
58:24 - um
58:25 - there's a couple of attributes that we
58:27 - need um so you noticed earlier when i
58:29 - was when i was dragging with our code as
58:32 - is like the browser will be helpful and
58:34 - be like oh you're
58:35 - you're like dragging an image let me
58:37 - give you that to you so you can put it
58:39 - somewhere else or whatever we want to we
58:41 - do not want the browser to do that so
58:43 - there's a couple of attributes that we
58:45 - can that we can add so there's a touch
58:48 - action on um on mobile devices
58:51 - and then draggable or draggable false
58:54 - is what we can use for desktop
58:57 - browsers to say don't give me the
58:59 - default dragging behavior let us handle
59:02 - it on our own
59:04 - um and then
59:06 - the
59:07 - so inside we we already talked about
59:09 - like listening to pointer down events so
59:12 - inside of our callback um we have access
59:14 - to this event variable that's passed
59:17 - through our callback
59:18 - event has the super
59:21 - useful property of client x
59:24 - which is the current position of the
59:27 - pointer device mouse or finger or what
59:29 - have you
59:31 - so this is what we can use to see where
59:34 - the mouse is
59:36 - currently so that's going to be super
59:38 - helpful because when
59:40 - there's a pointer down event
59:42 - we can grab the
59:44 - event.clientx and have that be our
59:47 - starting place and then when we receive
59:50 - any other pointer events for the
59:52 - um for the movement of the mouse
59:55 - that's how we can calculate the delta
59:57 - between our starting place and then
59:58 - wherever the user currently is which is
60:01 - how we can do the the left positioning
60:05 - essentially
60:06 - so
60:06 - this will be so in pointer down we can
60:08 - listen for
60:10 - that to find out the like initial value
60:13 - and then we can listen to pointer move
60:14 - to
60:15 - when the like mouse is actually moving
60:17 - or your finger is actually moving across
60:19 - the screen
60:21 - uh this is a little bit different so
60:23 - pointer move so
60:25 - here we're listening on documents
60:29 - anyone want to guess why we would listen
60:30 - on document instead of currents
60:38 - it will be for
60:39 - a while and then eventually you're going
60:42 - to be moving off of it
60:44 - and or you would otherwise be moving off
60:46 - of where it is initially positioned
60:49 - and then
60:50 - you lose track of those events um so
60:53 - that's why we want to listen anywhere in
60:55 - our in the
60:57 - document body we want to listen for a
60:59 - pointer move um and that gives us access
61:01 - to that same client
61:03 - on the event
61:04 - um okay
61:06 - so what would happen if you put it as
61:08 - fun
61:17 - yeah which i think for us it matters
61:19 - that if you start dragging and then if
61:22 - you drag off of where the
61:24 - um the image would be positioned then
61:28 - you're not going to get those events
61:30 - fired so that's why it matters in our
61:32 - case
61:34 - uh that was a lot
61:36 - that we just went over so i want to take
61:38 - a quick recap so what we what we want to
61:41 - do right now is
61:43 - um we want to add that style
61:46 - that left style
61:48 - so that we can move the
61:51 - move the current image left or right and
61:53 - then we want to
61:55 - set up this
61:57 - the property in our view model we want
61:59 - to set up our connected callback so that
62:01 - we can add these
62:04 - this dot listen to callbacks and we want
62:06 - to listen to pointer down as our start
62:09 - pointer move
62:11 - for
62:12 - um as the user is moving um and there's
62:15 - a couple of html attributes that you'll
62:17 - need to add to the image to make sure
62:18 - that you don't get the like default
62:20 - dragon behavior
62:22 - um
62:24 - it's gonna be real awkward because at
62:27 - this point there's no like pointer up or
62:30 - whatever the event is for like letting
62:32 - go so when you have this working
62:34 - it's just gonna keep on like after
62:36 - pointer down it's just gonna keep on
62:37 - following your mouse that's okay we're
62:39 - gonna we'll we'll do that in the next
62:42 - step
62:43 - any questions
62:45 - for you
62:46 - back on your own
62:49 - cool we'll take longer for this we'll
62:51 - we'll take like
62:53 - at least five or ten minutes
62:55 - and please feel free to raise your hands
62:57 - if you have questions
63:04 - uh
63:42 - thank
63:50 - foreign
64:16 - so
64:30 - so
65:07 - i
65:42 - uh
65:54 - okay
66:17 - oh
67:10 - um
67:20 - uh
68:35 - um
68:48 - we have ours here
68:50 - um
69:18 - in terms of like what actually happens
69:20 - when you're swiping
69:23 - um i'm sure so
69:25 - um
69:26 - they
69:27 - i'm guessing that they're loading the
69:29 - um
69:32 - so they've got their like back ends api
69:35 - service um for actually like getting all
69:37 - the profiles it wouldn't surprise me if
69:40 - a lot of the
69:42 - basic mechanics of like
69:44 - fetching a list of like 10 or 20
69:47 - like profiles
69:49 - is similar to how like we have our array
69:51 - of files and then as people are um
69:55 - swiping they're doing the same thing of
69:57 - like
69:58 - you know removed from their list of like
70:00 - local profiles that the device has
70:03 - and then
70:04 - um you know when a person likes her
70:07 - or swipes left or right and they're
70:09 - sending that
70:10 - they're making api calls so we put a
70:13 - console on but they'd be making
70:15 - an api call to say okay this person
70:19 - likes or didn't like and it's been a
70:21 - while since i've used tinder but
70:23 - if i remember correctly
70:25 - it'll immediately tell you if it's a
70:27 - match yeah okay
70:29 - so
70:30 - they could do that a couple different
70:32 - ways where maybe
70:34 - after the swipe is when they make an api
70:37 - call to know
70:39 - if it was a match or not or maybe they
70:41 - already know
70:43 - maybe they already have it in clients
70:46 - that
70:47 - if they swipe right it'll be a match
70:51 - or
70:52 - if they swipe no then it just keeps on
70:54 - going through this and then it would so
70:56 - then there would probably be a different
70:58 - api for the messaging part where it's
71:00 - like okay
71:01 - both the wicked witch and them both
71:04 - swipe right and so then that would grant
71:07 - them access to
71:08 - position yeah whatever yeah exactly that
71:11 - would be my guess
71:24 - else has questions that i can help
71:28 - yeah i just have a question on i know
71:30 - it's
71:31 - certainly connected but that's
71:34 - uh
71:35 - like a reserved word by the framework
71:38 - so what if
71:52 - you just add
72:04 - oh yeah
72:05 - you could
72:06 - you could actually start breaking
72:08 - the logic up so
72:11 - like we're just gonna throw everything
72:13 - into connected callback but remember so
72:16 - this this this is the instance of the
72:19 - view model
72:20 - so you could have other methods uh that
72:24 - are defined in the model that you call
72:26 - from connected callback
72:29 - having like just like
72:31 - yeah
72:32 - okay gotcha yeah for sure
72:47 - all right we'll start going through a
72:49 - solution together
72:51 - um
72:53 - who wants to get me started what should
72:55 - we do first
73:02 - uh you can change markups
73:04 - yeah let's do it
73:06 - what am i changing
73:08 - um so adding the style
73:11 - uh
73:13 - uh property value
73:16 - yeah so uh what was this called how far
73:20 - we moved maybe
73:24 - that's fine i'll run with this all right
73:26 - uh so we okay so we add the style
73:28 - property to the current
73:31 - div the class current div uh so we'll
73:34 - have this how far we moved
73:37 - uh property in our view model let's go
73:39 - ahead and add that so
73:42 - at the bottom i'm just going to tack
73:43 - things on to the bottom so at the bottom
73:45 - we're going to have how far we moved and
73:47 - it's a number
73:49 - uh we won't do anything with that uh
73:52 - okay what's next
73:56 - what should we do next
74:02 - yeah let's do that because otherwise
74:03 - we're not gonna actually be able to drag
74:05 - so uh touch action it's
74:08 - touch action none and then draggable
74:11 - false
74:12 - okay
74:13 - sweet uh what's next
74:19 - and that turns off the default
74:21 - properties
74:23 - yeah so now so like with draggable false
74:26 - now when we drag we don't get the like
74:28 - default browser
74:30 - um behavior if we remove the draggable
74:33 - that's that's where it like
74:36 - it'll
74:37 - show the dragged image for us
74:43 - yeah let's do it okay so
74:44 - we're gonna say connect it
74:47 - connected callback
74:52 - we're given the element which is the
74:55 - the evil tinder custom element
74:57 - um so in here we're gonna want to listen
75:00 - for
75:01 - the pointer down and the pointer move
75:04 - events
75:05 - um so let's say let's not listen to
75:09 - um oh first we're going to need
75:12 - the current element
75:14 - so we'll say current
75:16 - is
75:18 - l dot query selector
75:21 - basically this is saying like we could
75:22 - do
75:24 - document.queryselector and then this
75:25 - would give us
75:27 - all of the dot or the first dot current
75:30 - in the entire document but we want it
75:32 - specifically for our element for our
75:34 - custom elements so if there were
75:36 - multiple instances of it in the page
75:38 - then we'd get the right one
75:40 - um so we're going to do currents and
75:42 - then we're going to listen to we want to
75:44 - listen on current
75:46 - for the pointer
75:48 - down
75:50 - and then we have our callback
75:53 - so when
75:55 - this is called that's when the user
75:58 - actually presses down
76:00 - okay
76:01 - what should we do next
76:09 - define a variable to
76:12 - factor x
76:15 - yeah okay so
76:17 - we could do
76:19 - uh like
76:21 - um
76:23 - uh what how how do we want to do this
76:28 - let's call it start so that's where
76:30 - we're starting
76:32 - okay
76:33 - so we'll have start x
76:34 - and then we'll assign
76:37 - start x to
76:39 - client x is that right client x
76:43 - okay cool
76:44 - okay so now we have when
76:47 - when the user presses down
76:48 - what's next
77:00 - yeah let's do that so i'm gonna
77:02 - copy paste this
77:05 - move around
77:06 - okay so now we have
77:09 - we want to listen to pointer move
77:12 - and then this is where we can set the
77:14 - how far we moved
77:16 - property so
77:17 - how far we moved is
77:20 - the
77:22 - current
77:24 - is the current client x minus our
77:26 - starting
77:27 - plan
77:28 - x
77:30 - okay so that should update as we
77:34 - um
77:35 - as we move
77:38 - is that it is that everything we need
77:40 - hey
77:41 - yeah that's working
77:42 - and as expected we can't let go or just
77:45 - forever forever holding on to it
77:48 - okay cool was there anything else that
77:49 - we needed to add i think that was it
77:52 - yeah
77:55 - who has questions about what we just did
78:02 - questions okay it's either a really good
78:04 - sign or a really bad sign
78:06 - okay
78:07 - i'm gonna
78:08 - uh as always i'm gonna go down to the
78:10 - solution i'm gonna copy and replace
78:14 - everything in here
78:15 - uh
78:16 - just to make sure everything's
78:18 - consistently named
78:20 - um okay
78:21 - the next thing that we're gonna do is we
78:23 - wanna show the
78:25 - the like and then
78:28 - [Music]
78:29 - go a certain do is when the user goes
78:32 - more than 100 pixels to the right
78:36 - that means they're swiping right and we
78:38 - want to show the like animation and then
78:40 - on the other side if we go
78:44 - negative 100 pixels then we want to show
78:46 - the
78:47 - the nope animation so we'll start off
78:49 - with just the like
78:51 - and the way we do do this is we already
78:54 - have the like css and the styling and
78:56 - i'm just going to hack this in here real
78:58 - quick this is not what you're going to
79:00 - do it's similar though uh okay so we're
79:03 - going to
79:04 - we have this results div and then if we
79:07 - if we have it with
79:10 - liking
79:11 - if we have it with the liking class
79:14 - uh that means that it'll
79:17 - show up
79:19 - i think so i need to save
79:29 - oh thank you
79:31 - okay
79:33 - there we go
79:35 - thank you good catch
79:36 - um okay so when the div the result div
79:39 - has liking it'll show the like uh when
79:42 - it has
79:43 - nope
79:44 - what is the class we'll get to that
79:46 - later
79:47 - noping is it noping
79:50 - yeah it's an open there we go okay
79:53 - so
79:54 - obviously we want that to be dynamic so
79:56 - we only want to show we only want to
79:58 - have this liking
80:00 - class there
80:01 - when they're actually liking
80:03 - so we can do that with the
80:05 - hash if syntax
80:08 - so this says if
80:09 - the
80:10 - this value in your viewmodel is truthy
80:13 - if it's true or some true like value
80:16 - then go ahead and add this class and
80:18 - then we can define a property
80:21 - for
80:22 - um for liking for
80:24 - determining if we've moved more than 100
80:26 - pixels
80:29 - give you guys a minute to do this on
80:30 - your own
80:39 - while you're at it go ahead and do the
80:41 - noping as well
80:43 - liking and noping
81:02 - uh
81:24 - wow
81:39 - all right
81:49 - uh
81:57 - okay
82:21 - uh
82:36 - who has a solution for liking and
82:38 - opening
82:41 - okay we'll take another minute or two
82:57 - [Music]
83:04 - now
83:22 - okay
84:00 - all right who wants to get me started
84:01 - with the solution
84:10 - go for it
84:11 - um so
84:12 - in that div class result instead
84:21 - yeah we can call it enough statement
84:24 - uh
84:25 - what are we gonna
84:30 - uh
84:31 - double up on liking
84:32 - okay so
84:33 - when liking is true we'll have we'll add
84:36 - this liking class
84:37 - which means
84:39 - i should have minimized this earlier
84:42 - uh
84:43 - which means
84:45 - down here we can have our
84:48 - uh liking
84:50 - we'll add it with the rest of the
84:52 - getters
84:53 - so we can have our liking gutter and
84:55 - then
84:56 - here we'll return if
84:59 - um
85:00 - what's our property name how far we
85:02 - moved
85:03 - what do we want to return this dot how
85:05 - far we moved is
85:09 - greater
85:10 - greater than
85:12 - equal to 100 yeah cool we'll do the same
85:15 - thing for noping
85:17 - like a noping
85:20 - and it's going to be
85:27 - negative 100 is that right okay cool
85:30 - uh and then we'll add our noping class
85:32 - up here too so
85:34 - we've got liking
85:36 - and we've got
85:38 - noping
85:41 - all right let's give this a spin
85:43 - there we go beautiful and then if we go
85:46 - to the right we still need to add that
85:48 - that down
85:49 - or listen listening for up not down but
85:51 - listening for up but when we move
85:54 - where's the boundary
85:56 - when we move far enough we've got both
86:00 - cool
86:02 - any questions
86:04 - comments
86:07 - well i'm gonna do the same thing as
86:09 - as always i'm gonna
86:10 - oh i'm actually gonna go down so these
86:13 - were two different sections i'm gonna go
86:15 - past noping
86:17 - make sure i have
86:19 - everything up to date um okay now we're
86:21 - going to get to when we
86:24 - release our mouse we want to let go and
86:26 - either if we've swiped far enough right
86:29 - then we want to
86:31 - um then we want to log liking and if
86:33 - we've swiped far enough to the left uh
86:36 - then we want to log nope or noping
86:39 - um so
86:42 - and then
86:43 - do nothing if we haven't dragged more
86:46 - than 100 pixels in either direction
86:49 - right so if we drag far enough in either
86:51 - direction then we'll like or not
86:54 - um and then the last little bit is we
86:56 - want to make sure that we reset things
86:58 - so that when the user
87:02 - has another pointer down
87:04 - that it's brand new and we're not
87:07 - maintaining any of the state from the
87:09 - previous mousing around
87:11 - um so what do we need to know okay so
87:12 - we've got our pointer up
87:15 - event for
87:17 - listening for
87:19 - mouse up um and then our last thing is
87:23 - um we have this listens to and then the
87:25 - opposite
87:26 - opposite of that is stop listening so
87:28 - this is a kjs api that says i want to
87:31 - remove the event listeners from
87:34 - a particular object or i want to remove
87:36 - a specific event listener from a
87:38 - specific object
87:40 - so when we
87:42 - in our code right now
87:44 - we've got this
87:46 - listened to
87:47 - on the documents as
87:50 - we're moving around but we don't need
87:52 - that listener anymore
87:54 - when the mouse has gone up right so when
87:57 - it's down that's when we care about the
87:59 - pointer move events but as soon as they
88:01 - go up we don't care how they're moving
88:03 - their mouse uh around the screen because
88:06 - it shouldn't be moving anything right we
88:08 - only care if they've started a pointer
88:10 - down so
88:11 - um so that's the that's the last little
88:14 - bit so that leaves a lot of logic up to
88:16 - you guys for
88:19 - what should go in the callback for a
88:21 - pointer up and when you call stop
88:23 - listening
88:24 - um so i'll leave you to it for
88:27 - for a few minutes
88:40 - if you have questions please just raise
88:42 - your hand
88:52 - [Music]
89:16 - okay
90:01 - thank you
90:32 - rails
90:56 - oh
91:02 - um
91:22 - now
91:29 - [Applause]
91:54 - hey
92:03 - uh
92:56 - uh
93:20 - oh
93:35 - foreign
93:39 - [Applause]
94:10 - so
94:22 - hmm
94:38 - it feels like they're
94:40 - coming up with a solution
94:43 - fish
94:47 - you guys want another minute
94:50 - we'll go through cool
95:02 - okay
95:22 - plus
95:33 - so
95:52 - want me to move those out of the way
95:59 - oh yeah please do
96:01 - thank you yeah
96:07 - [Music]
96:16 - all right
96:17 - who wants to get me started on
96:20 - a solution
96:22 - what should i do first
96:28 - pointer up
96:32 - yeah okay so
96:33 - i'm gonna
96:35 - steal some of this code
96:38 - okay so i'm going to listen to
96:40 - pointer up
96:43 - on
96:46 - not the document
96:48 - or sorry not current
96:50 - but on the document for the same reason
96:52 - that we listen to point or move wherever
96:54 - i'm going to listen to uh pointer up
96:57 - wherever they've ended up on the
96:58 - document
96:59 - okay
97:00 - uh what's next
97:04 - i think we have to redefine how far we
97:06 - have moved
97:08 - yeah so
97:09 - i'm just gonna steal that code and then
97:12 - update it here so we're gonna update
97:15 - this dot how far we have moved with the
97:18 - current client x minus the starting x um
97:21 - and then
97:23 - what that does is
97:25 - when
97:26 - um we haven't gotten into kgs's
97:28 - observables and how like all of this
97:30 - stuff works um
97:32 - what when you set this property anything
97:35 - that
97:36 - depends on this property's value will be
97:40 - rerun and updated
97:42 - to have the new value so when we call
97:45 - this dot how far we have moved and give
97:47 - it a new value anything
97:51 - oh oh dear
97:53 - anything that
97:54 - oh that is not what i wanted um anything
97:57 - that depends on it is going to be
97:59 - updated so
98:01 - like and nope methods no but inside here
98:04 - inside of our liking getter and our
98:06 - noping gutter
98:07 - um this will because this value changed
98:10 - these getters will be rerun and those
98:12 - values will be updated
98:14 - um so that's kind of how we get all of
98:17 - the
98:18 - um dynamic parts of kjs is that it
98:21 - figures out
98:23 - everything that your code depends on all
98:25 - of the observables and then when one of
98:28 - them changes it only updates the things
98:30 - that are listening to it so when
98:33 - how far we have moved changes that
98:35 - doesn't mean that the getter for current
98:37 - profile and next profile are going to
98:39 - rerun that's only going to happen when
98:41 - something inside it like the stop
98:43 - profiles changes
98:45 - so
98:46 - given that we've updated this what can
98:49 - we do now
98:56 - so you want to check if it's greater
98:58 - than or equal to 100.
99:02 - yeah so so we could write out
99:05 - um what is it uh
99:07 - this how far we have moved is greater
99:09 - than or equal to 100 that would mean
99:13 - that we would do we would say is it
99:15 - liking or is it like
99:17 - uh like
99:19 - okay and then we could do
99:21 - if
99:22 - uh
99:23 - that is less than or equal to
99:25 - negative 100
99:26 - and then do this dot
99:28 - nope nope is that right okay so we could
99:31 - do that but since
99:33 - the
99:34 - since this has updated
99:35 - everything that depends on it we can
99:37 - just do
99:38 - this dot liking
99:41 - and this dot
99:44 - no pin because those those properties in
99:46 - our view model are automatically going
99:48 - to be updated with the latest
99:50 - so we can we can reuse stuff that's in
99:53 - rfp model whenever we want
99:55 - um okay so
99:57 - um and then our our else case is
100:00 - essentially we do nothing
100:02 - um we we don't like or nope if neither
100:05 - of those conditions are true um what's
100:07 - last
100:09 - or second to last i guess
100:15 - yeah we'll reset yeah we'll kind of
100:18 - reset everything so we'll
100:21 - we'll say how far we moved is zero and
100:24 - then we'll
100:26 - uh stop listening as well so this dot
100:29 - stop listening
100:30 - to the document
100:32 - so the
100:33 - both the pointer up and the pointer move
100:36 - listeners are going to be torn down when
100:38 - we call stop listening it's going to
100:40 - tear down all of the document related
100:43 - listeners that we set up
100:45 - and it'll keep this one
100:46 - because the
100:48 - element is still alive um
100:50 - one nice thing is
100:52 - you don't have to manually with this
100:54 - like listen to
100:56 - um
100:57 - syntax with kjs usually you'd have to
100:59 - call
101:00 - like add event listener and then remove
101:03 - event listener to tear everything down
101:05 - correctly like if the element is removed
101:07 - from the page um
101:09 - with kjs's like this dot listen to when
101:12 - this component gets torn down it'll
101:15 - remove all of the listeners on that
101:16 - component and then any of its children
101:19 - as well so that's why we don't have to
101:21 - do any stop listening to
101:23 - current
101:24 - uh will it work
101:28 - can i let go it might be too small
101:33 - oh
101:35 - not quite
101:38 - did it not refreshing
101:41 - you're out of the
101:43 - what's it called
101:46 - [Music]
101:53 - i just uh sorry i just uh
101:57 - removed everything that i had just done
102:00 - all right uh let's go through this so
102:02 - uh yes you're right i had to find
102:05 - pointer up uh outside of the pointer
102:07 - down but i actually needed it inside of
102:10 - the
102:10 - inside of pointing her down so
102:13 - um
102:14 - uh so it would be updated correctly
102:17 - cool so this should work correctly now
102:19 - there we go
102:21 - [Music]
102:22 - sweet
102:24 - any questions comments yeah
102:26 - so um
102:27 - the if statements that are on 82 to
102:31 - 86 yeah how are those
102:33 - um
102:34 - how are those compared to the ones in
102:36 - the
102:37 - classroom
102:39 - so the um
102:41 - the markup up here the if liking and if
102:44 - noping is that what you're referring to
102:46 - um
102:47 - pretty similar because the
102:50 - the if um stash helper is basically
102:54 - serving the same purpose as like if
102:56 - javascript statements um the kind of big
102:59 - difference is that in
103:02 - our template this is being rendered with
103:04 - our viewmodel so we could do
103:07 - this.liking and this dot noping it's
103:10 - redundant right because our current
103:13 - context is the viewmodel anyway
103:16 - and otherwise they're the same and then
103:18 - down here
103:20 - the
103:21 - the connected callback gets
103:26 - um
103:27 - with the viewmodel instance as the this
103:30 - or as the current scope or context which
103:33 - is why we can do like this dot liking in
103:35 - this dot nokia
103:36 - because yeah like on 83 we have like
103:39 - this that like and then above it we have
103:41 - the
103:42 - get
103:43 - get like get nothing which defined like
103:45 - the parameters for left right
103:48 - um
103:49 - so you wait
103:50 - this code would be optimized because you
103:52 - put all of the things for those
103:56 - um in the javascript
103:58 - like in the in the heat model instead of
104:00 - putting it in well you wouldn't put it
104:02 - like all of that other stuff yeah so
104:04 - that's actually a really good point so
104:06 - um
104:07 - one of the things that we advocate for
104:10 - is building unit testable view models
104:13 - that have all of your logic so your view
104:16 - um like our view is
104:18 - pretty
104:19 - straightforward in that it has
104:22 - minimal conditionals and it's basically
104:25 - just printing out values and then
104:27 - listening to events um so it's not as as
104:31 - complex
104:32 - our view model kind of contains all of
104:35 - that logic so we can create a new
104:37 - instance of the view model in a unit
104:39 - test and then test like okay if i set
104:42 - these properties that it does certain
104:43 - things or you can call different methods
104:46 - um and it's just it's easier to have
104:49 - that kind of in the view model and
104:51 - testing it versus
104:53 - rendering a whole component and then
104:56 - um you know simulating
104:58 - different states and events and that
105:00 - sort of thing
105:02 - and then
105:04 - have you had apps that you've worked on
105:06 - multiple javascript files for this yeah
105:09 - so
105:10 - um
105:11 - most of them have like every component
105:13 - has its own
105:15 - um will have its own file um we usually
105:18 - like when you're actually building apps
105:20 - you break this off the template into a
105:22 - different file so you get like syntax
105:25 - highlighting and stuff like that um so
105:27 - yeah
105:28 - we we heavily promote having like a
105:31 - folder for each component that has the
105:33 - javascript and the template and its
105:35 - tests
105:36 - and like a demo page and
105:39 - kind of all of the stuff related to a
105:40 - single component
105:42 - yeah
105:43 - cool any other questions
105:45 - um
105:47 - how would you handle
105:48 - getting an api
105:50 - working with this one you know like
105:52 - instead of having your images obviously
105:54 - this year
105:55 - but if you want to grab those somewhere
105:58 - like asynchronously or something
106:01 - yeah so um
106:04 - can the type definitions have
106:06 - um
106:08 - a few different ways that you can define
106:10 - values so
106:12 - we we talked about
106:14 - default
106:16 - let's say we wanted to
106:20 - have this be asynchronous
106:22 - so we could
106:24 - the api for that is
106:26 - um
106:28 - basically
106:30 - the our get function is given the last
106:33 - value that it was set to and then a
106:35 - function for updating that value so we
106:38 - could do
106:39 - whatever like ajax request
106:42 - um to get the data and then
106:46 - um you know resolve with that data and
106:49 - then
106:50 - this
106:51 - uh this property would be updated with
106:54 - um with that data
106:56 - yep
106:57 - and you can go from really simple like
107:00 - i i should have said like
107:02 - you know just using the fetch api to do
107:05 - something like that or use whatever
107:06 - utility that you want to kns provides
107:10 - stuff for
107:11 - modeling your data similar to like how a
107:13 - view model models data
107:16 - excuse me modeling the server data and
107:18 - then doing fancy things for like
107:21 - when if you define an endpoint that is
107:23 - rest liked then kgs can do special
107:26 - things of like all right i can assume
107:28 - that when i do a get request it'll be a
107:31 - list of this and when i have that the
107:34 - instances will be created into like real
107:37 - model objects that have whatever
107:39 - properties that you define and just go
107:41 - down the rabbit hole but
107:44 - the most simple thing would be like in a
107:46 - getter to
107:48 - have fetch and then get the data
107:50 - good question
107:53 - cool
107:54 - any others
107:56 - all right we'll wrap up there's one more
107:58 - step
108:00 - uh
108:00 - when we you'll notice that there's a
108:03 - bunch of characters here but
108:06 - we eventually
108:08 - to get to the end and it's just a broken
108:10 - image
108:11 - right because
108:12 - eventually
108:14 - we get to
108:16 - we get to current profile but there's
108:18 - there's no there's nothing in profiles
108:21 - left right so let's fix that
108:23 - um so what do you need to know
108:27 - um
108:29 - page there's a url for an empty profile
108:31 - and then you basically want to define
108:33 - that property and then use that
108:37 - when you've run out of images
108:40 - give you guys a couple minutes and we'll
108:42 - go through a solution
108:57 - okay
109:05 - so
109:22 - uh
110:00 - wow
110:20 - wow
110:21 - [Music]
110:29 - oh
110:56 - um yeah so authentication is
110:59 - uh interesting because there's a lot of
111:01 - different parts to it right because
111:05 - most mostly in an app you have like a
111:07 - single session for the logged in user
111:10 - um so
111:12 - you could
111:14 - um
111:14 - you could create
111:16 - a
111:18 - like a view model essentially or a model
111:21 - object that represents the user or their
111:23 - session
111:24 - and then on that you could have all of
111:26 - the requests for like
111:28 - signing in or doing whatever you need to
111:31 - to authenticate them
111:33 - and then that that object you would
111:35 - probably pass around in your application
111:38 - because there'd probably be lots of
111:40 - components that
111:41 - would want access to the current user's
111:44 - information
111:45 - um so we didn't get into it at all uh
111:48 - today but
111:50 - let me expand this a little bit um
111:52 - because we only talked about like having
111:54 - this one custom element that essentially
111:56 - when you build um kjs applications it's
111:59 - just
112:00 - many and many of these custom elements
112:02 - and you pass data between them um so the
112:06 - syntax is like html where you could say
112:09 - like on evil tender if i wanted to pass
112:12 - in the session i could
112:14 - say um session colon from and then the
112:19 - um like session object that's in the
112:23 - like outer context whatever is rendering
112:25 - that component would provide
112:27 - the session so like if this let's say
112:30 - this is going to be recursive but let's
112:32 - say
112:34 - like in this view
112:37 - we had
112:39 - another
112:41 - component then in the view model we
112:44 - could have a session defined and then
112:47 - we'd be able to pass that to a child's
112:49 - component for them to be able to like
112:52 - see the user's info or what have you
112:54 - in their
112:55 - own profile
113:05 - yeah so most applications yeah so
113:08 - most of the time you have like one
113:11 - like top level
113:13 - app component
113:15 - um that has
113:17 - usually it's routing info
113:19 - and um session info
113:22 - kind of gets stored in that top level
113:24 - app component
113:36 - and then
113:37 - elements of
113:38 - like a
113:48 - good question
113:50 - uh let's get to a solution who wants to
113:51 - get me started
114:02 - um
114:04 - we could define
114:06 - the
114:08 - or do you change the uh current profile
114:11 - next clip functions for methods
114:13 - yeah let's do it uh how are we changing
114:15 - them
114:16 - um so actually i see here that they just
114:19 - they didn't work yeah what did you do it
114:22 - wasn't working for me i tried that okay
114:24 - so i'm not sure why
114:27 - uh but yeah i see they're doing horror
114:29 - which is gonna return the empty profile
114:32 - um
114:33 - if
114:38 - so i'm guessing you had something like
114:40 - assigning profile to a variable and then
114:43 - if profile return it
114:46 - and then otherwise
114:48 - like
114:48 - return an empty profile something like
114:51 - that
114:53 - am i totally off base of what you were
114:55 - trying
114:56 - yeah okay cool yeah which totally works
114:59 - you can assign
115:00 - assign it to a variable check if it
115:03 - is truthy
115:05 - and otherwise return another property
115:08 - the shorter syntax that the guide shows
115:11 - is saying
115:13 - return this or
115:15 - return that value which in javascript
115:18 - it'll be if this is a falsie value then
115:21 - it'll fall through to the other side of
115:23 - the or condition
115:26 - so it's just a shorter way of doing that
115:28 - same
115:29 - if else syntax so we can do those for
115:31 - both of it for both uh current profile
115:34 - and next profile and then i'm just gonna
115:36 - steal this
115:39 - uh
115:40 - this definition oh that's not right
115:44 - okay
115:45 - um
115:46 - so we can define our empty profile
115:48 - that's an object that has image
115:50 - now when we get to the bottom
115:53 - of this
115:54 - we should see
115:56 - there we go
115:57 - and we see our empty profile
116:01 - sweet
116:04 - any any questions or comments before we
116:06 - go
116:10 - all right
116:12 - i want to thank everyone who is here
116:14 - obviously you guys asked a lot of great
116:16 - questions
116:17 - um so thank you for coming everyone
116:19 - who's watching on the live stream
116:22 - uh or watching afterwards thanks for
116:24 - watching and we'll be back in a month
116:26 - we do uh one of these every like five or
116:29 - six weeks um and we're always building
116:31 - new apps for these so if there's
116:32 - something that you're interested in like
116:34 - and learning how to build uh let me know
116:37 - uh either in the dungeon sla uh meetup
116:40 - group uh leave a comment there or talk
116:44 - to me afterwards or message me on meetup
116:46 - so uh thanks and we'll see you next
116:48 - month bye
116:51 - hey i'm vj thanks for coming to the
116:53 - meetup today i'm the organizer for
116:55 - javascript la i wanted to just
116:57 - personally thank you for watching this
116:58 - video if you found it useful i'd love
117:00 - for you to subscribe to our channel
117:01 - we're slowly but surely making lots of
117:04 - little video content for you guys to
117:06 - enjoy and soak up especially if you want
117:08 - to get better at programming
117:10 - i'd love for you to be on our slack
117:11 - channel too over 800 users the link is
117:14 - right here js join jsjo.in if you forget
117:18 - it's really simple if you have questions
117:20 - for this meetup or you know questions
117:22 - you didn't get to ask or because you
117:24 - couldn't make it
117:25 - we'd love to have you just posted on our
117:27 - slack group so if you're a newbie don't
117:29 - worry it's a good place to go there's a
117:31 - lot of great engineers all connected
117:33 - around la and orange county so i hope to
117:35 - see you there