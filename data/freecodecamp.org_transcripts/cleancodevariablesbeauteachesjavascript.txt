00:00 - clean code in JavaScript variables I'm
00:02 - going to be sharing some guidelines to
00:04 - make sure your variables are readable
00:05 - reusable and
00:07 - refactor the first thing is to use
00:09 - meaningful and pronounceable variable
00:11 - names you can see in this example VAR y
00:14 - y y y MMS DST equals moment. format so
00:18 - and so on instead of calling it y y y y
00:21 - mm
00:22 - sdtr just call it year month
00:27 - day so this variable is a lot more
00:30 - meaningful and you can easily pronounce
00:31 - it uh the next thing is use es6
00:35 - constants when variable values do not
00:37 - change we have VAR first US president
00:39 - equals George Washington instead of
00:41 - using VAR you should use const because
00:44 - the first US president is always going
00:45 - to be George Washington the next thing
00:48 - is use the same vocabulary for the same
00:51 - type of variable if you have um three
00:53 - different functions or variables we have
00:56 - get user info get client data get
00:58 - customer record let's say these are in
01:00 - different parts of your program well it
01:02 - it's all basically the same thing a
01:04 - client can be considered a user a
01:06 - customer can be considered a user you
01:08 - should call these the same thing in each
01:10 - part of your program so we're just going
01:12 - to get rid of those two and we're going
01:14 - to make this just get user get user you
01:17 - don't have to say um get info data well
01:20 - we know it's going to be data so just
01:22 - call them get user in every part of your
01:24 - program so it's easier to remember what
01:25 - you
01:27 - Ed the next thing I want to talk to you
01:29 - about is use searchable names so if you
01:31 - look at this function or this for Loop
01:33 - for VAR I equal z i is less than um
01:37 - 525,600 so what is this number here what
01:41 - does that number mean it's actually
01:43 - better to put it right in your program
01:46 - what what that number means the truth is
01:48 - we will read more code than we will ever
01:50 - write so it is important that the code
01:52 - we do write is readable and searchable
01:54 - so we're going to declare what this
01:55 - variable means um in a capitalized VAR
01:58 - Global so we're going to
02:04 - put and then we can just change this
02:10 - to now it's a lot more obvious what what
02:14 - that's supposed to be in the program and
02:17 - as an added benefit of it being more
02:18 - readable it's also more searchable if
02:20 - you want to search for that number in
02:21 - the program if you can just search for
02:24 - the name of the variable next thing I
02:26 - want to talk about is to use explanatory
02:29 - variables
02:31 - so if you see this const city state
02:33 - reject and then this whole um reject
02:36 - thing and then save city state City
02:39 - citystate reject. match citystate reject
02:41 - and you just look at all this whole
02:43 - thing so there's a way to make this a
02:44 - little more readable because so what is
02:47 - this thing right here and what is this
02:50 - thing what if we could just make this
02:52 - into a variable let's just work
02:55 - backwards I want this to be City and I
02:59 - want this this to be State now we have
03:03 - to go and fill these in so we're going
03:06 - to
03:11 - do so you can see uh it's doing the same
03:15 - thing except it's just breaking it down
03:16 - a little more so it's more obvious
03:18 - what's happening first we're trying to
03:20 - find the the match and then we break it
03:22 - apart into city and state and then when
03:25 - we call the function it's more obvious
03:28 - what we're passing into the function
03:31 - okay next up is don't add unneeded
03:33 - context so if we look at this whole
03:35 - thing um varar equals car make Honda car
03:38 - car model Accord car color blue and we
03:42 - call the function function paint car car
03:44 - car. car color equals red so look at
03:47 - this part right here car docar color so
03:50 - we have a repetition we have car and we
03:53 - have car again right here car color so
03:55 - when you are um storing the car make
03:58 - don't call it car make just call it make
04:00 - because we already have car right here
04:03 - and then for model just call it model
04:06 - car color just call it color and then
04:09 - down here you can just
04:11 - call car. color and then you won't have
04:14 - to repeat yourself just unneeded context
04:17 - let's go down a little bit more um the
04:19 - last one I'm going to talk about is
04:20 - short circuiting is cleaner than
04:23 - conditionals so let's look at the bad
04:25 - example first the function create micro
04:28 - Brewery name our Brewery name if name
04:32 - then Brewery name equals name else
04:34 - Brewery name equals hipster Brew Company
04:37 - there's a way to make this a lot quicker
04:41 - if we can just take this whole thing
04:43 - out and make this into a
04:48 - conditional and that's it so this whole
04:51 - thing was this this conditional here was
04:53 - the same as that whole thing before so
04:55 - it's a lot cleaner it does the exact
04:57 - same thing and it's easier to read it's
04:59 - easier to understand understand well
05:01 - thanks for watching my name is Bo KS if
05:03 - you check the description you can see a
05:04 - link to what inspired this video don't
05:07 - forget to subscribe and remember use
05:09 - your code for good