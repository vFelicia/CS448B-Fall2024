00:00 - what is up welcome back to another
00:03 - unreal engine course and this time we
00:04 - have a really cool let's just see the
00:07 - game that you're going to create so if i
00:08 - hit the play button we have a nice ball
00:10 - we have a nice glowy effect we can move
00:12 - the ball left and right we can jump with
00:13 - the ball so this laser over here is
00:16 - going to kill us pay attention at the
00:17 - top left corner for our energy bam is
00:19 - being drained as you can see we can
00:21 - interact with these cubes so i can you
00:23 - know like push it or drag it towards me
00:26 - like this and i can jump from one wall
00:28 - to another like spider-man over here and
00:30 - of course you're going to learn how to
00:32 - do all of this
00:33 - we do need to drag this other cube so
00:35 - that we can prevent these other lasers
00:37 - from killing us and there you go now we
00:40 - can jump on the elevator click on the e
00:43 - button to interact and when we jump off
00:45 - the elevator it goes down and no now we
00:48 - cannot reach the top what we can do well
00:50 - we can jump and interact with this cube
00:52 - there you go so we can do that as well
00:54 - bam there you go and we can jump over
00:56 - here and voila we reach the top
00:58 - of course
01:00 - this project you will have assignments
01:02 - in it that's the beauty of it so i will
01:04 - give you assignments to finish the game
01:06 - and you can add new features because
01:07 - this serves like a template that you can
01:09 - use to build upon so you can add new
01:11 - features and that way you can learn and
01:13 - so on and so forth now even though this
01:16 - looks like a some simple game believe me
01:19 - you're gonna learn a lot of cool things
01:20 - because a lot of
01:22 - interesting things went into creating
01:23 - this project so again just go through it
01:26 - you will have assignments to finish it
01:27 - because i will show you how you can
01:29 - rearrange these rocks to create other
01:32 - levels to add new features more
01:34 - obstacles so on and so forth again while
01:37 - while my channel is still not dying and
01:40 - i'm not asking for help just you know
01:42 - share the video like it subscribe and
01:45 - comment below it helps the algorithm so
01:48 - this channel can grow so yeah we're all
01:51 - a community over here so be part of a
01:53 - community like share it so i mean other
01:55 - people can benefit and you help me as
01:57 - well so it's a win-win situation anyways
02:00 - thank you uh i guess thank you for
02:01 - watching this video and uh
02:04 - stay out of jail i guess man because you
02:06 - know you cannot watch this video if you
02:08 - if you're in jail take care and enjoy
02:10 - the rest of the tutorial
02:12 - so now that we saw the game that we're
02:14 - going to create let us actually create
02:16 - the game so over here i have the unreal
02:18 - engine project browser you know what it
02:20 - is so we're going to click here on the
02:21 - games and then click on next over here
02:23 - we want a blank project from here click
02:26 - on next blueprint is fine we don't need
02:29 - the starter content so you can either do
02:32 - it with or without but you know
02:33 - essentially we don't need it everything
02:35 - over here can be as is now over here as
02:39 - you already know is where you're going
02:41 - to store the project so make sure that
02:43 - you well set that to your desired
02:45 - location and over here is the name of
02:47 - your project so we are going to call it
02:49 - plat
02:50 - for
02:51 - mer there you go and i'm going to click
02:53 - on create the project and voila we are
02:56 - going to wait probably a gazillion years
02:58 - and i think i think that i will need to
03:00 - cut out the video
03:02 - so uh
03:03 - yeah
03:04 - see you when this finishes
03:06 - and finally we are here it didn't take
03:09 - that long but i still had to cut it out
03:11 - because you will probably be mad to be
03:12 - like
03:14 - and i'm not gonna go further into that
03:16 - just kidding but anyways
03:18 - the next step for us is to click here on
03:20 - the content right click that is and show
03:23 - in explorer there you go so this is
03:25 - where we are going to put the assets and
03:27 - the assets are right here so these are
03:30 - the assets you can download them link
03:32 - will be below this video so just you
03:34 - know scroll down below the video and you
03:36 - will see a link where you can download
03:38 - the assets and what you're going to do
03:40 - is copy all of these so copy all of the
03:43 - assets everything that you see in this
03:44 - asset folder and over here again
03:48 - right click here on the content show in
03:49 - explorer and it will open this bad boy
03:52 - for you right click and paste the assets
03:55 - so when you paste the assets we are good
03:57 - to go
03:59 - now when we go here in the maps and
04:01 - click on the example map voila this is
04:04 - our map now again these are all you see
04:07 - as you can see
04:09 - separate items that you can put together
04:13 - in order to create the level and what
04:14 - i'm also going to do is here inside of
04:17 - the outliner so world outliner which is
04:21 - on the right i am going to right click
04:23 - over here and create a folder and it's
04:25 - going to be level
04:26 - parts or how everyone going to call them
04:29 - and i'm going to select all these rocks
04:31 - and i am going to put them inside of the
04:34 - level parts folder just so that we can
04:36 - organize them a little bit and we don't
04:38 - have you know everything clustered
04:40 - inside of this inside of the world
04:43 - outliner anyways what's good about this
04:45 - is that you can always you know you can
04:47 - move these things around to create new
04:50 - levels yada yada yada it serves like a
04:52 - template and stuff like that so you know
04:54 - for the assignments that i will give you
04:57 - later on to create new levels
04:59 - you can do that on your own so basically
05:01 - that's that
05:03 - anyways the next step for us is to go
05:06 - and create our
05:08 - ball player so let's go over here in the
05:11 - blueprints which is currently empty i'm
05:13 - going to right click and we are going to
05:14 - create a blueprint class and this class
05:16 - is going to inherit from the character
05:19 - now as you can see here characters are
05:20 - pawns that have a match blah blah blah
05:22 - blah click on that and this is going to
05:23 - be bp
05:25 - underscore
05:27 - player ball so player
05:30 - underscore ball or you can put that
05:32 - everything you can put that all together
05:35 - it's up to you you know it's not
05:36 - important and i don't care you know i
05:38 - don't care what you do okay it's your
05:40 - life you can do whatever you want but
05:42 - anyways just kidding
05:44 - what
05:45 - you need to do or what we are going to
05:46 - do now is that we are going to add a
05:49 - mesh and all the good stuff now first
05:53 - things first we are going to attach or
05:56 - add a static
05:58 - or actually yeah a static mesh component
06:00 - so let's go over here click on add
06:01 - component to filter for static
06:03 - mesh component here it is this is the
06:06 - bad boy as you can see this is the
06:07 - skeletal mesh we don't want that we want
06:09 - this one static mesh component now for
06:11 - the static mesh click here as you can
06:13 - see where it says the static mesh click
06:16 - there and filter for the ball so click
06:19 - ball and sm ball here it is so click on
06:22 - that one and there you go this is our
06:25 - ball it's you know very funny now over
06:28 - here for the elements we are going to
06:31 - search for the ball element so click
06:33 - here ball
06:34 - filter for the ball and there you go it
06:36 - looks like a golf ball you know
06:39 - it looks like a golf ball so we're going
06:41 - to say it's a golf ball anyways what we
06:43 - are also going to do is we are going to
06:45 - scale it so over here in the transform
06:47 - for the scale click on the lock icon and
06:50 - we are going to say 1.5 for the scale to
06:53 - rescale the ball so it gets a little bit
06:56 - you know larger
06:57 - also for our capsule component what we
07:00 - are going to do over here is the half
07:02 - height and the radius are going to be 75
07:05 - for the half height radius is going to
07:08 - be also 75
07:10 - so as you can see now the whole ball is
07:13 - covered in the radius of the capsule
07:17 - component make sure that you compile and
07:19 - save that
07:20 - what i am also going to do is i'm going
07:24 - to attach a spring arm so click here on
07:28 - add component and filter for the spring
07:30 - arm now if you don't know what is a
07:32 - spring guard basically it's a holder for
07:33 - the camera so you can think of a spring
07:36 - arm as a holder for the camera what we
07:38 - are going to do for the spring arm is
07:40 - over here for the rotation on the z axis
07:43 - we are going to say negative 90.
07:45 - there you go and we are also going to
07:48 - set the target arm length so this over
07:51 - here in the camera
07:53 - it's currently at 300 we're going to set
07:55 - it at 1536 so 1536
08:00 - which is going to make that a little bit
08:03 - further away from the ball there you go
08:07 - when it comes to the target offset for
08:09 - the z-axis we are going to set that at
08:11 - 300 there you go and basically as you
08:14 - can see it's right over here like in a
08:16 - diagonal way
08:18 - with an angle it's looking at that ball
08:22 - so basically that's that
08:24 - do collision test over here we don't
08:26 - need this so if true do a collision test
08:28 - using probe channel prop size you you
08:30 - know we don't need this we don't need
08:33 - this so compile and save that and the
08:36 - next step for us is selecting the spring
08:38 - arm and attaching the camera so click on
08:41 - the camera and there you go so now we
08:44 - have the camera on it when it comes to
08:46 - the camera we are basically not going to
08:49 - touch anything we don't need to touch
08:51 - anything because we have everything set
08:54 - up
08:54 - within the within the spring arm now
08:57 - make sure that you compile and save that
09:00 - if i were to go over here in the example
09:02 - map and hit on play button and over here
09:05 - just one second we do have because uh i
09:08 - prepared this project and some of the
09:10 - things that we do need to delete what we
09:12 - need to do is go here while you're in
09:14 - the example map level click on the you
09:17 - see over here where it says blueprints
09:18 - click on the drop down list and click
09:20 - here open level
09:22 - blueprint when you click on that just
09:24 - delete these two notes so just delete
09:26 - these two compile and save that this is
09:28 - later on for creating the ui for the
09:31 - game
09:32 - so when we have our ui we will have this
09:34 - over here or or somewhere else it's not
09:36 - important but that is for the ui if i
09:38 - hit the play button now everything is
09:39 - cool but
09:41 - you see this over here we don't have our
09:43 - ball we don't have anything so what we
09:46 - need to do is go back here in the
09:47 - content browser inside of the blueprints
09:50 - and right click and create a blueprint
09:52 - class and from here from all classes in
09:55 - the search we are going to filter for
09:57 - game mode
09:58 - and we want this one game mode so make
10:01 - sure that you select the game mode click
10:03 - on select and it's going to be bp
10:05 - underscore plot
10:07 - former underscore game mode so this is
10:11 - our platformer game mode we only need it
10:13 - for one reason and that is to go inside
10:15 - of the project settings and click here
10:18 - maps and modes and over here at the top
10:20 - where it says default game mode we're
10:22 - not going to set the game mode base
10:24 - instead we're going to say the
10:25 - platformer game mode the one that we
10:27 - have just created which now enables us
10:30 - to edit the default pawn class which is
10:32 - actually the player
10:33 - so from the default pawn class we are
10:36 - going to select the bp
10:37 - player ball which means now
10:41 - when we go here in our example map let
10:43 - me just close the example matt blueprint
10:45 - over here as you can see i have already
10:47 - prepared from this level this is the
10:49 - player start or where the player is
10:51 - going to be spawn when we run our game
10:52 - so if i hit play now there you go we
10:55 - have the ball and this is because we
10:57 - created the gamemode base and we
10:58 - attached it over here and we set the
11:01 - player ball to be the default pawn class
11:05 - and now when we you know run the game it
11:07 - is being spawned moving forward let us
11:11 - go back inside of our player ball and
11:13 - what we are going to do first is create
11:15 - the variables that we need so the first
11:18 - variable is going to be our ball
11:20 - material instance like this now i am
11:23 - going to just declare all of these then
11:25 - i'm going to set the types and whatnot
11:27 - next we have the move direction
11:30 - next we are going to have over here flat
11:33 - velocity and what did i type over here
11:36 - so it's flat velocity there you go click
11:39 - on the plus and again here we have the
11:42 - current
11:43 - speed moving forward we have the
11:46 - rotation amount so rotation
11:49 - amount
11:51 - moving forward we have the ball
11:54 - rotation rate moving forward we have the
11:58 - power
11:59 - we have the energy so energy
12:03 - and is dead
12:05 - he is dead and last but not least we are
12:07 - going to have the
12:09 - hud reference
12:11 - so click here compile and save and what
12:13 - we are going to do
12:16 - well first things first we are going to
12:19 - set the ball material instance click on
12:21 - you can either click here so you can
12:23 - either click here on this little icon
12:25 - the red one because currently all of
12:26 - these variables are booleans and you can
12:28 - either click there where i'm currently
12:30 - pointing with this arrow or you can
12:31 - click on here variable type which is in
12:33 - the details tab on the right side and
12:36 - from there you can click here on the
12:38 - search and you're going to search for
12:39 - material
12:41 - and you want a dynamic material instance
12:44 - let me just find it over here actually
12:46 - is it dynamic
12:48 - or just material let me just see over
12:50 - here so it's dynamic
12:53 - material
12:54 - yeah here it is material instance
12:56 - dynamic this is what we want and you're
12:58 - going to click on this object reference
13:01 - this is what we need so material
13:03 - instance dynamic
13:05 - move direction is going to be a vector
13:07 - so click on the button to choose a
13:10 - variable type and move direction is
13:11 - going to be a vector flat velocity is
13:14 - also going to be a vector so click on
13:16 - the button to change the type of the
13:18 - variable the current speed is going to
13:20 - be a float so click on the button and
13:23 - select float the rotation amount same is
13:26 - going to be a float so click on there
13:28 - the ball rotation rate is also going to
13:31 - be a float but for the ball rotation
13:34 - rate we are going to set the default
13:37 - value so the default value for the ball
13:40 - rotation rate is going to be
13:42 - 0.75 and you can set the value over here
13:46 - where i have just drawn
13:50 - now moving forward we are going to have
13:52 - our power and energy both of these are
13:54 - going to be floats so float here energy
13:57 - is also a float make sure that you
13:59 - compile and save that then over here the
14:01 - value for these both are going to be 100
14:04 - so 100 for the energy 100 for the power
14:07 - is that is going to be a boolean and
14:09 - we're going to leave it as is here for
14:11 - the energy and power make them publicly
14:13 - available and also for our also for our
14:17 - puzzle mode so we have one more variable
14:19 - which is going to be our puzzle mode and
14:20 - i am going to move it over here and put
14:23 - it right directly
14:25 - below the material instance so let me
14:27 - just
14:28 - change the order even though the order
14:30 - doesn't matter but hey so here i'm going
14:32 - to say puzzle
14:34 - mode there we go click on the button
14:37 - over here and we are going to set this
14:39 - to be a boolean compile and save this
14:41 - bad boy and also the puzzle mode just
14:44 - set it over here to be a public one now
14:47 - this is for the variables that we are
14:49 - going to use moving forward what we are
14:52 - going to do
14:54 - we are going to first create our event
14:57 - so i can remove this from here we will
14:59 - need this later on but over here right
15:02 - click and for the node we are going to
15:04 - search for a custom event custom event
15:06 - is the one that we created it's not
15:08 - already defined we are going to define
15:10 - it right now so i'm going to call this
15:12 - bad boy enable
15:14 - disable input and this is going to allow
15:17 - us to either enable and disable the
15:19 - input now one thing when you click on
15:21 - this over here you can have these inputs
15:23 - which are basically parameters so i can
15:25 - click on over here for the plus button
15:27 - and add a new parameter and over here
15:30 - the parameter is going to be a boolean
15:32 - and the name is going to be enable
15:35 - so there you go and now we have a
15:37 - boolean parameter over here so what's
15:40 - going to happen here is that we are
15:41 - going to go in a branch and the branch
15:43 - is an if else statement and the
15:46 - condition that we are going to test is
15:47 - this enable so enable is a condition
15:50 - that we are going to test it's either
15:51 - true or false if it's true we're going
15:53 - to enable the input but before that we
15:55 - are going to get the player controller
15:58 - because the player controller is the one
16:00 - who can enable and disable the input so
16:03 - over here i can say enable input
16:06 - like this and right click over here i
16:09 - can say disable input
16:12 - now this is going to enable and disable
16:14 - the input on the player controller which
16:16 - means it will disable the input on our
16:20 - ball
16:21 - there you go
16:22 - so if it's true we are going to enable
16:25 - the input and i'm going to click on this
16:27 - and i'm going to position it like this
16:29 - and if it's false we are going to
16:30 - disable the input because the parameter
16:33 - is enabled if enable is true then we're
16:36 - going to enable the input if it's false
16:37 - we are going to disable the input pretty
16:39 - straightforward here i'm going to create
16:41 - a comment section i'm going to call this
16:43 - bad boy enable backslash disable input
16:48 - and if you didn't see how i created a
16:50 - comment section basically what you need
16:52 - to do is just you know hover or or
16:55 - select with your mouse like this by
16:56 - dragging your left mouse
16:58 - select all the nodes that you want to
17:00 - group in a comment then right click and
17:02 - go over here create comment from section
17:04 - and of course you can select this
17:05 - comment you can delete it and it can go
17:07 - away so if i select it now and hit
17:08 - delete it will be deleted and go away
17:11 - over here everything is straightforward
17:13 - i don't think there is no extra
17:14 - explanation for this or if there is just
17:17 - you know let me know in the comment
17:18 - below the video anyways moving forward
17:20 - we want another we want another custom
17:23 - event so let's go over here and right
17:25 - click and we are going to filter for
17:27 - custom event
17:28 - and we are going to add here a custom
17:30 - event and we are going to call this one
17:32 - change ball material instance so the
17:36 - name of this bad boy is going to be just
17:38 - double click it over here again
17:40 - okay here it is
17:42 - change
17:43 - ball
17:44 - material instance there you go
17:47 - now this
17:49 - actually excuse me it's change ball
17:51 - material color not instance color so
17:54 - change ball material color now this bad
17:57 - boy has two parameters click on him and
17:59 - inputs click plus two times the first
18:02 - one is going to be the param name so
18:04 - here we're going to say param name and
18:06 - the type over here is actually going to
18:08 - be the name
18:10 - so name is going to be the parameter and
18:13 - over here we are going to have a value
18:16 - float
18:17 - so here we are going to say value and
18:19 - there you go so compile and save that
18:21 - again as you can see we have two
18:23 - parameters one is the name and other is
18:25 - the value what we are going to do is we
18:27 - are going to get the ball material
18:29 - instance so we are going to get it which
18:31 - is the one over here that we have as you
18:33 - can see here is the bad boy
18:35 - what we are going to do now we are going
18:37 - to drag from here a node and we are
18:39 - going to say set scalar param value
18:42 - basically this is going to change the
18:44 - value of the parameter so over here
18:47 - we're going to plug this in so this goes
18:48 - over here next we're going to plug in
18:51 - the parameter name over here and the
18:53 - value will be plugged over here and
18:56 - after that we are going to get the ball
18:58 - mesh
18:59 - so here we have the static mesh and i
19:01 - need to change the name to the ball mesh
19:04 - i mean it's not important but you know
19:06 - for
19:07 - our references it is better to know so
19:09 - this is a ball mesh and we are going to
19:11 - say over here set material
19:14 - there you go not this so from here set
19:18 - material and we want this one so set
19:20 - material there you go plug this in over
19:23 - here this goes over here and last but
19:25 - not least we want the material which is
19:27 - the ball material instance so here get
19:31 - the ball material instance and plug it
19:33 - in and there you go compile and save
19:35 - that now what i'm going to do is select
19:37 - this and again right click and create a
19:40 - comment from section is going to be
19:42 - change
19:43 - ball
19:44 - material
19:46 - color and make sure that you compile and
19:48 - save this what is this essentially what
19:50 - is this going to do well basically if i
19:54 - go over here and select the ball
19:55 - material and you see here we have the
19:57 - ball material if i click on it this is
19:59 - that material and let me just open it so
20:01 - over here is the material now i'm not
20:03 - going to go into this because this is a
20:05 - separate topic on its own you know
20:07 - dragging these materials creating them
20:09 - with the nodes and whatnot but over here
20:12 - you have some parameters like power
20:15 - like is active
20:17 - and so on and so forth that control
20:19 - certain aspects of that material as you
20:22 - can see we then have the divide then put
20:24 - it in the lerp and the multiply and
20:26 - basically as i said this is a separate
20:29 - topic on its own i will probably create
20:31 - a separate video just talking about how
20:33 - to create materials how to do this and
20:35 - that with them but essentially what you
20:38 - need to know for this tutorial is that
20:40 - these parameters like power is active
20:42 - and so on and so forth they control
20:46 - the colors of this material so over here
20:49 - now when we call this change ball
20:50 - material color the parameter value is
20:53 - going to be one of these parameters such
20:54 - as power such as is active so we're
20:57 - going to put that in the name over here
20:58 - and the value is going to be well
21:00 - basically value one two three it doesn't
21:02 - matter you know but the value of the
21:03 - number
21:04 - now what we need to do in order for to
21:06 - make this work is go over here in the
21:08 - begin play and i'm going to move a
21:10 - little bit up over here the first thing
21:12 - that we need to do is we need to get the
21:13 - material of the uh or from the ball so
21:18 - here from the event begin play we're
21:20 - going to drag a note that we're going to
21:22 - call set
21:23 - ball material instance oh actually
21:26 - excuse me first we need to create that
21:28 - so let me just get the ball mesh first
21:31 - get the ball mesh and from here get the
21:33 - material
21:35 - so get the ball mesh first and then get
21:38 - the ball material from the mesh
21:40 - and from the mesh we are going to create
21:45 - dynamic material instance there you go
21:49 - and we are going to plug this in over
21:51 - here
21:52 - actually let me just do it like this
21:55 - create
21:56 - dynamic material instance there you go
22:00 - and the target is going to be
22:04 - capsule mesh ball mesh let me just take
22:06 - a look at this what is this over here
22:10 - so it's not giving me the target is
22:12 - primitive component
22:16 - kismet library let me just go over here
22:18 - create dynamic material we want the one
22:20 - from the
22:22 - well all of these are from kismet no we
22:24 - want the first one create dynamic
22:27 - material instance this is the one that
22:28 - we want so yeah you can get confused
22:30 - sometimes with these because as you can
22:31 - see create dynamic
22:34 - material instance you see we have you
22:36 - know a couple of these functions so we
22:39 - want the first one create dynamic
22:41 - material instance and we want to plug in
22:43 - the parent over here and it goes right
22:47 - there so the next part
22:49 - and we can move this closer because i'm
22:51 - going to create a comment from this the
22:53 - next part is to set the ball material
22:56 - instance there you go
22:57 - and we want to set it to this return
23:00 - value that we have over here see returns
23:02 - value material instance dynamic object
23:04 - reference so we can set that to this
23:08 - over here now i'm going to select these
23:10 - and i'm going to right click and create
23:12 - a comment section and what's going to
23:14 - happen here first i'm going to say first
23:16 - set
23:17 - the material instance the
23:20 - material instance there you go
23:24 - and we can move this from here so you
23:26 - can move the begin play a little bit
23:27 - outside it's not important but you know
23:30 - just you know
23:32 - just so
23:33 - so something like this there you go
23:37 - maybe a little bit up because later on
23:38 - we are going to plug things here in the
23:40 - tick event so we got the material
23:42 - instance what is the next step the next
23:44 - step over here is to first enable
23:47 - disable impulse so we are going to say
23:49 - enable this
23:50 - able input and over here we have the
23:53 - parameter we're going to leave it false
23:55 - as you can see or know already if it's
23:57 - false we're going to disable the input
23:59 - so we're not going to allow the
24:00 - character to move so disable the input
24:04 - after that we're going to say change
24:06 - ball material color the parameter name
24:10 - that you are going to pass is going to
24:11 - be is active and notice here is active
24:14 - capital i capital a
24:16 - the value over here or the name
24:19 - that we pass over here as a parameter
24:21 - needs to match up with the name over
24:23 - here as you can see this is the name of
24:25 - that is active so is active you can
24:28 - click on it and you can copy the name
24:30 - and you can then go back over here and
24:31 - paste it just to be sure like that the
24:34 - value is going to be zero so we're going
24:36 - to leave the value at zero
24:38 - and now we are going to delay so we're
24:40 - going to call delay over here and we are
24:43 - going to delay for 0.5 seconds so half a
24:47 - second we are going to delay and after
24:49 - that copy this and paste it and again
24:52 - we're going to call it change material
24:54 - color for is active but this time we are
24:56 - going to set the value to be equal to
24:59 - one and compile and save this let me
25:01 - just go back compile and save that there
25:03 - you go
25:05 - i don't know if i didn't test it like
25:07 - this but let me just try it out to see
25:09 - if this will work yeah you see
25:12 - so yeah there you go as you can see of
25:14 - course we are going to change another
25:15 - color so we're going to change another
25:17 - color but for that we also need to
25:19 - create a timeline so don't worry about
25:21 - that we will do that in a moment but as
25:23 - you can see already we are changing the
25:26 - color so first things first and let me
25:28 - just stop this first things first we are
25:30 - sending the value to zero waiting half a
25:32 - second and then setting the value back
25:34 - to one as you can see now
25:36 - how the color goes as you can see to the
25:38 - red color so this is essentially what a
25:41 - small effect not important for the game
25:43 - but it gives a little bit crispy effect
25:46 - to the game like you know
25:48 - it makes it look a little bit better
25:50 - going back inside of the player ball
25:52 - blueprint next we need to create a
25:54 - timeline so in order to create a
25:55 - timeline we simply right click and
25:57 - simply type timeline like this and here
25:59 - it is
26:00 - at the bottom add timeline and we're
26:03 - going to call it ball activation
26:06 - timeline and what is a timeline
26:09 - basically well first we're going to drag
26:11 - a node over here to play and a timeline
26:14 - allows as you can see over here timeline
26:17 - node allows values to be keyframed over
26:20 - time how does that work we'll double
26:21 - click on the timeline over here and as
26:24 - you can see we have values so you have a
26:27 - float value you have a vector value you
26:30 - have a color track you have an event
26:32 - track we are going to click on the float
26:34 - track and
26:36 - for the float track you can you know
26:39 - give it a name whichever name you want i
26:40 - don't know value simply type value it's
26:43 - not important or float track or whatever
26:47 - we also are going to set the length over
26:49 - here to one so we're going to have a one
26:52 - length and you can right click so let me
26:54 - just compile and save that so you can
26:55 - right click and you can click add
26:58 - keyframe and you can click on this
26:59 - keyframe
27:00 - and for the time over here we're going
27:02 - to set it at zero and value is zero
27:05 - right click and add another keyframe and
27:08 - the value for this keyframe is going to
27:12 - be one one so basically the time so when
27:15 - you click on it the time is going to be
27:17 - one the value is going to be one this
27:19 - basically means it will go or this float
27:23 - will go from zero
27:25 - to one in the time of one this is
27:28 - basically what we what is a timeline so
27:31 - the value of this float will go from
27:33 - zero to one in length is one second
27:35 - basically so this is what we are doing
27:38 - over here so if we go back over here in
27:41 - this time graph
27:43 - from the update and what does this
27:45 - update in the timeline basically the
27:47 - time it will take for that float to go
27:51 - from
27:52 - the specified value which is zero to the
27:55 - goal value which is one so while that is
27:57 - happening this update will be called and
28:00 - when that happens from here we're going
28:02 - to say change ball material color there
28:05 - you go so change ball material color now
28:09 - the material color is going to be
28:12 - from here i'm going to take the power so
28:14 - get the power
28:16 - and we're going to lerp so i'm going to
28:18 - right click and i'm going to say lerp
28:21 - and we want the lerp to be from a float
28:25 - so not vector so power let me just see
28:28 - over here lerp here it is this is the
28:30 - one that we want and i'm going to break
28:33 - it from here let me just move this a
28:35 - little bit over here so that it is more
28:37 - readable
28:39 - so what's going to happen over here this
28:41 - is going to lerp from a which is 0
28:44 - to the power value of the power is 100
28:47 - if you remember over here if you select
28:49 - the power we set the default value to be
28:51 - 100
28:52 - alpha over here is the time
28:54 - so the time it will take to go from 0 to
28:57 - 100 and basically that time is going to
28:59 - be the value over here from the timeline
29:02 - and we're going to set the return value
29:04 - over here we're going to plug it in and
29:06 - the parameter value is going to be the
29:09 - power
29:10 - so the power compile and save if we go
29:12 - over here we will see that we have a
29:14 - power parameter which is controlling the
29:16 - colors
29:18 - next when we
29:20 - finished so over here when we finish we
29:22 - are going to call enable disable input
29:26 - so over here when we finished we're
29:28 - going to call this enable is going to be
29:31 - checked so now we will be able to
29:34 - basically we will be able to move so
29:37 - compile and save that again what is
29:39 - happening so over here everything that
29:40 - we we did explain so let me just select
29:43 - all of this
29:44 - create a comment group and over here for
29:47 - the comments so double click it we are
29:49 - going to say change the color of
29:52 - the wall there you go so compile and
29:56 - save this bad boy so again from here we
29:59 - are getting the material instance we
30:00 - explained this from here we're disabling
30:02 - the input we explained that custom event
30:04 - that we have created change the ball
30:06 - material color we have it over here so
30:08 - it will change the ball material
30:10 - instance the color name over here and
30:13 - the parameter name over here actually
30:15 - and it will set the default value then
30:17 - it will set that material to the ball
30:19 - meshes material so over here we are
30:22 - changing the material color for is
30:23 - active to zero waiting half a second
30:26 - then setting the
30:28 - material color for the is active
30:30 - parameter to one then calling a timeline
30:32 - that will create a value this float
30:34 - value that will go from 0 to 1 in the
30:38 - time interval that we have already
30:40 - explained and then we are going to use
30:42 - that in the lerp function and lerp will
30:44 - slowly go from this value to this value
30:47 - over here in this time interval so it
30:49 - will go from 0 to power which is 100
30:52 - in the alpha time and then we are going
30:54 - to set that value for the power
30:56 - parameter when everything finishes we
30:58 - are going to enable the input so compile
31:00 - and save that and if we go back over
31:02 - here in our editor and if i hit play pay
31:05 - attention now you see how the colors
31:07 - have changed so again
31:09 - stop and then click pause
31:12 - bam it goes from
31:13 - no color to red color to green color now
31:17 - of course you can change or you can play
31:18 - with the parameter values to extend the
31:21 - length
31:21 - so that you can clearly or more clearly
31:24 - see if you don't see the changes of the
31:26 - color for some reason
31:28 - so you can also extend the value of the
31:31 - time it takes to do that but you know
31:33 - i'm leaving up
31:34 - that i'm living up to you for you to
31:36 - experiment and yada yada yada basically
31:39 - so yeah let's move forward the next
31:41 - thing that we are going to do is create
31:43 - the ball movement and before we start to
31:45 - code that or blueprint that we need to
31:47 - go here in our project settings and for
31:50 - the input over here we need to create
31:51 - our axis mappings and action mapping so
31:54 - click on the plus button over here so
31:56 - this one is going to be our first action
31:58 - mapping and we're going to have a second
31:59 - one and click on the plus button over
32:01 - here for the axis mappings so first
32:04 - things first over here for our action
32:06 - one we're going to have jump
32:08 - and for the jump we are going to filter
32:10 - here in the search bar for the space bar
32:12 - so space bar when we press on our
32:14 - keyboard we're going to jump the next
32:16 - one over here i'm going to call action
32:18 - and action is going to be executed when
32:21 - we press the e button on our keyboard so
32:24 - let me just find it over here there you
32:25 - go so we press the e button on our
32:27 - keyboard and we will be able to move the
32:30 - elevator upwards as we saw in the
32:32 - preview of this game and we will be also
32:34 - able to move those boxes as well to so
32:37 - that they can come closer to us and so
32:39 - on and so forth this will happen when we
32:41 - press the e button
32:42 - now over here for our axes we are going
32:44 - to say move right this is going to be
32:46 - the name of the axis
32:48 - and now over here not pressing this plus
32:51 - button but pressing this plus button to
32:54 - add another input so basically click
32:57 - here and the first one is going to be
32:59 - keyboard or key code a
33:01 - and the next one is going to be key code
33:04 - d
33:05 - for the key code a we are also going to
33:08 - add here minus and there you go so this
33:11 - basically means when we press the a or
33:13 - the d key we will trigger this move
33:15 - right axis mappings
33:18 - now
33:19 - what is this a and d basically moving
33:21 - left and right minus 1 is for a because
33:25 - negative side
33:27 - left side basically is the negative side
33:29 - that's why we add here negative 1. so
33:31 - now we can go in our ball player
33:33 - blueprint and right here below this
33:35 - change ball material color we are going
33:37 - to create another custom event so right
33:39 - click over here
33:41 - custom event and this one is going to be
33:44 - movement update or movement however you
33:47 - want to call it it's not that important
33:49 - but it's important that you know what it
33:50 - is so over here we're going to go in a
33:53 - branch which is an if else statement and
33:56 - basically it will be true or false and
33:58 - the condition over here is going to be
34:00 - our puzzle mode so i'm going to plug it
34:02 - in over here
34:04 - and if it's true we are going to move
34:06 - our ball in one way if it's false we're
34:08 - going to move it another way so first
34:10 - over here i'm going to right click and
34:11 - we are going to say set
34:14 - move direction like this
34:17 - and what's going to happen over here
34:18 - from the true i'm going to drag it and
34:20 - i'm going to click on this line for the
34:22 - note two times and i can add another
34:25 - input over here so that i can you know
34:27 - as you can see i can visually set it or
34:29 - make it more clear clearer
34:31 - to read clearer now is a word anyways
34:34 - now over here we are going to say get
34:37 - move right
34:39 - and from the move right we are going to
34:42 - make a vector so i'm going to say make
34:44 - vector
34:45 - and that vector is going to go inside of
34:48 - the x axis and i'm going to plug it in
34:51 - over here and this is basically we can
34:53 - move this a little bit up
34:55 - just to make it a little bit more clear
34:58 - to read
34:59 - and let me just move it a little bit
35:02 - down like this so that it doesn't come
35:04 - close to this and doesn't obscure it
35:05 - yada yada
35:07 - anyways
35:08 - the next thing if it's false i'm going
35:10 - to right click and from here again we're
35:12 - going to say set move direction
35:14 - like this and the false one will go
35:17 - inside over here
35:19 - and i'm going to double click it again
35:21 - and move it down like this and move this
35:25 - like this over here
35:27 - so if it's false we are going to
35:29 - calculate it like this we are first
35:31 - going to get
35:33 - and actually i can move it up here
35:36 - because we are going to calculate it
35:37 - over here we are going to say get actor
35:40 - forward vector like this so we are going
35:42 - to get the actor's forward vector and
35:44 - we're also going to get the move right
35:46 - get move right
35:48 - and we are going to multiply these two
35:51 - so we're going to say from here multiply
35:53 - by float so we're going to multiply this
35:55 - vector by this float
35:58 - and from there we are going to normalize
36:00 - this vector so normalize
36:03 - and from there we are going to plug in
36:06 - this vector over here and if i hover
36:08 - over it will say for the normalize if
36:09 - you don't know what it is gets a
36:11 - normalized unit copy of the vector
36:13 - ensuring it is safe to do so based on
36:15 - the length the return zero vector if
36:17 - vector length is too small to safely
36:19 - normalize
36:20 - basically what will normalize
36:23 - what normalize will do it will stabilize
36:26 - the vector so to say it will stabilize
36:28 - it and it will make the movement a
36:29 - little bit smoother that's the best how
36:31 - i can explain it
36:33 - in understandable terms
36:36 - so after that what we are going to do
36:39 - let me just move this a little bit here
36:42 - move this a little bit here like this i
36:45 - mean it's
36:46 - readable so everything is readable next
36:48 - what we are going to do is from here we
36:49 - are going to say add movement input
36:53 - and from there i'm going to plug this in
36:56 - like this over here
36:58 - so go from here there you go i'm going
37:00 - to double click this to create
37:03 - to create a new line over here and plug
37:05 - this one here as well so there we go so
37:08 - now both of these are connected to this
37:10 - one and lastly this one leads to over
37:13 - here which means basically both of these
37:15 - are leading the execution order to the
37:18 - add movement input now the last thing
37:20 - that we need to do is get the move
37:22 - direction so we need to get it
37:25 - and we need to normalize it so normalize
37:29 - and now that we have normalized the move
37:31 - direction we can plug it in over here
37:33 - and there you go so compile and save
37:36 - that basically again what we are doing
37:38 - based on the puzzle mode if it's true
37:40 - get the move right make a vector out of
37:42 - it over here which is basically going to
37:44 - create a vector with the value for the x
37:47 - that we have over here which is either 1
37:49 - or negative one because over here you
37:51 - see we have
37:52 - minus one or one
37:54 - and all other values are going to be
37:56 - zero
37:57 - and then we're going to set that to the
37:59 - move direction over here if it's false
38:01 - then we're going to get the actor
38:03 - forward vector then get the move right
38:05 - multiply these two and from there
38:07 - normalize the vector and plug it into
38:08 - the move direction and over here then we
38:11 - are going to add that move direction
38:13 - normalized to the add movement input
38:16 - which is going to move our ball or
38:19 - character and i'm going to right click
38:20 - on this create a comment from section
38:22 - and this one is going to be movement
38:24 - update there you go and you can compile
38:27 - and save this
38:28 - now the last thing that we need to do in
38:30 - order to make this work to run it let me
38:32 - just move these comments or these
38:33 - sections over here and probably move
38:36 - this
38:38 - a little bit up over here because now
38:40 - over here in the tick event is where we
38:43 - are going to call the movement
38:45 - update there you go
38:47 - because the tick event is called every
38:49 - frame basically it's like update in
38:51 - unity so compile and save that and it
38:53 - will call every frame this event or you
38:56 - can think of it as a function as well
38:57 - and it will execute all the code that we
38:59 - have just explained
39:02 - so now we can go back over here in our
39:04 - example map and if i hit the play button
39:07 - and now you'll see that the ball is
39:10 - moving of course we cannot jump and the
39:12 - ball is not rotating so the next step
39:14 - will be to create that but the ball as
39:17 - you can see can move left and it can
39:20 - move right as well and we're moving left
39:23 - by pressing a key and moving right by
39:26 - pressing d key in the case of because
39:28 - this is a 2.5 d platformer we are moving
39:30 - forward and backwards
39:32 - backwards by pressing a forward by
39:34 - pressing d you get the point yada yada
39:36 - if something is not clear make sure to
39:37 - ask in the comment below so i can
39:39 - explain this before you proceed to
39:41 - create other things that we are going to
39:43 - do right now moving forward the next
39:45 - step is to go back in our player ball
39:47 - and now that we are moving let us rotate
39:51 - the ball and we're going to do that
39:52 - right below the movement update so i'm
39:54 - going to right click over here and
39:56 - create another custom event
39:58 - and over here i'm going to rename this
40:00 - one to rotate ball or something like
40:03 - that
40:04 - just so that you know that this is used
40:06 - for rotating the balls and also you can
40:08 - think of these custom events something
40:09 - similar like a function i already
40:11 - mentioned that because you can basically
40:12 - create them like this you can call them
40:14 - over here of course we can as you can
40:16 - see over here we have this place a new
40:18 - node but basically
40:19 - this can allow us to have a delegate on
40:23 - this event but i'm not going to go into
40:25 - that right now we will do that in
40:27 - another video anyways what we are going
40:28 - to do from the rotate ball first thing
40:31 - from here i'm going to drag a node and
40:32 - i'm going to set the flat velocity
40:35 - and what we are going to set in the flat
40:37 - velocity well first over here i'm going
40:40 - to say get the velocity so
40:42 - velocity
40:44 - and we are going to get that from here
40:46 - target is the actor then we are going to
40:48 - break this vector into pieces so that we
40:51 - can have separate x y and z
40:55 - and from there we are going to make a
40:57 - vector so from here i'm going to say
40:58 - make vector which will create a new
41:00 - vector that will allow us to plug in x y
41:03 - and z so we're going to plug in the x
41:06 - we're going to plug in the y we're not
41:07 - going to plug in the z because we're not
41:09 - moving so we're not moving the ball like
41:12 - this we're moving it forward and
41:14 - backwards so we're not going to plug in
41:16 - the z and we are going to plug this bad
41:18 - boy over here so this is let me just
41:22 - move these a little bit and this one
41:24 - over here so so that we have you know
41:26 - like a better visual representation of
41:28 - the node because these nodes can get a
41:30 - little bit tricky if you have too much
41:32 - of these they can get messy and so on
41:34 - and so forth same as like spaghetti code
41:35 - you can have spaghetti notes so you need
41:37 - to be careful about that anyways moving
41:40 - forward from here we are going to set
41:42 - the current speed
41:44 - and for the current speed we are going
41:46 - to set the length of this vector so
41:49 - length
41:50 - and from here we are going to say vector
41:52 - length here it is
41:55 - so select the vector length and plug it
41:58 - i almost said pug it plug it in over
42:00 - here as you can see the vector length is
42:03 - basically this think of it as a vector
42:06 - vector is like a
42:07 - x y and z so x
42:09 - y and z the length of the vector is we
42:12 - will use the length of this
42:14 - line length of this line and length of
42:18 - this line so it will you know like form
42:21 - a single line out of these three so that
42:24 - is the length of the vector so let me
42:26 - just compile and save this
42:28 - so now that we have the current speed we
42:30 - are going to go in a branch so from here
42:34 - create a branch which we already know is
42:37 - an if else statement and we are going to
42:39 - test the current speed so we are going
42:41 - to get it and we are going to test if
42:43 - the current speed is not equal to so
42:46 - it's not equal to you notice i'm using
42:48 - the exclamation mark and over here it
42:51 - will make it not equal to when we're
42:53 - testing it if it's not equal to zero
42:55 - basically meaning that we are actually
42:58 - moving so if it's not equal to zero that
43:01 - means we are moving and if that is the
43:02 - case so if it's true if it's false we're
43:05 - not going to do anything but if it's
43:06 - true then we are going to set the
43:09 - rotation amount
43:11 - and the rotation amount is going to be
43:13 - calculated like this
43:16 - first we're going to get the flat
43:18 - velocity so get flat velocity that we
43:21 - set over here
43:23 - so this is our flat velocity then from
43:25 - the flat velocity we are going to get
43:27 - the vector length so it's length and i
43:30 - have issue spelling length apparently so
43:33 - get the vector length from the flat
43:35 - velocity
43:36 - and after that we are going to divide
43:38 - that by a float so over here divided by
43:41 - a float and what is that float well the
43:43 - float is going to be the ball rotation
43:45 - rate so ball rotation rate so get the
43:49 - ball rotation right we know that we set
43:51 - the ball rotation right over here to be
43:54 - 75.75 excuse me
43:57 - so there you go
43:59 - now we are also going to get the pi so
44:01 - simply type pi and
44:04 - i believe it's in the kismet library
44:07 - let me just
44:08 - find it over here not pin debug
44:10 - sometimes it's hard to find things that
44:12 - you need so collision not collision
44:16 - where is it
44:19 - here it is get pi here it is so returns
44:22 - the value of pi and for the pi we are
44:25 - going to multiply that so multiply with
44:27 - the float and the float is going to be
44:29 - the ball rotation rate
44:31 - and from there we are going to plug this
44:33 - into over here now
44:36 - the next
44:37 - step that we are going to do is from
44:40 - here we are going to go and multiply
44:42 - this so multiply with a float and the
44:45 - float that we are going to multiply is
44:46 - going to be get world
44:49 - delta seconds
44:51 - and we're going to plug this in bad boy
44:53 - over here
44:55 - and moving from there we are going to
44:57 - add that so add a float and not like
45:01 - here break the link but here add the
45:04 - float and over here get the rotation
45:08 - amount
45:10 - plug it in over here and plug this in
45:13 - over here now of course we are not done
45:16 - we have still too many things to do i
45:18 - mean too many things just a couple of
45:19 - things but
45:21 - going back over here now this is one of
45:23 - the things that i want to talk about now
45:25 - to be completely honest
45:27 - going into detail how this works and
45:29 - what this is i have no idea but you know
45:31 - if you search online how to rotate uh
45:33 - character how to rotate upon how to
45:36 - calculations to do that you will find
45:38 - many different solutions and you just
45:39 - plug in sometimes i just plug in the
45:41 - solution and it works this is just to
45:44 - show you that you know you don't have to
45:46 - know everything i don't know behind the
45:48 - scenes how this calculation work this is
45:50 - some i'm not gonna say complex math but
45:52 - if you are into math a little bit more
45:54 - you'll probably understand this how or
45:57 - why we are using or how we are using the
46:00 - vector length of the flat velocity
46:01 - dividing that by the p multiplied with
46:04 - the ball rotation rate and then
46:05 - multiplying that with the world delta
46:07 - seconds this is everything to smooth
46:09 - things out we can basically rotate the
46:11 - ball by just using get world delta
46:14 - seconds multiplying that with the ball
46:16 - rotation rate
46:17 - and it will work you will probably be
46:19 - able to rotate the bulb just by using
46:21 - that so multiplying the get world delta
46:24 - seconds with the ball rotation rate and
46:26 - adding that to the rotation amount and
46:29 - that will turn out just fine but these
46:31 - extra calculations are just to smooth
46:33 - things out but as i said like
46:36 - the math that goes behind this i don't
46:37 - know completely so just to be honest so
46:39 - we are going to leave it like here if
46:41 - somebody knows he will explain in more
46:42 - depth but this is just to show you that
46:45 - you don't need to know every single
46:48 - thing and every single aspect about game
46:50 - development in order for you to be a
46:51 - game developer so you can you know just
46:54 - find some solutions online if they work
46:56 - for you they work great then you can
46:58 - just proceed you know
47:00 - further in your game so what we are
47:02 - going to do next is we are going to take
47:04 - the ball mesh and from the ball mesh
47:06 - we're going to say set world rotation
47:10 - like this
47:11 - and move this a little bit here and plug
47:13 - this in over here so what's going to
47:15 - happen here or the rotation that we are
47:17 - going to use is we are going to get the
47:19 - flat velocity get flat velocity
47:23 - and from it
47:24 - we are going to make a rotation from its
47:29 - x
47:30 - so basically from the x axis of the flat
47:33 - velocity and sometimes i don't know why
47:35 - it's a low
47:36 - but anyways so we are going to get from
47:38 - the flat velocity or create a rotation
47:40 - from its x-axis
47:43 - and from there we are going to get the
47:45 - right vector because we are rotating
47:48 - forward so we are rotating in this
47:50 - direction and in this direction so
47:52 - that's why we're getting the right
47:53 - vector
47:54 - and from there we are going to create a
47:57 - rotator
47:59 - from axes and angle
48:02 - so we are going to create you see
48:04 - creates a rotation from on this and this
48:07 - is probably uh miss or
48:10 - how's it called misspelling or mistype
48:12 - or type or whatever create a rotation
48:14 - from this axis and supply the angle in
48:17 - degrees so the axis is the right vector
48:20 - from the x rotation from the flat
48:22 - velocity and the angle is going to be
48:24 - the rotation amount so get the rotation
48:27 - amount and we are going to plug this
48:29 - into over here compile and save that now
48:33 - let me just take all of this right click
48:35 - create a comment to rotate the ball like
48:38 - this compile and save and we can go over
48:41 - here and call it rotate ball so that we
48:44 - don't forget to do that well we will
48:46 - need to call it here in the tick in
48:48 - order to test it out if we don't do that
48:50 - then it will not work but going back
48:52 - over here
48:54 - how we are getting the flat velocity is
48:56 - pretty pretty clear we're getting the
48:57 - velocity as you can see returns the
48:59 - velocity in centimeters unreal unit
49:01 - seconds blah blah blah basically what is
49:03 - velocity there is velocity is speed over
49:07 - time
49:08 - so
49:09 - the
49:10 - speed over time is how much the velocity
49:13 - is so depending on the speed over the
49:16 - time that's the velocity and we're
49:19 - getting the velocity breaking the vector
49:21 - of the velocity getting the x and the y
49:23 - and plugging that into flat velocity
49:24 - this is pretty clear how we're getting
49:25 - that we're getting from the flat
49:27 - velocities vector length the current
49:29 - speed and then from there if the speed
49:31 - is not equal to null because if the if
49:34 - we are not moving
49:36 - the length of this flat velocity will be
49:39 - zero
49:40 - and then we will not go inside of this
49:41 - branch and we will not rotate the ball
49:43 - but if we are moving then the
49:46 - vector length will be greater than zero
49:49 - so from there we did this all of this
49:52 - here as i already said but probably i
49:54 - didn't test it out but i'm pretty sure
49:55 - that you can just rotate the ball by
49:57 - using get world delta seconds
49:59 - multiplying that with the ball rotation
50:00 - rate and adding that to the rotation
50:03 - amount you can try it out and then from
50:05 - here we are getting again from the flat
50:08 - velocity we are getting the
50:10 - creating a rotation from its x-axis and
50:13 - getting the right vector from there and
50:15 - creating a rotator or a rotation from
50:18 - that angle
50:20 - and that axis and plugging that into our
50:23 - rotation set world rotation for the ball
50:27 - which means that we can basically go now
50:29 - over here and i can hit the play button
50:31 - and you will see now that if we move you
50:33 - see how the ball is rotating and notice
50:36 - how the ball is rotating only you see
50:38 - when we go left it is rotating backwards
50:41 - if we go forward it is rotating forward
50:43 - so that is why we are using that get
50:46 - right vector this right over here get
50:49 - right vector that's why we are using
50:50 - that because we are rotating here in
50:52 - this direction and here in this
50:54 - direction we are not rotating
50:56 - up or down or like this and like this
51:00 - so again if i run it you will see now
51:03 - pay attention the ball is rotating
51:07 - moving forward now we are going to
51:08 - create the jump for our ball because
51:10 - well we cannot progress in our level
51:12 - without it so over here
51:14 - right below the rotate ball i am going
51:16 - to right click and we are going to get
51:18 - the jump which is the input action here
51:21 - it is input action jump now what we are
51:24 - going to do is when we press it so over
51:27 - here i'm going to go in a branch
51:29 - and what i'm going to test here in this
51:31 - condition is if we are falling and we're
51:33 - going to get that from the character
51:35 - movement so here is the character
51:37 - movement component over here at the top
51:39 - it can detect if we are falling or not
51:42 - which is the beauty so from here we can
51:44 - say is falling
51:46 - let me just get it here it is
51:49 - and i can plug it in over here so if we
51:51 - are not falling so if that is false we
51:54 - are going to say jump simple as that so
51:58 - there you go compile and save that so
52:02 - again the character movement component
52:04 - has some built-in features it can jump
52:07 - as you can see over here target is
52:08 - character it can jump on its own it can
52:11 - also detect if we are falling down from
52:13 - the sky or basically falling down from
52:15 - the air so we can use that from the
52:18 - character movement if we are falling so
52:20 - if that is false then we can jump and we
52:23 - can test this out right away we can go
52:24 - back over here we can hit the play
52:26 - button we can move as you can see now i
52:28 - can jump pay attention you see bam bam
52:31 - we can jump but well as you can see
52:35 - as you can see the ball is not jumping
52:37 - that high what we need to do is select
52:39 - the character movement and change some
52:41 - things over here such as the gravity
52:43 - scale for example we are going to set
52:45 - that to 3.5
52:47 - we are also going to set over here
52:50 - max tap height we are going to leave
52:52 - that so walkable floor angle we can
52:54 - leave that to set at 45 just to a random
52:57 - number
52:58 - maximum walk speed i'm going to set that
53:00 - to 800 instead of 600.
53:04 - i'm also going to check this checkbox
53:06 - can walk off ledges when crouching which
53:09 - basically means that we can walk off
53:10 - ledges
53:12 - also over here ball or jump z velocity
53:15 - over here it's at 420 i'm going to set
53:18 - that to 1
53:20 - 800
53:21 - and over here air control we're going to
53:24 - set that to 1. so if you hover over when
53:26 - falling amount of ladder movement
53:28 - control available to the character zero
53:30 - no control one full control at max speed
53:32 - so basically we're giving full control
53:34 - to the character of the ball when he is
53:38 - falling also over here at the bottom for
53:41 - the maximum custom movement speed i'm
53:43 - going to set that to 800 basically all
53:45 - these things are self-explanatory so
53:47 - maximum
53:49 - movement speed custom movement speed
53:50 - basically how maximally the speed can be
53:54 - by which we are moving over here for the
53:57 - air control we are already explaining
53:59 - that jumps the velocity initial velocity
54:01 - so basically on the z when we jump how
54:03 - high that velocity is can walk off
54:06 - ledges when crouching we already
54:07 - explained that so on and so forth yada
54:09 - yada yada we don't have to explain all
54:11 - of that because
54:12 - as i said they're self-explanatory so
54:15 - now we can go back over here in our game
54:17 - and hit the play button and when we jump
54:19 - now the ball is jumping higher as you
54:21 - can see
54:23 - and everything seems perfectly fine and
54:25 - it is
54:26 - except when we get over here to this
54:29 - edge
54:30 - we cannot bounce off of it and we saw
54:32 - that when we jump on the edge
54:35 - or on the ledge over here that we are
54:37 - able to jump from another ledge to
54:39 - another ledge as you saw in the preview
54:41 - from here to here to here to here so on
54:43 - and so forth but we cannot do that how
54:46 - can we actually do that well for that we
54:48 - need to
54:50 - create something called a line trace by
54:52 - channel so we need to go back over here
54:55 - and from the true meaning if we are
54:57 - falling which means we are already in
54:59 - the air we have jumped so if that is
55:01 - true we are going to say line trace
55:04 - by trace by channel there you go
55:09 - and i'm going to move this a little bit
55:11 - over here because we have some
55:12 - calculations to do the line trace by
55:15 - channel would will trace a line from the
55:17 - start till the end that it will give us
55:19 - a hit if we hit something so
55:23 - from where to where we are going to
55:24 - trace that line first things first we
55:26 - are going to get the actor forward
55:28 - vector so over here right click get
55:31 - actor for word vector there you go
55:35 - and i think i need to move this a little
55:37 - bit further over here because we will
55:39 - have some calculations over here
55:43 - so what we are going to do now is from
55:46 - the actor forward vector we need to do
55:48 - some calculations over here we're going
55:50 - to multiply him so multiply him with a
55:53 - float
55:54 - and what float is that going to be well
55:57 - first let me just
55:58 - set this like this over here now i am
56:01 - going to get the capsule component so
56:03 - getting the capsule component and from
56:05 - the capsule component i'm going to get
56:07 - the scaled
56:09 - scaled sphere
56:11 - radius or get scaled capsule excuse me
56:13 - scaled capsule radius why did i say
56:16 - sphere because this is a capsule
56:18 - this will return the capsule radius
56:20 - scaled by the component scale so
56:22 - basically the
56:24 - scale of the radius or capsule radius is
56:26 - 75 we are going to scale it by the
56:28 - radius and the radius is basically one
56:32 - so that is what we are component scale
56:34 - which is basically the scale of the
56:35 - component which is one so after that we
56:38 - are going to say from here
56:41 - plus float and we are going to add to it
56:44 - 10.
56:45 - so the value of 10. and this is the
56:48 - value that we are going to plug in over
56:49 - here to multiply with the vector with
56:51 - the actor forward vector because now let
56:55 - me just move these a little bit down
56:57 - here i can get the so i can say get
57:01 - actor location
57:03 - and what we need to do is from here we
57:05 - need to subtract so we need to say minus
57:07 - vector
57:08 - and we are subtracting it from here and
57:12 - the line trace can go over here and this
57:15 - is the start of our line trace
57:18 - there you go now where is going to be
57:21 - the end of our line trace well from here
57:24 - again i'm going to multiply this with a
57:27 - float but again let me just click on it
57:30 - over here something like this can do i'm
57:33 - going to move this bad boy over here
57:36 - again we need to get the capsule
57:38 - component here you go and get skilled
57:42 - capsule radius again
57:45 - some of it over here and again we're
57:47 - going to add to it 10. so plug this in
57:50 - over here i'm basically just copying and
57:52 - pasting this you can select it you can
57:53 - control c command c on mac and ctrl v
57:57 - command v on mac
57:59 - and after that we are going to
58:02 - and i think i can move these down
58:04 - just so that they are a little bit
58:06 - better to read so like this
58:10 - yeah this can work so then we are going
58:13 - to plug this in over here but this time
58:15 - we are as you can see
58:17 - we are multiplying everything but this
58:19 - time over here we are going to get the
58:20 - actor location so copy and paste the
58:23 - actor location
58:25 - and here we are subtracting but now we
58:28 - are adding so plus
58:31 - vector
58:32 - and plug this in over here there you go
58:35 - and this one goes over here for the end
58:39 - trace there you go
58:41 - so this is
58:43 - the beginning and the end of our trace
58:47 - and what this will do is create that
58:50 - trace line
58:51 - for the so compile and save that this
58:54 - will create the trace line from the ball
58:56 - so if the ball is here and since i added
58:58 - 10 over here it's basically going to
59:00 - create a trace line
59:01 - like this so this is the trace line that
59:03 - is going to be created from here to here
59:06 - and it is going to detect anything that
59:08 - we touch within that trace line so
59:13 - what's gonna happen after that is that
59:16 - we are going to go in a branch and we
59:18 - are going to detect if we have touched
59:20 - something so here return value it's
59:22 - going to be plugged in the condition
59:23 - which means basically if we did touch
59:26 - something because you see here does a
59:28 - collision trace along the given line and
59:30 - returns the first blocking hit
59:32 - encountered so if we have a return value
59:36 - if we have a return value true if there
59:38 - was a hit false otherwise that means
59:41 - true we have a hit after that from this
59:44 - true we are going to go over here and we
59:46 - are going to launch the character so
59:48 - launch the character now
59:51 - what this will do is as you can see set
59:54 - appending launch velocity on the
59:56 - character this velocity will be
59:57 - processed on the next character movement
60:00 - component thick and we'll set it the
60:03 - falling and and we'll set it to the
60:05 - following states so yeah
60:07 - basically what this means it will propel
60:09 - the character simple as that but as you
60:11 - can see
60:12 - the explanations here can be complicated
60:14 - but this will just propel the character
60:16 - now what we are going to do is from our
60:19 - out over here
60:21 - what we are going to do is we are going
60:23 - to break the hit results
60:25 - this hit result as you can see this will
60:28 - be that game object or that actor
60:31 - whatever that we hit with this line
60:33 - trace and what we are going to do with
60:36 - it is over here i'm going to right click
60:38 - and i'm going to say get actor location
60:42 - i'm going to right click over here on
60:44 - the return value and click on split
60:45 - structure so that we can have x y and z
60:47 - separately and i'm going to take the x
60:50 - and i'm going to subtract from it so i'm
60:52 - going to say minus float
60:55 - and the float that i'm going to
60:57 - minus it from is going to be from this
60:59 - location right click and split the pin
61:01 - structure and we are going to take the x
61:04 - and plug it in over here
61:06 - the last thing that we need to do is
61:08 - take this and create a sine out of it
61:11 - so the sine value as you can see returns
61:14 - minus 1 if a is greater than 0 0 if a is
61:18 - 0 and plus 1 if a is greater than 0.
61:22 - i will show you what this will do and
61:24 - from here i am going to multiply that
61:26 - with the float
61:28 - so multiply it with the float and
61:30 - basically this is the amount by which we
61:32 - are going to propel the character so
61:33 - let's say 800 and we are going to plug
61:35 - it in for the launch velocity or
61:38 - actually excuse me
61:40 - delete it
61:42 - promote to variable or actually split
61:44 - the pin structure so this goes in the
61:46 - launch velocity for the x the z
61:49 - launch velocity is going to be
61:53 - 1000 and 400 and we're going to override
61:56 - all the axes overriding all the axis
61:59 - basically means that
62:01 - we will use this new velocity for it
62:03 - simple as that so just use the new
62:05 - velocity and there you go so compile and
62:08 - save that now one thing that we can also
62:10 - do is use this debug draw debug type and
62:13 - we can say this
62:15 - persistent and
62:17 - compile and save that just so that we
62:18 - can see the line trace that's being
62:21 - drawn so
62:23 - did you see it here it is this is the
62:25 - line trace that is being drawn so again
62:29 - there you go
62:30 - you see this is what we are doing there
62:33 - you go we are drawing these lines and as
62:35 - you can see as i said they're something
62:36 - like this so this is the line where we
62:39 - are drawing it why is this important
62:41 - because now when we go over here
62:45 - we will be able to touch these and we
62:47 - can bounce off of them you see
62:49 - you see now how we can bounce off of
62:51 - these but before that we will not we
62:53 - were not able to do that now the reason
62:55 - why we are able to do that because as
62:57 - you said this right here now makes it is
63:00 - a bit is a little bit clearer because
63:02 - you saw the line that is being drawn
63:04 - so the line is being drawn from this
63:06 - calculation and this is an arbitrary
63:09 - number that i added so it's not like you
63:11 - always add 10 and it will be perfect now
63:14 - you can experiment this you can add 15
63:16 - 20 30 40 50 a gazillion but you get the
63:19 - point and we need to you know go back
63:23 - from here this is the start and this is
63:25 - the end so that's why i subtract it over
63:27 - here and add it over here because the
63:30 - end needs to be greater and the start
63:31 - needs to be smaller so that you can
63:33 - start from here and go up to here for
63:35 - example
63:37 - now we can remove this we don't
63:40 - need to draw it again and this right
63:43 - here
63:44 - we explain what it is this is pretty
63:46 - clear we got from the hit the details
63:50 - from the hit
63:51 - the object that we hit we got its
63:53 - location x we are subtracting the
63:55 - location x from our own actor and the
63:58 - location x from the actor that we hit
64:00 - now what is this sign well basically
64:03 - this sign will stabilize our character
64:07 - i don't know how to explain it better
64:08 - except by showing you so i am going to
64:11 - break the link over here and i'm going
64:13 - to plug this in over here just so you
64:15 - can see what's going to happen if we
64:17 - don't have this sign
64:19 - and let's go over here and now you're
64:21 - going to see what's going to happen if
64:23 - we don't have this sign to stabilize our
64:25 - character in the air when i say
64:27 - character i mean the ball but it can be
64:28 - any other character now notice now when
64:30 - i jump bam you see
64:33 - i've jumped off that cliff
64:36 - or the edge of the cliff where i was and
64:38 - it can happen the same thing can happen
64:40 - over here you see actually i cannot jump
64:42 - on that so let's try it again over here
64:45 - again when i jump you saw before we test
64:47 - it out it worked perfectly we will we
64:49 - were able to bounce off of this but now
64:51 - you see this so that's why we're using
64:54 - this sign to practically
64:57 - stabilize our character in the air so
65:00 - compile and save that this will
65:02 - stabilize it in the air how that mat
65:04 - works behind the scenes i have no idea
65:06 - don't even try to ask me
65:08 - but this as you can see will stabilize
65:11 - the character and if i go back again
65:14 - you will notice so anytime you need some
65:15 - stabilization especially in the air you
65:17 - can use that sign to convert that float
65:19 - into a more stabilized value because now
65:21 - as you can see pay attention
65:23 - it only allows it to go to minus one and
65:26 - one
65:27 - as you can see if i hover over let
65:29 - returns minus one if a is greater than x
65:32 - if a is less than zero excuse me zero if
65:35 - a is zero
65:36 - and plus one if a is greater than zero
65:40 - so it will stabilize it will allow it to
65:41 - be between minus one and one and that's
65:44 - why our jump now is working and we can
65:47 - bounce off that
65:50 - rock or however you want to call it when
65:52 - we come close to it because otherwise
65:54 - you saw what happened we we got
65:56 - propelled like
65:58 - a gazillion years in time but yeah this
66:02 - is for our jump the last step that we
66:03 - can do is you know i can actually now
66:06 - select all of this
66:08 - and we can move it a little bit back so
66:11 - something like this and we can select it
66:13 - right click create a comment
66:15 - player jump we can call it like this
66:19 - compile and save that so yeah play it's
66:21 - actually player not pl error drum it's
66:25 - player jump there you go compile and
66:28 - save that and we don't have to call this
66:31 - with the tick event because you know we
66:34 - just need to press the function press
66:35 - the button that is connected to this
66:37 - function in order for us to jump but
66:40 - yeah anyways this is how we can utilize
66:43 - the jump in order to you know jump
66:45 - smoothly with our ball okay the next
66:48 - step is to go back in our player ball
66:50 - blueprint and right here below create
66:52 - another custom event so this one is
66:53 - going to be so custom event and
66:57 - this one is going to be power damaged
67:00 - there you go just come closer to this
67:02 - bad boy now what is this going to do
67:06 - well basically we're going to have power
67:08 - when we pull together
67:10 - the
67:12 - cube that we have in our game that we
67:14 - saw in the preview so when we pull it we
67:16 - have power that will be drained when we
67:17 - do that now this power is going to have
67:19 - an input which is a parameter and it's
67:21 - going to be a float and that one is
67:23 - going to be damaged like this there we
67:25 - go so compile and save that what we are
67:27 - going to do is from here we are simply
67:29 - going to set the power so set power
67:32 - but to which value are we going to set
67:35 - it to
67:36 - well the value is going to be
67:39 - we are going to take over here the
67:42 - damage and we are going to multiply that
67:44 - so multiply the damage and what am i
67:46 - typing over here so multiply the damage
67:49 - with the get world so right click get
67:52 - world delta seconds there you go and
67:56 - plug this bad boy in over here so we are
67:59 - going to get the world delta seconds
68:01 - multiply the damage with that and we are
68:04 - going to get the power the current value
68:06 - of the power and we know if we select
68:08 - the power over here the default value is
68:10 - 100.
68:12 - so from here we're going to say minus
68:14 - float
68:15 - and we're going to subtract this value
68:17 - so we're going to subtract the damage
68:19 - that we pass as a parameter over here
68:22 - multiplied with the get world delta
68:24 - seconds now also what we are going to do
68:26 - is we are going to clamp this value so
68:30 - clamp the float
68:31 - and the value is going to be
68:34 - this is the value that we want to clamp
68:36 - and the value is going to be from
68:38 - minimum to maximum which is 100 like
68:41 - this
68:42 - and that is what is going to be set to
68:44 - the power now what is clamp well clamp
68:47 - basically if you hover over returns the
68:49 - value clamp between a and b inclusive
68:51 - and that's enough explanation for you to
68:53 - get confused but basically
68:55 - clamp means it will make sure that this
68:58 - value over here will not go below this
69:00 - value and it will not go above this
69:03 - value so this is what we are doing so it
69:06 - will not go below this and not above
69:10 - this
69:11 - and next we are putting that into the
69:13 - power
69:14 - the next step from here is to
69:17 - and let me see what we have over here so
69:19 - next we have the change
69:23 - change ball material color
69:26 - and over here the material color is
69:28 - going to be changed by using the power
69:31 - plugging in the power over here and the
69:33 - parameter value is going to be power so
69:35 - make sure that it's capital p
69:37 - and if you're not sure you can go back
69:39 - in the material itself and take or get
69:41 - that value the name of it that is next
69:45 - we are going to go inside of a branch so
69:48 - branch there you go which is an if else
69:50 - statement and the condition for the
69:52 - branch is going to be
69:54 - taking the power over here we are going
69:56 - to test if the power is less than or
69:58 - equal to
70:00 - if the power is less than or equal to
70:02 - one actually zero excuse me not 100 so
70:05 - if the power is less than or equal to
70:07 - zero that means we don't have any more
70:09 - power we have died
70:11 - so from here if that is true we are
70:13 - going to say set is dead check the
70:16 - checkbox to make it true
70:18 - and from there we are going to change
70:21 - ball material color
70:24 - and the material name or parameter name
70:26 - is going to be is on
70:28 - and the value is going to be zero which
70:30 - is going to you know
70:32 - make it look like we have died it is
70:34 - going to turn off the ball and last but
70:36 - not least we are going to
70:38 - enable this able input and make sure
70:41 - that this checkbox is not checked so
70:43 - compile and save that so let me just
70:46 - right click create a comment section and
70:48 - this is power
70:50 - damage
70:51 - now again i don't think that there is a
70:54 - lot of things that we need to explain
70:55 - over here because this is everything is
70:57 - basic
70:58 - just subtracting and multiplying and so
71:02 - on and so forth basic things this is to
71:04 - smooth the value out
71:06 - so multiplying the damage with the world
71:08 - delta seconds to smooth the value out
71:10 - because if we pass here the damage to be
71:12 - i don't know five it will subtract
71:14 - pretty quickly if we subtract it
71:16 - directly from the power especially if it
71:18 - happens multiple times you know in in a
71:20 - second for example
71:22 - but when we use get world delta seconds
71:24 - it will make a little bit slower so it
71:26 - will smooth things out and here we are
71:28 - changing the material color we saw that
71:30 - in the beginning we explained all that
71:31 - so i don't think there is a need to do
71:33 - it again but if it's if something is not
71:35 - clear make sure to ask in the comment
71:37 - below
71:38 - and last but not least we have another
71:40 - custom event and we will test these two
71:43 - out shortly we will come back to these
71:45 - two don't worry about that because we
71:46 - cannot test them right now
71:48 - and this one custom event energy
71:52 - damage this is the name of it as i said
71:54 - we cannot test that these two functions
71:57 - right now or events power damage and
71:59 - energy damage
72:01 - because we will need to have the ball
72:03 - actually we need to have the cube and we
72:05 - will have the lasers but before that we
72:07 - are going to have the ui to display that
72:09 - to the user everything will come shortly
72:11 - don't worry about that and i will
72:12 - revisit this again to explain it so over
72:15 - here again we're going to have an input
72:17 - which is the damage
72:18 - parameter and what's going to happen is
72:22 - from here we are going to set the energy
72:27 - here is our energy node and the value we
72:29 - are going to set it to we are going to
72:32 - multiply
72:33 - with a float
72:35 - and click here to add another pin
72:37 - because we're going to have three inputs
72:39 - over here the first one is going to be
72:40 - get world delta seconds as you can see
72:43 - over here plug this in over here and for
72:46 - the third one we're simply going to say
72:47 - one
72:48 - and then we can move this over here get
72:51 - the energy and the default value of the
72:54 - energy by the way is 100 as you can see
72:57 - over here
72:58 - and now that we have the energy we are
73:00 - going to subtract from it so minus float
73:03 - and
73:04 - now that we have that we are going to
73:06 - plug this in over here
73:08 - and clamp the value which is last thing
73:10 - that we need to do clamp the float
73:14 - and we are going to clamp this value
73:16 - between 0 and 100 same thing as what we
73:19 - did with r
73:21 - with the
73:23 - power above
73:24 - so going back over here plugging it in
73:27 - over here and there you go compile and
73:29 - save that now what's specific here for
73:32 - this energy i'm just going to create a
73:34 - comment over here and energy
73:37 - damage over here i'm going to say
73:39 - positive values are equal damage and
73:42 - negative values are equal to heal
73:46 - so when we pass a pas a positive
73:49 - number in the damage over here
73:52 - then what we are going to do is we are
73:54 - going to basically
73:56 - we are going to deal damage when we pass
73:58 - the negative value we are going to heal
74:01 - that and your assignment is to comment
74:04 - below how does that actually work so
74:06 - make sure that you for example pass here
74:08 - 10 and then -10 and see how that works
74:10 - you can use print and so on and so forth
74:13 - but i want you to figure and dig deeper
74:15 - into that and see how that works now we
74:18 - do need to take this energy damage
74:20 - and what did i do and we need to go over
74:23 - here inside of our tick event and from
74:26 - here we need to call energy damage
74:31 - and what's going to happen over here the
74:34 - damage value is going to be negative 25
74:36 - because as i said the negative value
74:39 - over here as you can see
74:41 - positive values equal damage negative
74:43 - values equals heal
74:45 - compile and save that but as i said make
74:47 - sure that you
74:49 - dig in experiment use the print function
74:51 - or print however you want to call it
74:54 - to print out the values over here of the
74:56 - energy you can do that by creating
74:58 - another node and so on and so forth but
75:00 - i don't want to give you any more tips
75:02 - because i want you to investigate that
75:04 - and for you to actually see it now
75:06 - unfortunately as i said we are not able
75:08 - to test this out right away
75:10 - we still need to create the lasers we
75:12 - need to create the cube and we need to
75:14 - create the ui and when we do that we
75:16 - will come back to revisit these lines of
75:18 - nodes or code to explain them again what
75:21 - is happening so let us now create our
75:24 - game hud so we're going to right click
75:25 - over here in the blueprints and we are
75:27 - going to go under user interface and
75:29 - we're going to create a widget blueprint
75:31 - and we are going to call this bad boy bp
75:33 - underscore
75:35 - underscore not plus game
75:39 - hud there we go and double click this
75:42 - to open it over here and voila this is
75:45 - what we need now of course we're still
75:46 - not finished what we want is a progress
75:50 - bar so we want one progress bar we want
75:52 - another progress bar and we want a text
75:55 - there we go and is it a rich text block
75:58 - or a simple text
76:00 - actually a simple text not a rich text
76:02 - block so we can delete this and we just
76:04 - want the text okay so the progress bar
76:07 - first one over here is going to be the
76:08 - power bar
76:10 - the second one over here is going to be
76:12 - the energy bar
76:14 - and the text over here is going to be
76:17 - our interact text so i'm going to just
76:19 - leave it like this for now but what we
76:21 - are going to do well first things first
76:24 - the anchor for this power bar which is
76:27 - basically a slider is going to stay at
76:29 - the top left corner now the position x
76:32 - is going to be 24 the position y 24 the
76:35 - width and the height so size x 2 5 6
76:38 - size y
76:39 - 2 4 there you go so this is how it looks
76:43 - like pay attention look a very nice
76:45 - slider yada yada
76:48 - now what we are also going to do is
76:52 - for the style click on the drop down
76:54 - list and we have the
76:56 - under style we have the background image
76:59 - and we have this tint color
77:01 - now the tint color
77:04 - for this one is going to be red so let
77:07 - me just click on it over here and linear
77:10 - hex color
77:11 - yeah here it is red so there you go this
77:13 - is going to be the tint color for r
77:17 - for the power bars this is the power bar
77:19 - yeah power bar excuse me so i forgot
77:22 - and for this one so going down over here
77:25 - the appearance fill color and opacity
77:27 - click on that one and over here we're
77:29 - going to have the green one now just one
77:31 - second i i did this quickly so this is
77:34 - over here the hex linear color that you
77:37 - need to type 0dff00f
77:41 - this is for the green one you can pause
77:42 - it to type it out and for the red one
77:45 - is over here let me just go and show you
77:48 - it's ff000ff
77:52 - but you know you don't have to do it
77:54 - exactly like i'm doing but if you want
77:56 - to follow along everything there you go
77:58 - also over here for the percent as you
78:00 - can see we can move it left and right so
78:02 - zero over here is well zero and when we
78:06 - are moving it to the one so this is how
78:08 - we are going to leave it so that is how
78:10 - it is going to look like
78:12 - this is for the power bar now going back
78:15 - to the energy bar so let's select the
78:18 - energy bar we are also going to leave
78:19 - the anchor at the top left corner
78:22 - and over here we're going to set the
78:24 - position x to 24 the position y is going
78:28 - to be 56
78:29 - the size x 1 2 8 and the size y 24 there
78:34 - you go
78:36 - now for this bad boy we're also going to
78:38 - change the color
78:40 - so let's go over here under style click
78:42 - on this one and for the hex linear paste
78:45 - in over here zero zero zero
78:48 - a zero c f f or simply pause the video
78:51 - and copy and paste it and click on ok
78:54 - now for the color which is the regular
78:57 - color over here we're going to leave it
78:59 - as is so now if you go over here you see
79:02 - now this is what we have so when you
79:03 - move the percent
79:05 - there you go
79:06 - compile and save this bad boy last but
79:10 - not least for the text block what we are
79:13 - going to do is we are going to set the
79:14 - anchor at the top center
79:18 - so this is where the anchor is going to
79:19 - be as you can see over here
79:21 - the position x for our bad boy over here
79:25 - is going to be
79:26 - negative 1 2 8 so negative 128
79:31 - 40 for the position y
79:33 - the size
79:34 - for the x is going to be 256 to 256 and
79:38 - the size
79:39 - x excuse me 256 the size y is 40. there
79:43 - you go we're going to align the text in
79:45 - the middle and simply over here we're
79:47 - going to say
79:49 - e
79:50 - like in quotes in single quote single
79:53 - quote e single quote to
79:55 - interact
79:58 - there you go so this is what we have
80:00 - compile and save that now again this is
80:03 - not something that you know
80:06 - you need to follow strictly what i did
80:08 - you can experiment with these you can
80:10 - even create a better slider than these
80:12 - that i have created so
80:14 - be my guest and experiment this is what
80:16 - i want you to do that's how you learn
80:18 - the best
80:19 - now what we need to do in order for this
80:22 - and let me just close this bottle
80:23 - material yes close it yeah i don't care
80:26 - what we need to do in order to spawn
80:29 - this bad boy inside of our game is go
80:31 - over here in our game mode and
80:34 - previously in the beginning of the level
80:36 - if you remember when we deleted here
80:38 - from our level blueprint and we said
80:40 - over here open level blueprint we
80:41 - deleted from here
80:43 - two notes well these two notes were
80:46 - actually spawning the ui inside of the
80:50 - game so these two nodes were spawning
80:52 - the ui in the game and we can do it
80:54 - either here we can also do it over here
80:57 - in the game mode it's not important so
80:59 - in the game mode in the event graph
81:02 - over here we can delete a tick event and
81:04 - in the begin play we can do something
81:06 - like create widget like this so create
81:10 - the widget and the widget that we want
81:11 - to create is bp game hut and after that
81:15 - add to viewport
81:18 - and who are we adding to viewport well
81:21 - the returning value which we are going
81:22 - to put over here and there you go so
81:25 - simply compile and save this bad boy so
81:28 - again over here just create ui widget
81:30 - and from the class we can select the one
81:32 - that we have created over here which is
81:34 - our bp game hud there you go and from
81:37 - there
81:38 - we simply need to add it to viewport to
81:40 - make it visible and who are we adding to
81:42 - the viewport the returning value that's
81:44 - been created from this class over here
81:47 - so if we were to go now in our example
81:49 - man hit the play button there we go we
81:51 - have our ui at the top left corner we
81:55 - have the power bar we have the energy
81:57 - bar and in the middle we see that we
81:58 - have e to interact now of course this e
82:01 - to interact will not be visible right
82:02 - away from the beginning instead when we
82:04 - come close to the interactable game
82:07 - objects or actors but in order to do
82:09 - that we of course need to do a couple of
82:11 - other things so the first thing that we
82:13 - need to do is go back over here inside
82:16 - of our game hud and we can close the
82:19 - game mode and next
82:21 - you have the designer and the graph over
82:23 - here if you take a look at the top right
82:25 - corner so we are currently in the
82:26 - designer where we can you know design
82:27 - this but when we go in the graph this is
82:29 - where the nodes are being constructed so
82:31 - what we need to do is
82:33 - we can delete this pre-construct and in
82:36 - the construct the first thing that we
82:38 - are going to do is get a player
82:40 - reference over here i'm going to click
82:42 - the plus button and what i'm going to do
82:44 - is i'm going to say player
82:46 - player
82:48 - ref there you go
82:50 - and this is going to be our player
82:53 - character so or ball how did i name the
82:56 - player
82:57 - bp player ball so object reference from
83:00 - him also over here let me go back in the
83:02 - designer and select the text over here e
83:04 - to interact and when you select it over
83:07 - here at the top you have this is
83:09 - variable is variable so click on that
83:12 - and compile and save that the reason is
83:14 - because we also want to make that text
83:16 - block a variable and you can rename it
83:18 - to interact text or something like that
83:21 - can i click it over here actually we
83:23 - need to rename it over here text block
83:25 - 25
83:26 - interact
83:28 - text
83:29 - there you go so compile and save that
83:31 - and when you go back over here there you
83:33 - go we have the interact text now what we
83:35 - need to do is we need to take the player
83:37 - reference and set it
83:40 - so how can we set it well first things
83:42 - first we need to get the player pawn
83:45 - player pawn
83:46 - and from the player pawn we are going to
83:49 - go over here cast to bp player ball
83:53 - and who are we casting we are casting
83:55 - the player pawn if that is successful if
83:57 - it works then we are going to set the
84:00 - returning value as a reference to the
84:03 - player character that we have just over
84:05 - here created
84:06 - after that inside of our player
84:08 - character blueprint we need to go over
84:10 - here and at the bottom you see over here
84:12 - we have the hud reference
84:14 - well now we need to change this type
84:16 - variable from boolean to
84:18 - game hud
84:19 - bp gamehud and go over here object
84:22 - reference compile and save that and
84:23 - there you go
84:25 - so now also make sure that it is
84:28 - a public variable so that we can now
84:30 - access it over here because now what we
84:32 - are going to do is
84:35 - from our player reference
84:37 - so take the player player reference and
84:39 - from here we are going to say set hud
84:42 - so set hud reference
84:45 - and this is going to go over here
84:47 - so the execution order goes over here
84:50 - and who are we going to set well we're
84:52 - going to set this game hud blueprint and
84:55 - for that we're going to type self and
84:57 - over here get a reference to self and
84:59 - plug it in over here now what the hell
85:01 - is this self self basically means it
85:04 - refers to itself
85:06 - so it is referring to this game hud
85:09 - blueprint now over here we need to do
85:11 - one more thing which is call
85:14 - another function that we still didn't
85:16 - create so let's go quickly create them
85:18 - over here li right below the tick event
85:20 - and in the tick event we will do another
85:21 - thing so over here we have custom event
85:24 - and we're going to have two custom
85:26 - events i'm going to copy and paste this
85:28 - one
85:29 - so i'm going to select this custom event
85:31 - and come on can you just
85:34 - why isn't this working
85:38 - for some reason i cannot rename it i
85:41 - don't know why there you go so show
85:45 - show
85:46 - interaction
85:50 - text there you go another custom event
85:53 - right click
85:54 - custom event
85:57 - hide
85:59 - interaction
86:00 - text
86:02 - there you go
86:03 - now what we're going to do is simply get
86:05 - the text or interact text there you go
86:09 - from here we're simply going to say set
86:11 - visibility
86:14 - and plug this in over here
86:17 - so plug it in over here the visibility
86:20 - if it's show we're going to make it
86:22 - visible copy and paste it if it's not
86:29 - we are going to set it to hidden there
86:30 - you go so compile and save that
86:34 - and what we need to do at the top over
86:37 - here after we set a reference to the ui
86:39 - hut in the player blueprint from here
86:42 - we're going to hide
86:44 - the interaction text which means now let
86:47 - me just compile and save that and if we
86:50 - go back over here in our example map hit
86:52 - the play button you see we don't have
86:54 - the interaction text previously it was
86:56 - here if you remember a moment ago it was
86:57 - there but now we don't have it because
87:00 - well now we
87:01 - are hiding it
87:03 - so we are doing that with these two
87:05 - events now what's going to happen here
87:08 - inside of our tick in the tick we're
87:11 - going to take the player
87:13 - and we're going to test if he is valid
87:15 - so is valid but we want this one with a
87:17 - question mark not the one with the f
87:19 - mark but the one with the question mark
87:21 - and this goes over here
87:23 - so if the player character is valid
87:26 - which means we have a player he is not
87:28 - dead we are going to take the
87:31 - power bar
87:32 - from here get the power bar and we're
87:35 - going to say set percent
87:39 - and this goes over here and the percent
87:41 - that we are going to set
87:43 - for the power bar
87:45 - is going to be from our player so we are
87:47 - going to get the player and from the
87:49 - player we are going to get the power
87:52 - and after that so we have the player we
87:55 - have the power then we are going to
87:57 - divide that by float and that division
88:00 - is going to be by 100 and then plug it
88:03 - in over here why by 100 so compile save
88:05 - that if we go back over here if you take
88:07 - the power bar
88:08 - pay attention now so over here where is
88:12 - the here is the percent as you can see
88:14 - it goes the value goes from zero up to
88:16 - one
88:17 - so if the power value is 100 we need to
88:20 - divide that by 100 in order to get the
88:23 - number between zero and one because if
88:25 - it's 90 the power drops to 90 if we
88:28 - divide that by 100 that means 0.9
88:31 - so on and so forth you get the point and
88:32 - we're going to do the exact same thing
88:34 - for the energy bar so going over here
88:37 - first we're going to take the energy bar
88:40 - get it set percent
88:42 - exactly the same thing we're doing but
88:44 - this time for the energy bar so plug
88:46 - this in over here this goes over here
88:49 - and now getting the player reference
88:52 - getting the energy so get
88:54 - energy there you go
88:57 - and the energy also needs to be divided
88:59 - by a float and that division is going to
89:02 - happen with 100 again for the same
89:05 - reason plug this in over here and make
89:08 - sure that you compile and save that now
89:09 - this is in the tick event for the ui hud
89:13 - which means we don't have to do anything
89:14 - else the tick is being updated on its
89:16 - own and basically it will also
89:20 - update this
89:21 - when the player's energy and power
89:24 - updates of course if we go back over
89:25 - here we test this out nothing will
89:27 - happen because we don't have the lasers
89:30 - who are subtracting energy from us we
89:34 - don't have the cube that we need to move
89:37 - that are going to subtract our power so
89:39 - on and so forth so the next step is to
89:41 - start creating them moving forward the
89:44 - next thing that we want to create is our
89:46 - laser so over here in the blueprints we
89:47 - are going to right click and create a
89:49 - blueprint class and it is going to
89:51 - inherit from the actor and this is going
89:53 - to be bp underscore laser
89:57 - and inside of the laser first we are
90:00 - going to set the laser so select the
90:02 - default scene root and from here add a
90:04 - component which is going to be a
90:06 - particle system component
90:08 - there you go so this is going to be our
90:10 - particle system let me just
90:12 - go back over here where our objects are
90:16 - and why for some reason is this not
90:18 - slowing down and when i say this i mean
90:21 - the movement of my
90:23 - the movement of the mouse and stuff like
90:24 - that so yeah anyways
90:27 - for the particle system over here where
90:29 - it says particles over here
90:33 - for the template click on the drop down
90:35 - list and we want the electricity arc
90:38 - this one this is the one that we want
90:41 - now
90:43 - this one or actually the p electricity
90:45 - arc let me just find over here arc like
90:48 - this here it is the p
90:50 - underscore electricity arc not directly
90:52 - electricity arc so this is the one that
90:54 - we want so compile and save that and
90:56 - basically yeah we don't have to change
90:59 - anything else we can leave it as is and
91:02 - there you go
91:03 - now if we go back here inside of our
91:05 - example map
91:07 - and what i'm going to do is let me just
91:09 - go over here in the world outliner i
91:11 - want to create a new folder
91:14 - and that folder is going to be lasers
91:16 - who is going to hold our lasers and i'm
91:18 - going to put this first laser over here
91:20 - and i'm going to put it under this one
91:22 - so under the folder
91:24 - and the position for the laser is going
91:25 - to be 730 for the x for the y is zero
91:29 - and for the z
91:30 - 821 there you go
91:33 - voila so this is where our laser is
91:35 - going to be now if we were to run the
91:37 - game of course nothing is going to
91:38 - happen we are just going to come here
91:40 - close we are going to see the laser like
91:41 - this but the laser needs to fire like
91:44 - this over here not like this
91:47 - so in order to fix that
91:49 - we do need to go back over here in our
91:52 - laser actor and come inside of the event
91:56 - graph
91:57 - and using we don't need the
92:00 - begin overlap we don't need beginplay we
92:02 - need the tick event from here
92:05 - and
92:06 - for the laser what we need to do
92:09 - here we need to create two variables
92:10 - first one is going to be trace
92:13 - max
92:15 - max length
92:17 - and we also need laser direction so
92:20 - laser
92:21 - direction
92:23 - laser direction is going to be a vector
92:26 - which is going to determine the
92:27 - direction of the laser and the trace max
92:30 - length is going to be a float so compile
92:32 - and save that because now for the trace
92:34 - maximum length
92:35 - we need to set the value for it so the
92:38 - value the default value is going to be
92:42 - 100 000
92:44 - so 100 000 is going to be for the
92:46 - maximum length
92:47 - and what we need to do
92:50 - over here in the tick event we are going
92:53 - to
92:54 - create a line trace by channel same as
92:58 - what we did with our ball that was
93:01 - enabling us to jump but this time we are
93:04 - doing this with the laser so that we can
93:06 - detect the player and actually deal
93:08 - damage with or to the player so over
93:10 - here i am going to get the actor
93:13 - location and this is the location of the
93:16 - current actor which is our laser
93:20 - what do i need with the location well
93:22 - over here we need to get the laser
93:26 - direction
93:28 - and we also need to get this trace max
93:31 - length
93:32 - and we need to add or actually first
93:35 - multiply these two so first over here
93:38 - the laser direction multiplied by float
93:40 - and the float is going to be trace max
93:42 - length that is going to be multiplied
93:44 - with
93:45 - and then we are going to add two vectors
93:48 - so the actor location
93:50 - vector plus vector this is what you want
93:52 - adding to the product of these two
93:56 - so now when they are added this is going
93:59 - to be our end
94:01 - trace channel and the start trace
94:04 - channel is going to be the actor's
94:06 - position directly or the actors location
94:09 - so as you can see and we already know
94:12 - how the line trace by channel works we
94:14 - saw that with the ball but again as i am
94:17 - you know just briefly explaining it
94:19 - so the start is from the actor's
94:21 - location and the end is from the laser
94:24 - direction multiplied with the truss
94:26 - trace maximum length plus to the actors
94:29 - location which means it's going to be
94:30 - way over here
94:33 - and it's gonna you know shoot that line
94:36 - and what's gonna happen from here is
94:38 - that we are going to go in a branch
94:42 - and we know that a branch is an if else
94:45 - statement
94:47 - the condition is going to be the return
94:48 - value meaning if we hit something it is
94:51 - going to well be returned
94:54 - now also what we are going to do is if
94:56 - we
94:57 - if the hit value is true we are going to
95:01 - set the from the particle system over
95:04 - here we are going to set the beam source
95:07 - set
95:08 - beam source point
95:10 - here it is and the beam source point is
95:13 - basically from where the being is going
95:15 - to start so if it's true we are going to
95:17 - put it over here
95:20 - now the new source point is actually
95:23 - going to be the actor location so we can
95:26 - copy and paste this bad boy over here
95:29 - and i can move this over here
95:31 - and i can plug this in over here so the
95:34 - new source point is going to be the
95:36 - actor location or the location of the
95:39 - current or the whole actor holding
95:42 - holding this particle emitter now also
95:45 - what we want to do is from here from our
95:47 - out hit we want to break this so break
95:50 - the hit point and this can be a little
95:52 - bit over here and over here just for
95:54 - readability purposes so to say
95:58 - next what we also need to set is we have
96:01 - the beam source point we also need to
96:04 - set the beam target point so from here
96:07 - we are going to say but first we need to
96:09 - get the particle system so copy and
96:11 - paste the particle system
96:13 - and from here we are going to say set
96:16 - beam
96:18 - so set beam target point so the source
96:21 - is where the beam is starting but the
96:23 - target is where the beam is going to hit
96:26 - so like his last destination the last
96:28 - destination is going to be the location
96:31 - of the hit
96:32 - that we well
96:34 - got from the line trains channel so that
96:36 - is going to be the new target point
96:40 - next what we want to do is from here
96:43 - from the other actor or the hit actor
96:46 - from here we want to cast to the bp
96:50 - player ball try to cast it so we are
96:52 - going to say cast to bp player ball like
96:55 - this so we are trying to do that and we
96:58 - need to get from here the hit actor and
97:02 - plug him in over here and let me just
97:04 - double click this bad boy
97:06 - so that we can do it like this as you
97:08 - can see we are taking the hit actor the
97:11 - hit actor is basically what we hit or
97:14 - touched with the
97:16 - line trace channel
97:18 - if that is castable
97:20 - or if we can cast him into a bp player
97:24 - ball that means we hit the ball and if
97:27 - we hit the ball what we need to do is we
97:30 - need to get from the ball the power
97:32 - damage so from here we're going to say
97:35 - power damage as you can see which is our
97:38 - function and the damage is going to be
97:41 - 50 and i can compile and save that there
97:43 - we go and if i go over here in our
97:45 - player ball and this is our energy
97:47 - damage this is the power damage so we're
97:49 - going to take the damage multiply it
97:51 - with the world get world delta seconds
97:53 - then subtract from the power then set
97:56 - the value over here and then use the
97:58 - change ball material color yadda yadda
98:00 - yadda you get the point but what's even
98:03 - prettier
98:05 - is that we can go here in our game hud
98:07 - and over here in the tick event we are
98:09 - using the power to set the percent and
98:11 - we can see all that visually being
98:14 - represented now so before we go back
98:17 - again and briefly explain what is going
98:19 - on over here
98:22 - even though i don't think there is a
98:23 - need but i will go briefly like in a
98:25 - minute or in a second explaining
98:26 - everything what is what is happening but
98:28 - if i go back over here and hit the play
98:30 - button
98:31 - notice now the power
98:33 - so pay attention at the top left corner
98:36 - and
98:40 - let me just take a look at oh
98:42 - yeah
98:43 - silly stupid stupid teacher me
98:48 - you see what i forgot over here i mean
98:50 - you don't but over here the laser
98:51 - direction compile and save that
98:54 - the laser direction
98:56 - for the x next needs to be negative one
98:59 - or otherwise this will not work because
99:01 - we're using over here the laser
99:03 - direction so as you can see multiplying
99:06 - with the trace max length if the if the
99:09 - laser direction is zero zero zero on
99:11 - three axes if we multiply that with any
99:14 - number it's gonna be zero so it's not
99:16 - gonna work also another thing that we
99:18 - need to do is go in the player ball and
99:20 - select his capsule component and over
99:22 - here for the collision
99:25 - we need to change this collision from
99:28 - the pawn to custom and over here we need
99:30 - to have the collision enabled to query
99:32 - in physics and we can also block all
99:35 - over here it's not important but what's
99:37 - important is that we have this query and
99:39 - physics so collision enabled basically
99:41 - and if we don't have this then we will
99:44 - not collide and i can just demonstrate
99:46 - that quickly so if we have a pawn over
99:48 - here like it was a moment ago if i hit
99:50 - the play button and go now to test this
99:53 - out it will basically not work there you
99:56 - go nothing is working and voila
99:59 - but if we go back and select the capsule
100:01 - component set this to custom and put it
100:04 - to collision enabled and we can block
100:07 - everything it's not important compile
100:09 - and save that so if we back or go back
100:12 - now and hit the play button
100:14 - so now when i come over here pay
100:17 - attention at the top left corner notice
100:19 - now how the laser is well destroying me
100:22 - and also you will notice how the laser
100:25 - when he touches me
100:27 - when he touches the ball and pay
100:29 - attention i cannot move now i'm dead
100:31 - when he touches the ball he's like cut
100:34 - out he goes only to the ball so the
100:37 - laser goes from here for example if he
100:38 - touches the ball over here he goes only
100:40 - to here he doesn't go above the ball
100:44 - as you can well see
100:46 - and if i go back over here and the
100:47 - reason why
100:49 - it cuts out on the ball is because of
100:51 - this
100:52 - beam target point is set to the break
100:55 - hit result or the hit result that we
100:57 - have from here and its location
101:00 - so there you go and if we have the
101:02 - player we are getting his power damage
101:04 - and what we are doing we are calling it
101:07 - by using damage 50 and we saw what's
101:09 - happening so we saw the top left corner
101:12 - and this over here we saw it how it's
101:14 - being calculated so on and so forth yada
101:17 - yada i've already explained that so
101:20 - basically
101:21 - yeah if something is not clear by any
101:23 - chance i believe we explain everything
101:24 - over here and in the ball we already
101:26 - explained what is happening something is
101:28 - not clear just make sure to ask and i
101:31 - will you know help you out but before we
101:34 - you know like proceed on other parts we
101:36 - are also going to copy and paste this
101:38 - laser because we are going to have
101:40 - another one so this laser is going to be
101:42 - at the position x 4 7 6 seven nine
101:46 - for the position y zero and for the
101:48 - position z is two six one one there you
101:51 - go so this one is going to be over here
101:55 - as you can see now we are going to copy
101:58 - and paste this one as well
102:00 - because we are going to have the third
102:02 - one and the position x for the third one
102:04 - is going to be seven six
102:06 - eight zero
102:08 - and zero zero for the or zero for the y
102:11 - and for the z it's going to be 2 4
102:14 - 4 8. there you go so compile or actually
102:18 - say the current then if i hit the play
102:19 - button let me just eject myself and if i
102:22 - go over here there you go so pay
102:24 - attention now we have these two lasers
102:27 - over here
102:28 - and of course we will need our cubes in
102:31 - order to you know overcome them which
102:34 - well will be the next thing that we are
102:35 - going to create so inside of the
102:38 - blueprint folder we are going to right
102:39 - click and create a blueprint class which
102:41 - is going to inherit from the actor and
102:43 - this is going to be bp underscore enter
102:47 - in
102:48 - interactive
102:51 - hopefully i can spell there you go
102:54 - interactive block double click the bad
102:57 - boy what we need to do first things
103:00 - first select the interactive block here
103:02 - over here at the top click on add
103:04 - component and filter for the physics
103:08 - physics constraint there you go and drag
103:12 - the physics constraint to be the root
103:15 - object now what the hell is a physics
103:17 - constraint if you hover over this is
103:19 - effectively a joint that allows you to
103:22 - connect two rigid bodies together
103:23 - basically it will allow us to pull the
103:26 - cube easier with the ball
103:29 - simple as that so what we are going to
103:32 - do first here the component name for our
103:35 - physics constraint we're going to say
103:37 - here collision for one now also what i'm
103:41 - going to do is
103:43 - over here for the linear limits i am
103:46 - going to set everything to be free so
103:48 - linear limits means we can linearly
103:50 - indicate the linear constraint applied
103:52 - along the x-axis basically if we can
103:54 - move our constraint on the linear x-axis
103:57 - linear y so on and so forth over here
104:00 - for the swing one motion we are going to
104:03 - have it locked
104:05 - and over here it's free for the swing
104:07 - two motion twist motion will also be
104:10 - free and i think that's all there is to
104:13 - it
104:14 - that's all there is to it that we need
104:16 - to do so compile and save that
104:19 - next
104:20 - select the physics constraint and filter
104:23 - for our static mesh component so filter
104:27 - over here static
104:30 - mesh there it is and i'm simply going to
104:32 - call it mesh
104:33 - which is going to contain our cube so
104:35 - you can click here where it says over
104:37 - here to add that mesh and filter for the
104:41 - cube
104:42 - rounded so this is the one that we want
104:45 - the cube around it there you go
104:48 - now what i'm also going to do is
104:51 - over here for the cube we need to check
104:54 - this simulate physics checkbox and for
104:57 - the mass in kg
104:59 - over here from 100 we're going to set it
105:02 - to 3000
105:04 - linear damping we're going to set that
105:06 - to 2 and then you can hover over and see
105:08 - what it is drag force added to reduce
105:10 - linear movement so you a lot of these
105:13 - things well basically all of these
105:14 - things are self-explanatory so you can
105:17 - you know
105:18 - just hover over and see what they are
105:21 - over here for the collision we are going
105:23 - to check this
105:24 - simulation generates hit events
105:27 - and over here for the collision presets
105:29 - we are going to leave that to physics
105:31 - actor but over here for the physics
105:33 - material we are going to select the
105:36 - slide physics material and what the hell
105:38 - is this well if you double click on it
105:39 - and if you
105:40 - go inside
105:42 - this is basically a physics material
105:44 - that will allow the cube to slide when
105:47 - we start dragging it smoother you see
105:50 - the friction is zero meaning it will not
105:52 - have any friction when we move it as you
105:54 - can see over here override friction
105:56 - combined restitution so on and so forth
105:58 - but basically when you play with these
106:00 - settings depending on the friction
106:02 - mostly because the friction is
106:05 - when
106:06 - the
106:07 - actor is being dragged
106:10 - over another actor so how they touch
106:12 - each other will there will there be
106:15 - friction or not when it's zero well it's
106:17 - not
106:18 - zero there is no friction which means
106:19 - this one will slide think of it like if
106:21 - you have a game for example where you
106:22 - want to create ice or an ice terrain
106:25 - well you will use zero for friction
106:27 - because ice is slippery there you go
106:30 - so now we have our mesh next what we
106:32 - need to do is select the mesh and for
106:36 - the mesh i am also going to add so
106:39 - before we do anything i'm over here on
106:41 - the z axis i'm going to set it to
106:43 - negative 2 7 8 there you go and also
106:48 - what i'm going to do is on the box
106:51 - extent or actually this is for the
106:52 - trigger detection excuse me this this
106:54 - will be for the trigger that we are
106:56 - going to add to the mesh so excuse me
106:58 - for that so first select the mesh and
107:00 - filter for the box collision so there
107:03 - you go this is where i made a mistake so
107:05 - the box collision
107:07 - or we are going to rename it to
107:08 - detection
107:10 - trigger there you go so this is my
107:12 - mistake and now what we are going to do
107:14 - with this bad boy is now we are going to
107:17 - on the z axis to say negative 2 7 8 to
107:20 - set the value a little bit down as you
107:23 - can see
107:24 - what i'm also going to do is here for
107:26 - the box extent
107:29 - x is going to be 1000 so 1000 y is going
107:34 - to be 130 and z is going to be 300 there
107:38 - you go which is going to well look like
107:41 - this so it looks like this
107:43 - and compile and save this bad boy now
107:46 - last but not least we're also going to
107:48 - select the mesh and attach a particle
107:52 - particle particle so here it is particle
107:55 - system and i'm going to click on this
107:57 - bad boy this is going to be our beam
107:59 - there you go
108:00 - and i'm
108:01 - it's not important to capitalize the b
108:04 - but yeah i'm going to capitalize it so
108:06 - over here for the template now we are
108:08 - going to select the electricity arc so
108:11 - electricity arc not the one like we did
108:14 - if i type arc over here not p underscore
108:17 - electricity arc just electricity arc so
108:19 - select that one
108:21 - and what i'm going to do for the beam is
108:24 - i am going to rotate him
108:26 - 90 degrees on the z-axis
108:29 - and basically that is that so we can
108:32 - compile and save that now if i were to
108:36 - go
108:37 - and put this block so if i go back over
108:39 - here let me just right click and create
108:41 - a new folder and this one is going to be
108:44 - interactive elements
108:47 - so interactive elements folder where we
108:49 - are going to put our interactive
108:50 - elements if i go into the blueprints and
108:52 - put the interactive block and i'm going
108:54 - to put it over here interactive elements
108:56 - and if i position the first one is going
108:59 - to be at 2806
109:02 - zero for the y and for the z one one two
109:05 - five there you go we are also going to
109:08 - rescale it so over here click on the
109:11 - lock icon for the scale and over here
109:14 - the scale is going to be 1.5 there you
109:17 - go so compile that or save the current
109:20 - if i hit the play button we can come
109:22 - close to it
109:24 - and we can jump on it and
109:26 - all of that stuff so that is totally
109:29 - fine but you know nothing is happening
109:31 - because we need to be able to drag it
109:33 - towards us in order to move it over here
109:35 - so that we can then jump from here to
109:37 - here to here to here to here so you get
109:41 - the point so let's go back in the
109:44 - bp interactive block and here in the
109:46 - event grab the first thing we're going
109:48 - to create a couple of variables so click
109:50 - here we're going to have one variable
109:52 - two three
109:54 - and four variables the first one is
109:56 - going to be the player reference so
109:58 - player ref so reference to the player
110:00 - which is going to be a type of rbp
110:02 - player ball so ball
110:04 - and there you go object reference
110:07 - the second one is going to be the move
110:09 - direction so move
110:10 - direction and this is as you can assume
110:13 - a vector so we're going to have a vector
110:16 - next we're actually going to have one
110:18 - extra variable so the next one is going
110:20 - to be can
110:21 - be
110:22 - pushed
110:24 - and the third one is going fourth one
110:26 - that is going to be can detect player
110:30 - and last but not least we're going to
110:32 - have the ui hud reference so ui hud now
110:36 - these two are going to be booleans as
110:37 - you can assume but the ui hud is going
110:39 - to be the game hud so hud bp game hud
110:43 - object reference compile and save that
110:47 - now above are first i'm going to delete
110:50 - all of this
110:51 - and above the begin play we are going to
110:54 - create a custom event so over here we're
110:56 - going to say custom event and we're
110:58 - going to call this one lock
111:01 - all
111:01 - rotations and this will not allow the
111:04 - rotations or it will not allow the game
111:07 - object the actor to rotate so what's
111:10 - going to happen from here is we're going
111:11 - to get the physics constraints
111:14 - and from there we're going to drag a
111:16 - node and we're going to say set
111:18 - angular swing one limit
111:22 - and we are going to continue the
111:24 - execution flow from there and motion
111:27 - type is not going to be free but it's
111:28 - going to be locked because we are not
111:31 - going to be allowed to move from here we
111:34 - are going to have our physics constraint
111:36 - that we are going to say set angular
111:39 - limit or swing limit 2
111:42 - and this goes over here
111:44 - but i am going to do something like this
111:48 - and like this so that it is more
111:50 - readable
111:52 - so over here for the angular swing 2
111:55 - limit it's also going to be locked
111:57 - and last but not least we are also going
112:00 - to move from here we're going to say set
112:03 - angular twist
112:06 - twist limit
112:08 - here it is
112:09 - plug it in over here but i'm also going
112:12 - to double click on this to create
112:14 - another line or dot on this node line so
112:18 - locked there you go
112:20 - so this is going to be our lock all
112:23 - rotations which is basically not going
112:25 - to allow our node or actually our actor
112:29 - to rotate and i'm going to call this one
112:32 - lock all so lock all
112:35 - rotations there we go
112:37 - compile and save that
112:40 - inside of our begin play we are going to
112:43 - first delay so we are going to say delay
112:46 - over here for one second so we are going
112:50 - to delay for one second and the reason
112:52 - why we need to delay is because next we
112:56 - are going to get the player pawn so we
112:58 - are going to right click over here and
112:59 - get the player pawn
113:02 - and from here i'm going to cast you bp
113:06 - player ball or ball player however
113:09 - however we called it so plug this in
113:12 - over here
113:13 - and next from it we are going to set the
113:17 - player ref
113:20 - so here it is our player reference so
113:22 - plug this in and next we are going to
113:26 - set the ui hud
113:28 - over here
113:29 - now the hud is going to be set from the
113:31 - player hud so
113:34 - come on over here actually we're going
113:36 - to get it get the hud reference and then
113:39 - we are going to set it over here now the
113:42 - this is exactly the reason why we're
113:43 - delaying
113:45 - you can test it out on your own i'm not
113:47 - going to do that over here because i
113:48 - already tested it so you can do that on
113:51 - your own but i'm going to explain why we
113:53 - are delaying over here because inside of
113:57 - our let me just take a look at over here
113:59 - was it in the player
114:02 - i think it's not in the player but it's
114:04 - actually in the bp over here inside of
114:08 - the hud itself so when we go in the
114:10 - event construct over here we are getting
114:13 - the player and setting ourself to the
114:16 - reference inside of the player variable
114:18 - hud reference and this hud if you
114:21 - remember is being created in the game
114:23 - mode in the begin play and over here in
114:27 - the interactive block in the begin play
114:29 - we're getting the reference to the
114:30 - player to get the reference to the hud
114:32 - so by delaying here one second we are
114:35 - allowing all of this to be already
114:37 - performed
114:38 - so we wait one second before we do all
114:41 - of this over here which means the ui hud
114:44 - will be created then the ui hud will get
114:46 - a reference to the player and it will
114:48 - add self to the reference of the hud
114:51 - reference inside of the player so that
114:53 - we can actually get it from here but you
114:55 - can test it out try to use it without
114:57 - this delay and we'll see that
115:00 - you will not have a reference to it
115:01 - because it will not get a chance to be
115:03 - created before we try to get access to
115:06 - it over here
115:07 - so next from here we are going to lock
115:11 - all rotations all rotations
115:15 - and now that we have locked all
115:16 - rotations next we are going to get the
115:19 - beam which is our particle system we are
115:21 - going to simply deactivate it because we
115:24 - don't want it to work before we actually
115:28 - start interacting with it now we can
115:31 - select all of this over here the begin
115:33 - play and i can create a comment i can
115:35 - say something like initialize the cube
115:38 - so like this compile and save that
115:42 - so moving forward next
115:44 - select the detection trigger so make
115:46 - sure that you select it this is really
115:48 - important so first select the detection
115:50 - trigger and from there right click and
115:53 - then here in the search type on
115:55 - component begin overlap there you go and
116:00 - we want this one on component begin
116:02 - overlap in parentheses detection trigger
116:05 - so what's going to happen over here
116:07 - inside of the uncomponent begin overlap
116:10 - is that we are going to try and cast so
116:13 - cast to bp player ball
116:16 - and we are going to cast the other actor
116:19 - meaning basically the actor that we have
116:21 - interacted with if that is true
116:24 - so we have collided with the actor our
116:27 - ball actor that is
116:29 - then we are going to go from here and
116:32 - first get right click and get the player
116:35 - controller
116:37 - and from the player controller we are
116:39 - going to enable the input
116:43 - and over here i'm going to plug this in
116:45 - and not in the target over here but the
116:47 - player controller there you go the
116:48 - target itself but the player controller
116:51 - is the one who is going to you see
116:53 - pushes this actor on the stack and input
116:55 - being handled by the player controller
116:57 - next we are going to get our ui hud
117:01 - and from there we are going to show
117:03 - interaction
117:04 - text so from here
117:07 - like this we are going to plug it in
117:09 - show the interaction text compile and
117:12 - save that
117:13 - now i can copy all of this
117:16 - and we can select the detection trigger
117:18 - again because now we need to do the same
117:21 - thing but the opposite so right click
117:23 - over here and we're going to say on
117:25 - component end
117:28 - overlap
117:30 - and
117:31 - it's going to be the same thing as i
117:32 - said so we are going to try and cast to
117:35 - the bp player ball the other actor if
117:37 - it's true but here we're not going to
117:39 - enable the input instead we're going to
117:42 - disable input
117:45 - here it is disable the input and plug in
117:49 - the player controller over here because
117:51 - well now we don't want to interact and
117:54 - also over here from the ui hud we don't
117:56 - want to show but hide the text so hide
117:59 - the interaction text and we're going to
118:02 - plug this in over here there you go so i
118:05 - can move this something like this over
118:07 - here and by the way i am going to select
118:10 - these and i am going to
118:13 - comment them and group them in a comment
118:14 - and i'm going to say here
118:16 - triggers
118:18 - or you know overlap our however we want
118:20 - to call triggers for detecting collision
118:25 - with player
118:27 - compile and save that
118:30 - now
118:30 - we can test this out if i go back here
118:32 - in the example map hit the play button
118:34 - when i come close to our cube we know
118:37 - that it has a large
118:39 - collider so if i come close you see e to
118:42 - interact if i move away it goes away so
118:45 - this is what we just just did a moment
118:47 - ago again if we come close e to interact
118:51 - because if you go over here you see this
118:53 - is that trigger this is the box when we
118:56 - come close to it or inside of it
118:59 - we will see this because this is what we
119:01 - did over here this is that line of code
119:04 - now of course
119:05 - this will not allow
119:07 - it
119:09 - this is not enough
119:10 - for it to actually
119:12 - allow us to move the cube towards the
119:16 - ball so we need to program that as well
119:18 - so let's go back inside of our
119:20 - platformer or actually interactive block
119:22 - and right here below our on component
119:25 - begin overlap we are going to get our
119:27 - tick event back
119:29 - so what's going to happen from the tick
119:31 - event well this is where the magic is
119:33 - going to happen this is where we're
119:34 - going to pull our
119:36 - cube towards the ball so first we are
119:39 - going to go from eventing to a gate now
119:42 - what is a gate
119:44 - well a gate basically as you can see
119:46 - allows for opening and closing a gate to
119:48 - control the execution flow
119:50 - so basically when we open this gate we
119:54 - enter this gate but we need to open it
119:55 - to
119:56 - be able to
119:58 - execute what's after the gate
120:02 - so we need to open it and when we close
120:04 - it so nothing is going to happen so
120:06 - basically this is how we control the
120:08 - execution flow
120:10 - and in order to open the gate we need to
120:13 - get our action so which is our input so
120:17 - input action action here it is
120:21 - there you go input action action which
120:24 - is basically this one over here or input
120:27 - action interact you can also call it
120:30 - interact like this and let me just go
120:33 - back and see will this change
120:35 - will this change will this change so
120:38 - right click over here we can say
120:39 - interact and there you go
120:41 - so input action interact this is much
120:45 - better than input action action so when
120:48 - we press the button and we know that
120:49 - that button is e
120:51 - so when we press the button we are going
120:54 - to take the beam
120:57 - and we are first going to activate it so
120:59 - make sure that the beam is activated so
121:03 - over here plug in the execution
121:07 - and from there for after we activated
121:10 - the being then we are going to go and
121:12 - open the gate
121:15 - now
121:16 - also when we release the button we are
121:18 - going to deactivate the beam so when we
121:22 - release the button we are going to
121:24 - deactivate the beam and we are going to
121:27 - go inside of the close
121:30 - gate which means when we open it so when
121:33 - we press the button we open it and then
121:35 - it will work when we release the button
121:37 - we close it and nothing will happen
121:39 - after this exit so also one thing that
121:43 - we're going to do is over here create a
121:44 - custom event and this custom event is
121:47 - going to be close
121:48 - interaction gate
121:51 - and it's simply going to go over here to
121:53 - deactivate the beam so deactivate the
121:56 - beam and then from there go and close
122:00 - the gate
122:03 - so in these two cases when we release
122:05 - the interact button which is the e
122:08 - button we will close the beam or
122:10 - deactivate it and close the gate and
122:12 - also when we call this custom event
122:14 - close interaction gate we will
122:15 - deactivate the being and close the gate
122:18 - only when we press the button we will
122:20 - open the gate so what's going to happen
122:22 - when we open the gate well first we are
122:24 - going to test if our player is valid so
122:27 - get the player reference and from here
122:29 - we are going to test
122:31 - is valid with a question mark
122:34 - and why we're testing that meaning do we
122:36 - have the player inside of our game so if
122:38 - we don't have the player so if we don't
122:41 - have if it's not that valid we don't
122:43 - have it we're going to say close
122:45 - interaction gate because we don't have
122:47 - the player so what is the point of doing
122:50 - anything
122:51 - because
122:52 - you know if we don't have the player we
122:53 - cannot interact so close the interaction
122:56 - gate and also take the ui hut
122:59 - so from here take the ui hud
123:02 - and from here hide the inter
123:05 - action text
123:06 - so this also goes over here plug it in
123:09 - compile and save that this is if the
123:11 - player is not valid meaning we destroyed
123:14 - him
123:16 - if he is valid we are going to go in a
123:18 - sequence so
123:20 - sequence and a sequence
123:24 - is basically an execution order if i
123:26 - hover over you she executes a series of
123:28 - pins in order first this one will be
123:30 - executed then this one and we if you
123:32 - have more you see if you have more
123:35 - you can you know execute them in order
123:38 - but they are executed in the order zero
123:40 - is going to be first one then one then
123:42 - two then three then yada yada yada
123:46 - so
123:46 - first what we are going to do
123:48 - is go over here and we are going to get
123:51 - the player reference so first we need to
123:53 - get the player reference and from here
123:55 - we are going to
123:56 - call the energy damage
124:00 - and this goes over here like this so i'm
124:03 - going to move it a little bit up
124:06 - something like this
124:09 - there you go
124:10 - move it a little bit over here
124:12 - now the damage to the energy is going to
124:14 - be 50. if you remember in our player if
124:17 - i double click it you will see the
124:19 - energy damage the positive values are
124:22 - equal damage negative values are equal
124:24 - to heal because over here if we have a
124:26 - positive number it is going to be let's
124:28 - say 50 multiplied with the world delta
124:31 - seconds multiplied with one and then we
124:33 - are going to
124:35 - subtract that
124:37 - from the energy you see we're
124:39 - subtracting that from the energy so
124:41 - we're saying the positive value minus
124:43 - the energy and then we're clamping that
124:45 - value between 0 and 100 but if we have a
124:48 - negative value and i told you this is
124:49 - your assignment to figure out how it
124:51 - works
124:52 - so let's go back over here so here we
124:54 - are dealing damage or actually
124:56 - subtracting from the energy of the
124:57 - player
124:58 - next we are getting the beam so over
125:03 - here
125:04 - and for the beam we are going to say set
125:06 - beam source point
125:09 - and the source point
125:11 - is going to be in this case the player
125:15 - reference we are going to get the actor
125:17 - location which is the location of our
125:19 - player so the source point for the beam
125:22 - is going to be the player's location but
125:25 - now the end point or the target point so
125:28 - over here for the beam i'm going to say
125:31 - set
125:32 - beam target point basically where the
125:35 - beam starts and where the beam ends so
125:38 - over here the
125:40 - end
125:41 - is going to be from the mesh itself
125:44 - and we are going to get the world
125:49 - location like this and we're going to
125:51 - plug it in over here
125:53 - so something like
125:56 - this there you go
125:58 - compile and save that so this is what's
126:01 - gonna happen first
126:04 - and
126:05 - i think we need to do this
126:11 - so
126:12 - like this
126:13 - and like this to move all of this a
126:14 - little bit down
126:16 - for obvious reasons to make it more
126:18 - readable so in this execution this
126:20 - sequence first we are going to do all of
126:22 - this and this is self-explanatory i
126:23 - don't think that we need to go into more
126:26 - detail what this is
126:28 - then what we are going to do is we are
126:30 - going to go into compare float
126:33 - and over here you will see if i hover
126:35 - over compare one float to another and
126:38 - indicate if it's greater less than or
126:40 - the same
126:41 - now
126:42 - i'm going to double click over here
126:45 - so that i can create it like this so who
126:48 - are we going to compare well we're going
126:50 - to get the player reference
126:52 - and from the player reference i'm going
126:54 - to get the energy
126:56 - and the energy is going to be the input
126:58 - or the one that is going to be compared
127:01 - and we are going to compare it with 0.5
127:04 - so depending on if it's greater
127:07 - less than or equal to we are going to do
127:09 - certain things first things first if
127:12 - it's equal to or less than 0.5
127:16 - we are going to
127:18 - close the interact or interaction gate
127:21 - so we are going to close the gate and we
127:24 - are going to take the ui hud
127:27 - and from here we are going to hide the
127:30 - interaction text because if the energy
127:35 - gets to the value which is equal to 0.5
127:38 - or lower than and i'm going to click
127:40 - this here as well
127:43 - and i'm going to move this over here and
127:46 - plug this in over here
127:48 - so basically these two go
127:51 - so these
127:52 - two execution pins
127:56 - go inside of this one which go over here
127:58 - because again if the value of the energy
128:01 - comes to
128:03 - the value of 0.5 or less than 0.5 then
128:05 - we are not going to continue to drag or
128:08 - pull that cube towards us because we
128:10 - don't have any more energy to do that
128:12 - however if it's greater than 0.5 then
128:16 - what we are going to do is we are going
128:18 - to get the mesh
128:22 - for the mesh we are going to add force
128:25 - and this goes over here
128:28 - but don't worry we still need to do a
128:29 - few calculations it's not simply like
128:32 - this
128:33 - because we need to add a force that will
128:34 - pull it together and that force is going
128:37 - to be we're going to get the player
128:39 - reference
128:40 - and we're also going to get the mesh
128:44 - and from the player reference we are
128:46 - going to get the actor
128:49 - location
128:51 - so get the location from our character
128:53 - and we can move this a little bit down
128:55 - just like that and this one over here
128:58 - for the mesh we're going to get the
128:59 - world
129:01 - world location there you go
129:04 - and we are going to subtract them from
129:06 - one another so we're going to say minus
129:08 - vector so vector minus vector
129:10 - here you go and we need to move this a
129:12 - little bit further here so that we can
129:15 - have more space
129:17 - maybe move these a little bit backwards
129:19 - now for this pin i'm going to right
129:21 - click and split the pin structure
129:22 - because i want to get x y and z
129:25 - separately because now i want to make a
129:27 - vector so make
129:28 - vector
129:30 - and i want to plug x and i want to plug
129:33 - y so plug them in
129:36 - and next from here we are going to
129:39 - normalize this so normalize
129:43 - and
129:44 - after that we're also going to get the
129:46 - mesh over here
129:48 - from the mesh we are going to get the
129:50 - mass
129:52 - and from the mass we are going to
129:55 - multiply it with a float
129:58 - and the float value is going to be 1000
130:02 - and last but not least we still need to
130:04 - move this a little bit over here because
130:07 - now we need to multiply this with a
130:10 - float plug this in over here
130:13 - and plug this in over here compile and
130:17 - save that so now we can create a comment
130:20 - section from it tick to
130:24 - pull the cube to the ball there you go
130:28 - and compile and save that and for some
130:30 - reason i you know i like to write these
130:32 - capitals lowercase big case anyways it's
130:35 - not important
130:36 - let's go and revise this before we test
130:38 - it out again so that i can make sure
130:40 - that everything is clear so when we call
130:42 - the tick event we're going to enter the
130:43 - gate the gate will open only when we
130:45 - press the interact button and with it we
130:48 - will activate the beam which is the
130:50 - particle effect if we release the button
130:53 - we will deactivate the beam and we will
130:55 - close the gate and also when we call the
130:57 - close interaction gate custom event we
131:00 - will deactivate the being and close the
131:02 - gate when the gate is closed this exit
131:04 - and everything what's after it will not
131:06 - execute so everything will not execute
131:08 - if the gate is closed because the gate
131:11 - allows us to control the workflow if the
131:13 - gate is open then everything over here
131:16 - will execute
131:18 - moving forward when we execute what's
131:20 - after the gate we're first testing if
131:22 - the player is valid or do we have the
131:24 - player in the game if we don't
131:26 - close the interaction gate and hide the
131:27 - interaction text if we do have the
131:30 - player he is valid first
131:32 - subtract the energy from the player
131:34 - because he's using the energy to pull
131:36 - the ball
131:37 - or the the cube
131:39 - and use the beam to set the source point
131:42 - and the target point so that actually it
131:45 - will look like this this is our cube
131:46 - this is our ball so the beam will be
131:48 - between them so it will be on the cube
131:52 - and it will be on the ball
131:54 - after that we are going to compare the
131:56 - float for the energy if it's greater
131:59 - than 0.5 we are going to first if it's
132:03 - equal to or less than 0.5 close the
132:05 - interaction gate hide the interaction
132:07 - text because we don't have enough energy
132:08 - to pull the cube if it's greater than
132:10 - 0.5 then we are going to use the player
132:13 - reference and his
132:15 - location and the mesh location we are
132:18 - going to subtract from the player
132:20 - location the location of the mesh we are
132:22 - going to create a vector using the x and
132:24 - the y from that calculation we are going
132:26 - to normalize that vector and we are
132:28 - going to get the mass and multiply it by
132:30 - 1000 now of course these are arbitrary
132:33 - values like this 1000 and so on and so
132:35 - forth you can test it out you can like
132:37 - use 3 000 you can use a gazillion but
132:40 - you know i've tested it out with 1000
132:42 - and it works well
132:44 - so using that multiplying the mass with
132:46 - the mesh and then multiplying these two
132:49 - together adding that force will make it
132:53 - move slower
132:55 - why am i using these ejectors but
132:58 - anyways this is or this is this
133:00 - calculation for adding the force so now
133:04 - if i go back over here if i hit the play
133:06 - button
133:07 - if i come close to the cube we will see
133:11 - the interact if i go away we don't see
133:13 - if i press e now nothing is happening if
133:15 - i come close where it says interact if i
133:17 - press e
133:18 - bam you see it is coming closer you see
133:22 - bam it is coming closer there you go now
133:26 - one thing that we do have that is not
133:29 - working
133:31 - is the following so over here
133:35 - i believe
133:38 - i've missed something
133:40 - over here
133:41 - yeah new auto
133:44 - so target is actor component
133:48 - this is not auto activate it's actually
133:51 - activate
133:53 - not auto activate
133:55 - so this goes over here and this goes
133:58 - over here and this reset
134:01 - goes there compile and save that so it's
134:04 - not auto activate excuse me for this one
134:06 - so not auto activate it's activate for
134:09 - the being and also make sure this reset
134:11 - you see whether the activation should
134:13 - happen
134:14 - even if it should affect returns false
134:15 - so basically just
134:17 - reset the beam where it was
134:19 - so activate will turn on the beam so
134:22 - let's try it out now
134:24 - and for some reason i you know selected
134:26 - the auto activate i didn't even notice
134:28 - that so now if i move it you see there
134:31 - you go so if i come close now over here
134:35 - and i'm moving this cube
134:37 - now i can do this
134:39 - so here
134:42 - there you go and i can go over here but
134:44 - now we cannot pass these without the
134:47 - other cube actually we can
134:49 - but we will die
134:51 - yeah so we need other cubes inside so
134:54 - let me just quickly add those other
134:57 - cubes
134:58 - so we are going to have interactive
135:00 - block to you so let me just this
135:01 - interactive block one copy and paste it
135:04 - the interactive block 2 is going to be
135:06 - at 7
135:07 - zero nine for the x y is zero z is three
135:11 - thousand
135:13 - zero eight one there you go so it's
135:15 - gonna put it over here as you can see
135:19 - and yeah we're going to leave it like
135:21 - that so maybe just over here
135:23 - there we go
135:24 - and copy and paste it because we are
135:27 - going to have a third one as well and
135:29 - this one is going to be at x 13139
135:34 - minus
135:35 - 160 for the y and for the z
135:40 - 4701 which is going to put him over here
135:42 - because when he when we go up we will
135:45 - need to drag this bad boy down in order
135:47 - to be able to jump up and finish the
135:50 - level so if i hit the play button now
135:52 - and if i go over here with the ball and
135:56 - i jump over here and i come close over
135:59 - here come on let's move this bad boys
136:02 - come on over here
136:06 - there we go
136:07 - so now what we need to do is
136:10 - pull this bad boy over here so
136:13 - the lasers don't touch us there you go
136:16 - and over here we will have the elevator
136:18 - that's going to pull us up
136:21 - and when we go up then we will be able
136:23 - to interact with the other cube
136:26 - so there you go
136:28 - come on can i actually pull it no i
136:30 - cannot
136:32 - there you go
136:34 - and now
136:35 - the lasers cannot do anything to us but
136:37 - yeah there you go so anything if
136:39 - something is not clear before we proceed
136:41 - please ask in the comment below because
136:43 - the next step is to actually click
136:45 - create the elevator and wrap up our game
136:47 - so let us right click over here
136:49 - blueprint class actor so inherits from
136:53 - the actor and it's going to be bp
136:55 - underscore elevator le the
136:58 - tour actually is it spelled like this
137:02 - it's like this i have issues spelling so
137:04 - don't judge me anyways going back over
137:07 - here selecting the elevator top root
137:10 - component we are going to filter for the
137:12 - mesh
137:14 - so
137:15 - actually static mesh here it is
137:17 - not instant smash what the hell is this
137:20 - static mesh here it is
137:23 - and we're going to call it our elevator
137:25 - mesh ala the
137:27 - elevator
137:28 - mesh
137:29 - i'm going to make this the default root
137:33 - component now over here for the static
137:35 - mesh we're going to filter for the
137:37 - elevator sm elevator why am i spreading
137:40 - elevator with l-e-f-e it's l-e-f-a so
137:45 - there you go this is our elevator now
137:47 - over here for the element or the
137:50 - material for it is going to be the stone
137:52 - material
137:53 - stone material here it is stone mat
137:57 - and this is going to be our elevator
137:59 - compile and save that now we are going
138:02 - to select it and we are going to attach
138:06 - a box so over here box collision there
138:10 - you go
138:11 - so this box collision i'm going to
138:14 - simply call it
138:15 - trigger
138:16 - and we are going to resize it of course
138:19 - now we are going to set the z position
138:22 - to 215
138:24 - and the extent over here the box extent
138:27 - 400 for the x 400 for the y and the z
138:31 - can be 100 so there you go this is our
138:34 - box collision and it will detect
138:37 - when
138:38 - well the player comes close on it simple
138:41 - as that
138:43 - now going here in the event graph i'm
138:46 - going to delete everything over here and
138:48 - i'm going to add a couple of variables
138:49 - we're going to need one two three
138:53 - four five six variables then i add six
138:56 - and we will add them on the go so over
138:58 - here the first one is going to be our ui
139:00 - hud ref so reference to the ui hud
139:04 - the next one click on it is going to be
139:07 - speed of platform
139:11 - the next one is going to be up
139:15 - limit
139:17 - the next one is going to be the down
139:21 - limit
139:23 - the next one is going to be is moving
139:27 - and last but not least the last one is
139:29 - going to be move up
139:31 - so the ui hut
139:33 - is our game hud which is simple we did
139:35 - this already numerous of times
139:38 - speed of platform it's going to be a
139:40 - float
139:41 - next our up limit is also going to be a
139:44 - float
139:46 - our down limit is also going to be a
139:47 - float
139:48 - and is moving
139:50 - and move up are going to be booleans now
139:53 - by default the speed of platform i don't
139:56 - know we can set it at 3 by default so we
139:59 - can compile and save that
140:01 - up limit
140:02 - we are not going to touch that
140:04 - or we can but we will see later don't
140:07 - worry about that so basically you can
140:09 - set it at three thousand
140:12 - six three thousand four hundred and
140:13 - sixty five this is the up limit and the
140:16 - down limit you can set at
140:19 - 2485 we will see what this is now make
140:22 - sure that speed up limit and down limit
140:25 - are public variables because we will
140:27 - want to edit them
140:29 - well we will want to edit them on inside
140:32 - of our level directly
140:35 - so anyways let's bring back the begin
140:38 - play
140:40 - what is this so
140:42 - event begin play here it is so in the
140:46 - begin play we are going to delay the
140:49 - same reason why we are delaying over
140:52 - here in the interactive box interactive
140:56 - block at the top so the same reason why
140:58 - we're delaying over here the execution
141:00 - we're delaying two seconds
141:03 - and what we are going to do after that
141:05 - is that we are going to cast you bp
141:09 - player ball
141:11 - now who am i casting of course the
141:13 - player pawn so get player pawn
141:17 - and plug this bad boy in over here
141:20 - after that what i need is to get the
141:23 - reference from the ui hud and the ui hud
141:27 - is inside of the player so we're going
141:28 - to say get hud
141:31 - here it is and plug it in over here so
141:33 - now we have the reference to the ui hud
141:36 - we got that from the player
141:39 - now what we are going to do now select
141:42 - the trigger so make sure the trigger is
141:44 - selected and right click and we are
141:46 - going to filter for on component begin
141:50 - overlap
141:51 - same thing we are going to right click
141:53 - and filter for on component and overlap
141:57 - so on component
141:59 - actually we didn't select the trigger so
142:01 - select it right click on component
142:05 - and overlap there you go
142:08 - so when we when the overlap begins when
142:12 - we detect collision we first want to
142:15 - cast so cast two bp player ball
142:19 - so casting to the ball the other actor
142:22 - because we need to detect
142:24 - if we are colliding with the ball if the
142:26 - ball is on the elevator then what we are
142:28 - going to do is we are going to get the
142:30 - player controller
142:32 - get player controller there you go
142:37 - and from here we are going to enable the
142:40 - input
142:42 - here it is enable the input and plug
142:45 - this in over here
142:47 - and from there we are also going to get
142:49 - our hud reference and we are going to
142:52 - show the interaction text
142:56 - show the
142:57 - interaction text this is when the player
142:59 - comes on when it's on the elevator
143:03 - over here when the overlap ends however
143:07 - we are going to again cast to bp player
143:11 - ball
143:13 - and we are casting the other actor
143:16 - we do need the player controller again
143:18 - so copy and paste him over here and from
143:21 - here we are going to disable the input
143:25 - and plug in the player controller
143:28 - now we are also going to get the ui hud
143:31 - copy and paste
143:33 - and this time we are going to hide the
143:35 - interaction text so hide it
143:39 - but we are also going to do one more
143:41 - thing and that is over here we are going
143:43 - to say is moving
143:46 - and we're going to plug this in or we're
143:48 - going to say that we're going to check
143:50 - the check box so indicating that we are
143:52 - moving and over here we're going to say
143:54 - move
143:56 - up
143:57 - is false and we will see in a second why
144:00 - we are doing it like that
144:03 - so this is when we collide with the
144:06 - player
144:07 - again this is all safe explanatory all
144:09 - of this here i don't have to explain all
144:11 - of this here when we you know simply
144:12 - check if we collide with the player this
144:14 - enable the input and show the text that
144:16 - we need to interact when we
144:18 - when the player goes away from the
144:19 - elevator then if that is true disable
144:22 - the input hide the text and is moving is
144:25 - true and move up is false which means we
144:27 - are going to move down but over here
144:30 - i'm going to right click and i'm going
144:32 - to say action interact
144:35 - so when we press the interact button
144:37 - what's going to happen well
144:40 - when we press it we're going to go
144:41 - inside of a branch
144:43 - and the condition for that branch is
144:45 - going to be our is moving and we're
144:47 - going to plug it in over here if is
144:50 - moving is false
144:52 - so meaning we're not moving we're going
144:54 - to say set move up
144:57 - to be true so if we're not moving move
145:00 - up is true
145:01 - and over here set is moving
145:05 - to be equal to true there you go so only
145:08 - if is moving is not true meaning we are
145:12 - not moving currently so we are not
145:15 - moving
145:16 - then we are going to move up and is
145:19 - moving is true which means now inside of
145:22 - our tick
145:23 - so going back in the event thick i mean
145:26 - we can test this out now
145:29 - i mean test it we can
145:31 - uh
145:32 - we can show we can just display it how
145:34 - it looks like because we cannot test it
145:35 - we cannot move up and down so i can put
145:37 - the elevator over here and i'm going to
145:39 - put it in the interactive elements
145:41 - and the elevator's position x is going
145:44 - to be 10
145:46 - 60. the y position is going to be
145:50 - negative
145:51 - 190 the z position is going to be two
145:54 - four eight five there you go
145:58 - which means here it is there is the
146:00 - elevator and i can quickly just test it
146:02 - out so we can go over here
146:05 - we will wait a few moments for me to
146:07 - test it out but i mean it is going to
146:09 - work so interact there you go come on
146:12 - moving this
146:14 - cube over here we we
146:17 - there you go jumpy jumpy jumpy come on
146:21 - move this bad boy over here there you go
146:24 - okay
146:27 - so now we are on the elevator if we jump
146:28 - on him there we go e to interact nothing
146:31 - is going to happen if we interact right
146:32 - now because if we press e i mean
146:36 - we pressed e and and is moving is now
146:38 - true and move up is true but we're not
146:40 - doing anything which means we need to do
146:42 - it over here so we need to go inside of
146:44 - our tick
146:45 - inside of the elevator and what's going
146:47 - to happen over here
146:49 - we are going to go in a branch
146:52 - and that branch is going to be
146:54 - controlled by is moving
146:56 - so going over here if is moving if that
146:59 - is true we are going to go inside of
147:01 - another branch
147:03 - and for that branch
147:04 - we're gonna use move up
147:07 - so get the move up
147:10 - and what's gonna happen over here
147:13 - well let's go first
147:15 - if it's true if we should move up we are
147:18 - gonna go inside of a branch
147:21 - and what i need to do is move this a
147:24 - little bit down so that we can see it
147:26 - more clearly so we're gonna go in the
147:28 - branch and the condition for this branch
147:30 - is going to be
147:33 - i'm going to double click it and like
147:35 - this
147:37 - so the condition for this branch as i
147:40 - said is going to be we're going to get
147:42 - the actor location so get actor
147:44 - location
147:46 - and we're going to split the pin
147:48 - structure
147:49 - and what i'm going to do is i am going
147:52 - to make a vector make vector
147:56 - and the value x and the value y are
147:59 - going to go here but the value z we are
148:02 - going to add to it plus float
148:05 - and the flow that we are going to add
148:07 - and let me just remove this
148:09 - this goes over here like this the value
148:12 - that i'm going to add to the z value is
148:14 - going to be the speed of the platform so
148:16 - i'm going to plug in the speed of the
148:19 - platform
148:20 - what we need to do
148:22 - to test this out is take the speed or
148:25 - this calculation over here the z value
148:27 - plus the speed of the platform and we
148:29 - need to compare if that is greater than
148:31 - or equal to so if it's greater
148:34 - greater than or equal to
148:36 - up limit
148:38 - so we have our up limit and i'm going to
148:40 - plug it in over here and that goes
148:42 - inside of this branch
148:44 - why are we using the up limit because we
148:46 - are going upwards so if move up it's
148:48 - true we are not going to allow
148:51 - our z position to be above the up limit
148:54 - so if it's greater than or equal to the
148:56 - up limit
148:58 - so if that is true then we're going to
149:01 - say set is moving to be equal to false
149:04 - and over here we're going to say set
149:06 - actor location
149:09 - not world offset
149:11 - set actor location here it is
149:16 - this goes over here
149:18 - is moving is now false
149:20 - and over here if this is false this goes
149:23 - directly over here but let me just
149:25 - do it like this so that we can clearly
149:27 - see it what is happening something like
149:30 - this
149:31 - and from here this goes over here of
149:35 - course for the z this needs to go over
149:38 - here so this is what we are essentially
149:41 - doing now what is this what the hell is
149:44 - this
149:45 - don't cry man do not cry because i'm
149:48 - gonna show you what it is
149:51 - in the tick event if we are moving if
149:53 - it's true then we are going to test if
149:55 - we should move up so we are moving but
149:57 - are we moving up or down if move up is
149:59 - true then we are going to get the
150:01 - current location of the player and
150:02 - create a vector out of it x and the y
150:05 - are going to stay the same but for the z
150:06 - axis because we're moving it up and
150:08 - we're going to use the z axis for that
150:10 - so
150:11 - we are going to add to the z axis the
150:13 - speed of platform
150:15 - if that new value
150:17 - is greater
150:19 - or equal to
150:21 - the up limit if that is true stop moving
150:25 - if it's false then go here into the set
150:28 - actor location and set the new location
150:31 - by using the new z position that we
150:34 - gained from adding to the current value
150:37 - of z the speed of the platform this is
150:40 - what we are doing and as you can assume
150:43 - if it's false if move up is false that
150:45 - means we're going to do the opposite so
150:47 - we are going to go here in another
150:49 - branch
150:50 - but we are going to do the opposite
150:51 - instead of going up we are going to go
150:53 - down so we are going to right click
150:56 - and i am going to get the actor
150:59 - location
151:01 - i am going to split the pin structure
151:04 - and this can go over here and i'm also
151:06 - going to make a vector
151:08 - so
151:09 - right click
151:11 - make
151:12 - vector and again
151:15 - x
151:16 - and y are going to stay the same the z
151:20 - axis over here so i'm going to move this
151:22 - over here the value of the z i'm going
151:24 - to subtract from it a float and the
151:27 - value that i'm going to subtract is
151:28 - going to be the speed of platform
151:31 - now if this value is less than or equal
151:35 - to because now we're going downwards so
151:38 - if this value is less than or equal to
151:40 - the down limit
151:43 - and this goes over here
151:46 - bam
151:47 - and i can move this probably over here
151:50 - like this the down limit
151:52 - and it's pretty clear so we're testing
151:54 - if the current value of over here is
151:57 - less than or equal to the down limit now
151:59 - if that is true again
152:02 - set is moving to false
152:05 - and after that set actor location
152:11 - and the location is going to be set by
152:13 - the returning value over here i'm also
152:15 - going to plug this in over here and if
152:18 - it's false
152:19 - again so if it's false this still goes
152:22 - over here click it
152:25 - like this
152:27 - click it
152:28 - like
152:29 - this there you go
152:32 - so voila this is what we are doing
152:34 - compile and save that so using the tick
152:37 - event and based on if we are moving up
152:39 - or down
152:40 - we are going to move the elevator let us
152:42 - test that out so if i hit the play
152:43 - button
152:45 - and if i go back over here
152:48 - and interact with this of course we
152:51 - don't have to do it right now so come on
152:53 - over here there you go
152:55 - bam
152:57 - bam bam bam bam there you go jumpy jumpy
153:00 - jumpy
153:02 - come on bad boy fall down there you go
153:06 - so now pay attention if i come to the
153:09 - elevator if i hit the e button you see
153:11 - he is going up as soon as i remove away
153:13 - from him the elevator goes down now how
153:15 - the elevator knows that it should go up
153:18 - to the point over here if i select the
153:21 - elevator it goes up to the point three
153:24 - six four and it goes down to two four
153:27 - eight five if you pay attention the down
153:30 - limit is the current z position of the
153:33 - elevator you see the down limit over
153:35 - here that i'm pointing with the arrow is
153:38 - the current position of the z
153:40 - if we move up it will go up to the value
153:43 - three four
153:44 - six five so basically what i did is i
153:46 - you know moved elevator like this and
153:48 - saw up to where i want to move the
153:51 - elevator
153:52 - and then i set the maximum position or
153:55 - the up limit and the down limit this is
153:58 - how i calculated the up limit and down
154:00 - limit that's why i said over here we can
154:02 - leave it to be zero by default or we can
154:05 - leave it
154:06 - or we can then you know you can we can
154:08 - set the value because i knew the value
154:10 - because i already prepared the project
154:12 - but we can set them at zero and when you
154:14 - position the elevator in the game and
154:16 - from there you can then use that
154:20 - use the values of the position to
154:22 - actually to actually set that so again
154:24 - if it's not clear if something is not
154:27 - clear when it comes to this over here
154:29 - just let me know in the comment below so
154:32 - that i can explain it
154:34 - so let's test the game out one more time
154:36 - so when i hit the play button we have
154:37 - the ball we can move if we fall down
154:40 - over here we are losing health as you
154:42 - can see we can interact with the cube so
154:45 - i can just move it like this come on
154:46 - qbqb there you go and jump jump jump
154:50 - jump like a spider-man go over here if i
154:53 - fall down we know what's gonna happen
154:55 - but let's move the cube and not fall
154:56 - down and actually move the cube like
154:58 - this over here towards us
155:01 - so
155:02 - yeah and now the laser cannot do
155:04 - anything for us so let's go over here
155:06 - interact with the elevator and we can go
155:08 - up now how can we interact with this
155:10 - cube well of course we need to jump and
155:12 - move it like this there you go so
155:14 - interact like this jump and move it and
155:16 - now we can jump over here on top and
155:19 - there we go
155:21 - now basically as i said and you see over
155:24 - here we have e to interact from the cube
155:26 - so the collider of the cube is this
155:28 - large so it can catch us but anyways you
155:30 - can fix that that's not important also
155:32 - over here on the top you can add a flag
155:35 - or whatever you want to do you can the
155:37 - ending of the game is up to you so you
155:39 - can add a flag like level finished as
155:42 - you already saw and i showed you that in
155:44 - the beginning you can move these cubes
155:45 - to
155:46 - these rocks actually to create a
155:48 - different level so this serves like a
155:50 - template that you can build upon you can
155:51 - add expanded and so on and so forth so
155:53 - the ending of this game is up to you you
155:55 - can practice add new features and
155:57 - probably share that in the comment below
155:59 - with us as we can see anyways thank you
156:01 - for watching till the end of this
156:03 - tutorial it was very nice it was very
156:06 - entertaining raining it hopefully it was
156:08 - nice for you to watch it uh i don't know
156:11 - i mean until next video
156:13 - if you like this video make sure that
156:14 - you like share comment subscribe so that
156:16 - you know that will help the algorithm
156:18 - and other people will see it uh yeah if
156:21 - you like what you see i have plenty more
156:23 - of this in my ultimate game development
156:25 - academy link will be in the description
156:26 - below until then again thank you for
156:28 - watching i will see you guys in the next
156:30 - video