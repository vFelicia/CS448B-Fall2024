00:01 - the future is here it's just not evenly
00:04 - distributed look around the world and we
00:08 - know this to be true you're all here in
00:10 - this room
00:10 - chances are the vast majority of you got
00:13 - in a regular gasoline-powered vehicle
00:15 - and drove here to the venue today
00:17 - however we know that in the future many
00:20 - of us will be driving electric vehicles
00:22 - clean electric vehicles those electric
00:25 - vehicles may be using power that came
00:27 - from dirty coal so how clean is that
00:30 - electric vehicle well that's also
00:31 - becoming a salt problem in California
00:33 - today you could use a company like Solar
00:36 - City to go install solar panels on your
00:39 - roof that look like legitimate roofing
00:41 - this isn't an eyesore it's just your
00:43 - entire roof is a solar panel pretty
00:46 - amazing future that's already here if
00:49 - you're in California today completely
00:51 - off the grid we know that today if you
00:55 - go to the grocery store the vast
00:56 - majority of us have this as our reality
00:59 - we wait in line to check out however if
01:03 - you're lucky enough to be in Seattle
01:04 - near the very first Amazon go store
01:07 - there is no such thing as a line there's
01:09 - no such thing as a checkout you grab
01:11 - what you need and you walk out the door
01:13 - and sensors charge you accordingly the
01:15 - future is already here it's just not
01:18 - evenly distributed and this principle of
01:22 - course applies to JavaScript as well the
01:24 - future of JavaScript is here it's not
01:26 - evenly distributed and I'm going to ask
01:28 - you a few questions during this session
01:30 - that's going to make that clear with
01:32 - your fellow audience members so let's
01:35 - get started what I'm going to talk about
01:38 - is the last decade in JavaScript and
01:41 - three revolutions that began in the last
01:44 - decade and all three of these are still
01:46 - in progress now you might think this is
01:47 - a real talk through history but in fact
01:49 - what you're going to see is these three
01:50 - revolutions many of you have not
01:53 - embraced them yet despite the fact that
01:56 - they've been around for a while I find
02:00 - it pretty cool that today is exactly ten
02:04 - years
02:04 - since Jeff Atwood coined Atwoods law
02:07 - which says any application that can be
02:09 - written in JavaScript will be written in
02:11 - JavaScript now when outwards
02:13 - said this I thought it sounded pretty
02:15 - crazy despite being a guy that's really
02:17 - big into JavaScript this sounded nuts
02:18 - but today we live in a world where that
02:20 - really is a reality think about the web
02:24 - was the beginning of JavaScript we all
02:26 - know that that's where it started so yes
02:27 - I can write web applications using Jas
02:29 - but today I can write server side apps
02:32 - using node.js I can write native mobile
02:35 - apps using react native using native
02:38 - script using PhoneGap and I can even
02:40 - write desktop apps using things like
02:41 - electron it's crazy to me that my
02:43 - favorite editor today is vs code and
02:46 - that is written in HTML Javascript and
02:49 - CSS because it uses electron my favorite
02:51 - way to communicate and share gifts with
02:53 - my co-workers is slack that's again
02:56 - written there's some slack fans here
02:58 - there we go again that is written in
03:01 - plain old JavaScript using electron
03:03 - pretty amazing so at what's law has come
03:07 - to fruition JavaScript I like to say
03:09 - it's a lot like visa it's everywhere you
03:12 - want to be but it's interesting a lot of
03:18 - us are JavaScript developers not because
03:20 - we believe that javascript is the best
03:22 - language in the world we are in
03:24 - JavaScript because of where it is not
03:26 - what it is
03:27 - JavaScript continues to get better and I
03:29 - love seeing the fact that now every year
03:31 - right around June we get a new release
03:33 - of JavaScript with goodness but I'm
03:35 - certainly a JavaScript developer because
03:37 - I can write for any platform and that's
03:39 - pretty amazing so it's a really awesome
03:42 - future that we have ahead with our skill
03:45 - sets so anybody know what happened
03:50 - January 12 2010 this was the beginning
03:54 - of a key phase of the JavaScript
03:58 - revolution the reusable JavaScript
04:01 - revolution any guesses jQuery nope
04:04 - jQuery was not then it was actually
04:06 - earlier no it was drum roll drum roll
04:14 - drum roll NPM NPM was announced on 2010
04:20 - that was the first release of NPM pretty
04:22 - big deal now at the time it didn't even
04:24 - make that big of a splash because he
04:25 - already had things like Bower that a lot
04:27 - of people
04:27 - we're using it was unclear whether who
04:29 - and when people would be using NPM but
04:31 - today NPM has swallowed the world as
04:33 - JavaScript's de-facto package manager
04:35 - and this is a key piece of the reusable
04:39 - JavaScript revolution if you haven't
04:41 - embraced in PM yet then you're missing
04:42 - out on a lot of power now the thing is
04:46 - if you rewind just two years this was
04:49 - life as a developer this was how I was
04:51 - spending my time if ya read some of the
04:54 - script tags as part of fun but think
04:57 - about the pain that we went through in
04:59 - 2008 just 2008 wasn't that long ago I
05:02 - was dealing with all of this pain look
05:05 - at what would happen oh I want to go use
05:06 - someone else's work in JavaScript well
05:08 - what steps would I go through well I'd
05:10 - do something like this I would search
05:11 - the web I'd read the docs and go install
05:14 - this read the relevant install steps I
05:16 - download any relevant JavaScript and CSS
05:19 - I'd set up my script tags my style
05:21 - references and then I'd write some
05:22 - JavaScript that targets that HTML and
05:25 - I'd realize it wouldn't work I mean I'd
05:26 - wonder why didn't get a lot of help at
05:29 - that part then I'd realized that the Dom
05:31 - query that I wrote was wrong that was a
05:32 - common mistake that I'd make in this era
05:34 - and it still wouldn't work might fix it
05:36 - still wouldn't work I'd realize that the
05:38 - script order was wrong so I'd reorder a
05:39 - script tag because this needs load
05:40 - before this switch loads before this so
05:42 - I fixed that and it still wouldn't work
05:45 - then I'd read the docs some more and
05:47 - realize oh okay I'm running the wrong
05:48 - version of jQuery I found that buried
05:50 - down in here I need to run at least this
05:51 - version so I go ahead and update that
05:53 - and I would repeat all of these steps to
05:56 - go update jQuery there was no easy way
05:58 - for me to upgrade my dependencies once
06:00 - this finally worked I would typically
06:02 - drink heavily and that was my 14 step
06:04 - process for working with JavaScript in
06:07 - 2008 now if you want to stay updated
06:11 - imagine this I just went through all
06:12 - that work to get this going if I want to
06:14 - stay updated what would I do in that
06:16 - case I would repeat a lot of those steps
06:19 - again very very painful and what if I
06:21 - wanted to minify or bundle or test this
06:24 - code nope not gonna happen not practical
06:29 - in that era hardly any of us were
06:30 - because it was just too hard
06:34 - contrast that with today npm install lid
06:39 - import the library NPM update that's
06:45 - pretty cool that is vastly vastly
06:47 - simpler that is worth celebrating
06:53 - JavaScript doesn't have a base class
06:56 - library and because of that we're seeing
06:59 - NPM grow at an amazing rate NPM
07:01 - effectively has filled in this gap and
07:04 - it becomes growth has been unprecedented
07:08 - unprecedent you look at these lines here
07:10 - you want to guess which one is NPM come
07:14 - on y'all you're supposed to be the one
07:15 - on the top it's kind of baiting you
07:17 - there look at this so this number down
07:19 - here this green line down here that is
07:21 - dot Nets package manager which is nougat
07:26 - they add 66 packages per day how about
07:28 - Java's 139 per day
07:30 - NPM almost 500 packages are added every
07:34 - single day to NPM by the end of the day
07:36 - another 500 things are out there I mean
07:38 - that is amazing that's amazing unless
07:40 - you factor in sturgeons law it's always
07:47 - a caveat with growth we I don't want to
07:51 - pick on anybody but now I will say I
07:53 - think sturgeon was a bit of a pessimist
07:55 - because my take is even if sturgeons law
07:57 - is true this is also true I mean more is
08:00 - better ten percent of that crap is good
08:04 - so that's so wind yes I know I'm a child
08:09 - but this is my this is my justification
08:12 - now I I really think this is a
08:14 - glass-half-full mentality when you have
08:17 - that sort of view it's a bit of a first
08:19 - world problem kind of complaint oh no I
08:22 - can't keep up with all this awesome free
08:24 - stuff that people keep building for me
08:26 - I mean life as a JavaScript developer
08:27 - when we talk about JavaScript fatigue we
08:29 - sound a little it's hard to have a lot
08:34 - of sympathy for us it's a bit like going
08:35 - to a family reunion and complaining
08:37 - about how your inbox is full of
08:39 - recruiter emails oh another recruiter
08:41 - wanting me to interview it's hard being
08:43 - a developer your family will do not say
08:45 - this at a family reunion you think
08:47 - you're crazy
08:48 - so we're in a great place as JavaScript
08:51 - developers and my point is this
08:52 - the npm allows us to write our code once
08:56 - and then reuse it it's a very simple
08:58 - idea so a question for the audience
09:00 - we're gonna go through this cadence
09:01 - through this talk question for you
09:04 - how many of you are using NPM packages
09:06 - today so that is probably 70% of the
09:11 - room very good but I have a more
09:14 - interesting question I was expecting the
09:16 - majority of you to say that you do how
09:18 - about this how many of you will say my
09:20 - team has published in NPM packages my
09:23 - team or my company that's about ten
09:28 - fifteen percent of the room although a
09:30 - noisy one whoo yes we're excited about
09:33 - this so look at this everybody put your
09:36 - hands back up if you have published an
09:38 - NPM package and Zack you're partying
09:40 - back there that's cool so look around
09:42 - the room guys the future is here it's
09:44 - just not evenly distributed I believe
09:48 - that if I came back here in a couple
09:49 - years we would see the vast majority of
09:51 - hands up so ask yourself do I want to
09:53 - join the revolution because it is here
09:56 - now what what I share is a demo that
09:58 - shows how my team works with NPM
10:01 - packages my team maintains an NPM
10:06 - package called fusion the fusions of
10:09 - framework that we use for doing react
10:11 - development and Cox Automotive it adds
10:12 - many opinions in on exactly how we want
10:15 - to do react development so if I click
10:19 - over here I can go to our github
10:21 - repository and you can see that this NPM
10:24 - package of course has a package JSON and
10:27 - what makes this package interesting is
10:29 - all the dependencies that it holds
10:31 - inside our applications have a single
10:34 - dependency which is fusion but behind
10:36 - the scenes starting here at mine 27 and
10:38 - scrolling down these are all the
10:39 - dependencies that we're actually using
10:41 - to put our applications to work so
10:44 - developers don't have to make decisions
10:46 - on webpack or babel or what react
10:49 - dependencies they should be pulling in
10:51 - they just leverage all of these packages
10:53 - which are built in diffusion we also
10:56 - include some build scripts that start
10:58 - the application that configure our tests
11:00 - and that perform the production build
11:04 - we've also added some interesting
11:05 - extensions now behind the scenes we're
11:07 - actually using create react app but
11:09 - we've added a number of opinions on top
11:12 - to get this done but through the power
11:14 - of this single NPM package when we
11:16 - deploy applications this is the up
11:19 - dependency that our applications take on
11:21 - and in that way when we change
11:24 - directions when we need to do bug fixes
11:26 - or enhancements to our build process or
11:28 - deployments upgrade dependencies people
11:31 - have a single NPM package that they can
11:34 - update as necessary so that is the key
11:38 - point at the end we have at this point
11:40 - published at least a half dozen
11:43 - applications using a single NPM package
11:46 - that we call fusion so those
11:48 - applications you go into the package
11:49 - JSON you know what you find there one
11:51 - dependency because we've decided as a
11:53 - company that will bundle up all of our
11:56 - dependencies behind the scene it's about
11:57 - 75 NPM packages a number of build
11:59 - scripts all of that is contained through
12:03 - the power of NPM so I'd encourage you to
12:04 - consider that pattern so that was the
12:08 - first revolution which is the package
12:11 - revolution this is the very foundation
12:13 - of the reusable JavaScript revolution
12:15 - that I'm talking about today so you need
12:18 - to have accepted that before you move on
12:19 - to phase 2 phase 2 of the reusable
12:21 - JavaScript revolution I call starter
12:24 - kits or I also like to call this part do
12:30 - so if you were coding back in the day
12:33 - jQuery versus mootools versus prototype
12:36 - j/s which I did there was a funny site
12:38 - called vanilla Jas and you would go out
12:40 - to vanilla Jas and build your own custom
12:42 - download you could select things like
12:44 - ajax event system functions as
12:46 - first-class objects do regular
12:47 - expressions i want those in an array
12:50 - library that sounds handy and then I
12:51 - could build a custom download of all
12:53 - these features in this vanilla Jas
12:55 - library and when I opened it in my
12:57 - editor what I would see is an empty file
13:00 - do you get the punchline vanilla Jas is
13:03 - using the platform and if you went
13:05 - through the vanilla GS website what they
13:07 - would do is contrast the performance of
13:10 - plain vanilla Jas versus using jQuery or
13:14 - mootools and they would point out
13:15 - vanilla J's was not surprisingly faster
13:18 - because it removed a layer of
13:19 - abstraction and this was funny at the
13:21 - time and caught some level of attention
13:24 - however I believe that vanilla GIS is
13:28 - malpractice and I believe that because
13:31 - today as developers if we're not
13:34 - leveraging each other's work we are
13:36 - wasting time we are reinventing the
13:38 - wheel we should be standing on the
13:39 - shoulders of giants and so many of us in
13:43 - here have done good work see today
13:44 - here's the story so many of us are
13:46 - expecting to publish an application to
13:49 - the web with a single minified bundle
13:51 - maybe tree shakin maybe that bundle is
13:54 - split in ways so that it loads from page
13:55 - to page that's not trivial you want
13:58 - things like explicit dependencies you
14:00 - want it to be Mart modular minified
14:02 - transpiled linton tested you want an
14:04 - automated build and you want automated
14:07 - updates
14:07 - I believe that file new project is
14:10 - malpractice and in my organization we do
14:17 - not do file new project when we start
14:19 - from scratch we are starting from a
14:21 - foundation with literally over 75
14:25 - different opinions baked into it it is a
14:28 - huge number of opinions that we have
14:29 - think about some of the decisions that
14:30 - you make if you're gonna file new
14:32 - project right now as a JavaScript
14:33 - developer you as a team need to decide
14:35 - what editor are we going to use and how
14:36 - we standardize that configuration of
14:38 - tabs versus spaces line endings and as
14:41 - such what NPM package or I should say
14:44 - what package manager are we going to use
14:46 - because NPM isn't the only one but it's
14:48 - a pretty logical choice what development
14:50 - web server will we use what automation
14:53 - approach what transpiler what bundler
14:57 - what linter how about automated testing
15:01 - we need to choose a framework an
15:02 - assertion library helper libraries where
15:04 - to run our tests when to run them and
15:05 - where to place these files we need to
15:08 - choose a CI server if we're making HTTP
15:11 - calls Ajax that sort of thing we need to
15:13 - choose an HTTP call approach in fact if
15:17 - I lay all this out on a slide it's very
15:19 - difficult to fit it all and here's
15:21 - what's interesting you're gonna watch
15:23 - all these decisions fly by you here but
15:25 - ask yourself this if you did a file new
15:28 - project would you remember to ask
15:31 - yourself these question
15:32 - would you remember all of these concerns
15:34 - because as a group in here we know that
15:37 - testing is important we know that
15:38 - minification and bundling and
15:40 - transpiling
15:40 - are all important as JavaScript
15:42 - developers but it's really easy for a
15:44 - lot of these decisions to hit the floor
15:46 - it's easy to accidentally end up in
15:48 - production in a bad state if you don't
15:51 - automate it away so again I say vanilla
15:55 - JavaScript today is malpractice file new
15:59 - project is malpractice start from
16:01 - something more opinionated and so what
16:04 - I'm driven by is a level of
16:06 - dissatisfaction with the current state
16:08 - of affairs in JavaScript I can't get no
16:10 - satisfaction
16:11 - so here's where's what I'm dissatisfied
16:14 - with rework I don't want to start from
16:16 - scratch when I'm starting a new project
16:17 - I don't want a tedious setup just so I
16:21 - can get to a HelloWorld wiring up
16:23 - transpiling and bundling and
16:24 - minification all of these things is
16:26 - really tricky and I end up repeating
16:28 - mistakes how about this you read a blog
16:30 - post and this blog post goes oh man this
16:32 - is something I have to remember to do on
16:34 - my next project but how do you remember
16:36 - to do that later the way that you do
16:39 - that is to codify your opinions the
16:42 - solution that I am suggesting here is to
16:45 - codify your opinions now one way that
16:50 - you can codify your opinions is through
16:52 - a checklist if you've ever had the book
16:54 - checklist manifesto I highly recommend
16:56 - this to developers it's not a technical
16:58 - book but what it drives home is the
17:00 - benefits of writing down what you need
17:02 - to do see the checklist manifesto tells
17:04 - an interesting story about doctors we as
17:06 - developers we don't like checklist
17:08 - because we feel like I'm a professional
17:09 - I don't need a checklist I know what to
17:11 - do off the top of my head but doctors
17:13 - have been found that to need a checklist
17:15 - there was a study that found this you go
17:17 - in you have the nurses ask the doctors
17:19 - the steps that they need to perform
17:21 - before they cut a hole in your body and
17:24 - run a tube into it they're gonna run a
17:26 - lion into you you have to make sure that
17:27 - they sit down they wash their hands
17:29 - properly that they make the incision
17:31 - properly they cover their hands and
17:32 - gloves it's not very many steps but as a
17:34 - doctor in the heat of the moment it's
17:37 - really easy to forget a step and what
17:39 - they found was a percentage of the time
17:40 - that happened and what happens in that
17:42 - case is people die people die when you
17:45 - miss
17:46 - step now thankfully lives generally
17:48 - aren't in our hands but increasingly
17:49 - that is happening in software too they
17:51 - saw dramatic results by creating
17:53 - checklists what they saw was the 10 day
17:55 - line infection rate fell from 11% to
17:57 - zero because how could you miss it if
18:00 - you do the proper steps
18:02 - people don't get infections because you
18:03 - have protected yourself from it
18:05 - the checklist prevented 43 infections
18:06 - eight deaths and two million dollars in
18:09 - costs
18:12 - so in summary doctors know what to do
18:15 - but it's easy to overlook a step and in
18:16 - the same way we as developers also know
18:20 - what to do but I showed you that slide
18:21 - deck there were probably everything on
18:23 - that slide deck you thought yeah I'm
18:24 - generally familiar with that but do you
18:26 - ask yourself those 40 questions every
18:28 - time you start a new JavaScript project
18:30 - have you asked yourself that about your
18:31 - existing project today probably not so
18:36 - on my team we have honored this
18:38 - checklist idea we've created a file
18:40 - called pull request template MD here's a
18:42 - little pro tip if you use github create
18:44 - a file with this name and every time
18:46 - somebody creates a pull request it will
18:47 - generate this within the pull request so
18:50 - that way all of our pull requests have
18:52 - our code review checklist right there
18:54 - inside of it automatically that's us
18:56 - embracing the checklist manifesto so
18:59 - that we make sure we don't skip a step
19:00 - however you're a developer so an even
19:03 - better idea than this is to automate it
19:06 - strive to automate and I think this is a
19:09 - really important principle that the more
19:12 - things that you can take for granted the
19:15 - better off you are Society advances as
19:17 - we can take things for granted the fact
19:19 - that we came here today and we could
19:20 - take for granted that these lights would
19:21 - be on that my computer would be charged
19:23 - up that I could get in a car and drive
19:25 - here that's really important in the same
19:28 - way as developers we need to increase
19:30 - the list of things that we can take for
19:32 - granted see on my team there's a long
19:35 - list of things that we just don't think
19:36 - about anymore my team knows that they
19:38 - can use the latest version of JavaScript
19:40 - they know that it will just magically
19:41 - get transpiled they don't have to think
19:42 - about it in any way they know that every
19:45 - time that they hit save the tests will
19:46 - run automatically and when we push code
19:48 - it will end up running on the CI server
19:49 - and we'll know if any tests have failed
19:51 - we know in our code reviews that our
19:54 - code reviews go really fast now because
19:55 - most of the things that we look for are
19:57 - caught by linters and
19:59 - of manually on a case-by-case basis we
20:02 - know that when we get to production
20:03 - we'll be able to use source maps to
20:05 - debug our code even though we're
20:06 - transpiling we'll be able to see our
20:08 - original code in production we can start
20:11 - our application with one command when
20:12 - somebody joins my team you clone the
20:14 - repository you say npm start and magic
20:17 - happens and you're seeing your code
20:19 - there's no special work there we know
20:21 - that we can run a build that's minified
20:22 - bundled ready for production by just
20:24 - saying npm run build and we know that to
20:27 - get to production you say npm run deploy
20:29 - all of this is taken for granted and
20:31 - when you can take all of this stuff for
20:33 - granted it's awesome because then you
20:34 - can focus on the hard problems and
20:36 - programming see this basics this
20:38 - plumbing that we're talking about here
20:39 - should not be burning your cycles it
20:41 - should be a solved problem for your team
20:44 - and I assert this that the more that we
20:46 - can take for granted the faster we will
20:48 - move and the higher the quality we'll be
20:51 - on our projects so I think of a starter
20:55 - kit as a living automated and
20:57 - interactive checklist and increases the
20:59 - number of things that you can for
21:01 - granted now a lot of you may feel like
21:04 - well I kind of have a starter kit I went
21:06 - out and I used create react app from
21:08 - Facebook or I use the angular CLI or I
21:11 - used ember CLI whatever maybe well I
21:13 - believe that that's not enough my
21:15 - recommendation to you go find a project
21:17 - like that for kit make it your own and
21:20 - then add your opinions in because I
21:21 - guarantee you your team has a number of
21:23 - other opinions on top of those tools and
21:26 - that's precisely what my team has done
21:27 - we use Create react app behind the
21:28 - scenes but we have added many many more
21:31 - opinions on top of it now this is a
21:33 - really big conversation I published a
21:36 - five-hour course on Pluralsight called
21:37 - building a JavaScript development
21:39 - environment where I talk through all of
21:41 - those 40 decisions and how you reason
21:43 - about those but my recommendation to you
21:45 - is really simple when you get back to
21:47 - your office on Monday I would suggest
21:49 - this to you just schedule a meeting
21:51 - schedule a meeting with your team and
21:53 - say I want to have a dolt conversation
21:56 - about the issues let's just sit together
21:58 - and talk this through and we'll come to
22:00 - an agreement on how we do JavaScript
22:02 - here at our company
22:04 - and I think it'll go well now often
22:07 - these conversations can get heated
22:09 - because typescript versus Babel is a big
22:11 - big deal people feel very very strongly
22:14 - we've been through this as well but I
22:16 - don't believe this
22:17 - I believe if you're having those kinds
22:19 - of tabs versus spaces conversations on
22:22 - every JavaScript project you're spending
22:23 - a lot of time in the wrong place as a
22:26 - team come together and agree and then
22:28 - you can move forward so I want to share
22:31 - another demo I want to show you our
22:33 - starter kit that we use at Cox
22:35 - Automotive this is my team starter kit
22:38 - which we call fusion the way that it
22:40 - works is you clone the repository just
22:42 - like you would any other github repo I
22:44 - already have it cloned over here after
22:46 - you have cloned it you run NPM run setup
22:50 - and setup helps you first install all
22:54 - the packages automatically and after
22:56 - those packages are installed then it
22:57 - will prompt you for the settings it will
23:00 - ask you if you want to delete the git
23:01 - repository I'm just going to leave it as
23:03 - is here and then it will prompt you for
23:05 - your project name as you can see it
23:09 - enforces a logical name for a
23:12 - package.json it'll ask you for whatever
23:15 - version you'd like to assign for the
23:18 - author of the project it will ask you
23:21 - for your production URL I'll just put my
23:24 - URL comm ask you for your license the
23:29 - project description just a demo and now
23:33 - that we're done our setup is complete if
23:35 - I come over to package.json then I can
23:38 - see that it added this information into
23:41 - the repository and we have a few scripts
23:44 - in here to get started the other thing
23:46 - that's interesting is that our starter
23:48 - kit has a single NPM package dependency
23:51 - so we can make changes over time and all
23:55 - any deployed applications need to do is
23:58 - pull a new version of fusion and they
24:01 - get all those bug fixes or new
24:04 - enhancements in the future now when you
24:07 - run our starter kit what you will see
24:10 - what you see is it starts up a demo
24:13 - application that says welcome to fusion
24:15 - gives you links to important information
24:17 - like
24:18 - our list of reusable components our
24:20 - style guide and some basic steps that
24:23 - you can run once you're done looking at
24:25 - this demo you can run this script to
24:27 - remove the demo but we also show people
24:29 - how to work with a Redux app so you can
24:31 - go behind the scenes and see how this
24:32 - simple demo application works that just
24:35 - calculates miles per gallon we show how
24:38 - our form validation story works in an
24:40 - interactive way and again you can see
24:42 - that many of our opinions on forms are
24:44 - all encapsulated within our reusable
24:46 - components we show how our mock API
24:49 - works so you can actually come into here
24:51 - and save your changes and when you save
24:53 - those changes you'll see that they're
24:55 - reflected even when you reload the page
24:58 - we show how to dynamically import
25:00 - libraries and we also show how to lazy
25:03 - load heavy react components you can see
25:05 - that this loaded after the fact now once
25:08 - I'm done and comfortable with this demo
25:11 - I can go ahead and remove it and get
25:14 - started coding to do that I come over
25:15 - here and say NPM run remove demo and
25:18 - when I do we can see that there's a lot
25:22 - fewer files over here now and if I rerun
25:25 - the application now it's simply a hello
25:30 - world so we have a simple starting point
25:33 - that is ready to run the app so that's
25:36 - how we do development on my team the
25:37 - nice thing is everybody knows that they
25:39 - start with Fusion starters what we've
25:41 - called it one thing I will recommend is
25:43 - choose a brand name for whatever you do
25:45 - I was recently out in San Jose
25:46 - consulting a team that went for the same
25:48 - model and they chose their own special
25:51 - name they called theirs preamp because
25:52 - they have a model where they're tied to
25:55 - videos and they like that idea of a
25:57 - preamp it went well with their branding
25:59 - had their own logo and everything now
26:02 - unfortunately what I just showed you
26:03 - isn't open source so you can't go out
26:06 - there and dig through it for more but a
26:07 - very very similar project that I
26:09 - published about a year and half ago was
26:11 - reactive slingshot so if you want to dig
26:12 - through the code and see how all this
26:13 - works
26:14 - check out react slingshot just yesterday
26:16 - it hit seven thousand stars so I was
26:18 - pretty excited about that it's gotten a
26:20 - lot of usage so I'm excited about this
26:21 - this is an opinionated way to work with
26:23 - react that said I'm a big fan of create
26:25 - react app too it's a awesome solution so
26:27 - question how many of you will say that
26:30 - my team are
26:32 - bini has its own JavaScript starter kit
26:35 - Wow
26:36 - so that is four percent not five four
26:40 - I'm that exact with my counter so that
26:44 - is a very very small number so again
26:46 - look around the room the future is here
26:49 - it's just not evenly distributed I
26:51 - believe that this is the future because
26:53 - starting with final new project is just
26:55 - too much work and your team has a large
26:58 - set of opinions there are over 40
27:00 - decisions that you need to make when you
27:02 - file new project on JavaScript today and
27:04 - a starter kit operates as an automated
27:06 - checklist for your team so that you can
27:08 - codify your opinions and automate all
27:11 - the fatigue that people talk about away
27:13 - my team is not fatigued anymore we know
27:15 - when we start a project that's what it
27:16 - looks like and it just works we don't
27:18 - have conversations about the basics
27:20 - anymore
27:21 - all right so we have talked about two of
27:24 - the three reusable resolutions packages
27:27 - and starter kits I'm going to close out
27:28 - this talk with the final revolution
27:30 - which is reusable components all of
27:33 - these build upon one another now for
27:35 - those that aren't familiar with
27:36 - reasonable components it's a reusable
27:38 - piece of HTML Javascript and CSS and we
27:41 - know that these are the big reasons that
27:43 - we want consistency less code faster
27:45 - development fewer bugs the component
27:47 - model gives us these obvious benefits at
27:50 - Facebook they are heavily invested in
27:52 - the component model using react and they
27:54 - find that components helped hundreds of
27:55 - engineers work on the same codebase move
27:57 - between teams quickly ramp up and focus
28:00 - on products now this has happened all
28:02 - over the world I'm an I'm a car guy I
28:04 - work for an automotive software company
28:05 - in fact back in Kansas City and you look
28:09 - at this Mercedes this is a beautiful car
28:10 - and you think okay these are a bunch of
28:12 - special parts inside but in actuality
28:14 - there's all sorts of reusable pieces
28:17 - reusable components inside here the seat
28:18 - belt the button on the seat belt the
28:20 - airbag systems the transmissions the but
28:23 - the engines themselves in many cases are
28:25 - used across vehicles really large
28:27 - complicated components and this cuts
28:29 - their costs at speeds development and
28:31 - increases economies of scale as
28:33 - developers we have all this same power
28:36 - now we should be working with higher and
28:39 - higher level abstractions with better
28:40 - components as time goes on that's
28:42 - precisely what's happening on my team
28:44 - now we've created our basic component
28:45 - and now we're starting to build on top
28:47 - of those basic building blocks I will
28:51 - tell you this I believe that the future
28:53 - of development is going to be assembling
28:55 - finished components taking those
28:57 - components putting them together in
28:58 - novel ways we'll be thinking of
28:59 - ourselves more like working with LEGO
29:01 - pieces rather than having to build the
29:04 - Legos ourselves leverage higher pieces
29:06 - higher levels of abstraction now I wish
29:10 - I could claim this slide but I love how
29:12 - this slide encapsulates the mindset
29:14 - shift that you need to make today as a
29:16 - JavaScript developer for the longest
29:17 - time we've talked about separation of
29:19 - concerns as a separation of JavaScript
29:21 - HTML and CSS I don't believe that's a
29:24 - valid way to think about separation of
29:25 - concerns anymore because separation of
29:27 - concerns today is a matter of components
29:29 - so I want to separate my concern of this
29:31 - button from my concern of a date picker
29:33 - from my concern of this modal dialogue
29:35 - the component is the concern we're
29:38 - separating it's a powerful idea because
29:40 - you recognize that HTML and JavaScript
29:42 - were never separated concerns we thought
29:44 - they were back in the jQuery days I
29:46 - would write unobtrusive javascript
29:47 - here's my HTML here's my JavaScript the
29:49 - problem was if I ever changed my HTML I
29:52 - broke my application if I didn't also
29:54 - update my JavaScript because my
29:55 - JavaScript was hard-coded expecting a
29:57 - certain Dom to be there this is the
30:00 - important future for JavaScript
30:03 - developers is thinking about concerns in
30:05 - terms of reusable components and those
30:07 - components may be composed of multiple
30:09 - technologies but separating technologies
30:11 - doesn't necessarily separate concerns
30:13 - HTML and JavaScript are fundamentally
30:16 - intertwined now there's an interesting
30:20 - question someone might ask you though if
30:21 - I asked you hey can you share this HTML
30:23 - with me that's a surprisingly hard
30:25 - question to answer
30:26 - I don't know quite how I respond to it
30:30 - I love I will tell you this is the
30:33 - hardest thing about writing talks is
30:34 - getting distracted by stock photography
30:36 - and all the silliness that you see you
30:38 - guys couldn't turn the monitor on before
30:40 - you pointed at it yeah but this is a
30:44 - hard question can you share this HTML
30:46 - with me and the really the answer is we
30:48 - don't share raw HTML what we share
30:50 - instead is JavaScript that embeds HTML
30:54 - so if I want to share this div
30:55 - with you the way that I'm going to get
30:57 - it done is with JavaScript and this has
30:59 - been the case throughout history over
31:02 - the years we've seen a lot of ways to
31:03 - get this done and this brings us to the
31:04 - third and final revolution which
31:07 - actually occurred earlier but I'm
31:08 - introducing it last for specific reason
31:10 - that I'll explain in a moment now what
31:12 - happened
31:13 - on this date in 2006 no guesses web
31:18 - components nope that was later Gmail web
31:22 - app that's an interesting guess no
31:23 - although that's that's close that was
31:26 - that was in the ballpark jQuery there we
31:29 - go yes jQuery was launched in 2006 this
31:33 - was a very big deal this this is what
31:35 - kept me from ragequitting web
31:37 - development I was just about done with
31:39 - it because cross-browser was so painful
31:41 - and jQuery wasn't really about
31:43 - components jQuery was about paving over
31:45 - inconsistencies in the Dom and giving
31:47 - you a really elegant API but very
31:50 - shortly after jQuery came about we saw
31:52 - this jQuery plugins and jQuery plugins
31:54 - were really the first popular way to
31:56 - build reusable components for the web
31:58 - however today you're likely not going to
32:01 - reach for jQuery plugins to get this
32:03 - done today we're all asking ourselves
32:05 - how should I build components now I
32:08 - obviously have an opinion on this matter
32:10 - and in fact I'm going to go ahead and
32:12 - share it but I want caveat why I believe
32:14 - that strong opinions are useful for
32:16 - others those who are undecided or
32:17 - ambivalent can just adopt your stance
32:19 - but those who disagree can solidify
32:21 - their stance by arguing against yours so
32:24 - I would totally encourage you tonight
32:25 - we're gonna have an after party I'd love
32:26 - for you to come up and say how I'm a
32:28 - dummy head and you feel like this other
32:30 - thing is better that's absolutely fine
32:32 - I'll share my opinion on this story
32:34 - right now because there is no really
32:36 - clear answer web components the web
32:38 - components standard is a compelling
32:39 - option to consider here now I'm a big
32:42 - fan of standardization if you're not
32:43 - familiar with web components it's this
32:45 - idea of four core technologies inert
32:48 - templates put some markup in there and
32:50 - it just works custom elements where you
32:51 - can define your own HTML elements shadow
32:54 - Dom which encapsulates your Styles so
32:56 - they don't leak out and imports being
32:58 - able to bundle HTML Javascript and CSS
33:01 - now I'm a big fan of standards and I
33:03 - even created a course on html5 web
33:05 - components on Pluralsight because I was
33:06 - really amped about this standard
33:08 - sad news is I can't stand up here and
33:11 - push you you might think that that's
33:12 - what I'm going to tell you right now is
33:14 - go ahead go use web components but the
33:16 - story really isn't that simple there's a
33:19 - few reasons that I'm not reaching for
33:21 - web components and many of you how many
33:22 - of you are using native web components
33:26 - one hand one hand out of I don't know
33:29 - how many that's definitely a less than
33:31 - one percent here's why
33:34 - spotty browser support so you have to
33:36 - pull in polyfills in those polyfills way
33:38 - a substantial amount yesterday I just
33:40 - learned I believe it was 27 K minified
33:43 - for the polyfills that you need for IE
33:45 - 11 for instance to be able to run the
33:48 - standard and that's because of browser
33:50 - support see the template tag is pretty
33:52 - well supported cross browser except for
33:54 - IE you'll need a polyfill there but the
33:56 - other three core technologies not so
33:58 - HTML imports a lot of read custom
34:01 - elements shadow dom and we have been
34:04 - waiting i've literally been waiting for
34:06 - years for browsers to implement these
34:07 - standards and we're still waiting so the
34:10 - question is when there are two other
34:12 - issues here this at the time I was
34:15 - really excited about web components
34:15 - because it enabled some new things the
34:17 - idea of the shadow Dom was really novel
34:19 - that I could write simple CSS selectors
34:21 - and not worry about leaking on to other
34:23 - components but today javascript
34:26 - libraries they keep on innovating so in
34:28 - fact I compared to react for instance
34:30 - react has answers to all these things
34:32 - JSX for templates react components are
34:35 - effectively your custom element you can
34:36 - use CSS modules or CSS and j/s to keep
34:39 - your Styles tied to that one component
34:41 - and we're all using bundlers and npm
34:44 - anyway so we don't really need the HTML
34:46 - import specification so my take on it is
34:49 - this don't wait around for the web
34:51 - standard to catch on instead just
34:53 - embrace modern JavaScript the real
34:55 - question is which framework so these are
34:58 - the four most popular although there are
35:00 - many more options out there that I'm not
35:01 - going to try to fit on a slide here's
35:03 - what I think you should be asking
35:04 - yourself though for things how stable is
35:07 - it how broadly is it adopted how much
35:11 - boilerplate am I putting in here that's
35:12 - specific to this library that's gonna
35:14 - make it hard to shift to something else
35:15 - later and how much does it weigh so I'm
35:19 - a big fan of react I'll be completely
35:21 - honest about that
35:22 - let's see how it scores here we react
35:25 - you do code mods when there's a code
35:26 - change a major release I just run a code
35:29 - mod that automates it for me and that's
35:31 - because Facebook has to do that they are
35:33 - dogfooding in a way that no one else can
35:34 - compare to facebook.com/ one of the
35:36 - biggest sites in the world uses 30,000
35:38 - react components so Facebook can't
35:40 - afford to make a big braking change that
35:42 - requires manual changes
35:43 - they'd have to update 30,000 components
35:46 - fundamentally react is a function that
35:49 - returns HTML it is very low boilerplate
35:51 - and finally it's quite lightweight 43k
35:53 - gzipped now I may change my mind
35:57 - tomorrow and if you go see me talking at
35:59 - conferences on videos from previous
36:00 - years you'll find I've had different
36:02 - stickers on my laptop from year to year
36:04 - this is how my trajectory has been
36:06 - through history I was using angular not
36:08 - that long ago but now I'm enjoying react
36:09 - at the moment next year I may be
36:11 - somewhere else so you do have to ask
36:12 - yourself this what if I choose X and
36:15 - everybody moves to Y whether regardless
36:18 - of where you are chances are there's
36:20 - going to be some other new hotness
36:21 - coming soon my take on it is this if you
36:23 - choose a low boiler point a low boiler
36:25 - plate library then you can get started
36:28 - safely today migration really is
36:30 - practical see for instance here's react
36:31 - there's really very little boilerplate
36:33 - I've got I have an import at the top I
36:35 - have a function with a name that takes
36:36 - parameters and it returns HTML if you
36:38 - told my team hey Cory your team needs to
36:40 - go rewrite everything in view what you
36:42 - totally do that that's not a big deal
36:44 - it's mostly a syntactic change I don't
36:46 - burn the world to the ground because
36:48 - really this is what's hard component
36:50 - design is hard but coding isn't that big
36:53 - of a deal I'm convinced that my team it
36:55 - would be relatively straightforward for
36:57 - us to move to a new technology later
36:58 - when react is no longer the new hotness
37:01 - whatever that may be and it may very
37:02 - well be us moving to standardized web
37:04 - components once all of the browsers have
37:06 - really embraced the standard but I don't
37:08 - believe that you should sit around and
37:09 - wait because centralized and consistent
37:12 - is most certainly preferable to
37:14 - decentralized and inconsistent now
37:17 - that's not always true but in the
37:19 - aggregate repeating yourself through
37:21 - copy and paste is not a design pattern
37:23 - that scales very well now choosing a
37:27 - framework is just one of many decisions
37:29 - that you have to consider here I showed
37:30 - you something like this when you were
37:31 - thinking about building a starter kit
37:33 - there is a similarly ridiculously long
37:35 - list here and I'm
37:36 - is going to jump ahead so you don't have
37:37 - to watch it all go fifty decisions fifty
37:39 - decisions that you need to consider when
37:41 - you're going to create a reusable
37:42 - component library so that is huge again
37:46 - I went through the same thing I just
37:48 - published a course if you happen to be
37:49 - interested in react called creating
37:50 - reusable react components this is a six
37:52 - hour course I thought that I could get
37:54 - it done in two but it is a complicated
37:56 - conversation because there are this many
37:58 - decisions to consider fifty different
38:00 - ones so I want to show you quickly how
38:02 - we do reusable components at Cox
38:04 - Automotive this is our documentation for
38:07 - fusion UI components along the left hand
38:10 - side we have a alphabetized list of
38:12 - components I'm looking at the text input
38:15 - component right now which is an
38:16 - abstraction over a label a text input
38:19 - and error message and add some opinions
38:22 - around that down here we have a list of
38:25 - examples for each of these examples you
38:27 - can click on the examples header and see
38:30 - a snippet of code that you could copy
38:32 - and paste into an application down at
38:36 - the bottom we also have a list of props
38:38 - which you can change to oh I apologize I
38:42 - hit the trackpad so I will narrate this
38:45 - anyway just to save us some time
38:46 - but the thing that I want to emphasize
38:48 - is one of the harder parts is setting up
38:50 - your documentation setting it up in a
38:52 - way that is leveraging all your code and
38:55 - what we have is all the documentation
38:56 - that I'm showing you here is generated
38:58 - from the code we add these comments see
39:00 - the comments over there on the left it's
39:01 - kind of a j/s doc style comment that's
39:03 - what generates our documentation so
39:06 - every time we hit save in the code we
39:08 - see our documentation change and that
39:09 - way we don't have to worry about the two
39:11 - getting out of sync I show how to get
39:12 - this done in the Pluralsight course on
39:14 - react components really the patterns
39:15 - that I follow would apply just as well
39:17 - as an angular developer or view
39:18 - developer don't build your Docs by hand
39:20 - automate that process so final question
39:24 - how many of you have your own reusable
39:27 - component library more hands than I
39:30 - expected this is great that's probably
39:32 - 15% of the room that's pretty cool
39:35 - excellent how many of you are working in
39:37 - angular for that reusable component
39:39 - library okay how many in react okay how
39:43 - many of you any Wow so view and reactor
39:46 - neck-and-neck here that's very different
39:48 - than kids well I'll find out Kansas City
39:49 - next
39:50 - month to KCDC we'll see how much that is
39:51 - shifted I know view is getting a lot of
39:53 - attention okay so very very interesting
39:56 - so we just saw that again everybody with
39:58 - their hands raised that's an interesting
40:00 - take as we've gone through this
40:02 - progression fewer and fewer people are
40:04 - through these three revolutions because
40:06 - one revolution builds on another so
40:09 - let's go ahead and wrap up I want to
40:14 - clarify why I laid all of this talk out
40:17 - and the order that I did when you're
40:18 - gonna build a house with components are
40:20 - gonna go out and get a chimney component
40:21 - a door a window these sorts of things
40:24 - you want to you don't want to start from
40:26 - scratch and build your own window or
40:27 - your own door and this should be the
40:29 - story now today with your development
40:31 - story on your team but to be able to do
40:33 - this you need a foundation a house can't
40:36 - float in the air the foundation that I'm
40:38 - suggesting for you is a starter kit that
40:39 - starter kit encapsulates all the
40:41 - dependencies that your team needs and of
40:43 - course that starter kit gets hosted on
40:45 - NPM and that's precisely why I laid out
40:47 - the reusable revolution in the order
40:50 - that I did so if you're one of those
40:51 - people that likes to take pictures of
40:53 - slides at conferences your big chance
40:55 - just make sure your camera's not pointed
40:56 - at your face
40:57 - first was the NPM packages so the
41:00 - reusable revolution of packages my call
41:02 - to you is create your first package we
41:04 - just saw about 30% of the room has not
41:07 - created an NPM package before so that's
41:09 - a big first step in fact no I take that
41:11 - back it was more like 60% of the room
41:13 - but not starter kits my call to you is
41:15 - codify your decisions set up a meeting
41:18 - on Monday to say let's come to an
41:20 - agreement as a team here's how we do
41:21 - lending here's how we do bundling here's
41:23 - how we do transpiling
41:24 - etc automate the pain away and finally
41:27 - with comes to reusable components go
41:29 - pick a library and start sharing set up
41:32 - a centralized site and start documenting
41:34 - your work so if you're gonna take a
41:36 - picture here's your big chance right
41:37 - here so hopefully I've shared a vision
41:41 - that gets you as excited as I am I come
41:43 - into work each day and I'm just awesome
41:45 - I'm ready to go I am amped to be a
41:48 - JavaScript developer I really life is
41:50 - pretty good for us right now there's
41:52 - this reusable revolution is taking off I
41:55 - am HealthCorps on Twitter I'd love a
41:58 - tweet of feedback thank you all for
41:59 - listening
42:00 - [Applause]
42:08 - [Music]