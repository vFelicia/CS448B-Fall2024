00:00 - hey freecodecamp welcome to another the
00:02 - daily programmer web series video the
00:04 - problem today we're going to talk about
00:05 - is called color maze which is number 325
00:07 - on the daily programmer subreddit page
00:09 - all right so here is a problem statement
00:11 - posted on the subreddit
00:13 - i'm not going to read through the whole
00:14 - description but i'll go ahead and give
00:15 - you an overview basically he attaches an
00:17 - image or two images the first image is
00:20 - your
00:20 - 2d array which has your color matrix
00:24 - and then your goal is to
00:26 - find a path from the bottom row
00:30 - to the top row which
00:32 - matches the sequence so in this case he
00:34 - gives us a sequence of orange green so
00:36 - our sequence is orange green so at the
00:38 - bottom row if you can find an orange
00:39 - node and then traverse to a green node
00:41 - and then again traverse turn orange to
00:43 - green orange green orange
00:46 - we've found a path which matches that
00:48 - sequence inside the
00:50 - provided 2d array
00:53 - so that's the goal again given a grid
00:56 - find the path from bottom to the top
00:58 - which has the exact sequence we're
00:59 - looking for
01:01 - and then inside here there's a couple of
01:02 - um
01:04 - criteria it says you can move
01:05 - horizontally and vertically but you
01:07 - cannot move diagonally
01:09 - and you're also allowed to move to
01:12 - um
01:13 - it is also allowed to move on the same
01:15 - node more than once so if for some
01:17 - reason you have to like go up the grid
01:20 - and then cut through somewhere you've
01:22 - already been that's allowed
01:24 - and then for the input
01:27 - the first line is a
01:29 - color sequence so again
01:31 - o space g would be our color sequence
01:34 - and then followed by that is our grid
01:36 - that we're trying to solve
01:39 - and then he says that you can output the
01:41 - path that solves the matrix or you can
01:43 - just go ahead and print out the matrix
01:45 - with that path um printed out inside of
01:47 - it with empty strings and all the other
01:49 - locations so for our case let's just go
01:51 - ahead and try to solve it to print out
01:52 - this um
01:54 - actual grid so we can visualize it
01:56 - and then we're not going to worry about
01:58 - trying to parse this input we're just
01:59 - going to you know write a function which
02:00 - takes in a sequence array and then also
02:03 - takes in a 2d array of our grid
02:06 - and so that's basically the problem
02:07 - let's go ahead and work it out on the
02:08 - whiteboard with a really simple solution
02:11 - all right so let's start off with a
02:13 - really simple um
02:14 - example here so again we have the
02:16 - sequence of o and g and we have this
02:18 - grid it's just um
02:19 - which is three by two so four rows by
02:23 - three columns
02:25 - and remember the goal is to start at
02:27 - this bottom row
02:28 - and find a path which happens to be this
02:31 - path that i'm
02:33 - motioning out with my hand
02:35 - from the bottom of the corner the top
02:36 - right corner where you can only move
02:37 - vertically and horizontally
02:40 - to match the next color in the sequence
02:43 - so again let's work this out by hand
02:46 - so the algorithm starting off is you
02:48 - pick the first index of your sequence
02:51 - so for this algorithm we're going to do
02:53 - something like a breadth-first search
02:54 - where we pick the first
02:57 - index of our sequence so in this case we
02:59 - have the color o
03:01 - and we need to find the bottom
03:04 - elements so all the elements on the
03:06 - bottom row which match the current
03:08 - sequence that we're at so in this case
03:10 - we only have
03:11 - this bottom left corner which is equal
03:12 - to o so one more time we initialize and
03:15 - start with the first element of our
03:16 - sequence we go to the bottom row and
03:18 - find all the elements that match that
03:20 - sequence and then we can go ahead and
03:22 - push that location which is three
03:25 - zero
03:26 - to some type of list or q so i'll go
03:29 - ahead and put a three
03:30 - comma 0 here
03:33 - for ourselves our paths
03:35 - and that's iteration 1 so iteration 2
03:40 - we go ahead and increment
03:44 - the color that we're looking at in the
03:45 - sequence
03:47 - we
03:48 - check
03:49 - the vertical and horizontal locations
03:52 - that we can move to from our current
03:53 - location
03:54 - so our current location would be
03:56 - um we pop off the first element of
04:00 - our current cells list so in this case
04:02 - we have three
04:03 - zero
04:08 - and then at three zero we just check can
04:11 - we move to two zero
04:12 - can we move to three one do they match
04:14 - the color that we're currently at in
04:16 - this case the only match that we find is
04:19 - two zero so we can go ahead and push
04:22 - two comma zero to our array
04:26 - and then go ahead and move to that
04:27 - location
04:29 - on our next iteration so iteration three
04:34 - we again we increment our sequence so we
04:36 - go back to the o here
04:40 - we pop off the first look first um
04:42 - element of this list so two zero which
04:44 - puts us right here
04:49 - we then
04:50 - add on every vertical
04:52 - in horizontal location that we can move
04:53 - to which matches this color of the
04:55 - sequence o and then one caveat is we can
04:58 - kind of ignore the one that we've
04:59 - already been to
05:00 - since that last previous location was
05:03 - this o there's really no reason to go
05:05 - back and check
05:06 - so in this case the only location that's
05:08 - a kind of a new location is two comma
05:10 - one so we can push two one here
05:17 - and then go ahead and move on to
05:18 - iteration number four so again iteration
05:21 - four we pop off the first element so
05:24 - we're put at
05:26 - 2 1
05:29 - we increment our
05:36 - sequence then using the same logic we
05:39 - can just add on every location which is
05:41 - vertically horizontally adjacent to this
05:43 - location which matches the sequence of
05:46 - color g in that case it'll only be one
05:48 - one so we can just go ahead and add
05:50 - a one one here
05:56 - and then repeat our steps so
05:59 - iteration five
06:01 - we're pointing at o now
06:04 - we pop off one one which puts us at one
06:06 - one
06:08 - and then we check every location where
06:10 - the previous isn't equal to so in this
06:12 - case we can check this that and there
06:15 - and this happens to match o so we can go
06:17 - ahead and push one two
06:24 - iteration six we remove one two which
06:27 - puts us at
06:29 - one two
06:32 - increment the sequence
06:37 - and then we check and it happens to be
06:38 - that 0 2 is the only location we can go
06:41 - to
06:48 - and then for our final iteration seven
06:50 - we remove the slot
06:52 - and throughout all these iterations you
06:54 - basically check if we're ever at row
06:56 - zero we've kind of solved this problem
06:58 - so in this case we're popping off the
07:00 - first element we get zero comma two
07:04 - we check okay zero is equal to row zero
07:06 - so therefore we found a solution
07:09 - so this algorithm kind of shows you that
07:11 - yes there is a solution where you can
07:12 - get from the bottom row to the top row
07:14 - but then you might say okay well how do
07:15 - you keep track of the path that we took
07:17 - to get from there there to there
07:20 - so basically all you can do is just
07:22 - instead of having this array you can
07:24 - make this an object
07:25 - which has the i and j location you're
07:28 - about to move to and it also has the
07:30 - previous
07:31 - location as an attribute which points to
07:33 - another object
07:36 - so if you imagine we could have
07:39 - um each one of these is kind of like a
07:40 - node
07:43 - which points to the previous so in this
07:44 - case
07:46 - this one
07:47 - it's previous pointed to that
07:50 - this one's previous point to that
07:52 - this one's previous points of that
07:55 - previous points to that endpoints to
07:57 - that
07:59 - so ultimately if you instead of using
08:01 - arrays to build up your paths
08:04 - what you can do is use objects that
08:06 - point to other objects to kind of
08:07 - traverse backwards to the path that you
08:09 - found
08:10 - so in this case we'd have
08:12 - zero two points two one two points two
08:15 - one one which points to two one which
08:17 - points to two zero which points to three
08:20 - zero and then we can just print that out
08:21 - here
08:23 - and that is basically the algorithm for
08:25 - how do you use breadth first search to
08:27 - traverse
08:28 - this grid to find a path which matches
08:30 - the sequence and this will make a little
08:31 - bit more sense as we implement in
08:33 - javascript because like the whole
08:34 - keeping track of the path thing might be
08:36 - a little bit confusing but i think it'll
08:37 - make more sense when we see it encode
08:39 - and then also there's little caveats
08:41 - where to um
08:42 - like if let's say there's multiple start
08:44 - locations this algorithm will still work
08:47 - it'll just take longer because we have
08:49 - to pop off
08:50 - extra locations and move each one
08:52 - individually
08:53 - and i'm not going to work through a
08:55 - larger case because obviously this took
08:56 - a lot of time but
08:58 - try it for yourself hopefully it makes
09:00 - sense
09:01 - let's go ahead and implement this in
09:02 - javascript
09:03 - all right so just a heads up this
09:04 - implementation is probably going to be a
09:06 - lot harder than any of the other ones
09:07 - that we saw on the previous
09:09 - daily programmer challenges
09:11 - um but hopefully it can make sense in
09:13 - the after we go through all of it but
09:14 - basically
09:16 - again let's just get started we have a
09:18 - sequence which has an array of the
09:19 - sequence we need to iterate through and
09:22 - then we also have a maze constant which
09:23 - is the actual 2d grid that we need to
09:26 - find a solution throughout
09:28 - and then down here i have line 12 which
09:30 - is just calling a solve method
09:32 - passing a sequence in the maze and then
09:34 - we're printing out the path
09:36 - so let's go ahead and create a solve
09:39 - function here which takes a sequence and
09:40 - a maze
09:44 - and then inside this function
09:47 - what i'm first going to do is just
09:48 - declare a couple of helper variables so
09:50 - i'm going to say const
09:52 - rows is equal to
09:54 - maze dot length so that's just a
09:56 - constant which tells us the number of
09:58 - rows we have in the array
10:00 - and then i'll say
10:01 - const
10:02 - calls is equal to maze of zero
10:05 - dot length and that'll tell us how many
10:07 - columns are in the matrix and those are
10:09 - again just kind of helper functions that
10:10 - we'll use or helper
10:13 - variables we can use
10:15 - okay so another thing i'm going to do is
10:16 - go ahead and declare a generator so if
10:18 - you don't know anything about es6
10:20 - generators you might want to read up on
10:21 - that but basically we want a generator
10:23 - so every time we call it it'll give us
10:25 - the color and then once we reach the end
10:27 - of the
10:29 - sequence array we just go back to the
10:30 - beginning and it just keeps on returning
10:32 - us the color sequence
10:34 - so let's say const colors is equal to
10:36 - and i'll say this is going to be a self
10:38 - executing function
10:40 - which takes a parameter of i which is
10:42 - equal to zero by default
10:45 - and again if you don't know what a
10:46 - self-executing function is is basically
10:49 - you create a function and then call it
10:50 - right then and there so that it returns
10:52 - something so in this case we want to
10:54 - create a self-executing function which
10:56 - returns
10:58 - a yield
10:59 - or which does a yield and that's how you
11:01 - pretty much do it
11:03 - using generators and es6
11:06 - all right so again
11:08 - this is a generator function
11:10 - which is going to keep on looping
11:13 - over each sequence in the list and then
11:15 - once i goes out of bounds we go ahead
11:17 - and modify the length so it goes back to
11:19 - zero
11:20 - so this will give us og og og og if you
11:22 - keep on calling it again
11:27 - all right so we have a rows constant we
11:29 - have a columns constant we have a color
11:30 - generator constant which we can use to
11:32 - kind of
11:33 - implement our algorithm
11:37 - so the first thing i'm going to do is
11:39 - again the algorithm says we start at the
11:40 - bottom row right so we need to grab
11:43 - every
11:45 - cell that's in the bottom row so i'll go
11:47 - ahead and say let paths equal two paths
11:50 - or maze of the last row
11:53 - so maze of row minus rows minus 1 will
11:55 - give us that very last row
11:57 - and i'm going to go ahead and filter out
11:59 - or sorry i'm going to go ahead and
12:01 - map that
12:04 - to an object
12:11 - so in this case every index we want to
12:15 - keep track of so we could say
12:17 - rows of minus 1 j of j
12:20 - and then previous like we mentioned in
12:22 - the white board is just pointing to
12:24 - another object which is how we traverse
12:26 - back so in this case
12:30 - let me just reiterate if we grab the
12:32 - last row
12:33 - for each element in that row we're going
12:35 - to return an array which has an i a j
12:39 - and a previous attribute inside an
12:41 - object
12:42 - so here if i were to just say let's just
12:44 - print out paths so we can see what's
12:46 - going on here
12:50 - we see that paths is an array of five
12:52 - elements where we have i is equal to
12:54 - four which is the last row and then we
12:56 - have j of zero one two three and four
12:58 - right so that's kind of what we're gonna
13:00 - start off with
13:01 - and then we can go ahead and filter it
13:03 - out to only match the colors of our
13:04 - current sequence later on
13:09 - okay so now we have
13:11 - our initial paths we can go ahead and
13:12 - loop through our colors
13:16 - so this is how you can loop through an
13:17 - iterator or a generator in
13:20 - es6 if you want to basically just a
13:22 - normal for of loop
13:28 - so if i were to print out color here it
13:30 - should print out o
13:33 - and if i were to print out in the next
13:34 - iteration it should print out g and if i
13:36 - didn't have this break here it would
13:37 - just infinitely loop forever so i'm
13:38 - going to keep the break in there for now
13:41 - starting off we want to like we said on
13:43 - the whiteboard
13:45 - we want to grab and filter out anything
13:48 - that is out of bounds so first of all we
13:50 - can say paths equal paths
13:52 - and we're going to use like functional
13:54 - programming to just keep on modifying
13:55 - the paths array
13:57 - so we can first filter out every path
14:02 - that
14:03 - is out of bounds right so we could say
14:06 - if
14:06 - path of i is less than rows
14:12 - path of i is greater than equals zero if
14:16 - path of j is less than columns and
14:20 - path of j greater than equals zero so
14:22 - basically this will give us
14:24 - or this will filter to only give us the
14:27 - cells which are
14:30 - valid or inside of the grid
14:32 - because later on we're going to push
14:33 - values that might be potentially outside
14:36 - kind of a little bit different from the
14:37 - whiteboard algorithm but i'm just going
14:38 - to do a little bit different on
14:40 - this implementation
14:43 - the next step is we need to filter out
14:45 - every path that doesn't match the
14:47 - current color that we're at so
14:48 - if i were to just do filter paths
14:54 - of
14:55 - base of i
14:56 - path of j is equal to color
15:00 - again this will give us
15:02 - only the paths which match the current
15:03 - color that we're at and so in this case
15:05 - color o
15:06 - if we were to print output passes here
15:11 - it should make sense that it only gives
15:12 - us the fourth row of the last row and
15:15 - then that column one right because if
15:17 - you look over here
15:19 - that's the only thing that matches oh
15:22 - so again we take every element in the
15:23 - bottom rail we filter anything that's
15:25 - out of bounds and we also filter to only
15:27 - match the color that we're at which will
15:28 - give us this one location of o
15:33 - [Music]
15:35 - and then finally what we want to do is
15:36 - for each remember we pop off
15:40 - the first element and we add it to the
15:42 - end
15:43 - and we keep doing that
15:45 - so what we can do is just do a reduce
15:46 - function
15:48 - where we have
15:50 - kind of we're going to build up a new
15:51 - array
15:53 - and just keep on returning a new array
15:55 - with all the elements pushed to the end
15:58 - so if i were to say
16:01 - reduce where we keep track of the
16:03 - accumulator
16:06 - go ahead and pass an empty array to
16:07 - reduce
16:09 - and what we want to do here is just go
16:11 - ahead and say
16:12 - accumulator concatenated with
16:15 - and then i'm going to do the four
16:16 - locations so horizontal and vertical
16:20 - so i can say di of one dj of zero
16:28 - and then d i of negative one
16:34 - so this should be the
16:36 - direction going up direction going down
16:39 - actually i think that swapped direction
16:40 - going
16:41 - down direction going up
16:43 - um
16:44 - direction going to the left direction
16:46 - going to the right
16:48 - so for each of those directions
16:51 - we are going to
16:58 - we are going to simply map those
17:09 - to an object
17:11 - and that object is going to be our
17:12 - current path location added to the
17:14 - direction so if i do i is equal to path
17:16 - of i plus dur of d of i
17:23 - and the same thing with the j we can say
17:25 - uh
17:27 - j is equal to path of j
17:30 - added on to der jay
17:43 - all right so
17:45 - again taking a step back
17:47 - we started off with that one element
17:49 - right
17:50 - and then we're going to reduce over that
17:53 - array which is going to be one element
17:55 - and for each element what we do is we
17:57 - add every potential location you can go
17:59 - to and put that to the end of the list
18:04 - so in this case we're going to check
18:05 - we're going to add the element that's
18:07 - above which is what we're doing with
18:09 - this whole
18:10 - make an array and then map it and then
18:12 - for each mapping callback function we
18:14 - just take the current location of the
18:15 - path
18:16 - and add it to the direction
18:20 - so you can see here we have
18:22 - after this runs once we have a
18:24 - new array so path is equal to array of
18:26 - four
18:27 - where each location is the
18:29 - top bottom left and right location you
18:31 - can see some of these are out of bounds
18:33 - which is why we have this filter up here
18:35 - so that we filter on the ones that are
18:36 - inbounds
18:38 - and some of these locations may point to
18:41 - places in the grid which are not equal
18:44 - to the current color sequence so that's
18:45 - why we have the filter here
18:52 - and then that keeps on happening where
18:53 - we just take a spot
18:55 - add the four to the end take a spot add
18:57 - the four to the end and we keep on
18:58 - looping that until we find
19:00 - our very in case which again if we just
19:02 - say
19:04 - um if we reach the top row we can just
19:06 - go ahead and return her in
19:08 - so i'll say const first row paths is
19:11 - equal to paths i'll filter
19:13 - and we want the paths which match
19:17 - the very top rail so i'll say filter out
19:19 - the ones and give me the ones that are
19:20 - at the top rail
19:22 - and i can say if first row paths not
19:25 - length so that means we found one
19:27 - we just go ahead and return first row
19:29 - paths
19:30 - like so
19:35 - let's go ahead and remove the break
19:37 - statement
19:39 - and down here
19:45 - this is working as intended so it's
19:47 - printing out the path here right so we
19:49 - have
19:51 - the first location is 0 3
19:54 - which is 0
19:56 - 1 2 3 which is here
19:58 - second location is 1 and 3
20:01 - which is here
20:04 - the second location for that is two and
20:06 - three
20:07 - which is here
20:09 - and then previous again is going to be
20:10 - an empty object so i'll go ahead and
20:12 - stringify this
20:16 - so we can actually visualize what's
20:17 - going on
20:21 - all right so
20:22 - our algorithm or our function right now
20:24 - is currently returning this huge nested
20:27 - list where every previous is the
20:29 - previous node so again i'll just go
20:31 - ahead and walk you through this
20:34 - we start off with zero three which is
20:36 - here and then we go to one three and
20:38 - then we go to two three
20:41 - and then we go to two two
20:43 - and then we go to three one
20:45 - and then we go to four one
20:47 - and then we are done so again that's
20:50 - pretty cool but we want to actually
20:51 - visualize it inside the matrix here
20:54 - so let's write a new function which
20:55 - takes a maze takes a path and what it
20:57 - does is it returns a new array which has
20:59 - only that path highlighted
21:02 - so i can say print path
21:05 - in maze is our function
21:07 - and that's going to take a maze
21:10 - and that's going to take a path
21:12 - for paths
21:16 - and what we could do is just go ahead
21:17 - and create a new
21:20 - two by two grid
21:24 - so i'll just say blank is equal to
21:25 - arrays of based on length
21:28 - fill it with
21:31 - underscores
21:33 - and then map that
21:35 - to another array
21:36 - of maze.length
21:39 - fill that with underscores
21:43 - this needs to be zero
21:47 - so this will give us an m by m matrix
21:49 - here
21:51 - and we want to do
21:53 - is loop through all of our nodes or go
21:55 - through our paths so i need to write
21:57 - some type of helper recurser function
21:59 - recursion function
22:01 - which is going to just
22:03 - overwrite the locations
22:06 - of all the the paths inside the blank
22:08 - array with the original
22:11 - color
22:12 - string of our matrix that we pass in
22:31 - okay so one more time what this function
22:33 - is doing
22:35 - is we're recursively
22:37 - recursively diving down all the paths
22:39 - and then replacing the values or indices
22:42 - inside of our blank array with the
22:44 - corresponding values of our original
22:46 - maze that we pass in
22:49 - so down here i can say
22:52 - constant m is equal to print path and
22:55 - maze i could pass it matt maze i could
22:57 - pass a path
22:58 - and then i could say m to see what that
23:01 - gives us
23:04 - and we see down here it prints out
23:06 - the maze with the path highlighted
23:09 - cool so i hope this solution wasn't too
23:11 - confusing now that i'm explaining it i
23:14 - think this was pretty confusing
23:15 - but
23:16 - again this was a harder algorithm to
23:18 - implement
23:19 - and i also use kind of like a functional
23:21 - approach to using like as many filters
23:23 - maps reduce as i could
23:25 - um
23:26 - again if you have a different solution
23:28 - or you think you have a better solution
23:30 - that's more straightforward feel free to
23:31 - paste it in the comments
23:34 - and also if you like this video be sure
23:36 - to subscribe to freecodecamp and like
23:37 - the video below
23:38 - and i look forward to more few videos in
23:41 - the future alright thanks for watching
23:52 - you