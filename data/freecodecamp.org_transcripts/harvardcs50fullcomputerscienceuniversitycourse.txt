00:00 - If you want to learn about computer science and the art
of programming, this course is where to start.
00:04 - CS50 is considered by many to be one of the
best computer science courses in the world.
00:09 - This is a Harvard University course
taught by Dr. David Malan
00:13 - and we are proud to bring it to
the freeCodeCamp YouTube channel.
00:17 - Throughout a series of lectures, Dr. Malan will teach you 
how to think algorithmically and solve problems efficiently.
00:23 - And make sure to check the description for a lot of
extra resources that go along with the course.
00:27 - [MUSIC PLAYING]
01:45 - DAVID MALAN: All right, this is CS50,
Harvard University's introduction
01:50 - to the intellectual
enterprises of computer science
01:52 - and the art of programming, back here
on campus in beautiful Sanders Theatre
01:56 - for the first time in quite a while.
01:58 - So welcome to the class.
02:01 - My name is David--
02:02 - OK.
02:03 - [CHEERING AND APPLAUSE]
02:11 - So my name is David Malan.
02:13 - And I took this class myself
some time ago, but almost didn't.
02:16 - It was sophomore fall and I
was sitting in on the class.
02:20 - And I was a little curious
but, eh, it didn't really
02:22 - feel like the field for me.
02:24 - I was definitely a computer
person, but computer science
02:26 - felt like something altogether.
02:28 - And I only got up the
nerve to take the class,
02:30 - ultimately, because the professor
at the time, Brian Kernighan,
02:32 - allowed me to take the
class pass/fail, initially.
02:35 - And that is what made
all the difference.
02:37 - I quickly found that
computer science is not just
02:39 - about programming and working
in isolation on your computer.
02:42 - It's really about problem
solving more generally.
02:45 - And there was something
about homework, frankly,
02:48 - that was, like, actually fun for perhaps
the first time in, what, 19 years.
02:51 - And there was something
about this ability
02:53 - that I discovered, along
with all of my classmates,
02:56 - to actually create something and bring
a computer to life to solve a problem,
03:00 - and sort of bring to bear something
that I'd been using every day
03:03 - but didn't really know how to harness,
that's been gratifying ever since,
03:06 - and definitely challenging
and frustrating.
03:08 - Like, to this day,
all these years later,
03:10 - you're going to run up against
mistakes, otherwise known as bugs,
03:13 - in programming, that
just drive you nuts.
03:15 - And you feel like you've hit a wall.
03:16 - But the trick really is
to give it enough time,
03:18 - to take a step back, take
a break when you need to.
03:21 - And there's nothing better, I daresay,
than that sense of gratification
03:24 - and pride, really,
when you get something
03:26 - to work, and in a class like
this, present, ultimately,
03:28 - at term's end, something like
your very own final project.
03:32 - Now, this isn't to say that
I took to it 100% perfectly.
03:35 - In fact, just this past week, I looked
in my old CS50 binder, which I still
03:40 - have from some 25 years
ago, and took a photo
03:43 - of what was apparently the very first
program that I wrote and submitted,
03:47 - and quickly received minus 2 points on.
03:50 - But this is a program that we'll
soon see in the coming days that
03:53 - does something quite simply like
print "Hello, CS50," in this case,
03:57 - to the screen.
03:58 - And to be fair, I
technically hadn't really
04:00 - followed the directions, which is
why I lost those couple of points.
04:02 - But if you just look at this, especially
if you've never programmed before,
04:05 - you might have heard
about programming language
04:07 - but you've never typed
something like this out,
04:09 - undoubtedly it's going to look cryptic.
04:11 - But unlike human
languages, frankly, which
04:13 - were a lot more sophisticated, a
lot more vocabulary, a lot more
04:17 - grammatical rules, programming, once
you start to wrap your mind around what
04:21 - it is and how it works and what these
various languages are, it's so easy,
04:24 - you'll see, after a few
months of a class like this,
04:26 - to start teaching
yourself, subsequently,
04:29 - other languages, as they may
come, in the coming years as well.
04:32 - So what ultimately matters
in this particular course
04:36 - is not so much where you end
up relative to your classmates
04:38 - but where you end up relative
to yourself when you began.
04:41 - And indeed, you'll begin today.
04:43 - And the only experience that matters
ultimately in this class is your own.
04:46 - And so, consider where you are today.
04:49 - Consider, perhaps, just how
cryptic something like that
04:51 - looked a few seconds ago.
04:52 - And take comfort in knowing just
some months from now all of that
04:56 - will be within your own grasp.
04:58 - And if you're thinking that, OK, surely
the person in front of me, to the left,
05:01 - to the right, behind me, knows more than
me, that's statistically not the case.
05:05 - 2/3 of CS50 students have never taken
a CS course before, which is to say,
05:10 - you're in very good company
throughout this whole term.
05:14 - So then, what is computer science?
05:16 - I claim that it's problem solving.
05:18 - And the upside of that is
that problem solving is
05:20 - something we sort of do all the time.
05:23 - But a computer science
class, learning to program,
05:25 - I think kind of cleans up your thoughts.
05:27 - It helps you learn how to think more
methodically, more carefully, more
05:31 - correctly, more precisely.
05:32 - Because, honestly, the
computer is not going
05:34 - to do what you want unless you are
correct and precise and methodical.
05:37 - And so, as such, there's
these fringe benefits
05:39 - of just learning to think like a
computer scientist and a programmer.
05:42 - And it doesn't take all
that much to start doing so.
05:45 - This, for instance, is perhaps the
simplest picture of computer science,
05:49 - sure, but really problem
solving in general.
05:51 - Problems are all about taking input,
like the problem you want to solve.
05:54 - You want to get the solution, a.k.a.
05:56 - output.
05:57 - And so, something interesting
has got to be happening in here,
05:59 - in here, when you're trying to
get from those inputs to outputs.
06:03 - Now, in the world of
computers specifically,
06:05 - we need to decide in advance how we
represent these inputs and outputs.
06:09 - We all just need to decide, whether
it's Macs or PCs or phones or something
06:13 - else, that we're all going to speak
some common language, irrespective
06:16 - of our human languages as well.
06:18 - And you may very well know that
computers tend to speak only
06:22 - what language, so to speak?
06:26 - Assembly, one, but binary,
two, might be your go-to.
06:29 - And binary, by implying two,
means that the world of computers
06:32 - has just two digits at
its disposal, 0 and 1.
06:35 - And indeed, we humans have many more
than that, certainly not just zeros
06:40 - and ones alone.
06:40 - But a computer indeed
only has zeros and ones.
06:43 - And yet, somehow they can do so much.
06:45 - They can crunch numbers in
Excel, send text messages,
06:47 - create images and artwork
and movies and more.
06:51 - And so, how do you get from something
as simple as a few zeros, a few ones,
06:54 - to all of the stuff
that we're doing today
06:56 - in our pockets and laptops and desktops?
06:58 - Well, it turns out that
we can start quite simply.
07:01 - If a computer were to want to do
something as simple as count, well,
07:05 - what could it do?
07:06 - Well, in our human world,
we might count doing this,
07:09 - like 1, 2, 3, 4, 5, using so-called
unitary notation, literally the digits
07:13 - on your fingers where one finger
represents one person in the room,
07:16 - if I'm, for instance, taking attendance.
07:18 - Now, we humans would typically
actually count 1, 2, 3, 4, 5, 6.
07:22 - And we'd go past just those five
digits and count much higher,
07:25 - using zeros through nines.
07:26 - But computers, somehow, only
have these zeros and ones.
07:29 - So if a computer only somehow
speaks binary, zeros and ones,
07:33 - how does it even count
past the number 1?
07:36 - Well, here are 3 zeros, of course.
07:38 - And if you translate this
number in binary, 000,
07:42 - to a more familiar number in decimal,
we would just call this zero.
07:46 - Enough said.
07:47 - If we were to represent, with
a computer, the number 1,
07:49 - it would actually be 001,
which, not surprisingly,
07:52 - is exactly the same as we
might do in our human world,
07:55 - but we might not bother writing
out the two zeros at the beginning.
07:59 - But a computer, now, if it
wants to count as high as two,
08:02 - it doesn't have the digit 2.
08:03 - And so it has to use a different
pattern of zeros and ones.
08:06 - And that happens to be 010.
08:08 - So this is not 10 with
a zero in front of it.
08:10 - It's indeed zero one zero
in the context of binary.
08:13 - And if we want to count
higher now than two,
08:15 - we're going to have to tweak these
zeros and ones further to get 3.
08:19 - And then if we want 4
or 5 or 6 or 7, we're
08:24 - just kind of toggling these
zeros and ones, a.k.a.
08:26 - bits, for binary digits that represent,
via these different patterns,
08:31 - different numbers that you
and I, as humans, know,
08:33 - of course, as the so-called
decimal system, 0 through 9,
08:36 - dec implying 10, 10 digits,
those zeros through nine.
08:40 - So why that particular pattern?
08:42 - And why these particular zeros and ones?
08:44 - Well, it turns out that
representing one thing or the other
08:48 - is just really simple for a computer.
08:50 - Why?
08:50 - At the end of the day, they're
powered by electricity.
08:53 - And it's a really simple thing to
just either store some electricity
08:56 - or don't store some electricity.
08:57 - Like, that's as simple as
the world can get, on or off.
09:00 - 1 or 0, so to speak.
09:03 - So, in fact, inside of a
computer, a phone, anything
09:05 - these days that's
electronic, pretty much,
09:07 - is some number of switches,
otherwise known as transistors.
09:10 - And they're tiny.
09:11 - You've got thousands, millions of them
in your Mac or PC or phone these days.
09:14 - And these are just tiny little switches
that can get turned on and off.
09:17 - And by turning those things
on and off in patterns,
09:20 - a computer can count from 0 on up
to 7, and even higher than that.
09:24 - And so these switches, really, you
can think of being as like switches
09:27 - like this.
09:27 - Let me just borrow one of
our little stage lights here.
09:29 - Here's a light bulb.
09:30 - It's currently off.
09:32 - And so, I could just think
of this as representing,
09:34 - in my laptop, a transistor,
a switch, representing 0.
09:38 - But if I allow some electricity
to flow, now I, in fact, have a 1.
09:43 - Well, how do I count higher than 1?
09:44 - I, of course, need another light bulb.
09:46 - So let me grab another one here.
09:48 - And if I put it in that same kind of
pattern, I don't want to just do this.
09:53 - That's sort of the old finger
counting way of unary, just 1, 2.
09:57 - I want to actually take
into account the pattern
09:59 - of these things being on and off.
10:00 - So if this was one a moment ago, what I
think I did earlier was I turned it off
10:06 - and let the next one over be on, a.k.a.
10:10 - 010.
10:12 - And let me get us a
third bit, if you will.
10:15 - And that feels like enough.
10:16 - Here is that same pattern now,
starting at the beginning with 3.
10:20 - So here is 000.
10:22 - Here is 001.
10:25 - Here is 010, a.k.a., in our
human world of decimal, 2.
10:32 - And then we could, of course,
keep counting further.
10:35 - This now would be 3 and dot dot dot.
10:37 - If this other bulb now goes
on, and that switch is turned
10:40 - and all three stay on--
this, again, was what number?
10:43 - AUDIENCE: Seven.
10:44 - DAVID MALAN: OK, so, seven.
10:45 - So it's just as simple,
relatively, as that, if you will.
10:49 - But how is it that these
patterns came to be?
10:53 - Well, these patterns actually
follow something very familiar.
10:56 - You and I don't really
think about it at this level
10:58 - anymore because we've probably been
doing math and numbers since grade
11:02 - school or whatnot.
11:04 - But if we consider something in
decimal, like the number 123,
11:09 - I immediately jump to that.
11:10 - This looks like 123 in decimal.
11:12 - But why?
11:13 - It's really just three symbols,
a 1, a 2 with a bit of curve, a 3
11:17 - with a couple of curves, that
you and I now instinctively
11:20 - just assign meaning to.
11:22 - But if we do rewind a few years,
that is one hundred twenty-three
11:27 - because you're assigning meaning
to each of these columns.
11:30 - The 3 is in the so-called ones place.
11:33 - The 2 is in the so-called tens place.
11:36 - And the 1 is in the
so-called hundreds place.
11:39 - And then the math ensues
quickly in your head.
11:41 - This is technically 100 times 1, plus
10 times 2, plus 1 times 3, a.k.a.
11:47 - 100 plus 20 plus 3.
11:48 - And there we get the sort of
mathematical notion we know as 123.
11:54 - Well, nicely enough, in binary,
it's actually the same thing.
11:58 - It's just these columns mean
a little something different.
12:01 - If you use three digits in decimal,
and you have the ones place,
12:05 - the tens place, and the hundreds place,
well, why was that 1, 10, and 100?
12:09 - They're technically just powers of 10.
12:11 - So 10 to the 0, 10 to
the 1, 10 to the 2.
12:13 - Why 10?
12:14 - Decimal system, "dec" meaning 10.
12:16 - You have 8 and 10 digits, 0 through 9.
12:18 - In the binary system, if you're
going to use three digits,
12:21 - just change the bases if you're
using only zeros and ones.
12:24 - So now it's powers of 2, 2 to the
0, 2 to the 1, 2 to the 2, a.k.a.
12:29 - 1 and 2 and 4, respectively.
12:31 - And if you keep going, it's going
to be 8s column, 16s column, 32, 64,
12:36 - and so forth.
12:37 - So, why did we get these
patterns that we did?
12:40 - Here's your 000 because it's 4 times
0, 2 times 0, 1 times 0, obviously 0.
12:46 - This is why we got the
decimal number 1 in binary.
12:49 - This is why we got the number 2
in binary, because it's 4 times
12:53 - 0, plus 2 times 1, plus 1 times 0, and
now 3, and now 4, and now 5, and now 6,
13:01 - and now 7.
13:01 - And, of course, if you wanted to
count as high as 8, to be clear,
13:05 - what do you have to do?
13:06 - What does a computer need to
do to count even higher than 7?
13:08 - AUDIENCE: Add a bit.
13:09 - DAVID MALAN: Add a bit.
13:10 - Add another light bulb, another switch.
13:12 - And, indeed, computers
have standardized just how
13:14 - many zeros and ones,
or bits or switches,
13:17 - they throw at these kinds of problems.
13:19 - And, in fact, most computers would
typically use at least eight at a time.
13:23 - And even if you're only counting
as high as three or seven,
13:25 - you would still use eight and
have a whole bunch of zeros.
13:28 - But that's OK, because the
computers these days certainly
13:31 - have so many more, thousands,
millions of transistors and switches
13:35 - that that's quite OK.
13:37 - All right, so, with that said, if
we can now count as high as seven
13:41 - or, frankly, as high
as we want, that only
13:44 - seems to make computers
useful for things like Excel,
13:46 - like number crunching.
13:48 - But computers, of course,
let you send text messages,
13:50 - write documents, and so much more.
13:52 - So how would a computer represent
something like a letter,
13:55 - like the letter A of the English
alphabet, if, at the end of the day,
13:59 - all they have is switches?
14:02 - Any thoughts?
14:03 - Yeah.
14:03 - AUDIENCE: You can represent
letters in numbers.
14:05 - DAVID MALAN: OK, so we could
represent letters using numbers.
14:08 - OK, so what's a proposal?
14:10 - What number should represent what?
14:11 - AUDIENCE: Say if you were starting
at the beginning of the alphabet,
14:15 - you could say 1 is A, 2 is B, 3 is C.
14:18 - DAVID MALAN: Perfect.
14:19 - Yeah, we just all have to agree
somehow that one number is
14:22 - going to represent one letter.
14:23 - So 1 is A, 2 is B, 3 is
C, Z is 26, and so forth.
14:28 - Maybe we can even take into
account uppercase and lowercase.
14:30 - We just have to agree and sort of
write it down in some global standard.
14:34 - And humans, indeed, did just that.
14:36 - They didn't use 1, 2, 3.
14:38 - It turns out they started
a little higher up.
14:40 - Capital A has been
standardized as the number 65.
14:44 - And capital B has been
standardized as the number 66.
14:47 - And you can kind of imagine
how it goes up from there.
14:50 - And that's because whatever
you're representing,
14:53 - ultimately, can only be stored, at
the end of the day, as zeros and ones.
14:57 - And so, some humans in a room before,
decided that capital A shall be 65,
15:01 - or, really, this pattern of zeros
and ones inside of every computer
15:05 - in the world, 01000001.
15:08 - So if that pattern of zeros and
ones ever appears in a computer,
15:12 - it might be interpreted then as indeed
a capital letter A, eight of those bits
15:17 - at a time.
15:18 - But I worry, just to be clear, we
might have now created a problem.
15:23 - It might seem, if I play
this naively, that, OK,
15:25 - how do I now actually do
math with the number 65?
15:28 - If now Excel displays 65 is
an A, let alone Bs and Cs.
15:33 - So how might a computer
do as you've proposed,
15:37 - have this mapping from numbers to
letters, but still support numbers?
15:41 - It feels like we've given something up.
15:43 - Yeah?
15:44 - AUDIENCE: By having
a prefix for letters?
15:46 - DAVID MALAN: By having a prefix?
15:47 - AUDIENCE: You could have
prefixes and suffixes.
15:48 - DAVID MALAN: OK, so we could
perhaps have some kind of prefix,
15:51 - like some pattern of zeros and ones--
15:53 - I like this-- that
indicates to the computer
15:56 - here comes another pattern
that represents a letter.
15:58 - Here comes another pattern that
represents a number or a letter.
16:02 - So, not bad.
16:03 - I like that.
16:04 - Other thoughts?
16:05 - How might a computer
distinguish these two?
16:08 - Yeah.
16:08 - AUDIENCE: Have a
different file format, so,
16:11 - like, odd text or just
check the graphic or--
16:16 - DAVID MALAN: Indeed, and that's spot-on.
16:17 - Nothing wrong with what you suggested,
but the world generally does just that.
16:20 - The reason we have all of these
different file formats in the world,
16:23 - like JPEG and GIF and PNGs
and Word documents, .docx,
16:28 - and Excel files and so forth, is
because a bunch of humans got in a room
16:32 - and decided, well, in the context
of this type of file, or really,
16:35 - more specifically, in the
context of this type of program,
16:38 - Excel versus Photoshop versus
Google Docs or the like,
16:42 - we shall interpret any patterns of
zeros and ones as being maybe numbers
16:46 - for Excel, maybe letters in, like, a
text messaging program or Google Docs,
16:51 - or maybe even colors of the rainbow
in something like Photoshop and more.
16:54 - So it's context dependent.
16:55 - And we'll see, when we
ourselves start programming,
16:58 - you the programmer
will ultimately provide
17:00 - some hints to the computer that tells
the computer, interpret it as follows.
17:05 - So, similar in spirit to that, but
not quite a standardized with these
17:08 - prefixes.
17:09 - So this system here actually has a
name ASCII, the American Standard
17:12 - Code for Information Interchange.
17:14 - And indeed, it began here
in the US, and that's
17:16 - why it's actually a little
biased toward A's through Z's
17:19 - and a bit of punctuation as well.
17:21 - And that quickly became a problem.
17:22 - But if we start simply now,
in English, the mapping
17:26 - itself is fairly straightforward.
17:28 - So if A is 65, B it 66,
and dot dot dot, suppose
17:33 - that you received a text
message, an email, from a friend,
17:36 - and underneath the hood,
so to speak, if you kind of
17:39 - looked inside the computer, what you
technically received in this text
17:42 - or this email happened to
be the numbers 72, 73, 33,
17:48 - or, really, the underlying
pattern of zeros and ones.
17:50 - What might your friend have sent you
as a message, if it's 72, 73, 33?
17:56 - AUDIENCE: Hey.
17:58 - DAVID MALAN: Hey?
17:58 - Close.
17:59 - AUDIENCE: Hi.
17:59 - DAVID MALAN: Hi.
18:00 - It's, indeed, hi.
18:01 - Why?
18:02 - Well, apparently, according to this
little cheat sheet, H is 72, I is 73.
18:06 - It's not obvious from
this chart what the 33 is,
18:09 - but indeed, this
pattern represents "hi."
18:11 - And anyone want to guess,
or if you know, what 33 is?
18:13 - AUDIENCE: Exclamation point.
18:14 - DAVID MALAN: Exclamation point.
18:16 - And this is, frankly, not the
kind of thing most people know.
18:18 - But it's easily accessible by a
nice user-friendly chart like this.
18:22 - So this is an ASCII chart.
18:23 - When I said that we just need to
write down this mapping earlier,
18:26 - this is what people did.
18:27 - They wrote it down in
a book or in a chart.
18:29 - And, for instance, here is our
72 for H, here is our 73 for I,
18:33 - and here is our 33
for exclamation point.
18:37 - And computers, Macs, PCs,
iPhones, Android devices,
18:41 - just know this mapping
by heart, if you will.
18:43 - They've been designed to
understand those letters.
18:46 - So here, I might have received "hi."
18:48 - Technically, what I've received is
these patterns of zeros and ones.
18:51 - But it's important to note that when
you get these patterns of zeros and ones
18:54 - in any format, be it
email or text or a file,
18:58 - they do tend to come
in standard lengths,
19:00 - with a certain number of
zeros and ones altogether.
19:04 - And this happens to be 8 plus 8, plus 8.
19:07 - So just to get the message
"hi, exclamation point,"
19:10 - you would have received at least,
it would seem, some 24 bits.
19:15 - But frankly, bits are so tiny,
literally and mathematically,
19:18 - that we don't tend to think or
talk, generally, in terms of bits.
19:21 - You're probably more
familiar with bytes.
19:23 - B-Y-T-E-S is a byte,
is a byte, is a byte.
19:27 - A byte is just 8 bits.
19:29 - And even those, frankly, aren't
that useful if we do out the math.
19:32 - How high can you count
if you have eight bits?
19:34 - Anyone know?
19:35 - Say it again?
19:38 - Higher than that.
19:39 - Unless you want to go
negative, that's fine.
19:42 - 256, technically 255.
19:45 - Long story short, if we actually got
into the weeds of all of these zeros
19:48 - and ones, and we figured out what
11111111 mathematically adds up
19:54 - to in decimal, it would
indeed be 255, or less
19:57 - if you want to represent
negative numbers as well.
20:00 - So this is useful because now we can
speak, not just in terms of bytes
20:04 - but, if the files are bigger,
kilobytes is thousands of bytes,
20:06 - megabytes is millions of bytes,
gigabytes is billions of bytes,
20:10 - terabytes are trillions
of bytes, and so forth.
20:14 - We have a vocabulary for these
increasingly large quantities of data.
20:20 - The problem is that, if you're using
ASCII and, therefore, eight bits or one
20:24 - byte per character, and
originally, only seven, you
20:27 - can only represent 255 characters.
20:30 - And that's actually 256 total
characters, including zero.
20:33 - And that's fine if you're using
literally English, in this case,
20:37 - plus a bunch of punctuation.
20:39 - But there's many human
languages in the world
20:42 - that need many more symbols
and, therefore, many more bits.
20:45 - So, thankfully, the world
decided that we'll indeed
20:48 - support not just the US
English keyboard, but all
20:51 - of the accented characters that
you might want for some languages.
20:54 - And heck, if we use enough
bits, zeros and ones,
20:57 - not only can we represent all
human languages in written form,
21:01 - as well as some emotions
along the way, we
21:03 - can capture the latter with
these things called emojis.
21:06 - And indeed, these are very
much in vogue these days.
21:09 - You probably send and/or receive
many of these things any given day.
21:12 - These are just characters, like
letters of an alphabet, patterns
21:16 - of zeros and ones that you're receiving,
that the world has also standardized.
21:20 - For instance, there
are certain emojis that
21:22 - are represented with
certain patterns of bits.
21:24 - And when you receive them, your
phone, your laptop, your desktop,
21:28 - displays them as such.
21:30 - And this newer standard
is called Unicode.
21:32 - So it's a superset of
what we called ASCII.
21:35 - And Unicode is just a mapping of many
more numbers to many more letters
21:39 - or characters, more
generally, that might
21:42 - use eight bits for
backwards compatibility
21:45 - with the old way of doing things with
ASCII, but they might also use 16 bits.
21:49 - And if you have 16
bits, you can actually
21:51 - represent more than
65,000 possible letters.
21:54 - And that's getting up there.
21:55 - And heck, Unicode might even use 32
bits to represent letters and numbers
22:01 - and punctuation symbols and emojis.
22:03 - And that would give you up
to 4 billion possibilities.
22:06 - And, I daresay, one of the reasons we
see so many emojis these days is we
22:09 - have so much room.
22:11 - I mean, we've got room for
billions more, literally.
22:14 - So, in fact, just as a
little bit of trivia,
22:16 - has anyone ever received this decimal
number, or if you prefer binary now,
22:21 - has anyone ever received this pattern
of zeros and ones on your phone,
22:25 - in a text or an email,
perhaps this past year?
22:29 - Well, if you actually look this up,
this esoteric sequence of zeros and ones
22:33 - happens to represent
face with medical mask.
22:37 - And notice that if you've got
an iPhone or an Android device,
22:40 - you might be seeing different things.
22:43 - In fact, this is the Android
version of this, most recently.
22:46 - This is the iOS version
of it, most recently.
22:49 - And there's bunches of other
interpretations by other companies
22:51 - as well.
22:53 - So Unicode, as a
consortium, if you will,
22:55 - has standardized the descriptions
of what these things are.
22:58 - But the companies themselves,
manufacturers out there,
23:02 - have generally interpreted
it as you see fit.
23:05 - And this can lead to some
human miscommunications.
23:08 - In fact, for like, literally,
embarrassingly, like a year or two,
23:11 - I started being in the habit of
using the emoji that kind of looks
23:14 - like this because I thought it was
like woo, happy face, or whatever.
23:17 - I didn't realize this
is the emoji for hug
23:19 - because whatever device I was using
sort of looks like this, not like this.
23:24 - And that's because of their
interpretation of the data.
23:27 - This has happened too when
what was a gun became a water
23:31 - pistol in some manufacturers' eyes.
23:33 - And so it's an interesting dichotomy
between what information we all
23:37 - want to represent and how we
choose, ultimately, to represent it.
23:42 - Questions, then, on these
representations of formats,
23:45 - be it numbers or letters, or soon more.
23:49 - Yeah?
23:49 - AUDIENCE: Why is decimal
popular for a computer
23:52 - if binary is the basis for everything?
23:54 - DAVID MALAN: Sorry,
why is what so popular?
23:56 - AUDIENCE: Why is the decimal popular
if binary is the fundamental--
23:59 - DAVID MALAN: Yeah, so we'll come
back to this in a few weeks, in fact.
24:01 - There are other ways
to represent numbers.
24:03 - Binary is one.
24:04 - Decimal is another.
24:06 - Unary is another.
24:07 - And hexadecimal is yet a fourth that
uses 16 total digits, literally 0
24:12 - through 9 plus A, B, C,
D, E, F. And somehow,
24:15 - you can similarly count
even higher with those.
24:18 - We'll see in a few weeks
why this is compelling.
24:21 - But hexadecimal, long story
short, uses four bits per digit.
24:24 - And so, four bits, if you have two
digits in hex, that gives you eight.
24:28 - And it's just a very
convenient unit of measure.
24:30 - And it's also human convention in
the world of files and other things.
24:34 - But we'll come back to that soon.
24:35 - Other questions?
24:36 - AUDIENCE: Do the lights on the
stage supposedly say that--
24:39 - DAVID MALAN: Do the lights on the
stage supposedly say anything?
24:42 - Well, if we had thought in advance
to use maybe 64 light bulbs,
24:46 - that would seem to give us 8
total bytes on stage, 8 times 8,
24:51 - giving us just that.
24:52 - Maybe.
24:54 - Good question.
24:55 - Other questions on 0's and 1's?
24:58 - It's a little bright in here.
25:01 - No?
25:02 - Oh, yes?
25:04 - Where everyone's pointing
somewhere specific.
25:08 - There we go.
25:09 - Sorry.
25:10 - Very bright in this corner.
25:11 - AUDIENCE: I was just going
to ask about the 255 bits,
25:14 - like with the maximum characters.
25:16 - [INAUDIBLE]
25:16 - DAVID MALAN: Ah, sure, and we'll
come back to this, in some form,
25:19 - in the coming days too,
at a slower pace too,
25:22 - we have, with eight bits, two
possible values for the first
25:26 - and then two for the next, two
for the next, and so forth.
25:28 - So that's 2 times 2 times 2.
25:30 - That's 2 to the eighth
power total, which
25:32 - means you can have 256 total
possible patterns of zeros and ones.
25:36 - But as we'll see soon computer
scientists, programmers,
25:40 - software often starts counting at 0 by
convention and if you use one of those
25:45 - patterns, 00000000 to represent
the decimal number we know is zero,
25:50 - you only have 255 other patterns left
to count as high as therefore 255.
25:56 - That's all.
25:57 - Good question.
25:59 - All right, so what then might we
have besides these emojis and letters
26:04 - and numbers?
26:04 - Well, we of course have things
like colors and programs
26:07 - like Photoshop and pictures and photos.
26:09 - Well let me ask the question again.
26:11 - How might a computer, do you think,
knowing what you know now, represents
26:14 - something like a color?
26:16 - Like what are our options if all we've
got are zeros and ones and switches?
26:19 - Yeah?
26:20 - AUDIENCE: RGB
26:21 - DAVID MALAN: RGB.
26:23 - RGB indeed is this acronym that
represents some amount of red
26:27 - and some amount of green and
blue and indeed computers
26:29 - can represent colors by just doing that.
26:32 - Remembering, for instance, this dot.
26:33 - This yellow dot on the screen that
might be part of any of those emojis
26:36 - these days, well that's some amount
of red, some amount of green,
26:39 - some amount of blue.
26:40 - And if you sort of mix
those colors together,
26:42 - you can indeed get a very specific one.
26:44 - And we'll see you in
just a moment just that.
26:46 - So indeed earlier on, humans
only used seven bits total.
26:51 - And it was only once they decided,
well, let's add an eighth bit that they
26:54 - got extended ASCII and
that was initially in part
26:57 - a solution to the same problem of
not having enough room, if you will,
27:00 - in those patterns of zeros and ones
to represent all of the characters
27:05 - that you might want.
27:06 - But even that wasn't enough and that's
why we've now gone up to 16 and 32
27:10 - and long past 7.
27:11 - So if we come back now to
this one particular color.
27:16 - RGB was proposed as a scheme,
but how might this work?
27:19 - Well, consider for instance this.
27:21 - If we do indeed decide as a group to
represent any color of the rainbow
27:25 - with some mixture of some red,
some green, and some blue,
27:28 - we have to decide how to represent
the amount of red and green and blue.
27:33 - Well, it turns out if all we have
are zeros and ones, ergo numbers,
27:37 - let's do just that.
27:38 - For instance, suppose a computer we're
using, these three numbers 72, 73, 33,
27:44 - no longer in the context of
an email or a text message,
27:47 - but now in the context of something
like Photoshop, a program for editing
27:51 - and creating graphical files,
maybe this first number
27:55 - could be interpreted as representing
some amount of red, green, and blue,
28:00 - respectively.
28:00 - And that's exactly what happens.
28:02 - You can think of the first digit as
red, second as green, third as blue.
28:05 - And so ultimately when you combine that
amount of red, that amount of green,
28:10 - that amount of blue, it turns out it's
going to resemble the shade of yellow.
28:14 - And indeed, you can come up
with a numbers between 0 and 255
28:18 - for each of those colors to mix any
other color that you might want.
28:21 - And you can actually
see this in practice.
28:23 - Even though our screens,
admittedly, are getting really good
28:26 - on our phones and laptops such that you
barely see the dots, they are there.
28:30 - You might have heard
the term pixel before.
28:32 - Pixel's just a dot on
the screen and you've
28:34 - got thousands, millions of them these
days horizontally and vertically.
28:38 - If I take even this
emoji, which again happens
28:41 - to be one company's interpretation
of a face with medical mask
28:46 - and zoom in a bit, maybe
zoom in a bit more,
28:48 - you can actually start
to see these pixels.
28:50 - Things get pixelated
because what you're seeing
28:53 - is each of the individual dots
that compose this particular image.
28:57 - And apparently each of
these individual dots
28:59 - are probably using 24 bits, eight bits
for red, eight bits for green, eight
29:04 - bits for blue, in some pattern.
29:07 - This program or some other like
Photoshop is interpreting one pattern
29:11 - and it's white or yellow or
black or some brown in between.
29:16 - So if you look sort of awkwardly, but
up close to your phone or your laptop
29:19 - or maybe your TV, you can
see exactly this, too.
29:23 - All right, well, what
about things that we also
29:25 - watch every day on YouTube or the like?
29:27 - Things like videos.
29:28 - How would a computer,
knowing what we know now,
29:30 - represent something like a video?
29:35 - How might you represent a video
using only zeros and ones?
29:37 - Yeah?
29:38 - AUDIENCE: As we can see here,
they represent images, right?
29:43 - [INAUDIBLE] sounds of
the 0 and 1s as well.
29:47 - [INAUDIBLE]
29:50 - DAVID MALAN: Yeah, exactly.
29:52 - To summarize, what video really
adds is just some notion of time.
29:55 - It's not just one image, it's
not just one letter or a number,
29:58 - it's presumably some kind of
sequence because time is passing.
30:01 - So with a whole bunch of images,
maybe 24 maybe 30 per second,
30:05 - if you fly them by the
human's eyes, we can
30:08 - interpret them using our eyes
and brain that there is now
30:11 - movement and therefore video.
30:13 - Similarly with audio or music.
30:16 - If we just came up with some convention
for representing those same notes
30:20 - on a musical instrument, could we have
the computer synthesize them, too?
30:23 - And this might be
actually pretty familiar.
30:25 - Let me pull up a quick video here,
which happens to be an old school
30:29 - version of the same idea.
30:31 - You might remember from childhood.
30:32 - [MUSIC PLAYING]
30:40 - [CLICKING]
30:54 - So granted that particular
video is an actual video
30:58 - of a paper-based animation, but
indeed, that's really all you need,
31:02 - is some sequence of these images,
which themselves of course
31:06 - are just zeros and ones because they're
just this grid of these pixels or dots.
31:10 - Now something like musical notes like
these, those of you who are musicians
31:14 - might just naturally play
these on physical devices,
31:16 - but computers can certainly
represent those sounds, too.
31:19 - For instance, a popular
format for audio is
31:22 - called MIDI and MIDI
might just represent
31:24 - each note that you saw a moment ago
essentially as a sequence of numbers.
31:29 - But more generally, you might
think about music as having notes,
31:32 - for instance, A through G, maybe
some flats and some sharps,
31:35 - you might have the duration like how
long is the note being heard or played
31:39 - on a piano or some
other device, and then
31:41 - just the volume like how hard
does a human in the real world
31:43 - press down on that key and
therefore how loud is that sound?
31:46 - It would seem that just remembering
little details like that quantitatively
31:51 - we can then represent really all of
these otherwise analog human realities.
31:57 - So that then is really
a laundry list of ways
32:00 - that we can just represent information.
32:02 - Again, computers or digital have
all of these different formats,
32:05 - but at the end of the day and as
fancy as those devices in years
32:07 - are, it's just zeros and ones, tiny
little switches or light bulbs,
32:11 - if you will, represented in some
way and it's up to the software
32:14 - that you and I and others
write to use those zeros
32:17 - and ones in ways we want to get
the computers to do something
32:21 - more powerfully.
32:22 - Questions, then, on this representation
of information, which I daresay
32:27 - is ultimately what problem solving
is all about, taking in information
32:30 - and producing new via
some process in between.
32:35 - Any questions there?
32:38 - Yeah, in back.
32:40 - AUDIENCE: Yeah, so we talked about how
different file formats kind of allow
32:43 - you to interpret information.
32:45 - How does a file format like .mp4
discriminate between audio and video
32:50 - within itself as a value?
32:52 - DAVID MALAN: So a really good question.
32:53 - There are many other
file formats out there.
32:55 - You allude to MP4 for video
and more generally the use
32:58 - are these things called
codecs and containers.
33:01 - It's not quite as simple when
using larger files, for instance,
33:04 - in more modern formats that a
video is just a sequence of images,
33:08 - for instance.
33:08 - Why?
33:09 - If you stored that many images
for like a Hollywood movie,
33:13 - like 24 or 30 of them per second,
that's a huge number of images.
33:17 - And if you've ever taken
photos on your phone,
33:19 - you might know how many megabytes or
larger even individual photographs
33:23 - might be.
33:24 - So humans have developed over
the years a fancier software
33:27 - that uses much more math to represent
the same information more minimally
33:32 - just using somehow shorter
patterns of zeros and ones
33:35 - than are most simplistic
representation here.
33:37 - And they use what might
be called compression.
33:40 - If you've ever used a zip
file or something else,
33:42 - somehow your computer is
using fewer zeros and ones
33:45 - to represent the same
amount of information,
33:47 - ideally without losing any information.
33:49 - In the world of multimedia, which we'll
touch on a little bit in a few weeks,
33:52 - there are both lossy and
lossless formats out there.
33:56 - Lossless means you lose
no information whatsoever.
33:59 - But more commonly as you're alluding
to one is lossy compression, L-O-S-S-Y,
34:05 - where you're actually throwing
away some amount of quality.
34:08 - You're getting some amount
of pixelation that might not
34:10 - look perfect to the human, but heck
it's a lot cheaper and a lot easier
34:13 - to distribute.
34:14 - And in the world of multimedia,
you have containers like QuickTime
34:17 - and other MPEG containers
that can combine
34:20 - different formats of video, different
formats of audio in one file,
34:24 - but there, too, do
designers have discretion.
34:26 - So more in a few weeks, too.
34:28 - Other questions, then, on
information here as well?
34:32 - Yeah?
34:32 - AUDIENCE: So I know
computers used to be very big
34:35 - and taking up like a
whole room and stuff.
34:37 - Is the reason they've gotten
smaller because we can store
34:41 - this information piecemeal or what?
34:43 - DAVID MALAN: Exactly.
34:44 - I mean, back in the day you might
have heard of the expression a vacuum
34:47 - tube, which is like some
physically large device that
34:50 - might have only stored some 0 or 1.
34:53 - Yes, it is the miniaturization
of hardware these days
34:55 - that has allowed us to store as many
and many more zeros and ones much more
35:00 - closely together.
35:01 - And as we've built more
fancy machines that
35:03 - can sort of design this hardware
at an even smaller scale,
35:06 - we're just packing more and
more into these devices.
35:08 - But there, too, is a trade off.
35:09 - For instance, you might know by
using your phone or your laptop
35:13 - for quite a while, maybe on
your lap, starts to get warm.
35:15 - So there are these literal
physical side effects
35:17 - of this where now some
of our devices run hot.
35:20 - This is why like a data
center in the real world
35:23 - might need more air conditioning
than a typical place,
35:25 - because there are these
physical artifacts as well.
35:28 - In fact, if you'd like to see one of
the earliest computers from decades ago,
35:31 - across the river here in now Allston
in the new engineering building
35:35 - is the Harvard Mark 1 computer that
will give you a much better mental model
35:40 - of just that.
35:41 - Well if we come back now
to this first picture
35:44 - being computer science or
really problem solving,
35:47 - I daresay we have more
than enough ways now
35:49 - to represent information, input and
output, so long as we all just agree
35:53 - on something and thankfully all
of those before us have given us
35:56 - things like ASCII and Unicode.
35:57 - Not to mention MP4s, word
documents, and the like.
36:01 - But what's inside of this proverbial
black box into which these inputs are
36:05 - going in the outputs are coming?
36:06 - Well that's where we get this
term you might have heard, too.
36:09 - An algorithm, which is just step-by-step
instructions for solving some problem
36:14 - incarnated in the world
of computers by software.
36:17 - When you write software
aka programs, you
36:20 - are implementing one or more algorithms,
one or more sets of instructions
36:26 - for solving some problem, and maybe
you're using this language or that,
36:29 - but at the end of the day,
no matter the language
36:31 - you use the computer is going
to represent what you type
36:34 - using just zeros and ones.
36:37 - So what might be a
representative algorithm?
36:40 - Nowadays you might use
your phone quite a bit
36:42 - to make calls or send texts
or emails and therefore you
36:45 - have a whole bunch of
contacts in your address book.
36:48 - Nowadays, of course,
this is very digital,
36:50 - but whether on iOS or
Android or the like,
36:53 - you might have a whole
bunch of names, first name
36:56 - and/or last, as well as numbers
and emails and the like.
36:58 - You might be in the habit of like
scrolling through on your phone
37:01 - all of those names to find
the person you want to call.
37:05 - It's probably sorted alphabetically by
first name or last name, A through Z,
37:09 - or some other symbol.
37:11 - This is frankly quite the same as
we used to do back in my day, CS50,
37:16 - when we just used a physical book.
37:18 - In this physical book
might be a whole bunch
37:20 - of names alphabetically
sorted from left to right
37:22 - corresponding to a
whole bunch of numbers.
37:24 - So suppose that in this
old Harvard phone book
37:27 - we want to search for John Harvard.
37:29 - We might of course start
quite simply at the beginning
37:31 - here, looking at one page at a
time, and this is an algorithm.
37:36 - This is like literally step-by-step
looking for the solution
37:40 - to this problem.
37:41 - In that sense, if John
Harvard's in the phone book,
37:43 - is this algorithm page-by-page
correct, would you say?
37:47 - AUDIENCE: Yes.
37:48 - DAVID MALAN: Yes.
37:49 - Like if John Harvard's
in the phone book,
37:51 - obviously I'm eventually going to get to
him, so that's what we mean by correct.
37:54 - Is it efficient?
37:56 - Is it well designed, would you say?
37:58 - No.
37:58 - I mean this is going to take forever
even just to get to the Js or the Hs,
38:01 - depending how this thing's sorted.
38:03 - All right, well let
me go a little faster.
38:04 - I'll start like two pages at a time.
38:06 - 2, 4, 6, 8, 10, 12, and so forth.
38:11 - Sounds faster, is faster, is it correct?
38:13 - AUDIENCE: No.
38:14 - DAVID MALAN: OK, why is it not correct?
38:16 - Yeah?
38:17 - AUDIENCE: So if you're
starting on page 1,
38:19 - you're only going odd number of pages,
so if it's on an even number page,
38:22 - you'll miss it.
38:22 - DAVID MALAN: Exactly.
38:23 - If I start on an odd number of
pages and I'm going two at a time
38:26 - I might miss pages in between.
38:28 - And if I therefore conclude
when I get to the back
38:30 - of the book there was no John
Harvard, I might have just errored.
38:33 - This would be again one of these bugs.
38:35 - But if I try a little harder,
I feel like there's a solution.
38:39 - We don't have to completely
throw out this algorithm.
38:41 - I think we can probably go
roughly twice as fast still.
38:44 - But what should we do
instead to fix this?
38:47 - Yeah, in back.
38:48 - AUDIENCE: [INAUDIBLE]
38:58 - DAVID MALAN: Nice.
38:59 - So I think what many of us, most of us,
if we even use this technology any more
39:02 - these days, we might go roughly
to the middle of the phone book
39:05 - just to kind of get us started.
39:06 - And now I'm looking down, I'm looking
for J, assuming first name, J Harvard,
39:10 - and it looks like I'm in the M section.
39:13 - So just to be clear,
what should I do next?
39:15 - AUDIENCE: [INAUDIBLE]
39:21 - DAVID MALAN: OK, and
presumably it is John Harvard
39:23 - would be to the left of this.
39:24 - So here's an opportunity to
figuratively and literally tear
39:27 - this particular problem in half,
throw half of the problem away.
39:32 - It's actually pretty easy
if you just do it that way.
39:34 - The hard way is this way.
39:36 - But I've now just decreased the
size of this problem really in half.
39:41 - So if I started with 1,000 pages
of phone numbers and names, now
39:45 - I'm down to 500.
39:46 - And already we haven't
found John Harvard,
39:48 - but that's a big bite
out of this problem.
39:50 - I do think it's correct because if
J is to the left of M, of course,
39:54 - he's definitely not
going to be over there.
39:56 - I think if I repeat this again
dividing and conquering, if you will,
40:00 - here I might have gone a little too far.
40:02 - Now I'm in like the E section.
40:03 - So let me tear the problem in half
again, throw another 250 pages away,
40:08 - and again repeat, dividing
and dividing and conquering
40:11 - until finally, presumably, I end
up with just one page of a phone
40:14 - book on which John Harvard's
name either is or is not,
40:18 - but because of the algorithm
you proposed, step by step,
40:21 - I know that he's not in
anything I discarded.
40:24 - So traumatic is that
might have been made out
40:28 - to be, it's actually just harnessing
pretty good human intuition.
40:31 - Indeed, this is what
programming is all about, too.
40:33 - It's not about learning
a completely new world,
40:36 - but really just how to harness intuition
and ideas that you might already
40:40 - have and take naturally
but learning how to express
40:43 - them now more succinctly,
more precisely,
40:45 - using things called
programming languages.
40:49 - Why is an algorithm like that if I found
John Harvard better than, ultimately,
40:54 - just doing the first
one or even the second
40:56 - and maybe doubling back
to check those even pages?
40:59 - Well let's just look
at little charts here.
41:01 - Again, we don't have to get
into the nuances of numbers,
41:04 - but if we've got like a chart
here, xy plot, on the x-axis
41:07 - here I claim as the size of the problem.
41:09 - So measured in the numbers
of pages in the phone book.
41:12 - So the farther you go out here, the
more pages are in the phone book.
41:16 - And here we have time
to solve on the y-axis.
41:18 - So the higher you go
up, the more time it's
41:21 - going to be taking to solve
that particular problem.
41:24 - So let's just arbitrarily say that
the first algorithm, involving
41:27 - like n pages, might be
represented graphically like this.
41:31 - No matter the slope,
it's a straight line
41:33 - because there's presumably
a one to one relationship
41:36 - between numbers of pages and number
of seconds or number of page turns.
41:40 - Why?
41:40 - If the phone company adds
another page next year
41:43 - because some new people
move to town, that's
41:45 - going to require one
additional page for me.
41:47 - One to one.
41:49 - If, though, we use the second
algorithm, flawed though it was,
41:52 - unless we double back a little bit
to fix someone being in between,
41:56 - that's too going to be a
straight line, but it's
41:59 - going to be a different slope because
now there's a 2 to 1 or a 1 to 2
42:02 - relationship because I'm
going to pages at a time.
42:06 - So if the phone company adds
another page or another two pages,
42:10 - that still only just one more step.
42:13 - You can see the difference
if I kind of draw this.
42:15 - If this is the phone book in
question, this number of pages,
42:18 - it might take this many
seconds on the yellow line
42:20 - to represent or to find
someone like John Harvard.
42:24 - But of course on the first
algorithm, the red line,
42:27 - it's literally going to
take twice as many steps.
42:29 - And what do the n here mean?
n is the go-to variable
42:32 - for computer scientist or programmer
just generically representing a number.
42:36 - So if the number of pages
in the phone book is n,
42:38 - the number of steps the second
algorithm would have taken
42:41 - would be in the worst case n over 2.
42:44 - Half as many because
you're going twice as fast.
42:46 - But the third algorithm, actually
if you recall your logarithms,
42:50 - looks a little something like this.
42:52 - There's a fundamentally
different relationship
42:54 - between the size of the problem and
the amount of time required to solve it
42:58 - that technically is
log-based, too, again,
43:00 - but it's really the
shape that's different.
43:02 - The implication there is that if,
for instance, Cambridge and Allston,
43:06 - two different towns here in
Massachusetts, merge next year
43:08 - and there's just one phone
book that's twice as big,
43:11 - no big deal for that
third and final algorithm.
43:14 - Why?
43:15 - You just tear the problem
one more time in half,
43:17 - taking one more byte,
that's it, not another 1,000
43:21 - bytes just to get to the solution.
43:23 - Put another way, you
can walk it way, way,
43:26 - way out here to a much bigger
phone book and ultimately
43:29 - that green line is barely
going to have budged.
43:32 - So this then is just a way of
now formalizing and thinking
43:35 - about what the performance or
quality of these algorithms might be.
43:42 - Before we now make one more
formalization of the algorithm itself,
43:46 - any questions then on this notion of
efficiency or now performance of ideas?
43:52 - Yeah.
43:52 - AUDIENCE: How many phone
books have you got?
43:56 - DAVID MALAN: (LAUGHING) A lot
of phone books over the years
43:58 - and if you or your parents have any
more still somewhere we could definitely
44:02 - use them because they're hard to find.
44:04 - Other questions?
44:05 - But thanks.
44:07 - Other questions here, too?
44:09 - No.
44:10 - Oh, was that a murmur?
44:11 - Yes, over here.
44:13 - AUDIENCE: You could get Harry
Potter as a guest speaker.
44:15 - DAVID MALAN: Sorry, say again.
44:16 - AUDIENCE: You could get Harry
Potter as a guest speaker.
44:18 - DAVID MALAN: (LAUGHING) Oh, yeah.
44:19 - Hopefully.
44:20 - Then we'd have a little
something more to use here.
44:23 - So now if we want to formalize
further what it is we just did,
44:28 - we can go ahead and introduce this.
44:30 - A form of code aka pseudocode.
44:33 - Pseudocode is not a specific
language, it's not like something
44:35 - we're about to start coding in, it's
just a way of expressing yourself
44:38 - in English or any human
language succinctly
44:41 - correctly toward an end of getting
your idea for an algorithm across.
44:45 - So for instance, here
might be how we could
44:47 - formalize the code, the pseudocode
for that same algorithm.
44:51 - Step one was pick up the
phone book, as I did.
44:54 - Step two might be open to
the middle of the phone book,
44:56 - as you proposed that we do first.
44:58 - Step three was probably to
look down at the pages, I did.
45:01 - And step four gets a
little more interesting
45:04 - because I had to quickly make a
decision and ask myself a question.
45:07 - If person is on page, then
I should probably just
45:11 - go ahead and call that person.
45:13 - But that probably wasn't the
case at least for John Harvard,
45:15 - and I opened the M section.
45:17 - So there's this other
question I should now
45:19 - ask else if the person
is earlier in the book,
45:22 - then I should tear the problem
in half as I did but go left, so
45:26 - to speak, and then not just open to the
middle of the left half of the book,
45:30 - but really just go back to
step three, repeat myself.
45:33 - Why?
45:33 - Because I can just repeat what I
just did, but with a smaller problem
45:37 - having taken this big bite.
45:39 - But, if the person
was later in the book,
45:41 - as might have happened with a
different person than John Harvard,
45:44 - then I should open to the middle
of the right half of the book,
45:47 - again go back to line
three, but again, I'm
45:49 - not going to get sucked doing
something forever like this
45:51 - because I keep shrinking
the size of the problem.
45:54 - Lastly, the only
possible scenario that's
45:56 - left, if John Harvard is not on
the page and he's not to the left
45:59 - and he's not to the right,
what should our conclusion be?
46:02 - AUDIENCE: He's not there.
46:03 - DAVID MALAN: He's not there.
46:04 - He's not listed.
46:05 - So we need to quit in some other form.
46:08 - Now as an aside, it's kind of deliberate
that I buried that last question
46:11 - at the end because this is what
happens all too often in programming,
46:16 - whether you're new at
it or professional,
46:17 - just not considering all possible
cases, corner cases if you will,
46:22 - that might not happen that often,
but if you don't anticipate them
46:25 - in your own code,
pseudocode or otherwise,
46:28 - this is when and why
programs might crash
46:31 - or you might say stupid little
spinning beach balls or hourglasses
46:34 - or your computer might reboot.
46:35 - Why?
46:35 - It's doing something
sort of unpredictable
46:38 - if a human, maybe myself,
didn't anticipate this.
46:42 - Like what does this program do if
John Harvard is not in the phone book
46:45 - if I had omitted lines 12 and 13?
46:48 - I don't know.
46:48 - Maybe it would behave
differently on a Mac or PC
46:50 - because it's sort of undefined behavior.
46:53 - These are the kinds of omissions
that frankly you're invariably
46:56 - going to make, bugs
you're going to introduce,
46:58 - mistakes you're going to make early
on, and me, too, 25 years later.
47:02 - But you'll get better at
thinking about those corner cases
47:06 - and handling anything that can
possibly go wrong and as a result,
47:09 - your code will be all the better for it.
47:11 - Now the problem ultimately
with learning how to program,
47:15 - especially if you've
never had experience
47:16 - or even if you do but you
learned one language only,
47:21 - is that they all look a little
cryptic at first glance.
47:25 - But they do share certain commonalities.
47:27 - In fact, we'll use this
pseudocode to define those first.
47:30 - Highlighted in yellow
here are what henceforth
47:32 - we're going to start calling functions.
47:34 - Lots of different programming
languages exist, but most of them
47:37 - have what we might call
functions, which are actions
47:40 - or verbs that solve
some smaller problem.
47:43 - That is to say, you might use
a whole bunch of functions
47:46 - to solve a bigger problem
because each function tends to do
47:50 - something very specific or precise.
47:52 - These then in English might be
translated in code, actual computer
47:57 - code, to these things called functions.
47:59 - Highlighted in yellow now are
what we might call conditionals.
48:02 - Conditionals are things
that you do conditionally
48:05 - based on the answer to some question.
48:07 - You can think of them kind
of like forks in the road.
48:09 - Do you go left or go right
or some other direction
48:12 - based on the answer to some question?
48:14 - Well, what are those questions?
48:16 - Highlighted now in yellow or what we
would call Boolean expressions, named
48:20 - after a mathematician last name Bool,
that simply have yes no answers.
48:25 - Or, if you prefer, true or false answers
or, heck, if you prefer 1 or 0 answers.
48:31 - We just need to distinguish
one scenario from another.
48:34 - The last thing manifests
in this pseudocode
48:37 - is what I might highlight
now and call loops.
48:39 - Some kind of cycle, some kind of
directive that tells us to do something
48:43 - again and again so that I don't
need a 1,000-line program to search
48:48 - a 1,000-page phone book, I can get
away with a 13-line program but sort
48:53 - of repeat myself inherently in order to
solve some problem until I get to that
48:58 - last step.
48:59 - So this then is what we
might call pseudocode
49:01 - and indeed there are
other characteristics
49:05 - of programs that we'll touch on before
long, things like arguments and return
49:08 - values, variables, and more, but
unfortunately in most languages,
49:13 - including some we will very
deliberately use in this class
49:16 - and that everyone in the real
world these days still uses,
49:19 - its programs tend to look like this.
49:22 - This for instance, is a distillation
of that very first program
49:24 - I wrote in 1996 in CS50 itself just
to print something on the screen.
49:29 - In fact, this version here just tries
to print quote unquote, "Hello, world."
49:34 - Which is, dare say, the most
canonical first thing that most
49:37 - any programmer ever gets a
computer to say just because,
49:41 - but look at this mess.
49:42 - I mean, there's a hash symbol,
these angled brackets, parentheses,
49:45 - words like int, curly braces, quotes,
parentheses, semicolons, and back
49:49 - slashes.
49:50 - I mean there's more overhead
and more syntax and clutter
49:54 - than there is an actual idea.
49:55 - Now that's not to say that you won't
be able to understand this before long,
50:00 - because honestly there's not that many
patterns, indeed programming languages
50:03 - have typically a much smaller vocabulary
than any actual human language,
50:07 - but at first it might
indeed look quite cryptic.
50:10 - But you can perhaps infer I have no
idea what these other lines do yet,
50:14 - but "Hello, world." is
presumably quote unquote what
50:18 - will be printed on the screen.
50:19 - But what we'll do today,
after a short break,
50:22 - and set the stage for
next week is introduce
50:24 - these exact same ideas in
just a bit using Scratch,
50:27 - something that you
yourselves might have used
50:29 - when you're quite younger but
without the same vocabulary applied
50:32 - to those ideas.
50:34 - The upside of what we'll soon do using
Scratch, this graphical programming
50:38 - language from our friends down the
road at MIT, it'll let us today
50:41 - start to drag and drop things that
look like puzzle pieces that interlock
50:46 - together if it makes
logical sense to do so,
50:48 - but without the distraction
of hashes, parentheses,
50:51 - curly braces, angle brackets,
semicolons, and things
50:54 - that are quite beside the point.
50:56 - But for now, let's go ahead
and take a 10 minute break here
50:58 - and when we resume, we
will start programming.
51:01 - So this on the screen
is a language called
51:04 - C something that will dive
into next week and thankfully
51:07 - this now on the screen is
another language called Python
51:10 - that we'll also take a look at
in a few weeks before long along
51:13 - with other languages along the way.
51:15 - Today though, and for this first
week, week zero, so to speak,
51:19 - we use Scratch because
again it will allow
51:21 - us to explore some of those
programming fundamentals
51:23 - that will be in C and in Python and in
JavaScript and other languages, too,
51:28 - but in a way where we don't have to
worry about the distractions of syntax.
51:32 - So the world of Scratch looks like this.
51:35 - It's a web-based or downloadable
programming environment
51:38 - that has this layout here
by default. On the left here
51:40 - we'll soon see is a palette of puzzle
pieces, programming blocks that
51:45 - represent all of those
ideas we just discussed.
51:47 - And by dragging and
dropping these puzzle pieces
51:50 - or blocks over this big area
and connecting them together,
51:54 - if it makes logical
sense to do so, we'll
51:56 - start programming in this environment.
51:58 - The environment allows you to have
multiple sprites, so to speak.
52:01 - Multiple characters, things
like a cat or anything
52:04 - else, and those sprites exist
in this rectangular world
52:08 - up here that you can full screen to
make bigger and this here by default
52:11 - is Scratch, who can move up, down, left,
right and do many more things, too.
52:16 - Within its Scratch's
world you can think of it
52:19 - as perhaps a familiar
coordinate system with Xs and Ys
52:23 - which is helpful only when it comes
time to position things on the screen.
52:27 - Right now Scratch is at the default,
0,0, where x equals 0 and y equals 0.
52:32 - If you were to move the cat way
up to the top, x would stay zero,
52:36 - y would be positive 180.
52:37 - If you move the cat all the way
to the bottom, x would stay zero,
52:40 - but y would now be negative 180.
52:42 - And if you went left, x would become
negative 240 but y would stay 0,
52:47 - or to the right x would be
240 and y would stay zero.
52:51 - So those numbers generally don't
so much matter because you can just
52:55 - move relatively in this
world up, down, left, right,
52:58 - but when it comes time
to precisely position
53:01 - some of these sprites
or other imagery, it'll
53:03 - be helpful just to have that mental
model off up, down, left, and right.
53:07 - Well let's go ahead and make perhaps
the simplest of programs here.
53:10 - I'm going to switch over to the
same programming environment
53:13 - now for a tour of the left hand side.
53:15 - So by default selected here are
the category in blue motion,
53:20 - which has a whole bunch of puzzle
pieces or blocks that relate to motion.
53:24 - And whereas Scratch as
a graphical language
53:27 - categorizes things by the type
of things that these pieces do,
53:30 - we'll see that throughout
this whole palette
53:32 - we'll have functions and
variables and conditionals
53:35 - and Boolean expressions and more
each in a different color and shape.
53:38 - So for instance, moving 10 steps
or turning one way or the other
53:42 - would be functions categorized
here as things like motion.
53:45 - Under looks in purple, you
might have speech bubbles
53:49 - that you can create by
dragging and dropping
53:51 - these that might say "hello" or
whatever for some number of seconds.
53:54 - Or you could switch costumes, change
the cat to look like a dog or a bird
53:58 - or anything else in between.
54:00 - Sounds, too.
54:01 - You can play sounds like "meow" or
anything you might import or record,
54:05 - yourself.
54:06 - Then there's these things Scratch calls
events and the most important of these
54:09 - is the first, when green flag clicked.
54:11 - Because if we look over to the
right of Scratch's world here,
54:14 - this rectangular region has
this green flag and red stop
54:17 - sign up above, one of which is
for Play one of which is for Stop
54:20 - and so that's going to allow us to
start and stop our actual programs
54:24 - when that green flag
is initially clicked.
54:27 - But you can listen for other types of
events when the spacebar is pressed
54:31 - or something else, when this sprite
is clicked or something else.
54:35 - Here you already see like a
programmer's incarnation of things
54:39 - you and I take for granted like
every day now on our phones.
54:42 - Any time you tap an icon or drag your
finger or hit a button on the side.
54:46 - These are what a programmer
would call events,
54:48 - things that happen and
are often triggered by us
54:51 - humans and things that a program
be it in Scratch or Python
54:55 - or C or anything else can
listen for and respond to.
54:59 - Indeed, that's why when you tap
the phone icon on your phone,
55:01 - the phone application
starts up because someone
55:04 - wrote software that's listening for a
finger press on that particular icon.
55:08 - So Scratch has these same things, too.
55:10 - Under Control in orange,
you can see that we
55:13 - can wait for one second
or repeat something
55:15 - some number of times,
10 by default, but we
55:17 - can change anything in these
white circles to anything else.
55:20 - There's another puzzle
piece here forever,
55:22 - which implies some kind of loop where
we can do something again and again.
55:25 - Even though it seems a
little tight, there's
55:27 - not much room to fit
something there, Scratch
55:29 - is going to have these
things grow and shrink
55:31 - however we want to fill
similarly shaped pieces.
55:33 - Here are those conditionals.
55:35 - If something is true or false,
then do this next thing.
55:40 - And that's how we can put in
this little trapezoid-like shape.
55:42 - Some form of Boolean expression, a
question with a yes/no, true/false,
55:46 - or one/zero answer and decide
whether to do something or not.
55:50 - You can combine these things, too.
55:52 - If something is true, do this,
else do this other thing.
55:55 - And you can even tuck
one inside of the other
55:57 - if you want to ask three
or four or more questions.
56:01 - Sensing, too, is going to be a thing.
56:03 - You can ask questions aka Boolean
expressions like is the sprite touching
56:07 - the mouse pointer, the
arrow on the screen?
56:10 - So that you can start to
interact with these programs.
56:12 - What is the distance between
a sprite and a mouse pointer?
56:15 - You can do simple calculations
just to figure out maybe
56:17 - if the enemy is getting
close to the cat.
56:20 - Under Operator some lower level
stuff like math, but also the ability
56:23 - to pick random numbers,
which for a game is great
56:25 - because then you can kind
of vary the difficulty
56:27 - or what's happening in a game
without the same game playing
56:30 - the same way every time.
56:31 - And you can combine ideas.
56:33 - Something and something must be true
in order to make that kind of decision
56:37 - before.
56:38 - Or we can even join two words together.
56:40 - Says apple and banana by default,
but you can type in or drag and drop
56:43 - whatever you want there to
combine multiple words into full,
56:46 - larger sentences.
56:48 - Then lastly down here, there's in
orange things called variables.
56:52 - In math we've obviously
got x and y and whatnot.
56:54 - In programming we'll
have the same ability
56:56 - to store in these named symbols,
x or y, values that we care about.
57:03 - Numbers or letters or words or
colors or anything, ultimately.
57:06 - But in programming you'll see that
it's much more conventional not to just
57:09 - use simple letters like x
and y and z, but to actually
57:13 - give variables full singular or plural
words to describe what they are.
57:20 - Then lastly, if this isn't
enough color blocks for you,
57:24 - you can create your own blocks.
57:25 - Indeed, this is going to be a
programming principle we'll apply today
57:29 - and with the first problem set whereby
once you start to assemble these puzzle
57:32 - pieces and you realize, oh, would have
been nice if those several pieces could
57:37 - have just been replaced by one
had MIT thought to give me that
57:40 - one puzzle piece, you yourself
can make your own blocks
57:44 - by connecting these all together,
giving them a name, and boom,
57:47 - a new puzzle piece will exist.
57:49 - So let's do the simplest,
most canonical programs
57:51 - here, starting up with
control, and I'm going
57:53 - to click and drag and drop this
thing here when green flag clicked.
57:57 - Then I'm going to grab one
more, for instance under Looks,
58:01 - and under Looks I'm going
to go ahead and just say
58:03 - something like initially not
just Hello but the more canonical
58:07 - Hello comma world.
58:09 - Now you might guess that in
this programming environment,
58:12 - I can go over here now and
click the green flag and voila,
58:15 - Hello comma world.
58:17 - So that's my first
program and obviously much
58:19 - more user friendly than typing out
the much more cryptic text that we
58:21 - saw on the screen that you,
too, will type out next week.
58:25 - But for now, we'll just focus on
these ideas, in this case, a function.
58:28 - So what it is that just happened?
58:29 - This purple block here is
Say, that's the function,
58:32 - and it seems to take some form of input
in the white oval, specifically Hello
58:37 - comma world.
58:37 - Well this actually fits
the paradigm that we looked
58:40 - at earlier of just inputs and outputs.
58:42 - So if I may, if you consider
what this puzzle piece is doing,
58:45 - it actually fits this model.
58:47 - The input in this case is going
to be Hello comma world in white.
58:51 - The algorithm is going to be implemented
as a function by MIT called Say
58:55 - and the output of that is going
to be some kind of side effect,
58:57 - like the cat and the speech
bubble are saying Hello, world.
59:01 - So already even that
simple drag and drop
59:03 - mimics exactly this relatively
simple mental model.
59:07 - So let's take things further.
59:08 - Let's go ahead now and make the
program a little more interactive so
59:11 - that it says something like
Hello, David, or Hello, Carter,
59:14 - or Hello to you specifically.
59:16 - And for this, I'm going
to go under Sensing.
59:18 - And you might have to poke around
to find these things the first time
59:21 - around, but I've done this a few times
so I kind of know where things are
59:24 - and what color.
59:25 - There's this function here.
59:26 - Ask what's your name,
but that's in white,
59:28 - so we can change the
question to anything
59:30 - we want, and it's going to wait for
the human to type in their answer.
59:34 - This function called Ask
is a little different
59:37 - from the Say block, which just had
this side effect of printing a speech
59:41 - bubble to the screen.
59:42 - The ask function is even more powerful
in that after it asks the human to type
59:47 - something in.
59:47 - This function is going
to hand you back what
59:50 - they typed in in the form of
what's called a return value, which
59:55 - is stored ultimately and by
default this thing called Answer.
59:57 - This little blue oval here
called Answer is again
60:00 - one of these variables
that in math would
60:02 - be called just x or y but in
programming we're saying what it does.
60:05 - So I'm going to go ahead and do this.
60:07 - Let me go ahead and
drag and drop this block
60:09 - and I want to ask the question
before saying anything,
60:11 - but you'll notice that
Scratch is smart and it's
60:13 - going to realize I want to
insert something in between
60:15 - and it's just going to
move things up and down.
60:17 - I'm going to let go and ask the
default question, what's your name?
60:20 - And now if I want to go ahead
and say hello, David or Carter,
60:23 - let's just do Hello
comma, because I obviously
60:26 - don't know when I'm writing the
program who's going to use it.
60:28 - So let me now grab another looks block
up here, say something again, and now
60:35 - let me go back to Sensing and now
grab the return value, represented
60:39 - by this other puzzle piece, and
let me just drag and drop it here.
60:42 - Notice it's the same shape, even
if it's not quite the same size.
60:45 - Things will grow or shrink as needed.
60:47 - All right, so let's now zoom out.
60:49 - Let me go and stop the old version
because I don't want to say Hello,
60:52 - world anymore.
60:53 - Let me hit the green
flag and what's my name?
60:55 - All right, David.
60:56 - Enter.
60:58 - Huh.
60:59 - All right, maybe I just wasn't
paying close enough attention.
61:01 - Let me try it again.
61:03 - Green flag, D-A-V-I-D, Enter.
61:06 - This seems like a bug.
61:09 - What's the bug or
mistake might you think?
61:13 - Yeah?
61:14 - AUDIENCE: Do you need to somehow add
them together in the same text box?
61:17 - DAVID MALAN: Yeah, we kind of want
to combine them in the same text box.
61:20 - And it's technically a bug because
this just looks kind of stupid.
61:23 - It's just saying David
after I asked for my name.
61:26 - I'd like it to say
maybe Hello then David,
61:29 - but it's just blowing past
the Hello and printing David.
61:32 - But let's put our finger
on why this is happening.
61:34 - You're right for the solution, but
what's the actual fundamental problem?
61:38 - In back.
61:39 - AUDIENCE: So it says hello,
but it gets to that last step
61:42 - so quickly you can't see it.
61:43 - DAVID MALAN: Perfect.
61:44 - I mean, computers are
really darn fast these days.
61:47 - It is saying Hello, all of us
are just too slow in this room
61:50 - to even see it because it's then saying
David on the screen so fast as well.
61:54 - So there's a couple of solutions
here, and yours is spot on,
61:57 - but just to poke around,
you'll see the first example
61:59 - of how many ways in programming be
it Scratch or C or Python or anything
62:03 - else, that there are going
to be to solve problems?
62:05 - We'll teach you over the
course of these weeks,
62:07 - sometimes some ways are
better relatively than others,
62:10 - but rarely is there a
best way necessarily,
62:13 - because again reasonable
people will disagree.
62:15 - And what we'll try to teach
you over the coming weeks
62:17 - is how to kind of think
through those nuances.
62:20 - And it's not going to be
obvious at first glance,
62:22 - but the more programs you
write, the more feedback
62:24 - you get, the more bugs
that you introduce,
62:26 - the more you'll get your footing with
exactly this kind of problem solving.
62:30 - So let me try this in a couple of ways.
62:33 - Up here would be one
solution to the problem.
62:35 - MIT anticipated this kind of issue,
especially with first-time programmers,
62:40 - and I could just use a
puzzle piece that says
62:42 - say the following for
two seconds or one second
62:44 - or whatever, then do the
same with the next word
62:47 - and it might be kind
of a bit of a pause,
62:50 - Hello, one second, two seconds, David,
one second, two seconds, but at least
62:54 - it would look a little
more grammatically correct.
62:56 - But I can do it a little more
elegantly, as you've proposed.
62:59 - Let me go ahead and throw
away one of these blocks,
63:01 - and you can just drag and let
go and it'll delete itself.
63:04 - Let me go down to Operators because
this Join block here is the right shape.
63:10 - So even if you're not sure what goes
where, just focus on the shapes first.
63:13 - Let me drag this over here.
63:15 - It grew to fill that.
63:17 - Let me go ahead and
say hello comma space.
63:20 - Now it could just say by
default Hello, banana,
63:22 - but let me go back to
Sensing, Drag answer,
63:27 - and that's going to drag and drop there.
63:29 - So now notice we're sort of stacking
or nesting one block on another
63:34 - so that the output of one becomes the
input to another, but that's OK here.
63:38 - Let me go ahead and zoom
out, hit Stop, and hit Play.
63:42 - All right, what's your name?
63:43 - D-A-V-I-D, Enter, and voila.
63:45 - Now it's presumably
as we first intended.
63:48 - [APPLAUSE]
63:49 - (LAUGHING) Oh, thank you.
63:55 - Thank you.
63:56 - No minus 2 this time.
63:57 - So consider that even with
this additional example,
64:02 - it still fits the same mental model,
but in a little more interesting way.
64:05 - Here's that new function
Ask something and wait.
64:08 - And notice that in this case too
there's an input, otherwise known
64:12 - henceforth as an argument
or a parameter, programming
64:15 - speak for just an input in
the context of a function.
64:18 - If we use our drawing as before
to represent this thing here,
64:21 - we'll see that the input now is going
to be quote unquote "What's your name?"
64:26 - The algorithm is going to be implemented
by way of this new puzzle piece,
64:30 - the function called Ask, and the
output of that thing this time
64:33 - is not going to be the
cat saying anything yet,
64:36 - but rather it's going
to be the actual answer.
64:39 - So instead of the visual side effect
of the speech bubble appearing,
64:43 - now nothing visible is happening yet.
64:45 - Thanks to this function it's sort of
handing me back like a scrap of paper
64:49 - with whatever I typed in written on it
so I can reuse D-A-V-I-D one or more
64:55 - times even like I did.
64:57 - Now what did I then do with that value?
65:00 - Well consider that with
the subsequent function
65:04 - we had this Say block,
too, combined with a join.
65:08 - So we have this variable
called Answer, we're joining it
65:11 - with that first argument, Hello.
65:14 - So already we see that
some functions like Join
65:16 - can take not one but two arguments,
or inputs, and that's fine.
65:20 - The output of Join is presumably going
to be Hello, David or Hello, Carter
65:24 - or whatever the human typed in.
65:27 - That output notice is essentially
becoming the input to another function,
65:31 - Say, just because we've
kind of stacked things
65:33 - or nested them on top of one another.
65:35 - But methodically, it's
really the same idea.
65:40 - The input now are two things,
Hello comma and the return value
65:44 - from the previous Ask function.
65:47 - The function now is going to be Join,
the output is going to be Hello, David.
65:51 - But that Hello, David
output is now going
65:53 - to become the input to another function,
namely that first block called Say,
65:57 - and that's then going to have the side
effect of printing out Hello, David
66:01 - on the screen.
66:02 - So again as sort of sophisticated
as ours as yours as others programs
66:06 - are going to get, they really do
fit this very simple mental model
66:09 - of inputs and outputs and you just have
to learn to recognize the vocabulary
66:12 - and to know what kinds of puzzle
pieces or concepts ultimately to apply.
66:17 - But you can ultimately really
kind of spice these things up.
66:19 - Let me go back to my
program here that just is
66:21 - using the speech bubble at the moment.
66:22 - Scratch's inside has some pretty
fancy interactive features, too.
66:26 - I click the Extensions button
in the bottom left corner.
66:28 - And let me go ahead and choose
the Text to Speech extension.
66:33 - This is using a Cloud service, so
if you have an internet connection
66:36 - it can actually talk to the
Cloud or a third party service,
66:39 - and this one is going to give me a
few new green puzzle pieces, namely
66:42 - the ability to speak
something from my speakers
66:45 - instead of just saying it textually.
66:47 - So let me go ahead and drag this.
66:48 - Now notice I don't have to interlock
them if I'm just kind of playing around
66:51 - and I want to move some things around.
66:52 - I just want to use this as
like a canvas temporarily.
66:55 - Let me go ahead and
steal the Join from here,
66:58 - put it there, let me throw away
the Say block by just moving it
67:01 - left and letting go, and
now let me join this in
67:04 - so I've now changed my program
to be a little more interesting.
67:08 - So now let me stop the old version.
67:10 - Let me start the new.
67:11 - What's your name?
67:12 - Type in David.
67:13 - And voila:
67:14 - PROGRAM: Hello, banana.
67:18 - DAVID MALAN: (LAUGHING)
OK, minus 2 for real.
67:20 - All right, so what I accidentally
threw away there, intentionally
67:27 - for instructional purposes,
was the actual answer
67:30 - that came back from the ask block.
67:32 - That's embarrassing.
67:33 - So now if I play this again,
let's click the green icon.
67:37 - What's your name?
67:38 - David.
67:38 - And now:
67:40 - PROGRAM: Hello, David.
67:41 - DAVID MALAN: There we go.
67:42 - Hello, David.
67:43 - All right, thank you.
67:45 - [APPLAUSE]
67:50 - OK, so we have these functions then
in place, but what more can we do?
67:54 - Well what about those conditionals
and loops and other constructs?
67:57 - How can we bring these programs
to life so it's not just
67:59 - clicking a button and voila,
something's happening?
68:01 - Let's go ahead and make this
now even more interactive.
68:04 - Let me go ahead and throw
away most of these pieces
68:06 - and let me just spice things up
with some more audio under Sound.
68:09 - I'm going to go to Play
Sound Meow until done.
68:12 - Here we go, green flag.
68:13 - [MEOW]
68:15 - OK, it's a little loud, but it
did exactly do what it said.
68:18 - Let's hear it again.
68:19 - [QUIETER MEOW]
68:21 - OK.
68:21 - It's kind of an underwhelming
program eventually
68:23 - since you'd like to think that the
cat would just meow on its own, but.
68:26 - [MEOW]
68:26 - I have to keep hitting the button.
68:28 - Well this seems like an opportunity
for doing something again and again.
68:31 - So all right, well if I
wanted to meow, meow, meow,
68:33 - let me just grab a few of these, or you
can even right click or Control click
68:37 - and you can Copy Paste
even in code here.
68:39 - Let me play this now.
68:41 - [THREE MEOWS]
68:43 - All right, so now like
it's not really emoting
68:45 - happiness in quite the same way.
68:46 - It might be hungry or upset.
68:47 - So let's slow it down.
68:49 - Let me go to Control, wait
one second in between,
68:52 - which might be a little less worrisome.
68:55 - Here we go, Play.
68:56 - [THREE SLOWER MEOWS]
69:01 - OK, so if my goal was to make
the cat meow three times,
69:06 - I dare say this code or
algorithm is correct.
69:10 - But let's now critique its design.
69:12 - Is this well-designed?
69:14 - And if not, why not?
69:17 - What are your thoughts here?
69:19 - Yeah?
69:21 - AUDIENCE: You could use the forever
or a repeat to make it more--
69:27 - DAVID MALAN: Yeah, so yeah, agreed.
69:28 - I could use forever or repeat,
but let me push a little harder.
69:31 - But why?
69:31 - Like this works, I'm kind of done with
the assignments, what's bad about it?
69:36 - AUDIENCE: There's too much repetition.
69:37 - DAVID MALAN: Yeah, there's
too much repetition, right?
69:40 - If I wanted to change the
sound that the cat is making
69:42 - to a different variant of meow or
have it bark instead like a dog,
69:46 - I could change it from the
dropdown here apparently,
69:48 - but then I'd have to change it here
and then I'd have to change it here,
69:51 - and God, if this were even longer
that just gets tedious quickly
69:54 - and you're probably
increasing the probability
69:56 - that you're going to
screw up and you're going
69:57 - to miss one of the dropdowns or
something stupid and introduce a bug.
70:00 - Or, if you wanted to change the
number of seconds you're waiting,
70:02 - you've got to change it in
two, maybe even more places.
70:05 - Again, you're just
creating risk for yourself
70:07 - and potential bugs in the program.
70:09 - So I do like the repeat or the forever
idea so that I don't repeat myself.
70:13 - And indeed, what I
alluded to being possible,
70:15 - copy pasting earlier, doesn't
mean it's a good thing.
70:18 - And in code, generally
speaking, when you
70:20 - start to copy and paste puzzle
pieces or text next week,
70:23 - you're probably not doing
something quite well.
70:26 - So let me go ahead and throw away most
of these to get rid of the duplication,
70:30 - keeping just two of the
blocks that I care about.
70:33 - Let me grab the Repeat block for now,
let me move this inside of the Repeat
70:37 - block, it's going to grow to fit
it, let me reconnect all this
70:40 - and change the 10 just
to a 3, and now, Play.
70:44 - [THREE SLOW MEOWS]
70:49 - So, better.
70:50 - It's the same thing.
70:51 - It's still correct, but
now I've set the stage
70:53 - to let the cat meow, for instance,
four times by changing one thing,
70:57 - 40 times by changing one thing, or
it could just use the Forever block
71:00 - and just walk away and it
will meow forever instead.
71:03 - If that's your goal,
that would be better.
71:05 - A better design but still correct.
71:07 - But you know what?
71:08 - Now that I have a
program that's designed
71:10 - to have a cat meow, wow like why?
71:13 - I mean, MIT invented
Scratch, Scratch as a cat,
71:16 - why is there no puzzle
piece called Meow?
71:18 - This feels like a missed opportunity.
71:20 - Now to be fair, they gave
us all the building blocks
71:22 - with which we could implement that
idea, but a principle of programming
71:26 - and really computer science
is to leverage what we're
71:28 - going to now start calling Abstraction.
71:30 - We have step-by-step instructions
here, the Repeat, the Play,
71:34 - and the Wait that collectively
implements this idea
71:37 - that we humans would call meowing.
71:38 - Wouldn't it be nice to abstract
away those several puzzle
71:41 - pieces into just one that literally
just says what it does, meow?
71:45 - Well here's where we
can make our own blocks.
71:48 - Let me go over here to Scratch
under the pink block category
71:52 - here and let me click Make a Block.
71:55 - Here I see a slightly
different interface
71:57 - where I can choose a name for it
and I'm going to call it Meow.
72:00 - I'm going to keep it simple.
72:01 - That's it.
72:01 - No inputs to meow yet.
72:03 - I'm just going to click OK.
72:05 - Now I'm just going to
clean this up a bit here.
72:08 - Let me drag and drop Play
Sound and Wait over here.
72:12 - And you know what?
72:13 - I'm just going to drag this
way down here, way down
72:15 - here because now that I'm
done implementing Meow,
72:18 - I'm going to literally abstract
it away, sort of out of sight,
72:21 - out of mind, because now notice at
top left there is a new pink puzzle
72:25 - piece called Meow.
72:26 - So at this point, I'd argue it doesn't
really matter how Meow is implemented.
72:31 - Frankly, I don't know how Ask
or Say was implemented by MIT.
72:35 - They abstracted those
things away for us.
72:37 - Now I have a brand new puzzle
piece that just says what it is.
72:40 - And this is now still correct,
but arguably better design.
72:44 - Why?
72:45 - Because it's just more
readable to me, to you,
72:47 - it's more maintainable
when you look at your code
72:49 - a year from now for the first time
because you're sort of finally looking
72:52 - back at the very first
program you wrote.
72:53 - It says what it does.
72:55 - The function itself has semantics,
which conveys what's going on.
72:59 - If you really care about
how Meow is implemented,
73:01 - you could scroll down and start
to tinker with the underlying
73:04 - implementation details, but otherwise
you don't need to care anymore.
73:09 - Now I feel like there's an
even additional opportunity
73:13 - here for abstraction and to factor
out some of this functionality.
73:17 - It's kind of lame that I
have this Repeat block that
73:21 - lets me call the Meow function,
so to speak, use the Meow function
73:24 - three times.
73:25 - Wouldn't it be nice if I could
just call them Meow function,
73:28 - aka use the Meow function, and pass
it in input that tells the puzzle
73:32 - piece how many times I want it to meow?
73:35 - Well let me go ahead and
zoom out and scroll down.
73:37 - Let me right click or Control click on
the pink piece here and choose Edit,
73:41 - or I could just start from scratch,
no pun intended, with a new one.
73:44 - Now here, rather than just give this
thing a name Meow, let me go ahead
73:48 - and add an input here.
73:50 - I'm going to go ahead and
type in, for instance, n,
73:53 - for number of times to
meow, and just to make
73:56 - this even more user friendly
and self descriptive,
73:58 - I'm going to add a label,
which has no functional impact,
74:00 - it's just an aesthetic,
and I'm just going
74:03 - to say Times, just to make
it read more like English
74:05 - in this case that tells me
what the puzzle piece does.
74:08 - Now I'm going to click OK.
74:09 - And now I need to refine
this a little bit.
74:12 - Let me go ahead and grab
under Control a repeat block,
74:18 - let me move the Play, Sound,
and Wait, into the repeat block.
74:22 - I don't want 10 and I
also don't want 3 here.
74:24 - What I want now is this n that is
my actual variable that Scratch
74:29 - is creating for me that represents
whatever input the human programmer
74:33 - provides.
74:34 - Notice that snaps right in place.
74:35 - Let me connect this and now voila, I
have an even fancier version of Meow
74:39 - that is parameterized.
74:40 - It takes input that affects
its behavior accordingly.
74:44 - Now I'm going to scroll back up,
because out of sight, out of mind,
74:47 - I just care that Meow exists.
74:49 - Now I can tighten up my code, so
to speak, use even fewer lines
74:52 - to do the same thing by
throwing away the Repeat block,
74:55 - reconnecting this new puzzle piece here
that takes an input like 3 and voila,
75:00 - now we're really programming, right?
75:02 - We've not made any forward
progress functionally.
75:04 - The thing just mouse three times.
75:06 - But it's a better design.
75:09 - As you program more and
more, these are the kinds
75:11 - of instincts still start
to acquire so that one,
75:13 - you can start to take a big assignment,
a big problem set, something
75:16 - for homework even, that feels kind of
overwhelming at first, like, oh my God
75:20 - where do I even begin?
75:21 - But if you start to identify what are
the subproblems of a bigger problem?
75:25 - Then you can start making progress.
75:27 - I do this to this day where if I have to
tackle some programming-related project
75:32 - it's so easy to drag my feet and ugh,
it's going to take forever to start,
75:36 - until I just start writing
down like a to do list
75:38 - and I start to modularize the
program and say, all right, well
75:41 - what do I want this thing to do?
75:42 - Meowing.
75:43 - What's that mean?
75:43 - I've got to have it say
something on the screen.
75:45 - All right, I need to have it
say something on the screen
75:48 - some number of times.
75:49 - Like literally a mental or written
checklist, or pseudocode code,
75:52 - if you will, in English on a
piece of paper or text file,
75:55 - and then you can decide,
OK, the first thing I
75:57 - need to do for homework to
solve this real world problem,
76:00 - I just need a Meow function.
76:02 - I need to use a bunch
of other code, too,
76:04 - but I need to create a
Meow function and boom,
76:06 - now you have a piece of the problem
solved not unlike we did with the phone
76:10 - book there, but in this case, we'll
have presumably other problems to solve.
76:14 - All right, so what more can we do?
76:16 - Let's add a few more
pieces to the puzzle here.
76:18 - Let's actually interact
with the cat now.
76:20 - Let me go ahead and now when the
green flag is clicked, let me go ahead
76:24 - and ask a question using an event here.
76:26 - Let me go ahead and
say, let's see, I want
76:31 - to do something like implement
the notion of petting the cat.
76:34 - So if the cursor is touching the
cat like here, something like this,
76:39 - it'd be cute if the cat meows
like you're petting a cat.
76:42 - So I'm going to ask the question,
when the green flag is clicked,
76:45 - if let's see I think I need Sensing.
76:48 - So if touching mouse
pointer, this is way too big
76:50 - but again the shape is
fine, so there goes.
76:52 - Grew to fill.
76:53 - And then if it's touching
the mouse pointer,
76:56 - that is if the cat to whom
this script or this program,
76:59 - any time I attach puzzle
pieces MIT calls them a script
77:03 - or like a program, if you will, let
me go ahead then and choose a sound
77:07 - and say play sound meow until done.
77:10 - All right, so here it is to be clear.
77:11 - When the green flag is
clicked, ask the question,
77:13 - if the cat is touching the mouse
pointer then place sound meow.
77:18 - Here we go.
77:18 - Play.
77:20 - [SILENCE]
77:23 - All right, let's try again.
77:25 - Play.
77:26 - [SILENCE]
77:28 - Huh.
77:29 - I'm worried it's not Scratch's
fault. Feels like mine.
77:34 - What's the bug here?
77:37 - Why doesn't this work?
77:39 - Yeah, in back, who just turned.
77:42 - AUDIENCE: [INAUDIBLE]
77:47 - DAVID MALAN: Yeah, the problem is
the moment I click that green flag,
77:50 - Scratch asks the question, is the
cat touching the mouse pointer?
77:54 - And obviously it's not because the
cursor was like up there a moment ago
77:57 - and it's not down there.
77:58 - It's fine if I move the cursor
down there, but too late.
78:01 - The program already asked the question.
78:03 - The answer was no or false or zero,
however you want to think about it,
78:06 - so no sound was played.
78:08 - So what might be the solution here be?
78:10 - I could move my cursor
quickly, but that feels
78:12 - like never going to work out right.
78:14 - Other solutions here?
78:16 - Yeah, in way back?
78:18 - Could you use the forever loop?
78:20 - The Forever loop.
78:21 - So I could indeed use this Forever
loop because if I want my program
78:24 - to just constantly listen to me, well
let's literally do something forever,
78:28 - or at least forever as
long as the program is
78:30 - running until I explicitly hit Stop.
78:32 - So let me grab that.
78:33 - Let me go to Control, let
me grab the Forever block,
78:36 - let me move the If inside of this
Forever block, reconnect this,
78:40 - go back up here, click the green
flag, and now nothing's happened yet,
78:43 - but let me try moving my cursor now.
78:45 - [MEOW]
78:47 - Oh.
78:47 - So now.
78:48 - [MEOW]
78:49 - That's kind of cute.
78:50 - So now the cat is actually
responding and it's
78:52 - going to keep doing
this again and again.
78:54 - So now we have this idea of taking these
different ideas, these different puzzle
78:58 - pieces, assembling them into
something more complicated.
79:01 - I could definitely put a name to this.
79:03 - I could create a custom
block, but for now
79:05 - let's just consider what kind
of more interactivity we can do.
79:08 - Let me go ahead and do this.
79:09 - By again grabbing a,
when green flag clicked,
79:12 - let me go ahead and
click the video sensing,
79:16 - and I'm going to rotate the
laptop because otherwise we're
79:18 - going to get a little inception thing
here where the camera is picking up
79:21 - the camera is up there.
79:22 - So I'm going to go reveal to
you what's inside the lectern
79:25 - here while we rotate this.
79:29 - Now that we have a non video
backdrop, I'm going to say this.
79:34 - Instead of the green flag
clicked, actually, I'm
79:37 - going to say when the video motion
is greater than some arbitrary
79:40 - measurement of motion, I'm going to go
ahead and play sound meow until done.
79:47 - And then I'm going to
get out of the way.
79:48 - So here's the cat.
79:50 - We'll put them on top of there.
79:53 - [MEOW]
79:54 - OK.
79:55 - All right, and here we go.
79:57 - [MEOW]
80:00 - So my hand is moving faster
than 50 something or other,
80:03 - whatever the unit of measure is.
80:05 - [MEOW]
80:06 - AUDIENCE: Aw.
80:06 - DAVID MALAN: (LAUGHING) Thank you.
80:08 - So now we have an even
more interactive version.
80:10 - [MEOW]
80:12 - But I think if I sort of slowly.
80:15 - [LAUGHING]
80:17 - (LAUGHING) Right?
80:18 - It's completely creepy, but I'm
not like exceeding the threshold--
80:23 - [MEOW]
80:24 - Until finally my hand
moves as fast as that.
80:27 - And so here actually is
an opportunity to show you
80:29 - something a former student did.
80:31 - Let me go ahead here and--
80:32 - [MEOW TWICE]
80:33 - OK, got to stop this.
80:35 - Let me go ahead and zoom out
of this in just a moment.
80:38 - [MEOW]
80:38 - If someone would be--
80:39 - [LAUGHING]
80:40 - (LAUGHING) If someone
would be comfortable
80:42 - coming up not only masked but
also on camera on the internet
80:44 - I thought we'd play one of your former
classmate's projects here up on stage.
80:48 - Would anyone like to volunteer
here and be up on stage?
80:51 - Who's that?
80:51 - Yeah.
80:52 - Come on down.
80:52 - What's your name?
80:53 - AUDIENCE: Sahar.
80:54 - DAVID MALAN: Sahar.
80:55 - All right, come on down.
80:57 - Let me get it set up for you here.
80:58 - [MEOW]
80:59 - [APPLAUSE]
81:05 - [MEOW]
81:10 - All right, let me go ahead
and full screen this here.
81:13 - So this is whack-a-mole by one
of your firmer predecessors.
81:17 - It's going to use the camera focusing
on your head, which will have
81:20 - to position inside of this rectangle.
81:22 - Have you ever played the
whack-a-mole game at an arcade?
81:24 - AUDIENCE: Yeah.
81:25 - DAVID MALAN: OK.
81:25 - So for those who haven't,
these little moles pop up
81:27 - and with a very fuzzy
hammer you sort of hit down.
81:29 - You though, if you
don't mind, you're going
81:31 - to use your head to do this virtually.
81:34 - So let's line up your head with
this red rectangle, if you could,
81:39 - we'll do beginner.
81:40 - [MUSIC PLAYING]
81:41 - All right, here we go.
81:42 - Sahar.
81:44 - Give it a moment.
81:45 - OK, come a little closer.
81:47 - [DINGING]
81:48 - And now hit the moles with your head.
81:50 - [DING]
81:51 - There we go, one point.
81:53 - [DING]
81:53 - One point.
81:56 - [DINGING]
81:58 - Nice.
82:00 - 15 seconds to go.
82:01 - There we go.
82:01 - Oh yeah.
82:02 - One point.
82:04 - [LAUGHING]
82:06 - [DINGING]
82:07 - Six seconds.
82:09 - AUDIENCE: Oh no.
82:10 - DAVID MALAN: There we go.
82:11 - Quick!
82:12 - [DINGING]
82:14 - All right, a round of
applause for Sahar.
82:16 - Thank you.
82:18 - [APPLAUSE]
82:24 - So beyond having a
little bit of fun here,
82:26 - the goal was to
demonstrate that by using
82:28 - some fairly simple, primitive,
some basic building blocks
82:31 - but assembling them in a fun
way with some music, maybe
82:34 - some new costumes or artwork, you
can really bring programs to life.
82:37 - But at the end of the day, the
only puzzle pieces really involved
82:40 - were ones like the ones I just
dragged and dropped and a few more,
82:43 - because there were
clearly lots of moles.
82:45 - So the student probably created a few
different sprites, not a single cap,
82:49 - but at least four different moles.
82:50 - They had like some kind of graphic
on the screen that showed Sahar
82:53 - where to position her head.
82:54 - There were some kind of
timer, maybe a variable
82:57 - that every second was counting down.
82:59 - So you can imagine taking what looks
like a pretty impressive project
83:02 - at first glance, and
perhaps overwhelming
83:04 - to solve yourself, but just think about
what are the basic building blocks?
83:07 - And pluck off one piece of the
puzzle, so to speak, at a time.
83:12 - So indeed if we rewind a little bit.
83:15 - Let me go ahead here
and introduce a program
83:17 - that I myself made
back in graduate school
83:20 - when Scratch was first
being developed by MIT.
83:23 - Let me go ahead and open
here, give me just one second,
83:26 - something that I called back
in the day Oscar Time that
83:30 - looks a little something like this.
83:32 - If I fullscreen it and hit Play.
83:34 - [MUSIC - SESAME STREET, "I LOVE TRASH"]
83:38 - OSCAR THE GROUCH:
(SINGING) Oh, I love trash.
83:40 - DAVID MALAN: So you'll notice
a piece of trash is falling.
83:42 - I can click on it and drag and as I get
close and close to the trash can notice
83:45 - OSCAR THE GROUCH: (SINGING)
Anything ragged or--
83:47 - DAVID MALAN: It wants
to go in, it seems.
83:49 - And if I let go--
83:50 - OSCAR THE GROUCH: (SINGING) Yes, I--
83:52 - DAVID MALAN: One point.
83:54 - Here comes another.
83:54 - OSCAR THE GROUCH: (SINGING) If you
really want to see something trashy--
83:56 - DAVID MALAN: I'll do
the same, two points.
83:57 - OSCAR THE GROUCH: (SINGING) I have here
a sneaker that's tattered and worn--
84:00 - DAVID MALAN: There's a
sneaker falling from the sky,
84:01 - so another sprite of some sort.
84:03 - OSCAR THE GROUCH: (SINGING)
The laces are torn.
84:05 - A gift from my mother--
84:07 - DAVID MALAN: I can also
get just a little lazy
84:09 - and just let them fall into the
trash themself if I want to.
84:13 - So you can see it doesn't have
to do with my mouse cursor,
84:15 - it has to do apparently
with the distance here.
84:18 - Let's listen a little further.
84:19 - I think some additional trash
is about to make its appearance.
84:23 - Presumably there's some kind of variable
that's keeping track of this score.
84:26 - OSCAR THE GROUCH: (SINGING) I love--
84:28 - DAVID MALAN: OK, let's see
what the last chorus here is.
84:30 - OSCAR THE GROUCH:
(SINGING) Rotten stuff.
84:32 - I have here some newspaper, crusty and
84:35 - DAVID MALAN: OK, and thus he continues.
84:37 - And the song actually
goes on and on and on
84:40 - and I do not have fond memories
of implementing this and hearing
84:43 - this song for like 10
straight hours, but it's
84:46 - a good example to just consider
how was this program composed?
84:50 - How did I go about implementing
it the first time around?
84:52 - And let me go ahead and
open up some programs now
84:54 - that I wrote in advance
just so that we could
84:56 - see how these things are assembled.
84:58 - Honestly, the first thing
I probably did was probably
85:02 - to do something a little like this.
85:04 - Here is just a version
of the program where
85:07 - I set out to solve
just one problem first
85:09 - of planting a lamp post in the program.
85:12 - Right?
85:12 - I kind of had a vision of what I wanted.
85:14 - You know, it evolved
over time, certainly,
85:15 - but I knew I wanted
trash to fall, I wanted
85:17 - a cute little Oscar
the Grouch to pop out
85:19 - of the trashcan, and some other
stuff, but wow that's a lot
85:22 - to just tackle all at once.
85:23 - I'm going to start easy, download
a picture of a lamp post,
85:26 - and then drag and drop it into the
stage as a costume and boom, that's
85:30 - version one.
85:31 - It doesn't functionally do anything.
85:33 - I mean, literally that's the
code that I wrote to do this.
85:36 - All I did was use like
the Backdrops feature
85:38 - and drag and drop and
move things around,
85:41 - but it got me to version
one of my program.
85:44 - Then what might version two be?
85:46 - Well I considered what
piece of functionality
85:48 - frankly might be the easiest to
pluck off next and the trash can.
85:52 - That seems like a pretty
core piece of functionality.
85:54 - It just needs to sit
there most of the time.
85:56 - So the next thing I
probably did was to open up,
85:59 - for instance, the trash can version
here that looks a little something now
86:05 - like this.
86:06 - So this time I'll show
you what's inside here.
86:08 - There is some code, but not much.
86:10 - Notice at bottom right I change the
default cat to a picture of a trashcan,
86:14 - instead, but it's the same
principle that I can control.
86:17 - And then over here I added this code.
86:20 - When the green flag is
clicked, switch the costume
86:23 - to something I arbitrarily
called Oscar 1.
86:25 - So I found a couple
of different pictures
86:26 - of a trash can, one that looks
closed, one that looks partly open,
86:29 - and eventually one that
has Oscar coming out,
86:32 - and I just gave them different names.
86:33 - So I said Switch to Oscar 1, which
is the closed one by default,
86:36 - then forever do the following:
if touching the mouse pointer,
86:40 - then switch the costume to
Oscar 2, else switch to Oscar 1.
86:45 - That is to say, I just wanted to
implement this idea of the can opening
86:49 - and closing, even if it's not
exactly what I wanted ultimately,
86:52 - I just wanted to make
some forward progress.
86:54 - So here, when I run this program by
clicking Play, notice what happens.
86:59 - Nothing yet, but if I get
closer to the trash can,
87:03 - it indeed pops open because
it's forever listening
87:07 - for whether the sprite,
the trash can in this case,
87:10 - is touching the mouse pointer.
87:11 - And that's it.
87:12 - That was version 2, if you will.
87:15 - If I went in now and added the lamp
post and compose the program together,
87:18 - now we're starting to make progress.
87:20 - Right?
87:20 - Now it would look a little
something more like the program
87:22 - I intended ultimately to create.
87:25 - What piece did I probably
bite off after that?
87:27 - Well, I think what I did
is I probably decided
87:30 - let me implement one of the pieces of
trash, not the shoe in the newspaper
87:33 - all at once.
87:34 - Let's just get one piece of
trash working correctly first.
87:37 - So let me go ahead and open this one.
87:40 - And again, all of these examples will
be available on the course's website
87:43 - so you can see all of
these examples, too.
87:46 - It's not terribly long, I
just implement it in advance
87:48 - so we could flip
through kind of quickly.
87:50 - Here's what I did here.
87:52 - On the right hand side, I turned
my sprite into a piece of trash
87:56 - this time instead of a cat,
instead of a trash can,
87:58 - and I also created, with Carter's help,
a second sprite, this one a floor.
88:04 - It's literally just a black line
because I just wanted initially
88:07 - to have some notion of a
floor so I could detect
88:09 - if the trash is touching the floor.
88:12 - Now without seeing the code yet,
just hearing that description,
88:15 - why might I have wanted the second
sprite and this black line for a floor
88:20 - with the trash intending
to fall from the sky?
88:22 - What might I have been thinking?
88:24 - Like what problem might
I be trying to solve?
88:26 - Yeah?
88:26 - AUDIENCE: You don't want the
first sprite to go through it.
88:28 - DAVID MALAN: Yeah, you don't want
the first sprite to start at the top,
88:31 - go through, and then boom,
you completely lose it.
88:34 - That would not be a very useful thing.
88:36 - Or it would seem to maybe eat up more
and more of the computer's memory
88:39 - if the trash is just endlessly
falling and I can't grab it.
88:42 - It might be a little traumatic
if you tried to get it
88:44 - and you can't pull it back out
and you can't fix the program.
88:46 - So I just wanted the thing to stop.
88:48 - So how might I have implemented this?
88:50 - Let's look at the code at left.
88:51 - Here I have a bit of randomness,
like I proposed earlier exists.
88:56 - There's this blue
function called Go To x,
88:59 - y that lets me move a
sprite to any position,
89:03 - up, down, left, right, I picked a random
x location, either here or over here,
89:07 - negative 240 to positive 240, and then
a y value of 180, which is the top.
89:12 - This just makes the
game more interesting.
89:14 - It's kind of lame pretty quickly if the
trash always falls from the same spot.
89:18 - Here's this a little bit of randomness,
like most any game would have,
89:21 - that spices things up.
89:23 - So now if I click the green flag,
you'll see that it just falls,
89:26 - nothing interesting is
going to happen, but it
89:28 - does stop when it touches the black
line because notice what we did here.
89:33 - I'm forever asking the question if
the distance of the sprite, the trash,
89:37 - is to the floor is greater
than zero, that's fine.
89:41 - Change the y location by negative 3.
89:44 - So move it down 3 pixels, down 3
pixels, until the distance to the floor
89:48 - is not greater than zero, it is zero
or even negative, at which point
89:52 - it should just stop moving altogether.
89:54 - There's other ways we could
have implemented this,
89:56 - but this felt like a nice,
clean way that logically, just
89:58 - made it make sense.
89:59 - OK, now I got some trash falling, I
got a trash can that opens and closes,
90:03 - I have a lamp post, now I'm a
good three steps into the program.
90:08 - We're making progress.
90:09 - If we consider one or two
final pieces, something
90:12 - like the dragging of the trash, let me
go ahead and open up this version 2.
90:17 - Dragging the trash requires
a different type of question.
90:21 - Let me zoom in here.
90:22 - Here's the piece of trash.
90:24 - I only need one sprite, no
floor here because I just
90:26 - want the human to move it up,
down, left, right and the human's
90:29 - not going to physically be able
to move it outside of the world.
90:32 - If we zoom in on this code, the way
we've solved this is as follows.
90:36 - We're using that And conjunction
that we glimpsed earlier because when
90:40 - the green flag is clicked, we're
forever asking this question or really
90:44 - these questions, plural,
if the mouse is down
90:47 - and the trash is touching the
mouse pointer, that's equivalent
90:53 - logically to clicking on the trash.
90:55 - Go ahead and move the
trash to the mouse pointer.
90:58 - So again it takes this
very familiar idea
91:00 - that you and I take for granted
every day on Macs and PCs of clicking
91:04 - and dragging and dropping.
91:05 - How is that implemented?
91:06 - Well Mac OS or Windows are
probably asking a question.
91:10 - For every icon, is the mouse down
and is the icon touching the mouse?
91:15 - If so, go to the location
of the mouse forever
91:19 - while the mouse button is clicked down.
91:21 - So how does this work in reality now?
91:23 - Let me go ahead and click on the Play.
91:25 - Nothing happens at first, but if
I click on it, I can move it up,
91:30 - down, left, right.
91:31 - It doesn't move thereafter.
91:33 - So I now need to kind of combine
this idea of dragging with falling,
91:36 - but I bet I could just start
to use just one single program.
91:39 - Right now I'm using separate
ones to show different ideas,
91:42 - but now that's another
bite out of the problem.
91:45 - If we do one last one,
something like the scorekeeping
91:48 - is interesting, because recall that
every time we dragged a piece of trash
91:51 - into the can, Oscar popped out
and told us the current score.
91:54 - So let me go ahead and find
this one, Oscar variables,
91:59 - and let me zoom in on this one.
92:01 - This one is longer because we
combined all of these elements.
92:04 - So this is the kind of thing that
if you looked at first glance, like,
92:07 - I have no idea how I would
have implemented this
92:09 - from nothing, from scratch literally.
92:12 - But again, if you take your
vision and componenitize it
92:16 - into these smaller,
bite-sized problems, you
92:18 - could take these baby
steps, so to speak, and then
92:21 - solve everything collectively.
92:22 - So what's new here is this bottom one.
92:25 - Forever do the following:
if the trash is touching
92:30 - Oscar, the other sprite that
we've now added to the program,
92:33 - change the score by 1.
92:35 - This is an orange and
indeed if we poke around
92:37 - we'll see that orange is a variable,
like an x or y but with a better name,
92:42 - changing it means to add 1 or
if it's negative subtract 1.
92:46 - Then go ahead and have the
trash go to pick random.
92:51 - What is this all about?
92:53 - Well, let me show you what it's doing
and then we can infer backwards.
92:56 - Let me go ahead and hit Play.
92:58 - All right, it's falling, I'm clicking
and dragging it, I'm moving it over,
93:01 - and I'm letting go.
93:02 - All right, let me do it once more.
93:04 - Letting go, let me stop.
93:06 - Why do I have this function at the
end called Go To x and y randomly?
93:13 - Like what problem is this solving here?
93:16 - Yeah, in way back.
93:18 - AUDIENCE: Just the same
track teleported to the top
93:21 - after you put it in the trash can.
93:23 - DAVID MALAN: Yeah, exactly.
93:24 - Even though the human perceives
this as like a lot of trash falling
93:27 - from the sky, it's
actually the same piece
93:29 - of trash, just kind of being
magically moved back to the top
93:32 - as though it's a new one.
93:33 - There, too, you have this
idea of reusable code.
93:36 - If you were constantly copying
and pasting your pieces of trash
93:40 - and creating 20 pieces of trash, 30
pieces of trash, just because you
93:43 - want the game to have that many
levels, probably doing something wrong.
93:46 - Reuse the code that you wrote,
reuse the sprites that you wrote,
93:49 - and that would give you not just
correctness, but also a better design.
93:54 - Well let's take a look at one
final set of building blocks
93:57 - that we can compose
ultimately into something
93:59 - particularly interactive as follows.
94:02 - Let me go ahead and
zoom out here and let
94:03 - me propose that we implement something
like some kind of maze-based game.
94:08 - Let me go ahead here.
94:09 - So I want to implement
some maze-based game that
94:13 - looks at first glance like this.
94:15 - Let me hit Play.
94:15 - It's not a very fun game yet,
but here's a little Harvard
94:18 - shield, a couple of black lines, this
time vertical instead of horizontal,
94:22 - but notice you can't
quite see my hand here,
94:24 - but I'm using my arrow keys to go down,
to go up, to go left, to go right,
94:28 - but if I keep going right, right,
right, right, right, right,
94:31 - right it's not going anywhere.
94:32 - And left, left, left, left, left, left,
left, left, left, left, left, left,
94:35 - left it eventually stops.
94:36 - So before we look at the code,
how might this be working?
94:41 - What kinds of scripts,
collections of puzzle pieces,
94:44 - might collectively
help us implement this?
94:47 - What do you think?
94:48 - AUDIENCE: [INAUDIBLE]
94:56 - DAVID MALAN: Perfect, yeah.
94:57 - There's probably some question being
asked, if touching the black line,
95:00 - and it happens to be a couple
of sprites, each of which
95:03 - is just literally a vertical black line
we're probably asking a question like,
95:06 - are you touching it?
95:07 - Is the distance to it
zero or close to zero?
95:10 - And if so, we just ignore the left
or the right arrow at that point.
95:16 - So that works.
95:16 - But otherwise, if we're
not touching a wall,
95:18 - what are we probably doing
instead forever here?
95:22 - How is the movement working presumably?
95:24 - Yeah and back.
95:26 - Oh are you scratching?
95:28 - OK, sure.
95:29 - Let's go on.
95:30 - AUDIENCE: [INAUDIBLE]
95:33 - DAVID MALAN: Sorry, say a little louder.
95:35 - AUDIENCE: Presumably it's continually
looking for you to hit the arrow keys
95:38 - and then moving when you do.
95:40 - DAVID MALAN: Exactly.
95:41 - It's continually, forever listening for
the arrow keys up, down, left, right,
95:44 - and if the up arrow is
pressed, we're probably
95:47 - changing the y by a positive value.
95:49 - If the down arrow is pressed,
we're going down by y,
95:52 - and left and right accordingly.
95:54 - So let's actually take a quick look.
95:55 - If I zoom out here and take a look
at the code that implements this,
95:59 - there's a lot going on at
first glance, but let's see.
96:01 - First of all, let me drag
some stuff out of the way
96:03 - because it's kind of
overwhelming at first glance,
96:05 - especially if you, for instance, were
poking around online as for problem set
96:09 - 0 just to get inspiration,
most projects out there
96:11 - are going to look
overwhelming at first glance
96:13 - until you start to wrap your
mind around what's going on.
96:16 - But in this case, we've
implemented some abstractions
96:19 - from the get go to explain to
ourselves and to anyone else looking
96:22 - at the code what's going on.
96:24 - This is that program with the two black
lines and the Harvard shield going up,
96:29 - down, left, and right.
96:30 - It initially puts the shield
in the middle, 0,0, then
96:33 - forever listens for keyboard,
as I think you were describing,
96:37 - and it feels for the walls, as
I think you were describing.
96:40 - Now how is that implemented?
96:42 - Don't know yet.
96:42 - These are custom blocks we created
as abstractions to kind of hide
96:46 - those implementation details
because honestly that's
96:48 - all I need to know right now.
96:50 - But, as aspiring programmers,
if we're curious now,
96:52 - let's scroll down to the
actual implementation
96:55 - of listening for keyboard.
96:57 - This is the one on the left
and it is a little long,
96:59 - but it's a lot of similar structure.
97:02 - We're doing the following, if the up
arrow is pressed, then change y by 1.
97:07 - Go up.
97:08 - If the down arrow is pressed,
then change y by negative 1.
97:11 - Go down.
97:12 - Right arrow, left arrow, and that's it.
97:15 - So it just assembles all
of those ideas, combines it
97:17 - into one new block just because
it's kind of overwhelming,
97:20 - let's just implement it
once and tuck it away.
97:22 - And if we scroll now over to
the Feel for Walls function,
97:26 - this now is asking the
question as hypothesized,
97:30 - if I'm touching the left wall, change my
x value by 1, sort of move away from it
97:35 - a little bit.
97:35 - If I'm touching the right
wall, then move x by negative 1
97:38 - to move a little bit away from it.
97:40 - So it kind of bounces off the wall.
97:42 - Just in case it slightly went over, we
keep the crest within those two walls.
97:47 - All right, then a couple of
more pieces here to introduce.
97:51 - What if we want to actually add
some kind of adversary or opponent
97:54 - to this game?
97:55 - Well, let me go ahead to maybe this one
here where the adversary in this game
98:02 - might, for instance, be designed to
be bouncing to stand in your way.
98:05 - This is like a maze and you're trying to
get the Harvard shield from the bottom
98:08 - to the top or vice versa.
98:09 - Uh oh, Yale is in the way and it
seems to be automatically bouncing
98:14 - back and forth here.
98:15 - Well, let me ask someone else.
98:16 - Hypothesize.
98:17 - How is this working?
98:19 - This is an idea you have,
this as an idea you see.
98:21 - Let's reverse engineer in
your head how it works.
98:26 - How might this be working?
98:27 - Yeah, in back.
98:28 - AUDIENCE: If the Yale symbol is
touching a right wall or left wall,
98:32 - then have it bounce.
98:34 - DAVID MALAN: Yeah, so
if the Yale symbol is
98:36 - touching the left wall or the right
wall, we somehow have it bounce.
98:39 - And indeed we'll see there's a
puzzle piece that can do exactly
98:41 - that technically off
the edge, as we'll see,
98:44 - but there's another way we can do this.
98:45 - Let's look at the code.
98:46 - The way we ourselves
can implement exactly
98:49 - that idea bounce is just
with a little bit of logic.
98:52 - So here's what this version
of the program is doing.
98:54 - It's moving Yale by default to 0,0
just to arbitrarily put it somewhere,
98:58 - pointing it direction 90 degrees, which
means just horizontally, essentially,
99:03 - and then it's forever doing
this: if touching the left wall
99:06 - or touching the right wall,
here's our translation of bounce.
99:10 - We're just turning 180 degrees.
99:11 - And the nice thing
about that is we don't
99:13 - have to worry if we're going from
right to left or left to right.
99:16 - 180 degrees is going to
work on both of the walls.
99:19 - And that's it.
99:21 - After we do that, we just move
one step, one pixel, at a time
99:24 - but we're doing it forever so
something is happening continually
99:28 - and the Yale icon is
bouncing back and forth.
99:30 - Well one final piece
here, what if now we
99:33 - want another adversary, a more advanced
adversary down the road for instance,
99:39 - to go and follow us wherever
we are such that this time
99:44 - we want the other sprite to
not just bounce back and forth,
99:51 - but literally follow us
no matter where we go.
99:55 - How might this be
implemented on the screen?
99:59 - I bet it's another forever
block, but what's inside?
100:01 - AUDIENCE: So forever get the
location of the of the Harvard shield
100:05 - and move one step towards it.
100:06 - DAVID MALAN: Yeah, forever point at
the location of the Harvard shield
100:09 - and go one step toward it.
100:11 - This is just going to go on forever if I
just give up, at least in this version.
100:15 - Notice it's sort of twitching
back and forth because it goes one
100:18 - pixel then one pixel then one pixel.
100:20 - It's sort of in a frantic state here.
100:21 - We haven't finished the game yet, but if
we see inside, we'll see exactly that.
100:25 - It didn't take much to
implement this simple idea.
100:28 - Go to a random position just
to make it kind of fair,
100:30 - initially, then forever
point towards Harvard,
100:33 - which is what we called the Harvard
crest sprite, move one step.
100:37 - Suppose we now wanted to
make a more advanced level.
100:39 - What's a minor change I could
logically make to this code just
100:42 - to make MIT even better at this?
100:45 - AUDIENCE: Change the
number of steps to two.
100:46 - DAVID MALAN: All right, change
the number of steps to two.
100:48 - So let's try that.
100:49 - So now they got twice as fast.
100:51 - Let me go ahead and just
get this out of the way.
100:53 - Oops, let me make it a fair fight.
100:56 - Green flag.
100:58 - All right, I unfortunately am
still moving one pixel at a time,
101:01 - so this isn't going to end well.
101:03 - It caught up to me.
101:04 - And if we're really aggressive and
do something like 20 steps at a time,
101:10 - click the green flag.
101:11 - Jesus, OK, so that's how you might
then make your levels progressively
101:16 - harder and harder.
101:17 - So it's not an accident that we
chose these particular examples
101:20 - here involving these particular
schools because we have one more
101:23 - demonstration we thought
we'd introduce today
101:25 - if we could get one other
volunteer to come up and play
101:30 - what was called by one of your
predecessors Ivy's Hardest Game.
101:34 - Let's see, you in the middle.
101:35 - Do you want to come on up?
101:36 - What's your name?
101:37 - AUDIENCE: Celeste.
101:38 - DAVID MALAN: Say again?
101:39 - AUDIENCE: Celeste.
101:40 - DAVID MALAN: Come a
little closer, actually.
101:41 - Sorry, hard to hear here.
101:44 - All right, round of applause
here if we could, too.
101:47 - [APPLAUSE]
101:53 - OK, sorry, what was your name?
101:54 - AUDIENCE: Celeste.
101:55 - DAVID MALAN: Ceweste
101:55 - AUDIENCE: Celeste.
101:56 - DAVID MALAN: Celeste.
101:56 - AUDIENCE: Yes.
101:57 - DAVID MALAN: Come on over.
101:57 - Nice to meet you, too.
101:59 - So here we have on this other
screen Ivy's Hardest Game
102:02 - written by a former CS50 student.
102:04 - I think you'll see that it
combines these same principles.
102:07 - The maze is clearly a
little more advanced.
102:09 - The goal at hand is to initially move
the Harvard crest to the sprite all
102:14 - the way on the right so that you
catch up to him in this case,
102:17 - but you'll see that
there's different levels
102:18 - and different levels of sophistication.
102:21 - So if you're up for it, you can use just
these arrow keys up, down, left, right.
102:24 - You'll be controlling the
Harvard sprite and if we
102:27 - could raise the volume just a little
bit, we'll make this our final example.
102:32 - Here we go, clicking the green flag.
102:34 - [MUSIC PLAYING]
102:38 - Feeling ready?
102:39 - AUDIENCE: Yep.
102:40 - DAVID MALAN: Spacebar.
102:41 - [MUSIC - MC HAMMER, "U CAN'T TOUCH
THIS"]
102:43 - MC HAMMER: (SINGING) Can't touch this.
102:45 - You can't touch this.
102:48 - You can't touch this.
102:52 - Can't touch this.
102:55 - My, my, my, my music--
102:56 - DAVID MALAN: Excellent.
102:57 - MC HAMMER: (SINGING) so hard.
102:58 - Makes me want to say, oh my Lord.
103:00 - Thank you for blessing me--
103:02 - DAVID MALAN: Two Yales now.
103:03 - MC HAMMER: (SINGING) Feels
good when you know you're down.
103:06 - A super dope homeboy--
103:07 - AUDIENCE: Oh!
103:07 - DAVID MALAN: Oh!
103:09 - Keep going.
103:10 - MC HAMMER: (SINGING)
You can't touch this.
103:12 - I told you, homeboy.
103:13 - Can't touch this.
103:15 - Yeah, that's how living--
103:16 - DAVID MALAN: All right.
103:17 - MC HAMMER: (SINGING) Can't touch this.
103:19 - Look at my eyes, man.
103:20 - You can't touch this.
103:23 - You let me bust the funky lyrics.
103:25 - You can't touch this.
103:26 - Fresh new kicks and pants.
103:27 - You got it like that and
you know you want to dance.
103:29 - So move out of your seat and get
a fly girl and catch this beat.
103:33 - [LAUGHING]
103:33 - Hold on.
103:34 - Pump a little bit and let them know
what's going on like that, like that.
103:38 - Cold on a mission, so fall on back.
103:39 - Let them know that you're too--
103:41 - DAVID MALAN: There you go.
103:42 - There you go.
103:43 - [APPLAUSE]
103:46 - MC HAMMER: (SINGING) Can't touch this.
103:48 - Why you standing there, man?
103:50 - You can't touch this.
103:51 - Yo, sound the bell.
103:52 - School's in, sucker.
103:54 - Can't touch this.
103:54 - Give me a song or rhythm, making
them sweat that's what give them.
103:58 - [CHEERING]
103:59 - They know.
104:00 - You talking the Hammer when
you're talking about a show.
104:02 - That's hyped and tight.
104:03 - Singers are sweating so them
a wipe or a tame to learn.
104:06 - DAVID MALAN: Second to last level.
104:08 - Oh!
104:08 - MC HAMMER: (SINGING) That chart's legit.
104:10 - Either work hard or
you might as well quit.
104:13 - That word because you know--
104:14 - DAVID MALAN: Oh!
104:15 - Keep going, keep going!
104:17 - Yes!
104:18 - MC HAMMER: (SINGING)
You can't touch this.
104:20 - DAVID MALAN: You're almost there.
104:22 - MC HAMMER: (SINGING) Break it down.
104:23 - DAVID MALAN: There you go.
104:24 - Go, go, go!
104:26 - Oh.
104:27 - One more.
104:30 - Yes!
104:31 - [CHEERING]
104:32 - There you go.
104:36 - MC HAMMER: (SINGING) Stop, Hammer time.
104:38 - "Go with the flow," it is said.
104:39 - If you can't groove to this,
then you're probably dead.
104:42 - So wave your hands in the
air, bust a few moves,
104:44 - run your fingers through your hair.
104:45 - This is it.
104:45 - For a winner.
104:46 - Dance to this and you're
going to get thinner.
104:49 - Now move, slide your rump.
104:50 - Just for a minute let's all do the bump.
104:53 - [CHEERING]
104:54 - DAVID MALAN: Yes!
104:55 - [APPLAUSE]
104:56 - Congratulations.
105:03 - All right, that's it for CS50.
105:05 - Welcome to the class.
105:06 - We'll see you next time.
105:08 - [MUSIC PLAYING]
106:26 - DAVID J. MALAN: All right.
106:27 - So this is CS50.
106:29 - And this is week 1, the one in which
you learn a new language, which
106:33 - is something we technically said
last week, at least if you had never
106:36 - played with this graphical language
known as Scratch before, which itself
106:39 - was a programming language.
106:41 - But today, as promised,
we transition to something
106:43 - a little more traditional,
a little more text-based,
106:45 - not puzzle piece- or
block-based, known as C.
106:48 - This is an older language.
106:49 - It's been around for decades.
106:50 - But it's a language that underlies so
many of today's more modern languages,
106:54 - among them something called
Python that we'll also
106:57 - come to in a few weeks' time.
106:58 - Indeed, at the end of
the semester, the goal
107:00 - is for you to feel that
you've not learned Scratch,
107:02 - you've not learned C, or
even Python, for that matter,
107:04 - but fundamentally that you've
learned how to program.
107:07 - Unfortunately, when you
learn how to program
107:09 - with a more traditional language like
this, there's just so much distraction.
107:13 - Last week I described all of the
syntax, all of the weird punctuation
107:17 - that you see in this, like the
hash symbol, these angled brackets,
107:19 - parentheses, curly braces,
backslash n, and more.
107:22 - Well, today we're not going to reveal
what all of those little particulars
107:26 - mean.
107:27 - But by next week, will this no
longer look like the proverbial Greek
107:31 - to you, a language that, presumably,
you've never actually seen or typed
107:35 - before.
107:36 - But to do that, we'll explore some
of the very same topics as last week.
107:40 - So recall that, via Scratch-- and
presumably via problem set 1--
107:43 - we took a look at things called
functions that are actions or verbs.
107:46 - And related to functions
were arguments like inputs.
107:49 - And related to some functions
were returned values like outputs.
107:52 - Then we talked a bit about conditionals,
forks in the road, so to speak,
107:56 - Boolean expressions, which are
just yes/no questions or true/false
107:59 - questions, loops, which let you do
things again and again, variables,
108:03 - like in math, that let you
store values temporarily,
108:05 - and then even other topics still.
108:07 - So if you were comfortable on the
heels of problem set 0 and last week,
108:11 - realize that all of these topics
are going to remain with us.
108:14 - So really, today is just about acquiring
all the more of a mental model for how
108:18 - you translate those ideas into,
presumably, a very cryptic new syntax--
108:22 - a new syntax, frankly,
that's actually more
108:25 - simple in some ways than
your own human language,
108:27 - be it English or something else, because
there's far fewer vocabulary words.
108:31 - There's actually far less
syntax that you might
108:33 - have in, say, a typical human language.
108:35 - But you need to be with these computer
languages all the more precise
108:39 - so that you're most,
ultimately, correct,
108:41 - and ultimately will see to your code
is successful along a few other lines
108:46 - as well.
108:46 - So if you think about the last time
you kind of wandered around not really
108:49 - knowing what you were doing
or encountered something new--
108:51 - might not have been that long ago,
entering Harvard Yard for the very
108:54 - first time, or Old Campus or the like,
be it in Cambridge or New Haven--
108:58 - you didn't really need to know how
to do everything as a first year.
109:01 - You didn't need to
know who everyone was,
109:03 - where everything was, how Harvard or
Yale, or anything else for that matter,
109:07 - worked.
109:07 - You sort of got by day to day by just
focusing on those things that matter.
109:10 - And anything you didn't
really understand,
109:12 - you sort of turned a blind
eye to until it's important.
109:14 - And that's, indeed, what
we're going to do today.
109:16 - And really, for the next
several weeks, we'll
109:18 - focus on details that
are initially important
109:21 - and try to wave our hands, so to speak,
at details that, yeah, eventually
109:24 - we'll get to, might be interesting.
109:25 - But for now, they might be distractions.
109:27 - And by distractions, I really
mean some of that syntax
109:29 - to which I alluded earlier.
109:31 - So by the end of today-- and
really, by the end of problem set 1,
109:34 - your first foray, presumably,
into this language called C--
109:37 - you'll have written some code.
109:39 - And you'll be asking yourself--
we'll be asking yourselves--
109:41 - just how good is that code?
109:43 - Well, first and foremost, per
last week, be it in Scratch
109:46 - or phone book form, code ultimately
needs to be correct, to be well done.
109:51 - You want the problem
to be solved correctly.
109:53 - So that one sort of goes without saying.
109:55 - And along the way this term, we'll
provide you with tools and techniques
109:59 - so you don't have to just sit there
sort of endlessly trying an input,
110:02 - checking the output, trying
another input, checking the output.
110:05 - There's a lot of automation
tools in the real world--
110:07 - and in this class and
others like it-- that
110:09 - will help facilitate you answering
that question for yourself, is my code
110:13 - correct, according to our
specifications or the like.
110:15 - But then something that's
going to take more time
110:18 - and you're probably not going to feel
100% comfortable with the first week,
110:21 - the first weeks, is just how
well designed your code is.
110:24 - It's one thing to speak
English or write English,
110:27 - but it's another thing-- or
any language, for that matter.
110:30 - But it's another thing to
speak it or write it well.
110:32 - And we spend all these years in middle
school, high school, presumably,
110:35 - writing papers and other documents,
getting grades and feedback on them
110:38 - as to how well formulated your
arguments were, how well structured
110:41 - your paper was, and the like.
110:43 - And there's that same
idea in programming.
110:44 - It doesn't matter necessarily that
you've just solved a problem correctly.
110:49 - If your code is a complete visual
mess, or if it's crazy long,
110:53 - it's going to be really
hard for someone else
110:55 - to wrap their mind around what your code
is doing and, indeed, to be confident
110:59 - if it is correct.
111:00 - And honestly, you-- the
next morning, the next year,
111:04 - the next time you look at
that code-- might have no idea
111:07 - what you yourself were even thinking.
111:09 - But you will if you focus,
too, on designing good code,
111:13 - getting your algorithms efficient,
getting your code nice and clean,
111:16 - and even making sure your
code looks pretty, which
111:19 - we'd describe as a matter of style.
111:20 - So in the written human world, having
punctuation in the right place,
111:24 - capitalization and the like-- the
sort of way you write an essay
111:27 - but not necessarily
send a text message--
111:29 - relates to style, for instance.
111:31 - And so good style in
code is going to have
111:33 - a few of these characteristics that are
pretty easily taught and remembered.
111:36 - But you just have to start to get in the
habit of writing code in a certain way.
111:41 - So these three axes, so to speak,
correctness, design, and style,
111:44 - are really the overarching
goals when writing code that
111:48 - ultimately is going to look like this.
111:50 - So this program we
conjectured last week does
111:52 - what if you run it on a Mac or
PC or somewhere else, presumably?
111:56 - What does it do?
111:57 - Yeah?
111:59 - AUDIENCE: [INAUDIBLE].
112:00 - DAVID J. MALAN: It just
prints, Hello, world.
112:02 - And honestly, that's kind
of atrocious that you
112:04 - need to hit your keyboard keys this
many times with this cryptic syntax just
112:08 - to get a program to say, Hello, world.
112:09 - So a spoiler-- in a
few weeks' time when we
112:11 - introduce other, more modern
languages, like Python,
112:14 - you can distill this same logic
into literally one line of code.
112:18 - And so we're getting there, ultimately.
112:20 - But it's helpful to understand
what it is that's going on here,
112:23 - because even though this
is a pretty cryptic syntax,
112:25 - there's nothing after this week and,
really, next week that you shouldn't
112:28 - be able to understand even about
something that right now looks
112:30 - a little something like this.
112:32 - So how do you write code?
112:33 - Well, I've given us sort
of the answer to a problem.
112:35 - How do you print, Hello,
world, on the screen?
112:37 - So what do I do with this code?
112:39 - Well, we're in the habit of typically
writing things with, like, Microsoft
112:42 - Word or Google documents.
112:43 - And yeah, I could open up Word or
Google Docs or Pages or the like
112:48 - and just literally transcribe
that character for character,
112:50 - save it, and boom, I've got a program.
112:53 - But the problem, per last week, is
that computers only understand or speak
112:56 - what other language, so to speak?
112:59 - AUDIENCE: [INAUDIBLE].
113:00 - DAVID J. MALAN: Yeah, so
binary, zeros and ones.
113:02 - And so this, obviously,
is not zeros and ones.
113:04 - So it doesn't matter if I put it in
a Word doc, Google Doc, Pages file,
113:07 - or the like.
113:07 - The computer is not going to
understand it until I somehow
113:10 - translate it to zeros and ones.
113:11 - And honestly, none of those
tools that I rattled off
113:14 - are really appropriate for programming.
113:15 - Why?
113:16 - Well, they come with features
like bold facing and italics
113:19 - and sort of fluffy, aesthetic stuff
that has no functional impact on what
113:22 - you're trying to do with your code.
113:24 - And they don't have
the ability, it would
113:26 - seem, to convert that code
ultimately to zeros and ones.
113:29 - But tools that do have
this capability might
113:32 - be called Integrated Development
Environments, or IDEs,
113:36 - or, more simply, text editors.
113:38 - A text editor is a tool that a
programmer uses perhaps every day
113:42 - to write their code.
113:44 - And it's a simple program-- here,
for instance, a very popular one
113:46 - called Visual Studio Code, or VS Code.
113:49 - And at the top here, you
see that I've actually
113:51 - created in advance before class a very
simple empty file called "hello.c."
113:56 - Why?
113:57 - Well, .c indicates by convention that
this is going to be a file in which
114:00 - there is C code.
114:01 - It's not .docx, which would mean in
this file is a Microsoft Word document,
114:06 - or .pages is a Pages file.
114:08 - This is .c, which means in this file is
going to be text in the language called
114:12 - C. This number 1 here is just an
automatic line number that's going help
114:16 - me keep track of how long
or short this program is.
114:18 - And the cursor is just
blinking there, waiting
114:21 - for me to start typing some code.
114:23 - Well, let me go ahead and type
out exactly the same code.
114:26 - For me, it comes pretty
comfortably from memory.
114:28 - So I'm going to go ahead and include
something called standardio.h--
114:31 - more on that later.
114:32 - I'm going to magically type int
main(void), whatever that means--
114:37 - we'll come back to that later--
114:38 - one of these curly braces and then a
sibling there that closes the same.
114:43 - Then I'm going to hit Tab
to indent a few spaces.
114:46 - And then I'm going to type not print,
but printf, then "Hello, world," /n,
114:52 - close quote, close
parenthesis, semicolon.
114:55 - And I dare say this was essentially
the very first program I wrote some
115:00 - 25 years ago.
115:01 - I wrote it to say, "Hi, CS50."
115:03 - Now it just says the more canonical,
conventional, "Hello, world."
115:06 - But that's it.
115:07 - That's my very first program.
115:08 - And all I need to now do is
maybe hit Command-S or Control-S
115:11 - to save the file.
115:12 - And voila, I am a programmer.
115:15 - The catch though, is,
OK, how do I run this?
115:17 - Like, on your Mac or PC,
how do you run a program?
115:19 - Well, usually double-click an icon.
115:21 - On your phone, you tap an icon.
115:23 - In this environment that we're using
and that many programmers-- dare
115:26 - say most programmers-- use, you don't
have immediately a nice, pretty icon
115:31 - to double-click on.
115:32 - That's very user friendly,
but it's not very necessary.
115:35 - Especially when you get more
comfortable with programming,
115:38 - you're going to want to type commands
because it's just faster than pointing
115:41 - and clicking a mouse.
115:42 - And you're going to
want to automate things,
115:43 - which is a lot easier if it's all
command or text-based, as opposed
115:46 - to mouse and muscular movements.
115:49 - And so here I have my program.
115:52 - It lives in this file called "hello.c."
115:54 - I need to now convert it,
though, to zeros and ones.
115:58 - Well, how do I go about doing this,
and how am I going to get from this
116:02 - so-called code--
116:03 - or source code, as it's
conventionally called--
116:06 - to this, these zeros and ones that
we'll now start calling machine code.
116:11 - The zeros and ones from last
week can be used not only
116:13 - to represent numbers and letters,
colors, audio, video, and more.
116:18 - It can also represent instructions to a
computer, like print, or play a sound,
116:24 - or delete a file, or save a file.
116:26 - All the sort of basics
of a computer somehow
116:28 - can be represented by other
patterns of zeros and ones.
116:32 - And just like last week,
it depends on the context
116:34 - in which these numbers are stored.
116:36 - Sometimes they're interpreted as
numbers, like in a spreadsheet.
116:39 - Sometimes they're interpreted as colors.
116:41 - Sometimes they're interpreted as
instructions, commands to your computer
116:46 - to do very low-level operations,
like print something on the screen.
116:50 - So fortunately, last week's definition
of computer science of problem solving
116:55 - is a nice mental model for
exactly the goal at hand.
116:58 - I have some input, AKA source code.
117:00 - I want to output ultimately
machine code, those zeros and ones.
117:05 - I certainly don't want to do
this kind of process by hand.
117:07 - So hopefully there's an algorithm
implemented by some special program
117:11 - that does exactly that.
117:12 - And those of you who do
have some prior experience,
117:14 - this program might be called a?
117:16 - A compiler.
117:18 - So a few of you have,
indeed, programmed before.
117:20 - Not all languages use compilers.
117:21 - C, in fact, is a language
that does use a compiler.
117:24 - And so I just need to find myself--
117:27 - on my computer somewhere,
presumably-- a so-called compiler,
117:31 - a program whose purpose in life is
to convert one language to another.
117:35 - And source code written textually
in C, like we saw a moment ago,
117:40 - is source code.
117:41 - The machine code is the
corresponding zeros and ones.
117:44 - So let me go back to the same
programming environment called
117:48 - Visual Studio Code or VS Code.
117:50 - This is typically a program you
or any programmer on the internet
117:53 - can download onto their own Mac or
PC and be on their way with whatever
117:57 - computer you own writing some code.
117:59 - A downside, though, of that
approach is that all of us
118:02 - have slightly different
versions of Macs or PCs.
118:04 - We have slightly different
versions of operating systems.
118:07 - They may or may not be up to date.
118:08 - It's just a technical support nightmare
to create a uniform environment,
118:13 - especially for an introductory
class, where everyone should ideally
118:15 - be on the same page so we can
get you up and running quickly.
118:19 - And so I'm actually using a cloud-based
version of VS Code, something
118:23 - that you only need a browser to access.
118:25 - And then you can be on any
computer, today or tomorrow.
118:28 - By the end of the semester, we're
going to get you out of the cloud,
118:32 - so to speak, as best we can and
get you onto your own Mac or PC,
118:36 - so that after this class, especially if
it's the only CS class you ever take,
118:39 - you feel like you can continue
programming in any number of languages,
118:43 - even with CS50 behind you.
118:45 - But for now, wonderfully, the
browser version of VS Code
118:47 - should pretty much be identical
to what the eventual downloadable
118:51 - version of the same would be.
118:53 - And you'll see in problem
set 1 how to access this
118:55 - and how to get going yourself
with your first programs.
118:58 - But I haven't mentioned this
bottom part of the screen,
119:01 - this bottom part of the screen.
119:03 - And this is an area where we have
what's called a terminal window.
119:06 - So this is sort of old-school technology
that allows you, with a keyboard,
119:10 - to interact with a computer, wherever
it may be-- on your lap, in your pocket,
119:15 - or even, in this case, in the cloud.
119:17 - So on the top-hand
portion of this screen
119:20 - is my text editor, like tabbed
windows, like in many programs, where
119:24 - I can just create files and write code.
119:26 - The bottom of the screen here,
my so-called terminal window,
119:30 - gives me the ability to
run commands on a server
119:33 - that currently I have
exclusive access to.
119:35 - So because I logged into VS
Code with my account online,
119:39 - I have my own sort of virtual
server, if you will, in the cloud--
119:44 - otherwise known as, in
this context, a container.
119:46 - This has its own operating system
for me, its own hard drive,
119:49 - if you will, where I can save
and create files of my own,
119:52 - separate from yours and vice versa.
119:54 - And it's at this very
simple prompt, which
119:57 - is conventionally-- but not always--
abbreviated by a dollar sign,
120:00 - has nothing to do with currency.
120:01 - It just means, type your commands here.
120:03 - This is where I'm going to
be able to type commands,
120:05 - like compile my source
code into machine code.
120:09 - So it's a Command Line Interface, or
CLI, on top of an operating system
120:15 - that you might not have ever used
or seen, but it's very popular,
120:18 - called Linux.
120:19 - Odds are almost all of us in this room
are using Mac OS or Windows right now,
120:23 - but we're all going to start using an
operating system called Linux, which
120:26 - is in a family of operating systems
that offer not only this command
120:30 - line interface, but are used not
just for programming, but for serving
120:33 - websites and developing
applications and the like.
120:35 - And it's, indeed, a familiar and very
powerful interface, as we'll see.
120:40 - So how do I go about making this
file, hello.c, into a program?
120:45 - There's no icon to double-click,
but there is a command.
120:48 - I can type, make hello, at this dollar
sign prompt, go ahead and hit Enter,
120:54 - and nothing appears to happen.
120:56 - But that's a good thing.
120:57 - And as we'll see in
programming, almost always,
120:59 - if you don't see anything go wrong,
that means everything went right.
121:02 - So this is going to
be a rarity at first,
121:04 - but this is a good thing that
it just seems to do nothing.
121:07 - But now there is in the
folder in my accounts
121:11 - in this on the cloud
a file called "hello."
121:15 - And it's a bit of a weird command,
but you'll get familiar with it
121:18 - before long.
121:19 - . just means go into my current folder.
121:22 - /hello means run the program called
"hello" in this current folder.
121:28 - So ./hello, and then Enter, and voila,
now I'm actually not just programming,
121:32 - but running my actual code.
121:35 - So what have I just done?
121:38 - Let me go ahead and do this.
121:40 - I'm going to go ahead and open
up the sidebar of this program,
121:42 - and you'll see in problem
set 1 how to do this.
121:44 - And this might look a little different
based on your own configuration.
121:48 - Even the color scheme I'm using might
ultimately look different from yours,
121:51 - because it supports a
nice colorful theme.
121:52 - So you can have different colors
and brightnesses depending
121:56 - on your mood or the time of day.
121:58 - What I've opened here, though, is
what is called in VS Code Explorer,
122:01 - and this is just all of the
files in my cloud account.
122:04 - And there's not many right now.
122:05 - There's only two.
122:06 - One is the file called
hello.c, and it's highlighted
122:09 - because I've got it open right there.
122:10 - And the other is a file called
"hello," which is brand new
122:14 - and was created when I ran that command.
122:17 - And what's now worth noting is that
now things are getting a little more
122:21 - like Mac OS and Windows.
122:22 - Like on the left-hand side, you have
a GUI, a Graphical User Interface.
122:26 - But on the bottom here, again, you
have a CLI, Command Line Interface.
122:30 - These are just different ways
to interact with computers,
122:32 - and you'll get comfortable with both.
122:34 - And honestly, you're certainly familiar
and comfortable with GUIs already,
122:37 - so it's the command line one
with which we'll spend some time.
122:40 - Now suppose that I just
wanted to do something
122:43 - more than compile this program.
122:45 - Suppose I wanted to go
ahead and remove it.
122:47 - Like, uh-uh, no, I made a mistake.
122:48 - I want to say, "Hello,
CS50," not "Hello, world."
122:51 - I could just hover up here, like in
any software, and I could right-click,
122:55 - and I could poke around, and
there, delete permanently.
122:57 - So most of us might have
that instinct on a Mac or PC.
123:00 - You right-click or Control-click,
and you poke around.
123:02 - But in a command line interface,
let me do this instead.
123:05 - The command for removing
or deleting a file
123:08 - in the world of Linux, this
other operating system,
123:12 - is just a type rm for remove,
and then "hello," Enter.
123:16 - It's a somewhat cryptic confirmation
message, but this just means,
123:19 - are you sure?
123:19 - I'm going to go ahead
and type Y for Yes.
123:21 - And now when I hit
Enter, watch what happens
123:24 - at top left in the Explorer, the
GUI, the graphical interface.
123:28 - Voila, it disappears.
123:30 - Not terribly exciting,
but this just means
123:32 - this is a graphical version
of what we're seeing here.
123:35 - And in fact, if you want to
never use the GUI again--
123:38 - I'll go ahead and close it
with a keyboard shortcut here--
123:41 - you can forever just type
ls for list and hit Enter.
123:45 - And you will see in the
command line interface
123:48 - all of the files in your current folder.
123:50 - So anything you can do
with a mouse, you can
123:52 - do with this command line interface.
123:54 - And indeed, we'll see many more
things that you can do as well.
123:57 - But the inventors of this, this
operating system and its predecessors,
124:01 - were very succinct.
124:02 - Like, the command is rm for remove.
124:04 - The command is ls for list.
124:06 - It's very terse.
124:06 - Why?
124:07 - Because it's just faster to type.
124:10 - So before we forge ahead with making
something more interesting than
124:14 - just "Hello, world,"
let me pause here to see
124:16 - if there's questions on
source code or machine
124:19 - code or compiler or this
command line interface.
124:24 - Yeah?
124:25 - AUDIENCE: [INAUDIBLE].
124:26 - DAVID J. MALAN: Really good
question, and let me recap.
124:28 - If I were to make
changes to the program,
124:30 - run it, and then maybe make other
changes and try to rerun it,
124:33 - would those changes be reflected,
even though I've reworded slightly.
124:37 - Well, let's do this.
124:37 - I already removed the old version.
124:39 - So let me go ahead and point
out that if I do ./hello now,
124:43 - I'm going to see some kind of error
because I just deleted the file.
124:47 - No such file or directory, so
it's not terribly user friendly,
124:50 - but it's saying what the problem is.
124:51 - Let me go ahead and remake
it by typing make hello.
124:55 - Now if I type ls, I'll see not one
but two files again, and one of them
124:59 - is even green with a little asterisk
to indicate that it's executable.
125:03 - It's sort of the textual
version of something
125:05 - you could double-click
in our human world.
125:07 - So now, of course, if I run hello, we're
back where I started, "Hello, world."
125:10 - But now suppose I change it to
"Hello, CS50," like I did years ago.
125:15 - Let me go ahead and save the file with
Command-S or Control-S. Down here now,
125:21 - let me run ./hello again, and voila.
125:23 - Huh.
125:25 - So let me ask someone else
to answer that question.
125:27 - What's the missing step?
125:29 - Why did it not say, "Hello, CS50."
125:31 - Yeah?
125:32 - AUDIENCE: [INAUDIBLE].
125:33 - DAVID J. MALAN: Yeah, so
I didn't compile it again.
125:35 - So sort of newbie mistake, you're going
to make this mistake and many others
125:38 - before long.
125:38 - But now let me go ahead
and remake hello, enter.
125:42 - It's going to seemingly
make the same program.
125:45 - But this time when I run
it, it's, "Hello, CS50."
125:49 - Any other questions on some
of these building blocks?
125:53 - And we'll come back to all the
crazy syntax I typed before long.
125:56 - But for now, we're focusing
on just the output.
125:58 - Yeah?
125:59 - AUDIENCE: [INAUDIBLE].
126:00 - DAVID J. MALAN: When
I keep running make,
126:02 - it creates a new version
of the machine code.
126:05 - So it keeps changing the hello program
and the hello file, and that's it.
126:09 - There's no make file, per se.
126:12 - AUDIENCE: [INAUDIBLE].
126:13 - DAVID J. MALAN: Good question, no.
126:15 - If I open up that directory, you'll
see that there's just the one.
126:18 - And it doesn't matter how
many times I run make hello--
126:21 - three, four, five-- it just
keeps overwriting the original.
126:25 - So it's kind of like just saving in
the world of Google Docs or Microsoft
126:28 - Word or the like.
126:29 - But there's an additional step today.
126:31 - We have to then convert my words to
the computer's, the zeros and ones.
126:36 - Yeah, in front.
126:37 - AUDIENCE: [INAUDIBLE].
126:38 - DAVID J. MALAN: Oh, what
happens if I run hello.c?
126:40 - So let me go ahead and do ./hello.c,
which is a mistake you'll invariably
126:45 - make early on.
126:46 - Permission denied.
126:47 - So what does that mean?
126:48 - This is where the error
messages mean something
126:50 - to the people who designed the operating
system, but it's a little cryptic.
126:53 - It's not that you don't
have access to the file.
126:55 - It means that it's not executable.
126:57 - This is not something you
have permission to run,
127:00 - but you do have permission to read
or write it-- that is, change it.
127:04 - AUDIENCE: [INAUDIBLE].
127:06 - DAVID J. MALAN: Oh,
really good question.
127:08 - So if I have named my file, hello
dot C, or more generally something
127:11 - dot C, of the things that
Make does is it automatically
127:15 - picks the file name for me.
127:17 - And we'll discuss a bit--
127:18 - we'll discuss this a bit more next week.
127:20 - Make itself-- is kind of the
first of white lies today--
127:23 - itself is not a compiler.
127:25 - It's a program that knows how to find
and use the compiler on the system
127:30 - and automatically create the program.
127:33 - If I use, as we'll discuss next
week, the actual compiler myself,
127:37 - I have to type a much longer sequence
of commands to specify explicitly
127:41 - what do I want the name
of my program to be.
127:43 - Make is a nice program,
especially in week 1,
127:45 - because it just automates
all of that for us.
127:47 - And so here, we have now a
program that very simply prints
127:51 - something on the screen.
127:52 - So let's not put this
into the context of where
127:54 - we left off last time in the context
of Scratch and inputs and outputs.
127:58 - So we discuss the last time, of
course, functions and arguments.
128:01 - Functions, again, are those actions and
verbs like say, or ask, or the like.
128:07 - And the arguments were the
inputs to those functions,
128:09 - generally in those little white
ovals that, in Scratch, you
128:11 - could type words or numbers into.
128:13 - We'll see, in all of the languages
we're going to see this term,
128:16 - have that same capability.
128:18 - And let's just start to translate
one of these things to another.
128:20 - So for instance, let's put
this same program in C,
128:24 - in the context of Scratch.
128:26 - This is what Hello, World looked like
last week in the form of one function.
128:29 - This week, of course,
it looks like print.
128:32 - And then the parentheses,
notice, are kind of
128:34 - deliberately designed in the world of
Scratch to resemble that same shape.
128:38 - Even though this is a
white oval, you kind of get
128:40 - that it's kind of evoking that
same idea with the parentheses.
128:45 - Technically the function
in C, it's not called say.
128:49 - It's not even called print.
128:50 - It's called printf.
128:51 - The F stands for formatted, but we'll
see what that means in a moment.
128:55 - But printf is the closest
analogous function
128:57 - for say in the world of
C. Notice if, though, you
129:00 - want to print something like
Hello, World or Hello CS50 in C,
129:05 - you don't just write the
words as we did last week.
129:08 - You also had an add what,
if you notice already
129:11 - what's missing from this version.
129:13 - Yeah, so the double quotes
on the left and the right.
129:15 - So, that's necessary in C whenever
you have a string of words.
129:20 - And I'm using that word deliberately.
129:22 - Whenever you have multiple words
like this, this is known as a string
129:26 - as we'll see.
129:27 - And you have to put it in double
quotes, not single quotes.
129:30 - You have to put it in double quotes.
129:32 - There's one other stupid thing
that we need to have in my C code
129:36 - in order to get this function to do
something ultimately, which is what?
129:40 - Semicolon.
129:41 - So just like in our human
world, you eventually
129:44 - got into the habit of using, at
least in formal writing, periods.
129:47 - Semicolon is generally what
you use to finish your thought
129:50 - in the world of programming with C.
129:53 - All right, so we have
that function in place.
129:55 - Now, what does this really fit
into in terms of the mental model?
129:59 - Well, functions take arguments.
130:01 - And it turns out functions can
have different types of outputs.
130:04 - And we've actually seen
both already last week.
130:07 - One type of output from a function
can be something called a side effect.
130:11 - And it generally refers
to something visual,
130:13 - like something appearing on the screen
or a sound playing from your computer.
130:17 - It's sort of a side effect of
the function doing its thing.
130:20 - And indeed, last week we saw this in
the context of passing in something
130:24 - like Hello, World as
input to the say function.
130:27 - And we saw on the screen Hello,
World, but it was kind of a one off.
130:31 - It's one and done.
130:32 - You can't actually do anything
with that visual output
130:35 - other than consume it,
visually, with your human eyes.
130:38 - But sometimes, recall last week, we
had functions like the ask block that
130:43 - actually returned me some value.
130:44 - Remember the ask, what's your name.
130:47 - It handed me back whatever
answer the human typed in.
130:50 - It didn't just arbitrarily
display it on the screen.
130:52 - The cat didn't necessarily
say it on the screen.
130:55 - It was stored, instead, in that special
variable that was called answer.
131:01 - Because some functions have not
side effects but return values.
131:05 - They hand you back an output
that you can use and reuse,
131:09 - unlike the side effect, which,
again displays and that's it.
131:11 - You can't sort of catch
it and hold on to it.
131:14 - So, in the context of last
week, we had the ask block.
131:17 - And that had this special
answer return value.
131:20 - In C, we're going to
see in just a moment,
131:22 - we could translate this as follows.
131:25 - The closest match I can
propose for the ask block
131:29 - is a function that we're going
to start calling get string.
131:31 - String is, again, a word, a
set of words, like a phrase
131:34 - or a sentence in programming.
131:36 - It, too, is a function insofar as
it takes input and pretty much--
131:41 - this isn't always true--
but very often when
131:43 - you have a word in C followed by an open
parenthesis and a closed parenthesis,
131:48 - it's most likely the name of a function.
131:50 - And we're going to see that
there's some exceptions to that.
131:53 - But for now this indeed
looks like a function
131:55 - because it matches that pattern.
131:57 - If I want to ask the question,
what's your name, question mark--
132:00 - and I'm even going to deliberately
put a space there just to kind of move
132:03 - the cursor a little bit over so that
the human isn't typing literally
132:07 - after the question mark.
132:08 - So that's just the nitpicky aesthetic.
132:10 - This is perhaps the closest analog
to just asking that question.
132:14 - But because the ask
block returns a value,
132:18 - the analog here forget string is
that it, too, returns a value.
132:22 - It doesn't just print the human's input.
132:23 - It hands it back to you in the form
of a variable, a.k.a. return value,
132:28 - that I can then use and reuse.
132:30 - Now ideally it would be as
simple as this literally
132:33 - saying answer on the left equals.
132:36 - And this is where
things start to diverge
132:38 - from math and sort of our human world.
132:40 - This equal sign, henceforth,
is not the equal sign.
132:44 - It is the assignment operator.
132:46 - To assign a value means to
store a value in some variable.
132:50 - And you read these things,
weirdly, right to left.
132:53 - So here is a function called get string.
132:55 - I claim that it's going
to return to you whatever
132:58 - the human types in as their name.
133:00 - It's going to get stored
over here on the left because
133:03 - of this so-called assignment
operator, that yes is an equal sign.
133:06 - But it doesn't mean
equality in this context.
133:08 - It makes things equal.
133:10 - But it does so by copying the value on
the right into the thing on the left.
133:14 - Unfortunately, we're not
quite done yet with C.
133:16 - And this is where, again, it
gets a little annoying at first
133:19 - where Scratch just let us express
our ideas without so much syntax.
133:23 - In C when you have a
variable you don't just
133:27 - give it a name like you did in Scratch.
133:29 - You also have to tell the computer
in advance what type of value
133:33 - it is storing.
133:34 - String is one such type of value.
133:37 - Int, for integer, is
going to be another.
133:40 - And there's even more than that
we'll see today and beyond.
133:42 - And this is partly an answer to the
question that came up one or more times
133:46 - last week, which was how does a computer
distinguish this pattern of zeros
133:49 - and ones from this.
133:51 - Like is this a letter, a number,
a color, a piece of video.
133:55 - And I just claimed last week that
it totally depends on the program.
133:58 - It depends on the context.
133:59 - And that's true.
134:00 - But within those
programs, it often depends
134:04 - on what the human programmer
said the type of the value is.
134:08 - If this specifies that
the string, which means
134:10 - interpret the following
zeros and ones that
134:12 - are stored in my program as
words or letters, more generally.
134:16 - If it's an int for integer, it would
be implying, by the programmer,
134:20 - treat the following zeros and
ones in my program as a number,
134:24 - an integer, not a string.
134:26 - So here's where this
week, unlike with Scratch,
134:29 - which is kind of figures out what you
mean, with C in a lot of languages
134:33 - you have to be this pedantic
and tell it what you mean.
134:36 - There's still one stupid thing
missing from my code here.
134:39 - What's still missing here?
134:40 - Yeah.
134:41 - AUDIENCE: [INAUDIBLE]
134:42 - DAVID J. MALAN: And we still
need the stupid semicolon.
134:44 - And I'm sort of impugning it here.
134:45 - Because honestly, these are
the kinds of stupid mistakes
134:48 - you're going to make today,
tomorrow, this weekend, next week,
134:50 - a few weeks from now, until you
start to notice this and recognize it
134:54 - as well as you do English or
whatever your spoken language is.
134:58 - Yeah, question.
134:59 - Good question.
135:00 - Suppose I mix apples and
oranges, so to speak,
135:03 - and I try to put a string in
an int or an int in a string,
135:06 - the compiler is going to complain.
135:08 - So when I run that make
command as I did earlier,
135:10 - it's not going to be nice and blissfully
quiet and just give me another prompt.
135:14 - It's going to yell at me
with honestly a very cryptic
135:17 - looking error message until we get
the muscle memory for reading it.
135:20 - Other questions.
135:23 - Ah, what happened to the backslash n.
135:24 - So, we'll come back to that
in just a moment, if we may.
135:26 - Because I have deliberately omitted
it here but we did have it earlier.
135:29 - And we'll see the different
behavior in a sec.
135:32 - Other questions.
135:36 - Yeah, not at all nitpicky.
135:37 - These are the kinds of
things that just matter.
135:39 - And it's going to take time to recognize
and develop this muscle memory.
135:43 - Everything I've typed here except,
for the W at the moment, is lowercase.
135:48 - And the W is capitalized
just because it's English.
135:50 - Everything else is lowercase.
135:51 - And this kind of varies by
language and also context.
135:54 - So, in many languages the convention
is to use all lowercase letters
135:58 - for your variable names.
136:00 - Other languages might use
some capitals, as well.
136:02 - But we'll talk about that before long.
136:04 - But this is the kind
of thing that matters
136:05 - and is hard to see at first, especially
when a little S doesn't look that
136:09 - different when it's on your tiny
laptop screen from a capital S.
136:12 - But you'll start to
develop these instincts.
136:15 - All right, so besides
this particular block,
136:18 - let's go ahead and consider how we can
go about implementing this now in code.
136:22 - So let me switch back to VS Code here.
136:24 - This was the program I had earlier.
136:26 - And let me go ahead and
undo my CS50 change.
136:28 - And this time just rerun it.
136:30 - Rerun Make on Hello with the original
version with the backslash n.
136:35 - Enter, nothing bad
seems to have happened.
136:37 - So dot slash Hello, enter Hello, World.
136:40 - Now, if you're curious,
this is a good instinct
136:43 - to start to acquire what
happens if I get rid of this.
136:45 - Well, I'm probably not going
to break things too badly.
136:47 - So let's try.
136:48 - Let me go ahead now and do Make Hello.
136:51 - Still compile.
136:52 - So it's not a really bad mistake.
136:53 - So let me go ahead and
run dot slash Hello.
136:56 - What's the difference here?
136:58 - Yeah, what do you see that's different?
137:01 - Yeah, the dollar sign, my so-called
prompt, stayed on the same line.
137:05 - Why?
137:05 - Well, we can presumably
infer now that the backslash
137:08 - n is some fancy notation for
saying create a new line,
137:12 - move the cursor, so to
speak, to the next line.
137:14 - Notice that the cursor will move to
the next line in my terminal window.
137:18 - If I keep hitting it,
it just automatically,
137:20 - by nature of hitting enter, does it.
137:22 - But it'd be kind of stupid if when
you run a program in this world,
137:25 - simple as it is, if
the next command is now
137:28 - weirdly spaced in the middle of
the terminal with the dollar sign,
137:31 - it just looks sloppy.
137:33 - It's really just an aesthetic argument.
137:35 - And notice that it's not acceptable or
correct to do this, to hit enter there.
137:40 - Let me go ahead and save that,
though, and see what happens.
137:43 - Let me go ahead now and
run Make Hello enter.
137:47 - Oh my god, like four errors.
137:49 - This is like, what, 10 lines of
errors for a one line program.
137:53 - And this is where, again, you'll start
to develop the instincts for just
137:56 - reading this stuff.
137:57 - These kinds of tools, like
the compiler tool we're using,
138:00 - were not designed necessarily
with user friendliness in mind.
138:03 - That's changed over the
decades, but certainly early
138:06 - on it's really just meant to be
correct and precise with its errors.
138:09 - So what did I do here?
138:11 - Missing terminating
close quote character,
138:13 - long story short, when
you have a string in C,
138:17 - your double quotes just have to
be on the same line just because.
138:20 - Now, there's the slight white lie.
138:22 - There's ways around this.
138:23 - But the best way around it is to
use this so-called escape sequence.
138:29 - To escape something means generally
to put a backslash, and then
138:32 - a special symbol like n for new line.
138:34 - And this is just the agreed upon way
that humans, decades ago, decided,
138:39 - OK you don't just hit your enter key.
138:42 - You instead put backslash n
and that tells the computer
138:46 - to move the cursor to the new line.
138:49 - So again, kind of cryptic.
138:50 - But once you know it, that's it.
138:52 - It's just another word
in our vocabulary.
138:55 - So now let me transition to making
my program a little more interactive.
138:58 - Instead of just saying
Hello, world, let me
139:00 - change it like last week
to say Hello, David,
139:02 - or whoever is interacting
with the program.
139:04 - So I'm going to do string
answer gets, get string,
139:07 - quote unquote, what's your name.
139:11 - I'm not going to bother
with a new line here.
139:13 - I could.
139:13 - This is now just a judgment call.
139:15 - I deliberately want the human to
type their name on the same line
139:17 - just because.
139:18 - And how do I now print this?
139:20 - Well last week recall we used say.
139:22 - And then we use the
other block called join.
139:25 - So the idea here is the same.
139:27 - But the syntax this week is
going to be a little different.
139:30 - It's going to be printf, which
prints something on the screen.
139:33 - I'm going to go ahead
and say Hello comma.
139:38 - And let me just go with this initially
with the backslash n, semicolon.
139:43 - Let me go ahead and recompile my code.
139:46 - Whoops, damn doesn't work still.
139:50 - And look at all these errors.
139:51 - There's more errors than code I wrote.
139:54 - But what's going on here?
139:56 - Well, this is actually
something, a mistake you'll see,
139:58 - somewhat often, at least initially.
140:01 - And let's start to glean
what's going on here.
140:03 - So here, if I look at the very first
line of output after the dollar sign--
140:06 - so even though it jumped
down the screen pretty fast,
140:09 - I wrote Make Hello at
the dollar sign, prompt.
140:12 - And then here's the first error.
140:14 - On Hello dot C, line 5--
140:17 - technically character 5, but generally
line is enough to get you going--
140:21 - there's an error, use of
undeclared identifier string.
140:24 - Did you mean standard in?
140:27 - So, I didn't.
140:28 - And this is not an
obvious solution at first.
140:30 - But you'll start to recognize
these patterns in error messages.
140:34 - It turns out that if I want to use
string, I actually have to do this.
140:39 - I have to include another library
up here, another line of code,
140:43 - rather, called CS50
dot H. We'll come back
140:46 - to what this means in just a moment.
140:48 - But if I now retroactively say,
all right, what does standard I/O
140:54 - do for us up here.
140:55 - Before I added that new line,
what is standard I/O doing?
140:59 - Well, if you think
back to Scratch, there
141:01 - were a few examples with the camera and
with the speech to-- the text to voice.
141:07 - Remember I had to poke around
in the extensions button.
141:10 - And then I had to load it into Scratch.
141:12 - It didn't come natively with Scratch.
141:14 - C is quite like that.
141:15 - Some functions come with the language.
141:18 - But for the most part, if you want to
use a function, an action or a verb
141:22 - like printf, you have to load
that extension, so to speak,
141:26 - that more traditionally
is called a library.
141:29 - So there is a standard I/O
library, STD I/O, standard I/O,
141:35 - where I/O just means input and output.
141:37 - Which means, just like
in MIT's World, there
141:39 - was an extension for doing text
to voice or for using your camera.
141:43 - In C, there's an extension, a.k.a.
141:45 - a library, for doing
standard input and output.
141:49 - And so if you want to use any functions
related to standard input and output,
141:53 - like text from a keyboard, you
have to include standard I/O dot
141:58 - H. And then can you use printf.
142:02 - Same goes here.
142:03 - Get string, it turns out, is a
function that CS50 wrote some time ago.
142:08 - And as we'll see over
the coming weeks, it just
142:10 - makes it way easier to
get input from a user.
142:14 - C is very good with printf at
printing output on the screen.
142:18 - C makes it really annoying and
hard, as we'll see in a few weeks,
142:21 - to just get input from the user.
142:23 - So we wrote a function
called get_string,
142:25 - but the only way you can use
that is to load the extension,
142:29 - a.k.a. load the library called CS50.
142:32 - And we'll come back in time, like,
why is it .h, why is it a hash symbol.
142:35 - But for now, standard
I/O is a library that
142:39 - gives you access to printf and
input- and output-related stuff.
142:42 - CS50 is a second library
that provides you
142:45 - with access to functions
that don't come with C
142:48 - that include something like get_string.
142:51 - So with that said, we've
now kind of teased apart
142:55 - at a high level what lines
2 and now 1 are doing.
142:58 - Let me go ahead and rerun make hello.
143:00 - Now it worked.
143:01 - So all those crazy error messages
were resolved by just one fix,
143:05 - so key takeaway is not to get
overwhelmed by the sheer number
143:07 - of errors.
143:08 - Let me now do ./hello and if I type
in my name, what am I going to say?
143:16 - What do you think?
143:19 - Yeah, hello answer, because the
computer is going to take me literally.
143:24 - And it turns out that if
you just write "hello,
143:26 - answer" all in the double quotes,
you're really just passing
143:29 - English as the input
to the printf function,
143:32 - you're not actually
passing in the variable.
143:34 - And unfortunately in
C, it's not quite as
143:37 - easy to plug things in to
other things that you've typed.
143:40 - Remember in Scratch, there
was not just the Save block
143:43 - but the Join block,
which was kind of pretty,
143:45 - you can combine apples and oranges--
143:47 - or was it apple and banana?
143:48 - Then we changed it to hello and then
the answer that the human typed in.
143:52 - In C, the syntax is going
to be a little different.
143:54 - You tell the computer inside of your
double quotes that you want to have
143:59 - a placeholder there, a so-called
format code. %s means, hey, computer,
144:05 - put a string here eventually.
144:08 - Then outside of your quotes, you
just add a comma and then you type
144:12 - in whatever variable you want the
computer to plug in at that %s location
144:18 - for you.
144:19 - So %s is a format code which
serves as a placeholder.
144:23 - And now the printf function
was designed by humans years
144:26 - ago to figure out how to
do the apple and banana
144:28 - thing of joining two words together.
144:30 - It's not nearly as user-friendly
as it is in Scratch,
144:33 - but it's a very common paradigm.
144:35 - So let me try and rerun
this now. make hello.
144:38 - No errors, that's good.
144:40 - ./hello.
144:41 - What's my name, David?
144:42 - If I type Enter now, now it's hello.
144:45 - David.
144:46 - And the printf, here's the F in printf.
144:48 - It formats its input for you by using
these placeholders for things like
144:53 - strings, represented again by %s.
144:58 - So a quick question then, if I focus
here on line 7 for just a moment
145:02 - and even zoom in here, how many
inputs is printf taking as a function?
145:09 - A moment ago, I'll admit that it was
taking one input, "hello, world,"
145:13 - quote unquote.
145:14 - How many inputs might you
infer printf is taking now?
145:19 - 2.
145:20 - And it's implied by this comma here,
which is separating the first one,
145:25 - quote, unquote, "hello, %s"
from the second one, answer.
145:29 - And then just as a quick safety
check here, why is it not 3?
145:32 - Because there's obviously
two commas here.
145:35 - Why is it not actually
3 arguments or inputs?
145:38 - AUDIENCE: [INAUDIBLE]
145:42 - DAVID J. MALAN: Exactly.
145:43 - The comma to the left is actually
part of my English grammar,
145:46 - that's all, so same syntax.
145:47 - And, again, here's where
programming can just be confusing
145:50 - early on because we're using the
same special punctuation to mean
145:52 - different things, it just
depends on the context.
145:55 - And so now is actually
a good time to point out
145:57 - all of the somewhat pretty colors that
have been popping up on the screen
146:01 - here--
146:02 - even though I wasn't going to a format
menu, I wasn't boldfacing things,
146:06 - I certainly wasn't changing
things to red or blue or whatnot--
146:08 - that's because a text editor like
VS Code syntax highlights for you.
146:13 - This is a feature of so many different
programming environments nowadays,
146:17 - VS Code does it as well.
146:18 - If your text editor understands the
language that you're programming in--
146:23 - C, in this case--
146:24 - it highlights in different colors the
different types of ideas in your code.
146:28 - So, for instance, string and
answer here are in black,
146:31 - but get_string a function is in
this sort of nasty brown-yellow
146:35 - here right now, but that's just
how it displays on the screen.
146:38 - The string, though, here in red
is kind of jumping out at me,
146:41 - and that's marginally useful.
146:42 - The %s is in blue.
146:44 - That's kind of nice, because
it's jumping out at me.
146:46 - And so it's just using different colors
to make different things on the screen
146:49 - pop so you can focus on
how these ideas interrelate
146:53 - and, honestly, when you
might make a mistake.
146:55 - For instance, let me accidentally
leave off this quote here.
146:58 - And now all of a sudden,
notice if I delete the quote,
147:03 - the colors start to get a little awry.
147:05 - But if I go back there and put it
back, now everything's back in place.
147:09 - What's another feature
of this text editor?
147:11 - Notice when my cursor is next
to this parenthesis, which
147:15 - demarcates the end of the
inputs to the function,
147:18 - notice that highlighted in green
here is the opening parenthesis.
147:21 - Why?
147:22 - It's just a visually useful
thing, especially when
147:24 - you start writing more and
more code, just to make
147:26 - sure your parentheses are lining up.
147:28 - And that's true for these curly braces
over here on the left and the right.
147:31 - We'll come back to those in a moment.
147:33 - If I put my cursor there, you can
see that these things correspond
147:36 - to one another.
147:37 - So it's nothing in your code
fundamentally, it's just the editor
147:40 - trying to help you, the human, program.
147:42 - And you can even see it,
though it's a little subtle--
147:45 - see these four dots here
and these four dots here?
147:48 - That's my indentation.
147:49 - I configured VS Code to
indent by four spaces, which
147:53 - is a very common convention.
147:54 - Any time I hit the Tab key, this
too can help you make sure--
147:58 - once we have more interesting
and longer programs--
148:00 - that everything lines
up nice and neatly.
148:04 - Phew.
148:05 - All right, any questions
then on printf or more?
148:07 - Yeah.
148:08 - AUDIENCE: [? Would ?]
the printf [INAUDIBLE]??
148:11 - DAVID J. MALAN: Short
answer, yes. printf
148:12 - can handle more than one
type of variable or value.
148:16 - %s is one.
148:17 - We're going to see %i is another
for plugging in an integer.
148:20 - You can have multiple i's, multiple
s's, and even other symbols too.
148:24 - We'll come back to that
in just a little bit.
148:26 - printf can take many more
arguments than just these two.
148:29 - This is just meant to be representative.
148:32 - Yeah, over here.
148:34 - Can you declare variables
within the printf?
148:36 - No.
148:37 - The only variable I'm
using right now is answer,
148:39 - and it's got to be done outside
the context of printf in this case.
148:43 - Good question, we'll see
more of that before long.
148:46 - Yeah, in back.
148:47 - AUDIENCE: [INAUDIBLE]
148:49 - DAVID J. MALAN: How do we
download the CS50 library?
148:51 - So we will show you in problems
set 1 exactly how to do that.
148:55 - It's automatically done for you in
our version of VS Code in the cloud.
148:58 - If, ultimately, you program on your own
Mac or PC, either initially or later
149:01 - on, it's also installable online.
149:03 - But if you want to ask that
via online or afterward,
149:07 - we can point you in the right direction.
149:08 - But PSet 1 will itself.
149:10 - Yeah.
149:11 - AUDIENCE: [INAUDIBLE]
149:13 - DAVID J. MALAN: String is the type
of the variable or, more properly,
149:16 - the data type of the variable.
149:19 - int is another keyword I alluded
to earlier, I haven't used it yet.
149:22 - int, for integer, is going to be
another type, or data type, of variable.
149:26 - AUDIENCE: OK. [? Thank you. ?]
149:27 - DAVID J. MALAN: Yeah.
149:28 - AUDIENCE: [INAUDIBLE]
149:29 - DAVID J. MALAN: Oh, good question.
149:31 - Could I go ahead and just
plug in this function,
149:34 - kind of like we did in Scratch,
getting rid of the variable altogether
149:39 - and just do this, which
recall, is reminiscent of what
149:42 - I did in Scratch by plopping
block on top of block on block?
149:45 - Am I answering that right?
149:48 - Can I put string in front of get_string?
149:50 - No.
149:50 - You only put the word string
in front of a variable
149:53 - that you want to make string.
149:55 - And even though I'm apparently
answering the wrong question,
149:57 - let me go ahead and zoom out,
save this, do make hello again.
150:01 - Seems to compile OK.
150:03 - If I run ./hello, type in David, voila.
150:06 - That, too, works.
150:07 - And so, actually, let's go down
this rabbit hole for just a moment.
150:10 - Clearly, it's still correct--
150:12 - at least, based on my limited testing.
150:14 - Is this better designed
or worse designed?
150:18 - Let's open that question
like we did last week.
150:20 - Yeah?
150:21 - Yeah, I kind of agree with that.
150:23 - Reasonable people could
disagree, but I do
150:26 - agree that this seems harder to
read because I start reading here,
150:29 - but wait a minute. get_string
is going to get used first,
150:32 - and then it's going to
give me back a value.
150:34 - So, yeah, it just feels like it
was nicer to read top to bottom,
150:37 - I would say.
150:38 - Your thoughts?
150:38 - AUDIENCE: [INAUDIBLE]
150:39 - DAVID J. MALAN: Yeah.
150:40 - And so this is useful if I only want
to print out the person's name once.
150:44 - If I want to use it later in a
longer program, I'm out of luck,
150:47 - and so I haven't saved it in a variable.
150:49 - So I think, long story short, we
could debate this all day long.
150:53 - But in this case, eh, if you can
make a reasonable argument one
150:56 - way or the other, that's a
pretty solid ground to stand on.
150:59 - But, invariably,
reasonable people are going
151:01 - to disagree, whether first-time
programmers or many years after that.
151:05 - So let's frame this one last example
in the context of the same process
151:09 - of taking inputs and outputs.
151:11 - The functions we've
been talking about all
151:13 - take inputs, otherwise now known as
arguments, or parameters, pretty much
151:17 - synonymous.
151:18 - That's just the fancy word
for an input to a function.
151:21 - And some functions have either
side effects, like we saw--
151:25 - printing something, saying
something on the screen,
151:27 - sort of visually or audibly--
151:28 - or they return a value, which is a
reusable value, like name or answer,
151:33 - in this case.
151:35 - If we look then at what we did last
time in the world of Scratch last week,
151:39 - the input was what's your
name, the function was ask,
151:41 - and the return value was answer.
151:44 - And now let's take a look at this block,
which is honestly a more user-friendly
151:49 - version of what we just did with the %s.
151:51 - Last week we said save, then
join, then hello and answer.
151:54 - But the interesting takeaway there
was not how to say hello anything.
151:58 - It was the fact that in Scratch
2, the output of one function,
152:03 - like the green join, could become
the input to another function,
152:08 - the purple say.
152:09 - The syntax in C is
admittedly pretty different,
152:12 - but the idea is essentially the same.
152:14 - Here, though, we have
hello, a placeholder,
152:18 - but we have to, in this
world of C, tell printf
152:21 - what we want to plug in
for that placeholder.
152:25 - It's just different.
152:25 - But that's the way to do it.
152:27 - When we get to Python and other
languages later in the term,
152:29 - there's actually easier ways to do this.
152:31 - But this is a very common
paradigm, particularly when
152:34 - you want to format
your data in some way.
152:37 - All right, let's then take a
step back to where we began,
152:40 - which was with that whole
program, which had the include
152:43 - and it had int main(void) and
all of this other cryptic syntax.
152:47 - This Scratch piece last week
was kind of like the go-to
152:51 - whenever you want to have a
main part of your program.
152:53 - It's not the only way to
start a Scratch program.
152:55 - You could listen for clicks or other
things, not just the green flag.
152:59 - But this was probably the most popular
place to start a program in Scratch.
153:03 - In C, the closest analog is
to literally write this out.
153:07 - So just like last week, if you were
in the habit of dragging and dropping
153:10 - when green flag clicked,
as a C programmer,
153:13 - the first thing you would do is
after creating an empty file,
153:15 - like I did with hello.c,
you'd probably type int
153:18 - main(void) open curly
brace, closed curly brace,
153:22 - and then you can put all of your
code inside of those curly braces.
153:26 - So just like Scratch had
this sort of magnetic nature
153:29 - to it where the puzzle pieces would snap
together, C, as a text-based language,
153:33 - tends to use these curly braces, one
of them opened, the other one closed.
153:38 - And anything inside of
those braces, so to speak,
153:41 - is part of this puzzle piece, a.k.a.
153:44 - main.
153:45 - So what was atop them?
153:47 - We went down this rabbit hole moment ago
with these things called header files,
153:50 - even though I didn't
call them by this name.
153:52 - But, indeed, when we have a whole
program in Scratch, super easy.
153:56 - Just have the one green flag
clicked and then say hello, world.
153:59 - There's no special syntax.
154:00 - After all, it's meant to be very
user-friendly and graphical.
154:03 - In C, though, you technically can't just
put int main(void) printf hello, world.
154:09 - You also need this.
154:10 - Because, again, you need to tell
the compiler to load the library--
154:16 - code that someone else wrote-- so that
the compiler knows what printf even is.
154:22 - You have to load the
CS50 library whenever
154:24 - you want to use get_string or
other functions, like get_int,
154:28 - as we'll soon see.
154:29 - Otherwise, the compiler won't
know what get_string is.
154:32 - You just have to do it this way.
154:35 - The specific file name
I'm mentioning here,
154:37 - stdio.h, cs50.h, is what C programmers
called a call a header file.
154:44 - We'll see eventually what's
inside of those files.
154:46 - But long story short, it's like a menu
of all of the available functions.
154:51 - So in cs50.h, there's a menu
mentioning get_string, get_int,
154:54 - and a bunch of other stuff.
154:56 - And in stdio.h, there's a menu of
functions, among which are printf.
155:01 - And that menu is what
prepares the compiler
155:04 - to know how to implement
those same functions.
155:08 - All right, let me pause here.
155:10 - Question.
155:11 - AUDIENCE: [INAUDIBLE]
155:15 - DAVID J. MALAN: Not quite.
155:16 - A library provides all of the
functionality we're talking about.
155:20 - A header file is the very specific
mechanism via which you include it.
155:25 - And we'll discuss this more next week.
155:27 - For now, they're essentially
the same, but we'll discuss
155:30 - nuances between the two next week.
155:32 - Yeah, the library would be standard
I/O. The library would CS50.
155:36 - The corresponding header
file is stdio.h, cs50.h.
155:41 - Indeed.
155:42 - Other questions.
155:42 - Yeah.
155:43 - AUDIENCE: [INAUDIBLE]
155:45 - DAVID J. MALAN: Indeed.
155:46 - That, too, is on the menu.
155:48 - We'll come back to that.
155:49 - But the word string--
155:50 - incredibly common in the world of
programming, it's not a CS50 idea--
155:54 - but in C, there's technically no
such data type as string by default.
155:59 - We have sort of conjured it up
to simplify the first few weeks.
156:02 - That's a training wheel that we'll
very deliberately, in a few weeks,
156:05 - take away, and we'll see why we've
been using get_string and string.
156:09 - Because C otherwise makes things
quite more challenging early on,
156:14 - which then gets besides
the point for us.
156:16 - Yeah.
156:17 - AUDIENCE: [INAUDIBLE]
156:19 - DAVID J. MALAN: Yes.
156:20 - Early on, you will have to use whatever
is prescribed by the specification.
156:23 - That will include CS50's functions.
156:24 - Long story short, you referred, I
think, a moment ago to another function
156:28 - called scanf, we won't
talk about for a few weeks.
156:30 - Long story short, in C, it's pretty easy
and possible to get input from a user.
156:36 - The catch is that it's really
easy to do it dangerously.
156:40 - And C, because it's an older,
lower-level language, so to speak,
156:45 - that gives you pretty much ultimate
control over your computer's hardware.
156:49 - It's very easy to make mistakes.
156:51 - And, indeed, that's too
why we use the library,
156:55 - so your code won't crash unintendedly.
156:58 - All right, so with this in
mind, we have this now mapping
157:01 - between the Scratch
version and the other.
157:03 - Let me just give you a quick tour of
some of the other placeholders and data
157:06 - types that students will start seeing as
we assemble more interesting programs.
157:10 - In the world of Linux, here
is a non-exhaustive list
157:13 - of commands with which you'll get
familiar over the next few weeks
157:16 - by playing with problem sets.
157:18 - We've only seen two of these so
far, ls for list, rm for others.
157:22 - But I mention them now
just so that it doesn't
157:24 - feel too foreign when you see them
on screen or online in a problem set.
157:30 - cp is going to stand for copy.
157:32 - mkdir is going to stand
for make directory. mv is
157:35 - going to stand for move or rename.
157:38 - rmdir is going to be remove directory,
and cd is going to be for change /
157:44 - and let me show you this
last one here first,
157:46 - only because it's something
you'll use so commonly.
157:49 - If I go back to my code here on
the screen, I'm going to go ahead
157:53 - and re-open the little GUI on the
left-hand side, the so-called Explorer,
157:58 - revealing that I've got two
files, hello and hello.c
158:01 - so nothing has changed since there.
158:02 - Suppose now that it's
a few weeks into class
158:05 - and I want to start
organizing the code I'm
158:07 - writing so that I have a folder
for this week or next week,
158:10 - or maybe a folder for
problem set 1, problem set 2.
158:13 - I can do this in a few ways.
158:15 - In the GUI, I can go up
here and do what most of you
158:18 - would do instinctively on a Mac or PC.
158:19 - You look for like a
folder icon, you click it,
158:22 - and then you name a
folder like PSet1, Enter.
158:25 - Voila, you've got a folder called PSet1.
158:28 - I can confirm as much with my command
line interface by typing what command?
158:34 - How can I list what's in my folder?
158:36 - Yeah, so ls for list.
158:38 - And now I see hello--
158:39 - and it's green with an
asterisk because that's
158:41 - my executable, my runnable program--
158:43 - hello.c, which is my source
code, and now PSet1 with a slash
158:46 - at the end, which just implies
that it's indeed a folder.
158:50 - All right, I didn't really
want to do it that way.
158:52 - I'd like to do it more advanced.
158:53 - So let me go ahead and right-click
on PSet1, delete permanently.
158:57 - I get a scary irreversible
error message.
158:59 - But there's nothing
in it, so that's fine.
159:01 - Now I've deleted it using the GUI.
159:03 - But now let me go ahead and start doing
the same thing from the command line.
159:08 - And if you're wondering how
things keep disappearing,
159:11 - if you hit Control-L in your terminal
window or explicitly type clear,
159:15 - it will delete everything you previously
typed just to clean things up.
159:18 - In practice, you don't need
to be doing this often.
159:20 - I'm doing it just to keep our
focus on my latest commands.
159:23 - If I do-- what was the command
to make a new directory?
159:26 - AUDIENCE: [INAUDIBLE]
159:28 - DAVID J. MALAN: Yeah, so
mkdir, make directory.
159:30 - Let me create PSet1, Enter.
159:32 - And notice at left, there's my PSet1.
159:34 - If I want to get a little
overzealous, plan for next week,
159:37 - here's my PSet2 directory.
159:39 - Suppose now I want to open those
folders on a Mac or PC or in this GUI,
159:44 - I could double-click on
it like this, and you'd
159:46 - see this little arrow is moving.
159:48 - It's not doing anything because there's
nothing in there, but that's fine.
159:51 - But suppose again I want to get more
comfortable with my command line.
159:55 - Notice if I type ls now, I
see all four same things.
159:59 - Let me change directories
with cd space PSet1 Enter.
160:05 - And now notice two things
will have happened.
160:08 - One, my prompt has changed
slightly to remind me where I am,
160:14 - just to keep me sane so that I don't
forget what folder I'm actually in.
160:17 - So here is just a visual reminder
of what folder I'm currently in.
160:21 - If I type ls now, what should
I see after hitting Enter?
160:26 - Nothing, because I've only
created empty folders so far.
160:29 - And, indeed, I see nothing.
160:31 - If I wanted to create a folder called
Mario for a program that might be
160:35 - called Mario this week, I can do that.
160:37 - Now if I type ls, there is Mario.
160:40 - Now if I do cd Mario,
notice my prompt's going
160:42 - to change to be a little more precise.
160:44 - Now I'm in PSet1/Mario.
160:47 - And notice what's happening at top left.
160:49 - Nothing now, because these
folders are collapsed.
160:51 - But if I click the little
triangle, there I see Mario.
160:54 - Nothing's going on in there
because there's no files yet.
160:56 - But suppose now I want to
create a file called mario.c.
161:00 - I could go up here, I could click the
little plus icon, and use the GUI.
161:04 - Or I can just type code mario.c.
161:07 - Voila.
161:08 - That creates a new tab for me.
161:10 - I'm not going to write any code in here
yet, but I am going to save the file.
161:13 - And now at top left, you'll
see that mario.c appears.
161:16 - So at some point, you can
eventually just close the Explorer.
161:19 - Because, again, it's not providing
you with any new information.
161:22 - It's maybe more
user-friendly, but there's
161:23 - nothing you can't do at the command
line that you could do with the GUI.
161:27 - All right, but now I'm kind of stuck.
161:29 - How do I get out of this folder?
161:32 - In my Mac or PC world,
I'd probably click
161:34 - the Back button or something like that
or just close it and start all over.
161:37 - In the terminal window,
I can do cd dot dot.
161:42 - Dot dot is a nickname, if you
will, for the parent directory.
161:46 - That is, the previous directory.
161:48 - So if I hit Enter now, notice I'm
going to close the Mario folder,
161:52 - a.k.a. directory, and
now I'm back in PSet1.
161:56 - Or, if I want to be fancy, let me
go back into Mario temporarily.
162:00 - If I type ls, there's
mario.c, just to orient us.
162:03 - If I want to do multiple things
at a time, I could do cd../..
162:09 - which goes to my parent to my
grandparent all in one breath.
162:13 - And voila, now I'm back in my
default folder, if you will.
162:16 - And one last little trick of the
trade, if I'm in PSet1/Mario like I
162:20 - was a moment ago, and you're
just tired of all the navigation,
162:24 - if you just type cd and
hit Enter, it'll whisk you
162:26 - away back to your default
folder, and you don't have
162:29 - to worry about getting there manually.
162:31 - Recall a bit ago, though, that I
was running hello as this, ./hello.
162:38 - If dot refers to my parent,
perhaps infer here syntactically,
162:42 - what does a single dot mean instead?
162:46 - It means this directory,
your current directory.
162:49 - Why is that necessary?
162:50 - It just makes super
explicit to the computer
162:52 - that I want the program called
hello that's installed here,
162:55 - not in some random other folder
on my hard drive, so to speak.
162:59 - I want the one that's
right here instead.
163:02 - All right, so besides
these commands, there's
163:04 - going to be others that
we encounter over time.
163:06 - Those are kind of the basics.
163:07 - That allows you to wean yourself off
of a GUI, Graphical User Interface,
163:11 - and start using more comfortably,
with practice and time,
163:14 - a command line interface instead.
163:16 - Well, what about those other
types, now back in the world of C?
163:19 - Those commands were not C. Those are
just command-specific to a command line
163:23 - interface, like in Linux, which,
again, we're using in the cloud.
163:28 - It's an alternative
to Mac OS and Windows.
163:30 - Back in the world of C now, we've
seen strings, which are words.
163:34 - I mentioned int or integer,
but there's others as well.
163:38 - In the world of C, we've
seen string, we will see int.
163:42 - If you want a bigger integer, there's
something literally called a long.
163:46 - If you want a single character,
there's something called a char.
163:49 - If you want a Boolean value,
true or false, there is a bool.
163:53 - And if you want a floating-point value--
163:56 - a fancy way of saying a real number,
something with a decimal point in it--
163:59 - that is what C and other
languages call a float.
164:03 - And if you want even more numbers
after the decimal point that
164:06 - is more precision, you can
use something called a double.
164:10 - That is to say, here is, again,
an example in programming
164:14 - where it's up to you now to provide
the computer with hints, essentially,
164:17 - that it will rely on to know what
is this pattern of zeros and ones.
164:21 - Is it a number, a letter?
164:23 - Is it a sound, an image,
a color, or the like?
164:26 - These are the types of data types
that provide exactly those hints.
164:30 - What are the functions that come in
the menu that is the CS50 library?
164:35 - We talked about standard I/O, and
that's just one function so far, printf.
164:39 - In the CS50 library, you can
see that it follows a pattern.
164:42 - The C50 library exists largely
for the first few weeks
164:45 - of the class to make our lives easier
when you just want to get user input.
164:50 - So if you want to get a string,
like a word or words from the human,
164:53 - you use get_string.
164:54 - If you want to get an integer from
the user, you're going to use get_int.
164:57 - When you want to get any of those
other data types, for the most part,
165:01 - you use get_ something else.
165:03 - And they're indeed all
lowercase by convention.
165:06 - What about printf?
165:07 - If we have the ability now to
store different types of data
165:10 - and we have functions with which
to get different types of data,
165:13 - how might you go about printing
different types of data?
165:16 - Well, we've seen %s for string,
%i for integer, %c for char,
165:23 - %f for a float or a double, those
real numbers I described earlier,
165:30 - and then %li for a long integer.
165:33 - So here's the first
example of inconsistencies.
165:36 - In an ideal world, that would
just be %l and we'd move on.
165:38 - It's %li instead in this case.
165:42 - That's printf and some
of its format codes.
165:45 - What more might we do?
165:47 - Well, in C, as we'll see--
165:49 - no pun intended-- there is
a whole bunch of operators.
165:51 - And, indeed, computers, one
of the first things they did
165:54 - was a lot of math and calculations, so
there's a lot of operators like these.
165:57 - Computers, and in turn, C, really
good at addition, subtraction,
166:01 - multiplication, division,
and even the percent sign,
166:04 - which is the remainder operator.
166:05 - There's a special symbol
in C and other languages
166:08 - just for getting the remainder, when
you divide one number by another.
166:13 - There are other features in the world
of C, like variables, as we've seen.
166:18 - And there's also what is of
playfully called syntactic sugar that
166:22 - makes it easier over time
to write fewer characters
166:27 - but express your thoughts the same.
166:29 - So just as a single example
of this, as a single example,
166:33 - consider this use of
a variable last week.
166:37 - Here in Scratch is how you might
set a variable called counter to 0.
166:41 - In C, it's going to be similar.
166:43 - If you want the variable
to be called counter,
166:46 - you literally write the word counter,
or whatever you want it to be called.
166:49 - You then use the assignment
operator, a.k.a. the equals sign,
166:53 - and you assign it whatever its initial
value should be here on the right.
166:56 - So, again, the 0 is going to get copied
from right to left into the variable
167:01 - because of that single equal sign.
167:02 - But this isn't sufficient
in C. What else
167:05 - is missing on the right-hand
side, instinctively now?
167:08 - Even if you've never
programmed in this before.
167:11 - Yeah, in front.
167:12 - AUDIENCE: Semicolon.
167:13 - DAVID J. MALAN: A semicolon at the end.
167:14 - And one other thing, I
think, is probably missing.
167:16 - Again.
167:17 - AUDIENCE: A data type.
167:18 - DAVID J. MALAN: A data type.
167:19 - So if we can keep going
back and forth here,
167:22 - what data type seems appropriate
intuitively for counter?
167:26 - int for integer.
167:27 - So, indeed, we need to
tell the computer when
167:29 - creating a variable what
type of data we want,
167:32 - and we need to finish our
thought with the semicolon.
167:35 - So there might be a counterpart there.
167:38 - What about in Scratch if we wanted
to increment that counter variable?
167:43 - We had this very user-friendly
puzzle piece last time
167:45 - that was change counter
by 1, or add 1 to counter.
167:49 - In C, here's where things get
a little more interesting.
167:54 - And pretty commonly done, you might
do this. counter = counter + 1;
167:58 - with a semicolon.
167:59 - And this is where, again, it's
important to note, the equal sign,
168:02 - it's not equality.
168:03 - Otherwise, this makes no sense.
168:05 - counter cannot equal
counter plus 1, right?
168:08 - That just doesn't work if we're
talking about integers here.
168:11 - That's because the equal
sign is assignment.
168:13 - So it can certainly be the
case that you calculate
168:15 - counter plus 1, whatever that is,
then you update the value of counter
168:19 - from right to left to be that new value.
168:22 - This, as we'll see,
is a very common thing
168:25 - to do in programming just to kind of
count upward, for whatever reason.
168:29 - You can write this more succinctly.
168:30 - This code here is what we'll
call syntactic sugar, sort
168:34 - of a fancy way of saying the same thing
with fewer words or fewer characters
168:39 - on the screen.
168:40 - This also adds 1, or whatever
number you type over here,
168:44 - to the variable on the left.
168:46 - And there's one other form of syntactic
sugar we're going to start seeing too,
168:49 - and it's even more terse than this.
168:51 - That too will increment counter by 1
by literally changing its value by 1.
168:56 - Or if you change it to minus
minus, subtracting 1 from it.
168:59 - You can't do that with
2 and 3 and 4, but you
169:02 - can do it by default with just plus plus
or minus minus adding or subtracting 1.
169:07 - Yeah.
169:08 - AUDIENCE: [INAUDIBLE]
169:12 - DAVID J. MALAN: Ah, so when you are
changing a variable that already
169:15 - has been created, as we did with
the code that looked like this,
169:20 - you no longer need to remind the
computer what the data type is.
169:23 - Thankfully, the computer is
at least as smart as that.
169:27 - It will remember the type of
the data that you intended.
169:31 - Other questions or comments on this?
169:34 - All right, that's quite a lot.
169:36 - Why don't we go ahead and
here take a 10-minute break?
169:38 - And we'll be back, we'll
start writing some code.
169:41 - All right, so we are back.
169:44 - We've just looked at some
of the basics of compiling,
169:48 - even if it doesn't
quite feel that basic.
169:50 - But now, let's actually
start focusing really
169:52 - on writing more and more code,
more and more interesting
169:55 - code, kind of like we dove
into Scratch last week.
169:58 - So here I have these code open.
170:00 - I've closed the GUI.
170:01 - I'm going to focus more on my
terminal window and my code editors.
170:04 - Many different ways I can create new
files, but I want to create something
170:07 - called a calculator.
170:08 - So, again, within this
environment of VS Code,
170:11 - I can literally write the code
command which is VS Code specific,
170:15 - and it just creates a new
file for me automatically.
170:18 - Or I could do that in the GUI.
170:20 - I'm going to go ahead and create
this file called calculator.c
170:23 - and I'm going to go ahead and
include some familiar things.
170:25 - So I'm just going to go ahead and
proactively include cs50.h, stdio.h.
170:30 - I'm going to go ahead from
memory and do the int void main--
170:33 - more on that next week, why it's
int, why it's void, and so forth.
170:38 - And now let me just implement
a very simple calculator.
170:40 - We saw some mathematical
operators, like plus and the like.
170:44 - So let's actually use this.
170:45 - So let me go ahead and
first give myself a variable
170:48 - called x, sort of like grade
school math or algebra.
170:52 - Let me go ahead then and
get an int, which is new,
170:55 - but I mentioned this exists.
170:57 - And then let me just ask the user
for whatever their x value is.
171:00 - The thing in the quotes is
just the English, or the string
171:03 - that I'm printing on the screen.
so I could say anything I want.
171:06 - I'm just going to say x colon
to prompt the user accordingly.
171:09 - Now I'm going to go ahead and
get another variable called y.
171:12 - I'm going to get int again.
171:13 - And now, I'm going to
prompt the user for y.
171:16 - And I'm just very nitpickly
using a space just
171:18 - to move the cursor so it doesn't
look too messy on the screen.
171:22 - And then lastly, let me go ahead and
just print out the sum of x and y.
171:27 - In an ideal world, I would just
say something like printf x + y.
171:31 - But that is not valid in C. The
first argument, recall, in printf
171:36 - has to be a string in double quotes.
171:39 - So if I want to print out
the value of an integer,
171:43 - I need to put something in quotes
here, maybe followed by a newline,
171:47 - if I want to move the cursor as well.
171:49 - So, again, we only glimpsed
it briefly, but what
171:51 - do I replace these question marks with
if I want a placeholder for an integer?
171:55 - AUDIENCE: [INAUDIBLE]
171:56 - DAVID J. MALAN: Yeah, so %i.
171:57 - Just like %s was string, %i is integer.
172:00 - So I change this %i.
172:02 - And now if I want to add x and y, for
instance, super-- simple calculator,
172:06 - doesn't do much of anything other
than addition of two integers--
172:09 - I think this works.
172:11 - And, again, it looks definitely
cryptic at first glance.
172:14 - It would be if programming
weren't this cryptic.
172:16 - Other languages will
clean this up for us.
172:18 - But, again, if you focus on the
basics, printf takes one input first--
172:22 - which is a format string with
English or whatever language,
172:26 - some placeholders, maybe--
172:27 - then it takes potentially more
arguments after the comma,
172:31 - like the value of x plus y.
172:33 - All right, let me go ahead
now and make calculator,
172:36 - which, again, compiles
my source code in C,
172:41 - pictured above, and converts
it into corresponding machine
172:44 - code, or zeros and ones.
172:46 - No error messages.
172:47 - so that's already good.
172:48 - Now I do ./calculator.
172:50 - Let's do 1 plus 1 and Enter.
172:53 - Voila.
172:54 - Now I have the makings of a calculator.
172:57 - Now let's start to tinker
with this a little bit.
173:00 - What if I instead had done this?
173:02 - int z = x + y and then plug-in z here.
173:08 - If I rerun make calculator, Enter,
rerun ./calculator, type in 1 plus 1,
173:14 - still equals 2, and let me claim that
it will work for other values as well--
173:20 - which of these versions
is better designed?
173:22 - If both seem to be correct at very
cursory glance, is this version better
173:27 - or is the previous one without the z?
173:30 - OK, so this one is arguably better
because I've now got a reusable
173:34 - variable called z that I
cannot only print but, heck,
173:36 - if my program is longer,
I can use it elsewhere.
173:39 - Counterthoughts?
173:40 - AUDIENCE: [INAUDIBLE]
173:41 - DAVID J. MALAN: Yeah.
173:42 - Debatable, like before, because
it depends on my intent.
173:44 - And, honestly, I think
a pretty good argument
173:46 - can be made for the first version.
173:48 - Because if I have no
intention of-- as you note--
173:50 - using that variable
again, you know what?
173:53 - Maybe I might as well do
this, just because it's
173:55 - one less thing to think about.
173:57 - It's one less distraction.
173:58 - It's one less line of code
to have to understand.
174:00 - It's just a little tighter.
174:02 - So here, again, it does
depend on your intention.
174:04 - But this field is pretty reasonable.
174:07 - And I think, as someone
noted earlier, when
174:09 - I did the same thing with get_string,
that, yeah, maybe kind of crossed
174:13 - s line because get_string and the
what's your name inside of it,
174:16 - it was just so much longer.
174:17 - But x + y, eh, it's not that hard
to wrap our mind around what's
174:20 - going on inside of the printf argument.
174:23 - So, again, these are the kinds
of thoughts that hopefully you'll
174:25 - acquire the instinct for
on not necessarily reaching
174:28 - the same answer as someone
else, but, again, the thought
174:30 - process is what matters here.
174:33 - All right, so how might I enhance
this program a little bit?
174:36 - Let's just talk about
style for just a moment.
174:38 - So x and y, at least in this case,
are pretty reasonable variable names.
174:42 - Why?
174:43 - Because that's the go-to
variable names in math
174:45 - when you're adding two things together.
174:47 - So x and y seem pretty reasonable.
174:48 - I could have done something like,
well, maybe my first variable
174:53 - should be called first
number and my next variable
174:56 - should be called second number.
174:58 - And then down here, I
would have to change this
175:00 - to first number plus second number.
175:04 - Like, eh, this isn't really
adding anything semantically
175:07 - to help my comprehension.
175:08 - But that would be one other
direction we could have taken things.
175:11 - So if you have very simple
ideas that are conventionally
175:14 - expressed with common variable names
like x and y, totally fine here.
175:18 - What if I want to annotate this program
and remind myself what it is it does?
175:22 - Well, I can add in C
what are called comments.
175:25 - With a slash slash, two forward slashes,
you can write a note to yourself,
175:30 - like prompt user for x.
175:32 - And then down here, I could
do something like prompt user
175:35 - for y, just to remind
myself what I'm doing there.
175:37 - And down here, perform addition.
175:40 - Now, in this case, I'm not
sure these commands are really
175:42 - adding all that much.
175:44 - Because in the time it took me to write
and eventually read these comments,
175:47 - I could have just read
the three lines of code.
175:49 - But as our programs
get more sophisticated
175:52 - and you start to learn more syntax--
175:55 - that, honestly, you might forget
the next day, the next week,
175:58 - the next month-- might be useful
to have these notes to self that
176:01 - reminds you of what your
code is doing or maybe even
176:04 - how it is doing that thing.
176:06 - With these early programs,
not really necessary,
176:09 - doesn't really add all that
much to our comprehension,
176:11 - but it is a mechanism
you have in place that
176:14 - can help you actually remind
yourself or remind someone
176:18 - else what it is that's going on.
176:20 - Well, let me go ahead and rerun
this again in this current version,
176:23 - make calculator.
176:24 - And here, too, you might
think I'm typing crazy fast--
176:27 - not really.
176:27 - I'm hitting Tab a lot.
176:28 - So it turns out that
Linux, the operating system
176:32 - we're using here in the cloud--
176:33 - but, actually, Windows and Mac
OS nowadays support this too--
176:36 - supports autocomplete.
176:38 - So if you only have one
program that starts with C-A-L,
176:42 - you don't have to finish writing
calculator, you can just hit Tab,
176:45 - and the computer will
finish your thought for you.
176:47 - The other thing you can do is
if you hit Up and keep going up,
176:51 - you'll scroll through your
entire history of commands.
176:54 - So there too, I've been
saving some keystrokes
176:56 - by hitting Up quickly rather than
retyping the same darn thing again
176:59 - and again.
176:59 - So, again, just another
little convenience
177:02 - to make programming and interacting with
the command line interface even faster.
177:05 - All right, let me go ahead and just make
sure it's compiled in the current form.
177:09 - The comments have no functional impact.
177:11 - These green things are
just notes to self.
177:13 - Let me run calculator with
maybe-- how about this?
177:15 - Instead of 1 plus 1,
how about 1 billion--
177:22 - whoops, let's do that again.
177:23 - Wa, da, da.
177:24 - 1 million, 1 billion, and another 1
billion, and that answer is 2 billion.
177:30 - All right, so that seems correct.
177:31 - Let's run this program one more time.
177:33 - How about 2 billion
plus another 2 billion?
177:39 - Did you know that?
177:42 - So, apparently, it's not so correct.
177:45 - And, clearly, running 1 plus 1 was
not the most robust testing of my code
177:49 - here.
177:50 - What might have gone wrong?
177:53 - What might have gone wrong?
177:54 - Yeah.
177:55 - AUDIENCE: [INAUDIBLE]
177:57 - DAVID J. MALAN: Yeah.
177:58 - The computer probably ran
out of space with bits.
178:00 - So it turns out with these data types--
we've been talking about string and int
178:05 - and also float and char and those
other things-- they all use a specific,
178:09 - and, most importantly, finite
number of bits to represent them.
178:13 - It can vary by computer.
178:14 - Newer computers use more bits, older
computers tended to use fewer bits.
178:18 - It's not necessarily standardized
for all of these data types.
178:21 - But in this case, in this environment,
it is using 32 bits for an integer.
178:28 - That's a lot.
178:28 - So with 32 bits, you
can count pretty high.
178:30 - This is 64 light bulbs on the
stage and could count even higher.
178:34 - An int is only using half of these, or
we have two integers here on the stage.
178:38 - Now, if you think back to last week,
we talked about 8 bits at one point.
178:42 - And if you have 8 bits, 8 zeros and
ones, you can count as high as 256--
178:47 - just a good number to
generally remember as trivia.
178:49 - 8 bits gives you 256
permutations of zeros and ones.
178:53 - 32 gives you roughly how
many, if anyone knows?
178:57 - It's 2 to the 32 power.
178:59 - So it's roughly 4 billion, 2 to the 32.
179:02 - If you don't know that, it's fine.
179:04 - Most programmers, though, eventually
remember these kinds of heuristics.
179:07 - So it's roughly 4 billion.
179:08 - So that feels like enough.
179:10 - 2 billion plus 2 billion
is exactly 4 billion.
179:13 - And that actually should
fit in a 32-bit integer.
179:17 - The catch is that my Mac,
your PC, and the like
179:20 - also like to support negative numbers.
179:22 - And if you want to support both positive
and negative numbers, that technically
179:26 - means with 32-bit integers,
you can count as high
179:29 - as roughly 2 billion positive
or 2 billion negative
179:33 - in the other direction.
179:34 - That's still 4 billion, give or
take, but it's only half as many
179:38 - in one direction or the other.
179:39 - So how could I go about implementing
a correct calculator here?
179:44 - What might the solution be?
179:47 - Yeah, so not just li,
which was for long integer.
179:50 - I have to make one more change,
which is to the data type itself.
179:54 - So let me go back up here and change
x from an int to a long, a.k.a.
179:59 - long integer.
180:00 - And then let me change y as well.
180:02 - And then let me change the format code
per the little cheat sheet we had up
180:05 - a few minutes ago to li.
180:07 - Let me recompile the calculator--
180:10 - seems to work OK.
180:11 - Let's rerun it.
180:12 - Now let's do 1 plus 1.
180:14 - That's should obviously be the same.
180:15 - Now let's do 2 billion
and another 2 billion
180:20 - and cross our fingers this time.
180:22 - Now we're counting as high as 4 billion.
180:24 - And we can go way higher than
4 billion, but we're only
180:27 - kicking the can down the street a bit.
180:29 - Even though we're now using--
180:31 - with a long--
180:32 - 64 bits, which is as long as this
stage now, that's still a finite value.
180:37 - It might be a really big
value, but it's still finite.
180:40 - And we'll come back at the
end of today to these kinds
180:42 - of fundamental limitations.
180:44 - Because arguably now, my calculator
is correct for like millions,
180:48 - billions of possible inputs but not all.
180:51 - And that's problematic
if you actually want
180:53 - to use my calculator for any
possible inputs, not just
180:58 - ones that are roughly less than,
say, 2 billion, as in this case.
181:03 - All right, any questions then on that?
181:05 - But it's really just a
precursor for all the problems
181:07 - that we're going to have to
eventually deal with later on.
181:10 - AUDIENCE: [INAUDIBLE]
181:15 - DAVID J. MALAN: A good question.
181:17 - Yes.
181:17 - If we were still using z, we would
also have to change it to a long.
181:20 - Otherwise, we'd be ignoring
32 of the bits that
181:23 - had been added together via the longs.
181:25 - Good question.
181:27 - All right, so how about we spice things
up with maybe not just addition here,
181:32 - how about something
with some conditions?
181:35 - Let's start to ask
some actual questions.
181:37 - So a moment ago, recall that we had
just the declaration of variables.
181:44 - Now let's look back at
something in Scratch that
181:46 - looked a little something like
this, a bunch of puzzle pieces
181:48 - asking questions by way
of these conditionals
181:50 - and then these Boolean expressions
here in green, maybe saying something
181:53 - like x is less than y.
181:55 - In C, this actually maps pretty cleanly.
181:58 - It's much cleaner from left to right
than it was with printf and join.
182:02 - Here, we have just code
that looks like this.
182:04 - If, a space, two parentheses
and then x less than y,
182:09 - and then we have something like
printf there in the middle.
182:12 - So here, it's actually
kind of a nice mapping.
182:14 - Notice that, just as the
yellow puzzle piece in Scratch
182:16 - is kind of hugging the
purple puzzle piece,
182:18 - that's effectively the role that
these curly braces are playing.
182:21 - They're sort of encapsulating
all of the code on the inside.
182:24 - The parentheses represent
the Boolean expression
182:27 - that needs to be asked and answered to
decide whether or not to do this thing.
182:32 - And here's an exception to
what I alluded to earlier.
182:34 - Usually, when you see a word and
then a parenthesis, something,
182:38 - and then closed parenthesis, I
claimed that's usually a function.
182:42 - And I'm still feeling pretty
good about that claim.
182:44 - But there are exceptions.
182:45 - And the word if is not a function.
182:48 - It's just a programming construct.
182:50 - It's a feature of the C language
that similarly uses parentheses, just
182:55 - for different purposes
for a Boolean expression.
182:58 - How about something like this?
182:59 - Last week, if you wanted to
have a two-way fork in the road,
183:02 - go this way or that way,
you can have if and else.
183:05 - In C, that would look a
little something like this.
183:08 - And if we add in the printf's,
it now looks quite like the same,
183:11 - but it adds, of course, the word else
and then a couple of more curly braces.
183:15 - As an aside, in C, It's not strictly
necessary to have curly braces
183:21 - if you have only one line
of code indented underneath.
183:25 - For best practice, though, do so anyway,
because it makes super clear to you
183:30 - and ultimately anyone
else reading your code
183:31 - that you intend for just that one
or more line of code to execute.
183:35 - How about this from last week?
183:37 - Here was a three-way fork in the road.
183:38 - If x is less than y, else if x is
greater than y, else if x equals y.
183:45 - Now, here's where you have some
disparities between Scratch
183:47 - and C. Scratch uses an equals sign
for equality, to compare two values.
183:52 - C uses a single equals sign
for assignment from right
183:55 - to left, minor difference
between the two worlds.
183:58 - In C, we could implement the same
code like this, the addition being
184:02 - just this additional else if.
184:04 - And if we add in the printf's, it
looks a little something now like this.
184:08 - This is correct both in the
Scratch world and in the C world.
184:12 - But could someone make a claim that
this is not, again, well-designed?
184:16 - Exactly.
184:17 - We don't need the last if.
184:18 - We need the else, at least,
but we don't need the last if.
184:21 - Because, at least in the
world of comparing integers,
184:24 - it's either going to be less
than, greater than, or equal to.
184:27 - There is no other case.
184:28 - So you can save a few
seconds, if you will,
184:31 - of your program running-- a blink of
the eye-- by only asking two questions
184:35 - and then inferring what
the answer to the third
184:37 - must be just by nature of
your own human logic here.
184:41 - Now, why is that a good thing?
184:42 - If, for instance, x and y
happen to equal each other--
184:46 - I type in 1 and 1 for both values,
either in Scratch or in the C world--
184:51 - in the case of this version,
you're sort of stupidly
184:55 - asking three questions, all of
which are going to get asked
184:59 - even though the answer is no, no, yes.
185:02 - That is false, false, true.
185:05 - That seems to be unnecessary because
if we instead optimize this code,
185:09 - get rid of the unnecessary if and
just do as you proposed logically--
185:13 - else print that x is equal to y--
185:16 - now if x indeed equals y because
they're both 1 or some other value,
185:20 - now you're only going to ask two
questions, so 2/3 as many questions,
185:26 - and then you're going to get
your same correct result.
185:29 - So, again, a minor detail,
but, again, the kinds of things
185:32 - you should be thinking
about, not only as
185:33 - you write your code to
be correct but also write
185:36 - it to be well-designed as well.
185:38 - All right, so why don't we
go ahead and translate this
185:41 - into the context of an
actual program here?
185:44 - I'll create a blank window here.
185:46 - And let's do something with points,
like points on my own very first CS50
185:50 - problem set.
185:51 - Let me go ahead and
run code of points.c.
185:54 - That's just going to
give me a new text file.
185:56 - And then up here, I'm going to
do my usual, include cs50.h.
186:00 - include stdio.h.
186:03 - int main void.
186:04 - So a lot of boilerplate, so to
speak, in these early programs.
186:08 - And now, let's see.
186:09 - Let's ask the user, how
many points did they
186:12 - lose on their most recent CS50 PSet?
186:15 - So sort of evoke my photograph of
my own very first PSet last week
186:19 - where I lost a couple of points myself.
186:20 - So int points = get_int.
186:23 - Then I'll ask a question in English
like, how many points did you lose,
186:27 - question mark, space?
186:29 - And then once I have this answer,
let's now ask some questions of it.
186:33 - So if points is less than 2--
186:36 - borrowing the syntax that we
saw on the screen a moment ago--
186:40 - let's go ahead and print
out something explanatory
186:42 - like you lost fewer points
than me, backslash n.
186:49 - else if points greater than 2--
186:52 - which is, again how many I lost--
186:53 - I'm going to go ahead and print out you
lost more points than me, backslash n.
186:59 - else if-- wait a minute, else seems
to be sufficient logically here.
187:03 - I'm just going to go ahead
and print out something
187:05 - like you lost the same number
of points as me, backslash n.
187:12 - So, really, just a straightforward
application of that simple idea
187:16 - but to a concrete scenario here.
187:18 - So let me go ahead and save this.
187:21 - Let me go ahead and
run make points, Enter.
187:24 - No errors, that's good.
187:26 - Run points.
187:27 - And then, how many points did you lose?
187:29 - How about, it's 1 point?
187:31 - All right, you lost
fewer points than me.
187:32 - How about 0 points?
187:34 - Even better.
187:34 - How about 3 points?
187:36 - And so forth.
187:37 - So, again, we have the ability to
express in C now pretty basic idea
187:40 - from last week in reality, which is
this notion of conditionals and asking
187:44 - questions.
187:46 - There's something subtle here, though,
that's maybe not super well-designed
187:50 - that someone might call a magic number.
187:53 - This is programming speak
for something I've done here.
187:56 - There's a bit of redundancy unrelated
to the if and the else and the else.
188:01 - But is there something I typed twice
just to ask, perhaps, for the obvious?
188:07 - Exactly, I've hard-coded, so to speak,
manually typed out the number 2--
188:11 - in two locations, in this case--
188:13 - that did not come from the user.
188:15 - So, apparently, once I
compile this, this is it.
188:18 - You're always comparing
yourself to me in like, 1996,
188:21 - which for better or for worse,
is all the program can do.
188:24 - But this is an example too of
a magic number in the sense
188:27 - like, wait, where did that 2 come
from, and why is it in two places?
188:31 - It feels like we are setting the
stage for just a higher probability
188:35 - of screwing up down the road.
188:36 - Because the longer this code gets,
suppose I'm comparing against 2 points
188:39 - elsewhere--
188:40 - 2, 3, 4, 5 places--
188:42 - am I going to keep typing the number 2?
188:45 - Like, yeah, that's fine.
188:46 - It's correct.
188:46 - It's going to work.
188:47 - But, honestly, eventually,
you're going to screw up,
188:49 - and you're going to miss one of the
2's, you're going to change it to a 3,
188:52 - because maybe I did worse the
next year, or 1, I did better.
188:54 - And you don't want these
numbers to get out of sync.
188:57 - So what would be a logical
improvement to this design,
189:01 - rather than hard-coding the
same number sort of magically
189:04 - in two or more places?
189:07 - Yeah, why don't I make a
variable that I can use in there?
189:09 - So, for instance, I
could create a variable
189:11 - like this, another integer called mine.
189:14 - And I'm just going to
initialize it to 2.
189:16 - And then I'm going to change
mentions of 2 to this.
189:19 - And mine is a pretty reasonable
name for a variable insofar
189:23 - as it refers to exactly
whose points are in question.
189:27 - There's a risk here,
though, minor though it is.
189:29 - I could accidentally
change mine at some point.
189:32 - Maybe I forget what mine represents,
and I do some addition or subtraction.
189:36 - So there's a way to tell the
computer "don't trust me,
189:39 - because I'm going to
screw up eventually"
189:40 - by making a variable constant too.
189:43 - So a constant in a
programming language--
189:45 - this did not exist in Scratch--
189:47 - is just an additional hint to the
computer that essentially enables
189:50 - you to program more defensively.
189:52 - If you don't trust
yourself necessarily to not
189:55 - screw up later, or
honestly, in practice,
189:57 - if you know that number should
never change, make it constant
190:01 - and never think about it again.
190:02 - This tells the compiler to make sure
that even you later in your code cannot
190:08 - change the number 2.
190:09 - And another convention in C and other
languages, when you have a constant,
190:14 - it's often common to just
capitalize the variable.
190:16 - Kind of like you're
yelling, but it really just
190:18 - visually makes it stand out.
190:20 - So it's kind of like
a nice rule of thumb
190:21 - that helps you realize, oh,
that must be a constant.
190:24 - Capitalization alone does
not make it constant.
190:27 - The word const does.
190:28 - But the capitalization
is just a visual reminder
190:31 - that this is somewhere,
somehow a constant.
190:35 - So just a minor refinement,
but, again, we're
190:37 - sort of getting better at
programming just by instilling
190:41 - these kinds of heuristics.
190:43 - Questions, then, on conditionals
in C or these constants?
190:48 - Yeah.
190:48 - AUDIENCE: Why do you not use
semicolons after line 9 and line 13?
190:53 - DAVID J. MALAN: Yeah, why do you
not use a semicolon in lines 9, 13?
190:58 - Just because.
190:59 - This is the way the
language was designed.
191:01 - And it's confusing early on.
191:03 - Generally speaking, when you're
using conditionals-- and eventually,
191:07 - we'll see loops--
191:08 - there's no semicolons involved.
191:09 - For now, assume that semicolons usually
finish your thought after a function.
191:14 - That's not 100% reliable of a heuristic,
but it'll get you most of the way
191:18 - there.
191:19 - And just because.
191:20 - Left hand was not talking to the right
hand when some of these languages
191:23 - were designed.
191:25 - All right, so let's do something else.
191:27 - How about this?
191:28 - If I have the ability to ask
something conditionally--
191:31 - is this thing true or
is this other thing--
191:33 - could I write a very simple program
that does something basic like,
191:36 - tells me if a number the
human types is even or odd?
191:39 - Well, let me just get the
framework for that in place.
191:42 - Let me go ahead and
write code of a parity--
191:44 - is a fancy way of saying even or odd.
191:47 - And let me go ahead and include cs50.h,
include stdio.h, int main void--
191:53 - again, more on those down the road.
191:55 - But, for now, I'm going to go ahead
and get a number n from the user
191:59 - by calling get_int and asking
them for whatever n is.
192:03 - And then now I'm going to
introduce some pseudocode.
192:07 - So here's the first
example of a program,
192:08 - honestly, that I'm not
really sure how to proceed.
192:12 - So let me just resort to some
pseudocode using comments.
192:14 - Eventually, I'll get rid of
this and write actual code.
192:17 - But if n is even, then print--
192:22 - actually, let me just print that.
192:24 - Let me just go ahead and say
printf, quote unquote, "even",
192:27 - because I know how to use printf.
192:29 - else-- all right, I
know how to printf odd,
192:33 - so let me just say printf,
quote unquote, "odd".
192:35 - So here, I've sort of taken a bite
out of the problem, if you will.
192:39 - And let me go ahead and put
in my little placeholders.
192:42 - I want to do some kind of conditions.
192:44 - So if, question marks now, let me go
ahead and fill in the blanks here.
192:49 - else I'll put this here.
192:51 - So I think I'm OK now.
192:53 - I'm getting closer to solving this.
192:55 - But I still have this
question mark here.
192:59 - How, using syntax we've seen, might
I determine if n is even or odd?
193:06 - What do you think?
193:07 - Nice.
193:08 - There's this little operator I
mentioned by name earlier, the remainder
193:12 - operator, that will let
you do exactly that.
193:14 - If you divide any number by
2, that mathematical heuristic
193:16 - is going to tell you if it's even
or odd based on whether there's
193:19 - a remainder of 0 or 1.
193:21 - And that's nice because the alternative
would seem to be doing something stupid
193:25 - like if n == 0 or if n
equals 2 or n equals 4--
193:33 - your code would be infinitely long if
you had to ask all possible questions.
193:37 - But if I do n divided by 2
and look at the remainder--
193:43 - it's a little cryptic, but
this will indeed do the trick.
193:47 - So the percent sign is
the remainder operator.
193:51 - It does numerator divided by denominator
and returns not the result of that
193:56 - but, rather, the remainder of that.
193:58 - So if you divide anything by 2,
it's going to be a 0 or 1 remainder.
194:02 - And if, indeed, 2 divides
into n evenly, giving you 0,
194:06 - then you're going to print even.
194:08 - Else, it's got to be odd.
194:10 - But there is something odd-- pun
intended-- in this highlighted line.
194:14 - What is another new piece of syntax,
apparently, besides the percent sign?
194:20 - What's a little off there?
194:21 - Yeah.
194:24 - Yeah, so that's not a typo.
194:25 - And I even caught myself
verbally saying it a moment ago,
194:28 - just because it's so ingrained.
194:29 - What must this mean here?
194:32 - Yeah.
194:33 - AUDIENCE: [INAUDIBLE]
194:34 - DAVID J. MALAN: Yeah, if
something's equivalent to the other.
194:36 - So now this is the equality operator.
194:38 - It's not assignment from right to left.
194:40 - And this one too is an
example of, literally,
194:42 - humans not really planning
ahead, perhaps, left hand
194:45 - not talking to right hand
in that someone decided,
194:47 - let's use the equals
sign for assignment.
194:49 - And then some number of minutes or
days later, people are like, damn,
194:52 - how do we now compare for equality?
194:53 - Well, let's just use two.
194:55 - And if you think this is a little weird,
in some languages, like JavaScript,
194:58 - there's a third version where
you use three equal signs.
195:01 - So, again, it's humans that
design these languages.
195:03 - So if you're ever frustrated by them,
confused by them, eh, admittedly,
195:06 - it might just not have
been the best design.
195:08 - But we just kind of have
to live with it ever since.
195:11 - So let me go ahead and zoom out here.
195:12 - Let me go ahead and make parity here.
195:15 - So make parity-- and, again, parity
is just the name of my file, parity.c.
195:20 - ./parity, type in a number like 2.
195:23 - That's indeed even.
195:24 - 4, that's indeed even.
195:26 - 3, that's indeed odd, and so forth.
195:29 - If we continue testing, presumably,
we'll get the same kinds of answers.
195:32 - How about something else?
195:34 - Let me go ahead now and let me start
copying and pasting some of this code
195:37 - because, admittedly, it's getting
a little tedious to keep typing out
195:40 - all of that boilerplate at the top.
195:42 - Let me create a program
called agree.c that's
195:46 - reminiscent of any of
those forms you have
195:48 - to agree to online with a checkbox
or typing in yes or no or the like.
195:52 - So let me throw away all the
guts of this main program
195:55 - and now ask something like this.
195:57 - Let me go ahead and prompt
user to agree to something.
196:01 - I'm going to go ahead and say, how
about get_string do you agree--
196:06 - whatever the question might be--
and I want the human to type y or n
196:12 - for yes or no, respectively.
196:13 - So if it's only a single
character, actually, I
196:16 - can actually get by with just get_char.
196:18 - Not used it before,
but it was on our menu
196:20 - of functions from the CS50 library.
196:22 - And if I want to get
the user's response,
196:25 - the return value should be
a char also on the left.
196:28 - So now we've seen strings,
ints, and now chars,
196:31 - if we only care about a single letter.
196:33 - And now let's go ahead,
check whether user agreed.
196:38 - So how about if c == "y", then let me
go ahead and, inside of my curly braces,
196:47 - print out agreed or some
such sentence like that.
196:51 - else if they did not type
c-- or you know what?
196:54 - Let's be explicit here,
just so they can't
196:56 - type z or b or some random letter.
196:59 - else if c=="n" n for no, then let me
go ahead and print out not agreed,
197:07 - or something like that.
197:07 - And I'm just going to ignore
the user if they don't cooperate
197:10 - and they type z or b or
something that's not y or n.
197:14 - All right, let me go ahead now and
compile this code, make agree, ./agree.
197:21 - All right, do I agree?
197:22 - Yes.
197:22 - Let's go with the default.
OK, so that seems to work.
197:25 - No, I don't agree this time.
197:27 - That seems to work.
197:28 - How about my caps lock key is on or
I'm just really yelling, capital Y?
197:33 - It ignores me.
197:34 - Capital N, it ignores me.
197:37 - So, obviously, a bug, at least if I want
to tolerate uppercase and lowercase,
197:41 - which is kind of reasonable.
197:43 - So what would be the possible
solutions here, do you think?
197:48 - How do I solve this and tolerate
both capital and lowercase?
197:51 - Maybe what's the simplest,
most naive implementation?
197:54 - AUDIENCE: [INAUDIBLE]
197:56 - DAVID J. MALAN: Yeah, so why
don't I just ask two questions?
197:58 - Or you know what, even more simplistic
based only on what we've seen before--
198:03 - if you will, let me just copy
and paste some of this code.
198:06 - Change this to an else-- whoops,
not in caps-- else if "Y".
198:11 - And then I bet I could
do the same thing with n.
198:13 - But here too, just like
with Scratch, as soon
198:15 - as you start to find
yourself copying and pasting,
198:17 - you're probably doing something wrong.
198:19 - And what you said verbally,
if I may, was actually better.
198:22 - Because you're implying that I could
just say something like OR c == "Y"
198:29 - or, down here, c == "N".
198:32 - The catch is, you can't use the word OR
in C. It's actually two vertical bars.
198:39 - So you can express one
question or another.
198:43 - You only need one of the
answers to be yes or true,
198:46 - and you use two vertical bars.
198:48 - By contrast, just so
you've seen it, if you
198:50 - wanted to check if something is equal
to something AND something else,
198:54 - you could use two ampersands.
198:56 - This logically would make
no sense here, though.
198:59 - Certainly, what the human typed can't
both be lowercase and uppercase.
199:02 - That just makes no sense.
199:03 - So in this case, we do want OR.
199:05 - But that allows me to
tighten my code up.
199:07 - I don't have to start copying
and pasting whole branches.
199:09 - I can now ask two questions at once.
199:13 - Questions, then, on this variation?
199:16 - Really good question.
199:17 - Can you convert the
input to all lowercase?
199:19 - Absolutely, you could.
199:20 - We don't have the capability yet.
199:22 - It turns out that's going to require--
199:24 - to be easy, another library,
though we could do it
199:27 - ourselves knowing a little bit about
ASCII or Unicode from last week.
199:30 - But, yes, that would be an alternative,
but more on that a different time.
199:34 - Other questions?
199:34 - AUDIENCE: [INAUDIBLE]
199:37 - DAVID J. MALAN: Good question.
199:38 - Unfortunately, you have to be explicit
in C. You can't just say this,
199:41 - even though that's kind of
how you might think about it.
199:44 - You have to ask a complete question
using the equality sign twice
199:49 - in this case.
199:50 - Let me ask a question now too.
199:51 - It's not a typo.
199:53 - I deliberately used single quotes
around all of my single letters here.
199:57 - Why might that be?
199:59 - Previously, we used double quotes
for anything that looked like text.
200:03 - Yeah.
200:05 - Correct, string is double quotes for
multiple characters-- or even one,
200:08 - technically, but yes.
200:10 - And single quotes for single characters.
200:14 - Because my data type is different.
200:15 - I chose the simple route of
just using a single char.
200:18 - In fact, this program
won't work with Y-E-S
200:21 - or N-O. That's not supported at the
moment-- more on that another time.
200:25 - I had to use single quotes
because that's how C does it.
200:27 - If you're dealing with
single characters,
200:29 - a.k.a. chars, use single quotes.
200:31 - If it's a string--
200:32 - even if it's one single
character in a string
200:36 - as though you're starting to write
out a longer word or sentence--
200:39 - that would be double quotes.
200:40 - And we'll see why this
is before long too.
200:42 - But, again, just things to keep
in mind whenever writing code
200:46 - in this particular language.
200:48 - Yeah, down here.
200:50 - So, short answer, if I'm understanding
correctly, this would be incorrect.
200:56 - And this would be even more incorrect.
200:58 - But if you don't mind, let me
kick the can a couple of weeks
201:00 - on this as to why this doesn't work.
201:02 - The most pleasant way to do this would
indeed be to do something like this.
201:06 - But even this is a slippery
slope, because what
201:08 - if the user does something weird,
like they capitalize just the Y?
201:12 - You can imagine this
getting messy quickly.
201:13 - I like your idea earlier
about just forcing everything
201:16 - to lowercase just to standardize things.
201:18 - Unfortunately, you cannot compare
strings for equality like this
201:22 - for, again, reasons will
come to before long.
201:24 - So for today, we're keeping it
simple, even though, arguably, it's
201:27 - not nearly as user-friendly to
only tolerate individual letters.
201:31 - And there's a question over here.
201:34 - On the US English keyboard
it's shift and then
201:36 - the backslash key above Return,
but depending on your keyboard,
201:40 - it will vary.
201:42 - All right, so let's
actually now look back
201:45 - at something we did a
little bit of last week.
201:47 - Let me go ahead and open
a file called meow.c,
201:49 - because, recall, that's what
we had Scratch do initially.
201:52 - Let me include not the
C50 library this time,
201:55 - but just stdio.h because I
only want printf for this demo.
201:59 - Let me go ahead now and
just print out meow.
202:02 - And then if I want the cat to meow
three times, like it did last week,
202:06 - meow, meow, meow.
202:07 - Save it.
202:08 - make meow, ./meow.
202:10 - Voila.
202:11 - The program is written--
correct, I claim.
202:14 - It ran.
202:14 - It compiled OK.
202:15 - But, again, this was the
beginning of our conversation
202:17 - last week of not being
particularly well-designed.
202:20 - And if someone wants to maybe
point out the now obvious,
202:23 - why is this not
well-designed, necessarily?
202:28 - Yeah, it's just repetition, right?
202:29 - Again, I literally
resorted to copy-paste.
202:31 - That should be the signal
that you're probably
202:33 - doing something wrong or, at best,
just lazy of you, in this case.
202:37 - So the solution, as you
might glean from last week,
202:40 - is probably going to be one
of those things called loops.
202:42 - So let's just take a look at some
of the syntax for loops in C.
202:45 - But, again, no new ideas,
it's just some new syntax
202:48 - that'll take some getting used to.
202:49 - In Scratch, if you wanted to meow
forever with something like this,
202:53 - there's not a forever keyword in C, so
this one's a little weird to look at.
202:57 - But this is the best we can do.
202:59 - It turns out there is a
keyword called while in C.
203:03 - And that kind of has
the right semantics,
203:05 - because it's like while I do
something again and again,
203:08 - that's the best I can do.
203:10 - But just like an if condition
or an else if condition,
203:14 - those took a Boolean
expression in parentheses,
203:18 - a while loop also takes a Boolean
expression in parentheses.
203:21 - So I have to ask a question.
203:22 - Now, if I want to do something
forever, I could kind of stupidly just
203:26 - say while 2 is greater than
1, while 3 is greater than 2,
203:30 - or just something completely arbitrary.
203:32 - But that should rub you the wrong
way, because like, why 2 versus 1?
203:36 - Why 3-- if you want true, just say true.
203:41 - So it turns out in C, there are
special keywords, true and false,
203:45 - that are literally true
and false, respectively.
203:48 - I could also put the number 1 for
true and the number 0 for false,
203:53 - but most people would just
say true to be explicit.
203:56 - So it's a little hackish, if
you will, but very conventional.
203:59 - There's no forever keyword in C. If
I want to then print meow forever,
204:03 - I'm going to just use
something like printf here.
204:06 - So, again, not perfect
translation from one
204:08 - to the other, but absolutely
possible in C. What about this?
204:11 - This is a little more common
if you want to do something
204:14 - a finite number of times, like repeat 3.
204:17 - There's a few different ways we can
do this in C. Here's one approach.
204:21 - And here's where C-- like a
lot of text-based languages,
204:25 - you kind of have to whip out that
toolkit of all of the basic building
204:28 - blocks and think about,
all right, how can I
204:31 - build a little machine in software that
does something some number of times?
204:35 - Well, let me give myself a variable
called counter, set it equal to 0.
204:40 - Let me create a loop whose Boolean
expression is counter less than 3,
204:46 - the idea being here, why don't
I just kind of count 1, 2, 3?
204:50 - So how do I implement
this physicality in code?
204:53 - I give myself a variable,
set it to 0, 0 fingers up.
204:57 - Now, I ask the question,
is counter less than 3?
205:00 - If so, go ahead and print out meow.
205:02 - And just intuitively, even if
you've never seen C code or any code
205:06 - before Scratch, what
more do I need to do?
205:09 - I've left room here for
one more line of logic.
205:12 - Yeah.
205:13 - We have to increase counter.
205:15 - So I need code like I showed earlier,
like counter equals counter plus 1.
205:19 - And so here's where
programming sometimes
205:21 - becomes a bit more like plumbing.
205:22 - You can't just say what you
mean, like you couldn't Scratch.
205:25 - You have to build a little
sort of software machine
205:28 - that initializes a value, does
something, increments it, checks it.
205:31 - And so it's kind of like
this software-based machine,
205:34 - but together, that's just using
some familiar building blocks.
205:37 - But this is pretty common.
205:38 - Just like in Scratch, you
might have used loops a bunch
205:40 - of times, pretty common in C.
205:42 - So can we tighten this code up?
205:44 - This is correct, but here are
some conventions that are popular.
205:48 - If you're going to count, just say i.
205:51 - A convention in
programming-- with, at least,
205:52 - languages like C-- is just use i
as an integer if all its purpose is
205:57 - is to count from like, 0 on up.
205:59 - Counter is not wrong.
206:01 - It's not bad.
206:01 - It's just more verbose
than you need to be.
206:04 - Just call it i.
206:05 - You don't need more semantics than that.
206:07 - All right, what else can I do here?
206:08 - There's another opportunity
to tighten up this code.
206:12 - Do you recall?
206:12 - Yeah.
206:14 - Yeah, that syntactic sugar
that does nothing new,
206:17 - but it does it more succinctly.
206:19 - I can change this to either the
intermediate format or even tighter
206:23 - format of just i++.
206:25 - Now, this is pretty canonical.
206:27 - This is how most people
would implement something
206:31 - three times using a loop in C--
206:34 - using a while loop, that is.
206:36 - Turns out that it's so common
in C and other languages
206:39 - to do something finitely many times,
there's a couple of ways to do it.
206:43 - In this model, to be
clear, the logic, though,
206:46 - is that we start by initializing the
variable, like I've highlighted here.
206:49 - We then ask the question,
is i less than 0?
206:52 - If so, everything that's
indented inside the curly braces
206:56 - gets executed-- namely,
meow then the update.
206:59 - Then the computer is going to
have to recheck the condition
207:02 - to make sure that i hasn't gotten
so big that it's greater than 3.
207:06 - But if not, it then does this
again and it does this again.
207:09 - And then it repeats, constantly
checking the condition
207:12 - and executing what's in the
block, checking the condition
207:14 - and executing what's in the block.
207:15 - After three times of that, the condition
is going to be false, or a no answer,
207:20 - and that's it for the code.
207:21 - It just proceeds to whatever's
down here, just like with Scratch.
207:24 - It jumps to the next blocks down below.
207:27 - All right, what's another
way, though, to do this?
207:30 - Well, I've deliberately
been counting from 0--
207:32 - and that's a programming
convention, right?
207:33 - We started last week with all
the light bulbs off, which was 0.
207:36 - So it's pretty reasonable to
start counting at 0's, just
207:39 - like you would here.
207:39 - Like, no fingers are up, this is 0--
207:41 - fingers on your hand.
207:43 - But if you prefer, you could
start counting at i equals 1.
207:47 - But then you don't want to
do it while i is less than 3,
207:51 - you want to do i is
less than or equal to 3.
207:54 - On most keyboards, there's no symbol for
less than or equal to or greater than
207:58 - or equal to, so in C, you
use two characters, less than
208:02 - and then an equals sign
with no spaces in between.
208:05 - That just means less than or equal to.
208:08 - We could change it to set i to 2
and make this condition be less than
208:12 - or equal to 4.
208:13 - We could make this be a 10
and less than or equal to 12.
208:18 - But, again, just stick with the basics.
208:20 - Start at 0 and count on up
would be the convention.
208:23 - Or if you prefer to count
down, that's fine too.
208:27 - Set i to 3 and then do this so
long as i is greater than 0,
208:31 - but you have to decrement
instead of increment.
208:34 - So, again, we could
do this all day long.
208:36 - There's literally an infinite number
of ways to implement this idea.
208:39 - And that's why I keep
emphasizing convention.
208:41 - Call the variable i for
something like this,
208:43 - initialize it to 0 for something like
this, and just generally count up,
208:47 - unless you really prefer to count down.
208:49 - Again, just certain human conventions.
208:51 - All right, how about
another way to do this?
208:55 - This is what's called a for
loop in C, also very common.
208:59 - It's not quite as straightforward
in that it doesn't really read top
209:02 - to bottom in exactly the same way.
209:04 - This kind of has a lot more
logic tucked into its first line.
209:07 - But it does exactly the same thing.
209:09 - What happens here is--
209:11 - notice that inside the
parentheses, next to the word for,
209:15 - there's two semicolons-- which
is another weird use of syntax.
209:18 - They're not at the end
of the line, now they're
209:20 - in the middle of the parentheses.
209:21 - But that's what the
humans chose years ago.
209:24 - The first thing before the semicolons
initializes your variable, int i = 0.
209:30 - The next thing is the condition
that's going to constantly get
209:34 - checked every cycle through this loop.
209:36 - And the last thing is going to be
what you do after each loop, which
209:41 - in this case is going to be count up.
209:42 - So, again, if I rewind
we initialize i to 0.
209:45 - We then ask the question,
is i less than 3?
209:48 - If so, execute what's
inside of the loop.
209:52 - Then the computer does this, it does
the update, incrementing i by 1.
209:58 - And then it's not going
to blindly meow again.
210:01 - It's going to check again the
condition, is i less than 3?
210:04 - Then it's going to meow if so.
210:06 - Then it might go ahead and increment
i and check the condition again.
210:10 - So, again, this does not read quite
the same simple fashion top to bottom.
210:14 - You kind of read it left to
right and then jump around.
210:16 - But, again, the initialization,
the constant Boolean expression
210:21 - being checked, and the
update after each time
210:24 - does the exact same thing as what we saw
a moment ago in this while loop format.
210:32 - Which one is better?
210:34 - Eh, they're the same.
210:35 - I think most people would
probably eventually use
210:37 - a for loop once comfortable, but just
because is really the answer there.
210:42 - All right, any questions, then, on
loops as we've translated them to C?
210:45 - Yeah.
210:46 - AUDIENCE: [INAUDIBLE]
210:47 - DAVID J. MALAN: A for
loop and while loop
210:49 - can both be used to do
exactly the same thing.
210:53 - There are subtle differences
with issues of scope,
210:56 - which we'll discuss before
long, where when you
210:58 - create a variable in a for loop--
211:00 - notice that it was, again, inside
of those parentheses, which
211:04 - technically means it's only going to
exist in these four lines of code.
211:08 - By contrast, with the while loop,
I declared my variable outside
211:12 - of the loop.
211:13 - That variable is going to continue
to exist elsewhere in my program.
211:17 - So that's one of the
minor differences there.
211:20 - Good question.
211:20 - But you'll see some others over time.
211:22 - All right, so we claim then
that it's better in some form
211:26 - to do this with loops.
211:27 - So let's actually jump back to the code.
211:29 - Let me go ahead and now re-implement
meowing with a for loop, for instance.
211:33 - So how about for int i
= 0, i less than 3, i++.
211:39 - Then inside my curly braces, let me go
ahead and print out with printf, meow,
211:44 - with a newline and a semicolon.
211:46 - So I did it pretty quickly just because
I've long acquired the muscle memory.
211:50 - But if I now make meow, no errors there.
211:53 - Run ./meow.
211:54 - And I see meow, meow, meow.
211:57 - Well, let's do now what
we did last week, which
211:59 - was to begin to make our own
custom functions, if you will,
212:03 - by using our own in C. So here's
where the syntax gets a little funky,
212:09 - but we'll explain over time what
each of these keywords is doing.
212:13 - If I want to create a
function called meow--
212:17 - because the authors of C did not create
a function called meow decades ago--
212:21 - I need to give it a name, like meow.
212:23 - I need to specify if
it takes any inputs.
212:26 - For now, I'm going to say no.
212:28 - And I'm going to explicitly say no
by writing the special word void.
212:34 - It's also necessary when
implementing a function in C--
212:37 - which was not necessary in Scratch--
212:38 - to specify what its return type is.
212:41 - But for now, I'm just going to say
that meow is the name of the function,
212:45 - it takes no inputs--
212:46 - and that's what the void
in parentheses means--
212:49 - and it does not return
anything like ask did,
212:54 - or like get_string or get_int does.
212:56 - meow's purpose in life is just to
have side effects, visual side effects
212:59 - by printing something on the screen.
213:01 - So what is meow going to do?
213:04 - I'm going to have it
quite simply say printf,
213:06 - quote unquote, "meow", backslash n.
213:10 - And now, just like in
Scratch, I can now just call
213:14 - a brand new function called meow.
213:16 - And here's where too, if you
really don't like the curly braces,
213:19 - technically speaking, you can
get rid of them when there's
213:22 - only one line of code inside your loop.
213:24 - But, again, stylistically,
I would encourage
213:27 - you to preserve them to make
super clear to yourself and others
213:30 - what it is that's going on.
213:32 - Let me go ahead and save
this and do make meow.
213:35 - Whoops.
213:36 - Darn.
213:37 - All right, what did I do?
213:38 - Something stupid.
213:39 - AUDIENCE: [INAUDIBLE]
213:39 - DAVID J. MALAN: Yeah, so
0 does not belong there.
213:42 - I meant to hit parenthesis.
213:44 - So let me rerun make meow.
213:46 - OK, fixed.
213:48 - My mistake.
213:49 - All right, it's still working OK.
213:51 - But recall what I did in Scratch,
kind of out of sight, out of mind.
213:54 - And just to make a point, let me
just highlight this and move it
213:57 - way down in the file.
213:59 - Because, again, now that meow
exists, it's an abstraction.
214:02 - I just know a meow function exists.
214:04 - I want to be able to use it.
214:06 - So let me scroll back up.
214:08 - My main function is the same.
214:09 - Let me go ahead and make meow again.
214:12 - And now, just by moving that function,
I've created all these lines of errors.
214:17 - And let's look at the first.
214:18 - Again, the rule of thumb
here-- it's a little small,
214:21 - but it says meow.c in bold-- which is
the name of the file where the bug is--
214:25 - 5 is the line number,
and 20 is the character.
214:27 - So line number is enough alone.
214:30 - Let's see.
214:32 - Oh, this is what happens
when I scrolled up too far.
214:36 - Sorry.
214:37 - This is the error we're
now looking at, line 7.
214:39 - I was looking at the old error message
from earlier before I fixed the 0.
214:43 - meow.c line 7.
214:45 - All right, apparently, C does not
know what the meow function is.
214:49 - Implicit declaration of
function meow is invalid in C99.
214:53 - Well, what does that mean?
214:54 - Declaration of function means
your creation of a function.
214:57 - Like, I'm declaring that meow
exists, but I haven't apparently
215:01 - defined it yet.
215:02 - And then C99 is the version
of C from the year 1999,
215:06 - which we generally use here, it's
one of the more recent versions.
215:09 - So why is that the case?
215:12 - Can you infer from the mere fact
that I just moved meow to the bottom
215:16 - of the file-- which was fine
in Scratch but now is bad--
215:19 - why is that?
215:20 - AUDIENCE: [INAUDIBLE]
215:21 - DAVID J. MALAN: Yeah, C is
just kind of old school.
215:23 - It reads your code top to bottom.
215:25 - And if it does not know what meow
is when you first try to use it,
215:30 - it just freaks out and prints
out these error messages.
215:32 - So the solution is, quite simply, don't
do that, just leave it where it was.
215:38 - But you can imagine this getting a
little annoying over time, if only
215:42 - because main is, by name, the
main part of your program.
215:46 - And, honestly, it would just
be nice if main were always
215:49 - at the top of your code.
215:51 - Because if you want to
understand what a file is doing,
215:53 - it makes sense to just
read it top to bottom.
215:55 - Well, there is a solution to this.
215:57 - You can put functions in different
orders with main at the top so long
216:02 - as you-- and this is perhaps the
only time copy paste is appropriate--
216:07 - so long as you leave a little
breadcrumb for the compiler
216:10 - at the very top of your
file that literally
216:13 - repeats the return value,
the name, and the arguments
216:17 - to that function, semicolon.
216:19 - This is, so to speak,
declaring your function--
216:22 - and the real fancy way
is this is a prototype.
216:25 - It's like, what is this
thing going to look like?
216:27 - But the semicolon means I'm not
going to deal with this yet.
216:30 - I'm going to actually
define the function
216:32 - or implement it down below here.
216:34 - This is kind of a stupid detail.
216:36 - More recent languages
get rid of this need,
216:40 - you can put your functions in any order.
216:41 - But, again, if you just
think about the basics
216:43 - of programming languages
like this one here--
216:46 - and as you noted--
216:47 - it must just be reading
your code top to bottom.
216:49 - So annoying, yes, but
explained, yes too.
216:53 - So let me go ahead and make meow one
more time, ./meow, still working OK.
216:58 - And let me make one final enhancement
to this meow program here.
217:02 - Let me go ahead now and
say something like this.
217:05 - Let me go ahead and say,
all right, wouldn't it
217:07 - be nice if my meow function could do
something for me some number of times?
217:12 - So suppose I want to do this.
217:14 - This meow function at the moment
is going to meow three times.
217:17 - But suppose I want to meow
n times, where n is just
217:21 - some number provided by the user.
217:23 - Well, just like in Scratch,
custom functions can take inputs,
217:27 - I just presently am saying void.
217:30 - But if I change this to int n,
thereby telling the compiler,
217:34 - hey, meow still doesn't
return something,
217:38 - but it does take something as input.
217:40 - It takes an integer,
and I want to call it n.
217:43 - So this is another way
of declaring a variable
217:46 - but a way of declaring a
variable that gets handed into,
217:48 - as input, the function.
217:50 - So now if I tighten up main here, now
I can actually do something really cool
217:55 - just like in Scratch, which is this.
217:58 - If I now look at this
code-- let me Zoom in here--
218:01 - now my main program is really
well-written in the sense
218:04 - that it just says what it
does, meow three times.
218:07 - This works, though, because I
defined meow as now taking an input,
218:11 - an integer called n, and then using
n in my now familiar for loop.
218:17 - There's one change.
218:18 - You might have caught my one mistake.
218:21 - I also have to remind myself up
here to make that change too.
218:25 - Again, this is one of the only
redundancies or copy-paste
218:27 - that's sort of reasonable.
218:29 - But there, I have now a better version.
218:32 - So let me go ahead and rerun
this, make meow, ./meow.
218:36 - Voila.
218:36 - So, again, no change
in correctness but now,
218:39 - again, we're sort of
modularizing our code.
218:41 - And, heck, what you could do now-- and
this is just a tease about a feature
218:44 - down the road--
218:45 - those header files we talked
about early, those libraries,
218:48 - this is the kind of modularization
we're talking about.
218:51 - We, the staff, wrote a function called
get_string, get_int, and so forth,
218:54 - we put it in a file called CS50, and we
put little breadcrumbs-- specifically,
219:01 - these things called prototypes--
219:03 - in cs50.h.
219:05 - So that when you all, as aspiring
programmers, include cs50.h,
219:10 - you are sort of secretly telling the
compiler at the very top of your code
219:14 - what the menu of available functions is.
219:16 - Why?
219:16 - Because in CS50 is lines like
these-- obviously, not for meow,
219:21 - but for get_string,
get_int, and so forth.
219:24 - And stdio.h is the same lines
of code for things like printf.
219:29 - So that's all that's going on there.
219:31 - It's just a way of telling the computer
in advance what functions to expect.
219:38 - All right, any questions,
then, on these here?
219:43 - Correct.
219:44 - So if you don't mind, I
want to continue to wave
219:47 - my hand at that detail for today.
219:49 - Indeed, int main void is a little weird,
because what would the input domain be?
219:53 - We have no mechanism
for providing input yet.
219:55 - And what does it mean for
main to return anything?
219:57 - Like, who is it returning to?
219:59 - For another day, if we may.
220:00 - They're going to come into
play but that, for now,
220:02 - today is just something you
should take at face value,
220:05 - as necessary copy-paste
to begin programs.
220:08 - So meow is a function that takes an
input, the number of times to meow,
220:11 - but it didn't actually have a
return value, hence the void.
220:14 - But what if we actually want
to create our own function that
220:17 - not only takes 0 or
more inputs as arguments
220:20 - but also returns some value, maybe an
int, maybe a float, maybe something
220:24 - else altogether?
220:24 - Well, it turns out, in C,
we can do that as well.
220:27 - Let me go ahead and create a
new file here called discount.
220:31 - And let's implement a
quick program via which
220:33 - we can discount some regular
price by some percentage,
220:35 - as though there's a sale
going on in a store.
220:37 - Let me go ahead and include our usual
cs50.h followed by stdio.h at the top.
220:44 - Let me give myself int
main void as before.
220:47 - And inside of main, let's go
ahead and do something simple.
220:50 - Let's give ourselves a
float called regular,
220:52 - representing the regular
price of something in a store.
220:55 - Let's go ahead and get a float
from the user asking them
220:58 - what that regular price is.
221:00 - Then, next, let's go ahead and declare
a second variable-- also a float--
221:04 - called sale, ultimately
representing the sale price
221:07 - after some percentage discount off.
221:09 - And let's go ahead and simply
calculate whatever regular is.
221:13 - And, say, 15% off is a
pretty good discount.
221:15 - So let's go ahead and discount
regular, whatever it is, by 15%,
221:20 - which is equivalent, of course, to
multiplying it with the asterisk
221:23 - by 0.85.
221:25 - Of course, if we're taking off 15%,
we multiply the regular price by 0.85.
221:30 - Now, let's go ahead and
print out the results here.
221:32 - Let me go ahead and say
printf sale price, colon--
221:36 - let me go ahead and %f,
but, more specifically,
221:38 - %.2f because, at least in US currency
we typically show cents to two decimal
221:43 - places--
221:44 - followed by a newline.
221:45 - And then let me go ahead and
plug in the value of sale.
221:48 - All right, let's go down here
and do make discount, Enter.
221:52 - So far, so good-- ./discount.
221:54 - And the regular price is maybe $100.
221:57 - So the sale price should be $85.
221:59 - So our arithmetic seems
to be correct here.
222:01 - But let's fast-forward now in time.
222:02 - Suppose that we find
ourselves discounting
222:04 - a lot of prices in an
application, maybe a website
222:07 - like Amazon where they're offering
some kind of percentage discount.
222:10 - And it'd be nice to have
a reusable function that
222:13 - just does this arithmetic for
us, simple though it may be.
222:16 - So let's go ahead and
modify discount this time
222:18 - to give ourselves our own
function called discount,
222:22 - for instance, that takes an input--
222:23 - like the regular price
that you want to discount--
222:25 - and then it also returns a value.
222:28 - It doesn't just print it out.
222:29 - It returns a value, namely, a float
that represents what the sale price is.
222:34 - So let me go down
below main and go ahead
222:37 - and define a function that's
going to return a float,
222:39 - because we're dealing
with dollar amount still.
222:42 - The function is going
to be called discount.
222:43 - And it's going to take one input, like
the price that we want to discount.
222:47 - In here, I'm going to do
something very simple.
222:50 - I'm going to say float sale equals
whatever that price is times 0.85.
222:55 - And then I'm going to go
ahead and return sale.
222:58 - Now, for that matter, I can
actually tighten this up a bit.
223:00 - If I'm only declaring a variable
to store a value that I'm then
223:04 - returning with this keyword return, I
actually don't even need that variable.
223:09 - So I can delete the second line.
223:11 - And I can actually just go ahead
and get rid of that variable
223:13 - altogether and immediately
return whatever the arithmetic
223:16 - result is of taking the price input,
the argument that's being passed in,
223:20 - times 0.85.
223:21 - So very simple function that
simply does the discounting for me.
223:25 - As always, let me go
ahead and copy-paste--
223:29 - the only time it's OK to copy-paste--
the prototype of that function, so
223:32 - the top of the file, so that
when compiling this code,
223:35 - main has already seen
the word discount before.
223:38 - And now let me go into the code here.
223:40 - And instead of doing
the math myself in main,
223:43 - let me presume that we
have some function already
223:46 - in our toolkit called discount that
lets me discount the regular price
223:50 - and return that value.
223:52 - And then down here, my code
doesn't need to change.
223:54 - I'm still going to print out
sale the variable in which I'm
223:58 - storing that result. But
notice what I've done here.
224:00 - I've sort of abstracted
the way the notion
224:02 - of taking a discount by creating my
own function that takes a float called
224:06 - price, or anything else as input.
224:07 - It does a little bit of math,
simple though it is here,
224:10 - and then it returns a value.
224:12 - But notice that discount
is not printing that value.
224:14 - It's literally using
this other keyword called
224:17 - return so that I can hand back that
value, just like get_string hands
224:21 - back a value, just like get_int
back an integer without printing it
224:25 - for you-- so that I up here on
line 9 can go ahead and store
224:29 - that value in a variable if I want
and then actually print it out.
224:33 - Let me go ahead now and recompile
this code with make discount.
224:38 - Let me go ahead and do ./discount.
224:40 - And let's, again, do $100.
224:43 - Sale price is going to be $85 as well.
224:46 - Now, it turns out that functions don't
have to take just 0 or 1 argument
224:50 - as input.
224:51 - They can actually take 2 or 3 or more.
224:53 - So, in fact, suppose we wanted to now
enhance this version of my program
224:57 - and take in as input to the discount
function, not just the price
225:01 - that I want to discount but
also the percentage off,
225:03 - thereby allowing us to support not just
15% off but any number of percentage
225:08 - points off.
225:08 - Well, let me go up here and declare
an int, say, and call it percent_off.
225:13 - And let me ask the user
for how many percentage
225:15 - points they want to take off.
225:17 - So I'm going to say percent_off
inside of the prompt here,
225:21 - get that int called percent_off.
225:23 - And now in addition to
passing in regular as an input
225:26 - to the discount function, I'm
also going to pass in percent_off.
225:30 - But I need to tell the computer
that it is taking now two arguments,
225:34 - and the way I do this
is just with a comma
225:37 - down here in the
function's own definition.
225:39 - Here is going to be a percentage
argument, a second argument,
225:43 - per the comma.
225:44 - And I'm now going to use that
percentage in a slightly familiar way.
225:50 - I don't want to just do percentage
like this, because, of course,
225:53 - that's going to increase
the size of the total price.
225:56 - I actually need to do a little bit
of real-world math where if this is
225:59 - a percentage off, like the number
15 for 15 percentage points,
226:03 - I need to do 100 minus that
many percentage points,
226:06 - thereby giving me 100 minus 15--
226:08 - 85.
226:09 - And then I need to divide
that by 100 in order now
226:13 - to give myself 0.85 times
the price that was passed in.
226:18 - But if I go ahead now and save this,
run, make discount one last time,
226:22 - I notice that I've
actually got an error here.
226:24 - What have I done wrong?
226:26 - Well, I need to change
that prototype too.
226:28 - And, again, this is admittedly
an annoying aspect of C
226:30 - that you have to maintain
consistency here.
226:32 - But that's fine.
226:33 - I'm just going to go up
here, change this to int
226:35 - percentage-- spelling incorrectly.
226:37 - And now let me retry
compilation, make discount,
226:40 - crossing my fingers this time.
226:42 - Worked OK. ./discount, and voila, $100.
226:46 - And percent off, say, 15 points.
226:49 - And, voila, $85.
226:52 - Now, it's worth noting
that I've deliberately
226:55 - returned the results of my
math from this function.
226:58 - I haven't just done the math on the
original variable that's being passed.
227:01 - In fact, if we take a look
at this second version
227:03 - where discount is now taking a price
argument and a percentage argument,
227:07 - notice that I'm not doing
something like this.
227:10 - I'm not just saying price
equals price times 100
227:14 - minus percentage divided
by 100 and leaving at that.
227:18 - The problem there is that
this variable price is going
227:21 - to be scoped to that discount function.
227:24 - And we'll encounter this again
before long, but this notion of scope
227:27 - just refers to where in which a
variable actually lives or exists
227:32 - or is accessible.
227:33 - So it turns out if I change price
in the context of this discount
227:36 - function, that's not going
to have a lasting effect.
227:38 - If I actually want to
get the result back
227:40 - to the function that used the
discount function, namely, main,
227:43 - I actually do need to take this
approach of actually returning
227:47 - the value explicitly so that ultimately
I'm handing back the discounted price.
227:51 - All right.
227:52 - Well, let's go ahead and
maybe how about let's just
227:54 - use these primitives in
just a few different ways.
227:57 - How about a little game of
yesteryear, Super Mario Brothers?
228:02 - And in the original Super Mario
Brothers and in bunches of variants,
228:05 - so you have these
side-scrolling worlds that
228:08 - look like this where there's some coins
in the sky hidden behind these question
228:11 - marks.
228:11 - So let's just use this as a
visual to consider how in C could
228:15 - I start to make
something semi-graphical.
228:17 - Like, not actual colors or fanciness,
that feels like too much too soon--
228:20 - just something like printing
out some question marks.
228:23 - Well, if I go back over here,
let me create that actual file
228:26 - that I alluded to earlier.
228:27 - So let me code up mario.c.
228:30 - Let me go ahead and include
stdio.h, int main void, again,
228:34 - which we'll continue to
copy-paste for today.
228:36 - And then let me just go ahead and
do something simple like 1, 2, 3, 4,
228:40 - and a newline.
228:41 - All right, this is what we
might call ASCII art, which
228:44 - just means graphics but really just
implemented with your keyboard.
228:47 - And if I make mario and do ./mario,
it's not nearly as engaging visually
228:52 - as this, but it's the beginning
of this kind of map for a game.
228:55 - Well, if I wanted to now print
out of those things dynamically,
229:00 - let me go back to my code here.
229:01 - And instead of printing
out for all at once,
229:03 - I could do something like four int i
gets 0, i less than 4, i plus plus.
229:08 - And then inside here, I could just
print out one of them at a time.
229:13 - Let me save that, make mario.
229:15 - And, at the risk of
disappointing, so close
229:20 - but I made a mistake,
just a stupid aesthetic.
229:23 - The prompt is not on the new line.
229:25 - How could I move it?
229:27 - AUDIENCE: [INAUDIBLE]
229:29 - DAVID J. MALAN: Yeah, I need an
escape character, the backslash n.
229:31 - But should I put it here?
229:35 - OK, no, because that's going
to put it after everyone,
229:37 - and it's going to make this thing
vertical instead of horizontal.
229:40 - So, logically, just like in Scratch, put
it at the end of the loop, so something
229:44 - out here.
229:44 - And just print out, for instance,
only, quote unquote, new line.
229:48 - And now if I do make
mario again, ./mario, OK.
229:51 - We're back in business.
229:52 - But a little better
designed in that now I'm
229:54 - not repeating myself multiple times,
I'm doing this again and again.
229:57 - But let's do one other
thing here with mario.
230:00 - Let me go ahead and ask the user how
many question marks or coins to print.
230:05 - The catch here is that there's another
type of loop that's helpful for this,
230:09 - and it's called a do
while loop, generally.
230:12 - A do while loop is
similar to a while loop,
230:15 - but it checks the condition
last instead of first.
230:19 - Recall earlier on the
slide, we had while,
230:21 - open parenthesis, closed parenthesis.
230:22 - And I kept claiming that we check
whether i is less than-- whatever
230:25 - it was, 3 in advance again and again.
230:29 - A do while loop just inverts the
logic so that you can actually
230:32 - do something like this.
230:34 - At the top of this program,
I'm going to go ahead now
230:36 - and give myself a variable
n like this of type integer.
230:40 - And then I'm going to do, literally,
the following with the keyword do.
230:44 - n equals get_int-- and I'm going
to ask the user for the width,
230:48 - like the number of
dollar signs to print.
230:51 - And I'm going to do this
while n is less than, say, 1.
230:56 - So this is a little cryptic,
but the salient differences
230:59 - are the Boolean expression is now
at the bottom of my block of code,
231:04 - not at the top.
231:05 - Now, why is this?
231:07 - Well, the difference
here if I make mario is--
231:11 - whoops.
231:12 - I need to add cs50.h, because
I'm now using get_int.
231:16 - If I now compile this version
of Mario and do ./mario,
231:22 - a do while loop is helpful when you want
to do something no matter what first
231:26 - and then check some condition or some
Boolean expression to see if maybe,
231:30 - in this case, the user cooperated.
231:32 - It would make no sense if
the user typed in, say, 0,
231:35 - because there's no work to be done.
231:37 - It'd be really weird if
they said negative 100,
231:39 - because that makes no sense logically.
231:41 - So with this simple construct
here, I am doing the following
231:46 - while n is less than 1.
231:48 - The implication is that as soon
as n equals 1 or is bigger than 1,
231:53 - I'm going to break out of
this loop, and I've got myself
231:55 - a variable called n containing,
essentially, a positive value, 1
232:00 - through 2 billion or so.
232:03 - And I can now use this, for
instance, here, change the 4 to an n
232:07 - so now my program is completely dynamic.
232:09 - Let me go ahead and do
make mario, ./mario again.
232:13 - And I'll do 4, still works.
232:15 - I'll do 40, still works.
232:18 - And the difference here with the
do while is if something like this
232:22 - involves getting user input,
well, there's no question to ask.
232:25 - The user hasn't given you anything yet.
232:27 - So you have to do something first,
then check, and break out of the loop
232:31 - if the human has, for instance,
cooperated, in this case.
232:35 - All right, well why don't
we escalate to something
232:37 - more like this in the same game,
where you're underground as Mario,
232:41 - and this is like a two-dimensional
wall that's popping up here?
232:45 - It looks like a 3 by 3, for
instance, for the sake of discussion.
232:48 - And it's like, made of bricks, so
I'll use maybe hash symbols this time.
232:51 - Well, it turns out that we can nest--
232:53 - that is, combine-- some of
these same ideas as follows.
232:57 - Let me go ahead now and
change back to this code.
233:01 - And I'm going to keep the
do while loop from before.
233:05 - And I'm going to ask,
though, this question,
233:07 - what's the size of this square?
233:09 - I'm going to assume it's n by
n, so 3 by 3, 4 by 4, whatever.
233:13 - So I'm just going to ask for the
size of this square of bricks.
233:16 - And now, how do I do this?
233:18 - Well, I'm going to go ahead,
for instance, and print out--
233:20 - how about for int i =
0, i less than n, i++.
233:25 - Let me just keep it simple
and print out something
233:27 - like this, just a single
hash symbol that is a brick,
233:32 - and a newline after it.
233:34 - All right, let's make mario.
233:36 - Run mario of 3.
233:38 - OK, that's close to being it.
233:40 - I've got a column.
233:41 - All right, but I need it to be wider.
233:43 - So the solution last time
was to get rid of the newline
233:45 - and then maybe put the
newline here, after the loop.
233:49 - All right, so let's do make mario,
./mario, and type in 3 and huh.
233:55 - All right, so I kind of need to
combine these two ideas somehow.
234:00 - So how might we solve this problem?
234:04 - I want to print rows and
columns, not row or column.
234:10 - How do I do this?
234:12 - Yeah.
234:12 - AUDIENCE: Add another
loop in the for loop.
234:15 - DAVID J. MALAN: Yeah.
234:15 - Add another loop in the for loop, right?
234:17 - If you use one loop conceptually
to kind of count the rows from top
234:21 - to bottom, and then
within each row, you then
234:24 - sort of typewriter style--
old school typewriter--
234:26 - do like, character, character,
character, character horizontally,
234:30 - I think we could do exactly
what we want to achieve here.
234:32 - So how about this?
234:33 - Let me get rid of this line and
get rid of this line for now.
234:36 - And let me just give myself
another loop on the inside.
234:39 - And since I'm already using i,
another reasonable convention
234:42 - here would be to say something like j.
234:45 - So j also gets 0, j is less than n, j++.
234:49 - And now, what's going to happen?
234:51 - Let me go ahead and print out just
one of these things at a time.
234:56 - And let me save and let me run this.
234:58 - Let me see how close we are.
234:59 - Make mario 3.
235:01 - OK, three, that's clearly wrong, but
I see nine things there on the screen.
235:06 - So we're close.
235:07 - What's the one fix I need now to
move the old school typewriter head
235:12 - down to the next row when appropriate?
235:15 - What do you think?
235:17 - Yeah, I need one of these backslash n's.
235:19 - And let me add some comments now to
help everyone visualize what I've done.
235:23 - For each row, for each column,
how about print a brick--
235:30 - just to kind of explain the logic?
235:33 - And so I add that because
now move to next row,
235:37 - I could do something like
this with a backslash n.
235:40 - So here is where the comments,
really, my pseudocode
235:43 - actually kind of illuminates
the situation a bit.
235:46 - Let me go ahead and recompile
mario, ./mario 3, now we're talking.
235:51 - It's not a perfect square,
just because these hash symbols
235:53 - are a little taller than they are wide,
but that's just a font detail here.
235:57 - Now I've done something that's quite
more akin to something like this.
236:03 - All right, so let me pause here
and see if there are any questions.
236:08 - Again, the code's getting
a little more complicated,
236:10 - but we're just building more
complicated programs like in Scratch,
236:14 - with familiar puzzle
pieces-- some variables,
236:15 - some loops, some conditionals.
236:17 - It's all the same as before.
236:19 - Yeah.
236:20 - Can you multiply strings in C?
236:22 - No.
236:22 - But ask that same question again in
a few weeks when we get to Python,
236:25 - and the answer will be yes.
236:27 - Other questions.
236:28 - Yeah.
236:29 - In C, you must specify
the return type, the name
236:32 - of the function, and the
inputs, or arguments,
236:34 - to the function in that order.
236:35 - And if none of them are applicable,
you write the word void.
236:39 - So same question as earlier, let
me kick that can a week or so,
236:42 - and we'll come back to
that and we'll see why.
236:44 - But for now, just take on faith
that you need to do that with main.
236:47 - Because main is a little
special, similar to the
236:49 - when green flag is clicked.
236:51 - It too was a little special as well.
236:54 - Yeah
236:55 - AUDIENCE: [INAUDIBLE]
237:01 - DAVID J. MALAN: Yes.
237:02 - If you want to get out of a
loop early, you could do this.
237:05 - So let me answer this question this way.
237:08 - An alternative to a do while loop
would be to do something like this.
237:14 - How about while true--
237:15 - so do the following forever--
237:18 - let me go ahead and get an inch from
the user for the size of this thing.
237:23 - If n is greater than 0--
237:26 - that is, a positive integer--
237:28 - then go ahead and use a
new keyword called break.
237:32 - This is identical to what we just did.
237:35 - It's just a little longer.
237:37 - It's like a couple extra
lines, a lot of them are blank.
237:39 - And so it's just an alternative.
237:41 - But a do while does the same
thing but a little tighter--
237:43 - if that's in answer to your question.
237:47 - All right, so let's now introduce,
finally, a sequence of problems
237:51 - that I've kind of been
brushing under the rug,
237:53 - though we did see a little bit
of evidence of this earlier
237:55 - when we tried to add 2
billion and 2 billion,
237:57 - and it overflowed the number
of bits in an int, so to speak.
238:02 - Let me go ahead and code up a
program called calculator again.
238:06 - But I'm going to go ahead now
and change this to floats.
238:09 - So I'm going to change x to a float,
and I'm going to use get_float.
238:12 - And a float, again, is just
a floating point value,
238:15 - which is a fancy way of saying a real
number with a decimal point in it.
238:19 - And down here, I'm going to
go ahead and use %f for float.
238:22 - And I'm going to go ahead
now and do one more thing.
238:24 - Instead of addition, I want to do
something fancier, like division,
238:27 - so divide x by y.
238:29 - And I'm going to give myself
another third float called z,
238:32 - as we did at the beginning of today.
238:33 - And I'm going to print out z
instead of x and y explicitly.
238:37 - So I'm going to go ahead now and
do make calculator, ./calculator.
238:42 - And let's do something like, oh, 2/3.
238:44 - 2 divided by 3 is 0.66667.
238:47 - So that's what you would rather expect.
238:49 - Let me run it again, 1/10.
238:52 - All right, so 0.1, and a bunch of zeros.
238:54 - That too is what you
would rather expect.
238:56 - But now let me get a little curious.
238:58 - It turns out that in C, you can
modify the behavior of these format
239:02 - codes a little bit.
239:03 - By default, you get 6 or so digits.
239:05 - Suppose that you want
to get exactly 2 digits.
239:07 - You can more succinctly say 0.2
before the f and after the percent.
239:11 - This is the kind of thing that's
hard to remember, but you Google it,
239:14 - and you find that, OK,
format code for floats
239:16 - uses 0.2 to do two decimal points.
239:19 - So let me do make calculator
again, ./calculator.
239:23 - How about 2/3?
239:24 - 0.67.
239:25 - So it handles the display of
significant digits for us here.
239:28 - And now let me go ahead
and do 1/10 and 0.10.
239:32 - So it's adhering to that.
239:33 - Well, maybe I really want
a lot of precision, right?
239:35 - I've got a really powerful computer.
239:37 - Let me see 50 numbers
after the decimal point.
239:39 - That's a lot of significant digits.
239:41 - Let me remake the
calculator-- whoops, typo.
239:44 - Let me remake the calculator,
./mario calculator.
239:48 - And how about 2/3 again?
239:51 - Well, that's interesting.
239:54 - Pretty sure it's supposed to be
a 0.6 with a line over it, right?
239:58 - In grade school math.
239:59 - All right, well, maybe
that's just a bug.
240:01 - How about 1/10?
240:02 - OK, that's really getting funky.
240:05 - So what's going on?
240:06 - It seems that my program cannot
only not do addition very well--
240:10 - we eventually hit
problems in the billions--
240:12 - we can't even do very
precise numbers here.
240:16 - What's going on?
240:19 - Exactly.
240:19 - In a nutshell, the computer's
approximating the answer
240:22 - using that many numbers
after the decimal point.
240:25 - But the problem
fundamentally is actually
240:26 - very similar to that integer
overflow from before.
240:30 - And I'm using that now as a term of art.
240:31 - Integers can overflow if you're trying
to use more bits than you actually
240:36 - have available to you.
240:37 - You sort of change them all to ones, and
then you're out of bits, so to speak.
240:40 - Same thing here, but in the
different context of floats--
240:42 - if you only have 32
bits-- or, heck, if we
240:45 - change to double and only have 64
bits, that's a lot of precision,
240:48 - but it's not infinite.
240:50 - And, yet, pretty sure there's an
infinite number of real numbers.
240:54 - In the world, which is to say a computer
with finite memory cannot possibly
240:59 - represent all possible
numbers in the world.
241:01 - Because, again, there's
not an infinite number
241:03 - of permutations of 32 or 64 bits.
241:06 - It might be a lot, in the billions
or more, but it's still finite.
241:10 - And so, indeed, this is the
computer's closest approximation
241:13 - to what's actually going on there.
241:15 - And so this is an example of what
we would actually generally call
241:18 - floating-point imprecision.
241:21 - Floating-point imprecision refers to the
inability for computers fundamentally
241:26 - to represent all possible
real numbers 100%
241:29 - precisely, at least by default
in languages like C. Thankfully,
241:33 - in the world of scientific
computing and so forth,
241:35 - there are solutions to this problem
that just give you more digits.
241:38 - But the problem fundamentally
is still going to be there.
241:42 - So there's a reason I
changed x and y to floats.
241:44 - Let's see what would
happen if we rewound a bit.
241:47 - And instead of using floats for x and y,
again, you say integer, so int x and y.
241:52 - And let's go far back
and use get_int as well,
241:56 - thereby giving us integers x and y.
241:59 - Let's still leave z as a float,
because at the end of the day,
242:01 - we want to be able to handle
fractions or floating-point values.
242:04 - But let's go ahead now and
print out this value of z
242:07 - having changed x and y now to ints.
242:09 - make calculator, ./calculator, and
let's do, say, 2 for the numerator,
242:15 - 3 for the denominator.
242:16 - And it's not 0.666, and it's
not even rounding oddly.
242:21 - It's just all zeros this time.
242:23 - So why is that?
242:24 - Well, it turns out that C, when
dividing an integer by an integer,
242:28 - is always going to give you
back an integer, an int.
242:31 - The problem is that floating-point
values don't fit in ints.
242:34 - Only the integral part to the
left of the decimal point does.
242:37 - Everything at and beyond the decimal
point itself get thrown away,
242:41 - known as a feature in
C called truncation.
242:44 - When dividing an integer by an
integer, you get back an integer.
242:47 - But if you're trying to then store
what's actually a floating point
242:51 - result in that integer, C is just
going to throw away everything
242:54 - at and beyond the decimal point,
leaving us with this case,
242:57 - in just the 0 from what should
have been 0.666666 and so forth.
243:03 - So let's see one more example, in fact.
243:05 - Let me go back to my terminal here.
243:06 - Let me do ./calculator again.
243:08 - And let's do 4/3.
243:09 - This time, It should be
1.33333 and so forth.
243:13 - But let's see, 4 divided by 3, both as
integers, this time gives us 1.0000,
243:20 - but there too the
answer should be 1.333.
243:23 - But the floating-point part is
getting truncated or thrown away,
243:27 - leaving us with just 1.
243:29 - So how do we solve this?
243:30 - Well, certainly, we could just use
floats from the get-go, as I did.
243:33 - But if, by nature of your program,
you only have access to integers--
243:37 - or maybe even longs, for which
the same problem would occur--
243:40 - what we can actually do
is called type conversion.
243:44 - And we can explicitly tell
the computer that we actually
243:47 - want to treat this int as though
it's a floating-point value.
243:50 - And we can do that for both x and y.
243:52 - So let me go back to my code here, and
I have a couple of options, in fact.
243:55 - I can convert y to a float by
doing this, I can cast y to a float
244:01 - by literally writing the type
float inside of parentheses
244:04 - right before the y.
244:05 - And if I really want to be explicit,
I can also do the same to x.
244:08 - But, strictly speaking, it suffices
to just change one or the other,
244:12 - not necessarily both.
244:14 - Let me go ahead now and do make
calculator again, ./calculator,
244:19 - and let's try 2 divided by 3.
244:21 - And now, we're back to an
answer that's closer to correct.
244:25 - But, indeed, we're still having
some rounding issues there.
244:27 - Let's run it one more
time for 4 divided by 3.
244:31 - There too we're closer to
the right answer, at least.
244:33 - But we still have that
floating-point imprecision,
244:36 - but that's going to be another
problem altogether to solve.
244:39 - And here in a little
more detail is that issue
244:41 - of integer overflow, which
is in the context of ints.
244:44 - Suppose that we think back to
last week when we had three bits,
244:48 - and we counted from 0 to
7, 0, 1, 2, 3, 4, 5, 6, 7.
244:53 - I think I asked the question,
how would we count to 8?
244:56 - Someone proposed, well,
we need a fourth bit.
244:58 - That's fine if you have a
fourth bit, if you have access
245:01 - to another light bulb or transistor.
245:03 - If you don't, though, the next number
after this is technically 1000.
245:09 - But if you don't have space for
or hardware for that fourth bit,
245:13 - you might as well just be
representing the number 0.
245:16 - So in the world of integers, if
you're only using three bits,
245:19 - those three bits eventually
overflow when you count past 7.
245:23 - Because what should be 8 can't fit, so
to speak, so it rolls back over to 0.
245:28 - And as arcane as this
problem might seem,
245:30 - we humans have done
this a couple of times.
245:33 - You might recall
knowing about or reading
245:35 - about the Y2K problem,
where a lot of people
245:37 - thought the world was going to end.
245:38 - Why?
245:38 - Because on January 1st of
2000, a lot of computers,
245:43 - presumably, were going to update their
clocks from 1999 to the year 2000.
245:48 - The problem is, though, for
decades, for efficiency, we humans
245:51 - were honestly in the habit of
not storing years as four digits.
245:54 - Why?
245:55 - Because that's just a lot of space
to waste, especially since centuries
245:58 - don't happen that often.
245:59 - So a lot of computer systems,
especially early on when
246:02 - hardware was very expensive
and memory was very tight,
246:05 - just stored the last
two digits of any year.
246:08 - The problem, of course, on January 1st
of 2000 is that 99 rolls over to 100.
246:14 - But if you don't have room for
another digit it's just 00.
246:19 - And if your code assumes a prefix of
19, well, we just went from the year
246:23 - 1999 back to the year 1900.
246:26 - Thankfully, long story short, a
lot of people wrote a lot of code
246:29 - in a lot of old languages and
mostly warded off this problem,
246:32 - so the world did not end.
246:34 - The next time the world might end
though, is on January 19, 2038.
246:39 - Now, that might feel
like a long time away,
246:42 - but so did the year 2000, at one point.
246:44 - Why might clocks again break in
today's modern computers in 2038,
246:51 - might you think?
246:52 - AUDIENCE: [INAUDIBLE]
246:54 - DAVID J. MALAN: Indeed.
246:54 - So this refers to some
number of seconds.
246:57 - So it turns out that the way
computers generally keep track of time
247:00 - is they count the total number
of seconds since the epoch, which
247:04 - is defined as January 1, 1970.
247:06 - Why?
247:07 - It was just a good year
to start counting at,
247:09 - when computers really
came onto the scene.
247:11 - Unfortunately, most computers used 32
bits to count the number of seconds
247:16 - since January 1, 1970, the
implication of which is we
247:20 - can only count up to
roughly 2 billion seconds.
247:23 - 2 billion seconds is going to
happen in 2038, at which 30 11's
247:29 - are going to roll over as follows.
247:31 - That number 2 billion,
which is the max--
247:34 - because if you're representing
positive and negative numbers,
247:37 - recall that you can only count
as high as positive 2 billion
247:39 - or negative 2 billion--
247:41 - looks like this.
247:42 - This is roughly the number
2 billion in binary.
247:44 - It's all ones with one
zero way over here.
247:47 - If I count one second past that
2 billion number, give or take--
247:50 - that means, all right,
I add 1, I carry the 1--
247:54 - it's just like 9's
becoming 0's in decimal.
247:57 - If I keep this sort of simple
animation and I keep carrying the 1,
248:01 - carrying the 1, carrying the 1, 1 second
after 2 billion seconds, give or take,
248:05 - I have this number in
the computer's memory.
248:08 - So there's still 1 bit that's
a 1 all the way to the left.
248:11 - Unfortunately, that bit
often represents negativity,
248:16 - whereby if that first bit is negative,
that represents that the rest of it
248:20 - somehow represents a negative number.
248:22 - It's not negative 0.
248:23 - There's a fancier representation.
248:24 - But a very big, positive
number very suddenly
248:27 - becomes a very big, negative number.
248:29 - And that number is roughly
negative 2 billion.
248:32 - That means computers
in 2038 on that date
248:35 - are going to accidentally
think that it's
248:37 - been negative 2 billion seconds since
January 1, 1970, which is going to make
248:43 - computers potentially think it's 1901.
248:46 - So what is the solution to
the 2038 problem, perhaps?
248:50 - Y2K was because we were
using two digits for years.
248:53 - What about 2038?
248:55 - More bits.
248:55 - And, thankfully, we're getting a
little better at lessons learned here,
249:00 - and computers now are
increasingly using 64 bits.
249:03 - And all of us will be long
gone by the time we run out
249:05 - of that number of seconds, so
it's someone else's problem
249:08 - many, many years from now.
249:09 - But that's really the
fundamental solution.
249:11 - If you're running up against
something finite, well,
249:13 - just kick the can further and
just give yourself more bits.
249:16 - And, frankly, because hardware
is so much cheaper these days,
249:18 - computers are so much faster,
it's not as big of a deal
249:21 - as it might have been decades ago.
249:22 - But that's indeed the solution.
249:24 - But this arises in very common contexts.
249:27 - In fact, let me go ahead and write a
real quick program here called pennies.
249:32 - You might think that just converting
dollars to pennies in US currency
249:35 - might be simple, but let
me go ahead and do this.
249:37 - In pennies.c, I'm going to
go ahead and include cs50.h.
249:41 - And I'm going to include stdio.h,
int main void as my starting point.
249:48 - And now down here, I'm going to do this.
249:50 - I'm going to get a float
called amount, and I'm
249:52 - going to ask the user for some amount
of dollars, so a dollar amount,
249:56 - and I'm going to store that
in a variable called amount.
249:59 - Then I'm going to simply convert that
amount to pennies by doing, say, how
250:07 - about amount times 100?
250:10 - And then I'm going to go ahead and print
out that the number of pennies is %i--
250:16 - because that's just an
integer in pennies--
250:18 - backslash n, quote
unquote, comma, pennies.
250:22 - All right, so if I didn't make any
mistakes here, let me make pennies,
250:26 - ./pennies.
250:27 - And suppose I have, say, $0.99, so 0.99.
250:31 - That's 99 pennies.
250:32 - Suppose I have $1.23.
250:35 - That's pretty good.
250:36 - Suppose I have $4.20.
250:39 - Huh.
250:41 - There's that imprecision issue.
250:42 - And this isn't even
that big of an amount.
250:45 - Now, not a big deal if the cashier gives
you one penny less than you're owed,
250:49 - but you can imagine this adding up.
250:50 - You can imagine this being worrisome
for financial implications,
250:54 - for financial transactions, for
scientific measurements and the like.
250:57 - My program can't even handle this.
250:59 - Well, there are some solutions here.
251:01 - And it looks like what's
really happening--
251:04 - if I print it out using the %f with a
0.50 or whatever to see more decimal
251:08 - points--
251:09 - presumably, the computer is struggling
to represent $4.20 precisely.
251:14 - It's probably storing 4 dollars
and 19.9999-something cents.
251:20 - So it's close, but it's not quite there.
251:23 - So I could at least solve this
by rounding up, for instance.
251:28 - And it turns out there is
a round function out there.
251:31 - And it turns out that it's in a
library called the math library.
251:33 - And you would know this by looking
at online documentation and the like,
251:36 - as we'll point you to.
251:37 - And if I now make pennies again and
do ./pennies, I can now do $4.20.
251:43 - And, voila.
251:44 - Now it's correct.
251:46 - So at least in this context, it
seems like a solvable problem.
251:49 - But it's certainly something I
need to be mindful of, nonetheless.
251:53 - Unfortunately, even professional,
full-time programmers over the years
251:57 - have not been particularly
attentive to these kinds of details.
252:00 - And in a class like this, the goal
is not just to teach you programming
252:03 - but to really teach you what's going
on underneath the hood, so to speak,
252:06 - so that you have a bottom-up
understanding of how data
252:09 - is represented, how computers
are manipulating it,
252:11 - so that you are not on the failing
end of some program having some bug.
252:16 - And so that we as a society are not
beholden to those kinds of mistakes
252:19 - too.
252:19 - And this happens,
unfortunately, all of the time.
252:22 - This is a Boeing airplane
that a few years ago needed
252:26 - to be rebooted after every 248 days.
252:29 - Why?
252:30 - Because this Boeing airplane software
was using a 32-bit integer counting up
252:34 - tenths of a second to keep
track of something or other
252:36 - related to its electrical power.
252:38 - And, unfortunately, after 248 days of
the airplane being continuously on--
252:43 - which in the airline
industry is apparently not
252:45 - uncommon to make every dollar count,
keeping the planes up and running
252:49 - all the time--
252:50 - the 32-bit number would
roll over and the power
252:54 - would shut off on the airplane
as a side effect because of sort
252:57 - of undefined behavior in that case.
252:59 - The temporary solution by Boeing at
the time was apparently, essentially,
253:02 - sort of operating system style,
well, have you rebooted your plane?
253:06 - And that was indeed the fix until they
rolled out an actual software patch.
253:09 - This stuff really matters.
253:11 - And the more hardware we carry
around and the more we as a society
253:14 - use these kinds of devices,
the more of these problems
253:17 - we're going to run into down the road.
253:20 - That's it for CS50.
253:21 - We'll see you next time.
253:24 - [MUSIC PLAYING]
254:42 - DAVID MALAN: This is
CS50 and this is week 2.
254:45 - Now that you have some programming
experience under your belts,
254:47 - in this more arcane language called c.
254:50 - Among our goals today is to help
you understand exactly what you have
254:53 - been doing these past several days.
254:54 - Wrestling with your first programs in
C, so that you have more of a bottom
254:58 - up understanding of what
some of these commands do.
255:00 - And, ultimately, what more
we can do with this language.
255:02 - So this recall was the very
first program you wrote,
255:06 - I wrote in this language
called C, much more textual,
255:09 - certainly, than the Scratch equivalent.
255:11 - But at the end of the day,
computers, your Mac, your PC,
255:15 - VS Code doesn't understand
this actual code.
255:18 - What's the format into which we need
to get any program that we write, just
255:21 - to recap?
255:22 - AUDIENCE: [INAUDIBLE]
255:23 - DAVID MALAN: So binary,
otherwise known as machine code.
255:26 - Right?
255:26 - The 0s and 1s that your computer
actually does understand.
255:30 - So somehow we need to
get to this format.
255:32 - And up until now, we've been
using this command called make,
255:34 - which is aptly named, because
it lets you make programs.
255:37 - And the invocation of that
has been pretty simple.
255:40 - Make hello looks in your current
directory or folder for a file called
255:44 - hello.c, implicitly, and then it
compiles that into a file called hello,
255:49 - which itself is executable,
which just means runnable,
255:51 - so that you can then do ./hello.
255:54 - But it turns out that make is
actually not a compiler itself.
255:58 - It does help you make programs.
256:00 - But make is this utility that comes on
a lot of systems that makes it easier
256:04 - to actually compile code by
using an actual compiler,
256:08 - the program that converts source code
to machine code, on your own Mac, or PC,
256:12 - or whatever cloud environment
you might be using.
256:14 - In fact, what make is
doing for us, is actually,
256:17 - running a command automatically
known as clang, for C language.
256:21 - And, so here, for instance, in VS
Code, is that very first program again,
256:25 - this time in the context
of a text editor,
256:27 - and I could compile
this with make hello.
256:30 - Let me go ahead and use the
compiler itself manually.
256:33 - And we'll see in a moment why we've
been automating the process with make.
256:36 - I'm going to run clang instead.
256:39 - And then I'm going to run hello.c.
256:41 - So it's a little different
how the compiler's used.
256:43 - It needs to know, explicitly,
what the file is called.
256:46 - I'll go ahead and run
clang, hello.c, Enter.
256:49 - Nothing seems to happen, which,
generally speaking, is a good thing.
256:52 - Because no errors have popped up.
256:54 - And if I do ls for list, you'll see
there is not a file called hello.
257:00 - But there is a curiously-named
file called a.out.
257:03 - This is a historical convention,
stands for assembler output.
257:06 - And this is, just, the default
file name for a program
257:09 - that you might compile yourself,
manually, using clang itself.
257:13 - Let me go ahead now and
point out that that's
257:16 - kind of a stupid name for a program.
257:17 - Even though it works,
./a.out would work.
257:20 - But if you actually want to
customize the name of your program,
257:23 - we could just resort to make,
or we could do explicitly
257:26 - what make is doing for us.
257:28 - It turns out, some
programs, among them make,
257:31 - support what are called
command line arguments,
257:33 - and more on those later today.
257:34 - But these are literally words or
numbers that you type at your prompt
257:37 - after the name of a program that just
influences its behavior in some way.
257:41 - It modifies its behavior.
257:44 - And it turns out, if you read
the documentation for clang,
257:47 - you can actually pass a -o, for
output, command line argument, that
257:52 - lets you specify,
explicitly what do you want
257:54 - your outputted program to be called?
257:56 - And then you go ahead and type the
name of the file that you actually
257:58 - want to compile, from
source code to machine code.
258:01 - Let me hit Enter now.
258:02 - Again, nothing seems to happen,
and I type ls and voila.
258:06 - Now we still have the old a.out,
because I didn't delete it yet.
258:09 - And I do have hello now.
258:10 - So ./hello, voila, runs
hello, world again.
258:14 - And let me go ahead
and remove this file.
258:16 - I could, of course, resort to using
the Explorer, on the left hand side.
258:20 - Which, I am in the habit of closing,
just to give us more room to see.
258:23 - But I could go ahead and right-click
or control-click on a.out
258:26 - if I want to get rid of it.
258:27 - Or again, let me focus on
the command line interface.
258:30 - And I can use--
258:31 - anyone recall?
258:32 - We didn't really use it much,
but what command removes a file?
258:35 - AUDIENCE: rm.
258:36 - DAVID MALAN: So rm for
remove. rm, a.out, Enter.
258:40 - Remove regular file,
a.out, y for yes, enter.
258:44 - And now, if I do ls
again, voila, it's gone.
258:46 - All right, so, let's
now enhance this program
258:48 - to do the second version we ever did,
which was to also include cs50.h,
258:54 - so that we have access to functions
like, get string, and the like.
258:57 - Let me do string, name, gets,
get string, what's your name,
259:04 - question mark.
259:05 - And now, let me go ahead and say hello
to that name with our %s placeholder,
259:10 - comma, name.
259:11 - So this was version 2 of
our program last time,
259:13 - that very easily compiled with make
hello, but notice the difference now.
259:17 - If I want to compile this
thing myself with clang, using
259:20 - that same lesson learned,
all right, let's do it.
259:22 - clang-o, hello, just so I get a better
name for the program, hello.c, Enter.
259:29 - And a new error pops up that some of
you might have encountered on your own.
259:34 - So it's a bit arcane here, and there's
this mention of a cryptic-looking path
259:37 - with temp for temporary there.
259:39 - But somehow, my issue's in
main, as we can see here.
259:42 - It somehow relates to hello.c.
259:44 - Even though we might not have seen
this language last time in class,
259:47 - but there's an undefined
reference to get string.
259:50 - As though get string doesn't exist.
259:52 - Now, your first instinct might be, well
maybe I forgot cs50.h, but of course,
259:55 - I didn't.
259:56 - That's the very first
line of my program.
259:58 - But it turns out, make is doing
something else for us, all this time.
260:02 - Just putting cs50.h, or any header
file at the top of your code,
260:06 - for that matter, just teaches the
compiler that a function will exist.
260:10 - It, sort of, asks the compiler
to-- it asks the compiler
260:13 - to trust that I will, eventually,
get around to implementing functions,
260:16 - like get string, and cs50.h,
and stdio.h, printf, therein.
260:22 - But this error here, some kind of
linker command, relates to the fact
260:28 - that there's a separate
process for actually
260:30 - finding the 0s and 1s that
cs50 compiled long ago for you.
260:34 - That authors of this operating
system compiled for you, long ago,
260:38 - in the form of printf.
260:39 - We need to, somehow,
tell the compiler that we
260:42 - need to link in code
that someone else wrote,
260:44 - the actual machine code that someone
else wrote and then compiled.
260:48 - So to do that, you'd have to
type -lcs50, for instance,
260:51 - at the end of the command.
260:52 - So additionally, telling clang
that, not only do you want to output
260:55 - a file called hello, and you want
to compile a file called hello.c,
260:58 - you also want to quote-unquote
link in a bunch of 0s and 1s
261:03 - that collectively implement
get string and printf.
261:07 - So now, if I hit enter,
this time it compiled OK.
261:11 - And now if I run ./hello, it works
as it did last week, just like that.
261:17 - But honestly, this is just going to
get really tedious, really quickly.
261:20 - Notice, already, just
to compile my code,
261:22 - I have to run clang-o,
hello, hello.c, lcs50,
261:25 - and you're going to have
to type more things, too.
261:27 - If you wanted to use the math library,
like, to use that round function,
261:31 - you would also have
to do -lm, typically,
261:33 - to specify give me the math
bits that someone else compiled.
261:37 - And the commands just
get longer and longer.
261:39 - So moving forward, we won't have
to resort to running clang itself,
261:43 - but clang is, indeed, the compiler.
261:45 - That is the program that converts
from source code to machine code.
261:48 - But we'll continue to use make because
it just automates that process.
261:52 - And the commands are
only going to get more
261:54 - cryptic the more sophisticated and
more feature full year programs get.
261:58 - And make, again, is just a tool
that makes all that happen.
262:03 - Let me pause there to see if
there's any questions before then we
262:08 - take a look further under the hood.
262:10 - Yeah, in front.
262:11 - AUDIENCE: Can you explain again what
the -lcs50-- just why you put that?
262:14 - DAVID MALAN: Sure, let me
come back to that in a moment.
262:16 - What does the -lcs50 mean?
262:18 - We'll come back to that,
visually, in just a moment.
262:20 - But it means to link in the
0s and 1s that collectively
262:23 - implement get string and printf.
262:24 - But we'll see that, visually, in a sec.
262:26 - Yeah, behind you.
262:27 - AUDIENCE: [INAUDIBLE].
262:31 - DAVID MALAN: Really good question.
262:32 - How come I didn't have
to link in standard I/O?
262:35 - Because I used printf in version 1.
262:37 - Standard I/O is just, literally,
so standard that it's built in,
262:40 - it just works for free.
262:41 - CS50, of course, is not.
262:43 - It did not come with the
language C or the compiler.
262:45 - We ourselves wrote it.
262:46 - And other libraries, even though
they might come with the language C,
262:50 - they might not be enabled by default,
generally for efficiency purposes.
262:54 - So you're not loading more 0s
and 1s into the computer's memory
262:57 - than you need to.
262:58 - So standard I/O is special, if you will.
263:01 - Other questions?
263:02 - Yeah?
263:03 - AUDIENCE: [INAUDIBLE]
263:05 - DAVID MALAN: Oh, what does the -o mean?
263:07 - So -o is shorthand for
the English word output,
263:10 - and so -o is telling clang to
please output a file called hello,
263:15 - because the next thing I
wrote after the command line
263:18 - recall was clang -o hello, then
the name of the file, then -lcs50.
263:24 - And this is where these commands
do get and stay fairly arcane.
263:27 - It's just through muscle
memory and practice
263:29 - that you'll start to remember, oh
what are the other commands that you--
263:31 - what are the command line arguments
you can provide to programs?
263:34 - But we've seen this before.
263:35 - Technically, when you run make
hello, the program is called make,
263:39 - hello is the command line argument.
263:41 - It's an input to the
make function, albeit,
263:43 - typed at the prompt, that tells
make what you want to make.
263:46 - Even when I used rm a moment
ago, and did rm of a.out,
263:50 - the command line argument
there was called a.out
263:52 - and it's telling rm what to delete.
263:55 - It is entirely dependent on the programs
to decide what their conventions are,
263:59 - whether you use dash this
or dash that, but we'll
264:02 - see over time, which ones
actually matter in practice.
264:05 - So to come back to the first question
about what actually is happening there,
264:10 - let's consider the code more closely.
264:12 - So here is that first
version of the code
264:14 - again, with stdio.h and only
printf, so no cs50 stuff yet.
264:18 - Until we add it back in
and had the second version,
264:21 - where we actually get the human's name.
264:23 - When you run this command,
there's a few things
264:27 - that are happening
underneath the hood, and we
264:28 - won't dwell on these
kinds of details, indeed,
264:30 - we'll abstract it away by using make.
264:33 - But it's worth understanding
from the get-go,
264:35 - how much automation is going on, so
that when you run these commands,
264:38 - it's not magic.
264:39 - You have this bottom-up
understanding of what's going on.
264:42 - So when we say you've been
compiling your code with make,
264:45 - that's a bit of an oversimplification.
264:47 - Technically, every time
you compile your code,
264:51 - you're having the computer do
four distinct things for you.
264:53 - And this is not four distinct things
that you need to memorize and remember
264:57 - every time you run your
program, what's happening,
264:59 - but it helps to break it
down into building blocks,
265:02 - as to how we're getting from source
code, like C, into 0s and 1s.
265:06 - It turns out, that when you compile,
quote-unquote, "your code," technically
265:10 - speaking, you're doing four things
automatically, and all at once.
265:14 - Preprocessing it, compiling it,
assembling it, and linking it.
265:18 - Just humans decided, let's just
call the whole process compiling.
265:21 - But for a moment, let's
consider what these steps are.
265:24 - So preprocessing refers to this.
265:26 - If we look at our source code,
version 2 that uses the cs50 library
265:30 - and therefore get string, notice that
we have these include lines at top.
265:34 - And they're kind of special
versus all the other code
265:36 - we've written, because they start
with hash symbols, specifically.
265:39 - And that's sort of a
special syntax that means
265:41 - that these are, technically,
called preprocessor directives.
265:44 - Fancy way of saying they're handled
special versus the rest of your code.
265:49 - In fact, if we focus on
cs50.h, recall from last week
265:54 - that I provided a hint as to what's
actually in cs50.h, among other things.
266:00 - What was the one salient thing that
I said was in cs50.h and therefore,
266:04 - why we were including
it in the first place?
266:07 - AUDIENCE: Get string?
266:08 - DAVID MALAN: So get
string, specifically,
266:11 - the prototype for get string.
266:13 - We haven't made many of
our own functions yet,
266:15 - but recall that any time
we've made our own functions,
266:18 - and we've written them
below main in a file,
266:20 - we've also had to, somewhat
stupidly, copy paste
266:23 - the prototype of the function
at the top of the file,
266:25 - just to teach the compiler that
this function doesn't exist, yet,
266:29 - it does down there, but it will exist.
266:31 - Just trust me.
266:32 - So again, that's what these
prototypes are doing for us.
266:35 - So therefore, in my
code, If I want to use
266:37 - a function like get string,
or printf, for that matter,
266:41 - they're not implemented
clearly in the same file,
266:43 - they're implemented elsewhere.
266:44 - So I need to tell the compiler
to trust me that they're
266:46 - implemented somewhere else.
266:48 - And so technically,
inside of cs50.h, which
266:51 - is installed somewhere in the
cloud's hard drive, so to speak,
266:54 - that you all are accessing via VS Code,
there's a line that looks like this.
266:59 - A prototype for the get string function
that says the name of the functions
267:03 - get string, it takes one input,
or argument, called prompt,
267:07 - and that type of that
prompt is a string.
267:09 - Get string, not surprisingly, has a
return value and it returns a string.
267:15 - So literally, that line and a
bunch of others, are in cs50.h.
267:19 - So rather than you all having
to copy paste the prototype,
267:22 - you can just trust that
cs50 figured out what it is.
267:25 - You can include cs50.h
and the compiler is going
267:29 - to go find that prototype for you.
267:31 - Same thing in standard
I/O. Someone else-- what
267:33 - must clearly be in stdio.h,
among other stuff, that
267:37 - motivates our including stdio.h, too?
267:41 - Yeah?
267:42 - AUDIENCE: Printf.
267:43 - DAVID MALAN: Printf, the
prototype for printf,
267:45 - and I'll just change it here
in yellow, to be the same.
267:48 - And it turns out, the format--
267:49 - the prototype for printf
is, actually, pretty fancy,
267:52 - because, as you might have noticed,
printf can take one argument, just
267:56 - something to print, 2, if you want
to plug a value into it, 3 or more.
268:00 - So the dot dot dot just
represents exactly that.
268:02 - It's not quite as simple a prototype
as get strain, but more on that
268:06 - another time.
268:07 - So what does it mean to
preprocess your code?
268:10 - The very first thing the
compiler, clang, in this case,
268:14 - is doing for you when it reads your
code top-to-bottom, left-to-right, is it
268:18 - notices, oh, here is hash include,
oh, here's another hash include.
268:22 - And it, essentially, finds those files
on the hard drive, cs50.h, stdio.h,
268:27 - and does the equivalent of copying
and pasting them automatically
268:31 - into your code at the very top.
268:33 - Thereby teaching the compiler
that gets string and printf
268:36 - will eventually exist somewhere.
268:38 - So that's the preprocessing
step, whereby, again, it's
268:42 - just doing a find-and-replace of
anything that starts with hash include.
268:46 - It's plugging in the files
there so that you, essentially,
268:48 - get all the prototypes
you need automatically.
268:52 - OK.
268:53 - What does it mean, then,
to compile the results?
268:55 - Because at this point
in the story, your code
268:57 - now looks like this in
the computer's memory.
268:59 - It doesn't change your
file, it's doing all
269:01 - of this in the computer's
memory, or RAM, for you.
269:04 - But it, essentially, looks like this.
269:06 - Well the next step is what's,
technically, really compiling.
269:09 - Even though again, we use
compile as an umbrella term.
269:12 - Compiling code in C
means to take code that
269:15 - now looks like this in
the computer's memory
269:18 - and turn it into something
that looks like this.
269:21 - Which is way more cryptic.
269:22 - But it was just a few
decades ago that, if you
269:25 - were taking a class like
CS50 in its earlier form,
269:28 - we wouldn't be using C it didn't exist
yet, we would actually be using this,
269:32 - something called assembly language.
269:33 - And there's different types of,
or flavors of, assembly language.
269:37 - But this is about as low level as
you can get to what a computer really
269:41 - understands, be it a
Mac, or PC, or a phone,
269:43 - before you start getting
into actual 0s and 1s.
269:46 - And most of this is cryptic.
269:48 - I couldn't tell you what this is doing
unless I thought it through carefully
269:51 - and rewound mentally, years
ago, from having studied it,
269:54 - but let's highlight a
few key words in yellow.
269:57 - Notice that this assembly language
that the computer is outputting
270:01 - for you automatically,
still has mention of main
270:04 - and it has mention of get string,
and it has mention of printf.
270:07 - So there's some relationship to
the C code we saw a moment ago.
270:10 - And then if I highlight
these other things,
270:12 - these are what are called
computer instructions.
270:14 - At the end of the day,
your Mac, your PC,
270:17 - your phone actually only
understands very basic instructions,
270:20 - like addition, subtraction, division,
multiplication, move into memory,
270:25 - load from memory, print something to
the screen, very basic operations.
270:30 - And that's what you're seeing here.
270:32 - These assembly instructions
are what the computer actually
270:37 - feeds into the brains of the computer,
the CPU, the central processing unit.
270:41 - And it's that Intel CPU,
or whatever you have,
270:44 - that understands this instruction, and
this one, and this one, and this one.
270:47 - And collectively, long
story short, all they do
270:50 - is print hello, world on
the screen, but in a way
270:52 - that the machine understands how to do.
270:56 - So let me pause here.
270:58 - Are there any questions on
what we mean by preprocessing?
271:01 - Which finds and replaces the hash
includes symbols, among others,
271:05 - and compiling, which technically
takes your source code,
271:08 - once preprocessed, and converts it to
that stuff called assembly language.
271:12 - AUDIENCE: [INAUDIBLE] each CPU has--
271:14 - DAVID MALAN: Correct.
271:15 - Each type of CPU has
its own instruction set.
271:18 - Indeed.
271:19 - And as a teaser, this is why,
at least back in the day, when
271:23 - we used to install software from
CD-ROMs, or some other type of media,
271:27 - this is why you can't take a program
that was sold for a Windows computer
271:32 - and run it on a Mac, or vice-versa.
271:33 - Because the commands, the instructions
that those two products understand,
271:38 - are actually different.
271:39 - Now Microsoft, or any company, could
generally write code in one language,
271:44 - like C or another, and they can
compile it twice, saving a PC version
271:48 - and saving a Mac version.
271:50 - It's twice as much work and sometimes
you get into some incompatibilities,
271:54 - but that's why these steps
are somewhat distinct.
271:57 - You can now use the same code and
support even different platforms,
272:00 - or systems, if you'd want.
272:02 - All right.
272:02 - Assembly, assembling.
272:03 - Thankfully, this part is fairly
straightforward, at least, in concept.
272:07 - To assemble code, which is step
three of four, that is just
272:10 - happening for you every time
you run make or, in turn, clang,
272:14 - this assembly language, which the
computer generated automatically
272:17 - for you from your source code,
is turned into 0s and 1s.
272:21 - So that's the step that, last
week, I simplified and said,
272:25 - when you compile your code, you convert
it to source code-- from source code
272:28 - to machine code.
272:29 - Technically, that happens
when you assemble your code.
272:31 - But no one in normal
conversations says that, they just
272:35 - say compile for all of these terms.
272:37 - All right.
272:38 - So that's assembling.
272:41 - There's one final step.
272:43 - Even in this simple program
of getting the user's name
272:46 - and then plugging it into printf, I'm
using three different people's code,
272:51 - if you will.
272:51 - My own, which is in hello.c.
272:54 - Some of CS50s, which is
in hello.c, sorry-- which
272:59 - is in cs50.c, which is not
a file I've mentioned, yet,
273:03 - but it stands to reason, that if
there's a cs50.h that has prototypes,
273:07 - turns out, the actual
implementation of get string
273:09 - and other things are in cs50.c.
273:11 - And there's a third file
somewhere on the hard drive
273:15 - that's involved in compiling
even this simple program.
273:18 - hello.c, cs50.c, and by that
logic, what might the other be?
273:24 - Yeah?
273:24 - AUDIENCE: stdio?
273:26 - DAVID MALAN: Stdio.c.
273:27 - And that's a bit of a white lie,
because that's such a big, fancy library
273:30 - that there's actually multiple files
that compose it, but the same idea,
273:34 - and we'll take the simplification.
273:35 - So when I have this code,
and I compile my code,
273:40 - I get those 0s and 1s that end up taking
hello.c and turning it, effectively,
273:45 - into 0s and 1s that are combined with
cs50.c, followed by stdio.c as well.
273:51 - So let me rewind here.
273:52 - Here might be the 0s and 1s for my code,
the two lines of code that I wrote.
273:57 - Here might be the 0s and 1s for what
cs50 wrote some years ago in cs50.c.
274:02 - Here might be the 0s and 1s that someone
wrote for standard I/O decades ago.
274:06 - The last and final step
is that linking command
274:09 - that links all of these
0s and 1s together,
274:12 - essentially stitches them together
into one single file called hello,
274:18 - or called a.out, whatever you name it.
274:20 - That last step is what combines all of
these different programmers' 0s and 1s.
274:25 - And my God, now we're
really in the weeds.
274:28 - Who wants to even think about
running code at this level?
274:31 - You shouldn't need to.
274:32 - But it's not magic.
274:33 - When you're running make,
there's some very concrete steps
274:36 - that are happening that humans
have developed over the years,
274:38 - over the decades, that breakdown
this big problem of source code going
274:41 - to 0s and 1s, or machine code,
into these very specific steps.
274:46 - But henceforth, you can
call all of this compiling.
274:50 - Questions?
274:51 - Or confusion?
274:52 - Yeah?
274:52 - AUDIENCE: Can you explain
again what a.out signifies?
274:55 - DAVID MALAN: Sure.
274:56 - What does a.out signify?
274:57 - a.out is just the conventional,
default file name for any program
275:02 - that you compile directly
with a compiler, like clang.
275:05 - It's a meaningless name, though.
275:07 - It stands for assembler output, and
assembler might now sound familiar
275:11 - from this assembling process.
275:12 - It's a lame name for a
computer program, and we
275:15 - can override it by outputting
something like hello, instead.
275:20 - Yeah?
275:21 - AUDIENCE: [INAUDIBLE]
275:27 - DAVID MALAN: To recap, there are
other prototypes in those files,
275:32 - cs50.h, stdio.h, technically, they're
all included on top of your file,
275:36 - even though you, strictly
speaking, don't need most of them,
275:38 - but they are there, just in
case you might want them.
275:42 - And finally, any other questions?
275:43 - Yeah?
275:44 - AUDIENCE: [INAUDIBLE]
275:48 - DAVID MALAN: Does it matter what order
we're telling the computer to run?
275:51 - Sometimes with libraries,
yes, it matters
275:53 - what order they are linked in together.
275:55 - But for our purposes, it's
really not going to matter.
275:58 - It's going to-- make is going to take
care of automating that process for us.
276:03 - All right.
276:03 - So with that said, henceforth,
compiling, technically,
276:06 - is these four things.
276:06 - But we'll focus on it as a higher
level concept, an abstraction,
276:10 - known as compiling itself.
276:14 - So another process that we'll
now begin to focus on all the
276:16 - more this week because, invariably,
this past week you ran against--
276:19 - ran up against some challenges.
276:21 - You probably created your very first
bugs, or mistakes, in a program
276:24 - and so let's focus for a moment on
actual techniques for debugging.
276:28 - As you spend more time
this semester, in the years
276:31 - to come If you continue to program,
you're never, frankly, probably,
276:34 - going to write bug
free code, ultimately.
276:37 - Though your programs are going to get
more featureful, more sophisticated,
276:40 - and we're all going to start to
make more sophisticated mistakes.
276:44 - And to this day, I write
buggy code all the time.
276:46 - And I'm always horrified
when I do it up here.
276:48 - But hopefully, that
won't happen too often.
276:50 - But when it does, it's a process,
now, of debugging, trying
276:54 - to find the mistakes in your program.
276:56 - You don't have to stare at your code,
or shake your fist at your code.
276:59 - There are actual tools
that real world programmers
277:02 - use to help debug their
code and find these faults.
277:06 - So what are some of the techniques
and tools that folks use?
277:08 - Well as an aside, if you've ever--
277:13 - a bug in a program is a mistake,
that's been around for some time.
277:17 - If you've ever heard this tale,
some 50 plus years ago, in 1947.
277:22 - This is an entry in a log book written
by a famous computer scientist known
277:27 - as-- named Grace Hopper,
who happened to be the one
277:29 - to record the very first discovery of a
quote-unquote actual bug in a computer.
277:33 - This was like a moth
that had flown into,
277:36 - at the time, a very sophisticated system
known as the Harvard Mark II computer,
277:41 - very large, refrigerator-sized
type systems,
277:44 - in which an actual bug caused an issue.
277:48 - The etymology of bug though,
predates this particular instance,
277:51 - but here you have, as any computer
scientists might know, the example
277:54 - of a first physical bug in a computer.
277:57 - How, though, do you go
about removing such a thing?
277:59 - Well, let's consider a very
simple scenario from last time,
278:02 - for instance, when we were trying to
print out various aspects of Mario,
278:05 - like this column of 3 bricks.
278:07 - Let's consider how I might go about
implementing a program like this.
278:10 - Let me switch back over to VS
Code here, and I'm going to run--
278:15 - write a program.
278:17 - And I'm not going to
trust myself, so I'm
278:18 - going to call it
buggy.c from the get-go,
278:20 - knowing that I'm going
to mess something up.
278:22 - But I'm going to go ahead
and include stdio.h.
278:25 - And I'm going to define main, as usual.
278:28 - So hopefully, no mistakes just yet.
278:30 - And now, I want to print those
3 bricks on the screen using
278:32 - just hashes for bricks.
278:34 - So how about 4 int i get 0, i less
than or equal to 3, i plus plus.
278:40 - Now, inside of my
curly braces, I'm going
278:42 - to go ahead and print out a hash
followed by a backslash n, semicolon.
278:48 - All right, saving the file, doing
make, buggy, Enter, it compiles.
278:52 - So there's no syntactical errors,
my code is syntactically correct.
278:57 - But some of you have probably
seen the logical error already,
279:00 - because when I run this
program I don't get
279:03 - this picture, which was 3 bricks
high, I seem to have 4 bricks instead.
279:09 - Now, this might be jumping out
at you, why it's happening,
279:12 - but I've kept the program
simple just so that we
279:14 - don't have to find an actual bug, we can
use a tool to find one that we already
279:18 - know about, in this case.
279:20 - What might be the first strategy
for finding a bug like this,
279:23 - rather than staring at your code,
asking a question, trying to think
279:27 - through the problem?
279:28 - Well, let's actually try to diagnose
the problem more proactively.
279:31 - And the simplest way to do
this now, and years from now,
279:34 - is, honestly, going to be to
use a function like printf.
279:38 - Printf is a wonderfully
useful function, not
279:40 - for formatting-- printing
formatted strings and all that, for
279:42 - just looking inside
the values of variables
279:45 - that you might be curious
about to see what's going on.
279:48 - So you know what?
279:49 - Let me do this.
279:50 - I see that there's 4 coming
out, but I intended 3.
279:53 - So clearly, something's
wrong with my i variables.
279:56 - So let me be a little more pedantic.
279:58 - Let me go inside of this
loop and, temporarily,
280:01 - say something explicit, like, i is--
280:04 - &i /n, and then just
plug in the value of i.
280:09 - Right?
280:09 - This is not the program I want to
write, it's the program I'm temporarily
280:13 - writing, because now I'm going
to say make buggy, ./buggy.
280:18 - And if I look, now,
at the output, I have
280:20 - some helpful diagnostic information.
i is 0, and I get a hash, i is 1,
280:25 - and I get a hash, 2 and I
get a hash, 3 and I get hash.
280:27 - OK, wait a minute.
280:28 - I'm clearly going too many
steps because, maybe, I
280:30 - forgot that computers are,
essentially, counting from 0,
280:33 - and now, oh, it's less than or equal to.
280:35 - Now you see it, right?
280:37 - Again, trivial example,
but just by using printf,
280:40 - you can see inside of
the computer's memory
280:43 - by just printing stuff out like this.
280:45 - And now, once you've figured it out, oh,
so this should probably be less than 3,
280:50 - or I should start
counting from 1, there's
280:52 - any number of ways I could fix this.
280:53 - But the most conventional is
probably just to say less than 3.
280:56 - Now, I can delete my temporary print
statement, rerun make buggy, ./buggy.
281:03 - And, voila, problem solved.
281:06 - All right, and to this day, I do this.
281:08 - Whether it's making a command line
application, or a web application,
281:11 - or mobile application,
It's very common to use
281:13 - printf, or some equivalent
in any language,
281:15 - just to poke around and see what's
inside the computer's memory.
281:19 - Thankfully, there's more
sophisticated tools than this.
281:22 - Let me go ahead and
reintroduce the bug here.
281:25 - And let me reopen my
sidebar at left here.
281:28 - Let me now recompile the code
to make sure it's current.
281:32 - And I'm going to run a
command called debug50.
281:35 - Which is a command that's
representative of a type of program
281:39 - known as a debugger.
281:41 - And this debugger is
actually built into VS Code.
281:43 - And all debug50 is doing for us is
automating the process of starting
281:47 - VS Code's built-in debugger.
281:49 - So this isn't even a
CS50-specific tool, we've
281:52 - just given you a debug50
command to make it easier
281:55 - to start it up from the get-go.
281:57 - And the way you run this debugger
is you say debug50, space, and then
282:01 - the name of the program
that you want to debug.
282:04 - So, in this case, . /buggy.
282:06 - So you don't mention your c-file.
282:08 - You mention your already-compiled code.
282:10 - And what this debugger is going
to let me do is, most powerfully,
282:16 - walk through my code step-by-step.
282:19 - Because every program we've written
thus far, runs from start to finish,
282:23 - even if I'm not done thinking
through each step at a time.
282:26 - With a debugger, I can
actually click on a line number
282:30 - and say pause execution
here, and the debugger
282:33 - will let me walk through my code one
step at a time, one second at a time,
282:38 - one minute at a time,
at my own human pace.
282:41 - Which is super compelling when
the programs get more complicated
282:43 - and they might, otherwise,
fly by on the screen.
282:46 - So I'm going to click
to the left of line 5.
282:50 - And notice that these
little red dots appear.
282:52 - And if I click on one it
stays, and gets even redder.
282:55 - And I'm going to run debug50 on ./buggy.
282:58 - And in just a moment, you'll see that a
new panel opens on the left hand side.
283:03 - It's doing some
configuration of the screen.
283:06 - Let me zoom out a little bit here so
we can see more on the screen at once.
283:10 - And sometimes, you'll see in VS
Code that debug console opens up,
283:14 - which looks very cryptic, just go back
to terminal window if that happens.
283:18 - Because at the terminal window is where
you can still interact with your code.
283:22 - And let's now take a
look at what's going on.
283:24 - If I zoom in on my
buggy.c code here, you'll
283:28 - notice that we have the same program
as before, but highlighted in yellow
283:35 - is line 5.
283:36 - Not a coincidence, that's the line
I set a so-called breakpoint at.
283:39 - The little red dot means break
here, pause execution here.
283:44 - And the yellow line has
not yet been executed.
283:47 - But if I, now, at the top of my
screen, notice these little arrows.
283:51 - There's one for Play.
283:53 - There's one for this,
which, if I hover over it,
283:55 - says Step Over, there's another
that's going to say Step Into,
283:58 - there's a third that says Step Out.
284:00 - I'm just going to use the
first of these, Step Over.
284:02 - And I'm going to do this, and
you'll see that the yellow highlight
284:05 - moved from line 5 to line
7 because now it's ready,
284:09 - but hasn't yet printed out that hash.
284:12 - But the most powerful thing here,
notice, is that top left here.
284:16 - It's a little cryptic, because
there's a bunch of things
284:18 - going on that will make more
sense over time, but at the top
284:21 - there's a section called variables.
284:22 - Below that, something
called locals, which means
284:25 - local to my current function, main.
284:27 - And notice, there's my variable
called i, and its current value is 0.
284:31 - So now, once I click Step Over
again, watch what happens.
284:37 - We go from line 7 back to line 5.
284:39 - But look in the terminal window,
one of the hashes has printed.
284:43 - But now, it's printed at my own pace.
284:46 - I can think through this step-by-step.
284:48 - Notice that i has not changed, yet.
284:50 - It's still 0 because the yellow
highlighted line hasn't yet executed.
284:53 - But the moment I click Step Over,
it's going to execute line 5.
284:58 - Now, notice at top left, i has become
1, and nothing has printed, yet,
285:05 - because now, highlighted is line 7.
285:07 - So if I click Step Over
again, we'll see the hash.
285:12 - If I repeat this process at my
own human, comfortable pace,
285:16 - I can see my variables changing, I
can see output changing on the screen,
285:21 - and I can just think about
should that have just happened.
285:24 - I can pause and give
thought to what's actually
285:26 - going on without trying to race the
computer and figure it all out at once.
285:30 - I'm going to go ahead and
stop here because we already
285:32 - know what this particular problem
is, and that brings me back
285:35 - to my default terminal window.
285:36 - But this debugger, let me
disable the breakpoint now
285:40 - so it doesn't keep
breaking, this debugger
285:42 - will be your friend
moving forward in order
285:45 - to step through your code step-by-step,
at your own pace to figure out
285:49 - where something has gone wrong.
285:51 - Printf is great, but it gets annoying if
you have to constantly add print this,
285:54 - print this, print this, print this,
recompile, rerun it, oh wait a minute,
285:57 - print this, print this.
285:59 - The debugger lets you do the
equivalent, but automatically.
286:04 - Questions on this debugger, which you'll
see all the more hands-on over time?
286:10 - Questions on debugger?
286:11 - Yeah?
286:12 - AUDIENCE: You were using
a Step Over feature.
286:14 - What do the other
features in the debugger--
286:17 - DAVID MALAN: Really good question.
286:18 - We'll see this before long, but those
other buttons that I glossed over,
286:21 - step into and step out of, actually
let you step into specific functions
286:26 - if I had any more than main.
286:28 - So if main called a
function called something,
286:31 - and something called a function
called something else, instead of just
286:34 - stepping over the entire execution of
that function, I could step into it
286:38 - and walk through its
lines of code one by one.
286:41 - So any time you have
a problem set you're
286:43 - working on that has multiple functions,
you can set a breakpoint in main,
286:46 - if you want, or you can set it inside
of one of your additional functions
286:50 - to focus your attention only on that.
286:53 - And we'll see examples
of that over time.
286:56 - All right, so what else?
286:58 - And what's the sort of, elephant
in the room, so to speak,
287:02 - is actually a duck in this case.
287:04 - Why is there this duck and
all of these ducks here?
287:06 - Well, it turns out, a third, genuinely
recommended, debugging technique
287:10 - is talking through problems, talking
through code with someone else.
287:14 - Now, in the absence of having
a family member, or a friend,
287:16 - or a roommate who actually wants to
hear you talk about code, of all things,
287:20 - generally, programmers turn to a
rubber duck, or other inanimate objects
287:25 - if something animate is not available.
287:27 - The idea behind rubber duck
debugging, so to speak,
287:31 - is that simply by looking at your code
and talking it through, OK, on line 3,
287:37 - I'm starting a 4 loop and
I'm initializing i to 0.
287:41 - OK, then, I'm printing out a hash.
287:43 - Just by talking through your
code, step-by-step, invariably,
287:48 - finds you having the proverbial
light bulb go off over your head,
287:51 - because you realize, wait a minute
I just said something stupid,
287:53 - or I just said something wrong.
287:54 - And this is really just a proxy for any
other human, teaching fellow, teacher
287:58 - or friend, colleague.
288:00 - But in the absence of any
of those people in the room,
288:02 - you're welcome to take,
on your way out today.
288:04 - One of these little, rubber ducks and
consider using it, for real, any time
288:08 - you want to talk through one
of your problems in CS50,
288:12 - or maybe life more generally.
288:13 - But having it there on
your desk is just a way
288:15 - to help you hear illogic
in what you think
288:19 - might, otherwise, be logical code.
288:22 - So printf, debugging, rubber-duck
debugging are just three of the ways,
288:26 - you'll see over time, to
get to the source of code
288:29 - that you will write that has mistakes.
288:31 - Which is going to happen,
but it will empower you
288:33 - all the more to solve those mistakes.
288:36 - All right, any questions on debugging,
in general, or these three techniques?
288:41 - Yeah?
288:42 - AUDIENCE: [INAUDIBLE]
288:44 - DAVID MALAN: What's the difference
between Step Over and Step Into?
288:46 - At the moment, the only one that's
applicable to the code I just wrote
288:50 - is Step Over, because it means
step over each line of code.
288:53 - If, though, I had other functions
that I had written in this program,
288:58 - maybe lower down in the file, I
could step into those function calls
289:03 - and walk through them one at a time.
289:05 - So we'll come back to this
with an actual example,
289:07 - but step into will allow
me to do exactly that.
289:10 - In fact, this is a perfect segue to
doing a little something like this.
289:13 - Let me go ahead and open
up another file here.
289:15 - And, actually, we'll
use the same, buggy.
289:17 - And we're going to write one
other thing that's buggy, as well.
289:20 - Let me go up here and
include, as before, cs50.h.
289:24 - Let me include stdio.h.
289:28 - Let me do int main(void).
289:29 - So all of this, I think,
is correct, so far.
289:32 - And let's do this, let's
give myself an int called i,
289:35 - and let's ask the user
for a negative integer.
289:38 - This is not a function that
exists, technically, yet.
289:41 - But I'm going to assume, for the
sake of discussion, that it does.
289:44 - Then, I'm just going to print
out, with %i and a new line,
289:47 - whatever the human typed in.
289:49 - So at this point in the story,
my program, I think, is correct.
289:52 - Except for the fact that
get negative int is not
289:55 - a function in the CS50
library or anywhere else.
289:57 - I'm going to need to invent it myself.
289:59 - So suppose, in this case, that I declare
a function called get negative int.
290:05 - It's return type, so to speak, should
be int, because, as its name suggests,
290:09 - I want to hand the user back
in integer, and it's going
290:12 - to take no input to keep it simple.
290:14 - So I'm just going to say void there.
290:16 - No inputs, no special
prompts, nothing like that.
290:19 - Let me, now, give myself
some curly braces.
290:21 - And let me do something familiar,
perhaps, from problem set 1.
290:24 - Let me give myself a variable,
like n, and let me do the following
290:29 - within this block of code.
290:31 - Assign n the value of get int, asking
the user for a negative integer using
290:37 - get int's own prompt.
290:39 - And I want to do this while
n is less than 0, because I
290:43 - want to get a negative from the user.
290:44 - And recall, from having
used this block in the past,
290:48 - I can now return n as the
very last step to hand back
290:52 - whatever the user has typed in, so
long as they cooperated and gave me
290:56 - an actual negative integer.
290:58 - Now, I've deliberately
made a mistake here,
291:00 - and it's a subtle,
silly, mathematical one,
291:03 - but let me compile this program after
copying the prototype up to the top,
291:08 - so I don't make that mistake again.
291:09 - Let me do make buggy, Enter.
291:12 - And now, let me do ./buggy.
291:14 - I'll give it a negative
integer, like negative 50.
291:18 - Uh-huh.
291:19 - That did not take.
291:23 - How about negative 5?
291:25 - No.
291:26 - How about 0?
291:28 - All right.
291:29 - So it's, clearly, working backwards,
or incorrectly here, logically.
291:33 - So how could I go about debugging this?
291:35 - Well, I could do what I've done before?
291:36 - I could use my printf technique and
say something explicit like n is %i,
291:43 - new line, comma n, just to print
it out, let me recompile buggy,
291:49 - let me rerun buggy, let
me type in negative 50.
291:52 - OK, n is negative 50.
291:54 - So that didn't really
help me at this point,
291:57 - because that's the same as before.
291:58 - So let me do this, debug50, ./buggy.
292:02 - Oh, but I've made a mistake.
292:04 - So I didn't set my breakpoint, yet.
292:05 - So let me do this, and I'll
set a breakpoint this time.
292:09 - I could set it here, on line 8.
292:11 - Let's do it in main, as before.
292:13 - Let me rerun debug50, now.
292:15 - On ./buggy.
292:17 - That fancy user interface
is going to pop up.
292:19 - It's going to highlight the line
that I set the breakpoint on.
292:22 - Notice that, on the left
hand side of the screen,
292:25 - i is defaulting, at the moment to 0,
because I haven't typed anything in,
292:28 - yet.
292:29 - But let me, now, Step Over this
line that's highlighted in yellow,
292:35 - and you'll see that I'm being prompted.
292:36 - So let's type in my negative 50, Enter.
292:40 - Notice now that I'm
stuck in that function.
292:45 - All right.
292:46 - So clearly, the issue seems to be
in my get negative int function.
292:50 - So, OK, let me stop this execution.
292:54 - My problem doesn't seem to be in
main, per se, maybe it's down here.
292:57 - So that's fine.
292:58 - Let me set my same breakpoint at line 8.
293:00 - Let me rerun debug50 one more time.
293:02 - But this time, instead of just stepping
over that line, let's step into it.
293:07 - So notice line 8 is, again,
highlighted in yellow.
293:09 - In the past I've been
clicking Step Over.
293:11 - Let's click Step into, now.
293:14 - When I click Step Into,
boom, now, the debugger
293:17 - jumps into that specific function.
293:20 - Now, I can step through these
lines of code, again and again.
293:23 - I can see what the value of
n is as I'm typing it in.
293:25 - I can think through my logic, and voila.
293:27 - Hopefully, once I've solved the issue,
I can exit the debugger, fix my code,
293:31 - and move on.
293:33 - So Step Over just goes over
the line, but executes it,
293:36 - Step Into lets you go into
other functions you've written.
293:41 - So let's go ahead and do this.
293:43 - We've got a bunch of
possible approaches that we
293:47 - can take to solving some
problems let's go ahead
293:49 - and pace ourselves today, though.
293:50 - Let's take a five-minute break, here.
293:52 - And when we come back, we'll take
a look at that computer's memory
293:54 - we've been talking about.
293:55 - See you in five.
293:57 - All right.
294:00 - So let's dive back in.
294:05 - Up until now, both, by way of week 1
and problems set 1, for the most part,
294:11 - we've just translated from Scratch into
C all of these basic building blocks,
294:14 - like loops and conditionals,
Boolean expressions, variables.
294:17 - So sort of, more of the same.
294:19 - But there are features in C that
we've already stumbled across already,
294:22 - like data types, the types of variables
that doesn't exist in Scratch,
294:26 - but that, in fact, does
exist in other languages.
294:28 - In fact, a few that
we'll see before long.
294:30 - So to summarize the types we saw last
week, recall this little list here.
294:34 - We had ints, and floats, and
longs, and doubles, and chars,
294:39 - there's also Booles and also string,
which we've seen a few times.
294:42 - But today, let's actually start to
formalize what these things are,
294:46 - and actually what your Mac and PC
are doing when you manipulate bits
294:50 - as an int versus a char, versus
a string, versus something else.
294:53 - And see if we can't put more tools
into your toolkit, so to speak,
294:56 - so we can start quickly writing
more featureful, more sophisticated
294:59 - programs in C.
295:01 - So it turns out, that on
most systems nowadays,
295:04 - though this can vary by
actual computer, this
295:07 - is how large each of the
data types, typically,
295:10 - is in C. When you store a Boolean value,
a 0 or 1, a true, a false, or true,
295:15 - it actually uses 1 byte.
295:17 - That's a little excessive,
because, strictly speaking,
295:19 - you only need 1 bit,
which is 1/8 of this size.
295:22 - But for simplicity,
computers use a whole byte
295:25 - to represent a Boole, true or false.
295:28 - A char, we saw last week,
is only 1 byte, or 8 bits.
295:32 - And this is why ASCII, which uses 1
byte, or technically, only 7 bits early
295:37 - on, was confined to only 256
maximally possible characters.
295:41 - Notice that an int is
4 bytes, or 32 bits.
295:46 - A float is also 4 bytes or 32 bits.
295:48 - But the things that we call long,
it's, literally, twice as long,
295:52 - 8 bytes or 64 bits.
295:53 - So is a double.
295:54 - A double is 64 bits of precision
for floating point values.
295:58 - And a string, for today, we're
going to leave as a question mark.
296:01 - We'll come back to that,
later today and next week,
296:03 - as to how much space a string
takes up, but, suffice it to say,
296:06 - it's going to take up a
variable amount of space,
296:09 - depending on whether the
string is short or long.
296:11 - But we'll see exactly what
that means, before long.
296:14 - So here's a photograph of
a typical piece of memory
296:19 - inside of your Mac, or PC, or phone.
296:22 - Odds are, it might be a little
smaller in some devices.
296:24 - This is known as RAM,
or random access memory.
296:27 - Each of these little black
chips on this circuit
296:29 - board, the green thing,
these little black chips
296:31 - are where 0s and 1s are actually stored.
296:34 - Each of those stores
some number of bytes.
296:36 - Maybe megabytes, maybe
even gigabytes, nowadays.
296:39 - So let's focus on one of those chips,
to give us a zoomed in version, thereof.
296:45 - Let's consider the fact that, even
though we don't have to care, exactly ,
296:49 - how this kind of thing is made, if
this is, like, 1 gigabyte of memory,
296:53 - for the sake of discussion,
it stands to reason that,
296:56 - if this thing is storing 1
billion bytes, 1 gigabyte,
297:00 - then we can number them, arbitrarily.
297:02 - Maybe this will be byte
0, 1, 2, 3, 4, 5, 6, 7, 8.
297:05 - Then, maybe, way down here in the bottom
right corner is byte number 1 billion.
297:09 - We can just number these things,
as might be our convention.
297:13 - Let's draw that graphically.
297:14 - Not with a billion squares,
but fewer than those.
297:17 - And let's zoom in further,
and consider that.
297:19 - At this point in the
story, let's abstract
297:21 - away all the hardware,
and all the little wires,
297:23 - and just think of memory as taking
up-- or, rather, just think of data
297:27 - as taking up some number of bytes.
297:30 - So, for instance, if you were to store
a char in a computer's memory, which
297:34 - was 1 byte, it might be stored
at this top left-hand location
297:38 - of this black chip of memory.
297:40 - If you were to store something like
an integer that uses 4 bytes, well,
297:44 - it might use four of those bytes,
but they're going to be contiguous
297:47 - back-to-back-to-back, in this case.
297:49 - If you were to store a long or a double,
you might, actually, need 8 bytes.
297:53 - So I'm filling in these
squares to represent
297:55 - how much memory and given variable
of some data type would take up.
298:00 - 1, or 4, or 8, in this case, here.
298:03 - Well, from here, let's abstract
away from all of the hardware
298:06 - and really focus on
memory as being a grid.
298:08 - Or, really, like a canvas that
we can paint any types of data
298:11 - onto that we want.
298:13 - At the end of the day, all of this
data is just going to be 0s and 1s.
298:16 - But it's up to you and I to build
abstractions on top of that.
298:20 - Things like actual numbers,
colors, images, movies, and beyond.
298:24 - But we'll start
lower-level, here, first.
298:26 - Suppose I had a program
that needs three integers.
298:30 - A simple program whose purpose
in life is to average your three
298:33 - scores on an exam, or some such thing.
298:36 - Suppose that your three scores were
these, 72, 73, not too bad, and 33,
298:41 - which is particularly low.
298:42 - Let's write a program that does
this kind of averaging for us.
298:47 - Let me go back to VS Code, here.
298:49 - Let me open up a file called scores.c.
298:52 - Let me implement this as follows.
298:55 - Let me include stdio.h at the
top, int main(void) as before.
299:00 - Then, inside of main, let me
declare score 1, which is 72.
299:05 - Give me another score, 73.
299:08 - Then, a third score, called
score 3, which is going to be 33.
299:11 - Now, I'm going to use printf to print
out the average of those things,
299:15 - and I can do this in
a few different ways.
299:16 - But I'm going to print out %f, and
I'm going to do score 1, plus score 2,
299:22 - plus score 3, divided by 3,
close parentheses semicolon.
299:28 - Some relatively simple arithmetic to
compute the average of three scores,
299:31 - if I'm curious what my average grade
is in the class with these three
299:34 - assessments.
299:35 - Let me, now, do make scores.
299:39 - All right, so I've somehow
made an error already.
299:43 - But this one is, actually, germane
to a problem we, hopefully,
299:49 - won't encounter too frequently.
299:51 - What's going on here?
299:52 - So underlined to score 1, plus
score 2, plus score 3, divided by 3.
299:55 - Format specifies type double, but
the argument has type int, well,
300:00 - what's going on here?
300:02 - Because the arithmetic
seems to check out.
300:04 - Yeah?
300:05 - AUDIENCE: So the computer is doing the
math, but they basically [INAUDIBLE]
300:08 - just gives out a value at the
end because, well [INAUDIBLE]
300:13 - DAVID MALAN: Correct.
300:14 - And we'll come back to
this in more detail,
300:15 - but, indeed, what's happening here
is I'm adding three ints together,
300:18 - obviously, because I
define them right up here.
300:20 - And I'm dividing by another
int, 3, but the catch
300:23 - is, recall that C when it performs math,
treats all of these things as integers.
300:28 - But integers are not
floating point value.
300:30 - So if you actually want to get a
precise, average for your score
300:33 - without throwing away the remainder,
everything after the decimal point,
300:37 - it turns out, we're going to have to--
300:39 - we're going to-- aww--
300:41 - we're going to have to--
300:42 - [LAUGHTER] we're going to have to
convert this whole expression, somehow,
300:46 - to a float.
300:47 - And there's a few ways to
do this but the easiest way,
300:50 - for now, I'm going to go
ahead and do this up here,
300:52 - I'm going to change the
divide by 3 to divide by 3.0.
300:55 - Because it turns out, long story short,
in C, so long as one of the values
300:59 - participating in an
arithmetic expression
301:01 - like this is something
like a float, the rest
301:03 - will be treated as promoted to
a floating point value as well.
301:08 - So let me, now, recompile this
code with make scores, Enter.
301:13 - This time it worked OK, because
I'm treating a float as a float.
301:17 - Let me do . /scores, Enter.
301:19 - All right, my average is
59.33333 and so forth.
301:24 - All right.
301:24 - So the math, presumably, checks out.
301:27 - Floating point imprecision
per last week aside.
301:30 - But let's consider the
design of this program.
301:33 - What is, kind of, bad about it, or if
we maintain this program longer term,
301:40 - are we going to regret the
design of this program?
301:43 - What might not be ideal here?
301:45 - Yeah?
301:45 - AUDIENCE: [INAUDIBLE]
301:54 - DAVID MALAN: Yeah, so in this case,
I have hard coded my three scores.
301:58 - So, if I'm hearing you
correctly, this program
302:01 - is only ever going to tell
me this specific average.
302:03 - I'm not even using
something like, get int
302:05 - or get float to get three different
scores, so that's not good.
302:09 - And suppose that we wait
later in the semester,
302:11 - I think other problems could arise.
302:12 - Yeah?
302:13 - AUDIENCE: Just thinking
also somewhat of an issue
302:15 - that you can't reuse that number.
302:17 - DAVID MALAN: I can't
reuse the number because I
302:19 - haven't stored the average in some
variable, which in this program, not
302:23 - a big deal, but certainly, if
I wanted to reuse it elsewhere,
302:25 - that's a problem.
302:26 - Let's fast-forward again, a
little later in the semester,
302:29 - I don't just have three
test scores or exam scores,
302:31 - maybe I have 4, or 5, or 6.
302:33 - Where might this take us?
302:34 - AUDIENCE: Yeah, if you
ever want to have to take
302:36 - the average of any number of
scores other than 3, [INAUDIBLE]
302:39 - DAVID MALAN: Yeah, I've sort
of, capped this program at 3.
302:42 - And honestly, this is, kind
of, bordering on copy paste.
302:45 - Even though the variables, yes, have
different names; score 1, score 2,
302:48 - score 3.
302:49 - Imagine doing this for a
whole grade book for a class.
302:51 - Having to score 4, 5, 6, 11 10, 12,
20, 30, that's a lot of variables.
302:57 - You can imagine just
how ugly the code starts
302:59 - to get if you're just defining variable
after variable, after variable.
303:02 - So it turns out, there are
better ways, in languages like C,
303:07 - if you want to have multiple
values stored in memory that
303:11 - happened to be of the same data type.
303:13 - Let's take a look back
at this memory, here,
303:14 - to see what these things
might look like in memory.
303:16 - Here's that grid of memory.
303:18 - Each of these recall represents a byte.
303:20 - To be clear, if I store
score 1 in memory first,
303:23 - how many bytes will it take up?
303:25 - AUDIENCE: [INAUDIBLE]
303:26 - DAVID MALAN: So 4, a.k.a.
303:27 - 32 bits.
303:28 - So I might draw a score 1 as
filling up this part of the memory.
303:32 - It's up to the computer as to whether it
goes here, or down there, or wherever.
303:36 - I'm just keeping the pictures clean
for today, from the top-left on down.
303:39 - If I, then, declare another
variable, called score 2,
303:42 - it might end up over there,
also taking up 4 bytes.
303:44 - And then score 3 might end up here.
303:47 - So that's just representing what's going
on inside of the computer's memory.
303:51 - But technically speaking, to
be clear, per week 0, what's
303:54 - really being stored in the computer's
memory, are patterns of 0s and 1s.
303:58 - 32 total, in this case,
because 32 bits is 4 bytes.
304:03 - But again, it gets boring
quickly to think in and look
304:07 - at binary all the time.
304:09 - So we'll, generally, abstract
this away as just using
304:11 - decimal numbers, in this case, instead.
304:13 - But there might be a better way to
store, not just three of these things,
304:18 - but maybe four, maybe,
five, maybe 10, maybe, more,
304:21 - by declaring one variable to store
all of them, instead of 3, or 4, or 5,
304:27 - or more individual variables.
304:30 - The way to do this is by way
of something known as an array.
304:34 - An array is another type of data that
allows you to store multiple values
304:42 - of the same type back-to-back-to-back.
304:45 - That is, to say, contiguously.
304:46 - So an array can let you create
memory for one int, or two, or three,
304:54 - or even more than
that, but describe them
304:56 - all using the same variable
name, the same one name.
305:00 - So for instance, if, for one
program, I only need three integers,
305:05 - but I don't want to messily declare
them as score 1, score 2, score 3,
305:10 - I can do this, instead.
305:11 - This is today's first
new piece of syntax,
305:13 - the square brackets
that we're now seeing.
305:15 - This line of code, here, is
similar to int score 1 semicolon,
305:21 - or int score 1 equals 72 semicolon.
305:24 - This line of code is declaring for
me, so to speak, an array of size 3.
305:30 - And that array is going
to store three integers.
305:33 - Why?
305:34 - Because the type of that
array is an int, here.
305:39 - The square brackets tell the
computer how many ints you want.
305:42 - In this case, 3.
305:43 - And the name is, of course, scores.
305:45 - Which, in English, I've
deliberately pluralized
305:47 - so that I can describe this array
as storing multiple scores, indeed.
305:52 - So if I want to now assign values
to this variable, called scores,
305:57 - I can do code like this.
305:59 - I can say, scores bracket 0 equals
72, scores bracket 1 equals 73,
306:04 - and scores bracket 2 equals 33.
306:06 - The only thing weird
there is, admittedly,
306:08 - the square brackets which are still new.
306:10 - But we're also, notice,
0 indexing things.
306:14 - To zero index means to
start counting at 0.
306:16 - When we've talked about
that before, our four loops
306:18 - have, generally, been zero indexed.
306:20 - Arrays in C are zero indexed.
306:24 - And you do not have choice over that.
306:25 - You can't start counting at 1
in arrays because you prefer to,
306:28 - you'd be sacrificing
one of the elements.
306:31 - You have to start in
arrays counting from 0.
306:33 - So out of context, this
doesn't solve a problem,
306:37 - but it, definitely, is
going to once we have more
306:39 - than, even, three scores here.
306:41 - In fact, let me change
this program a little bit.
306:44 - Let me go back to VS Code.
306:45 - And delete these three lines, here.
306:48 - And replace it with a
scores variable that's
306:51 - ready to store three total integers.
306:54 - And then, initialize them as
follows, scores bracket 0 is 72,
306:58 - as before, scores bracket 1 is
going to be 73, scores bracket 2
307:02 - is going to be 33.
307:04 - Notice, I do not need to say
int before any of these lines,
307:08 - because that's been
taken care of, already,
307:10 - for me on line 5, where I already
specified that everything in this array
307:14 - is going to be an int.
307:17 - Now, down here, this code needs
to change because I no longer have
307:21 - three variables, score 1, 2, and 3.
307:23 - I have 1 variable, but
that I can index into.
307:28 - I'm going to, here, then, do scores
bracket 0, plus scores bracket 1,
307:33 - plus scores bracket 2, which is
equivalent to what I did earlier,
307:37 - giving me back those three integers.
307:39 - But notice, I'm using the same
variable name, every time.
307:42 - And again, I'm using this new square
bracket notation to, quote-unquote,
307:45 - index into the array to get at the first
int, the second int, and the third,
307:50 - and then, to do it again down here.
307:53 - Now, this program, still not really
solving all the problems we describe,
307:56 - I still can only store three
scores, but we'll come back
307:58 - to something like that before long.
308:00 - But for now, we're just introducing
a new syntax and a new feature,
308:03 - whereby, I can now store multiple
values in the same variable.
308:09 - Well, let's enhance this a bit more.
308:11 - Instead of hard coding these scores,
as was identified as a problem,
308:14 - let's use get int to ask
the user for a score.
308:19 - Let's, then, use get int to
ask the user for another score.
308:22 - Let's use get int to ask
the user for a third score,
308:25 - storing them in those
respective locations.
308:28 - And, now, if I go ahead and save
this program, recompile scores, huh.
308:34 - I've messed up, here.
308:35 - Now these errors should be
getting a little familiar.
308:38 - What mistake did I make?
308:41 - Let me give folks a moment.
308:42 - AUDIENCE: cs50.h
308:43 - DAVID MALAN: cs50.h.
308:45 - That was not intentional, so still
making mistakes all these years later.
308:48 - I need to include cs50.h.
308:50 - Now, I'm going to go back to the bottom
in the terminal window, make scores.
308:53 - OK.
308:54 - We're back in business, ./scores.
308:55 - Now, the program is getting
a little more interesting.
308:58 - So maybe, this year was better and I got
a 100, and a 99, and a 98, and there,
309:02 - my average is 99.0000.
309:05 - So now, it's a little more dynamic.
309:06 - It's a little more interesting.
309:07 - But it's still capping the number
of scores at three, admittedly.
309:10 - But now, I've introduced another,
sort of, symptom of bad programming.
309:15 - There's this expression in programming,
too, called code smell, where like--
309:18 - [SNIFFS AIR] something
smells a little off.
309:20 - And there's something off here in
that I could do better with this code.
309:24 - Does anyone see an opportunity to
improve the design of this code, here,
309:29 - if my goal, still, is to get three
scores from the user but [SNIFF SNIFF]
309:32 - without it smelling [SNIFF] kind of bad?
309:34 - Yeah?
309:35 - AUDIENCE: [INAUDIBLE] use a 4 loop?
309:37 - That way you don't have to copy
and paste all of those scores.
309:40 - DAVID MALAN: Yeah, exactly.
309:41 - Those lines of code
are almost identical.
309:43 - And honestly, the only thing
that's changing is the number,
309:45 - and it's just incrementing by 1.
309:47 - We have all of the building
blocks to do this better.
309:49 - So let me go ahead and improve this.
309:51 - Let me delete that code.
309:53 - Let me, now, have a 4 loop.
309:55 - So for int i get 0, i
less than 3, i plus plus.
310:00 - Then, inside of this 4 loop,
I can distill all three
310:03 - of those lines into
something more generic,
310:05 - like scores bracket i equals get
int, and now, ask the user, just
310:10 - once, via get int, for a score.
310:13 - So this is where arrays
start to get pretty powerful.
310:16 - You don't have to hard
code, that is, literally,
310:18 - type in all of these magic
numbers like 0, 1, and 2.
310:20 - You can start to do
it, programmatically,
310:22 - as you propose with a loop.
310:24 - So now, I've tightened things up.
310:25 - I'm now, dynamically, getting
three different scores,
310:28 - but putting them in three
different locations.
310:31 - And so this program, ultimately, is
going to work, pretty much, the same.
310:34 - Make scores, ./scores, and 100, 99,
98, and we're back to the same answer.
310:41 - But it's a little better designed, too.
310:43 - If I really want to
nitpick, there's something
310:45 - that still smells, a little bit, here.
310:47 - The fact that I have indeed, this
magic number three, that really
310:51 - has to be the same as this number here.
310:54 - Otherwise, who knows
what's going to go wrong.
310:56 - So what might be a
solution, per last week,
310:58 - to cleaning that code up further, too?
311:01 - AUDIENCE: [INAUDIBLE]
the user's discretion
311:04 - how many input scores [INAUDIBLE].
311:06 - DAVID MALAN: OK, so we could leave
it up to the user's discretion.
311:09 - And so we could, actually,
do something like this.
311:11 - Let me take this a few steps ahead.
311:13 - Let me say something like, int n gets
get int, how many scores question mark,
311:20 - then I could actually change this
to an n, and then this to an n,
311:24 - and, indeed, make the
whole program dynamic?
311:27 - Ask the human how many tests
have there been this semester?
311:29 - Then, you can type in
each of those scores
311:31 - because the loop is going
to iterate that many times.
311:33 - And then you'll get the average
of one test, two test, three--
311:37 - well, lost another-- or however
many scores that were actually
311:41 - specified by the user Yeah, question?
311:45 - AUDIENCE: How many bits or
bytes get used in an array?
311:50 - DAVID MALAN: How many
bytes are used in an array?
311:52 - AUDIENCE: [INAUDIBLE] point of
doing this is to save [INAUDIBLE]
311:56 - DAVID MALAN: So the purpose of
an array is not to save space.
311:59 - It's to eliminate having
multiple variable names
312:03 - because that gets very messy quickly.
312:05 - If you have score 1, score 2,
score 3, dot, dot, dot, score 99,
312:09 - that's, like, 99 different
variables, potentially,
312:12 - that you could collapse into one
variable that has 99 locations.
312:18 - At different indices, or indexes.
312:20 - As someone would say,
the index for an array
312:22 - is whatever is in the square brackets.
312:25 - AUDIENCE: [INAUDIBLE]
312:35 - DAVID MALAN: So it's a good question.
312:37 - So if you-- I'm using
ints for everything--
312:39 - and honestly, we don't
really need ints for scores
312:41 - because I'm not likely to get a
2 billion on a test anytime soon.
312:46 - And so you could use
different data types.
312:47 - And that list we had on the screen,
earlier, is not all of them.
312:50 - There's a data type called short,
which is shorter than an int,
312:54 - you could, technically, use char, in
some form or other data types as well.
312:59 - Generally speaking, in
the year 2021, these
313:01 - tend to be over optima--
overly optimized decisions.
313:05 - Everyone just uses
ints, even though no one
313:07 - is going to get a test score that's 2
billion, or more, because int is just,
313:10 - kind of, the go-to.
313:11 - Years ago, memory was expensive.
313:14 - And every one of your
instincts would have been
313:16 - spot on because memory is so tight.
313:18 - But, nowadays, we don't
worry as much about it.
313:21 - Yeah?
313:21 - AUDIENCE: I have a question
about the error [INAUDIBLE]..
313:26 - Could it-- when you're doing a
hash problem on the problem set--
313:30 - DAVID MALAN: So what is the
difference between dividing two ints
313:34 - and not getting an error, as
you might have encountered
313:36 - in a program like cash,
versus dividing two ints
313:40 - and getting an error
like I did a moment ago?
313:42 - The problem with the scenario I created
a moment ago was printf was involved.
313:46 - And I was telling printf to use a %f,
but I was giving printf the result
313:52 - of dividing integers by another integer.
313:54 - So it was printf that was yelling at me.
313:57 - I'm guessing in the scenario you're
describing, for something like cash,
314:00 - printf was not involved in
that particular line of code.
314:03 - So that's the difference, there.
314:05 - All right.
314:05 - So we, now, have this
ability to create an array.
314:09 - And an array can store multiple values.
314:11 - What, then, might we do that's more
interesting than just storing numbers
314:15 - in memory?
314:16 - Well, let's take this one step further.
314:18 - As opposed to just storing 72, 73, 33 or
100, 99, 98, at these given locations,
314:25 - because again, an array gives you one
variable name, but multiple locations,
314:30 - or indices therein,
bracket 0, bracket 1,
314:32 - bracket 2 on up, if it
were even bigger than that.
314:35 - Let's, now, start to consider something
more modest, like simple chars.
314:40 - Chars, being 1 byte each,
so they're even smaller,
314:43 - they take up much less space.
314:44 - And, indeed, if I wanted
to say a message like,
314:46 - hi I could use three variables.
314:48 - If I wanted a program to print,
hi, H-I exclamation point,
314:52 - I could, of course, store those in
three variables, like c1, c2, c3.
314:57 - And let's, for the sake of discussion,
let's whip this up real quickly.
315:00 - Let me create a new
program, now, in VS Code.
315:03 - This time, I'm going to call it hi.c.
315:07 - And I'm not going to bother
with the CS50 library.
315:09 - I just need the standard
I/O one, for now.
315:11 - int main(void).
315:13 - And then, inside of main, I'm going
to, simply, create three variables.
315:16 - And this is already, hopefully,
striking you as a bad idea.
315:20 - But we'll go down this
road, temporarily,
315:22 - with c1, and c2, and, finally, c3.
315:26 - Storing each character in
the phrase I want to print,
315:29 - and I'm going to print this
in a different way than usual.
315:33 - Now I'm dealing with chars.
315:35 - And we've, generally, dealt with
strings, which was easier last week.
315:38 - But %c, %c, %c, will let me print out
three chars, and like c1, c2, and c3.
315:45 - So, kind of, a stupid way
of printing out a string.
315:48 - So we already have a solution
to this problem last week.
315:51 - But let's poke around at what's
going on underneath the hood, here.
315:54 - So let's make hi, ./hi.
315:57 - And, voila no surprise.
315:58 - But we, again, could
have done this last week
316:00 - with a string and just one
variable, or even, 0, at that.
316:03 - But let's start converting
these characters
316:07 - to their apparent numeric equivalents
like we talked about in week 0 too.
316:12 - Let me modify these %c's,
just to be fun, to be %i's.
316:16 - And let me add some spaces so there
are gaps between each of them.
316:20 - Let me, now, recompile
hi, and let me rerun it.
316:24 - Just to guess, what should
I see on the screen now?
316:29 - Any guesses?
316:30 - Yeah?
316:30 - AUDIENCE: The ASCII values?
316:32 - DAVID MALAN: The ASCII values.
316:34 - And it's intentional that
I keep using the same word,
316:36 - hi, because it should be, hopefully,
the old friends, 72, 73, and 33.
316:42 - Which, is to say, that c knows about
ASCII, or equivalently, Unicode,
316:46 - and can do this conversion
for us automatically.
316:48 - And it seems to be doing it
implicitly for us, so to speak.
316:51 - Notice that c1, c2 and
c3 are, obviously, chars,
316:55 - but printf is able to tolerate
printing them as integers.
316:58 - If I really want it to be pedantic,
I could use this technique, again,
317:03 - known as typecasting,
where I can actually
317:05 - convert one data type to another,
if it makes logical sense to do so.
317:10 - And we saw in week 0,
chars, or characters,
317:14 - are just numbers, like 72, 73, and 33.
317:17 - So I can use this parenthetical
expression to convert, incorrectly,
317:21 - [LAUGHTER] three chars to
three integers, instead.
317:26 - So that's what I meant
to type the first time.
317:28 - There we go.
317:29 - Strike two, today.
317:30 - So parenthesis, int,
close parenthesis says
317:33 - take whatever variable comes after this,
c1, c2, or c3 and convert it to an int.
317:39 - The effect is going to be no different,
make hi, and then rerunning whoops--
317:42 - then running ./hi still works the same,
but now I'm explicitly converting chars
317:49 - to ints.
317:49 - And we can do this all day long,
chars to ints, floats to ints,
317:53 - ints to floats.
317:54 - Sometimes, it's equivalent.
317:56 - Other times, you're going
to lose information.
317:58 - Taking a float to an
int, just intuitively,
318:01 - is going to throw away everything
after the decimal point,
318:04 - because an int has no decimal point.
318:06 - But, for now, I'm going to
rewind to the version of this
318:09 - that just did implicit-type
conversion, or implicit casting,
318:13 - just to demonstrate that we can, indeed,
see the values underneath the hood.
318:17 - All right.
318:18 - Let me go ahead and do
this, now, the week 1 way.
318:20 - This was kind of stupid.
318:21 - Let's just do printf, quote-unquote--
318:24 - Actually, let's do this, string
s equals quote-unquote hi,
318:28 - and then let's do a simple printf
with %s, printing out s's there.
318:33 - So now I've rewound to last
week, where we began this story,
318:36 - but you'll notice that, if we
keep playing around with this--
318:40 - whoops, what did I do here?
318:43 - Oh, and let me introduce the C50 library
here, more on that next before long.
318:47 - Let me go ahead and
recompile, rerun this,
318:50 - we seem to be coding in circles, here.
318:52 - Like, I've just done the same
thing multiple, different ways.
318:55 - But there's clearly
an equivalence, then,
318:57 - between sequences of chars and strings.
319:01 - And if you do it the
real pedantic way, you
319:03 - have three different variables, c1, c2,
c3, representing H-I exclamation point,
319:07 - or you can just treat them all together
like this h, i, exclamation point.
319:12 - But it turns out that
strings are actually
319:16 - implemented by the computer
in a pretty now familiar way.
319:22 - What might a string actually be
as of this point in the story?
319:28 - Where are we going with this?
319:29 - Let me try to look further back.
319:31 - Yeah, in way back?
319:32 - Yeah?
319:32 - AUDIENCE: Can a string like
this be an array of chars?
319:34 - DAVID MALAN: Yeah, a string
might be, and indeed is, just
319:37 - an array of characters.
319:39 - So last week we took for
granted that strings exist.
319:41 - Technically, strings exist,
but they're implemented
319:43 - as arrays of characters,
which actually opens up
319:47 - some interesting possibilities for us.
319:50 - Because, let me see, let
me see if I can do this.
319:52 - Let me try to print out,
now, three integers again.
319:55 - But if string s is but an array, as you
propose, maybe I can do s bracket 0,
320:01 - s bracket 1, and s bracket 2.
320:04 - So maybe I can start poking
around inside of strings,
320:07 - even though we didn't
do this last week, so I
320:09 - can get at those individual values.
320:11 - So make hi, ./hi and,
voila, there we go again.
320:15 - It's the same 72, 73, 33, but
now, I'm sort of, hopefully,
320:20 - like, wrapping my mind around
the fact that, all right,
320:22 - a string is just an array of
characters, and arrays, you
320:25 - can index into them using this
new square bracket notation.
320:29 - So I can get at any one of
these individual characters,
320:32 - and, heck, convert it to an
integer like we did in week 0.
320:38 - Let me get a little curious now.
320:41 - What else might be in
the computer's memory?
320:44 - Well, let's-- I'll go back to the
depiction of these same things.
320:47 - Here might be how we
originally implemented hi
320:50 - with three variables, c1, c2, c3.
320:53 - Of course, that map to these
decimal digits or equivalent,
320:55 - these binary values.
320:57 - But what was this
looking like in memory?
320:59 - Literally, when you create a
string in memory, like this,
321:02 - string s equals quote-unquote hi,
let's consider what's going on
321:05 - underneath the hood, so to speak.
321:06 - Well, as an abstraction, a string,
it's H-I exclamation point taking up,
321:11 - it would seem, 3 bytes, right?
321:13 - I've gotten rid of the
bars, there, because if you
321:15 - think of a string as a type, I'm just
going to use one big box of size 3.
321:19 - But technically, a string, we've
just revealed, is an array,
321:24 - and the array is of size 3.
321:26 - So technically, if the
string is called s,
321:28 - s bracket 0 will give
you the first character,
321:30 - s bracket 1, the second,
and s bracket 3, the third.
321:34 - But let me ask this question now,
if this, at the end of the day,
321:37 - is the only thing in
your computer memory
321:40 - and the ability, like a canvas to draw
0s and 1s, or numbers, or characters,
321:45 - or whatever on it, but
that's it, like this
321:46 - is what your Mac, and PC, and
phone ultimately reduced to.
321:50 - Suppose that I'm running a piece
of software, like a text messenger,
321:53 - and now I write down
bye exclamation point.
321:57 - Well, where might that go in memory?
321:59 - Well, it might go here.
322:00 - B-Y-E. And then the next thing I type
might go here, here, here and so forth.
322:03 - My memory just might get
filled up, over time,
322:05 - with things that you or
someone else are typing.
322:08 - But then how does the computer know if,
potentially, B-Y-E exclamation point
322:14 - is right after H-I exclamation point
where one string ends and the next one
322:20 - begins?
322:23 - Right?
322:23 - All we have are bytes, or 0s and 1s.
322:27 - So if you were designing
this, how would you
322:29 - implement some kind of
delimiter between the two?
322:32 - Or figure out what the
length of a string is?
322:34 - What do you think?
322:35 - AUDIENCE: A nul character.
322:36 - DAVID MALAN: OK, so the right
answer is use a nul character,
322:39 - and for those who don't
know, what does that mean?
322:41 - AUDIENCE: It's special.
322:43 - DAVID MALAN: Yeah, so
it's a special character.
322:45 - Let me describe it as
a sentinel character.
322:47 - Humans decided some
time ago that you know
322:49 - what, if we want to delineate
where one string ends
322:52 - and where the next one begins,
we just need some special symbol.
322:56 - And the symbol they'll use is
generally written as backslash 0.
322:59 - This is just shorthand notation
for literally eight 0 bits.
323:03 - 0, 0, 0, 0, 0, 0, 0, 0.
323:06 - And the nickname for eight
0 bits, in this context,
323:10 - is nul, N-U-L, so to speak.
323:13 - And we can actually see this as follows.
323:16 - If you look at the
corresponding decimal digits,
323:18 - like you could do by doing out
the math or doing the conversion,
323:20 - like we've done in code, you would
see for storing hi, 72, 73, 33,
323:25 - but then 1 extra byte that's sort of
invisibly there, but that is all 0s.
323:30 - And now I've just written
it as the decimal number 0.
323:33 - The implication of this is
that the computer is apparently
323:36 - using, not 3 bytes to store
a word like hi, but 4 bytes.
323:40 - Whatever the length of the string is,
plus 1 for this special sentinel value
323:46 - that demarcates the end of the string.
323:48 - So we might draw it like this instead.
323:50 - And this character is, again,
pronounced nul, or written N-U-L.
323:55 - So that's all, right?
323:56 - If humans, at the end of the day,
just have this canvas of memory,
323:59 - they just needed to
decide, all right, well,
324:01 - how do we distinguish
one string from another?
324:04 - It's a lot easier with
chars, individually, it's
324:06 - a lot easier with ints, it's
even easier With floats, why?
324:09 - Because, per that chart earlier,
every character is always 1 byte.
324:13 - Every int is always 4 bytes.
324:16 - Every long is always 8 bytes.
324:19 - How long is a string?
324:20 - Well, hi is 1, 2, 3 with
an exclamation point.
324:24 - Bye is 1, 2, 3, 4 with
an exclamation point.
324:27 - David is D-A-V-I-D, five
without an exclamation point.
324:30 - And so a string can be
any number of bytes long,
324:34 - so you somehow need to
draw a line in the sand
324:36 - to separate in memory
one string from another.
324:40 - So what's the implication of this?
324:43 - Well, let me go back to code, here.
324:45 - Let's actually poke around.
324:46 - This is a bit dangerous, but I'm going
to start looking at memory locations
324:51 - past my string here.
324:53 - So let me go ahead and
recompile, make hi.
324:57 - Whoops, what did I do here?
324:59 - I forgot a format code.
325:00 - Let me add one more %i.
325:02 - Now let me go ahead and
rerun make hi, ./hi, Enter.
325:06 - There it is.
325:07 - So you can actually see in the
computer, unbeknownst to you
325:10 - previously, that there's indeed
something else going on there.
325:14 - And if I were to make one
other variant of this program--
325:17 - let's get rid of just this
one word and let's have two.
325:19 - So let me give myself
another string called t,
325:21 - for instance, just this common
convention with bye exclamation point.
325:26 - Let me, then print out with %s.
325:29 - And let me also print out with %s,
whoops, printf, print out t, as well.
325:35 - Let me recompile this program,
and obviously the out--
325:38 - ugh-- this is what happens
when I go too fast.
325:41 - All right, third mistake
today, close quote.
325:45 - As I was missing.
325:46 - Make hi.
325:47 - Fourth mistake today.
325:49 - Make hi.
325:50 - Dot slash hi.
325:51 - OK, voila.
325:52 - Now we have a program that's
printing both hi and bye,
325:54 - only so that we can consider what's
going on in the computer's memory.
325:58 - If s is storing hi and
apparently one bonus byte that
326:04 - demarcates the end of that
string, bye is apparently
326:07 - going to fit into the
location directly after.
326:10 - And it's wrapping around, but that's
just an artist's rendition, here.
326:13 - But bye, B-Y-E exclamation
point is taking up
326:16 - 1, 2, 3, 4, plus a fifth byte, as well.
326:23 - All right, any questions on this
underlying representation of strings?
326:27 - And we'll contextualize
this, before long,
326:29 - so that this isn't just
like, OK, who really cares?
326:32 - This is going to be the source
of actually implementing things.
326:34 - In fact for problem set 2, like
cryptography, and encryption,
326:37 - and scrambling actual human messages.
326:39 - But some questions first.
326:40 - AUDIENCE: So normally if
you were to not use string,
326:44 - you would just make a character
range that would declare,
326:47 - how many characters there are so
you know how many characters are
326:50 - going to be there.
326:51 - DAVID MALAN: A good
question, too and let
326:53 - me summarize as, if we were
instead to use chars all the time,
326:56 - we would indeed have to know in advance
how many chars you want for a given
326:59 - string that you're storing, how, then,
does something like get string work,
327:03 - because when you CS50 wrote
the get string function,
327:05 - we obviously don't know
how long the words are
327:07 - going to be that you all are typing in.
327:09 - It turns out, two weeks from
now we'll see that get string
327:12 - uses a technique known as
dynamic memory allocation.
327:15 - And it's going to grow or shrink
the array automatically for you.
327:20 - But more on that soon.
327:21 - Other questions?
327:22 - AUDIENCE: Why are we using a nul value?
327:25 - Isn't that wasting a byte?
327:26 - DAVID MALAN: Good question.
327:28 - Why are we using a nul value,
isn't it wasting a byte?
327:31 - Yes.
327:31 - But I claim there's really no other way
to distinguish the end of one string
327:37 - from the start of another, unless we
make some sort of notation in memory.
327:44 - All we have, at the end of the day,
inside of a computer, are bits.
327:46 - Therefore, all we can do is spin
those bits in some creative way
327:50 - to solve this problem.
327:51 - So we're minimally going to spend
1 byte to solve this problem.
327:54 - Yeah?
327:55 - AUDIENCE: How does our memory device
know to enter a line when you type
328:00 - the /n if we don't have
it stored as a char?
328:03 - DAVID MALAN: If you don't--
328:05 - how does the computer know to move
to a next line when you have a /n?
328:08 - So /n, even though it
looks like two characters,
328:12 - it's actually stored as just 1
byte in the computer's memory.
328:16 - There's a mapping between
it and an actual number.
328:18 - And you can see that, for instance,
on the ASCII chart from the other day.
328:21 - AUDIENCE: So with that being
stored would be the [INAUDIBLE]..
328:25 - DAVID MALAN: It would be.
328:26 - If I had put a /n in my code here,
right after the exclamation point here
328:32 - and here, that would actually shift
everything in memory because we would
328:36 - need to make room for a /n
here and another one over here.
328:41 - So it would take two
more bytes, exactly.
328:43 - Other questions?
328:43 - AUDIENCE: So if hi exclamation
point is written in binary and ASCII
328:50 - too as 72, 73, 33, if we are to
write those numbers in the string,
328:56 - and convert them into binary how
would the computer know what's 72
329:03 - and what's 8?
329:04 - DAVID MALAN: And what's
the last thing you said?
329:06 - AUDIENCE: 8, for example.
329:08 - DAVID MALAN: It's context sensitive.
329:09 - So if, at the end of the day, all
we're storing is these numbers,
329:12 - like 72, 73, 33, recall
that it's up to the program
329:16 - to decide, based on context,
how to interpret them.
329:19 - And I simplified this story in week 0
saying that Photoshop interprets them
329:23 - as RGB colors, and iMessage
or a text messaging program
329:27 - interprets them as letters, and
Excel interprets them as numbers.
329:31 - How those programs do it is by way
of variables like string, and int,
329:36 - and float.
329:37 - And in fact, later this
semester, we'll see
329:39 - a data type via which you can represent
a color as a triple of numbers,
329:43 - and red value, a green
value, and a blue value.
329:46 - So we'll see other data types as well.
329:48 - Yeah?
329:49 - AUDIENCE: It seems easy enough to just
add a nul thing at the end of the word,
329:53 - so why do we have integers
and long integers?
329:56 - Why can't we make everything
variable in its data size?
329:59 - DAVID MALAN: Really
interesting question.
330:01 - Why could we not just make all
data types variable in size?
330:04 - And some languages, some
libraries do exactly this.
330:07 - C is an older language, and
because memory was expensive
330:11 - memory was limited.
330:12 - The reality was you
gain benefits from just
330:14 - standardizing the size of these things.
330:17 - You also get performance
increases in the sense
330:19 - that if you know every int is
4 bytes, you can very quickly,
330:23 - and we'll see this next week,
jump from integer to another,
330:26 - to another in memory just by adding
4 inside of those square brackets.
330:30 - You can very quickly poke around.
330:32 - Whereas, if you had variable
length numbers, you would have to,
330:35 - kind of, follow, follow, follow,
looking for the end of it.
330:38 - Follow, follow-- you would have to
look at more locations in memory.
330:41 - So that's a topic we'll come back to.
330:42 - But it was generally for efficiency.
330:44 - And other question, yeah?
330:46 - AUDIENCE: Why not store the
nul character [INAUDIBLE]
330:52 - DAVID MALAN: Good question
why not store the--
330:55 - why not store the nul
character at the beginning?
330:59 - You could-- let's see, why
not store it at the beginning?
331:06 - You could do that.
331:09 - You could absolutely--
well, could you do this?
331:15 - If you were to do that
at the beginning--
331:20 - short answer, no.
331:21 - OK, now I retract that.
331:22 - No, because I finally thought
of a problem with this.
331:24 - If you store it at
the beginning instead,
331:26 - we'll see in just a moment how
you can actually write code
331:29 - to figure out where
the end of a string is,
331:31 - and the problem there
is wouldn't necessarily
331:33 - know if you eventually hit a
0 at the end of the string,
331:37 - because it's the number 0 in the
context of Excel using some memory,
331:41 - or if it's the context of some
other data type, altogether.
331:44 - So the fact that we've standardized--
331:46 - the fact that we've standardized
strings as ending with nul
331:50 - means that we can reliably distinguish
one variable from another in memory.
331:54 - And that's actually a
perfect segue way, now,
331:56 - to actually using this
primitive to building up
331:59 - our own code that manipulates
these things that are lower level.
332:02 - So let me do this.
332:03 - Let me create a new file called length.
332:05 - And let's use this basic idea to
figure out what the length of a string
332:10 - is after it's been stored in a variable.
332:14 - So let's do this.
332:16 - Let me include both the CS50
header and the standard I/O header,
332:20 - give myself int main(void) again
here, and inside of main, do this.
332:25 - Let me prompt the user for
a string s and I'll ask them
332:28 - for a string like their name, here.
332:32 - And then let me name it more
verbosely name this time.
332:37 - Now let me go ahead and do this.
332:39 - Let me iterate over every
character in this string
332:44 - in order to figure out
what its length is.
332:46 - So initially, I'm going
to go ahead and say this,
332:49 - int length equals 0, because
I don't know what it is yet.
332:52 - So we're going to start at 0.
332:53 - And then while the following is true--
332:56 - while-- let me-- do I want to do this?
333:01 - Let me change this to i,
just for clarity, let me do
333:04 - this, while name bracket i does not
equal that special nul character.
333:10 - So I typed it on the slide is N-U-L,
but you don't write N-U-L in code,
333:13 - you actually use its numeric equivalent,
which is /0 in single quotes.
333:17 - While name bracket i does not equal the
nul character, I'm going to go ahead
333:23 - and increment i to i plus plus.
333:26 - And then down here I'm going
to print out the value of i
333:29 - to see what we actually get,
printing out the value of i.
333:33 - All right, so what's
going to happen here?
333:35 - Let me run make length.
333:37 - Fortunately no errors.
333:39 - ./length and let me type in something
like H-I, exclamation point, Enter.
333:43 - And I get 3.
333:45 - Let me try bye,
exclamation point, Enter.
333:48 - And I get 4.
333:50 - Let me try my own name, David, Enter.
333:52 - 5, and so forth.
333:54 - So what's actually going on here?
333:56 - Well, it seems that
by way of this 4 loop,
333:58 - we are specifying a
local variable called
334:00 - i initialized to 0, because we're
figuring out the length of the string
334:03 - as we go.
334:04 - I'm then asking the
question, does location 0,
334:08 - that is i in the name string,
which we now know is an array,
334:13 - does it not equal /0?
334:15 - Because if it doesn't, that means it's
an actual character like H, or B, or D.
334:19 - So let's increment i.
334:21 - Then, let's come back around to line
9 and let's ask the question again.
334:25 - Now i equals 1.
334:26 - So does name bracket 1 not equal /0?
334:30 - Well, if it doesn't, and it won't
if it's an i, or a y, or an a,
334:36 - based on what I typed in, we're
going to increment i once more.
334:39 - Fast-forward to the end of the story,
once I get to the end of the string,
334:43 - technically, one space
past the end of the string,
334:46 - name bracket i will equal /0.
334:49 - So I don't increment i anymore, I
end up just printing the result.
334:54 - So what we seem to have here with some
low level C code, just this while loop,
334:58 - is a program that figures out the length
of a given string that's been typed in.
335:03 - Let's practice our abstraction
and decompose this into,
335:06 - maybe, a helper function here.
335:07 - Let me grab all of this
code here, and assume,
335:11 - for the sake of discussion for a moment,
that I can call a function now called
335:15 - string length.
335:18 - And the length of the string
is name that I want to get,
335:21 - and then I'll go ahead and print
out, just as before with %i,
335:25 - the length of that string.
335:26 - So now I'm abstracting away
this notion of figuring out
335:28 - the length of the string.
335:29 - That's an opportunity for to
me to create my own function.
335:32 - If I want to create a
function called string length,
335:35 - I'll claim that I want to
take a string as input,
335:39 - and what should I have this
function return as its return type?
335:45 - What should get string
presumably return?
335:50 - Yeah?
335:50 - AUDIENCE: Int.
335:51 - DAVID MALAN: An int, right?
335:52 - An int makes sense.
335:53 - Float really wouldn't
make sense because we're
335:55 - measuring things that are integers.
335:57 - In this case, the length of something.
335:59 - So indeed, let's have it return an int.
336:00 - I can use the same
code as before, so I'm
336:03 - going to paste what I
cut earlier in the file.
336:06 - The only thing I have to change
is the name of the variable.
336:10 - Because now this function,
I decided arbitrarily
336:14 - that I'm going to call it
s, just to be more generic.
336:17 - So I'm going to look at s
bracket i at each location.
336:20 - And I don't want to print it at the
end, this would be a side effect.
336:23 - What's the line of code I should
include here if I actually
336:25 - want to hand back the total length?
336:28 - Yeah?
336:28 - AUDIENCE: Return i.
336:29 - DAVID MALAN: Say again?
336:30 - AUDIENCE: Return i.
336:31 - DAVID MALAN: Return i, in this case.
336:33 - So I'm going return i, not print it.
336:35 - Because now, my main function can
use the return value stored in length
336:40 - and print it on the next line itself.
336:42 - I just need a prototype, so that's
my one forgivable copy paste here.
336:46 - I'm going to rerun make length.
336:48 - Hopefully I didn't screw up.
336:49 - I didn't. ./length,
I'll type in hi-- oops--
336:53 - I'll type in hi, again.
336:55 - That works.
336:56 - I'll type in bye again, and so forth.
336:59 - So now we have a function that
determines the length of a string.
337:02 - Well, it turns out we didn't
actually need this all along.
337:05 - It turns out that we can get rid of my
own custom string length function here.
337:10 - I can definitely delete the
whole implementation down here.
337:12 - Because it turns out, in
a file called string.h,
337:16 - which is a new header file today, we
actually have access to a function
337:19 - called, more succinctly,
strlen, S-T-R-L-E-N. Which,
337:23 - literally does that.
337:25 - This is a function that comes with C,
albeit in the string.h header file,
337:29 - and it does what we just
implemented manually.
337:33 - So here's an example of, admittedly, a
wheel we just reinvented, but no more.
337:37 - We don't have to do that.
337:38 - And how do what kinds
of functions exist?
337:41 - Well, let me pop out of my
browser here to a website that
337:45 - is a CS50's incarnation of
what are called manual pages.
337:48 - It turns out that in a lot
of systems, Macs, and Unix,
337:52 - and Linux systems, including
the Visual Studio Code
337:55 - instance that we have
in the cloud, there
337:57 - are publicly accessible
manual pages for functions.
338:00 - They tend to be written very
expertly, in a way that's
338:04 - not very beginner-friendly.
338:05 - So we have here at
manual.cs50.io is CS50's version
338:09 - of manual pages that have this
less-comfortable mode that
338:13 - give you a, sort of, cheat
sheet of very frequently used,
338:15 - helpful functions in C. And
we've translated the expert
338:19 - notation to things that a
beginner can understand.
338:22 - So, for instance, let me go ahead and
search for a string up at the top here.
338:26 - You'll see that there's documentation
for our own get string function,
338:30 - but more interestingly
down here, there's
338:32 - a whole bunch of
string-related functions
338:35 - that we haven't even seen most of, yet.
338:36 - But there's indeed one
here called strlen,
338:38 - calculate the length of a string.
338:40 - And so if I go to strlen here, I'll
see some less-comfortable documentation
338:46 - for this function.
338:47 - And the way a manual
page typically works,
338:49 - whether in CS50's format
or any other, system
338:52 - is you see, typically, a
synopsis of what header
338:55 - files you need to use the function.
338:57 - So you would copy paste
these couple of lines here.
339:00 - You see what the prototype
is of the function so
339:03 - that you know what its inputs are,
if any, and its outputs are, if any.
339:06 - Then down below you might see a
description, which in this case,
339:09 - is pretty straightforward.
339:10 - This function calculates
the length of s.
339:12 - Then you see what the
return value is, if any,
339:15 - and you might even see an example, like
this one that we've whipped up here.
339:18 - So these manual pages
which are again, accessible
339:21 - here, and we'll link to these in
the problem sets moving forward,
339:23 - are pretty much the place to
start when you want to figure out
339:26 - has a wheel been invented already?
339:29 - Is there a function that might help
me solve some problems set problems
339:32 - so that I don't have to really
get into the weeds of doing all
339:36 - of those lower-level steps as I've had.
339:37 - Sometimes the answer is going to be
yes, sometimes it's going to be no.
339:40 - But again the point of our
having just done this together
339:43 - is to reveal that even the
functions you start taking for
339:46 - granted, they all reduce to some
of these basic building blocks.
339:50 - At the end of the day, this is
all that's inside of your computer
339:53 - is 0s and 1s.
339:55 - We're just learning,
now, how to harness those
339:57 - and how to manipulate them ourselves.
340:01 - Any questions here on this?
340:05 - Any questions at all?
340:07 - Yeah.
340:08 - AUDIENCE: We did just see
[INAUDIBLE] Is that so common
340:16 - that we would have to
specify it, or is it not?
340:18 - DAVID MALAN: Good question.
340:19 - Is it so common that you would
have to specify it or not?
340:22 - You do need to include its
header files because that's
340:24 - where all of those prototypes are.
340:25 - You don't need to worry about
linking it in with -l anything.
340:29 - And in fact, moving
forward, you do not ever
340:31 - need to worry about linking in
libraries when compiling your code.
340:35 - We, the staff, have configured make to
do all of that for you automatically.
340:39 - We want you to understand
that it is doing it,
340:41 - but we'll take care of
all of the -l's for you.
340:43 - But the onus is on you for the
prototypes and the header files.
340:47 - Other questions on these
representations or techniques?
340:51 - Yeah?
340:51 - AUDIENCE: [INAUDIBLE] exclamation mark.
341:00 - How does it actually define
the spaces [INAUDIBLE]??
341:04 - DAVID MALAN: A good question.
341:06 - If you were to have a string with actual
spaces in it that is multiple words,
341:09 - what would the computer actually do?
341:11 - Well for this. let me
go to asciichart.com.
341:14 - Which is just a random website that's
my go-to for the first 127 characters
341:19 - of ASCII.
341:20 - This is, in fact, what we had
a screenshot of the other day.
341:22 - And if you look here, it's a little
non-obvious, but S-P is space.
341:26 - If a computer were to store a space, it
would actually store the decimal number
341:29 - 32, or technically, the pattern of 0s
and 1s that represent the number 32.
341:34 - All of the US English keys that
you might type on a keyboard
341:37 - can be represented with a
number, and using Unicode can
341:40 - you express even things like
emojis and other languages.
341:43 - Yeah?
341:43 - AUDIENCE: Are only strings
followed by nul number,
341:47 - or let's say we had a series of
numbers, would each one of them
341:50 - be accompanied by nuls?
341:52 - DAVID MALAN: Good question.
341:53 - Only strings are accompanied
by nuls at the end
341:56 - because every other data type
we've talked about thus far
341:59 - is of well defined finite length.
342:01 - 1 byte for char, 4 bytes
for ints and so forth.
342:04 - If we think back to last week, we did
end the week with a couple of problems.
342:08 - Integer overflow, because 4 bytes, heck,
even 8 bytes is sometimes not enough.
342:12 - We also talked about
floating point imprecision.
342:14 - Thankfully in the world of scientific
computing and financial computing,
342:17 - there are libraries you can
use that draw inspiration
342:21 - from this idea of a
string, and they might
342:23 - use 9 bytes for an integer
value or maybe 20 bytes
342:26 - that you can count really high.
342:28 - But they will then start to
manage that memory for you
342:30 - and what they're really probably doing
is just grabbing a whole bunch of bytes
342:34 - and somehow remembering how
long the sequence of bytes is.
342:37 - That's how these higher-level
libraries work, too.
342:40 - All right, this has been a lot.
342:41 - Let's take one more break here.
342:43 - We'll do a seven-minute break here.
342:44 - And when we come back, we'll
flesh out a few more details.
342:47 - All right.
342:50 - So we just saw strlen as an
example of a function that
342:55 - comes in the string library.
342:57 - Let's start to take more of these
library functions out for a spin.
342:59 - So we're not relying only on the
built ins that we saw last week.
343:03 - Let me switch over to VS Code.
343:05 - And create a file called, say string.h.
343:10 - to apply this lesson
learned, as follows.
343:12 - Let me include cs50.h,
stdio.h, and this new thing,
343:19 - string.h as well, at the top.
343:21 - I'm going to do the usual
int main(void) here.
343:23 - And then in this program suppose,
for the sake of discussion,
343:26 - that I didn't know about
%s for printf or, heck,
343:29 - maybe early on there
was no %s format code.
343:33 - And so there was no easy
way to print strings.
343:36 - Well, at least if we know that
strings are just arrays of characters,
343:40 - we could use %c as a
workaround, a solution to that,
343:44 - sort of, contrived problem.
343:45 - So let me ask myself for a
string s by using get string here
343:49 - and I'll ask the user for some input.
343:51 - And then, let me print out say, output
, and all I want to do is print back out
343:57 - what the user typed.
343:58 - Now, the simplest way to do this, of
course, is going to be like last week,
344:02 - printf %s, and plug in
the s, and we're done.
344:05 - But again, for the sake of
discussion, I forgot about,
344:07 - or someone didn't implement %s,
so how else could we do this?
344:12 - Well, in pseudo code, or in English
what's the gist of how we could solve
344:16 - this problem, printing out the string
s on the screen without using %s?
344:23 - How might we go about solving this?
344:26 - Just in English, high-level?
344:28 - What would your pseudo code look like?
344:29 - Yeah?
344:30 - AUDIENCE: You could
just print each letter.
344:33 - DAVID MALAN: OK, so
just print each letter.
344:35 - And maybe, more precisely,
some kind of loop.
344:37 - Like, let's iterate over
all of the characters in s
344:41 - and print one at a time.
344:42 - So how can I do that?
344:43 - Well, for int i, get 0 is kind of the
go-to starting point for most loops,
344:48 - i is less than--
344:49 - OK, how long do I want to iterate?
344:51 - Well, it's going to
depend on what I type in,
344:53 - but that's why we have strlen now.
344:55 - So iterate up to the length of
s, and then increment i with plus
345:00 - plus on each iteration.
345:01 - And then let's just print
out %c with no new line,
345:04 - because I want everything
on the same line,
345:07 - whatever the character
is at s bracket i.
345:12 - And then at the very
end, I'll give myself
345:14 - that new line, just to move the
cursor down to the next line
345:16 - so the dollar sign is
not in a weird place.
345:18 - All right, so let's see if I
didn't screw up any of the code,
345:21 - make string, Enter, so far so good,
string and let me type in something
345:26 - like, hi, Enter.
345:28 - And I see output of hi, too.
345:30 - Let me do it once more with
bye, Enter, and that works, too.
345:33 - Notice I very deliberately
and quickly gave myself
345:36 - two spaces here and one space
here just because I, literally,
345:39 - wanted these things to line up properly,
and input is shorter than output.
345:42 - But that was just a
deliberate formatting detail.
345:46 - So this code is correct.
345:47 - Which is a claim I've made before,
but it's not well-designed.
345:53 - It is well-designed in that I'm using
someone else's library function,
345:57 - like, I've not reinvented
a wheel, there's no line 15
345:59 - or below, I didn't implement
string length myself.
346:02 - So I'm at least practicing
what I've preached.
346:07 - But there's still an
imperfection, a suboptimality.
346:12 - This one's really subtle though.
346:15 - And you have to think
about how loops work.
346:18 - What am I doing that's
not super efficient?
346:22 - Yeah, in back?
346:24 - AUDIENCE: [INAUDIBLE]
over and over again.
346:27 - DAVID MALAN: Yeah, this
is a little subtle.
346:29 - But if you think back to the
basic definition of a 4 loop
346:31 - and recall when I highlighted
things last week, what happens?
346:34 - Well, the first thing
is that i gets set to 0.
346:37 - Then we check the condition.
346:38 - How do we check the condition?
346:39 - We call strlen on s,
we get back an answer
346:42 - like 3 if it's a H-I exclamation point
and 0 is less than 3, so that's fine,
346:49 - and then we print out the character.
346:50 - Then we increment i from 0 to 1.
346:53 - We recheck the condition.
346:54 - How do I recheck the condition?
346:56 - I call strlen of s.
346:58 - Get back the same answer, 3.
347:01 - Compare 3 against 1.
347:02 - We're still good.
347:04 - So we print out another character. i
gets incremented again, i is now 2.
347:08 - We check the condition.
347:10 - What's the condition?
347:11 - Well, what's the string like the best?
347:12 - It's still 3.
347:13 - 2 is still less than 3.
347:16 - So I keep asking the same
question sort of stupidly
347:19 - because the string is, presumably,
never changing in length.
347:22 - And indeed, every time
I check that condition,
347:24 - that function is going to get called.
347:25 - And every time, the answer
for hi is going to be 3.
347:28 - 3.
347:29 - 3.
347:30 - So it's a marginal suboptimality,
but I could do better, right?
347:35 - Don't ask multiple times questions
that you can remember the answer to.
347:39 - So how could I remember the answer to
this question and ask it just once?
347:45 - How could I remember the
answer to this question?
347:49 - Let me see.
347:49 - Yeah, back there?
347:50 - AUDIENCE: Store it in a variable.
347:51 - DAVID MALAN: So store
it in a variable, right?
347:53 - That's been our answer most any time
we want to keep something around.
347:56 - So how could I do this?
347:57 - Well, I could do something like this,
int, maybe, length equals strlen of s.
348:02 - Then I can just change
this function call.
348:05 - Let me fix my spelling here.
348:07 - Let me fix this to be comparing
against length, and this is now OK.
348:11 - Because now strlen is only
called once on line 9.
348:14 - And I'm reusing the value
of that variable, a.k.a.
348:17 - length, again, and again, and again.
348:18 - So that's more efficient.
348:19 - Turns out that 4 loops let you
declare multiple variables at once,
348:24 - so we can do this a little
more elegantly all in one line.
348:28 - And this is just some
syntactic improvement.
348:31 - I could actually do something
like this, n equals strlen of s,
348:36 - and then I could just say n
here or I could call it length.
348:39 - But heck, while I'm being succinct
I'm just going to use n for number.
348:41 - So now it's just a marginal
change but I've now
348:46 - declared two variables
inside of my loop, i and n.
348:50 - i is set to 0. n extends
to the string length of s.
348:53 - But now, hereafter, all of my condition
checks are just, i less than n,
348:57 - i less than n, and n is never changing.
349:00 - All right, so a marginal
improvement there.
349:02 - Now that I've used this
new function, let's
349:04 - use some other functions
that might be of interest.
349:06 - Let me write a quick program here
that capitalizes the beginning of--
349:12 - changes to uppercase some
string that the user types in.
349:16 - So let me code a file
called uppercase.c.
349:19 - Up here I'll use my new friends,
cs50.h, and standard I/O, and string.h.
349:25 - So standard I/O, and string.h So
just as before int main(void).
349:31 - And then inside of main, what
I'm going to do this time,
349:33 - is let's ask the user for a string
s using get string asking them
349:38 - for the before value.
349:39 - And then let me print
out something like after.
349:44 - So that it-- just so I can see what
the uppercase version thereof is.
349:48 - And then after this, let me
do the following, for int, i
349:52 - equals 0, oh, let's
practice that same lesson,
349:56 - so n equals the string length of
s, i is less than n, i plus plus.
350:02 - So really, nothing
new, fundamentally yet.
350:05 - How do I now convert characters from
lowercase, if they are, to uppercase?
350:11 - In other words, if I type
in hi, H-I in lowercase,
350:14 - I want my program, now, to uppercase
everything to capital H, capital I.
350:19 - Well how can I go about doing this?
350:23 - Well you might recall
that there is this--
350:25 - you might recall that
there is this ASCII chart.
350:28 - So let's just consult this
real quick on asciichart.com.
350:31 - We've looked at this last week
notice that a-- capital A is 65,
350:35 - capital B is 66, capital
C is 67, and heck, here's
350:39 - lowercase a, lowercase b,
lowercase c, and that's 97, 98, 99.
350:43 - And if I actually do some
math, there's a distance of 32.
350:47 - Right?
350:47 - So if I want to go from
uppercase to lowercase,
350:49 - I can do 65 plus 32 will give me
97 and that actually works out
350:55 - across the board for everything else.
350:56 - 66 plus 32 gets me to 98 or lowercase b.
351:00 - Or conversely, if you have a
lowercase a, and its value is 97,
351:04 - subtract 32 and boom, you have capital
A. So there's some arithmetic involved.
351:11 - But now that we know that
strings are just arrays,
351:13 - and we know that characters,
which are in those arrays,
351:17 - are just binary
representations of numbers,
351:20 - I think we can manipulate a
few of these things as follows.
351:23 - Let me go back to my
program here, and first
351:25 - ask the question, if the current
character in the array during this loop
351:29 - is lowercase, let's
force it to uppercase.
351:33 - So how am I going to do that?
351:34 - If the character at s bracket i,
the current location in the array,
351:40 - is greater than or equal to
lowercase a, and s bracket
351:45 - i is less than or equal to
lowercase z, kind of a weird Boolean
351:50 - expression but it's completely
legitimate, because in this array
351:55 - s is a whole bunch of characters
that the humans typed in,
351:58 - because that's what a string is,
greater than or equal to a might
352:01 - be a little nonsensical
because when have you ever
352:03 - compared numbers to letters?
352:05 - But we know from week 0 lowercase a
is 97, lowercase z is, what is it, 1?
352:11 - I don't even remember.
352:12 - AUDIENCE: 132.
352:13 - DAVID MALAN: What's that?
352:14 - AUDIENCE: 132?
352:14 - DAVID MALAN: 132, We know.
352:16 - And so that would allow us to answer
the question is the current letter
352:20 - lowercase?
352:21 - All right, so let me
answer that question.
352:24 - If it is, what do I want to print out?
352:27 - I don't want to print
out the letter itself,
352:30 - I want to print out the
letter minus 32, right?
352:33 - Because if it happens to be a
lowercase a, 97, 97 minus 32
352:37 - gives me 65, which is
uppercase A, and I know that
352:39 - just from having stared
at that chart in the past.
352:43 - Else if the character is not
between little a and big A,
352:48 - I'm just going to
print out the character
352:50 - itself by printing s bracket i.
352:52 - And at the very end of this, I'm
going to print out a new line just
352:55 - to move the cursor to the next line.
352:57 - So again, it's a little wordy.
352:59 - But this loop here, which I
borrowed from our code previously,
353:03 - just iterates over the string, a.k.a.
353:05 - array, character-by-character,
through its length.
353:08 - This line 11 here is
just asking the question
353:11 - if that current character,
the i-th character of s,
353:15 - is greater than or equal
to little a and less
353:18 - than or equal to little z, that
is between 97 and 132, then
353:23 - we're going to go ahead and
force it to uppercase instead.
353:29 - All right, and let me zoom
out here for just a second.
353:33 - And sorry, I misspoke 122, which
is what you might have said.
353:38 - There's only 26 letters.
353:39 - So 122 is little z.
353:41 - Let me go ahead now and
compile and run this program.
353:44 - So make uppercase, ./uppercase, and
let me type in hi in lowercase, Enter.
353:50 - And there's the capitalized
version, thereof.
353:52 - Let me do it again, with
my own name in lowercase,
353:55 - and now it's capitalized as well.
353:57 - Well, what could we do to improve this?
353:59 - Well.
353:59 - You know what?
354:00 - Let's stop reinventing wheels.
354:01 - Let's go to the manual pages.
354:04 - So let me go here and search for
something like, I don't know,
354:07 - lowercase.
354:08 - And there I go.
354:09 - I did some auto complete
here, our little search box
354:12 - is saying that, OK there's
an is-lower function,
354:14 - check whether a character is lowercase.
354:16 - Well how do I use this?
354:17 - Well let me check, is lower, now I see
the actual man page for this function.
354:23 - Now we see, include ctype.h.
354:26 - So that's the protot--
354:27 - that's the header file
I need to include.
354:28 - This is the prototype for is-lower,
it apparently takes a char as input
354:32 - and returns an int.
354:34 - Which is a little weird.
354:35 - I feel like is-lower should
return true or false.
354:38 - So let's scroll down to the
description and return value.
354:42 - It returns, oh this is interesting.
354:45 - And this is a convention in C. This
function returns a non-zero int
354:49 - if C is a lowercase letter and 0
if C is not a lowercase letter.
354:55 - So it returns non-zero.
354:57 - So like 1, negative 1, something that's
not 0 if C is a lowercase letter,
355:02 - and 0 if it is not a lowercase letter.
355:05 - So how can we use this building block?
355:07 - Let me go back to my code here.
355:09 - Let me add this file, include ctype.h.
355:13 - And down here, let me get rid of
this cryptic expression, which
355:17 - was kind of painful to come up with,
and just ask this, is-lower s bracket i?
355:26 - That should actually work but why?
355:29 - Well is-lower, again, returns a non-zero
value if the letter is lowercase.
355:34 - Well, what does that mean?
355:36 - That means it could return 1.
355:37 - It could return negative 1.
355:38 - It could return 50 or negative 50.
355:40 - It's actually not
precisely defined, why?
355:42 - Just, because.
355:43 - This was a common convention to
use 0 to represent false and use
355:48 - any other value to represent true.
355:50 - And so it turns out, that
inside of Boolean expressions,
355:54 - if you put a value like a function
call like this, that returns 0,
355:59 - that's going to be equivalent to false.
356:00 - It's like the answer
being no, it is not lower.
356:03 - But you can also, in
parentheses, put the name
356:06 - of the function and its arguments,
and not compare it against anything.
356:10 - Because we could do something like
this, well if it's not equal to 0, then
356:15 - it must be lowercase.
356:16 - Because that's the definition,
if it returns a non-zero value,
356:19 - it's lowercase.
356:20 - But a more succinct way to do that
is just a bit more like English.
356:23 - If it's is lower, then print
out the character minus 32.
356:28 - So this would be the common
way of using one of these
356:30 - is- functions to check if
the answer is true or false.
356:34 - AUDIENCE: [INAUDIBLE]
356:37 - DAVID MALAN: OK, well we might be done.
356:38 - OK.
356:39 - AUDIENCE: [INAUDIBLE]
356:41 - DAVID MALAN: No.
356:42 - So it's not necessarily 1.
356:43 - It would be incorrect to check for
1, or negative 1, or anything else.
356:47 - You want to check for the opposite of 0.
356:49 - So not equal 0.
356:51 - Or more succinctly, like I did by
just putting it into parentheses.
356:56 - Let me see what happens here.
356:58 - So this is great, but some of you
might have spotted a better solution
357:02 - to this problem.
357:03 - A moment ago when we were on
the manual pages searching
357:06 - for things related to lowercase,
what might be another building
357:09 - block we can employ here?
357:13 - Based on what's on the screen here?
357:14 - Yeah?
357:15 - AUDIENCE: To-upper.
357:17 - DAVID MALAN: So to-upper.
357:18 - There's a function that would literally
do the uppercasing thing for me
357:21 - so I don't have to get into the
weeds of negative 32, plus 32.
357:24 - I don't have to consult that chart.
357:25 - Someone has solved this
problem for me in the past.
357:29 - And let's see if I can
actually get back to it.
357:33 - There we go.
357:34 - Let me go ahead, now, and use this.
357:36 - So instead of doing
s bracket i minus 32,
357:39 - let's use a function that someone else
wrote, and just say to-upper, s bracket
357:44 - i.
357:44 - And now it's going to
do the solution for me.
357:47 - So if I rerun make uppercase, and then
do, slowly, .uppercase, type in hi,
357:54 - now it's working as expected.
357:56 - And honestly, if I read the
documentation for to-upper
358:00 - by going back to its man page,
or manual page, what you'll see
358:03 - is that it says if it's lowercase,
it will return the uppercase version
358:08 - thereof.
358:09 - If it's not lowercase, it's already
uppercase, it's punctuation,
358:13 - it will just return
the original character.
358:14 - Which means, thanks to this
function, I can actually
358:18 - tighten this up significantly,
get rid of all of my conditional
358:21 - there, and just print out
the to-upper return value,
358:26 - and leave it to whoever wrote
that function to figure out
358:29 - if something's uppercase or lowercase.
358:33 - All right, questions on
these kinds of tricks?
358:38 - Again, it all reduces to
week 0 basics, but we're just
358:41 - building these abstractions on top.
358:43 - Yeah?
358:43 - AUDIENCE: I'm wondering
if there's any way just
358:45 - to import all packages under
a certain subdomain instead
358:49 - of having to do multiple
[INAUDIBLE] statements,
358:51 - kind of like a star [INAUDIBLE]
358:52 - DAVID MALAN: Yes.
358:53 - Unfortunately, no.
358:54 - There is no easy way in C
to say, give me everything.
358:57 - That was for, historically,
performance reasons.
358:59 - They want you to be explicit
as to what you want to include.
359:03 - In other languages like
Python, Java, one of which
359:05 - we'll see later this term, you
can say, give me everything.
359:08 - But that, actually, tends to be best
practice because it can slow down
359:11 - execution or compilation of your code.
359:14 - Yeah?
359:14 - AUDIENCE: Does to-upper
accommodate for special characters?
359:17 - DAVID MALAN: Ah.
359:17 - Does to-upper accommodate special
characters like punctuation?
359:20 - Yes.
359:20 - If I read the documentation
more pedantically,
359:22 - we would see exactly that.
359:23 - It will properly hand me
back an exclamation point,
359:27 - even if I passed it in.
359:28 - So if I do make uppercase here,
and let me do ./upper, sorry--
359:33 - ./uppercase, hi with an exclamation
point, it's going to handle that, too,
359:37 - pass it through unchanged Yeah?
359:40 - AUDIENCE: Do we access to a
function that would do all of that
359:43 - but just to the screen
rather than to [INAUDIBLE]
359:45 - DAVID MALAN: Really good question, too.
359:47 - No, we do not have access to a function
that at least comes with C or comes
359:52 - with CS50's library that will just
force the whole thing to uppercase.
359:56 - In C, that's actually
easier said than done.
359:58 - In Python, it's trivial.
359:59 - So stay tuned for another language
that will let us do exactly that.
360:04 - All right, so what does
this leave us with?
360:06 - There's just a-- let's
come full circle now,
360:08 - to where we began today where we
were talking about those command line
360:11 - arguments.
360:12 - Recall that we talked about rm
taking command line argument.
360:16 - The file you want to delete,
we talked about clang
360:18 - taking command line
arguments, that again,
360:20 - modify the behavior of the program.
360:22 - How is it that maybe you and I
can start to write programs that
360:25 - actually take command line arguments?
360:28 - Well here is where I
can finally explain why
360:31 - we've been typing int
main(void) for the past week
360:35 - and just asking that you take on faith
that it's just the way you do things.
360:38 - Well, by default in C, at least
the most recent versions thereof,
360:45 - there's only two official
ways to write main functions.
360:48 - You might see other formats
online, but they're generally
360:50 - not consistent with the
current specification.
360:53 - This, again, was sort of a
boilerplate for the simplest
360:56 - function we might write last
week, and recall that we've
360:59 - been doing this the whole time.
361:00 - (Void) What that (void) means, for all
of the programs I have written thus far
361:05 - and you have written thus far,
is that none of our programs
361:08 - that we've written take
command line arguments.
361:11 - That's what the void there means.
361:13 - It turns out that main is the way you
can specify that your program does,
361:18 - in fact, take command
line arguments, that
361:20 - is words after the command
in your terminal window.
361:24 - If you want to actually not
use get int or get string,
361:26 - you want the human to be able to
say something, like hello, David
361:30 - and hit Enter.
361:31 - And just run-- print
hello, David on the screen.
361:34 - You can use command line arguments,
words after the program name
361:38 - on your command line.
361:41 - So we're going to change this in a
moment to be something more verbose,
361:44 - but something that's now a bit
more familiar syntactically.
361:48 - If you change that (void) in main
to be this incantation instead,
361:52 - int, argc, comma, string, argv,
open bracket, close bracket,
361:57 - you are now giving yourself
access to writing programs
362:00 - that take command line arguments.
362:03 - Argc, which stands for
argument count is going
362:06 - to be an integer that stores how many
words the human typed at the prompt.
362:10 - The C automatically gives that to you.
362:13 - String argv stands for
argument vector, that's
362:16 - going to be an array of all of the words
that the human typed at the prompt.
362:21 - So with today's building
block of an array,
362:23 - we have the ability now to let
the humans type as many words,
362:26 - or as few words, as
they want at the prompt.
362:28 - C is going to automatically put
them in an array called argv,
362:31 - and it's going to tell us how many
words there are in an int called argc.
362:36 - The int, as the return type here,
we'll come back to in just a moment.
362:40 - Let's use this definition
to make, maybe,
362:43 - just a couple of simple programs.
362:45 - But in problem set 2
will we actually use
362:47 - this to control the
behavior of your own code.
362:50 - Let me code up a file called
argv.0 just to keep it aptly named.
362:57 - Let me include cs50.h.
362:59 - Let me go ahead and include--
363:01 - oops.
363:02 - That is not the right name of a
program, let's start that over.
363:05 - Let's go ahead and code up argv.c.
363:09 - And here we have--
363:11 - include cs50.h, include
stdio.h, int, main, not void,
363:17 - let's actually say int, argc, string,
argv, open bracket, close bracket.
363:24 - No numbers in between because
you don't know, in advance,
363:26 - how many words the human's
going to type at their prompt.
363:29 - Now let's go ahead and do this.
363:31 - Let's write a very simple program that
just says, hello, David, hello, Carter,
363:35 - whoever the name is that gets typed.
363:36 - But not using get string, let's
instead have the human just
363:40 - type their name at the prompt, just like
rm, just like clang, just like make,
363:44 - so it's just one and
done when you hit Enter.
363:46 - No additional prompts.
363:47 - Let me go ahead then and do this,
printf, quote-unquote, hello,
363:52 - comma, and instead of world
today, I want to print out
363:55 - whatever the human typed in.
363:57 - So let's go ahead and do
this, argv, bracket 0 for now.
364:03 - But I don't think this is quite
what I want because, of course,
364:07 - that's going to literally print
out argv, bracket, 0, bracket.
364:12 - I need a placeholder, so let me
put %s here and then put that here.
364:16 - So if argv is an array, but
it's an array of strings,
364:20 - then argv bracket 0 is
itself a single string.
364:24 - And so it can be plugged
into that %s placeholder.
364:27 - Let me go ahead and save my program.
364:30 - And compile argv, so far, so good.
364:33 - Let me now type in my name
after the name of the program.
364:37 - So no get string.
364:38 - I'm literally typing an extra word,
my own name at the prompt, Enter.
364:42 - OK, it's apparently a little
buggy in a couple of ways.
364:45 - I forgot my /n but
that's not a huge deal.
364:48 - But apparently, inside of
argv is literally everything
364:53 - that humans typed in including
the name of the program.
364:55 - So logically, how do I print out hello,
David, or hello so-and-so and not
365:00 - the actual name of the program?
365:01 - What needs to change here?
365:03 - Yeah?
365:03 - AUDIENCE: Change the index to 1.
365:05 - DAVID MALAN: Yeah.
365:06 - So presumably index to 1, if that's
the second thing I, or whichever human,
365:10 - has typed at the prompt.
365:11 - So let's do make argv
again, ./argv, Enter.
365:15 - Huh.
365:16 - Hello, nul.
365:17 - So this is another form of nul.
365:19 - But this is user error, now, on my part.
365:23 - I didn't do exactly what I said I would.
365:25 - Yeah?
365:25 - AUDIENCE: You forgot the parameter.
365:26 - DAVID MALAN: Yeah, I
forgot the parameter.
365:28 - So that's actually, hm.
365:29 - I should probably deal
with that, somehow,
365:31 - so that people aren't
breaking my program
365:33 - and printing out random
things, like nul.
365:35 - But if I do say argv, David,
now you see hello, David.
365:39 - I can get a little curious,
like what's at location 2?
365:42 - Well we can see, make argv,
bracket, ./argv, David, Enter.
365:47 - All right, so just nothing is there.
365:49 - But it turns out, in a couple of weeks,
we'll start really poking around memory
365:52 - and see if we can't crash
programs deliberately
365:54 - because nothing is
stopping me from saying,
365:57 - oh what's at location 2
million, for instance?
366:00 - We could really start to get curious.
366:02 - But for now, we'll do the right thing.
366:04 - But let's now make sure the human has
typed in the right number of words.
366:08 - So let's say this, if argc equals
2, that is the name of the program
366:15 - and one more word after that, go
ahead and trust that in argv 1,
366:19 - as you proposed, is the person's name.
366:21 - Else, let's go ahead and default
here to something simple and basic,
366:26 - like, well, if we don't get a name
from the user, just say hello, world,
366:30 - like always.
366:31 - So now we're programming defensively.
366:34 - This time the human, even if they
screw up, they don't give us a name
366:37 - or they give us too many names,
we're just going to say hello, world,
366:40 - because I now have some
error handling here.
366:42 - Because, again, argc is argument
count, the number of words, total,
366:46 - typed at the command line.
366:48 - So make, argv, ./argv.
366:51 - Let me make the same mistake as before.
366:52 - OK.
366:53 - I don't get this weird nul behavior.
366:55 - I get something well-defined.
366:56 - I could now do David.
366:57 - I could do David Malan, but
that's not currently supported.
367:01 - I would need to alter my logic to
support more than just two words
367:05 - after the prompt.
367:06 - So what's the point of this?
367:08 - At the moment, it's
just a simple exercise
367:09 - to actually give myself a way of taking
user input when they run the program.
367:14 - Because, consider, it's
just more convenient in
367:16 - this new, command-line-interface world.
367:18 - If you had to use get string
every time you compile your code,
367:23 - it'd be kind of annoying, right?
367:24 - You type make, then you might get a
prompt, what would you like to make?
367:28 - Then you type in hello, or cash, or
something else, then you hit Enter,
367:31 - it just really slows the process.
367:33 - But in this
command-line-interface world,
367:35 - if you support command line arguments,
then you can use these little tricks.
367:39 - Like, scrolling up and down in
your history with your arrow keys.
367:42 - You can just type commands more quickly
because you can do it all at once.
367:46 - And you don't have to keep
prompting the user, more
367:49 - pedantically, for more and more info.
367:52 - So any questions then on
command line arguments?
367:54 - Which, finally, reveals why
we had (void) initially,
367:58 - but what more we can now put in main.
368:00 - That's how you take
command line arguments.
368:03 - Yeah?
368:04 - AUDIENCE: If you were to put--
368:06 - if you were to use argv, and you
were to put integers inside of it,
368:11 - would it still give you, like, a string?
368:14 - Would that still be considered string?
368:15 - Or would you consider [INAUDIBLE]?
368:17 - DAVID MALAN: Yes.
368:18 - If you were to type at
the command line something
368:20 - like, not a word, but
something like the number 42,
368:24 - that would actually be
treated as a string.
368:27 - Why?
368:28 - Because again, context matters.
368:30 - So if your program is
currently manipulating memory
368:33 - as though its characters or strings,
whatever those patterns of 0s and 1s
368:36 - are, they will be interpreted
as ASCII text, or Unicode text.
368:41 - If we therefore go to the chart here,
that might make you wonder, well,
368:44 - then how do you distinguish numbers
from letters in the context of something
368:48 - like chars and strings?
368:50 - Well, notice 65 is a, 97 is a,
but also 49 is 1, and 50 is 2.
368:58 - So the designers of ASCII,
and then later Unicode,
369:01 - realized well wait a minute,
if we want to support programs
369:04 - that let you type things
that look like numbers,
369:07 - even though they're not
technically ints or floats,
369:10 - we need a way in ASCII and
Unicode to represent even numbers.
369:14 - So here are your numbers.
369:16 - And it's a little silly that we have
numbers representing other numbers.
369:19 - But again, if you're in the
world of letters and characters,
369:22 - you've got to come up with
a mapping for everything.
369:24 - And notice here, here's the dot.
369:26 - Even if you were to represent 1.23
as a string, or as characters,
369:30 - even the dot now is going to be
represented as an ASCII character.
369:35 - So again, context here matters.
369:37 - All right, one final example
to tease apart what this int is
369:41 - and what it's been
doing here for so long.
369:44 - So I'm going to add one
bit of logic to a new file
369:49 - that I'm going to call exit.c.
369:52 - So an exit.c.
369:53 - We're going to introduce something that
are generally known as exit status.
369:57 - It turns out this is not
a feature we've used yet,
369:59 - but it's just useful to know about.
370:01 - Especially when automating
tests of your own code.
370:04 - When it comes to figuring out if
a program succeeded or failed.
370:08 - It turns out that main has one
more feature we haven't leveraged.
370:13 - An ability to signal to the user
whether something was successful or not.
370:18 - And that's by way of
main's return value.
370:22 - So I'm going modify this
program as follows, like this.
370:26 - Suppose I want to write
a similar program that
370:29 - requires that the user
type a word at the prompt.
370:32 - So that argc has to be 2
for whatever design purpose.
370:36 - If argc does not equal 2, I want to
quit out of my program prematurely.
370:43 - I want to insist that the user
operate the program correctly.
370:46 - So I might give them an error message
like, missing command line argument /n.
370:53 - But now I want to quit
out of the program.
370:55 - Now how can I do that?
370:56 - The right way, quote-unquote, to do
that is to return a value from main.
371:01 - Now it's a little weird
because no one called main yet,
371:04 - right, main just gets
called automatically,
371:07 - but the convention is
anytime something goes
371:09 - wrong in a program you should
return a non-zero value from main.
371:14 - 1 is fine as a go-to.
371:16 - We don't need to get into the weeds of
having many different exit statuses,
371:19 - so to speak.
371:20 - But if you return 1, that is a clue to
the system, the Mac, the PC, the cloud
371:26 - device that's something went wrong.
371:27 - Why?
371:28 - Because 1 is not 0.
371:29 - If everything works fine, like, let's go
ahead and print out hello comma %s like
371:35 - before, quote-unquote argv bracket 1.
371:40 - So this is just a version of
the program without an else.
371:43 - So this is the same
as doing, essentially,
371:45 - an else here like I did earlier.
371:47 - I want to signal to the
computer that all is well.
371:51 - And so I return 0.
371:52 - But strictly speaking, if
I'm already returning here,
371:55 - I don't technically need, if
I really want to be nit picky,
371:58 - I don't technically need the
else because the only way
372:01 - I'm going to get to line 11
is if I didn't already return.
372:05 - So what's going on here?
372:07 - The only new thing here logically,
is that for the first time ever,
372:10 - I'm returning a value from main.
372:13 - That's something I
could always have done
372:14 - because main has always been defined by
us as taking an int as a return value.
372:19 - By default, main automatically,
sort of secretly, returns 0 for you.
372:24 - If you've never once use the
return keyword, which you probably
372:27 - haven't in main, it just
automatically returns 0
372:29 - and the system assumes
that all went well.
372:31 - But now that we're starting
to get a little more
372:33 - sophisticated with our
code, and you know,
372:35 - the programmer, something went
wrong, you can abort programs early.
372:39 - You can exit out of them by returning
some other value, besides 0, from main.
372:44 - And this is fortuitous
that it's an int, right?
372:47 - 0 means everything worked.
372:49 - Unfortunately, in programming, there are
seemingly, an infinite number of things
372:53 - that can go wrong.
372:54 - And int gives you 4
billion possible codes
372:57 - that you can use, a.k.a. exit
statuses, to signify errors.
373:00 - So if you've ever on your Mac
or PC gotten some weird pop up
373:04 - that an error happened, sometimes,
there's a cryptic number in it.
373:07 - Maybe it's positive,
maybe it's negative.
373:09 - It might say error code 123, or
negative 49, or something like that.
373:14 - What you're generally seeing, are
these exit statuses, these return
373:18 - values from main in a program
that someone at Microsoft,
373:21 - or Apple, or somewhere else
wrote, something went wrong,
373:25 - they are unnecessarily showing you,
the user what the error code is.
373:30 - If only, so that when you call
customer support or submit a ticket,
373:33 - you can tell them what exit
status you encountered,
373:36 - what error code you encounter.
373:39 - All right, any questions
on exit statuses,
373:43 - which is the last of our new
building blocks, for now?
373:48 - Any questions at all?
373:49 - Yeah?
373:50 - AUDIENCE: [INAUDIBLE] You know how
if you have get string or get int,
373:57 - if you want to make [INAUDIBLE]
373:59 - DAVID MALAN: No.
374:00 - The question is can you
do things again and again
374:03 - at the command line like you
could with get string and get int.
374:06 - Which, by default,
recall are automatically
374:08 - designed to keep prompting
the user in their own loop
374:10 - until they give you an int, or a
float, or the like with command line
374:14 - arguments, no.
374:15 - You're going to get an
error message but then
374:16 - you're going to be
returned to your prompt.
374:18 - And it's up to you to type
it correctly the next time.
374:21 - Good question.
374:22 - Yeah?
374:22 - AUDIENCE: [INAUDIBLE]
automatically for you.
374:27 - DAVID MALAN: If you
do not return a value
374:29 - explicitly main will
automatically return 0 for you,
374:32 - that is the way C simply works
so it's not strictly necessary.
374:36 - But now that we're starting
to return values explicitly,
374:39 - if something goes wrong,
it would be good practice
374:42 - to also start returning a value
for main when something goes right
374:45 - and there are no errors.
374:48 - So let's now get out of
the weeds and contextualize
374:52 - this for some actual problems that
we'll be solving in the coming days
374:55 - by way of problems set 2 and beyond.
374:57 - So here for instance--
375:00 - So here for instance, is a
problem that you might think back
375:04 - to when you were a kid the
readability of some text or some book,
375:08 - the grade level in which
some book is written.
375:10 - If you're a young student, you
might read at first-grade level
375:14 - or third-grade level in the US.
375:15 - Or, if you're in college
presumably, you're
375:17 - reading at a university-level of text.
375:19 - But what does it mean
for text, like in a book,
375:22 - or in an essay, or something
like that to correspond
375:24 - to some kind of grade level?
375:25 - Well, here's a quote-- a
title of a childhood book.
375:29 - One Fish, Two Fish, Red Fish, Blue Fish.
375:31 - What might the grade level be for
a book that has words like this?
375:35 - Maybe, when you were a kid or if
you have a siblings still reading
375:37 - these things, what might the
grade level of this thing be?
375:43 - Any guesses?
375:43 - Yeah?
375:44 - AUDIENCE: Before grade 1.
375:45 - DAVID MALAN: Sorry, again?
375:46 - AUDIENCE: Before grade 1.
375:47 - DAVID MALAN: Before grade
1 is, in fact, correct.
375:49 - So that's for really young kids?
375:51 - Why is that?
375:52 - Well, let's consider.
375:53 - These are pretty simple phrases, right?
375:56 - One fish, two fish, red--
375:57 - I mean there's not even
verbs in these sentences,
376:00 - they're just nouns and adjectives,
and very short sentences.
376:04 - And so that might be a
heuristic we could use.
376:06 - When analyzing text, well if
the words are kind of short,
376:09 - the sentences are kind of
short, everything's very simple,
376:11 - that's probably a very
young, or early, grade level.
376:14 - And so by one formulation, it might
indeed be even before grade 1,
376:17 - for someone quite young.
376:18 - How about this?
376:19 - Mr and Mrs. Dursley, of
number 4, Privet Drive,
376:22 - were proud to say that they were
perfectly normal, thank you very much.
376:25 - They were the last
people you would expect
376:27 - to be involved in anything
strange or mysterious
376:29 - because they just didn't
hold with such nonsense.
376:32 - And, onward.
376:33 - All right, what grade
level is this book?
376:34 - AUDIENCE: Third.
376:36 - DAVID MALAN: OK, I heard third.
376:37 - AUDIENCE: What?
376:38 - DAVID MALAN: Seventh, fifth.
376:40 - OK, all over the place.
376:41 - But grade 7, according to
one particular measure.
376:44 - And whether or not we can debate exactly
what age you were when you read this,
376:49 - and maybe you're feeling ahead
of your time, or behind now.
376:51 - But here, we have a snippet of text.
376:55 - What makes this text assume an older
audience, a more mature audience,
377:00 - a higher grade level, would you think?
377:03 - Yeah?
377:04 - AUDIENCE: [INAUDIBLE]
377:06 - DAVID MALAN: Yeah, it's longer,
different types of words,
377:09 - there's commas now in
phrases, and so forth.
377:11 - So there's just some kind
of sophistication to this.
377:13 - So it turns out for the
upcoming problem set,
377:16 - among the things you'll do is
take, as input, texts like this
377:19 - and analyze them.
377:20 - Considering , well, how
many words are in the text?
377:23 - How many sentences are in the text?
377:24 - How many letters are in the text?
377:26 - And use those according to a
well-defined formula to prescribe what,
377:30 - exactly, the grade level of some
actual text-- there's the third--
377:33 - might actually be.
377:34 - Well what else are we going
to do in the coming days?
377:37 - Well I've alluded to this notion
of cryptography in the past.
377:39 - This notion of scrambling
information in such a way
377:42 - that you can hide the
contents of a message
377:45 - from someone who might
otherwise intercept it, right?
377:47 - The earliest form of this might
also be when you're younger,
377:50 - and you're in class, and you're passing
a note from one person to another,
377:53 - from yourself to someone else.
377:54 - You don't want to necessarily
write a note in English,
377:57 - or some other written,
language you might want
377:59 - to scramble it somehow, or encrypt it.
378:01 - Maybe you change the As
to a B, and the Bs to a C.
378:04 - So that if the teacher snaps
it up and intercepts it,
378:07 - they can't actually
understand what it is you've
378:09 - written because it's encrypted.
378:11 - So long as your friend,
the recipient of this note,
378:13 - knows how you manipulated it.
378:16 - How you added or subtracted
letters to each other,
378:19 - they can decrypt it, which
is to reverse that process.
378:23 - So formally, in the world of
cryptography and computer science,
378:26 - this is another problem to solve.
378:28 - Your input, though, when you have a
message you want to send securely,
378:31 - is what's generally known as plain text.
378:33 - There's some algorithm that's
going to then encipher, or encrypt
378:37 - that information, into what's
called ciphertext, which
378:40 - is the scrambled version that
theoretically can get safely
378:42 - intercepted and your message
has not been spoiled,
378:45 - unless that intercept
actually knows what algorithm
378:48 - you used inside of this process.
378:51 - So that would be generally
known as a cipher.
378:53 - The ciphers typically take,
though, not one input, but two.
378:57 - If, for instance, your cipher
is as simple as A becomes B,
379:01 - B becomes C, C becomes D,
dot dot dot, Z becomes A,
379:05 - you're essentially adding one to
every letter and encrypting it.
379:09 - Now that would be,
what we call, the key.
379:12 - You and the recipient both have to
agree, presumably, before class,
379:15 - in advance, what number you're
going to use that day to rotate,
379:19 - or change all of these letters by.
379:21 - Because when you add 1, they
upon receiving your ciphertext
379:24 - have to subtract 1 to
get back the answer.
379:27 - For instance, if the input,
plaintext, is hi, as before,
379:31 - and the key is 1, the ciphertext using
this simple rotational algorithm,
379:37 - otherwise known as the Caesar cipher,
might be ij exclamation point.
379:41 - So it's similar, but it's at
least scrambled at first glance.
379:45 - And unless the teacher
really cares to figure out
379:47 - what algorithm are they using today,
or what key are they using today,
379:50 - it's probably sufficiently
secure for your purposes.
379:53 - How do you reverse the process?
379:55 - Well, your friend gets this
and reverses it by negative 1.
379:58 - So I becomes H, J becomes I,
and things like punctuation
380:02 - remain untouched at
least in this scheme.
380:05 - So let's consider one
final example here.
380:07 - If the input to the algorithm
is Uijtxbtdt50, and the key
380:15 - this time is negative 1.
380:17 - Such that now B should become A, and C
should become B, and A should become A.
380:23 - So we're going in the other direction.
380:25 - How might we analyze this?
380:27 - Well if we spread all the letters
out, and we start from left to right,
380:30 - and we start subtracting one letter,
U becomes T, I becomes H, J becomes I,
380:36 - T becomes S, X becomes W, A, was, D, T--
380:41 - this was CS50.
380:42 - We'll see you next time.
380:43 - [APPLAUSE]
380:44 - [MUSIC PLAYING]
382:01 - DAVID J. MALAN: This is CS50, and
this is already week three.
382:06 - And even as we've gotten much more
into the minutia of programming
382:10 - and some of the C stuff
that we've been doing
382:11 - is all the more cryptic looking,
recall that at the end of the day,
382:15 - like, everything we've been doing
ultimately fits into to this model.
382:19 - So keep that in mind,
particularly as things
382:20 - seem like they're getting more
complicated and more sophisticated.
382:23 - It's just a process of learning
a new language that ultimately
382:26 - lets us express this process.
382:28 - And of course, last week we really
went into the weeds of like how
382:31 - inputs and outputs are represented.
382:33 - And this thing here, a photograph
thereof, is called what?
382:37 - This is what?
382:39 - AUDIENCE: RAM.
382:39 - DAVID J. MALAN: RAM, I heard--
382:41 - Random Access Memory or just
generally known as memory.
382:44 - And recall that we looked at
one of these little black chips
382:46 - that contains all of the bytes--
382:48 - all of the bits, ultimately.
382:50 - It's just kind of a grid,
sort of an artist grid, that
382:52 - allows us to think about every
one of these memory locations
382:55 - as just having a number or
an address, so to speak.
382:58 - Like, this might be byte
number 0 and then 1 and then 2
383:01 - and then, maybe way down here
again, something like 2 billion
383:04 - if you have 2 gigabytes of memory.
383:06 - And so as we did that, we started to
explore how we could use this canvas
383:10 - to create kind of our own information,
our own inputs and outputs, not
383:14 - just the basics like ints
and floats and so forth.
383:16 - But we also talked about strings.
383:18 - And what is a string as you now know it?
383:21 - How would you describe in
layperson's terms a string?
383:24 - Yeah, over there.
383:25 - AUDIENCE: I was gonna say--
383:26 - [AUDIO OUT]
383:26 - DAVID J. MALAN: An array of characters.
383:28 - And an array, meanwhile--
let's go there.
383:30 - How might someone else define an
array in more familiar now terms?
383:34 - What would be an array?
383:37 - Yeah.
383:38 - AUDIENCE: Kind of like
an indexed set of things.
383:41 - DAVID J. MALAN: An indexed
set of things-- not bad.
383:43 - And I think a key characteristic to
keep in mind with an array is that it
383:46 - does actually pertain to memory.
383:48 - And it's contiguous memory.
383:50 - Byte after byte after byte
is what constitutes an array.
383:53 - And we'll see in a couple of
weeks time that there's actually
383:56 - more interesting ways to use this same
primitive Canvas to stitch together
384:00 - things that are sort of two directional
even that have some kind of shape
384:03 - to them.
384:04 - But for now, all we've talked about
is arrays and just using these things
384:07 - from left to right, top to bottom,
contiguously to represent information.
384:11 - So today, we'll consider still an array.
384:14 - But we won't focus so
much on representation
384:17 - of strings or other data types.
384:18 - We'll actually now focus on
the other part of that process,
384:21 - of inputs becoming outputs,
namely the thing in the middle--
384:24 - algorithms.
384:25 - But we have to keep in mind, even though
every time we've looked at an array
384:29 - thus far, certainly on the board
like this, you as a human certainly
384:32 - have the luxury of
just kind of eyeballing
384:34 - the whole thing with a bird's eye view
and seeing where all of those numbers
384:38 - are.
384:38 - If I asked you where a
particular number is,
384:40 - like zero, odds are your eyes
would go right to where it is,
384:43 - and boom, problem solved
in sort of one step.
384:46 - But the catch is, with a computer
that has this memory, even though you,
384:51 - the human, can [INAUDIBLE] see
everything at once, a computer cannot.
384:55 - It's better to think of your
computer's memory, your phone's memory,
384:58 - or more specifically an
array of memory like this
385:01 - as really being a set of closed
doors, not unlike lockers in a school.
385:05 - And only by opening
each of those doors can
385:08 - the computer actually
see what's in there,
385:10 - which is to say that the
computer, unlike you, doesn't
385:12 - have this bird's eye view of all
of the data in all these locations.
385:16 - It has to much more
methodically look here,
385:19 - maybe look here, maybe look here, and
so forth in order to find something.
385:23 - Now fortunately, we already have some
building blocks-- loops, conditions,
385:28 - Boolean expressions, and the like--
385:29 - where you could imagine
writing some code
385:31 - that very methodically goes from left
to right or right to left or something
385:36 - more sophisticated that actually
finds something you're looking for.
385:39 - And just remember that the
conventions we've had since last week
385:43 - now is that these arrays are
zero indexed, so to speak.
385:47 - To be zero indexed just means that the
data type starts counting from zero.
385:52 - So this is location 0, 1, 2, 3, 4, 5, 6.
385:56 - And notice even though there
are seven total doors here,
385:59 - the right-most one,
of course, is called 6
386:02 - just because we've
started counting at 0.
386:04 - So in the general case, if you
had n doors or n bytes of memory,
386:09 - 0 would always be at the left, and n
minus 1 would always be at the right.
386:13 - That's sort of a generalization of just
thinking about this kind of convention.
386:18 - All right, so let's revisit the problem
that we started the whole term off
386:22 - with in week zero, which was
this notion of searching.
386:24 - And what does it mean
to search for something?
386:26 - Well, to find information-- and
this, of course, is omnipresent.
386:29 - Anytime you take out your phone, you're
searching for a friend's contact.
386:32 - Any time you pull up a browser,
you're googling for this or that.
386:35 - So search is kind of one of the
most omnipresent topics and features
386:39 - of any device these days.
386:41 - So let's consider how the Googles, the
Apples, the Microsofts of the world
386:44 - are implementing something as
seemingly familiar as this.
386:48 - So here might be the problem statement.
386:50 - We want some input to
become some output.
386:52 - What's that input going to be?
386:54 - Maybe it's a bunch of closed doors
like this out of which we want
386:57 - to get back an answer, true or false.
387:00 - Is something we're
looking for there or not?
387:03 - You can imagine taking this one
step further and trying to find
387:05 - where is the thing you're looking for.
387:07 - But for now, let's just take
one bite out of the problem.
387:10 - Can we tell ourselves, true or
false, is some number behind one
387:14 - of these doors or lockers in memory?
387:17 - But before we go there and start
talking about ways to do that-- that is,
387:22 - algorithms.
387:22 - Let's consider how we might
lay the foundation of, like,
387:27 - comparing whether one algorithm
is better than another.
387:30 - We talked about
correctness, and it sort of
387:32 - goes without saying that any code you
write, any algorithm you implement,
387:35 - had better be correct.
387:36 - Otherwise, what's the point if it
doesn't give you the right answers?
387:39 - But we also talked about design.
387:41 - And in your own words, what do we
mean when we say a program is better
387:45 - designed at this stage than another?
387:48 - How do you think about
this notion of design now?
387:52 - Yeah, in the middle?
387:53 - AUDIENCE: Easier to understand
or easier to institute.
387:55 - DAVID J. MALAN: OK, so easier to understand.
387:57 - I like that.
387:58 - Other thoughts?
387:58 - Yeah.
387:59 - AUDIENCE: Efficiency.
388:00 - DAVID J. MALAN: Efficiency, and what do
you mean by efficiency precisely?
388:03 - AUDIENCE: [INAUDIBLE]
388:06 - DAVID J. MALAN: Nice.
388:07 - It doesn't use up too much
memory, and it isn't redundant.
388:09 - So you can think about
design along a few
388:11 - of these axes-- sort of
the quality of the code
388:13 - but also the quality of the performance.
388:15 - And as our programs get bigger and
more sophisticated and just longer,
388:20 - those kinds of things are
really going to matter.
388:22 - And in the real world,
if you start writing code
388:24 - not just by yourself but with
someone else, getting the design
388:26 - right is just going to make it easier
to collaborate and ultimately produce,
388:30 - write code, with just
higher probability.
388:33 - So let's consider how we might focus
on exactly the second characteristic,
388:36 - the efficiency, of an algorithm.
388:38 - And the way we might talk about the
efficiency of algorithms, just how fast
388:42 - or how slow they are, is in
terms of their running time.
388:45 - That is to say, when they're
running, how much time do they take?
388:49 - And we might measure this in
seconds or milliseconds or minutes
388:52 - or just some number of
steps in the general case
388:54 - because presumably fewer steps, to
your point, is better than more steps.
388:58 - So how might we think
about running times?
389:00 - Well, there's one general
notation we should define today.
389:03 - So computer scientists tend to describe
the running time of an algorithm
389:07 - or a piece of code, for that matter, in
terms of what's called big O notation.
389:12 - This is literally a
capitalized O, a big O.
389:14 - And this generally means that the
running time of some algorithm
389:18 - is on the order of such and such,
where such and such, we'll see,
389:21 - is just going to be a very
simple mathematical formula.
389:24 - It's kind of a way of waving
your hands mathematically
389:26 - to convey the idea of just how fast
or how slow some algorithm or code is
389:31 - without getting into
the weeds of like, it
389:32 - took this many milliseconds or
this many specific number of steps.
389:36 - So you might recall then from week
zero, I even introduced this picture
389:40 - but without much context.
389:41 - At the time, we just use this to
compare those phone book algorithms.
389:45 - Recall that this red straight
line was the first algorithm,
389:47 - one page at a time.
389:49 - The yellow line that's still
straight differed how if you recall?
389:54 - That line represented what
alternative algorithm?
389:58 - Looking out and back.
389:59 - What is that second algorithm?
390:00 - Yeah, over there.
390:01 - AUDIENCE: Like, two pages at a time.
390:03 - DAVID J. MALAN: Two pages at a time, which
was almost correct so long as we
390:06 - potentially double back a page if maybe
we go a little too far in the phone
390:09 - book.
390:10 - So it had a potential bug
but arguably solvable.
390:12 - This last algorithm, though, was
the so-called divide and conquer
390:15 - strategy where I sort of unnecessarily
tore the phone book in half
390:18 - and then in half and
then in half, which,
390:20 - as dramatic as that was unnecessarily,
it actually took significantly bigger
390:25 - bites out of the
problem-- like 500 pages
390:27 - the first time, another 250, another
125 versus just 1 or 2 bytes at a time.
390:33 - And so we described its
running time as this picture
390:36 - there, though I didn't use that
expression at the time, running times.
390:39 - But indeed, time to solve
might be measured just
390:42 - abstractly in some unit of measure--
390:44 - seconds, milliseconds, minutes, pages--
390:47 - via this y-axis here.
390:49 - So let's now slap some numbers on this.
390:52 - If we had n pages in that
phone book, n just representing
390:55 - a generic number, the
first algorithm here
390:57 - we might describe as taking n steps.
390:59 - Second algorithm we might describe
as taking n divided by 2 steps,
391:03 - maybe give or take one if we
have to double back but generally
391:05 - n divided by 2.
391:06 - And then this thing, if you
remember your logarithms,
391:09 - was sort of a fundamentally
different formula--
391:11 - log base 2 of n or just
log of n for short.
391:14 - So this is of a fundamentally
different formula.
391:17 - But what's noteworthy is that
these first two algorithms,
391:20 - even though, yes, the second
algorithm was hands down faster--
391:24 - I mean, literally twice as fast--
391:26 - when you start to zoom out and if
I increase my y-axis and x-axis,
391:30 - these first two start to look
awfully similar to one another.
391:36 - And if we keep zooming out
and zooming out and zooming
391:39 - out as n gets really large--
391:41 - that is, the x-axis gets really long--
391:43 - these first two algorithms start
to become essentially the same.
391:47 - And so this is where computer
scientists use big O notation.
391:50 - Instead of saying specifically,
this algorithm takes any steps.
391:54 - And this one n divided by 2, a
computer scientist would say,
391:57 - eh, each of those algorithms
takes on the order of n steps
392:01 - or on the order of n over 2.
392:03 - But you know what?
392:04 - On the order of n over 2
is pretty much the same
392:07 - when n gets really large as being
equivalent to big O of n itself.
392:13 - So yes, in practice, it's obviously
fewer steps to move twice as fast.
392:18 - But in the big picture, when n
becomes a million, a billion,
392:22 - the numbers are already
so darn big at that point
392:24 - that these are as, the
shapes of these curves imply,
392:28 - pretty much functionally equivalent.
392:30 - But this one still
looks better and better
392:33 - as n gets large because it's
rising so much less quickly.
392:36 - And so here, a computer
scientist would say
392:39 - that that third algorithm was on the
order of-- that is, big O of-- log n.
392:43 - And they don't have to
bother with the base
392:45 - because it's a smaller mathematical
detail that is also just in some sense
392:49 - a constant, multiplicative factor.
392:52 - So in short, what are
the takeaways here?
392:54 - This is just a new
vocabulary that we'll start
392:56 - to use when we just want to describe
the running time of an algorithm.
393:00 - To make this more real, if
any of you have implemented
393:02 - a for loop at this point in any of your
code and that for loop iterated n times
393:08 - where maybe in was the height
of your pyramid or maybe n
393:11 - was something else that you wanted
to do n times, you wrote code
393:15 - or you implemented an algorithm
that operated in big O of n time,
393:20 - if you will.
393:21 - So this is just a way now
to retroactively start
393:23 - describing with somewhat
mathematical notation what we've
393:27 - been doing in practice for a while now.
393:30 - So here's a list of commonly seen
running times in the real world.
393:35 - This is not a thorough list
because you could come up
393:39 - with an infinite number of
mathematical formulas, certainly.
393:42 - But the common ones we'll discuss
and you will see in your own code
393:45 - probably reduce to this list here.
393:48 - And if you were to study
more computer science theory,
393:50 - this list would get longer and longer.
393:52 - But for now, these are sort of the
most familiar ones that we'll soon see.
393:56 - All right, two other pieces
of vocabulary, if you will,
393:59 - before we start to use this stuff--
394:00 - so this, a big omega,
capital omega symbol,
394:03 - is used now to describe a lower bound
on the running time of an algorithm.
394:09 - So to be clear, big O is
on the order of-- that
394:12 - is, an upper bound-- on how
many steps an algorithm might
394:16 - take, on the order of so many steps.
394:19 - If you want to talk, though,
from the other perspective, well,
394:21 - how few steps my algorithm take?
394:24 - Maybe in the so-called
best case, it'd be nice
394:26 - if we had a notation to
just describe what a lower
394:29 - bound is because some
algorithms might be super fast
394:32 - in these so-called best cases.
394:34 - So the symbology is almost the
same, but we replace the big O
394:38 - with the big omega.
394:39 - So to be clear, big O describes
an upper bound and omega
394:42 - describes a lower bound.
394:44 - And we'll see examples
of this before long.
394:46 - And then lastly, last one here, big
theta, is used by a computer scientist
394:52 - when you have a case where both
the upper bound on an algorithm's
394:57 - running time is the
same as the lower bound.
395:00 - You can then describe it in one breath
as being in theta of such and such
395:03 - instead of saying it's in big O
and in omega of something else.
395:08 - All right, so out of context, sort
of just seemingly cryptic symbols,
395:12 - but all they refer to is upper
bounds, lower bounds, or when
395:15 - they happen to be one in the same.
395:17 - And we'll now introduce over time
examples of how we might actually
395:20 - apply these to concrete problems.
395:23 - But first, let me pause to
see if there's any questions.
395:27 - Any questions here?
395:30 - Any questions?
395:32 - I see pointing somewhere.
395:35 - Where are you pointing to?
395:37 - Over here-- there we go.
395:39 - OK, sorry-- very bright.
395:40 - AUDIENCE: So, um, smaller--
395:43 - DAVID J. MALAN: Smaller n
functions move faster.
395:45 - So yes, if you have something
like n, that takes only steps.
395:50 - If you have a formula like n
squared, just by nature of the math,
395:53 - that take more steps
and therefore be slower.
395:56 - So the larger the
mathematical expression,
395:58 - the slower your algorithm is because the
more time or more steps that it takes.
396:05 - AUDIENCE: So you want your
n function to be small?
396:07 - DAVID J. MALAN: You want your n function,
so to speak, to be small, yes.
396:10 - And in fact, the Holy
Grail, so to speak,
396:12 - would be this last one here either
in big O notation or even theta,
396:16 - when an algorithm is on
the order of a single step.
396:19 - That means it literally takes constant
time, one step, or maybe 10 steps,
396:23 - 100 steps, but a fixed,
constant number of steps.
396:26 - That's the best because even
as the phone book gets bigger,
396:30 - even as the data set you're
searching gets larger and larger,
396:34 - if something only takes a finite
number of steps constantly,
396:37 - then it doesn't matter how big
the data set actually gets.
396:42 - Questions as well on these notations--
yep, thank you for the pointing.
396:46 - This is actually very helpful.
396:47 - I'm seeing pointing this way?
396:49 - AUDIENCE: [INAUDIBLE]
396:52 - DAVID J. MALAN: What is the input
to each of these functions?
396:54 - It is an expression of how
many steps an algorithm takes.
396:58 - So in fact, let me go
ahead and make this
397:00 - more concrete with an actual
example here if we could.
397:03 - So on stage here, we have
seven lockers which represent,
397:06 - if you will, an array of memory.
397:08 - And this array of
memory is maybe storing
397:10 - seven integers, seven integers that
we might actually want to search for.
397:14 - And if we want to search
for these values, how might
397:17 - we go about doing this?
397:18 - Well, for this, why don't
we make things interesting?
397:20 - Would a volunteer like to come on up?
397:22 - Have to be masked and on the
internet if you are comfortable.
397:25 - Both of-- oh, there's someone putting
their friend's hand up and back?
397:28 - Yes, OK.
397:29 - Come on down.
397:34 - And in just a moment,
our brave volunteer
397:37 - is going to help me find a
specific number in the data set
397:41 - that we have here on the screen.
397:42 - So come on down, and I'll get things
ready for you in advance here.
397:46 - Come on down nice to meet.
397:53 - And what is your name?
397:54 - AUDIENCE: [? Nomira. ?]
397:54 - DAVID J. MALAN: Minera?
397:55 - AUDIENCE: [? Nomira. ?]
397:55 - DAVID J. MALAN: [? Nomira. ?] Nice to meet.
397:57 - Come on over.
397:58 - So here we have for Nomira seven
lockers or an array of memory.
398:02 - And behind each of
these doors is a number.
398:03 - And the goal, quite simply,
is, given this array of memory
398:06 - as input, to return, true or false, is
the number I care about actually there?
398:12 - So suppose I care about the number 0.
398:14 - What would be the simplest,
most correct algorithm you could
398:18 - apply in order to find us the number 0?
398:22 - OK, try opening the first one.
398:25 - All right, and maybe just step
aside so the audience can see.
398:28 - I think you have not found 0 yet.
398:30 - OK, so keep the door open.
398:31 - Let's move on to your next choice.
398:34 - Second door, sure.
398:35 - AUDIENCE: [INAUDIBLE]
398:36 - DAVID J. MALAN: Oh, go ahead, second door.
398:37 - Let's keep it simple.
398:38 - Let's just move from left to
right, sort of searching our way.
398:41 - And what do you see there?
398:43 - Oh, 6, not 0.
398:44 - How about the next door?
398:48 - All right, also not working
out so well yet, but that's OK.
398:51 - If you want to go on to the
next, we're still looking for 0.
398:55 - All right, I see a 2.
398:57 - All right, it's not so good yet.
398:58 - Let's keep going.
398:59 - Next door.
399:01 - 2, 7-- no.
399:02 - OK, next door.
399:04 - No, that's a-- all
right, very well done.
399:10 - Oh.
399:13 - All right, so I kind of set you
up for a fairly slow algorithm,
399:16 - but let me just ask you
to describe what is it
399:18 - you did by following
the steps I gave you.
399:21 - AUDIENCE: I just went one
by one to each character.
399:24 - DAVID J. MALAN: You went one
by one to each character
399:26 - if you want to talk into here.
399:27 - So you went one by
one by each character.
399:29 - And would you say that algorithm
left or right is correct?
399:32 - AUDIENCE: No.
399:34 - DAVID J. MALAN: No?
399:35 - AUDIENCE: Or, yes, in the scenario.
399:37 - DAVID J. MALAN: OK, yes in this scenario.
399:38 - Why are you hesitating?
399:39 - What's going through your mind?
399:40 - AUDIENCE: Because it's not the
most efficient way to do it.
399:42 - DAVID J. MALAN: OK, good.
399:43 - So we see a contrast here
between correctness and design.
399:45 - I mean, I do think it was correct
because even though it was slow,
399:48 - you eventually found zero.
399:50 - But it took some number of steps.
399:52 - So in fact, this would be an algorithm.
399:54 - It has a name, called linear search.
399:56 - And, [? Nomira, ?] as you
did, you kind of walked along
399:59 - a line going from left to right.
400:01 - Now let me ask.
400:01 - If you had gone from right
to left, would the algorithm
400:04 - have been fundamentally better?
400:07 - AUDIENCE: Yes.
400:08 - DAVID J. MALAN: OK, and why?
400:09 - AUDIENCE: Because the zero is
here in the first scenario.
400:11 - But if it was like, the zero is in
the middle, it wouldn't have been.
400:15 - DAVID J. MALAN: Yeah, and so here is
where the right way to do things
400:19 - becomes a little less obvious.
400:20 - You would absolutely have
given yourself a better result
400:23 - if you would just happened
to start from the right
400:25 - or if I had pointed you
to start over there.
400:27 - But the catch is if I asked her to
find another number, like the number 8,
400:30 - well, that would have backfired.
400:31 - And this time, it
would have taken longer
400:33 - to find that number because
it's way over here instead.
400:35 - And so in the general case, going
left to right or, heck, right to left
400:40 - is probably as correct as you can
get because if you know nothing
400:43 - about the order of these numbers-- and
indeed, they seem to be fairly random.
400:47 - Some of them are smaller,
some of them are bigger.
400:49 - There doesn't seem to
be rhyme or reason.
400:51 - Linear search is about as good as you
can do when you don't know anything
400:55 - a priori about the numbers.
400:57 - So I have a little thank you gift
here, a little CS stress ball.
401:00 - Round of applause for
our first volunteer.
401:03 - Thank you so much.
401:08 - Let's try to formalize what I
just described as linear search
401:12 - because indeed, no matter which
end [? Nomira ?] had started on,
401:15 - I could have kind of
changed up the problem
401:17 - to make sure that it
appears to be running slow.
401:19 - But it is correct.
401:20 - If zero were among those doors,
she absolutely would have found it
401:23 - and indeed did.
401:24 - So let's now try to translate what
we did into what we might call again
401:30 - pseudo code as from week zero.
401:32 - So with pseudo code, we
just need a terse English
401:35 - like, or any language, syntax
to describe what we did.
401:38 - So here might be one formulation
of what [? Nomira ?] did.
401:40 - For each door, from left to right,
if the number is behind the door,
401:45 - return true.
401:46 - Else, at the very end of the program,
you would return false by default.
401:51 - And now you got lucky.
401:53 - And by the seventh door,
[? Nomira ?] had indeed
401:55 - returned true by saying,
well, there is the zero.
401:58 - But let's consider if this
pseudo code is now correct,
402:01 - an accurate translation.
402:02 - First of all, normally, when we've
seen ifs, we might see an if else.
402:06 - And yet down here, return
false is aligned with the for.
402:10 - Why did I not indent the return
false, or put another way,
402:14 - why did I not do if number is behind
door, return true, else return false?
402:21 - Why would that version of this
code have been problematic?
402:24 - Way in back.
402:25 - AUDIENCE: [INAUDIBLE]
402:34 - DAVID J. MALAN: OK, I'm not sure
it's because of redundancy.
402:37 - Let me go ahead and
just make this explicit.
402:39 - If I had instead done
else return false, I
402:42 - don't think it's so much redundancy
that I'd be worried about.
402:47 - Let me bounce somewhere else.
402:48 - Yeah, in front?
402:49 - AUDIENCE: Um, maybe
[INAUDIBLE] for the entire list
402:52 - after just checking one number.
402:54 - DAVID J. MALAN: Yeah, it would
be returning falls for--
402:56 - even though I'd only
looked at-- [? Nomira ?]
402:58 - had only looked at one element.
402:59 - And it would have been as though if
all of these doors were still closed,
403:02 - she opens this up and says, nope,
this is not zero, return false.
403:05 - That would give me an incorrect
result because obviously,
403:09 - at that stage in the algorithm,
she wouldn't have even looked
403:11 - through any of the other doors.
403:13 - So just the original indentation
of this, if you will,
403:16 - without the [? else, ?]
is correct because only
403:19 - if I get to the bottom of this
algorithm or the pseudo code does
403:23 - it make sense to conclude
at that point, once she's
403:26 - gone through all of the doors,
that nope, there's in fact--
403:29 - the number I'm looking for is,
in fact, not actually there.
403:32 - So how might we consider now the
running time of this algorithm?
403:37 - We have a few different
types of vocabulary now.
403:40 - And if we consider now how
we might think about this,
403:43 - let's start to translate it from
sort of higher level pseudo code
403:46 - to something a little lower level.
403:48 - We've been writing code using
n and loops and the like.
403:52 - So let's take this higher level
pseudo code and now just kind of
403:56 - get a middle ground
between English and C.
403:59 - Let me propose that we think about
this version of the same algorithm
404:03 - as being a little more pedantic.
404:05 - For i from 0 to n minus 1, if number
behind doors bracket i return true.
404:13 - Otherwise, at the end of
the program, return false.
404:15 - Now I'm kind of mixing
English and C here,
404:17 - but that's reasonable if the
reader is familiar with C
404:20 - or some similar language.
404:21 - And notice this pattern here.
404:23 - This is a way of just saying in pseudo
code, give myself a variable called i.
404:29 - Start at 0 and then just
count up to n minus 1.
404:33 - And recall n minus 1 is not one
shy of the end of the array.
404:37 - N minus 1 is the end of
the array because again, we
404:40 - started counting at 0.
404:41 - So this is a very common way
of expressing this kind of loop
404:45 - from the left all the way
to the right of an array.
404:48 - Doors I'm kind of implicitly
treating as the name of this array,
404:51 - like it's a variable from last
week that I defined as being
404:54 - an array of integers in this case.
404:56 - So doors bracket i means that
when i is 0, it's this location.
405:01 - When i is 1, it's this.
405:02 - When i is 7 or, more generally n minus--
405:06 - sorry, 6 or, more generally, n
minus 1, that's this location here.
405:10 - So same idea but a translation of it.
405:13 - So now let's consider what the
running time of this algorithm is.
405:17 - If we have this menu of possible
answers to this question,
405:20 - how efficient or inefficient
is this algorithm,
405:23 - let's take a look in the
context of this pseudo code.
405:26 - We don't even have to bother
going all the way to C.
405:28 - How do we go about analyzing
each of these steps?
405:32 - Well, let's consider this.
405:33 - This outermost loop here for i from
0 to n minus 1, that line of code
405:39 - is going to execute how many times?
405:42 - How many times will that loop execute?
405:45 - Let me give folks this
moment to think on it.
405:48 - How many times is that
going to loop here?
405:51 - Yeah, over there.
405:52 - AUDIENCE: [INAUDIBLE]
405:54 - DAVID J. MALAN: n times, right?
405:55 - Because it's from 0 to n minus 1.
405:58 - And if it's a little weird to
think in from 0 to n minus 1,
406:00 - this is essentially the same
mathematically as from 1 to n.
406:04 - And that's perhaps a
little more obviously more
406:06 - intuitively n total steps.
406:08 - So I might just make a note to myself
this loop is going to operate n times.
406:12 - What about these inner steps?
406:14 - Well, how many steps or seconds
does it take to ask a question?
406:17 - If the number behind--
406:19 - if the number you're looking
for is behind doors bracket i,
406:23 - well, as [? Nomira ?] did,
that's kind of like one step.
406:25 - So you open the door and boom.
406:27 - All right, maybe it's two steps,
but it's a constant number of steps.
406:30 - So this is some constant
number of steps.
406:32 - Let's just call it one for simplicity.
406:34 - How many steps or seconds
does it take to return true?
406:37 - I don't know exactly in
the computer's memory
406:40 - but that feels like a single step.
406:41 - Just return true.
406:43 - So if this takes one
step, this takes one step
406:46 - but only if the condition
is true, it looks
406:49 - like you're doing a constant
number of things n times.
406:53 - Or maybe you're doing
one additional step.
406:56 - So in short, the only thing
that really matters here
406:59 - in terms of the efficiency or
inefficiency of the algorithm
407:02 - is what are you doing again and again
and again because that's obviously
407:05 - the thing that's going to add up.
407:07 - Doing one thing or two things
a constant number of times?
407:10 - Not a big deal.
407:11 - But looping, that's going to add up over
time because the more doors there are,
407:16 - the bigger n is going to be and the
more steps that's going to take,
407:19 - which is all to say if you
were to describe roughly
407:22 - how many steps does this
algorithm take in big O notation,
407:27 - what might your instincts say?
407:30 - How many steps is this algorithm on the
order of given n doors or n integers?
407:35 - Yeah?
407:36 - AUDIENCE: [INAUDIBLE]
407:37 - DAVID J. MALAN: Say again?
407:38 - AUDIENCE: O n.
407:39 - DAVID J. MALAN: Big O of n.
407:40 - And indeed, that's going
to be the case here.
407:42 - Why?
407:42 - Because you're essentially,
at the end of the day,
407:44 - doing n things as an upper
bound on running time.
407:48 - And that's, in fact, what
exactly what happened
407:50 - with [? Nomira. ?] She had
to look at all n lockers
407:52 - before finally getting
to the right answer.
407:55 - But what if she got
lucky and the number we
407:58 - were looking for was not
at the end of the array
408:01 - but was at the beginning of the array?
408:04 - How might we think about that?
408:06 - Well, have a nomenclature for this
too, of course-- omega notation.
408:09 - Remember, omega notation
is a lower bound.
408:12 - So given this menu of possible running
times for lower bounds on an algorithm,
408:18 - what might the omega notation be
for [? Nomira's ?] linear search?
408:23 - AUDIENCE: Omega 1.
408:24 - DAVID J. MALAN: Omega of 1, and why that?
408:26 - AUDIENCE: [INAUDIBLE]
408:28 - DAVID J. MALAN: Right, because if
just by chance she gets lucky
408:30 - and the number she's looking
for is right there where
408:33 - she begins the algorithm, that's it.
408:35 - It's one step.
408:36 - Maybe it's two steps if you have
to unlock the door and open it,
408:39 - but it's a constant number of steps.
408:41 - And the way we describe
constant number of steps
408:43 - is just with a single number like 1.
408:45 - So the omega notation for linear
search might be omega of 1
408:49 - because in the best case, she might just
get the number right from the get go.
408:53 - But in the worst case, we need to
talk about the upper bound, which
408:56 - might indeed be big O of n.
408:58 - So again there's this way
now of talking symbolically
409:01 - about best cases and worst cases
or lower bounds and upper bounds.
409:06 - Theta notation, just
as a little trivia now,
409:09 - is it applicable based on the
definition I gave earlier?
409:12 - AUDIENCE: [INAUDIBLE]
409:13 - DAVID J. MALAN: OK, no, because you
only take out the theta notation
409:15 - when those two bounds,
upper and lower, happen
409:18 - to be the same for shorthand
notation, if you will.
409:21 - So it suffices here to talk about
just big O and omega notation.
409:25 - Well, what if we are a
little smarter about this?
409:28 - Let me go ahead and sort
of semi-secretly here
409:31 - rearrange these numbers.
409:32 - But first, how about
one other volunteer?
409:34 - One other volunteer-- you have
to be comfortable with your mask
409:37 - and your being on the internet.
409:39 - How about over here?
409:42 - Yes, you want to come on down?
409:44 - All right, come on down.
409:45 - And don't look at what I'm
doing because I'm going to--
409:52 - take your time and
don't look up this way
409:55 - because I need a moment to
rearrange all of the numbers.
409:58 - And actually, if you could stay
right there before coming up,
410:01 - just an awkward few seconds
while I finish hiding the numbers
410:05 - behind these doors for you.
410:06 - AUDIENCE: [INAUDIBLE]
410:08 - DAVID J. MALAN: I will be right with you.
410:10 - Actually, if-- do you want to
warm up the crowd for a moment
410:15 - and I'll be right back?
410:16 - So you want to introduce yourself?
410:18 - AUDIENCE: Yeah, hi, guys.
410:19 - I'm Rave.
410:22 - Yeah!
410:27 - DAVID J. MALAN: All right,
I think I am ready.
410:30 - Thank you for stalling there.
410:32 - AUDIENCE: Of course.
410:33 - DAVID J. MALAN: And I didn't catch your name.
410:34 - What was your name?
410:34 - AUDIENCE: I'm Rave.
410:35 - DAVID J. MALAN: I'm sorry?
410:35 - AUDIENCE: Rave, like a party.
410:36 - DAVID J. MALAN: Rave, OK.
410:37 - Nice to meet.
410:38 - Come on over.
410:39 - So Rave has kindly volunteered now.
410:41 - And I'm going to give you an
additional advantage this time.
410:43 - AUDIENCE: OK.
410:43 - DAVID J. MALAN: Unbeknownst to you, I
now took numbers behind the doors,
410:47 - but I sorted them for you.
410:48 - So they're not in the same
random order like they
410:50 - were for [? Nomira. ?]
You now have the advantage
410:52 - to know that the numbers are
sorted from small to big.
410:55 - AUDIENCE: OK.
410:55 - DAVID J. MALAN: Given that, and given perhaps
what we talked about in week zero
410:59 - with the phone book, where might you
propose we begin the story this time?
411:03 - With which locker?
411:05 - AUDIENCE: To find zero?
411:06 - DAVID J. MALAN: Let's find
number six this time.
411:07 - Let's make things interesting.
411:09 - AUDIENCE: OK.
411:10 - I'll start in the middle.
411:11 - DAVID J. MALAN: OK, so the middle.
411:12 - There's seven total.
411:13 - So--
411:13 - AUDIENCE: OK.
411:14 - DAVID J. MALAN: --that would be right here.
411:14 - Go ahead.
411:15 - Open that up.
411:16 - And you find, sadly, the number five.
411:18 - So what do you know now?
411:20 - AUDIENCE: I know to go up.
411:21 - DAVID J. MALAN: OK.
411:22 - AUDIENCE: OK.
411:22 - DAVID J. MALAN: All right, and
just to keep it uniform,
411:24 - just like I did, I opened to the
right half of the phone book.
411:27 - AUDIENCE: Yes.
411:27 - DAVID J. MALAN: Let's keep it similar.
411:29 - Yeah.
411:29 - AUDIENCE: All right.
411:30 - DAVID J. MALAN: All right,
and, uh, a little too far
411:32 - even though I know you
wanted to go one over.
411:34 - AUDIENCE: All good, all good.
411:35 - DAVID J. MALAN: And now we're
going to go which direction?
411:37 - AUDIENCE: Over here in the middle.
411:38 - DAVID J. MALAN: Right, and
voila, the number six.
411:40 - All right, so very nicely done.
411:44 - A little stressful for you as well.
411:46 - Thank you again.
411:47 - So here we see by nature
of the locker door
411:50 - still being open sort of an
artifact of the greater efficiency,
411:54 - it would seem, of this
algorithm because now that Rave
411:57 - was given the assumption that
these numbers are sorted from small
412:00 - on the left to large on the right,
she was able to apply that same divide
412:04 - and conquer algorithm from week zero
which we're now going to give a name--
412:07 - binary search.
412:09 - And simply by starting in
the middle and realizing,
412:13 - OK, too small, then by going to
the right half and realizing, oh,
412:17 - went a little too far, then by
going to the left half, which,
412:20 - Rave able to find in just
three steps instead of seven
412:24 - the number six in this case that
we were actually searching for.
412:28 - So you can see that this would
seem to be more efficient.
412:32 - Let's consider for just
a moment is it correct.
412:35 - If I had used different numbers but
still sorted them from left to right,
412:40 - would it still have
worked this algorithm?
412:43 - You're nodding your head.
412:44 - Can I call on you?
412:45 - Like, why would it still
have worked, do you think?
412:48 - AUDIENCE: [INAUDIBLE]
412:51 - DAVID J. MALAN: Yeah, so
so long as the numbers
412:52 - are always in the same
order from left to right
412:55 - or, heck, they could even be in reverse
order, so long as it's consistent,
412:58 - the decisions that Rave was making--
if greater than, else, if less than--
413:02 - would guide us to the
solution no matter what.
413:05 - And it would seem to take fewer steps.
413:07 - So if we consider now the
pseudo code for this algorithm,
413:10 - let's take a look how we
might describe binary search.
413:12 - So binary search we might
describe with something like this.
413:15 - If the number is behind the middle
door, which is where Rave began,
413:19 - then we can just return true.
413:21 - Else if the number is
less than the middle door,
413:24 - so if six is less than whatever
is behind the middle door,
413:27 - then Rave would have
searched the left half.
413:29 - Else if the number is
greater than the middle door,
413:32 - Rave would have searched the right half.
413:34 - Else, if there are no doors-- and
we'll see in a moment why I put
413:38 - this up top just to keep things clean.
413:40 - If there's no doors, what should Rave
have presumably returned immediately
413:43 - if I gave her no lockers to work with?
413:47 - Just returned false.
413:48 - But this is an important
case to consider
413:50 - because if in the process of
searching by locker by locker,
413:54 - we might have whittled down the
problem from seven doors to three doors
413:58 - to one door to zero
doors-- and at that point,
414:01 - we might have had no
doors left to search.
414:03 - So we have to naturally have a
scenario for just considering
414:06 - if there were no doors.
414:07 - So it's not to say that maybe I don't
give Rave any doors to begin with.
414:11 - But as she divides and
divides and divides,
414:13 - if she runs out of lockers to ask those
questions of-- or a few weeks ago,
414:17 - if I ran out of phone book
pages to tear in half,
414:20 - I too might have had to
return false as in this case.
414:23 - So how can we now describe
this a little more like C
414:26 - just to give ourselves a variable
to start thinking and talking about?
414:30 - Well, I might talk about
doors as being an array.
414:33 - And so if I want to express the middle
door, I could just, in pseudo code,
414:36 - say doors bracket middle.
414:38 - I'm assuming that
someone has done the math
414:40 - to figure out what the middle door
is, but that's easy enough to do.
414:43 - And then doors, if the
number we're looking for
414:46 - is less than doors bracket
middle, then search door
414:49 - zero through doors middle minus 1.
414:53 - So again, this is a more pedantic way of
taking what's a pretty intuitive idea--
414:57 - search the left half,
search the right half--
415:00 - but start to now describe it in
terms of actual indices or indexes
415:07 - like we did with our array notation.
415:08 - The last scenario, of
course, is if the number
415:10 - is greater than the
door's bracket middle,
415:13 - then Rave would have wanted to
search the middle door plus 1--
415:16 - so 1 over-- through doors n minus 1--
415:21 - through n minus 1.
415:22 - So again, just a way of sort of
describing a little more syntactically
415:25 - what it is that's going on.
415:27 - So how might we translate
this now into big O notation?
415:31 - Well, in the worst case, how many
steps total might Rave's binary search
415:38 - algorithm have taken?
415:39 - Given seven doors or given
more generically n doors,
415:43 - how many times could she go left or go
right before finding herself with one
415:47 - or no doors left?
415:50 - What's the way to think about that?
415:53 - Yeah, in the middle?
415:53 - AUDIENCE: Log n.
415:55 - DAVID J. MALAN: Log n.
415:56 - So there's log n again.
415:57 - And even if you're not feeling wholly
comfortable with your logarithm
416:00 - still, pretty much in programming and
in computer science more generally,
416:03 - any time we talk about some algorithm
that's dividing and conquering
416:06 - in half, in half, in half,
or any other multiple,
416:10 - it's probably involving
logarithms in some sense.
416:12 - And log base n essentially
refers to the number
416:15 - of times you can divide n by 2 until
you bottom out at just a single door
416:21 - or equivalently zero doors left.
416:23 - So log n.
416:24 - So we might say that indeed,
binary search is in big O of log n
416:28 - because the door that Rave
opened last, this one,
416:32 - happened to be three doors away.
416:34 - And actually, if you do
the math here, that roughly
416:37 - works out to be exactly that case.
416:38 - If we add one, that's sort of out
of seven doors or roughly eight,
416:43 - we were able to search it
in just three total steps.
416:46 - What about omega notation, though?
416:48 - Like, in the best case, Rave
might have gotten lucky.
416:51 - She opened the door, and there it is.
416:53 - So how might we describe a lower bound
on the running time of binary search.
416:59 - Yeah.
416:59 - AUDIENCE: 1.
417:00 - DAVID J. MALAN: Say again?
417:01 - AUDIENCE: 1.
417:02 - DAVID J. MALAN: Omega of 1.
417:03 - So here too, we see that in some cases
binary search and linear search, eh,
417:08 - like, they're pretty equivalent.
417:10 - And so this is why sometimes
compelling to consider both the best
417:15 - case in the worst case
because honestly, in general,
417:17 - who really cares if you just
get lucky once in a while
417:19 - and your algorithm is super fast?
417:21 - What you probably care about
is what's the worst case.
417:24 - How long are my users--
417:25 - how long am I going to be sitting
there watching some spinning hourglass
417:29 - or beach ball trying to give myself
an answer to a pretty big problem?
417:35 - Well, odds are, you're going to
generally care about big O notation.
417:38 - So indeed, moving
forward, will generally
417:39 - talk about the running time of
algorithms often in terms of big O,
417:43 - a little less so in terms of omega.
417:45 - But understanding the
range can be important
417:47 - depending on the nature of the data that
you're going to actually be given here.
417:53 - All right let me pause and
see if there is any questions.
417:58 - Any questions here?
418:00 - Yes, thank you.
418:03 - AUDIENCE: So this method
is clearly more efficient,
418:05 - but it requires that the information
is all compiled in a certain order.
418:10 - How do you ensure that you
can compile information
418:14 - in a particular order at scale?
418:15 - DAVID J. MALAN: Yeah, it's
a really good question.
418:17 - And if I can generalize it, how do
you guarantee that you can do this
418:20 - at scale, which algorithm is better?
418:22 - I've sort of led us down
this road of implying
418:25 - that Rave's second
algorithm, binary search,
418:27 - is better because it's so much faster.
418:29 - It's log of n in the worst
case instead of big O of n.
418:33 - But Rave was given an advantage when
she came up here in that the doors were
418:37 - already sorted.
418:38 - And so that sort of
invites the question,
418:40 - well, given a whole
bunch of random data,
418:42 - either a small data set or, heck,
something Google sized with millions,
418:45 - billions of pieces of data,
should you sort it first
418:48 - from smallest to
largest and then search?
418:51 - Or should you just dive right
in and search it linearly?
418:56 - Like, how might you think about that?
418:57 - If you are Google, for
instance, and you've
418:59 - got millions, billions of web pages,
should they just go with linear search
419:03 - because it's always going to work
even though it might be slow?
419:06 - Or should they invest the time
in sorting all of that data--
419:09 - we'll see how in a bit--
419:10 - and then search it more efficiently?
419:13 - Like, how do you decide
between those options?
419:15 - AUDIENCE: If you're sorting
the data, then wouldn't you
419:18 - have to go through all of the data?
419:20 - DAVID J. MALAN: Yeah, if you had
to sort the data first--
419:23 - and we don't yet formally
know how to do this.
419:25 - But obviously, as humans, we
could probably figure it out.
419:27 - You do have to look at
all of the data anyway.
419:29 - And so you're sort of wasting your
time if you're sorting it only
419:33 - then to go in search it.
419:35 - But maybe it depends a bit more.
419:37 - Like, that's absolutely
right, and if you're just
419:39 - searching for one thing in life,
then that's probably a waste of time
419:42 - to sort it and then search it because
you're just adding to the process.
419:46 - But what's another scenario
in which you might not
419:48 - worry about that whereby it might
make sense to sort it and then search?
419:53 - Yeah.
419:54 - AUDIENCE: [INAUDIBLE] you can go
and use the other values as a way
420:00 - to find out what's happening.
420:02 - DAVID J. MALAN: Yeah, exactly.
420:03 - So if your problem is a
Google-like problem where
420:05 - you have more than just one user
who's searching for more than just one
420:08 - website page, probably you
should incur the cost up front
420:11 - and sort the whole thing because
every subsequent request thereafter
420:14 - is going to be faster,
faster, faster because it's
420:17 - going to [INAUDIBLE] algorithm of binary
search, binary search, binary search
420:20 - that's going to add up
to be way fewer steps
420:23 - than doing linear search multiple times.
420:25 - So again, kind of
depends on the use case
420:27 - and kind of depends on
how important it is.
420:29 - And this happens even
in real world contexts.
420:32 - I think back always to graduate
school, when I was writing some code
420:35 - to analyze some large data set.
420:36 - And honestly, it was actually
easier at the time for me
420:39 - to write pretty inefficient
but hopefully correct
420:42 - code because you know what?
420:43 - I could just go to sleep for eight hours
and let it analyze this really big data
420:47 - set.
420:47 - I didn't have to bother writing
more complex code to sort it just
420:50 - to run it more efficiently.
420:51 - Why?
420:52 - Because I was the only user, and I
only needed to run these queries once.
420:55 - And so this was kind of
a reasonable approach,
420:58 - reasonable until I woke up eight
hours later and my code was incorrect.
421:01 - And now I had to spend another eight
hours rerunning it after fixing it.
421:05 - But even there, you
see an example where,
421:07 - what is your most precious resource?
421:09 - Is it time to run the code?
421:11 - Is it time to write the code?
421:13 - Is it the amount of memory
the computer is using?
421:15 - These are all resources we'll start
to talk about because it really
421:18 - depends on what your goals are.
421:20 - Any questions, then, on
upper bounds, lower bounds,
421:23 - or each of these two
searches, linear or binary?
421:26 - Yeah.
421:27 - AUDIENCE: So just, when you're
calculating running time,
421:29 - does the sorting step
count for that time?
421:34 - DAVID J. MALAN: When analyzing running
time, does the sorting step count?
421:37 - If you want it to if you actually do it.
421:39 - At the moment, it did not apply.
421:41 - I just gave Rave the luxury of
knowing that the data was sorted.
421:45 - But if I really wanted to charge
her for the amount of time
421:48 - it took to find that number six,
I should have added the time
421:52 - to sort plus the time to search.
421:54 - And in fact, that's
a road we'll go down.
421:55 - Why don't we go ahead and
pace ourselves as before?
421:57 - Let's take a 10 minute break here.
421:58 - And when we come back, we'll
write some actual code.
422:01 - So we've seen a couple of searches--
linear search and binary search, which,
422:05 - to be fair, we saw back in week zero.
422:06 - But let's actually translate at
least one of those now to some code
422:10 - using this building block from
last week where we can actually
422:13 - define an array if we want, like an
array of integers called numbers.
422:17 - So let me switch over to VS Code here.
422:18 - Let me go ahead and start
a program called numbers.c.
422:22 - And in numbers.c, let me go ahead here.
422:25 - And how about let's include
our familiar header files?
422:29 - So css50.h.
422:31 - I'll include standardio.h that we can
get input and print input if we want.
422:35 - And now I'm going to go ahead
and give myself int main void.
422:38 - No command line arguments today.
422:40 - So I'll leave that as void.
422:41 - And I'm going to go
ahead and give myself
422:43 - an array of how about seven numbers?
422:45 - So I'll call it int number 7.
422:48 - And then I can fill
this array with numbers.
422:50 - Like, numbers brackets 0 can be
the number 4, and numbers bracket 1
422:54 - could be the number 6, and numbers
bracket 2 can be the number 8.
422:58 - And this is the same list that
we saw with [? Nomira ?] a bit
423:01 - ago where it was 4, then 6, then 8.
423:03 - But you know what?
423:04 - There's actually another
syntax I can show you here.
423:06 - If you know in advance
in a C program that you
423:09 - want an array of certain values and you
know therefore how many of those values
423:14 - you want, you can actually do this
little trick using curly braces.
423:17 - You can say, don't worry
about how big this is.
423:20 - It's going to be implicit by
way of these curly braces.
423:23 - Here, I can do 4, 6, 8, 2,
7, 5, 0, close curly brace.
423:28 - So it's a somewhat new
use of curly braces.
423:31 - But this has the effect of giving
me an array called numbers inside
423:35 - of which are a whole bunch of integers.
423:36 - How many?
423:37 - The compiler can infer it from what's
ever inside these curly braces.
423:41 - And it seems to be of
size 1, 2, 3, 4, 5, 6, 7.
423:44 - And all seven elements will be
initialized with 4, 6, 8, 2, 7, 5, 0
423:49 - respectively.
423:50 - So just a minor optimization
code wise to tighten up
423:53 - what would have otherwise been
like eight separate lines of code.
423:56 - Now let's go ahead and implement
linear search, as we called it.
423:59 - And you can do this in a bunch of
ways, but I'm going to do it like this.
424:02 - For int i get 0, i is
less than 7 i plus plus.
424:09 - Then inside of my loop, I'm
going to ask the question, well,
424:12 - if the numbers at location i
equals equals, as we asked of
424:17 - [? Nomira, ?] the number 0, then I'm
going to go ahead and do something
424:21 - like printf found backslash n.
424:25 - And then I'm going to return 0.
424:27 - Just because of last week's
discussion of returning
424:30 - a value for main when all is well,
I'm going to return 0 by convention
424:34 - just to signal that indeed,
I found what I'm looking for.
424:37 - Otherwise, on what line do I want to
go and add a printf, like, not found
424:44 - and return something other than 0?
424:46 - Right, I don't think I want an else
here per our pseudo code earlier.
424:51 - So on what line would you prefer I
sort of insert a default scenario
424:55 - of not found and I'll return an error?
424:58 - Yeah, over here?
425:00 - [INTERPOSING VOICES]
425:03 - DAVID J. MALAN: Nice.
425:04 - So at the end of the
for loop because you
425:06 - want to give the
program or our volunteer
425:07 - earlier a chance to go through all
of the doors, all of the numbers.
425:11 - But if you go through the whole
thing, through the whole loop,
425:14 - at the very end, you probably just
want to conclude not found backslash n
425:17 - and then return
something like positive 1
425:20 - just to signify that an error happened.
425:22 - And again, this was a
minor detail last week.
425:24 - Any time main is successful, the
programming convention is to return 0.
425:28 - That means all as well.
425:30 - And if something goes wrong, like you
didn't find what you're looking for,
425:33 - you might return something other than
0, like positive 1, maybe positive 2,
425:37 - or even negative numbers if you want.
425:39 - All right, well, let me
go ahead and save this.
425:41 - Let me do make numbers.
425:43 - Hopefully no syntax errors.
425:45 - All good so far.
425:46 - dot slash numbers, enter.
425:49 - All right, and it's found,
as I would hope it would be.
425:51 - And just as a little check, let's
search for something that's definitely
425:55 - not there, like the number negative 1.
425:59 - Let me go ahead and recompile
the code with make numbers.
426:02 - Let me rerun the code
with dot slash numbers
426:04 - and hopefully-- whew, OK, not found.
426:06 - So proof by example seems
to be working correctly.
426:08 - But let's make things a
little more interesting now.
426:11 - Right now, I'm using just
an array of integers.
426:14 - Let me go ahead and introduce
maybe an array of strings instead.
426:18 - And maybe this time, I'll store a
bunch of names and not just integers
426:21 - but actual strings of names.
426:23 - So how might I do this?
426:24 - Well, let me go back to my code here.
426:26 - I'm going to switch us over to
maybe a file called names.c.
426:30 - And in here, I'll go
ahead and include cs50.h.
426:34 - I'll include standardio.h.
426:37 - And I'm going to go ahead and
for now include a new friend
426:41 - from last week, string.h, which gives
me some string-related functionality.
426:44 - Int main void because I'm not going
to bother with any command line
426:47 - arguments for now.
426:48 - And now if I want an array of strings,
I could do something like this--
426:53 - string names bracket 7.
426:56 - And then I could start
doing like before.
426:58 - Names bracket 0 could be someone
like Bill, and names bracket 1
427:01 - could be someone like
Charlie and so forth.
427:05 - But there's this new
improvement I can make.
427:08 - Let me just let the compiler figure
out how many names there are.
427:11 - And using curly braces, I'll do Bill
and then Charlie and then Fred and then
427:16 - George and then Ginny and then Percy and
then Ron if there's the pattern there.
427:24 - All right, so now I have
these seven names as strings.
427:27 - Let's do something similar.
427:28 - So for int, i get 0.
427:32 - i is less than 7 as before,
i plus plus as before.
427:35 - And inside of the, loop lets this
time check for the string in question,
427:39 - and suppose we're searching
for Ron arbitrarily.
427:41 - He is there, so we should
eventually find him.
427:44 - Let me go ahead and say if names bracket
i equals quote unquote Ron, then inside
427:51 - of my if condition, I'm going to
say printf found just like before.
427:55 - And I'm going to return 0
just because all is well.
427:57 - And I'm going to take your
advice from the get go this time
428:00 - and, at the end of the loop, print out
not found because if I get this far,
428:04 - I have not printed found, and
I have not returned already.
428:08 - So I'm just going to go ahead and
return 1 after printing not found.
428:12 - All right, let me go ahead and
cross my fingers as always.
428:14 - Make names this time.
428:17 - And it doesn't seem
to like my code here.
428:20 - This is perhaps a new
error that you might not
428:22 - have seen yet in names.c line 11.
428:25 - So that's this line
here, my if condition.
428:28 - Result of comparison against a
string literal is unspecified.
428:32 - Use an explicit string
comparison function instead.
428:34 - I mean, that's kind of a mouthful,
and the first time you see it,
428:37 - you're probably not going to
know how to make sense of that.
428:39 - But it does kind of draw our
attention to something being awry
428:43 - with the equality checking
here, with equal equals and Ron.
428:48 - And here's where again
we've been telling
428:50 - sort of a white lie for
the past couple of weeks.
428:53 - Strings are a thing in C. Strings
are a thing in programming.
428:57 - But recall from last
week, I did disclaim
428:59 - there's no such thing
as a string data type
429:01 - technically because it's not
a primitive in the way an int
429:05 - and a float and a bool are that are
sort of built into the language.
429:08 - You can't just use equation
equals to compare two strings.
429:12 - You actually have to use
a special function that's
429:15 - in this header file we talked
briefly about last week.
429:18 - In that header file was
string length or strlen.
429:21 - But there's other
functions instead as well.
429:23 - Let me, in fact, go ahead
and open up the manual pages.
429:27 - And if we go to string.h--
429:30 - let me scroll down a bit.
429:32 - In string.h you can perhaps infer
what function will probably take
429:37 - the place of equals equals for today.
429:40 - What do we want to use?
429:41 - Yeah.
429:42 - AUDIENCE: Strcmp?
429:43 - DAVID J. MALAN: So strcmp, S-T-R-C-M-P,
which apparently compares two strings.
429:47 - And if I click on that,
we'll see more information.
429:49 - And indeed, if I click on strcmp,
we'll see under the synopsis
429:53 - that, OK, I need to use the CS50 header
file and string.h, as I already have.
429:58 - Here is its prototype,
which is telling me
430:02 - that strcmp takes two
strings, S1 and S2, that
430:05 - are presumably going to be compared.
430:07 - And it returns an integer,
which is interesting.
430:09 - So let's read on.
430:10 - The description of this function is
that it compares two strings case
430:14 - sensitively.
430:15 - So uppercase or lowercase
matters, just FYI.
430:18 - And then let's look it
the return value here.
430:20 - The return value of this function
returns an int less than 0
430:25 - if S1 comes before S2, 0 if S1 is the
same as S2, or an int greater than 0
430:32 - if S1 comes after S2.
430:35 - So the reason that this function
returns an integer and not just a
430:39 - bool, true or false, is
that it actually will
430:41 - allow us to sort these things
eventually because if you can tell me
430:45 - if two strings come in this order or
in this order or they're the same,
430:49 - you need three possible return values.
430:51 - And a bool, of course,
only gives you two,
430:53 - but an int gives you like 4 billion
even though we just need the 3.
430:56 - So 0 or a positive number or a negative
number is what this function returns.
431:01 - And the documentation goes on to explain
what we mean by ASCIIbetical order.
431:06 - Recall that capital A
is 65, capital B is 66,
431:09 - and it's those underlying
ASCII or Unicode
431:12 - numbers that a computer uses to figure
out whether something comes before it
431:15 - or after it like in the dictionary.
431:17 - But for our purposes now,
we only care about equality.
431:20 - So I'm going to go ahead and do this.
431:22 - If I want to compare names
bracket i against Ron,
431:26 - I use stir compare or strcmp, names
bracket i comma, quote unquote, Ron.
431:33 - So it's a little more
involved than actually
431:35 - using equals equals, which
does work for integers, longs,
431:40 - and certain other values.
431:41 - But for strings, it turns out we
need to use a more powerful function.
431:45 - Why?
431:45 - Well, last week, recall
what a string really is.
431:47 - It's an array of characters.
431:50 - And so whereas you can use equals
equals for single characters,
431:54 - strcmp, as we'll
eventually see, is going
431:56 - to compare multiple characters for us.
431:58 - There's more logic there.
431:59 - There's a loop needed, and that's
why it comes with the string library.
432:03 - But it doesn't just work out of
the box with equals equals alone.
432:06 - That would literally be comparing
two things, not two arrays of things.
432:10 - And we'll come back to
this next week as to what's
432:12 - really going on under the hood.
432:14 - So let me go ahead and fix one
bug that I just realized I made.
432:18 - I want to check if the return
value of str compare is equal to 0
432:23 - because per the documentation,
that meant they're the same.
432:27 - All right, let me go ahead
and make names this time.
432:30 - Now it compiles.
432:31 - Dot slash names, Enter, found.
432:34 - And just as a sanity check, let's
check someone outside the family.
432:39 - Searching now for Hermione
after recompiling the code,
432:43 - after rerunning the code.
432:44 - And she's not, in fact, found.
432:46 - So here's just a similar
implementation of linear search
432:49 - not for integers this time
but instead for strings,
432:53 - the subtlety really being we need
a helper function, str compare,
432:57 - to actually do the legwork for us of
comparing two arrays of characters.
433:02 - All right, questions on either of these
implementations-- yeah, in the middle?
433:05 - AUDIENCE: So, if I do [INAUDIBLE]
433:07 - DAVID J. MALAN: Ah, good question.
433:08 - If I had not fixed what I claimed was
a mistake earlier and I did this--
433:12 - and we saw an example of
this last week, actually.
433:15 - If a function returns an integer,
be it negative or positive or 0,
433:21 - when you get back 0, the
expression, the Boolean expression,
433:25 - will be considered false.
433:26 - So 0 equals false always.
433:29 - If a function returns any positive
number, or any negative number,
433:33 - that's going to be
interpreted as true even
433:37 - if it's positive or negative, whether
it's 1, negative 1, 2, negative 2.
433:41 - And so if I did this, this
would be saying the opposite.
433:45 - So if I were to say this, if str compare
of names bracket i and Hermione, that's
433:51 - implicitly like saying this does not
equal 0, or it means sort of is true,
433:57 - but you don't want to check
for true because, again, we're
434:00 - comparing integers here.
434:01 - So the reason I did 0
here in this case is
434:05 - that it explicitly checks for the return
value that means they're the same.
434:08 - And yeah.
434:09 - Follow up?
434:10 - AUDIENCE: [INAUDIBLE]
434:15 - DAVID J. MALAN: Yes, you might
not have seen this yet,
434:17 - but you can express the
equivalent because if you
434:20 - want to check if this is
false, you can actually
434:24 - use an exclamation point,
known as a bang in programming,
434:27 - that inverts the meaning.
434:29 - So false becomes true,
true becomes false.
434:32 - So this would be another
way of expressing it.
434:34 - This is arguably a worse design, though,
because the documentation explicitly
434:39 - says you should be checking
for 0 or a positive value
434:43 - or a negative value, and this
little trick, while correct,
434:46 - and I think you can make a reasonable
case for it, sort of hides that detail.
434:49 - And I would argue instead
for the first way,
434:51 - checking for equals equals 0 instead.
434:53 - And if that's a little
subtle, not to worry.
434:55 - We'll come back to little syntactic
tricks like that before long.
435:00 - Other questions on linear
search in these two forms.
435:05 - Is there another hand or hands?
435:06 - Two hands?
435:08 - No?
435:08 - OK, just holler if I missed.
435:10 - So let's now actually take
this one step further.
435:12 - Suppose that we want to write a
program that maybe implements something
435:15 - a little more like a phone book that
has both names and numbers and not
435:19 - just integers but actual phone numbers.
435:21 - Well, we could escalate
things like this.
435:23 - We could now have two arrays-- one
called names, one called numbers.
435:27 - And I'm going to use
strings for the numbers now,
435:29 - the phone numbers, because
in most communities,
435:32 - phone numbers might have dashes,
pluses, parentheses, so something
435:36 - that really looks more like a string
even though we call it a phone number.
435:39 - Probably don't want to use an int lest
we throw away those kinds of details.
435:42 - So let me switch back to VS Code here,
and let's do one more program, this one
435:47 - in a file called phonebook.c.
435:49 - And now let me go ahead and do the same.
435:51 - Let me include cs50.h.
435:52 - Let me include standardio.h,
and let me include string.h.
435:58 - I'm going to again do int main void.
436:01 - And then inside of my program, I'm
going to give myself two arrays--
436:05 - the efficient way this time.
436:06 - String names will be
just two of us this time.
436:09 - How about Carter and me?
436:12 - And then I'll give myself--
oops, typo already.
436:15 - If I want this to be an array, I
don't have to specify the number.
436:18 - The compiler can count for me.
436:19 - But I do need the square brackets.
436:21 - Then for numbers, I'm again going to
use a string array specifying with
436:28 - the curly braces that how about
Carter can be at 1-617-495-1000.
436:33 - And how about my own number here--
436:35 - 1-949-468-- oh pattern appearing--
436:39 - 2750 will be mine.
436:42 - Why mine?
436:42 - Well, I'm just kind of lined things up.
436:44 - So Carter's number is
apparently first in this array,
436:47 - and I'm claiming that he'll be
first in this array, respectively.
436:51 - I, David, will be the first--
the second in the names array
436:53 - and second in the numbers array.
436:56 - If you want to have a little fun
with programming, feel free to text
436:59 - or call me some time at that number.
437:01 - So now let's actually use
this data in some way.
437:05 - Let's go ahead and actually search
for my own name and number here.
437:08 - So let me do.
437:09 - For int i, get 0.
437:11 - There's two of us this time-- so i less
than 2 and then i plus plus as before.
437:16 - And now I'm going to practice
what I preached earlier,
437:18 - and I'm going to use str compare
to find my name in this case.
437:22 - And I'm going to say if strcmp of names
bracket i equals quote unquote David
437:29 - and that equals 0,
meaning they're the same,
437:33 - then just as before, I'm going to
go ahead and print something out.
437:35 - But this time, I'm going to
make the program more useful
437:37 - and not just say found or not found.
437:39 - Now I'm implementing a phone book, like
the contacts app on iOS or Android.
437:43 - So I'm going to say something
like, quote unquote, found percent
437:46 - s backslash n and then actually
plug in numbers bracket i
437:53 - to correspond to the
current name bracket i.
437:56 - And then I'll return 0 as before.
437:58 - And then down here if we get
all the way through the loop
438:00 - and David's not there for some reason,
I'm going to print as before not found
438:04 - and then return 1.
438:05 - So let me go ahead and compile this
with make phone dot slash phonebook,
438:10 - and it seems to have found the number.
438:13 - So this code I'm going
to claim is correct.
438:17 - It's kind of stupid because I've
just made a phone book or a contacts
438:20 - app that only supports two people.
438:22 - They're only going to be me and Carter.
438:23 - This would be like downloading
the contacts app on a phone
438:26 - and you can only call
two people in the world.
438:28 - There's no ability to
add names or edit things.
438:30 - That, of course, could come later
using get string or something else.
438:33 - But for now for the
sake of discussion, I've
438:35 - just hardcoded two
names and two numbers.
438:37 - But for what it does, I
claim this is correct.
438:40 - It's going to find me
and print out my number.
438:43 - But is it well-designed?
438:45 - Let's start to now consider if
we're not just using arrays,
438:49 - but are we using them, well?
438:52 - We started to use them last week,
but are we using them well this week?
438:55 - And what might I even mean by
using an array well or designing
438:59 - this program well?
439:01 - Any critiques or concerns
with why this might not
439:06 - be the best road for us
to be going down when
439:08 - I want to implement something like a
phone book with pieces of information?
439:12 - It seems all too vulnerable
to just mistakes.
439:15 - For instance, if I screw up the actual
number of names in the names array
439:19 - such that it's now more or less than
is in the numbers array or vise versa,
439:24 - it feels like there's not a tight
relationship between those pieces
439:27 - of data, and it's just sort of
is trusting on the honor system
439:31 - that any time I use names bracket i
that it lines up with numbers bracket i.
439:37 - And that's fine.
439:38 - If you're the one writing
the code, you're probably
439:40 - not going to really screw this up.
439:42 - But if you start collaborating
with someone else or the program
439:44 - is getting much, much longer, the
odds that you or your colleagues
439:48 - remember that you're sort of just
trusting that names and numbers line up
439:52 - like this is going to fail eventually.
439:54 - Someone's not going to realize that,
and just, the code is going to break.
439:57 - And you're going to start out putting
the wrong numbers for names, which
440:00 - is to say it'd be much nicer if
we could somehow couple these two
440:05 - pieces of data, names and numbers,
a little more tightly together so
440:09 - that you're not just trusting that
these two independent variables, names
440:13 - and numbers, have this kind of
relationship with themselves.
440:16 - So let's consider how
we might solve this.
440:19 - A new feature today that we'll introduce
is generally known as a data structure.
440:23 - In C, we have the ability to
invent our own data types,
440:27 - if you will-- data types
that the authors of C decades
440:30 - ago just didn't envision
or just didn't think
440:32 - were necessary because we can implement
them ourselves-- similar to Scratch
440:36 - just as you could create
custom puzzle pieces,
440:38 - or in C, you can create
custom functions.
440:40 - So in C, can you create
your own types of data
440:45 - that go beyond the built in ints
and floats and even strings?
440:49 - You can make, for instance, a
person data type or a candidate data
440:54 - type in the context of
elections or a person data type
440:57 - more generically that might
have a name and a number.
441:00 - So how might we do this?
441:02 - Well, let me go here and propose
that if we want to define a person,
441:07 - wouldn't it be nice if we
could have a person data type,
441:11 - and then we could have
an array called people?
441:13 - And maybe that array is our
only array with two things
441:17 - in it, two persons in it.
441:19 - But somehow, those data
types, these persons,
441:22 - would have both a name and a
number associated with them.
441:25 - So we don't need two separate arrays.
441:27 - We need one array of persons,
a brand new data type.
441:31 - So how might we do this?
441:33 - Well, if we want every
person in the world
441:35 - or in this program to
have a name and a number,
441:37 - we literally right out
first those two data types.
441:40 - Give me a string called name.
441:42 - Give me a string called
number semicolon, after each.
441:45 - And then we wrap that,
those two lines of code,
441:48 - with this syntax, which at first
glance is a little cryptic.
441:51 - It's a lot of words all of a sudden.
441:52 - But typedef is a new keyword today
that defines a new data type.
441:57 - This is the C key word that
lets you create your own data
442:00 - type for the very first time.
442:02 - Struct is another related key word that
tells the compiler that this isn't just
442:07 - a simple data type, like an int or a
float renamed or something like that.
442:11 - It actually is a structure.
442:13 - It's got some dimensions to it, like
two things in it or three things in it
442:17 - or even 50 things inside of it.
442:19 - The last word down here is the name
that you want to give your data type,
442:23 - and it weirdly goes
after the curly braces.
442:26 - But this is how you invent
a data type called person.
442:30 - And what this code is
implying is that henceforth,
442:33 - the compiler clang will know that a
person is composed of a name that's
442:38 - a string and a number that's a string.
442:41 - And you don't have to worry
about having multiple arrays now.
442:44 - You can just have an array
of people moving forward.
442:48 - So how can we go about using this?
442:50 - Well, let me go back to
my code from before where
442:52 - I was implementing a phone book.
442:53 - And why don't we enhance the
phone book code a little bit
442:56 - by borrowing some of that new syntax?
442:58 - Let me go to the top of
my program above main
443:01 - and define a type that's
a structure or a data
443:04 - structure that has a name inside of
it and that has a number inside of it.
443:08 - And the name of this new structure
again is going to be called person.
443:12 - Inside of my code now, let me go ahead
and delete this old stuff temporarily.
443:17 - Let me give myself an array
called people of size 2.
443:21 - And I'm going to use the
non-terse way to do this.
443:25 - I'm not going to use the curly braces.
443:26 - I'm going to more pedantic spell out
what I want in this array of size 2
443:31 - at location 0, which is the
first person in an array
443:35 - because you always start counting at 0.
443:37 - I'm going to give that person
a name of quote unquote Carter.
443:40 - And the dot is admittedly one
new piece of syntax today too.
443:44 - The dot means go inside
of that structure
443:46 - and access the variable called
name and give it this value Carter.
443:50 - Similarly, if I'm going
to give Carter a number,
443:52 - I can go into people bracket 0 dot
number and give that the same thing
443:57 - as before plus 1-617-495-1000.
444:02 - And then I can do the
same for myself here--
444:04 - people bracket-- where should I go?
444:08 - OK, one because again, two elements.
444:10 - But we started counting at zero.
444:11 - Bracket name equals quote unquote David.
444:13 - And then lastly, people bracket 1
dot number equals quote unquote plus
444:18 - 1-949-468-2750.
444:24 - So now if I scroll
down here to my logic,
444:27 - I don't think this part
needs to change too much.
444:30 - I'm still, for the sake of discussion,
going to iterate 2 times from i
444:35 - is 0 on up to but not through 2.
444:37 - But I think this line
of code needs to change.
444:41 - How should I now refer to the
i-th person's name as I iterate?
444:49 - What should I compare quote
unquote David to this time?
444:52 - Let me see.
444:53 - On the end here?
444:54 - AUDIENCE: People bracket i dot name.
444:57 - DAVID J. MALAN: Yeah, people
bracket i dot name.
444:59 - Why?
444:59 - Because people is the name of the array.
445:01 - Bracket i is the i-th person that we're
iterating over in the current loop--
445:04 - first zero, then one, maybe
higher if it had more people.
445:07 - Then dot is our new syntax for
going inside of a data structure
445:10 - and accessing a variable therein
which in this case is name.
445:14 - And so I can compare
David just as before.
445:16 - So it's a little more verbose, but
now arguably this is a better program
445:21 - because now these people are full
fledged data types unto themselves.
445:26 - There's no more honor
system inside of my loop
445:29 - that this is going to line
up because in just a moment,
445:31 - I'm going to fix this one last
remnant of the previous version.
445:34 - And if I can call back on
you again, what should I
445:36 - change numbers bracket i to this time?
445:39 - AUDIENCE: [INAUDIBLE] dot number.
445:45 - DAVID J. MALAN: Dot number, exactly.
445:46 - So gone is the honor
system that just assumes
445:49 - that bracket i in this array lines up
with bracket i in this other array.
445:52 - Now why?
445:53 - There's only one array.
445:54 - It's an array called people.
445:56 - The things it stores are persons.
445:58 - A person has a name and a number.
446:00 - And so even though it's kind
of marginal admittedly given
446:02 - that this is a short program and
given that this kind of made things
446:05 - look more complicated
at first glance, we're
446:07 - now laying the foundation for just
a better design because you really
446:10 - can't screw up now the
association of names
446:13 - with numbers because every person's
name and number is, so to speak,
446:17 - encapsulated inside
of the same data type.
446:21 - And that's a term of art in CS.
446:22 - Encapsulation means to
encapsulate-- that is, contain--
446:26 - related pieces of information.
446:28 - And thus, we have a person that
encapsulates two other data types, name
446:34 - and number.
446:34 - And this just sets
the foundation for all
446:36 - of the cool stuff we've talked
about and you use every day.
446:39 - What is an image?
446:40 - Well, recall that an image is a bunch
of pixels or dots on the screen.
446:43 - Every one of those dots
has RGB values associated
446:46 - with it-- red, green, and blue.
446:48 - You could imagine now creating
a structure in C probably where
446:52 - maybe you have three values,
three variables-- one called red,
446:55 - one called green, one called blue.
446:57 - And then you could name the
thing not person but pixel.
447:00 - And now you could store in C three
different colors-- some amount of red,
447:04 - some green, some blue-- and collectively
treat it as the color of a pixel.
447:08 - And you could imagine doing something
similar perhaps for video or music.
447:11 - Music, you might have three
variables-- one for the musical note,
447:14 - the duration, the loudness of it.
447:17 - And you can imagine coming up with
your own data type for music as well.
447:20 - So this is a little low level.
447:21 - We're just using like a
familiar contacts application.
447:24 - But we now have the way in code
to express most any type of data
447:28 - that we might want to implement
or discuss ultimately.
447:32 - So any questions now on struct
or defining our own types,
447:37 - the purposes for which are to use
arrays but use them more responsibly
447:42 - now in a better design but
also to lay the foundation
447:45 - for implementing cooler and cooler
stuff per our week zero discussion?
447:50 - Yeah.
447:50 - AUDIENCE: What's the [INAUDIBLE]
447:52 - DAVID J. MALAN: What's the difference
between this and an object in an object
447:55 - oriented language?
447:55 - So slight side note, C
is not object-oriented.
447:58 - Languages like Java and C++ and
others which you might have heard
448:02 - of, programmed yourself, had friends
program in, are object oriented
448:05 - languages in those languages they have
things called classes or objects which
448:09 - are interrelated.
448:10 - And objects can store not
just data, like variables.
448:14 - Objects can also store functions, and
you can kind of sort of do this in C.
448:18 - But it's not sort of conventional.
448:20 - In C, you have data
structures that store data.
448:24 - In languages like Java and C+, you have
objects that store data and functions
448:29 - together.
448:29 - Python is an object-oriented
language as well.
448:32 - So we'll see this issue in a few weeks,
but let me wave my hands at it for now.
448:35 - Yeah.
448:36 - AUDIENCE: Could you
use this [INAUDIBLE]??
448:38 - DAVID J. MALAN: Yes.
448:38 - Could you use this struct to
redefine how an int is defined?
448:41 - Short answer, yes.
448:42 - We talked a couple of times
now about integer overflow.
448:46 - And most recently, you might have seen
me mention the bug in iOS and Mac OS
448:50 - that was literally related
to an int overflow.
448:52 - That's the result of ints only
storing 4 bytes or 32 bits
448:57 - or even as long as 64 bits or 8 bytes.
449:00 - But it's finite.
449:01 - But if you want to implement
some financial software
449:03 - or some scientific or
mathematical software that
449:06 - allows you to count way bigger
than a typical int or a long,
449:10 - you could imagine John coming
up with your own structure.
449:13 - And in fact, in some
languages there is a structure
449:15 - called big int, which allows you
to express even bigger numbers.
449:19 - How?
449:20 - Well, maybe you store inside of
a big ant an array of values.
449:24 - And you somehow allow yourself
to store more and more bits
449:27 - based on how high you
want to be able to count.
449:29 - So in short, yes.
449:30 - We now have the ability now to do
most anything we want in the language
449:34 - even if it's not built in for us.
449:36 - Other questions.
449:37 - AUDIENCE: [INAUDIBLE]
449:43 - DAVID J. MALAN: Could you define a name
and a number in the same line?
449:45 - Sort of.
449:46 - It starts to get
syntactically a little messy,
449:48 - so I did it a little more
pedantic line by line.
449:51 - Good question.
449:52 - Over here.
449:52 - AUDIENCE: [INAUDIBLE] function
you use for the function
449:57 - at the bottom of the [INAUDIBLE].
449:59 - Could you do something
like that [INAUDIBLE]??
450:03 - DAVID J. MALAN: Prototypes--
you have to do A and C. You
450:05 - have to define anything you're going
to use or declare anything you're going
450:09 - to use before you actually use it.
450:11 - So it is deliberate that I put it
at the top of my code in this file.
450:15 - Otherwise, the compiler would not know
what I mean by person when I first
450:19 - use it here on what's line 14.
450:22 - So it has to come first, or it has to
be put into something like a header file
450:25 - so that you include it at
the very top of your code.
450:29 - Other questions over here.
450:31 - Yeah.
450:32 - AUDIENCE: [INAUDIBLE]
450:37 - DAVID J. MALAN: Yeah, good
question, and we'll
450:39 - come back to this later in the term when
we talk about SQL, a database language,
450:42 - and storing things in actual databases.
450:44 - Generally speaking, even though we
humans call things phone numbers,
450:48 - or in the US, we have social security
numbers, those types of numbers
450:52 - often have other punctuation in it,
like dashes, parentheses, pluses,
450:56 - and so forth.
450:57 - You could not store any of that syntax
or that punctuation inside of an int.
451:01 - You could only store numbers.
451:03 - So one motivation for
using a string is just
451:05 - I can store whatever the human wanted
me to store, including parentheses
451:08 - and so forth.
451:10 - Another reason for
storing things as strings,
451:13 - even if they look like
numbers, is in the context
451:15 - of zip codes in the United States.
451:17 - Again, we'll come back to this.
451:18 - But long story short--
years ago, actually--
451:21 - I was using Microsoft
Outlook for my email client.
451:24 - And eventually I switched to Gmail.
451:25 - And this is like 10 plus years ago now.
451:27 - And Outlook at the time lets you export
all of your contacts as a CSV file--
451:31 - Comma Separated Values.
451:33 - More on that in the weeks to come too.
451:34 - And that just means I
could download a text
451:36 - file with all of my friends and
family and their numbers inside of it.
451:40 - Unfortunately, I open that same CSV
file with Excel, I think, at the time
451:44 - just to kind of spot
check it and see if what's
451:46 - in there was what it was expected.
451:47 - And I must have instinctively hit,
like, Command or Control-S to save it.
451:51 - And Excel at least has this habit
of sort of reformatting your data.
451:54 - If things look like numbers,
it treats them as numbers.
451:56 - And Apple Numbers does this too.
451:58 - Google Spreadsheets
does this to nowadays.
452:00 - But long story short, I then imported
my mildly saved CSV file into Gmail.
452:07 - And now 10 plus years later, I'm still
occasionally finding friends and family
452:11 - members whose zip codes are in
Cambridge, Massachusetts 2138,
452:17 - which is missing the 0 because
we here in Cambridge are 02138.
452:20 - And that's because I
treated or I let Excel
452:23 - treat what looks like a number
as an actual number or int,
452:26 - and now leading zeros become a
problem because mathematically, they
452:29 - mean nothing, but in the
mail system, they do--
452:33 - sending envelopes and such.
452:34 - All right, other final questions here.
452:36 - AUDIENCE: [INAUDIBLE]
452:39 - DAVID J. MALAN: Yeah, so could I have
used a 2D or two dimensional
452:42 - array to solve the problem
earlier of having just one array?
452:47 - Yes, but one, I would argue
it's less readable, especially
452:51 - as I get lots of names and numbers.
452:53 - And two, that too is also kind
of relying on the honor system.
452:56 - It would be all too easy to omit some
of the square brackets in the two
452:59 - dimensional array.
453:00 - So I would argue it too is not
as good as introducing a struct.
453:04 - More on that down the road.
453:05 - Two dimensional arrays just means
arrays of arrays, as you might infer.
453:10 - All right, so now that
we have this ability
453:12 - to store different types of data
like contacts in a phone book,
453:16 - having names and
addresses, let's actually
453:18 - take a step back and
consider how we might now
453:21 - solve one of the original problems by
actually sorting the information we're
453:26 - given in advance and considering,
per our discussion earlier, just how
453:30 - costly, how time consuming is
that because that might tip
453:33 - the scales in favor of sorting,
then searching, or maybe just
453:37 - not sorting and only searching.
453:39 - It'll give us a sense of just
how expensive, so to speak,
453:42 - sorting something actually is.
453:44 - Well, what's the
formulation of this problem?
453:46 - It's the same thing as week zero.
453:48 - We've got input to sort.
453:49 - We want it to be output as sorted.
453:51 - So for instance, if we're
taking unsorted input as input,
453:54 - we want the sorted output as
the result. More concretely,
453:58 - if we've got numbers like these--
453:59 - 63852741, which are just
randomly arranged numbers--
454:04 - we want to get back out 12345678.
454:08 - So we just want those
things to be sorted.
454:10 - So again, inside of
the black box here is
454:12 - going to be one or more algorithms
that actually gets this job done.
454:17 - So how might we go about doing this?
454:20 - Well, just to vary things a bit
more, I think we have a chance here
454:23 - for a bit more audience participation.
454:25 - But this time, we need
eight people if we may.
454:28 - All of you have to be comfortable
appearing on the internet.
454:30 - OK, so this is actually quite
convenient that you're all quite close.
454:33 - How about 1, 2, 3, 4, 5, 6, 7--
454:37 - oh, OK, and someone volunteering
their friend-- number eight.
454:41 - Come on down.
454:42 - Come on down.
454:43 - And if you could, I'm
going to set things up.
454:45 - If you all could join Valerie,
my colleague over there,
454:47 - to give you a prop to use here,
we'll go ahead in just a moment
454:53 - and try to find some numbers at hand.
454:59 - In just a moment, each of our volunteers
is going to be representing an integer.
455:05 - And that integer is initially
going to be in unsorted order.
455:09 - And I claim that using an algorithm,
step by step instructions,
455:13 - we can probably sort these folks in
at least a couple of different ways.
455:18 - So they're in wardrobe right now just
getting their very own Harvard T-shirts
455:22 - with a Jersey number on it, which will
then represent an element of our array.
455:31 - Give us just a moment to finish
getting the attire ready.
455:35 - They're being handed
a shirt and a number.
455:40 - And let me ask the
audience for just a moment.
455:42 - As we have these numbers up here on the
screen, these numbers too are unsorted.
455:47 - They're just in random order.
455:48 - And let me ask the audience.
455:49 - How would you go about sorting
these eight numbers on the screen?
455:55 - How would you go about sorting these?
455:57 - Yeah, what are your thoughts?
455:58 - AUDIENCE: [INAUDIBLE] the number
at the end, the following number.
456:04 - DAVID J. MALAN: OK.
456:05 - AUDIENCE: The following number is
bigger, then I keep it as it is.
456:08 - DAVID J. MALAN: OK.
456:09 - AUDIENCE: If not, then [INAUDIBLE].
456:11 - DAVID J. MALAN: OK, so just
to recap, you would start
456:13 - with one of the numbers on the end.
456:15 - You would look to the number to
the right or to the left of it,
456:17 - depending on which end you start at.
456:18 - And if it's out of order, you
would just start to swap things.
456:21 - And that seems reasonable.
456:22 - There's a whole bunch
of mistakes to fix here
456:24 - because things are pretty out of order.
456:26 - But probably, if you start to
solve small problems at a time,
456:29 - you can achieve the end result of
getting the whole thing sorted.
456:32 - Other instincts, if you were
just handed these numbers, how
456:35 - you might go about sorting them?
456:38 - How might you?
456:39 - Yeah, in the back.
456:40 - AUDIENCE: [INAUDIBLE]
456:44 - DAVID J. MALAN: OK, I like that.
456:46 - So to recap there, find the smallest
one first and put it at the beginning,
456:50 - if I heard you correctly.
456:51 - And then presumably, you could do
that again and again and again.
456:54 - And that would seem to give you
a couple of different algorithms.
456:57 - And if you all are attired here--
457:00 - do you want to come
on up if you're ready?
457:03 - We had some [? felt ?] volunteers too.
457:05 - Come on over.
457:07 - So if you all would like
to line yourselves up
457:09 - facing the audience in
exactly this order-- so
457:12 - whoever is number zero
should be way over here,
457:14 - and whoever is number five
should be way over there.
457:18 - Feel free to distance as much as you'd
like and scooch a little with this way
457:21 - if you could.
457:22 - OK, all right.
457:24 - And make a little more room.
457:25 - So seven-- let's see.
457:26 - 5, 2, 7, 4--
457:28 - AUDIENCE: [INAUDIBLE]
457:29 - DAVID J. MALAN: 4, hopefully 1.
457:31 - Yeah, keep them to the side.
457:32 - OK, 1, 6, and there we go--
457:35 - 3.
457:36 - Come on over, three.
457:36 - I was looking for you.
457:38 - All right, so here, we have
an array of eight numbers--
457:41 - eight integers if you will.
457:42 - And do you want to each say
a quick hello to the group?
457:45 - AUDIENCE: Hello, I'm Quinn.
457:47 - Go [INAUDIBLE].
457:49 - AUDIENCE: Hi, everyone.
457:50 - I'm [INAUDIBLE].
457:52 - AUDIENCE: Hey, I'm Mitchell.
457:53 - AUDIENCE: Hi, I'm Brett.
457:54 - And also, go [INAUDIBLE].
457:57 - AUDIENCE: I'm Hannah.
457:57 - Go [INAUDIBLE].
457:59 - AUDIENCE: Hi, I'm Matthew.
458:00 - Go [INAUDIBLE]
458:02 - AUDIENCE: Hi, I'm Miriam.
458:03 - Go Winthrop.
458:05 - AUDIENCE: Hi, I'm
Celeste, and go Strauss.
458:07 - DAVID J. MALAN: Wonderful.
458:08 - Well, welcome all to the stage,
and let's just visualize,
458:11 - perhaps organically, how you
eight would solve this problem.
458:13 - So we currently have the numbers
0 through 7 quite out of order.
458:16 - Could you go ahead and just
yourselves from 0 through 7?
458:20 - AUDIENCE: Thank you.
458:25 - DAVID J. MALAN: OK, so what did they just do?
458:28 - OK, yes.
458:29 - First of all, yes, very well done.
458:34 - How would you describe
what they just did?
458:37 - Well, let's do this.
458:38 - Could you go back into
that order on the screen--
458:40 - 52741630?
458:44 - And could you do exactly
what you just did again?
458:47 - Sort yourselves.
458:52 - All right, what did--
458:53 - OK, yes.
458:53 - Well done again.
458:58 - All right, so admittedly, there's kind
of a lot going on because each of you,
459:01 - except number four, are doing something
in parallel all at the same time.
459:05 - And that's not really how
a computer typically works.
459:07 - Just like a computer can only look at
one memory location, at one locker,
459:11 - at a time, so can a computer only move
one number at a time-- sort of opening
459:15 - a locker, checking what's
there, moving it as needed.
459:18 - So let's try this more methodically
based on the two audience suggestions.
459:21 - If you all could randomize
yourself again to 52741630,
459:26 - let's take the second of
those approaches first.
459:29 - I'm going to look at these numbers.
459:30 - And even though I as the human
can obviously see all the numbers
459:33 - and I just kind of have the
intuition for how to fix this,
459:35 - we got to be more methodical
because eventually, we've
459:37 - got to translate this to
pseudo code and then code.
459:39 - So let me see.
459:40 - I'm going to search for, as you
proposed, the smallest number.
459:43 - And I'm going to start
from left to right.
459:45 - I could do it right to left, but left
to right just tends to be convention.
459:48 - All right, 5 at this moment is
the smallest number I've seen.
459:51 - So I'm going to remember that
in a variable, if you will.
459:54 - Now I'm going to take one more step--
459:55 - 2.
459:56 - OK, 2 I'm going to compare to the
variable in mind, obviously smaller.
459:59 - I'm going to forget about 5 and only
now remember 2 as the now smallest
460:03 - elements.
460:04 - 7, nope-- I'm going to ignore that
because it's not smaller than the 2
460:07 - I have in mind.
460:08 - 4, 1-- OK, I'm going to
update the variable in mind
460:11 - because that's indeed smaller.
460:12 - Now obviously, we the humans
know that's getting pretty small.
460:15 - Maybe it's the end.
460:16 - I have to check all values to see
if there's something even smaller
460:19 - because 6 is not, 3 is not, but 0 is.
460:22 - And what's your name again?
460:23 - AUDIENCE: Celeste.
460:24 - DAVID J. MALAN: Celeste.
460:25 - Where should Celeste or number 0 go
according to this proposed algorithm?
460:32 - All right, I'm seeing a lot of this.
460:33 - So at the beginning of the array,
so before doing this for real,
460:37 - let's have you pop out in front.
460:38 - And could you all shift
and make room for Celeste?
460:42 - Is this a good idea to have all
of them move or equivalently
460:46 - move everything in the array
to make room for Celeste
460:48 - and number 0 over there?
460:51 - No, probably not.
460:52 - That felt like a lot of work.
460:53 - And even though it happened pretty
quickly, that's like seven steps
460:56 - to happen just to move her in place.
460:58 - So what would be marginally
smarter perhaps--
461:00 - a little more efficient, perhaps?
461:03 - What's that?
461:03 - AUDIENCE: Swapping.
461:04 - DAVID J. MALAN: Swapping.
461:04 - What do you mean by swap?
461:05 - AUDIENCE: Replacing swaps.
461:07 - DAVID J. MALAN: OK, replace two values.
461:08 - So if you want to go back to where
you were, one step Over, number 5,
461:12 - he's not in the right place.
461:13 - He's got to move eventually.
461:15 - So you know what?
461:15 - If that's where Celeste belongs,
why don't we just swap 5 and 0?
461:18 - So if you want to go ahead and
exchange places with each other.
461:21 - Notice what's just happened.
461:22 - The problem I'm trying to
solve has gotten smaller.
461:25 - Instead of being size
8, now it's size 7.
461:28 - Now granted, I moved 5 to
another wrong location.
461:31 - But if these numbers
started off randomly,
461:33 - it doesn't really matter where 5 goes
until we get him into the right place.
461:37 - So I think we've improved.
461:38 - And now if I go back, my loop
is sort of coming back around.
461:41 - I can ignore Celeste and make this
a seven step problem and not eight
461:46 - because I know she's in the right place.
461:47 - 2 seems to be the smallest.
461:49 - I'll remember that.
461:50 - Not 7, not 4--
461:51 - 1 seems to be the smallest.
461:53 - Now I know as a human this
should be my next smallest.
461:57 - But why, intuitively, should
I keep going, do you think?
462:02 - I can't sort of optimize as a
human and just say, number 1,
462:05 - let's get you into the right place.
462:07 - I still want to check the whole array.
462:08 - Why?
462:09 - Yeah.
462:10 - AUDIENCE: Perhaps there's another 1.
462:12 - DAVID J. MALAN: Maybe there's
another 1, and that
462:14 - could be another problem altogether.
462:16 - Other thoughts?
462:17 - Yeah.
462:17 - AUDIENCE: Could be another 0
462:18 - DAVID J. MALAN: There could
be another 0 indeed,
462:20 - but I did go through
the list once, right?
462:22 - And I kind of know there isn't.
462:24 - Your thoughts?
462:24 - AUDIENCE: You don't know that
every value is represented.
462:27 - So maybe there's a [INAUDIBLE] You
just don't know what kind of data
462:31 - you're working with.
462:32 - DAVID J. MALAN: Yeah, I don't
necessarily know what is there.
462:34 - And honestly, I only stipulated earlier
that I'm using one variable in my mind.
462:39 - I could use two and remember the
two smallest elements I've seen.
462:42 - I could use three variables, four.
462:44 - But then I'm going to start to use
a lot of space in addition to time.
462:47 - So if I've stipulated that I only have
one variable to solve this problem,
462:51 - I don't know anything
more about these elements
462:53 - because the only thing I'm
remembering at this moment
462:55 - is number 1 is the
smallest element I've seen.
462:57 - So I'm going to keep going.
462:58 - 6?
462:59 - Nope.
462:59 - 3?
462:59 - Nope.
463:00 - 5?
463:00 - Nope.
463:01 - OK, I know that number
1, and your name was--
463:03 - AUDIENCE: Hannah.
463:03 - DAVID J. MALAN: --Hannah is
the next smallest element.
463:06 - I could have everyone move
over to make room, but nope.
463:08 - 2?
463:09 - You know, even though you're
so close to where I want you,
463:11 - I'm just going to keep it
simple and swap you two.
463:13 - So granted, I've made the
problem a little worse.
463:15 - But on average, I could get
lucky too and just pop number 2
463:19 - into the right place.
463:20 - Now let me just accelerate this.
463:22 - I can now ignore Hannah and Celeste,
making the problem size 6 instead of 8.
463:26 - So it's getting smaller.
463:28 - 7 is the smallest.
463:29 - Nope, now 4 is--
463:30 - 2 is the smallest.
463:32 - Still 2, still 2, still 2.
463:34 - So let's go ahead and swap 2 and 7.
463:37 - And now I'll just kind of
orchestrate it verbally.
463:40 - 4, you're about to have to do something.
463:42 - So we now have 4, 7, 6 3, 5.
463:46 - OK, 3-- could you swap with 4?
463:48 - All right, now we have 7, 6, 4, 5.
463:52 - OK, 4, could you swap with 7?
463:54 - Now we have 6, 7, 5.
463:57 - 5, could you swap with 6?
463:59 - And now we have 7, 6.
464:01 - 6, would you swap at 7?
464:02 - And now perhaps round of applause.
464:04 - They've sorted themselves.
464:05 - OK, hang on there one minute.
464:09 - So we'll do this one other approach.
464:11 - And my God, that felt so much
slower than the first approach,
464:14 - but that's, one, because I was
kind of providing a long voiceover.
464:17 - But two, we were doing one thing at a
time whereas the first time, you guys
464:22 - had the luxury of moving
like eight different CPUs--
464:25 - brains, if you will-- were all
operating at the same time.
464:28 - And computers like that exist.
464:29 - If you have a computer with
multiple cores, so to speak,
464:32 - that's like having a
computer that technically
464:34 - can do multiple things at once.
464:35 - But software typically, at least
as we've written it thus far,
464:38 - can only do one thing at a time.
464:40 - So in a bit, we'll add
up all of these steps.
464:42 - But for now, let's take
one other approach.
464:44 - If you all could reorder
yourselves like that--
464:46 - 52741630-- let's take
the other approach that
464:51 - was recommended by just fixing small
problems and see where this gets us.
464:54 - So we're back in the original order.
464:57 - 5 and 2 are clearly out of order.
464:59 - So you know what?
464:59 - Let's just bite this problem off now.
465:01 - 5 and 2, could you swap?
465:03 - Now let me take a next step.
465:04 - 5 and 7, I think you're OK.
465:06 - There's a gap, yes, but that
might not be a big deal.
465:09 - 7 and 4-- problem.
465:10 - Let's have you swap.
465:12 - OK, 7 and 1, let's have you swap.
465:15 - 7 and 6, let's have you swap.
465:18 - 7 and 3, you swap.
465:20 - 7 and 0, you swap.
465:22 - Now let me pause for just a moment.
465:23 - Still not sorted.
465:25 - So I'm clearly not done.
465:26 - But have I improved the problem?
465:29 - Right, I can't see-- like
before, I can't optimize like
465:32 - before because 0 is obviously not here.
465:34 - So unless they're still way back there,
so it's not like I've gone from 8 steps
465:38 - to 7 to 6 just yet.
465:40 - But have I made any improvements?
465:42 - AUDIENCE: Yes.
465:42 - DAVID J. MALAN: Yes.
465:43 - In what sense is this improved?
465:45 - What's a concrete thing you
could point to is better?
465:50 - Yeah.
465:50 - AUDIENCE: Sorted the highest number.
465:52 - DAVID J. MALAN: I've sorted the
highest number, which is indeed 7.
465:55 - And conversely, if you prefer, Celeste
is one step closer to the beginning.
465:59 - Now worst case, Celeste is going to
have to move one step on each iteration.
466:04 - So I might need to do this
thing like n total times
466:06 - to move her all the way over.
466:08 - But that might work out OK.
466:09 - Let me see.
466:10 - 2 and 5, you're good.
466:12 - 5 and 4, swap you.
466:13 - 5 and 1, let's swap you.
466:15 - 5 and 6, you're good.
466:16 - 6 and 3, let's swap you.
466:18 - 6 and 0, let's swap you.
466:21 - 6 and 7, you're good.
466:22 - And I think now--
466:23 - notice that the high
values, as you noted,
466:25 - are sort of bubbling up, if you
will, to the end of the list.
466:28 - 2 and 4, you're good.
466:29 - 4 and 1, let's swap.
466:31 - 4 and 5, good.
466:32 - 5 and 3, swap.
466:33 - 5 and 0, swap.
466:36 - 5, 6, 7, of course, are good.
466:37 - So now you can sort of see
the problem resolving itself.
466:40 - And let's just do this part now faster.
466:42 - 2 and 1, 2 and 4.
466:44 - OK, 4 and 3, 4 and 0.
466:48 - All right, now 1 and 2,
2, and 3, and 0, and good.
466:53 - So we do have some optimization there.
466:54 - We don't need to keep going
because those all are sorted.
466:57 - 1 and 2, you're good.
466:58 - 2 and 0, all right, done.
467:01 - 1 and 0-- and big round
of applause in closing.
467:04 - OK, so thank you all.
467:09 - We need the puppets back,
but you can keep the shirts.
467:11 - Thank you for volunteering here.
467:13 - Feel free to make your
way exits left or right.
467:16 - And let's see if,
thanks to our volunteers
467:18 - here, we can't now formalize a little
bit what we did on both passes here.
467:24 - I claim that the first algorithm
our volunteers kindly acted out
467:28 - is what's called selection sort.
467:30 - And as the name implied, we selected
the smallest elements again and again
467:35 - and again, working our
way from left to right,
467:37 - putting Celeste into the right place,
and then continuing with everyone else.
467:42 - So selection sort, as
it's formally called,
467:45 - can be described, for instance,
with this pseudo code here--
467:48 - 4i from 0 to n minus 1.
467:51 - And again, why this?
467:52 - This is just how talk about arrays.
467:54 - The left end is 0, the right end
is n minus 1 where in this case,
467:59 - n happened to be eight people.
468:01 - So that's 0 through 7.
468:03 - So for i from 0 to n
minus 1, what did I do?
468:06 - I found the smallest number between
numbers bracket i and numbers bracket
468:11 - n minus 1.
468:13 - It's a little cryptic at
first glance, but this
468:15 - is just a very pseudo
code-like way of saying
468:18 - find the smallest element
among all eight volunteers
468:22 - because if i starts at 0 and n minus
1 never changes because there's always
468:27 - 8, 8 people, so 8 minus
1 is 7, this first
468:31 - says find the smallest number
between numbers bracket 0
468:34 - and numbers bracket 7, if you will.
468:37 - Then what do I do?
468:38 - Swap the smallest number
with numbers bracket i.
468:42 - So that's how we got Celeste from
over here all the way over there.
468:45 - We just swapped those two values.
468:47 - What then happens next
in this pseudo code?
468:50 - i, of course, goes from 0 to 1.
468:52 - And that's the technical
way of saying now
468:54 - find the smallest element among
the 7 remaining volunteers,
468:58 - ignoring Celeste this time because she
was already in the correct location.
469:01 - So the problem went
from size 8 to size 7.
469:04 - And if we repeat, size 6,
5, 4, 3, 2, 1, until boom,
469:07 - it's all done at the very end.
469:10 - So this is just one way of
expressing in pseudo code what
469:13 - we did a little more organically
and a formalization of what someone
469:17 - volunteered out in the audience.
469:19 - So if we consider, then, the
efficiency of this algorithm,
469:24 - maybe abstracting it away
now as a bunch of doors
469:27 - where the left most again is always
0, the right most is always n minus 1,
469:31 - or equivalently, the second to last
is n minus 2, the third to last
469:34 - is n minus 3 where n might
be 8 or anything else,
469:38 - how do we think about or quantify
the running time of selection sort?
469:43 - Big O of what?
469:46 - I mean, that was a lot
of steps to be adding up.
469:49 - It's probably more than n, right,
because I went through the list
469:53 - again and again.
469:54 - It was like n plus n
minus 1 plus n minus 2.
469:59 - Any instincts here?
470:01 - We got like the whole
team in the orchestra now.
470:04 - Let me propose we think about it this
way with just a bit of formula, say.
470:09 - So the first time, I had to
look at n different volunteers.
470:13 - n was 8 in this case, but generically,
I looked at all eight numbers
470:17 - in order to decide who was the smallest.
470:19 - And sure enough, Celeste
was at the very end.
470:21 - She happened to be all
the way to the right.
470:23 - But I only knew that once I looked
at all 8 or all n volunteers.
470:27 - So that took me n steps first.
470:30 - But once the list was swapped
into the right place, then
470:33 - my problem with size n minus 1,
and I had n minus 1 other people
470:37 - to look through.
470:38 - So that's n minus 1 steps.
470:40 - Then after that, it's n minus 2 plus
n minus 3 plus n minus 4 plus dot dot
470:44 - dot until I had one final step.
470:45 - And it's obvious that I only
have one human left to consider.
470:48 - So we might wave our hands at
this with a little ellipsis
470:51 - and just say dot dot dot
plus 1 for the final step.
470:54 - Now what does this actually equal?
470:56 - Well, this is where you
might think back on, like,
470:57 - your high school math
or physics textbook that
470:59 - has a little cheat sheet at the end
that shows these kinds of recurrences.
471:03 - That happens to work
out mathematically to be
471:05 - n times n plus 1 all divided by 2.
471:09 - That's just what that recurrence,
that series, actually adds up to.
471:13 - So if you take on faith that
that math is correct, let's
471:15 - just now multiply this
out mathematically.
471:19 - That's n squared plus n divided by 2 or
n squared divided by 2 plus n over 2.
471:26 - And here's where we're starting
to get annoyingly into the weeds.
471:29 - Like, honestly, as n gets really
large, like a million doors or integers
471:34 - or a billion web pages in Google search
engine, honestly, which of these terms
471:39 - is going to matter the
most mathematically
471:41 - if n is a really big number?
471:43 - Is n squared divided by
2 the dominant factor,
471:46 - or is n divided by 2
the dominant factor?
471:48 - AUDIENCE: n squared.
471:50 - DAVID J. MALAN: Yeah, n squared.
471:51 - I mean, no matter what n
is-- and the bigger it is,
471:53 - the bigger raising it to
the power 2 is going to be.
471:56 - So you know what?
471:57 - Let's just wave our hands at this
because at the end of the day,
472:00 - as n gets really large, the dominant
factor is indeed that first one.
472:04 - And you know what?
472:04 - Even the divided 2, as I claimed earlier
with our two phone book examples, where
472:08 - the two straight lines if you
keep zooming out essentially
472:11 - looked the same when n is large enough,
let's just call this on the order of n
472:16 - squared.
472:16 - So that is to say a computer scientist
would describe bubble sort as taking
472:21 - on the order of n squared steps.
472:24 - That's an oversimplification.
472:25 - If we really added it up, it's
actually this many steps-- n
472:28 - squared divided by 2 plus n over 2.
472:30 - But again, if we want to just be able
to generally compare two algorithms'
472:34 - performance, I think it's going to
suffice if we look at that highest
472:38 - order term to get a sense of what the
algorithm feels like, if you will,
472:44 - or what it even looks like graphically.
472:46 - All right, so with that said,
we might describe bubble sort
472:50 - as being in big O--
472:52 - sorry, selection sort as
being in big O of n squared.
472:56 - But what if we consider now the
best case scenario-- an opportunity
473:01 - to talk about a lower bound?
473:03 - In the best case, how many
steps does selection sort take?
473:07 - Well, here, we need some context.
473:09 - Like, what does it mean to be
the best case or the worst case
473:11 - when it comes to sorting?
473:13 - Like, what could you imagine meaning
the best possible scenario when you're
473:16 - trying to sort a bunch of numbers?
473:20 - I got the whole crew here again.
473:21 - Yeah.
473:21 - AUDIENCE: They would already be sorted.
473:23 - DAVID J. MALAN: All right, they're
already sorted, right?
473:24 - I can't really imagine a better scenario
than I have to sort some numbers,
473:28 - but they're already sorted for me.
473:30 - But does this algorithm
leverage that fact in practice?
473:35 - Even if all of our humans
had lined up from 0 to 7,
473:38 - I'm pretty sure I would have
pretty naively started here.
473:41 - And yes, Celeste happens to be here.
473:43 - But I only know she needs to be here
once I've looked at all eight people.
473:47 - And then I would have realized,
well, that was a waste of time.
473:50 - I can leave Celeste be.
473:51 - But then what would I have done?
473:53 - I would have ignored her position
because we've solved one problem.
473:57 - I would have done the same thing now
for seven people, then six people.
474:00 - So every time I walk through,
I'm not doing much useful work.
474:03 - But I am doing those
comparisons because I
474:06 - don't know until I do the work that
the people were in the right order.
474:09 - So this would seem to imply that
the omega notation, the best case
474:14 - scenario, even, a lower bound on the
running time would be what, then?
474:18 - AUDIENCE: [INAUDIBLE]
474:20 - DAVID J. MALAN: A little louder?
474:21 - AUDIENCE: N squared.
474:22 - DAVID J. MALAN: It's still
going to be n squared,
474:24 - in fact, because the code I'm giving
myself doesn't leverage or benefit
474:30 - from any of that scenario because
it just mindlessly continues
474:34 - to do this again and again.
474:36 - So in this case, yes, I would claim that
the omega notation for selection sort
474:41 - is also big O of n squared.
474:43 - So those are the kinds
of numbers to beat.
474:44 - It seems like the upper bound
and lower bound of selection
474:48 - sort are indeed n squared.
474:50 - And so we can also describe
selection sort, therefore,
474:52 - as being in theta of n squared.
474:54 - That's the first algorithm we've
had the chance to describe that in,
474:56 - which is to say that it's kind of slow.
474:59 - I mean, maybe other
algorithms are slower,
475:00 - but this isn't the best starting point.
475:02 - Can we do better?
475:03 - Well, there's a reason that I guided us
to doing the second algorithm second.
475:07 - Even though you verbally proposed
them in a different order,
475:09 - this second algorithm we did is
generally known as bubble sort.
475:12 - And I deliberately used
that word a bit ago,
475:15 - saying the big values are
bubbling their way up to the right
475:19 - to kind of capture the fact that,
indeed, this algorithm works
475:22 - differently.
475:22 - But let's consider if
it's better or worse.
475:25 - So here, we have pseudo
code for bubble sort.
475:28 - You could write this
too in different ways.
475:30 - But let's consider what
we did on the stage.
475:32 - We repeated the following
n minus 1 times.
475:36 - We initialized at least, even though
I didn't verbalize it this way,
475:39 - a variable like i from 0
to n minus 2, n minus 2.
475:44 - And then I asked this question.
475:46 - If numbers bracket i and numbers
bracket i plus 1 are out of order,
475:52 - then swap them.
475:54 - So again, I just did it more
intuitively by pointing,
475:56 - but this would be a way,
with a bit of pseudo code,
475:59 - to describe what's going on.
476:00 - But notice that I'm doing something
a little differently here.
476:03 - I'm iterating from if
equals 0 to n minus 2.
476:07 - Why?
476:07 - Well, if I'm comparing two
things, left hand and right hand,
476:11 - I'd still want to start at 0.
476:13 - But I don't want to go
all the way to n minus 1
476:15 - because then, I'd be going past
the boundary of my array, which
476:19 - would be bad.
476:19 - I want to make sure that my
left hand-- i, if you will--
476:22 - stops at n minus 2 so that when
I plus 1 in my pseudo code,
476:27 - I'm looking at the last two
elements, not the last element
476:29 - and then pass the boundary.
476:31 - That's actually a common
programming mistake
476:33 - that we'll undoubtedly
soon make by going
476:34 - beyond the boundaries of your array.
476:37 - So this pseudo code, then, allows me to
say compare every one again and again
476:43 - and swap them if they're out of order.
476:46 - Why do I repeat the whole
thing n minus 1 times?
476:50 - Like, why does it not suffice
just to do this loop here?
476:55 - Think what happened with Celeste.
476:59 - Why do I repeat this whole
thing n minus 1 times?
477:03 - Yeah, in the back?
477:04 - AUDIENCE: [INAUDIBLE]
477:12 - DAVID J. MALAN: Indeed, and I think
if I can recap accurately,
477:14 - think back to Celeste again.
477:16 - And I'm sorry to keep calling
on you as our number 0.
477:18 - Each time through bubble
sort, she only moved one step.
477:22 - And so in total, if there's n
locations, at the end of the day,
477:25 - she needs to move n minus 1 steps to get
0 all the way to where it needs to be.
477:30 - And so this inner loop, if you
will, where we're iterating using i,
477:34 - that just fixes some of the problems.
477:37 - But it doesn't fix all of the problems
until we do that same logic again
477:40 - and again and again.
477:42 - And so how might we quantify the
running time of this algorithm?
477:45 - Well, one way to see it is to just
literally look at the pseudo code.
477:49 - The outer loop repeats n
minus 1 times by definition.
477:53 - It literally says that.
477:54 - The inner loop, the for loop,
also iterates n minus 1 times.
478:00 - Why?
478:00 - Because it's going from 0 to n minus 2.
478:02 - And if that's hard to think about,
that's the same thing is 1 to n minus 1
478:06 - if you just add 1 to
both ends of the formula.
478:09 - So that means you're doing n
minus 1 things n minus 1 times.
478:14 - So I literally multiply how
many times the outer loop
478:16 - is running by how many times the
inner loop is running, which gives me
478:20 - sort of FOIL method n minus 1 squared.
478:23 - And I could multiply
that whole thing out.
478:25 - Well, let's consider this just
a little more methodically here.
478:28 - If I have n minus 1 on the
outer, n minus 1 on the inner--
478:32 - let's go ahead and FOIL this.
478:33 - So n squared minus n
minus n plus 1, combine
478:37 - like terms-- n squared minus 2n plus 1.
478:40 - And now which of these terms is clearly
going to be dominant, so to speak?
478:45 - The--
478:46 - AUDIENCE: N squared.
478:46 - DAVID J. MALAN: --the n squared.
478:48 - So yes, even though
minus 2n is a good thing
478:50 - because it's subtracting off
some of the time required,
478:53 - plus 1 is not that big a thing,
there's such drops in the bucket when
478:56 - n gets really large, like
in the millions or billions,
478:58 - certainly, that bubble sort 2
is on the order of n squared.
479:02 - It's not the same exactly
as selection sort.
479:05 - But as n gets big,
honestly, we're barely
479:07 - going to be able to notice
the difference most likely.
479:09 - And so it too might be said to
be on the order of n squared.
479:13 - And if we consider now the lower
bound on bubble sort's running time,
479:18 - here's where things get
potentially interesting.
479:23 - What might you claim is the running
time of bubble sort in the best case?
479:28 - And the best case, I claim, is when
the numbers are already sorted.
479:32 - Is our pseudo code going
to take that into account?
479:35 - AUDIENCE: N
479:36 - DAVID J. MALAN: OK, n.
479:37 - Why do you propose n?
479:38 - AUDIENCE: [INAUDIBLE]
479:43 - DAVID J. MALAN: Yes, and that's the key word.
479:45 - To summarize, in bubble sort, I do have
to minimally make one pass because if I
479:49 - don't look at all n elements,
that I'm theoretically
479:52 - just guessing if it's sorted or not.
479:53 - Like, I obviously
intuitively have to look
479:55 - at every element to decide yay
or nay, it's in the right order.
479:58 - And my original pseudo code,
though, is pretty naive.
480:01 - It's just going to blindly go back and
forth n minus 1 times again and again,
480:07 - and that's going to add up.
480:08 - But what if I add a
bit of an optimization
480:10 - that you might have glimpsed
on the slide a moment ago
480:12 - where if I compare two people and I
don't swap them, compare two people,
480:15 - don't swap them, and I go all the
way through the list comparing
480:18 - every pair of adjacent
people, and I make no swaps,
480:22 - it would be kind of not
just naive but stupid
480:25 - to do that same process again
because if the humans have not moved,
480:28 - I'm not going to make
any different decisions.
480:31 - I'm going to do nothing
again, nothing again.
480:34 - So at that point, it would be stupid,
very inefficient, to go back and forth
480:37 - and back and forth.
480:38 - So if I modify our pseudo code with
just an additional if condition,
480:42 - I bet we can speed this up.
480:44 - Inside of that same pseudo code, what
if I say, hey, if no swaps, quit?
480:50 - Like quit, prematurely before
the loops are finished running.
480:54 - One of the loops has gone
through per the indentation here.
480:57 - But if I do a loop from
left to right and I
481:00 - have made no swaps, which you
can think of as just being
481:03 - one other variable that's plus plusing
as I go keeping, track of how many
481:06 - swaps--
481:07 - if I've made no swaps
from left to right,
481:09 - I'm not going to make any swaps
the next time around either.
481:11 - So let's just quit at that point.
481:14 - And that is to say in the
best case, if you will,
481:16 - when the list is already sorted,
the omega notation for bubble sort
481:20 - might indeed be omega of n
if you add that optimization
481:25 - so as to short circuit
all of that inefficient
481:28 - looping to do it only as
many times as is necessary.
481:34 - Let me pause to see if
there's any questions here.
481:36 - Yeah.
481:37 - AUDIENCE: [INAUDIBLE] to optimize the
running time for all cases possible?
481:46 - DAVID J. MALAN: Good question.
481:47 - If the running time of selection sort
and bubble sort are both in big O
481:53 - of n squared but selection sort is in
omega of n squared while bubble sort is
481:58 - in omega of n, which sounds better--
482:01 - I think if I may, should we
just always use bubble sort?
482:04 - Yes if we think that we
might benefit over time
482:09 - from a lot of good case
scenarios or best case scenarios.
482:13 - However, the goal at
hand in just a bit is
482:15 - going to be to do even
better than both of these.
482:17 - So hold that question
further for a moment.
482:19 - Yeah.
482:20 - AUDIENCE: [INAUDIBLE] n minus 1?
482:25 - DAVID J. MALAN: No.
482:26 - So yes, good question.
482:27 - So I say omega of n, but is it
technically omega of n minus 1?
482:31 - Maybe, but again, we're
throwing away lower order terms.
482:34 - And that's an advantage because we're
not comparing things ever so precisely.
482:38 - Just like I plotted with the
green and yellow and red chart,
482:41 - I just want to get a sense of
the shape of these algorithms
482:44 - so that when n gets really
large, which of these choices
482:47 - is going to matter the most?
482:49 - At the end of the day, it's
actually perfectly reasonable
482:51 - to use selection sort
or bubble sort if you
482:53 - don't have that much data because
they're going to be pretty fast.
482:56 - My God, our computers
nowadays are 1 gigahertz,
482:58 - 2 gigahertz, 1 billion things per
second, 2 billion things per second.
483:02 - But if we have large data sets,
as we will later in the term
483:05 - and as you might in the real world,
that the Googles of the world,
483:07 - then you're going to want
to be more thoughtful.
483:09 - And that's where we're going today.
483:11 - All right, so let's actually see
this visualized a little bit.
483:14 - In a moment, I'm going
to change screens here
483:16 - to open up what is a little
visualization tool that will give us
483:21 - a sense of how these things actually
work and look at a faster rate
483:25 - than our humans are able
to do here on stage.
483:27 - So here is another visualization of a
bunch of numbers, an array of numbers.
483:31 - Short bars mean small numbers,
tall bars mean big numbers.
483:35 - So instead of having the
numbers on their torsos here,
483:37 - we just have bars that are small or tall
based on the magnitude of the number.
483:42 - Let me go ahead, and I
preconfigured this in advance
483:44 - to operate somewhat quickly.
483:46 - Let's go ahead and do selections
sort by clicking this button.
483:49 - And you'll see some pink bars flying by.
483:52 - And that's like me walking
left and right, left and right,
483:56 - to select the next smallest number.
483:58 - And so what you'll see happening on
the left of this array of numbers
484:01 - is Celeste, if you will, and
all of the other smaller numbers
484:04 - are appearing on the left while
we continue to solve the remaining
484:08 - problems to the right.
484:10 - So again, we no longer have to
touch the smaller numbers here.
484:13 - So that's why the problem is getting
smaller and smaller and smaller
484:16 - over time.
484:17 - But you can notice now
visually, look at how many times
484:20 - we're retracing our steps.
484:22 - This is why things
that are n squared tend
484:25 - to be frowned upon if avoidable because
I'm touching the same elements again
484:29 - and again.
484:29 - When I was walking through, I
kept pointing at the same humans
484:31 - again and again.
484:32 - And that adds up.
484:34 - So let's see if bubble sort looks
or feels a little different.
484:37 - Let me re-randomize the thing, and let
me now click Bubble Sort at the top.
484:40 - And as you might infer, there's
other sorting algorithms out there,
484:43 - not all of which we'll look at.
484:44 - But here's bubble sort.
484:46 - Same pink coloration, but it's
doing something different.
484:48 - It's two pink bars going through
again and again comparing
484:52 - the adjacent numbers.
484:53 - And you'll see that the largest
numbers are indeed bubbling the way up
484:57 - to the right, but the smaller
numbers, like our number 0 was,
485:02 - is only slowly making its way over.
485:04 - Here's a comparable.
485:05 - Here's the number one.
485:06 - And it's going to take a while
to get all the way to the left.
485:09 - And here too, notice how
many times the same bars
485:12 - are becoming pink, how many times the
algorithm is retracing and retracing
485:16 - its steps.
485:17 - Why?
485:17 - Because it's only solving one
problem at a time on each pass.
485:21 - And each time we do that, we're stepping
through practically the whole array.
485:25 - And now granted, I could speed this
up even further if I really wanted to,
485:28 - but my God, this is only, what, like
50 or 60 elements, something like that?
485:32 - This is slow.
485:33 - Like, this is what n squared
looks like and feels like.
485:36 - And now I'm just trying to
come up with words to say
485:38 - until we get to the finish line here.
485:40 - Like, this would be annoying if
this is the speed of sorting,
485:43 - and this is why I sort of secretly
sorted the numbers for Rave in advance
485:47 - because it would have taken
us an annoying number of steps
485:49 - to get that in place for her.
485:51 - So those two algorithms are n squared.
485:54 - Can we do, in fact, better?
485:56 - Well, to save the best algorithm for
last, let's take a shorter five minute
485:59 - break here.
486:00 - And when we come back, we'll
do even better than n squared.
486:04 - All right.
486:06 - So the challenge at hand is to
do better than selection sort
486:11 - and better than bubble sort
and ideally not just marginally
486:14 - better but fundamentally better.
486:16 - Just like in week zero, that third
and final divide and conquer algorithm
486:20 - was sort of fundamentally
faster than the other two.
486:23 - So can we do better than something
on the order of n squared?
486:26 - Well, I bet we can if
we start to approach
486:28 - the problem a little differently.
486:30 - The sorts we've done
thus far, generally known
486:32 - as comparison sorts--
and that kind of captures
486:34 - the reality that we were doing a huge
number of comparisons again and again.
486:38 - And you kind of saw that in the vertical
bars that were going pink as everything
486:41 - was being compared again and again.
486:43 - But there's this programming
technique, and it's actually
486:45 - a mathematical technique
known as recursion
486:48 - that we've actually seen before.
486:50 - And this is a building
block or a mental model
486:53 - we can bring to bear on the problem
to solve the sorting problem
486:56 - sort of fundamentally differently.
486:58 - But first, let's look at it
in a more familiar context.
487:00 - A little bit ago, I proposed this pseudo
code for the binary search algorithm.
487:07 - And notice that what was
interesting about this code,
487:10 - even though I didn't call it out at the
time, it's kind of cyclically defined.
487:14 - Like, I claim this is
an algorithm for search,
487:17 - and yet it seems a little unfair
that I'm using the verb search
487:21 - inside of the algorithm for search.
487:23 - It's like an English sort of
defining a word by using the word.
487:26 - Normally, you shouldn't
really get away with that.
487:28 - But there's something
interesting about this technique
487:30 - here because even though this
whole thing is a search algorithm
487:35 - and I'm using my own algorithm to
search the left half or the right half,
487:40 - the key feature here
that doesn't normally
487:42 - happen in English when you
define a word in terms of a word
487:46 - is that when I search the left
half or search the right half, yes,
487:49 - I'm doing the same thing.
487:51 - I'm using the same algorithm.
487:52 - But the problem is, by
definition, half as large.
487:55 - So this isn't going to be a
cyclical argument in the same way.
487:58 - This approach, by using
search within search
488:02 - is going to whittle the problem down
and down and down until hopefully,
488:05 - one door or no doors remains.
488:08 - And so recursion is a
programming technique
488:11 - whereby a function calls itself.
488:14 - And we haven't seen this yet in C, and
we haven't seen this really in Scratch.
488:18 - But in C, you can have
a function call itself.
488:22 - And the form that
takes is like literally
488:24 - using the function's name inside of
the function's implementation itself.
488:28 - We've actually seen an opportunity
for this once before too.
488:32 - Think back to week zero.
488:33 - Here's that same pseudo code
for searching for someone
488:35 - in an actual, physical phone book.
488:37 - And notice these yellow lines here.
488:40 - We described those in week zero
as inducing a loop, a cycle.
488:44 - And this is a very procedural approach,
if you will, because lines 8 and 11
488:48 - are very mechanically,
if you will, telling
488:50 - me to go back to line three to
do this kind of looping thing.
488:54 - But really, what that's doing in the
binary search algorithm for the phone
488:59 - book is it's just telling me to search
the left half or search the right half.
489:04 - I'm doing it more mechanically
again by sort of telling myself
489:08 - what line number to go back to.
489:09 - But that's equivalent to just telling
myself go search the left half,
489:12 - search the right half, the
key thing being the left
489:15 - have and the right half are
smaller than the original problem.
489:18 - It would be a bug if I just said search
the phone book, search the phone book,
489:21 - because obviously, you
never get anywhere.
489:23 - But if you search the
half, the half, the half,
489:25 - problem gets smaller and smaller.
489:27 - So let's reformulate week zero's phone
book code to be not procedural as here
489:34 - but recursive whereby in
this search algorithm,
489:39 - AKA binary search, formerly
called divide and conquer, I'm
489:42 - going to literally use also
the keyword search here.
489:46 - Notice among the benefits
of doing this is it
489:48 - kind of tightens the code up,
makes it a little more succinct,
489:51 - even though that's kind
of a fringe benefit here.
489:53 - But it's an elegant
way too of describing
489:56 - a problem by just having
a function use itself
490:01 - to solve a smaller puzzle at hand.
490:05 - So let's now consider a
familiar problem, a smaller
490:08 - version than the one you've dabbled
with-- this sort of pyramid,
490:11 - this half pyramid from Mario.
490:12 - And let's throw away the parts
that aren't that interesting
490:15 - and just consider how we might, up
until now, implement this in C code,
490:19 - this left aligned pyramid, if you will.
490:21 - Let me go over here, and let me create
a file called-- how about iteration.c?
490:28 - And in this file, I'm going to
go ahead and include cs50.h.
490:32 - And I'm going to include stdio.h.
490:36 - And the goal at hand is to implement in
C a little program that just prints out
490:41 - this and exactly this pyramid.
490:43 - So no get string or any of that--
we're just going to keep it simple
490:46 - and print exactly this
pyramid of height 4 here.
490:49 - So how might I do this?
490:50 - Well, let me go ahead, and in main,
let me first ask the user for--
490:55 - well, we'll go ahead and generalize it.
490:56 - Let's go ahead and ask
the user for heights.
490:58 - We're using getint as before.
491:00 - And I'll store that in a
variable called height.
491:02 - And then let me go ahead
and simply call the function
491:05 - draw passing in that height.
491:06 - So for the moment, let me
assume that someone somewhere
491:09 - has implemented a draw function.
491:10 - And this, then, is the
entirety of my program.
491:14 - All right, unfortunately, C does
not come with a draw function.
491:17 - So let me go ahead and invent one.
491:19 - It doesn't need to return a value.
491:20 - It just needs to print
something-- so-called side effect.
491:23 - So I'm going to define a function
called draw that takes as input an int.
491:27 - I'll call it n for number, but
I could call it anything I want.
491:30 - And inside of this.
491:32 - I'm going to go ahead and print out a
left aligned pyramid like this from top
491:37 - to bottom.
491:38 - The salient features here are that this
is a pyramid, at least in this example,
491:42 - of height four.
491:43 - And now in height four, the
first row has one brick.
491:46 - The second row has two.
491:47 - The third has three.
491:48 - The fourth has four.
491:49 - That's a nice pattern that I
can probably represent in code.
491:52 - So how might I do this?
491:53 - Well, how about 4 int i gets--
491:55 - let me do it the old school way--
491:57 - 1.
491:58 - And then i is less than or equal to n.
492:02 - And then i plus plus--
492:04 - so I'm going from 1 to 4 just
to keep myself sane here.
492:08 - And then inside of this
loop, what do I want to do?
492:11 - Well, let me keep it
conventional, in fact.
492:12 - Let me just change this to
be the more conventional 0
492:16 - to n even though it might not be
as intuitive because now on row 0,
492:20 - I want one brick.
492:21 - On row 1, I want two
bricks, dot dot dot.
492:24 - On row 3, I want four.
492:25 - So it's kind of offset now.
492:26 - But I'm being more conventional.
492:28 - So on each row, how many
bricks do I want to print?
492:32 - Well, I think I want to do this.
492:34 - For int j, for instance, common to
use j after if you have a nested loop,
492:40 - let's start j at 0 and do this
so long as is less than i plus 1
492:47 - and then do j plus plus.
492:48 - So why i plus 1?
492:50 - Well, again, when I equals 0, that's
the first row, and I want one brick.
492:55 - When i equals 1, that's the second row.
492:57 - I want two bricks.
492:57 - And dot dot dot, when i
is 3, I want four bricks.
493:00 - So again, I have to add 1 to i
to get the total number of bricks
493:03 - that I want to print to the screen.
493:05 - So inside of this nested for loop,
I'm going to do printf of a hash
493:10 - with no new line.
493:13 - I'm going to save the new
line for about here instead.
493:17 - All right, the last
thing I'm going to do
493:19 - is copy and paste the prototype
at the top of the file.
493:22 - So that I can call this.
493:23 - And again, this is of
now week one, week two.
493:27 - Wouldn't necessarily come to
your mind as quickly as it
493:29 - might to mine after all this practice,
but this is something reminiscent
493:32 - of what you yourself did
already for Mario-- printing out
493:35 - a pyramid that hopefully in a
moment is going to look like this.
493:38 - So let me go back to my code.
493:40 - Let me run make iteration, and
let me do dot slash iteration.
493:44 - I'll type in 4, and voila.
493:46 - Seems to be correct, and let's assume
it's going to work for other inputs
493:50 - as well.
493:50 - Oh, thank you.
493:56 - So this is indeed an example
of iteration-- doing something
493:59 - again and again.
494:01 - And it's very procedural.
494:02 - Like, I literally have a function
called draw that does this thing.
494:05 - But I can think about implementing
draw in a somewhat different way that's
494:09 - kind of clever.
494:11 - And it's not strictly
necessary for this problem
494:13 - because this problem honestly
is not that complicated
494:15 - to solve once you have
practice under your belt.
494:17 - Certainly the first time around,
probably significantly challenging.
494:20 - But now that you kind of
associate, OK, row one
494:23 - with one brick, row two with two
bricks, it kind of comes together
494:26 - with these for loops.
494:27 - But how else could we
think about this problem?
494:30 - Well, this physical structure,
these bricks, in some sense
494:33 - is a recursive structure, a structure
that's defined in terms of itself.
494:39 - Now what do I mean by that?
494:40 - Well, if I were to ask you the question,
what does a pyramid of height 4
494:45 - look like, you would point,
of course, to this picture.
494:49 - But you could also kind of
cleverly say to me, well,
494:55 - it's actually a pyramid of
height 3 plus 1 additional row.
495:00 - And here's that cyclical
argument, right?
495:02 - Kind of obnoxious to do typically
in English or in a spoken language
495:05 - because you're defining one
thing in terms of itself.
495:07 - What's a pyramid of height 4?
495:08 - Well, it's a pyramid of
height 3 plus 1 more row.
495:12 - But we can kind of leverage
this logic in code.
495:15 - Well, what's a pyramid of height 3?
495:16 - Well, it's a pyramid of
height 2 plus 1 more row.
495:19 - Fine, what's a pyramid of height 2?
495:21 - Well, it's a pyramid of
height 1 plus 1 more row.
495:23 - And then hopefully, this process
ends, and it does because notice,
495:26 - the pyramid is getting
smaller and smaller.
495:29 - So you're not going to have this
sort of silly back and forth with me
495:32 - infinitely many times because when
we finally get to the base case,
495:36 - the end of the pyramid, fine.
495:38 - What is a pyramid of height 1?
495:39 - Well, it's a pyramid of no
height plus one more row.
495:42 - And at that point, things
just get negative--
495:45 - no pun intended.
495:46 - Things just would otherwise go negative.
495:48 - And so you can just kind of stop.
495:49 - The base case is when
there is no more pyramid.
495:52 - So there's a way to draw a line in the
sand and say, stop, no more arguments.
495:56 - But this idea of defining a physical
structure in terms of itself
496:00 - or code in terms of itself actually lets
us do some interesting new algorithms.
496:06 - Let me go back to my code here.
496:08 - Let me go ahead and create one
final file here called recursion.c
496:14 - that leverages this idea of this
built-in self-referential nature.
496:20 - Let me include cs50.h.
496:22 - Let me go ahead and include
standardio.h, int main void.
496:26 - And then inside of main, I'm going
to do the exact same thing-- int
496:30 - height equals get int,
asking the user for height.
496:34 - And then I'm going to go ahead
and call draw passing in height.
496:38 - So that's going to stay the same.
496:39 - I even am going to make my prototype
the same-- void draw int n semicolon.
496:45 - And now I'm going to
implement void down here
496:48 - with that same prototype, of course.
496:49 - But the code now is going
to be a little different.
496:52 - What am I going to do here?
496:54 - Well, first of all, if you ask
me to draw a pyramid of height n,
496:59 - I'm going to be kind of a wise
ass here and say, well, just
497:02 - draw a pyramid of n minus 1--
497:05 - done.
497:06 - All right, but there's still
a little more work to be done.
497:08 - What happens after I print or
draw a pyramid of height n minus 1
497:13 - according to our structural
definition a moment ago?
497:17 - What remains after drawing a pyramid
of height n minus 1 or 3, specifically?
497:22 - AUDIENCE: [INAUDIBLE]
497:25 - We need one more row of hashes.
497:26 - OK, so I can do that, right?
497:28 - I'm OK with the single loops.
497:29 - There's no nesting necessary here.
497:30 - I'm just going to do this-- for
int i get 0, i is less than n,
497:35 - which is the height that's
passed in, i plus plus.
497:37 - And then inside of this
loop, I'm very simply
497:39 - going to print out a single hash.
497:41 - And then down here, I'm going to
print out a new line at the very end.
497:45 - So that's good, right?
497:45 - I might not be as comfortable
with nested loops.
497:48 - This is nice and simple.
497:49 - What does this loop do
here on line 17 through 20?
497:52 - It literally prints n hashes by
counting from i equals 0 on up to
497:57 - but not through n.
497:59 - So that's sort of week one style syntax.
498:02 - But this is kind of trippy
now because I've somehow
498:05 - boiled down the implementation of
draw into printing a row after just
498:09 - drawing the thing above it.
498:11 - But this is problematic as
is because in this case,
498:15 - my drawer function, notice, is always
going to call the draw function forever
498:22 - in some sense.
498:23 - But ideally, when do I want
this cyclical process to stop?
498:28 - When do I want to not call draw anymore?
498:32 - Yeah, when n is 1, right?
498:35 - When I get to the top of
the pyramid, when n is 1,
498:37 - or heck, when the pyramids
all gone and n equals 0.
498:40 - I can pick any line in
the sand, so long as it's
498:42 - sort of at the end of the process.
498:44 - Then I don't want to call draw anymore.
498:45 - So maybe what I should do is this.
498:48 - If n equals equals 0, there's
really nothing to draw.
498:54 - So I'm just going to go
ahead and return like this.
498:58 - Otherwise, I'm going
to go ahead and draw
499:01 - n minus 1 rows and then one more row.
499:04 - And I could express this differently.
499:06 - I could do something like this,
which would be equivalent.
499:08 - I could say something like if n
is greater than or equal to 0,
499:13 - then go ahead and draw the row.
499:15 - But I like it this way first.
499:17 - For now, I'm going to
go with the original way
499:18 - just to ask a simple question and
then just bail out of the function
499:22 - if n equals 0.
499:23 - And heck, just to be
super safe, just in case
499:26 - the user types in a
negative number, let me also
499:28 - just check if n is a negative number,
also, just return immediately.
499:31 - Don't do anything.
499:32 - I'm not returning a value because
again, the function is void.
499:35 - It doesn't need or have a return value.
499:38 - So just saying return suffices.
499:40 - But if n equals 1 or 2
or 3 or anything higher,
499:45 - it is reasonable to draw a pyramid of
slightly shorter height like, instead
499:50 - of 4, 3, and then go ahead
and print one more row.
499:55 - So this is an example now of code
that calls itself within itself.
500:00 - Draw is calling draw.
500:02 - But this so-called base case
ensures, this conditional ensures,
500:07 - that we're not going to do this forever.
500:09 - Otherwise, we literally would
do this infinitely many times,
500:11 - and something bad is
probably going to happen.
500:14 - All right, let me go ahead and
compile this code-- make recursion.
500:18 - OK, no syntax errors-- dot slash
recursion, Enter, height of 4,
500:22 - and voila.
500:24 - If only because some of you have run
into this issue accidentally already,
500:28 - let me get rid of the base case
here, and let me recompile the code.
500:32 - Make recursion.
500:34 - Oh, and actually, now
it's actually catching it.
500:36 - So the compiler is smart
enough here to realize
500:39 - that all paths through this
function will call itself.
500:42 - AKA, It's going to loop forever.
500:45 - So let me do the first thing.
500:47 - Suppose I only check for n equaling 0.
500:49 - Let me go ahead and recompile
this code with make recursion.
500:53 - And now let me just be
kind of uncooperative.
500:56 - When I run this program, still
works for 4, still works for 0.
501:00 - What if I do like negative 100?
501:03 - Have any of you experienced a
segmentation fault or core dump?
501:07 - OK, so no shame in this.
501:08 - Like, this means I have somehow
touched memory that I shouldn't have.
501:13 - And in short, I actually called
this function thousands of times
501:17 - accidentally, it would seem
now, until the program just
501:19 - bailed on me because I eventually
touched memory in the computer
501:22 - that I shouldn't have.
501:23 - That'll make even more sense next week.
501:25 - But for now, it's simply a bug.
501:27 - And I can avoid that
bug in this context,
501:28 - probably not your own pset context,
by just making sure we don't even
501:33 - allow for negative numbers at all.
501:35 - So with this building
block in place, what
501:38 - can we now do in terms of
those same numbers to sort?
501:41 - Well, it turns out there's a
sorting algorithm called merge sort.
501:44 - And there's bunches of others too.
501:46 - But merge sort is a nice one to discuss
because it fundamentally, we hope,
501:51 - is going to do better than
selection sort and bubble
501:53 - sort that is better than n squared.
501:55 - But the catch is it's a
little harder to think about.
501:58 - In fact, I'll act it out myself with
just these numbers on the shelf here
502:01 - rather than humans because recursion
in general takes a little bit of effort
502:05 - to wrap your mind around,
typically a bit of practice.
502:08 - But I'll see if we can't
walk through it methodically
502:10 - enough such that this comes to light.
502:12 - So here's the pseudo code I propose
for this algorithm called merge sort.
502:16 - In the spirit of recursion,
this sorting algorithm
502:20 - literally calls itself by using
the verb sort in its pseudo code.
502:25 - So how does merge sort work?
502:26 - It sort of obnoxiously says, well, if
you want to sort all of these things,
502:30 - go sort the left half, then
go sort the right half,
502:33 - and then merge the two together.
502:34 - Now obnoxious in what sense?
502:36 - Well, if I just asked you to sort
something and you just tell me,
502:38 - well, go sort that
thing and then go sort
502:40 - that thing, what was the point
of asking you in the first place?
502:43 - But the key is that
each of these lines is
502:45 - sorting a smaller piece of the problem.
502:48 - So eventually, we'll be
able to pare this down
502:50 - into something that doesn't go on
forever because in fact, in merge sort,
502:54 - there's a base case too.
502:56 - There's a scenario where we
just check, wait a minute,
502:59 - if there's only one
number to sort, that's it.
503:01 - Quit then because you're all done.
503:03 - So there has to be this base
case in any use of recursion
503:06 - to make sure that you don't
mindlessly call yourself forever.
503:11 - You've got to stop at some point.
503:13 - So let's focus on the
third of these steps.
503:16 - What does it mean to merge two
lists, two halves of a list,
503:21 - just because this is
apparently going to be
503:23 - a key ingredient-- so
here, for instance,
503:25 - are two halves of a list of size 8.
503:28 - We have the numbers 2-- and I'll call
it out if you're at a bad angle--
503:31 - 2457 and 0136.
503:36 - Notice that the left half at the
moment, 2457, is already sorted,
503:41 - and the right half, 0136,
is also sorted as well.
503:45 - So that's a good thing because
it means that theoretically, I've
503:48 - sorted the left half already.
503:49 - I've sorted the right half
already before we began.
503:51 - I just need to merge these two halves.
503:54 - What does it mean to sort two halves?
503:56 - Well, for the sake of
discussion, I'm just
503:57 - going to turn over most of the numbers
except for the first numbers in each
504:03 - of these halves.
504:04 - There's two halves here, left and right.
504:07 - At the moment, I'm
only going to consider
504:09 - the leftmost element of each half--
that is, the one on the left here
504:13 - and the one on the left here.
504:15 - How do I merge these two lists together?
504:18 - Well, if I look at 2 and I look at 0,
which one should presumably come first?
504:22 - The smaller one.
504:23 - So I'm going to grab
the 0, and I'm going
504:25 - to put it into its own place
on this new shelf here.
504:28 - And now I'm going to consider,
as part of my iteration,
504:34 - the beginning of this list and
the new beginning of this list.
504:37 - So I'm now comparing 2 and 1.
504:39 - Which one's smaller?
504:40 - I'm going to go ahead and grab the 1.
504:42 - Now I'm going to compare the
beginning of the left list
504:45 - and the new beginning of
the right list, 2 and 3.
504:47 - Of course, it's 2.
504:49 - Now I'm going to compare the
beginning of the left list
504:51 - and the beginning of
the right list, 4 and 3.
504:53 - It's of course 3.
504:55 - Now I'm going to compare the 4
against the beginning and end,
504:58 - it turns out, of the second list--
505:00 - 4, of course.
505:01 - Now I'm going to compare the
beginning of the left list
505:03 - and the beginning of the right list--
505:05 - 5, of course.
505:06 - I'm realizing this is not going
to end well because I left
505:09 - too much distance between the numbers.
505:10 - But that has nothing to
do with the algorithm.
505:12 - 7 is the beginning of the left list.
505:14 - 6 is the beginning of the right list.
505:15 - It's, of course, 6.
505:17 - And at the risk of
knocking all of these over,
505:20 - if I now make room for this
element, we have hopefully
505:27 - sorted the whole thing by having merged
together the two halves of the list.
505:34 - So in short-- thank you.
505:40 - I'm a little worried that's
just getting sarcastic now,
505:43 - but we now have merged two half lists.
505:48 - We haven't done the guts of the
algorithm yet-- sort the left half
505:51 - and sort the right half.
505:52 - But I claim that that
is how mechanically you
505:55 - merge two sorted halves.
505:57 - You keep looking at the
beginning of each list,
505:59 - and you just kind of
weave them together based
506:02 - on which one belongs
first based on its size.
506:05 - So if you agree that
that was a reasonable way
506:07 - to merge two lists together,
let's go ahead and focus lastly
506:12 - on what it means to
actually sort the left half
506:15 - and sort the right half of
a whole bunch of numbers.
506:17 - And for this, I'm going
to go ahead and order them
506:19 - in this seemingly random order.
506:21 - And I just have a little cheat
sheet above so that I don't mess up.
506:24 - And I'm going to start at
the very top this time.
506:26 - And hopefully, these will
not fall down at any point.
506:29 - But I'm just deliberately putting
them in this random order, 5274.
506:35 - And then we have 1630--
506:38 - 1630.
506:41 - Hopefully this won't fall over.
506:43 - Here is now an array of
size 8 with eight integers.
506:48 - And I want to sort this.
506:49 - I could use selection sort and just
go back and forth and back and forth.
506:52 - I could use bubble sort and just
compare pairs, pairs, pairs.
506:55 - But those are going to be on
the order of big O of n squared.
506:58 - My hope is to do
fundamentally better here.
507:00 - So let's see if we can do better.
507:02 - All right, so let me
look now at my code.
507:04 - I'll keep it on the screen.
507:05 - How do I implement merge sort?
507:07 - Well, if there's only
one number, I quit.
507:09 - There's obviously not.
507:10 - There's eight numbers,
so that's not applicable.
507:12 - I'm going to go ahead and
sort the left half of numbers.
507:14 - All right, here's the left half--
507:16 - 5274.
507:18 - Do I sort an array of size 4?
507:21 - Well, here's where the
recursion kicks in.
507:24 - How do you sort a list of size 4?
507:26 - Well, there's the pseudo
code on the board.
507:28 - I sort the left half
of the list of size 4.
507:31 - So here we go.
507:33 - I have a list of size 4.
507:34 - How do I sort it?
507:35 - I sort the left half.
507:37 - All right, now I have a list of size 2.
507:38 - How do I sort this?
507:41 - Well, sort the left half.
507:42 - So here we go.
507:43 - Here's a list of size 1.
507:45 - How do I sort this?
507:48 - I think it's done, right?
507:50 - That's quit, right?
507:50 - If only one number, I'm done.
507:52 - The 5 is sorted.
507:53 - All right, what was the next step?
507:55 - You have to now rewind in time.
507:56 - I just sorted the left half of
the left half of the left half.
508:00 - What do I now sort?
508:02 - The right half, which is 2.
508:05 - This is one element.
508:06 - So I'm done.
508:07 - So now at this point in the story,
I have sorted, sort of idiotically--
508:11 - the 5 assorted, and the 2 is sorted.
508:14 - But what's the third and final step
of this phase of the algorithm?
508:18 - Merge the two together.
508:20 - So here's the left,
here's the right list.
508:21 - How do I merge these together?
508:23 - I compare the lists,
and I put the two there.
508:25 - I only have the [? 5 ?]
left, and I do that.
508:27 - So now we see some visible progress.
508:30 - But again, let's rewind.
508:31 - How did we get here?
508:32 - We started to sort the left half of
the left half of the left half, then
508:37 - the right half.
508:38 - And now where are we?
508:39 - We've just sorted the left
half of the left half.
508:42 - So what comes after sorting
the left half of anything?
508:45 - Right half.
508:46 - All right, here's the sort
of same nonsensical thing.
508:48 - Here's a list of size 2.
508:49 - Let's sort the left half.
508:51 - Done.
508:51 - Let's sort the right half.
508:52 - Done.
508:53 - What's the third step?
508:54 - Merge them together.
508:55 - So that's the 4, and that's the 7.
508:59 - What have I now done?
509:00 - In total, I've now sorted the
left half of the original thing.
509:05 - So what happens next?
509:07 - Wait a minute, wait a minute.
509:08 - I have not done that.
509:09 - What have I done?
509:10 - I have sorted the left
half of the left half,
509:13 - and I've sorted the right
half of the left half.
509:16 - What do I now need to do lastly?
509:19 - Merge those two lists together.
509:21 - So again, I put my
finger on the beginning
509:22 - of this list, the
beginning of this list.
509:24 - And if you want, I'll do the same
thing when I merged last time
509:26 - to be clear what I'm comparing.
509:28 - 2 and 4-- the 2 obviously comes first.
509:30 - What comes next?
509:32 - Well, the 4 comes next.
509:34 - What comes next?
509:36 - The 5 comes next and then
lastly, of course, the 7.
509:40 - Notice that the 2457 are now sorted.
509:44 - So the original left half is sorted.
509:47 - And I'll do the rest a little
faster because, my God,
509:49 - this feels like it takes forever.
509:50 - But I bet we're on to something here.
509:52 - What step remains next?
509:54 - I've just sorted the left
half of the original.
509:56 - Sort the right half of the original.
509:58 - How do I sort this?
509:59 - I sort the left half of the right half.
510:02 - How do I sort this?
510:03 - I sort the left half of the left half.
510:05 - Done.
510:06 - I sort the right half of the left half.
510:08 - Done.
510:09 - Now I merge the two together.
510:11 - The 1 comes first, the 6 comes next.
510:14 - Now I sort the right
half of the right half.
510:18 - What do I do?
510:19 - Sort the left half.
510:20 - Done.
510:21 - Sort the right half.
510:22 - Done.
510:23 - What do I do?
510:23 - Merge them together.
510:25 - So that's the third step of that phase.
510:27 - Now where are we in the stor-- oh
my God, where are we in the story?
510:32 - We have sorted the left
half of the right half
510:36 - and the right half of the right half.
510:38 - What comes next?
510:40 - Merge.
510:40 - So I'm going to compare,
and I'm going to move those
510:42 - down just to make clear
what I'm comparing,
510:44 - the beginning of both sublists.
510:46 - What comes first?
510:47 - Of course, the 0.
510:48 - What comes next?
510:51 - What comes next?
510:52 - The 1.
510:54 - What comes next?
510:56 - The 3.
510:57 - And then lastly comes the 6.
510:59 - All right, where are we in the story?
511:01 - We've now sorted the
left half of the original
511:03 - and the right half of the original.
511:05 - What step remains?
511:06 - Merge.
511:07 - All right, so I'm going
to make the same point.
511:09 - And this is actually
literally what we did earlier
511:12 - because I deliberately demoed those
original numbers in this order, 2
511:16 - and a 0.
511:16 - This comes out first.
511:18 - What comes next?
511:19 - 2 and 1.
511:20 - The 1 comes out next.
511:22 - What comes next?
511:23 - The 2 comes next.
511:25 - What comes next?
511:26 - The 3 comes next.
511:27 - What comes next?
511:28 - The 4.
511:31 - What comes after that?
511:32 - The 5.
511:35 - What comes after that?
511:36 - The 6.
511:37 - And lastly-- this is when
we run out of memory--
511:41 - the 7 over there is actually in place.
511:45 - OK.
511:47 - OK, so admittedly, a
little harder to explain,
511:50 - and honestly, it gets a
little trippy because it's
511:52 - so easy to forget about
where you are in the story
511:55 - because we're constantly
diving into the algorithm
511:58 - and then backing back out of it.
511:59 - But in code, we could
express this pretty correctly
512:02 - and, it turns out, pretty
efficiently because what
512:05 - I was doing, even though it's
longer when I do it verbally,
512:09 - I was touching these elements a
minimal amount of times, right?
512:12 - I wasn't going back and forth, back
and forth in front of the shelf
512:15 - again and again.
512:16 - I was deliberately only ever merging
the smallest elements in each list.
512:21 - So every time we merge, even
though I was doing it quickly,
512:24 - my fingers were only touching
each of the elements once.
512:28 - And how many times did we divide,
divide, divide in half the list?
512:34 - Well, we started with
all of the elements here,
512:36 - and there were eight of them.
512:37 - And then we moved them
1, 2, 3 positions.
512:41 - So the height of this visualization,
if you will, is actually log n, right?
512:47 - If I started with 8, turns
out if you do the arithmetic,
512:50 - this is log n height
because 2 to the 3 is 8.
512:54 - But for now, just trust
that this is a log n height.
512:57 - And how wide is the shelf?
512:58 - Well, it's of width n because
there's n elements any time
513:02 - they were on the shelf.
513:03 - So technically, I was kind of
cheating this algorithm because this
513:08 - is the first time I've needed shelves.
513:09 - With the human examples, we just had the
humans, and that's it, and only eight
513:13 - of them.
513:13 - Here, I was sort of using
more and more memory.
513:16 - In fact, I was using like
four times as much memory
513:19 - even though that was just
for visualization's sake.
513:21 - Merge sort actually requires that you
have some spare space, an empty array
513:25 - to move the elements into when
you're merging them together.
513:28 - But if I really wanted and if I
didn't have this shelf or this shelf,
513:31 - honestly, I could have just gone back
and forth between the two shelves.
513:33 - That would have been sufficient.
513:35 - So merge sort uses more memory
for this merging process,
513:40 - but the advantage of
using more memory is
513:43 - that the total running time, if you can
perhaps infer from that math, is what?
513:49 - The big O notation for
merge sort, it turns out,
513:51 - is actually going to be n times log n.
513:54 - And even if you're a little
rusty still on your logarithms,
513:57 - we saw in week zero and again
today that log n is smaller than n.
514:02 - That's a good thing.
514:04 - Binary search was log n.
514:05 - That's faster than linear
search, which was n.
514:07 - So n times log n is, of course,
smaller than n times n or n squared.
514:13 - So it's sort of lower on this little
cheat sheet that I've been drawing,
514:16 - which is to suggest that it's running
time is indeed better or faster.
514:19 - And in fact, if we consider
the best case running time,
514:22 - turns out it's not quite as good
as bubble sort with omega of n,
514:27 - where you can just sort of abort
if you realize, wait a minute,
514:29 - I've done no work.
514:30 - Merge sort, you actually have to do that
work to get to the finish line anyway.
514:35 - So it's actually in omega and
ultimately theta of n log n as well.
514:40 - So again, a trade off
there because if you
514:42 - happen to have a data set
that is very often sorted,
514:44 - honestly, you might want
to stick with bubble sort.
514:47 - But in the general case,
where the data is unsorted,
514:49 - n log n as sounding
better than n squared.
514:53 - Well, what does it
actually look or feel like?
514:55 - Give me a moment to just change
over to our visualization here.
514:58 - And we'll see with this example
what merge sort looks like
515:02 - depicted with now these vertical bars.
515:04 - So same algorithm, but instead
of my numbers on shelves,
515:07 - here is a random array
of numbers being sorted.
515:12 - And you can see it being
done half at a time.
515:14 - And you see sort of remnants
of the previous bars.
515:18 - Actually, that was unfair.
515:19 - Let me zoom out here.
515:21 - Let me zoom out so you can
actually see the height here.
515:26 - Let me go ahead and randomize
this again and run merge sort.
515:29 - There we go.
515:29 - Now you can see the second array and
where the values are going temporarily.
515:34 - And even though this one looks way
more cryptic visualization-wise,
515:38 - it does seem to be moving faster.
515:40 - And it seems to be merging halves
together, and boom, it's done.
515:44 - So let's actually see, in conclusion,
what these algorithms compare to
515:48 - and consider that moving forward
as we write more and more code,
515:51 - the goal is, again, not just to be
correct but to be well-designed.
515:54 - And one measure of design is
going to indeed be efficiency.
515:58 - So here we have, in final, a
visualization of three algorithms--
516:02 - selection sort, bubble
sort, and merge sort--
516:05 - from top to bottom.
516:06 - And let's see what these algorithms
might look or sound like here.
516:09 - Oh, if we can dim the
lights for dramatic effect--
516:16 - selection's on top, bubble on
bottom, merge in the middle.
516:20 - [MUSIC PLAYING]
517:17 - [MUSIC PLAYING]
517:55 - [MUSIC PLAYING]
519:13 - DAVID J. MALAN: Well, this is CS50,
and already this is week four,
519:18 - and recall that last
week, week three, we
519:19 - began to explore the inside of
a computer's memory a bit more.
519:22 - We talked about arrays, which
were just chunks of memory
519:25 - back to back to back that really
lay things out left to right, top
519:28 - to bottom, and this is actually a
pretty common paradigm, even if you're
519:32 - new to programming,
and certainly new to C.
519:34 - You've seen this approach of just using
memory in some way to lay things out,
519:39 - like images, for instance.
519:40 - So for instance, here is a photo taken
of last week's front row, for instance,
519:45 - and this is an opportunity to
explore exactly what happens
519:49 - if we start to zoom in and zoom in and
zoom in, because it seems like most
519:52 - any TV show like CSI, or
whatever, or any movie that
519:56 - explores forensic information might
have the investigators zoom in
520:01 - on an image like this to see
what the glint in someone's eye
520:05 - is because that reveals the license
plate number of someone that
520:08 - just drove past.
520:08 - Something that's a little
over the top there,
520:10 - but there's an opportunity here to
speak to why that is so unrealistic.
520:14 - For instance, let's zoom on
this puppet here's eye and let's
520:17 - zoom in a little more to
see what might be reflected.
520:19 - Let's zoom in a little
more, and that's it.
520:21 - There's only finite
amount of information
520:24 - if you have an image
represented in this way.
520:26 - We're using pixels-- these dots on
the screen as rows and columns--
520:29 - because if you're only using
a finite amount of memory
520:32 - then at the end of the day, you can only
store a finite amount of information.
520:35 - At least I don't really see in this
grid here any glint of a license plate
520:39 - or something like that that you
might otherwise see in Hollywood.
520:42 - So today we'll explore these
kinds of representations
520:45 - of how you might use memory
in new and interesting ways
520:47 - to represent now, very
familiar things, but also
520:51 - start to explore what some of the
limitations are of this representation.
520:54 - But consider after all that this doesn't
need to be even as high resolution,
520:58 - as many pixels as something
like this other image,
521:00 - you can imagine just doing something
silly with Post-It notes, like this.
521:04 - And if you think of an image as
just having rows and columns,
521:07 - these rows otherwise known
as scan lines-- something
521:09 - we'll explore in the coming week--
you could make this fun smiley face
521:13 - by just using two different
values, maybe a zero and a one.
521:17 - Or yellow and purple, or vice versa,
just to make something come to life.
521:21 - Now in practice, recall we talked
about storing not just a zero or one,
521:25 - but maybe an R, a G, and a B value--
like 24 bits, or three bytes in total--
521:32 - but we'll come back to that.
521:33 - That would just be a
more involved image.
521:35 - But for fun, if today you want to tackle
something passively in the background,
521:41 - if you go to this URL here,
we've put together an opportunity
521:44 - to do a bit of pixel art.
521:47 - If you go to this URL here, that'll
redirect you to a Google Spreadsheet.
521:51 - If you have a laptop
with you today that'll
521:53 - look a little something like this, which
we've organized in rows and columns.
521:56 - So if you'd like to go ahead and use
Google Spreadsheet's colorization
522:01 - feature to color in those
individual squares if you'd like,
522:04 - see if you can't make something a little
creative and then email it to Carter
522:08 - and we'll exhibit some of the best or
favorites on the website thereafter.
522:12 - So let's transition then to something
a little more familiar-- images.
522:15 - And not all of you have
used, presumably, Photoshop,
522:17 - but you're probably generally familiar
with Photoshop as a program for editing
522:20 - and creating images
or photos or the like.
522:23 - And here is a screenshot
of p's color picker,
522:25 - via which you can
change what color you're
522:27 - going to draw with the paint
brush, or what color you're
522:30 - going to fill in with the paint bucket.
522:32 - It's representative of any
kind of graphical tool.
522:34 - And there's a lot of
information in here,
522:36 - but there's perhaps some
familiar terms now--
522:39 - R, G, and B. In fact, right
now this is Photoshop's way
522:43 - of saying you're about to fill
in your background or foreground
522:45 - with the color black,
and that appears to be
522:48 - represented with an R, a G, and
a B value of zero, zero, zero.
522:51 - Or alternatively, using a
hash symbol and then 000000.
522:57 - And if some of you have
already made web pages before
522:59 - and you know a little
bit of HTML and CSS,
523:01 - you probably are familiar
with this kind of syntax--
523:04 - a hash symbol and then six, or
sometimes three digits thereafter.
523:07 - And if we look at a few different
colors here, for instance,
523:10 - here might be the
representation of white.
523:12 - Now the R, the G, and the B values
went way up from 0 to 255, 255, 255.
523:18 - Or alternatively, it looks like
Photoshop, and in turn web browsers,
523:23 - could represent that same
color white with FFFFFF.
523:26 - And let's just do a few others.
523:28 - Here is red, and it turns out that
red is a whole lot of red, 255,
523:32 - but no green, no blue.
523:34 - Or, a.k.a.
523:35 - FF0000.
523:37 - So there's perhaps a
pattern here emerging.
523:39 - Here is green, zero, 255, zero, a.k.a.
523:43 - 00FF00, or lastly, here
blue, which is no red,
523:48 - no green but apparently a lot
of blue, 255 again, a.k.a.
523:51 - 0000FF.
523:53 - Now some of you, again, might
have seen this notation before,
523:57 - these zeros and these F's and all of
the numbers and letters in between,
524:00 - but this is another form of notation.
524:02 - And in fact, we'll explore
this today-- really
524:04 - is just a precondition for
talking about some other concepts.
524:06 - But the ideas, ultimately,
are really no different.
524:10 - What we're about to see is
a different base system--
524:13 - not just binary, not just
decimal, but something
524:15 - we're about to call hexadecimal.
524:17 - But first, recall that with RGB
we previously did the following.
524:21 - Any RGB value-- red,
green, blue-- just combine
524:23 - some amount of red or green or blue.
524:26 - So here we have 72, 73, 33, which in the
context of an email or text, of course,
524:30 - said what--
524:32 - a couple of weeks back?
524:33 - Just hi with an exclamation
point, but in the context
524:36 - of a Photoshop-like program, this
might instead be representing,
524:40 - collectively, this shade
of yellow, for instance,
524:42 - when you combine that much red
that much green that much blue.
524:45 - So here is the same idea.
524:46 - If you've got a lot of
red, no green, no blue,
524:49 - together that's going to give us red.
524:50 - If you've got no red, a
lot of green, no blue,
524:53 - that's going to give
us, of course, green.
524:55 - If you've got no red, no green,
a lot of blue, that of course,
524:58 - is going to give us blue.
524:59 - So there's a pattern emerging here
where apparently 00 is none, as always,
525:03 - and FF is apparently a lot.
525:05 - And it's maybe somehow equated with 255,
at least per that Photoshop screenshot.
525:12 - Meanwhile, if we combine one last
one, a lot of red, a lot of green,
525:15 - a lot of blue--
525:16 - that's actually going to give us
a single white pixel like this.
525:20 - All right, so think back.
525:21 - Here was binary-- in the world of binary
you had just two digits, zero and one.
525:25 - Could have been anything else--
525:26 - A or B, X or Y, but the world
standardized on these numerals
525:31 - zero and one.
525:32 - In our world's decimal system, of
course, you have zero through nine.
525:35 - As of today though, we're going to
start using hexadecimal sometimes
525:39 - in the context of images and also
files just because it's a convention
525:43 - and there's some conveniences to it.
525:45 - Where now, you're going
to be able to count up
525:47 - to F in a notation called hexadecimal.
525:49 - From zero through nine, then you keep
going to A to B to C to D to E to F,
525:55 - the idea being each of these,
even though it's weirdly
525:58 - a letter of the English alphabet,
it's still just a single symbol.
526:02 - It's not one zero for 10, or 1 1
for eleven-- all 16 of these values,
526:07 - these digits, so to speak, are
indeed still just single symbols,
526:10 - and that's a characteristic of just
using this other notational system.
526:14 - So how do we get from 00 and FF to
something like 0 and 255, respectively?
526:20 - Well, this hexadecimal system, a.k.a.
526:22 - Base 16, just does the math
from week zero and really,
526:25 - grade school, a little bit differently.
526:27 - For instance, if you have a
number that's got two digits,
526:30 - or hexadecimal digits as of today, the
columns are just a little different.
526:34 - Instead of powers of two or powers of
10, which we saw for binary and decimal
526:37 - respectively, it's powers of 16.
526:40 - So if we just do the math
out, that's the ones column,
526:43 - this is the 16s column, and so forth.
526:46 - Things get actually pretty big
pretty quickly in this system.
526:49 - But now let's just consider how we
would represent familiar numbers.
526:52 - If you've got two hexadecimal
digits for which these hashes are
526:54 - just placeholders, zero, zero
is going to mathematically
526:57 - equal the decimal number you
and I know, of course, as zero.
527:00 - Why?
527:00 - Same thing as week zero--
527:02 - 16 times zero plus one times zero is
the number you and I know as zero.
527:06 - And we can count up from here.
527:07 - This, in hexadecimal,
would be how a computer
527:10 - represents the number we know as one.
527:12 - It would be zero one in this case.
527:14 - This would be two, three, four,
five, six, seven, eight, nine--
527:19 - in decimal, we're about to go to 10.
527:21 - But in hexadecimal, to be
clear, what comes next?
527:24 - So, apparently A, so 0A, 0B, which
is now 10, or 11, or 12, 13, 14, 15.
527:33 - So using hexadecimal is
just an interesting way
527:36 - of using single symbols
now, zero through F,
527:40 - to count from zero through 15.
527:43 - And we'll see why it's 15 in a
moment, but as soon as we get to F,
527:46 - anyone want to conjecture how
in hexadecimal, a.k.a. hex,
527:50 - do we now count up one position higher?
527:53 - What comes after 0F in hexadecimal?
527:56 - So, one zero-- it's the
same kind of thing--
527:59 - once you're at the highest
digit possible, F--
528:01 - or in our decimal world
that would have been nine--
528:03 - you add one more, nine wraps
around to zero, or in this case,
528:06 - F wraps around to zero.
528:08 - You carry the one and voila--
now we're representing
528:11 - the number you and I know as 16.
528:12 - And we could keep going
forever, literally.
528:14 - This could be 17, 18,
19, 20, and decimal--
528:18 - but let's just wave our
hands at it and count
528:20 - as high as we can-- dot,
dot, dot-- the highest
528:23 - we could count in hexadecimal
with two digits, just logically,
528:26 - would be what, in hexadecimal?
528:28 - Something, something.
528:30 - FF, I heard.
528:31 - So yes, that's the biggest digit
possible, so FF is what we have.
528:34 - So how high can you count in hexadecimal
if you've got just two of these digits?
528:38 - Well, it's the same math as always.
528:39 - 16 times F, a.k.a.
528:41 - 15, so that's 16 times 15 plus
one times F, or one times 15--
528:48 - that gives us 240 plus 15 in decimal,
the result of which, of course, now
528:52 - is 255.
528:54 - So this hexadecimal system-- you may
have seen in the world of web pages,
528:57 - and if you haven't we'll get to
that in this class in a few weeks,
529:00 - or we just saw in the
context of Photoshop-- just
529:03 - has this shorthand notation of counting
as high as 255 but just calling it FF.
529:09 - Now it's marginal, but that's like
50% savings of how many digits
529:13 - you need in order to count as high
as 255 because in decimal, of course,
529:16 - 255 is three digits.
529:18 - In hexadecimal you can count
as high using just two,
529:22 - and that difference is going to get
magnified the bigger our numbers get.
529:25 - Let me stipulate for now, you're
going to get more and more savings
529:28 - in terms of just how many symbols
you need on the screen to represent
529:31 - bigger and bigger numbers than that.
529:35 - All right, let me pause here just to
see if there's any questions thus far
529:38 - on what we've called hexadecimal, which
again, just gives us zero through nine
529:42 - as well as A through F.
Any questions or confusion?
529:48 - And if it feels like we're
lingering a bit much on arithmetic,
529:51 - we're not really going to see other
notations besides this moving forward.
529:54 - These are the go-to three in a
programmer's world, typically.
529:58 - But there are some others.
530:00 - Yeah.
530:01 - AUDIENCE: Does the hexadecimal
symbol take more storage
530:03 - than the decimal system?
530:06 - DAVID J. MALAN: Good question.
530:07 - Does hexadecimal require more storage
or less storage than the decimal system?
530:11 - Theoretically no, because this is
just a way of representing information
530:16 - and we'll see in a concrete
example in a moment.
530:19 - But inside of the computer, at the end
of the day, you're still storing bits.
530:22 - And using hexadecimal is not
using more or fewer bits,
530:25 - think of this as how
you might write it down
530:27 - on a piece of paper, just how
many digits you're going to write
530:30 - or on a computer screen, how many
digits you're going to see at once,
530:33 - but it doesn't change how the
computer is representing information
530:36 - because all they're representing at
the end of the day is zeros and ones.
530:39 - So in fact, let's go there.
530:40 - If this-- a moment ago
FF I claimed was 255--
530:45 - let's just rewind to week
zero and if we wanted
530:47 - to count to 255 in binary, that's
as high as you can count, recall,
530:51 - with eight bits.
530:52 - And there's only a few
of these numbers that
530:54 - are useful to memorize, like 255 is as
high as you can count with eight bits
530:58 - if you start at zero, because two to the
eighth is 256, but if you start at zero
531:02 - it's zero through 255.
531:04 - So in binary, recall if you have
eight bits, all of which were ones,
531:09 - and I won't do out the
math pedantically here,
531:11 - but if I do do this plus
this plus this, dot, dot,
531:13 - dot-- that's also going to give me 255.
531:16 - So this is what's interesting
here about hexadecimal.
531:19 - It turns out that an upside of
storing values in hexadecimal
531:24 - is that we're going to
see the first F represents
531:27 - the left half of all these bits,
and the second F in this case
531:31 - represents the rightmost
four of these bits.
531:33 - So it turns out hexadecimal
is very useful when you
531:36 - want to treat data in units of four.
531:39 - It's not quite eight, but units
of four, and that's not bad.
531:42 - Which is why-- if you use two
digits like I have thus far,
531:45 - 00 or FF or anything in between--
531:48 - that's actually a convenient way of
representing eight bits in total.
531:53 - One hex digit for the first four
bits, one hex digit for the second.
531:57 - And again, there's nothing new
intellectually here per se,
532:00 - it's just a different way of
representing the same story as before--
532:03 - zeros and ones.
532:05 - So in what context do we see this?
532:06 - Well, we talked about
memory last week, and we're
532:08 - going to talk more about it this week.
532:09 - If this is my computer's
RAM-- random access memory--
532:12 - you can again think of each byte as
having a number associated with it--
532:16 - its address or location.
532:18 - This might be zero, this might
be 2 billion, and so in the past
532:22 - I've described these as just
this, using decimal numbers.
532:25 - Here's byte zero, one, two, three,
four, five, six, seven, 15, 16
532:29 - would be here, and so forth.
532:30 - But it turns out in the world of memory,
and thus today, programming, people
532:35 - tend to count memory
bytes using hexadecimal.
532:40 - Partly just by convention,
but also partly
532:42 - because it's a little more
succinct and again, each digit
532:44 - represents four bits, typically.
532:48 - So what comes after F here?
532:49 - Well, if I think about
the computer's memory,
532:51 - I normally might do
after F, which is 15, 16.
532:56 - But instead, one zero, one
one, one two, one three-- this
533:01 - is not 10, 11, 12, 13, because I claim
I'm in the context of hexadecimal now.
533:05 - As per the previous
slide, we already started
533:07 - going into A's through
F's, so you immediately
533:10 - see here a possible problem.
533:13 - Why is this now worrisome,
if all of a sudden you're
533:16 - seeing seemingly familiar
numbers like 10, 11, 12, 13?
533:22 - We didn't really stumble
across this problem
533:24 - when it was all zeros and ones before.
533:25 - Yeah.
533:26 - AUDIENCE: Try to do math [INAUDIBLE].
533:30 - DAVID J. MALAN: Yeah, so if you're
writing some code in C that's
533:33 - doing some math, you
might accidentally--
533:35 - or the computer might accidentally
confuse hexadecimal with decimal
533:37 - if they look in some context the same.
533:40 - Any number on the board
that doesn't have a letter
533:42 - is ambiguously hexadecimal
or decimal at this point,
533:46 - and so how might we resolve this?
533:48 - Well, it turns out that what
computers typically do is this.
533:51 - By convention, any time you
see 0x and then a number,
533:55 - that's a human convention of saying--
533:58 - signaling to the reader that this
is in fact a hexadecimal number.
534:01 - So if it's 0x10, that
is not the number 10,
534:05 - that is the hexadecimal number one
zero, which recall we said earlier,
534:10 - is how you count up to 16.
534:13 - And again, these are not the
kinds of things to memorize,
534:16 - it's really just the system for
how you think about these things.
534:19 - So henceforth today, we're going
to start seeing hexadecimal
534:22 - in a bunch of contexts.
534:23 - When you write code, you might even
write code using some hexadecimal
534:26 - but again, it's just a different
way of representing numbers
534:29 - and humans have different
conventions for different contexts.
534:32 - All right, so with that said, any
questions now on this building block?
534:36 - But here on out, we'll start
using it in some actual code.
534:41 - Any questions?
534:43 - Nothing so far?
534:44 - All right.
534:45 - So, let's go ahead and consider
maybe a familiar example.
534:49 - Something where involving code,
where I initialize a variable like n
534:52 - to a value like 50, in this case.
534:54 - And then let's start to tinker
around with what's going
534:57 - on inside of the computer's memory.
534:58 - In a moment I'm going to load
up VS Code on my computer
535:01 - and I'm going to go ahead and whip
up a program that very simply assigns
535:04 - a value like the number
50 to a variable called n,
535:08 - but today, keep in mind that
that variable n and that value 50
535:14 - is going to be stored somewhere
in my computer's memory,
535:16 - and it turns out today we'll introduce
a bit more syntax so you can actually
535:19 - see where things are being stored.
535:22 - So let me click over to VS Code here.
535:24 - I'm going to create a
program called address.c just
535:27 - to explore computer's
addresses today, and I'm
535:29 - going to do an include stdio.h,
int main(void), as usual.
535:34 - No command line arguments for now.
535:35 - I'm going to declare that
variable n equals 50,
535:38 - and then I'm just going to
go ahead and print it out.
535:40 - So nothing very interesting but I'll
use %i backslash n and then comma n
535:46 - to print out that value.
535:47 - Nothing here should be very
interesting to compile or run,
535:50 - but I'll do it just to make
sure I didn't make any mistakes.
535:53 - Looks like as expected, it simply
prints out the number 50, like this.
535:58 - But let's consider then, what this
code is doing underneath the hood
536:02 - when it's actually run on your machine.
536:04 - So here we have that grid of memory.
536:06 - That variable n is an int,
and if you think back,
536:10 - how many bytes typically
do we use for an int?
536:14 - Yeah.
536:15 - Four, so four bytes, or 32 bits.
536:18 - So if each of these squares represents
one byte, then my computer, somewhere
536:21 - in my memory, or RAM, is
using four of these squares.
536:25 - Maybe it ends up over here just
because there's other stuff being
536:27 - used elsewhere, for instance.
536:29 - Though I don't really
know, and frankly, I
536:30 - don't really care where it ends
up, just that it ends up somewhere.
536:33 - So the variable-- the value 50 is
stored here in a variable called n.
536:37 - Even though I've written it as
decimal, just like in my code--
536:40 - let me again remind that this is 32
zeros and ones representing that 50--
536:45 - it's just going to be very tedious if
we start writing everything in binary,
536:48 - so I'll use the more comfortable
human decimal system.
536:51 - So that's what's going on
inside of the computer's memory.
536:54 - So what if I actually wanted to
start tinkering with its location,
536:58 - or maybe just knowing its location?
537:01 - Well, this variable n
indeed has a name, n--
537:05 - that's a label of sorts for it--
but at the end of the day that 50 is
537:09 - technically at a specific address,
and I'm going to make one up--
537:11 - 0x123, and it's 123
because I really don't
537:14 - care what it is, I just want an
address for the sake of discussion.
537:17 - So way over here off screen might be
byte zero, way down here is byte 0x123.
537:24 - It's in hexadecimal
notation just by convention.
537:28 - So how can I actually see where
my variables are ending up
537:32 - in memory if I'm curious to do so?
537:33 - Well, let me go back to my
code here and let me actually
537:37 - change this just a little bit.
537:39 - Let me go ahead and introduce,
for instance, another symbol
537:44 - here and another topic
altogether, namely pointers.
537:48 - So a pointer is a variable that
stores the address of some value--
537:54 - the location of some value
or more specifically,
537:57 - the specific byte in which
that value is stored.
538:01 - So again, if you think of your memory
as being a whole bunch of bytes--
538:04 - zero at top left, 2 billion
or whatever at bottom right,
538:07 - depending on how much RAM you have--
538:08 - each of those things has
a location, or an address.
538:10 - A pointer is just a variable
storing one such address.
538:14 - So it turns out that in the world of
C, there's a couple of new symbols
538:20 - we can use if we want to see what
it is we're talking about here,
538:24 - and those two operators,
as of today, are these.
538:27 - You can use the ampersand
operator in C in a couple of ways.
538:31 - We already saw it very briefly
to do ampersand ampersand--
538:34 - it's kind of and two
Boolean expressions together
538:37 - in the context of a conditional.
538:39 - This is different.
538:40 - A single ampersand is
the address of operator.
538:43 - So literally, in your code, if you've
got a variable like n or anything else
538:48 - and you write &n, C is going to figure
out for you what is the address of that
538:53 - variable n in the computer's memory.
538:55 - And it's going to give you a number,
otherwise known as the address of that.
539:01 - If you want to store that
address in a variable
539:05 - even though yes, it's a number like
0x123, you have to tell C in advance
539:11 - that you want to store not an int
per se, but the address of an int.
539:17 - And the syntax for doing that--
somewhat nonobviously-- is
539:20 - to use an asterisk here,
a star operator, and you
539:24 - say this when creating the variable.
539:26 - If you want p to be a pointer, that
is the address of some other variable,
539:30 - you do int star p.
539:32 - And the star just tells the computer,
this is not an integer per se,
539:36 - this is the address of
something that yes, is an int,
539:40 - but we're just being more precise.
539:41 - So on the right hand side you
have the address of operator.
539:44 - As always with the equal sign,
you copy from right to left.
539:47 - Because &n is by definition the address
of something you have to store it
539:51 - in a pointer, and the way to declare a
pointer is to specify the type of value
539:57 - whose address you're storing, and then
use the star to indicate that this is
540:01 - indeed a pointer and not
just a regular old int.
540:04 - So let's see this in practice.
540:06 - Let me go back to my own
source code here and let
540:09 - me make just a couple of tweaks.
540:11 - I'm going to leave n
alone here but I'm going
540:13 - to go ahead and initially just do this.
540:18 - Let me say int star
p equals ampersand n,
540:22 - and then down here, I'm going to
print out not n this time, but p--
540:27 - the variable p.
540:28 - And then even though yes, it's just
a number and therefore I could use %i
540:33 - for integers, there's actually a special
format code in printf for printing
540:37 - pointers or addresses, and that's %p.
540:40 - So now let's go ahead and
recompile this, make address--
540:44 - so far so good-- ./address,
Enter, and a little weirdly,
540:49 - but perhaps understandably now,
the address in my computer's memory
540:53 - at which the variable n happened to
be stored was not quite as simple
540:57 - as 0x123.
540:59 - This computer has a lot
more memory so technically,
541:01 - it was stored at 0x7FFCB4578E5C.
541:07 - Now that has no special
significance to me.
541:10 - It could have ended up
somewhere else altogether,
541:12 - but this is just where, in my
computer-- or technically the cloud
541:15 - server to which I'm connected
using VS Code here--
541:18 - that just happens to
be where n ended up.
541:20 - And strictly speaking, I don't even
need to introduce this variable.
541:23 - I could get rid of p
and I could just say
541:26 - print not just n, but the address
of n and achieve the same thing.
541:30 - You don't need to temporarily
store it in a variable.
541:32 - Let me just do make
address again, ./address,
541:35 - and now I see this address here.
541:38 - And notice if I keep running the
program, it's actually moving around.
541:41 - There's other stuff presumably
going on inside of the computer.
541:44 - Maybe it's actually randomizing it so
it's not always at the same location.
541:47 - That can actually be a security
feature underneath the hood,
541:50 - but this happens to be at that moment
in time where that value is in memory,
541:55 - quite like our picture a moment ago.
541:58 - All right, so let me pause
here to see if there's now
542:02 - any questions on what we just did.
542:03 - Yeah?
542:05 - AUDIENCE: Is there any
way to control where
542:07 - you are storing something in memory?
542:10 - Does it even matter if
it works, or does it just
542:14 - matter that you could go in
and locate where something is?
542:16 - DAVID J. MALAN: Really good question.
542:18 - Is there any way to control
where something is in memory?
542:20 - Short answer is yes, and this is
both the power in the danger of C,
542:23 - and we're going to do this today
and make a few deliberate mistakes,
542:26 - because with this power of going to or
getting the address of any variable,
542:31 - I could just arbitrarily
right now write code
542:33 - that stores a value at byte 2 billion,
or zero, or anything in between.
542:37 - But that also means potentially,
I could start creepily looking
542:42 - around at all of the computer's memory,
even at things that I didn't put there.
542:46 - Maybe other programs, maybe
other parts of programs
542:48 - and indeed, this is a
potential security threat,
542:50 - if suddenly you're able
to just look anywhere
542:53 - you want in the computer's memory.
542:54 - Now, I'm overselling it a little bit
because nowadays, in this decade,
542:59 - there are some defenses
in place in compilers
543:01 - and in our operating systems that
do hedge against this a little bit.
543:05 - But this is still a very
frequent source of problems,
543:07 - and later today we'll
talk briefly about things
543:10 - called stack overflow,
which is not just a website,
543:13 - it is a problem that you can encounter.
543:15 - Heap overflow, and more
generally buffer overflows--
543:17 - there's just so many things that can
go wrong using this language called C,
543:21 - and if any of you have encountered
a segmentation fault yet?
543:24 - I think we saw a few
hands for that already.
543:26 - You touched memory
that you shouldn't have
543:29 - and odds are you did it most recently
by going too far in an array.
543:33 - Going to the left, or negative in an
array, or somehow looking at memory
543:37 - you shouldn't have.
543:38 - And we'll explain today why it
is you were able to do that.
543:42 - Other questions on
these primitives so far?
543:44 - Yeah, from Carter?
543:46 - AUDIENCE: [INAUDIBLE] pointer star p,
but then we used p later in the code.
543:50 - Is it called star p or p?
543:51 - DAVID J. MALAN: Good question.
543:52 - Earlier, we used star p.
543:53 - Let me rewind in time to the
previous version of this code,
543:56 - where I actually had
a variable called p.
543:58 - Just like with variable
declarations in the past,
544:02 - once you've declared a variable to
be an int, a char, a bool, or an int
544:07 - star, a.k.a. a pointer,
you don't thereafter
544:11 - keep using the word
int or now, the star.
544:14 - Once you've declared it, that's it.
544:15 - You only refer to it by name.
544:17 - And so it's very
deliberate what I did here,
544:21 - saying that the type here is int star--
544:24 - that is a pointer to an int--
544:26 - but here I just said the name
of the variable, as always.
544:28 - I didn't repeat int, and
I also didn't repeat star.
544:31 - But at the risk of bending
one's minds a little bit there
544:34 - is unfortunately one other use for the
star operator, and that's as follows.
544:40 - If you want to print out not
the address of something,
544:44 - but what is at a specific
address, you can actually do this.
544:49 - If I want to print out the integer
via %i, that is at that address,
544:54 - I can actually use the star here, which
technically contradicts what I just
544:59 - said but it has a different
function here-- a different purpose.
545:02 - So let me go ahead and do
this in two different ways.
545:04 - I'm going to leave this
line of code as is,
545:06 - but I'm going to add
another line of code now
545:08 - that prints out what apparently
will be an integer, in a moment.
545:12 - So %i backslash n, and I could
see-- and let me just do n for now.
545:16 - So there's really nothing
special happening now, I'm
545:18 - just adding a sort of
mindless printing of n.
545:20 - So make address, ./address--
545:23 - there's the current address of
n and there's the value of n.
545:26 - But what's kind of
cool about C here, too,
545:29 - is if you know that a value is
at a specific address like p,
545:34 - there's one other use for this
star operator, the asterisk.
545:37 - You can use it as the
so-called dereference operator,
545:41 - which means go to that address.
545:44 - And so here what we actually have
is an example of a pointer p,
545:50 - which is an address like
0x123 or 0x7FF and so forth.
545:54 - But if you say star p now, you're
not redeclaring the variable
545:58 - because I didn't mention int--
545:59 - you're going to that address in p.
546:02 - So let me recompile this now.
546:04 - Make address, ./address,
and just to be clear--
546:10 - what should I see?
546:12 - I'm first going to see the
pointer itself, 0x something.
546:15 - What's the second line of output
I should presumably see now?
546:21 - Shout a little louder.
546:22 - So I'm hearing 50, and that's true
because if you figure out the address
546:27 - of n and print it in line seven, but
then go to the address of n, a.k.a. p,
546:33 - that's indeed going to just
show you the number n--
546:36 - the value of n again.
546:39 - All right, any questions now on
this syntax-- and I will concede,
546:42 - I think this is confusing--
the fact that we
546:44 - use the star for
multiplication, the fact
546:46 - that we use the star
to declare a pointer,
546:48 - but then we use a star in a third
way to dereference the pointer
546:51 - and go to the pointer.
546:53 - It's just too confusing, honestly,
but with practice comes comfort.
546:56 - Yeah.
546:58 - AUDIENCE: [INAUDIBLE]
547:07 - DAVID J. MALAN: Good question.
547:09 - Do you-- when you are using
the ampersand operator
547:12 - to get the address of
something, the onus
547:14 - is on you at the moment to know
what you are getting the address of.
547:18 - Is it a string?
547:19 - Is it a char?
547:20 - Is it a bool?
547:21 - Is it an int?
547:22 - I wrote this code so I
know in line six that I'm
547:25 - trying to get the address
of what is an integer.
547:28 - AUDIENCE: What about line eight?
547:30 - DAVID J. MALAN: In line
eight you don't have
547:34 - to worry about that-- good question.
547:36 - Notice in line eight, I didn't tell
the computer, other than the %i,
547:40 - what kind of address I'm going
to, but I did already in line six.
547:44 - I told the compiler
that p, now and forever,
547:47 - is going to be the address of an int.
547:50 - That's enough information in advance so
that printf, or really the language C,
547:55 - still knows on line eight
that p is a pointer to an int,
547:59 - and that way it will print out
all four bytes at that address,
548:02 - not just part of it, and not
more than those four bytes.
548:06 - Good question.
548:07 - Yeah, next to you.
548:09 - AUDIENCE: Do pointers have pointers?
548:10 - DAVID J. MALAN: Do
pointers have pointers?
548:11 - Yes.
548:12 - We won't do this today by
having pointers to pointers,
548:16 - but yes, you can use star
star, and then things get--
548:19 - I'm sorry.
548:21 - We won't do that today and
we won't do that often.
548:23 - In fact Python, another language,
is just a couple of weeks
548:26 - away, so hang in there.
548:27 - Almost there.
548:28 - A question back here?
548:29 - Was there?
548:31 - That was-- more verbal
feedback like that
548:33 - is helpful as we forge into
the more complicated stuff.
548:36 - Other questions?
548:36 - Yeah.
548:38 - AUDIENCE: What's the
point of [INAUDIBLE]??
548:43 - DAVID J. MALAN: What's the
point of printing the address?
548:46 - AUDIENCE: Like, using the
address to [INAUDIBLE]..
548:49 - DAVID J. MALAN: Sure.
548:50 - What's the point of doing this?
548:51 - If you don't mind, let me--
let's get there in a moment.
548:54 - This is not the common use case,
just printing out the address--
548:56 - who really cares?
548:58 - At the moment we care only
for the sake of discussion.
549:00 - We're soon going to start
using these addresses.
549:02 - So hang in there just a
little bit for that one, too,
549:05 - but it will solve some
problems for us before long.
549:08 - So let's actually just now depict what
was going on inside of the computer's
549:12 - memory just a moment ago.
549:15 - So if I toggle back here, let
me redraw my computer's memory,
549:19 - now let me plop into the memory n,
which is storing in this program
549:22 - the number 50.
549:23 - Where is p in my computer's memory?
549:25 - Specifically, I don't know and
apparently it moves around each time I
549:29 - run the program so for
the sake of discussion,
549:31 - let's just propose that if 50 ended
up at address 0x123, I don't know--
549:36 - p ends up over here, at address--
549:38 - whoops-- at whatever
address this is here.
549:42 - But notice a couple of curiosities now.
549:44 - If p is a pointer, it's
the address of something.
549:47 - So the value in p should be an address,
and I've indeed written it as such--
549:53 - 0x123, and technically there's not
an x there, there's not a zero there,
549:57 - there's not even a 123
there per se-- there's
549:59 - a pattern of bits that
represents the address 0x123.
550:03 - But again, that's weak zero--
don't care about binary day-to-day.
550:07 - So if this is p, and this I claimed
was n, why is p so much bigger?
550:13 - Can someone conjecture here?
550:15 - Because it turns out whether n
is an int or a char or a bool,
550:20 - which are different
types-- heck, even a long--
550:23 - it turns out that p is always going
to take up eight squares on the board,
550:27 - but why might that be?
550:29 - What might explain that?
550:34 - Yeah, thoughts?
550:36 - AUDIENCE: Perhaps it
allocates eight bytes,
550:40 - but it doesn't know the type
of the data [INAUDIBLE]..
550:44 - DAVID J. MALAN: OK, fair.
550:45 - Maybe it's allocating eight bytes
because it doesn't know the type.
550:47 - Turns out that's OK because
an address is an address.
550:50 - It's really up to the programmer to
use it as a string or a char or a bool.
550:53 - Other thoughts?
550:55 - AUDIENCE: Maybe the first four for
the actual number and the last four
551:00 - is some null that [INAUDIBLE]
where the pointer ends.
551:06 - DAVID J. MALAN: OK, possibly.
551:07 - It could be that pointers have
some complexity like a backslash n
551:10 - or something curious like that,
like we talked about for strings.
551:13 - Turns out that's not the case.
551:15 - It turns out that pointers
nowadays typically are, but not
551:18 - always are eight bytes, a.k.a.
551:21 - 64 bits, because you and
I-- our Macs, our PCs,
551:24 - heck-- even our phones have a lot
more memory than they did years ago.
551:28 - Back in the day, a
pointer might have only
551:30 - been 32 bits, or even only
eight bits way back in the day.
551:34 - It's considered 32 bits, because
that was the norm for some time.
551:36 - How high can you count,
roughly, if you've got 32 bits?
551:40 - What's the number we keep rattling off?
551:43 - 32 bits is roughly 2 to
the 32, so it's 4 billion,
551:48 - and I keep saying it's 2 billion if you
do negative, but in the world of memory
551:52 - there's a reason I keep saying
2 billion bytes, two gigabytes,
551:55 - because for a very long time that
was the maximum amount of memory
551:58 - a computer could have.
551:59 - Why?
552:00 - Because the pointers that
the computers were using
552:02 - were only, for instance, 32 bits.
552:04 - And with 32 bits, depending on whether
you allow for negatives or not,
552:07 - you can count as high as 2 billion,
roughly, or maybe 4 billion
552:10 - but you know what-- your
Mac, your PC, your phone
552:13 - could not have had five gigabytes of
memory, or 5 billion bytes of memory.
552:17 - You certainly couldn't have had
what computers nowadays come with,
552:20 - which might be 8 gigabytes of memory--
552:22 - 16 gigabytes of memory.
552:23 - Why?
552:24 - Because with 4 bytes, or 32
bits, you literally, physically,
552:28 - can't count that high, which means if I
drew a picture of all of the memory we
552:32 - would run out of numbers to describe
them, which means most of my memory
552:36 - would just be unusable.
552:37 - So pointers nowadays are
64 bits, or eight bytes.
552:41 - That's really big.
552:41 - I can't even pronounce
how big that number is,
552:43 - but it's plenty for the
next many years, and so
552:46 - we've drawn it that
way on the board here.
552:48 - Now let's just abstract this away.
552:49 - Let's get rid of all
the other bytes that
552:51 - are storing something or
nothing else, and let's now
552:54 - start to abstract away this
complexity because the reality is,
552:57 - to your question earlier--
552:59 - what is this useful for, or
what do we-- do we actually
553:01 - care about these addresses?
553:03 - Generally, no.
553:04 - We're doing this so that
you see there's no magic.
553:06 - We're just moving things around
and poking around in memory.
553:09 - But what a person would typically
do when talking about pointers
553:12 - would literally be to
just point at something.
553:14 - I really don't care
what address n is at,
553:17 - so it suffices when general, when
drawing pictures on a whiteboard,
553:20 - having a discussion
with another programmer,
553:22 - you just draw an arrow from the
pointer to the value in question,
553:26 - because neither you nor I probably care
about the specifics of 0x whatever.
553:31 - There's your pointer-- it's literally
an arrow, and we can see this.
553:35 - So it turns out that these
pointers, these addresses,
553:37 - are not that dissimilar to what
we've done for hundreds of years
553:41 - in the form of a postal system.
553:43 - For instance, here is a post office--
553:45 - here, no-- here is a
mailbox, and suppose
553:48 - that this is a mailbox labeled p.
553:50 - It's a pointer, and suppose
there's another mailbox
553:53 - way over there, which is just
another bite of my computer's memory.
553:57 - What are we really talking about?
553:59 - Well, you store in a computer's
memory values like the number 50,
554:03 - or the word "hi" inside of your
computer's memory at some location.
554:07 - But today we can also use
those same memory locations
554:11 - to store the address of things.
554:12 - For instance, if I
open this up here and I
554:16 - see OK, the value inside of this
mailbox is not a number like 50,
554:20 - it's actually an address--
554:21 - 0x123-- that's like a
pointer, a breadcrumb leading
554:26 - from one location in memory to another.
554:28 - And in fact, would someone who's
seated roughly over there--
554:30 - do you mind getting the mail over there?
554:33 - Any volunteers over in this section?
554:35 - Just need you to get to
the mailbox before I do.
554:38 - Who's being volunteered?
554:40 - Oh yes, please.
554:40 - Whoever is gesturing most
wildly, come on down.
554:46 - Sure.
554:53 - What's your name?
554:54 - AUDIENCE: Anfoo.
554:55 - DAVID J. MALAN: Say again?
554:56 - AUDIENCE: Anfoo.
554:57 - DAVID J. MALAN: Anfoo?
554:58 - OK, come on up to the edge of the
stage there and just to be clear--
555:01 - if this is p, that is
apparently n, but to make clear
555:05 - what we're talking about when
we're storing 0x whatever values--
555:07 - like 0x123, that's
essentially equivalent to my
555:11 - maybe pulling out something
like this and just
555:13 - abstractly pointing
to your mailbox there,
555:16 - or if you prefer,
pointing to the mailbox--
555:20 - OK, all right.
555:24 - Thank you.
555:24 - All right.
555:28 - This is akin to me
pointing at your mailbox,
555:30 - and if you want to go
ahead and open your mailbox
555:32 - and reveal to the crowd what's
inside your mailbox labeled n.
555:38 - All right.
555:41 - Thank you.
555:43 - We have a little CS50 stress
ball for your trouble.
555:46 - Thank you for coming up.
555:47 - So that's just to put a visual on
what it is we're talking about,
555:50 - because it can get very abstract,
very cryptic quickly when we're
555:53 - talking about addresses and memory and
drawing it like these little squares.
555:56 - But if you think about just walking
into a post office or an apartment
555:59 - complex that's got a lot of
mailboxes, those mailboxes
556:02 - essentially are a big
chunk of memory and each
556:05 - of those mailboxes has an address--
556:07 - this is apartment one, two,
three-- apartment 2 billion.
556:10 - And inside of those
mailboxes can go anything
556:13 - that can be represented as information.
556:15 - It could be a number
like n, or 50, or if you
556:18 - prefer it could be a
number that represents
556:21 - the address of another mailbox.
556:22 - And this is akin, really, if
you've ever had an apartment or you
556:26 - and your parents have moved,
to having a forwarding address.
556:28 - It's like having the
Post Office in the US
556:31 - put some kind of piece of paper
in your old mailbox saying,
556:34 - actually forward it
to that other mailbox.
556:37 - That really is all a pointer is doing.
556:39 - At the end of the day,
it's just a number
556:41 - but it's a number being
used in a different way
556:43 - and it's the syntax
that we've introduced,
556:45 - not just int but int star,
that tells the computer how
556:49 - to treat that number in
this slightly different way.
556:54 - Are there any questions then, on this?
556:57 - Yeah, in back.
556:59 - AUDIENCE: If you had a variable,
like int c, [INAUDIBLE]..
557:06 - DAVID J. MALAN: If I did int c and--
557:08 - say the code again?
557:10 - Once more?
557:12 - Equal to n, so let me
actually type it out.
557:14 - If I give myself another
line of code, tell me
557:16 - one last time what to type.
int is equal to n, like this?
557:22 - So this is OK, and I can't draw it
quite quickly enough on the board here,
557:27 - but this would be like creating another
four bytes somewhere in memory, maybe
557:31 - down here, that stores
an identical copy of 50
557:35 - because the assignment operator
from right to left copies one value
557:38 - to another.
557:39 - So that would just add one
more rectangle of size four
557:43 - to this particular picture.
557:45 - If I'm answering your
question as intended.
557:47 - OK, so that is week one style use of
assignment operators before pointers.
557:52 - I could, though, start copying
pointers but again, we'll
557:55 - come back to some of that complexity.
557:57 - Any other questions here?
557:58 - AUDIENCE: That was a great question.
558:00 - Does the pointer point--
558:02 - does the same pointer point
to the new replica as well?
558:05 - DAVID J. MALAN: Ah, good question.
558:06 - Short answer, no.
558:07 - And to repeat for the camera, if I
create a second variable like this,
558:12 - int c equals n, and I claim without
actually drawing it on the board
558:16 - that this gives me another rectangle,
the value of which is also 50,
558:20 - p does not get touched.
558:22 - And this is what's important
and really characteristic
558:24 - of C. Nothing happens
automatically for you.
558:28 - p is not going to be updated
unless you update p in some way,
558:31 - so creating a third
variable called c-- even
558:34 - if you're copying its
value from right to left,
558:36 - that has no effect on
anything else in the program.
558:40 - A good question.
558:41 - So what have we seen that's perhaps
now a little more explainable?
558:47 - Well, recall that we talked quite a
bit last week about strings, and just
558:51 - to recap in layperson's terms, what is
this string as you now understand it?
558:57 - So say-- well, let me
take a specific hand here.
558:59 - What's a string?
559:00 - How about over here.
559:02 - AUDIENCE: An array of characters.
559:03 - DAVID J. MALAN: OK, sure.
559:04 - Both of you are right.
559:05 - An array of characters.
559:06 - An array of characters, and we--
559:09 - I claimed-- or revealed last week
that string is not technically
559:12 - a feature built into C. It's
not an official data type
559:15 - but every programmer
in most any language
559:17 - refers to sequences of
characters-- words, letters,
559:21 - paragraphs-- as strings.
559:22 - So the vernacular exists but
the data type doesn't typically
559:26 - exist per se in C. So what
we're about to do, if you will,
559:29 - for dramatic effect, is take
off some training wheels today.
559:32 - The CS50 library implemented in the
form of the header file cs50.h--
559:36 - we claim has had a
bunch of things in it.
559:38 - Prototypes for GetString,
prototypes for GetInt,
559:42 - and all of those other
functions, but it turns out
559:44 - it also is what defines the
word "string" in such a way
559:48 - that you all can use it
these past several weeks.
559:51 - So let's take a look at an
example of a string in use.
559:54 - Here, for instance,
is a tiny bit of code
559:56 - that uses the word "string,"
creating a variable called s
560:00 - and then storing quote
unquote, hi, exclamation point.
560:03 - Let's consider what this looks
like now in the computer's memory.
560:06 - I don't care about all the other
bytes, let's just focus on these,
560:08 - and this per last week is
how "hi" might be stored.
560:11 - h-i exclamation point and then
one more, as someone already
560:14 - observed, that sentinel value--
that null character which
560:18 - just means eight zero bits to
demarcate the end of that string
560:21 - just in case there's
something to the right of it,
560:24 - the computer can now distinguish
one string from another.
560:27 - So last week we introduced
this new syntax.
560:30 - Well, if strings are
just arrays of characters
560:32 - you can then very cleverly use
that square bracket notation
560:35 - and go to location zero or one
or two, which are like addresses,
560:39 - but they're relative to the string.
560:41 - This could be at 0x123 or 0x456,
but with this bracket notation
560:46 - zero is always the beginning
of the string, one is the next,
560:49 - two is the next, and so forth.
560:51 - So that was our array syntax
for indexing into an array.
560:55 - But technically speaking, we
can go a little deeper today--
560:58 - technically speaking, if hi is
starting at the address 0x123 then
561:05 - it stands to reason that i is at
0x124, exclamation point's at 0x125,
561:11 - and the null is that 0x126.
561:14 - Now, I don't care about 123 per se,
but even though this is hexadecimal,
561:18 - this is correct math.
561:19 - Even in hex, if you just add
one when you start at 0x123,
561:23 - the next number is four,
five, six at the end.
561:25 - I don't have to worry
about A's, B's, and C's
561:27 - because I'm not counting
that high in this example.
561:30 - So if that's the case, and
my computer is actually
561:34 - laying out the word hi in memory
like that, well, what exactly is s?
561:42 - What exactly is s if,
at the end of the day,
561:45 - H-I exclamation point null is storing--
or is or stored at these addresses?
561:51 - Where is s?
561:52 - Now that I've taken off
those training wheels
561:54 - and showed you where H-I
exclamation point null actually are,
561:57 - what happened to s?
561:59 - Well s, as always, is
actually a variable.
562:03 - Even in the code I
proposed a moment ago,
562:05 - s is apparently a data type
that yes, doesn't come with C,
562:08 - but CS50's library makes it exist.
562:11 - s is a variable of type string,
so where is s in this picture?
562:16 - Well, it turns out that
s might be up here.
562:20 - Again, I'm just drawing it anywhere
for the sake of discussion,
562:24 - but s is a variable
per that line of code.
562:28 - What s is storing,
apparently, I claim, is 0x123.
562:32 - I actually don't really care about these
addresses, so let's abstract that away.
562:35 - s is apparently, as of now, today,
one week later, just a pointer
562:40 - to a character.
562:42 - Specifically, the first character in s.
562:44 - And this is the last
piece of the puzzle.
562:46 - Last week we had this clever way
of demarcating the end of a string.
562:50 - Well, it turns out that strings are
represented in the computer's memory
562:55 - as a variable that is a
pointer, inside of which
562:59 - is the address of the first
character in the string.
563:02 - So if s points at the
first character and you
563:05 - can trust that backslash zero
is at the end of the string,
563:07 - that's literally all you need to figure
out where a string begins and ends.
563:13 - So what do I mean by this?
563:14 - Well, let's be a little more concrete.
563:16 - In terms of this picture, if I've
started with this line of code here,
563:20 - it turns out all this time since
week 1, that the word string has just
563:25 - semi-secretly been an
alias for char star.
563:32 - I know, so char star.
563:34 - So why does this make sense?
563:36 - It's a little weird still,
but if in our previous example
563:39 - we were able to store the address of
an integer by declaring a variable
563:43 - called p, as int star p--
563:45 - well, if as of now strings
are just the address
563:48 - of the first character in a string, then
probably a string is just a char star
563:53 - because that means s is the
address of a character, the very
563:57 - first character in the string.
563:58 - Now, the string might have three letters
like it did, or four, or even a hundred
564:02 - if it's a long paragraph,
but that's fine
564:04 - because you can trust
that there's going to be
564:06 - that null character at the very end.
564:08 - So this is a general purpose
way of representing strings
564:12 - using this new mechanism in C.
564:15 - So in fact, let me go ahead
here and introduce maybe
564:18 - a couple of manipulations of this.
564:20 - Let me go back to my code here, and
let's get rid of this integer stuff,
564:24 - and let's instead now
do, for instance, this.
564:27 - Let me add in the CS50 library,
so we'll include CS50.H for now.
564:32 - I'm going to go ahead
and inside of main,
564:34 - give myself a string s
equals hi exclamation point.
564:37 - I don't type the backslash zero.
564:38 - C does that for me automatically by
using my double quotes like this.
564:43 - Now let me just go ahead and print it.
564:45 - So this again is week 1 style stuff
where I'm just printing a string.
564:48 - No pointers yet.
564:49 - So let me do make address, Enter,
./address, and hopefully I see hi,
564:55 - so nothing new there.
564:56 - But let's start to peel back
some of these layers here.
565:00 - Let me first of all, get rid of
the CS50 library for a moment
565:04 - and let me change string to char star.
565:09 - And it's a little bit weird
but yes, the convention
565:11 - is to say char, a space, then the
star, and then immediately thereafter
565:15 - the name of the variable.
565:16 - Strictly speaking though, you might
see textbooks or websites that
565:19 - do it like this or like
this, but the canonical way
565:22 - is typically to do it like that.
565:23 - So now no more CS50 library, no
more training wheels, if you will.
565:26 - I'm just treating strings
for what they really are.
565:29 - Let me go ahead and do
make address, Enter--
565:32 - so far so good-- ./address--
565:34 - and that, too, still works.
565:36 - So %s is a thing that comes with printf
because the word string is programmer
565:40 - terminology but strictly speaking
C doesn't have a string data type.
565:44 - It's always been char star,
so what this means now is I
565:48 - can start to have some fun
with these basic ideas,
565:52 - even though this is not purposeful
other than for the sake of discussion.
565:55 - But if s is this-- let me go back
and give myself the CS50 library.
565:59 - Let's put those training wheels
back on for just a moment
566:01 - so that I can do one
manipulation at a time.
566:04 - Here's my string s, as before.
566:07 - Well, let me go ahead and
declare a char called c,
566:10 - and let me store the first character
in the string there, which is
566:15 - s bracket zero, and
that should give me h.
566:18 - And then just for kicks, let
me go ahead and do char star--
566:21 - whoops-- let me go ahead and do
char star p equals ampersand c,
566:28 - and see what this
actually prints for me.
566:30 - Let me go ahead and
print out what p is here.
566:34 - So we're just playing around.
566:35 - So make address-- so
far so good-- ./address.
566:39 - All right, so what have I just done?
566:41 - I've just created a char c and
stored in it the letter H, which
566:46 - is the same thing as s bracket I, then
I'm saying, what's the address of c,
566:50 - and that's apparently 0x7FF whatever.
566:53 - So that's the address.
566:55 - But I technically
didn't have to do that.
566:57 - Let me go ahead and do two things now.
566:59 - Instead of just printing p, let me go
ahead and print out maybe s itself.
567:07 - Let me go ahead and do
make address, Enter--
567:09 - so far so good-- ./address and--
567:12 - damn it, what did I do wrong.
567:15 - Oh shoot, I didn't want to do that.
567:17 - Oh, I really made a mess of this.
567:21 - What did I want to do here?
567:23 - That was supposed to be impressive
but it was the opposite.
567:27 - So let me turn it around.
567:30 - So if I intended to do this,
why are lines nine and 10
567:34 - printing different values?
567:36 - Didn't really intend to go here,
but let me try to save this.
567:40 - Why are we seeing different addresses,
namely this address 402004 for s,
567:47 - and then 0x7FF for p?
567:52 - Any thoughts?
567:53 - Yeah, over here.
567:55 - AUDIENCE: [INAUDIBLE]
is the character c is
567:57 - its own sort of location
of the [INAUDIBLE],,
568:02 - and it's taking off just
the values [INAUDIBLE]..
568:04 - DAVID J. MALAN: Correct.
568:05 - So if I really wanted to
weasel my way out of this,
568:08 - this is a great answer to the
previous question which was about,
568:10 - what if I introduce another variable,
c, that's a copy of the value,
568:15 - and not in this case an
int, but an actual char.
568:18 - Here, I've made c be a copy of the
character that's at the beginning of s,
568:23 - but that's indeed a copy.
568:24 - So if I were to draw
it on the screen that
568:26 - would give me a different
rectangle in which this copy of h
568:30 - would actually be stored.
568:32 - So I didn't intend to
do this, but what you're
568:33 - seeing is yes, the address of s--
568:35 - and apparently that's at a
pretty low address by default
568:38 - here-- then you're
seeing the address of c.
568:40 - But even though each
of them is h, I claim
568:43 - one is at a different address in memory.
568:45 - And this has always been happening.
568:46 - Any time you created one variable
or another it was ending up here,
568:49 - or here, or here, or
somewhere else in memory.
568:51 - Now for the first time all we're
doing is actually just poking around
568:54 - the computer's memory to
see what is actually there.
568:57 - So let me actually back
this up a little bit
569:01 - and do what I intended to do here,
which was something like this.
569:04 - So if string s equals quote
unquote, hi, let's go ahead
569:08 - and give myself a pointer, called
p, to the first character in s.
569:18 - All right, so now let me go ahead and
print out the value of this pointer,
569:22 - %p, printing out p.
569:24 - So we're just going to
do one thing at a time.
569:26 - So make address, Enter, ./address.
569:29 - There, at the moment, is the
address of the first character in s.
569:34 - What I meant to do now, was this.
569:36 - If I want to print out
two things this time,
569:39 - let me print out not only what p is,
but also what s itself originally is.
569:44 - Because if I claim that everyone from
last week should be comfortable with
569:48 - s bracket zero just representing
the first character in s
569:51 - by definition of strings
being arrays of characters.
569:54 - Then s, as of today, is itself
the address of a character,
570:01 - the first one in s.
570:02 - So if I now do make
address, and do ./address,
570:06 - this time I see the same exact things.
570:08 - Thank you.
570:13 - This is really the lamest sort
of thing to be applauding over,
570:16 - but what we're demonstrating here is
that s is by definition the address
570:21 - of the first character in c.
570:23 - So if we borrow some of our
mental model from last week--
570:26 - well, if s bracket zero is the first
character in c, doing the ampersand on
570:31 - that expression should be the same as s.
570:33 - Now this isn't to say that we
would jump through these hoops
570:36 - all the time with this much syntax,
but this is just to do proof by example
570:40 - that s is in fact, as I claimed a moment
ago, just the address of a character.
570:46 - Not even multiple characters, it's
the address of a single character,
570:50 - but the key thing is it's the address
of the first character in the string,
570:53 - and per last week we
trust that C is going
570:57 - to look for that null
character at the very end just
571:00 - to make sure it knows where
the string actually ends.
571:04 - All right, a question came up over here.
571:07 - AUDIENCE: [INAUDIBLE]
571:20 - DAVID J. MALAN: Correct.
571:21 - To summarize, on line
eight, when I am using %p--
571:25 - that just means print a pointer
value, so 0x something--
571:28 - I'm passing it s.
571:30 - Previously, when we used %s, printf knew
to print not just the first character
571:36 - of s, but h, i, exclamation point, and
then stop when it hits the backslash
571:40 - zero.
571:41 - p is different. %p tells the
computer to go to that address--
571:47 - sorry, tells the computer to
print that address on the screen.
571:52 - So this is where %s all
this time has been powerful.
571:55 - The reason printf worked
in week 1 and 2 and 3
571:59 - was because printf was designed
by some human years ago
572:02 - to go to the address that's
being passed in-- for instance,
572:05 - s-- and print out
character after character
572:07 - after character until it sees the
null character backslash zero,
572:11 - and then stop printing it.
572:13 - So that's-- you're getting a lot
of functionality for free from %s.
572:16 - Today we're using
something much simpler, %p,
572:19 - which just literally prints what s is.
572:22 - And the reason we
don't do this in week 1
572:24 - is just because this
is like way too much
572:26 - to be interesting when
all you want to print out
572:28 - is hi or hello, world, or the like.
572:29 - But now what we're
really doing is revealing
572:31 - what's been going on this whole time.
572:34 - And let me make one other example here.
572:36 - Let me go ahead and get
rid of this variable
572:37 - here and let me just print out a
few things to make the same point.
572:41 - I'm going to print out not just s
like I did here, but let's go ahead
572:45 - and print out every--
572:46 - the address of every character in s.
572:48 - So let's get the first letter
in s and get its address,
572:52 - and I'm going to do copy
paste for time's sake,
572:54 - but not something I would do frequently.
572:57 - So let me print out the address of the
first character, the second character,
573:01 - the third, and actually
even the fourth, which
573:03 - is the backslash zero, by doing this.
573:06 - So when I compiled this program--
make address, ./address--
573:11 - I should see two
identical values and then
573:14 - additional values that
are one byte away.
573:17 - In my diagram a moment ago, my addresses
were arbitrarily 0x123, 124, 125, 126.
573:22 - Now it starts at, by chance,
0x402004, which is s.
573:29 - 0x402004 is the same thing
as s because I'm just
573:32 - saying go to the first character
and then get its address.
573:35 - Those are one in the same now.
573:36 - And then after that
is 0x402005, 006, 007,
573:42 - because that is just like the diagram.
573:44 - Go to the i, to the exclamation
point, and to the null character.
573:48 - So all I'm doing now is using my
newfound understanding of what
573:51 - ampersand does and what the star
does, is I'm just playing around.
573:54 - I'm poking around in
the computer's memory.
573:57 - Just to demonstrate there's no magic.
573:59 - It's all there very deliberately
because I or printf or someone
574:02 - else put it there.
574:02 - Yeah.
574:04 - AUDIENCE: [INAUDIBLE]
574:11 - DAVID J. MALAN: Really good observation.
574:12 - So it's indeed the case
that hi, unlike 50,
574:16 - is ending up at a very low address,
not the 0x7FF wherever it was.
574:21 - That's actually because,
long story short, strings
574:24 - are often stored in a different
part of the computer's memory--
574:27 - more on that later
today-- for efficiency.
574:29 - There's actually only going to be one
copy of the word "hi" and exclamation
574:32 - point, and the computer is going to
tuck it at the beginning of my memory,
574:36 - but other values like
ints and floats and the
574:39 - like-- they end up lower
in memory by convention.
574:41 - But a good observation, because
that is consistent here.
574:45 - All right, so a couple final details
then, on what's been going on here.
574:48 - Let me go ahead and claim that
we implemented char star--
574:54 - or rather, string as a
char star as follows.
574:56 - As of last week we
were writing this code.
574:59 - As of this week, we can now start
writing this code because char star
575:03 - specifically, we invented
in the CS50 library.
575:06 - But it turns out you've seen a way
of inventing your own data types.
575:10 - Recall this thing here.
575:11 - We played around last time with data
structures, or the struct keyword in C,
575:16 - and briefly the typedef keyword,
which defines a type for you.
575:20 - And if I highlight
what's interesting here,
575:22 - the way we invented a
person data type last time
575:25 - was to define a person as having
two variables inside of it--
575:28 - a structure that encapsulates a
name and encapsulates a number.
575:33 - Now even though the syntax is a little
different today because of the star
575:37 - thing, notice that this could be a
similar application of that idea.
575:43 - If I want to create a type called
string, highlighted in yellow here,
575:47 - then I use typedef to make
it defined to be char star.
575:51 - So this is literally all
that has ever been in CS50.h,
575:55 - in addition to those prototypes
of functions we've talked about.
575:58 - typedef char star string
is a one-line code
576:01 - that brings the word string
as a data type into existence,
576:05 - and that's all that's ever been there.
576:07 - But the star, the char star,
is just too much in week 1.
576:10 - We wait until this point
to peel back that layer.
576:14 - are any questions, then,
on what a string is?
576:16 - What star or the ampersand are doing?
576:19 - Yeah.
576:20 - AUDIENCE: [INAUDIBLE]
576:23 - DAVID J. MALAN: Oh my God.
576:25 - Massive spoiler, but yes.
576:26 - If that is-- is that why when you
compare two strings as I briefly
576:30 - did, or almost did, problems arise.
576:34 - And in fact yes, last
week we use str compare--
576:36 - STRCMP-- for a very deliberate
reason because yes, the spoiler is I
576:40 - accidentally would have compared two
addresses in memory, not the strings
576:45 - at those addresses.
576:47 - Other questions here.
576:50 - All right, well, before we give
ourselves maybe a 10 minute break here,
576:53 - we have lots of pieces of paper.
576:54 - If anyone wants to come on up and
play with this big stack of Post-Its,
576:57 - if you want to make your own
eight by eight grid of something
576:59 - to share with the class if you're
artistically inclined, come on up.
577:02 - Otherwise, let's take 10 minutes
and will return after 10.
577:05 - All right, so let's come
back to this question of how
577:10 - we can start to use these pointers
and these addresses, ultimately
577:13 - in an interesting way.
577:14 - The goal ultimately
next week is going to be
577:16 - to use these addresses to really
stitch together more complicated data
577:20 - structures than just persons,
like last week, or candidates
577:23 - in the context of an
electoral algorithm,
577:25 - if you will, and actually really use
our memory in the most versatile way
577:28 - to represent not just
images but maybe videos
577:32 - and other two-dimensional
structures as well.
577:34 - But for now, let's come back
to this address example,
577:36 - whittle it down to just a hi initially,
and see what's going on again, here
577:41 - underneath the hood.
577:42 - So let me re-add the
CS50 library just so we
577:45 - use our synonym for a moment,
that is the word string,
577:49 - and I'll redefine s as a string.
577:51 - And what I didn't mention before
is that these double quotes
577:54 - that you've been using for some
time are actually a little special.
577:57 - The double quotes are
a clue to the compiler
578:00 - that what is between them is in
fact a string as we now know it,
578:04 - which means the compiler will
do all the work of figuring out
578:07 - where to put the h, the
i, the exclamation point,
578:10 - and even adding for you
automatically a backslash zero.
578:13 - And what the compiler
will do for you, too,
578:15 - is figure out what address
all four of those chars
578:18 - ended up at and store it
for you in the variable s.
578:22 - So that's why it just happens with
strings without using ampersands
578:26 - or even stars explicitly, but the star
at least has been there because again,
578:31 - string is just synonymous
now with char star.
578:33 - It's not really as readable,
but it is now the same idea.
578:37 - So I'll leave string in place
just to do something week
578:40 - 1 style here for a moment, and let's go
ahead and print out a few characters.
578:43 - So I'm going to use %c this time, and
I'm going to print out s bracket zero
578:49 - and then I'm going to print out
s bracket one and s bracket two,
578:54 - literally doing week three
style from last week--
578:58 - a printing of every character
in s as though it were an array.
579:03 - So ./address should give
me h-i exclamation point.
579:06 - And if I really want to get
curious, technically speaking,
579:09 - I could print out one more location,
and let me go ahead and recompile,
579:14 - make address ./address and there is,
it would seem, the backslash zero.
579:19 - I'm not seeing zero because I didn't
type literally the zero char in ASCII,
579:25 - it's literally eight zero bits
which are technically unprintable,
579:28 - if you will, in printf speak.
579:30 - And so what I'm seeing here
is like a blank symbol.
579:32 - That just means there is
something else there--
579:34 - it's apparently all eight
zero bits, but they are there
579:39 - even though we're not seeing
them literally right now.
579:41 - Well, let's go ahead and
peel back one of these layers
579:44 - and let me go ahead and get rid of
the CS50 library and get rid of,
579:48 - therefore, the word string because
again, henceforth it's just char star.
579:51 - Nothing else is different.
579:53 - I'm going to now do
make address, ./address,
579:56 - and it's the same exact thing.
579:57 - And now, let's just focus on the hi
rather than even worry about that.
580:00 - So I'm going to recompile one last time
and now I have h-i exclamation point.
580:05 - Well, it turns out that the
array notation we used last week
580:10 - was technically some of
this syntactic sugar.
580:12 - Sort of a neat way to use
syntax in a useful way,
580:16 - but we can see more explicitly today
what the square brackets for a string
580:21 - is actually doing.
580:23 - Let me go ahead and do this.
580:25 - Let me adventurously say I
want to print out not s bracket
580:30 - zero, but I want to print out
whatever the first character of s is.
580:36 - So to be clear, what is s now?
580:38 - It's the address of a string.
580:39 - OK, but what is s, really?
580:41 - s is the address of the
first char in a string
580:44 - and again, that's sufficient for
defining a string because eventually
580:47 - the computer will see that there's
a backslash n at the end of it.
580:50 - So s is specifically the address
of the first character in a string.
580:56 - So that means, using my
new syntax, if I want
580:59 - to print out that first
character I can print out star
581:02 - s, because recall that star is the
dereference operator when you don't
581:06 - repeat the word char, you
don't repeat the word int--
581:09 - you just use the star here.
581:10 - That means go to that address.
581:13 - Similarly, if I, in my newfound
knowledge of how strings work,
581:18 - know that the h comes first,
then the i right after it,
581:21 - then the exclamation point, then
the backslash zero, contiguously
581:25 - one byte apart, I could
start to do some arithmetic.
581:29 - I could go to s plus 1 byte and
print out the second character,
581:34 - and I could print out
whatever is at s plus 2--
581:38 - in fact, doing what's generally
known as pointer arithmetic.
581:41 - Literally treating pointers
as the numbers they are--
581:44 - hexadecimal or decimal, doesn't really
matter-- it's still just numbers.
581:48 - And go ahead and add
one byte or two bytes
581:51 - to them to start at the
beginning of a string
581:53 - and just poke around from left to right.
581:56 - So this now is equivalent to what we
did last week using square bracket
582:00 - notation, but now I'm re implementing
that same idea with this lower level
582:05 - plumbing, understanding ampersand
and stars now a little bit more,
582:09 - so if I remake this
program and do ./address,
582:11 - I should still see
h-i exclamation point.
582:14 - But what I'm really doing is
just kind of demonstrating,
582:16 - hopefully, my understanding
of what really
582:20 - is going on in the computer's memory.
582:22 - Now, programmers who are
maybe trying to show off
582:24 - might actually write this syntax.
582:25 - I think the more common syntax
would be what we did last week--
582:28 - s bracket zero, s bracket one.
582:30 - Why?
582:30 - It's just a little more
readable and we don't
582:32 - need to brag about or care about
this underlying representation.
582:36 - The square brackets last week
we're an abstraction, if you will,
582:39 - on top of what is lower level math.
582:42 - But that's all that's going
on underneath the hood.
582:44 - We're poking around from
byte to byte to byte.
582:48 - All right, let me pause here, see if
there's any questions on that one.
582:53 - Any questions on this?
582:56 - Let's do one more then, just
to demonstrate that this is not
582:59 - even specific to strings.
583:00 - Let me go ahead and
get rid of all of this
583:02 - and let me give myself an array
of numbers like I did last week.
583:06 - So if I'm going to
declare all the numbers
583:09 - at once using this funky
curly brace notation,
583:11 - I can do like 4, 6, 8, 2, 7, 5, 0.
583:15 - So seven different numbers inside
of an array that's automatically
583:19 - initialized like this.
583:20 - I don't, strictly speaking,
need to say seven.
583:22 - The compiler is smart
enough to figure out
583:24 - how many numbers I put
with commas between them,
583:26 - and that just gives me an array
containing 4, 6, 8, 2, 7, 5, 0.
583:31 - So it turns out I can print each of
these numbers in the familiar way.
583:34 - I can do a printf of %i backslash n,
and I can print numbers bracket zero,
583:40 - and let me just do some quick copy/paste
just to print the first three of these.
583:44 - Theoretically, that should
print out 4, 6, 8, and so forth.
583:49 - But I can do the same sort
of manipulation understanding
583:52 - what pointers now are,
using pointer arithmetic.
583:55 - So let me actually unwind this
and just go back to one printf,
583:59 - and instead of printing numbers bracket
zero like I might have last week,
584:02 - let me just go and print out
whatever is at that address--
584:06 - so asterisk numbers.
584:08 - Let me then print out
the second digit, which
584:11 - is going to be whatever is at numbers
plus 1, and then let me do this further
584:16 - and do whatever is at numbers plus 2,
and if I really want to repeat this,
584:20 - let me do it four more
times and do what's
584:22 - at location three, four, five, and six.
584:27 - And that's seven total numbers
because I started counting at zero.
584:30 - So let me just quickly run this.
584:32 - Make address, ./address.
584:35 - There are those seven
digits being printed.
584:37 - But there's something
subtle but also useful here.
584:41 - Each of these digits--
584:42 - 4, 6, 8, 2,7,5, 0--
584:44 - is an int.
584:45 - Why?
584:45 - Because I made an array of integers.
584:47 - But think back-- how big is a
typical integer, have we claimed?
584:52 - Four bytes, or 32 bits, so it's
worth noting that I don't really
584:58 - need to worry about that detail.
585:00 - Notice that I did not do plus 4,
plus 8, plus 12, plus 16, plus 20.
585:05 - I, the programmer,
strictly speaking, don't
585:07 - need to worry about how
big the data type is.
585:09 - This is the power of pointer arithmetic.
585:11 - The compiler is smart enough to know
that if you add 1 to this pointer,
585:17 - that is the same as saying
go one more piece of data--
585:21 - not just one byte--
585:22 - so if it's an int, move four.
585:24 - If it's a second int, move eight.
585:26 - If it's a third int, move 12.
585:27 - Pointer arithmetic handles that
annoying arithmetic for you
585:31 - so you can just think of this
as a number after a number
585:33 - after a number that are back to
back to back but not one byte apart,
585:37 - but four bytes apart.
585:38 - Which is only to say plus 1, plus 2,
plus 3 works no matter the data type.
585:42 - Why?
585:43 - Because the compiler knows what
type of data you're talking about.
585:48 - Now, there's one other
detail I should reveal here
585:51 - that I've taken for granted.
585:54 - In the past I was using double
quotes to represent strings,
585:57 - and I claim that the compiler's
smart enough to realize that oh,
585:59 - if I have double quote hi, that means
it's an array of h-i exclamation point,
586:04 - and then the backslash zero.
586:05 - Notice this usefulness.
586:08 - It turns out that you can actually treat
arrays as though the name of the array
586:13 - is itself a pointer,
and this is actually
586:16 - going to be something
useful in upcoming problems
586:18 - when we want to pass arrays
around in the computer's memory.
586:22 - Notice that strictly speaking on line
five, there's no pointers going on.
586:25 - There's no star, there's
no ampersand-- there's
586:27 - nothing new there, and yet
instantly on line seven
586:31 - I'm pretending that it is the
address, and this is actually OK.
586:35 - It turns out that an array
really can be treated
586:39 - as the address of the first
element in that array.
586:43 - The difference is that there's no
secret backslash zero anywhere.
586:47 - This is just part of
the phone number here,
586:49 - the ending in zero-- that's not
like a special backslash zero.
586:52 - So this is something we're going to
take advantage of too, before long.
586:55 - There's this interrelationship
between addresses and arrays
586:58 - that just generally allows you to
treat one as though it is the other,
587:03 - but the math is taken care of for you.
587:05 - Are any questions then on this before
we start to solve some bigger problems?
587:10 - Yeah.
587:12 - AUDIENCE: [INAUDIBLE]
587:19 - DAVID J. MALAN: Potentially.
587:20 - If you go beyond the end of an array,
you might get a segmentation fault.
587:24 - The problem is that that symptom
is sometimes nondeterministic,
587:27 - which means that sometimes it
will happen, sometimes it won't.
587:30 - It often depends on how far off the
end of the array you actually go.
587:34 - You'll often not induce
the segmentation fault
587:36 - if you just poke a little too
far, but if you go way too far
587:39 - it quite likely will.
587:41 - But we'll give you a tool today
actually for detecting and solving
587:44 - exactly that kind of situation.
587:46 - So let's go ahead now and do
something a little different in code,
587:49 - but that actually comes back
to that spoiler from earlier.
587:51 - Let me go ahead and create a program
called compare.c, and in this program
587:56 - I'm going to go ahead and
allow myself the CS50 library,
588:00 - not so much for string but so that
I can actually use GetInt still,
588:03 - which is way easier than the way we'll
see that C normally lets you get input.
588:07 - Let me give myself stdio.h,
do an int main(void),
588:10 - not worrying about command line
arguments today, and let me go ahead
588:13 - and get an int i using get int, and
ask the human for the value of i,
588:18 - then let me give myself an int j, ask
the user for another int, calling it j,
588:23 - and then let me go ahead and kind of
naively, but to your point earlier,
588:27 - if i equals equals j,
then let's go ahead
588:31 - and print out something like "same,"
backslash n, else let's go ahead
588:36 - and print out "different" if
they are not, in fact, the same.
588:40 - So that would seem to be a program that
compares the value of two integers.
588:44 - All right, so let's go
ahead and run make compare--
588:46 - so far so good-- ./compare.
588:48 - OK, i will be 50, j will be 50--
588:52 - they're the same.
588:53 - Let's do it once more.
588:54 - i will be 50, j will be 42.
588:57 - They are different.
588:58 - So so far, so good in this
first version of comparison.
589:02 - But as you might see
where I'm going with this,
589:05 - let's move away from integers and let's
actually change these things to char--
589:09 - to strings.
589:10 - So I could do string s over here--
589:13 - GetString s over here.
589:15 - Then I could do string t over
here, and GetString over here,
589:22 - asking the user for t this time, here.
589:25 - And then I can compare the two.
589:26 - If s equals equals t--
589:28 - and this is a common convention.
589:30 - If you've used s for string already you
can use t for the next one, at least
589:33 - for simple demonstrations like this.
589:34 - I'm going to compare the two, just like
I did for ints, which worked great.
589:37 - Make compare-- so far
so good-- ./address--
589:41 - oh, sorry.
589:42 - Wrong program-- ./compare.
589:44 - Let me go ahead and
type in something like
589:47 - hi, exclamation point and bye,
exclamation point, which of course
589:52 - should definitely be different.
589:54 - Let me run it again with hi, exclamation
point and hi, exclamation point.
590:00 - Different-- maybe I messed up.
590:02 - Let's maybe do it lowercase,
maybe that'll fix.
590:05 - But no, those two are different.
590:07 - So to come back to what I described
as a spoiler earlier, what's
590:11 - the fundamental issue here, to be clear?
590:16 - Why is it saying different
even though I'm pretty
590:18 - sure I typed the same thing twice.
590:19 - Yeah.
590:21 - Yeah, this is where it's now
useful to know that string has been
590:24 - an abstraction-- a training wheel, if
you will-- and if we take that away--
590:28 - still use GetString because
that's convenient still--
590:30 - but if I change string
to be char star, it's
590:33 - a little more explicit as to what s and
what t are. s is a pointer to a char,
590:39 - that is the address of
a char. t is a pointer
590:42 - to a char, that is
the address of a char.
590:44 - Specifically, the first character
in s and the first character
590:47 - in t, respectively.
590:49 - So if I'm comparing
these two it should stand
590:51 - to reason that they're
going to be different.
590:53 - Why?
590:53 - Because s might end up here in memory
and t might end up here in memory.
590:57 - Each time I call GetString, it is
not smart enough or advanced enough
591:00 - to know that, wait a minute--
you typed the same thing.
591:02 - I'm just going to hand
you back the same address.
591:04 - That doesn't happen because we
did not design GetString that way.
591:06 - Each time I call GetString,
it returns, apparently,
591:10 - a different copy of the
string that was typed in.
591:13 - A hi over here and a hi over here.
591:15 - They might look the same to
the human but to the computer
591:18 - they are different chunks of memory,
and therefore at different addresses.
591:22 - And here, too, we can reveal
what is GetString returning?
591:25 - Well, up until today it was
returning a string, so to speak.
591:29 - That's not really a thing.
591:31 - Technically, what
GetString has always been
591:33 - doing is returning the address
of the first char in a string
591:38 - and trusting that we put a backslash
zero at the end of whatever the human
591:42 - typed in, and that's enough now
for printf, for strlen, for you
591:46 - to know where a string begins and ends.
591:49 - So GetString has actually
always returned a pointer.
591:53 - It has not returned a quote
unquote string per se,
591:56 - but there are functions that can
solve this comparison for us.
591:59 - Recall that I could do
something like this.
592:02 - I could actually go
in here and I could--
592:05 - let's see, where was it?
592:07 - So if I include str compare here and
use it to pass in two values, s and t,
592:14 - let's see now what happens
when I make compare.
592:18 - Implicitly declaring library
function str compare with type int--
592:21 - and well, there's a star.
592:22 - So you might have seen this error before
and you might have ignored most of it,
592:26 - but there's some evidence of
stars or pointers going on here.
592:30 - It looks like I didn't include
the string.h header file,
592:33 - so that's an easy fix.
592:34 - Include string.h which, despite its
name, does not create a data type
592:38 - called string, it just has
string-related functions in it
592:41 - like str compare.
592:42 - Let's make compare again.
592:44 - Now it compiles, ./compare.
592:46 - Now let's type in hi, exclamation
point and even the same thing again.
592:50 - These are now-- oh, I used it wrong.
592:54 - OK, user error.
592:55 - That was supposed to be
impressive, but it's the opposite.
592:58 - What did I do wrong?
593:00 - What did I do wrong here?
593:01 - Yeah.
593:02 - Yeah.
593:04 - AUDIENCE: [INAUDIBLE]
593:07 - DAVID J. MALAN: Yeah, it
returns three different values.
593:09 - Zero if they're the same, positive
1 becomes before the other,
593:13 - negative if the opposite is true.
593:15 - I just forgot that, so like
I did last week correctly,
593:18 - if I want to compare them for
equality per the manual page,
593:22 - I should be checking for
zero as the return value.
593:24 - Now make compare, ./compare, Enter.
593:27 - Let's try it one last time-- hi and hi.
593:30 - OK now, they're in fact the same.
593:32 - And Justin, thank you.
593:37 - And indeed, not that it's
returning same all the time.
593:40 - If I type in hi and
then bye, it's indeed
593:42 - noticing that difference as well.
593:44 - Well, let me go ahead and
do one other thing here.
593:48 - Let's do one other thing.
593:50 - Let me go ahead now and just reveal
more pictorially what's going on.
593:54 - Let's get rid of the string comparison
and let's just print these things out.
593:57 - The simple way to print this out would
be with %s and again, %s is special--
594:01 - printf knows--
594:02 - taking an address and start
there, print every character up
594:05 - until the backslash n, so let's
just hand it s and do that.
594:09 - And then let's do one more, %s,t.
594:12 - This is, again, sort of a
mix of week 1 and this week
594:17 - because I got rid of the word string.
594:18 - I'm using char star, but I'm still
using printf and %s in the same way.
594:24 - Let me go ahead and run compare
now, and if I type hi and hi,
594:27 - I should see the same thing twice.
594:29 - So they look the same, but here
now we have the syntax today
594:33 - to print out the actual
addresses of these things.
594:35 - So let me just change the s to a p,
because p means don't go to the address
594:40 - and print it, it means just
print the address as a pointer.
594:44 - So make compare, ./compare, and now
let's type in hi, and once more,
594:48 - and I should see, indeed, two
slightly different addresses given
594:53 - in hexadecimal.
594:54 - One's got a B at the end,
one's got an F at the end,
594:56 - and they are indeed a few bytes apart.
594:58 - So this is just confirming what
our suspicions have actually been.
595:02 - So what does this mean, perhaps
in the computer's memory?
595:04 - Well, let's take a look.
595:05 - I've zoomed out so I have a little
more squares to look at at once.
595:09 - Here might be s in memory when I do
string s equals, or char star s equals.
595:16 - I get a variable that's of size
1, 2, 3, 4, 5, 6, 7, 8, because I
595:19 - claimed earlier that on modern systems,
pointers are generally eight bytes
595:23 - nowadays so they can count even higher.
595:25 - And inside of the computer's
memory, also, might be hi.
595:28 - And I don't know where it ends
up so for the sake of discussion
595:31 - it ended up down here.
595:32 - That's what was free
when I ran the program.
595:35 - h-i exclamation point, backslash zero.
595:36 - Maybe it ended up, for the sake of
discussion, at 0x123, 4, 5, and 6.
595:42 - So to be clear, what is s
storing once the assignment
595:47 - operator copies from right to left?
595:50 - What is s storing if I
advance one more slide?
595:54 - Yeah.
595:56 - 0x123, the presumption
being that if a string is
596:00 - defined by the address of its first
char and that address of its first char
596:04 - is 0x123, then that's indeed
what should be in the variable s.
596:09 - And so technically, that's what's
been happening with that assignment
596:12 - operator from right to left.
596:13 - GetString indeed returns
a string, so to speak,
596:16 - but more properly it returns
the address of a char.
596:20 - What's been then copied from right to
left using that assignment operator
596:24 - all these weeks is indeed that address.
596:26 - Now technically, we don't really need
to care about where these addresses are.
596:31 - It suffices to just think about
them referentially, but let's
596:34 - first consider where t might be.
t is just another variable that I
596:38 - created on my second line of code.
596:39 - Maybe it ends up there,
maybe somewhere else.
596:41 - For the sake of discussion
I'll draw it left and right.
596:43 - Where did the second word
end up that I typed in?
596:47 - Well, suppose the second copy of
hi ended up at 0x456457458459.
596:53 - What ended up in t?
596:54 - I'll pluck this one off myself.
596:55 - 0x456, presumably.
596:57 - And so this is now a pictorial
representation of why,
597:01 - and let's abstract away everything else.
597:03 - When I compared s against t using
equal equals, based on the picture
597:08 - they're obviously not the same.
597:09 - One is over here, one is over here.
597:12 - And per a moment ago, one is
0x123, the other is 0x456.
597:16 - Yes, technically they're pointing
at something that's the same,
597:19 - but that just reveals
how str compare works.
597:23 - str compare is apparently
a function that
597:26 - takes in the address of
a string as its argument
597:29 - and the address of another
string as its argument,
597:31 - it goes to the first character in
each of those strings, respectively,
597:36 - and probably has a for
loop or a while loop
597:38 - and just goes from left to
right, comparing, looking
597:41 - for the same chars left and right, and
if it doesn't notice any differences,
597:45 - boom-- it returns zero.
597:47 - If it does notice a difference it
returns a positive or a negative value.
597:51 - And that's very similar, recall, to how
we implemented string length ourselves
597:55 - last week.
597:56 - I used a for loop, I was
looking for a backslash zero.
597:59 - str compare is probably a little similar
in spirit, looping from left to right
598:04 - but comparing, this
time not just counting.
598:08 - Are any questions then,
on string comparison
598:11 - and why it is that we use str
compare and not equals equals?
598:14 - Yeah.
598:15 - AUDIENCE: Do pointers have addresses?
598:17 - DAVID J. MALAN: Do
pointers have addresses?
598:19 - Yes.
598:19 - So we won't do that today, but I could
actually use the ampersand operator
598:24 - on s or on t.
598:26 - That would give me the
equivalent of a char star star
598:29 - that itself could be
stored elsewhere in memory.
598:31 - That's where it ends.
598:32 - We don't do that recursively forever.
598:35 - There's star and there's star
star, but yes, that is a thing
598:37 - and it's very often useful in the
context of two dimensional arrays,
598:41 - which we haven't really talked about,
but that is a feature of the language,
598:44 - too.
598:45 - But not today.
598:46 - Good question.
598:47 - All right, so what might we now
do to take things up a notch?
598:50 - Well let's go ahead and implement
a different program here
598:53 - that maybe tries copying some
values, just to demonstrate this.
598:56 - Let me open up a file
called, how about copy.c,
599:00 - and I'm going to start
off with a few includes.
599:02 - So let's include the CS50 library just
so we have a way of getting user input.
599:06 - Let's include-- how about stdio
as always, let's preemptively
599:11 - include string.h and maybe
one other in a moment.
599:14 - Let's do int main(void) as before.
599:17 - And then in here, let's get a
string from the user and just
599:20 - call it s for simplicity.
599:23 - And heck, we can actually just
call this char star if we want,
599:26 - or string, since we're
using the RS50 library.
599:28 - But we'll come back to that.
599:30 - Let's now make a copy
of s and do s equals t,
599:33 - using a single assignment operator and
then let's check something like this.
599:38 - Let's go into the first character
of t, which is t bracket zero,
599:43 - and then let's uppercase
it using that function
599:45 - that we've used in the past of
toupper t bracket zero, semicolon.
599:50 - And actually, I should go back up here.
599:52 - If I'm using toupper or if you use
tolower or isupper or islower--
599:56 - I might not remember this offhand,
but it was in another header file
599:59 - called C type dot h.
600:01 - There was a bunch of helpful
functions in that library as well.
600:04 - Now at the very last line of the program
let's just print out what both s and t
600:09 - are by simply printing out %s for each
of them, and t is %s also, not %t,
600:16 - of course, and let's
see what happens here.
600:20 - So let me make copy--
600:21 - oh my God, so many mistakes.
600:23 - What did I do wrong?
600:24 - Oh.
600:25 - OK, that was unintended.
600:26 - String t equals s, sorry, so
I'm creating two variables,
600:30 - s and t respectively,
and I'm copying s into t.
600:33 - Make copy, Enter.
600:34 - There we go. ./copy, and let's
now type in, for instance,
600:40 - how about hi exclamation point
in all lowercase this time,
600:43 - and now what gets printed?
600:47 - I don't think that's what I
intended, so to speak, here.
600:51 - Because notice that I got s from
the user, so that checks out.
600:55 - I then copied t into
s, which looks correct.
600:59 - That's what we always
use assignment for.
601:00 - Then I uppercase the first
letter in t, but not s--
601:04 - at least in my code--
601:05 - then I printed s and t and then
noticed, apparently, both s
601:09 - and t got capitalized.
601:13 - So if you're starting to get a
little comfortable with what's
601:15 - going on underneath the hood,
what's the fundamental problem here?
601:19 - Why did both get capitalized?
601:23 - Why did both get capitalized?
601:24 - Yeah, over here.
601:25 - AUDIENCE: Could it be they're
referencing the same address?
601:27 - DAVID J. MALAN: Yeah, they're
representing the same address.
601:29 - So C is really literal.
601:31 - If you create another variable called
t and you assign it the value of s,
601:34 - you are literally assigning
it the value in s,
601:37 - which is 0x123 or something like that.
601:40 - And so at that point in the
story both s and t presumably
601:43 - have a value of 0x123,
which means they technically
601:47 - point to the same h-i
exclamation point in memory.
601:51 - Nowhere did I tell the computer to give
me a copy of a h-i exclamation point
601:56 - per se, I literally said just copy s.
601:59 - So here's where an understanding of what
s literally is explains the situation.
602:03 - I'm only copying the pointers.
602:06 - So what actually went on in memory?
602:07 - Let's take a look here at this grid.
602:09 - If I created s initially,
maybe it ends up here.
602:12 - And I created hi in lowercase,
and it ended up down here.
602:15 - Then the address was, again, like
0x123456, 0x123 is what's in s.
602:22 - If then I create a
second variable called t,
602:24 - and I call it a string, a.k.a. char
star, maybe it again ends up here.
602:29 - But when I copy s into t by
doing t equals s semicolon,
602:34 - that literally just copies s into
t, which puts the value 0x123 there.
602:40 - So if we now abstract away all these
numbers and just think about a picture
602:43 - with arrows, what we've drawn in
the computer's memory is this.
602:47 - Two different pointers but storing
the same address, which means
602:52 - the breadcrumbs lead to the same place.
602:55 - And so if you follow the t breadcrumb
and capitalize the first letter,
602:58 - it is functionally the
same as copying the--
603:02 - changing the first letter
in the version s as well.
603:07 - So what's the solution, then,
to this kind of problem?
603:12 - Even if you have no idea
how to do it in code,
603:14 - what's the gist of what I
really intended, which is,
603:17 - I want a genuine copy of s, called t.
603:21 - I want a new h-i exclamation
point backslash zero.
603:25 - What do I need to do
to make that happen?
603:27 - Thoughts?
603:28 - AUDIENCE: I think there's
a function called str copy.
603:30 - DAVID J. MALAN: So there is a
function called str copy, strcpy,
603:34 - which is a possible
answer to this question.
603:36 - The catch with stir copy is that you
have to tell it in advance not only
603:41 - what the source string is--
the one you want to copy--
603:43 - you also need to pass in the
address of a chunk of memory
603:46 - into which you can copy the string, and
here's one thing we haven't seen yet,
603:50 - and we need one more building
block today, if you will.
603:53 - We haven't yet seen a way to
create new chunks of memory
603:57 - and then let some other
function copy into them.
604:00 - And for this, we're going to introduce
something called dynamic memory
604:04 - allocation.
604:04 - And this is the last and most
powerful feature perhaps, today,
604:07 - whereby we're going to introduce two
functions, malloc and free, where
604:11 - malloc means memory allocate,
which literally does just that.
604:14 - It's a function that takes a number
as input-- how many bytes of memory
604:18 - do you want the operating system to
find for you somewhere in that big grid?
604:21 - It's going to find it
and it's going to return
604:23 - to you the address of the first byte of
contiguous memory back to back to back,
604:26 - and then you can do anything you
want with that chunk of memory.
604:29 - free is going to do the opposite.
604:31 - When you're done using a chunk of
memory that malloc has given you,
604:33 - you can say free it, and that means you
hand it back to the operating system
604:37 - and then the operating system can
use it for something else later.
604:40 - So this is actually evidence of
a common problem in programming.
604:44 - If your Mac your PC has ever been in
the habit of starting to get really,
604:48 - really slow, or it's slowing to a
crawl-- heck, maybe it even freezes--
604:53 - one of the possible
explanations could be
604:56 - that the program you're
running by Apple or Microsoft
604:59 - or whoever, maybe they're using
malloc or some equivalent,
605:02 - asking the operating system--
605:03 - Mac OS or Windows-- for,
give me more memory.
605:05 - I need more memory.
605:06 - The user is creating more images.
605:07 - The user is typing a longer essay.
605:09 - Give me more memory, more memory.
605:10 - If the program has a bug and never
actually frees any of that memory,
605:15 - your computer might end up using
all of the available memory
605:18 - and honestly, humans are not very good
at handling corner cases like that.
605:21 - Very often programs, computers
just freeze at that point
605:24 - or get really, really slow because
they start trying to be creative
605:28 - when there's not enough memory left.
605:31 - So one of the reasons for a
computer really slowing down
605:33 - might be calling for malloc a lot, or
some equivalent, but never freeing it.
605:37 - Which is to say, you should
always use these two functions
605:40 - in concert and free memory
once you are done with it.
605:43 - So let me go ahead and do this in
code and solve this problem properly.
605:48 - Let me go ahead and do this.
605:50 - Before I copy s into t using
something like str copy,
605:53 - I first need to get a bunch
of memory from the computer.
605:56 - So to do that, let's make this super
clear that we're dealing with pointer,
605:59 - so I'm going to change my strings
to char stars for both s and t,
606:03 - and what I technically
am going to store in t
606:05 - is the address of an
available chunk of memory.
606:09 - To do that, I can ask the computer
to allocate memory for me,
606:13 - and how many bytes.
606:15 - If I want to create a copy
of h-i exclamation point,
606:18 - I need how many bytes?
606:21 - Good!
606:22 - Four!
606:22 - Because I need the h, the i, the
exclamation point, and additional space
606:27 - for the backslash zero.
606:28 - It's up to me to understand
that and ask for it.
606:30 - It's not going to happen magically.
606:32 - Nothing does in C. So I could
just naively type four there,
606:35 - and that would be correct
if I type in h-i exclamation
606:38 - point or any other three letter word
or phrase, but to do this dynamically
606:42 - I should probably do
something like strlen of s
606:46 - plus 1 for the additional
null character.
606:49 - Recall that string length
does it in the English sense--
606:52 - it returns the length of the string
you see, plus 1 also takes into account
606:56 - the fact that I'm going
to need that backslash n.
606:58 - Now let me do this old
school style first.
607:00 - Let me go ahead and manually
copy the string s into t first.
607:05 - So for int i equals 0, i is less than
the string length of s, i plus plus.
607:13 - Then inside my for loop, I'm going
to do t bracket i equals s bracket
607:18 - i, but actually I want
the null character too,
607:22 - so I want to do the length
of the string plus 1 more,
607:25 - and heck, I think I learned
an optimization last time.
607:28 - If I'm doing this again
and again, I could really
607:30 - do n equals strlen of s plus 1
and then do i is less than n,
607:36 - just as a nice design optimization.
607:38 - I think this for loop will
actually handle the process, then,
607:41 - of copying every character from s into
every available byte of memory in t.
607:48 - Or I could get rid of all of that
and take your suggestion, which
607:52 - is to use str copy, which takes as
its first argument the destination
607:56 - and its second argument the source.
607:58 - So copy from right to left in this case,
too, that's going to do all of that
608:03 - automatically for me as well.
608:06 - Now I think I'm good.
608:08 - I can now capitalize safely.
608:10 - The first character in t, which
is now a different chunk of memory
608:14 - than s, and then I can print them both
out to see that one has not changed
608:18 - but the other has.
608:19 - So make copy-- all right,
what did I do wrong?
608:22 - Implicitly declaring library
function malloc dot, dot, dot.
608:25 - So we've seen this kind of error before.
608:28 - What is-- even if you don't
know quite how to solve it,
608:31 - what's the essence of the solution?
608:33 - What do I need to do to fix this
kind of problem involving implicitly
608:36 - declaring a library function?
608:38 - What did I forget?
608:39 - Yeah.
608:41 - I need to include the library.
608:42 - And I could look this up in the manual,
or I know it off the top of my head,
608:46 - I just forgot it.
608:47 - There's another library
we'll occasionally
608:49 - need now called standard lib--
608:51 - standard library-- that contains
malloc and free prototypes
608:56 - and some other stuff, too.
608:57 - All right, let me just clear this
away and do make copy one more time.
609:00 - Now I'm good. ./copy, Enter, All right.
s, I'm going to type in hi, lowercase.
609:06 - t and s now come back as intended.
609:10 - s is untouched, it would seem,
but t is now capitalized.
609:15 - Are any questions, then, on
what we just did in code?
609:18 - Yeah.
609:20 - AUDIENCE: You said that
malloc and free go together.
609:23 - [INAUDIBLE]
609:27 - DAVID J. MALAN: Indeed.
609:28 - There's a few improvements
I want to make, so let
609:30 - me actually do those right now.
609:32 - Technically, I should practice what
I preached and I should indeed,
609:35 - when I'm done with t, free t.
609:37 - Fortunately, I don't have
to worry about how big t
609:39 - was-- the computer remembers how many
bytes it gave me and it will go free
609:43 - all of them, not just the first.
609:44 - I should do free t.
609:46 - I don't need to do free
s, and I shouldn't,
609:49 - because that is handled
automatically by the CS50 library.
609:52 - s, recall, came from
GetString, and we actually
609:54 - have some fancy code in
place that makes sure
609:56 - that at the end of your
program's execution
609:58 - we free any memory that we
allocated so we don't actually
610:01 - waste memory like I described earlier.
610:03 - But there's actually a
couple of other things
610:05 - if I really want to be
pedantic I should put in here.
610:07 - It turns out that
sometimes malloc can fail,
610:11 - and sometimes malloc doesn't
have enough memory available
610:14 - because maybe your
computer's doing so much
610:15 - stuff there's just no
more RAM available.
610:18 - So technically, I should
do something like this--
610:20 - if t equals equals null,
with two L's today,
610:24 - then I should just return 1 or something
to say that there was a problem.
610:28 - I should probably print
an error message too,
610:29 - but for now I'm going to keep it simple.
610:31 - I should also probably check this.
610:33 - This is a little risky of me.
610:36 - If I'm doing t bracket zero, this is
assuming that there is a letter there.
610:40 - But what if the human just
hit Enter at the prompt
610:43 - and didn't even type h, let
alone h-i exclamation point?
610:46 - What if there is no t bracket zero?
610:48 - So technically, what I should probably
do here is, if the length of t
610:54 - is at least greater than zero,
then go ahead and safely capitalize
611:00 - the first letter of it.
611:01 - And then at the very
end if all goes well,
611:04 - I can return zero, thereby signifying
that indeed, this thing was successful.
611:08 - So yes, these two functions, malloc
and free, should be in concert.
611:12 - And so if you call malloc you
should call free eventually.
611:17 - But you did not call malloc for s,
so you should not call free for s.
611:22 - Yeah, other question.
611:23 - AUDIENCE: Here's a question.
611:24 - Why do we do malloc plus 1?
611:26 - DAVID J. MALAN: Why
did I do malloc plus 1?
611:28 - So malloc-- sorry, malloc
of string length of s
611:31 - plus 1-- the string length is the
literal length of the string as a human
611:35 - would perceive it in English.
611:36 - So h-i exclamation
point-- strlen gives me 3,
611:39 - but I know now as of last week and
this week what a string technically is
611:43 - and a string always has an extra byte.
611:45 - The onus is on me to
understand and apply
611:47 - that lesson learned so that I actually
give str copy enough room for that
611:52 - trailing null character.
611:53 - And here's just an annoying thing when
we called the backslash zero N-U-L last
611:59 - week, it turns out that
N-U-L-L is the same idea.
612:03 - It's also zero, but it's zero
in the context of pointer.
612:06 - So long story short, you never
really write N-U-L, I've just said it
612:11 - and we saw it on the screen.
612:12 - You will start writing N-U-L-L when you
want to check whether or not a pointer
612:17 - is valid or not.
612:19 - And what I mean by that is this.
612:20 - If malloc fails and there's just
not enough memory left inside
612:23 - of the computer for you, it's
got to return a special value,
612:26 - and that special value is
N-U-L-L in all capital letters.
612:30 - That signifies something went wrong.
612:32 - Do not trust that I'm giving
you a useful return value.
612:37 - Other questions on
these copies thus far?
612:40 - Yeah, over there.
612:42 - AUDIENCE: [INAUDIBLE]
612:46 - DAVID J. MALAN: Good question.
612:48 - Will str copy not work without malloc?
612:49 - You kind of need both in
this case because str copy,
612:53 - by definition-- if I pull up its
manual page-- needs a destination
612:56 - to put the copied characters.
612:58 - It's not sufficient just to
say char star t semicolon.
613:01 - That only gives you a pointer.
613:03 - But I need another
chunk of memory that's
613:06 - just as big as h-i exclamation
point backslash zero,
613:10 - so malloc gives me a
whole bunch of memory
613:12 - and then str copy fills it with h-i
exclamation point backslash zero.
613:16 - So again, that's why we're
going down to this lower level,
613:19 - because once you understand
what needs to be done
613:21 - you now have the functions to do it.
613:23 - So let's actually consider
what we just solved.
613:25 - So in this next version of the program
where I actually introduced malloc,
613:29 - t was initialized for the
return value of malloc,
613:32 - and maybe the memory that
I got back was here--
613:34 - 0x456457458459.
613:38 - I've left it blank
initially because nothing
613:40 - is put there automatically by malloc.
613:42 - I just get a chunk of memory that
is now mine to use as I see fit.
613:46 - I then assign t to that return value,
which points t at the first address.
613:51 - Notice there's no backslash zero.
613:53 - This is not yet a string
it's just a chunk of memory--
613:56 - four bytes-- an array of four bytes.
613:58 - What str copy eventually did
for me was it copied the h over,
614:01 - the i over, the exclamation point
over, and the backslash zero.
614:06 - And if I didn't want to use str copy or
I forgot that it existed, my for loop
614:09 - would have done exactly the same thing.
614:14 - Are any questions, then,
on these examples here.
614:19 - Any questions?
614:19 - Yeah.
614:21 - AUDIENCE: [INAUDIBLE]
614:28 - DAVID J. MALAN: Good question.
614:29 - After malloc, if I had then
still done just t equals s,
614:34 - it actually would have recreated
the same original problem
614:37 - by just copying 0x123 from s into t.
614:40 - So then I would have been left with
a picture that looked like this a few
614:44 - steps ago, I would have-- and
I can't quite do it live--
614:48 - this arrow, if I did
what you just described,
614:50 - would now be pointing over here and so
I wouldn't have fundamentally solved
614:54 - the problem, I would have
just additionally wasted
614:56 - four bytes temporarily that
I'm not actually using.
614:59 - Yeah.
615:01 - AUDIENCE: [INAUDIBLE]
615:05 - DAVID J. MALAN: You can--
615:06 - do you always use malloc
and str copy together?
615:08 - Not necessarily.
615:08 - These are both solving
two different problems.
615:10 - malloc's giving me enough memory to
make a copy, str copy is doing the copy.
615:15 - However, you could actually use an
array, if you wanted, of characters,
615:18 - and you could use str copy on that, and
there's other use cases for str copy.
615:22 - But thus far, it's a
reasonable mental model
615:24 - to have that if you
want to copy strings,
615:26 - you use malloc and then str
copy, or your own homegrown loop.
615:30 - Yeah.
615:32 - AUDIENCE: [INAUDIBLE]
615:42 - DAVID J. MALAN: Say that once more.
615:44 - AUDIENCE: [INAUDIBLE]
615:49 - DAVID J. MALAN: No.
615:50 - It will-- good question.
615:52 - If I had a--
615:55 - str copy, per its documentation,
will copy the whole string
615:58 - plus the null character at the end.
616:01 - It just assumes there will be one there.
616:03 - It's therefore up to you to pass str
copy a long enough chunk of memory
616:07 - to have room for that.
616:08 - If I only ask malloc
for three bytes, that
616:10 - could have potentially
created a memory problem
616:12 - whereby str copy would just still
blindly copy one, two, three,
616:16 - four bytes, but technically it should
have only touched three of those.
616:19 - You do not yet have access to the
fourth one, or the rights to it,
616:22 - because you never asked malloc for it.
616:24 - Yeah.
616:26 - AUDIENCE: So the number inside
malloc would be the number of bytes.
616:29 - DAVID J. MALAN: Correct.
616:30 - The number inside malloc--
it's one argument.
616:32 - It's the number of bytes you want back.
616:35 - AUDIENCE: Does that mean you
have to remember [INAUDIBLE]??
616:41 - DAVID J. MALAN: Yes, the onus
is on you, the programmer,
616:43 - to remember or frankly, use
a function to figure out
616:45 - how many bytes you actually need.
616:47 - That's why I did not ultimately
type in four manually,
616:50 - I used str length plus 1.
616:51 - So the plus 1 is necessary if you
understand how strings are represented,
616:55 - but using strlen means
that I can actually
616:57 - play around with any types of
inputs and it will dynamically
617:01 - figure out the length.
617:02 - So suffice it to say,
there's so many ways
617:05 - already where you can
start to break programs.
617:07 - Let's give you at least one tool for
finding mistakes that you might make.
617:10 - And indeed, in upcoming
problem sets you will
617:12 - use this to find bugs in your own code.
617:14 - Not just using printf, not just using
the built-in debugger, but another tool
617:18 - here as well.
617:19 - So let me go ahead and deliberately
write a program called memory.c
617:22 - that has some memory-related errors.
617:24 - Let me include stdio.h at the top and
let me include stdlib.h at the top
617:30 - so I have access to malloc now.
617:31 - Let me do int main(void) and then
inside of main, let me do this--
617:36 - I want to allocate
maybe how about three--
617:39 - space for three integers.
617:41 - Why?
617:41 - Just for the sake of discussion.
617:43 - So I'm going to go ahead and do malloc
of three, but I don't want three bytes.
617:48 - I want three integers and
an integer is four bytes,
617:51 - so technically I could do this--
617:52 - 3 times 4, or I could do 12 but again,
that's making certain assumptions
617:57 - and if I run this program on
a slightly different computer,
617:59 - int might be a different size.
618:01 - so the better way to do this would be
3 times whatever the size is of an int.
618:05 - And this is just an operator you can use
any time if you just want to find out
618:08 - on this computer, how big is an int?
618:10 - How big is a float, or something else?
618:13 - So that's going to give me that many--
618:15 - that much memory for three ints.
618:18 - What do I want to assign this to?
618:20 - Well, malloc returns an address.
618:22 - Pointers are addresses, so I'm going
to create a pointer to an int called
618:27 - x and assign it the value.
618:29 - So what am I doing here?
618:31 - This is a little less obvious,
but again go back to basics.
618:33 - The right hand side here gives me a
chunk of memory for three integers.
618:38 - malloc returns the address of
the first byte of that chunk.
618:42 - How do I store the address of anything?
618:44 - I need a pointer.
618:45 - The syntax for today
is type of data, star,
618:48 - where the type of data in question
is three ints, so I do int star x.
618:53 - Again, it's kind of purposeless, only
for sort of instructional purposes
618:57 - here, but this is equivalent now to
having a chunk of memory of size 12
619:03 - in total, presumably, so I
can technically now do this.
619:06 - I can go into maybe the first
location and assign it the number 72
619:10 - like the other day.
619:12 - Second location, the number 73, and the
third location, maybe the number 33.
619:20 - Now I've deliberately
made two mistakes here
619:22 - because I'm trying to trip
over my newfound understanding,
619:26 - or my greenness with
understanding pointers.
619:28 - One, I didn't remember that I
should be treating chunks of memory
619:32 - as zero indexed.
619:33 - malloc essentially returns an array,
if you want to think of it as that.
619:36 - An array of three ints,
or more technically,
619:38 - the address of a chunk of memory
that could fit three ints.
619:42 - So I can use my square bracket
notation, or I could be really cool
619:46 - and use pointer arithmetic, but
this is a little more user friendly.
619:48 - But I have made two mistakes.
619:50 - I did not start indexing
at zero, so line seven
619:54 - should have been x bracket zero.
619:56 - Line eight should have been x
bracket 1, and then line nine
619:59 - should have been x bracket 2.
620:00 - So first mistake.
620:01 - The second mistake that
I've made as a side effect,
620:04 - is I'm also touching
memory that I shouldn't.
620:07 - x bracket 3 would mean go to the
fourth int in the chunk of memory
620:12 - that came back.
620:13 - I only asked for enough
memory for three ints,
620:15 - not four, so this is what's
called a buffer overflow.
620:19 - I am accidentally, but
deliberately at the moment,
620:22 - going beyond the boundaries of
this array, this chunk of memory.
620:26 - So bad things happen,
but not necessarily
620:28 - by just running your program.
620:30 - Let me go ahead and just try this.
620:31 - Make memory, and you'll see here
that it compiles OK. ./memory,
620:37 - and it actually does
not segmentation fault,
620:39 - which comes back to that
point of nondeterminism.
620:41 - Sometimes it does, sometimes it
doesn't-- it depends on how bad
620:43 - of a mistake you made.
620:45 - But there's a program that can
spot these kinds of mistakes,
620:48 - and I'm going to go ahead and expand
my terminal window for a moment
620:51 - and I'm going to run not just ./memory,
but a program called Valgrind./memory.
620:56 - This is a command that comes
with a lot of computer systems
620:59 - that's designed to find
memory-related bugs in code.
621:02 - So it's a new tool in
your toolkit today,
621:04 - and you'll use it with
the coming problem sets.
621:06 - I'm going to run this now.
621:07 - It's output, honestly, it's hideous.
621:09 - But there's a few things
that will start to jump out
621:13 - and will help you with
tools and the problems
621:15 - sets to see these kinds of things.
621:17 - Here's the first mistake.
621:18 - Invalid write of size four.
621:21 - That's on memory.c line
nine, per my highlights.
621:25 - So let me go look at line nine.
621:27 - In what sense is this an
invalid write of size four?
621:31 - Well, I'm touching memory
that I shouldn't, and I'm
621:33 - touching it as though it's an int.
621:35 - And an int is four bytes-- size four.
621:37 - So again, this takes some practice to
get used to, the nomenclature here,
621:41 - but this is now a clue
for me, the programmer,
621:44 - that not only did I screw up, but
I screwed up related to memory
621:47 - and so this is just a hint, if you will.
621:50 - It's not going to necessarily
tell you exactly how to fix it,
621:52 - you have to wrestle with
the semantics, but invalid
621:56 - write of size four-- oh, OK.
621:58 - So I should not have indexed
past the boundary here.
622:02 - All right, so I
shouldn't have done that.
622:05 - So let me go ahead then and change this
to zero, one, and two, perhaps, here.
622:11 - All right, so let me go
ahead and recompile my code.
622:13 - Make memory, ./memory, still doesn't
seem to be broken but it is technically
622:19 - buggy.
622:20 - Let me go ahead and run Valgrind
again, so Valgrind of ./memory, Enter.
622:26 - And now there's fewer scary--
622:28 - less scary output now, but
there's still something in there.
622:32 - Notice this-- 12 bytes in one blocks--
622:35 - no regard for grammar
there-- are definitely
622:37 - lost in lost record one of one.
622:39 - Super cryptic, but this is hinting
at a so-called memory leak.
622:42 - The blocks of memory are lost in
the sense that I malloc'd them--
622:46 - I asked for them but I never--
622:48 - take a guess-- freed them.
622:50 - I have a memory leak.
622:51 - And this is the arcane way
of saying, you've screwed up.
622:53 - You have a memory leak.
622:54 - So this is an easy fix, fortunately.
622:57 - Once I'm done with this memory I
just need to free it at the end.
623:01 - So now let me go ahead
and rerun make memory,
623:03 - it's still runs fine so all the while
I might have thought, incorrectly,
623:07 - my code is correct.
623:08 - But let me run Valgrind one more time.
623:10 - Valgrin of ./memory, Enter.
623:12 - Now, this is pretty good.
623:14 - All heap blocks were
freed, whatever that means.
623:16 - No leaks are possible.
623:18 - And even though it's still a little
cryptic, there's no other error here
623:21 - and in fact, it's pretty explicit--
error summary, zero errors from zero
623:25 - contexts, dot, dot, dot.
623:27 - So even though this is one of
the most arcane tools we'll use,
623:30 - it's also one of the most
powerful because it can see things
623:32 - that you, the human, might not, and
maybe even that the debugger might not.
623:36 - It does a much closer
reading of your code
623:38 - while it's running to figure
out exactly what is going on.
623:43 - Any questions, then, on this tool?
623:46 - And we'll guide you after today
with actually using this, too.
623:50 - Just helps you find
memory-related mistakes
623:52 - that you might now be capable of making.
623:55 - All right, let's do one
other memory-related thing.
623:57 - Let me shrink my terminal window here.
623:59 - Let me create one other
file here called garbage.c.
624:03 - It turns out there's a term of ours
called garbage values in programming
624:06 - that we can reveal as follows.
624:08 - Let me include stdio.h,
and let me include--
624:11 - how about stdlib.h, and
then let me give myself int
624:14 - main(void), and then in this
relatively short program
624:17 - let me give myself three
ints using last week's
624:20 - notation, just int scores bracket
3 for 3 quiz scores, or whatever.
624:24 - Then let me go ahead and do for
int i equals zero, i less than 3,
624:28 - i plus plus, then let me go ahead
and print out, %i backslash n,
624:34 - scores bracket i semicolon.
624:36 - That's it.
624:38 - This code, pretty sure is going
to compile and it's going to run,
624:44 - but what is my logical bug?
624:46 - I've forgotten a step even though the
code that's written is not so wrong.
624:51 - Yeah?
624:53 - Yeah, I didn't provide the
scores, so I didn't actually
624:56 - initialize the array called scores
to have any scores whatsoever.
625:00 - What's curious about this, though,
is that the computer technically
625:03 - doesn't mind.
625:04 - Let me go ahead and playfully
make garbage, Enter,
625:08 - and it's an apt description
because what I'm about to see
625:10 - are so-called garbage values.
625:13 - When you, the programmer, do not
initialize your codes variables to have
625:18 - values, sometimes, who knows
what's going to be there.
625:21 - The computer's been
doing some other things,
625:23 - there's a bit of work that happens even
before your code runs in the computer,
625:26 - so there might be remnants
of past ints, chars, strings,
625:29 - floats-- anything else in
there and what you're seeing
625:32 - is those garbage values, which is
to say you should never forget,
625:38 - as I just did, to initialize
the value of some variable.
625:40 - And this is actually
pretty dangerous, and there
625:42 - have been many examples of
software being compromised
625:46 - because of one of these issues
where a variable wasn't initialized
625:49 - and all of a sudden users, maybe people
on the internet in the context of web
625:53 - applications, could suddenly see the
contents of someone else's memory,
625:57 - or remnants.
625:58 - Maybe someone's password that
had been previously typed in
626:01 - or some other value like
a credit card number
626:03 - that had been previously typed in.
626:04 - There are different
defense mechanisms in place
626:06 - to generally make this not
so likely, but it's certainly
626:10 - very possible, at least
in this kind of context,
626:13 - to see values that you
probably shouldn't because they
626:17 - might be remnants from
something else that used them.
626:20 - So this is to say again, you have this
great power now to manipulate memory,
626:25 - but also now you have this great
hacking ability to poke around
626:28 - the contents of memory, and this is
exactly what hackers sometimes do when
626:31 - trying to find ways to exploit systems.
626:35 - Are any questions here?
626:39 - No?
626:40 - All right, let's go ahead and
take a quick five minute break
626:42 - and when we come back, we'll
build on these final topics.
626:44 - See you in five.
626:45 - We are back.
626:47 - First, just a little programmer
humor from XKCD, which hopefully now
626:50 - will make a little bit of sense to you.
626:53 - And what we'll also do next to take a
look at a short two minute video that
626:57 - animates with claymation, if you
will, from our friends at Stanford,
627:00 - exactly what happens now if you have
an understanding of what garbage
627:03 - values are and how they get there, and
what happens then if you misuse them.
627:07 - It's one thing just to print
them out as I just did,
627:09 - it's another if you actually mistake
a garbage value for a valid pointer,
627:13 - because garbage values are just zeros
and ones somewhere-- numbers, that is.
627:17 - But if you use that new
dereference operator, the star,
627:20 - and try to go to a garbage value
thinking incorrectly that it's
627:24 - a valid pointer, bad things can happen.
627:26 - Computers can crash or more familiarly,
segmentation faults can happen.
627:31 - So allow me to introduce, if we
could dim the lights for two minutes,
627:34 - our friend Binky from Stanford.
627:40 - SPEAKER 1: Hey Binky, wake up.
627:41 - It's time for pointer fun.
627:44 - BINKY: What's that?
627:45 - Learn about pointers?
627:47 - Oh, goody!
627:48 - SPEAKER 1: Well, to get
started, I guess we're
627:50 - going to need a couple of pointers.
627:52 - BINKY: OK, this code allocates two
pointers which can point to integers.
627:56 - SPEAKER 1: OK.
627:56 - Well, I see the two pointers, but they
don't seem to be pointing to anything.
628:00 - BINKY: That's right.
628:01 - Initially, pointers
don't point to anything.
628:03 - The things they point to are called
pointees, and setting them up
628:06 - is a separate step.
628:07 - SPEAKER 1: Oh, right, right.
628:08 - I knew that.
628:09 - The pointees are separate.
628:11 - So how do you allocate a pointee?
628:13 - BINKY: OK, well this code
allocates a new integer pointee,
628:17 - and this part sets x to point to it.
628:20 - SPEAKER 1: Hey, that looks better.
628:21 - So make it do something.
628:23 - BINKY: OK, I'll dereference the
pointer x to store the number
628:26 - 42 into its pointee.
628:28 - For this trick, I'll need my
magic wand of dereferencing.
628:32 - SPEAKER 1: Your magic
wand of dereferencing?
628:35 - That great.
628:37 - BINKY: This is what the code looks like.
628:39 - I'll just set up the number and--
628:42 - SPEAKER 1: Hey, look.
628:43 - There it goes.
628:44 - So doing a dereference on x follows
the arrow to access its pointee,
628:49 - in this case to store 42 in there.
628:51 - Hey, try using it to store the number
13 through the other pointer, y.
628:56 - BINKY: OK.
628:57 - I'll just go over here to y
and get the number 13 set up,
629:01 - and then take the wand of
dereferencing and just--
629:06 - whoa!
629:07 - SPEAKER 1: Oh hey, that didn't work.
629:09 - Say, Binky, I don't think
dereferencing y is a good idea
629:13 - because setting up the
pointee is a separate step
629:16 - and I don't think we ever did it.
629:18 - BINKY: Good point.
629:19 - SPEAKER 1: Yeah, we
allocated the pointer y,
629:22 - but we never set it
to point to a pointee.
629:25 - BINKY: Very observant.
629:26 - SPEAKER 1: Hey, you're
looking good there, Binky.
629:28 - Can you fix it so that y points
to the same pointee as x?
629:31 - BINKY: Sure, I'll use my magic
wand of pointer assignment.
629:35 - SPEAKER 1: Is that going to
be a problem, like before?
629:37 - BINKY: No, this doesn't
touch the pointees,
629:39 - it just changes one pointer to
point to the same thing as another.
629:42 - SPEAKER 1: Oh, I see.
629:43 - Now y points to the same place as x.
629:46 - So wait, now y is fixed.
629:48 - It has a pointee so you can try
the wand of dereferencing again
629:51 - to send the 13 over.
629:54 - BINKY: OK, here it goes.
629:56 - SPEAKER 1: Hey, look at that.
629:57 - Now dereferencing works on y.
629:59 - And because the pointers are sharing
that one pointee, they both see the 13.
630:03 - BINKY: Yeah, sharing.
630:04 - Whatever.
630:05 - So are we going to switch places now?
630:07 - SPEAKER 1: Oh look, we're out of time.
630:09 - BINKY: But--
630:10 - That's from our friend
Nick Parlante at Stanford.
630:12 - So let's consider what
Nick did here as Binky.
630:14 - So here is all the code together.
630:16 - These first couple of lines were not
bad, and notice that in Stanford's code
630:20 - they move the stars to the left.
630:21 - That's fine.
630:22 - Again, more conventional
might be this syntax here.
630:25 - These two lines are fine.
630:26 - It's OK to create
variables, even pointers,
630:30 - and not assign them a value initially
so long as you eventually do.
630:33 - So we eventually do
here, with this line.
630:36 - We assign to x the return
value of malloc, which
630:39 - is presumably the address of something.
630:41 - To be fair, we should really
be checking for null as well,
630:44 - but that's not the biggest problem here.
630:46 - The biggest problem is
not even this next line,
630:48 - which means go to the memory location
in x and store the number 42 there.
630:54 - That's fine, because
again, malloc returns
630:56 - the address of some chunk of memory.
630:59 - This chunk of memory is
big enough for an int.
631:01 - x is therefore going to store
the address of that chunk that's
631:04 - big enough for an int.
631:05 - Star x recalls the dereference
operator, means go to that address
631:08 - and put 42 in it.
631:10 - It's like going to the mailbox
and putting the number 42 in it
631:13 - instead of taking the number
50 out, like we did before.
631:16 - But why is this line bad?
631:18 - This is where Binky lost
his head, so to speak.
631:21 - Why is this bad?
631:23 - Yeah.
631:24 - AUDIENCE: We haven't yet
allocated space for it.
631:26 - DAVID J. MALAN: Exactly.
631:26 - We haven't yet allocated space for y.
631:28 - There's no mention of malloc,
there's no assignment of y,
631:31 - even to that same memory.
631:32 - So this would be, go
to the address in y,
631:35 - but if there is no known address in
y, it is a so-called garbage value,
631:39 - which means go to some random address
that you have no control over,
631:42 - and boom--
631:42 - that might cause what we've seen in the
past, perhaps as a segmentation fault.
631:47 - Now this, fortunately,
is the kind of thing
631:49 - that if you don't quite have the eye
for it yet, Valgrins, that new tool,
631:53 - could help you find as well.
631:55 - But it's just another example of
again, the sort of upside and downside
631:59 - of having control now
over memory at this level.
632:02 - All right.
632:02 - Well, let's go ahead
and do one other thing.
632:04 - Considering from last week
that this notion of swapping
632:07 - was actually a really common operation.
632:09 - We had all of our volunteers come
up, we had to swap a lot of things
632:12 - during bubble sorts and
even selection sort,
632:14 - and we just took for
granted that the two
632:17 - humans would swap themselves just fine.
632:18 - But there needs to be code
to do that if you actually
632:21 - implement bubble sort, selection sort,
or anything that involves swapping.
632:24 - So let's consider some code like this.
632:26 - We'll keep it simple
like last week, and where
632:28 - we wanted to swap some values like
int A and int B, for instance, here.
632:35 - Void because I'm not going to return
a value, but I have a function
632:38 - called swap.
632:39 - So here, for instance,
might be some code for this.
632:44 - But why is it so complicated?
632:45 - Here, let's actually take a step back.
632:47 - Why don't we do this here.
632:48 - I think we have time
for one more volunteer.
632:50 - Could we get someone to come on up?
632:51 - You have to be comfy
on camera and you're
632:54 - being asked to help with your-- oh,
I'll go with the friend, pointing.
632:57 - So whoever has their
friend doing this here--
633:01 - no?
633:01 - Now they're pointing it over here.
633:03 - Now, literally an arm is being twisted.
633:05 - OK.
633:07 - Come on down.
633:07 - That backfired.
633:13 - Come on over.
633:19 - And what is your name?
633:21 - AUDIENCE: Marina.
633:22 - DAVID J. MALAN: Marina.
633:23 - Nice to meet you.
633:25 - Who were you trying to volunteer?
633:27 - AUDIENCE: My friend Jesse.
633:28 - DAVID J. MALAN: OK.
633:29 - So here we have for Marina two
glasses of liquid, orange and purple,
633:33 - just so that they're super obvious.
633:35 - And suppose that the problem
at hand, like last week,
633:37 - it's just to swap two values, as
though these two glasses represented
633:40 - two people and we want to swap them.
633:42 - But let's consider these glasses
to be like variables, or location
633:45 - in an array, and you know what?
633:47 - I'd really like you to swap the values.
633:50 - So orange has to go in there,
and purple has to go in there.
633:53 - How would you do it?
633:54 - And we'll see if we can
then translate that to code.
633:56 - AUDIENCE: [INAUDIBLE]
633:58 - DAVID J. MALAN: OK, what--
633:59 - say it a little louder.
634:01 - All right, yeah.
634:02 - So presumably, you're
struggling mentally
634:04 - with how you would do this without
having an extra cup, so good foresight
634:08 - here.
634:08 - Let me go ahead and we do have a
temporary variable, if you will.
634:11 - So if I hand you this, how would
you now solve this problem?
634:16 - AUDIENCE: I would go
like that, but it's--
634:18 - DAVID J. MALAN: No, that's--
634:18 - Oh.
634:19 - Well, OK.
634:20 - Go do it-- go with your instincts.
634:23 - OK.
634:24 - Sure, go ahead.
634:26 - Go to whatever your instincts are.
634:34 - Yeah, so a little-- so
strictly speaking, probably
634:37 - shouldn't have moved the
glasses just because that
634:39 - would be like moving
the array locations,
634:41 - so let's actually do it one
more time but the glasses now
634:43 - have to go back where
they originally are.
634:45 - So how would you swap these now,
using this temporary variable?
634:50 - OK, good.
634:51 - Otherwise we'd be completely
uprooting the array, for instance,
634:54 - by just physically moving it around.
634:56 - So you moved the orange into
this temporary variable,
634:58 - then you copied the purple
into where the orange was,
635:01 - and now, presumably, excellent.
635:03 - The orange is going to end
up where the purple once was
635:06 - and this temporary variable,
it stored up some extra memory.
635:08 - It was necessary at the time,
but not necessary, ultimately.
635:11 - But a round of applause if we could,
and thank you for doing that so well.
635:17 - So the fact that it
instantly occurred to Mariana
635:21 - that you need some temporary variable
is a perfect translation to code,
635:25 - and in fact this code here,
that we might glimpse now,
635:28 - is reminiscent of
exactly that algorithm,
635:30 - where A and B, at the end of the
day, are the same chunks of memory.
635:33 - Just like the second
time, the two glasses
635:35 - have to kind of stay put, even
though we're physically lifting them,
635:37 - but they're going back
to where they were,
635:39 - is kind of like having
two values, A and B,
635:41 - and you just have a temporary
variable into which you copy A,
635:44 - then you change A with
B, then you go and change
635:47 - B with whatever the
original value of A was,
635:50 - because you temporarily stored it
in this temporary variable, tmp.
635:55 - Unfortunately, this code doesn't
necessarily work as intended.
635:59 - So let me go over to my
VS Code here and open up
636:02 - a program called swap.c,
and in swap.c, let
636:06 - me whip up something really quickly
here with, how about include stdio.h,
636:11 - int main(void).
636:12 - Inside of main let me do something
like x gets 1 and y gets 2.
636:18 - Let me just print out as a
visual confirmation that x is %i,
636:23 - y is %i backslash n, plugging
in x and y, respectively.
636:28 - Then let me call a swap function
that we'll invent in just a moment.
636:31 - Swap x and y And then let me print out
again x is %i, y is %i backslash n,
636:38 - just to print out again what they are,
because presumably I should see 1,
636:41 - 2 first, then 2, 1 the second time.
636:44 - Now how is swap going to be implemented?
636:46 - Let me implement it exactly
as on the screen a moment ago.
636:49 - So void swap int x--
636:52 - or let's call it int A
for consistency, int B.
636:54 - But I could always call
those anything I want.
636:57 - Int tmp gets A, A gets B, B gets tmp.
637:01 - So exactly as I proposed
a moment ago, and exactly
637:04 - as Mariana really implemented
it using these glasses of water.
637:08 - I need to now include my prototype,
as always, so nothing new there.
637:11 - And I'll just copy/paste that up here,
and now let's go ahead and run this.
637:15 - So make swap-- so far, so good-- swap--
637:18 - x is now 1, y is 2, x is 1, y is 2.
637:23 - So there seems to be a bit of a
bug here, but why might this be?
637:29 - This code does not in fact work, even
though it obviously works in reality.
637:33 - Yeah?
637:35 - AUDIENCE: Because A and B have different
addresses than x and y [INAUDIBLE]..
637:41 - DAVID J. MALAN: Good,
and let me summarize.
637:43 - A and B do indeed have
different addresses of x and y,
637:46 - and in fact what happens when you
call a function like this on line 11,
637:50 - calling swap, passing in x and
y, you are calling a function
637:54 - by value, so to speak.
637:56 - And this is a term of
art that just means
637:57 - you are passing in copies of x and
y, respectively, and calling them
638:02 - A and B in the context of this
function, but they're indeed copies.
638:06 - Now technically, these
names are local only.
638:10 - I could have called this x,
I could have called this y,
638:13 - I could have changed this to x,
this to y, this to x, and this to y.
638:17 - The problem would still remain.
638:19 - Just because you use the same names
in one function as you do elsewhere,
638:23 - that doesn't mean they're the same.
638:24 - They just look the same to you.
638:26 - But indeed, swap is going to get copies
of this x and y, and in this context,
638:31 - this scope, so to speak--
638:33 - x and y will be copies of the original.
638:36 - So for clarity, let me
revert this back to A and B
638:38 - just to make super clear that they're
indeed different, albeit copies,
638:42 - but there's indeed a problem there.
638:44 - This function actually works fine.
638:46 - In fact, notice this.
638:47 - Let me go ahead and print out
inside of this. printf A is %i,
638:52 - B is %i backslash n, and
then I'll print A and B.
638:56 - And let me do that same thing at the
beginning of this function before it
638:59 - does any work.
639:00 - Let me go ahead and rerun.
639:02 - Make swap, ./swap,
and this is promising.
639:06 - Initially, x is 1, y is 2, A
is 1, B is 2, A is 2, B is 1,
639:12 - but then nope-- x is 1, y is 2.
639:14 - So if anything, I've confirmed
that the logic is right--
639:17 - Mariana's logic is right, but
there's something about C.
639:20 - There's something about using one
function versus another that's actually
639:24 - creating a problem here.
639:26 - The fact that I'm passing in copies of
these values is creating this problem.
639:30 - So what in fact is going on?
639:31 - Well again, inside of your computer's
memory there is these little chips,
639:34 - and we've been talking
about them abstractly,
639:36 - it's just this grid of memory locations.
639:38 - It turns out that your
computer uses this memory
639:41 - in a pretty conventional way.
639:42 - It's not just random, where it just
puts stuff wherever is available,
639:46 - it actually uses different parts of
the memory for different purposes.
639:50 - And you have control over a lot of
it, but the computer uses some of it
639:54 - for itself.
639:55 - And let's go ahead
and zoom out from this
639:56 - and consider that within your computer's
memory, what a computer will typically
640:00 - do is actually store initially,
all of the zeros and ones
640:04 - that you compiled in the top of
your computer's memory, so to speak.
640:08 - So when you compile a program and
then you run it with ./whatever,
640:11 - or on a Mac or PC you double
click on it, the computer first--
640:15 - the operating system first-- loads all
of your program zeros and ones, a.k.a.
640:20 - Machine code, into just one big chunk
of memory at the top, so to speak.
640:24 - Below that it stores global
variables-- any variables
640:28 - you have created in your program
that are outside of main and outside
640:32 - of any functions.
640:33 - Generally, the top of your file.
640:35 - Globals tend to go at the top there.
640:36 - Then there's this chunk of memory
that's generally known as the heap--
640:39 - and we saw that word
briefly in Valgin's output,
640:42 - and then there's this other
chunk of memory called the stack.
640:45 - And it turns out that up until this
week you were using the stack heavily.
640:51 - Any time you use local variables in
a function they end up on the stack.
640:56 - Any time you use malloc, that
memory ends up on the heap.
641:00 - Now as the arrow suggests,
this actually looks
641:02 - like a problem waiting to happen because
if you use more and more and more
641:05 - heap, and more and more
and more stack, it's
641:07 - like two things barreling down the
tracks at one another-- this does not
641:09 - end well.
641:10 - And that's actually a problem.
641:11 - If you've ever heard the phrase
stack overflow, or use the website,
641:14 - this is the origin of its name.
641:16 - When you start to use
more and more and more
641:18 - memory by calling lots
and lots of functions
641:21 - or using lots and lots
of local variables,
641:23 - you use a lot of this stack memory.
641:25 - Or if you use malloc a lot and keep
calling malloc, malloc, malloc,
641:29 - and never really, or rarely calling
free, you just use more and more memory
641:33 - and eventually these two things might
overflow each other, at which point
641:36 - you're just out of luck.
641:37 - The program will crash or
something bad will happen.
641:40 - So the onus is on you
just to don't do that.
641:43 - But this is the design,
generally, of what's
641:45 - going on inside of
your computer's memory.
641:47 - Now within that memory, though,
there are certain conventions
641:51 - focusing on here, the stack.
641:52 - And in fact, let me go
over here with a marker
641:55 - and say that this represents the
bottom of my memory, ultimately.
641:58 - And so here we have a whole bunch of
wooden blocks and each of these squares
642:03 - represents a byte of memory
and this, for instance,
642:05 - might represent four bytes
altogether-- good enough for an int,
642:08 - or something like that.
642:09 - So in my original code that I wrote
earlier, that is in fact, buggy,
642:13 - what is in fact going on
inside the swap function?
642:16 - We can visualize it like this-- when
you run ./swap or any program for that
642:20 - matter, main is the first function
to get called with a C program,
642:23 - and so I'm just going to label
this bottom row of memory as main.
642:27 - And what were the two variables I
had in main called in this code?
642:31 - Yeah.
642:32 - x and y.
642:33 - And each of those was an
int, so that's four bytes,
642:35 - so it's deliberate
that I reserved four--
642:38 - a chunk of wood here that's four bytes.
642:41 - So let me just call this x, and I'm just
going to write the number 1 in this box
642:45 - here.
642:45 - And then I had my other variable y, and
I'm going to put the number 2 there.
642:49 - What happens when main calls swap
like it does in this code here?
642:54 - Well, it has two variables of its
own, A and B, and A initially is 1
643:00 - and B is initially 2, but it
has a third variable, tmp,
643:04 - which is a local variable in
addition to the arguments A and B
643:07 - that are passed in, so I'm going
to call this tmp, tmp over here.
643:12 - And what is the value of tmp?
643:13 - Well, we have to look back at the code.
643:15 - tmp initially gets the value of A.
All right, the value of a was 1,
643:19 - so tmp initially gets 1.
643:21 - That's step one in my
three line program.
643:23 - OK, A equals B. So that is assigned
from the right to the left of the B
643:27 - into the A So B is 2, A is
this, so let me go ahead
643:31 - and erase this and just overwrite that.
643:33 - So at this moment in the story
you have two copies of two,
643:37 - so that's OK though, because
the third line of code
643:40 - says tmp gets copied
into B. So what's tmp--
643:43 - 1, gets copied into B, so let
me overwrite this 2 with a 1,
643:48 - and now what happens?
643:50 - Now unfortunately, the code ends.
643:53 - swap doesn't actually do anything
with the result, and the problem in C
643:56 - is that I could have had a return value.
643:58 - I could go in there
and change void to int,
644:01 - but which one am I going to return?
644:02 - The A or the B?
644:04 - The whole goal is to
swap two values, and it
644:06 - seems kind of lame if you
can't write a function
644:08 - to do something as common per
last week sorting algorithms
644:12 - as swapping two values.
644:13 - But what really happens?
644:14 - Well, even though when this
program starts running,
644:18 - main is using this chunk of memory
at the bottom in the so-called stack,
644:21 - and the stack is just like
a cafeteria stack of trays--
644:24 - it grows up, like this.
644:25 - Here's main's memory on the stack.
644:27 - Here's the swap function's
memory on the stack.
644:29 - It's using three ints instead of two--
644:32 - instead of only two.
644:34 - What happens when the function
returns, whether it's void or not?
644:37 - The sort of recollection that
this is swap's memory goes away
644:41 - and garbage values are left.
644:42 - So, adorably, we get rid
of these values here,
644:46 - and there's still data there--
technically, the numbers 1, 1, and 2
644:51 - are still there in the computer's
memory but they no longer belong to us
644:54 - because the function has now returned.
644:56 - So they're still in there and this
is kind of an example visually
644:59 - of why there's other stuff in memory
even though you didn't put it there,
645:03 - necessarily.
645:03 - Sometimes you did put
it there, but now once
645:06 - swap returns you only should be
touching memory inside of main.
645:10 - But we've never actually
copied one value into main.
645:14 - We haven't returned anything and we
haven't solved this fundamentally.
645:18 - So how could we do this?
645:19 - Well, what if we instead passed
into swap not copies of x and y,
645:23 - calling them A and B. What if they
passed in breadcrumbs to x and y,
645:28 - sort of a treasure map that
will lead swap to the actual x
645:31 - and to the actual y?
645:32 - Today we have that
capability using pointers.
645:36 - So suppose that we
use this code instead.
645:40 - There's a lot of stars going on
here, which is a bit annoying,
645:43 - but let's consider what it
is we're trying to achieve.
645:45 - What if we pass in not x and y, but
the address of x and the address of y,
645:50 - respectively--
breadcrumbs, if you will--
645:52 - that will lead swap to
the original values.
645:55 - Then what we do is we still
give ourselves a tmp variable,
645:59 - like an empty glass.
646:00 - It's still a glass, so
we still call it an int,
646:03 - but what do we want to put
into that temporary variable?
646:05 - We don't want to put A into it,
because that's an address now.
646:08 - We want to go to that
address per the star
646:10 - and put whatever's at that address.
646:12 - What do we then want to do?
646:13 - Well, we want to then copy
into whatever's at location A,
646:17 - we want to copy over to
location A's contents
646:20 - whatever is at location B's
contents and then lastly, we
646:24 - want to copy tmp into
whatever's at location B.
646:27 - So again, we're very deliberately
introducing all of these stars
646:31 - because we don't want to
change any of these addresses,
646:33 - we want to go to these addresses
per the reference operator
646:37 - and put values there,
or get values from.
646:41 - So what does this actually mean?
646:43 - Well, if I kind of rewind in this story
and I go back here, I still have tmp,
646:47 - although I'm going to delete its
value to begin with, I still have B
646:53 - and I still have A, but
what's going to be different
646:56 - this time is how I use A and B.
So let me finish erasing those.
647:00 - That's A on the left,
this is B on the right.
647:02 - At this point in the
story, we're rerunning swap
647:05 - with this new and improved version,
and let's see what happens.
647:08 - Well, x is presumably at some address.
647:12 - Maybe it's like 0x123, as always.
647:15 - What then does A get
when I'm using this code?
647:18 - The value of A is 0x123.
647:22 - What is the value of B?
647:23 - Maybe y is that 0x456.
647:27 - What goes in B?
647:28 - Well, I'm going to put 0x456,
and the what am I going to do?
647:33 - Based on these three
lines of code, I'm going
647:35 - to store in tmp whatever is at the
address in A. What is the address in A?
647:40 - That's this thing here, so
I'm going to put 1 in tmp.
647:43 - Line two-- I'm going to go to B--
647:45 - all right, B is 456, so
I'm going to B and I'm
647:48 - going to store 2 at whatever is
at location A, and at location A
647:53 - is 123, so that's this,
so what am I going to do?
647:56 - I'm going to change this 1 to a 2.
647:59 - Last line of code-- get the
value of tmp, which is 1,
648:01 - and then put it at whatever the
location B is, so B, 456, go there
648:07 - and change it to be the value
of tmp, tmp, which puts 1 here.
648:11 - That's it for the code.
648:12 - There's still no return value.
648:14 - swap returns, which means
these three temporary variables
648:17 - are garbage values now.
648:19 - They can be reused by
subsequent function calls
648:21 - but now, I've actually
swapped the values of x and y.
648:26 - Which is to say what came as naturally
as the real world here for Mariana
648:30 - is not quite as simply
done in C because again,
648:33 - functions are isolated from each other.
648:36 - You can pass in values but you
get copies of those values.
648:39 - If you want one function to affect the
value of a variable somewhere else,
648:44 - you have to 1, understand
what's going on but 2,
648:47 - pass things in as by a pointer here.
648:50 - So if I go back to my code here,
I need to make a few changes now.
648:53 - Let me get rid of these extra printf's.
648:56 - Let me go in and add all these stars.
648:58 - So I'm dereferencing these
actual addresses here and here,
649:02 - and I've got to make one more change.
649:05 - How do I now call swap if swap is
expecting an int star and an int star?
649:11 - That is, the address of an int
and the address of another int.
649:14 - What do I change on line 11 here?
649:17 - Yeah.
649:19 - Sorry, a little louder.
649:21 - AUDIENCE: [INAUDIBLE]
649:25 - DAVID J. MALAN: Sorry,
the address of operator.
649:28 - So up here on line 11, we do
ampersand x and ampersand y.
649:33 - So that yes, we're technically
passing in a copy of a value,
649:36 - but this time the copy we're passing
in is technically an address,
649:39 - and as soon as we have an address, just
like when I held up the fuzzy finger--
649:42 - the foamy finger-- I can point at
that address, I can go to that address
649:45 - and actually get a value from the
mailbox or put a value into the mailbox
649:49 - if I even want.
649:52 - So let's cross our fingers
now and do make swap, Enter.
649:56 - Oh my God, so many mistakes.
649:58 - Oh, I didn't remember
to change my prototype,
650:00 - so let me go way up here and
add two more stars because I
650:03 - made that change already.
650:05 - Make swap, ./swap, and viola--
now I have actually swapped.
650:10 - Thank you.
650:14 - Thank you.
650:15 - The two values.
650:17 - All right, so what more can we do here?
650:19 - Well, let me consider
that all this time we've
650:24 - been deliberately using
GetString and GetInt and GetFloat
650:29 - and so forth, but for a reason.
650:30 - These aren't just training wheels
for the sake of making things easier,
650:33 - they're actually in place
to make your code safer.
650:36 - And to illustrate this, let me go
ahead and open up one other file here.
650:40 - How about a file called scanf.c.
650:45 - It turns out that the old
school way-- the way in C,
650:48 - really, of getting user input,
is via functions like scanf,
650:52 - and let me go ahead and include
stdio.h, int main(void),
650:56 - and without using the CS50 library at
all for strings or for any of those
650:59 - get functions.
651:00 - Let me give myself an int called x.
651:03 - Let me just print out what the value of
x is, even though it's going to be a--
651:07 - or rather, ask the user for
the value by asking them for x.
651:10 - And I'm going to use a function
called scanf that's going to scan
651:14 - in an integer using %i, and I'm going
to store whatever the human types
651:20 - in at this location.
651:22 - And then I'm going to go ahead and,
just so we can see what happened,
651:25 - I'm going to print out with %i
whatever the human typed in as follows.
651:29 - All right, so line eight
is week 1 style code.
651:32 - Line five and six is week 1 style code.
651:36 - So the curiosity today is this new line.
scanf is another function in stdio.h,
651:41 - and notice what I'm doing.
651:43 - I'm using the same syntax
that I use for printf,
651:46 - which is kind of a little clue-- a
format code to tell scanf what it is I
651:49 - want to scan in, that is, read
from the human's keyboard--
651:52 - and I'm telling it where to put
whatever the human typed in.
651:55 - I can't just say x, because we run into
the same darn problem as with swap.
651:59 - I have to give a little
breadcrumb to the variable
652:02 - where I want scanf to
put the human's integer.
652:05 - And so this just tells the
computer to get an int.
652:08 - This is what you would have
had to type, essentially,
652:11 - in week 1 just to get
an int from the user,
652:14 - and there's a whole bunch of
things that can go wrong still,
652:16 - but that's the cryptic syntax we
would have had to show you in week 1.
652:20 - Let me go ahead and make scanf here--
652:22 - oops-- user error.
652:25 - Put the semicolon in the wrong place.
652:27 - Make scanf, Enter.
652:29 - Oh my God.
652:30 - Non void doesn't return a value.
652:35 - Oh, thank you.
652:37 - Strike two.
652:38 - OK.
652:39 - Make scanf.
652:40 - There we go.
652:41 - OK, so scanf--
652:42 - I'm going to type in a number like
50 and it just prints it back out.
652:45 - So that is the traditional way of
implementing something like GetInt.
652:49 - The problem, though, is when you
start to get into strings, things
652:53 - get dangerous quickly.
652:54 - Let me delete all of
this and give myself
652:56 - a string s, although wait a
minute-- we don't call it strings
652:59 - anymore-- char star to store a string.
653:02 - Then let me go ahead and just prompt the
user for a string, using just printf.
653:06 - Then let me go ahead and use scanf, ask
them for a string this time with %s,
653:10 - and store it at that address.
653:13 - Then let me go ahead and print
out whatever the human typed
653:16 - in just by using the same notation.
653:19 - So here, line five is the same thing
as string s, but we've taken back
653:24 - that layer today so it's char star s.
653:26 - This is just week one this is
just week one, line seven is new.
653:31 - scanf will also read from the human's
keyboard a string and store it at s.
653:37 - But that's OK, because s is an address.
653:39 - It's correct not to do the ampersand.
653:41 - It's not necessary.
653:42 - A string is and has always
been a char star, a.k.a string.
653:47 - The problem, though, arises as follows--
653:49 - if I do make scanf--
653:51 - oh my God, what did I do wrong--
653:53 - I can't-- OK, we have certain
defenses in place with make.
653:55 - Let me do clang of scanf.c, an
output of program called scanf.
654:02 - All right, so I'm overriding
some of our pedagogical defenses
654:05 - that we have in place with make.
654:06 - Let me now run scanf of this version,
Enter, and let me type in something
654:11 - like, how about hi again.
654:15 - So it didn't even store something
and it weirdly printed out null.
654:18 - This time it's in lowercase,
but that is somewhat related.
654:22 - What did I fundamentally
do wrong though, here?
654:26 - Why is this getting
more and more dangerous?
654:29 - And let me illustrate
the point even more.
654:30 - What if I type in not just something
like hello, which also doesn't work.
654:34 - What if I do like, hellooooo and
make a really long string, Enter--
654:39 - that still works.
654:41 - Can I do this again?
654:43 - Let's try again.
654:45 - Right, a really long,
unexpectedly long string.
654:48 - This is the nondeterminism kicking in.
654:50 - Enter.
654:51 - All right, damn it.
654:51 - I was trying to trigger
a segmentation fault
654:53 - but it wouldn't, but
the point still remains.
654:56 - It's still not working, but what's
the essence of why this isn't working,
655:01 - and it's not storing my actual input?
655:03 - Yeah.
655:04 - AUDIENCE: Do you have to make a space?
655:06 - DAVID J. MALAN: We have
to make space for it.
655:07 - So what we're missing here is
malloc, or something like that.
655:11 - So I could do that, I could
do something like this.
655:14 - Well, let the human type in
at least a three letter word
655:16 - so I could do malloc of 3
plus 1 for the null character.
655:20 - So let me give them four characters,
and let me go ahead and do make scanf--
655:25 - whoops.
655:26 - Nope, sorry. clang, I have to--
655:28 - nope.
655:29 - Dammit.
655:29 - Oh, include stdlib.h-- there we go.
655:36 - That gives me malloc, now I'm
going to recompile this with clang,
655:39 - now I'm going to rerun it, and now I'm
going to type in my first thing, hi.
655:42 - That now works.
655:43 - And let me get a little aggressive now
and type in hello, which is too long.
655:47 - Still works, but I'm getting lucky.
655:49 - Let me try a hellooooooo.
655:53 - Damn it, that still works, too.
655:55 - Sort of.
655:56 - But it actually-- not quite.
655:58 - There's some weirdness
going on there already.
656:00 - It turns out I can also do this.
656:02 - I could actually just say
char star four and give myself
656:05 - an array of four characters.
656:07 - Let me try this one more time.
656:08 - So let me rerun clang ./scanf.
656:12 - Hellooooooo, clearly exceeding
the four characters--
656:16 - there we go.
656:17 - Thank you, all right.
656:22 - So the point here, though, is
if we hadn't given you GetInt,
656:24 - you would have had to use the
scanf thing-- not a huge deal
656:27 - because it seemed to work.
656:28 - But if we hadn't given you GetString you
would have had to do stuff like this,
656:31 - knowing about malloc already or
knowing about strings being erased,
656:34 - and even now there's a danger.
656:36 - If the human types in five letters,
six letters, 100 letters-- this code,
656:41 - like with the Hello input, will
probably just crash, which is bad.
656:44 - So GetString also has
this functionality built
656:46 - in where we have a
fancy loop inside such
656:49 - that we allocate using malloc as
many bytes as you physically type in,
656:53 - and we use malloc
essentially every keystroke.
656:55 - The moment you type in h-e-l-l-o, we're
laying the tracks as we go and we keep
657:00 - allocating more and more memory so that
we theoretically will never crash with
657:04 - GetString even though
it's this easy to crack--
657:07 - this easy to crash your code
using scanf if you again
657:10 - did it without the help of a library.
657:13 - So where are we all going with this?
657:15 - Well, let me show you a
few final examples that'll
657:17 - pave the way for what
will be problem set four.
657:19 - Let me go ahead and open
up from today's code--
657:23 - which is available on
the course's website--
657:25 - for instance, a program like
this, called phonebook.c,
657:32 - and I'm just going to give
you a quick tour of it,
657:34 - that you'll see more details on in
the context of p-set four itself.
657:37 - We're going to introduce a few
new functions you're going to see.
657:40 - You're going to see a function called
fopen, which stands for file open,
657:43 - and it takes two arguments-- the
name of a file to open like a CSV
657:47 - that you might manipulate in Excel or
Google Spreadsheets or the like-- comma
657:50 - separated values, and then something
like A for append, R for read,
657:55 - W for write, depending on whether
you want to add to the file,
657:58 - just open it up, or change it.
658:00 - We're going to introduce
you to a file pointer.
658:03 - You'll see that capital file--
658:05 - which is a little bit
unconventional-- capital file is
658:07 - a pointer to an actual file
on the computer's hard drive
658:10 - so that you can actually access
something like a CSV file,
658:13 - or heck, even images.
658:14 - And we're going to see
down below that you're also
658:16 - going to have the ability to write
files as well, or print to files.
658:20 - You'll see functions like
printf printf for file printf.
658:24 - Or fwrite-- file write-- which now that
you will begin to understand pointers,
658:29 - you'll have the ability to
actually not only read files--
658:33 - text files, images, other
things-- but also write them out.
658:36 - In fact for instance, just as a teaser
here, JPEGs will be one of the things
658:42 - we focus on this week where
we give you a forensic image
658:44 - and your goal is to
recover as many photographs
658:47 - from this forensic image of a
digital camera as you possibly can.
658:51 - And the way you're going to do
that is by knowing in advance
658:54 - that every JPEG in the world starts
with these three bytes, written
658:58 - in hexadecimal, but these three numbers.
659:01 - And so in fact, just as
a teaser, let me open up
659:03 - an example you'll see on the
course's website for today.
659:07 - If I scroll through here,
you'll see a program
659:09 - that does a little something like this.
659:11 - And again, more on this--
659:13 - if we could hit the button--
659:15 - there we go.
659:16 - So here we have the notion of a byte
we're going to create for ourselves.
659:21 - We'll see a data type called byte,
which is a common convention.
659:24 - This gives me three bytes.
659:25 - And you're going to learn
about a function called fread,
659:28 - which reads from a file some number
of bytes-- for instance, three bytes.
659:31 - We might then use code like this.
659:33 - If bytes bracket zero
equals equals 0xFF and bytes
659:37 - bracket 1 equals 0xD8 and bytes bracket
2 equals 0xFF, all three of those
659:43 - bytes I just claimed represent a
JPEG, you'll see an output like this.
659:47 - Let me go ahead and run
this program as follows.
659:51 - Let me copy jpeg.c into my
directory from today's distribution.
659:55 - Let me do make jpeg, and let me run
jpeg on a file which is available online
660:03 - called lecture.jpeg, and I
claim yes, it's possibly a JPEG.
660:07 - Well, what is that file?
660:08 - Let me open it up for us, called
lecture.jpeg, and here, for instance,
660:11 - is that same photo with which we began
class, namely implemented as a JPEG.
660:15 - But what we're also
going to do this week
660:18 - is start to implement our own sort
of filters a la Instagram, whereby
660:22 - we might take images and actually
run them through a program that
660:26 - creates different versions thereof.
660:28 - For instance, using a
different file format
660:30 - called BMP, which essentially lays out
all of its pixels from left to right,
660:33 - top to bottom, in a grid.
660:35 - You're going to see a struct--
660:36 - a data struct in C that's
way more complicated
660:38 - than the candidate
structure from the past,
660:40 - or the person structure
from the past, that
660:43 - looks like this, which is just
a whole bunch more values in it,
660:45 - but we'll walk you through
these in the p-set.
660:47 - And we might take a
photograph like this and ask
660:49 - you to run a few different
filters on it a la Instagram,
660:52 - like a black and white filter,
or grayscale, a sepia filter
660:55 - to give it some old school feel, or
a reflection like this to invert it,
660:59 - or blur it, even in this way.
661:02 - And just to end on a note
here, I have a version
661:05 - of this code ready to go that doesn't
implement all of those filters,
661:08 - it just implements one filter initially.
661:11 - Let me go ahead and just ready
this on my computer here.
661:14 - I'm going to go into my
own version of filter
661:16 - and you'll see a few
files that will give you
661:18 - a tour of this coming week
in bitmap.h, for instance,
661:21 - is a version of this structure that
I claimed existed a moment ago.
661:26 - And let me show you this file here,
helpers.c, in which there is a function
661:34 - called filter that I've already
implemented in advance today.
661:38 - But the ones we give you for the piece
that won't already be implemented,
661:41 - this function called filter
takes the height of an image,
661:43 - the width of an image, and
a two dimensional array.
661:46 - So rows and columns
of pixels, and then I
661:49 - have a loop like this that iterates over
all of the pixels in an image from top
661:53 - to bottom, left to right.
661:55 - And then notice what
I'm going to do here.
661:57 - I'm going to change the blue
value to be zero in this case,
662:00 - and the green value to
be zero in this case.
662:02 - But why?
662:03 - Well, the image I have
here in mind is this one,
662:07 - whereby we have this
hidden image that simply
662:10 - has old school style-- a
secret message embedded in it.
662:13 - And if you don't happen to have in
your dorm one of these secret decoder
662:16 - glasses that essentially
make everything red--
662:18 - getting rid of the green in the
world and the blue in the world--
662:21 - you can actually-- I'm actually
probably the only one who
662:24 - can read this right
now-- see what message
662:26 - is hidden behind all of this red noise.
662:28 - But if using my code written here in
helpers.c I get rid of all the blue
662:34 - in the picture and I get rid of
all the green in the picture,
662:37 - essentially implementing
the idea of this filter--
662:39 - this red filter where you only see red--
662:42 - well, let's go ahead and
compile this program.
662:45 - Make filter, run ./filter
on this hidden message.bmp.
662:50 - I'm going to save it in a
new file called message.bmp,
662:53 - and with one final flourish
we're going to open up
662:56 - message.bmp, which is the result
of having put on these glasses,
663:00 - and hopefully now you
too will see what I see.
663:12 - All right, that's it for CS50!
663:14 - We'll see you next time.
663:17 - [MUSIC PLAYING]
664:35 - SPEAKER 1: All right.
664:37 - This is CS 50.
664:39 - And this is already week 5,
which means this is actually
664:42 - our last week in C together.
664:44 - In fact, in just a few days'
time, what has looked like this
664:48 - and much more cryptic
than this perhaps, is
664:50 - going to be distilled into
something much simpler next week.
664:53 - When we transition to a
language called Python.
664:55 - And with Python, we'll still have our
conditionals, and loops, and functions,
664:59 - and so forth.
665:00 - But a lot of the low-level plumbing
that you might have been wrestling with,
665:03 - struggling with, frustrated by,
over the past couple of weeks,
665:06 - especially, now that
we've introduced pointers.
665:08 - And it feels like you probably
have to do everything yourself.
665:11 - In Python, and in a lot
of higher level languages
665:14 - so to speak-- more modern,
more recent languages,
665:16 - you'll be able to do so much more
with just single lines of code.
665:20 - And indeed, we're going to start
leveraging libraries, all the more code
665:23 - that other people wrote.
665:24 - Frameworks, which is collections of
libraries that other people wrote.
665:27 - And on top of all that, will you be
able to make even better, grander, more
665:31 - impressive projects, that actually solve
problems of particular interest to you.
665:34 - Particularly, by way of
your own final project.
665:37 - So last week though, in week 4,
recall that we focused on memory.
665:41 - And we've been treating this
memory inside of your computer
665:43 - is like a canvas, right.
665:45 - At the end of the day, it's just
zeros and ones, or bytes, really.
665:48 - And it's really up to you
what you do with those bytes.
665:51 - And how you interconnect them, how
you represent information on them.
665:54 - And arrays, were like
one of the simplest ways.
665:56 - We started playing
around with that memory.
665:58 - Just contiguous chunks of memory.
666:00 - Back-to-back, to back.
666:01 - But let's consider, for a
moment, some of the problems that
666:04 - pretty quickly arise with arrays.
666:06 - And then, today focus on what more
generally are called data structures.
666:09 - Using your computer's memory as
a much more versatile canvas,
666:14 - to create even
two-dimensional structures.
666:16 - To represent information,
and, ultimately,
666:18 - to solve more interesting problems.
666:20 - So here's an array of size 3.
666:22 - Maybe, the size of 3 integers.
666:24 - And suppose that this
is inside of a program.
666:26 - And at this point in the story,
you've got 3 numbers in it already.
666:29 - 1, 2 and 3.
666:30 - And suppose, whatever the context,
you need to now add a fourth number
666:34 - to this array.
666:35 - Like, the number 4.
666:36 - Well, instinctively, where
should the number 4 go?
666:39 - If this is your computer's
memory and we currently
666:41 - have this array 1, 2, 3, from what.
666:43 - Left to right.
666:44 - Where should the number 4
just, perhaps, naively go.
666:47 - Yeah, what do you think?
666:48 - AUDIENCE: Replace number 1.
666:49 - SPEAKER 1: Sorry?
666:50 - AUDIENCE: Replace number 1.
666:51 - SPEAKER 1: Oh, OK.
666:52 - So you could replace number 1.
666:53 - I don't really like
that, though, because I'd
666:55 - like to keep number 1 around.
666:56 - But that's an option.
666:58 - But I'm losing, of course, information.
666:59 - So what else could I do if
I want to add the number 4.
667:02 - Over there?
667:02 - AUDIENCE: On the right side of 3.
667:04 - SPEAKER 1: Yeah.
667:04 - So, I mean, it feels like
if there's some ordering
667:06 - to these, which seems kind
of a reasonable inference,
667:09 - that it probably belongs
somewhere over here.
667:11 - But recall last week, as we started
poking around a computer's memory,
667:14 - there's other stuff
potentially going on.
667:16 - And if fill that in, ideally, we'd
want to just plop the number 4 here.
667:20 - If we're maintaining this kind of order.
667:22 - But recall in the context
of your computer's memory,
667:24 - there might be other stuff there.
667:25 - Some of these garbage
values that might be usable,
667:28 - but we don't really know
or care what they are.
667:30 - As represented by Oscar here.
667:31 - But there might actually
be useful data in use.
667:34 - Like, if your program has not
just a few integers in this array,
667:38 - but also a string that
says like, "Hello, world."
667:40 - It could be that your computer has
plopped the H-E-L-L-O W-O-R-L-D right
667:46 - after this array.
667:47 - Why?
667:48 - Well, maybe, you created the
array in one line of code
667:50 - and filled it with 1, 2, 3.
667:52 - Maybe the next line of
code used GET-STRING.
667:54 - Or maybe just hard coded a string
in your code for "Hello, world."
667:57 - And so you painted yourself
into a corner, so to speak.
668:00 - Now I think you might claim,
well, let's just overwrite the H.
668:03 - But that's problematic
for the same reasons.
668:04 - We don't want to do that.
668:06 - So where else could the 4 go?
668:09 - Or how do we solve this problem
if we want to add a number,
668:12 - and there's clearly memory available.
668:14 - Because those garbage values are junk
that we don't care about anymore.
668:17 - So we could certainly reuse those.
668:20 - Where could the 4, and
perhaps this whole array, go?
668:23 - OK.
668:24 - So I'm hearing we could
move it somewhere.
668:26 - Maybe, replace some of
those garbage values.
668:27 - And honestly, we have a lot of options.
668:29 - We could use any of these
garbage values up here.
668:32 - We could use any of these down
here, or even further down.
668:34 - The point is there is plenty
of memory available as
668:38 - indicated by these Oscars, where
we could put 4, maybe even, 5,
668:41 - 6 or more integers.
668:43 - The catch is that we
chose poorly early on.
668:46 - Or we just got unlucky.
668:47 - And 1, 2, 3 ended up back-to-back with
some other data that we care about.
668:51 - All right, so that's fine.
668:52 - Let's go ahead and assume that
we'll abstract away everything else.
668:55 - And we'll plop the new
array in this location here.
668:58 - So I'm going to go ahead
and copy the 1 over.
669:00 - The 2 over.
669:01 - The 3 over.
669:01 - And then, ultimately, once
I'm ready to fill the 4,
669:04 - I can throw away, essentially,
the old array at this point.
669:07 - Because I have it now
entirely in duplicate.
669:09 - And I can populate it with the number 4.
669:11 - All right.
669:11 - So problem solved.
669:12 - That is a correct potential
solution to this problem.
669:15 - But, what's the trade off?
669:16 - And this is something we're going to
start thinking about all the more.
669:19 - What's the downside of having
solved this problem in this way?
669:22 - Yeah.
669:23 - I'm adding a lot of running time.
669:25 - It took me a lot of effort to
copy those additional numbers.
669:28 - Now, granted, it's a small array.
669:29 - 3 numbers, who cares.
669:30 - It's going to be over
in the blink of an eye.
669:32 - But if we start talking
about interesting data sets,
669:35 - web application data sets,
mobile app data sets.
669:37 - Where you have not just a few, but
maybe a few hundred, few thousand,
669:41 - a few million pieces of data.
669:43 - This is probably a suboptimal
solution to just, oh,
669:46 - move all your data from
one place to another.
669:48 - Because who's to say
that we're not going
669:49 - to paint ourselves into a new corner.
669:51 - And it would feel like you're wasting
all of this time moving stuff around.
669:54 - And, ultimately, just costing
yourself a huge amount of time.
669:58 - In fact, if we put this now into
the context of our Big O notation
670:01 - from a few weeks back, what might
the running time now of Search
670:06 - be for an array?
670:07 - Let's start simple.
670:08 - A throwback a couple of weeks ago.
670:10 - If you're using an array, to
recap, what was the running time
670:14 - of a Search algorithm in Big O notation?
670:17 - So, maybe, in the worst case.
670:19 - If you've got n numbers, 3 in this
case or 4, but n more generally.
670:23 - Big O of what for Search?
670:25 - Yeah.
670:26 - What do you think?
670:26 - AUDIENCE: Big O of n.
670:27 - SPEAKER 1: Big O of n.
670:28 - And what's your intuition for that?
670:30 - AUDIENCE: [INAUDIBLE].
670:35 - SPEAKER 1: OK.
670:36 - Yeah.
670:36 - So if we go through each element,
for instance, from left to right,
670:39 - then Search is going to take
this a Big O running time.
670:42 - If, though, we're talking about
these numbers, specifically.
670:46 - And now I'll explicitly stipulate
that, yeah, they're sorted.
670:48 - Does that buy us anything?
670:50 - What would the Big O notation be
for Searching an array in this case,
670:54 - be it of size 3, or 4,
or n, more generally.
670:56 - AUDIENCE: Big O of n.
670:57 - SPEAKER 1: Big O of, not n, but rather?
670:59 - AUDIENCE: Log n.
671:00 - SPEAKER 1: Log n, right.
671:01 - Because we could use per week zero
binary search on an array like this,
671:05 - we'd have to deal with some rounding.
671:06 - Because there's not a perfect
number of elements at the moment.
671:08 - But you could use binary search.
671:10 - Go to the middle roughly.
671:11 - And then go left or
right, left or right,
671:13 - until you find the
element you care about.
671:15 - So Search remains in Big O
of log n when using arrays.
671:19 - But what about insertion, now?
671:21 - If we start to think
about other operations.
671:23 - Like, adding a number to this array,
or adding a friend to your contacts
671:26 - app, or Google finding
another page on the internet.
671:29 - So insertion happens all the time.
671:31 - What's the running time of Insert?
671:34 - When it comes to inserting into
an existing array of size n.
671:38 - How many steps might that take?
671:40 - Big O of n.
671:41 - It would be, indeed, n.
671:42 - Why?
671:43 - Because in the worst case,
where you're out of space,
671:46 - you have to allocate, it
would seem, a new array.
671:48 - Maybe, taking over some of
the previous garbage values.
671:50 - But the catch is, even
though you're only
671:52 - inserting one new number,
like the number 4,
671:55 - you have to copy over all the darn
existing numbers into the new one.
671:58 - So if your original array of
size n, the copying of that
672:01 - is going to take Big O of n plus 1.
672:03 - But we can throw away the plus 1
because of the math we did in the past.
672:06 - So Insert now becomes Big O of n.
672:09 - And that might not be ideal.
672:11 - Because if you're in the habit
of inserting things frequently,
672:13 - that could start to add
up, and add up, and add up.
672:16 - And this is why computer programs,
and websites, and mobile apps
672:19 - could be slow.
672:20 - If you're not being mindful
of these trade offs.
672:23 - So what about, just for good
measure, Omega notation.
672:27 - And maybe, the best case.
672:28 - Well just to recap
here, we could get lucky
672:31 - and Search could just take one step.
672:33 - Because you might just get
lucky, and boom the number
672:35 - you're looking for is right there in
the middle, if using binary search.
672:38 - Or even linear search, for that matter.
672:40 - And insert 2.
672:41 - If there's enough room, and we didn't
have to move all of those numbers--
672:45 - 1, 2, and 3, to a new location.
672:46 - You could get lucky.
672:47 - And we could have, as
someone suggested, just
672:49 - put the number 4 right there at the end.
672:51 - And if we don't get lucky,
it might take n steps.
672:53 - If we do get lucky, it might just take
the one, or constant number, of steps.
672:57 - In fact, let me go ahead and do this.
672:59 - How about we do something like this?
673:00 - Let me switch over to some code here.
673:02 - Let me start to make a
program called List.C.
673:05 - And in List.C, let's
start with the old way.
673:08 - So we follow the breadcrumbs we've
laid for ourselves as follows.
673:11 - So in this List.C, I'm going
to include standardio.h.
673:14 - Int main(void) as usual.
673:16 - Then inside of my code here, I'm
going to go ahead and give myself
673:20 - the first version of memory.
673:22 - So int list 3 is now implemented
at the moment, in an array.
673:26 - So we're rewinding for
now to week 2 style code.
673:29 - And then, let me just
initialize this thing.
673:31 - At the first location will be 1.
673:32 - At the next location will be 2.
673:34 - And at the last location will be 3.
673:37 - So the array is zero indexed always.
673:39 - I, for just the sake
of discussion though,
673:41 - am putting in the numbers 1, 2,
3, like a normal person might.
673:44 - All right.
673:45 - So now let's just print these out.
673:46 - 4 int i gets 0.
673:48 - I less than 3, i++.
673:50 - Let's go ahead now and
print out using printf.
673:53 - %i/n list [i].
673:56 - So very simple program, inspired
by what we did in week 2.
673:59 - Just to create and then print
out the contents of an array.
674:03 - So let's Make List.
674:05 - So far, so good. ./list
And voila, we see 1, 2, 3.
674:09 - Now let's start to practice some of what
we're preaching with this new syntax.
674:14 - So let me go in now and get
rid of the array version.
674:19 - And let me zoom out a little bit
to give ourselves some more space.
674:22 - And now let's begin to
create a list of size 3.
674:25 - So if I'm going to do
this now, dynamically,
674:29 - so that I'm allocating these
things again and again,
674:33 - let me go ahead and do this.
674:34 - Let me give myself a list that's of type
int* equal the return value of malloc
674:41 - of 3 times the size of an int, so what
this is going to do for me is give me
674:48 - enough memory for that very first
picture we drew on the board.
674:51 - Which was the array
containing 1, 2, and 3.
674:54 - But laying the foundation
to be able to resize it,
674:57 - which was ultimately the goal.
674:59 - So my syntax is a little different here.
675:01 - I'm going to use malloc and get memory
from the so-called "heap", as we
675:04 - called it last week.
675:05 - Instead of using the stack by just
doing the previous version where I said,
675:09 - int list 3.
675:12 - That is to say this line of code from
the first version is in some sense
675:16 - identical to this line of
code in the second version.
675:20 - But the first line of
code puts the memory
675:22 - on the stack, automatically, for me.
675:24 - The second line of code,
that I've left here now,
675:27 - is creating an array of size 3,
but it's putting it on the heap.
675:30 - And that's important because it was only
on the heap and via this new function
675:34 - last week, malloc.
675:35 - That you can actually ask for more
memory, and even give it back.
675:38 - When you just use the
first notation int list 3,
675:42 - you have permanently given
yourself an array of size 3.
675:45 - You cannot add to that in code.
675:48 - So let me go ahead and do this.
675:50 - If list==null, something went wrong.
675:53 - The computers out of memory.
675:54 - So let's just return 1 and
quit out of this program.
675:56 - There's nothing to see here.
675:58 - So just a good error check there.
676:00 - Now let me go ahead and
initialize this list.
676:02 - So list [0] will be 1 again.
676:04 - List [1] will be 2.
676:05 - And list [2] will be 3.
676:07 - So that's the same kind
of syntax as before.
676:10 - And notice this equivalence.
676:13 - Recall that there's this relationship
between chunks of memory and arrays.
676:18 - And arrays are really just doing
pointer arithmetic for you,
676:21 - where the square bracket notation is.
676:22 - So if I've asked myself here, in line
5, for enough memory for 3 integers,
676:27 - it is perfectly OK to treat it now like
an array using square bracket notation.
676:32 - Because the computer will
do the arithmetic for me
676:35 - and find the first location,
the second, and the third.
676:37 - If you really want to be
cool and hacker-like, well,
676:42 - you could say list=1,
list+1=2, list+2=3.
676:51 - That's the same thing
using very explicit,
676:53 - pointer arithmetic, which we
looked at briefly last week.
676:56 - But this is atrocious to
look at for most people.
676:58 - It's just not very user friendly.
677:00 - It's longer to type, so
most people, even when
677:03 - allocating memory dynamically
as I did a second ago,
677:06 - would just use the more
familiar notation of an array.
677:10 - All right.
677:10 - So let's go on.
677:11 - Now suppose time passes
and I realize, oh shoot,
677:16 - I really wanted this array to
be of size 4 instead of size 3.
677:21 - Now, obviously, I could just
rewind and like fix the program.
677:23 - But suppose that this is
a much larger program.
677:25 - And I've realized, at
this point, that I need
677:28 - to be able to dynamically add more
things to this array for whatever
677:31 - reason.
677:32 - Well let me go ahead and do this.
677:33 - Let me just say, all
right, list should actually
677:36 - be the result of asking for 4
chunks of memory from malloc.
677:42 - And then, I could do something
like this, list [3]=4.
677:49 - Now this is buggy, potentially,
in a couple of ways.
677:52 - But let me ask first, what's really
wrong, first, with this code?
677:59 - The goal at hand is to start with
the array of size 3 with the 1, 2, 3.
678:03 - And I want to add a number 4 to it.
678:05 - So at the moment, in line 17, I've asked
the computer for a chunk of 4 integers.
678:10 - Just like the picture.
678:12 - And then I'm adding the number 4 to it.
678:14 - But I have skipped a few
steps and broken this somehow.
678:18 - Yeah.
678:19 - AUDIENCE: You don't know
exactly [INAUDIBLE]..
678:21 - SPEAKER 1: Yeah.
678:22 - I don't necessarily know where
this is going to end up in memory.
678:24 - It's probably not
going to be immediately
678:26 - adjacent to the previous chunk.
678:27 - And so, yes, even though I'm
putting the number for there,
678:30 - I haven't copied the 1, the 2, or
the 3 over to this chunk of memory.
678:34 - So well let me fix--
678:35 - well, that's actually, indeed,
really the essence of the problem.
678:40 - I am orphaning the
original chunk of memory.
678:43 - If you think of the picture that
I drew earlier, the line of code
678:46 - up here on line 5 that allocates
space for the initial 3 integers.
678:52 - This code is fine.
678:54 - This code is fine.
678:55 - But as soon as I do this, I'm
clobbering the value of list.
678:59 - And saying no, don't point
at this chunk of memory.
679:01 - Point at this chunk of memory, at
which point I've forgotten if you will,
679:05 - where the original chunk of memory is.
679:07 - So the right way to do something like
this, would be a little more involved.
679:12 - Let me go ahead and give
myself a temporary variable.
679:14 - And I'll literally call it TMP.
679:16 - T-M-P, like I did last week.
679:18 - So that I can now ask the computer for
a completely different chunk of memory
679:21 - of size 4.
679:22 - I'm going to again say
if TMP equals null,
679:25 - I'm going to say bad
things happened here.
679:27 - So let me just return 1.
679:29 - And you know what,
just to be tidy, let me
679:31 - free the original list before I quit.
679:34 - Because remember from
last week, any time
679:35 - you use malloc you
eventually have to use free.
679:38 - But this chunk of code here
is just a safety check.
679:41 - If there's no more memory,
there's nothing to see here.
679:43 - I'm just going to clean
up my state and quit.
679:46 - But now, if I have asked
for this chunk of memory,
679:50 - now I can do this 4 int i gets 0.
679:55 - I is less than 3, i++.
679:58 - What if I do something like this?
680:00 - TMP [i] equals list [i].
680:04 - That would seem to have the effect
of copying all of the memory from one
680:08 - to the other.
680:09 - And then, I think I need to
do one last thing TMP [3]
680:12 - gets the number 4, for instance.
680:14 - Again, I'm hard coding the numbers
for the sake of discussion.
680:18 - After I've done this,
what could I now do?
680:23 - I could now set list equals to TMP.
680:28 - And now, I have updated
my linked list properly.
680:31 - So let me go ahead and do this.
680:32 - 4 int i gets 0.
680:34 - I is less than 4, i++.
680:36 - Let me go ahead and print each of these
elements out with %i using list [i].
680:42 - And then, I'm going to return 0 just
to signify that all is successful.
680:45 - Now so to recap, we
initialize the original array
680:49 - of size 3 and plug-in
the values 1, 2, 3.
680:52 - Time passes.
680:53 - And then, I realize, wait a
minute, I need more space.
680:55 - And so I asked the computer
for a second chunk of memory.
680:58 - This one of size 4.
680:59 - Just as a safety check, I make
sure that TMP doesn't equal null.
681:01 - Because if it does I'm out of memory.
681:03 - So I should just quit altogether.
681:05 - But once I'm sure that
it's not null, I'm
681:07 - going to copy all the values from
the old list into the new list.
681:12 - And then, I'm going to add my new
number at the end of that list.
681:16 - And then, now that I'm done playing
around with this temporary variable,
681:19 - I'm going to remember
in my list variable what
681:23 - the addresses of this
new chunk of memory.
681:25 - And then, I'm going to print
all of those values out.
681:28 - So at least, aesthetically, when I
make this new version of my list,
681:31 - except for my missing semicolon.
681:34 - Let me try this again.
681:35 - When I make lists, Oh OK.
681:36 - What did I do this time?
681:38 - Implicitly declaring a
library function malloc.
681:40 - What's my mistake any time
you see that kind of error?
681:45 - AUDIENCE: Library.
681:45 - SPEAKER 1: Yeah.
681:46 - A library.
681:46 - So up here, I forgot to do include
stdlib.h, which is where malloc lives.
681:52 - Let me go ahead and,
again, do make list.
681:53 - There we go.
681:54 - So I fixed that dot/list.
681:56 - And I should see 1, 2, 3, 4.
681:59 - But they're still a bug here.
682:03 - Does anyone see the
the-- bug or question?
682:05 - AUDIENCE: You forgot to free them.
682:07 - SPEAKER 1: I'm sorry, say again.
682:08 - AUDIENCE: You forgot to free them.
682:09 - SPEAKER 1: I forgot to
free the original list.
682:12 - And we could see this, even if not
just with our own eyes or intuition.
682:15 - If I do something like
Valgrind of dot/list,
682:18 - remember our tool from this past week.
682:19 - Let me increase the size of my
terminal window, temporarily.
682:22 - The output is crazy cryptic at first.
682:25 - But, notice that I have definitely
lost some number of bytes here.
682:30 - And indeed, it's even
pointing at the line number
682:32 - in which some of those bytes were lost.
682:34 - So let me go ahead and back to my code.
682:36 - And indeed, I think what I need to do
is, before I clobber the value of list
682:41 - pointing it at this new chunk
of memory instead of the old,
682:44 - I think I now need to
first, proactively,
682:47 - say free the old list of memory.
682:49 - And then, change its value.
682:51 - So if I now do Make List and do dot
/list, the output is still the same.
682:56 - And, if I cross my fingers
and run Valgrind again
682:59 - after increasing my window
size, hopefully here.
683:03 - Oh, still a bug.
683:05 - So better.
683:06 - It seems like less memory is lost.
683:09 - What have I now forgotten to do?
683:11 - AUDIENCE: You forgot to free the end.
683:13 - SPEAKER 1: I forgot to free
it at the very end, too.
683:16 - Because I still have a chunk of
memory that I got from malloc.
683:19 - So let me go to the very
bottom of the program now.
683:21 - And after I'm done senselessly
just printing this thing out,
683:26 - let me free the new list.
683:29 - And now let me do Make List, dot/list.
683:33 - It's still works, visually.
683:35 - Now let's do Valgrind
of dot/list, Enter.
683:39 - And now, hopefully, all
heap blocks were freed.
683:43 - No leaks are possible.
683:44 - So this is perhaps the best output
you can see from a tool like Valgrind.
683:47 - I used the heap, but I freed
all the memory as well.
683:50 - So there were 2 fixes needed there.
683:52 - All right.
683:52 - Any questions then on this array-based
approach, the first of which
683:56 - is statically allocating
an array, so to speak.
683:59 - By just hard coding the number 3.
684:00 - The second version now is
dynamically allocating the array,
684:04 - using not the stack but the heap.
684:06 - But, it too, suffers from the
slowness we described earlier,
684:10 - of having to copy all those
values from one to the other.
684:12 - OK.
684:13 - A hand was over here.
684:14 - AUDIENCE: Why do you not
have to free the TMP?
684:17 - SPEAKER 1: Good question.
684:18 - Why did I not have to free the TMP?
684:20 - I essentially did eventually.
684:22 - Because TMP was pointing
at the chunk of 4 integers.
684:27 - But on line 33 here,
I assigned list to be
684:33 - identical to what TMP was pointing at.
684:36 - And so, when I finally freed the list,
that was the same thing as freeing TMP.
684:40 - In fact, if I wanted to, I could say
free TMP here and it would be the same.
684:43 - But conceptually, it's wrong.
684:45 - Because at this point in the story, I
should be freeing the actual list, not
684:49 - that temporary variable.
684:50 - But they were the same at
that point in the story.
684:52 - Yeah.
684:53 - AUDIENCE: Is [? the line ?] part of it?
684:55 - SPEAKER 1: Good question.
684:56 - And long story short,
everything we're doing thus far
684:58 - is still in the world of arrays.
685:00 - The only distinction
we're making is that
685:02 - in version 1, when I said int list
[3], that was an array of fixed size.
685:08 - So-called statically allocated
on the stack, as per last week.
685:12 - This version now is still dealing with
arrays, but I'm flexing my muscles
685:16 - and using dynamic memory allocation.
685:18 - So that I can still use an
array per the first pictures
685:20 - we started talking about.
685:22 - But I can at least grow
the array if I want.
685:24 - So we haven't even now solved this, even
better in a sense, with linked lists.
685:28 - That's going to come next.
685:29 - Yeah.
685:30 - AUDIENCE: How are you able to free
list and then still make list?
685:34 - SPEAKER 1: How am I able to free list?
685:37 - I freed the original address of list.
685:41 - I, then, changed what list is storing.
685:44 - I'm moving its arrow to
a new chunk of memory.
685:47 - And that is perfectly reasonable
for me to now manipulate
685:51 - because now list is pointing
at the same value of TMP.
685:54 - And TMP is what was given the return
value of malloc, the second time.
686:00 - So that chunk of memory is valid.
686:02 - So these are just squares
on the board, right.
686:05 - There's just pointers inside of them.
686:07 - So what I'm technically
saying is, and I'm not
686:09 - pointing I'm not freeing
list per se, I am
686:11 - freeing the chunk of memory that begins
at the address currently in list.
686:16 - Therefore, if a few lines later, I
change what the address is in list.
686:21 - Totally reasonable to then touch that
memory, and eventually free it later.
686:25 - Because you're not freeing
the variable per se,
686:27 - you're freeing the
address in the variable.
686:30 - Good distinction.
686:31 - All right.
686:31 - So let me back up here and
now make one final edit.
686:37 - So let's finish this with
one final improvement here.
686:41 - Because it turns out,
there's a somewhat better way
686:44 - to actually resize an array
as we've been doing here.
686:48 - And there's another function in stdlib
that's called realloc, for re-allocate.
686:52 - And I'm just going to go in and
make a little bit of a change
686:55 - here so that I can do the following.
686:58 - Let me go ahead and
first comment this now,
686:59 - just so we can keep track of what's
been going on this whole time.
687:02 - So dynamically allocate
an array of size 3.
687:09 - Assign 3 numbers to that array.
687:14 - Time passes.
687:15 - Allocate new array of size 4.
687:21 - Copy numbers from old
array into new array.
687:26 - And add fourth number to new array.
687:31 - Free old array.
687:36 - Remember, if you will, new array
using my same list variable.
687:41 - And now, print new array.
687:46 - Free new array.
687:48 - Hopefully, that helps.
687:49 - And we'll post this code online after
2, which tells a more explicit story.
687:53 - So it turns out that we can reduce
some of the labor involved with this.
687:56 - Not so much with the printing
here, but with this copying.
687:59 - Turns out c does have a
function called realloc,
688:01 - that can actually handle the resizing
of an array for you, as follows.
688:07 - I'm going to scroll up
to where I previously
688:09 - allocated a new array of size 4.
688:12 - And I'm instead going to say this,
resize old array to be of size 4.
688:19 - Now, previously this wasn't
necessarily possible.
688:21 - Because recall that we
had painted ourselves
688:23 - into a corner with the
example on the screen
688:25 - where "Hello, world" happened to
be right after the original array.
688:28 - But let me do this.
688:29 - Let me use realloc, for re-allocate.
688:32 - And pass in not just the size
of memory we want this time,
688:36 - but also the address
that we want to resize.
688:39 - Which, again, is this array called list.
688:43 - All right.
688:43 - The code thereafter is
pretty much the same.
688:46 - But what I don't need to do is this.
688:50 - So realloc is a pretty handy
function that will do the following.
688:54 - If at the very beginning of class,
when we had 1, 2, 3 on the board.
688:57 - And someone's instinct was to just plop
the 4 right at the end of the list.
689:00 - If there's available memory,
realloc will just do that.
689:03 - And boom, it will just grow the array
for you in the computer's memory.
689:07 - If, though, it realizes, sorry, there's
already a string like "Hello, world"
689:11 - or something else there,
realloc will handle
689:14 - the trouble of moving that whole
array from 1 chunk of memory,
689:18 - originally, to a new chunk of memory.
689:20 - And then realloc will return to you,
the address of that new chunk of memory.
689:26 - And it will handle the process
of freeing the old chunk for you.
689:31 - So you do not need to do this yourself.
689:33 - So in fact, let me go ahead
and get rid of this as well.
689:36 - So realloc just condenses, a lot of what
we just did, into a single function.
689:41 - Whereby, realloc handles it for you.
689:45 - All right.
689:46 - So that's the final improvement
on this array-based approach.
689:49 - So what now, knowing
what your memory is,
689:51 - what can we now do with it that
solves that kind of problem?
689:54 - Because the world is
going to get really slow.
689:56 - And our apps, and our phones, and our
computers are getting really slow,
689:59 - if we're just constantly wasting
time moving things around in memory.
690:04 - What could we perhaps do instead?
690:05 - Well there's one new
piece of syntax today
690:07 - that builds on these 3 pieces
of syntax from the past.
690:11 - Recall, that we've
looked at struct, which
690:13 - is a keyword in C, that just lets
you invent your own structure.
690:16 - Your own variable, if you will,
in conjunction with typedef.
690:19 - Which lets you say a person has a name
and a number, or something like that.
690:23 - Or a candidate has a name
and some number of votes.
690:26 - You can encapsulate multiple pieces of
data inside of just one using struct.
690:30 - What did we use the Dot Notation
for now, a couple of times?
690:34 - What does the Dot operator do in C?
690:37 - AUDIENCE: Access the structure.
690:39 - SPEAKER 1: Perfect.
690:39 - To access the field
inside of a structure.
690:41 - So if you've got a person
with a name and a number,
690:43 - you could say something like
person.name or person.number,
690:46 - if person is the name
of one such variable.
690:48 - Star, of course, we've
seen now in a few ways.
690:51 - Like way back in week 1, we
saw it as like, multiplication.
690:55 - Last week, we began to see it
in the context of pointers,
690:58 - whereby, you use it
to declare a pointer.
691:00 - Like, int* p, or something like that.
691:03 - But we also saw it in
one other context, which
691:05 - was like the opposite, which
was the dereference operator.
691:08 - Which says if this is
an address, that is
691:10 - if this is a variable like a pointer,
and you put a star in front of it
691:13 - then with no int or no char,
no data type in front of it.
691:17 - That means go to that address.
691:19 - And it dereferences the pointer
and goes to that location.
691:22 - So it turns out that using
these 3 building blocks,
691:25 - you can actually start to now use
your computer's memory almost any way
691:28 - you want.
691:28 - And even next week, when
we transition to Python,
691:31 - and you start to get a
lot of features for free.
691:33 - Like a single line of
code will just do so much
691:36 - more in Python than it does in C. It
boils down to those basic primitives.
691:40 - And just so you've seen it already.
691:42 - It turns out that it's so
common in C to use this operator
691:47 - to go inside of a structure and
this operator to go to an address,
691:51 - that there's shorthand
notation for it, a.k.a.
691:53 - syntactic sugar.
691:54 - That literally looks like an arrow.
691:56 - So recall last week, I was in
the habit of pointing, even
691:58 - with the big foam finger.
692:00 - This arrow notation, a
hyphen and an angled bracket,
692:04 - denotes going to an address and
looking at a field inside of it.
692:11 - But we'll see this in
practice in just a bit.
692:13 - So what might be the
solution, now, to this problem
692:16 - we saw a moment ago whereby, we had
painted ourselves into a corner.
692:20 - And our memory, a few moments
ago, looked like this.
692:23 - We could just copy the whole existing
array to a new location, add the 4,
692:28 - and go about our business.
692:29 - What would another, perhaps
better solution longer term
692:33 - be, that doesn't require
constantly moving stuff around?
692:38 - Maybe hang in there for
your instincts if you
692:40 - know the buzz phrase we're looking for
from past experience, hang in there.
692:44 - But if we want to avoid
moving the 1, 2, and the 3,
692:47 - but we still want to be able
to add endless amounts of data.
692:49 - What could we do?
692:51 - Yeah.
692:51 - So maybe create some kind
of list using pointers that
692:54 - just point at a new location, right.
692:56 - In an ideal world, even
though this piece of memory
692:59 - is being used by this h in
the string "Hello, world",
693:02 - maybe we could somehow use
a pointer from last week.
693:05 - Like an arrow, that says after the
3, oh I don't know, go down over here
693:09 - to this location in memory.
693:11 - And you just stitch together
these integers in memory
693:15 - so that each one leads to the next.
693:17 - It's not necessarily the case
that it's literally back-to-back.
693:21 - That would have the
downside, it would seem,
693:23 - of costing us a little bit of space.
693:24 - Like a pointer, which recall,
takes up some amount of space.
693:27 - Typically 8 bytes or 64 bits.
693:29 - But I don't have to copy potentially
a huge amount of data just
693:33 - to add one more number.
693:34 - And so these things do have a name.
693:36 - And indeed, these things
are what generally
693:38 - would be called a linked list.
693:42 - A linked list captures
exactly that intuition
693:44 - of linking together things in memory.
693:46 - So let's take a look at an example.
693:48 - Here's a computer's
memory in the abstract.
693:49 - Suppose that I'm trying
to create an array.
693:52 - Let's generalize it as
a list, now, of numbers.
693:55 - An array has a very specific meaning.
693:57 - It's memory that's contiguous,
back, to back, to back.
694:00 - At the end of the day, I as the
programmer, just care about the data--
694:03 - 1, 2, 3, 4, and so forth.
694:05 - I don't really care how it's stored.
694:09 - I don't care how it's stored
when I'm writing the code,
694:12 - I just wanted to work
at the end of the day.
694:13 - So suppose that I first
insert my number 1.
694:16 - And, who knows, it ends up,
up there at location, 0X123,
694:19 - for the sake of discussion.
694:20 - All right.
694:21 - Maybe there's something already here.
694:23 - And heck, maybe there's
something already here,
694:25 - but there's plenty of other options
for where this thing can go.
694:28 - And suppose that, for
the sake of discussion,
694:30 - the first available
spot for the next number
694:32 - happens to be over here at location
0X456, for the sake of discussion.
694:38 - So that's where I'm going
to plop the number 2.
694:40 - And where might the number 3 end up?
694:41 - Oh I don't know, maybe
down over there at 0X789.
694:44 - The point being, I don't know
what is, or really care about,
694:48 - everything else that's
in the computer's memory.
694:50 - I just care that there are at
least 3 locations available where
694:54 - I can put my 1, my 2, and my 3.
694:57 - But the catch is, now that
we're not using an array,
695:01 - we can't just naively assume that
you just add 1 to an index and boom,
695:05 - you're at the next number.
695:06 - Add 2 to an index, and boom
you're at the next, next number.
695:10 - Now you have to leave these little
breadcrumbs, or use the arrow notation,
695:14 - to lead from one to the other.
695:17 - And sometimes, it might be
close, a few bytes away.
695:19 - Maybe, it's a whole gigabyte away
in an even bigger computer's memory.
695:23 - So how might I do this?
695:25 - Like where do these pointers
go, as you proposed?
695:30 - All right.
695:30 - All I have access to here are bytes.
695:32 - I've already stored the
1, the 2, and the 3.
695:34 - So what more should I do?
695:37 - OK, yeah.
695:37 - So let me, you put the pointers
right next to these numbers.
695:40 - So let me at least plan ahead, so that
when I ask the computer like malloc,
695:44 - recall from last week, for some
memory, I don't just ask it now
695:47 - for space for just the number.
695:49 - Let me start getting
into the habit of asking
695:51 - malloc for enough space for the number
and a pointer to another such number.
695:56 - So it's a little more aggressive
of me to ask for more memory.
695:59 - But I'm planning ahead.
696:00 - And here is an example of a trade off.
696:02 - Almost any time in CS, when you start
using more space, you can save time.
696:06 - Or if you try to conserve space,
you might have to lose time.
696:10 - It's being that trade off there.
696:12 - So how might I solve this?
696:14 - Well let me abstract this away.
696:15 - And either next to or below, I'm
just drawing it vertically, just
696:19 - for the sake of discussion.
696:20 - So the arrows are a bit prettier.
696:22 - I've asked malloc for
now twice as much space,
696:25 - it would seem, than I previously needed.
696:27 - But I'm going to use this second chunk
of memory to refer to the next number.
696:31 - And I'm going to use this chunk
of memory to refer to the next,
696:33 - essentially, stitching
this thing together.
696:35 - So what should go in this first box?
696:37 - Well, I claim the number, 0X456.
696:41 - And it's written in hex because
it represents a memory address.
696:43 - But this is the equivalent of drawing
an arrow from one to the other.
696:47 - As a little check here, what
should go in this second box
696:51 - if the goal is to stitch these
together in order 1, 2, 3?
696:55 - Feel free to just shout this out.
696:57 - AUDIENCE: 0X789.
696:59 - SPEAKER 1: OK, that worked well.
697:00 - So 0X789, indeed.
697:01 - And you can't do that with the hands
because I can't count that fast.
697:04 - So 0X789 should go here because that's
like a little breadcrumb to the next.
697:08 - And then, we don't really have
terribly many possibilities here.
697:11 - This has to have a value, right.
697:14 - Because at the end of the day, it's
got to use its 64 bits in some way.
697:19 - So what value should go here,
if this is the end of this list?
697:22 - AUDIENCE: 0.
697:23 - SPEAKER 1: So it could be 0X123.
697:25 - The implication being that
it would be a cyclical list.
697:29 - Which is OK, but
potentially problematic.
697:32 - If any of you have accidentally
lost control over your code space
697:36 - because you had an infinite loop,
this would seem a very easy way
697:39 - to give yourself the accidental
probability of an infinite loop.
697:43 - What might be simpler than
that and ward that off?
697:46 - AUDIENCE: Null.
697:47 - SPEAKER 1: Say again?
697:47 - AUDIENCE: Null.
697:48 - SPEAKER 1: So just the null character.
697:50 - Not N-U-L, confusingly, which
is at the end of strings.
697:53 - But N-U-L-L, as we
introduced it last week.
697:56 - Which is the same as 0x0.
697:58 - So this is just a special value
that programmers decades ago
698:00 - decided that if you store the address
0, that's not a valid address.
698:04 - There's never going to be
anything useful at 0x0.
698:07 - Therefore, it's a sentinel
value, just a special value,
698:11 - that indicates that's it.
698:12 - There's nowhere further to go.
698:14 - It's OK to come back to your
suggestion of making a cyclical list.
698:17 - But we'd better be
smart enough to, maybe,
698:19 - remember where did the list start
so that you can detect cycles.
698:23 - If you start looping around
in this structure, otherwise.
698:26 - All right.
698:26 - But these addresses, who really
cares at the end of the day
698:29 - if we abstract this away.
698:30 - It really just now looks like this.
698:32 - And indeed, this is how most anyone
would draw this on a whiteboard
698:35 - if having a discussion at work.
698:36 - Talking about what data
structure we should
698:38 - use to solve some problem
in the real world.
698:40 - We don't care generally
about the addresses.
698:42 - We care that in code we can access them.
698:45 - But in terms of the concept
alone this would be, perhaps,
698:48 - the right way to think about this.
698:49 - All right, let me pause
here and see if there's
698:51 - any questions on this idea of creating
a linked list in memory by just storing,
698:55 - not just the numbers like 1,
2, 3, but twice as much data.
699:00 - So that you have little
breadcrumbs in the form of pointers
699:02 - that can lead you from one to the next.
699:05 - Any questions on these linked lists?
699:11 - Any questions?
699:12 - No?
699:12 - All right.
699:13 - Oh, yeah.
699:13 - Over here.
699:14 - AUDIENCE: So does this takes
time more memory than an array?
699:19 - SPEAKER 1: This does take
more memory than an array
699:21 - because I now need space
for these pointers.
699:24 - And to be clear, I technically
didn't really draw this to scale.
699:28 - Thus far, in the class, we've
generally thought about integers
699:31 - like, 1, 2 and 3, as
being 4 bytes, or 32 bits.
699:33 - I made the claim last week that
on modern computer's pointers
699:37 - tend to be 8 bytes or 64 bits.
699:40 - So, technically, this box should
actually be a little bigger.
699:42 - It was just going to look a
little stupid in the picture.
699:44 - So I abstracted it away.
699:45 - But, indeed, you're using
more space as a result.
699:48 - AUDIENCE: [INAUDIBLE].
699:50 - SPEAKER 1: Oh, how does-- sorry.
699:51 - How does the computer identify
useful data from used data?
699:55 - So, for instance, garbage
values or non-garbage values.
699:58 - For now, think of that
as the job of malloc.
700:00 - So when you ask malloc for memory,
as we started to last week,
700:04 - malloc keeps track of the
addresses of the memory
700:07 - it has handed to as valid values.
700:10 - The other type of memory you
use, not just from the heap.
700:12 - Because recall we briefly
discussed that malloc uses space
700:15 - from the heap, which was drawn at the
top of the picture, pointing down.
700:18 - There's also stack memory, which is
where all of your local variables go.
700:22 - And where all of the memory
used by individual functions go.
700:25 - And that was drawn in the
picture is working its way up.
700:27 - That's just an artist's
rendition of direction.
700:30 - The compiler, essentially,
will also help
700:33 - keep track of which values are
valid or not inside of the stack.
700:37 - Or really the underlying
code that you've written
700:39 - will keep track of that for you.
700:40 - So it's managed for you at that point.
700:43 - All right.
700:44 - Good question.
700:44 - Sorry it took me a bit to catch on.
700:46 - So let's now translate
this to actual code.
700:48 - How could we implement this idea
of, let's call these things nodes.
700:52 - And that's a term of our NCS.
700:53 - Whenever you have some data structure
that encapsulates information, node,
700:57 - N-O-D-E, is the generic term for that.
701:00 - So each of these might
be said to be a node.
701:02 - Well, how can we do this?
701:03 - Well a couple of weeks ago, we saw
how we could represent something
701:06 - like a student or a candidate.
701:07 - And a student, or rather a person,
we said has a name and a number.
701:12 - And we used a few pieces of syntax here.
701:14 - One, we use the struct keyword,
which gives us a data structure.
701:17 - We use typedef, which defines the
name person to be our new data
701:21 - type representing that whole structure.
701:24 - So we probably have the
right ingredients here
701:26 - to build up this thing called a node.
701:28 - And just to be clear, what should
go inside of one of these nodes,
701:32 - do we think?
701:32 - It's not going to be a name
or a number, obviously.
701:35 - But what should a node have in
terms of those fields, perhaps?
701:39 - Yeah?
701:40 - AUDIENCE: [? Data. ?]
701:41 - SPEAKER 1: So a number like a
number and a pointer in some form.
701:44 - So let's translate this to actual code.
701:46 - So let's rename person to node
to capture this notion here.
701:51 - And the number is easy.
701:52 - If it's just going to
be an int, that's fine.
701:54 - We can just say int number,
or int n, or whatever
701:56 - you want to call that particular field.
701:58 - The next one is a little non-obvious.
702:00 - And this is where things
get a little weird at first,
702:02 - but, in retrospect, it
should all fit together.
702:05 - Let me propose that, ideally, we
would say something like node* next.
702:11 - And I could call the word
next anything I want.
702:13 - Next just means what comes after
me is the notion I'm using it at.
702:17 - So a lot of CS people would
just use next to represent
702:19 - the name of this pointer.
702:21 - But there's a catch here.
702:22 - C and C compilers are
pretty naive, recall.
702:25 - They only look at code top
to bottom, left to right.
702:29 - And any time they encounter
a word they have never
702:31 - seen before, bad things happen.
702:32 - Like, you can't compile your code.
702:34 - You get some cryptic
error message or the like.
702:36 - And that seems to be
about to happen here.
702:39 - Because if the compiler is reading
this code from top to bottom,
702:42 - it's going to say, oh,
inside of this struct
702:44 - should be a variable called next.
702:46 - Which is of type node*.
702:48 - What the heck is a node?
702:49 - Because it literally does
not find out until 2 lines
702:52 - later, after that semicolon.
702:55 - So the way to avoid this, which
we haven't quite seen before,
702:57 - is that you can temporarily name this
whole thing up here, struct node.
703:02 - And then, down here inside of the
data structure, you say struct node*.
703:08 - And then, you leave the rest alone.
703:09 - This is a workaround this is
possible because now you're
703:14 - teaching the compiler, from
the first line, that here comes
703:17 - a data structure called struct node.
703:19 - Down here, you're shortening the name
of this whole thing to just node.
703:22 - Why?
703:23 - It's just a little more convenient
than having to write struct everywhere.
703:26 - But you do have to write struct
node* inside of the data structure.
703:30 - But that's OK because it's
already come into existence
703:33 - now, as of that first line of code.
703:35 - So that's the only
fundamental difference
703:37 - between what we did last week
with a person or a candidate.
703:40 - We just now have to use this
struct workaround, syntactically.
703:45 - All right.
703:45 - Yeah, question.
703:46 - AUDIENCE: So [INAUDIBLE] have like
right next to the [INAUDIBLE] point
703:50 - to another [INAUDIBLE].
703:51 - SPEAKER 1: Why is the next variable
a struct node* pointer and not an int
703:56 - star pointer, for instance?
703:58 - So think about the picture
we are trying to draw.
704:01 - Technically, yes, each of these
arrows I deliberately drew
704:05 - is pointing at the number.
704:06 - But that's not alone.
704:07 - They need to point at the
whole data structure in memory.
704:10 - Because the computer,
ultimately, and the compiler,
704:13 - in turn, needs to know that this
chunk of memory is not just an int.
704:16 - It is a whole node.
704:18 - Inside of a node is a number
and also another pointer.
704:21 - So when you draw these
arrows, it would be
704:24 - incorrect to point at just the number.
704:26 - Because that throws
away information that
704:29 - would leave the compiler
wondering, OK, I'm at a number.
704:31 - Where the heck is the pointer?
704:32 - You have to tell it that
it's pointing at a whole node
704:34 - so it knows a few bytes away
is that corresponding pointer.
704:38 - Good question.
704:38 - Yeah.
704:40 - AUDIENCE: How do you [INAUDIBLE].
704:42 - SPEAKER 1: Really good question.
704:43 - It would seem that just as
copying the array earlier
704:46 - required twice as much memory,
because we copied from old to new.
704:49 - So, technically, twice as much
plus 1 for the new number.
704:52 - Here, too, it looks like we're
using twice as much memory, also.
704:56 - And to my comment earlier, it's
even more than twice as much memory
704:58 - because these pointers are 8 bytes, and
not just 4 bytes like a typical integer
705:02 - is.
705:03 - The differences are these.
705:04 - In the context of the array, you
were using that memory temporarily.
705:08 - So, yes, you needed
twice as much memory.
705:10 - But then you were quickly
freeing the original array.
705:13 - So you weren't consuming long-term,
more memory than you might need.
705:16 - The difference here, too, is
that, as we'll see in a moment,
705:19 - it turns out it's going to be
relatively quick for me, potentially,
705:23 - to insert new numbers in here.
705:25 - Because I'm not going to have
to do a huge amount of copying.
705:28 - And even though I might still have
to follow all of these arrows, which
705:31 - is going to take some
amount of time, I'm
705:33 - not going to have to be asking for
more memory, freeing more memory.
705:36 - And certain operations in the computer,
anything involving asking for or giving
705:40 - back memory, tends to be slower.
705:42 - So we get to avoid
that situation as well.
705:44 - There's going to be
some downsides, though.
705:46 - This is not all upside.
705:47 - But we'll see in a bit just what some
of those trade offs actually are.
705:51 - All right.
705:51 - So from here, if we go back to the
structure in code as we left it,
705:56 - let's start to now build up a
linked list with some actual code.
705:59 - How do you go about, in C,
representing a linked list in code?
706:03 - Well, at the moment, it would
actually be as simple as this.
706:06 - You declare a variable,
called list, for instance.
706:09 - That itself stores
the address of a node.
706:12 - That's what node* means.
706:13 - The address of a node.
706:14 - So if you want to store
a linked list in memory,
706:17 - you just create a variable
called list, or whatever else.
706:19 - And you just say that
this variable is going
706:21 - to be pointing at the first node in a
list, wherever it happens to end up.
706:25 - Because malloc is ultimately going
to be the tool that we use just to go
706:29 - get at any one particular
node in memory.
706:33 - All right.
706:34 - So let's actually do
this in pictorial form.
706:36 - When you write a line of
code, like I just did here--
706:39 - and I do not initialize it to
anything with the assignment operator,
706:43 - an equal sign.
706:44 - It does exist in memory as a box,
as I'll draw it here, called list.
706:48 - But I've deliberately
drawn Oscar inside of it.
706:50 - Why?
706:51 - To connote what exactly?
706:53 - AUDIENCE: Garbage value.
706:54 - SPEAKER 1: It's a garbage value.
706:55 - I have been allocated the
variable in memory, called list.
706:59 - Which is going to give me 64 bits
or 8 bytes somewhere drawn here
707:03 - with this box.
707:04 - But if I myself have not
used the assignment operator,
707:07 - it's not going to get magically
initialized to any particular address
707:11 - for me.
707:11 - It's not going to even give me a node.
707:13 - This is literally just going to be an
address of a future node that exists.
707:18 - So what would be a solution here?
707:20 - Suppose that I'm beginning
to create my linked list,
707:23 - but I don't have any nodes yet.
707:24 - What would be a sensible thing to
initialize the list to, perhaps?
707:28 - AUDIENCE: Null.
707:29 - SPEAKER 1: Yeah, again.
707:30 - AUDIENCE: To null.
707:31 - SPEAKER 1: So just null, right.
707:32 - When in doubt with
pointers, generally it's
707:34 - a good thing to
initialize things to null,
707:36 - so at least it's not a garbage value.
707:37 - It's a known value.
707:38 - Invalid, yes.
707:39 - But it's a special
value you can then check
707:41 - for with a conditional, or the like.
707:43 - So this might be a better
way to create a linked list,
707:47 - even before you've inserted any
numbers into the thing itself.
707:51 - All right.
707:52 - So after that, how can we go about
adding something to this linked list?
707:55 - So now the story looks like this.
707:56 - Oscar is gone because inside
of this box is all zero bits.
707:59 - Just because it's nice and clean, and
this represents an empty linked list.
708:03 - Well, if I want to add the number 1
to this linked list, what could I do?
708:08 - Well, perhaps I could
start with code like this.
708:10 - Borrowing inspiration from last week.
708:11 - Let's ask malloc for enough
space for the size of a node.
708:16 - And this gets to your question earlier,
like, what is it I'm manipulating here?
708:20 - I don't just need space for an int and
I don't just need space for a pointer.
708:23 - I need space for both.
708:24 - And I gave that thing a name, node.
708:27 - So size of node figures out
and does the arithmetic for me.
708:30 - And gives me back the
right number of bytes.
708:32 - This, then, stores the address
of that chunk of memory
708:36 - in what I'll temporarily called n.
708:38 - Just to represent a generic new node.
708:40 - And it's of type node*.
708:42 - Because just like last week when I
asked malloc for enough space for an int
708:45 - and I stored it in an int* pointer.
708:47 - This week, if I'm asking
for memory for a node,
708:50 - I'm storing it in a node* pointer.
708:52 - So technically, nothing new
there except for this new term
708:56 - of art in data structure called node.
708:58 - All right.
708:59 - So what does that do for me?
709:00 - It essentially draws a
picture like this in memory.
709:03 - I still have my list variable from
my previous line of code initialize
709:07 - to null.
709:07 - And that's why I've drawn it blank.
709:09 - I also now have a
temporary variable called
709:11 - n, which I initialize to
the return value of malloc.
709:15 - Which gave me one of
these nodes in memory.
709:17 - But I've drawn it having
garbage values, too,
709:19 - because I don't know what int is there.
709:21 - I don't know what pointer is there.
709:22 - It's garbage values because malloc does
not magically initialize memory for me.
709:27 - There is another function for that.
709:28 - But malloc alone just says,
sure, use this chunk of memory.
709:31 - Deal with whatever is there.
709:33 - So how can I go about
initializing this to known values?
709:36 - Well, suppose I want to insert the
number 1 and then, leave it at that.
709:40 - A list of size 1, I could
do something like this.
709:44 - And this is where you have to
think back to some of these basics.
709:47 - My conditional here is asking the
question if n does not equal null.
709:51 - So that is, if malloc
gave me valid memory,
709:54 - and I don't have to quit altogether
because my computer's out of memory.
709:58 - If n does not equal null, but
is equal to valid address,
710:02 - I'm going to go ahead and do this.
710:03 - And this is cryptic looking syntax now.
710:06 - But does someone want to take a stab
at translating this inside line of code
710:09 - to English, in some sense?
710:13 - How might you explain what that
inner line of code is doing? *n.
710:18 - number equals 1.
710:20 - Let me go further back.
710:22 - Nope?
710:23 - OK, over here.
710:24 - Yeah.
710:25 - AUDIENCE: [INAUDIBLE].
710:26 - SPEAKER 1: Perfect.
710:27 - The place that n is pointing
to, set it equal to 1.
710:29 - Or using the vernacular of going
there, go to the address in n
710:33 - and set it's number field to 1.
710:35 - However you want to think
about it, that's fine.
710:37 - But the * again is the
dereference operator here.
710:40 - And we're doing the
parentheses, which we
710:42 - haven't needed to do before because we
haven't dealt with pointers and data
710:45 - structures together until today.
710:47 - This just means go there first.
710:49 - And then once you're
there, go access number.
710:52 - You don't want to do one
thing before the other.
710:54 - So this is just enforcing
order of operations.
710:56 - The parentheses just like
in grade school math.
710:58 - All right.
710:59 - So this line of code is cryptic.
711:00 - It's ugly.
711:01 - It's not something most
people easily remember.
711:03 - Thankfully, there's that syntactic
sugar that simplifies this line of code
711:07 - to just this.
711:08 - And this, even though
it's new to you today,
711:10 - should eventually feel
a little more familiar.
711:12 - Because this now is shorthand
notation for saying, start at n.
711:15 - Go there as by following the arrow.
711:17 - And when you get there,
change the number field.
711:20 - In this case, to 1.
711:22 - So most people would not
write code like this.
711:24 - It's just ugly.
711:25 - It's a couple extra keystrokes.
711:26 - This just looks more like the artist's
renditions we've been talking about.
711:30 - And how most CS people would think about
pointers as really just being arrows
711:35 - in some form.
711:36 - All right.
711:36 - So what have we just done?
711:37 - The picture now, after setting number to
1, looks a little something like this.
711:42 - So there's still one step missing.
711:43 - And that's, of course, to
initialize, it would seem,
711:46 - the pointer in this new node
to something known like null.
711:50 - So I bet we could do this like this.
711:52 - With a different line
of code, I'm just going
711:54 - to say if n does not equal null,
then set n's next field to null.
712:00 - Or more pedantically, go
to n, follow the arrow,
712:04 - and then update the next field
that you find there to equal null.
712:07 - And again, this is just
doing some nice bookkeeping.
712:10 - Technically speaking,
we might not need to set
712:13 - this to null if we're going to keep
adding more and more numbers to it.
712:16 - But I'm doing it step-by-step so
that I have a very clean picture.
712:19 - And there's no bugs in
my code at this point.
712:23 - But I'm still not done.
712:24 - There's one last thing I'm
going to have to do here.
712:27 - If the goal, ultimately, was to insert
the number 1 into my linked list,
712:32 - what's the last step I
should, perhaps, do here?
712:36 - Just been English is fine.
712:37 - Yeah.
712:38 - AUDIENCE: Set the pointer value to null.
712:40 - SPEAKER 1: Yes.
712:41 - I now need to update the actual
variable, that represents my linked
712:45 - list, to point at this brand new node.
712:48 - That is now perfectly initialized as
having an integer and a null pointer.
712:52 - Yeah, technically, this
is already pointing there.
712:54 - But I describe this deliberately
earlier as being temporary.
712:57 - I just needed this to get it back from
malloc and clean things up, initially.
713:02 - This is the long term
variable I care about.
713:04 - So I'm going to want to do
something simple like this.
713:06 - List equals n.
713:09 - And this seems a little
weird that list equals n.
713:11 - But again, think about
what's inside this box.
713:13 - At the moment this is null
because there is no linked
713:15 - list at the beginning of our story.
713:17 - N is the address of the beginning, and
it turns out, end of our linked list.
713:21 - So it stands to reason that
if you set list equal to n,
713:24 - that has the effect of
copying this address up here.
713:27 - Or really just copying the
arrow into that same location
713:30 - so that now the picture looks like this.
713:32 - And heck, if this was a temporary
variable, it will eventually go away.
713:35 - And now, this is the picture.
713:37 - So an annoying number
of steps, certainly,
713:39 - to walk through verbally like this.
713:42 - But it's just malloc to
give yourself a node,
713:44 - initialize the 2 fields inside of
it, update the linked list, and boom,
713:49 - you're on your way.
713:50 - I didn't have to copy anything.
713:52 - I just had to insert
something in this case.
713:55 - Let me pause here to see if there's
any questions on those steps.
713:58 - And we'll see before long it all
in context with some larger code.
714:02 - AUDIENCE: So if the
statements [INAUDIBLE]..
714:06 - SPEAKER 1: Yes.
714:07 - I drew them separately just
for the sake of the voiceover
714:10 - of doing each thing very methodically.
714:12 - In real code, as we'll
transition to now,
714:14 - I could have and should
have just done it
714:16 - all inside of one conditional after
checking if n is not equal to null.
714:20 - I could set number to a value like 1.
714:22 - And I could set the pointer
itself to something like null.
714:25 - All right.
714:26 - Well let's translate, then,
this into some similar code
714:30 - that allows us to build up a linked
list now using code similar in spirit
714:34 - to before.
714:35 - But now, using this new primitive.
714:37 - So I'm going to go
back into VS Code here.
714:39 - I'm going to go ahead now and delete
the entirety of this old version that
714:42 - was entirely array-based.
714:44 - And now, inside of my main function,
I'm going to go ahead and first do this.
714:49 - I'm going to first give
myself a list of size 0.
714:53 - And I'm going to call that node* list.
714:56 - And I'm going to initialize that
to null, as we proposed earlier.
714:59 - But I'm also now going to have to
take the additional step of defining
715:02 - what this node is.
715:03 - So recall that I might do something
like typedef, struct node.
715:06 - Inside of this struct node, I'm
going to have a number, which
715:09 - I'll call number of type int.
715:11 - And I'm going to have
a structure called node
715:13 - with a * that says the next
pointer is called next.
715:16 - And I'm going to call this whole
thing, more succinctly, node,
715:20 - instead of struct node.
715:22 - Now as an aside, for those of you
wondering what the difference really
715:25 - is between struct and node.
715:27 - Technically, I could
do something like this.
715:29 - Not use typedef and not
use the word node alone.
715:33 - This syntax here would actually
create for me a new data
715:37 - type called, verbosely, struct node.
715:40 - And I could use this throughout
my code saying struct node.
715:42 - Struct node.
715:43 - That just gets a little tedious.
715:45 - And it would be nicer just to refer
to this thing more simplistically
715:48 - as a node.
715:49 - So what typedef has
been doing for us is it,
715:51 - again, lets us invent our own
word that's even more succinct.
715:55 - And this just has the effect
now of calling this whole thing
715:58 - node without the need, subsequently, to
keep saying struct all over the place.
716:02 - Just FYI.
716:03 - All right.
716:04 - So now that this thing exists in
main, let's go ahead and do this.
716:07 - Let's add a number to list.
716:10 - And to do this, I'm going to
give myself a temporary variable.
716:12 - I'll call it n for consistency.
716:14 - I'm going to use malloc to
give myself the size of a node,
716:18 - just like in our slides.
716:19 - And then, I'm going to
do a little safety check.
716:21 - If n equals equals null, I'm going
to do the opposite of the slides.
716:23 - I'm just going to quit
out of this program
716:25 - because there's nothing useful
to be done at this point.
716:28 - But most likely my computer is
not going to run out of memory.
716:31 - So I'm going to assume we can keep
going with some of the logic here.
716:34 - If n does not equal null, and that
is it's a valid memory address,
716:38 - I'm going to say n []--
716:40 - I'm going to build this up backwards.
716:42 - Well let's do.
716:44 - That's OK, let's go ahead and do this.
716:45 - N [number] equals 1.
716:48 - And then n [arrow next] equals null.
716:52 - And now, update list to point
to new node, list equals n.
716:59 - So at this point in the
story, we've essentially
717:02 - constructed what was that first
picture, which looks like this.
717:06 - This is the corresponding code via
which we built up this node in memory.
717:11 - Suppose now, we want to add
the number 2 to the list.
717:14 - So let's do this again.
717:15 - Add a number to list.
717:20 - How might I do this?
717:21 - Well, I don't need to
redeclare n because I can use
717:23 - the same temporary variables before.
717:25 - So this time, I'm just going to say n
equals malloc and the size of a node.
717:30 - I'm, again, going to
have my safety check.
717:32 - So if n equals equals null, then let's
just quit out of this altogether.
717:36 - But, I have to be a
little more careful now.
717:41 - Technically speaking,
what do I still need
717:43 - to do before I quit out of my
program to be really proper?
717:48 - Free the memory that did
succeed a little higher up.
717:51 - So I think it suffices to free what
is now called list, way at the top.
717:56 - All right.
717:57 - Now, if all was well, though, let's
go ahead and say n [number] equals 2.
718:03 - And now, n [arrow next] equals null.
718:09 - And now, let's go ahead
and add it to the list.
718:12 - If I go ahead and do
list arrow next equals n,
718:20 - I think what we've just done is
build up the equivalent, now,
718:24 - of this in the computer's memory.
718:27 - By going to the list
field's next field, which
718:29 - is synonymous with the 1
nodes, bottom-most box.
718:33 - And store the address of what was n,
which a moment ago looked like this.
718:37 - And I'm just throwing away, in the
picture, the temporary variable.
718:39 - All right.
718:40 - One last thing to do.
718:42 - Let me go down here and say, add
a number to list, n equals malloc.
718:47 - Let's do it one more time.
718:48 - Size of node.
718:49 - And clearly, in a real program, we
might want to start using a loop.
718:52 - And do this dynamically or a function
because it's a lot of repetition now.
718:56 - But just to go through the
syntax here, this is fine.
718:59 - If n equals equals null, out
of memory for some reason.
719:03 - Let's return 1, but we
should free the list itself
719:09 - and even the second node, list [next].
719:12 - But I've deliberately done this poorly.
719:16 - All right.
719:16 - This is a little more subtle now.
719:18 - And let me get rid of the highlighting
just so it's a little more visible.
719:22 - If n happens to equal equal
null, and something really just
719:26 - went wrong they're out of memory,
why am I freeing 2 addresses now?
719:32 - And again, it's not that I'm
freeing those variables per se.
719:35 - I'm freeing the addresses
at in those variables.
719:39 - But there's also a
bug with my code here.
719:41 - And it's subtle.
719:43 - Let me ask more pointedly.
719:45 - This line here, 43, what is
that freeing specifically?
719:49 - Can I go to you?
719:49 - AUDIENCE: You're freeing list 2 times.
719:52 - SPEAKER 1: I'm freeing, not so.
719:54 - That's OK.
719:54 - I'm not freeing list 2 times.
719:56 - Technically, I'm freeing
list once and list next once.
719:59 - But let me just ask the
more explicit question.
720:01 - What am I freeing with
line 43 at the moment?
720:03 - Which node?
720:06 - I think node number 1.
720:08 - Why?
720:08 - Because if 1 is at the
beginning of the list,
720:10 - list contains the address
of that number 1 node.
720:14 - And so this frees that node.
720:15 - This line of code, you might
think now intuitively, OK,
720:18 - it's probably freeing the node number 2.
720:21 - But this is bad.
720:22 - And this is subtle.
720:22 - Valgrind might help you catch this.
720:24 - But by eyeing it, it's
not necessarily obvious.
720:27 - You should never touch memory
that you have already freed.
720:31 - And so, the fact that I did
in this order, very bad.
720:34 - Because I'm telling the
operating system, I don't know.
720:37 - I don't need the list address anymore.
720:39 - Do with it what you want.
720:40 - And then, literally one line later,
you're saying, wait a minute.
720:43 - Let me actually go to
that address for a moment
720:45 - and look at the next
field of that first node.
720:47 - It's too late.
720:48 - You've already given up
control over the node.
720:51 - So it's an easy fix in
this case, logically.
720:54 - But we should be freeing
the second node first
720:56 - and then the first one
so that we're doing it
721:00 - in, essentially, reverse order.
721:02 - And again, Valgrind would
help you catch that.
721:04 - But that's the kind of thing one
needs to be careful about when
721:07 - touching memory at all.
721:08 - You cannot touch memory
after you freed it.
721:10 - But here is my last step.
721:12 - Let me go ahead and update
the number field of n to be 3.
721:17 - The next node of n to be null.
721:20 - And then, just like
in the slide earlier,
721:22 - I think I can do list
next, next equals n.
721:28 - And that has the effect now of
building up in the computer's memory,
721:32 - essentially, this data structure.
721:34 - Very manually.
721:35 - Very pedantically.
721:36 - Like, in a better world, we'd
have a loop and some functions
721:38 - that are automating this process.
721:39 - But, for now, we're doing it just
to play around with the syntax.
721:44 - So at this point, unfortunately,
suppose I want to print the numbers.
721:48 - It's no longer as easy as int
i equals 0, i less than 3, i++.
721:53 - Because you cannot just
do something like this.
722:00 - Because pointer arithmetic
no longer comes into play
722:06 - when it's you, who are stitching
together the data structure in memory.
722:10 - In all of our past examples
with arrays, you've
722:12 - been trusting that all of the bytes in
the array are back, to back, to back.
722:16 - So it's perfectly reasonable for
the compiler and the computer
722:19 - to just figure out, oh, well if you
want [0], that's at the beginning.
722:21 - [1], it's one location over.
722:23 - [2], it's one location over.
722:25 - This is way less obvious now.
722:28 - Because even though you might want to
go to the first element in the linked
722:32 - list, or the second, or the third, you
can't just jump to those arithmetically
722:36 - by doing a bit of math.
722:38 - Instead, you have to
follow all of those arrows.
722:41 - So with linked lists, you can't use
this square bracket notation anymore
722:44 - because one node might be here,
over here, over here, over here.
722:47 - You can't just use some simple offset.
722:51 - So I think our code is going
to have to be a little fancier.
722:53 - And this might look scary at
first, but it's just an application
722:57 - of some of the basic definitions here.
722:59 - Let me do a for-loop that actually
uses a node* variable initialized
723:06 - to the list itself.
723:08 - I'm going to keep doing this, so
long as TMP does not equal null.
723:13 - And on each iteration
of this loop, I'm going
723:15 - to update TMP to be
whatever TMP arrow next is.
723:20 - And I'll remind you in a moment
and explain in more detail.
723:23 - But when I print something here
with printf, I can still use %i.
723:27 - Because it's still a number
at the end of the day.
723:29 - But what I want to print out is the
number in this temporary variable.
723:34 - So maybe the ugliest
for-loop we've ever seen.
723:36 - Because it's mixing, not just
the idea of a for-loop, which
723:38 - itself was a bit cryptic weeks ago.
723:40 - But now, I'm using pointers
instead of integers.
723:43 - But I'm not violating the
definition of a for-loop.
723:45 - Recall that a for-loop has 3
main things in parentheses.
723:48 - What do you want to initialize first?
723:50 - What condition do you want to
keep checking again and again?
723:53 - And what update do you want to make
on every iteration of the loop?
723:56 - So with that basic
definition in mind, this
723:59 - is giving me a temporary
variable called TMP
724:01 - that is initialized to
the beginning of the loop.
724:04 - So it's like pointing my
finger at the number 1 node.
724:07 - Then, I'm asking the question,
does TMP not equal null?
724:11 - Well, hopefully, not because
I'm pointing at a valid node
724:13 - that is the number 1 node.
724:15 - So, of course, it
doesn't equal null yet.
724:17 - Null won't be until we get
to the end of the list.
724:19 - So what do I do?
724:21 - I started this TMP variable.
724:22 - I follow the arrow and go to
the number field they're in.
724:27 - What do I then do?
724:28 - The for-loop says,
change TMP to be whatever
724:32 - is at TMP, by following the arrow
and grabbing the next field.
724:36 - That, then, has the result of being
checked against this conditional.
724:39 - No, of course, it doesn't equal
null because the second node
724:42 - is the number 2 node.
724:43 - Null is still at the very end.
724:45 - So I print out the number 2.
724:47 - Next step, I update TMP one more
time to be whatever is next.
724:51 - That, then, does not yet equal null.
724:53 - So I go ahead and print
out the number 3 node.
724:55 - Then one last time, I update TMP to
be whatever TMP is in the next field.
725:01 - But after 1, 2, 3, that
last next field is null.
725:05 - And so, I break out of
this for-loop altogether.
725:09 - So if I do this in
pictorial form, all we're
725:12 - doing, if I now use my finger
to represent the TMP variable.
725:15 - I initialize TMP to be whatever
list is, so it points here.
725:19 - That's obviously not null
so I print out whatever
725:22 - is that TMP, follow the arrow
in number, and I print that out.
725:26 - Then I update TMP to point here.
725:28 - Then I update TMP to point here.
725:30 - Then I update TMP to point here.
725:31 - Wait, that's null.
725:32 - The for-loop ends.
725:34 - So, again, admittedly much more cryptic
than our familiar int i equals 0,
725:39 - and so forth.
725:40 - But it's just a different
utilization of the for-loop syntax.
725:46 - Yes.
725:46 - AUDIENCE: How does it happen that
you're always printing out the numbers.
725:50 - Because it seems to me that addresses-
725:52 - SPEAKER 1: Good question.
725:53 - How is it that I'm actually printing
numbers and not printing out
725:56 - addresses instead.
725:57 - The compiler is helping me here.
725:59 - Because I taught it, in the
very beginning of my program,
726:02 - what a node is.
726:02 - Which looks like this here.
726:05 - The compiler knows that a node has
a number of fields and a next field
726:08 - down here, in the for-loop.
726:10 - Because I'm iterating using a node*
pointer, and not an int* pointer,
726:16 - the compiler knows that any
time I'm pointing at something,
726:19 - I'm pointing at the whole node.
726:21 - Doesn't matter where specifically in
the rectangle I'm pointing per se.
726:24 - It's, ultimately, pointing
at the whole node itself.
726:26 - And the fact that I, then, use
TMP arrow number means, OK,
726:30 - adjust your finger slightly.
726:31 - So you're literally pointing at the
number field and not the next field.
726:35 - So that's sufficient information for
the computer to distinguish the 2.
726:40 - Good question.
726:41 - Other questions then
on this approach here.
726:44 - Yeah, in the back.
726:45 - AUDIENCE: How would you--
726:46 - SPEAKER 1: How would I use a for-loop
to add elements to a linked list?
726:51 - You will do something like this,
if I may, in problem set 5.
726:56 - We will give you some of the
scaffolding for doing this.
726:59 - But in this coming weeks materials
will we guide you to that.
727:02 - But let me not spoil it just yet.
727:04 - Fair question, though.
727:05 - Yeah.
727:06 - AUDIENCE: So I had a
question about line 49.
727:08 - SPEAKER 1: OK.
727:09 - AUDIENCE: Is line 49
possible in line 43?
727:11 - SPEAKER 1: Good question.
727:12 - Is line 49 acceptable, even
if we freed it earlier.
727:15 - We didn't free it in line
43, in this case, right.
727:18 - You can only reach line 49,
if n does not equal null.
727:22 - And you do not return on line 45.
727:24 - So that's safe.
727:25 - I was only doing those freeing, if I
knew on line 45 that I'm out of here
727:29 - anyway, at that point.
727:31 - Good question.
727:31 - And, yeah.
727:32 - AUDIENCE: I had a quick question.
727:33 - Is TMP [INAUDIBLE].
727:36 - SPEAKER 1: Correct You're asking
about TMP, because it's in a for-loop,
727:40 - does that mean you
don't have to free it?
727:41 - You never have to free pointers, per se.
727:44 - You should only free addresses that
were returned to you by malloc.
727:49 - So I haven't finished
the program, to be fair.
727:51 - But you're not freeing variables.
727:53 - You're not freeing like, fields.
727:55 - You are freeing specific
addresses, whatever they may be.
727:58 - So the last thing, and I
was stalling on showing this
728:01 - because it too is a little cryptic.
728:02 - Here is how you can free,
now, a whole linked list.
728:06 - In the world of arrays,
recall, it was so easy.
728:08 - You just say free list.
728:09 - You return 0 and you're done.
728:11 - Not with a linked list.
728:12 - Because, again, the
computer doesn't know
728:14 - what you have stitched together
using all of these pointers
728:17 - all over the computer's memory.
728:18 - You need to follow those arrows.
728:20 - So one way to do this
would be as follows.
728:23 - While the list itself is not null,
so while there's a list to be freed.
728:28 - What do I want to do?
728:29 - I'm going to give myself a
temporary variable called TMP again.
728:32 - And it's a different TMP because
it's in a different scope.
728:34 - It's inside of the while loop instead
the for-loop, a few lines earlier.
728:38 - I am going to initialize TMP to
be the address of the next node.
728:44 - Just so I can get one
step ahead of things.
728:46 - Why am I doing this?
728:47 - Because now, I can boldly
free the list itself,
728:51 - which does not mean the whole list.
728:53 - Again, I'm freeing the
address in list, which
728:56 - is the address of the number 1 node.
728:58 - That's what list is.
728:59 - It's just the address
of the number 1 node.
729:02 - So if I first use TMP
to point out the number
729:05 - 2 slightly in the middle of the picture,
then it is safe for me on line 61,
729:10 - at the moment, to free list.
729:12 - That is the address of the first node.
729:15 - Now I'm going to say, all right, once
I freed the first node in the list,
729:19 - I can update the list
itself to be literally TMP.
729:24 - And now, the loop repeats.
729:26 - So what's happening here?
729:27 - If you think about this picture, TMP
is initially pointing at not the list,
729:33 - but list arrow next.
729:35 - So TMP, represented by my right hand
here, is pointing at the number 2.
729:38 - Totally safe and reasonable to
free now the list itself a.k.a.
729:43 - the address of the number 1 node.
729:44 - That has the effect of just
throwing away the number 1 node,
729:47 - telling the computer you can
reuse that memory for you.
729:50 - The last line of code I wrote
updated list to point at the number
729:53 - 2, at which point my loop proceeded
to do the exact same thing again.
729:58 - And only once my finger is
literally pointing at nowhere,
730:01 - the null symbol, will the
loop, by nature of a while
730:03 - loop as I'll toggle back to, break out.
730:06 - And there's nothing more to be freed.
730:09 - So again, what you'll see,
ultimately, in problem set 5,
730:12 - more on that later, is an opportunity
to play around with just this syntax.
730:16 - But also these ideas.
730:17 - But again, even though the syntax
is admittedly pretty cryptic,
730:20 - we're still using basics like
these for-loops or while loops.
730:23 - We're just starting to now
follow explicit addresses rather
730:27 - than letting the computer do
all of the arithmetic for us,
730:31 - as we previously benefited from.
730:33 - At the very end of this thing, I'm
going to return 0 as though all is well.
730:36 - And I think, then, we're good to go.
730:39 - All right.
730:40 - Questions on this linked list code now?
730:43 - And again, we'll walk through this
again in the coming weeks spec.
730:46 - Yeah.
730:46 - AUDIENCE: Can you explain the while
loop [INAUDIBLE] starts in other ways?
730:51 - SPEAKER 1: Sure.
730:51 - Can we explain this while loop
here for freeing the list.
730:55 - So notice that, first, I'm just
asking the obvious question.
730:58 - Is the list null?
730:58 - Because if it is, there's
no work to be done.
731:02 - However, while the list is not
null, according to line 58,
731:06 - what do we want to do?
731:08 - I want to create a temporary variable
that points at the same thing
731:12 - that list arrow next is pointing at.
731:15 - So what does that mean?
731:16 - Here is list.
731:17 - List arrow next is whatever
this thing is here.
731:21 - So if my right hand represents
the temporary variable,
731:23 - I'm literally pointing at the
same thing as the list is itself.
731:27 - The next line of code,
recall, was free the list.
731:31 - And unlike, in our world of
arrays, like half an hour
731:33 - ago where that just meant
free the whole darn list,
731:36 - you now have taken over control over the
computer's memory with a linked list,
731:41 - in ways that you didn't with the array.
731:43 - The computer knew how to free
the whole array because you
731:46 - malloc the whole thing at once.
731:48 - You are now mallocing the
linked list one node at a time.
731:52 - And the operating system does
not keep track of for you
731:54 - where all these nodes are.
731:56 - So when you free list,
you are literally freeing
731:59 - the value of the list variable,
which is just this first node here.
732:03 - Then my last line of code, which I'll
flip back to in a second, updates
732:07 - list to now ignore the
free memory and point at 2.
732:11 - And the story then repeats.
732:14 - So, again, it's just a
very pedantic way of using
732:17 - this new syntax of star notation,
and the arrow notation, and the like,
732:21 - to do the equivalent of walking
down all of these arrows.
732:25 - Following all of these breadcrumbs.
732:28 - But it does take admittedly
some getting used to.
732:31 - Syntax, you only have to do one week.
732:33 - But, again, next week
in Python will we begin
732:35 - to abstract a lot of
this complexity away.
732:37 - But none of this
complexity is going away.
732:39 - It's just that someone else, the
authors of Python for instance,
732:42 - will have automated this stuff for us.
732:44 - The goal this week is
to understand what it
732:46 - is we're going to get for
free, so to speak, next week.
732:49 - All right.
732:49 - Questions on these length lists.
732:54 - All right.
732:54 - Just, yeah, in the back.
732:55 - AUDIENCE: So are the while
loops strictly necessary
732:58 - for the freeing [INAUDIBLE].
733:00 - SPEAKER 1: Fair question.
733:01 - Let me summarize as, could we
have freed this with a for-loop?
733:03 - Absolutely.
733:04 - It just is a matter of style.
733:06 - It's a little more elegant to do it
in a while loop, according to me.
733:09 - But other people will
reasonably disagree.
733:11 - Anything you can do with a while
loop you can do with a for-loop,
733:13 - and vise versa.
733:14 - Do while loops, recall,
are a little different.
733:17 - But they will always
do at least one thing.
733:19 - But for-loops and while loops
behave the same in this case.
733:22 - AUDIENCE: Thank you.
733:23 - SPEAKER 1: Sure.
733:24 - Other questions?
733:25 - All right, well let's just
vary things a little bit here.
733:27 - Just to see what some of
the pitfalls might now be
733:29 - without getting into the weeds of code.
733:31 - Indeed, we'll try to save some of
that for problem set 5's exploration.
733:35 - But instead, let's imagine that we
want to create a list here of our own.
733:40 - I can offer, in exchange for a
few volunteers, some foam fingers
733:43 - to bring to the next game, perhaps.
733:45 - Could we get maybe just
one volunteer first?
733:46 - Come on up.
733:47 - You will be our linked
list from the get go.
733:50 - What's your name?
733:51 - AUDIENCE: Pedro.
733:52 - SPEAKER 1: Pedro, come on up.
733:54 - All right, thank you to Pedro.
733:55 - [AUDIENCE CLAPPING]
733:58 - And if you want to just
stand roughly over here.
734:00 - But you are a null pointer so
just point sort of at the ground,
734:03 - as though you're pointing at 0.
734:04 - All right.
734:04 - So Pedro is our linked list
of size 0, which pictorially
734:07 - might look a little something like this
for consistency with our past pictures.
734:10 - Now suppose that we want to go ahead
and malloc, oh, how about the number 2.
734:15 - Can we get a volunteer
to be on camera here?
734:17 - OK.
734:18 - You jumped out of your seat.
734:19 - Do you want to come up?
734:21 - OK, you really want
the foam finger, I say.
734:23 - All right.
734:23 - Round of applause, sure.
734:24 - [AUDIENCE CLAPPING]
734:30 - OK.
734:30 - And what's your name?
734:31 - AUDIENCE: Caleb.
734:32 - SPEAKER 1: Say again?
734:32 - AUDIENCE: Caleb.
734:33 - SPEAKER 1: Halen?
734:33 - AUDIENCE: Caleb.
734:34 - SPEAKER 1: Caleb.
734:34 - Caleb, sorry.
734:36 - All right.
734:36 - So here is your number
2 for your number field.
734:39 - And here is your pointer.
734:40 - And come on, let's say that there
was room for Caleb like, right there.
734:43 - That's perfect.
734:44 - So Caleb got malloced,
if you will, over here.
734:46 - So now if we want to insert Caleb and
the number 2 into this linked list,
734:51 - well what do we need to do?
734:52 - I already initialized you to 2.
734:53 - And pointing as you
are to the ground means
734:55 - you're initialized to
null for your next field.
734:58 - Pedro, what you should you-- perfect.
734:59 - What should Pedro do.
735:01 - That's fine, too.
735:02 - So Pedro is now pointing at the list.
735:03 - So now our list looks a
little something like this.
735:05 - So far, so good.
735:07 - All is well.
735:07 - So the first couple of these
will be pretty straightforward.
735:10 - Let's insert one more, if anyone
really wants another foam finger.
735:13 - Here, how about right in the middle.
735:15 - Come on down.
735:16 - And just in anticipation, how
about let's malloc someone else.
735:19 - OK, your friends are pointing at you.
735:20 - Do you want to come
down too, preemptively?
735:22 - This is a pool of memory, if you will.
735:25 - What's your name?
735:26 - AUDIENCE: Hannah.
735:26 - SPEAKER 1: Hannah.
735:27 - All right, Hanna.
735:28 - You are number 4.
735:28 - [AUDIENCE CLAPPING]
735:30 - And hang there for just a moment.
735:32 - All right.
735:32 - So we've just malloced Hannah.
735:34 - And Hannah, how about Hannah,
suppose you ended up over there
735:37 - in just some random location.
735:39 - All right.
735:39 - So what should we now do, if the
goal is to keep these things sorted?
735:43 - How about?
735:44 - So Pedro, do you have
to update yourself?
735:46 - AUDIENCE: No.
735:46 - SPEAKER 1: No.
735:46 - All right.
735:47 - Caleb, what do you have to do?
735:48 - OK.
735:49 - And Hannah what should you be doing?
735:52 - I would, it's just for you for now, so
point at the ground representing null.
735:55 - OK.
735:55 - So, again demonstrating the fact
that, unlike in past weeks where
735:58 - we had our nice, clean array
back, to back, to back,
736:01 - contiguously, these guys are
deliberately all over the stage.
736:03 - So let's malloc another.
736:04 - How about number 5.
736:06 - What's your name?
736:07 - AUDIENCE: Jonathan.
736:07 - SPEAKER 1: Jonathan.
736:08 - All right, Jonathan.
736:09 - You are our number 5.
736:10 - And pick your favorite place in memory.
736:12 - [AUDIENCE CLAPPING]
736:13 - OK.
736:16 - All right.
736:16 - So Jonathan's now over there.
736:19 - And Hannah is over there.
736:20 - So 5, we want to point
Hannah at number 5.
736:21 - So you, of course, are
going to point there.
736:23 - And where should you be pointing?
736:25 - Down to represent null, as well.
736:26 - OK.
736:27 - So pretty straightforward.
736:29 - But now things get a little interesting.
736:30 - And here, we'll use a chance
to, without the weeds of code,
736:33 - point out how order of operations
is really going to matter.
736:36 - Suppose that I next want to
allocate say, the number 1.
736:40 - And I want to insert the
number 1 into this list.
736:42 - Yes.
736:43 - This is what the code would look like.
736:45 - But if we act this out-- could
we get one more volunteer?
736:48 - How about on the end
there in the sweater.
736:50 - Yeah.
736:50 - Come on down.
736:52 - We have, what's your name?
736:53 - AUDIENCE: Lauren.
736:54 - SPEAKER 1: Lauren.
736:54 - OK.
736:55 - Lauren, come on down.
736:56 - [AUDIENCE CLAPPING]
737:01 - And how about, Lauren,
why don't you go right
737:03 - in here in front, if you don't mind.
737:04 - Here is your number.
737:06 - Here is your pointer.
737:07 - So I've initialized
Lauren to the number 1.
737:09 - And your pointer will be
null, pointing at the ground.
737:11 - Where do you belong if we're
maintaining sorted order?
737:14 - Looks like right at the beginning.
737:15 - What should happen here?
737:18 - OK.
737:18 - So Pedro has presumed
to point now at Lauren.
737:23 - But how do you know where to point?
737:27 - AUDIENCE: He's number 2.
737:28 - SPEAKER 1: Pedro's undoing
what he did a moment ago.
737:30 - So this was deliberate.
737:31 - And that was perfect that Pedro
presumed to point immediately at Lauren.
737:35 - Why?
737:35 - You literally just orphaned all of these
folks, all of these chunks of memory.
737:39 - Why?
737:39 - Because if Pedro was our only variable
pointing at that chunk of memory,
737:44 - this is the danger of using pointers,
and dynamic memory allocation,
737:47 - and building your own data structures.
737:48 - The moment you point
temporarily, if you could,
737:50 - to Lauren, I have no idea
where he's pointing to.
737:53 - I have no idea how to get back to Caleb,
or Hannah, or anyone else on stage.
737:58 - So that was bad.
737:59 - So you did undo it.
738:00 - So that's good.
738:01 - I think we need Lauren
to make a decision first.
738:03 - Who should you point at?
738:04 - AUDIENCE: Caleb.
738:05 - SPEAKER 1: So pointing at Caleb.
738:06 - Why?
738:06 - Because you're pointing at
literally who Pedro is pointing at.
738:09 - Pedro, now what are you safe to do?
738:10 - Good.
738:11 - So order of operations there matters.
738:13 - And if we had just done this line
of code in red here, list equals n.
738:17 - That was like Pedro's first
instinct, bad things happen.
738:20 - And we orphaned the rest of the list.
738:22 - But if we think through it logically and
do this, as Lauren did for us, instead,
738:25 - we've now updated the list to look
a little something more like this.
738:29 - Let's do one last one.
738:30 - We got one more foam finger
here for the number 3.
738:32 - How about on the end?
738:33 - Yeah.
738:34 - You want to come down.
738:35 - All right.
738:36 - One final volunteer.
738:37 - [AUDIENCE CLAPPING]
738:43 - All right.
738:43 - And what's your name?
738:44 - AUDIENCE: Miriam.
738:45 - SPEAKER 1: I'm sorry?
738:45 - AUDIENCE: Miriam.
738:46 - SPEAKER 1: Miriam.
738:46 - All right.
738:47 - So here is your number 3.
738:48 - Here is your pointer.
738:49 - If you want to go maybe in the middle of
the stage in a random memory location.
738:52 - So here, too, the goal is
to maintain sorted order.
738:56 - So let's ask the audience, who or what
number should point at whom first here?
739:01 - So we don't screw up and
orphan some of the memory.
739:04 - And if we do orphan memory, this is
what's called, again per last week,
739:07 - a memory leak.
739:08 - Your Mac, your PC, your
phone can start to slow down
739:10 - if you keep asking for memory but
never give it back or lose track of it.
739:14 - So we want to get this right.
739:15 - Who should point at whom?
739:17 - Or what number?
739:18 - Say again.
739:19 - AUDIENCE: 3 to 4.
739:20 - SPEAKER 1: 3 should point at 4.
739:22 - So 3, do you want to point at 4.
739:25 - And not, so, OK, good.
739:27 - And how did you know,
Miriam, whom to point at?
739:32 - AUDIENCE: Copying Caleb.
739:33 - SPEAKER 1: Perfect.
739:34 - OK, so copying Caleb.
739:35 - Why?
739:36 - Because if you look at where this
list is currently constructed,
739:39 - and you can cheat on the board
here, 2 is pointing to 4.
739:42 - If you point at whoever Caleb,
number 2, is pointing out,
739:46 - that, indeed, leads you
to Hannah for number 4.
739:48 - So now what's the next step
to stitch this together?
739:53 - Our voice in the crowd.
739:54 - AUDIENCE: 2 to 3.
739:55 - SPEAKER 1: 2 to 3.
739:56 - So, 2 to 3.
739:57 - So Caleb, I think it's now
safe for you to decouple.
740:00 - Because someone is already
pointing at Hannah.
740:02 - We haven't orphaned anyone.
740:03 - So now, if we follow
the breadcrumbs, we've
740:05 - got Pedro leading to 1,
to 2, to 3, to 4, to 5.
740:10 - We need the numbers back, but
you can keep the foam fingers.
740:12 - Thank you to our volunteers here.
740:15 - AUDIENCE: Thank you.
740:15 - Thank you.
740:16 - [AUDIENCE CLAPPING]
740:17 - SPEAKER 1: You can just
put the numbers here.
740:20 - AUDIENCE: Thank you.
740:21 - SPEAKER 1: Thank you to all.
740:22 - So this is only to say that when you
start looking at the code this week
740:26 - and in the problem set, it's
going to be very easy to lose
740:29 - sight of the forest for the trees.
740:30 - Because the code does get really dense.
740:32 - But the idea is, again, really do bubble
up to these higher level descriptions.
740:37 - And if you think about data
structures at this level.
740:40 - If you go off in program
after a class like CS50
740:42 - and your whiteboarding something
with a friend or a colleague,
740:45 - most people think at
and talk at this level.
740:48 - And they just assume that,
yeah, if we went back and looked
740:51 - at our textbooks or class notes, we
could figure out how to implement this.
740:54 - But the important stuff
is the conversation.
740:56 - And the idea is up here.
740:57 - Even though, via this week, will we
get some practice with the actual code.
741:02 - So when it comes to analyzing
an algorithm like this,
741:06 - let's consider the following.
741:08 - What might be now the running time of
operations like searching and inserting
741:15 - into a linked list?
741:17 - We talked about arrays earlier.
741:19 - And we had some binary search
possibilities still, as soon
741:22 - as it's an array.
741:23 - But as soon as we have a linked list,
these arrows, like our volunteers,
741:26 - could be anywhere on stage.
741:27 - And so you can't just
assume that you can
741:29 - jump arithmetically to the middle
element, to the middle element,
741:32 - to the middle one.
741:32 - You pretty much have to follow all
of these breadcrumbs again and again.
741:36 - So how might that inform what we see?
741:39 - Well, consider this too.
741:41 - Even though I keep drawing all these
pictures with all of the numbers
741:43 - exposed.
741:44 - And all of us humans
in the room can easily
741:46 - spot where the 1 is, where the 2 is,
where the 3 is, the computer, again,
741:49 - just like with our lockers and arrays,
can only see one location at a time.
741:54 - And the key thing with a linked
list is that the only address
741:57 - we've fundamentally been remembering
is what Pedro represented a moment ago.
742:01 - He was the link to all
of the other nodes.
742:05 - And, in turn, each
person led to the next.
742:07 - But without Pedro, we would have lost
some of, or all of, the linked list.
742:12 - So when you start with
a linked list, if you
742:14 - want to find an element as via
search, you have to do it linearly.
742:18 - Following all of the arrows.
742:19 - Following all of the
pointers on the stage
742:21 - in order to get to the node in question.
742:23 - And only once you hit null can
you conclude, yep, it was there.
742:27 - Or no, it was not.
742:28 - So given that if a
computer, essentially,
742:31 - can only see the number 1, or the number
2, or the number 3, or the number 4,
742:36 - or the number 5, one
at a time, how might we
742:39 - think about the running time of search?
742:43 - And it is indeed Big O of n.
742:45 - But why is that?
742:45 - Well, in the worst case, the
number you might be looking for
742:48 - is all the way at the end.
742:49 - And so, obviously, you're going to
have to search all of the n elements.
742:53 - And I drew these things
with boxes on top of them.
742:55 - Because, again, even though
you and I can immediately see,
742:57 - where the 5 is for
instance, the computer
743:00 - can only figure that out by starting
at the beginning and going there.
743:03 - So there, too, is another trade off.
743:05 - It would seem that, overnight,
we have lost the ability
743:09 - to do a very powerful algorithm from
week 0 known as binary search, right.
743:14 - It's gone.
743:15 - Because there's no way in this
picture to jump mathematically
743:19 - to the middle node, unless
you remember where it is.
743:21 - And then, remember where
every other node is.
743:23 - And at that point,
you're back to an array.
743:25 - Linked list, by design, only
remember the next node in the list.
743:29 - All right.
743:30 - How about something like insert?
743:32 - In the worst case,
perhaps, how many steps
743:35 - might it take to insert
something into a linked list?
743:38 - Someone else.
743:40 - Someone else.
743:41 - Yeah.
743:41 - AUDIENCE: N squared.
743:42 - SPEAKER 1: Say again?
743:42 - AUDIENCE: N squared.
743:43 - SPEAKER 1: N squared.
743:44 - Fortunately, it's not that bad.
743:45 - It's not as bad as n squared.
743:46 - That typically means
doing n things, n times.
743:49 - And I think we can stay under
that, but not a bad thought.
743:53 - Yeah.
743:54 - AUDIENCE: Is it n?
743:55 - SPEAKER 1: Why would it be n?
743:56 - AUDIENCE: Because the [INAUDIBLE].
744:00 - SPEAKER 1: OK.
744:00 - So to summarize, you're proposing n.
744:03 - Because to find where
the thing goes, you
744:04 - have to traverse,
potentially, the whole list.
744:06 - Because if I'm inserting the
number 6 or the number 99,
744:09 - that numerically
belongs at the very end,
744:12 - I can only find its location
by looking for all of them.
744:15 - At this point, though, in the term.
744:16 - And really, at this
point in the story, you
744:18 - should start to question these very
simplistic questions, to be honest.
744:22 - Because the answer is almost
always going to depend, right.
744:25 - If I've just got a link to
list that looks like this,
744:28 - the first question back to
someone asking this question
744:31 - would be, well does the list
need to be sorted, right?
744:34 - I've drawn it as sorted
and it might imply as much.
744:37 - So that's a reasonable
assumption to have made.
744:39 - But if I don't care about
maintaining sorted order,
744:41 - I could actually insert into a
linked list in constant time.
744:45 - Why?
744:46 - I could just keep inserting into
the beginning, into the beginning,
744:49 - into the beginning.
744:49 - And even though the
list is getting longer,
744:51 - the number of steps required to insert
something between the first element
744:55 - is not growing at all.
744:57 - You just keep inserting.
745:00 - If you want to keep it
sorted though, yes, it's
745:02 - going to be, indeed, Big O of n.
745:03 - But again, these kinds
of, now, assumptions
745:05 - are going to start to matter.
745:06 - So let's for the sake of
discussion say it's Big O of n,
745:09 - if we do want to maintain sorted order.
745:11 - But what about in the
case of not caring.
745:14 - It might indeed be a Big O of 1.
745:16 - And now these are the kinds of decisions
that will start to leave to you.
745:19 - What about in the best case here?
745:20 - If we're thinking about
Big Omega notation,
745:22 - then, frankly, we could just
get lucky in the best case.
745:25 - And the element we're looking for
happens to be at the beginning.
745:27 - Or heck, we just blindly insert to the
beginning irrespective of the order
745:32 - that we want to keep things in.
745:33 - All right.
745:34 - So besides then, how can we
improve further on this design?
745:39 - We don't need to stop at linked list.
745:41 - Because, honestly, it's
not been a clear win.
745:43 - Like, linked list allow us
to use more of our memory
745:46 - because we don't need massive
growing chunks of contiguous memory.
745:49 - So that's a win.
745:50 - But they still require Big O of
n time to find the end of it,
745:54 - if we care about order.
745:56 - We're using at least twice as
much memory for the darn pointer.
745:59 - So that seems like a sidestep.
746:01 - It's not really a step forward.
746:03 - So can we do better?
746:05 - Here's where we can now accelerate the
story by just stipulating that, hey,
746:09 - even if you haven't
used this technique yet,
746:11 - we would seem to have an ability to
stitch together pieces of memory just
746:15 - using pointers .
746:16 - And anything you could
imagine drawing with arrows,
746:19 - you can implement, it
would seem, in code.
746:21 - So what if we leverage
a second dimension.
746:24 - Instead of just stringing
together things laterally,
746:26 - left to right, essentially,
even though they
746:28 - were bouncing around on the screen.
746:30 - What if we start to leverage a
second dimension here, so to speak.
746:33 - And build more interesting
structures in the computer's memory.
746:36 - Well it turns out that
in a computer's memory,
746:39 - we could create a tree,
similar to a family tree.
746:42 - If you've ever seen or draw on a family
tree with grandparents, and parents,
746:46 - and siblings, and so forth.
746:50 - So inverted branch of a
tree that grows, typically
746:53 - when it's drawn, downward instead
of upward like a typical tree.
746:56 - But that's something we could
translate into code as well.
746:59 - Specifically, let's do something
called a binary search tree.
747:02 - Which is a type of tree.
747:04 - And what I mean by
this is the following.
747:07 - Notice this.
747:07 - This is an example of an
array from like week 2,
747:10 - when we first talked about those.
747:12 - And we had the lockers on stage.
747:13 - And recall that what was nice
about an array, if 1, it's sorted.
747:19 - And 2, all of its numbers
are indeed contiguous,
747:23 - which is by definition an array.
747:25 - We can just do some simple math.
747:26 - For instance, if there are 7 elements
in this array, and we do 7 divided by 2,
747:31 - that's what?
747:31 - 3 and 1/2, round down
through truncation, that's 3.
747:34 - 0, 1, 2, 3.
747:36 - That gives me the middle element,
arithmetically, in this thing.
747:39 - And even though I have to be
careful about rounding, using
747:41 - simple arithmetic, I can very quickly,
with a single line of code or math,
747:45 - find for you the middle of the
left half, of the left half,
747:48 - of the right half, or whatever.
747:49 - That's the power of arrays.
747:50 - And that's what gave us binary search.
747:52 - And how did binary search work?
747:54 - Well, we looked at the middle.
747:55 - And then, we went left or right.
747:57 - And then, we went left or right again,
implied by this color scheme here.
748:02 - Wouldn't it be nice if we
somehow preserved the new upsides
748:07 - today of dynamic memory
allocation, giving ourselves
748:10 - the ability to just add another
element, add another element,
748:13 - add another element.
748:14 - But retain the power of binary search.
748:16 - Because log of n was much better than
n, certainly for large data sets, right.
748:21 - Even the phone book
demonstrated as much weeks ago.
748:24 - So what if I draw this same
picture in 2 dimensions.
748:28 - And I preserve the color scheme,
just so it's obvious what came where.
748:32 - What are these things look like now?
748:35 - Maybe, like, things we
might now call nodes, right.
748:38 - A node is just a generic term
for like, storing some data.
748:42 - What if the data these nodes
are storing are numbers.
748:45 - So still integers.
748:47 - But what if we connected these
cleverly, like an old family tree.
748:51 - Whereby, every node has not one
pointer now, but as many as 2.
748:56 - Maybe 0, like in the leaves
at the bottom are in green.
748:59 - But other nodes on the interior
might have as many as 2.
749:02 - Like having 2 children, so to speak.
749:04 - And indeed, the vernacular
here is exactly that.
749:06 - This would be called
the root of the tree.
749:08 - Or this would be a parent,
with respect to these children.
749:11 - The green ones would be
grandchildren, respect to these.
749:14 - The green ones would be siblings
with respect to each other.
749:19 - And over there, too.
749:19 - So all the same jargon you
might use in the real world,
749:22 - applies in the world of data
structures and CS trees.
749:25 - But this is interesting because I think
we could build this now, this data
749:30 - structure in the computer's memory.
749:32 - How?
749:33 - Well, suppose that we defined
a node to be no longer just
749:37 - this, a number in a next field.
749:39 - What if we give ourselves
a bit more room here?
749:42 - And give ourselves a pointer called
left and another one called right.
749:47 - Both of which is a
pointer to a struct node.
749:49 - So same idea as before, but now we
just make sure we think of these things
749:53 - as pointing this way and
this way, not just this way.
749:56 - Not just a single direction, but 2.
749:58 - So you could imagine, in code, building
something up like this with a node.
750:02 - That creates, in essence,
this diagram here.
750:06 - But why is this compelling?
750:07 - Suppose I want to find the number 3.
750:09 - I want to search for the
number 3 in this tree.
750:12 - It would seem, just like Pedro was
the beginning of our linked list,
750:15 - in the world of trees,
the root, so to speak,
750:18 - is the beginning of your data structure.
750:20 - You can retain and remember this entire
tree just by pointing at the root node,
750:26 - ultimately.
750:26 - One variable can hang
on to this whole tree.
750:29 - So how can I find the number 3?
750:32 - Well, if I look at the root node and
the number I'm looking for is less than.
750:36 - Notice, I can go this way.
750:37 - Or if it's greater
than, I can go this way.
750:40 - So I preserve that
property of the phone book,
750:42 - or just assorted array in general.
750:44 - What's true over here?
750:45 - If I'm looking for 3, I can
go to the right of the 2
750:48 - because that number is
going to be greater.
750:50 - If I go left, it's going
to be smaller instead.
750:53 - And here's an example
of actually recursion.
750:55 - Recursion in a physical sense
much like the Mario's pyramid.
750:59 - Which was recursively to find.
751:01 - Notice this.
751:02 - I claim this whole thing is a tree.
751:04 - Specifically, a binary search
tree, which means every node
751:08 - has 2, or maybe 1, or maybe 0 children.
751:11 - But no more than 2.
751:12 - Hence the bi in binary.
751:14 - And it's the case that every left
child is smaller than the root.
751:19 - And every right child
is larger than the root.
751:22 - That definition certainly
works for 2, 4, and 6.
751:25 - But it also works recursively for
every sub tree, or branch of this tree.
751:30 - Notice, if you think
of this as the root,
751:32 - it is indeed bigger
than this left child.
751:34 - And it's smaller than this right child.
751:36 - And if you look even at
the leaves, so to speak.
751:39 - The grandchildren here.
751:40 - This root node is bigger than
its left child, if it existed.
751:44 - So it's a meaningless statement.
751:45 - And it's less than its right child.
751:47 - Or it's not greater than, certainly,
so that's meaningless too.
751:50 - So we haven't violated the definition
even for these leaves, as well.
751:54 - And so, now, how many steps does
it take to find in the worst case
751:57 - any number in a binary
search tree, it would seem?
752:02 - So it seems 2, literally.
752:04 - And the height of this
thing is actually 3.
752:05 - And so long story short, especially,
if you're a little less comfy
752:08 - with your logarithms from yesteryear.
752:10 - Log base 2 is the number of times you
can divide something in half, and half,
752:14 - and half, until you get down to 1.
752:16 - This is like a logarithm
in the reverse direction.
752:19 - Here's a whole lot of elements.
752:20 - And we're having, we're
having until we get down to 1.
752:22 - So the height of this tree, that
is to say, is log base 2 of n.
752:27 - Which means that even in the worst case,
the number you're looking for maybe
752:30 - it's all the way at the
bottom in the leaves.
752:32 - Doesn't matter.
752:32 - It's going to take log base 2
of n steps, or log of n steps,
752:37 - to find, maximally, any
one of those numbers.
752:41 - So, again, binary search is back.
752:46 - But we've paid a price, right.
752:48 - This isn't a linked list anymore.
752:49 - It's a tree.
752:50 - But we've gained back binary search,
which is pretty compelling, right.
752:53 - That's where the whole class
began, on making that distinction.
752:56 - But what price have we paid to retain
binary search in this new world.
753:01 - Yeah.
753:04 - It's no longer sorted
left to right, but this
753:06 - is a claim sorted, according to
the binary search tree definition.
753:09 - Where, again, left child
is smaller than root.
753:13 - And right child is greater than root.
753:15 - So it is sorted, but it's sorted in
a 2-dimensional sense, if you will.
753:19 - Not just 1.
753:20 - But another price paid?
753:22 - AUDIENCE: [INAUDIBLE] nodes now.
753:24 - SPEAKER 1: Exactly.
753:24 - Every node now needs not one
number, but 2, 3 pieces of data.
753:29 - A number and now 2 pointers.
753:31 - So, again, there's that trade off again.
753:32 - Where, well, if you want
to save time, you've
753:34 - got to give something if
you start giving space.
753:37 - And you start using more
space, you can speed up time.
753:40 - Like, you've got it.
753:40 - There's always a price paid.
753:42 - And it's very often in space, or time,
or complexity, or developer time,
753:47 - the number of bugs you have to solve.
753:49 - I mean, all of these
are finite resources
753:51 - that you have to juggle them on.
753:53 - So if we consider now the code
with which we can implement this,
753:55 - here might be the node.
753:57 - And how might we actually
use something like this?
754:00 - Well, let's take a look at,
maybe, one final program.
754:03 - And see here, before we transition
to higher level concepts, ultimately.
754:07 - Let me go ahead here and let me just
open a program I wrote here in advance.
754:11 - So let me, in a moment, copy
over file called tree.c.
754:15 - Which we'll have on
the course's websites.
754:18 - And I'll walk you
through some of the logic
754:20 - here that I've written for tree.c.
754:25 - All right.
754:25 - So what do we have here first?
754:27 - So here is an implementation of
a binary search tree for numbers.
754:31 - And as before, I've played around and
I've inserted the numbers manually.
754:36 - So what's going on first?
754:37 - Here is my definition of a node for a
binary search tree, copied and pasted
754:41 - from what I proposed on
the board a moment ago.
754:44 - Here are 2 prototypes for
2 functions, that I'll
754:47 - show you in a moment,
that allow me to free
754:49 - an entire tree, one node at a time.
754:52 - And then, also allow me to
print the tree in order.
754:55 - So even though they're
not sorted left to right,
754:57 - I bet if I'm clever about
what child I print first,
755:00 - I can reconstruct the idea of
printing this tree properly.
755:04 - So how might I implement
a binary search tree?
755:06 - Here's my main function.
755:07 - Here is how I might
represent a tree of size 0.
755:10 - It's just a null pointer called tree.
755:13 - Here's how I might add
a number to that list.
755:15 - So here, for instance, is me
malllocing space for a node.
755:19 - Storing it in a temporary
variable called n.
755:21 - Here is me just doing a safety check.
755:23 - Make sure n does not equal null.
755:25 - And then, here is me initializing this
node to contain the number 2, first.
755:29 - Then, initializing the left
child of that node to be null.
755:32 - And the right child of
that null node to be null.
755:34 - And then, initializing the tree itself
to be equal to that particular node.
755:40 - So at this point in the story, there's
just one rectangle on the screen
755:43 - containing the number
2 with no children.
755:46 - All right.
755:46 - Let's just add manually
to this a little further.
755:49 - Let's add another number to the
list, by mallocing another node.
755:52 - I don't need to declare n as a node*
because it already exists at this
755:55 - point.
755:56 - Here's a little safety check.
755:58 - I'm going to not bother with my,
let me do this, free memory here.
756:02 - Just to be safe.
756:04 - Do I want to do this?
756:07 - We want a free memory too,
which I've not done here,
756:09 - but I'll save that for another time.
756:11 - Here, I'm going to
initialize the number to 1.
756:13 - I'm going to initialize the children
of this node to null and null.
756:17 - And now, I'm going to do this.
756:19 - Initialize the tree's
left child to be n.
756:23 - So what that's essentially
doing here is if this
756:26 - is my root node, the single rectangle
I described a moment ago that currently
756:29 - has no children, neither left nor right.
756:32 - Here's my new node with the number 1.
756:33 - I want it to become the new left child.
756:36 - So that line of code on the
screen there, tree left equals n,
756:39 - is like stitching these 2 together
with a pointer from 2 to the 1.
756:44 - All right.
756:44 - The next lines of code,
you can probably guess,
756:47 - are me adding another
number to the list.
756:50 - Just the number 3.
756:51 - So this is a simpler tree with
2, 1, and, 3 respectively.
756:56 - And this code, let me wave
my hands, is almost the same.
756:59 - Except for the fact that I'm
updating the tree's right child
757:02 - to be this new and third node.
757:04 - Let's now run the code before
looking at those 2 functions.
757:07 - Let me do make tree, ./tree.
757:11 - And while I'll 1, 2, 3.
757:12 - So it sounds like the data structure
is sorted, to your concern earlier.
757:16 - But how did I actually print this?
757:18 - And then, eventually,
free the whole thing?
757:20 - Well let's look at the
definition of first print tree.
757:23 - And this is where
things get interesting.
757:26 - Print tree returns nothing
so it's a void function.
757:30 - But it takes a pointer to a root element
as its sole argument, node* root.
757:36 - Here's my safety check.
757:37 - If root equals equals
null, there's obviously
757:39 - nothing to print, just return.
757:40 - That goes without saying.
757:42 - But here's where things
get a little magical.
757:44 - Otherwise, print your left child.
757:47 - Then print your own number.
757:50 - Then, print your right child.
757:53 - What is this an example of, even
though it's not mentioned by name here?
757:59 - What programming technique here?
758:00 - AUDIENCE: Recursion.
758:01 - SPEAKER 1: Yeah.
758:02 - So this is actually perhaps the most
compelling use of recursion, yet.
758:05 - It wasn't really that
compelling with the Mario thing
758:08 - because we had such an easy
implementation with a for-loop loop
758:10 - weeks ago.
758:11 - But here is a perfect application of
recursion, where your data structure
758:15 - itself is recursive, right.
758:17 - If you take any snip
of any branch, it all
758:19 - still looks like a tree,
just a smaller one.
758:22 - That lends itself to recursion.
758:23 - So here is this leap of faith where I
say, print my left tree, or my left sub
758:28 - tree, if you will, via
my child at the left.
758:31 - Then, I'll print my own root
node here in the middle.
758:34 - Then, go ahead and
print my right sub tree.
758:37 - And because we have this base case that
makes sure that if the root is null,
758:41 - there's nothing to do, you're
not going to recurse infinitely.
758:44 - You're not going to call yourself
again, and again, and again,
758:47 - infinitely, many times.
758:48 - So it works out and prints
the 1, the 2, and the 3.
758:52 - And notice what we could do, too.
758:54 - If you wanted to print the tree in
reverse order, you could do that.
758:57 - Print your right tree
first, the greater element.
759:00 - Then, yourself.
759:01 - Then, your smaller sub tree.
759:02 - And if I do make tree
here and ./tree, well now,
759:05 - I've reversed the order of the list.
759:07 - And that's pretty cool.
759:08 - You can do it with a
for-loop in an array.
759:10 - But you can also do it, even with
this 2-dimensional structure.
759:13 - Let's lastly look at
this free tree function.
759:17 - And this one's almost the same.
759:19 - Order doesn't matter in quite the
same way, but it does still matter.
759:22 - Here's what I did with free tree.
759:24 - Well, if the root of the tree is
null, there's obviously nothing to do.
759:27 - Just return.
759:28 - Otherwise, go ahead and free your
left child and all of its descendants.
759:32 - Then free your right child
and all of its descendants.
759:35 - And then, free yourself.
759:37 - And again, free literally just
frees the address in that variable.
759:43 - It doesn't free the whole darn thing.
759:45 - It just frees literally
what's at that address.
759:47 - Why was it important that
I did line 72 last, though?
759:51 - Why did I free the left
child and the right child
759:53 - before I freed myself, so to speak?
759:57 - AUDIENCE: [INAUDIBLE].
759:58 - SPEAKER 1: Exactly.
759:59 - If you free yourself first, if I had
done incorrectly this line higher up,
760:03 - you're not allowed to touch the left
child tree or the right child tree.
760:08 - Because the memory address is
no longer valid at that point.
760:10 - You would get some
memory error, perhaps.
760:12 - The program would crash.
760:13 - Valgrind definitely wouldn't like it.
760:15 - Bad things would otherwise happen.
760:17 - But here, then, is an
example of recursion.
760:19 - And again, just a recursive use
of an actual data structure.
760:23 - And what's even cooler here
is, relatively speaking,
760:26 - suppose we wanted to
search something like this.
760:29 - Binary search actually gets pretty
straightforward to implement 2.
760:33 - For instance.
760:33 - here might be the prototype for a search
function for a binary search tree.
760:38 - You give me the root of a tree, and
you give me a number I'm looking for,
760:43 - and I can pretty easily now return true
if it's in there or false if it's not.
760:47 - How?
760:47 - Well, let's first ask a question.
760:49 - If tree equals equals null,
then you just return false.
760:52 - Because if there's no tree, there's no
number, so it's obviously not there.
760:56 - Return false.
760:57 - Else if, the number you're looking for
is less than the tree's own number,
761:04 - which direction should we go?
761:06 - AUDIENCE: Left.
761:06 - SPEAKER 1: OK, left.
761:07 - How do we express that?
761:08 - Well, let's just return the
answer to this question.
761:11 - Search the left sub tree,
by way of my left child,
761:15 - looking for the same number.
761:17 - And you just assume through
the beauty of recursion
761:19 - that you're kicking the can
and let yourself figure it out
761:22 - with a smaller problem.
761:24 - Just that snipped left tree instead.
761:26 - Else if, the number you're looking for
is greater than the tree's own number,
761:30 - go to the right, as you might infer.
761:32 - So I can just return the
answer to this question.
761:35 - Search my right sub tree
for that same number.
761:38 - And there's a fourth
and final condition.
761:40 - What's the fourth scenario we
have to consider, explicitly?
761:43 - Yeah.
761:44 - AUDIENCE: The number.
761:45 - SPEAKER 1: If the number,
itself, is right there.
761:47 - So else if, the number I'm looking
for equals the tree's own number,
761:50 - then and only then,
should you return true.
761:53 - And if you're thinking
quickly here, there's
761:55 - an optimization possible,
better design opportunity.
761:59 - Think back to even our scratch days.
762:01 - What could we do a little better here?
762:03 - You're pointing at it.
762:04 - AUDIENCE: Else.
762:04 - SPEAKER 1: Exactly.
762:05 - An else suffices.
762:06 - Because if there's logically
only 4 things that could happen,
762:09 - you're wasting your time by asking
a fourth gratuitous question.
762:12 - And else here suffices.
762:13 - So here to, more so than the
Mario example a few weeks ago,
762:16 - there's just this elegance
arguably to recursion.
762:19 - And that's it.
762:20 - This is not pseudocode.
762:21 - This is the code for binary
search on a binary search tree.
762:25 - And so, recursion tends
to work in lockstep
762:27 - with these kinds of data structures
that have this structure to them
762:32 - as we're seeing here.
762:33 - All right.
762:34 - Any questions, then, on binary search
as implemented here with a tree?
762:39 - Yeah.
762:40 - AUDIENCE: About like third years.
762:42 - [INAUDIBLE]
762:47 - SPEAKER 1: Good question.
762:48 - So when returning a Boolean value, true
and false are values that are defined
762:54 - in a library called Standard
Bool, S-T-D-B-O-O-L dot H.
762:57 - With a header file that you can use.
762:59 - It is the case that true is, it's
not well defined what they are.
763:06 - But they would map indeed, yes.
763:08 - To 0 and 1, essentially.
763:09 - But you should not compare
them explicitly to 0 and 1.
763:11 - When you're using true and false, you
should compare them to each other.
763:14 - AUDIENCE: I meant if
it's in a code return.
763:18 - SPEAKER 1: Oh, sorry.
763:19 - So if I am in my own code from
earlier, an avoid function,
763:23 - it is totally fine to return.
763:25 - You just can't return
something explicitly.
763:28 - So return just means that's it.
763:30 - Quit out of this function.
763:31 - You're not actually
handing back a value.
763:33 - So it's a way of short
circuiting the execution.
763:37 - If you don't like that,
and some people do frown
763:39 - upon having code return from functions
prematurely, you could invert the logic
763:44 - and do something like this.
763:45 - If the root does not equal
null, do all of these things.
763:49 - And then, indent all three
of these lines underneath.
763:51 - That's perfectly fine too.
763:52 - I happen to write it
the other way just so
763:54 - that there was explicitly a base case
that I could point to on the screen.
763:58 - Whereas, now, it's
implicitly there for us only.
764:01 - But a good observation too.
764:03 - All right.
764:03 - So let's ask the question as
before about running time of this.
764:07 - It would look like
binary search is back.
764:09 - And we can now do things in logarithmic
time, but we should be careful.
764:15 - Is this a binary search tree?
764:17 - Just to be clear.
764:19 - And again, a binary
search tree is a tree
764:21 - where the root is greater than its left
child and smaller than its right child.
764:28 - That's the essence.
764:29 - So you're nodding your head.
764:30 - You agree?
764:32 - I agree.
764:33 - So this is a binary search tree.
764:35 - Is this a binary search tree?
764:37 - [INTERPOSING VOICES]
764:38 - OK.
764:39 - I'm hearing yeses.
764:40 - Or I'm hearing just my delay
changing the vote it would seem.
764:43 - So this is one of those trick questions.
764:45 - This is a binary search
tree because I've not
764:47 - violated the definition
of what I gave you, right.
764:50 - Is there any example of a left child
that is greater than its parent?
764:56 - Or is there any example of a right
child that's smaller than its parent?
764:59 - That's just the opposite way
of describing the same thing.
765:02 - No, this is a binary search tree.
765:04 - Unfortunately, it also looks like,
albeit at a different axis, what?
765:07 - AUDIENCE: A linked list.
765:08 - SPEAKER 1: A linked list.
765:09 - But you could imagine
this happening, right.
765:11 - Suppose that I hadn't been as
thoughtful as I was earlier
765:14 - by inserting 2, And then 1, and then 3.
765:17 - Which nicely balanced everything out.
765:19 - Suppose that instead, because
of what the user is typing in
765:22 - or whatever you contrive in your
own code, suppose you insert a 1,
765:25 - and then a 2, and then a 3.
765:27 - Like, you've created a
problem for yourself.
765:30 - Because if we follow the same logic
as before, going left or going right,
765:33 - this is how you might implement
a binary search tree accidentally
765:38 - if you just blindly keep
following that definition.
765:42 - I mean, this would be
better designed as what?
765:44 - If we rotated the whole thing around.
765:46 - And that's totally fine.
765:48 - And those kinds of trees
actually have names.
765:50 - There's trees called AVL
trees in computer science.
765:52 - There are red-black black
trees in computer science.
765:54 - There are other types of
trees that, additionally,
765:56 - add some logic that tell you
when you got to pivot the thing,
765:59 - and rotate it, and snip off the
root, and fix things in this way.
766:03 - But a binary search
tree, in and of itself,
766:05 - does not guarantee that it
will be balanced, so to speak.
766:09 - And so, if you consider
the worst case scenario
766:11 - of even using a binary search tree.
766:13 - If you're not smart about
the code you're writing
766:15 - and you just blindly
follow this definition,
766:17 - you might accidentally create a
crazy, long and stringy binary search
766:21 - tree that essentially
looks like a linked list.
766:24 - Because you're not even using
any of the left children.
766:26 - So unfortunately, the literal
answer to the question
766:30 - here is what's the
running time of search?
766:32 - Well, hopefully, log n.
766:34 - But not if you don't maintain
the balance of the tree.
766:37 - Both, in certain search, could actually
devolve into instead of big O of log n,
766:42 - literally, big O of n.
766:44 - If you don't somehow take
into account, and we're not
766:46 - going to do the code for that here.
766:48 - It's a higher level thing you
might explore down the road.
766:51 - It can devolve into something
that you might not have intended.
766:55 - And so, now that we're
talking about 2 dimensions,
766:57 - it's really the onus
is on the programmer
766:59 - to consider what kinds of
perverse situations might happen.
767:01 - Where the thing devolves
into a structure
767:04 - that you don't actually
want it to devolve into.
767:07 - All right.
767:08 - We've got just a few structures to go.
767:09 - Let's go ahead and take one
more 5 minute break here.
767:11 - When we come back,
we'll talk at this level
767:12 - about some final applications of this.
767:14 - See you in 5.
767:15 - All right.
767:17 - So we are back.
767:19 - And as promised, we'll operate
now at this higher level.
767:22 - Where if we take for granted that, even
though you haven't had an opportunity
767:26 - to play with these techniques yet,
you have the ability now in code
767:28 - to stitch things together.
767:30 - Both in a one dimension
and even 2 dimensions,
767:33 - to build things like lists and trees.
767:35 - So if we have these building blocks.
767:37 - Things like now arrays,
and lists, and trees,
767:40 - what if we start to amalgamate
them such that we build things out
767:44 - of multiple data structures?
767:46 - Can we start to get some of the best
of both worlds by way of, for instance,
767:49 - something called a hash table.
767:51 - So a hash table is a Swiss
army knife of data structures
767:55 - in that it's so commonly used.
767:56 - Because it allows you to associate
keys with value, so to speak.
768:01 - So, for instance, it allows you to
associate a username with a password.
768:06 - Or a name with a number.
768:08 - Or anything where you have
to take something as input,
768:11 - and get as output a corresponding
piece of information.
768:13 - A hash table is often a
data structure of choice.
768:16 - And here's what it looks like.
768:17 - It's actually looks like
an array, at first glance.
768:20 - But for discussion's sake, I've
drawn this array vertically,
768:23 - which is totally fine.
768:24 - It's still just an array.
768:26 - But it allows you, a hash table, to
jump to any of these locations randomly.
768:31 - That is instantly.
768:32 - So, for instance, there's actually
26 locations in this array.
768:35 - Because I want to, for
instance, store initially
768:38 - names of people, for instance.
768:41 - And wouldn't it be nice if the
person's name starts with A,
768:44 - I have a go to place for it.
768:45 - Maybe the first box.
768:46 - And if it starts with Z,
I put them at the bottom.
768:48 - So that I can jump
instantly, arithmetically,
768:50 - using a little bit of
Ascii or Unicode fanciness,
768:52 - exactly to the location that
they want to they need to go.
768:56 - So, for instance, here's
our array 0 index.
768:58 - 0 through 25.
768:59 - If I think of this,
though, as A through Z,
769:01 - I'm going to think of
these 26 locations,
769:03 - now in the context of a hash table,
is what we'll generally call buckets.
769:07 - So buckets into which
you can put values.
769:09 - So, for instance, suppose that we
want to insert a value, one name
769:13 - into this data structure.
769:15 - And that name is say, Albus.
769:16 - So Albus starting with A. Albus might
go at the very beginning of this list.
769:21 - All right.
769:21 - And then, we want to
insert another name.
769:23 - This one happens to be Zacharias.
769:25 - Starting with Z, so it goes all
the way at the end of this data
769:28 - structure in location 25 a.k.a.
769:29 - Z.
769:30 - And then, maybe a third name like
Hermione, and that goes at location H
769:34 - according to that
position in the alphabet.
769:36 - So this is great because
in constant time,
769:39 - I can insert and conversely
search for any of these names,
769:43 - based on the first letter of their name.
769:45 - A, or Z, or H, in this case.
769:47 - Let's fast forward and assume we
put a whole bunch of other names--
769:50 - might look familiar,
into this hash table.
769:52 - It's great because every
name has its own location.
769:56 - But if you're thinking of names
you don't yet see it on the screen,
770:00 - we eventually encounter a
problem with this, right.
770:03 - When could something go wrong
using a hash table like this
770:06 - if we wanted to insert even more names?
770:09 - What's going to eventually happen?
770:11 - Yeah.
770:12 - There's already someone with
the first letter, right.
770:14 - Like I haven't even mentioned
Harry, for instance, or Hagrid.
770:17 - And yet, Hermione's
already using that spot.
770:19 - So that invites the
question, well, what happens?
770:21 - Maybe, if we want to insert Harry
next, do we maybe cheat and put him
770:25 - at location I?
770:26 - But then if there's a location
I, where do we put them?
770:28 - And it just feels like the situation
could very quickly devolve.
770:31 - But I've deliberately
drawn this data structure,
770:34 - that I claim as a hash
table, in 2 directions.
770:37 - An array vertically, here.
770:39 - But what might this be hinting
I'm using horizontally,
770:42 - even though I'm drawing the rectangles
a little differently from before?
770:45 - AUDIENCE: An array.
770:46 - SPEAKER 1: Yeah.
770:47 - Maybe another array, to be fair.
770:48 - But, honestly, arrays are such a pain
with the allocating, and reallocating,
770:51 - and so forth.
770:52 - These look like the beginnings
of a linked list, if you will.
770:56 - Where the name is where the number
used to be, even though I'm drawing it
770:59 - horizontally now just
for discussion's sake.
771:01 - And this seems to be a pointer
that isn't pointing anywhere yet.
771:05 - But it looks like the array is 26
pointers, some of which are null,
771:10 - that is empty.
771:11 - Some of which are pointing at
the first node in a linked list.
771:14 - So that's really what a hash
table might be in your mind.
771:16 - An amalgam of an array, whose
elements are linked lists.
771:21 - And in theory, this gives you
the best of both worlds, right.
771:23 - You get random access with
high probability, right.
771:26 - You get to jump immediately to the
location you want to put someone.
771:30 - But, if you run into this perverse
situation where there's someone
771:32 - already there, OK, fine.
771:34 - It starts to devolve into a
linked list, but it's at least 26
771:37 - smaller length lists.
771:39 - Not one massive linked list,
which would be Big O of n.
771:42 - And quite slow to solve.
771:43 - So if Harry gets inserted in Hagrid.
771:46 - Yeah, you have to chain them
together, so to speak, in this way.
771:50 - But, at least you've not
painted yourself into a corner.
771:53 - And in fact, if we fast forward and
put a whole bunch of familiar names in,
771:56 - the data structure
starts to look like this.
771:58 - So the chains not terribly long.
772:00 - And some of them are actually
of size 0 because there's just
772:03 - some unpopular letters of the
alphabet among these names.
772:06 - But it seems better than
just putting everyone
772:08 - in one big array, or
one big linked list.
772:11 - We're trying to balance these trade
offs a little bit in the middle here.
772:15 - Well, how might we represent
something like this?
772:17 - Here's how we could describe this thing.
772:19 - A node in the context of a
linked list could be this.
772:22 - I have an array called
word of type char.
772:26 - And it's big enough to fit the
longest word in the alphabet plus 1.
772:30 - And the plus 1 why, probably?
772:32 - AUDIENCE: The null.
772:33 - SPEAKER 1: The null character.
772:34 - So I'm assuming that longest word
is like a constant defined elsewhere
772:37 - in the story.
772:37 - And it's something big
like 40, 100, whatever.
772:40 - Whatever the longest word
in the Harry Potter universe
772:43 - is or the English dictionary is.
772:45 - Longest word plus 1 should be sufficient
to store any name in the story here.
772:51 - And then, what else does it
each of these nodes have?
772:53 - Well it has a pointer to another node.
772:57 - So here's how we might
implement the notion of a node
772:59 - in the context of storing
not integers, but names.
773:04 - Instead, like this.
773:05 - But how do we decide what
the hash table itself is?
773:08 - Well, if we now have a definition of a
node, we could have a variable in main,
773:12 - or even globally, called hash table.
773:14 - That itself is an array
of node* pointers.
773:20 - That is an array of pointers to nodes.
773:22 - The beginnings of linked lists.
773:24 - Number of buckets is to me.
773:26 - I proposed, verbally, that it be 26.
773:28 - But honestly, if you get a lot
of collisions, so to speak.
773:30 - A lot of H names trying
to go to the same place.
773:33 - Well, maybe, we need to be
smarter and not just look
773:35 - at the first letter of their name.
773:36 - But, maybe, the first and the second.
773:38 - So it's H-A and H-E. But wait, no,
then Harry and Hagrid still collide.
773:42 - But we start to at least make
the problem a little less
773:45 - impactful by tinkering with
something like the number of buckets
773:48 - in a hash table like this.
773:50 - But how do we decide where someone
goes in a hash table in this way?
773:55 - Well, it's an old school
problem of input and output.
773:57 - The input to the problem is going
to be something like the name.
774:00 - And the algorithm in
the middle, as of today,
774:02 - is going to be something
called a hash function.
774:05 - A hash function is
generally something that
774:07 - takes as input, a string, a
number, whatever, and produces
774:10 - as output a location in our context.
774:13 - Like a number 0 through 25.
774:15 - Or 0 through 16,000.
774:16 - Or whatever the number
of buckets you want is,
774:19 - it's going to just tell you where to
put that input at a specific location.
774:23 - So, for instance, Albus, according to
the story thus far, gave me back to 0
774:27 - as output.
774:28 - Zacharias gave me 25.
774:30 - So the hash function, in the
middle of that black box,
774:32 - is pretty simplistic in this story.
774:35 - It's just looking at the Ascii
value, it seems, of the first letter
774:38 - in their name.
774:39 - And then, subtracting
off what capital A is 65.
774:42 - So like doing some math to get
back in number between 0 and 25.
774:46 - So that's how we got to
this point in the story.
774:50 - And how might we, then, resolve
the problem further and use
774:54 - this notion of hashing more generally?
774:56 - Well just for demonstration
sake here, here's
774:58 - actually some buckets, literally.
775:00 - And we've labeled, in advance,
these buckets with the suits
775:03 - from a deck of cards.
775:05 - So we've got some spades.
775:07 - And we've got diamonds here.
775:12 - And we've got, what else here?
775:15 - Clubs and hearts.
775:19 - So we have a deck of cards
here, for instance, right.
775:22 - And this is something you,
yourself, might do instinctively
775:24 - if you're getting ready to
start playing a game of cards.
775:26 - You're just cleaning up or
you want things in order.
775:29 - Like, here is literally
a jumbo deck of cards.
775:31 - What would be the easiest way
for me to sort these things?
775:33 - Well we've got a whole bunch of
sorting algorithms from the past.
775:36 - So I could go through like,
here's the 3 of diamonds.
775:39 - And I could, here let me
throw this up on the screen.
775:41 - Just so, if you're far in back.
775:43 - So here's diamonds.
775:45 - I could put this here.
775:46 - 3, 4.
775:47 - I could do this in order here.
775:49 - But a lot of us, honestly,
if given a deck of cards.
775:52 - And you just want to clean
it up and sort it in order,
775:54 - you might do things like this.
775:56 - Well here's my input, 3 of diamonds,
let's put it in this bucket.
775:59 - 4 of diamonds, this bucket.
776:01 - 5 of diamonds, this bucket.
776:03 - And if you keep going through the cards,
here's seven of hearts, hearts bucket.
776:06 - 8's bucket.
776:08 - Queen of spades over here.
776:10 - And it's still going
to take you 52 steps.
776:12 - But at the end of it, you
have hashed all of the cards
776:15 - into 4 distinct buckets.
776:17 - And now you have problems
of size 13, which
776:19 - is a little more tenable than
doing one massive 52 card problem.
776:23 - You can now do 4, 13 size problems.
776:25 - And so hashing is something that even
you and I might do instinctively.
776:29 - Taking as input some card, some name,
and producing as output some location.
776:34 - A temporary pile in which you
want to stage things, so to speak.
776:39 - But these collisions are inevitable.
776:41 - And honestly, if we kept going
through the Harry Potter universe,
776:44 - some of these chains would get
longer, and longer and longer.
776:47 - Which means that instead of
getting someone's name quickly,
776:50 - by searching for them
or inserting them, might
776:53 - start taking a decent amount of time.
776:55 - So what could we do instead to
resolve situations like this?
776:58 - If the problem, fundamentally, is
that the first letter is just too darn
777:01 - popular, H, we need
to take in more input.
777:04 - Not just the first letter but
maybe the first 2 letters.
777:07 - So if we do that, we
can go from A through Z
777:10 - to something more extreme like maybe
H-A, H-B, H-C, H-D, H-F, and so forth.
777:16 - So that now Harry and Hermione
end up at different locations.
777:20 - But, darn it, Hagrid
still collides with Harry.
777:23 - So it's better than before.
777:24 - The chains aren't quite as long.
777:27 - But the problem isn't
fundamentally gone.
777:28 - And in this case here, anyone
know how many buckets we just
777:32 - increased to, if we now look at not just
a through Z but AA through ZZ, roughly?
777:40 - AUDIENCE: 26 squared.
777:41 - SPEAKER 1: Yeah.
777:42 - OK, good.
777:42 - So the easy answer to
26 squared are 676.
777:46 - So that's a lot more buckets.
777:48 - And this is why I only showed
a few of them on the screen.
777:50 - So that's a lot more.
777:51 - And it spreads things out in particular.
777:54 - What if we take this one step further?
777:56 - Instead of H-A, we do like H-A-A,
H-A-B, H-A-C, H-Z-Z, and so forth.
778:01 - Well now, we have an
even better situation.
778:03 - Because Hermoine has her one spot.
778:05 - Harry has his one spot.
778:07 - Hagrid has his one spot.
778:09 - But there's a trade off here.
778:11 - The upside is now, arithmetically,
we can find their locations
778:14 - in constant time.
778:16 - Maybe, technically 3 steps.
778:17 - But 3 is constant, no matter how many
other names are in here, it would seem.
778:21 - But what's the downside here?
778:24 - Sorry, say again.
778:25 - AUDIENCE: Memory.
778:25 - SPEAKER 1: Memory.
778:26 - So significantly more.
778:27 - We're now up to 17,576 buckets, which
itself isn't that big a deal, right.
778:33 - Computers have a lot
of memory these days.
778:35 - But as you can infer,
I can't really think
778:38 - of someone whose name started with
H-E-Q, for instance, in the Harry
778:43 - Potter universe.
778:44 - And if we keep going,
definitely don't know of anyone
778:46 - whose name started with
Z-Z-Z or A-A-A. There's
778:49 - a lot of not useful combinations
that have to be there mathematically,
778:54 - so that you can do a bit of math
and jump to randomly, so to speak,
778:58 - the precise location.
778:59 - But they're just going to be empty.
779:01 - So it's a very sparsely
populated array, so to speak.
779:04 - So what does that really mean
for performance, ultimately?
779:08 - Well let's consider, again, in
the context of our Big O notation.
779:10 - It turns out that a hash
table, technically speaking,
779:14 - is still just going to give us
Big O of n in the worst case.
779:18 - Why?
779:18 - If you have some crazy perverse
case where everyone in the universe
779:21 - has a name that starts with A, or
starts with H, or starts with Z,
779:25 - you just get really unlucky.
779:26 - And your chain is massively long.
779:28 - Well then, at that point,
it's just a linked list.
779:30 - It's not a hash table.
779:31 - It's like the perverse
situation with the tree, where
779:33 - if you insert it without any mind for
keeping it balance, it just evolves.
779:39 - But there's a difference here
between a theoretical performance
779:43 - and an actual performance.
779:45 - If you look back at the
the hash table here,
779:48 - this is absolutely, in practice, going
to be faster than a single linked list.
779:55 - Mathematically, asymptotically,
big O notation, sure.
779:58 - It's all the same.
779:59 - Big O of n.
780:00 - But if what we're really caring about
is real humans using our software,
780:03 - there's something to be said
for crafting a data structure.
780:06 - That technically, if this data
were uniformly distributed,
780:09 - is 26 times faster than
a linked list alone.
780:12 - And so, there's this tension too
between systems, types of CS,
780:18 - and theoretical CS.
780:19 - Where yeah, theoretically,
these are all the same.
780:21 - But in practice, for
making real-world software,
780:24 - improving this speed by a factor of 26
in this case, let alone 576 or more,
780:29 - might actually make a big difference.
780:31 - But there's going to be a trade off.
780:33 - And that's typically some other
resource like giving up more space.
780:37 - All right.
780:37 - How about another data
structure we could build.
780:40 - Let me fast forward to
something here called a trie.
780:43 - So a trie, a weird
name in pronunciation.
780:46 - Short for retrieval,
pronounced trie typically.
780:49 - A trie is a tree that actually
gives us constant time lookup,
780:55 - even for massive data sets.
780:58 - What do I mean by this?
780:59 - In the world of a trie, you
create a tree out of arrays.
781:04 - So we're really getting into
the Frankenstein territory
781:07 - of just building things up with
spare parts of data structures
781:09 - that we have here.
781:10 - But the root of a trie
is, itself, an array.
781:13 - For instance, of size 26.
781:16 - Where each element in that
trie points to another node,
781:22 - which is to say another array.
781:23 - And each of those locations in
the array represents a letter
781:26 - of the alphabet like A through Z.
781:28 - So for instance, if you wanted to store
the names of the Harry Potter universe,
781:32 - not in a hash table, not in a linked
list, not in a tree, but in a trie.
781:36 - What you would do is hash on every
letter in the person's name one
781:41 - at a time.
781:42 - So a trie is like a multi-tier
hash table, in a sense.
781:45 - Where you first look
at the first letter,
781:47 - then the second letter, then the
third, and you do the following.
781:49 - For instance, each of these
locations represents a letter A
781:53 - through Z. Suppose I wanted to
insert someone's name into this
781:56 - that starts with the letter
H, like Hagrid for instance.
782:01 - Well, I go to the location
H. I see it's null,
782:03 - which means I need to malloc myself
another node or another array.
782:06 - And that's depicted here.
782:08 - Then, suppose I want to store the
second letter in Hagrid's name,
782:12 - an A. So I go to that
location in the second node.
782:14 - And I see, OK, it's currently null.
782:16 - There's nothing below it.
782:17 - So I allocate another node
using malloc or the like.
782:19 - And now I have H-A-G. And
I continue this with R-I-D.
782:24 - And then, when I get to the
bottom of this person's name,
782:27 - I just have to indicate
here in color, but probably
782:30 - with a Boolean value or something.
782:31 - Like a true value that
says, a name stops here.
782:35 - So that it's clear that the person's
name is not H-A, or H-A-G, or H-A-G-R,
782:41 - or H-A-G-R-I. It's H-A-G-R-I-D.
And the D is green,
782:45 - just to indicate there's like some
other Boolean value that just says, yes.
782:49 - This is the node in
which the name stops.
782:52 - And if I continue this logic, here's
how I might insert someone like Harry.
782:57 - And here's how I might
insert someone like Hermione.
783:00 - And what's interesting about the
design here is that some of these names
783:05 - share a common prefix.
783:07 - Which starts to get compelling
because you're reusing space.
783:10 - You're using the same nodes
for names like H-A-G and H-A-R
783:15 - because they share H and an A in common.
783:17 - And they all share an H in common.
783:20 - So you have this data structure
now that, itself, is a tree.
783:23 - Each node in the tree
is, itself, an array.
783:27 - And we, therefore, might implement
this thing using code like this.
783:31 - Every node is containing, I'll
do it in reverse order, an array.
783:36 - I'll call it children because
that's what it really represents.
783:39 - Up to 26 children for
each of these nodes.
783:41 - Size of the alphabet.
783:42 - So I might have used just
a constant for number 26,
783:45 - to give myself 26
letters of the alphabet.
783:47 - And each of those arrays
stores that many node stars.
783:52 - That many pointers to another node.
783:54 - And here's an example of the Bool.
783:55 - This is what I represented in
green on the slide a moment ago.
783:58 - I also need another piece of data.
784:00 - Just a 0 or 1, a true
or false, that says yes.
784:03 - A name stops in this node or it's just
a path to the rest of the person's name.
784:08 - But the upside of this is
that the height of this tree
784:12 - is only as tall as the
person's longest name.
784:15 - H-A-G-R-I-D or H-E-R-M-O-I-N-E. And
notice that no matter how many other
784:22 - people are in this data structure,
there's 3 at the moment,
784:26 - if there were 3 million, it would
still take me how many steps to search
784:30 - for Hermoine?
784:31 - H-E-R-M-I-O-N-E. So, 8 steps total.
784:37 - No matter if there's 2 other people,
2 million, 10 million other people.
784:42 - Because the path to her name
is always on the same path.
784:46 - And if you assume that there's a
maximum limit on the length of names
784:51 - in the human world.
784:51 - Maybe it's 40, 100, whatever.
784:53 - Whatever the longest
name in the world is.
784:55 - That's constant.
784:56 - Maybe it's 40, 100, but that's constant.
784:59 - Which is to say that with a
trie, technically speaking,
785:02 - it is the case that your lookup
time, Big O of n, a big O notation,
785:06 - would be big O of 1.
785:09 - It's constant time, because
unlike every other data structure
785:12 - we've looked at, with a trie, the amount
of time it takes you to find one person
785:16 - or insert one person is
completely independent of how
785:20 - many other pieces of data are
already in the data structure.
785:24 - And this holds true even if one
name is a prefix of another.
785:27 - I don't think there was a Daniel or
Danielle in the Harry Potter universe
785:30 - that I could think of.
785:31 - But, D-A-N-I-E-L could be one name.
785:35 - And, therefore, we have
a true there in green.
785:38 - And if there's a longer
name like Danielle.
785:40 - Then, you keep going
until you get to the E.
785:42 - So you can still have with
a trie, one name that's
785:45 - a substring of another name.
785:47 - So it's not as though we've
created a problem there.
785:49 - That, too, is still possible.
785:51 - But at the end of the day, it only
takes a finite number of steps
785:54 - to find any of these people.
785:55 - And again, that's what's
particularly compelling.
785:58 - That you effectively have
constant time lookup.
786:00 - So that's amazing, right.
786:01 - We've gone through this whole story
for weeks now of like, linear time.
786:05 - And then, it went up to n squared.
786:07 - And then, log n.
786:07 - And now constant time, what's the price
paid for a data structure like this?
786:12 - This so-called trie?
786:16 - What's the downside here?
786:17 - There's got to be a catch.
786:19 - And in fact, tries are not
actually used that often,
786:21 - amazing as they might sound
on some CS level here.
786:24 - AUDIENCE: Memory.
786:25 - SPEAKER 1: Memory.
786:27 - In what sense?
786:28 - AUDIENCE: Much like a [INAUDIBLE].
786:30 - SPEAKER 1: Exactly.
786:31 - If you're storing all
of these darn arrays
786:33 - it's, again, a sparsely
populated data structure.
786:36 - And you can see it here.
786:37 - Granted there's only 3 names, but most
of those boxes, most of those pointers,
786:41 - are going to remain null.
786:42 - So this is an incredibly wide
data structure, if you will.
786:46 - It uses a huge amount of
memory to store the names.
786:48 - But again, you've got to pick a lane.
786:50 - Either you're going to minimize space
or you're going to minimize time.
786:53 - It's not really possible to get
truly the best of both worlds.
786:56 - You have to decide where
the inflection point is
786:58 - for the device you're writing
software for, how much memory it has,
787:01 - how expensive it is.
787:02 - And again, taking all of
these things into account.
787:06 - So lastly, let's do one
further abstraction.
787:08 - So even higher level to discuss
something that are generally
787:12 - known as abstract data structures.
787:14 - It turns out we could
spend like all day,
787:16 - all week, talking about
different things we
787:17 - could build with these data structures.
787:19 - But for the most part,
now that we have arrays.
787:21 - Now that we have linked lists
or their cousin's trees, which
787:23 - are 2-dimensional.
787:24 - And beyond that, there's
even graphs, where
787:26 - the arrows can go in multiple
directions, not just down, so to speak.
787:29 - Now that we have this ability
to stitch things together,
787:32 - we can solve all different
types of problems.
787:34 - So, for instance, a very
common type of data structure
787:38 - to use in a program, or even our
human world, are things called queues.
787:42 - A queue being a data structure
like a line outside of a store.
787:46 - Where it has what's
called a FIFO property.
787:48 - First In, First Out.
787:49 - Which is great for fairness,
at least in the human world.
787:52 - And if you've ever waited outside
of Tasty Burger, or Salsa Fresca,
787:56 - or some other restaurant
nearby, presumably,
787:58 - if you're queuing up at
the counter, you want
788:01 - them store to maintain a FIFO system.
788:03 - First in and first out.
788:05 - So that whoever's first in line gets
their food first and gets out first.
788:08 - So a queue is actually a
computer science term, too.
788:12 - And even if you're still in the
habit of printing things on paper,
788:14 - there are things you might
have heard called printer
788:17 - queues, which also do things in order.
788:19 - The first person to send
their essay to the printer
788:21 - should, ideally, be printed
before the last person
788:24 - to send their essay to the printer.
788:26 - Again, in the interest of fairness.
788:28 - But how can you implement a queue?
788:29 - Well, you typically have to
implement 2 fundamental operations,
788:32 - enqueue and dequeue.
788:34 - So adding something to it and
removing something from it.
788:37 - And the interesting thing here is
that how do you implement a queue?
788:41 - Well in the human world, you would
just have literally physical space
788:44 - for humans to line up from left
to right, or right to left.
788:46 - Same in a computer.
788:47 - Like a printer queue, if you send a
whole bunch of jobs to be printed,
788:50 - a whole bunch of essays
or documents, well, you
788:52 - need a chunk of memory like an array.
788:54 - All right.
788:55 - Well, if you use an
array, what's a problem
788:57 - that could happen in the world
of printing, for instance?
789:01 - If you use an array to store all of
the documents that need to be printed.
789:04 - AUDIENCE: It can be filled.
789:05 - SPEAKER 1: It could be filled, right.
789:07 - So if the programmer decided, HP or
whoever makes the printer decides,
789:10 - oh, you can send like a megabyte worth
of documents to this printer at once.
789:14 - At some point you might
get an error message,
789:16 - which says, sorry out of memory.
789:17 - Wait a few minutes.
789:18 - Which is maybe a reasonable
solution, but a little annoy.
789:20 - Or HP could write code that maybe
dynamically resizes the array
789:24 - or so forth.
789:25 - But at that point, maybe they
should just use a linked list.
789:27 - And they could.
789:28 - So there, too, you could
implement the notion of a queue
789:32 - using a linked list instead.
789:33 - You're going to spend more
memory, but you're not
789:35 - going to run out of space in your array.
789:38 - Which might be more compelling.
789:39 - This happens even in the physical world.
789:41 - You go to the store and you start having
to line up outside and down the road.
789:45 - And like, for a really busy store,
they run out of space so they make do.
789:49 - But in that case, it tends to
be more of an array just because
789:51 - of the physical notion
of humans lining up.
789:54 - But there's other data structures, too.
789:56 - If you've ever gone to the dining hall
and picked up like a Harvard or Yale
789:59 - tray, you're typically picking up
the last tray that was just cleaned,
790:04 - not the first tray that was cleaned.
790:06 - Why?
790:06 - Because these cafeteria trays
stack up on top of each other.
790:10 - And indeed a stack is another
type of abstract data structure.
790:13 - In the physical world, it's
literally something physical
790:16 - like a stack of trays.
790:18 - Which have what we would
call a LIFO property.
790:21 - Last In, First Out.
790:22 - So as these things
come out of the washer,
790:24 - they're putting the most
recent ones on the top.
790:27 - And then you, the human, are probably
taking the most recently cleaned one.
790:30 - Which means in the
extreme, no one on campus
790:33 - might ever use that very first tray.
790:36 - Which is probably fine
in the world of trays,
790:38 - but would really be bad in the world of
Tasty Burger lining up for food if LIFO
790:42 - were the property being implemented.
790:44 - But here, too, it could be an array.
790:46 - It could be a linked list.
790:47 - And you see this, honestly, every day.
790:49 - If you're using Gmail
and your Gmail inbox.
790:51 - That is actually a stack,
at least by default,
790:53 - where your newest message
last in are the first ones
790:57 - at the top of the screen.
790:58 - That's a LIFO data structure.
791:00 - And it means that you see
your most recent emails.
791:02 - But if you have a busy day,
you're getting a lot of emails,
791:04 - it might not be a good thing.
791:05 - Because now you're ignoring
the people who wrote you
791:08 - way earlier in the day or the week.
791:10 - So LIFO and FIFO are
just properties that you
791:13 - can achieve with these very
specific types of data structures.
791:15 - And the parliaments
in the world of stacks
791:17 - is to push something onto a
stack or pop something out.
791:21 - These are here, for instance,
as an example of why
791:23 - might you always wear the same color.
791:24 - Well, if you're storing all
of your clothes in a stack,
791:27 - you might not ever get
to the different colored
791:29 - clothes at the bottom of the list.
791:30 - And in fact, to paint this picture,
we have a couple of minute video here.
791:35 - Just to paint this here, made
by a faculty member elsewhere.
791:38 - Let's go ahead and dim the lights
for just a minute or 2 here.
791:41 - So that we can take a look
at Jack learning some facts.
791:45 - [VIDEO PLAYING]
791:46 - SPEAKER 2: Once upon a time,
there was a guy named Jack.
791:48 - When it came to making friends
Jack did not have the knack.
791:52 - So Jack went to talk to the
most popular guy he knew.
791:55 - He went up to Lou and
asked, what do I do?
791:57 - Lou saw that his friend
was really distressed.
792:00 - Well, Lou began, just
look how you're dressed.
792:03 - Don't you have any clothes
with a different look?
792:05 - Yes, said Jack.
792:06 - I sure do.
792:08 - Come to my house and
I'll showed them to you.
792:10 - So they went off the Jack's.
792:11 - And Jack showed Lou the box, where he
kept all his shirts, and his pants,
792:15 - at his socks.
792:16 - Lou said, I see you have
all your clothes in a pile.
792:19 - Why don't you wear some
others once in a while?
792:21 - Jack said, well, when I
remove clothes and socks,
792:24 - I wash them and put
them away in the box.
792:27 - Then comes the next
morning and up I hop.
792:30 - I go to the box and get
my clothes off the top.
792:33 - Lou quickly realized
the problem with Jack.
792:36 - He kept clothes, CDs,
and books in a stack.
792:38 - When he'd reached for
something to read or to wear,
792:41 - he chose a top book or underwear.
792:44 - Then when he was done he
would put it right back.
792:46 - Back it would go on top of the stack.
792:48 - I know the solution,
said a triumphant Lou.
792:51 - You need to learn to
start using a queue.
792:53 - Lou took Jack's clothes
and hung them in a closet.
792:56 - And when he had emptied
the box, he just tossed it.
792:59 - Then he said, now Jack, at the end of
the day, put your clothes on the left
793:03 - when you put them away.
793:04 - Then tomorrow morning when
you see the sunshine, get
793:07 - your clothes from the right,
from the end of the line.
793:10 - Don't you see, said
Lou, it will be so nice.
793:13 - You'll wear everything once
before you wear something twice.
793:16 - And with everything in queues
in his closet and shelf,
793:19 - Jack started to feel
quite sure of himself.
793:22 - All thanks to Lou and
his wonderful queue.
793:26 - SPEAKER 1: So just to help you realize
that these things are everywhere.
793:29 - [AUDIENCE CLAPPING]
793:32 - Even in our human world.
793:33 - If you've ever lined up at this place.
793:35 - Anyone recognize this?
793:37 - OK, so sweetgreen, little
salad place in the square.
793:40 - This is if you order
online or in advance,
793:42 - your food ends up according to
the first letter in your name.
793:44 - Which actually sounds awfully
reminiscent of something
793:46 - like a hash table.
793:47 - And in fact, no matter whether
you implement a hash table like we
793:50 - did, with an array and linked list.
793:52 - Or with 3 shelves like this.
793:54 - This is actually an abstract
data type called a dictionary.
793:57 - And a dictionary, just like in our
human world, has keys and values.
794:01 - Words and their definitions.
794:02 - This just has letters of the
alphabet and salads as their value.
794:07 - But here, too, there's
a real world constraint.
794:09 - In what kind of scenario does
this system at sweetgreen
794:13 - devolve into a problem, for instance?
794:15 - Because they, too, are using only
finite space, finite storage.
794:19 - What could go wrong?
794:20 - Yeah.
794:20 - AUDIENCE: Run out of space.
794:21 - SPEAKER 1: Yeah.
794:22 - If they run out of space
on the shelf and there's
794:23 - a lot of people whose names
start with D, or E, or whatever.
794:25 - And so, they just pile up.
794:26 - And then, maybe, they kind of
overflow into the E's or the F's.
794:29 - And they probably don't
really care because any human
794:31 - is going to come by, and just
eyeball it, and figure it out anyway.
794:33 - But in the world of a
computer, you're the one coding
794:36 - and have to be ever so precise.
794:38 - We thought we would lastly
do one final thing here.
794:41 - In advance, we prepared a linked
list of sorts in the audience.
794:45 - Since this has become a bit of a thing.
794:47 - I am starting to represent the
beginning of this linked list.
794:50 - And so far as I have a pointer
here with seat location G9.
794:54 - Whoever is in G9, would
you mind standing up?
794:57 - And what letter is on your sheet there?
795:00 - AUDIENCE: F15.
795:01 - SPEAKER 1: OK, so you
have S15 and your letter--
795:04 - AUDIENCE: F15.
795:04 - SPEAKER 1: Say again?
795:05 - AUDIENCE: F.
795:06 - SPEAKER 1: F15.
795:07 - So I see you're holding
a C in your node.
795:09 - You are pointing to, if
you could physically, F15.
795:12 - F15, what do you hold?
795:14 - AUDIENCE: S.
795:15 - SPEAKER 1: You have an S. And
who should you be pointing at?
795:17 - AUDIENCE: F5.
795:18 - SPEAKER 1: F5.
795:19 - Could you stand up, F5.
795:20 - You're holding a 5, I see.
795:22 - What address?
795:23 - AUDIENCE: F12.
795:24 - SPEAKER 1: F12.
795:25 - Big finale.
795:26 - F12, if you'd like to stand up holding
a 0 and null, which means that was CS50.
795:30 - [AUDIENCE CLAPPING]
795:34 - All right.
795:34 - We'll see you next time.
795:36 - [MUSIC PLAYING]
796:54 - DAVID J. MALAN: All right, this is
CS50, and this is already week 6.
796:58 - And this is the week in which
you learn yet another language.
797:00 - But the goal is not just to
teach you another language,
797:03 - for languages sake,
as we transition today
797:06 - and in the coming weeks from C, where
we've spent the past several weeks, now
797:09 - to Python.
797:09 - The goal ultimately is to teach you all
how to teach yourselves new languages,
797:14 - so that by the end of this
course, it's not in your mind,
797:16 - the fact that you learned
how to program in C
797:19 - or learned some weeks back
how to program in Scratch,
797:21 - but really how you learned
how to program fundamentally,
797:24 - in a paradigm known as
procedural programming,
797:27 - as well as with some taste
today, and in the weeks to come,
797:29 - of other aspects of
programming languages,
797:31 - like object-oriented
programming, and more.
797:34 - So recall, though, back
in week zero, Hello, world
797:36 - looked a little something like this.
797:38 - And the world was quite simple.
797:39 - All you had to do was drag
and drop these puzzle pieces.
797:42 - But there were still functions and
conditionals and loops and variables
797:45 - and all of those kinds of primitives.
797:47 - We then transitioned, of course,
to a much more arcane language that
797:50 - looked a little something like this.
797:52 - And even now, some weeks
later, you might still
797:54 - be struggling with some of the
syntax or getting annoying bugs
797:56 - when you try to compile your
code, and it just doesn't work.
797:59 - But there, too, the
past few weeks, we've
798:01 - been focusing on functions and loops
and variables, conditionals, and really
798:04 - all of those same ideas.
798:06 - And so what we begin to do today
is to, one, simplify the language
798:10 - we're using, transitioning from C now
to Python, this now being the equivalent
798:15 - program in Python, and look
at its relative simplicity,
798:18 - but also transitioning
to look at how you
798:20 - can implement these
same kinds of features,
798:22 - just using a different language.
798:23 - So we're going to see
a lot of code today.
798:25 - And you won't have nearly as much
practice with Python as you did with C.
798:29 - But that's because so many of the
ideas are still going to be with us.
798:32 - And, really, it's going to be a
process of figuring out, all right,
798:35 - I want to do a loop.
798:35 - I know how to do it in C.
How do I do this in Python?
798:38 - How do I do the same with conditionals?
798:39 - How do I declare
variables, and the like,
798:41 - and moving forward, not just in
CS50, but in life in general,
798:43 - if you continue programming and learn
some other language after the class,
798:47 - if in 5-10 years, there's a new, more
popular language that you pick up,
798:50 - it's just going to be a
matter of googling and looking
798:53 - at websites like Stack
Overflow and the like,
798:54 - to look at just basic building
blocks of programming languages,
798:57 - because you already speak,
after these past 6 plus weeks,
799:01 - you already speak programming
itself fundamentally.
799:04 - All right, so let's do a few quick
comparisons, left and right, of what
799:07 - something might have
looked like in Scratch,
799:09 - and what it then looked
like in C, but now,
799:11 - as of today, what it's going
to look like in Python.
799:13 - Then we'll turn our attention
to the command line,
799:15 - ultimately, in order to
implement some actual programs.
799:19 - So in Scratch, we had
functions like this, say Hello,
799:22 - world, a verb or an action.
799:23 - In C it looked a little
something like this,
799:26 - and a bit of a cryptic mess the
first week, you had the printf,
799:29 - you had the double quotes.
799:30 - You had the semicolon, the parentheses.
799:32 - So there's a lot more syntax
just to do the same thing.
799:34 - We're not going to get rid of all
of that syntax now, but as of today,
799:37 - in Python, that same statement is going
to look a little something like this.
799:42 - And just to perhaps call
out the obvious, what
799:44 - is different or, now, simpler
in Python versus C, even
799:48 - in this simple example here?
799:50 - Yeah.
799:51 - AUDIENCE: Now print, instead of
printf would be, something like that.
799:53 - DAVID J. MALAN: Good, so it's
now print instead of printf.
799:56 - And there's also no semicolon.
799:57 - And there's one other
subtlety, over here.
799:59 - AUDIENCE: No new line.
800:00 - DAVID J. MALAN: Yeah,
so no new line, and that
800:02 - doesn't mean it's not
going to be printed.
800:03 - It just turns out that one
of the differences we'll see
800:05 - is that, with print, you
get the new line for free.
800:08 - It automatically gets outputted by
default, being sort of a common case.
800:11 - But you can override it,
we'll see, ultimately, too.
800:13 - How about in Scratch?
800:14 - We had multiple functions like
this, that not only said something
800:18 - on the screen, but
also asked a question,
800:20 - thereby being another function that
returned a value, called answer.
800:23 - In C we saw code that
looked a little something
800:26 - like this, whereby that first line
declares a variable called answer,
800:29 - sets it equal to the
return value of getString,
800:32 - one of the functions
from the CS50 library,
800:34 - and then the same double quotes
and parentheses and semicolon.
800:37 - Then we had this format code
in C that allowed us, with %S,
800:41 - to actually print out that same value.
800:44 - In Python, this, too, is going
to look a little bit simpler.
800:46 - Instead, we're going to have
answer equals getString,
800:49 - quote unquote "What's your
name," and then print,
800:52 - with a plus sign and a
little bit of new syntax.
800:55 - But let's see if we can't just
infer from this example what
800:58 - it is that's going on.
800:59 - Well, first missing on the left is what?
801:02 - To the left of the equal sign,
there's no what this time?
801:05 - Feel free to just call it out.
801:06 - AUDIENCE: Type.
801:07 - DAVID J. MALAN: So there's no type.
801:07 - There's no type, like
the word string, which
801:10 - even though that was a type in
CS50, every other variable in C
801:14 - did we use Int or string or
float, or Bool or something else.
801:17 - In Python, there are still
going to be data types,
801:20 - today onward, but you,
the programmer, don't
801:22 - have to bother telling the
computer what types you're using.
801:25 - The computer is going
to be smart enough,
801:27 - the language, really, is going to be
smart enough, to just figure it out
801:29 - from context.
801:30 - Meanwhile, on the right
hand side, getString
801:32 - is going to be a
function we'll use today
801:34 - and this week, which comes from a
Python version of the CS50 library.
801:37 - But we'll also start to take off
those training wheels, so that you'll
801:40 - see how to do things without
any CS50 library moving forward,
801:44 - using a different function instead.
801:45 - As before, no semicolon, but the rest
of the syntax is pretty much the same
801:49 - here.
801:49 - This starts, of course, to get
a little bit different, though.
801:52 - We're using print instead of printf.
801:54 - But now, even though this
looks a little cryptic,
801:57 - perhaps, if you've never
programmed before CS50,
801:59 - what might that plus be doing,
just based on inference here.
802:03 - What do you think?
802:04 - AUDIENCE: Adding answer
to the string Hello.
802:08 - DAVID J. MALAN: Yeah, so adding
answer to the string Hello,
802:11 - and adding, so to speak,
not mathematically,
802:13 - but in the form of joining
them together, much like we
802:16 - saw the joined block in Scratch, or
concatenation was the term of art
802:19 - there.
802:20 - This plus sign appends,
if you will, whatever's
802:23 - in answer to whatever is quoted here.
802:25 - And I deliberately left a space
there, so that grammatically it
802:27 - looks nice, after the comma as well.
802:29 - Now there's another way to do this.
802:31 - And it, too, is going to
look cryptic at first glance.
802:33 - But it just gets easier and
more convenient over time.
802:36 - You can also change this second
line to be this, instead.
802:41 - So what's going on here.
802:42 - This is actually a relatively new
feature of Python in the past couple
802:45 - of years, where now what
you're seeing is, yes,
802:47 - a string, between these
same double quotes,
802:50 - but this is what Python would
call a format string, or Fstring.
802:53 - And it literally starts with the letter
F, which admittedly looks, I think,
802:56 - a little weird.
802:57 - But that just indicates
that Python should
803:01 - assume that anything inside of
curly braces inside of the string
803:05 - should be interpolated, so to
speak, which is a fancy term saying,
803:09 - substitute the value of
any variables therein.
803:12 - And it can do some other things as well.
803:14 - So answer is a variable, declared,
of course, on this first line.
803:18 - This Fstring, then, says to Python,
print out Hello comma space, and then
803:22 - the value of Answer.
803:24 - If, by contrast, you
omitted the curly braces,
803:28 - just take a guess, what would happen?
803:30 - What would the symptom of that
bug be, if you accidentally
803:33 - forgot the curly braces, but
maybe still had the F there?
803:36 - AUDIENCE: It would print below it, too.
803:38 - DAVID J. MALAN: Yeah, it would literally
print Hello, comma answer, because it's
803:40 - going to take you literally.
803:41 - So the curly braces just kind
of allow you to plug things in.
803:44 - And, again, it looks
a little more cryptic,
803:45 - but it's just going to
save us time over time.
803:47 - And if any of you programmed in
Java in high school, for instance,
803:50 - you saw plus in that context,
too, for concatenation.
803:53 - This just kind of makes your code a
little tighter, a little more succinct.
803:56 - So it's a convenient
feature now in Python.
803:58 - All right, this was an example
in Scratch of a variable,
804:00 - setting a variable like
counter equal to 0.
804:03 - In C it looked like this, where
you specify the type, the name,
804:06 - and then the value, with a semicolon.
804:08 - In Python, it's going to look like this.
804:11 - And I'll state the obvious here.
804:12 - You don't need to mention the
type, just like before with string.
804:15 - And you don't need a semicolon.
804:17 - So it's a little simpler.
804:18 - If you want a variable, just write
it and set it equal to some value.
804:21 - But the single equal sign
still behaves the same as in C.
804:24 - Suppose we wanted to
increment counter by one.
804:26 - In Scratch, we use
this puzzle piece here.
804:29 - In C, we could do this, actually,
in a few different ways.
804:31 - There was this way, if
counter already exists,
804:33 - you just say counter
equals counter plus 1.
804:36 - There was the slightly less verbose
way, where you could say, oops, sorry.
804:41 - Let me do the first sentence first.
804:42 - In Python, that same
thing, as you might guess,
804:45 - is actually going to be almost the
same, you just throw away the semicolon.
804:48 - And the mathematics are ultimately
the same, copying from right to left,
804:51 - via the assignment operator.
804:53 - Now, recall, in C, that
we had this shorthand
804:56 - notation, which did the same thing.
804:58 - In Python, you can similarly do the same
thing, just no need for the semicolon.
805:03 - The only step backwards
we're taking, if you
805:05 - were a big fan of counter plus
plus, that doesn't exist in Python,
805:10 - nor minus minus.
805:11 - You just can't do it.
805:12 - You have to do the plus equals 1
or plus/minus or minus equals 1
805:16 - to achieve that same result. All
right, how about in Python 2?
805:20 - Here in Scratch, recall,
was a conditional,
805:22 - asking a silly question like is x less
than y, and if so, just say as much.
805:26 - In C, that looked a little
something like this, printf and if
805:30 - with the parentheses, the curly
braces, the semicolon, and all of that.
805:33 - In Python, this is going to get a
little more pleasant to type, too.
805:37 - It's going to be just this.
805:39 - And if someone wants to call out
some of the obvious changes here,
805:42 - what has been simplified now in Python
for a conditional, it would seem?
805:46 - Yeah, what's missing, or changed?
805:48 - AUDIENCE: Braces.
805:48 - DAVID J. MALAN: So no curly braces.
805:49 - AUDIENCE: Colon is back.
805:51 - DAVID J. MALAN: I'm sorry?
805:51 - AUDIENCE: Using the colon instead.
805:53 - DAVID J. MALAN: And we're
using the colon instead.
805:55 - So I got rid of the
curly braces in Python.
805:57 - But I'm using a colon instead.
805:58 - And even though this is
a single line of code,
806:00 - so long as you indent subsequent
lines along with the printf,
806:04 - that's going to imply that everything,
if the if condition is true,
806:09 - should be executed below it, until you
start to un-indent and start writing
806:13 - a different line of code altogether.
806:14 - So indentation in Python is important.
806:17 - So this is among the reasons
we've emphasized axes like style,
806:21 - just how well styled your code is.
806:23 - And honestly, we've seen,
certainly, in office hours,
806:25 - and you've seen in your own code,
sort of a tendency sometimes
806:28 - to be a little lax when it
comes to indentation, right?
806:31 - If you're one of those folks
who likes to indent everything
806:34 - on the left hand side of the window,
yeah, it might compile and run.
806:37 - But it's not particularly
readable by you or anyone else.
806:41 - Python actually addresses this
by just requiring indentation,
806:45 - when logically needed.
806:46 - So Python is going to force you to start
inventing properly now, if that's been,
806:50 - perhaps, a tendency otherwise.
806:53 - What else is missing?
806:54 - Well, we have no semicolon here.
806:55 - Of course, it's print instead of printf.
806:57 - But otherwise, those seem to
be the primary differences.
807:00 - What about something larger in Scratch?
807:02 - If an if-else block, like
this, you can perhaps
807:05 - guess what it's going to look like.
807:06 - In C it looks like this, curly
braces semicolons, and so forth.
807:10 - In Python, it's going to now
look like this, almost the same,
807:14 - but indentation is important.
807:15 - The colons are important.
807:16 - And there's one other difference
that's now again visible here,
807:19 - but we didn't call it out a second ago.
807:21 - What else is different in Python
versus C for these conditionals?
807:24 - Yeah.
807:24 - AUDIENCE: You don't have any
parentheses around the condition.
807:27 - DAVID J. MALAN: Perfect.
807:28 - We don't have any parentheses
around the condition,
807:30 - the Boolean expression itself.
807:32 - And why not?
807:33 - Well, it's just simpler to type.
807:34 - It's less to type.
807:35 - You can still use parentheses.
807:36 - And, in fact, you might
want to or need to,
807:39 - if you want to combine thoughts and
do this and that, or this or that.
807:43 - But by default, you no longer need
or should have those parentheses.
807:47 - Just say what you mean.
807:48 - Lastly, with conditionals,
we had something like this,
807:50 - an if else if else statement.
807:53 - In C, it looked a little
something like this.
807:55 - In Python, it's going to
get really tighter now.
807:57 - It's just if, and this is the
curiosity, elif x greater than y.
808:02 - So it's not else if, it's literally
one keyword, elif, and the colons
808:07 - remain now on each of the three lines.
808:09 - But the indentation is important.
808:11 - And if we did want to
do multiple things,
808:13 - we could just indent below each
of these conditionals, as well.
808:16 - All right, let me pause
there first, to see
808:18 - if there's any questions on
these syntactic differences.
808:21 - Yeah.
808:21 - AUDIENCE: My thought is
maybe like, it's good,
808:24 - though, does it matter if there's
this in between thing like that, but
808:27 - and why.
808:28 - DAVID J. MALAN: In between,
between what and what?
808:31 - AUDIENCE: So like the left-hand
side and like the right side spaces?
808:34 - DAVID J. MALAN: Ah, good
question, is Python sensitive
808:38 - to spaces and where they go?
808:40 - Sometimes no, sometimes
yes, is the short answer.
808:42 - Stylistically, though, you should be
practicing what we're preaching here,
808:46 - whereby you do have spaces to the
left and right of binary operators,
808:50 - that they're called,
something like less than
808:52 - or greater than is a binary
operator, because there's
808:54 - two operands to the left
and to the right of them.
808:57 - And in fact, in Python,
more so than the world of C,
809:00 - there's actually formal
style conventions.
809:02 - Not only within CS50 have we had a
style guide on the course's website,
809:07 - for instance, that just dictates how you
should write your code so that it looks
809:10 - like everyone else's.
809:11 - In the Python community, they
take this one step further,
809:13 - and there's an actual standard whereby
you don't have to adhere to it,
809:17 - but generally speaking, in the real
world, someone would reprimand you,
809:20 - would reject your code, if you're trying
to contribute it to another project,
809:23 - if you don't adhere to these standards.
809:25 - So while you could be lax
with some of this white space,
809:28 - do make things readable.
809:29 - And that's Python theme, for the
code to be as readable as possible.
809:33 - All right, so let's take a look
at a couple of other constructs
809:35 - before transitioning
to some actual code.
809:37 - This, of course, in Scratch
was a loop, meowing forever.
809:40 - In C, the closest we could get was
doing something while true, because true
809:44 - never changes.
809:45 - So it's sort of a simple way
of just saying do this forever.
809:48 - In Python, it's pretty
much the same thing,
809:51 - but a couple of small differences here.
809:53 - The parentheses are gone.
809:55 - The colon is there.
809:56 - The indentation is there.
809:57 - No semicolon, and there's
one other subtle difference.
810:00 - What do you see?
810:01 - AUDIENCE: True is capitalized?
810:02 - DAVID J. MALAN: True is
capitalized, just because.
810:04 - Both true and false are
Boolean values in Python.
810:07 - But you've got to start
capitalizing them, just because.
810:09 - All right, how about a
loop like this, where
810:11 - you repeat something a finite number
of times, like meowing three times.
810:14 - In C, we could do this
a few different ways.
810:17 - There's this very mechanical way,
where you initialize a variable like i
810:21 - to zero.
810:22 - You then use a while loop and
check if i is less than 3,
810:25 - the total number of
times you want to meow.
810:27 - Then you print what you want to print.
810:29 - You increment i using this syntax,
or the longer, more verbose syntax,
810:32 - with plus equals or whatnot.
810:34 - And then you do it again
and again and again.
810:36 - In Python, you can do it
functionally the same way, same idea,
810:40 - slightly different syntax.
810:42 - You just don't bother saying
what type of variable you want.
810:44 - Python will infer from the fact
that there's a 0 right there.
810:47 - You don't need the parentheses.
810:48 - You do need the colon.
810:49 - You do need the indentation.
810:51 - You can't do the i plus plus, but
you can do this other technique,
810:54 - as we could have done in C, as well.
810:56 - How else might we do this, though, too?
810:58 - Well. it turns out in
C, we could do something
811:01 - like this, which, again, sort
of cryptic at first glance,
811:04 - became perhaps more familiar,
where you have initialization,
811:07 - a conditional, and then an update
that you do after each iteration.
811:11 - In Python, there isn't really an analog.
811:14 - There is no analog in
Python, where you have
811:17 - the parentheses and the multiple
semicolons in the same line.
811:19 - Instead, there is a for loop, but
it's meant to read a little more
811:23 - like English, for i in 0, 1, and 2.
811:27 - So we'll see in a bit, these square
brackets represent an array, now
811:31 - to be called a list in Python.
811:33 - So lists in Python are more like
link lists than they are arrays.
811:37 - More on that soon.
811:38 - So this just means for i and the
following list of three values.
811:42 - And on each iteration of this loop,
Python automatically, for you,
811:46 - it first sets i to zero.
811:47 - Then it sets i to one.
811:49 - Then it sets i to two, so that you
effectively do things three times.
811:54 - But this doesn't necessarily scale,
as I've drawn it on the board.
811:57 - Suppose you took this
at face value as the way
812:01 - you iterate some number of times
in Python, using a for loop.
812:05 - At what point does this approach
perhaps get bad, or bad design?
812:10 - Let me give folks just
a moment to think.
812:11 - Yeah, in back.
812:12 - AUDIENCE: If you don't know how
many times, last time, you know,
812:15 - you've got the link in there.
812:17 - DAVID J. MALAN: Sure, if you
don't know how many times you
812:20 - want to loop or iterate, you can't
really create a hard-coded list
812:23 - like that, of 0, 1, 2.
812:25 - Other thoughts?
812:26 - AUDIENCE: So you want to say raise
a large number of allowances.
812:29 - DAVID J. MALAN: Yeah, if you're
iterating a large number of times,
812:32 - this list is going to
get longer and longer,
812:34 - and you're just kind of
stupidly going to be typing out
812:36 - like comma 3, comma 4, comma 5, comma
dot dot dot, comma 99, comma 100.
812:40 - I mean, your code would start
to look atrocious, eventually.
812:42 - So there is a better way.
812:44 - In Python, there is a function,
or technically a type,
812:46 - called range, that essentially magically
gives you back a range of values
812:51 - from 0 on up to, but
not through a value.
812:54 - So the effect of this line of
code, for i in the following range,
812:58 - essentially hands you back
a list of three values,
813:01 - thereby letting you do
something three times.
813:02 - And if you want to do something
99 times instead, you, of course,
813:05 - just change the 3 to a 99.
813:07 - Question.
813:07 - AUDIENCE: Is there a way to start
the beginning point of that range
813:11 - at a number or an integer that's higher
than zero, or is there never a really
813:15 - any point to do so?
813:16 - DAVID J. MALAN: A really
good question, can
813:18 - you start counting at a higher number.
813:19 - So not 0, which is the implied default,
but something larger than that.
813:23 - Yes, so it turns out the range function
takes multiple arguments, not just one
813:28 - but maybe two or even three, that
allows you to customize this behavior.
813:31 - So you can customize where it begins.
813:33 - You can customize the increment.
813:34 - By default, it's one,
but if you want to do
813:36 - every two values, for like evens
or odds, you could do that as well,
813:39 - and a few other things.
813:40 - And before long, we'll take a
look at some Python documentation
813:42 - that will become your authoritative
source for answers like that.
813:45 - Like, what can this function do.
813:47 - Other questions on this thus far?
813:51 - Seeing none, so what else might
we compare and contrast here.
813:56 - Well, in the world of C, recall that
we had a whole bunch of built-in data
814:00 - types, like these here, Bool and char
and double and float, and so forth,
814:04 - string, which happened to
come from the CS50 library.
814:08 - But the language C itself certainly
understood the idea of strings,
814:12 - because the backslash 0, the support
for %S and printf, that's all native,
814:17 - built into C, not a CS50 simplification.
814:19 - All we did, and revealed,
as of a couple of weeks
814:22 - ago, is that string,
this data type, is just
814:24 - a synonym for a typedef for char star,
which is part of the language natively.
814:29 - In Python now, this list actually
gets a little shorter, at least
814:32 - for these common primitive data types.
814:33 - Still going to have bulls, we're
going to have floats, and Ints,
814:36 - and we're going to have strings,
but we're going to call them STRs.
814:39 - And this is not a CS50
thing from the library,
814:41 - STR, S-T-R, is, in fact,
a data type in Python,
814:44 - that's going to do a lot more than
strings did for us automatically in C.
814:48 - Ints and floats, meanwhile, don't need
the corresponding longs and doubles,
814:53 - because, in fact, among the
problems Python solves for us,
814:56 - too, Ints can get as big as you want.
814:58 - Integer overflow is no
longer going to be an issue.
815:01 - Per week 1, the language
solves that for us.
815:04 - Floating point
imprecision, unfortunately,
815:06 - is still a problem that remains.
815:07 - But there are libraries, code that
other people have written, as we briefly
815:11 - discussed in weeks past,
that allow you to do
815:13 - scientific or financial computing,
using libraries that build
815:16 - on top of these data types, as well.
815:19 - So there's other data types, too,
in Python, which we'll see actually
815:22 - gives us a whole bunch of
more power and capability,
815:25 - things called ranges,
like we just saw, lists,
815:28 - like I called out verbally,
with the square brackets,
815:30 - things called tuples, for
things like x comma y,
815:33 - or latitude, longitude,
dictionaries, or Dicts,
815:36 - which allow you to store keys and
values, much like our hash tables
815:40 - from last time, and then sets in the
mathematical sense, where they filter
815:43 - out duplicates for you, and you can
just put a whole bunch of numbers,
815:46 - a whole bunch of words or whatnot,
and the language, via this data type,
815:50 - will filter out duplicates for you.
815:52 - Now there's going to be a few functions
we give you this week and beyond,
815:56 - training wheels that we're then
going to very quickly take off,
815:59 - just because, as we'll see today, they
just simplify the process of getting
816:02 - user input correctly, without
accidentally writing buggy code,
816:05 - just when you're trying to get Hello,
World, or something similar, to work.
816:08 - And we'll give you functions, not
like, not as long as this list in C,
816:12 - but a subset of these,
get float, get Int,
816:15 - and get string, that'll
automate the process of getting
816:18 - user input in a way that's more
resilient against potential bugs.
816:21 - But we'll see what those bugs might be.
816:23 - And the way we're going to do
this is similar in spirit to C.
816:26 - Instead of doing include,
CS50.h, like we did in C,
816:30 - you're going to now
start saying import CS50.
816:33 - Python supports,
similar to C, libraries,
816:37 - but there aren't header files anymore.
816:38 - You just use the name of
the library in Python.
816:41 - And if you want to import CS50's
functions, you just say import CS50.
816:44 - Or, if you want to be more precise, and
not just import the whole thing, which
816:48 - could be slow, if you've got a really
big library with a lot of functionality
816:52 - in it, you can be more precise and
say from CS50, import get float.
816:56 - From CS50 import get Int,
from CSM 50 import get string,
817:00 - or you can just separate
them by commas and import 3
817:02 - and only 3 things from a
particular library, like ours.
817:07 - But starting today and
onward, we're going
817:08 - to start making much more
heavy use of libraries, code
817:11 - that other people wrote, so that
we're no longer reinventing the wheel.
817:15 - We're not making our own linked lists,
our own trees, our own dictionaries.
817:18 - We're going to start standing
on the shoulders of others,
817:20 - so that you can get real work
done, so to speak, faster,
817:23 - by building your software on
top of others' code as well.
817:28 - All right, so that's it for the
syntactic tour of the language,
817:31 - and the sort of core features.
817:32 - Soon we'll transition
to application thereof.
817:34 - But let me pause here to see if there's
any questions on syntax or primitives
817:40 - or otherwise, or otherwise.
817:46 - Oh, yes, in back.
817:48 - AUDIENCE: Why don't Python
have the increment operators.
817:52 - DAVID J. MALAN: I'm sorry,
say it again, why doesn't
817:54 - Python have what kind of operators?
817:56 - AUDIENCE: Why doesn't Python
have the increment operator?
817:59 - DAVID J. MALAN: Sorry, someone coughed
when you said something operators.
818:02 - AUDIENCE: The increment.
818:03 - DAVID J. MALAN: Oh,
the increment operator?
818:05 - I'd have to check the history, honestly.
818:06 - Python has tended to be a
fairly minimus language.
818:09 - And if you can do something one
way, the community, arguably,
818:12 - has tended to not give you multiple
ways to do the same thing syntactically.
818:16 - There's probably a better answer.
818:18 - And I'll see if I can dig in and post
something online, to follow up on that.
818:22 - All right, so before we transition
to now writing some actual code,
818:26 - let me go ahead and consider exactly
how we're going to write code.
818:31 - In the world of C, recall that it's
generally been a 2-step process.
818:35 - We create a file called like Hello.c,
and then, step one, make Hello, step 2,
818:40 - ./Hello.
818:41 - Or, if you think back to week
two, when we sort of peeled back
818:44 - the layer of what Hello,
of what make was doing,
818:47 - you could more verbosely type out
the name of the actual compiler,
818:50 - Clang in our case, command line
arguments like dash Oh, Hello,
818:54 - to specify what name you want to create.
818:56 - And then you can specify the file name.
818:58 - And then you can specify what
libraries you want to link in.
819:01 - So that was a very verbose approach.
819:03 - But it was always a two-step approach.
819:05 - And so, even as you've been
doing recent problem sets,
819:08 - odds are you've realized that, any time
you want to make a change to your code,
819:11 - or make a change to your code
and try and test your code again,
819:16 - you're constantly doing those two steps.
819:18 - Moving forward in Python,
it's going to become simpler,
819:22 - and it's going to be just this.
819:24 - The file name is going to change,
but that might go without saying.
819:26 - It's going to be something like
Hello.py, P-Y, instead of Hello.c.
819:31 - And that's just a convention,
using a different file extension.
819:34 - But there's no compilation step per se.
819:37 - You jump right to the
execution of your code.
819:40 - And so Python, it turns out, is
the name, not only of the language
819:43 - we're going to start using, it's also
the name of a program on a Mac, a PC,
819:48 - assuming it's been pre-installed,
that interprets the language for you.
819:52 - This is to say that Python is generally
described as being interpreted,
819:56 - not compiled.
819:57 - And by that, I mean you get to skip,
from the programmer's perspective,
820:01 - that compilation step.
820:02 - There is no manual step in the world of
Python, typically, of writing your code
820:07 - and then compiling it to zeros and ones,
and then running the zeros and ones.
820:11 - Instead, these kind of
two steps get collapsed
820:13 - into the illusion of one, whereby you,
instead, are able to just run the code,
820:19 - and let the computer figure
out how to actually convert it
820:22 - to something the computer understands.
820:24 - And the way we do that is via this
old process, input and output.
820:28 - But now, when you have
source code, it's going
820:30 - to be passed into an
interpreter, not a compiler.
820:33 - And the best analog of this
is just to perhaps point out
820:35 - that, in the human world, if
you speak, or don't speak,
820:38 - multiple human languages, it can
be a pretty slow process from going
820:42 - from one language to another.
820:43 - For instance, here are step-by-step
instructions for finding someone
820:46 - in a phone book,
unfortunately, in Spanish.
820:49 - Unfortunately, if you don't
speak or read Spanish.
820:51 - You could figure this out.
820:53 - You could run this algorithm, but you're
going to have to do some googling,
820:55 - or you're going to have to open
up literal dictionary from Spanish
820:58 - to English and convert this.
820:59 - And the catch with translating
any language, human or computer
821:03 - or otherwise, is that you're going
to pay a price, typically some time.
821:07 - And so converting this in
Spanish to this in English
821:10 - is just going to take you
longer than if this were already
821:12 - in your native language.
821:14 - And that's going to be one of the
subtleties with the world of Python.
821:17 - Yes, it's a feature that you can
just run the code without having
821:21 - to bother compiling it manually first.
821:24 - But we might pay a price.
821:25 - And things might be a little slower.
821:27 - Now, there's ways to chip away at that.
821:28 - But we'll see an example thereof.
821:30 - In fact, let me transition now
to just a couple of examples
821:33 - that demonstrate how Python is
not only easier for many people
821:37 - to use, perhaps yourselves
too, because it throws away
821:39 - a lot of the annoying syntax,
it shortens the number of lines
821:42 - you have to write, and also it
comes with so many darn libraries,
821:46 - you can just do so much more without
having to write the code yourself.
821:51 - So, as an example of this,
let me switch over here
821:54 - to this image from problem set 4, which
is the Weeks Bridge down by the Charles
822:00 - River here in Cambridge.
822:01 - And this is the original
photo, pretty clear,
822:03 - and it's even higher res if we looked
at the original version of the photo.
822:06 - But there have been no filters, a
la Instagram, applied to this photo.
822:10 - Recall, for problem set four, you
had to implement a few filters.
822:13 - And among them might have been blur.
822:14 - And blur was probably among the
more challenging of the ones,
822:18 - because you had to iterate
over all of the pixels,
822:20 - you had to take into account what's
above, what's below, to the left,
822:23 - to the right.
822:24 - I mean, there was a lot
of math and arithmetic.
822:25 - And if you ultimately got it, it was
probably a great sense of satisfaction.
822:29 - But that was probably
several hours later.
822:31 - In a language like
Python, where there might
822:34 - be libraries that had been written
by others, on whose shoulders
822:37 - you can stand, we could
perhaps do something like this.
822:40 - Let me go ahead and run a program, or
write a program, called Blur.py here.
822:44 - And in Blur.py, in VS
Code, let me just do this.
822:48 - Let me import from a library,
not the CS50 library,
822:51 - but the Pillow library, so to
speak, a keyword called image
822:56 - and another one called image
filter, then let me go ahead
822:59 - and say, let me open the current
version of this image, which
823:02 - is called Bridge.bmp.
823:04 - So the before version
of the image will be
823:06 - the result of calling image.open
quote unquote "Bridge.bmp,"
823:11 - and then, let me create
an after version.
823:13 - So you'll see before and after.
823:15 - After equals the before version
.filter of image filter.
823:21 - And there is, if I
read the documentation,
823:23 - I'll see that there's something
called a box blur, that
823:25 - allows you to blur in box
format, like one pixel above,
823:28 - below, left, and right.
823:30 - So I'll do one pixel there.
823:31 - And then, after that's done, let
me go ahead and save the file
823:34 - as something like Out.bmp.
823:37 - That's it.
823:38 - Assuming this library
works as described,
823:41 - I am opening the file
in Python, using line 3.
823:44 - And this is somewhat new syntax.
823:46 - In the world of Python, we're going to
start making use of the dot operator
823:49 - more, because in the
world of Python, you have
823:51 - what's called object-oriented
programming, or OOP, as a term of art.
823:56 - And what this means is that
you still have functions,
823:58 - you still have variables,
but sometimes those functions
824:01 - are embedded inside of the
variables, or, more specifically,
824:05 - inside of the data types themselves.
824:07 - Think back to C. When you wanted
to convert something to uppercase,
824:10 - there was a to upper function that takes
as input an argument that's a char.
824:15 - And you can pass in any char you
want, and it will uppercase it for you
824:18 - and give you back a value.
824:19 - Well, you know what, if that's
such a common paradigm, where
824:22 - upper-casing chars is a useful
thing, what the world of Python does
824:26 - is it embeds into the string
data type, or char if you will,
824:30 - the ability just to uppercase any char
by treating the char, or the string,
824:35 - as though it's a struct
in C. Recall that structs
824:38 - encapsulate multiple types of values.
824:40 - In object-oriented programming,
in a language like Python,
824:44 - you can encapsulate not just
values, but also functionality.
824:48 - Functions can now be inside of structs.
824:50 - But we're not going to
call them structs anymore.
824:52 - We're going to call them objects.
824:53 - But that's just a different vernacular.
824:55 - So what am I doing here?
824:57 - Inside of the image library,
there's a function called open,
825:00 - and it takes an argument, the
name of the file, to open.
825:03 - Once I have a variable called before,
that is a struct, or technically
825:06 - an object, inside of
which is now, because it
825:09 - was returned from this
function, a function
825:12 - called filter, that takes an argument.
825:14 - The argument here happens
to be image.boxblur1,
825:18 - which itself is a function.
825:19 - But it just returns the filter to use.
825:21 - And then, after, dot save
does what you might think.
825:23 - It just saves the file.
825:24 - So instead of using fopen and
fwrite, you just say dot save,
825:27 - and that does all of
that messy work for you.
825:31 - So it's just, what, four
lines of code total?
825:33 - Let me go ahead and go
down to my terminal window.
825:36 - Let me go ahead and show you
with LS that, at the moment,
825:40 - whoops, sorry, let me
not bother showing that,
825:41 - because I have other examples to come.
825:43 - I'm going to go ahead and do Python
of Blur.py, nope, sorry, wrong place.
825:50 - I did need to make a command.
825:52 - There we go.
825:52 - OK, let me go ahead and type LS
inside of my filter directory, which
825:55 - is among the sample code online today.
825:58 - There's only one file
called Bridge.bmp, dammit,
826:01 - I'm trying to get these
things ready at the same time.
826:04 - Let me rewind.
826:05 - Let me move this code into place.
826:08 - All right, I've gone ahead
and moved this file, Blur.py,
826:11 - into a folder called
filter, inside of which
826:13 - there's another file called Bridge.bmp,
which we can confer with LS.
826:18 - Let me now go ahead
and run Python, which
826:20 - is my interpreter, and also
the name of the language,
826:23 - and run Python on this file.
826:25 - So much like running
the Spanish algorithm
826:27 - through Google Translate,
or something like that,
826:29 - as input, to get back
the English output,
826:32 - this is going to translate the
Python language to something
826:36 - this computer, or this
cloud-based environment,
826:38 - understands, and then run the
corresponding code, top to bottom,
826:41 - left to right.
826:42 - I'm going to go ahead and Enter.
826:43 - No error message is
generally a good thing.
826:45 - If I type LS you'll now see out.bmp.
826:48 - Let me go ahead and open that.
826:49 - And, you know what, just to make
clear what's really happening,
826:52 - let me blur it even further.
826:53 - Let's make a box that's not
just one pixel around, but 10.
826:57 - So let's make that change.
826:58 - And let me just go ahead and
rerun it with Python of Blur.py.
827:01 - I still have Out.bmp.
827:03 - Let me go ahead and open Out.bmp
and show you first the before,
827:08 - which looks like this.
827:10 - That's the original.
827:11 - And now, crossing my fingers,
four lines of code later,
827:14 - the result of blurring it, as well.
827:16 - So the library is doing all
of the same kind of legwork
827:18 - that you all did for
the assignment, but it's
827:20 - encapsulated it all into a single
library, that you can then use instead.
827:24 - Those of you who might have
been feeling more comfortable,
827:27 - might have done a little
something like this.
827:29 - Let me go ahead and open up one
other file, called Edges.py.
827:33 - And in Edges.py, I'm again going
to import from the Pillow library
827:36 - the image keyword, and the image filter.
827:39 - Then I'm going to go ahead and
create a before image, that's
827:42 - a result of calling image.open
of the same thing, Bridge.bmp,
827:46 - then I'm going to go ahead and run a
filter on that, called image, whoops,
827:53 - image filter.find edges, which
is like a content, if you will,
827:58 - defined inside of this library for us.
828:00 - And then I'm going to do
after.save quote unquote
828:02 - "Out.bmp," using the same file name.
828:04 - I'm now going to run Python of
Edges.py, after, sorry, user error.
828:13 - We'll see what syntax error means soon.
828:15 - Let me go ahead and run
the code now, Edges.py.
828:17 - Let me now open that new file, Out.bmp.
828:21 - And before we had this, and now,
especially if what will look familiar
828:26 - if we did the more comfortable
version of P set 4,
828:28 - we now get this, after
just four lines of code.
828:31 - So again, suggesting the power
of using a language that's better
828:34 - optimized for the tool at hand.
828:36 - And at the risk of really
making folks sad, let's go ahead
828:39 - and re-implement, if we could,
problem set five, real quickly here.
828:43 - Let me go ahead and open
another version of this code,
828:47 - wherein I have a C
version, just from problem
828:50 - set five, wherein you
implemented a spell checker,
828:52 - loading 100,000 plus words into memory.
828:55 - And then you kept track of just
how much time and memory it took.
828:58 - And that probably took
a while, implementing
829:00 - all of those functions in Dictionary.c.
829:03 - Let me instead now go into a
new file, called Dictionary.py.
829:08 - And let me stipulate, for
the sake of discussion,
829:11 - that we already wrote
in advance, Speller.py,
829:14 - which corresponds to Speller.c.
829:16 - You didn't write either of those.
829:17 - Recall for problem set
five, we gave you Speller.c.
829:20 - Assume that we're going
to give you Speller.py.
829:22 - So the onus on us right now is only
to implement Speller, Dictionary.py.
829:28 - All right, so I'm going to go
ahead and define a few functions.
829:31 - And we're going to see now the syntax
for defining functions in Python.
829:34 - I want to go ahead and define
first, a hash table, which
829:38 - was the very first thing
you defined in Dictionary.c.
829:41 - I'm going to go ahead, then, and say
words gets this, give me a dictionary,
829:46 - otherwise known as a hash table.
829:48 - All right, now let me
define a function called
829:50 - check, which was the first function
you might have implemented.
829:53 - Check is going to take a word,
and you'll see in Python,
829:55 - the syntax is a little different.
829:56 - You don't specify the return type.
829:58 - You use the word Def instead to define.
830:01 - You still specify the name of the
function and any arguments thereto.
830:05 - But you omit any mention of types.
830:07 - But you do use a colon and indent.
830:09 - So how do I check if a word is in
my dictionary, or in my hash table?
830:14 - Well, in Python, I can
just say, if word in words,
830:17 - go ahead and return true, else
go ahead and return false, done,
830:23 - with the check function.
830:24 - All right, now I want to do like load.
830:26 - That was the heavy lift, where you
had to load the big file into memory.
830:29 - So let me define a function called load.
830:30 - It takes a string, the
name of a file to load.
830:33 - So I'll call that Dictionary,
just like in C, but no data type.
830:36 - Let me go ahead and open a file by
using an open function in Python,
830:40 - by opening that Dictionary in read mode.
830:43 - So this is a little similar to fopen,
a function in C you might recall.
830:46 - Then let me iterate over
every line in the file.
830:49 - In Python, this is pretty pleasant,
for line in file colon indent.
830:54 - How, now, do I get at the current
word, and then strip off the new line,
830:59 - because in this file of
words, 140,000 words,
831:02 - there's word backslash n,
word backslash n, all right?
831:05 - Well, let me go ahead and get
a word from the current line,
831:07 - but strip off, from the right end
of the string, the new line, which
831:11 - the Rstrip function
in Python does for me.
831:14 - Then let me go ahead and add to my
dictionary, or hash table, that word,
831:18 - done.
831:19 - Let me go ahead and close
the file for good measure.
831:22 - And then let me go ahead and
return true, because all was well.
831:24 - That's it for the load
function in Python.
831:26 - How about the size function?
831:28 - This did not take any arguments, it
just returns the size of the hash table
831:31 - or dictionary in Python.
831:32 - I can do that by returning the
length of the dictionary in question.
831:36 - And then lastly, gone from the
world of Python is malloc and free.
831:41 - Memory is managed for you.
831:42 - So no matter what I do,
there's nothing to unload.
831:45 - The computer will do that for me.
831:47 - So I give you, in these functions,
problem set five in Python.
831:51 - So, I'm sorry, we made
you write it in C first.
831:53 - But the implication now is that,
what are you getting for free,
831:57 - in a language like Python?
831:58 - Well, encapsulated in
this one line of code
832:00 - is much of what you wrote for
problem set five, implementing
832:04 - your array for all of your
letters of the alphabet or more,
832:07 - all of the linked lists that you
implemented to create chains,
832:10 - to store all of those words.
832:12 - All of that is happening.
832:13 - It's just someone else in the
world wrote that code for you.
832:16 - And you can now use it
by way of a dictionary.
832:19 - And actually, I can
change this a little bit,
832:22 - because add is technically not
the right function to use here.
832:25 - I'm actually treating the dictionary
as something simpler, a set.
832:28 - So I'm going to make one tweak, set
recall was another data type in Python.
832:31 - But set just allows it
to handle duplicates,
832:34 - and it allows me to just throw
things into it by literally
832:36 - using a function as simple as add.
832:38 - And I'm going to make
one other tweak here,
832:41 - because, when I'm checking a word,
it's possible it might be given
832:46 - to me in uppercase or capitalized.
832:49 - It's not going to necessarily come
in in the same lowercase format
832:52 - that my dictionary did.
832:53 - I can force every word to
lowercase by using word.lower.
832:58 - And I don't have to do it
character for character,
833:01 - I can do the whole darn string at
once, by just saying word.lower.
833:06 - All right, let me go ahead and
open up a terminal window here.
833:09 - And let me go into, first,
my C version, on the left.
833:12 - And actually I'm going to go ahead
and split my terminal window into two.
833:15 - And on the right, I'm going to go into
a version that I essentially just wrote.
833:20 - But it's also available online, if
you want to play along afterward.
833:23 - I'm going to go ahead and
make speller in C on the left,
833:26 - and note that it takes
a moment to compile.
833:28 - Then I'm going to be ready to
run speller of dictionaries,
833:33 - let's do like the Sherlock
Holmes text, which is pretty big.
833:35 - And then over here, let me get
ready to run Python of speller
833:40 - on texts/homes.txt2.
833:44 - So the syntax is a little
different at the command prompt.
833:46 - I just, on the left, have to
compile the code, with make,
833:49 - and then run it with ./speller.
833:51 - On the right, I don't
need to compile it.
833:52 - But I do need to use the interpreter.
833:54 - So even though the lines are
wrapping a little bit here,
833:56 - let me go ahead and run it on the right.
833:58 - And I'm going to count how
long it takes, verbally,
834:00 - for demonstration sake.
834:02 - One Mississippi, two Mississippi,
three Mississippi, OK,
834:05 - so it's like three
seconds, give or take.
834:07 - Now running it in
Python, keeping in mind,
834:10 - I spent way fewer hours implementing
a spell checker in Python
834:13 - than you might have in problem set five.
834:15 - But what's the trade-off going to be,
and what kinds of design decisions
834:18 - do we all now need to
be making consciously?
834:20 - Here we go, on the right, in Python.
834:22 - One Mississippi, two Mississippi,
three Mississippi, four Mississippi,
834:26 - five Mississippi, six Mississippi,
seven Mississippi, eight Mississippi,
834:30 - nine Mississippi, 10
Mississippi, 11 Mississippi,
834:33 - all right, so 10 or 11 seconds.
834:36 - So which one is better?
834:38 - Let's go to the group here, which
of these programs is the better one?
834:43 - How might you answer that question,
based on demonstration alone?
834:47 - What do you think?
834:48 - AUDIENCE: I think Python's
better for the programmer,
834:50 - more comfortable for the programmer,
but C is better for the user.
834:54 - DAVID J. MALAN: OK, so
Python, to summarize,
834:56 - is better for the programmer,
because it was way faster to write,
834:59 - but C is maybe better for the computer,
because it's much faster to run.
835:02 - I think that's a reasonable formulation.
835:04 - Other opinions?
835:05 - Yeah.
835:07 - AUDIENCE: I think it depends
on the size of the project
835:09 - that you're dealing with.
835:10 - So if it's going to be something
that's relatively quick,
835:12 - I might not care that it
takes 10 seconds to do it.
835:15 - And it could be way faster
to do it with Python.
835:17 - Whereas with C, if I'm dealing
with something like a massive data
835:20 - set or something huge, then that
time is going to really build up on,
835:24 - it might be worth it to put in the
upfront effort and just load it into C,
835:29 - so the process continually will run
faster over a longer period of time.
835:32 - DAVID J. MALAN: Absolutely,
a really good answer.
835:33 - And let me summarize, is it depends
on the workload, if you will.
835:36 - If you have a very large
data set, you might
835:40 - want to optimize your code to be as
fast and performant as it can be,
835:43 - especially if you're running
that code again and again.
835:45 - Maybe you're a company like Google.
835:47 - People are searching a
huge database all the time.
835:49 - You really want to squeeze
every bit of performance
835:52 - as you can out of the computer.
835:53 - You might want to have someone
smart take a language like C
835:56 - and write it at a very low level.
835:57 - It's going to be painful.
835:59 - They're going to have bugs.
835:59 - They're going to have to deal with
memory management and the like.
836:02 - But if and when it works correctly, it's
going to be much faster, it would seem.
836:06 - By contrast, if you have
a data set that's big,
836:08 - and 140,000 words is
not small, but you don't
836:12 - want to spend like 5 hours,
10 hours, a week of your time,
836:15 - building a spell
checker or a dictionary,
836:17 - you can instead leverage a different
language with different libraries
836:20 - and build on top of it, in order to
prioritize the human time instead.
836:25 - Other thoughts?
836:27 - AUDIENCE: Would you,
because with Python,
836:29 - doesn't it also like
convert the words, or like
836:33 - convert the words, for a lesson?
836:35 - When we convert that into
the same version again,
836:37 - do we just take that into view?
836:40 - DAVID J. MALAN: That's a perfect
segue to exactly the next point we
836:43 - wanted to make, which was, is
there something in between?
836:45 - And indeed there is.
836:46 - I'm oversimplifying what this
language is actually doing.
836:49 - It's not as stark a difference
as saying, like, hey,
836:51 - Python is four times slower than C.
Like that's not the right takeaway.
836:54 - There are absolutely ways that
engineers can optimize languages,
836:57 - as they have already done for Python.
836:59 - And in fact, I've configured
my settings in such a way
837:02 - that I've kind of dramatized
just how big the difference is.
837:05 - It is going to be slower,
Python, typically,
837:07 - than the equivalent C program.
837:08 - But it doesn't have
to be as big of a gap
837:10 - as it is here, because, indeed, among
the features you can turn on in Python
837:14 - is to save some intermediate results.
837:16 - Technically speaking, yes,
Python is interpreting
837:19 - Dictionary.py and these
other files, translating them
837:23 - from one language to another.
837:24 - But that doesn't mean it has to do that
every darn time you run the program.
837:27 - As you propose, you can save, or cache,
C-A-C-H-E, the results of that process.
837:33 - So that the second time and the third
time are actually notably faster.
837:36 - And, in fact, Python itself, the
interpreter, the most popular version
837:39 - thereof, itself is
actually implemented in C.
837:42 - So you can make sure that your
interpreter is as fast as possible.
837:45 - And what then is maybe
the high level takeaway?
837:47 - Yes, if you are going to try to
squeeze every bit of performance
837:50 - out of your code, and
maybe code is constrained.
837:54 - Maybe you have very small devices.
837:55 - Maybe it's like a watch nowadays.
837:57 - Or maybe it's a sensor that's installed
in some small format in an appliance,
838:02 - or in infrastructure, where you
don't have much battery life
838:06 - and you don't have much
size, you might want
838:08 - to minimize just how
much work is being done.
838:10 - And so the faster the code runs,
and the better it's going to be,
838:13 - if it's implemented something low level.
838:14 - So C is still very commonly used
for certain types of applications.
838:18 - But, again, if you just want
to solve real world problems,
838:22 - and get real work done, and your time
is just as, if not more, valuable
838:26 - than the device you're
running it on, long term,
838:28 - you know what, Python is among the
most popular languages as well.
838:31 - And frankly, if I were implementing
a spell checker moving forward,
838:34 - I'm probably starting with Python.
838:36 - And I'm not going to
waste time implementing
838:38 - all of that low-level stuff, because
the whole point of using newer,
838:41 - modern languages is to use abstractions
that other people have created for you.
838:45 - And by abstraction, I mean something
like the dictionary function,
838:49 - that just gives you a
dictionary, or hash table,
838:51 - or the equivalent version that I
used, which in this case was a set.
838:55 - All right, any questions,
then, on Python thus far?
839:02 - No, all right.
839:03 - Oh, yeah, in the middle.
839:04 - AUDIENCE: Could you
compile the Python code,
839:06 - or is there some, I'd imagine that
with the audience that can happen,
839:11 - but it feels like if you can just
come up with a Python compiler,
839:14 - that would give you the
best of both worlds.
839:16 - DAVID J. MALAN: Really good
question or observation,
839:18 - could you just compile Python code?
839:20 - Yes, absolutely, this idea of
compiling code or interpreting code
839:23 - is not native to the language itself.
839:26 - It tends to be native to the
conventions that we humans use.
839:28 - So you could actually
write an interpreter for C
839:31 - that would read it top to bottom, left
to right, converting it to, on the fly,
839:34 - something the computer understands, but
historically that's not been the case.
839:38 - C is generally a compiled language.
839:40 - But it doesn't have to be.
839:41 - What Python nowadays is actually
doing is what you described earlier.
839:44 - It technically is, sort
of unbeknownst to us,
839:46 - compiling the code, technically
not into 0's and 1's, technically
839:50 - into something called byte code,
which is this intermediate step that
839:54 - just doesn't take as much time as it
would to recompile the whole thing.
839:58 - And this is an area of research
for computer scientists working
840:00 - in programming languages, to
improve these kinds of paradigms.
840:03 - Why?
840:04 - Well, honestly, for you and I, the
programmer, it's just much easier to,
840:07 - one, run the code and not worry
about the stupid second step
840:10 - of compiling it all the time.
840:11 - Why?
840:12 - It's literally half as many
steps for me, the human.
840:14 - And that's a nice thing to optimize for.
840:17 - And ultimately, too, you might
want all of the fancy features that
840:20 - come with these other languages.
840:22 - So you should really
just be fine-tuning how
840:24 - you can enable these features, as
opposed to shying away from them here.
840:28 - And, in fact, the only time
I personally ever use C
840:31 - is from like September to October
of every year, during CS50.
840:34 - Almost every other month
do I reach for Python,
840:36 - or another language called JavaScript,
to actually get real work done,
840:40 - which is not to impugn C. It's just that
those other languages tend to be better
840:44 - fits for the amount of time I have to
allocate, and the types of problems
840:47 - that I want to solve.
840:48 - All right, let's go ahead and
take a five minute break here.
840:50 - And when we come back, we'll start
writing some programs from Scratch.
840:53 - All right.
840:54 - So let's go ahead and start writing
some code from the beginning
840:58 - here, whereby we start small
with some simple examples,
841:01 - and then we'll build our way up to
more sophisticated examples in Python.
841:04 - But what we'll do
along the way is first,
841:06 - look side by side at
what the C code looked
841:08 - like way back in week 1
or 2 or 3 and so forth,
841:11 - and then write the corresponding
Python code at right.
841:13 - And then we'll transition just
to focusing on Python itself.
841:16 - What I've done in advance today is
I've downloaded some of the code
841:18 - from the course's website,
my source 6 directory, which
841:21 - contains all of the pre-written
C code from weeks past.
841:24 - But it'll also have
copies of the Python code
841:26 - we'll write here together and look at.
841:28 - So first, here is
Hello.c back from week 0.
841:31 - And this was version 0 of it.
841:33 - I'm going to go ahead and do this.
841:35 - I'm going to go ahead and
split my code window up here.
841:38 - I'm going to go ahead and create
a new file called Hello.py.
841:41 - And this isn't something
you'll typically have to do,
841:43 - laying your code out side by side.
841:45 - But I've just clicked the
little icon in VS Code
841:47 - that looks like two columns, that
splits my code editor into two places,
841:50 - so that we can, in fact, see
things, for now, side by side,
841:53 - with my terminal window down below.
841:55 - All right, now I'm going to go ahead
and write the corresponding Python
841:58 - program on the right, which,
recall, was just print, quote
842:01 - unquote, "Hello, world," and that's it.
842:03 - Now down in my terminal
window, I'm going
842:05 - to go ahead and run Python of
Hello.py, Enter, and voila,
842:09 - we've got Hello.py working.
842:10 - So again, I'm not going to play
any further with the C code.
842:13 - It's there just to jog
your memory left and right.
842:15 - So let's now look at a second
version of Hello, world
842:17 - from that first week, whereby
if I go and get Hello1.c,
842:20 - I'm going to drag that
over to the right.
842:22 - Whoops, I'm going to go ahead and
drag that over to the left here.
842:25 - And now, on the right,
let's modify Hello.py
842:28 - to look a little more like this
second version in C, all right?
842:32 - I want to get an answer from
the user as a return value,
842:36 - but I also want to get
some input from them.
842:38 - So from CS50, I'm going to import the
function called getString for now.
842:41 - We're going to get rid
of that eventually,
842:43 - but for now, it's a
helpful training wheel.
842:45 - And then down here, I'm
going to say, answer
842:47 - equals getString quote
unquote, "What's your name"?
842:51 - Question mark, space.
842:52 - But no semicolon, no data type.
842:53 - And then I'm going to
go ahead and print, just
842:55 - like the first example on the slide,
Hello, comma space plus answer.
843:01 - And now let me go ahead and run this.
843:03 - Python, of Hello.py, all right,
it's asking me what's my name.
843:06 - David.
843:06 - Hello comma David.
843:07 - But it's worth calling attention to the
fact that I've also simplified further.
843:13 - It's not just that the
individual functions are simpler.
843:15 - What is also now glaringly omitted
from my Python code at right,
843:18 - both in this version,
and the previous version.
843:21 - What did I not bother implementing?
843:22 - AUDIENCE: The main code.
843:23 - DAVID J. MALAN: Yeah, so I didn't
even need to implement main.
843:26 - We'll revisit the main function,
because having a main function
843:29 - actually does solve problems sometimes.
843:31 - But it's no longer required.
843:32 - In C you have to have that to kick-start
the entire process of actually running
843:36 - your code.
843:36 - And in fact, if you were missing
main, as you might have experienced
843:39 - if you accidentally compiled
Helpers.c instead of the file
843:42 - that contained main, you would
have seen a compiler error.
843:44 - In Python it's not necessary.
843:46 - In Python you can just jump right
in, start programming, and boom,
843:48 - you're good to go.
843:49 - Especially if it's a
small program like this,
843:51 - you don't need the added overhead
or complexity of a main function.
843:54 - So that's one other difference here.
843:56 - All right, there are a few other
ways we could say Hello, world.
843:59 - Recall that I could use a format string.
844:02 - So I could put this whole thing in
quotes, I could use this f prefix.
844:06 - And then let me go ahead and
run Python of Hello.py again.
844:09 - You can perhaps see where
we're going with this.
844:11 - Let me type my name,
David, and here we go.
844:13 - OK, that's the mistake that
someone identified earlier,
844:16 - you need the curly braces.
844:17 - Otherwise no variables are
interpolated, that is substituted,
844:21 - with their actual values.
844:22 - So if I go back in and add those
curly braces to the F string,
844:26 - now let me run Python of Hello.py,
type in my name, and there we go.
844:31 - We're back in business.
844:32 - Which one's better?
844:32 - I mean, it depends.
844:33 - But generally speaking, making
shorter, more concise code
844:37 - tends to be a good thing.
844:38 - So stylistically, the F string is
probably a reasonable instinct to have.
844:42 - All right, well, what more
can we do besides this?
844:45 - Well, let me go ahead here and
let's get rid of the training wheel
844:48 - altogether, actually.
844:49 - So same C code at left.
844:51 - Let me get rid of the CS50
library, which we will ultimately,
844:54 - in a couple of weeks, anyway.
844:56 - I can't use getString,
but I can use a function
844:59 - that comes with Python called input.
845:01 - And, in fact, this is actually a
one-for-one substitution, pretty much.
845:04 - There's really no downside to
using input instead of getString.
845:07 - We implement getString
just for consistency
845:09 - with what you saw in C. Python of
Hello.py, what's your name, David.
845:14 - Still actually works the same.
845:15 - So gone are the CS50
specific training wheels.
845:17 - But we're going to bring
them back shortly, just
845:19 - to deal with integers or
floats or other values,
845:21 - too, because it's going to make
our lives a little simpler,
845:24 - with error checking.
845:25 - All right, any questions, before we
now pivot to revisiting other examples
845:28 - from week 1, but now in Python?
845:32 - All right, let me go
ahead and open up now.
845:34 - Let's say Calculator0.c, which was one
of the first examples we did involving
845:39 - math and operators like that, as
well as functions like getInt,
845:43 - let me go ahead and create a new
file now called Calculator.py,
845:48 - at right, so that I have
my C code at left still,
845:51 - and my Python code at right.
845:53 - All right, let me go dive into a
translation of this code into Python.
845:57 - I am going to use getInt
from the CS50 library.
845:59 - So let me import that.
846:01 - I'm going to go ahead now
and get an Int from the user.
846:03 - So x equals getInt, and I'll
ask them for an x value,
846:07 - just like we did weeks ago.
846:08 - No need to specify a semicolon,
though, or an Int for the x.
846:14 - It will just figure it out.
846:15 - Y is going to get
another Int via y colon,
846:18 - and then down here, I'm going to
go ahead and say print of x plus y.
846:23 - So this is already a bit new.
846:25 - Recall, the C version required that
I use this format string, as well
846:29 - as printf itself.
846:30 - Python is just a little
more user-friendly.
846:32 - If all you want to do is print out a
value, like x plus y, just print it.
846:36 - Don't futz with any percent
signs or format codes.
846:39 - It's not printf, it's
indeed just print now.
846:41 - All right, let me go ahead and
run Python of Calculator.py,
846:45 - Enter, just do a quick sample,
1 plus 2 indeed equals 3.
846:50 - As an aside, suppose I had
taken a different approach
846:52 - to importing the whole CS50 library,
functionally, it's the same.
846:56 - You're not to notice any
performance impact here.
846:58 - It's a small library.
846:59 - But notice what does not
work now, whereas it did work
847:02 - in C. Python of Calculator.py, Enter,
we see our first traceback deliberately
847:07 - here.
847:08 - So a traceback is just
a term of art that
847:10 - says, here is a trace back
through all of the functions
847:13 - that just got executed.
847:14 - In the world of C, you
might call this a stack
847:16 - trace, stack being the operative word.
847:19 - Recall that when we talked
about the stack and the heap,
847:21 - the stack, like a stack of trays,
was all of the functions that
847:24 - might get called, one after the other.
847:26 - We had main, we had swap, then swap went
away, and then main finished, recall.
847:30 - So here's a trace back of all of the
functions or code that got executed.
847:34 - There's not really any functions
other than my file itself.
847:37 - Otherwise there'd be more detail.
847:38 - But even though it's a little cryptic,
we can perhaps infer from the output
847:42 - here, name error, so something related
to the name of something, name, getInt
847:46 - is not defined.
847:47 - And this of course, happens
on line 3 over there.
847:50 - All right, so why is that?
847:52 - Well, Python essentially
allows us to namespace
847:55 - our functions that come from libraries.
847:58 - There was a problem in C. If
you were using the CS50 library,
848:01 - and thus had access
to getInt, getString,
848:03 - and so forth, you could
not use another library
848:06 - that had the same function names.
848:08 - They would collide, and
the compiler would not
848:10 - know how to link them
together correctly.
848:12 - In Python, and other languages
like JavaScript, and in Java,
848:18 - you have support for effectively
what would be called namespaces.
848:21 - You can isolate variables and
function names to their own namespace,
848:26 - like their own container in memory.
848:29 - And what this means is,
if you import all of CS50,
848:32 - you have to say that the getInt you
want is inside the CS50 library.
848:36 - So just like with the image
blurring, and the image edges
848:39 - before, where I had to specify image dot
and image filter dot, similarly here,
848:44 - am I specifying with a dot operator,
albeit a little differently, that I
848:48 - want CS50.getInt in both places.
848:50 - And now if I rerun Python
of Calculator.py, 1 and 2,
848:54 - now we're back in business.
848:56 - Which one is better?
848:57 - Generally speaking, it depends
on just how many functions
849:01 - you're using from the library.
849:02 - If you're using a whole bunch of
functions, just import the whole thing.
849:05 - If you're only using maybe one
or two, import them line by line.
849:09 - All right, so let's go ahead
and make a little tweak here.
849:12 - Let's get rid of this library
and take this training wheel off,
849:15 - too, as quickly as we introduced
it, though for the problems set six
849:18 - you'll be able to use all
of these same functions.
849:20 - Suppose I get rid of this, and
I just use the input function,
849:24 - just like I did by
replacing getString earlier.
849:28 - Let me go ahead now and run
this version of the code.
849:31 - Python of Calculator.py, OK,
how about 1 plus 2 equals 3.
849:37 - Huh.
849:39 - All right, obviously wrong, incorrect.
849:41 - Can anyone explain what just
happened, based on instincts?
849:46 - What just happened here.
849:47 - Yeah.
849:47 - AUDIENCE: You want an answer?
849:49 - DAVID J. MALAN: Sure, yeah.
849:50 - AUDIENCE: Say you have a number
of strings that don't have Ints,
849:54 - so you would part with them and
say, printing one, two, better.
849:57 - DAVID J. MALAN: Exactly, Python
is interpreting, or treating,
850:01 - both x and y as strings,
which is actually
850:03 - what the input function
returns by default.
850:05 - And so plus is now being interpreted
as concatenation, as we defined it
850:08 - earlier.
850:09 - So x plus y isn't x
plus y mathematically,
850:12 - but in terms of string
joining, just like in Scratch.
850:15 - So that's why we're getting
12, or really one two,
850:18 - which isn't itself a number.
850:19 - It, too, is another string.
850:20 - So we somehow need to convert things.
850:22 - And we didn't have this
ability quite as easily in C.
850:25 - We did have like the A to i
function, ASCII to integer,
850:29 - which did allow you to do this.
850:30 - The analog in Python is actually just
to do a cast, a typecast, using Int.
850:35 - So just like in C, you
can use the keyword Int,
850:39 - but you use it a little differently.
850:41 - Notice that I'm not doing parenthesis
Int close parenthesis before the value.
850:45 - I'm using Int as a function.
850:47 - So indeed, in Python, Int is a function.
850:49 - Float is a function, that
you can pass values into,
850:53 - to do this kind of conversion.
850:54 - So now, if I run Python
of Calculator.py, 1 and 2,
850:58 - now we're back in business,
and getting the answer of 3.
851:01 - But there's kind of a catch here.
851:03 - There's always going to be a trade-off.
851:04 - Like that sounds amazing that
it just works in this way.
851:07 - We can throw away the
CS50 library already.
851:08 - But what if the user accidentally
types, or maliciously types in,
851:13 - like a cat, instead of a number.
851:15 - Damn, well, there's one
of these trace backs.
851:17 - Like, now my program has crashed.
851:19 - This is similar in spirit
to the kinds of segfaults
851:21 - that you might have had in C.
851:23 - But they're not segfaults per se.
851:24 - It doesn't necessarily relate to memory.
851:26 - This time it relates to actual
runtime values, not being as expected.
851:31 - So this time it's not a name
error, it's a value error,
851:34 - invalid literal for Int with
base 10 quote unquote "cat."
851:39 - So, again, it's written for sort
of a programmer, more than sort
851:43 - of a typical person, because it's
pretty arcane, the language here.
851:46 - But let's try to interpret it.
851:47 - Invalid literal, a literal is just
something someone typed for Int, which
851:51 - is the function name, with base 10.
851:52 - It's just defaulting to decimal numbers.
851:54 - Cat is apparently not a decimal number.
851:56 - It doesn't look like it, therefore
it can't be treated like it.
851:59 - Therefore, there's a value error.
852:01 - So what can we do?
852:03 - Unfortunately, you would have
to somehow catch this error.
852:06 - And the only way to do
that in Python really
852:08 - is by way of another
feature that C did not have,
852:11 - namely, what are called exceptions.
852:13 - An exception is exactly what just
happened, name error, value error.
852:18 - They are things that can go wrong
when your Python code is running,
852:22 - that aren't necessarily going to be
detected until you run your code.
852:27 - So in Python, and in JavaScript, and in
Java, and other more modern languages,
852:32 - there's this ability to
actually try to do something,
852:35 - except if something goes wrong.
852:37 - And in fact, I'm going to
introduce a bit of syntax
852:39 - here, even though we won't
have to use this much just yet.
852:42 - Instead of just blindly converting
x to an Int, let me go ahead
852:46 - and try to do that.
852:48 - And if there's an exception,
go ahead and say something
852:51 - like print, that is not an Int.
852:58 - And then I'm going to do
something like exit, right there.
853:02 - And let me go ahead and do this here.
853:03 - Let me try to get y, except
if there's an exception.
853:07 - Then let me go ahead and say, again,
that is not an Int exclamation point.
853:12 - And then I'm going to exit
from there to, otherwise I'll
853:14 - go ahead and print x plus y.
853:16 - If I run Python of
Calculator.py now, whoops, oh,
853:22 - forgot my close quote, sorry.
853:25 - All right, so close quote, Python of
Calculator.py, 1 and 2 still work.
853:31 - But if I try to type in
something wrong like cat, now
853:34 - it actually detects the error.
853:35 - So what is the CS50
library in Python doing?
853:38 - It's actually doing that try and accept
for you, because suffice it to say,
853:42 - otherwise your programs for
something simple, like a calculator,
853:45 - start to get longer and longer.
853:46 - So we factored that kind of
logic out to the CS50 getInt
853:49 - function and get float function.
853:51 - But underneath the hood, they're
essentially doing this, try except,
853:55 - but they're being a little more precise.
853:56 - They're detecting a specific error,
and they are doing it in a loop,
854:00 - so that these functions will
get executed again and again.
854:03 - In fact, the best way to do this is to
say except if there's a value error,
854:07 - then print that error
message out to the user.
854:10 - And again, let's not get too into
the weeds here with this feature.
854:13 - We've already put into the CS50 library.
854:15 - But that's why, for instance,
we bootstrap things,
854:17 - by just using these
functions out of the box.
854:20 - All right, let's do something
more with our calculator here.
854:24 - How about this.
854:25 - In the world of C, we
had another version
854:28 - of this code, which actually
did some division by way of--
854:33 - which actually did division of
numbers, not just the addition herein.
854:38 - So let me go ahead and close the C
version, and let's focus only on Python
854:42 - now, doing some of these
same lines of codes.
854:44 - But I'm going to go
ahead and just assume
854:46 - that the user is going to
cooperate and use proper input.
854:48 - So from CS50, import getInt, that
will deal with any errors for me.
854:52 - X gets getInt, ask the user
for an Int x, y equals getInt,
855:00 - ask the user for an Int y.
855:01 - And then, let's go ahead and do this.
855:03 - Let's declare a variable called
z, set it equal to x divided by y.
855:07 - Then let's go ahead and print z.
855:09 - Still no need for a format string, I
can just print out the variable's value.
855:13 - Let me go ahead and run
Python of Calculator.py.
855:15 - Let me do 1, 10, and I get 0.1.
855:20 - What did I get in C,
though, if you think back.
855:25 - What would we have happened in C?
855:28 - AUDIENCE: Zero?
855:29 - DAVID J. MALAN: Yeah, we
would have gotten zero in C.
855:32 - But why, in C, when you
divide one Int by another,
855:34 - and those Ints are like
1 and 10 respectively?
855:36 - AUDIENCE: It'll give
you an integer back.
855:38 - DAVID J. MALAN: It will give you what?
855:39 - AUDIENCE: An integer back.
855:40 - DAVID J. MALAN: It will give you an
integer back, and, unfortunately, 0.1,
855:44 - the integer part of it is indeed zero.
855:46 - So this was an example of truncation.
855:48 - So truncation was an
issue in C. But it would
855:51 - seem as though this is no
longer a problem in Python,
855:53 - insofar as the division operator
actually handles that for us.
855:57 - As an aside, if you want the old
behavior, because it actually
856:00 - is sometimes useful for
rounding or flooring values,
856:03 - you can actually use two slashes.
856:06 - And now you get the C behavior.
856:08 - So that now 1 divided by 10 is zero.
856:10 - So you don't give up that
capability, but at least it
856:12 - does a more sensible default.
856:14 - Most people, especially new programmers,
when dividing one value by another,
856:17 - would want to get 0.1,
not 0, for reasons
856:20 - that indeed we had to explain weeks ago.
856:22 - But what about another problem we
had with the world of floats before,
856:26 - whereby there is imprecision?
856:28 - Let me go ahead and, somewhat
cryptically, print out the value of z
856:31 - as follows.
856:32 - I'm going to format
it using an f-string.
856:34 - And I'm going to go ahead and format,
not just z, because this is essentially
856:39 - the same thing.
856:39 - Notice this, if I do Python
of Calculator.py, 1 and 10,
856:43 - I get, by default, just
one significant digit.
856:46 - But if I use this syntax in Python,
which we won't have to use often,
856:50 - I can actually do in
C like I did before,
856:53 - 50 significant digits
after the decimal point.
856:56 - So now let me rerun Python
of Calculator.py 1 and 10,
857:00 - and let's see if floating point
imprecision is still with us.
857:03 - Unfortunately, it is.
857:04 - And you can see as much here,
the f-string, the format string,
857:07 - is just showing us now 50 digits
instead of the default one.
857:10 - So we've not solved all problems.
857:12 - But we have solved at least some.
857:15 - All right, before we pivot away from
a mere calculator, any questions
857:18 - now on syntax or concepts or the like?
857:21 - Yeah.
857:22 - AUDIENCE: Do you think
the double slash you get
857:25 - has merit, how do you comment on that?
857:28 - DAVID J. MALAN: How do you what?
857:29 - Oh, how do you comment.
857:30 - Really good question, if you're
using double slash for division
857:33 - with flooring or truncation,
like I described,
857:36 - how do you do a comment in Python.
857:38 - This is a comment.
857:39 - And the convention is actually
to use a complete sentence,
857:42 - like with a capital T here.
857:43 - You don't need a period unless
there's multiple sentences.
857:46 - And technically, it should be above
the line of code by convention.
857:49 - So you would use a hash symbol instead.
857:51 - Good question.
857:52 - I haven't seen those yet.
857:53 - All right, let's go ahead and make
something else here, how about.
857:57 - Let me go ahead and
open up, for instance,
857:59 - an example called Points1.c,
which we saw a few weeks back.
858:05 - And let me go ahead on the other side
and create a file called Points.py.
858:10 - This was a program, recall, that
asked the user how many points they
858:13 - lost on the first assignment.
858:15 - And then it went ahead
and just printed out
858:17 - whether they lost fewer points
than me, because I lost two,
858:20 - if you recall the photo, more points
than me, or the same points as me.
858:23 - Let me go ahead and zoom out so
we can see a bit more of this.
858:26 - And let me now, on the top right here,
go about implementing this in Python.
858:30 - So I want to first prompt the
user for some number of points.
858:33 - So from CS50 let's import getInt,
so it handles the error-checking.
858:37 - Let's then do points
equals getInt, and ask
858:39 - the user, how many points
did you lose, question mark.
858:43 - Then let's go ahead and say, if points
less than two, which was my value,
858:48 - print, you lost fewer points than me.
858:52 - Otherwise, if it's else if points
greater than 2, go ahead and print,
858:59 - you lost more points than me.
859:03 - Else let's go ahead and handle
the final scenario, which is you
859:07 - lost the same number of points as me.
859:11 - Before I run this, does anyone want to
point out a mistake I've already made?
859:15 - Yeah.
859:16 - AUDIENCE: Else if has to be elif.
859:17 - DAVID J. MALAN: Yeah, so else if in
C is actually now elif in Python.
859:21 - It's a single word.
859:22 - So let me change this to elif, and now
cross my fingers, Python of Points.py,
859:26 - suppose you lost three
points on some assignment.
859:29 - You lost more points than my two.
859:31 - If you only lost one point,
you lost fewer points than me.
859:34 - So the logic is the same.
859:35 - But notice the code is much tighter.
859:37 - In 10 total lines, we did in
what was 24 lines, because we've
859:41 - thrown away a lot of the syntax.
859:42 - The curly braces are
no longer necessary.
859:44 - The parentheses are
gone, the semicolons.
859:46 - So this is why it just tends to
be more pleasant pretty quickly,
859:50 - using a language like this.
859:52 - All right, let's do
one other example here.
859:55 - In C, recall that we were able to
determine the parity of some number,
859:59 - if something is even or odd.
860:01 - Well, in Python, let me go ahead
and create a file called Parity.py,
860:05 - and let's look for a moment
at the C version at left.
860:09 - Here was the code in C that we used
to determine the parity of a number.
860:13 - And, really, the key
takeaway from all these lines
860:16 - was just the remainder operator.
860:17 - And that one is still with us.
860:19 - So this is a simple demonstration,
just to make that point,
860:21 - if in Python, I want to determine
whether a number is even or odd.
860:25 - Well, let's go ahead and from CS50,
import getInt, then let's go ahead
860:29 - and get a number like n from the user,
using getInt, and ask them for n.
860:35 - And then let's go ahead and say,
if n percent sign 2 equals 0,
860:40 - then let's go ahead and
print quote unquote "Even."
860:44 - Else let's go ahead and print
out Odd, but before I run this,
860:50 - anyone want to instinctively, even
though we've not talked about this,
860:53 - point out a mistake here?
860:55 - What I did wrong?
860:56 - AUDIENCE: Double equals.
860:57 - DAVID J. MALAN: Yeah, so double equals.
860:58 - Again, so even though some of the stuff
is changing, some of the same ideas
861:02 - are the same.
861:02 - So this, too, should
be a double equal sign,
861:05 - because I'm comparing for equality here.
861:07 - And why is this the right math?
861:08 - Well, if you divide a
number by 2, it's either
861:10 - going to have 0 or 1 as a remainder.
861:12 - And that's going to determine
if it's even or odd for us.
861:15 - So let's run Python of Parity.py,
type in a number like 50,
861:18 - and hopefully we get, indeed, even.
861:21 - So again, same idea, but now
we're down to eight lines
861:23 - of code instead of the 20.
861:25 - Well, let's now do something
a little more interactive
861:27 - and a little representative of tools
that actually ask the user questions.
861:31 - In C, recall that we had this
agreement program, Agree.c.
861:36 - And then let's go ahead and implement
a corresponding version in Python,
861:40 - in a file called Agree.py.
861:42 - And let's look at the C version first.
861:45 - On the left, we used get char here.
861:47 - And then we used the
double vertical bars
861:49 - to check if C is equal to
capital Y or lowercase y.
861:52 - And then we did the
same thing for n for no.
861:55 - And so let's go over here and
let's do from CS50, import get--
862:00 - OK, get char is not a thing.
862:03 - And this here is another
difference with Python.
862:05 - There is no data type for
individual characters.
862:09 - You have strings, STRs,
and, honestly, those
862:11 - are fine, because if
you have a STR that's
862:13 - just one character, for
all intents and purposes,
862:15 - it is just a single character.
862:17 - So it's just a simplification.
862:18 - You don't have to think as much.
862:19 - You don't have to worry about
double quotes, single quotes.
862:22 - In fact, in Python, you can use
double quotes or single quotes,
862:25 - so long as you're consistent.
862:27 - So long as you're
consistent, the single quotes
862:29 - do not mean something
different, like they do in C.
862:32 - So I'm going to go ahead
and use getString here,
862:34 - although, strictly speaking, I
could just use the input function,
862:37 - as we saw before.
862:39 - I'm going to get a string from the
user that asks them this, getString,
862:43 - quote unquote, "Do you agree," like a
little checkbox or interactive prompt,
862:47 - where you have to say yes or no, you
want to agree to the following terms,
862:50 - or whatnot.
862:51 - And then let's translate the
conditionals to Python, now, too.
862:54 - So if S equals equals quote-unquote
"Y," or S equals equals lowercase y,
863:02 - let's go ahead and print out agreed,
just like in C, elif S equals
863:08 - equals N or S equals equals little n.
863:12 - Let's go ahead, then,
and print out not agreed.
863:14 - And you can already see, perhaps,
one of the differences here, too.
863:17 - Is Python a little more
English-like, in that
863:20 - you just literally use the English word
or, instead of the two vertical bars.
863:24 - But it's ultimately
doing the same thing.
863:26 - Can we simplify this code a bit, though.
863:29 - This would be a little
annoying if we wanted
863:31 - to add support, not just
for big Y and little y,
863:34 - but Yes or big Yes or little yes or
big Y, lowercase e, capital S, right?
863:40 - There's a lot of permutations
of Y-E-S or just y,
863:43 - that we ideally should tolerate.
863:45 - Otherwise, the user is going to
have to type exactly what we want,
863:47 - which isn't very user-friendly.
863:49 - Any intuition for how
we could logically,
863:51 - even if you don't know how to
do it in code, make this better?
863:54 - Yeah.
863:55 - AUDIENCE: Write way over
the list, and then up,
863:58 - it's like the things in the list.
863:59 - DAVID J. MALAN: Nice, yeah, we saw an
example of a list before, just 0, 1, 2.
864:03 - Why don't we take that same
idea and ask a similar question.
864:06 - If S is in the following list
of values, Y or little y,
864:11 - or heck, let me add to the list
now, yes, or maybe all capital YES.
864:15 - And it's going to get a
little annoying, admittedly,
864:17 - but this is still better than the
alternative, with all the or's.
864:20 - I could do things like
this, and so forth.
864:22 - There's a whole bunch more permutations.
864:24 - But let's leave this alone,
and let me just go into here
864:26 - and change this to, if S is in the
following list of N or little n or no,
864:33 - and I won't do as, let's just not
worry about the weird capitalizations
864:36 - there, for now.
864:38 - Let's go ahead and run this.
864:39 - Python of Agree.py, do I agree?
864:42 - Y. OK, how about yes?
864:45 - All right, how about big Yes.
864:46 - OK, that does not seem to work.
864:48 - Notice it did not say agreed,
and it did not say not agreed.
864:50 - It didn't detect it.
864:51 - So how can I do this?
864:53 - Well, you know what I could
do, what I don't really
864:57 - need the uppercase and lowercase.
864:58 - Let me tighten this
list up a little bit.
865:00 - And why don't I just
force S to be lowercase.
865:04 - S.lower, recall, whether
it's one character or more,
865:07 - is a function built into
STRs now, strings in Python,
865:10 - that forces the whole
thing to lowercase.
865:12 - So now, watch what I can do.
865:13 - Python of Agree.py, little y,
that works, big Y, that works.
865:19 - Big Yes, that works, big Y,
little e, big S, that also works.
865:24 - So we've now handled, in one fell
swoop, a whole bunch more logic.
865:27 - And you know what, we can
tighten this up a bit.
865:29 - Here's an opportunity, in Python,
for slightly better design.
865:32 - What have I done in here
that's a little redundant?
865:36 - Does anyone see an opportunity
to eliminate a redundancy,
865:40 - doing something more
times than you need.
865:43 - Is a stretch here, no.
865:44 - Yep.
865:45 - AUDIENCE: You can do S dot lower, above.
865:47 - DAVID J. MALAN: We could
move the S dot lower above.
865:49 - Notice that I'm using S dot lower twice.
865:51 - But it's going to give me
the same answer both times.
865:54 - So I could do a couple of things here.
865:56 - I could, first of all, get rid of
this lower, and get rid of this lower,
866:01 - and then above this, maybe I could
do something like this, S equal--
866:05 - I can't just do this, because
that throws the value away.
866:08 - It does the math, but it doesn't
convert the string itself.
866:10 - It's going to return a value.
866:12 - So I have to say S equals s.lower.
866:14 - I could do that.
866:15 - Or, honestly, I can chain
these things together.
866:18 - And this is not something we saw in
C. If getString returns a string,
866:22 - and strings have functions
like lower in them,
866:25 - you can chain these functions
together, like this, and do dot this,
866:28 - dot that, dot this other thing.
866:30 - And eventually you want to stop,
because it's going to become crazy long.
866:33 - But this is reasonable,
still fits on the screen.
866:35 - It's pretty tight.
866:36 - It does in one place
what I was doing in two.
866:38 - So I think that's OK.
866:39 - Let me go ahead and do Python
of Agree.py one last time.
866:42 - Let's try it one last time.
866:43 - And it's still working as intended.
866:46 - Also if I tried those
other inputs as well.
866:49 - Yeah, question.
866:49 - AUDIENCE: Could you add on like a for
uppercase as well, for like upper,
866:55 - and then cover all the functions where
it's lowercase, for all the functions
866:59 - where it's uppercase as well, or
could you not just do this again.
867:05 - DAVID J. MALAN: Let me summarize.
867:06 - Could we handle uppercase and
lowercase together in some form?
867:09 - I'm actually doing that already.
867:11 - I just have to pick a lane.
867:12 - I have to either be all lowercase
in my logic or all uppercase,
867:15 - and not worry about
what the human types in,
867:17 - because no matter what
the human types in, I'm
867:19 - forcing their input to lowercase.
867:21 - And then I am using a
lowercase list of values.
867:24 - If I want to flip that, fine.
867:26 - I just have to be self-consistent.
867:27 - But I'm handling that already.
867:28 - Yeah.
867:29 - AUDIENCE: Are strings no
longer an array of characters?
867:33 - DAVID J. MALAN: A really
good loaded questions
867:35 - are strings no longer
an array of characters?
867:38 - Conceptually, yes,
underneath the hood, no.
867:40 - They're a little more
sophisticated than that,
867:42 - because with strings,
you have a few changes.
867:45 - Not only do they have
functions built into them,
867:47 - because strings are now
what we call objects,
867:49 - in what's called
object-oriented programming.
867:51 - And we're going to keep seeing
examples of this dot operator.
867:53 - They are also immutable, so
to speak, I-M-M-U-T-A-B-L-E.
867:58 - Immutable means they cannot be
changed, which means, unlike C,
868:01 - you can't go into a string and
change its individual characters.
868:05 - You can make a copy of the
string that makes a change,
868:08 - but you can't change the
original string itself.
868:10 - This is both a little
annoying, maybe, sometimes.
868:12 - But it's also pretty protective,
because you can't do screw-ups
868:14 - like I did weeks ago, when I was
trying to copy S and call it T.
868:18 - And then one affected the other.
868:19 - Python, underneath the hood, is
handling all of the memory management
868:23 - and the pointers and all of that.
868:25 - There are no pointers in Python.
868:27 - So If that wasn't clear, all of that
pain, if you will, all of that power,
868:32 - is now handled by the language
itself, not by us, the programmers.
868:36 - All right, so let's
introduce maybe some loops,
868:38 - like we've been in the habit of doing.
868:40 - Let me open up Meow.c, which was
an example in C, just meowing
868:44 - a bunch of times textually.
868:46 - Let me create a file called
Meow.py here on the right.
868:49 - And notice on the left,
this was correct code in C,
868:51 - but it was kind of poorly designed.
868:53 - Why?
868:53 - Because it was a missed
opportunity for a loop.
868:55 - Why say something three times
when you can say it just once?
868:58 - So in Python, let me do it
the poorly designed way first.
869:02 - Let me print out meow.
869:03 - And, like I generally should not,
let me copy, paste it three times,
869:07 - run Python of Meow.py, and it works.
869:10 - OK, but not good practice.
869:11 - So let me go ahead and
improve this a little bit.
869:13 - And there's a few ways to do this.
869:15 - If I wanted to do this three times, I
could instead do something like this.
869:20 - For i in range of 3, recall that
that was the better version,
869:24 - rather than arbitrarily enumerate
numbers yourself, let me go ahead
869:27 - and print out quote unquote "Meow."
869:30 - Now if I run Python of
Meow, still seems to work.
869:32 - So it's a little tighter,
and, my God, like,
869:34 - programs can't really get
much shorter than this.
869:36 - We're down to two lines of code, no
main function, no gratuitous syntax.
869:40 - Let's now improve the
design further, like we
869:43 - did in C, by introducing
a function called
869:46 - meow, that actually does the meowing.
869:47 - So this was our first
abstraction, recall,
869:49 - both in Scratch and in C. Let me focus
now entirely on the Python version
869:54 - here.
869:55 - Let me go ahead and
first define a function.
870:03 - Let me first go ahead and do
this, for i in range of 3,
870:06 - let's assume for the moment
that there's a meow function,
870:09 - that I'm just going to call.
870:11 - Let's now go ahead and define, using
the Def key word, which we saw briefly
870:14 - with the speller
demonstration, a function
870:17 - called meow that takes no arguments.
870:19 - And all it does for now is print meow.
870:21 - Let me now go ahead and run
Python of Meow.py Enter, huh, one
870:27 - of those trace backs.
870:28 - So this is another name error.
870:30 - And, again, name meow is not defined.
870:33 - What's your instinct here,
even though we've not
870:35 - tripped over this yet in Python?
870:37 - Where does your mind go here?
870:39 - Yeah.
870:40 - AUDIENCE: Does it read top
to bottom, left to right?
870:42 - I'm guessing we could find a new case.
870:46 - DAVID J. MALAN: Perfect, as smart,
as smarter as Python seems to be,
870:49 - it still makes certain assumptions.
870:51 - And if it hasn't seen a keyword
yet, it just doesn't exist.
870:54 - So if you want it to exist, we
have to be a little clever here.
870:57 - I could just put it, flip
it around, like this.
871:00 - But this honestly isn't
particularly good design.
871:02 - Why?
871:03 - Because now, if you, the reader
of your code, whether you
871:06 - wrote it or someone else, you
kind of have to go fishing now.
871:09 - Like where does this program begin?
871:11 - And even though, yes, it's obvious
that it begins on line four, logically,
871:14 - like, if the file were longer,
you're going to be annoyed
871:17 - and fishing visually for
the right lines of code.
871:19 - So let's reintroduce main.
871:20 - And indeed, this would
be a common paradigm.
871:22 - When you want to start having
abstractions in your own functions,
871:25 - just put your own code in main, so that,
one, you can leave it up top, and two,
871:29 - you can solve the problem
we just encountered.
871:32 - So let me define a function called
main that has that same loop,
871:35 - meowing three times.
871:36 - But now watch what happens.
871:38 - Let me go into my terminal and
run Python of Meow.py, Enter.
871:43 - Nothing.
871:47 - All right, investigate this.
871:50 - What could explain this symptom.
871:52 - I have not told you the answer yet.
871:54 - So all you have is
your instinct, assuming
871:56 - you've never touched Python before.
871:58 - What might explain this symptom,
where nothing is meowing?
872:03 - Yeah?
872:03 - AUDIENCE: Didn't run the main function.
872:05 - DAVID J. MALAN: Yeah, I
didn't run the main function.
872:07 - So in C, this is functionality
you get for free.
872:09 - You have to have a main function.
872:11 - But, heck, so long as you make
it, it will be called for you.
872:14 - In Python, this is just a convention,
to create a main function,
872:17 - borrowing a very common name for it.
872:19 - But if you want to call that
main function, you have to do it.
872:22 - So this looks a little
weird, admittedly,
872:24 - that you have to call your
own main function now,
872:26 - and it has to be at
the bottom of the file,
872:28 - because only once the interpreter
gets to the bottom of the file,
872:31 - have all of your functions
been defined, higher up.
872:34 - But this solves both problems.
872:36 - It keeps your code, that's
the main part of your code,
872:38 - at the very top of the file.
872:40 - So it's just obvious to you, and
a TF, or any reader in the future,
872:43 - where the program logically starts.
872:45 - But it also ensures that main is not
called until everything else, main
872:49 - included, has been defined.
872:52 - So this is another
perfect example of we're
872:54 - learning a new language
for the first time.
872:55 - You're not going to have heard
all of the answers before.
872:57 - Just apply some logic, as to, like, all
right, what could explain this symptom.
873:01 - Start to infer how the
language does or doesn't work.
873:04 - If I now go and run this, Python of
Meow.py, now we're back in business.
873:08 - And just so you have
seen it, there is a quote
873:11 - unquote "better" way of doing this,
that solves different problems that we
873:15 - are not going to encounter,
certainly in these initial days.
873:18 - Typically, you would see in
online tutorials or books,
873:21 - something that looks like this, where
you actually have a weird conditional
873:25 - with multiple underscores.
873:27 - That's functionally the same thing,
but it solves problems with libraries,
873:30 - if we ourselves were implementing a
library or something similar in spirit.
873:34 - But we're going to keep things simpler
and just write main at the bottom,
873:37 - because we're not going to
encounter that problem just yet.
873:39 - All right, let's make one change to
this, just to show how it's done.
873:42 - In C, the last version of meow also
took command line argument, sorry, also
873:47 - took arguments to the function meow.
873:50 - So suppose that I want
to factor this out.
873:53 - And I want to just call meow as a
better abstraction, where I just
873:55 - say meow this number of times.
873:57 - And I figure out how many times
by just, like, putting in number 3
874:00 - or using getInt or something
like that, to figure out
874:03 - how many times to say meow.
874:05 - Well, now, I have to define
inside my meow function, in input,
874:08 - let's call it n, and then use that,
as by doing this, for i in range of n,
874:14 - let me go ahead and print
out meow that many times.
874:18 - So again, the only thing
that's different in C
874:20 - is we don't bother specifying return
types for any of these functions,
874:24 - and we don't bother specifying the
type of our arguments or our variables.
874:28 - So same ideas, simpler in some sense.
874:31 - We're just throwing away keystrokes.
874:33 - All right, let me run this one
final time, Python of Meow.py,
874:35 - and we still have the same program.
874:38 - All right, let me pause here.
874:40 - Any questions?
874:41 - And I know this is going fast.
874:42 - But hopefully, the C code
is still somewhat familiar.
874:47 - Yeah.
874:48 - AUDIENCE: Is there any difference
between global and local variables.
874:54 - DAVID J. MALAN: Good question.
874:55 - Is there any difference between
global and local variables?
874:57 - Short answer, yes, and we would
run into that same problem,
875:00 - if we declare a variable
in one function,
875:01 - another function is not
going to have access to it.
875:03 - We can solve that by
putting variables globally.
875:07 - But we don't have all of
the features we had in C,
875:09 - like there's no such thing
as a constant in Python.
875:11 - The mentality in the
Python community is,
875:13 - if you don't want some value
to change, don't touch it.
875:16 - Like just don't screw up.
875:17 - So there's trade-offs here, too.
875:18 - Some languages are stronger
or more defensive than that.
875:21 - But that, too, is part of the mindset
with this particular language.
875:25 - [SIREN]
875:26 - DAVID J. MALAN: Yeah.
875:27 - AUDIENCE: There is really
only one green line, in the--
875:29 - DAVID J. MALAN: Oh, sorry, where's--
875:30 - say it louder.
875:31 - AUDIENCE: There has only been
one green line printed at a time.
875:34 - DAVID J. MALAN: That
is an amazing segue.
875:36 - Let's come to that in just
a moment, because we're
875:37 - going to recreate also
that Mario example, where
875:40 - we had like the question marks for
the coins and the vertical bars.
875:43 - So let's come back to that in a second.
875:45 - And your question?
875:46 - AUDIENCE: If strings are immutable,
and every time you like make a copy.
875:49 - DAVID J. MALAN: Correct,
strings are immutable.
875:51 - Any time you seem to be modifying
it, as with the lower function,
875:55 - you're getting back a copy.
875:57 - So it's taking a little
more memory somewhere.
875:59 - But you don't have to deal with
it Python's doing that for you.
876:02 - AUDIENCE: So you don't free anything.
876:05 - DAVID J. MALAN: Say it again?
876:06 - You don't need what?
876:07 - AUDIENCE: You don't free
like taking leave on stuff.
876:11 - DAVID J. MALAN: You don't free anything.
876:12 - So if you weren't a big fan,
over the past couple of weeks,
876:15 - of malloc or free or
memory or addresses, or all
876:19 - of those low level
implementation details,
876:21 - Python is the language for
you, because all of that
876:23 - is handled for you automatically.
876:25 - Java does the same.
876:27 - JavaScript does the same.
876:28 - Yeah.
876:28 - AUDIENCE: Each up for the variable, you
put it before the name, use of the body
876:34 - before the name, correct?
876:36 - Well, if there isn't a main function in
Python, how do you define those words?
876:40 - DAVID J. MALAN: How do you
define a global variable
876:42 - if there's no main function in Python?
876:44 - Global variables, by definition, always
need to be outside of main, as well.
876:48 - So that's not a problem.
876:49 - If I wanted to have a
function that's outside of,
876:51 - and, therefore, global to
all of these, like global--
876:56 - actually, don't use the word global,
that's a special word in Python--
876:59 - variable equals Foo, F-O-O,
just as an arbitrary string
877:03 - value that a computer scientist would
typically use, that is now global.
877:07 - There are some caveats, though,
as to how you access that.
877:10 - But let's come back
to that another time.
877:12 - But that problem is solvable, too.
877:14 - All right.
877:15 - So let's go ahead and do this.
877:16 - To come back to the question about
the print command, let me go ahead
877:19 - and create a file now called Mario.py.
877:21 - Won't bother showing the C code anymore.
877:24 - We'll focus just on
the new language here.
877:26 - But recall that, in Python, in Mario, we
wanted to first do something like this.
877:31 - This was a random screen from
the side scroller version 1
877:34 - of Super Mario Brothers.
877:35 - And we just want to print like three
hashes to represent those three blocks.
877:39 - Well, in Python, we could
do something like this,
877:41 - print, oh, sorry, for i in the range of
3, go ahead and print out quote unquote
877:47 - "hash."
877:48 - And I think this is
pretty straightforward.
877:50 - Python of Mario.py, we
get our three hashes.
877:52 - You could imagine
parameterizing this now, though,
877:55 - and getting actual user input.
877:56 - So let's do that.
877:58 - Let me go up here and let me go
and say from CS50, import getInt,
878:03 - and then let's get the
input from the user.
878:07 - So it actually is a
value n, like, all right,
878:09 - getInt the height of the column
of bricks that you want to do.
878:14 - And then, let's go ahead and print
out n hashes instead of three.
878:18 - So let me run this.
878:20 - Let's print out like five hashes.
878:21 - OK, one, two, three, four,
five, that seems to work, too.
878:24 - And it's going to work
for any positive value.
878:26 - But it's not going to work
for, how about negative 1?
878:29 - That just doesn't do anything.
878:31 - But that seems OK.
878:32 - But also recall that it's not going
to work if the user types in something
878:35 - weird, like, oh, sorry, it is going
to work if the user types in something
878:40 - weird like cat, why?
878:42 - We're using CS50's
getInt function, which is
878:45 - handling all of those headaches for us.
878:48 - But, what if the user indeed
types a negative number?
878:51 - We're tolerating that.
878:52 - So that was the bug I
wanted to highlight.
878:54 - It would be nice to re-prompt
them and re-prompt them.
878:56 - And in C, what was the
programming construct we
878:59 - used when we wanted to
ask the user a question.
879:01 - And then, if they didn't cooperate,
prompt them again, prompt them again.
879:05 - What was that?
879:06 - Yeah.
879:06 - AUDIENCE: Do while loop.
879:07 - DAVID J. MALAN: Yeah,
do while loop, right?
879:08 - That was useful, because it's
almost the same as a while loop.
879:11 - But instead of checking a
condition, and then doing something,
879:14 - you do something and
then check a condition,
879:16 - which makes sense with user
input, because what are you
879:18 - even going to check if the
user hasn't done anything yet?
879:21 - You need that inverted logic.
879:22 - Unfortunately in Python,
there is no do while loop.
879:26 - There is a for loop.
879:27 - There is a while loop.
879:29 - And frankly, those are
enough to recreate this idea.
879:32 - And the way to do this in
Python, the Pythonic way, which
879:35 - is another term of art in the
community, is to say this.
879:38 - Deliberately induce an infinite loop,
while True, with capital T for true.
879:42 - And then do what you got to do,
like get an Int from a user,
879:46 - asking them for the
height of this thing.
879:48 - And then, if that is what you want, like
a number greater than zero, go ahead
879:54 - and break out of the loop.
879:56 - So this is how, in Python, you could
recreate the idea of a do while loop.
880:01 - You deliberately induce
an infinite loop.
880:03 - So something's going to
happen at least once.
880:05 - Then, if you get the answer
you want, you break out of it,
880:08 - effectively achieving the same logic.
880:10 - So this is the Pythonic way
of doing a do while loop.
880:13 - Let me go ahead and run Python
of Mario.py, type in 3 this time.
880:18 - And now I get back just
the 3 hashes as well.
880:21 - What if, though, I wanted to
get rid of, how about ultimately
880:26 - that CS50 library function, and
also encapsulate this in a function.
880:31 - Well, let's go ahead and
tweak this a little bit.
880:33 - Let me go ahead and
remove this temporarily.
880:35 - Give myself a main function, so
I don't make the same mistake
880:38 - as I did initially earlier.
880:39 - And let me give myself a function called
get height that takes no arguments.
880:43 - And inside of that function
is going to be that same code.
880:47 - But I don't want to break in
this case, I want to return n.
880:50 - So, recall, that if you return
from a function, you're done,
880:53 - you're going to exit
from right at that point.
880:55 - So this would be fine.
880:56 - You can just say return
n inside of the loop,
880:59 - or, if you would prefer
to break out, you
881:01 - could do something like this instead.
881:03 - Break, and then down here,
you could return, down here,
881:09 - you could return n as well.
881:11 - And let me make one point here
before we go back up to main.
881:13 - This is a little different
from C. And this one's subtle.
881:18 - What have I done here that in C would
have been a bug, but is apparently not,
881:23 - I claim, in Python.
881:27 - It's super subtle, this one.
881:28 - Yeah.
881:29 - AUDIENCE: So aren't we like
defining mostly object,
881:32 - like we're using it
first, defining an object?
881:35 - [INAUDIBLE]
881:40 - DAVID J. MALAN: So similar, it's
not quite that we're using it first.
881:43 - So it's OK not to declare a
variable with like the data type.
881:47 - We've addressed that before, but on line
9, we're assigning n a value, it seems.
881:51 - And then we return n on line 12.
881:55 - But notice the indentation.
881:56 - In the world of C, if we had declared
a variable inside of a loop, on line 9,
882:01 - it would have been scoped
to that loop, which
882:04 - means as soon as you get out of that
loop, like further down in the program,
882:08 - n would not exist.
882:09 - It would be local to the
curly braces therein.
882:12 - Here, logically, curly braces
are gone, but the indentation
882:16 - makes clear that n is still inside of
this loop, between lines 8 through 11.
882:20 - But n is actually still
in scope in Python.
882:23 - The moment you create a variable
in Python, for better or for worse,
882:26 - It is available everywhere within
that function, even outside
882:30 - of the loop in which you defined it.
882:32 - So this logic is actually OK in Python.
882:35 - In C, recall, to solve
this same problem,
882:38 - we would have had to do something
a little hackish like this,
882:41 - like define n up here on line 8,
so that it exists, now, on line 10,
882:46 - and so that it exists on line 13.
882:48 - That is no longer an
issue or need, in Python.
882:52 - Once you create a variable,
even if it's nested,
882:54 - nested, nested inside of
some loops or conditionals,
882:56 - it still exists within
the function itself.
883:00 - All right, any questions then on this,
before we now run this and then get
883:04 - rid of the CS50 library again?
883:08 - OK, so let me go ahead and
get the height from the user.
883:10 - Let's go ahead and create a
variable in main called height.
883:13 - Let's call this get height function.
883:14 - And then let's use that height value,
instead of something hardcoded there.
883:19 - And let me see if this all works now.
883:21 - Python of Mario.py.
883:22 - Hopefully, I haven't
messed up, but I did.
883:25 - But this is an easy fix now.
883:27 - Yeah.
883:28 - AUDIENCE: Got to call main.
883:29 - DAVID J. MALAN: I got to call main.
883:31 - So again, I deleted that earlier.
883:32 - But let me bring it back.
883:33 - So I'm actually calling main.
883:34 - Let me rerun Python of
Mario.py, there we go, height 3.
883:38 - Now it seems to be working.
883:40 - So let's do one last
thing with Mario, just
883:42 - to tie together that idea now
of exceptions from before.
883:45 - Again, exceptions are
a feature of Python,
883:47 - whereby you can try to do something.
883:49 - And if there's a problem, you can
handle it in any way you see fit.
883:53 - Previously, I handled it by just yelling
at the user that that's not an Int.
883:56 - But let's actually use this to
re-implement CS50's own getInt
883:59 - function.
884:00 - Let me throw away
CS50's getInt function.
884:03 - And now let me go ahead and
replace getInt with input.
884:09 - But it's not sufficient
to just use input.
884:12 - What do I have to add to
this line of code on line 8?
884:16 - If I want to get back an Int?
884:17 - AUDIENCE: The Int function.
884:18 - DAVID J. MALAN: Yeah, I
have to cast it to an Int
884:20 - by calling the Int
function around that value,
884:23 - or I could do it on a separate
line, just to be clear.
884:25 - I could also do n equals Int of n.
884:28 - That would work too, but it's
sort of an unnecessary extra line.
884:31 - This is not sufficient, because
that does not change the value.
884:34 - It creates the value.
884:35 - But then it throws it away.
884:36 - We need to assign it.
884:37 - So the conventional way to do this
would probably be in one line,
884:40 - just to keep things nice and tight.
884:41 - So that works fine now.
884:43 - If I run Python of Mario.py, I can
still type in 3, and all as well.
884:47 - I can still type in negative 1, because
that is an Int that I am handling.
884:52 - What I'm not yet handling
is weird input like cat
884:55 - or some string that is
not a base 10 number.
884:58 - So here, again, is my traceback.
885:00 - And notice that here, let
me scroll up a little bit,
885:03 - here we can actually see
more detail in the traceback.
885:08 - Notice that, just like in C, or just
like in the debugger in VS Code,
885:13 - you can see a few things.
885:14 - You can see mention of module, that
just means your file, main, which
885:18 - is my main function, and get height.
885:19 - So notice, it's kind of backwards.
885:20 - It's top to bottom instead
of bottom up, as we drew it
885:23 - on the board the other
day, and as we envisioned
885:25 - stacks of trays in the cafeteria.
885:27 - But this is your stack,
of functions that
885:29 - have been called, from top to bottom.
885:30 - Get height is the most recent,
main is the very first,
885:33 - value error is the problem.
885:35 - So let's try to do, let's try to do this
literally, except if there's an error.
885:40 - So what do I want to do?
885:41 - I'm going to go in here, and I'm
going to say, try to do the following.
885:46 - Whoops, try to do the following, except
if there's a value error, value error,
885:53 - then go ahead and say something,
well, like before, print,
885:57 - that's not an integer exclamation point.
886:00 - But the difference this time is
because I'm in a loop, the user
886:03 - is going to have a chance
to recover from this issue.
886:05 - So if I run Mario.py, 3
still works as before.
886:08 - If I run Mario.py and type
in cat, I detect it now,
886:12 - and because I'm still in that loop,
and because the program hasn't crashed,
886:15 - because I've caught, so to speak, the
value error, using this line of code
886:19 - here, that's the way in Python
to detect these kinds of errors,
886:23 - that would otherwise end up
being on the user's own screen.
886:26 - If I type in cat, dog,
that doesn't work.
886:28 - If I type in, though, 2, I get my two
hashes, because that's, indeed, an Int.
886:33 - Are any questions on
this, and we're not going
886:35 - to spend too much time on
exceptions, but just wanted
886:37 - to show you what's involved with
getting rid of those training wheels.
886:40 - Yeah.
886:40 - AUDIENCE: Then the hash marks in line.
886:42 - DAVID J. MALAN: OK, so let's do this.
886:43 - That actually comes to
the earlier question
886:45 - about printing the
hashes on the same line,
886:47 - or maybe something like this,
where we have the little bricks
886:50 - in the sky, or little question marks.
886:51 - Let's recreate this idea,
because the problem with print,
886:54 - as was noted earlier, is you're
automatically printing out new lines.
886:57 - But what if we don't want that.
886:58 - Well, let's change
this program entirely.
887:01 - Let me throw away all the functions.
887:02 - Let's just go to a simpler world,
where we're just doing this.
887:05 - So let me start fresh in Mario.py.
887:07 - I'm not going to bother with
exceptions or functions.
887:09 - Let's just do a very simple program, to
create this idea, for i in range of 4
887:15 - this time, because there are
four of these things in the sky.
887:19 - Let's go ahead and just
print out a question mark
887:21 - to represent each of those bricks.
887:23 - Odds are you know this not going to end
well, because these are unfortunately,
887:27 - as you've predicted, on separate lines.
887:30 - So it turns out that the
print function actually
887:33 - takes in multiple arguments, not
just the thing you want to print,
887:36 - but also some additional arguments,
that allow you to specify
887:40 - what the default line ending should be.
887:42 - But what's interesting
about this is that, if you
887:45 - want to change the line
ending to be something like,
887:49 - quote unquote, "that is
nothing," instead of backslash n,
887:53 - this is not sufficient,
because in Python, you
887:55 - can have two types of
arguments, or parameters.
887:58 - Some arguments are positional, which
is the fancy way of saying it's
888:01 - a comma separated list of arguments.
888:03 - And that's what we did all the time
in C. Something comma, something
888:06 - comma, something, we did
it in printf all the time,
888:08 - and in other functions that
took multiple arguments.
888:10 - In Python, you have, not
only positional arguments,
888:14 - where you just separate them by commas,
to give one or two or three or more
888:18 - arguments.
888:19 - There are also named arguments,
which looks weird but is
888:22 - helpful for reasons like this.
888:24 - If you read the
documentation, you will see
888:27 - that there is a named argument
that Python accepts, called end.
888:31 - And if you set that
equal to something, that
888:34 - will be used as the end
of every line, instead
888:36 - of the default, which the
documentation will also say
888:39 - is quote unquote backslash n.
888:41 - So this line here has no effect
on my logic at the moment.
888:45 - But if I change it to just quote
unquote, essentially overriding
888:49 - the default new line character, and
now run Mario again, now I get all four
888:54 - on the same line.
888:55 - There's a bit of a bug, though.
888:57 - My prompt is not meant
to be on the same line.
889:00 - So I can fix that by
just printing nothing.
889:02 - But, really, it's not nothing,
because you get the new line for free.
889:05 - So let me run Python of
Mario.py again, and now we
889:09 - have what I intended in the first
place, which was a little something that
889:12 - looked like this.
889:13 - And this is just one example
of an argument that has a name.
889:17 - But this is a common
paradigm in Python 2,
889:19 - to not just separate things by
commas, but to be very specific,
889:22 - because the print function might take
5, 10, even 20 different arguments.
889:27 - And my God, if you had to
enumerate like 10 or 20 commas,
889:31 - you're going to screw up.
889:32 - You're going to get
things in the wrong order.
889:34 - Named arguments allow you to
be resilient against that.
889:37 - So you only specify
arguments by name, and it
889:39 - doesn't matter what order they are in.
889:42 - All right, any questions, then, on
this, and the overriding of new line.
889:46 - And to be clear, you can do
something like, very weird,
889:50 - but logically expected, like this, by
just changing the line ending, too.
889:56 - But the right way to
solve the Mario problem
889:58 - would be just to override
it to be nothing like this.
890:02 - All right, how about this for cool.
890:03 - And this is why a lot
of people like Python.
890:05 - Suppose you don't really like loops.
890:06 - You don't really like
three-line programs,
890:08 - because that was kind of three
times longer than it needs to be.
890:11 - What if you just printed out
a question mark four times?
890:15 - Python, whoops, Python of
Mario.py, that also works.
890:19 - So it turns out that, just like
the plus operator in Python
890:23 - can join things together,
the multiply operator is not
890:27 - arithmetic in this case.
890:28 - It actually means, take this and
concatenate it four times over.
890:32 - So that's a way of just
distilling into one line what
890:35 - would have otherwise taken multiple
lines in C, fewer, but still multiple
890:39 - lines in Python, but is really
now rather succinct in Python,
890:43 - by doing that instead.
890:44 - Let's do one last Mario example, which
looked a little something like this.
890:48 - If this is another part
of the Mario interface,
890:50 - this is like a grid of like
3 by 3 bricks, for instance.
890:53 - So two dimensions now, just not just
vertical, not horizontal, but now both.
890:57 - Let's print out something
like that, using hashes.
890:59 - Well, how about, how do I do this.
891:02 - So how about for i in range of 3.
891:05 - Then I could do for j in range of
3, just because j comes after I
891:10 - and that's reasonable for counting.
891:12 - I could now print out a hash symbol,
well, let's see what this does.
891:17 - Python of Mario.py, OK, that's
just one crazy long column.
891:24 - What do I need to fix and where
here, to make this look like this?
891:27 - So 3 by 3 bricks, instead
of one long column.
891:32 - Any instincts?
891:32 - AUDIENCE: Why don't we create
a line and then we'll skip it.
891:37 - DAVID J. MALAN: OK, so after
printing 3, we want to skip a line.
891:39 - So maybe like print
out a blank line here.
891:42 - OK, let's try that.
891:43 - I like that instinct, right, print
3, new line, print 3, new line.
891:46 - Let's go ahead and run
Python of Mario.py.
891:48 - OK, it's more visible, what
I'm doing, but still wrong.
891:53 - What can I, what's the
remaining fix, though?
891:55 - Yeah.
891:56 - AUDIENCE: So right behind the two.
891:59 - DAVID J. MALAN: Yeah, I'm
getting an extra new line here,
892:02 - which I don't want
while I'm on this row.
892:04 - So let me do n equals quote unquote,
and now, together, your solutions might
892:08 - take us the whole way there.
892:10 - Python of Mario.py, voila, now
we've got it, in two dimensions.
892:13 - And even this, we can tighten up.
892:15 - Like, we could just use the
little trick we learned.
892:17 - So we could just say,
print a hash times 3 times,
892:21 - and we can get rid of one
of those loops altogether.
892:24 - All it's doing is, whoops, all it's
doing is automating that process.
892:27 - But, no, I don't want to do that.
892:29 - What do I, how do I fix this here.
892:31 - I don't think I want
this anymore, right?
892:33 - Because that's giving
me an extra new line.
892:34 - So now this program is
really tightened up.
892:37 - Same thing, two lines of code.
892:39 - But we're now implementing this
same two dimensional structure here.
892:43 - All right, any questions here on these?
892:46 - Yeah.
892:47 - AUDIENCE: Is there any practical reason
why when we write n, n is, I mean,
892:53 - the print function, you
don't put any spaces in it.
892:56 - DAVID J. MALAN: If I
print n, any spaces.
892:58 - Say that once more.
892:59 - AUDIENCE: Whenever we
write n, for example,
893:01 - the print function
is, you know, in order
893:05 - to stop it from going to a new
line, it seems like any spaces,
893:10 - we did like n equals and then too close.
893:14 - There were no spaces.
893:15 - Did you do that on purpose?
893:16 - DAVID J. MALAN: Oh.
893:18 - yes, good question.
893:19 - I see what you're saying.
893:20 - So in a previous version, let me
rewind in time, when we had this,
893:24 - I did not put spaces.
893:25 - The convention in Python
is not to do that.
893:28 - Why?
893:28 - It just starts to add too much space.
893:30 - And this is a little
inconsistent, because, earlier,
893:32 - when we talked about
like pluses or spaces
893:34 - around the less than or equal
signs, I did say add it.
893:37 - Here it's actually
clearer and recommended
893:39 - to keep them tighter together.
893:40 - Otherwise it just becomes harder
to read where the gaps are.
893:44 - Good observation.
893:45 - All right, let's do, how about,
another five minute break.
893:50 - Let's do that.
893:51 - And then we're going to dive into
some more sophisticated problems,
893:54 - and then ultimately build with some
audio and visual examples, as well.
893:57 - See you in five.
893:59 - All right, so almost all
of the examples we just did
894:04 - were recreations of
what we did in week 1.
894:07 - And recall that week 1 was like
our most syntax-heavy week.
894:09 - It was when we were first learning
how to program in C. But after week 1,
894:13 - we began to focus a bit
more on ideas, like arrays,
894:16 - and other higher-level constructs.
894:18 - And we'll do that again here, condensing
some of those first early weeks
894:21 - into a fewer set of examples in Python.
894:23 - And we'll culminate by actually
taking Python out for a spin,
894:26 - and doing things that
would be way harder to do,
894:28 - and way more time-consuming to do in C,
even more so than the speller example.
894:33 - But how do you go about figuring
out what functions exist,
894:36 - if you didn't hear it in
class, you don't see it online,
894:39 - but you want to see it officially, you
can go to the Python documentation,
894:43 - docs.python.org here.
894:44 - And I will disclaim that, honestly,
the Python documentation is not
894:47 - terribly user-friendly.
894:49 - Google will often be your
friend, so googling something
894:51 - you're interested in, to find your way
to the appropriate page on Python.org,
894:55 - or StackOverflow.com is
another popular website.
894:58 - As always, though, the
line should be googling
895:01 - things like, how do I convert
a string to lowercase.
895:04 - Like that's reasonable to Google.
895:05 - Or how to convert to uppercase or
how implement function in Python.
895:09 - But googling, of course, things like
how to implement problem set 6 in CS50,
895:14 - of course, crosses the line.
895:15 - But moving forward, and really with
programming in general, like Google
895:18 - and Stack Overflow are
your friends, but the line
895:20 - is between the reasonable
and the unreasonable.
895:23 - So let me officially use the
Python documentation search, just
895:26 - to search for something
like the lowercase function.
895:29 - Like, I know I can
lowercase things in Python.
895:31 - I don't quite remember how.
895:32 - So let me just search
for the word lower.
895:34 - You're going to get, often, an
overwhelming number of results,
895:37 - because Python is a pretty big
language, with lots of functionality.
895:40 - And you're going to want to
look for familiar patterns.
895:42 - For whatever reason,
string.lower, which is probably
895:45 - more popular or more commonly used than
these other ones, is third on the list.
895:48 - But it's purple, because I clicked
it a moment ago, when looking for it.
895:51 - So str.lower is probably
what I want, because I
895:54 - am interested at the moment
in lower casing strings.
895:57 - When I click on that, this is an example
of what Python's documentation tends
896:01 - to look like.
896:02 - It's in this general format.
896:03 - Here's my str.lower function.
896:05 - This returns a copy of
the string, with all
896:08 - of the cased characters
converted to lowercase,
896:10 - and the lower-casing
algorithm, dot dot dot.
896:12 - So that doesn't give me much.
896:13 - It doesn't give me sample code.
896:14 - But it does say what the function does.
896:16 - And if we keep looking, you'll see
mention of Lstrip, which is left strip.
896:20 - I used its analog, Rstrip before, right
strip, which allows you to remove,
896:24 - that is strip, from the end of a
string, something like white space,
896:27 - like a new line, or even something else.
896:29 - And if you scroll through
string, this web page here.
896:32 - And we're halfway down the page already.
896:34 - If you see my scroll
bar, tiny on the right,
896:36 - there's a huge amount of functionality
built into string objects, here.
896:41 - And this is just testament to just
how rich the language itself is.
896:44 - But it's also reason to
reassure that the goal, when
896:49 - playing around with some new
language and learning it,
896:51 - is not to learn it exhaustively.
896:53 - Just like in English
or any human language,
896:54 - there's always going to be
vocab words you don't know,
896:57 - ways of presenting the same
information in some language.
897:00 - That's going to be the case with Python.
897:01 - And what we'll do today and this
week in problem set 6 is really
897:05 - get your footing with this language.
897:06 - But you won't know all of Python,
just like you won't know all of C.
897:09 - And, honestly, you won't know all of
any of these languages on your own,
897:12 - unless you're, perhaps, using
them full time professionally,
897:15 - and even then, there's more libraries
than one might even retain themselves.
897:18 - So let's actually now
pivot to a few other ideas,
897:21 - that we'll implement
in Python, in a moment.
897:24 - Let me switch back over to VS Code here.
897:26 - And let me whip up, say, a recreation
of our scores example from week two,
897:31 - where we averaged like
three scores together.
897:34 - And that was an opportunity
in week 2 to play with arrays,
897:36 - to realize how constrained arrays are.
897:38 - They can't grow or shrink.
897:40 - You have to decide in advance.
897:41 - But let's see what's
different here in Python.
897:43 - So let me do Scores.py, and let
me give myself an array in Python
897:48 - called scores, sorry, let me give myself
a variable in Python called scores.
897:52 - Set it equal to a list
of three scores, which
897:54 - are the same ones we've used
before, 72, 73, 33, in this context
897:59 - meant to be scores, not ASCII values.
898:01 - And then let's just do
the average of these.
898:03 - So average will be another variable.
898:05 - And it turns out I can do, well,
how did I sum these before?
898:09 - I probably had a for loop to add
one, then I knew how long they were.
898:13 - Turns out in Python, you
can just say sum of scores
898:16 - divided by the length of scores.
898:18 - That's going to give me my average.
898:19 - So sum is a function that takes
a list, in this case, as input,
898:22 - and it just does the sum for
you, with a for loop or whatever
898:25 - underneath the hood.
898:26 - Len gives you the length of the
list, how many things are in it.
898:30 - So I can dynamically figure that out.
898:31 - Now let me go ahead and print out,
using print, the word average, and then,
898:36 - in curly braces, the actual
average, close quote.
898:40 - All right, so let's run this
code, Python of Scores.py.
898:42 - And there is my average, in this
case, 59.33333 and so forth,
898:47 - based on the math.
898:48 - Well, let's actually, now,
change this a little bit
898:51 - and make it a little more interesting,
and actually get input from the user
898:54 - rather than hard coding this.
898:55 - Let me go back up here and
use from CS50 import getInt,
898:59 - because I don't want to deal with
all the exceptions and the loops.
899:01 - Like, I just want to use
someone else's function here.
899:04 - Let me give myself an
empty list called scores.
899:08 - And this is not something we
were able to do in C, right?
899:11 - Because in C, if you tried
to make an empty array,
899:13 - well, that's pretty stupid,
because you can't add things to it.
899:16 - It's a fixed size.
899:17 - So it wouldn't even let you do that.
899:19 - But I can just create
an empty list in Python,
899:22 - because lists, unlike arrays,
are really lengthless.
899:24 - They'll grow and shrink.
899:26 - But you and I are not dealing with
all the pointers underneath the hood.
899:29 - Python's doing that for us.
899:31 - So now, let's go ahead and get a
whole bunch of scores from the user.
899:34 - How about three of them in total.
899:36 - So for i in range of 3, let's go
ahead and grab a score from the user,
899:41 - using getInt, asking them for score.
899:44 - And then let's go ahead and append, to
the scores list, that particular score.
899:51 - So it turns out that a list,
and I could read the Python
899:53 - documentation to confirm as much,
lists have a function built into them,
899:57 - and functions built into objects
are generally known as methods,
900:01 - if you've heard that term before.
900:03 - Same idea, but whereas a function
kind of stands on its own,
900:05 - a method is a function built
into an object, like a list here.
900:09 - That's going to achieve the
same result. Strictly speaking,
900:12 - I don't need the variable.
900:13 - Just like in C, I could tighten this
up and do something like this as well.
900:17 - But, I don't know, I
kind of like it this way.
900:19 - It's more clear, to me, at least, that
what I'm doing here, getting the score
900:22 - and then appending it to the list.
900:24 - Now the rest of the
code can stay the same.
900:26 - Python of Scores.py,
score will be 72, 73, 33.
900:31 - And I get back the math.
900:32 - But now the program's a little
more dynamic, which is nice.
900:35 - But there's other
syntax I could use here.
900:37 - Just so you've seen it, Python does
have some neat syntactic tricks,
900:40 - whereby, if you don't
want to do scores.append,
900:43 - you can actually say scores
plus equals this score.
900:47 - So you can actually concatenate
lists together in Python 2.
900:52 - Just as we used plus to
join two strings together,
900:54 - you can use plus to
join two lists together.
900:57 - The catch is, you need
to put the one score I'm
901:00 - adding here in a list of its
own, which is kind of silly.
901:03 - But it's necessary, so that this
thing and this thing are both lists.
901:07 - To do this more verbosely,
which most programmers wouldn't
901:10 - do, but just for clarity,
this is the same thing
901:12 - as saying scores plus this score.
901:15 - So now maybe it's a little more
clear that scores and brackets score
901:19 - plural, sorry, singular, are both
lists themselves, being concatenated
901:24 - or joined together.
901:25 - So two different ways, not sure
one is better than the other.
901:28 - This way is pretty common, but .append
is also quite reasonable as well.
901:34 - All right, how about another
example from week two.
901:36 - This one was called uppercase.
901:39 - So let me do this in
Uppercase.py, though, this time.
901:42 - And let me import from
CS50, get string again.
901:46 - And let me go ahead and say,
before will be my first variable.
901:50 - Let me get a string from the user,
asking them for a before string.
901:54 - And then let me go ahead and say,
after, just to demonstrate some changes,
901:59 - upper-casing to this string.
902:01 - Let me change my line ending to
be that, using our new trick.
902:04 - And this is where things get cool
in Python, relatively speaking.
902:08 - If I want to iterate over all
of the characters in a string,
902:11 - and print them out in uppercase,
one way to do that would be this.
902:14 - For c in the before string, go ahead and
print out C.uppercase, sorry, C.upper,
902:22 - but don't end the line yet, because I
want to keep these all on the same line
902:25 - until I'm all done.
902:26 - So what am I doing?
902:28 - Python of Uppercase.py, let me
type in Hello in all lowercase.
902:31 - I've just upper-cased the whole string.
902:33 - How?
902:34 - I first get string, calling it before.
902:36 - I then just print out some fluffy
text that says after colon,
902:39 - and I get rid of the line ending,
just so I can kind of line these up.
902:41 - Notice I hit the spacebar
a couple of times
902:43 - just so letters line up to be pretty.
902:45 - For c and before, this is new.
902:47 - This is powerful in C,
sorry, in Python, whereby
902:51 - you don't have to do like Int i
equals 0 and i less than this,
902:54 - you could just say, for c in the
string in question, for c and before.
902:58 - And then here is just upper-casing
that specific character,
903:02 - and making sure we don't
output a new line too soon.
903:04 - But this is actually more
work than I need to do.
903:06 - Based on what we've seen thus far,
like from our agreement example,
903:10 - can I tighten this up further?
903:12 - Can I collapse lines 5 and 6,
maybe even 7, all together?
903:16 - If the goal of this program is just
to uppercase the before string,
903:23 - how might I do this?
903:26 - Yeah, in back.
903:27 - AUDIENCE: Would it be str.upper?
903:28 - DAVID J. MALAN: Str.upper,
yeah, so I could do something
903:31 - like this, after gets before.upper.
903:34 - So it's not stir
literally dot upper, stir
903:36 - just represents the string in question.
903:38 - So it would be before.upper,
but right idea otherwise.
903:41 - And so let me go ahead and just tweak
my print statement a little bit.
903:44 - Let me just go ahead and print out the
after variable here, after creating it.
903:49 - So this line is the same, I'm
getting a string called before.
903:51 - I'm creating another variable
called after, and, as you propose,
903:55 - I'm calling upper on the whole
string, not one character at a time.
903:58 - Why?
903:58 - Because it's allowed.
903:59 - And, again, in Python, there aren't
technically characters individually.
904:03 - There's only strings, anyway.
904:05 - So I might as well do them all at once.
904:07 - So if I rerun the code now,
Python of Uppercase.py.
904:10 - Now I'll type in Hello in all
lowercase, and, oh, so close,
904:15 - I think I can get rid of
this override, because I'm
904:18 - printing the whole thing out at
once, not character by character.
904:22 - So now if I type in Hello before,
now I have an even tighter version
904:26 - of the program here.
904:28 - All right, any questions,
then, on lists or on strings,
904:32 - and what this kind of function,
upper, represents, with its docs.
904:37 - No?
904:38 - All right, so a couple other
building blocks before we start.
904:41 - Oh.
904:42 - Where was that?
904:43 - AUDIENCE: To the right.
904:44 - DAVID J. MALAN: To the right, right.
904:46 - Yes, thank you.
904:47 - AUDIENCE: Could you write, very close to
variable string, and then print upper,
904:53 - you start creating a variable upper.
904:55 - DAVID J. MALAN: Yes, do I have
to create this variable, upper?
904:58 - No, I don't.
904:59 - I could actually tighten
this up, and, if you really
905:01 - want to see something neat,
inside of the curly braces,
905:04 - you don't have to just put
the names of variables.
905:07 - You can put a small
amount of logic, so long
905:10 - as it doesn't start to look stupid and
kind of overwhelmingly complex, such
905:13 - that it's sort of bad
design at that point.
905:15 - I can tighten this up like this.
905:17 - And now we're in Python of
Uppercase.py, writing Hello again.
905:21 - And that, too, works.
905:22 - But I would be careful about this.
905:23 - You want to resist the temptation of
having like a long line of code that's
905:27 - inside the curly braces, because
it's just going to be harder to read.
905:29 - But, absolutely, you
could indeed do that, too.
905:32 - All right, how about command line
arguments, which was one thing
905:35 - we introduced in week two also, so
that we could actually have the ability
905:39 - to take input from the user, whoops.
905:43 - So we could actually take input
from the user at the command line,
905:46 - so as to take literally
command line arguments.
905:49 - These are a little different,
but it follows the same paradigm.
905:52 - There's no main by default.
And there's no Def main int
905:56 - arg c char, or we called it string,
argv by default. There's none of this.
906:02 - So if you want access to the
argument vector, argv, you import it.
906:07 - And it turns out, there's another
module in Python, or library in Python
906:11 - called CIS, and you can import from
the system this thing called argv.
906:15 - So same idea, different place.
906:17 - Now I'm going to go ahead and do this.
906:19 - Let's write a program that just requires
that the user types in two, a word,
906:24 - after the program's
name, or none at all.
906:26 - So if the length of argv equals 2,
let's go ahead and print out, how about,
906:33 - Hello comma argv bracket 1 close quote,
else if they don't type two words
906:41 - total at the prompt, let's just say
the default's, like we did weeks ago,
906:44 - Hello, world.
906:45 - So the only thing that's new here
is we're importing argv from CIS,
906:48 - and we're using this fancy f-string
format, which kind of to your point,
906:51 - too, it's putting more complex
logic in the curly braces.
906:55 - But that's OK.
906:55 - In this case, it's a list called argv,
and we're getting bracket 1 from it.
907:00 - Let's do Python of Argv.py,
Enter, Hello, world.
907:04 - What if I do Argv.py
David at the command line.
907:08 - Now I get Hello, David.
907:09 - So there's one curiosity here.
907:11 - Python is not included in
argv, whereas in C, dot
907:15 - slash whatever was the first thing.
907:18 - If the analog in Python is that
the name of your Python program
907:22 - is the first thing, in bracket 0,
which is why David is in bracket 1,
907:26 - the word Python does not appear in
the argv list, just to be clear.
907:32 - But otherwise, the
idea of these arguments
907:34 - is exactly the same as before.
907:36 - And in fact, what you can
do, which is kind of cool,
907:39 - is, because argv is a list,
you can do things like this.
907:42 - For arg in argv, go ahead
and print out each argument.
907:47 - So instead of using a
for loop and i and all
907:49 - of this, if I do Python of argv Enter,
it just writes the program's name.
907:53 - If I do Python of argv Foo,
it puts Argv.py and Foo.
907:58 - If I do, sorry, if I do Foo and
bar, those words all print out.
908:03 - If I do Foobar baz, those print out too.
908:05 - And Foo and bar or baz are like
a mathematician's x and y and z
908:08 - for computer scientists, when you
just need some placeholder words.
908:11 - So this is just nice.
908:12 - It reads a little more like English, and
a for loop is just much more concise,
908:16 - allows you to iterate very quickly
when you want something like that.
908:20 - Suppose I only wanted the real
words that the human typed
908:22 - after the program's name.
908:23 - Like, suppose I want to ignore Argv.py.
908:26 - I mean I could do something
hackish like this.
908:30 - If arg equals Argv.py,
I could just ignore,
908:35 - you know, let's invert the logic.
908:37 - I could do this, for instance.
908:39 - So if the arg does not
equal the program name,
908:41 - then go ahead and print out the word.
908:44 - So I get Foobar and baz only.
908:46 - Or, this is what's kind of neat
about Python 2, let me undo that.
908:50 - And let me just take a slice of
the array of the list instead.
908:54 - So it turns out, if argv is
a list, I can actually say,
908:59 - you know what, go into that list,
start at element 1, instead of 0,
909:03 - and then go all the way to the end.
909:05 - And we have not seen this
syntax in C. But this
909:08 - is a way of slicing a list in Python.
909:10 - So now watch what happens.
909:12 - If I run Python of
Argv.py, Foo bar baz Enter,
909:17 - I get only a subset of the
list, starting at position 1,
909:21 - going all of the way to the end.
909:23 - And you can even do
kind of the opposite.
909:25 - If, for whatever reason, you
want to ignore the last element,
909:27 - you can say colon, we
could say colon negative 1,
909:33 - and use a negative number,
which we've not seen before,
909:36 - which slices off the end
of the list, as well.
909:38 - So there's some syntactic tricks
that tend to be powerful in Python 2,
909:42 - even if at first glance, you might
not need them for typical things.
909:46 - All right, let's do one
other example with exit,
909:49 - and then we'll start actually
applying some algorithms,
909:51 - to make things interesting.
909:52 - So in one last program here, let's do
Exit.py, just to do one more mechanic,
909:56 - before we introduce some algorithms.
909:58 - And let's do this.
910:00 - Let's import from CIS, import argv.
910:05 - Let's now do this.
910:07 - Let's make sure the user gives
me one command line argument.
910:09 - So if the length of argv does not
equal 2 in total, then let's go ahead
910:16 - and print out something like
missing command line argument,
910:19 - just to explain what the problem is.
910:21 - And then let's do this.
910:23 - We can exit.
910:25 - But I'm going to use a
better version of exit here.
910:27 - Let me import two functions from CIS.
910:29 - Turns out the better way to do this is
with CIS.exit, because I can then exit
910:33 - specifically 2, with this exit code.
910:36 - Otherwise, down here, I'm going
to go ahead and print out,
910:38 - something like Hello, comma
argv bracket 1, same as before.
910:43 - And then I'm going to exit with zero.
910:44 - So, again, this was a
subtle thing we introduced
910:46 - in week two, where you can
actually have your programs exit,
910:49 - with some number, where
0 signifies success,
910:51 - and anything else signifies error.
910:53 - This is just the same idea in Python.
910:55 - So if I, for instance, just run the
program like this, oops, I screwed up.
911:00 - I meant to say exit here and exit here.
911:03 - Let me do that again.
911:04 - If I run this like this, I'm
missing a command line argument.
911:07 - So let me rerun it with
like my name at the prompt.
911:09 - So I have exactly two command line
arguments, the file name and my name,
911:13 - Hello comma David.
911:14 - And if I do David Malan, it's
not going to work either,
911:16 - because now argv does not equal 2.
911:18 - But the difference here is
that we're exiting with 1,
911:21 - so that special programs can detect an
error, or 0 in the event of success.
911:26 - And now there's one other
way to do this, too.
911:28 - Suppose that you're
importing a lot of functions,
911:30 - and you don't really want
to make a mess of things
911:33 - and just have all of these
function names available,
911:35 - without it being clear
where they came from.
911:38 - Let's just import all of CIS.
911:39 - And let's just change our syntax,
kind of like I proposed for CS50,
911:43 - where we just prepend to all
of these library functions,
911:46 - CIS, just to be super-explicit
where they came from,
911:49 - and if there's another
exit or argv value
911:55 - that we want to import from a library,
this is one way to avoid collision.
911:58 - So if I do it one last time here,
missing command line argument.
912:01 - But David still actually worked.
912:03 - All right, only to demonstrate how
we can implement that same idea.
912:06 - Let's now do something more
powerful, like a search algorithm,
912:09 - like binary search.
912:10 - I'm going to go ahead and open
up a file called Numbers.py,
912:13 - and let's just do some searching
or linear search, rather,
912:16 - on a list of numbers.
912:18 - Let's go ahead and do this.
912:20 - How about import CIS as before.
912:23 - Let me give myself a list of
numbers, like 4, 6, 8, 2, 7, 5, 0,
912:29 - so just a bunch of integers.
912:31 - And then let's do this.
912:32 - If you recall from week three,
we searched for the number 0
912:36 - at the end of the lockers on stage.
912:38 - So let's just ask that
question in Python.
912:40 - No need for a loop or
anything like that.
912:42 - If 0 is in the numbers, go
ahead and print out found.
912:46 - And then let's just exit successfully,
with 0, else, if we get down here,
912:49 - let's just say print not found.
912:52 - And then we'll CIS exit with 1.
912:55 - So this is where Python
starts to get powerful again.
912:58 - Here's your list.
912:59 - Here is your loop, that's doing
all of the checking for you.
913:02 - Underneath the hood, Python
is going to use linear search.
913:04 - You don't have to implement it yourself.
913:06 - No while loop, no for loop,
you just ask a question.
913:08 - If 0 is in numbers,
then do the following.
913:12 - So that's one feature
we now get with Python,
913:14 - and get to throw away
a lot of that code.
913:16 - We can do it with strings, too.
913:18 - Let me open a file
called Names.py instead,
913:21 - and do something that was
even more involved in C,
913:23 - because we needed Str Comp and
the for loop, and so forth.
913:26 - Let me import CIS for this file.
913:28 - Let's give myself a bunch
of names like we did in C.
913:30 - And those were Bill and Charlie
and Fred and George and Ginny,
913:38 - and two more, Percy, and lastly Ron.
913:41 - And recall, at the
time, we looked for Ron.
913:43 - And so we had to iterate
through the whole thing,
913:45 - doing Str Comp and i plus
plus and all of that.
913:48 - Now just ask the question, if Ron
is in names, then let's go ahead
913:55 - and, whoops, let me hide that.
913:56 - I hit the command too soon.
913:58 - Let me go ahead and say
print, found, as before.
914:02 - CIS exit 1, just to indicate
success, and then down here,
914:06 - if we get to this point,
we can say not found.
914:09 - And then we'll just CIS exit 1 instead.
914:12 - So, again, this just does linear search
for us by default, Python of Names.py,
914:17 - we found Ron, because, indeed, he's
there, and at the end of the list.
914:20 - But we don't need to deal with
all of the mechanics of it.
914:24 - All right, let's take
things one step further.
914:27 - In week three, we also
implemented the idea
914:29 - of a phone book, that actually
associated keys with values.
914:33 - But remember, the phone book in
C, was kind of a hack, right?
914:36 - Because we first had two arrays,
one with names, one with numbers.
914:40 - Then we introduced structs, and
so we gave you a person structure.
914:43 - And then we had an array of persons.
914:47 - You can do this in Python, using
objects and things called classes.
914:51 - But we can also just use a
general purpose dictionary,
914:54 - because just like in P set 5, you
can associate keys with values, using
914:57 - a hash table, using a try.
914:59 - Well, similarly, can
Python just do this for us.
915:02 - From CS50, let's import get string.
915:05 - And now let's give myself
a dictionary of people,
915:09 - D-I-C-T () open paren closed
paren gives you a dictionary.
915:13 - Or you can simplify
the syntax, actually,
915:15 - and a dictionary again is just keys
and values, words and definitions.
915:18 - You can also just use
curly braces instead.
915:21 - That gives me an empty dictionary.
915:23 - But if I know what I want to put in it
by default, let's put Carter in there,
915:26 - with a number of plus 1-617-495-1000,
just like last time, and put myself,
915:34 - David, with plus 1-949-468-2750.
915:40 - And it came to my attention,
tragically, after class that day,
915:42 - that we had a bug in
our little Easter egg.
915:44 - If today, you would like to call
me or text me, at that number,
915:47 - we have fixed the code that
underlies that little Easter egg.
915:50 - Spoiler ahead.
915:51 - All right, so this now
gives me a variable
915:53 - called people, that's
associating keys with values.
915:57 - There is some new syntax here in
Python, not just the curly braces,
916:01 - but the colons, and the quotes
on the left and the right.
916:04 - This is a way, in Python,
of associating keys
916:07 - with values, words with definitions,
anything with anything else.
916:11 - And it's going to be a super-common
paradigm, including in week seven,
916:15 - when we look at CSS and HTML and
web programming, keys and values
916:18 - are like this omnipresent idea in
computer science and programming,
916:22 - because it's just a really useful way
of associating one thing with another.
916:25 - So, at this point in the story, we
have a dictionary, a hash table,
916:29 - if you will, of people, associating
names with phone numbers,
916:32 - just like a real world phone book.
916:34 - So let's write a program that gets
a string from the user and asks them
916:37 - whose number they would like to look up.
916:39 - Then, let's go ahead and say, if that
name is in the people dictionary,
916:46 - go ahead and print out
that person's number,
916:48 - by going into the people
dictionary and going
916:51 - to that specific name, within there,
using an f-string for the whole thing.
916:56 - So this is similar in spirit to before.
916:58 - Linear search and dictionary lookups
will just happen automatically for you
917:02 - in Python, by just asking the
question, if name and people.
917:05 - And this line is just
going to print out,
917:07 - whoever is in the people
dictionary, at that name.
917:12 - So I'm using square brackets, because
here's the interesting thing in Python,
917:16 - just like you can index into
an array, or a list in Python,
917:19 - using numbers, 0, 1, 2, you
can very conveniently index
917:24 - into a dictionary in Python,
using square brackets, as well.
917:29 - And just to make clear what's
going on here, let me go
917:32 - and create a temporary variable,
person equals people bracket name.
917:37 - And then let's just, or, sorry, let's
say, number equals people bracket name.
917:41 - And that will just print
out the number in question.
917:44 - In C, and previously in Python,
anything with square brackets like this
917:48 - would have been go to a location in
a list or an array, using a number.
917:53 - But that can actually be a string,
like a word the human has typed.
917:57 - And this is what's amazing
about dictionaries,
917:59 - it's not like a big
line, a big linear thing.
918:02 - It's this table, that you can
look up in one column the name,
918:05 - and get back in the
other column the number.
918:07 - So let's go ahead and run
Python of Phonebook.py,
918:09 - found, not that, oh, wait.
918:14 - That's not what's
supposed to happen at all.
918:18 - I think I'm in the wrong play.
918:19 - Phonebook.py.
918:23 - What's going on?
918:25 - Print found.
918:28 - I am confused.
918:30 - OK, let's run this again.
918:32 - Python of Phonebook.py, what the--
918:36 - OK, stand by.
918:43 - [KEYS CLICKING]
918:54 - What the heck?
918:55 - What am I not understanding here?
919:00 - OK, Roxanne, Carter, do you
see what I'm doing wrong?
919:03 - AUDIENCE: I don't.
919:05 - DAVID J. MALAN: What the--
919:08 - [LAUGHTER]
919:10 - Say again?
919:10 - SPEAKER 47: When you found the test
results, it was doing both commands.
919:14 - DAVID J. MALAN: Oh, yeah, found,
OK, we're going to do this.
919:19 - One sec.
919:22 - [KEYS CLICKING]
919:28 - Whoa, OK.
919:31 - All this is coming out of the video.
919:33 - So.
919:34 - [LAUGHTER]
919:35 - [APPLAUSE]
919:37 - Thanks.
919:41 - All right.
919:42 - I will try to figure out
what was going wrong.
919:44 - The best I can tell, it was
running the wrong program.
919:47 - I don't quite understand why.
919:49 - So we will diagnose this later.
919:50 - I just put the file into a temporary
directory, for now, to run it.
919:53 - So let me go ahead and just run
this, Python of Phonebook.py,
919:59 - type in, for instance, my name.
920:00 - And there's my corresponding number.
920:02 - Have no idea what was just happening.
920:04 - But I will get to the
bottom of it and update you,
920:06 - if we can put our finger on it.
920:07 - So this was just an example, now,
of implementing a phone book.
920:11 - Let's now consider what we
can do that's a little more
920:14 - powerful, in these examples,
like a phone book that
920:16 - actually keeps this information around.
920:18 - Thus far, these simple phone book
examples throw the information away.
920:22 - But using CSV files,
comma separated values,
920:25 - maybe we could actually keep
around the names and numbers,
920:28 - so that, like on your
phone, you can actually
920:29 - keep your contacts around long-term.
920:32 - So I'm going to go ahead now and
do a slightly different example.
920:35 - And let me just hide this
detail, so it's not confusing.
920:39 - Whoops, I'm going to change
my prompt temporarily.
920:43 - So let me go ahead now and
refine this example as follows.
920:47 - I'm going to go into
Phonebook.py, and I'm
920:50 - going to import a whole
library called CSV.
920:52 - And this is a powerful
one, because Python
920:54 - comes with a library that just
handles CSV files for you.
920:58 - A CSV file is just a file
with comma separated values.
921:02 - And, in fact, to demonstrate
this, let me check on one thing
921:06 - here, just to make this
a little more real.
921:08 - To demonstrate this, let's
go ahead and do this.
921:15 - Let me import the CSV library from CS50.
921:18 - Let me import getString.
921:20 - Let me then open a file,
using the open function,
921:24 - open a file called
Phonebook.csv, in append format,
921:28 - in contrast with read
format and write format.
921:31 - Write just blows it away if it exists,
append adds to the bottom of it.
921:34 - So I keep this phone book
around, just like you might
921:37 - keep adding contacts to your phone.
921:39 - Now let me go ahead and get a
couple of values from the user.
921:41 - Let me say getString and
ask the user for a name.
921:45 - Then let me getString again, and
ask the user for their number.
921:50 - And now, let me go ahead and do this.
921:52 - And this is new, and
this is Python-specific.
921:54 - And you would only know this
by following a tutorial,
921:57 - or reading the documentation.
921:59 - Let me give myself a
variable called writer,
922:01 - and ask the CSV library
for a writer to that file.
922:06 - Then, let me go ahead and
use that writer variable,
922:09 - use a function or a method
inside of it, called write row,
922:13 - to write out a list containing
that person's name and number.
922:17 - Notice the square brackets
inside the parentheses,
922:20 - because I'm just printing a list
to that particular row in the file.
922:25 - And then I'm just going
to close the file.
922:27 - So what is the effect of all of this?
922:29 - Well, let me go ahead and run
this version of Phonebook.py,
922:31 - and I'm prompted for a name.
922:33 - Let's do Carter's first, plus
1-617-495-1000, and then,
922:41 - let's go ahead and LS.
922:44 - Notice in my current directory,
there's two files now, Phonebook.py,
922:47 - which I wrote, and
apparently Phonebook.csv.
922:50 - CSV just stands for
comma separated values.
922:53 - And it's like a very simple way
of storing data in a spreadsheet,
922:56 - if you will, where the comma represents
the separation between your columns.
923:00 - There's only two columns
here, name and number.
923:02 - But, because I'm writing to
this file in append mode,
923:06 - let me run it one more time,
Python of Phonebook.py,
923:09 - and let me go ahead and do David
and plus 1-949-468-2750, Enter.
923:18 - And notice what happened
in the CSV file.
923:19 - It automatically updated,
because I'm now persisting
923:22 - this data to the file in question.
923:25 - So if I wanted to now
read this file in, I
923:27 - could actually go ahead and
do linear search on the data,
923:32 - using a read function to
actually read from the CSV.
923:35 - But, for now, we'll just leave
it a little simply as write.
923:37 - And let me make one refinement here.
923:39 - It turns out that, if you're in
the habit of re-opening a file,
923:43 - you don't have to even
close it explicitly.
923:45 - You can instead do this.
923:47 - You can instead say, with the opening
of a file called Phonebook.csv
923:52 - in append mode, calling the thing file,
go ahead and do all of these lines
923:57 - here.
923:58 - So the with keyword is
a new thing in Python.
924:00 - And it's used in a few different
ways, but one of the ways it's used
924:03 - is to tighten up code here.
924:04 - And I'm going to move my
variables to the outside,
924:06 - because they don't need to be
inside of the with statement,
924:09 - where the file is open.
924:10 - This just has the effect of
ensuring that you, the programmer,
924:12 - don't screw up, and accidentally
don't close your file.
924:15 - In fact, you might
recall, from C, Valgrind
924:17 - might have complained at you, if you had
a file that, you didn't close a file,
924:21 - you might have had a memory leak
as a result. The with keyword
924:24 - takes care of all of
that for you, as well.
924:28 - How about let's do, want to do this.
924:31 - How about, let's do one other thing.
924:34 - Let's do this.
924:35 - Let me go ahead and propose,
that on your phone or laptop
924:38 - here, or online, go to this URL here,
where you'll find a Google form.
924:43 - And just to show that these CSVs
are actually kind of omnipresent,
924:46 - and if you've ever
like used a Google Form
924:48 - or managed a student group,
or something where you've
924:50 - collected data via Google
Forms, you can actually
924:52 - export all of that data via CSV files.
924:55 - So go ahead to this URL here.
924:57 - And those of you
watching on demand later,
924:59 - will find that the form
is no longer working,
925:01 - since we're only doing this live.
925:02 - But that will lead to
a Google Form that's
925:04 - going to let everyone input
their answer to a question,
925:07 - like what house do you
want to end up into,
925:10 - sort of an approximation of the
sorting hat in Harry Potter.
925:13 - And via this form, will we then
have the ability to export,
925:17 - we'll see, a CSV file.
925:20 - So let's give you a moment to do that.
925:24 - In just a moment, I'll share
my version of the screen, which
925:26 - is going to let me actually
open the file, the form itself.
925:30 - And in just a moment, I'll switch over.
925:35 - OK, so this is now my
version of the form
925:37 - here, where we have 200 plus responses
to a simple question of the form, what
925:40 - house do you belong in, Gryffindor,
Hufflepuff, Ravenclaw, or Slytherin.
925:44 - If I go over to responses, I'll see all
of the responses in the GUI form here.
925:49 - So graphical user interface,
and we could flip through this.
925:51 - And it looks like, interestingly,
40% of Harvard students
925:56 - want to be in Gryffindor, 22%
in Slytherin, and everyone else
926:00 - in between the others.
926:01 - But you might have noticed,
if ever using a Google Form,
926:03 - this Google Spreadsheets link.
926:05 - So I'm going to go ahead and click that.
926:06 - And that's going to automatically open,
in this case, Google Spreadsheets.
926:08 - But you can do the same thing
with Office 365 as well.
926:11 - And now you see the raw
data as a spreadsheet.
926:14 - But in Google Spreadsheets, if I go
to File and then I go to Download,
926:19 - notice I can download this as
an Excel file, a PDF, and also
926:23 - a CSV, comma separated values.
926:25 - So let me go ahead and do that.
926:27 - That gives me a file in my
Downloads folder on my computer.
926:30 - I'm going to now go back
to my code editor here.
926:34 - And what I'm going to go
ahead and do is upload
926:36 - this file, from my
Downloads folder to VS Code,
926:40 - so that we can actually
see it within here.
926:43 - And now you can see this open file.
926:44 - And I'm going to shorten its name,
just so it's a little easier to read.
926:47 - I'm going to rename this using the
MV command, to just Hogwarts.csv.
926:52 - And then we can see, in the file, that
there's two columns, timestamp column
926:55 - house, where you have a
whole bunch of time stamps
926:57 - when people filled out the form,
with someone very early in class.
927:00 - And then everyone else
just a moment ago.
927:02 - And the second value, after each
comma, is the name of the house.
927:05 - Well, let me go ahead here
and implement a program
927:08 - in a file called Hogwarts.py,
that processes this data.
927:12 - So in Hogwarts.py, let's
just write a program
927:14 - that now reads a CSV, in
this case not a phone book,
927:17 - but everyone's sorting hat information.
927:19 - And I'm going to go
ahead and Import CSV.
927:21 - And suppose I want to answer a
reasonable question, ignoring
927:25 - the fact that Google's GUI or graphical
user interface, can do this for me.
927:28 - I just want to count up who's
going to be in which house.
927:31 - So let me give myself a dictionary
called houses, that's initially empty,
927:36 - with curly braces.
927:37 - And let me pre-create a few keys.
927:39 - Let me say Gryffindor is
going to be initialized to 0,
927:44 - Hufflepuff will be initialized
to 0 as well, Ravenclaw
927:48 - will be initialized to 0.
927:49 - And finally, Slytherin
will be initialized to 0.
927:53 - So here's another example of
a dictionary, or a hash table,
927:56 - just being a very
general-purpose piece of data.
927:58 - You can have keys and values.
928:00 - The keys, in this case, are the houses.
928:01 - The values are initially zero,
but I'm going to use this,
928:05 - instead of like four separate variables,
to keep track of everyone's answer
928:10 - to this form.
928:11 - So I'm going to do this.
928:12 - With opening Hogwarts.csv, in read mode,
not append, I don't want to change it.
928:19 - I just want to read it, as
file as my variable name.
928:22 - Let's go ahead and create
a reader this time,
928:26 - that is using the reader function in
the CSV library, by opening that file.
928:31 - I'm going to go ahead and ignore
the first line of the file,
928:33 - because, recall, that the first
line is just timestamp and house.
928:36 - I want to get the real data.
928:37 - So this next function
is just a little trick
928:40 - for ignoring the first line of the file.
928:43 - Then let's do this.
928:44 - For every other row in the
reader, that is line by line,
928:48 - get the current person's house,
which is in row bracket 1.
928:51 - This is what the CSV reader
library is doing for us.
928:54 - It's handling all of the
reading of this file.
928:56 - It figures out where the comma is,
and, for every row in the file,
929:00 - it hands you back a list of size 2.
929:02 - In bracket 0 is the time stamp,
in bracket 1 is the house name.
929:07 - So, in my code, I can say
house equals row bracket 1.
929:11 - I don't care about the time
stamp for this program.
929:13 - And then let's go into my dictionary
called houses, plural, index
929:17 - into it at the house location, by
its name, and increment that 0 to 1.
929:23 - And now, at the end
of this block of code,
929:26 - that has the effect of iterating
over every line of the file,
929:29 - updating my dictionary
in four different places,
929:31 - based on whether someone typed
Gryffindor or Slytherin or anything
929:35 - else.
929:36 - And notice that I'm using the name of
the house to index into my dictionary,
929:40 - to essentially go up to this little
cheat sheet and change the 0 to a 1,
929:44 - the 1 to a 2, the 2 to
a 3, instead of having
929:46 - like four separate
variables, which would just
929:48 - be much more annoying to maintain.
929:50 - Down at the bottom, let's
just print out the results.
929:52 - For each house in those
houses, iterating over
929:56 - the keys they're in
by default in Python,
929:58 - let's go ahead and print
out an f-string that says,
930:01 - the current house has the current count.
930:05 - And count will be the result of indexing
into houses, for that given house.
930:11 - And let me close my quote.
930:13 - So let's run this to summarize
the data, Hogwarts.py, 140 of you
930:18 - answered Gryffindor, 54 Hufflepuff,
72 Ravenclaw, and 80 of you Slytherin.
930:22 - And that's just my now way
of code, and this is, oh,
930:25 - my God, so much easier than C, to
actually analyze data in this way.
930:28 - And one of the reasons that Python is so
popular for data science and analytics,
930:32 - more generally, is that it's actually
really easy to manipulate data, and run
930:36 - analytics like this.
930:37 - And let me clean this up slightly.
930:38 - It's a little annoying that
I just have to know and trust
930:41 - that the house name is in bracket
1 and timestamp is in bracket 0.
930:46 - Let's clean this up.
930:47 - There's something called a
Dictionary Reader in the CSV library
930:53 - that I can use instead.
930:54 - Capital D, capital R, this means
I can throw away this next thing,
930:58 - because what a dictionary
reader does is it
931:01 - still returns to me every row from
the file, one after the other,
931:05 - but it doesn't just give me a list
of size 2 representing each row.
931:09 - It gives me a dictionary.
931:10 - And it uses, as the keys in that
dictionary, timestamp and house,
931:15 - for every row in the
file, which is just to say
931:17 - it makes my code a little
more readable, because instead
931:20 - of doing this little
trickery, bracket 1,
931:23 - I can say quote unquote "Bracket
House" with a capital H,
931:26 - because it's capitalized
in the Google Form itself.
931:28 - So the code now is
just minorly different,
931:31 - but it's way more resilient, especially
if I'm using Google Spreadsheets,
931:34 - and I'm moving the columns around
or doing something like that,
931:36 - where the numbers might get messed up.
931:38 - Now I can run this on Hogwarts.py
again, and I get the same answers.
931:41 - But I now don't have to worry about
where those individual columns are.
931:46 - All right, any questions on
those capabilities there.
931:51 - And that's a teaser of sorts,
for some of the manipulation
931:53 - we'll do in P set 6.
931:56 - All right, so some final
examples and flair, to intrigue
932:00 - with what you can do with Python.
932:01 - I'm going to actually switch over
to a terminal window on my own Mac,
932:05 - so that I can actually use
audio a little more effectively.
932:08 - So here's just a terminal
window on Mac OS.
932:10 - I before class have preinstalled
some additional Python libraries,
932:14 - that won't really work
in VS Code in the cloud,
932:16 - because they require audio that the
browser won't necessarily support.
932:20 - But I'm going to go ahead
and write an example here
932:22 - that involves writing a speech-based
program, that actually does something
932:26 - with speech.
932:26 - And I'm going to go ahead
and import a library,
932:28 - that, again, I pre-installed,
called Python text to speech,
932:32 - and I'm going to go ahead
and, per its documentation,
932:34 - give myself a speech engine, by
using that library's init function,
932:39 - for initialize.
932:40 - I'm then going to use this
engine's save function
932:43 - to do something fun, like Hello, world.
932:45 - And then I'm going to go ahead and
tell this engine to run and wait,
932:49 - while it says those words.
932:50 - All right, I'm going to save this file.
932:52 - I'm not using VS Code at the moment.
932:53 - I'm using another popular program
that we used in CS50 back in my day,
932:56 - called Vim, which is a
command line program that's
932:59 - just in this black and white window.
933:01 - Let me go ahead now and run
Python of Speech.py, and--
933:05 - COMPUTER: Hello, world.
933:07 - DAVID J. MALAN: All right, so
it's a little computerized,
933:09 - but it is speech that has been
synthesized from this example.
933:12 - Let's change it a little
bit to be more interesting.
933:14 - Let's do something like this.
933:16 - Let's ask the user for their name,
like what's your name question mark.
933:20 - And then, let's use the little F
string, and say, not Hello, world,
933:24 - but Hello to that person's name.
933:26 - Let me save my file, run
Python of Speech.py, Enter.
933:30 - David.
933:31 - COMPUTER: Hello, David.
933:33 - DAVID J. MALAN: All right,
so we pronounce my name OK,
933:36 - might struggle with different
names, depending on the phonetics.
933:38 - But that one seemed to be OK.
933:40 - Let's do something else with
Python, using similarly,
933:42 - just a few lines of code.
933:44 - Let me go into today's examples.
933:49 - And I'm going to go into a folder
called Detect, whoops, a folder called
933:54 - Faces.py.
933:56 - Sorry, Faces.
933:57 - And in this folder, that
I've written in advance,
933:59 - are a few files,
Detect.py, Recognize.py,
934:02 - and two full of photos,
Office.jpeg and Toby.jpeg.
934:06 - If you're familiar with the
show, here, for instance,
934:09 - is the cast photo from The Office here.
934:11 - So here's a photo as input.
934:12 - Suppose I want to do
something very Facebook-style,
934:15 - where I want to analyze
all of the faces,
934:17 - or detect all of the faces in there.
934:19 - Well, let me go ahead
and show you a program
934:21 - I wrote in advance,
that's not terribly long.
934:24 - Much of it is actually comments.
934:25 - But let's see what I'm doing.
934:27 - I'm importing the Pillow library,
again, to get access to images.
934:30 - I'm importing a library called face
recognition, which I downloaded
934:34 - and installed in advance.
934:35 - But it does what it says.
934:36 - According to its documentation,
you go into that library
934:39 - and you call a function
called load image
934:41 - file, to load something
like Office.jpeg,
934:43 - and then you can use the
line of code like this.
934:46 - Call a function called face
locations, passing the images input,
934:50 - and you get back a list of
all of the faces in the image.
934:53 - And then down here, a for loop,
that iterates over all of those
934:57 - face locations.
934:58 - And inside of this loop, I
just do a bit of trickery.
935:01 - I figure out the top, right, bottom,
and left corners of those locations.
935:06 - And then, using these
lines of code here,
935:08 - I'm using that image library,
to just draw a box, essentially.
935:11 - And the code looks cryptic.
935:12 - Honestly, I would have to look
this up to write it again.
935:14 - But per the documentation, this
just draws a nice little box
935:17 - around the image.
935:18 - So let me go ahead and zoom out here,
and run this now on Office.jpeg.
935:24 - All right, it's analyzing, analyzing,
and you can see in the sidebar here,
935:29 - here's the original.
935:30 - And here is every face that my,
what, 10 lines of Python code
935:35 - found, within that file.
935:37 - What's a face?
935:37 - Presumably the library
is looking for something,
935:40 - maybe without a mask, that has
two eyes, a nose, and a mouth,
935:43 - in some kind of arrangement,
some kind of pattern.
935:45 - So it would seem pretty reliable, at
least on these fairly easy-to-read
935:48 - faces here.
935:49 - What if we want to look
for someone specific,
935:52 - for instance, someone that's
always getting picked on.
935:53 - Well, we could do something like this.
935:55 - Recognize.py, which is taking two files
as input, that image and the image
935:59 - of one person in particular.
936:01 - And if you're trying to
find Toby in a crowd,
936:03 - here I conflated the program,
sorry, this is the version that
936:06 - draws a box around the given face.
936:08 - Here we have Toby as identified.
936:10 - Why?
936:10 - Because that program, Recognize.py,
has a few more lines of code,
936:14 - but long story short, it additionally
loads as input Toby.jpeg,
936:19 - in order to recognize
that specific face.
936:21 - And that specific face is a
completely different photo,
936:24 - but it looks similar enough to the
person, that it all worked out OK.
936:29 - Let's do one other that's a
little sensitive to microphones.
936:32 - Let me go into, how about my listen
folder here, which is available
936:37 - online, too.
936:38 - And let's just run Python of Listen0.py.
936:40 - I'm going to type in like David.
936:43 - Oh, sorry, no, I'm going to--
936:47 - Hello, world.
936:52 - Oh, no, that's the wrong version.
936:53 - [CHUCKLES] OK, I looked like an idiot.
936:55 - OK, hello, there we go.
936:58 - Hello to you, too.
936:58 - And if I say goodbye, I'm talking
to my laptop like an idiot, OK.
937:02 - Now it's detecting what I'm saying here.
937:05 - So this first version of the program is
just using some relatively simple, if
937:08 - elif elif, and it's just asking
for input, forcing it to lowercase.
937:12 - And that was my mistake
with the first example.
937:14 - And then, I'm just checking,
is Hello in the user's words?
937:17 - Is how are you in the user's words?
937:19 - Didn't see that, but it's there.
937:20 - Is goodbye in the user's words?
937:21 - Now let's do a cooler version, using a
library, just by looking at the effect.
937:25 - Python of Listen1.py.
937:27 - Hello, world.
937:32 - Huh.
937:33 - Let's do version 2 of this, that
uses an audio speech-to-text library.
937:40 - Hello, world.
937:43 - OK, so now it's artificial intelligence.
937:46 - Now let's do something a
little more interesting.
937:48 - The third version of this program that
actually analyzes the words that are
937:51 - said.
937:53 - Hello, world, my name is David.
937:55 - How are you?
937:59 - OK, so that time, it not
only analyzed what I said,
938:02 - but it plucked my name out of it.
938:04 - Let's do two final examples.
938:07 - This one will generate a QR code.
938:09 - Let me go ahead and
write a program called
938:11 - QR.py, that very simply does this.
938:15 - Let me import a library called OS.
938:17 - Let me import a library called QR code.
938:19 - Let me grab an image
here, that's QRcode.make.
938:24 - And let me give you the URL of like a
lecture video on YouTube, or something
938:27 - like that, with this ID.
938:31 - Let me just type this,
so I don't get it wrong.
938:36 - OK, so if I now use this URL here,
of a video on YouTube, making
938:41 - sure I haven't made any
typos, I'm now going
938:44 - to go ahead and do two
lines of code in Python.
938:46 - I'm going to first save that as
a file called QR.png, which is
938:49 - a two dimensional barcode, a QR code.
938:52 - And, indeed, I'm going
to use this format.
938:53 - And I'm going to use the OS.system
library to open QR.png automatically.
939:00 - And if you'd like to take
out your phone at this point,
939:02 - you can see the result of my barcode,
that's just been dynamically generated.
939:08 - Hopefully from afar that will scan.
939:13 - [UPROAR]
939:16 - And I think that's an
appropriate line to end on.
939:18 - So that's it for CS50.
939:20 - We will see you next time.
939:22 - [APPLAUSE]
939:25 - [MUSIC PLAYING]
939:29 - [MUSIC PLAYING]
940:43 - DAVID J. MALAN: This is CS50.
940:45 - And this is week 7, the
week, here, of Halloween.
940:48 - Indeed, special thanks to
CS50's own Valerie and her mom
940:51 - for having created this very festive
scenery, and all past ones as well.
940:55 - Today, we pick up where
we left off last time,
940:58 - which, recall, we introduced Python.
941:00 - And that was our big transition
from C, where suddenly things
941:03 - started to look new again,
probably, syntactically.
941:06 - But also, probably things
hopefully started to feel easier.
941:09 - Well, with that said, problem set
6 certainly added some challenges,
941:13 - and you did some new things.
941:14 - But hopefully you've begun to appreciate
that with Python, just a lot more stuff
941:18 - is easier to do.
941:19 - You get more out of the box
with the language itself.
941:22 - And that's going to be so
useful over the coming weeks
941:24 - as we transition further to introducing
something called databases today,
941:29 - web programming next
week and the week after.
941:31 - So that by term's end, and perhaps
even for your final project,
941:34 - you really are building
something from scratch
941:37 - using all of these various
tools somehow together.
941:40 - So before we do that,
though, today, let's consider
941:42 - what we weren't really able to
do last week, which was actually
941:47 - create and store data ourselves.
941:50 - In Python, we've played around with the
CSV, comma-separated values library.
941:56 - And you've been able to
read in CSVs from disk,
941:59 - so to speak, that is, from files
in your programming environments.
942:03 - But we haven't necessarily started
saving data, persisting data ourselves.
942:06 - And that's a huge limitation, because
pretty much all of the examples
942:09 - we've done thus far with
a couple of exceptions
942:11 - have involved my providing input
at the keyboard or even vocally.
942:14 - But then nothing happens to it.
942:16 - It disappears the moment
the program quits,
942:18 - because it was only
being stored in memory.
942:20 - But today, we'll start to focus all
the more on storing things on disk,
942:24 - that is, storing things
in files and folders
942:27 - so that you can actually
write programs that remember
942:30 - what it is the human did last time.
942:31 - And ultimately, you can
actually make mobile or web apps
942:34 - that actually begin to grow, and
grow, and grow their data sets,
942:37 - as might happen if you get more and
more users, for instance, on a website.
942:40 - To play, then, with this new capability
of being able to write files,
942:44 - let's go ahead and
just collect some data.
942:47 - In fact, those of you
here in person, if you
942:49 - want to pull up this URL
on your phone or laptop,
942:52 - that's going to lead
you to a Google Form.
942:54 - And that Google Form is going to
ask you in just a moment for really
942:59 - just your favorite TV show.
943:00 - And it's going to ask
you to categorize it
943:02 - according to a genre, like comedy,
or drama, or action, or musical,
943:06 - or something like that.
943:07 - And this is useful,
because if you've ever
943:09 - used a Google Form before, or
Microsoft's equivalent with Office 365,
943:12 - it's a really useful mechanism at
just collecting data from users,
943:15 - and then ultimately, putting
it into a spreadsheet form.
943:19 - So this is a screenshot of
the form that those of you
943:23 - here in person or tuning in on
Zoom are currently filling out.
943:26 - It's asking only two questions.
943:27 - What's the title of
your favorite TV show?
943:29 - And what are one or more genres
into which your TV show falls?
943:34 - And I'll go ahead and
pivot now to the view
943:38 - that I'll be able to see as the
person who created this form, which
943:41 - is quite simply a Google spreadsheet.
943:42 - Google Forms has this nice
feature, if you've never noticed,
943:45 - that allows you to export your
data to a Google Spreadsheet.
943:47 - And then from there, we
can actually grab the file
943:50 - and download it to my
own Mac or your own PC
943:52 - so that we can actually play around
with the data that's come in.
943:55 - So in fact, let me go
ahead and slide over
943:57 - to this, the live Google Spreadsheet.
944:01 - And you'll see, probably, a whole
bunch of familiar TV shows here,
944:05 - all coming in.
944:06 - And if we keep scrolling, and
scrolling, and scrolling--
944:09 - only 46, 47.
944:10 - There we go, up to 50 plus already.
944:12 - If you need that URL again
here, if you're just tuning in,
944:15 - you can go to this URL here.
944:18 - And in just a moment,
we'll have a bunch of data
944:21 - with which we can start to experiment.
944:24 - I'll give you a moment or so there.
944:31 - All right.
944:33 - Let me hang in there a little longer.
944:35 - OK, we've got over 100 submissions.
944:36 - Good.
944:37 - Good, even more coming in now.
944:40 - And we can see them coming in live.
944:42 - Here, let me switch
back to the spreadsheet.
944:44 - The list is growing, and
growing, and growing.
944:46 - And in just a moment--
944:48 - let me give Carter a moment to
help me export it in real time.
944:51 - Carter, just give me a heads
up when it's reasonable for me
944:54 - to download this file.
944:58 - All right, and I'll begin
to do this very slowly.
945:00 - So I'm going to go up to the File
menu, if you've never done this before.
945:03 - Download-- you can download a whole
bunch of formats, one in Excel.
945:05 - But more simply, and the one
we'll start to play with here,
945:07 - is comma-separated values.
945:08 - So CSV files we used this past
week, why are they useful?
945:12 - Now that you've played with them
or used them in past real world,
945:15 - what's the utility of a CSV file versus
something like Excel, for instance?
945:20 - Why CSV in the first place?
945:24 - Any instincts?
945:25 - Yeah?
945:26 - AUDIENCE: Because it's just a text file?
945:28 - DAVID J. MALAN: OK, so
storage is compelling.
945:29 - A simple text file with ASCII or
Unicode text is probably pretty small.
945:33 - I like that.
945:33 - Other thoughts?
945:35 - AUDIENCE: Structure of it?
945:36 - DAVID J. MALAN: Yeah, well said.
945:37 - It's just a simple text
format, but using conventions
945:40 - like commas you can represent the
idea of columns using new lines,
945:43 - backslash ends invisibly
at the end of your lines,
945:45 - you can create the idea of rows.
945:47 - So it's a very simple
way of implementing what
945:49 - we might call a flat-file database.
945:51 - It's a way of storing
data in a flat, that is,
945:54 - very simple file that's just
pure ASCII or Unicode text.
945:57 - And more compellingly, I dare
say, is that with a CSV file,
946:00 - it's completely portable.
946:02 - Something is portable in
the world of computing
946:04 - if it means you can use it on a Mac
or a PC running this operating system,
946:07 - or this other one.
946:08 - And portability is nice because if
I were to download an Excel file,
946:10 - there'd be a whole bunch of
people in this room and online
946:13 - who couldn't download it because
they haven't bought Microsoft Excel
946:15 - or installed it.
946:16 - Or if they have a Mac, or if it's
a .numbers file in the Mac world,
946:21 - a PC user might not be
able to download it.
946:22 - So a CSV is indeed very portable.
946:25 - So I'm going to go ahead and
download, quite simply, the CSV
946:28 - version of this file.
946:29 - That's going to put it onto
my own Mac's Downloads folder.
946:32 - And let me go ahead here, and in just a
moment, let me just simplify the name.
946:36 - Because it actually downloads
it at a pretty large name.
946:40 - And give me just one moment here,
and you'll see that, indeed,
946:43 - on my Mac I have a file
called favorites.csv.
946:46 - I shortened the name real quick.
946:48 - And now what I'm going to do is go
over to VS Code, and in VS Code,
946:54 - I'm going to open my File Explorer.
946:55 - And if I minimize my window here for
a moment, a handy feature of VS Code
946:59 - is that you can just drag and drop a
file, for instance, into your Explorer.
947:03 - And voila, it's going to
automatically upload it for you.
947:06 - So let me go ahead and full
screen here, close my Explorer,
947:08 - temporarily close my Terminal window.
947:10 - And you'll see here a
CSV file, favorites.csv.
947:14 - And the first row, by
convention, has whatever
947:16 - the columns were in Google
Spreadsheets, or Office 365,
947:20 - in Excel online, timestamp,
comma, title, comma, genres.
947:23 - Then, we have timestamps,
which indicates
947:25 - when people started submitting.
947:27 - Looks like a couple of people
were super eager to get
947:29 - started an hour or two ago.
947:30 - And then, you have the
title next, after a comma.
947:34 - But there's kind of a
curiosity after that.
947:37 - Sometimes I see the genre
like comedy, comedy, comedy,
947:40 - but sometimes it's like crime, comma,
drama, or action, comma, crime, comma,
947:45 - drama.
947:45 - And those things are quoted.
947:47 - And yet, I didn't do any quotes.
947:49 - You probably didn't type any quotes.
947:51 - Where are those quotes
coming from in this CSV file?
947:55 - Why are they there if we infer?
947:56 - Yeah?
947:57 - AUDIENCE: [INAUDIBLE]
948:00 - DAVID J. MALAN: Yeah, so you
have a corner case, if you will.
948:03 - Because if you're using
commas, as you described,
948:05 - to separate your data into what
are effectively columns, well,
948:09 - you've painted yourself into
a corner if your actual data
948:12 - has commas in it itself.
948:13 - So what Google has done, what
Microsoft does, what Apple does
948:16 - is, they quote any strings
of text that themselves
948:19 - have commas so that these are
now English grammatical commas,
948:23 - not CSV specific commas.
948:26 - So it's a way of escaping
your data, if you will.
948:28 - And escaping just means to call
out a symbol in a special way
948:31 - so it's not misinterpreted
as something else.
948:33 - All right, so this is
all to say that we now
948:35 - have all of this data with which we
can play in the form of what we'll
948:39 - start calling a flat-file database.
948:41 - So suppose I wanted to now
start manipulating this data,
948:44 - and I want to store it ultimately,
indeed, in this CSV format.
948:47 - How can I actually
start to read this data,
948:49 - maybe clean it up, maybe
do some analytics on it
948:52 - and actually figure out, what's the most
popular show among those who submitted
948:55 - here over the past few minutes?
948:57 - Well, let me go ahead and close this.
948:59 - Let me go ahead, then, and open up,
for instance, just my Terminal window.
949:04 - And let's code up a file
called favorites.py.
949:07 - And let's go ahead and iteratively start
simple by just opening up this file
949:11 - and printing out what's inside of it.
949:13 - So you might recall that we can do
this by doing something like import CSV
949:16 - to give myself some CSV
reading functionality.
949:20 - Then, I can go ahead and do something
like with open, the name of the file
949:24 - that I want to open in read mode.
949:27 - Quote, unquote, "r" means to read it.
949:29 - And then, I can say as
file, or whatever other name
949:31 - for a variable to say that
I want to open this file,
949:35 - and essentially store some kind of
reference to it in that variable
949:37 - called file.
949:38 - Then, I can give myself a
reader, and I can say csv.reader,
949:42 - passing in that file as input.
949:43 - And this is the magic of that library.
949:45 - It deals with the process of opening
it, reading it, and giving you
949:48 - back something that you can just
iterate over, like with a for loop
949:51 - I do want to skip the first row,
and recall that I can do this.
949:55 - Next, reader, is this little trick
that just says, ignore the first row.
949:59 - Because the first one is special.
950:00 - It said timestamp, title, genres.
950:02 - That's not your data, that was mine.
950:04 - But this means now that
I've skipped that first row.
950:07 - Everything hereafter is going
to be the title of a show
950:10 - that you all like, so let me do this.
950:11 - For row in the reader, let's go
ahead and print out the title
950:16 - of the show each of you typed in.
950:18 - How do I get at the title of
the show each of you typed in?
950:22 - It's somewhere inside of row.
950:24 - Row recalls a list.
950:26 - So what do I want to
type next in order to get
950:28 - at the title of the current
row just as a quick check here?
950:34 - What do I want to type to
get at the title of the row,
950:36 - keeping in mind, again, that it
was timestamp, title, genres?
950:40 - Yeah?
950:41 - AUDIENCE: [INAUDIBLE]
950:42 - DAVID J. MALAN: So row
bracket 1 would give me
950:44 - the second column, 0 index, that is,
the one in the middle with the title.
950:47 - So this program isn't
that interesting yet,
950:49 - but it's a quick and dirty way to
figure out, all right, what's my data
950:52 - look like?
950:53 - Let me actually just do a
little bit of a check here
950:55 - and see if it contains
the data I think it does.
950:57 - Let me maximize my Terminal window here.
950:59 - Let me run Python of
favorites.py, hitting Enter.
951:03 - And you'll see now a purely
textual list of all of the shows
951:07 - you all seem to like here.
951:09 - But what's noteworthy about it?
951:12 - Specific shows aside,
judgment aside as to people's
951:15 - TV tastes, what's interesting or
noteworthy about the data that
951:19 - might create some problems for us
if we start to analyze this data,
951:23 - and figure out what's the most popular?
951:25 - How many people like this or that?
951:27 - What do you think?
951:28 - Yeah?
951:29 - AUDIENCE: User errors [INAUDIBLE].
951:32 - DAVID J. MALAN: Yeah,
there might be user errors,
951:34 - or just stylistic differences that
give the appearance that one show
951:38 - is different from the other.
951:39 - For instance, here.
951:42 - Let's see if I can see an
example on the screen here.
951:45 - Yeah, so friends here is an all
lowercase, Friends here is capitalized.
951:49 - No big deal.
951:50 - We can sort of mitigate that.
951:51 - But this is just a tiny example
of where data in the real world
951:54 - can get messy fast.
951:56 - And that probably wasn't even a typo.
951:57 - It was just someone not caring as much
to capitalize it, and that's fine.
952:02 - Your users are going to type
what they're going to type.
952:05 - So let's see if we can't now begin
to get at more specific data,
952:08 - and maybe even clean
some of this data up.
952:10 - Let me go back into my file
called favorites.py here,
952:15 - and let's actually do something a
little more user friendly for me.
952:19 - Instead of a reader, recall that there
was this dictionary reader that's
952:23 - just a little more user friendly.
952:25 - And it means I can type in dictionary
reader here, passing in the same file.
952:30 - But now, when I iterate over this
reader variable, what is each row?
952:36 - When using a DictReader instead
of a reader, recall, and this
952:39 - is just a peculiarity
of the CSV library,
952:43 - this gives me back, not a list
of cells, but what instead,
952:47 - which is marginally more
user friendly for me?
952:50 - Yeah?
952:50 - AUDIENCE: [INAUDIBLE]
952:52 - DAVID J. MALAN: Yeah.
952:53 - I can now use open bracket,
quotes, and the title.
952:56 - Because what's coming back
now is a dict object, that is,
952:59 - a dictionary which has keys and values.
953:02 - The keys of which are
the column headings.
953:04 - The values of which are the
data I actually care about.
953:06 - So this is just marginally
better because, one, it's
953:09 - just way more obvious to me, the
author of this code, what it is I'm
953:12 - getting at.
953:13 - I don't remember what
column the title was.
953:15 - Was it 0?
953:16 - Was it 1?
953:16 - Was it 2?
953:17 - That's something you're
going to forget over time.
953:18 - And God forbid someone changes the
data by just dragging and dropping
953:21 - the columns in Excel, or Apple
Numbers, or Google Spreadsheets.
953:24 - That's going to break all
of your numeric indices.
953:27 - And so a dictionary
reader is arguably just
953:29 - better design because it's
more robust against changes
953:32 - and potential errors like that.
953:34 - Now the effect of this change isn't
going to be really any different.
953:37 - If I run Python of favorites.py,
voila, I get all of the same results.
953:42 - But I've now not made any assumptions
as to where each of the columns
953:46 - actually is numerically.
953:48 - All right.
953:48 - Well, let's go ahead and now
filter out some duplicates.
953:51 - Because there's a lot of commonality
among some of the shows here, so let's
953:55 - see if we can't filter out duplicates.
953:58 - If I'm reading a CSV file top to bottom,
what intuitively might be the logic
954:04 - I want to implement to
filter out duplicates?
954:06 - It's not going to be quite as simple as
a simple function that does it for me.
954:10 - I'm going to have to build this.
954:12 - But logically, if you're reading
a file from top to bottom,
954:15 - how might you go about, in
Python or just any context,
954:20 - getting rid of duplicate values?
954:23 - Yeah, what do you think?
954:25 - AUDIENCE: [INAUDIBLE]
954:31 - DAVID J. MALAN: Sure.
954:31 - I could use a list and I could
add each title to the list,
954:35 - but first check if I put
this into the list before.
954:38 - So let's try a little
something like that.
954:40 - Let me go ahead and create a variable
at the top of my program here.
954:43 - I'll call it titles, for instance,
initialize to an empty list,
954:46 - open bracket, close bracket.
954:48 - And then, inside of my loop
here, instead of printing it out,
954:53 - let's start to make a decision.
954:54 - So if the current row's
title is in the titles list
955:04 - I don't want to put it there.
955:05 - And actually, let me invert the logic
so I'm doing something proactively.
955:08 - So if it's not the case that
row bracket title is in titles,
955:13 - then, go ahead and do something like
titles.append the current row's title.
955:21 - And recall that we saw
.append a week or so ago,
955:24 - where it just allows you to
append to the current list.
955:27 - And then, what can I do at
the very end, after I'm all
955:30 - done reading the whole file?
955:31 - Why don't I go ahead and
say, for title in titles,
955:35 - go ahead and print
out the current title?
955:38 - So it's two loops now, and we can come
back to the quality of that design.
955:42 - But let me go ahead here and
rerun Python of favorites.py.
955:44 - Let me increase the size of my Terminal
window so we can focus just on this,
955:47 - and hit Enter.
955:49 - And now, I'm just skimming.
955:53 - I don't think I'm seeing
duplicates, although I
955:56 - am seeing some near duplicates.
955:59 - For instance, there's Friends again.
956:02 - And if we keep going, and
going, and going, and going,
956:05 - there's Friends again.
956:06 - Oh, interesting, so that's curious
that I seem to have multiple Friends,
956:12 - and I have this one here, too.
956:13 - So how might we clean this up further?
956:16 - I like your instincts, and
it's a step closer to it.
956:18 - What are we going to have
to do to really filter out
956:20 - those near duplicates?
956:22 - Any thoughts?
956:24 - AUDIENCE: You could set
everything to lower [INAUDIBLE]..
956:29 - DAVID J. MALAN: Yeah.
956:30 - What are the common
mistakes to summarize?
956:32 - We could ignore the capitalization
altogether and maybe
956:34 - just force everything to lowercase,
or everything to uppercase.
956:37 - Doesn't matter which, but
let's just be consistent.
956:39 - And for those of you who might have
accidentally or instinctively hit
956:42 - the spacebar at the beginning of
your input or even at the end,
956:44 - we can strip that off, too.
956:46 - Stripping whitespace is a common
thing just to clean up user input.
956:49 - So let me go back into my
code here, and let me go ahead
956:53 - and tweak the title a little bit.
956:55 - Let me say that the current
title inside of this loop
956:58 - is not going to be just
the current row's title.
957:01 - But let me go ahead and strip off,
from the left and the right implicitly,
957:05 - any whitespace.
957:06 - If you read the documentation for the
strip function, it does just that.
957:09 - It gets rid of whitespace to the
left, whitespace to the right.
957:12 - And then, if I want to force
everything to maybe uppercase,
957:15 - I can just uppercase the entire string.
957:18 - And remember, what's handy about Python
is you can chain some of these function
957:21 - calls together by just
using dots again and again.
957:24 - And that just takes
whatever just happened,
957:26 - like the whitespace got stripped
off, then, it additionally
957:29 - uppercases the whole thing as well.
957:31 - So now, I'm going to just check whether
this specific title is in titles.
957:36 - And if not, I'm going to go
ahead and append that title,
957:40 - massaged into this different
format, if you will.
957:42 - So I'm throwing away some information.
957:44 - I'm sacrificing all of the
nuances of your grammar and input
957:49 - to the form itself.
957:50 - But at least I'm trying to
canonicalize size, that is,
957:52 - standardize what the
data actually looks like.
957:55 - So let me go ahead and run Python
of favorites.py again and hit Enter.
957:59 - Oh, and this is just user error.
958:00 - Maybe you haven't seen this before.
958:02 - This just looks like
a mistake on my part.
958:06 - I meant to say not even uppercase.
958:08 - That's completely wrong.
958:09 - The function is called upper,
now that I think of it.
958:11 - All right.
958:12 - Let's go and increase the size
of the Terminal window again.
958:14 - Run Python of favorites.py.
958:16 - And now, it's a little more overwhelming
to look at because it's not sorted yet
958:20 - and it's all capitalized.
958:22 - But I don't think I'm seeing
multiple Friends, so to speak.
958:28 - There's one Friends
up here and that's it.
958:31 - I'm back up at my prompt already.
958:33 - So we seem now to be
filtering out duplicates.
958:35 - Now, before we dive in further and
clean this up further than this,
958:38 - what else could we have done?
958:40 - Well, it turns out that
in Python 2 you often
958:42 - do get a lot of functionality
built into the language.
958:44 - And I'm kind of implementing
myself the idea of a set.
958:47 - If you think back to
mathematics, a set is typically
958:49 - something with a bunch of values
that has duplicates filtered out.
958:53 - Recall that Python
already has this for us.
958:56 - And we saw it really briefly
when I whipped up the dictionary
958:59 - implementation a couple of weeks back.
959:01 - So I could actually define my titles
to be a set instead of a list,
959:06 - and this would just modestly allow
me to refine my code here, such
959:11 - that I don't have to bother
checking for duplicates anyway.
959:14 - I can instead just say
something like, titles.add
959:18 - the current title, like this.
959:21 - Marginally better design if you know
that a set exists because you're just
959:24 - getting more functionality out of this.
959:26 - All right, so let's clean
the data up further.
959:28 - We've now gone ahead and fixed
the problem of case sensitivity.
959:31 - We threw away whitespace in case
someone had hit the spacebar
959:34 - with some of the input.
959:35 - Let's go ahead now and sort these
things by the titles themselves.
959:39 - So instead of just printing out
the titles in the same order
959:42 - you all inputted them, but filtering
out duplicates as we go, let me go ahead
959:47 - and use another function in
Python you might not have seen,
959:49 - which is literally
called sorted, and will
959:52 - take care of the process of
actually sorting titles for you.
959:57 - Let me go ahead and increase
the font size of my Terminal,
959:59 - run Python of favorites.py,
and hit Enter.
960:01 - And now you can really see how many of
these shows start with the word "the"
960:05 - or do not.
960:06 - Now it's a little easier
to wrap our minds around,
960:08 - just because it's at least
sorted alphabetically.
960:11 - But now you can really see some of
the differences in people's inputs.
960:15 - So far, so good.
960:17 - But a few of you decided to stylize
Avatar in three different ways here.
960:21 - Brooklyn 99 is a couple
of different ways here.
960:24 - And I think if we keep going we'll see
further and further variances that we
960:28 - did not fix by focusing on
whitespace and capitalization alone.
960:31 - So already here, this is only,
what, 100 plus, 200 rows.
960:35 - Already real-world data
starts to get messy quickly,
960:38 - and that might not bode
well when we actually
960:40 - want to keep around real
data from real users.
960:41 - You can imagine an actual
website or a mobile application
960:44 - dealing with this kind
of thing on scale.
960:47 - Well, let's go ahead and do this.
960:48 - Let's actually figure out the
popularity of these various shows
960:51 - by now iterating over my data, and
keeping track of how many of you
960:57 - inputted a given title.
960:58 - We're going to ignore the problems
like Brooklyn 99 and the Avatar.
961:03 - Sorry, yeah, Avatar,
where there was things
961:07 - that were different beyond just
whitespace and capitalization.
961:12 - But let's go ahead and
keep track of, now,
961:14 - how many of you inputted
each of these titles.
961:17 - So how can I do this?
961:18 - I'm still going to take this
approach of iterating over
961:21 - the CSV file from top to bottom.
961:23 - We've used a couple of
data structures thus far,
961:25 - a list to keep track of titles,
or a set to keep track of titles.
961:29 - But what if I now want to keep
around a little more information?
961:32 - For each title, I want to keep around
how many times I've seen it before.
961:38 - I'm not doing that yet.
961:39 - I'm throwing away the total
number of times I see these shows.
961:43 - How could I start to keep that around?
961:45 - AUDIENCE: Use a dictionary.
961:47 - DAVID J. MALAN: We could
use a dictionary, and how?
961:49 - Elaborate on that.
961:50 - AUDIENCE: [INAUDIBLE]
961:51 - DAVID J. MALAN: Perfect,
really good instincts.
961:53 - Using a dictionary,
insofar as it lets us
961:55 - store keys and values, that is,
associate something with something
961:58 - else.
961:59 - This is why a dictionary
or hash tables more
962:01 - generally are such a useful,
practical data structure.
962:04 - Because they just let you remember
stuff in some kind of structured way.
962:08 - So if the keys are going
to be the titles I've seen,
962:11 - the values could be the number of
times I've seen each of those titles.
962:15 - And so it's kind of like just
having a two-column table on paper.
962:19 - For instance, if I were going
to do this on a piece of paper,
962:22 - I might just have two
columns here, where
962:24 - maybe this is the title that I've
seen, and this is the count over here.
962:29 - This is, in effect, a
dictionary in Python.
962:33 - It's two columns, keys on the
left, values on the right.
962:36 - And this, if I can implement
in code, will actually
962:38 - allow me to store this data, and
then maybe do some simple arithmetic
962:42 - to figure out which is the most popular.
962:44 - So let's do this.
962:45 - Let me go ahead and change my titles
to not be a list, not be a set.
962:49 - Let's have it be a dictionary instead,
either doing this, or more succinctly,
962:54 - two curly braces that are empty gives
me an empty dictionary automatically.
962:58 - What do I now want to do?
963:00 - I think most of my
code can stay the same.
963:02 - But down here, I don't want
to just blindly add titles
963:06 - to the data structure.
963:07 - I somehow need to keep
track of the count.
963:10 - And unfortunately, if I just
do this-- let's do titles,
963:14 - bracket, title, plus equals 1.
963:18 - This is a reasonable
first attempt at this.
963:21 - Because what am I doing?
963:22 - If titles is a dictionary and I want
to look up the current title therein,
963:28 - the syntax for that, like before,
is titles, bracket, and then
963:30 - the key you want to use to
index into the dictionary.
963:34 - It's not a number in this case,
it's an actual word, a title.
963:37 - And you're just going
to increment it by one,
963:39 - and then eventually I'll come
back and finish my second loop
963:42 - and do things in terms of the order.
963:45 - But for now, let's just keep
track of the total counts.
963:48 - Let me go ahead and
increase my Terminal window.
963:51 - Let me do Python of
favorites.py and hit Enter.
963:54 - Huh.
963:55 - How I Met Your Mother is
giving me a key error.
963:59 - What does that mean?
964:02 - And why am I seeing this?
964:04 - And in fact, just to give a
little bit of a breadcrumb here,
964:07 - let me zoom out here.
964:09 - Let me open up the CSV
file again real quickly.
964:12 - And wow, we didn't even get
past the second row in the file
964:15 - or the first show in the file.
964:17 - Notice that How I Met Your
Mother, somewhat lowercased,
964:20 - is the very first show in therein.
964:22 - What's your instinct for
why this is happening?
964:24 - AUDIENCE: You don't
have a starting point.
964:27 - DAVID J. MALAN: I don't
have a starting point.
964:29 - I'm adding one to what?
964:30 - I'm blindly indexing into the dictionary
using a key, How I Met Your Mother,
964:35 - that doesn't yet exist
in the dictionary.
964:37 - And so Python throws
what's called a key error
964:39 - because the key you're trying
to use just doesn't exist yet.
964:42 - So logically, how could we fix this?
964:46 - We're close.
964:47 - We got half of the problem solved,
but I'm not handling the obvious, now,
964:50 - case of nothing being there.
964:52 - Yeah?
964:52 - AUDIENCE: Creating a counter.
964:54 - DAVID J. MALAN: Creating a--
964:54 - AUDIENCE: Counter.
964:55 - DAVID J. MALAN: Creating
the counter itself.
964:57 - So maybe I could do something like this.
964:59 - Let me close my Terminal window
and let me ask a question first.
965:03 - If the current title is in the
dictionary already, if title in titles,
965:10 - that's going to give me a
true-false answer it turns out.
965:12 - Then, I can safely say, titles,
bracket, title, plus equals 1.
965:17 - And recall, this is just shorthand
notation for the same thing as in C,
965:22 - title plus 1.
965:23 - Whoops, typo.
965:24 - Don't do that.
965:25 - That's the same thing as this
but it's a little more succinct
965:28 - just to say plus equals 1.
965:30 - Else, if it's logically not the case
that the current title is in the titles
965:34 - dictionary, then I probably want to
say titles, bracket, title equals?
965:38 - Feel free to just shout it out.
965:40 - AUDIENCE: Zero.
965:41 - DAVID J. MALAN: Zero.
965:42 - I just have to put some value there
so that the key itself is also there.
965:46 - All right.
965:47 - So now that I've got this
going on, let me go ahead
965:49 - and undo my sorting temporarily.
965:51 - And now let me go ahead and do this.
965:54 - I can, as a quick check, let me
go ahead and just run the code
965:58 - as is, Python of favorites.py.
966:00 - I'm back in business.
966:02 - It's printing correctly, no key
errors, but it's not sorted.
966:05 - And I'm not seeing any of the counts.
966:06 - Let me just quickly add
the counts, and there's
966:09 - a couple of ways I could do this.
966:10 - I could, say, print out the title, and
then, maybe, let's do something like--
966:18 - how about just, comma,
titles, bracket, title?
966:22 - So I'm going to print
two things at once,
966:24 - both the current title
in the dictionary,
966:26 - and whatever its value
is by indexing into it.
966:29 - Let me increase my Terminal window.
966:31 - Let me run Python of
favorites.py, Enter, and OK.
966:35 - Huh.
966:37 - Huh.
966:39 - None of you said a whole
lot of TV shows, it seems.
966:42 - What's the logical error here?
966:47 - What did I do wrong if I
look back at my code here?
966:50 - Yeah?
966:51 - Why so many 0s?
966:52 - AUDIENCE: [INAUDIBLE]
966:54 - DAVID J. MALAN: Exactly.
966:55 - To summarize, I initialized the
count to 0 the first time I saw it,
967:00 - but I should have initialized it at
least to 1 because I just saw it.
967:03 - Or I should change my code a bit.
967:05 - So for instance, if I go back
in here, the simplest fix
967:08 - is probably to initialize to 1,
because on this iteration of the loop,
967:11 - obviously, I'm seeing this
title for the very first time.
967:14 - Or I could change my logic a little bit.
967:16 - I could do something like this instead.
967:18 - If the current title is not in titles,
then I could initialize it to 0.
967:24 - And then I could get rid of
the else, and now blindly index
967:28 - into the titles dictionary.
967:30 - Because now, on line 11, I
can trust that lines 9 and 10
967:34 - took care of the initialization
for me if need be.
967:37 - Which one is better?
967:38 - I don't know.
967:38 - This one's a little nicer, maybe
because it's one line fewer.
967:42 - But I think both approaches are
perfectly reasonable and well-designed.
967:45 - But the key thing, no
pun intended, is that we
967:47 - have to make sure the key exists
before we presume to actually incrue.
967:52 - Oh, this is wrong.
967:54 - This is incorrect code.
967:55 - What did I do wrong?
967:58 - OK, yes.
967:59 - There we go.
967:59 - So otherwise, everyone would have
liked this show once, and no matter
968:03 - how many people said the same thing.
968:04 - Now the code is as it should be.
968:06 - So let me go ahead and open
up my Terminal window again.
968:08 - Let me run Python of favorites.py,
and now we see more reasonable counts.
968:13 - Some shows weren't that popular.
968:14 - There's just 1s and maybe 2s.
968:16 - But I bet if we sort these things we
can start to see a little more detail.
968:21 - So how else can we do this?
968:23 - Well, turns out, when dealing
with a dictionary like this--
968:29 - let's go ahead and just
sort the titles themselves.
968:32 - So let's reintroduce the sorted function
as I did before, but no other changes.
968:37 - Let me go ahead now and
run Python of favorites.py.
968:40 - Now it's just a little easier
to wrap your mind around it
968:42 - because at least it's alphabetical.
968:43 - But it's not sorted by
value, it's sorted by key.
968:47 - But sure enough, if we scroll
down, there's something down here,
968:51 - for instance, like,
let's see, The Office.
968:54 - That's definitely
going to be a contender
968:56 - for most popular, 15 responses.
968:58 - But let's see what's actually
going to bubble up to the top.
969:01 - Unfortunately, the sorted function
only sorts dictionaries by keys
969:06 - by default, not by values.
969:09 - But it turns out, in Python,
if you read the documentation
969:12 - for the sorted function,
you can actually
969:14 - pass in other arguments that
tell it how to sort things.
969:19 - For instance, if I want to
do things in reverse order,
969:22 - I can add a second parameter to
the sorted function called reverse.
969:27 - And it's a named parameter.
969:28 - You literally say,
reverse equals true, so
969:30 - that the position of it in the
comma-separated list doesn't matter.
969:34 - If I now rerun this after
increasing my Terminal window,
969:37 - you'll see now that it's
in the opposite order.
969:39 - Now adventure and Anne
with an E is at the bottom
969:41 - of the output instead of the top.
969:43 - How can I tell it to sort
by values instead of by key?
969:52 - Well, let's go ahead and do this.
969:53 - Let me go ahead and define a function.
969:56 - I'm just going to call it
f to keep things simple.
969:58 - And this f function is going
to take a title as input.
970:01 - And given a given title, it's going
to return the value of that title.
970:06 - So actually, maybe a better name
for this would be get value,
970:09 - and/or we could come up
with something else as well.
970:12 - The purpose of the get
value function, to be clear,
970:14 - is to take it as input a title and
then return the corresponding value.
970:19 - Why is this useful?
970:20 - Well, it turns out that the
sorted function in Python,
970:23 - according to its documentation,
also takes a key parameter,
970:27 - where you can pass in, crazy
enough, the name of a function
970:31 - that it will use in order to determine
what it should sort by, by the key,
970:36 - or by the value, or in other cases,
even other types of data as well.
970:41 - So there's a curiosity here,
though, that's very deliberate.
970:44 - Key is the name of the
parameter, just like reverse
970:46 - was the name of this other parameter.
970:48 - The value of it, though,
is not a function call.
970:51 - It's a function name.
970:52 - Notice I am not doing
this, no parentheses.
970:55 - I'm instead passing in get value,
the function I wrote, by its name.
971:00 - And this is a feature of Python
and certain other languages.
971:03 - Just like variables, you can
actually pass whole functions
971:06 - around so that they can be called
for you later on by someone else.
971:10 - So what this means is that the
sorted function written by Python,
971:14 - they didn't know what you're
going to want to sort by today.
971:16 - But if you provide them with a function
called get value, or anything else, now
971:21 - their sorted function
will use that function
971:23 - to determine, OK, if you don't want to
sort by the key of the dictionary, what
971:27 - do you want to sort by?
971:28 - This is going to tell
it to sort by the value
971:31 - by returning the specific
value we care about.
971:34 - So let me go ahead now and rerun this
after increasing my Terminal, Python
971:37 - of favorites.py, Enter.
971:39 - Here we have now an example
of all of the titles you all
971:42 - typed in, albeit forced to uppercase
and with any whitespace thrown out.
971:47 - And now, The Office is
an easy win over Friends,
971:50 - versus Community, versus Game of
Thrones, Breaking Bad, and then
971:52 - a lot of variants thereafter.
971:55 - So there's a lot of steps to go through.
971:57 - This isn't that bad once
you've done it once,
971:58 - and you know what these
functions are, and you
972:00 - know that these parameters exist.
972:02 - But it's a lot of work.
972:03 - That's 17 lines of code
just to analyze a CSV file
972:07 - that you all created by way of
those Google Form submissions.
972:10 - But it took me a lot of work just
to get simple answers out of it.
972:13 - And indeed, that's going
to be among the goals
972:15 - for today, ultimately, is, how
can we just make this easier?
972:18 - It's one thing to learn
new things in Python,
972:20 - but if we can avoid writing
code, or this much code,
972:22 - that's going to be a good thing.
972:24 - And so one other technique
we can introduce here
972:26 - that does allow us to
write a little less code
972:28 - is, we can actually get
rid of this function.
972:31 - It turns out, in Python, if you
just need to make a function
972:34 - but it's going to be used and
then essentially thrown away,
972:37 - it's not something you're going
to be reusing in multiple places--
972:40 - it's not like a library function
that you want to keep around--
972:42 - you can actually just do this.
972:45 - You can change the value
of this key parameter
972:48 - to be what's called a
lambda function, which
972:51 - is a fancy way of saying a function
that technically has no name.
972:54 - It's an anonymous function.
972:56 - Why does it have no name?
972:57 - Well, it's kind of stupid that
I invented this name on line 13.
973:00 - I used it on line 16, and
then I never again used it.
973:04 - If there's only being used in one place,
why bother giving it a name at all?
973:07 - So if you instead, in
Python, say lambda,
973:10 - and then type out the
name of the parameter
973:13 - you want this anonymous
function to take,
973:15 - you can then say, go ahead
and return this value.
973:19 - Now let's notice the
inconsistencies here.
973:22 - When you use this special lambda
keyword that says, hey Python,
973:25 - give me an anonymous function,
a function with no name,
973:28 - it then says, Python, this anonymous
function will take one parameter.
973:31 - Notice there's no parentheses.
973:34 - And that's deliberate, if confusing.
973:35 - It just tightens things up a little bit.
973:38 - Notice that there's no return keyword,
which similarly tightens things
973:42 - up a bit, albeit inconsistently.
973:44 - But this line of code
I've just highlighted
973:47 - is actually identical in
functionality to this.
973:51 - But it throws away the word [INAUDIBLE].
973:53 - It throws away the word get value.
973:55 - It throws away the parentheses, and
it throws away the return keyword just
973:58 - to tighten things up.
974:00 - And it's well suited
for a problem like this
974:02 - where I just want to pass in
a tiny little function that
974:05 - does something useful.
974:06 - But it's not something
I'm going to reuse.
974:08 - It doesn't need multiple
lines to take up space.
974:10 - It's just a nice, elegant one liner.
974:12 - That's all a lambda function does.
974:14 - It allows you to create an anonymous
function right then and there.
974:17 - And then the function you're passing it
to, like sorted, will use it as before.
974:22 - Indeed, if I run Python of favorites.py
after growing my Terminal window,
974:26 - the result is exactly the same.
974:28 - And we see at the bottom here
all of those small results.
974:31 - Are any questions, then, on
this syntax, on these ideas?
974:36 - The goal here has been to write
a Python program that just starts
974:39 - to analyze or clean up data like this.
974:44 - Yeah?
974:45 - AUDIENCE: [INAUDIBLE]
974:48 - DAVID J. MALAN: Could you use the lambda
if it's just returning immediately?
974:51 - It's really meant for one
line of code, generally.
974:54 - So you don't use the return keyword.
974:56 - You just say what it
is you want to return.
974:59 - AUDIENCE: [INAUDIBLE]
975:03 - DAVID J. MALAN: Good question.
975:04 - Could you do more in
that one line if it's
975:06 - got to be a more involved algorithm?
975:08 - Yes, but you would just ultimately
return the value in question.
975:11 - In short, if it's getting
at all sophisticated
975:13 - you don't use the lambda
function in Python.
975:15 - You go ahead and actually
just define a name for it,
975:17 - even if it's a one-off name.
975:19 - JavaScript, another language
we'll look at in a few weeks,
975:21 - makes heavier use, I dare
say, of lambda functions.
975:24 - And those can actually be
multiple, multiple lines,
975:27 - but Python does not
support that instinct.
975:30 - All right.
975:31 - So let's go ahead and
do one other thing.
975:33 - Office was clearly popping out
of the code here quite a bit.
975:35 - Let's go ahead and write a
slightly different program
975:38 - that maybe just focuses on
The Office for the moment,
975:40 - just focuses on The Office.
975:42 - So let me go ahead and throw most of
this code away, up until this point
975:46 - when I'm inside of my inner loop.
975:48 - And let me go ahead, and I don't
even want the global variable here.
975:51 - All I want to do is focus
on the current title.
975:53 - How could I detect if
someone likes The Office?
975:56 - Well, I could say something like--
975:59 - how about this?
976:00 - So counter equals 0.
976:01 - We'll just focus on The Office.
976:03 - If title equals, equals The Office,
I could then go ahead and say,
976:09 - counter plus equals 1.
976:12 - I don't need a key.
976:13 - There's no dictionary involved now.
976:15 - It's just a simple integer variable.
976:17 - And then, down here
I'll say something like,
976:21 - number of people who like The
Office is, whatever this value is.
976:26 - And I'll put in counter in
curly braces, and then I'll
976:29 - turn this whole thing into an F string.
976:31 - All right, let me go ahead and run this.
976:32 - Python of favorites.py, Enter.
976:35 - Number of people who
like The Office is 15.
976:37 - All right, so that's great.
976:39 - But let's go ahead now and
deliberately muddy the data a bit.
976:42 - All of you were very nice in
that you typed in The Office.
976:46 - But you can imagine
someone just typing Office,
976:48 - for instance, maybe there, maybe there.
976:51 - And many people might just
write Office, you could imagine.
976:53 - Didn't happen here, but
suppose it did, and probably
976:55 - would have if we had even more
and more submissions over time.
976:58 - Now let's go ahead and rerun this
program, no changes to the code.
977:02 - Now only 13 people like The Office.
977:04 - So let's fix this.
977:05 - The data is now as I mutated it to have
a couple Offices, and many The Offices.
977:11 - How could I change my Python code to
now count both of those situations?
977:16 - What could I change up here in
order to improve this situation?
977:20 - Any thoughts?
977:23 - Yeah?
977:24 - AUDIENCE: You write
the title [INAUDIBLE]..
977:27 - DAVID J. MALAN: Yeah, so I could
just ask two questions like that.
977:30 - If title equals The Office,
or title equals, equals just
977:34 - Office, for instance.
977:35 - And I'm still don't have to
worry about capitalization.
977:38 - I don't have to worry about spaces
because I at least threw that all away.
977:41 - Now I can go ahead and rerun this code.
977:43 - Let me go run it a third time.
977:45 - OK, so we're back up to 15.
977:47 - So I like that.
977:50 - You could imagine this
not scaling very well.
977:54 - Avatar had three different
permutations, and there were some others
977:57 - if we dug deeper that there
might have been more variants.
977:59 - Could we do something a
little more general purpose?
978:01 - Well, we could do something like this.
978:03 - If Office in the title--
978:07 - this is kind of a cool thing
you can do with Python.
978:09 - It's very English-like, just ask
the question, albeit tersely.
978:12 - This, interesting, just
got me into trouble.
978:16 - Now, all of a sudden, we're up to 16.
978:18 - Does anyone know what the other one is?
978:21 - AUDIENCE: Someone put V Office.
978:23 - DAVID J. MALAN: What Office?
978:24 - AUDIENCE: Someone entered
a V Office, [INAUDIBLE]..
978:29 - DAVID J. MALAN: Oh, interesting.
978:31 - Yes, so they hit The.
978:33 - OK.
978:33 - [APPLAUSE]
978:36 - DAVID J. MALAN: OK.
978:37 - Someone did that, sure.
978:39 - So The V Office.
978:42 - OK, this one's actually going
to be hard to correct for.
978:44 - I can't really think of a general--
978:46 - well, this is actually a good
example of data gets messy fast.
978:51 - And you could imagine doing
something where, OK, we
978:53 - could have like 26 conditions if someone
said The A Office, or The B Office,
978:58 - right?
978:58 - You could imagine doing that.
978:59 - But then there's surely going to
be other typos that are possible.
979:02 - So that's actually a hard one to fix.
979:04 - But it turns out we got lucky and now
this is actually the accurate count.
979:10 - But the data is itself messy.
979:12 - Let me show another way that just
adds another tool to our toolkit.
979:15 - It turns out that there's this feature
in many programming languages, Python
979:20 - among them, called regular expressions.
979:22 - And this is actually a
really powerful technique
979:24 - that we'll just scratch
the surface of here.
979:26 - But it's going to be really useful,
actually, maybe toward final projects,
979:29 - in web programming, any time you want
to clean up data or validate data.
979:34 - And actually, just to make
this clear, give me a moment
979:37 - before I switch screens here.
979:39 - And let me open up a
Google Form from scratch.
979:43 - Give me just a moment to
create something real quick.
979:47 - If you've never noticed this
before when creating a Google Form,
979:50 - you can do a question.
979:53 - And if you want the user
to type in something
979:55 - very specific as a short
text answer like this,
979:58 - you might know that there's toggles
like this in Google's world,
980:01 - like you can require it.
980:02 - Or you can do response validation.
980:04 - You could say, what's your email?
980:07 - And then you could say something
like, text is an email.
980:12 - So here's an example in Google Forms
how you can validate users' input.
980:17 - But a feature most of you have probably
never noticed, or cared about, or used,
980:22 - is this thing called a
regular expression, where
980:24 - you can actually define a pattern.
980:26 - And I could actually reimplement that
same idea by doing something like this.
980:30 - I can say, let the user type in anything
represented by .star, then an at sign,
980:36 - then something else, then a
literal period, then, for instance,
980:41 - something else.
980:43 - So it's very cryptic,
admittedly, at first glance.
980:45 - But this means any
character 0 more times.
980:48 - This means any character 0 more times.
980:51 - This means a literal
period, because apparently
980:54 - dot means any character in
the context of these patterns.
980:57 - Then this thing means any
character 0 more times.
981:01 - So I should actually be
a little more nitpicky.
981:04 - You don't want 0 or more times,
you want 1 or more times.
981:06 - So this with the plus means
any character 1 or more time.
981:10 - So there has to be something there.
981:12 - And I think I want the same thing
here 1 or more times, 1 or more times.
981:16 - Or heck, if I want to restrict this
form in some sense to edu addresses,
981:21 - I could change that last
thing to literally .edu.
981:24 - And so long story short,
even though this looks,
981:26 - I'm sure, pretty cryptic, there's
this mini language built into Python,
981:31 - and JavaScript, and Java, and other
languages that allows you to express
981:35 - patterns in a standardized way.
981:37 - And this pattern is actually something
we can implement in code, too.
981:41 - And let me switch back to
Python for a second just
981:43 - to do the same kind of idea.
981:45 - Let me toggle back to my code here.
981:48 - Let me put up, for instance, a
summary of what it is you can do.
981:52 - And here's just a quick summary
of some of the available symbols.
981:58 - A period may represent any character.
.star or .asterisks means 0 or more
982:04 - characters.
982:05 - So the dot means anything,
so it can be A or nothing.
982:08 - It can be B or nothing.
982:09 - It can be A, B, A, B, C. It can be any
combination of 0 or more characters.
982:14 - Change that to a plus and you now
express one or more characters.
982:18 - Question mark means
something is optional.
982:21 - Caret symbol means start matching at
the beginning of the user's input.
982:24 - Dollar sign means stop matching
at the end of the user's input.
982:30 - So we won't play with
all of these just now.
982:32 - But let me go over here and
actually tackle this Office problem.
982:36 - Let me go ahead and import a new library
called the regular expression library,
982:40 - import re.
982:42 - And then, down here, let me say this.
982:45 - If re.search, this pattern.
982:50 - Let's just search for Office, quote,
unquote, in the current title.
982:55 - Then we're going to go ahead
and increase the counter.
982:58 - So it turns out that the
regular expression library
983:00 - has a function called search that
takes as its first argument a pattern,
983:04 - and then, as its second
argument the string you
983:07 - want to analyze for that pattern.
983:09 - So it's sort of looking for a needle
in this haystack, from left to right.
983:13 - Let me go ahead now and run this
version of the program, Enter.
983:17 - And now I screwed up because I forgot
my colon, but that's old stuff.
983:21 - Enter.
983:22 - Huh.
983:24 - Number of people who
like The Office is now 0.
983:27 - So this seems like a big--
983:28 - thank you-- big step backwards.
983:30 - What did I do wrong?
983:33 - Yeah?
983:34 - AUDIENCE: [INAUDIBLE]
983:35 - DAVID J. MALAN: Yeah.
983:36 - I forced all my input to uppercase,
so I probably need to do this.
983:39 - So we'll come back to
other approaches there.
983:41 - Let me rerun it now.
983:42 - OK, now we're back up to 16.
983:45 - But I could even, let's say--
983:47 - I could tolerate just The Office.
983:50 - How about this, or how about
something like, or The Office?
983:55 - Let me do this instead.
983:57 - And let me use these
other special characters.
983:59 - This caret sign means the
beginning of the string.
984:02 - This dollar sign weirdly
represents the end of the string.
984:06 - I'm adding in some parentheses just
like in math, just to add another symbol
984:09 - here, the or symbol here.
984:11 - And this is saying start matching
at the beginning of the user string.
984:15 - Check if the beginning of the string is
Office, or the beginning of the string
984:20 - is The Office.
984:21 - And then, you better be
at the end of the string.
984:23 - So they can't keep typing words
before or after that input.
984:26 - Let me go ahead and rerun the program.
984:29 - And now we're down to 15, which
used to be our correct answer,
984:32 - but then we noticed The V Office.
984:36 - How can we deal with that?
984:38 - It's going to be messier
to deal with that.
984:41 - How about if I tolerate any
character represented by dot
984:46 - in between The and Office?
984:48 - Now if I rerun it, now I really
have this expressive capability.
984:53 - So this is only to say, there are so
many ways in languages, in general,
984:57 - to solve problems.
984:58 - And some of these tools are
more sophisticated than others.
985:01 - This is one that you've actually
probably glanced at but never used
985:04 - in the context of Google
Forms for years if you're
985:06 - in the habit of creating these for
student groups or other activities.
985:09 - But it's now something
you can start to leverage.
985:11 - And we're just scratching the surface
of what's actually possible with this.
985:14 - But let's now do one final example
just using some Python code here.
985:18 - And let's actually
write a program that's
985:20 - a little more general purpose that
allows me to search for any given title
985:25 - and figure out its popularity.
985:27 - So let me go ahead and simplify this.
985:29 - Let's get rid of our
regular expressions.
985:31 - Let's go ahead and continue
capitalizing the title.
985:35 - And let's go ahead to--
985:36 - at the beginning of this program,
and first ask the user for the title
985:41 - they want to search for.
985:42 - So title equals, let's
ask the user for input,
985:45 - which is essentially the same thing
as our CS50 get_string function.
985:48 - Ask them for the title.
985:50 - And then whatever they type in,
let's go ahead and strip whitespace
985:53 - and uppercase the thing again.
985:56 - And now, inside of my loop, I
could say something like this.
986:01 - If the current row's title after
stripping whitespace and forcing
986:08 - it to uppercase, too, equals
the user's title, then, go ahead
986:12 - and maybe increment a counter.
986:14 - So I still need that counter back.
986:16 - So let me go ahead and define this
maybe in here, counter equals 0.
986:21 - And then, at the very
end of this program,
986:24 - let me go ahead and print
out just the popularity
986:26 - of whatever the human typed in.
986:28 - So again, the only difference is
I'm asking the human for some input
986:31 - this time.
986:32 - I'm initializing my
counter to 0, then I'm
986:34 - searching for their
title in the CSV file
986:38 - by doing the same massaging of the
data by forcing it to uppercase
986:41 - and getting rid of the whitespace.
986:43 - So now, when I run Python
of favorites.py, Enter,
986:47 - I could type in the office all lowercase
even, and now we're down to 13.
986:55 - 13, why?
987:00 - Oh, that's correct.
987:02 - Because I'm the one that went in and
removed those The keywords a bit ago.
987:05 - If we fixed those, we
would be back up to 15.
987:08 - If we added support for The V
Office, we would be up to 16 as well.
987:12 - All right, any questions then
on these various manipulations?
987:15 - And if you're feeling
like, oh, my god, this
987:17 - is so much Python code just to do
simple things, that's the point.
987:20 - And indeed, even though
it's a powerful language
987:22 - and can solve these kinds of problems,
we had to write almost 20 lines of code
987:26 - just to ask a single question like this.
987:28 - But any questions on how we did
this, or on any of these building
987:32 - blocks along the way?
987:36 - Anything here?
987:37 - No?
987:37 - All right.
987:37 - That was a lot.
987:38 - Let's take a five-minute break here.
987:40 - When we come back, we'll do it better.
987:42 - So we are back.
987:43 - And the rest of today
is ultimately about, how
987:45 - can we store, and manipulate,
and change, and retrieve data
987:50 - more efficiently than we might
by just writing raw code?
987:53 - This isn't to say that you shouldn't
use Python to do the kinds of things
987:56 - that we just did.
987:57 - And in fact, it might be super common
if you're getting a lot of messy input
988:02 - from users that you might
want to clean it up.
988:04 - And maybe the best way to do that is
to write a program so that step-by-step
988:07 - you can make all of the
requisite changes and fixes
988:09 - like we did with The Office,
for instance, again and again,
988:12 - and reuse that code, especially
if more and more submissions are
988:15 - coming through.
988:16 - But another theme of
today, ultimately, is
988:18 - that sometimes there are different,
if not better tools for the same job.
988:22 - And in fact, now at
this point in the term,
988:24 - as we begin to introduce not
just Python, but in a moment
988:27 - a language called SQL, and next
week, a language called JavaScript,
988:31 - and the week after that, synthesizing
a whole lot of these languages
988:34 - together is to just kind
of paint a picture of how
988:37 - you might decide what the trade-offs are
between using this tool, or this tool,
988:41 - or this other tool.
988:42 - Because undoubtedly you can
solve problems moving forward
988:45 - in many different ways
with many different tools.
988:48 - So let's give you another
tool, one with which
988:50 - you can implement a proper
relational database.
988:53 - What we just saw in
the form of CSV files
988:56 - are what we might call
flat-file databases.
988:59 - Again, just a very simple file, flat
in that there's no hierarchy to it.
989:02 - It's just rows and columns.
989:04 - And that is all ultimately
storing ASCII or Unicode text.
989:09 - A relational database, though,
is something that's actually
989:12 - closer to a proper spreadsheet program.
989:16 - A CSV is an individual
sheet, if you will,
989:18 - from a spreadsheet when you export it.
989:20 - If you had multiple
sheets in a spreadsheet,
989:22 - you would have to export multiple CSVs.
989:24 - And that gets annoying
quickly in code if you
989:26 - have to open up this CSV,
this CSV, all of which
989:29 - represent different sheets or
tabs in a proper spreadsheet.
989:32 - A relational database is more
like a spreadsheet program
989:36 - that you, a programmer,
now can interact with.
989:39 - You can write data to it.
989:41 - You can read data from it, and you
can have multiple sheets, a.k.a.,
989:45 - tables storing all of your data.
989:47 - So whereas Excel and numbers
in Google spreadsheet
989:49 - are meant to be reused really by humans
with their mouse and their keyboard,
989:52 - clicking, and pointing, and
manipulating things graphically,
989:55 - a relational database
using a language called
989:57 - SQL is one in which the programmer
has similar capabilities,
990:02 - but doing so in code.
990:04 - Specifically, using a language
called SQL, and at a scale
990:08 - that's much grander
than spreadsheets alone.
990:11 - In fact, if you try on your Mac
or PC to open a spreadsheet that's
990:13 - got tens of thousands
of rows, it'll probably
990:16 - work fine, hundreds of thousands
of rows, millions of rows, no way.
990:20 - At some point your Mac or
PC is going to struggle
990:22 - to open particularly large data sets.
990:24 - And that, too, is where
proper databases come
990:26 - into play and proper
languages for databases come
990:29 - into play, when it's all about scale.
990:31 - And indeed, most any mobile app or
web app today that you or someone else
990:34 - might write should probably plan
on lots of data if it's successful.
990:38 - So we need the right
tools for that problem.
990:41 - So fortunately, even though we're
about to learn yet another language,
990:44 - it only does four things fundamentally,
known by this silly acronym, CRUD.
990:49 - SQL, this language for
databases, supports the ability
990:53 - to create data, read data,
update data, and delete data.
990:57 - That's it.
990:58 - There's a few more keywords that
exist in this language called SQL
991:02 - that we'll soon see.
991:03 - But at the end of the
day, even if you're
991:04 - starting to feel like this
is a lot very quickly,
991:07 - it all boils down to these
four basic operations.
991:10 - And the four commands
in SQL, if you will,
991:12 - functions in a sense that implement
those four ideas happen to be these.
991:17 - They're almost the same but
with some slight variance.
991:19 - The ability to create or insert data
is the C. The ability to select data
991:24 - is the R, or read.
991:26 - Update is the same.
991:27 - Delete is the same, but drop
is also a keyword as well.
991:30 - So we'll see these and
a few other keywords
991:32 - in SQL that, at the end of the day, just
allow you to create, read, and update
991:35 - data using verbs, if
you will, like these.
991:39 - So to do that, what's
the syntax going to be?
991:43 - Well, we won't get into the
weeds too quickly on this.
991:45 - But here's a representative
syntax of how
991:47 - you can create using this
language called SQL, in your very
991:51 - own database, a brand new table.
991:53 - This is so easy in Excel, and Google
Spreadsheets, and Apple Numbers.
991:56 - You want a new sheet, you
click the plus button.
991:58 - You get a new tab.
991:59 - You give it a name,
and boom, you're done.
992:00 - In the world of programming, though, if
you want to create the analogue of that
992:05 - spreadsheet in the computer's memory,
you create something called a table,
992:08 - like a sheet, that has a name, and then
in parentheses has one or more columns.
992:13 - But unlike Google Spreadsheets,
and Apple Numbers, and Excel,
992:17 - you have to decide as the
programmer what types of data
992:20 - you're going to be storing
in each of these columns.
992:22 - Now even though Excel,
and Google Spreadsheets,
992:24 - and Numbers does allow you to format
or present data in different ways,
992:28 - it's not strongly typed data like it
is, for instance, when we were using C.
992:33 - And heck, even in Python
there's underlying data types.
992:35 - Even if you don't have
to type them explicitly,
992:37 - databases are going to want to
know, are you storing integers?
992:40 - Are you storing real numbers or floats?
992:41 - Are you storing text?
992:42 - Why?
992:43 - Because especially as your
data scales, the more hints
992:46 - you give the database about your
data, the more performance it can be,
992:49 - the faster it can help you
get at and store that data.
992:52 - So types are about to
be important again,
992:54 - but there's not going to be
that many of them, fortunately.
992:57 - Now how can I go about converting,
for instance, some real data,
992:59 - like that from you,
my favorites.csv file,
993:02 - into a proper relational database?
993:04 - Well, it turns out that
using SQL I can do this
993:07 - in VS Code on my own Mac,
or PC, or in the cloud
993:10 - here by just importing
the CSV into a database.
993:13 - We'll see eventually
how to do this manually.
993:15 - For now, I'm going to use
more of an automated process.
993:17 - So let me go over to VS Code here.
993:20 - Let me type ls to see
where we left off before.
993:22 - I had two files favorites.csv, which
I downloaded from Google Spreadsheets.
993:26 - Recall that I made a couple of changes.
993:27 - We deleted a couple of Thes
from the file for The Office.
993:31 - But this is the same file
as before, and then we
993:33 - have favorites.py, which
we'll set aside for now.
993:36 - I'm going to go ahead now
and run a command SQLite3.
993:40 - So in the world of
relational databases, there's
993:43 - many different products out there,
many different software that
993:48 - implements the SQL language.
993:50 - Microsoft has their own.
993:51 - There's something called MySQL
that's been very popular for years.
993:55 - Facebook, for instance,
used it early on.
993:57 - PostgreSQL, Microsoft
Access Server, Oracle,
994:00 - and maybe a whole bunch
of other product names
994:02 - you might have encountered
over time, which
994:04 - is to say there's many different
types of tools, and servers,
994:08 - and software in which you can use SQL.
994:10 - We're going to use a very lightweight
version of the SQL language
994:13 - today called SQLite.
994:14 - This is the version of
SQL that's generally
994:17 - used on iPhones and
Android devices these days.
994:19 - If you download an app that stores
data like your own contacts,
994:22 - typically is stored using SQLite.
994:24 - Because it's fairly lightweight,
but you can still store hundreds,
994:28 - thousands, even tens of
thousands of pieces of data
994:31 - even using this lightweight
version thereof.
994:33 - SQLite3 is like version 3 of this tool.
994:36 - We're going to go ahead and run SQLite3
with a file called favorites.db.
994:41 - It's conventional in the world of
SQLite to name your file something.db.
994:45 - I'm going to create a
database called favorites.db.
994:47 - Once I'm inside of the program, now I'm
going to go ahead and enter CSV Mode.
994:52 - Again, not something
you have to memorize,
994:54 - just something you
can look up as needed.
994:55 - And then, I'm going to
import favorites.csv
994:59 - into a table, that is, a sheet, if
you will, called favorites as well.
995:05 - Now I'm going to hit Enter and I'm
going to go ahead and exit the program
995:09 - altogether and type ls.
995:10 - Now I have three files
in my current directory--
995:13 - the CSV file, the Python file
from before, and now favorites.db.
995:17 - But if I did this right, all of the
data you all typed into the CSV file
995:21 - has now been loaded into a proper
database where I can now use
995:25 - this SQL language to access it instead.
995:28 - So let's go ahead again and run SQLite3
of favorites.db, which now exists.
995:33 - And now, at the SQLite
prompt I can start
995:35 - to play around and
see what this data is.
995:38 - For instance, I can
look, by typing .schema,
995:41 - at what the schema is of
my data, what's the design.
995:44 - Now no thought was put into the
design of this data at the moment
995:47 - because I automated the whole process.
995:49 - Once we start creating
our own databases we'll
995:52 - give more thought to the data
types and the columns that we have.
995:55 - But we can see what SQLite
presumed I wanted just
995:59 - by importing the data by default.
996:01 - What the import command did for me a
moment ago is essentially the syntax.
996:06 - It automated the process of creating
a table, if it doesn't exist,
996:09 - called favorites.
996:11 - And then notice, in parentheses
it gave me three columns--
996:14 - timestamp, title, and genres, which
were inferred, obviously, from the CSV.
996:18 - All three of which have
been decreed to be text.
996:21 - Again, once we're more comfortable
we'll create our own tables,
996:24 - choose our own types and column names.
996:26 - But for now, I just automated
the whole process just
996:28 - to get us started by using this
built-in import command as well.
996:33 - All right.
996:34 - So what now can I begin to do?
996:36 - Well, if I wanted to, for instance,
start playing around with data therein,
996:42 - I might execute a couple
of different commands.
996:48 - Let me find the right one here--
one of which would be select.
996:53 - Select being one of our
most versatile tools
996:56 - to select data from this database.
996:58 - So if I have these three
columns here-- timestamp,
997:01 - title, and genres, suppose I
want to select all of the titles.
997:04 - Doing that earlier in Python
required importing the CSV library,
997:09 - opening the file, creating a reader or
a DictReader, iterating over every row,
997:14 - adding every title to a dictionary
or just printing it out,
997:16 - and dot, dot, dot.
997:17 - There was a dozen or so lines
of code when we first began.
997:20 - Now, how about this?
997:22 - Select title from
favorites, semicolon, done.
997:26 - So now, with this particular
language, the output is very textual
997:30 - and it's simulating what it looks like
if it were more graphical by creating
997:34 - this table, so to speak.
997:36 - Select title from
favorites is a distillation
997:39 - in a different language called
SQL of all the lines of code
997:42 - I wrote early on when we first
started playing with favorites.py.
997:46 - SQL is therefore optimized for
reading, and creating, and updating,
997:50 - and ultimately, deleting data.
997:52 - So here's perhaps a better tool
for the job once you have the data.
997:56 - Tossing it into a more
powerful, versatile format
997:59 - might allow you now to get
more work done more quickly
998:02 - without having to reinvent the wheel.
998:04 - Someone else has figured out
how to select data like this.
998:06 - What more can I do here?
998:09 - Well, let me go ahead and pull
up, in a moment, just a little bit
998:12 - of a cheat sheet here.
998:14 - Give me one second to find this.
998:19 - So suppose I want to now select
data a little more powerfully.
998:23 - So here's what I just
did in a canonical way.
998:25 - So select typically works like this.
998:27 - You select columns from a
specific table, semicolon.
998:31 - Unfortunately, stupid
semicolons are back.
998:33 - Select columns from table then, is
the generic form of what I just did.
998:38 - More specifically, I selected one
column called title from favorites.
998:42 - Favorites is the name of the table.
998:43 - Semicolon ends my thought.
998:45 - Suppose I wanted to get two things, like
the genres that each of you inputted.
998:48 - I could instead do select title,
comma, genres from favorites,
998:53 - and then, a semicolon, and Enter.
998:55 - It's going to look a
little ugly on my screen
998:57 - because some of these titles and--
998:59 - OK, one of you really went
all out with Community.
999:02 - You can see that it's just
wrapping in an ugly way,
999:06 - but it's just now
showing me two columns.
999:08 - If we scroll up to the very top
again, the left most of one,
999:12 - Black Mirror went all out, too.
999:13 - Thank you.
999:14 - And now, OK, we're going to
have to clean some of these up.
999:17 - Game of Thrones, good comedy, yes.
999:22 - Keep going, keep going, keep going.
999:24 - So now we've selected two of
the columns that we care about.
999:28 - There it is.
999:28 - OK, so it's crazy wide because
of all of those genres.
999:31 - But it allows me to select
exactly the data I want.
999:34 - Let's go back to the titles, though,
and perhaps start playing around
999:37 - with some modifiers here.
999:39 - For instance, it turns out, using
SQL there's a lot of functionality
999:43 - built into the language.
999:45 - You've got a lot of functions, similar
to Excel or Google Spreadsheets
999:48 - where you can have formulas.
999:49 - SQL provides you with some
of the same heuristics that
999:51 - allow you to apply operations
like these on entire columns.
999:55 - For instance, you can take
averages, count the total,
999:58 - get the distinct values, force
things to lowercase, uppercase, min,
1000:01 - and max, and so forth.
1000:02 - So let's try distinct, for instance.
1000:04 - Let me go back to my Terminal,
and let's say, select,
1000:08 - how about the distinct titles
from the favorites table?
1000:14 - Enter.
1000:14 - I didn't bother selecting
the genres because I
1000:16 - want it to be a little prettier.
1000:18 - And you can see here that we
have just the distinct titles,
1000:23 - except for issues of formatting.
1000:25 - So whitespace is going
to be an issue again.
1000:27 - Capitalization is going
to be a thing again.
1000:29 - So there's a trade-off.
1000:30 - One of the things I was doing in Python
was forcing everything to uppercase
1000:34 - and then getting rid of whitespace.
1000:36 - But we could combine some of these.
1000:37 - I could do something like
force every title to uppercase,
1000:40 - then get the distinct value.
1000:41 - And that's actually going to get
rid of some of those values as well.
1000:44 - And again, I did it all in
one simple line that was fast.
1000:47 - So let me pull up at the
bottom of the screen again.
1000:49 - I selected distinct upper
titles from favorites,
1000:53 - and that did everything for
me at once in just one breath.
1000:56 - Suppose I want to get the total
number of counts of titles.
1000:58 - How about select count of all
of those titles from favorites?
1001:05 - Semicolon, Enter, and now
you get back a mini table
1001:09 - that contains just your
answer, 158 in this case.
1001:13 - So that's the total
number of, not distinct,
1001:15 - but total titles that
we had in the file.
1001:18 - And we could continue to manipulate
the data further using, again,
1001:21 - functions like these here.
1001:23 - But there's also additional
filtration we can do.
1001:26 - We can also qualify our selections by
saying where some condition is true.
1001:32 - So just as in Scratch, and C, and
Python, you have Boolean expressions,
1001:35 - you can have the same in SQL as well,
where I can filter my data where
1001:41 - something is true or false.
1001:44 - Like allows me to do approximations.
1001:46 - If I want to get something
that's like The Office
1001:48 - but not necessarily
T-H-E, space, Office,
1001:51 - I could do pattern
matching using like here.
1001:54 - Order by, limit, and grouped by are
other commands I can execute, too.
1001:58 - So let me go back and do
a couple of these here.
1002:01 - How about, let me just get, oh, I don't
know, all of the titles from favorites
1002:07 - but limit it to 10 results.
1002:10 - That might be one thing that's helpful
to see if you just care about some
1002:13 - of the data at the top there instead.
1002:15 - How about, select all of the titles
from favorites, where the title itself
1002:21 - is like, quote, unquote, "Office?"
1002:25 - And this will give me only two answers.
1002:28 - Those are the two rows, recall, that I
mutated by getting rid of the word The.
1002:32 - Notice that like allows me too
tolerate uppercase and lowercase.
1002:37 - Because if I instead
just use the equal sign,
1002:40 - and in SQL a single equal sign
does, in fact, mean equality.
1002:46 - For comparison's sake,
it's not doing assignment.
1002:48 - This is not how you assign data in SQL.
1002:51 - I got back no answers there.
1002:53 - So indeed, the equal sign
is giving me literal answers
1002:56 - that searches just for what I typed in.
1002:59 - How could I get all of these?
1003:00 - Well, similar in spirit to regular
expressions but not quite as powerful
1003:04 - in SQL, I could do something like this.
1003:06 - I can select the title from favorites
where the title is like, quote,
1003:10 - unquote, "Office."
1003:12 - But I can add, a bit weirdly, percent
signs to the left and the right.
1003:17 - So the language SQL supports the
same notion of pattern matching
1003:23 - but much more limited out of the box.
1003:24 - If we want more powerful
regular expressions
1003:26 - we probably do want
to use Python instead.
1003:28 - But the percent sign here
means 0 or more characters
1003:32 - on the left, 0 or more
characters on the right.
1003:34 - So this will just grab any title that
contains O-F-F-I-C-E in it in that
1003:39 - order.
1003:40 - And now I get all 16, it would
seem, of those results, again.
1003:44 - How do I know it's 16?
1003:45 - Well, I can just get the
count of those titles
1003:48 - and get back that
answer instead as well.
1003:51 - So again, it takes some
getting used to, the vocabulary
1003:54 - and the syntax that you can use.
1003:56 - There's these building
blocks and others.
1003:58 - But SQL is really designed, again,
for creating, reading, updating,
1004:00 - and deleting data.
1004:01 - For instance, I've never really
been a fan of Friends, for instance.
1004:06 - So right now if I do select,
how about title from favorites
1004:12 - where title like, quote, unquote,
Friends with the percent signs?
1004:18 - We can see that there's
a whole bunch of them.
1004:20 - That's how many exactly.
1004:21 - Let's just do a quick count.
1004:23 - So that's nine of them.
1004:25 - Well, delete from favorites.
1004:28 - OK, you and me, delete from favorites,
where title like Friends, Enter.
1004:35 - Nothing seems to happen,
but bye-bye Friends.
1004:39 - [APPLAUSE]
1004:40 - DAVID J. MALAN: Thank you.
1004:44 - So now we've actually changed the data.
1004:46 - And this is what's compelling
about a proper database.
1004:50 - Yes, you could technically write Python
code that not only reads the CSV file,
1004:54 - but also writes it.
1004:55 - You can change using quote,
unquote, "A" for append,
1004:58 - or quote, unquote, "W" for
write, instead of quote, unquote,
1005:01 - "R" for read alone.
1005:02 - But it's definitely a little more
involved to do that in Python.
1005:05 - But with SQL, you can update
the data in real time.
1005:07 - And if I were actually running a
web application here or a database
1005:11 - for a mobile app, that
change, theoretically,
1005:13 - would be reflected everywhere
on your own devices
1005:15 - if you're somehow talking
to this application.
1005:17 - So that's the direction we're headed.
1005:19 - This other thing has been bothering me.
1005:20 - So select, how about title from
favorites, where title equals,
1005:27 - what was it?
1005:28 - The V Office, was it?
1005:31 - Yeah, it was that one.
1005:33 - How about we update
favorites by setting title
1005:37 - equal to The Office, where title
equals quote, unquote, "The V Office"
1005:44 - semicolon?
1005:45 - And now, if I select
the same thing again
1005:47 - I can go up and down with
my arrow keys quickly.
1005:50 - Now there is no The V Office.
1005:52 - We've actually changed that value.
1005:54 - How about genres?
1005:55 - Select genres from favorites,
where the title is title
1006:01 - equals Game of Thrones, semicolon.
1006:04 - These were kind of long, and I
don't really agree with all of that.
1006:08 - So how about we update favorites,
set genres equal to, sure,
1006:14 - action, adventure, sure, drama?
1006:17 - OK, so it's a decent list.
1006:19 - Fantasy, sure, thriller, war.
1006:22 - OK, anything really but
comedy, I would say.
1006:26 - Let's go ahead and hit Enter now.
1006:28 - And now, if I select genres again, same
query, now we've canonicalized that.
1006:33 - We've thrown data away.
1006:34 - So whether or not that
is right is probably
1006:36 - a bit subjective and argumentative.
1006:38 - But I have at least cleaned up my
data, which is, again, the U in CRUD.
1006:42 - Create, read, update, delete,
you can do it that easily.
1006:46 - Beware using delete.
1006:47 - Beware worse using drop, whereby
you can drop an entire table.
1006:51 - But via these kinds of
commands, can we actually now
1006:54 - manipulate our data much more
rapidly and with single thoughts.
1006:58 - And in fact, if you're an aspiring
statistician, or data scientist,
1007:01 - or analyst in the real world, SQL
is such a commonly used language
1007:05 - because it allows you to really
dive into data quickly, and ask
1007:08 - questions of the data, and get
back answers quite quickly.
1007:11 - And this is a simple data set.
1007:12 - You can do this with much larger
data sets as we soon will, too.
1007:17 - Or any questions on what
we've seen of SQL thus far?
1007:20 - Only scratched the
surface, but again, it
1007:22 - boils down to creating, reading,
updating, and deleting data.
1007:28 - Questions here?
1007:30 - All right.
1007:30 - Well, let's consider
the design of this data.
1007:33 - Recall that if I do .schema, that
shows me the design of my table,
1007:37 - the so-called schema of my data.
1007:39 - This is OK.
1007:40 - It gets the job done, and frankly,
everything the user typed in
1007:42 - was arguably text, including the
timestamp, which is the date and time.
1007:46 - But so the data set
itself is somewhat simple.
1007:49 - But if we look at the data set itself,
especially genres, let's do this.
1007:54 - Select genres from favorites.
1007:57 - And let me point out one other
thing stylistically, too.
1007:59 - I am very deliberately capitalizing
all of the special SQL keywords,
1008:04 - and I'm lowercasing all of the
column names and the table names.
1008:08 - This is a convention, and
honestly, it just helps you read,
1008:11 - I think, the code when you're
co-mingling your names for columns
1008:14 - and tables with proper SQL keywords.
1008:17 - But I could just as easily do
select genres from favorites,
1008:23 - but again, the SQL specific keywords
don't quite jump out as much.
1008:26 - So stylistically, we would
recommend this, selecting genres
1008:29 - from favorites, semicolon.
1008:31 - So here is where--
1008:34 - oh.
1008:36 - OK, that was not intended.
1008:38 - I accidentally made
every show, including
1008:40 - The Office about action, adventure,
drama, fantasy, thriller, and war.
1008:45 - How did I do that accidentally?
1008:49 - What did I do wrong?
1008:50 - AUDIENCE: [INAUDIBLE]
1008:55 - DAVID J. MALAN: Yeah.
1008:56 - So beware, this is funny.
1008:57 - I think I did say
beware around this time.
1008:59 - So the SQL database took me--
literally, I updated favorites,
1009:03 - setting genres equal to that,
semicolon, end of thought.
1009:06 - I really wanted to say
where title equals,
1009:08 - quote, unquote, "Game of Thrones."
1009:11 - Unfortunately, there isn't an
undo command or time machine
1009:14 - with a SQL database, so
the best we can do here
1009:17 - is, let's actually get
rid of favorites.db.
1009:21 - Let's run SQLite of favorites.db
again, which now will be recreated.
1009:27 - Let me change myself into CSV mode.
1009:29 - Let me import, into my
favorites table, the CSV file.
1009:35 - And now, Friends is back,
for better or for worse,
1009:39 - but so are all of our genres.
1009:43 - If I now reload the file
and do select, star, from--
1009:46 - sorry.
1009:47 - Select genres from favorites,
that was the result I was getting.
1009:51 - It's much messier, but that's
because some of these are quite long.
1009:53 - But now we're back to the original data.
1009:55 - Lesson here, be sure
to back up your work.
1009:58 - All right.
1009:58 - So what more can we
now do with this data?
1010:02 - Well, I don't love the design of the
genres table for a couple of reasons.
1010:05 - One, we didn't have
any sort of validation,
1010:08 - but user input is going to be messy.
1010:10 - There's just a lot of
redundancy in here.
1010:13 - Let's go ahead and do this.
1010:15 - Let me select all the
comedies you all typed in.
1010:17 - So select title from
favorites, where genres equals,
1010:23 - quote, unquote, "comedy."
1010:25 - OK, so there's all of the shows
that are explicitly comedies.
1010:31 - But I think there might
actually be others.
1010:34 - Let me scroll back up here.
1010:36 - Comedy, drama.
1010:37 - What was a comedy and a drama?
1010:39 - How about let's search for the-- oops,
let me copy paste comedy, comma, drama.
1010:44 - OK, so The Office, in this case, was
considered comedy and drama, Billions,
1010:49 - It's Always Sunny in Philadelphia,
and Gilmore Girls as well.
1010:52 - But notice that I get many more
when I just search for comedy.
1010:56 - So the catch here is that, because I
have all of these genres implemented
1011:01 - the way Google did, as
a comma-separated list,
1011:04 - it's actually really hard and messy
to get at any show, all of the shows
1011:08 - that are somewhere described as comedy.
1011:12 - Because if I search for quote,
unquote, "comedy," the only answers
1011:15 - I'm going to get are this one, whatever
that show is, this one, whatever
1011:18 - that show is, this one.
1011:20 - But I'm not going to get this one.
1011:22 - I'm not going to get this one.
1011:23 - Why?
1011:24 - If I'm searching for, where genres
equals, quote, unquote, "comedy,"
1011:28 - why am I missing those other shows?
1011:32 - Why am I missing?
1011:33 - Yeah?
1011:33 - AUDIENCE: [INAUDIBLE]
1011:36 - DAVID J. MALAN: Exactly.
1011:37 - It's not just a comedy,
it's a comedy and a drama,
1011:39 - and a comedy or a news
show, and so forth.
1011:42 - So I have to search for these commas,
so this gets messy quickly, right?
1011:45 - Let me copy this so I can do this.
1011:47 - Let me search for where
genres equals comedy.
1011:51 - How about, or genres equals
comedy, drama, or genres
1011:58 - equals this whole thing,
comedy, news, talk show?
1012:01 - I'm going to get more and more results.
1012:03 - But that's not going to scale well.
1012:05 - What could I do instead
of enumerating with ors
1012:08 - all of the different permutations
of genres, do you think?
1012:11 - AUDIENCE: [INAUDIBLE]
1012:14 - DAVID J. MALAN: Yeah.
1012:15 - So I could use the keyword is,
similar in Python to the word in.
1012:19 - I could use the like
keyword so that so long
1012:22 - as the genres is like
comedy somewhere in there,
1012:27 - that's going to give me all of them,
so long as the word comedy is in there.
1012:31 - But let me go ahead and just
open the form from earlier.
1012:37 - Let me see if I can open this
real quick before I toggle over.
1012:40 - If we look back at the
form, recall that there
1012:42 - were all of those radio buttons
asking for the specific genres
1012:47 - into which something fell.
1012:49 - And if I open this, let me full screen
here and now open the original form.
1012:55 - You'll see all of the
genres here, none of which
1012:58 - are that worrisome except for a
corner case is jumping out at me.
1013:04 - Where might the like keyword
alone get me into trouble?
1013:08 - It's not with comedy.
1013:09 - I'm OK with comedy.
1013:11 - AUDIENCE: Music and musical?
1013:13 - DAVID J. MALAN: Yeah, music and musical
are deliberately on the list here.
1013:16 - Because, one, they're separate genres.
1013:19 - But if I just search for
something that's like music,
1013:21 - I'm going to accidentally suck
in all of the musicals, which
1013:24 - might not be what I intend.
1013:25 - If music is a music video or
whatever, and musical is actually
1013:28 - a different type of show, I
don't want to just do that.
1013:31 - So it seems just very messy.
1013:33 - I could probably hack something together
with-- maybe add some commas in there,
1013:37 - or something like this.
1013:37 - But this is just not a
good design for the data.
1013:40 - Google has done it this
way because it's just
1013:43 - simple to actually keep the user's
data all in a single column,
1013:47 - and just as they did,
separate it by commas.
1013:49 - But this is a real
messy way to use CSV is
1013:54 - by putting comma-separated values
in your comma-separated values.
1013:58 - Arguably, the folks at
Google probably just did this
1014:00 - because it's just simpler.
1014:01 - And they didn't want to
give people multiple sheets
1014:03 - or complicate things using some other
weirder character than commas alone.
1014:07 - But I bet there's a better
way for us to do this.
1014:09 - And let me go ahead and do this.
1014:11 - Let me go back into my code here.
1014:13 - And in just a moment, I'm
going to grab a program
1014:15 - that I wrote in advance that's going
to use Python to open up the CSV file,
1014:19 - iterate over all of the rows, and load
the data into two tables this time,
1014:24 - two tables, one called
shows, and one called genres,
1014:27 - so as to actually separate
these two things out.
1014:30 - Give me just a moment to grab the code.
1014:33 - And when I run this, I'll
only have to run it once.
1014:36 - Let me go ahead and
run Python in a moment,
1014:38 - and I'll reveal the results in a sec.
1014:41 - This is going to be version
8 of the code online.
1014:44 - When I do this, let me go
ahead and open up this file.
1014:47 - Give me a second to move
it into this directory.
1014:51 - Version 8, OK.
1014:53 - So here we have version 8 of
this that's available online
1014:56 - that's going to do the following.
1014:58 - And I'll gloss over some
of the details just so
1015:00 - that we don't get stuck in the
weeds of some of this code.
1015:04 - I'm going to be using, at
the top of this program,
1015:06 - as we'll soon see, a CS50 library,
not for the sake of get_string,
1015:11 - or get_int, or get_float, but
because there's some built-in SQL
1015:14 - functionality that we didn't discuss
a couple of weeks back with the CS50
1015:17 - library itself.
1015:18 - But inside of the CS50 library we'll
see there is a special function called
1015:22 - SQL that gives you the ability using
this weird URL-like looking thing,
1015:26 - technically called a URI, that allows
me to open a file called favorites.db.
1015:31 - And long story short, all
of the subsequent code
1015:33 - is going to iterate over this
favorites.csv file that we downloaded.
1015:37 - And it's going to import it
into the SQLite database,
1015:41 - but it's going to use two
tables instead of just one.
1015:44 - So give me just a moment
to run this, and then I'll
1015:46 - reveal the actual results.
1015:48 - This is going to be
run on favorites.csv.
1015:56 - And taking a look here,
give me just a moment.
1016:04 - Oh, give me a sec.
1016:08 - Come on.
1016:10 - Come on.
1016:11 - This program should not
be taking this long.
1016:14 - Sorry.
1016:15 - Let's open this real fast.
1016:20 - Whoops, not that file.
1016:24 - OK.
1016:24 - Let me just skim this code real
quick to see where we've gone wrong.
1016:27 - [INAUDIBLE] reader.
1016:30 - Reader, title, show ID
in certain two shows.
1016:35 - [INAUDIBLE] genres split, DB execute.
1016:40 - All right.
1016:41 - This is me debugging in real time.
1016:42 - All those times we encourage you to use
print, this is me actually using print.
1016:48 - We'll see how quickly I
can recover from this.
1016:50 - Python of favorites version 8.
1016:54 - OK, so here's me debugging in real time.
1016:57 - It's printing it.
1016:58 - Oh, maybe I just didn't
wait long enough.
1016:59 - OK, so here we go.
1017:01 - What I'm doing is printing out
the dictionary that represents
1017:05 - each row that you all typed in.
1017:06 - And we're actually making progress.
1017:08 - All right.
1017:09 - I was too impatient and
didn't wait long enough.
1017:11 - So in a moment--
1017:12 - there we go.
1017:13 - All right, so all we have
to do sometimes is wait.
1017:15 - Let me go ahead now and open
this file using SQLite3.
1017:19 - So in SQLite3 I now have a
different version of favorites.db.
1017:23 - I named it number 8 for consistency.
1017:25 - Once I've run the program I can
do .schema to look inside of it.
1017:28 - And here's what the two tables in
this database are going to look like.
1017:32 - I've created a table called shows, this
time to represent all of the TV shows
1017:36 - that are favorites,
that has two columns.
1017:39 - One is called ID, one is called Title.
1017:42 - But now I'm going to start
taking out for a spin some
1017:44 - of the other features of SQL.
1017:45 - And besides there being text, it turns
out there's a data type called integer.
1017:50 - Besides there being a
data type called text,
1017:52 - there's also a special key
phrase that you can specify
1017:55 - that the title can never be null.
1017:57 - Think back to our use
of null in C. Think back
1018:00 - to the keyword none in Python.
1018:02 - This is a database constraint that
allows you to ensure that none of you
1018:06 - can't have of favorite TV show.
1018:07 - If you submit the form, you have
to have typed in a title for it
1018:11 - to end up in our database here.
1018:13 - And you'll notice one other new feature.
1018:16 - It turns out, on this
table I'm defining what's
1018:18 - called a primary key,
specifically to be the ID column.
1018:22 - More on that in just a moment.
1018:23 - Meanwhile, the second table my code
has created for me, as we'll soon see,
1018:28 - gives me a column called
show ID, and then, a genre,
1018:33 - the value of which is text
that can also not be null.
1018:36 - And then more on this in a moment.
1018:38 - This table has what we're
going to call a foreign key,
1018:41 - specifically the show ID column
that references shows ID.
1018:45 - So before we get into
the weeds of this, this
1018:48 - is now a way of creating the
relation in relational database.
1018:52 - If I have two tables now, not
just one, they can somehow
1018:56 - be linked together by a common column.
1019:00 - In other words, the shows column--
1019:03 - shows table is going to give
me a table with two columns--
1019:06 - an ID and a title.
1019:08 - Every title you gave me, I'm
going to assign a unique value.
1019:12 - The genre's table, meanwhile, is
going to associate individual genres
1019:16 - singular with that same idea.
1019:19 - And the result of this, to pop back to
the Terminal here, is, let's do this.
1019:26 - Select star from shows
of this new database,
1019:30 - and you'll see that I've given,
indeed, all of the shows you all typed
1019:34 - in unique identifiers.
1019:36 - I didn't filter out duplicates or do
anything beyond just forcing everything
1019:39 - to uppercase.
1019:39 - So there's going to be some
duplicates here because I didn't
1019:42 - want to get rid of anyone's data.
1019:44 - But you'll see that,
indeed, I've given everyone
1019:47 - a unique identifier, from
the very first person who
1019:49 - typed How I Met Your Mother, all
the way down to input number 158.
1019:53 - Meanwhile, if I do select star from
genres, which is now a table, not just
1020:01 - a column in the original
data, now you'll
1020:03 - see a much better design for this data.
1020:08 - Notice what I've done here.
1020:09 - Let me go all the way to the top and
you'll see two columns, one of which
1020:12 - is called show ID, the other
of which is called genre.
1020:16 - And again, I wrote some
code to do this because I
1020:18 - had to take Google's messy output where
everything was separated by commas.
1020:22 - I had to tear away the commas and
then put each genre into this table
1020:25 - by itself.
1020:27 - Even though we haven't
introduced the syntax via which
1020:29 - we can reconstitute the
data and reassociate
1020:32 - your genres with your
titles, why, at a glance,
1020:35 - might this be a better design now?
1020:38 - Even though I've doubled the
number of tables from one to two,
1020:42 - why is this probably on the
direction toward a better design?
1020:46 - What might your instincts be?
1020:51 - Why is this cleaner?
1020:53 - Again, first time with SQL,
why is it better, perhaps,
1020:56 - that we've done this
with our genre's table?
1020:59 - Can I come to you?
1021:00 - Why might this be better?
1021:02 - Yeah.
1021:02 - Oh, just because we had the
conversation before about the commas.
1021:06 - AUDIENCE: [INAUDIBLE]
1021:07 - DAVID J. MALAN: Exactly.
1021:08 - It's as simple as that.
1021:09 - We've cleaned up the data by giving
every genre, every word in the genres
1021:14 - column in the original
Google Spreadsheet
1021:16 - its own cell in this table, if you will.
1021:19 - And now notice show ID
might appear multiple times.
1021:22 - Whoever typed in How I Met Your Mother,
they only associated one genre with it.
1021:26 - And so we see that
show ID 1 is a comedy.
1021:29 - But whoever typed in--
1021:30 - I forget the name of
the second show offhand.
1021:32 - But that person, whoever was
assigned show ID 2 checked off
1021:37 - a whole bunch of the genre's boxes.
1021:39 - That happened again with show ID 3, 4.
1021:42 - Persons 5, 6, 7 only checked one box.
1021:46 - And so you can see now that we've
associated the data with what we
1021:50 - might call a one-to-many relationship.
1021:53 - A one-to-many relationship, whereby
for every one show in the show's table,
1021:58 - it can now have many genres
associated with it, each of which
1022:02 - is represented by a separate row here.
1022:06 - So again, if I go ahead and
select star from shows--
1022:10 - let's limit it to the first 10 just
to focus on a subset of the data.
1022:14 - How I Met Your Mother, The Sopranos
was the second input there.
1022:17 - It would seem that now that I've
created the data in this way,
1022:20 - I could ideally somehow search the
data, but a little more correctly.
1022:25 - I don't have to worry about the commas.
1022:26 - I don't have to worry about
the hackish approach of music
1022:29 - being a substring of musical.
1022:30 - But how can I actually
get back at this data?
1022:33 - Well, let's go ahead and do this.
1022:35 - Suppose I did want to get back
maybe all of the comedies.
1022:39 - All of the comedies, no matter whether
the person checked just the comedy
1022:42 - box or multiple boxes instead.
1022:44 - How now, given that I
have two tables, could I
1022:48 - go about selecting only
the titles of comedies?
1022:53 - I've actually made the
problem a little harder,
1022:55 - but again, SQL is going to
give me a solution for this.
1022:58 - The problem is that if I
want to search for comedies,
1023:00 - I have to check the genres table first.
1023:03 - And then what's that going to give me?
1023:04 - If I search the genres
table for comedies,
1023:08 - what's that going to
give me back potentially?
1023:11 - Yeah?
1023:12 - AUDIENCE: Show ID.
1023:13 - DAVID J. MALAN: Maybe show ID.
1023:14 - So let me try that.
1023:15 - Let me do select show ID from genres,
where the genre in a given row
1023:21 - equals quote, unquote, "comedy."
1023:22 - No commas, no like, no percent signs.
1023:25 - Because literally, that column now is
singular words, like comedy, or drama,
1023:30 - or the like.
1023:31 - Let me go ahead and hit Enter here.
1023:33 - OK, so I got back a whole
bunch of ID numbers.
1023:36 - Now this could very
quickly get annoying.
1023:38 - It looks like show ID 1, 2, 4, 5, 6,
7, 9, and so forth, are all comedies.
1023:43 - So I could do something really
crazy like, select title from shows,
1023:49 - where ID equals 1, or ID equals 2.
1023:54 - This is not going to
scale very well, but this
1023:57 - is why SQL is especially powerful.
1023:59 - You can actually compose one
SQL question from multiple ones.
1024:04 - So let's do this.
1024:05 - Why don't I select the title
where the ID of the show
1024:09 - is in the following list of IDs?
1024:13 - Select show ID from genres, where the
specific genre is, quote, unquote,
1024:20 - "comedy."
1024:20 - So I've got two SQL queries.
1024:23 - One is deliberately nested
inside of parentheses.
1024:27 - That's going to give me back
that whole list of show IDs.
1024:30 - But that's exactly what
I want to then look up
1024:32 - the titles for by selecting title
from shows where the ID of the show
1024:36 - is in that big, tall list.
1024:38 - And so now if I hit Enter,
I get back only those shows
1024:44 - that were somehow flagged as
comedy, whether you in the audience
1024:47 - checked one box for comedy,
two boxes, or all of the boxes.
1024:51 - Somehow we teased out
comedy, again, just
1024:54 - by using that Python script,
which loaded this data not
1024:56 - into one big table, but instead, two.
1024:59 - And if we want to clean this
up, let's do a couple of things.
1025:01 - Let's, outside of the
parentheses, do order by title.
1025:05 - This is a way of sorting
the data in SQL very easily.
1025:08 - Now we have a whole list of the
same titles that are now sorted.
1025:13 - And what was the keyword with which
I could filter out duplicates?
1025:17 - Yeah, distinct.
1025:18 - So let's try this.
1025:19 - Same query, but let's select only the
distinct titles from that whole query.
1025:24 - And notice, I've very
deliberately done it this way.
1025:27 - And to this day, any
time I'm using SQL, I
1025:28 - don't just start at the beginning
and type out my whole thought,
1025:31 - and just get it right on the first try.
1025:33 - I very commonly start
with the subquery, if you
1025:35 - will, the thing in
parentheses, just to get myself
1025:38 - one step toward what I care about.
1025:39 - Then I add to it.
1025:40 - Then I add to it.
1025:41 - Then I add to it, just like
we've encouraged in Python and C,
1025:43 - taking baby steps in order to get to
the answer you actually care about,
1025:47 - like this one now.
1025:48 - And other than this
mistake, which we didn't
1025:51 - fix because I re-imported the data after
accidentally changing everyone's genre,
1025:55 - we now have an alphabetized
list of all of the same data.
1026:00 - But now it's better designed, because we
have it split across these two tables.
1026:06 - Oh, thank you.
1026:06 - OK, just thanks.
1026:10 - What questions do we have, if any here?
1026:14 - Questions on this approach?
1026:18 - Yeah?
1026:20 - AUDIENCE: [INAUDIBLE]
1026:25 - DAVID J. MALAN: Oh, now
that we have a database,
1026:27 - how do we transfer it to a CSV?
1026:29 - There are ways to do that.
1026:31 - And in fact, there's a
command within SQLite
1026:33 - that allows you to export
your data back to a CSV file.
1026:36 - If you want to email
it to someone and you
1026:38 - want them to be able to open it in
Excel, or Google Spreadsheets, or Apple
1026:41 - Numbers, or the like, you can
go in the other direction.
1026:44 - Generally though, once
you're in the world of SQL
1026:47 - you're probably storing
your data there long term.
1026:49 - And you're probably updating it,
maybe deleting it, adding to it,
1026:52 - and so forth.
1026:53 - For instance, the one command
I did not show earlier
1026:55 - is, suppose someone forgot a show.
1026:58 - Let's see, did I see this in the output?
1027:00 - All right, so Curb Your Enthusiasm.
1027:02 - Saw that last night.
1027:03 - It was just, yeah.
1027:04 - Did anyone see it last night?
1027:06 - No?
1027:07 - All right, well, just the one person
that checked that box, so you and me.
1027:10 - What's another show that
didn't make the list?
1027:12 - How about Seinfeld?
1027:13 - It's now on Netflix, apparently.
1027:14 - So insert into shows.
1027:20 - What do we want to insert?
1027:21 - Well, we want to insert
maybe an ID and a title.
1027:25 - But I don't actually
care what the ID is,
1027:27 - so I'm just going to insert a title.
1027:28 - And the value I'm going
to give to that title
1027:31 - is going to be, quote,
unquote, "Seinfeld."
1027:34 - And then, let me go
ahead and hit semicolon.
1027:37 - Nothing seems to happen, but
let me rerun the big query
1027:39 - from before looking for comedies.
1027:41 - And unfortunately, Seinfeld has
not yet been flagged as a comedy,
1027:45 - so let's get this right, too.
1027:47 - What intuitively I'm going to
have to do to associate, now,
1027:50 - Seinfeld with my comedies?
1027:53 - I just inserted into the show's table.
1027:55 - What more needs to happen before
we can flag Seinfeld as a comedy?
1027:59 - AUDIENCE: [INAUDIBLE]
1028:00 - DAVID J. MALAN: Say again?
1028:01 - AUDIENCE: [INAUDIBLE]
1028:02 - DAVID J. MALAN: Yeah.
1028:03 - So I need to insert into the
genres table two things now,
1028:08 - a show ID, like this, and
then, the name of the genre,
1028:13 - which presumably is comedy.
1028:14 - What values do I want to insert?
1028:16 - Well, the show ID, I better grab that.
1028:18 - Oh, I don't even know what it is.
1028:19 - I'm going to have to
figure out what that is.
1028:21 - So I could do this in a couple of ways.
1028:23 - Let me do a one-time thing.
1028:24 - Select star from shows,
where title equals,
1028:28 - quote, unquote,
"Seinfeld" semicolon 159.
1028:32 - So now I could do, insert
into genres a show ID
1028:37 - and a genre name, the values 159, and,
quote, unquote, "comedy" semicolon,
1028:45 - Enter.
1028:46 - And now, if I scroll back in my history
and execute that really big query
1028:50 - again, looking for
all distinct comedies,
1028:52 - now Seinfeld has made the list.
1028:54 - But I did this manually so I
didn't actually capitalize it.
1028:57 - Let's clean that up.
1028:58 - Let's do update.
1029:00 - Let's do update my shows.
1029:03 - Set title equals to Seinfeld semicolon.
1029:08 - No?
1029:09 - OK, thank you, where title equals,
quote, unquote, "Seinfeld."
1029:13 - Let's not make that mistake again.
1029:14 - Enter.
1029:15 - And now, if I execute that really
big query, now Seinfeld is,
1029:18 - indeed, considered a comedy.
1029:21 - So where are we going with this?
1029:23 - Well, thus far we've been doing
all of this pretty manually.
1029:25 - And this is absolutely what an
analyst, a data scientist type person
1029:28 - might do if just manipulating
a pretty large data set just
1029:30 - to get at interesting answers
that might be across one,
1029:33 - two, or even many more tables.
1029:34 - Eventually, in a few weeks, we're
going to start to automate all of this
1029:37 - by writing code in Python
that generates SQL to do this.
1029:41 - If you go to most any website
on the internet today,
1029:44 - and you, for instance, log in, odds are
you're typing a username and password,
1029:48 - clicking Submit.
1029:49 - What's then happening?
1029:50 - Well, the website might not
be implemented in Python
1029:53 - but it's probably implemented in some
language, Python, JavaScript, Java,
1029:56 - Ruby, something else.
1029:58 - And that language is probably using
something like a relational database
1030:03 - to use SQL to get your
username, get your password,
1030:07 - and compare the two against
what you've typed in.
1030:09 - And actually, it's hopefully not
getting your actual password,
1030:11 - but something called the hash thereof.
1030:13 - But there's probably a
database involved doing that.
1030:15 - When you buy something on
Amazon.com and you click Check Out,
1030:18 - odds are there's some
code on Amazon's server
1030:22 - that's looking at what it is
you added to your shopping cart,
1030:25 - and then maybe using a for loop of some
sort, in Python or another language.
1030:29 - It's doing a whole bunch of SQL
inserts to store in their database what
1030:33 - it is you bought.
1030:34 - There's other types of databases,
too, but SQL databases,
1030:37 - or relational databases
are quite popular.
1030:39 - So let's go ahead and write
one other program here
1030:42 - in Python that now merges these
two languages together, whereby
1030:46 - I'm going to use SQL
inside of a Python program
1030:50 - so I can implement my logic
of my program in Python,
1030:53 - step-by-step, line-by-line.
1030:55 - But when I want to get at some data I
can actually talk to a SQL database.
1030:59 - So let me go ahead
and open favorites.py.
1031:05 - And let me go ahead and throw away
some of what we did earlier and really
1031:10 - just now add a SQL to the mix.
1031:13 - From the CS50 library, let's
import the SQL function.
1031:16 - This will be useful to use
because most third-party libraries
1031:19 - that deal with SQL and Python are
more complicated than they need to be.
1031:22 - So I think you'll find
this library easier to use.
1031:25 - Let's then do the following.
1031:27 - Create a variable
called db for database.
1031:29 - But I could call it anything I want.
1031:30 - Let's use that you URI, which is
a fancy way of saying something
1031:34 - that looks like a URL, but that actually
opens up a database on disk, that is,
1031:43 - in the current folder.
1031:44 - Let's now ask the user for a title by
prompting them for a, quote, unquote,
1031:47 - "title" like this.
1031:49 - And let's strip off any whitespace
just so that the data is not messy.
1031:53 - And then, let's go ahead and do this.
1031:56 - And this is the new logic.
1031:57 - I'm going to go ahead now and write
a line of code that uses Python
1032:01 - to talk to the original favorites.db.
1032:05 - So again, I'm not using the two-table
database, which is in favorites8.db.
1032:09 - I'm using the original that we
imported from your own data,
1032:12 - and I'm going to do the following.
1032:14 - I'm going to use db.execute to execute
a SQL command inside of Python.
1032:19 - I'm going to select the count
of shows from the favorites
1032:28 - table, where the title the user
typed in is like this question mark.
1032:35 - And why I'm doing that is as follows.
1032:37 - Just like in C, when we had
percent S, in SQL for now,
1032:40 - the analogue is going
to be a question mark.
1032:42 - So same idea, different syntax.
1032:44 - Instead of percent S,
it's just a question mark.
1032:46 - And using a comma outside of this
first string, using CS50's execute
1032:51 - function I can pass in
a SQL string, a command,
1032:54 - then any arguments I want to plug
into the question marks therein.
1032:59 - So the goal at hand is to
actually write a program that's
1033:01 - going to search favorites.csv, a.k.a.,
favorites.db for the total number
1033:07 - of people that liked a particular show.
1033:10 - So this is going to select the count
of people from the favorites table
1033:14 - where the title they typed in is like
whatever the user has just now typed
1033:18 - in.
1033:19 - This db execute function returns a list.
1033:22 - It returns a list of rows.
1033:23 - And you would only know that
by my telling you or reading
1033:25 - the documentation.
1033:26 - And therefore, if I want to
get back to the total count,
1033:29 - I'm going to go ahead and grab
the first row from those rows.
1033:34 - Because it's only going
to give me back the count.
1033:36 - And then I'm going to go ahead and
print out that row's first value.
1033:41 - But it's going to be a little weird.
1033:43 - Technically the column is going to be
called "count" star, quote, unquote,
1033:46 - which is a little weird.
1033:47 - Let me add one more feature to the mix.
1033:49 - You can actually give
nicknames to columns
1033:51 - that are coming back, especially if they
are the result of functions like this.
1033:55 - I can just call that column
counter, in all lowercase.
1033:59 - That means I can now say get back the
counter key inside of this dictionary.
1034:06 - So just to recap, what have we done?
1034:08 - We've imported the CS50
library SQL function.
1034:11 - We've, with this line of
code, opened the favorites.db
1034:14 - file that you and I created earlier
by importing your CSV into SQLite.
1034:20 - I'm now just asking the user for
a title they want to search for.
1034:23 - I'm now executing this SQL
query on that database,
1034:27 - plugging in whatever the
human typed in as their title
1034:30 - in order to get back a total count.
1034:32 - And I'm giving the count a
nickname, an alias of counter,
1034:36 - just so it's more self-explanatory.
1034:39 - This function, db execute, no matter
what, always returns a list of rows,
1034:43 - even if there's only
one row inside of it.
1034:45 - So this line of code just gives
me the first and only row.
1034:48 - And then, this goes inside of that row,
which it turns out is a dictionary,
1034:53 - and gives me the key counter
and the value it corresponds to.
1034:59 - So what, to be clear, is this doing?
1035:00 - Let's go ahead and run this manually
in my Terminal window first.
1035:03 - Let me run SQLite3 on favorites--
1035:07 - Well, let's do this.
1035:08 - On favorites.db, let me
import the data again.
1035:12 - So mode csv.import in from
favorites.csv into a favorites table.
1035:20 - So I've just recreated the
same data set that you all
1035:22 - gave me earlier in favorites.db.
1035:25 - If I were to do this manually,
let's search for The Office again.
1035:27 - Select, count star from favorites,
where title like, and let's
1035:34 - just manually type it
in for now, The Office.
1035:37 - We'll search for the one
with the word The, semicolon.
1035:40 - I get back 12.
1035:41 - But technically, notice what I get back.
1035:44 - I technically get back a miniature
table containing one column and one row.
1035:50 - What if I want to rename that column?
1035:52 - That's where the as keyword comes in.
1035:54 - So select count star as counter.
1035:56 - Notice what happens, Enter.
1035:58 - I just get back-- same
simple table, but I've
1036:01 - renamed the column to be counter
just because it's a little more
1036:03 - self-explanatory as to what it is.
1036:05 - So what am I doing
with this line of code?
1036:08 - This line of code is returning to
me that miniature temporary table
1036:12 - in the form of a list of dictionaries.
1036:16 - The list contains one
row, as we'll see, and it
1036:20 - contains one column, as we'll
see, the key for which is counter.
1036:26 - So let's now run the code itself.
1036:27 - I'm going to get out of SQLite3 and I'm
going to run Python of favorites.py.
1036:32 - Enter.
1036:33 - I'm being prompted for a title.
1036:34 - I'm going to type in The Office and
cross my fingers, and there's that 12.
1036:39 - Why is it 12?
1036:40 - Well, there's a typo again
because I re-imported the CSV.
1036:42 - I had deleted two of the Thes, so
we're back at the original data set.
1036:46 - So there's 12 total that have,
quote, unquote, "The Office"
1036:51 - in the title like that.
1036:53 - So what have we done?
1036:54 - We've combined some
Python with some SQL,
1036:57 - but we've relegated all of the
complexity of searching for something,
1037:00 - the selecting of something,
gotten rid of all
1037:02 - of the with keyword, the
open keyword, the for loop,
1037:04 - the reader the DictReader,
and all of that.
1037:06 - And it's just one line of SQL now,
using the best of both worlds.
1037:11 - All right, any questions on what we've
just done here or how any of this
1037:17 - works?
1037:20 - Any questions here?
1037:21 - Yeah?
1037:22 - AUDIENCE: [INAUDIBLE]
1037:26 - DAVID J. MALAN: When does this
function return more than one row?
1037:29 - Was that the question?
1037:30 - AUDIENCE: Yeah.
1037:31 - DAVID J. MALAN: Yeah.
1037:31 - So let's do that by changing
the problem at hand.
1037:33 - This program was designed just
to select the total count.
1037:36 - Let's go ahead and
select, for instance, all
1037:41 - of the ways you all typed in The Office
by selecting the title this time.
1037:49 - If I do this in SQLite3, let
me go ahead and do this again
1037:53 - after increasing my Terminal window.
1037:55 - Let's do it manually.
1037:56 - Select title from favorites,
where the title is like,
1038:00 - quote, unquote, "The Office," semicolon.
1038:04 - I get back all of these different rows,
and we didn't even notice this one.
1038:07 - There's actually another
little typo in there
1038:09 - with some capitalization of the
E, and the C, and the E. That
1038:12 - would be an example of a query
that gives me back therefore
1038:16 - for multiple rows.
1038:17 - So let's now change my Python program.
1038:19 - If I now, in my Python program, do
this, I get back a whole bunch of rows
1038:24 - containing all of those titles.
1038:26 - I can now do, for row in rows, I can
print out the current row's title,
1038:31 - and now manipulate all
of those things together.
1038:34 - Let me keep both on the screen.
1038:36 - Let me run Python of favorites.py.
1038:37 - And that for loop now should
iterate, what, 10 or more times,
1038:41 - once for each of those titles.
1038:43 - And indeed, if I type in
The Office again, Enter.
1038:47 - Whoops.
1038:50 - Row title.
1038:51 - What did I do wrong?
1038:52 - Oh, I should not be renaming
title to counter this time.
1038:55 - So that's just a dumb
mistake on my part.
1038:57 - Let me rerun it again.
1038:58 - And now I should see after
typing in The Office,
1039:01 - Enter, a whole bunch of The Offices.
1039:03 - And because I'm using
like, even the missed
1039:05 - capitalizations are coming through,
because like is case insensitive.
1039:08 - It doesn't matter if it's
uppercase or lowercase.
1039:11 - Whereas had I used the equal sign
I would get back only the same ones
1039:15 - capitalized correctly.
1039:17 - All right, any questions on this next?
1039:20 - All right, so let's transition
to a larger, juicier data
1039:25 - set, and consider some
of the issues that
1039:26 - arise when actually now using SQL and
skating toward a world in which we're
1039:31 - using SQL for mobile apps, web
apps, and generally speaking,
1039:34 - very large data sets.
1039:36 - So let's start with a larger
data set just like that.
1039:39 - Give me just a moment to switch screens
over to what we have for you today,
1039:45 - which is an actual relational
database that we've created out
1039:48 - of a real-world data set from IMDb.
1039:51 - So InternetMovieDatabase.com
is a website
1039:54 - where you can search for TV
shows, and movies, and actors,
1039:57 - and so forth, all using their
database behind the scenes.
1040:00 - IMDb wonderfully makes their data
set available as not CSV files,
1040:04 - but TSV files, tab-separated values.
1040:08 - And so what we did is, before class
we downloaded those TSV files.
1040:11 - We wrote a Python program
similar to my favorites8.py file
1040:15 - earlier that read in
all of those TSV files,
1040:19 - created some SQL tables
in an IMDb database
1040:24 - for you in SQLite that has multiple
tables and multiple columns.
1040:28 - So let's go and wrap our minds around
what's actually in this data set.
1040:32 - Let me go back to VS Code
here, and in just a moment,
1040:36 - I'm going to go ahead and copy the
file, which we've named shows.db.
1040:40 - And I'm going to go ahead and increase
my Terminal and do SQLite3 of shows.db.
1040:45 - Whenever playing around with a
SQLite database for the first time,
1040:48 - typing .schema is perhaps a good
place to start to give you a sense
1040:51 - of what's in there.
1040:52 - And things just escalated quickly.
1040:54 - There's a lot in this data
set, because, indeed, there's
1040:56 - going to be tens of hundreds of
thousands of rows in this data set,
1041:01 - and also problem set 7, where we'll
look at the movie side of things
1041:04 - and not just the TV shows.
1041:06 - So what is the schema that
we have created for you
1041:09 - from IMDb's actual real-world data?
1041:12 - One, there's a table called shows.
1041:14 - And notice we've just added whitespace
by hitting Enter a bunch of times
1041:17 - to make it a little more
stylistically readable.
1041:19 - The shows table has an ID
column, a title column, a year,
1041:23 - and the total number of
episodes for a given show.
1041:26 - And the types of those columns are
integer, text, numeric, and integer.
1041:31 - So it turns out there's
actually a few different data
1041:33 - types that are worth being aware of when
it comes to creating tables themselves.
1041:39 - In fact, in SQLite there's
five data types, and only five,
1041:43 - fortunately, one of which is, indeed,
integer, negative or positive,
1041:46 - numeric, which is kind of a
catchall for dates and times,
1041:50 - things that are numeric
but are not just integers,
1041:52 - and not just real numbers, for instance.
1041:54 - Real number is what we've generally
thought of as float up until now.
1041:58 - Text, of course, is
just text, but notice
1042:00 - that you don't have to
worry about how big it is.
1042:02 - Like in Python, it will size to fit.
1042:04 - And then there's BLOB, which
is binary large object, which
1042:07 - is for just raw 0s and 1s, like
for files or things like that.
1042:10 - But we'll generally use
the other four of these.
1042:12 - And so, indeed, when we
imported this data for you
1042:16 - we decided that every show would be
given an ID, which is just an integer.
1042:21 - Every show has, of course, a
title, which should not be null.
1042:24 - Otherwise, why is it in the database?
1042:26 - Every show has a year,
which is numeric according
1042:30 - to that definition a moment ago.
1042:31 - And the total number of episodes for
a show is going to be an integer.
1042:34 - What now is with these primary keys
that we mentioned earlier, too?
1042:38 - A primary key is the column that
uniquely identifies all of the data.
1042:43 - In our case, with the
favorites, I automatically
1042:46 - gave each of your submissions a unique
ID so that even if two or more of you
1042:50 - typed in The Office,
your submission still
1042:52 - had a unique identifier, a number
that allowed me to then correlate it
1042:57 - with your genres, just
as we saw a moment ago.
1043:01 - In this version of IMDb,
there's also genres.
1043:04 - But they don't come from
us, they come from IMDb.com.
1043:07 - And so a genre has a show ID, and
a genre just like our database.
1043:11 - But these are real-world genres
with a bit more filtration.
1043:15 - Notice, though, just like my
version, there's a foreign key.
1043:19 - A foreign key is the appearance
of another table's primary key
1043:25 - in its own table.
1043:27 - So when you have a table
like genres, which is somehow
1043:30 - cross referencing the original shows
table, if shows have a primary key
1043:36 - called ID, and those same numbers
appear in the genres table
1043:40 - under the column called show ID, by
definition, show ID is a foreign key.
1043:45 - It's the same numbers but
it's foreign in the sense
1043:47 - that the number is being
used in this table,
1043:50 - even though it's officially defined
primarily in this other table.
1043:54 - This is what we mean by
relational databases.
1043:57 - You have multiple tables with some
column in common, numbers typically.
1044:02 - And those numbers allow you to line
the two tables up in such a way
1044:06 - that you can reconnect the
shows with their genres,
1044:09 - just like we did with our
smaller data set a moment ago.
1044:12 - This logic is extended further.
1044:14 - Notice that the IMDb database we've
created for you has a stars table,
1044:18 - like TV show stars, the actors therein.
1044:22 - And that table, interestingly,
has no mention of people
1044:25 - and no mention of shows, per se.
1044:27 - It only has a column called
show ID, which is an integer,
1044:31 - and a person ID, which is an integer.
1044:33 - Meanwhile, if we scrolled
down to the bottom,
1044:39 - you will see a table called people.
1044:42 - And we have decided in IMDb's world
that every person in the TV show world
1044:48 - will have a unique identifier that's
a number, a name that's text, a birth
1044:52 - date, which is numeric, and
then, again, specifying that ID
1044:56 - is going to be their primary key.
1045:00 - So what's going on here?
1045:02 - Well, it turns out that TV stars and
writers are both types of people.
1045:07 - So using this relational database,
notice the road we're going down.
1045:13 - We're factoring out commonalities.
1045:15 - And if a person can be
different things in life,
1045:17 - well, we're defining them
first and foremost as people.
1045:20 - And then, notice these two
tables are almost the same.
1045:23 - The stars table has a show
ID, which is a number,
1045:26 - and a person ID, which
is a number, which
1045:28 - allows us via this middleman table, if
you will, to link people with TV shows.
1045:36 - Similarly, the writers table allows
us to connect shows with people, too,
1045:41 - by just recording those numbers.
1045:43 - So if we go into this data
set, let's do the following.
1045:46 - Let's do select star
from people semicolon.
1045:49 - So a huge amount of data is coming back.
1045:52 - This is hundreds of thousands of rows
now based on the ID numbers alone.
1045:56 - So this is real-world data
now flying across the screen.
1045:59 - There's a lot of people in the TV show
business, not just actors and writers,
1046:03 - but others as well.
1046:05 - It's still going.
1046:06 - There's a lot of data there.
1046:07 - So my god, if you had to do
anything manual in this data
1046:09 - set it's probably not going
to work out very well.
1046:12 - And actually, we're up to, what,
a million people in this data
1046:14 - set, plus, which would mean
this probably isn't even
1046:17 - going to open very well in Excel, or
Google Spreadsheets, or Apple Numbers.
1046:20 - SQL probably is the
better approach here.
1046:23 - Let's search for someone
specific, like select star
1046:25 - from people, where name equals
Steve Carell, for instance, sticking
1046:31 - with comedies.
1046:32 - All right, so there's Steve Carell.
1046:33 - He is person number
136,797, born in 1962.
1046:39 - And that's as much data as
we have on Steve Carell here.
1046:41 - How do we figure out what
shows, for instance, he's in?
1046:44 - Well, let's see, select
star from shows, semicolon.
1046:48 - There's a crazy number of shows
out there in the IMDb database.
1046:52 - And you can see it here again
flying across the screen.
1046:55 - Feels like we're going to have to
employ some techniques in order
1046:58 - to get at all of Steve Carell's shows.
1047:02 - So how are we going to do that?
1047:04 - Well, god, this is a lot of data here.
1047:07 - And in fact, yeah, we
have, what, 15 million
1047:10 - shows plus in this data set, too.
1047:12 - So doing things efficiently is
now going to start to matter.
1047:15 - So let's actually do this.
1047:17 - Let me select a specific show.
1047:18 - Select star from shows where title
equals, quote, unquote, "The Office."
1047:23 - And there presumably shouldn't
be typos in this data
1047:26 - because it comes from the
real website IMDb.com.
1047:28 - Let's get back to show.
1047:30 - Turns out there's been a lot of
The Offices out in the world.
1047:33 - The one that started in 2005
is the one that we want,
1047:37 - presumably the most
popular with 188 episodes.
1047:40 - How can we get just that?
1047:41 - Maybe we could do and year
equals, how about 2005?
1047:46 - All right, so now we've got
back just the ID of The Office
1047:50 - that we care about.
1047:51 - And let's do this, too.
1047:52 - Let me turn on a timer
within SQLite just
1047:55 - to get a sense of running time now.
1047:57 - Let me do that again.
1047:58 - Select star from shows, where
title equals The Office,
1048:01 - and year equals 2005.
1048:03 - And let's keep it simple.
1048:04 - Let's just do titles for now.
1048:05 - Enter.
1048:06 - All right, so not terribly long.
1048:08 - It found it pretty fast, but it looks
like it took how much real time?
1048:12 - 0.02 seconds, not bad for just a title.
1048:15 - But just to plant a seed, it
turns out that we can probably
1048:18 - speed even this up.
1048:19 - Let me do this.
1048:20 - Let me create something called an
index, which is another use of the C
1048:23 - in CRUD for creating something.
1048:25 - And I'm going to call this title index.
1048:28 - And I'm going to create
it on the shows table,
1048:32 - specifically on the title column.
1048:34 - And we'll see in a moment what
this is going to do for me.
1048:37 - Enter.
1048:38 - Took a moment, like 0.349 seconds,
to create something called an index.
1048:42 - But now watch, if I select star from
shows searching for The Office again,
1048:46 - previously it took me 0.021 seconds.
1048:49 - Not bad, but now, wow.
1048:53 - Literally no time at all, or so low
that it wasn't really measurable.
1048:56 - And I'll do it again just
to get a sense of things.
1048:58 - Still quite low.
1049:00 - Now even though 0.021 seconds, not crazy
long, imagine now having a lot of data,
1049:05 - a lot of users running a real
website or real mobile app.
1049:07 - Every millisecond we can start to
shave off is going to be compelling.
1049:11 - So what is it we just did?
1049:13 - Well, we actually just created
something called an index.
1049:17 - And this is a nice way
to tie in, now, some
1049:19 - of our week 5 discussion
of data structures,
1049:21 - and our week 3 discussion
of running times.
1049:23 - An index in a database is
some kind of fancy data
1049:26 - structure that allows the database
to do better than linear search.
1049:31 - Literally, as you just saw, these
tables are crazy long or tall right now,
1049:35 - very linear, that is.
1049:37 - And so when I first
searched for The Office,
1049:39 - it was literally doing linear search,
top to bottom, looking at as many as,
1049:43 - what, a million plus rows.
1049:44 - That's relatively slow.
1049:46 - It's not that slow, 0.021 seconds.
1049:48 - But that's relatively slow just
theoretically, algorithmically,
1049:52 - doing anything linearly.
1049:53 - But if you instead create
an index using syntax
1049:57 - like this, which I just did, creating an
index on the title column of the show's
1050:03 - table, that's like giving the
database a clue in advance saying,
1050:06 - hey, I know I'm going to search on
this column in this table a lot.
1050:10 - Do something with data
structures to speed things up.
1050:12 - And so if you think back to our
discussion of data structures,
1050:15 - maybe it's using a tree.
1050:17 - Maybe it's using a trie or a hash
table, some fancier two-dimensional data
1050:21 - structure is generally going to lift
the data up creating right maybe a tree
1050:25 - structure.
1050:26 - So it's just much faster
to find data, especially
1050:28 - if it's sorting it now
based on title, and not
1050:31 - just storing it in one long list.
1050:33 - And in fact, in the world
of relational databases,
1050:35 - the type of structure that's
often used in a database
1050:37 - is something called a B-tree.
1050:39 - It's not a binary tree.
1050:40 - Different use of the letter B, but it
looks a little something like the trees
1050:44 - we've seen.
1050:45 - It's not binary because
some of the nodes
1050:47 - might have more than
two children or fewer,
1050:50 - but it's a very wide but
relatively shallow tree.
1050:53 - It's not very tall.
1050:55 - And the upside of that is that if
your data is stored in this tree,
1050:59 - the database can find it more quickly.
1051:01 - And the reason it took half a second,
a third of a second to build the index
1051:06 - is because SQLite needed to take
some non-zero amount of time
1051:10 - to just build up this tree in memory.
1051:12 - And it has algorithms for doing so based
on alphabetization or other techniques.
1051:17 - But you spend a bit of time
up front, a third of a second.
1051:20 - And then thereafter, wow.
1051:22 - Every subsequent query, if I
keep doing it again and again,
1051:25 - is going to be crazy
low, 0.000, maybe 0.001.
1051:29 - But an order of magnitude, a
factor of 10 or 100 faster than it
1051:33 - previously was earlier.
1051:36 - So we have these indexes which
allow us to get at data faster.
1051:39 - But what if we want to
actually get data that's
1051:42 - now across these multiple tables?
1051:44 - How can we do that?
1051:45 - And how might these indices
or indexes help further?
1051:48 - Well, it turns out there is
a way that we've seen already
1051:52 - indirectly to join two tables together.
1051:54 - Previously, when I selected
the ID of The Office,
1051:58 - and then I searched for it in the other
table using select in a nested query,
1052:03 - I was joining two tables together.
1052:05 - And it turns out there's a
couple of ways to do this.
1052:08 - Let's go ahead now and, for instance,
find all of Steve Carell's TV shows.
1052:11 - Not just The Office
but all of them, too.
1052:14 - Unfortunately, if we look at our schema,
shows up here have no mention of TV--
1052:21 - oh, shows over here has no
mention of the TV stars in them.
1052:27 - And people have no mention of shows.
1052:30 - We somehow need to use this
table here to connect the two.
1052:34 - And this is called a join table, in the
sense that using two integer columns--
1052:40 - it joins the two tables
together logically.
1052:43 - And so if you're savvy enough with SQL,
you can do what I did with my hands
1052:47 - earlier and like recombine
tables by using these common IDs,
1052:51 - these integers together.
1052:52 - So let me do this.
1052:53 - Let me go ahead and figure out,
step-by-step, Steve Carell's shows.
1052:58 - So how am I going to do this?
1052:59 - Well, if I select star from people,
where name equals Steve Carell,
1053:04 - fortunately, there's only one of them.
1053:06 - So this gives me back his name,
his ID, and his birth year.
1053:12 - But it's really only his
ID that I care about.
1053:14 - Why?
1053:15 - Because in order to get back his shows,
I need to link person ID with show ID.
1053:20 - So I need to know his ID number.
1053:22 - So what could I do with this?
1053:24 - Well, remember the schema
and the stars table.
1053:29 - I've just gotten, from the
people table, Steve Carell's ID.
1053:33 - I bet by transitivity I could
now use his person ID, his ID,
1053:38 - to get back all of his show IDs.
1053:41 - And then once I've got all of his show
IDs, I can take it one step further
1053:44 - and get back all of his shows' titles.
1053:46 - So the answer is actually English
words and not just random, seemingly,
1053:50 - integers.
1053:51 - So let me go ahead and do this.
1053:52 - Let me, again, get Steve
Carell's ID number, but not star.
1053:57 - Star represents everything.
1053:58 - It's a wildcard character in SQL.
1054:00 - Let me just select the
ID of Steve Carell.
1054:03 - And that gives me back 136,797.
1054:06 - And it's only giving me back one value.
1054:08 - The thing called ID is just
the column heading up above.
1054:12 - Now, suppose I want to
select all of the show IDs
1054:16 - that Steve Carell is affiliated with.
1054:18 - Let me select Show ID from stars,
where the person ID in stars
1054:25 - happens to equal Steve Carell's ID.
1054:28 - So again, I'm building up my answer in
reverse and taking these baby steps.
1054:32 - On the right, in parentheses,
I'm getting Steve Carell's ID.
1054:36 - On the left, I am now
selecting all of the show IDs
1054:40 - that have some connection with
that person ID in the stars table.
1054:44 - This answer, too, is not
going to be that illuminating.
1054:47 - It's just a whole bunch of integers
that have no meaning to me as a human.
1054:50 - But let's take this one step further.
1054:53 - And even though my
code is getting long, I
1054:54 - could hit Enter and format
it nicely, especially
1054:57 - if I were doing this in a code file.
1054:59 - But I'm just doing it
interactively for now.
1055:00 - Let's now select all of the
titles from the shows table,
1055:04 - where the ID of the show is in
this following previous query.
1055:13 - So again, the query is getting long.
1055:15 - But notice, it's the
third and last step.
1055:17 - Select title from the shows
table, where the ID of the show
1055:21 - is in the list of all
of the show IDs that
1055:23 - came back from the stars table
searching for Steve Carell's person ID.
1055:27 - How did we get that person ID?
1055:28 - Let me scroll to the end.
1055:30 - Well, I selected, in my innermost
parentheses, Steve Carell's own ID.
1055:36 - So now, when I hit Enter, voila.
1055:38 - I get all of Steve Carell's
TV shows up until now.
1055:41 - And if I want to tidy this up further,
I can use the same tricks as before.
1055:44 - Order by title, semicolon.
1055:47 - Now I've got it all
alphabetized as before.
1055:50 - So again, with SQL comes
the ability to search--
1055:53 - I mean, look how quickly
we do this, 0.094 seconds
1055:56 - to search across three different
tables to get back this answer.
1055:59 - But my data is now all neatly
designed in individual tables,
1056:04 - which is going to be important
now that the data set is so large.
1056:07 - But let me take this one step further.
1056:09 - Let me go ahead and do this.
1056:12 - Let me go ahead and point
out that with this query,
1056:16 - notice that I'm searching on--
1056:20 - let's say I'm searching
on a person ID here.
1056:24 - And at the end here, I'm
searching on a name column here.
1056:27 - So let me actually go ahead and do this.
1056:30 - Let me go ahead and see
if we can't speed this up.
1056:34 - This query at the moment
takes 0.092 seconds.
1056:38 - Let's see if we can't speed this
up further by just quickly creating
1056:41 - a few more of those B-trees
in the databases memory.
1056:44 - Create an index called person index, and
I'm going to do this on the stars table
1056:49 - on the person ID column.
1056:51 - Enter.
1056:52 - It's taking a moment, taking a moment.
1056:53 - That's almost a full second
because that's a big table.
1056:56 - Let's create another index called
show index on the stars table.
1057:00 - Why?
1057:00 - Because I want to search
by the show ID also.
1057:03 - That was part of my big query.
1057:05 - Takes a moment.
1057:06 - OK, just more than
about 2/3 of a second.
1057:09 - Now let's create one last one,
another index called name index,
1057:11 - but I could call these things
anything I want, on the people table.
1057:14 - Why?
1057:14 - Because I'm also searching
on the name column.
1057:16 - So in short, I'm
creating indexes on each
1057:19 - of the columns that are somehow
involved in my search query,
1057:22 - going from one table to the other.
1057:25 - Now let's go back to the previous
query, which, recall, took--
1057:32 - I think I erased it, 0.091.
1057:35 - All right.
1057:36 - Well, it was roughly
this order of magnitude.
1057:37 - We're not seeing the data now.
1057:39 - But let me go ahead and run
my original big query once.
1057:42 - And boom, we're down to almost nothing.
1057:45 - So again, creating
these indexes in memory
1057:48 - has the effect of rapidly
speeding up our computation time.
1057:52 - Now if you've ever used, for instance,
the my.harvard course shopping tool
1057:56 - here on campus, or Yale's analogue, you
might wonder, why is the thing so slow?
1058:00 - This could be one of the reasons why
large data sets with thousands of rows,
1058:04 - thousands of courses
tend to be slow, if,
1058:07 - and I'm only conjecturing, if the
database isn't properly indexed.
1058:10 - If you're building your
own web application
1058:12 - and you're finding that users
are waiting and waiting,
1058:14 - and things are spinning and spinning,
what might be among the problems?
1058:17 - Well, it could absolutely just be bad
algorithms and bad code that you wrote.
1058:21 - Or it might be that you
haven't thought about, well,
1058:23 - what column should be optimized
for searches and filtration
1058:27 - like I've done here in order
to speed up subsequent queries?
1058:31 - Again, from the outside
in, we can only conjecture.
1058:33 - But ultimately, this is
just one of the things that
1058:36 - explains performance problems as well.
1058:39 - All right, let's point out just a
couple of final syntactic things,
1058:42 - and then we'll consider,
bigger picture, some problems
1058:45 - that might arise in this world.
1058:47 - If these nested, nested queries
start to get a little much,
1058:52 - there are other ways,
just so you've seen it,
1058:54 - that you can execute
similar logic in SQL.
1058:57 - For instance, if I
know in advance that I
1058:59 - want to connect Steve Carell to
his show IDs and to their titles,
1059:04 - we can do something more like this.
1059:06 - Select title from the people table,
joined with the stars table on people
1059:17 - ID equals stars.personID.
1059:20 - So what am I doing?
1059:21 - New syntax.
1059:21 - And again, this is not something you'll
have to memorize or ingrain right away.
1059:25 - But just so you've seen other
approaches, select title from people
1059:29 - join stars.
1059:30 - This is an explicit way to say, take
the people table in one hand, the stars
1059:35 - table in the other hand,
and somehow join them
1059:37 - as I keep doing with my fingertips here.
1059:39 - How to join them?
1059:40 - Join them so that the people, the ID
column in the people table lines up
1059:45 - with the person ID in the stars table.
1059:48 - But that's not quite everything.
1059:50 - I could also say, join
further on the shows table,
1059:54 - where the stars show ID
equals the shows ID column.
1060:00 - So what am I doing here?
1060:01 - That's saying, go further and join
the stars table with the show's table,
1060:11 - joining the show ID
column with the ID column.
1060:14 - Again, this starts to get a
little messy to think about.
1060:17 - But now I can just say, where name
equals, quote, unquote, "Steve Carell."
1060:21 - I can do in one query what previously
took me three nested queries
1060:24 - and get back the same answers.
1060:25 - And I can still add in my order
by title to get back the result.
1060:30 - And if I do this a little more
neatly, let me type this out a little
1060:35 - differently.
1060:36 - Let me type this out by adding a
new line-- ah, I can't do that here.
1060:41 - I'm going to leave it alone for now.
1060:43 - We can type it on multiple
lines in other contexts.
1060:46 - And let me do one last thing.
1060:49 - Do I want to show that?
1060:50 - I'm going to show it,
but this is not something
1060:52 - you should ingrain just yet either.
1060:53 - Select title from
people, stars, and shows.
1060:56 - If you know in advance that you want
to do something with all three tables,
1061:00 - you can just enumerate them,
one table name after the other.
1061:03 - And then you can say where
people.ID equals stars.personID.
1061:08 - And now I'm hitting
Enter so that it formats
1061:10 - a little more readably on my screen.
1061:12 - And stars.showID equals shows.ID,
and lastly, name equals Steve Carell.
1061:20 - In short, you specify that you
want to select data from all three
1061:25 - of these tables.
1061:26 - And then you tell the database how to
combine foreign keys with primary keys,
1061:31 - that is, the columns that
have those integers in common.
1061:35 - If I hit Enter now, I get
the same exact results, ever
1061:38 - more so if I also add
in an order by title.
1061:41 - Oops.
1061:43 - All right.
1061:43 - That's why I didn't
want to do this earlier.
1061:45 - I have to go back through my history
multiple times to actually get back
1061:48 - the multi-line query this time.
1061:49 - All right.
1061:50 - That was a lot all at once.
1061:52 - But this is only to say that, even
as we make the design of the data
1061:56 - more sophisticated, and we put
some of it over here, some of it
1061:59 - over here, some of it over here so as to
avoid duplication of data, weird hacks
1062:03 - like putting commas in the data, we
can still get back all of the answers
1062:07 - that we might want across
these several tables.
1062:09 - And using indexes, we can
significantly speed up these processes
1062:13 - so as to handle 10 times as
many, a 100 times as many users
1062:17 - on the same actual database.
1062:19 - There is going to be a downside.
1062:20 - And thinking back to our
discussion of algorithms and data
1062:22 - structures in past weeks, what might be
a downside of creating these indexes?
1062:27 - Because as of now, I created four
separate indexes on the name column,
1062:31 - the title column, and
some other columns, too.
1062:34 - Why wouldn't I just go
ahead and index everything
1062:37 - if it's clearly speeding things up?
1062:39 - Memory, so space.
1062:41 - Any time you're starting to benefit
time wise in computer science,
1062:44 - odds are you're sacrificing
space, or vice versa.
1062:47 - And probably indexing absolutely
everything is a little dumb
1062:50 - because you're going to waste way more
space than you might actually need.
1062:54 - So figuring out where the
right inflection point is
1062:56 - is part of the process of designing and
just getting better at these things.
1063:01 - Now unfortunately, a whole lot of
things can go wrong in this world,
1063:06 - and they continue to in the real
world with people using SQL databases.
1063:10 - And in fact, here on
out, if you're reading
1063:12 - something technical about SQL databases,
and websites being hacked in some form,
1063:16 - and passwords leaking out,
unfortunately, all too often
1063:20 - it is because of what are
called SQL injection attacks.
1063:22 - And just to give you a
sense now to counterbalance,
1063:24 - maybe [INAUDIBLE] enthusiasm
for like, oh, that
1063:26 - was neat how we can
do things so quickly.
1063:28 - With great power comes
responsibility in this world, too.
1063:32 - And so many people introduce
bugs into their code
1063:34 - by not quite appreciating how it is the
data is getting into your application.
1063:42 - So what do I mean by that?
1063:43 - Here, for instance, is a
typical login screen for Yale.
1063:46 - And here's the analogue for
Harvard where you're prompted,
1063:49 - every day probably, for your
username and your password,
1063:51 - your email address and
your password here.
1063:53 - Suppose, though, that
behind this login page,
1063:57 - whether Harvard's or Yale's,
there's some website.
1064:00 - And that website is using
SQL underneath the hood
1064:03 - to store all of the
Harvard or Yale people's
1064:06 - usernames, passwords, ID
numbers, courses, transcripts,
1064:09 - all of that stuff.
1064:10 - So there's a SQL database
underneath the website.
1064:12 - Well, what might go
wrong with this process?
1064:15 - Unfortunately, there's
some special syntax in SQL
1064:18 - just like there is in C and Python.
1064:19 - For instance, there are
comments in SQL, too.
1064:22 - If you do two hyphens, dash,
dash, that's a comment in SQL.
1064:26 - And if you, the programmer, aren't
sufficiently distrustful of your users,
1064:31 - such that you defend against
potentially adversarial attacks,
1064:34 - you might do something like this.
1064:36 - Suppose that I somewhat
maliciously or curiously log in
1064:41 - by typing my username,
Malan@harvard.edu, and then maybe
1064:44 - a single quote and a dash, dash.
1064:46 - Why?
1064:47 - Because I'm trying to suss out
if there is a vulnerability here
1064:50 - to a SQL injection attack.
1064:51 - Do not do this in general.
1064:53 - But if I were the owner of the website
trying to see if I've made any mistake,
1064:56 - I might try using potentially
dangerous characters in my input.
1065:00 - Dangerous how?
1065:01 - Because single quote is used for
quoting things in SQL, as we've seen--
1065:05 - single quotes or double quotes.
1065:07 - Dash, dash, I claim now,
is used for commenting.
1065:10 - But let's now imagine what
the code underneath the hood
1065:13 - might be for something like
Yale's login or Harvard's login.
1065:17 - What if it's code that looks like this?
1065:19 - So let me read it from left to right.
1065:21 - Suppose that they are using something
like CS50's own execute function,
1065:26 - and they've got some SQL
typed into the website that
1065:28 - says select star from users,
where username equals this,
1065:32 - and password equals that.
1065:34 - And they're plugging in
username and password.
1065:37 - So what am I doing here?
1065:38 - Well, when the user types their
username password, hits Enter,
1065:41 - I probably want to select
that user from my database
1065:44 - to see if the username
and passwords match.
1065:46 - So the underlying SQL
might be, select star
1065:49 - from users, where username
equals question mark,
1065:51 - and password equals question mark.
1065:52 - Users is the table.
1065:53 - One column is username.
1065:54 - One column is password.
1065:56 - All right.
1065:57 - And if we get back one row,
presumably Malan@harvard.edu
1066:02 - exists with that password.
1066:04 - We should let him proceed
from there on out.
1066:06 - So that's some pseudo code, if
you will, for this scenario.
1066:10 - What if, though, this code is not
as well written as it currently
1066:14 - is, and isn't using question marks?
1066:16 - So the question mark syntax
is a fairly common SQL thing,
1066:20 - where the question marks
are used as placeholders,
1066:22 - just like in printf, percent S was.
1066:24 - But this function, db.execute
from CS50's library
1066:28 - and third-party libraries
as well, is also
1066:30 - doing some good stuff
with these question marks,
1066:33 - and defending against
the following attack.
1066:35 - Suppose that you were not using
a third-party library like ours
1066:38 - and you were just manually constructing
your SQL queries like this.
1066:41 - You were to do something like this
instead using an f-string in Python.
1066:45 - You're comfortable with
format strings now.
1066:47 - You've gotten into the habit of using
curly braces and plugging in values.
1066:50 - Suppose that you, the
aspiring programmer,
1066:52 - is just using techniques
that you've been taught.
1066:55 - So you have an f-string
with select star from users,
1066:58 - where username equals, quote,
unquote, "username" in curly braces.
1067:01 - And password equals, quote,
unquote, "password" in curly braces.
1067:06 - As of what, two weeks
ago, this was perfectly
1067:09 - legitimate technique in Python
to plug in values into a string.
1067:14 - But notice if you are using
single quotes yourself
1067:18 - and the user has typed in single
quotes to their input, what
1067:24 - could go wrong here?
1067:25 - Where are we going with this if you're
just blindly plugging user input
1067:29 - into your own prepared string of text?
1067:33 - Yeah?
1067:34 - AUDIENCE: [INAUDIBLE]
1067:40 - DAVID J. MALAN: Yeah.
1067:40 - Worst case, they could insert what is
actually SQL code into your database
1067:46 - as follows.
1067:47 - Generally speaking, if you're using
special syntax like single quotes
1067:50 - to surround the user's
input, you'd better
1067:52 - hope that they don't have
an apostrophe in their name.
1067:54 - Or you better hope that they
don't type a single quote as well.
1067:57 - Because what if their single quote
finishes your single quote instead,
1068:01 - and then the rest of
this is somehow ignored?
1068:03 - Well, let's consider
how this might happen.
1068:04 - Let me go ahead in here.
1068:05 - This got a little
blurry here, but let me
1068:08 - plug in here-- wow, that looks awful.
1068:10 - Let me fix the red.
1068:13 - Just change this to white
so it's more readable.
1068:15 - What happens if the
user does this instead?
1068:22 - They type in, like I
did into the screenshot,
1068:24 - 'Malan@harvard.edu,'
single quote, dash, dash.
1068:28 - What has just happened
logically, even though we've
1068:30 - only just begun with SQL today?
1068:32 - Well, select star from users, where
username equals Malan@harvard.edu, end
1068:37 - quote.
1068:38 - What's bad about the rest of this?
1068:42 - Dash, dash, I claim,
means a comment, which
1068:45 - means my color coding is going
to be a little blurry again.
1068:47 - But everything after the
dash, dash is just ignored.
1068:50 - The logic, then, of
the SQL query, then, is
1068:52 - to just say, select
Malan@harvard.edu from the database,
1068:56 - not even checking the password anymore.
1068:58 - Therefore, you will get
back at least one row.
1069:01 - So length of rows will equal 1, and so
presumably the rest of the pseudo code
1069:06 - logs the user in, gives them
access to my my.harvard account,
1069:09 - or whatever it is.
1069:10 - And they've pretended to be me simply
by using a single quote and a dash,
1069:15 - dash in the username field.
1069:17 - Again, please don't go
start doing this later today
1069:19 - on Harvard, Yale, or other websites.
1069:21 - But it could be as simple as that.
1069:23 - Why?
1069:23 - Because the programmer
practiced what they
1069:25 - were taught, which was just to
use curly braces to plug in,
1069:29 - in f-strings, values.
1069:30 - But if you don't understand how the
user's input is going to be used,
1069:33 - and if you don't distrust your users
fundamentally, for every good person
1069:37 - out there there's going
to be, unfortunately,
1069:39 - some adversary who just wants to try
to find fault in your code or hack
1069:44 - into your data set.
1069:45 - This is what's known as
a SQL injection attack,
1069:48 - because the user can type something
that happens to be or look like SQL,
1069:52 - and trick your database into doing
something it didn't intend to,
1069:56 - like, for instance, logging the user in.
1070:00 - Worst case, they could
even do something else.
1070:02 - Maybe the user types a semicolon, then
the word drop, or the word update.
1070:06 - You could imagine doing semicolon
update table grades, where
1070:10 - name equals Malan, and set the
grade equal to A instead of B,
1070:14 - or something like that.
1070:16 - The ability to inject
SQL into the database
1070:18 - means you can do anything you want with
the data set, either constructively,
1070:22 - or worse, destructively.
1070:25 - And now, just a quick, little
cartoon that should now make sense.
1070:34 - OK, to, like, one of us, two of us.
1070:38 - Awkwardly somewhat funny.
1070:39 - All right, so let's move
on to one last condition.
1070:41 - There's one other problem
that can go awry here.
1070:44 - Oh, and I should explain this.
1070:45 - So this is an allusion to the son,
Robert, having typed in semicolon.
1070:50 - The word drop, table, students, and
doing some of the same technique.
1070:54 - This is humor that only
CS people would understand
1070:56 - because it's the mom realizing,
oh, her son's doing a SQL injection
1071:00 - attack onto the database.
1071:01 - Less funny when you explain it, but once
you notice the syntax, that's all this
1071:04 - is an allusion to.
1071:06 - All right.
1071:06 - So one final threat, now
that you are graduating
1071:10 - to the world of proper databases
and away from CSV files alone.
1071:14 - Things can go wrong
when using databases,
1071:17 - and honestly, even using CSV
files if you have multiple users.
1071:21 - And thus far, you and
I have had the luxury
1071:22 - in almost every program we've written
that it's just me using my code.
1071:25 - It's just you using your code.
1071:27 - And even if your teaching fellow
or TA is using it, probably
1071:30 - not at the same time.
1071:31 - But the world gets interesting if you
start putting your code on phones,
1071:36 - on websites, such that now you might
have two users literally trying
1071:40 - to log in at the same time,
literally clicking a button
1071:42 - at the same, or nearly the same time.
1071:44 - What happens, then, if
a computer is trying
1071:47 - to handle requests from two
different people at once,
1071:50 - as might happen all
the time on a website?
1071:52 - You might get what are
called race conditions.
1071:54 - And this is a problem in computing in
general, not just with SQL, not just
1071:58 - with Python, really just any
time you have shared data,
1072:02 - like a database, as follows.
1072:04 - This apparently is one of the
most liked Instagram posts ever.
1072:08 - It is literally just
a picture of an egg.
1072:11 - Has anyone clicked on this egg?
1072:12 - Like, a couple?
1072:13 - Oh, OK.
1072:14 - Wow.
1072:14 - All right, so yes.
1072:15 - So go search for this photo if you'd
like to add to the likes on Instagram.
1072:19 - The account is world_record_egg.
1072:21 - This is just a screenshot of
Instagram of that picture of an egg.
1072:24 - If you're in the habit
of using Instagram,
1072:25 - or like any social media site, there's
some equivalent of a like button
1072:28 - or a heart button these days.
1072:30 - And that's actually a
really hard problem.
1072:32 - Such a simple idea to count
the number of likes something
1072:35 - has, but that means
someone has to click on it.
1072:38 - Your code has to detect the click.
1072:40 - Your code has to update the database,
and then do it again and again,
1072:43 - even if multiple people are perhaps
right now clicking on that same egg.
1072:48 - And unfortunately, bad things can
happen if two people try to do something
1072:53 - at the same time on a computer.
1072:55 - How might this happen?
1072:57 - So here's some more code, half
pseudocode, half Python code here,
1073:01 - as follows.
1073:01 - Suppose that what happens when you,
literally, right now, maybe click
1073:05 - on the like button on
the Instagram post.
1073:08 - Suppose that code, like the following,
is executed on Facebook servers.
1073:13 - db.execute of select likes from
posts where ID equals question mark.
1073:19 - All right.
1073:20 - So what am I assuming here?
1073:22 - I'm assuming that that
photograph has a unique ID.
1073:24 - It's some big integer, whatever
it was, randomly assigned.
1073:28 - I'm assuming that when
you click on the heart
1073:30 - the unique ID is somehow
sent to Instagram servers
1073:33 - so that their code can call it ID.
1073:36 - And I'm assuming that Instagram
is using its SQL database
1073:39 - and selecting, from a posts
table, the current number of likes
1073:43 - of that egg for that given ID number.
1073:46 - Why?
1073:47 - Because I need to know how many likes it
already has if I want to add one to it
1073:50 - and then update the database.
1073:51 - I need to select the data, then
I need to update the data here.
1073:55 - All right.
1073:55 - So in some Python code here,
let's store, in a variable called
1073:59 - likes, whatever comes back in the
first row from the likes column.
1074:03 - Again, this is new syntax
specific to our library,
1074:06 - but a common way of getting back
first row and the column called
1074:09 - likes therein.
1074:10 - So at this point in the
story, likes is storing
1074:12 - the total number of likes, in
the millions or whatever it is,
1074:14 - of that particular egg.
1074:15 - Then I do this.
1074:17 - Execute update posts,
set the number of likes
1074:21 - equal to this value, where the
ID of the post equals this value.
1074:25 - What do I want to update the likes to?
1074:27 - Whatever likes currently is plus
1, and then plugging in the ID.
1074:31 - So a simple idea, right?
1074:33 - I'm checking the value of
the likes, and maybe it's 10.
1074:37 - I'm changing 10 to 11 and
then updating the table.
1074:40 - But a problem can arise
if two people have
1074:43 - clicked on that egg at roughly the
same time, or literally, the same time.
1074:48 - Why is that?
1074:49 - Well, in the world of
databases and servers,
1074:52 - and the Instagrams of the world have
thousands of physical servers nowadays.
1074:56 - So they can support millions,
billions even, of users nowadays.
1075:00 - What can go wrong?
1075:02 - Well, typically code like this
is not what we'll call atomic.
1075:05 - To be atomic means that it all
executes together or not at all.
1075:09 - Rather, code typically is executed,
as you might imagine, line by line.
1075:14 - And if your code is running on a server
that multiple people have access to,
1075:18 - which is absolutely the case
for an app like Instagram,
1075:20 - if you and I click on the
heart at roughly the same time,
1075:23 - for efficiency, the computer,
the server, owned by Instagram,
1075:27 - might execute this line of code for me.
1075:29 - Then it might execute
this line of code for you.
1075:31 - Then this line of code for me,
then this line of code for you,
1075:34 - then this line of code for me,
then this line of code for you.
1075:37 - That is to say, our queries might
get intermingled chronologically.
1075:41 - Because it'd be a little obnoxious
if, when you're using Instagram,
1075:44 - I'm blocked out while you're
interacting with the site.
1075:47 - It'd be a lot nicer for efficiency
and fairness if somehow they
1075:50 - do a little bit of work for me,
a little bit of work for you,
1075:52 - and back and forth, and back and
forth, equitably on the server.
1075:55 - So that's what typically happens
by default. These lines of code
1075:58 - get executed independently.
1076:00 - And they can happen in alternating
order with other users.
1076:05 - You can get them combined like this.
1076:07 - Same order top to bottom, but other
things might happen in between.
1076:11 - So suppose that the number of
likes at the very beginning was 10.
1076:15 - And suppose that Carter and I both click
on that egg at roughly the same time.
1076:19 - And suppose this line of
code gets executed for me,
1076:21 - and that gives me a value
in likes, ultimately, of 10.
1076:25 - Suppose, then, that the computer takes
a break from dealing with my request,
1076:28 - does the same code for
Carter, and gets back
1076:31 - what value for the
current number of likes?
1076:33 - Also 10 for Carter.
1076:34 - Because mine has not been recorded yet.
1076:36 - At this point in the story,
somewhere in the computer's memory
1076:39 - there's a likes variable
for me, storing 10.
1076:41 - There's a likes variable
storing 10 for Carter.
1076:44 - Then this line of code executes for me.
1076:46 - It updates the database to be likes
plus 1, which stores 11 in the database.
1076:50 - Then Carter's code is executed,
updating the same row in the database
1076:55 - to 11, unfortunately.
1076:59 - Because his value of likes happened
to be the same value of mine.
1077:03 - And so the metaphor here, that if we
had a refrigerator on stage we would
1077:06 - actually act out, is something that was
taught to me years ago in an operating
1077:10 - systems class, whereby the most similar
analogue in the real world would be
1077:15 - if you've got a mini
fridge in your dorm room.
1077:17 - And one of you and your roommates comes
home, opens the fridge, and realizes,
1077:23 - oh, we're out of milk, was
how the story went in my day.
1077:26 - So you close the refrigerator, and
you walk across the street, go to CVS,
1077:30 - and get in line to buy some milk.
1077:31 - Meanwhile, your roommate comes home.
1077:33 - They, too, inspect the state of your
refrigerator, a.k.a., a variable,
1077:38 - open the door, and realizes,
oh, we're out of milk.
1077:40 - I'll go get more milk.
1077:41 - Close the fridge, go
across the street, and head
1077:43 - to maybe a different store,
or the line is long enough
1077:45 - that you don't see each
other at the store.
1077:47 - So long story short, you both eventually
get home, open the door, and damn it,
1077:51 - now there's milk from
your other roommate
1077:52 - there because you both
made a decision on this
1077:56 - based on the state of a variable
that you independently examined.
1078:01 - And you didn't somehow communicate.
1078:03 - Now in the real world, this
is absolutely solvable.
1078:05 - How would you fix this or avoid
this problem in the real world?
1078:09 - Literally, own roommate, own fridge.
1078:11 - AUDIENCE: Text your
roommate [INAUDIBLE]..
1078:13 - DAVID J. MALAN: Perfect.
1078:14 - Let them know, so somehow communicate.
1078:15 - And in fact, the terminology
here would be multiple threads
1078:18 - can somehow intercommunicate
by having shared state,
1078:20 - like the iMessage thread on your phone.
1078:22 - You could leave a note.
1078:23 - You could, more dramatically,
lock the refrigerator somehow,
1078:26 - thereby making the milk
purchasing process atomic.
1078:30 - The fundamental problem is
that for efficiency, again,
1078:33 - computers tend to
intermingle logic that needs
1078:37 - to happen when it's happening across
multiple users just for fairness' sake,
1078:41 - for scheduling sake.
1078:42 - You need to make sure that all
three of these lines of code
1078:45 - execute for me, and then
for Carter, and then for you
1078:48 - if you want to ensure that
this count is correct.
1078:51 - And for years, when social media
was first getting off the ground,
1078:54 - this was a super hard problem.
1078:56 - Twitter used to go down all
of the time, and tweets,
1078:59 - and retweets were a thing
that were similarly happening
1079:01 - with a very high frequency.
1079:02 - These are hard problems to solve.
1079:04 - And thankfully, there are solutions.
1079:06 - And we won't get into the weeds
of how you might use these things,
1079:08 - but know that there are
solutions in the form of things
1079:11 - called locks, which I use that
word deliberately with the fridge.
1079:14 - Software locks can allow you to
protect a variable so no one else can
1079:18 - look at it until you're done with it.
1079:20 - There are things called
transactions, which
1079:23 - allow you to do the equivalent of
sending a message to, or really locking
1079:26 - out your roommate from accessing
that same variable, too,
1079:29 - but for slightly less amount of time.
1079:32 - There are solutions to these problems.
1079:34 - So for instance, in Python,
the same code now in green
1079:37 - might look a little something like this.
1079:39 - When you know that something
has to happen all at once,
1079:42 - altogether, you first begin a
transaction, and you do your thing,
1079:46 - and then you commit the
transaction at the very end.
1079:49 - Here, too, though, there's
going to be a downside.
1079:51 - Typically, the more you use
transactions in this way,
1079:55 - potentially the higher
the probability is
1079:56 - that you're going to box someone out or
make Carter's request a little slower.
1080:00 - Why?
1080:01 - Because we can't interact
at the same time.
1080:02 - Or you might make his request
fail if he tries to update
1080:05 - something that's already been updated.
1080:07 - So you generally want to
have as few lines of code
1080:10 - together in between these transactions
so that you get in and you get out.
1080:13 - And you go to CVS and you get
back really fast so as to not
1080:16 - cause these kind of performance things.
1080:17 - So things indeed
escalated quickly today.
1080:20 - The original goal was just to solve
problems using a different language
1080:23 - more effectively than Python.
1080:24 - But as soon as you have these
more powerful techniques,
1080:27 - a whole new set of problems arises.
1080:28 - Takes practice to get comfortable with.
1080:30 - But ultimately, this is all leading
us toward the introduction next week
1080:34 - of web programming with HTML,
CSS, and some JavaScript.
1080:37 - The week after, bringing Python
and SQL back into the mix.
1080:40 - So that by term's end,
we've really now used
1080:42 - all of these different languages
for what they're best at.
1080:45 - And over the next few weeks, the goal
is to make sure you're understanding
1080:48 - and comfortable with what each of
these things is good and bad for.
1080:51 - Let's go ahead and wrap here.
1080:52 - I'll stick around for questions.
1080:53 - We'll see you next time.
1080:56 - [MUSIC PLAYING]
1082:13 - SPEAKER 1: All right.
1082:15 - This is CS50, and this
is already week 8.
1082:19 - And if we think back to
the past several weeks now,
1082:21 - recall that things started pretty
interestingly, pretty interactively,
1082:24 - in like week 0, when
we were using Scratch,
1082:27 - because with Scratch we had a
GUI, a graphical user interface.
1082:29 - So even as we explored variables and
loops and conditionals and all of that,
1082:33 - you had kind of a fun environment
in which to express those ideas.
1082:36 - And then in week 1,
we sort of took a lot
1082:37 - of that away, when we introduced C, and
a terminal window, and a command line,
1082:41 - because now, all of your programs became
very textual, very keyboard-based,
1082:46 - and gone was the mouse, the
animations, the menus, and so forth.
1082:49 - And so now, fast
forward to week 8, we're
1082:51 - going to bring those kinds of
user interface, UI, elements back,
1082:54 - in the form of web programming.
1082:56 - And this goes beyond
just laying out websites.
1082:58 - This will, to this week and next week,
combine elements of the back-end server
1083:03 - stuff that we've been doing
for the past several weeks,
1083:05 - using Python, using
SQL, and now introducing
1083:07 - a couple of other languages,
on the so-called client side,
1083:10 - on your own Mac, your own PC,
your own phone, that's going
1083:13 - to talk to those back-end services.
1083:15 - So indeed, at this end of
CS50, does everything rather
1083:18 - come together into a user interface
that's just super familiar.
1083:22 - All of us are on our phones,
desktops, laptops, every day.
1083:24 - And increasingly, even the mobile
apps that you all are using
1083:28 - are implemented, not necessarily
in languages like Swift or Java,
1083:32 - if you're familiar with
those, but with languages
1083:34 - called HTML, CSS, and JavaScript,
which we'll focus on here today.
1083:38 - But before we do that, let's provide a
foundation on which these apps can run,
1083:43 - because indeed, we'll start to look
underneath the hood of how the internet
1083:46 - itself works, albeit quickly, so that
we have kind of a mental model for where
1083:51 - all of this code is running, how you
can troubleshoot issues, and how,
1083:54 - really, ultimately, after
CS50, you can learn, by just
1083:56 - poking around other actual websites.
1083:59 - So the internet, we're all on it.
1084:00 - Literally, right now, what
is it, in your own words?
1084:05 - What is the internet?
1084:07 - It's this utility nowadays, that
we all rather take for granted.
1084:10 - How would you describe it?
1084:11 - AUDIENCE: Big storage.
1084:12 - SPEAKER 1: OK, big
storage, and indeed, that's
1084:14 - how the cloud is described, which is
kind of an abstraction if you will,
1084:18 - for a whole lot of wires
and cables and hardware.
1084:21 - And the internet, other
formulations of the term, how else?
1084:24 - AUDIENCE: Bunch of
data that we can reach.
1084:26 - SPEAKER 1: OK, a bunch
of data that we can all
1084:28 - reach, by way of being interconnected
somehow with wires or wirelessly.
1084:32 - And so really, the internet,
too, is a hardware thing.
1084:35 - There's a whole lot of servers out
there, that are somehow interconnected,
1084:38 - via physical cables, via
internet service providers,
1084:41 - via wireless connectivity, and the like.
1084:43 - And once you start to have
networks of networks of networks,
1084:46 - do you get the internet.
1084:47 - Indeed, Harvard has its own network
and Yale has its own network,
1084:50 - and your own home probably
has its own network.
1084:52 - But once you start
connecting those networks,
1084:54 - do you get the interconnected network
that is the internet as we now know it?
1084:58 - So there's this whole
alphabet soup that goes
1085:01 - with the internet, some of
whose acronyms and terms
1085:03 - you've probably seen before.
1085:04 - But let's at least peel
back some of those layers
1085:06 - and consider what some of
the building blocks are.
1085:08 - So here's a picture of the internet
before it was known as the internet,
1085:11 - back in 1969, when it
was something called
1085:14 - ARPANET, from the Advanced
Research Projects Agency.
1085:17 - And the intent, originally, was just
to Interconnect a few universities here
1085:20 - in Utah and California, literally
servers, or computers, in each
1085:25 - of those areas, somehow
interconnected with wires,
1085:27 - so that people could
start to share data.
1085:29 - A year later, it expanded to
include MIT and Harvard and others.
1085:33 - And now fast forward to
today, you have a huge number
1085:36 - of systems around the world
that are on this same network.
1085:39 - And, in fact, if I
just pull up a web page
1085:41 - here, that's sort of
constantly changing,
1085:44 - a visualization of the internet as
it might now be today, this here,
1085:48 - in the abstract, all of these
lines and interconnections
1085:52 - represent just how interconnected
the world is today.
1085:56 - And it just means that there's all the
more servers, all the more cabling,
1085:59 - all of the more hardware giving
us this underlying infrastructure.
1086:02 - But if we focus, really, on just
these nodes, these individual dots,
1086:07 - whether back in 1970, or now in 2021,
each of these dots you can think of as,
1086:11 - yes, a server, but a certain type
of server, namely known as a router.
1086:15 - And a router, as the
name implies, just routes
1086:17 - data left to right, top to
bottom, from one point to another.
1086:21 - And so there's all these servers here
on campus at Harvard, on Yale's campus,
1086:25 - in Comcast's network, Verizon's
network, your own home network,
1086:28 - you have your own routers out
there, whose purpose in life
1086:31 - is to take in data and then
decide, should I send it this way,
1086:34 - or this way, or this way, so
to speak, assuming there are
1086:36 - multiple options with multiple cables.
1086:38 - You, in your home, probably have just
one cable coming in or going out.
1086:41 - But certainly, if you're a place like
Harvard or Yale or Comcast or the like,
1086:46 - there's probably a whole
bunch of interconnections
1086:49 - that the data can then
travel across ultimately.
1086:51 - So how do we get data
among these routers?
1086:54 - For instance, if you want
to send an email to someone
1086:57 - at Stanford, in California,
from here, on the East Coast,
1087:00 - or if you want to visit
www.stanford.edu, how does your laptop,
1087:04 - your phone, your desktop, actually
get data from point A to point B?
1087:08 - Well, essentially, your
laptop or phone knows
1087:12 - when it boots up at the beginning of
the day, what the local router is, what
1087:16 - the address of that local router is.
1087:17 - So if you want to send an
email from my laptop over here,
1087:20 - my laptop is essentially going to
hand it to the nearest Harvard router.
1087:23 - And then, from there, I
don't know, I don't care
1087:25 - how it gets the rest of the distance.
1087:27 - But hopefully, within some
small number of steps later,
1087:29 - Harvard's router is going to
send it to maybe Boston's router
1087:32 - is going to send it to
California's router is going
1087:34 - to send it to Stanford's router, until
finally it reaches Stanford's email
1087:37 - server.
1087:38 - And we can depict this, actually,
how about a bit playfully.
1087:41 - Thankfully, the course's
staff kindly volunteered
1087:44 - to create a visualization for
this, using a familiar technology.
1087:48 - So here we have some of our TFs
and TAs and CAs present and past.
1087:52 - Let me go ahead and full
screen this window here.
1087:55 - Give me just a moment to
pull it up on my screen here.
1087:58 - And we'll consider what happens if we
want to send a packet of information
1088:03 - from one person or router,
namely Phyllis in this case,
1088:07 - in the bottom right hand corner,
up to Brian, in this case,
1088:10 - in the top left hand corner.
1088:11 - So each of the staff members
here represents exactly one
1088:14 - of these routers on the internet.
1088:17 - [MUSIC PLAYING]
1088:44 - [APPLAUSE]
1088:46 - The applause is appreciated.
1088:47 - It actually took us a
significant number of attempts
1088:49 - to get that ultimately right.
1088:51 - So when, what was it the
staff were all passing here?
1088:54 - Here we have just, physically, what
it was the staff were passing around.
1088:57 - So Phyllis started with an
envelope, inside of which
1088:59 - was that email, presumably,
on the East Coast,
1089:01 - and she wanted to send it to Brian on
the West Coast, top left hand corner.
1089:05 - And so she had all of these different
options, different connections,
1089:08 - between her and point B, namely Brian.
1089:11 - She could go up, down, in her case, and
then each of those subsequent routers
1089:14 - could go up, down, left, or right,
until it finally reaches Brian.
1089:17 - And long story short,
there's algorithms that
1089:19 - figure out how you decide
to send a packet up, down,
1089:22 - left, or right, so to speak.
1089:24 - But they do so by taking an input, and
in the form of input is this envelope.
1089:29 - And there's at least a couple of
things on the outside of this,
1089:32 - because all of these routers and,
in turn, all of our Macs and PCs
1089:35 - and phones these days,
speak something called
1089:38 - TCP/IP, a set of
acronyms you've probably
1089:41 - seen somewhere on your
phone, your Mac or PC,
1089:44 - in print somewhere, which refers
to two protocols, two conventions,
1089:48 - that computers use to
inter-communicate these days.
1089:51 - Now what's a protocol?
1089:52 - A protocol is like a set
of rules, that you behave.
1089:54 - In healthier times, I might
extend my hand and someone
1089:57 - like Carter might extend his hand,
thereby interacting with me, based
1090:00 - on a human protocol of like
literally physically shaking hands.
1090:03 - Nowadays, we have mask protocols,
whereby what you need to do
1090:07 - is wear a mask indoors.
1090:08 - But that, too, is just a set of rules
that we all follow and adhere to,
1090:11 - that's somewhere
standardized and documented.
1090:13 - So computers use protocols
all the time to govern
1090:16 - how they are sending information
and receiving information.
1090:19 - And TCP and IP are two such protocols
that standardize this as follows.
1090:24 - What TCP/IP tells someone
like Phyllis to do,
1090:27 - if she wants to send an email to Brian,
is put the email in a virtual envelope,
1090:31 - so to speak.
1090:31 - But on the outside of that virtual
envelope, put Brian's unique address.
1090:37 - And I'll describe this as destination
on the middle of the envelope,
1090:41 - just like in our human world,
you would write the destination
1090:44 - address on the envelope.
1090:45 - And then she's going to put her own
source address in the top left hand
1090:49 - corner, just like you, the
sender, would put your own source
1090:51 - address in the human world.
1090:53 - But, instead of these addresses
being like something Kirkland Street,
1090:56 - Cambridge, Massachusetts 02138, USA,
you probably know that computers
1091:01 - on the internet have unique addresses
of their own, known as IP addresses.
1091:05 - And an IP address is
just a numeric identifier
1091:08 - on the internet, that allows
computers, like Phyllis and Brian,
1091:11 - to address these envelopes
to and from each other.
1091:14 - And you've probably seen
the format at some point.
1091:16 - Typically, the format of IP
addresses is something dot something
1091:20 - dot something dot something.
1091:22 - Each of those somethings,
represented here with a hash symbol,
1091:24 - is a number from 0 through 255.
1091:29 - And, based on that little
hint, if each of these hashes
1091:32 - represents a number from 0
to 255, each of those hashes
1091:36 - is represented with
how many bytes or bits?
1091:39 - Eight bits or one byte, which is to
say, we can extrapolate from there,
1091:43 - an IP address must use
32 bits or 4 bytes,
1091:47 - if we rewind now to some of the
primitives we looked at in week 0.
1091:50 - And what that means is,
at least at a glance,
1091:52 - it looks like we have 4 billion some
odd IP addresses available to us.
1091:57 - Now, unfortunately,
there's a huge number
1091:58 - of humans in the world these days,
all of whom have, many of whom
1092:01 - have multiple devices, certainly
in places like this, where you have
1092:05 - a laptop, and a phone, and you have
other internet of things-type devices,
1092:08 - all of which need to be addressed.
1092:10 - So there's another type
of IP address that's
1092:12 - starting to be used more commonly.
1092:14 - This is version 4 of IP.
1092:16 - There's also version 6
which, instead of 32 bits,
1092:19 - uses 128 bits, which gives us a
crazy number of possible addresses
1092:23 - for computers, so we can at least handle
all of the additional devices we now
1092:27 - have today.
1092:28 - So this is to say, what ultimately
is going on this envelope
1092:31 - is the destination address, that is
Brian's IP address, and the source
1092:35 - address, that is Phyllis's IP address,
so that this packet can go from point A
1092:40 - to point B, and if need
be, back, by just flipping
1092:43 - the source and the destination.
1092:44 - But on the internet, you presumably know
that there's not just email servers.
1092:49 - There's web servers, there's chat
servers, video servers, game servers.
1092:53 - Like there's all of these different
functions on the internet nowadays.
1092:56 - And so, when Brian
receives that envelope,
1092:58 - how does he know it's an email, versus
a web page, versus a Skype call,
1093:05 - versus something else altogether.
1093:07 - Well, it turns out that we
can look at the other part
1093:10 - of this acronym, the TCP in TCP/IP.
1093:14 - And what TCP allows us
to do, for instance,
1093:17 - is specify a couple of things.
1093:18 - One, the type of service whose
data is in this envelope, that is,
1093:23 - it does this with a numeric identifier.
1093:26 - And I'm going to go ahead and write down
a colon, and the word port, P-O-R-T.
1093:31 - And I'm going to write that in the
source address, too, colon and port.
1093:35 - So technically, now,
what's on this envelope
1093:37 - is not just the addresses,
but also a unique number
1093:40 - that represents what kind of service
is being sent from point A to point B,
1093:45 - whether it's email, or web traffic,
or Skype, or something else.
1093:48 - These numbers are standardized, and here
are just two of the most common ones,
1093:53 - not even in the context of email,
but in the context of the web.
1093:56 - Port 80 is typically used
whenever an envelope contains
1093:59 - a web page, or a request
therefor, or the number 443,
1094:03 - when that request is actually
encrypted, using that thing you probably
1094:07 - know, in URLs, known as HTTPS,
where the S literally means secure.
1094:11 - More on what the HTTP means later.
1094:13 - If it's email, the number
might be 25 or 465, or 587.
1094:16 - These are the kinds of things you
Google if you ultimately care about.
1094:19 - But if you've ever had to configure,
like, Outlook or even Gmail
1094:24 - to talk to another account,
you might very well
1094:26 - have seen these numbers, by typing
in something like SMTP.Gmail.com
1094:30 - and then a number, which is only to
say these numbers are omnipresent.
1094:33 - But they're typically
not things you and I
1094:35 - have to care about, because
servers and computers nowadays
1094:38 - automate much of this process.
1094:40 - But that's all it takes, ultimately, for
Phyllis to get this message to Brian.
1094:45 - But what if it's a really big message?
1094:47 - If it's a short email, It might
fit perfectly in one single packet,
1094:50 - so to speak.
1094:50 - But suppose that Phyllis wants
to send Brian a picture of a cat,
1094:54 - like this, or worse, a video of a cat.
1094:56 - It would be kind of inequitable
if no one else could do anything
1095:00 - on the internet, just
because Phyllis wants
1095:03 - to send Brian a really big picture,
a really big video of a cat.
1095:06 - It would be nice if we could kind
of time-share the interconnections,
1095:10 - across these routers, so that
we can give a little bit of time
1095:13 - to Phyllis, a little bit
of time to someone else,
1095:15 - a little bit of time to someone else,
so that eventually, Phyllis' entire cat
1095:18 - gets through the internet.
1095:19 - But in terms of fairness, she
doesn't monopolize the bandwidth
1095:25 - of the network in question.
1095:27 - And this, then, allows us to
do one other feature of TCP/IP,
1095:31 - which is fragmentation,
where we can temporarily,
1095:35 - and Phyllis's computer would
do this automatically, fragment
1095:37 - the big packet in question,
or the big file in question,
1095:41 - and then use, not just a single
envelope, but maybe a second, a third,
1095:46 - and a fourth, or more.
1095:48 - If we do that, though,
we're probably going
1095:50 - to need one other piece of information,
just logically, on these envelopes.
1095:54 - Like, if you were implementing this,
chopping up this picture of a cat
1095:57 - into four parts, like,
intuitively, what might you
1096:00 - want to put virtually on the
outside of this envelope now?
1096:03 - Yeah.
1096:04 - AUDIENCE: The order.
1096:05 - SPEAKER 1: The order of them, somehow.
1096:06 - So probably something like part
one of four, part two of four,
1096:10 - part three of four, and so forth.
1096:12 - So I'm going to write one more thing
in like the memo line of the envelope
1096:14 - here.
1096:15 - I put some kind of
sequence number, that's
1096:17 - just a little bit of a
clue to Brian, to know
1096:20 - in what order to
reassemble these things.
1096:22 - And even more powerfully
than that, this actually
1096:25 - gives us this simple primitive of
just using INTs on these envelopes,
1096:29 - in these packets.
1096:30 - If Brian receives envelopes like these,
with numbers like these in the memo
1096:35 - field, what other feature
does TCP apparently
1096:39 - enable Brian and Phyllis to implement?
1096:42 - This is a bit subtle.
1096:44 - But it's not just the
ordering of the packets.
1096:46 - What else might be useful about
putting numbers on these things,
1096:50 - might you think?
1096:52 - What might be useful here?
1096:54 - Yeah, in back.
1096:55 - AUDIENCE: How about if you like missed.
1096:56 - SPEAKER 1: If you missed something
that was intended to be sent,
1096:58 - if I heard that correct.
1096:59 - So short answer, exactly, yes, TCP,
because of this simple little integer
1097:04 - that we're including, can quote
unquote "guarantee" delivery.
1097:06 - Why?
1097:07 - Because if Brian receives one
out of four, two out of four,
1097:10 - four out of four, but
not three out of four,
1097:12 - he now knows, predictably, that
he needs to ask Phyllis, somehow,
1097:16 - to resend that packet.
1097:17 - And so this is why pretty much
always, if you receive an email,
1097:21 - you either receive the whole
thing, or nothing at all.
1097:24 - Like sentences and words and
paragraphs should never really
1097:27 - be missing from an email.
1097:29 - Or if you download a
photograph on the web,
1097:31 - it shouldn't just have a
blank hole in the middle,
1097:33 - just because that packet of
information happened to be lost.
1097:36 - TCP, if it is the protocol being used to
transmit data from point A to point B,
1097:40 - ensures that it either all gets there,
or ultimately, none of it at all.
1097:44 - So this is an important property,
but, just as a teaser there's
1097:48 - other protocols out there.
1097:49 - There's something called UDP,
which is an alternative to TCP,
1097:52 - that doesn't guarantee delivery.
1097:54 - And just as a taste of why you might
ever not want to guarantee delivery,
1097:58 - maybe you're watching like a streaming
video, like a sports event online.
1098:03 - You probably don't
necessarily want the thing
1098:05 - to buffer and buffer and buffer, just
because you have a slow connection,
1098:08 - because you're going to
start to miss things.
1098:10 - And then you're going to be the
only one in the world watching
1098:12 - the game that ended 20 minutes ago, when
everyone else is sort of up to speed.
1098:15 - Similarly for a voice call,
it would be really annoying
1098:18 - if our voice is constantly buffered.
1098:19 - So UDP might be a good
protocol for making sure
1098:22 - that, even if the person on the other
end sounds a little crappy, at least
1098:25 - you can hear them.
1098:26 - It's not pausing and
resending and resending,
1098:29 - because that would really slow down
that sort of human interaction.
1098:33 - So, in short, IP handles the
addressing of these packets,
1098:36 - and standardizes numbers that every
computer, your own included, gets,
1098:40 - and TCP handles the standardization
of like what services
1098:44 - can be used, between points A and
point B. All right, this is great,
1098:50 - but presumably, when Phyllis
sends a message to Brian,
1098:54 - she doesn't really know
and probably shouldn't
1098:56 - care what his IP address is, right?
1098:58 - These days it's, like, I don't
know most of the phone numbers
1099:01 - that my friends have.
1099:02 - I instead look them up in some way.
1099:04 - And, indeed, when you visit a
website, what do you type in?
1099:07 - It's typically not something
dot something dot something dot
1099:10 - something, where each of
those somethings is a number.
1099:12 - What do you typically
type in to a browser?
1099:14 - So a domain name, right?
1099:15 - Something like Stanford.edu,
Harvard.edu, Yale.edu, gmail.com,
1099:20 - or any other such domain name.
1099:22 - And so, thankfully,
there's another system
1099:24 - on the internet, one more acronym for
today, called DNS, domain name system.
1099:29 - And pretty much every network on the
internet, Harvard's, Yale's, Comcast's,
1099:33 - your own home network, somewhere,
somehow has a DNS server.
1099:37 - You probably didn't have
to configure it yourself.
1099:39 - Someone else did, your campus, your
job, your internet service provider.
1099:44 - But there is some server connected
somehow to the network you're on,
1099:48 - via wires or wirelessly, that just
has a really big table in its memory,
1099:52 - a big spreadsheet, if you
will, or, if you prefer,
1099:55 - a hash table, that has at least
two columns of keys and values
1099:59 - respectively.
1100:00 - Where on the left hand
side is what we'll
1100:02 - call domain name,
something like Harvard.edu,
1100:04 - Yale.edu, an IP address on the
right hand side, that is to say,
1100:08 - a DNS server's purpose in life
is just to translate domain names
1100:13 - to IP addresses.
1100:14 - And vice versa, if you want
to go in the other direction,
1100:17 - and technically, just to be precise, it
translates fully qualified domain names
1100:22 - to IP addresses.
1100:23 - And we'll see what those
are in just a moment.
1100:25 - But again, all of this just
kind of happens magically
1100:27 - when you turn on your
phone or your laptop
1100:29 - today, because all of these things
are pre-configured for us nowadays.
1100:33 - So how can we actually start to
see some of these things in action?
1100:38 - Well, let's go ahead and poke around,
for instance, at a couple of URLs here.
1100:44 - Let's see what we can actually do
now with these basic primitives.
1100:48 - If we now have the ability to
move data from point A to point B,
1100:52 - and what can be in that envelope
could be, yes, an email,
1100:55 - but today, onward, it's really
going to be web content.
1100:58 - There's going to be content
that you're requesting,
1101:00 - like give me today's home page.
1101:01 - And there's content
you're sending, which
1101:03 - would be the contents of
that actual home page.
1101:05 - And so, just to go one level deeper,
now that we have these packets that
1101:10 - are getting from point A to
point B using TCP/IP, let's
1101:14 - put something specific inside of them,
not just an email and a bunch of text,
1101:19 - but something called HTTP, which
stands for hypertext transfer protocol.
1101:24 - You've seen this for
decades now, probably,
1101:25 - in the form of URLs, so much so that you
probably don't even type it nowadays.
1101:29 - Your browser just adds
it for you automatically,
1101:31 - and you just type in Harvard.edu,
or Yale.edu, or the like.
1101:35 - But HTTP is just a final
protocol that we'll
1101:38 - talk about here, that just
standardizes how web browsers and web
1101:42 - servers inter-communicate.
1101:44 - So this is a distinction now
between the internet and the web.
1101:47 - The internet is really like
the low-level plumbing,
1101:50 - all of the cables, all of a
technology that just moves packets
1101:53 - from left to right, right to left, top
to bottom, that gets data from point A
1101:57 - to point B. You can do anything you
want on top of that internet nowadays,
1102:01 - email and web and video and chat
and gaming, and all of that.
1102:06 - So HTTP, or the web,
is just one application
1102:09 - that is conceptually on top of,
built on top of the internet.
1102:13 - Once you take for granted
that there is an internet,
1102:15 - you can do really
interesting things with it,
1102:17 - just like in our physical world,
once you have electricity,
1102:19 - you can just assume you can do really
interesting things with that, too,
1102:22 - without even knowing
or caring how it works.
1102:25 - But now that you'll be
programming for the web,
1102:28 - it's useful to understand how
some of these things indeed work.
1102:32 - So let's take a peek at the
format of the things that
1102:36 - go inside of these messages.
1102:37 - These days, it's usually
actually HTTPS that's
1102:39 - in play, where, again,
the S just means secure.
1102:42 - More on that later, but the HTTP is
what standardizes what kinds of messages
1102:47 - go inside of these envelopes.
1102:48 - And wonderfully, it's just
textual information, typically.
1102:52 - There is a simple text format
that humans decided on years ago,
1102:56 - that goes inside of these
envelopes, that tells a browser how
1103:00 - to request information from a server,
and how to respond from the server
1103:04 - to that client with information.
1103:06 - So here's, for instance, a canonical
URL, https://www.example.com.
1103:12 - What might you see at the end of this?
1103:14 - You might sometimes see a slash.
1103:15 - Browsers nowadays kind of simplify
things and don't show it to you.
1103:18 - But slash, as we'll see, just
represents like the default
1103:21 - folder, the root of the
web server's hard drive,
1103:24 - like whatever the base is of it.
1103:26 - It's like C colon backslash on
Windows, or it's my computer on Mac OS.
1103:32 - But a URL can have more than that.
1103:34 - It can have slash path,
where path is just a word,
1103:36 - or multiple words, that sort of
describe a longer part of the URL.
1103:40 - That path could actually be
a specific file, we'll see,
1103:43 - like something called file.html.
1103:45 - More on HTML in just a bit, or
it can even be slash folder,
1103:48 - maybe with another slash, or
maybe it can be /folder/file.html.
1103:52 - Now these days Safari, and even Chrome
to some extent, and other browsers,
1103:57 - are in the habit of trying to hide
more and more of these details
1104:00 - from you and me.
1104:02 - Ultimately, though, it'll
be useful to understand
1104:05 - what URLs you're at, because
it maps directly to the code,
1104:08 - that we're ultimately going to write.
1104:10 - But this is only to say that
all this stuff in yellow
1104:13 - refers to, presumably, a specific
file and/or folder on the web
1104:18 - server, on which you're programming.
1104:20 - All right, what's this?
1104:21 - Example.com, this is the domain
name, as we described it earlier.
1104:26 - Example.com is the
so-called domain name.
1104:28 - This whole thing, www.example.com,
is the fully qualified domain name.
1104:33 - And what the WW is referring
to is specifically the name
1104:37 - of a specific server in that domain.
1104:40 - So back in the day, there was
a www.example.com web server.
1104:44 - There might have been a
mail.example.com mail server.
1104:48 - There might have been a
chat.example.com chat server.
1104:51 - Nowadays, this hostname, or
subdomain, depending on the context,
1104:56 - can actually refer to a whole
bunch of servers, right?
1104:58 - When you go to www.facebook.com,
that's not one server,
1105:01 - that's thousands of servers nowadays.
1105:03 - So long story short,
there's technology that
1105:05 - somehow get your data
to one of those servers,
1105:08 - but this whole thing is what we
meant by fully qualified domain name.
1105:11 - This thing here, hostname,
in the context of an email
1105:13 - address it might alternatively
be called a subdomain.
1105:16 - This thing here, top
level domain, you probably
1105:20 - know that dot com means commercial,
although anyone can buy it these days.
1105:23 - Dot org is similar, dot net.
1105:25 - Some of them are a bit restricted,
dot mil is just for the US military,
1105:29 - dot edu is just for accredited
educational institutions.
1105:31 - But there are hundreds, if
not more, top level domains
1105:35 - nowadays, some more popular than others.
1105:37 - CS50's tools, for instance, use CS50.io.
1105:41 - IO sort of connotes input-output.
1105:44 - It actually belongs, though, to
a small island nation, a country,
1105:49 - whose country code is .io, and you see
other two letter top level domains that
1105:55 - are country specific.
1105:56 - Indeed, it's something.uk,
something.jp, and the like typically
1106:00 - refer to countries.
1106:01 - But some of them have been
rather co-opted, .tv as well,
1106:04 - because they have these
meanings in English as well.
1106:06 - Lastly, this is what
we'll call the protocol.
1106:08 - That specifies how the server uses
this URL to get data from point A
1106:13 - to point B. So what is
inside of this envelope?
1106:16 - Let's now start poking
around a little bit more.
1106:18 - What is inside of this envelope?
1106:20 - It's essentially, for our
purposes today, one of two verbs,
1106:23 - either GET or POST.
1106:25 - And if any of you have dabbled
with HTML or made your own website,
1106:28 - you might have seen some
of these terms before.
1106:30 - But these two verbs describe
just how to send information
1106:34 - from you to the server.
1106:36 - Long story short, more
on this next week,
1106:39 - GET means put any user input
in the URL, POST means hide it,
1106:43 - so that things you're searching for,
credit card numbers you're typing in,
1106:46 - usernames and passwords you're
inputting, don't show up in the URL,
1106:49 - and are therefore visible
to anyone with access
1106:51 - to your computer and
your search history,
1106:53 - but rather they're somehow provided
elsewhere, deeper into that envelope.
1106:57 - But for now, we'll focus
almost entirely on GET,
1107:00 - which is perhaps the most common
one that we're always going to use.
1107:03 - And what we're going to do is this.
1107:05 - Let me switch over just
to a blank screen here.
1107:07 - And if we assume that little
old me is this laptop here,
1107:11 - and I'm connected to the cloud, and
in that cloud is some server that I
1107:16 - want to request the web page
of, Harvard.edu or Yale.edu,
1107:20 - it's really going to
be a two-step process.
1107:22 - There's going to be a request,
that goes from point A to point B,
1107:27 - and then, hopefully,
the server that hears
1107:29 - that request is going to reply with
what we'll typically call a response.
1107:34 - And other terms that are
relevant here, is my laptop
1107:37 - is the so-called client,
Harvard.edu, Yale.edu, whatever
1107:40 - it is, is the so-called server.
1107:42 - And just like in a restaurant, where
you might request something to eat,
1107:45 - the server might bring it to you.
1107:47 - It's, again, that kind of
bidirectional relationship.
1107:49 - One request, one response, for
each such web page we request.
1107:54 - All right, so what's inside these
envelopes, and what do we actually see?
1107:58 - Well, this arrow, this line I
just drew from left to right,
1108:01 - representing the request, technically
looks a little more like this.
1108:05 - When you visit a web
page, using your browser,
1108:08 - on your phone, laptop, or desktop,
what's going inside that envelope,
1108:11 - and the textual message your Mac or PC
or phone is automatically generating,
1108:14 - looks a little something like this.
1108:16 - The verb GET, the URL, or rather
the path that you want to get,
1108:20 - slash represents the
default page on the website.
1108:22 - HTTP/1.1 is just some mention of
what version of HTTP you're speaking.
1108:27 - Now we're up to version 2, and
version 3, but 1.1 is quite common.
1108:31 - And the envelope contains some
mention of the host that was typed in,
1108:35 - the fully qualified domain name.
1108:37 - This is because single servers can
actually host many different websites.
1108:42 - If you're using Squarespace or Wix or
one of these popular hosting websites
1108:46 - nowadays, you don't get your own
personal server, most likely.
1108:49 - You're on the same server as
dozens, hundreds of other customers.
1108:52 - But when your customers,
your users' browsers,
1108:56 - include a little mention of your
specific, fully qualified domain
1109:00 - name in the envelope,
Squarespace and Wix just
1109:02 - know to send it to your web page or
my web page or some other customer
1109:06 - altogether.
1109:07 - Dot dot dot, there's
some other stuff there.
1109:09 - But that's really the essence
of what's in these requests.
1109:12 - Hopefully, then, when your browser
requests this web page from the server,
1109:16 - what comes back?
1109:17 - Well, hopefully, a response
that looks like this, HTTP/1.1,
1109:21 - so the same version, some
status code, like a number 200,
1109:25 - and then literally a short phrase like
OK, which means exactly that, like, OK,
1109:30 - this request was satisfied.
1109:31 - Then it contains some other
information, like the type of content
1109:35 - that's coming back.
1109:35 - And we'll see that this,
too, is standardized.
1109:37 - Text/HTML means here comes some
HTML, which is just a text language.
1109:41 - It could instead be image/jpeg
or Image/png, or video/mp4,
1109:48 - there are these different content
types, otherwise known as MIME types,
1109:51 - that uniquely identify types
of files, that come back,
1109:54 - similar in spirit to file
extensions, but a little more
1109:57 - standardized this way.
1109:59 - Then there's some more
stuff, dot dot dot.
1110:00 - But in general, what you see here, are
a familiar pattern, keys and values.
1110:05 - These keys and values are
otherwise known as HTTP headers.
1110:09 - And your browser has been sending
these every time you visit a website.
1110:14 - And, indeed, we can see
this right now ourselves.
1110:16 - Let me go over, in just a
second, to Chrome on my computer,
1110:20 - though you can do this kind of
thing with most any browser today.
1110:23 - I'll go ahead and visit
HTTP://Harvard.edu, Enter.
1110:28 - And, voila, I'm at Harvard's
home page for today.
1110:31 - The content often changes.
1110:32 - But this is what it
looks like right now.
1110:34 - Well, I typed in the URL, but
notice it changed a little bit.
1110:38 - It actually sent me to
HTTPS and added the www,
1110:41 - even though I didn't type that.
1110:42 - But it turns out we can poke around
at what my browser is actually doing.
1110:46 - Let me open another page.
1110:47 - I'm going to start to use incognito
mode this time, not because I
1110:50 - care that people know
I'm visiting Harvard.edu,
1110:52 - but because it throws away
any history that I just did.
1110:56 - So that every request is going
to look like a brand new one,
1110:58 - and that's just useful
diagnostically, because we're always
1111:01 - going to see fresh information.
1111:02 - My browser is not going to remember
what I previously already requested.
1111:06 - But I'm going to go
up to View, developer,
1111:09 - developer tools, which is something
that all of you have, if you use Chrome.
1111:13 - And there's something
analogous for Firefox and Edge
1111:15 - and Safari and other browsers.
1111:17 - Developer tools is going to
open up these tabs down here.
1111:20 - I don't really care what's new, so I'm
going to close the bottom thing there.
1111:23 - And I'm going to hover over the
Network tab for just a moment.
1111:26 - And now I'm going to go and
say HTTP://Harvard.edu, so
1111:31 - the shorter version.
1111:32 - I'm going to hit Enter,
and a whole bunch of stuff
1111:36 - just flew across the screen.
1111:37 - And it's still coming in.
1111:38 - And if I zoom in down here, my God,
visiting Harvard.edu, still going,
1111:43 - is downloading, what 17, 18,
19 megabytes, 20 megabytes,
1111:48 - millions of bytes of information,
over 111 HTTP requests.
1111:53 - In other words, a bit of a
simplification, but my browser,
1111:56 - unbeknownst to me, sent one
envelope initially with the request.
1111:59 - Then the server said,
OK, by the way, there's
1112:01 - 110 other things you need, 112
other things you need to get.
1112:05 - So my computer went back and forth,
requesting even more content for me.
1112:09 - Why?
1112:10 - Well, inside of Harvard's web
page is a whole bunch of images,
1112:13 - and maybe sound files and
videos and other stuff,
1112:16 - that all need to be
downloaded and to compose
1112:18 - what is ultimately the web page.
1112:20 - But I don't care about like
100 plus of these things.
1112:22 - Let's focus on the very first one first.
1112:25 - The very first request
I sent was up here.
1112:27 - And I'm going to click on this
row, under the Network tab.
1112:30 - And then I'm going to see a
bit of diagnostic information.
1112:33 - To an average person using the
web, they needn't care about this,
1112:36 - just as you probably didn't
care about it until right now.
1112:39 - And even then, perhaps not.
1112:41 - But if I scroll down to
request headers, you will see,
1112:44 - if I click View source, literally
everything that was in the request
1112:48 - my Mac just sent to Harvard.edu.
1112:51 - Two of the lines are familiar,
get/http1.1, host:harvard.edu,
1112:56 - and then other stuff that, for now,
it's not that interesting for us.
1112:59 - But let's look at the response
that came back from the server.
1113:03 - I'm going to scroll up now and
see response headers, view source.
1113:08 - And this is interesting.
1113:09 - It is not OK.
1113:11 - There's no 200, there's no word OK.
1113:14 - Curiously, harvard.edu
has moved permanently.
1113:18 - What does that mean?
1113:18 - Well, there's a whole
bunch of stuff here
1113:20 - that's not that interesting for us.
1113:22 - But this line, location, is interesting.
1113:24 - This is an HTTP header, a
standardized key value pair,
1113:28 - that's part of the HTTP
protocol, that is, conventions.
1113:32 - And if I highlight just
this one, it's telling me,
1113:34 - mm-mmm, Harvard is not
at HTTP://Harvard.edu,
1113:38 - Harvard's website is now, and perhaps
forever, at HTTPS://www.harvard.edu.
1113:44 - So what's the value here?
1113:47 - Probably someone at Harvard wants
you to use a secure connection.
1113:50 - So they redirected you
from HTTP to HTTPS.
1113:53 - Maybe the marketing people want you to
be at www instead of just Harvard.edu.
1113:57 - Why?
1113:57 - Just to standardize things,
but there are technical reasons
1114:00 - to use a hostname, and not
just the raw domain name.
1114:03 - And all this other stuff is sort
of uninteresting for our purposes,
1114:06 - now, because a browser that
receives a 301 response knows,
1114:11 - by design, by the definition of HTTP,
to automatically redirect the user.
1114:16 - And that's why, in my browser, all of
this happened in like a split second,
1114:20 - because I didn't really know or
care about all of those headers.
1114:22 - But that's why and how I
ended up at this URL here.
1114:26 - My browser was told to go
elsewhere via that new location.
1114:29 - And the browser just
followed those breadcrumbs,
1114:32 - if you will, at which point it
downloaded all of the other images
1114:35 - and files, and so forth, that
compose this particular page.
1114:39 - Well, let me zoom out.
1114:40 - And let me actually go
into VS Code, if only
1114:42 - because it's a little more pleasant to
do things in just a terminal window,
1114:45 - without actually using
a full-fledged browser.
1114:49 - So now let's just use
an equivalent program.
1114:51 - It's called Curl, for
connecting to a URL, that's
1114:54 - going to allow me to play with
websites and just see those headers,
1114:57 - without bothering to download
all the images and text
1114:59 - and so forth from the website.
1115:01 - It's going to allow me to
do something like this.
1115:03 - Let me go ahead and run, for instance,
Curl-I-xget, which is just the command
1115:10 - line arguments that says
simulate a GET request textually,
1115:14 - as though you're a browser.
1115:15 - And let's go to
HTTP://Harvard.edu Enter.
1115:20 - Now, by way of how Curl, works,
I'm just seeing the headers.
1115:23 - It didn't bother downloading
the whole website.
1115:25 - And you see exactly the same
thing, 301 moved permanently.
1115:28 - Location is, indeed, this one here.
1115:31 - So that's kind of interesting.
1115:33 - But let's follow it manually now.
1115:34 - Let's now do what it's telling me to do.
1115:37 - Let's go to the location, with
HTTPS and the www and hit Enter.
1115:42 - And now, what's a good
sign with this output?
1115:46 - Most of it's irrelevant.
1115:47 - AUDIENCE: Migrate?
1115:48 - SPEAKER 1: 200 OK, that
means I'm seeing, presumably,
1115:51 - if I were using a real browser,
the actual content of the web page.
1115:55 - Looks like Harvard's version of HTTP
is even newer than the one I'm using.
1115:58 - It's using HTTP version
2, which is fine.
1116:01 - But 200 is indeed indicative
of things being OK.
1116:04 - Well, what if I try
visiting some bogus URL,
1116:07 - like Harvard.edu, when this file does
not exist, something completely random,
1116:14 - probably doesn't exist, and hit Enter.
1116:17 - What do you see now, that's perhaps
familiar, in the real world?
1116:20 - Yeah.
1116:21 - AUDIENCE: Error 404.
1116:23 - SPEAKER 1: Yeah, error 404.
1116:24 - All of us have seen
this probably endlessly,
1116:26 - from time to time, when you
screw up by mis-typing a URL,
1116:29 - or someone deletes the
web page in question.
1116:31 - But all that is is a
status code that a browser
1116:34 - is being sent from the server,
that's a little clue as to what
1116:37 - the actual problem is,
underneath the hood.
1116:40 - So instead of getting
back, for instance,
1116:42 - something like OK, or moved permanently,
what I've just gotten back, quite
1116:45 - simply, is 404 not found.
1116:47 - Well, it turns out there's
other types of status codes
1116:51 - that you'll start to see over time,
as you start to program for the web.
1116:55 - 200 is OK.
1116:56 - 301 is moved permanently.
1116:57 - 302, 304, 307 are all similar in spirit.
1117:01 - They're related to redirecting the
user from one place to another.
1117:04 - 401, 403, unauthorized or forbidden.
1117:08 - If you ever mess up
your password, or you
1117:11 - try visiting a URL you're
not supposed to look at,
1117:13 - you might see one of these
codes, indicating that you just
1117:15 - don't have authorization for those.
1117:17 - 404 not found, 418, I'm a
teapot, was an April Fool's joke
1117:21 - by the tech community years ago.
1117:24 - 500 is bad.
1117:25 - And, unfortunately,
all of you are probably
1117:27 - on a path now to creating
HTTP 500 errors, once,
1117:30 - next week, we start writing
code, because all of us
1117:33 - are going to screw up.
1117:34 - We're going to have typos, logical
errors, and this is on the horizon,
1117:37 - just like segfaults were in the world of
C, but solvable with the right skills.
1117:42 - 503 service unavailable, means
maybe the server is overloaded,
1117:45 - or something like that.
1117:46 - And there's other codes there.
1117:47 - But those are perhaps some
of the most common ones.
1117:51 - Has anyone, we can get away with
this here, less so in New Haven,
1117:54 - has anyone ever visited
SafetySchool.org?
1118:01 - HTTP://SafetySchool.org,
dare we do this, Enter.
1118:08 - Oh, look at that.
1118:09 - Where did we end up?
1118:10 - [LAUGHTER]
1118:11 - OK, so--
1118:13 - [APPLAUSE]
1118:17 - --so this has been like a
joke for like 10 or 20 years.
1118:20 - Someone out there has been
paying for the domain name,
1118:22 - safetyschool.org, just for
this two second demonstration.
1118:26 - But we can now infer, how did this work?
1118:28 - The person who bought that domain
name and somehow configured
1118:31 - DNS to point to their web server,
the IP address of their web server,
1118:35 - what is their web server
presumably spitting out,
1118:37 - whenever a browser requests the page?
1118:41 - What status code, perhaps?
1118:42 - Well, we can simulate this.
1118:44 - Let me go over to VS Code.
1118:46 - Let me go back over here.
1118:48 - Let me increase my terminal window.
1118:49 - Let me do Curl-I-xget
HTTP://safetyschool.org Enter,
1118:58 - and that's all this website does.
1119:00 - There's not even an
actual website there.
1119:02 - No HTML, no CSS languages
we're about to see.
1119:04 - It literally just exists on the
internet to do that redirect there.
1119:09 - In fairness, there are others.
1119:13 - Let me actually do another one here.
1119:15 - Instead of safetyschool.org,
turns out someone,
1119:19 - some years ago, bought
HarvardSucks.org Enter.
1119:25 - And when we do this, you'll see that,
oh, they don't need us to be secure,
1119:30 - but I do need the www.
1119:31 - Let's do this one, Enter.
1119:34 - That one is not found.
1119:36 - This demo actually
worked for so many years.
1119:38 - But someone has stopped paying
for the Squarespace account
1119:41 - recently, apparently.
1119:42 - So--
1119:43 - [APPLAUSE]
1119:46 - OK, so, fortunately, we
did save the YouTube video
1119:52 - to which this thing refers.
1119:53 - And so, just to put this
into context, since it's
1119:56 - been quite a few years,
Harvard and Yale, of course,
1119:58 - have this long-standing rivalry.
1120:00 - There is this tradition
of pranking each other.
1120:02 - And, honestly, hands down, one of the
best pranks ever done in this rivalry
1120:06 - was by Yale to Harvard.
1120:09 - It's about a three-minute retrospective.
1120:10 - It's one of the earliest
videos, I dare say, on YouTube,
1120:13 - so the quality is
representative of that.
1120:15 - But let me go ahead and
full screen my page here.
1120:18 - And what used to live at
HarvardSucks.org is this video here.
1120:22 - If we could dim the lights
for about three minutes.
1120:25 - [VIDEO PLAYBACK]
1120:26 - [MUSIC PLAYING]
1120:48 - [CHEERING]
1120:53 - - Actually we're going
all the way to the top.
1120:55 - And you pass it down.
1120:57 - - This is for you, Yale.
1120:59 - - We love you, Yale.
1121:01 - - We're here to trip up Harvard.
1121:04 - - Go Harvard!
1121:05 - - Go Harvard!
1121:06 - - Pass from the top one, pass it down.
1121:08 - - Pass them down.
1121:09 - - It's nice to say the ERA sucks.
1121:12 - - Let's go Harvard.
1121:14 - - Where does?
1121:16 - - You see that [BEEP]?
1121:17 - Where they're passing.
1121:19 - It's going to have to happen.
1121:22 - - It's actually going to happen.
1121:25 - I can't [BEEP] believe this.
1121:26 - - What do you think of Yale?
1121:28 - - They don't think good.
1121:30 - - Hah-hah.
1121:33 - - Because they don't have it.
1121:34 - Doesn't run out of stuff.
1121:35 - - OK.
1121:35 - - Is there another stuff?
1121:37 - - Probably that's going
to be legible, very small.
1121:40 - - Garbage.
1121:43 - - I know, but--
1121:44 - - Well, what houses?
1121:45 - - Says, are we in boats now?
1121:47 - - How many extras?
1121:48 - - How many extra are there?
1121:49 - - Sometimes.
1121:50 - - Yeah.
1121:52 - [CHEERING]
1121:53 - - OK.
1121:54 - - You guys are from Harvard, right?
1121:55 - - No, vote for.
1121:56 - Full timer.
1121:57 - - Yeah, these are '05s.
1121:58 - - Just make sure everyone has one.
1122:00 - - They're probably crummy.
1122:01 - - We're still passing.
1122:02 - - All the cards needed.
1122:03 - - Oh, no.
1122:03 - My bad.
1122:03 - - Yeah.
1122:05 - All right, cue it up.
1122:07 - [CHEERING]
1122:08 - Go, Harvard.
1122:14 - [APPLAUSE]
1122:18 - - Hold up your signs.
1122:21 - [BEEP]
1122:23 - - You suck.
1122:23 - You suck.
1122:24 - You suck.
1122:24 - You suck.
1122:25 - You suck.
1122:25 - You suck.
1122:26 - You suck.
1122:27 - You suck.
1122:28 - You suck.
1122:29 - You suck.
1122:30 - You suck.
1122:31 - You suck.
1122:32 - You suck.
1122:32 - You suck.
1122:33 - You suck.
1122:35 - [SCREAMING]
1122:35 - - What do you think of Yale, sir?
1122:38 - - Going to be, do one more time.
1122:41 - - One more time.
1122:42 - One more time.
1122:44 - [SCREAMING]
1122:48 - - Oh, there it goes again.
1122:50 - - Oh.
1122:56 - - Harvard sucks.
1122:57 - Harvard sucks.
1122:58 - Harvard sucks.
1122:59 - Harvard sucks.
1123:01 - Harvard sucks.
1123:02 - Harvard sucks.
1123:02 - Harvard sucks.
1123:04 - [END PLAYBACK]
1123:08 - SPEAKER 1: All right, so thanks to
our friends at Yale for that one.
1123:13 - Let's go ahead here and consider, in
just a moment, what further is deeper
1123:17 - down inside of the
envelope, because we now
1123:18 - have the ability to get data from,
oh, OK, YouTube autoplay again.
1123:24 - Got to stop doing that.
1123:25 - Let's consider for just a moment
that, let's consider for just a moment
1123:30 - that we now have this ability to
get data from point A to point B.
1123:33 - And we have the ability to
specify in those envelopes what
1123:37 - it is we want from the website.
1123:38 - We want to get the home page.
1123:40 - We want to get back the HTML.
1123:41 - But what is that HTML?
1123:43 - In fact, we don't yet have the language
with which the web pages themselves
1123:46 - are written, namely HTML and CSS.
1123:48 - But let's go ahead and take
a five minute break here.
1123:50 - And when we come back, we'll
learn those two languages.
1123:54 - All right, we are back.
1123:56 - So we've got three
languages to look at today.
1123:58 - But two of them are not
actually programming languages.
1124:00 - What makes something a programming
language, like C or Python and SQL,
1124:05 - is that there are these constructs via
which you can express conditionals.
1124:08 - You might have variables, you
might have looping constructs.
1124:10 - You have the ability,
ultimately, to express logic.
1124:13 - HTML and CSS aren't so much about
logic as they are about structure,
1124:16 - and the aesthetics of a page.
1124:18 - And so we're going to create
the skeleton of a web page using
1124:21 - this pair of languages, HTML and CSS.
1124:23 - And then toward the
end of the today, we'll
1124:24 - introduce an actual
programming language,
1124:26 - that actually is pretty similar
in spirit and syntactically
1124:30 - to both C and Python, but that's going
to allow us to make these web pages not
1124:34 - just static, things that you look at,
but interactive applications as well.
1124:38 - And then next week again, in week 9,
will we reintroduce Python and SQL,
1124:42 - tie all of this together, so that you
can actually have a browser or a phone
1124:46 - talking to a back-end
server, and creating
1124:49 - the experience that you and I now take
for granted for most any app or website
1124:53 - today.
1124:53 - Well, let's go ahead and do this.
1124:55 - Let's quickly whip up something
in this language called HTML.
1124:58 - I'm in VS Code here.
1124:59 - I'm going to go ahead and create a
file quite simply called, Hello.html.
1125:04 - The convention is typically to
end your file names in dot html.
1125:07 - And I'm going to go ahead
and bang this out real quick.
1125:09 - But then we'll more slowly step
through what the constructs are herein.
1125:12 - So I'm going to say doctype
html open bracket html,
1125:17 - and then notice I'm going to do open
bracket slash html close bracket.
1125:22 - And I'm leveraging a feature of VS
Code and programming environments more
1125:25 - generally, to do a bit of autocomplete.
1125:27 - So you'll see that there's this symmetry
to much of what I'm going to type,
1125:30 - but I'm not typing all of these things.
1125:32 - VS Code is automatically generating the
end of my thought for me, if you will.
1125:37 - Let me go ahead and
say, Open the head tag.
1125:41 - Open the title tag.
1125:42 - I'll say something cute
like, Hello, title.
1125:44 - And then down here, I'm going to
create the body of this web page
1125:47 - and say something like Hello, body.
1125:49 - And let me specify at the very top,
that all of this is really in English,
1125:53 - Lang equals en.
1125:54 - So at this moment, I have a file in my
VS Code environment called Hello.html.
1126:00 - VS Code as we're using it,
of course, is cloud-based.
1126:03 - We're using it in a browser,
even though you can also
1126:05 - download it and run it on a Mac and PC.
1126:07 - So we are in this weird
situation where I'm
1126:10 - using the cloud to
create a web page, and I
1126:12 - want that web page to also live in
the cloud, that is, on the internet.
1126:17 - But the thing about VS
Code, or really any website
1126:21 - that you might use in a browser, by
default that website is using probably
1126:24 - TCP port number 80 or
TCP port number 443,
1126:29 - which is HTTP and HTTPS respectively.
1126:32 - But here I am, sort of
a programmer myself,
1126:34 - trying to create my own
website on an existing website.
1126:39 - So it's a bit of a weird situation.
1126:40 - But that's OK, because
what's nice about TCP
1126:43 - is that you and I can just pick port
numbers to use and run our own web
1126:47 - server, on a web server.
1126:49 - That is, we can control
the environment entirely,
1126:51 - by just running our own web server
via this command, HTTP-server,
1126:57 - in my terminal window.
1126:58 - This is a command that we
preinstalled in VS Code here.
1127:01 - And you'll notice a pop-up just came up.
1127:03 - Your application running
on port 8080 is available.
1127:05 - That's a commonly used TCP port
number, when 80 is already used,
1127:09 - and 443 is already used,
you can run your own server
1127:11 - on your own port, 8080 in this case.
1127:14 - I've opened that tab in advance, and
if I go into another browser tab here,
1127:18 - here I see a so-called directory
listing of the web server I'm running.
1127:22 - So I don't see any of my other files.
1127:24 - I don't see anything
belonging to VS Code itself.
1127:27 - I only see the file that I've created
in my current directory, called
1127:30 - Hello.html.
1127:31 - And so if I click on this file
now, I should see Hello, body.
1127:36 - I don't see the title.
1127:37 - But that's because the
title of a web page
1127:39 - nowadays is typically
embedded in the tab.
1127:41 - And if I'm full screen in my
browser, there are no tabs.
1127:44 - So let me minimize the window a bit.
1127:45 - And now you can see just in this
single browser window, in my own URL
1127:50 - here, that Hello, body, is
in the top left hand corner.
1127:52 - And if I zoom in, there's Hello, title.
1127:54 - So what have I done here?
1127:56 - I have gone ahead and created
my own web page in HTML,
1128:01 - in a file called Hello.html.
1128:04 - And then I have opened up
a web server of my own,
1128:09 - configured it to listen
on TCP port 8080,
1128:11 - which just says to the internet, hey,
listen for requests from web browsers,
1128:14 - not on the standard port number,
80 or 443, listen on 8080.
1128:18 - And this means I can develop a website
using a web-based tool, like this one
1128:22 - here, which is
increasingly common today.
1128:24 - All right, so now let's consider
what it is I actually just typed out.
1128:28 - HTML is characterized really by just
two features, two vocab words, tags
1128:32 - and attributes.
1128:33 - Most of what I just typed were tags,
but there was at least one attribute
1128:36 - already.
1128:37 - Here's the same source code that I
typed out in HTML, from top to bottom.
1128:41 - Let's consider what this is.
1128:43 - The very first line of
code here, doctype html,
1128:46 - is the only anomalous one.
1128:47 - It's the only one that starts with
an open bracket, a less than sign,
1128:51 - and an exclamation point.
1128:52 - There's no more exclamation
points thereafter, for now.
1128:55 - This is the document type declaration,
which is a fancy way of saying,
1128:58 - it's just got to be there nowadays.
1129:00 - It's like a little breadcrumb
at the beginning of a file that
1129:02 - says to the browser, you are about to
see a file written in HTML version 5.
1129:08 - That line of code has changed
over time, over the years.
1129:11 - The most recent version of it
is nice and succinct like this,
1129:13 - and it's just a clue to the
browser as to what version of HTML
1129:16 - is being used by you, the programmer.
1129:18 - All right, what comes after that?
1129:20 - Well, after that, and I've
highlighted two things in yellow,
1129:23 - this is what we're going to
start calling an open tag,
1129:26 - or a start tag, open bracket HTML
then something, close bracket,
1129:30 - is the so-called start or open tag.
1129:32 - Then the corresponding close
or end tag is down here.
1129:35 - And it's almost the same.
1129:37 - You use the same tag number, you
use the same angled brackets.
1129:40 - But you do add a slash, and
you don't repeat yourself
1129:43 - with any of the things
called attributes,
1129:46 - because, what is this thing here?
1129:47 - Lang equals quote unquote
"en," means the language
1129:50 - of my page is written
in the English language.
1129:53 - The humans have standardized
two and three letter codes
1129:56 - for every human language, right now.
1129:59 - And so this is just a clue to the
browser for like automatic translation
1130:03 - and accessibility purposes,
what language the web page
1130:06 - itself is written in.
1130:07 - Not the tags, but the words, like
Hello, title and Hello, body,
1130:10 - which while minimalist,
are indeed in English.
1130:13 - So when you close a tag, you close
the name of it with the slash
1130:16 - and the angle brackets.
1130:17 - You don't repeat the attribute.
1130:19 - That would just be annoying to
have to type everything again.
1130:21 - But notice the pattern here.
1130:23 - It's new syntax.
1130:24 - But this is another example of
key value pairs in computing.
1130:27 - The key is Lang, the
value is E-N for English.
1130:31 - The attribute is called
Lang, the value is
1130:34 - called, it is E-N. So again,
it's just key value pairs,
1130:38 - in just yet another context.
1130:39 - Probably the browser's using a
hash table underneath the hood,
1130:41 - to keep track of this stuff, like a
two column table, with keys and values.
1130:44 - Again, humans keep using the same
paradigm in different languages.
1130:48 - What's inside of that?
1130:49 - The nesting is important
visually, not to the computer,
1130:52 - but to us, the humans,
because it implies
1130:54 - that there's some hierarchy here.
1130:55 - And, indeed, what is inside
of the HTML tag here?
1130:59 - Well, we have what
we'll call the head tag.
1131:02 - The head tag says, hey, browser,
here comes the head of the page.
1131:06 - And then the body tag
says, hey, browser,
1131:08 - here comes the body of the page.
1131:09 - The body is like 99% of the user's
experience, the big rectangular window.
1131:13 - The head is really just the address
bar and other such stuff at top,
1131:17 - like the title that we saw a moment ago.
1131:20 - Just to introduce the vernacular,
then, the HTML tag, otherwise known
1131:24 - as an element, has two children,
the head child and the body child,
1131:29 - which is to say that head
and body are now siblings.
1131:31 - So you can use the same kind of
family tree terminology that we used,
1131:35 - when talking about trees, weeks ago.
1131:37 - If we look at the head tag, how
many children does it seem to have?
1131:41 - I'm seeing one, and,
indeed, at least if we
1131:44 - ignore all the white space, the
spaces or tabs or new line characters,
1131:48 - there's just one child, a title element.
1131:51 - And an element is the terminology that
includes the start tag and the end tag,
1131:55 - and everything in between.
1131:56 - So this is the title element.
1131:58 - And the title element has one
child, which is just pure text,
1132:01 - otherwise known as a text node.
1132:03 - Recall, node, from our discussions
of data structures weeks ago.
1132:06 - If we jump then to the body, which
is the other child of the HTML tag,
1132:10 - it too has one child, which is just
another chunk of text, a text node,
1132:14 - that says, quote unquote "Hello, body."
1132:17 - What's nice about this indentation,
even though the browser technically
1132:21 - is not going to care, is that it
implies this kind of structure.
1132:25 - And this is where we connect,
like weeks 5 and now weeks 8, here
1132:28 - is the tree structure we began to
talk about, even in our world of C.
1132:33 - It's not a binary tree,
even though this one happens
1132:35 - to have no more than two children.
1132:37 - It's an arbitrary tree that can
have 0 or any number of children.
1132:40 - But if we have a special node
here that refers to the document,
1132:43 - the root node, so to speak, is
HTML, drawn with a rectangle
1132:47 - here, just for discussion's sake.
1132:48 - It has two children, head
and body, also rectangles.
1132:51 - Head has a title child,
and then it and body
1132:54 - have text nodes, which I've
drawn with ovals instead.
1132:57 - Which is only to say that when your
browser, Chrome, Safari, whatever,
1133:01 - downloads a web page,
opens up that envelope,
1133:03 - and sees the contents that
have come back from the server,
1133:06 - it essentially reads the
code that someone wrote,
1133:10 - the HTML code, top to
bottom, left to right,
1133:12 - and creates in the browser's
memory, in your Mac or your PC
1133:16 - or your phone's memory or RAM,
this kind of data structure.
1133:20 - That's what's going on
underneath the hood.
1133:22 - And that's why aesthetically,
it's just nice, as a human,
1133:24 - to indent things stylistically,
because it's very clear then
1133:27 - to you, and to other programmers,
what the structure actually is.
1133:32 - So that's it for like
the fundamentals of HTML.
1133:36 - We'll see a bunch of tags
and a bunch of examples now.
1133:38 - But HTML is just tags and attributes.
1133:40 - And it's the kind of thing that
you look them up when you need to.
1133:43 - Eventually, many of them get ingrained.
1133:45 - I constantly check the reference
guides or stack overflow
1133:47 - if I'm trying to figure out,
how do I lay something out.
1133:50 - It's really just these
building blocks that
1133:52 - allow you to assemble the
structure of a web page.
1133:55 - This one is being super simple,
but it's just tags and attributes.
1133:58 - Any questions on this
framework, before we
1134:01 - start to add more tags, more
vocabulary, if you will?
1134:05 - In the middle, yeah.
1134:06 - AUDIENCE: What would happen
if we put the title tag?
1134:09 - SPEAKER 1: If we put the hello tag
around body, that's a good question.
1134:13 - Let's try it.
1134:13 - So let me actually go to this,
and say open bracket title,
1134:20 - whoops, sometimes you don't want
it to finish your thought for you.
1134:23 - But it did that time.
1134:24 - I've gone ahead and changed the file.
1134:27 - Let me go and open up, give me a
second to open my terminal window,
1134:30 - and go back to the URL that has my page.
1134:34 - Give me a second.
1134:36 - There's my Hello.html.
1134:38 - Let me zoom in on this.
1134:39 - Let me zoom in on this.
1134:41 - And let me go ahead now
and click on Hello.html.
1134:45 - And in this case, it looks like
we don't actually see anything.
1134:49 - So the browser is hiding it.
1134:50 - Technically speaking, browsers
tend to be pretty generous.
1134:54 - And half the time, when
you make mistakes in HTML,
1134:56 - it will display, it might display--
1134:58 - not display as you intend it.
1134:59 - It might not display the same on
Macs or PCs or Chrome or on Firefox.
1135:03 - There is a tool, though,
that we'll see, that
1135:05 - can help answer this question for you.
1135:07 - For instance, if I go
to Validator.w3.org,
1135:11 - W3 is the World Wide
Web Consortium, a group
1135:13 - of people that standardize
this kind of stuff,
1135:15 - I can click on Validate
by direct input, and just
1135:17 - copy paste my sample HTML into
this box, and click Check.
1135:21 - And I should see,
hopefully, that indeed, it's
1135:24 - an error, what you proposed that I do.
1135:25 - The browser just did its
best to do something,
1135:27 - which was to show me nothing at least,
rather than the incorrect information.
1135:30 - But if I revert that change, and
let me undo what we just did,
1135:34 - let me copy my original code back
into this text box, and click Check,
1135:39 - now you can see, conversely,
my code is now correct.
1135:41 - And there's automated
tools to check that.
1135:43 - But we'll encourage you, for
problem sets and projects,
1135:45 - to use that particular manual tool.
1135:48 - All right, so let's go ahead
and enhance this a little bit
1135:51 - by introducing a whole
bunch of tags, just
1135:53 - to give you a sense of some
of the building blocks here.
1135:55 - So I'm going to go ahead and create
a new file called Paragraphs.html.
1136:01 - And I'm just going to do a bunch of
copy/paste just to start things off,
1136:04 - so I'm not constantly typing all
this darn stuff again and again,
1136:07 - because I want everything
to be the same here,
1136:09 - except I'm going to change my title
to be Paragraphs for this demo.
1136:12 - And inside of the body, I need a
whole bunch of paragraphs of text.
1136:16 - And I don't really want
to come up with some text.
1136:18 - So let me go to some random website
here and grab lorem ipsum text,
1136:21 - which if you're involved in like
student newspaper or just design,
1136:25 - this is placeholder text, kind of looks
like Latin, but technically isn't.
1136:28 - Here, though, I have a handy way of
just getting three long paragraphs
1136:32 - in something that looks like Latin.
1136:33 - And I've put those,
notice, inside of the body.
1136:36 - And they're indeed long.
1136:37 - Look how long the
made-up words here are.
1136:40 - So let me go now into
my browser tab here.
1136:46 - Let me reload this page, and you'll
see two files have now appeared,
1136:50 - Paragraphs.html, which is
my new one, and Hello.html.
1136:53 - Let me click on Paragraphs.html,
and what clearly seems to be wrong?
1136:58 - Yeah.
1136:58 - AUDIENCE: One paragraph.
1137:00 - SPEAKER 1: Yeah, it's obviously one
massive paragraph, instead of three.
1137:03 - So that's interesting, but it's just a
little hint as to how pedantic HTML is.
1137:07 - It will only do what you say.
1137:09 - And each of these tags tells the
browser to start doing something,
1137:12 - and then maybe stop doing something,
like, hey, browser, here comes my HTML.
1137:15 - Hey, browser, here comes
the head of my page.
1137:17 - Hey, browser, here comes the
title of my page, Hello, title.
1137:20 - Hey, browser, that's it for the title.
1137:22 - That's it for the head,
here comes the body tag.
1137:24 - So it's kind of having this
conversation between the browser,
1137:27 - between the HTML and the browser,
doing literally what it says.
1137:30 - So if you want a
paragraph, you're probably
1137:32 - going to want to use
the P tag for paragraph.
1137:35 - And I'm going to go ahead
and add this to my code.
1137:38 - I'm going to keep things neat,
even though the browser won't care,
1137:41 - by indenting things here.
1137:43 - Let me create another paragraph
tag here, and close it
1137:47 - right after that one,
indenting again, and I'm
1137:49 - keeping everything nice and orderly.
1137:51 - Let me do one more here.
1137:53 - Let me indent that, and then let me
add it to the end of my page here.
1137:58 - So again, a little tedious, but now I
have three paragraphs of text that say,
1138:02 - hey, browser, start a paragraph.
1138:04 - Hey, browser, stop that paragraph.
1138:05 - Start, stop, and so forth.
1138:07 - Let me go back to the
browser window here.
1138:09 - Let me hit Command R or
Control R to reload the page.
1138:13 - And voila, now I have three
cleaner paragraphs, all right?
1138:16 - So there's a P tag for paragraphs.
1138:18 - So now we have that
particular building block.
1138:20 - What if I want to add, for instance,
some headings to this page?
1138:23 - Well, that's something
that's possible, too.
1138:25 - Let me go ahead and create a
new file called Headings.html.
1138:29 - Let me copy and paste
that same code as before.
1138:31 - But now, let's preface each
paragraph with maybe H1.
1138:36 - And I'm going to just
write the word one.
1138:38 - And here I'm going to say H2, two.
1138:41 - And down here I might say H3, three.
1138:44 - So this is another tag,
another three tags, H1, H2, H3.
1138:49 - As you might have inferred
by the file name I chose,
1138:51 - this just gives you headings, like in
a book, different chapters or sections
1138:55 - or subsections, or in
an academic paper, you
1138:57 - have different hierarchies to
the text that you're writing.
1139:00 - So now that I've added an H1 tag,
and the word one, H2 tag, the word
1139:04 - two, H3 tag and the word three,
let's go back to the browser,
1139:07 - reload the page again,
and voila, once the page
1139:12 - reloads, I'll do it with the
manual button, reload the page.
1139:17 - Oh, what am I doing wrong?
1139:19 - Yeah.
1139:20 - AUDIENCE: Not in headings file.
1139:21 - SPEAKER 1: Right, I'm
not in the headings file.
1139:23 - So let me go back a page.
1139:24 - Now there's Headings.html.
1139:26 - Let me click on that.
1139:27 - OK, now we see some evidence of this.
1139:29 - Again, it's nonsensical content.
1139:30 - But you can kind of see that
H1 is apparently big and bold,
1139:33 - H2 is slightly less big, but still bold.
1139:36 - H3 is the same but a little smaller.
1139:38 - And it goes all the way down to H6.
1139:40 - After that, you should probably
reorganize your thoughts.
1139:42 - But there are six
different hierarchies here,
1139:44 - as you might use for chapters, sections,
subsections, and so forth, all right?
1139:48 - So those are headings, as an
HTML tag, in our vocabulary.
1139:53 - What's a common thing, too, well, let
me go to VS Code again, let me go ahead
1139:59 - and get some boilerplate here,
create a file called List.html.
1140:04 - Let's create a simple
list inside of my body,
1140:07 - and I'll give this a title of List.
1140:10 - And let me fix the title of this
one to be Headings, as well.
1140:13 - So in List.html, suppose I want to have
a list of things, foo, bar, and baths,
1140:19 - they're like a computer
scientist's go-to words,
1140:21 - just like a mathematician might say xyz.
1140:23 - Foo, bar, baths is in List.html.
1140:26 - Let me go back to my
browser, hit the Back button.
1140:29 - There's List.html, and, hopefully,
I'll see foo, bar, and baths, one
1140:33 - on each line like a nice little
list, but, of course, I do not.
1140:37 - And this is not English.
1140:38 - Chrome thinks it might be Arabic.
1140:41 - But that's curious, too,
because the Lang attribute
1140:44 - should be overriding that.
1140:45 - So Google is trying to override it.
1140:48 - All right, what's the
obvious explanation
1140:49 - why we're seeing foo, bar, and
baths on the same line, and not
1140:52 - three separate ones?
1140:53 - AUDIENCE: We didn't tell it.
1140:55 - SPEAKER 1: We didn't tell it to do that.
1140:57 - So we need paragraph tags,
or maybe something else.
1140:59 - Turns out there is something else.
1141:00 - There is a UL tag, for an
unordered list in HTML,
1141:04 - inside of which you can
have LI tags, for list item,
1141:08 - inside of which you can put your words.
1141:10 - So there's my foo, there's
my bar, there's my baths.
1141:13 - And, again, notice that VS Code
is finishing my thought for me.
1141:16 - But notice the hierarchy, open
UL, open LI, close LI, open LI,
1141:21 - close LI, open LI, close LI, close UL.
1141:24 - So it's sort of done
in reverse order here.
1141:27 - Let me go back to my browser, reload
the same page, List.html, and voila,
1141:33 - a default bulleted list, that
still seems to be in Arabic.
1141:36 - What if I want this list to be numbered?
1141:38 - Well, you can probably guess.
1141:39 - If you don't want an unordered list, but
an ordered list, what tag should I use?
1141:43 - AUDIENCE: OL.
1141:44 - SPEAKER 1: OL, sure, so let's try that.
1141:46 - Not always that easy as just
guessing, but in this case,
1141:49 - OL is going to do the trick.
1141:51 - Let me go back to my other browser.
1141:52 - Let me reload the page, and now it's
going to automatically number for me.
1141:55 - It's a tiny thing, but
this is actually useful
1141:58 - if you have a very long
list of data, and maybe you
1142:00 - might add some things in the
middle, the beginning, or the end.
1142:02 - It would just be annoying to
have to go and renumber it.
1142:04 - The computer is doing it
for us by, instead, just
1142:07 - numbering from top to bottom here.
1142:10 - All right, what about
another type of layout,
1142:12 - not just paragraphs, not just
lists, but what about tabular data?
1142:14 - You've got some research
data you want to present,
1142:17 - some financial data you want to present,
a phone book that you want to present.
1142:20 - How might we go about laying
out data, a la a table?
1142:23 - Well, let me create a
file called Table.html,
1142:26 - and I'll just copy paste
where we started earlier.
1142:28 - Let me start to close
some of these other files.
1142:31 - And in Table.html, this is
going to be a bit more HTML,
1142:34 - but I'm going to go ahead and do this.
1142:36 - Table and close table, tables
can have table headings.
1142:40 - So T head is the name of that tag, and
tables can have T bodies, table bodies.
1142:45 - So I'm going to add that tag.
1142:47 - And this is a common technique,
sort of start your thought,
1142:49 - finish your thought, and then go
back and fill in what's in between.
1142:52 - What do I want to put in this table?
1142:54 - How about a bunch of names and numbers.
1142:58 - So, for instance, like left
column name, right column number.
1143:02 - So let's create a table row,
with what's called the TR tag.
1143:05 - Let's create a table heading with
the TH tag, and let's say name here.
1143:10 - Let's create another table
heading called number here.
1143:14 - And all of that, to be
clear, is in one table row.
1143:17 - Meanwhile, in the table body,
let me create another table row,
1143:21 - but this time, it's not a heading.
1143:23 - Now I'm in the guts of my table.
1143:24 - Let's do table data, which is synonymous
with like the cell of the table,
1143:28 - in like an Excel spreadsheet
or Google spreadsheet.
1143:30 - In this TD, I'm going to
say like Carter's name,
1143:33 - and then lets grab Carter's number
from our past demo, 617-495-1000.
1143:39 - Then let's put me into the mix, and
I'll go ahead and copy paste here,
1143:43 - which often is not good.
1143:44 - But we'll see that there's a lot
of shared structure with HTML.
1143:47 - Let me go ahead and do mine,
949-468-2750, and now save this page.
1143:53 - So we're getting to be
a lot of indentation.
1143:56 - I'm using four spaces by default.
Some people use two spaces by default.
1143:59 - So long as you're consistent,
that's considered good style.
1144:02 - But let me go back to my
browser here, and hit back.
1144:04 - That then brings me to my
directory listing again.
1144:07 - Here's Table.html, and this
is not that interesting yet.
1144:10 - But you can see that there's
two columns, name and number.
1144:13 - Because it's a table heading, TH,
the browser made it boldfaced for me.
1144:18 - In there, in the table, are two
rows below that, Carter and David.
1144:22 - It's a little, oh, I forgot my
number one, sorry about that.
1144:25 - One and one, it's not the
prettiest table, right?
1144:28 - I feel like I kind of
want to separate things
1144:30 - a little more, maybe put
some borders or the like.
1144:32 - But with HTML alone, I'm really
focusing on the structure alone.
1144:36 - So we'll make this prettier soon.
1144:37 - But for now, this is how you
might lay out tabular data.
1144:41 - All right, let me pause here just
to see if there's any questions.
1144:44 - But, again, the goal right now
is just to kind of throw at you
1144:46 - some basic building blocks, that, again,
can be easily looked up in a reference.
1144:49 - But we're going to start
stylizing these things soon, too.
1144:53 - Yeah, in the middle.
1144:54 - AUDIENCE: How to indent?
1144:55 - SPEAKER 1: How do you indent paragraphs?
1144:57 - Really good question.
1144:58 - For that, we'll probably
going to want something
1144:59 - called CSS, Cascading Style Sheets.
1145:01 - So let me come back to
that, in just a little bit.
1145:03 - For the stylization of these things,
beyond the basics, like big and bold,
1145:06 - we're going to need a
different language altogether.
1145:10 - All right, well, let's
now create what the web
1145:13 - is full of, which is like
photographs and images and the like.
1145:17 - Let me go ahead and create a new file
called Image.html, and let me go ahead
1145:22 - and change the title
here to be, say, Image.
1145:25 - And then, in the body of this page,
let's go ahead and put an image.
1145:29 - The interesting thing about an
image is that it's actually not
1145:31 - going to have a start tag and an end
tag, because that's kind of illogical.
1145:35 - Like, how can you start an image
and then eventually finish it?
1145:38 - It's either there or it isn't.
1145:39 - So some tags do not have end tags.
1145:42 - So let me do image, IMG,
source equals Harvard.jpeg.
1145:49 - And let me go ahead, and,
in my terminal window,
1145:51 - I actually came with a photo of Harvard.
1145:54 - Let me grab this for just a second.
1145:57 - Let me grab Harvard.jpeg and
put it into my directory,
1146:01 - pretend that I downloaded
that in advance.
1146:03 - And so I'm referring
to now a file called
1146:06 - Harvard.jpeg, that apparently is in
the same folder as my Image.html file.
1146:12 - If this image were on the
internet, like Harvard server,
1146:15 - I could also say like
HTTPS://www.Harvard.edu/FolderName,
1146:21 - whatever it is, /Harvard.jpeg, but
if you've in advance uploaded a file
1146:25 - to your own, the Scode environment,
like I did before class,
1146:28 - by dragging and dropping this
whole file, this photo of Harvard,
1146:32 - you can just refer to it
relatively, so to speak.
1146:35 - This would be the same thing
as saying ./Harvard.jpeg,
1146:38 - go to the current directory and
get the file called Harvard.jpeg.
1146:41 - But that's unnecessary to type.
1146:43 - For accessibility purposes, though,
for someone who's vision-impaired,
1146:47 - it's ideal if we also give this
an alternative text, something
1146:51 - like Harvard University,
in the so-called Alt tag,
1146:55 - and this is so that
screen readers will recite
1146:57 - what it is the photo is,
for folks who can't see it.
1146:59 - And if you're just on a slow
connection, sometimes you'll
1147:02 - see the text of what
you're about to see,
1147:04 - before the image itself downloads,
especially on a mobile device.
1147:07 - So let's now go back to my open browser
tab, and let's look in the directory.
1147:12 - I now have Harvard.jpeg, which I
downloaded in advance, and Image.html.
1147:16 - Let me click on Image.html,
and here we have
1147:20 - a really big picture of Memorial
Hall, the building we're currently in.
1147:25 - Suffice it to say I should probably fix
this and maybe make it only so wide.
1147:29 - But to do that, we're going to probably
want to use this other language, CSS.
1147:33 - There are some historical
attributes that you can still
1147:36 - use to control width and
height, and so forth.
1147:39 - But we're going to do it
the better way, so to speak,
1147:41 - with a language designed for just that.
1147:44 - How about a video, though.
1147:45 - I also came prepared with,
let me grab another file here,
1147:50 - let me grab a file called
Halloween.mp4, which is an MPEG file.
1147:55 - And let me go ahead and change this
now to be a file called Video.html.
1148:02 - I'll change my title to be Video.
1148:04 - And let's go ahead and now
introduce another tag, a video tag,
1148:07 - open bracket video, and then let me go
ahead and close that tag proactively.
1148:13 - And then inside of the video tag,
you can say the source of the video
1148:17 - is going to be specifically
Halloween.mp4, the type of this file,
1148:22 - I know, is Video/mp4, because I looked
up its content type or MIME type.
1148:27 - And the video tag actually
has a few attributes.
1148:29 - I can have this thing autoplay.
1148:31 - I can have it loop forever.
1148:33 - I can mute it, so that there's no
sound, which is necessary nowadays.
1148:36 - Most browsers, to prevent ads, don't
autoplay videos, if they have sound.
1148:41 - So if you mute your video, it
will autoplay, but presumably not
1148:44 - annoy users.
1148:45 - And let me set the width of this thing
to be like, oh, 1280 pixels wide.
1148:49 - But I can make it any size I want.
1148:51 - So I know this just from having
looked up the syntax for this tag.
1148:55 - But notice one curiosity.
1148:57 - Sometimes attributes don't have values.
1148:59 - They're empty attributes.
1149:01 - They're just single words,
autoplay, loop, muted,
1149:04 - and that kind of makes
sense for any attribute that
1149:06 - really does what it says.
1149:08 - Like, it doesn't make sense
to say muted equals something.
1149:11 - Like it's either muted or not.
1149:12 - The attribute is there or not.
1149:14 - Similarly, for these others, as well.
1149:16 - So let me go back to my other browser
tab, reload the directory listing.
1149:19 - There is both my mp4
and also Video.html,
1149:24 - which is the web page that embeds it.
1149:26 - And this is actually a video that was
just on Harvard's website yesterday,
1149:29 - and it was amazing.
1149:30 - So we included it in this demo here.
1149:35 - This is the video that was on
Harvard.edu last night, same photo.
1149:41 - But you can see here that
an image alone probably
1149:44 - would not have the same effect.
1149:45 - This is actually a movie, a small
video file that's now looping.
1149:48 - Now there's some artifacts here, like
there's a white border around the top.
1149:51 - I feel like it'd be
nice to fill the screen.
1149:53 - But again, we'll come back to a language
that can allow us to do exactly that.
1149:58 - Well, it's not just
videos like this, that you
1150:00 - might want to put into a web page.
1150:01 - Let me create another
file called iFrame.html.
1150:06 - If you've ever poked around with, if
you have your own YouTube account,
1150:09 - or if you had your own blog or
WordPress site, or Wix or Squarespace,
1150:12 - you might have been in the
habit of embedding videos
1150:14 - in websites, using like
embedded YouTube players.
1150:17 - Well, this is possible, too, using
what's called an inline frame,
1150:21 - an iFrame.
1150:22 - And an iFrame is just a tag
that is literally iFrame.
1150:25 - It has source equals,
and then a URL, and if it
1150:28 - happens to be a YouTube video, there's
a certain URL format you need to follow,
1150:32 - per YouTube's documentation.
1150:33 - So you might do www.youtube.com, embed,
and then here's an ID of a video.
1150:41 - So this is essentially what we do, if
we want to embed CS50's own lecture
1150:47 - videos, in the course's website, or
the video player does literally this.
1150:50 - If I want to allow full screen,
I can add this attribute, too,
1150:53 - that I know exists, by just
having checked the documentation.
1150:56 - And if I now go back to my browser
here, reload my directory listing,
1151:00 - there's iFrame.html.
1151:02 - It's not going to fill
the screen, because I
1151:03 - haven't customized the aesthetics yet.
1151:05 - But it does seem to embed a tiny little
video there for you to play with later,
1151:10 - if you'd like.
1151:10 - So we could change the width, change
the height, get rid of that margin,
1151:13 - and so forth.
1151:14 - But an iFrame is a way of embedding
someone else's web page in your web
1151:19 - page, if they allow
it, so as to create all
1151:21 - the more of an interactive experience
for them on, say, your site.
1151:25 - All right, well, the web is, of
course, known for things like links.
1151:28 - Let's go ahead and create
a file called Link.html.
1151:32 - And if we want to create a web page that
actually links from itself somewhere
1151:35 - else, let's go ahead and do this,
something very simple like visit
1151:40 - Harvard.edu period.
1151:44 - Now, in like Facebook, Instagram, a lot
of websites nowadays, if you just type
1151:48 - in a domain name, or a
fully qualified domain name,
1151:50 - it automatically becomes a link.
1151:52 - That's because those websites have
code in them that automatically
1151:56 - detects something that looks like a
URL, and turns it into a proper link.
1152:00 - HTML itself does not do that for you.
1152:02 - And so if I go back to my web
page here, click on Link.html,
1152:06 - if you type visit
Harvard.edu period, that's
1152:09 - all you're literally going to see.
1152:11 - But instinctively, even if you've
never written HTML before, what should
1152:15 - we probably do here
to solve this problem?
1152:19 - What could we do to solve this problem.
1152:20 - What do I probably want to add.
1152:22 - Yeah.
1152:22 - AUDIENCE: Surround your--
1152:24 - SPEAKER 1: Yeah, so I want to surround
the URL with some kind of link text.
1152:27 - And you wouldn't necessarily
know this until someone told you,
1152:30 - or you looked it up, but the tag for
creating a link is somewhat weirdly
1152:33 - called the A tag for anchor.
1152:35 - It has an attribute called
HREF for hyper-reference,
1152:39 - which is like a link in
the virtual world to a URL.
1152:42 - So let me type in Harvard's
full and proper URL here.
1152:45 - Then I'm going to close the tag.
1152:48 - And then I can still say Harvard.edu,
and make that what the human sees.
1152:53 - But the place they're going to go
should be a full URL protocol and all,
1152:58 - HTTP or HTTPS, and all.
1153:00 - Now if I go back here
and reload the page,
1153:03 - now it automatically gets underlined.
1153:05 - It happens to be purple by default. Why?
1153:07 - Because we visited
Harvard.edu a few minutes ago.
1153:09 - So my browser, by default, is indicating
in purple that I've been there before.
1153:12 - But now I have a link
that I can click on,
1153:14 - and if I hover over it but don't click,
you'll see that, in most browsers,
1153:18 - there's a little clue as to where
you will go if you click subsequently
1153:22 - on this link.
1153:24 - And without going too
far down a rabbit hole,
1153:26 - but to tie together our discussion
of cybersecurity recently,
1153:29 - what if I were to do
something like this.
1153:32 - Right now you have the beginnings
of a phishing attack of sorts,
1153:37 - P-H-I-S-H-I-N-G, whereby you can
create clearly a web page, or, heck,
1153:42 - even an email using HTML, that tells
the user they're going to go one place,
1153:46 - but they're really going to
go someplace else altogether.
1153:49 - And that is the essence of
phishing attacks these days.
1153:52 - If you've ever gotten a bogus
email pretending to be from PayPal
1153:55 - or your bank or some
other website, odds are
1153:57 - they've just written HTML
that says whatever they want,
1154:00 - but the underlying tags might
do something very different.
1154:04 - And so having the instinct to look
in the bottom left hand corner,
1154:06 - or be a little suspicious when you're
just told blindly to click on a link,
1154:10 - it's this easy to socially
engineer people, that is,
1154:13 - deceive them, by just saying one
thing and linking to another.
1154:18 - Well, what if I want to link my page
to another page I already created?
1154:22 - Well, if I want to link
to that photo of Harvard,
1154:25 - I can just do HREF = equals quote
unquote and the name of a file,
1154:28 - in my same account, that
is itself a web page.
1154:32 - So this is how you can create
relative links, multi-page web
1154:35 - pages, multi-page websites, yourself.
1154:38 - So if I now reload this
page, hover over Harvard.edu,
1154:41 - you'll see in the bottom left
hand corner a very long URL.
1154:45 - But that's because I'm in code
spaces right now, VS Code,
1154:48 - and it's appending automatically
to the end of my current URL
1154:51 - the file name, Image.html.
1154:53 - But this should work.
1154:54 - When I click on this, I
go immediately to that
1154:57 - file we created earlier, with a
crazy, big version of the image.
1155:01 - But that's just a way
that one page on a website
1155:03 - can link to another page on a website.
1155:07 - Let's do one other thing here,
making things more responsive,
1155:11 - because, in fact, that wasn't a
particularly responsive website.
1155:14 - Responsive means responding to the
size of the user's device, which
1155:17 - is so important when someone
might be on a screen like this,
1155:20 - or on a screen like this these days.
1155:22 - There are special tags we can use to
tell the browser to modify its display,
1155:26 - based on the hardware.
1155:28 - So let me create a file
called Responsive.html.
1155:32 - I'm going to copy/paste some starting
point here, call this title Responsive.
1155:36 - And let me go ahead and just grab, let
me grab some of that lorem ipsum text
1155:40 - from before, just so that we have a
sizable paragraph to play with here.
1155:46 - And let me go ahead and
grab this text here.
1155:50 - And I'm just going to paste
this into the body of this page.
1155:53 - And that's it.
1155:54 - So I just have a big paragraph,
at the moment, inside of my body.
1155:57 - Let me go back to my browser.
1155:59 - Let me open up this file,
called Responsive.html,
1156:02 - to make the point that
it is not yet responsive.
1156:05 - Let me go ahead and
click on Responsive.html.
1156:07 - That looks fine.
1156:08 - But here's another trick you can do,
using Chrome or Edge or other browsers
1156:12 - these days.
1156:12 - You can pretend to be another device.
1156:14 - Let me go to View, developer,
developer tools again.
1156:19 - Last time we used this to
use the Network tab, which
1156:21 - was kind of interesting, because we
could see what the underlying network
1156:24 - traffic is.
1156:25 - But notice, we can also click on
this icon, in Chrome, at least,
1156:29 - that looks like a mobile phone.
1156:31 - I can turn my laptop into what looks
like a mobile device by clicking this.
1156:36 - I'm going to click the dot dot dot
menu over here, and just move the dock.
1156:39 - Instead of on the bottom,
where it might be by default,
1156:41 - I'm going to move it
to the right hand side.
1156:43 - So that now on the left,
you see what looks more
1156:45 - like the shape of a vertical phone.
1156:47 - And, in fact, if I go
to my dimensions here,
1156:49 - I'll choose something like
iPhone X, so a few years back.
1156:53 - Here's what that same website might
look like on an iPhone X. You know,
1156:57 - that looks pretty damn
small, to be able to read it.
1157:01 - And that's because the
website has not automatically
1157:03 - responded to the fairly narrow
dimensions of the iPhone
1157:07 - in question, or Android
device, or whatnot.
1157:09 - So let me go ahead and do this.
1157:11 - Let me go back into my code.
1157:13 - And let me go into the head of
the page, and for the first time,
1157:16 - add another tag up here.
1157:18 - This word is now all over
the internet, but there
1157:20 - is a metatag that is
called, that allows you
1157:23 - to specify the name of some kind
of configuration detail here,
1157:27 - or property, if you will.
1157:28 - Viewport is the technical term
for the rectangular region
1157:31 - that the human sees in a browser.
1157:32 - It's essentially the body of the
page. but only the part the human
1157:35 - is currently seeing.
1157:37 - And you can specify the
content of the viewport
1157:39 - should have an initial scale of 1.
1157:41 - So it shouldn't be zoomed in or out.
1157:43 - And the width that the
browser should assume
1157:46 - should be equal to the device's width.
1157:48 - These are sort of magical statements
that you just have to know
1157:51 - or copy/paste or transcribe, that
just express, to the browser,
1157:55 - assume that the width of the page is the
same thing as the width of the device.
1157:59 - Don't assume the luxury of a
big laptop or desktop computer.
1158:03 - Now, making only that change, let
me go back to my pretend iPhone
1158:08 - here, using Chrome's developer tools.
1158:10 - Let me reload the page.
1158:13 - And now, it's not very effective on this
screen, if I were showing you this on,
1158:18 - is there--
1158:20 - well, there we go.
1158:21 - Let's do this.
1158:22 - There we go.
1158:23 - So if I zoom in to 100%, this would be
on an actual physical device, much more
1158:28 - readable than it would
have been a moment ago,
1158:30 - even though I realized that demo
was not necessarily persuasive.
1158:33 - But it's as simple as
telling the browser
1158:34 - to resize the thing to
the width of the page.
1158:38 - All right, let me pause here to see
if there's any questions, because that
1158:41 - feels like enough HTML tags.
1158:43 - We'll add just a couple of more in.
1158:45 - But for the most part,
like HTML tags are
1158:47 - things you Google and figure out over
time, just to build up your vocabulary.
1158:51 - The basic building blocks
are tags, attributes.
1158:54 - Some attributes have values.
1158:55 - Some do not.
1158:56 - And that's sort of the
structure of HTML in essence.
1159:00 - Questions on any of these, though.
1159:01 - Yeah.
1159:02 - AUDIENCE: Do attributes have an order?
1159:03 - SPEAKER 1: Do attributes have an order?
1159:05 - No, attributes can be in any
order, from left to right.
1159:08 - I tend to be a little nit-picky,
and so I alphabetize them,
1159:11 - if only because then I can easily
spot if something's missing,
1159:14 - if it's not there alphabetically.
1159:16 - Most people on the internet
don't seem to do that.
1159:21 - Yeah, in the middle.
1159:23 - Version.
1159:23 - Yeah, good question.
1159:24 - I mentioned that HTML
is starting to replace
1159:26 - other languages for user interfaces.
1159:28 - And it's not just HTML alone.
1159:30 - It's HTML with CSS, with JavaScript,
both of which we'll get a taste of here
1159:34 - today.
1159:35 - That rather has been the
trend for portability,
1159:37 - and the ability for companies,
for individual programmers,
1159:40 - to write one version
of an app and have it
1159:42 - work on Android devices and iPhones
and Macs and PCs, and the like.
1159:47 - It is very expensive.
1159:48 - It is very time-consuming to
learn a language like Java
1159:51 - and write an Android app, learn
another language called Swift
1159:54 - and make an iOS app, not to
mention make them look and behave
1159:56 - the same, not to
mention fix a bug in one
1159:59 - and then remember to
fix it in the other.
1160:00 - I mean, this is just very painful
and time-consuming and costly.
1160:05 - So this standardization on
HTML, CSS, and JavaScript,
1160:09 - even for mobile apps and web apps,
has been increasingly compelling,
1160:13 - because it solves problems like that.
1160:16 - All right, so let's go ahead and now do
something that's finally interactive.
1160:19 - All of these pages thus
far are really just tastes
1160:22 - of static content, content
that does not change.
1160:25 - Well, let's go ahead and do this.
1160:27 - Let me introduce one other
format of URLs, which looks
1160:31 - a little something like it did before.
1160:33 - So slash path, but it could
actually be something like this,
1160:36 - slash path question
mark, key equals value.
1160:40 - You might not have noticed,
or cared to notice,
1160:42 - the URLs in your URL bar every day.
1160:44 - But these things are everywhere.
1160:46 - Often when you type into a
search engine like Google
1160:49 - a search query, whatever you
just typed ends up in the URL.
1160:52 - When you click on a link that
contains some information,
1160:55 - there might be a question mark,
and then some keys and values.
1160:57 - There might be an ampersand
and more keys and values.
1161:00 - Here, again, is that very
common programming paradigm
1161:02 - of just associating keys with values.
1161:05 - We can see this as follows.
1161:07 - Let me actually go to
google.com, in a browser
1161:11 - here, and let me search for something
the internet is filled with, cats.
1161:16 - Enter, notice now that my
URL changed from google.com
1161:20 - to google.com slash
search question mark,
1161:23 - Q equals cats, ampersand
and then a bunch of stuff
1161:27 - that I don't understand or know.
1161:28 - So let's just delete it for now, and
leave it with the essence of that URL.
1161:33 - And that still works.
1161:34 - If I zoom out here, years ago
you would get pictures of cats.
1161:37 - Now you get videos of the movie.
1161:41 - And then that top query
there, is Cats a bad movie.
1161:44 - But we can also, of
course, click on Images.
1161:46 - And there are the
adorable cat, creepy cats.
1161:49 - All right, this didn't used to
happen when we searched for cats.
1161:52 - But anyhow, the point is that the URL
changed to include the user's input.
1161:57 - And this is such a simple,
but such a powerful thing.
1162:00 - This is how humans
provide input to servers.
1162:04 - They don't manually create the
URLs, like I sort of just did.
1162:07 - But when you fill out a form
on the web and you hit Enter,
1162:10 - typically the URL suddenly
changes to include
1162:13 - whatever you typed in,
in the URL, assuming
1162:16 - the form is using the verb GET.
1162:18 - That's not ideal.
1162:20 - If you're typing in a
username, a password,
1162:22 - a credit card information, because you
don't want the next person to sit down
1162:25 - at your laptop to see literally
everything you typed in,
1162:27 - saved in your history.
1162:29 - So there's another verb, POST,
that can hide all of that.
1162:32 - And it's just sent a little differently.
1162:33 - But things like this are
typically sent via GET,
1162:36 - and what that means underneath the
hood is that your browser is just
1162:39 - making a request like this, Get/search?
1162:43 - Q equals, whatever you typed in, the
host that you visited, and so forth.
1162:47 - And hopefully what comes back is a page
full of search results, including cats.
1162:52 - And what's interesting here now is, if
I go back to VS Code on my own computer,
1162:57 - and let me go ahead and create a
file called, how about Search.html.
1163:04 - In Search.html, I'm going to start
with some copy/paste from before,
1163:09 - change my title to search.
1163:11 - And in the body of this page, I'm
going to introduce a form tag.
1163:14 - And in this form tag, I'm going
to have a couple of inputs.
1163:18 - And the types of inputs are going to
be text, and the type of the input
1163:25 - is going to be submit.
1163:28 - And this isn't that
interesting yet, but let's see
1163:30 - what is happening in the page itself.
1163:32 - Let me go back to my directory listing.
1163:34 - Let me click on Search.html.
1163:36 - I seem to have the beginning
of my own search engine.
1163:39 - It's not very interesting.
1163:40 - It's just a text box
and a submit button.
1163:43 - But let's finish my thoughts here.
1163:45 - So let's specifically give
this text box a name of Q,
1163:49 - which, if you roll back to the late '90s
when Larry and Sergey of Google fame
1163:53 - created Google.com, Q represented query,
the query that the human's typing in.
1163:58 - So the name of this
text box shall be text,
1164:01 - shall be Q. The form is
going to use what method?
1164:05 - Technically it uses GET
by default, but I'll
1164:07 - be explicit and say method
equals quote unquote "get."
1164:10 - Stupidly, it's lowercase in HTML, even
though what's in the envelope is indeed
1164:14 - uppercase, by convention.
1164:16 - The action of this form, specifically,
would ideally go to my own server.
1164:21 - But we don't really have time
today to implement Google itself.
1164:24 - So we're just going to send the
user's request to google.com/search.
1164:28 - So I'm creating a form,
the action of which
1164:31 - is to send the data to Google's slash
search path, using the GET method.
1164:35 - It's going to send an input called Q,
whenever I click this Submit button.
1164:41 - Let me go back to the
browser, reload the page.
1164:44 - Nothing seems to have changed yet,
but, if I search for, let me zoom out,
1164:48 - so we can see the URL bar.
1164:50 - Right now I'm in Search.html.
1164:53 - If I zoom out and search for
cats now and click Submit,
1164:57 - I'm whisked away to google.com.
1164:59 - But notice that the URL is
parameterized, with those key value
1165:02 - pairs, that key value pair.
1165:04 - And I get back a whole
bunch of cat results.
1165:06 - And I can very easily now
make this a little prettier.
1165:08 - Right now, it's not ideal that like
the human has to move their cursor
1165:11 - and click in the box.
1165:13 - And it's a little obnoxious
that autocomplete is enabled.
1165:15 - If I don't want to
search for cats anymore,
1165:17 - well, according to HTML's documentation,
I can say something like this.
1165:21 - Autocomplete equals off, to turn
off autocomplete, auto focus
1165:25 - to automatically put the
cursor inside of that text box.
1165:28 - If I want some explanatory text, I can
put placeholder text like quote unquote
1165:32 - "query."
1165:33 - And now if I go back to
this page and reload,
1165:35 - now it's a little more user-friendly.
1165:37 - You see query in kind of gray text.
1165:39 - The cursor is already
there and blinking.
1165:41 - I don't have to even move my cursor.
1165:43 - I can search for dogs now, and you
didn't see any autocomplete at all.
1165:46 - Hit enter to submit, and
now I'm searching for,
1165:48 - there we go, adorable dogs, instead.
1165:51 - So what have I done?
1165:52 - I've implemented the front end of
Google.com, just not the back end.
1165:56 - To implement the back
end, we're obviously
1165:58 - going to need like a really big
database, maybe something like SQL.
1166:01 - We're going to need some code that like
searches the database for dogs or cats,
1166:05 - or anything else.
1166:06 - We're going to need Python
for something like that.
1166:08 - And in fact, that's the direction
we're steering next week,
1166:09 - when we implement that back end.
1166:11 - But today it's all about this front end.
1166:14 - Or any question, then, about forms,
these URL parameters, before we now
1166:20 - transition to making things look
a little prettier, with CSS?
1166:24 - And then we'll end by making
things a little more functional,
1166:27 - with JavaScript.
1166:29 - Anything at all?
1166:31 - No?
1166:31 - All right, so let's start to answer
a couple of the questions that
1166:35 - came up, by making these pages a
little more aesthetically interesting.
1166:40 - Let's go ahead now and introduce to
the mix one other language, as follows.
1166:45 - Let me go ahead and create
a file called Home.html,
1166:48 - as though I'm making a home
page for the very first time.
1166:51 - And in this page, I'm going
to give a title of Home.
1166:53 - And I'm just going to
have like three things.
1166:55 - First I'm going to have maybe
a paragraph of text up here
1167:00 - at the top, that says something
welcoming for my home page,
1167:03 - like my name, John Harvard, for
instance, or John Harvard's home page.
1167:06 - Then in the middle of the page,
I'm going to have some text like,
1167:10 - welcome to my home
page exclamation point!
1167:12 - And at the bottom of the page, I'm
going to have a final paragraph that
1167:16 - says something like copyright,
the copyright symbol, John
1167:19 - Harvard, or something like that.
1167:21 - All right, so it's like a web page
with three different structural areas,
1167:25 - made with text.
1167:26 - This isn't that interesting.
1167:27 - If I open this page called
Home.html, let me go ahead
1167:32 - and create three quick paragraphs,
a first paragraph for John Harvard.
1167:35 - Inside the middle, I'm going to say
something like welcome to my home page
1167:39 - exclamation point!
1167:40 - And at the bottom,
whoops, at the bottom,
1167:42 - a little footer that says
something like copyright,
1167:45 - a little simple copyright
symbol, and John Harvard's name.
1167:50 - All right, now let me reload the page.
1167:52 - And there we go.
1167:53 - It's a very simple, very underwhelming
web page that has three main sections.
1167:57 - Let's start to now stylize
this in an interesting way,
1168:00 - so that it's a little more
aesthetically pleasing.
1168:02 - First, these aren't really paragraphs.
1168:04 - They're sort of like areas of the page,
divisions, like the header is up here.
1168:08 - There's like the main part of my screen.
1168:09 - And then there's the
footer of my screen.
1168:11 - So paragraphs isn't quite
right, if these aren't really
1168:13 - paragraphs of texts.
1168:15 - I might more properly call
them divs or divisions
1168:17 - of the page, which is a very commonly
used tag in HTML, which just has
1168:21 - this generic rectangular region to it.
1168:24 - It does not do anything aesthetically,
no bold facing, no size changes.
1168:28 - It just creates an invisible
rectangular region, inside of which
1168:32 - you can start to style the text.
1168:34 - Or I can take this one step further.
1168:36 - There's some other tags in HTML,
known as semantic tags, that literally
1168:40 - have names that describe the
types of your page, which
1168:42 - is all the more compelling these
days for accessibility, too,
1168:45 - for screen readers, for search engines,
because now, a screen reader, a search
1168:49 - engine can realize that footer
is probably a little fluffy.
1168:52 - The header might be
a little interesting.
1168:54 - The main part of the page
is probably the juicy part,
1168:57 - that I want users to be able to search
for or read aloud, substantively.
1169:01 - So let's start to stylize
this page somehow.
1169:04 - Let's introduce a style
attribute in HTML,
1169:08 - inside of which is going to be
text like this, font size colon
1169:13 - large, text align colon center.
1169:16 - On Main, I'm going to add a
style attribute and say font size
1169:20 - medium, text align center.
1169:24 - And then on the footer, I'm going
to say style equals font size
1169:27 - small, text align center.
1169:32 - What's going on here?
1169:34 - Well, in blue is the
language we promised,
1169:36 - called CSS, for Cascading Style Sheets.
1169:39 - We're not really seeing the
Cascading Style Sheet of it yet.
1169:42 - But in blue here, notice is
another very common paradigm.
1169:46 - It's different syntax
now, but how would you
1169:48 - describe what you're
looking at here in blue?
1169:52 - This is another example of what
kind of programming convention?
1169:56 - AUDIENCE: Key value.
1169:57 - SPEAKER 1: Yeah, it's just
more key value pairs, right?
1170:00 - It'd be nice if the world standardized
how you write key value pairs,
1170:03 - because we've now seen equal signs
and arrows and colons and semicolons,
1170:07 - and all this.
1170:07 - But it's just different
languages, different choices.
1170:10 - The key here is font-size,
the value is large.
1170:13 - The other key is text-align,
the colon, the value is center.
1170:16 - The semicolon just separates
one key value pair from another.
1170:20 - Just like in the URL, the ampersand
did, in the context of HTTP.
1170:24 - The designers of CSS
used semicolons instead.
1170:27 - Strictly speaking, this
semicolon isn't necessary.
1170:30 - I tend to include it just for
symmetry, but it doesn't matter,
1170:32 - because there's nothing after that.
1170:34 - This is a bit of a weird example.
1170:36 - This is the co-mingling of
CSS inside of JavaScript.
1170:41 - So as of now, you can use the CSS
language inside of the quote marks
1170:46 - in the value of a style attribute.
1170:49 - We did something a little
similarly last two weeks,
1170:52 - a week plus ago, when we included
some SQL inside of Python.
1170:57 - So again, languages can kind
of cross barriers together.
1170:59 - But we're going to clean
this up, because this
1171:01 - is going to get messy quickly,
certainly for large web pages, the size
1171:04 - of Harvard's or Yale's, or the like.
1171:07 - So let's see what this looks like.
1171:09 - Let me go back to my browser
window here, reload the page.
1171:13 - And it's not that different.
1171:14 - But it's indeed centered, and it's
indeed large, medium, and small text.
1171:19 - And let me make one refinement.
1171:20 - The copyright symbol
actually can be expressed,
1171:22 - but there's no key on
my US keyboard here.
1171:25 - I can actually magically say
ampersand hash 169 semicolon,
1171:30 - using what's called an HTML entity.
1171:33 - It turns out there are numeric
codes, with this weird syntax, that
1171:36 - allow you to specify symbols that
exist in Macs and PCs and phones,
1171:40 - but that don't exist on most keyboards.
1171:42 - If I reload the page now, now
it's a proper copyright symbol.
1171:46 - So minor aesthetic, but it
introduces us to these HTML entities.
1171:50 - So even if you've never
seen CSS before, you
1171:53 - can probably find something
kind of dumb about what
1171:56 - I did here, like poor design.
1171:58 - It is correct, if my goal was small,
medium, and large, bottom up, what
1172:02 - looks like a bad design,
perhaps, even if you've never
1172:07 - seen this language before.
1172:08 - Yeah.
1172:09 - AUDIENCE: Same
1172:09 - SPEAKER 1: Yeah, I've used
the same style three times,
1172:12 - like copy/paste, or typing the
exact same thing again and again.
1172:14 - It has rarely been a good thing.
1172:17 - Well, here's where we can take
advantage of the design of CSS,
1172:21 - because it supports what
we might call inheritance,
1172:24 - whereby children inherit the properties,
the key value pairs of their parents
1172:29 - or ancestors.
1172:30 - And what that means is, I can do this.
1172:32 - Let me get rid of this text align.
1172:34 - Let me get rid of this text align.
1172:36 - Let me get rid of this one.
1172:37 - I could get rid of the semicolon,
too, but I'll leave it for now.
1172:40 - And let me add all of that style
to the parent element, the body,
1172:46 - so that it sort of cascades down to the
header, the main, and the footer tags
1172:51 - as well.
1172:52 - And let me close my quotes there, too.
1172:54 - Now, if I go back to my browser
and hit reload, nothing changes.
1172:58 - But it's a little
better designed, right?
1173:00 - Because if I want to change the text
alignment to maybe be right aligned,
1173:03 - I can now reload the page, and
voila, now it's over there.
1173:06 - I change it in one place, not
in three different places.
1173:08 - So that would seem to be
marginally better design.
1173:11 - And could we do this
any more differently?
1173:14 - Well, it's not that elegant that
it's all just in line with my HTML.
1173:20 - This generally tends to
be bad practice, where
1173:22 - you co-mingle your HTML and your
CSS, especially since some of you
1173:26 - might be really good at laying
out the structure of web pages
1173:28 - and the content and the data, and you
might have a horrible sense of design
1173:31 - or just not care about the aesthetics.
1173:32 - You might work with a
designer, an artist,
1173:34 - who's much better at all of
these fine tunings aesthetically.
1173:37 - Wouldn't it be nice if you could work
on the HTML, they could work on the CSS.
1173:41 - And you don't have to
somehow like literally
1173:43 - edit the same lines
of code as each other.
1173:46 - Well, just like we can move
stuff into header files in C,
1173:50 - or packages in Python, we
can do the same in CSS.
1173:53 - So I'm actually going
to go ahead and do this.
1173:55 - Let me get rid of all of
these style attributes,
1173:58 - and let me now start to practice a
convention of not co-mingling CSS
1174:03 - with my HTML.
1174:05 - Let me instead move it into the
head of the page, in a style tag,
1174:10 - instead of an attribute.
1174:11 - This is one of the rare
examples where there
1174:14 - are attributes that have the
same names of tags as vice versa.
1174:16 - It's not very common,
but this one does exist.
1174:19 - Here's a slightly different syntax for
expressing the same key value pairs.
1174:22 - If I want to apply CSS properties,
that is, key value pairs,
1174:26 - to the header of the page, I say
header, and then I use curly braces,
1174:31 - and inside of those I say
font-size large, text-align center.
1174:38 - Then, if I want to apply some properties
to the main section of the page,
1174:42 - I again do font-size, say, medium,
and then I can do text-align center.
1174:47 - Then, lastly, on the
footer of the page, I
1174:49 - can assign some properties like
font-size small, and then text-align
1174:55 - center semicolon.
1174:57 - And I don't have to do
anything more in my HTML.
1175:00 - It all just represents
the structure of my page.
1175:03 - But, because of this style
tag in the head of the page,
1175:06 - the browser knows in
advance that the moment it
1175:08 - encounters a header tag, a
main tag, or a footer tag,
1175:10 - it should apply those
properties, those styles.
1175:14 - If I reload the page, other
than it being recentered now,
1175:17 - there's no other changes.
1175:18 - All we're doing is sort of
iteratively improving the design here.
1175:21 - But now everything's
in the top of the file.
1175:24 - But there's still a bad design here.
1175:26 - What could I now do
that would be smarter?
1175:30 - Similar problem to before.
1175:32 - Yeah.
1175:33 - AUDIENCE: Create it.
1175:33 - SPEAKER 1: OK, create a
new file with just the CSS.
1175:35 - I like that.
1175:36 - Let's go there in just one second.
1175:37 - But even as we're here,
there's still a redundancy
1175:40 - we can probably chip away at.
1175:41 - Yeah, get rid of the text-align center
in three different places, which
1175:45 - doesn't seem necessary,
and perhaps someone
1175:47 - else, if I get rid of text-align center,
what should I add to my style tag
1175:53 - in order to bring it back, but
apply it to everything in the page?
1175:56 - And the page, if I scroll
down, looks like this, in HTML.
1175:59 - Yeah.
1176:00 - AUDIENCE: The body.
1176:01 - SPEAKER 1: Yeah, so the body tag.
1176:02 - So let me go ahead and say body.
1176:04 - And then in here, put text-align center.
1176:07 - And that, now, if I reload the
page, has no visual effect,
1176:10 - but it's just better
design, because now I
1176:12 - factored out that kind of commonality.
1176:14 - And so, just to make clear
what we've been doing here,
1176:16 - these are all, again, CSS
properties, these key value pairs.
1176:19 - And there's different types
of ways of using them.
1176:22 - And there's this whole taxonomy.
1176:24 - What we've been doing thus far are what
we're going to call type selectors,
1176:27 - where the type is the name of a tag.
1176:30 - And so it turns out there's
other ways, though, to do this.
1176:33 - And let's head in this direction.
1176:35 - Let's go ahead and maybe write
our CSS slightly differently,
1176:38 - because you know what would be nice.
1176:40 - I bet, after today, once I start
creating other files for my home page,
1176:44 - or John Harvard's home
page, I might want
1176:46 - to have centered text on other pages.
1176:48 - And I might want to have large
text or medium text or small text.
1176:52 - It'd be nice if I could reuse
these properties again and again,
1176:55 - and kind of create my
own library, maybe even
1176:57 - ultimately putting it
in a separate file.
1176:59 - So let me do this.
1177:00 - Instead of explicitly applying
text-align center to the body,
1177:04 - let me create a new
noun, or an adjective,
1177:07 - rather, for myself, called centered.
1177:09 - It has to start with a
dot, because what I'm doing
1177:12 - is inventing my own class, so to speak.
1177:14 - This has nothing to do with
classes in Java or Python.
1177:17 - Class here is this aesthetic feature.
1177:20 - And, actually, let me rename
these, to be dot large,
1177:22 - dot medium, and dot small.
1177:26 - What this is doing for me
is it's inventing new words,
1177:29 - well-named words, that I
can now use in this file,
1177:33 - or potentially in other web
pages I make, as follows.
1177:36 - I can now say, if I want
to center the whole body,
1177:39 - I can say class equals centered.
1177:41 - On the header tag, I can
say class equals large.
1177:45 - On the main tag I can
say class equals medium.
1177:48 - On the footer tag, I can
say class equals small.
1177:50 - But let me take this one step further.
1177:53 - As you suggested, why
don't I go ahead now
1177:56 - and let me actually get rid
of-- let me grab all of the CSS,
1177:59 - copy it to my clipboard.
1178:01 - Let me get rid of the style tag here,
and create a new file called Home.css,
1178:08 - and let me just save all of that same
text in a separate file ending in .css,
1178:13 - nothing else, no HTML whatsoever.
1178:15 - But let me go back to my
Home.html page, and this
1178:18 - is one of the most annoyingly named
tags, because it doesn't really
1178:21 - mean what it does, Link HREF
Home.css rel equals stylesheet.
1178:30 - So ideally we would have used the
link tag for links in web pages,
1178:33 - but this is link in the
sort of conceptual sense.
1178:36 - We're linking this file to this other
one, so that they work together,
1178:39 - using this hyper-reference,
Home.css, the relationship
1178:43 - of that file to this one
is that of stylesheet.
1178:46 - A stylesheet is a file
containing a whole bunch
1178:48 - of stylizations, a whole bunch
of properties, as we just did.
1178:52 - So here, too, it's
underwhelming the effect.
1178:54 - If I reload the page, nothing changed.
1178:57 - But now, I not only have
a better design here,
1179:01 - because I can now use those same classes
in my second page that I might make,
1179:06 - my third page, my fourth page, my bio,
my resume page, whatever it is I'm
1179:11 - making on my website here, I
can reuse those styles by just
1179:15 - including one line of code, instead of
copying and pasting all of that style
1179:19 - stuff into file after file after file.
1179:21 - And heck, if the rest
of the world is really
1179:24 - impressed by my centered class, and
my large and medium and small classes,
1179:28 - I could bundle this up, let other
people on the internet download it,
1179:31 - and I have my own library, my own CSS
library, that other people can use.
1179:35 - Why should you ever invent
a centered class again,
1179:37 - if I already did it for you,
stupid and small as this one is.
1179:41 - But it would be nice
now to package this up
1179:43 - in a way that's usable
by other people as well.
1179:47 - So this is perhaps the best
design, when it comes to CSS.
1179:51 - Use classes where you can, use
external stylesheets where you can,
1179:56 - but don't use the style attribute
where we began, which while explicit,
1180:00 - starts to get messy quickly,
especially for large files.
1180:06 - All right, any questions, then, on this.
1180:11 - No, all right, so
that's class selectors.
1180:13 - When you specify dot
something, that means
1180:16 - you're selecting all of the tags in the
page, that have that particular class,
1180:20 - and applying those properties.
1180:21 - So there's a couple of
others here, just to give you
1180:23 - a taste now of what's possible.
1180:25 - There's so much more that you can
actually do with HTML and CSS together.
1180:29 - Let me go ahead and open up a few
examples that I did here in advance.
1180:33 - Let me go ahead and open up VS Code.
1180:35 - And let me go ahead and copy
my source eight directory.
1180:43 - Give me one second to grab the source
eight directory for today's lectures,
1180:47 - so that I can now go into
my browser, go into some
1180:51 - of the pre-made examples
in source eight,
1180:53 - and let me open up paragraphs one here.
1180:57 - So here's something,
it's a little subtle.
1181:00 - But does anyone notice
how this is stylized?
1181:04 - This is just some generic
lorem ipsum text again.
1181:07 - But what's noteworthy
stylistically, a book might do this.
1181:12 - Yeah?
1181:13 - AUDIENCE: They're bigger.
1181:14 - SPEAKER 1: Yeah, the first
paragraph's a little bigger.
1181:15 - Why?
1181:16 - Who knows, it's just a stylistic
thing at the beginning of the chapter.
1181:18 - The first paragraph is bigger.
1181:19 - How did we do that?
1181:21 - Well, we can actually explore
this in a couple of ways.
1181:23 - One, I can obviously go into
VS Code and show you the code.
1181:26 - But, now, that we're using Chrome and
we're using these developer tools,
1181:29 - let's again go into them.
1181:30 - View developer, developer
tools, and now notice,
1181:33 - let me turn off the mobile feature,
and let me move the dock back
1181:37 - to the bottom, just so
that it's fully wide.
1181:39 - We looked at the Network tab before.
1181:41 - We looked at the mobile button before.
1181:44 - Now let me click on Elements.
1181:45 - What's nice about the Elements tab
is you can see a pretty printed
1181:49 - version of the web page's HTML,
nicely color-coded, syntax highlighted
1181:54 - for you, so that you can now henceforth
learn from, look at, the source
1181:58 - code, the HTML source code, of
any web page on the internet.
1182:02 - Notice that my own web page
here, it's not that interesting.
1182:05 - There's a bunch of paragraph
tags of lorem ipsum text.
1182:08 - But notice what I did.
1182:09 - The very first one, I gave an ID to.
1182:12 - This is something that you,
as a web designer, can do.
1182:14 - You can give an ID attribute
to any tag in a page,
1182:18 - to give it a unique identifier.
1182:20 - The onus is on you, not to
reuse the word, anywhere else.
1182:22 - If you reuse it, you've screwed up.
1182:24 - It's incorrect behavior.
1182:26 - But I chose an ID of
first, just so that I
1182:30 - have some way of referring to the
very first paragraph in this file.
1182:34 - If I look in the head of the
page, and the style tag here,
1182:37 - notice that I have hash first.
1182:40 - So just as I use dot for
classes, the world of CSS
1182:43 - uses a hash symbol to
represent IDs, unique IDs.
1182:46 - And what this is telling the browser,
whatever element has the first ID,
1182:51 - F-I-R-S-T, without the hash,
apply font-size larger to it.
1182:57 - And that's why the first paragraph,
and only the first paragraph,
1183:00 - is actually stylized.
1183:01 - If I actually go into
VS Code now, and let
1183:04 - me go into my source eight directory.
1183:06 - Let me open up Paragraphs1.html.
1183:09 - Here is the actual file.
1183:10 - If I want to change the color of that
first paragraph to green, for instance,
1183:14 - I can do color colon: green.
1183:16 - Let me close the developer
tools, reload the page.
1183:19 - And now that page is green as well.
1183:22 - You don't have to just use words.
1183:24 - You can use hexadecimal.
1183:27 - What was the hex code for green in RGB?
1183:31 - Like no red, lots of green, no blue.
1183:34 - So you could do 00 FF 00, using
a hash, which, coincidentally,
1183:38 - is the same symbol, but it
has nothing to do with IDs.
1183:41 - This is just how Photoshop and
web pages represent colors.
1183:44 - Let's go back here and reload.
1183:46 - It's the same, although it's a
slightly different version of green.
1183:48 - This is pure green here.
1183:50 - If I want to change it to red, that
would be, let's see, RGB FF 00 00,
1183:56 - and here I can go and reload.
1183:58 - Now it's first paragraph red.
1183:59 - This actually gets
pretty tedious quickly.
1184:01 - Like, if you're a web designer trying
to make a website for the first time,
1184:04 - it actually might be fun
to tinker with the website,
1184:06 - before you open up your editor
and you start making changes
1184:09 - and save and reload.
1184:10 - That's just more steps.
1184:11 - So notice what you can
do with developer tools,
1184:14 - too, in Chrome and other browsers.
1184:16 - When I highlight over this
paragraph, under the Elements tab,
1184:19 - notice that, one, it
gets highlighted in blue.
1184:22 - If I move my cursor, it
doesn't get highlighted.
1184:24 - If I move it, it gets highlighted.
1184:26 - So it's showing me what
that tag represents.
1184:29 - But notice over here on
the right, you can also
1184:32 - see all of the stylizations
of that particular element.
1184:35 - Some of them are built-in.
1184:37 - The italicized ones here at the
bottom means user agent stylesheet.
1184:40 - That means this is what Google makes
all paragraphs look like by default.
1184:44 - But in non-italicized
here, you see hash first,
1184:48 - which is my code, that I just changed.
1184:50 - And if I want to start tinkering with
colors, I can do like 00 00 FF Enter.
1184:55 - I changed it to blue.
1184:57 - But notice, if I go back to VS Code, I
didn't change my original VS Code code.
1185:02 - This is now purely client side.
1185:04 - And this is a key detail.
1185:05 - When I drew that picture
earlier of the browser going,
1185:08 - making a request to the cloud, the
server in the cloud and the response
1185:11 - coming back, the browser,
your Mac, your PC, your phone,
1185:14 - has a copy of all the HTML and
CSS, so you can change it here,
1185:18 - however you actually want.
1185:20 - And, for instance, you can
do this with any website.
1185:22 - Let's go, say, on a field trip
here, to how about Stanford.edu.
1185:29 - So here's Stanford's
website as of today.
1185:31 - Let's go ahead here
and let's see, there's
1185:34 - their admissions page,
campus life, and so forth.
1185:36 - Let me go ahead and view developer
tools on Stanford's page,
1185:41 - developer tools, elements,
you can see all of their HTML.
1185:45 - And notice it's collapsed,
so here is their header.
1185:48 - Here's their main part, and
I'm using my keyboard shortcuts
1185:51 - to just open and close the tags,
to dive in deeper and deeper.
1185:54 - Suppose you want to kind
of mess with Stanford,
1185:56 - you can actually like right
click on any element of a page,
1185:58 - or control click, Inspect, and that's
going to jump you automatically
1186:03 - to the tag in the Elements
tab that shows you that link.
1186:07 - And notice, if I hover over this
LI, notice Stanford's using a list,
1186:11 - as an unordered list from left to right.
1186:13 - But it doesn't have to be a
bulleted list top to bottom.
1186:16 - They've used CSS to change it to be
a list, from news, events, academics,
1186:20 - research, health care,
campus admission, about.
1186:22 - Well, so much for
admission, that's gone.
1186:25 - So now, if I close developer tools,
now it's gone from Stanford's website.
1186:29 - But, of course, what have I really done.
1186:32 - I've just like mutated
my own local copy.
1186:35 - So this is not hacking,
even though this might
1186:37 - be how they do it in TV and the movies.
1186:38 - It's still there if I reload the page.
1186:40 - But it's a wonderfully powerful way
to, one, just iterate quickly, and try
1186:44 - different things
stylistically, figure out
1186:46 - how you want to design
something, and two, just learn
1186:48 - how Stanford did something.
1186:50 - So, for instance, if I right click
or control click on admission again,
1186:53 - go to inspect, and let
me go to the LI tag.
1186:56 - Let me keep going up, up,
up, up, up to the UL tag.
1187:00 - There's going to be a lot going on here.
1187:02 - But notice, they have applied
all of these CSS properties
1187:06 - to that particular UL tag.
1187:08 - But notice, here, this is
how, it's something like this.
1187:11 - And we'd have to read more to learn
how this works, list style type none,
1187:15 - this is how they probably
got rid of the bullets.
1187:18 - And what you can do is just tinker.
1187:19 - Like, all right, well,
what does this do?
1187:21 - Well, let me uncheck it.
1187:22 - All right, didn't really change
anything, font weights, uncheck this,
1187:26 - there we go.
1187:26 - So now the margin is changed, the
padding around it has changed.
1187:30 - Let's get rid of this.
1187:31 - We can just start turning
things on and off, just
1187:34 - to get a sense of how
the web page works.
1187:35 - I'm not really learning
anything here so far.
1187:37 - Let me go to the LI here for, let's
go to the admissions one here.
1187:43 - Margin, there we go, OK.
1187:47 - So when there's a
display property in CSS,
1187:50 - that's apparently effectively changing
things from vertical to horizontal,
1187:53 - if I turn that off, now Stanford's
links all look like this.
1187:56 - And there are those bullets.
1187:57 - So again, just default styles,
that they've somehow overridden,
1188:00 - and a good web designer
just knows ultimately
1188:03 - how to do these kinds of things.
1188:06 - All right, how about a couple
of final building blocks,
1188:08 - before we'll take one more break.
1188:09 - And then we'll dive in with
JavaScript to manipulate this stuff
1188:12 - programmatically.
1188:13 - Let me go ahead and open up,
how about Paragraphs2 here.
1188:17 - Let me close this tab, let me go
into Paragraphs2, which is premade.
1188:21 - And this one looks
the same, except, when
1188:25 - I go ahead and inspect
this first paragraph,
1188:27 - notice that I was able
to get rid of the ID
1188:29 - somehow, which is just
to say, there's many,
1188:32 - many ways to solve
problems in HTML and CSS,
1188:34 - just like there is in C and Python.
1188:36 - Let me look in the head and
the style of the page now.
1188:39 - This is what we might call
another type of selector,
1188:45 - that allows us to specify
the paragraph tag,
1188:49 - that itself happens to
be the first child only.
1188:52 - So you can apply CSS to a very
specific child, namely first child.
1188:56 - There's also syntax for last
child, if just the first one
1188:58 - is supposed to look a little different.
1189:00 - So, here, I've just
gotten out of the business
1189:02 - of creating my own unique
identifier and, instead, I'm
1189:05 - using this type of selector as well.
1189:08 - Well, what more can we do?
1189:09 - Let me go into another example
here, called Link1.html,
1189:14 - and here we have a very simple
page that just says visit Harvard.
1189:17 - But notice it's purple
by default, because we've
1189:19 - been to Harvard.edu before.
1189:21 - Let's see if we can't maybe
stylize Harvard's links
1189:24 - to be a little different.
1189:25 - Let me go into Link version
2, now, which looks like this.
1189:30 - And now Harvard is very red.
1189:33 - How did I do that?
1189:33 - Well, let me right click
on it, click Inspect,
1189:36 - and I can start to poke around.
1189:37 - It looks like my HTML is
not at all noteworthy.
1189:40 - It's just very simple HTML,
anchor tag with an HREF.
1189:43 - So let's look at the style.
1189:45 - Let me zoom out.
1189:46 - And we can look at it
in two different ways.
1189:48 - We can literally look at
the style, contents here,
1189:51 - or we can look at Chrome's
pretty version of it, over here.
1189:55 - It looks like my style
sheet, in the style tag,
1189:59 - has changed the color to be red, and the
text decoration, which is a new thing,
1190:04 - but it's another CSS property, to none.
1190:06 - Notice, if I turn that
off, links on the internet
1190:08 - are underlined by
default, which tends to be
1190:10 - good for familiarity, for
visibility, for accessibility.
1190:13 - But, if it's very obvious what
is text and what is a link,
1190:18 - maybe you change text
decoration to none.
1190:21 - But maybe, watch this, maybe the
link comes, the line comes back
1190:25 - when you hover over it.
1190:26 - Well, let's look at how
I did this in style.
1190:29 - Notice that I have stylization, and I
put my curly braces on the same line
1190:34 - here, as tends to be convention in CSS.
1190:36 - Color is red, text decoration is none.
1190:38 - But, whenever an anchor
tag is hovered over,
1190:42 - you can change the text decoration
to be back to the default, underline.
1190:47 - So, again, just little ways of playing
around with the aesthetics of the page,
1190:51 - once you understand
that, really, there's
1190:52 - just different types of selectors.
1190:54 - And you might have to remind
yourself, look them up occasionally,
1190:56 - as to what the syntax is.
1190:57 - But it's just another way of scoping
your properties to specific tags.
1191:02 - Let's look at version 3 of this
here, which adds Yale to the mix.
1191:06 - If I go to Link3.html, maybe I
want to have Harvard links red,
1191:11 - Yale links blue.
1191:12 - How might I have done this?
1191:14 - Well, let's right click,
and click Inspect.
1191:17 - And here we might have two links,
with a couple of techniques,
1191:21 - just to, again, emphasize, you can
do this so many different ways.
1191:24 - I gave my Harvard link an ID of
Harvard, my Yale link an ID of Yale.
1191:30 - In my CSS, if we go to the head
of the page, I then did this.
1191:34 - The tag with the Harvard ID, a.k.a.
1191:37 - #Harvard, should be red,
#Yale should be blue,
1191:41 - and then any anchor tag should
have no text decoration,
1191:45 - unless you hover over it, at which
point it should be underlined.
1191:48 - And so, if I hover over Harvard,
it's red underlined, Yale,
1191:52 - it's blue underlined.
1191:53 - If I want to get rid of the IDs, I
can do this a slightly different way.
1191:56 - Let me go into Link4.
1191:57 - Same effect, but notice,
I got rid of the IDs now.
1192:00 - How else can I express myself?
1192:02 - Well, let's look at the CSS here.
1192:03 - The anchor tag has no text
decoration by default,
1192:06 - unless you're hovering over it.
1192:08 - And this is kind of cool.
1192:09 - This is what we would
call, on our list here,
1192:11 - an attribute selector, where you
select tags using CSS notation,
1192:16 - based on an attribute.
1192:18 - So this is saying, go ahead
and find any anchor tag
1192:21 - who's HREF value happens to
equal this URL, and make it red.
1192:26 - Do the same for Yale, and make it blue.
1192:28 - Now, this might not be ideal, because
if there's something after the slash,
1192:31 - these equal signs don't
work, because if it's
1192:33 - a different Harvard or different Yale
link, this is a little too precise.
1192:37 - So let me look at version
5 here, of Link.html.
1192:40 - Look at this style, and I
did this a little smarter.
1192:43 - This is new syntax.
1192:44 - And, again, just the kind
of thing you look up.
1192:46 - Star equals means, change any anchor
tag who's HREF contains anywhere in it
1192:54 - Harvard.edu to red, and do the same
thing for Yale, based on star equals.
1192:59 - So star here connotes wildcard.
1193:01 - So search for Harvard.edu or
Yale.edu anywhere in the HREF,
1193:04 - and if it's there, colorize the link.
1193:07 - And, again, we could do this all
day long, with diminishing returns,
1193:11 - to actually achieve the same kind
of stylizations in different ways.
1193:15 - And as projects just
get larger and larger,
1193:17 - you just have more and
more decisions to make.
1193:19 - And so you have certain
conventions you start to adopt.
1193:21 - And, indeed, if I may,
you have the introduction
1193:25 - of what are called
frameworks, ultimately.
1193:28 - If you're a full-time
web developer, or you're
1193:30 - working for a company doing the same,
you might have internal conventions
1193:33 - that you adhere to.
1193:34 - For instance, the company might say,
always use classes, don't use IDs.
1193:38 - Or always use attribute
selectors, or don't use this.
1193:41 - And it wouldn't be necessarily
as draconian as that.
1193:44 - But they might have a
style guide of sorts.
1193:46 - But, what many people, and
many companies, do nowadays,
1193:49 - is they do not come up with all
of their own CSS properties.
1193:53 - They start with something off the shelf,
a framework, typically a free and open
1193:57 - source framework, that just gives
them a lot of pretty stylizations
1194:00 - for free, just by using
a third party library.
1194:04 - And one of the most
popular ones nowadays
1194:05 - is something called
Bootstrap, that CS50 uses
1194:07 - on all of its websites,
super-popular in industry as well.
1194:11 - It's at getbootstrap.com, and this
is just to give you a taste of it,
1194:17 - a website that documents
the library that they offer.
1194:20 - And there's so much documentation here,
but let me just go to things like,
1194:24 - how about components.
1194:26 - It just gives you, out of the
box, the CSS with which you
1194:30 - can create little alerts.
1194:31 - If you've ever noticed
on CS50's website,
1194:33 - little colorful warnings at
the top of the page, or call
1194:36 - outs, to draw your attention to things.
1194:37 - How did we do that?
1194:38 - It's probably a paragraph
tag or a div tag,
1194:41 - and maybe we changed the font color.
1194:43 - We changed the background color.
1194:44 - Or it's a lot of stuff we could
absolutely do from scratch,
1194:47 - but, you know what,
why would we reinvent
1194:49 - the wheel if we can just use Bootstrap.
1194:51 - So, for instance, let
me just scroll down.
1194:53 - If you've ever seen on CS50's website
a yellow warning alert like this,
1194:57 - let me just zoom in on this.
1195:00 - We are just using HTML like this.
1195:03 - We're using a div tag, which,
again, is an invisible division,
1195:06 - a rectangular region of the page.
1195:07 - But we're using classes called alert
and another class called alert warning.
1195:12 - Those are classes that the
folks at Bootstrap invented.
1195:17 - They associated certain
text colors and background
1195:19 - colors and padding and margin
and like other aesthetics with,
1195:23 - so all we have to do
is use those classes.
1195:25 - Role equals alert, just makes clear
to like a screen reader that this
1195:28 - is an alert, that should
probably be recited,
1195:30 - and whatever's in between
the open tag and close tag,
1195:33 - is what the human would see.
1195:35 - How do you use something like Bootstrap?
1195:37 - Well, you just read the documentation.
1195:39 - Under Getting Started, there is a
link tag you copy/paste into your own.
1195:44 - So let me do this.
1195:45 - So in Table.html, we had code like this.
1195:49 - Let me actually read Bootstrap's
documentation really fast.
1195:52 - And they tell me...
1195:53 - copy/paste this code.
1195:55 - I'm going to put this
into the head of my page.
1195:57 - And it's quite long, but
notice, it's a link tag,
1195:59 - which I used earlier for my
own CSS file, the HREF of which
1196:03 - is this CDN link, content
delivery network, that's
1196:06 - referring to a specific version of
Bootstrap that's available on this day.
1196:09 - And the file that I'm including
is called Bootstrap.min.css.
1196:13 - This is an actual file I
can visit with my browser.
1196:17 - If I open this in a separate
tab, this is the CSS
1196:20 - that Bootstrap has made
freely available to us.
1196:23 - Crazy long, no white space.
1196:25 - That's because it's been
minimized, just to not
1196:27 - waste space by adding lots
of white space and comments.
1196:29 - But this contains a whole lot,
hundreds, of CSS properties
1196:33 - that we can reuse, thanks to
classes that they invented.
1196:36 - If I want to use some JavaScript
code, I can also copy this script tag.
1196:40 - But we'll come back to that before long.
1196:41 - Let me now just make a couple
of tweaks to this table.
1196:45 - If I go into my browser
from before, this
1196:48 - is what it looked like previously,
where name and number were
1196:51 - bold, but centered, and then
Carter and David were on the left,
1196:54 - and the numbers were to the right.
1196:55 - It's fine.
1196:56 - It's not that pretty, but it'd be nice
if it were a little prettier than that.
1196:59 - So if we add Bootstrap into it,
notice one thing happens first,
1197:03 - when I reload the page.
1197:04 - No longer are Chrome's
default styles used.
1197:08 - Now Bootstrap's default
styles are used, which
1197:10 - is a way of enforcing similarity
across Chrome, Edge, Firefox,
1197:14 - Safari, and others.
1197:15 - Notice it went from a
serif font to a sans serif
1197:18 - font, and something cleaner like this.
1197:19 - It still looks pretty ugly, but let
me go into Bootstrap's documentation.
1197:24 - Let me go under their
content tab, for tables.
1197:30 - And if I just kind of
start skimming this,
1197:32 - these are some good
looking tables, right?
1197:34 - Like, there's some underlining
here, some bolder font.
1197:38 - There's a dark line.
1197:39 - If I keep going, ooh,
that's getting pretty, too,
1197:41 - if I want to have a colorful table,
like I could figure all of this stuff
1197:44 - out myself if I want
some dark mode here,
1197:47 - if I want to have alternating
highlights, and so forth.
1197:51 - There's so many different stylizations
of tables that I could do myself.
1197:54 - But I care about making a phone book,
not about reinventing these wheels.
1197:58 - So if I read the documentation closely,
it turns out that all I need to do
1198:02 - is add Bootstrap's table
class to my table tag,
1198:06 - and watch with a simple reload, what
my now Table.html file looks like.
1198:11 - Much nicer, right?
1198:13 - Might not be what you want, but, my
God, with like two lines of code,
1198:16 - I just really prettied things up.
1198:18 - And so here, then, is the value of
using something like a framework.
1198:21 - It allows you to actually
create much prettier, much more
1198:27 - user-friendly websites than you might
otherwise be able to make on your own,
1198:32 - certainly quickly.
1198:34 - In fact, let's iterate one
more time on one other example,
1198:37 - before we introduce a bit of that code.
1198:39 - Let me go ahead and open
up Search.html from before,
1198:44 - which, recall, looks like this,
and Search.html on my browser
1198:49 - was this very simple Google search.
1198:52 - And suppose I want to reinvent
Google.com's UI a bit more.
1198:56 - Here's a screenshot of
Google.com on a typical day.
1198:59 - It's got an about link, a store
link, Gmail images, these weird dots,
1199:03 - sign in, their logo.
1199:05 - It's not appearing well
on the screen here,
1199:07 - but there's a big text box in
the middle, and then two buttons,
1199:09 - Google search, and I'm feeling lucky.
1199:12 - Well, could I maybe go about
implementing this UI myself,
1199:15 - using some HTML, some CSS,
and maybe Bootstrap's help,
1199:19 - just so I don't have to figure out
all of these various stylizations?
1199:23 - Well, here's my starting point.
1199:24 - In Search.html, let's go and add
in Bootstrap, first and foremost,
1199:29 - so that we have access to all of
their classes that are reusable now.
1199:34 - And let me go ahead and
figure out how to do this.
1199:37 - Well, just like Stanford's site had
like its NAV navigation bar, using a UL,
1199:43 - but they changed it from being a
bulleted list to being left to right,
1199:46 - I bet I can do something
like this myself.
1199:48 - So let me go into the body
of my page and, first,
1199:50 - based on Bootstrap's documentation,
let me add a div called
1199:54 - a div with a class of container fluid.
1199:57 - Container fluid is
just a class that comes
1199:59 - with Bootstrap that says, make
your web page fluid, that is,
1200:03 - grow to fill the window.
1200:04 - So that way it's going to resize nicely.
1200:07 - I'm going to go ahead and
fix my indentation here.
1200:09 - If you haven't discovered
this yet, if you
1200:11 - highlight multiple lines
in VS Code, you can
1200:13 - hit Tab and indent them all at once.
1200:15 - So now, I have all of
that inside of this div.
1200:17 - Now, just like in Stanford's site, let's
create an unordered list that has maybe
1200:23 - an LI, called with a class of NAV item,
and then in here, whoops, in here,
1200:32 - let me go ahead and say, A
HREF=https://about.google,
1200:42 - which is the real URL
of Google's about page.
1200:44 - And I'll put the about text in there.
1200:46 - Then I'm going to close my LI tag
here, and I want to do one other thing,
1200:50 - because I'm using Bootstrap.
1200:52 - Bootstrap's documentation,
if I read it closely,
1200:54 - says to add a class to your links,
called like NAV link, and text dark,
1200:59 - to make it dark, like black or dark
gray, instead of the default blue.
1201:04 - All right, so I think I
have now an about link
1201:08 - in a navigation part of my screen.
1201:10 - Let me go ahead and
save this and reload.
1201:14 - All right, so not exactly what I wanted.
1201:16 - It's a bulleted list, still, so
I need to override this somehow.
1201:19 - Let me read Bootstrap's
documentation a little more clearly.
1201:22 - And let me pretend to do
that, for time's sake.
1201:25 - If I go under content, oops,
if I go under components,
1201:28 - and I go to Navs and
Tabs, long story short,
1201:32 - if you want to create a pretty menu
like this, where your links are
1201:35 - from the left to the
right, just like Stanford,
1201:37 - I essentially need HTML like this.
1201:40 - And this is subtle, but
I left off this class.
1201:42 - I should have added a
class called NAV on my UL.
1201:45 - So that was my bad.
1201:46 - Let me go in here and
say add class equals
1201:49 - NAV, and then again, this class
NAV item, Bootstrap told me to,
1201:53 - NAV link text dark,
Bootstrap told me to.
1201:56 - Let me go back to my page here,
reload, and OK, still kind of ugly.
1202:02 - But at least the About link is
in the top left hand corner,
1202:05 - just like it should be
in the real google.com.
1202:07 - Now let me whip up a couple
of more links real fast.
1202:10 - Let me go and do a little
copy/paste, though I bet next week
1202:13 - we can avoid this kind of copy/paste.
1202:15 - Let me change this link
to be Store.google.com.
1202:20 - The text will be store.
1202:22 - Let me go ahead and create
another one here for Gmail.
1202:26 - So this one's going to go
to, officially, how about,
1202:31 - technically it's www.google.com/gmail.
1202:35 - Normally it just redirects.
1202:37 - And let me grab one more of these.
1202:39 - And for Google Images, and I'm
going to paste this, whoops,
1202:42 - I'm going to, come on.
1202:44 - I'm going to put this here, too.
1202:45 - This is going to be images, and
that URL is IMG.hp, is the URL.
1202:53 - All right, let me go ahead
and reload the browser page.
1202:56 - Now it's coming along, right?
1202:57 - About, store, Gmail, images.
1202:59 - It's not quite what I want.
1203:01 - So I'd have to read the
documentation to figure out
1203:03 - how to maybe nudge one of these
over, to start right aligning it.
1203:07 - And there's a couple of ways to do this.
1203:09 - But one way is if I want Gmail to move
all the way over and push everything
1203:13 - else, I can say that add some margin to
the Gmail list item, margin start auto.
1203:23 - This is in Bootstrap's documentation, a
way of saying whatever space you have,
1203:27 - just automatically
shove everything apart.
1203:29 - And now, if I reload the page
again, now, voila, Gmail and images
1203:34 - is over to the right.
1203:35 - All right, so now we're
kind of moving along.
1203:37 - Let me go ahead and add the
big blue button to sign in.
1203:40 - So here with sign in, let me go
ahead and, over in my same NAV, yeah,
1203:45 - so let's go ahead and do one
more LI, class equals NAV item.
1203:49 - And then, inside of this LI
tag, what am I going to do?
1203:52 - Turns out there is a class that can turn
a link into a button, if you say BTN,
1203:58 - for button, and then button
primary, makes it blue,
1204:01 - the HREF for this one is going
to be https://accounts.goo
1204:04 - gle.com/service/login, which is
literally where you go if you click
1204:08 - on that big blue button.
1204:09 - The role of this link is that of button.
1204:11 - And then sign in, is going
to be the text on it.
1204:15 - If I now reload the page, now
we're getting even closer,
1204:18 - although it looks a little stupid.
1204:20 - Notice that sign in is way
in the top right hand corner,
1204:22 - whereas the real google.com has
a little bit of margin around it?
1204:26 - OK, that's an easy fix, too.
1204:28 - Let me go back into my HTML here.
1204:30 - Let me add margin-3.
1204:31 - This, too, is a Bootstrap thing.
1204:33 - They have a class called m-something.
1204:35 - The something is a
number from like 1 to 5,
1204:38 - I believe, that adds just
some amount of white space.
1204:41 - So if I reload now, OK,
it's just a little prettier.
1204:45 - And now let me accelerate.
1204:47 - Just to demonstrate how I can
take this home, let me go ahead
1204:50 - and open up my premade
version of this, whereby
1204:55 - I added to this some final flourishes.
1204:58 - If I go to Search2.html, I
decided to replace their logo
1205:02 - with just this out of a
cat, and notice that I
1205:05 - re-implemented essentially google.com.
1205:07 - Here's a text box, here's two
buttons, even though they're
1205:10 - a little washed out on the screen.
1205:11 - I even figured out how to get dots
that look pretty similar to Google's.
1205:14 - And if we view source, you can see
how I kind of finished this code.
1205:18 - If I go to view developer tools, and I
go to elements, and I go into this div,
1205:25 - and I go into this div, you'll see
that here's an image tag for happy cat.
1205:31 - And I added some classes there to make
it fluid, and width 25% of the screen.
1205:35 - If I go into the form tag, this
is the same form tag as before.
1205:38 - But, notice, I used
button tags this time,
1205:40 - with button and button light classes.
1205:43 - And then I stylized
them in a certain way.
1205:45 - And so in the end result, if I want
to go ahead and search now for birds,
1205:49 - and click Google search,
voila, I've implemented
1205:51 - something that's pretty
darn close to Google.com,
1205:54 - without even touching raw CSS myself.
1205:57 - And now here's the value,
then, of a framework.
1206:00 - You can just start to use
off the shelf functionality
1206:02 - that someone else created for you.
1206:04 - But if you want to make
refinements, you don't really
1206:07 - like the shade of blue that
Bootstrap chose, or the gray button,
1206:09 - or you want to curve
things a bit more, that's
1206:11 - where you can create
your own CSS file, and do
1206:14 - the last mile, sort
of fine tuning things.
1206:16 - And that tends to be best practice.
1206:17 - Stand on the shoulders of others as
much as you can, using libraries.
1206:21 - And then if you really don't
like what the library is doing,
1206:23 - then use your own skills and
understanding of HTML and CSS
1206:26 - to refine things a bit further.
1206:29 - But still, after all of that, all of
these examples we've done thus far
1206:33 - are still static, other
than the Google one,
1206:35 - which searches on the real Google.com.
1206:37 - Let's take a final 5
minute break and we'll
1206:39 - give you a sense of what we can next
do, next week onward, with JavaScript.
1206:43 - See you in five.
1206:44 - All right, so I think
it's fair to say, we're
1206:48 - about to see our very last language.
1206:50 - Next week and final
projects are ultimately
1206:52 - going to be about
synthesizing so many of these.
1206:55 - Thankfully, this language called
JavaScript is quite similar
1206:58 - syntactically to both C and Python.
1207:00 - And, indeed, if you can imagine
doing something in either of those,
1207:03 - you can probably do it in
some form in JavaScript.
1207:05 - The most fundamental
difference today, though,
1207:07 - is that when you have written C
code and Python code thus far,
1207:11 - you've done it on the server.
1207:12 - You've done it in the
terminal window environment.
1207:14 - And when you run the code, it's
running in the cloud on the server.
1207:17 - The difference now today
with JavaScript is,
1207:20 - even though you're going to write
it in the cloud using VS Code,
1207:23 - recall that, when a browser gets
the page containing this code,
1207:27 - it's going to get a copy of the HTML,
the CSS, and the JavaScript code.
1207:32 - So JavaScript, that we see today, is
all going to be executed in the browser,
1207:37 - on users' own Macs, PCs, and
phones, not in the server.
1207:40 - JavaScript can be used on the server,
using an environment called Node.js.
1207:44 - It's an alternative to Python or
Ruby or Java or other languages.
1207:47 - We are using it today client
side, which is a key difference.
1207:51 - So in Scratch, let's
do this one last time.
1207:53 - If you wanted to create a variable
in Scratch, set encounter equal to 0.
1207:56 - In JavaScript, it's
going to look like this.
1207:59 - You don't specify the type,
but you do use the keyword let,
1208:02 - and there's a few others as well, that
say let counter equal 0 semicolon.
1208:07 - If you want to increment that
variable by one, you in JavaScript
1208:11 - could say something like,
counter equals counter plus 1,
1208:14 - or you can do it more
succinctly, with plus equals,
1208:17 - or the plus plus is back in JavaScript.
1208:20 - You can now say counter
plus plus semicolon again.
1208:23 - In Scratch, if you wanted to
do a conditional like this,
1208:26 - asking if x less than y, it looks
pretty much like C. The parentheses are,
1208:30 - unfortunately, back.
1208:32 - The curly braces here are back, if you
have multiple statements in particular.
1208:35 - But, syntactically, it's pretty much
the same as it was for if, for if else,
1208:39 - and even for it's else if else.
1208:42 - Unlike Python, it's two
words again, else if.
1208:45 - So quite, quite like C,
nothing new beyond that.
1208:49 - If you want to do something forever
in Scratch, you'd use this block.
1208:52 - In JavaScript, you can do it a few
ways, similar to Python, similar to C,
1208:55 - you just say while true.
1208:57 - In JavaScript, Booleans are
lowercase again, just like in C.
1209:00 - So it's lowercase true.
1209:02 - If you want to do something
a finite number of times,
1209:04 - like repeat three times,
looks almost like C as well.
1209:08 - The only difference, really, is using
the word let here, instead of INT.
1209:12 - And, again, you'll use let to
create a string, or an INT,
1209:15 - or any other type of
variable in JavaScript.
1209:17 - The browser will figure out
what type you mean from context.
1209:21 - In C we would have said INT instead.
1209:24 - Ultimately, this language, and that's
it for our tour of JavaScript syntax.
1209:27 - There's bunches of other
features, but syntactically it's
1209:30 - going to be that accessible,
relatively speaking.
1209:32 - The power of JavaScript
running in the user's browser
1209:35 - is going to be that you can
change this thing in memory.
1209:39 - Think about most any website, that's
at all interesting today, that you use.
1209:43 - It's typically very
interactive and dynamic.
1209:45 - If you're sitting in front of Gmail on
a laptop or desktop with the browser tab
1209:49 - open, and someone sends you
an email, all of a sudden,
1209:52 - another row appears in your
inbox, another row, another row.
1209:55 - How is that implemented?
1209:56 - Honestly, it could be an HTML table.
1209:58 - Maybe it's a bunch of
divs top to bottom.
1210:00 - The point, though, is, you don't
have to hit Command R or Control
1210:04 - R to reload the page to see more email.
1210:06 - It automatically appears
every few seconds or minutes.
1210:10 - How is that working?
1210:11 - When you visit Gmail.com,
you are downloading not just
1210:14 - HTML and CSS with your
initial inbox, presumably.
1210:18 - You're downloading some
JavaScript code, that
1210:20 - is designed to keep talking every
second, every 10 seconds or something,
1210:24 - to Gmail servers, and they,
then, are using their code
1210:28 - to add another element, another
element, another element,
1210:31 - to the existing DOM, document object
model, which is the fancy term for tree
1210:36 - in memory that represents HTML,
so that the web page can continue
1210:40 - to update in real time.
1210:42 - Google Maps, same thing.
1210:43 - If you click and drag and drag
and drag, your browser did not
1210:46 - download the entire world to
your Mac or PC by default.
1210:49 - It only downloaded what's in your
viewport, the rectangular region.
1210:52 - But when you click and drag, it's
going to get some more tiles up there,
1210:55 - some more images, some more
images, as you keep dragging, using
1210:58 - JavaScript, again, behind the scenes.
1211:01 - So let's actually use JavaScript
to start interacting with pages.
1211:04 - How can we do this?
1211:05 - We can put the JavaScript
code in the head of the page,
1211:08 - in the body of the page, or even
factor it out to a separate file.
1211:12 - So let's take a look.
1211:13 - Here is a new version of
Hello.html, that, during the break,
1211:17 - I just added a form to, because it'd
be nice if this page didn't just
1211:20 - say Hello, title, Hello, body, it said,
Hello, David, Hello, Carter, Hello,
1211:24 - whoever uses it.
1211:25 - I've got a form that I borrowed
from some of our earlier code,
1211:28 - and that form has an input whose ID is
name, that also has a submit button.
1211:34 - But there's no code in this yet.
1211:36 - So let's add a little bit of
JavaScript code as follows.
1211:39 - Suppose that, when this form is
submitted, I want to greet the user.
1211:43 - How can I do that?
1211:44 - Well, let's do it the
somewhat messy way first.
1211:47 - I can add an attribute called
on submit to the form element,
1211:51 - and I can say on submit, call the
function called greet, close quotes.
1211:56 - Unfortunately, this
function doesn't yet exist.
1211:58 - But I can make it exist.
1211:59 - But there's another detail here.
1212:01 - When the user clicks submit, normally
forms get submitted to the server.
1212:04 - I don't want to do that today.
1212:06 - I want to just submit the form to
the browsers, keep on the same page,
1212:10 - and just print to the screen,
Hello, David, or so forth.
1212:13 - So I'm also going to go
ahead and say, return false.
1212:15 - And this is a JavaScript way of telling
the browser, even when the user tries
1212:20 - to submit the form, return false.
1212:21 - Like, no, don't let them
actually submit the form.
1212:24 - But do call this function called greet.
1212:26 - In the head of my page, I'm going to add
a script tag, wherein the language is
1212:30 - implicitly JavaScript,
and has no relationship,
1212:33 - for those of you who took APCS with
Java, just a similarly named language,
1212:37 - but no relation, I'm going to
name a function called Greet.
1212:41 - Apparently in JavaScript, the
way you create a function is you
1212:44 - literally say the word
function instead of Def.
1212:47 - You don't specify a return type.
1212:49 - And in this function, I could do
something like this, alert quote
1212:54 - unquote, how about, Hello, there.
1212:57 - Initially I'm going to keep it simple,
using a built-in function called alert,
1213:01 - which is not a good user interface.
1213:03 - There are better ways to do this.
1213:04 - But we're doing something simple first.
1213:06 - Let me now go ahead and
load this page again.
1213:09 - It still looks as simple as before,
with just a simple text box.
1213:12 - I'll zoom in to make it bigger.
1213:13 - I'm going to type my name,
but I think it's going
1213:15 - to be ignored when I click Submit.
1213:17 - It just says, Hello, there.
1213:18 - And this is, again, this
is an ugly user interface.
1213:21 - It literally says the whole
code space URL of the web page
1213:24 - is saying this to you.
1213:25 - It's really just meant for simple
interactions like this, for now.
1213:29 - All right, let's have it
say Hello, David, somehow.
1213:31 - Well, how can I do this?
1213:33 - Well, if this element on the
page was given by me a unique ID,
1213:37 - it'd be nice if, just like in CSS, I
can go grab the value of that text box,
1213:41 - using code.
1213:42 - And I actually can.
1213:43 - Let me go ahead and do this.
1213:45 - Let me store, in a variable
called name, the result
1213:49 - of calling a special function
called document.queryselector.
1213:54 - This query selector function
is JavaScript's version
1213:57 - of what we were doing
in CSS, to select nodes,
1214:00 - using hashes or dots or other syntax.
1214:02 - It's the same syntax.
1214:04 - So if I want to select the
element whose unique ID is name,
1214:09 - I can literally just pass, in
single or double quotes, hash name,
1214:12 - just like in CSS.
1214:14 - That gives me the actual
node from the tree.
1214:17 - It gives me one of these rectangles
from the DOM, the document object model.
1214:21 - If I actually want to get at
the specific value therein,
1214:24 - I need to go one step
further and say .value.
1214:27 - So, similar in spirit
to Python, where we
1214:29 - saw a lot of dot notation, where
you can go inside an object,
1214:32 - inside of an object,
that's what's going on.
1214:34 - Long story short, in JavaScript,
there is a special global variable
1214:38 - called document, that lets you just do
stuff with the document, the web page
1214:41 - itself.
1214:42 - One of those functions
is called query selector.
1214:44 - That function returns to you
whatever it is you're selecting.
1214:47 - And dot value means go
inside of that rectangle,
1214:51 - and grab the actual text
that the human typed in.
1214:54 - So if I want to now say,
Hello, to that person,
1214:58 - the syntax is a little
different from C and Python.
1215:01 - I can use concatenation, which
actually does exist in Python,
1215:03 - but we didn't use it much.
1215:04 - I can go ahead and say hello,
quote unquote "Hello," plus name.
1215:10 - All right, now, if I go
back to the browser window,
1215:13 - reload the page, to get the latest
version of the code, type in David,
1215:16 - and click Submit, now
I see, Hello, David.
1215:20 - Not the best website, but
it does demonstrate how
1215:23 - I can start to interact with the page.
1215:25 - But let me stipulate that
this co-mingling of languages
1215:29 - is never a good thing.
1215:30 - It's fine to use
classes, but using style
1215:33 - equals quote unquote and
a whole bunch of CSS,
1215:35 - that was not going to scale well, once
you have lots and lots of properties.
1215:38 - Same here, once you
have more and more code,
1215:40 - you don't want to just put your code
inside of this on submit handler.
1215:44 - So there's a better way.
1215:45 - Let's get rid of that
on summit attribute,
1215:48 - and literally never use it again.
1215:50 - That was for demonstration's sake only.
1215:52 - And let's do this.
1215:53 - Let me move the script tag,
actually, just below the form,
1215:57 - but still inside the body, so
that the script tag exists only
1216:01 - after the form tag exists, logically.
1216:04 - Just like in Python, your code is
read top to bottom, left to right.
1216:08 - And let me now do this.
1216:10 - Let me define this function
called Greet, and then
1216:13 - let me do this, document.queryselector,
let me select the form on the page.
1216:18 - It doesn't have a unique ID.
1216:20 - It doesn't need to.
1216:21 - I can just reference it by name, form,
because there's only one of them.
1216:24 - And let me call this special
function, add event listener.
1216:28 - This is a function that
listens for events.
1216:31 - Now this is actually a term
of art within programming.
1216:34 - Many different languages
are governed by events.
1216:37 - And pretty much any user interface is
governed by events, especially phones.
1216:40 - On phones, you have touches, and you
have drags, and you have long press,
1216:45 - and you have pinch, and all
of these other gestures.
1216:47 - On your Mac or PC you
have click, you have drag,
1216:49 - you have key down, key up, as
you're moving your hands up and down
1216:52 - on the keyboard.
1216:53 - This is a non-exhaustive
list of all of the events
1216:57 - that you can listen for in the
context of web programming.
1216:59 - And this might be a throwback
to Scratch, where, recall,
1217:02 - Scratch let you broadcast events.
1217:04 - And we had the two puppets sort of
talking to one another via Events.
1217:07 - In the world of web programming, game
programming, any human physical device
1217:11 - these days, they're
just governed by events.
1217:14 - And you write code that listens
for these events happening.
1217:16 - So what do I want to listen for?
1217:18 - Well, I want to add an event
listener for the Submit event.
1217:21 - And when that happens, I want to
call the Greet function, like this.
1217:26 - So this is kind of interesting.
1217:28 - Thank you, I have my Greet
function as before, no changes.
1217:32 - But I'm adding one
line of code down here.
1217:34 - I'm telling the browser to
use document.queryselector
1217:38 - to select the form.
1217:39 - Then I'm adding an event listener,
specifically for the Submit event.
1217:42 - And when that happens, I call Greet.
1217:44 - Notice I am not using
parentheses after Greet.
1217:47 - I don't want to call Greet right away.
1217:49 - I want to tell the browser to call
Greet, when it hears this Submit event.
1217:55 - Now let me go ahead and deliberately,
I think, trip over something
1218:03 - here, let me type in my name,
David, submit, and there we go.
1218:08 - All right, Hello, David.
1218:09 - All right, but let's now make
this slightly better designed.
1218:13 - Right now, I'm defining a
function Greet, which is fine.
1218:16 - But I'm only using it in one place.
1218:18 - And you might recall, we
stumbled on this in Python,
1218:21 - where I was like, why are we creating
a special function called get value
1218:24 - when we're only using
it like one line later?
1218:26 - And we introduced what type of
function in Python the other day?
1218:29 - AUDIENCE: Lambda.
1218:30 - SPEAKER 1: Yeah, so lambda
functions, anonymous functions.
1218:33 - You can actually do this
in JavaScript as well.
1218:35 - If I want to define a function all
at once, I can actually do this.
1218:40 - Let me cut this onto my
clipboard, paste it over here.
1218:43 - Let me fix all of the alignment.
1218:45 - Let me get rid of the name.
1218:46 - And I can actually, now, do this.
1218:50 - The syntax is a little weird.
1218:52 - But using now just these four
lines of code, I can do this.
1218:56 - I can tell the browser to add an
event listener for the Submit event.
1218:59 - And then when it hears that, call
this function that has no name.
1219:03 - And unlike Python, this function
can have multiple lines,
1219:06 - which is actually a nice thing.
1219:07 - It looks a little weird.
1219:08 - There's a lot of indentation
in curly braces going on now.
1219:11 - But you can think of this as just
being, run these two lines of code,
1219:15 - when the form is submitted.
1219:18 - But if I want to block the form
from actually being submitted,
1219:20 - I've got to do one other thing.
1219:21 - And you would only know this from being
told it or reading the documentation.
1219:24 - I need to do this
function, prevent default,
1219:28 - passing in this E argument, which
is a variable that represents
1219:32 - the event, more on
that another time, that
1219:33 - just allows us to prevent
whatever the default
1219:36 - handling of that particular event is.
1219:39 - So long story short, this is
representative of the type of code
1219:42 - you might write in JavaScript,
whereby you can actually interact
1219:45 - with your code, the user's actual form.
1219:48 - And we can do interesting things, too.
1219:50 - Built into browsers nowadays
is functionality like this.
1219:53 - So here's a very simple example, that
has just three buttons in it, one red,
1219:57 - one green, one blue.
1219:58 - Well, it turns out using
JavaScript, you can control
1220:00 - the CSS of a page programmatically.
1220:02 - I can change the background
of the body of the page
1220:05 - to red, to green, to blue, just by
listening for clicks on these buttons,
1220:10 - and then changing CSS properties.
1220:12 - Just to give you a taste of this,
if I view the page's source,
1220:15 - similar code here, I can
select the red button by an ID
1220:19 - that I apparently defined
on it, right up here.
1220:22 - I can add an event listener, this
time not for submit, but for click.
1220:25 - And when it's clicked, I
execute this one line of code.
1220:28 - And this one line of code
we haven't seen before,
1220:30 - but you can go into the body of
the page, its style property,
1220:33 - and you can change its
background color to red.
1220:36 - This is one example of
two different groups
1220:38 - not talking to one another in advance.
1220:40 - In CSS, properties that have two
words are usually hyphenated,
1220:43 - like background-color.
1220:45 - Unfortunately, in JavaScript, if
you do something dash something,
1220:48 - that's subtraction, which is
logically nonsensical here.
1220:52 - So in CSS, you can convert
background-color to, in JavaScript,
1220:56 - background Color, where
you capitalize the C,
1220:59 - and you get rid of the minus sign.
1221:01 - What else can we do here?
1221:03 - Well, back in the day, there
used to be a blink tag.
1221:05 - And it's one of the
few historical examples
1221:07 - of a tag that was removed from HTML,
because in the late '90s, early 2000s,
1221:12 - this is what the web looked like.
1221:14 - There was a lot of this kind of stuff.
1221:16 - There was even a marquee
that would move text
1221:18 - from left to right over the screen.
1221:19 - And the web was a very ugly place.
1221:21 - I will admit, my very first web page
probably used both of these tags.
1221:25 - But how can we bring it back?
1221:26 - Well, this is a version of the
blink tag implemented in JavaScript.
1221:29 - How?
1221:30 - I wrote some code in this example, that
waits every 500 milliseconds to change
1221:35 - the CSS of the page to be
visible, invisible, visible,
1221:39 - invisible, because built into
JavaScript is support for a clock.
1221:42 - So you can just do something
on some sort of schedule.
1221:45 - Let me go ahead and open up
this example, autocomplete.
1221:47 - So let me zoom back out.
1221:49 - In Autocomplete.html, I whipped up as
an example, that has just a text box,
1221:53 - but I also grabbed the
dictionary from problem
1221:56 - set 5 speller, so that if I want
to search for something like Apple,
1222:00 - this searches that 140,000
words, using JavaScript,
1222:04 - to create what we know in the
world of the web as autocomplete.
1222:07 - When you start searching
for something, you
1222:09 - should start to see words
that start with that phrase.
1222:11 - And sure enough, if I search
for something like banana,
1222:14 - here's the three variants of bananas
that appear in that file, and so forth.
1222:17 - How is that working?
1222:18 - Just JavaScript, when
it finds matching words,
1222:21 - it's just updating the DOM, the
tree in the computer's memory,
1222:24 - to show more and more text, or less.
1222:27 - And for one final example, this is how
programs like DoorDash and Google Maps
1222:34 - and Uber Eats and so work.
1222:35 - You have built into browsers today some
fancy APIs, application programming
1222:40 - interfaces, whereby you can ask for
information about the user's device.
1222:44 - For instance, here, I wrote a
program, in Geolocation.html, that's
1222:47 - apparently asking to know my location.
1222:49 - All right, let me go ahead
and allow it this time,
1222:51 - if that's something you're
comfortable with on your own device.
1222:54 - It's taking a moment, because sometimes
these things take a little while
1222:57 - to analyze.
1222:58 - But, hopefully, in just a moment, there
are apparently my GPS coordinates,
1223:02 - and as a final flourish today, for what
you can do with a little bit of HTML
1223:06 - for your structure, CSS
for your style, and now
1223:08 - JavaScript for your logic, which we'll
tie in again next week, let me go ahead
1223:13 - and search Google for
those GPS coordinates.
1223:15 - Zoom in here on Google Maps,
and if we zoom in, in, in,
1223:21 - OK, we're pretty close.
1223:22 - We're not on that street, but
there, oh, there it is, actually.
1223:26 - There is the marker it had put for us.
1223:27 - We're indeed here in Memorial Hall.
1223:30 - So all that with JavaScript,
but the basic understanding
1223:32 - of the DOM and the
document object model,
1223:34 - we'll pick up where
we left off next week.
1223:36 - And now add a back-end.
1223:37 - See you next time.
1223:37 - [MUSIC PLAYING]
1224:56 - DAVID: All right.
1224:57 - So this is CS50 and this is
week nine, and this is it
1225:01 - in terms of programming fundamentals.
1225:03 - Today, we come rather full circle
with so many of the languages
1225:06 - that we've been looking at
over the past several weeks.
1225:08 - And with HTML and CSS
and JavaScript last week,
1225:11 - we're going to add back into
the mix, Python and SQL.
1225:14 - And with that, do we have the
ability to program for the web.
1225:18 - And even though this isn't
the only user interface out
1225:20 - there, increasingly-- or people
certainly using laptops and desktops
1225:23 - and a browser to access applications
that people have written,
1225:26 - but it's also, increasingly, the way
that mobile apps are written as well.
1225:31 - There are languages
called Swift for iOS,
1225:33 - there are languages
called Java for Android,
1225:35 - but coding applications
in both of those language
1225:38 - means knowing twice as many language,
building twice as many applications,
1225:42 - potentially.
1225:42 - So we're increasingly seeing,
for better or for worse,
1225:45 - that the world is starting
to really standardize,
1225:47 - at least for the next some number of
years, on HTML, CSS, and JavaScript
1225:51 - coupled with other languages like
Python and SQL on the so-called backend.
1225:55 - And so today, we'll tie
all of those together
1225:57 - and give you the last of the
tools in your toolkit with which
1226:00 - to tackle final projects to
go off into the real world,
1226:03 - ultimately, and somehow solve
problems with programming.
1226:05 - But we need an additional tool today,
and we've sort of outgrown HTTP server.
1226:11 - This is just a program that
comes on certain computers
1226:14 - that you can install
for free, happens to be
1226:16 - written in a language called
JavaScript, but it's a program
1226:18 - that we've been using to
run a web server in VSCO.
1226:22 - But you can run it on your own
Mac or PC or anywhere else.
1226:24 - But all this particular
HTTP server does is
1226:28 - serve up static content
like HTML files, CSS files,
1226:32 - JavaScript files, maybe images, maybe
video files, but just static content.
1226:36 - It has no ability to really interact
with the user beyond simple clicks.
1226:41 - You can create a web form and serve
it visually using HTTP server,
1226:46 - but if the human types in input into
a form and click Submit, unless you
1226:50 - submit it elsewhere to something like
google.com like we did last time,
1226:53 - it's not actually going to go anywhere
because this server can't actually
1226:56 - process the requests that are coming in.
1226:59 - So today, we're going to introduce
another type of server that
1227:02 - comes with Python that allows
us to not only serve web pages
1227:06 - but also process user input.
1227:07 - And recall that all that input is
going to come ultimately from the URL,
1227:11 - or more deeply inside of
those virtual envelopes.
1227:14 - So here's the canonical URL we talked
about last week for random website
1227:17 - like www.example.com.
1227:20 - And I've highlighted the slash to
connote the root of the web server,
1227:23 - like the default folder
where, presumably, there's
1227:26 - a file called index.html
or something else in there.
1227:29 - Otherwise, you might have
a more explicit mention
1227:32 - of the actual file named file.html.
1227:34 - You can have folders, as you probably
gleaned from the most recent problem
1227:37 - set.
1227:38 - You can have files in
folders like this, and these
1227:40 - are all examples of what a programmer
would typically call a path.
1227:44 - So it might not just
be a single word, it
1227:45 - might have multiple slashes and multiple
folders and some folders and files.
1227:49 - But this is just more
generally known as a path.
1227:51 - But there's another term of our,
that's essentially equivalent,
1227:54 - that we'll introduce today.
1227:55 - This is also synonymously
called a route, which is maybe
1227:59 - a better generic description of what
these things are because it turns out
1228:03 - they don't have to
map to, that is, refer
1228:05 - to a specific folder
or a specific file, you
1228:08 - can come up with your
own routes in a website.
1228:11 - And just make sure that when the
user visits that, you give them
1228:13 - a certain website page.
1228:14 - If they visit something else, you
give them a different web page.
1228:17 - It doesn't have to map to a very
specific file, as we'll soon see.
1228:20 - And if you want to get input from
the user, just like Google does,
1228:23 - like q=cats, you can add a question
mark at the end of this route.
1228:28 - The key, or the HTTP parameter name
that you want to define for yourself,
1228:32 - and then equal sum value that,
presumably, the human typed in.
1228:35 - If you have more of these,
you can put an ampersand,
1228:37 - and then more key equals value pairs
ampersand, repeat, repeat, repeat.
1228:41 - The catch, though, is that using the
tools that we had last week alone,
1228:46 - we don't really have the ability to
parse, that is, to analyze and extract
1228:51 - things like q equals cats.
1228:53 - You could have appended question
mark q equals cats or anything else
1228:56 - to any of URLs in your home
page for problem set eight,
1229:00 - but it doesn't actually do
anything useful, necessarily,
1229:04 - unless you use some fancy JavaScript.
1229:06 - The server is not going to bother
even looking in that for you.
1229:09 - But today, we're going to
introduce using a bit of Python.
1229:12 - And in fact, we're going to use a web
server implemented in Python, instead
1229:15 - of using HTTP server alone,
to automatically, for you,
1229:19 - look for any key value pairs
after the question mark
1229:22 - and then hand them to you in
the form of a Python dictionary.
1229:25 - Recall that a dictionary in Python, a
dict object, is just key value pairs.
1229:29 - That seems like a perfect fit
for these kinds of parameters.
1229:33 - And you're not going to have
to write that code yourself.
1229:36 - It's going to be handed to you by
way of what's called a framework.
1229:39 - So this will be the
second of two frameworks,
1229:41 - really, that we look at in the class.
1229:43 - And a framework is essentially
a bunch of libraries
1229:46 - that someone else wrote
and a set of conventions,
1229:48 - therefore, for doing things.
1229:49 - So those of you who really
started dabbling with Bootstrap
1229:52 - this past week to make your home
pages prettier and nicely laid out,
1229:56 - you are using a framework.
1229:57 - Why?
1229:58 - Well, you're using libraries, code that
someone else wrote, like all the CSS,
1230:01 - maybe some of the JavaScript that
the Bootstrap people wrote for you.
1230:04 - But it's also a framework in the
sense that you have to go all in.
1230:08 - You have to use Bootstraps
classes, and you
1230:11 - have to lay out your divs or
your spans or your table tags
1230:15 - in a sort of Bootstrap-friendly way.
1230:17 - And it's not too onerous, but
you're following conventions
1230:19 - that a bunch of humans standardized on.
1230:21 - So similarly, in the world of
Python, is there another framework
1230:25 - we're going to start using today.
1230:26 - And whereas Bootstrap is
used for CSS and JavaScript,
1230:30 - Flask is going to be used for Python.
1230:32 - And it just solves a lot
of common problems for us.
1230:34 - It's going to make it easier
for us to analyze the URLs
1230:38 - and get key value pairs,
it's going to make it easier
1230:40 - for us to find files or
images that the human wants
1230:43 - to see when visiting our website.
1230:45 - It's even going to make it easier
to send emails automatically,
1230:48 - like when someone fills out a form.
1230:49 - You can dynamically, using code,
send them an email as well.
1230:52 - So Flask, and with it
some related libraries,
1230:55 - it's just going to make stuff
like that easier for us.
1230:58 - And to do this, all we have to do
is adhere to some pretty minimalist
1231:03 - requirements of this framework.
1231:05 - We're going to have to create a
file for ourselves called app.py,
1231:08 - this is where our web app or
application is going to live.
1231:11 - If we have any libraries that we want to
use, the convention in the Python world
1231:15 - is to have a very simple text
file called requirements.txt
1231:19 - where you list the names
of those libraries,
1231:21 - top to bottom, in that text file,
similar in spirit to the include
1231:26 - or the import statements that we
saw in C and Python, respectively.
1231:30 - We're going to have a static
folder or static directory, which
1231:33 - means any files you create that
are not ever going to change,
1231:36 - like images, CSS files,
JavaScript files,
1231:39 - they're going to go in this folder.
1231:40 - And then lastly, any
HTML that you write,
1231:43 - web pages you want the
human to see, are going
1231:45 - to go in a folder called templates.
1231:47 - So this is, again, evidence of
what we mean by a framework.
1231:50 - Do you have to make a web app like this?
1231:52 - No, but if you're using
this particular framework,
1231:54 - this is what people decided
would be the human conventions.
1231:58 - If you've heard of other frameworks like
Django or asp.net or bunches of others,
1232:02 - there are just different conventions
out there for creating applications.
1232:06 - Flask is a very nice
microframework in that that's it.
1232:10 - All you have to do is adhere to
these pretty minimalist requirements
1232:13 - to get some code up and running.
1232:16 - All right, so let's go
ahead and make a web app.
1232:19 - Let me go ahead and
switch over to VS Code
1232:21 - here, and let me practice
what I'm preaching here
1232:23 - by first creating app.py.
1232:25 - And let's go ahead and create
an application that very simply,
1232:29 - maybe, says hello to the user.
1232:31 - So something that, initially, is not all
that dynamic, pretty static, in fact.
1232:35 - But we'll build on that
as we've always done.
1232:37 - So in app.py, what I'm going to do
first is exactly the line of code
1232:41 - I had on the screen earlier.
1232:43 - From Flask, import Flask, with a capital
F second and a lowercase f first.
1232:49 - And I'm also going to
preemptively import
1232:52 - a couple of functions,
render template, and request.
1232:56 - More on those in just a bit.
1232:58 - And then below that, I'm going
to say, go ahead and do this.
1233:00 - Give me a web-- a
variable called app that's
1233:03 - going to be the result of calling
the Flask function and passing in it
1233:07 - this weird incantation here, name.
1233:10 - So we've seen this a few weeks back
when we played around with Python
1233:13 - and we had that if main thing
at the bottom of the screen.
1233:16 - For now, just know that __name__
refers to the name of the current file.
1233:21 - And so this line here, simple as
it is, tells Python, hey, Python,
1233:26 - turn this file into a Flask application.
1233:30 - Flask is a function that just figures
out, then, how to do the rest.
1233:33 - The last thing I'm going to do for this
very simple web application is this.
1233:37 - I'm going to say that I'm
going to have a function called
1233:41 - index that takes no arguments.
1233:42 - And whenever this
function is called, I want
1233:44 - to return the results of rendering
a template called index.html.
1233:50 - And that's it.
1233:51 - So let's assume there's a file
somewhere, haven't created
1233:53 - it yet, called index.html.
1233:55 - But render template
means render this file
1233:57 - that is printed to the
user's screen, so to speak.
1234:01 - The last thing I'm going to
do is I have to tell Flask
1234:03 - when to call this index function.
1234:06 - And so I'm going to tell it to define
a route for, quote unquote, "slash."
1234:11 - And that's it.
1234:13 - So let's take a look at
what I just created here.
1234:15 - This is slightly new syntax, and
it's really the only weirdness
1234:18 - that we'll have today in Python.
1234:19 - This is what's known in Python
is what's called a decorator.
1234:22 - A decorator is a
special type of function
1234:24 - that modifies, essentially,
another function.
1234:27 - For our purposes, just know
that on line six this says,
1234:30 - hey Python, define a route
for slash, the default
1234:33 - page on my website application.
1234:35 - The next two lines, seven
and eight, say, hey Python,
1234:37 - define a function called
index, takes no arguments.
1234:40 - And the only thing you should ever do is
return render template of quote unquote
1234:45 - "index.html."
1234:47 - All right, so that's it.
1234:48 - So really, the next question,
naturally, should be all right, well,
1234:51 - what is in index.html?
1234:55 - Well, let me go ahead and do that next.
1234:56 - Let me create a directory called
templates, practicing, again,
1235:00 - what I preached earlier.
1235:01 - So I'm going to create a new
empty directory called templates,
1235:04 - I'm going to go and
CD into that directory
1235:08 - and then do code of index.html.
1235:11 - So here is going to be my index page.
1235:13 - And I'm going to do a very
simple web page, doc type HTML.
1235:16 - I'm just going to borrow
some stuff from last week.
1235:18 - HTML language equals English.
1235:20 - I'll close that tag.
1235:21 - I'll then do a head tag, I'll do a meta
tag, the name of which is viewport.
1235:25 - This makes my site recall responsive.
1235:28 - That is, it just grows and shrink
to fit the size of the device.
1235:30 - The initial scale for which is going
to be one, and the width of which
1235:34 - is going to be device width.
1235:36 - So I'm typing this out,
I have it printed here.
1235:38 - This is stuff I typically copy paste.
1235:40 - But then lastly, I'm going to
add in my title, which will just
1235:42 - be hello for the name of this app.
1235:44 - And then the body--
1235:45 - whoops, Bobby.
1235:46 - The body of this tag will be--
1235:50 - there we go.
1235:51 - The body of this page, rather,
will just be hello comma world.
1235:54 - So very uninteresting and really a
regression to where we began last week.
1235:58 - But let's go now and experiment
with these two files.
1236:01 - I'm not going to bother
with a static folder
1236:03 - right now, because I don't have any
other files that I want to serve up.
1236:06 - No images, no CSS, nothing like that.
1236:08 - And honestly, requirements.txt
is going to be pretty simple.
1236:11 - I'm going to go requirements.txt and
just say make sure the system has
1236:15 - access to the Flask library itself.
1236:18 - All right, but that's the only
thing we can add in there for now.
1236:21 - All right, so now I have two files,
app.py, and I have index.html.
1236:27 - But index.html thank you is
inside of my templates directory
1236:30 - so how do I actually start
a web server last week,
1236:33 - I would have said HTTP server.
1236:34 - But HTTP server is not a Python thing.
1236:36 - It has no idea about Flask or
Python or anything I just wrote.
1236:41 - HTTP server will just
spit out static files.
1236:43 - So if I ran HTTP server, and
then I clicked on app.py,
1236:47 - I would literally see my Python code.
1236:49 - It would not get executed because HTTP
server is just for static content.
1236:53 - But today, I'm going to run a
different command called Flask run.
1236:57 - So this framework Flask that I
actually preinstalled in advance,
1237:01 - so it wasn't strictly necessary that I
create that requirements.txt file just
1237:04 - yet, comes with a program called Flask,
takes command line arguments like
1237:08 - the word run, and when I do that, you'll
see somewhat similar output to last
1237:12 - week whereby you'll see the name--
1237:14 - your URL for your
unique preview of that.
1237:17 - You might see a pop up saying
that your application is running
1237:20 - on TCP port, something or other.
1237:22 - By default, last week,
we used port 8080.
1237:24 - Flask, just because, prefers port 5,000.
1237:27 - So that's fine too.
1237:28 - I'm going to go ahead
and open up this URL now.
1237:31 - And once it authenticates
and redirects me,
1237:33 - just to make sure I'm allowed to access
that particular port, let me zoom in.
1237:37 - Voila, there's the extent
of this application.
1237:40 - If I view source by right-clicking
or control clicking,
1237:43 - there's my HTML that's been spit out.
1237:45 - So really, I've just reinvented
the wheel from last week
1237:48 - because there's no dynamism
now, nothing at all.
1237:51 - But what if I do this?
1237:52 - Let me close the source
and let me zoom out.
1237:54 - So you can see my URL bar.
1237:56 - Let me zoom in now, and I have
a very unique cryptic URL.
1237:59 - But the point is that
it ends with nothing.
1238:01 - Or implicitly, it ends with slash.
1238:03 - This is just Chrome
being a little helpful.
1238:05 - It doesn't bother showing you a slash,
even though it's implicitly there.
1238:08 - But let me do something explicit like
my name equals, quote unquote, "David."
1238:14 - So there's a key value
pair that I've manually
1238:17 - typed into my URL bar and hit Enter.
1238:20 - Nothing happens, nothing changes.
1238:22 - It still says hello, world.
1238:23 - But the opportunity today is to
now, dynamically, get at the input
1238:27 - from that URL and start
displaying it to the user.
1238:31 - So let me go back over here to
my terminal window and code.
1238:35 - Let me move that down
to the bottom there.
1238:37 - And what if I want to
say, huh, hello, name.
1238:41 - I ideally want to say something like--
1238:42 - I don't want to hard code
David because then it's never
1238:44 - going to say hello to anyone else.
1238:46 - I want to put like a variable name
here, like name should go here.
1238:51 - But it's not an HTML tag, so I
need some kind of placeholder.
1238:55 - Well, here's what I can do.
1238:57 - If I go back to my Python code, I can
now define a variable called name.
1239:02 - And I can ask Flask to go
into the current request,
1239:06 - into its arguments, that is
in the URL, as they're called,
1239:10 - and get whatever the value of
the parameter called name is.
1239:14 - That puts that into a variable for me.
1239:16 - And then, in render template--
this is one of those functions
1239:19 - that can take more than one argument.
1239:21 - If it takes another
argument, you can pass
1239:23 - in the name of any variable you want.
1239:25 - So if I want to pass in my name, I
can literally say name equals name.
1239:29 - So this is the name of a variable
I want to give to the template.
1239:34 - This is the actual variable that
I want to get the value from.
1239:39 - And now lastly, in my index.html,
the syntax as of today in Flask,
1239:45 - is to do two curly braces and
then put the name of the variable
1239:49 - that you want to plug in.
1239:51 - So here's what we mean by a template.
1239:53 - A template is like a blueprint
in the real world, where
1239:56 - it's plans to make something.
1239:58 - This is the plan to make a web page
that has all of this code literally,
1240:02 - but there's this placeholder with
two curly braces here and here
1240:06 - that says go ahead and plug in the
value of the name variable right there.
1240:10 - So in this sense, it's similar
in spirit to our f strings
1240:13 - or format strings in Python.
1240:14 - The syntax is a little different
just because reasonable people
1240:17 - disagree, different people,
different frameworks come up
1240:19 - with different conventions.
1240:21 - The convention in Flask,
in their templates,
1240:23 - is to use two curly braces here.
1240:26 - The hope is that you, the
programmer, will never
1240:28 - want to display two curly
braces in your actual web page.
1240:32 - But even if you do,
there's a workaround.
1240:34 - We can escape that.
1240:35 - So now let me go ahead and go
back to my browser tab here.
1240:39 - Previously, even though
I added name equals David
1240:41 - to the end of the URL with a question
mark, it still said hello, world.
1240:44 - But now, hopefully, if
I made these changes,
1240:47 - let me go ahead and open
up my terminal window.
1240:51 - Let me restart Flask so it
loads my changes by default.
1240:55 - Let me go back to my hello tab and
click reload so it grabs the page anew
1240:59 - from the server.
1241:01 - And there we go, hello, David.
1241:02 - I can play around now and I can change
the URL appear to, for instance,
1241:05 - Carter.
1241:06 - Zoom out, hit Enter.
1241:07 - And now we have something more dynamic.
1241:10 - So the new pieces here are, in
Python, we have some code here
1241:14 - that allows us to access,
programmatically, everything
1241:18 - that's after the
question mark in the URL.
1241:20 - And the only thing we have to do that
is call this function request.args.get.
1241:26 - You and I don't have
to bother figuring out
1241:28 - where is the question mark,
where is the equal sign, where
1241:30 - are the ampersands, potentially.
1241:32 - The framework, Flask,
does all of that for us.
1241:36 - OK, any questions then on
these principles thus far?
1241:43 - Yeah, in back.
1241:44 - AUDIENCE: Why do you say the
question mark in the URL?
1241:50 - DAVID: Why do you need a
question mark in the URL?
1241:52 - The short answer is just because that
is where key value pairs must go.
1241:59 - If you're making a GET request
from a browser to a server,
1242:02 - the convention, standardized by the
HTTP protocol, is to put them in the URL
1242:07 - after the so-called route or
path, then a question mark.
1242:11 - And it delineates what's
part of the root or the path,
1242:13 - and what's part of the
human input to the right.
1242:17 - Other questions?
1242:18 - Yeah.
1242:19 - AUDIENCE: Can you go over again why
the left and right in the [INAUDIBLE]??
1242:22 - DAVID: Sure.
1242:23 - This is this annoying
thing about Python.
1242:25 - When you pass in parameters,
two functions that have names,
1242:29 - you typically say something
equals something else.
1242:32 - So let me make a slight tweak here.
1242:35 - How about I say name of person here.
1242:39 - This allows me to invent my
own variable for my template
1242:44 - and assign it the value of name.
1242:46 - I now, though, have to go into my
index file and say name of person--
1242:52 - did I get that right?
1242:53 - Name of person, yeah.
1242:55 - So these two have to match.
1242:57 - And so this is just stupid because
it's unnecessarily verbose.
1243:00 - So what typically people do is they
just use the same name as the variable
1243:04 - itself, even though it looks admittedly
stupid, but it has two different roles.
1243:08 - The thing to the left
of the equal sign is
1243:10 - the name of the variable you plan to use
in the template, the thing on the right
1243:14 - is the actual value you're assigning it.
1243:16 - And this is because its general purpose.
1243:18 - I could override this and I could
say something like name always
1243:21 - equals Emma, no matter
what that variable is.
1243:23 - And now if I go back to
my browser and reload,
1243:26 - no matter what's in the URL,
David or Carter, It's always--
1243:30 - OK, Emma broke the server.
1243:32 - What did I do?
1243:34 - Oh, I didn't change my template back.
1243:36 - There we go.
1243:37 - Let me change that back to be
name, so that it's name there
1243:40 - and it's name here.
1243:41 - But I've hardcoded
Emma's name, so now we're
1243:43 - only ever going to see Emma no
matter whose name is in the URL.
1243:47 - That's all.
1243:48 - All right, so this is
bad user interface.
1243:51 - If, in order to get a greeting
for the day, you, the user,
1243:54 - have to manually change the
URL, which none of us ever do.
1243:57 - This is not how web pages work.
1243:58 - What is the more normal mechanism
for getting input from the user
1244:02 - and putting it in that
URL automatically?
1244:06 - How did we do that last week?
1244:09 - With Google, if you recall.
1244:11 - AUDIENCE: We have the search
bar and we [INAUDIBLE] you have
1244:15 - to make something in there [INAUDIBLE].
1244:22 - DAVID: OK, so we did make something in
order to get the input from the user.
1244:25 - And specifically, what was the tag
or the terminology we used last week?
1244:29 - AUDIENCE: [INAUDIBLE].
1244:30 - DAVID: Sorry, a little louder?
1244:32 - Oh, no.
1244:34 - But yeah.
1244:35 - AUDIENCE: Is it input?
1244:36 - DAVID: So the input tag,
inside of the form tag.
1244:38 - So in short, forms, or of
course, how the web works
1244:41 - and how we typically
get input from the user,
1244:43 - whether it's a button or a text box
or a dropdown menu or something else.
1244:46 - So let's go ahead and add
that into the mix here.
1244:48 - So let's enhance this hello app
to do a little something more by,
1244:52 - this time, just doing this.
1244:54 - Let me get rid of this
name stuff and let me just
1244:58 - have a very simple index.html file
that, by default, is going to simply ask
1245:03 - the user for some input as follows.
1245:06 - I'm going to go back into my
index.html, and instead of printing out
1245:10 - the user's name, this is the page I'm
going to use to actually get input
1245:13 - from the user.
1245:14 - So I'm going to create a form tag.
1245:16 - The method I'm going to use for now
is going to be, quote unquote, "get."
1245:20 - Then, inside of that form, I'm
going to have an input tag.
1245:23 - And I'm going to turn off
autocomplete like we did last week.
1245:25 - I'm going to turn on auto focus, so it
puts the cursor in the text box for me.
1245:29 - I'm going to give the name
of this input the name, name.
1245:33 - Not to be too confusing, but I'm
asking the human for their name.
1245:35 - So it makes sense that the name of the
input should be, quote unquote, "name."
1245:39 - The placeholder I want the
human to see in light gray text
1245:42 - will be Name with a capital N,
just so it's a little grammatical.
1245:45 - And then type of this text fiel--
1245:47 - type of this input is going to be text.
1245:49 - Then I'm just going to give myself,
like last week, a submit button.
1245:52 - And I don't care what
it says, it's just going
1245:54 - to say the default submit terminology.
1245:56 - Let me go ahead, now, and open
up my terminal window again.
1246:01 - Let me go to that same URL
so that I can see-- whoops.
1246:11 - There we go.
1246:11 - So that was just cached from earlier.
1246:13 - Let me go back to that same
URL, my GitHub preview.dev URL,
1246:16 - and here I have the form.
1246:18 - And now, I can type in anything I want.
1246:19 - The catch, though, is when I click
Submit, where is it going to go?
1246:23 - Well, let's be explicit.
1246:24 - It does have a default value,
but let me go into my index.html
1246:28 - and let me add, just like we
did last week for it, Google.
1246:30 - Whereas previously, I said something
like www.google.com/search, but today,
1246:36 - we're not going to rely
on some third party.
1246:38 - I'm going to implement
the so-called backend,
1246:40 - and I'm going to have the user
submit this form to a second route,
1246:44 - not just slash, how about /greet.
1246:47 - I can make it up, whatever I want.
1246:48 - Greet feels like a nice operative word,
so /greet is where the user will be
1246:53 - sent when they click
Submit on this form.
1246:56 - All right, so let's go ahead now
and go back to my browser tab.
1246:59 - Let me go ahead, actually,
and let me reload Flask
1247:02 - here so that it reloads
all of my changes.
1247:05 - Let me reload this tab so that I get
the very latest HTML and, indeed,
1247:09 - quick safety check.
1247:10 - If I view page source, we
indeed see that my browser
1247:13 - has downloaded the latest HTML.
1247:15 - So it definitely has changed.
1247:16 - Let's go ahead and type in David.
1247:18 - And when I click Submit
here, what's going to happen?
1247:22 - Hypotheses.
1247:25 - What's going to happen visually,
functionally, however you
1247:28 - want to interpret when I click Submit.
1247:32 - Yeah?
1247:32 - AUDIENCE: [INAUDIBLE] an empty page.
1247:34 - DAVID: OK, the user's going
to go to an empty page.
1247:36 - Pretty good instinct, because--
1247:37 - no where else, if I mentioned
/greet, it doesn't seem to exist.
1247:40 - How's the URL going to
change, just to be clear?
1247:44 - What's going to appear,
suddenly, in the URL?
1247:49 - Yeah?
1247:50 - AUDIENCE: 404?
1247:51 - DAVID: 404?
1247:52 - No, not in the URL.
1247:53 - Specifically in the URL, something's
going to get added automatically
1247:56 - when I click.
1247:56 - AUDIENCE: The key value pair?
1247:58 - DAVID: The key value pair, right.
1247:59 - That's how forms work.
1248:00 - That's why our Google
trick last week worked.
1248:02 - I sort of recreated a
form on my own website.
1248:05 - And even though I didn't get around
to implementing google.com itself,
1248:08 - I can still send the information
to Google just relying on browsers,
1248:12 - standardizing--
1248:13 - to your question earlier, that
whenever you submit a form,
1248:16 - it automatically ends up after
a question mark in the URL
1248:19 - if you're using GET.
1248:20 - So this both of you are
right, this is going to break.
1248:23 - And all three of you are right,
in effect, 404 not found.
1248:26 - You can see it in the tab here.
1248:28 - That's the error that has come back.
1248:29 - But what's interesting, and most
important, the URL did change.
1248:33 - And it went to /greet?name=david.
1248:37 - So I just, now, need to add
some logic that actually
1248:40 - looks for that so-called route.
1248:41 - So let me go back to my app.py.
1248:44 - Let me define another route for,
quote unquote, "slash greet."
1248:49 - And then, inside of-- under this,
let me define another function.
1248:52 - I'll call it greet, but I
could call it anything I want.
1248:56 - No arguments, for now,
for this, and then
1248:58 - let me go ahead and
do this in my app.py.
1249:02 - This time around, I do want
to get the human's name.
1249:05 - So let me say requeste.args
get quote unquote "name",
1249:09 - and let me store that in
a variable called name.
1249:11 - Then let me return a
template, and you know
1249:14 - what, I'm going to give myself
a new template, greet.html.
1249:17 - Because this has a different
purpose, it's not a form.
1249:19 - I want to say hello to the
user in this HTML file,
1249:22 - and I want to pass, into it, the
name that the human just typed in.
1249:27 - All right, so now if I go up and
reload the page, what might happen now?
1249:34 - Other logical check here.
1249:36 - If I go ahead and hit reload or resubmit
the form, what might happen now?
1249:42 - Any instincts?
1249:46 - Let me try, so let's try this.
1249:48 - Let's go ahead and reload the page.
1249:50 - Previously, it was not found.
1249:51 - Now it's worse, and this is
the 500 error, internal server
1249:55 - error that I promised next week we will
all encounter accidentally, ultimately.
1249:59 - But here we have an
internal server error.
1250:01 - Because it's an internal error, this
means something's wrong with your code.
1250:05 - So the route was actually found
because it's not a 404 this time.
1250:09 - But if we go into VS Code here and
we look at the console, the terminal
1250:14 - window, you'll see that--
1250:17 - this is actually a bit misleading.
1250:21 - Do I want to do this?
1250:22 - Let me reload this.
1250:24 - Let me reload here.
1250:25 - Oh, standby.
1250:27 - Come on.
1250:28 - There we go.
1250:30 - Come on.
1250:32 - OK, here we have this
error here, and this
1250:34 - is where your terminal window
is going to be helpful.
1250:37 - In your terminal window,
by default, is typically
1250:40 - going to go helpful
stuff like a log, L-O-G,
1250:43 - of what it is the server
is seeing from the browser.
1250:46 - For instance, here's what the
server just saw in purple.
1250:48 - Get /greet?name=david
using HTTP version 1.0.
1250:54 - Here, though, is the status code
that the server returned, 500.
1250:57 - Why, what's the error?
1250:58 - Well, here's where we get these
annoying pretty cryptic Python messages
1251:02 - that help50 might
ultimately help you with,
1251:03 - or here, we might just
have a clue at the bottom.
1251:07 - And this is actually pretty
clear, even though we've never
1251:09 - seen this error before.
1251:10 - What did I screw up here?
1251:11 - I just didn't create greet.html, right?
1251:14 - Template not found.
1251:15 - All right, so that must be
the last piece of the puzzle.
1251:17 - And again, representative of how you
might diagnose problems like these,
1251:21 - let me go into my terminal window.
1251:24 - After hitting Control C, which
cancels or interrupts a process,
1251:28 - let me go into my templates directory.
1251:30 - If I type ls, I only have index.html.
1251:33 - So let's code up greet.html.
1251:36 - And in this file let's
quickly do doc type.
1251:40 - Doc type HTML, open bracket
HTML, language equals English.
1251:44 - Inside of this, I'll have the head tag,
inside of here, I'll have the meta.
1251:48 - The name is viewport,
the content of which is--
1251:53 - I always forget this to.
1251:55 - The content of which is initial scale
equals one, width equals device width.
1252:02 - Quote unquote, title
is still going to be,
1252:05 - I'll call this greet
because this is my template.
1252:08 - And then here, in the body, I'm
going to have hello comma name.
1252:13 - So I could have kept around the old
version of this, but I just recreated,
1252:17 - essentially, my second template.
1252:19 - So index.html now is almost the
same, but the title is different
1252:22 - and it has a form.
1252:24 - greet.html is almost the same,
but it does not have a form.
1252:27 - It just has the hello comma name.
1252:29 - So let me now go ahead and
rerun in the correct directory.
1252:34 - You have to run Flask wherever app.py
is, not in your templates directory.
1252:38 - So let me do Flask run to
get back to where I was.
1252:41 - Let me go into my other tab.
1252:43 - Cross my fingers this time
that, when I go back to slash
1252:46 - and I get index.html's form, now
I type in David and click Submit,
1252:51 - now we get hello, David.
1252:54 - And now we have a full-fledged web
app that has two different routes,
1252:58 - slash and /greet, the latter of
which takes input like this and then,
1253:03 - using a template, spits it out.
1253:05 - But something could go wrong,
and let's see what happens here.
1253:08 - Suppose I don't type anything in.
1253:11 - Let me go here and just click Submit.
1253:13 - Now, I mean, it looks stupid.
1253:16 - So there's bunches of
ways we could solve this.
1253:18 - I could require that the user
have input on the previous page,
1253:21 - I could have some kind
of error check for this.
1253:23 - But there's another mechanism I
can use that I'll just show you.
1253:26 - It turns out this GET function,
in the context of HTTP
1253:30 - and also in general with
Python dictionaries,
1253:33 - you can actually supply a default value.
1253:35 - So if there is no name parameter
or no value for a name parameter,
1253:39 - you can actually give it
a default value like this.
1253:42 - So I'll say world, for instance.
1253:44 - Now, let me go back here.
1253:46 - Let me type in nothing
again and click Submit.
1253:48 - And hopefully this time,
I'll do-- oops, sorry.
1253:52 - Let me restart Flask
to reload the template.
1253:54 - Let me go ahead and type nothing
this time, clicking Submit.
1253:57 - And hopefully, we now--
1254:01 - Oh, interesting.
1254:03 - I should have faked this.
1254:05 - Suppose that the reason this--
1254:09 - Oh.
1254:11 - Suppose I just get rid of name
altogether like this and hit Enter.
1254:15 - Now I see hello, world,
and this is a subtlety
1254:17 - that I didn't intend to get into here.
1254:19 - When you have question
mark name equals nothing,
1254:23 - you're passing in
what's called-- whoops.
1254:25 - When you have greet question
mark name equals something,
1254:29 - you actually are giving a value to name.
1254:31 - It is quote unquote
with nothing in between.
1254:34 - That is different from
having no value at all.
1254:36 - So allow me to just propose
that the error here, we
1254:40 - would want to require
this in a different way.
1254:42 - And probably the most
robust way to do this
1254:45 - would be to go in here, in my HTML, and
say that the name field is required.
1254:51 - Now, if I go back to my form
after restarting Flask here,
1254:55 - and I go ahead and click reload
on my form and type in nothing
1254:59 - and click Submit, now the
browser is going to yell at me.
1255:03 - But just as a teaser
for something we'll be
1255:05 - doing in the next problem set
in terms of error checking,
1255:08 - you should never, ever, ever rely on
client side safety checks like this.
1255:14 - Because we know, from last week, that
a curious programmer can go to inspect,
1255:19 - and let me poke around the HTML here.
1255:21 - Let me go into the body, the form.
1255:24 - OK, you say required,
I say not required.
1255:26 - You can just delete what's
in the dom, in the browser,
1255:29 - and now I can go ahead
and submit this form.
1255:32 - And it appears to be broken.
1255:34 - Not a big deal with a silly little
greeting application like this.
1255:37 - But if you're trying to
require that humans actually
1255:40 - provide input that is necessary for
the correct operation of the site,
1255:43 - you don't want to trust that the HTML
is not altered by some adversary.
1255:49 - All right, any questions,
then, on this particular app
1255:52 - before we add another feature here?
1255:56 - Any questions here?
1255:58 - Yeah.
1255:59 - AUDIENCE: Do you guys [INAUDIBLE].
1256:04 - DAVID: Sorry, little louder.
1256:05 - In the index function--
1256:06 - AUDIENCE: Oh, sorry.
1256:08 - [INAUDIBLE]
1256:10 - DAVID: Sorry?
1256:11 - AUDIENCE: [INAUDIBLE]
1256:14 - DAVID: Would it be a problem if what?
1256:15 - AUDIENCE: You have to [INAUDIBLE].
1256:20 - DAVID: No.
1256:20 - I mean no, this is OK.
1256:22 - What you should really do is something
we're going to do with another example
1256:24 - where I'm going to start
error checking things.
1256:26 - So let me wave my hands at
that and propose that we'll
1256:27 - solve this better in just a bit.
1256:29 - But it's not bad to do
what I just did here, it's
1256:31 - only going to handle one of the
scenarios that I was worried about.
1256:34 - Not all of them.
1256:35 - All right, so even though
this is new to most of us
1256:38 - here, consider index.html, my first
template, and consider greet.html,
1256:43 - my second template.
1256:45 - What might be arguably badly designed?
1256:48 - Even though this might
be the first time you've
1256:50 - ever touched web programming like this.
1256:54 - What's bad or dumb about this
design of these two templates alone?
1257:01 - And there's a reason, too, that I bored
us by typing it out that second time.
1257:05 - Yeah?
1257:06 - AUDIENCE: [INAUDIBLE] you said,
stuff like Notepad and [INAUDIBLE]..
1257:11 - DAVID: Yeah, there's so much repetition.
1257:13 - I mean, it was deliberately tedious
that I was retyping everything.
1257:16 - The doc type, the HTML tag,
the head tag, the title tag.
1257:19 - And little things did change
along the way, like the title
1257:21 - and certainly, the content of the body.
1257:24 - But so much of this, I
mean, almost all of the page
1257:27 - is a copy of itself in multiple files.
1257:30 - And God forbid we have a third template,
a fourth template, a hundredth template
1257:33 - for a really big website.
1257:35 - This is going to get very
tedious very quickly.
1257:37 - And suppose you want to
change something in one place,
1257:39 - you're going to have to change it now in
two, three, a hundred different places
1257:43 - instead.
1257:43 - So just like in
programming more generally,
1257:46 - we have this ability to
factor out commonalities.
1257:49 - So do you in the context
of web programming,
1257:51 - and specifically
templating, have the ability
1257:54 - to factor out all of
those commonalities.
1257:56 - The syntax is going to
be a little curious,
1257:58 - but it functionally is
pretty straightforward.
1258:01 - Let me go ahead and do this.
1258:02 - Let me go ahead and copy
the contents of index.html.
1258:06 - Let me go into my templates
directory and code a file that,
1258:09 - by default, is called layout.html.
1258:12 - And let me go ahead, and per
your answer, copy all of those
1258:15 - commonalities into
this file now instead.
1258:18 - So here I have a file
called layout.html.
1258:21 - I don't want to give every page the same
title, maybe, but for now that's OK.
1258:26 - I'm going to call everything hello.
1258:27 - But in the body of the page,
what I'm going to do here is just
1258:30 - have a placeholder for actual
contents that do change.
1258:35 - So in this layout, I'm
going to go ahead in here
1258:38 - and just put in the body of my
page, how about this syntax?
1258:42 - And this is admittedly new.
1258:44 - Block body, and then percent
sign close curly brace.
1258:48 - And then I'm going to do end block.
1258:50 - So a curious syntax here, but
this is more template syntax.
1258:55 - The other template syntax we saw
before was the two curly braces.
1258:59 - That's for just plugging in values.
1259:01 - There's this other syntax with Flask
that allows you to, say, a single curly
1259:05 - brace, a percent sign, and then some
functionality like this defining
1259:10 - a block.
1259:10 - And this one's a little weird
because there's literally
1259:13 - nothing between the close curly
and the open curly brace here.
1259:16 - But let's see what this can do for us.
1259:19 - Let me now go into my index.html, which
is where I borrowed most of that code
1259:25 - from, and let me focus on
what is minimally different.
1259:28 - The only thing that's really different
in this page, title aside, is the form.
1259:33 - So let me go ahead and just cut
that form out to my clipboard.
1259:37 - Let me change the first
line of index.html
1259:40 - to say this file is going
to extend layout.html,
1259:46 - and notice I'm using
the curly braces again.
1259:48 - And this file is going to
have its own body block
1259:52 - inside of which is just
the HTML that I actually
1259:57 - want to make specific to this page.
1259:59 - And I'll keep my indentation
nice and neat here.
1260:02 - And let's consider what I've done.
1260:03 - This is starting to look
weird fast, and this is now
1260:05 - a mix of HTML with templating code.
1260:09 - Index.html, first line now says, hey,
Flask, this file extends layout.html,
1260:15 - whatever that is.
1260:17 - This next line, three through
10, says, hey, Flask, here
1260:20 - is what I consider my body block to be.
1260:23 - Plug this into the layout placeholder.
1260:27 - Therefore, so if I now go back
to layout.html, and layout.html,
1260:33 - it's almost all HTML by contrast.
1260:35 - But there is this placeholder, and
if I want to put a default value,
1260:38 - I could say-- whoops.
1260:39 - If I want to put a
default value, I could
1260:41 - put a default value there just in case
some page does not have a body block.
1260:45 - But in general, that's
not going to be relevant.
1260:47 - So this is just a placeholder,
albeit a little verbose, that says
1260:50 - plug in the page-specific
content right here.
1260:54 - So if I go now into greet.html,
this one's even easier.
1260:58 - I'm going to cut this content
and get rid of everything else.
1261:01 - Greet.html 2 is going to extend
layouts, dot HTML extends plural,
1261:06 - and then I'm going to have my body block
here simply be this one line of code.
1261:13 - And then I'm going to go
ahead and end that block here.
1261:15 - These are not HTML tags,
this is not HTML syntax.
1261:18 - Technically, the syntax we keep
seeing with the curly braces,
1261:22 - and these now curly braces with percent
signs, is an example of Jinja syntax,
1261:28 - J-I-N-J-A, which is a language,
that some humans invented,
1261:33 - for this purpose of templating.
1261:35 - And the people who
invented Flask decided,
1261:37 - we're not going to come
up with our own syntax,
1261:40 - we're going to use these other
people's syntax called Jinja syntax.
1261:44 - So again, there starts to be
at this point in the course,
1261:46 - and really in computing, a lot of
sharing, now, of ideas and sharing
1261:50 - of code.
1261:50 - So Flask is using this syntax, but
other libraries and other languages
1261:54 - might also too.
1261:57 - All right, so now
index.html is half HTML,
1262:01 - half templating code, Jinja syntax.
1262:04 - Greet.html is almost all
Jinja syntax, no tags even,
1262:08 - but because they both
extend layout.html,
1262:11 - now I think I've improved
the design of this thing.
1262:14 - If I go back to app.py, none
of this really needs to change.
1262:18 - I don't change my templates
to mention layout.html,
1262:22 - that's already implicit in the fact
that we have the extends keyword.
1262:25 - So now if I go ahead and
open my terminal window,
1262:28 - go back to the same folder
as app.py and do Flask run,
1262:32 - all right, my application
is running on port 5000.
1262:35 - Let me now go back to the /route
in my browser and hit Enter,
1262:39 - I have this form again.
1262:40 - And just as a little check, let
me view the source of the page
1262:44 - that my browser is seeing.
1262:45 - And there's all of the code.
1262:48 - No mention of Jinja, no curly
braces, no percent signs.
1262:51 - It's just HTML.
1262:52 - It's not quite pretty printed in
the same way, but that's fine.
1262:54 - Because now, we're starting to
dynamically generate websites.
1262:57 - And by that, I mean this isn't
quite indented nicely or perfectly.
1263:00 - That's fine.
1263:01 - If it's indented in the
source code version,
1263:03 - doesn't matter what the
browser really sees.
1263:05 - Let me now go ahead and type
in my name, click Submit.
1263:08 - I should see, yep, hello, David.
1263:10 - Let me go ahead and view
the source of this page.
1263:12 - And we'll see almost the same
thing with what's plugged in there.
1263:16 - So this is, now, web programming
in the literal sense.
1263:19 - I did not hard code a page that says
hello comma David, hello comma Carter,
1263:23 - hello comma Emma.
1263:24 - I hardcoded a page that has a
template with a placeholder,
1263:27 - and now I'm using actual
logic, some code in app.py,
1263:31 - to actually tell the server
what to send to the browser.
1263:37 - All right, any questions,
then, on where we're at here?
1263:42 - This is now a web application.
1263:45 - Simple though it is, it's
no longer just a web site.
1263:49 - Yeah?
1263:49 - AUDIENCE: Is what we did just better
for design or for memory [INAUDIBLE]??
1263:54 - DAVID: It better for
design or for memory?
1263:57 - Both.
1263:57 - It's definitely better
for design because, truly,
1263:59 - if we had a third page,
fourth page, I would really
1264:02 - start just resorting to copy paste.
1264:03 - And as you saw with home page,
often, in the head of your page,
1264:07 - you might want to include some CSS
files like Bootstrap or something else.
1264:10 - You might want to have
other information up there.
1264:13 - If you had to upgrade the version of
Bootstrap or you change libraries,
1264:16 - so you want to change
one of those lines,
1264:18 - you would literally have to go into
three, four, a hundred different files
1264:21 - to make one simple change.
1264:23 - So that's bad design.
1264:25 - And in terms of memory, yes.
1264:26 - Theoretically, the server, because
it knows there's this common layout,
1264:30 - it can theoretically do some
optimizations underneath the hood.
1264:33 - Flask is probably doing that, but
not in the mode we're using it.
1264:36 - We're using it in
development mode, which
1264:38 - means it's typically
reloading things each time.
1264:41 - Other questions on this application?
1264:47 - Anything at all?
1264:48 - All right, so let me ask a question,
not just in terms of the code design.
1264:54 - What about the implications for privacy?
1264:56 - Why is this maybe not the best design
for users, how I've implemented this?
1265:02 - I've used a web form, but--
1265:04 - Yeah?
1265:05 - AUDIENCE: For some reason,
you wanted your name.
1265:06 - So these private people
could just look at the URL.
1265:08 - DAVID: Yeah.
1265:09 - I mean, if you have a
nosy sibling or roommate
1265:11 - and they have access to
your laptop and they just
1265:13 - go trolling through your
autocomplete or your history,
1265:15 - like, literally what you typed into
a website is going to be visible.
1265:18 - Not a big deal if it's your name, but
if it's your password, your credit
1265:21 - card or anything else
that's mildly sensitive,
1265:23 - you probably don't want it
ending up in the URL at all
1265:26 - even if you're in
incognito mode or whatnot.
1265:29 - You just don't want to expose yourself
or your users to that kind of risk.
1265:34 - So perhaps, we can do better than that.
1265:35 - And fortunately, this one
is actually an easy change.
1265:38 - Let me go into my
index.html where my form is.
1265:43 - And in my form, I can just change
the method from GET to POST.
1265:48 - It's still going to send key
value pairs to the server,
1265:50 - but it's not going to
put them in the URL.
1265:52 - The upside of which is that we
can assuage this privacy concern,
1265:56 - but I'm going to have to
make one other change too.
1265:58 - Because now, if I go ahead and run
Flask again after making that change,
1266:02 - and I now reload the form to make
sure I have the latest version.
1266:07 - You should be in the habit
of going to View, Developer,
1266:10 - View Source, or Developer
Tools just to make sure
1266:12 - that what you're seeing in your
browser is what you intend.
1266:15 - And yes, I do see what I wanted.
1266:18 - Method equals POST now.
1266:19 - Let me go ahead and type
in David and click Submit.
1266:22 - Now I get a different error.
1266:24 - This one is HTTP 405,
method not allowed.
1266:28 - Why is that?
1266:30 - Well, in my Flask application, I've
only defined a couple of routes so far.
1266:34 - One of which is for slash,
then that worked fine.
1266:37 - One of which is for /greet,
and that used to work fine.
1266:40 - But apparently, what Flask is doing
is it only supports GET by default.
1266:46 - So if I want to change this route to
support different methods, I can say,
1266:51 - quote unquote "POST" inside
of this parameter here.
1266:56 - So that now, I can actually
support POST, not just GET.
1267:01 - And if I now restart Flask, so Flask
run, Enter, and I go back to this URL.
1267:08 - Let me go back one screen
to the form, reload
1267:11 - the page just to make
sure I have the latest
1267:13 - even though nothing there has changed.
1267:14 - Type David and click Submit now,
now I should see hello, world.
1267:18 - Notice that I'm at the greet route,
but there's no mention of name
1267:25 - equals anything in the URL.
1267:28 - All right, so that's an
interesting takeaway.
1267:30 - It's a simple change, but whereas GET
puts things in the URL, POST does not.
1267:35 - But it still works so long
as you tweak the backend
1267:37 - to look as a POST request, which
means look deeper in the envelope.
1267:41 - It's not going to be as simple
as looking at the URL itself.
1267:44 - Why shouldn't we just always use POST?
1267:49 - Why not use POST everywhere?
1267:53 - Any thoughts?
1267:55 - Right, because it's obnoxious to
be putting any information in URLs
1267:58 - if you're leaving these little
breadcrumbs in your history and people
1268:02 - can poke around and see
what you've been doing.
1268:07 - Yeah, what do you think?
1268:09 - AUDIENCE: You're supposed
to duplicate [INAUDIBLE]..
1268:15 - DAVID: Yeah.
1268:15 - I mean, if you get rid of GET
requests and put nothing in the URL,
1268:18 - your history, your autocomplete,
gets pretty less useful.
1268:22 - Because none of the information is
there for storage, so you can't just
1268:25 - go through the menu and hit Enter.
1268:26 - You'd have to re-fill out the form.
1268:28 - And there's this other
symptom that you can see here.
1268:30 - Let me zoom out and let
me just reload this page.
1268:33 - Notice that you'll get
this warning, and it'll
1268:34 - look different in Safari and Firefox
and Edge and Chrome here, confirm form.
1268:39 - args
1268:40 - So your browser might remember what
your inputs were and that's great,
1268:43 - but just while you're on the page.
1268:45 - And this is in contrast to GET,
where the state is information.
1268:50 - Like, key value pairs is
embedded in the URL itself.
1268:53 - And if you looked at an
email I sent earlier today,
1268:56 - I deliberately linked
to https://www.google.c
1268:59 - om/search?q=what+time+is+it.
1269:06 - This is, by definition, a GET
request when you click on it.
1269:11 - Because it's going to grab the
information, the key value pair,
1269:14 - from the URL, send it to Google
server, and it's just going to work.
1269:18 - And the reason I sent this
via email earlier was I
1269:20 - wanted people to very quickly be able
to check what is the current time.
1269:23 - And so I can sort automate the process
of creating a Google search for you,
1269:27 - but that you induce when
you click that link.
1269:29 - If Google did not support GET, they
only supported this, the best I could do
1269:35 - is send you all to this
URL which, unfortunately,
1269:38 - has no useful information.
1269:39 - I would have had to add to my
email, by the way, type in the words
1269:42 - what time is it.
1269:44 - So it's just bad for usability.
1269:46 - So there, too, we might have design
when it comes to the low level code,
1269:49 - but also the design when it comes
to the user experience, or UX,
1269:53 - as a computer scientist would call it.
1269:54 - Just in terms of what you want
to optimize for, ultimately.
1269:58 - So GET and POST both have their roles.
1270:00 - It depends on what kind of
functionality you want to provide
1270:02 - and what kind of sensitivity
there might be around it.
1270:06 - All right, any questions, then, on
this, our first web application?
1270:10 - Super simple, just gets someone's
name and prints it back out.
1270:13 - But we now have all
the plumbing with which
1270:16 - to create really most anything we want.
1270:21 - All right, let's go ahead
and take a five minute break.
1270:24 - And when we come back, we'll add to
this some first year intramural sports.
1270:27 - All right, so we are back.
1270:30 - And recall that the last
thing we just changed
1270:32 - was the route to use
POST instead of GET.
1270:34 - So gone is my name and
any value in the URL.
1270:37 - But there was a subtle bug or change
here that we didn't call out earlier.
1270:44 - I did type David into the
form and I did click Submit,
1270:47 - and yet here it is
saying hello comma world.
1270:50 - So that seems to be
broken all of a sudden,
1270:53 - even though we added support for POST.
1270:56 - But something must be wrong.
1270:58 - Logically, it must be the case here.
1271:01 - Intuitively, that if I'm seeing
hello, world, that's the default value
1271:05 - I gave the name variable.
1271:07 - It must be that it's
not seeing a key called
1271:10 - name in request.args, which is this.
1271:14 - Gives you access to
everything after the URL.
1271:16 - That's because there's this
other thing we should know about,
1271:19 - which is not just
request.args but request.form.
1271:21 - These are horribly named, but
request.args is for GET requests,
1271:26 - request.form is for POST requests.
1271:28 - Otherwise, they're pretty
much functionally the same.
1271:31 - But the onus is on you,
the user or the programmer,
1271:33 - to make sure you're using the right one.
1271:35 - So I think if we want
to get rid of the world
1271:38 - and actually see what
I, the human, typed in,
1271:41 - I think I can just change
request.args to request.form.
1271:45 - Still dot get, still
quote unquote "name,"
1271:47 - and now, if I go ahead and rerun
Flask in my terminal window,
1271:52 - go back to my browser, go
back to-- and actually,
1271:54 - I won't even go back to the form.
1271:56 - I will literally just reload,
Command R or Control R,
1271:59 - and what this warning is
saying is it's going to submit
1272:02 - the same information to the website.
1272:05 - When I click Continue, now I
should see hello comma David.
1272:08 - So again, you, too, are
going to encounter, probably,
1272:11 - all these little subtleties.
1272:12 - But if you focus on, really, the
first principles of last week,
1272:15 - like what it HTTP, how
does it get request work,
1272:18 - how does a POST request
work now, you should
1272:20 - have a lot of the mental
building blocks with which
1272:22 - to solve problems like these.
1272:25 - And let me give you one other mental
model, now, for what it is we're doing.
1272:28 - This framework called Flask is just an
example of many different frameworks
1272:32 - that all implement the same
paradigm, the same way of thinking
1272:36 - and the same way of
programming applications.
1272:38 - And that's known as MVC,
model view controller.
1272:41 - And here's a very simple diagram
that represents the process that you
1272:46 - and I have been implementing thus far.
1272:48 - And actually, this is more than
we've been implementing thus far.
1272:51 - In app.py is what a programmer
would typically call the controller.
1272:55 - That's the code you're
writing, this are called
1272:57 - business logic that makes all of the
decisions, decides what to render,
1273:01 - what values to show, and so forth.
1273:03 - In layout.html, index.html, greet.html
is the so-called view templates
1273:09 - that is the visualizations
that the human actually
1273:12 - sees, the user interface.
1273:14 - Those things are dumb, they pretty
much just say plop some values here.
1273:18 - All of the hard work is done in app.py.
1273:20 - So controller, AKA app.py, is where
your Python code generally is.
1273:26 - And in your view is where your HTML and
your Jinja code, your Jinja templating,
1273:31 - the curly braces, the curly braces
with percent signs, usually is.
1273:35 - We haven't added an M
to MVC yet model, that's
1273:39 - going to refer to things
like CSV files or databases.
1273:42 - The model, where do you keep
actual data, typically long term.
1273:46 - So we'll come back to
that, but this picture,
1273:47 - where you have one of these-- each of
these components communicating with one
1273:52 - another is representative of
how a lot of frameworks work.
1273:55 - What we're teaching today, this week,
is not really specific to Python.
1273:58 - It's not really specific to Flask,
even though we're using Flask.
1274:01 - It really is a very
common paradigm that you
1274:03 - could implement in Java, C sharp, or
bunches of other languages as well.
1274:08 - All right, so let's now
pivot back to VS Code here.
1274:12 - Let me stop running
Flask, and let me go ahead
1274:14 - and create a new folder altogether
after closing these files here.
1274:19 - And let me go ahead and create
a folder called FroshIMS,
1274:24 - representing freshman intramural
sports or first year intramural sports
1274:27 - that I can now CD into.
1274:29 - And now I'm going to code an app.py.
1274:32 - And in anticipation, I'm going to
create another templates directory.
1274:36 - This one in the FroshIMS folder.
1274:38 - And then in my templates directory,
I'm going to create a layout.html.
1274:42 - and I'm just going to
get myself started here.
1274:44 - FroshIMS will go here.
1274:46 - I'm just copying my layout
from earlier because most
1274:48 - of my interesting work, this time, is
now going to be, initially, in app.py.
1274:53 - So what is it we're creating?
1274:54 - So literally, the very first
thing I wrote as a web application
1274:58 - 20 years ago, was a site that
literally looked like this.
1275:02 - So I was like a sophomore
or junior at the time.
1275:04 - I'd taken CS50 and a
follow-on class only.
1275:06 - I had no idea how to do web programming.
1275:08 - Neither of those two courses taught
web programming back in the day.
1275:11 - So I taught myself, at the
time, a language called Perl.
1275:14 - And I learned a little something about
CSV files, and I sort of read enough--
1275:18 - can't even say googled enough,
because Google didn't come out
1275:20 - for a couple of years later.
1275:22 - Read enough online to figure out how to
make a web application so that students
1275:26 - on campus, first years,
could actually register
1275:29 - via a website for intramural sports.
1275:32 - Back in my day, you would
literally fill out a piece of paper
1275:35 - and then walk it across the yard to
Wigglesworth Hall, one of the dorms,
1275:38 - slide it under the dorm
of the Proctor or RA,
1275:40 - and thus you were
registered for sports so.
1275:43 - 1996, 1997.
1275:45 - We could do better by then.
1275:46 - There was an internet,
just wasn't really being
1275:48 - used much on campus or more generally.
1275:50 - So background images
that repeat infinitely
1275:54 - was in vogue, apparently, at the time.
1275:56 - All of this was like images
that I had to hand make
1275:58 - because we did not have the features
that JavaScript and CSS nowadays have.
1276:03 - So it was really just HTML, and it was
really just controller code written,
1276:07 - not in Python, but in Perl.
1276:09 - And it was really just
the same building blocks
1276:12 - that we hear already today now have.
1276:15 - So we'll get rid of all of
the imagery and focus more
1276:17 - on the functionality and the
aesthetics, but let's see
1276:19 - if we can whip up a web
application via which someone could
1276:23 - register for one such intramural sport.
1276:26 - So in app.py, me go ahead and
import some familiar things now.
1276:29 - From Flask, let's import
capital Flask, which
1276:33 - is that function we need to kick
everything kick start everything.
1276:36 - Render templates, so we have the
ability to render, that is print out,
1276:39 - those templates, and request
so that we have the ability
1276:42 - to get at input from the human.
1276:44 - Let me go ahead and create
the application itself
1276:46 - using this magical incantation here.
1276:49 - And then let's go ahead and define a
route for slash for instance first.
1276:56 - I'm going to define a
function called index.
1276:58 - But just to be clear, this
function could be anything.
1277:00 - Foo, bar, baz, anything else.
1277:03 - But I tend to name
them in a manner that's
1277:05 - consistent with what
the route is called.
1277:07 - But you could call it
anything you want, it's
1277:09 - just the function that will get
called for this particular route.
1277:12 - Now, let me go ahead here
and just get things started.
1277:14 - Return, render template of index.html.
1277:18 - Just keep it simple, nothing more.
1277:19 - So there's nothing really
FroshIM specific about this here,
1277:22 - I just want to make sure I'm
doing everything correctly.
1277:25 - Meanwhile, I've got my layout.
1277:27 - OK, let me go ahead, and in my
templates directory, code a file
1277:31 - called index.html.
1277:33 - And let's just do extends
layout.html at the top
1277:40 - just so that we get
benefit from that template.
1277:42 - And down here, I'm just
going to say to do.
1277:44 - Just so that I have something
going on visually to make sure
1277:47 - I've not screwed up yet.
1277:48 - In my FroshIMS directory,
let me do Flask run.
1277:51 - Let me now go back to my previous URL,
which used to be my hello example.
1277:54 - But now, I'm serving
up the FroshIM site.
1277:59 - Oh, and I'm seeing nothing.
1278:01 - That's because I
screwed up accidentally.
1278:04 - What did I do wrong in index.html?
1278:12 - What am I doing wrong?
1278:13 - This file extends layout.html, but--
1278:16 - AUDIENCE: You left out the block tag?
1278:17 - DAVID: Yeah.
1278:18 - I forgot to tell Flask what
to plug into that layout.
1278:22 - So I just need to say block body, and
then in here, I can just say to do
1278:26 - or whatever I want to
eventually get around to.
1278:28 - Then end the block.
1278:30 - Let me end this tag here.
1278:31 - OK, so now it looks ugly, more cryptic.
1278:34 - But this is, again, the
essence of doing templating.
1278:36 - Let me now restart Flask up
here, let me go back to the page.
1278:41 - Let me reload.
1278:41 - Crossing my fingers this
time, and there we go.
1278:43 - To do.
1278:44 - So it's not the application
I want, but at least I
1278:46 - know I have some of the
plumbing there by default.
1278:48 - All right, so if I want the
user to be able to register
1278:50 - for one of these sports,
let's enhance, now,
1278:53 - index.html to actually
have a form that's
1278:56 - maybe got a dropdown menu for all of
the sports for which you can register.
1278:59 - So let me go into this template here.
1279:01 - And instead of to do, let's
go ahead and give myself,
1279:05 - how about an H1 tag that just says
register so the user knows what it is
1279:08 - they're looking at.
1279:09 - How about a form tag
that's going to use POST,
1279:13 - just because it's not really necessary
to put this kind of information
1279:16 - in the URL.
1279:17 - The action for that, how
about we plan to create
1279:20 - a register route so that we're sending
information from to a register route.
1279:24 - So we'll have to come back to that.
1279:26 - In here, let me go ahead and create,
how about an input with autocomplete
1279:32 - equals off, auto focus on.
1279:35 - How about a name equals
name, because I'm
1279:37 - going to ask the student for their
name using placeholder text of quote
1279:40 - unquote "name."
1279:41 - And the type of this box will be text.
1279:43 - So this is pretty much
identical to before.
1279:45 - But if you've not seen this
yet, let's create a select menu,
1279:48 - a so-called dropdown menu in HTML.
1279:51 - And maybe the first option
I want to be in there
1279:54 - is going to be, oh, how
about the current three
1279:58 - sports for the fall, which are
basketball, and another option
1280:05 - is going to be soccer,
and a third option is
1280:07 - going to be ultimate frisbee for
first year intramurals right now.
1280:13 - So I've got those three options.
1280:14 - I've got my form.
1280:16 - I haven't implemented my route yet,
but this feels like a good time
1280:20 - to go back now and check
if my form has reloaded.
1280:23 - So let me go ahead and
stop and start Flask.
1280:26 - You'll see there's ways to
automate the process of restarting
1280:28 - the server that we'll do for
you for problem set nine,
1280:31 - so you don't have to
keep stopping Flask.
1280:32 - Let me reload my index route
and OK, it's not that pretty.
1280:36 - It's not though, maybe--
1280:38 - nor was this.
1280:39 - But it now has at least
some functionality
1280:41 - where I can type in my name
and then type in the sport.
1280:44 - Now, I might be biasing
people toward basketball.
1280:47 - Like UX wise, user experience
wise, it's obnoxious to precheck
1280:51 - basketball but not the others.
1280:53 - So there's some little
tweaks we can make there.
1280:55 - Let me go back into index.html.
1280:57 - Let me create an empty option up here
that, technically, this option is not
1281:04 - going to have the name of any sports.
1281:05 - But it's just going to have a
word I want the human to see,
1281:08 - so I'm actually going to disable this
option and make it selected by default.
1281:12 - But I'm going to say sport up here.
1281:15 - And there's different ways to do this,
this is just one way of creating,
1281:18 - essentially, a--
1281:20 - whoops, option.
1281:21 - Yep, that looks right.
1281:22 - Creating a placeholder
sports so that the user
1281:24 - sees something in the dropdown.
1281:26 - Let me go ahead and restart
Flask, reload the page,
1281:29 - and now it's just going
to be marginally better.
1281:31 - Now you see sport that's
checked by default,
1281:34 - but you have to check one of
these other ones ultimately.
1281:37 - All right, so that's pretty good.
1281:38 - So let me now type in David.
1281:40 - I'll register for ultimate frisbee.
1281:43 - OK, I definitely forgot something.
1281:46 - Submit button.
1281:47 - So let's add that.
1281:48 - All right, so input type equals submit.
1281:52 - All right, let's put that in.
1281:54 - Restart Flask, reload.
1281:56 - Getting better.
1281:57 - Submit could be a little prettier.
1281:58 - Recall that we can change some of
these HTTP-- these HTML attributes.
1282:03 - The value of this button
should be register, maybe,
1282:05 - just to make things a little prettier.
1282:07 - Let me now reload the page and register.
1282:10 - All right, so now we really have
the beginnings of the user interface
1282:13 - that I created some years ago to let
people actually register for the sport.
1282:17 - So let's go, now, and create maybe
the other route that we might need.
1282:21 - Let me go into app.py.
1282:22 - And in here, if we want to
allow the user to register,
1282:25 - let's do a little bit of error checking
which I promised we'd come back to.
1282:28 - What could the user do wrong?
1282:30 - Because assume that they will.
1282:32 - One, they might not type their name.
1282:34 - Two, they might not choose a sport.
1282:36 - So they might just submit an empty form.
1282:38 - So that's two things we
could check for, just
1282:40 - so that we're not scoring bogus
entries in our database, ultimately.
1282:43 - So let's create another
route called greet, /greet.
1282:47 - And then in this route, let's
create a function called greet
1282:50 - but can be called anything we want.
1282:52 - And then let's go ahead, and in
the greet function, let's go ahead
1282:56 - and validate the submission.
1282:57 - So a little comment to myself here.
1282:59 - How about if there is not a
request.form GET name value,
1283:08 - so that is if that
function returns nothing,
1283:10 - like quote unquote, or the
special word none in Python.
1283:14 - Or request.form.get"sport" not
in quote unquote, what were they?
1283:25 - Basketball, the other one was soccer,
and the last was ultimate frisbee.
1283:32 - Getting a little long, but notice
what I'm-- the question I'm asking.
1283:35 - If the user did not
give us a name, that is,
1283:39 - if this function returns
the equivalent of false,
1283:41 - which is, quote unquote, or literally
none if there's no such parameter.
1283:45 - Or if the sport the user provided is
not some value in basketball, soccer,
1283:52 - or ultimate frisbee, which I've defined
as a Python list, then let's go ahead
1283:56 - and just yell at the user in some way.
1283:57 - Let's return render
template of failure.html.
1284:02 - And that's just going to be some
error message inside of that file.
1284:06 - Otherwise, if they get
this far, let's go ahead
1284:08 - and confirm registration
by just returning-- whoops,
1284:12 - returning render template quote
unquote "success" dot HTML.
1284:18 - All right, so a couple
quick things to do.
1284:20 - Let me first go in and in
my templates directory,
1284:25 - let's create this failure.html file.
1284:28 - And this is just meant to
be a message to the user
1284:31 - that they fail to provide
the information correctly.
1284:34 - So let me go ahead and in failure.html.
1284:37 - not repeat my past mistake.
1284:40 - So let me extend layout.html and in
the block body, you are not registered.
1284:44 - I'll just yell at them like that so
that they know something went wrong.
1284:47 - And then let me create one other
file called success.html, that
1284:52 - similarly is mostly just Jinja syntax.
1284:54 - And I'm just going to say for
now, even though they're not
1284:57 - technically registered in any
database, you are registered.
1284:59 - That's what we mean by success.
1285:02 - All right, so let me go ahead,
and back in my FroshIMS,
1285:05 - directory run Flask run.
1285:07 - Let me go back to the form and reload.
1285:09 - Should look the same.
1285:10 - All right, so now let me
not cooperate and just
1285:13 - immediately click Register impatiently.
1285:17 - OK, what did I do wrong.
1285:20 - Register-- oh, I'm
confusing our two examples.
1285:24 - All right, I spotted the error.
1285:26 - What did I do wrong?
1285:29 - Unintentional.
1285:32 - There's where I am, what did
I actually invent over here?
1285:39 - Where did I screw up?
1285:42 - Anyone?
1285:44 - AUDIENCE: Register, not greet.
1285:45 - DAVID: Thank you.
1285:46 - So register, not greet.
1285:47 - I had last example on my mind,
so the route should be register.
1285:50 - Ironically, the function could be greet,
because that actually doesn't matter.
1285:54 - But to keep ourselves sane, let's
use the one and the same words there.
1285:57 - Let me go ahead now and
start Flask as intended.
1286:00 - Let me reload the form just
to make sure all is working.
1286:02 - Now, let me not cooperate and be
a bad user, clicking register--
1286:06 - oh my God.
1286:07 - OK, other unintended mistake.
1286:10 - But this one we've seen before.
1286:12 - Notice that by default,
route only support GET.
1286:15 - So if I want to
specifically support POST,
1286:18 - I have to pass in, by a methods
parameter, a list of allowed route
1286:25 - methods that could be
GET comma POST, but if I
1286:28 - don't have no need for a GET in
this context, I can just do POST.
1286:32 - All right, now let's
do this one last time.
1286:34 - Reload the form to make sure
everything's OK, click Register,
1286:37 - and you are not registered.
1286:39 - So it's catching that.
1286:40 - All right, let me go ahead and
at least give them my name.
1286:42 - Register.
1286:43 - You are not registered.
1286:44 - Fine, I'm going to go ahead and be
David with ultimate frisbee register.
1286:49 - Huh.
1286:52 - OK.
1286:53 - What should I-- what
did I mean to do here?
1286:58 - All right, so let's figure this out.
1287:00 - How to debug something like this,
which is my third and final unintended,
1287:04 - unforced error?
1287:07 - How can we go about
troubleshooting this?
1287:10 - Turn this into the teachable moment.
1287:13 - All right, well first,
some safety checks.
1287:15 - What did I actually submit?
1287:17 - Let me go ahead and view page
source, a good rule of thumb.
1287:20 - Look at the HTML that you
actually sent to the user.
1287:23 - So here, I have an
input with a name name.
1287:27 - So that's what I
intended, that looks OK.
1287:29 - Ah, I see it already, even
though you, if you've never
1287:32 - used a select menu, you might
not know what, apparently,
1287:35 - is missing from here that I
did have for my text input.
1287:41 - Just intuitively, logically.
1287:45 - What's going through my
head, embarrassingly,
1287:47 - is, all right, if my form thinks
that it's missing a name or a sport,
1287:51 - how did I create a situation in which
name is blank or sport is blank?
1287:55 - Well, name, I don't think
it's going to be blank
1287:57 - because I explicitly gave
this text field a name name
1288:01 - and that did work last time.
1288:02 - I've now given a second input
in the form of the select menu.
1288:06 - But what seems to be missing here
that I'm assuming exists here?
1288:13 - It's just a dumb mistake I made.
1288:16 - What might be missing here?
1288:19 - If request.form gives you all of
the inputs that the user might
1288:23 - have typed in, let me
go into my actual code
1288:26 - here in my form and name equals sport.
1288:30 - I just didn't give a name to that input.
1288:32 - So it exists, and the
browser doesn't care.
1288:34 - It's still going to
display the form to you,
1288:36 - it just hasn't given it a unique name
to actually transmit to the server.
1288:40 - So now, if I'm not going
to put my foot in my mouth,
1288:42 - I think that's what I did wrong.
1288:44 - And again, my process
for figuring that out
1288:46 - was looking at my code,
thinking through logically,
1288:49 - is this right, is this right?
1288:50 - No, I was missing the name there.
1288:52 - So let's run Flask,
let's reload the form
1288:55 - just to make sure it's all defaults
again, type in my name and type
1288:59 - in ultimate frisbee, crossing
my fingers extra hard this time.
1289:04 - And there.
1289:05 - You are registered.
1289:06 - So I can emphasize--
1289:06 - I did not intend to
screw up in that way,
1289:08 - but that's exactly the right
kind of thought process
1289:10 - to diagnose issues like this.
1289:12 - Go back to the basics, go back to what
HTTP and what HTML forms are all about,
1289:16 - and just rule things in and out.
1289:18 - There's only a finite number of
ways I could have screwed that up.
1289:21 - Yeah?
1289:22 - AUDIENCE: Are you [INAUDIBLE].
1289:25 - DAVID: Excuse-- say a little louder?
1289:27 - AUDIENCE: I don't understand why
name equals sport [INAUDIBLE]..
1289:30 - DAVID: Why did name equal
sport address the problem?
1289:33 - Well, let's first go back to the HTML.
1289:35 - Previously, it was just the reality that
I had this user input dropdown menu,
1289:43 - but I never gave it a name.
1289:44 - But names, or more
generally, key value pairs,
1289:47 - is how information is sent
from a form to the server.
1289:51 - So if there's no name, there's no key to
send, even if the human types a value.
1289:56 - It would be like nothing equals ultimate
frisbee, and that just doesn't work.
1290:00 - The browser is just
not going to send it.
1290:02 - However, in app.py, I was naively
assuming that in my requests form,
1290:08 - there would be a name called
quote unquote "sport."
1290:11 - It could have been anything,
but I was assuming it was sport.
1290:13 - But I never told the form that.
1290:15 - And if I really wanted to dig in,
we could do a little something more.
1290:19 - Let me go back to the
way it was a moment ago.
1290:22 - Let me get rid of the name
of the sport dropdown menu.
1290:25 - Let me rerun Flask down here
and reload the form itself
1290:30 - after it finishes being served.
1290:33 - And now, let me do this.
1290:34 - View Developer Tools, and then let me
watch the Network tab, which recall,
1290:39 - we played around with
a little bit last week.
1290:41 - And we also played around with Curl,
which let us see the HTTP requests.
1290:44 - Here's another-- here's
what I would have
1290:46 - done if I still wasn't seeing the error
and was really embarrassed on stage.
1290:49 - I would have typed in my name as before,
I would have chosen ultimate frisbee.
1290:53 - I would have clicked register.
1290:55 - And now, I would have
looked at the HTTP request.
1290:59 - And I would click on Register here.
1291:01 - And just like we did last week, I
would go down to the request down here.
1291:04 - And there's a whole lot of stuff
that we can typically ignore.
1291:07 - But here, let me zoom
in, way at the bottom,
1291:10 - what Chrome's developer
tools are doing for me,
1291:13 - it's showing me all of the
form data that was submitted.
1291:16 - So this really would have
been my telltale clue.
1291:18 - I'm just not sending the sport,
even if the human typed it in.
1291:21 - And logically, because
I've done this before,
1291:23 - that must mean I didn't
give the thing a name.
1291:26 - But another good tool.
1291:28 - Like good programmers, web developers
are using these kinds of tools
1291:31 - all the time.
1291:32 - They're not writing bug-free code.
1291:34 - That's not the point to get to.
1291:35 - The point to get to is
being a good diagnostician,
1291:38 - I would say, in these cases.
1291:40 - OK, other questions on this?
1291:45 - Yeah.
1291:46 - AUDIENCE: What if you want to
edit one HTML in CSS, [INAUDIBLE]..
1291:52 - DAVID: I'm sorry, a little bit louder?
1291:54 - AUDIENCE: If you want to
edit in CSS or anything,
1291:57 - in HTML, once you have to fix
the template, how do you that?
1292:01 - DAVID: So how would you edit
CSS if you have these templates?
1292:05 - That process we'll
actually see before long.
1292:07 - It's almost going to be the exact same.
1292:09 - Just to give you a teaser for this,
and you'll do this in the problem set,
1292:12 - but we'll give you some distribution
code to automate this process.
1292:15 - You can absolutely still
do something like this.
1292:17 - Link href equals quote
unquote "styles" dot
1292:22 - CSS rel equals style sheet, that's one
of the techniques we showed last week.
1292:27 - The only difference today, using Flask,
is that all of your static files,
1292:31 - by convention, should go
in your static folder.
1292:34 - So the change you would
make in your layout
1292:36 - would be to say that styles dot
CSS is in your static folder.
1292:40 - And then, if I go into
my FroshIMS directory,
1292:43 - I can create a static folder.
1292:46 - I can CD into it,
nothing's there by default.
1292:48 - But if I now code a
file called styles.css,
1292:51 - I could now do something like this body.
1292:54 - And in here, I could say background
color, say FF0000 to make it red.
1293:05 - Let me go ahead now and restart
Flask in the FroshIMS directory.
1293:10 - Cross my fingers because
I'm doing this on the fly.
1293:12 - Go back to my form and reload.
1293:16 - Voila, now we've tied together
last week's stuff as well.
1293:19 - If I answered the right question?
1293:22 - AUDIENCE: [INAUDIBLE] change
one page and not the other.
1293:27 - DAVID: If you want to change one page
and not the other in terms of CSS?
1293:30 - AUDIENCE: Yes.
1293:31 - DAVID: That depends.
1293:32 - In that case, you might want to have
different CSS files for each page
1293:36 - if they're different.
1293:38 - You could use different classes in one
template than you did in the other.
1293:42 - There's different ways to do that.
1293:43 - You could even have a
placeholder in your layout
1293:47 - that allows you to plug in
the URL of a specific style
1293:52 - sheet in your individual files.
1293:53 - But that starts to get
more complicated quickly.
1293:56 - So in short, you can absolutely do it.
1293:58 - But typically, I would
say most websites try not
1294:01 - to use different style Sheets per page.
1294:03 - They reuse the styles
as much as they can.
1294:06 - All right, let me go ahead
and revert this real quick.
1294:08 - And let's start to add a little
bit more functionality here.
1294:11 - I'm going to go ahead and just
remove the static folder just so as
1294:14 - to not complicate things just yet.
1294:16 - And let's go ahead and just play
around with a different user interface
1294:19 - mechanism.
1294:19 - In my form here, the dropdown
menu is perfectly fine.
1294:23 - Nothing wrong with it.
1294:24 - But suppose that I wanted to
change it to checkboxes instead.
1294:27 - Maybe I want students to be able to
register for multiple sports instead.
1294:31 - Well, it might make sense to
clean this up in a couple of ways.
1294:34 - And let's do this.
1294:35 - Before we even get into the checkboxes,
there's one subtle bad design here.
1294:40 - Notice that I've hardcoded basketball,
soccer, and ultimate frisbee here.
1294:45 - And if you recall, in app.py, I also
enumerated all three of those here.
1294:49 - And any time you see copy paste
or the equivalent thereof,
1294:52 - feels like we could do better.
1294:54 - So what if I instead do this.
1294:56 - What if I instead give myself
a global variable of Sports,
1295:00 - I'll capitalize the word
just to connote that it's
1295:03 - meant to be constant even though
Python does not have constants, per se.
1295:07 - The first sport will be basketball.
1295:09 - The second will be soccer.
1295:11 - The third will be ultimate frisbee.
1295:15 - Now I have one convenient
place to store all of my sports
1295:19 - if it changes next semester
or next year or whatnot.
1295:22 - But notice what I could do to.
1295:24 - I could now do something like this.
1295:26 - Let me pass into my
index template a variable
1295:30 - called sports that's equal to
that global variable sports.
1295:34 - Let me go into my index now,
and this is really, now,
1295:37 - going to hint at the power of
templating and Jinja, in this case here.
1295:41 - Let me go ahead and get rid of all
three of these hard coded options
1295:45 - and let me show you some slightly
different syntax for sport, in sports.
1295:50 - Then end for.
1295:52 - We've not seen this end for syntax.
1295:54 - There's like end block syntax,
but it's as simple as that.
1295:57 - So you have a start and an end to your
block without indentation mattering.
1296:00 - Watch what I can do here.
1296:02 - Option curly brace
sport close curly brace.
1296:08 - Let me save that.
1296:09 - Let me go back into my
terminal window, do Flask run.
1296:12 - And if I didn't mess up
here, let me go back to this.
1296:16 - The red's going to go away
because I deleted my CSS.
1296:18 - And now I still have a sport
dropdown and all of those sports
1296:21 - are still there.
1296:22 - I can make one more improvement now.
1296:24 - I don't need to mention these
same sports manually in app.py.
1296:27 - I can now just say if the
user's inputed sport is not
1296:31 - in my global variable, sports,
and ask the same question.
1296:35 - And this is really
handy because if there's
1296:36 - another sport, for instance, that
gets added, like say football,
1296:41 - all I have to do is
change my global variable.
1296:43 - And if I reload the form now
and look in the dropdown, boom,
1296:47 - now I have support for a fourth sport.
1296:49 - And I can keep adding and adding there.
1296:51 - So here's where templating starts
to get really powerful in that
1296:55 - now, in this template, I'm using
Jinja's for loop syntax, which
1297:00 - is almost identical to
Python here, except you
1297:02 - need the curly brace and the percent
sign and you need the weird ending
1297:06 - and for.
1297:07 - But it's the same idea as in Python.
1297:08 - Iterating over something with a for loop
lets you generate more and more HTML.
1297:13 - And this is like every
website out there.
1297:14 - For instance, Gmail.
1297:15 - When you visit your inbox and you
see all of this big table of emails,
1297:19 - Google has not hardcoded
your emails manually.
1297:22 - They have grabbed them from a database.
1297:24 - They have some kind
of for loop like this,
1297:26 - and are just outputting table row after
table row or div after div dynamically.
1297:32 - All right, so now, let's go
ahead and change this, maybe,
1297:34 - to, oh, how about little
checkboxes or radio buttons.
1297:40 - So let me go ahead and do this.
1297:41 - Instead of a select menu, I'm going to
go ahead and do something like this.
1297:46 - For each of these sports let me go
ahead and output, not an option,
1297:52 - but let me go ahead and
output an input tag,
1297:55 - the name for which is quote
unquote "sport," the type of which
1297:59 - is checkbox, the value of which is
going to be the current "sport,"
1298:05 - quote unquote, and then afterward
I need to redundantly, seemingly,
1298:09 - output the sport.
1298:10 - So you see a word next to the checkbox.
1298:11 - And we'll look at the result
of this in just a moment.
1298:14 - So it's actually a little simpler
than a select menu, a dropdown menu,
1298:17 - because now watch what
happens if I reload my form.
1298:20 - Different user interface,
and it's not as pretty,
1298:24 - but it's going to allow users to sign
up for multiple sports at once now,
1298:27 - it would seem.
1298:28 - Now I can click on basketball
and football and soccer
1298:31 - or some other combination thereof.
1298:34 - If I view the page's source, this
is, again, the power of templating.
1298:37 - I didn't have to type out four
inputs, I got them now automatically.
1298:41 - And these things all have
the same name, but that's OK.
1298:45 - It turns out with Flask, if it sees
multiple values for the same name,
1298:48 - it's going to hand them back to you as
a list if you use the right function.
1298:52 - All right, but suppose we don't want
users registering for multiple sports.
1298:56 - Maybe capacity is an issue.
1298:57 - Let me go ahead and change this
checkbox to radio button, which
1299:01 - a radio button is mutually exclusive.
1299:03 - So you can only sign up for one.
1299:04 - So now, once I reload
the page, there we go.
1299:09 - It now looks like this.
1299:12 - And because I've given each of these
inputs the same name, quote unquote,
1299:16 - "sport," that's what makes
them mutually exclusive.
1299:20 - The browser knows all four of
these things are types of sports,
1299:23 - therefore I'm only going to let
you select one of these things.
1299:26 - And that's simply because
they all have the same name.
1299:29 - Again, if I view page source, notice
all of them, name equal sport,
1299:32 - name equals sport, name equals
sport, but what differs is the value
1299:36 - that each one is going to have.
1299:39 - All right, any questions,
then, on this approach?
1299:45 - All right.
1299:45 - Well, let me go ahead and
open a version of this
1299:47 - that I made in advance that's going
to now start saving the information.
1299:51 - So thus far, we're
not quite at the point
1299:53 - of where this website was, which
actually allowed the proctors to see,
1299:56 - like in a database, everyone
who had registered for sports.
1299:59 - Now, we're literally telling
students you are registered
1300:01 - or you are not registered,
but we're literally
1300:03 - doing nothing with this information.
1300:05 - So how might we go
about implementing this?
1300:08 - Well, let me go ahead
and close these tabs,
1300:10 - and let me go into what I call version
three of this in the code for today.
1300:15 - And let me go into my source
nine directory, FroshIMS3,
1300:19 - and let me go ahead and open up app.py.
1300:22 - So this is a premade version.
1300:24 - I've gotten rid of
football, in this case.
1300:26 - But I've added one
thing at the very top.
1300:28 - What's, in English, does
this represent on line seven?
1300:33 - What would you describe
what that thing is?
1300:38 - What are we looking at?
1300:40 - What do you think?
1300:41 - AUDIENCE: It's an empty dictionary.
1300:42 - DAVID: Yeah, it's an
empty dictionary, right?
1300:43 - Registrants is apparently
a variable on the left.
1300:45 - It's being assigned an empty
dictionary on the right.
1300:47 - And a dictionary, again,
is just key value pairs.
1300:49 - Here, again, is where dictionaries
are just such a useful data structure.
1300:53 - Why?
1300:53 - Because this is going to allow me
to remember that David registered
1300:56 - for ultimate frisbee, Carter
registered for soccer,
1300:59 - Emma registered for something else.
1301:00 - You can associate keys with
values, names with sports,
1301:04 - assuming a model where you can only
register for one sport for now.
1301:07 - And so let's see what the
logic is that handles this.
1301:12 - Here in my register route
in the code I've premade,
1301:16 - notice that I'm validating
the user's name.
1301:18 - Slightly differently from
before but same idea.
1301:20 - I'm using request.form.get
to get the human's name.
1301:23 - If not name, so if the
human did not type a name,
1301:26 - I'm going to output error.html.
1301:29 - But notice I've started to make
the user interface more expressive.
1301:33 - I'm telling the user, apparently,
with a message what they did wrong.
1301:37 - Well how?
1301:38 - I'm apparently passing
to my error template,
1301:41 - instead of just failure.html,
a specific message.
1301:44 - So let's go down this rabbit hole.
1301:45 - Let me actually go into
templates/error.hml, and sure enough,
1301:52 - here's a new file I created here, that
adorably is apparently going to have
1301:55 - a grumpy cat as part of the error
message, but notice what I've done.
1301:59 - In my block body I've got an H1 tag
that just says error, big and bold.
1302:04 - I then have a paragraph
tag that plugs in whatever
1302:07 - the error message is that the
controller, app.py, is passing in.
1302:10 - And then just for fun, I have a
picture of a grumpy cat connoting
1302:14 - that there was, in fact, an error.
1302:15 - Let's keep looking.
1302:16 - How do I validate sport?
1302:18 - I do similarly
request.form.get of sport,
1302:22 - and I store it in a
variable called sport.
1302:24 - If there's no such sport, that is the
human did not check any of the boxes,
1302:28 - then I'm going to render
error.html two, but I'm
1302:30 - going to give a different
message, missing sport.
1302:33 - Else, if the sport they did type in
is not in my sports global variable,
1302:38 - I'm going to render error.html,
but complain differently,
1302:41 - you gave me an invalid sport somehow.
1302:44 - As if a hacker went into
the HTML of the page,
1302:47 - changed it to add their
own sport like volleyball.
1302:49 - Even though it's not offered,
they submitted volleyball.
1302:51 - But that's OK, I'm rejecting it, even
though they might have maliciously
1302:55 - tried to send it to me by
changing the dom locally.
1302:58 - And then really, the magic is just this.
1303:00 - I remember that this
person has registered
1303:03 - by indexing into the
registrant dictionary
1303:06 - using the name the human typed in as the
key and assigning it a value of sport.
1303:11 - Why is this useful?
1303:12 - Well, I added one final route here.
1303:15 - I have a /registrants route with a
registrants function that renders
1303:19 - a template called registrants.html.
1303:21 - But it takes as input that
global variable just like before.
1303:26 - So let's go down this rabbit hole let me
go into templates registrants dot HTML.
1303:32 - Here's this template.
1303:34 - It looks a little crazy big,
but it extends the layout.
1303:38 - Here comes the body.
1303:39 - I've got an H1 tag that says
registrants, big and bold.
1303:42 - Then I've got a table
that we saw last week.
1303:44 - This has a table head that just
says name sport for two columns.
1303:48 - Then it has a table body where in,
using this for loop in Jinja syntax,
1303:53 - I'm saying, for each name
in the registrants variable,
1303:57 - output a table row, start tag,
and end tag, inside of which,
1304:01 - two table datas, two
cells, table data for name,
1304:04 - table data for registrants bracket name.
1304:08 - So it's very similar to Python syntax.
1304:10 - It essentially is Python syntax, albeit
with these curly braces and the percent
1304:14 - sign.
1304:15 - So the net effect here is what?
1304:17 - Let me open up my terminal
window, run Flask run.
1304:20 - Let me now go into the
form that I premade here.
1304:24 - So gone is football.
1304:26 - Let me go ahead and type in David.
1304:27 - Let me choose, oh, no sport.
1304:30 - Register.
1304:31 - Error, missing sport.
1304:33 - And there is the grumpy cat.
1304:34 - So missing sport, though,
specifically was outputed.
1304:37 - All right, fine.
1304:38 - Let me go ahead and say no name.
1304:41 - But I'll choose basketball.
1304:42 - Register.
1304:43 - Missing name.
1304:44 - All right, and let me
maliciously, now, do this.
1304:47 - Now I'm hacking.
1304:48 - Let me go into this.
1304:49 - I'll type my name, sure, but let
me go into the body tag down here.
1304:53 - Let me maliciously go down in ultimate
frisbee, heck with that, let's
1304:57 - volleyball.
1304:59 - Change that and change
this to volleyball.
1305:04 - Enter.
1305:05 - So now, I can register for
any sport I want to create.
1305:08 - Let me click register,
but invalid sports.
1305:11 - So again, that speaks to
the power and the need
1305:14 - for checking things on backend
and not trusting users.
1305:17 - It is that easy to hack websites
otherwise if you're not validating data
1305:21 - server side.
1305:22 - All right, finally, let's
just do this for real.
1305:24 - David is going to register
for ultimate frisbee.
1305:26 - Clicking register.
1305:27 - And now, the output is not
very pretty, but notice
1305:30 - I'm at the registrants route.
1305:32 - And if I zoom out, I have an HTML table.
1305:34 - Two columns, name and sport,
David and ultimate frisbee.
1305:38 - Let me go back to the form, letting me
pretend Carter walked up to my laptop
1305:41 - and registered for basketball.
1305:43 - Register.
1305:44 - Now we see two rows in this table,
David, ultimate frisbee, Carter,
1305:49 - basketball.
1305:49 - And if we do this one
more time, maybe Emma
1305:51 - comes along and registers
for soccer register.
1305:53 - All of this information is being
stored in this dictionary, now.
1305:58 - All right, so that's great.
1305:59 - Now we have a database, albeit in
the form of a Python dictionary.
1306:03 - But why is this, maybe, not
the best implementation?
1306:09 - Why is it not great?
1306:09 - Yeah.
1306:10 - AUDIENCE: You are storing [INAUDIBLE].
1306:18 - DAVID: Yeah.
1306:18 - So we're only storing this
dictionary in the computer's memory,
1306:21 - and that's great until I hit
Control C and kill Flask,
1306:24 - stopping the web server.
1306:26 - Or the server reboots, or maybe
I close my laptop or whatever.
1306:29 - If the server stops running,
memory is going to be lost.
1306:32 - RAM is volatile.
1306:34 - It's thrown away when you lose
power or stop the program.
1306:37 - So maybe this isn't the best approach.
1306:39 - Maybe it would be better
to use a CSV file.
1306:41 - And in fact, some 20 years ago,
that's literally what I did.
1306:43 - I stored everything in a CSV file.
1306:45 - But let's skip that step,
because we already saw last week,
1306:48 - or a couple of weeks ago
now, how we can use SQLite.
1306:51 - Let's see if we can't
marry in some SQL here
1306:54 - to store an actual
database for the program.
1306:58 - Let me go back here and
let me open up, say,
1307:00 - version four of this, which
is almost the same but it
1307:03 - adds a bit more functionality.
1307:05 - Let me close these tabs and let me
open up app.py now in version four.
1307:10 - So notice it's almost
the same, but at the top,
1307:13 - I'm creating a database connection
to a database called FroshIMS.db.
1307:18 - So that's a database
I created in advance.
1307:20 - So let's go down that rabbit hole.
1307:21 - What does it look like?
1307:22 - Let me make my terminal window bigger.
1307:24 - Let me run SQLite 3 of FroshIMS.db.
1307:28 - OK, I'm in.
1307:29 - Let's do .schema.
1307:30 - and let's just infer what
I designed this to be.
1307:33 - I have a table called registrants,
which has one, two, three columns.
1307:37 - An ID column that's an integer, a name
column that's text but cannot be null,
1307:42 - and a sport column that's
also text, cannot be null,
1307:44 - and the primary key is just ID.
1307:46 - So that I have a unique
ID for every registration.
1307:49 - Let's see if there's
anyone in there yet.
1307:51 - Select star from registrants.
1307:55 - OK, there's no one in there.
1307:56 - No one is yet registered for sports.
1307:58 - So let's go back to the
code and continue on.
1308:00 - In my code now, I've got
the same global variable
1308:03 - for validation and
generation of my HTML.
1308:07 - Looks like my index route is the same.
1308:09 - It's dynamically generating
the menu of sports.
1308:13 - Interestingly, we'll come back to this.
1308:14 - There's a deregister route
that's going to allow someone
1308:17 - to deregister themselves if
they want to exit the sport
1308:22 - or undo their registration.
1308:23 - But this is the juicy part.
1308:24 - Here's my new and
improved register route.
1308:27 - Still works on POST, so
some mild privacy there.
1308:30 - I'm validating the
submission as follows.
1308:33 - I'm getting the user's inputted
name, the user's inputted sport,
1308:36 - and if it is not a name or
the sport is not in sports,
1308:41 - I'm going to render failure.html.
1308:42 - So I kept it simple.
1308:43 - There's no cat in this version.
1308:45 - It just says failure.
1308:46 - Otherwise, recall how we
co-mingled SQL and Python before.
1308:50 - We're using CS50's SQL
library, but that just
1308:53 - makes it a little easier to execute
SQL queries and we're executing this.
1308:56 - Insert into registrants
name comma sport.
1309:00 - What two values, the name and the
sport, that came from that HTML form.
1309:05 - And then lastly, and this is a new
function that we're calling out
1309:08 - explicitly now, Flask
also gives you access
1309:10 - to a redirect function, which is how
safetyschool.org, Harvardsucks.org,
1309:17 - and all these other sites we
played around with last week
1309:19 - we're all implemented redirecting
the user from one place to another.
1309:23 - This Flask function
redirect comes from my just
1309:26 - having imported it at the
very top of this file.
1309:30 - It handles the HTTP 301 or 302 or 307
code, whatever the appropriate one is.
1309:35 - It does that for me.
1309:37 - All right, so that's it for
registering via this route.
1309:42 - Let's look at what the
registrant's route is.
1309:45 - Here, we have a new
route for /registrants.
1309:49 - And instead of just iterating
over a dictionary like before,
1309:52 - we're getting back, let's
see, db.execute of select star
1309:56 - from registrants.
1309:57 - So that's literally the programmatic
version of what I just did manually.
1310:00 - That gives me back a
list of dictionaries,
1310:02 - each of which represents
one row in the table.
1310:05 - Then, I'm going to render
register and start HTML,
1310:08 - passing in literally
that list of dictionaries
1310:12 - just like using CS50's
library in the past.
1310:15 - So let's go and look
at these-- that form.
1310:18 - If I go into templates and
open up registrants.html,
1310:24 - oh, OK, it's just a table like before.
1310:27 - And actually, let me change this
syntactically for consistency.
1310:30 - We have a Jinja for loop that
iterates over each registrant
1310:36 - and for each of them,
outputs a table row.
1310:39 - Oh, but this is interesting.
1310:40 - Instead of just having two columns
with the person's name and sport,
1310:44 - notice that I'm also
outputting a full-fledged form.
1310:47 - All right, this is
starting to get juicy.
1310:49 - So let's actually go back
to my terminal window,
1310:52 - run Flask, and actually see what
this example looks like now.
1310:56 - Let me reload the page.
1310:58 - All right.
1310:58 - In the home page, it
looks exactly the same.
1311:00 - But let me now register for something.
1311:02 - David for ultimate frisbee, register.
1311:04 - Oh, damn it.
1311:07 - Let's try this again.
1311:08 - David registering for
ultimate frisbee, register.
1311:12 - OK.
1311:13 - So good thing I have deregister.
1311:15 - So this is what it should now look like.
1311:16 - I have a page at the route called
/registrants that has a table with two
1311:22 - columns, name and sport,
David, ultimate frisbee.
1311:24 - But oh, wait, a third column.
1311:25 - Why?
1311:26 - Because if I view the page source,
notice that it's not the prettiest UI.
1311:30 - For every row in this table, I'm also
going to be outputting a form just
1311:34 - to deregister that user.
1311:36 - But before we see how that works,
let me go ahead and register Carter,
1311:40 - for instance.
1311:40 - So Carter will give you basketball.
1311:42 - Again, register.
1311:43 - The table grows.
1311:44 - Now, let me go back and let's
register Emma for soccer.
1311:48 - And the table should grow.
1311:50 - Before we look at that HTML, let's
go back to my terminal window.
1311:55 - Let's go into SQLite FroshIMS.
1311:59 - Let me go into FroshIMS, and let me
open up with SQLite 3 FroshIMS.db.
1312:10 - And now do select star from registrants.
1312:12 - And whereas, previously, when I executed
this there were zero people, now
1312:16 - there's indeed three.
1312:17 - So now we see exactly what's
going on underneath the hood.
1312:21 - So let's look at this
form now-- this page now.
1312:24 - If I want to unregister, deregister
one of these people specifically,
1312:29 - how do we do this?
1312:30 - Clicking one of those
buttons will indeed
1312:33 - delete the row from the database.
1312:36 - But how do we go about linking a web
page with Python code with a database?
1312:41 - This is the last piece of the puzzle.
1312:43 - Up until now, everything's been
with forms and also with URLs.
1312:47 - But what if the user is
not typing anything in,
1312:49 - they're just clicking a button?
1312:51 - Well, watch this.
1312:53 - Let me go ahead and
sniff the traffic, which
1312:55 - you could be in the habit of doing now.
1312:57 - Any time you're curious how a website
works, let me go to the Network tab.
1313:01 - And Carter, shall we
deregister you from basketball?
1313:05 - Let's deregister Carter and
let's see what just happened.
1313:09 - If I look at the deregister
request, notice that it's a POST.
1313:13 - The status code that
eventually came back as 302,
1313:16 - but let's look at the request itself.
1313:18 - All the headers there we'll ignore.
1313:21 - The only thing that
button submits, cleverly,
1313:25 - is an ID parameter, a key equaling two.
1313:29 - What does two presumably
represent or map to?
1313:34 - Where did this two come from?
1313:37 - It doesn't say Carter, it
doesn't say basketball?
1313:40 - What is it?
1313:41 - AUDIENCE: The second
person who registered.
1313:43 - DAVID: The second
person that registered.
1313:44 - So those primary keys that we started
talking about a couple of weeks
1313:47 - ago, why it's useful to be able to
uniquely identify a row in a table,
1313:50 - here is just one of the reasons why.
1313:53 - If it suffices for me just to
send the ID number of the person
1313:58 - I want to delete from the database,
because I can then have code like this.
1314:03 - If I go into app.py and I look at my
deregister route now, the last of them,
1314:09 - notice that I got this.
1314:11 - I first go into the form, and I get
the ID that was submitted, hopefully.
1314:15 - If there was, in fact, an ID, and
the form wasn't somehow empty,
1314:19 - I execute this line of code.
1314:21 - Delete from registrants where
ID equals question mark,
1314:24 - and then I plug-in that number,
deleting Carter and only Carter.
1314:29 - And I'm not using his name, because
what if we have two people named Carter,
1314:32 - two people named Emma or David?
1314:34 - You don't want to delete both of them.
1314:35 - That's why these unique
IDs are so, so important.
1314:39 - And here's another reason why.
1314:41 - You don't want to store
some things in URLs.
1314:45 - Suppose we went to this
URL, deregister?ID=3.
1314:53 - Suppose I, maliciously,
emailed this URL to Emma.
1314:58 - It doesn't matter so much
what the beginning is,
1315:00 - but supposed I emailed her this URL,
/deregister?ID=3, and I said, hey,
1315:06 - Emma, click this.
1315:07 - And it uses GET instead of POST.
1315:10 - What did I just trick her into doing?
1315:15 - What's going to happen
if Emma clicks this?
1315:17 - Yeah?
1315:17 - AUDIENCE: Deregistering?
1315:19 - DAVID: You would trick her
into deregistering herself.
1315:21 - Why?
1315:22 - Because if she's logged
into this FroshIMS website,
1315:24 - and the URL contains her ID just
because I'm being malicious,
1315:28 - and she clicked on it and
the website is using GET,
1315:31 - unfortunately, GET URLs
are, again, stateful.
1315:34 - They have state information in the URLs.
1315:36 - And in this case, it's enough
to delete the user and boom,
1315:39 - she would have accidentally
deregistered herself.
1315:42 - And this is pretty innocuous.
1315:43 - Suppose that this was
her bank account trying
1315:45 - to make a withdrawal or a deposit.
1315:47 - Suppose that this were some
other website, a Facebook URL,
1315:50 - trying to trick her into
posting something automatically.
1315:53 - Here, too, is another
consideration when you
1315:55 - should use POST versus GET,
because GET requests can
1315:59 - be plugged into emails sent via Slack
messages, text messages, or the like.
1316:04 - And unless there's a
prompt saying, are you sure
1316:06 - you want to deregister
yourself, you might blindly
1316:09 - trick the user into being
vulnerable to what's
1316:11 - called a cross-site request forgery.
1316:14 - A fancy way of saying you
trick them into clicking a link
1316:17 - that they shouldn't have, because
the website was using GET alone.
1316:21 - All right, any question, then,
on these building blocks?
1316:25 - Yeah.
1316:26 - AUDIENCE: What do the first
thing in the instance of the SQL
1316:32 - [INAUDIBLE] where they
have three slashes?
1316:34 - What does that mean?
1316:35 - DAVID: When three columns, you mean?
1316:37 - AUDIENCE: No, three forward slashes.
1316:42 - DAVID: The three forward slashes.
1316:44 - I'm not sure I follow.
1316:46 - AUDIENCE: Yeah, so I
think it's in [INAUDIBLE]..
1316:52 - DAVID: Sorry, it's in where?
1316:56 - Which file?
1316:57 - AUDIENCE: It's in [INAUDIBLE] scroll up.
1317:02 - [INAUDIBLE]
1317:06 - DAVID: Sorry, the other direction?
1317:07 - AUDIENCE: Yeah.
1317:08 - DAVID: OK.
1317:09 - AUDIENCE: [INAUDIBLE].
1317:12 - So please scroll a little bit more.
1317:16 - DAVID: Keep scrolling more?
1317:17 - Oh, this thing.
1317:18 - OK, sorry.
1317:20 - This is a URI, it's typical syntax
that's referring to the SQLite
1317:27 - protocol, so to speak, which means
use SQLite to talk to a file locally.
1317:32 - :// is just like you and I see in URLs.
1317:35 - The third slash, essentially,
means current folder.
1317:37 - That's all.
1317:38 - So it's a weird curiosity,
but it's typical
1317:41 - whenever you're referring to a
local file and not one that's
1317:43 - elsewhere on the internet.
1317:45 - That's a bit of an oversimplification,
but that's indeed a convention.
1317:48 - Sorry for not clicking earlier.
1317:50 - All right, let's do one
other iteration of FroshIMS
1317:53 - here just to show what I was
actually doing too, back in the day,
1317:56 - was not only storing these
things in CSV files, as I recall.
1317:59 - I was also automatically
generating an email
1318:02 - to the proctor in charge of
the intramural sports program
1318:04 - so that they would have sort of a
running history of people registering
1318:07 - and they could easily
reply to them as well.
1318:09 - Let me go into FroshIMS version
five, which I precreated here,
1318:13 - and let me go ahead and open
up, say, app.py this time.
1318:18 - And this is some code
that I wrote in advance.
1318:21 - And it looks a little scary at first
glance, but I've done the following.
1318:24 - I have now added the Flask
mail library to the picture
1318:30 - by adding Flask mail to
requirements.txt and running a command
1318:33 - to automatically install email
support for Flask as well.
1318:37 - And this is a little bit
cryptic, but it's honestly mostly
1318:39 - copy paste from the documentation.
1318:41 - What I'm doing here is
I'm configuring my Flask
1318:44 - application with a few configuration
variables, if you will.
1318:47 - This is the syntax for that.
app.config is a special dictionary that
1318:51 - comes with Flask that is automatically
created when you create the app appear
1318:55 - on line nine, and I just had to fill
in a whole bunch of configuration
1318:58 - values for the default
sender address that I
1319:01 - want to send email as, the default
password I want to use to send email,
1319:05 - the port number, the TCP port,
that we talked about last week.
1319:08 - The mail server, I'm going to use
Gmail's smtp.gmail.com server.
1319:12 - Use TLS, this means use encryption.
1319:14 - So I set that to true.
1319:15 - Mail username, this is going
to grab it from my environment.
1319:18 - So for security purposes, I didn't
want to hard code my own Gmail username
1319:21 - and password into the code.
1319:24 - So I'm actually storing those in what
are called environment variables.
1319:26 - You'll see more of these
in problem set nine,
1319:29 - and it's a very common
convention on a server
1319:31 - in the real world to store sensitive
information in the computer's memory
1319:36 - so that it can be accessed
when your website is running,
1319:39 - but not in your source code.
1319:41 - It's way too easy if
you put credentials,
1319:44 - sensitive stuff in your source
code, to post it to GitHub
1319:47 - or to screenshot it accidentally,
or for information to leak out.
1319:50 - So for today's purposes, know that the
OS.environ dictionary refers to what
1319:55 - are called environment variables.
1319:57 - And this is like an out-of-band, a
special way of defining key value
1320:01 - pairs in the computer's memory
by running a certain command
1320:04 - but that never show up
in your actual code.
1320:06 - Otherwise, there would be so
many usernames and passwords
1320:09 - accidentally visible on the internet.
1320:11 - So I've installed this in advance.
1320:14 - Let me see if I can do this correctly.
1320:16 - Let me go over to another
tab in just a moment.
1320:19 - And here, I have on my second
screen here, John Harvards inbox.
1320:23 - It's currently empty, and I'm
going to go ahead and register
1320:26 - for some sport as John
Harvard here, hopefully.
1320:28 - So let me go ahead and run
Flask run on this version five.
1320:32 - Let me go ahead and
reload the main screen.
1320:36 - Not that one.
1320:37 - Let me reload the main screen here.
1320:38 - This time, clearly, I'm
asking for name and email.
1320:41 - So name will be John Harvard.
1320:43 - jharvard@cs50.harvard.edu.
1320:45 - He'll register for, how about soccer.
1320:51 - Register.
1320:52 - And if I did this correctly, not
only is John Harvard, on his screen,
1320:57 - seeing you are registered, but when he
checks his email on this other screen,
1321:06 - crossing his fingers that this
actually works as a demonstration,
1321:13 - and I promise it did right before class.
1321:21 - Horrifying.
1321:22 - I don't think there's
a mistake this time.
1321:28 - Let me try something
over here real quick,
1321:31 - but I don't think this is broken.
1321:35 - It wouldn't have said
success if it were.
1321:39 - I just tried submitting again, so I
just did another you are registered.
1321:44 - Oh, I'm really sad right now.
1321:49 - AUDIENCE: [INAUDIBLE]
1321:51 - DAVID: What's that?
1321:52 - AUDIENCE: Check spam.
1321:53 - DAVID: I could check
spam, but then it's--
1321:57 - not sure we want to show spam here on
the internet that every one of us gets.
1322:01 - Oh, maybe.
1322:04 - Oh!
1322:05 - [LAUGHTER AND APPLAUDING]
1322:07 - Thank you.
1322:13 - OK.
1322:13 - Wow, that was a risky click I worried.
1322:15 - All right, so you are registered
is the email that I sent out,
1322:19 - and it doesn't have any
actual information in it.
1322:21 - But back in the day it
would have, because I
1322:23 - included the student's
name and their dorm
1322:25 - and all of the other fields of
information that we asked for.
1322:27 - So let's just take a quick look
at how that code might work.
1322:30 - I did have to configure Gmail
in a certain way to allow,
1322:33 - what they call, less
secure apps using SMTP,
1322:36 - which is the protocol
used for outbound email.
1322:38 - But besides setting these things, let's
look at the register route down here.
1322:42 - It's actually pretty straightforward.
1322:44 - In my register route, I validated
the submission just like before.
1322:47 - Nothing new there.
1322:48 - I then confirmed the registration
down here, nothing new there.
1322:52 - All I did was use two new lines of code.
1322:55 - And it's this easy to automate
the sending of emails.
1322:57 - I apparently have done
it too many times,
1322:59 - which is why it ended up in spam.
1323:01 - I created a variable called message.
1323:03 - I used a message function that
I must have imported higher up,
1323:06 - so we'll go back to that.
1323:08 - Here's, apparently, the subject
line as the first argument.
1323:10 - And the second argument is the
named parameter recipients,
1323:15 - which takes a list of emails that
should get the confirmation email.
1323:18 - So in brackets, I just
put the one user's email
1323:21 - and then mail.send that message.
1323:24 - So let's scroll back up to see what
message and what mail actually is.
1323:29 - Mail, I think, we saw.
1323:30 - Yep, mail is this, which
I have as a variable
1323:33 - because I followed the
documentation for this library.
1323:36 - You simply configure your current app
with Mail support, capital M here.
1323:41 - And if you look up here
now, on line seven,
1323:43 - here's the new library
from Flask mail I imported.
1323:46 - Capital Mail, capital Message, so that
I had the ability to create a message
1323:50 - and send a mail.
1323:52 - So such a simple thing whether you
want to confirm things for users,
1323:55 - you want to do password resets.
1323:56 - It can be this easy to
actually generate emails
1324:00 - provided you have the requisite
access and software installed.
1324:03 - And just to make clear that
I did add something here,
1324:05 - let me open up my requirements.txt
file, and indeed, I
1324:09 - have both Flask and
Flask-mail ready to go.
1324:13 - But I ran the command in
advance to actually do that.
1324:16 - All right, any questions,
then, on these examples here?
1324:22 - No?
1324:22 - All right.
1324:23 - So what other pieces might actually
remain for us let me flip over here.
1324:29 - It turns out that a key
component of most any web
1324:32 - application nowadays that
we haven't touched on yet,
1324:34 - but it'll be one of our final flourishes
today, is the notion of a session.
1324:38 - And a session is actually
a feature that derives
1324:41 - from all of the basics we talked
about today and last week,
1324:43 - and a session is the technical term for
what you and I know as a shopping cart.
1324:47 - When you go to amazon.com and you start
adding things to your shopping cart,
1324:50 - they follow you from
page to page to page.
1324:53 - Heck if you close your browser,
come back to the next day,
1324:56 - they're typically still your shopping
cart, which is great for Amazon
1324:59 - because they want your business.
1325:01 - They don't want you to have to
start from scratch the next day.
1325:03 - Similarly, when you log
into any website these days,
1325:07 - even if it's not an e-commerce thing
but it has usernames and passwords,
1325:11 - you and I are not in
the habit of logging
1325:13 - into every darn page
we visit on a website.
1325:15 - Typically, you log in once, and then
for the next hour, day, week, year,
1325:19 - you stay logged into that website.
1325:21 - So somehow, the website is
remembering that you have logged in.
1325:25 - And that is being implemented
by way of this thing called
1325:27 - a session, and perhaps
a more familiar term
1325:29 - that you might know as, and
worry about, called cookies.
1325:32 - Let's go ahead and take one
more five minute break here.
1325:35 - And when we come back, we'll
look at cookies, sessions,
1325:37 - and these final features.
1325:39 - All right.
1325:40 - So the promise now is that
we're going to implement
1325:43 - this notion of a session, which is going
to allow us to log users in and keep
1325:47 - them logged in and even implement
things like a shopping cart.
1325:50 - And the overarching goal here
is to build an application that
1325:54 - is, quote unquote, "stateful."
1325:56 - Again, state refers to information,
and something that's stateful
1325:59 - remembers information.
1326:01 - And in this context, the curiosity
is that HTTP is technically
1326:05 - a stateless protocol.
1326:07 - Once you visit a URL,
http://something, hit Enter,
1326:11 - web page is downloaded to
your browser, like that's it.
1326:14 - You can unplug from the internet,
you can turn off your Wi-Fi,
1326:17 - but you still have the web page locally.
1326:19 - And yet we somehow want to make
sure that the next time you
1326:23 - click on a link on that website,
it doesn't forget who you are.
1326:25 - Or the next thing you add
to your shopping cart,
1326:27 - it doesn't forget what
was already there.
1326:29 - So we somehow want to
make HTTP stateful,
1326:32 - and we can actually do this using the
building blocks we've seen thus far.
1326:36 - So concretely, here's a form you might
see occasionally, but pretty rarely,
1326:40 - when you log into Gmail.
1326:42 - And I say rarely because most of
you don't log into Gmail frequently,
1326:46 - you just stay logged in, pretty
much endlessly, in your browser.
1326:49 - And that's because Google
has made the conscious choice
1326:52 - to give you a very long session
time, maybe a day, a week,
1326:55 - a month, a year, because
they don't really
1326:57 - want to add friction to using their tool
and making you log in every darn day.
1327:01 - By contrast, there's other
applications on campus,
1327:04 - including some of the CS50 zone,
that makes you log in every time.
1327:07 - Because we want to make
sure that it's indeed you
1327:09 - accessing the site, and not a roommate
or friend or someone maliciously.
1327:13 - So once you do fill out this
form, how does Google subsequently
1327:16 - know that you are you, and
when you reload the page even
1327:20 - or open a second tab for
your same Gmail account,
1327:22 - how do they know that you're still
David or Carter or Emma or someone else?
1327:26 - Well, let's look underneath
the hood of what's going on.
1327:29 - When you log into Gmail,
essentially, you initially
1327:32 - see a form like this
using a GET request.
1327:35 - And the website responds
like we saw last week
1327:37 - with some kind of HTTP response.
1327:39 - Hopefully 200 OK with the form.
1327:41 - Meanwhile, the website might
also respond with an HTTP header
1327:46 - that, last week we didn't care
about, this week, we now do.
1327:49 - Whenever you visit a website,
it is very commonly the case
1327:53 - that the website is putting
a cookie on your computer.
1327:56 - And you may generally know
that cookies can be bad
1327:58 - and they track you in some way, and
that's both a blessing and a curse.
1328:03 - Without cookies, you could not implement
things like shopping carts and log-ins
1328:08 - as we know them today.
1328:10 - Unfortunately, they can also
be used for ill purposes
1328:12 - like tracking you on every website and
serving you ads more effectively and so
1328:16 - forth.
1328:16 - So with good comes some bad.
1328:18 - But the basic primitive for
us, the computer scientist,
1328:21 - boils down to just HTTP headers.
1328:24 - A cookie is typically a big number,
a big, seemingly random value,
1328:29 - that a server tells your browser
to store in memory, or even
1328:33 - longer term, store on disk.
1328:35 - So you can think of it like a file that
a server is planting on your computer.
1328:38 - And the promise that HTTP
makes is that if a server sets
1328:43 - a cookie on your computer,
you will represent
1328:45 - that same cookie or that same
value on every subsequent request.
1328:49 - So when you visit the
website like Gmail,
1328:51 - they plop a cookie on your computer
like this with some session
1328:55 - equals value, some long random value.
1328:57 - One, two, three, A, B,
C, something like that.
1329:00 - And when you then visit another page
on gmail.com or any other website,
1329:04 - you send the opposite header, not
set cookie, but just cookie colon,
1329:09 - and you send the exact same value.
1329:11 - It's similar to going to a
club or an amusement park
1329:13 - where you pay once, you
go through the gates once,
1329:15 - you get checked by
security once, and then
1329:17 - they very often take like a little stamp
and say, OK, now you can come and go.
1329:22 - And then for you, efficiency-wise,
if you come back later in the day
1329:25 - or later in the evening, you
can just present your hand.
1329:27 - You've been stamped, presumably.
1329:29 - They've already-- you've
already paid, you've
1329:32 - already been searched or whatnot.
1329:33 - And so it's this sort
of fast track ticket
1329:35 - back into the club, back into the park.
1329:37 - That's essentially what a
cookie is doing for you, whereby
1329:41 - it's a way of reminding the
website we've already done this,
1329:43 - you already asked me for
my username and password.
1329:46 - This is my path to now come and go.
1329:48 - Now, unlike this hand stamp, which
can be easily copied or transferred
1329:52 - or duplicated or kept
on over multiple days,
1329:55 - these cookies are really big, seemingly
random values, letters and numbers.
1329:59 - So statistically, there's
no way someone else
1330:02 - is just going to guess your cookie
value and pretend to be you It's just
1330:05 - very low probability, statistically.
1330:08 - But this is all it boils down to is this
agreement between browser and server
1330:12 - to send these values back
and forth in this way.
1330:16 - So when we actually
translate this, now, to code,
1330:19 - let's do something like
a simple login app.
1330:21 - Let me go into a folder I made
in advance today called login.
1330:24 - And let me code up app.py and
let's take a look in here.
1330:28 - So what's going on?
1330:30 - A couple of new things up top.
1330:31 - If I want to have the ability to
stamp my users hands, virtually,
1330:36 - and implement sessions, I'm going
to have to import from Flask support
1330:40 - for sessions.
1330:41 - So this is another feature you
get for free by using a framework
1330:44 - and not having to implement
all this yourself.
1330:46 - And from the Flask
session library, I'm going
1330:48 - to import Session, capital S. Why?
1330:51 - I'm going to configure
the session as follows.
1330:53 - Long story short, there's different
ways to implement sessions.
1330:56 - The server can store these
cookies in a database, in a file,
1331:00 - in memory, in RAM, in other places too.
1331:03 - We are telling it to store these
cookies on the server's hard drive.
1331:07 - So in fact, whenever you use sessions
as you will for problem set nine,
1331:11 - you'll actually see a folder
suddenly appear called Flask_session,
1331:15 - inside of which are the
cookies, essentially,
1331:17 - for any users or friends
or yourself who've been
1331:20 - visiting your particular application.
1331:22 - So I'm setting it to
use the file system,
1331:24 - and I don't want them to be
permanent because I want,
1331:26 - when you close your browser,
the session to go away.
1331:29 - They could be made to be
permanent and last much longer.
1331:32 - Then I tell my app to support sessions.
1331:34 - And that's it for now.
1331:35 - Let's see what this application actually
does before we dissect the code.
1331:39 - Let me go over to my terminal window,
run Flask run, and then let me go ahead
1331:44 - and reload my preview URL.
1331:49 - Give it a second to kick back in.
1331:51 - Let me go ahead and open my URL.
1331:53 - Come on.
1331:55 - Oops, let me go ahead.
1331:58 - Too long of a break.
1331:59 - There we go.
1331:59 - So this website simply has a login form.
1332:02 - There's no password,
though I could certainly
1332:04 - add that and check for that too.
1332:05 - It just asks for your name.
1332:07 - So I'm going to log in as
myself, David, and click Login.
1332:10 - And now notice I'm currently
at the /login route.
1332:12 - But notice this.
1332:13 - If I try to go to the
default route, just,
1332:16 - slash, which is where most
websites live by default,
1332:18 - notice that I magically
get redirected to log in.
1332:21 - So somehow, my code knows, hey, if
you're not logged in, you're going
1332:24 - to /login instead.
1332:26 - Let me type in my name,
David, and click Login.
1332:29 - And now notice I am back at slash.
1332:32 - Chrome is sort of annoyingly hiding
it, but this is the same thing as just
1332:35 - a single slash.
1332:36 - And now notice it says you
are logged in as David.
1332:39 - Log out.
1332:39 - What's cool is notice if I reload
the page, it still knows that.
1332:43 - If I create a second tab and go to
the same URL, it still knows that.
1332:46 - I could even--
1332:48 - I could keep doing
this in multiple tabs,
1332:50 - it's still going to remember me on both
of them as being logged in as David.
1332:53 - So how does that work?
1332:55 - Especially when I click Log Out,
then I get forgotten altogether.
1333:00 - All right, so let's see how this works.
1333:01 - And it's some basic building blocks.
1333:03 - Under my /route, notice I have this.
1333:07 - If there is no name in the session,
redirect the user to /login.
1333:12 - So these two lines
together are what implement
1333:14 - that automatic redirection using
HTTP 301 or 302 automatically.
1333:19 - It's handled for me
with these two lines.
1333:21 - Otherwise, show index.html.
1333:23 - All right, let's go
down that rabbit hole.
1333:25 - What's in index.html?
1333:26 - Well, if I look in my--
1333:29 - let me look in my templates
folder for my login demo and look
1333:36 - at templates/index.html.
1333:40 - All right, so what's going on here?
1333:41 - I extend layout.html,
I have a block body,
1333:46 - and then I've got some other syntax.
1333:47 - So we haven't seen this yet,
but it's more Jinja stuff, which
1333:50 - again, is almost identical to Python.
1333:52 - If there's a name in
the session variable,
1333:55 - then literally say you are logged in
as curly braces session bracket name.
1334:00 - And then notice this, I've got a simple
HTML link to log out via /logout.
1334:04 - Else, if there is no
name in the session,
1334:07 - then it apparently says you are not
logged in and it leads me to an HTML
1334:11 - link to /login and then end diff.
1334:13 - So again, Jinja does
not rely on indentation.
1334:16 - Recall the HTML and CSS don't
really care about indentation,
1334:19 - only the human does.
1334:20 - But in code with Jinja,
you need these end tags,
1334:24 - end block, end for, end
if, to make super obvious
1334:26 - that you're done with that thought.
1334:29 - So session is just this
magic variable that we now
1334:32 - have access to because we've
included these two lines of code
1334:36 - and these that handle that whole
process of stamping every user's hand
1334:41 - with a different, unique identifier.
1334:43 - If I made my code space
public and I let all of you
1334:46 - visit the exact same URL, all of
you would be logged out by default.
1334:50 - You could all type your
own names individually,
1334:52 - all log in at the same URL
using different sessions.
1334:56 - And in fact, I would then see,
if I go into my terminal window
1334:59 - here and my login directory, notice the
Flask session directory I mentioned.
1335:03 - And if I CD into that and type ls,
notice that I had two tabs open,
1335:07 - or actually, I think I
started the server twice.
1335:10 - I have two files in there.
1335:11 - I would ultimately have one
file for every one of you.
1335:14 - And that's what's
beautiful about sessions
1335:16 - is it creates the illusion
of per user storage.
1335:21 - Inside of my session is my name,
inside of your session, so to speak,
1335:25 - is your name.
1335:26 - And the same is going to apply to
shopping carts, ultimately, as well.
1335:30 - Let's see how login works here.
1335:32 - My login route supports both GET and
POST, so I could play around if I want.
1335:36 - And notice this, this login route
is kind of interesting as follows.
1335:41 - If the user got to this
route via POST, my inference
1335:45 - is that they must have submitted a form.
1335:47 - Why?
1335:47 - Because that's how I'm going to
design the HTML form in a second.
1335:50 - And if they did submit
the form via POST,
1335:53 - I'm going to store, in
the session, at the name
1335:56 - key, whatever the human's name is.
1335:59 - And then, I'm going to
redirect them back to slash.
1336:01 - Otherwise, I'm going to
show them the login form.
1336:04 - So this is what's cool.
1336:05 - If I go to this login
form, which lives at,
1336:08 - literally, slash login, by default,
when you visit a URL like that,
1336:12 - you're visiting via GET.
1336:14 - And so that's why I see the form.
1336:16 - However, notice this.
1336:18 - The form, very cleverly,
submits to itself,
1336:22 - like the one route/login submits
to its same self, /login,
1336:26 - but it uses POST when
you submit the form.
1336:29 - And this is a nice way of having one
route but for two different types
1336:33 - of operations or views.
1336:36 - When I'm just there visiting /login
via URL, it shows me the form.
1336:40 - But if I submit the form, then this
logic, these three lines, kick in,
1336:45 - and this just avoids my having to have
both an index route and a greet route,
1336:49 - for instance.
1336:50 - I can just have one route that
handles both GET and POST.
1336:55 - How about logout?
1336:56 - What does this do?
1336:57 - Well, it's as simple as this.
1336:58 - Change whatever name
is in the session to be
1337:01 - none, which is Python's version of null,
essentially, and then redirect the user
1337:05 - back to slash.
1337:06 - Because now, in index.html, I will
not notice a name there anymore.
1337:12 - This will be false.
1337:13 - And so I'll tell the user
instead, you are not logged in.
1337:16 - So like it's--
1337:18 - I want to say as simple as
this is, though I realize
1337:20 - this is a bunch of steps involved.
1337:22 - This is the essence of every
website on the internet that
1337:25 - has usernames and passwords.
1337:26 - And we skip the password name step for
that, more on that in problem set nine,
1337:30 - but this is how every website out
there remembers that you're logged in.
1337:34 - And how this works,
ultimately, is that as soon
1337:37 - as you use in Python lines
like this and lines like this,
1337:41 - Flask takes care of stamping the
virtual hand of all of your users
1337:45 - and whenever Flask sees the same
cookie coming back from a user,
1337:50 - it grabs the appropriate
file from that folder,
1337:53 - loads it into the
session global variable
1337:56 - so that your code is now unique
to that user and their name.
1338:01 - Let's do one other
example with sessions here
1338:03 - that'll show how we might use
these, now, for shopping carts.
1338:06 - Let me go into the store example here.
1338:09 - Let me go ahead and
run this thing first.
1338:10 - If I run store in my same
tab and go back over here,
1338:16 - we'll see a very ugly
e-commerce site that
1338:19 - just sells seven different books here.
1338:21 - But each of these books has a button
via which I can add it to my cart.
1338:26 - All right, well where are
these books coming from?
1338:28 - Well, let's poke around.
1338:29 - Let me go into my terminal window again.
1338:32 - Let me go into this example,
which is called store,
1338:35 - and let me open up about
index dot ht-- whoops.
1338:40 - Let's open up index,
how about, books.html
1338:48 - is the default one, not index this time.
1338:50 - So if I look here, notice that
that route that we just saw
1338:55 - uses a for loop in Jinja to iterate
over a whole bunch of books, apparently,
1339:00 - and it outputs, in an H2
tag, the title of the book,
1339:03 - and then another one of these forms.
1339:05 - So that's interesting.
1339:07 - Let's go back one step.
1339:08 - Let's go ahead and open up app.py,
because that must be-- excuse me,
1339:11 - what's ticking all of this off.
1339:13 - Notice that this file is
importing session support.
1339:16 - It's configuring sessions
down here, but it's also
1339:19 - connecting to a store.db file.
1339:22 - So it's adding some SQLite.
1339:23 - And notice this, in my /route,
I'm selecting star from books,
1339:29 - which is going to give me
a list of dictionaries,
1339:31 - each of which represents a row of books.
1339:33 - And I'm going to pass that list of
books into my books.html template, which
1339:37 - is why this for loop
works the way it does.
1339:41 - Let's look at this actual database.
1339:43 - Let me increase my terminal window
and do SQLite of store.db.schema
1339:48 - will show me everything.
1339:49 - There's not much there.
1339:50 - It's a book-- it's a table called
books with two columns, ID and title.
1339:55 - Let's do select star
from books semicolon.
1339:58 - There are the seven books,
each of which has a unique ID.
1340:01 - And you might see where this is going.
1340:03 - If I go to the UI and I look
at each of these buttons
1340:06 - for add to cart, just like Amazon might
have, notice that each of these buttons
1340:11 - is just a form.
1340:13 - And what's magical here,
just like deregister,
1340:15 - even though I didn't
highlight it at the time,
1340:17 - there's another type
of input that allows
1340:19 - you to specify a value without the
human being able easily to change it.
1340:23 - Instead of type equals
text or type equals submit,
1340:26 - type equals hidden will put the value in
the form but not reveal it to the user.
1340:30 - So that's how I'm saying that
the idea of this book is one,
1340:34 - the idea of this book is two, the idea
of this book is three, and so forth.
1340:38 - And each of these forms,
then, will submit, apparently,
1340:40 - to /cart using POST and that would
seem to be what adds things to cart.
1340:45 - So let's try this.
1340:46 - Let me click on one or two of these.
1340:48 - Let's add the first book, add to cart.
1340:51 - Here's my cart.
1340:52 - Notice my route change to /cart.
1340:54 - All right, let's go back and
let's add the book number two.
1340:58 - There we have that one.
1340:59 - And let's skip ahead to the
seventh book, Deathly Hallows,
1341:02 - and now we have all three books here.
1341:05 - So what does the cart route do at /cart?
1341:09 - Well, let's look.
1341:10 - If I go back to my terminal window,
look at app.py and look at /cart, OK,
1341:15 - there's a lot going on
here, but let's see.
1341:17 - So the /cart route
supports both GET or POST,
1341:21 - which is a nice way to
consolidate things into one URL.
1341:24 - All right, this is interesting.
1341:26 - If there is not a, quote
unquote, "cart" key in session,
1341:30 - we haven't technically seen this syntax.
1341:32 - But long story short, these lines
here do ensure that the cart exists.
1341:36 - What do I mean by that?
1341:37 - It makes sure that there's a cart
key in the session, global variable,
1341:43 - and it's by default going
to be an empty list.
1341:45 - Why?
1341:46 - That just means you have
an empty shopping cart.
1341:48 - But if the user visits this route via
POST and the user did provide an ID,
1341:55 - they didn't muck with the form in any
way and try to hack into the website,
1341:59 - they gave me a valid ID, then
I'm going to use this syntax.
1342:02 - If session bracket cart is a list--
1342:05 - recall from a couple of weeks
ago that dot append just
1342:07 - adds something to the list.
1342:08 - So I'm going to add the ID to the
list and return the user to cart.
1342:13 - Otherwise, if the user is at /cart
via GET, implicitly, we just do this.
1342:18 - Select star from books where ID is in.
1342:22 - And this might be syntax
you recall from Pset six.
1342:24 - It lets you look for
multiple IDs all at once,
1342:27 - because if I have a list of session--
1342:29 - list of IDs in my cart, I can
get all of those books at once.
1342:34 - So long story short,
what has happened here?
1342:36 - I am storing, in the cart, the books
that I myself have added to my cart.
1342:42 - My browser is sending the same
hand stamp again and again,
1342:45 - which is how this website knows that
it's me adding these books to my cart
1342:48 - and not you or not Carter or not Emma.
1342:50 - Indeed, if all of us visited the
same long URL and I made it public
1342:54 - and allowed that, then we would
all have our own illusions
1342:56 - of our own separate carts.
1342:58 - And each of those carts,
in practice, would just
1343:00 - be stored in this Flask
session directory on the server
1343:04 - so that the server
can keep track of each
1343:06 - of us using, again, these
cookie values that are being
1343:09 - sent back and forth via these headers.
1343:13 - All right.
1343:13 - I know that's a lot,
but again, it's just
1343:15 - the new Python way of
just leveraging those HTTP
1343:19 - headers from last week in a clever way.
1343:22 - Any questions before we look
at one final set of examples?
1343:26 - Yeah.
1343:27 - AUDIENCE: [INAUDIBLE] understand how
a log in has to do with [INAUDIBLE]??
1343:31 - How does it use [INAUDIBLE],,
how do you change [INAUDIBLE]??
1343:34 - Because in order to use a GET
request dot [INAUDIBLE] equals,
1343:39 - there has to be an
exchange in [INAUDIBLE]..
1343:43 - DAVID: So I think you're
asking about using the GET
1343:46 - and POST in the same function.
1343:48 - So this is just a nice
aesthetic, if you will.
1343:52 - If I had to have separate
routes for GET and POST, I mean,
1343:56 - it literally might mean I need
twice as many routes in my file.
1343:59 - And it just starts to
get a little annoying.
1344:01 - And these days, too, in
terms of user experience,
1344:04 - this is maybe only appeals to the
geek in us, but having clean URLs
1344:08 - is actually a thing.
1344:09 - You don't want to have
lots of words in the URL,
1344:11 - it's nice if the URLs are nice and
succinct and canonical, if you will.
1344:14 - So it's nice if I can centralize all of
my shopping cart functionality in /cart
1344:21 - only, and not in multiple routes,
one for GET, one for POST.
1344:25 - It's a little nitpicky of me,
but this is commonly done here.
1344:30 - So what this code here means is
that this route, this function,
1344:34 - henceforth will support both
GET requests and POST requests.
1344:38 - But then I need to distinguish between
whether it's GET or POST coming in.
1344:42 - Because if it's a GET request,
I want to show the cart.
1344:44 - If it's a POST request, I
want to update the cart.
1344:47 - And the simplest way to do that
is just to check this value here.
1344:51 - In the request variable that we
imported from Flask up above,
1344:54 - you can check what is the
current type of request.
1344:57 - Is it a GET, is it a POST, or
is it something else altogether?
1345:00 - There are other verbs.
1345:02 - If it's a POST, that must mean, because
I created the web form that uses POST,
1345:07 - that the user clicked
the Add to Cart button.
1345:10 - Otherwise, if it's not POST, it's
implicitly going to be logically GET.
1345:16 - Then, I just want to show the
user the contents of the cart
1345:20 - and I use these lines instead.
1345:21 - So it's just one way of avoiding having
two routes for two different HTTP
1345:25 - verbs.
1345:26 - You can combine them so long
as you have a check like this.
1345:29 - If I really wanted to be pedantic, I
could do this elif request.method=get.
1345:38 - This would be more symmetric,
but it's not really necessary,
1345:40 - because I know there's
only two possibilities.
1345:43 - Hope that helps.
1345:46 - All right, let's do one
final set of examples here
1345:48 - that's going to tie the
last of these features
1345:51 - together to something
that you probably see
1345:53 - quite often in real-world applications.
1345:56 - And that, for better
or for worse, is now
1345:58 - going to involve tying back in
some JavaScript from last week.
1346:01 - The goal at hand of
these examples is not
1346:03 - to necessarily master how you yourself
would write the Python code, the SQL
1346:06 - code, the JavaScript code, but just
to give you a mental model for how
1346:09 - these different languages work.
1346:11 - So that for final
projects, especially if you
1346:13 - do want to add JavaScript functionality,
much more interactive user interface,
1346:16 - you at least have the bare
bones of a mental model for how
1346:20 - you can tie these languages together.
1346:22 - Even though our focus, generally,
has been more on Python and SQL
1346:26 - than on JavaScript from last week.
1346:28 - Let me go ahead and open up an example
called shows, version zero of this.
1346:33 - And let me do Flask run.
1346:35 - And let me go into my URL here and
see what this application looks
1346:39 - like by default. This has just a simple
query text box with a search box.
1346:44 - Let's take a look at the HTML
that just got sent to my browser.
1346:47 - All right, there's not
much going on here at all.
1346:49 - So there's a form whose
action is /search.
1346:52 - It's going to submit via GET.
1346:54 - It's going to use a q parameter, just
like Google it seems, and submit it.
1346:58 - So this actually looks like the
Google form we did last week.
1347:01 - So let's see what goes on here.
1347:03 - Let me search for something like cat.
1347:06 - Enter.
1347:07 - OK, so it looks like--
1347:09 - all right, so this is actually
a somewhat familiar file.
1347:12 - What I've gone ahead and done is I've
grabbed all of the titles of TV shows
1347:16 - from a couple of weeks ago
when we first introduced SQL,
1347:19 - and I loaded them into this
demo so that you can search
1347:21 - by keyword for any word you want.
1347:23 - I just searched for cat.
1347:24 - If we were to do this again, we
would see all the title of TV shows
1347:27 - that contain D-O-G, dog, as a
substring somewhere and so forth.
1347:32 - So this is a traditional
way of doing this.
1347:34 - Just like in Google, it uses
/search?q=cat, q=dog, and so forth.
1347:40 - How does that work?
1347:41 - Well, let's just take a
quick look at app.py here.
1347:45 - Let me go into my zero example
here, show zero, and open up
1347:50 - app.py and see what's going on.
1347:53 - All right, very simple.
1347:54 - Here's the form, that's
how we started today.
1347:57 - And here is the /search route.
1348:00 - Well, what's going on here?
1348:01 - This gets a little interesting.
1348:02 - So I first select a whole
bunch of shows by doing this.
1348:06 - Select star from shows, where
title like question mark.
1348:10 - And then I'm using some
percent signs from SQL
1348:15 - on both the left and the
right, and I'm plugging
1348:17 - in whatever the user's input was for q.
1348:20 - If I didn't use like and
I used equal instead,
1348:22 - I could get rid of these curly
brace, these percent signs,
1348:25 - but then it would have to be a show
called cat or called dog as opposed
1348:29 - to it being like cat or like dog.
1348:32 - This whole line returns to me a
list of dictionaries, each of which
1348:35 - represents a show in the database.
1348:38 - And then, I'm passing all of those
shows to a template called search.html.
1348:41 - So let's just follow that
breadcrumb, let's open up shows dot--
1348:45 - sorry, search.html.
1348:48 - All right, so this is
where templating gets cool.
1348:50 - So I just passed back hundreds
of results, potentially,
1348:53 - but the only thing I'm
outputting is an unordered list
1348:56 - and using a Jinja for
loop and li tag containing
1349:00 - the titles of each of those shows.
1349:02 - And just to prove that this
is indeed a familiar data set
1349:04 - and I actually simplified it a bit,
if I look at shows.db with SQLite,
1349:09 - I threw away all the other stuff like
ratings and actors and everyone else
1349:14 - and I just have, for instance,
select star from shows
1349:18 - limit 10, just so we can see 10 of them.
1349:21 - There's 10 of the shows
from that database.
1349:23 - So that's all that's
in the database itself.
1349:25 - So it would look like this is a
pretty vanilla web application.
1349:29 - It uses GET, it submits
it to the server,
1349:31 - the server spits out a response,
and that response, then,
1349:33 - looks like this, which is a huge
number of li tags, one for each cat
1349:38 - or one for each dog match.
1349:40 - But everything else
comes from a layout.html.
1349:44 - All the stuff at the
top and at the bottom.
1349:46 - All right, so these days, though, we're
in the habit of seeing autocomplete.
1349:50 - And you start typing something
and you don't have to hit Submit,
1349:53 - you don't have to click a button,
you don't have to go to a new page.
1349:56 - Web applications, nowadays,
are much more dynamic.
1349:58 - So let's take a look at this
version one of this thing.
1350:01 - Let me go into shows one
and close my previous tabs
1350:07 - and run Flask run in here.
1350:09 - And it's almost the same thing, but
watch the behavior change a little bit.
1350:14 - I'm reloading the form,
there's no button now.
1350:16 - So gone is the need for a submit button.
1350:18 - I want to implement autocomplete now.
1350:20 - So let's go ahead and
type in C. OK, there's
1350:22 - every show that starts
with C. A, there's
1350:25 - every show that has C-A in it, rather.
1350:27 - T, there's every show with C-A-T in it.
1350:31 - I can start it again and do dog,
but notice how instantaneous it was.
1350:34 - And notice my URL never changed,
there's no /search route,
1350:38 - and it's just immediate.
1350:40 - With every keystroke, it is
searching again and again and again.
1350:43 - That's a nice UX, user experience,
because it's immediate.
1350:46 - This is what users are
used to these days.
1350:48 - But if I look at the source code
here, notice that in the source code,
1350:53 - there's just an empty UL by default but
there is some fancy JavaScript code.
1350:58 - So let's see what's going on here.
1351:00 - This JavaScript code
is doing the following.
1351:03 - Let me zoom in a little bit more.
1351:06 - This JavaScript code is first
selecting, with query selector,
1351:10 - which you used this past week,
quote unquote "input, " all right,
1351:13 - so that's just getting the text box.
1351:15 - Then it's adding an event listener
to that input for the input event.
1351:19 - We didn't talk about this
last week, but literally,
1351:21 - when you provide any
kind of input by typing,
1351:23 - by pasting, by any other
user interface mechanism,
1351:27 - it triggers an event called input.
1351:29 - So similar to key press or key up.
1351:31 - I then have a function, no worries
about this async function for now.
1351:35 - Then what do I do inside of this?
1351:37 - All right, so this is
new, and this is the part
1351:39 - that let's just focus on the
ideas and not the syntax.
1351:41 - JavaScript, nowadays,
comes with a function
1351:43 - called fetch that allows you to
GET or POST information to a server
1351:48 - without reloading the whole page.
1351:49 - You can sort of secretly
do it inside of the page.
1351:52 - What do I want to fetch?
1351:53 - slash search question mark q equals
whatever the value of that input is.
1351:59 - When I get back a response, I want
to get the text of that response
1352:03 - and store it in a variable called shows.
1352:05 - And I'm deliberately bouncing
around, ignoring special words
1352:08 - like await and await here, but for
now, just focus on what came back.
1352:11 - A response came back from the
server, I'm getting the text from it,
1352:14 - storing it in a variable called shows.
1352:16 - What am I then doing?
1352:17 - I'm using query selector to select
my UL, which is empty by default,
1352:22 - and I'm changing its inner HTML
to be equal to the shows that
1352:26 - came back from the server.
1352:28 - So let's poke around.
1352:29 - Here's where, again, developer
tools are quite powerful.
1352:32 - Let me go ahead and reload this
page to get rid of everything.
1352:36 - And let me now open up inspect.
1352:39 - Let me go to the Network tab and
let's just sniff the traffic going
1352:43 - between my browser and server.
1352:44 - I'm going to search for C. Notice that
immediately triggered an HTTP request
1352:49 - to /search?q=c.
1352:54 - So I didn't even finish my cat
thought, but notice what came back.
1352:57 - A bunch of response headers, but let's
actually click on the raw response.
1353:02 - This is literally the response from the
server, just a whole bunch of li tags.
1353:07 - No UL, no HTML, no
title, no body, nothing.
1353:10 - Just li tags.
1353:11 - And we can actually simulate this.
1353:12 - Let me manually go to
that same URL, q=c, Enter.
1353:17 - We are just going to get back--
1353:19 - whoops, sorry.
1353:20 - slash search q equals c, we are
just going to get back this stuff,
1353:25 - which if I view source, it's
not even a complete web page.
1353:27 - The browser is trying to show it to me
as a complete web page with bullets,
1353:31 - but it's really just partial HTML.
1353:33 - But that's perfect,
because this is literally
1353:36 - what I essentially want my
Python code to copy paste
1353:39 - into the otherwise empty UL tag.
1353:42 - And that's what this JavaScript
code then, here, is doing.
1353:46 - Once it gets back that response from the
server, it's using these lines of code
1353:51 - to plug all of those li's
into the UL after the fact.
1353:56 - Again, changing the so-called dom.
1353:58 - But there's a slightly better way
to do this because, honestly, this
1354:01 - is not the best design.
1354:02 - Because if you've got a hundred shows or
more, you're sending all of these tags
1354:07 - unnecessarily.
1354:08 - Why do I need to send all
of these stupid HTML tags?
1354:10 - Why don't I just create those
when I'm ready to create them?
1354:13 - Well, here's the final flourish.
1354:15 - Whenever making a web
application nowadays,
1354:18 - where client and server keep talking
to one another, Google Maps does this,
1354:22 - Gmail does this, literally
every cool application
1354:25 - nowadays you load the
page once and then it
1354:27 - keeps on interacting
with you without you
1354:29 - reloading or having to change the URL.
1354:31 - Let's actually use a format called
JSON, JavaScript Object Notation, which
1354:36 - is to say there's just a
better, more efficient, better
1354:39 - designed way to send that same data.
1354:42 - I'm going to go into shows
two now and do Flask run.
1354:46 - And I'm going to go
back to my page here.
1354:48 - The user interface is exactly the same,
and it still works exactly the same.
1354:52 - Here's C, C-A, C-A-T, and so forth.
1354:56 - But let's see what's coming back now.
1354:59 - If I go to /search?q=cat, Enter, notice
that I get this crazy-looking syntax.
1355:09 - But the fact that it's so
compact is actually a good thing.
1355:12 - This is actually going to-- let
me format it a little nicer, well,
1355:16 - or a little worse.
1355:17 - This is what's called
JavaScript Object Notation.
1355:20 - In JavaScript, an angle-- a square
bracket means here comes an array.
1355:26 - In JavaScript, a curly bracket says
here comes an object, AKA, a dictionary.
1355:32 - And you might recall from--
1355:35 - did we do?
1355:36 - Yes, sort of recall that you can now
have keys and values in JavaScript
1355:42 - notation using colons like this.
1355:45 - So long story short, cryptic
as this is to you and me
1355:48 - and not very human friendly,
it's very machine friendly.
1355:52 - Because for every
title in that database,
1355:55 - I get back its ID and its title, its
ID and its title, its ID and its title.
1356:01 - And this is a very generic format that
an API, an application programming
1356:05 - interface, might return to you.
1356:07 - And this is how APIs, nowadays, work.
1356:09 - You get back very raw textual
data in this format, JSON format,
1356:13 - and then you can write code that
actually programmatically turns
1356:17 - that JSON data into any language
you want, for instance, HTML.
1356:22 - So here's the third and final
version of this program.
1356:25 - I, again, select my input.
1356:27 - I, again, listen for input.
1356:29 - I then, when I get input,
call this function.
1356:32 - I fetch slash search q equals whatever
that input was, C or C-A or C-A-T.
1356:38 - I then wait for the response,
but instead of getting text,
1356:41 - I'm calling this other function that
comes with JavaScript these days,
1356:44 - called JSON, that just parses that.
1356:47 - It turns it into a dictionary for me,
or really a list of dictionaries for me,
1356:51 - and stores it in a
variable called shows.
1356:53 - And this is where you start to see the
convergence of HTML with JavaScript.
1356:57 - Let me initialize a variable called
HTML to nothing, quote unquote,
1357:01 - using single quotes, but I
could also use double quotes.
1357:03 - This is JavaScript syntax for a loop.
1357:06 - Let me iterate over every
ID in the show's list
1357:10 - that I just got back in the server,
that big chunk of JSON data.
1357:13 - Let me create a variable called
Title that's equal to the shows--
1357:19 - the title of the show at that ID.
1357:21 - But for reasons we'll
come back to, let me
1357:23 - replace a couple of scary characters.
1357:25 - Then let me dynamically add to this
variable, an li tag, the actual title,
1357:31 - and a close li tag.
1357:33 - And then very lastly,
after this for loop,
1357:35 - let me update the ULs in our HTML to
be the HTML I just created on the fly.
1357:42 - So in short, don't worry
too much about the syntax
1357:44 - because you won't need to use
this unless you start playing
1357:47 - with more advanced features quite soon.
1357:49 - But what we're doing is,
with JavaScript, we're
1357:51 - creating a bigger and bigger
and bigger string of HTML
1357:54 - containing all of the open brackets,
the li tags, the closed brackets,
1357:57 - but we're just grabbing the
raw data from the server.
1358:00 - And so in fact in
problem set nine, you're
1358:02 - going to use a real world third
party API, application programming
1358:06 - interface, for which you sign up.
1358:08 - The data you're going to get
back from that API is not
1358:10 - going to be show titles, but
actually stock quotes and stocks
1358:14 - ticker symbols and the prices of last--
1358:17 - at which stocks were
last bought or sold,
1358:19 - and you're going to get that
data back in JSON format.
1358:21 - And you're going to write a bit of
code that's then going to convert that
1358:24 - to the requisite HTML on the page.
1358:27 - So the final result here is
literally the kind of autocomplete
1358:31 - that you and I see and
take for granted every day,
1358:33 - and that's ultimately how it works.
1358:35 - HTML and CSS are used to present
the data, your so-called view.
1358:39 - Python might be used to send or
get the data on the backend server.
1358:43 - And then lastly, JavaScript
is going to be used
1358:46 - to make things dynamic and interactive.
1358:48 - So I know that's a whole
bunch of building blocks,
1358:50 - but the whole point of problem set
nine to tie everything together,
1358:53 - set the stage for hopefully a
very successful final project.
1358:55 - Why don't we go ahead and
wrap up there, and we'll see
1358:58 - you one last time next week for emoji.