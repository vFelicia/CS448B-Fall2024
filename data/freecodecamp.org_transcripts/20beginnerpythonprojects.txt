00:00 - Improve your Python skills by building 20 projects
00:03 - Tommy taco has created many popular Python courses on our channel and now he will teach you how to build these beginner projects
00:10 - Hey guys in this video, we're gonna build 20 different Python projects
00:15 - So this is a list of all the projects that we're gonna build in this video
00:18 - So we're gonna build a lot of projects like a dice rolling simulator a quiz program an email slicer a binary search program an image
00:27 - Recycler and more as you can see on this list and if you like more tutorials like this
00:32 - Please don't forget to check out my channel at code with Tommy where I teach more on Python and web development in general
00:38 - So without wasting any time, let's get straight into this video
00:42 - In this tutorial I'm going to show you how to send an email with Python now, this is not a new concept
00:49 - There are various ways of doing this but with the recent update with Gmail the security has been changed
00:54 - So we have to go through some more security process before we are able to send a meal with Python
01:00 - But in this tutorial, I'm going to go through every single thing step by step on what we are going to do
01:05 - So let's quickly go to the steps in a comment
01:08 - So this is literally all we need to do but these are just the most crucial step number one and two
01:13 - Then once we have the password we will be able to come in here and then actually code what we need to send the mail
01:20 - So let's go over to Chrome and right here. I'm on my account my Google account
01:26 - So what you want to do is to come into security
01:30 - And a security so if I scroll down a little bit
01:35 - You see
01:36 - Two factor authentication. So in this two-factor authentication, I already have it on but what you want to do is to actually click
01:43 - On that if you have it off, then it's going to take you through some self-explanatory process
01:48 - It's going to ask for a number or something else that you can use to you know, back up your account
01:54 - Well, then what you do all of that that step is actually done
01:58 - What you need to do then is to come into this app password
02:01 - So what you can just do is either go into your URL and type slash app password
02:09 - Or you can just come here and click it directly so anyone wants to do is fine
02:12 - He's going to ask you to log in again. So we're just going to log in back
02:15 - And now that we log in as you can see I already have some password created that I used
02:18 - Sometime last year
02:20 - Now what we want to do is to actually select app and in this select app, we're not using any of these
02:26 - Options what we want to click on is this other and right here we can just say Python for Python and then we're going to
02:33 - Generate a code. So it's going to give us a code and what we want to do is to actually copy all of that code
02:39 - Because it's not going to show that code to us again. So want to copy it then click on done
02:45 - So once you have that code copied, as you can see, it's it's created on this time
02:50 - But it hasn't said when we last used it because we haven't used that particular password
02:55 - But once you have that done, that is good
02:57 - Those two processes are already done
02:59 - The next thing we want to do is to actually go into our file or go into our program and code this
03:04 - So what we're going to do now is to come back in here and
03:10 - The first thing we want to do is to import email. So save from email the message
03:20 - Import email message
03:22 - So this email is pre-installed is Python. So when you stop Python on your computer, this email should be
03:29 - There. So once we have that imported, let me actually go through what we're going to do
03:34 - So we're going to have a variable that is going to have the email sender
03:37 - So this is the email that you're sending from, which is the email that we generated a password for
03:43 - Then you are going to input the password that we generated. Now, this is not your email password
03:48 - This is the password that we generated. Then we're going to input the receiver
03:54 - So the person that is receiving this email, and once we've done that, we're going to specify the subject, the body
04:01 - And then we're going to create an instance of this email and actually send the email
04:06 - So next thing we want to do is to just have some variables so we can say email sender
04:12 - And the email sender has to be code with Tommy at gmail.com and email password
04:25 - So for this password, I'm actually not going to show the password I copied just for security reasons
04:30 - So right here, I have this app to file and I have the password stored in there
04:34 - So what I'm going to do is I'm going to show the password that I copied just for security reasons
04:40 - And I have the password stored in there. So what I'm just going to do is to actually import the password from that app to file
04:46 - So I'm going to say from up to the p y import password
04:55 - So I have that I have a variable in the name password. So that's what it's going to do
05:00 - So what we need to do is actually remove this dot p y, we just need to say from up to because they already knows is a Python file
05:07 - Import password. So now that we have that password, I'm just going to say password. And once we have that done, that is saved it
05:14 - So the email password is not the password that I created. So for you just the way we wrote the password here, you just need to write it there
05:21 - Or from a better security, you can just create an environment variable and store the password there instead
05:27 - So the next thing we want to do is to specify the email receiver
05:32 - So the person that is receiving this email, let's leave that blank for now, we're going to come back to do that. And then this next thing we want to do is to have the subject
05:44 - So we're going to say subject equals to
05:50 - Don't forget to subscribe
05:55 - And we're going to have the body so this is the main body of the email that means this is what the user is going to read
06:03 - So we want to have it like this with three quotes. Once we have that we're just going to write wherever I want to say you say
06:09 - When you watch a video,
06:15 - Is it subscribe?
06:18 - So once we have that the body is set, the next thing we want to do is to actually create an instance of this email message library or package that we
06:28 - Imported. So what we're going to do to create that we can see EM equals email message. So an instance has been created, then we're going to say EM
06:40 - From
06:43 - Is equals to email sender. So this is saying the person was sending from and then EM
06:54 - To
06:57 - Is equals to email receiver
07:01 - And then EM subject
07:06 - Is equals to the subject
07:13 - And then we're going to specify the body but we're going to do that a little bit different. So this one is going to use something named set content. So we're going to say EM dot set content.
07:22 - So the content of the email is the body. So once we have this done, this is what we need. The next thing that we want to do is to actually come down here. I'm going to create a
07:37 - Context. But for us to create this context, we need to import something named SSL and SMTB library. So I'm going to come up here and then we're going to say import SSL
07:49 - And then we also have to import SMTB library.
08:02 - So all of this should be pre installed when you install Python, so you don't need to run pip install anything, they should already be installed. But if they are not installed, then you can just look up how to install them. I'm pretty sure it's very straightforward. So what we want to do now is to come here and say
08:17 - Context SSL dot create default context. So this is what we want to use. And then we're going to have with SMTP library dot SMTP, when you say underscore SSL, we're going to use the Gmail SMTP. So I'm going to say SMTP dot Gmail dot com.
08:47 - We're going to say 465. And the context is equals to this context right here that we specified. So context equals context. So once we have that, we're going to say with this as SMTP specifying all of this as SMTP, then we're going to say SMTP dot login. So we want to log in with the email sender
09:12 - and the email password, which we specified already. And then we're going to say SMTP dot send mail. Now this is when we're actually sending the mail, what this is doing is this is logging in with those, you know, those, these particular credentials
09:32 - that we gave it. And then once we have been able to log in, we're not going to send email. So from email sender, this is the person I was sending from email sender, email receiver, sending to and then EM dot as string. So basically, it's converting
09:59 - this EM, which is the instance of this email message that already has all these details now, send or a string. So one is send all of this. And this will actually work perfectly. But there's one more thing we need to do is to specify the person that
10:13 - is receiving the email. So for these, let's actually use a temporary email, we'll come to Google. And let's just say temp mail. So this temp mail is a site that generates temporary email for us. And what we can do is just to copy the temporary email that it generates. And then we're going to use this to test. And once we use it to test, we're going to send the mail to this. So if the mail lands in here successfully, that means our program works. So let's come back in here now. And in the email receiver, I'm going to paste that in.
10:42 - I'm going to paste that email in here, we save that. Now everything should be working perfectly. Let's run this and see what happens. So that's going to take a while to run. And we don't get any error response. So that means everything should have worked successfully. Let's go back and see if you come here. Now you can see that it says from code we told me at gmail.com. Don't forget to subscribe. If we open up that particular email, and we read the
11:12 - content. So you can see don't forget to subscribe when you watch a video, please hit subscribe. This is exactly what we specified here. If we close this down, don't forget to subscribe when you watch a video, please hit subscribe. So as you can see, this has worked
11:26 - successfully. This is the new way of sending mail with Python. Because as I said, the old way is no more working basically. So what we need to do now is to adapt to this new way. So I hope you understood everything we did in this video. Let's quickly go back to
11:40 - Now talk about what we did. First of all, you have to go to your account and set up the two factor authentication and generate the app password. Then you need to come here, import all the necessary stuff. The first thing you need to import is this email message. So we want to specify the sender, the password, the receiver, and the subject. Then once we specify all of that, we can use that to create an instance of this email message, we save that as EM, then we imported SSL and SMTP library, then we use that SMTP
12:10 - library to actually log in and send the mail. So I hope you understood everything we did in this tutorial. In this tutorial, I'm going to show you how to build a simple word replacement program. So the reason for showing you this is to introduce you to the replace method in
12:28 - Python. So what this does is that it takes a string, and it replaces some words in that string with another word. So this is very easy and straightforward. What we just need to do is to have a new function. Let's call that function replace word. And in there, we're going to have a string. And let's say this string is, I guys, I am Tommy. Let me say, and I
12:59 - write, and what we're going to do is to have a variable that says was to replace. So this is the word we want to replace. And let's collect this from a user. So let's say, enter the word to replace. And we also want to have just the normal word that is going to be replaced. So
13:27 - what this we're going to say enter the word replacement. So we can just call this word replacement. And then we're just going to print out the string, right, dot replace. So this dot replace is a method that allows you to replace a word with another word in a string. So we're
13:54 - just going to say word to replace, we want to replace a word replacement. So this is all we need to do. And what we just need to do now is to call this function. So let's call this function replace word. So now let's just run this. Once we run this, it asks us for the word
14:14 - to replace, we'll say I and enter the word replacement, let's just say a. So as you can see, it changes every time we say I to a says a guy, I am Tommy and a. So that is how to use this basic word replacement, you know, method, and you guys need to build, you know, whatever
14:30 - you want to build, or whatever you think of. But that is how to build a simple word replacement
14:34 - program. In this tutorial, we're going to be building a simple calculator with Python. So
14:42 - what we're going to do is to first define the functions. So we're going to first, let's say, define the functions needed. So the functions I'm going to define are add, sub, more, and div. So this is for the addition, subtraction,
15:08 - multiplication and division. Then once we do that, we are going to print the options
15:14 - to the user. So print options to the user. So these options will be, you know, add, subtract,
15:24 - multiply, or divide, or exit. So then once the user inputs the option or whatever they
15:31 - want to do, let's say they want to add, then we are going to ask for the numbers. So ask
15:37 - for values. Once we get the values we need, then we are going to use that to call the
15:45 - functions. Once we call the functions, then anything that is done in that function is
15:53 - going to happen. But then we're also going to add a while loop to continue the program
16:04 - until the user wants to exit. So this is the steps are going to follow to build this program.
16:11 - And let's just get started. So I'm going to remove all of this now. As we said, we are
16:15 - first going to define the function. So what we want to do is to say def add. And this
16:21 - is going to take two inputs. So let's say A and B. And we can just easily return A plus
16:28 - B. But what we can do to make it look better, we can just say answer is equals to A plus
16:37 - B. So that is the answer. But what we're going to print to the user, we're going to say print.
16:45 - Let's convert this to string A. Then we're going to say plus. So we're using concatenation
16:58 - to like form a sentence with the input that user give us on the answer. So then we're
17:04 - going to say plus string B. Close that. Then we're going to say plus, we're going to open
17:18 - another. And then we're going to say plus string, converting the answer to a string.
17:32 - So what we're doing here, we're just saying A plus B is equals to the answer. But we're
17:40 - converting all of these two strings, so we can be able to concatenate them. There's another
17:44 - way of doing this of using concatenation, you can also use comma like saying something
17:49 - like we can just print a comma B, something like that, then we don't need to convert it
17:57 - to string or even use concatenation. But we can just stick with this if we want. So once
18:02 - we have this, that is the function needed to just add two numbers together, which is
18:06 - a very simple basic function. Then we're going to do the same thing for the subtraction.
18:11 - So we're going to say, define sub A and B. I'm going to say answer is goes to a minus
18:24 - B. And then we're going to print exactly the same thing. And what we're going to print
18:32 - is the same thing we printed before a plus minus just going to do that. concatenate that
18:44 - with string of B. Then we're going to add that. And then we're going to say string answer.
18:58 - So we're going to do the same thing again. For the multiplication, so A and B. And so
19:15 - is equals to a times B. And then we're going to print exactly the same thing as a string
19:24 - A plus we're going to use the asterisk sign, which is also the multiplication sign, then
19:34 - concatenate with string B concatenate equals to plus string answer. Now for the last function,
19:53 - divide A and B, just like we've been doing, we're going to say answer equals to a divided
20:04 - by B. And then we're just going to print string of a concatenate plus string of B concatenate
20:26 - equals to concatenate with string answer. So this is all we need. So we have defined
20:37 - the function successfully. The next thing we want to do is to print out the options
20:42 - for the user. So what we're going to do now is to print a addition. Now we're also going
20:56 - to print B subtraction. We're going to print C multiplication. Then we're going to print
21:17 - G division. And then we're also going to print the last one so that we will know when to
21:27 - break out of the while loop, exit. Now we have this what we want to do is to now have
21:36 - a variable name choice. So this choice is going to be equals to an input. And that input
21:45 - is going to be input your choice. Once the user do that, we're going to say if choice
22:00 - is equals to we use the double equals to in Python. So if choice is equals to a or choice
22:17 - is equals to capital letter a just if the user decides to input small letter or capital
22:24 - letter, we got them. So we'll say, let's just print addition. And then we're going to ask
22:35 - for the input to input. And then we're going to say input first number. Well, then we have
22:50 - to convert all of these to an integer because we're dealing with numbers. And then we're
22:55 - going to do exactly the same thing for the second one and say input. I'll just say them
23:03 - to input second number. And once we have the two values, the user wants to use to calculate
23:12 - what we're just going to do is to call the function add by giving it these two values.
23:17 - So this is what we just did, we collected the two values from the user, or the two numbers,
23:22 - then we call the function add by giving it these two numbers, which is what is needed
23:25 - here. So once that is done, the next thing we just want to do is to have another condition
23:33 - by saying a leaf choice is equals to B or choice is equals to capital B. Then we're
23:54 - going to print subtraction. And a just like we did is equals to integer of input input
24:14 - first number and B input second number and subtract A and B. Now we're going to do the
24:25 - next one, which is also going to be as if choice is equals to C or choice is equals
24:37 - to caps, let us see. Then we want to print multiplication. And then we also want to collect
24:50 - the same thing and run that function using the two values. And for the last one, we're
24:58 - going to do leaf choice D or D. And then we're just going to say, print division, collect
25:05 - the two values, then use the function using those two values or call the function using
25:10 - those two values. So now that we've done that, the next thing we want to do is to say a leaf
25:16 - choice is equals to E or choice is equals to capital E. Then we're just going to print
25:34 - program ended. And what we're just going to do is to call the quit function and stop the
25:43 - program. So once we do that program is ended, we've got the quit function. So the old thing
25:49 - should be working now, the old program should be working. And we don't need this choice,
25:55 - because that's not the choice we're using. So the old program should be working, we define
25:59 - all the functions, show the options to the user, allow the user to pick what he wants,
26:04 - collect the values and then call the function. Now let's see what this gives us. So let's
26:11 - say I say B subtraction, first number is five, second number is two, five minus two equals
26:17 - three. Good. That is what I want. But as you can see, once it gives me the answer, it cuts
26:24 - out of the program, what I want it to do is to keep looping it until I tell it to exit
26:29 - from the program. So I want to keep calculating, you know, multiple numbers until I tell you
26:33 - to stop. So to do this, what we need to do is to use a while loop. So right here before
26:41 - this sprint, let's say while true. So while true is going to do this for us, I was just
26:54 - going to pull all of this under the while true loop. So this is just going to keep looping
27:00 - it, it's not going to stop until I call this quit function. So everything is going to keep
27:05 - going on to the user inputs E. Now let's run this and see. So let me choose C, first number
27:13 - is four. And second number is four gives me 16. And then asks me to input again. So let
27:22 - me choose a free five gives me eight, ask me to input again, that is working. Now if
27:29 - I click on E, it says program ended, and it cuts out of the program, or it breaks the
27:35 - program. So that is working successfully. And just one more thing we might do to make
27:40 - it look better is to add a break. So we're going to have the slash and N, this is just
27:50 - to give it some spacing. So let's add it to all of the print and the functions. So that
27:58 - when we let me show you quickly what that does. So let me say C, five, five. So as you
28:05 - can see, there is a little bit of space here before the next, you know, program starts
28:08 - running again, just so everything doesn't look rough. So that works successfully, everything
28:14 - is working. This is the basic calculator, which we built, I hope you understand everything
28:18 - we did in this tutorial. And that is working successfully. In this tutorial, we're going
28:25 - to be building an email slicer. So what an email slicer is, it's that it is a program
28:30 - that takes a particular email, and then slices it into the username, and then the domain.
28:38 - But we are also going to slice it into username, domain, and the extension. And the extension
28:43 - is let's say it's at gmail.com, the extension is dot com, or just come. So let's do that.
28:50 - Before we get started, let's walk through what we're going to do to achieve this. So
28:54 - the first thing we want to do is to collect email from user. So once we have the email,
29:05 - all we want to do next is to then slice or split the email using the art. And once we
29:22 - do this, basically what this is saying is that for example, let's say we input something
29:27 - like, hello, at code at code with Tommy dot com, if we input this, we're going to slice
29:38 - the email, or split the email using this art, that means it's going to take this splitted
29:44 - as one, I'm also going to split this as another one. But then once we have this, we're going
29:50 - to save the first part, which is this part, which is hello, as the username. And then
30:01 - once we do that, the second part is gonna be let's say saved as domain. Then what we
30:19 - want to do is now split this domain. So we're going to split domain using the dot. So that
30:27 - means this now we're going to split this code with Tommy dot com. And the first part is
30:33 - now going to be the domain, which is code with Tommy. And the second part is going to
30:36 - be this.com. So what this is saying now is this is the first part, which is the username
30:41 - that we add already. And the second part from this initial split is code with Tommy.com.
30:47 - So what I'm going to do is now split the second part again using this dot. So then we're going
30:51 - to have code with Tommy, and they were going to have come. So let's do that real quick.
30:58 - So what we just want to do is to have a new function, we can just name this function main.
31:03 - It's not going to take any input, or just gonna, we can print something and say, welcome
31:11 - to the email slicer. And once we have this, let's just print a blank sentence or blank
31:25 - word, so we can have spacing. And then what we want to do after doing this is to just
31:34 - collect the email so we can say email input is equals to input. I'm going to say input
31:44 - your email address. So once you input the email address, or want to do nice to slice
31:52 - it, so we're going to use a particular format. So we're going to say user, command domain.
32:03 - So let's send this to username. So this username, command domain was split, it is this is going
32:11 - to take the first part and the second part of the split. So this is going to be close
32:15 - to email input, dot split. So we're splitting it using the art. So what this is going to
32:26 - do now is I want to split it, the first part is going to be close to this variable and
32:30 - the second part is going to be close to this variable. So now that we have that splitted,
32:34 - we have the username done, we can print the username. But for the domain, let's now say
32:39 - domain and extension. So what we want to do now is to say domain, the split using the
32:55 - foot stop. So what this is doing is updating this domain with the something like this.
33:04 - So hello, at code with Tommy, that come. So now we add this as a domain in the initial
33:12 - split, once we split, when we split it using art. So we add code with Tommy dot com as
33:18 - a domain, but we now want to update the domain to just be code with Tommy and then the extension
33:23 - to be calm. So what we're going to do is domain equals domain dot split using full stop, and
33:29 - then it's just going to do that. So what we can do now is we already have that those variables
33:34 - and we've given them their values, we can just print this. And we can just say, username.
33:43 - And they just use comma, so vision concatenation. So we can just say is username. And we're
33:50 - going to print domain is domain. And then we're going to print extension is extension.
34:13 - So now this should be working. Let's just call this function. Save this and run it.
34:23 - So now let's see. So it says input your email address. Now let me use the example I've been
34:28 - using all along. Hello, at code with Tommy dot com. So you can see it says the username
34:34 - is hello, the domain is code with Tommy and this is the extension. So that works successfully.
34:41 - We can take a look before that and just keep, you know, looping it by saying, wow, you know,
34:47 - so we can do, let's quit this can do while true. We can just keep doing this. And once
34:57 - we just run it. So let's just say something that's blank at gmail.com. So it says blank
35:07 - gmail. And that is the extension. And it asks us to input again. So now we can say hello
35:13 - at code with Tommy dot com. It does that again. So this email slicer is working perfectly
35:19 - and successfully. In this tutorial, we're going to be looking into binary search in
35:25 - Python. So we're going to be writing a program that performs a binary search operation using
35:30 - Python. So a little bit of explanation, a little bit of context before we get into the
35:35 - coding part. So binary search is a searching algorithm that works by repeatedly splitting
35:42 - a set of data in half to the target value is found. So let me explain what this actually
35:48 - means. For example, what binary search does is that it takes the list of data, a list
35:54 - of ordered data, and it takes a target. So it keeps splitting that list of data in half
36:01 - till it finds that target. So for example, let's just say we have a list that is 123456789,
36:09 - right? And there's a 10. So we have this list. And then what we can do with the binary search
36:23 - or what binary search does, let's say that we have a target that is we are looking for
36:27 - three, then what it's going to do is that it's going to split this data into half. So
36:33 - as you can see, what it's going to do is going to get the first index and the last index
36:39 - added together then divided by two. So this is zero. And this is 0123456789. So this is
36:49 - nine, then it's going to do 0.0 plus nine, basically something like this zero plus nine,
36:55 - then it's going to divide down so by two. And whatever you get is going to split that
37:01 - is basically the middle value. And it's going to use that to split the data into two. So
37:06 - it can split this data into two from here, then that target value, let's say we are looking
37:11 - for three as a target, right? So that mid value that we got, let's say we got a mid
37:17 - value of 4.5. But then it just discards the point five and uses four. So this is for right
37:26 - with an index value of four, then is going to check if three is greater than or less
37:31 - than therefore, since three is less than eight is going to discard the whole list size after
37:37 - the middle value. So this is going to be deleted. And then it's going to focus on just this
37:42 - particular list, then is going to do that again, it's going to split it into half. If
37:47 - three is greater than that, let's say we get this is our fry, since three is equals to
37:53 - that particular mid value or middle value, it stops the program, because the target has
37:58 - been found. But imagine the target was two, what it's going to do is that is going to
38:03 - discard all of this again, from here, and then is going to look into this particular
38:08 - list, then is going to run that program again, or run that function again, and it's probably
38:13 - going to see two as the value. So that's where binary search works. It takes a list computer
38:18 - repeatedly splits it into half until it finds the target. So now let's get into the actual
38:24 - coding part of how we're going to do this. So if we want to brainstorm this, let's write
38:30 - a few steps which are going to take. So you say with that, the first thing we want to
38:36 - do is to let's just have some comments that says what we want to do. So we are going to
38:42 - have a function that takes a list, and let's say, a target parameter. So this is going
38:59 - to collect lists, it's going to collect two parameters list and a target. And once we
39:05 - have that, we're going to have different variables, multiple variables. And let's say the variables
39:14 - are middle. So we need to know the mid value, the start value, we need to know the end and
39:21 - the amount of steps. So in binary search, the steps is the amount of time it has looked
39:27 - through for the data or it has split that set of data into half. So imagine we have
39:32 - to split that data into our three times before we get the particular target, that means this
39:38 - amount of steps gone through is three steps. So we also have a variable that tracks that.
39:45 - Now once we do that, we can either use a recursion, we can either use recursion, or a while loop
39:55 - to keep because as I say, we're going to repeatedly split that data. So we can either use a while
39:59 - loop, but we're using a while loop, that means we are updating the data by ourselves manually.
40:04 - And if I've been a recursion, we're just going to call the function inside yourself again
40:08 - to keep splitting data. So you're going to understand this when we get more into the
40:12 - coding part. And after this, what we are just going to do is to basically increase the steps
40:19 - each time we step through it. So increase steps each time a split is done. Then once
40:32 - we increase the steps each time a split is done, we are now going to have some conditions.
40:41 - So conditions to so we're gonna have some conditions to do something like if the target
40:48 - is the middle or if the target is less than the middle, or if it's greater than the middle,
40:53 - then what to discard the other part of the list. So conditions to tag to track target
41:02 - position. So once we have this, then as I said, we're going to use a while loop. So
41:12 - we're just going to return something like minus one to, you know, keep, then we're going
41:17 - to use a while loop that says something like, while the stats is still less than or equals
41:22 - to the end is going to keep looping. So let's just close all of this now. And let's just
41:26 - get straight into the coding. So the first thing we want to do is just to have a function.
41:33 - So binary search function. So this binary search function, as I said, is going to take
41:38 - list. And let's say element, we can say target, we can say element. And if you want to say,
41:46 - and in here, what we want to do is the same media equals to zero. So these are the variables
41:54 - that we are defining our media is equals to zero start is equals to zero. The end is asked
42:02 - to be the length of the list that we are collecting. So this list and the steps initially is equals
42:11 - to zero, because it doesn't split data yet. So now that we have all of this, next thing
42:17 - to do is to use a while loop. So I'm going to say while start is less than or equals
42:27 - to end. So basically, we want to keep doing this until this for this condition is no longer
42:35 - true. So we say while start is less than or equals to end, start is the we're going to
42:41 - also update the start this start variable, when we split the old list, but this start
42:46 - is the beginning of the current list. So as long as that is still less than the end, right,
42:54 - we want to continue doing this one to continue looping through this particular code, which
42:58 - we're going to do under here. So what we want to do now, we actually want to print something
43:03 - that shows the user the amount of steps and like, the, let's say the list that is remaining.
43:10 - So like each time we discard a list, or we delete some part of the list, we want to show
43:15 - the remaining list and the amount of steps we've done. So to do this, we're just going
43:19 - to use a little bit of concatenation. So we'll say steps, step, commerce, steps, to the space.
43:32 - And let's say something like, so we're going to do comma yellow. So yes, and we're going
43:39 - to have the list, which is this list, then we're going to let it start from the start
43:47 - and end at the end, we have to add plus one year. So what this is, is that we are now
43:54 - saying show this list, but show it from the index of start, which initially zero and end,
44:02 - which initially is the length of the string. So let's combine this to a string. So we don't
44:07 - get no errors. So this is what it's going to show us. So initially, when we run this
44:12 - particular program, it's just going to show us this list, the whole list that we pass
44:18 - into it, because you're just showing us from the start, which is zero to the end, which
44:22 - is the length of the string. But this is for now, because when we update this start as,
44:28 - let's say, five, let's say the status five, what it's going to do is that it's going to
44:32 - start this list from the index variable five. But for now, it's still zero. So once we have
44:39 - this done, let's say steps. Now we want to update the step. So we're going to say steps
44:46 - equals steps, plus one. And middle, this is one of the most crucial parts. So this is
44:53 - when we're actually splitting the data into half. So start plus end, as I explained earlier,
45:00 - we add the start and the end and then we divide it by two divided by two, then we're going
45:10 - to say, if the element, which is the target value, basically, is equals to least middle.
45:22 - So if the middle which is what we got from the value we got, if that is equals to the
45:29 - element or the target that we're looking for, then let's just return me do as the data found.
45:40 - But if there's another container says if element is less than least middle, so that means if
45:50 - is less than the least from the middle, what we want to do is to update the end as middle
46:01 - minus one. So what are we doing here, basically, what we're doing is that we're saying if this
46:05 - element is less than the middle list, so let me just have a comment that explains what
46:09 - this is doing. So if element is less than middle list, so what he's saying is, we have
46:15 - a list, right 12345. And he's saying if the element which is, let's say to say element
46:23 - is two, obviously, the middle, the least middle, which is this particular stuff in this example
46:30 - is three. So it's saying if elements is less than that, so if element which is two that
46:36 - we're looking for is less than three, then want to say the end, which is now the end
46:41 - of the new list is equals to the middle minus one. So we want to say the middle, which is
46:46 - three, minus one. And the reason why we did minus one is because all indexes start from
46:53 - zero. So this will be 012. So this is now the new list because the end is now here.
46:59 - So basically, it's going to discard all of this and create a new list that only has 123.
47:03 - So that is what this part does here. So when we have the end now updated, once it comes
47:09 - back to loop again, and in this place, the end is now updated to what to three, so it's
47:14 - not going to be is basically not going to show the initial list again, it's not going
47:20 - to show the updated list, which has already cut out some part that is not needed. So once
47:26 - we know about that, the next thing to do is to have like an so we have a condition right
47:34 - updates the end that condition is when the element is less than the middle. But what
47:38 - if it is greater than the middle, so then once you start is equals to middle plus one.
47:47 - So just very similarly to very similar to what this was, this is just saying else that
47:53 - means if the element is not less than the middle, that means is greater than the middle,
47:58 - then once updated, start to middle plus one, if I quickly use that same example, 12345.
48:07 - And the value is, let's say four, it is instance. So the middle is three. So now that means
48:15 - if the element is greater than least middle, that means if four is greater than three,
48:21 - which obviously is greater, then the start is now middle plus one. So middle is three.
48:28 - So we're going to say middle plus one, the, what we're going to do now is 012, right,
48:33 - then we're going to add one to that. That's why we're going to have 0123. So from here
48:39 - is going to discard the rest of this. And it's just going to only have this particular
48:44 - list as a new list. So once we have this done, we have updated all the values that we need.
48:52 - The next thing we want to do is to just return minus one. So we're just going to have something
48:59 - that says return minus one. And this is not part of the loop. This is outside the loop.
49:09 - So basically, when the loop is done, so this is the very simple, like function to do this.
49:16 - Very straightforward. And what we can just do now is to actually test this function and
49:20 - see how well it is working. So we are gonna run this function. Let's have a list. Let's
49:27 - say my list is equals to 123456789. And let's say our target is equals to say we are looking
49:43 - for two. Now we can run this particular function by saying binary search, and we're going to
49:50 - give it my list. And we're going to give it target. Now when we run this, let's see what
49:58 - it gives us. So as you can see, it shows just two steps, because we are looking for two.
50:07 - So it's cause this is down to this list. And the answer is basically in this list, let's
50:13 - say we're looking for one and let's see if that will work for us also. So you can see
50:18 - that it shows three steps now, cuts this list down to this list, then you also cut this
50:23 - list here to give us one, if I'm looking for nine is going to do the same thing. So let's
50:29 - run that. So it cuts it in three steps and gives us nine. So let's say we are looking
50:35 - for let's say we increase this, you can test it out by just, you know, increasing the values
50:41 - and do whatever you want to do. And we just have 12. So it still gives us three steps.
50:49 - So as you can see, everything works successfully, we've been able to perform a binary search
50:54 - using this very basic code. There are multiple ways you can actually code a function to perform
51:02 - a binary. You guys I said you can use, you know, a recursion, which is where you call
51:09 - the function inside itself. So instead of us, like, basically, using the all of this
51:15 - updating these values, what we're going to do is we're going to call the function with
51:18 - these updated values. So somewhere like, instead of using the while loop, we can just say after
51:24 - checking if all of this is true, then we write here where it says less than, and we update
51:29 - this, what we can just do is we just call binary search here again, with the new list
51:35 - and all of the new data. But this obviously does the work for us. And there are various
51:42 - reasons why you actually want to use binary search instead of a normal search. So the
51:48 - most important of them is because of the the time complexity. So if you're using a less
51:55 - than normal say like a linear search, or that which is the normal way of searching stuff,
52:00 - and the linear search is where he just steps through every single data in the list until
52:05 - it finds that value. So as I said, the reason why you want to use binary search instead
52:09 - of linear search is because of the time complexity. binary search is far more quicker than linear
52:16 - search, because binary search doesn't have to look through every single value in the
52:21 - data or in the list. But for linear search, it has to look through every single data till
52:26 - it gets to that particular target we're looking for. For example, as we said, because we're
52:31 - looking for 12, it just splits this data and basically cancels all of this. So he doesn't
52:36 - look through that because he knows is the data we're looking for is normal there, then
52:39 - it focuses on where it thinks is going to be split all of this again, and you know,
52:44 - keep doing that, which saves more time. But imagine we're actually using a linear search.
52:50 - So let's see our linear search is going to work. And we're looking for 12. What we're
52:54 - going to do is something like for i in my list, then we're going to say if i is equals
53:04 - to 12, then we'll say print found. Now the drawback about this is that it has to go through
53:15 - every single data. So it's going to count from 12345, all the way to the reaches 12.
53:22 - That's when it's going to print found. So this is going to take a lot of time. And that's
53:26 - why it has a bad time complexity in this particular instance. So you never want to use, you never
53:33 - want to step through or go through every single data in the list. Instead, you just want to
53:37 - use a binary stitch to make everything quicker. So I'm just going to undo all of this and
53:43 - go back to our code. So this is the basic way of you know, building a program to perform
53:50 - a binary search. In this tutorial, we're going to be building a quiz program. So this is
53:57 - quite straightforward. It's just where we're going to have a dictionary that contains a
54:02 - list of like, questions and the answers. And then we're going to ask those questions and
54:07 - answers to the user. And the user is going to answer the questions. And then we're going
54:12 - to tell the user the score after and the percentage they got. So let's quickly go through the
54:19 - steps of everything we need to do. So first of all, let's deactivate that, disable for
54:25 - Python. So first of all, the first thing that we need to do is to have a dictionary, dictionary
54:35 - that stores questions and answers. Then what we need to do is to have that dictionary loop
54:46 - through that dictionary. Before we loop through the dictionary, let's actually have a variable
54:56 - that tracks the score of the player. Then we want to loop through the dictionary using
55:14 - the key, key value pairs. And once we loop through that, while looping through that,
55:24 - we just want to show display each question to the user and allow them to answer. Tell
55:44 - them if they are right or wrong, then we want to show the final result when quiz is completed.
55:59 - So this is the steps we're going to follow. First going to have a dictionary, a Python
56:03 - dictionary that stores the question and answers, we can just name this quiz, then we're going
56:08 - to have a variable that tracks the scores, loop through the dictionaries and the key
56:12 - pair, the key values pair, then display each question to the user and allow them to answer
56:17 - and tell them if they are right or wrong. And then show the final result is actually
56:22 - leave this year and follow these steps. So the first thing we're going to do is to have
56:27 - this quiz dictionary. But in this dictionary, let's say the key is question one. And the
56:39 - value is actually going to be another dictionary in there. So something like this. Yeah. So
56:50 - that is what the value is going to be. So then the question is going to be, let's say,
56:58 - what is the capital of France? And let's say the answer is Paris. So that is one question
57:19 - that has all the question and answer, we need to make sure we have the comma here so we
57:22 - don't have any error. So this is one question, question one, and it has a value of question
57:28 - and answer. That is one, then we're going to go to the next one, make sure you have
57:32 - your comma, question two. Same thing, question. And then we're going to say something like
57:44 - war is the capital of Germany. And then I'm just going to have the answer. And that should
58:00 - be Berlin. We're going to keep going. Right here we have our comma, we do question three.
58:15 - We have a question. Let's see, let's say war is the capital of Italy. And there's our answer
58:35 - as Rome. So just to save time, we're going to copy and paste this. So let's copy and
58:43 - paste this four more times. So right here, two, three, four. So right here, we're just
58:54 - going to change this to four, changes to five, change this to six, changes to seven. And
59:04 - let's say Spain, Madrid. And let's change that to Portugal, Lisbon. And then let's say
59:24 - Switzerland. Burn. And for the last one, let's say Austria. You know, so now we have all
59:42 - the lists or dictionary of the questions. And in each of those questions, we have the
59:46 - question and the answer. So what we can do now is to loop troll of this show it to the
59:50 - user. And then, you know, continue from there. So before we do that, let's see, since we
59:55 - have a variable that tracks the score, so this very easy, just a score equals to zero.
60:00 - So initially, the user has a score of zero. That is all we need to do for that. Then the
60:05 - next thing we need to do is to loop through, but we're going to loop through this especially
60:09 - not the normal loop, because there's a dictionary want to loop through using the key and the
60:14 - values. So says loop through dictionary, right? What we're going to do is to say for key value
60:24 - in quiz dot items. So this is where you can loop through a dictionary. What we just want
60:31 - to say is print the value. So from the value, what we want to print is the one that the
60:40 - value of the key question. So I'm going to say question. It's going to print that then
60:49 - answer is going to be equals to input answer. So once we say that, what we're now going
61:00 - to do, so we've printed the question, and then we're asking for the answer, what we
61:05 - now want to do is check if this answer is actually correct. So say if answer dot lower
61:14 - is equals to value, answer the lower, then the user is correct. So let me tell you why
61:33 - we're using dot lower. So basically, because Python is case sensitive, if we don't use
61:38 - dot lower, what it's going to do is that imagine the user types burn, but doesn't put the caps
61:44 - letter on B, let's say the user types, this is going to make it as wrong. But what I'm
61:49 - doing is I'm converting whatever these are right into lowercase. And I'm converting the
61:52 - main answer also into lowercase. So if both of them are equal, then the user is correct.
61:58 - So then we can increase the score by one when the user is correct. And after increasing
62:08 - the score, we can print the score to these actually after every time. So let's just do
62:14 - that. So we can say your score is, let's just add, let's convert it to string first of score.
62:29 - So that is the user score. And we can just have our else. So if this is not true, then
62:38 - that means the user is wrong, then let's print wrong. Then let's actually tell them the correct
62:47 - answer. So we'll say print. The answer is then we're going to say value, but now I want
63:03 - to say answer. And let's also print the score. So let's just copy this right here. And that
63:16 - should actually work. So let's see what this is going to do for us. Let's save this and
63:21 - run it ask us for the capital of France, Paris. Correct, my score is one Germany. So you can
63:29 - see now now if I mix, let's say, with capital letter and small letter, it still tells me
63:35 - I'm correct. That's because of this particular command, this particular condition right here.
63:39 - That's why that is useful. So my score is to imagine I okay, since we already have that
63:45 - we can test it, what I wanted to do is to test, let's say we have all caps, imagine
63:50 - big, this is what this is not all caps. And this is all caps, if we didn't have these
63:55 - right here, it's going to say is false. But because I took care of that, it's going to
63:59 - say true. So I have three. So let's start missing all of it. So let's just. So basically,
64:06 - I landed on score of three, right? So let's just take it further. First of all, everything
64:11 - just looked too packed. So we can just use to have a little bit of spacing. So right
64:17 - here, where we have score, we can just say print blank, there's also plain blank there.
64:26 - And also right here, print blank. And we'll do the same thing again. So we have that done.
64:35 - What we actually want to do is that after all of these, we want to tell the user its
64:38 - final score. And we also want to tell them the percentage. So let's say print. I'll say
64:46 - something like you got string score plus out of seven of seven questions. So you got let's
65:09 - say three out of seven questions correctly. Then let's print out the percentage. Now we
65:15 - can see your percentage is concatenation. Let's first make sure we're converting whatever
65:28 - we're doing into string. So we're going to say score divided by seven times 100 to convert
65:37 - into a percentage. And let's just add by saying, let's concatenate percent just to have the
65:45 - percentage sign. So this should work. Let's see. Let's quit that and reload it. So let's
65:52 - just get like two out of it. So Paris, you can see down now there's spacing, so we can
66:01 - see it well. So we've got into let's start getting a little bit wrong. So you can see
66:06 - it says I got two out of seven questions correctly. And my percentage is all of this, this is
66:11 - a long number, what we can do is actually convert this to an integer, so that, you know,
66:18 - it doesn't show like all of these decimal points with it. So right here, we can just
66:22 - say int. And you actually want to convert it into an integer before converting it to
66:27 - a string, you don't want to convert it to a string before converting into an integer
66:32 - because you can't concatenate an integer and a string together. But now this should work.
66:37 - Let's try it out and see. So I'm just going to get let's say three out of it. We have
66:42 - France, Paris, Germany, Berlin, Rome. So as you can see, it says I got three out of seven
66:52 - correctly, and the percentage is 42%. So that is how to actually build like a very basic
66:59 - quiz app or quiz program with Python, as you can see, that was very easy to build didn't
67:04 - take a lot of time. And I hope you understood what we did to this point. In this tutorial,
67:11 - we're going to be showing you how to convert a text or a link to a QR code using Python.
67:18 - So this is very easy, because there are a lot of libraries out there that already allows
67:23 - us to do this. So let me just walk you through the steps on what we're going to do. So the
67:27 - first thing we want to do is to install all the libraries needed. Once we install the
67:36 - libraries needed, then we are going to create a function
67:47 - that collects the text and converts it to a QR code. Then we're going to save the QR
68:00 - code as an image. Once we save the QR code as an image, then we are going to run the
68:11 - function basically. So this is the basic steps that we're going to take. And let's just go
68:16 - ahead and do this. So the first thing we want to do, let's open up a new terminal. And let's
68:22 - install the packages needed. So I'm on a Mac, so I'm going to use PIP free to install. If
68:29 - you're on a Windows, you don't need to use PIP free, just type PIP. And I'm going to
68:32 - say install QR code and image. So I need these two libraries. So what I'm going to do is
68:40 - to install QR code and image, I already have them installed. So as you can see, it says
68:44 - requirement already satisfied. But for you each go ahead and install that. So once I have
68:49 - that done, I'm only going to import QR code, I don't need to import image. Once I have
68:55 - that imported, let me just have a new function, let me say generate QR code. And it's going
69:04 - to take a text or URL or wherever you want it to take. And then what we want to do is
69:11 - to say QR is equals to QR code dot QR code. And version is equals to one and error on
69:29 - the scope and correction is equals to QR code dot constant dot error on the score, correct
69:46 - underscore L. And box size is equals to 10. Unless a border should be like, five, or let's
70:00 - leave it at four. And that is done. The next thing we just want to do is to add the data
70:06 - to this QR. So this is like going to generate a new QR code. But what we now want to do
70:10 - is to add this text or the URL, wherever the user inputs, we want to add it into this QR
70:17 - code that we just generated. Let's come here and add full stop to avoid the error. And
70:24 - then we're just going to say QR dot add data. So this is just going to add the data for
70:30 - us. I'm going to say text and QR don't make, let's make it fit. So fit equals true. And
70:46 - image should be equals to QR, the make image. So this is going to make the whole image of
70:53 - the QR code with the data and everything. So when I fill it with a color of black, you
70:57 - can input whatever color you want. And the back color should be white. So as you know,
71:06 - most QR code has this particular format, white and black. And then let's just save this image.
71:15 - So we're going to say image dot save. And let's name it something like QR image dot png. Now
71:28 - this is working perfectly. What we just want to do now is to run the function. So we can
71:33 - say generate QR code. And let's give it a text, I'm going to give it a link. So let
71:40 - me say HTTPS www dot code with Tommy dot com. And now once I run this, this is going to
71:50 - create a QR code based on this particular format. And it's going to give you this data,
71:55 - which is code with Tommy dot com. So let's run this. So it says it has no attribute error.
72:04 - So we just need to come here and change that to error. That was a typographical error.
72:09 - So let's save that and run it again. We don't have no response. But if we go into our computer
72:16 - right here, so I am in just in my root directory. And as you can see, I have this QR code named
72:24 - QR image. So that is the QR code has been generated or that has been generated based
72:31 - on this format, or based on this text, this URL. So if I scan this QR code, it's going
72:37 - to give me this particular URL that I used. But let's take it further and say we want
72:41 - to ask the user to input their own URL, then we generate the QR code based on the URL.
72:48 - So we're just going to say URL equals to input, we're going to ask the user, enter your URL,
73:01 - and once they enter that, we're just going to generate this based on the URL. So let's
73:07 - save the let's say this is 001. Let's just run this. Now once we input a HTTPS YouTube
73:20 - dot com slash code with Tommy, no response. But if I come in here, you can see that I
73:29 - have a new code, different format, it looks different from the initial one. Once I scan
73:35 - this, you can scan this using your phone or just scan it online or anything is going to
73:39 - take you to the site, which we input which was YouTube dot com slash code with Tommy.
73:45 - So that is how to create a basic QR code generator. There are very there are various ways you
73:49 - can use this, you can use it on your website, to you know, do multiple things just automatically
73:54 - convert particular text to QR code for your users. There are a bunch of ways you can use
73:59 - it. And that is how to build it. In this tutorial, I'm going to show you how to build an interest
74:07 - rate monthly payment calculator. So it's a program that is going to take the input of,
74:13 - you know, the principal amount borrowed, the annual interest rate and the amount of years,
74:19 - and then it's going to tell you how much you're going to pay each month for the total amount
74:24 - of years till you pay off the loan back. So before we get started, let me walk you through
74:29 - the steps of what we're going to do. So the first thing we want to do is to collect the
74:36 - necessary input. And these are the principal. And this principal is the initial amount borrowed
74:48 - or the amount, the loan amount, and APR, which is the annual interest rate, and then the
74:56 - years. So this is the amount of years that the they're going to use to pay the loan back
75:03 - basically. So once we collect those inputs, what we're going to do is then calculate by
75:11 - going to calculate the monthly payment. And we're just going to show that to the user.
75:21 - So this is all we need to do, to be honest, this is where the main work is calculating
75:24 - our monthly payment. And I'm going to walk you through step by step. So let's just get
75:28 - straight into this. So let's just create a function. So we create a main function, it's
75:37 - not going to take any input, or we can just do we can print something and say this is
75:47 - a monthly payment loan calculator. So once that is done, we can print, let's just print
76:06 - this to give some spacing, and then want to get the input from the user. So the principal
76:15 - and note that for this type of calculation, since we're dealing with money, we have to
76:20 - use float. So we have to convert this to float. So let's have an input and say, input the
76:30 - loan amount and one of the APR, which is the annual interest rate. So input the annual
76:48 - interest rate. And then this should be a float. And the amount of years. This should just
77:05 - be an integer. And we say input. And let's say input amount of years. So once we have
77:18 - those inputs, we can go straight to the next step, which is calculating the monthly payment.
77:23 - This is the payment which you pay monthly to pay the loan back. So let's say monthly
77:31 - interest rate. So we can say APR, we have to divide this APR by 1200. So this APR, which
77:40 - is the annual interest rate, we divide that by 1200 first. So that's to get the rate,
77:44 - then we're gonna say months equals to the amount of years, which we collected multiplied
77:54 - by 12. So just to calculate the amount of month, which is going to be used to pay this
77:59 - loan back, then we can calculate the monthly payment. So we can say monthly payment equals
78:10 - to exchanges to, let's say amount of months, a monthly payment can be because the principal
78:19 - multiplied by the monthly interest rate. Then we divide this by I think we should open a
78:31 - bracket here. Should we Yes, we should. And we say one minus then we open another bracket.
78:38 - So we're basically using board mass right here. One plus monthly interest rate as inside
78:48 - that bracket, then outside that we multiply it. We use the asterisk sign twice. And then
78:55 - we say minus amount of month. So this is going to do the work for us. And then we're just
79:03 - going to display the result to the user basically. So we can just say print the monthly payment
79:17 - for this loan is this is concatenation, let's say, monthly payment. So this should work
79:27 - fine. Before we run this, let's say main. So all of this should be working. Now, let's
79:34 - test it out and let's see. So let's say the loan is 20,000. We rate of 3% and input amount
79:44 - let's say five years. So it says can only concatenate string not float. So what we just
79:50 - need to do is to change this to a string. And then let's run that again 20,003 and five.
80:02 - So it says the monthly payment for this loan is 359.373 a and all of that. So let's just
80:09 - make this look more presentable. Let's cut it to only two decimal points, because that's
80:14 - what money ends up two decimal points. So to do these, we are not going to need to convert
80:20 - this to string no more. Let's remove this. And we're also not going to use this. Right,
80:25 - yes, let's remove this. What we want to do, we're actually going to use a particular format
80:33 - by saying percentage dot two F. So the two F what it does, it cuts, it cuts this to two
80:41 - decimal places. And then we're just going to say percentage. And that should do the
80:47 - work. So I save it running 20,000 now, three percent five years. So it's a 359.37. So if
80:58 - you want to use dollar sign pounds, whatever, you can just add it right there by saying
81:03 - dollars or whatever you want to add. So this does the work for us. And everything is working
81:07 - fine, as you can see. So what we can also do is to just use a while loop to you know,
81:13 - keep looping this until the user doesn't want to calculate anything normal. Or you can do
81:17 - that if you want to do that. So let's run this again and see what it does. Let's try
81:21 - with like a larger amount to million and with a rate of a crazy rate, let's say 40%. And
81:32 - two years. So that's going to be 122,000 every single month. So this is how to build a basic
81:41 - interest rate calculator. So as you can see what I did, we took the inputs, we calculated
81:47 - the monthly interest rate, and then we calculated the monthly payments, I've just printed that
81:52 - to the user. So this is how to do that. In this tutorial, we're going to be building
81:59 - a random password generator program. So let's outline everything we're going to do to build
82:05 - this. So the first thing we want to do is to ask the user if they want to generate a
82:12 - password or not. Then once we ask them if they want to generate a password, if they
82:24 - say yes, so if yes, yeah, so if yes, we don't want to generate a password yet, we want to
82:36 - ask for the password length. So if yes, ask for password length. And once we asked for
82:48 - the password length, what we just want to do is to generate a password. So we just generate
82:52 - the password, and then print the password. So once we print the password, that program
83:00 - is done. But if they say no, then we want to exit the program. So if if initial response
83:11 - is no exit program. So this is the island we're going to follow. And we're going to
83:20 - get into the more coding stuff in a bit. So this is what we're going to do. We're first
83:24 - going to ask, ask the user if they want to generate a password or not. Once they say
83:28 - yes, then we're going to write a function that's going to generate a password. In that
83:32 - function, we're going to ask for the password length. And then we're just going to generate
83:35 - the password and print it to the user. So let's just go ahead and do that. So let's
83:39 - clear this up. So the first thing we want to import a string. And then we want to import
83:47 - random. Once we import both of these. The next thing we want to do is to have a variable
83:57 - name characters. So what these characters is going to do is that it's going to take
84:03 - the basically a list of all the different characters that we want to generate our password
84:09 - from. So this is going to be a string dot dot ASCII letters. I also want to use the
84:21 - string the digit. And let's actually add one more, we want to use some random signs here
84:33 - like this signs. So we also want to use all of these signs right here. And this should
84:39 - actually be a list. So we want to say list of all of this. So I converted that to a list.
84:47 - So this is basically the amount, not the amount of characters, basically, the characters want
84:51 - to generate a password from. So when is generating password in my peak, let's say two characters
84:55 - from here, three classes for me on one character from here, it depends. So that's going to
85:00 - be random. Now we want to have our function that says generate password. And now that
85:11 - we generate a password, we're gonna say password length is equals to an integer. And let's
85:23 - say how long would you like your password to be? So that is the question we're going
85:29 - to ask the user, or whatever the user input, we're going to convert that to an integer.
85:34 - So now that we, you know, have that, what we want to do is to shuffle this character.
85:40 - So it's not just going to be like, let's say it's not just going to pick two from here,
85:44 - then three from here, then one from here, like, in order, we just want to shuffle it
85:49 - so it takes a randomly. So what we're going to do is to say random dot shuffle characters.
85:59 - So once we shuffle that character that is done, the next thing we want to do is to say,
86:06 - as well as have the password as an empty list. So once we do that, we want to pick random
86:15 - characters now from this, from the list. So what we're going to do is now use a for loop
86:20 - and say for x in range of password length. So what we're going to do is to say password,
86:38 - which is this password, dot append random dot choice. So it's going to take you randomly
86:48 - from the characters. So once it takes it from the characters randomly, now we want to shuffle
86:55 - the password. So we're going to say random dot shuffle password. So the password that
87:06 - we just got, you know, is appending characters from this list, right into this password list.
87:13 - Then once we have that, we also want to shuffle it again, just to make it more random. And
87:18 - what we're just going to do is to now convert this list because we want it to be a string.
87:23 - But right now we initialize the as a as a list. So what we're just going to do, we're
87:30 - going to say print, we're going to say password is equals to blank dot join password. Once
87:48 - we do this, now we can print password, not want to print the final password to the user.
87:55 - So we're going to say print password. So now we printed that we're just going to do we
88:00 - have the generate password working, we have the function should be working right now.
88:06 - So now, we're just going to run the part the program normally, and we're going to say,
88:12 - we're actually going to ask the user. So we're going to say option is equals to input. Do
88:25 - you want to generate rates of password? Then we're going to say yes or no. So that is what
88:41 - we need. Then we're going to say if option is equals to yes, then we're going to run
88:55 - the generate password function, which we just did right here. But if option is equals to
89:05 - no, so we're going to say Elif option is equals to no. Then we're going to say, let's print
89:27 - something like program ended. And we're going to run the quit function. So that's going
89:37 - to quit our program. But then if it's something else, we're just going to print invalid input.
89:48 - Please input, yes, or no. And we are going to quit the program. So this should be working
90:04 - out everything should be working fine. Let's save this code. And then let's run it and
90:09 - see what it gives us. So you ask us, do you want to generate a password? I'm going to
90:14 - say yes. Okay, let's first change that. That is a bit together. So it should be something
90:21 - here. Like this, yeah, that should be all right. Now let's save it and run it again.
90:34 - So now do you want to print the password? Say yes. How long would I like the password
90:38 - to be less than 17? And then it prints a random password or 17 letters. So let's run that
90:44 - again. Say yes. And I want the password to be less a 191. It's going to print a long
90:51 - password of 191 characters. Let's run it for the last time and test if we say no. So once
90:59 - we say no, it says program ended, which is what we want. And let's test if we write something
91:07 - else. So let's just write a random stuff. And it says invalid input, please input Yes
91:12 - or No. So that is a very easy simple way on how to generate random passwords using Python,
91:19 - you can integrate this, let's say you you learned how to build a web app with Django
91:23 - or Flask or something or Python framework. And then you want that when a user is trying
91:29 - to register, you want to have a feature that just allows them to generate a password for
91:34 - them, you can input this type of, you know, logic or this type of programming there, and
91:38 - it's just going to generate a password for your users. So this is a very simple project
91:42 - on how to generate random password. In this tutorial, we're going to build a dice rolling
91:50 - simulator program. So what this is going to do is that it's just going to ask everyone
91:54 - to roll a dice. Then once we say yes, it's actually going to like simulate rolling a
91:59 - dice and it's going to print out two different numbers ranging from one to six. And it's
92:03 - also going to show us like a drawing of those numbers. So let me show you what these actually
92:08 - looks like before we get into coding. So this is the program, right. And it says roll dice.
92:13 - If I say yes, you can see that it says dice rolled up four and three. And it shows me
92:18 - the dice four and three. If I say yes, again, it wrote five or one, it shows me five or
92:25 - one, say yes, again, erode two or four, it showed me the dice drawing of two or four.
92:31 - So let's get straight into this. First of all, let's make this a little bit less. Now
92:37 - the first thing that we actually want to do is just to, you know, let's walk through the
92:42 - steps we're going to use random. So we're going to have to import random. Then once
92:46 - we import random, we're gonna define a function to roll the dice. So once we define that function
92:56 - to roll the dice, the next thing we want to do is to like have a kind of like a dictionary.
93:03 - So create a dictionary, a dictionary that basically will, will have the drawings of
93:17 - the dice. So this is dictionary is going to hold like all the drawings of the dice and
93:23 - everything we need. And then we're just going to get into using a while loop asking the
93:28 - user for what, you know, if they want to continue on all of that, let's just collapse this and
93:33 - get straight into it. So as I said, the first thing we want to do is to import random. Once
93:39 - we have random imported, then we're going to have a function named roll dice. And in
93:46 - this function. So what we want to do in here is that we want to ask the user so we can
93:54 - say row equals input. And then we'll say something like roll dice, yes or no. So let's just deactivate
94:04 - this real quick. So once we say roll dice, yes or no, we are less likely changes to yes
94:13 - or no. We're going to ask these are two inputs, if it wants to roll the dice. So we're going
94:19 - to say while row, the lower is equals to yes, the lower. So the reason why I do this road
94:33 - or lower and yes, the lower is because if the user inputs, yes, with all cap letters,
94:38 - or small letters, or a mixture of cap letters and small letters, is still going to see it
94:43 - as the user saying yes. So we're just going to say dice one is equals to random dot random
94:51 - dot rand int. So the random integer between one and six, so it's going to generate a random
94:58 - integer between one and six. So we said dice to generate another random integer between
95:08 - one and six also. So once it generates that, what we're going to do is print dice road.
95:21 - And then we're just going to say this and this. So this is going to hold let's say two
95:29 - and three, four and five, whatever was wrote, then let's format it the format. And let's
95:38 - just format it to have dice one and dice two. So once we have this, what we can just do,
95:50 - we can then ask the user if he wants to roll again. So say roll equals input. Then now
96:00 - instead of saying roll dice, we just roll again. So yes, or no. And then we're going
96:14 - to ask the user for that. So what we just want to do now is to run this particular function.
96:19 - So this should work perfectly. Let's see. So let's quit this tab and run it again. So
96:28 - yes, we want to roll a dice. So it says six and four road. Yes, six and two, six, one
96:36 - quite lucky, three and six. One on one. So you can see that that is working. The next
96:43 - thing on the final thing we want to add is to just add the drawings. So we want to actually
96:47 - have like images or drawings of the particular number that has been rolled. So to do this,
96:52 - what we're going to do is to come, we're actually going to come all the way up here. So what
96:58 - we're going to do is to just say I'm going to paste a black a block of code. Now this
97:08 - code is going to have all the drawings. So what I'm going to do is to come in here and
97:13 - just paste. So as you can see, this is like, it just is basically a dictionary, right?
97:20 - It has a key and the value as like this topu, but in each of the topu as like values that
97:26 - forms this square type shape that has each of the values for drawing 12345 and six. So
97:37 - you can just take you know, all of this, right? Yeah, that is how that looks like. So once
97:45 - you know, you have this, everything is basically done, you just need to know the name of this
97:49 - particular dictionary. So once you know the name of that dictionary, next thing you want
97:53 - to do is to then go down into the code where we are printing the values that were wrote.
98:00 - So down here, we just want to print. Let's see, let's leave a space, first of all, something
98:07 - like this. And let's just say dot join. Dice drawing. The one that has index key, not index
98:22 - this time around key of dice one, we did the same thing for dice two, unless you what it
98:26 - gives us. So this should work perfectly. So yes, we want to roll. So you see it says five
98:32 - and four, it prints five and four, one roll again, five on one, it prints five on one,
98:38 - one roll again, one and six, it prints one and six. Now let's say no, it's cut out or
98:44 - it breaks out of that program. So that is how to basically build a dice rolling system
98:50 - or dice rolling simulator. In this tutorial, we are going to be building a site connectivity
98:57 - checker. So what this is going to do is that we're going to give it a URL or a particular
99:02 - link, and it's going to check the main the status of that site, basically. So if the
99:08 - site is up and running, if you can access that site, or if the site is down, it's going
99:12 - to give us an error. So once we give it the link or the URL is going to give us a response.
99:18 - If the site is up and running, and everything is working, it's going to give us a response
99:21 - of 200. And some other response if there's an error or something. So let's just get straight
99:28 - into this. We need to import a library that we're going to use. And this library is called
99:33 - URL lib. So this should be installed when you have Python installed, it should be pre
99:39 - installed its Python already. But if it's not installed, you can just type pip install
99:43 - URL lib. And that should install it for you. So let's go ahead and write the steps of what
99:48 - we're going to do. So this is quite easy and straightforward. The first thing is just to
99:52 - import URL lib. Once we have that imported, we're going to use a particular subset of
100:00 - that URL lib called request. So we're going to use URL lib dot request. Yeah, to get the
100:09 - data from the URL, that's exactly what we want to do. Then once we do that, the next
100:14 - thing we want to do just to write a function of function that takes a URL and then returns
100:31 - a response. So this is all we want to do is disable that. So this is all we want to do
100:38 - and it should be very straightforward. It's actually very easy to, you know, to code,
100:43 - because the library already has what we wanted to do for us. So let's just follow these steps.
100:49 - So let's import URL lib. So this URL lib that we're importing, we're not just using it directly.
100:57 - As I said, we're going to use dot request. So we're just going to import URL lib dot
101:01 - request. Let's import it as URL lib. So that when we are using it, we don't need to write
101:07 - URL lib dot request, we just say URL lib. And what we want to do now is to have a function
101:15 - called main. So this function, let's say it's collect a URL. So in here, we can just print
101:23 - something like this is a site connectivity. Checkup program. And then we can just print
101:41 - to input the URL of the site. But actually, we I think we even want to, you know, tell
101:53 - the user to input the URL before running this particular command. So what we want to do
101:58 - is to come here. I want to take all of this year and put it here instead. So what this
102:05 - is going to do is that is going to print this until the user to input the URL of the site.
102:10 - So what we can just do is that we can just say URL input URL is equals to input. And
102:27 - then we can just have this right here. So input the URL of the site you want to check.
102:37 - And this is going to input the URL for us. This is going to collect the URL for us, then
102:41 - what we're going to do now is we can say dev main, what we can now do is, since we already
102:49 - know we have the URL, we're going to take the URL, let's just say, URL equals URL, that
102:56 - doesn't really make any difference, since we already have URL being sent in here. So
103:00 - let's just leave that like that. And what we're just going to do now, we can just do
103:04 - something like print, check in connectivity. And then we can say URL leave dot open dot
103:24 - URL open. So we want to open up this URL. But then want to store whatever is gotten
103:33 - here in a response. So we'll store it in a response variable. And this is basically all
103:41 - we need. And we can just print something like let's say, connected to URL successfully.
103:57 - That is all we need. But then we want to show the response like is your response of 200
104:05 - is an error. So let's just say print the response code was response dot get code. So this dot
104:20 - get code is going to allow us to get the code or the response code basically. And as I said,
104:26 - it means that it got it successfully, was able to use that site successfully. So this
104:32 - is basically all we need right now. But the only thing I see that we need to change is
104:37 - that we need to have this particular function above all of this. So we need to write the
104:43 - function first. And this is because once the user inputs this URL, right, the next thing
104:48 - we want to do is to call this URL on diet, know is to call this function on that is using
104:54 - the URL that the user wrote. But in Python, everything is step by step. So we can call
104:59 - a function that is below our code. So imagine I call the function main year, that's impossible.
105:05 - As you can see, it gives us an error that it can recognize that particular function.
105:10 - And this is because Python looks up not down. So once I call this function, it looks for
105:16 - this function from the code above it, since it doesn't find that it doesn't see that as
105:20 - a function in this code, even though we still have the function right here, but it doesn't
105:25 - see it. So what we need to do is to make sure that the function is above the code or above
105:31 - where we are calling it from, then that will work. So what we just want to do, let's remove
105:36 - this from here, we can take all of this function, we can cut it out, then right here after importing,
105:43 - we can just paste that now everything should be working successfully. So if I now say let's
105:48 - say I run, so let's say I run this and I say, main, and I give it the input URL that the
105:55 - user input this right here. So right, I'm just going to say input URL. So once I give
106:03 - it this now, everything should work successfully, because it's going to go up and look for this
106:09 - main your this main function is going to give you this input URL, which the user entered.
106:15 - And then he's going to, you know, open it, save it in the response and print the response
106:19 - code. So that is all we need. And as you can see, right here, it didn't give us that error
106:23 - that he can't find the function that is because the function now is above it. So that is also
106:29 - a good tip to know in Python. So let's save this file. Let's run it. So it says is a site
106:36 - connectivity checker program, input the URL of the site you want to check. So let's just
106:40 - check it. I said www.google.com. So you see it says checking connectivity connected to
106:51 - google.com successfully, the response was 200. Now 200 means it was able to access that
106:57 - URL or that link. Let's run it again. Let's say, let me check my site. So my site is up
107:04 - and running. Let's see if it's also going to give us 200. Could it tell me.com. As you
107:10 - can see, it says connected successfully, the response was 200. So that particular one works
107:17 - successfully. So everything we did here is very easy and very straightforward. We just
107:25 - use the library and we just allow these are to input it and input the link and then we
107:30 - give the user a response. So I hope you understood what we did in this tutorial. In this tutorial,
107:37 - we're going to be building a currency converter program. This is very easy and very straightforward.
107:43 - What we just need to do is to first of all, have a function that is called main. And this
107:48 - function, we're just going to, you know, say this is a program that converts, let's say
107:52 - us dollars to, you know, great Britain's pounds. And then we're going to collect the say we're
107:59 - going to ask a user for the amount of dollars they want to convert, then we're going to
108:02 - run a function named converts to pounds, then we're going to show the user the answer. And
108:08 - under that we are going to also going to have to have another function, we're actually going
108:11 - to use a lambda function to, you know, have this particular converter and I'm going to
108:17 - show you what we're going to do. So let's get straight to it. So we're going to say
108:21 - death main. I want to do is print this program converts us dollars to pounds sterling. And
108:49 - let's just have another print so that there will be some spacing. So print and dollars
108:58 - will be equals to input, enter amount in dollars. And we have to evaluate this. So we have to
109:12 - wrap it with the evaluate. And once we do that, we're going to say pounds will be equals
109:20 - to convert to pounds, we're going to give it dollars. So once we have that, we're going
109:30 - to print that is and let's say pounds. So what we're going to do now is that is we just
109:47 - want to print the equivalent in pounds. So that is pounds, I'm going to have the comma
109:53 - and say pounds in here. So this should do the work for us. But as you can see, it says
110:00 - I doesn't see any function named convert to pounds. So all I'm just going to do down here
110:04 - is to come here and create a new function named convert to pounds. Because the lambda
110:15 - dollars, so dollars multiplied by so we need to check the exchange rate. So if we come
110:27 - to Google, you can see that the current exchange rate is no point 82 pounds sterling. So we're
110:33 - going to say multiplied by no point 82. And that should actually do the work for us. So
110:40 - now if we call main, everything should work. Well, right here, we need to have lambda.
110:47 - So now everything is working perfectly. If we run this, this should actually work. Now,
110:52 - let's save it and see input the amount in dollars, let's say $500. So it says convert
110:58 - to pounds is not defined. So this is because right here, there is no n. So that should
111:05 - work now. Now let's run it again, and say $500. So you can see it says that it's 410
111:12 - pounds, let's run it and let's say something like $750, 615 pounds, let's come back and
111:20 - you know, check that 750. So you can see 614.14. You know, I think he wrapped it up to, you
111:28 - know, 615 pounds. So that is how to build a very easy and simple currency converter.
111:34 - Of course, if you want to like scale this or like actually build a big application from
111:38 - these, what you need to do is to like, probably have an API that gets all the rate, like this
111:43 - type of rate, then you should do something like you're going to ask the user what the
111:48 - two different currencies you want to convert to, then when you have all of that, you know,
111:52 - what function to call, you know, what rates to use and all of that. But for now, this
111:55 - is just a basic, you know, way of doing this type of application. In this tutorial, we're
112:02 - going to be building a very simple program that tells if a particular year is a leap
112:06 - year or not. Now to do this is quite easy and straightforward. What we just need to
112:11 - do is to have a new function. And this is going to be something like is leap year. And
112:17 - it's going to take your parameter. And it's just going to say if year percentage, the
112:28 - percentage sign should be, yeah, if your percentage for equals to zero, that means if the remainder
112:36 - of the year divided by four is zero, then we're going to say, it should be a leap year,
112:44 - but we also have to have another condition. But before we have that condition, let's first
112:48 - have our else statement. For now, let's pass and say else print not leap year. So basically,
113:01 - what this is saying is that if your percentage for which is the remainder of four is not
113:04 - equal to zero, then is not a leap year. So yeah, when we say pass, what we want to do
113:08 - is just have another condition. So we're going to say if your mod 100 is equals to zero,
113:20 - then we're going to do something else. Just print leap year. So right here, we just want
113:34 - to print leap year, let's change this real quick. So this is a leap year, then right
113:43 - here where we pass, what we want to do is have another nested condition and just say
113:50 - if yeah, mod 400 is equals to zero, then that should be a leap year. So we're just going
114:02 - to print leap year. Else, it's not a leap year. So this is a very basic program that
114:20 - does this. So you can see just this function alone should be able to, you know, do the
114:25 - work. What we can just do now is to run this. So say is leap year. And let's give you something
114:31 - like 2000. So let's quickly go over what is actually going to do. So this is saying if
114:37 - your mod four is equals to zero, then we're going to check if your mod 100 is equals to
114:43 - zero. And we're also going to have to check again, if your mod 400 is equals to zero,
114:48 - then is a leap year. So but initially, if it's not even equals to zero, is not a leap
114:54 - year, right here. Also, if yeah, mod 100 is not equals to zero, it is a leap year. But
115:03 - if it's equals to zero, and then mod 400 is equals to zero, also, then it's a leap year.
115:08 - Else, it's not a leap year. So if you actually do the calculations manually, you'll see that
115:12 - it adds up. So 2000 was a leap year, let's save it and see what it says. So as you can
115:18 - see, it says leap year, what we just want to do is to come in here. So right here, I
115:22 - have a list of leap years 2000 2004. So leap year is basically every four years, right.
115:28 - So what we can just do is, you know, change this and say 2024. And that should print leap
115:36 - year 2020 also should print leap year. Right. But let's try for something that is not a
115:42 - leap year, let's say 2013. As you can see is not a leap year, let's say 2051. That is
115:52 - not a leap year. So that is the way to build a program that tells you the year is a leap
115:57 - year or not. In this tutorial, I'm going to show you how to build a simple word dictionary
116:05 - using Python. So this is going to be a program where we're going to have a basic dictionary
116:09 - that has a key value of a word and the definition of that word, then we're going to be able
116:16 - to ask the user to input a word. And then from the dictionary that we have, we are going
116:21 - to get the meaning or the definition of that word. So let me walk you through the steps
116:26 - of what we're going to do. So first of all, we're going to have a Python dictionary that
116:35 - has a key value pair that represents a word and its definition. So once we have that,
116:54 - the next thing we're going to do is to collect input from the user. So this input is going
117:05 - to be is the word is a word basically. And then we're going to check if the word is in
117:20 - the dictionary and print the definition. So this is the basic steps that you're going
117:31 - to take. Let's just get started with it. So we cancel of that. The first thing, let's
117:36 - just have a function named main. And in this function, we're going to have a word dictionary.
117:44 - So let's name this word dictionary. So we're actually using a Python dictionary, right
117:50 - to store all the values. So what we're going to do is to say equals two. And let's say
117:57 - we have a word named I and we say a way of greeting. Let's just say we have another word
118:08 - that says ice. And let's say an organ for sin. And yeah, let's just have those two words
118:22 - basically. And we okay, let's add one more just to give it a say F. And let's say a planet
118:34 - in space. Cool. So we have this, let's make sure we have our comma right after every single
118:41 - key value pair. So once we have these, the next thing we want to do is to collect the
118:46 - word from the user. So we'll say word is equals to input, enter a word. And we can say, let's
118:58 - say something like we can just say if the word is blank, we want to break, or we can
119:04 - just go straight to it. So let's just say something like if word is equals to blank,
119:11 - then we can either tell the user to input it again, or let's just break, we can do that.
119:16 - And we say if word in word dictionary. So that means if this word is inside this word
119:28 - dictionary, then what we want to do is to print the word, then we're going to print
119:37 - the word definition. So I'm just gonna say word dictionary of that word. So this is going
119:46 - to do it for us. But this break, basically, when we say break, that means we are breaking
119:50 - out of a loop. So the reason why I put this break here is because we're actually going
119:54 - to write a while loop here so that the user can keep asking for a word till he doesn't
120:00 - want to ask for it again. So let's say while true. So while this is true, all of this should
120:08 - be under this and this should be in small letters. So this should now work perfectly.
120:14 - So let's run this. Let's see what it does. So entire what event I so it says I a way
120:22 - of greeting, if winter F, F, a planet in space, winter ice, ice and organ for scene. I see
120:30 - that once I enter nothing, and I click Enter, it breaks out of the program. So this is how
120:36 - you can be the basic, you know, word dictionary. But you would have already seen a problem
120:42 - with this, there is no way we can actually write all the words in English and their definition
120:49 - in just a basic Python dictionary. So is it that let's say you have a file an external
120:54 - file that you can import that has all the texts and you know, even the synonyms and
121:00 - the definition, or you can just use a Python library. So there, there is a Python library
121:06 - that someone has already worked on that you can just install on your computer. And, you
121:10 - know, that has all this data that you need. And you can just use that in your program.
121:14 - So to take this a little bit further, I show you how to actually view the working dictionary
121:20 - that you can actually use, we're going to use a dictionary library named pi dictionary.
121:25 - So what I'm going to do now, I'm actually going to clear all of this up. Okay, no, I'm
121:31 - not going to clear this up. But I'm going to open a new terminal. So let's come here
121:34 - and click New Terminal. When we install pi dictionary. So if you're on a mark type PIP
121:40 - three, if you're on a Windows, just type PIP. So install pi dictionary. So I already have
121:52 - it installed. So he's saying requirement already satisfied. But for you, it should go ahead
121:56 - and install that. So let's close up this terminal. Now that we know we have that the first thing
122:01 - we want to do is to import this pi dictionary. So I'm going to scroll up here, I'm going
122:06 - to say from pi dictionary, import pi dictionary. So once I have this, I'm going to define an
122:16 - instance of this pi dictionary. So I'm going to say dictionary is equals to pi dictionary
122:26 - with the parentheses. And once we have that, what we can just do right here, so we're going
122:32 - to say, we don't even need all of this. We don't need to put in a function or more, what
122:41 - we can just do is to say, let's collect a word from a user. So let's say, or let's just
122:48 - first test this and see what it gives us. So let's say print dictionary. That's meaning
122:54 - let's say something like ice. Once we run this, you can see that it prints this right
123:06 - here. And it says noun, the organ of sight, good this, it basically gives you different
123:14 - definitions. So different noun definitions of ice, right? Yeah, you can also see that
123:19 - gives you different definitions, different verb definitions. That's what that can do.
123:24 - And you can do a bunch of stuff, you can translate a word from, you know, one, one word, one
123:30 - language to another, it can give you synonyms, antonyms, and more. So you can explore that
123:36 - more if you want to see. But for now, let's just stick with this. So what we can just
123:40 - do now is to ask the user for what he wants to import. So what he wants to get the definition
123:46 - of, so we say input, enter your word, then we can say, print dictionary dot meaning of
124:02 - word, let's see this. Now let's say ice again. And now we can input our word, I will get
124:12 - the meaning of that word. So we can also, you know, have a while loop. Wow, true. And
124:24 - all of this should be on diet. And once we have that is going to keep looping. But why
124:33 - do we want to break it? So what we can do is if word is equals to blank, then we want
124:43 - to break out of it. So that's all we need, but then just print the meaning of word. So
124:52 - if his blank is going to break out of it before he even runs this, so we're cool. Now let's
124:56 - try to run this and see. So let's have another word like, let's say indentation. And as you
125:07 - can see, it gives me the meaning. And that's what we need. Now let's run it again and just
125:13 - not input anything, it breaks out of it. So you can see that the library is quite efficient,
125:18 - it has everything you already need. So you don't need to start writing all the words
125:21 - in English and the definitions because that's going to take a long time for the two results.
125:27 - So another thing we can do is to actually give this library like a bunch of words, and
125:32 - it's going to give you the meaning of those words, in let's say, a list or even a dictionary
125:38 - format. So let me show you what I'm talking about. So we can remove this. And what we
125:44 - can do is we're initializing this, we can just give it the words immediately. So let's
125:49 - say we give it ice. And we give it indentation. And let's say we give it head. So we give
126:02 - you all of these words, what we can just do now is to print dictionary dot dot print
126:13 - meanings. So this is going to print the meaning of everything for us. And this is going to
126:18 - print once we run. So as you can see, it gets all the meaning. So we say eyes, it shows
126:28 - us the meaning in nouns, with as different meanings, and also for verbs, then for the
126:33 - next one indentation, and for the next one, it gives us everything we need. But let's
126:39 - say as you can see, this is just a plain text, and there's no way we can actually use this,
126:43 - like in our code. But what we can just do is you allow it to return us the definition,
126:51 - but in a dictionary format in a Python dictionary format, so then we can, you know, have key
126:55 - value pairs that we can actually use or print in our program. So instead of print meanings,
127:01 - what we just want to say is get a minute. So once I save this and run it, you're going
127:09 - to see now that we have this for in a Python dictionary format. So exactly the same thing.
127:15 - But now we can use this anyhow we want since it's a dictionary format and Python understand
127:19 - dictionaries. So we can, you know, just get let's say we just want to get just this definition
127:24 - or just this definition, we can actually get it because it is in a recognizable data structure
127:30 - in Python. So that is the best way to go about it if you have multiple words that you want
127:36 - to print. So that is how to build a simple dictionary in Python, a simple word dictionary
127:44 - in Python. I hope you understand everything we did to this point. We're going to be taking
127:51 - our Python knowledge and using it to build a simple game of rock paper scissors. But
127:56 - the first thing we want to do is to import random. So we're just importing this down
128:01 - because we're going to use it later. And you want to have a list that contains the options.
128:07 - So the options are rock paper and scissors. And I'm going to ask for the user input. And
128:14 - user input is going to be input choose rock paper scissors. And the computer input is
128:23 - going to be randomly chosen from one of these three lists. So I'm gonna say computer. Let's
128:33 - go input random dot choice options. And in here, we want to change something or want
128:40 - to add something, we're going to say rock paper scissors or exit. So if the user types
128:50 - rock paper scissors is going to keep playing the game every times exit is just going to
128:53 - opt out of the game and want to have exit as a Boolean, which is going to be false. So
128:59 - this exit is we're going to have like a while loop, we're going to say while exit is false,
129:04 - then want to keep playing the game. But if the user then types exit, we're going to change
129:09 - exit to true. So that means he wants to opt out of the game. So actually, what we're going
129:14 - to do, we're going to actually have exit on top. And then all of these should be in like
129:20 - a while loop. So while exit is equals to false equals to false, then we want to keep doing
129:29 - all of these. So this should have an indentation. So while exit is equals to false, let's just
129:37 - say, now, we're going to say if user input is equals to exit, then we're going to print
129:49 - game ended. And they were going to set exit equals to true. So now that exit is set into
129:57 - true, if the user input exit, this whole program is just going to stop. But if user doesn't
130:03 - input exit, and let's say the user says if user input is equals to rock. So if user input
130:16 - is equals to rock, then we're going to check if computer input input is equals to rock
130:26 - also. So if user inputs rock and computer inputs rock, then we're going to print your
130:37 - input is rock. And we're also going to print computer input is rock. And it's a tie. So
130:55 - if user inputs rock, computer inputs rock, that is a tie. And let's have an else if statement
131:02 - and say if computer inputs is equals to paper, then we're going to print these three things
131:15 - also, but we're going to change some stuff. So we're going to print your input is your
131:24 - input is rock, but computer input is paper. And obviously, the computer wins. So when
131:38 - the computer wins, we want to add one point to the score of a computer. So what we are
131:43 - trying to do is to come up here and have the user point. And then we want to have computer
131:54 - point equals to zero. So what we're going to do when the computer wins, we're going
131:58 - to say computer point should be point and then computer point plus equals one by increasing
132:19 - the computer points by one. And we're going to do the same thing again by saying the computer
132:31 - now input scissors. Then we want to say your input is rock the computer input scissors.
132:44 - And then we're going to say user point plus equals one. So this is the basic logic of
132:58 - what we're going to use to build this program. And then we're going to continue by saying
133:05 - yeah, we're gonna have an else if for this time around, it should be if the user input
133:15 - is different. So let's say the user input is equals to like paper. Then we're going
133:26 - to do all of this. We're just going to copy this, paste it in there. And then we're going
133:32 - to check if computer input is rock. So you input paper, computer input rock, then you
133:40 - win. When you win, we increase your score by one. And then computer inputs is paper.
133:55 - And then your input is also paper. Then we're going to say it's a tie. So when it's a tie,
134:07 - we don't input, we don't increase any score. So we're going to remove this. And now computer
134:13 - input is paper. So we're going to say your input is paper. Computer input is scissors.
134:23 - Then computer wins. So we improve computers points by that. We're going to do the same
134:32 - thing again, but this time around for when user input scissors. So now if the computer
134:46 - input rock, we're going to say your input is scissors. Computer input rock, computer
134:54 - wins. So we're increasing computer points by one. And we're going to do the same thing.
135:02 - Your input is scissors. Computer input is paper. And then we're going to say is you
135:14 - win. User point plus equals one. And right here, your input scissors is a tie. And one
135:32 - is a tie. As you know, we're not going to increase it by anything. So we're just going
135:38 - to remove that says a tie. So we can also, you know, have some verification to say like,
135:47 - then let's say else we can say else. But since this is not here, we can just have a new statement
135:55 - and order else is statement by saying if user input is not equals to rock or user input
136:13 - is not equals to paper or user input is not equals to scissors, then what we want to do
136:34 - is to print invalid input. So everything is working perfectly now or should work perfectly.
136:43 - Very simple and basic program. Let's save this and come into our terminal. I'm just
136:48 - going to say Python three, Python app dot py. So what I'm doing is just running this
136:56 - Python app where we built the program. So Python three, Python app dot py. So this is
137:02 - the Python app dot py where we built this. And once I click enter, it tells me to choose.
137:07 - So I choose rock. It says your input is wrong. The computer input scissors, you win. And
137:15 - we can keep going and say, um, let me just paper your input is paper. Computer input
137:22 - paper is a tie. And if I say exit, it's just going to stop that. And then you're just going
137:27 - to opt out of that. So, you know, it does all of that. But one thing it doesn't do is
137:33 - that it doesn't print the point. So we are meant to like show it like your point is this,
137:40 - your point is that. So let's say if the user input exit, we'll print game ended and then
137:48 - let's just print the point. So let's say you want a point total score of, then we're going
138:05 - to use concatenation to add up, add that together. And let's just say user point, add that and
138:19 - say, and the computer total score is, let's add the computer score. So once we save this
138:33 - now, I'll come back here and run that again. So let's say paper and let's say rock. So
138:40 - I won. That means I have one point is a tie. No point. So it's one zero now. And let me
138:47 - say paper again. It's a tie again. I'll say paper again. Computer wins. So it should be
138:56 - one one. I'll say rock, rock. I want to one rock is a tie. So now if I print exit, there's
139:06 - the game ended. And then it gives us an error of not able to concatenate integer. So what
139:14 - we just need to do is to come here and convert that into string before concatenating them.
139:20 - We're going to do the same thing here. Paste that. Come back in here, run that again. Now
139:27 - let's just say rock, rock, rock, rock. Let's say exit. And he says you want a total point
139:35 - of three and the computer one total score of one. So that works successfully. And that
139:40 - is how we can build a simple, you know, console game or terminal game of rock, paper, scissors.
139:47 - Hi, guys, we're going to be building a face detection program using Python. So the requirement
139:56 - for these is that you have OpenCV installed. So to install these, you just need to come
140:02 - here and type p install OpenCV Python. So this command line is going to install OpenCV
140:13 - onto your computer. So having this done, I already have it installed. So I don't need
140:17 - to do that again. And then the next thing you need to have is this OpenCV XML file.
140:25 - Now this file is pre written. And then once we use it in our Python code, it will make
140:32 - it far more easier for us to be able to detect faces using Python. So and then the only thing
140:38 - you just need to have next is the image you want to detect. So you have an image which
140:44 - will which the program will detect the faces and draw like a rectangle around the faces
140:51 - it detects. So right here, I'm just gonna go into my GitHub. And then from my GitHub,
141:00 - I can just get maybe my profile image or something. And then, yeah. So open this a new tab. And
141:08 - then I can just drag this into that. Yeah, and I can rename this to be something like
141:18 - image.jpg or test.jpg. Let's name it to be test. So now we have this, then this face
141:26 - detection dot py is a blank file. I'm just going to open that up in my VS code right
141:32 - here. My VS code you see that I have that file opened up. So right here, the first thing
141:37 - we need to do is to say import CV to now this command, this line, line of code is going
141:46 - to import the open CV which we installed earlier. And then we need to load the cascade. Now
141:53 - the cascade is this XML file, which we have here. And then I'm going to link this XML
141:59 - file in my GitHub. So I'm going to drop a link in the description below where you can
142:04 - get this file. So now let's just load that I can say face underscore cascade. And then
142:14 - that can be because of CV to that cascade classifier. And then let's load it up. So
142:30 - let's just make sure we get experience correctly. h a r cascade to write a cascade underscore
142:44 - front tell face. Let's get default dot xml. Let's check that h a r cascade underscore
142:57 - front tell face underscore default dot xml. So that is correct. And then what we just
143:03 - want to do is to import the image also so can do IMG is the image want to test to CV
143:11 - to that I am read. And then what is the name of that image tester jpg. So we can say test
143:22 - the jpg. And now that we have that we need to convert it into a grayscale. So the type
143:31 - of color in which this can read is a grayscale color, and the image is not grayscale. So
143:38 - any major user input, we just want to first of all convert it to a grayscale color. So
143:42 - we can say gray can be equals to CV to the CVT color. And then convert IMG into CV to
144:00 - that color on the score. Let's say BGR. Yeah, to gray, something like yeah, this BGR to
144:13 - gray. So that's what we want to convert it to. Now that we've converted it to that color,
144:18 - you just want to detect the faces. So we'll say faces can now be close to face cascade.
144:30 - That's detect multiscale. And then gray, 1.1, comma four. So this is just what we're using
144:43 - to detect the faces. Now, once we've detected that there's a face in this picture, we just
144:51 - want to draw a rectangle around that face. So we use a for loop as a for x, y, w, h,
145:05 - same faces. So CV to the rectangle. Yeah, then IMG, we'll say x comma y, and then comma
145:27 - x plus w, comma y plus h. And then outside that, we put under comma, and say two to five
145:42 - comma zero, comma zero, like this. And then outside that, we put under comma and just
145:49 - say two. So this is just to draw a rectangle around those faces. And now let's just display
145:56 - the output. So we can say CV to that I am show. Now this is just going to show us the
146:03 - image with the faces detected. And a rectangle drawn around the faces. Now we can say CV
146:14 - to that weight key. That means if we press a key, it should stop showing. So you're going
146:23 - to see that in a minute. So like this, yeah. So now let's just add one more line and say
146:30 - CV to those I am right. And then we can say face detected the jpg. And then we can give
146:47 - it IMG. So now we can save these and come here and test that. So we can say Python face
146:56 - underscore detection. So as you can see, it shows the image right here with a rectangle
147:14 - all around the face. So that is how to just build a simple face detection program using
147:20 - Python. We're going to be building a Python program, which is going to send good morning
147:29 - text messages to a particular mobile number every day or every morning. So we're going
147:36 - to give it a particular time in the morning, maybe like 6am or 7am to send that text and
147:41 - is automatically going to do it by itself. So for this program, we need to Python libraries.
147:47 - These libraries are text builds, and schedule now text builds is the library that is going
147:54 - to be handling sending of the messages, or schedule is the library that's going to be
147:59 - handling when we want this script or this message to be executed. So let me up over
148:06 - to my browser right here, I have the schedule library opened on pypi. So as you can see,
148:15 - it's pretty straightforward and easy, you don't need to install schedule. And then I'm
148:20 - going to get back to this in a second. So first of all, let's import schedule. I'm just
148:27 - going to bring up our terminal right here. paste that. So I have scheduling installed
148:34 - already. So it should tell me something like requirement already satisfied. But for you,
148:39 - you should go ahead and install that. So let's close this. So now that we actually do installed,
148:46 - let me talk about the other library which we're going to be using. So let me go to the
148:50 - website, text built dot com. Now this is like a website, they, they have this platform which
148:59 - allows you to for SMS marketing for various things right there. But they also have an
149:06 - API, which developers can use to send text messages. So if you use Python, Ruby, Node
149:14 - JS, JavaScript, there are various languages right here. For this video, we're focusing
149:20 - on Python. So as you can see, the only thing we need to access the API is just the request
149:26 - library. So that was in any time, let's pop up our terminal. And then we're just going
149:32 - to type peep, install requests. So this is just going to install requests on our machine.
149:42 - So I have it installed, it says is requirement already satisfied. So now that we have all
149:47 - of these, let's just get started with coding. So as you can see, this is the basic code
149:53 - to just send a text message. So what we just need is the URL, which they've given us here.
150:00 - And the phone number, the message and the key. So as you can see, we're posting a particular,
150:09 - some particular data to this URL. So this key, they have this demo key, which is text
150:16 - built. So that key allows you to send message for free, but once a day. So if you want to
150:21 - have unlimited access, then you have to go for your paid plan. But for this video, I'm
150:25 - just showing you how to use this, we're going to be sticking with this text belt key. So
150:31 - let's go back to our code. So the phone number in which we're going to be sending this message
150:36 - is my personal phone number. So I have it stored right here in this credentials or pwifi.
150:42 - I have my phone number stored as a variable right there, just for security reasons. So
150:47 - I don't show it here. The first thing I want to do is to import the mobile number source
150:53 - it from credentials, imports mobile number. So now that I have that imported, I'm just
151:02 - gonna dive straight into the code. So I'll say import requests. So now that requests
151:10 - is the library we're going to be using to send data to text builds. So now we're just
151:16 - going to have our function is going to basically send message. And we don't want to give it
151:23 - any parameter, we don't need to. And then we can just have a simple variable named res,
151:29 - which should be close to requests, dot post. Then we can see HTTP. So now this is the text
151:41 - built website in which was sending or posting our data to say text built dot com slash text.
151:57 - So now we're just gonna say the phone number, which is phone should be this mobile number
152:05 - which we imported. So say it's mobile number. And then the next thing we need to give it
152:12 - is the message. So we can just say the message is a good morning. That's the message. And
152:26 - then the key, as I explained earlier, why isn't the demo key, the free key, so the key
152:33 - is text built. Now we have all this setup, let's make sure we put a comma right here.
152:39 - We have all these. And then right here, we just want to print res dot JSON. So we want
152:50 - to print the result as in a JSON format, basically. So now we have these codes done. So this code
152:57 - on its own, if I run it, it's just gonna execute this function and then send me this message
153:06 - a good morning to my mobile number. But that's not what we want to do in this video. That's
153:12 - not the main purpose. The main purpose is to show you how to schedule this particular
153:16 - function. So let's quickly go back to the schedule page right here. Now you can see
153:23 - that is pretty easy and straightforward to use these, all we just need to do is to import
153:29 - schedule and time. And then the function which we want to say do, which we already have right
153:34 - here. And then we just need to know the time we want to schedule it to. So that's very
153:41 - easy. Now, let's import schedule. And then let's import time. So now we have these imported.
153:56 - And then the next thing we just need to do down below our function, we can just say schedule.
154:04 - So want to schedule it to be for every morning. So say dot every day on say dot day, you know,
154:14 - say dot, so day dot at. So want to schedule it for every morning at a particular time.
154:25 - So right here, we should have this curly braces, that's because it's like a method, like a
154:30 - function which we are using. So we're saying schedule dot day, that's every day dot at.
154:38 - So right here, this art is the time in the day we want to schedule it for. So let's say
154:45 - 6am, so 06. So we don't write in right here, what we do is just write it in the 24 hour
154:56 - clock. So if it's 6pm, we need to put these at 18 006am 06. So now that we have that we
155:05 - just say dot do, then right here, we passing the function which we want to run. So say
155:13 - send message. So now I would like to run this now. But if I run this now, obviously, this
155:20 - is gonna send me a message at 6am tomorrow. So first of all, let's comment this out. And
155:29 - then let's run these like every 10 seconds. So it's gonna do right now. So we can just
155:35 - simply say, just for the testing, we can say should do that every 10 seconds. That's do
155:54 - and obviously we want to do send message. So that's the code to do that. So for every
156:04 - 10 seconds, basically do this function. And then we must not forget to add our while loop
156:12 - so it continues the loop. So every day, every minute, every second continues to loop. So
156:18 - say while true. Should do dot run. pending. Yeah, that's it. And then time, let's give
156:34 - it a sleep. Just one one is fine. So now this is ready. Let's quickly go to recap on what
156:41 - we did. So we imported the phone number, the request schedule and time, then we add the
156:48 - function which does everything. And then right here, we just shared dude, when this function
156:54 - should be executed. And then we made sure we add the loop. So now let's run this and
156:59 - test it out. So let me pop up this time now. Right here, you can see that it is running.
157:08 - So we should give it like 10 seconds, because right here, we said 10 seconds. So in 10 seconds,
157:14 - it should have executed. So right here, it says success, false arrow out of quota quota
157:24 - remaining zero. Now this error just saying that this text belt key right here has been
157:31 - used for the day. So I use this one, I was testing it today. So that's basically how
157:36 - to do that. As you can see, it's running every 10 seconds, every 10 seconds. As I said, this
157:42 - key can only use it once a day. So obviously, I have used it today, I guess that's why.
157:51 - But again, if we make sure we come here, text built, okay, so it is text built, and we wrote
158:02 - text built. So I should love that. Done already, because I have used it today. But let's see.
158:11 - So it might work, it might not work 5050 chance. Let's see. Let's go. Maybe I should quit this
158:22 - quit, and then run again. So now fingers crossed. Let's give it 10 seconds. 1234. Okay. Do eliminate.
158:41 - So still the same things test text are temporarily disabled. So she showed us the same thing
158:46 - that temporarily they have disabled test text. So it's running every 10 seconds. Yeah, that
158:53 - is done. So there are other libraries instead of unit text, but you can use Twilio, you
158:57 - can use basically plenty of stuffs. But I just showed you how to use this schedule library.
159:03 - That was the main purpose of this video to schedule a task. Now you can see is doing
159:08 - every 10 seconds. Anyhow, you want it. Hey, guys, what's up, we're going to be talking
159:16 - about web scraping with Python. So web scraping is basically just getting or extracting data
159:23 - from a website. So when we say web scraping, web stands for website scraping stands for
159:29 - you know, extracting or getting some information from that website. So that's basically the
159:35 - concept of web scraping. So this can come in and do sometimes is popularly used in Python.
159:42 - And I'm going to show you how to do that in this video. So I have my website here could
159:48 - return me my blog website. And what I want to do is I want to scrape all the names of
159:56 - blog posts I have on my website, I can scrape everything, or I can just only get the first
160:02 - name or anything I want to get. So our web scraping works is that we're going to send
160:09 - a request from our code, we're going to send a request to that URL, which we want to scrape.
160:14 - And then we're going to get a response back, which the data would need. So before we get
160:21 - started, we need to Python libraries, these libraries are requests, and beautiful soup.
160:28 - Now request is used for sending requests. And beautiful soup is used for featuring the
160:33 - data we need specifically. So let's go ahead and install this library. So say beep, install
160:41 - ps4, which is beautiful soup, I will say beep, install requests. So as you can see, the board
160:52 - gives me requirement already satisfied that because I already have it installed. So now
160:59 - let's just go into our Python shell. Right here, we just need to import requests. And
161:08 - then after that, we need to import beautiful soup. So say from bs for imports, beautiful
161:17 - soup. So now that we have those two imported, this URL, which we want to send a request
161:26 - to, we need to specify it in a variable, say URL equals two. So now we have the URL want
161:36 - to send a request to. So let's go ahead and send the request. So say r equals to request
161:44 - dot gets to this URL. So now we've sent a request to that URL, we put R on it, enter,
162:01 - it is response 200. Now when it says 200 means the request was sent successfully, I'm getting
162:06 - a response. That means everything is okay. But we have another one or any other number,
162:12 - it means an error. So now that we know that everything is good, we'll just use beautiful
162:17 - soup to get the data we need. So first of all, we have to do soup equals to beautiful
162:26 - soup, open brackets, add that content, comma, we'll put lxml to pass it well. And we enter.
162:40 - So now this has passed what we need. What we want to do now is to get the name of this.
162:48 - How will we know this? So now we need to know the HTML tag this belongs in z it's in an
162:55 - h1 tag is in a p tag is in a div tag. First to do this, we'll make sure we're on what
163:00 - we need. We right click on it, scroll down and hit inspect. So now you can see that it
163:09 - is on that title, which I need. And as you can see, it's in an h2 tag with a class of
163:17 - post title. So let's tell our Python code that does what we are looking for. So let's
163:22 - say title should be equals to soup. Now this is the soup dot find underscore or find or
163:33 - find the one with an h2 tag, which has a class of post title, post title. Now let's close
163:51 - this. Now, let me just print title. You can see, I have a list of HTML code. The first
164:03 - one is also deploy a Django project with Roku. The second one is best way to get started
164:10 - with Django. The third one is how to create a Bitcoin wallet. And on and on and on. But
164:16 - all these are just HTML codes. Now I can just print only the text, I don't want to print
164:22 - them with the a tag or the h2 tag. I just want only the text, I can just say title dot
164:29 - get text. So now it says there's an attribute error. So anytime we are using the get text,
164:39 - we must make sure that we're only getting one. So anytime we're using that dot get text,
164:45 - we cannot easy for a list, we can only use it for when we are getting, let's say only
164:51 - the number nine or the number four or the first one. So now we can just say title. Let's
165:03 - get the first one, title zero, dot get text. Now you see it says how to deploy a Django
165:13 - project to Roku, it gives me only the text, but we still have this n and this, that's
165:19 - because we didn't put it in a variable. Now let's say we add it in a variable and say
165:26 - title one equals to title zero, dot get text. Now when I print title one, you can now see
165:45 - that it just gave me what I need out to deploy a Django project to Roku, which is what we
165:52 - have right here. But right here, you can see that we had an error, it was that when we
165:58 - said title, the get text, when I said you can only use it for one. Now we have another
166:04 - way which can use which is a for loop. So we can do something like for see in side to
166:13 - get text or team title, we can do something like print t dot get text. So as you can see,
166:32 - using a for loop, it automatically gives us only the text of every single thing. That's
166:38 - because we used a for loop, you can see only the text. Now we don't have any other HTML
166:44 - code with it. It gives us a list of all of it. But now I'm sure you might be having a
166:52 - question that I thought we only get in the first one. And then we add only the HTML code
166:58 - for this first one. Then why is it giving us a list of everything? So the reason why
167:04 - when we told HTML, we want this code, and instead of giving us only this code, it gave
167:10 - us everything is because each of these is inside the same tag. So now you can see h2
167:18 - class post title, if I come here, I'll come to the second one, you'll see is also in h2
167:23 - with a class of post title. But do the same with third one is in h2 with a class of both
167:29 - title. So that's what it does is just going to get a list of everything correlating to
167:34 - the data you gave it to find. In this tutorial, I'm going to show you how to resize an image
167:43 - using Python. To do this, we're going to use a particular library called pillow. So you
167:50 - need to make sure you have pillow installed. But before we even get into coding, let's
167:53 - quickly write the steps that we're going to take to do this. So first, we're going to
167:57 - have to install pillow. If you haven't, then we're going to import pillow, of course. After
168:10 - importing pillow, what we just need to do is to open up the image, the image we want
168:17 - to resize is in Python. So we use a particular code to open up that image, then what we can
168:28 - just do, let's say we want to print the size, the current size of that image, so the user
168:35 - knows the current size. Then once we print the current size, we want to specify the size
168:42 - we want to change it to change it to then once we specify that we just save, save the
168:51 - new resized image. So this is literally all we need to do is pretty straightforward and
169:01 - pretty quick. So first of all, let's open up a terminal to install pillow. So what you
169:07 - need to do is to type in three. And as I always say, if you're on a Windows, just type in
169:12 - if you're on the Mac, type in three, install pillow and knows that I use capsulator. Yeah,
169:18 - it has to be capsulator for P. Once I hit enter, I already have it installed. So it
169:23 - says requirement already satisfied. But for you, it should just go ahead and install that.
169:27 - So let's close that terminal, we can leave those comments there. So we'll follow it.
169:32 - So to import pillow, since this is done, I just hit done. Next thing we want to do is
169:37 - to import pillow that is easy. What we just need to do is to say from P I L, import image.
169:45 - So P I L alone is pillow does what we've imported. But for this particular thing we want to do
169:51 - for the resizing, we need this image. So that's why we're importing image from pillow, we
169:56 - don't need the whole module, we just need this image. So once we have that, let's update
170:01 - this and say done. Next thing we want to do is open the image we want to resize. So to
170:06 - open the image, we're going to use image to open. So let's say image is equals to image
170:13 - dot open. So I'm having a new variable named image. This is where I'm going to store the
170:19 - opened image. And I'm using this image module, and I'm saying image does open. And then we're
170:25 - going to specify the name of the picture that we want to open. So right here, I have this
170:31 - picture named code with Tony logo. So I'm just going to copy the whole name. And I'm
170:37 - going to come back in here. And I'm going to paste that in there. So that is going to
170:41 - open up that image and store it in this variable. So that is also done. The next thing we want
170:49 - to do is to print the current size of the image. So to do this, we're just going to
170:53 - say print. And let's do something like f current size. So we can say the image size image,
171:08 - which is this image dot size, that is just going to print the current size for us is
171:12 - that easy. We can actually test this. So let's run it and see. So as you can see, it says
171:18 - 176 to 176. That is the current size. Let's actually test that and see if that is correct.
171:24 - So we come back in here, we right click and click on get info. So let's see right here,
171:30 - as you can see in dimensions, it says that that is one synthesis by one synthesis. So
171:36 - that is pretty accurate. So once we have that done, we know the current size. So now we
171:41 - can know what we want to change it to. So let's see, let's say, resized image. So this
171:52 - resize image is the variable, which we're going to store the new the size of the new
171:57 - image. So we're going to change this image to let's say 500 by 500. So to do this, we're
172:02 - going to say image dot resize. We just want to say, we are going to have two brackets
172:11 - in here, 500 by 500. So this is going to resize the image to 500 by 500. But we are not done
172:19 - this just like specifies what we want to change, but it doesn't actually save it. So to save
172:24 - it, we're going to say resized image dot save. So now we're going to specify the name of
172:33 - the new file. So let's say code with Tommy logo, let's say 500.jpg. So we want to save
172:46 - it as a jpg file. Let's see jpg. Same thing, but let's just leave it like that. So this
172:53 - is actually what we need is just like 123455 lines of code that we need to actually change
173:00 - this. So let's save this file. Let's run it shows us the current size, it doesn't say
173:06 - anything. But if we come back in here, you're going to see that we now have a new picture
173:13 - been saved, you're being created your name code, you told me logo 500, which is actually
173:17 - what we specified right here, code with Tommy logo 500. Now, if we right click it and get
173:23 - the info, the information, you can see now it says the dimension of this image is 500
173:28 - by 500. So this is how you can use with Python. So there are various ways you can even actually
173:34 - implement this in like a real project. Imagine you have a you can you have a user that wants
173:40 - to, you know, come to your website, and you know, upload an image and change an image
173:44 - to whatever size they want, they can easily do that with using this program. So you can
173:49 - actually let's say build a web app that does that takes an image and tells the user to
173:54 - input the size they want to, you know, change it to, and then you give them the image or
173:59 - let's say you give them a link to the new resized image. So let's actually do something
174:04 - like that. Let's ask the user what they want to put this in a function. And let's see what
174:09 - that does. So we can say def resize image. And this is going to collect is actually going
174:18 - to have two different parameters. So size one, they just say that size two, I guess.
174:28 - And what this is doing is ice collecting the pixel dimensions. So we're going to tap this.
174:36 - But what this is just going to do now, so it's going to open this image, right? Print
174:41 - the current size. And then instead of saying this, we're going to say size one. And size
174:47 - two, that's a two, let's just say, what we can even do right here, we can just do something
174:57 - like, you know, this is concatenation. And we can just say, size one. And then you know,
175:11 - to have that's the name of the image. So now we can call this function. resize image. But
175:20 - to give it the you know, the parameters it needs, instead of just giving it like, you
175:24 - know, if 2200 by you know, 300, what we want to do is to ask the user so we can just say
175:30 - print. No, we want to say size one equals input
175:49 - enter length, enter width. And for size two, we can say enter length, then we're going
176:01 - to call this function using the size one. And size two. So this actually makes it quite
176:07 - more interactive. So now let's see what that gives us. We run this entire wave to let's
176:12 - say I want to change to 2000 by 40, weird dimension, but let's see. So it actually gives
176:20 - us an error, it says string cannot be interpreted as integer, that is right here. So what we
176:27 - need to do is to just make sure that we are changing this input into an integer, because
176:32 - it sees it as a string as default. So we're gonna do this integer, wherever the user inputs
176:40 - want to change it to an integer. So let's save that you can either change it to an integer
176:45 - here, or you can just do the same thing by changing it to an integer right here like
176:48 - this. So that's the same thing, but we already changed it there. So it should work now. Let's
176:54 - run this 2000 by 40. So it gives us an error and says can only concatenate string not integer.
177:03 - So also, we were, you know, dealing with concatenation, you can add us because it sees this as an
177:09 - integer, right? So you can add an integer on a string. So what you need to do now, you
177:12 - need to change this back to a string right here, we were concatenating, and that should
177:17 - solve it. So let's run it again now. And this should work perfectly. 2000 by 40 gives us
177:24 - the current size, right here. And if we come back in here, we're going to see that we have
177:29 - called it to me 2000. We had looking image where we get the info. You can see that we
177:39 - have 2000 by 40. Now, this is how you can resize an image with Python. In this tutorial,
177:46 - I'm going to be showing you how to draw a chart or graph with Python. So this is quite
177:53 - straightforward, because we're going to be using a library called matplotlib. So we first
177:59 - of all have to install the library. And to do this is quite easy. What we just need to
178:04 - do is to open up the terminal and install it like we install all the ones so pip free
178:11 - install matplotlib. So I have installed, of course, it says requirement already satisfied.
178:19 - But for you, it should go ahead and install that if you don't have it installed. So once
178:23 - we have this installed, the next thing we need to do is to just import it. So we're
178:26 - going to import matplotlib dot pi plot. So what we need is dot pi plot lessons, but it
178:36 - as PLT. So we don't need to type this every single time, we just type PLT when we need
178:40 - it. So the first thing we want to do now is to determine the x axis. So in a graph, right,
178:45 - we have the x axis, and we have the y axis, the x axis is the horizontal y axis is the
178:50 - vertical. So we want to determine the points for the x axis. To do this, we can just say
178:55 - x, I'm going to specify that as a list. So let's just say something like 2245. And we
179:05 - are going to do the same thing for the y axis. And let's say something like two also, but
179:12 - then three, six, so that is all right. So what this is this our coordinates. So this is the
179:20 - first coordinate two, two, four by three, and five and six. So these are coordinate
179:25 - are corresponding to themselves. So on the graph, there will be a point where two is
179:29 - equals to two, four corresponds to three and five corresponds to six, I'm going to show
179:33 - you that. And so let's plot the point to plot the point, we're going to say PLT dot plot
179:42 - x comma y. So this is going to plot the point. But then we want to name the x axis, so it's
179:48 - going to have a name. So to do this, we're going to say PLT dot x label. So let's say
179:57 - x axis. We're going to do the same thing for the y axis. So say PLT dot y label. And let's
180:08 - say this is y axis. And what we just need to do is give you a tie to let's say PLC dot
180:17 - tie to is pretty easy and straightforward. So we can just say demo graph. And what we
180:28 - just need to do now is to just show it. So everything has been plotted successfully,
180:32 - we just need to show you by saying PLT dot show. So this is going to show us the graph.
180:37 - And once I click on run, is going to open up, as you can see, it opened up this particular
180:44 - window. And as you can see, right here, we specified, let me quit this real quick, two
180:48 - and two. Okay, I quit that so that quit, let's run that again. So let's make this large,
180:56 - you can see that this has two by two, this has four, and three, and this has five and
181:02 - six, just like what we did here, two by two, four, and three, five, and six. So we can
181:08 - play with that a little bit. And we can even add more points and say something like one,
181:15 - I will say four. Now we can let's say, one, six, and yellow. So let's say one, seven.
181:26 - So let's run that and see what that gives us. So as you can see, it's kind of a weird
181:30 - graph, because that's go and come back. But you can see what I'm talking about, as all
181:35 - the points correspond to themselves in what we gave them right here. So to actually avoid
181:39 - that weird error, what we can just use to remove this one, so we don't go back in descending
181:44 - order. So we just go forward, once I save this, and try to run it again. We should have
181:52 - another pop up. Let's quit this. And then run that again. So as you can see, now we
182:00 - have a normal graph. So that is how to do that. Pretty easy, pretty straightforward.
182:04 - As you can see, everything works successfully, we can actually build like a full blown web
182:08 - application just for this, like, or even build an API just on this, just providing this type
182:13 - of service to a user. So that is the first stuff I'm going to show you in here, we can
182:19 - also do another stuff by like adding two different lines on one graph. So for us to do this,
182:25 - all we just need to do is to say, let's say this is x one, y one. And what we're just
182:32 - going to say is, right here, we say PLT dot plot, we're going to say x one, y one. So
182:40 - this is the first line on the graph, we'll say label, let's label this line one. So what
182:49 - we want to do now is do exactly the same thing again, we're now going to say x two y two,
182:53 - so x two, let's give x two, 12345. Let's just make it a normal linear graph. And we're going
183:02 - to say y two. Let's just say 1234. So that is that I'm going to do now is to plot that
183:14 - line also. So I want to plot that line on the graph. So here, PLT dot plot, I want to
183:20 - plot x two, y two, I want to give this a label of line two. So once we have that, the next
183:32 - thing that we just need to do, since we already plotted the first line, and then we've plotted
183:37 - the second line is now easier because we can just say PLT dot x label to actually plot
183:44 - this. So this PLT is like an instance of this particular, you know, pie plots that we imported
183:51 - just so you know that. So what we need to do now is to come here and say, PLT dot x
183:58 - label x axis, we already have that we already have the y axis, we have the tie to the only
184:04 - thing we want to add is called legend. So I'm going to explain what that is. So let's
184:07 - just say demo graph two lines. So we're going to add legend. And what this legend does is
184:18 - that it shows an indication for the two different lines with different colors. So it's going
184:22 - to tell you what color is what line and what color is the other line. So let's say PLT
184:27 - dot legend. So this is going to show that and I'm going to show you what that is when
184:31 - it shows. So this is what we need. Just ignore this error, because I'm sure like the library
184:37 - hasn't updated or something, but everything is working. Now let's run this and see. So
184:42 - as you can see, we have two different, you know, lines. And this is what I mean by legend,
184:46 - if I make this large, this legend is actually indicating what line is what color. So line
184:53 - one is the blue one. And line two is the orange one. So as you can see, we have your y axis,
184:59 - x axis, demo graph two lines, we can even save this by clicking on this button right
185:04 - here is going to save as an image on your computer. So let's come back in and let's
185:08 - quit this. There are also various things we can still do. For example, we can you know,
185:13 - like have point on each graph, like where we have PLT dot plot. So let's actually remove
185:20 - these two lines, we don't want to plot two, let's just have one. And we don't really need
185:25 - legend since we don't have to. So what we want to do right here now is that we have
185:31 - PLT dot plot, what we can just say, let's remove x one by one, let's just change it
185:36 - to x and y. So we can just say right here is to have color. So I'm going to show you
185:42 - what we're doing, because it's better to show you the image. So let's say the color is green.
185:50 - Line style. Line style is equals to dashed. And we have line width. And let's just see
186:04 - line width is equals to three. We have marker is equals to Oh, we have marker face color.
186:22 - And let's say this is a blue and marker size. Marker size is equals to 12. So we don't let's
186:37 - remove this. So we removed that. And what we just want to do is to come here. What we're
186:46 - just going to do is to say PLT dot y limb. So basically selecting the x and y ranges.
187:01 - So we're going to do one to a PLT dot x limb. And we're going to do one to a also. And then
187:17 - right here, we're just going to have the label which we already have there, we're going to
187:20 - have title. So let's just change this to demograph and let's say customization. So I just customizing
187:27 - what we need. And then let's just say PLT dot show. So once we run this, you'll see
187:33 - the changes. So as you can see, this is all we have, you can see that when we specify
187:39 - this line as blue, if I bring this down a little bit, you can see that that marker face
187:45 - color is blue. And line style is dashed. So as you can see, line style is dashed. And
187:51 - the color of that line is green, the color is green, the face, this right here, face
187:56 - color is blue. So basically, that's what all of that does is just some pretty cool customization
188:01 - that you might want to add to your graph. So let's just go ahead and quit this. So now
188:07 - we've been dealing with the normal graphs, what we want to do is to actually, I want
188:11 - to show you how to draw a bar chart. So to draw a bar chart is also pretty easy, or you
188:16 - just need to do. So they just change this to left. And let's say this is height. And
188:26 - let's give this like 12345. And let's give this like something like 1011 2336, and four.
188:46 - So this is the height of the bars, right in a bar chart. And this is the x coordinates
188:51 - of the left side of the bars. And let's give it label for each of the bars. So we're going
188:58 - to do is to just say, tick label, label is equals to, let's say, one, two, we have to
189:13 - put all of these as strings. So one, two, three, four, and let's say five. And once
189:24 - we have all of this, we can now say plt dot bar. Since we're dealing with a bar chart,
189:31 - so when you give it left, height, tick label, equals tick label. And then we want to say
189:40 - with want to specify the width as no point a less a color. Let's give the color something
189:51 - like blue and orange. So that's gonna do the work for us. And what we just want to do is
190:01 - to we don't need this, we don't need plots, what we need was bar. So now we don't also
190:06 - don't need this, we're just gonna say is the x label, which is x axis, y axis, and let's
190:12 - say demograph bar chart. And let's now show it. So that is all we need. So you can see
190:19 - everything we did here pretty easy. Now once we run this, we should have a bar chart shown.
190:25 - As you can see, beautiful. We have 12345 as the names, x axis, y axis, demograph bar chart,
190:33 - that is how to easily, you know, create a bar chart in Python is very easy. And, you
190:39 - know, very straightforward. You can also do more things like scatter graph, you know,
190:43 - pie chart, and all of that. But I feel like if you really want to go into this, you can
190:48 - also research more on this particular library. But for now, this is how to you know, let's
190:53 - run that again, this is how to build a simple program that, you know, automatically generate
191:00 - graphs, giving some figures.