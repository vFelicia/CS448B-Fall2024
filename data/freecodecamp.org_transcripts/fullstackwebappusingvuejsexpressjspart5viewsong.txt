00:00 - hey everyone and welcome to part five of
00:01 - building a full stack web application
00:03 - using vue.js and express.js i am cody
00:06 - and let's go ahead and
00:07 - get started so if you remember in the
00:09 - last one we kind of built up the songs
00:11 - panel
00:12 - and we made a songs endpoint to grab all
00:14 - the songs in a songs and point to post
00:16 - new songs
00:18 - created this panel to create songs
00:20 - and all these are required fields
00:23 - so in this
00:24 - part of the tutorial we want to continue
00:26 - on and build out the functionality of
00:28 - viewing a song so if you remember here
00:30 - when we clicked
00:32 - view
00:33 - it takes you to this url which is song
00:35 - slash id which is one in this case
00:38 - and if we were to go back to the routes
00:40 - just to refresh our memory
00:42 - we have a new route here
00:45 - called song song id
00:47 - and we have the name is song and the
00:49 - component is view song so basically
00:51 - that's just going to show
00:53 - this component here
00:56 - and we need to start implementing this
00:57 - out
01:01 - so to start off
01:04 - we can actually grab that same data
01:07 - from the backend
01:08 - so assuming that we have a backend
01:10 - endpoint we could do mounted
01:13 - and then run a function when it's
01:15 - mounted and then up here
01:17 - again we're just going to import
01:19 - whatever that song's thing is that we
01:22 - used so
01:23 - import song service go ahead and just
01:26 - close out of these extra tabs and make
01:28 - it easier to figure out what i'm doing
01:31 - so inside here we import song service
01:33 - from that services song services folder
01:36 - and what we can do when it mounts is
01:39 - remember to do async we can say const
01:42 - song is equal to await
01:44 - song service dot
01:47 - i'm going to say show
01:49 - and then here i'm going to pass in a
01:51 - song id
01:53 - in order to get the song id from the
01:56 - url here so remember this was a one and
01:58 - we want to grab it
02:00 - all we need to do is
02:02 - i say all but there's a lot of stuff you
02:04 - need to grab so this dot
02:06 - store.state.org route dot prams dot song
02:10 - id so there's a lot of stuff going on
02:11 - but basically this is the ux store we
02:14 - grab the state in the ux store
02:17 - route is defined because if you remember
02:20 - an app a long time ago
02:22 - we
02:24 - did added this line to sync the router
02:26 - to the store so whenever the router
02:27 - changes in the ui
02:30 - that value here
02:32 - route.params.songid changes as well
02:36 - so to kind of demonstrate that let's
02:39 - just go ahead and make sure that we can
02:40 - go to this page
02:43 - let's see song services
02:45 - grab but never use let me just comment
02:47 - this out really quick
02:55 - print out song id
02:58 - okay what is this one warning about now
03:01 - trailing space
03:07 - okay so again i was trying to explain
03:09 - how we can get the song id from the url
03:12 - and to demonstrate that as we change
03:14 - routes every time in view
03:16 - this route changed event is being
03:18 - dispatched so if you remember in
03:21 - if i go back to the store here we have
03:25 - set user is an action and set token is
03:27 - an action those are kind of actions that
03:29 - are dispatched and it turns out that the
03:32 - view router what i call or the view sync
03:35 - what is it called again i'm sorry the
03:38 - view x router sync
03:41 - module is basically just a way to
03:44 - map
03:45 - and send out dispatch events whenever
03:47 - our route changes so if you look here
03:49 - inside here we can go to route
03:52 - and at this point
03:54 - the prams
03:55 - or path or songs if i were to go to
04:00 - hit the plus
04:02 - it changed this to a full path of songs
04:04 - and again i can time travel back
04:06 - to those states that i was at
04:08 - if i want to
04:11 - so very useful
04:13 - but what i'm trying to explain here is
04:15 - that as
04:16 - you go to the different routes if there
04:18 - is a prams it will be declared on this
04:20 - brand's object
04:21 - so if i go back to here click view
04:25 - we see here on params we have a song id
04:27 - of one
04:29 - which is why we get that very long
04:32 - store state route param song id
04:36 - okay now that we have the song id we can
04:38 - go ahead and try to grab it from the
04:40 - back end so i'll say song service show
04:44 - song id
04:46 - and then if i go to services and go to
04:47 - song services
04:50 - we can add that show method here so i'm
04:52 - just going to say show
04:54 - song id
04:57 - and then i'm going to return
04:58 - an api
05:00 - dot get
05:01 - on songs slash
05:05 - song id
05:11 - so hopefully that makes sense for
05:13 - everyone
05:16 - we're basically just passing the songs
05:17 - id building up a string so it should try
05:19 - to access songs song id
05:21 - and again i'm going to go ahead and
05:24 - save it
05:31 - actually so when we get the song back
05:32 - we'll say this dot song
05:34 - and then up here we can say data
05:37 - return
05:37 - [Music]
05:39 - song of null
05:43 - see if it lets me save that
05:46 - and it does so now
05:47 - when we go to the song's endpoint i'll
05:49 - just do a hard refresh
05:51 - you can see that it's making a network
05:52 - request to
05:55 - song 1
05:57 - 404 not found
05:58 - and that's because again we have not
06:01 - implemented that in the back end so
06:02 - let's go ahead and do that part so if we
06:04 - go down here to
06:05 - songs controller
06:07 - before that
06:08 - go to routes let me just close out of
06:10 - all this
06:11 - we can just make a new route
06:14 - which is a get request
06:16 - two songs
06:17 - slash
06:18 - song id
06:21 - call the show method
06:22 - again that's not declared so i'm going
06:25 - to go ahead and copy paste this index
06:26 - method here and change it to show
06:29 - and now what we want to do
06:32 - is
06:33 - instead of find all we can say find by
06:35 - id
06:37 - and we do rec.prams.songid
06:44 - so instead of songs i'll say song
06:46 - and return that
06:53 - and i think that's all we need to do
06:59 - let me just double check
07:03 - yeah i think that's good so now at this
07:06 - point again it's always good to go over
07:08 - here
07:09 - just copy that and rename it
07:12 - to get song
07:13 - [Music]
07:15 - and then i can say song of id1 save that
07:18 - now if i do a git request look at that
07:20 - it returns an object
07:22 - it returns that some song object back to
07:25 - us it's not necessarily an array
07:28 - so what that means is in our ui at this
07:31 - point if we were to refresh this page it
07:34 - should request that song
07:36 - we should get a response with that
07:38 - entire song
07:39 - awesome and what we can do now at this
07:41 - point is go back to the ui
07:43 - go to that songs view
07:49 - and we can start building out our
07:50 - template to use that
07:52 - song
07:53 - data attribute right there
07:57 - so to do that let's just go ahead and
07:59 - create a couple of panels
08:01 - so again with the include panel
08:09 - case sensitive so make sure you do that
08:11 - right and components
08:14 - make sure you include
08:15 - panel
08:18 - so what we can do at this point is
08:20 - basically
08:21 - we can build out a panel
08:24 - give it a title of
08:26 - song meta data
08:29 - and then let's go ahead and just
08:31 - test to make sure we can print out our
08:33 - song
08:34 - so i'll just say song.title
08:37 - go over
08:38 - here is it called title should be called
08:41 - title
08:43 - cannot read property title of null
08:46 - i think in fact i should just make this
08:47 - an empty object
08:52 - let me just refresh the page really
08:54 - quick
09:01 - hmm
09:03 - well it should be putting in there let's
09:04 - see
09:08 - try to print out a couple of other ones
09:28 - song service show i mean i could print
09:31 - out what this dot song is at this point
09:37 - see if that gives us anything in the
09:39 - console gives us an object with data
09:42 - man every time i'm sorry so i keep
09:44 - forgetting that
09:45 - again this is going to return data
09:55 - okay so those all showed up now
09:59 - all right so going back to the view
10:01 - let's go ahead and actually
10:03 - build out
10:05 - a couple of different panels
10:07 - so the first panel i want to build
10:10 - i'll just say
10:11 - wrap that in a different now
10:18 - and then here
10:20 - actually i'll say v
10:22 - layout
10:24 - i'm gonna go v flex here
10:28 - and this is because i want to build
10:31 - again like side by side
10:33 - panel on the left
10:35 - and a panel on the right and if i were
10:37 - to go here
10:38 - simply just put that
10:40 - here and we should get half screen okay
10:46 - so very similar to how we did it before
10:49 - if i go to that songs view
10:53 - let's just go ahead and
10:57 - copy this code
11:02 - and maybe we can find a way to like
11:04 - reuse it if it's something that we find
11:05 - that we can reuse between components
11:08 - but i'll go ahead and copy this
11:10 - and i'll paste this here
11:18 - not sure why the indentation is off by a
11:20 - little bit
11:22 - oh see b flex v
11:25 - anyway okay so v layout is good now
11:29 - so again this should all work fine
11:34 - the only issue is again we had like some
11:35 - custom styles over there
11:39 - and the reason i'm i don't think i'm
11:40 - going to build a reusable component
11:42 - between these two things
11:44 - is because i do think view songs
11:47 - will change drastically because they
11:49 - might have different buttons and whatnot
11:51 - but for now i'm just going to copy and
11:52 - paste those styles into here so that we
11:54 - have a very similar look as to the other
11:57 - one
11:59 - and instead of having view we don't need
12:01 - a view anymore so i'll just go ahead and
12:02 - get rid of view
12:04 - because we're already on that page right
12:10 - so
12:12 - underneath i think the album we want to
12:13 - go ahead and just put
12:15 - the album
12:16 - title so i can say song.album
12:23 - and
12:24 - that puts it down there probably because
12:26 - i just need to i can just add a break to
12:28 - fix that but
12:31 - all right so that is the album title
12:33 - for whatever reason i put it as blah
12:35 - blah blah
12:36 - but just to show you i think there's
12:38 - going to be a lot of different stuff
12:40 - that's going to potentially be added
12:41 - maybe more buttons to like bookmark
12:43 - or unbookmark um
12:45 - to edit or delete we'll be on this panel
12:47 - so let's not go ahead and try to
12:50 - abstract you know a functionality for
12:52 - this view
12:53 - and this let's keep this one separate
12:58 - so with that being said
13:00 - i think on the right side so this is
13:02 - panel on the right
13:05 - actually sorry down here this is the
13:06 - panel to the right
13:10 - what we want to do is just go ahead and
13:12 - make another panel
13:14 - title can be
13:15 - uh tabs
13:18 - and close off that panel and then inside
13:21 - here
13:21 - we can just say
13:24 - song dot
13:25 - tab
13:32 - so we have a tabs panel now
13:35 - uh go ahead and just do a class of
13:37 - margin left two
13:39 - just to give it a little bit of space
13:43 - and the tab is not showing up yet
13:46 - and that could be because the
13:49 - thing we're getting back has nothing for
13:51 - tab
13:52 - so in this case i think it'd be useful
13:54 - if we could
13:57 - have some real data and this is going
13:58 - back to why you should have real data um
14:01 - it just makes it easier to build up an
14:03 - application with real data versus you
14:05 - trying to like
14:06 - figure stuff out
14:10 - so i think if we go back to bro uh yeah
14:12 - browse go to create i'm gonna go ahead
14:15 - and just try to fill that out more
14:18 - so float on artist modest mouse genre
14:21 - rock
14:22 - album and that's going to be
14:31 - good news for people who love bad news
14:36 - go ahead and copy this
14:40 - youtube id
14:42 - keep that intact so now here i can say
14:45 - float on
14:46 - guitar tabs
14:48 - let's just find a legit tab i don't care
14:51 - if it's even that good
14:54 - but basically i'm just going to copy
14:55 - this
15:02 - and paste it in here and honestly this i
15:05 - mean i wouldn't be doing this in a real
15:07 - live app because i'm not just going to
15:09 - copy someone else's guitar tab probably
15:12 - have like my own terms of service and
15:13 - privacy policy and require people to
15:14 - upload their own
15:17 - but this isn't even planned to be going
15:20 - live so unless someone else wants to
15:21 - grab my repo and do something with it
15:22 - feel free to
15:24 - so we have the guitar tab and float on
15:27 - we can say song lyrics
15:30 - now google's pretty good at just giving
15:31 - us the lyrics right here so
15:34 - thanks google
15:38 - so i'll go add the lyrics i'll go create
15:40 - song
15:41 - that gets us back
15:43 - a
15:44 - song down here
15:46 - so id6 is the good one that has all the
15:49 - good data
15:54 - so one thing you'll notice is on
15:57 - the tabs thing this is all like
16:00 - messed up
16:03 - so to inspect the element here
16:13 - i wonder if that's just because it's
16:21 - it's inside of a div i think i just need
16:22 - that inside of text area
16:24 - so anyway going back to create song
16:26 - let's go ahead and take
16:28 - the similar text field that we use for
16:31 - the tab
16:32 - so i'll go here i'll go to view song
16:35 - and instead of just doing song tab
16:37 - i will put the text field
16:39 - and have it point to song dot tab
16:42 - this one's not going to be required
16:46 - nor do we need the rules
17:01 - actually in fact let's just change this
17:03 - to text area change it to
17:05 - read only
17:07 - and then change it to v model oh we
17:09 - already have b model there so
17:11 - i'll just say text area
17:14 - because we don't want some extra styles
17:15 - on there so we have a text area now
17:20 - and i think it'd be useful if we made
17:22 - this like
17:24 - close to full
17:25 - width so down here i can say text area
17:28 - width is 80
17:31 - see if that works
17:34 - okay
17:35 - so we do have a text area now with a
17:36 - width
17:43 - so
17:43 - i don't like how you can collapse it and
17:46 - stuff so first of all i'm going to say
17:48 - font
17:49 - family
17:50 - mono space
17:52 - we do width of 80 percent border
17:55 - none
17:56 - height of 600 pixels
18:03 - border color
18:05 - trans
18:07 - parent
18:09 - overflow auto so it's a scroll bar
18:12 - and then padding of 20 pixels
18:15 - i'll do 40 pixels
18:22 - all right so at this point i'm just
18:24 - going to do 100
18:26 - why not cool so we have the tabs here
18:31 - that was pretty easy to do
18:33 - going back to review song
18:36 - if we were to add yet
18:39 - another b
18:41 - or i'm sorry you could do
18:42 - [Music]
18:44 - a bead layout underneath that
18:54 - so go ahead and make another video
18:55 - layout and inside here
18:57 - we're going to do a very similar
19:05 - thing
19:07 - so boom there's two there's a lot of
19:08 - copy paste going on here so i think at
19:10 - this point or soon i'm gonna refactor
19:12 - this to have nested files to represent
19:15 - all the different panels
19:17 - um but for right now
19:19 - we don't need song metadata here this is
19:21 - probably gonna be like a youtube
19:25 - embedded
19:27 - but here over on the right
19:33 - a cv layout
19:38 - hmm
19:44 - i think i accidentally deleted something
19:46 - that i shouldn't have
19:48 - let's see
19:59 - i think i'll just take the v layout and
20:01 - put it down here
20:08 - okay the issue is i don't have a root
20:12 - so i need to add all that
20:15 - and make that a little bit smaller
20:19 - so instead of tabs we can say lyrics
20:22 - over here you just do song dot lyrics
20:26 - we go ahead and save that
20:28 - see what it gives us
20:45 - in fact i think we should make the
20:46 - youtube video go up here and the right
20:48 - so that lyrics and songs are right next
20:50 - to each other
20:51 - so i'm going to pull that out
21:04 - hmm hold on
21:13 - okay
21:15 - let's see
21:18 - v-flex here
21:23 - all right so
21:24 - at this point i'm feeling this uh page
21:26 - is getting a little bit more complicated
21:28 - than i like it to
21:30 - so it's good if we can kind of split up
21:32 - a view
21:34 - into smaller views so again components
21:37 - i'm just going to go ahead and create a
21:38 - view song folder
21:40 - and i'm just going to cut that and put
21:42 - it into the viewsong folder whoops
21:45 - not sure why i did that
21:54 - anybody's click and drag
21:56 - yeah
21:57 - there you go
21:59 - so inside view song
22:02 - i'm going to go ahead and say
22:04 - song meta data view
22:08 - and that is going to be
22:11 - pretty much
22:12 - all of the stuff that is here
22:18 - i'm going to put the song metadata here
22:20 - in this file
22:23 - and what we can do here is just go ahead
22:25 - and pass down
22:27 - the props of song
22:29 - because we don't want all these
22:30 - different smaller panels to also make
22:33 - http requests to get that song using the
22:36 - song id and i'm sure there's stuff you
22:37 - can do like
22:38 - cash on your service
22:41 - or you could just use your vuex date and
22:43 - just have
22:44 - you know songs somewhere on the state
22:47 - um but for now i'm just going to
22:50 - have the props
22:52 - oops should be an array my bad
22:57 - but pretty much just clear up props and
22:59 - pass in song and so inside here all
23:01 - these should have access to song
23:03 - so if i were to save song metadata now
23:05 - and go back to view song i should be
23:07 - able to say song
23:08 - metadata
23:11 - and then for props i'm going to bind
23:13 - song equal to song
23:16 - and i'm going to go ahead and close out
23:17 - of all this
23:20 - or not close out but you know delete
23:23 - and then
23:24 - i think that's good if i were to save
23:27 - this
23:29 - let's see
23:32 - let me just go ahead and comment this
23:33 - stuff out for now
23:44 - no such style our directory okay so
23:46 - that's because we did not
23:49 - change it in our router so up here we
23:51 - can go to components view song and then
23:54 - slash view song
23:55 - and maybe we should rename this to
23:57 - something else instead of view song
23:59 - maybe like
24:00 - index.view
24:04 - i don't know if you guys have a
24:05 - different approach to that feel free to
24:08 - let me know but so instead we can just
24:10 - do
24:11 - yeah
24:12 - you song index
24:26 - song metadata is not registered okay so
24:28 - at this point
24:30 - we can go back here and make sure we
24:33 - import
24:35 - import song metadata
24:37 - from
24:39 - slash component slash song
24:41 - meta data
24:44 - and of course we need to put that down
24:45 - in the components here save this file
24:48 - and it should show up
24:52 - oh i forgot to put
24:54 - view song
24:57 - so the difference between this at symbol
24:59 - this is like absolute path
25:01 - we could just do a relative path if we
25:03 - wanted to
25:04 - in this case it might make more sense to
25:06 - just do a relative path to the folder
25:08 - because we know these are all kind of
25:10 - sub components of view song
25:13 - so instead i'll just do that
25:16 - all right so now we have a panel which
25:18 - is being displayed
25:23 - um
25:24 - actually panel's not being displayed
25:26 - because i forgot to include it over here
25:29 - so again what we can do is go back to
25:31 - the index
25:32 - we can go and grab this panel here
25:38 - and import it
25:39 - and then say components
25:42 - panel
25:46 - all right so now we have a panel and
25:48 - again that image is gigantic but if you
25:50 - remember here in the index.view we have
25:52 - like all this style defined and it's not
25:54 - even relative or it's not even relevant
25:57 - to the index in general it's more
25:58 - relative to
26:00 - that song metadata so what we can do is
26:02 - just put it in here
26:05 - instead of inside of that other thing
26:09 - so go ahead and just delete all that
26:12 - so then it makes it really easy to know
26:14 - okay if we're looking at this main
26:16 - view song index
26:18 - the only thing that's relative is this
26:20 - text area style which we're probably
26:21 - going to abstract later on
26:24 - so now we go back and
26:26 - our song metadata panel is being
26:27 - displayed perfectly
26:31 - and it's all nested inside the song
26:33 - metadata sub view
26:37 - so then
26:38 - we probably want to also create
26:40 - something
26:44 - similar to the um
26:46 - the panel but for youtube videos so i'll
26:48 - say youtube
26:50 - view
26:55 - i'll just say youtube why not
26:58 - so then in youtube if we can come over
27:00 - here and just say
27:02 - use something called you
27:04 - tube
27:07 - and again i don't yeah we do need to
27:09 - pass the song to it but in this case it
27:11 - make me make more mate sorry it might
27:14 - make more sense to just pass the youtube
27:16 - id
27:22 - which in fact if we were to
27:24 - go to youtube now
27:27 - we could say props
27:30 - it's going to be youtube id
27:39 - and go ahead and remember to install
27:41 - components
27:42 - panel
27:44 - i probably should have just copied and
27:45 - pasted a
27:47 - copy of this
27:49 - because it's very similar
27:52 - so if i were to go back to the youtube
27:54 - view
27:54 - [Music]
27:56 - and just go ahead and copy that into
27:58 - here
28:04 - what we could do at this point is just
28:06 - say panel title equals youtube
28:10 - video
28:14 - close the panel and then for now i'll
28:15 - just say
28:17 - youtube id
28:18 - because we're going to import another
28:20 - youtube module to be able to actually
28:21 - display that
28:24 - i think
28:25 - i actually need to include it here in
28:27 - the index
28:28 - so if i were to import
28:31 - youtube
28:33 - and go down here and paste youtube here
28:37 - go back
28:39 - we get a youtube panel and it prints out
28:41 - that youtube id
28:45 - so again for youtube video let me just
28:47 - add a little bit of margin left too
28:49 - just so it's not so adjacent to that
28:51 - other one
28:52 - but so we actually want to display this
28:55 - youtube video right an embedded
28:57 - youtube player so if we were to go and
28:59 - just do a google search review youtube
29:02 - uh component
29:05 - we can see that there's a couple on
29:07 - github so let's just go ahead and check
29:08 - out this one here
29:11 - it's got 113 stars so
29:14 - basically
29:16 - they say all you need to do is
29:19 - npm install it so if i were to go back
29:21 - to my
29:24 - client thing and install view youtube
29:26 - embedded
29:27 - and then i go to
29:29 - my main go ahead and include it
29:32 - it's just nice to just copy and paste
29:34 - code
29:36 - so close here i'll go to main
29:39 - go ahead and just paste all that in we
29:40 - don't need view
29:41 - we do need that
29:44 - we if you don't want to install the
29:46 - component globally
29:48 - i do not want it globally actually well
29:52 - yeah i don't really want to globally so
29:57 - i'll just put this down here
30:01 - save this
30:07 - and then we can go back
30:09 - make sure that the download's done it
30:10 - looks like it is
30:12 - go back to our docs what else did they
30:13 - say and they say we could just do
30:14 - something like this
30:32 - so
30:33 - at this point we can actually go to our
30:37 - youtube
30:38 - whatever this
30:40 - component was
30:41 - instead of just putting youtube out here
30:43 - we can say
30:44 - use youtube
30:51 - and then we want to pass it a couple of
30:52 - attributes so one is video
30:54 - id and that's going to be
30:57 - song id
31:00 - arts youtube id
31:02 - like we're passing in in the props
31:04 - and then
31:05 - we do a player with is
31:08 - 50 or 500 pixels
31:10 - player height is 194.
31:15 - i'm not sure why that's arbitrary let's
31:16 - do 200
31:18 - and then get rid of that
31:21 - so now i think if we wanted to
31:25 - use that
31:27 - you know i'll just i'll just include it
31:30 - globally for now i think
31:34 - well let's see if we can just require it
31:37 - so i'll first import it here
31:39 - so import it i'll go to components and
31:42 - hopefully that will just
31:44 - work
32:03 - uh
32:04 - let's see
32:05 - let's see if they're docks they tell you
32:07 - how to not include it globally
32:19 - all right just for brevity i'm just
32:21 - going to go back and include it globally
32:31 - actually it's kind of bothering me i
32:33 - want to figure out why this isn't
32:34 - working so
32:35 - if i go back to youtube view and import
32:38 - this
32:39 - and try to import that and just say
32:40 - youtube
32:50 - see if that works
32:57 - huh nope
32:59 - all right scratch all that
33:01 - i'm just gonna go back here and include
33:02 - it globally for now so if someone has
33:05 - any information about how to actually
33:07 - just include that in my one little view
33:11 - feel free to leave me some feedback
33:13 - but in the meantime we got the embedded
33:15 - player working here i'm gonna go back
33:18 - and just make it a little bit larger so
33:20 - if i go back to youtube
33:22 - make the width like 800
33:25 - height 400
33:28 - yeah it's too big
33:33 - cool so that's good enough for now i
33:34 - mean i could spend more time
33:36 - making this perfect or just setting both
33:38 - these panels to a fixed height
33:39 - but for the next part we need to display
33:41 - the lyrics and the
33:43 - see i can actually play it over here
33:46 - pretty cool
33:47 - [Music]
33:48 - but anyway it i can go back
33:51 - and let's make some more views for the
33:54 - lyrics in the
33:56 - tab
33:58 - so here i'll just say
34:00 - lyrics.view
34:03 - and that's gonna have
34:05 - just copy and paste for one of these
34:09 - get rid of all this scope stuff
34:12 - go back to index i think we do need this
34:14 - text area so go back to lyrics
34:17 - paste that in here
34:18 - and get rid of all that
34:22 - and now to display those
34:24 - could just do a panel over here
34:31 - and assuming that song is passed in and
34:33 - panel's already declared
34:35 - if we save this i think this should work
34:39 - well hold on we have to first
34:42 - do this
34:45 - let me just delete all that stuff
34:49 - and here
34:50 - of course we need to include it first so
34:52 - i'm going to say lyrics
34:55 - and then in components we're going to go
34:57 - and include lyrics
35:01 - and then lastly
35:02 - we need to actually use it so
35:05 - lyrics
35:06 - and of course it required a property
35:08 - called song so i'm going to pass down
35:10 - song to that
35:12 - and let's just
35:14 - save that and see what happens okay we
35:16 - got the lyrics printed out down here
35:18 - awesome
35:22 - make sure you can't minimize it
35:25 - and
35:26 - i think this also needs like a margin
35:28 - top of two it's really close to the
35:29 - bottom panel there
35:31 - cool
35:32 - and then lastly we should build another
35:34 - sub component
35:36 - for the tab
35:39 - so i'm just going to do the same
35:42 - thing copy paste lyrics
35:46 - rename
35:47 - to tabs
35:50 - i think just tab
35:52 - and then here
35:55 - tab
35:56 - tab
35:59 - make sure everything's good
36:01 - save that
36:06 - cannot include tab from tab
36:12 - what does it say
36:14 - import tab from slash tab tab is defined
36:17 - but is never used
36:20 - okay never used it in component
36:24 - cool so now we have a tab section over
36:26 - here and again
36:28 - we need to add a little bit of
36:30 - margin top to that
36:35 - in fact i could just add it to this i
36:37 - think
36:38 - let's be done with it so
36:41 - because this is row two this is row one
36:44 - go up here nice all right so now we have
36:48 - let me just refresh this completely
36:51 - we have a view for viewing all the songs
36:52 - we have a view for creating songs we
36:54 - have a view for viewing
36:57 - the tabs and the lyrics on that song and
36:59 - we can play the youtube video over here
37:01 - and it'll display a couple of stuff on
37:03 - to the left
37:08 - okay so again i think the most important
37:10 - thing to recap on is first of all
37:13 - including an external module that i've
37:16 - like i didn't make someone else made and
37:18 - by simply just following their
37:19 - instructions by installing it
37:21 - installing it globally
37:23 - or you don't have to do it globally i
37:25 - should i should look into how to
37:26 - actually figure this out
37:28 - or
37:28 - um
37:30 - if you're not or and it's just copying
37:32 - and pasting that into your project to
37:34 - tell you what props you need to use what
37:36 - methods that you can listen to
37:39 - and that's about it so basically viewing
37:42 - their docs i was able to install it and
37:44 - quickly bring it into my project by
37:46 - following their instructions and that
37:48 - was kind of just to demonstrate how
37:49 - typically easy it is to kind of build
37:52 - pick and choose
37:53 - components from npm
37:58 - and i think the second thing i should
38:00 - highlight is
38:02 - i'm not sure if this approach is the
38:03 - best
38:04 - but basically if you're one page or
38:08 - state or route
38:10 - if your one route is starting to become
38:12 - really unmanageable i think it's a good
38:14 - idea to split it up into
38:18 - sub components as much as possible
38:20 - because if you saw before that index
38:22 - file was getting really large and like
38:24 - it's getting like impossible to actually
38:26 - find what i was looking for
38:28 - so instead if i just pull it out into
38:30 - these four sub components
38:33 - it kind of makes life easier for me and
38:35 - then again
38:36 - each one of these sub components knows
38:38 - exactly what it's concerned about
38:40 - so this one is just concerned about
38:42 - fetching the song
38:43 - this one's just concerned about
38:44 - rendering the lyrics this one's just
38:46 - concerned about the metadata so it makes
38:49 - it a lot easier to follow the code
39:04 - so
39:05 - at this point i think it's useful if we
39:08 - create yet another
39:10 - um page where we can edit a existing
39:13 - song so for now i'm just going to copy
39:16 - the create song page
39:18 - and rename it to
39:19 - edit song
39:21 - dot view
39:24 - and typically if you notice the
39:25 - structure i have
39:27 - this kind of a flat
39:29 - flat looking structure where every file
39:31 - here should be something that points to
39:32 - a route
39:34 - um except for you know a couple of them
39:35 - like panel which could go into a commons
39:37 - folder i believe
39:39 - you might refactor that in a second but
39:42 - for now for create song
39:45 - it's going to be very very similar to
39:46 - edit song if not identical except for
39:49 - like a couple of changes
39:51 - but
39:51 - let's first go to our router
39:54 - and again let's include it so
39:57 - edit song
39:59 - i think i was showing you create song a
40:01 - second ago but edit song here
40:02 - [Music]
40:05 - and that's going to be component slash
40:07 - edit song
40:11 - and then i can add a new
40:14 - path to the router here
40:16 - and say song song id slash edit
40:19 - and i can say songs
40:21 - song edit
40:25 - change that to edit song go ahead and
40:26 - save that
40:29 - and it'll be nice to have a way to get
40:30 - to that page
40:32 - instead of having to just change the url
40:34 - so let me just
40:36 - close this tab mayhem up here i have way
40:38 - too many tabs open
40:39 - let's take a little five second breather
40:43 - all right so
40:46 - we can go back to
40:47 - our
40:48 - i don't know what page it was on is view
40:50 - song
40:51 - and then our view metadata or song
40:53 - metadata let's go ahead and try to add
40:55 - in
40:56 - a button so that we can edit the song
40:57 - when we want to and we could add that in
41:00 - to like something here so let's say
41:04 - let me just go ahead and grab a button
41:05 - from something we know
41:07 - so like songs probably has v button
41:10 - except we don't want the fab button so
41:12 - go over here
41:18 - go ahead and just paste that in here
41:21 - song edit
41:25 - prams song id navigate to
41:35 - no maybe there's a way to like define a
41:37 - global
41:39 - so i could just do this in a global
41:41 - state
41:43 - so
41:44 - but in the meantime
41:46 - i'm just gonna go ahead and just do it
41:48 - this way
41:52 - maybe next
41:53 - part of the video i'll just refactor
41:54 - after i learn a bit a little bit more
41:56 - about vue
41:58 - so now we have a button
42:01 - called edit
42:03 - and it shows up here
42:06 - maybe we want to have it be at the
42:07 - bottom
42:09 - i think we can just add bottom here and
42:10 - it'll just put it to the bottom
42:12 - no maybe not
42:15 - but anyway we can style this later i
42:16 - don't want to waste too much time on
42:17 - styling because that is what eats up
42:19 - most of the time
42:21 - but
42:22 - now when we click this edit button we go
42:24 - to songs slash six slash edit
42:29 - and
42:30 - for whatever reason it loaded in no data
42:34 - so let me just clear that and refresh
42:36 - the browser just to make sure
42:40 - okay so it's not going to load data
42:41 - because we are in a
42:44 - edit song view
42:46 - and we haven't really loaded any data
42:48 - like this was expected to be blank and
42:50 - that we're creating the data
42:52 - so instead let's just go ahead and do a
42:54 - show
42:56 - and then again with that that route
42:58 - param that we needed if we go back to
43:00 - view song
43:04 - and just go ahead and copy these two
43:07 - this is a great example of what we need
43:08 - to do
43:11 - so
43:12 - inside the try catch
43:14 - grab the song id
43:15 - grab the song's data
43:18 - and we can just go ahead and close all
43:20 - that out
43:22 - go back to this page
43:25 - and i don't think anything is pointing
43:26 - to use let's see song this dot song
43:32 - maybe make sure this is printing out
43:33 - correctly
43:35 - oh wait it's because i have this in the
43:37 - wrong method
43:39 - so now
43:45 - i actually want a mounted
43:47 - call so instead of oh in addition to
43:50 - methods
43:51 - we want mounted
43:52 - and then we want to call something and
43:54 - do some logic whenever this component is
43:56 - melted
43:59 - and let's just go ahead and fetch that
44:01 - song
44:01 - and put it onto this dot song
44:05 - and then instead of create maybe we
44:06 - should do save
44:09 - so
44:10 - save song
44:14 - uh and what should save song do it
44:16 - should probably do all the same logic
44:18 - make sure every field is filled in
44:21 - and if it is
44:22 - we can just
44:26 - call
44:29 - put
44:33 - and also probably redirect the user to
44:35 - something else so let's go ahead and do
44:37 - that as well
44:43 - um and i think a good example would be
44:45 - crate song where we do router.push
44:51 - can close out of these i'm only
44:53 - concerned about edit song at this point
44:56 - so once we fetch or put the song id
45:00 - which again definitely wrap that in a
45:02 - try catch
45:14 - we just want to redirect the user to the
45:18 - uh the song that he was on previously
45:22 - i'm sure there's a way to do router dot
45:24 - back or something like that
45:27 - but i'm just gonna do pram's
45:30 - song id song id
45:38 - this dot song
45:39 - [Music]
45:40 - and i don't think we need to worry about
45:42 - this we don't we can implement this in a
45:43 - second
45:50 - all right so it's giving us an error
45:52 - here it's saying
45:53 - song id is not defined
45:55 - and it's not
45:57 - so
45:58 - i think we actually need to bring in
46:00 - this here
46:04 - pass in the song id there so we can
46:06 - actually go back to the song
46:10 - trailing space is not allowed on 113.
46:20 - trailing space is not allowed on what
46:22 - line was at 135
46:28 - okay
46:32 - all right so now we're on edit song
46:36 - it fetched all the information for that
46:37 - song
46:39 - and we can probably change stuff as
46:42 - needed
46:44 - put an exclamation mark at the end up
46:45 - with that
46:46 - and if we click save it should not do
46:48 - anything because i don't think we have
46:49 - anything really implemented ready to go
46:54 - all right so save song when clicked
46:57 - we should be calling the save over here
47:01 - and we have a method called save
47:07 - let me just make sure that this is
47:10 - being invoked
47:16 - yep save clicked it's saying put is not
47:18 - a function so
47:19 - that makes sense we haven't implemented
47:21 - this put yet so if we go to our services
47:24 - and go to song service
47:26 - again we're going to have to add a put
47:29 - and basically this is for updating
47:36 - so we're also going to have to do
47:39 - slash
47:40 - song id
47:41 - so if i do something like that
47:44 - make sure i'm using the right back ticks
47:49 - basically this will push that song
47:50 - payload to that song endpoint which
47:52 - doesn't
47:53 - exist
47:55 - so let's go ahead and close out of these
47:56 - things
47:59 - and go to our routes
48:03 - and copy this one
48:05 - do a put
48:07 - do it on the song id
48:13 - in fact i think we can just do
48:17 - that's fine
48:19 - so i'll make the put right next to the
48:21 - git so it makes a little bit more sense
48:28 - so this is going to call a song's
48:29 - controller.output method if i go to my
48:31 - songs controller which is here
48:34 - lastly we'd have to make a put method
48:36 - here
48:41 - oops
48:42 - so i'll say put
48:46 - and now what we want to do here is just
48:48 - go ahead and call update rec.body
48:51 - and then for the second parameter
48:54 - argument we pass in we only want to
48:56 - update where the id
48:58 - was equal to song id remember song id is
49:01 - going to be inside that
49:03 - routes here
49:05 - so we're going to grab it and only
49:07 - update the song
49:08 - which was
49:10 - or which matches that song id and then
49:12 - if this works
49:14 - it should just return
49:17 - that song
49:20 - in fact i i think this will return it's
49:22 - something that we don't want so i'll
49:23 - just go ahead and return this.body
49:26 - so it's going to return the same song
49:28 - you uploaded
49:30 - so i'll do rec body sorry about that
49:33 - and if it doesn't it'll say an error has
49:34 - occurred trying to update the song
49:51 - all right so hopefully let's see what
49:53 - happens when we do this
49:55 - call save song
49:56 - it does a
50:03 - it did a let's see a put
50:06 - on song six it pasted this information
50:10 - and then it redirected us to
50:14 - slash six
50:16 - and i'm not sure if it actually edited
50:18 - or updated it so let's let's make sure
50:20 - the payload that got sent
50:22 - was an updated title and it wasn't so if
50:24 - i go back to here and just add an
50:26 - exclamation mark hit save
50:28 - we see that it updated the song and it
50:30 - added a
50:31 - exclamation mark and it actually hit the
50:33 - back in over here
50:36 - and updated the database with that data
50:46 - all right so i think that may wrap it up
50:48 - for
50:49 - part five
50:50 - um stay tuned for part six where i'm
50:52 - probably gonna
50:53 - add a search component here and restyle
50:55 - this page just a little bit more
50:57 - and then i think finally we could wrap
50:59 - this up in a part seven or part eight
51:01 - all right again thanks for watching and
51:03 - be sure to subscribe to my twitter which
51:05 - is in the description below if you want
51:06 - updates when the next parts are released
51:09 - alright see you