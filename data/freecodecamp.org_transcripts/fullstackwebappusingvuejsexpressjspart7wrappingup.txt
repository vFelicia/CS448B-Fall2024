00:01 - hey everyone i'm cody and welcome to
00:03 - part seven of building a full stack web
00:04 - application using vue.js and express.js
00:08 - so if you remember on the other one or
00:10 - part six we
00:11 - finished doing the bookmark logic so we
00:13 - can unset and set a bookmark
00:15 - now what we want to do is when we go to
00:17 - the browse page if the user is logged in
00:19 - we want to show a list
00:21 - of all the bookmarks that the user has
00:24 - inside some type of like table or
00:26 - whatnot
00:28 - so the first thing we're going to try to
00:29 - do is if you go to the
00:31 - view beautify docs
00:36 - so whenever this thing loads if i go
00:38 - down to components and i go down to i
00:40 - think there's one called data tables
00:42 - this is what i kind of want to display
00:44 - the bookmarks in
00:46 - so if you see here we could just do a
00:47 - nice simple table
00:50 - and they give us some example code of
00:52 - how to do that
00:54 - so basically just do v data table passes
00:57 - some headers some items
00:59 - and then you pass it something to the
01:00 - slot to kind of tell it how to display
01:03 - the rows
01:05 - so let's go ahead and try to do that
01:07 - so going back to our ui we need to go to
01:10 - our songs view component so i'm gonna go
01:13 - go ahead and just open up
01:16 - the songs index
01:21 - and then on the song index
01:23 - section
01:24 - it makes sense if we just go ahead and
01:26 - add another
01:29 - flex area so i'll just have the
01:31 - bookmarks be to the left so let's say be
01:34 - flex
01:36 - and close that out and then here let's
01:38 - just assume that we have something
01:39 - called song book
01:42 - marks
01:45 - maybe keep it consistent with songs so
01:47 - songs hyphen
01:48 - bookmarks
01:50 - so of course that would assume that we
01:52 - actually have a view called song's
01:53 - bookmark so i'll say songs book marks
01:56 - and make that
01:59 - go ahead and scaffold that out so we
02:00 - have a blank thing to start with
02:04 - and of course here we need to say songs
02:05 - book marks
02:08 - and include that and include that down
02:10 - as a component
02:15 - so this song's bookmark component is
02:18 - basically going to do a request to the
02:20 - backend
02:21 - and get
02:22 - all the bookmarks that the user has
02:25 - and then it also needs like the songs
02:27 - that are kind of associated with that
02:29 - bookmark
02:31 - so before we get started with that let's
02:32 - just go ahead and kind of work out what
02:34 - the view is going to be so again i could
02:36 - probably
02:37 - do this in a panel
02:40 - so i'll do a panel
02:42 - and i'll say title is book marks
02:46 - go ahead and save this and make sure
02:48 - that this is loading up
03:02 - so let's see what i miss
03:06 - so going back to our
03:08 - i don't know i have that one loaded up
03:09 - going back to our songs index
03:12 - with a v flex i forgot to give it an
03:14 - actual like
03:16 - amount so now it should show up on the
03:19 - left over here unless i have some type
03:20 - of console log
03:32 - oh i forgot to put the k i i did boo
03:34 - mars instead of bookmarks
03:37 - so a little typo there but okay so now
03:39 - the panel's showing up it's not
03:40 - necessarily necessarily aligned to the
03:43 - left so let's kind of figure out why
03:45 - that's the case
03:47 - and that's because i'm using a column
03:49 - here
03:50 - so instead let's just do
03:53 - a v flex row
03:57 - cool so that's working and then here i
03:59 - think we should be able to do a class of
04:01 - margin left two
04:06 - all right
04:07 - so again the plan is to have all the
04:09 - bookmarks on the left
04:11 - and we have that left panel called
04:12 - bookmarks
04:14 - and inside that song's bookmarks
04:16 - component
04:18 - what we want to do is first following
04:20 - the beautify docs we can say v data
04:22 - table and define
04:24 - a v data table
04:27 - and then inside the
04:28 - data table
04:30 - you can pass a couple of attributes so i
04:32 - can say headers
04:33 - is equal to
04:34 - headers
04:36 - um
04:38 - pagination
04:39 - dot sync
04:41 - is equal to pagination
04:44 - and then items is equal to bookmarks
04:48 - so then of course assuming that you have
04:50 - those defined so i'll say data is a
04:52 - function which returns
04:54 - headers and returns
04:57 - pagination and then also returns uh
05:00 - bookmarks
05:03 - which is just gonna be an array
05:05 - of let's just say two objects at this
05:07 - point let's go ahead gonna go ahead and
05:09 - just hard code those and headers again
05:11 - is an array
05:13 - of
05:14 - what you want the text to be for your
05:16 - row or for your column
05:18 - and then the name of the
05:21 - key that you want to reference from your
05:23 - bookmarks data so in this case i'm
05:25 - saying value is title so that would
05:26 - assume that we have a title down here
05:32 - and then we'll make another one here and
05:33 - just say
05:37 - text will be artist
05:39 - and value is going to also be artist so
05:42 - which means we could just go ahead and
05:43 - make one
05:44 - called artist here
05:47 - input testing
05:49 - and then i'm going to go ahead and just
05:50 - copy this to have two example data rows
05:53 - that we can use
05:55 - and then for pagination
05:57 - pagination is just an object which a
05:59 - couple of options you can have so i'll
06:01 - say sort by
06:03 - and then date
06:04 - and then i'm going to say
06:06 - sort by descending true so that means
06:08 - it's going to sort all the bookmarks by
06:10 - the last time i've bookmarked them in a
06:12 - descending order
06:18 - so assuming i did not forget anything
06:23 - in fact i think i did
06:27 - the next step is you need to first
06:29 - define a slot or pass in the slot
06:33 - of what you want the table rows to look
06:35 - like so if i say template
06:37 - slot is equal to items
06:39 - so remember somewhere inside this b data
06:41 - table they defined a slot called items
06:44 - and we're kind of just passing in this
06:46 - template to them
06:48 - and then we need to define
06:50 - scope is equal to props
06:57 - so what we want to do here is go ahead
06:58 - and just define
07:00 - a td and i want to say the text is going
07:02 - to be on the right
07:04 - and that class text xs right is built
07:07 - into beautify in case you weren't aware
07:10 - of the docs
07:12 - and i'll make two columns
07:18 - for now so i'll do
07:20 - first column
07:23 - is going to have
07:25 - props.item.title
07:29 - and then the second column
07:31 - is going to have props.item.artist
07:38 - so i should be able to save this and
07:40 - let's see if there's any issues
07:54 - okay
07:56 - so i refresh the page and look here we
07:57 - have a data table
07:59 - with the title of our song and the
08:01 - artist
08:05 - so at this point
08:06 - if you notice that we kind of hard coded
08:08 - those
08:12 - um not the headers but the bookmarks
08:13 - here so what we want to do
08:15 - now is actually request from the back
08:19 - end
08:20 - the bookmarks for this user so i'm going
08:22 - to say async mounted
08:26 - and i'm going to go ahead and just say
08:27 - if the user is logged in
08:30 - so i think here i can actually say like
08:34 - let me go ahead and kind of modify or
08:36 - steal some code that we used in the
08:38 - other one
08:42 - so remember we use computed map state so
08:44 - here i'm going to do the same thing
08:47 - make sure we bring in the view x map
08:49 - state
08:51 - so we can access it
08:54 - awesome and then here
08:56 - we should just be able to say this dot
08:58 - is user logged in so if the user is
09:00 - logged in we need to go ahead and make a
09:02 - request to the backend
09:06 - for all the bookmarks that the
09:09 - user has
09:12 - so here i'll say
09:13 - user id
09:14 - and i'm going to pass it
09:16 - very similar to what we did here
09:20 - just like that
09:26 - so this should hit the back end and just
09:27 - go ahead and return everything that's
09:29 - for this user id
09:31 - and down the road we're going to be
09:32 - using jwt
09:34 - so we don't even need the pass user id
09:35 - because this is going to be an
09:36 - authorized endpoint
09:39 - but for right now
09:41 - let's see we can also probably map
09:45 - the user to our state
09:48 - and instead just say this dot user.id
09:58 - and of course don't forget to bring in
10:00 - the service that we're trying to use so
10:02 - up here i'm going to import it
10:05 - go ahead and save
10:12 - let's see
10:18 - so it is actually making the response
10:21 - but unfortunately it's returning null
10:24 - so we need to make a little bit of
10:25 - changes to the back end
10:27 - and i think that was kind of
10:30 - an issue that we had with this index
10:31 - method an index method should probably
10:33 - return an array and right now i'm doing
10:35 - fine one
10:36 - so let's go ahead and try to change that
10:39 - index method to instead of doing fine
10:41 - one
10:42 - we're going to do find all
10:46 - and then so if
10:48 - song id is passed in
10:49 - i think this will be set otherwise it
10:52 - won't even try to search for it
10:54 - so by making that change change at the
10:56 - bookmarks and bookmarks
10:59 - remember that this is going to break our
11:00 - bookmarks functionality earlier because
11:03 - i'm changing the back end
11:04 - but we'll make a mental note to go back
11:06 - and fix that but for right now we should
11:08 - be able to hit that back in and get an
11:11 - empty array back
11:13 - so here we get an empty array and then
11:15 - notice that we don't have
11:16 - i don't think we have all those errors
11:18 - in the console at this point
11:21 - and i guess we do let's see
11:41 - so let's see why that could potentially
11:43 - be throwing an error for us
11:46 - it might be because let's see
11:49 - first of all this could be an empty
11:50 - right now because we're fetching it from
11:52 - the back end
11:55 - and this seems to be working fine with
11:56 - the map state user because we're making
11:58 - the request
11:59 - two users equal one our user id is equal
12:02 - to one
12:06 - all right so this error says expected
12:07 - array got an object leads me to believe
12:09 - that we're passing something incorrect
12:11 - to items
12:12 - and again you know
12:14 - always make sure you read the errors
12:15 - don't just see an error and kind of
12:17 - ignore it sometimes i do that but i
12:19 - should just actually read what the error
12:21 - is
12:22 - um but of course this one's because i'm
12:24 - not grabbing the data
12:26 - i think soon i'm just going to refactor
12:27 - this so that i don't have to do data
12:29 - every time and just have the service do
12:30 - that for me
12:32 - because that's gotten that's kind of
12:33 - like bit me in the butt multiple times
12:34 - now
12:36 - um but yeah i think let's see
12:47 - go ahead and just refresh that page and
12:49 - hopefully the air is gone now and yep
12:50 - that was the issue
12:52 - and we're hitting the end point we're
12:54 - getting back no bookmarks
12:55 - for that user
12:58 - so
12:59 - i guess the first question is should we
13:01 - be getting back bookmarks
13:04 - and i'm pretty sure that we have been
13:05 - setting bookmarks
13:08 - but i'm not too sure so let me just go
13:09 - into one of these songs and
13:11 - verify okay so this one is bookmarked
13:17 - it has user id of one and song id of one
13:20 - so let me go back
13:22 - to the back end and let's verify
13:25 - what
13:26 - rec.query is
13:34 - because this one should be working just
13:36 - fine
13:37 - unless this is actually trying to search
13:39 - where this is equal to
13:41 - null
13:42 - or something
13:45 - let me refresh the page here
13:51 - so it's just user id is equal to one
13:55 - so instead of doing song id let's just
13:57 - see what happens if i were to comment
13:58 - this out and see if it does return
13:59 - information for us
14:01 - to make sure that this is the issue or
14:02 - not
14:09 - okay so that was the issue it did return
14:12 - the bookmark back to us
14:17 - and it's not running or anything because
14:18 - we haven't actually added some extra
14:20 - functionality
14:22 - so
14:24 - one thing i'll do now is we'll fix this
14:26 - in a second
14:30 - i guess it's trying to search undefined
14:32 - here so instead we should probably say
14:34 - like
14:35 - where is equal to
14:39 - user id
14:41 - user id
14:42 - and then just say if
14:44 - song id
14:48 - where dot song id is equal to song id
14:52 - then we're going to say where there
14:54 - so that it works for both instances
15:02 - but the important part is
15:04 - we want to get back the song
15:08 - that's associated with the bookmark
15:10 - so in sqlize something you can do is if
15:13 - you pass in another option called
15:14 - include
15:15 - you can pass an array of objects or
15:18 - models that you want to include
15:21 - that are associated to the bookmark so i
15:22 - can say include model
15:24 - song and up here i have song included so
15:27 - it should work
15:30 - and basically whenever this returns it's
15:32 - going to be an array of all the
15:33 - bookmarks and then nesting inside it
15:35 - will be the song information so here i'm
15:38 - just going to say map everything
15:42 - to
15:42 - bookmark.2 json
15:47 - and then i'm going to map it again
15:51 - and this time i'm basically just going
15:53 - to make a new object
15:57 - with the bookmark id so bookmark id
16:00 - bookmark.id
16:04 - so extend that
16:06 - with the bookmark dot song which is
16:08 - returned
16:11 - and again i probably have to include low
16:13 - dash
16:16 - so that i can actually use that extend
16:18 - method
16:23 - okay so let's test this one out
16:26 - and if we were to go
16:28 - i might want to indent this so we know
16:30 - this kind of attached to that
16:35 - i made more sense like that
16:38 - so if i were to go here and just refresh
16:40 - the page i should be getting back
16:42 - an array of
16:45 - okay so this is all this is the bookmark
16:47 - with all the song information related to
16:49 - that bookmark and now it's actually
16:50 - displaying here
16:54 - so that's kind of one way to do it i
16:55 - didn't necessarily have to do this whole
16:58 - mapping logic
16:59 - so instead if i wanted to just leave it
17:02 - as is so i'll go ahead and save that
17:04 - just to kind of show you what gets
17:06 - returned
17:08 - so in this instance if i were to make
17:10 - that request if you see here in the json
17:12 - returned we have a nested song object
17:15 - so we have the bookmark information and
17:18 - then we have a song
17:19 - object or attribute which has all the
17:21 - song information
17:23 - and i kind of just want
17:26 - the bookmark id in the song which is
17:28 - kind of why i added that whole like
17:29 - mapping stuff
17:31 - i mean maybe we could just
17:33 - change the front end to use this data as
17:36 - needed
17:38 - but instead i think it makes more sense
17:40 - to have the api just return
17:42 - the song that was associated with it as
17:44 - a flat object so again that's why i kind
17:47 - of added this
17:48 - extra mapping logic to kind of convert
17:50 - it
17:57 - all right so again
17:59 - that little side note that we added
18:01 - where
18:01 - our bookmarks are probably broken now we
18:03 - need to go back to the front end
18:06 - and go to that song metadata stuff where
18:07 - we have all that bookmarking logic
18:10 - so now instead when we do that request
18:12 - to set as bookmark
18:16 - i think this is actually going to be
18:18 - working just fine
18:22 - but and now instead is going to return
18:24 - an array here
18:26 - so if we were to
18:28 - let's see this should be an array it
18:30 - could be blank
18:34 - so i'm just going to say const bookmarks
18:36 - is equal to
18:39 - that
18:40 - and then if book marks that length
18:43 - i'm going to say this that bookmark
18:45 - is equal to bookmarks of index zero
18:50 - and that's just so that we can grab the
18:52 - actual bookmark
18:54 - because now this should be returning
18:56 - kind of a different object
18:59 - and then when we do the post request
19:02 - instead of this.bookmark.id i think we
19:04 - need to do bookmark id because that's
19:06 - what's being returned in the backend now
19:09 - and a little bit of code cleanup that i
19:11 - should probably do is also in map state
19:13 - here
19:15 - since we're trying to grab all that
19:16 - information
19:18 - we could just do this.user
19:28 - cool so let's
19:29 - double check that we did not break
19:31 - that functionality
19:33 - so again the bookmarks are working fine
19:35 - we go in here
19:36 - we click unset as bookmark
19:38 - and set his bookmark
19:40 - okay so we're having an issue again
19:47 - oh okay i know why
19:54 - so actually now when we post that's
19:56 - returning a bookmark back
20:02 - so maybe it would make more sense to not
20:06 - or to just overwrite let's see id with
20:09 - bookmark id
20:12 - because we already have song id so
20:43 - so here id is one bookmark id is 11 and
20:46 - i think that's our issue instead we need
20:48 - to have id is equal to
20:51 - 11.
20:53 - so where are my
20:55 - in my bookmarks controller
21:08 - let's see
21:11 - i think we just need to swap this um
21:13 - this order
21:18 - let's make a new object
21:19 - extend it with bookmark.song
21:22 - and then also extend it with
21:31 - the bookmark
22:00 - okay so let's try bookmarking just a
22:03 - couple of different songs so i'll go
22:04 - here to this abc one
22:06 - set as bookmark go back to browse it
22:09 - shows up here
22:10 - go back to the modest mouse one
22:13 - we can go ahead and bookmark that one
22:15 - go back to browse
22:17 - that shows up and then to test that we
22:19 - can unbookmark it of course we should go
22:21 - back to abc
22:23 - unset as bookmark
22:24 - go back to browse and that's also
22:27 - disappearing all right so i think
22:29 - at this point the bookmark logic or the
22:32 - book mark logic is completely done
22:36 - i'm not sure if this is the best way to
22:37 - do it but it works for now
22:42 - i think we can kind of move on to
22:44 - implementing
22:45 - a recent view
22:50 - so the last piece of functionality i'm
22:52 - going to do for this tutorial
22:53 - is adding another panel that shows all
22:56 - the recent songs that you viewed
22:58 - so that's something nice i think could
23:00 - be an app is as you're like viewing
23:01 - different songs you kind of want to have
23:03 - a history list of what you viewed
23:07 - so let's go ahead and just make a new
23:09 - panel here in the front end
23:13 - called
23:14 - recently viewed songs
23:18 - viewed songs.view
23:22 - and then let me just make this a little
23:24 - bit larger
23:26 - inside this we're going to do very
23:29 - similar logic that we did to the
23:32 - bookmarks table so again
23:34 - maybe it makes more sense to just copy
23:37 - this and paste it in here
23:43 - instead of bookmarks we could say
23:44 - recently viewed
23:46 - songs
23:50 - change bookmarks to songs
23:53 - and then i'm going to say instead of a
23:55 - bookmark service i'm going to say
23:58 - recent
23:59 - or song history
24:04 - service
24:11 - same thing display an artist in the
24:12 - title
24:14 - display or sort by
24:16 - the date
24:18 - let's see bookmarks we call that songs
24:26 - and yes this stuff should probably stay
24:28 - as it was before
24:31 - but instead of when we mount we need to
24:33 - instead of hitting that bookmark service
24:35 - we hit the song history service
24:37 - and grab all this history for a user id
24:41 - save this
24:43 - go to my services
24:45 - and the ui
24:47 - and just go ahead and copy bookmark
24:48 - services and rename it to
24:51 - song history service
24:55 - so when i inside
24:57 - inside here we don't really need to
24:58 - delete
24:59 - i don't think we have to delete history
25:01 - but in here
25:03 - we can make a index
25:06 - which is just going to give us back all
25:07 - the history
25:10 - for a user id or something so i'm just
25:12 - going to
25:13 - params
25:15 - params
25:18 - and for here
25:20 - we can do a post request to
25:24 - history and point and pass it some
25:25 - history
25:27 - data
25:36 - so let's go ahead and finish working on
25:38 - adding that to the front end so i go
25:40 - here i can say
25:43 - recently viewed
25:45 - songs is another component that we need
25:47 - to bring in
25:50 - and of course we need to use that so
25:53 - we'll say
25:54 - recently
25:55 - viewed songs here
25:59 - save that
26:02 - that should work fine
26:03 - it's okay we have a table now called
26:05 - recently viewed songs
26:07 - and of course no data is being displayed
26:08 - because
26:09 - we're making a request to i think
26:11 - history
26:13 - and that doesn't exist on the back end
26:16 - and before i go and implement that let's
26:17 - just go ahead and add some matching
26:20 - margin
26:21 - top to that so say class is equal to mt
26:25 - ii
26:31 - okay
26:33 - so again back end endpoint does not
26:35 - exist so we should probably go and
26:37 - create one
26:39 - and not only that the model doesn't
26:41 - exist so we need to kind of keep track
26:43 - of the history right so we're going to
26:44 - need another table
26:46 - so we can insert another row every time
26:48 - a user were to go
26:50 - to a page
26:52 - so to kind of make that make more sense
26:54 - maybe in the front end
26:57 - um if i were to go to
27:00 - the view song page so if i go to the
27:02 - index here
27:04 - when the user were to go into view
27:07 - we want to make a request to the back
27:08 - end to keep track of that song that they
27:10 - viewed so whenever they load a page such
27:13 - as song slash one
27:15 - we can just go ahead and make a request
27:17 - to that history service
27:19 - so i'll say import
27:23 - recently actually i forgot what it was
27:25 - called
27:27 - song history service
27:31 - so grab it grab the song history service
27:33 - and then here
27:35 - we can just go ahead and say
27:38 - song history service dot post
27:42 - and then we want to post
27:43 - the song id
27:46 - and of course the user id that viewed it
27:52 - so if you notice here we're doing some
27:54 - very similar logic with the state
27:56 - so i need to go here and just bring that
27:58 - stuff in
28:05 - so make sure we bring in map state
28:08 - so that we can get the user and then we
28:10 - can say this.user.id
28:12 - and then we can also say only do this
28:17 - i guess we did need that one right
28:24 - only make this request
28:26 - if the user is logged in
28:29 - the user isn't logged in we're not even
28:31 - going to show that panel and we're not
28:33 - going to have it send back that
28:34 - information
28:36 - and then for song id again we just do a
28:38 - song
28:39 - id here
28:42 - and actually maybe it makes more sense
28:44 - to have
28:46 - route come from there as well
28:52 - now someone left a comment saying it's
28:54 - bad practice to access the
28:56 - the state directly i don't know if that
28:58 - means map state is bad practice but i
29:00 - mean if they have a method called that
29:01 - map state
29:03 - if it's bad practice why even use it but
29:05 - hey this seems to make the code a little
29:07 - bit cleaner
29:10 - so recap again the moment the user were
29:13 - to hit this page
29:16 - so if i refresh this page it's going to
29:17 - make a request to that history service
29:20 - a post request to be specific
29:22 - so that we can keep track of the song
29:24 - that the user tried to view
29:27 - so now we can actually really go to the
29:29 - back end this time
29:30 - and the first thing we want to do is
29:31 - copy and paste bookmarks because history
29:34 - is going to be very similar so i'm just
29:35 - going to say history
29:38 - and then
29:39 - rename all this to history
29:42 - and then of course history belongs to a
29:45 - user and it also belongs to a song so if
29:47 - we save this we should be okay
29:50 - we can go to our seed
29:53 - um oops
29:57 - go to our seed project
30:01 - and we can copy bookmarks.json
30:04 - and instead of bookmarks we can name it
30:07 - let's see rename
30:08 - history
30:10 - and of course we'll just say that yes
30:12 - the user has seen this one
30:14 - and it has also seen
30:16 - song id of
30:19 - two
30:22 - and then go in here go ahead and just
30:24 - rename that the history rename this to
30:27 - history
30:30 - and of course you'd have to run this
30:32 - only after both the user and songs have
30:34 - been ran so it's going to go ahead and
30:37 - just say
30:38 - history
30:39 - copy and paste that
30:45 - i don't know if histories is even like
30:47 - can be plural
30:48 - but i'm just gonna do history with an s
30:51 - at the end even though it's probably
30:52 - improper english
30:54 - or grammar or whatever but
30:59 - and this is also turning green i'm not
31:01 - sure if history is a key word in
31:02 - javascript i hope it's not
31:04 - but let's just go with it and see what
31:06 - happens
31:09 - so we have that model created we have
31:11 - the seed created
31:13 - at this point we should be able to run
31:14 - the scene to have the history stuff
31:17 - injected
31:19 - oops let me spell that wrong
31:21 - histories
31:33 - that naming convention is this annoying
31:35 - but
31:38 - okay so now that data should be there
31:41 - that table should be created and we
31:42 - should be able to access it
31:48 - sorry this is just bothering me i'm just
31:50 - going to do histories with an s
31:58 - so if we were to make a another
32:00 - controller
32:01 - actually first i'll make a route so
32:02 - inside here i'll say make a
32:04 - histories controller
32:08 - and do
32:10 - an app.get
32:12 - on histories
32:15 - go ahead and call the index method on
32:17 - that
32:18 - and then of course we want to have a
32:19 - post method
32:21 - so we can kind of create that history
32:23 - record
32:27 - go ahead and save that and then we don't
32:29 - actually have a histories controller so
32:31 - i'm going to rename
32:33 - this copied bookmarks controller to
32:35 - history's controller
32:43 - instead of bookmark
32:46 - just do history all right so again we
32:48 - need an index method and we need a post
32:50 - method we don't really need a delete
32:52 - method so we'll just go ahead and blow
32:53 - that away
32:56 - let's start kind of refactoring this
32:58 - logic a little bit
33:00 - so we probably don't need low dash so
33:02 - let's go ahead and get rid of that
33:05 - to start off
33:06 - the index method the user is going to
33:08 - send in a song id and a user id again we
33:10 - need to request
33:12 - where user id is defined
33:16 - and i don't think actually we need song
33:18 - id so i'm just going to say user id
33:20 - which means that we don't really need to
33:22 - do all this extra logic here
33:24 - and we don't
33:28 - need to do an include actually no sorry
33:30 - we do need to do include because we're
33:32 - trying to display the song information
33:34 - so i'll take that back we do need
33:38 - low dash if you want to do this whole
33:40 - like
33:40 - mapping
33:42 - goodness
33:43 - but
33:48 - but for now see histories
33:51 - basically we grab all the histories we
33:53 - map them
34:01 - and we extend them with the song that we
34:02 - got so very similar to the other logic
34:06 - and then we send that back
34:11 - and then for post
34:14 - we need to again yes take song id and
34:16 - take the user id
34:18 - we need to
34:20 - not worry about finding if one already
34:22 - exists because we're not this isn't like
34:24 - bookmark logic so i can kind of remove
34:26 - that code
34:27 - and here we can just say
34:35 - history equals await
34:37 - history.create and of course pass it the
34:39 - song id and the user id
34:42 - and send it back that
34:44 - object after it's created and errors
34:46 - error trying to create the history
34:48 - object
34:55 - cool so
34:56 - probably have a bug somewhere in here
34:59 - this could probably be cleaned up maybe
35:01 - but
35:02 - let's test this out
35:05 - just make sure that we did everything
35:06 - right we have those
35:07 - endpoints
35:10 - we have the model we have the controller
35:12 - and we have that seed data that can be
35:15 - used to run it
35:17 - so if we were to go back to the front
35:20 - end so let's go ahead and close out of
35:22 - all this
35:23 - and go back to the index
35:26 - let's see go back to recently view songs
35:30 - if we were to refresh the page
35:33 - so go here and refresh the page
35:41 - saying that the get request on history
35:44 - is not found
35:46 - and that's because
35:49 - this whole naming convention i probably
35:51 - should have named it something other
35:52 - than the history but
35:55 - like recent
35:56 - reasons i don't know
35:58 - but anyway let's just add an s to these
36:01 - just because they keep it consistent
36:04 - in fact i'm wondering how
36:09 - sqlize creates this table
36:17 - insert into histories
36:20 - okay okay so they add
36:22 - sqlize is adding ies at the end for us
36:25 - automatically and that's probably
36:28 - you know the correct way we should be
36:29 - doing it because that's proper english
36:31 - so i apologize for that
36:34 - i'm just going to do a really quick
36:38 - code cleanup here
36:54 - make sure that's all good
36:56 - go here
36:57 - make sure that's set correctly okay
37:00 - go back to routes
37:29 - okay so now it's named correctly and
37:31 - it's not bothering me more so let's see
37:33 - how this works out so when the app first
37:36 - loads it makes a request to the
37:38 - history's endpoint
37:40 - which you see here get requests on that
37:42 - user idea one
37:43 - the response is an array of two objects
37:46 - back so that's working as intended
37:52 - and then
37:54 - it's not being displayed correctly here
37:56 - so let's double check that we're setting
37:58 - that correctly so if i go back to the
38:00 - front end and go to the recently viewed
38:02 - songs
38:05 - song history service index
38:08 - it's probably because we're naming these
38:09 - bookmarks and it is expected to be
38:11 - called
38:12 - songs so again i'll just call that
38:15 - history is to keep it consistent
38:18 - save that
38:19 - see what happens in this page now
38:30 - hmm oops forgot to update that too
38:39 - cool so you see here now we have
38:41 - recently viewed songs down here
38:43 - which if i were to click something new
38:45 - such as like zzz
38:49 - you see it made a request to histories
38:54 - with the song id and user id and if i go
38:56 - back to browse
38:57 - that also shows up down here
39:03 - and then one thing to notice is that i
39:05 - think it's not sorting in the correct
39:07 - order
39:10 - and i think i just need to sort on
39:13 - created at date
39:17 - so let's go back to the ui
39:19 - and sort by created at
39:22 - and see if that fixes the order
39:25 - boom it
39:26 - does cool so same thing with bookmarks
39:34 - song bookmarks go back to the sort order
39:37 - sort by created at
39:40 - and then i'm going to go ahead and just
39:42 - bookmark zzz
39:47 - go back to browse
39:49 - and again z shows up at the top
39:56 - and then one thing to notice is that
39:57 - it's doing this twice
40:01 - so it might make sense to like
40:04 - run a unique call on the history list or
40:06 - something i'm not sure
40:09 - again we can probably go back to the
40:11 - histories controller and just
40:17 - do like
40:22 - invoke unique on it
40:29 - so basically lodash has a unique method
40:32 - which will just make sure that whatever
40:34 - set you pass in or whatever array or
40:35 - collection
40:36 - comes out is just going to be a unique
40:38 - set so no duplicate values
40:43 - so let's see if that does what we're
40:45 - trying to do
40:46 - and it doesn't
40:52 - i wonder why
40:53 - oh i know why because there's two
40:55 - different histories
40:56 - so i think we could actually do like
40:59 - unique buy and make sure we're unique in
41:01 - it by something else
41:06 - anyway i don't get too caught up on just
41:09 - fixing that little
41:11 - bug or feature i guess
41:14 - so
41:15 - i think that's good for history list and
41:18 - i'm gonna try to wrap up this tutorial
41:20 - really quick here so i'm going to
41:21 - implement the last part that i've been
41:23 - kind of holding off on
41:25 - and that is going to be
41:27 - the final part of the security using gwt
41:32 - um
41:33 - but
41:34 - okay so before we do that let's just go
41:36 - ahead and just do that whole unique
41:37 - thing
41:38 - just kind of again something else that's
41:40 - kind of bothering me so if i do
41:43 - unique buy which again is another method
41:46 - i can pass it in a collection and then
41:48 - lastly pass it in some type of function
41:51 - to tell it what
41:52 - needs to be unique so i'll say history
41:55 - and history.song id
41:58 - so basically
42:02 - return us a unique collection where the
42:04 - key is going to be the song id so if i
42:06 - were to save this
42:09 - and refresh this
42:13 - okay so we're only getting back three
42:15 - even though we have like viewed zzz
42:18 - a couple of times now
42:23 - cool
42:27 - so moving on to the very last part of
42:29 - this whole series
42:30 - we want to bring in
42:33 - a framework or library called passport
42:37 - which is very useful for using like
42:38 - facebook authentication or twitter
42:40 - authentication github whatever and it
42:42 - also has a lot of like
42:44 - of the default authentications
42:47 - so first of all let's just go ahead and
42:49 - go to the server
42:51 - and do an npm install save on passport
42:55 - and then we're also going to want to
42:57 - bring in something called
42:59 - passport
43:00 - jwt
43:05 - so with those two libraries we can
43:07 - actually start going in here and
43:09 - we want to set up the passport logic
43:12 - when the app loads so i'm just going to
43:13 - say require
43:15 - passport
43:17 - which means that
43:21 - remember i'm doing dot slash
43:23 - which means that there's probably a file
43:24 - at that location so we're going to
43:27 - assume that there's a file called
43:28 - passport
43:30 - in the main app and it's this isn't like
43:32 - necessarily how to how you have to build
43:34 - up your app
43:35 - but this is just how i wanted to do it
43:38 - because there's
43:39 - actually a module called passport we're
43:41 - going to include so it might be kind of
43:42 - confusing but
43:44 - bear with me
43:46 - so inside this passport.js app what
43:48 - we're going to do is include that
43:49 - passport library which is done
43:50 - installing
43:53 - and we're also going to we're going to
43:55 - need to include the user model
43:58 - from the models
44:02 - and there's a couple of things that you
44:04 - need with passports so the first thing
44:05 - is
44:06 - the strategy that you're going to be
44:07 - using
44:08 - so i'm going to include a jwt strategy
44:12 - which is basically going to be that
44:14 - other library that we brought in
44:18 - like this
44:19 - and then there's another strategy called
44:22 - extract jwt
44:25 - equals c passport jwt
44:29 - extract jwt
44:32 - so this isn't actually a strategy this
44:33 - is just kind of like a helper function
44:36 - okay so we've included those two things
44:38 - and now what we want to do is we can say
44:39 - passport dot use
44:43 - it's going to say module dot
44:46 - exports null just to be kind of explicit
44:49 - that this isn't really doing anything
44:50 - other than setting up this passport
44:53 - um
44:54 - object
44:56 - so on seven we say passport.use we need
44:59 - to pass it the strategy that we want
45:01 - passport to
45:02 - use and that strategy takes in a couple
45:05 - of options so the first option is jwt
45:08 - from
45:09 - request
45:10 - and we're telling it to use the extract
45:13 - jwt from
45:15 - auth
45:16 - header as bearer token
45:20 - and what this means is basically if
45:21 - someone makes a request
45:23 - that has
45:24 - the bearer token and the authorization
45:27 - it's going to go ahead and use that
45:30 - and then secondly we need to pass it
45:33 - some type of secret key so i'm going to
45:34 - say config
45:36 - authentication.jwg secret
45:41 - and i think i forgot to include config
45:43 - so i'll just say
45:46 - config is able to require
45:49 - config config
45:54 - and make sure we have that secret
45:55 - defined which we already do because we
45:58 - used it for creating the jwg token so
46:00 - basically this strategy is going to
46:02 - decode and verify
46:04 - that the token that comes in on this
46:07 - header
46:08 - is valid
46:10 - and during that whole logic we can just
46:13 - go ahead and pass the strategy yet
46:15 - another callback
46:18 - where we can do some custom logic to
46:20 - verify and return
46:21 - messages based on if the
46:24 - payload is valid or not so in here
46:26 - i'm just going to say try and then
46:28 - catch error
46:30 - if there's any type of error we can just
46:32 - go ahead and say return
46:34 - done
46:36 - new error
46:39 - false
46:40 - and i'll explain what exactly is going
46:42 - on here
46:44 - up here we can say the first thing we
46:46 - need to do is
46:47 - when we get a request
46:50 - we need to first check
46:53 - that the user
46:58 - exists in the database so i'll say
47:02 - user equals await user.find1
47:07 - where
47:07 - [Music]
47:09 - id is equal to jwd payload.id
47:13 - and jwp or jwt payload is going to be
47:17 - whatever we decide to encrypt or
47:20 - to sign so if you remember
47:23 - in the authentication controller
47:25 - we sign the user and user has a dot id
47:28 - attribute
47:29 - so when it comes in and if it's
47:31 - validated or verified
47:35 - we can just go ahead and grab that id
47:38 - and say
47:39 - if the user does not exist for whatever
47:42 - reason
47:44 - we can just return a new error
47:48 - and false
47:50 - and then
47:51 - otherwise
47:53 - we could just return that user object
48:10 - uh see why is this throwing
48:16 - i think i'm just missing a close
48:17 - parenthesis yep
48:22 - so this may not make 100
48:24 - sense right now i'm going to come back
48:25 - and kind of walk you through this one
48:26 - more time but basically
48:28 - if you pass
48:30 - back in the strategy and the second
48:31 - parameter the user it's going to set it
48:33 - for you on rec.user for you
48:36 - so basically
48:38 - this is the only instance where rec.user
48:41 - will be sent the other ones are going to
48:42 - result in errors
48:45 - but since we're going to do some custom
48:47 - logic
48:49 - we're going to add a folder called
48:51 - policies
48:55 - in fact where we have a controller
48:57 - called policies
48:59 - but i'm going to make a file called
49:04 - is
49:05 - authenticated.js
49:09 - and inside here i'm going to go ahead
49:10 - and just include passport
49:16 - and this is going to export a function
49:26 - which calls the passport.authenticate
49:30 - jwd strategy
49:33 - keep pronouncing that wrong jwt
49:46 - okay so again walking you through this
49:48 - basically we're going to be using this
49:50 - policy is authenticated and putting it
49:52 - in front of our
49:53 - routes
49:54 - and this is going to call passport
49:56 - authenticate with the jwt strategy
49:59 - which will make sure that it will call
50:01 - whatever the strategies we created and
50:03 - put here
50:05 - so again this logic is going to it's
50:07 - going to try to find a user if it exists
50:08 - in the database
50:10 - if it doesn't return an error if it does
50:12 - return that user and notice that we're
50:14 - doing error here in false and then null
50:17 - end user
50:19 - we can say error and user which are just
50:21 - being passed to this function here
50:24 - and of course we can say if there was an
50:26 - error
50:27 - we need to go ahead and just say
50:29 - res dot status of
50:32 - 403 authentication error dot send
50:35 - error message would be you do not
50:38 - have
50:39 - access to this resource
50:41 - or something like that
50:43 - and then otherwise the user is probably
50:45 - logged in
50:46 - not probably they are logged in and
50:47 - their user exists in the database and
50:49 - the token that they used is validated
50:51 - correctly against our secret that was
50:53 - defined in our config file here
50:56 - so that means that everything should be
50:58 - good
51:00 - and at that point if i can go back to
51:02 - whatever file is in
51:04 - we just call next
51:08 - so taking back what i said about
51:10 - passport
51:11 - we are going to
51:12 - pass in user here and our custom
51:16 - callback authentication logic is going
51:18 - to set direct.user for us because i
51:21 - didn't really like the way
51:23 - passport's default error was being sent
51:25 - back they weren't sending back a json
51:27 - object they were sending back like html
51:28 - code
51:29 - and if i want to purely rest
51:32 - like json api
51:34 - i kind of had to write this custom logic
51:37 - but anyway
51:39 - going forward
51:40 - how do we actually use
51:42 - this authentication endpoint
51:45 - and hopefully this doesn't have any
51:46 - issues with it but
51:47 - first step is we can go to routes
51:49 - and then some of the things that we want
51:50 - to authenticate
51:53 - include
51:56 - let's say the bookmarks right so
51:59 - if someone's trying to access their
52:00 - bookmarks
52:03 - so i could say is
52:04 - authenticated
52:07 - and of course i need to bring that in up
52:08 - here so i'll say
52:10 - const is authenticated is equal to
52:11 - require policies is authenticated
52:20 - so we want to authenticate this get
52:22 - request on the bookmarks to say hey the
52:24 - user has to be logged in
52:26 - they have they have to have a jwt token
52:29 - that's sent in it needs to be valid and
52:31 - it needs to be connected to a proper
52:33 - user id
52:35 - so if you remember before in that
52:37 - bookmark controller
52:40 - if i go to
52:42 - that controller here and go to index
52:44 - method
52:45 - we were assuming that user id was passed
52:47 - into the query string so at this point
52:50 - it makes more sense to instead
52:54 - set user id
52:55 - direct.user.id because that's coming
52:58 - from the jwt token which has been proven
53:00 - to be valid
53:02 - so we don't want to
53:04 - accept it from the query string anymore
53:06 - instead we just accept it from the user
53:08 - id
53:11 - and i think that should
53:13 - completely change and make this endpoint
53:15 - authenticated so if i were to save this
53:21 - and if i were to go back to let's say
53:23 - this
53:24 - let's see what happens if we try to
53:26 - refresh this to bookmarks
53:36 - let's see unknown authentication
53:38 - strategy.jwt
53:44 - um all right so it's kind of like
53:46 - debugging this a little bit and i
53:47 - actually forgot to do
53:49 - not user so basically this could be set
53:50 - to false which if you remember i think
53:52 - we
53:53 - we're setting it to false in a couple of
53:55 - these instances
53:57 - so again if there's an error or if this
54:00 - is not true or not defined
54:02 - we need to send back an error otherwise
54:05 - set rec.users you go to user and then
54:07 - call next so now if i were to refresh
54:09 - this page
54:13 - we get back an error 403 forbidden
54:16 - because we're not passing in an
54:18 - authorization header
54:21 - so at this point we need to add an
54:23 - authorization header to the request
54:25 - headers which if we were to go back to
54:28 - the client
54:29 - and then go back to that api
54:32 - function that i created
54:35 - we can go over here and i think we can
54:36 - just do uh headers let's see
54:42 - the tool ticks out of the way we can say
54:43 - headers and then we can say the type or
54:46 - name of the header so authorization
54:48 - and then of course we can just say
54:49 - bearer
54:53 - and then
54:54 - the token
55:00 - right so but the token remember is
55:02 - stored on the store in the state so
55:04 - i'm going to import the store up here
55:08 - so slash store store at least i think
55:11 - that's if i remember correctly
55:14 - yep
55:15 - so i'm going to import the store and
55:17 - instead of store or instead of token i'm
55:19 - going to do store.state.token
55:22 - so now whenever that token is set it's
55:25 - just going to add it to the header here
55:27 - and i think if i were to go back here
55:29 - um we see
55:32 - that now it's passing bearer and the
55:34 - toll token there
55:36 - which means that now we get a response
55:38 - back
55:39 - with
55:40 - all of the
55:42 - let's say um bookmarks related to that
55:45 - user
55:48 - and just to show that we don't need the
55:49 - user id in this parameter let's just go
55:51 - back to the ui
55:53 - so i think the back end is at least done
55:55 - for adding the extra authentication for
55:57 - jwt but in the front end
56:00 - if we go to that song metadata
56:04 - which is here
56:06 - instead of sending user id we no longer
56:08 - need to send that because that's going
56:10 - to be extracted from the jwt token
56:13 - on the back end
56:15 - so i'll go ahead and save this
56:18 - and i think
56:19 - this is well all right so for set as
56:21 - bookmark and unset as bookmark
56:24 - we no longer need to pass in user id
56:27 - either
56:28 - so let me just go ahead and go to the
56:29 - routes for that
56:32 - and say
56:33 - is authenticated for post
56:36 - and also is authenticated for i think
56:39 - delete
56:46 - so then if i go to bookmarks controller
56:48 - for post
56:50 - instead of user id here we can say const
56:52 - user id is equal to direct.user.id
56:57 - and then for
56:58 - delete
57:00 - const.userid is equal to rec.user.id
57:06 - and then instead of doing find by id
57:10 - um we only want to find like this is a
57:12 - way to add some type of
57:14 - security into our controller
57:16 - we have the user id so instead we could
57:18 - say find one
57:20 - and then where
57:21 - we could do
57:22 - id is equal to bookmark id and then also
57:26 - we can check where user id is equal to
57:29 - user id
57:32 - if that makes sense so basically this
57:33 - will only return
57:35 - a bookmark if the user is trying to
57:38 - access one that they already have access
57:40 - to
57:41 - so i could say if
57:44 - not bookmark
57:45 - again return
57:48 - res.status.403
57:49 - send an error saying
57:52 - you do not have access to this bookmark
57:57 - and otherwise you could just do an await
57:59 - and then destroy
58:05 - let me go back here make sure that seems
58:06 - like it's all okay
58:12 - so unsaid is bookmark
58:15 - works as intended
58:17 - set as bookmark
58:18 - it's also working as intended so those
58:20 - are working
58:22 - if i go back to browse
58:24 - let's see
58:25 - go that here set his bookmark
58:28 - make sure that still shows up
58:31 - cool
58:33 - so bookmarks are still working and now
58:36 - they're authenticated against the jwt
58:38 - token instead of the user passing in
58:41 - that
58:42 - user id inside of the query string
58:46 - in fact i think i still am doing that
58:48 - here so let me just go ahead and do some
58:49 - further cleanup
58:55 - try to find out where that's being
58:57 - passed in oh that's being passed in on
58:59 - the
59:01 - the index page so if i were to go to
59:05 - here
59:07 - songs bookmark
59:10 - we do not need to pass in user id here
59:13 - anymore
59:19 - let's go ahead and save that
59:22 - and go back and let's just refresh this
59:23 - we have
59:26 - fresh state
59:28 - so notice here we're not passing a query
59:29 - string in in anymore but we are passing
59:31 - in the authorization bearer jwt token
59:34 - and we're getting a response back
59:39 - um
59:39 - and then we should do the same thing for
59:41 - the recently viewed songs we should
59:42 - probably add some type of authentication
59:44 - over that
59:46 - so i'm going to go over to the back end
59:48 - to the routes
59:51 - same idea i'm just going to say
59:56 - add is authenticated to this endpoint
59:58 - and to this endpoint
60:01 - and then go into the histories
60:03 - controller
60:04 - and again we could just grab user id
60:07 - from rec.user.id
60:09 - because we know it should be defined
60:11 - only if this user was valid
60:15 - i think we're okay there and then same
60:17 - thing with this
60:21 - instead of grabbing it from the body
60:22 - let's just grab it from that rec.user id
60:25 - and return the same
60:27 - stuff
60:30 - so make sure the server restarted
60:33 - refresh the page
60:38 - let's see looks like histories is not
60:40 - returning anything now so let's
60:43 - see why
60:54 - so histories we are passing the token
60:56 - still
60:58 - and we're also passing user id in the
61:00 - query string so let's just go ahead and
61:01 - get rid of that
61:03 - because it's just extra stuff that we
61:04 - don't need to pass
61:07 - so user id
61:09 - get rid of that
61:18 - let's see
61:22 - and then the same thing with view when
61:24 - we go to view a song
61:26 - we don't need to be posting the user id
61:28 - anymore just the song ideas should be
61:30 - sufficient enough
61:34 - but okay so
61:36 - histories is returning a blank array
61:38 - which is not expected
61:40 - so let's go back to history's controller
61:42 - and go to the index method
61:44 - and let's just go ahead and print out
61:48 - what user id is set to
62:15 - so it's set to undefined for some reason
62:18 - um
62:23 - i wonder if rec.user is just not even
62:25 - defined either
62:34 - let me make sure i'm actually missing is
62:36 - authenticated
63:01 - wow that's kind of weird
63:06 - so i'm printing out the user and it's
63:08 - actually having like data values
63:12 - uh
63:12 - [Music]
63:14 - this is so strange
63:17 - let me print out two string
63:19 - to jason i mean
63:33 - all right so rec dot user dot id is
63:36 - equal to one but when i print out user
63:38 - id is undefined
63:42 - which is very strange because i'm not oh
63:44 - duh
63:48 - let me get rid of that all right that
63:50 - should fix it
63:52 - um
63:56 - let me make sure i didn't do anything
63:57 - stupid with the other one
64:00 - user id user id
64:04 - yeah so the main issue is i had this in
64:05 - curly braces
64:08 - so that was my bad
64:10 - all right so refresh this page now and
64:12 - we get back the recently viewed song so
64:15 - the histories is now returning something
64:18 - and if i were to try to view a new song
64:21 - it's doing a post request and that seems
64:23 - like it's saving correctly too
64:27 - and if i were to log out
64:31 - we wanted bookmarks and recently view
64:33 - songs to disappear but they did not so
64:36 - again we can go back
64:38 - to our ui
64:41 - go to the songs page
64:44 - let's go ahead and get rid of some of
64:45 - this stuff
64:48 - and basically here in this left panel we
64:50 - want to say
64:52 - v if and then is user logged in
65:00 - and then we could just go ahead and grab
65:02 - that view x map state logic
65:06 - so pull that in
65:12 - pull that computed thing in
65:21 - so now if the user isn't logged in those
65:22 - two should disappear and i want this
65:24 - thing to become
65:25 - a full
65:27 - 12
65:28 - what's it called like 12 columns i guess
65:33 - so if i were to
65:35 - let's see
65:39 - all right so something else we can do
65:41 - here is if
65:42 - for whatever reason
65:45 - the user is logged in or isn't logged in
65:47 - we can go ahead and just bind a dynamic
65:49 - class to this
65:52 - so instead of saying xs6
65:55 - what do we actually want to do
65:57 - let me indent this one
65:59 - is say put xs6
66:02 - if
66:03 - the user is
66:05 - not logged in
66:08 - actually put a 12 they're not logged in
66:10 - and put a 6
66:11 - if they are logged in
66:15 - so that should make sense that should
66:17 - expand to a 12 if the user isn't logged
66:19 - in which we see here and then the moment
66:21 - we log in over here
66:23 - testing gmail.com
66:26 - one two three six seven eight
66:28 - save that
66:29 - we now get two columns on the left or we
66:33 - get a
66:35 - column on the left of with six and then
66:37 - a column on the right of with six
66:40 - make sure this is all still working as
66:41 - expected
66:48 - all righty everyone i think that kind of
66:50 - wraps up
66:51 - the remainder of everything i wanted to
66:53 - work on i know i could probably
66:54 - continuously add on new features and
66:55 - functionality to this app
66:58 - but the the purpose of this series was
67:00 - just to give you a really good overview
67:02 - or not a good overview but a basic
67:04 - overview of how to use vue
67:06 - how you may want to use express
67:08 - an example way of how to build up your
67:10 - project how to organize it
67:13 - a couple of overviews about like you
67:14 - know npm
67:16 - sqlize passport authentication jwt
67:21 - view beautify
67:23 - view x for storing your state
67:27 - persisting your state to local storage
67:29 - so i kind of just
67:30 - hit all the different things that you
67:32 - might have in a real world full stack
67:35 - application
67:36 - but i didn't necessarily go super in
67:39 - depth onto all the different things you
67:40 - could have
67:44 - so a couple of ending remarks
67:46 - i kind of started out this video like
67:49 - kind of typing verbatim
67:51 - from a pre-existing like
67:53 - app that i worked on
67:55 - but then as i went further on with the
67:58 - parts i kind of just started doing
67:59 - ad-lib so that's why we kind of ran into
68:01 - more bugs
68:02 - and you got to watch me do more
68:03 - debugging
68:04 - so i guess one question i had was was
68:06 - watching me struggle with debugging
68:08 - useful for you like was it helpful to
68:10 - see me go in here and like try to figure
68:12 - out okay why is this returning the
68:14 - status
68:15 - you know figuring out the console logs
68:16 - or would it just be better to just see
68:18 - the app created with very little
68:21 - bugs or debugging
68:23 - so let me know about that
68:26 - also let me know if you have any
68:27 - feedback or any suggestions of how i
68:29 - could have made
68:30 - my code better there's different things
68:32 - in view that i probably after this
68:35 - series i'm actually going to read the
68:36 - whole entire view documentation
68:38 - i'm going to read all the ux
68:39 - documentation probably read all the
68:40 - beautify
68:42 - examples and documentation because i
68:43 - didn't really do that before making this
68:46 - so it's kind of my bad but i didn't
68:48 - really have the time to do that
68:52 - but yeah feel definitely feel free to
68:53 - send me a tweet and give me feedback on
68:56 - how i can make this video how i could
68:58 - have made this video better
69:01 - let's see i don't think there's anything
69:03 - else i wanted to mention
69:07 - yeah i guess the last thing i mentioned
69:09 - is again this
69:11 - project is hosted on my github repo
69:13 - which is in the description below
69:15 - and feel free if you wanted to keep
69:16 - adding features onto this i will review
69:19 - the code and i'll you know give you
69:20 - feedback on
69:21 - like cool feature that you added or
69:23 - whatnot and i'll merge it into the
69:25 - actual branch so if you want to get
69:26 - practice doing a fork off of the repo
69:29 - and then submit a pr
69:31 - i'm not going to be like a
69:33 - really strict like i'll just read
69:34 - through it if it seems okay i'll just
69:35 - merge it in why not and maybe i'll grab
69:37 - it and just play around with it
69:41 - so again
69:42 - totally feel free to like try to add
69:44 - features onto this i have no problem
69:46 - with you doing that
69:47 - and also feel free to just grab this
69:48 - project and do whatever you want with it
69:50 - it's mit so
69:52 - um
69:55 - again i really hope this tutorial was
69:57 - really useful for you all i know there's
69:59 - a lot of places that i messed up on and
70:00 - i probably could have done better but
70:03 - again this was totally free tutorial and
70:06 - i didn't really have all the spare time
70:07 - in the world to make sure it was perfect
70:09 - so i hope it was a good overview i hope
70:10 - you learned a lot
70:12 - and i hope you will continue to learn
70:14 - how to program and build full-stack
70:15 - applications
70:17 - by yourself and make your own progress
70:19 - and feel free to uh ask me questions if
70:21 - you have any questions or suggestions
70:24 - again my name is cody seibert and feel
70:27 - free to follow me on twitter which is in
70:28 - the description below
70:30 - and be sure to look out for more videos
70:32 - on free code camp in the future and good
70:34 - luck and have fun on your latest
70:36 - programming endeavors all right have a
70:38 - good one
70:52 - you