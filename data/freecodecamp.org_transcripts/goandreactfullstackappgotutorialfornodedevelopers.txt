00:00 - learn the basics of go by building a
00:01 - full stack web app with react and go the
00:05 - project also features typescript mongodb
00:07 - and chakra UI and you'll use tanat Query
00:11 - to implement data fetching caching and
00:13 - updates Barack from as a programmer
00:15 - develop this course when you start
00:17 - learning fullsack web development you
00:19 - probably go with node.js in react
00:22 - because it is really convenient to build
00:24 - full stack apps by just knowing
00:26 - JavaScript but after a while it can feel
00:29 - a bit comptitive so You' like to try out
00:31 - something new and probably that's why
00:33 - you collected this video where we will
00:35 - build a full stack web app with react
00:38 - and go and we will Implement all crate
00:40 - operations which are create read update
00:43 - and delete and you will see the entire
00:45 - process because I will take you from an
00:48 - empty folder to the deployment and today
00:50 - we will build a task app where we can
00:53 - create one Mark as completed and delete
00:56 - that task just to make this as beginner
00:58 - friendly as possible we will build the
01:00 - API twice in the first one we will store
01:03 - the data in memory and then we will
01:05 - build it again by connecting to a
01:07 - database which is going to be mongod DB
01:09 - and in the front end we will use react
01:11 - with typescript we will use 10 stag also
01:14 - known as react query for data fetching
01:16 - we will use chakra UI for styling and at
01:19 - the end we will deploy our app to
01:21 - railway for free so overall a simple but
01:24 - yet effective tutorial to get you up and
01:27 - running with your very first go
01:29 - Application I I had a lot of fun while
01:31 - building it so I hope you will like it
01:33 - too and I would appreciate if you could
01:34 - leave a like And subscribe thanks for
01:36 - watching and let's get
01:40 - started so before we start coding if you
01:43 - visit the GitHub preo that you could
01:44 - find the link in the description you
01:46 - will see this file called comparisons.
01:48 - MD so I know that most of you guys has
01:51 - the JavaScript background with no. JS so
01:54 - I wanted to create this kind of like
01:56 - notes or cheat sheet that you could use
01:58 - before starting the tutorial or maybe
02:00 - after completing it I think that would
02:02 - be kind of like a cool comparisons that
02:05 - we could do in the go environment and no
02:07 - JS so in node.js when you start to
02:10 - create a new project you would say mpm
02:13 - in it which is uh which will give you a
02:16 - package.json file and the equivalent of
02:19 - that I'll just zoom in a little bit and
02:21 - go is going to be go mod in it and then
02:23 - you would put a module name so this is
02:25 - going to be some kind of like unique
02:27 - identifier for your module and it is
02:30 - going to create a go.mod file in the
02:33 - current directory and again this is
02:35 - going to be that kind of like package
02:37 - Json file which contains information
02:39 - about the module its dependencies and
02:42 - the co version that you're using and
02:44 - this module name uh has like it could be
02:47 - anything but it has a convention and you
02:49 - will see that uh in a couple of minutes
02:52 - and then when you want to uh start your
02:55 - application in node.js you would
02:57 - basically run this kind of like a
02:58 - command which is in PM Run start and in
03:01 - go you would say go run and then the
03:04 - file name which is going to compile the
03:06 - program and executes it and then when
03:08 - you want to install a package you would
03:10 - say mpm install and then package name in
03:13 - node.js and in go you would say goget
03:16 - and then the package name so goget is
03:18 - not a package manager but it is used to
03:21 - download and install packages from remot
03:24 - repositories and it does not handle
03:26 - versioning and this command fetches the
03:28 - package and it's dependencies if there
03:31 - are any and then as we just talked about
03:34 - it before package.json the equivalent of
03:37 - that would be code. mode file which
03:39 - contains the information about the
03:41 - module its dependencies and then the co
03:43 - version so when you want to install all
03:46 - dependencies in a project you would say
03:48 - mpm install and in go that's going to be
03:51 - go tidy and then when you want to
03:54 - stringify Json so you would call this
03:56 - method and in go this is called uh some
04:00 - like marshalling so you would say json.
04:02 - Marshall and you're going to have uh so
04:05 - like the go data structure and when you
04:09 - just Marshall that it's going to
04:11 - stringify it to a Json string and the
04:14 - reverse operation is going to be
04:16 - json.parse which is going to be UNM
04:19 - marshalling so again you have a Json
04:22 - string and you're going to run this
04:24 - method with that and it's going to give
04:26 - you that go data structure in Json right
04:29 - now this code might look a little bit
04:31 - complicated but we'll get to that and
04:33 - then the ndman is something that just uh
04:37 - reloads uh your application whenever you
04:40 - change some source file right that's
04:42 - going to be in the njs and in go there
04:45 - is air which is a live reload tool just
04:48 - like node Manon but in go applications
04:50 - so it's going to watch uh for file
04:53 - changes and automatically rebuild and
04:55 - restart the application it is similar to
04:58 - nodon and there are other Alternatives
05:00 - like fresh but uh for my case air was
05:03 - the most convenient one to use it and to
05:07 - be able to configure it you need to have
05:09 - a file called air. toml and this is
05:12 - something that again we'll just get into
05:14 - that in the video and uh so to be able
05:17 - to store your environment variables you
05:19 - would install the TMV package in node
05:22 - and in go it is going to be this uh
05:24 - goget and then the module name so
05:27 - github.com jaho and then go. EMV and
05:31 - again this is going to allow us to store
05:33 - sensitive information like API Keys
05:35 - database uis and any kind of like secret
05:39 - and here is an example of that where we
05:41 - just uh you say go. em. load the EMV
05:45 - file and if there are any errors just
05:48 - console log it to the console right or
05:50 - in the terminal but if we just pass that
05:53 - now we could just get any environment
05:55 - that we have and we're going to just
05:56 - assign it to a variable now we would use
06:00 - expressjs in node uh to be able to have
06:03 - that web framework and in go it is going
06:05 - to be uh fiber which is a web framework
06:08 - for go and it is inspired by expressjs
06:12 - so it is fast lightweight and easy to
06:14 - use and you're going to see it is
06:16 - actually looking pretty similar to
06:18 - express and there are other uh
06:20 - Alternatives such as gin and Eco and if
06:24 - you wanted to you could take a look at
06:25 - them after completing this video then
06:28 - let's see a middle W uh so in Express JS
06:31 - we had middle rares right this is
06:33 - actually a concept that we have almost
06:36 - in any kind of programming language when
06:38 - you build an API or something s similar
06:41 - and in go here is how we would use it so
06:44 - we create an app just like in Express
06:46 - but we say fiber. new which is going to
06:48 - give us an instance then we would Mount
06:51 - the middleware to our function and that
06:55 - middleware is going to take the next as
06:57 - the first argument and once we have run
07:00 - the middleware logic it's going to call
07:02 - the next function so that's going to be
07:04 - the middleware and then we have RW
07:06 - handling and here is an example uh the
07:09 - equivalent of that Ino so you would
07:11 - Mount your route and your Handler or the
07:15 - controller function and that's going to
07:17 - take the context and you could just send
07:19 - a response and we'll be using that in
07:22 - the video as well but that's going to be
07:24 - my comparisons I think that's a pretty
07:26 - cool uh list which is about 200 uh lines
07:29 - of code that you could use it after
07:31 - completing this video as well and with
07:33 - that let's go ahead and initialize a go
07:36 - module so here we'll just say go mod in
07:38 - it and then the module name so here is
07:42 - my empty folder that I have just created
07:44 - and I'll open up a new terminal and I'll
07:47 - say go mod in it and then we could just
07:50 - put anything here but the convention is
07:52 - to put your GitHub repo that you will
07:55 - push this into so I'll say github.com
07:58 - and my username then I'll just say react
08:03 - go tutorial and this is going to be the
08:05 - repo that I will create and push this
08:07 - code into and if we just press enter
08:10 - that's going to give us go.mod file here
08:13 - we can see this is the Go version that
08:15 - we are using and this is the module name
08:17 - and to be able to use go I forgot to
08:19 - mention but you need to install go in
08:22 - your machine which is pretty simple you
08:24 - would just go ahead and Google it then
08:26 - just install it and just press couple of
08:28 - next buttons and should be fine and up
08:30 - and running so in go we need to so we
08:33 - have like app packages and modules and
08:37 - let's just see that in on a diagram so
08:40 - here is our note about packages and
08:42 - modules so a package is a collection of
08:45 - go source files that resite in the same
08:47 - directory so here let's see this is
08:50 - let's say a package right and we have
08:54 - the main.go so let's say that's going to
08:56 - be our main package then we have the
08:58 - handlers package package the API package
09:01 - so on and so forth and all of them
09:03 - coming together is going to form a
09:06 - module right so packages collectively
09:09 - form a module and when you initialize a
09:12 - uh go module so basically you are
09:15 - creating a module right because it's
09:17 - going to have multiple different
09:19 - packages and uh like it's going to form
09:23 - a module so the very first thing that
09:25 - you'd like to do is create a main.go
09:27 - file and this is going to be the main
09:30 - package so we'll just say package Main
09:32 - and this idea is kind of like different
09:34 - if you have never used it but once you
09:37 - just write a couple of different lines
09:39 - of code and use it more than so let's
09:41 - say you would use it in a couple of
09:43 - different projects that's going to just
09:44 - make a lot of sense so here this is
09:46 - going to be our main package and in the
09:48 - main package you have to have the main
09:50 - function so here co-pilot is getting a
09:52 - bit uh annoying so I'll just go ahead
09:54 - and disable completions so here I'll
09:57 - just have my main package and and I'll
09:59 - just uh let's say console log hello
10:03 - world for that we would use fmt let's
10:05 - import that and I'll say fmt print line
10:10 - just like this and I'll say hello world
10:14 - and to be able to run this file I'll
10:16 - just say go run and main.go now we
10:21 - should be able to see Hello World in our
10:23 - console and let's see the variables in
10:25 - go so I'll just shrink my terminal now
10:28 - there are couple ways of creating
10:30 - variables so with the VAR we have let's
10:33 - say my name and type is going to be
10:36 - string so I'll just say John do and
10:39 - there is another usage with const we'll
10:42 - say my second name that's going to be
10:45 - string and we'll just say Jane do so
10:48 - this is not going to be a go complete uh
10:51 - crash course but I just wanted to talk
10:53 - about variables for a second because
10:55 - there is another way of using that which
10:57 - is pretty common where you don't really
11:00 - declare the type but that's going to be
11:01 - inert so I'll just say my third name and
11:06 - if I just put this colum and equal sign
11:09 - I could just say uh let's say Bob do so
11:13 - here this type is going to be string by
11:15 - default because it has being infert and
11:18 - I'll be using this kind of so this kind
11:20 - of variable assignment a lot in this
11:22 - video and if we just say fmt do print
11:26 - line my name let's say duplicate this
11:30 - one twice I'll say my second name and my
11:34 - third name we should be able to see all
11:37 - of them in the console let's go ahead
11:39 - and run this file with gun main.go and
11:42 - there we go we have all of them in the
11:44 - console so that's going to be the
11:45 - variables and just keep in mind that
11:47 - this is going to infer the type um I
11:50 - think I could delete all of them and
11:52 - here we'll like to install the fiber so
11:56 - that we could create our API and just
11:58 - have our web framework right so I'll
12:00 - open up my terminal and I'll just say
12:02 - CLS to clear up my console or my
12:05 - terminal and I'll just say go um get so
12:10 - let's get the fiber so I'll say
12:12 - github.com go fiber SL fiber and then I
12:17 - think it's going to be V2 now that's
12:19 - going to get that and update our go. mod
12:22 - file so there we go we have all of our
12:24 - changes and even we got the go. suum
12:27 - file and it's going to be a again
12:29 - related to packages or modules and let's
12:33 - create our app so I'll say um just like
12:37 - this it's going to infert the type I'll
12:39 - say fiber.
12:41 - new and we'll take to say app.
12:45 - listen and now you you would put column
12:49 - and then let's say the port which I'll
12:51 - go with 4,000 and that should be
12:55 - capitalized and if we have any errors we
12:57 - could just wrap this with
12:59 - let's say log and import the package and
13:03 - fatal so with that we should be able to
13:05 - see any uh so if you hover over this
13:08 - it's going to say fatal fatal is
13:10 - equivalent to print followed by a call
13:12 - to OS exit one which means there were
13:15 - some errors but if we don't have any I
13:17 - think that's going to work fine let's go
13:19 - ahead and run our um server right I'll
13:23 - say uh go run main.go and we should be
13:28 - able to see the hello world and now it
13:29 - is listening on our let's see this port
13:33 - and here we are getting this kind of
13:35 - like security kind of thing I'll just
13:37 - say uh accept the so just let me use the
13:40 - go so now whenever I change anything in
13:43 - this file so let's say hello world s it
13:46 - is not going to restart my server to be
13:48 - able to see that change I need to kill
13:50 - it and then just restart it again so now
13:53 - I could see it just has the new update
13:56 - and like the thing in the console but I
13:58 - don't really want to have this I just
14:00 - want to have that kind of like not mom
14:03 - feeling where it's just going to restart
14:05 - that uh as soon as I change anything in
14:08 - this file and for that I'll just go
14:10 - ahead and kill my terminal clear that
14:13 - and install a package called air so I'll
14:16 - say go install um and then this
14:19 - github.com and just paste it and press
14:22 - enter and once you have done that it's
14:24 - going to install air where we uh where
14:27 - we need to create a file for the
14:29 - configuration so go into this uh like
14:33 - file explorer and just create air.
14:39 - toml and to be able to get this kind of
14:42 - like um formatting install this
14:45 - extension in vs
14:47 - code so it is this one that I'm using to
14:50 - be able to get this kind of like the
14:53 - formatting that you'll see in a second
14:56 - now this is a file that I have prepared
14:58 - with the help of chat GPT and taking a
15:00 - look at from the stack Overflow and I
15:03 - put some comments for your convenience
15:05 - so here we just say the root file is
15:07 - going to be this current directory of
15:09 - the project and the temp directory that
15:12 - you would like to uh store your files is
15:16 - going to be temp which is going to be
15:17 - created whenever we run the air command
15:21 - and here are some build configurations
15:23 - so we are just saying include any go
15:25 - file just watch that changes and exclude
15:28 - any in the client and in the temp and we
15:31 - don't have the client but we'll create
15:33 - that when we when we add our react
15:35 - application and here we have a couple of
15:38 - different commands that you could take a
15:39 - look so it is not really important and
15:41 - let's kill it I will go ahead and just
15:43 - say
15:45 - air and here we can see it has been
15:47 - created and now it listens for our
15:50 - server so now any anytime I just do some
15:52 - change it is going to actually restart
15:54 - it because it says main. go has changed
15:58 - so it's going to build and it's going to
16:00 - run that here we can see the updated
16:02 - result so we don't really need to kill
16:04 - it and then just restart it again now
16:07 - let's go ahead and add our first
16:10 - route so here I'll just say
16:13 - app.get in the root route where you
16:16 - would like to call our Handler function
16:18 - so I'll say funk which is going to take
16:21 - the context and you would like to call
16:23 - it as see this is the convention and
16:26 - that's going to be fiber. context but
16:29 - that's going to be a pointer into that
16:31 - so I'll explain the pointers in a couple
16:33 - of minutes most of you guys know uh how
16:36 - that works but in case uh so like some
16:39 - of you don't know I'll just try to
16:40 - explain it pretty quickly and we'll just
16:43 - say we we might want to return some
16:45 - errors so we're going to put that and
16:47 - we'll say return let's say c. status of
16:53 - 200 and we'll just say let's see this is
16:56 - not correct okay see. status 200 and the
17:00 - Chason data we would like to send let's
17:02 - say fiber.
17:05 - map and we'll just say message it's
17:08 - going to be let's say hello world and to
17:11 - be able to test it out let's go ahead
17:13 - and install this Postman extension feel
17:16 - free to get that I think it should be
17:19 - this
17:21 - one okay instead of using this desktop
17:24 - application we're going to use it
17:26 - directly in DVS code I'll just zoom out
17:29 - bit and I have a workspace called react
17:31 - go tutorial and I would like to add a
17:35 - new collection I'll just say
17:38 - todu and I'll just create uh let's say
17:41 - add a request that's going to be a get
17:44 - request and I'll just say uh maybe get
17:48 - todos for now let's call it like that
17:52 - and our endpoint is going to be
17:55 - HTTP Local Host and and our Port is
18:00 - 4,000 and we would like to just send a
18:02 - request to the root route and if I just
18:04 - send that now it's going to say hello
18:06 - world because this is what we are
18:09 - sending so now that we have this kind of
18:12 - like boiler plate setup where we have
18:14 - our application we are listening on this
18:16 - port and we are just having this kind of
18:19 - like hand Handler function I think we
18:21 - are ready to go and build our first the
18:24 - first part right so we're going to store
18:26 - Tod do in the memory that's going to be
18:29 - the first part and then in the second
18:31 - one we're going to actually connect to
18:33 - mongod so here we we're going to have
18:36 - couple of different to and for that we
18:38 - could use struct Ino and which is going
18:40 - to allow us to have custom kind of like
18:43 - data structure where we could give
18:45 - different fields with different data
18:47 - types so I'll say type which is going to
18:50 - be to-do and I'll say that's going to be
18:52 - a struct and open up this Cur Braes so
18:55 - each uh Todo will have an ID let's say
18:58 - the type is going to be int that should
19:01 - be lowercased and we'll say completed
19:03 - field it's going to have which is going
19:04 - to be bull or bullan and we'll say it's
19:07 - going to have a body and which is going
19:10 - to be type of string and in the Json
19:13 - body we'll like to just rename them uh
19:15 - I'll just say Json and open up this uh
19:18 - codes and I'll say ID and I'll do the
19:20 - same thing for this one back Tex Json
19:24 - and that's going to be let's say backx
19:27 - completed and this is going to be the
19:29 - value that you'll actually see in the
19:31 - response so Json body and that's how you
19:35 - would like to call it so I'll just save
19:36 - to get this formatting and now in the
19:39 - main function we'll like to have the
19:42 - to-dos array so I'll say to-dos and
19:45 - assign it to let's say just like this
19:49 - I'll say it's going to be to-do but an
19:52 - array of it right so just like that and
19:55 - the very first thing that we would like
19:57 - to do is actually create a to-do so I'll
20:00 - say app. uh post so that's going to be
20:04 - our post method and our endpoint is
20:06 - going to be API SL too here would like
20:10 - to have this function is going to take
20:12 - the C and it's going to be pointer to
20:15 - Def fiber. context and this function
20:18 - might uh return errors might return
20:21 - errors so just going to put that error
20:23 - and just have our function body so we're
20:26 - going to have a to-do right let's just
20:28 - say to-do is going to be equal to this
20:32 - to-do uh struct that we'll have now this
20:36 - is going to give us uh since we didn't
20:38 - pass any value into it it's going to
20:40 - actually create it with the false values
20:42 - or the default values and for INT it's
20:45 - going to be zero for Boolean that's
20:47 - going to be false and for string it's
20:49 - going to be an empty string so here just
20:51 - imagine now we this to-do is equal to
20:54 - let me just put it in the same line so
20:56 - the ID is zero um uh
20:59 - completed is going to be false and the
21:02 - body is going to be an empty string but
21:05 - this body or this object is going to be
21:07 - coming from the user right it's going to
21:10 - be coming from the request and for that
21:13 - we can check for it and assign it to um
21:16 - assign that into this to-do so I'll just
21:18 - say c. body parser and we're going to
21:22 - pass D to do so if you take a look at
21:24 - that body parser binds the request body
21:27 - to a struct so it's going to take the
21:29 - whatever user uh sends from the request
21:33 - and assign it into this to-do but now
21:36 - this should be a pointer so we need to
21:38 - just say uh get the memory address of
21:41 - that and this might return us uh a error
21:46 - so I'll say if error just assign it into
21:49 - that
21:50 - one and just put this where we'll just
21:54 - check for error so we'll say if error is
21:56 - not nil which is equivalent of n in
21:59 - JavaScript and we'll just say return the
22:01 - error so here this looks a little bit
22:04 - weird where we create the error in the
22:06 - same line and just a check for it we are
22:08 - assigning the value and check for it
22:11 - right um and then we'll say users can
22:14 - create the to-do but what if body is an
22:16 - empty string then youd like to return an
22:19 - error so I'll say if too. body is equal
22:23 - to an empty string then I'll just say
22:26 - return C do
22:29 - status of 400 and I'll say Json where I
22:34 - would like to say
22:36 - fiber. map and I'll say error field is
22:40 - going to be let's say to-do body is
22:44 - required okay but if this is not the
22:46 - case we can increment the ID by one
22:49 - because it was Zero where we have the
22:52 - false values right so I'll say to-do do
22:55 - ID is going to be the length of to-dos
22:58 - plus one and we'll say now to do uh
23:02 - we'll take the append uh like append the
23:04 - current to that we have just created so
23:07 - I'll say append call this method and
23:09 - we'll say enter the to-dos add the new
23:12 - to-do and since this is the memory
23:14 - address we'll like to get the value out
23:16 - of it right that was the pointer and
23:20 - eventually it will say return c.
23:24 - status of 2011 which means uh a Source
23:28 - has been created and we'll say Json of
23:34 - too so now let's save test it out and
23:37 - then I'll I'll explain this kind of like
23:39 - pointers and I will duplicate
23:43 - this uh
23:45 - request and I'll say create a
23:49 - to-do that's going to be post request
23:52 - I'll save that and our endpoint was SL
23:54 - API SL to where we would like to send
23:58 - the too body so let's go into the raw
24:01 - Json and if we don't pass anything that
24:04 - should say uh okay this is the this is
24:08 - giving us an error let's see what is the
24:10 - problem maybe opening up our
24:14 - console so I'll just I think save that
24:17 - one and send it
24:20 - again okay I'll just say
24:25 - body is going to be hello world
24:30 - okay it says now it's been created but
24:33 - if we don't pass
24:34 - anything it's going to say to-do body is
24:38 - required and that means our endpoint is
24:41 - actually working we sent a request to
24:43 - there and this function run where we
24:45 - check for the errors and eventually
24:48 - either return the response or the error
24:51 - and now let's take a look at this
24:53 - pointers so here let me just explain
24:55 - that here and then I'll just show that
24:56 - in a diagram so let's say I have a
24:59 - variable maybe I'll just zoom in a
25:01 - little
25:05 - bit so here let's say I have a variable
25:08 - called X which is type of int and let's
25:11 - say the value is five and then this is
25:14 - going to be stored in a memory address
25:17 - right so let's say it's going to be 0x 0
25:20 - 0 0 and maybe one so this is the memory
25:24 - address of X and the value of it is five
25:27 - and let's say I'll have a pointer now
25:29 - and that's going to be int and just to
25:32 - make sure that this is a pointer we need
25:33 - to put this asterisk before that int and
25:37 - I'll say this is the pointer that points
25:40 - to the memory address of X so that's
25:43 - basically it this is the memory address
25:45 - of X so the value of p is now actually
25:49 - the memory address of X okay so this is
25:52 - the value that P stores and the value X
25:56 - stores is five so if you just say now um
26:00 - fmt print line of P then you're going to
26:05 - actually get this
26:07 - value and if you say p but the like the
26:13 - address that it I mean the value that it
26:16 - stores it is going to give you the value
26:19 - of x which is going to be five so I hope
26:22 - you are able to see how that works P
26:25 - stores the memory address of X and when
26:27 - you ask it like that it's going to tell
26:30 - the compiler to give the value that has
26:33 - been stored on this address so that was
26:36 - kind of like uh so strange idea if
26:39 - you're seeing this for the first time de
26:41 - pointers so we have a memory and let's
26:43 - just see that on a diagram so we have
26:46 - just created a variable called let's say
26:48 - x the value was five and let's say this
26:51 - has been stored on this
26:53 - address okay so this is X the value of
26:57 - five and then we have have created a p
27:00 - which is pointer and it is going to
27:02 - point to the so it's going to point to
27:04 - the X so here we have the P for the
27:08 - value it is going to get the memory
27:10 - address of X let me just mark it like
27:15 - that and there you go now if you say hey
27:18 - P give me the value of this address that
27:20 - you are storing then you would just say
27:23 - asterisk oops so asterisk and P which is
27:27 - going to give give you the value that
27:29 - has been stored in this address which is
27:31 - going to be five and here this is the
27:34 - kind of like what I've explained
27:38 - and here we got the memory address of
27:41 - that Todo and we're getting the value
27:44 - out of it and this is how it works in go
27:46 - so kind of like strange but once you
27:48 - used to it it gets uh it just makes a
27:52 - lot of sense and so we have created the
27:55 - to do endpoint so I'll say create
27:58 - a Todo and let's try to update a to-do I
28:03 - will delete this line and below that
28:06 - I'll just say
28:09 - update a too so for updating we could
28:13 - use the put method but I think I'll go
28:15 - with patch so it's just preference feel
28:17 - free to use the one that You' like to
28:19 - use and I'll uh I'll give the endpoint
28:22 - of SL API slash toos slash the idea of
28:27 - to-do that we would like to update so
28:29 - that's going to take the Handler
28:31 - function context so let's say fiber.
28:34 - context and we could return an error and
28:38 - we'll just get the first ID from the
28:40 - prems so I'll say ID is equal to C that
28:44 - prems and our prems is called as ID now
28:49 - this is going to be type of string right
28:51 - so this is something important to keep
28:53 - in mind and we're going to first for
28:55 - loop our toos that we are storing so
28:57 - I'll say for I this is going to be the
28:59 - index and then the to-do itself where
29:02 - you would like to say range to-dos and
29:05 - this is how we would run a uh for Loop
29:07 - in go and go doesn't have while Loops so
29:11 - you you need to write them in for Loop
29:13 - if you need any and here we'll just go
29:15 - ahead and say uh if to-do do ID is equal
29:22 - to the ID that we have in the prems but
29:26 - now this is not this is going to give
29:27 - you an error because this is the type of
29:30 - int that you are storing right and this
29:32 - is the type of string and to be able to
29:35 - make that work we can convert this too
29:38 - ID to be a string and I'll just say fmt
29:42 - do
29:45 - Sprint um too. ID okay with that that
29:49 - should be fine and we'll just say
29:52 - too um I so it's going to find that in
29:56 - the completed field we're going to just
29:58 - make that to be true so if you want to
30:00 - negate it so you would say uh just get
30:04 - the current value so I'll say todos I
30:08 - complet it so it's going to either make
30:10 - it true so if it is true it's going to
30:13 - be false but if it is false it's going
30:15 - to be true but in this case I just want
30:16 - to always make it true when I send an
30:19 - request to this endpoint and once this
30:22 - is done I'll say return c.
30:26 - status uh let's go with with this one
30:29 - 200 and we could just return the updated
30:32 - to-do so I'll say to-dos and the index
30:37 - but if this is not really the case we're
30:38 - going to say to-do is not found so
30:40 - return c.
30:44 - status of 404 and let me just scroll a
30:48 - little bit and I'll say send maybe just
30:52 - Json fiber. map
31:00 - so to-do not found let's go ahead and
31:02 - test it out I'll create another one I'll
31:05 - duplicate
31:06 - this and that's going to be
31:09 - patch so API todos and let's say You'
31:13 - like to
31:14 - update um the first to that we have
31:17 - created and by the way let's create a
31:19 - couple of different uh so I'll just say
31:22 - learn
31:24 - react send it so it is not completed so
31:27 - let say learn
31:31 - JavaScript Learn
31:35 - Python and let's say learn
31:38 - go and here you can see ID is just
31:41 - incremented by one so we're going to go
31:43 - here and we don't really need to pass
31:45 - anybody so if you just save that it's
31:47 - going to update this method name and if
31:51 - I just say update the first Tod do it is
31:53 - going to make it to be completed so
31:55 - there you go it is learn react where we
31:58 - have the completed field to be true and
32:00 - by the way whenever you kill your server
32:02 - uh terminal it is going to actually
32:05 - delete every to-do that you have because
32:07 - it is storing that in memory so this is
32:09 - something to keep in mind uh when you're
32:12 - working with in memory kind of like
32:14 - approach so okay I think that's going to
32:16 - be it for the update a too uh Endo let's
32:20 - go ahead and create the delete one so
32:22 - I'll say
32:23 - delete a to do and that should be our uh
32:27 - very last and point so I'll just save
32:29 - that first and scroll a bit is going to
32:32 - be app.
32:34 - delete our endpoint SL API SL toos and
32:39 - then slash the ID so that we could know
32:43 - which too that we are deleting and also
32:46 - I think I forgot to update this one
32:48 - which is going to be to be able to get
32:49 - all toes so that's going to be SL API SL
32:53 - toos and let's go ahead and update that
32:56 - one so here we we had the root routee
33:00 - and I'll just make that to be slash API
33:03 - slash to which just going to just return
33:07 - to this that we had right if we save and
33:11 - if we just send a request to
33:13 - that let's just see send it again
33:16 - because it was
33:18 - restarting okay let's see what is the
33:20 - problem so it says missing Handler in
33:23 - route um I think we forgot to let's just
33:27 - comment is OD since we don't have the
33:30 - Handler function it just throws us an
33:32 - error so I'll just save that and in the
33:34 - get to-dos we should be able to get send
33:38 - this request and we cannot get anything
33:41 - let's just send it again okay there we
33:43 - go server just started and it says hello
33:46 - world but we don't really want to get
33:50 - that so if we hit SL API slash toos
33:57 - okay looks like it is not really working
34:00 - I'll just go ahead kill the terminal
34:02 - clear my console and I'll just say
34:05 - air and if you just test it out
34:09 - again so for some reason there were some
34:12 - kind of like caching problem so I just
34:14 - killed all of them right and then I open
34:17 - up like get to-dos and now if I just
34:19 - send a request there we can see we don't
34:21 - have any toos in the response so I don't
34:24 - know why did we got that kind of like
34:25 - caching but here you can see this this
34:27 - is the exact same code that we have just
34:29 - written so let's go ahead and try to add
34:32 - this delete to do uh Handler and again
34:35 - this is going to be pretty similar so we
34:37 - like to have this kind of like Handler
34:39 - function which is going to be the
34:41 - pointer to the fiber. context you might
34:45 - want to return an error out of this
34:46 - function and we're going to get the ID
34:49 - from the prems so I'll say C do prems
34:53 - which is going to be the ID in this case
34:55 - that we uh that's how we have called it
34:58 - then we're going to say for I the index
35:01 - and then the to-do in range of to-dos so
35:05 - we're going to find the to-do that we'
35:07 - like to delete so I'll say if to-do do
35:11 - ID is equal to ID and again we're going
35:15 - to get that error because this is the
35:17 - type of integer that's how we have
35:20 - created in the Str and we need to uh and
35:25 - this is type of string so we can't
35:27 - really compare a string to a number so
35:30 - we need to convert this to be a type of
35:32 - string as well just like we have done
35:33 - previously so I'll just say fmt dos
35:36 - Sprint and just wrap the to-do ID with
35:40 - that and if this is the case we'll just
35:43 - say todu and we're going to just
35:45 - reassign it so say aend into the
35:49 - todu up until this index that we are
35:52 - trying to delete but not including and
35:54 - we're going to say to just
35:58 - uh add these values so I + one and up
36:02 - until the end and we need to put this
36:04 - three dots which is going to just unpack
36:07 - those values so let's say if you didn't
36:10 - understand this code let me just show an
36:12 - example let's say we had five different
36:15 - to-dos okay and we have just try wanted
36:18 - to delete the third one this is going to
36:20 - say that just take the first two values
36:24 - right up until the index but not
36:27 - included
36:28 - so we want we wanted to delete this one
36:30 - it is going to take all of them but not
36:32 - this one included so now we're going to
36:35 - have one and two not the three and from
36:38 - I + one so starting from here up until
36:41 - the end so we're going to have four and
36:43 - five there you go we have deleted the
36:46 - third one and this is the new to-do uh
36:49 - list that we have so I hope that makes
36:51 - sense and this is something called varic
36:54 - operator and it is kind of like the
36:55 - spread operator in JavaScript where just
36:58 - unpack the values and we'll just say
37:02 - return um c. status and let me just
37:06 - actually copy that line and paste it
37:08 - because it is pretty similar with the
37:10 - status code and success is going to be
37:13 - true and if this is not really the case
37:15 - we couldn't find anything so we'll just
37:17 - say return 404 uh Json fiber. map to do
37:22 - not found let's go ahead and test that
37:24 - out so I'll just go ahead and maybe
37:28 - add a new request that's going to be the
37:30 - last one and I'll just make this type of
37:33 - delete save that and I'll say delete a
37:38 - to-do okay I'm going to save that and
37:40 - say this is going to be my endpoint SL
37:43 - API SL toos and then the idea of the
37:46 - to-do first if we try to get all to-dos
37:49 - we don't have anything in the memory so
37:51 - let's go ahead and create
37:54 - one so I'll just say learn go and and
37:57 - let's create two different one so I'll
37:59 - say learn react and let's say Learn
38:04 - Python okay so we have created three
38:06 - different toos if you want to get all of
38:08 - them here you can see we have three
38:10 - different items and I would like to just
38:13 - delete the learn react so I'm going to
38:16 - put the idea of
38:18 - two there we go it says success true and
38:21 - if we want to get all of them here we
38:23 - can see the ID of two has been deleted
38:26 - so with that I think that's going to be
38:28 - it for the first part of the course
38:30 - where we have just created four
38:32 - different end points to be able to get
38:34 - to those create a to do update one and
38:37 - just delete one and we are listening on
38:39 - a port so everything works fine and next
38:42 - we' like to actually write this same
38:44 - thing but with mongodb where we could
38:46 - have a database and just store those
38:49 - values so when we kill our terminal or
38:52 - when we kill our server we don't really
38:54 - lose them because that they are not
38:56 - going to be stored in the memory
38:58 - and before we get into that let's just
39:00 - see how we could use EMV in this go
39:03 - application so the very first thing that
39:05 - we need to do just maybe kill this
39:07 - terminal and just say CLS to be able to
39:11 - clear that and I'll say go get
39:14 - github.com SL I think it is called as
39:18 - Joo and then we'll say go. EnV and if we
39:23 - press enter that should get us that
39:24 - module and we'll like the load
39:26 - environment variables and for that let's
39:29 - go ahead and create this empv file and
39:32 - I'm not sure if you have realized but we
39:34 - have this temporary uh so kind of like
39:37 - the folder where the air is going to
39:39 - create whenever you run this Air Command
39:42 - so it's going to depending on your
39:44 - changes it's going to store its files in
39:47 - this temp uh directory which is going to
39:49 - be the executable of the compiled code
39:52 - so in the DMV let's say I have my port
39:55 - as let's say 5,000 and let's delete this
39:59 - spaces and instead of using this kind of
40:01 - like hardcoded value I could just use
40:04 - that Port so the very first thing that I
40:06 - wanted to do is just scroll to the very
40:09 - top and I'll just say error and just
40:12 - assign it like this I'll say go. env.
40:16 - load the EnV file and if error is not
40:22 - nil which means there is an error right
40:25 - we need to catch it and just say log.
40:28 - fatal and let's say error
40:31 - loading. EnV
40:33 - file but if this is not the case I'll
40:36 - just put this port variable and assign
40:39 - it to OS let's import that make sure you
40:42 - have in imported all of those modules
40:45 - and packages so we'll just say os. get
40:48 - EnV and we have called it as Port right
40:52 - and now we could use this value actually
40:55 - in here so I'm going to delete that and
40:58 - I'll say Plus Port so we have called it
41:02 - as 5,000 right let's see if that's going
41:06 - to work or not I'll just clear my
41:08 - terminal and I'll just say
41:10 - air and there we go now I can see the
41:13 - hello world and I can see my server just
41:15 - started on this port which is 5,000
41:18 - right okay so that's going to be it for
41:20 - this very first section let's just
41:22 - initialize this as a git repo and commit
41:24 - our changes for those of you that want
41:26 - to see uh in the commit history the
41:29 - first version that we have created
41:31 - completely in the memory and next we're
41:33 - going to build it with mongodb so I'll
41:36 - go ahead and maybe just kill this
41:38 - terminal I'll just say clear that get in
41:41 - it initialized an empty G
41:44 - repository um let's create a g ignore
41:47 - file so I'll say do get ignore and the
41:51 - content that you could just grab that
41:53 - from the GitHub repo so this is
41:55 - something that I just wanted to paste
41:57 - instead of writing it from
42:00 - scratch okay so here we are just uh
42:03 - excluding the compiled binary files make
42:06 - specific files MV not modules and all
42:11 - these files that that are not really
42:13 - important to be uh tracked by git so if
42:16 - you save that here you can see this has
42:18 - been ignored this file should be ignored
42:21 - and yeah so let's go ahead and add all
42:23 - of them to the staging area and I think
42:26 - I'll just give the first commit as first
42:29 - section completed store in memory so
42:32 - I'll just commit those changes and I'll
42:33 - see you in the next section okay so in
42:35 - this section we're going to build this
42:37 - exact same API again but this time using
42:40 - mongodb so that we could see how we can
42:42 - interact with a database so the very
42:45 - first thing that we would like to do is
42:47 - just visit mongod db.com and create an
42:49 - account for free and then just log in
42:52 - and once you log in it should take you
42:54 - to this dashboard where you can create
42:56 - an organization and then create a
42:58 - project so I'll just say create a new
43:01 - project and then I'll just give a
43:03 - project the name so I'll just say go
43:06 - maybe react go
43:09 - tutorial and I'll just say next project
43:12 - owner is going to be me so I'll just say
43:14 - create the
43:15 - project and then I'll just create a
43:17 - deployment and I would like to use the
43:20 - free tier which is enough for our site
43:22 - project and cluster name could be just
43:24 - default and let's say create the
43:26 - deployment
43:30 - and here we can see the username and
43:32 - password so you'll like to copy this and
43:35 - don't lose it so I'll go ahead and just
43:37 - paste it for the in the EMV file for a
43:40 - second and we're going to be using that
43:42 - so I'll just say create the database
43:45 - user and once we have done that it's
43:47 - going to say choose a connection method
43:49 - so here there so here on the screen
43:52 - there is my AP address you can't really
43:54 - see it because I hide it while editing
43:56 - this video but you should be able to see
43:58 - your IP address and it is going to add
44:00 - that to enable local connectivity and
44:03 - let's say choose a connection method we
44:05 - would like to connect to let's say from
44:08 - our application so I'll just go ahead
44:11 - and copy this string and then just paste
44:14 - it to here and I'm going to give the or
44:18 - maybe I'm just going to assign it to
44:20 - this variable I'll say mongod dbor
44:25 - URI okay there we go and here there is
44:28 - my password so I don't really need to
44:30 - this one I can delete that and with the
44:33 - help of this environment variable we are
44:35 - able to connect to our mongodb database
44:38 - so this is our connection
44:40 - string and once you have done that let's
44:43 - say review setup
44:45 - steps and let's say this is done so now
44:48 - you don't really want to get some uh
44:50 - development errors so just go ahead and
44:52 - so just go into the network
44:54 - access and here you can see there's
44:57 - going to be your current IP address but
44:59 - let's just add the IP address where we
45:01 - could just access from anywhere so I'll
45:04 - just click to this one which is going to
45:06 - be this IP address and I'll say
45:09 - confirm and it is in depending state in
45:12 - a couple of seconds that should be
45:13 - active okay there we go now it is active
45:16 - and we can visit our database and
45:18 - currently we shouldn't really have any
45:22 - collections but in this case we have one
45:24 - and this is something mongodb gives you
45:26 - out of the box so that you could do some
45:28 - testing but in this case I'll just go
45:30 - ahead and delete
45:33 - that and currently I don't have any
45:36 - databases or any collections but we'll
45:38 - create in a second so we'll like to
45:40 - interact with our mongodb database right
45:43 - so we need to use the mongodb driver so
45:46 - I'll say go get and I'll just put that
45:49 - as lowercase so go get go. mongod db.
45:55 - org SL mango Das driver and I think
46:00 - slash so just type this and press
46:03 - enter that's going to get you the
46:06 - driver so that you could interact with
46:07 - your database so I think I'll just
46:10 - delete this file
46:13 - completely except from this type I'll
46:16 - just cut that and select everything and
46:18 - just delete it okay I'll say package
46:21 - Main and I'll say funk Main and I'll
46:25 - just say fmt print
46:28 - line where I could just see the hello
46:30 - world in the
46:33 - console and then I'll just paste my
46:36 - struct at the very top now this is going
46:38 - to be the exactly the same but we'll
46:40 - like to add one more field which is
46:42 - going to be Bon for the ID and we're
46:45 - going to say underscore ID and just
46:47 - leave it like that for now and we need
46:49 - to add this field because uh mongodb
46:52 - store its data in the format of ban
46:55 - which is also known as binary Json and
46:58 - this is the data format that mongod DP
47:00 - uses so this is something um I think
47:03 - required that you need to pass and then
47:05 - let's say bar collection where that's
47:07 - going to be a pointer to the doc
47:11 - collection and make sure you import this
47:14 - package and now we would like to
47:16 - actually load the environment uhv file
47:20 - and let's just say that so error we'll
47:24 - just say go. env. Lo
47:29 - EnV and if there
47:31 - is an error so if it is not
47:35 - nil then log. fatal let's import the
47:40 - log so here we'll just say error
47:42 - loading. EMV file and you could even put
47:45 - the error message and then we'll like to
47:48 - have that mongodb URI environment
47:50 - variable and we like to just grab it
47:52 - from ourv file right so I'll just say OS
47:57 - do let's import Theos and get EnV and
48:02 - let's see what we have called it it was
48:04 - mongod dbor U and I'm going to take this
48:08 - value and just assign it to a variable
48:10 - so I'll just leave it like that and I
48:13 - would like to be the type to be infirmed
48:16 - uh I mean inferred which is going to be
48:17 - type of string and then we would like to
48:20 - connect to mongod DP so we're going to
48:22 - say
48:24 - client client options
48:27 - this is going to be our
48:29 - variable so I'll say options and we need
48:32 - to import that as well from mango
48:35 - options. client and then we'll say apply
48:40 - URI where we'll take the pass our
48:42 - mongodb connection
48:44 - string and then we're going to get the
48:47 - client and error out of this call and
48:50 - again let's infert the type I'll say
48:52 -  do
48:55 - connect and now this want you to if you
48:58 - just hover over that this want you to
49:00 - pass this context right so I'll just say
49:04 - context. background so this is not scope
49:07 - of this video and this is basically
49:09 - something that you'll like to create
49:11 - when you want to have maybe some
49:13 - cancellations some timeouts but in our
49:16 - case we don't really want uh want to
49:18 - have it we just say so it is like saying
49:21 - I am starting this task but I don't have
49:23 - any special requirements or deadlines
49:26 - attached to to it okay so that's going
49:28 - to be the uh information about context
49:31 - this is just something that we need to
49:32 - pass you could uh ignore it for now and
49:35 - we're going to get the client options
49:38 - and again we'll say if error is not nil
49:41 - so error is not nil and let me just
49:43 - scroll a bit if it is not equal to nil
49:48 - we're just going to say let's say log.
49:53 - fatal the error itself and then we can
49:56 - just check the connection with the Ping
49:58 - method so I'll say again in error I'll
50:02 - say client. ping and again this want you
50:06 - to pass a context so we say context.
50:10 - background and make sure you have
50:12 - imported this context package
50:16 - right then here I'll just put the second
50:19 - variable as nail which is read read prep
50:22 - uh and we don't really need to pass it
50:25 - and let's see why do we have this error
50:29 - okay if we just delete that that should
50:32 - be fine and we'll say if again error is
50:34 - not nil let's just do the same thing
50:38 - just like this but otherwise we'll just
50:40 - say fmt do print line
50:45 - connected to mongod DB
50:50 - Atlas so just like that and let's save
50:54 - this and just test it out I'll just
50:56 - clear my console and I'll say
51:01 - air so it just run that it says hello
51:04 - world and then it connected to mongodb
51:07 - Atlas with the help of this methods and
51:10 - this kind of this kind of code block
51:12 - that we have just written and now we
51:14 - would like to have a database and then a
51:16 - collection so for that for my database
51:19 - I'll just go before this question mark
51:21 - and I'll just call it as go
51:24 - langore DB and this is going to be the
51:26 - database that I would like to connect to
51:28 - so here I'll just go ahead and say
51:33 - collection client. database oops it
51:37 - should be database like this so it just
51:40 - autocompletes my code but I think if we
51:42 - delete this part it should be
51:44 - fine um just leave it like that client.
51:48 - database where will have the go langore
51:51 - DP in our collection I would like to
51:54 - just call it as toos so I'll just store
51:57 - all of my to-dos in this uh collection
52:00 - and I'll say app again just create a
52:03 - fiber dot
52:05 - new and then we're going to have four
52:08 - different endpoints so I'll say
52:11 - app.get right which is going to be SL
52:14 - API SL toos and instead of putting the
52:17 - function um immediately here we could
52:20 - just make our code a little bit more
52:22 - kind of concise or maybe clean let's say
52:25 - get to to and I'll just duplicate this I
52:28 - think three more times this one is going
52:31 - to be to be able to create a to-do so
52:34 - I'll just say app. poost and this is
52:36 - going to be let's say patch to be able
52:38 - to update one and this is going to be
52:40 - delete and here in the last two one
52:43 - we'll take to add an ID so that we could
52:45 - know which to-do we are deleting or
52:48 - updating so we have get to-dos and let's
52:50 - say create
52:52 - too and this Handler function is going
52:55 - to be update Del
52:57 - too and lastly delete too then again we
53:02 - could just get that kind of Port from
53:05 - the EMV file and this is something that
53:08 - we have done previously so I'll just
53:10 - copy it and paste it and now we could
53:13 - just check if Port is empty then we
53:16 - could put a default value so I think
53:18 - I'll just go with d5000 and because
53:20 - that's what we are using and eventually
53:22 - we're going to just say listen to that
53:24 - port and if there are any errors just
53:26 - wrap it with log.
53:28 - fatal and now let's go ahead and create
53:31 - all those functions or handlers so I'll
53:34 - say funk the first one is going to be
53:36 - get too which is going to take the
53:39 - context say fiber. context which can
53:43 - return us an error and just get the
53:45 - function and let's just duplicate that
53:48 - uh three more times the first one is
53:51 - going to be create too update too and
53:53 - then let's say delete too and let's
53:56 - comment all this out and just Implement
53:59 - them one by one first uh let's start
54:03 - with this one so here I'll just scroll
54:05 - down a bit and we're going to have VAR
54:08 - to-dos and that's going to be an array
54:11 - of to-do let's say and we're going to
54:14 - just fetch that and maybe assign it to
54:16 - that or just append to that to do right
54:19 - so that should be upper case to do
54:21 - because that's what we have called our
54:22 - struct so we're going to say collection
54:27 - find and we're going to say again we
54:29 - need to pass the context so I'll just
54:32 - say
54:35 - context.
54:36 - background and the second option is
54:39 - going to be
54:41 - bison. M so this might look a bit
54:44 - complicated but basically we are trying
54:46 - to pass our filters in our case that's
54:49 - going to be no filters because we like
54:52 - the fetch all to-dos in our collection
54:55 - so if you want to pass some filters then
54:58 - you would put something into this object
55:00 - but in our case we don't really want to
55:02 - and we would like to just fetch all
55:04 - documents in that collection and this is
55:07 - going to give us let's just assign it to
55:09 - the variables we're going to have the
55:11 - cursor and then the error so error is
55:14 - going to be whatever that is but the
55:17 - cursor is something when you execute a
55:19 - query in mongodb it returns a cursor and
55:24 - which is essentially a pointer to to the
55:26 - result set so you can use this cursor to
55:29 - iterate over the documents returned by
55:32 - the query so just think of it like we
55:34 - have all of our todos and let's just say
55:37 - if error is not nil right so we have an
55:40 - error then just return that but else
55:43 - we'll just say for just map through it
55:46 - so
55:47 - cursor. next and again we need to pass
55:52 - that context so I'll just say uh context
55:56 - do background and for each to-do we're
56:00 - going to create this variable let's say
56:02 - to-do and we'll just say if there is an
56:06 - error first we need to decode that right
56:09 - so I'm just going to assign it to that
56:12 - error and I'll say
56:14 - cursor.
56:15 - decode where we need to just put this
56:19 - Todo and if error is not
56:23 - nil then we're going to just return the
56:26 - error
56:26 - itself but if this is not the case then
56:29 - we're going to just append this to-do
56:31 - into that todos right I'll say pend into
56:36 - the to uh to this Todo that we have just
56:39 - get from the cursor and eventually once
56:42 - we have get all of them we're just going
56:45 - to say return c. Json just pass the
56:49 - todos okay so with that that should be
56:52 - completed for this uh function but now
56:54 - there is one optimization that we could
56:56 - use so we have just created some kind of
56:59 - connection right we are patching
57:01 - something and at the end of the day
57:03 - we'll like to just uh close that cursor
57:07 - when this function done right so I'll
57:10 - just say defer which is a keyword that
57:12 - we use in go to postpone the execution
57:16 - of a function call until the uh
57:18 - surrounding function completes in this
57:21 - case this is the surrounding function
57:23 - right once this completes it's going to
57:25 - run the right side so we'll just say
57:28 - cursor do close where we'll just say
57:32 - context do background okay so again
57:35 - defer is a keyword that you use to
57:37 - postpone the execution of a function
57:39 - until the surrounding one ends or that
57:42 - completes and that was that kind of like
57:45 - the optimization and we could do the
57:47 - same thing here when we create a
57:49 - connection uh to our database so here I
57:53 - think after this mongod do conect we
57:56 - could just say maybe after the error
57:59 - I'll just say defer um client.
58:04 - disconnect. database let's say
58:07 - disconnect and again just pass the
58:09 - context. background so when this main
58:13 - function done with executing right we'll
58:15 - like to disconnect from that uh database
58:19 - from the client so with that in mind
58:21 - let's save this and try to test it out
58:23 - in the postman we would like to get all
58:26 - of our toos and now our Local Host Port
58:30 - is going to be 5,000 because this is
58:32 - what we have put here right I'll just
58:34 - save that and if we take a look it is up
58:39 - and running let's just send a request so
58:42 - we got null because we don't really have
58:44 - anything in the database so next let's
58:46 - go ahead and add the create to do
58:49 - endpoint so I'll just uncomment this and
58:52 - create this function maybe shrink this
58:54 - one and just uncommon this one right so
58:58 - here we'll like to again create a to-do
59:01 - so I'll just say to-do and that's going
59:03 - to be equal to a new to-do so again this
59:06 - is going to be a pointer so just to keep
59:09 - that in mind because we will use c. body
59:12 - parser so I'll say C do body parser
59:15 - there I can see that and I'll just say
59:17 - pass it to do into it and again just
59:20 - remember that this is going to bind the
59:23 - request body to a struct in this case
59:26 - case this is going to be that struct
59:28 - we're going to take the request body and
59:31 - pass that into that struct and here we
59:34 - will just say if this is going to return
59:37 - us an error so we like to just assign
59:39 - that and we'll say if error is not is
59:43 - not nail right I'll just say then just
59:46 - show the maybe return the error itself
59:50 - and again we're going to just check if
59:51 - body is empty or not so user can't
59:54 - really create a to-do
59:56 - uh by putting nothing so I'll just paste
59:59 - it here we just say too. body if it is
60:02 - an empty string then just say too body
60:04 - cannot be empty and then we'll take the
60:07 - insert into the mongod DP right if we
60:10 - just pass all of those if checks so I'll
60:12 - just say collection do insert one which
60:16 - is going to take the context do
60:19 - background as the first argument and
60:22 - then the item that you like to insert
60:25 - which is going to be this to do and
60:27 - that's going to give us let's
60:29 - say give a bit spacing it's going to
60:32 - give the insert
60:36 - result as well as the error so here I'll
60:39 - just move on to the next line and I'll
60:41 - say if there is an
60:44 - error and just return it but otherwise
60:48 - let's just move on with the function
60:50 - where we would like to just update the
60:52 - to-do ID right because when we created
60:56 - this to-do that's going to have a faly
60:58 - value and as I have explained previously
61:01 - the ID is type of int so it's going to
61:03 - be zero right ID is going to be zero
61:06 - completed is type of bullan by default
61:09 - that's going to be def false and body is
61:12 - type of string that's going to be an
61:13 - empty string but now that we have
61:15 - created that and insert it now we have
61:18 - the inserted result so we would like to
61:21 - just update the to-do ID with the
61:24 - inserted ID so I know I know that sounds
61:26 - a bit complicated but here we'll just
61:28 - see in a second insert result. inserted
61:32 - ID and which is type of primitive let's
61:36 - just do this type uh assertion right so
61:39 - primitive and just uh import it from
61:42 - this mongod driver
61:45 - doob ID and I think we forgot to use
61:49 - this one when we initialize this to do
61:52 - struct so here we have this ID it is not
61:55 - going to type of int because mongodb has
61:58 - its own ID type and we'll just say
62:01 - that's going to be primitive. object ID
62:04 - okay we just remember that and if we
62:06 - take a look at here we need to add the
62:09 - error and otherwise everything should be
62:11 - fine so we have just updated that and
62:14 - let's say return c. status of 2011 a
62:19 - resource has been created and Jason just
62:23 - return that to do now there is an issue
62:26 - here where when we just create a to-do
62:29 - right so that should have an ID and by
62:32 - default that's going to be zero so we'll
62:35 - just say if it is zero then just omit
62:38 - that value here I'll just say omit
62:42 - empty and I'm I'm going to pass that to
62:45 - here as well and now this basically says
62:48 - if the value is false then just don't
62:50 - add it to the response okay or let's
62:53 - just delete that and see what's going to
62:55 - happen happen if we don't really add
62:57 - those fields so we have our create Todo
62:59 - function is up and running right let's
63:02 - go ahead and test it out where all I
63:05 - have to do is just update the port
63:07 - number because we have updated it and
63:10 - for the body let's say Learn Python and
63:12 - let's send your request now it says this
63:15 - has been created let's double check if
63:17 - we just refresh our
63:19 - database we should be able to see this
63:21 - goink DB and then the todu collection
63:24 - but here we can see the object ID is
63:27 - value of zero because that was the
63:29 - default
63:31 - value that it's going to give right this
63:33 - is the falsy value and we're going to
63:35 - say if it is empty then just omit that
63:38 - value and don't put it and that's what
63:42 - we're going to do basically we'll say
63:43 - omit empty and now I hope you're able to
63:46 - see what this does if it is empty then
63:49 - just omit that let's go ahead and first
63:52 - delete this
63:54 - document now we don't have anything in
63:56 - our database and let's create that again
63:59 - and the only change is going to be this
64:02 - ID it is not going to be zero but it's
64:04 - going to be created by mongodb right
64:06 - it's going to be a default value let's
64:09 - say learn go and let's say learn
64:12 - react and if we now try to get to this
64:15 - instead of getting null we should have
64:17 - this array of objects which we have
64:20 - three different todos and all of them uh
64:23 - are not
64:24 - completed is because as the default
64:26 - value but we're going to fix that next
64:29 - so let's go ahead and update it Todo
64:31 - first shrink this function get todos
64:35 - create uh create todos and then add this
64:38 - endpoint where we have the update Todo
64:41 - function so here in this function again
64:44 - we'll like to take the ID from the c.
64:48 - prems which is going to be the ID and
64:51 - that's going to be type of string and we
64:53 - need to convert it to be type of object
64:56 - ID so I will say that primitive
65:00 - doob ID from hex and we're going to pass
65:03 - the string ID which is going to give us
65:06 - let's say the error as well as the
65:09 - object
65:11 - ID so I'll just keep this as object ID
65:14 - and then the error okay so we need to do
65:17 - this conversion otherwise we can't
65:19 - really compare it so from this string we
65:21 - just made it a object ID that is type of
65:24 - primitive which is what mongod be uses
65:27 - right so we'll say if error is not nil
65:31 - which means there is an error so here
65:33 - I'll just put it like
65:35 - that and I think I'll just say invalid
65:37 - to-do ID so I'll just paste this line
65:40 - where we just sent 400 error status and
65:44 - then here we just want to update a to do
65:46 - so I'll just say
65:48 - collection. update one where we would
65:51 - like to first pass the
65:53 - context. background that was was the
65:55 - default uh argument then we'll like to
65:58 - add our filter right so which one that
66:01 - we'll like to update and then which
66:03 - field that we're going to update so
66:05 - these are the two things that we need to
66:07 - create and if you remember to be able to
66:10 - create a filter we would use
66:13 - b.m and if you just leave it empty
66:16 - that's going to uh just say uh all uh
66:20 - documents right but we want to just get
66:22 - the one that has the idea of this object
66:26 - ID that we are getting from the prems
66:29 - and the update field we would like to
66:32 - just update the completed field to be
66:34 - true so I'll
66:36 - say ban.
66:39 - m and here we just say
66:42 - set to be able to update and we'll say
66:45 - again ban. M and the completed field is
66:50 - going to be equal to true so this looks
66:52 - like kind of like mongus if you have
66:54 - ever used it and if this looks a little
66:56 - bit complicated it is just the syntax
66:58 - that you need to get used to it and this
67:01 - is going to return us the let's say uh
67:04 - like underscore because we're not going
67:06 - to use that and it's going to return us
67:07 - an error and just assign it to that
67:10 - values and we'll say if error is not nil
67:13 - again just return that so I'll just say
67:15 - if error is not
67:17 - nil return it but otherwise we're going
67:20 - to just uh return a success status with
67:24 - 200
67:26 - just like that so I'm just going to save
67:28 - that and just test it out also let's
67:30 - close these maybe save this
67:33 - one um so it was this and let's rename
67:38 - this because that's going to be
67:40 - update a
67:42 - Todo if we got all todos we know that
67:45 - the first one is python which is not
67:48 - completed I'll copy the ID of it and I
67:50 - would like to update it and here I need
67:53 - to update the port so say update this
67:56 - one to be completed if I just send that
67:59 - here you can see it says success and
68:02 - let's get all of our Tod this should be
68:04 - true now there we go if we just check it
68:06 - in our database it should be working
68:09 - fine for the first one which is
68:12 - completed and the very last thing that
68:14 - we need to add is to be able to delete a
68:16 - to do right that's going to be our very
68:19 - last endpoint so let's click close all
68:21 - of them and uncommon this function sure
68:25 - shrink this one oops so shrink this one
68:29 - actually and uncommon this
68:32 - line um so here again we're going to get
68:35 - the ID just like we have done previously
68:38 - from the prems so c. prems oops what is
68:42 - going on okay I'll just do contrl Z I
68:45 - think it imported
68:47 - something and I just did control Z okay
68:50 - so here c. prems you'll take to get the
68:54 - ID
68:56 - and then again we'll like to convert
68:59 - that object ID from hex so we'll say
69:02 - object
69:04 - ID and then the error
69:07 - field it should be like this so
69:11 - primitive doob
69:14 - ID from hex and then we're going to pass
69:18 - the ID so from the string we got the
69:21 - object ID of primitive type and we'll
69:23 - say if error is not nil
69:25 - then just say return c.
69:31 - status of 400 and then maybe
69:35 - Json and let's say fiber. map we could
69:39 - say error where the ID is
69:43 - invalid so invalid too
69:47 - ID but if this is not really the case
69:50 - then we' like to just delete one from
69:52 - our collection so we'll say collection
69:54 - delete one one and again context.
69:59 - background just like this and then we'll
70:02 - take the pass our filter so let's go
70:04 - ahead and create that so I'll say filter
70:06 - is going to be equal to
70:10 - b.m and our ID is equal
70:15 - to this object ID oops if I can type
70:18 - correctly right and again this is going
70:20 - to return us to different values which
70:23 - is going to be something that we don't
70:24 - use and the then the error itself and
70:27 - let's say if there is an error then we'
70:29 - like to just maybe return it so if error
70:32 - is not
70:34 - nil can just return that but else we'll
70:37 - just say success is going to be true in
70:39 - this case I'll just copy that line and
70:41 - paste it with 200 status code okay let's
70:46 - go ahead and test that one as
70:49 - well so that's going to be our Port
70:53 - 5,000
70:56 - and then the ID that we would like to
70:57 - add let's say since I am done with this
71:00 - one I'll just go ahead and maybe delete
71:02 - it right which is Learn
71:05 - Python I'm going to send that it says
71:08 - success true if we just try to
71:14 - refresh and there we go now we can
71:16 - really see that Learn Python to do and
71:19 - with that I think we have completed this
71:21 - part as well where we have just added
71:23 - all four Crow op operations right so we
71:26 - can get all of our to-dos where we just
71:29 - say collection. find and pass an empty
71:32 - filter so that we could get all of them
71:34 - under this cursor and we just Loop
71:37 - through it and append it to the todu uh
71:40 - this array or the slice that we have
71:42 - created then we just return it as a
71:45 - response we can create one with the
71:48 - error handling and we can update one
71:52 - with our filters and then the update
71:54 - filter that we'd like to update and then
71:56 - we can delete one so here we can see it
71:59 - is actually pretty easy to build an API
72:02 - with it if you know the
72:04 - basics and here this is something really
72:07 - important to keep in mind that you would
72:09 - like to omit the empty values for IDs
72:12 - otherwise it's going to be that object
72:14 - ID of value that's 0 00 0 that we have
72:17 - seen uh just couple of minutes ago and
72:21 - here is how we can uh like connect to
72:24 - our database and and we're using this
72:26 - defer keyword to be able to disconnect
72:29 - once this surrounding function completes
72:32 - so I think that's going to bit for this
72:33 - section and next we'll like to build the
72:36 - front end and connect to this
72:38 - application from that react app so
72:41 - instead of using Postman we're going to
72:43 - use that react application so I'll just
72:46 - go ahead and just add all my changes to
72:50 - the staging area and just put a commit
72:52 - and we have some built errors let's see
72:56 - so for some reason this is not being
72:58 - ignored let's go ahead into the get
73:02 - ignore and maybe I'll just say logs and
73:06 - I'll just say do
73:08 - log and with that now that should be if
73:12 - we just put it like
73:14 - that that should be ignored we just say
73:17 - uh we just said ignore that any file
73:19 - that ends with
73:20 - log okay so these are the changes that
73:23 - we have done this is the main f file you
73:26 - could take a look in the commit
73:28 - history I'll just add my changes so this
73:32 - is my commit message second section
73:34 - completed where we just store our data
73:36 - in mongodb I'll just commit the changes
73:39 - and I'll see you in the next section
73:41 - okay so in this section let's go ahead
73:44 - and create our react application for
73:46 - this I'll just open up my terminal and
73:48 - I'll just say make directory called
73:51 - client there we go it has been created
73:53 - and let's see the into that and now I
73:57 - would like to create a react application
73:59 - which I'll say mpm create feed at latest
74:04 - and I'll just say that uh dot so that
74:06 - it's going to put that in the current
74:08 - directory which is going to be client if
74:11 - you press enter that is going to ask us
74:13 - two different questions where we would
74:15 - like to go with react and typescript so
74:18 - I'll just select react with typescript
74:22 - now it says run mpm install because you
74:24 - got bunch of different uh like in the
74:28 - packages and you have bunch of different
74:30 - dependencies you'll like to install that
74:33 - so that you could get your not modules
74:35 - folder so that's going to go ahead and
74:38 - grab all of them now while it completes
74:41 - we going to be using chakra UI so let's
74:44 - go ahead and say chakra UI um and take a
74:48 - look at the documentation so this is a
74:51 - component Library which is accessible
74:53 - for react and we like to use use it um
74:56 - just to sped up the process and this is
74:58 - how we would use it let's first copy
75:00 - this command where we like to paste it
75:03 - into the client directory right I'll
75:05 - just paste that and that's going to give
75:07 - us the dependencies that we need and
75:10 - let's go with the framework guide of
75:13 - beat so we have got this script and it
75:16 - tells us to wrap our application with
75:19 - the chakra provider I'll just go ahead
75:21 - copy it and in my main.js Tex
75:26 - right I will just wrap it like this and
75:30 - let's get the chakra provider so it
75:33 - doesn't give me for some reason which is
75:35 - going to be this
75:37 - one and by the way while we're here
75:40 - let's go ahead and delete the
75:42 - assets delete the app. CSS
75:47 - and in the app.
75:49 - CSX let's just
75:51 - say uh P tag or maybe a button
75:56 - that says hello and this button is going
75:58 - to be coming from Chakra so there we can
76:01 - see let's delete this ifcs app CSS v
76:04 - logo and
76:07 - everything okay with that let's go ahead
76:09 - and also install a package called uh
76:12 - react Das icons we're going to be using
76:15 - them for the
76:16 - icons and with that I think we should be
76:19 - able to uh find with chakra UI let's say
76:24 - mpm runev to be able to start our
76:27 - development server which is going to be
76:29 - at this port I'll just control click to
76:32 - it it's going to open this uh Local Host
76:37 - 5073 and there we go now we have this
76:39 - button that says hello in your case that
76:41 - might be a light mode here it is dark
76:44 - mode for me but we're going to implement
76:46 - that so that we could switch from dark
76:48 - to light and light to dark and also this
76:51 - is the demo application that we're going
76:53 - to build so here we we're going to have
76:55 - this kind of nav bar where we could go
76:57 - from light mode to dark mode and here
76:59 - let's just start with the nav bar so the
77:02 - very first thing that I'll be doing is
77:04 - to go into the app. uh TSX and I'm just
77:08 - going to wrap everything with a stack
77:11 - which is coming from uh chakra UI and
77:14 - I'll say height is going to be 100 VH
77:18 - which is the entire screen so we're
77:20 - going to have a nav bar we're going to
77:23 - create this component and we're going to
77:26 - wrap rest of our application in a
77:28 - container where we'll have a to-do
77:31 - form and then a to-do
77:36 - list so let's take a look at the end
77:38 - result we have a nav bar and the rest of
77:41 - our application is in a container which
77:44 - just centers that here right so in the
77:47 - middle of the screen we have a to-do
77:50 - form and then a to-do list and each of
77:53 - them are going to be a to-do item
77:55 - right so this is a to-do item with check
77:58 - mark and delete uh button and when you
78:01 - say stack that's going to just put every
78:03 - child on vertical Direction so we have
78:06 - Navar at the top and below that to-do
78:08 - form and then just the to-do list so
78:11 - let's start with the Navar and for this
78:14 - we're going to be using these images and
78:16 - for that you need to visit the GitHub
78:18 - preo and under the public folder you're
78:21 - going to see uh couple of different
78:24 - files so I just grab them and paste it
78:26 - into this folder so I just copied all of
78:29 - them and I will just paste it into this
78:31 - file where we just have this explore.
78:34 - PNG go PNG this goang for the Fab icon
78:38 - and we have the react. PNG and we'll
78:41 - like to use that in the Navar so first
78:43 - let's comment this out and visit the
78:46 - Navar component which we don't have so
78:48 - let's create the components
78:52 - folder components and you'll like to
78:55 - have the navb bar. TSX so here our focus
79:00 - is not really the UI design so I'll just
79:02 - go ahead and copy and paste this code
79:05 - which is pretty basic and I'll just walk
79:07 - you through that and you can find this
79:09 - code and you can find this code in this
79:12 - kab prepo in the navb bar. TSX so we are
79:14 - never going to change this file later so
79:16 - you could just copy that and paste it so
79:19 - here we have a container with maximum
79:21 - width of 900 pixels and we have have a
79:25 - left side right which is going to be
79:29 - let's
79:30 - see it's going to be this left hand side
79:33 - with three icons with a plus and equal
79:35 - sign and on the right hand side we're
79:37 - going to have daily tasks with this kind
79:39 - of like toggle switch where we can go
79:42 - into light and dark mode and here we
79:45 - just say background of this box is going
79:48 - to depending on the uh color mode if we
79:51 - are in the light mode this is going to
79:53 - be that color and if we are in the dark
79:55 - mode we're going to be using this color
79:57 - and we are getting this Hook from Chakra
79:59 - UI where we have the color mode as well
80:02 - as toggle color mode function when we
80:05 - clict to that we're going to change the
80:07 - uh color mode as well as the icon so
80:11 - let's just save that import
80:15 - it and delete this and let's use it so
80:19 - this is our application there we can see
80:22 - it is here we can switch that mode but
80:25 - for some reason it is not being centered
80:28 - and let's see why this is the case first
80:30 - I'll go into the dark mode and it is
80:33 - because of this index. CSS we have this
80:35 - additional styles that came with v so if
80:38 - we delete everything in this file and if
80:40 - we just refresh there you can see it
80:42 - just works fine just like in the demo
80:45 - application so here you can see it is
80:47 - almost exactly the same where we just
80:49 - make this icon a bit larger and the very
80:53 - next thing that we'll click the add is
80:54 - going to be this um this to-do form
80:57 - where we just have an input as well as
80:59 - an icon so if you want to learn more
81:02 - about this dark and light mode you could
81:04 - always take a look at the documentation
81:07 - where you would go into the color mode
81:09 - and they have just example API so let's
81:12 - say dark mode and like if you visit use
81:15 - color mode they're going to just show
81:18 - you how you can make this toggle uh
81:20 - light and dark and this is the exact
81:22 - same thing that I'm using because I just
81:24 - take that from the documentation so
81:26 - there isn't anything complex in this
81:28 - file and I'm not going to explain that
81:30 - it is just CSS Styles so you would just
81:33 - grab that and paste it into this file
81:35 - from the GitHub repo and the next thing
81:38 - that we like to add is going to be this
81:40 - too form I'll just uncomment this and
81:44 - create this to-do form
81:48 - component so here I'll just say rafc and
81:52 - now we could really type this uh
81:54 - component from scratch and again there
81:57 - is not anything complex so I don't
81:59 - really want to waste uh time on like the
82:03 - UI I'll just go ahead and paste it and
82:06 - if you want to get this code I'll just
82:07 - put that at the very bottom of the file
82:10 - I'll just say starter code because we
82:12 - will uh change this code in the incoming
82:15 - minutes and I want you to have this
82:17 - starter code while you're uh following
82:20 - along okay so you would get this kind of
82:23 - code
82:25 - and paste it and just follow along with
82:27 - the tutorial so here we have a state
82:30 - where we keep track of the to-do and we
82:33 - are keeping track of that with this on
82:35 - change and this input is going to be
82:38 - focused by default when you refresh the
82:40 - page and when you uh click to a button
82:44 - it's going to make it uh scale so it's
82:46 - going to shrink that and if we are
82:49 - loading we're going to show a spinner of
82:51 - size EXO mode and everything is coming
82:53 - from Chakra UI and we have react icons
82:56 - if you want to take a look at that as
82:57 - well and when you submit this form we're
83:00 - going to just call this function which
83:02 - takes the event and this is the type of
83:04 - it that is coming from typescript which
83:06 - is a form event and we'll just prevent
83:08 - the default so that it doesn't refresh
83:10 - the page and it's going to say to do add
83:13 - it later we're going to add this
83:15 - functionality so that we could actually
83:17 - uh interact with our mongodb database
83:20 - let's save that and we have an error or
83:22 - it's just a warning it says you not
83:24 - using that but we'll use that later okay
83:27 - let's save and just see that in action
83:30 - here we go we have this input and the
83:32 - button if you refresh the page this is
83:34 - going to focus Itself by default because
83:37 - we have this lineup code and when we
83:40 - just add anything into here it's going
83:42 - to say too add it with this alert so
83:46 - that's going to be to-do form component
83:47 - and if you really want to see
83:50 - the um like the UI design just pause the
83:53 - video take a look at it from the started
83:55 - code basically we have a form and we
83:58 - have a flex on the left hand side we
84:00 - have the input and on the right we have
84:02 - the button if it is pending let's just
84:04 - make this to be true we're going to have
84:07 - this loading State into it but else if
84:10 - it is false we're going to see this plus
84:13 - icon and next we would like to build the
84:16 - too list component so that we could just
84:18 - see this
84:20 - data I'll go ahead and create that one
84:23 - to do list. TSX and in to-do list we're
84:29 - going to have to-do item.
84:32 - TSX so here I'll just again get the
84:35 - starter code pasted twice so that you
84:38 - could use it as well and again this is
84:41 - pretty simple file I'll just paste that
84:44 - and I'll paste it again comment this
84:47 - out um just like here and I'll just say
84:51 - starter
84:53 - code so you would copy and paste that
84:55 - part and basically we have fake data
85:00 - right three different toos buy groceries
85:03 - walk the dog do laundry and cook dinner
85:06 - two of them are completed and two of
85:08 - them are not so I'll just shrink this
85:11 - to-dos and we have a loading State and
85:14 - we are importing the to-do item for each
85:17 - to-do right so I'll just go ahead and
85:20 - add this to-do item as well and this is
85:23 - going to be the very last thing that we
85:24 - will copy and paste so about 40 lines of
85:26 - code and I will paste it again starter
85:30 - code for those of you guys that want to
85:34 - follow along
85:36 - right okay so these are just Styles
85:38 - that's why I don't really want to waste
85:40 - too much time on
85:42 - it and okay if we save this file and
85:46 - this one this is taking a to-do as a
85:48 - prop and we're just giving that type
85:50 - withd typescript and for each to-do
85:53 - we'll just check if it completed then
85:55 - it's going to take this green 200 color
85:57 - but else that's going to be yellow 100
86:00 - and we'll just check so we're going to
86:02 - give this line through if it is
86:04 - completed right so just like that if it
86:07 - is not it's going to have this normal
86:09 - text and if it is completed it's going
86:11 - to have this done badge and if it is not
86:14 - it's going to show this in progress
86:17 - right so this is not completed and this
86:19 - is completed then on the very right hand
86:21 - side we have check mark and then the
86:23 - delete or the trash icon so that's going
86:26 - to be it let's save and see that in
86:29 - action in our application first we need
86:32 - we need to go into this component and
86:34 - import it just like
86:37 - this it's going it's going to refresh
86:39 - and there we go so here we have a
86:42 - loading spinner is because we have this
86:45 - loading state is true and we just check
86:48 - if it is loading just show a spinner of
86:51 - size x large and let's say like default
86:55 - that's going to be false and there we go
86:58 - so this is the today's task where we
87:00 - have just couple of them and all of them
87:02 - are fake data and also let's go ahead
87:05 - and update this uh title to have this
87:07 - kind of gradient and for that we could
87:10 - check the documentation let's say
87:12 - gradient and here you can see they are
87:15 - using it on the
87:17 - text and I'll just give you this uh BG
87:20 - gradient linear tool left right you just
87:23 - put the right uh value and then the left
87:26 - one so if we just put something like
87:29 - maybe blue it's going to go okay so it
87:32 - goes to left so that's going to be the
87:35 - right value and this is going to be the
87:37 - left value which is this pink color
87:39 - starting from right with blue it's going
87:41 - to go to the left with this pink color
87:44 - and let me just give you the styles to
87:46 - be able to get this kind of linear
87:48 - gradient so here let's just go ahead
87:50 - into the to-do list where we have this
87:54 - text I'll just give these Styles uh
87:58 - starting from this color to this one and
88:00 - BG clip of text so that we can get this
88:03 - end result now everything works fine it
88:06 - is time to actually add this
88:08 - functionality and grab these data from
88:11 - the database and for that we'll be using
88:13 - 10 stack also known as react query so if
88:16 - you visit 10stack query here you can see
88:19 - the entire documentation and basically
88:22 - we'll like to use this as our data
88:24 - fetching solution and here you can see
88:26 - the motivation behind it and like it
88:30 - just gives you a lot of different things
88:32 - out of the box that you could use things
88:34 - like caching duping updating out of uh
88:37 - out ofd data in the background and lots
88:40 - of other things and I think it's such a
88:43 - great library to use and at the end of
88:45 - the day you'll like to use it in your uh
88:47 - so say production ready applications
88:50 - because that's going to give you lots of
88:52 - different functionalities that you don't
88:54 - you want to reinvent so the very first
88:57 - thing that we'll like to do is just
88:58 - install it so let's take a look at from
89:01 - the documentation if we go into the
89:03 - installation we should be able to see
89:06 - this Command right I will copy it and
89:09 - paste it in my terminal and just make
89:12 - sure it is under the client so I'll just
89:15 - paste that and install
89:17 - it and while it installs in the
89:20 - background let's go ahead into the quick
89:22 - start we could take a look at it how
89:24 - they're going to set it up or you could
89:26 - just trust me and uh see my guide so
89:29 - this is something again I took from
89:31 - documentation where we would like to
89:33 - create a query client and import it from
89:36 - our package and we' like to wrap our
89:39 - application with it so that we could use
89:41 - this query client in our application and
89:44 - you'll see what that uh what that is
89:47 - going to provide right so I'll just say
89:49 - query client provider and then just wrap
89:53 - my entire app application with it so
89:56 - let's import that one as well okay with
89:59 - that now we should be able to send uh
90:02 - request to our database or our back end
90:05 - right so we're going to go into the
90:08 - let's start with I think to-do list
90:11 - where we can just fetch all the to-dos
90:13 - that we have in the database and before
90:16 - we start doing that let's just create a
90:18 - type so export type let's say to-do
90:24 - and we'll just say each to is going to
90:26 - have this underscore ID field type of
90:29 - number body of string and then completed
90:32 - is going to be Boolean and in the to-do
90:35 - item when we say we're getting this
90:37 - to-do let's say the type is going to be
90:40 - this to-do that we are exporting from
90:43 - this file okay and I think we could
90:46 - delete this to-dos now and instead we're
90:49 - just going to fetch that okay so instead
90:51 - of this fake data let's try to fetch it
90:54 - so when you want to Fed some data uh in
90:56 - react query you would use use Query hook
91:00 - okay which is going to take the first
91:03 - argument as U this object and we're
91:07 - going to pass the query key and you'll
91:09 - see what that is going to do in a
91:12 - second but basically this is like an
91:14 - identifier for this query and when you
91:17 - want to refetch data for this one we're
91:20 - just going to say uh batch the query
91:22 - that has this query key of to-do and
91:25 - that's going to do it so again you'll
91:27 - just see that in action in a couple of
91:29 - minutes let's say we're going to have
91:31 - the query function where we'll have try
91:33 - and catch in the try we'll say cost R
91:37 - await fetch where our endpoint was let's
91:41 - say
91:42 - HTTP uh Local Host 5000 SL API slash to
91:48 - and we're going to get a response I mean
91:52 - a data back and we could just say if
91:55 - response is not okay then just throw
91:58 - this data. message that's not going to
92:00 - be data. message but it's going to be
92:02 - error because this is what we are
92:04 - returning from the back end right and in
92:07 - the catch we could maybe just um console
92:10 - log the error and then here I'll just
92:13 - say return the data and if you don't
92:15 - have anything then just return an empty
92:18 - array um here we need to so this is
92:21 - going to give us a value let's say con
92:24 - data which is the todos I'll just rename
92:27 - it to be todos so to just to make our
92:30 - code a little bit more readable and
92:31 - instead of this fake use State I'll just
92:34 - say is loading is going to be dynamic
92:38 - and here now it just want us to put some
92:41 - value right so this is a generic here
92:44 - we'll just say this is going to return
92:46 - us a to-do an array of todos so just
92:50 - like that let's delete this one and here
92:54 - so for some reason it says property data
92:56 - does not exist on type string so let's
92:59 - see why this is the case so we say use
93:02 - Query we just get that not from Checker
93:05 - UI but that should be coming from the 10
93:08 - stack query so just like that it should
93:10 - fix it where we just fetch our toos from
93:13 - the back end and if it is not okay we'll
93:15 - just uh throw that console log it and
93:18 - otherwise we'll just say uh return the
93:20 - data but if we just save it like that
93:23 - we're going to get a course error right
93:25 - let's just see in the
93:27 - console um let me just zoom in a little
93:31 - bit okay
93:35 - refresh oh okay so we don't even have
93:37 - our server is up and running so I'll
93:40 - just kill this client and open up a new
93:42 - one and I'll just say air and just make
93:45 - sure you're are not in the client
93:47 - directory but in the
93:50 - route so there you go now it says
93:56 - it is watching those changes but I don't
94:00 - think if it is correct because we set
94:01 - that um exclude the client folder so
94:05 - whenever you change something here it is
94:07 - not going to restart the server but I
94:09 - just don't know why it says watching and
94:12 - here we have connect to mongod Atlas
94:14 - let's send a request we got the course
94:17 - error where it just says you cannot send
94:20 - a request from this uh URL to Local Host
94:24 - 5000 and to be able to fix it let's go
94:27 - ahead and just add the course to our go
94:31 - server so in main.go we'll like to add
94:36 - course after we maybe before these
94:39 - requests so here I'll just say uh app.
94:43 - use and we'll just say course and make
94:47 - sure you import it from fiber middleware
94:49 - and you'll just say new we you'll like
94:52 - to say course. config
94:54 - and it's going to take this kind of like
94:56 - an object where we'll just say allow
94:58 - origins of let's say uh HTTP local host
95:03 - of
95:04 - 5173 which is going to be our front end
95:07 - application and we'll just say allow
95:10 - headers to be
95:13 - origin content type and make sure you
95:17 - put a
95:18 - dash and then the accept so if you save
95:22 - that now it should hopefully restart our
95:24 - server and we should be able to fetch
95:27 - data let's just send
95:32 - again so I think it just tries to
95:34 - restart let's just
95:37 - see okay it is up and running and if we
95:40 - just send that there we go now we have
95:42 - learn go and learn react which is in our
95:45 - database and they are not completed
95:47 - that's why we just see that as this kind
95:49 - of uh in progress and here we just say
95:54 - uh you need to add a key let's kill this
95:59 - one and in the too list we're going to
96:03 - add this underscore ID so here we
96:06 - already have it why do we get that so
96:08 - under the to-do
96:10 - list H it says they should have a unique
96:13 - key prop and it is coming from line 50
96:18 - uh six so that should normally work but
96:20 - for now let's just say idx and we just
96:23 - put the index just like that and if we
96:26 - just refresh we don't have that error
96:28 - and we just fetch our data so the very
96:31 - next thing that I would like to
96:32 - implement is when I click to that I just
96:34 - want to mark it as
96:36 - completed let's go into the um to-do
96:40 - item right when I click to this uh check
96:44 - Circle so I'll just say on click let's
96:47 - just say update to
96:49 - do function and before we write that let
96:53 - me just quickly explain what we have
96:54 - done here um basically whenever we uh
96:59 - render this to the list we are calling
97:01 - this use Query which is going to send a
97:03 - fetch request to our endpoint and it's
97:05 - going to give us the data back which we
97:08 - call it as todos and we are mapping it
97:12 - uh with each to-do item and we pass this
97:15 - to-do into that component and we are
97:18 - just using it in here right and now we
97:21 - would like to just update a to-do and
97:23 - for that we'll be using mutation hook so
97:26 - here I'll just go ahead and say use
97:28 - mutation which is coming from 10 stack
97:31 - and here this is going to return us a
97:34 - mutate
97:36 - function right so say mutate and I'll
97:38 - just rename it to be update too and it's
97:42 - going to give us is pending State and
97:44 - I'll just call it as is updating just to
97:48 - make my code a bit more
97:50 - readable and here this is going to take
97:54 - again an object where we could give a
97:57 - mutation
97:58 - key so mutation key that's going to be
98:01 - let's
98:03 - say update too and the most important
98:06 - thing is to have this mutation function
98:09 - is going to be async and we'll say if
98:11 - Todo is completed then we'll just say
98:15 - return out of this function with this
98:16 - alert well where we'll just say uh let's
98:19 - say not task but let's say to-do is
98:22 - already completed and we're going to
98:25 - have the try
98:26 - catch so try catch and in the try we're
98:30 - going to just send a request to our
98:33 - endpoint so instead of always typing
98:35 - this Local Host uh 5,000 what I'll be
98:38 - doing is to create a base URL and for
98:41 - that let's go into the app. TSX and I'll
98:44 - say uh export con
98:48 - basore URL which is going to be on this
98:51 - port slash API
98:55 - I okay so instead of using always this
98:58 - value I'll just use this constant and
99:01 - let's save it like that and I'll just
99:04 - put it like this right this is my base
99:06 - URL which ends with/ API and I'll just
99:10 - say slash todos and then the to-do ID
99:12 - this is the to-do that I would like to
99:14 - Mark as completed then I'll say my
99:17 - method is going to be patch and headers
99:20 - is going to be content type of
99:22 - application Json
99:23 - and I think we don't even need to pass
99:26 - it because it is going to uh update it
99:29 - right it's going to make that completed
99:31 - field to be true and I'll say con
99:35 - data r.
99:39 - adjon and if response is not okay just
99:42 - maybe throw an
99:44 - error and return the data otherwise here
99:48 - we could just say console log the error
99:52 - itself
99:54 - and let's save so while we're updating
99:57 - we could show some kind of like loading
100:00 - State just like in the demo application
100:02 - so if I clicked that here you can see I
100:05 - have that loading spinner for a second
100:07 - and let's go ahead and add it um here I
100:11 - will cut that I'll say if it is not
100:16 - pending or I'm sorry if it is not
100:19 - updating this is how we have called it
100:22 - then we'll would like to show this but
100:24 - else if it is updating then I'll just
100:27 - say give me this spinner from Chakra UI
100:30 - and let's say size is going to be
100:34 - small okay so we have some kind of like
100:36 - warning from typescript let's just say
100:40 - just call it like
100:42 - that okay instead of uh ref giving a
100:46 - reference we'll just say the Callback
100:48 - function is going to be this update to
100:50 - do when you click to this box let's see
100:53 - this in
100:54 - action here I'll just say learn goal is
100:58 - completed so it says invalid to-do ID
101:02 - and let's see why this is the
101:04 - case so to do underscore ID is not
101:08 - working for some reason let's say
101:10 - console. log D
101:13 - too and just see that in console okay so
101:17 - it has the ID field and I think we
101:20 - forgot to update it in the like main.go
101:24 - I'll just say main.go
101:27 - here this should be called ascore ID and
101:31 - this is something I forgot so I just
101:32 - realized sorry about that save it it's
101:35 - going to restart our server and let's
101:37 - just wait for a second so I'll just go
101:40 - ahead and refresh
101:43 - it okay let's just refresh it again
101:46 - until our server is up and running there
101:48 - we go now we have the underscore ID
101:50 - field and if I click to that there we go
101:53 - it has been updated but we need to
101:55 - refresh it to be able to see it here you
101:57 - can see it just says now this has been
101:59 - completed
102:01 - and so let's implement this when we
102:04 - click to that it should immediately
102:07 - refat the new state so we don't really
102:09 - need to refresh the page to be able to
102:11 - see it and this is where that query key
102:14 - is going to come into play so we will
102:17 - say once you have completed this
102:20 - successfully I'll say on success then
102:22 - you will like to run this function where
102:25 - you would like to invalidate some
102:27 - queries so I know this looks a bit weird
102:30 - but just bear with me we'll say query
102:33 - client and get that from this hook okay
102:37 - so we'll like to just refetch some
102:39 - queries I'll say query client.
102:42 - invalidate
102:43 - queries and the one that will take the
102:46 - update or invalidate first just pass an
102:50 - empty object and we'll say query key is
102:53 - going to be this array toos okay so we
102:58 - had this query key in this to-do list
103:01 - when we try to fetch all of our toos
103:04 - right this is our query key and when we
103:06 - say once you update it just try to
103:09 - refetch this data okay so let's try to
103:13 - see that I'll just refresh and if I
103:15 - collected this it's going to update and
103:17 - there you go because it refet it
103:19 - immediately once this is done uh
103:22 - successfully and and the other thing we
103:24 - like to implement is to create a to-do
103:27 - let's for that go into the to-do form
103:29 - and before that instead of passing this
103:33 - Index right I'll just delete that and
103:35 - I'll put to-do doore ID and now it
103:39 - should work because this is something
103:42 - that we have fixed in main.go file I'll
103:45 - go into the to-do form and so we are
103:49 - storing this when we type into the input
103:53 - and when we submit this form we are
103:55 - calling this function which should
103:57 - actually create a to-do with the help of
103:59 - use mutation so I'll just delete this
104:02 - function and I will actually get that
104:04 - from the use mutation right and make
104:07 - sure you import that from 10 stack query
104:10 - and I'll say const this is going to give
104:12 - me a mutate function which I would like
104:14 - to call it as create too so this is how
104:17 - you would rename it and then is pending
104:19 - state where I would like to call it as
104:22 - Maybe is creating or we could just leave
104:25 - it is pending in this case uh it is just
104:27 - preference but I would always like to go
104:30 - with some kind of a custom name so that
104:33 - I could just know what is going on is
104:38 - creating just like that and here we'll
104:40 - like to pass maybe a mutation key just
104:43 - in case we use it and then a mutation
104:46 - function which is going to take the
104:47 - event right because this is a submit
104:50 - Handler and we'll just say e. prevent
104:53 - default so that it doesn't uh refresh
104:56 - the page and then we are going to have
104:59 - the try catch and I'm not sure why this
105:02 - is not happy with us so maybe we are not
105:05 - returning something let's see okay let's
105:07 - just try to see how this all end up in
105:10 - the try we're going to have con res
105:13 - await again fetch the base URL let's
105:16 - import it and so/ API SL toos we would
105:21 - like to just pass the method as well as
105:24 - the body of the to-do I'll just say
105:26 - method is going to be post headers is
105:28 - going to be content type application Jon
105:31 - and then stringify the body which is
105:33 - this new to-do string and we're going to
105:37 - get data out of
105:39 - it and then we'll just say if response
105:43 - is not okay to say something went wrong
105:46 - or throw the error and we'll like to say
105:49 - set new to-do to be an empty string is
105:52 - because here let's take a look at the
105:54 - demo I'll just say something here once I
105:58 - press this button it's going to create
106:00 - it and now it is going to reset this
106:04 - field so that's why we're using it and
106:07 - eventually we'll just say return
106:09 - data in the catch we could just say
106:12 - Throw new error and here we're going to
106:15 - have after this let's
106:18 - say um on success so I'll just put a
106:22 - comma
106:23 - and on success once we have Del I mean
106:26 - once we have created a to successfully
106:28 - we would like to refat all to do just
106:31 - like we have done previously and for
106:33 - that we need to get the query key and I
106:36 - think we need to say this e will be so
106:40 - react uh. form
106:42 - event and now this should be happy with
106:45 - us and let's say error is going to be
106:47 - type of
106:50 - any um okay so let's go ahead and say
106:54 - const I'll just give a little bit
106:58 - spacing query client get that and we're
107:02 - going to just refetch it so I'll say
107:04 - query client invalidate queries where
107:06 - you like to just refet toos and if there
107:10 - is an error so on error we'll just say
107:14 - uh alert maybe error D message and here
107:18 - this is coming from es lent so I'll just
107:21 - say quick fix
107:25 - okay so we'll just disabling that it's
107:28 - really annoying but okay for now let's
107:30 - just keep it like that and when we in
107:33 - the loading State let's say is
107:36 - creating then show this spinner but else
107:39 - show that plus
107:41 - icon okay hopefully this should be our
107:46 - function Let's test it
107:48 - out I'll just say Learn Python
107:53 - and send that there we go now we have
107:57 - created that one and as soon as that is
107:59 - been created we just invalidate our
108:02 - to-do queries uh so that it could
108:05 - refresh that and here you can just
108:07 - double check it if you go here I'll just
108:09 - clear everything and I'll just say learn
108:13 - C++ and once I send it it's going to
108:16 - first create that one this is the post
108:19 - request and then it is going to fetch it
108:21 - right so here you can see it is going to
108:24 - send a fetch request to API todos which
108:27 - is going to be get method and here this
108:30 - is the post where we can uh create the
108:33 - to-do now we can mark it as
108:36 - completed and I think we didn't
108:39 - implement the delete function and we're
108:41 - going to add that next but if you were
108:43 - to just take a look at the code pretty
108:45 - simple right nothing complex going on we
108:49 - just preventing the default sending a
108:51 - request with our to-do body
108:54 - and we're just doing some kind of error
108:57 - handling and then just return the data
108:59 - on success and on error cases and let's
109:02 - go ahead and implement the delete to-do
109:05 - that's going to be looking pretty
109:06 - similar to this function we could
109:08 - probably make this a bit more uh
109:10 - reusable but I'll just go with the
109:12 - simple uh simpler approach where I'll
109:15 - just uh type it again from scratch just
109:19 - to make it kind of like a beginner
109:21 - friendly and feel free to to optimize
109:23 - this code so again we're going to have
109:25 - delete to do whenever we collect to this
109:29 - uh box okay I'll just get that past it
109:32 - this is going to be calling the delete
109:34 - Todo
109:35 - function and we'll say if it is not
109:41 - deleting so here if it is not deleting
109:44 - State then show the delete icon but else
109:47 - we like to just show this spinner
109:54 - just like
109:55 - this and let's go ahead and Implement
109:58 - our function so here I think I'll just
110:00 - let the copilot to the magic where we're
110:02 - going to have a mutation key a mutation
110:05 - function just going to be async we are
110:07 - sending a f request our base URL and the
110:10 - to do that we' like to delete this is
110:13 - our method we are doing some error
110:15 - handling and returning the data and in
110:18 - the catch case we're just console
110:20 - logging it and let's save and let's just
110:23 - try to see in action but before that I
110:26 - think we we need to add this on success
110:29 - case as well to be able to invalidate
110:31 - queries because if we don't add it let's
110:33 - try to delete this one it has been
110:35 - deleted but I can only see that if I
110:39 - refresh and to be able to fix it we're
110:41 - going to go ahead and add the on
110:43 - success and let's just try to delete
110:46 - this one there you go they have all been
110:48 - deleted and now we just see all tasks
110:51 - completed and it's because in the to-do
110:55 - list we just say that if it is not
110:59 - loading and if the length of toos is
111:02 - equal to zero then just show this text
111:05 - with the image so I think we have
111:07 - implemented almost everything to this
111:09 - application right we can create a to-do
111:12 - let's just
111:16 - say watch a go tutorial and create that
111:19 - one and let's say watch
111:23 - a react tutorial and add that one let's
111:27 - say do
111:29 - laundry and let's say buy groceries so
111:33 - we have added all of them and we can
111:35 - mark them as done we could delete them
111:38 - and just uh just fetch all of them right
111:41 - and here we have the light and dark mode
111:43 - and there you go now light mode looks
111:45 - pretty ugly you can't really uh read
111:47 - this and it is not really uh accessible
111:50 - so let's go ahead and fix it and for
111:52 - that I think I'll just go into the
111:54 - source I'll create a folder called
111:57 - chakra where I could put my theme into
112:00 - it so I'll say theme. TS so here this is
112:03 - a file that you could learn more about
112:05 - in the documentation so that's why I'll
112:07 - just go ahead and paste this code which
112:09 - is about uh like 20 lines of code here
112:13 - we have the initial color mode is being
112:16 - dark and the it's going to use the
112:18 - system color mode and here we just say
112:21 - the background color on the light mode
112:24 - is going to be this one and in the dark
112:25 - mode just keep the default one so to be
112:28 - able to use this we're going to go into
112:30 - the main. TSX into the chakra provider
112:35 - we'll just say theme is going to be this
112:38 - theme that we'll just uh that we have
112:41 - just created and it is not going to be
112:43 - coming from this one but let's just see
112:47 - it is going to be coming from this
112:48 - theme. TS file that we have just added
112:51 - let's save and see this in
112:54 - action and now there we go we have this
112:57 - kind of like a little bit more soft uh
112:59 - background and if you don't like the way
113:01 - this looks just feel free to update it
113:03 - but with that I think that's going to be
113:05 - it for the client now we have this kind
113:08 - of like hardcoded variable right and it
113:11 - is actually fine but when we go into the
113:14 - production and development this is like
113:17 - this should be dynamic right uh it's
113:20 - because when we deploy this application
113:22 - we're going to have the both back end
113:26 - and client in the same route so let's
113:29 - say currently we have our back end in
113:32 - this uh URL right and we're going to
113:35 - have the client under the same URL as
113:38 - well because this is how we will deploy
113:40 - that and once we have once we have add
113:43 - this we are not going to need any course
113:45 - handling as well because both the back
113:48 - end and the client will be in the same
113:51 - uh URL right right in the same domain
113:54 - that's why I'll just go ahead and update
113:56 - this Al bit so I'll say import. met. EMV
114:01 - do mode if it is equal to
114:05 - development then this is going to be our
114:08 - URL so let me just zoom out a bit so
114:11 - that you could see the entire screen and
114:14 - if we are in the production then we'll
114:16 - just send whatever the domain of uh
114:19 - whatever the domain is slash API and I
114:22 - think this is going to be a bit more
114:24 - clear once we add this main. go file
114:28 - right so here first things first we
114:31 - don't actually want to handle let's see
114:34 - where is that course kind of thing so in
114:36 - production we don't really want to have
114:38 - this because as I said before our client
114:42 - and back end will be served under the
114:44 - same domain to be able to make that work
114:46 - we need to make this client folder to be
114:49 - static so after this port I'll go ahead
114:52 - and I'll say if OS let's say os. getet
114:58 - EnV environment if this is equal to
115:03 - production then we'll like to make the
115:06 - client folder to be our static
115:08 - assets so that we could run and show our
115:12 - react application so I'll say app.
115:14 - static when we hit this root route
115:18 - will'll just show let's say uh this
115:21 - client
115:22 - this folder which is going to have our
115:25 - built optimized version of react
115:28 - application and we'll just see that in a
115:30 - second okay so when you send a request
115:33 - to API
115:34 - to um in like all these endpoints you're
115:37 - going to actually call the Handler
115:39 - functions but any routes other than
115:41 - these is going to trigger this react
115:45 - application under the this folder in
115:47 - client and we don't have this
115:49 - environment variable so for now let's go
115:51 - ahead and added to be
115:55 - development okay so that we are in
115:58 - development and now we're going to
115:59 - deploy in a couple of minutes and it's
116:02 - going to be production so we're going to
116:03 - make that to be static and the other
116:06 - thing that we' like to update is that we
116:09 - can't really uh load the DMV file in
116:12 - production because we're not going to
116:14 - have that file in the production
116:17 - environment but instead we're going to
116:18 - have uh environment variables that we
116:20 - will put from the dash board so we'll
116:23 - say if again os. get EnV if it is equal
116:29 - to let's say
116:32 - EnV let's say if it is not equal to
116:35 - production then we would like to
116:37 - actually load the environment variables
116:39 - so I'll just put a comment so it is
116:41 - pretty self-explanatory but let's just
116:43 - have this comment where we'll like the
116:45 - load DMV file if we are not in the
116:48 - production now let's save this one and
116:51 - we're going to go ahead kill our maybe
116:54 - the server and then for the client let's
116:57 - kill this and we're going to say mpm run
117:01 - built and this is going to create a this
117:04 - folder which is going to be that
117:05 - optimized version of our react
117:09 - application and something that I want to
117:11 - change while this happening I'll just
117:14 - not ignore this this folder and I would
117:18 - like to have it in my GitHub repo so
117:20 - that when I push any change it could
117:23 - take it and uh like just deploy my react
117:27 - application so this is not really the
117:28 - best approach but it is going to work in
117:30 - our case and I I found this to be the
117:32 - easiest to work with Railway so there we
117:35 - go now we have the disc folder which is
117:37 - going to hold the optimized build of our
117:40 - react application now if we just kill
117:43 - the client we can just say air to be
117:45 - able to start our backend server so here
117:49 - it is up and running we are connected to
117:51 - mongodb atlas and let's visit localhost
117:54 - 5000 SL
117:56 - API
117:58 - SLT and there we go now we can see all
118:01 - of our toos that we have since we are
118:03 - not in the production we can't really
118:05 - see the react application that we have
118:08 - but now we are going to deploy that and
118:10 - you'll see it is going to work so let's
118:12 - go ahead and push this code to the
118:14 - GitHub so that we could deploy it so
118:16 - here I am in my gup account where I'll
118:18 - just create a repo I'll say react go
118:21 - tutorial
118:22 - and that was the module name that I have
118:24 - give uh at the end at the beginning of
118:27 - the video so tutorial just like that and
118:31 - let's say create the repo I'll just make
118:34 - it private and once I uh publish this
118:37 - video that's going to be public so
118:39 - you'll just see that to be public and if
118:41 - you don't really want to go with private
118:42 - then just select public so I'll go with
118:45 - this option I'll say create the
118:48 - repo and now I'd like to just push uh an
118:52 - existing repo from the command line so
118:54 - I'll just copy all these commands and
118:56 - first I want to add my changes right so
119:01 - here we can see I have everything and
119:04 - let's add them to the staging area and
119:07 - just make sure you are uh you are not
119:10 - ignoring the this folder and I think I
119:13 - just forgot to update one thing so in
119:16 - the
119:18 - index.html let's just say react I'm
119:21 - sorry let's just say go react and
119:25 - typescript where I'll just say for the
119:27 - Fab icon I'll just put this
119:31 - go.png so goang do not SVG but PNG and
119:37 - once we have done that we should CD into
119:39 - the client first and let's say mpm run
119:43 - buil whenever you change something in
119:45 - the client you need to run this to get
119:48 - the latest version of this this folder
119:51 - okay so let's just wait for it until
119:54 - it's been built again so there you go it
119:56 - has been added let's just add those to
119:59 - the staging area as well so these are
120:02 - our
120:03 - changes so stage all of
120:05 - them and I'll just put a commit message
120:09 - so this is my commit message third
120:12 - section completed and it is ready for
120:14 - deployment I'll just commit that and
120:17 - I'll just go into the root and let's
120:21 - just C copy this and paste
120:24 - it which is going to push this local
120:27 - repo to the GitHub repo that I have and
120:31 - if we just refresh there we go this is
120:33 - the application or the source code that
120:35 - we just have and to be able to deploy
120:37 - this we'll be using Railway so head over
120:39 - to the railway. apppp and if you don't
120:41 - have an account create one for free
120:43 - which is going to give you $5 that you
120:45 - could use as the trial plan so I've been
120:48 - using I think over the last one week and
120:51 - it just charg Me 3 cents which is pretty
120:54 - convenient let's go into the dashboard
120:57 - where would like to just start a new
120:59 - project so I'll just say new project
121:02 - deploy from my GitHub repo and this is
121:05 - the very last repo that I have just
121:06 - created and it is private so I'll just
121:09 - select that one and I'll say deploy
121:17 - now so here it's going to initialize it
121:20 - and try to deploy that and and while
121:22 - it's done I mean while it it tries to
121:24 - deploy we need to add a couple of
121:26 - different environment variables so the
121:28 - first one is going to be EnV and here
121:30 - we're in the production let's add that
121:33 - the other one is going to be mongod
121:37 - dbor URI right we need to get that
121:40 - connection string and then just paste it
121:43 - so that we could connect to our database
121:47 - so I'll copy
121:48 - that and paste it now you don't really
121:52 - want to put Port because Railway doesn't
121:55 - really want you to put that Port it is
121:57 - going to figure it out uh himself okay
122:02 - or itself let's just deploy that these
122:04 - are the changes that we have just
122:07 - made EnV is production and this is our
122:10 - connection string so it's going to
122:13 - redeploy the latest change that you have
122:17 - done let's just wait and hopefully it
122:19 - should deploy without any errors and and
122:22 - if we have we'll just try to figure that
122:24 - out so it just looks like the latest one
122:27 - is active now we could go into the I
122:30 - think that should be settings and for
122:32 - the
122:34 - deploy
122:38 - um maybe in the networking so okay we'll
122:42 - just say generate a domain for us and if
122:45 - we just uh wait a bit it's going to give
122:48 - us this URL let's click to it okay there
122:51 - there is nothing here yet let's just
122:53 - wait a bit and then hopefully it should
122:55 - be up and running so here I'm just keep
122:58 - refreshing and it just has not found but
123:01 - it should be up in a couple of minutes
123:04 - and if you go into the deployments like
123:06 - you could see the latest one has been
123:08 - removed and this is the latest one that
123:10 - we have and you could just see the
123:12 - deploy logs where it just says hello
123:14 - world connected to mongodb appas and
123:17 - this is the port that Railway just
123:19 - figured it out because we didn't pass
123:21 - into the variables and I think if you
123:25 - put that it's going to not be really
123:27 - happy so let's just refresh a couple of
123:30 - times and there we go so we have the
123:33 - loading state it connected to our
123:35 - database let's just um why don't we have
123:40 - anything so for some reason it failed to
123:43 - fetch let's just
123:46 - refresh um okay so it says Local Host
123:50 - 5000 API to
123:52 - which is not really the correct URL
123:54 - because we are not on Local Host anymore
123:57 - and there must be some bug uh in this
124:00 - app. TSX so here we just say if the mode
124:04 - is development then this is going to be
124:06 - our base URL but else this is going to
124:09 - be um I think at some point we should be
124:12 - using this Local Host value maybe in our
124:16 - to-do
124:18 - list okay there you go I forgot to
124:20 - update this part right I'll just delete
124:23 - this where I'll just say
124:25 - base URL and
124:29 - plus the todos okay slash toos just like
124:33 - that but first we need to see the enti
124:35 - the client and just say mpm run build
124:38 - and before that I just also realized in
124:42 - the index HTML this should be go length
124:46 - and here I just have a typo so that's
124:49 - why it cannot really oops it is not this
124:51 - one it cannot really get this Fab icon
124:55 - and it just throws an error that says
124:58 - 404 this image is not found so let's
125:01 - just update that and let's say let's say
125:04 - mpm run build just going to give us the
125:07 - new this folder right so it's just going
125:10 - to go ahead and update that and once
125:13 - that is done we could commit our changes
125:16 - and here these are the changes that we
125:19 - have done here we have kind of like es L
125:22 - warning it is not really important so
125:24 - just ignore that and add all of them to
125:28 - the staging area and I'll just say base
125:32 - URL bug fixed commit that and sync that
125:35 - up so once you uh commit your changes
125:39 - right and push that Railway will
125:42 - immediately see that and it's going to
125:45 - rebuild it there you go it says building
125:48 - and it has just been 8 and 10 seconds
125:52 - so just wait for this to complete and
125:54 - once it is done I'll just be right back
125:57 - okay so there we go it has just been
125:59 - uploaded let's go ahead and see and
126:02 - there we go we got the data it is up and
126:04 - running we should be able to get this FB
126:07 - icon as well I'll just keep
126:11 - refreshing and for some reason it is in
126:13 - the cache but it should update in a
126:15 - couple of
126:19 - minutes yeah it should definitely update
126:21 - it because we have update that file let
126:24 - me just double check if we go into the
126:27 - index.html oh okay I again still did the
126:32 - wrong one so that should be go length
126:36 - just like that and you could put another
126:37 - commit but I think I'll just leave it
126:39 - like that so there is a typo that's why
126:43 - it doesn't work but if you go here you
126:46 - could Mark something as a done is going
126:49 - to update you could delete it you could
126:51 - delete everything basically or just say
126:53 - add a new
126:55 - to-do just like that we could make it
126:58 - done and delete that one as well and as
127:02 - far as I know this should be responsive
127:04 - as well so it's going to work on your
127:06 - phone completely fine up until like here
127:10 - which is one of the smallest phones you
127:12 - could ever get and with that that's
127:14 - going to be it for this video if you
127:16 - want to see more tutorials like this
127:18 - where we buil full stack web apps with
127:20 - go and and react let me know in the
127:23 - comments and don't forget to subscribe
127:25 - thanks for watching and I'll see you in
127:27 - the next one