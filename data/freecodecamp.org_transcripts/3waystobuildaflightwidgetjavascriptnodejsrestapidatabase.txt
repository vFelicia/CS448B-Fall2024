00:00 - this course will increase your knowledge
00:01 - of JavaScript node.js apis react
00:04 - databases and more Anya Kubo is your
00:08 - instructor she'll show you how to build
00:10 - the same project using three different
00:12 - methods and this will help you gain a
00:14 - deeper understanding of each method
00:17 - hey everyone and welcome to this
00:19 - compilation video which we're going to
00:21 - build the same
00:22 - three times
00:23 - so we're actually going to go to the
00:25 - flight widget we're going to start off
00:26 - super easy we're going to start off
00:28 - building this and vanilla JavaScript so
00:30 - if you're a beginner this is the perfect
00:31 - one for you okay we're going to build
00:33 - the widget and then we're going to
00:35 - display data onto it onto these flipping
00:37 - little cards right here and get new data
00:40 - every so often
00:42 - next up I'm going to show you how to
00:45 - essentially build this by using an API
00:47 - I'm actually going to build it in
00:49 - JavaScript for the front end and show
00:51 - you how to build a node.js backend in
00:53 - order to get data from the API that
00:57 - we're going to use okay so this one
00:58 - right here this is real data this is the
01:01 - real stuff
01:02 - and finally I'm going to show you how to
01:04 - build the same thing but using react at
01:07 - this time I'm going to show you how to
01:08 - use react for the front end and then a
01:11 - database with our own data to pretending
01:13 - we're at the airport and we're updating
01:15 - this data I'm going to show you how to
01:17 - get that data Again by building a
01:19 - node.js backend and using this free
01:21 - database so you don't need any credit
01:23 - cards or anything like that
01:26 - so I'm excited let's do it
01:35 - okay so let's get to building Australia
01:39 - flight widgets so no apis for this one
01:41 - this is going to be super vanilla
01:43 - JavaScript for those of you learning
01:45 - JavaScript however if you do want to
01:47 - learn how to do it with an API please do
01:49 - check out the link in my description
01:51 - below but we're going to do the same
01:52 - project however using an API so it's
01:55 - either project for whatever level you
01:57 - feel comfortable with
01:58 - let's do it so first off I am using web
02:01 - store so this means I can just open up
02:03 - my wet storm and create a new project
02:04 - and I'm just going to choose to call
02:06 - this flight with jet vanilla JavaScript
02:14 - and then click create okay so there we
02:18 - go you will see a directory has been
02:20 - created for me and all I'm going to do
02:22 - is create a new file an HTML file which
02:25 - can be an index HTML file just choose
02:28 - HTML5 right here or if you're not using
02:30 - website you might need to type.html to
02:34 - give your file
02:35 - the HTML extension so that your code
02:38 - editor knows to treat it like an HTML
02:40 - file so there we go there's my HTML file
02:43 - with the boilerplate thank you or
02:45 - webstorm and I'm just going to call this
02:47 - flight
02:49 - widget
02:51 - just like so the next thing we need to
02:54 - do is create an app.js file and a style
02:57 - sheet so Styles CSS once again I'm just
03:00 - going to choose to select the dot CSS
03:02 - file so if you haven't got a web store
03:05 - make sure to put dot CSS to make sure
03:08 - that your code editor treats this as a
03:10 - CSS file
03:12 - and once again I'm just going to create
03:13 - a JavaScript file and call this app and
03:16 - once again make sure to have the dot JS
03:18 - extension if you are not using webstorm
03:22 - okay great
03:24 - so now first things first let's go ahead
03:27 - and connect our style sheet using the
03:30 - link tag it's a self-closing tag and all
03:34 - I'm going to do is make sure that this
03:38 - is going to the path of where we keep
03:39 - our Star sheet as it's in the root of
03:42 - our project along with our index.html
03:44 - file so the same location I could just
03:46 - type in the file name like so we don't
03:48 - need to go into any directories or
03:50 - anything like that
03:52 - and once again I'm going to use the
03:54 - script tag like this and use Source in
03:58 - order to get our app.js files so again
04:01 - the same way that we went and got our
04:04 - CSS file we're just typing in the file
04:07 - name as it's in the same level it's in
04:09 - the same directory so we don't need to
04:10 - go finding it in different folders it's
04:12 - just there so we use the file name
04:15 - great now this is a JavaScript tutorial
04:18 - so we're going to be writing very
04:20 - limited HTML on purpose for this so the
04:23 - only HTML I'm really going to have is a
04:26 - div
04:28 - that's going to I'm going to give this
04:31 - the class of
04:34 - departures so that we can see it and we
04:39 - can style it up a little bit and I'm
04:40 - actually going to have let's just have a
04:42 - header why not like so
04:45 - and then I'm going to have a table now
04:48 - my table well I'm going to hard code the
04:51 - head of the table so if you haven't used
04:53 - tables before you have the table tags
04:57 - that take another tag called T head for
05:01 - the header and then T body these are
05:05 - optional I like to keep my header and my
05:07 - body of the table separate especially
05:10 - for this tutorial it will really help us
05:12 - out a lot
05:13 - this is because I'm going to give the
05:15 - tea body an ID
05:18 - of table body so that we can pick this
05:22 - out and then inject table rows into here
05:26 - using JavaScript so like I said I'm
05:29 - going to hard code the header the table
05:31 - header but this is all going to have
05:33 - injected JavaScript I'm going to show
05:36 - you how to do that it's really exciting
05:38 - let's do it
05:39 - so here is the Syntax for a uh table you
05:43 - have the table
05:45 - row
05:47 - so you have two table row tags like that
05:51 - and then the table row is going to well
05:55 - as this is the table uh header I'm going
05:57 - to use th but these will have TD so the
06:01 - first table header is going to say time
06:04 - and then I'm actually going to pick this
06:06 - out as well so I'm going to give this
06:07 - the idea of time because we're going to
06:09 - want to
06:11 - give this some custom styling later
06:14 - as well as other things this is going to
06:16 - be destination
06:18 - destination
06:21 - and then we have th
06:24 - I'm gonna have
06:26 - flight
06:28 - then we're also going to have the Gate
06:31 - of the flight
06:36 - and then it's also have the
06:40 - remarks so once again let's give all of
06:42 - these an ID so this will be Destination
06:46 - Unknown Known destination then we're
06:49 - gonna have ID of
06:52 - flights and I'm gonna have ID of
06:59 - Gates
07:01 - and this one's going to be ID
07:03 - of
07:04 - remarks okay so that's hard-coded and
07:08 - all of this we're going to be injecting
07:09 - with JavaScript so let's go ahead and do
07:11 - that by picking out this table body
07:14 - element by the ID so in here I'm going
07:17 - to use document
07:19 - get element by ID
07:23 - and look for the table body
07:26 - just
07:27 - like
07:28 - so
07:32 - okay so once we have that I'm gonna
07:34 - actually save it as const table body so
07:38 - that we can work with it easier in our
07:40 - JavaScript and just get rid of that
07:42 - great so the first thing first as we are
07:45 - just you know this is just for fun I'm
07:47 - just going to use an array of data for
07:49 - this so uh let flights I'm using let for
07:53 - a reason which will become more apparent
07:54 - later as this we will want to change
07:57 - this
07:58 - so each of my flights is essentially
08:00 - going to be represented by an object and
08:02 - that is going to have a time so here is
08:05 - my first
08:07 - flights going off at 8 11 A.M its
08:11 - destination is going to be uh a month
08:16 - the flight number is going to be
08:21 - ox
08:23 - 203
08:25 - the gate number is going to be a01
08:29 - and the remarks is going to be that it's
08:32 - on time okay so that is one I'm not
08:35 - gonna uh just sit here allow you to
08:39 - watch me type these out I have pre-made
08:41 - this
08:43 - so here are all my flights we have Oman
08:46 - we've got a flight to London that's been
08:48 - canceled Dubai Frankfurt and Tokyo okay
08:51 - so those are my flights I have or I will
08:54 - be putting the code in the description
08:56 - of this video if you want to take that
08:59 - or if you want to you know take this
09:01 - video and just pause it while you write
09:02 - this down it's totally up to you
09:04 - whichever version you prefer but yes I
09:07 - will be sharing the final code with you
09:09 - in the description below
09:11 - okay so those are all our flights this
09:13 - is what we're going to be using in order
09:15 - to create our flight widget
09:17 - so
09:19 - in order to populate our widget with
09:22 - this information I'm going to write a
09:24 - function called populate
09:26 - table
09:28 - just like so
09:30 - and we're going to be using uh
09:34 - for Loops to do this and I'm going to
09:37 - say that four so obviously this is
09:40 - called Flights I want to Loop for as
09:43 - many flights as we have so again this is
09:45 - one flight this is one flight we have
09:47 - one two three four five there's gonna
09:49 - look five times and we can do so with
09:51 - this syntax so flights is the name of
09:54 - our array const flight of flight so
09:58 - we've now defined that one of these is a
10:01 - flight
10:04 - and all I'm going to do is for each
10:06 - flight I'm going to use document to
10:09 - create an element and that element is
10:11 - going to be a table row so once we have
10:14 - done that let's actually save this as
10:16 - const table row
10:18 - great
10:19 - so as it stands for each of these we
10:22 - have created a table row so just like we
10:25 - see here a table Row the next thing we
10:28 - need to do is actually create a table or
10:30 - a TD
10:32 - to hold all of this information so for
10:35 - each one of these lines we need to
10:38 - create a TD element right
10:41 - so let's do that document
10:44 - create
10:47 - element
10:49 - TD and I'm going to save this as const
10:56 - so let's do that so we've done that and
10:59 - the next thing we need to do well
11:01 - actually let's put this in to our table
11:04 - body first
11:09 - so I'm going to get the table body and
11:10 - use append
11:14 - to append the table row
11:18 - into our table bodies so each time this
11:21 - Loop is going to go into the tail what
11:22 - do you put in a table row put in a table
11:24 - row do that five times
11:26 - okay so that is being put in however
11:29 - before we put that in we want to create
11:32 - the five uh TD elements so let's make
11:36 - another loop for this for this time
11:39 - we're going to look in here
11:42 - so we're going to look in the flight
11:45 - look in the flight because we're working
11:47 - with objects this time I'm going to get
11:50 - the flight details so we are saying
11:53 - let's define each of these lines or
11:56 - sorry to be more precise each of these
11:58 - as a flight detail
12:07 - okay so all I'm going to do now is use
12:11 - document create element
12:15 - TD and then const table cell that's what
12:20 - I'm going to call it so we're creating a
12:22 - table cell and now what we want to do
12:27 - is essentially well we can
12:31 - I'm just going to console log for you
12:32 - what this looks like console log the
12:35 - flight detail
12:42 - and of course we need to call this
12:44 - function
12:46 - so it's looking
12:48 - here I can just use this button because
12:51 - we are using webstorm or for those of
12:54 - you not using webstorm you just need to
12:56 - get the absolute pass I'm going to copy
12:58 - the path at the absolute path and then
13:00 - in the browser I'm just going to paste
13:01 - it in like so it's the same thing and
13:04 - now if we inspect the page you will see
13:06 - here's our body there's the div that we
13:09 - made called departures there's our
13:10 - hard-coded header and there's the body
13:12 - and we have injected five table rows as
13:16 - we said
13:17 - okay
13:18 - five table rows
13:22 - and the next thing we said we want to do
13:24 - is put in the table data right and that
13:27 - table data based on the flight details
13:29 - so as you will see here the flight
13:31 - details that are just the essentially
13:34 - the keys we want the values so flight
13:36 - gate remarks so if I was just to
13:40 - use the flight detail for example if I
13:42 - get the table
13:44 - sell in a text flight detail and then of
13:48 - course we need to actually get the table
13:50 - set and put it in the table row so table
13:54 - row append child or pen whichever one
13:57 - you want table cell it would just look
14:00 - like this we don't want that we actually
14:02 - want to get the
14:04 - value
14:06 - so we do so
14:08 - by doing
14:11 - by getting the objects and then opening
14:13 - up the array and finding it based on the
14:17 - flight detail so we're looking in here
14:19 - I'm going our destination and that will
14:21 - return the value
14:22 - just do this instead
14:24 - okay
14:25 - so that will give us the actual flight
14:28 - details
14:29 - cool
14:30 - you think this is pretty much
14:32 - well wrong because this is at the moment
14:35 - just all one word I don't want that I
14:37 - actually want to split out each letter
14:39 - so that we can flip each one and I want
14:41 - to put each one onto a div essentially
14:46 - so that's the next thing that we are
14:48 - going to do so to do this I essentially
14:50 - need to make an array of all the uh
14:54 - letters
14:55 - so
14:57 - instead of doing this here
14:59 - let's get the word and I'm going to use
15:03 - array from
15:07 - this essentially
15:10 - so we don't need this anymore so we're
15:12 - getting the word but obviously the words
15:14 - all like
15:15 - split up into an array it's an array of
15:18 - all the letters
15:20 - and now for each letter so again we're
15:22 - going to use four const
15:26 - a letter
15:30 - of word this time
15:34 - um
15:35 - we're going to create
15:38 - an element and it's going to be a
15:41 - div
15:42 - however
15:46 - yeah that's fine we're going to create a
15:48 - div and then let's save this as letter
15:51 - element
15:53 - so we've got our letter element
15:56 - and then
15:59 - we're going to just get the letter
16:00 - element
16:02 - uh classless ads we're going to add the
16:05 - class of flip and then the letter
16:07 - element text content is just going to be
16:10 - letter
16:11 - right so now if we look in here
16:16 - we of course need to put that in because
16:18 - we haven't
16:19 - done that yet we're gonna
16:22 - get the table
16:24 - sell append
16:27 - letter element
16:31 - go
16:32 - so it looks like this it looks a bit
16:34 - like Matrix so let's do some styling
16:37 - so what do or we want to do so let's go
16:42 - to Starship up
16:45 - now I'm going to use a Google font for
16:48 - this
16:50 - the font is uh condensed Ubuntu
16:54 - so I'm just going to get rid of that
16:55 - Ubuntu
16:58 - Ubuntu sorry Ubuntu kubuntu condensed
17:02 - and I'm just gonna select well there's
17:04 - actually one so it's easy I'm going to
17:06 - use this version to import it into the
17:08 - style sheet directly not into my HTML
17:10 - but you can of course choose to do
17:12 - whatever you wish
17:14 - now for all everything in here I'm going
17:16 - to choose the font family Ubuntu
17:20 - so this one and as a backup Sans serif
17:24 - so I'm just going to paste that in here
17:26 - like so I'm going to say that all the
17:28 - text I want to be like an off-white so
17:30 - I'm going to do that
17:32 - now and the font size is going to be
17:37 - font size sorry
17:39 - it's going to be 35 pixels
17:43 - okay and then the body of the whole app
17:45 - itself well I just want to Center
17:47 - everything so I'm going to use display
17:48 - Flex so I'm initializing the flexbox and
17:51 - then I'm justifying content Center so
17:54 - you can't use this line without
17:55 - initializing flexbox just be aware of
17:57 - that I'm going to give a height to the
18:00 - body because I then also want to align
18:02 - items Center and you can't do this
18:05 - without giving it a height so just keep
18:07 - that in mind and let's make the
18:08 - background color
18:10 - um
18:11 - I'm gonna do two five one one nine nine
18:16 - one two seven
18:18 - great and now the header we did have a
18:21 - header so I'm just going to give that
18:23 - some padding of 10 pixels and then we
18:26 - also named the div that holds everything
18:28 - we gave it the class so dot for class of
18:31 - Departures right so dot class of
18:35 - departures
18:38 - and I'm gonna give this a background
18:41 - color of RGB
18:44 - 666
18:46 - and let's round it off because I do like
18:48 - a border radius to make it seem
18:51 - kind of like softer I guess border
18:53 - radius
18:55 - 10 pixels and then padding 10 pixels and
18:59 - then we could add some box Shadow later
19:01 - but I'm not going to do that now
19:03 - let's also get the departures uh and say
19:06 - that any table that exists in the div
19:08 - with the class of Departures is going to
19:10 - have a background color of RGB
19:13 - 46 46
19:17 - 46. and I'm going to do text align
19:21 - left
19:23 - so let's see what this looks like so far
19:26 - Okay so we've done that we just need to
19:28 - go into the TD and make sure that
19:31 - everything's kind of aligned next to
19:33 - each other as well
19:35 - so I think that's because of the T
19:38 - or it could be done on the div
19:41 - okay so I'm gonna say that any
19:46 - TD element that lives in the table that
19:48 - also lives in the div with a class of
19:50 - Departures dot for class is going to
19:53 - have a border
19:57 - Solid 4 pixels RGB so this is each cell
20:01 - right
20:06 - and let's give it a background color
20:09 - of black
20:18 - actually
20:20 - we should be doing this on the
20:24 - divs themselves so on each of this div I
20:28 - want to make sure that each div is kind
20:30 - of like a black it has a little border
20:32 - Square
20:33 - so obviously that looks really weird at
20:35 - the moment and this should be black
20:36 - sorry
20:38 - let's make it black and let's make them
20:40 - all float left
20:45 - okay there we go
20:48 - so that's a lot better that is looking
20:51 - so so good I'm also going to actually
20:55 - assign this a height just in case you
20:58 - know there isn't something there I don't
21:00 - want it to kind of look weird so I'm
21:02 - just going to hard code that there and
21:03 - I'm also going to do the same for the
21:05 - actual uh whole cell that this lives in
21:08 - so a TD so like one of these TD
21:11 - cell right so let's hardcore that too so
21:15 - every TD
21:17 - is going to have a height of 50 pixels
21:20 - no matter what
21:23 - cool
21:24 - so great and now one last thing I'm
21:27 - going to do is actually pick out so in
21:29 - here I'm going to pick each of these out
21:31 - by its ID and then just space them out a
21:34 - little bit more because I think they're
21:35 - a little bit too loose together so the
21:37 - hash is for ID
21:40 - so ID of time is going to have a
21:43 - hard-coded width of 160 pixels no matter
21:46 - what
21:50 - and then
21:52 - uh destination
21:57 - and also going to have a hard-coded
22:00 - width
22:01 - of 260 pixels no matter what
22:04 - and then we also have
22:06 - the flight
22:09 - it's gonna have a width of two or five
22:11 - pixels
22:13 - and then the gates we which is going to
22:15 - have a width of 135 pixels
22:19 - and then I think we have one more
22:20 - remarks
22:22 - remarks
22:24 - just gonna have a width of 260 pixels
22:29 - okay
22:30 - so now that just looks a little bit
22:32 - better I believe
22:35 - okay so that's what it looks like I
22:37 - think it's just a little bit spaced out
22:39 - a little bit nicer
22:41 - wonderful
22:43 - so the next thing I want to do is just
22:45 - add a flip animation so we've already
22:48 - added the class of flip to each of these
22:50 - divs that hold a letter each of our word
22:54 - so now let's get the class dot for class
22:57 - of flip
22:59 - and I'm going to add an animation to it
23:02 - so the animation is going to last for
23:03 - 0.5 seconds it's going to be a linear
23:05 - animation
23:07 - linear and the animation we're going to
23:09 - call flipping so we have to call it this
23:12 - and now it means
23:16 - flipping we have to define it
23:18 - so I'm just going to say that a zero
23:20 - percent
23:21 - uh I'm going to transform it so that it
23:26 - rotates on the X
23:28 - oops
23:32 - rotate X
23:35 - it's going to start at zero degrees and
23:37 - then we're going to do
23:40 - 50 it's going to be
23:42 - 90 degrees on the X
23:48 - axis and then at 100 it's going to go
23:50 - back to zero
23:52 - great so that this means if I now
23:54 - refresh this
23:57 - the flipping however I want it to look
24:00 - more like you know it's going
24:03 - which means we need to put on a set
24:05 - timeout so I'm going to show you how to
24:08 - do that now
24:10 - so when we add the class of flip for
24:13 - each letter
24:15 - so for each of these I want this one to
24:17 - start first and then after a certain
24:18 - amount of time this one so basically
24:20 - create essentially let's see if I want
24:21 - this one to be at 100 milliseconds then
24:25 - this one to be at 200 milliseconds and
24:27 - this one to start at 300 and then sort
24:28 - of 400 milliseconds or just however many
24:31 - letters we have right we need a loop for
24:33 - this so in here I'm going to uh we'll
24:37 - put a set timeout to start a kind of
24:40 - loop in a way because this set time out
24:45 - well first off it's gonna go after 100
24:47 - milliseconds but then I'm going to
24:49 - multiply it by either 0 1 2 3 or 4
24:53 - whichever index of this we are on
24:55 - whichever index of the loop we are on
24:57 - and this is kind of tricky to do with
25:00 - the four const of but you can
25:05 - do it it's actually why I turn this into
25:07 - an array because you can't do this on an
25:10 - object
25:12 - uh if this is an array we can get the
25:14 - two uh the entries method and use it on
25:18 - here which means we can now add an index
25:20 - to this
25:22 - and we can access the index of the loop
25:26 - okay so that's how I did that that's a
25:30 - little bit of advanced JavaScript
25:31 - hacking I guess I don't know if it's a
25:33 - hack for you so now we've got a set
25:35 - timeout that will uh essentially execute
25:38 - on zero then 100 and then 200 300
25:41 - milliseconds and all I want to
25:43 - essentially do
25:45 - is add the class of flip after that
25:48 - amount of time and then add the letter
25:51 - and then put it in the cell
25:54 - okay so that's all I am doing I don't
25:57 - know why it's not like what's happening
25:58 - here oh comma
26:01 - great
26:03 - so now maybe let's actually put this all
26:06 - together so it's a little bit easier
26:08 - to read
26:10 - this is my populate
26:13 - table
26:14 - function
26:18 - so now it looks like this
26:22 - so this is looking
26:25 - great really I'm going to show you how
26:27 - to do one more thing just for fun and
26:29 - that is delete the first line and add a
26:33 - new random line with a time that is
26:36 - essentially going up and if it gets
26:37 - close to midnight then that time reset
26:39 - so it looks like it's going on forever
26:41 - and ever and ever without you having to
26:43 - do anything or add new data because
26:44 - we're going to use some under two arrays
26:47 - to either pick out the destination
26:51 - or the remark and this we're going to
26:53 - generate with random letters or numbers
26:55 - and this we're going to increment
26:57 - with time okay
27:00 - so let's do it so const destination like
27:04 - I said this is just for fun right
27:06 - what kind of destinations be we can have
27:09 - Tokyo we can have Frankfurt we can have
27:11 - Dubai we can have
27:14 - London
27:16 - let's also have Oman
27:20 - and let's have
27:23 - Beirut
27:25 - see the desk
27:27 - to Nations
27:30 - and then let's also have remarks so
27:32 - we'll only have three remarks possible
27:34 - uh on time delayed and
27:37 - canceled
27:39 - great and then let's start with the hour
27:42 - being
27:44 - uh 15.
27:46 - just because we're on the 15th hour here
27:48 - last
27:50 - okay so now let's write a function
27:53 - called
27:57 - let's make some space
28:03 - um
28:04 - function
28:06 - Shuffle Up Shuffle Up
28:08 - and what do we want to happen well we're
28:10 - going to get the flights array and we're
28:12 - going to get rid of the first one using
28:13 - the JavaScript method of shift so that
28:16 - will literally get rid of this first
28:19 - item in the array and then to add a new
28:22 - item we're going to get the flights
28:23 - array and we're going to use push I'm
28:25 - going to push in something to the end of
28:27 - the array so what we're going to push in
28:30 - is an object so hence I have this and
28:32 - the destination well let's actually have
28:34 - the same structure as we have here
28:38 - so here's our object and I'm going to
28:40 - push in a time which I'm going to write
28:43 - actually a function called generate
28:45 - time to do this destination well that's
28:49 - just going to be I'm going to go into
28:50 - destinations array I just wrote and pass
28:53 - through
28:56 - so destinations array we're going to
28:58 - open up our array we're going to pass
29:00 - through a random number based on the
29:02 - array length so we can do so easily I
29:05 - can
29:06 - get the destinations length
29:10 - and I can multiply it by math random
29:14 - and that will give me a random number
29:16 - anywhere from 0 to this destinations
29:19 - destiny
29:24 - anyway so just under the length but then
29:27 - I need to
29:29 - sorry yeah just under the so for example
29:32 - if there's nine things right it will
29:34 - come back with 8.9 but of course there's
29:37 - no such thing as index 8.9 we have to
29:40 - round it down to index 8 to get to the
29:42 - ninth item so that's why I need to round
29:44 - it down using math
29:47 - floor
29:51 - just like so the next thing we need to
29:53 - do is um
29:55 - what we can do actually is the same for
29:57 - remarks so go into the remarks and then
29:59 - thank you very much uh get the remarks
30:02 - length multiplied by math random and
30:04 - just pass through math flows around it
30:05 - down and that will return a remark from
30:08 - the remarks all right
30:11 - the next thing we need to do is actually
30:13 - write a function called
30:17 - generate
30:21 - Run Dom letter okay and this is going to
30:25 - generate a random letter for us that
30:26 - will help us write our flight and gate
30:28 - randomly so to generate a random letter
30:31 - I'm going to say well first we need the
30:33 - alphabet right we need to actually
30:34 - choose
30:36 - uh A B C D E F G H I J K L M N M
30:42 - okay so there we go thank you but I'm
30:44 - going to get rid of these we just want
30:45 - capitals
30:47 - so that's my array and I'm just going to
30:49 - return a letter randomly so I'm going to
30:51 - get alphabet
30:53 - uh Char at
30:56 - and then instead of at zero I'm going to
30:59 - pause through once again I'm going to
31:01 - get the alphabet
31:07 - length
31:12 - I'm going to multiply it by math
31:16 - random and I'm going to pass it through
31:19 - math flow so that it returns back a
31:22 - random character from the string okay
31:25 - but only based on you know however long
31:27 - this is you don't want to be picking out
31:28 - something here on the nothing exists
31:31 - right or throughout errors
31:33 - so that's how we generate a random
31:35 - letter which means we can now use it for
31:37 - here so for example Generate random
31:39 - letter and then we're going to generate
31:41 - a random
31:42 - number
31:46 - plus again generate a random number with
31:50 - this space in between so let's just add
31:52 - a space
31:54 - like so and of course we need to write
31:56 - the function generator random number so
31:59 - function Generate random
32:02 - number this time it's going to be
32:04 - exactly the same as we did up here so
32:07 - I'm literally going to copy this but
32:09 - this time we're going to choose zero one
32:12 - two three four five six seven eight nine
32:13 - which means that we're going to return
32:16 - and let's call this numbers we're going
32:19 - to return numbers
32:21 - based on the numbers
32:24 - string let
32:27 - great so that's how we would generate a
32:30 - random number so let's replace this so
32:33 - for a flight we're gonna generate a
32:35 - random letter plus another random letter
32:38 - plus maybe
32:40 - an empty string and then some numbers
32:43 - right so maybe let's have two numbers
32:45 - again it's up to you
32:47 - whatever you want
32:50 - wonderful and now one last one we're
32:52 - going to write a function to generate
32:55 - time this isn't so much random so I've
32:57 - left out the random because we're going
32:59 - to use the current time in order to
33:03 - uh or the current hour in order to make
33:05 - sure that the hours are increasing
33:07 - so I'm going to get the hour well first
33:09 - off I'm gonna use let's display our I'm
33:12 - going to assign the value of hour to it
33:14 - which we have assigned as 15 above here
33:18 - 15 just because we're on the 15th hour
33:21 - here
33:23 - so once we have that if
33:25 - the hour is smaller than 24
33:30 - well then that's fine we just want to
33:32 - increase one to the hour right
33:34 - and then if
33:36 - our
33:38 - is
33:42 - then suddenly larger than or equal to 24
33:44 - well then we want the hour to go back to
33:47 - being hour one
33:49 - and then we can show that the display
33:51 - hour is the hour
33:53 - right okay and if
33:57 - our is smaller than
34:01 - well the display hour is gonna we're
34:03 - gonna add a zero
34:05 - to it and the hour because we don't want
34:08 - to be one which wouldn't be zero one or
34:10 - zero two zero or zero nine so that is
34:12 - some logic that we have to do before we
34:15 - can return the display hour
34:18 - plus the string of this and then we can
34:21 - just use Generate random number plus
34:23 - Generate random number uh we don't need
34:25 - this however the second
34:27 - number can only be Max up to
34:31 - 5 right
34:34 - so maybe if we pass through a Max number
34:36 - into the
34:37 - generate number functions So Max number
34:41 - we can say that if a Max number exists
34:50 - well then
34:52 - I'm going to get the numbers I'm going
34:54 - to slice 0 by Max number and make a new
34:59 - array so constant new numbers
35:02 - and that's what I want to
35:05 - return but only if there's a Max number
35:08 - to return
35:09 - this by the new numbers
35:13 - length
35:15 - okay
35:17 - so this is looking good and the shuffle
35:19 - up how often do we want this to happen
35:21 - so we want to get rid of the first one
35:23 - we want to add something else to the
35:25 - array which is going to be our new
35:28 - object
35:29 - um and then we want to essentially
35:32 - redraw the table but the table body we
35:35 - want to clear it right if anything
35:36 - that's in there at the moment otherwise
35:38 - we'll just keep adding more items to it
35:40 - so I'm going to go text content nothing
35:42 - and then I'm going to call it populate
35:45 - table function again
35:47 - so now let's put this on a set interval
35:49 - because I want the shuffle ARP to run
35:54 - I'm going to shuffle up to run every
35:58 - 200 sorry 2 000 milliseconds or every
36:01 - two seconds so let's check it out
36:04 - so there's one two and one should
36:06 - disappear
36:08 - uh we're getting some errors
36:12 - Max number oops
36:15 - this should be new numbers sorry
36:18 - new numbers because we just made a new
36:21 - array
36:24 - okay so and mine should disappear
36:26 - London appears beirut's been generated
36:29 - frankfurt's been generated London's been
36:31 - generated and you will see the time is
36:34 - going up by the hour let's just check it
36:36 - goes up to well and just as long as it
36:38 - stays under 24 we're fine
36:42 - okay so it's actually stopping at 23
36:47 - I mean I'm cool with that maybe that
36:49 - makes our lives easier and this number's
36:51 - not going above five either
36:55 - I wonder if it can be five or if we need
36:57 - to change that because five should
36:59 - technically be allowed I don't see a
37:01 - problem with that we've had an error
37:04 - here already
37:09 - okay
37:11 - so this is looking good however
37:15 - we just need to maybe make this smaller
37:17 - than and then Max
37:20 - number
37:24 - slice it at Max number plus one just so
37:27 - it includes the five
37:30 - and let's check it out
37:32 - so now
37:34 - should see it
37:38 - you should see fives showing up in here
37:42 - five there's a five and it should go up
37:44 - to 23 but not go over oh no
37:49 - this is going above 24. okay it's
37:52 - smaller than or equal to
37:54 - equal to 24.
37:56 - and great so it's resetting let's just
37:58 - leave it as this I'm happy with that
38:00 - again this is just for fun remember so I
38:03 - hope you're enjoying this you can have
38:05 - have your very own I'm just going to
38:07 - slow this down a little bit as it is
38:09 - very fast you can have your own
38:11 - departures table just like so okay
38:16 - great so I hope you've enjoyed this
38:19 - tutorial
38:20 - um please feel free to mess around with
38:23 - this as much as you like uh take it it's
38:26 - yours and if you want to see how to
38:28 - incorporate actual data not just made up
38:30 - data that we're generating randomly then
38:32 - please do watch my tutorial on this in
38:34 - the description below
38:36 - thanks very much and I'll see you on my
38:38 - channel
38:44 - okay so let's do this let's start off on
38:48 - the rapid API Hub where I'm gonna get my
38:50 - flight API so please go ahead and sign
38:54 - up as I've already signed up I'm going
38:57 - to log in and I can do so with my Google
39:00 - account so that's what I'm just going to
39:02 - do I'm just going to go ahead and log in
39:04 - with Google of course you don't have to
39:06 - that is just my choice
39:08 - now the first thing you're gonna have to
39:11 - do is do a little bit of configuration
39:13 - which I've done but I'm gonna walk you
39:16 - through it in order to use the API and
39:19 - that API that we're going to use there's
39:21 - actually loads of flight apis there's in
39:24 - fact just so many apis in general but
39:27 - the one that we're going to use is of a
39:29 - specific airport we can use we could do
39:33 - Madrid's airport to find out what kind
39:35 - of arrivals and destinations they have
39:37 - or we can do Toronto so it's totally up
39:41 - to you for this tutorial though I am
39:43 - going to go with Toronto's Airport and
39:46 - this is cool like with every API on
39:49 - rapid API I'm just going to show you it
39:52 - here
39:53 - you get a little dashboard like this and
39:57 - you get the code
39:58 - so you get the code required in order to
40:02 - for example here I can search an
40:04 - endpoint we're going to want to get the
40:07 - departures by get all departures so if I
40:11 - click on get all departures from Pearson
40:13 - Airport this is the code that I would
40:15 - need to put in my node.js backend in
40:18 - order to get the departure details and
40:23 - if we want to see the example response
40:25 - without signing up we could just see
40:27 - what this will come back as you can see
40:28 - it comes back as an array of objects and
40:31 - each object represents a departure okay
40:35 - with the terminal the gate the time is
40:38 - departing the airline flight number
40:40 - destination and status as well so this
40:44 - is what it would look like if I ran this
40:46 - code and the best thing about this is
40:49 - that you know we can just use one API
40:52 - key one API key to control them all in
40:55 - the rapid API Hub so that is pretty cool
40:58 - oh so I'm going to show you how to
41:02 - essentially subscribe to this you're
41:05 - going to have to put in some details
41:07 - like your billing details and so on now
41:09 - most of these apis are free some will
41:12 - charge you but this will only charge you
41:13 - charges you if you go over 5 000
41:15 - requests per day I think which we're not
41:18 - going to go over don't worry so just go
41:20 - ahead and under my apps
41:24 - you'll go to the developer dashboard and
41:26 - here is where you're going to have to
41:28 - put in your billing information so under
41:31 - billing information you'll see I've
41:32 - already done this please go ahead and
41:34 - add that here add your billing
41:35 - information save it and then we can go
41:40 - back to the API of course you can do a
41:42 - bunch of other things in here too you
41:44 - can also make your own API but we're not
41:47 - going to do that once you put in your
41:48 - billing information please go back to
41:51 - the Toronto Pearson API
41:55 - and we're just going to test the
41:57 - endpoint so as we said the endpoint we
41:59 - want is to get all departures and then
42:01 - this is the code we're going to need
42:02 - with one API that controls them all so
42:05 - that is my X rapid API key
42:08 - I'm going to test the endpoint
42:11 - uh and
42:14 - great
42:15 - so that is what we're getting back these
42:17 - are the current departures at Pearson
42:21 - Airport which is pretty cool now I'm
42:24 - just going to actually take this code
42:25 - snippet there is of course all these
42:27 - other languages but we are using node.js
42:29 - for this tutorial so I'm just going to
42:31 - copy this so first off we need to
42:34 - actually create a project
42:36 - so let's go ahead and do that what I'm
42:39 - going to do is get up my webstorm
42:42 - please feel free to use whatever code
42:44 - edits you wish webstorm is just my
42:46 - choice of code editor or technically IDE
42:49 - that I'm going to use for this tutorial
42:53 - now in here what I'm going to do is just
42:56 - create a new project so this is going to
42:59 - have let's have the front end just in
43:01 - plain or the vanilla JavaScript because
43:03 - I have made this project before in plain
43:05 - old vanilla JavaScript and in this one
43:07 - I'm going to show you how to essentially
43:08 - make a backend for it in order to get
43:11 - data from Rapid API so I'm going to go
43:14 - ahead and create a new project let's
43:16 - call this
43:18 - flight
43:19 - with jet
43:22 - live
43:25 - and let's just go ahead and click create
43:26 - and that will be created in my webstorm
43:29 - directory okay where I store all my
43:31 - other projects please feel free to
43:33 - create a directory whatever directory
43:35 - you wish
43:36 - so once that is done we're just gonna
43:38 - have to create some new files so we know
43:40 - that we're going to have an HTML file
43:42 - I'm going to call this index.html
43:45 - so there we go we also need a
43:48 - style sheet I'm going to call this
43:50 - Styles and I'm going to you can either
43:52 - write CSS but in webstorm I can just say
43:55 - that this is CSS file and that extension
43:57 - will be added for me and finally we also
43:59 - need some JavaScript so let's go ahead
44:01 - and put in a Javascript file so we've
44:03 - got an index HTML style sheet and app.js
44:07 - file
44:09 - great now let's go ahead and put in some
44:12 - code into the index HTML page to get
44:16 - started so let's just go ahead and put
44:18 - in the title for this fast
44:23 - so there we go flight widget so we're
44:26 - going to have to do a few things here
44:28 - we're going to link this up so we're
44:30 - going to use the link tag and we're just
44:32 - going to put this means a little bigger
44:34 - so everyone can see
44:38 - Style
44:40 - sheet and then we are going to add the
44:42 - href to the Styles CSS file okay it's in
44:46 - the root so that's all we have to do
44:48 - next let's also put the script tag in so
44:50 - we're going to put a script tag in so
44:52 - that we can essentially connect this
44:54 - app.js file to here so we're going to
44:58 - read everything above the body blue and
45:00 - then we're going to read this which will
45:02 - take us to the app.js file and then read
45:04 - all the JavaScript
45:06 - so the first thing we're going to do is
45:08 - actually create our table this can be
45:09 - static I'm not going to be changing
45:11 - anything with JavaScript here which is
45:12 - why I'm just going to make it in the
45:16 - HTML file
45:18 - it's actually just
45:20 - style this out a little bit more so just
45:23 - have the correct indentations
45:28 - so
45:32 - yep
45:35 - okay so now in this div this div I'm
45:39 - just going to give this a class of
45:40 - Departures as it's going to hold all our
45:43 - departures and we're going to make a
45:44 - table now so let's use table
45:48 - and then in our table well of course
45:50 - we're going to have a table head so this
45:52 - is going to give semantic meaning to our
45:55 - browsers that this is the table head and
45:58 - then this is the table body and in the
46:00 - table head I'm going to well yes we can
46:05 - actually hard code this it's the table
46:06 - body that we're going to want to insert
46:09 - stuff into with JavaScript so how do we
46:14 - make a header get well we need a row so
46:16 - let's create a row and in the row we're
46:18 - going to have table
46:20 - header elements and we're going to have
46:23 - to have
46:25 - uh five for the time destination flight
46:28 - gate and remarks but then also one spare
46:31 - one because I want to put in like a
46:32 - little icon on the left
46:35 - so of a little airplane so we're gonna
46:37 - have to leave space for that so let's
46:39 - make five sorry six in total that is
46:42 - one two three four five six so the first
46:45 - one is going to be blank this one is
46:46 - going to be time this one is going to be
46:48 - destination flight
46:53 - and then we have the gates and then we
46:55 - also have the remarks okay
46:59 - so there we go and perhaps let's give
47:00 - these an ID so we can pick them out
47:02 - later in our styling okay oops that you
47:07 - should be ID
47:08 - time this one is ID
47:11 - destination
47:14 - this one's gonna be ID of
47:16 - flight
47:18 - and then of course we have the well you
47:20 - guessed it gauge and the remarks for
47:23 - saying like if it's delayed or canceled
47:25 - and and so on so that's our header and
47:28 - like we said we're going to inject stuff
47:30 - into the body using JavaScript so we
47:32 - could just pick out the t-body tag or
47:34 - you know you really should pick it up by
47:36 - the ID so I'm going to give this the ID
47:38 - of table body
47:40 - wonderful and then also let's give this
47:42 - a header so we're going to use the H1
47:47 - tag for this and let's put departures so
47:51 - heading sorry I've got a heading
47:54 - there we go so at the moment if we open
47:57 - this up so I can use this shortcut right
47:59 - here to open it up for me thank you so
48:02 - much webstorm that's what you'll see and
48:05 - if we inspect the page
48:07 - get about console logs
48:12 - and if we inspect the page
48:15 - maybe just make this
48:17 - smaller
48:20 - you will see that in the body we have a
48:22 - div we made with the classic departures
48:24 - you've got H1 element and then we've got
48:26 - a table with the table head and the
48:28 - table body so basically everything we've
48:30 - just added great now before we get to
48:33 - the JavaScript just going to start this
48:35 - up do some very basic styling so that we
48:37 - have a little bit uh more of a visual to
48:41 - work with essentially
48:43 - so let's carry on so if you do know how
48:45 - to open that and you're using vs code
48:47 - perhaps all you'd have to do is right
48:49 - click on here copy the path
48:53 - so the absolute path and then in here
48:55 - you just paste that okay so I could do
48:58 - that in word sum too
49:00 - great
49:02 - so now let's do some styling right let's
49:06 - do it here's my style sheet
49:12 - and the first thing that I'm going to do
49:14 - is just say that everything I'm going to
49:16 - give this the font family
49:19 - of uh Ubuntu which we're gonna have to
49:23 - get from the Google fonts
49:26 - uh webpage Ubuntu something that's a
49:30 - little bit bigger
49:33 - condensed and then as a backup let's
49:36 - just have Suns serif why not so now if I
49:40 - go to
49:43 - Google fonts
49:46 - to search for Ubuntu
49:49 - condense that's the one we want let's go
49:52 - ahead and add it so I'm gonna actually
49:53 - just pick
49:54 - how many of these
49:57 - okay let's put the 400
50:00 - oh there's only 400. great so we can do
50:03 - it two ways we can put it in our HTML
50:05 - but I'm going to choose to put it
50:08 - in our CSS using this so using import so
50:11 - just go ahead and copy that
50:13 - and then back in webstorm
50:18 - just gonna paste it in like so I'm just
50:20 - going to minimize this you can see a
50:22 - little better
50:23 - great
50:24 - so this is looking good and if I now
50:29 - open this up
50:31 - in here and refresh that font will be
50:34 - applied
50:35 - so now let's well let's carry on styling
50:38 - so what else I'm gonna do so we want
50:41 - every the font to be applied to
50:42 - everything and the dock and we want the
50:45 - font to be white so I can just write
50:49 - white or let's make it like an off-white
50:52 - because white is a bit too jarring for
50:54 - me
50:56 - and let's make the font
50:58 - size
51:00 - 35 pixels okay so that's going to be
51:03 - applies everything now and now in the
51:06 - body
51:07 - well the body I just want to Center the
51:10 - actual div with the closet display so
51:13 - I'm going to give the whole body display
51:14 - Flex justify content
51:18 - Center
51:19 - so that will Center it uh in the middle
51:22 - of the page but you also want to center
51:24 - it from the top to bottom so to do this
51:26 - I'm actually gonna have to assign a
51:27 - height otherwise that will not work I'm
51:29 - just going to give it the uh height of
51:32 - my viewport and then we use align items
51:35 - Center okay so without giving it a
51:37 - height this would not work and this
51:40 - would not work and this would not work
51:41 - without a display Flex got it good so
51:45 - you need all for to Center something in
51:47 - the pitch
51:48 - and now let's also give this a
51:49 - background color
51:51 - I'm going to go with RGB this is a color
51:54 - that I picked out previously from the
51:56 - previous tutorial where we just did this
51:57 - in JavaScript with no API
52:00 - great so now if we once again just have
52:03 - a look
52:05 - and refresh the page amazing so you will
52:08 - now see that this the departures
52:12 - the div with the class departures it's
52:14 - centered in the page and the styling's
52:16 - been applied as well
52:18 - great so let's carry on so we've done
52:22 - the body now let's actually also just
52:24 - give some padding to the H1 element so
52:27 - I'm just going to do padding 10.
52:30 - pixels just like so and let's grab the
52:34 - div with the class of departures so dot
52:37 - is for class name and I'm just going to
52:39 - give it a background color that's a bit
52:40 - darker right because we're essentially
52:42 - trying to create something that looks
52:44 - like a board visually so that's what I'm
52:46 - doing and then it's just round off the
52:48 - corners using border radius I'm going to
52:51 - use 10 pixels for that and also give it
52:53 - a padding to space everything out from
52:56 - the everything that we're going to be
52:57 - putting inside of this of this
53:00 - great so there we go and now if I want
53:04 - to say that the table that lives inside
53:07 - the departures the devil class
53:09 - departures I mean it's unlikely we're
53:12 - going to put another table in on the uh
53:15 - document but you know just if if you
53:17 - didn't know how to do that I'm picking
53:19 - out the element of table that lives
53:22 - inside the element with the classes
53:24 - departures okay and only this site and
53:26 - this side will only be applied to that
53:28 - element that lives inside the div with
53:30 - the class of departures
53:32 - so
53:33 - let's give this a background color of a
53:35 - little bit lighter now I'm going to go
53:37 - 46 46
53:40 - 46.
53:42 - and let's make sure that all the text is
53:44 - aligned left because at the moment it's
53:46 - centered so if we have a look at what
53:49 - this looks like now
53:52 - there we go
53:54 - so our departures do our div of the
53:56 - class of Departures this color and then
53:58 - our table
53:59 - is this kind of lighter gray
54:02 - cool let's
54:06 - carry on
54:08 - what else do we need to style well I'm
54:12 - actually going to
54:17 - say actually this should be fine for now
54:20 - let's carry on so in my app now I said
54:24 - that I want to start injecting stuff
54:26 - into my uh my my table essentially from
54:32 - JavaScript so that's what I'm gonna do
54:35 - so once again we're going to use this
54:37 - API so again these are example responses
54:41 - we're going to get the destination the
54:43 - status the departing time the gate I'm
54:46 - essentially going to feed it into here
54:48 - okay as table rows okay I'm also going
54:52 - to make them do this cool flipping
54:53 - animation if you saw my previous video
54:55 - on this where we make this in pure
54:57 - JavaScript
54:59 - so let's do it to do this fast I'm just
55:03 - going to build a mini backend
55:06 - so in my file structure you'll see I
55:08 - just have three files however I think it
55:10 - might be nice to now put these three
55:12 - files in a folder called client so we
55:16 - can separate out from the back end I'm
55:18 - just going to drag these three in here
55:20 - like so
55:21 - so they are all now in the folder called
55:24 - client and we're going to make another
55:26 - folder
55:28 - or we don't have to you can make another
55:29 - folder for the server but as we're just
55:32 - having one file I'm not going to I'm
55:34 - just going to call the file server.js
55:36 - okay so that shouldn't be in here that
55:39 - should be on the same level as
55:42 - the folder client
55:44 - so there we go server client and it
55:46 - lives in the flight widget live project
55:48 - great
55:49 - so here is where we're going to be
55:51 - writing our backend however
55:53 - we need to do a few things
55:56 - you need to have node installed okay
55:59 - because we're going to have to use node
56:01 - and we're also going to have to use npm
56:03 - so if you haven't please go ahead and
56:05 - visit here
56:07 - so install node
56:11 - and just select which one you need for
56:13 - me it will be the Mac OS installer so
56:16 - you're going to have to do that and then
56:18 - also we're going to have to install npm
56:20 - so that we can use it and store packages
56:23 - okay
56:24 - so here we go npmg install npm this is
56:28 - for installing it globally
56:30 - okay so just go ahead and do that I'm
56:33 - going to show you how
56:36 - so you just do that I mean that's it or
56:40 - if you're using uh vs code you might
56:42 - want to get your terminal up your
56:45 - terminal looks like
56:47 - this
56:49 - okay and it doesn't matter where you do
56:51 - it because it's Global so just go ahead
56:53 - and do that
56:54 - great
56:56 - now that we've done that once again I'm
56:58 - just going to show you how to do this uh
57:00 - in your terminals
57:01 - so you would go into wherever you stored
57:04 - this project so for me it's with some
57:06 - projects and then I go into flight
57:09 - widget
57:13 - live
57:15 - and then you're gonna have to do npm in
57:17 - it okay so run that I'm not going to do
57:20 - it here I'm actually going to do it in
57:21 - here so I would just do npm in it making
57:24 - sure that I'm in the flight widget live
57:26 - and hit enter
57:28 - and then I'm just going to go through
57:29 - these and hit enter okay the package
57:31 - name correct version one correct
57:33 - description I'm going to need blank
57:34 - entry point blank or savage.js sorry it
57:37 - says come on blank everything is just
57:39 - the default and then is this okay yes
57:41 - and that will generate a package Json
57:44 - file for me you're gonna watch it happen
57:47 - I'm gonna wait for that to happen
57:51 - and there we go
57:53 - so you'll see this file show up and this
57:57 - is what's in it we're gonna have to add
57:59 - some packages in here as well as well as
58:02 - a script to start our back end but first
58:04 - off let's go ahead and install the
58:05 - packages that we need they're Express
58:07 - that will help us get uh roots
58:11 - uh with our routing so to get
58:14 - uh certain things as well as listen out
58:17 - to the port we're also going to need
58:19 - axios in order to make the requests
58:21 - we're going to need cores we're going to
58:23 - need dot EnV in order to hide our uh
58:27 - rapid API Keys safely so we don't upload
58:30 - it onto GitHub or anything like that and
58:33 - we're also going to need nodemon to
58:34 - listen out to changes on the backend so
58:37 - please go ahead and install that using
58:38 - npmi or npm install and hit enter
58:42 - okay
58:44 - and that should populate in here with
58:46 - the versions that we're using for this
58:48 - tutorial so if you're watching this in
58:50 - the future something doesn't work it
58:51 - could be down to the version you are
58:53 - using so just remember
58:55 - that okay so there we are that's when
58:58 - populated with the versions you know you
59:00 - can just change these if you need to and
59:03 - then just run npmi again after saving
59:05 - that file but of course I'm not going to
59:07 - do that because this is the versions I'm
59:09 - using and 0.6 probably doesn't exist yet
59:11 - right
59:12 - cool so those are the packages now let's
59:15 - write the code for our server
59:18 - so the first thing that we're going to
59:20 - actually need to get is the packages but
59:24 - first off no sorry we need to define the
59:25 - port so I'm going to define the port as
59:27 - running on Port 8000 on my local
59:29 - computer
59:32 - now let's start off actually with
59:34 - getting the
59:36 - code that we need right so this is the
59:39 - code we need in order to get this
59:41 - response so again I'm literally just
59:42 - going to copy all of this
59:44 - I'm going to take it looks super easy
59:47 - I'm just going to paste it in here okay
59:51 - so that is the code that we are going to
59:53 - need in order to get the flight data
59:57 - from Pearson's Airport
59:59 - so we're gonna have to wrap this in a uh
60:03 - get root
60:05 - so to do that let's use express or const
60:09 - Express equals require the package
60:11 - express
60:17 - okay and once we have that we actually
60:20 - need to call the Express to release all
60:22 - of its wonderfulness and save it
60:24 - something else I'm going to choose to
60:25 - save it as app so we can actually use it
60:28 - uh an app use will also allow us if I do
60:32 - app use allow us to use course or not
60:35 - block by course we're going to call
60:36 - cores but of course we also need to
60:38 - install cause so require
60:43 - s
60:44 - if you don't know much about cores I do
60:46 - go into it in a few tutorials so I'm not
60:48 - going to go into it now but just know
60:49 - that if you get a message saying block I
60:52 - call us it's probably because you
60:53 - haven't done this
60:55 - and then of course we need the
60:59 - dot in V package in order to hide our
61:05 - rapid API key
61:07 - great
61:09 - I think that's it uh axios course we'll
61:12 - just I'm just going to move this up here
61:13 - actually
61:14 - and add default
61:16 - great so
61:20 - yeah wonderful let's carry on now just
61:23 - to check everything's running I'm going
61:24 - to do app Listen to listen out for
61:27 - changes on to listen out to the port
61:31 - so I'm just going to pass through the
61:34 - port number and then write console log
61:38 - running on
61:41 - port
61:42 - and then the port number
61:45 - okay
61:46 - I'm actually going to put that at the
61:48 - bottom
61:50 - and now
61:52 - we're going to wrap this in an app get
61:55 - so this is something this is Express
61:57 - routing and if we visit localhost 8000
62:01 - forward slash flight so we're defining
62:04 - this ourselves we could have just left
62:06 - it as you know localhost 8000 if we
62:07 - wanted to but I think it's more readable
62:09 - to give it an actual path and then we
62:12 - get the request and response
62:15 - and then I'm literally is going to take
62:17 - all of this all of that code that we
62:20 - copied from Rapid API and just put in
62:22 - here
62:24 - okay so that is what it looks like
62:28 - now let's also make a DOT EnV file on
62:32 - the same level as the server so just in
62:34 - the root of my project a file dot EnV so
62:38 - that we can hide
62:41 - our rapid API keys I'm just going to go
62:43 - ahead and Define it here rapid API
62:47 - key
62:52 - and then I'm just going to grab this
62:55 - paste in here we don't need to say it's
62:57 - a string that's kind of implied and now
63:00 - that means I can use process e and V and
63:03 - go into the EnV file so and then get the
63:07 - rapid API key okay so I'm just going
63:10 - into that file
63:11 - great
63:13 - so we're console logging the response
63:15 - data we also want to actually show it in
63:17 - the browser so to do this I'm going to
63:19 - do res Json and just pass through the
63:22 - response data as well
63:25 - wonderful
63:27 - now let's write a script so we can run
63:29 - this right so I'm going to say that if
63:33 - we write npm run
63:35 - start oh
63:37 - I feel like that's already been added
63:39 - for us
63:41 - did we do that I don't think so so
63:43 - that's quite cool however I'm going to
63:45 - do node and one so it continuously
63:47 - listens out to changes okay so note of
63:50 - on node will just listen out once
63:52 - because no demand will continuously
63:54 - listen after changes on the server.js
63:57 - file
63:59 - great
64:00 - so now like I said if I run npm run
64:04 - start
64:07 - this should it's running on Port 8000
64:10 - this also means that if I now visit
64:16 - localhost 8000 forward slash flights
64:20 - you will see all the Destiny or the
64:22 - departure flights for Pearson Airport
64:24 - and there's a lot so this is looking
64:27 - cool I'm just gonna say I want the first
64:30 - six however and we could do this on the
64:32 - server and it's probably better to do on
64:34 - the server right so
64:37 - I'm just going to dot slice the first
64:44 - I think that's fine
64:46 - great so that's our super simple
64:49 - backhand look we can even like just put
64:51 - it all in might even all fit
64:54 - nearly it nearly all fits uh that's our
64:58 - super simple back end okay now we need
65:00 - to get this data and bring it to the
65:03 - front end so I'm going to show you how
65:05 - to do that
65:07 - so
65:08 - back to here
65:10 - now
65:14 - the first thing I'm going to do is just
65:16 - pick out this element by the ID so we
65:20 - can start injecting the flights into it
65:23 - so I'm going to Define it as table
65:26 - body
65:28 - and I'm going to use document get
65:30 - elements not animations get element by
65:34 - Adi table body
65:37 - and now I'm actually going to write
65:39 - let's just do it in a function because I
65:42 - think it makes it more readable
65:46 - um
65:47 - you can write function I'm going to use
65:48 - a function expression though
65:52 - so there's my get flight and I'm going
65:54 - to use fetch to fetch literally this
65:59 - URLs of course our backend needs to be
66:01 - running for this to work we're going to
66:02 - get this
66:04 - and we're just going to fetch all of
66:07 - that Json
66:09 - so this means we need to do some
66:10 - chaining right so once we once that
66:12 - promise returns then we're going to get
66:14 - the response
66:17 - response from response Jason
66:22 - and then whatever comes back as the Json
66:24 - we're going to save this as I'm going to
66:26 - save as flights I'm choosing to call it
66:27 - flights and I'm actually going to for
66:31 - now just console log flights so we can
66:33 - see what's going on but we're going to
66:34 - pass this into a function right because
66:36 - we need these to resolve before this
66:38 - happens hence I'm going to pass it into
66:39 - a function but I'll show you that later
66:41 - on and then we're going to catch any
66:43 - errors so catch
66:45 - error
66:48 - console log
66:51 - cool so now if I of course call this
66:55 - and then we go in here
66:59 - to our flight widget refresh
67:04 - and we move this didn't we we move this
67:06 - into
67:08 - client
67:11 - there we go so if I look in the console
67:13 - log now
67:15 - we have to wait a bit ta-da okay so that
67:19 - took a while and that could be
67:21 - problematic so this is again I'll show
67:24 - you this later but it's problematic but
67:27 - we'll get over this right I'm going to
67:28 - show you how to uh essentially make
67:31 - stuff happen once this is resolved and
67:33 - once we get the data back so this is
67:36 - what we are working with okay of course
67:38 - the object doesn't really come back
67:40 - in the exact same shape as we would
67:43 - ideally like like we did for the plain
67:46 - JavaScript tutorial where we made our
67:47 - own object but don't worry we can use
67:49 - this data to create our own objects too
67:52 - in the format that we want but
67:54 - essentially we've got all the
67:55 - information here so this is looking
67:57 - great
67:58 - so what I'm going to do now is get all
67:59 - of this data and pass it into a function
68:02 - to populate the table
68:05 - okay because once again if we just for
68:07 - example if I just wrote a function here
68:09 - populate table then we wouldn't have the
68:12 - data and it would read the function
68:13 - populate table without the data okay and
68:16 - then nothing would work
68:18 - so
68:19 - again I'm just going to write if I um
68:23 - function expression for this you can
68:25 - just write function if you wish but this
68:28 - is what I have chosen to do so here we
68:30 - go here's my function populate table
68:34 - and what I'm going to do is I'm just
68:37 - going to pass through the flights into
68:40 - it which means that here once this is
68:43 - all this is resolved then I want to pass
68:46 - flights into populate table and call
68:48 - this function
68:50 - okay so let's get rid of this console
68:52 - log
68:53 - cool
68:55 - and what do I want to happen well for
68:58 - each flight so for each flight I'm gonna
69:01 - say that each object I just named flight
69:04 - of flights
69:07 - so once again I'm just going to show you
69:10 - because we have an array right it's an
69:13 - array of objects so I've essentially
69:14 - called each object a flight now so each
69:18 - object so the the whole array is flights
69:21 - each object is called flight
69:25 - so for each object in the array
69:28 - essentially this is saying
69:30 - what do I want to do well I want to
69:33 - create a document create element and I
69:36 - want to create a table row
69:40 - so let's save this as table right
69:43 - and what else do I want to do I actually
69:45 - want to create a table icon too so as I
69:48 - said I want a little icon of a um
69:52 - airplane
69:53 - so create element and I'm just going to
69:57 - create I don't want table data because
69:59 - each row takes table datas yeah okay so
70:03 - once again
70:06 - just going to show you
70:09 - here's our table here's a table head
70:12 - we're going to create a table row
70:14 - and then we're going to create table
70:17 - data here is called th but for the body
70:19 - we're going to use TG so we're going to
70:21 - have to create one two three four five
70:23 - six
70:24 - table datas
70:26 - cool
70:29 - so I'm going to create a table icon for
70:31 - the first one uh and so table icon
70:36 - text content I'm going to give it this
70:38 - like I said the airplane
70:43 - just like that
70:44 - and now we're going to essentially get
70:47 - the table icon and put it in the rows
70:49 - we're going to get the table row and use
70:51 - append
70:53 - table icon okay so we'll put the icon in
70:55 - the table row and now we also need to
70:57 - put the table Row in the table body so
71:00 - table body append
71:03 - table row
71:08 - so let's refresh that
71:11 - and wait for it to resolve
71:14 - so there's our first uh row column sorry
71:18 - and we've put in a little airplane in it
71:22 - yay
71:24 - cool
71:26 - however I don't know why there's only
71:28 - one
71:30 - there should have been
71:33 - a lot more
71:34 - let's check it out
71:37 - so I'm just going to console
71:41 - log
71:42 - flights here to see what's going on
71:53 - okay
71:54 - so yes we are getting
71:57 - six items
72:00 - put only one table row is being created
72:02 - why is that
72:06 - it's because we didn't put this
72:08 - I need to wrap that
72:11 - or in here it needs to be in the loop so
72:15 - now
72:18 - there should be
72:21 - more of the little icons there we go so
72:24 - we get six icons now okay because We're
72:25 - looping over for every flight or every
72:29 - item that exists in our array
72:31 - great
72:32 - so now that's working let's continue so
72:36 - now for each flight so for each I guess
72:39 - um
72:40 - object
72:42 - before we put this all in the table row
72:45 - so up here I'm going to redefine my
72:47 - object so I'm going to redefine the
72:49 - flight details so I'm literally going to
72:52 - make an object that is going to take the
72:53 - time
72:57 - a destination
73:01 - the flight
73:04 - the gate
73:07 - and then the remarks
73:10 - okay so essentially we're just kind of
73:12 - trying to get something for these five
73:15 - columns okay and from our data where we
73:20 - can see
73:21 - that we can get the flight
73:24 - departing
73:30 - so the we've called it flight so the
73:32 - object's departing let's use that
73:40 - would probably also slice it down right
73:42 - just so you get the first five
73:44 - characters and then the destination
73:47 - that's just destination the flight is
73:49 - the flight number and the gate is gate
73:52 - and remarks's Status so let's see if we
73:55 - can remember that
73:57 - flight departing again because we've
74:00 - called this object flight up here
74:03 - flight
74:06 - oh my gosh what was this flight details
74:09 - it's like number wasn't it flight number
74:13 - this was flight gate
74:18 - and this was flight status
74:22 - and then we said we wanted to party and
74:24 - we wanted to just want to get the first
74:25 - five characters
74:27 - so there we go
74:31 - and let's make this to uppercase
74:35 - and this also to
74:38 - uppercases or capital and this was in an
74:42 - array so I'm guessing there's going to
74:44 - be more than one but we just want one so
74:46 - I'm just going to return the first value
74:48 - from that erasing the shift method
74:52 - cool and now
74:54 - so we've redefined our new object let's
74:58 - now use that object to essentially
75:01 - create a table data cell for each of the
75:04 - items so I'm going to do so again so
75:06 - const I'm going to call it flight detail
75:09 - so each flight detail that exists in
75:12 - this object in the flight details object
75:17 - and for each item that exists I'm going
75:20 - to create a table data cell so document
75:24 - create element
75:26 - TD
75:27 - I'm going to save this as table cell
75:32 - and now I'm going to essentially so
75:36 - whatever these words are I don't really
75:42 - want I want them because I want each
75:45 - little each word to be separated our
75:47 - owner create an array from it so that we
75:49 - can create little flipping boards I'm
75:52 - going to get the word
75:54 - and create an array from it like I said
75:56 - so array from
75:58 - and then we're going to look in the
76:00 - flight details
76:02 - object and look for something by the
76:05 - flight detail
76:07 - okay so essentially I'm just creating
76:10 - little arrays so that we can now create
76:12 - little cards for them
76:14 - so const
76:17 - um
76:18 - we're gonna have to have the index this
76:20 - time so index and then the letter
76:22 - for each of the cards of the word
76:25 - entries
76:31 - okay
76:32 - uh so great so now that we've got each
76:36 - word split out into an array so we can
76:38 - create Little Boxes for them I'm going
76:40 - to create a box for them so document
76:43 - create element
76:46 - active
76:48 - and let's call this a letter element
76:54 - great
76:58 - so of course now we have that we need to
77:01 - put that letter element
77:04 - into
77:07 - the table
77:08 - cell so let's get the table cell and
77:11 - append
77:13 - the letter element and we also need to
77:20 - so after still in this for Loop we also
77:24 - need to grab the table row and append
77:28 - the
77:29 - table so
77:32 - okay so of course we won't really be
77:34 - able to see The Styling on this now but
77:36 - I'm just going to show you what this
77:36 - looks like I'm trying not to make as
77:38 - many cores because it's obviously taking
77:40 - time to make the call and we don't want
77:42 - to go over the certain amount either
77:44 - so
77:47 - hmm
77:49 - we've created the table data and for
77:52 - each letter we've created a div
77:55 - so that's looking good we just need to
77:57 - actually put the letter in so let's
78:00 - actually get the letter element
78:04 - and use text content to add the
78:08 - letter okay so for each word entry I'm
78:12 - just gonna
78:13 - do
78:14 - that
78:18 - great and maybe let's style up the div a
78:21 - little bit so in here
78:25 - in the departures
78:27 - table
78:29 - any div that lives inside of it I'm
78:32 - going to give it a border
78:34 - that is solid
78:36 - 4 pixels RGB
78:42 - okay so I'm just making little cards
78:45 - and let's also give it a background
78:46 - color
78:51 - of black but let's make it RGB
78:56 - to rgb000
79:01 - and then Min width of the card is going
79:04 - to be 20 pixels and the height is going
79:07 - to be 40 pixels and I'm going to make
79:10 - everything float left
79:16 - okay so once again let's check it out
79:18 - fresh
79:20 - and let's wait the apis do the same
79:22 - recording the API
79:25 - so there we
79:28 - I go this is looking good as you can see
79:32 - what we have done is go each word we
79:34 - spit out onto an array within each item
79:36 - in the array we made each letter go into
79:38 - a little card that we created or a div
79:40 - to be precise
79:42 - so this is looking cool the last thing
79:45 - I'm going to do is just add a flip thing
79:46 - so that we get it everything flips over
79:50 - so let's go ahead and
79:53 - do that
79:57 - so to do this I'm actually going to put
80:00 - adding the letter in a set timeout so
80:03 - set
80:05 - timeout and then just put in a callback
80:08 - function
80:11 - and then this set timeout this is why I
80:14 - need the index because if I did 100 then
80:16 - all the letters would flip after 100
80:17 - milliseconds but if I'm in multiply this
80:21 - by an index the first one will flip over
80:24 - at zero the second one will flip over
80:26 - 100 milliseconds the third one will flip
80:28 - over 300 milliseconds and so on so that
80:31 - is how you would do it and then I just
80:33 - want to show the letter okay so it's
80:36 - going to be like one after the other I'm
80:39 - also actually going to get the letter
80:40 - element
80:42 - and assign it a class which we're going
80:44 - to make
80:44 - so class list add this is how you add a
80:48 - class using JavaScript and that class is
80:50 - going to be called flip
80:53 - and actually also
81:00 - yeah I actually want to let's put in
81:03 - that letter element in here too so it
81:06 - actually gets put in at the same time I
81:08 - think that would work
81:09 - better
81:14 - cool
81:16 - so now in here let's write the flip
81:19 - class
81:20 - so I'm just going to do
81:25 - T flip and when the div is applied this
81:28 - class I'm going to animate it so I'm
81:30 - going to use animation uh 0.5 seconds
81:33 - linear
81:35 - and then we're gonna have to write the
81:36 - animation which I've called flipping so
81:38 - keyframes
81:40 - flippings what we called it
81:44 - and
81:47 - I'm just going to transform
81:49 - it to rotate X
81:54 - zero degrees
81:57 - and then I'm actually just going to copy
81:58 - this because we're just going to change
82:00 - a few things
82:03 - so then at 50 it's going to rotate X 90
82:07 - and then
82:09 - back to zero at 100.
82:13 - great
82:15 - so I'm pretty sure that's it
82:19 - is it not liking that
82:22 - oh well okay
82:25 - so now let's check it out
82:29 - we should probably hard code this table
82:31 - a little bit as well so that doesn't
82:33 - look like this any point in time and
82:34 - ta-da that is looking so cool
82:39 - so yes let's do a few final
82:42 - styling things and that is just gonna
82:45 - hard code
82:46 - some of these elements
82:50 - I'm going to say that the
82:52 - div with the ID of time or sorry the
82:55 - element
82:57 - I'm going to say that the element with
82:58 - the easy of time so whatever holds our
83:01 - headings always going to have a width of
83:02 - 160 pixels
83:07 - then the element with the ID of
83:09 - destination is going to have a width of
83:14 - 700 pixels
83:18 - and flight is going to have
83:22 - 205 pixels
83:28 - gate is going to have a width of
83:31 - 135 pixels
83:34 - and finally
83:36 - remarks
83:38 - it's gonna have a width of 260 pixels
83:41 - okay so now the width will not change
83:48 - it looked like this one is empty and
83:50 - then
83:52 - whoosh
83:54 - so that is looking
83:58 - cool
84:00 - you can of course hard code the height
84:02 - as well that part is totally up to you
84:05 - great so thanks very much I hope you've
84:08 - enjoyed this lesson and how to take a
84:11 - simple JavaScript project and populate
84:13 - it using an API
84:16 - thanks so much for watching and I'll see
84:18 - you again soon
84:24 - so let's do it let's get up our code
84:27 - editors so I am using webstorm so I'm
84:30 - just going to spin up a react up fast by
84:33 - clicking on react right here and then
84:36 - this means I can just call this whatever
84:38 - I want I'm going to call this reacts
84:42 - flight with jet just like so and it's
84:47 - going to use the command npx create
84:49 - react app to spin up a react app for me
84:52 - along with all of its boilerplate code
84:55 - so I'm just going to go ahead and click
84:58 - create and let that do its thing
85:02 - okay
85:04 - so that's going to spin up all the
85:07 - files and directories for me if you're
85:09 - not using webstorm and you'd like to
85:11 - just use the terminal to do this just go
85:13 - ahead and select a directory of your
85:15 - choice so for example I could use
85:17 - development and then I'd use the command
85:19 - npx create react app and then I call the
85:22 - project whatever I wish but as you know
85:25 - I'm not doing this way I'm using
85:27 - webstorm which is kind of doing all of
85:29 - that for me okay so we're just going to
85:31 - wait until all the files and directories
85:34 - get populated in my project at the
85:37 - moment there is a package Json and
85:38 - that's it there's going to be a lot more
85:41 - so while that's doing its thing let's
85:44 - head over to data Stacks which is going
85:46 - to be the database management system I
85:48 - am using for this project I'm using it
85:50 - because it's free and I use it in most
85:52 - of my projects so I'm pretty used to it
85:54 - so I'm just going to go ahead and sign
85:56 - in go ahead and sign up if you haven't
86:00 - already and once you have signed up
86:03 - you'll be taken to the data Stacks Astra
86:05 - dashboard just like so
86:08 - and as you can see here I have many
86:11 - databases already I'm going to go ahead
86:13 - and create a new one so I'm going to go
86:15 - ahead and click here and that will take
86:18 - me to this dashboard where I'm going to
86:20 - call my data boost something well I'm
86:22 - just going to call it let's call this
86:24 - the flight widget
86:27 - projects and the key space name for this
86:30 - I'm going to choose to call this flights
86:32 - just like so
86:34 - okay
86:36 - great
86:37 - so that is what I've chosen to call my
86:39 - key space next I'm going to choose a
86:41 - region I'm going to choose the closest
86:43 - one to me which at the moment I forgot
86:46 - where I am I'm in London so I'm going to
86:48 - go ahead and choose Europe West Europe
86:50 - and create a database okay
86:54 - great and now while our app is spinning
86:57 - up this should be created it will show
87:00 - you the token and secret client please
87:02 - go ahead and save that I'm going to show
87:04 - you mine because I'm going to be
87:05 - deleting this anyway by the time this
87:07 - tutorial comes out so this is what you
87:09 - should look like just copy that and keep
87:12 - it somewhere safe
87:13 - okay so go ahead and save it somewhere
87:16 - I'm going to save mine on notes
87:18 - and wonderful so now we can go to the
87:21 - database that data will be needed to
87:24 - communicate with your database later on
87:27 - so now that we are here we can see our
87:29 - key space called Flights but we have to
87:32 - wait as our status is initializing so we
87:35 - can't use this quite yet so while that's
87:37 - doing its thing let's go and check on
87:40 - our project
87:42 - so back in here you will see that in my
87:45 - directory called reaction like widget we
87:47 - will see all these files and directories
87:49 - okay so that's been generated for us
87:51 - let's just get rid of that for now I'm
87:53 - actually going to get rid of a lot of
87:55 - these as we don't need them
87:57 - so I'm going to delete these three okay
87:59 - I'm just going to really scale it back
88:01 - delete these three files delete anyway
88:03 - and then I'm going to delete the test
88:06 - file as we're not going to be doing any
88:07 - tests in this project and then the
88:09 - delete the app CSS file was as we're
88:12 - just going to be storing all our CSS in
88:14 - one place okay which means that now in
88:17 - the nxjs file I can get rid of this as
88:20 - we're not reporting with vitals
88:22 - so get rid of the input for it let's
88:25 - just make this a little bit bigger
88:27 - and then we can keep all of these I'm
88:29 - just going to get rid of these
88:31 - semicolons and great so that is what
88:34 - your index.js file should look like and
88:36 - a stripped down version
88:38 - next let's have a look at the app.js
88:40 - file so once again let's just change a
88:43 - few things I'm not going to be using
88:44 - semicolons and I'm just going to get rid
88:47 - of all of this okay all of this in the
88:50 - return so we can start fresh and I'm
88:52 - going to change this to a function
88:54 - expression just because I prefer working
88:56 - with
88:57 - them
88:58 - great and for now I'm just going to
89:01 - return
89:02 - an empty element we don't need to import
89:04 - the app CSS file as I said we will be
89:07 - doing all our CSS in one file so that is
89:10 - the content of my app.js file that is
89:13 - the content of my index.js file and this
89:16 - is the content of my index CSS file
89:18 - which again I'm just going to delete so
89:19 - we can start fresh
89:21 - great everything else just leave as it
89:24 - is
89:26 - so now that we have done that the first
89:29 - thing I'm actually going to do is just
89:31 - create a server so at the moment this is
89:34 - all in my directory called react flight
89:37 - widget and we have the source directory
89:39 - right here I'm just going to make a new
89:42 - file in the root of my project
89:44 - so new
89:46 - files it's going to be a JavaScript file
89:48 - go to server Js
89:51 - and here's essentially where all my
89:53 - backend code is going to go okay so just
89:55 - one file I call it server just to make
89:58 - it really clear that this is our backend
89:59 - and all of this is going to be our front
90:02 - end okay so everything in here and
90:04 - they're going to share a package Json
90:06 - file
90:08 - great
90:09 - so what are we going to do here well we
90:12 - are going to have to communicate with
90:14 - our database in this file so to do this
90:17 - I'm going to have to define a port I'm
90:19 - going to say I want it to run on Port
90:21 - 8000 we're also going to have to get
90:23 - axios so const axios equals require the
90:28 - package axios okay so that is something
90:32 - that I'm going to have to install we're
90:35 - also going to get the package express
90:37 - so require
90:40 - Express
90:42 - and the package cores so that we can get
90:44 - rid of those Pax key cause messages
90:46 - which I will show you and then we're
90:49 - going to also need the dot EnV
90:54 - package
90:55 - so that we can read
90:58 - information from a DOT DNB file in which
91:01 - we're going to store our API key
91:03 - so I hope you already know what all
91:06 - these packages are as I'm not going to
91:07 - go too much into them the axios package
91:09 - is essentially going to help us make get
91:11 - requests because we're going to get the
91:14 - data from our database and express is
91:16 - what's going to help us do the routing
91:18 - okay
91:20 - cause as I said is going to help us when
91:22 - we see the pesky cause message which I
91:24 - will show you later and the dot EMV file
91:27 - as I said is going to help us get
91:28 - information from the dot EMV file that
91:31 - we will create to store API key so let's
91:34 - go ahead and install all of these so
91:36 - just make sure that you're in the right
91:38 - directory which I am and I'm going to
91:40 - use the command npmi for install to
91:42 - install the axios package the Express
91:44 - package the course package and the dot
91:47 - EnV package just like so I'm also going
91:51 - to install the nodeive on which will
91:52 - help us listen out to constant changes
91:54 - on the server.js file so just go ahead
91:57 - and install this so hit enter and let
92:00 - that do its thing
92:01 - okay and great so now if we look in the
92:04 - package.json file you will see those
92:06 - packages right here
92:09 - okay so there we go if you are doing
92:12 - this in the future and something doesn't
92:13 - work it could be down to the package you
92:15 - are using so just make sure to change
92:18 - the package and then run npmi to
92:21 - reinstall all those packages again after
92:24 - you save the file however we're not
92:26 - going to do that now so let's just put
92:27 - it back to the packages that we
92:30 - installed so these are the latest ones
92:31 - right now in time
92:34 - okay so let's carry on
92:37 - it's going to zoom in a little bit for
92:39 - you to see now we're going to also have
92:41 - to add another script because at the
92:43 - moment we have a script to start you
92:45 - know the just the reacts app I'm going
92:47 - to write another script which I'm going
92:49 - to call
92:51 - start back end so that's how we're going
92:53 - to call this script so sort of back end
92:55 - and I'm going to change this to front
92:57 - and actually
92:58 - and here I'm going to listen out to
93:01 - changes on the server JS file and to
93:06 - listen up constantly the changes I'm
93:08 - going to use node in one which I just
93:09 - installed okay so that will listen out
93:12 - to constant changes on my server.js file
93:15 - great so I'm not going to run this yet
93:18 - let's just get rid of that for now let's
93:21 - carry on writing our code for here
93:23 - so first off I'm going to actually get
93:27 - everything that Express comes with and
93:29 - release all of its magic wonderfulness
93:31 - and to do this well I've stored it under
93:34 - the cons Express which means if I grab
93:37 - Express now and call it all of that will
93:39 - be released so everything that comes
93:41 - with the Express package so to use that
93:43 - I'm actually going to save it as another
93:44 - const called app which means that now I
93:47 - can use app and use any methods that
93:50 - come with Express and one of those is
93:52 - listen and that's going to help us
93:54 - listen out to the port okay and it's
93:57 - going to listen up to the port and it's
93:59 - going to consult log out
94:02 - running on ports and then we're just
94:06 - going to
94:07 - grab the port name okay so that now if I
94:12 - do
94:13 - npm Run start
94:17 - back and and hit enter
94:20 - you will see running on Port 8000 you
94:23 - know I make any changes here and save
94:24 - obviously that won't work because that
94:27 - has um that's not code it's common that
94:29 - out it will rerun
94:32 - okay so that's constantly listening out
94:34 - for changes
94:35 - great
94:39 - now let's check what our database is
94:41 - doing so as you will see here it is it
94:44 - is online this is great so this is
94:46 - looking good
94:48 - we can now use it so what I'm going to
94:51 - do is add data into this manually and
94:55 - that's going to be our flight widget
94:56 - data so we're pretending we're an
94:58 - airline essentially okay I'll come in
95:01 - here's my Airline data of course
95:03 - realistically the database would hold
95:05 - data that someone is constantly updating
95:07 - but we're just going to put it in once
95:09 - and leave it okay because it's for the
95:11 - project but you should know how to do
95:12 - this so I'm going to show you how
95:15 - so
95:17 - here is our database I'm going to
95:19 - connect and there's many ways you can
95:20 - connect however this time I'm just going
95:23 - to use the document API and I'm going to
95:25 - use the Swagger UI documents to help me
95:27 - visualize this okay so all I've done is
95:30 - click on here and let's launch the
95:32 - Swagger UI
95:34 - now we've created a key space now first
95:37 - off with key spaces we need to create a
95:39 - collection that will hold all our data
95:41 - so let's go ahead and do that I'm going
95:43 - to create a new collection in a keyspace
95:45 - name and try it out
95:48 - now this has been Auto populated for us
95:51 - so thanks very much data stacks and the
95:54 - key space otherwise known as Name ID in
95:57 - here as we know is called flight as
95:59 - that's what we called it and the
96:01 - collection that we're going to create
96:02 - you can call it whatever we wish I'm
96:06 - going to choose to call it
96:08 - departures okay so that's going to be
96:11 - our flights departures so my collection
96:14 - is called departures and now if I
96:16 - execute this
96:21 - you will see that that has worked we get
96:24 - a 201 response so great that's looking
96:27 - good we've made a collection now let's
96:30 - put stuff into our collection so what
96:32 - I'm going to do is create a new document
96:34 - this time and try this out the keyspace
96:37 - name otherwise known as the name ID in
96:40 - here the name space ID is called Flights
96:42 - and the collection is called departures
96:44 - as we just made it and in here well I'm
96:47 - going to go ahead and just create an
96:50 - object that's going to represent one
96:52 - departure now I've already pre-made this
96:55 - for us so we don't have to sit here all
96:57 - day writing them out so this is what my
97:00 - object is going to look like okay as you
97:02 - can see here we have the stasis
97:06 - I'm delayed for this flight the
97:09 - destination is Halifax Canada the flight
97:12 - number is
97:13 - y9521 and it's departing at 4 P.M and
97:17 - we've also got the gate number okay so
97:20 - there we go that's what one object is
97:22 - going to look like and now if I execute
97:24 - this
97:25 - ta-da we got a 2-1 response that object
97:29 - essentially has been put into my
97:31 - departures collection and that is its
97:34 - document ID if we ever need to pick it
97:36 - up by document 18. I'm just going to go
97:39 - ahead and put in some more okay so once
97:41 - again I have pre-made these just to make
97:43 - our lives a little bit easier so there's
97:46 - another
97:47 - flight I'm just going to execute that
97:49 - and let that do its thing and that has
97:52 - been put in because we can see the
97:53 - document ID in the response body let's
97:56 - put in another one
97:59 - okay so this flight is on time because
98:01 - the other two have been delayed I'm just
98:04 - going to put in a few more to check that
98:06 - one has worked and it has
98:10 - this is a canceled flight to Oman I'm
98:13 - going to execute that and then we have
98:15 - one more and it's to crack off Poland
98:18 - Okay so there we go great and we're just
98:22 - going to execute that and wonderful so
98:26 - now if we search all the documents in a
98:28 - collection let's try this out the key
98:30 - space name is flights otherwise known as
98:33 - the namespace name and Swagger The
98:36 - Collection is called departures and I'm
98:40 - just going to get back everything okay
98:42 - we could limit how many items we want to
98:44 - get back but I don't want to do that I
98:46 - just want everything and wonderful
98:49 - so there we go okay at the moment it's
98:53 - just returning three however if I view
98:56 - this so if I actually
98:59 - get this URL okay this one right here
99:03 - that's essentially what we created by
99:07 - entering all these details that is the
99:09 - URL and this is what we're also going to
99:11 - have to pass through with that accept
99:13 - application Json and the Cassandra token
99:17 - so that's what essentially what we're
99:18 - going to recreate in our back end so
99:20 - let's get up our web store
99:24 - now I'm going to use app again which
99:26 - holds all of our Express wonderfulness
99:28 - and I'm going to use the get method
99:29 - let's move this a little bit bigger and
99:31 - we don't need that and what I'm going to
99:33 - do is get and I'm going to define a root
99:37 - I'm going to say that if we visit
99:38 - localhost 8004 slash flights then we
99:42 - want to essentially see the data from
99:45 - our database so this is the Syntax for
99:49 - doing a get request in Express and then
99:53 - I'm going to have to essentially get
99:55 - pass through some options okay so the
99:57 - options are what we saw the method is
100:00 - going to be get even though I don't
100:02 - think we need to specify that if we're
100:04 - doing it up here so let's not worry
100:05 - about that the URL for this
100:10 - is going to be the URL that I stole from
100:14 - Swagger which we can hide as well but
100:17 - I'm just going to keep it like this for
100:19 - now
100:21 - and then the headers well the headers
100:28 - are gonna be
100:29 - these two
100:31 - Okay so we've got accept application
100:34 - Json
100:39 - and then we're also going to have
100:42 - let's make it like this
100:45 - X
100:47 - Cassandra
100:50 - token you can sort of spelled it exactly
100:52 - the same way
100:55 - as it's spelled here and we're going to
100:57 - use our own token that we saved
101:00 - so there we go that's my one that we saw
101:03 - earlier
101:07 - and now under the headers and under the
101:12 - option so that's our options all of that
101:15 - I'm going to use axios which is the
101:17 - package that we installed up here to
101:20 - request
101:22 - options
101:24 - then
101:26 - get the response
101:29 - and once we get that response Well for
101:32 - now I'm just going to consort log the
101:35 - response
101:36 - data
101:39 - but we also want to see in the browser
101:41 - and for that I need to use res Json and
101:44 - pass through the response data like so
101:46 - and then of course we're going to catch
101:48 - any errors so catch
101:50 - error
101:52 - just like so I'm just going to console
101:54 - log the error
101:57 - okay
101:59 - great
102:01 - so
102:02 - I think that should be it that is a
102:06 - whole piece of code
102:08 - so now
102:11 - if we look and localhost 8000 forward
102:14 - slash flights
102:15 - we get that data showing up so we can
102:18 - use it now if we wanted to limit or say
102:22 - that you know we want to get all six
102:24 - then I can actually say that I want six
102:27 - I can really hard code it to only get
102:30 - six backs I'm going to do page size six
102:32 - and then you'll see all six of those
102:34 - flights so let's go ahead and add that
102:37 - to the URL
102:39 - right
102:40 - here
102:42 - okay
102:43 - great now at this point I'm actually
102:46 - going to create a DOT dnv file so new
102:48 - file dot EnV so we can store all of this
102:52 - as this is kind of sensitive even the
102:54 - URL is sensitive right
102:57 - so I'm going to essentially get this
102:59 - whole URL all of it including the page
103:02 - size or we can actually leave the page
103:04 - size maybe let's leave it let's just get
103:06 - this URL and save it here and I'm going
103:09 - to say this is URL just like so okay we
103:13 - don't need to put strings as it's
103:15 - implied that it's a string then save
103:18 - this and I'm also going to
103:21 - get the token
103:25 - and save this token right here so that
103:28 - it's hidden from when we push this up to
103:31 - GitHub and so on so let's get all of
103:33 - that
103:34 - and paste it in here like so okay so
103:36 - there's my URL it ends in forward slash
103:39 - departures and there's my Cassandra took
103:42 - great so now to access these we can
103:45 - simply just use process EnV and then
103:50 - token okay process in V is essentially a
103:54 - way for us to access anything in the dot
103:56 - DMV file and token is what we called our
103:59 - token and we can do the same for the URL
104:02 - here in fact I'm going to use back text
104:04 - because I'm going to pass
104:08 - the URL in like this so process e and V
104:14 - URL and then I'm going to also attach
104:17 - this string at the end just so it's
104:19 - visible to whoever's looking at this in
104:21 - case they're wondering why all their
104:23 - details are coming back is because we
104:24 - capped it at six
104:26 - great
104:29 - so amazing we've essentially finished
104:32 - our back end how painless was that
104:35 - so now that we have that let's get to
104:38 - using all of this data that we have here
104:42 - by building out a front end
104:44 - so let's do it
104:47 - so to do this I'm going to actually get
104:50 - out my terminal again and create a new
104:52 - tab and run the command npm Run start
104:56 - front end this time making sure to spell
104:58 - it correctly and making sure that you're
105:01 - in the correct directory and hit enter
105:04 - so that will spin up our front end
105:08 - okay right here should have nothing in
105:11 - it because I deleted everything in it so
105:14 - it should just be a blank page okay and
105:17 - it is
105:17 - great
105:19 - so that is working well I think we are
105:22 - done with the day space for now so I'm
105:24 - just going to
105:25 - get rid of that and great
105:29 - now the first thing we want to do I'm
105:32 - actually going to get rid of the seven
105:33 - two uh and let's just go up let's have a
105:37 - think about the components that are
105:39 - going to make up this app well we're of
105:41 - course going to have a table we're also
105:43 - going to have the table body as well as
105:46 - the table header and the table body is
105:48 - going to hold all our flight details and
105:50 - the table header is going to hold
105:51 - information about the column names
105:53 - we're also going to have table rows that
105:56 - make up our table body okay as they can
105:58 - easily be components as they are
106:00 - reusable as well as table cells which
106:02 - will make up each cell that holds the
106:04 - names of things in our table okay so
106:08 - let's go ahead and start doing that now
106:12 - so
106:13 - all I'm going to do is create a new
106:15 - directory called components this time
106:19 - components and in here I'm actually
106:22 - going to use this as a template I'm
106:25 - going to create a new file it's going to
106:28 - be a Javascript file and it's going to
106:29 - be for our table and I'm going to store
106:31 - this as a table jsx file okay and then
106:36 - just paste it like so and I'm just going
106:39 - to change this to the table export
106:41 - default table
106:43 - great
106:44 - in fact we should probably change this
106:46 - to a jsx file as well as it includes jsx
106:52 - so let's just go ahead and rename this
106:56 - app jsx
107:00 - and this one as well rename index.jsx
107:06 - great
107:10 - so we've got our table next we're going
107:13 - to have a table body so new
107:17 - file table OD Dot jsx
107:26 - and then I'm just going to add body here
107:30 - and here
107:31 - Okay so we've got table body now we're
107:34 - also going to have table head so new
107:36 - file table head Dot jsx
107:42 - add that file
107:44 - table head and table head
107:48 - now we're also going to have a table row
107:51 - right so new file table row Dot jsx
107:57 - let's put don't ask again
107:59 - and then this is going to be change to
108:01 - table row I'm not forgetting to changing
108:03 - but here at the bottom two and one more
108:07 - and that's going to be a table cell so
108:09 - table cell Dot jsx
108:14 - and change this to table cell and change
108:17 - this to table cell 2.
108:19 - great
108:21 - so let's just get rid of these
108:24 - at the moment
108:27 - okay
108:28 - so what I know is that I'm going to have
108:32 - a div here and this div I essentially
108:36 - want to
108:37 - hold all of my departures information
108:40 - together which means I want to put in
108:43 - the table along with a header that says
108:45 - departures okay so I'm going to put in a
108:47 - header element and it's just going to
108:49 - say it departures like so perhaps let's
108:51 - make a capital to make it consistent
108:53 - with the previous ones that I made and
108:55 - I'm also going to use the table
108:57 - component now okay that I have made so
109:01 - just like that which means you need to
109:03 - import it in here so import table from
109:07 - and then I'm going to go into the
109:10 - components and I'm going to grab the
109:12 - table
109:14 - component just like so so at the moment
109:18 - this won't really do much okay I'm gonna
109:21 - actually start this up I'm going to give
109:23 - this the class name of Departures just
109:24 - so we can Center the departures header
109:28 - and the table okay so
109:33 - let's go ahead and do that I'm going to
109:34 - grab this and then the dot CSS file I'm
109:37 - going to grab the class of departures so
109:40 - dot for class name
109:42 - and I'm just going to give this a
109:44 - background color so we can see a little
109:46 - bit of what's going on and I'm just
109:48 - going to make it this dark gray I'm
109:51 - going to give it a border radius to
109:53 - soften it up of 10 pixels and I'm also
109:56 - going to give it some padding space it
109:58 - out from the header and the table and
110:00 - then I'm also going to give it a box
110:01 - Shadow which I've pre-made before so
110:05 - it's going to have
110:06 - this dark
110:09 - gray color with a 0.25 Alpha for opacity
110:13 - and I want it to be zero on the x-axis
110:19 - 13 pixels on the y-axis 27 pixels blur
110:22 - and 5 pixels spread okay and then I'm
110:25 - going to Overlay with another one whoops
110:28 - there we go
110:30 - and that's rgba
110:33 - this time is black with 0.3 opacity I'm
110:36 - just going to put this on another line
110:38 - maybe and zero pixels x-axis 8 pixels
110:42 - y-axis 16 pixels and minus eight pixels
110:47 - spread
110:48 - great we don't need the p x and the zero
110:51 - as it's redundant
110:52 - so we've done that and now if we look in
110:55 - the browser
110:57 - oops maybe we should have just kept that
110:59 - as it is
111:01 - unless we can change something in the
111:03 - package Json maybe that's I think we're
111:06 - just over complicating it
111:11 - maybe let's try it really around this so
111:13 - npm Run start front end
111:21 - and there we go okay so that's fine we
111:24 - just had to rerun it as we renamed this
111:26 - file to a jsx file
111:29 - okay
111:30 - so now you will see the div with the
111:33 - class name of Departures if I inspect
111:36 - this
111:37 - you will see that
111:39 - in the
111:41 - root okay so there we go there's a
111:43 - different class departures and in its
111:45 - got a header which says departures and
111:47 - it should have the table component but
111:49 - at the moment that's returning nothing
111:50 - so that's all we'll see let's go ahead
111:53 - and change the font as well so actually
111:55 - what I'm also going to do is say that
111:58 - also all the fonts that I'm going to use
112:01 - are going to have the color of an
112:04 - off-white so RGB
112:06 - 240 240 240 just like so
112:11 - I'm going to use the font family of
112:14 - Ubuntu condensed which I'm actually
112:17 - going to get from Google
112:20 - fonts API so condensed
112:23 - and then as a backup we're going to have
112:25 - Suns
112:27 - serif
112:29 - and
112:34 - Ariel
112:35 - okay
112:37 - great
112:40 - I'm also going to make the font size for
112:42 - everything 35 pixels so now if we look
112:45 - in here there we go we get the
112:48 - departures let's go ahead and also get
112:50 - the Google font API so we can install
112:52 - Ubuntu
112:54 - so here we go fonts Ubuntu
113:05 - and we're just going to select the
113:06 - regular one
113:07 - and then we're just going to import it
113:10 - so I'm just going to grab this like so
113:15 - and paste it in okay so there we go
113:17 - we've just imported the Ubuntu condense
113:20 - and we can now use it in the font family
113:24 - so great there we go you will see that
113:28 - font has changed wonderful
113:31 - let's carry on
113:33 - so now that we have that I'm also going
113:36 - to Center
113:37 - the departures so what I'm going to do
113:39 - is grab the whole body of my document
113:42 - and use display
113:44 - Flex on it and first of all I'm going to
113:48 - Center everything horizontally
113:50 - and then I'm going to give the body a
113:54 - height of 100 viewport height which will
113:57 - be in the I can now align items on the
114:00 - adjacent accent to this so essentially
114:04 - vertically and I'm going to assign them
114:06 - Center
114:07 - let's also give the body a background
114:10 - color I'm going to choose to give it to
114:12 - this orangey like color just like so
114:17 - okay so there we go we have centered
114:21 - you did with a class of departures
114:24 - great now let's go ahead and work on the
114:27 - table element so I'm going to go ahead
114:29 - and get it up here
114:30 - now the table element isn't really going
114:33 - to have much in it it's just going to
114:35 - say that I want this to be a table right
114:37 - so I've got the table element and then
114:39 - we're going to have to have a table of
114:40 - head right but I'm going to choose to
114:42 - put this in its own component so there
114:44 - we go we've already made the table head
114:46 - component here and we also need the
114:48 - table body because as we said we want
114:50 - the table body to hold all of our data
114:53 - about the flights so let's go ahead and
114:56 - import those two components that we made
114:58 - so import table head from table head and
115:04 - also import table body from table body
115:07 - great and once again that's all we're
115:10 - going to do on the table let's work on
115:12 - the table head first
115:15 - so what do I want the table head to
115:18 - return well I'm going to use the table
115:20 - heads
115:22 - element
115:24 - and it's closing tag
115:27 - to create a table head and inside of
115:30 - here I'm going to have to create a table
115:32 - row
115:34 - so there's our table row
115:36 - note that it's separate to the table row
115:38 - we have here because this one's
115:40 - specifically for the body the table head
115:42 - is going to have a table row which is
115:44 - going to contain a table header
115:48 - with the first one being empty and the
115:51 - second one
115:52 - is going to be a column title of time
115:55 - the next one we're going to have
115:58 - destination so it's going to be the
116:01 - column head of our destination column
116:04 - destination
116:08 - next we're going to have a column ahead
116:11 - for our flights
116:13 - then we're gonna have one for the gates
116:17 - and then finally we're going to happen
116:18 - for remarks okay and marks
116:22 - and I'm going to actually pick each one
116:24 - of these out by its ID because I'm going
116:26 - to give it a custom sizing so that one's
116:29 - going to be time this one I'm going to
116:31 - give it the ID of destination oh no
116:36 - no yes
116:37 - destination
116:40 - let's give this one the ID of well you
116:43 - guessed it light this one the ID of
116:48 - eight
116:50 - and this one the ID of
116:52 - remarks okay
116:55 - so at the moment this will just like
116:57 - this but as I said I want to space them
116:59 - all out a little bit so perhaps let's go
117:01 - ahead and do that now
117:05 - so first off maybe let's also just give
117:08 - this some padding so let's pick out the
117:10 - header I'm just going to go ahead and do
117:12 - that pick up the header and give it a
117:14 - padding of 10 pixels just to space it
117:16 - out from everything else and now in the
117:20 - departures
117:22 - the table itself that we created I want
117:26 - that to be a different background color
117:27 - actually I want to be this lighter gray
117:30 - that I picked out earlier
117:32 - and I want all the text to align to the
117:35 - left
117:38 - so let's have a look at what that looks
117:39 - like at the moment
117:40 - there we go you will see this is my
117:43 - table okay you will see it's got a
117:47 - lighter gray background
117:49 - now let's actually get to picking out
117:52 - all of the
117:55 - column name so we're going to get the
117:58 - flight and I'm going to hard coat the
118:00 - width of this column to be 160 pixels
118:04 - next we're going to get the destination
118:07 - and I'm also going to hard code this to
118:10 - have a width of 700 pixels this time
118:15 - then we're going to get the time in fact
118:19 - this one the first one's time isn't it
118:21 - the second one is flight
118:23 - and this is going to have a width of 205
118:26 - pixels
118:28 - then we have the gate this is going to
118:30 - be a short one
118:32 - so grab the gate ID and then just give
118:35 - it a width
118:37 - of 135 pixels
118:41 - and then remarks
118:43 - it's going to have a width of 260.
118:47 - fixes
118:48 - okay
118:50 - so that should have spaced them all out
118:52 - a little bit
118:54 - great
118:55 - so I believe we are done with the table
118:59 - header let's move on to the table body
119:01 - next and populating it with our data so
119:05 - let's go back to here I'm going to get
119:07 - rid of this we're done with this for now
119:09 - and let's get the table body
119:12 - so the table body well we already know
119:14 - that this should return the T body
119:16 - element because that is how we make
119:18 - tables
119:20 - so
119:21 - tea body and what we're going to have to
119:24 - do is map stuff onto table rows so this
119:28 - is the ideal place for us to essentially
119:30 - get the data from our backend so that's
119:32 - what we're going to do and for this
119:34 - we're going to have to import
119:37 - use State and use effect from react
119:44 - okay because we're going to essentially
119:47 - get the data so let's actually write a
119:51 - function for this called get flights
119:54 - just like so
119:57 - and I'm going to use fetch from
119:58 - JavaScript in order to fetch data from
120:02 - here so I'm just going to grab this URL
120:04 - it really is that simple and I'm going
120:06 - to paste it like so and then I'm going
120:07 - to do some chaining so once we get the
120:09 - response
120:11 - response I want to get it's Json
120:17 - then
120:20 - I'm gonna get the let's call it flight
120:22 - slot data flights and I'm going to set
120:25 - flights so let's go ahead and use const
120:31 - light set flights
120:34 - use state
120:37 - and start off with the state game no so
120:40 - what this essentially is if you haven't
120:42 - really come across that much react
120:43 - before is I am saying that I want to set
120:48 - the flights with whatever I pass through
120:50 - into here which is going to be flights
120:54 - okay because the flights are whatever's
120:56 - coming back from our Jason so
120:58 - essentially all of this is our flights
121:02 - and I'm passing it through into set
121:05 - flights which is then going to pass that
121:08 - onto the variable or the constant of
121:11 - flights okay so that is how to use use
121:13 - State and we're starting off with
121:15 - flights being no so if I console log
121:19 - flights
121:20 - after fetching the data let's see what
121:23 - happens we of course need to catch any
121:25 - errors as well so catch error console
121:28 - log error great
121:32 - so this is looking good however we also
121:36 - need to put this in a used effect so
121:39 - what I'm going to do is put get flights
121:41 - and use effect like so and not pass
121:44 - through any
121:45 - dependencies
121:47 - so let's see what happens now let's go
121:49 - to here
121:51 - and
121:52 - console
121:54 - and there we go we get that Pax key
121:57 - pesky cause messages and block by cause
122:00 - so what I can do is go to my server and
122:04 - use app again so app
122:07 - use password calls and call it okay so
122:11 - that is how you would get rid
122:13 - of this pesky message so let's refresh
122:16 - and great so this is why we have to use
122:19 - use effect because the first time we get
122:21 - the data that's null nothing and the
122:23 - third time we get it the data is there
122:26 - okay so that's all our flight data okay
122:29 - so there's one object with its document
122:31 - ID there's another object with this
122:33 - document ID and so on and so on okay so
122:37 - once again that is why we have the use
122:40 - effect here so that we can keep running
122:43 - this until we get our data right because
122:46 - it came back as null now and then we got
122:48 - it
122:49 - wonderful
122:51 - so now that we have our data let's use
122:54 - it to populate some table rows
122:57 - so let's do it
122:58 - so this is obviously coming back in this
123:01 - format as data so perhaps we can
123:04 - actually
123:05 - get the flights data and see what that
123:09 - looks like so now this is our object our
123:13 - object comes back with lots of other
123:16 - little objects of course
123:18 - so perhaps we need to format this we
123:20 - want this to be an array essentially so
123:22 - let's go ahead and do that
123:26 - so I'm gonna have to get the object
123:28 - values I think and turn them into an
123:30 - array so how would I do this well let's
123:36 - check it out so perhaps let's wrap this
123:39 - an object
123:41 - value so you can get the values
123:47 - okay and there we go
123:50 - so yes all I've done is look at this
123:53 - object and say I don't want the key I
123:57 - want the value instead and stick that in
123:59 - an array for me and that's what happened
124:01 - okay great so now I have an array of
124:04 - five objects
124:07 - wonderful so now that we have flights
124:11 - like I said what I want to do is map
124:14 - them so if flights exist I want to map
124:19 - because as we know at the beginning it
124:20 - returned back now right so if lights
124:23 - exist I want to map that onto
124:27 - so let's get the flight actually we need
124:29 - the index too so the flight and the
124:32 - index
124:33 - because we need a key
124:37 - and I essentially want to map them onto
124:40 - the table
124:42 - row component that we made
124:46 - we're going to have a key for that as
124:48 - that is necessary and we're just going
124:49 - to pass through the flight so each
124:53 - flight
124:55 - okay
124:57 - wonderful
124:58 - so that is all I am doing I'm getting
125:01 - the array and for each item in the array
125:03 - I'm passing it through into the table
125:05 - row element so now let's style the table
125:08 - row element
125:10 - which of course we need to also import
125:12 - into here
125:13 - so let's go ahead and do that import
125:16 - table Row from table
125:20 - row it's going to make it single quotes
125:23 - to make everything consistent
125:25 - wonderful
125:26 - so let's get the table row and here we
125:29 - go
125:31 - so for now if I just console log
125:34 - the flight which we are destructuring
125:37 - okay we've destructured that prop
125:39 - so I'm just going to console log the
125:41 - flight now and look in here
125:43 - we will get each individual flight
125:46 - coming back okay so this is good let's
125:49 - work with that so for each flight well I
125:53 - actually don't need to do much
125:57 - um I need to
125:59 - just well I could just make a table cell
126:03 - and then pass through each item of these
126:05 - each value into a table cell so perhaps
126:09 - no let's do that okay so return back
126:11 - well actually with the table row let's
126:14 - get the table row element
126:19 - this is going to be made up of table
126:20 - data so let's get the table data and
126:24 - we're going to have
126:26 - six of these with the first one actually
126:28 - being this cute little airplane icon
126:31 - that I found so feel free to take that
126:33 - from my code if you wish and then for
126:36 - each of the five remaining table data
126:39 - elements we're going to have to well you
126:43 - guessed it map out
126:45 - each
126:48 - of these okay so this is going to go on
126:51 - one table cell this is going to go on
126:53 - one table cell this is going to go on
126:54 - one table sub
126:56 - so let's import the table cell
127:01 - import
127:03 - table cell from table cell
127:11 - want to get the I guess words I'm going
127:14 - to use object
127:16 - values again
127:20 - to get the values
127:23 - the object values of each flight so just
127:26 - the ones in light green
127:29 - so I'm going to pass through the flight
127:30 - in here and just console log what this
127:32 - looks like so we can see
127:35 - let's have a look
127:37 - okay and great as you'll see an array of
127:40 - all the object values has been made for
127:42 - us so now we can work with this array to
127:45 - map them out onto table cells so let's
127:48 - get the words
127:50 - so words and if words exist I want to
127:54 - map out each word
127:58 - onto the
128:01 - table cell of course we're going to have
128:03 - to have a Q so I'm going to actually add
128:05 - an index to this as well
128:09 - so index
128:12 - the index as a key and in fact I'm just
128:16 - going to put this on another
128:18 - line
128:21 - there we go and the table cell is going
128:24 - to have the key but it's also going to
128:26 - have the word itself right so there we
128:30 - go
128:31 - great so that's what we're passing
128:34 - through okay
128:36 - cool
128:37 - so now on the table cell
128:41 - we're going to de-structure
128:44 - the word and we can just return it I'm
128:47 - going to show you what this looks like
128:48 - if we just return the word
128:51 - of course this needs to be in a table
128:53 - data element and let's have a look at
128:56 - what this looks like
128:57 - it will look like this so This
128:59 - essentially looks good however we want
129:02 - to give it that flip effect right which
129:05 - means we have to take this a step
129:07 - further and for each word I want to
129:10 - split it out by letter okay and then I
129:13 - want to apply a timing effect to it so
129:16 - let's go ahead and do that next so what
129:19 - I'm going to do is well I am going to
129:23 - instead of just putting the word in here
129:26 - I'm going to essentially make an array
129:30 - from the word
129:32 - like so and then I'm going to map each
129:36 - letter so let's get the letter and I'm
129:39 - also going to use the index as a key and
129:42 - what I'm going to do is just maybe get
129:44 - rid of this now
129:50 - is make a div this time and I'm going to
129:54 - give it the class
130:00 - name
130:01 - of
130:03 - well the class name is going to depend
130:05 - because I want to add this class name
130:06 - after X amount of seconds has passed
130:08 - right so and I'm also going to pass
130:11 - through the
130:13 - letter
130:14 - so at the moment if I look in here oops
130:19 - let's just get rid of this for now
130:21 - the letters are coming through let's
130:24 - actually maybe just start this up a
130:25 - little bit so they don't look like this
130:27 - let's get our index CSS
130:30 - and let's grab our departures grab our
130:34 - table that lives inside of that and grab
130:36 - the div so the div that I just created
130:38 - and give each one a border
130:41 - of solid
130:43 - 4 pixels and then the gray color
130:49 - so just like that I'm going to give it a
130:51 - border I'm also going to give each one a
130:52 - background color of black essentially so
130:56 - let's do that by rgb000
131:00 - I'm also going to give each one amen
131:03 - width of 20 pixels
131:06 - and a height of 40 pixels so each list
131:09 - is the same I'm going to make each one
131:11 - float left
131:13 - as well
131:14 - so now if you look in here that's more
131:17 - like it okay and then let's just make
131:19 - this a little bit smaller for now
131:22 - so there we go there we have our little
131:25 - letters and of course we want to flip
131:28 - them next
131:29 - so let's go ahead and do that for this
131:32 - I'm going to have to write an animation
131:34 - okay so I'm going to create a class so
131:37 - dot class called flip and I'm going to
131:40 - make this an animation so animation
131:44 - and on the last I want the animation to
131:46 - last 0.5 seconds I want it to be smooth
131:49 - so I'm going to add linear and I'm going
131:51 - to define the keyframes of flipping
131:53 - so at Key frames
131:56 - flipping and all I'm going to say is at
131:58 - the beginning of my 0.5 second animation
132:02 - I want to transform rotate on the x-axis
132:08 - start at zero degrees and then 50
132:12 - through my 0.5 second animation I want
132:15 - to transform and rotate X and I want it
132:19 - to be to 90 degrees and then on 100 I
132:25 - want to transform and just put it back
132:27 - to zero
132:30 - okay guys
132:31 - okay so if I add the class of flip to
132:34 - something essentially kick off this
132:36 - animation
132:38 - so this means that here I essentially
132:41 - want to add the class a flip but add it
132:44 - to each letter after X amount of time
132:46 - has passed and for this I'm going to
132:50 - have to use a set timeout
132:52 - so I'm actually going to import use
132:54 - state for this so we can save the flip
132:56 - state for each of the letters so import
132:59 - use state
133:02 - from
133:04 - react and I'm going to say const
133:08 - flip set
133:11 - flip
133:12 - and then we're going to start off with
133:14 - the flip being
133:16 - false for each
133:18 - div okay none of the divs have the
133:20 - classic flip however I'm going to use
133:23 - set timeout Now set time out
133:31 - and I want this to set timeout to occur
133:34 - after 100 milliseconds multiply by
133:37 - whatever index we are looping over for
133:39 - each word okay which means that we need
133:42 - to go back into the table row and
133:46 - actually pass through the index into
133:48 - here too so the index of each word so
133:51 - index I'm going to actually use the
133:54 - index now so like so so on the table
133:56 - cell I'm going to also pass through the
133:58 - index and we're going to use it to
134:00 - multiply to 100 milliseconds in order to
134:03 - perform this set timeout after different
134:05 - time intervals and what do I want to
134:08 - have in this certain timeout I just want
134:10 - to set flip to be
134:13 - true
134:14 - okay so I'm setting flip to be true by
134:18 - using set flip it starts over being
134:21 - false but then I set it to true so now I
134:24 - can use flip in order to select a class
134:27 - name
134:28 - so I can say that if
134:31 - flip is true I want to add the class of
134:35 - flip otherwise
134:39 - no there's no class name okay I'm
134:42 - actually same for the Lesser same for
134:45 - displaying the letter F lip exists then
134:49 - I want to show the letter otherwise I
134:52 - don't okay I just want to show an empty
134:55 - string or we can just put it down
134:59 - great so if we have a look now what this
135:02 - looks like
135:03 - ta-da wonderful so that is how it looks
135:07 - we are essentially flipping out each
135:10 - word we can of course take this a step
135:13 - further and actually flip out each
135:14 - letter so shall we do that yeah let's go
135:18 - ahead so
135:21 - instead of just creating this div here
135:24 - I'm going to pass it through into
135:26 - another component so let's go ahead and
135:29 - create a new file uh let's call this
135:32 - letter
135:35 - table letter
135:37 - just to keep everything consistent jsx
135:40 - so now let's do const table letter
135:46 - just like so and Export default table
135:52 - letter
135:55 - okay table letter and we know we already
135:58 - need to pass through some things and
135:59 - we're going to return
136:01 - well we can actually just return
136:03 - this right so I'm going to get one of
136:05 - this
136:06 - and put this as the return of the table
136:09 - letter and then also this set timeout
136:13 - doesn't want we don't want it to happen
136:14 - here so let's grab all of that and put
136:17 - it in here
136:18 - which also means we need to import use
136:20 - state which has been done for us
136:23 - great
136:25 - so now we just need to
136:29 - map onto the table
136:33 - letter
136:34 - just like so and for each word we're
136:38 - going to pass through the letter
136:42 - as well as the index right so we're
136:44 - going to use the index we're also going
136:46 - to have to give this a key so I'm just
136:48 - going to put this on a new line so it's
136:50 - well
136:52 - readable and of course we're gonna have
136:54 - to
136:55 - get up some
136:57 - parenthesis and let's just put in a key
137:00 - for good measure
137:01 - and that'll be the index which actually
137:03 - means we don't need to pass this through
137:05 - into the table cell anymore from the
137:08 - table row so let's get rid of that here
137:12 - and let's get rid of that here I'm just
137:15 - going to
137:16 - do that again
137:18 - okay because we're not using it so now
137:21 - on the table letter is where the
137:22 - flipping happens so that means that on
137:24 - the table cell we're passing through the
137:26 - letter and the index let's also go ahead
137:28 - and import table
137:32 - letter here from table letter
137:36 - and on the table letter we're going to
137:38 - pause with the word
137:40 - and the index which were they going to
137:43 - use to flip our
137:46 - sorry letter and index
137:48 - yeah the letter and index so which then
137:51 - we're going to use the index to flip
137:52 - each letter
137:55 - which we have passed through into here
137:56 - so now if we save this file
137:59 - there we go now each letter is rotating
138:04 - individually Okay so we've just taken
138:07 - that a stepfather and there we go we
138:10 - have essentially finished our widget
138:13 - okay we've made it in reacts with a
138:15 - database I hope you've enjoyed this
138:17 - lesson and if you found this a little
138:19 - bit difficult please watch my video or
138:20 - make this in pure JavaScript and another
138:23 - video we'll make this in JavaScript
138:24 - using an API so there's three videos for
138:28 - you all different all giving you the
138:31 - same result but with different
138:32 - Frameworks and approaches thanks very
138:35 - much and I'll see you again soon