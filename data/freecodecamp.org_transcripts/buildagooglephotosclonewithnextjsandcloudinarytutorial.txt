00:00 - in this course you'll learn how to use
00:01 - nextjs and cloudinary to build a Google
00:04 - photos clone and you'll learn how to
00:06 - make the app transform and enhance the
00:08 - images Colby fak created this course
00:12 - Colby is a popular course creator and is
00:14 - great at breaking things down for
00:16 - beginners Kobe works for cloudinary Who
00:19 - provided a grant to make this course
00:21 - possible images are a fundamental part
00:23 - of our everyday lives giving us the
00:25 - opportunity to capture a moment in time
00:27 - and share it with the world or maybe
00:28 - just enjoy it ourselves but what do we
00:30 - do when we have all those images which
00:32 - is increasingly challenging now that
00:34 - most of us have a smartphone in our
00:35 - pocket that has a pretty impressive
00:37 - camera so we're going to see how we can
00:38 - take those images put them into some
00:40 - kind of storage to create a media
00:42 - library where we're going to be able to
00:44 - not only upload those images but
00:46 - transform them such as cropping and
00:47 - resizing we're going to use AI to
00:49 - enhance those images and we're even
00:51 - going to see how we can add some filters
00:53 - and some fun effects like remove the
00:55 - background to really transform our
00:56 - images into something new particularly
00:58 - we're going to pretty much build a
01:00 - Google photos clone where if you're not
01:01 - familiar with the concept it's pretty
01:03 - much that media library I was talking
01:04 - about where once you have all of your
01:06 - images uploaded to your library you can
01:08 - start to do things like editing them
01:10 - where maybe I want to improve that image
01:12 - with AI or use AI to remove the
01:14 - background or we can also do things like
01:16 - cropping where I can dynamically crop it
01:18 - to a to a common format and I can even
01:20 - add filters such as maybe I want to have
01:23 - this image a cooler tone but one of my
01:25 - favorite Parts is taking this a step
01:27 - further with those Creations where maybe
01:29 - I want to include a couple images and I
01:32 - want to create a collage out of them I
01:34 - can easily select the images that I want
01:36 - I can trigger the action to create a
01:38 - collage and now I have my beautiful
01:40 - collage that I can save to my library
01:42 - and now I can share with my friends so
01:44 - through this tutorial we're going to
01:45 - cover a wide variety of topics of how we
01:47 - can build this app inside a nextjs
01:49 - including first off how do we actually
01:51 - upload our images to the cloud where
01:52 - we're going to use a drop-in upload
01:54 - widget that makes it really easy to
01:56 - upload our images directly to our media
01:58 - library now once the up inside of our
02:00 - cloud account how do we get them out so
02:02 - we're going to see how we can list those
02:03 - images using nextjs server components
02:06 - and then pass that data to the client
02:08 - using tan stack query where we can
02:10 - interact with it such as adding to that
02:12 - list after upload now once we have all
02:14 - of our images actually in our library we
02:17 - want to be able to view those images and
02:18 - transform them like we talked about so
02:20 - we're going to see how we can use
02:21 - Dynamic routes where we can set up a
02:23 - page for every single one of those
02:25 - images where we can start to do all
02:26 - those different editing options like
02:28 - that using AI to transform it the
02:30 - dynamic cropping and resizing the
02:32 - filters and even just simply adding some
02:34 - metadata and giving the ability to
02:36 - delete that image now back to one of my
02:38 - favorite Parts is those Creations how
02:41 - can we have some more advanced options
02:43 - such as creating API endpoints where I
02:45 - want to be able to create all those
02:46 - different features and Creations such as
02:49 - animations collages and even colourpop
02:52 - so we're going to see how we can dive
02:53 - into these different features and create
02:55 - really Advanced syntax in order to
02:57 - create Dynamic experiences with all of
02:58 - our images now rather than trying to
03:00 - rebuild this entire UI from scratch
03:02 - we're going to use a starter template
03:04 - that's just going to give us some more
03:05 - of the basic layout features now in
03:07 - order to get started with this you can
03:08 - find this repo over on my GitHub it's
03:10 - demo photo library starter or you should
03:13 - be able to find the link inside of the
03:14 - description of this video now before we
03:15 - dive in if you want to see the completed
03:17 - project that I took Beyond this tutorial
03:19 - you can check it out at photob box.
03:21 - where I have a completely open source
03:23 - where you can easily spin up your own
03:25 - photo library completely built you just
03:27 - need to plug in your clouding account
03:29 - now once we get started we can scroll
03:31 - down and we can see we're going to run
03:32 - this command in order to get started you
03:34 - can also clone this repo if you want but
03:36 - I recommend running this create next app
03:38 - command where I'm going to copy that to
03:40 - my clipboard and I'm going to pull up my
03:41 - terminal and run this command where we
03:43 - can see that what's going to happen is
03:45 - it's going to download that repository
03:46 - to my local environment it's even going
03:48 - to install the dependencies and reset G
03:50 - history which is important for starting
03:52 - off with a new project so I'm going to
03:54 - now navigate to my photo library I'm
03:56 - going to run npm run Dev where it's
03:59 - going to start up a local server where I
04:01 - can now open that up inside of my
04:03 - browser and as soon as this project
04:05 - loads we can see we have the exact same
04:07 - starter template so now that we have our
04:09 - project started we can head over to our
04:10 - code editor where let's take a quick
04:12 - look about what's inside where if I
04:14 - start navigating to my source my app
04:16 - directory where we're primarily going to
04:18 - work out of is the page file which we
04:21 - can see this grouping under pages and
04:24 - I'm doing that so I can have a custom
04:25 - layout for just that page but then we
04:27 - can see we also have the resources page
04:30 - where this is going to be where we're
04:31 - going to have our individual page for
04:32 - every single image so we can have that
04:34 - dynamically created we'll see how we can
04:36 - get to that later in the tutorial but
04:38 - we're primarily going to be working out
04:39 - of these two pages we're also going to
04:41 - be working out of some components
04:43 - including a media Gallery component as
04:46 - well as a media viewer component where
04:48 - because we're opting into SSR or serers
04:51 - side rendering for the core of the page
04:53 - we want to be able to use some client
04:55 - side features to actually be able to
04:56 - interact with our images inside of the
04:58 - application so we can see we're using
05:00 - components to do that we're appending Ed
05:03 - client at the top of those where we can
05:05 - then take advantage some of the client
05:06 - side apis now it's also worth noting
05:08 - while we're digging in here is we're
05:10 - using Shad CN to build a lot of the UI
05:13 - so inside of this UI directory you're
05:15 - going to be able to find all the
05:16 - components that were installed using
05:17 - Shad CN where you have the ability to
05:19 - customize them or even add your own Shad
05:21 - CN UI components and addition to Shad CN
05:24 - we're using Tailwind in order to
05:26 - actually do the UI styling but before we
05:28 - get started feel free to pause the video
05:29 - take a minute to get familiar with their
05:31 - project before we dig in now once we're
05:33 - ready to actually start building the
05:34 - project the first thing we want to do is
05:35 - list out our images now in order to do
05:38 - this of course you need a cloud Nary
05:39 - account so head over to cloud.com and
05:41 - sign up for free if you want to get
05:43 - three bonus credits for your free
05:45 - account make sure you head over to C.M
05:47 - medfree Cod camp or check out the link
05:49 - in the description where you can claim
05:51 - your credits but once you have your
05:53 - account and you're all logged in we're
05:54 - ready to go we're going to use the
05:56 - node.js integration in order to easily
05:58 - list out all of our our images using a
06:00 - server component inside a nextjs so to
06:03 - start off let's head back to our
06:04 - terminal and the first thing we're going
06:06 - to do is going to run npm install
06:08 - cloudinary where once it's finished
06:10 - installing we're going to head back over
06:11 - to our code editor where inside we're
06:14 - going to first import the cloud Nary SDK
06:16 - so at the top of app pages page where
06:19 - the page that I want to actually list my
06:21 - files in I'm going to import V2 as
06:26 - cloudinary from cloudinary now the
06:28 - important thing to not here is that V2
06:31 - is that top level import so we want to
06:32 - make sure that we import V2 but we're
06:35 - going to import it as cloudy for
06:37 - convenience but once we have that
06:38 - imported the first thing we need to do
06:40 - is actually configure our Cloud Nary
06:42 - account so I'm going to add my
06:43 - cloudinary doc config we inside we're
06:46 - going to Define three things we're going
06:48 - to Define our Cloud name our API key and
06:52 - our API secret now let's go grab those
06:54 - values now inside of your Cloud account
06:57 - you can find your credentials right at
06:58 - the top of your program programmable
07:00 - media dashboard now that's inside of
07:02 - your clowner account make sure you
07:03 - select programmable media on this left
07:05 - sidebar and under dashboard you should
07:08 - be able to see your product environment
07:10 - credentials now depending on when you
07:11 - created your account it might look
07:13 - slightly different but generally
07:14 - speaking you should be able to find
07:15 - these you can also note that you can
07:16 - always find your API keys inside of
07:19 - settings and under access keys so make
07:22 - sure that you have different ways of
07:23 - being able to find the keys that you
07:24 - need to configure your account but for
07:26 - now I'm going to go ahead and just use
07:28 - these uh environment cred potentials at
07:29 - the top of my dashboard where we can see
07:31 - we have our Cloud name our API key and
07:33 - our API secret so I'm going to start
07:35 - copying these into the application
07:36 - starting off with the cloud name and as
07:38 - we're starting to configure our cloud
07:40 - account the one thing you want to
07:41 - consider is how you're actually managing
07:43 - these credentials now just using the
07:45 - cloud name if all you're doing is maybe
07:47 - some client side or maybe just grabbing
07:49 - images from your Cloud account your
07:51 - Cloud name can probably just be added
07:52 - inside of the code but we're going to be
07:54 - working with both our Cloud name as well
07:56 - as our API key and our API secret so we
07:59 - don't want to store those in the code
08:01 - just to make sure that those don't get
08:02 - compromised if we accidentally commit
08:04 - them to get or something along those
08:05 - lines so let's use environment variables
08:07 - to configure this so inside of the root
08:09 - of my project I'm going to create a new
08:11 - file
08:12 - called env. looc and I'm going to start
08:15 - off by creating next public cloudinary
08:19 - Cloud name and I'm going to set that
08:21 - equal to my cloud name now no I'm
08:23 - appending next public in front of cloud
08:26 - Nary Cloud name which is important
08:28 - because we want this publicly available
08:30 - or we want this available in the client
08:32 - where we'll later use client side
08:33 - interactions so we want to make sure
08:35 - that we have next public Cloud n Cloud
08:37 - name now we're also going to want next
08:41 - public cloudinary API key where the API
08:45 - key is intended to be used in the client
08:47 - or at least allowed to be used in the
08:48 - client so we're going to make that
08:49 - public as well because we'll be using
08:51 - that for uploading later but then we're
08:53 - going to use our cloudinary API secret
08:57 - and note it's important that you do not
08:59 - add next public in front of this API key
09:02 - because this is only supposed to be used
09:04 - on the server this should not be shared
09:06 - with anybody so let's now fill out those
09:08 - other keys so starting off with the API
09:10 - key I'm going to go ahead and copy that
09:12 - I'm going to go ahead and add it to my
09:14 - variable and then my API secret and I'm
09:17 - going to go ahead and add it here now no
09:19 - I shouldn't be showing you this API
09:20 - secret but because I'm using a temporary
09:22 - account I'm going to reset the
09:23 - credentials but I want you to kind of
09:25 - see how it's actually going to look when
09:26 - you're adding it to your project so just
09:28 - be sure you don't ever share these API
09:30 - key in secret with anybody else other
09:32 - than trying to configure your
09:33 - environment but now moving back into
09:35 - where we're configuring those let's
09:36 - start to add them with process.env
09:40 - dopu and let me make sure I hide myself
09:42 - to not cover this Cloud dinary API key
09:47 - I'm going to also add the API secret and
09:51 - I'm going to do the same thing with my
09:53 - cloud name and be sure to remove next
09:56 - public from the API secret and update
09:58 - cloud
09:59 - name but now that it's configured let's
10:01 - actually start using the SDK so I'm
10:03 - going to first hide my sidebar here to
10:04 - give us a little bit more room but at
10:06 - the top of my home component I'm going
10:08 - to add constant results is equal to
10:10 - await cloudinary api. resources and
10:15 - we're using the resources method to
10:16 - start which is just going to give us all
10:18 - the resources in our inside of our
10:19 - account now there's different ways that
10:21 - you can query your resources whether
10:23 - it's by tag which we'll see later in
10:25 - other ways you can even search your
10:26 - media library but for now let's start
10:28 - with resources and and we're going to go
10:30 - ahead and just console log out the
10:32 - results to see what's inside now inside
10:34 - of your cloud account you should have
10:35 - some images already inside whether it's
10:37 - a brand new account or an existing
10:39 - account with some of your own images but
10:40 - if it is a brand new account Cloud
10:42 - automatically places some sample images
10:44 - in there so that we have something to
10:45 - work with to get started if we head back
10:47 - into our site and we try to refresh the
10:49 - page I'm going to go ahead and open up
10:51 - my developer tools and we're not
10:53 - actually seeing anything in there so let
10:54 - me pull up my terminal actually where if
10:56 - we look inside let me hide myself we
10:58 - actually see all the data there and the
11:00 - reason we see this is because this query
11:03 - is actually running on the server it's
11:05 - not running inside of the client hence
11:07 - why we're seeing it inside of our
11:08 - terminal and we're not actually seeing
11:10 - in the browser in our developer tools
11:12 - and that's completely expected because
11:14 - we're using SSR or server side rendering
11:17 - in in order to get that value and using
11:19 - the node integration in doing so but
11:21 - that's a good thing because now we can
11:23 - make those requests on the server and we
11:24 - can pass it along to the client so that
11:26 - we don't have to include all those
11:28 - resources in JavaScript in order to get
11:30 - that over to the browser so now let's
11:32 - actually try to Loop through these and
11:34 - display them on the page so looking just
11:36 - quickly back at the results we're going
11:37 - to see that we have a top level property
11:39 - of resources and that's going to contain
11:41 - the array of everything that we actually
11:43 - need so heading back to our code editor
11:46 - we know that inside of results we're
11:47 - going to get our resources if I spell
11:50 - that right so let's actually take those
11:52 - resources and we're going to just pass
11:53 - it along to Media Gallery because media
11:56 - Gallery is already expecting a prop of
11:59 - resources and we're going to look inside
12:01 - to see how we can actually configure it
12:02 - to use our cloudinary resources so the
12:04 - first thing I'm going to do is I'm going
12:05 - to pass that along inside so media
12:07 - Gallery is now getting those Dynamic
12:09 - resources now let me navigate over to
12:11 - Media gallery and just to open up the
12:13 - sidebar here we're going into components
12:16 - media gallery and the media Gallery
12:18 - component where we can see we're getting
12:19 - these resources currently it's just
12:22 - expecting an array of those resources
12:24 - and it's just getting the ID now we need
12:26 - to do a little bit of configuration here
12:27 - because it's expecting a cloud resource
12:30 - the funny thing is if we look inside of
12:31 - the browser we already see that we're
12:33 - getting something working we can see
12:35 - that we have a bunch of instances of
12:37 - that cloud andary logo but that's be
12:39 - because it's just looping through that
12:40 - array and it's just adding a static
12:41 - image so now let's make that Dynamic so
12:43 - it's actually showing the image inside
12:45 - of our account now back inside of the
12:46 - code rather than continuing with this
12:48 - manually created object inside of that
12:50 - array I'm going to go ahead and start a
12:53 - new interface and I'm going to call that
12:55 - cloudinary resource because I know I'm
12:57 - going to use that later for other
12:58 - purposes is so I'm going to go ahead and
13:00 - replace that ID and next I'm going to
13:03 - start off by adding some of the details
13:05 - that are going to be inside of this
13:06 - Cloud resource now looking again inside
13:09 - of the terminal hiding myself we're
13:10 - going to be using a few different
13:12 - aspects of this we're going to use the
13:13 - public ID which is just an identifier
13:15 - for that particular asset we're going to
13:18 - use things like the secure URL which is
13:20 - going to actually give us that URL we're
13:22 - going to use the width and the height
13:24 - and we're going to probably be using
13:25 - other things later but for now let's
13:26 - just add those four things so on the
13:28 - cloud resource let's start defining this
13:30 - I'm going to have my height which is
13:32 - going to be a number I'm going to have
13:33 - my width which is going to be a number I
13:35 - have my public ID which is going to be a
13:38 - string as well as my secure URL so I
13:41 - have my height my public ID my secure
13:43 - URL and my width and that for now is
13:45 - going to represent my cloud Nery
13:47 - resource now just to make sure we do
13:50 - have some type errors going on here we
13:52 - can see that the code is currently
13:53 - referencing that ID let me hide myself
13:56 - here we see that we have resource ID
13:58 - resource ID and that was just for some
14:00 - temporary code so that when we spun up
14:02 - the starter we actually saw something so
14:04 - I'm going to replace all these IDs I'm
14:06 - just going to multi select all these by
14:08 - using command D after I highlighted one
14:10 - of them and I'm going to Simply change
14:11 - it to public ID and let me make sure I
14:14 - get everything we have a few more
14:16 - instances here I'm just going to select
14:18 - them all and of course I'm going to upd
14:20 - update those as well to public ID now in
14:23 - addition to the public ID we also want
14:25 - to make sure that we're actually using
14:26 - the dynamic data from that resource so
14:29 - if we look at this image tag here we can
14:30 - see we have the width height and the
14:32 - source so I'm going to go ahead and
14:33 - update all those resource. width we also
14:36 - have our resource. height and we have
14:40 - our resource. secure URL now we don't
14:43 - have any alt value right now and
14:45 - obviously it's not going to be a cloud
14:46 - Nary logo so let's go ahead and just get
14:48 - rid of that string but now we can see
14:49 - we're pulling all of our assets from our
14:51 - Cloud Nary Library whether it's just the
14:52 - samples that came with a new account or
14:54 - anything that you might have added so we
14:56 - can see we can scroll through we can see
14:57 - all these this one looks looks blank but
14:59 - it's actually just a white logo on white
15:01 - background so that's why you can't
15:03 - really see it but we can see that we
15:04 - have all of our images displaying on the
15:06 - page so starting off we're going to get
15:08 - started with one of the more basic but
15:09 - impactful features of cloud Nary and
15:11 - that's optimization now if we head over
15:13 - to our Network Tab and let me hide
15:15 - myself and we filter on our images we
15:18 - can see Let me refresh the page that
15:20 - they're all a decent size they're couple
15:23 - hundred kilobytes each they're getting
15:25 - served as jpegs as pings and what's
15:27 - happening are these images are getting
15:29 - served as is cloud doesn't automatically
15:32 - optimize those imag by default what it
15:34 - does is it Returns the uploaded photo by
15:37 - default where you need to opt into
15:39 - optimization but we can easily do so
15:41 - where we're going to use a new library
15:43 - to accomplish this called Next cloudm
15:46 - which is going to allow us to have an
15:47 - easy to use component inside of an xjs
15:49 - application as well as some other stuff
15:51 - that we'll see later like uploading and
15:54 - we could technically do this using the
15:55 - node integration we could easily
15:57 - construct our URLs to do this but we can
15:59 - a lot more features with with this
16:00 - additional nextjs integration if you
16:02 - want to learn more or see the
16:03 - documentation for next clowner you can
16:05 - head over to next. Cloud dodev where if
16:08 - you click get started you can see all
16:09 - the components available including CL
16:11 - image which we're about to use as well
16:13 - as the clld upload widget and others
16:15 - where we're going to be able to use
16:16 - uploading really easily with the c
16:18 - upload widget so let's get started with
16:20 - the CL image so inside of my terminal
16:22 - I'm going to hide myself and run npm
16:25 - installed next cloudinary and once
16:27 - that's installed I'm going to head back
16:29 - to vs code and we don't actually need to
16:31 - configure anything because if we look
16:32 - back inside of our. looc we already have
16:35 - set up our next public Cloud Nary Cloud
16:37 - name and that's literally all we need to
16:39 - in order to use the components that
16:40 - we're going to use now the upload widget
16:42 - will use the next public Cloud Nary API
16:44 - key and again we already have that
16:46 - configured so we don't need to do
16:47 - anything aside from actually importing
16:49 - the components but what we now can do is
16:51 - we can head back over to our media
16:53 - Gallery component where again that's
16:55 - under components media gallery and this
16:57 - is where we're going to be look working
16:58 - out of for that Gallery I can now import
17:01 - my clld image component from next
17:04 - cloudinary and what I can do now is I
17:06 - can head down to the bottom of my file
17:08 - where I have this image and I'm going to
17:10 - just simply swap that image tag for my
17:13 - CL image and that didn't paste right of
17:15 - course but now we have our it's a dropin
17:18 - replacement for the image tag as long as
17:19 - you have the width the height the source
17:21 - and the alt so it's really easy to
17:23 - configure now the only copy out there is
17:25 - instead of the source being our secure
17:27 - URL which technically Al it can accept
17:30 - URLs with a version in it we want to use
17:32 - the public ID as it's going to just to
17:34 - be a little bit more confident in how
17:35 - we're using it we just a little bit more
17:37 - flexible so I'm going to go ahead and
17:38 - update this to resource. public ID so
17:41 - that I'm passing in my cloudinary public
17:43 - ID to the source of my CLD image but
17:46 - everything else can remain the same and
17:47 - now that I'm heading back to my browser
17:49 - with my Dev server restarted I'm going
17:50 - to go ahead and refresh the page so we
17:52 - can see this network tab but after the
17:54 - page compiles and loads we can see that
17:56 - it's looking a little bit different we
17:58 - can see that we're getting a bunch of
18:00 - webp requests instead of all those jpics
18:03 - now let's just kind of hone in on one we
18:04 - can see this top one C sample 5 we have
18:07 - a now a webp file and we have it being
18:10 - served at 140 kiloby and generally
18:12 - speaking most of these files are
18:14 - definitely smaller than they were when
18:16 - we were serving them before sure some of
18:18 - them are still a few hundred kilobytes
18:20 - because they're big files but generally
18:22 - speaking they're now being served
18:23 - optimized now two things are happening
18:26 - here and let me open up this one as an
18:27 - example where I'm pull myself back in if
18:30 - we look at the URL here first off we see
18:32 - this F Auto what F Auto is going to do
18:35 - is it's going to return the most
18:37 - efficient format automatically so what
18:39 - that means is depending on the browser
18:41 - and the device the browser might support
18:43 - different formats that are more
18:44 - efficient than others where in this case
18:46 - the most efficient format that my
18:48 - account and my browser supports is webp
18:51 - now in some accounts you might be
18:53 - upgraded to Avi depending on your use
18:55 - case uh there's also some other modern
18:57 - formats potentially coming down the line
18:59 - like jpeg XL but for now we have the
19:01 - format that's being delivered for my
19:03 - case which is going to be webp now also
19:06 - looking at Q auto that's going to
19:08 - automatically compress the image to a
19:10 - point where it's not going to visually
19:11 - distort the image so we're going to get
19:13 - the most automatic or the most
19:15 - compression possible while still
19:16 - maintaining the visual uh quality of the
19:19 - image itself so we're having kind of two
19:21 - effects there and how we're optimizing
19:22 - it to deliver as small of an image as we
19:25 - can with the highest quality now we also
19:27 - see that we're also passing passing the
19:29 - C limit where we're passing a width of 3
19:32 - 3,840 and that's actually coming from
19:34 - responsive sizing or in this case we
19:36 - haven't quite configured all the
19:38 - responsive sizing yet so we'll get to
19:39 - that in a second but what this is doing
19:41 - is it's resizing it to
19:44 - 3,840 or because we're using C limit
19:48 - it's only going to resize down from a
19:51 - higher value will and it will never
19:53 - upscale now if this was instead C scale
19:57 - it would potentially upale scale it to
19:59 - that value if the image itself is
20:00 - smaller but because we're using limit it
20:02 - will not upscale and it'll only
20:05 - downscale if it's a smaller value than
20:07 - the image itself now as you'll notice
20:09 - all these are parameters that are
20:10 - getting added to the URL and this is
20:13 - going to be our transformation API which
20:15 - allows us to customize and edit and
20:17 - modify how the image is getting created
20:19 - and delivered now there's a whole lot of
20:22 - different things you can do and you can
20:24 - construct these manually if you want but
20:25 - the library is going to handle this for
20:27 - us and give us a little bit more an
20:28 - easier way to interact with it and
20:30 - achieve the different Transformations
20:32 - that we want if you want to learn about
20:33 - all the different Transformations that
20:35 - are available you can head over to the
20:36 - transformation URL API reference on the
20:39 - cloud documentation but going back to
20:41 - our project I alluded to responsive
20:43 - sizing now let's quickly just inspect
20:45 - one of our images let's keep with that c
20:46 - image 5 where if we look at that URL
20:49 - hide myself again we see that we have
20:51 - our width our height that's the ones
20:53 - that we defined or rather that's what
20:55 - came dynamically from the resource
20:57 - request but then if we we look at source
20:59 - set we can see that it's currently
21:01 - defining these URLs we're seeing those
21:03 - parameters but if we see this width is
21:05 - dynamic depending on the size Now by
21:08 - default the the component which wraps
21:11 - the nextjs image component is only going
21:13 - to give us a one times image and a two
21:15 - times image so that's why you can see
21:16 - the way that the images are configured
21:18 - with those different widths but we can
21:20 - add additional configuration to take
21:22 - advantage of more complex uh responsive
21:25 - sizing now in order to take advantage of
21:27 - that responsive sizing all we really
21:29 - need to do is Define this sizes prop and
21:31 - like I mentioned the CLT image component
21:33 - wraps the nextjs image component so this
21:36 - is a feature that we actually inherit
21:38 - direct inherit directly from nextjs but
21:40 - as we can see for this particular
21:41 - example we're using media query uh
21:44 - sizing where we can say we want to have
21:46 - a Max width of
21:47 - 768 for a 100 viewport width image we
21:51 - have our different configuration for
21:52 - 1,200 and then finally the default of 33
21:55 - viewport width so we can add something
21:57 - similar to our own project if we head
21:59 - back to the code I'm going to start off
22:01 - by adding a sizes prop and I'm just
22:02 - going to Simply set this to 100 viewport
22:04 - width if we head back to the code we can
22:06 - already see that we have a completely
22:08 - different looking Source set where we
22:10 - have a lot of different sizes available
22:12 - I'm going to stop hovering but if you
22:13 - try to look on the right hand side where
22:15 - our source set is for that image tag we
22:17 - can see all those different size
22:19 - parameters and they're going to have
22:21 - different Dynamic values inside of the
22:23 - cloud n URL so now if we try to refresh
22:25 - the page with a smaller viewport size
22:28 - and I start to increase the size of the
22:31 - browser we can see that it's going to
22:33 - keep loading the bigger sizes and only
22:35 - load the smaller sizes at the smaller
22:37 - viewports now we only have it configured
22:40 - to be a 100 viewport with image right
22:42 - now and we can have better Dynamics
22:44 - sizing based off of the sizes that we
22:47 - have where we're showing these grid of
22:49 - images so back in my code I'm going to
22:51 - go ahead and just paste this value in
22:52 - where we can see that we have a default
22:55 - of 50 viewp part width I have one at 768
22:58 - we have a two a three column grid so I'm
23:00 - going to do 33 viewport width when we
23:03 - have 1024 I'm going to do a four grid
23:05 - and 1280 we have a five image grid But
23:08 - ultimately what that sizes prop will do
23:10 - is help the browser determine what image
23:12 - to show out of that Source set list
23:15 - based off those given parameters so it's
23:17 - just more information to help dictate
23:19 - and help to optimize how we're actually
23:21 - delivering those images but now we can
23:22 - see when we're loading those smaller
23:24 - images on smaller devices we can have
23:25 - such a big impact on the size of the
23:27 - image that we're actually deling so now
23:29 - that we're optimizing the way that we're
23:30 - actually delivering these images to make
23:32 - them as performant as possible now let's
23:34 - actually start to get images into our
23:35 - library so let's add uploading now as I
23:38 - alluded to earlier we're going to use
23:39 - the upload widget in order to easily add
23:42 - uploading into our application and we
23:43 - can see here we have an option of two
23:45 - different components we have the upload
23:47 - button and we have the upload widget now
23:49 - the difference between the two is the
23:51 - upload button is just a wrapper around
23:53 - the upload widget where it's just going
23:55 - to render a button with very simple
23:57 - controls where the upload widget will
23:59 - give you a lot more flexibility for how
24:00 - you render and control the experience
24:03 - now for our purposes we just need the
24:05 - upload button so we're going to roll
24:06 - with that where we can see the code to
24:08 - actually add it is pretty simple and we
24:10 - can see that once we have that button we
24:12 - get this really nice widget that gives
24:13 - us a lot of different options for how we
24:15 - upload our image and how we can control
24:17 - that experience so we're going to get
24:19 - started by adding the upload button now
24:20 - looking at our app the place I'm going
24:22 - to add this to is our navigation where
24:24 - we can see here I have this link which
24:26 - is just a placeholder but we're going to
24:28 - add our upload button there so it says
24:30 - upload it has a nice little icon and
24:32 - anytime somebody sees that they can
24:33 - easily click it to upload their new
24:34 - files so back inside of my code I'm
24:36 - going to head over to components and I'm
24:39 - going to open up my navbar where we can
24:41 - see I have that link already available
24:44 - now one caveat with using the upload
24:46 - button or the upload widget is it's a
24:48 - client component and at the time of
24:49 - recording this it requires you to use
24:51 - the use client directive because it's
24:54 - not currently bundled inside of the
24:55 - component so we can see here in this
24:57 - warning if we're using using the app
24:58 - router if you're using the pages router
25:00 - it doesn't matter but our example here
25:02 - is the app router so we need to make
25:04 - sure we add our used client now rather
25:06 - than opting in my entire navigation into
25:08 - a client component I'm going to go ahead
25:10 - and create a new component that's going
25:11 - to wrap that button so I'm going to call
25:13 - it upload button. TSX and if we notice
25:16 - here I'm using a different pattern for
25:18 - how I'm managing this component just out
25:19 - of Simplicity for this demo so I have
25:21 - this top level file under components but
25:23 - I'm going to call it constant upload
25:25 - button is equal to my component function
25:28 - I'm going to ultimately return something
25:30 - but at the bottom I'm going to export my
25:32 - default upload button now importantly
25:35 - let's import our clld upload button from
25:40 - next Cloud Nary I need to also make sure
25:42 - I opt this into a client components but
25:45 - then let's actually render out our
25:47 - component just to get started now back
25:50 - inside the navigation I can now import
25:52 - my upload button component I'm going to
25:55 - go ahead and replace my link with that
25:58 - upload button and just to kind of
26:00 - explain something here our navigation is
26:03 - a server component but because it's a
26:05 - server component I can't do client
26:07 - component like things such as use use
26:10 - effect use state or anything that's uh
26:12 - required inside of the client inside of
26:14 - this particular component but what I can
26:16 - do is I can render client components
26:19 - inside where once that branch of the
26:21 - component opts into the client I can do
26:24 - whatever I want inside the client inside
26:26 - of this particular component now when we
26:28 - head back over to the browser we can
26:30 - already see that this changed from link
26:31 - to upload and let's give it a quick try
26:34 - if I click it we can already see that we
26:35 - have our upload widget and literally
26:37 - that's all we did we didn't really need
26:38 - to do much now if we try to upload
26:41 - something it's not going to quite work
26:42 - yet because we have to do one of two
26:44 - things now when you're uploading to
26:46 - Cloud you have two options you either
26:48 - have unsigned uploads or you have signed
26:50 - unsigned uploads is basically saying
26:52 - you're allowing anybody to upload as
26:54 - long as they pass in a particular upload
26:56 - preset or basically a a default
26:58 - configuration for those uploads now we
27:01 - want to go the more secure route so
27:03 - we're going to use signed uploads which
27:04 - means every time we make an upload
27:06 - request we're going to use our API
27:08 - credentials our key in secret to sign
27:11 - that request when it's getting uploaded
27:13 - just to make sure that we have control
27:14 - over what's actually getting uploaded to
27:16 - our account now heading back to the
27:18 - documentation for a second what we're
27:19 - going to do is we're going to create a
27:20 - new API endpoint where anytime that the
27:23 - upload process occurs it's going to
27:25 - First grab that signature from the
27:27 - endpoint and then pass it along through
27:29 - the upload process now to find an easy
27:31 - to reference example of this we can head
27:33 - over to the upload widget section where
27:35 - we can see signed uploads we're here
27:38 - we're going to be able to find an
27:39 - endpoint that we can simply copy and
27:40 - paste into our project now we can see
27:43 - that we need to install cloudinary which
27:44 - we did we need to set up our credentials
27:47 - which we did where all we need to do is
27:49 - we need to Define that signature
27:50 - endpoint on as a prop on our upload
27:53 - button and then we just simply need to
27:55 - create this new API rout so now let's
27:57 - start off by creating this sign Cloud
28:00 - Nary parameters route so I'm going to go
28:02 - ahead and just copy that because we're
28:03 - just going to create it as it says in
28:04 - this documentation I'm going to head
28:05 - back to my code and under app I'm going
28:08 - to create a new folder called API inside
28:11 - API a new folder called Cloud sign cloud
28:14 - pams and I'm going to create my route.
28:16 - ts file inside of that now back to the
28:18 - documentation I'm going to again just
28:20 - simply copy and paste this code because
28:22 - it has everything I need including using
28:24 - the node SDK in order to sign that
28:26 - request so I'm going to go ahead and
28:27 - paste that into my project I'm going to
28:30 - go ahead and trim that white space I
28:31 - need to fix that but we can see all we
28:33 - need to do now is Define that signature
28:35 - endpoint so inside of my upload button
28:37 - code I'm going to Define signature
28:39 - endpoint and I'm going to specify it as
28:42 - my SL API hide myself SL API sign Cloud
28:46 - Nary prams but now heading back into the
28:48 - project let's go ahead and click upload
28:50 - again I'm going to now browse for a file
28:52 - let's go ahead and add this picture over
28:53 - brail we can see that it's successfully
28:56 - uploaded and I now have that photo I'm
28:58 - going to go ahead and click done but we
28:59 - can't see it actually in our page and
29:02 - that's because we're not currently
29:03 - refreshing the page once we have a
29:05 - successful upload now let's double check
29:07 - that it did upload though so I'm going
29:08 - to head over to my console and if I
29:10 - refresh the page
29:13 - here we can see that the image does now
29:15 - show up so I did successfully upload it
29:17 - now before we move on on figuring out
29:19 - how we actually refresh the page I want
29:21 - to do one thing and I like to have a
29:22 - little icon along with my upload button
29:24 - just to give a quick visual
29:25 - representation of what it is it makes a
29:27 - little bit easier to find as well in
29:29 - order to support icons in the project
29:31 - I'm currently using Lucid react we can
29:34 - see I'm currently using the image icon
29:36 - in order to show the photos option
29:39 - inside of the sidebar which if we looked
29:41 - at the left hand side of the template we
29:43 - can see it readly available there Lucid
29:45 - react is really easy to install if you
29:46 - don't have it yet inside of your project
29:48 - so you go can go ahead and configure it
29:49 - there if you're following along with the
29:51 - template it should already be ready to
29:52 - go but once we're there we can head over
29:54 - to the icons page where we can search
29:56 - for and find the different icons we want
29:58 - so I'm going to go ahead and just search
29:59 - for upload for instance and we can see
30:01 - we have a bunch of examples now the one
30:03 - that I want to use I'm going to Simply
30:04 - import upload from Lucid reacts and now
30:09 - we can actually break down our upload
30:11 - button components just to make it a
30:14 - little bit easier to navigate around I'm
30:17 - going to close tag that but then inside
30:20 - what we can do is anything you pass as a
30:22 - child into the upload button it's going
30:25 - to render inside of the actual button
30:28 - itself so I'm going to add my upload
30:31 - icon and then the upload text back
30:33 - inside now if we look back at the
30:34 - project we can see that well it worked
30:36 - but not quite as we expect so let's add
30:38 - some Styles now first of all I want to
30:40 - resize that icon a little bit so I'm
30:42 - going to add class name and specify
30:44 - width of four height of four and we can
30:47 - see I'm using Tailwind for my sizes it's
30:49 - already configured in that template you
30:50 - can use your own styling solution
30:52 - depending on what you want to use but I
30:53 - also want to be able to put those icons
30:55 - and the label on the same line and then
30:58 - Center Center them vertically so what
31:00 - I'm going to do is I'm going to wrap it
31:01 - in a span I'm going to close that tag
31:04 - and then on the span I'm going to first
31:06 - Define Flex to use flex box I'm going to
31:09 - add a gap of two and then I'm going to
31:11 - say items Center and I'm going to hide
31:13 - myself just to make sure that you can
31:15 - see this and I'm not covering myself up
31:17 - so we have Flex a gap of two to add
31:20 - space between the icon and the label and
31:22 - we're going to align them Center and as
31:24 - we can see that's looking a lot better
31:25 - we have our icon and it still works just
31:27 - as expected now another thing that I
31:29 - want to do is when we upload if I select
31:32 - a file again and select upload we can
31:34 - see that the UI just kind of sits there
31:36 - I have to manually select done which
31:38 - again let me hide myself we can see this
31:40 - orange button I have to manually hit
31:42 - done in order to close that so what kind
31:45 - of options do we have to get that out of
31:46 - the way so it's not intrusive on the UI
31:49 - once it finishes uploading now in
31:51 - addition to the signature endpoint we
31:53 - can Define some other options on our
31:55 - upload button so I'm going to specify an
31:57 - options prop and on this I'm going to
31:59 - say Auto minimize and set that to true
32:03 - so now when I try to use the upload
32:04 - widget again and select a new file we
32:06 - can see that it automatically goes down
32:08 - I'm going to hide myself again it
32:10 - automatically goes to the bottom right
32:12 - of the page and you can also configure
32:14 - the location of that but I'm pretty
32:15 - happy with the default of it being there
32:17 - we can even open it back up if we want
32:19 - and we can even upload more but we can
32:21 - see that it collapses down to the bottom
32:23 - right of the Page by default now moving
32:25 - on to how we're going to actually
32:26 - refresh this data on the page in the
32:28 - world of server components and client
32:30 - components we need to consider how
32:32 - they're going to communicate with each
32:33 - other and there's not a lot of great
32:34 - options or at least not complicated
32:37 - options for how we can refresh that
32:39 - particular server component from the
32:41 - client but what we can do is we can
32:43 - render that initial data as we're doing
32:45 - now we're going to pass that to the
32:47 - client and then we can use a different
32:48 - solution to take over and in particular
32:50 - we can use tan stack query where what
32:53 - we'll do is we'll take that initial data
32:55 - we'll pass it to tanat query and then
32:57 - any subsequent subsequent request or
33:00 - when we're finished uploading something
33:02 - we're going to add that data to the
33:04 - tanat query data store now if you want
33:06 - to learn more about tanat query or
33:08 - previously react query you can head over
33:10 - to the documentation but we're going to
33:12 - go ahead and just dive in and get
33:13 - started and work through the example so
33:15 - we can see we can get started by
33:16 - installing tanack SL react query so
33:19 - inside of my terminal I'm going to npm
33:21 - install tan stack react query now once
33:24 - that's finished installing I'm going to
33:26 - head back to my code and now we need to
33:28 - think about how we're going to approach
33:29 - this where we have two aspects of how
33:31 - we're going to use Query where the first
33:33 - one is actually the use Query hook
33:35 - itself which is going to allow us to
33:36 - make that Fetch and manage the state of
33:38 - that but what we need to do is also
33:39 - install what's called a provider around
33:42 - our application so that we can have
33:44 - access to that State anywhere inside of
33:47 - the tree underneath that provider now to
33:49 - do that we're going to head over to our
33:51 - layout component where here if we
33:53 - install the provider at the layout
33:55 - that's going to give the opportunity for
33:56 - any component
33:58 - in the tree of our application to have
34:01 - access to that query provider now the
34:03 - tricky thing is because we're dealing
34:05 - with server components and client
34:06 - components this is currently a server
34:09 - component and query needs to run on the
34:11 - client but what we can do is we can use
34:13 - what's called The Donut pattern where
34:15 - essentially we're going to add a client
34:17 - component on our page but as child we're
34:20 - going to still pass through those server
34:21 - components so it can act like nothing
34:23 - happened as we're passing the server
34:25 - components basically through that donut
34:27 - of a client component which is going to
34:29 - be our provider now I'm pretty much
34:31 - going to follow along with the tanack
34:32 - query documentation here we're under
34:34 - Advanced server rendering we can find
34:36 - server components and nextjs apppp
34:38 - router where if we scroll down a little
34:40 - bit we can see that it recommends to
34:41 - create a new file called app providers.
34:44 - jsx where we'll ultimately copy and
34:46 - paste this code in where we're going to
34:48 - create that provider which will later
34:50 - import into our layout so the first
34:52 - thing I'm going to do is I'm going to
34:53 - copy this and we'll go over it in a
34:54 - second but back inside the code under my
34:57 - after Dory I'm going to create that
34:58 - providers. TSX file and I'm going to
35:01 - paste that in as is now I'm going to
35:03 - hide myself immediately we see a
35:04 - typescript issue so I'm going to go
35:06 - ahead and type that out as children
35:08 - react node and we want to make sure we
35:11 - update that import a little Quick Trick
35:13 - is hitting command period when you have
35:15 - that selected so that I can hit update
35:17 - import from react and all that really
35:19 - did was at the top we can see we're now
35:20 - importing it from our react package but
35:23 - going through the rest I'm not going to
35:24 - go through this too granularly but we
35:26 - can see that we're importing our query
35:28 - client and the query client provider and
35:30 - really we're just using some optimized
35:31 - settings for making it work between the
35:33 - server and the client uh rendering life
35:35 - cycle so we're going to just kind of
35:37 - skip through that part if you want to
35:38 - look more at the documentation I would
35:40 - encourage you to read through that uh
35:42 - serers side rendering page inside the
35:44 - documentation But ultimately we're
35:46 - exporting these providers and now we
35:48 - want to bring it in and actually wrap it
35:51 - inside of our our layout so if we head
35:53 - back to that documentation page we can
35:55 - scroll down where we see that we're
35:57 - going to want to now import that
35:58 - providers file and we're going to simply
36:00 - just wrap our children with it inside of
36:01 - our layout so inside a layout I'm going
36:03 - to go ahead and paste in that providers
36:05 - and like I said we're going to go ahead
36:07 - and wrap our children with it and now
36:09 - that we have that all set up we can
36:11 - actually start making our queries inside
36:12 - of our project so we're going to head
36:14 - back over to our media Gallery which is
36:16 - where we're going to actually request
36:18 - that data so the first thing I'm going
36:19 - to do is I'm going to import use Query
36:22 - from at tanack I'm going to hide myself
36:25 - here react query and with that I'm going
36:28 - to go ahead and scroll down into my
36:30 - component where I'm going to Now set up
36:32 - a use Query instance where I'm going to
36:36 - pass in an object for my configuration
36:38 - where the first thing I want to do is I
36:39 - want to set up a query key and for that
36:41 - let's call it resources it's going to be
36:44 - an array where we pass in these query
36:45 - keys and then we're going to want to set
36:47 - up a query function which is going to be
36:49 - the actual fetcher for what we're going
36:50 - to request so let's set up that function
36:53 - it's actually going to be async and
36:55 - here's where we hit a little bit of a
36:56 - hitch where we actually need to be able
36:58 - to request these resources somehow and
36:59 - again we're inside the client of this of
37:02 - this application so it's not like we
37:04 - have direct access to use the node SDK
37:06 - here so what we're going to do is we're
37:07 - going to create an API endpoint where we
37:10 - can request those resources using this
37:12 - fetch request so I'm going to head back
37:14 - over to my sidebar where I'm going to
37:16 - under my API directory I'm going to
37:18 - create a new folder called
37:20 - resources and inside I'm going to create
37:23 - a new file called route. TS where here
37:26 - I'm going to export and an asyn function
37:29 - called get because ultimately we're
37:30 - going to make a get request where now I
37:32 - can start to import the cloud SDK to
37:33 - make it easier to get those actual
37:35 - resources so we already created that
37:37 - sign clowner prams file so I'm going to
37:39 - go ahead and just copy the snippet from
37:40 - the top of that and I'm going to go
37:41 - ahead and paste it right at the top
37:43 - where now that we have Cloud imported I
37:45 - can now destructure resources since we
37:48 - know what it looks like from an earlier
37:50 - from the page earlier going to hide
37:51 - myself where we're going to await cloud.
37:54 - api. resources and once we have those
37:57 - res sources I can now return the
37:59 - response object. Json method where I'm
38:02 - going to pass in my data as my resources
38:05 - but now back inside of our query
38:07 - function I can start to query for that
38:08 - actual data so I'm going to say uh await
38:12 - fetch where I'm going to hit the API
38:14 - resources endpoint let me hide myself
38:16 - again I'm going to turn that
38:19 - into then r r Json where I'm going to
38:24 - destructure my data from that and then
38:27 - ultimately I want to return that data
38:30 - but now that we have that used query set
38:32 - up we know that used query is going to
38:34 - actually return some data for us along
38:36 - with a lot of other things like the
38:37 - status of that request so I'm going to
38:40 - destructure my
38:42 - data from use Query and let's console
38:45 - log that out just to see what that looks
38:48 - like if we head back to the browser and
38:50 - let me hide myself here we can see that
38:51 - our data is being logged out and we can
38:53 - see that we currently have 10 resources
38:55 - which matches what we have inside of the
38:57 - actual Gallery page but we can see for
38:59 - each of these we have all the
39:00 - information that correlates to a
39:01 - cloudinary resource so we were able to
39:03 - just make that request on the client but
39:05 - one thing that we have here is notice
39:06 - that the data is first undefined but
39:08 - we're already quering that from the
39:10 - server so how can we actually pass that
39:12 - initial data through from the server to
39:14 - the client so that we have what we
39:16 - already have available now back inside
39:18 - of the code our Ed query Hook is also
39:20 - going to take a property called initial
39:22 - data where we already are grabbing those
39:24 - resources from the server so why can't
39:26 - we just pass those right along through
39:27 - and that's exactly what we're going to
39:29 - do where I'm going to take these
39:30 - resources and I can actually just rename
39:32 - this as initial resources and I'm going
39:36 - to set this initial data property as my
39:39 - initial resources but then just to make
39:41 - it a little bit easier on myself I can
39:42 - rename data to resources and now let's
39:45 - console log out that resource to see
39:47 - what it looks like and once we reload
39:49 - the page we can immediately see that we
39:51 - now only have that one resources log
39:53 - that includes all that data because it's
39:55 - using that initial data and passing it
39:56 - through to the client now this is
39:58 - working really well for being able to
40:00 - manage that life cycle between the
40:02 - server and the client but we have one
40:03 - problem here we want to be able to add
40:05 - new resources to that state so that
40:08 - whenever we upload an image from that
40:10 - upload button we're able to push it into
40:12 - that state but before we even get to
40:14 - that point one additional issue is we
40:17 - don't have access to that Navar button
40:20 - directly inside the media Gallery so
40:22 - what we're going to first do is we're
40:23 - going to take this used query instance
40:26 - we're going to put it into our own own
40:27 - hook instance and we're going to be able
40:29 - to share that hook between the media
40:31 - gallery and then the navigation so the
40:33 - first thing I'm going to do is I'm going
40:34 - to create a new directory inside of my
40:36 - source called Hooks and inside of hooks
40:40 - I'm going to create use resources. TS
40:44 - now inside of here I'm going to export a
40:46 - function called use resources where the
40:50 - first thing I'm going to do is I'm going
40:50 - to basically just copy everything and
40:52 - paste it into here so let's go back to
40:53 - the media Gallery where I'm going to
40:55 - grab first of all the import for used
40:58 - query and let's paste that in the top
41:00 - I'm going to grab the actual query
41:02 - information itself let's keep that
41:04 - console log in there just so that we can
41:06 - test it out as we're working through
41:07 - this we need to make sure we have that
41:10 - uh in instance of the initial resources
41:12 - so what we're going to do is we're going
41:13 - to allow instances of used resources to
41:15 - actually pass in options and inside
41:17 - those options we're going to take those
41:19 - initial resources so I'm going to first
41:20 - Define that argument of options and
41:22 - let's name this a new interface of use
41:26 - resources
41:27 - and I'm going to set up my options to
41:30 - reference that now here we're going to
41:32 - want to grab those initial resources
41:34 - which is going to be an array and we
41:35 - need to Define that type if you remember
41:38 - before we already created a cloud n
41:40 - resource so first let's grab that and
41:41 - let's abstract that so we can import
41:43 - that in both places if you remember we
41:45 - actually created that clowner resource
41:47 - at the top of media Gallery the same
41:49 - place that we were using it before so
41:50 - the first thing I'm going to do is I'm
41:51 - going to cut this out of this particular
41:54 - file and again inside of my source
41:56 - directory I'm going to create a new
41:57 - folder called types inside of types I'm
42:00 - going to create a cloud. TS file where
42:03 - I'm going to Simply paste in that
42:04 - cloudinary resource I'm going to export
42:07 - that interface of cloud Nary resource so
42:09 - if you're following along we grabbed the
42:11 - media Gallery Cloud Nary resource which
42:13 - we had previously created and we're
42:15 - creating a new file that contains that
42:17 - so that we can share it between the
42:19 - different files so now let's head back
42:21 - to Media Gallery where we can resolve
42:22 - that type issue now and I could import
42:24 - my cloudinary resource that I just
42:27 - created from at types cloudinary we can
42:31 - see that that cloudinary resource should
42:32 - be now resolved so now let's also bring
42:35 - that into our Ed resources hook so I'm
42:37 - going to go over to use resources I'm
42:40 - going to paste that in as well and now
42:42 - because I can share it between the two
42:43 - files I can say that my initial
42:45 - resources is going to be an array of
42:47 - those Cloud Nary resources so now let's
42:49 - continue wiring this up so that it works
42:51 - as we expected to now first of all our
42:53 - initial resources of course that's now
42:55 - going to come from our options so let's
42:57 - add options and let's optional chain
42:59 - that just in case it's not being passed
43:01 - in and we can make sure that we're now
43:02 - going to return our resources so I'm
43:04 - going to go ahead and return a new
43:07 - object I'm going to return those
43:08 - resources as is but now we have our
43:10 - basic cook configured where we can start
43:12 - to actually use it inside of our project
43:14 - so I'm going to head back over to Media
43:16 - Gallery where now let's import our use
43:19 - resources hook make sure I have a
43:21 - capital R from App
43:24 - hooks use resources and then at the top
43:28 - of my file I can say constant resources
43:31 - which I'm going to destructure from use
43:33 - resources and of course we want to make
43:35 - sure that we pass in our initial
43:37 - resources right through to that hook but
43:40 - now just to make sure that everything is
43:41 - still working as we expected to I'm
43:43 - going to go ahead and console log out
43:45 - our resources and if we refresh the page
43:48 - we can see that it's still working
43:49 - exactly as expected so now let's start
43:51 - to add that mutation angle so tanat
43:54 - query comes with the concept of mutation
43:56 - where we can wrap a request similar to
43:57 - what we did with the used query hook
44:00 - only it's meant for changing data now
44:02 - the problem with that though is we don't
44:03 - really need it because all the uploading
44:04 - happens automatically for us from within
44:06 - this widget so how can we still tap into
44:09 - that life cycle where we can push the
44:10 - resources into State and also maybe
44:13 - invalidate it so that it'll then refresh
44:15 - and get the most fresh content directly
44:17 - from the server so we're going to take
44:19 - advantage of something called the queery
44:20 - client which is going to give us the
44:21 - ability to both set and invalidate our
44:23 - data where specifically once we import
44:25 - this we not have access to do something
44:27 - things such as set query data where it's
44:30 - going to allow us to set the updated
44:32 - data by using the cache keys and then
44:35 - we're going to also use invalidate
44:37 - queries where we can pass in the queries
44:39 - that we want to invalidate and
44:40 - specifically the ones related to the
44:42 - upload we just made so starting off back
44:44 - inside our use resources hook I'm going
44:46 - to import the use Query client hook
44:49 - where we're going to set that up at the
44:50 - top of our use resources hook where I'm
44:52 - going to say constant query
44:54 - client is equal to use use Query client
44:58 - so now I'm going to scroll down and I'm
44:59 - going to create a new function and I'm
45:01 - going to call that add resources and
45:03 - this function is going to be what I use
45:05 - to pass the resources to eventually set
45:07 - that into the query data so I'm going to
45:09 - take that add resources I'm going to
45:11 - return it from my hook where then inside
45:14 - of the upload button I want to now get
45:16 - that function from the hook so I'm going
45:19 - to import my use
45:21 - resources from a hooks use resources let
45:25 - me hide myself to make sure I'm not
45:26 - covering anything up and then I'm going
45:27 - to destructure that add resources from
45:32 - my used resources hook now one thing
45:34 - that we immediately see is we're going
45:35 - to get a typescript error on that and if
45:37 - we head back to our Ed resources hook
45:39 - and scroll up to the top one thing that
45:40 - we never did is we never made options
45:42 - actually optional so the first thing I
45:44 - going to do is make that optional and
45:45 - then similarly on initial resources I'll
45:48 - also make that uh optional as well
45:50 - because we don't need to necessarily
45:51 - pass in the initial resources if we
45:52 - don't have them now going back to the
45:54 - upload button now that we have this add
45:57 - resources function I ultimately want to
45:59 - trigger that anytime we have a
46:01 - successful upload now fortunately on the
46:03 - clld upload Button as well as some other
46:05 - events we have on success so I'm going
46:07 - to add an on success call back if I
46:10 - spell that right and I'm going to set
46:12 - that as handle on success where now I
46:15 - can start to Define that handle on
46:18 - success function where this is
46:19 - ultimately going to receive results
46:22 - where in order to type this out we
46:23 - currently have to import that from the
46:25 - next Cloud n package so I'm going to go
46:27 - up to my next cloudinary import I'm
46:29 - going to hide myself just to make sure
46:30 - this is all clear and I'm going to
46:31 - import
46:33 - cloudinary upload widget results and
46:37 - then I'm going to go ahead and set the
46:38 - type for my actual results and let's
46:41 - just log this out for a second just to
46:43 - kind of see what's going on if we head
46:45 - back to the page and refresh and we try
46:46 - to actually upload something let me
46:48 - select my file and upload it we can see
46:51 - that we get that results event or we can
46:54 - see it's a success and then we get our
46:56 - info where that info is essentially
46:57 - going to be the resource that we have
46:59 - it's going to include all the
47:00 - information we need it includes a little
47:01 - extra information related to the uh
47:04 - upload widget success where we can see
47:06 - like the batch ID for instance but
47:08 - ultimately this is going to be the info
47:09 - that we're going to use in order to push
47:11 - it into our state so let's do just that
47:13 - where the results doino is going to be
47:16 - what we need so what we can do is on add
47:18 - resources we can push that directly
47:20 - through and we're going to accept that
47:22 - as an array so that in the future we can
47:24 - always push in multiple resources if we
47:25 - want to and especially just makes it a
47:27 - little bit easier because we know that
47:29 - our state is an array of resources
47:31 - anyway so I'm going to pass this in as
47:33 - results. info and we can see that we
47:35 - still get a typescript err because we
47:37 - need to cast this as a cloudinary
47:39 - resource so I'm going to go ahead and
47:41 - import cloudinary resource from I'm
47:44 - going to hide myself at
47:46 - types cloudinary where I'm going to go
47:49 - ahead and cast that as cloudinary
47:52 - resource and we're still getting a type
47:54 - air but let's head over to our actual
47:56 - add resources uh function where we never
47:58 - actually set that up to receive the
48:00 - results so first let's add that argument
48:02 - of results and we know that we need to
48:05 - set the type of this as well where we're
48:06 - going to receive again that array of
48:08 - cloud nning resources so now let's again
48:11 - take a quick checkpoint just to make
48:12 - sure that this is working so let's
48:14 - console log out our results from add
48:17 - resources I'm going to add add resources
48:18 - in the front of that just to make sure
48:19 - we know which one we're looking at and
48:21 - I'm going to go ahead and clean that up
48:22 - from the handle on success function
48:24 - itself but again I refresh and I'm going
48:26 - to upload yet another
48:29 - image and we can see once it's uploaded
48:32 - we do get that add resources results and
48:34 - I can expand it and we can see all the
48:35 - information related to it so now that
48:37 - we're successfully passing it into the
48:39 - hook let's now use that data to actually
48:41 - add it into the state so that eventually
48:43 - we want to refresh it on the page now
48:45 - looking back at the set query data
48:47 - method we want to be able to pass in two
48:49 - arguments first we have the query key
48:51 - which is similar to what we were doing
48:52 - with the use Query hook as well but then
48:54 - we have an updator which is going to be
48:56 - a fun where we're going to take our old
48:58 - data and merge it with our new data so
49:01 - now back inside the code I'm going to
49:02 - take advantage of that query client
49:03 - where I'm going to say query client. set
49:05 - query data where the first thing we need
49:08 - to do again is add those tags and we can
49:10 - see similar to query data up here I'm
49:12 - going to just simply copy that same
49:13 - query key and I'm going to hide myself
49:15 - as we're adding this but then we have
49:17 - the second thing which is going to be
49:19 - that updater so that's going to be a
49:20 - function where the argument is going to
49:22 - be old where we have that old data that
49:25 - we want to add and then we want to merge
49:26 - it with new so what I'm going to do is
49:28 - I'm going to return a new array where
49:30 - I'm going to spread out my old data but
49:33 - I'm also going to take the results and
49:34 - I'm going to spread that out before now
49:37 - yet again the query system doesn't know
49:39 - what kind of data I'm passing through so
49:41 - I'm going to go ahead and type out this
49:42 - old data so that I can add it as a
49:44 - cloudinary resource and we can see it
49:46 - makes it happy and if we go back to
49:48 - upload button we can see that we're
49:50 - passing through that data and we come
49:51 - back to the ad function the ad resources
49:54 - function where it's going to set that
49:55 - query data based B on that same query
49:58 - key where then it's going to again merge
50:00 - the old data with the new one and since
50:02 - we want to have it appear at the top of
50:04 - the list in chronolog chronological
50:06 - order it's going to put it in the front
50:08 - of that array so now let's try that out
50:10 - I'm going to go ahead and upload a new
50:12 - image I'm going to select it let's go
50:14 - with this bottom one where we can see
50:16 - after it's uploaded we can now see it
50:18 - immediately appear inside of the actual
50:20 - UI now this all works fine and well but
50:22 - it's technically not a representation of
50:25 - the server because we didn't actually
50:27 - request this resources list from the
50:29 - server we pushed it in based off an
50:31 - assumption that it was successfully
50:33 - added now theoretically it should be
50:35 - completely fine but just to make sure
50:37 - that we are getting the completely fresh
50:38 - data that there wasn't an error
50:40 - somewhere we can now invalidate that
50:42 - query so it then goes and tries to make
50:44 - a fetch request to get the real content
50:47 - from the server and if there's any
50:48 - changes we'll have that reflected again
50:50 - in the UI so back inside of the code I'm
50:52 - going to again use the query client but
50:54 - this time I'm going to use invalidate
50:57 - queries where this invalidate queries is
50:59 - going to take an object where we can
51:00 - pass in a query key and similarly that's
51:03 - going to be our
51:05 - resources now this time instead of just
51:07 - watching the console log I'm going to
51:08 - open up the network tab where I'm going
51:10 - to go ahead and trigger a new upload
51:12 - just as we usually do and we can see
51:15 - after it was successfully uploaded it
51:16 - did add it but we have another request
51:18 - now in the network tab where we now have
51:20 - that resources request that's
51:22 - immediately going to happen after we
51:24 - push it in the UI because we invalidated
51:26 - that query we can see we have a preview
51:28 - and a response of all the data that came
51:30 - back so we know for a fact that the
51:32 - image is now available in our resources
51:34 - list now just as a quick note this
51:36 - pattern is called optimistic UI or
51:38 - optimistic updates where as soon as we
51:40 - have that information we're going to
51:41 - push it into the UI and then later
51:43 - validate it now it's technically a
51:45 - little bit different the way that we're
51:46 - doing it because we're doing it on
51:48 - successful upload but maybe you have a
51:50 - listed to do is where you have that text
51:51 - and you can immediately push it in or
51:53 - maybe what we're not going to actually
51:54 - cover is here maybe you can grab that
51:56 - local file push that into the UI
51:58 - immediately and then later validate it
52:00 - on the server but either way it's a good
52:02 - pattern to make the UI feel responsive
52:04 - as you're doing that upload but we can
52:06 - see that if you are using the mutation
52:08 - function inside of a a future request
52:10 - you can actually just control this using
52:12 - their recommendation by finding the
52:14 - optimistic updates page inside of the
52:16 - tanat query documentation now moving on
52:18 - I went ahead and deleted some of the
52:20 - images that I uploaded because I want to
52:21 - show the next issue where we can see
52:23 - that we're currently showing all the
52:25 - images in the account including
52:26 - including all those sample images that
52:28 - come with the account now those are
52:29 - great for being able to test things out
52:31 - but we only want to show the images that
52:33 - we're actually intentionally uploaded
52:35 - into our photo library so we're
52:37 - currently using the resources method
52:40 - where if we head back inside of our code
52:41 - where we can either look the API
52:43 - resources route or we can look at the
52:44 - page where we're quering that we can see
52:46 - that we're using that resources method
52:48 - from the cloud API now this is again
52:51 - working really well for our current use
52:53 - case just to get the data on the page
52:55 - but now we can start to narrow down how
52:56 - we're going to query that and we can do
52:58 - that by using tags where what we're
53:00 - going to do is we're going to First tag
53:03 - every single upload that we make from
53:05 - this page and then we're going to only
53:07 - query for resources that match that tag
53:10 - so starting off inside of the upload
53:12 - button let's first tag every single
53:14 - upload that we make from this account so
53:16 - I'm going to go ahead and inside of my
53:18 - options on the clld upload button I'm
53:20 - going to add a new property of tags I'm
53:22 - going to add an array where I'm going to
53:24 - Simply add media that's just a pretty
53:26 - generic word and that's tags that's just
53:28 - a pretty generic word to represent any
53:30 - kind of image or video that I upload and
53:32 - right now we're currently focusing on
53:34 - images but it still is a good
53:35 - representation you can really name that
53:37 - every anything you want you can name it
53:38 - photo box like you can see in that demo
53:40 - that I mentioned earlier or really
53:42 - anything that's just going to basically
53:43 - represent your images inside of your
53:45 - library but now let's actually upload
53:47 - something so I'm going to go ahead and
53:49 - click upload I'm going to select my file
53:51 - and how about this nice picture of
53:52 - Grease where we can see once it's
53:54 - uploaded I'm going to go over to the
53:55 - network tab and let's go look at this
53:57 - upload request where we can see under
53:59 - tags we have media so now if we head
54:02 - over to our media library I'm going to
54:03 - refresh the
54:05 - page we can see our new picture and if I
54:08 - go over to my metadata we can see that
54:11 - it has that new tag of media so now
54:14 - let's try to only pull in the images
54:16 - from our account that matches that tag
54:19 - so back inside of my code I'm going to
54:20 - start off with the page for the server
54:22 - request and then we're going to move on
54:23 - to that API route we're under the pages
54:26 - app pages page where I'm making that
54:29 - initial request instead of the API
54:31 - resources I'm going to do Resources
54:34 - by tag where I'm going to go ahead and
54:37 - paste or add in that media tag and just
54:40 - to make sure that we can clearly see
54:42 - that we see that Resources by tag and
54:44 - I'm passing in that string of media now
54:46 - because we know that that's going to
54:48 - refresh inside the client let's head
54:49 - back over to that API route we're under
54:51 - app API resources route we're going to
54:54 - update that as well to resources by tag
54:57 - and I'm going to additionally pass in
54:59 - media but now if we go back to the
55:00 - application and refresh we should see
55:02 - that we only have that one image display
55:05 - because it's the only image in our
55:06 - account that's actually matching that
55:08 - tag so at this point I'm going to go
55:09 - ahead and clean up my media library a
55:11 - little bit I'm just going to go ahead
55:12 - and delete the images that I uploaded
55:14 - that don't match that tag and I'm just
55:16 - going to leave those samples in there as
55:17 - well it's really up to you for how you
55:19 - want to manage your own media library
55:21 - and it looks like I got a little
55:22 - aggressive there and I deleted the uh
55:23 - grease one too but we can know that we
55:25 - can simply up upload a new file such as
55:28 - this picture of Brazil and we can see
55:30 - once it's uploaded it's going to be
55:32 - immediately added to the UI now it's
55:33 - time for a little bit of an optimization
55:35 - where as we were adding this hook to our
55:37 - navigation for that upload button we
55:40 - started to create a little bit of an
55:41 - issue where because we're first defining
55:44 - our initial resources as undefined it's
55:47 - getting rendered that way and if we look
55:49 - and refresh the page we see that we
55:51 - don't get the image as fast as we were
55:53 - before and we also see immediately from
55:55 - the media gallery that we're conso
55:57 - logging out that undefined resources
55:59 - first so how can we address that now
56:01 - going back to the code I'm going to
56:03 - approach this by two angles the first
56:04 - one being if we're adding this hook
56:06 - inside of our navigation I don't want to
56:08 - even make any kind of fetch to begin
56:10 - with so the first thing we can do is the
56:12 - used query hook has a property called
56:14 - enabled which we can set dynamically
56:17 - based off of where where we're actually
56:19 - adding this so what I'm going to do is
56:20 - I'm going to add a new property of
56:23 - disable fetch which is optional which is
56:26 - going be a Boolean and then I'm going to
56:27 - start to destructure that disable fetch
56:31 - from my options which because options is
56:34 - optional I'm going to go ahead and
56:35 - default that to an object but we're
56:37 - going to then take disable fetch I'm
56:39 - going to by default make that false
56:42 - because we're going to default into it
56:44 - fetching going to hide myself so that
56:46 - you can see this but now we're going to
56:47 - take disable Fetch and we're going to
56:49 - say we're only going to want this
56:51 - enabled if we don't have disabled fetch
56:54 - set to true now heading over to our
56:56 - upload button we can simply add this
56:58 - onto our used resources so by adding a
57:00 - new object and I'm going to add disable
57:03 - fetch I'm going to set that to true now
57:06 - back inside the app if I try to refresh
57:08 - the page we're still seeing that
57:09 - resources is undefined first now the
57:11 - other approach we can take is because we
57:13 - know that we can set a query key
57:15 - dynamically I can pass in the tag of the
57:18 - query that I want to make we're inside a
57:20 - media Gallery we want to query that tag
57:22 - of media and inside of upload button we
57:24 - don't actually want to query anything
57:25 - now because of the way that that works
57:27 - we're only going to be working with the
57:29 - resources of a tag of media inside of
57:33 - the media Gallery as we're requesting
57:35 - that specific tag so what we're going to
57:36 - do is we're going to create a new
57:38 - property called tag that's going to be a
57:40 - string and it's going to be optional of
57:42 - course where inside of my query key I'm
57:44 - going to say that I want this query key
57:46 - to be resources and I also want to
57:48 - include my tag which is going to be
57:51 - options tag now additionally I need to
57:54 - actually pass in this tag from media
57:56 - Gallery so inside a media Gallery where
57:58 - I have my used resources hook I'm going
58:00 - to pass in a tag of media now if I head
58:03 - back to the page and refresh we can see
58:05 - that that image is showing much faster
58:06 - because we're getting that initial data
58:08 - from the server and we also don't get
58:10 - that undefined resources now the nice
58:12 - thing is we'll see that we will later be
58:13 - using this tag in a dynamic way where
58:16 - we're going to have different pages that
58:17 - have different tags but we'll come back
58:19 - to that later but one optimization that
58:21 - we can immediately make to how we're
58:23 - setting this up is when we're using Med
58:26 - media Gallery we're already using a tag
58:28 - if we head back over to our page under
58:31 - Pages page. TSX where we're actually
58:34 - including that media Gallery if you
58:35 - remember we're quering hide myself we're
58:38 - quering the resources by tag and we're
58:40 - looking for media so why not set that
58:43 - media tag once and then pass it through
58:46 - the media Gallery so we know depending
58:48 - on the media Gallery instance that's
58:49 - being used it's going to request the
58:51 - appropriate tag so inside of my media
58:54 - Gallery the first thing I'm going to do
58:55 - is set up that new proper of tag where
58:57 - it's going to be a string as well I'm
58:59 - going to destructure it from my media
59:01 - Gallery props and then I'm going to pass
59:03 - that tag directly into the used
59:05 - resources hook now on that page again I
59:08 - can pass in my media tag as a prop to my
59:13 - media gallery and heading to the browser
59:15 - just just a double check it is working
59:17 - as expected now personally when I'm
59:19 - creating strings like this that have an
59:21 - actual meaning and representation
59:22 - throughout my application I don't want
59:24 - to have to manage that tag every single
59:26 - Le place inside the application
59:27 - separately so we can Define that in a
59:29 - central location so that we can easily
59:31 - adjust that if we need to if we ever
59:33 - want to change that tag for instance or
59:34 - maybe depending on the environment or if
59:36 - you want to share this code maybe other
59:38 - people want to use other tags like I did
59:39 - with photo box so we have one of two
59:42 - options where we can either Define a
59:43 - constant inside of our project or we can
59:46 - set up an environment variable which is
59:48 - kind of a way I like to handle that so
59:50 - inside of my env. looc file I'm going to
59:53 - create a new environment variable and
59:54 - we're just going to paste that in of
59:56 - next public cloudinary library tag and
59:58 - that's just supposed to be a generically
60:00 - meaning uh phrase in order to describe
60:03 - the actual tag that I'm using so I'm
60:05 - going to set that as media where now I
60:07 - can take that head back to my
60:09 - application and wherever I'm using media
60:12 - such as this location I can add my
60:14 - process.env my next public cloudinary
60:16 - library tag or you can just shorten that
60:19 - to library tag whatever you want to do
60:21 - but because it's Cloud specific that's
60:22 - why I'm using Cloud there and then we
60:24 - can start to use that in the other
60:26 - locations such as the API route I'll go
60:29 - ahead and replace that tag which is
60:31 - generically getting those resources for
60:32 - us we can also do it inside of our page
60:35 - where I'm getting the resources by tag
60:37 - for that homepage as well as the media
60:39 - Gallery prop now that should cover all
60:41 - those instances but as last one last
60:43 - time let's double check and it looks
60:45 - like we're working as expected now one
60:46 - thing that we didn't cover however is we
60:49 - never thought about how this impacts our
60:51 - optimistic UI that we set up so I'm
60:53 - going to click upload I'm going to try
60:54 - to upload a new file
60:56 - and we can see that we get an error it
60:58 - says old is not iterable now the issue
61:00 - is inside of our used resources hook we
61:02 - scroll down to where we set up our add
61:04 - resources we set our query key for both
61:07 - the setting query data and invalidating
61:09 - to just the resources we never updated
61:11 - that to our media to include our media
61:13 - tag so it has no idea and it's trying to
61:15 - just invalidate data or set data for
61:18 - something that doesn't currently exist
61:20 - so we want to also make sure that we
61:21 - update every instance where we include
61:23 - that new tag so I'm going to go ahead
61:25 - and just break this down to to make it a
61:26 - little bit easier for us to read a
61:28 - little bit but then we can go ahead and
61:30 - add that same tag that we added in the
61:33 - other locations of my library tag I'm
61:37 - going to grab that and I'm going to add
61:38 - it to my set query
61:41 - data method as well as my invalidate
61:43 - queries method but now let's test that
61:45 - out and we can see that because I
61:46 - refreshed the page the image is actually
61:48 - showing but now let's try to use that
61:50 - optimistic UI where as soon as I upload
61:52 - the file we can see that it adds just as
61:54 - expected now I think we're in a pretty
61:56 - good position with our media gallery and
61:58 - we'll come back and we'll do some things
61:59 - later but next I want to make sure that
62:01 - I have an individual page for every
62:03 - single one of my images so when I click
62:05 - through to this I can actually view that
62:07 - specific image and then eventually I can
62:09 - make those edits now I preconfigured a
62:11 - page at resources SL page where we can
62:14 - see that it's currently similarly to
62:16 - what we started off with the gallery it
62:17 - just loads a logo here currently just as
62:19 - a placeholder but we have some existing
62:22 - UI including our editing our info and
62:24 - our delete that we can into as we start
62:26 - to add this capability so what we're
62:28 - going to do is we're going to take this
62:30 - from a static page and we're going to
62:31 - make it a dynamic route where then once
62:34 - this page loads we're going to fetch
62:36 - that image and then use that information
62:38 - to populate the page now going back
62:40 - inside of our code to actually find this
62:41 - file if we go under Source app we're not
62:43 - going to look under Pages we're going to
62:45 - look under the Resources directory where
62:47 - we have a layout for our resources but
62:50 - then we have that page directory that
62:52 - includes our page and we can see that it
62:54 - looks pretty similar to the same thing
62:55 - that we had for our media Gallery our
62:57 - homepage where we're using the media
62:59 - viewer component now to give our
63:01 - interactive UI using a client component
63:04 - inside of the project where this
63:06 - resource this page is going to be a
63:08 - server component where similarly again
63:10 - we're going to request that data using
63:13 - the node SDK for that individual asset
63:15 - and then pass it along through but the
63:17 - first thing we need to do is actually
63:19 - make this route Dynamic so we can get
63:21 - that Dynamic value so what we're going
63:23 - to do is inside of the sidebar we can
63:25 - see under the Resources directory we're
63:27 - going to rename this page directory and
63:30 - we're going to set this to use brackets
63:32 - and inside we're going to add a variable
63:34 - name and I'm going to use asset ID now
63:37 - why asset ID as opposed to something
63:39 - like public ID where asset ID is going
63:42 - to be very unique it's an easily
63:43 - queriable uh data value that we can use
63:46 - in order to do that and it's just a
63:47 - little bit uh of an easier way for us to
63:51 - confidently query our data and pass that
63:53 - along through the application but it's
63:54 - going to be a unique value that we can
63:56 - ultimately use to make the request using
63:58 - the API but just back to the sidebar for
64:01 - a second this resources asset ID because
64:05 - we're adding this in Brackets we're
64:07 - basically telling nextjs that we want
64:09 - this to be a dynamic parameter value we
64:12 - want this to be dynamically loaded based
64:14 - off of whatever somebody's going to in
64:16 - the browser so that means inside of our
64:19 - resource function which is our page
64:21 - component we're going to receive an an
64:24 - argument that's going to incl include
64:26 - pams which is where we're going to grab
64:28 - this value from now let's type this out
64:32 - as we're going to receive our pams and
64:34 - we're going to ultimately get our asset
64:36 - ID value and that's going to also be a
64:39 - string but now we can say let's console
64:42 - log out pams just to kind of see what
64:44 - that's is going to look like now if I go
64:46 - back and refresh the page as is just
64:49 - simply with that page inside if I now
64:51 - look inside of my terminal I can see
64:53 - that pams console logged out with that
64:55 - asset
64:56 - where it's now equal to page now if we
64:58 - go back quick to our Gallery page where
65:00 - we're listing out our resources I can
65:02 - just actually grab one of these asset
65:03 - IDs from any one of them that are
65:05 - getting currently listed out I can go
65:07 - back to my resources page and I can
65:09 - replace page with that asset ID now
65:12 - nothing too different should happen but
65:14 - we should see that our prams change from
65:16 - page to that asset ID so that's showing
65:19 - that it is a dynamic value based off of
65:21 - whatever is inside of this URL so now
65:24 - let's actually take that asset ID to
65:26 - actually change it but before we do
65:28 - let's make it a little easier so we
65:29 - don't have to manually grab the asset ID
65:31 - each time let's actually set up the
65:33 - links on our homepage so that whenever
65:35 - somebody clicks one of these they're
65:37 - going to go to that link automatically
65:39 - so back on the media Gallery component I
65:41 - already have my link component imported
65:44 - from nextjs where if I scroll down to
65:46 - the bottom of the page where I'm adding
65:48 - that clld image I already have that link
65:51 - component set up and wrapping around the
65:53 - image so all we really need to do at
65:55 - this point is is update the hrf in order
65:57 - to have that Dynamic value so instead of
66:00 - this hashtag that I have in there I'm
66:02 - going to add the template tags where
66:04 - we're going to say slash
66:06 - resources and that's going to be a
66:08 - dynamic value where we're going to add
66:11 - resource. asset ID and just to make sure
66:13 - that you can see that our link href
66:16 - that's wrapping our image on the gallery
66:18 - page is going to be
66:20 - /resources and then we're going to use a
66:22 - dynamic value of our resource asset ID
66:25 - so now inside the application if I click
66:27 - through to souo we can see that it does
66:30 - go back to that Resource page but now I
66:32 - have that Dynamic ID inside the URL and
66:35 - I didn't have to manually add that but
66:37 - now let's actually query for our
66:38 - resource on our Dynamic resources page
66:40 - so if we remember from earlier we
66:42 - configured our SDK on the homepage I'm
66:44 - just going to Simply copy and paste that
66:45 - code over rather than having to type it
66:47 - all out again but now we can add our
66:49 - media viewer inside of the media Gallery
66:51 - I'm going to get rid of the sidebar for
66:53 - a second but inside of our actual
66:55 - Resource page function I'm going to say
66:57 - constant results is equal to await
67:00 - cloudinary API where we're going to use
67:03 - the resources by assets asset IDs method
67:09 - and just pay attention to that Resources
67:10 - with an S by asset IDs with an S where
67:14 - we're going to go ahead and pass in our
67:15 - prams do asset ID now we can see that
67:19 - typescript is yelling at us we don't
67:21 - actually need to make this optional we
67:22 - should make sure that that's always
67:23 - getting passed through but we can also
67:26 - want to pay attention to this says
67:28 - Resources by ID so why are we passing in
67:31 - a string well this method takes both a
67:33 - string and an array of strings out of
67:35 - convenience just so that we have an
67:36 - option to use it however we need in
67:38 - order to get our assets so in this
67:40 - instance we're just going to be able to
67:41 - get our single asset but now let's
67:43 - console log out our results and another
67:46 - thing that I do want to note is where is
67:48 - that params asset ID coming from just to
67:51 - kind of confirm here that's where we set
67:53 - up the dynamic page route in inside of
67:56 - our tree here where that asset ID is
67:58 - going to correlate to that param but now
68:01 - if we head back into the application and
68:02 - we reload that page we should be able to
68:04 - hop back to our terminal where we now
68:06 - see all that resource data we have our
68:08 - results that we're conso logging out
68:10 - where we're going to have that property
68:11 - of resources that includes our single
68:14 - resource so like we did with our Gallery
68:16 - I'm going to destructure resources from
68:19 - this request and because we know that
68:21 - we're only going to pass in a single
68:22 - resource I'm going to pass through
68:24 - resources zero which is going to grab
68:26 - the first item of the right if it exists
68:29 - now again similar to what happened when
68:30 - we were setting up our Gallery we have a
68:32 - typescript issue here because if we go
68:33 - to Media viewer and let me get rid of
68:35 - the sidebar we can see that this
68:37 - resource that we're defining we're
68:39 - defining that ID just like we did before
68:42 - and this needs to actually be a public
68:44 - ID so instead of just trying to fix this
68:47 - again we do have that cloudinary
68:49 - resource type that we can now import and
68:51 - just use that so the first thing I'm
68:53 - going to do is I'm going to import my
68:55 - cloudinary resource from at types CL
69:00 - cloudinary and then make sure I have
69:03 - that spelled correctly I can use my
69:06 - cloudinary resource without an S as that
69:09 - resource type but as we can see we're
69:11 - still getting a type error and that's
69:12 - because we're just simply using that ID
69:15 - somewhere so at the bottom here we can
69:17 - see we have resource.id that I was able
69:19 - to just command F and I'm going to add
69:21 - public ID now if we head back to the
69:23 - application and refresh the page we
69:25 - really shouldn't notice too much
69:26 - different we might notice the logo is a
69:28 - lot bigger and that's because the
69:29 - resource that we're trying to query just
69:31 - has a bigger size to it so it's trying
69:32 - to fill up the space that it has but one
69:34 - thing we should notice is if we go over
69:36 - to this info panel or button here and we
69:39 - click it it's going to update that panel
69:41 - and that's where we can actually see
69:43 - that ID that we just updated to public
69:45 - ID and this value is dynamically being
69:47 - pulled from that Dynamic resource that
69:50 - we had so now not only should we show
69:52 - the ID let's actually show the image
69:54 - instead of this Cloud Nar logo so just
69:56 - like our image that we updated in the
69:57 - gallery let's update this to CL image so
70:00 - the first thing I'm going to do is
70:01 - change that image tag to clld image I'm
70:04 - going to dynamically update that from
70:06 - next Cloud Nary and just to confirm that
70:08 - we can see that we imported C image I
70:10 - like to organize the external Imports at
70:12 - the top we imported C image from next
70:15 - Cloud now going back to that we can see
70:17 - that it has everything we need the width
70:19 - height instead of the source we need to
70:21 - pass in that cloud Nary public ID so I'm
70:24 - going to change that to resource dopu ID
70:27 - and similar to before this Cloud Nary
70:29 - logo alt doesn't really make sense for
70:31 - our current purpose so I'm going to go
70:33 - ahead and delete that and technically if
70:34 - we wanted to we could probably pass in
70:36 - that public ID so I'm just going to say
70:39 - image public ID and that should suffice
70:41 - for at least having a dynamic value in
70:43 - there that represents what it is but now
70:45 - if we head back and we refresh the page
70:46 - we should see that we have our nice big
70:48 - image and in this case sollo now if I
70:50 - head back and go to another image such
70:52 - as Athens we can see that that image
70:54 - dynamically loads based off the route
70:56 - that we're getting because we're
70:57 - requesting the resource for that
70:59 - specific asset so now that we have the
71:01 - ability to actually display our images
71:03 - and navigate around to them dynamically
71:05 - let's start actually having some fun
71:06 - with this and start to edit our images
71:08 - where we can use transformations in
71:10 - order to apply different effects to our
71:12 - images like I mentioned a little bit
71:14 - earlier the transformation API is a good
71:16 - reference for all the different things
71:18 - that we can actually apply to our images
71:20 - but specifically because we're using CL
71:22 - image we can take a look at the next
71:23 - Cloud n documentation to get a good look
71:25 - at how we can more easily kind of work
71:27 - with these different Transformations and
71:28 - just a quick note that there are options
71:31 - to be able to add any transformation if
71:32 - it's not directly supported by the CL
71:34 - image component and if not just make
71:36 - sure you file an issue on the GitHub
71:37 - repo but if we take a look at this I'm
71:39 - going to hide myself we can look through
71:41 - all the different options available we
71:42 - have the sidebar that shows everything
71:44 - there's some really interesting AI
71:45 - oriented things like background removal
71:47 - which we'll actually use you can even
71:49 - change the color once you remove the
71:50 - background there's generative fill which
71:52 - we're not going to get into today but
71:53 - it's pretty darn cool you can also
71:55 - recolor remove replace but some of the
71:58 - simpler effects are things like being
71:59 - able to blur an image being able to turn
72:01 - it to gray scale and all those different
72:03 - kinds of things changing the different
72:04 - colors having fun with some overlays and
72:06 - there's just a ton of different things
72:08 - that you can do in order to really take
72:10 - advantage of the different effects and
72:11 - Transformations from cloud Nary so
72:13 - looking at the photo page we're going to
72:15 - work on this edit tab where if we open
72:17 - it up we can see that we get this panel
72:19 - that includes all these different tabs
72:21 - including these enhancements the
72:23 - cropping and resizing and these filters
72:25 - that we can add and we're going to work
72:26 - through all of these but we're going to
72:27 - start start off with the enhancements
72:29 - tab now inside of the code we're going
72:31 - to be working out of the media viewer
72:32 - file of course where if we start to
72:34 - scroll down we're going to scroll down
72:36 - until we get to this edit panel section
72:39 - and I even have it clearly labeled to
72:41 - make it easier to find but we have a
72:42 - sheet here which is going to represent
72:44 - that panel UI that we have that we
72:45 - grabbed from Shad CN but if we start to
72:47 - scroll down we're going to look for the
72:49 - enhancement section specifically where
72:52 - we have this unordered list that
72:54 - currently just has this none option so
72:56 - we're going to start to expand the
72:58 - options that we have available here so
73:00 - to start I'm just going to duplicate
73:02 - this list item I'm going to start off
73:04 - with how about
73:05 - improve I'm going to add another one of
73:09 - restore and then I'm going to add yet
73:11 - another one of remove background now if
73:15 - we refresh the page and reopen the panel
73:17 - we can see that it was updated with all
73:18 - of our different options but now let's
73:19 - try to get this set up so that we can
73:21 - actually store whatever enhancement we
73:23 - want to use in state so that we can then
73:26 - use it inside of the UI to do that we're
73:28 - going to use the Ed State hook and we're
73:30 - going to create a simple instance that
73:31 - we're just going to call enhancement and
73:32 - we're going to create a new one for each
73:34 - of the different types of editing that
73:35 - we're going to do but it's just going to
73:36 - allow us to store what kind of
73:38 - enhancement we actually want to apply to
73:40 - the image so I'm going to start setting
73:41 - up the state underneath my deletion
73:43 - state which includes a few different
73:44 - things that we'll get into a little bit
73:46 - later but I'm going to set that up with
73:48 - constant
73:50 - enhancements set enhancements and we're
73:53 - going to set that equal to use date and
73:55 - we're going to make that just a simple
73:57 - string now if we start to scroll down
73:59 - back to our page where we set up those
74:01 - enhancement values where we have our
74:03 - none we have our improve and we have our
74:06 - restore and remove background what we're
74:08 - going to do is whenever somebody clicks
74:10 - one of these buttons we want to store
74:12 - that enhancement in our state so to get
74:15 - started I'm going to just break down
74:17 - these buttons a little bit where I went
74:19 - ahead and just did that off camera just
74:20 - to save a little time but here I'm going
74:22 - to add onclick where I'm going to say
74:24 - whenever that is is clicked I'm going to
74:26 - set enhancement where for this one I'm
74:29 - going to Simply call it improve where
74:31 - now we can replicate that through all
74:33 - our other ones we have our none which
74:36 - I'm just going to set that to undefined
74:38 - then we're going to scroll down to our
74:40 - restore let's call that one restore our
74:43 - remove background which I'm going to
74:46 - call that simply remove background and
74:48 - now just to make sure that we're on the
74:50 - right track and just do a little quick
74:51 - confirmation here I'm going to console
74:53 - log out my enhancement and if I refresh
74:55 - the Page open up the edit panel and I
74:57 - start to click these items we can see
74:59 - that it is logging out that state now
75:01 - heading back over to the documentation
75:02 - for a second let's see how this is
75:04 - actually going to get applied to our
75:05 - image where if we start to look at these
75:07 - Transformations let's start with restore
75:10 - where we can see that in order to add
75:12 - restore we just simply need to add the
75:14 - prop of restore we don't even need to
75:16 - add a true to that that's going to
75:17 - automatically resolve as true and opt Us
75:20 - in where this restore one in particular
75:23 - it's going to take a blurry image and
75:25 - it's going to or blurry or poor quality
75:27 - image and it's going to restore its
75:29 - quality so if we look inside of our
75:31 - media viewer what we're going to want to
75:32 - do is we're going to store those
75:34 - Transformations that we want to apply to
75:36 - the image in a temporary state so that
75:39 - we can simply spread them out on our
75:41 - clld image appropriately for the
75:43 - different props and options that we want
75:45 - to use so for instance we can use
75:49 - Transformations which we can add as a
75:51 - constant at the top of the page where
75:53 - I'm going to scroll back up there I'm
75:54 - going to create those con
75:57 - Transformations and set that equal to an
75:59 - empty object to start where because we
76:01 - know that these are all going to be
76:03 - props that we're going to be passing
76:05 - into the CL image component we kind of
76:07 - already know what this type is going to
76:09 - be so what we can do is we can actually
76:11 - just type out our
76:12 - Transformations as our clld image props
76:15 - so scrolling back up to our import of
76:17 - clld image I'm going to import clld
76:20 - image props and I'm going to scroll down
76:23 - back to our transformations I'm going to
76:25 - just create a new type for this called
76:27 - Transformations just to make it a little
76:28 - bit easier to read where we're going to
76:30 - set that equal to CL image props but
76:32 - what we're actually going to do is CL
76:35 - image props also expects a source value
76:37 - and an ALT value because we're creating
76:39 - an image tag so we're just going to emit
76:41 - those two props and then allow the rest
76:43 - to be passed in so I'm going to use omit
76:46 - CL image propped where then I'm going to
76:48 - pass in source and my ALT but now I can
76:52 - Define my type on the cont inst
76:55 - Transformations and starting with my
76:57 - enhancement I'm going to say if
76:59 - enhancement equals restore all I'm going
77:03 - to do is I'm going to add
77:05 - transformations. restore and set that
77:07 - equal to true now because we're not
77:09 - applying it directly to the react
77:11 - component we do actually have to Define
77:13 - that as a Boolean otherwise that'll just
77:14 - be undefined but we are setting that
77:17 - restore property to our Transformations
77:19 - which will be spread out onto that
77:21 - component now heading into the browser
77:23 - we're going to go ahead and now click on
77:24 - restore and when you first click this
77:26 - it's going to take a little while the
77:28 - first time to actually run this because
77:29 - we have to process that with AI in the
77:31 - background but in my case I already
77:33 - clicked it and I already loaded it and
77:35 - we can see that by if I actually open
77:38 - this up in a new tab I can see e gen
77:41 - ReStore in the URL now this looks pretty
77:44 - similar to the other one let me
77:45 - duplicate this tab just to make it a
77:47 - little bit closer to see if I remove
77:49 - this and it didn't really do too much to
77:51 - this image and I mean honestly this
77:53 - image is pretty great to to begin with
77:55 - so it didn't really have much to improve
77:57 - on so let's actually take this image
78:00 - let's create a blurry image out of this
78:03 - and test it on that and again if we go
78:05 - back to where we were talking about how
78:07 - we were using transformation uh URL
78:09 - parameters we can really easily do that
78:11 - so the first thing I'm going to do is
78:13 - instead of width 3840 I'm going to
78:16 - Simply change this to
78:18 - 500 so now we have a 500 pixel image and
78:21 - then I'm going to add C scale and I'm
78:24 - going to add
78:25 - w1000 to scale that up to 1,000 and we
78:28 - can see that that's a pretty blurry
78:30 - version of this image but now let's
78:32 - actually save this image and re-upload
78:34 - it to our media library so that we can
78:37 - try it out with this image and I'm going
78:38 - to go ahead and save that to my desktop
78:41 - now if we notice here quickly we are
78:43 - getting a webp format and if we remember
78:45 - from earlier we have this F Auto in the
78:47 - URL and that stands for format of Auto
78:49 - so it's going to automatically deliver
78:50 - the most efficient format for that
78:52 - browser and for that image and in this
78:54 - case we're getting webp now because
78:56 - we're uploading to cloudinary it knows
78:58 - what webp files are so I'm just going to
79:00 - go ahead and save this one as is and
79:02 - then if we head back over to our
79:04 - application again I'm going to go ahead
79:06 - and go to the upload page I'm going to
79:09 - add my new file if I can find it inside
79:12 - of here I think I just need to refresh
79:14 - that UI since it was pretty new so I'm
79:16 - going to go ahead and select that file
79:18 - we can see that it was
79:20 - uploaded and we have our blurry image so
79:23 - now let's actually try out this restore
79:24 - so I'm going to open back up that edit
79:26 - panel and I'm going to click restore and
79:28 - again you might have to wait a second
79:29 - well that was actually pretty fast and I
79:31 - don't know if you noticed but that was a
79:32 - pretty big difference let's open that up
79:34 - in a new tab for this one as well so
79:37 - this is going to be the restored image
79:39 - we can see e restore here let me
79:41 - duplicate this tab and get rid of the
79:43 - original one and let's go back and forth
79:46 - we can see that that's a pretty uh
79:48 - pretty substantial difference that's a
79:50 - lot better than that blurry image that
79:52 - we had and going back to the UI we can
79:54 - go back and forth between none and
79:56 - restore none and restore and we can see
79:59 - that we can immediately get that now
80:01 - that it's completely loaded so now let's
80:03 - wire up these other ones where we have
80:05 - improve and we have remove background
80:07 - now we already set up restore but how
80:09 - about let's set up improve now for this
80:11 - one we don't actually have an example
80:13 - like we did on the examples page but
80:14 - what we're going to do is we're going to
80:15 - go down to filters and effects and we're
80:17 - going to scroll down until we see I
80:19 - think no there it is improve where for
80:21 - this one we can pass it in as a bullan
80:23 - just like we did before now if you you
80:24 - can also take that further you can pass
80:26 - in a string with some different settings
80:28 - uh or probably a number here uh but what
80:30 - we can do is we can just use the Improv
80:32 - similar to what we did with restore so
80:34 - I'm going to just copy this because it's
80:35 - basically going to be the same thing I'm
80:37 - going to say Els if enhancement equals
80:39 - improve I'm going to add that improve
80:42 - and now if we click improve we can see
80:44 - that the colors look a lot more
80:45 - interesting than they than they did
80:47 - without it but now let's let's actually
80:48 - get off this blurry image and head back
80:50 - to a normal one where we can see that we
80:53 - have this nice original and and let's
80:54 - add it to that where we can add impr
80:56 - proven again it's going to take a few
80:58 - seconds just to process that
80:59 - transformation but once it does we can
81:01 - still see that same effect that it looks
81:03 - a lot more vibrant and a lot more
81:05 - interesting than it did on the original
81:07 - and again you can pass in custom
81:08 - settings to kind of tune that up how you
81:10 - want but generally speaking it gives a
81:12 - broad automatic Improvement to the image
81:14 - but now for the last one for our
81:16 - enhancements is remove background and
81:18 - similarly we're going to do the same
81:20 - thing if enhancement equals remove
81:22 - background we're going to set the proper
81:24 - but this time it's going to be remove
81:26 - background cam case so now let's try to
81:29 - swap to that and we can see that we
81:30 - immediately lose the image but let me
81:32 - open up my web console looks like we get
81:34 - a nice 420 here but let's actually
81:36 - inspect this I'm going to refresh my tab
81:38 - and reproduce this so we can see what it
81:39 - looks like and if I look at that image
81:42 - request I'm going to scroll down if I
81:44 - can expand this I'm going to scroll down
81:46 - to xld error now the nice thing is if
81:50 - you get a 400 level error it's going to
81:53 - try to provide a description reason
81:55 - inside of this xld error header now for
81:58 - this particular case we don't have an
82:00 - active subscription for the cloud AI
82:02 - background removal now background
82:03 - removal requires an add-on in order to
82:06 - make this work but the good thing is
82:07 - there's a nice free tier so that we can
82:09 - just start testing it out now just as a
82:11 - quick note it is in the documentation
82:13 - specifying that you need the add-on if
82:14 - you want to find a link to this it's
82:16 - easily available under the remove
82:18 - background property where we can go
82:19 - ahead and click through and we can learn
82:21 - more about the actual add-on but heading
82:23 - over to our cloud console let's go over
82:25 - to the settings with this little Cog
82:27 - here in the bottom left we're here if we
82:29 - scroll down on the left we're going to
82:31 - find under explore the add-ons page
82:34 - we're here we can immediately see at the
82:36 - top left that we have this Cloud Nary AI
82:38 - background removal now once we get to
82:40 - this page we can see a little bit more
82:41 - information about the add-on including
82:43 - the pricing TI for this specific add-on
82:45 - where here we get 15 free every month so
82:47 - here we're going to want to go ahead and
82:49 - enable the free account but now that we
82:51 - have this enabled let's head back over
82:52 - to our app where I'm going to get rid of
82:54 - the web console and now let's refresh
82:56 - the page and try this again where I'm
82:58 - going to click remove background and we
83:00 - can see that we still lose that image
83:02 - but let's open on that web console again
83:05 - where this time we're getting a 423 air
83:07 - and that's a little bit different where
83:08 - the way that the background removal
83:10 - works is it's first going to return a
83:12 - 423 and that 423 means it's processing
83:16 - in the background so the subsequent
83:18 - request though whenever that finishes
83:20 - are going to deliver a standard request
83:22 - so we can even see that the C the image
83:25 - component pulls until that's available
83:27 - where now we can see that it tried to
83:28 - remove the background now I would
83:30 - imagine that's a little bit of a tricky
83:31 - one there's a lot of detail in that and
83:34 - it's not the most clean and crisp image
83:35 - to begin with even though it's pretty
83:37 - nice so let's try to use something
83:38 - that's a little bit easier to work with
83:40 - where if I'm going to head back I'm
83:41 - going to upload a new image I'm going to
83:43 - go ahead and select one and let's go
83:46 - through here I have an elephant picture
83:48 - somewhere that I like here we go we have
83:50 - our nice elephant friend I'm going to
83:52 - try to upload that one we're going to
83:54 - navigate over
83:57 - there we can see that we have our image
84:00 - I'm going to go ahead and try to remove
84:01 - background from this
84:04 - one and we can see once it's done
84:06 - processing this did a pretty good job
84:08 - and we can toggle back and forth between
84:10 - the one with the background removed and
84:12 - with it not and we can see just how well
84:14 - that it did so imagine now if we wanted
84:16 - to we can go ahead and change that
84:18 - background we're not going to add that
84:19 - kind of feature inside of this
84:21 - application but just as an example
84:23 - playing around with the UR with the URL
84:25 - parameters again let's just add a
84:28 - another transformation of B blue which
84:31 - is just adding a blue background and we
84:33 - can see how easy it was to add that
84:35 - background we can even add images
84:37 - underneath that or really whatever we
84:38 - want to transform it into something
84:40 - completely different but I need to try
84:41 - to keep myself in the scope of what
84:43 - we're actually Building inside this
84:44 - application and now let's update the UI
84:46 - a little bit so that when we actually
84:48 - select something it makes a clear
84:50 - indicator that we selected that one and
84:52 - we can also update some icons to make it
84:54 - a little bit more representative of what
84:56 - we're trying to do now looking back at
84:58 - the UI for a second the way that we're
85:00 - currently showing these elements is I'm
85:02 - adding this border of white now we can
85:04 - dynamically add that border so that any
85:07 - item that is selected only receives that
85:09 - white border so let's start off with the
85:11 - undefined one where let me first cut out
85:13 - this border white I'm going to add a
85:14 - dynamic value where I'm going to say if
85:16 - enhancement doesn't exist if enhancement
85:20 - doesn't exist I'm going to add a Turner
85:22 - where I'm going to add the border of
85:24 - white because that is going to be our TR
85:25 - the value and then otherwise I'm going
85:27 - to add border of
85:29 - transparent now looking at the app we
85:31 - can see that the Border actually
85:33 - disappeared from none but that's because
85:34 - we have remove background selected of
85:36 - course so I'm going to go ahead and
85:37 - select none and we can see that we get
85:39 - that border and if we go off we don't
85:40 - have it so let's add that to the other
85:42 - ones so I'm going to copy that Turner
85:45 - and I'm going to scroll down first to
85:47 - improve let's replace our border white
85:50 - where for this one it's not going to
85:51 - just simply be if it doesn't exist we're
85:53 - going to say if enhancement equals
85:55 - improve let's go ahead and copy this to
85:57 - the other ones so I'm going to say for
86:00 - my restore one if this is restore and
86:04 - then scrolling down one more for remove
86:07 - background we're going to say if this is
86:09 - remove background we can already see
86:12 - that the UI updated we're showing
86:13 - improve right now if we go ahead and
86:15 - select off of it it doesn't we actually
86:17 - see a really nice difference there with
86:18 - the improved one but that's kind of be
86:19 - uh aside from the point but we can see
86:21 - that depending on the one that we select
86:23 - we have a nice UI indicator for it so
86:25 - how about these icons though for improve
86:27 - I like the idea of just using this wand
86:29 - that we have at the top one so I'm going
86:30 - to start there where we can see inside
86:32 - of those tabs I'm using wand two from
86:35 - Lucid react just to kind of show where
86:38 - I'm grabbing this from if you remember
86:39 - from earlier we install Lucid react
86:41 - under icons we have wand and we have two
86:44 - different ones and I'm going to use wand
86:45 - two so now for my improved option I'm
86:48 - going to update that from ban to my wand
86:53 - 2 and let's just be honest here I
86:55 - already know what icons that I want to
86:56 - look up so I'm just going to look them
86:57 - up directly but you can feel free to
86:58 - look through all these different ones
87:00 - but for ReStore I found this icon that I
87:02 - like which is this pencil ruler and I
87:04 - think that represents a good uh restore
87:07 - option so for ReStore I'm going to
87:09 - update that to pencil ruler and I
87:12 - already know that name so I'm going to
87:13 - add a quick import update to my Lucid
87:16 - react with that little shortcut as usual
87:18 - I'm going to then go down to my
87:19 - background removal one where for
87:21 - background removal I liked the idea of
87:23 - using scissors for this and we can see
87:24 - we have a few good options for scissors
87:26 - here now there was one that I actually
87:28 - liked a little bit more than this if I
87:30 - type in hyphen here we can see that I
87:32 - get this one with the dash lines on the
87:33 - bottom and I liked that a little bit
87:35 - better but for some reason there's some
87:36 - searchability issues with this and even
87:38 - the name of the Imports didn't quite
87:40 - correlate with the names that we see on
87:42 - here so I'm just going to skip that one
87:44 - so I'm just going to use this Square
87:45 - scissors one we're inside of the app
87:47 - that's going to be scissors Square I'm
87:50 - going to then be able to update that
87:52 - import by using the command period like
87:54 - we saw before so that we can easily
87:56 - import that into the top of our project
87:58 - but now heading back into our
87:59 - application we can see all those lovely
88:01 - icons that have a lot better of a
88:03 - representation of what that specific
88:05 - option is trying to do now one other
88:07 - thing that I want to do is if we
88:08 - remember when we were selecting through
88:10 - the different options sometimes it would
88:11 - just show the original for a second
88:14 - before we got the new one now if we go
88:16 - back to one of the other images that we
88:17 - haven't touched yet such as this train
88:19 - and I open the panel if I go ahead and
88:21 - hit something like restore we can see
88:23 - that is just showing the original image
88:25 - for a little bit now I don't I know that
88:28 - it's loading in the background but what
88:29 - I wanted to happen is I want to show
88:31 - some kind of loading State now the first
88:33 - thing I can do is because this is a
88:34 - react component I can set an updated key
88:37 - based off of the information that's
88:39 - inside of the project so that I can
88:41 - refresh that once I have a new
88:42 - transformation so what I'm going to
88:44 - actually do is I'm going to add key and
88:47 - I'm going to set that equal to
88:49 - json. stringify and I'm going to pass
88:52 - those Transformations into to that
88:54 - method now just as a quick note
88:56 - stringifying like that could potentially
88:58 - be expensive if you're trying to have a
88:59 - really performant UI so we're really
89:01 - just using this as a kind of hack in
89:03 - order to force that component to refresh
89:06 - when we're changing the URL but heading
89:08 - back inside of the UI let me hide myself
89:10 - we already tried restore and I don't
89:12 - know if you can kind of see the
89:13 - difference there that there's a very
89:15 - subtle difference but it does look
89:17 - restored but that's beyond the point but
89:18 - if I try another one we can see that we
89:21 - have it immediately go to Black and
89:23 - that's because is updating to that new
89:25 - URL that just hasn't updated yet so we
89:28 - can see that we're going to get the
89:29 - similar effect with remove background
89:31 - again remove background Works a little
89:32 - bit differently because of how it's
89:34 - processing but it's still going to give
89:36 - that same similar experience so let's
89:37 - actually try this on another image so
89:39 - I'm going to hit back and I'm going to
89:41 - go to the Sao example since I don't
89:43 - think we have added the effects on here
89:45 - and let's go ahead and try that on
89:46 - restore again we can see that we
89:48 - immediately lose that image because it's
89:50 - now loading that new URL and then as
89:53 - soon as that is loaded it's going to pop
89:55 - back in where now we can see that we
89:57 - have that restored version now I think
89:59 - that's a better experience than what we
90:00 - had before because it doesn't show a
90:02 - delay in the UI so once you click on
90:04 - that button it's immediately going to
90:05 - update even though it's in a loading
90:07 - State and to be honest it looks a little
90:09 - broken because it's just pure black
90:11 - right that's the canvas in the
90:13 - background that's not really indicating
90:14 - a loading State now one of the nice
90:16 - things about the next image component
90:18 - again which CL image wraps is we can add
90:20 - some placeholders using SVG so if we
90:23 - look at this guide that I have on the
90:24 - nextcloud N.D site we can scroll down
90:26 - and we have a few options including a
90:28 - blurred image as well as being able to
90:30 - show a shimmer effect now it's kind of
90:32 - hard to see if we're just looking at
90:34 - this here let me open up my network tab
90:36 - I'm going to go ahead and throttle my
90:38 - connection so that we can actually see
90:40 - the loading indicator I'm going to go
90:42 - ahead and hard refresh and if we try to
90:44 - look down here maybe I actually need to
90:46 - also keep my cache disabled so let's try
90:49 - this out if I hit hard refresh we can
90:51 - see we get that blurred placeholder if
90:54 - scroll down we can see that we get that
90:55 - Shimmer effect let me try that again we
90:58 - see we get that Shimmer so it just gives
91:00 - a little bit better of an effect for
91:02 - when it's loading inside of the
91:03 - application so I'm going to go ahead and
91:05 - try out this Shimmer effect so I'm going
91:07 - to scroll down and I actually have all
91:08 - this code really easy to copy and paste
91:10 - right inside of the documentation so
91:12 - let's get started for this one we want
91:14 - to make sure we're in the correct router
91:16 - I'm working in the app router so I'm
91:18 - going to go ahead and copy this snippet
91:20 - and when we're using this Shimmer effect
91:22 - we probably don't want to have to Define
91:23 - this on every single instance of CLD
91:25 - image so we're going to create a little
91:27 - simple wrapper around our CL image
91:29 - component so that we can apply this
91:30 - Shimmer to all of our different images
91:33 - so opening up my sidebar under
91:35 - components I'm going to create clld
91:36 - image. TSX and again I'm using the
91:39 - similar pattern as upload button just
91:40 - because out of Simplicity but now let's
91:43 - go to hide that sidebar constant CL
91:45 - image is equal to my new component
91:48 - function and I'm going to export my
91:50 - default clld image now just so I don't
91:54 - this from my clipboard I'm going to go
91:55 - ahead and paste all this Shimmer code at
91:57 - the top of Cl image but now we need to
92:00 - actually import CL image so that we can
92:02 - render it inside of this component so at
92:04 - the top I'm going to import clld image
92:07 - but I'm going to import it as cldd image
92:11 - default from next cloudinary because I
92:13 - don't want to have a name collision with
92:15 - the actual CD image uh component that
92:17 - I'm defining there but what I'm going to
92:19 - do is I'm going to take this I'm going
92:21 - to add it as what's getting returned and
92:24 - then I'm going to just simply spread the
92:26 - props out on that component so I'm going
92:28 - to add my props and because we need to
92:31 - type that I'm going to get my CL
92:34 - image props I'm going to Define that as
92:37 - my type for my props and then simply
92:40 - spread this out on my CL image default
92:43 - now finally we need to actually use this
92:45 - data URL and if we head back to the
92:48 - documentation where we had this demo we
92:50 - can see that the way that we're going to
92:51 - do this is we're going to Simply set
92:52 - that data URL as our placeholder so back
92:55 - in my code I'm going to Simply set my
92:57 - placeholder value to data URL now hold
93:01 - up we have another type era here that we
93:02 - have to address and I think it's because
93:04 - how we're creating this data URL that it
93:05 - just doesn't like it but what I'm going
93:07 - to do is at the top of this file I'm
93:09 - going to first import image props from
93:13 - next image and then I'm going to scroll
93:16 - down and let me hide myself what I'm
93:18 - going to do is I'm going to say data URL
93:20 - as image props and then I'm going to
93:22 - reference specifically the place holder
93:24 - but now of course we need to actually
93:25 - use this component so I'm going to head
93:27 - back over to my media viewer I'm going
93:29 - to go to the top of the page I'm going
93:31 - to get rid of Cl image from nextcloud
93:33 - Nur and then I'm going to import as a
93:35 - new component my clld image now heading
93:39 - back to the application to test this out
93:41 - I'm going to upload a new file just so
93:42 - that we can actually see the loading
93:44 - experience for this so how about we
93:45 - update upload this one with some nice
93:48 - Northern Lights I'm going to go ahead
93:49 - and go to that image we can already see
93:51 - that we're getting that nice Shimmer
93:53 - effect in the back there but once it
93:54 - loads even further we can go ahead and
93:56 - open that edit panel and if I go ahead
93:58 - and click something like restore we can
94:00 - see that we get the similar experience
94:02 - where we now have a nice loading
94:03 - indicator to show that that image is
94:05 - actually loading something in the
94:07 - background but next let's take this a
94:08 - step further and let's start to add some
94:10 - cropping and resizing now this is going
94:12 - to work really similar to the
94:14 - enhancements that we added where we have
94:16 - this cropping and resizing section we
94:18 - can see that we already have the
94:19 - original setup here and now we're going
94:21 - to just add a few standard formats now
94:24 - the ones that I think make sense to add
94:25 - I'm going to add Square I'm going to add
94:31 - landcape and I'm going to add finally my
94:35 - portrait now like before I went ahead
94:37 - and just broke down these buttons just
94:39 - to make a little easier to read as we're
94:40 - working through this but I'm going to go
94:42 - ahead and add my click Handler on click
94:44 - and I'm going to say for this one I'm
94:46 - going to create a new instance of State
94:47 - called crop similar to what we did with
94:50 - enhancements so I'm going to say set
94:52 - crop and I'm going to set to undefined
94:55 - but now let's actually set up that
94:56 - instance of state I'm going to go back
94:58 - to the top of the file where we have our
95:01 - enhancement and I'm going to just simply
95:03 - clone that to start I'm going to make
95:05 - that set crop going to make sure I
95:08 - update that c it's also going to be a
95:10 - string but now I can update for the
95:12 - other ones I'm going to have my Square
95:15 - set that to
95:17 - square I'm going to have my landscape
95:19 - one simply
95:21 - landscape and then finally
95:24 - my portrait where because we already ran
95:26 - through one example of this we kind of
95:28 - already know a little bit of what we're
95:29 - doing already and in particular we know
95:31 - we need to set those status indicators
95:33 - so I'm going to go ahead and just set
95:34 - those now where I'm going to copy this
95:36 - code from the enhancement where remember
95:38 - if we're setting the active value we're
95:41 - going to set it of a border of white
95:42 - otherwise we're going to have a
95:43 - transparent border just to give a nice
95:45 - little indicator that it is active so
95:47 - for each and every one of these let me
95:49 - first just clone this for each one I'm
95:51 - going to paste it in instead of border
95:53 - white at the end here and then I can
95:56 - update my
95:57 - enhancement all to crop and I'm going to
96:00 - say first of all for the top one that
96:02 - needs to be if crop doesn't
96:04 - exist for my next one that's going to be
96:07 - if crop equals
96:08 - square and then for my landscape
96:12 - one and finally for
96:15 - my portrait now back in my app if I go
96:19 - ahead and try this out we can see that
96:20 - that part is working so now let's
96:22 - actually add the transformations now
96:23 - this is going to look pretty similar to
96:25 - what we did with enhancements but it's
96:26 - going to include a little bit more math
96:28 - because when we're cropping and resizing
96:30 - it's going to depend on the width and
96:31 - height for how we're going to actually
96:32 - handle this so let's see what I mean
96:34 - here we're let's start off by saying if
96:36 - crop equals square and if you think
96:39 - about when we get our width and height
96:41 - if we have a width that is longer than a
96:42 - height we probably want to use the
96:44 - height as the basis of the square right
96:47 - where alternatively if we have a height
96:49 - that is larger than our width we would
96:51 - probably want to use the width to crop
96:52 - that down with without having to try to
96:54 - upscale it or something along those
96:56 - lines so let's first check that value
96:58 - I'm going to say if resource. width is
97:00 - greater than
97:02 - resource. height I'm going to say
97:05 - transformations. height is equal to
97:08 - resource. width otherwise I'm going to
97:12 - do the opposite and I'm going to say the
97:15 - width is equal to the height now finally
97:18 - because of the way that the image
97:19 - component actually crops on the URL we
97:22 - kind of have two different ways of of
97:23 - doing this where one along with the
97:25 - responsive sizing we can crop everything
97:28 - after any Transformations are applied
97:30 - and more often than not that's probably
97:32 - okay but we want to actually crop the
97:35 - source of the image before any
97:37 - Transformations are applied that way we
97:39 - don't run into any wonkiness including
97:41 - things like relative sizing that might
97:43 - change how the image is actually getting
97:45 - cropped so what we're going to do is
97:47 - we're going to specify
97:50 - transformations. crop where we're going
97:52 - to set that equal to to where we're
97:54 - going to first specify we want to crop
97:56 - it on the source by setting Source
97:58 - equals true and then I'm going to use a
98:01 - type of fill for that crop but we can
98:03 - see that type error went away it might
98:05 - have just been a little bit laggy with
98:06 - my IDE but now let's actually check out
98:08 - this Square transformation back inside
98:10 - of my app if I go ahead and select
98:11 - Square we can see we get that nice
98:13 - loading
98:14 - State and then eventually when it
98:17 - loads we now have a square image where
98:20 - previously we had that nice tall image
98:22 - now just a kind of pop in and see how
98:24 - this works on the URL parameters just so
98:26 - we can kind of get that idea we see that
98:28 - we have that crop of fill and we have
98:30 - that same value for the width and height
98:32 - which of course gives us gives us that
98:33 - square The Fill crop means that it's
98:35 - going to take up as much space as it can
98:37 - within those bounds but then we can see
98:39 - that we do have that two-stage cropping
98:41 - and resizing that I was alluding to
98:43 - where we could technically include it by
98:45 - default along with this but again we
98:47 - might have some transformations in
98:49 - between those two things and it makes
98:51 - more sense to crop the source of the
98:53 - image before we apply any of those other
98:56 - Transformations and this is probably
98:58 - more relevant if you're using things
98:59 - like overlays or other kind of relative
99:02 - size Transformations but it's just kind
99:04 - of best practice to kind of get in the
99:05 - habit of doing that but now we have two
99:08 - others that we need to actually apply so
99:10 - we have our landscape and portrait back
99:12 - inside the code we're going to do a
99:14 - similar thing for each and every one of
99:15 - these but not exactly the same so I'm
99:17 - going to start off by saying else if
99:19 - crop
99:21 - equals landscape
99:23 - the first thing we're going to do is
99:25 - we're going to apply that same crop to
99:27 - both of these so let me just copy and
99:29 - paste this one between both of our
99:31 - different Transformations we have
99:32 - portrait as well as landscape but now is
99:35 - where we need to actually do a little
99:36 - math so let's think about this for a
99:38 - second if we have an image that is
99:40 - landscape let's make that 16 by9 that's
99:43 - a pretty common landscape format and if
99:46 - I have a different width in a height
99:47 - what I ultimately want is I want to have
99:50 - a normal width that I kind of fix in on
99:53 - and I want to set my height relative to
99:56 - that width now you can probably go the
99:57 - other way around depending on what you
99:58 - want to do but ultimately let's use that
100:01 - as the basis for how we want to actually
100:02 - Define the height to transform this into
100:06 - a landscape image so I'm going to start
100:08 - off by adding
100:09 - transformations. height and I'm going to
100:11 - set that equal to resource. width but
100:15 - then I'm going to actually divide
100:16 - resources width by the ratio that I want
100:20 - to apply so that's going to be 16 by 9
100:23 - now that's probably going to give a
100:24 - fraction or a decimal in this case and
100:26 - we want that to be a nice integer so I'm
100:28 - going to go ahead and wrap that with
100:29 - math. FL that way it's a little bit
100:32 - easier to work with especially when
100:33 - we're trying to not have some kind of
100:35 - like sub pixel rendering now back inside
100:37 - the app let's try this out real quick
100:38 - I'm going to go ahead and refresh the
100:39 - page just to make sure that that uh
100:41 - settings is all completely up to date
100:44 - but now let's try to set that to
100:45 - landscape where we can see that it's
100:47 - already working and we can kind of
100:49 - already see the the width and height of
100:51 - what's actually happening now let's
100:52 - close this but we can see that it
100:54 - automatically cropped that image to that
100:57 - landscape format now that image looks a
100:59 - little grainy to me I think that image
101:00 - just itself isn't the highest quality we
101:02 - can see that if I zoom in on this it
101:04 - isn't the highest quality image to begin
101:05 - with but we can see that all we needed
101:07 - to really do was pass in those Dynamic
101:09 - values along with our crop of fill in
101:12 - order to really easily get that nice
101:14 - crop now let's go ahead and try to test
101:15 - this out another one just to kind of see
101:17 - another example where let's go ahead and
101:18 - upload an image I have this nice image
101:21 - here going to upload it
101:24 - going to select it and as it's loading
101:27 - I'm going to go ahead and open up the
101:28 - panel where we can find that crop and
101:30 - let's try to set that to
101:34 - landscape and one thing that I wanted
101:36 - that's interesting that I wanted to
101:37 - point out is not only is this going to
101:40 - crop our image but it's going to do so
101:42 - intelligently we can see that it's
101:44 - trying to find the most interesting part
101:45 - of the image and crop to that now let's
101:47 - open this up in a new tab to try to see
101:49 - what's going on where we can see that in
101:51 - the URL we also have this G _ Auto that
101:54 - stands for gravity of Auto where gravity
101:56 - is basically going to be the focal point
101:58 - or the anchor of wherever we want to set
102:00 - it for the image Now by default with
102:02 - Cloud Nary if you don't set it it's
102:04 - going to default to Center but with cl
102:07 - image and the next Cloud Nary Library
102:09 - we're automatically adding guto so it
102:11 - can be a little bit more intelligent for
102:12 - how this works but let's kind of see
102:14 - what this looks like if I remove guto we
102:17 - can see that we get a different crop
102:19 - entirely and it's just using the center
102:21 - and we can see that we have that
102:23 - reflection but that's not really giving
102:25 - the most interesting part of the shot
102:26 - which is the image itself so we can see
102:29 - that when we have guto it's determining
102:31 - that this is the most interesting part
102:32 - of the of the image and it's
102:34 - prioritizing that in how it's cropping
102:37 - the image but now that we have the
102:38 - landscape all covered let's now add
102:40 - portrait so this is going to look really
102:42 - similar I'm going to go ahead and copy
102:44 - and paste this in only we're going to
102:46 - swap the different values so it's going
102:48 - to be Transformations width and
102:49 - Transformations height and now I'm going
102:51 - to go back and let's select an New Image
102:53 - or upload a new image for fun so I'm
102:55 - going to go ahead and select a new one
102:57 - let's go ahead and add this
102:59 - one once it's uploaded I'm going to go
103:01 - ahead and open the edit panel let's go
103:04 - ahead and select portrait this time and
103:06 - we can see that it's of course loading
103:09 - and once it loads we can see that it's
103:10 - actually zoomed in way too far and we
103:12 - just got to make a quick tweak to the
103:13 - application here now this was intended
103:15 - to be somewhat out of scope for this
103:16 - project but we can kind of review what's
103:18 - actually happening here for how we're
103:19 - displaying the image because one of the
103:20 - problems that we wanted to solve is how
103:22 - can we display that image within the
103:24 - canvas so that it's responsive no matter
103:27 - what the viewport is going to look like
103:29 - whether it's tall or whether it's wide
103:31 - which can be challenging when you're
103:32 - just trying to use CSS alone now with
103:34 - JavaScript we could probably do that but
103:36 - then we don't have to add all that
103:37 - JavaScript so what we're doing is inside
103:39 - of this application we're first
103:41 - determining the canvas height and the
103:42 - canvas width we're determining if it's a
103:45 - square landscape or portrait image and
103:47 - then we're adding different styles to
103:49 - the image based off of that so if it's a
103:51 - landscape image we're setting a Max
103:53 - width along with the width of 100% and a
103:55 - height of Auto where if it's a portrait
103:57 - or Square we're setting a Max height of
104:00 - that actual height we're defining a
104:01 - height of 100 viewport height and the
104:03 - width of Auto and again this gives us
104:05 - the ability to have an image that's
104:08 - going to scale nicely inside of that
104:09 - canvas in the image viewer now where
104:12 - that's getting applied is if we go down
104:14 - to the bottom of Cl image we're just
104:16 - setting that in the Styles tag but
104:18 - ultimately the issue here is we're still
104:20 - using the resource height we're not
104:22 - using the trans trans formations height
104:24 - so what we're going to do is we're going
104:25 - to add to the beginning of this we're
104:27 - going to say if transformations. height
104:30 - actually exists we're going to use that
104:32 - first and similarly we're going to do
104:34 - the same for our width so we need to
104:36 - make sure we update that width as well
104:38 - but as soon as we update that value we
104:39 - can now see that we do have that nice
104:41 - portrait image and it's able to scale
104:43 - nicely so I can show you that I'm going
104:44 - to close the panel we see that it does
104:47 - fit really nice and Center in there it's
104:49 - going to scale nicely if we go back to
104:52 - the land Cape version whether that's
104:54 - that or the original version let's just
104:55 - go to the original and I close we can
104:57 - see that it's dynamically based off of
105:00 - that value going to scale really nicely
105:02 - inside that canvas so just a little
105:04 - quick CSS tip there but to my point if
105:06 - we go back to that portrait image that
105:10 - was the whole goal here where we do now
105:12 - have that nice portrait image that we
105:14 - were able to dynamically crop and resize
105:16 - so now after we have that we have all
105:18 - the different ones we wanted to add we
105:19 - have our original which is just the
105:20 - original we have the square we have the
105:23 - landscape and we have our portrait so
105:25 - now I think the last thing that we need
105:26 - to do here is actually just update these
105:28 - icons now luckily for us we have some
105:30 - pretty simple icons we can use we're
105:32 - going to just simply use Square we're
105:34 - going to use rectangle where we have
105:36 - both a horizontal and we have a vertical
105:38 - rectangle so let's go ahead and add
105:40 - those we have our Square which is going
105:42 - to be square we can go ahead and import
105:44 - that we have our landscape which is
105:47 - going to be rectangle
105:49 - horizontal we can go ahead and import
105:52 - that and then finally our
105:54 - rectangle vertical and finally import
105:58 - that did I spell it wrong it looks like
106:00 - I didn't spell it wrong it looks like I
106:02 - just simply tried to do it before it was
106:03 - actually ready for it but now we have
106:05 - all those Imports imported and our
106:08 - updated UI to go along with it so I
106:10 - think that's looking pretty good let's
106:12 - take a look at what we got so far we
106:14 - have both of our enhancements with all
106:17 - the different options we have our
106:19 - cropping and resizing with all of our
106:20 - different options and now finally we get
106:23 - to add our filters now our filters are
106:25 - again going to work the same exact way
106:27 - as we did our enhancements and our
106:29 - cropping but a little bit more fun where
106:31 - we can see here we're using an image to
106:33 - display this because the nice thing
106:34 - about this is because of the way that it
106:36 - kind of works it's a lot easier to show
106:38 - A visual representation of it inside the
106:40 - UI since we can just show a bunch of
106:42 - square images that include that filter
106:43 - rather than trying to wedge in all those
106:46 - different sizes all the different
106:47 - enhancements and having all that
106:48 - processing in the UI this is going to be
106:50 - quick and easy for being able to show a
106:52 - visual way
106:53 - to show those different filters and
106:54 - effects so the first thing I'm going to
106:56 - do is actually just update this image to
106:57 - a clld image so let's add CL image we
107:01 - can add this
107:02 - as our resource
107:05 - dopu ID we can set this in a second here
107:09 - but with our resource and height we
107:11 - don't need that image to be that big
107:13 - looking inside of the panel after it
107:14 - updates we can see that well it looks
107:16 - okay we have our image it's using that
107:19 - re resource width and height but let's
107:20 - actually open this up in a new tab
107:24 - that image is way larger than we would
107:26 - ever need in that little space let's
107:28 - actually see what the rendered size of
107:30 - that is if we look at that that's only
107:31 - currently 156 pixels wide so because
107:35 - we're using Dynamic cropping and
107:36 - resizing I can just simply set that
107:38 - value on the image itself so I'm going
107:40 - to set my width as
107:42 - 156 and I'm going to also set my height
107:45 - as 156 because instead of showing that
107:48 - original size I'm just going to show
107:49 - squares so that it always looks
107:51 - appropriate and doesn't create really
107:53 - long list and it doesn't create really
107:55 - short list it's pretty consistent in the
107:57 - UI now the only thing I'm going to add
107:59 - in addition to that is crop of fill so
108:02 - that it takes that space and actually
108:04 - gives me that crop otherwise it's just
108:06 - going to use that value in the Dom which
108:08 - is just going to kind of skew it but we
108:09 - can see that it was already updated and
108:11 - we now have this nice little
108:12 - representation of our image and best yet
108:13 - if we look over this image we can see
108:16 - that the intrinsic size is that 384 and
108:20 - it's able to do so because it's
108:21 - generating that dynamic sour set of the
108:23 - one times and two times image and
108:25 - because I'm on a retina display it's
108:27 - showing that two times image so now at
108:29 - this point let's actually have some fun
108:30 - with this and start to add some filters
108:32 - probably some of the easiest filters to
108:34 - add to images are called artistic
108:37 - effects in Cloud M and if we look at
108:38 - some of these examples here we have a
108:40 - ton of different filters that we can
108:42 - apply we're not going to add all these
108:43 - I'm just going to pick a select few but
108:45 - ultimately the way that this syntax
108:47 - works and let me look at the URL Syntax
108:49 - for a second here and hide myself we can
108:51 - see that the way that this works is it's
108:53 - eore art and then that filter name
108:56 - inside the next Cloud documentation it's
108:57 - going to work a little bit differently
108:59 - where a lot of these are going to just
109:00 - be top level options that we can add
109:02 - where for instance let's add cpia which
109:05 - is a pretty common filter we I'm going
109:06 - to go ahead and clone this list item
109:09 - where let's now add cpia and we can
109:11 - already see in our panel that it already
109:13 - added that second option with that cpia
109:15 - effect so now let's add two more where
109:18 - let's clone this another two more times
109:20 - and as far as what filters to use how
109:22 - about I want to use Sizzle for this one
109:24 - now Sizzle is not available as a top
109:26 - level prop but what is is this art prop
109:29 - where we can pass in any of those
109:31 - strings that correlate to one of those
109:32 - artistic filters so back on CL image for
109:35 - my next filter I'm going to change sepia
109:38 - to Art equals Sizzle and looking inside
109:40 - of my options we can see that it gives a
109:42 - nice effect to that image now as my last
109:44 - one how about we use grayscale cuz
109:46 - that's a good common one to want to use
109:48 - so this time I'm going to replace cpia
109:50 - with grayscale and we can see we have
109:52 - nice four options including the original
109:54 - for the different filters that people
109:56 - can add and you can feel free to add as
109:57 - many as you'd like now be sure when
109:59 - we're adding all these to add an ALT
110:01 - description for all these such as
110:03 - grayscale we can add our
110:07 - Sizzle we can add cpia and then we can
110:11 - keep no filter when we want that
110:13 - undefined but now back at the top of the
110:15 - code let's do the same thing that we did
110:17 - before and now create our state for
110:18 - filter so I'm going to go ahead and
110:20 - clone my crop I'm going to set that to
110:23 - set filter update the F there and now
110:26 - for this one I'm going to scroll below
110:28 - my crop where I'm going to say if filter
110:31 - where I'm going to do things a little
110:32 - bit differently than I did for the past
110:34 - two because we know that two of these
110:36 - grayscale and sepia are top level props
110:39 - so instead let's do I'm going to create
110:41 - an array that includes grayscale and my
110:45 - sepia and I'm going to say if this array
110:48 - includes filter then I'm going to
110:50 - actually do something in a second here
110:52 - but we can see we do get a type error so
110:54 - we also need to add if type of filter
110:57 - equals string just to make sure
110:59 - typescript is actually happy here but
111:01 - now let's actually add the
111:03 - transformation to our Transformations
111:05 - object so I'm going to say
111:08 - Transformations filter equals true
111:12 - because we're basically setting that
111:14 - Boolean on that prop to True since
111:16 - that's what it accepts and we can do a
111:18 - similar thing to that with the
111:20 - enhancement because specifically restore
111:22 - improve and maybe not remove background
111:24 - unless you rename the key for this but
111:26 - these all can do that same thing so you
111:28 - can apply the similar approach to that
111:30 - but for this one we can see we also need
111:32 - to make typescript happy for this so I'm
111:34 - going to say as key of
111:37 - Transformations and we can make sure
111:39 - that that's going to specify that that
111:41 - key needs to be included as part of that
111:43 - Transformations type so we can see now
111:46 - that if we have a filter that includes a
111:48 - top level prop let's just simply apply
111:50 - it as a Boolean and for the last one we
111:52 - know that if it's Sizzle we just need to
111:54 - set that value as the art prop now
111:56 - technically we could probably do a
111:57 - similar thing to what we did with the
111:59 - top level props where we know that these
112:01 - art filters there's going to be multiple
112:03 - values of those so if we look for all
112:04 - the keys that are going to be art
112:06 - filters we can apply it to that singular
112:08 - prop so what I'm going to do is I'm
112:10 - going to copy this if statement and I'm
112:12 - going to say else if filter equals
112:14 - string and we can pull that up to make
112:16 - it a little bit cleaner if we wanted to
112:17 - but I'm going to replace this array and
112:19 - I'm going to say Sizzle and honestly we
112:21 - could add all those other filters we
112:23 - want such as Frost if we want but for
112:24 - now I'm just adding only Sizzle but then
112:27 - we can say if transformations. art
112:30 - equals filter that way it's going to
112:32 - apply whatever art effect that we
112:34 - include in here as an art filter now we
112:37 - only coded up the core Logic for this so
112:39 - let's actually make this interactive and
112:41 - work the nice thing is we already did
112:42 - this two other times so we know exactly
112:44 - what we need to do we need to set these
112:46 - onclick handlers for each and every one
112:47 - of our different options and make sure
112:50 - that it has a dynamic value so that it
112:53 - shows that border only if it's being
112:55 - used so I'm going to go ahead and first
112:57 - of all collapse down these buttons like
112:59 - I usually do just to make it a little
113:01 - bit easier to read as we're working
113:03 - through this but now I'm going to go
113:05 - ahead and first of all copy that on
113:07 - click I'm going to add this to each of
113:10 - those buttons and then I'm going to
113:12 - start to actually set what that's going
113:14 - to be so we have set crop that'll be set
113:18 - filter and then I can start to add my
113:21 - undefined
113:23 - I'm going to add my
113:27 - sepia
113:28 - Sizzle and finally grayscale now of
113:32 - course we need to also set our Dynamic
113:34 - borders so let's go ahead and copy that
113:37 - as well so we have crop equals portrait
113:40 - I'm going to replace this border of
113:42 - white for each of those and now set this
113:46 - to be
113:48 - filter so if
113:50 - filter equals
113:53 - or rather if filter equals undefined of
113:57 - course if filter equals
113:59 - CIA if filter equals Sizzle and finally
114:05 - filter equals grayscale so when we pull
114:08 - it up we can now see that it's currently
114:10 - selected on no filter because we don't
114:12 - have anything selected but let's try
114:13 - adding sepia where we can see after it
114:16 - loads we now have that CP effect if we
114:19 - want to add sizzle
114:23 - we get Sizzle as well and finally
114:28 - grayscale and we get that nice effect
114:30 - now to be clear it's only going to take
114:32 - that long to load the very first time
114:34 - that you run this uh filter or whatever
114:36 - effect because what's actually happening
114:38 - behind the scenes is cloud Nary is going
114:40 - to process that image the first time and
114:42 - then it's going to store it in Cache so
114:43 - we can see as we're flipping through
114:45 - these images now it's already cach on
114:47 - cloud CDN so it loads super fast but
114:50 - what we can see is we now have these
114:52 - filters and you can really add as many
114:53 - as you'd like to really give a cool
114:55 - effect for the different images that we
114:57 - have but now we have one problem I was
114:59 - able to add all these really cool
115:01 - filters and effects to all my different
115:03 - images but how do we actually save this
115:05 - now as you might have noticed as we've
115:07 - been working through this we do have
115:08 - this save button and we also have this
115:10 - little drop down for save as copy so we
115:13 - can just hook into these and we can
115:14 - trigger a save on the image itself to
115:17 - get this moving so inside of our edit
115:19 - panel at the bottom you'll find the
115:21 - sheet footer where we can see that we
115:23 - have that save option which is just a
115:25 - button that we have available and we're
115:27 - using this drop down menu from Shad CN
115:30 - in order to show more options and
115:32 - specifically we're showing the save as
115:34 - copy now previously the only uploading
115:36 - that we've done so far is using the
115:38 - upload button and that's all been
115:39 - handled automatically for us so now we
115:41 - need to create our own endpoint so that
115:44 - we can send those uploads straight to
115:45 - Cloud now starting off let's add the
115:47 - click Handler to our save button so I'm
115:50 - going to add on click and let's call
115:52 - that handle on Save and I'm going to go
115:55 - to the top of the file so I can Define
115:57 - this function and the way that I like to
115:58 - structure my components is I like to
116:00 - have all the state and then I have the
116:02 - use effects kind of after that and then
116:04 - I like to define the functions after
116:06 - that kind of close to the bottom just to
116:08 - make it a little bit easier for me to
116:09 - kind of find where everything is so how
116:11 - about with these already defined
116:13 - functions I'm going to add my new
116:14 - function of handle on Save let's just
116:17 - add a little note here CU it just helps
116:20 - it easier to scan and find these things
116:22 - now to actually save this image the
116:24 - first thing we need to do is we need to
116:25 - grab the data for the changes that we're
116:27 - actually going to save to this
116:29 - particular file now the way that it's
116:31 - structured is if you remember all these
116:33 - are just URL parameters inside of a big
116:35 - URL so what we're going to do is we're
116:38 - going to just grab that URL and then
116:40 - we're going to send that to the actual
116:42 - upload process now in order to construct
116:44 - that URL we don't need to do any fancy
116:46 - hacking around to maybe grab it from
116:48 - clld image we can import a new function
116:50 - called get clld image URL now you can
116:53 - learn more about this inside of the next
116:55 - Cloud n docs but this is going to have
116:57 - the same exact API as CL image only
117:01 - you're passing it as a function which
117:03 - returns a URL so I'm going to copy that
117:05 - I'm going to go to handle on Save where
117:09 - I'm going to now create constant URL is
117:11 - equal to my get C image URL and I'm
117:14 - going to actually go to CL image which
117:16 - is the bottom one I'm going to grab all
117:19 - these props including the
117:21 - transformations and I'm going to
117:22 - actually paste them inside as my options
117:25 - and I can get rid of the alt because
117:27 - that doesn't matter I can get rid of the
117:28 - Styles because that doesn't matter but I
117:30 - can now change these into properties so
117:34 - that I'm passing that through and
117:36 - basically constructing it the same way
117:38 - that I would for the CL image to just
117:41 - grab the URL now kind of proving that
117:43 - this works the way that I'm talking
117:45 - about let's conso log out our URL and
117:48 - now hitting the save button we can see
117:50 - that it spit out a URL but now let's
117:52 - open that up in a new
117:54 - tab where once it loads we can see it's
117:56 - the exact same image that we were
117:58 - actually seeing inside of our media
118:00 - library now before we actually pass this
118:02 - URL through as is and save it one thing
118:04 - that I do want to call out is if we look
118:06 - back in the URL remember we're including
118:08 - F Auto by default which inside of a
118:11 - browser it's automatically going to
118:13 - deliver that most efficient format but
118:15 - when we send this to a serverless
118:17 - endpoint it's essentially a node
118:19 - environment and we're not going to have
118:21 - that signal from from the browser to
118:22 - determine what format to actually send
118:24 - through so we probably don't want to
118:26 - include F Auto it'll probably work but
118:28 - it just will potentially give unexpected
118:30 - results so what we want to do instead is
118:32 - we just want to remove F Auto from this
118:34 - picture entirely so that we don't need
118:36 - to consider and be a little bit more
118:38 - consistent and uh reliable for the
118:41 - results that we get so because get CL
118:43 - image URL and clld image use F Auto by
118:46 - default we need to opt out of it so what
118:48 - we're going to do is we're going to also
118:50 - pass in a format of of default which is
118:53 - just saying that we want to use the
118:54 - default format that is inherent to the
118:56 - image itself now to similarly point out
118:58 - another one we also have q auto which
119:01 - stands for quality of Auto which I don't
119:02 - think we covered yet which is going to
119:05 - automatically compress the image to a
119:06 - point that's not going to be visually
119:08 - different so we're trying to get as high
119:10 - quality of a result as we can by
119:12 - compressing it as much as we can it uses
119:13 - AI under the hood to do that which is
119:15 - pretty amazing but nonetheless it
119:17 - depends on if we want to upload the
119:19 - original asset or if we want to upload a
119:22 - compressed asset and I think because
119:24 - we're going to now save that image and
119:26 - then in the future we're we might apply
119:28 - more Transformations we probably want to
119:30 - use the default quality right that way
119:32 - we're not overc compressing things again
119:34 - and again and again so let's do the same
119:36 - thing that we did with format but with
119:38 - quality so I'm going to go ahead and
119:39 - duplicate this and add quality of
119:42 - default and again when you're using
119:44 - these URLs inside of the browser and
119:46 - you're showing these to visitors you
119:48 - always want F Auto and Q auto because
119:50 - that's going to give your visitors the
119:52 - best experience possible but we're going
119:54 - to be taking this URL and we're going to
119:56 - be overwriting the original image with
119:58 - the new Transformations so we probably
120:01 - want to retain as much quality as we can
120:02 - inside of our original asset now just to
120:05 - kind of drive that concept home a little
120:07 - bit more is I want to point out that
120:09 - inside of your media library we have all
120:11 - of our originally uploaded Assets Now
120:14 - when we create those Transformations we
120:15 - can create new versions of that as much
120:17 - as we want with those little URL
120:19 - parameters but that never impacts that
120:22 - original image so what's happening is
120:24 - we're creating derivatives of those
120:26 - where you have that or original image
120:28 - and then you can apply Dynamic
120:30 - Transformations as much as you want but
120:32 - again those never impact the original
120:34 - image but what we're going to do is
120:36 - because we want to apply those
120:38 - Transformations and then save those
120:40 - Transformations we will overwrite the
120:42 - other the original image now just to be
120:45 - clear we're also going to be adding an
120:46 - option to save as copy so that you have
120:49 - the option to either overwrite the image
120:52 - or you have the option to save it as a
120:53 - copy depending what you want to do but
120:55 - just making clear what we're actually
120:57 - going to be doing here but now that we
120:59 - have this generated URL that we can use
121:01 - to save our image let's actually save it
121:03 - so what we're going to do is we're going
121:05 - to create that API endpoint so that we
121:07 - can send this URL and then overwrite the
121:09 - file so I'm going to open back up my
121:11 - sidebar where under Source app API I'm
121:14 - going to go ahead and just duplicate our
121:16 - existing resources API and I'm going to
121:18 - call that upload that way it just gives
121:20 - me a little bit of a starting point
121:22 - where we already import the SDK we're
121:24 - configuring it so it just makes it a
121:26 - little bit easier for me but what we're
121:27 - going to do inside of here is first of
121:29 - all it's currently a get let's make this
121:32 - a post because we're going to be sending
121:34 - data to this endpoint and then we want
121:36 - to change this from actually requesting
121:39 - a resource to now uploading a resource
121:41 - so I'm going to get rid of the sidebar
121:43 - just to give us a little bit more room
121:44 - but I'm going to say constant results is
121:46 - equal to A8 cloudinary do uploader do
121:50 - upload and then I'm going to pass in my
121:53 - URL as that first argument and this
121:55 - upload option takes a few different
121:56 - formats including actual image data so
121:59 - you can check out the documentation but
122:00 - because we're only ever going to use a
122:02 - URL I'm going to just simply pass
122:04 - through that URL as Z now as far as
122:07 - getting the data to our endpoint we kind
122:09 - of have two good options where we have
122:10 - form data and we have Json now we form
122:14 - data would probably be the best option
122:15 - if we're actually passing in raw image
122:17 - data but because we're only ever going
122:19 - to be using a URL in our instance Jason
122:22 - probably works just fine so what I'm
122:23 - going to do is first off this post
122:25 - request is going to take a first
122:27 - argument of request which I can type out
122:30 - as a standard web request and then I'm
122:32 - going to say my pams is equal to await
122:36 - request. Json and then I'm going to
122:38 - actually destructure the URL from that
122:41 - Json now once we actually have the
122:43 - results we can simply pass this back as
122:45 - the data but let's head back over and
122:47 - let's test this out before we do
122:49 - anything else back inside my handle on
122:51 - Save now I can do await Fetch and I can
122:55 - do my SL API SL upload I'm going to set
122:58 - the method of post I'm going to add my
123:02 - body which will json. stringify and
123:05 - we'll add our URL now we can see I'm
123:08 - getting a syntax are on a wait and
123:10 - that's because the handle on Save I
123:11 - never made an async function of course
123:14 - but then let's add constant results for
123:16 - our fetch request and let's try to
123:18 - actually log that out I'm going to log
123:19 - that out separately from the URL just so
123:21 - that we can debug if we need to so
123:23 - pulling that back up I'm going to hit
123:25 - save and once that upload returns first
123:27 - of all we can see that URL and we see
123:29 - that we do get a basic response and we
123:31 - get a status of 200 so it seems like
123:33 - it's okay now I never actually uh
123:36 - transformed this into Jason let's see if
123:37 - I can just store this as a global
123:39 - variable instead of having redo it let's
123:41 - do await temp one
123:44 - Json and we can see our data which is
123:47 - going to include that uploaded asset so
123:49 - that means that it worked perfect now we
123:52 - have one problem here this flow would
123:54 - actually work perfectly for save as copy
123:57 - but we want to actually save and
123:59 - overwrite our existing image now heading
124:01 - over to the cloud Nary upload
124:03 - documentation for a second let's scroll
124:05 - down until we get to this public ID
124:07 - parameter now what we want to do is
124:09 - we're currently uploading that file but
124:12 - we're just uploading as a new file what
124:13 - we want to do is we want to overwrite
124:15 - the existing file so what we can do is
124:17 - we can pass in that public ID of our
124:20 - existing file so when we we do so we're
124:22 - saying we don't want to just upload this
124:24 - we want to overwrite that public ID now
124:26 - another parameter that I also want to
124:28 - point out is overright where we can see
124:31 - here this is going to allow us to
124:33 - control whether or not if we pass in a
124:35 - public ID that we do overwrite that
124:37 - existing asset now this defaults to true
124:40 - so we don't actually have to set it but
124:42 - if you want to try uploading with your
124:44 - own public ID and you don't want to
124:46 - overwrite if it actually exists then in
124:48 - that case you would want to set it to
124:50 - false but we're not going to set it to
124:51 - anything because by default again it is
124:53 - true so when we use a public ID it will
124:56 - overwrite that file for us so what this
124:58 - practically means for us is inside of
125:00 - this upload request I'm going to also
125:03 - add public ID which is going to be our
125:05 - resource dopu ID now over inside of the
125:09 - endpoint I'm going to also destructure
125:11 - that public ID and then I'm going to add
125:14 - that to the upload where we're going to
125:16 - specify upload options here now I want
125:19 - to create this upload options object on
125:21 - the Fly because we want to do this
125:23 - dynamically specifically because we're
125:25 - going to reuse this endpoint for our
125:27 - save on copy we don't always want to try
125:30 - to send in a public ID so first off I'm
125:32 - going to create constant upload options
125:35 - and set that equal to an empty object
125:38 - but then I'm going to say if type of
125:40 - public ID equals string let's Now set
125:44 - upload options public ID to our public
125:48 - ID now to keep typescript happy let's
125:51 - make sure we find this as a record with
125:53 - a string string but then I'm going to
125:56 - take these upload options and I'm going
125:57 - to pass it in as a second argument to
126:00 - our upload method so now let's give this
126:02 - a try again so I'm going to go ahead and
126:04 - click save and we're going to wait a
126:05 - second if we want we can open the
126:06 - network request but we already see that
126:08 - we have our results and again I forgot
126:10 - to log it out as Json so let's store
126:12 - that as a variable and then I'm going to
126:14 - do the same thing and await that to my
126:17 - Json and if we start to look at the data
126:20 - we can see that this should be the same
126:22 - image signature or the same URL as it
126:25 - was before except maybe a version change
126:27 - so let me open up this image in a new
126:30 - URL and we can see that we do have that
126:32 - new image and we can see if I actually
126:34 - try to refresh the page on the main
126:36 - image itself that that's also updated as
126:38 - well I now have the ability to go in and
126:40 - crop and resize this new image to
126:42 - however I want and then of course save
126:45 - that optionally if I wanted to but
126:47 - there's a little bit of an edge case
126:48 - that we need to cover here let's go back
126:50 - to one of our original images and let's
126:53 - let's try this one for instance where
126:55 - when we looked at this image we're
126:57 - looking at it without any URL parameters
126:59 - with it so we never actually looked at
127:01 - the original image in its original state
127:04 - so let's just open this image up in a
127:06 - new tab for a moment I'm going to get
127:08 - rid of all the URL parameters associated
127:11 - with it just so that we can prime that
127:13 - in Cache but now I'm going to add some
127:15 - filters to this let's go ahead and just
127:17 - add some cropping and resizing let's add
127:20 - one of our other filters to it how about
127:21 - for this one let's add CIA I think that
127:24 - looks kind of nice and we can let it
127:26 - load for a second it probably doesn't
127:27 - matter too much but ultimately we have
127:29 - our image and now let's try to save that
127:31 - so I hit my save just like before let's
127:34 - let that load in and something actually
127:36 - happened this time we're getting a 500
127:38 - response what's going on here if I open
127:41 - up the terminal I get this error of
127:43 - error in loading that URL now as I
127:46 - mentioned before when we're actually
127:47 - loading this URL from cloudm the very
127:50 - first thing that it does is cloud Nary
127:52 - tries to process this image apply all
127:54 - the Transformations and everything to it
127:56 - so that it can then store it in the cach
127:58 - and afterwards we can see that it loads
128:00 - super fast right but in that process if
128:03 - we try to upload the image before it was
128:05 - ever processed it needs to both do that
128:08 - processing on the Fly and then upload
128:11 - and it might not always be able to do
128:12 - that within the timeout time or
128:14 - generally speaking it's just probably
128:15 - General best practi is not to try to
128:17 - upload an image that also needs to
128:19 - process first so what we can do is we
128:21 - can prime that URL and pre-process it so
128:24 - then we can then push it straight
128:25 - forward to the to the uploader function
128:28 - so all I'm simply going to do is before
128:30 - we actually do the upload request I'm
128:32 - going to add a wait Fetch and then I'm
128:35 - going to pass in that URL and that's
128:36 - simply going to Prime that URL for us
128:38 - and pre-process it for when we actually
128:40 - upload it and as while we're here I'm
128:42 - going to now transform this result to
128:45 - Jason just to make it a little bit
128:46 - easier to read so now let's go back and
128:48 - I'm going to go ahead and try that again
128:50 - and this time we can see we got our
128:51 - results and it looks like everything was
128:53 - happy because we did get a successful
128:55 - response now here's another snag that
128:57 - we're going to hit if I go back to this
128:59 - URL and I actually try to refresh the
129:02 - page we can see that we get the original
129:04 - image where what's going on we just
129:06 - saved that image and overwrote it right
129:09 - now if you remember before we hit that
129:11 - first snag the thing that I originally
129:12 - wanted to point out is that we were
129:14 - priming this original URL if you
129:16 - remember we went in here we stripped the
129:18 - URL parameters and we just loaded the
129:20 - original image so what we were doing is
129:22 - we were loading this image into cache
129:24 - before we ever actually hit it in a
129:26 - separate upload request now that's where
129:29 - the problem lies where because it's in
129:31 - cash it doesn't just simply
129:33 - automatically invalidate we need to tell
129:35 - it that we want to invalidate all copies
129:37 - of that URL now just to point out in the
129:40 - documentation we can see that it does
129:42 - make a note that we will want to
129:44 - invalidate the assets specifically if
129:46 - we're using versions and we want those
129:47 - versions to be invalidated because
129:49 - that's another mechanism that we can use
129:51 - but in this case we probably want to
129:53 - invalidate all the different options
129:55 - because we do want to save that original
129:57 - asset if you do want to learn more about
129:58 - how that invalidation works you can
130:00 - check out this page invalidate cash
130:02 - assets which you can find by searching
130:03 - in the documentation but to actually
130:05 - make this happen we're going to just
130:06 - simply pass in this invalidate parameter
130:08 - and we're going to set it to true so
130:10 - inside of our API route because we know
130:12 - we're passing in a public ID and if
130:14 - we're passing in a public ID that means
130:16 - we want to overwrite an image we're
130:17 - going to add that additional invalidate
130:20 - and set it to true inside of that if
130:22 - statement but now we see that we get an
130:24 - error because we're trying setting a
130:25 - bullion so all we got to do is say that
130:27 - this can also be a bullan but just to
130:29 - validate this is working let's try and
130:30 - do this on another image how about I'm
130:32 - just going to recrop this same existing
130:34 - image so let's Prime this one as well
130:36 - way to get rid of those other tabs let's
130:38 - strip all the URL parameters so that we
130:41 - have our original image which is going
130:43 - to be that transformed image that we
130:44 - already have but now let's head back
130:47 - let's open up the edit panel let's make
130:49 - this a square I can add a new filter
130:52 - let's make this one grayscale and then
130:54 - now I'm going to hit save now you
130:55 - probably want to add some kind of
130:56 - loading indicator to this just so that
130:58 - people don't think that the UI is
130:59 - stalled when you're actually saving but
131:01 - nonetheless we already got back our
131:03 - results we can look inside and we have
131:05 - that image now let's go ahead and
131:06 - refresh this page to see if that worked
131:09 - and we now see that we do have our nice
131:11 - cropped image because it did save it
131:13 - overwrote that image and it invalidated
131:16 - the cache for us we can even see if we
131:17 - hit the back button that it's already
131:19 - updated in our original page now now we
131:21 - have the save functionality worked out
131:23 - but what happens after the save so if I
131:25 - head back in here and if I actually hit
131:27 - the save button nothing's going to
131:29 - happen afterwards now what I want to
131:31 - happen is I want to close this panel as
131:33 - long as that save is actually successful
131:35 - and complete now if you're following
131:36 - along with the starter template I
131:38 - already have this option or function
131:40 - rather called close menus which
131:42 - essentially just hides all those panels
131:44 - it closes all the UI and this is
131:46 - something that we don't necessarily need
131:47 - to cover in this course but essentially
131:49 - that's just my function I can call in in
131:51 - order to easily get rid of that UI so
131:53 - I'm going to take that Clos menus and
131:55 - after I know that it was successfully
131:56 - saved I'm going to add close menus and
131:59 - let's get rid of those console logs and
132:01 - let's just give that a quick try we
132:02 - don't have anything on this of course
132:04 - but let's just see if it closes and it
132:06 - did so next what I want to also do is if
132:08 - I have any of these Transformations
132:10 - applied such as landscape or whatever I
132:13 - wanted to actually apply I wanted also
132:15 - to reset all those Transformations
132:17 - because now the original asset is the
132:20 - asset that I want to show so I want to
132:22 - make sure that those are clear so that
132:24 - it's going to give me the option to go
132:26 - back and now add new new Transformations
132:29 - now for this one I don't have a function
132:30 - already available to easily do this but
132:33 - what I'm going to need to do is if we
132:34 - scroll back up to our state we're going
132:37 - to need to set enhancement set crop and
132:40 - set filter and for each of those we're
132:42 - essentially just going to want to set it
132:43 - to undefined to reset that state so I'm
132:45 - going to go back to where I have that
132:47 - close menu where is it closes menu
132:52 - eventually find it I'm going to create
132:54 - another function underneath and let's
132:55 - call this discard changes because this
132:58 - is something that we could use in the
132:59 - feature as well again I'm going to just
133:01 - add that little note because I like to
133:03 - have it a little bit easier to find for
133:05 - now I'm going to get rid of that
133:06 - description but here let's add set
133:09 - enhancements to
133:11 - undefined we'll do the same thing to set
133:14 - filter and the same thing to set crop
133:17 - and now let's take this discard changes
133:20 - and we're going to do the same thing
133:22 - with that so I already have my landscape
133:23 - I'm going to add another filter and oh
133:25 - that's a cool little effect here but now
133:27 - I'm going to hit save
133:29 - again we can see that it closed it if I
133:32 - go back up into my Transformations we
133:35 - can see that everything was actually
133:37 - reset now another thing that you might
133:38 - have noticed is that original image or
133:41 - rather that new image is currently being
133:43 - displayed because we invalidated that
133:45 - now sometimes the way that it'll work is
133:48 - if you remember in previous examples we
133:51 - needed to force a state rendering for it
133:53 - to actually refresh that image now it
133:56 - seems like that's automatically
133:57 - happening but to be sure to make sure
133:59 - that we get that loading UI so that it
134:01 - is showing some kind of indicator as
134:03 - we're waiting for it to load what we can
134:05 - do is we can set a version on the URL so
134:07 - that it'll Force whatever that new
134:09 - version is and we can just use the date
134:11 - for that so up where I'm defining my
134:13 - state I'm going to add a version and I'm
134:16 - going to add set
134:18 - version or singular now for a default
134:22 - value I'm just going to set that as one
134:24 - and I want to make this a number as well
134:25 - because we're going to use a date Tim
134:27 - stamp now where I'm closing my menu and
134:29 - discarding my changes what I can do is I
134:31 - can say set version and I can just use
134:34 - date. now and what date. now is going to
134:37 - give me is basically a number that's
134:38 - going to represent the current Uh
134:40 - current time date time now heading down
134:43 - to my clld image which I'm displaying on
134:45 - the page I'm going to do two things
134:46 - first of all I'm going to add it as the
134:48 - key to force that render but I'm I'm
134:51 - also going to add it to the image itself
134:52 - just to make sure that the image itself
134:54 - is going to be be providing the most
134:55 - recent version and again with the
134:57 - invalidation that shouldn't be a problem
134:59 - but this is really just a kind of safety
135:00 - net for us so I'm going to wrap the Json
135:03 - stringify with that string then I'm
135:05 - going to add my version and then I'm
135:08 - going to Simply pass along my version as
135:10 - a version for the URL and again because
135:12 - we weren't really experiencing any
135:14 - issues we shouldn't really notice too
135:15 - much of a difference but let's go ahead
135:16 - and just apply something we going to add
135:18 - portrait and we can see with all the
135:20 - different edits because layering over
135:21 - and over and over the image is getting
135:22 - smaller so it's getting a little bit
135:24 - blurry but nonetheless let's go ahead
135:26 - and click save and as I do that I'm
135:28 - going to hide the panel we can see that
135:30 - it the panel was hidden and then we had
135:33 - that image refresh and we even had that
135:34 - little loading indicator while that
135:36 - happened now if I refresh the page we
135:38 - can see that the image does look good so
135:39 - maybe there's just a responsive image
135:41 - issue for when we're applying those
135:43 - Transformations let me show that
135:45 - again we have that square image or maybe
135:47 - we can add the landscape or anyways
135:50 - because we went from the image to the
135:51 - small images maybe there's just a logic
135:53 - hiccup in the in that canvas logic that
135:55 - we showed before which made it show a
135:57 - lot bigger than it actually was but we
135:59 - can see that with our changes that it
136:02 - looks pretty good and we have that
136:03 - portrait and it's not way overblown now
136:06 - before we move on to adding save as copy
136:08 - which should be pretty simple I do want
136:09 - to do one thing so inside of our panel
136:12 - we currently show that save no matter
136:15 - what and that probably doesn't make a
136:16 - lot of sense because we only want to
136:18 - save something if it actually has
136:19 - changes so so inside of my code the way
136:22 - that we can determine if we have any
136:23 - changes is we can inspect this
136:25 - Transformations object so what I'm going
136:27 - to do is at the bottom of all the
136:29 - different effects that I'm adding I'm
136:30 - going to say object. entries
136:33 - Transformations and I'm going to check
136:36 - the length of that to see if it's
136:37 - greater than zero I'm going to set that
136:39 - to a constant of has
136:42 - Transformations I'm got to make sure
136:43 - that I actually spell that right but now
136:45 - what I can do is I can take that has
136:47 - Transformations let's go to handle on
136:49 - Save we found the but but in and now I
136:51 - can just wrap this entire area with that
136:54 - and specifically this div here so I'm
136:56 - going to
136:57 - say has Transformations
137:00 - and I'm going to indent this div and now
137:05 - we have that wrapped with that logic so
137:06 - let's see if that works we can
137:08 - immediately see that that save button is
137:10 - no longer there but let's try to add a
137:12 - transformation let's add Square we can
137:14 - see that it popped right back in now we
137:16 - could probably also update how we're
137:18 - wording this close button where if we
137:20 - have Chang ches maybe we want to cancel
137:22 - the changes instead of just simply close
137:25 - so around the same area we can do
137:26 - something similar where if we head down
137:28 - and find that close I'm going to say has
137:31 - Transformations let's add cancel
137:34 - otherwise we'll have the close and maybe
137:36 - we want to also update the color of this
137:38 - button so that maybe it's Red if we have
137:41 - Transformations and want to cancel them
137:43 - just to make it a little bit more
137:44 - prominent that we're going to lose those
137:46 - changes so I'm going to change class
137:48 - name to make it a dynamic value
137:51 - hide myself here just to make sure it's
137:53 - clear and we're going to say if has
137:57 - transfer formations let's make this
138:02 - BG red
138:04 - 500 otherwise we're going to add that BG
138:08 - of transparent and we can now similarly
138:10 - see that because we do have a change we
138:12 - see both the save as well as the cancel
138:14 - if we get rid of it we can see that we
138:16 - do show that close button but if I hit
138:19 - cancel it doesn't actually cancel those
138:21 - changes it just collapses the menu so
138:23 - let's fix that quick so when I hit this
138:26 - button I don't want to just close the
138:27 - menu I also want to use that discard
138:29 - changes function so I'm going to just
138:32 - break this open and I could probably
138:33 - abstract this to a new uh function for
138:36 - that handle if I want it but for now
138:38 - let's just add discard changes and this
138:41 - time when I actually hit cancel we can
138:43 - see that it reverted to its original
138:45 - state and canceled all the
138:46 - Transformations that we had applied so
138:48 - the save functionality worked really
138:50 - well but now let's implement the save as
138:52 - copy now like I mentioned earlier this
138:53 - is going to work really similar to how
138:55 - we did this handle on save so I'm going
138:58 - to scroll down I'm going to find the
138:59 - menu item that's wrapping my save on
139:01 - save as copy text I'm going to add on
139:04 - click and let's call this function
139:06 - handle on Save copy and now I'm going to
139:09 - go back up to where we're defining
139:11 - handle on Save and the first thing I'm
139:13 - going to do is just simply clone this
139:15 - function just to give us a good starting
139:17 - point for how we're creating this so
139:19 - let's rename that to handle on Save copy
139:22 - we're going to do the same thing where
139:23 - we're going to create the URL but one of
139:25 - the bigger things is we're going to not
139:27 - pass in the public ID this time and if
139:29 - you remember inside of our API route
139:31 - we're dynamically overriding that file
139:34 - only if we pass in that public ID so it
139:36 - should just work and upload it as a new
139:38 - copy when it comes back with the results
139:40 - so let's go ahead and console log that
139:43 - out we're now if I open that up and hit
139:46 - save on
139:48 - copy we can see that we did get those
139:50 - results now we also saw in the
139:52 - background that it did reset the image
139:55 - now let's look through this and let's
139:56 - open up this secure URL let me hide
139:58 - myself looking through I have my secure
140:02 - URL we can see that we do have that
140:04 - original image now also let me check the
140:06 - asset ID
140:08 - e624 6 yeah that's different from the
140:11 - resource asset ID that we're on so we
140:13 - did successfully create that new asset
140:16 - but we're still on the original asset so
140:19 - in as far as the UI goes how about we
140:21 - redirect them to this new asset so back
140:24 - inside of the code because I'm going to
140:26 - push them to a new page first of all I
140:28 - can probably get rid of the the menu
140:30 - item and change discards from the below
140:33 - but what we're going to do is we're
140:34 - going to use the nextjs router and push
140:36 - them to the new page so I'm going to go
140:38 - first of all to the top of my page I'm
140:40 - going to import use router from next
140:45 - navigation then if I scroll down to my
140:48 - component the first thing I want to do
140:49 - is I want it to say constant router is
140:51 - equal to use router so I can create a
140:53 - new instance to interface with it and
140:55 - then if we scroll down to our handle on
140:57 - Save copy we can now use that router
140:59 - where we're going to use router. push
141:02 - where I'm going to create a dynamic path
141:04 - of
141:05 - /resources where I'm going to pass in
141:07 - that Dynamic value now if we remember
141:09 - this is going to have a property of data
141:11 - first off so I'm going to say data.
141:14 - asset ID so now let's give this a try
141:17 - I'm going to go ahead and add a
141:18 - transformation I'm going to go ahead and
141:20 - click save as
141:22 - copy where we can see once it's saved it
141:25 - pushed us to that new page which is
141:26 - going to reference that new asset now we
141:28 - do have one problem here let me hit back
141:30 - for a second we don't have that asset
141:33 - available in our media library if you
141:35 - remember in our code we're currently
141:37 - quering our Resources by a specific tag
141:39 - and we never added that tag so it
141:41 - probably makes sense that it's not
141:42 - showing so what I can do inside of the
141:44 - API in point I can say else upload
141:48 - options tags where I can now set it
141:50 - equal to include that tag where if I
141:53 - head back over I can quickly
141:55 - copy the tag string and paste it inside
141:59 - of my tags and the reason that I'm
142:01 - currently doing an else statement here
142:04 - is if we're uploading our public ID and
142:06 - overriding the image I don't want to
142:08 - wipe all the existing tags if there's
142:10 - already tags on it where here we're
142:12 - uploading a new image so there aren't
142:14 - any tags on it unless we specify those
142:16 - tags now we can see that typescript is
142:18 - yelling at us because we are passing in
142:19 - an array with a string so we need to do
142:22 - one last thing and add array of string
142:25 - and we could probably make this look a
142:26 - little bit cleaner pull up an upload
142:28 - option for instance and have that in
142:30 - there but for now that should work as
142:31 - expected but now let's try it again so
142:33 - let's go back to that image I'm going to
142:35 - crop it to a square we going to hit save
142:37 - as copy and after it uploads we can see
142:40 - we went to the new page that works as
142:41 - expected but if we hit back we do need
142:43 - to refresh because we didn't invalidate
142:45 - the queries for this page we do see that
142:48 - new image but okay we have the ability
142:50 - to save our images in multiple ways but
142:53 - what about deleting those images now
142:55 - getting rid of my Dev tools for a second
142:57 - if I click this delete button we can see
142:59 - that we currently get this modal it's
143:00 - basically a confirmation dialogue that
143:02 - just makes us actually delete it if we
143:04 - only want to delete it so we actually
143:06 - know what we're doing and didn't
143:07 - accidentally click but nonetheless when
143:09 - we click this button we want to actually
143:11 - delete that asset Now using the cloud
143:13 - Nary admin API we do have a nice end
143:15 - point for being able to delete our
143:16 - resources it's simply delete resources
143:19 - so first off jumping back inside the
143:20 - code I'm going to go ahead and duplicate
143:22 - my upload end point so I'm going to say
143:24 - delete and call this my API for deletion
143:28 - we're inside we already have a similar
143:30 - boiler plate we have our importing we
143:32 - have our configuration and we're going
143:33 - to be able to get rid of some of this
143:35 - stuff but we can also keep some of it to
143:37 - make it a little bit easier now let me
143:38 - get rid of my sidebar let's first clean
143:40 - up we don't need any of these upload
143:42 - options now we do need the public ID
143:44 - because we're going to delete it by the
143:46 - public ID and then let's get rid of the
143:48 - URL but now instead of the upload loader
143:51 - we're going to use cloud. api. delete
143:54 - resources now resources takes an array
143:57 - where we can pass this public ID
143:59 - directly to it and we can still just
144:01 - pass through these results as is but
144:04 - keep in mind also that this is going to
144:05 - be a post endpoint and because I
144:07 - duplicated the upload endpoint it
144:09 - already isn't is a post request but now
144:12 - let's head back over to our media viewer
144:14 - UI and start to look for that delete
144:16 - where if we remember when we click that
144:18 - original button at the top navigation
144:20 - it's it's going to open that modal so we
144:22 - really only need to interact with the
144:23 - modal button where we can see here that
144:25 - we have our dialogue and that includes
144:27 - that button for deletion so the first
144:29 - thing I'm going to do of course is I'm
144:31 - going to add my onclick Handler and
144:34 - let's call this handle on delete and now
144:37 - let's take this and actually defined it
144:39 - handle on Save I'm going to add it to a
144:42 - similar location that we did to the save
144:44 - and points so I'm going to add my
144:46 - function and acing function rather
144:48 - handle on delete where inside I can run
144:51 - a wait fetch I'm going to hit my/ API
144:54 - delete endpoint make it a method of post
144:58 - pass in my body json. stringify where I
145:01 - can pass in my public ID as resource
145:05 - dopu D and really to delete it that's
145:09 - all we need to do so let's test this out
145:10 - quick so we can stick with this current
145:12 - one because H it's not the greatest
145:13 - image so let's get rid of it let's hit
145:16 - delete and if we wait a second of course
145:18 - we never did anything with the U y so
145:21 - nothing's going to happen but let's try
145:22 - to refresh the
145:24 - page we can see that we no longer get a
145:27 - good page we're getting an error and we
145:29 - could probably clean up these errors
145:30 - just to make sure that it's a little bit
145:31 - more understandable what's actually
145:33 - happening but it's because we deleted it
145:35 - and we no longer have that information
145:36 - to feed into the UI so if we head back
145:39 - to our homepage we can see that we no
145:41 - longer have that image of course so the
145:43 - first thing that we can do is if we do
145:45 - have a successful deletion let's push
145:47 - them to that homepage so I'm going to
145:48 - add router. push and I'm just going to
145:51 - Simply uh reference the homepage we can
145:53 - go ahead and try this on another asset
145:54 - how about this one because the cash
145:56 - isn't quite validate uh invalidated for
145:58 - all the different variations so let's
146:00 - click delete I'm going to hit delete and
146:02 - we can see that we were moved to the
146:03 - homepage now it didn't update of course
146:06 - again because of the query inv
146:07 - validation but let's refresh the page
146:09 - and we can see that it's gone now for
146:10 - all intents and purposes this is
146:12 - probably just fine but as we alluded to
146:14 - earlier we can add some little
146:15 - interactions to make it clear what's
146:18 - happening and while I'll save the save
146:20 - functionality for you how about when
146:22 - we're on delete let's update that little
146:24 - button so that it has a little loading
146:26 - spinner to indicate that it is currently
146:28 - deleting so if I go to the UI what we
146:30 - want to do is we currently already have
146:32 - this deletion state that I'm using in
146:34 - order to control the modal opening or
146:36 - closing which we'll get to in a second
146:38 - but what we're going to do is depending
146:39 - on that state we're going to show a
146:41 - different button so first off let's go
146:43 - to deletion so that we can see what this
146:45 - state looks like but currently it's just
146:47 - a string in that string we have our
146:49 - delete comption and the only thing that
146:51 - we're currently setting it to is
146:54 - undefined or I think I missed it there
146:57 - or we're going to set it to confirm
146:59 - which confirm is just controlling the
147:01 - dialogue to be open so the first thing
147:03 - we want to do is we want to make sure
147:05 - that this dialogue is indeed open on the
147:07 - states that we want it to be open on and
147:10 - maybe not just any state only on the
147:12 - states that we specify currently if the
147:14 - state is defined it's going to be open
147:16 - so the first thing I'm going to do is
147:17 - I'm going to say if deletion and the
147:20 - deletion State and we're going to use
147:23 - that array includes again like we did
147:25 - before and I can get rid of that opal
147:28 - optional chaining because we're checking
147:29 - for it first but let's add first of all
147:32 - I think it's confirm and then let's add
147:34 - another one of deleting where I added an
147:36 - extra e there but then when we're
147:38 - actually trigging that handle on delete
147:40 - let's set
147:41 - deletion and we'll set that to our state
147:44 - of deleting now first things first if we
147:47 - are in that deleting State let's show a
147:49 - different icon let's show a spinner icon
147:51 - so I'm going to
147:53 - say for my deletion state if deletion
147:57 - State equals deleting we're going to do
148:01 - one thing otherwise we're going to do
148:04 - the other thing which will be our trash
148:07 - icon so we're going to say if it does
148:08 - not equal the deleting and because we're
148:11 - going to use the same word delete for
148:12 - both of them I'm just going to keep that
148:13 - outside but now let's just duplicate
148:15 - this because we're going to replace this
148:17 - with a loader where if we head to Lucid
148:19 - we can see that we have a few different
148:20 - loaders that we can choose from where I
148:22 - specifically liked this loader to I'll
148:25 - make sure that I update this to import
148:26 - it but we also need to make sure that
148:28 - we're adding our optional chaining for
148:30 - this state to begin with where the only
148:32 - other thing that I'm going to do is on
148:33 - this loader icon I also want to add my
148:35 - Tailwind class to actually animate it so
148:38 - I'm going to add animate spin now as one
148:41 - more thing I don't want somebody to be
148:43 - able to click on this button twice if
148:45 - it's in that loading State now depending
148:47 - on who you ask there's a lot of strong
148:49 - opinions about disa disabling button UI
148:52 - but I don't want somebody to be able to
148:54 - click this if it's already deleting and
148:56 - Trigger that second deletion request if
148:59 - it's going to just error so what I want
149:01 - to happen is if it is deleting I don't
149:03 - want anything to happen if they click it
149:05 - so we kind of have one of two options
149:06 - where we can either just disable it on
149:08 - the button itself or we can use the
149:10 - event handler and use JavaScript to
149:12 - disable it so let's do that one I'm
149:14 - going to copy that hand head up to
149:17 - handle UND delete and if our state is in
149:20 - that deleting State let's just simply
149:22 - return now going back to the UI let's
149:24 - pick another one delete how about let's
149:25 - delete that really fuzzy one that we had
149:28 - from before when we were testing the AI
149:30 - I'm going to click delete let's click
149:32 - the delete button we can see that it's
149:33 - spinning and loading and we were pushed
149:35 - back to the homepage and let's refresh
149:37 - and we can now see it's gone so now
149:39 - let's take a quick moment to handle that
149:40 - invalidation issue that we were seeing
149:42 - where when we go back to the homepage we
149:44 - want to make sure that that refreshes
149:45 - the query inside of the client as a
149:47 - quick refresher when we were originally
149:49 - creating our used resources hook for
149:51 - that media library homepage we use the
149:53 - used query client in order to invalidate
149:56 - after we added a resource so we can see
149:58 - we imported use Query client we grabbed
150:01 - the query client itself and then we both
150:03 - set data and invalidated we're here
150:05 - we're only going to need to invalidate
150:07 - the queries but we're going to do that
150:08 - in the media viewer so let's give that a
150:10 - try where first I'm going to import the
150:13 - use Query client at the top of my media
150:15 - viewer file where I only need the use
150:18 - Query client so I'm going to only import
150:19 - that I'm going to go ahead and then grab
150:21 - that query client statement and go to
150:24 - the top of my media viewer paste that in
150:26 - where then I can grab that invalidation
150:29 - which let's just take a moment to
150:31 - refresh on that where it's running
150:33 - invalidate queries I'm passing in a
150:35 - query key which equates to my resources
150:39 - as well as my library tag so that it's
150:41 - going to revalidate that request and
150:43 - force a new one so let's go ahead and
150:46 - copy that one as well I'm going to head
150:48 - over to Media viewer and then handle on
150:50 - delete at the very end of that right
150:53 - before we push to the homepage I'm going
150:55 - to go ahead and invalidate those queries
150:57 - now let's take a quick second to test
150:59 - that out we're here let's delete the
151:00 - Northern Lights to begin with where at
151:02 - the top right I'm going to click delete
151:04 - and then I'm going to confirm the
151:05 - deletion where we can see I was pushed
151:07 - back to the homepage after deletion
151:09 - which is successful but we also
151:10 - invalidated that query and while we saw
151:12 - it for a split second in the process of
151:15 - it revalidating we did see that it was
151:17 - then removed after it invalidated and
151:19 - refreshed those results now
151:21 - realistically speaking for our handle on
151:23 - Save copy and handle on Save we might or
151:26 - might not have to do it for those if you
151:28 - think about it if we're saving a copy
151:30 - and then going back to the homepage if
151:32 - we didn't invalidate those queries we
151:34 - might not see that new copy which we did
151:36 - actually see before so what we can do is
151:38 - we can invalidate those queries both on
151:40 - Save and save copy so the first thing
151:42 - I'm going to do is I'm going to actually
151:44 - create a new function just for the
151:46 - invalidation of the queries so let's say
151:48 - function invalidate
151:51 - queries I'm going to pop this
151:56 - inside we then I'm going to run it right
151:59 - before that router push again but then
152:01 - I'm also going to run it right before I
152:04 - push to resources or that placement
152:06 - probably doesn't matter for the handle
152:07 - save on copy and then for the handle on
152:09 - Save I'm going to do something similar
152:11 - so we can go ahead and just test that
152:13 - out so I'll go with my elephant friends
152:15 - I'm going to go ahead and edit it create
152:17 - a square out of it let's create a cop
152:23 - we can see after it was finished it
152:25 - pushed me to that new page and now let's
152:28 - head back to the homepage and we can see
152:30 - those queries were invalidated and I now
152:32 - see my elephant friend again but in a
152:34 - square format now before we wrap up with
152:36 - our individual viewer page let's do one
152:38 - more thing where I'm going to head back
152:40 - over to my elephant where on this info
152:42 - panel we currently only show the public
152:45 - ID and I want to show a little bit more
152:46 - information than that cuz we have things
152:48 - like our width our height maybe we can
152:50 - even show the tags but basically let's
152:52 - fill this out with some information that
152:53 - we have from the asset now the only
152:55 - information that we currently made
152:56 - available on the type is our height our
152:58 - public ID our secure URL as well as the
153:01 - width and there's a lot more information
153:02 - if we remember from inspecting the
153:03 - resources so just to kind of see what's
153:05 - inside before we tackle this let's
153:07 - console log out our resource where once
153:10 - we refresh the page we can see all the
153:12 - data inside and let's do things like our
153:14 - bytes the created ad maybe we want to
153:16 - add the original format we can see this
153:19 - one's a JPEG but back inside of our
153:21 - media viewer let's find where we're
153:23 - setting that public ID I'm going to get
153:24 - rid of the sidebar here so I'm going to
153:26 - look for public ID and I'm going to hit
153:27 - enter a few times until I actually find
153:30 - it and here we see our info panel where
153:33 - I'm actually setting that public ID
153:35 - within the text so let's add a few more
153:37 - how about we want to do we going to
153:40 - break down this so you can see we have
153:42 - our date created how about we also do
153:46 - our width we do
153:51 - a height let's do
153:54 - the
153:58 - format the
154:00 - size and finally let's do the tags and
154:04 - some of this again we already have how
154:06 - about for our width and height let's add
154:08 - our width our
154:11 - Heights I don't think we had the date
154:13 - created at yet but we do have the tags
154:16 - so we can do tags and join that by a
154:19 - comma
154:20 - actually that's tags with an S and
154:22 - actually we don't already have that so
154:23 - anyways we can go back to our type now
154:25 - and start to add the things that we
154:26 - don't have yet so starting with tags we
154:28 - have our tags which is going to be an
154:30 - array of strings we have
154:33 - our format which is going to be a string
154:37 - our size is actually going to be
154:39 - available at bytes not size so we want
154:41 - to find bytes and that's going to be
154:43 - number as well and then we have our
154:45 - created at date which is going to be a
154:46 - string so let's add our created at which
154:50 - will be of course a string but now let's
154:52 - head back to the media viewer and start
154:53 - to fill these things in we have our size
154:55 - which is bytes we have our format and
154:58 - then I think it's just the last one of
155:00 - our date created so created at but now
155:04 - let's wrap that with date new or rather
155:07 - new date which then will add to local
155:10 - and I'll hide myself local string now if
155:13 - we head to the browser if you tried to
155:15 - use tags already we'll notice that we
155:17 - don't actually have them now by default
155:19 - the tag don't come back in the response
155:21 - from the resource so we have to actually
155:23 - explicitly request that so back inside
155:25 - of the project I'm going to look under
155:26 - my pages for the resources and the asset
155:30 - ID we're here I'm going to pass in a
155:32 - second argument into my resources by
155:35 - assets asset IDs which I'm going to say
155:38 - tags true we can see once it refreshes
155:41 - everything is working as expected let's
155:42 - check that out that in info panel now
155:44 - where we can see all of our different
155:46 - information we have the date created
155:47 - which looks nice with that local string
155:49 - we have our width our height we have
155:51 - jpeg format and our size as well as
155:53 - media now as far as these numbers go
155:55 - these are a little bit harder to read we
155:57 - can add commas here we can probably
155:59 - format that size a little bit
156:00 - differently and if you're following
156:01 - along with the project starter I
156:03 - included a few functions inside of the
156:05 - utils file the lib utils file which
156:08 - includes some functions just to format
156:09 - this for us where I use chat gbt to
156:11 - easily generate this you could use
156:13 - whatever code generation tool or just
156:14 - write them yourselves if you're up for
156:16 - the challenge but here I have ADD commas
156:18 - simply which what it sounds like and
156:20 - then we have our format bytes which
156:23 - it'll dynamically format it to bytes
156:25 - kilobytes gigabytes Etc based off of how
156:28 - many bytes there actually are so at the
156:30 - top of my media viewer I'm going to
156:33 - import format bytes and add commas from
156:38 - at lib utils and then I'm going to head
156:41 - down to where I'm actually doing those
156:43 - things format
156:46 - bytes and then for my numbers
156:48 - specifically my and height I'm going to
156:50 - add add commas to wrap
156:54 - that I can do the same thing for my
156:57 - height and now we can see that that's
156:59 - formatted a lot easier to read where we
157:01 - have the comma for the width and the
157:03 - height and then we can see that that's
157:05 - 1.9 megabytes in size now heading back
157:07 - to the gallery page it seems pretty
157:09 - Snappy and fast because well my
157:10 - internet's pretty fast and it's loading
157:12 - pretty quickly from the clown server but
157:14 - what if maybe my internet's not slow or
157:16 - maybe what if the cloud request or
157:18 - another services request was taking a
157:20 - long time to load the way that nextjs
157:22 - works which inherits from react is it's
157:24 - able to stream in some of these server
157:26 - components into the UI where if I wanted
157:29 - to load this entire page I don't need to
157:32 - have it completely blocked to have every
157:34 - request fulfilled before it actually
157:36 - loads on the page where specifically
157:38 - because I'm loading the contents of this
157:40 - Gallery separately in its own server
157:42 - component if that takes a long time to
157:44 - load I can still run into the rest of
157:46 - the UI before that actually finishes is
157:49 - so that once it does finish it can load
157:52 - that itself so we can take advantage of
157:54 - some of the nextjs features specifically
157:56 - the loading template in order to make
157:58 - that work so back inside of the code I
158:00 - pulled up the homepage that's currently
158:01 - loading that media gallery and as we can
158:03 - see inside we're loading those resources
158:05 - which get passed along but we're doing
158:07 - that on This Server now this is the
158:09 - layout that's currently loading any of
158:11 - the page contents where we have these
158:13 - sidebar links that are separate from the
158:15 - actual children that get rendered for
158:17 - the page itself but what we can do is we
158:19 - can create a new file that's simply
158:21 - called loading. TSX and inside I'm going
158:24 - to export a default function called
158:27 - loading and inside just to test this out
158:30 - for a second let's just say loading and
158:32 - if we try reloading the page we should
158:33 - see for a split second that little
158:35 - loading in the top left now like I
158:37 - mentioned before this is particularly
158:39 - impactful if you have a request that's
158:41 - slow to load so while this Cloud API
158:43 - request is loading pretty fast we can
158:45 - kind of artificially see what this would
158:46 - look like so what I'm going to do is I'm
158:48 - going to say await new promise where I'm
158:52 - going to pass in a set timeout where
158:57 - inside I'm going to Simply resolve
158:59 - undefined so it just finishes that
159:01 - function but I'm going to set that
159:03 - timeout for 5 seconds so what's going to
159:06 - happen is anytime this server component
159:08 - or page tries to load it's going to get
159:11 - those resources and then it's basically
159:13 - just going to wait for 5 seconds until
159:15 - it resolves so now when we try to reload
159:17 - the page we see that we have the loading
159:19 - indicator and it's going to sit there
159:21 - for 5 seconds until it resolves but in
159:24 - the meantime we were able to see that
159:26 - the sidebar in the navigation were all
159:27 - able to completely render and be on the
159:30 - page and even be interactive before the
159:32 - actual content's loaded now rather than
159:34 - just that little simple loading
159:35 - indicator I want to just put a little
159:37 - Cloud n logo inside for mine so I'm
159:39 - going to go ahead and inside a figma I'm
159:41 - going to copy this as SVG and because I
159:43 - can't put SVG code directly in react
159:46 - because react is jsx I am using this
159:48 - handy tool SVG to jsx where I'm going to
159:51 - paste that in it's going to allow me to
159:53 - easily copy the SVG that's jsx ready so
159:56 - now inside of my loading function I'm
159:58 - going to return that SVG and if I try to
160:01 - reload the page we can see that we get
160:03 - that logo but let's make that a little
160:04 - nicer looking to start I'm going to wrap
160:07 - that with a div going to make sure I
160:10 - indent that and then on the div I'm
160:13 - going to add class name I'm going to
160:15 - make it a width full height full I'm
160:18 - going to use flex box box I'm going to
160:20 - make the items Center and justify Center
160:24 - so if I reload I think that's making
160:26 - good progress and I just realized I
160:28 - misspelled justify so that's why it
160:30 - wasn't in the center to begin with but
160:32 - then on the SVG itself I'm going to add
160:34 - class name text
160:37 - zinc 200 and how about for dark mode
160:40 - dark uh text zinc 800 and then I'm going
160:44 - to add
160:46 - animate pulse to give it a little
160:48 - animation now the last thing that I need
160:50 - to do is actually change how the fill is
160:52 - getting applied inside of the different
160:54 - paths and as we can see this fill is
160:56 - currently set to Black so I'm going to
160:58 - set that to current color and when I
161:01 - reload the page we can see that we get
161:02 - that lighter logo and it has that nice
161:04 - little pulse indicating that it's
161:06 - loading now I'm going to go ahead and
161:08 - actually remove that promise cuz we
161:10 - don't need an artificial delay in that
161:12 - we can see that if we refresh again we
161:13 - do get it for a split second and it's
161:14 - really only going to show if we actually
161:16 - need it there but the cool thing is we
161:17 - can do that exact same thing for the
161:19 - media viewer as well so what I'm going
161:21 - to do is under resources where we have
161:23 - our Dynamic route at that top level next
161:26 - to the layout I'm going to Simply drag
161:28 - that in and copy it in where now we have
161:30 - that same file but the difference is I I
161:32 - can probably just get rid of this text
161:34 - zinc 200 because it's always going to
161:36 - have that dark background so that's
161:37 - really the biggest difference there and
161:39 - now if I try to navigate to one of the
161:41 - images we were able to see for a split
161:43 - second that logo in the background if I
161:45 - refresh we can see the same thing now as
161:47 - far as loading animations go we never
161:49 - never added that loading animation for
161:50 - the CL image components that we use on
161:52 - the gallery page so as you remember we
161:54 - created a wrapper component around that
161:56 - so that we were able to just add that
161:58 - SVG loading animation uh directly inside
162:01 - that wrapper but still render the CL
162:03 - image component pretty much as is so
162:05 - what I'm going to do is I'm going to
162:05 - Simply get rid of CLD image and then I'm
162:08 - going to import the CL image component
162:10 - wrapper that we created and if I reload
162:12 - the page we can see that we get a split
162:14 - second of that if I open up my network
162:16 - tab let's add the fast 3 G and I
162:20 - refreshed the page we see that we do get
162:23 - that loading animation as it comes in
162:25 - now it's dark and it's probably better
162:27 - if we did like a light animation for
162:29 - this one but I'm going to consider it
162:30 - out of scope for this one so maybe
162:32 - that's something you can do on your own
162:33 - where you can try to create a variable
162:34 - loading animation between whether it's
162:36 - light mode or dark mode based off of
162:38 - either the page that it's on or even if
162:40 - the browser itself is in light versus
162:42 - dark mode but now we get to probably my
162:44 - favorite part of this whole project
162:45 - we're going to add some Creations where
162:47 - we're going to have the ability to
162:49 - multiple items or maybe just a single
162:51 - item and we have this little menu up
162:53 - here where if we click it we're going to
162:54 - have a couple different options for a
162:56 - creation that we are able to create one
162:58 - being a collage for instance where we'll
163:01 - automatically on the Fly create a
163:03 - collage based on these two images now
163:05 - looking at the code for a second let's
163:06 - see how we're going to walk through this
163:07 - where I have a little bit of UI already
163:09 - scaffold for this particularly a little
163:11 - dialogue that's going to allow us to
163:13 - preview the creation before we allow
163:15 - somebody to actually save it so if we
163:17 - scroll down in the starter or if you
163:18 - want to create your own dialogue I
163:19 - currently have this dialogue where if it
163:22 - has a creation it's going to show we
163:24 - don't currently have that capability yet
163:26 - but if we want to be able to show the
163:28 - creation we're going to show it right
163:30 - inside of this content we're going to
163:31 - say do you want to save your creation
163:33 - and then of course we're going to give a
163:34 - button to save that so let's Dive Right
163:36 - In I'm going to search for the word
163:37 - option because one of the menu items had
163:39 - the word option in it and we can see
163:41 - that we have this drop- down menu where
163:43 - I have the first item of option now of
163:46 - course we want to make that a collage so
163:47 - the first thing I'm going to do is
163:48 - change that to the word collage but then
163:50 - we're going to use this drop down menu
163:52 - item in order to trigger that so we're
163:54 - going to set up an onclick Handler on
163:57 - this where I'm going to name it handle
163:59 - on create collage now we're going to
164:02 - want to create this function so I'm
164:04 - going to copy that I'm going to head up
164:05 - to the top of the page and let's add it
164:08 - under let's just add it at the top of
164:10 - this list here handle on create collage
164:12 - I'm going to then create my little note
164:14 - just to make it a little bit more easy
164:16 - to see but then inside of here this is
164:18 - where we're going to start to manage the
164:20 - creation state to begin with so that we
164:22 - can put it in that creation flow now if
164:24 - I look at creation itself here it's
164:26 - currently not expecting any kind of
164:28 - shape that we're going to store that
164:30 - information in so the first thing I'm
164:31 - going to do is create a type just so
164:33 - that we have an idea of what that's
164:34 - going to look like so I'm going to
164:35 - create an interface of creation and some
164:38 - of the things that we're going to want
164:39 - to store is first of all the state so
164:41 - what state is that dialogue in so I'm
164:43 - going to say State and that's going to
164:44 - be a string I'm going to want to store
164:46 - the URL so that's going to be the UR URL
164:49 - of the creation so I'm going to say URL
164:51 - equals string and then we're going to
164:53 - have different types of Creations the
164:55 - first one's going to be a collage of
164:56 - course but if we want to do something
164:58 - different based off of the different
164:59 - types we want to have a way to do that
165:01 - so I'm going to say type equals string
165:04 - but now we can take that interface and
165:05 - I'm going to set it on my state instance
165:08 - and then we can actually set our first
165:10 - state where inside of handle on create
165:12 - collage let's add that where we have
165:15 - those three different things we have our
165:16 - state we have our URL and we have our
165:18 - type and let's start to think about what
165:20 - kind of state we want to have now if I'm
165:22 - immediately creating a URL I can just
165:25 - add something like created so let's add
165:27 - created where maybe in the future we
165:29 - have some Creations that require an API
165:31 - endpoint which we will so maybe for that
165:33 - one it's going to be creating until that
165:35 - finishes maybe for a loading state but
165:37 - rather let's get back to the URL where
165:39 - we're going to have something in there
165:41 - now we don't have that URL yet we'll get
165:42 - to that so I'm just going to add a
165:44 - random string and then finally for the
165:46 - type this one's going to be a collage
165:48 - now heading back to the app just for a
165:49 - second I'm going to go ahead and click
165:50 - that plus I'm going to click collage and
165:52 - we can see that we already have that
165:53 - dialogue because now creation is a truly
165:56 - value because we set that state so what
165:58 - we're going to do is we're going to
165:59 - first of all we're going to create a URL
166:01 - for the collage and then we're going to
166:03 - store it so that we can show it using
166:04 - that CLD image component right inside of
166:07 - this area now we already have the CL
166:09 - image component imported but if you
166:10 - remember we used that get clld image URL
166:14 - function in order to easily generate it
166:16 - where it wasn't in the context of
166:17 - actually displaying the image so we're
166:18 - going to use that and I'm going to say
166:20 - import get clld image URL from next
166:26 - cloudinary spell that right and then I'm
166:28 - going to take that I'm going to scroll
166:30 - down to where I'm actually creating that
166:31 - collage and let's say constant URL is
166:34 - equal to get clld image URL I'm going to
166:36 - say source is equal to and now we need
166:39 - to find out what images we're actually
166:41 - trying to use to create a creation right
166:44 - so we're going to try to inspect the
166:46 - ones that are selected from within the U
166:49 - so quickly what do I mean by that so we
166:51 - have these little check boxes here so
166:52 - we're storing those selected values in
166:54 - the state that's already preconfigured
166:56 - in the starter if you're following along
166:57 - but ultimately we need some way to be
166:59 - able to detect that these were the
167:01 - selected images so if we look at the top
167:03 - of media Gallery I have this selected
167:04 - and set selected and it's just an array
167:06 - of strings and if we just take a quick
167:08 - look as to what I'm doing I have a
167:10 - checkbox for each and every one of those
167:12 - images we can see that here where if
167:14 - somebody actually tries to select that
167:15 - checkbox it's going to trigger that
167:17 - function and it's going to Simply add
167:19 - the public ID of that image to that list
167:22 - so I'm going to Cal this out for a
167:23 - second and let's just console log out
167:26 - selected just so that we can have an
167:28 - idea of what we're actually working with
167:30 - so if I go ahead and select collage we
167:32 - can see make sure that this is big
167:34 - enough that we have that selected value
167:36 - which are those public IDs so to get
167:38 - started I'm going to just simply add the
167:40 - first one so we can start to construct
167:41 - that UI so I'm going to say the source
167:43 - is going to be selected zero which is
167:45 - going to be the first item in that array
167:47 - we don't NE necessarily need to even set
167:49 - a URL CU because Cloud doesn't
167:51 - necessarily require a width and a height
167:53 - because it already knows that when it's
167:55 - trying to deliver that image so we
167:56 - really only need to set a width and a
167:58 - height if we're trying to change those
167:59 - values so what I'm going to do now is
168:01 - I'm going to Simply set that URL and now
168:03 - we have that creation state that we can
168:05 - start to actually display it inside of
168:08 - the little dialogue UI now before we
168:10 - actually do that though I have one more
168:12 - thing and we need to set a version on
168:14 - this URL now that's going to accomplish
168:15 - two things one we'll get to in a second
168:17 - when we're showing how to do this in the
168:19 - UI but the other thing is when we're
168:20 - using the creation we probably want to
168:23 - generate a new creation every single
168:25 - time that we do this now if we don't say
168:27 - perhaps somebody selects the same two
168:29 - images we go and make changes to that
168:31 - image and then save it and then come
168:33 - back and try to create it again it's
168:35 - probably going to use that cached
168:36 - version that has so it's not going to
168:37 - use the updated version so we want to
168:39 - make sure that we're always creating a
168:40 - brand new creation when the user
168:42 - actually prompts that so what I'm going
168:44 - to do is I'm going to set version and
168:46 - let's just say date. now so going down
168:49 - to the dialogue UI the first thing I'm
168:50 - going to do is say
168:52 - creation optional chain URL so only if
168:55 - that exists I'm going to show a div that
168:58 - includes my clld image component now as
169:00 - far as the CL image component goes it
169:02 - does require a width and a height but
169:04 - for all of our Creations we are going to
169:06 - contain it to a specific with and height
169:08 - and specifically we're going to do 1,200
169:11 - and we're going to do by 1200 and the
169:13 - reason we're going to do that is if you
169:14 - think about a collage it's not really
169:16 - going to have a dynamic value it's going
169:18 - to always be a Square where we're going
169:19 - to place our different images from
169:20 - within the square now of course you can
169:22 - make that different if you'd like you
169:23 - can make all your collages wide or tall
169:25 - or maybe even they have the option to
169:27 - change how that works but for our
169:29 - purposes I'm going to add a static 1200
169:31 - X 1200 for each and every one of the
169:32 - Creations that we're going to use but
169:34 - now I can set the source as creation.
169:37 - URL and just as a quick note typically
169:40 - and to this point we've set a public ID
169:42 - for each and every one of our sources of
169:44 - clld image now technically the CLD image
169:46 - can take in a cloud n URL however the
169:50 - URL must have a version number
169:52 - associated with that and why does it
169:54 - need a version well the cloud n URLs are
169:56 - pretty tough to actually parse and
169:59 - without the version number it's pretty
170:01 - practically impossible to do so because
170:03 - there needs to be a separation between
170:05 - the the Transformations and the end
170:08 - where we can grab that ID and if you
170:10 - don't have that there's potential that
170:12 - maybe somebody's using a name that
170:13 - collides with one of the Transformations
170:15 - but we're getting into the weeds what
170:17 - I'm trying to say is the version number
170:19 - is required for the URL if we want to
170:21 - use that there so then I'm going to say
170:23 - alt equals creation and then finally we
170:26 - can use a property called preserve
170:29 - Transformations and what that's going to
170:31 - do is if we pass in a URL because I'm
170:34 - parsing that URL it's going to allow me
170:36 - to take any Transformations that were
170:37 - inside that URL and then automatically
170:39 - apply them to the image that we're
170:41 - actually displaying so now we have that
170:44 - image and let's see if that works but
170:46 - now going back to the UI for a second
170:47 - let's actually test this out where I'm
170:48 - going to select my elephant and I'm
170:50 - going to click create uh create collage
170:53 - where we can see that we're immediately
170:54 - getting that loading UI and we see that
170:56 - it is showing larger than that set 1200
170:58 - by 1200 why is that so if you remember
171:01 - from earlier when we were creating our
171:03 - little thumbnails for our filters we had
171:05 - to also set a crop of fill now that's
171:07 - important because otherwise cloud is not
171:09 - going to just assume that we want it to
171:11 - be cropped to that size where that width
171:13 - and height will just be used inside of
171:15 - the actual Dom for the image element but
171:17 - it's not going to just simply crop it so
171:19 - we can set a crop of fill but because
171:22 - we're now going to add Transformations
171:24 - again remember from earlier we want to
171:26 - crop the source of the image we don't
171:28 - want to crop the end of the image so
171:30 - what I'm going to do is I'm going to say
171:32 - crop and we're going to pass it an
171:34 - object where I'm going to say type of
171:36 - fill and then I'm going to say source is
171:38 - true but now going back to the UI if I
171:40 - try that again we can see that we get a
171:42 - nice Square which actually looks pretty
171:44 - similar to one of the ones we already
171:45 - had in there but that's a new creation
171:46 - based off of that other resource that
171:49 - was initially taller but now let's take
171:51 - those selected images and try to create
171:53 - a collage out of them where let's think
171:54 - for a second how this would actually
171:56 - work so we have our base image and we
171:58 - want to basically split it in half and
172:00 - we can provide multiple templates for
172:01 - this but we basically want to split it
172:03 - in half so that we have one image on one
172:05 - side and one image on the other now
172:07 - Cloud Nary has the ability to place
172:09 - layers on images and what that means is
172:11 - we can either place text layers or image
172:13 - L image layers so later you can honestly
172:16 - add a feature to add text to your image
172:18 - but we're not going to get to that here
172:19 - what we want to do is we want to place
172:21 - these layers so that we have two layers
172:23 - that represent those two images that are
172:25 - going to be our Collage if we head over
172:27 - to the next clowning documentation we
172:29 - can see overlaying images under the
172:31 - guide section where we can see how to do
172:33 - just that I'm going to select get SE
172:35 - image URL but we can see we're going to
172:36 - use the overlays property where we're
172:38 - going to pass in an array of overlays
172:41 - that's going to contain our images that
172:43 - we want to Overlay the position of it
172:45 - and any effects that we might want to
172:46 - add to it and particular maybe like cro
172:48 - so let's start with our images where I'm
172:50 - going to now add overlays and I'm going
172:53 - to create an array where let's set up
172:55 - that first object and we can use the
172:56 - first selected item for that first
172:59 - overlay where we're going to set a
173:00 - public ID of selected zero and then
173:04 - we're going to add a position where the
173:07 - position is going to work where we want
173:08 - to just set a simple gravity and what I
173:10 - mean by gravity is the focal point if we
173:12 - remember for from earlier where we want
173:14 - to say we want to set that to West so we
173:16 - were you know depending on which way my
173:18 - camera is we want to set it to either
173:20 - the left side or the right side the west
173:22 - side or the east side which is going to
173:24 - tell us exactly where we want to Anchor
173:25 - it so that when we have just half of an
173:27 - image it can be either on the left or
173:29 - the right so I'm going to add an object
173:31 - for my position and I'm going to set
173:33 - gravity
173:35 - of West but then we want to resize the
173:38 - image so I'm going to add an effects
173:40 - property which is basically just going
173:41 - to allow us to pass an array of
173:43 - different effects that we want to apply
173:44 - where I'm going to pass in an array of
173:46 - objects and that first object is going
173:47 - to have a width of 600 which is half of
173:50 - the creation size we're going to add our
173:52 - height of 12200 which is the full height
173:54 - of the creation and then we're going to
173:56 - add a crop of fill because remember
173:58 - clouding is not going to just assume
174:00 - that we want to crop it so it's not
174:01 - going to use the right scale or cropping
174:04 - mode if we don't pass that and then
174:06 - finally we're going to add a gravity of
174:08 - Auto where that's going to mean that
174:10 - depending on the size of the image in
174:11 - the crop it's aut automatically going to
174:14 - detect the most ideal location to crop
174:16 - it to so if you have a wide image with
174:19 - an elephant on the left side it's going
174:21 - to automatically crop that frame to
174:23 - where that elephant actually is now
174:25 - let's give this a try just to see where
174:27 - we're at so let's hit add new and we
174:29 - have our collage and once we actually
174:31 - let it load for a
174:33 - second we see that it's not quite right
174:36 - so if we look at this image we see that
174:37 - it's much smaller and what's actually
174:39 - happening here well we're cropping the
174:41 - image that we're displaying but we never
174:44 - cropped the source image of the image
174:46 - itself but on top of that the image
174:48 - below is showing and maybe we don't want
174:50 - that to show maybe we want to just make
174:52 - that white so we have two problems here
174:54 - first we need to crop the image and then
174:56 - we need to remove the background image
174:58 - basically so we're going to say we want
175:00 - to set the width of 1200 the height of
175:03 - 1200 which will match the creation size
175:06 - and then we want to say we want to make
175:07 - a crop of fill for that and let's just
175:10 - double check that that's working so far
175:12 - and try again on my collage and remember
175:14 - we set date now so it's all always going
175:16 - to generate a new image but just to try
175:18 - to illustrate a point that I was trying
175:19 - to make earlier is we still see that
175:20 - it's not quite the right shape and size
175:23 - now again because we're not specifying
175:24 - that we want to crop the source of the
175:26 - image we're we're cropping after
175:28 - everything occurs and then when we're
175:30 - using that with clld image it kind of
175:31 - gets mixed up because now CLD image
175:33 - wants to pass in the responsive sizing
175:35 - which is kind of the point of the tail
175:37 - end of the resizing so we're going to
175:39 - set that as an object and we're going to
175:41 - say type of fill and we're going to say
175:43 - source of true but now when we open that
175:46 - one up we can see that now that elephant
175:48 - is taking up half of the actual size so
175:50 - now let's remove the background now this
175:52 - part's a little bit trickier because you
175:54 - always require a source in order to
175:56 - create a URL because you ultimately need
175:58 - an image in order to build all this off
176:00 - of and while you can maybe add like a
176:02 - one pixel by one pixel white image and
176:04 - then overlay everything on top for our
176:07 - purpose I'm just going to keep this
176:08 - current image that's selected as the
176:11 - image that we're going to be using but
176:12 - what we can do is we can add an
176:14 - additional effect and basically turn
176:16 - that image into a white image so I'm
176:19 - going to go ahead and create a new
176:21 - property of effects where on that I'm
176:24 - going to add my new object where I'm
176:26 - going to use the colorize property and
176:28 - I'm going to say I want to colorize it
176:30 - 100 and the syntax here is a little
176:32 - funky but what we're going to need to do
176:34 - is 100 and then we're going to say we
176:36 - want it as a color of white so let's see
176:39 - that syntax and you can find an example
176:40 - like that inside of the documentation
176:42 - but we want to colorize it we want to
176:44 - change the color of it we want it to the
176:46 - full effect and then we're going to set
176:48 - the color of white and then just to be
176:49 - safe I'm going to add a background of
176:51 - white as well so let's test this
176:54 - out and we can see once it
176:57 - loads we have our white background and
176:59 - we have our elephant only on one side of
177:01 - the image so now let's add that second
177:03 - image on the other side so we're going
177:05 - to do the same exact thing that we did
177:06 - for the other overlay I'm going to
177:09 - duplicate that but this time we're going
177:11 - to use the second image selected now
177:13 - we're going to have to add some logic
177:14 - here to make sure we determine how many
177:16 - images are selected but we'll get to
177:17 - that in a second so we'll just assume
177:19 - that we have two selected for just
177:21 - making sure this works but the only
177:22 - other thing that I need to do is
177:24 - remember the gravity is going to set
177:25 - which sides of the image that needs to
177:27 - be that it needs to be anchored to so
177:29 - for this one we're going to make it East
177:31 - so now let's how about we select the
177:33 - elephant and we select this uh picture
177:35 - from Athens I'm going to click create
177:40 - collage and once it loads we can see
177:43 - that we have our beautiful collage where
177:44 - we have both of our images where again
177:46 - the gravity is automatically detected
177:48 - where it is in the image and based on
177:49 - the size of the image it doesn't
177:51 - necessarily mean that it's going to be a
177:53 - perfect inner crop now there's something
177:55 - coming out soon that's going to help you
177:56 - with that kind of thing uh crop of Auto
177:59 - but we can see that it was nicely
178:00 - cropped and it's going to give us that
178:02 - collage effect now as I pointed out we
178:05 - only want to be able to create a collage
178:07 - if we have two images so the way that
178:09 - we're going to handle this is we're
178:10 - going to wrap all of our menu items
178:12 - based off of those constraints that we
178:15 - actually have so for this particular one
178:17 - we only want to show the menu item for
178:18 - Collage if we actually have enough items
178:22 - to show that so I'm going to say
178:24 - selected length is greater than or
178:28 - rather if yeah greater than one because
178:31 - we can set different templates up for
178:33 - different uh collage groups and then I'm
178:35 - going to say
178:36 - and then we'll show our menu item so now
178:41 - in the UI if I only have one selected
178:43 - it's not going to show anything but as
178:45 - soon as I select another one we now see
178:47 - collage now as I mentioned before I want
178:49 - to be able to create collages based off
178:51 - of multiple multiple images not just two
178:53 - images so now we can try to create the
178:55 - concept of templates where we're going
178:57 - to create templates based off of how
178:59 - many images we have so the first thing
179:01 - I'm going to do is I'm going to actually
179:02 - abstract this image into a lib file so
179:05 - inside of my sidebar here let's find
179:07 - where we have our lib already going to
179:09 - collapse down the app where we have our
179:12 - lib I'm going to create a new file not a
179:14 - folder a new file called creations. TS
179:17 - and you can really name this whatever
179:18 - you want but I'm going to create all the
179:20 - Creations logic inside this file but
179:22 - let's export a function called get
179:25 - collage and inside collage it's going to
179:28 - take a list of public IDs which will be
179:30 - an array of strings or string now
179:33 - heading back over to the media gallery
179:35 - for a second I'm going to lift up all
179:37 - this code that we're using to create our
179:40 - actual URL and I'm going to Simply paste
179:42 - it into this new file now of course we
179:45 - need to import our next Cloud Nary
179:46 - Library so I'm going to use my handy
179:47 - command and period and I'm going to add
179:49 - that import for us but we can see that
179:51 - we're also getting a type error on
179:53 - selected and that's because we're not
179:54 - using that as the variable name so I'm
179:56 - going to pass in and replace the
179:59 - selected item or the selected name with
180:01 - public IDs but now we have this URL and
180:03 - we can simply return the URL to start
180:07 - and then let's head back over to the
180:08 - media gallery and just wire this up just
180:09 - to make sure that it's working properly
180:11 - so at the top of the file first I can
180:13 - get rid of get SD image URL I'm going to
180:15 - then import get collage from at lib
180:21 - creations and now let's use that so I'm
180:23 - going to look for my handle on create
180:25 - collage and how about let's just pass
180:29 - this in as get collage where we're going
180:31 - to pass in our selected now you know me
180:35 - I like to make sure that this is working
180:36 - so I'm going to hit the plus sign hit
180:38 - collage and we still get our collage so
180:41 - now let's actually create some of these
180:42 - templates where I'm going to create a
180:43 - constant of collage templates I'm going
180:46 - to set that equal to an empty object
180:47 - where what we'll do is we'll use a key
180:49 - of how many different items that we have
180:52 - inside of that array so we can
180:53 - dynamically pull that template based off
180:55 - of how many public IDs we have so let's
180:57 - start with the first one that we already
180:58 - have of two and I'm going to create a
181:00 - function out of this where I'm going to
181:02 - pass those public IDs as that actual
181:05 - value now again we want to be able to
181:08 - use the array of strings as the type for
181:11 - that but then I can determine what all
181:13 - the different properties that I want to
181:15 - store in this template now kind of
181:16 - looking at this for a second we're
181:18 - always going to use the first item as
181:20 - the source it's always going to be 1200
181:22 - by 1200 we always want to make sure that
181:23 - we're cropping at the source of the
181:25 - image we always want to set a version
181:27 - but we could probably use these overlays
181:29 - as the basis of our templates now again
181:31 - we're probably going to want to keep the
181:33 - effects for each and everyone because we
181:34 - want to have the underlaying images
181:36 - white so let's now just use only these
181:38 - overlays as the basis of what we want to
181:40 - do so I'm going to cut out these
181:42 - overlays and I'm going to return an
181:45 - object that includes those overlays but
181:48 - now what I want to do is I want to try
181:50 - to dynamically pull out the template
181:51 - that I'm going to use for that image
181:53 - creation so I'm going to copy collage
181:55 - templates and we're going to say
181:57 - constant template is equal to collage
181:59 - templates and let's use
182:02 - Public public
182:04 - .length as the way that we're going to
182:07 - access that now we can see that
182:08 - typescript doesn't like that and why
182:10 - doesn't it like it well how about let's
182:11 - go back up to collage templates and we
182:13 - never set a type for the type of data
182:15 - that this is going to expect so let's
182:17 - say this is going to be a record where
182:19 - it's going to be a number not a string
182:21 - like you might usually expect and then
182:23 - we're going to have a function where I
182:26 - believe that's a capital f but now let's
182:28 - see if that fixed our error it did and
182:31 - we can first of all let's say if we
182:33 - don't have a template do we throw an
182:35 - error do we just return how about let's
182:36 - just for now return so that we're not
182:38 - interrupting anything but now we can
182:40 - actually use this template to create our
182:43 - Dynamic properties so at the very end of
182:46 - this I'm going to to spread out where we
182:49 - have our template and remember that's
182:50 - going to be a function where I'm going
182:52 - to pass in my public IDs now one thing I
182:55 - just thought of is we see that we get a
182:56 - type error over on media Gallery because
182:58 - the URL could potentially be undefined
183:01 - now because we do want to make sure that
183:03 - we always have the right number of
183:04 - images maybe it makes sense to use throw
183:06 - air anyways it shouldn't ever get to
183:07 - that place because that means we're
183:09 - displaying it in the UI where we
183:11 - shouldn't be so let's just try to use
183:12 - throw new
183:14 - error template not defined and we can
183:18 - see that we no longer get that type
183:19 - error inside of the media Gallery itself
183:21 - so as expected it should work and it
183:24 - does so next let's try to add another
183:26 - template so the first thing I'm going to
183:27 - do is I'm going to clone number two and
183:30 - to make sure I add my comma up top I'm
183:32 - going to set my key of three but now
183:35 - what we want to do is we want to create
183:37 - three overlays to have three different
183:39 - positions of where we place these images
183:42 - so we're going to leave the first one as
183:44 - is or you could use you want to think
183:46 - about the layout that you want to create
183:47 - and the layout that I'm going to create
183:49 - is I'm going to have the first one just
183:50 - be the tall image and then the second
183:52 - two I'm going to have the two halves of
183:54 - images so we're going to leave that
183:55 - first one as is I'm going to duplicate
183:58 - the second one but what we want to do is
184:00 - we want to set the height of 600 for
184:03 - both of these because again they're
184:04 - going to be half of the height and then
184:06 - we want to update the gravity based off
184:08 - of where we want them to be so how about
184:10 - we make this first one we're going to
184:12 - make it Northeast so it's going to be in
184:14 - the top right corner and then this
184:17 - second one we're going to have as
184:19 - Southeast or the bottom right corner but
184:21 - of course we need to make sure that we
184:23 - update the public ID that we're trying
184:25 - to get out of that array and before we
184:27 - get started I uploaded a few more images
184:29 - before we test this out and while I like
184:31 - the elephant and grease I just want to
184:33 - have a little bit more variety as we're
184:34 - having fun with this so I'm going to
184:35 - select the Penguins this time I'm still
184:37 - going to select the elephant because I
184:38 - like the elephant but how about for the
184:40 - last one let's do the Northern Lights I
184:42 - think that'll be a Cool vibe so I'm
184:43 - going to hit add again let's select the
184:46 - collage and we can see that it's
184:47 - creating itself in the background let's
184:49 - see what we get
184:54 - here where it might take a little bit
184:56 - extra longer because we had three images
184:58 - this time but we can see that worked
185:00 - really well we have our tall image we
185:02 - can see that it's beautifully cropped
185:04 - then we have our elephant and then we
185:05 - have our Northern Lights so let's do one
185:08 - more let's do a four where we have a
185:09 - grid of four images and after that I'll
185:12 - let you take it from here so I'm going
185:14 - to clone my number three and as we're
185:17 - doing this there's probably a good way
185:19 - to kind of abstract the different
185:20 - locations maybe you have a function that
185:23 - creates a top right corner or a bottom
185:25 - left corner but we'll let you be able to
185:27 - abstract that kind of thing on your own
185:29 - for now I'm just going to duplicate
185:30 - these just to make it easier so let's
185:32 - create our four key and then again
185:35 - because we used that same pattern on the
185:38 - right where we created those two items
185:40 - I'm going to do the same thing on the
185:42 - left where I'm going to add my first and
185:45 - second slot of the array where we're
185:47 - going going to make both of these 600 in
185:50 - height now the first one's going to be
185:52 - Northwest the second one's going to be
185:55 - Southwest and the only thing I need to
185:57 - do on top of this is just adjust the IDS
186:00 - that I'm using for the right side since
186:02 - I'm now using those for the left side so
186:04 - of course we now have two and we have
186:07 - three so let's go ahead and add one more
186:09 - image to the mix how about this picture
186:11 - with the pyramid I'm going to hit add
186:13 - and collage and we can see once it's
186:15 - finished we have our nice collage of 4
186:17 - different images so once we're happy
186:19 - with our collage now we want to have the
186:21 - ability to save it into our library
186:24 - that's the whole point right we don't
186:25 - want to just look at this collage we
186:26 - want to save it so that we can use it we
186:28 - can share it so now we have this save to
186:30 - library button at the bottom of this UI
186:33 - that we can wire up to do just that so
186:35 - back inside the code where I have that
186:37 - dialogue UI I'm going to scroll down
186:39 - until I see that save to library button
186:41 - and of course on that button I'm going
186:43 - to add onclick let's add handle on Save
186:46 - creation so now let's take that function
186:49 - just to make sure that you kind of see
186:50 - what I'm writing here is an onclick
186:52 - handle on Save creation but now let's
186:54 - scroll up and actually add that function
186:57 - where how about we add it after we
186:59 - actually Define the create collage I'm
187:01 - going to name that with my little
187:03 - comment as I usually do and it it's not
187:07 - coming out there we go and what we're
187:08 - going to do is inside this function
187:10 - we're now going to upload that image
187:12 - similar to what we were doing inside of
187:14 - our media viewer when we were uploading
187:16 - or rather saving our image now to make
187:19 - this a little bit quicker and easier I'm
187:20 - hopping over to my media viewer file
187:23 - where we have that handle on Save copy
187:25 - and I'm just going to grab the code from
187:26 - there where we preload that image with
187:28 - that fetch now it'll probably be
187:30 - unnecessary since we're showing it but
187:32 - because we're showing in the image it
187:33 - works a little bit differently
187:34 - nonetheless let's just include that
187:35 - fetch it'll be quick if it's already
187:37 - created and then we can grab that upload
187:39 - code and we're going to want to
187:40 - invalidate the queries after but we're
187:42 - going to do that a little bit
187:43 - differently we're we're going to add the
187:45 - resource since we're on the gallery page
187:47 - so I'm not going to include that one I'm
187:49 - only going to include that Fetch and the
187:50 - actual upload request so inside of my
187:53 - handle on Save creation I'm going to go
187:55 - ahead and just paste that in and of
187:56 - course we need the URL for that so
187:58 - that's going to be creation URL and of
188:01 - course it needs to exist but it might
188:03 - not exist so we want to make sure that
188:05 - we handle the event that somebody clicks
188:07 - that save and it doesn't exist even
188:08 - though technically if we're only showing
188:10 - the UI it needs to so we'll say if type
188:12 - of
188:13 - creation. URL equals string make sure
188:17 - you see this we're going to Simply
188:20 - return for now and we can see that I
188:22 - still get errors because I need to first
188:24 - of all make this async and I'm realizing
188:27 - this needs to be not string not just a
188:29 - string and and we can see that the other
188:31 - one goes away but we can see that we
188:33 - also want to be able to pass in I can
188:35 - get rid of the optional chaining for
188:36 - this one we want to pass in that URL as
188:38 - the body of the request and then
188:40 - ultimately we're going to get this data
188:42 - and let's console log this out just to
188:43 - see if it's working so let's go ahead
188:45 - and hit save to library and of course we
188:47 - need to wait for that upload to actually
188:49 - finish let's see if we get a response
188:51 - out of this and we can see that our data
188:53 - comes back with our new upload so I'm
188:55 - going to copy that URL rather the secure
188:58 - URL and if I go to this we can see that
189:01 - we have our creation Now if we have a
189:03 - successfully saved creation we want to
189:04 - do two things first of all I want to
189:06 - dismiss this UI but also I want to push
189:09 - that new resource into our actual
189:11 - resource Gallery so that when I hit
189:13 - close here it's actually going to show
189:15 - up so the first thing I'm going to do is
189:17 - if we remember our used resources hook
189:19 - we have this add resources function
189:21 - which allows us to set the resource into
189:23 - State and then eventually EV invalidate
189:26 - it and we're returning it from that hook
189:27 - so I'm going to go ahead and destructure
189:29 - add resources from that and if I now
189:32 - scroll down to my handle on Save
189:34 - creation I can say add resources where I
189:37 - can pass in that data as an item of that
189:39 - array now we're also using this creation
189:42 - and set creation state in order to kind
189:44 - of determine where we're at with that
189:46 - creation so we use the state of created
189:48 - when we want to first pop up that
189:50 - dialogue we set that Ur in the type so
189:52 - we want to also reset that so that this
189:54 - goes back to undefine and then it
189:56 - dismisses that dialogue and generally
189:58 - just resets that creation state so I'm
190:00 - going to go down and I'm also going to
190:02 - add set creation undefined now finally
190:05 - because we're using these selected items
190:07 - in order to create it after we dismiss
190:10 - that UI and have handle the save a
190:11 - creation we should also reset the
190:13 - selection because the intent is to use
190:15 - those create it and then save it it's
190:17 - not necessarily meant to continue doing
190:19 - more and more things so as a convenience
190:21 - let's also dismiss the selected UI so on
190:24 - our selected State we can also use the
190:26 - set selected function where we can
190:28 - revert it back to its default state of
190:30 - just an empty array so if I head back
190:32 - down I can also say set selected and I'm
190:36 - going to make that an empty array so now
190:38 - this time when I go ahead and try to
190:39 - create a collage we can now save it to
190:41 - the library and once it finishes we can
190:44 - see that it was pushed into that state
190:46 - and everything was reset so now we can
190:47 - start to interact with that particular
190:49 - image now if you notice whenever we try
190:51 - to save to library if I go ahead and
190:53 - select two of my images again and open
190:55 - up that dialogue we never gave any user
190:57 - feedback if it was actually saving so it
190:59 - kind of looked like the UI was just
191:00 - stalled when we push that button so
191:02 - similar to what we did with deleting
191:04 - let's update this button to you have a
191:05 - little loading indicator so to do this
191:07 - we're going to manage it with our
191:08 - creation state where we're going to set
191:10 - a new value for State whenever we do
191:12 - this so I'm going to use this same set
191:14 - creation function where at this time I'm
191:16 - going to pass in a function as the
191:18 - argument because what we're going to do
191:20 - is we're going to take the previous
191:21 - value and we're going to create a new
191:22 - object that first off we're going to
191:24 - spread out that previous value but then
191:26 - because we want to keep all the previous
191:28 - attributes including the URL and the
191:30 - type but then we're going to say state
191:32 - is saving now we can see that we get a
191:34 - type error because of previous because
191:36 - it could potentially be undefined so
191:37 - let's just say if previous more of an
191:39 - edge case let's just return now if we
191:41 - head down to the modal UI let's scroll
191:43 - down to that button where we're going to
191:45 - dynamically show a different save button
191:46 - where let's let's first say creation
191:50 - State equals saving if we're if we have
191:53 - that saving State we're going to show a
191:57 - different icon but let's have that first
191:59 - where if we do not have that state of
192:01 - saving we'll then show that save button
192:03 - so let's go borrow that same loading
192:05 - spinner from the other page where again
192:07 - going back to where we deleted the item
192:09 - we can see we have this loader to with
192:11 - the animate spin so let's go ahead and
192:13 - copy that I'm going to go ahead and
192:14 - paste that directly into that existing
192:17 - place and as usual I can use command
192:19 - period to automatically update that
192:21 - import and now let's give that a try so
192:23 - now if I try to hit save to library we
192:25 - can see that we get that nice little
192:26 - loading spinner as it was actually
192:27 - saving that time it was fast but in case
192:29 - it's slow it just gives a little bit
192:31 - better of a feedback of what's going on
192:32 - but we probably Alo want to make sure
192:34 - that this doesn't fire an additional
192:36 - save if somebody were to click it again
192:38 - and again we can go back to whether we
192:39 - want to use a disabled attribute or we
192:41 - can do it via JavaScript so for now
192:43 - let's just do it with JavaScript where
192:45 - I'm also going to say if the
192:48 - creation or creation
192:51 - state state equals
192:55 - saving so now if I try to hit that
192:57 - multiple times it's only going to fire
192:59 - that once and save it to the library and
193:01 - then once it's complete push that one
193:03 - instance in okay so I think that does a
193:05 - pretty good job at managing our collage
193:07 - and our general workflow for being able
193:09 - to add those Creations but what's next
193:12 - so if we want to select some of these
193:13 - other images what if I want to select
193:15 - this penguin and I want to have it maybe
193:17 - automatically zoom into that penguin
193:19 - using some kind of animated effect now
193:21 - what I can do is I can go up to my plus
193:23 - sign and then since we don't currently
193:25 - have one it's showing none for just one
193:27 - but maybe we can show an animation so
193:29 - the first thing I'm going to do is
193:30 - create a new menu item where we're going
193:32 - to have a similar con straight the first
193:33 - thing I'm going to do is duplicate that
193:35 - but what we're going to do is this time
193:37 - we're going to say if selected length
193:39 - equals one we're going to allow someone
193:41 - to create an animation so of course we
193:43 - need to upload this call back handle on
193:45 - create animation
193:48 - where now we can scroll back up and how
193:49 - about we make this underneath where
193:51 - we're creating our collage so I'm going
193:53 - to add function handle on create
193:55 - animation I'm going to add my little
193:58 - note as usual and we can do the same
194:00 - kind of thing that we did with the
194:01 - collage so I'm going to go ahead and
194:02 - copy that set creation code and we can
194:05 - probably technically just add the URL
194:07 - here because we're only going to create
194:09 - one instance of it but I like the idea
194:11 - of keeping that code organized inside of
194:13 - the Creations lib so that it's just an
194:15 - easy way to find all the different
194:16 - creation that we're going to make so I'm
194:18 - going to get this seated with a get
194:21 - animation function where let's head over
194:23 - to lib where I can head down to the how
194:25 - about the bottom of the file and I'm
194:26 - going to say function get animation
194:28 - let's add a little note here for
194:30 - separation and we're going to do a
194:32 - similar thing to what we did with our
194:34 - collage so I'm going to go ahead except
194:36 - we're not going to do a template this
194:37 - time since we're only going to have one
194:38 - later if you want maybe you can take
194:40 - multiple images and creating a frame by
194:42 - frame animation but for now let's just
194:44 - copy this get URL function paste it it
194:47 - inside but this time we're going to use
194:49 - a different method of how we actually
194:51 - create our different creation Now let me
194:53 - first add this as my array of strings to
194:57 - make sure that we have that typed out
194:58 - properly but this time we're going to
195:01 - create a zoom image and we're going to
195:04 - use an effect called Zoom pan so what I
195:06 - can do on this is I can simply say Zoom
195:09 - pan set that to true and when it comes
195:12 - to cropping by default if you remember
195:14 - the library uses G Auto or gravity of
195:17 - Auto and that actually conflicts with
195:18 - the zoom pan feature so we're going to
195:21 - add a gravity of center now heading back
195:24 - for a second to the dialogue inside a
195:26 - media gallery that we're using to
195:27 - actually display the creation image this
195:30 - crop mode that we have on here conflicts
195:32 - with that same gravity of Auto now if
195:34 - you remember we added that in the first
195:36 - place because we were just trying to
195:37 - preview our image and any creation that
195:39 - we create will be returned as 12 by 1200
195:42 - by 1200 so we actually no longer need
195:44 - that so I'm going to get rid of the crop
195:45 - on that preview image where now we're
195:48 - just displaying a 1200 X 1200 and we're
195:50 - preserving the transformations of our
195:52 - creation URL but if we now head back to
195:55 - the Creations file we need to make sure
195:56 - that we do actually export our get
195:59 - animation function so that we can now
196:01 - import it into our media Gallery so if I
196:04 - head back up to where we're using that
196:06 - we have our get animation I'm going to
196:08 - hit command period so that I can update
196:10 - that import and of course we're no
196:12 - longer creating a collage we're creating
196:14 - an animation and now let's give that a
196:16 - try where I'm going to go ahead and
196:18 - select this penguin I'm going to hit
196:20 - plus hit animation and this one might
196:23 - take a little bit longer than the others
196:24 - because there's a it's a heavier
196:26 - processing in order to create an
196:28 - animation a gif of course so well that
196:30 - was decently quick but we can see that
196:32 - it's zooming in to the focal point of
196:34 - the image which is pretty cool now if
196:36 - you noticed it stopped it doesn't Loop
196:38 - by default but we can really easily
196:40 - enable that now all we need to do is
196:42 - back where we have our Zoom pan defined
196:44 - I'm just going to Simply pass in a
196:46 - string of Loop now just as a quick note
196:48 - if you want to take that further you can
196:50 - actually Define this as an object where
196:52 - you can pass in some custom options such
196:53 - as maybe you want to zoom into a
196:55 - specific region or maybe you want to I
196:57 - don't know just do some more advanced
196:58 - effects with it check out the
197:00 - documentation for Zoom pan there's some
197:01 - pretty cool things you could do with it
197:03 - but for now I'm just interested in
197:04 - focusing in on that and zooming and then
197:06 - doing a loop with the animation so now
197:08 - let's try this again with our same
197:09 - penguin friend it should generate a new
197:11 - image because I'm using that version
197:13 - number of course but once we get it we
197:15 - can see that we get that lovely
197:17 - animation let's see if it loops and it
197:19 - does so that worked perfectly and we
197:21 - able to give a cool animation effect for
197:23 - any of the images that we want to select
197:25 - now as a final creation we're going to
197:27 - create a color pop and what do I mean by
197:29 - color pop well let's think about this
197:31 - elephant for a moment where what we're
197:32 - going to do is we're going to desaturate
197:34 - the background so that the only color in
197:36 - the image is our elephant friend himself
197:38 - and the way that we're going to do that
197:40 - is a little bit creative where the first
197:41 - thing we'll do is we'll remove the
197:42 - background kind of similar to if you
197:44 - remember how we had this option to
197:46 - remove background we're going to do that
197:48 - but we're going to do it in an API
197:49 - endpoint so that we can track its its
197:51 - usage or rather the removal we're going
197:53 - to then upload that separately because
197:55 - then we'll desaturate the original image
197:58 - and then overlay on top the image with
198:01 - the color so let's start off by creating
198:03 - the trigger me mechanism where we have
198:05 - our animation and our collage so let's
198:07 - now add another one and we're going to
198:09 - call this color pop and if you notice
198:12 - this isn't in ABC order with collage but
198:14 - it doesn't matter because this is only
198:15 - showing at more than one and the are
198:16 - showing at only one so you can kind of
198:18 - set that up how you want depending on
198:20 - your use case but now let's update that
198:22 - on click Handler and let's call this
198:25 - handle on create color pop or yeah looks
198:29 - like we have creating all those but then
198:31 - underneath all my other ones let's just
198:32 - clone this one I'm going to now rename
198:35 - this on create color pop I'm going to
198:37 - say created color pop but now our URL is
198:41 - going to work a little bit differently
198:43 - now this is going to be an asynchronous
198:45 - process where we're going to do this in
198:46 - an API endpoint because we need to do
198:48 - that extra processing it's a little bit
198:50 - more complex in composing this image so
198:53 - we're going to first create that image
198:55 - using our API endpoint and then we'll
198:58 - set that creation data but if you
199:00 - remember earlier we were talking about
199:02 - how we were using different states for
199:04 - our creation where we're going to create
199:06 - a creating state so that while that's
199:08 - loading it's going to be able to show us
199:10 - a little animation but let's first set
199:12 - up the actual image itself and then
199:14 - we'll get to that loading state so
199:16 - inside of my app API directory I'm going
199:18 - to create a new folder called creations
199:20 - and inside that I'm going to create a
199:22 - new folder called colorpop and then
199:25 - finally inside that I'm going to clone
199:27 - one of my existing routes let's just
199:29 - clone the upload route so that we can
199:31 - kind of start off with some of the
199:32 - existing boiler plate now we'll be using
199:35 - some of this existing code specifically
199:36 - we'll be taking in the color the public
199:38 - ID that we want to create this out of
199:40 - but we're not going to use a URL so we
199:42 - can get rid of that but we are going to
199:44 - need to upload this image in order to
199:46 - get that removed background variation or
199:49 - rather store the variation with the
199:50 - background removed so we're going to
199:52 - keep some of those upload options but
199:53 - first we need to create that URL that
199:55 - we're going to use to remove the
199:56 - background so at the top I'm going to
199:58 - additionally import get clld image URL
200:02 - from next cloudinary and then I'm going
200:05 - to use that to create my cons background
200:07 - removed URL and let me hide the sidebar
200:10 - just to give us some extra room here
200:12 - where I'm going to run that function I'm
200:13 - going to pass in the source as my public
200:16 - ID and I'm going to add remove remove
200:20 - background set to true now another
200:23 - important factor about this is when we
200:25 - upload that image and or rather when we
200:27 - create the URL and then we pass it along
200:29 - we want to make sure that that's always
200:31 - going to be a PNG because we want to
200:33 - preserve that transparency and as I
200:35 - mentioned earlier when you have format
200:36 - of Auto which is default with get SE
200:38 - image URL you might have a different way
200:41 - of or rather the format might be
200:43 - detected in a different way that it is
200:44 - in the browser because it's in that node
200:46 - environment so let's add a format of
200:48 - ping explicitly there and then I'm also
200:51 - going to pull off the quality attribute
200:53 - because we don't want to mess with the
200:54 - quality since we're still trying to
200:56 - maintain the default image or rather the
200:58 - source image we just want the background
201:00 - removed from it and then as we remember
201:02 - we did in other creations we're just
201:03 - going to set a version where we're going
201:06 - to use date. now and that's not going to
201:08 - really matter what version or what date
201:10 - that we set since it's going to be on
201:12 - the server time it's just the fact that
201:14 - we're trying to get a unique version for
201:16 - that
201:17 - but then since we have this background
201:18 - removed URL before we go forward and try
201:20 - to start to compose that image Let's
201:22 - test this out and just wire up the
201:23 - workflow so that we can actually see it
201:25 - happening in progress so I'm going to go
201:27 - ahead and comment out this upload code
201:29 - and I'm going to Simply pass back this
201:31 - URL as my background removed URL now
201:35 - inside of my handle on create color pop
201:37 - function I can now await fetch my API
201:41 - where it's the Creations color pop
201:44 - endpoint I'm going to pass my method of
201:47 - post my body which is going to be
201:49 - json.stringify
201:51 - including my public ID which will be the
201:54 - selected zero remember our selected
201:56 - array is going to include those public
201:58 - IDs so we're going to grab the first one
202:00 - and then of course I need to make this
202:01 - fun function async but the result of
202:04 - this is going to include that URL so I'm
202:06 - going to Simply destructure that once we
202:08 - get that response and I'm going to need
202:10 - to make sure I pass on a then so that I
202:12 - can actually turn that response into
202:14 - Jason before I pass it through we're
202:16 - ultimately I'll take that URL and pass
202:18 - that right along to set creation so now
202:21 - heading back let's test this out where
202:22 - let's pick out this picture from Athens
202:25 - and I'm going to go ahead and click plus
202:26 - color pop and it looks like we have an
202:29 - issue so let's look at the web console
202:30 - for a second and it looks like we're
202:32 - getting those 423s now if you remember
202:35 - the 423 status means that it's
202:37 - processing and we have a little bit of
202:39 - an issue there where we can see once it
202:40 - was updated we were able to get that
202:42 - actually added into the UI which is
202:44 - great but in the meantime we need to
202:46 - actually pull for that background to be
202:49 - removed before we can actually display
202:51 - it now we could probably try to fix up
202:53 - the UI so that while it's pulling it's
202:55 - going to show properly inside of here
202:57 - but if you remember we're going to take
202:59 - the result of that removed background
203:01 - and we're going to actually overlay it
203:02 - on the original image so we're going to
203:04 - need it before we get back to this part
203:06 - of the UI so that's what we need to do
203:08 - inside of the endpoint so that we can
203:10 - pull for that image make sure that the
203:12 - background is removed and then we'll
203:14 - apply it to the original image so the
203:17 - way that I'm going to do this is I'm
203:19 - going to create an async function that
203:20 - I'm going to call check status now this
203:23 - check status is going to take in a URL
203:25 - and that URL is going to be whatever we
203:27 - pass it and in particular it's going to
203:29 - be this background removed URL where
203:31 - let's set this up and the very first
203:32 - thing I'm going to do is I'm going to
203:34 - try to fetch that image so I'm going to
203:35 - say constant result is equal to or let's
203:38 - call this response is equal to await
203:41 - fetch that URL and then I'm going to see
203:44 - if that response is okay rather or it's
203:47 - not an error or something like that
203:48 - where the 423 would say that it's not
203:50 - okay so I'm going to say if the response
203:53 - is okay and if it is okay I'm just going
203:55 - to Simply return true because the point
203:57 - of this isn't to get that URL it's just
204:00 - to check if it is okay so we're just
204:02 - going to try to return something now
204:04 - after that if it's not okay there's two
204:07 - things I want to do first of all I just
204:09 - want to put in a little bit of a delay
204:10 - just so that we're not spamming this end
204:12 - point but then I'm going to set this up
204:13 - so that it's triggering recursively so
204:16 - if it's not okay it's going to check it
204:17 - again if that's not okay it's going to
204:19 - check it again and so on until it is
204:21 - okay and then it will basically return
204:23 - that true again it will resolve and we
204:25 - can move on so I'm going to say await
204:28 - new promise we going to grab resolve and
204:31 - inside I'm going to set time out we're
204:34 - inside there I'm just going to Simply
204:36 - make this happen for 500 milliseconds
204:37 - again just so we're not spamming this
204:39 - thing and then we can say resolve
204:42 - undefined but after we get through that
204:45 - after that little delay I'm going to
204:47 - return this check status function and
204:50 - I'm going to pass through that same URL
204:53 - now I think I need to have my aait on
204:55 - here but once we now have this all set
204:57 - up I can now try to use this check
205:00 - status so I'm going to run aait check
205:03 - status I might not need that a in that
205:05 - context but this is going to allow us to
205:07 - now pass in our background removed URL
205:10 - so again let's walk through this flow
205:11 - once I check my status of the URL it's
205:14 - going to first try to get that and then
205:16 - if it's not if it is okay if it's a 200
205:18 - level response or whatever the that's
205:20 - going to trigger the okay it's just
205:22 - going to return true it's good we can
205:23 - continue on but if it's not okay let's
205:25 - wait for 500 milliseconds and then check
205:27 - it again if that's not okay again we'll
205:30 - check it again and so on until it is
205:31 - okay and then we'll continue through
205:34 - where now we know after this that it is
205:36 - okay and we can just return that with a
205:38 - response so let's try this again how
205:40 - about with our Penguins this time I'm
205:42 - going to go ahead and Trigger the color
205:43 - pop we can see that it might take a
205:46 - moment where this is where we're going
205:47 - to create the creating status if we
205:49 - remember but once that UI pops up we can
205:52 - see that it's starting to load and then
205:53 - we have the image with the background
205:55 - removed now one thing you might notice
205:56 - is the image is still tall we just never
205:58 - cropped it where the other ones again
205:59 - remember we need to return an image with
206:01 - the background or with the image already
206:03 - cropped but we're going to handle that
206:05 - afterwards so let's move on now once we
206:07 - have that background removed URL we know
206:09 - that everything is okay we can now
206:11 - upload this so that we can then use it
206:13 - later so I'm going to uncomment this
206:15 - code and we don't need all this stuff
206:17 - you know maybe one thing that I usually
206:18 - like to do is I like to tag it where we
206:21 - can say something
206:22 - like background removed I also like to
206:26 - sometimes tag with the original so that
206:28 - if I ever need to reference it I can so
206:30 - let's say original where we can pass in
206:33 - that public ID of the original image but
206:36 - then I can continue on I can pass in
206:39 - that background removed URL as my upload
206:41 - so then once we have those results we
206:43 - can now pass that back but we're going
206:45 - to use that that as a creation URL but
206:47 - first let's just pass back that results.
206:50 - secure URL just to make sure that that
206:52 - process is working in the first place so
206:54 - I'm going to trigger it again on the
206:55 - same Penguins because we know that we're
206:56 - going to create a a unique process for
206:59 - all that but we can see now we're going
207:00 - to get that URL and it's working so now
207:03 - I'm going to go ahead and copy the same
207:05 - code that I created for the background
207:07 - I'm going to paste that below the
207:09 - results but this time it's going to be
207:11 - the creation URL we can pass in instead
207:13 - of or rather we're going to keep that
207:15 - public ID we don't need to remove the
207:17 - background we don't need to change the
207:18 - format we don't need to change the
207:20 - quality we do want to set the version
207:23 - but one thing we're going to do we're
207:24 - going to say grayscale true and then
207:27 - we're going to add an overlay which is
207:28 - where we're going to add the the new
207:31 - image with the background removed so
207:32 - let's say overlays where we're going to
207:35 - specify our array with our object where
207:37 - the public ID will be our results dopu
207:43 - ID now if you remember we also need to
207:45 - make sure that we crop this image before
207:47 - passing it along so I'm going to set my
207:49 - width of 1200 my height of 1200 and then
207:52 - I'm going to set up my crop property
207:55 - where of course we need to make sure
207:56 - we're cropping the source of this we're
207:58 - going to set a type of fill and then I'm
208:01 - going to also set a gravity of Center
208:05 - just to make sure that those two images
208:07 - are going to be aligned as they're
208:09 - getting added together but then I'm
208:10 - going to take that creation URL and I'm
208:12 - going to pass that back as my response
208:14 - but now heading back to the browser
208:16 - let's give this a try I'm going to hit
208:17 - color pop and remember it'll take a
208:19 - little second we're going to fix that
208:20 - delay so that we can actually show some
208:22 - kind of UI but we can see we get our
208:24 - color pop we have a background with the
208:26 - desaturation and we have our colors now
208:28 - let's maybe try that again with I think
208:30 - the Athens one might be cool or at least
208:32 - it might be pretty obvious of the the
208:34 - actual result but we're going to go
208:36 - through that backround removal process
208:38 - now the first time an image has its
208:39 - background removed it'll take extra long
208:42 - and then other images will be quicker
208:43 - but we can see we now get that same
208:45 - effect
208:46 - but I'm going to try this one more time
208:48 - cuz my elephant friend was the original
208:49 - one that I wanted to test this out on we
208:51 - can see once it goes through that
208:53 - process of removing it we get our popup
208:55 - with the creation and we can see that we
208:57 - have a nice pop effect color pop effect
208:59 - for our elephant but now let's fix that
209:01 - little UI issue now the reason it's
209:03 - having that delayed effect in showing
209:05 - the modal if you remember we're first
209:06 - hitting that endpoint and when we hit
209:08 - that endpoint it can potentially take a
209:10 - little bit of time so what we want to do
209:12 - is we want to put our creation modal in
209:14 - a state that indicates that currently
209:16 - loading but so that it can show
209:18 - immediately and then show that kind of
209:20 - loading indicator so we're going to take
209:22 - take our set creation and the very first
209:24 - thing we're going to do is we're going
209:26 - to set our creation but let's put that
209:29 - in a state of creating now of course
209:32 - we're not going to have a URL yet so
209:33 - let's just make that undefined it can
209:35 - really be any value at this point looks
209:37 - like URL doesn't like that though so
209:39 - let's go ahead and make sure let's make
209:40 - that optional and if we head back to the
209:42 - UI and try this out we can see that it
209:45 - does show that UI right away as it's
209:47 - making that API request so that
209:49 - definitely is an improvement already but
209:51 - now let's show some kind of loading
209:52 - indicator now heading down to our
209:54 - creation dialogue we have a bunch of
209:56 - content that we probably only want to
209:57 - show if we're able to actually save
210:00 - where we're trying to show something
210:02 - before we're ready to save so the first
210:03 - thing I'm going to do is I'm going to
210:05 - wrap everything in here with to check
210:08 - that it's in the right State and if we
210:10 - remember so first of off first off I'm
210:12 - going to use the includes method like we
210:13 - did earlier and I'm going to say we have
210:16 - two states we have created and we have
210:18 - saving that I want to include in this so
210:20 - I'm going to check if these includes my
210:25 - creation State and if it does then I'm
210:28 - going to wrap everything inside I'm
210:30 - going to add a fragment so that I can
210:33 - control all these components inside
210:35 - let's just go ahead and indent this
210:37 - twice going to add that fragment and
210:39 - then I'm going to close that off so now
210:42 - if it's in that state looks like I
210:44 - spelled that wrong if it's in that state
210:47 - we'll show what's inside now it looks
210:49 - like I can't just pass this in as an
210:51 - undefined value so I'll first check and
210:53 - see if that exists first and then I'll
210:55 - check if it's included in that state but
210:57 - now if I try to select it and go to
211:00 - color pop we can see that it pops up as
211:02 - basically an empty dialogue and then it
211:04 - brings it in when it actually has that
211:05 - URL so now let's add that loading
211:07 - spinner so right above it I'm going to
211:09 - basically do the same thing let me close
211:12 - that off but I'm going to say that I
211:13 - want this to be in the state of cre
211:15 - skating before I actually show anything
211:18 - but once we're in that state I'm going
211:20 - to show that same loading icon that we
211:22 - used elsewhere so what is that loader
211:24 - because when we were using that for the
211:26 - save button so that was just a little
211:27 - bit down I'm going to grab that same
211:29 - loader and I'm going to go ahead and
211:31 - paste that inside now of course we're
211:33 - going to want that to be a little bit
211:34 - bigger and I know I want this to be 12x
211:36 - 12 I also want to put a wrapper around
211:38 - this because I don't want it to just be
211:40 - hugged up tight next to the loader
211:42 - itself I want to give it a little bit of
211:43 - breathing room so I'm going to also wrap
211:45 - this with a div where on that div I'm
211:48 - going to set a class name first of all
211:50 - Flex because I want to items Center I
211:53 - want to
211:56 - justify Center but then I'm going to add
211:59 - P of let's call this 12 but now that we
212:02 - have that loading indicator let's give
212:04 - that a try I'm going to hit colourpop
212:05 - again and we see that we have that nice
212:07 - spinning animation before the colour pop
212:09 - actually comes up so we're indicating
212:11 - that it's currently loading and then we
212:12 - get the second loading indicator which
212:14 - maybe we can reduce that a little bit in
212:16 - some way but either way we're able to
212:18 - get that experience where we're showing
212:19 - that it's processing before it actually
212:21 - gets to the image itself but then of
212:23 - course I think I like this one so I'm
212:24 - going to just save this one to the
212:25 - library now these creations wouldn't be
212:27 - fun unless I added some icons so let's
212:29 - quickly add some icons to the different
212:31 - options that we have available now
212:32 - heading back into Lucid I think I like
212:34 - this layout panel left for my collage
212:38 - one I think that probably indicates a
212:39 - good value on that for my animation I
212:42 - found this Square stack one that I think
212:44 - looks pretty good it shows that it's
212:46 - going in frames and then for colourpop I
212:48 - had a little bit of a hard time trying
212:49 - to think think this through of what I
212:51 - wanted to use but ultimately I settled
212:52 - on using drop so that indicates that I
212:55 - have a drop of color so for my animation
212:57 - I'm going to add my Square stack icon
213:00 - I'm going to make sure I import that in
213:02 - I'm going to add my class name with a
213:06 - width of four a height of four and also
213:09 - a margin right of two just to give a
213:11 - little space I'm going to copy that and
213:13 - paste it into color drop where I'm going
213:16 - to use the droplet going to need to make
213:18 - sure I import that as well and then
213:20 - finally for my collage it's going to be
213:23 - layout
213:25 - panel left and I'll go ahead and import
213:27 - that one as well so now back in the
213:29 - browser I can open up that menu and I
213:30 - see my animation in my colourpop now
213:32 - let's select one more so that we have
213:34 - for the two selected option where now we
213:36 - can see the collage and of course that's
213:38 - not incredibly necessary but it gives it
213:40 - a nice touch so that we can kind of have
213:42 - a good visual reference of what we're
213:43 - selecting now I added all these
213:44 - creations to my media library every time
213:46 - I created one but I don't have a good
213:48 - way of only seeing the animations what
213:50 - if I wanted to kind of filter out all
213:52 - the originals and I just wanted to see
213:53 - the fun ones that I created now what we
213:55 - can do is we can add a new navigation
213:57 - item so if we select this we go to our
213:59 - creations page and on that creations
214:01 - page we only query for things that
214:03 - contain that specific tag related to
214:05 - Creations so that also means that we
214:07 - need to only tag our creations with a
214:10 - specific tag so let's start off by
214:12 - creating that new page where we can
214:13 - include those Creations so under the
214:15 - page PES route I'm going to create a new
214:17 - folder called Creations where I'm going
214:20 - to just simply duplicate this original
214:22 - page that I have and if we remember this
214:24 - is our default homepage in its current
214:26 - state where this is just going to query
214:28 - all of our Library resources remember
214:30 - we're tagging those originally so that
214:32 - we can add those to the page we pass
214:34 - them into media gallery from our server
214:36 - response and then we also pass in that
214:38 - tag so that we pass along the
214:40 - information to make that request on the
214:42 - client as well so the first thing that
214:44 - we need to do is we need to query for
214:45 - those images that only match that tag
214:47 - but we haven't yet added that tag so I'm
214:49 - going to first open up my env. loal and
214:51 - let's create a new tag for
214:54 - creations and let's call this Simply
214:58 - Creations now copying that value let's
215:01 - head back over to our page and I want to
215:03 - make sure that when I query for my res
215:05 - Resources by tag I'm going to query for
215:08 - that New Creations tag and that when I
215:10 - pass it into media Gallery I'm querying
215:11 - for that as well now if I tried to go to
215:14 - that creations page it's understandably
215:16 - empty because again I no longer have any
215:18 - of those Creations actually tagged as a
215:20 - creation so I'm going to head back to my
215:22 - photos and what we're going to do is
215:24 - we're going to create new creations and
215:26 - every time we do we're going to make
215:28 - sure we add that tag so let's head over
215:30 - to our media Gallery where we find our
215:32 - handle on Save creation function and
215:35 - inside of that upload request let's add
215:37 - another field where we're going to call
215:39 - that tags and let's pass in that tag
215:42 - that we just created or let me copy that
215:44 - value and it's it's going to be
215:46 - process.env that tag name and I'm just
215:48 - going to wrap this in string just to be
215:50 - sure now that means over in our upload
215:53 - route we need to be able to accept those
215:56 - tags and then pass them into our upload
215:58 - options so what I'm going to do is I'm
216:00 - going to destructure those tags and we
216:02 - can see that we're already adding upload
216:04 - tags specifically for those Library tags
216:07 - and if we remember the logic here first
216:09 - second we're currently checking if type
216:11 - of public ID equals string and that's if
216:14 - we're passing in an image that already
216:16 - exists because we want to overwrite it
216:18 - so where where we have this options.
216:20 - tags this is because we're just tagging
216:22 - every image that's new with that General
216:25 - Library tag so we're going to do the
216:26 - same thing but this time we're going to
216:29 - spread out our tags if they are
216:32 - available and we can even make this an
216:33 - empty array by default that way if we
216:35 - don't pass in tags that we're not going
216:37 - to have any issues but now let's try
216:39 - that one more time I'm going to go ahead
216:40 - and select my elephant friend again
216:42 - let's try to make the color pop again
216:45 - now once this loads I'm going to go
216:46 - ahead and save this to
216:49 - library we can see it was pushed into
216:51 - the media library but now let's check
216:53 - and see if it was actually available as
216:54 - a creation so I'm going to go to
216:56 - creations and we can see that it's there
216:58 - because it's now tagged as creation and
217:01 - we're querying for only those Creations
217:02 - on this page now let's add one more
217:05 - let's select the northern lights and our
217:07 - Penguins let's do a collage just so that
217:09 - we at least have two there I'm going to
217:11 - save this to
217:12 - library we have it in our library and
217:15 - then in inside of Creations we now have
217:17 - two but now we still have one big issue
217:20 - in that we have no way of actually
217:21 - navigating there unless we manually go
217:23 - there and that's not good ux so let's
217:25 - add a sidebar link for this if I head
217:27 - over to my Pages directory here I'm
217:29 - going to go down until I see my layout
217:32 - now inside of my layout I have this
217:34 - component called sidebar links and not
217:36 - to go too deep into this but again we're
217:38 - rendering a server component as the
217:40 - default layout but then I'm using this
217:42 - sidebar links as a client component so I
217:44 - can determine path name and show some
217:46 - kind of indicator that that link is the
217:49 - active link with some styling but inside
217:51 - of sidebar links I can now just add a
217:54 - new path that new path is going to be
217:56 - creations and then I can call that label
217:59 - of Creations now of course we want to
218:01 - also assign a icon image for this like
218:03 - we usually do and then for this icon I
218:06 - like the idea of sparkles for this so
218:08 - I'm going to use Sparkles so I'm going
218:09 - to call this Sparkles and then I'm going
218:12 - to import that and we can see that it's
218:14 - nicely displayed on the sidebar here if
218:15 - I select Creations we can see that it
218:17 - loaded that page with just the Creations
218:20 - now there's so many things that you can
218:21 - do to take this project beyond what we
218:23 - created whether you want to add more
218:24 - Creations maybe you can add favorites
218:26 - where you add a tag if somebody
218:28 - favorites an image but there's so many
218:30 - Transformations and effects that you can
218:31 - really have a lot of fun with building
218:33 - out your own Google photos clone now as
218:35 - a reminder if you want to check out the
218:37 - full demo or if you even want to
218:38 - contribute to this demo definitely check
218:40 - out photobox where you can check it out
218:41 - at photob box. where you can see all the
218:44 - Fe features that I built into it and
218:46 - hopefully you can contribute a future to
218:47 - it too I hope this has been a fun
218:49 - project for you to learn through all the
218:50 - intricacies of nextjs and using these
218:52 - different image editing techniques I
218:54 - know I had a ton of fun building it but
218:56 - what's your favorite Google photos
218:57 - feature or what's your favorite feature
218:59 - that you're going to add to your own
219:00 - application let us know in the comments
219:02 - and remember head over to C.M medfree
219:05 - codecamp so you can make sure you claim
219:06 - your bonus 3 credits I'm Colby fok and
219:09 - thanks free code camp for this
219:10 - collaboration thanks for watching