00:00 - Super Bass is a powerful open source
00:02 - alternative to Google's Firebase in this
00:05 - beginner's course giyum will help you
00:07 - get up and running with Super Bass this
00:09 - course aims to equip you with the
00:11 - Knowledge and Skills necessary to
00:13 - efficiently build modern secure web
00:15 - applications using super bases robust
00:18 - features you'll dive into the essentials
00:20 - of leveraging real-time databases insta
00:23 - apis and super bases authentication and
00:26 - authorization capabilities whether
00:28 - you're an aspiring developer or a
00:30 - seasoned professional looking to expand
00:31 - your toolkit this course will help you
00:34 - streamline back-end development with
00:36 - Super Bass hello everybody and welcome
00:38 - to this course about Super Bass I'm
00:40 - really excited to introduce you to my
00:41 - favorite product of the year because
00:43 - it's been a long time that I was waiting
00:45 - for a product that will do the same as
00:47 - Firebase but with postgres and so SQL
00:51 - base it's an open source alternative to
00:54 - Firebase and other Firebase users since
00:57 - many years I was waiting for that since
00:59 - a long time with super bay is what you
01:02 - can do basically it's to create tables
01:04 - but also you can have a notification
01:06 - system a storage system and everything
01:09 - that is provided by postgres on one
01:12 - click you can create a backend as a
01:14 - service and that's really great for
01:16 - people who wants to create project
01:18 - really fast but also with Super Bass you
01:21 - can create projection project because
01:23 - Super Bass is built on top of postgres
01:26 - so you have all the benefits of postgres
01:29 - and also you have all the benefits of a
01:33 - real back end because you can use also
01:35 - the real time and you can use for
01:37 - instance the edge function so in this
01:40 - complete course I'm going to teach you
01:41 - how to deal with Super Bass to create a
01:44 - backend on one click and to launch your
01:46 - project right away or to choose the best
01:48 - alternative for your clients for
01:51 - instance or for your startup here is the
01:53 - program of our course first we are going
01:56 - to learn how to create a project so how
01:59 - to sign in sign up or to plug it to your
02:02 - application for instance
02:04 - then we are going to look at the tables
02:07 - because Super Bass is built on top of
02:09 - progress so of course we can create
02:11 - tables and everything that is around it
02:13 - policies raw level security
02:17 - etc etc
02:18 - so there is also a chapter on row level
02:20 - security to understand what is it
02:22 - exactly and how to use it
02:24 - there is a chapter also on
02:26 - authentication or to deal with
02:28 - authentication because Super Bass has a
02:31 - full system to deal with authentication
02:33 - and with the SDK it's so fast to install
02:37 - we will talk also about user management
02:39 - recover password email templates and
02:42 - email templates this is something that I
02:44 - love about Super Bass when a user is
02:47 - going to sign in or sign up it will
02:49 - receive an email automatically from
02:51 - Super Bass you don't have to do it and
02:53 - you can work also on the templates of
02:55 - those emails
02:57 - we will enter in the real subject of
03:00 - using a backend so we will talk about
03:01 - read insert delete or update elements
03:05 - rows in your tables but also in storage
03:08 - for instance we will talk about
03:10 - subscriptions we will talk about
03:12 - relation between table because it's SQL
03:15 - so we can do relation with Super Bass
03:18 - we will talk about functions triggers
03:21 - schema storage logs because it's a
03:25 - backend of course we want to know if
03:28 - something went wrong we will want to
03:30 - have some feedback and we're going to
03:33 - use for that the logs
03:35 - we will talk about extensions real time
03:38 - Edge functions and we will see that edge
03:41 - functions are really useful and finally
03:44 - finally we will talk about web books
03:46 - which is really really cool to use
03:49 - because for instance every time you're
03:51 - going to add some data to a table you
03:54 - want to perform an action we can do that
03:56 - with WebEx it was an example we can do
03:59 - way more but we are going to see all of
04:01 - these together so if you are ready to
04:03 - create a project with Super Bass right
04:05 - now and to learn everything you need to
04:07 - know to create a backend as a service in
04:10 - some minutes let's go let's work
04:12 - together on that
04:18 - welcome to this new course about Super
04:20 - Bass I'm really really excited to
04:22 - introduce you to my favorite product of
04:24 - the year
04:25 - why because actually Super Bass is a
04:29 - backend as a service on one click and it
04:32 - really helps you to bootstrap your
04:34 - application really fast
04:36 - so what is Super Bass
04:37 - as I said it's a backend as a service it
04:40 - means that you can create a project on
04:43 - the platform and actually you can have a
04:46 - notification system that helps you to
04:48 - deal with all the providers such as
04:51 - Google LinkedIn GitHub whatever and you
04:55 - can actually help on your front-end
04:57 - application to log in through those
04:59 - providers
05:00 - but also there is a database and this
05:03 - database is running on postgres
05:06 - and you can create table make
05:08 - relationships triggers everything that
05:10 - is around postgres because Super Bass
05:13 - has been built on postgres so there are
05:17 - really big fans of postgres and
05:20 - everything that is available under
05:21 - postgres is available on Super Bass
05:24 - but also with Super Bass you can have
05:26 - Edge functions that helps you to run
05:28 - some application on the backend side
05:31 - such as a dino server for instance you
05:35 - can have real-time subscriptions also of
05:39 - course there is Storage and one of the
05:41 - features that I like the most is that
05:43 - you have a documentation that generates
05:45 - depending on your table all the code
05:48 - that you need for your SDK on the
05:50 - front-end side but we are going to see
05:52 - all of this in this long course about
05:54 - Super Bass and I really hope you're
05:56 - gonna enjoy
05:58 - so basically when we arrive on the
06:00 - website of Super Bass
06:01 - we have some explanation of what is
06:04 - Super Bass you have some
06:06 - testimonies and Etc you get some code
06:09 - and we clearly see that it's really easy
06:11 - to implement really fast because you
06:12 - just have to install the SDK or Super
06:15 - Bass use the create client and then you
06:18 - can use it and there's a lot of other
06:21 - things but what we want to do we want to
06:23 - create a new project right away we want
06:27 - to have our backend as a service under
06:29 - Super Bass so to start it's totally free
06:33 - okay it's free and up to 500 megabytes
06:37 - of database and one giga of file storage
06:40 - so we have a a big size that is
06:43 - available on us on the hard drive to
06:46 - build a project okay so to bootstrap a
06:49 - startup it is really ideal that's the
06:52 - best you have also two gigabytes of
06:54 - bandwave etc etc 50 000 monthly active
06:58 - user
07:00 - etc etc if you want a GoPro on Pro you
07:03 - have a bigger database of course and you
07:06 - have more services for only 25 dollar
07:10 - per month honestly for this price this
07:13 - is the best deal ever you can have
07:15 - because you can have an almost unlimited
07:18 - I mean 2 million ad function invocation
07:21 - 100
07:23 - 000 monthly active users and this is
07:25 - really big
07:26 - etc
07:27 - etc so to start Super Bass is free so
07:30 - what we're gonna do we are going to
07:32 - click here on the top on start your
07:34 - project and we are going to create
07:36 - immediately our project
07:38 - so when you click on sign up and you
07:40 - arrive on get started there is two
07:43 - possibilities you can either log in with
07:45 - GitHub so it will be related to your
07:48 - GitHub instance otherwise you can add
07:50 - your email and password so what I'm
07:54 - going to do me I'm going to connect with
07:55 - an email and a password to have a fresh
07:57 - instance on super bass once we are
08:00 - logged in we arrive on a dashboard and
08:03 - on this dashboard you can find the
08:05 - project but also the organization
08:08 - so you can have several projects on the
08:11 - free plan you are supposed to have
08:13 - maximum two projects and one project
08:15 - contains a whole actually project of
08:19 - Super Bass with everything inside so the
08:22 - authentication the database the storage
08:24 - etc etc
08:25 - you can have also several organizations
08:27 - and on those organizations of course we
08:30 - understand that we can have several
08:31 - projects
08:33 - also you have everything that is related
08:35 - to your account the preference the
08:37 - access token you can log out you get the
08:40 - API reference also but we are not going
08:43 - to wait that much we are going to click
08:45 - on new project because we are here to
08:47 - create a new project
08:49 - and this is where we are going to set up
08:52 - everything
08:53 - so I arrived here on this uh pop-up
08:56 - creating a new project and here I can
08:59 - select my organization also what I can
09:01 - do is to put the name of this project so
09:05 - I can put my new Super Bass project okay
09:09 - and I'm supposed to have a database
09:12 - password okay so basically this password
09:15 - should be very strong because it's
09:16 - supposed to be for the database this is
09:18 - why they provide to you here a button
09:21 - generator password that you can use
09:23 - and what I propose you to do is to copy
09:26 - paste this password somewhere okay so
09:30 - you got to keep this password it's
09:32 - really really important also there is
09:35 - the region so here we got to create
09:37 - actually an instance and on this
09:39 - instance we have several regions several
09:41 - servers that we can check I'm going to
09:44 - stay on North Virginia and down there
09:46 - you have the pricing plan and that's
09:49 - what we saw before you can choose the
09:51 - pro or you can stay on the free so for
09:54 - this demonstration I'm going to take a
09:56 - free plan even if on my own instance I
09:59 - got a Pro Plan here we can work with a
10:02 - free plan to show what is exactly Super
10:05 - Bass and there we go my project has been
10:08 - created
10:10 - so we see here that it's setting up the
10:13 - project on the server once it will be
10:15 - done we will get access to all the
10:17 - features of Super Bass that are here on
10:20 - the left so we can already see that we
10:22 - have a table editor so we will see that
10:25 - just after the SQL editor so there is an
10:28 - SQL editor there a database an
10:31 - authentication system the storage The
10:34 - Edge functions the reports the logs the
10:38 - API Docs
10:39 - and on there we got the project settings
10:42 - here on this page what we've got we've
10:45 - got a link directly to documentation
10:47 - there so if I open the documentation
10:50 - here I arrive on everything that is
10:53 - related to Super Bass and how to use it
10:56 - and this dock guys is brand new thanks
11:00 - to the Super Bass team it's a really
11:02 - really nice Dock and it's really
11:04 - efficient at the same time so you get
11:07 - guides if you want to integrate Super
11:09 - Bass with react nextgs flutter because
11:13 - Super Bass works a lot with flutter view
11:16 - solid GS velkit etc etc you get also
11:20 - documentation on database art storage
11:22 - real time so super bass fought about
11:25 - everything they are making a product for
11:28 - people who don't want necessarily to
11:30 - create a backend or work on it on just
11:33 - having the skills to do it so they
11:37 - design and they wrote a very nice
11:39 - documentation that goes straight to the
11:42 - point
11:42 - so if you want to have more information
11:44 - next to my courses you can click for
11:47 - instance on here on database and down
11:50 - there you get a lot of examples of the
11:52 - tables that we are going to see after on
11:54 - how to use the database if you want to
11:56 - go too hot it's exactly the same you
11:59 - even have videos and here there is the
12:01 - CTO and Wilson that is talking to you
12:04 - about Earth here we see that we can log
12:06 - in with email magic Link phone social
12:10 - login etc etc okay there is a lot of
12:13 - documentation like this we can come back
12:16 - to it later and there we go back on the
12:19 - project we see that we have an analytics
12:24 - part on the database request on the
12:26 - authentication storage and stuff so
12:28 - there is also inside the product
12:30 - an analytics part that is very
12:33 - interesting to have an overview every
12:34 - day on your product if it is working or
12:37 - not etc etc
12:39 - if you are using different client
12:40 - libraries you also have guides about it
12:43 - on JavaScript python or flutter of
12:45 - course everything here is really clear
12:49 - to handle and if I go on table editor we
12:52 - can see here that we can create tables
12:54 - that's what we're going to see in the
12:56 - next lesson there is an SQL editor but
12:59 - of course Super Bass know that not
13:02 - everybody knows how to work with SQL so
13:06 - they build a very smart system for me
13:08 - that is a script system that helps you
13:11 - to actually create a script
13:15 - with a starter actually this is the
13:17 - starters that you can use if you want to
13:20 - have a script on show extensions an
13:22 - incremental field value to add a colon
13:26 - of course and there is even a user
13:30 - management starter that is very very
13:32 - useful and that maybe most of you will
13:34 - use because if you don't know postgres
13:36 - and if you don't know how to write SQL
13:39 - you will maybe have some trouble to deal
13:43 - with creating a user management system
13:45 - you can just click on this and there we
13:47 - go it creates for you in the SQL editor
13:50 - all the command to create your table's
13:53 - profile and also it's creating a with
13:57 - the row level security and we are going
13:58 - to come back on this later it's creating
14:01 - all the policies that are locking the
14:05 - access of your database if you want that
14:09 - your tables are not public you can use
14:13 - policies that are there otherwise if you
14:16 - want them to be available for people
14:18 - that are authentified everything has
14:20 - been thought to make your life easier
14:23 - okay
14:24 - also you get the a database here tab
14:28 - when you can access tables triggers
14:31 - function extensions etc etc
14:34 - you get the authentication system that
14:36 - we are going to see also with all the
14:39 - providers and look with Super Bass you
14:41 - can offer to your clients to log in with
14:44 - bitbucket Discord Facebook git lab
14:47 - there's a lot of options there there are
14:50 - also email template things that helps
14:52 - you to deal with somebody is going to
14:54 - sign up or if you are going to invit a
14:57 - user because we can invit people a magic
14:59 - link that helps us to log in without a
15:02 - password that is amazing the change
15:05 - email address the reset password you can
15:07 - go to storage and on storage here it's
15:09 - all about the assets image documents
15:12 - whatever
15:14 - and there is also the edge functions
15:16 - there is the reports because there you
15:19 - can create reports about your back end
15:21 - you got the logs and of course the logs
15:24 - for an API it's really really important
15:27 - and finally you get the API
15:30 - documentation that here it is going to
15:33 - generate for you all the code related to
15:37 - your tables you understood Super Bass is
15:41 - a complete product that is amazing I
15:44 - could talk during hours about it
15:46 - it will help us to bootstrap a product
15:50 - this backend as a service will save us a
15:54 - lot of time
16:00 - Super Bass is working with postgres and
16:03 - with postgres we can create databases
16:05 - those databases are made with tables
16:10 - so we are going to create now a table
16:12 - and I'm going to explain to you
16:14 - everything you have to know about tables
16:17 - so here I can click on table editor here
16:20 - on the left and when I arrive there is
16:22 - no table yet of course because we didn't
16:25 - create any table
16:27 - so we are going to click on create a new
16:29 - table but before if you look on the
16:31 - right on the left sorry
16:33 - we can see that we got a first option
16:36 - which is the schema and if we look at it
16:39 - we see that we have different schema so
16:42 - for now we are going to stay on the
16:43 - schema public and I will come back later
16:45 - to explain to you what are schemas
16:49 - so you can create as much table as you
16:52 - want and all those tables will be
16:55 - displayed here on the left
16:57 - a table what is this well actually a
17:00 - table it's a simple table with rows and
17:03 - columns and they are going to Define
17:05 - some kind of business logic or some kind
17:08 - of data it will Define actually the
17:11 - model of what you want to create
17:14 - so we need to create tables to store our
17:17 - data
17:18 - so I'm going to click on new table and
17:20 - we see here that I got this form that is
17:24 - opening on the right
17:25 - and here I can start to create my new
17:29 - table under the public schema
17:32 - so first I gotta give a name and this
17:35 - name I suggest you to write it in come
17:38 - in a snake case it's really important
17:41 - so what I'm going to do here I'm going
17:43 - to create several tables with several
17:45 - models and the first table that I'm
17:48 - going to create is a table clients okay
17:51 - I want to store clients and on the
17:54 - description I can put a table to store
17:57 - my clients all right
18:01 - so we have
18:04 - that is checked and it's returned
18:07 - recommended
18:08 - so enable raw security we will have a
18:10 - full listen on it
18:11 - it is restricting the access to your
18:14 - table by enabling this mode so basically
18:17 - with the raw level security in your
18:19 - table your database will not be
18:21 - accessible
18:22 - until you will write policies on
18:24 - postgres so we will need later to write
18:27 - policies to make our table accessible
18:30 - so we are going to let that check
18:32 - we are not going to enable real time the
18:36 - enable real-time option is to broadcast
18:37 - the changes on the table and we are
18:39 - going to start right away by creating
18:41 - the model of our clients
18:45 - so we can see here that we've got a
18:47 - little editor and we've got columns with
18:49 - name
18:50 - type default value and primary and also
18:55 - we've got this cross to just remove this
18:59 - element
19:00 - and we've got options here when we click
19:02 - on it we see that we got extra options
19:05 - here this is the the model of your data
19:07 - all right so you got to create columns
19:10 - to define the model of clients
19:13 - also what you can do here we see that we
19:15 - get an option to import the data via
19:17 - spreadsheet
19:19 - all right so let's create the model of
19:21 - our clients
19:22 - there is an ID here and we can see also
19:25 - that it's snake case convention
19:28 - and what I can do is I can change if you
19:31 - want the name and later we'll add new
19:33 - columns here I see that I got a little
19:35 - button when I click on it we see that
19:38 - it's to add a foreign key for ID
19:41 - so we will also look at this later what
19:44 - we want to do is to create the model for
19:46 - now
19:47 - so there is a type and when I click on
19:48 - type we can see that super bass is
19:50 - providing to me all the postgres data
19:52 - type that I can add to my specific row
19:56 - so here it's ID
19:58 - so we can see that I get integers
20:00 - floats numeric
20:02 - Json
20:03 - text uuid that date and timestamps and
20:08 - of course booleans so here I'm going to
20:11 - choose uuid and if I go on the official
20:14 - documentation of postgres on
20:17 - postgresql.org I can find that postgres
20:20 - is providing to me functions
20:23 - that are generating different kind of
20:25 - uuid and here we can find the function
20:29 - that is integrated to superbase the uuid
20:33 - generate V4 that generate a version for
20:35 - uuid which is derived entirely from
20:38 - random numbers
20:41 - so in postgres and by extension in Super
20:44 - Bass
20:45 - with get function that help us to
20:47 - trigger some generations or some actions
20:51 - so here I'm going to click here and it's
20:54 - going to be the primary key so for those
20:56 - who don't know postgres the primary key
20:58 - this is the key that is going to help us
21:00 - to index our element and to find it
21:02 - through the postgres engine
21:06 - all right so our client will get an ID
21:09 - there will be also a created ad which is
21:11 - a timestamp and here we can find again
21:13 - the function now
21:15 - so now it's again a function provided by
21:17 - postgres to give us the current date and
21:20 - time all right
21:22 - however this client will have more than
21:25 - this any I would like to add actually
21:28 - here a new column it will be an email
21:30 - column
21:31 - and I don't get any type email here so
21:34 - what I can put is text okay I want to
21:37 - add a text and there we go
21:40 - however the thing is that I want that on
21:45 - my database client
21:47 - every client here
21:50 - should have an email if there is no
21:52 - email I want to prevent to enter a
21:55 - client I don't want to have to have a
21:57 - client that is generated without an
21:59 - email because I cannot identify him only
22:01 - with the ID I would like to identify him
22:03 - with the email so what I can do is to
22:06 - click here
22:07 - and when I click here we see that
22:09 - I got these extra options open and I got
22:13 - the option is nullable
22:15 - so when I check this I allow that email
22:19 - would be null on insert and that's not
22:22 - what I want so I'm going to remove it
22:25 - and also I want that this email would be
22:28 - unique because on my list of clients I
22:30 - don't want to have different clients
22:32 - with the same email I would like to
22:35 - prevent this I can do it
22:38 - so if I want to add a client without an
22:40 - email I will get an error and if I want
22:43 - to add a client that is already in my
22:45 - list I will have an error also
22:47 - so I'm going to click on this there we
22:49 - go I get an ID I created ad and an email
22:53 - all right
22:54 - so let's say that we are going to stay
22:56 - on this for now I'm going to click on
22:58 - Save I'm going to save the tables client
23:01 - it's going to add the three columns to
23:04 - the clients table and now there we go
23:08 - our table clients is good to go so we
23:12 - are ready to use it and we see that it
23:15 - takes the form actually exactly like a
23:17 - spreadsheet so we got columns
23:20 - and we can insert elements and also what
23:22 - we got here we see that we get a plus if
23:24 - we want to add a new column to our model
23:26 - it's all of course possible
23:28 - congratulations you got your first table
23:30 - clients we've got several options we see
23:33 - that we get refresh which is very useful
23:34 - because we don't want to refresh all the
23:36 - browser we can refresh just the table we
23:39 - can then filter sort the client so let's
23:43 - imagine we will have thousands of
23:45 - clients we can do it right away on Super
23:47 - Bass and this is something that I like
23:50 - we can talk about it for a second
23:53 - this is something that I like a lot with
23:54 - supervisors that it's visual so when you
23:58 - are building a company and one once you
24:00 - have a backend you must have a back
24:03 - office for your company a search as for
24:07 - the marketing department for
24:09 - um the clients everything that is
24:12 - related actually to non-technical
24:14 - departments well with super bay is your
24:17 - marketing department can come here and
24:19 - look at the data when they need
24:21 - something instead of requesting all the
24:24 - time uh actually the backend developer
24:27 - to to have the state of the data so it's
24:30 - very useful you don't have to code it
24:31 - it's right away there what I'm gonna do
24:33 - I'm going to click on insert and here we
24:36 - see that we get two options insert row
24:38 - and insert column so inside column it's
24:40 - exactly the same as this plus there
24:42 - so I'm going to click on insert row and
24:45 - there we go I got a new form and here we
24:47 - see that I can insert a client all right
24:51 - so what I'm going to do I'm going to
24:52 - click on Save right away I'm not going
24:54 - to fulfill anything
24:56 - and what's gonna happen of course is
24:58 - that I'm going to have my first error on
25:01 - Super Bass
25:02 - violates not new constraint remember
25:05 - email
25:07 - of clients
25:09 - cannot be known so I have to enter a
25:12 - value so what I'm going to do I'm going
25:13 - to enter a value so it's going to be
25:15 - called with Geon at gmail.com there we
25:18 - go and on the uuid I don't need to put
25:20 - anything the function is going to
25:22 - generate it for me as well as for the
25:25 - created ad and there we go I got my
25:27 - first entry inside my clients table
25:31 - let's say that I'm going to add a new
25:33 - row and this time it's going to be and
25:36 - Wilson at superbass.com I'm going to
25:39 - save
25:41 - there we go I got another one so as you
25:44 - see I can later consult here my
25:50 - um actually my um my data and changing
25:53 - right away because under this I'm
25:55 - totally super admin so I can change
25:58 - everything
25:59 - and here I forgot to put actually I
26:03 - forgot to put one column so I can click
26:05 - here and add a new colon and this one is
26:08 - going to be is active
26:10 - and the description will be defined
26:13 - if client is active Okay I can add a
26:16 - foreign key relation we're going to do
26:18 - it later another type I'm going to put
26:20 - Boolean
26:21 - all right and it cannot be null and by
26:24 - default is going to be on true
26:27 - what's going to happen here and when I'm
26:28 - going to click on Save
26:30 - is that it's going to add okay the
26:33 - column is active and put the default
26:35 - value to all the members all right good
26:39 - now let's say that I'm going to try to
26:41 - add a new client but with the same email
26:44 - I'm going to click here I'm going to
26:46 - type this and when I click on Save
26:49 - I got another error which is totally
26:51 - legit it violates the unique constraint
26:54 - clearance email key because Andrew is
26:57 - already existing inside my database okay
27:00 - we've got the table clients now let's
27:02 - create a new table and this one is going
27:05 - to be a table orders orders by the
27:08 - clients by clients actually
27:10 - there we go we enable row level security
27:13 - we do exactly the same I'm going to use
27:15 - uuid then I'm going to use the generated
27:18 - ad and here what I'm going to do I want
27:21 - to add a client ID for the future and
27:24 - this one is going to be uuid also
27:27 - and here I'm not going to put the
27:29 - generator because I want to fulfill by
27:32 - an existing client ID
27:34 - so here I'm going to put that it's not
27:37 - nullable because I don't want my orders
27:40 - to have an empty client ID
27:42 - so I'm going to save this
27:44 - ID created that client ID let's say that
27:48 - we're gonna have some kind of price and
27:51 - there what I can put is just let's say a
27:55 - numeric okay for now let's say numeric
27:58 - we allow it to be null for the moment
28:01 - and what I can have also with this as an
28:05 - order is client ID price we can say a
28:09 - lot of other stuff like such address
28:12 - and there here what I can put is
28:15 - actually a text okay here we Define the
28:19 - address because it's supposed to be
28:21 - related to the client but maybe the
28:23 - client will put a different address so
28:24 - if we store the address in the client we
28:27 - will have trouble later we want to
28:28 - relate the address to an order okay
28:31 - so address and let's put the ZIP code
28:34 - okay we've got the zip code and again
28:36 - I'm going to put the text of course I
28:38 - could put varsha the variable length
28:40 - character string but here I'm just going
28:42 - to put this ZIP code and city and I'm
28:45 - going to put this let's say text and
28:48 - there we go so we've got
28:50 - Clay on tidina and we need of course we
28:52 - need the name because if we don't get
28:54 - any name for the order it will be
28:56 - terrible so created that client ID price
29:00 - address ZIP code order there we go so
29:03 - I'm going to click on save so now I'm
29:05 - not using uh any SDK with any app
29:09 - so what I need to do is to take an
29:11 - existing client ID so let's say that I'm
29:15 - going to take mine so here I got an ID a
29:17 - uuid I'm going to save
29:20 - and to create my order I need
29:23 - a uuid so I'm going to insert a row and
29:27 - here I'm going to put as an ID this one
29:29 - there we go then as a price I'm going to
29:32 - put let's say uh yeah 20 there we go the
29:37 - address I'm going to say
29:39 - um one two three uh Super Bass Road
29:42 - there we go as the ZIP code a890 there
29:47 - we go City Super Bass and the name is
29:50 - going to be code with Guillaume and I
29:53 - can put anything I want here
29:55 - I'm going to save and there we go I got
29:58 - my first order with my clients that I
30:01 - can use for now
30:03 - so you see we can create tables really
30:06 - fast we can have as much table I just
30:08 - created those two tables as an example
30:10 - but just imagine that later you will
30:12 - have a lot of tables and we will succeed
30:15 - later to create relations between the
30:18 - tables to actually deal to actually deal
30:21 - with fetching the data at once and not
30:24 - fetching the clients than the order etc
30:27 - etc
30:27 - but we are going to see this after
30:29 - because right now our table is not
30:31 - active because we didn't edit the RLS
30:35 - policies the raw level security policies
30:43 - it's time for us to talk about raw level
30:45 - security the security feature offered by
30:48 - postgres to allow the usage or the
30:51 - access of our database essentially it
30:54 - means that the user has to configure all
30:57 - the access by writing security policies
31:00 - to all the tables that are created to
31:03 - all the rows of our tables for example
31:06 - an administrator can create a policy to
31:09 - allow access to the table to everybody
31:12 - but to restrict actually to write on
31:16 - this table or to delete some elements on
31:19 - the official documentation of postgresql
31:21 - we have more information about raw
31:24 - security policies
31:26 - and I'm not going to read the old
31:28 - article you can find it on
31:31 - postgresql.org
31:32 - however we have some interesting text
31:35 - here that we can read together
31:37 - in addition to the SQL standard
31:39 - privilege system available through Grant
31:42 - tables can have raw security policies
31:45 - that restrict on a per user basis which
31:49 - rows can be returned by normal queries
31:52 - by inserted updated or deleted by data
31:56 - modification commands
31:59 - this feature is also known as row level
32:01 - security by default and this is the case
32:05 - on the table that we created
32:07 - tables do not have any policies so let's
32:11 - get back to our tables there and we can
32:15 - click here on clients for instance and
32:17 - we can click here on orders so right now
32:20 - we've got one holder and of course those
32:23 - orders they could not be fetched by a
32:27 - user that is not authentified and it
32:30 - could not be fetched by somebody else
32:32 - than the user that wants to fetch it so
32:36 - to write my first row level policy what
32:39 - I can do is either to click here on no
32:41 - active errorless policies
32:43 - either going here on authentication and
32:47 - go on policies and here we got the list
32:51 - of the tables and we've got the option
32:54 - concerning rollover security again if
32:57 - you want to have more information you
32:58 - can either click here on the rollover
33:02 - security button that we have here what
33:04 - is your level security and you got more
33:06 - explanation here on the official
33:09 - documentation of Super Bass here we've
33:11 - got the clients we've got the orders
33:13 - okay so let's create a new policy
33:15 - because for now we want to restrict the
33:18 - access so when you click on new policy
33:22 - you can do two things you can use
33:25 - actually the templates provided by Super
33:27 - Bass and this is very useful for the
33:29 - people who don't know anything about SQL
33:31 - or you can click on full customization
33:33 - to create a policy from scratch so I'm
33:36 - going to click on this at first
33:38 - and here we see that we have a form
33:40 - again and we can enter the policy's name
33:43 - we can click here on select insert
33:46 - update delete all to select actually
33:50 - which is the operation that you want to
33:52 - do and you can also Target the roles so
33:55 - we can see here and we discover now that
33:58 - in Super Bass every user can have a role
34:01 - that we can Define okay so here we've
34:03 - got Anon so Anon we understand it's four
34:06 - anybody actually authenticated it will
34:09 - be for people authenticated through the
34:11 - authentication system and after you got
34:14 - other roles etc etc
34:16 - and down there you can provide a SQL
34:18 - condition expression that Returns the
34:21 - Boolean
34:22 - all right so if you know SQL it will be
34:26 - very easy for you to create your policy
34:28 - through here but if you click here on
34:30 - view template okay there you can have
34:34 - four template for now on creating
34:37 - policies
34:38 - so for the actually we are looking right
34:43 - now on the clients and on the template
34:45 - we see that here we've got one template
34:48 - that says enable read access to everyone
34:52 - so here we get the SQL template
34:56 - that gives this policy and it will
34:59 - enable the read access to everyone
35:02 - it says create policy policy name so
35:04 - here you're supposed to have the name of
35:06 - your policy which will be actually
35:07 - enabled in access to everyone
35:10 - on public which is the schema ah
35:12 - actually we are on the schema public and
35:14 - we created uh tables on the schema
35:16 - public
35:17 - dot clients which is the name of the
35:19 - table
35:20 - for select using with the condition true
35:23 - which means that anybody
35:26 - is able to select so to read
35:30 - every element of clients
35:34 - so if you want to do that you click on
35:36 - use this template and you will actually
35:39 - release your table clients to the rid of
35:42 - anybody it's like the unknown condition
35:46 - that's something we don't want to do on
35:48 - the clients
35:49 - then we have enable insert access for
35:52 - authenticated user only so here we've
35:55 - got another SQL query and we can see
35:57 - that this policy gives insert access to
36:00 - your table to all authenticated user
36:03 - only
36:04 - so it would create the policy again on
36:06 - the table clients for insert 2
36:08 - authenticated which is the role okay
36:11 - with check true so we want to use this
36:14 - one so what I'm going to do I'm going to
36:16 - click on use this template and suddenly
36:18 - I'm getting back to the form of the full
36:20 - customization and it's totally fulfilled
36:23 - and we can see here okay we can see that
36:27 - actually what's happening is that it has
36:30 - fulfilled the old form with the insert
36:33 - authenticated role with a condition
36:35 - which is true
36:37 - so I'm going to click on review
36:40 - finally I'm reviewing the policy to be
36:42 - created on publix.clients and there we
36:45 - go I got my policy and if I click on
36:48 - Save policy
36:49 - here we see that I got one policy on
36:52 - client which concerns insert on
36:55 - authenticated
36:57 - so right now
36:59 - you can insert clients only if you are
37:03 - authentified alright we want to do the
37:06 - same with order so what I can do is to
37:08 - click on here on get started and I can
37:10 - do exactly the same because it's a
37:12 - template so now on order it will be only
37:14 - for people authentified
37:17 - okay
37:18 - however this is a problem what I'm doing
37:20 - now because I'm not sure that I want to
37:23 - create
37:25 - directly here like this this way
37:28 - the thing is that I would like to have
37:30 - later a trigger that will create an
37:34 - order automatically
37:36 - for this course I'm just going to click
37:38 - on review and save this policy because I
37:40 - just want to show you the example on how
37:42 - to add a holder directly this way
37:45 - from the front end but normally I
37:47 - wouldn't do this way I would use a
37:49 - trigger to do it there we go so now
37:52 - we've got the clients we've got the
37:54 - order and we've got our two policies and
37:56 - in the future as much tables you will
37:58 - have you will have to write all the time
38:01 - do policies concerning those table and
38:04 - you have to be really careful on that
38:05 - guys because you have to really deal
38:08 - with the fact that sometimes if you do
38:11 - mistakes your tables could be public and
38:14 - you don't want that
38:16 - so let's pretend that now I want to give
38:19 - access to everybody
38:21 - I want to give access to everybody to my
38:24 - clients so if I do it okay
38:27 - now anybody that could connect to the
38:30 - database would have to select
38:34 - publicly all the clients you will be
38:37 - able to read all the clients however
38:39 - this is something that I don't want to
38:41 - have so I want to delete and I'm going
38:44 - to click here and I'm going to click on
38:45 - delete you can of course delete your
38:48 - policies that's really really important
38:52 - so that's good but
38:54 - that I don't want that everybody
38:58 - could read the clients I just want some
39:02 - people to do it so I'm going to click
39:04 - again and of course I didn't told you
39:06 - but of also what you have to do is to
39:09 - deal with the update and the delete
39:11 - access to the elements so here I'm
39:13 - supposed to add clients through an
39:16 - application so I want to update them
39:19 - maybe I will have a button to click and
39:21 - click on modify exactly like I did
39:23 - before
39:24 - so if I click here I should add this
39:26 - condition and we can see that on the odd
39:29 - GW WT sorry
39:31 - I got this condition which is using
39:33 - expression that's so cool that's what I
39:36 - want to do I want to update with only
39:39 - the email actually that is related
39:42 - to the current actually element
39:46 - so we enable the update for users based
39:51 - on email okay I'm going to save this and
39:54 - I'm going to add this policy and of
39:56 - course you can add as much policies as
39:58 - you want
39:59 - I'm going to continue and I want also to
40:02 - delete I want to also delete
40:05 - actually the clients that I can have and
40:09 - here we see that we got something else
40:10 - we got this condition what uid is equal
40:14 - to user underscore ID
40:17 - so I'm going to keep this using this
40:20 - expression there and I'm going to review
40:22 - and save the policy
40:24 - and here I got a problem because I don't
40:28 - get actually the colon user ID on my
40:32 - clients
40:33 - so I'm going to close this I'm going to
40:35 - get back we need to go on the table
40:37 - editor on clients and here as I see I
40:40 - don't get user ID
40:44 - and that is a problem
40:46 - that I didn't solve at first is that
40:50 - many users
40:52 - will have their clients in the client's
40:54 - database but they are not related to a
40:57 - specific user ID
40:59 - so what I can do here is to add actually
41:02 - a colon user ID
41:04 - and this user ID would be actually the
41:08 - owner's ID of the client
41:11 - okay
41:12 - so what I can do there is to say it's
41:15 - going to be a uuid
41:17 - and what is going to be this user ID
41:19 - well I think it's going to be the user
41:22 - ID of the authenticated user so I'm
41:25 - going to save this
41:26 - I don't allow nullable and I don't Hello
41:30 - is unique because I can have several
41:32 - clients I'm going to save that and
41:35 - suddenly I have a problem
41:37 - because I'm supposed to have at least
41:40 - okay I'm supposed to have at least
41:42 - one user ID in the column and we see
41:44 - that right now it's null for a lot of
41:46 - them so for now I'm I'm clicking on
41:49 - allow nullable and it's going to work
41:51 - and there we go but what I should do is
41:55 - to fulfill the right user ID of those
41:58 - two clients which would be mine however
42:01 - I don't have for now so I'm just going
42:02 - to delete those two rows and I'm going
42:05 - to just come back after and when I will
42:09 - add a new client I would need this user
42:11 - ID to change my table I can go on
42:13 - database and on tables I go to clients
42:17 - okay so here I get clients I can click
42:19 - here on five columns and I got my user
42:22 - id there and I'm going to click here and
42:25 - this time I'm going to remove alone
42:27 - nullable because in the future I really
42:28 - want this user ID
42:30 - okay so I got my user ID and now I can
42:34 - come back to write my policy back in the
42:36 - policy I'm going to click here new
42:37 - policy and what I want to do actually is
42:41 - to go here and the access that I had
42:44 - before it's this delete template so I'm
42:47 - going to use it but I'm not going to use
42:49 - it as delete I'm going to use it
42:52 - actually to select
42:54 - enable select for base for user based on
42:59 - user ID
43:00 - and actually here it's going to be
43:02 - automatic authenticated sorry
43:05 - every time I'm going to select clients
43:08 - from the table client
43:10 - it has to be related with my user ID
43:14 - what does it mean it means simply
43:17 - that
43:18 - our table clients will be full of
43:21 - different clients coming from you from
43:23 - me from any anybody
43:26 - but it it's not possible that I can
43:28 - fetch your clients we want that you you
43:33 - can fetch only your clients and me I'm
43:35 - fetching only my clients
43:37 - so what we do we enable the select for
43:40 - for clients so it's not using
43:43 - based on user ID so I'm going to select
43:47 - the clients only on my user ID on
43:50 - authenticated and this odd dot uid
43:54 - function is will come actually from the
43:57 - authenticated session that we will have
43:59 - and then I'm going to click on Save
44:01 - policy and there we go I got everything
44:04 - that I need for clients I should do
44:07 - exactly the same for orders but I think
44:09 - you understood by this a quick exercise
44:12 - that you have to work on Raw level
44:14 - security if you want to secure your
44:17 - database if you want to secure your
44:20 - Super Bass instance and especially on
44:23 - tables where you don't want the public
44:25 - to get access on later we will see that
44:28 - if you get an API you can have a certain
44:31 - role to get all the access to all
44:33 - databases because here in this case we
44:36 - don't want our user to get access and to
44:38 - create orders we would like to have a
44:40 - trigger or an API to do it the rule
44:42 - level security help the administrator to
44:46 - create policies to secure your super
44:49 - base data base
44:55 - it is time for us now to look at
44:58 - authentication with Super Bass
45:00 - right now we've got two tables clients
45:03 - and orders and we've got row level
45:05 - security policies written however later
45:08 - in our application we would like to have
45:10 - some kind of authentication system that
45:13 - allows us to log in or log out from our
45:17 - session well with Super Bass it's
45:19 - totally possible to create an
45:21 - authentication system so when you click
45:23 - here on authentication you arrive on
45:25 - this dashboard and on this table and
45:27 - here we see that we've got a list of
45:29 - user with email phone provider created
45:31 - last signing user ID all right
45:35 - so here our table is totally empty up
45:39 - there we've got reload button and also
45:41 - invit and if I click on invit here
45:44 - I have a pop-up and this pop-up is
45:46 - showing to me an input with a user image
45:49 - so if I'm putting geom88 for instance at
45:52 - jobmail.com and I click on invit user
45:56 - Super Bass will send an email to invite
45:58 - this user to join and while this user
46:01 - will click on the button to join what
46:04 - you will get is just here a status of
46:08 - waiting for verification so as we can
46:10 - see the user here has been created so we
46:14 - don't need actually in Super Bass to
46:16 - create a table user here I mean you
46:18 - could do it for further information
46:20 - about the user and there is a template
46:22 - actually called user management a SQL
46:26 - script template that is creating a
46:28 - profile that a table to put more
46:30 - information but basically at first Super
46:34 - Bass is providing to us this here this
46:37 - list of users so right now we should go
46:40 - on this email and look at what Super
46:43 - Bass sent to us alright I'm on the email
46:46 - and here we can see that I have an
46:49 - invitation and I have a button that is
46:52 - click the invite however it says that I
46:55 - need to actually redirect to a local
46:58 - 3000 to validate my user that's what
47:02 - we're gonna do actually we will use a
47:05 - template A View application
47:08 - two displayed our authentication system
47:12 - so the user will receive this email we
47:14 - click there and it will be redirected to
47:16 - localhost 3000 however when it will be
47:20 - on production we will have to change
47:21 - this URL because right now we would like
47:24 - that this email goes to the production
47:27 - URL not localhost well we can do it here
47:30 - by clicking on URL configuration so you
47:33 - get the sit URL redirection of course
47:36 - but you got here the Ctrl that will be
47:40 - provided directly into the email
47:43 - now Super Bass give us the opportunity
47:45 - to edit the email template on several
47:48 - case
47:49 - and if we click here on in which user we
47:52 - can see that we've got the email
47:54 - template down there
47:56 - we've got several other options however
47:58 - I will come back to this later on
48:00 - another lesson
48:02 - on our application we will give the
48:04 - possibility to login with your email and
48:07 - here on providers we can see that we've
48:09 - got the email provided however we get
48:12 - several other options that allows us to
48:15 - give the possibility to the user to log
48:17 - in with other providers such as Google
48:20 - so when I click on Google we can see
48:22 - here that I have to provide a client ID
48:25 - and a client secret and I can click up
48:27 - there on Google enabled I'm not going to
48:29 - show you how to connect with all those
48:31 - providers but basically you have to go
48:33 - on the documentation of every of them
48:35 - and create an app on the developer site
48:37 - to get the keys related to The
48:39 - Connection by those providers so right
48:41 - now we've got this email that's good now
48:44 - we would like to have a front-end
48:45 - application where we could actually
48:47 - create a connection I have created for
48:50 - you a vgs free application with an
48:54 - authentication system in order to use
48:57 - Super Bass
48:58 - I didn't show you how to code it because
49:00 - on my channel there is already a video
49:03 - to code actually the authentication
49:06 - system from a vgs application to
49:09 - Superbass I also have a video about this
49:12 - with nexgs you can go check it out but
49:15 - for now we are going to work with this
49:16 - application
49:18 - so right now I got a login here form and
49:21 - we can see up there that I if I change
49:25 - the url and I go on any other route I
49:28 - will never move from the main page
49:31 - so find the repository into the
49:35 - description and once you've cloned it
49:38 - you're right in here and so it's a basic
49:40 - vue.gs free application with terrain CSS
49:43 - we have our Super Bass client here that
49:45 - is coming from the Super Bass GS SDK and
49:49 - again if you want more information about
49:52 - Hearth you can go on Super Bass dock on
49:55 - half everything is explained there to
49:58 - work with authentication me I did the
50:01 - whole work just for you so it will be
50:03 - faster video credentials to access to
50:05 - your Super Bass project you can go down
50:07 - there on Project settings you click on
50:09 - API and here you've got your key your
50:13 - actually your secret key and down there
50:16 - you get the service wall that allows you
50:19 - actually to do everything so be safe
50:21 - take this one for the user and the URL
50:23 - is up there so remember if I go on here
50:27 - on the API docs I can go to
50:31 - authentication up there and I have the
50:34 - keys that I need or I have the elements
50:36 - that I need to set up the authentication
50:39 - itself okay but if I click on user
50:42 - management here we can see that we've
50:45 - got data uh super
50:48 - bass.signup and we can use actually we
50:52 - can use those elements to login
50:56 - so we can see also which is cool is that
50:59 - we can log in with magic link via email
51:01 - this is exactly what we did before we
51:04 - send an email and there is a magic link
51:06 - we don't need any password and we can
51:08 - log in just by email so what I did here
51:11 - is just to bind my values email and
51:15 - password to a model
51:17 - and I have a function login and it's
51:20 - really simple actually I'm calling Super
51:22 - Bass dot hearth.signup Super Bass it's
51:25 - the client that I have initiated here
51:28 - I'm cutting it directly from the SDK I'm
51:32 - calling dsdk with the function signup
51:34 - coming from the documentation with email
51:37 - and password so I put login here but
51:40 - actually it's sign up okay so I'm going
51:42 - to take sign up instead of login there
51:45 - we go I'm going to save get back I'm
51:47 - going to update and I'm going to click
51:49 - on sign in and for now nothing is
51:52 - happening however I'm going to get back
51:54 - to Earth and I'm going to reload up
51:56 - there and when I click on reload there
51:59 - we go I got my user there before going
52:03 - on the email I'm going to open my
52:05 - console and up there I'm going to click
52:08 - on confirm your email once I click I'm
52:11 - redirected directly to my application on
52:14 - localhost 3000
52:16 - and I got here the user so we can see we
52:19 - got the access token we got the refresh
52:21 - token the token type and we've got down
52:24 - there the full user and I'm going to
52:26 - reload and we can see that now my user
52:30 - is not waiting for any verification
52:34 - so what we did in this lesson well it's
52:37 - basically really simple to understand
52:40 - we have a front-end application where we
52:44 - installed super bass and we are using
52:47 - this SDK of Super Bass and we initiated
52:51 - our client we are credentials okay
52:54 - and what we did is just to set
52:59 - our main file
53:01 - the authenticated system that says that
53:04 - if there is no user
53:05 - we just show login if there is a user we
53:09 - show all the other pages and oh do we
53:12 - check this user by using the on odd
53:14 - State change from coming from Super Bass
53:17 - SDK that returns a session to us
53:20 - immediately so we don't need to set up
53:23 - any token we don't need to do any art
53:26 - with a GWT token because everything is
53:29 - already done with the Super Bass SDK so
53:33 - we actually win a lot of time we save a
53:36 - lot of time by using this SDK we don't
53:40 - need to work on the authentication
53:41 - system
53:42 - Superbass is dealing with it and it is
53:45 - recording for us automatically our users
53:54 - on the example with the authentication I
53:57 - just show you to sign up of course you
54:00 - would have to create a second form which
54:02 - will be about login because if we look
54:05 - at the documentation and here on the
54:07 - user management side of the
54:10 - documentation on API docs on the left
54:12 - we can see that we've got a user signup
54:15 - method that we used but also we got down
54:18 - there a user login so of course you
54:21 - would have to use a second form I didn't
54:23 - do it in a template but you can do it
54:26 - which is really cool with Super Bass is
54:28 - that the user management is super easy
54:31 - you have several ways to sign up or log
54:35 - in your users
54:37 - and basically we've got here a quick
54:39 - explanation
54:40 - super bass makes it easy to manage your
54:42 - user Super Bass assigns each user a
54:46 - unique ID you can reference this ID
54:48 - anywhere in your database
54:50 - this is why we created before on the
54:53 - tables listen
54:54 - a colon with user ID because when we
54:58 - will log in as a user we will get our ID
55:00 - and we will store it into our context
55:03 - into our session and we will be able
55:06 - actually to use this user ID to fetch
55:08 - data from the tables
55:10 - so here we've got the user ID that is
55:13 - available okay
55:15 - so what we can do we can sign up we
55:17 - already saw it before we can log in with
55:21 - email and password
55:22 - we can login with magic link via email
55:26 - so this is really the my favorite
55:28 - feature of Super Bass is that you don't
55:31 - need to worry about storing crypted
55:34 - passwords or stuff like this which is a
55:37 - very bad practice in my opinion
55:40 - but what you can do here with Super Bass
55:42 - is just to log in via email and it's
55:45 - really easy so how does it work because
55:47 - I got this question all the time well
55:50 - actually you send a user a passwordless
55:53 - link which they can use to redeem an
55:55 - access token after they have clicked on
55:58 - the link all interaction using Super
56:00 - Bass GS client will be performed as that
56:02 - user and which is cool is that you don't
56:04 - need to code your own system to store
56:07 - your access token inside the cookie or
56:10 - in local storage or whatever you don't
56:13 - need to do it the SDK is going to do it
56:15 - for you which is really really easy to
56:16 - handle
56:17 - and at the same time it's really
56:19 - Pleasant because with the on odd State
56:21 - change method that we are going to see
56:23 - just after again
56:25 - it's going to work by itself you don't
56:28 - need to do anything you do not need to
56:30 - write extra code like all the time which
56:32 - is boring and you save a lot of time
56:35 - you can also sign up with phone and
56:38 - that's a cool feature you can log in Via
56:41 - SMS you can verify an SMS
56:44 - and down there you get also other option
56:48 - to get the user to actually to get a
56:51 - forgotten password email that we are
56:53 - going to see after
56:54 - update your own user here however to get
56:58 - more information about the user you
57:00 - would not store them here but in a table
57:04 - um in a third table like a profile table
57:05 - for instance and you've got of course
57:08 - the log out there so if I get back to my
57:11 - application
57:13 - and if I update okay what we can see is
57:18 - that
57:19 - actually every time I'm logged in my on
57:23 - odd stage change function is sending me
57:26 - to the main uh actually to the main page
57:30 - so what we would like to do is to sign
57:32 - out so you can use all those functions
57:34 - to create your own system you can either
57:38 - propose the option to for the user to
57:40 - invit other users down there me what I
57:43 - want to do I want to log out so I got
57:44 - this Adder up there
57:46 - and what I'm going to do I'm going to
57:48 - just
57:49 - create this quick function call logout
57:52 - so it's going to be actually it's going
57:54 - to be sign out which will be an
57:56 - asynchronous function
57:57 - and it will be trigger on click on this
58:01 - button sign out so here I get sign out
58:03 - there we go so I got my Super Bass
58:06 - instance which is there so I'm going to
58:07 - import so Super Bass from actually here
58:11 - at Super Bass there we go and what I
58:14 - just need to do is to go here and to
58:17 - copy paste this piece of code so I'm
58:19 - going to move this this way there we go
58:21 - I'm just going to copy paste this so I'm
58:24 - going to put here my sign out I'm not
58:28 - going to handle anything it's just to
58:30 - show you I finally implemented the
58:33 - authentication system that I wanted I
58:36 - have the login form and I got the sign
58:39 - up form
58:40 - so right now I'm an existing user so I'm
58:43 - going to click on login and what's
58:46 - happening there is that I arrive on my
58:49 - application and I'm logged in now I'm
58:52 - going to click on sign out up there and
58:55 - when I click on sign out there we go I'm
58:58 - logged out so I can try to go on any
59:01 - page I want it's not going to work you
59:04 - can find this template in the
59:06 - description we see that with Super Bass
59:08 - we've got a very easy user management
59:11 - system that help us to implement the
59:14 - authentication that we want
59:20 - a very common case is to forgot your
59:23 - password
59:24 - and Super Bass as a method to help you
59:27 - to recover your password
59:29 - on the official documentation we've got
59:31 - forgotten password email here and we can
59:35 - see that we have this method reset
59:38 - password for email
59:39 - we only need the email of your user to
59:42 - recover the password however how does it
59:45 - work well it's really easy
59:47 - you have first to get a recover page so
59:51 - here on my application on The View
59:53 - application that you can find in the
59:55 - comments down below
59:57 - you have here a recover page and on this
60:00 - recover page which looks like this
60:03 - you've got an email to enter and a send
60:06 - method I'm using this method here reset
60:09 - password for email and it's going to
60:11 - trigger uh actually an email that is
60:14 - going to be sent from Super Bass to the
60:18 - current email okay
60:20 - then once logged in you should direct
60:23 - the user to a new password form
60:26 - so basically from here when I'm going to
60:29 - enter my email and we can look a little
60:32 - bit at the code what I did here I just
60:35 - looked at the validate email method that
60:37 - we've got so if you go on the composable
60:39 - we've got this method that help us to
60:42 - check first if it's an email or not so
60:45 - if we get here and then we click we see
60:48 - that we've got an arrow if we don't
60:49 - enter a basic email also if we try to
60:52 - trigger it with something else it's not
60:54 - going to work here it's going to work so
60:56 - I'm not going to trigger it
60:58 - it's going to call reset password for
61:01 - email from the model that we've got down
61:03 - here
61:05 - so we will receive receive an email that
61:07 - help us to recover the password however
61:11 - this is not the end of the process
61:12 - actually before you should create
61:15 - another route and this route is supposed
61:17 - to be an update Route so basically here
61:21 - we've got this view which tell us to
61:24 - update our user and it said here you
61:28 - should use a update user view below to
61:31 - save the new password and down there
61:33 - we've got this solution
61:35 - we've got this update user method this
61:38 - update user method should be in another
61:40 - view then you'll recover View so I'm
61:44 - just created under the profile folder an
61:46 - update view which does exactly the same
61:49 - as the recover except that we call the
61:52 - update user method and we pass the email
61:55 - and a new password
61:57 - all right so basically it does almost
62:00 - the same but here this is the view that
62:03 - will be actually in the link of the
62:06 - email
62:07 - so we need to change the link of our
62:10 - email so what I'm going to do I'm going
62:12 - to go on email templates here and I'm
62:16 - going to go on reset password because
62:18 - this is where I want to lead and
62:21 - remember me I got a specific pass
62:24 - and on my application the specific pass
62:26 - is profile slash update if I go on my
62:30 - router here my update profile so my
62:33 - update user is on the pass profile
62:36 - update
62:37 - so remember the confirmation URL and I
62:40 - will make another listen just after on
62:42 - this here leads to localhost 3000 but me
62:46 - I want to go on localhost 3000 slash
62:48 - profile slash update
62:50 - so what I need to do is to put here on
62:53 - my reset password slash profile slash
62:55 - update because the link
62:57 - on my email has to go to this pass later
63:01 - we will change the confirmation URL for
63:04 - the projection URL
63:06 - so what I can do here is to use the
63:09 - email of the current user
63:12 - or if I want I can click here and click
63:14 - on send password recovery so I'm just
63:17 - going to copy paste this and I'm going
63:18 - to use my app of course because I
63:20 - created it for the for this
63:22 - so I get back here I'm going to put this
63:24 - and when I click loading
63:27 - successfully reset password
63:29 - so I'm going to go on my email I'm going
63:32 - to update
63:33 - and I just received an email and I got a
63:35 - click here and when I'm going to click
63:37 - here we are going to look at the pass I
63:39 - just open my URL and as you can see I've
63:42 - been redirected immediately up there so
63:45 - what I need to do here is to type the
63:47 - same email as I had so I had this one
63:50 - okay yup made.com
63:52 - and under here I'm going to put my new
63:55 - password okay I'm going to click on
63:56 - update and there we go I am successfully
64:00 - updated in short I have a recover page
64:04 - with the method reset password email I
64:08 - enter my email I click on send it's
64:10 - going to send me an email but before I
64:14 - need to go on reset password on the
64:15 - authentication email template Tab and
64:18 - put the link where I want to lead my
64:22 - reset password link to once it's done I
64:25 - receive an email I click on reset
64:27 - password on reset password I arrive on
64:31 - the page to update my password I can
64:33 - click and save my new password
64:41 - on every applications it's always the
64:44 - same when we had users we want to send
64:47 - an email to say hi welcome or when they
64:50 - subscribe we want to confirm their sign
64:53 - up another case when we recover the
64:56 - password we want to send an email to
64:58 - recover the password and lead to the
65:01 - front-end application
65:03 - with Super Bass we can do that inside
65:06 - our dashboard and we've got the options
65:09 - just here so right now I'm on the
65:12 - authentication tab where I can deal with
65:15 - all the users that are recorded inside
65:18 - my Super Bass application
65:22 - I can also invit some user if I want
65:25 - with their email but what I want to deal
65:28 - with is this email templates
65:30 - and which is really cool
65:33 - with Super Bass it's that here we've got
65:36 - access to the template of five different
65:39 - email cases and we can insert our own
65:43 - HTML with here we've got our variable
65:46 - that we can use and of course some very
65:48 - often we need the confirmation URL we've
65:51 - got a pre-written template and that's
65:55 - really cool because Super Bass here for
65:57 - instance on confirm sign up
66:00 - is going to send automatically this
66:03 - email to the person who is going to
66:06 - subscribe to the application another
66:09 - case if we Envy the user we've got some
66:12 - text already written here with the
66:14 - confirmation URL
66:16 - for the magic Link login it's the same
66:20 - for the change email address exactly the
66:23 - same and for the reset password also
66:27 - so what I propose you to do is to try to
66:30 - stillies a little bit the confirm signup
66:34 - email the invit user and we will see how
66:37 - it looks like to actually display a nice
66:41 - email to send to our users
66:44 - as a mailbox I'm going to use yuckmail
66:47 - it's a fake mailbox that helped me to
66:49 - catch some emails these emails actually
66:52 - are deleted every day every 24 hours so
66:56 - this fake mailbox will help me to
66:59 - subscribe to a fake user
67:01 - so on the confirm sign up here we can
67:04 - see that I have a template with a
67:07 - variable confirmation URL and we've got
67:10 - some help here about the variables that
67:12 - you want to grab maybe sometimes you
67:14 - will need a token the token Ash the city
67:17 - URL so the URL of your seat or maybe why
67:21 - not the user's email okay so me I
67:25 - grabbed a quick template of the email
67:28 - that I'm going to send as a confirm sign
67:31 - up and I'm going to go down down there
67:33 - in the editor
67:34 - and that's really cool to get this
67:36 - editor I'm going to copy paste this and
67:38 - there we go so what I need to grab is
67:41 - this confirmation URL just here
67:45 - so I need to confirm the sign up okay so
67:49 - what I'm going to do I'm going to change
67:51 - it with here there we go so I got my
67:53 - confirmation URL here and I'm going to
67:56 - remove this and there we go so now when
68:00 - a user is going to subscribe
68:03 - okay it will receive this confirm sign
68:06 - up all right but right now I don't want
68:08 - to use the application so I'm going to
68:10 - use exactly the same here but for the
68:14 - invit because with here with my users
68:16 - table I will be able to invit myself
68:20 - through fake menu it will be faster so
68:22 - I'm going to get back to templates here
68:24 - and I'm going to go to invit user and
68:28 - I'm going to copy paste the exact code
68:30 - so I'm going to change
68:33 - and I'm going to put you have been
68:37 - invited exactly like up there thank you
68:40 - to confirm
68:43 - okay I'm going to change this text a
68:44 - little bit because I have to be clear on
68:47 - what is this invitation
68:49 - you have been invited to create an
68:51 - account so I'm going to change this an
68:53 - account and an account on and here I can
68:58 - put the URL
68:59 - so actually I'm going just to grab the
69:01 - same text and be safe of course about
69:04 - the text so here is not confirm your
69:06 - sign up
69:07 - but here it's going to be this there we
69:09 - go and on my button I'm going to get on
69:13 - the button text it's not going to be
69:15 - confirm sign up so sorry about that I'm
69:18 - going to put it like this there we go
69:20 - I'm going to say create an account there
69:25 - we go and after on the text is best
69:27 - regard if you do not initiate this sign
69:29 - up please disregard this email I can
69:31 - remove it okay there we go so I got my
69:34 - email there and I can remove the
69:37 - previous template because I want to have
69:39 - only one template so as you see you just
69:42 - have to write some HTML here and to
69:45 - insert your configuration URL variable
69:48 - and what I did me I put some CSS because
69:52 - I want to have something nice
69:55 - okay
69:56 - um you have been invited to and here I
69:59 - can put code with Geon okay there we go
70:01 - so I'm going to get down I'm going to
70:04 - click on Save okay all right
70:06 - successfully updated so I'm going to get
70:08 - back to users and I'm going to invite a
70:10 - fake mail address so it's going to be
70:12 - fake emails super bass at Yahoo mail.com
70:16 - so I'm going to save this fakey made
70:19 - super bass at yapmade.com there we go
70:21 - and here we see waiting for verification
70:25 - so I'm going to go on my email I'm going
70:27 - to put my fake email at this fake email
70:30 - superbase at shopmail.com I'm going to
70:33 - click on this and there we go I got my
70:37 - email with the design you have been
70:40 - invited you have been invited to create
70:43 - an account on blah blah blah so
70:45 - localhost 3000 of course this is wrong
70:47 - we should later change the url of course
70:51 - create an account best regards okay so
70:54 - basically if I click here what's going
70:55 - to happen
70:57 - and there we go it worked my fake email
70:59 - super bass at Yahoo mail.com has been
71:02 - recorded as a user
71:06 - I'm going to get back to my template so
71:08 - what we did is just the invite user but
71:11 - we could do the same for the magic link
71:12 - for the change email address for the
71:14 - reset password the confirm sign up and
71:17 - there we go if you are looking for email
71:19 - templates you can either ask Chad GPT to
71:21 - write one for you in HTML and CSS or you
71:25 - can browse online and find the design
71:26 - that you want
71:32 - when a user is signing up to your
71:34 - front-end application or if he envites a
71:37 - user to join it for instance
71:39 - well there is a redirection that is
71:42 - triggered from the button in the email
71:45 - and actually you have to deal with the
71:48 - URL confirmation this variable that we
71:51 - can find in the email template
71:54 - we saw previously that we can inject
71:56 - this variable inside the email templates
72:00 - of different cases
72:03 - however this URL has to be changed once
72:06 - you are in production
72:08 - because for now what we've got
72:11 - we've got this site URL here which is my
72:14 - localhost 3000 and you understood that
72:17 - in production localhost 3000 does not
72:19 - exist you need a website
72:23 - so configure the URL of your site this
72:26 - is used for password reset email and
72:28 - other links
72:29 - well this URL configuration side is very
72:33 - important for super Basin especially for
72:35 - you when you are going to deliver your
72:38 - application for the clients in
72:41 - production
72:42 - so what you need to do is when you
72:46 - deliver your application and you want to
72:48 - redirect immediately from the web
72:50 - you have to change this website URL so I
72:54 - give you an example for instance me I
72:56 - will have a website one day very soon
72:58 - call codewydion.com and I'm gonna use
73:01 - this instance of Super Bass to trigger
73:05 - this redirection on password reset or on
73:09 - confirmation signup I will have to
73:12 - change this website URL to change
73:15 - actually the variable inside the email
73:18 - template down here
73:20 - all right that is the first case of the
73:23 - URL configuration
73:25 - another case is the redirect urls
73:28 - well sometimes you need to redirect
73:32 - some URLs on post authentication for
73:35 - instance as we see down there so
73:37 - basically you can click here and add a
73:40 - domain to redirect on authentication
73:42 - services so this concern the redirect
73:45 - URLs pattern however for most of you
73:48 - here you would need just to change the
73:51 - site URL to the production URL
73:58 - it is time for us to look at the core
74:01 - feature of Super Bass which is actually
74:03 - to read insert delete or update elements
74:07 - inside our table okay so right now on
74:11 - I'm on my Super Bass instance and I
74:14 - currently have one table called holders
74:16 - and holders is composed by an idea
74:18 - created at client ID price address ZIP
74:22 - code city
74:24 - etc
74:24 - etc
74:25 - so what I would like to have is a set of
74:29 - fake holders to start
74:31 - so what I'm gonna do I'm going to go to
74:33 - my SQL editor and I already prepared a
74:37 - fake script to insert fake orders inside
74:40 - my table we will insert all these fake
74:43 - orders inside the table orders and later
74:46 - what we're gonna do we are going to use
74:48 - the SDK of Super Bass to fetch all those
74:52 - orders here and what we will do also is
74:55 - to do some operations on on them so we
74:58 - are going to read them for sure then we
75:01 - will try to insert a new order then we
75:04 - will delete some orders so let's go on
75:07 - my SQL editor right now I have created a
75:11 - new query and I'm going to rename it
75:12 - it's going to be insert 10 20 sorry fake
75:17 - holders okay so I'm going to rename the
75:19 - query this way and there we go and here
75:22 - I'm just going to copy paste a list of
75:25 - fake orders that I have created based on
75:28 - my model so my table orders is composed
75:31 - by colon address column zip code city
75:34 - name ID client ID and Creator and there
75:38 - we go success no rule returns it means
75:41 - that my query didn't fail and it worked
75:44 - I'm supposed to get right now all the
75:46 - orders in my table orders I'm going to
75:49 - go to it and there we go I got fake
75:52 - orders we are missing the price for now
75:54 - sorry it's a mistake but we will be able
75:57 - maybe later to change it now now I got
76:00 - all those fake holders what I'm gonna do
76:02 - and remember on my view GS app right now
76:04 - I got the SDK installed and I have my
76:07 - session I'm logged in so what I'm gonna
76:10 - do first I'm going to check on my
76:13 - database and we never know I'm going to
76:16 - check on my database if I got the row
76:18 - level security okay so I got enabled row
76:21 - level security okay and what about the
76:24 - policies of it so I'm going to get back
76:26 - to the table orders here I'm going to
76:28 - click up there and we see that I got one
76:30 - active role never security so we can see
76:33 - that we enable the insert for
76:35 - authenticated user only however I want
76:38 - to grab them click on new policy I'm
76:41 - going to click on get started and here
76:44 - we are so enable read access to everyone
76:46 - it's not exactly what I want what I want
76:48 - is to select only if you are
76:51 - authenticated later we will work maybe
76:53 - on adding a colon with the user ID to
76:55 - know who created the current order and
76:58 - to manage only the current user to grab
77:02 - his orders not the orders of somebody
77:04 - else so I'm going to click on review I'm
77:07 - going to click on Save policy so to
77:09 - authenticated only role and I'm going to
77:12 - save that and there we go so now we see
77:14 - that we can select the orders for
77:17 - authenticated all right so now what I'm
77:20 - going to do I'm going to click on API
77:21 - docs down there and here what we've got
77:24 - is that here every time we are going to
77:27 - create a new table we will have all the
77:30 - code generated by the SDK for my tables
77:33 - so here I got clients of course but here
77:36 - I got orders also so I'm interested in
77:39 - holders and here we see that we got some
77:41 - code that we can copy paste directly
77:45 - inside our application to get our orders
77:50 - okay so here I'm not interested on
77:53 - getting only one key what I would like
77:56 - to have is to have all the orders okay
77:59 - so let's say that I'm going to grab this
78:01 - I'm going to copy this there we go again
78:04 - if I would be logged in as a user to
78:06 - grab my orders what I would do as a
78:09 - super admin I would tell in the policies
78:11 - to be able to grab only my orders okay
78:14 - back in my application what I can do is
78:17 - to import Super Bass okay coming from
78:20 - Super Bass there we go okay so it's my
78:23 - Super Bass instance which is here with
78:25 - my create client and what I'm going to
78:27 - do at first is to create a function okay
78:30 - so it's going to be fetch orders which
78:32 - will be of course an asynchronous
78:34 - function in here I'm going to create a
78:37 - try catch function and inside I'm going
78:40 - to catch the arrow so I'm going to
78:43 - console log my arrow and if there is
78:46 - orders I want to console log them so I'm
78:49 - going to console log my orders there we
78:51 - go what I'm going to do here I'm on vgs
78:54 - but it's going to work also on react
78:56 - next zverdevel kit whatever I'm going to
78:59 - launch this function here and let's go
79:03 - so here it's not an asynchronous
79:04 - component or whatever we don't care for
79:07 - the moment we just want to look at our
79:09 - orders and look at this there we go I
79:12 - got all the fake orders I had before
79:15 - without the price and as we see here
79:18 - we've got all the data we asked so as
79:22 - you see here just this piece of code and
79:25 - using the SDK of Super Bass is helping
79:28 - me to grab actually a table and to
79:33 - select by using select here from holders
79:35 - to grab all the orders that I wanted
79:38 - okay so let's say now I want to grab
79:41 - only for instance I want to grab only
79:44 - the name okay and the ID instead of
79:47 - putting the store I'm going to put the
79:50 - ID and let's say that I would like to
79:52 - have the name okay
79:54 - so let's get back let's uh let's look at
79:57 - it and look at this we are selecting
80:00 - only the ID and the name which is really
80:03 - really cool because sometimes we don't
80:05 - want to grab all the data we would like
80:07 - to be fast and just to have some
80:10 - elements of the orders so here I'm just
80:12 - selecting the ID or the name for the
80:15 - foreign table I will do another video
80:17 - about it to explain deeper how we can
80:20 - grab some data from another table based
80:24 - on a specific column okay so also what I
80:27 - can do which is really cool is that I
80:30 - can work with the pagination with range
80:32 - so here I'm just going to grab this and
80:35 - I'm going to get back and instead of
80:37 - having the ID and the name I'm going to
80:39 - grab all the orders I'm going to take
80:41 - range here which is a value that I could
80:44 - change for instance with here pagination
80:47 - and because I'm on ugs I'm going to put
80:49 - ref here okay so I would need to import
80:53 - ref from view in my case there we go so
80:57 - here I got pagination let's say I'm
80:59 - going to put pagination here so
81:01 - pagination dot value there we go and
81:04 - when I get back and I update what's
81:07 - going to happen is that I got from 0 to
81:10 - 9. imagine later I want to do an
81:12 - infinite scroll on all the orders what I
81:14 - would do is that at first I would grab
81:17 - the 10 orders I would scroll down and
81:20 - what I would do is to store those orders
81:23 - into an array and then with the
81:25 - pagination I would just increase this
81:28 - number to fetch the new orders coming
81:32 - from 10 to 19 for example what about
81:37 - filtering so here you get a lot of
81:39 - examples on how to filter okay on how to
81:43 - filter your orders
81:45 - so let's say that right now let's look
81:48 - at it
81:49 - and here I got Michael Michael Johnson
81:52 - okay so let's say that I'm going to grab
81:54 - this name Michael Johnson here okay and
81:57 - let's say that I would like to have the
81:59 - order uh of Michael Johnson so right now
82:02 - I only get one but what I would do is
82:05 - coming back here and using a point equal
82:09 - so I'm going to go here and here the
82:12 - colon will be name because on holders I
82:14 - got a column name and let's say that I'm
82:16 - going to put Michael Johnson as a result
82:19 - I would like to have only the orders of
82:22 - Michael Johnson for any reason so I'm
82:24 - gonna get back here I'm going to update
82:26 - and look at this I got the order of
82:30 - Michael Johnson so I used dot equal to
82:34 - do it all right I could use also greater
82:38 - than so greater than would be for
82:40 - instance if I would have a number
82:41 - because right now I don't get any price
82:43 - in my in my order what I would do is
82:46 - actually to put the current price
82:48 - greater than and I would put the number
82:50 - and there's a lot of other option less
82:53 - than greater than or equal to less than
82:56 - or equal to case sensitive so here it
83:00 - would be very nice to try another
83:02 - comparator would be is here we could see
83:05 - that we want to match the columns in
83:06 - order that will be none
83:08 - so actually I would have all of them
83:11 - because right now it's a problem you
83:12 - could use in to do some comparison on a
83:15 - colon with another with array values so
83:18 - here you would put an array and here you
83:19 - would do some comparison etc etc so you
83:22 - can find this in API docs filtering here
83:25 - and you get a lot of options to deal
83:28 - with uh some filtering on some columns
83:31 - all right I got a button here insert
83:34 - fake holder I'm not going to put a full
83:37 - form you can do it it's really easy and
83:39 - when I'm going to click on it I'm going
83:41 - to insert a new order so I'm going to
83:43 - pass to 20 records down there okay so
83:47 - I'm going to insert a new order so what
83:50 - I need to do here is to grab the
83:53 - function to insert a new order so I'm
83:56 - going to get back here and instead of
84:00 - having all of this I'm going to use
84:02 - exactly the same so here I'm going to
84:05 - copy paste this function here and I'm
84:08 - I'm going to not trigger fetch holder
84:11 - here but to trigger it on my button so
84:13 - down there I'm going to type on click
84:17 - insert order so right now I don't get
84:19 - this function what I need to do is to
84:21 - create this function so let's change it
84:23 - up there insert order okay so when I'm
84:25 - going to click on insert although it's
84:27 - going to insert another however what I
84:29 - need to do is to write this function so
84:32 - I'm going to get back here I'm going to
84:34 - insert this one and here I got to insert
84:37 - actually a fake order so I'm not obliged
84:40 - to put an array here it here they put an
84:43 - array because maybe sometimes you would
84:45 - like to insert several elements but I'm
84:47 - just going to put my order here so let
84:50 - me write a fake holder based actually on
84:54 - the model of my database all right so I
84:57 - created a new order but this time there
85:00 - is no idea no created at why it's really
85:04 - simple to understand remember our table
85:06 - order
85:08 - actually generate the ID and generate at
85:11 - the same time do creator that okay so I
85:15 - can't push any ID that I would invent by
85:18 - myself here because it will not match to
85:20 - what we created on the table orders
85:23 - so I got this order with address ZIP
85:26 - code etc etc I can't even put a price so
85:28 - I'm going to put 12 for instance
85:31 - and when I'm gonna click on this insert
85:33 - order it will push this into my database
85:37 - so what I want to do I want to say if
85:40 - there is data
85:42 - I want to console log the data okay so
85:46 - let's look at what is going to give to
85:48 - do this
85:49 - Michael is passed with a 201 there we go
85:53 - and if I get back to my orders there we
85:56 - go we've got 20 records so it means that
85:58 - somewhere here and at the end of course
86:01 - I got my order with the 12 into the
86:05 - price
86:06 - and it's about Emily Williams so I'm
86:10 - going to show it here there we go so now
86:13 - let's grab again the orders of Emily
86:16 - Williams
86:17 - so I'm creating a new function called
86:19 - Fetch orders from emini Williams I'm
86:21 - going to get down this way so I'm going
86:23 - just to show it this way and instead of
86:27 - having this insert that we have here I'm
86:30 - going to put select all the orders
86:35 - and I'm going to use the client ID
86:37 - because here I can just
86:40 - identify Emily Williams with it with our
86:44 - client ID so I'm going to grab this one
86:46 - here I'm going to console log this and
86:49 - there we go so here it's going to be
86:51 - holders and I'm going to console log the
86:54 - holders and I'm going to fetch the
86:56 - orders from Emily Williams
86:59 - back in my application I update and look
87:02 - at this I got the two orders of Emily
87:06 - Williams once with 12 as a price and
87:09 - once with null another thing that I
87:12 - could do is instead of using this I
87:15 - could use the name so now I'm going to
87:17 - grab the name of Evian Emily Williams
87:19 - there we go and here I'm going to put
87:21 - name and when I get back I got the same
87:24 - results I got the order of Emily
87:27 - Williams you have to be always clear
87:30 - about what you want to fetch either it's
87:32 - going to be the name either is going to
87:34 - be the client ID all right
87:37 - be safe because sometimes you may have
87:39 - some error if you don't match the right
87:41 - client ID or the name okay so right now
87:43 - I got the two MINI Williams matching
87:45 - with the same client ID but in the two
87:47 - case I'm supposed to have two orders if
87:49 - you would have three and two in one it
87:51 - would mean that either the client ID
87:54 - would be false either your name would be
87:56 - false also okay so this time we want to
87:59 - update an order of
88:02 - um Emily Williams and if I look at my
88:04 - list down there we see that here Emily
88:08 - Williams has a price null on a specific
88:10 - element ID which is this one so what I'm
88:13 - gonna do I'm going to use a function and
88:17 - here it's not going to be insert in
88:18 - order this function will be actually
88:22 - um const update
88:25 - um Emily Williams order okay so this is
88:29 - a very bad practice that I'm showing
88:31 - here to you but it's just into the
88:33 - context so I'm going to do always the
88:35 - same so it's going to be a try catch and
88:37 - here it's not going to be insert order
88:39 - but it's going to be updated with
88:41 - Williams order so I'm going to get back
88:43 - down there update Emily Williams order
88:48 - okay for this example I'm going to get
88:51 - back to the documentation and I'm going
88:53 - to grab this code which is update here
88:56 - okay what I want to do here is to Target
88:58 - a specific order so here I'm going to
89:01 - type here that I'm looking for a holder
89:04 - with a specific ID and remember it's
89:08 - this specific ID down there with the
89:10 - price turn so I'm going to grab this ID
89:12 - and I'm going to put it here and what I
89:15 - want to update is the price and let's
89:17 - say that here I'm going to put a 200
89:20 - okay so I'm going to console log the
89:22 - arrow if I get an arrow and I'm going to
89:24 - console log the data if there is data
89:27 - like always so console log data there we
89:30 - go so I'm going to update the order of
89:34 - Emily Williams with this ID and change
89:37 - its price but the thing here is that I
89:40 - didn't add on row level security Depot
89:43 - the policy to update my orders so I'm
89:47 - going to click here on get started and
89:50 - I'm going to put here for update using
89:54 - auth.gwt all right let's try again if I
89:57 - click on update Emily's holder there's
89:59 - nothing happening but if I update my
90:01 - table and I look at the price there we
90:04 - go it worked we've got the price at 200
90:07 - down there and if I'm checking to my
90:10 - orders there we go I got 200 here on the
90:14 - price of my table
90:18 - okay now let's delete this order really
90:22 - easy to do like always we go here and
90:25 - we've got a delete row delete matching
90:27 - row we're gonna grab this and I'm going
90:29 - to do exactly the same all right I got a
90:31 - function called delete Emily William
90:33 - order
90:34 - inside I got the equivalent to the ID of
90:38 - the order that I want to delete I got
90:40 - delete here and when I'm gonna click
90:42 - down there I will trigger the function
90:44 - but before I need to add a new row level
90:47 - security though so I'm going to click
90:49 - here and I'm going to go down and what
90:52 - I'm going to do I'm going to use this
90:54 - template on authenticated again and
90:57 - actually Auto uid will be
91:00 - related to client ID so that's a good
91:03 - example remember I got a client ID here
91:06 - so let's say that we would like that
91:08 - only Emily Williams will be able to
91:10 - delete her own order
91:12 - we'd have to match actually this client
91:16 - ID with the current session I am in
91:18 - right now it's not the case so what I'm
91:21 - gonna do I'm just going to put true for
91:24 - the example but don't do it all right I
91:26 - got my rollover security so now I'm
91:29 - getting back I'm updating I'm going to
91:32 - click on delete Emily William order and
91:35 - I'm going to update again and right now
91:38 - I got only one holder because I deleted
91:40 - the previous one in this course we saw
91:43 - that we can read insert update or delete
91:46 - element with the SDK of Super Bass
91:49 - before what we have to do is to always
91:52 - work on the row level security on the
91:55 - authentication pardon policies and to
91:58 - enable some cases if we want to insert
92:00 - select update or delete our elements
92:03 - from the table coming directly from our
92:07 - Super Bass instance
92:14 - of course with Super Bass we can
92:16 - subscribe to the changes of a table here
92:19 - I got a table order with 20 fake orders
92:23 - okay so what I can do I can click here
92:25 - an API quick start or I can go down here
92:28 - on API docs but if I click here I got a
92:31 - quick access to the API documentation
92:33 - related to Super Bass
92:35 - so I got all the code related to the SDK
92:39 - and when we go down we see here that we
92:41 - get subscribe to changes and here we got
92:44 - the code that we can import into our
92:46 - application
92:47 - so right now in my app it's totally
92:49 - empty I don't get the orders so what I'm
92:53 - going to do I'm going to get back here
92:54 - and I'm going to create a new function
92:56 - called Fetch orders okay so here it will
93:00 - be an asynchronous function all right
93:02 - what I want to do before triggering this
93:05 - fetch order I want to create an
93:07 - interface because I'm on typescript
93:09 - which will be an interface order in this
93:11 - interface I will have the model of my
93:14 - table so here it's going to be a Name ID
93:17 - I created that etc etc and down there I
93:20 - want to create a const orders here is
93:24 - going to be a reference and this will be
93:27 - an array so I'm waiting for an array
93:29 - what I want to do also is to specify
93:32 - here is going to be of type order here
93:35 - we go so now we are going to store our
93:38 - orders here what I can do is to write my
93:41 - function fetch order so it's going to be
93:43 - really simple I'm going to fetch from
93:46 - Super Bass my orders and I'm going to
93:48 - apply the orders to this variable here
93:51 - then I want to trigger this fetch holder
93:54 - at the end of my code and when I get
93:57 - back here we go we've got all the orders
93:59 - okay so now I'm going to put the order
94:02 - this way and here I'm going to put the
94:05 - Super Bass instance here so I'm going to
94:08 - get back here and here we go so what I'm
94:11 - going to do I'm going to change data
94:13 - here and it will appear immediately here
94:15 - but before I need to implement my code
94:18 - to subscribe to actually to subscribe to
94:22 - the table orders so the first thing I
94:24 - need to do is to create a cons channel
94:26 - here and I'm going to call Super Bass
94:28 - okay and then I'm going to call the
94:31 - function channel so here it's going to
94:34 - be my new channel for others let's say
94:38 - okay you can give the name you want and
94:41 - here we go so here we are creating a
94:43 - channel
94:43 - so I'm going to put some space here to
94:45 - be more clear here we are then I'm going
94:48 - to type on and here I will take three
94:51 - arguments the first one it's an argument
94:54 - that is totally normal which is postgres
94:57 - changes here we are then I'm going to
95:00 - specify okay the event that I want so
95:03 - here at the event and I want is to have
95:04 - all the order back okay here you can put
95:07 - the specific key that you want the
95:10 - schema is going to be public
95:13 - okay and here I'm going to specify the
95:16 - table which will be orders okay so right
95:19 - now it's on red because the last
95:21 - argument will be a callback a function
95:23 - and this is where I'm going to catch my
95:26 - event so I'm going to console log my
95:29 - event here we are last thing if you want
95:31 - to put a filter you can put it here by
95:34 - typing here buddy is equal and here you
95:37 - can type your filter so you got equal
95:39 - you get LTE
95:41 - etc etc me I don't want that I want to
95:43 - get back the changes here okay so here
95:46 - we are at the end what we need to put of
95:48 - course is dot subscribe which is a
95:51 - function
95:52 - so now when we gonna have changes what's
95:56 - gonna happen is that we are going to
95:57 - console log the changes here but before
96:00 - we have to enable this real time so what
96:03 - we're going to do we are going to click
96:04 - here on database and we're going to go
96:06 - here on replication okay on replication
96:10 - I got super bass real time on insert
96:13 - update delete truncate but here as we
96:16 - see we've got zero table so we need to
96:19 - say hey this table
96:21 - is enabled for Super Bass real-time so
96:24 - I'm going to click on zero table and
96:26 - here we've got orders orders by client
96:28 - and here we got client so here I'm going
96:31 - to check on here here we go holders is
96:34 - enabled for real time back into my
96:37 - application we see that here Ava Wilson
96:39 - is living on in Chicago on the
96:44 - 60606 ZIP code I'm going to change our
96:47 - ZIP code and down there in the console
96:49 - we are supposed to get an event console
96:51 - log so I'm going to put 0
96:53 - and look at this we've got the answer
96:56 - from our subscribe and we've got a lot
97:00 - of data here we've got the commit
97:02 - timestamp we've got an update we've got
97:05 - the hold data and we've got the new data
97:08 - and we can see that the ZIP code is now
97:10 - zero so now I have to update in my array
97:13 - of orders okay this uh actually this new
97:17 - data for Ava Wilson
97:19 - back in my code I'm going to District
97:21 - structure my event so it's going to be
97:23 - const here it's going to be my event and
97:27 - here it's going to be new however I
97:28 - don't want to use new I want to type new
97:30 - holder because here in this scope it's
97:32 - an order and what I'm going to do I'm
97:34 - going to apply to orders value uh nodes
97:37 - dot value
97:40 - dot map and here I'm going to check the
97:44 - holder okay so what I'm going to do here
97:46 - exactly I want to check if it's the
97:48 - right idea that I want to change inside
97:51 - my array so I'm going to type if order
97:54 - dot ID is equal to newholder dot ID here
97:57 - we are what we want to do here is to
98:02 - return an object that will merge at
98:04 - first the older but the new data so new
98:08 - data here the New Order this way okay
98:11 - and at the end of course we want to
98:14 - return also the other orders alright so
98:18 - here we are supposed to merge the old
98:21 - data with the new data inside our orders
98:25 - array locally back in my application Ava
98:27 - Wilson is on the bottom and our function
98:30 - will help us to not move those elements
98:32 - I got Jack Jackson Thompson here at the
98:35 - top and I'm going to change Jackson
98:36 - Thompson here and it's supposed to
98:39 - change Jackson Thompson on my app in
98:41 - real time so what I'm going to do I'm
98:43 - going to put code Whiskey on okay as a
98:46 - value I'm going to type enter and look
98:48 - at this
98:50 - here we are it changed my value for code
98:53 - with Geon so it's really really useful
98:56 - what I'm going to do I'm going to change
98:58 - also the price and this time it's going
99:00 - to be 100 look at this and here we are
99:04 - for Madison Perez we've got a 100 so
99:08 - here in the database it's moving from
99:10 - the top to the bottom but not in my
99:12 - application in real time we succeed to
99:16 - change the order's value and it's
99:19 - applying to my array the new value
99:23 - so why would you need to subscribe to
99:26 - events well for different kind of
99:28 - application here we are on a CRM so
99:32 - we've got clients here a list of orders
99:35 - but you could do that for a chat of
99:37 - course because in a chat you would like
99:39 - that people get the new messages in real
99:42 - time so you would subscribe into your
99:45 - application with the method channel on
99:47 - And subscribe you would subscribe to the
99:51 - list of latest messages coming from your
99:54 - database
99:56 - as you see it's really fast to set up
99:59 - it's really easy to use of course if you
100:01 - want a filter you would need to add the
100:04 - filters and check out the API docs for
100:06 - it but here in some minutes we succeed
100:09 - to subscribe to a channel and we succeed
100:13 - to update our value locally
100:20 - how to make relation between tables in
100:23 - Super Bass let's get an example in the
100:27 - previous lessons I have created a table
100:29 - orders and a table client let's start
100:32 - over for this example I have here a SQL
100:37 - query
100:38 - that will actually create a table orders
100:41 - with a model ID client ID
100:44 - etc etc
100:45 - I'm enabling the rule over security and
100:48 - I got a table client with an ID
100:51 - after I'm inserting in my clients the
100:55 - email it will create an ID also and in
100:58 - my table orders okay I'm going to
101:02 - generate okay I'm going to generate a
101:04 - fakeholder and I'm going to inject
101:07 - from clients that is related to the
101:10 - email of Daniel Garcia which is up there
101:14 - so I'm going to click on run
101:16 - and here we are so I'm going to get back
101:18 - to my tables and now I'm going to have
101:21 - two tables a table client with an ID
101:25 - and I'm going to have a table orders
101:28 - with an order
101:30 - and in here I'm going to have here
101:33 - exactly the client ID of the email
101:36 - Danielle Garcia so the client ID of an
101:40 - order
101:41 - is actually the ID of a client
101:45 - so now what I can do is to make a
101:48 - relation between them in database here
101:52 - I'm going to click on my table orders
101:56 - I'm going to click here on the pen
101:59 - and I'm going to add a foreign key
102:01 - relation so I'm on orders and when I
102:06 - click here I want to make a reference to
102:09 - another table and this table here you
102:11 - understood it will be clients
102:14 - and of course I want to make a relation
102:16 - with the ID from clients so I'm going to
102:20 - click on Save and here we are we have a
102:22 - relation now between every holder which
102:26 - the client ID will be related to the
102:29 - client's ID now I know that I got this
102:32 - relation so to confirm that I can go on
102:35 - the table orders
102:37 - and here we see that there is a little
102:39 - link here which means that there is a
102:42 - relation on this colon to another colon
102:45 - now I'm going to go on API docs on the
102:49 - table orders and I'm going to look for
102:51 - foreign key okay and down there we see
102:54 - that with the SDK I have a solution to
102:58 - fetch actually my orders with another
103:01 - table so here you understood it's going
103:04 - to be
103:05 - clients
103:06 - and between parentheses I'm going to put
103:09 - what I'm going to put the foreign key
103:11 - and in order the foreign key
103:13 - it's client ID back in my app I have a
103:16 - function fetch order
103:17 - with a star here and what I want to do
103:21 - I'm going to put here at the line
103:25 - clients so the foreign tables and in
103:28 - clients I'm going to put a star because
103:31 - I want to have the full client of course
103:33 - before I need to check if my rollover
103:35 - security policies are made here it's not
103:38 - the case so I'm going to add a new
103:40 - policy let's say that I'm going to apply
103:42 - this enable read access on clients and
103:46 - I'm going to do exactly the same on
103:48 - orders and here we are I got my order
103:52 - down here and if I click on it
103:56 - look at this
103:57 - I got client ID but I also got the data
104:01 - from the client so what we did here we
104:04 - created a relation we used the client ID
104:07 - of an order
104:09 - to make a relation to another table
104:12 - which is client ID
104:14 - of course you can make as much relation
104:17 - as you want until the moment it doesn't
104:20 - imply that the colon have constraints
104:23 - that are not related for example primary
104:26 - Keys is nullable etc etc you gotta be
104:30 - sure that your colons can fetch together
104:33 - here I got a colon client so if I click
104:36 - here I got some elements and I can also
104:39 - here if I want make a relation okay
104:42 - between the client's email and order so
104:45 - here I'm going to click on select a
104:48 - tables reference to and here is going to
104:50 - be orders and when I click down here I
104:53 - can check that
104:54 - the orders email will be fetched in
104:58 - relation to the client's email so I'm
105:01 - going to click on Save and here we see
105:03 - that we got the relation already done
105:05 - and here we are I got a relation between
105:08 - those two of course if you want to
105:11 - delete those relation you can do the
105:13 - opposite
105:19 - Super Bass is built around postgres and
105:23 - in postgres you can create what we call
105:25 - functions functions can be triggered on
105:29 - insert update delete and other steps of
105:33 - your application if you don't know what
105:34 - our functions in postgres I just typed
105:37 - it in Google let's look at the
105:39 - definition together
105:41 - a postgresql function or stored
105:44 - procedure is a set of SQL and procedural
105:48 - commands so like SQL scripts that we get
105:51 - in Super Bass
105:53 - such as declaration assignments Loop
105:57 - flow of control Etc stored in the
106:00 - database server and can be involved
106:02 - using the SQL interface
106:05 - so here in postgres or Super Bass we can
106:09 - create our function and if we want to
106:12 - have some example we can click here on
106:13 - the SQL editor and remember on the SQL
106:17 - editor we can write scripts but we also
106:20 - got custom scripts already written by
106:23 - the Super Bass team but at first what I
106:25 - want to do I want to get back to my
106:26 - table editor and remember I've built
106:29 - this app that is fetching the orders
106:31 - from my table here orders so what I want
106:35 - to do I want to go back to my table
106:36 - orders and here I would like to
106:39 - increment a field however there is no
106:41 - field that I would like really to
106:43 - increment so I'm going to add one column
106:46 - here by clicking here and here we are
106:48 - and what I'm going to do I'm going to
106:50 - create a column called views
106:53 - and it's going to be number of views of
106:57 - my order it doesn't make really sense
107:00 - here but it's just to give you an
107:01 - example
107:02 - the data type it's going to be an
107:05 - integer 2. okay
107:07 - and the default value would be zero
107:10 - okay we don't Hello Nila ball I'm going
107:12 - to click on Save and here it's going to
107:15 - add to every column actually of my
107:19 - orders here the views so here we don't
107:21 - get the zero I don't know why maybe I
107:23 - went too fast but anyway for fetch I'm
107:25 - going to look at my order and here we
107:27 - are we see down there that we get the
107:29 - views so we would like to increment
107:32 - discount every time we fetch actually
107:35 - the order we can do that with functions
107:39 - there are two ways to create function in
107:41 - Super Bass the first one is to go to the
107:44 - SQL editor and to write a script like I
107:48 - have here either you can check to take
107:51 - one here the second way is to go to
107:54 - database and here you've got functions
107:58 - on Alpha so when you click on functions
108:00 - on Alpha here I already created a
108:02 - function but I'm going to click on
108:04 - create new function here I can create my
108:07 - function so let's say that I'm going to
108:09 - recreate the one I have it's increment
108:12 - and it's going to be on public and here
108:15 - we return void but later we will need to
108:18 - return trigger if we want to pass the
108:20 - trigger I can add my new argument and
108:23 - down there I can copy paste the part on
108:26 - PNP gsql the language to write my
108:31 - function okay so down there you would
108:33 - have your function let's say that as an
108:35 - argument I would have my order ID which
108:38 - will be an integer uh no not an integer
108:41 - two but it would be a uuid here we are
108:44 - and down there I would copy paste the
108:46 - function that I want and here we are you
108:48 - have advanced settings to change the
108:51 - behavior here is going to be volatile
108:53 - we've got a language we can pass some
108:56 - params and we can work on the type of
108:59 - security check the security invoker here
109:01 - you will have your function and then you
109:03 - click on confirm and it will save your
109:05 - function finally you get your function
109:07 - appearing here increment with the
109:09 - argument where you ID with a return type
109:12 - void and when you click on it you can
109:14 - edit it go to the dock or delete the
109:17 - function the second way is to go to your
109:19 - SQL editor and to write your own
109:22 - function or to select a script there so
109:25 - we are going to select this increment
109:27 - field value we are in the SQL editor of
109:30 - course I'm going to click on here and
109:32 - here we have create function increment
109:34 - here so we've got some postgres here PL
109:38 - SQL sorry that has been written for us
109:40 - here immediately and what we would like
109:44 - to do is to change a bit this function
109:46 - to adapt it to our colon all right I
109:50 - have a query here to actually increment
109:53 - my tables view so here is the function
109:56 - that I wrote and I got my update orders
110:00 - and I'm setting the view plus 1 where
110:02 - the row ID will be equal to ID as a
110:06 - language SQL volatile there we go so I'm
110:08 - going to click on run and here we are my
110:11 - function is now existing if I want to
110:13 - check I can go to database and to
110:15 - function up here and what's appearing
110:18 - here I got my function increment now I'm
110:21 - getting back to my app and I have a
110:23 - function increment view where I call
110:27 - superbase.rpc increment the first
110:29 - argument of this function is the name of
110:31 - your function actually so dot RPC is the
110:35 - function to call increment here and we
110:38 - pass here the object with the row ID
110:40 - remember this row ID we need it in our
110:44 - function so if I get back to my query
110:46 - here we pass the row ID which is the
110:48 - uuid the row ID it's simple the ID of my
110:53 - order okay so here I'm just changing
110:56 - Danielle Garcia so I put here the ID
110:59 - immediately of Daniel Garcia let's go
111:02 - back to our app and let's check if we
111:04 - pass from zero to one back in my app I'm
111:06 - going to update let's look at the
111:09 - network and we see down there that I
111:10 - called increment here we are if I look
111:14 - at the object in the console I got view
111:16 - 0 so I'm going to update again and let's
111:19 - look there and here we are we got views
111:23 - one here of course we don't count the
111:25 - view that we just passed so if we get
111:28 - back actually here we are we see that we
111:30 - got two views for uh Daniel Garcia okay
111:35 - so that's how we can call functions
111:38 - immediately from our app in Super Bass
111:41 - we create our function first then we
111:44 - look at the rollover security uh
111:46 - policies if we got something to change
111:48 - to allow the the client to update or
111:52 - insert and finally we call it by using
111:55 - superbase.rpc the name of the function
111:57 - and we can pass as many arguments as we
111:59 - want
112:05 - previously we created a function
112:07 - together to increment our views inside
112:10 - our table in Super Bass and per
112:12 - extension with postgres
112:14 - but we can call this function with what
112:17 - we call triggers
112:18 - if you want to know where are your
112:21 - triggers inside Super Bass you can go
112:23 - here on the left on database and when
112:25 - you click on it you got a list up there
112:27 - so I'm going to zoom a bit and here we
112:29 - got triggers and when you click on
112:31 - triggers here we are you got a list of
112:33 - triggers here and you get the trigger
112:37 - under every schema okay you get schema
112:39 - real time schema PG sodium schema
112:42 - storage and here we got the name of our
112:45 - triggers and the table where they act so
112:48 - here we get subscription for THX filter
112:50 - we see that the function that we call is
112:53 - subscription check filters and it's
112:55 - triggered on certain events here it's
112:58 - before insert before update so we
113:01 - understand that triggers are calling
113:03 - function at a certain time when there is
113:06 - a special event and here we see that we
113:08 - get these events before insert before
113:10 - update for those who don't know postgres
113:13 - let's look at the definition of triggers
113:16 - postgresql triggers a database callback
113:19 - functions which are automatically
113:21 - performed invoked when a specified
113:24 - database event occurs
113:26 - so we can see here that our functional
113:29 - triggers are actually linked to a
113:33 - specific database a trigger that is
113:35 - marked for each row is called once for
113:38 - every row that the operation modify so
113:41 - when we get back here we see that we've
113:43 - got a function tier check filters on the
113:46 - table subscription the function that is
113:49 - called is subscription check filters and
113:52 - here we got the events before insert
113:54 - before update okay at first what we can
113:57 - do is to click up here to create a new
113:59 - trigger and we can see here we got the
114:01 - name of a new trigger okay so here
114:04 - please use snake Case by default and
114:07 - here you can check the table if you want
114:09 - to check a specific table so here we've
114:12 - got session health we got user Hoth and
114:16 - we've got up here orders the table that
114:18 - we created before in this course here
114:21 - are the list of the events okay we've
114:24 - got insert update delete okay these are
114:27 - the events you want to trigger your
114:31 - trigger and the function and here you
114:33 - get the trigger type so when you click
114:35 - on it it's before or after as you see
114:38 - here okay before the event or after the
114:41 - event
114:42 - for the orientation of the statement we
114:45 - can say that it fire wants for each
114:48 - processed rule most of the time you will
114:49 - select that and down here you're going
114:51 - to choose the function to trigger so
114:54 - this is the first way to add a new
114:56 - trigger if you don't want to use the SQL
114:58 - editor you can go here and click to add
115:02 - a new trigger and down here you would
115:04 - select the function that you would have
115:06 - created previously if you want to know
115:08 - how to create a function please refer to
115:10 - the listen on functions
115:13 - okay I'm going to write a SQL query to
115:16 - create a table to create a function to
115:19 - add every time somebody is going to
115:21 - authentify to my Super Bass instance a
115:23 - row in this table users be safe it's not
115:27 - going to be about the auth.user stable
115:29 - is going to be about the users table and
115:33 - then I'm going to create a trigger
115:35 - immediately so I'm going to click here
115:36 - on new query and what I'm going to do
115:39 - I'm going to type create table users
115:42 - okay right now I don't got any table so
115:45 - here it's going to be good it's going to
115:47 - be with an ID with uuid references here
115:52 - auth.users okay not null and it's going
115:55 - to be primary key here we are so I'm
115:57 - going to zoom a little bit for you here
115:59 - we are then it's going to have an email
116:01 - and I'm going to store the email text
116:03 - here okay so I'm going to go down here
116:06 - and what I'm going to do I'm going to
116:08 - create also a function so I'm going to
116:10 - type create or replace because maybe
116:13 - we're going to run the query several
116:15 - time if we make mistakes
116:16 - okay function and here is going to be
116:20 - public
116:21 - dot handle a new user here we are there
116:26 - we go and then we are going to return
116:28 - here returns a trigger it's really
116:30 - important at this step to return the
116:33 - trigger because we fix the trigger on
116:35 - this function okay you have to return
116:37 - the trigger so here is going as double
116:40 - dollar here we are and we are going to
116:42 - type begin and end and between those two
116:45 - we are going to pass our function and we
116:49 - want to say insert
116:51 - into public dot users so here the table
116:54 - that we've got up there
116:56 - we want to insert an ID and animate and
116:59 - where it's going to come from where it's
117:01 - going to come from the new user that is
117:04 - going to uh actually log in or subscribe
117:08 - to my application so basically here
117:11 - we've got new that is available in my
117:13 - scope so what I can do is to say values
117:15 - here and it's going to be new ID and
117:18 - then I'm going to pass new DOT email
117:20 - okay so here I'm going to return new
117:24 - here we are and after I'm going to show
117:26 - you where it comes from exactly
117:28 - here we are so at the end I'm going to
117:29 - type here language and here is going to
117:33 - be PLP gsql and it's going to be of type
117:36 - security definer here we are and here we
117:39 - are we've got our function here that is
117:42 - going to work
117:44 - okay down here I'm going to create a
117:46 - trigger so I'm going to type create
117:47 - trigger and here on new user okay and
117:51 - here it's going to be after insert
117:54 - and it's going to be on auth.users here
117:58 - we are and down there what I want to
118:00 - write here is that for each row I want
118:04 - to do what I want to execute procedure
118:07 - okay and here it's going to be what I
118:10 - think you understood is going to be
118:11 - public handle new user and here we are
118:14 - it's supposed to be good so now I'm
118:16 - going to go on my database I'm going to
118:18 - go on functions
118:19 - and here on function we see that we've
118:22 - got handle new user which is written
118:24 - type trigger okay and if I go on my
118:27 - triggers here down here I'm going to
118:29 - unzoom here we are we can see that we've
118:32 - got a new user which is my trigger that
118:35 - is going to call what it's going to call
118:38 - actually we don't see it here but it's
118:40 - going to call my function okay let's get
118:43 - back to our tables and here we've got a
118:46 - table that has been created there is no
118:49 - row level security enabled so maybe I
118:51 - would I want to do it so I'm going to
118:53 - type enable row level security we've got
118:56 - our table with ID and email and what
118:58 - we're going to do we are going to go to
119:00 - authentication add a new user and see if
119:03 - our trigger is going to be actually
119:05 - calling the function and had the new
119:08 - user so I'm going to click here on
119:09 - authentication here we are so I'm going
119:12 - to take this fake user it's going to be
119:14 - this one and I'm going to put a new
119:16 - number click on invit user
119:18 - okay the invit has been sent and now if
119:21 - I go to my table users
119:24 - here we are we see that we've got our
119:27 - function that has been triggered all
119:29 - right so what we did here we created in
119:32 - our script a table users then we created
119:36 - a function and this function can be
119:38 - found here in functions Alpha here and
119:42 - all new user and if I click here exactly
119:44 - we've got the code that I wrote between
119:47 - begin and hand just here with the public
119:50 - etc etc then I created a trigger called
119:53 - our new user that is triggered after
119:56 - insert and this trigger is triggered
119:59 - every time there is a new user on the
120:03 - table Hoth so if I get back to my table
120:06 - I got my own table user public dot user
120:09 - which is here we see the schema and what
120:12 - happened is that I added a new user
120:15 - through the authentication system
120:17 - I invited a new user so if I click here
120:20 - and I look at the schema down here which
120:23 - is half
120:24 - I get a list of tables related to the
120:26 - schema half and down there I get users
120:28 - and we can see that in users I got my
120:31 - new user here so when I have a new user
120:35 - it's new DOT email that I catched inside
120:38 - my function
120:40 - and with this new email that I catch
120:42 - inside my function I said add it to the
120:45 - public dot user table
120:52 - Super Bass is built around postgres and
120:55 - of course postgres is using schemas so
120:59 - what are schemas well actually a schema
121:02 - it's a name container for database
121:05 - objects such as tables views sequences
121:09 - indexes functions schemas are a way to
121:13 - organize the separations and to organize
121:17 - your database objects a schema is
121:20 - essentially a namespace that contains
121:23 - one or more objects by default there is
121:26 - a schema called public so here when I go
121:29 - back to my table we can see up here that
121:32 - we can select the current schema we are
121:34 - on depending the tables so when I click
121:38 - here I can select for instance half and
121:40 - we see that I access new table so we
121:43 - understand that half and public are two
121:46 - different schema containing their own
121:49 - tables so by default this schema is the
121:52 - G4 schema public okay and all objects
121:56 - created without specifying a schema will
121:59 - end up in public by default so why do we
122:02 - need such a thing why do we need schemas
122:05 - well I told you first it's for the
122:07 - organization you can separate some parts
122:09 - of your application directly through
122:12 - those schemas of course schemas are used
122:14 - to manage permission let's say that some
122:17 - part of your application you will need
122:19 - to be available only for admins you will
122:22 - do some schema like admin or you would
122:24 - have the public that would be for public
122:26 - etc etc you can create as much schema as
122:29 - you want and you can determine actually
122:31 - to who you want to build this schema for
122:35 - schemas are also amazing to avoid naming
122:38 - conflicts here on public I got a table
122:41 - user alright with two columns but if I
122:44 - go on half I also got a table user
122:47 - depending on another source of data so I
122:52 - have dot users but I got also public dot
122:57 - users so here we avoid the match between
123:00 - two table that got the same name but
123:02 - don't get the same columns the same
123:04 - model schemas are also amazing to
123:06 - facilitate the multi-tenancy of your
123:09 - application so what does it mean well
123:12 - let's imagine that you got multiple
123:14 - clients and you want the customer to
123:17 - share data each client can have their
123:20 - own schema those multiple clients it
123:22 - helps them to keep the data separated
123:25 - and organized basically a schema
123:27 - provides some help to separate the
123:30 - concerns of your table to manage and
123:33 - secure your database particularly when
123:36 - the size is going to grow up and the
123:39 - complexity is going to make trouble to
123:42 - your developers to understand where are
123:45 - the data exactly and to not mix the
123:48 - database names okay so let's get back to
123:51 - the SQL editor and we are going to
123:53 - create our first schema so here I got a
123:56 - create schema sales this will create
123:58 - those schema says so I'm going to create
124:00 - a table and here it's going to be the
124:03 - name of the schema so sales that
124:05 - customers all right and inside here I'm
124:08 - going to have what I'm going to have a
124:10 - ID type uuid and it's going to be
124:13 - actually no
124:16 - primary key here we are then we would
124:19 - have a name it would be a text okay and
124:23 - an email that would be a text also here
124:25 - we are so I'm going to click on run
124:27 - and look success no rule return I'm
124:31 - going to get back to my table and if I
124:33 - go to schema suddenly I got the schema
124:36 - sales okay so I'm going to click on
124:39 - sales and now I got the customer with
124:42 - which is actually empty right now but I
124:45 - created a separated part of my
124:47 - application through the schema so now I
124:50 - got the public and I can have the schema
124:53 - sales if I want to store customer
124:55 - somewhere else in a different business
124:58 - logic or different part of concern of my
125:01 - application
125:07 - storage in Super Bass is super easy Once
125:11 - you have created your project you can go
125:14 - down here to storage okay and when you
125:17 - click here you arrived on the list of
125:19 - the buckets the buckets it's the places
125:23 - it's where you are going to store all
125:26 - your documents images whatever okay so
125:29 - here we are so I'm going to click on
125:32 - create a new bucket and here let's say
125:34 - I'm going to create a bucket for avatars
125:36 - alright
125:37 - so here I can only enter letters number
125:40 - dots and hyphens all right so buckets
125:44 - cannot be renamed once created so be
125:47 - safe on the name you are going to give
125:49 - if I click done there here it's going to
125:51 - be a public bucket so if it's public
125:54 - anybody who's got your url will be able
125:58 - to fetch and see the image okay so here
126:01 - for avatars it's the case Okay I want it
126:03 - to be public but be safe if you want to
126:06 - have a specific document that are going
126:08 - to be private you will not edit this
126:11 - public bucket but you will work with row
126:13 - level policies after to be able for the
126:16 - users to fetch the document the private
126:18 - document they uploaded before
126:20 - so down here I got a warning public
126:22 - records are not protected users can read
126:25 - objects in public bucket without any
126:28 - authorization okay rollover security
126:31 - policies are still required for other
126:33 - operations such as objects upload and
126:36 - delete so we see now that when we create
126:38 - a bucket actually we have to still write
126:41 - some rollover security policies to be
126:44 - able to fetch the elements so I'm going
126:46 - to click on create the bucket avatars
126:50 - and here we are and we see up here that
126:52 - we've got a label public that tells us
126:54 - that here it's public it's available on
126:57 - fetch okay so what I'm gonna do up here
127:01 - is to upload the file however I can if I
127:04 - won't create a folder or so I can reload
127:07 - or etc etc so I'm going to click on
127:09 - upload the file and here I got the image
127:11 - the term name of the current
127:13 - video that you are watching here it's
127:15 - storage.png and when I click on it I got
127:18 - some information here here's the
127:21 - thumbnail you get the image size you get
127:23 - the date you can download it get the URL
127:26 - so I'm going to click on get the URL and
127:28 - I'm going to enter the URL up here and
127:31 - we see that there is a public inside the
127:35 - inside the URL so it means that I can
127:37 - fetch it and here we are we got the
127:39 - image available thanks to the bucket
127:42 - option that we get here download of
127:44 - course if I want to delete I can click
127:45 - delete it here I can also download it
127:48 - immediately okay so what I'm gonna do
127:50 - I'm going to delete this file for now
127:51 - and now in my application I'm going to
127:55 - push actually the image directly from
127:59 - some kind of Avatar element that helped
128:02 - me to upload the image alright here we
128:05 - are I got this upload element with
128:07 - terrin CSS and when I click on it I can
128:10 - upload an element however I didn't work
128:14 - on the rollover security yet so what I
128:17 - need to do is to get back to my
128:19 - application and go to my script SQL
128:23 - editor I have written this SQL script
128:28 - to tell that I want to enable on a
128:31 - certain table the row level security
128:34 - okay so here we see that the schema is
128:38 - storage so let's have a look let's get
128:40 - back on our table editor remember and if
128:42 - I click down there I got a look for a
128:44 - schema called storage and this is where
128:47 - is the schema with all the tables and
128:51 - all the policies related actually to the
128:54 - storage so I'm going to click here on
128:55 - upload and here we are look we've got
128:58 - three tables we got buckets okay we've
129:00 - got migration and we got objects so I'm
129:02 - going to click on bucket and when I
129:04 - click on bucket What's Happening Here is
129:06 - that I got actually a table with Name ID
129:10 - okay I with id id and name Avatar sorry
129:13 - I got a created date Etc public true
129:16 - Auto detection Force etc etc okay so
129:21 - here is it's the bucket I created it's
129:23 - the table related to the buckets that
129:26 - I'm going to create in the future look
129:28 - at this on objects I got an entrance
129:31 - okay that is pushed here so what I got
129:34 - to do is to enable the rollover Security
129:36 - on storage and object so I'm going to
129:39 - get back to my SQL editor and let's look
129:42 - at this query that we got down there
129:48 - and the table objects enable whatever
129:51 - security and here I'm saying for select
129:53 - operation okay I want to select only if
129:57 - you are authenticated otherwise you
129:59 - cannot select any element
130:01 - also for insert and I have to use with
130:04 - check instead of using here it's really
130:06 - important for insert okay
130:09 - we check
130:10 - um actually I want to insert only if my
130:12 - role is authenticated same for update
130:15 - simple delete I'm going to run this
130:18 - query and it's going to enable the raw
130:20 - level security on storage.object and had
130:23 - these four policies here once it's done
130:26 - I can go to authentication policies
130:28 - click here on schema and go down to
130:31 - storage and I can look here that for
130:34 - objects I got those row level security
130:37 - here already entered alright so what I
130:41 - can do now is to get back to my storage
130:43 - here to avatars and here I got my
130:47 - component so let me show you how this
130:50 - component looks like it's a component
130:52 - made with Tailwind if there is an image
130:55 - URL I'm going to show it otherwise I
130:58 - have an avatar upload button here with
131:01 - the SVG that helps me to input actually
131:04 - an image so up here I got my function
131:08 - handle file input change here we are so
131:11 - we got the file that I'm going to upload
131:13 - and I'm going to use my client Super
131:16 - Bass storage from Avatar and I'm going
131:19 - to upload here I'm changing the name of
131:21 - the file Avatar with here the date and I
131:25 - just put the date this way if you want
131:27 - to put something else like for instance
131:28 - the email of the person authenticated or
131:31 - something else you can do it here then
131:34 - if there is an error I'm going to show
131:36 - the error it's a basic function help
131:38 - here to push on my storage so I'm going
131:41 - I'm using actually the storage from the
131:44 - SDK client the storage function with
131:46 - from and upload to upload my file let's
131:49 - get back let's open the console I'm
131:51 - going to click here I'm going to click
131:53 - on storage
131:56 - and here we are we see that I get my
131:57 - image so it's not very nice from now we
132:00 - would say that we would deal with a
132:02 - squared image for an avatar anyway and
132:05 - here I got my image on my network I have
132:09 - a 200 for the Avatar and the date and
132:12 - now if I get back to my bucket I'm going
132:14 - to reload
132:15 - and here we are I have uploaded my
132:19 - avatar okay it's as easy as this of
132:23 - course you would have several bucket in
132:25 - the future maybe with different folders
132:27 - where you are going to push into okay
132:30 - but it's as easy as this first you
132:33 - create your bucket then you write your
132:35 - raw level security policies then you
132:38 - create your function here thanks to the
132:40 - SDK of super bass in your application
132:42 - you use storage from and you upload with
132:45 - the name of the file then the file
132:48 - itself
132:54 - as a backend as a service of course
132:56 - Super Bass is keeping track of all the
132:58 - events through logs whatever is
133:01 - happening within your application Super
133:03 - Bass is creating logs if a user is
133:06 - subscribing you have a look if a user is
133:09 - creating a record you have a log if he's
133:12 - updating a record etc etc so you can
133:15 - find all the logs of Super Bass here in
133:17 - the application here on logs so when you
133:20 - click on it you arrive on the dashboard
133:22 - here on actually
133:24 - and Editor to write your query inside
133:28 - your postgres instance
133:30 - to get all the logs of the last 24 hours
133:33 - for instance or you can get the logs of
133:36 - a custom date logs can be very helpful
133:39 - in many ways first with logs you can
133:42 - debug your application
133:45 - so everything that you're gonna do here
133:47 - you're gonna find some track for
133:49 - instance inside here inside the postgres
133:52 - instance so as you see here I got a
133:55 - track right now on what I'm doing and
133:58 - whatever is happening in here so when
134:00 - you will get an arrow for instance here
134:02 - we've got a fatal arrow down here I can
134:05 - keep track on what's happening on my
134:08 - Super Bass instance so here it's helping
134:12 - me to know if something goes wrong
134:15 - inside the application so logs are here
134:17 - to help me to know if an error happen
134:20 - okay if an arrow occurred inside my
134:23 - application so now I can fix the problem
134:26 - I can troubleshoot my uh actually my
134:30 - process my application here and through
134:33 - here this list of logs that are very
134:35 - consistent we can see here that almost
134:37 - every second I got four or five logs I
134:40 - can click and I can know what happened
134:42 - here so of course in terms of security
134:45 - logs are very useful because I can track
134:48 - the user activity and I can see really
134:51 - clear really fast if a request indicates
134:56 - some kind of security breach inside my
134:59 - Super Bass instance however here it's
135:01 - not supposed to happen super bases super
135:04 - strong as a backend as a service but we
135:08 - never know we want to always get a hand
135:11 - on what's Happening Here and this is why
135:13 - the logs are very useful for security
135:16 - another thing is that the logs help us
135:20 - to work with the performance
135:21 - optimization all right so actually by
135:25 - when you analyze the logs you can see
135:27 - which queries are taking the longest to
135:30 - execute you can have some metrics on
135:34 - what is taking a lot of resources on
135:37 - your Super Bass instance well there's a
135:40 - lot of stuff that you can do you can see
135:42 - also which endpoints are the most
135:44 - frequently requested and give you an
135:48 - Insight on what is the feature you
135:50 - created that is the most used so let's
135:52 - explore a little bit the dashboard of
135:54 - the logs so here we've got the postgres
135:56 - instance so as I showed you here we we
135:59 - have the list and up here we can see
136:01 - that we got a refresh but with a
136:03 - real-time notification here with 18 new
136:06 - events so when I'm clicking on this look
136:08 - at this I'm refreshing my logs and I got
136:12 - here the locks time the request that I
136:15 - got actually here on my Super Bass
136:17 - instance
136:18 - and I got the latest logs okay so I can
136:22 - refresh I can click also on severity to
136:25 - get only the error so here I'm going to
136:27 - just save this and let's have a look and
136:30 - what's going to happen here I'm going to
136:32 - have only the arrows okay so if I'm
136:34 - clicking again and I put no error of
136:37 - course I will have no Euro and if I want
136:39 - to have all the logs I can click on log
136:41 - this way all right here if I'm clicking
136:44 - on chart here I can display or not the
136:47 - chart that I got on the top all right so
136:50 - here I'm just going to remove this I'm
136:51 - going to save again and start again for
136:53 - you to understand here we are and as you
136:56 - see I can hide the hide and show the the
136:59 - chart by clicking on this button I have
137:01 - the option to download the log so I'm
137:03 - going to save the logs and I'm going to
137:05 - open them and I have them as a CSV file
137:09 - all right so through this CSV file we
137:12 - can see here that I got all the logs of
137:15 - my Super Bass instance okay so here when
137:18 - I go here on query I can query actually
137:21 - my super bass or postgres instance to
137:25 - get okay the latest logs that I want
137:28 - okay I can click over here on Saved
137:30 - queries so let's say that I want to
137:32 - write some queries that I want to launch
137:34 - really often I can save them here I got
137:37 - the recent queries here and if I don't
137:39 - know how to write queries for this log
137:42 - Explorer I got templates that are here
137:45 - so it's really nice from the team of
137:47 - Super Bass to think about people who
137:50 - don't know how to write queries here you
137:53 - got some templates that you can use I
137:56 - get also the API Edge Network that
137:59 - helped me to retrieve all the calls made
138:01 - on my instance through the API Edge okay
138:04 - on the host log it's different here if I
138:07 - want to change actually let's say that I
138:09 - want to have the last three days logs
138:11 - what I need to do here is to upgrade my
138:14 - plan here okay for the log retention I
138:17 - need to pass to a paying plan so I need
138:19 - to upgrade my plan for the storage here
138:22 - I'm going to do exactly the same it's
138:24 - exactly the same I will need to pay to
138:26 - get logs for the storage also because
138:28 - there is still the duration of three
138:30 - months log retention and for the real
138:33 - time you understood it's exactly the
138:35 - same here it's a paying feature but is
138:38 - the most important to remember it's that
138:40 - every time you want to debug Super Bass
138:43 - you can go to your instance and go to
138:45 - logs down there and click on your
138:47 - postgres instance and in here you will
138:50 - see all the requests if they succeed or
138:53 - not and you will be able to debug just
138:56 - from here so I didn't show you but down
138:59 - here you get some metadata that you can
139:01 - also use which is very useful if you
139:04 - want to know what was wrong in your
139:07 - request what happened and why it failed
139:15 - one of the advantage of postgres is that
139:18 - it's extensible it means that the user
139:21 - can add additional functionalities to
139:24 - progress through what we call extensions
139:27 - and of course with Super Bass we've got
139:29 - access to extensions
139:31 - so when you are on your instance on the
139:35 - left you go to database then you go here
139:36 - to extensions and by default you got a
139:40 - lot of extensions that are already
139:42 - enabled so here you see you get a check
139:45 - and when you click you can turn on or
139:48 - turn off your extension but if you go
139:51 - down there is a bigger list of extension
139:53 - that you can add
139:55 - so what kind of extension would you need
139:58 - well for instance here you get the
140:01 - extension PG underscore net and this PG
140:04 - underscore net here we've got a
140:06 - description it's an asynchronous HTTP
140:09 - extension that helps you to actually
140:12 - trigger the extension to make
140:14 - asynchronous HTTP call extensions in
140:17 - postgres are actually software modules
140:19 - that had extra feature to progress they
140:22 - are developed by the postgres community
140:24 - and most of the time when you want to do
140:27 - stuff inside your functions you may want
140:29 - first to enable an extension to do it
140:33 - because by default here you don't get
140:35 - the asynchronous HTTP call inside
140:37 - postgres you gotta had this extension PG
140:40 - net that will help you later to use it
140:43 - inside a function that you are going to
140:44 - declare Super Bass is built on top of
140:47 - postgres it is supporting postgres so it
140:51 - means that actually you can use
140:53 - everything that comes from postgres so
140:56 - if you find an extension available on
140:59 - postgres there's a lot of chances that
141:01 - it's already inside your super base
141:03 - dashboard if you are looking for more
141:06 - information about postgres extensions
141:08 - you can go on the official documentation
141:10 - of Super Bass and here we've got some
141:13 - explanation so I already told you that
141:15 - it's in the database on the dashboard
141:17 - but down here you got a list of the
141:20 - extensions that are available and If you
141:22 - look here for the extension you can type
141:25 - HTTP here we've got an example with the
141:28 - HTTP client for postgresql allows web
141:31 - page retrieval inside the database so
141:34 - what I propose you to do now is to give
141:36 - an example on how to use an extension
141:39 - alright so right now I'm on my Super
141:41 - Bass dashboard and here we see that I
141:44 - don't get the HTTP extension yet so I'm
141:47 - going to look on the list and we can see
141:49 - here that I got the extension just here
141:52 - on top of me so I'm going to click on
141:54 - switch on the switch and here I'm going
141:57 - to enable the extension for the schema
142:00 - extension so I'm going to click on
142:01 - enable extension
142:03 - and here we are so we've got the HTTP on
142:06 - now we can create a function that is
142:08 - going to make an HTTP call I'm on MySQL
142:11 - editor and I have created this function
142:14 - let's look at it a little bit I got a
142:18 - create or replace function get API data
142:20 - that is going to return to me a Json
142:22 - okay and I got a URL that I'm going to
142:25 - call for an example.com API data and I'm
142:28 - supposed to gather a Json from this API
142:31 - but I would like my function to do this
142:34 - operation
142:36 - so I have enabled before the HTTP module
142:39 - and I'm calling the URL here so HTTP
142:43 - here it's coming from the extension that
142:45 - we enabled before in the database and in
142:48 - extensions so here the function is going
142:51 - to process to the call through the
142:54 - extension HTTP alright this is because I
142:57 - have enabled the extension HTTP that I'm
143:00 - able to create this function to make my
143:02 - call
143:03 - through the URL that I declared up there
143:05 - and this is where I'm going to get the
143:08 - response Json up here okay so the thing
143:12 - is that here I can use my HTTP function
143:16 - because it's already
143:18 - enabled in the extension bar if you
143:21 - would have done it
143:23 - through postgres by default what we
143:26 - would have done actually is to say
143:28 - create the extension if not exist HTTP
143:31 - here we don't need to do that because we
143:33 - are in the Super Bass environment and we
143:36 - don't need to declare this function
143:39 - declaration creation before because we
143:41 - already enabled it on the extension part
143:45 - so you got to understand that through
143:46 - the extension there's a lot of
143:48 - possibilities that you can trigger a lot
143:51 - of modules that you can find that you
143:53 - can add actually to Super Bass okay I'm
143:56 - just showing you today the HTTP one but
143:58 - you can for instance enable graphql with
144:01 - Super Bass okay you can work with the
144:04 - Json web token API for postgres with PG
144:07 - gwtdt which is enabled here the pgpg
144:11 - crypto etc etc what you got to do is to
144:13 - look for an extension that is doing the
144:16 - job you are looking for that's the best
144:18 - solution to do and you can look to it on
144:21 - the Super Bass documentation here to see
144:24 - which are the extensions that are
144:26 - enabled for instance here we've got the
144:28 - Geo extension that we can look through
144:31 - we got the data set one etc etc but you
144:35 - can also look at the postgres regular
144:38 - extensions that are available through
144:40 - Super Bass of course
144:47 - let's talk about real time and with
144:49 - Super Bass we can do real time so what
144:52 - is real time
144:54 - here I got an application that I have
144:56 - created and I'm going to push online
144:58 - okay
144:59 - and in this application you will be able
145:01 - to write messages and hear those
145:02 - messages will be like in real time like
145:05 - a chat okay so what I want to do here is
145:08 - to create first a table a new table and
145:11 - this table is going to be called posts
145:14 - okay and on this post I would be I will
145:17 - have an idea created at okay and what I
145:20 - want to do I want to actually add the
145:23 - model of my message so here we see that
145:27 - we've got a name so I'm going to add a
145:29 - name and here is going to be a text okay
145:32 - and then I will have a description okay
145:35 - and here it will have a text also so
145:39 - here I want to say it's not going to be
145:41 - nullable for both of them we want to
145:44 - have some content and here we are so I'm
145:47 - going to click on save all right I got
145:49 - my post table but I didn't enable real
145:52 - time here so what I'm going to do I'm
145:54 - going to click on database here I'm
145:57 - going to go on the table post which is
146:01 - here and I'm going to click here you see
146:03 - we've got enable real-time broadcast
146:05 - changes on this table to Auto write
146:08 - subscriber so I'm going to do this I'm
146:11 - going to click on Save
146:13 - and when it's done what I need to do is
146:16 - to go on authentication on policies and
146:19 - I need to add some actually some
146:22 - policies to my table so I'm going to
146:24 - click here on add a new policy I will
146:27 - say that I will enable the read access
146:29 - to everyone and I don't need anything so
146:31 - here I can select the role Anon so I'm
146:34 - going to click on review save policy so
146:37 - everybody will be able to select the
146:40 - post now I want to say that I want that
146:43 - everybody can be
146:45 - um actually a poster so I'm going to
146:47 - click here on news template here we are
146:50 - and I'm going to unzoom a little bit and
146:52 - I'm going to remove here authenticated
146:54 - okay I'm going to put Anon and I'm going
146:57 - to click on review so now everybody on
147:01 - the post table will be able to get the
147:04 - messages and to insert them but before
147:07 - we send our message we need to have a
147:08 - look a little bit at the code so what do
147:11 - I have here I have an insert here that
147:15 - actually is inserting the new message
147:18 - that I get up here okay and what I do
147:21 - here I'm pushing the message of course
147:24 - locally if we've got data in return so
147:28 - that's the first thing let's see if we
147:30 - can push messages into our posts table
147:34 - okay let's go let's say test test I'm
147:37 - going to click Send I'm going to update
147:39 - and here we are we've got test here and
147:42 - if we look at our database we've got a
147:45 - test down here also so I'm going to
147:47 - delete this row let's say that now what
147:50 - I would like to do is when I put my uh
147:53 - actually my message here I would like to
147:55 - him to appear here so what I can do is
147:58 - to create a second function called Fetch
148:00 - message that we can have down there and
148:02 - call it once I have sent my message
148:06 - that's the first solution and the second
148:08 - solution is of course to subscribe to
148:12 - the table post so here with that code
148:15 - with client.channel and here we are
148:18 - going to subscribe to
148:19 - a custom channel so here it's going to
148:22 - be the name that I give it can be
148:23 - anything I can say on to channel on
148:26 - postgres changes I'm going to subscribe
148:30 - to any event here with the um star on
148:34 - the schema public and on the table post
148:37 - so I'm going to console log my payload
148:40 - here just to see if I got an answer
148:42 - every time I'm going to push a message
148:44 - here it is supposed to answer so I'm
148:48 - back in my app now I'm going to say code
148:50 - with geom and I'm going to type hello
148:53 - there and I'm going to click on send
148:56 - and look at this I got an answer from my
148:59 - subscribe and I got the message down
149:01 - there so if we look here we've got an
149:03 - answer from the table in real time
149:06 - because we enable real time before
149:09 - and because we put this code a client
149:13 - channel on we are listening we are
149:15 - subscribing down here to the table post
149:19 - that we've got here and in real time
149:22 - when there is some changes here we can
149:25 - see that we are notified so what I'm
149:28 - doing here I'm pushing to my message
149:30 - list okay the new message on the payload
149:34 - so this is why I got this message here
149:38 - and if I'm getting back to my
149:40 - application we can see that my message
149:42 - has been recorded if you want to test
149:45 - this real-time functionality on my own
149:47 - database
149:48 - you may go to Super Bass
149:52 - minusrealtime.netlyphi dot app here you
149:55 - can try in real time to post messages
149:58 - and maybe you will see some other people
150:00 - posting messages at the same time
150:08 - Edge function became really popular the
150:11 - last years and with Super Bass you can
150:13 - of course create those serverless
150:15 - function that helps you to trigger some
150:17 - operations let me give you an example
150:19 - you have a front-end application and you
150:22 - need to create a payment with stripe you
150:25 - will need to create a an API actually
150:27 - between your client and stripe to
150:30 - trigger this payment intent how would
150:33 - you do you would create a node.js
150:34 - application that you would deploy
150:36 - somewhere and it's a lot of work it's a
150:38 - lot of time and you may not have that
150:41 - time well the solution is to create
150:43 - actually an edge function to do that but
150:45 - you could also use this ad function to
150:47 - do a lot of other stuff such as creating
150:49 - a bot for Discord a bot for Twitter or
150:52 - maybe a bot for telegram you have to
150:54 - understand that this Edge functions are
150:57 - serverless and they help you to deploy
150:58 - really quickly a server that where you
151:01 - are going to trigger some actions
151:03 - alright so in my Super Bass instance I
151:07 - go here on edge function and what I can
151:09 - see here is that I got no Edge function
151:12 - yet so I would need to create my first H
151:15 - function in my Super Bass project so
151:19 - back here I got my Super Bass project
151:21 - and what I'm going to do here I'm going
151:23 - to copy paste this Super Bass function
151:25 - new hello world but before we do that I
151:28 - propose you to look at the documentation
151:31 - okay so H functions here are server side
151:34 - type script function distributed
151:36 - globally at the edge close to your user
151:39 - so you can use third-party Library like
151:42 - stripe but also Dino for instance and
151:45 - this is what we're gonna do if you want
151:46 - to have some examples you can go down
151:48 - there with Super Bass yes course headers
151:50 - react native flutter etc etc OG image
151:54 - generation and storage CDN caching
151:57 - there's a lot of stuff that you can do
151:59 - with Edge function and if you are
152:02 - looking for some project done with Edge
152:04 - functions you can go on the Super Bass
152:07 - GitHub repository and here on the
152:09 - examples here on the Super Bass function
152:11 - you get a lot of examples so for
152:13 - instance here we see that we've got Edge
152:15 - function with open AI with open graph
152:18 - paper tier if you want to do some boat
152:21 - or some scrapping
152:23 - streams striper books which are really
152:27 - useful when you want to do some payments
152:28 - and telegram but but there are a lot of
152:31 - other projects that you can look at us
152:33 - we are going to start by creating our
152:35 - own function so I'm going to copy paste
152:37 - my Super Bass function new hello world
152:39 - so as we can see I created a super base
152:42 - folder with a subfolder called function
152:45 - with the name of my new function that I
152:48 - created so here when I type new after I
152:52 - can put the name I want it will give the
152:54 - name of the function all right so how
152:56 - does it work I got an index.ts file that
153:01 - is created by default and here we see
153:04 - that we've got a Geno server here so
153:07 - we've got some commands here and down
153:09 - here we have the command if we want to
153:12 - invoke our function all right so right
153:16 - now this function is doing what it's
153:18 - importing serve from Dino here we've got
153:21 - Dino
153:22 - that is exported from a Content delivery
153:25 - Network all right from the official
153:27 - dino.land website and we've got the
153:30 - function serve and here we serve a
153:33 - node.js application okay a dino is Yes
153:36 - actually here so it's really simple uh
153:39 - in our request okay we are supposed to
153:41 - get uh the name in the request as a Json
153:44 - then we create an object and we return
153:47 - as a response this object so how does it
153:51 - work well now we've got this function
153:53 - right now our Super Bass instance
153:56 - doesn't know okay what we need to do is
153:59 - to deploy this function from our project
154:01 - to our Super Bass instance so to do that
154:05 - I'm going to get back and here we see
154:07 - that we've got deploy your function so
154:10 - I'm going to copy paste this I'm going
154:13 - to get back to my application and right
154:16 - now I am logged in on my Super Bass
154:19 - instance if you are not you will have to
154:21 - type Super Bass login or right and down
154:24 - here it will ask you the access token so
154:27 - if you don't have it you have to click
154:29 - on this link to open it and here you
154:31 - have to generate a new token so I'm
154:33 - going to click here this name is going
154:35 - to be my new token let's say okay I'm
154:38 - going to click on generate a token and
154:41 - here we are so here be safe I get this
154:44 - token I have to copy this access token
154:47 - somewhere and to keep it because it's
154:49 - really really important I'm going to
154:51 - copy paste and I'm going to get back and
154:53 - I'm going to enter my access token here
154:55 - and here we are I'm logged in on my
154:58 - Super Bass instance so now what I can do
155:00 - is to get back here and copy paste again
155:04 - my Super Bass function deploy hello
155:06 - world so I'm going to get back and I'm
155:08 - going to copy paste Super Bass the
155:11 - functions deploy hello world be safe
155:14 - hello world here is a reference to my
155:16 - folder so if you gave another name you
155:19 - have to change the name here okay so I'm
155:22 - going to deploy it directly from my code
155:26 - editor here from my project locally to
155:29 - my Super Bass instance I'm going to type
155:31 - enter
155:32 - and here it says building hello world
155:34 - and then I got the message deployed
155:36 - function hello world on the project etc
155:39 - etc all right
155:41 - when I get back in my Edge function I
155:44 - got my Edge function here so what I can
155:47 - do is just copy and paste this URL I'm
155:49 - going to open it inside my browser and
155:52 - why do I got this missing authorization
155:55 - error of course because here I cannot
155:58 - call my Super Bass function if I'm not
156:02 - authorized
156:03 - all right remember that you will need
156:05 - the token if you keep the authorization
156:08 - with GWT so you get the token down here
156:12 - you would copy paste it inside your
156:14 - header otherwise what you can do just to
156:17 - test is to click here on the function
156:19 - itself and here you get some information
156:22 - about the name if you want to change
156:24 - your name then you get some other
156:26 - information and down here you got infos
156:28 - GWT verification going to disable this
156:31 - just for the example please don't do it
156:33 - for the function that you use all the
156:35 - time otherwise anybody could call your
156:39 - function okay so I'm going to click on
156:40 - Save now I'm going to call again my
156:43 - endpoint here I'm going to do a post and
156:45 - I'm going to post the name because
156:46 - remember on our function we need to
156:49 - catch the name okay and it's supposed to
156:51 - return to us hello name so let's start
156:53 - let's try to call the endpoint itself we
156:55 - just deployed I'm going to click on send
156:57 - and look at this here we are we've got
157:00 - our message all right so here we see
157:02 - that our server is doing some operation
157:05 - for us and that's really cool let's
157:08 - clean this a little bit and what we
157:10 - would like to do so I'm going to keep
157:11 - keep this also what I would like to do
157:14 - is maybe to call my Super Bass instance
157:17 - so let's give an example right now I got
157:20 - this function in a word running and what
157:23 - I would like to do is actually to call
157:27 - my database here my tables and let's say
157:31 - that I would like to get for instance
157:34 - the post so I'm going to look at the
157:36 - post and here we've got a lot of posts
157:39 - previously of a lot of people that wrote
157:43 - here a lot of messages to test the real
157:46 - time so let's say that I would like to
157:48 - call here on my request
157:52 - my Super Bass instance and get the post
157:56 - by the edge function it's totally
158:00 - possible what I would do at first is to
158:02 - call create client from the Super Bass
158:04 - SDK that I'm calling up here from a
158:07 - Content delivery Network then what I
158:09 - would need to do is here to pass some
158:12 - Secrets some environmental variables
158:15 - what we need to do here is to create a
158:18 - new file here it's going to be an of
158:21 - file and I'm going to copy paste some
158:23 - keys that will help me to access to the
158:26 - Super Bass instance the first one is
158:28 - going to be a Super Bass URL so here I'm
158:31 - putting an underscore on the top of it
158:33 - to don't get any error and then it's
158:35 - going to be the Super Bass Service key
158:38 - if I want to find those keys I can go to
158:41 - Project settings API here I got my URL
158:44 - and down here I need to get what we call
158:47 - the service role key here it's going to
158:50 - give me all the access okay so now I can
158:53 - create my client when I initiate my
158:56 - Super Bass function so I'm going to use
158:58 - my Super Bass URL that I got in my own
159:01 - file here locally in the same folder
159:04 - then I got the Super Bass Service keyhub
159:06 - here and I'm creating the client down
159:08 - there so I go on my API docs I got my
159:11 - post and let's say that I want to have I
159:13 - want to read all the posts so what I'm
159:16 - going to do I'm going to click here let
159:18 - data post so I'm going to go down here
159:20 - here we are and I'm going to actually
159:23 - return so here I'm returning the data
159:27 - exactly here so what I can do is instead
159:30 - returning an object with data anyway and
159:33 - here I can return my post okay so what
159:36 - I'm going to do now is that when I am
159:39 - going to request hello world it's going
159:42 - to return to me the yellow with name
159:44 - whatever or let's say that I'm going to
159:45 - put by default Geon because I don't want
159:47 - to put game all the time and then I'm
159:49 - going to return all the posts from my
159:52 - Super Bass instance so you understand
159:54 - here that I'm using the SDK inside my
159:58 - Super Bass Edge function to provide some
160:00 - actions so here I'm just selecting but
160:02 - let's say that later you would have an
160:04 - API to do some operation some crude
160:07 - operations so create read update or
160:09 - delete you can use the SDK directly from
160:12 - here but the thing here is that I don't
160:15 - get my of file that is deployed
160:18 - immediately on my function so what I
160:20 - would need to do is here to push my
160:24 - environmental variable to my Super Bass
160:27 - instance and to do that we are going to
160:30 - use the Super Bass deploy secret
160:33 - function so I'm going to type Super Bass
160:35 - secret set
160:37 - minus minus of file and here what I need
160:40 - to do is to go to the super base folder
160:43 - so here it's in Super Bass function
160:45 - hello world and here of course I need to
160:48 - type of okay just here I need to type
160:51 - off okay so I'm going to type enter and
160:55 - when I type enter I got an arrow called
160:57 - Super Bass link so what I want to do I
160:59 - want to type Super Bass link and here I
161:02 - need to enter my database password if I
161:05 - look for the password what I need to do
161:07 - is to go to Project settings database
161:09 - and here I got a password and it's
161:12 - written the password you pre you
161:13 - provided when you created this project
161:15 - if you get trouble you can reset the
161:18 - database password I get my password so
161:20 - now I can type Super Bass link and I
161:23 - want to pass the password so I'm going
161:24 - to type minus p and I'm going to type my
161:26 - password and type enter okay now I can
161:28 - come back on the command I entered
161:30 - before I'm going to type enter
161:33 - and here we are finished super bass
161:35 - secret set so now I can deploy again so
161:39 - again Super Bass function deploy in a
161:42 - world
161:43 - it's going to build again
161:47 - and at the end here we are we've got our
161:49 - hello world function working okay here
161:53 - we are let's call again our function I'm
161:55 - going to click on send
161:57 - and here we are so I got my message from
162:00 - the server and look at this I got the
162:03 - list of the post that you posted on the
162:07 - real-time application that I have
162:09 - created before so what we did here we
162:12 - created a function
162:14 - that is calling our Super Bass instance
162:16 - and that is providing to us some
162:19 - operations that we can do
162:21 - so you got to see the function like a
162:25 - dino server that you can call anytime to
162:29 - do some specific operation okay let's
162:32 - get back on everything that we've done
162:34 - since the beginning we created a
162:37 - function that we deployed immediately on
162:39 - our Super Bass instance
162:42 - then we can request this function to do
162:46 - some operation what is this H function
162:49 - this H function is actually a dino
162:51 - server and this Dino server can do
162:53 - anything that a backend could do it can
162:56 - do many operation it can be connected to
162:59 - stripe it can be connected to upspot it
163:02 - can be connected to many other libraries
163:04 - everything that is an API actually we
163:07 - can make call we can make asynchronous
163:09 - operation but also we can call our Super
163:12 - Bass instance and use the SDK from Super
163:16 - Bass exactly like we do
163:18 - in a front-end application to do some
163:21 - operations so here we've got the select
163:25 - from post that is returning to us the
163:28 - post of the previous users okay so here
163:32 - the edge functions
163:34 - are playing the role of a backhand
163:37 - serverless okay it's a distant backend
163:40 - that you are going to call
163:42 - I'm not going to show you in this lesson
163:44 - how to use it locally because you would
163:46 - have to work with Docker and you would
163:48 - have to do some more configuration and
163:51 - in the description I'm giving you the
163:53 - link to work with Edge functions locally
163:56 - it's a video from the Super Bass team
163:59 - and it's a very good tutorial from torch
164:02 - Thor is a member of the Super Bass team
164:04 - but you have to think about Edge
164:06 - functions like a way of creating really
164:10 - fast a dino server to do some operations
164:13 - for you
164:19 - if you are familiar with the concept of
164:21 - webbooks you get to know that with Super
164:23 - Bass you can also create some web books
164:26 - web books are a way for two apis to
164:29 - connect together and to exchange some
164:31 - data to communicate every time there is
164:34 - an event and of course inside of Super
164:37 - Bass you can do the same
164:39 - inside of my Super Bass project what I'm
164:41 - going to do I'm going to click here on
164:43 - database then I'm going to click here on
164:46 - webbooks okay and then what I have here
164:50 - is database webbooks database webos can
164:53 - be used to trigger serverless function
164:54 - or send requests to an HTTP endpoint so
164:59 - I'm going to click on enable webbooks
165:01 - and then I can click on create webbook
165:04 - but before we create the Web book I
165:06 - would like to create an endpoint with an
165:08 - API so what I did here is I created an
165:11 - xgs 13 application okay and I got an API
165:15 - endpoint here on my route and what it
165:18 - does is just have two endpoints a get
165:21 - endpoint where I get data in return and
165:24 - data up here will have the data sent by
165:29 - my Web book okay this is just an example
165:31 - and this is just to show you how you can
165:33 - work with an API then here down there I
165:37 - get a post endpoint and when I post here
165:40 - I'm updating the data up here so what I
165:44 - got here as a response is a status 200
165:46 - data and a message down there so what
165:50 - I'm going to do I'm going to deploy this
165:51 - application on Versa and I'm going to
165:54 - check if it is working all right I'm on
165:56 - Verso I deployed this application that I
165:59 - got here it's totally dumb there's
166:02 - nothing on it right now but here up here
166:04 - I got an endpoint I'm going to type
166:06 - slash API and look at this here we are
166:09 - right now I got just an email with a
166:12 - record here so what we would like to do
166:14 - is to post on this endpoint from my
166:18 - webbook so I'm going to get back up here
166:21 - I'm going to click on create a Web book
166:23 - and here I'm going to say for instance
166:25 - it's going to be new user let's say new
166:29 - user Web book this way here we are so
166:32 - I'm going to click on here and what I'm
166:34 - going to to do actually I can just pause
166:38 - and go to the table public users for
166:41 - instance or I can go on my auth users up
166:44 - here so let's say I'm going to go on
166:46 - auth users and what I'm going to do I'm
166:48 - going to say that on the events insert
166:50 - down here I want to do an HTTP request
166:53 - so of course you can do update you can
166:55 - do delete etc etc down here we see that
166:59 - I can also call a Super Bass Edge
167:01 - function but there are a lot of other
167:03 - examples online uh to to watch if you
167:07 - want to create a Super Bass Edge
167:08 - function and what I'm going to do I'm
167:10 - going to click on method post and here
167:12 - I'm going to put my endpoint okay I got
167:15 - the content type application Json here
167:17 - we are okay so actually it's not going
167:20 - to be a new user Web book it's going to
167:23 - be let's say last user subscribe that's
167:27 - what I want to catch okay I want to
167:29 - catch the last user that subscribe on
167:31 - this webbook okay so here I can go down
167:34 - I get my HTTP request I'm going to post
167:36 - and I'm going to click on create webbook
167:40 - and here we are so right now I get this
167:42 - Web book that is running and on insert
167:45 - to a new user so I can click here on
167:47 - edit hook on insert on the table half
167:50 - users it's supposed to update here the
167:53 - data that we will get and remember on my
167:55 - endpoint I'm going to save the data in
167:58 - here in this data I'm going to go on
168:00 - authentication I'm going to have a new
168:03 - user to my table and let's say it's
168:05 - going to be Aurelia at yopmail.com
168:07 - whatever I'm going to click on invit
168:10 - user and here we go so now let's check
168:14 - if my application on version has been
168:18 - called click on API and look at this
168:21 - here we are I got the whole data coming
168:24 - from actually the user so here it's
168:27 - really bad to do that okay because here
168:29 - it's public you should never record
168:31 - something like this I should only record
168:33 - the email for instance so I'm going to
168:36 - um actually I'm going to fix this right
168:38 - away right I did an update up here when
168:41 - I'm gonna get my endpoint I just want to
168:44 - have the
168:45 - data.record.email okay so here you get
168:47 - the schema it was coming from the full
168:50 - set of data that we had before we don't
168:52 - want to deliver all the data here all
168:54 - right it's deployed now I'm going to add
168:56 - a new user aurelia12 at yopmail.com I'm
169:00 - going to click on invit user and here
169:03 - we've got Aurelia in the list
169:06 - now I'm getting back here I'm going to
169:08 - update my endpoint
169:10 - and here we are we've got our last user
169:13 - Aurelia on my application on versal HUB
169:16 - here okay so up here we see that I got
169:20 - my latest user as we saw we can create
169:23 - web books to trigger some operation to
169:26 - trigger some calls when we insert update
169:29 - or delete any table and this is really
169:32 - useful because down here we can see that
169:33 - we can send HTTP request or we can call
169:36 - Super Bass Edge function with different
169:38 - method and we can give parameters to it
169:41 - so web books are a feature that I like a
169:45 - lot that I use a lot personally because
169:46 - I send data to a lot of other endpoints
169:49 - you can imagine a lot of stuff with that
169:51 - that's really useful
169:58 - in this video I'm going to show you how
170:00 - to self-host a Super Bass instance so
170:03 - basically what we can do we can run
170:05 - super bass locally so what we will need
170:07 - to do is to install first Super Bass to
170:11 - run some commands and then we will be
170:13 - able to launch our Super Bass instance
170:16 - locally on my terminal I'm going to type
170:19 - Brew install and here I'm going to type
170:22 - Super Bass slash tab slash Super Bass
170:25 - I'm going to type enter and it's going
170:27 - to install on my machine okay it's done
170:29 - nothing right now my Super Bass package
170:33 - that I need so I'm fetching super bass
170:35 - once it's done what I need to do is to
170:37 - type superbase login
170:39 - and here I need to get a token so I'm
170:42 - going to open my Super Bass instance
170:44 - then what I need to do is to generate a
170:46 - new token and let's say it's going to be
170:48 - local uh local let's say local I'm going
170:51 - to generate this new token and here we
170:53 - are so I got my token which is here I'm
170:55 - going to copy paste get back and I'm
170:58 - going to enter my token now when it's
171:00 - done I'm going to create a new folder so
171:02 - here it's going to be for instance my
171:06 - Super Bass local project okay I'm going
171:09 - to type enter then I'm going to enter
171:11 - into my Super Bass local project then
171:14 - I'm going to type Super Bass init I'm
171:17 - going to type init and then it's done
171:19 - and what I want to do I want to type
171:21 - Super Bass start okay so I'm going to
171:24 - type enter and here I'm supposed to get
171:27 - an error okay so if you got an arrow
171:29 - what you need to do is to install Docker
171:33 - because here super bass start need to
171:36 - have a Docker instance to run as you see
171:38 - up here if you don't know Docker yet
171:40 - it's a tool that helps you actually to
171:43 - run containers to run instances of code
171:46 - inside your machine okay so we need to
171:50 - install Docker here so you can install
171:52 - Docker desktop or you can go more down
171:55 - and find a download link Docker is used
171:58 - by many companies it's a very useful
172:01 - tool if you want to know more about
172:03 - Docker I'll let you look online
172:05 - once you've installed Docker you're
172:06 - supposed to have something like this
172:08 - back into the project I'm going to type
172:10 - again Super Bass then start I'm going to
172:12 - type enter and here it's going to pull
172:14 - the images and it's going to run all the
172:18 - containers that I need to make my
172:20 - instance running so I should wait a
172:21 - little bit because sometimes you can
172:23 - then take time to pull everything and to
172:26 - complete the whole project but once it's
172:28 - done we will get a message that our
172:30 - instance will be running all the time
172:32 - every time there will be Docker that
172:35 - will run okay so it's supposed to be
172:38 - done we've got several URL here the
172:40 - graphql URL the API the DB URL which is
172:43 - our postgres instance so for those who
172:46 - really look at where is the postgres
172:49 - instance you get it here there is also
172:51 - the studio URL so the studio it's simply
172:54 - the dashboard made with nextgs and
172:56 - Tailwind that gives you access to the
172:59 - Super Bass instance okay you got your
173:01 - Anon key you got your service roll key
173:03 - you got everything in here so I'm going
173:05 - to open my studio and look at this here
173:09 - we are so we've got our local Super Bass
173:12 - instance running so I'm going to show
173:15 - you the URL here so it's running on my
173:18 - localhost and I can use the default
173:21 - project that I got here all right so I'm
173:24 - running super bass locally in this
173:27 - machine I got my table I got my SQL
173:31 - editor I got my database with all the
173:34 - main features that we've got usually the
173:37 - authentication but it means some
173:40 - specification here some features that we
173:42 - have it's going to come up with time but
173:45 - basically here I can run super bass
173:48 - locally with the basic feature that we
173:51 - have on the cloud on the
173:55 - app.superbase.com free instance or a pro
173:58 - instance that you get so when I go on
174:00 - Docker here we can see that I got my
174:01 - Super Bass local project which is
174:03 - running with several different okay
174:06 - containers so the main question now is
174:09 - how to migrate from local here to a
174:13 - Super Bass instance if you want to move
174:16 - all your work from here somewhere else
174:18 - you can go to the guide of superbass.com
174:22 - okay the guide is on the URL
174:25 - superbass.com docs guide CLI local
174:29 - development and here you got more
174:31 - information why I'm not doing a video
174:33 - about this because there are already
174:35 - this guide so here it's everything that
174:37 - we've done super Bassy needs to play
174:39 - base start etc etc and down there you
174:42 - get already a video about database
174:45 - migration okay so here you can look at
174:48 - this video if you want to migrate your
174:49 - database it's not really complicated
174:52 - first you need to create a migration
174:54 - file by typing super bass migration blah
174:57 - blah
174:58 - then you can add the SQL to your migrate
175:02 - migration file sorry and then you apply
175:05 - your migration okay so it's really easy
175:08 - to do so imagine one day you would have
175:10 - a Raspberry Pi or some computer running
175:12 - there you could run your own Super Bass
175:15 - instance locally on your machine and
175:19 - that's what gives me the most hope in
175:22 - this product is that super bass gives
175:25 - you actually the power to have the full
175:27 - control the full access on your database
175:32 - personally I will still always use the
175:36 - version on the cloud because it's really
175:38 - efficient I will have no maintenance to
175:40 - do but at first to test your project and
175:42 - to work with Super Bass
175:43 - I really advise you to create a free
175:46 - project on superbass.com and if you want
175:50 - to go further you can host your own
175:52 - Super Bass instance on your machine
175:54 - thank you very much for following this
175:56 - course Please Subscribe and see you next
175:59 - time bye