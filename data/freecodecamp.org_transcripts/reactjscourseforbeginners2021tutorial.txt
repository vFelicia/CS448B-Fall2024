00:00 - react is one of the most popular JavaScript
frameworks in this comprehensive and well
00:04 - made course. Thomas Weidman falck will teach
you everything you need to know to start using
00:09 - react. Hello, and welcome. I'm Tomas vevo
to developer from Sweden. And thank you for
00:17 - enrolling this course. I'm actually a little
bit of extra proud on this one, because I
00:21 - created a lot of courses during the years
now, but this one is the first ever course
00:25 - I created because I love react. And I wanted
to create courses. So this is the third iteration
00:31 - the third version, meaning that I've improved
it a lot and listened to you guys on what
00:36 - stuff you want in the course. So I think it's
actually really good. There's always room
00:41 - for improvement, of course, but this one,
I really enjoyed this one. And it was fun
00:45 - making it also. So hopefully, you'll find
a lot of basic stuff and intermediate stuff,
00:51 - and maybe some advanced stuff to learn in
this course. And I think we have to get started.
00:56 - So let's do that. Let's take a look at the
application that we're building in this course.
01:03 - And it's a nice little move application that
is based on the Movie Database API. So you'll
01:08 - have to create an account at the Movie Database.
But we'll do that in the next video. So I
01:14 - thought I could show you the application so
that you have a little feeling about what
01:18 - we're going to build in this course. And this
one is always going to show the most popular
01:22 - movie here we have this hero image. So we're
going to create this one. And we also have
01:26 - some text, and we have a header up here also,
then we can search for movies, or examples,
01:32 - Star Wars. And we'll see all the movies here.
So that's how the basic functionality of this
01:39 - application is. And if we click on the movie,
you can see that we get all data from that
01:43 - movie. So that's nice. We're going to show
the actress and also some information about
01:48 - the movie itself, we can see the revenue,
the budget, and the running time, for example.
01:52 - And here, you may think that you can also
click on actors. And yeah, of course, we could
01:57 - do that. But I have to limit this tutorial
somewhere. So this course is not going to
02:01 - go there. But it's a great foundation, if
you want to build upon this application. So
02:07 - you can add in the functionality of showing
information about the different actors and
02:11 - stuff like that. We also have this little
breadcrumb menu appears, we can go back to
02:16 - the homepage. And in this version of the course,
this is version three, I'm going to show you
02:21 - how to create the styles also are going to
be fairly quick when I show the stars because
02:26 - I still want to have the main focus on react
itself. So that's something that's new in
02:32 - this version three of this course. And of
course everything is going to be responsive,
02:39 - we're going to create that one also, as you
can see here, the grid, for example, with
02:43 - the movies, it changes depending on the viewport
size. So that's nice. So it's a fully working
02:50 - application. And to be honest, I'm quite proud
of this design, I created the design myself
02:56 - course I'm both a developer and the designer.
So that's why I love doing design stuff also.
03:01 - And I think it looks pretty neat. Actually,
I've updated it slightly, since two previous
03:07 - versions to look a little bit more modern.
But I think it's mostly Yeah, I changed some
03:12 - colors, for example, on the bottom and stuff
like that. Alright, so that's the application.
03:18 - In the next video, I'm going to talk about
the Movie Database API, and how you can register
03:22 - to get your own free API key that I'm going
to use in this course. Okay, so let's talk
03:30 - about the Movie Database API. That's the API
that we're going to use in this course. And
03:36 - the Movie Database has a great API for fetching
a lot of movies, TV shows and stuff like that,
03:42 - we are going to focus on the movies. So that's
what we're going to do here. And you can sign
03:47 - up for a free account at the Movie Database.
So just go to the movie db.org. And click
03:54 - Join TMDB. And then you can fill out a username
and password an email and create an account.
04:00 - And when you have created an account, you
probably get an email where you have to verify
04:04 - yourself before you can log in. But when you
have created your account, make sure that
04:09 - you go back to the movie DB and click on login.
And then you enter your username and password
04:14 - just as a regular site that you log into.
All right, and then you're presented with
04:19 - this dashboard kind of thing. I think it's
a dashboard. And the only thing you have to
04:23 - do is go up here to your profile and click
on this round button up here. And then you
04:28 - have the settings here so she'll settings.
And then at the left menu here, you can see
04:35 - that you have something that's called API.
So click on API, I guess I probably have to
04:39 - blur this ones out because I don't want to
show you my own API key. This is the one that
04:45 - we using API key version three auth. So this
is the one that we're going to use. So make
04:49 - sure to save this somewhere for now because
we are going to add it to our application
04:54 - in a little while. So make sure that you have
easy access to this one as we're going to
04:59 - paste this in into our application in a little
while when we have bootstrapped our application
05:04 - with something that's called create react
app. And I'm going to talk more about that
05:08 - in a little while. Before we start creating
our application, I just want to talk a little
05:15 - bit about react and what it is. So if you
go to the React js.org, you can read more
05:20 - about react. And this is a great starting
point, if you just started out with react,
05:26 - they have different documentation, they have
tutorials, and a blog and stuff like that.
05:30 - And you can read everything that you need
to know to get started with react. So I tried
05:35 - to make this course kind of beginner friendly.
But react is kind of at least intermediate
05:42 - in its own nature. So it's hard to make it
really, really beginner friendly. It also
05:48 - depends a lot on how you learn stuff, I love
to learn stuff in this product oriented way,
05:53 - where I just build some product and learn
along the way. So I only create courses on
05:58 - how I want to learn stuff myself, but it's
very individual. So some may think that it's
06:04 - not beginner friendly at all, and so many
things that it is. That's why I also recommend
06:09 - to check out react js.org to read about the
very, very basic stuff, at least in react.
06:16 - So what is react? Yeah, React is a JavaScript
library for building user interfaces, as they
06:21 - tell you here, I think, actually that this
sentence is a little bit misleading, because
06:26 - you're using react for so much more than to
just build a user interface. For example,
06:31 - I build a lot of stuff, I build small games,
I build a Pac Man game, for example. And I
06:38 - build all the logic in react also. So it's
not only the view layer, so it can be a little
06:43 - bit misleading here, I think. Just thinking
about that you create the components for the
06:49 - view. But that's not the case, you can use
react for so much more if you want to do that.
06:55 - And in this application, we're building everything
in react. So we have all the API calls and
06:59 - everything it's done from react. So that's
how we're going to use it in this course.
07:03 - And react uses declarative peridinium. I don't
even know if I pronounced that correctly.
07:09 - But hopefully, you know what I mean. So react
is declarative. But for example, jQuery is
07:15 - imperative. And when something is declarative,
you explain, in this case, the user interface,
07:21 - how it will look, you don't have to tell it
exactly how you want to achieve that look,
07:27 - you just tell it that we want our UI to look
in a certain way. And then react takes care
07:32 - of the rest. For example, in jQuery, we have
to grab the DOM elements. And we have to modify
07:37 - the DOM elements. And we have to create them
row by row, and then attach the element to
07:42 - the DOM itself. So there can be a lot of code
involved in doing something simple, actually.
07:48 - But in react, for example, we have as the
Savior, it's component based. So we create
07:52 - a component, and then we just tell react to
use that component. And it will render out
07:57 - that to the dome for us. And this will be
more clear as we go along in the course and
08:01 - create our own components and create the application
itself. So don't worry if you don't understand
08:07 - everything right now. So it's declarative,
its component base and learn once write anywhere
08:13 - yet as to tell you here, they don't care about
the rest of the technology stack. So that's
08:18 - great, you can use a lot of stuff in combination
with react. So what is a react component?
08:25 - Yeah, we can take a look here, for example,
here they create, this is a class and this
08:29 - is kind of, I like to call it the old way,
the classes still exist, I don't use them
08:35 - anymore. And in this course, we're going to
focus on creating functional components. And
08:39 - I'm going to tell you more about that later.
And in the end of the tutorial, when we're
08:44 - finished application, I also going to show
you how to convert some of the components,
08:48 - the stateful components to class components,
just in case, you need to know how to create
08:54 - class components also, because the reality
is, if you start working for a company or
08:59 - a client, there may probably be some components
that are still class components. Because there's
09:04 - a lot of applications made in react that's
made before we had state in functional components.
09:10 - That's why you had to had a class before to
have stayed in them. And we're going to talk
09:15 - about that later also. So this is a component
they created with a class and they call it
09:20 - Hello message. And as you can see here, they
using something that's very much like regular
09:25 - HTML, they have this tag here with a Hello
message. And this name is a so called prop
09:31 - the sending in, and we're going to talk more
about props also later, so don't worry about
09:35 - that. But this is actually not HTML. It's
something that called JSX. And that's something
09:42 - that we're also going to learn in this course.
So we create the component here, we tell it
09:47 - to use this component and react will take
care of the rest and create this div with
09:52 - our text Hello. And in this case, it's going
to be the name that we send in with a prop.
09:56 - So the name is going to be Taylor. It's going
to type out Hello Taylor. As you can see here.
10:03 - So this is very, very neat with react, we
can reuse these components in our application.
10:08 - So that's short on what react is. And as I
told you, we're going to learn a lot more
10:13 - stuff in the course itself when we create
application. And hopefully, at the end of
10:18 - the course, you'll have more understanding
of react and how awesome it is. Because I
10:23 - really love react, I'm really passionate about
using react. And actually, this course is
10:29 - also something that I'm very passionate about.
Because this is my first ever course I created.
10:35 - And this is the third version, meaning that
I have listened to people that have enrolled
10:39 - this course before and changed stuff and added
stuff to make it more optimal and more perfect.
10:46 - And hopefully, you will enjoy this course.
For this course, I provided you with a sip
10:54 - file that you should download before you start
the course. And this zip file contains a few
10:59 - folders here, as you can see, and it may look
maybe a little bit different when I am the
11:04 - recording of this course, because I haven't
really recorded it yet, but I think it will
11:09 - look this way. But if it looks a little bit
different, it's okay. Hopefully you can read
11:13 - the folder names and understand what they
for. So I'm going to provide you with a folder
11:17 - that's called files to be copied to the project
folder. These are files that we're going to
11:22 - use for the course. So I have created a file
for us the setups API, so we don't have to
11:27 - write our own functions for fetching the data.
So I'm going to show you that when we fetch
11:32 - data from the API, I have a config file and
a helpers file. And I'm going to talk more
11:37 - about those later also. And then I have a
few images that we also need for the course.
11:42 - So that's why I have this folder that we're
going to copy over to a project when we have
11:46 - created it, and the public folder, the index
dot HTML file, I have this here, because I'm
11:52 - using a Google Font for this one. So I've
already provided that one in the index dot
11:56 - HTML, so we don't have to do that ourselves.
So that's the one that we have to copy later.
12:02 - And I'm going to show you that when the time
comes. And you're also going to have two options.
12:07 - If you don't want to create everything from
scratch, when I set up the application, you
12:11 - can just ignore that and start from a project
without the styles. And this is if you want
12:17 - to create the styles also, I structured this
course. So you should be able to fairly easily
12:22 - just skip the parts where I create the styling
for the components. Some people have, you
12:28 - don't want to create the CSS and the styling.
So that's why I made it in this way. So this
12:33 - is the one you should use if you want to create
the styles. Otherwise, you use the one that's
12:38 - called with styles, that one will provide
you with all the styling, so you don't have
12:43 - to type in the styles. And you can skip those
videos. So if you want to start from one of
12:48 - those projects, you navigate inside of that
one, and in your terminal, you type npm install,
12:54 - and that's going to install all the dependencies
for you. And then every time you start up
12:59 - the application, you can type in NPM start.
And that's also something that I'm going to
13:03 - show you, so don't worry about that. Then
you have a folder with the finished app if
13:08 - you want to check out the result. But please
be aware here, you have to put your own API
13:13 - key in a file that's hidden here now is called
dot end. inside of that one, you have to paste
13:20 - in your own API key, otherwise, it won't work.
And that goes for the step solutions. Also,
13:28 - I have provided you with step solutions that
corresponds to each video. And if you want
13:33 - to run an example, from a particular step
solution, you also have to paste in your API
13:38 - key in the dot m file. And I also got to talk
more about the dot m file. But this is the
13:44 - start of files. So you have to think about
if you want to create the styling in this
13:48 - course, and you also have to think about now
if you want to set everything up from scratch.
13:53 - Or if you don't want to do that, you can just
start from one of these folders here, navigate
13:58 - inside Odin type npm install, or if you're
using yarn, you should be able to use that
14:03 - one also. And then NPM start or yarn start
to start up the application. Alright, let's
14:10 - move on in the next video. I'm just shortly
going to talk about the tooling that I'm using
14:15 - for this course. Just a short, short little
video about what tooling I'm using for this
14:22 - course, I think you already should know this
tooling and have it installed to be able to
14:27 - fully take advantage of this course. Otherwise,
it can be a little bit hard. if you for example,
14:33 - haven't used NPM that I'm going to use to
install dependencies. I suggest that you learn
14:38 - about that first, because this is a beginner
slash intermediate course in react. It's not
14:45 - a beginner course in coding, you should know
some JavaScript and especially iOS six syntax,
14:50 - we're going to use a lot of iOS six syntax
in this course. So it should be a good idea
14:55 - to shape up your knowledge in JavaScript before
starting to learn. react. But that's only
15:01 - my opinion. But of course, you should do it
your own way. If you want to learn react before
15:06 - vanilla JavaScript, it's totally up to you,
I shouldn't tell anyone on how they want to
15:10 - take on their coding journey. All right, so
I'm using NPM. And that means that I have
15:16 - to have node installed, we're not using no
de s, per se. But no, Deus includes the NPM
15:22 - package manager. So that's why we have to
install that one. So if you don't have that
15:27 - installed, make sure to grab the latest version
and install it. Then I use Visual Studio code
15:33 - as my ID. So that's what I'm using in this
course. And then I'm going to use create react
15:40 - app and bootstrap our react application really
fast and easy. So that's what we're going
15:45 - to do. And I'm actually going to do that in
the next video. So let's get started with
15:49 - our application. I'm happy to see that you're
going to create this project from scratch.
15:56 - And we're going to use create react app to
bootstrap our application. So let's get started.
16:02 - If we look at the homepage for create react
app, you can find it at create dash react
16:07 - dash app dot Dev. And then they have something
here in the menu that's called get started.
16:13 - And the only thing that we have to do is remember
this row here mpex, create dash react dash
16:19 - app. And then you have the name of your application
that you want to create an empty x is something
16:26 - that's provided with NPM in the latest versions,
so you don't have to globally install create
16:31 - react app to use it, this will make sure that
we grab the latest version. So I always use
16:36 - mpex, instead of first globally installing
create react app. So this is really great,
16:42 - because then I know that I'm using the latest
version, and you don't have to install it
16:47 - globally. But if you want to do that, you
can of course install create react app globally
16:51 - first, but this is the command that I'm going
to use. So make sure that you navigate inside
16:56 - of your terminal. I'm using a terminal that's
called hyper, I get a lot of questions about
17:02 - that what terminal I'm using, I actually don't
remember the name of the theme, but I style
17:07 - it a little bit to my likings. So that's sweet.
So hyper is a great terminal. If you want
17:13 - to have a customized terminal. You also have
a built in Terminal in Visual Studio code,
17:19 - of course. So let's get started, make sure
that you navigate inside of a folder where
17:23 - you want to create the reputation. And then
we type in MP x and then create dash, React
17:30 - dash app. And then we have the name of our
application. And I'm going to name it react
17:36 - dash or dB. And RM DB stands for react Movie
Database. So that's the best I could come
17:44 - up with. You can use whatever name you want.
And then we can hit Enter, and then wait for
17:49 - it. It will install everything for us. So
it will take a little while. All right. Hopefully
17:55 - that installed correctly for you. And create
react app has now hopefully bootstrap or application,
18:00 - you could set up this yourself and not use
create react app. But create react app is
18:05 - actually used in in many production applications.
And it's actually used right now for a client
18:11 - that I work with. And it's a fairly large
application. So you can do a lot of stuff
18:15 - with create react app. And it's using Babel
and Webpack in the background to set up direct
18:20 - environment for you. So that's what you can
do yourself if you don't want to use crate
18:24 - react app. But I'm not going to show that
in this course, because I think it's a little
18:28 - bit advanced for a beginner course. And actually,
we're going to be fine with create react app,
18:33 - that's all that we need. So we also want to
make sure that it works. So make sure that
18:37 - you navigate inside of the product folder,
I'm going to clear this and then type in a
18:43 - CD, React dash or MDB, or whatever you named
it. And then we're inside of that folder.
18:49 - And then we can type NPM start. And it should
start up our environment. This is the finished
18:56 - one that's here now. So it's going to be replaced
by this application here. So it's working.
19:02 - And we have successfully bootstrap our application.
And that's sweet. In the next video, we're
19:07 - going to install a few dependencies that we're
going to use for this project. We are bootstrap
19:14 - the application. And now we're going to install
some dependencies that we're going to use
19:18 - for this project. And the first one is going
to be something that's called react router.
19:23 - And react router is the standard in react
application for handling routes, because this
19:29 - is a single page application. And we need
something to handle or rolling because we
19:33 - are going to have different pages. And the
one that we're going to use is called react
19:37 - router. There is another library that's called
reach router. And I'm actually using that
19:42 - one in version two of this course. But the
team that created reach router and react router
19:48 - is the same team. So they're going to kind
of merge them together into react router,
19:54 - version six. And this one is still in beta
mode, but I've talked to them and I think
19:59 - that I should have this one in this course,
because it will soon be out. And the API won't
20:04 - likely change because we're not going to use
the most advanced stuff in this router library.
20:09 - So we will be fine. And we have some instructions
down here. I'm at github.com, forward slash
20:15 - react training forward slash react dash router,
forward slash releases. And down below here,
20:21 - we can see that we have some instructions
on how to install it. So I'm going to bring
20:25 - up my terminal, do something like this. And
we could of course, just copy this one and
20:31 - paste it in. But in my courses, I wanted to
learn as much as possible. And it's always
20:36 - a great idea to not copy paste too much and
type stuff in because that will make you remember
20:41 - stuff much easier. So that's what we're going
to do now. So I'm going to type in MPM II,
20:47 - or if you're using yarn, you can, of course
use that instead, I'm going to use NPM for
20:52 - this whole course. And I'm typing in I instead
of typing out the complete word install, that's
20:57 - a short term for install. So NPM I, and then
we need to install something that's called
21:03 - history. Also, that's another library that's
used in combination with react router, and
21:08 - we can install them in one go. If I type history
here, then I have a blank space. And then
21:13 - I can type in the other library that I want
install. And in this case, it's going to be
21:17 - react dash, router, dash dome. And then we
have an add sign. And next, and this will
21:23 - grab the better version of react router. So
press enter, and wait for it. Hopefully, that
21:30 - installed for you correctly. So I'm going
to clear my console again. And we're going
21:34 - to move on to something that's called styled
components, styled components is a super great
21:39 - library to use in combination with react with
styled components, we can create our CSS in
21:44 - isolated and scoped components. So that's
really, really great. And we have a lot of
21:48 - features that we have, for example, in SAS,
we can do nesting and stuff like that. And
21:53 - we can send him props and change our styling
dynamically. And we're going to talk more
21:58 - about styled components as we go along in
this course, because we are going to create
22:02 - the styling. If you choose that path there,
I really think you should if you want to have
22:07 - some CSS practice, but it's up to you, I provided
you with different alternatives for this course.
22:14 - So we're going to install style components.
And you can read more about it at style dash
22:17 - components.com. So go back to the terminal,
and we type in MPM is styled dash components.
22:25 - And we press enter. Alright, that went smoothly.
So clear the console yet again, and we move
22:33 - on to the last dependency that we need. And
that is something that's called prop types.
22:38 - Prop types is a great tool in react, where
you can type check your props that you send
22:42 - into your components. So as they say, here
is runtime type checking for react props and
22:47 - similar objects. So that's great. Today, a
lot of people use TypeScript instead, then
22:53 - you don't need to use prop types. And I actually
use TypeScript a lot myself, I'm starting
22:57 - to like it actually. But in our case, we're
not using TypeScript. Right. Now, I'm going
23:02 - to show you that at the end of this course
in a special module that I created, where
23:06 - we refactor everything to use TypeScript instead.
But for now, we're not using TypeScript. So
23:12 - that's why we're going to use prop types.
And I'm going to talk more about this later
23:16 - in the course. And I've placed it title at
the end of the course, because I don't want
23:21 - too much stuff going on when we learn react.
So that's why, so I'm going to talk about
23:26 - it at the end of the course. And when you
create a component that has some props, you
23:30 - should use prop types to do type checking
on your props. But I'm not going to do that
23:35 - first, I'm going to add it in later in the
course. So we don't get distracted or have
23:40 - too much stuff going on. All right, to go
back to the terminal, type in NPM. I dropped
23:47 - dash types, and press enter. So that's it.
That's our dependencies. And of course, I
23:53 - didn't mention it at the start of this video,
you should of course be in the folder that
23:58 - we created the application that we bootstrapped
with create react app, it's very important,
24:02 - you have to navigate inside of that folder.
Otherwise, it won't work because we're installing
24:07 - the dependencies in that project folder. Alright,
in the next video, we're going to copy some
24:12 - files from the store to file c file to this
project that we're going to need to make this
24:18 - work. If we look inside of our project folder,
React dash orientdb, we can see that we have
24:24 - some different folders and files here. And
for example, if we look in the public folder,
24:28 - we can see that we have some image files and
the index dot HTML file. And this is the folder
24:34 - that the dev environment is going to build
for us. So the public folder is the finished
24:39 - files that we're using for running the application.
So that's everything inside of there. And
24:43 - the source folder. The src folder is going
to be the folder where we create all our stuff
24:48 - for application. So you can see we have some
CSS file, we have an app file, an index file
24:54 - and an index CSS file. We also have a test
file. We're not going to do any tests in this
24:59 - course. So this one, we're not going to use.
And we have a service worker, we're not going
25:05 - to use this one either. And we have the set
of tests that we're not going to use. If we
25:09 - take a look inside of a zip file, the starter
files that you should have downloaded for
25:13 - this course. And we take a look inside of
the first folder here, one files to be copied
25:19 - to product folder. Alright, so that's the
files that gonna be copied to the project.
25:24 - So make sure that you mark them here, copy
them, move back to your folder, your project
25:29 - folder, and paste them in. And then you're
going to choose to replace the old folders.
25:34 - This one is in Swedish here. So you probably
don't understand it if you're not from Sweden.
25:39 - But what it says here is to replace it, so
I'm going to click that button. And then it's
25:43 - going to ask me if I want to merge the source
folder or if I want to replace it. So if it
25:47 - asks you to merge it or replace it, always
choose replace. All right, so we successfully
25:55 - copied the files. And if we take a look inside
of the public folder, here, we're going to
25:58 - have exactly the same files. The only difference
is that I've added in a Google import of a
26:04 - font that's called Abel or Apple, I don't
really know, if I pronounce it correctly,
26:09 - it sounds better to pronounce it, Abel. So
I think that's the correct one. That's the
26:14 - only thing I've changed here. And that's the
in the index dot HTML file, the other files
26:18 - remain the same. So that's the public folder.
And if we look inside of the src folder, you
26:23 - can see that it's lesser files now. And that's
because I removed all the files that has something
26:29 - to do with tests, or the service worker and
all the CSS files that we don't need, because
26:33 - we're going to use styled components. And
I also added in some files and a folder, we
26:39 - have the images folder. And this one, of course
contains the images that we're going to use
26:43 - for this course. And then I have a file that
called API dot j s. And inside of this file,
26:48 - there are some functions that are going to
handle the API calls to the Movie Database
26:53 - API. And in the previous versions, we actually
created this ones ourselves in the course.
26:58 - But I think that was just a distraction from
react and react syntax. Because this is a
27:04 - course about learning react. And the thing
is that this is regular JavaScript inside
27:08 - of this one, it has nothing to do with react
per se. So that's why I created this one for
27:14 - you instead, and placed them in a file. And
of course, I'm going to talk more about these
27:18 - functions when we reach that point in the
course. And then I have a config file. And
27:23 - this config file contains everything that
has to be set up with a Movie Database API.
27:28 - And I have a helpers file also, and help us
file contains a couple of functions that will
27:33 - help us to convert some numbers into money,
and also to convert our time. And I'm gonna
27:39 - talk more about these two files also, later
in this course. So these are the files, hopefully
27:44 - this one will work. So if we go back to our
terminal, and this one is running now, so
27:50 - just to be sure, I'm going to break it and
run NPM start just to see that it works. It's
27:58 - always a great idea to see that stuff works
when you're sharing something. And then I
28:02 - go to my browser and reload the page. And
you can see I'm at localhost 3000, just as
28:07 - before. But now this nice little rotating
react logo is removed, and it says start here.
28:14 - And that is because I removed that one. And
I've modified this file so that we can start
28:18 - from here now in this application. So if it
says start here, you know that you successfully
28:23 - copied all the files, hopefully, and it should
work for you. In the next video, we're going
28:28 - to move on and actually use that API key that
you got when you registered for the Movie
28:33 - Database API. Okay, we got one more thing
to do. And then we finished with the setup
28:40 - of our project. And that is that we're going
to create a dot m file and paste in our API
28:46 - key. So in our application folder at the root,
we're going to create a new file, I'm going
28:52 - to call it dot E and V dot m, and create react
app has built in support for environmental
29:00 - variables, the only thing that you have to
do is to name them with react first. So react,
29:07 - underscore, and that's important, otherwise,
it won't recognize it. And this one is going
29:12 - to be called AP underscore API underscore
key, all capital letters. And then we have
29:19 - an equal sign. And then you can paste in your
API key here. And that's everything you have
29:24 - to do. So just paste it in just after the
equal sign, and you're good to go. And save
29:30 - the file. This API key is then used in the
source folder in my config.js file. You can
29:37 - see that our get it to here, process dot n
dot react app API key. And this is all managed
29:45 - inside of the Create react app. When it starts
up or dev environment and creates all the
29:49 - files for us and stuff. It will take care
of these various really important to market
29:53 - with react underscore before the actual name
of the environmental variable and all this
30:00 - Here is something that I created for you.
So you don't have to care about this. So I
30:05 - create the different resources from the endpoint
on the Movie Database here. And we're going
30:09 - to use these resources in the course later.
And then I'm going to talk about more. So
30:15 - I have different endpoints for the search,
for example, and to get the popular movies.
30:20 - And this was our for the bonus videos at the
end, where I create the login, and voting
30:25 - that also provided with the Movie Database
API, you can log in with your account, and
30:31 - cast a vote on a movie, or on old movies.
If you want to do that. Then we have the image
30:36 - base URL. This one is also from the movie
database. So these ones are provided from
30:42 - the API. So just use them according to their
instructions. And we have a backdrop size,
30:47 - we can set the size of the backdrop and the
poster size on the images, we can set different
30:53 - sizes here and I mark them here for you if
you want to try to change them and see what
30:58 - it does. So we don't have to think more about
these as I set them up for you. And there's
31:03 - also a file, it's called API dot j s. And
inside of this one, I created the actual code
31:09 - that is going to fetch the data, we can call
these functions later when we fetch the data.
31:13 - And we don't have to type in all of this ourselves.
And of course, I'm also going to talk more
31:19 - about these functions later when we fetch
the movies. So this one is for fetching all
31:24 - the movies, and this one is for fetching one
movie. And then we have this one here that
31:29 - will fetch the credits. And below here, these
are all for the bonus material also. So you
31:34 - don't have to care about those in the kind
of main part of the course. So we have three
31:39 - functions here that is going to fetch data
for us. So that's one thing I changed actually,
31:44 - in this version of the course before this,
we created these ones ourselves in the course,
31:48 - but I think it's a little bit advanced for
a beginner course. And I also think that it
31:53 - takes the focus on react itself, because this
is JavaScript, it's not react specific code.
31:59 - So that's why and I want this experience,
I want this course to be a fun course also.
32:04 - So you don't get tired and stop the course
and won't finish it. So that's why I created
32:09 - these ones for us. Alright, so that's the
config and a py file. And then I have one
32:14 - more file that's called helpers dot j s. And
this one contains two functions, that's going
32:18 - to help us to calculate the time and also
convert to money, because the numbers that
32:23 - we get from the API has to be converted both
the time and the money. So I'm going to use
32:28 - these ones later in the course also. Alright,
so create the dot m file, create a variable,
32:36 - React underscore app, underscore API underscore
key capital letters equals and then you paste
32:41 - in your API key. Otherwise, it won't work
because you can't access the API. one really
32:47 - important thing to notice here is that this
environmental variable won't be safe, because
32:52 - it will be visible in the client. So don't
think that this one won't show up in the browser,
32:58 - of course, you have to look for it. But if
you're good at looking through code, you will
33:01 - be able to find this API key. So this is not
a safe way to provide an API key if you want
33:07 - to hide it from the browser. In our case,
it's not that kind of a secret key, that doesn't
33:13 - matter. And for the sake of the course, it
would be too advanced to create a system that
33:18 - will hide this for us completely. So notice,
this one won't be safe in the client. Before
33:26 - we move on, I want to talk about a really
important aspect of react that I think a lot
33:31 - of people actually forget. And that is when
we create stuff with react, we are also using
33:36 - something that's called JSX. And it stands
for JavaScript, XML. And if we look here,
33:42 - I'm at the React js.org page now, and they
show us here how to create the component.
33:48 - And this is a class component. And as I told
you, before, we are going to create functional
33:53 - components. So we're not going to create class
components for this application. But they
33:57 - are using JSX. Here, and this is JSX. You
may think that this is HTML, but it's actually
34:03 - not it's JSX. And JSX is something that is
really great to use in combination with react,
34:09 - because we can render out our different components
like this by using HTML ish syntax. I think
34:15 - a lot of people actually forget it. Because
I don't know exactly the percentage, but I
34:19 - think at least 99% of the applications use
JSX. In combination with react, some people
34:25 - don't use it. And that's what I'm going to
talk about here. Because you can create components
34:30 - without JSX in react. And that is if we scroll
down here, you use something that's called
34:36 - create element on the React objects react
dot create element, we specify if we want
34:42 - some props. And then we specify the Child
Elements for this element. And you can see
34:46 - up here, React dot create element, we have
the component that we want to create, we have
34:51 - the props, and also we have the children and
this is the spread syntax in JavaScript, he
34:56 - has six. That's why they use three dots here
to explain this though. This one Here is actually
35:01 - the same as this, this one here, will transpile
down to react dot create element. But it wouldn't
35:07 - be practical to use react dot create element
for every component and everything you do
35:12 - in react, you can see that it's not that readable,
and it will get kind of messy. And I actually
35:17 - think that react wouldn't be that fun to use
if you use it this way. So I'm just going
35:22 - to show you how to create an element with
react dot create element also. And in the
35:27 - next video, I'm going to talk more about JSX.
But now I'm going to show you just a small
35:31 - example on how you can create an element with
react dot create element. So let's move back
35:38 - to our terminal and make sure that our dev
environment is running. So NPM start, always
35:43 - use NPM. Start, when you start up your dev
server, you can see that we have it running
35:49 - here now. Then I go back to Visual Studio
code. And I'm going to be in the app.js file.
35:54 - For this one, it's inside the src folder.
And this is kind of the heart of our application,
36:00 - we have the index.js. That is the start file
for the application. And you can see the there
36:06 - are import the app component here, these imports
are e6 syntax for import. So we can import
36:13 - a model. And in this case, the model is a
component. And it's called app. So I import
36:18 - that one here. And then it's used here and
this one is JSX. So this is the heart of our
36:23 - application, we have both a library that's
called react. And we have react Dom because
36:28 - react can be used for other stuff than the
DOM, for example, you can create native apps
36:32 - with react. But we are going to use the library
react DOM. And this one is all set up with
36:38 - create react app for us. So you can see that
from the React Dom that we import here, we
36:44 - call the render method. And we give it the
component that we want to render. And we'll
36:49 - tell it where we want to render it. So from
the document dot get element by ID, we get
36:55 - the root element. So if we look inside a republic
and the index dot HTML, you can see that we
37:01 - have a div here, that's called root. And it's
inside of this div, that we're going to render
37:06 - out our complete application within close
to public folder node, and go back to the
37:11 - index.js file. So we're telling react to render
our application to a div that's called route.
37:17 - And it's also in something that's called react
strict mode. It wasn't that before. But this
37:22 - is a default. Now with great drag that in
strict mode is actually great. It's going
37:27 - to do a few more checks if you do some stuff
that it shouldn't be doing when you code your
37:32 - application. So it's always a good idea to
using the strict mode in react. Alright, so
37:37 - let's move back to the app.js file. And as
you can see, here, we have this element here,
37:42 - we have the div that's called AP. And I render
out start here. And that's the one that we
37:47 - saw before, when we started up the application.
You don't have to type this in if you don't
37:52 - want, because I want to show you this, this
has nothing to do with application that we're
37:55 - going to build. So I'm going to create a little
component now. And then I'm going to remove
37:59 - it and we can continue on creating our application.
I'm going to do it with an arrow function,
38:06 - I like to use arrow function, they don't do
it here. But you can change this one if you
38:10 - want to an arrow function const app equals,
and then we create an arrow here instead,
38:15 - like that, I'm used to using arrow functions.
So I use them for components also. So const,
38:22 - I'm going to create a component that's called
store, and I have an arrow function. And then
38:27 - from react, we import react here, you always
have to import react at the top, and another
38:33 - call create element, I have a parenthesis,
I'm going to create a div. And then we're
38:40 - not going to have any props because we haven't
talked about props yet. So I set that one
38:44 - to now, and then I'm going to render out the
screen. This is a little store like that,
38:50 - and I'm going to remove the sidebar, we can
see the component here. So this is instead
38:57 - of using JSX. And if we want to render this
one out, instead of returning this one here,
39:03 - I'm going to return the store. And as this
is the function now, I also have to call it
39:09 - like this, save it. And then I'm going to
go back to the application. And you can see
39:15 - this is a little star, so it renders out perfectly.
And this is just a small example. And I want
39:22 - to just for you to notice that you don't need
to use JSX. And this is actually the React
39:28 - functionality at its core. So you don't have
to use JSX. But we are going to use JSX because
39:36 - it's sweet, and it's fun to work with. And
I think actually that it would be a small
39:42 - l creating applications without JSX at least
I think so. So, I remove everything I created
39:49 - here and save the file. Again, just make sure
that it works stored here. And it works and
39:55 - that's great. So that's a little bit about
react dot create element and using react Without
40:00 - JSX, just a small, small note on that one,
I'm not going to go any deeper into it, because
40:06 - I don't think it's actually relevant to use
react without JSX. So that's why. Okay, I
40:12 - talked a little about using react without
JSX. But I actually don't think that's a great
40:18 - idea. So that's why I also want to talk a
little about JSX before we move on with this
40:23 - application. So JSX stands for JavaScript,
XML, and it's pretty similar to regular HTML.
40:30 - So if we take a look here, you can see that
they create an h1 tag here that says hello
40:36 - word. And this looks just like plain HTML.
But as they say, here, this fun attack syntax
40:41 - is neither a string nor HTML, I actually don't
think it's a fun attack as to say here, but
40:48 - alright, you get the ID, why JSX. We can read
here more about why we are using JSX. And
40:55 - the main thing here thing is that they don't
want to put markup in one file and logic in
41:00 - another file, they want to have them combined
in one file. And that may sound scary for
41:05 - some, because a couple of years ago, you shouldn't
ever mix them together. But in react, it works
41:11 - really great. And as they say, here, rack
components contain both markup and logic.
41:17 - So JSX is something that is created to look
pretty similar to HTML, there are a few differences.
41:22 - And I wanted to talk about those here. Because
in this case, we create an h1 element. And
41:27 - that looks exactly the same. But there are
some stuff that differ from regular HTML.
41:33 - And for example, you can see you can embed
JavaScript as expressions here. For the source
41:38 - area in the image tag, for example, you can
use curly brackets, and then you embed your
41:43 - JavaScript expression. And that's super great
that you can combine them this way. And also,
41:48 - as you look at tab index, it's camel cased
that differs from HTML. And they say it here
41:54 - also seems JSX is closer to the JavaScript,
then to HTML, react, Dom uses camel case property
42:00 - naming convention instead of HTML attribute
names. So remember that, that you have to
42:07 - use camel case in JSX. And there are some
few differences. For example, when you set
42:12 - a class on an element, you don't use the class
keyword, you use class name, camel cased.
42:19 - And they also mentioned it here. And it took
a little bit of time for me to get used to
42:23 - this one. And no, I actually typing class
name when I type out regular HTML. And also,
42:29 - it's good to know that JSX is quite safe,
it prevents injection attacks and stuff like
42:34 - that. So I think you'll learn a lot about
JSX. As we go along in this course, because
42:40 - we are going to use practical examples in
this course, not the most important part is
42:45 - to remember that JSX is not HTML. And it's
also used camel casing when you create an
42:53 - attribute. Before we dive in and create our
components with state and props, and all these
42:58 - vital things in react, you can sit down, relax,
have a drink, have a beer, have a cup of tea,
43:04 - or whatever you're drinking. And just listen
to me in this video, where I'm going to talk
43:08 - a little about props and state in react, the
first thing you can do is to imagine that
43:13 - this is a room seen from above. And the gray
circle here is a lamp that's not turned on.
43:19 - And the orange one is a lamp that's turned
on, each of these lamps has a light switch
43:24 - that is often on. So if I click this one here,
I can turn this light on and the light switch
43:29 - is going to change to on. And this one I can
turn it off. So both lamps are off, and I
43:33 - turn this one on, and I turn this one on.
And this is made possible because I can use
43:38 - state in react. So I have two states for the
lamps. I have one state for the first time
43:42 - and one for the second lamp that is a Boolean
that is telling if the lamp is on and off.
43:47 - But if we think about this, we actually have
a state of the room also, because we need
43:51 - a state also for the light switch to change
from off to on. Because these are kind of
43:57 - tied together so that you can look at the
state in different perspectives. In this case,
44:02 - I will look at the state from the room perspective.
So I haven't placed the states in the lamps
44:07 - or in the light switches, I have placed the
states in the room itself because we have
44:12 - a room stage and for the room is going to
be if the lamps and the light switches are
44:16 - on or off. So we have a state for the room
itself. And this is what I talked about in
44:21 - the for example the React documentation, they
tell you that you can lift up the state to
44:26 - a parent component if you want to use that
stayed in multiple child components. Because
44:31 - if we placed the state in the lamp itself,
for example, we could only access that state
44:36 - in the lamp unto its child components. Of
course, we could place the light switches
44:40 - as a child to the lamp, but that wouldn't
be the most effective way of doing it. And
44:44 - it would complicate things if you want to
reuse your code. So what I've done here is
44:49 - study is that I had this room here and I placed
the components in the room and I'm also going
44:53 - to have the state in the room so we can use
that state both for the lamps and the light
44:58 - switches and I'm going to show you how Do
this now, and also talk a little bit more
45:02 - about state and props. So if we take a look
inside of the code here, this is the application
45:07 - that I created for you. You can also open
it up from the source files in this course,
45:11 - I provided it there. So I have the index file,
the standard index file that shows the app
45:16 - component, and app component is actually going
to be the room. So I could also name this
45:20 - room because this is actually the room component.
And as you can see here, in the room component,
45:26 - I'm creating two states. In react when you
create a state with hooks, you use something
45:30 - that's called the use state hook. Before we
had hooks, we had to use classes to have state
45:35 - in them. So you couldn't ever create a functional
component that has stayed in them. But now
45:40 - we have hooks, and that means that we can
have stateful functional components. And that's
45:44 - sweet. So when we call this use state hook,
we can initialize it with an initial value.
45:51 - So in this case, I'm giving it false, because
I want this lamp to be turned off initially.
45:57 - Then I do something that's called ear six
destruction here on destruction of this array
46:01 - that I get back from the use state hook. So
we can name our state here to whatever we
46:06 - want. In this case, I name it is lamp one
on and then we have the Center for the state
46:11 - center is lamp one on. And there's a few things
you should know about state in react. And
46:17 - the first one is that you should look at the
state as immutable, you should never mutate
46:22 - the state, then that means that you always
should use the state setter that you get back
46:26 - to set the state in react. If you're modifying
the state directly, for example, try to change
46:31 - this one. This means that your component won't
rerender. And that's no good. And it can also
46:36 - cause a lot of trouble in the future for you
in the application. But if you use the setter
46:41 - and change the state and don't mutate the
state, your component will rerender and update
46:47 - the DOM. And this is how stuff works in react,
you update the DOM when your components rerender.
46:52 - And one more thing with functional components
is that we can add as many states as we want
46:58 - with the use state hook in the class components,
you can only have one state, so you have to
47:03 - turn to create an object with different properties
to hold your state. So this is super sweet,
47:08 - we can divide the states up now depending
on how we want to structure the state. So
47:13 - in this case, I created two states, I have
one for the lamp one, and I have one for lamp
47:18 - two. So they are doing the exact same thing.
The only difference here is when I initialize
47:22 - it, I set this one to true and this will turn
lamp two on. Alright, now I have two functions.
47:28 - And these ones are going to be called when
we click the light switch. So I have one for
47:32 - the light switch one and one for the light
switch two, you could have one function instead.
47:38 - But I want to make it really, really clear
on how stuff works. So that's why I created
47:42 - two of them. So we have one function for the
switch one and one for the switch two. And
47:47 - this one will set is lamp one, that's the
setter for the state one for the lamp one.
47:52 - And what I do here is that I provide it with
an inline function. And when you provide the
47:57 - state setter with a function, it will get
called with the previous state. So in this
48:01 - case, I'm going to flip that boolean value.
So when I click the button, the first time
48:05 - this value is going to get be true instead
because it's false initially. And this one
48:10 - for a button two is going to be false because
it's true. All right, these are functions
48:14 - for a light switches. So if we looked at the
JSX, here, what we return to the dome, this
48:21 - one is a room component. And if I go up here,
you can see that this is the style component
48:26 - that we're also going to talk a lot about
in this course, I create a style component,
48:30 - that's a div here. So I set some styling on
that one on the room itself, I make it 500
48:36 - pixels width and 500 pixels in height, then
I set a border on it, and the margin zero
48:42 - in order is going to center it on the screen.
So everything is wrapped in this room component,
48:49 - then I have a component, that's the lamp,
I'm going to talk about that in a second.
48:53 - And I also have the light switch. So we have
the state in this app component. That's the
48:58 - room. So this is where I kind of gather all
the states for this little simple application.
49:04 - And this way, I can use this state in both
the lamp component and the light switch. Because
49:09 - as you can see here for the lamp component
i created something that's called props, props
49:13 - is something that you can create and that
will get sent along into your component that
49:17 - you create props is an object. So you can
create as many properties on that object as
49:23 - you want. In this case, I created a lamp on
Prop. So this one will be sent into the lamp
49:28 - component in the prop object. I also created
a prop that's called position. And this is
49:34 - how I can make the lamp appear on the left
or on the right in the room. And lamp on is
49:41 - going to be the state for the lamps. So this
one is going to be a Boolean. And that way
49:46 - this component will know if the lamp is on
and off. And I'm going to show you that in
49:50 - a second. And I do the same with a light switch.
And for this one I have the callback as I
49:55 - showed up here. I give this one a prop that
I call callback. It doesn't have to be Call
50:00 - callback, that's the name that I chose. And
the switch on, I'm going to give it a lamp
50:05 - state for this one. So you can see that I
use the lamp states for both the lamp and
50:09 - the light switches. And this is what I talked
about before, if we created the state for
50:14 - the lamp in the lamp itself, we wouldn't be
able to access this state for the light switch,
50:19 - then we have to create the light switch as
a child of the lamp. And that's no good, as
50:23 - you probably can see now, because now we can
place as many lamps and light switches we
50:27 - want in our room. So it would be much harder
to do it if we place the stain in the lamp
50:33 - itself. And I also have a position prop for
the light switch. So let's go inside of the
50:39 - lamp component that I created here. I also
have a wrapper div for this one that's a styled
50:44 - component. So I wrap everything in that div.
And the interesting thing with style components
50:49 - is that they also can have props because they
are also valid react components. So we can
50:54 - use props in our style components to modify
our CSS. And that's one of the super strengths
51:00 - with style components, I think, because as
you can see here, this is this is something
51:05 - that's called a template literal. And in this
template literal, we can grab the props that
51:10 - are sent into this component. So in this case,
I create dollar sign and curly brackets, and
51:15 - I can use a JavaScript expression. And I have
this inline function here that gets the props.
51:20 - So if we look at the wrapper component down
here, you can see that I also send in a prop
51:24 - lamp on and the position. So I'm just sending
along these props that are initially sent
51:29 - into the lamp component. So I get them in
the lab component, and then I also send them
51:34 - along to the wrapper component. That's the
style component. And by doing this, I can,
51:38 - for example, check here, if the props dot
position equals to the left, then I'm going
51:42 - to set the left value to 20 pixels. Otherwise,
I set it to three or underneath two pixels,
51:47 - and that will place it to the right in the
room. So this way, I can modify my CSS and
51:53 - make it very, very dynamic. So that's really
sweet that you also can use props in the style
51:58 - components. Alright, that's how style component
and props works. So if we look at the lab
52:03 - component here, I'm sending in these props
here. And what I'm doing here is I'm using
52:07 - iOS six destructuring. So from the objects
that we get that you usually call it props,
52:12 - I'm destructuring out these values that are
sending, if I didn't do the destructuring
52:17 - here, and I just do it like this, you can
see that it wants me here now, then I have
52:22 - to type in props, dot and props, not because
the props is an object, so I have to grab
52:29 - those specific properties from the toggle.
But if I destructor it out as I do, here,
52:35 - I don't have to type that in every time. So
I just structure out the properties here instead.
52:40 - And there's a few things you should know about
props because they differ from state. And
52:44 - the main difference is that the props are
passed into the components. And you should
52:48 - never ever change the props in the component
that gets the props, the props, values are
52:54 - changed from the parent that is sending in
the props to the component. So if the props
52:58 - change in the parent, it's also going to rerender,
this component here. So never ever change
53:03 - the props values in this component, you can
change the state in the component with a state
53:08 - setter. And that's how you, for example, can
trigger a rerender. When you change the state
53:13 - in a component. So that's fine, you should
change the state in the component with the
53:17 - setters. But a prompt should never be ashamed
in a component that receives the props. When
53:23 - the prop value changes, this component will
rerender and it will have the new value in
53:27 - the props. So that's how props works. All
right, we can check out the light switch.
53:32 - Also, I'm doing the same here I am destructuring
out the props here. And I have this bottom
53:37 - component. That's the star component. And
I modify it with props here also. So I'm doing
53:41 - the exact same thing here. And you can see
here that are sending the callback, that's
53:47 - the function that I have in the app component
here. So that's the one I'm sending in with
53:53 - a callback prop into the light switch. And
then I have my button, and the button has
53:59 - an onClick handler an onClick handler will
trigger this callback function. And this makes
54:04 - this component very dynamic because by using
props, you can make your component dynamic.
54:10 - And you can use it in different situations.
In this case, I can send in whatever callback
54:14 - function I want to be triggered when I click
on the button. So that means that I can use
54:18 - this button in different situations. In this
case, I also showing the switch on and off
54:23 - because I was sending in the prop switch on.
So it probably won't be useful, too much less
54:28 - than this use case specifically. But if you
want you can use this button for something
54:33 - else done to trigger a lamp to be turned on
or off, you can turn something else on and
54:38 - off and have another callback function and
that will work. So that's what you use props
54:43 - for. Also, you can make your components dynamic
and reusable by giving them some props. And
54:48 - by using these props inside of the component.
You can adapt your component and change the
54:53 - logic you can change the JSX and what it should
render and stuff like that. So that is really
54:58 - useful to us. props for that. Alright, so
that's short on state and props. I hope this
55:04 - one gave you some insight before we start
creating our own. So let's move on in the
55:09 - next video, I'm going to talk more about style
components and what they are. There's one
55:16 - less thing I want to talk about before we
start creating some code for real. And that
55:20 - is styled components. Because in the next
video, we're going to create a global styles
55:24 - for our application. And we're going to do
that with styled components. So just a short
55:29 - talk about style components and why it's so
great. And I think the biggest benefit is
55:34 - one that you get scoped CSS. And that means
that you can have the same class names for
55:40 - different components, it doesn't matter because
it's scoped to that component. And number
55:44 - two is that you can use syntax, kind of like
sass, for example, you can nest stuff, and
55:50 - you don't need to have polyfills, and stuff
like that, it will create all that automatically
55:54 - for you. And number three, is that you can
have props inside of it. And props is something
55:59 - that we're going to talk a lot about in this
course, because it's an essential part in
56:04 - react. And that means that you can modify
the CSS by sending in different props to your
56:09 - styles, you don't need to know exactly now
how props work, because we're going to talk
56:13 - about that later in the course. And also,
you can use just plain regular CSS, and that's
56:19 - super great also. So that is some benefits
that style components will provide to you
56:24 - when using it in your application. So we already
install this library. And when you use it,
56:29 - you have to import something that's called
style, I think they have an example down here,
56:33 - here, input styled from styled components.
And style is an object that holds different
56:39 - properties. For example, in this case, they
want to style a bottom. So these properties
56:43 - corresponds to what they are called in HTML.
So if you want to style a button, if you want
56:48 - to create a style component, that is a button,
you use style dot button, and then you have
56:53 - a template literal. So this is something that's
called a tag template literal. And that is
56:58 - a function that you call with a template literal.
So this is e6 syntax in JavaScript. And it's
57:04 - super great, because if we move up here, again,
you can see, we have this template literal.
57:10 - Here, you have the starting backtick. And
you have the end back to here. And inside
57:15 - of here, we can write our CSS. In this case,
they're using style dot A, because they want
57:21 - to style an a tag. And then they do some stuff
here, plain regular CSS. But here is something
57:28 - that's happening. That's not plain CSS. And
this is because we using a template literal
57:33 - here, we can use JavaScript expressions inside
of this template literal. And when you want
57:38 - to use an expression inside of a template
literal, you do that with $1 sign, and you
57:43 - wrap it inside of curly brackets. And then
you can have any JavaScript expression that
57:48 - you want inside of here, and it will interpolate
it into the string. And in this case, you
57:54 - can see that they have their props, and they
have an inline arrow function. And from the
57:58 - props, they grab a prop. That's called primary.
And you can set this CSS conditionally, depending
58:04 - on this primary prop. And we're going to talk
more about this later, as I told you, so don't
58:09 - get intimidated. If you don't understand this
syntax right now, hopefully, you will understand
58:14 - it fully when this course is over. This is
just a short introduction, before we create
58:19 - the global styling. And we're going to do
that in the next video. It's time to start
58:27 - coding. And we're going to start by creating
some global styles. The first thing you have
58:31 - to do is to start up your dev environment.
And you do that by navigating inside of the
58:35 - folder of your application. And then you type
NPM start, and that will start everything
58:40 - up for you. And hopefully it looks something
like this, it should say start here. And it's
58:46 - always a good idea to have your console open.
I'm on Chrome now. So it looks something like
58:50 - this. And also I can recommend an extension.
That's called react developer tools. And then
58:56 - you will have access to something that's called
components here. And if we open that up, we
59:01 - can see our application here. But in this
case, we don't have any components yet. So
59:05 - it will just show the app component here.
But this is a great tool when you develop
59:09 - stuff in react. So highly recommended install
react developer tools. Okay, so let's move
59:15 - back to our application inside of Visual Studio
code, or whatever ID or using an inside src
59:23 - folder, we're going to create a new file that
I'm going to call that I'm going to call global
59:29 - style, capital G and capital s.js. So this
is going to hold all the global styles for
59:37 - our application. And we're going to create
a global styles with style components. So
59:41 - that's why we have to import a special thing
from the style components. That's called create
59:46 - global style. So we start by doing that import
curly brackets. Create Lobel style camel case,
59:55 - that means that there's a capital D and a
capital S. And we ported from style dash components.
60:06 - And this is how we import the module with
e6 syntax. In this case, it's not what's called
60:11 - the default export from this library. So that's
why we grabbing it inside of the curly brackets,
60:17 - we are going to create default exports from
our different components. And then we don't
60:22 - need to use the curly brackets. But I'm going
to show you that later when we create our
60:26 - first component. Okay, so we have this create
global style method that we imported. Here,
60:32 - we are going to use a global styles inside
of our app component later, meaning that we
60:37 - want to import it here and use it down here
in the JSX. So that also means that we have
60:42 - to export this styled component from this
file, so export. And this is a const. Also
60:50 - e6 syntax, it stands for constant. So that's
what we have in JavaScript. Now we have let's
60:55 - we have const. And we have various, I'm always
using const. Before I know if this one is
61:01 - going to change, and then I change it to a
left, it's going to change in the application.
61:05 - But usually const will do, at least when you
do functional programming, as we mostly going
61:10 - to do in this course. So const means that
this one is not going to change. As with everything,
61:16 - there are special cases when it can change.
For example, if you create an object with
61:20 - a const, you can change the properties in
that object, but you can't change the object
61:25 - itself. Alright, enough about that. This one
is going to be called Global style. And this
61:30 - is a component, and every component that you
create in react is going to have a capital
61:35 - letter to begin with. So capital G and capital
S in this case, and it's going to equal and
61:44 - then we call this method that we imported
up here, create global style. And in this
61:49 - case, we're not going to have a dot and something
here because this is the global style. So
61:54 - we're going to have double backticks, creating
our template literal. And then I do like this.
62:00 - And then we can write our CSS inside of this
template literal. And the rest of your is
62:05 - going to be regular plain CSS. So first, I
want to set up some CSS variables. To call
62:11 - on Route, we do that on the route. And when
you create a CSS variable, you do that with
62:17 - double dash. And then you have your variable
name. So max width, this is camel cased, as
62:24 - you can see here, are going to set the max
width to 1280 pixels. And then I have another
62:30 - variable double dash white. And then I set
my white color, another variable double dash
62:38 - light gray. This one is going to be E double
dash med grade, or medium grade. And this
62:48 - one is going to be 335 re 535 double dash,
dark gray. And this one is one c one c one
63:02 - C double dash font super big. That's a funny
name, I forgot that I call it that. All right,
63:12 - you can call it whatever you want. This one
is going to be 2.5 REM. And the next one is
63:19 - double dash and font big 1.5 REM double dash
font med or medium 1.2. REM. And the last
63:30 - one is going to be double dash font small,
one REM. And that's our CSS variables that
63:36 - we're going to use for this application. Then
I'm going to set the font for the whole application
63:41 - and also do some resetting here. So I have
an asterisk. Like that, I set the box sizing
63:50 - to border dash box. And then I set the font
family to able and that's the Google Font
64:01 - that is important from the index dot HTML
file. And then a how to backup font or sans
64:08 - serif. Alright, that's the resetting then
on the body. I'm going to set a few things
64:13 - also. So we're going to set the margin zero,
the padding is going to be zero, like that.
64:20 - And then as I told you with start components,
you can nest stuff inside of the body, we
64:26 - can nest the h1 tag like this, and set the
font size to two REM font weight is going
64:35 - to be 600 and the color and I'm going to grab
this from my variables that I created up here.
64:43 - And when you grab a variable in CSS, you do
that by typing out various parenthesis and
64:50 - then the variable name in this case it's going
to be double dash white. So that's the h1
64:58 - then I'm going to set the age three The font
size is going to be 1.1 or M. And the font
65:07 - weight is going to be 600 on that one also.
And then one more thing to do here, and that's
65:15 - the p tag. So font size, one REM for the p
tag, and the color is also going to be white.
65:24 - So var, double dash white. And then I also
do some auto formatting. And sometimes when
65:30 - I do this, create global styling, the auto
formatting doesn't work. I don't know why.
65:36 - So I do it manually instead and save the file.
Always remember to save your files, it's very
65:42 - easy to forget to save the file, and then
it doesn't work. So this is everything that
65:47 - we need for our global styles. Now we're going
to move inside of the app.js file. And up
65:53 - here where we import react, we can mark it
with styles. And then we import global style
66:02 - from dot forward slash global style. So this
means that we import in this one that we created
66:10 - here, this constants called Global style,
we can import it because we export it inside
66:15 - of this file. We don't do a default export,
as I'm going to show you when we create components.
66:22 - That's why we use curly brackets and import
this as a named import. And we're importing
66:27 - it from the file that's called Global style.
You don't have to type out.js. It's enough
66:33 - we just typing out global style, it will figure
the file extension out itself. Right there
66:40 - we have our global stock component. But how
do we use it in our application, we should
66:45 - place this at the top level of our application.
And as we're going to have a component that
66:49 - wraps are complete application. In this case,
it's the div that's called app, it has a class
66:54 - name of app, we're going to change this out
later when we have the routing setup. But
66:58 - for now, that's a wrapping div. So inside
of that one, we can use a global style. And
67:06 - we self close it like this, we don't have
any props to send into this one. And we're
67:12 - not setting a class name or stuff like that.
So when you use the playing component without
67:16 - class name, and props in react, you do it
like this. And this is very similar to an
67:21 - HTML tag. So we save the file, go back to
a browser. And the only thing we can see now
67:29 - is that the margins and padding have changed
here, it's just right at the edges here now.
67:33 - And it wasn't that before. So we know that
our global styles are working. And we can
67:39 - actually just comment this one out, save the
file, go back to a browser. And you can see
67:45 - that the margin is there now. That way, we
know that it's working. And hopefully we didn't
67:51 - do any mistake in the CSS itself. So it should
work. Otherwise, we have to adjust that later.
67:57 - All right, in the next video, we're going
to start creating the header component for
68:00 - the application. So we're going to create
our first real component in this application.
68:07 - And it's going to be the header component.
So the first thing we do when we create a
68:11 - new component is to create a file for that
component. And you can see that we have our
68:15 - src folder here and we have an images folder.
But we don't have a folder, that's going to
68:20 - hold our components by usually create a folder,
that's called components. That's what I'm
68:25 - going to do now. components, all lowercase
letters, and inside of this folder, we're
68:32 - going to create all of our components. And
the thing is that the structuring of an application
68:38 - is something that's highly subjective. So
you can have your own opinions on how you
68:42 - want to structure it. And if you want to structure
it in a different way, you can of course do
68:46 - that. But please be aware that this course
will have this folder structure. And you have
68:51 - to think about it. If you change stuff yourself.
If you just want to focus on learning react,
68:56 - I highly recommend that you use this folder
structure that I created for the course, I
69:00 - also going to have a folder for each component
because I want to separate out my styles and
69:05 - have the styles in separate file and have
the component itself in a separate file, I've
69:10 - created this course you don't have to create
the styles if you want. So that's easier for
69:14 - me to handle it that way by separating the
mouth. So therefore, I also think it's nice
69:19 - to have everything related to component in
its own folder. So we're going to create a
69:24 - new folder inside of the components folder.
That's called header. capital H. So we inside
69:34 - the header folder, and this is something in
Visual Studio code. It won't show a complete
69:39 - tree structure here when you just have one
folder. But this will change later. But we're
69:44 - inside a header folder. And inside a header
folder, I got to create a new file that's
69:49 - called index.js. And this is also something
that's highly subjective actually, because
69:55 - I'm going to create my component in the index.js
file. So we're going to have one folder for
70:00 - each component, and each folder is going to
have an index dot j s file. And this is great
70:05 - when you import stuff as I'm going to show
you later. But it's not that great if you,
70:10 - for example, have 10 components open up here,
they all are going to be named index dot j
70:14 - s. So that's the downside by doing it like
this. But this is a fairly small application.
70:19 - So I don't think it matters. But I can actually
show this if we have a component that's named
70:25 - test component, we import it like this. And
from dot forward slash, we have our folder,
70:32 - that's called test component. Like this, of
course, we don't have this one Oh, this is
70:38 - just an example. It's exported as a default
export. So we import it like test component
70:44 - without the curly brackets, we can name it
to whatever we want. But I like to name them
70:48 - just exactly as they are in the files. And
we import it from the test component folder.
70:55 - And then if we have a file, that's called
index.js, we don't have to type out anything
70:59 - more here, it will automatically grab that
index.js file. But if we named this file,
71:05 - for example, test component, also, we have
to specify it like this. We have to type it
71:12 - out two times. And I don't like to have to
type it in two times. So that's why I'm using
71:17 - an index.js file instead, as this is a fairly
small application. So we don't get confused
71:23 - up here when we have a lot of components open.
So that's my explanation to why I'm using
71:28 - this structure. And that's also why are named
my files like this. Alright, so delete this
71:34 - one here, we're also going to create placeholder
components for the styles, because we're going
71:38 - to use the style components inside of this
component itself. So that's what we're going
71:43 - to do. And we do that by creating another
file. That's called heather.styles.js. And
71:51 - this is how I like to name my style component
files. So I have the component name, and then
71:57 - I have a dot, and then I mark it with styles.
And then I have a.on, the file extension.
72:03 - Alright, so from the style components, we
import styled, like this import style from
72:12 - style components, components, it should be
an S. Now, I'm just going to create placeholder
72:18 - components because I am going to create the
styles in the next video. So if you have choose
72:22 - to skip the styles, you don't have to do them.
Justice before, you always have to export
72:29 - these ones, because they are in a separate
file, and we are going to import them in the
72:32 - index.js file soon. Export const I have a
component that I like to name wrapper, and
72:40 - it's going to be a style dot div. So this
is a div that I'm going to start. And I just
72:46 - have the double takes. And I ended there because
this is just a placeholder now, so we could
72:51 - just copy this one. But as I told you, I want
to repeat stuff and type it in many times
72:55 - when you learn things. So we export const,
I have another component that is going to
73:01 - be called content. And it equals from the
start, we have another div double backticks
73:07 - and then we export const logo, IMD and it
equals a style. And this is an image, it's
73:16 - the logo that we're going to style, double
backticks and and it and then we export const
73:23 - TMDB logo. img, be careful with the capital
letters here. This is the Movie Database logo.
73:32 - So capital TMDB, capital L and capital II.
From the styled, we're going to style another
73:40 - image like this. So this is the four style
components that we're going to use for this
73:46 - react component. So save the file, and I'm
going to show you in the next video, how to
73:50 - create the styles the actual CSS, but move
inside of the index.js, we're going to create
73:55 - our header component. Now, the first thing
you do when you create a react component is
73:59 - to import react capital or from react. And
that will make sure that we are using react
74:07 - in this component. Then I have some images
for the logo. So if we look inside of the
74:13 - image folder, I have the TMDB logo. This is
an SVD. So we just see some code here. And
74:19 - then we also have the React movie logo. And
that's also an SVG. So move back to the index
74:23 - dot j s, we're going to import this ones now.
So import our IMDb logo, you can name it to
74:31 - whatever you want here, but I chose to name
it RMD v logo, you could just name it logo,
74:36 - of course if you want to do that, but I want
to separate them out because we're going to
74:40 - have the TMDB logo also. And we're going to
import it from dot dot forward slash that's
74:48 - in the header folder that we want to go up
one more folder so dot dot forward slash again.
74:53 - And then we have our images folder. And then
we grab the React dash movie dash logo dot
74:59 - SVG. In this case, it's really important that
you also type out the SVG extension, otherwise
75:04 - it won't work when it's an image. So that's
the rmvb logo. Then we import the TMDB logo
75:15 - from doc dot forward slash dot dot forward
slash images, forward slash TMDB, underscore
75:23 - logo dot SVG, like this. And as you can see,
this can be a really long file path here.
75:31 - And that's no good. In some cases, of course,
you could set up this with create react app,
75:35 - so you use absolute important step. But I
choose to not do this in this course, as I
75:40 - want this to be kind of beginner friendly.
And to be honest, we're not going to have
75:44 - that long file path. So that's why Okay, so
that's our logos. That's our images for the
75:51 - logos down, we're going to import the styles
that we created inherit old styles dot j,
75:55 - s, because we export them here, as I told
you, so we want to import them in this component.
76:01 - So import curly brackets, we have our wrapper,
we have our content. We have our logo, IMD,
76:12 - we have our TMDB logo, no logo, IMG TMDB logo
IMG. And we're going to import this once from
76:24 - dot forward slash header dot styles ended
with a semi colon. I'm going to remove this
76:31 - sidebar here so we can see what we're doing.
That's it, we have everything we need to assemble
76:36 - this component for now. So we're going to
create a component that's named header. And
76:41 - we're going to use just functional components
in our application, because now you can have
76:46 - stayed in your functional components. A couple
of years ago, you had to create a class if
76:51 - you want to have some state, but now we have
hooked and we can use just functional components.
76:56 - So I like to create my components with an
arrow function. So cost header equals parenthesis,
77:03 - and a fat arrow. And that's an arrow function,
you can have regular function if you want
77:08 - to have that also. And then of course, you
just do it like this instead function header.
77:13 - You have curly brackets, but I like to have
the arrow function. And that's because you
77:20 - can make an implicit return like this, if
we just returning JSX, we can add parentheses,
77:24 - and you don't need to type out return. And
in our case, we're going to have the wrapper.
77:30 - That's the style component that we created.
And inside of the wrapper, we're going to
77:36 - have the content. That's also a style component
that we created. And then I'm going to have
77:43 - the logo IMG. And we can set the source on
this one because this is an image tag that
77:48 - we styled. So we can use the same attribute
the SRC is going to equal and we have imported
77:54 - our our IMDb logo, or IMDb logo, like this
was set on OLT. Now we can name it or IMDb
78:04 - dash logo. And then we can self close it like
this. So that's a logo for this application.
78:10 - And we have the Movie Database logo TMDB logo,
IMG we have the SRC, it's going to be the
78:20 - TMDB logo IMG and we set the old TMDB dash
logo, and we self close it, do some auto formatting.
78:35 - And now you can see. Okay, I just named it
TMDB logo, of course, that style component,
78:42 - we shouldn't use that. So TMDB logo course.
Now you can see that it complains here, because
78:48 - we're not exporting this one, it says it's
never used. And that's because we don't export
78:52 - it. You should always export it. And I like
to do the export here at the bottom. So export
78:59 - default header. And this is also a sixth syntax
for exporting something. So in this case,
79:06 - we don't have a named export, we export it
as a default. Some people like to have their
79:12 - export here, instead, I don't like that. So
that's why I have it at the bottom here. But
79:19 - you can do however you want. And this is our
header component for now. But we're not actually
79:24 - using it. If we go back to our application
here, you can see that nothing has happened
79:28 - because we have created a component, but we're
not actually using it yet. So we have to do
79:33 - something about that. So let's go back to
our app.js file. And inside of this div here
79:41 - the wrapping div. This is also something that
you have to know because in react you can
79:46 - always just return one component, you have
to wrap the components if you have multiple
79:51 - of them in another component or in something
that's called a fragment that I'm going to
79:56 - talk about later in this course. So inside
of here, we're going to have Our header component,
80:00 - but first, we have to import it, of course.
So what I like to do, I like to mark it with
80:07 - components, like this. And then I import Heather
from dot forward slash components forward
80:16 - slash Heather. Like this, when you want to
use a component in react, you have to import
80:23 - it first like this, this is a module that
we import, our component is a module that
80:28 - we import with EF six syntax like this, right,
and then we can use the component here for
80:33 - now we don't have any props for this one.
So just as we did with the global style, we
80:38 - can insert the component here down in the
JSX. And we have our header. So do some auto
80:44 - formatting and save it. And if we go back
to our browser, you can see that we can't
80:48 - really see the images now. And that's because
we haven't set the styling for the images
80:52 - now. So that's what we're going to do in the
next video. Or if you choose to not create
80:56 - the styles, you probably will see the header
up here. Now if you're using the styles that
81:01 - you copied over to your product folder, but
in the next video, we're going to create the
81:05 - styles and that will make the header show
up with the logos we have created or had a
81:13 - component, but we can't really see anything.
So we have to create the styles for it. Also,
81:17 - you can see it. Yeah, it looks like crap here.
So we have to give this some styling also.
81:23 - So we see it have nice little logos and or
header. So inside our file, that's called
81:28 - header.styles.js. We're going to start by
creating the reference style component, we're
81:35 - going to set the background on that one background.
And from our variables, we're going to grab
81:40 - the one that called dark gray, like this.
And then I'm going to give it some padding
81:48 - zero and 20 pixels. And that will give it
some padding on the sides. We'll save it,
81:54 - go back to our browser. And now you can see
that we see all gigantic logos here on our
82:00 - gigantic header. So we have to do something
about this one also. So we have our content
82:07 - div. This one is going to be displayed as
a flex, because I want to place the logos
82:15 - on the left and the right. And we can do that
with flex. So first we align items to center.
82:21 - And this will align them vertically. And then
we justify the content. And we set it to space
82:28 - between and this will create space between
them and push them to the side one is going
82:33 - to be pushed to the right and one is going
to be pushed to the left. And I'm also going
82:37 - to set the max width of this one. And that's
why I also have a container that called content
82:42 - because the rapper is going to have this background
of dark gray. But I don't want the content
82:47 - itself to have the full width, the max width
is going to be from our variable dash dash
82:53 - max with like this. And I'm going to set some
padding at the top and bottom are 20 pixels
83:02 - and zero on the sides. And I set the margin
to zero, all and this will center the content
83:09 - div itself, save it go back and see what we've
got so far, you can see that they are pushed
83:14 - to the size. And that's great. Flexbox is
really neat to do stuff like this, but the
83:20 - size isn't correct on the logo. So we have
to modify this. So we have our logo IMG. That's
83:28 - the main logo, and that's the style image,
we set the width to 200 pixels on this one,
83:34 - save it, go back to the application, you can
see that we have the correct size here. But
83:39 - we also want to change this size on the logo
when we are on smaller devices. So we create
83:45 - a media query at media screen and Max dash
with I don't really know if you need to actually
83:54 - use screen today. I think it's not necessary,
but I'm used to that. So I will do that. I
84:00 - set the max width to 400 pixels. This means
that when the screen size is lesser than 500
84:06 - pixels, this one will kick in. So we set the
width 150 pixels on that one, save it go back
84:13 - to our application and see what we got. So
I can make this smaller. And you can see that
84:20 - there. The logo gets smaller also. So we know
that the media query is working. And this
84:26 - is also something that's super great with
styled components, because you can nest the
84:30 - media queries as I did inside of this component.
I think this is very readable to do it like
84:35 - this because you know that this specific media
query belongs to this component. All right,
84:40 - so that's the main logo. Then we just have
the style, the TMDB logo also. I'm going to
84:46 - set the width 200 pixels on this one. And
then I set a media query on this one also
84:52 - at media screen and Max with 500 pixels. So
it may see seem redundant to have two of them
85:04 - here. But actually, as I told you, I think
this is very readable. If you want to change
85:08 - a media query for just that component, you
can do that inside of the nested media query
85:13 - here. And I like that a lot. So for this one,
I'm going to set the width to 80 pixels, and
85:20 - save it, go back to the application. And there
you have it, this is our header. And you can
85:27 - see that it's working on both of the logos
when we make the viewport smaller. Sweet,
85:36 - that's the stars for the header. In the next
video, we're going to scaffold out our homepage.
85:42 - Alright, we're going to start building the
homepage for our nice little application.
85:47 - And we're going to have all this stuff here,
on our homepage, the homepage is going to
85:52 - be what's called a container component. And
then we're going to create different components.
85:56 - For example, for the hero image for the search
bar for the thumbnails for the grid, and for
86:01 - the Load More button. Let's go back to our
code editor. And inside a components folder,
86:07 - we create a new file that we call home. dot
j s capital H. And this one, I don't have
86:16 - a folder for this one, because this is kind
of more container component. So we don't have
86:21 - any styling in this one, we're going to apply
the styling on the individual components instead.
86:27 - Alright, so the first thing we always do when
we create a component in react is to import
86:32 - react, import react from react, then I'm going
to create a little comment here and call it
86:40 - config because we're going to import some
stuff from the file, let's call config.js.
86:44 - And inside of this file, I've set everything
up for you that's needed for the Movie Database
86:49 - API, and I export them here in an object.
So we're going to import a few things from
86:54 - this file in the home component. So go back
to the home dot j s, and we import curly brackets,
87:02 - we're going to import the poster underscore
size, all capital letters, we're going to
87:09 - import the backdrop, underscore size. And
the image underscore base underscore URL.
87:20 - Remove this sidebar here. We're going to import
them from dotnet, forward slash config, like
87:28 - this, and be very careful here with the spelling
all capital letters and underscore. Alright,
87:34 - then later, we're going to import a lot of
components here. So for now, I just mark it
87:40 - like this, we're also going to import to hook.
So I marked that one also. And we're also
87:45 - going to import an image. So if we go back
and look here in the images folder, I have
87:50 - this image that's called no underscore image.
And this one is a fallback image if we don't
87:55 - get an image back from the Movie Database
API. So we have this funny little smiley balloon
88:00 - here that will fall back to if we don't have
an image to go back to the home.js. And we
88:06 - import are going to call it no image. And
when you do an import like this, you can call
88:11 - it whatever you want. So doesn't need to be
named like this. I'm going to import from
88:17 - doc dot forward slash images. And I grabbed
the no underscore image dot jpg, very important
88:25 - to have the file extension when importing
images like this. Alright, then I'm going
88:33 - to create the component itself. And as I told
you, I like to create it with an arrow function,
88:37 - you can have a regular function, if you want
to do that. I have a const home, I have a
88:42 - capital H. All react components always have
a capital first letter. Very important always
88:49 - name your components with a capital first
letter. So home capital H. And then we don't
88:56 - have any props for this one. So I just leave
it empty here the parenthesis and then I have
89:02 - an arrow function. And I have curly brackets
because this one is going to have some logic
89:08 - inside of it, we have to have a return statement
and make an explicit return. So return for
89:14 - now we can just return a div that says homepage
like this. Alright, then we can also actually
89:22 - scaffold out our states that we're going to
have in this component. And for that one,
89:27 - we're going to need a hook that's called use
state. So make sure to import that one up
89:33 - here. You type in a coma and then you have
curly brackets. And we import use state from
89:39 - the React library. And the use state hook
is the hook that you use in functional components
89:45 - in react to create a state. So when we call
the use state hook, we'll get an array back.
89:51 - The first value is going to be the state value
itself and the second value is going to be
89:55 - the setter for the state. And the standard
for grabbing and using these values is to
89:59 - use the Six syntax for destructuring. So I
create a const, or the structure of the state
90:06 - and the setter for the state set state. And
you can call it whatever you want here, but
90:10 - I want to call this state, you could call
it cool like this, but I don't actually think
90:15 - it's that cool. So I'm gonna stick with state
like this. And then we have an equal sign,
90:21 - and we call the use state hook. For now, we'll
leave it empty, but it could provide it with
90:26 - an initial state in here. But we don't do
that for now. So as you can see, here, I'm
90:31 - calling use state and this one will give us
an array back. So from that array, I destructor
90:36 - out the state and the setter for the state.
Otherwise, we could do it like this. But you
90:41 - shouldn't do that. We have a const stayed,
you stayed like this, and this state will
90:49 - be an array with the first value date value
here. And then we have the setter, or the
90:58 - state as the second value. And then as we
didn't destructor, this one out here, we just
91:02 - put it in this constant called state. If we
want to grab the state, we have to type it
91:08 - in like this, to use the index zero because
that's the first value in the array. And if
91:12 - we want to set the state, we have to grab
the setter like this with the second value
91:17 - in the array, that is the index one. So that's
no good. Actually, it's much better to do
91:22 - it like this, instead, we destructed out and
we can also name them individually by doing
91:26 - it like this. Alright, so this is the way
to go, this is the way you should do it. So
91:32 - that's the state we'll that will hold all
the movies, then we're going to have the state
91:36 - for the loading, the loading and set loading
equals use state and this one, I'm going to
91:42 - give an initial state, I'm going to set it
to false. And this is also great with the
91:46 - use state hook, you can have as many of these
ones as you want, you can split the state
91:51 - up into multiple ones. And you couldn't do
that in the class components in react, because
91:56 - before we had the use state hook, we needed
to create a class to have state in react.
92:01 - And then we just had one state and you have
to have a state object with all the stuff
92:05 - in it. But now we can separate them out into
different states. And that's super great.
92:10 - So I'm going to create the third one that
are called error and set error. And this one
92:15 - is going to be used if we receive an error
from the API. So we can have this as a flag,
92:20 - and we set this one to false also. Right.
So that's the states, we have to do one more
92:26 - thing, because we have created this component.
And we also have to export it. So export default,
92:33 - home like this. See if we can get some more
formatting. Now it looks great. Anyways, alright,
92:39 - save the file. But if we go back to our application,
you can see that we don't see anything yet
92:44 - it just start here. That's because we have
created a component, but we're not actually
92:48 - using it. So in the app.js file, up here,
where we import the header, we're going to
92:55 - import home from dot forward slash components,
and home like that. And then we can use that
93:04 - component down here. So we remove start here
and use a component and we self close it,
93:11 - because we're not sending in any props. So
we just type out the name in a tag like this,
93:16 - save the file, go back to the application.
And you can see that it says homepage. And
93:20 - that's great. We know that it's working. And
you may wonder why we have all these warnings
93:26 - here. But they are just warnings because we're
not using these values. Now, they will disappear
93:30 - later when we use them in the component. So
nothing to worry about there. In the next
93:36 - video, I'm just going to do a short talk on
the standard hooks, that's indirect library,
93:41 - and then we move on and actually fetch some
data from the Movie Database API. Okay, before
93:49 - we move on, I just want to make a brief talk
about the built in hooks that's in the React
93:54 - library, we can also create our custom hooks.
And we're going to do that in this course
93:58 - also, but we have some hooks that's built
in that you probably going to use most of
94:02 - the time when you create react applications.
So I'm on the React js.org. And I'm in this
94:07 - chapter here that's called hooks. This is
great if you want to know more about hooks,
94:12 - because honestly hooks can be a little bit
hard to grasp in the beginning. So I highly
94:16 - recommend that you actually read this chapter
here if you're completely new to hooks. And
94:22 - if you're new to react, this is a great way
to start doing some reading before you do
94:27 - any course or create anything with react.
It's always a good idea to have some basic
94:31 - theoretical knowledge before you start with
something. But of course, it depends on how
94:35 - you like to learn stuff, so I shouldn't tell
you how to do it. Alright, so they have an
94:40 - introduction to hooks, they have different
chapters here, we actually going to look at
94:43 - this one number seven hooks API reference,
and I'm going to talk about the hooks that's
94:48 - built in the library, sort of separated in
basic hooks and additional hooks. And the
94:53 - basic hooks are probably the ones that you're
going to use not maybe 99% but perhaps 95%
95:00 - of the time, and then you're going to create
some own custom hooks and use some special
95:04 - hooks sometimes. So we already talked a little
about the use state hook. That's the one that
95:09 - you use for creating state in a functional
component in react. So that one we imported
95:14 - in the last video, and we initialized it and
set it up in the home component, we're also
95:19 - going to use the hook that's called use effect.
And use effect is a hook that you can use
95:23 - for side effects. So in our case, we're going
to grab data from an API, and that's a side
95:28 - effect. So we're going to use the use effect
hook for grabbing that data. And we're going
95:32 - to use the state to keep that data in our
application, then you have a hook that's called
95:37 - use context, we're not going to use that hook
in the main part of this course. But I am
95:42 - going to use the use context hook in the extra
chapter at the end, where I create a Movie
95:48 - Database, login in the application and make
it possible for you to cast a vote on the
95:54 - movies, then I'm going to set up a global
state that holds the login information of
95:58 - the user by using the use context. So that's
the basic hooks. And then you have some additional
96:04 - hooks use reducer, that's something that's
very similar to if you, for example, have
96:09 - used Redux. The use reducer is very similar
to that one. And it can be used instead of
96:15 - the use state hook if you want more. I don't
know if it's a more complex state. But yeah,
96:20 - yeah, maybe a more complex state than the
use state, we want to use it in this course.
96:25 - And the use callback and use memo hooks are
hooks that you can use to memorize stuff.
96:30 - If you don't want to recreate for example,
a function on each render, they are very handy
96:35 - if you for example, run into something that's
called an infinity loop with the use effect.
96:39 - That's very common actually, in react that
you can do that. Because if you set the state
96:44 - in a use effect that will trigger a rerender.
And if you have a dependency in the use effect,
96:49 - for example, a function that recreates on
each render, that will trigger that effect
96:54 - again, and that will set the state again,
and it will trigger the effect again. And
96:58 - yeah, you get the point here, it will create
an infinity loop, then you can use the use
97:03 - callback to wrap that function inside the
use callback hook. And that won't recreate
97:08 - the function on each render. Because by default,
if you create just a regular function, React
97:13 - will recreate that function on each render.
And use effect. If you specify that one in
97:19 - one in something that's called a dependency
array that we're going to talk about, then
97:23 - that use effect will trigger again, because
it will think it's a new function because
97:27 - that function has been recreated on the next
render. So use callback and use memo or hooks
97:34 - you can use to memorize stuff in react, but
I think there are a little bit more advanced,
97:39 - so I won't use them in this course, they use
ref hooked, we actually going to use that
97:44 - one because I'm going to show you a little
trick in this application. And a neat little
97:49 - use case to use this one use ref is basically
a hook you can use to create a mutable value
97:54 - that won't trigger a rerender, you can see
just maybe like you're kind of a regular variable
98:01 - that won't trigger a rerender. So we can use
this one to create a mutable value. Because
98:06 - if we have it in a state, it will always trigger
a rerender when we change that value. But
98:11 - if we change the value with the use ref hook,
it won't trigger a rerender. Use imperative
98:17 - handle, I've never used this one. So I'd actually
don't know what is for use layout effect,
98:22 - it's very similar to use effect. They only
differ in when they trigger. So there's no
98:27 - use case for the use layout effect in this
course. So I won't go into detail. And use
98:33 - debug value. I haven't used this one either.
These are the built in hooks in react. But
98:37 - I think the strength about hook is that you
actually can create custom hooks. And we're
98:42 - going to do that in this course also, that
was a brief introduction to hooks in react.
98:47 - So in the next video, we're going to fetch
some data from the Movie Database API, we're
98:51 - going to use the use effect hook and the use
state hook for that. Alright, let the fun
98:58 - begin, because now we're actually going to
fetch some data from the Movie Database API.
99:03 - And that's super exciting, because it's always
great when you see the magic happens when
99:08 - you have that nice little JSON object with
all the data that we fetch from an external
99:13 - source. I like that I love it. Alright, so
we're going to be in the home.js file for
99:19 - this one. Now, the later we're going to kind
of break this one out and place it in its
99:24 - own custom hooked. But for now, we're going
to be in the home component and created inside
99:28 - of here. So we're already importing US state.
But we're also going to import use effect,
99:34 - because we're going to use this one for fetching
the data. Then I have this file here, that's
99:39 - called api.js. And inside of this file, I
created all the functions for fetching data
99:44 - from the API. And I will also say that this
will probably one of the most advanced videos
99:50 - in this course and also one of the longest
so you can care a little extra about this
99:55 - video because it's kind of advanced stuff
in this one. Alright, in this file. api.js,
100:00 - I have this omit here where I export a couple
of functions. The three first ones are the
100:05 - ones that we actually need to care about the
other ones is for the bonus material for this
100:10 - course. So you don't have to care about that
now. So this one is the one that we're going
100:14 - to use now fetch movies, and this will fetch
a lot of movies, multiple movies, then I have
100:20 - this fetch movie without the s and this one
will fetch an individual movie. And then I
100:25 - have fetch credits. And that's the credits
for the movie itself. So these ones are going
100:29 - to be used for the individual movie page.
And if we take a quick look at this fetch
100:34 - movies, here, you can see that this one has
two parameters of search term and page. So
100:38 - we're going to give it the search term and
the page that we want to fetch. And I have
100:43 - a ternary operator here. And that's ies six
syntax for kind of a shortcut for if an else
100:49 - so I do a check here, I check if I have a
search term, and then I have a question mark.
100:54 - And if this one is true, if I have a search
term, it will run this one to the right to
100:58 - the question mark. And if this one is false,
I have a colon here, it will run this one
101:04 - to the right of the colon. It's a shorthand
for if and else, then I have to do this because
101:09 - we have different resources from them point
depending on if we're doing a search, or if
101:13 - we're grabbing the most popular movies. So
that's why I have this ternary operator here.
101:18 - If we in the search, we're going to use this
resource from the endpoint here and also attach
101:23 - the search term. And then we also grab the
correct page. So we add this as a parameter
101:27 - to the URL. And then I return on the wait.
And I actually waited two times. And that's
101:33 - because I first await the fetch from endpoint.
And then I await when I actually converted
101:38 - with JSON, because this one is also async.
So that's why I have to await. And as I have
101:44 - an await, I have marked this one with an async.
So I'm using the async await syntax for this
101:49 - one, you could also use the good old them.
But I think that's not as readable. I actually
101:54 - like this a lot more. So that's why I'm using
the async await syntax for this one. Alright,
101:59 - and I think that's it for this file. We don't
have to care about this, because we're going
102:04 - to import this function. So go back to home.js.
And just below here, I'm also going to remove
102:11 - the sidebar on market with API. And then I
import API from dot dot forward slash API.
102:20 - And this will give us this object where we
can access those functions are talked about.
102:24 - Alright, so that's the API, then down in the
actual component here, just above the return
102:31 - statement, we can create a new function that
we're going to call fetch movies. And as we
102:39 - fetching from the API, and we're going to
use a wait, we have to mark this with async.
102:44 - And then it's going to have two parameters
is going to have the page and the search term.
102:51 - And we can set the default value on the search
term to an empty string like this. And I have
102:58 - an arrow, and I call the brackets. So we create
this function here is an async function, because
103:04 - we're going to fetch from the API and await
the data. This one is going to get the page
103:09 - we can send in what page we want to grab.
And then we can also send in the search term,
103:13 - we haven't actually created this one yet,
because this one is going to be another state
103:17 - when we create the search bar. So we're going
to add in more states here later, and also
103:21 - have a state for the search term. And if we
don't send in a search term, we're going to
103:26 - fall back to an empty string. So we set this
one as default. So that's the fetch movies
103:31 - function. We're going to read this in a try
and catch block, try and catch. And we can
103:41 - get the error in this case, I'm not actually
going to set the error, I'm just going to
103:44 - have a flag that setting if it's true or false.
But of course, you can have a state where
103:48 - you can store the message from error Also,
if you want to do that. So in the catch, we're
103:53 - just going to have set error, and we set it
to true. And here to see how I use this setter
103:58 - for the state. So we destructor it out here.
And to set a new state for that one, we call
104:03 - this one and we give it the value. So I call
set error, and I give it the value true and
104:08 - this will change that state to true inside
of try block will first going to set the error
104:14 - to false. Because now we grab a new data.
So we have to make sure that this one isn't
104:20 - set to true because we don't have an error
before we have fetched anything. And we're
104:24 - going to set the loading to true because now
we're fetching so we set this flag to true.
104:29 - And this is how we can keep track on when
we actually fetching and we can show the loading
104:33 - spinner and stuff like that. All right. Then
I create a course that I call movies. And
104:38 - this course is going to hold all the movies.
So I'm going to wait. And from the API that
104:44 - we imported up here. We have that function
that I showed you. That's called fetch movies
104:51 - with an s really important, and then we're
going to give it the search term and the page
104:57 - So this will hopefully grab the movies for
us. And we can try yourself with console log
105:06 - movies. But if we go back to our application,
you can see that we don't actually get anything
105:11 - here because we haven't triggered this function.
And we have to do that in a use effect. So
105:17 - we have the function now, but we haven't triggered
it, do some more formatting, and go below
105:21 - the function here. And we call the use effect.
And the use effect is called with an inline
105:28 - function like this. And then we can do what
we want inside of this use effect. So what
105:33 - we want now is to trigger this only on Mount
only when we mount this home component on
105:39 - the initial run of this one. So we can do
this by specifying a comma here, and an empty
105:45 - array. This is what's called a dependency
array. For the use effect, we can specify
105:49 - different dependencies on when we want this
use effect to trigger. In our case, we just
105:55 - wanted for now, the trigger when we start
up the application, and when the home component
106:00 - mounts, so I specify this as an empty array
for now. And when we specify it as an empty
106:06 - array, it will just run once. So that's really
neat. In this case, we can just call fetch
106:13 - movies, we're going to send in one, because
we want to fetch the first page, we can also
106:18 - mark this one actually with initial render.
So we are specified an empty dependency array,
106:27 - meaning that it will only run once on the
initial render. And inside the use effect,
106:32 - we call our fetch movies function. And hopefully,
we will get the console log of all the movies
106:37 - if we save this one and go back to our browser.
And yes, you can see here we have the movie
106:42 - object here. So in this object, we have the
page one. And this is all from the Movie Database
106:47 - API. So it's nothing that we have set up here,
we have a total pages of 500, total results
106:53 - of 10,000. And we have the actual movies in
a property that's called result. And this
106:57 - is an array, and we get 20 movies at a time
from the API. So that's sweet, we know that
107:04 - we grabbing data, and we know that it does
triggers once. And that's super great. So
107:09 - now when we have the data here, we can actually
set our state because we have our state up
107:14 - here and we want to put our movies in the
state. So I'm going to call set state. And
107:21 - for this one, I'm going to provide it with
an inline function is a callback function,
107:26 - that's going to be called with the previous
state by the state setter, if you provide
107:30 - a state setter with a function, it's going
to be called with the previous state. And
107:35 - that's great, because we need a previous state
when we set the state. And I'm going to show
107:39 - you why in a second. So we have a parameter
that are called prayer, you can call it whatever
107:44 - you want. In the state, we want to set an
object, so we want to return an object, so
107:49 - I have a parenthesis and curly brackets. If
we didn't have the parenthesis, it would think
107:54 - that these curly brackets marks the scope
of the function itself. And that's no good.
107:59 - We want to return an object and an object
also is marked with the curly brackets. So
108:05 - we have this parenthesis before and this parenthesis
after, this will make sure that we return
108:10 - an object. And this parenthesis here is for
the setter, of course, so we have two parentheses
108:15 - here at the end. So I have this little neat
little plugin. Also in Visual Studio code
108:19 - where you can see I get these different colors
of the parentheses. So it's really easy to
108:24 - see the parenthesis, I think it's called rainbow
brackets that plugin. So we're going to set
108:30 - the state we have the movies inside of this
cost. So I'm going to use the e6 syntax that's
108:35 - called spread, I use three dots and spread
the movies. And this is because I'm going
108:40 - to take this object here and spread it out
here. That means that we creating a new object,
108:45 - it's going to take all the properties from
this movies and spread them out inside of
108:49 - this object here. When you set the state in
react, you should always provide it with a
108:53 - new value, you should never mutate the state
in react because if you mutate the state directly,
108:59 - it won't trigger a rerender. And there can
be a lot of trouble. You should always use
109:03 - a satellite this to modify the state. And
you should always provide it with a new value
109:08 - and not mutate the state. Really, really important.
Never mutate the state in react. Okay, so
109:15 - we have the movies. And then if you remember,
we have this property here that's called results.
109:21 - So this is holding all the movies. But in
our case, we need to decide on how this new
109:26 - state should look because if we load more
movies, we want to append the new movies to
109:31 - the old state to the old movies and not wipe
them out. So we have to do some check here
109:36 - for that on the results. So we have the results
property, colon, and then I'm going to put
109:41 - it on a new row. I'm going to check if the
page is greater than one. Then I have a question
109:46 - mark. This is a ternary operator here again,
are going to return a new array are spread
109:52 - out from the previous state prep. That's the
one here as I told you, this one is getting
109:57 - called with the previous state So from the
previous state, I spread out the old result,
110:04 - three dot prevot dot results with an S at
the end. All right, so that's the old movies
110:11 - that we already have in the state, then I
have a coma. And I'm going to attach the new
110:15 - movies from the new movies, dot dot dot movies,
dot results. And this one is going to append
110:22 - the new movies to this array. So we get an
array with the old movies and the new movies.
110:27 - And that's great. Then we have a colon because
if we're not loading more, we can wipe out
110:32 - the old movies and just give it the new movies
that we got in this concept called movies.
110:38 - So dot dot, dot, movies, dot results, like
this is some auto formatting. And this will
110:45 - hopefully work. We don't know if it works,
because we haven't created a load more button
110:50 - yet. So we'll see that later in the course.
And there's one more thing we have to do,
110:54 - because we setting the loading to true here.
And we have to set it to false when we have
110:58 - grabbed all the movies. So just below the
try and catch block here at the end of this
111:04 - function, we're going to set loading to false
like this, save the file, go back to see that
111:11 - it works. reload it, and yes, it works. And
that's super great. But we call slogging it
111:17 - out here, we don't know if it works with the
state. So we remove this console log, and
111:22 - go down here somewhere just above the return
statement, and we can console log out the
111:28 - state instead, save the file. And we hope
for the best. Go back to the browser. And
111:34 - yes, you can see we have the state here. And
you may wonder why is it showing this many
111:38 - times. And that's because if we look in the
home component, we have three different states
111:44 - here. So it will rerender each time we change
one of these states. And some may say and
111:49 - go crazy, oh, we have a lot who renders that
crazy, it will make this application so slow.
111:55 - But yeah, you shouldn't worry about that,
actually, because react will diff those things
112:00 - and only update things in the DOM that has
changed. So it doesn't matter if it rerender
112:04 - this many times. And to be honest, React is
fast. So even if you had a lot of rear Enders,
112:10 - you won't have any performance issue in an
application of this scale, don't worry, it's
112:15 - completely okay that it renders all these
times because it won't rerender the complete
112:20 - page, it will only run the stuff that has
changed. All right, that's how you fetch data
112:26 - from the Movie Database API with a use effect
hook and then you put it in the state with
112:31 - the use state hook. In the next video, we're
going to take all this logic here and create
112:36 - our own custom hook and place that data inside
of there. And then we can get rid of this
112:41 - one in the home component. So it will look
a lot cleaner. Okay, we're grabbing data from
112:48 - the Movie Database API with the use effect
hook and we place it in the state with the
112:52 - use state hook, we're going to move all this
logic inside of a custom hook instead, because
112:57 - that will make this component A lot cleaner.
And it's always great to separate out this
113:01 - logic, if we want to reuse it somewhere else
in the application. In our case, we don't
113:06 - need to do that. So we do it just because
we want to clean up this component and to
113:09 - separate out this logic. So that's why you
create custom hooks. Either you do it because
113:14 - you want to reuse some logic somewhere in
your application, or you want to clean it
113:18 - out and have that separated out. So inside
of the src folder, not in the components folder,
113:25 - this time inside of the src folder, create
a new folder, that's called hooks. And inside
113:32 - of that folder, create a new file that's called
use home fetch camel casing, dot j s, capital
113:39 - H, capital F. And why do I name it like this?
Well, React wants you to name all your custom
113:46 - hooks with use and then your name. That way
react knows that this is a custom hook, you
113:52 - could skip to use use. But you shouldn't do
that you should always name them with use
113:57 - before the name, always do it like that. Otherwise,
it can give you trouble in the future. So
114:03 - inside of this file, I'm going to create a
new function. I'm going to export it also
114:08 - because we're going to import this one in
our home component and use this custom hooked,
114:14 - export const use home sets. And I create a
regular arrow function like this. Alright,
114:22 - so that's our function, then we go back to
our home component inside of the components
114:26 - folder. And we're going to grab all this logic
here, all the states, the first move is function
114:32 - and the use effect. We can keep the console
log for now is going to give us an error but
114:37 - that's okay, we're going to fix that soon.
Go back to the use home fetch custom hooked
114:43 - paste the logic in here and it complains now
because we haven't imported this ones here.
114:49 - So we could actually just copy them from the
home component but just as before, I want
114:53 - us to type in stuff a lot here because we
learning stuff. So we're going to import from
114:59 - the rack. library, we're going to need the
use state. So import curly brackets, you state
115:06 - coma use effect. And we're also going to use
the hook that's called use ref laters, we
115:13 - can import that one also. And we import it
from react. And you can see the red, don't
115:19 - import react in this one, because we not need
the actual react library, we just need this
115:24 - stuff from that library. So that's why we
don't have any JSX or anything here. So that's
115:29 - why we don't need to import react itself,
we also need to import the API. And that one,
115:36 - we can actually just copy this one from the
home. So go back to the home, cut this one
115:42 - out here, the import API like this, go back
to the US home fetch hooked and paste it in
115:50 - here. And this one should be it. All right,
is more of mining. And we only have this function
115:58 - or we're not actually returning something,
we have to return something in our custom
116:02 - hook also. So go down to the bottom of the
function. And here we're going to return our
116:07 - state's for now, we're going to return more
stuff in this one later, when we create more
116:11 - stuff. But now we return on object. And we
have the state, we have the loading and error
116:20 - like this. And this is also a sixth syntax,
as we return this object, this one is automatically
116:25 - going to get the property state because it
has the same name. And all of these ones has
116:30 - the same name. So we don't have to specify
them explicitly, it will figure this out itself.
116:35 - All right, there's one more thing I want to
do inside of this one before we finished for
116:40 - this video. And that is I want to create an
initial state. So up here, I create a const
116:45 - initial state, it's always a great idea to
have an initial state if you want to reset
116:50 - stuff. And we want to do that later. So I'm
going to structure the state just as the one
116:55 - that we got back from the Movie Database API.
So we have the page, it's going to be zero
117:00 - initially, then we have the results. That's
the property that holds all the movies are
117:05 - going to provide it with an empty array initially,
where the total underscore pages is going
117:12 - to be zero. And the total underscore results,
it's going to be zero also. So this is the
117:20 - initial state. And now we can give this initial
state to the use state here where we create
117:25 - a state. So provided with the initial state,
and this will make sure that it gets the state.
117:31 - All right. So that's our custom hook. For
now, we go back to the home component. And
117:36 - now we have to use this custom hook. I already
created this comment here where we're going
117:40 - to import it. So we import curly brackets,
use movie fetch, like this, from dot dot forward
117:51 - slash hooks, and use home fetch. Then inside
our sad little empty home component, we're
117:59 - going to use this one. And yet again, I'm
going to use ESX destructure syntax to get
118:04 - those properties from the object that we exported
here. We export an object with all these values
118:10 - here. So I'm going to destructure them out
here. curly brackets stayed loading an error,
118:19 - equal sign and our call my custom hook use
movie fit. So this will hopefully work. We
118:26 - console log in out to state so save this file,
make sure that you also save the hook itself.
118:32 - And go back to the browser. reload it. Yeah,
I have some arrow here. Use movie fetch is
118:38 - not exported, didn't I export it? export const?
Yeah, it should be used home fetch, of course,
118:46 - not use movie fetch. A change this one to
use home fetch. us home fetch homefacts like
118:56 - this, save the file, go back to the browser.
And you can see that we have our state here.
119:02 - And that's great. You can see there's a lot
of renders. And a lot of people will say,
119:06 - oh, crazy. There's too many renders, this
is a performance issue. But it's actually
119:11 - not. So this is totally fine. But you can
see that it we have our initial state here
119:15 - first, and it's zero, everything is zeroed
out. And then we get the data here. And we
119:20 - have all the movies inside here. So that's
sweet. And I promise you it won't be any performance
119:28 - issue in this application because of these
renders. So this is how you create a custom
119:34 - hook in react. Always name your custom hooks
with use before you have your name. That's
119:40 - really important, you should always name them
like this. In the next video, we're going
119:44 - to start creating the components for the homepage
and we're going to start with the hero image.
119:51 - In this video, we're going to create this
hero image here in the application. So we're
119:55 - going to grab a background image and all the
text here from the Movie Database API. Actually,
120:00 - we have already grabbed them. So we're going
to use that data inside of the hero image
120:05 - component. So let's go back to our code editor.
And inside the components folder, create a
120:10 - new folder that we call hero image, capital
H capital I, and inside the hero image folder
120:19 - and create a new file that we call index dot
j, s, and also file that we call hero image
120:27 - dot styles. dot j s, just as before, are just
going to scaffold out the style so we can
120:34 - use them in the component, but I'm going to
create the actual styles in the next video
120:38 - instead. So if you already have this file
here and choose to not create the styling
120:42 - for this course, you already have this file
here and don't need to do this. So in the
120:46 - hero image.styles.js import style from style
components like this, then I'm going to export
120:55 - a cost that are called rapper is going to
equal from style dot div, I'm going to create
121:01 - a div I have backticks like this, then I'm
going to export const content equals styled.do,
121:13 - exactly the same and double backticks. And
I'm going to have one that's called export
121:19 - const text equals styled dot div double backticks.
And that's it. That's three Olam, save this
121:34 - file and go inside the index.js file, we import
react from react, then we're going to import
121:42 - the styles. So I marked it with styles, import,
wrapper, calm content, and text from dot forward
121:56 - slash hero image styles. Right? Then I create
the component itself const hero image capital
122:06 - letters h n i equals and this one is actually
going to receive some props. And a probe is
122:14 - something that you can send into component.
So that component can change dynamically,
122:18 - depending on the props, a prop should never
be changed inside a component that receives
122:23 - the props. So they can only change if something
rerun this and they get a new prop. So that's
122:29 - how that works. And the props is sent into
component on a prop object like this. So we
122:35 - have the Prop, I have an arrow function. And
for this one, I'm just going to return JSX.
122:40 - So I can make an implicit return. So I have
parenthesis so I can skip the return statement.
122:46 - And then I have my wrapper. And this is a
style component, we scaffold it out just recently,
122:52 - this one can also receive a prop. So when
you send in a prop to a component, you do
122:57 - it by naming the prop and then you give it
the value. In this case, it's going to be
123:02 - from the prop that this component get prop.
There's going to be a prop that called image.
123:09 - So we send out along to this style component,
that's named wrapper. And in the next video,
123:13 - I'm going to show you how we can set the background
image in this component by sending in the
123:18 - image URL to the style component that's named
wrapper. So that's what I'm doing here. So
123:24 - I'm sending this URL along to the style component
on a prop that's called image inside this
123:30 - wrapper, we're going to have the content.
And inside the content, we're going to have
123:35 - the text like this. And inside the text, we're
gonna have a regular h1 tag. And in JSX, when
123:44 - you want to use a JavaScript expression, you
create curly brackets, and then you type in
123:49 - your expression. In our case, we want to show
the title. And this hero image is going to
123:54 - receive the title from the prop that's called
title like this, and you end it with a curly
123:59 - bracket. You can have any JavaScript expression
inside of here that you want. So you can do
124:04 - some calculations and map through stuff and
things like that, that we're going to do later
124:08 - also are going to show you that now we have
a p tag. Yet again, I have curly brackets,
124:15 - I have the text and curly brackets. And that
one is from the prop dot txt. There's more
124:22 - formatting. And then I export default hero
image. This looks fine, actually. But I want
124:33 - to show you a little trick here now that you
should use when you create your components,
124:37 - because now we have to type out prop dot image
prop dot title prop dot text. So instead you
124:43 - can use e6 syntax up here and destructure
out these props from the prop object. So we
124:50 - have parenthesis, number of curly brackets,
so we have destruction of this object. And
124:55 - then we have the image, title and the text
And then we can remove prop here on all of
125:03 - these. So I think you should get used to always
doing it like this because it will look a
125:10 - lot more cleaner with the structure mount
up here. So we don't have to type in prop
125:14 - every time. Alright, save the component. And
just as usual, we can't see anything. Now
125:20 - if we go back to our application, because
we haven't used the component yet, save it,
125:24 - go back to home. And up here, where I marked
it with components, we import hero image from
125:32 - dot forward slash, hero image. And now we
can use this component. So below here, instead
125:40 - of homepage and this div, we can just return
the hero image like this. But we want to send
125:48 - along some props to this one also, because
this one needs the title and stuff like that.
125:53 - And we also need to check that we actually
have any movies in the state. So we can't
125:57 - actually do it like this, because it will
throw an error if we don't have any movies
126:01 - in that array. So what we can do here, instead
it we return something here inside of the
126:07 - parenthesis, because we're going to need multiple
rows to move this one inside of here, instead.
126:14 - And as I told you before, we can only return
one parent element in JSX. So we have to wrap
126:19 - this one because we'll have more components
here later. So we can create something that's
126:23 - called a fragment in react, we could of course,
create a div like this and move this one inside.
126:29 - But sometimes we don't actually want to create
a div, we just want to return this without
126:33 - creating a div. And you can do that by creating
a fragment. And this is the shorthand for
126:38 - fragments, you just create this angle brackets
and an end angle bracket. And this will work.
126:45 - So inside of here, we also want to check if
we actually have some results in the state.
126:50 - So just as before, as I did in the hero image
itself, if you can see are in the JSX, where
126:56 - I have a JavaScript expression, I can do the
same in the home. To go back to the home,
127:01 - I have a curly bracket, and now I can use
any JavaScript expression that I want. So
127:06 - I want to check if state results. And the
hero image is going to be the first movie,
127:14 - it's going to be the most popular movie. So
I grabbed the first element in the array,
127:18 - I check if that one exists. And then I do
something that's called a short circuit. So
127:23 - I have double ampersands. And I'm going to
move this column bracket to the end of here,
127:31 - because I want this one to be nested inside
of this one. So this means that if this one
127:37 - is true, it will run this code here. If it's
false, it will just fall back. And sometimes
127:42 - some argue that you shouldn't do it like this,
because it will return the actual value false
127:48 - here, but JSX won't show it. But if you want,
you could instead do a ternary operator like
127:53 - this. So if this one is true, we return the
hero image. And then we have colon otherwise
127:58 - we return null, we can put it on its own roll.
And this will also work. And we want to give
128:05 - this theory some props. So we have a prop
of image. And that one is going to equal.
128:12 - And this one I have to construct because the
image URL is constructed by the image base
128:17 - URL that we that we get here, and also the
backdrop size. So I have backticks in dollar
128:25 - sign curly brackets, I'm going to grab the
image base URL like this. And this one is
128:32 - going to be long, so I'm going to remove the
sidebar. So this is a template literal. And
128:36 - you can interpolate expressions like this
in a string literal. Alright, then I'm going
128:42 - to add the backdrop size, like this. And then
I'm going to add, you can see I have dollar
128:49 - sign and curly brackets for all of them here,
dollar sign and curly brackets again, from
128:55 - the State DOT results, I grab the first element
again. And then we have something that's called
129:03 - backdrop, underscore path. Be very careful
about the spelling here. So you get that correctly.
129:09 - It's really, really easy to make a typo here.
And then it won't work. This will get us the
129:14 - image URL. And these ones are all set up in
this file here. Let's call config. They are
129:19 - set up as per instructions from the Movie
Database API. You can see the image base URL
129:25 - is this URL here. So that's the one and then
I set the backdrop size. You can change this
129:30 - size if you want and try it here. You can
make them smaller, and you can set them to
129:34 - the original size. I set them to width 1280
in this case. So that's what I'm grabbing
129:40 - here. And I'm generating the string here by
merging them together in this template literal
129:45 - here. Right now we have the title. And we
get that one from state auth results. The
129:56 - first element and we have a property that's
called original underscore title like this.
130:04 - And then we have the text yet again from state
results. From the first element, you could
130:12 - also break this out in its own variable if
you don't want to type this in every time.
130:17 - So there's probably been a lot of things you
can optimize in this application. But as this
130:20 - is a beginner slash intermediate course, I
don't want to do a lot of stuff like this,
130:25 - because it will only take time. And it will
be confusing with all the other stuff going
130:30 - on. So we have a property here, that's called
overview. And these are, of course, all from
130:36 - the Movie Database API is nothing that I have
created. These are named like this from the
130:41 - Movie Database API. All right, do some auto
formatting. So you can see here I send in
130:46 - three props, image, title, and text. And these
are the ones that I destructed out in this
130:51 - component itself. So when you want to give
a prop two a component, you do it like this,
130:57 - you named the Prop, and then you give it the
value. And then you can grab those props inside
131:01 - of this component. So save the file, go back
to the browser, and you can see that we can't
131:07 - see anything yet. But if I mark it here, you
can see that we have the text. But we don't
131:12 - actually have set any styling for this one
yet. So that's what we're going to do in the
131:16 - next video. And then we'll hopefully see this
nice little hero image in our application.
131:24 - It's time to create the styles for the hero
component. So move back inside of the code
131:28 - editor, and the file that's called hero image
dot style dot j s that we created in the last
131:35 - video. So we have all these components here,
and just give it some space here. And we're
131:40 - going to start with a wrapper, and to the
wrapper, we send in a prop. If you remember
131:45 - this one here, you can see we have this image
prop here. So just as we do with regular component,
131:51 - we can send him props to style component.
And this is something that is super great
131:56 - with style components. Because this way, we
can do some stuff with a CSS. And in our case,
132:02 - we want to set a background image, the usual
way you did that back in the days was that
132:06 - you had to create some inline CSS when you
had a dynamic image. And you didn't know from
132:11 - the beginning where it came from, or what
didn't what his name was, you had to set it
132:16 - with an inline styling on the element itself
in the HTML. But in this case, we can do it
132:22 - much, much cleaner and sending a prop to this
component. And we set the image here. And
132:27 - also we're going to create if you look here
at the finished application. I don't know
132:31 - if you see it now. But there's a slight little
gradient down here also, because I want this
132:37 - text to be able to be seen on any different
background. That's why I have a dark little
132:41 - gradient below this text here. So that's what
we're also going to create. So in the repple
132:48 - component, we have this div that we styling
here with style components. So we have the
132:53 - background. And we're going to set a linear
gradient first linear gradient, parenthesis,
133:03 - and is going to go to bottom RGB a and I use
this because I want to set the alpha value
133:11 - 0000. And these values are auto generated
from somewhere on the internet, I usually
133:19 - do that when I create gradients, it's so easy
to just go there and type in your gradient
133:24 - and it will give you the code. So that's why
all these values may seem a little bit odd.
133:28 - This one is 39%. And the RGBA is going to
be 0000 again, and 41%, rgba, 000 and 0.65.
133:49 - That's the alpha value. And I see you know
that this one shouldn't even need to have
133:53 - to have these ones here. I think actually,
I can remove this one here. We don't need
133:58 - that one. And then we said 100%. And just
after the parenthesis, the end parenthesis,
134:05 - we have a comma. And then we specify the URL.
And now we can grab that prop that was sent
134:10 - in here. And you do that as this is a template
literal, just as before we use dollar sign
134:16 - in curly brackets, and we can grab those props,
you create an inline function and this one
134:21 - will get called with the props. And from the
props, we grab the image and if you want to
134:26 - destructure amount, you can do that also here,
then you have a parenthesis and then hold
134:31 - the object. Then we restructure the image.
And we do it like this. Right. Now we have
134:38 - a coma from the variable, regret dot Ray.
And hopefully this will work. Do some auto
134:47 - formatting and save it go back to the browser.
And you can see that we actually had the image
134:51 - here but we haven't set any other properties.
So that's why it will look like this. So let's
134:57 - go back here and we're going to set the background
On size 100% and cover, we're going to set
135:06 - the background position to center the height
is going to be six 600 pixels. position is
135:21 - going to be relative, because we're going
to absolute position or text. So that's why
135:25 - we have to set this to relative. And we're
also going to have a slight animation on this
135:29 - one. So I set an animation that are going
to call animate hero image, and is going to
135:37 - be for one second. If we look at the finished
here, you can see that it kind of fades up.
135:44 - So that's the animation that I'm going to
create. And I do that below here. And nested
135:50 - inside of here. So act keyframes, and the
name is animate hero image. I go from Opacity
136:03 - is going to be zero to Opacity is going to
be one, save it, go back and see what we've
136:12 - got. There you have it, there's some little
border up here. I don't know why. Let's see
136:21 - if it's sort itself out when I create other
styles. But you can see that it it animates
136:29 - in here quite smoothly. So that's great. Alright,
let's fix the other components. So we have
136:34 - the content, padding is going to be 20 pixels
on that one, we set a max width, and we grabbed
136:42 - from our variable max width. And Morgan is
going to be zero in order to save it, let's
136:52 - check it out, you can see that it's in the
center now. That's great. And that one removed
137:00 - that nasty little border up there also, that's
sweet. Then we have the text. Let's create
137:09 - that one also, I set the cell index 200. Just
to place it on top, I set the max with the
137:18 - 700 pixels on this text position is going
to be absolute. from bottom we're going to
137:26 - set it to 40 pixels and margin right is going
to be 20 pixels. The min height is going to
137:34 - be 100 pixels. And the color is going to be
from the variables we have the white. All
137:43 - right, so that's our text. And inside we have
the h1 tag. So for that one, I set the font
137:50 - size. And for more variables, we have font,
super big camel casing. And then I'm going
137:59 - to have a media query on this one media screen.
And Max course I have to end this way to see
138:08 - my colon max with 720 pixels. And I set the
font size to variable dash dash formed big,
138:23 - so I'm making it slightly smaller. Right,
that's the h1. Then we have the p tag, it's
138:33 - gonna have a font size. From the variables,
we grab font med. That's the medium size.
138:43 - And then we have a media query media screen
and you set the max with the 720 pixels. For
138:55 - that one, the font size is going to be a variable
font small. So this means of course, that
139:04 - up until 720 pixels, we will use the form
small otherwise it will use the font medium.
139:11 - And the same goes here, we use the font big
up until 720 pixels otherwise was used the
139:17 - font super big. All right, then we're going
to have a media query on the text itself.
139:23 - So media screen and max width 720 pixels.
And we set the max with 200%. And there may
139:38 - be room for optimization in the CSS because
I haven't put the most focus in the CSS for
139:44 - this course, as this is a course in react.
But I wanted to show you how to create the
139:49 - CSS also. So that's why I included it. But
there are room for optimization I'm sure of
139:55 - that. Go back and see what we got in it. seems
to be working. Let's see what happens. Yeah,
140:03 - you can see it gets smaller. And that's great.
Now, it's actually starting to get fun because
140:11 - now we see different stuff happening here,
things are displaying on the screen. And that's
140:15 - what I like with front end development to
actually see it's put together like this.
140:19 - Alright, in the next video, we're going to
create the logic for the grid component. So
140:26 - we have our hero component, and the next component
would be the actual search bar. But I'm going
140:31 - to save that one for later. So we're going
to create this grid now instead, in this video.
140:36 - So let's start by creating a logic just as
usual. And in the next video, we create the
140:40 - styles, go back to the code editor. And inside
the components create a new folder, that's
140:46 - called grid. And inside the grid, create a
new file that's called index dot j s. And
140:52 - another file is called grid dot styles dot
j, s and capital G on the grid, of course,
140:59 - and just as before, we're going to be in the
grid dot styles dot j s first to create the
141:04 - placeholders for the style components. So
import styled from styled components, then
141:12 - we export the columns that we call wrapper.
And as you can see here, this is great with
141:18 - starter components, because I named them the
same, but it doesn't matter, they will be
141:21 - scoped to that component. So we can have this
exact same name. That's super sweet. So the
141:29 - styles won't interfere with each other. So
style dot div, double backticks. And then
141:37 - we export const content, and that equals A
styled dot Dave, also n double backticks,
141:47 - save it and go inside of the index.js file.
So we import react from react, hopefully you're
141:56 - starting to learn is now so this will be in
your muscle memory later. Then we have the
142:03 - styles, we import the wrapper, and the content
from dot forward slash grid styles. Then we
142:15 - create a component itself const grid equals,
and I'm going to destructure or two props
142:21 - that we're going to send into this one. So
header and children. I have an arrow function,
142:29 - and I'm going to do an implicit return. And
you may wonder what children is. And that
142:33 - is a default prop that we can use in react.
When we nest stuff inside a component, they
142:39 - will be accessible in the children prop. So
that's great, I'm going to show you how that
142:43 - works in a second, we're going to have a wrapper.
Then we have an h1 tag. And then I have curly
142:51 - brackets because I'm going to grab the header
prop and display that here. Then we have the
142:57 - content. And for that one, I create another
curly bracket, and I grab the children. So
143:04 - that means that whatever I wrap inside of
this component, when I use it, I can display
143:09 - it here by displaying the children, then we
need to export default grid like this and
143:17 - save it. So this is pretty much it for the
grid component. If we go back to the home.js
143:23 - file, we can import it up here. Import grid
from dot forward slash grid. And then just
143:34 - below here below the hero image, I'm going
to use the grid here. And this one is going
143:39 - to get one prop is the header equals popular
movies. So inside the grid, I'm going to map
143:46 - through all of the movies in the state. So
I have curly brackets and State DOT results.
143:51 - I map that's also a sixth syntax, we have
a movie. In this inline function, I can make
144:00 - an implicit return. So I have parenthesis.
And I use a lot of e6 syntax here as you can
144:07 - see, and hopefully you know a bit about it
before you start this course because it will
144:12 - be too long of a course if I explain every
little syntax in detail, but I try to explain
144:17 - some stuff for you. And hopefully, you'll
learn a lot also from it. But the map method
144:23 - is something you can use instead of a for
loop. So use the map on the array, the results
144:27 - array, and it will map to each item in the
array. We haven't created a thumbnail yet.
144:32 - So we're going to create a div. And I think
we have a property that's called title. So
144:40 - I map through every movie and now I'm just
going to show a div in the grid that shows
144:44 - us the movie title. Or format it save it go
back to the application. And you can see that
144:51 - we have all the movies here so displaying
the title, and you can see that it also warns
144:55 - us now each child in a list should have a
unique key prop That's when we map through
145:01 - things, we have to market with a key also
otherwise, React will complain. React is using
145:06 - this internally to diff stuff and to optimize
itself. So we can set a key on this one. And
145:13 - we're going to give it the movie.id. So this
is a unique ID that we get from the Movie
145:18 - Database API, it's sometimes return two of
the same movie, and this one will actually
145:23 - give a warning done. So it's some bug in the
API, I think, because it should only return
145:29 - one of each movie. So if it gives you a warning,
it's probably that because it has probably
145:35 - returned more than one of the same movie.
So you could actually add something else,
145:40 - you could add a random number, also to the
movie ID if you have that problem. So let's
145:45 - go back to the application. And you can see
that it doesn't complain now. So now it's
145:48 - happy, we have provided a unique key. And
that's super great. And we have the titles,
145:53 - but it looks like crap. Now because we haven't
styled it and we haven't created the thumbnails
145:57 - yet. In the next video, we're going to style
the grid itself, and then we're going to create
146:01 - the thumbnails. So we have our grid, but we
have to style it also. And that's what we're
146:12 - going to do in this video. Move back to the
code editor and in the file that's called
146:16 - grid doc stars dot j s in the grid folder,
we have already created this one here. So
146:22 - we're just going to fill them up with CSS.
And also I can tell you, if you don't have
146:26 - that plugin installed in Visual Studio code,
I have a plugin that's called VS code dash
146:33 - style dash components. So that's the one that's
create this nice syntax highlighting inside
146:38 - of this style components. So that's a little
tip if you haven't installed that one. Alright,
146:43 - so let's create the stars for the wrapper.
First, we're going to set the max width from
146:48 - our variable that's called max width. Then
we set the margin to zero auto, that will
146:58 - center the div, and we give it some padding
zero and 20 pixels that's padding on the sides.
147:03 - And then we have the h1 tag, I'm going to
set the color from the variable mid gray on
147:12 - that one. And then also, I'm going to have
a media query. So at media screen, and Max
147:22 - dash with 768 pixels. And this one is going
to change the font size from the variable
147:34 - font big. Alright, save it go back to the
browser. And you can see that we have this
147:43 - nice Morgan's here, but we haven't actually
created a grid yet. So that's what we're going
147:47 - to do next. Inside the content component,
we're going to display a grid. Then we set
147:57 - something that's called grid template columns,
grid dash template dash columns, we're going
148:05 - to set this one to repeat. And this is a little
trick you can use if you want to create a
148:11 - responsive grid, so we repeat these columns,
we set it to auto fill a coma, and then we
148:19 - use the min max 200 pixels, that's the minimum
width that those little thumbnails can have.
148:27 - And then we set it to one fragment, so we
don't specify an exact pixel width on the
148:33 - max value. And this is CSS Grid syntax. And
the CSS Grid will probably require a complete
148:41 - course on its own. So I'm not going to go
there. Grid gap, we're going to set that one
148:48 - to two REM so that will give it some spacing
between the rows and the columns, save it,
148:54 - go back to the browser, and you can see that
we have our grid. So now it's showing us five
148:58 - items on each row. If we do like this, you
can see that it is responsive. And that's
149:06 - super great. That's a neat trick you can use
if you have a grid like this, just with one
149:11 - row in CSS Grid, you can make it fully responsive.
So that is really, really cool, actually.
149:17 - And it works because we set this one to repeat
the columns, and we set it to autofill. And
149:23 - then we set a min and max value. So we're
telling it when it's 200 pixels wide, it can't
149:28 - go lower. So then it removes one column instead.
And it's going to do that all the way down
149:34 - to the mobile devices. All right, that's the
styling for the grid. It was pretty fast.
149:40 - I think. In the next video, we're going to
start creating the thumbnails. We have the
149:46 - grid now, but we haven't created the thumbnails
for the movies. So that's what we're going
149:50 - to do next. Move back inside of the code editor
and inside the components folder, create a
149:56 - new folder that you call thumb, capital T
inside of that folder, you create a new file
150:02 - that's called index dot j s. And then you
create another file that's called thumb dot
150:08 - styles, dot j s, I hope you're beginning to
see the pattern here on how I structure the
150:14 - components. So first, we're going to start
in the thumb dot style dot j s, just as before.
150:20 - So we import styled from styled components.
And for this one, we're only gonna have one
150:29 - component. So export const. Image capitalized.
And this one is going to be styled dot IMG
150:36 - because we styling the image here. Right,
save it and go back to the index.js file or
150:49 - the thumb. So first, we import react from
react. Then we mark it with styles an import
150:59 - image from dot forward slash thumb styles.
We're going to import some more stuff here
151:07 - later, because these thumbnails are going
to be clickable, we're going to create that
151:10 - later when we have set up the routing, and
also started to create our movie page. So
151:15 - for now, we create our thumb component, cost
thumb equals, I'm going to destructure out
151:22 - an image prop movie ID and clickable, I make
an implicit return on this one, because I'm
151:30 - only going to return JSX. For this one, I'm
going to have a wrapping div, like this. And
151:36 - then we're going to use this prop to tell
if it's clickable or not. And then we're going
151:40 - to have a ternary operator here. But for now,
we're just going to return an image. That's
151:45 - the image that we created here. The source
is going to be wrong the image prop. Eric
151:53 - is that an old of movie thumb on that one.
With self, close it. And then down below here,
152:05 - we export default, some save the file, then
we're going to go back to the home component
152:12 - and also import this one. So up here, import
some from dot forward slash thumb. Alright,
152:22 - and below here, where we map through all of
the movies, we're going to use a thumb instead
152:28 - of this div, remove this one here, and we
use the sum, then we're gonna have a key for
152:38 - this one also, because we always need to have
a key when we are mapping through components
152:42 - like this and display them. So the key is
going to be just as before the movie.id we're
152:49 - going to set it to clickable, that's going
to be true, it's always default to true. So
152:54 - you don't have to do this, if you want to
set it to true. For now that one isn't working,
153:00 - because we didn't utilize it in the component
itself. But we're going to fix that later.
153:06 - Then we have the image prop and we're going
to give it the URL to the image. And for this
153:09 - one, we're also going to use that fallback
image if we don't have any image for the movie.
153:14 - So we're gonna have a taller operator here,
movie dot poster underscore path. So we're
153:20 - checking if we have imposed a path if we don't
have that we're going to display the fallback
153:24 - image. But if we have this path, we know that
we can grab that image. So we have a question
153:29 - mark. I'm typing it on another row here, but
it's the regular ternary operator. Then we
153:34 - have the image base URL. And I'm actually
going to show you the other way now not do
153:38 - it like this here. But you can do it the old
way with plus, instead, where the poster size,
153:45 - and then we have the movie dot poster path,
movie dot poster underscore path. Be very
153:53 - careful with the spelling, it's very easy
to make a little typo here. And that will
153:57 - break everything. Alright, so that is when
we have a poster path, then we have the colon.
154:02 - And we're going to display the no image if
we don't have a poster path. So that's the
154:07 - image, then we're going to send in the movie
ID. And that is because when we click on a
154:13 - thumbnail, we need to have the movie ID for
that thumbnail. So we know what movie to grab
154:17 - and display on the individual movie page.
So movie.id and then we're going to close
154:26 - the thumb component. So be very careful here.
It's a little bit nested. And it's very easy
154:32 - to type something wrong here. But this should
be right i think i really hope so. I save
154:37 - it back to the browser. And as you can see
we have the thumbnails but it doesn't look
154:45 - right. And that's because I haven't styled
them yet. But at least we display something.
154:50 - So in the next video, we're going to start
the thumbnails some to make it look something
154:54 - like this instead. Really pretty modern. I
hope Okay, we soon have a grid with nice little
155:04 - thumbnails, we just have to style the thumb
component itself. Inside the thumbnail styles
155:10 - dot j s, we already created this one, we're
going to style it inside of the image style
155:15 - component. So we're going to set the width
to 100%. The max width is going to be 720
155:24 - pixels, transition, all 0.3 seconds. And that
is because I want some nice transition on
155:35 - hover. Objects object dash fit is going to
be cover border dash radius is going to be
155:44 - 20 pixels. And the cover here will center
the image and make it fit nicely into the
155:50 - thumbnail. So that's a really handy little
rule you can use in CSS for stuff like that.
155:55 - I also got to have an animation on this one
because I want it to fade up, we can actually
155:59 - look at that in the finished application.
You know, you can see here that these thumbnails
156:03 - are also fading up just as the hero image.
That's what I wanted animation for. So I call
156:11 - it animate thumb. 0.5 seconds. So we're going
to create that animation. So add keyframes
156:24 - and animate them. Right from a set the opacity
to 02. It's going to be opacity one, that's
156:41 - the animation. And then I also want to set
the hover effect. So colon hover like this.
156:49 - And I said to pacity to 0.8, there's an auto
formatting and save it back to the application.
157:00 - And as you can see, it's looking great. So
that's nice, it's working, it's starting to
157:06 - look like something, we can compare it to
this one here, and it looks exactly the same
157:11 - without the search bar. So we have a few things
left to do, we have to create the spinner
157:16 - also when we loading and the search bar and
the bottom for loading more. In the next video,
157:22 - we're actually going to create the spinner
component. So we have that ready when we want
157:26 - to show it when we're fetching more. Okay,
we have our hero image on our grid. So we're
157:33 - going to create the spinner in this video.
Back inside of the code editor and the components
157:40 - folder, and inside a components folder, create
a new folder that we call spinner. And then
157:47 - we create a file, let's call index dot j s
and another file. Let's call spinner dot styles,
157:58 - dot j s, it's been beginning to be a little
bit repetitive here. But as I said so many
158:02 - times before now is always great to repeat
stuff when you learn it. So even if it's boring,
158:08 - it's better to repeat it, because then it
will be in your muscle memory later. So that's
158:13 - why I repeat a lot of stuff also in this course.
And this one is a little bit special actually
158:19 - because we have the component itself in the
index.js file, but the component is really
158:24 - just going to be a styled component. So in
this index.js file, we're just going to import
158:29 - the start component in this file. So we can
create this actually in this video and then
158:34 - we import it and then it will be finished.
So in the spinner.styles.js file, we import
158:40 - styled from styled components. We export a
const that we named spinner, and it equals
158:49 - A styled dot div double backticks and inside
the backticks we write our CSS, we set the
158:56 - border to five pixels solid. And we have the
variable of light gray. We set the border
159:06 - dash top to five pixels solid with a variable
dash dash med gray. We set the border dash
159:18 - radius to 50% because this one is going to
be a circle so that's why the width is going
159:26 - to be 50 pixels and the height is also going
to be 50 pixels. We have an animation on this
159:32 - one also. We call it spin 0.8 seconds is going
to be a linear animation and is going to be
159:39 - infinite. That was at the Morgan 220 pixels.
All right, then we create an animation at
159:54 - keyframes. Spin we go from 0% Transform. we
rotated Cyril degree, here, I'm using PreSonus
160:08 - data. So you can use whatever you want. We
didn't do that in the thumb styles I'm using
160:13 - from two in that one instead. So I like to
change stuff a little bit when I create courses
160:19 - like this so that you see that you can create
it in many different ways. So here, I'm using
160:23 - percent instead. And it should say, transform,
not Transform, transform, and rotate zero
160:30 - degrees, and it will see my colon. And then
we go to 100%. And the transform is going
160:38 - to be rotate 360 degrees, some auto formatting,
and save it. Then we go back to the index.js
160:49 - file in the spinner folder. And for this one,
we just import the spinner that we created
160:55 - a style component. So from dot forward slash
spinner dot styles. And then we export it,
161:02 - export default spinner. So that's it for this
component, we can actually see if it works
161:07 - also. So go back to the home page home.js,
we import it first here. Imports spinner from
161:17 - dot forward slash spinner. Alright, and then
here just below the grid, we can place the
161:31 - spinner and also a soy, we don't actually
need the use state and use effect here more
161:35 - so we can delete those ones also save the
file, go back to the browser. And as you can
161:43 - see, just below here, it's spinning like crazy.
And of course, it's only going to be shown
161:48 - when we fetch data from the API. But for now,
we're showing it all the time, but we're going
161:52 - to fix that later. So that's how you create
a really simple spinner with some CSS and
161:58 - style components in react. In the next video,
we're going to start creating the search bar.
162:06 - So we created a grid with a thumbs and we
have our hero image and we want to create
162:10 - our search bar. Next, if we look at the search
bar in the finished application, we can see
162:15 - that we have this nice little icon here and
I created this myself, first I had an icon
162:20 - from Font Awesome. But then I thought maybe
we shouldn't import the whole Font Awesome
162:25 - library just to have one outcome. So that's
why I created an SVG image instead. And then
162:30 - it says search movie, and then we can type
in something to search for in here. So this
162:35 - is how it works. So let's go back to our code.
And inside a component folder, create a new
162:42 - folder, that's called search bar, capital
S, capital B. And inside of that folder, you
162:52 - probably guessed it, we create a file, let's
call it index dot j s, and a file that's called
162:57 - search bar dot styles. dot j s. And we do
as we always do, we're going to be in the
163:03 - search bar dot styles dot j s, and we're going
to scaffold out the style components import
163:08 - style, from style components, then we export
a const, called wrapper. And he's going to
163:19 - equal a style of theme. And we have double
backticks. And we export, not triple backticks
163:27 - double backticks and a semi colon, then we
export the course that called content. It's
163:33 - going to equal style dot div, double backticks
and a semi colon, save it go back to the index.js
163:43 - in the search bar folder, we import react
coma, we're also going to import a few other
163:49 - stuff here, we're going to need to use state
we're going to need to use effect. And we're
163:57 - also going to need to use ref this one. And
we import it from react. So why do I need
164:06 - these things? Well, the state we're going
to use to create what's called a control component.
164:11 - And that means that we're going to have our
input field but it's going to be controlled
164:14 - by react, the input field is going to be based
on the value in the state. We're going to
164:19 - use the use effect to trigger when this local
state changes. And then we're going to update
164:23 - the search term so that it will fetch new
movies from the API. And use ref is going
164:28 - to be used to show you a little trick that
we can use if we don't want to do something
164:32 - in the use effect on the initial render. So
then we're going to import the image that's
164:37 - going to be that little icon I showed you.
So import search icon, camel casing from dot
164:46 - dot forward slash dot forward slash again,
images and we have something that's called
164:53 - search dash icon dot SVG. Don't miss the file
extension there. Then we have the styles,
165:03 - the import, curly brackets, wrapper and content
from dot forward slash sport dot styles. All
165:16 - right, so that's our imports. And then we
create a component const search bar, capital
165:24 - S capital V equals, and we're going to destructure
out the prop that's going to be set search
165:29 - term camel cased by a narrow. Now for this
one, we're going to make an explicit return
165:36 - because we want to have some logic in it.
So we have a return statement, parenthesis.
165:42 - Now we have our wrapper. And inside a wrapper,
we're going to have our content like this.
165:54 - So the first thing we need is the icon and
it's going to be an image. So image SRC is
166:00 - going to be the search icon. We can set an
author on that one, also search dash icon
166:08 - with self, close it like this, just a regular
img tag, then we're going to have an input
166:16 - field. And it's going to be a type text. We're
going to have a placeholder. Let's go going
166:32 - to be searched movie. And then we're going
to have an on change handler and value. But
166:37 - for now, I'm just going to surf close this.
And to do some auto formatting and export
166:43 - this component, export default search bar.
And then we're going to import it in the home
166:49 - component just to see that we got something
here. So go back to the home, and close all
166:55 - this, go back to the home. And just below
the hero image, we're going to place that
167:02 - component But first, we need to import it.
So import search bar from dot forward slash
167:09 - search bar right down below the hero image
just above the grid, we can place a search
167:22 - bar, save it go back to the browser. And you
can see that we have our input field here.
167:29 - But we haven't started yet, of course. So
hopefully it's gonna look something like this,
167:34 - when we're finished, go back to the code and
the search bar in index.js file, we're going
167:40 - to make this what's called a controlled component,
a controlled component in react is a component
167:46 - that react control. So the input value is
going to be based on a state that we create.
167:52 - And when that state changes, it also changes
the value in the input box. And this is great
167:56 - because then we know that our state is in
sync with the actual value in the input field.
168:02 - We create a state of here const, we can call
it state and set state equals use state. And
168:12 - it's going to be an empty string for stores.
On our input field, it's all formatted them
168:23 - like this, I want to have them like this,
instead, we're gonna have an on change handler
168:29 - equals, and for this one, I want to create
an inline function, you could also create
168:34 - a function up here for that one if you want
to do that instead. But I want to show you
168:39 - how to do things differently. So in this case,
I created an inline function, we have the
168:43 - event, or you can just type in E, for example,
you can name it whatever you want, then we
168:49 - set the state with the event dot turn target
dot value, and this will give us the value
168:57 - in the input field. And we need to have this
inline function as we are actually invoking
169:03 - this function here with that value, otherwise,
it won't work. So by having this inline function,
169:07 - we can provide this one with value. So that's
why you have this inline function. Otherwise,
169:12 - it will run this function instantly. And that's
no good. So if we, for example, had a function
169:16 - that we didn't want to send in some arguments
to that we just want to trigger on change,
169:21 - we can have it like this instead. And that
will work but in this case, we want to send
169:25 - in the argument or the current value. So that's
why we have this inline function. Alright,
169:31 - so that's the unchanged and then we set the
value to the state. And there we have successfully
169:37 - created a control component. We can see if
it works, go back to the browser, type something
169:43 - in and you can see the value here now is controlled
by react. As soon as we set this value to
169:49 - some state value here, we are making this
a control component. And every time it changes,
169:54 - it's going to trigger reset state and it gets
the value here and replace the value from
169:58 - the text input. In the state, and then the
value is displayed in the textbox itself.
170:03 - So it's kind of a closed circle here on how
things work. It goes around in this way. Now
170:10 - we have our input field, but we want something
to happen. Also, we want to set the search
170:14 - term that we're going to create in our hook
that we created before. So we actually going
170:19 - to create a new state inside of use home fetch.
So up here in the US home fetch hook, we're
170:28 - going to create a cost, call it search term
capital T, and set search term, then it's
170:36 - going to equal use state. And we'll set it
as an empty string initially, then we also
170:43 - need to export this one. So export it down
here. And we only need a setter for this one.
170:50 - So we can export the set search term like
this, save the file, go back to the home.js.
170:59 - And up here, where we where we use or use
home fetch hooked, we can destructure out
171:05 - the set search search term, the set search
term arrived. And this one is going to be
171:12 - the prop for our search bar. So I'm going
to call this prop set search term also. You
171:18 - can call it whatever you want. And then I
give it to set search term. So this way, we
171:23 - pass this along down to our component to the
search bar, so that we can use it in the search
171:28 - bar. So when this one triggers when we set
the search term is going to trigger here.
171:33 - So actually changing the state in our hook
here. That's exactly what we want, because
171:38 - then we can use it in our hook when we fetch
stuff. But in this case, we want to have a
171:43 - slight delay when the user types something
in before it tries to fetch the data, we can
171:48 - look here in the finished application, you
can see when I type something in here, that
171:53 - I have a slight delay, otherwise, it wouldn't
be a good user experience if it just instantly
171:58 - started to fetch data. So that's why I do
it this way instead, otherwise, we could have
172:02 - used this state to actually fetch the data.
But in our case, we want a slight delay. And
172:07 - then we set the search term that we're going
to use for fetching. So that's why I have
172:11 - dual states for this one. So let's create
a use effect in the search bar use effect.
172:19 - We have an inline arrow function just as before.
And we have the dependency array. And we're
172:25 - going to fill it out in a second. I'm going
to show you how to create a timeout in react
172:31 - now and how we can use it in a use effect.
So first we create a timer. We use the set
172:37 - timeout that's built in JavaScript, we have
an inline function for that one. And then
172:46 - we're going to call the set search term. That's
the one that we created. And we're going to
172:50 - give it the state like this. And I'm going
to set it to half a second, that's 400 milliseconds.
172:58 - So this one will trigger after 500 milliseconds.
If you want some other value, you can of course
173:04 - type that in instead. And you can see here
now that it instantly complains, because we
173:08 - haven't specified this as a dependency. So
we specify and set search term as a dependency.
173:17 - And it also complains, because it needs the
state, that's also dependency to this use
173:20 - effect. So this linting rules are actually
really good. It tells us stuff so that it
173:25 - is so that we actually do this correctly.
And we should always specify the dependencies
173:29 - and handle it inside of the use effect if
we need to. Alright, but there's one more
173:33 - important thing we have to do with the timer.
And that is declared a timer on each render,
173:39 - because otherwise, it will just create a lot
of timers. And that's no good. And there's
173:42 - a handy little thing with the use effect that
we can use for this. Because if we return
173:47 - a function in the use effect, so every time
before a new render, it will trigger this
173:52 - function. So we can clear our timeout inside
of that function. And this will take care
173:58 - of that we clean up this timer. So we don't
have a lot of timers that just ticks in the
174:03 - background. And you can imagine you have a
lot of stuff that you want to do maybe to
174:07 - clean up stuff. So you can always do that
in a return function with the use effect.
174:11 - This one doesn't trigger until this render
has finished and is going to render again.
174:16 - So that is sweet. We can say this one. And
we can actually go back to the use on fetch.
174:23 - And up here. We can console log the search
term, so we can see that something is happening.
174:31 - So go back to the application again. Yeah,
I have a typo somewhere. Maybe I didn't save
174:39 - the home. Save go back to the browser. Yeah,
no, it's worse. You can see it's really important
174:44 - to save your files because it will break otherwise,
be sure to save all the files. So if I type
174:51 - in test, and you can see here after 500 millisecond
it will trigger. So that's sweet. We know
174:58 - that that is working and we Use this to fetch
data from the API. But there are one more
175:05 - thing I want to do. And I promised you to
show you a little trick with the use ref.
175:09 - And that is because the use effect always
trigger on the initial render, and we don't
175:13 - want to trigger a fetch. When this component
mounts, we only want it to trigger when the
175:18 - user has typed something in. So that's why
I'm going to create a cost that's called initial
175:26 - up here. And I'm going to use ref. And I set
it to true. So when we call the use ref hook,
175:35 - this one will create a mutable value for us
that you can compare to something similar
175:40 - as a mutable variable. So we have this initial
const, and the actual value is going to be
175:47 - in the initial dot current, that property
will hold the value true right now. So I set
175:55 - is the true and inside the use effect, I'm
going to check if initial dot current, that's
176:01 - going to be the true value right now, if it
is true, in it, it should say initial, like
176:07 - this, right? Then I instantly going to set
the initial dot current to false. And you
176:14 - can see here, I can mutate this variable directly,
I don't have to have a setter for this one,
176:20 - because this one won't trigger a rerender.
That's the biggest difference from a state
176:25 - that when you use ref, it won't trigger a
rerender. And then if this one is true, we
176:31 - know that this is the initial render, and
then I'll just return, we don't do anything
176:35 - more inside of the use effect. And we set
it to false. So next time, this one triggers,
176:39 - this one is going to be false. And it's going
to run our logic. So this is how you can create
176:44 - a neat little code snippet here, to skip the
initial render in the use effect, save the
176:50 - file, just make sure that it works. Yeah,
and it seems to be working. We've learned
176:59 - how to create a control component in react,
and the component controls the input field
177:05 - with the state. So the input field always
has the same value as the state and that's
177:09 - the control component or state is synced with
the input field. And then we created a timer
177:15 - that will trigger each half a second and call
this set search term to set the stay there.
177:21 - And the state is going to be the value from
the input field. And we also pass this one
177:26 - along from the US home fetch. So that's how
you pass data down to your components. That's
177:31 - what props are for, you can pass data down
to your component, and we can use it in that
177:36 - component. And that means that we also have
this value in our use home fetch hook to use
177:41 - the fetch data later, that can remove this
console log for now, save the file, and this
177:46 - will be it actually for the search bar. In
the next video, we're going to style the search
177:51 - bar. And then we're going to create the logic
for fetching the data. were created our search
177:58 - input field, but it doesn't look good. So
we have to style it also. And that's what
178:02 - we're going to do now. So in our search bar
dot styles file, we're going to create the
178:07 - wrapper first. And I'm going to display it
as a flex. I'm going to align items center.
178:17 - Now not aligned a line I set the height 200
pixels. The background is going to be from
178:30 - the variables, we have the dark gray. And
I'm going to give it some padding on the sides,
178:39 - zero and 20 pixels, do some more formatting,
save it go back to the browser. And you can
178:44 - see that we have the search bar here. And
now we have to style kind of the inner part
178:48 - of the search bar. And we do that in the content.
Inside the content, I'm going to set the position
178:58 - to relative because we want to place the icon
with an absolute position. The max width is
179:06 - going to be from the variables we have our
max width, the width is going to be 100%.
179:15 - The height is going to be 55 pixels, the background
is going to be from the variables met gray.
179:25 - And Morgan is going to be zero in order. And
the border dash radius is going to be four
179:34 - pixels and the color from the variables we
have our white. Save it go back and see what
179:43 - we've got so far. So we have this inner part
now of the of the search bar to add the style
179:49 - icon and the search bar input field itself.
So inside the content, we're going to nest
179:55 - some stuff here we have our icon that's the
IMG I set the position to absolute. And this
180:05 - is why I use relative appear, otherwise it
won't work. So it needs to be relative to
180:09 - the actual content div is going to be left
15 pixels. So 14 pixels, and will is going
180:18 - to be 30 pixels, save it go back. And now
it seems to align correctly and it also has
180:25 - the correct size. Great. Then we have the
input field itself. So down below the IMG
180:33 - type in input, we set the font size to 20
pixels in this one position is going to be
180:44 - absolute left is zero, margin is eight pixels.
And zero padding is going to be 000 and 60
180:56 - pixels. border is zero, the width is going
to be 95%. The background is going to be transparent.
181:10 - The height is going to be 40 pixels. And the
color is from the variables and is going to
181:17 - be white. So go back to the browser. And you
can see that it works now but we have this
181:25 - nasty little outline, you shouldn't remove
the outlines, actually, but in this case,
181:31 - I think it's fair to do it because it doesn't
look good. So I'm going to remove them. So
181:39 - inside the input, I'm going to nest focus.
And I'm going to remove the outline, I set
181:46 - it to none. And hopefully that will remove
it. Yeah, you can see it removed. Now. One
181:54 - thing you can do also, if you want is to style
this for mobile devices, maybe make it a little
181:59 - bit less insight in font size, and stuff like
that, if you want to really fine tune it here,
182:06 - but it seems to be working now. All right,
and that's it for the search bar. That's the
182:11 - style for the search bar. In the next video,
we're actually going to hook this up to the
182:14 - API and fetch some data. We've created our
search functionality on our search bar, but
182:22 - we can't really search for anything. Yep.
So if we type something in, we just get this
182:27 - console log here. So we're going to implement
the actual functionality where we fetch the
182:32 - search data from the API. Let's go back inside
of the code editor. And we're going to be
182:37 - in the use home fetch hooked. And down here,
where we say initial render, we're going to
182:42 - change this one to initial and search like
this, because we're going to use this use
182:48 - effect both for the initial render and the
search. And it's actually pretty easy, because
182:53 - now we just have this empty dependency array,
meaning that we only trigger this use effect
182:57 - once on Mount. But we also want to trigger
this one each time to use the search for something.
183:03 - And up here we have our search term. And in
this one, we're going to store what the user
183:08 - typed in in the search bar. And that means
that we want to trigger the use effect when
183:12 - the search term changes down here in the dependency
array, we specify a search term, meaning that
183:19 - this use effect will trigger each time the
search term changes, and it will also trigger
183:24 - one time on Mount. So we can actually use
this one for the initial setting also. Because
183:31 - when we search for something, we always want
to fetch the first page just as we do on the
183:36 - initial amount. So that's fine, we're fetching
the page one. But we also want to provide
183:41 - the search term. And that's also fine for
the initial fetching, because the search term
183:46 - is going to be an empty string. So we know
that we're fetching the most popular movies,
183:50 - because we're not specifying any search term.
There's one more thing though, that we have
183:54 - to do, and that is to wipe out the old state
before we make a new search, because we want
183:59 - to wipe it out and then make a search, show
the loading spinner and then show the new
184:03 - movies that we grabbed from the search. So
we can set state to the initial state here,
184:11 - and that will wipe out the state. And that's
really all there is to it. So we say this
184:17 - file, go back to our application, we try to
search for something. And you can see that
184:23 - it works. Now this one changes because this
one will always grab the first element in
184:28 - the array of movies. And that's fine. Actually,
you can have it like this if you want, but
184:32 - I want to remove this hero image when we're
in a search. We can do that also to go back
184:38 - to our code. And then inside of the home.js.
Down below here where we show the hero image.
184:46 - We can also specify that we don't want to
show this one if we have a search term, so
184:50 - not search term, double ampersand so now we're
checking that we don't have a search term
184:57 - and also that we actually have a first element
in the array. or movies. But you can see that
185:02 - you won't see her now. And that's because
we haven't exported this one from our hooked.
185:06 - So go back to the hooked. And down below here,
we can export this one also search term like
185:14 - this, save the hook, go back to the home notice,
and up here where we destructure out everything
185:20 - from the hood, we can also destructure out
the search term like this, save the file,
185:26 - go back to our application, we tried to search
again. And now you can see that it disappears.
185:33 - This is exactly what I want. If you want to
keep the hero image, you don't have to do
185:37 - this. And then it reappears when we don't
have anything in the search bar. All right,
185:43 - there's one small thing that I also want to
do, and that is in the home.js. And if we
185:48 - look down below here, where we have the grid,
I'm going to create a ternary operator now
185:52 - because now it says popular movies, even when
we're in a search. So this one, I'm going
185:58 - to create a curly bracket and also curly bracket
here at the end, and then I check if I have
186:05 - a search term, I have a question mark. And
if we have a search term, I create a string
186:12 - I wanted to say, search result. And if we're
not in a search, it's gonna say popular movies.
186:20 - So if we have a search term, it's gonna return
what's the right to the question mark, and
186:25 - that search result. Otherwise, it's going
to return popular movies, save the file, go
186:30 - back to the application. This time, I'm going
to search for Indiana Jones. And now you can
186:36 - see that the header on the grid changes. So
that's great. It says search results. And
186:41 - I remove this and it says popular movies.
So that's our search, we have implemented
186:46 - all the logic for the search bar. And in the
next video, we're going to start trading the
186:50 - Load More button. Okay, let's start creating
a button that will go at the bottom here.
186:58 - And the spinner will not show all the time,
it will only show when we loading stuff back
187:02 - in the code. And inside the components create
a new folder that's called baronne capital
187:08 - V. And you guessed it, we create a new file,
let's call index dot j s. And we create another
187:15 - file that's called Baran dot styles dot j
s. And we're going to be in that file and
187:20 - import styled bomb style components. And for
this one, we only going to have one style
187:28 - component. So we export const. And it's going
to be a wrapper equals a style dot button
187:33 - in this case, and double backticks Auto format
it and save it and then we go back to the
187:39 - index.js file. And we're going to create a
bottom. So we import react from react. Then
187:47 - we have our styles, we import the wrapper
that we created wrapper from dot forward slash
187:54 - buttons and dot styles. Right, now we have
our component const bottom. Then I just structure
188:03 - two props. One is called text and one is called
callback. And I create an error and I make
188:09 - an implicit return on this one. I'm going
to add the rapper is going to be type button.
188:18 - And it's going to have an onClick handler.
And it's going to be the callback that was
188:21 - sent in as a prop. And then I'm going to display
the text inside of the bottom. So this is
188:27 - a button that we created as a start component
and call it wrapper. And it's going to trigger
188:32 - a callback function when the user clicks on
the button, and then we show the text we can
188:37 - send in what text we want to this button.
If we want to reuse it, then we export default,
188:43 - bottom, save it, then we go back inside of
the home component. And at the top, we're
188:50 - going to import bottom from dot forward slash
bottom. And then at the end over JSX, we're
189:00 - going to show the bottom. And we have to think
about this because we don't want to show the
189:04 - bottom if we read the last page of movies.
So we have to take that one into consideration.
189:11 - So just below the spinner here, I'm going
to use the curly bracket and create a JavaScript
189:16 - expression, we're going to check from the
State DOT page. If that one is less than State
189:22 - DOT total underscore pages, we know that we're
still not on the last page. And I have a double
189:28 - ampersand make a short circuit here. I also
want to check so that we're not loading anything.
189:34 - So if not loading, and then I have another
pair of ampersands. And I have a parenthesis,
189:41 - put it on a new road just to make it a little
bit more readable. And then I'm going to show
189:46 - my bottom. So the text is going to be load
more. And for now I'm not giving it the callback.
189:54 - This is it for now. So this statement will
check if the page we're currently on is less
189:59 - than the total pages. And then we know that
we still want to show the Load More button.
190:04 - And it will also check that we're not loading
anything because when we loading something,
190:08 - we want to show the spinner instead. And we
have the spinner here. So we can actually
190:12 - create another statement here, the creator
curly bracket, and type in loading and double
190:18 - ampersand, and we end it with another curly
bracket like this. So this will show the spinner
190:24 - if the loading is set to true. And if it's
set to false, it will not display the spinner,
190:30 - but then it will display the button instead.
If we go back to the application, we can see
190:34 - the button down below here in the corner.
But it doesn't look right, we have decided
190:38 - also to look like this here. And that's what
we're going to do in the next video. We have
190:45 - our ugly little button here down at the corner,
so it's time to style it, go back to the code,
190:50 - and inside of button dot styles dot j s file
and we have the wrapper here, we're going
190:55 - to give it some nice little style here, we
start by displaying it as blocked display
191:00 - block, we set the background. For more variables,
we have the dark gray, we set the width to
191:12 - 25%. The min width is going to be 200 pixels,
the height is going to be 60 pixels. The border
191:23 - dash radius is going to be 30 pixels. And
the color is from the variables dash dash
191:31 - white, the border is going to reset to zero,
the font size is going to be from the variables
191:39 - font big Morgan is going to be 20 pixels and
auto transition is going to be all 0.3 seconds.
191:52 - I'm lazy here I can set it just the property
data wants to have a transition, but I said
191:57 - it all outline is going to be none. And the
cursor is going to be pointer, then I want
192:10 - a little hover effect all sorts of over a
set of pacity to 0.8. That's why I had this
192:17 - transition here. Also, I just want to check
also, the font sizes here. Font big. Maybe
192:27 - we can use this one instead on the styles
for the search bar because I think I have.
192:34 - Yeah, I have the font size, or 20 pixels,
we can use the variable instead variable on
192:45 - big and see how it looks. Yeah, I think that
looks nice. Actually, we can use that one
192:53 - instead. But let's check out the button. Yeah,
you can see that it works. It looks great.
192:58 - Now, we only have to create a logic footer
button now when so that we actually can load
193:03 - more movies. So that's what we're going to
do in the next video. This is actually the
193:09 - last video for the homepage. So we're going
to create the fetching logic for loading more
193:14 - movies. And we're going to start in the US
home fetch hook that we have in our hooks
193:18 - folder. And we're going to start by creating
a new state. So this is going to work in a
193:23 - way that we have a state with a kind of a
flag that was set to true or false. And we
193:27 - set that one to true when we click on a button.
And then we're going to trigger reuse effect.
193:32 - Because as I said before, I think this is
great practice with the use effect hook and
193:37 - also the state hooks. So you could do this
in other ways also. But this is a quite neat
193:42 - way of doing it we have this state that was
set to true or false. And when it changes,
193:48 - we trigger that use effect. And then we can
trigger to load more movies, we first create
193:52 - the state const is loading more camel casing
as always. And then we have the setters set
194:00 - is loading more, it's going to equal and we
call the use state hook we set it to false
194:06 - initially. And this one is going to be triggered
from the button itself. So we have to export
194:13 - it down here also. So after the set search
term, we can export set is loading more. So
194:23 - there you have it, I removed the sidebar,
so we can see the complete row here. Now we're
194:27 - exporting six of those. So that's our state.
So we can go back to the home.js file. And
194:32 - here we have our button but we first need
to destructure out the set is loading more
194:38 - set is loading more. There's some auto formatting,
and it will clean it up for us a little bit.
194:45 - So we just structure that one also. And that
means that we can use it in this component.
194:51 - And one thing that we also didn't do is to
actually check if we have an error so we can
194:55 - do that before the return statement here.
If error We can return a div that says something
195:05 - went wrong. Like that. And that will make
sure that if we get too narrow, we won't display
195:13 - everything here, we will display this error
message instead of. So you can create a more
195:17 - sophisticated stuff here, if you want to do
that. In our case, I think it's enough for
195:23 - this course. Alright, so let's move on to
this set is loading more. So we have our button
195:28 - down below here. And we already created a
callback prop. So we give it the callback
195:33 - prop curly brackets, and this one is going
to have an inline arrow function. Because
195:39 - I want to call this one with an argument set
is loading more. Yeah, I'm going to remove
195:47 - the sidebar set is loading more, and we're
going to set it to true like this. So this
195:52 - will change this state when we click the bottom.
And if we check out the application, we won't
195:58 - actually be able to see anything. Now, you
can see that it renders when we click the
196:02 - bottom because it costs logs this out, so
we know that it's working. And one great thing
196:07 - to know that is that if I click a few more
times here, you can see that it don't rerender
196:11 - anymore. And that is because we're giving
it the same value. So react won't update the
196:16 - state if it gets the same value. So it's good
to know that with react, if you give it the
196:20 - same state value, it won't rerender it. So
react is kind of smart, it already knows that
196:25 - it has the same value. So it won't do anything,
a quick little pro tip in react. Alright,
196:33 - so we know that the button is working. So
we move back to the use home fetch hook. And
196:37 - we're going to create another use effect down
here. below the search use effect, I'm going
196:44 - to mark it with load more. So just as before
I create another use effect, an inline arrow
196:50 - function, and we have the dependency array.
And we want this to trigger when the is load
196:58 - more is changing. So it's load loading more
like this. And the thing is that we only want
197:06 - this use effect to trigger when we actually
is loading more. So if not, is loading more
197:13 - if this one is false, we're just going to
return we don't want to do anything else in
197:18 - this use effect. This one should only do something
when we load more movies. And what we want
197:23 - to do now is to call or fetch movies function
again. In this time, we want to give it a
197:30 - State DOT page, plus one because we want to
load the next page. And we also give it a
197:35 - search term if we're in a search. And now
you can see that it was associated because
197:41 - it wants a few other dependencies, it tells
us that we need to specify the search term
197:45 - and the State DOT page. That's what we're
going to do the search term and the State
197:52 - DOT page. And now it will be happy at us.
And that is because these ones are outside
197:58 - of the use effect. So we should always specify
dependencies in the dependency array. And
198:04 - we should handle them inside of the use effect
hook. If there's something we don't want to
198:08 - do when something change, we should account
for that inside of this use effect. So we
198:13 - fetching movies, and then we set is loading
more to false. Do some more formatting and
198:24 - save it. And hopefully this should work. So
we have the use effect of triggers. When we
198:29 - change the is loading more Boolean. If we're
not loading more, we will just return we don't
198:34 - do anything else in this effect. Otherwise,
we call the fetch movies function. And we
198:39 - give it the next page that we want to fetch.
And we also give it a search term. And then
198:44 - we set it slowly more to force again so that
we go back to what it was before. And then
198:49 - we can do it all over again, if we want to
click the Load More button again, save it
198:54 - and go back to the browser and see if this
works. We click the load more. And as you
199:01 - can see, it works. And I love when stuff just
works. And you can see that our loading spinner
199:06 - is showing showing up also. It's fast, so
we can't hardly see it, but it's there. So
199:16 - it's working. And we can also see in the console,
here we are at page 11. And we have 220 results
199:21 - now. So that's great. We know that load more
is working. We can also try it out so that
199:26 - it works when we search for something. And
it does. So that's sweet. I'm happy with this.
199:35 - Hope you like it too. You can see also those
those images, some of them has some strange
199:40 - proportions. So if you want you can tweak
the CSS to take that into account also. In
199:47 - the next video, we're going to start creating
our routes for application. We're going to
199:53 - start creating the routing for our application.
And before we do that, I just want to talk
199:57 - shortly about react router. Especially the
version six that we're using. It's not officially
200:03 - released when I record this tutorial. So hopefully
it released now, when you watch this tutorial,
200:09 - because it is, as they say, here, it's around
the corner. And I actually talked to this
200:14 - guy, Michael Jackson here on Twitter. And
he said that I should use this version in
200:18 - my course, because it's that stable now, and
it's not going to change that much. And we're
200:22 - not going to use all the advanced functionality
in the router itself. So that's why we installed
200:28 - the next version of react router when we install
the dependencies for this application. And
200:33 - there are a few changes in it if you compare
it to version five. And I actually don't want
200:38 - to talk about version five, because that will
soon be deprecated. So just wanted to mention
200:43 - why I chose to use the version six of the
React router, because this is the future version.
200:49 - And it has the API that is going to be used
for a long time, hopefully, in the future.
200:54 - So that's why I use it. In this tutorial,
I want to make sure that this tutorial uses
200:58 - the latest stuff, so that you know that you're
up to date on the things that you learn. So
201:04 - that's why so just a few words, words here
you can compare, for example, they brag here
201:10 - with a react router, version five, that the
bundle size is 20.4 kilobytes minified. And
201:17 - the version six is only going to be 8.5 kilobytes
minified. So if you care a lot about size
201:23 - on your packages, this one is drastically
smaller than the version five. And then they
201:29 - also show you some stuff here on how you use
the router. But that's what I'm going to show
201:33 - you in the next video. But if you want to
read more about this one here, you can go
201:37 - to react training.com forward slash blog forward
slash react dash router dash version six dash
201:44 - pri, forward slash. And then you can read
more about it or just google react router
201:49 - version six, and you will probably find a
lot of information about it if you want to
201:54 - read more about it. So let's get started.
We're going to create the routing in the next
201:58 - video. We're finished the home page and we
have our application here. And we have this
202:05 - nice little grid with all the movies, but
we can't actually click on them to view a
202:09 - movie. And we can't click on the logo up here.
So we have to fix that. And we're going to
202:14 - do that by creating some routes for our application.
So the first thing we're going to do is if
202:19 - we go back to the code, we're going to create
two more components inside a components folder,
202:25 - we're going to create a new file that called
not found dot j s, and also not a file that's
202:31 - called movie dot j s, capital M on movie and
capital and capital F are not found. So we're
202:39 - just going to scaffold This one's out. So
we have something to route to. If we're in
202:43 - the movie.js file, we import react from react,
then I create a component are called movie
202:53 - that is going to be an arrow function. And
I'm just going to return a div that says movie.
203:00 - And now export default movie, do some more
formatting and save it always save your files.
203:09 - Alright, then I copy this one. And I go inside
of the notfound file that we just created.
203:16 - I paste it in and I change this one, I'm going
to share them in one go not found like this
203:24 - and save it. And there you have it we have
two components to play with. And this one,
203:28 - the movie dot j s is going to be the individual
movie component for showing the movie. So
203:32 - we're going to be working a lot in this component
later. This one is going to be a series I'm
203:37 - not going to create a fancy and not found
component. So you can do some stuff on your
203:41 - own in this one if you want to do that. So
we scaffold out two components. And then we
203:46 - can move inside the app.js file that you find
in the src folder not in the components folder.
203:52 - So app.js. And the first thing we have to
do is to actually import all the components
203:58 - we need from the router library from react
router. We can mark it here with routing.
204:04 - If we want to do that. Then we import we have
curly brackets, we're going to import something
204:10 - that's called browser router, capital D capital
R. And this name is a little bit long. So
204:17 - if you want to rename this module, you can
do that by typing s and router. So we import
204:23 - it as router. I think I'm going to remove
this sidebar also. Alright, so that's the
204:30 - first one we import browser router, but we
import it as router so we can use it with
204:35 - the name router instead. Then we import another
component that's called routes. And then we
204:41 - import another component that's called route
very similar names here. So be careful when
204:47 - you import these ones. And we import them
from something that's called react dash router.
204:54 - So be very careful here. We're not importing
it from just react dash router. We Pulling
205:00 - it from react router DOM. So this one is using
react router in the background. But this one
205:07 - is specifically created for using in the dome.
Alright, so that's all the inputs that we're
205:12 - going to do. So let's create our components
down below here. And I'm actually going to
205:18 - change this one to an implicit return. So
I delete the return and the curly bracket.
205:26 - And I want to create an arrow function instead
const f equals because it's only with arrow
205:33 - functions, you can do an implicit return and
I remove the curly bracket there, do some
205:38 - auto formatting, to me, it looks a little
bit cleaner. And this div is going to be replaced
205:43 - this wrapper div that has a class name of
app going to be replaced with a router to
205:49 - so we wrap our complete application with the
router. So it's really important where you
205:54 - want to put the routes, you should wrap it
with the router. And that is the browser router
205:59 - that we imported here, but we renamed it to
router. So that's why I use it as router here.
206:06 - Then the header is going to be shown on both
the home page and the individual movie page.
206:11 - So the header is going to be left out of the
routes. So I'll leave that one here. And then
206:16 - I use the route component. And inside of the
routes component, we can create our routes.
206:22 - And the first route, we're going to use the
component that's called route. So we have
206:27 - three different components here from the router
library router, we're going to wrap our complete
206:32 - application in this case, and then we have
routes, that's going to wrap a route because
206:37 - you can route in different components if you
want to do that. So let's say that you have
206:41 - a component deep down in your app tree, and
then you want to create some routes for just
206:46 - that component, you can wrap them in this
route component, and then you create the routes.
206:51 - So you don't need to have them here in the
top of your application. And then you use
206:56 - the route component to actually create your
route. And this route component has a prop
207:01 - that's called path. So we can specify the
path where we want to show a specific component.
207:06 - And in this case, it's a forward slash because
it's the homepage. And then we have another
207:10 - prop that's called element is going to equal
and here we can give it a component. And we
207:15 - want to give it the home component like this.
And then we also have to self close the route
207:21 - component. That means that we can remove this
home component here. So that's the first wrote,
207:29 - if we want, we can save this to see that it
still works, go back to the application, reload
207:35 - it, and you can see that it works. So that's
nice, then we're going to create another route.
207:41 - So we use the route component again, we set
the path, and this one is going to be forward
207:47 - slash. And then we're going to do something
special here because when we're going to fetch
207:51 - an individual movie, we need the movie ID
and we can send a long route params for that.
207:56 - And we create a route params for the route
by specifying a colon, and then we name it.
208:02 - So movie ID. So this means when we create
a link on the thumbnails that we're going
208:07 - to do soon, we can send along the ID for the
movie. And that ID, we can grab that in our
208:12 - movie component and grab data from the API.
And you can name this to whatever you want.
208:18 - Because this is a rod puram that you decide
what you want it to be named. So I want it
208:22 - to be named movie ID. And then we specify
the element on this one. And we give it the
208:29 - movie component. And we also close the route
component. We haven't actually import the
208:35 - movie components, we can do that. Import movie
from dot forward slash, components. Movie.
208:46 - And then we can also import not found from
dot forward slash components and not found.
208:55 - There you have it. So that's the route for
the individual movie, we save it. And we can't
209:01 - actually click on the thumbnail now because
we haven't created that one. But what we can
209:05 - do is go up here, create a forward slash,
and then we type in some ID. And you can see
209:11 - that it types out movie here now. And that
is because it's showing the movie component
209:15 - so we know that it's working. That's sweet.
And then if we remove this one, we'll show
209:22 - the homepage instead. Alright, we're going
to create one last route. And that is for
209:29 - our not found component. So we create a route
with a path of forward slash and an asterisk.
209:35 - And this will make sure that we show the not
found component on any other route that don't
209:40 - exist. And we set the element to the not found
component. And we also surf close this route,
209:50 - save it go back to the application. We know
that it works if we specify an id like this,
209:57 - it shows the movie component But what happens
if we create Another route here like this,
210:02 - yeah, then I chose to not found. And that's
super sweet because then we have a fallback
210:06 - component if the user tries to go somewhere
else in our application. So that's the route
210:14 - set up in our app.js file. Then if we move
inside of our header component, and the index.js
210:21 - file, we're going to create a link on the
logo. Up here, we have to import curly brackets,
210:27 - and the component is called link from react
dash router dash DOM. And this is actually
210:35 - quite simple. It works the similar way as
the a tag does in HTML. So we have a link
210:42 - component we specified to and in this case,
it's going to lead to the home page, so we
210:48 - have a forward slash. And inside the link
component, we just put our logo like this.
210:54 - So we wrap it inside of the link component.
And this will make sure that we can link to
210:58 - the homepage, so go back to the browser. For
now, we specify an ID. So we're in the movie
211:05 - component, and then we click on this logo.
And we go back to the home page. So really
211:11 - easy to make links with react router. You
can also make them programmatically. But we're
211:16 - not going to do that in this course, because
it's kind of a little bit more advanced. And
211:21 - we don't really need it in this application.
But we have to add a link to the thumbnail
211:25 - also. So that we know that we can click on
a thumbnail, and that will lead to a specific
211:30 - movie. So inside the thumb component, the
index.js file will do the same thing up here
211:37 - we import curly brackets link from react dash
router dash dome. And we have this prop here
211:47 - that's called clickable because we are going
to use this thumbnail for the movie poster
211:51 - on each individual page also. And that means
that we won't be able to click that one. So
211:56 - we have to have this Boolean to check if we
should be able to click the thumbnail or not.
212:01 - And the way I solve this is to create a ternary
operators. So here just below the div we check
212:09 - if clickable is true. It's enough to type
in clickable, then we have the question mark.
212:15 - And I have parenthesis. And I'm going to use
my link component and it's going to link to
212:23 - and in this case, we want to use the movie
ID because as I talked about before, we are
212:28 - going to send along this ID in the route.
And we can grab it later in the movie ID params
212:33 - that we create here. So we have backticks.
I create a template literal here. So I have
212:44 - forward slash, then I have dollar sign curly
brackets, and I'm going to give it the movie
212:49 - ID and this will give it a link with a forward
slash and the movie ID close the link component.
212:55 - And then we have our image. And in this case,
I'm going to copy this one and paste it in.
213:01 - So this is if the thumbnail should be clickable,
then in the ternary operator Be very careful
213:07 - here it should be after this parenthesis,
I create a colon and then I create a new pair
213:13 - of parenthesis. And I move this image inside
of that one. And I also have to end the ternary
213:19 - operator with a curly bracket. And then I
do some auto formatting. So what did I do
213:25 - here? Well, I create a ternary operator checking
if the clickable is true or not, I show the
213:31 - link component with the image wrapped inside
it. And that means that we'll be able to click
213:36 - on this thumbnail. Otherwise, that's what's
right to the colon here, I just show the image
213:41 - as it is or don't wrap it in a link component.
So the user won't be able to click it. Save
213:47 - the file, go back to the application. And
hopefully we should be able to click our thumbnails,
213:52 - you can see that we have this nice little
hand here. That means that we've created a
213:55 - link. So if we click this one, you can also
see that we have the movie ID up here. And
214:00 - that's the one that we're going to grab in
the puram in our movie component. So it's
214:05 - working great. And this is actually it for
the routing, there's no more routing we need
214:10 - to do in this application. And in the next
video, we're going to start creating the movie
214:14 - page. Okay, we're just going to do a little
bit of scaffolding in our movie component
214:21 - before we move on. So up here we're already
importing react, we're going to import some
214:27 - stuff from the config also. So import, we're
going to need the image, underscore base,
214:33 - underscore URL capital letters and the poster
underscore size. And we're going to import
214:40 - it from dot dot forward slash config. Then
we're going to have our components we're going
214:45 - to create new ones for this one. But two of
them we already created. We're going to import
214:51 - the grid from dot forward slash win. Then
we're also going to need a spinner so import
214:59 - spinner Apart from dot forward slash spinner,
and then we're going to create the other ones
215:06 - later, we're going to create a hook for this
one. And we also need an image. And that's
215:11 - the fallback image just as before. So import,
no image, from dot dot forward slash images,
215:21 - and no underscore image dot jpg. And as always
be very careful to actually add the extension
215:31 - here, when it's an image. All right, and then
we have our movie component, this one is actually
215:37 - not going to have an implicit return, we create
curly brackets, because we're going to have
215:43 - some logic in this one. So we create a return
statement, parenthesis. And then we're going
215:53 - to create a react fragment, like this. And
inside for now, we can just have a div that
216:01 - says, movie, do some auto formatting, and
save it. And I think this should be it, go
216:08 - back to the browser. Try something else here.
Or we could actually just have clicked on
216:15 - one of these. Yeah, and it shows movies. That's
great. We know that it works. And then we
216:21 - can move on. And we're going to start by fetching
the data from the API so that we have something
216:25 - to work with. All right, we're going to create
our second custom hook. Now, I'm not going
216:32 - to create it first in the movie component,
and then move it to a custom hook. Because
216:36 - now we know how we can create a custom hook.
So that's why I'm doing it instantly in that
216:42 - one instead. So in the hooks folder, let's
create a new file that's called use movie,
216:48 - fetch capital M, capital F, and dot j s. And
as I told you before, it's important to name
216:56 - your hooks with use before the name. This
is the actual finance. So it doesn't matter
217:01 - here. But it's important that you name your
actual hook with use before. So for this hook,
217:07 - we're going to import curly brackets, we're
going to need use state and use effect from
217:15 - react. Just as before, we don't really need
a main react library for this one, because
217:21 - we're not doing any JSX and stuff like that.
So that's why we're not importing it, we're
217:26 - going to import the API object from dot dot
forward slash API. And that will give us access
217:33 - to all these nice functions that are created
for us. Then we create the actual hooked,
217:40 - so export const, use movie fetch, equals and
this one is actually going to have a parameter,
217:48 - because it's going to be the movie ID. And
I'll talk more about that in a second. So
217:54 - that's the arrow function. And up here, I
create three states, the state and setter
218:00 - for that state. I call the use state hooked.
And I'm going to give it an empty object as
218:09 - default value. Now I create a loading state
and set loading. You state I'm going to set
218:19 - this one to true initially, because this component
is going to start by fetching the data for
218:24 - a movie, so we can set that one to true. And
then we're going to have the error and a set
218:29 - error just as before, and this one was set
to false. So you state and give it an initial
218:35 - value of false, right. So that's the state
we're going to need for this one. And then
218:41 - we're just going to need one use effect. For
this one, because we only fetching data one
218:47 - time, and that is when the component mounts,
and then we're not going to fetch anything
218:51 - more, because then we have all the data from
the movie that we need to have the inline
218:56 - arrow function. And we have the dependency
rate. And this one is going to change if the
219:02 - movie ID changes, it actually not going to
change now, because we just do it initially,
219:08 - as I told you, but as I also told you, we
need to specify all the dependencies for our
219:13 - use effect. So that's fine, in this case,
to have it there, it only going to fetch it
219:19 - one time. And then as a use effect can't have
an async function here, we create another
219:24 - function that async fetch data equals async.
And in this case, I placed it inside of the
219:32 - use effect, and I'm going to show you why
in a second also. So we have an async arrow
219:37 - function. And then we can do our fetching
logic inside of this one, and it's going to
219:41 - be quite similar to the other one that we
did. So we have a try block. And we're going
219:46 - to catch the error if there is one. And if
there is an error with set error to true like
219:55 - this. Then in our try block, the first thing
we do is this That loading to true. And we
220:02 - also set error to false. Yes, that's we did
before. And then we can fetch our data. But
220:11 - I have a typo here. It just say, error. Yeah,
I guess I misspelled it up here. Yeah. There
220:20 - you have it, right. Yeah, this one too. Ah,
something like that. Right. So first, we're
220:34 - going to grab the movie data from one resource
from them point. And then we also have to
220:39 - grab the credits that we get from another
resource from them point. So we have const,
220:45 - movie equals a weight. And from the API, I
created a function that called fetch movie
220:52 - without an S at the end. There we go, going
to give it the movie ID. Right. So that's
220:59 - the movie, then we also want to fetch the
credits. So we create a cost to that when
221:05 - that we named credits, we await again from
the API dot fetch credits. And we also give
221:12 - it a movie ID. So hopefully, we got all the
data that we need here in those costs. But
221:20 - we want to do some stuff here. And that is,
we only want to show the director solely because
221:24 - if we look at the finished application, and
we go back, and we click Whoa, yeah, there
221:31 - you have it encountered two children with
the same Keith. And this is what happens sometimes
221:36 - with this API. And I really don't know why.
So if you get this warning, you can create
221:41 - your own unique key somehow, by maybe have
a random number and the movie ID, I don't
221:46 - know, you can do it in many different ways.
But for now, it doesn't really matter. So
221:51 - we have the movie here. And as you can see,
here, we are showing the directors, we need
221:55 - to get the directors somehow from the API.
Because from the API and the credits, we get
222:01 - something back, that's called crew. And the
crew contains more than the directors. So
222:06 - we have to filter out the directors to just
get the directors name. So I mark it with
222:11 - get directors only. And then I create the
new cast, I call it directors equals and from
222:21 - the credits, that's the one up here, we have
the crew properties. And I'm going to filter
222:27 - this one filter is a built in method in JavaScript,
we have a member a crew member. So I'm going
222:35 - to check if the member dot job, this is also
a property that we get back from the Movie
222:41 - Database API, are going to check if that one
is equal to director with a capital D. And
222:49 - that will filter out all the directors and
put them in this const. Or format it. And
222:58 - then we have all the data that we need, so
that we can set our state, so we call sub
223:02 - state, that's the setter for our state. In
this case, we don't need to use a previous
223:09 - value. So I'm just returning an object here,
I spread out the movie. That's the data that
223:15 - we got back here. So we spread out everything
from that one. And then we have a property
223:21 - that's called actors. And I'm going to give
it the credits dot cast. So from the credits,
223:29 - we have the cast, and we also got the directors
from the crew. So the actors is a property
223:35 - that I create myself that I want to have in
my state. And I'm going to have all the cast
223:39 - inside of the actors property. And the last
one is going to be the directors, there can
223:45 - be more than one director. So that's why it's
called directors with an S. And as this is
223:51 - iOS six syntax, we just need to type out this
it will create it like this automatically.
223:59 - Alright. Then we're going to set loading the
false like this. Auto format it and this should
224:12 - be for this use effect. Actually, I think
for now, we need to return something from
224:19 - our hook also. return an object with the state
loading and error. Save it go back to the
224:30 - movie.js file. We can see if it works. So
down here I marked it with hook. I'm going
224:37 - to import use movie fetch Rome dot dot forward
slash hooks and use movie fetch. And then
224:49 - we can try out our hooked and see if we get
some data back. So at the top of our component,
224:55 - we can destructure out the properties that
we exported from the hooked I also want to
225:00 - show you how you can rename something when
you're distracted. So we have the state that
225:04 - we destructed, and we have a colon, and I
want to call it movie instead. So that's how
225:08 - you rename it. And then we destructor out
loading and error. Then we call or use movie
225:17 - fetch choked. And we also want to give it
the movie ID. But we haven't really got the
225:22 - movie ID. So how do we get it? Yeah, and this
is from the route that we have up here, as
225:27 - I told you about before, we have the ID up
here in the routes, we can get that one from
225:33 - the router. So we have to import something
up here. So we import curly brackets, it's
225:39 - a hook that's called use params. From react
dash router, dash dome. So with this hook,
225:50 - we can grab that params that we have in the
URL. So we'll do that before we destructure
225:55 - out the state and everything here from our
use movie fetch hook to make sure that we
225:59 - have the ID to send into that hook, the const,
and then we destructure out the movie ID equals
226:06 - and we call the use params. That's everything
you have to do. And this one is named movie
226:11 - ID because we named it that in the app.js
file. We call it movie ID. If we call it something
226:17 - else here, we have to distract it with that
name. But this will give us that ID that we
226:24 - have up in the road here in our application.
So hopefully this will work when we tried
226:30 - to console log out the movie, and this is
actually the state but I renamed it to movie.
226:37 - So that's why I can console log it out as
movie. Save it. So we try it out, click a
226:42 - movie and nothing shows up. And I think I
know why we go inside the use movie fetch
226:49 - hook, we also need to actually invoke this
function here. So we do that at the bottom
226:56 - of our use effect hook. Fetch movie. Did I
name it fetch data, we can rename it to fetch
227:10 - movie instead, like this. And make sure to
invoke it at the bottom of the hook. Save
227:18 - it go back to the application. And now you
can see that we have the data here. So we
227:23 - have all the actors. And we also have the
directors that were filtered out here. So
227:28 - that's great. All the data that we need is
here. I want to show you one more thing here.
227:35 - And that is if we were to remove this, that
movie function outside of the use effect like
227:44 - this, it tells us here that we need to specify
the fetch movie, and that's okay, because
227:52 - it's outside the use effect. Now, we do that.
And then it gives us another warning here.
227:59 - And this is because this function two will
get recreated on each render. And this use
228:04 - effect will think that it's a new function
that gets on each render, and it will create
228:08 - an infinity loop. So that's no good. So if
we want to have it placed outside of the use
228:12 - effect, we need to wrap it in something that's
called a use fallback hook, we can import
228:18 - that one up here. And then we wrap this one
in the use callback hook like this. And then
228:24 - at the end of it, we need to have a dependency
array. In this case, it's empty. And then
228:32 - it gives us another warning. And then it says
that it needs to specify the movie ID because
228:36 - the movie ID is something that's outside of
this one here. We also need to specify this
228:41 - one, we specified a movie Id like this. And
now it won't complain. And this one will not
228:47 - get recreated unless the movie ID changes.
So this will stop the Infinity loop. And we
228:55 - can see that it won't go into an infinity
loop here. If you want to do it like this,
229:01 - instead, you can do that. In this case, we
don't need to call this function from anywhere
229:06 - outside of the use effect. So I'm just going
to revert it back and not use the use callback
229:11 - hook. So I'm going to have it inside of my
use effect instead. Like we had it before.
229:19 - Save it make sure that it works again, and
it does. So that's how you use the use callback
229:25 - hook to stop infinity loops in react. But
in this case, we won't need it. So it's better
229:30 - to have this function directly in the use
effect hook instead. Alright, let's move on
229:35 - and create some nice components for our movie
page. Alright, we're going to create this
229:42 - nice little breadcrumb navigation up here
on each individual movie. So go back inside
229:48 - of the code editor inside the components folder,
create a new folder that's called Brad Trump.
229:56 - capital B, capital C and you create another
file inside of that one. Let's call index.js.
230:03 - And you create a file, let's call the breadcrumbed
dot styles, dot j s a bit repetitive now,
230:11 - but it's good because that means that we probably
be learning something here. So inside the
230:17 - breadcrumb dot styles file, we're going to
scaffold out to style components. But first
230:21 - we import styled from styled components, then
we export the class, that's called wrapper.
230:31 - And is equals a style.do, double backticks.
And then we export const, that's called content.
230:42 - It equals A styled dot div, all formatted
and save it. Go back inside of the index.js
230:50 - file in the breadcrumb folder, first, we import
react from react, we're going to import the
230:58 - link from react dash router dash DOM. Because
we want to be able to link back to the home
231:07 - page, then we have our styles, import wrapper,
and content from dot forward slash breadcrumb
231:18 - dot styles, then we create our component cost
breadcrumbed. equals, then we're going to
231:27 - destructure to prop is called movie title.
And we create an arrow function and we can
231:35 - make an implicit returns we have parenthesis
we're going to have the rapper num, we have
231:43 - the content. Now we're going to use the link
from the React router DOM is going to link
231:51 - to and where do we think it's going to link?
probably guessed it, it's going to be forward
231:57 - slash because we want to link to the home
page. This is the first element in the breadcrumb
232:02 - menu. So we're going to have a regular span
here. And it's going to say home. So that's
232:10 - the first one, then after the link, we create
another span. And we're going to have a pipe
232:19 - like this, I think it's option seven on Mac.
Yeah, option seven. Or you can have whatever
232:26 - you want inside of there. But I'd like to
have that as a divider. And then we have the
232:32 - last span and that's it's going to be the
movie title. Do some more formatting. And
232:38 - then we need to export default this one also.
Next export default breadcrumb, right. So
232:48 - this is going to be a two level breadcrumb,
we only have the home button to click on to
232:52 - go back to the home page. And then we show
the movie title, save the file and then go
232:57 - back to the movie.js file. Up here where we
have the component imports, we import breadcrumbed
233:06 - from dot forward slash breadcrumb. Right.
Now we can use it down here in our JSX. One
233:16 - thing we can do first is that we can return
something here, if we loading. So if loading
233:23 - return, we're going to return the spinner
if we're loading something, which we are going
233:33 - to do initially. And if we have an error,
return a div that says something went wrong,
233:45 - or something else if you want that. So this
will make sure that we show the loading spinner
233:52 - initially when we load in all the data for
the movie. And if we have an error, we want
233:56 - to show that JSX down here, I don't know why
it's a spinner, you know, and deleted. Alright,
234:03 - so instead of the movie here, I'm going to
remove this one, and I'm going to use my breadcrumb
234:08 - and it has a prop that's called movie title.
For that one, I'm going to give it a movie
234:16 - dot original underscore title. And I close
the component like that, save it and go back
234:26 - to the browser and click a movie and you can
see that we have our bread crumb here. It
234:35 - looks like crap but we're going to style it
in the next video so don't worry. And it seems
234:39 - to be working here with a title and everything
and we can click the home button to get back
234:43 - to the home page. That's not so in the next
video. We're going to give it some styling.
234:52 - Alright time to give this little breadcrumbs,
some styles and we do that inside of the breadcrumb
234:57 - dot styles file. We have components inside
of that one, we have the wrapper and the content.
235:03 - So let's start by styling the wrapper, I'm
going to display it as a flex align items
235:13 - is going to be center and justify content
is also going to be center. I set the width
235:20 - 100% The height is going to be 70 pixels.
And the background is going to be from the
235:29 - variable that's called matte gray. And the
color is going to be also from a variable
235:34 - but that's the white one. Save it go back
and see what we've got so far. You can see
235:41 - that we have it here but it looks not good
now, so we have to fix this also. And that's
235:47 - the one here does the content. So the content
was set at one also to flex display flex.
235:57 - The width is going to be 100%. The max width
on this one is going to be from the variable
236:06 - max width and the padding is going to be zero
and 20 pixels. Then we have the span element
236:15 - inside our breadcrumbs, we're going to style
up one also span we set the font size. What
236:22 - do we have in the global style here in the
root? For me, I think it's the font medium.
236:31 - So variable dash dash, font med
And the color is going to be for the variable
236:41 - is going to be white. The padding dash, right
is going to be 10 pixels. And then we're also
236:50 - going to have a media query for this one.
So add media screen and Max dash with is going
236:58 - to be 762 pixels. And I'm just going to change
the font size here font size. And I think
237:06 - yeah, I forgot all of them now. Yeah, font
small. That will do, I think. So from the
237:16 - variable, font small. Alright, save it and
go back to our application. And there you
237:22 - have it, and it should change in font size.
Yeah. So it's working, and the link is working.
237:30 - Great. There's some padding there. I have
it there also, okay. Yeah, it doesn't matter,
237:38 - you can adjust that one if you want to do
that. Alright, so that's the styles for the
237:43 - breadcrumbs. So let's move on and create our
movie info component. We're going to create
237:49 - the movie info component. So we looked at
an individual movie, or we can look at anyone.
237:54 - It's this component here, it's kind of a hero
component. So I think this will be the largest
238:00 - individual component in this application.
So we're going to do a little bit of JSX.
238:04 - And also, it's going to be a little bit of
styling for this one. So we better get started
238:08 - with this move back to your code editor. And
inside a components folder, create a new folder
238:14 - that we call movie info, capital M capital
I. And then we'll create a new file index
238:20 - dot j, s, and then another file inside of
that folder, that's called movie info, dot
238:27 - styles dot j s. And we scaffold out the style.
So import, styled from styled components.
238:36 - And for this one, we're actually also going
to import some other stuff here, because we
238:41 - need the image base URL and the backdrop size
from the config. And I'm going to talk about
238:45 - that when we style this component, but we
import them now. So import, capital letters,
238:52 - image, underscore, base, underscore URL, and
also the back drop underscore size. And we
239:02 - grab them from dot dot forward slash dot dot
forward slash config, right. And we scaffold
239:10 - out three components here. So export const,
rapper, equals style, Dave, double backticks,
239:19 - export const. content, hopefully beginning
to see my pattern on styling. In this one,
239:26 - I usually have a wrapper and the content.
This one is also going to be styled div. And
239:34 - then we're going to have a third one. That's
going to be called export const text. And
239:40 - it's also going to equal the style of div
that will backticks. Like so save the file,
239:47 - go back to the index.js file in the movie
info folder. Now we can start building this
239:53 - massive component. Now it's not really that
massive, I think it's about 50 rows or something.
239:59 - All right, import react from react, and then
we're going to have a component, so we're
240:06 - actually going to use the thumb component
for this one. So import thumb from dot dot
240:11 - forward slash, thumb. Alright, so that's the
component that we need. We also need something
240:19 - from the config. So import the image underscore
base underscore URL, and also the poster.
240:28 - underscore size. From dot dot forward slash
dot dot forward slash double dot dot forward
240:37 - slash config. Then we have an image. And it's
going to be the fallback image as we always
240:44 - use, so import no image from dot dot forward
slash dot dot forward slash, again, images.
240:54 - No underscore image dot jpg. All right. And
then we have our styles. The import curly
241:04 - brackets, wrapper, content, and text from
dot forward slash, move info dot styles. Right,
241:19 - that's our imports. Then we're going to create
the component itself. So we have a const.
241:25 - Movie. info equals anger is a structure of
a prop. That's called movie we're going to
241:31 - give it the movie data as a prop, an arrow
function and we can make an implicit return
241:37 - on this one. First, I actually going to export
default its export default movie info, like
241:45 - so, then inside of here, we're first gonna
have a wrapper. And this one is actually going
241:50 - to take in a prop. That's going to be the
backdrop image. So we have a prop that called
241:57 - backdrop. And from the movie, we have a property
that's called backdropped. underscore path.
242:04 - And we close the component and inside the
wrapper, we have our content, like so then
242:14 - we're going to use a thumb component again.
And this is actually great, because you can
242:18 - see here how you can reuse components in react.
And this is kind of the fundamentals of working
242:24 - with components, you can reuse them in your
application. So you should always code with
242:29 - that in mind, if you want to reuse it somewhere,
you should make the components flexible. So
242:33 - you don't need to create similar components,
it's better to use one component that you
242:37 - can modify with props instead. So we have
our thumb. And on that one, if you remember,
242:44 - we have an image prop. So we're going to give
it the image. And this one, just as before,
242:48 - I'm going to check if it's as a movie poster
path, I use a ternary operator for this one,
242:54 - I have a question mark. And also note, I created
curly brackets here, because this is a JavaScript
243:00 - expression. And as I like to do it with template
literals, I'm going to have double backticks.
243:05 - And I have $1 sign and then I'm going to grab
the image base URL, then I have another dollar
243:11 - sign and curly brackets, I'm going to grab
the poster size. And then lastly, I'm going
243:17 - to have a new dollar sign and curly brackets.
And I'm going to grab the movie dot poster
243:22 - underscore path. So that is if we have a poster
pass. Otherwise, we have a colon and we show
243:30 - the no image that we imported. That's the
image prop. Then we have the clickable prop.
243:36 - And in this case, we're going to give it false
because we don't want this one to be clickable,
243:41 - we set an OLT of movies thumb. And then we
can close this component, do some more formatting,
243:49 - save it and we can actually go back to our
move it up JS component and import this one
243:54 - here where we import the components, import
movie info, from dot forward slash, movie
244:01 - info. And then below here below the breadcrumb
or we can use a move in for component like
244:11 - this, we give it a drop of movie. And it's
going to be the complete movie stayed. If
244:17 - you want, you can specify it even more in
detail if you don't want to give it the complete
244:21 - state but I think for simplicity's sake, I
give it the complete state here to work with,
244:26 - say the file go back to our browser. And you
can see that we have our image here. And we
244:29 - can click it and that's great. So yes, yes,
it works with some other stuff here. Yeah,
244:37 - it does. That's great. Move back inside of
the index.js file in the movie info folder.
244:43 - So we created our thumb and just below the
thumb, we're going to have our text. So we
244:49 - use the text style component. And inside of
that one, we're going to have an h1 tag. And
244:55 - I'm going to grab the movie dot title for
that one. Then we have an age three tag. And
245:03 - it's going to say plot or something else if
you want that. Next we have a p tag. And we're
245:10 - going to grab the movie dot overview. And
that's the short text about the movie. And
245:19 - inside of here, I actually going to create
some regular classes with class name, because
245:23 - I want to show you that also, you could create
stock components. Also, if you want to do
245:27 - that for these that I'm going to create now.
But I'm going to create a regular div with
245:31 - a class name or rating dash directors, I'm
going to have both the rating and the directors
245:39 - in this one. And inside of this one, I'm going
to nest another div. And inside that div,
245:46 - I'm going to nest an H three tag that's going
to say rating, like that. And then I have
245:53 - another div with a class name. That's going
to be that's going to be score. And then I'm
246:04 - going to grab from the movie dot vote underscore
average. And that will give us the score from
246:12 - the API. Let's do rating. Then below this
wrapping div are going to create another wrapping
246:19 - div and this one going to have a class name
of director and inside of that one are going
246:29 - to have another age retag and it's going to
say director and I'm going to do a little
246:35 - trickier because if there's more than one
director, we won't To say directors, so I
246:40 - create curly brackets. And inside here I oops,
don't know why did like that, okay. And inside
246:47 - the curly brackets, I can have a JavaScript
expression. And I can check if movie dot directors
246:54 - dot length. If that one is greater than one,
I'm going to add in an S, like this. Otherwise,
247:03 - I just return an empty string. If there's
only one, it will say director, otherwise
247:10 - it will say directors. then below that header,
we create another pair of curly brackets,
247:18 - because now we have to loop through the directors
and display them in our dome. So from our
247:23 - movie, we have this property that's called
directors, we're going to map over that one.
247:29 - And we have a director, we can make an implicit
return in this arrow function. So we have
247:39 - a p tag with a key, it's always important
to include a key as you know, otherwise, React
247:44 - will complain react uses the key internally
to diff stuff, so it knows what to change
247:49 - in the DOM. Okay, so the key is going to be
from from the director, we're going to grab
247:57 - something that's called credit underscore
ID. And this will be unique, right, and inside
248:03 - the p tag, we have another pair of curly brackets,
and I'm going to grab the director, dot name,
248:11 - auto formatted. So that's the directors and
this should hopefully be it. So we can save
248:17 - it, go back to the application and see what
we got, we probably won't see anything because
248:22 - this text is white, I guess. Or if we check
here below, we can see that we are the last
248:27 - it is in white now. So you can see it, the
rating is 5.1. And we have a directory also.
248:34 - So we know that it's working, we just have
to give it some styling to make it look nice.
248:38 - And that's exactly what we're going to do
in the next video. We have finished a logic
248:45 - for a movie and four components. So it's time
to style this one. Go back inside of the code
248:51 - editor. And inside the movie info dot styles
dot j s, we start off with a wrapper. For
249:00 - this one, we set the background and this one
is going to be based on a prop that we're
249:04 - selling. That is called backdrop. So I'm going
to create a ternary operator here because
249:08 - if we don't have a backdrop, then we're going
to set the background to be just black. And
249:12 - if you remember when we grab a prop in a style
component, we can do that with $1 sign and
249:17 - curly brackets. Because this is a template
literal. So that's how you create a JavaScript
249:23 - expression. And then I'm going to destructure
out from the props. So I have a parenthesis
249:28 - and curly brackets again. So I'm going to
destructor out the backdrop like this. And
249:34 - then I create an inline arrow function. And
then I'm going to create a ternary operator
249:39 - here to check if the backdrop exists. So backdrop,
then I have a question mark. And then I do
249:46 - another template literal. Inside of here,
we have the URL. And I have a regular single
249:51 - quote, I don't actually know if we need this
one. But I'm gonna leave it in just to be
249:56 - sure. And then dollar sign curly brackets.
And I grabbed the image base URL. And then
250:02 - I have again, dollar sign and curly brackets,
and I grabbed the backdrop size, and I have
250:07 - a third dollar sign and curly brackets. And
I'm going to grab the backdrop, that's the
250:13 - one that we send into this component. So that
is if we have a backdrop otherwise, to the
250:19 - right of the colon. I'm going to show a black
color. And then we have a semi colon to MDS
250:28 - with just after the last curly bracket. This
can be a little bit nested here and hard to
250:34 - read actually see if it does something if
I yeah, it's all formatted on one row. Okay,
250:41 - yeah, that's fine. I'm going to remove this
sidebar. So you can see this is maybe easier
250:45 - to read. So I check if the backdrop is true.
And then to the right to the question mark
250:50 - are going to parse in the image base URL and
the backdrop size, and then we'll have the
250:54 - backdrop that we're sending to this star component.
If this exists, we're going to show that one
250:58 - as a background. Otherwise, we set the background
to be black. Right, then we're going to set
251:05 - the background dash size. It's going to be
cover and then we have the background dash
251:13 - position. That one is going to be center.
And I'm going to set a little bit of padding
251:21 - on this one. So 40 pixels and 20 pixels. And
I have an animation also because I want this
251:27 - one to fade off just as the other ones. animate
movie info, camel casing, and one second and
251:37 - then I create The keyframes so add keyframes
like this, and then we go from. Or if you
251:45 - want to use 0%, instead, we set the opacity
to zero, and then two, or 100%. If you use
251:54 - that instead, Opacity is going to be one,
save it and see what we got. Okay? I must
252:02 - have some typos somewhere because we we don't
see the background. Yeah, and that's because
252:07 - I need to have this single quote here also,
at the end, save it and go back. And there
252:14 - you have the backdrop. That's sweet, I can
actually try also to remove those and see
252:21 - if it works without them. Yeah, and it seems
to be working. So we don't actually need to
252:25 - have those single quotes. Alright, sweet.
Okay, that's the wrapper move down. And then
252:32 - we're going to style the content itself, we
set the display to flex, the max dash with
252:41 - is going to be from a variable max with. Then
we set the margin to zero and all the background,
252:54 - I'm going to set a transparent black on this
one. So RGB or RGBA, I don't think you need
253:00 - a actually 000 and 0.7. That will make it
a little bit transparent. Then we have a border
253:10 - radius of 20 pixels. And we have a media query
on this one also. So at media screen, and
253:21 - max width is going to be 768 pixels on this
one. And then we're going to display it as
253:29 - a block and set the max height to none. And
that's it for the content, save it, go back
253:38 - to the application. And you can see that we
have the content here. But we need to do some
253:43 - more styling here on the text to get it to
look exactly as we want. So we have our text
253:51 - style component here. And for this one, we
set the width to 100%. I set the padding to
254:00 - 20 pixels, and 40 pixels. Set the color from
the variables white. And overflow is going
254:11 - to be hidden on this one. Then I'm going to
grab a class. That's called rating dash director.
254:19 - So that's the one that I created inside of
here. rating dash directors, you can grab
254:25 - them just as a regular class in the star component.
So that's why you don't need to create a separate
254:30 - star component for each and every element.
If you don't want to do that some elements
254:34 - are really small. And maybe it's not justified
to have its own style component. So we're
254:41 - going to display it as a flex and justify
content is going to be flex dash start. Then
254:52 - we have the sport class. This one is also
going to display it as a flex align dash items
255:00 - is going to be center and justify content
is going to be center so these three will
255:08 - center stuff for us. And you could also create
a separate class if you don't want to type
255:12 - them in all the time. The width is going to
be 35 pixels. The height is also going to
255:22 - be 35 pixels background is going to be white.
So FFF and the color is going to be black.
255:32 - And you could also of course create variables
for these ones. If you want to do that and
255:37 - place them in the global style where we have
the other CSS variables. The font dash width
255:43 - is going to be 800 border dash radius is going
to be 25 pixels. Or you can actually set it
255:55 - to 50% if you want that is instead because
this is a circle and the Morgan is going to
256:02 - be zero. That's the score. And then we have
our director. So dot director the Morgan is
256:14 - going to be 0004 pixels on that one. And inside
of that one we have a p tag and we set the
256:22 - margin to zero on that. And below we have
the last one that's the h1 tag. And that one
256:31 - is going to media screen and Max dash with
760 pixels. And we set the font dash size,
256:46 - the variable, dash dash font big. Right? Save
it go back to the application. Yeah. So there's
256:56 - something here that doesn't look right. And
I think I know what it is. Yeah, this one
257:00 - is called directors. And probably, I misspelled
this one yet rating directors, we should have
257:06 - an S zeroes on that class, make sure that
you add an s and save it. Go back to the application.
257:12 - And now it should look right. Yeah, it does,
we can see if it looks great on another movie,
257:20 - also, and it does. Sweet. So that's the movie
info component. In the next video, we're going
257:28 - to check out this little movie info bar that's
below here we can see the running time to
257:33 - budget and the revenue. Let's create the movie
infobar. And that's the one here with running
257:41 - time, budget and revenue. We're going to start
as always by creating the component first
257:47 - and then we create the styles in the next
video. So we start off in the components folder
257:51 - by creating a new folder that we call movie
infobar, capital M, capital I capital D. And
258:00 - inside of that folder, we're going to create
a new file that's called index dot j s. And
258:06 - then we're going to create another file that's
called boring stuff. No, I'm just kidding.
258:12 - Of course not. But it's getting a little bit
repetitive here, it's going to be called movie
258:17 - in full bore.styles.js. Of course, we start
off by scaffolding out those components, import
258:26 - styled, ROM styled components. And we export
constant, we have our wrapper, style dot div,
258:38 - double backticks. And then we're going to
have our content export cones content equals
258:47 - stand, dot div, and double backticks. Save
the file and go back to the index.js file,
258:55 - we import react from react. And then we're
going to use some helper functions that are
259:03 - provided for us, they will take a look in
the helpers.js file, you can see that I have
259:07 - one function for calculating time, and one
for converting the money. So this one for
259:12 - example, the Convert money, JavaScript has
something built in that we can use for converting
259:18 - into a currency. And this one I said is one
for converting it into US dollars, you can
259:22 - change this one if you want to have another
currency. And this one is going to give us
259:26 - the time in hours and minutes. So these are
the ones that we're going to import in the
259:31 - component. So move back to the index.js file.
And I mark it with helpers. Import calc, time,
259:40 - camel casing and convert money also camel
casing wrong. dot dot forward slash and dot
259:48 - dot forward slash again, help us right, then
we have our styles. So we import curly brackets
259:57 - and wrapper and content. From dot forward
slash movie and FUBAR stars, all right. And
260:07 - then we can create our component. So we have
our concept of movie info bar equals, this
260:14 - one is going to get some props. So I destructure
the time, the budget and the revenue. And
260:25 - I have an arrow function and I make an implicit
return. And I think I'm also going to export
260:30 - default, before we start creating our JSX.
So export default movie info bar. All right,
260:40 - we start off with our wrapper. Now we have
our content. And the first div we're going
260:50 - to have is a deal if we have a class name
or column on that one. So we have a p tag,
260:58 - a running time colon, then I have a curly
bracket, and we invoke the function that's
261:06 - called calc time that we import it. And we
give it the value of time, and we end it with
261:13 - a curly bracket. So that would give us the
correct time. And actually, the other two
261:19 - days are going to look almost exactly the
same. So I'm going to copy this one and paste
261:23 - them in two more times. The class name is
going to be column also on this ones, but
261:28 - this one we can change it to budget. And instead
of chart time, we're going to invoke convert
261:35 - money instead and we're going to give it budget.
Now the last one is going to be revenue. And
261:45 - we also invoke convert money and give it the
revenue. Right? Save it. And this is our movie
261:56 - in football, we just need to make sure that
we use it in the movie component. So move
262:00 - back to the movie.js imported up here, import
movie info bar from dot forward slash, movie
262:10 - info bar. And then below just below the movie
info. We use that component movie info bar.
262:19 - And we also have to give it some props time
is going to equal movie dot runtime budget
262:26 - is going to equal movie budget. And the revenue
is going to be the movie dot revenue. And
262:39 - then we close the component like this, do
some more formatting, and we get him on each
262:44 - row. So that's much nicer. We can see it here
now. So we have these props here. Now. This
262:49 - should be it for a movie and FUBAR. If we
save this one, go back to the browser. And
262:58 - nothing shows. And that's because we haven't
styled it yet. I thought we should see something
263:03 - at least. But I guess it's because the Yeah,
the text is white now. So that's why so you
263:08 - can see down here that we have the running
time we had the budget. But the budget is
263:13 - actually Ciro that's no good. Or is it zeroed
out on that particular movie? Yeah, it was,
263:21 - it didn't have any budget. Right. So in the
next video, we're going to start it. Alright,
263:29 - we're going to create the styles for the movie.
And for Boris, make sure that you insert a
263:32 - movie in FUBAR dot stars file. And we start
as always with wrapper, we display it as flex,
263:39 - align the items. To center, I'm going to set
a min height on this one 200 pixels. And the
263:50 - background is going to be from the variables
and I'm going to grab the dark gray. I set
263:59 - the padding to zero and 20 pixels. Save it
go back and see what we got so far. Yeah,
264:07 - we can see it down here. So go back to the
code, then we're going to start the content,
264:13 - we display it as a flex. I set the max win
over variable from the variable max width.
264:25 - I set the width to 100%. And the Morgan is
going to be CRN auto. Then, we have that class
264:37 - that's called column. So dot column. That's
the one if you remember that we have here
264:43 - the class name column. And I also got to display
that one as a flex flex box is a really handy
264:52 - tool in CSS a line items is going to be Sunder
and justify content is going to be Sunder
264:59 - assess the background, from our variable are
going to grab med grade, a set of border dash
265:13 - radius to 20 pixels, the margin is going to
be zero 20 pixels, and the flex is going to
265:22 - be set to one. Then I'm going to style the
first child we have we have three of them.
265:28 - So I want to start the first shot a little
bit differently. I want to set the Morgan
265:32 - dash left to zero. And I also want to start
the last child with colon last dash child
265:40 - I set the Morgan dash right to zero. Right.
Now we just have a media query left at the
265:48 - bottom here at media screen and Max dash with
several 168 pixels are displayed as a block
266:04 - below that pixel size. And the column dot
column is going to have a margin of 20 pixels
266:15 - and zero, right? This should be it, save it
back to the application. If it works, yeah,
266:22 - there you have it. It works on mobile devices
also. That's super great. That's the movie
266:30 - infobar. And now we just have the grid with
the actors left to do and then we've finished
266:35 - the basic stuff with this application. Alright,
let's create the last component for our application.
266:43 - And that's going to be the actor. Inside a
components folder, create a new folder that
266:48 - the name actor. And then you create a new
file inside of that folder that we're going
266:55 - to call index dot j s. And we created another
file that's called actor dot styles, dot j
267:06 - s. And inside the actor dot styles dot j s,
we import styled Rome style components. And
267:15 - then we export the cost that we call wrapper
equals style dot div, double backticks. And
267:23 - then we're going to have another one, export
const is going to be called image capital
267:28 - I, of course, equals style dot IMG, we're
going to style this image tag, save it, go
267:37 - back to the index.js file, and we can create
our actual component. So import react from
267:43 - react. Then we have our styles. And we import
the wrapper and the image, ROM dot forward
267:53 - slash actor styles. Then we create the component
const actor equals parenthesis and another
268:03 - a destructor. Out inside of the curly brackets,
the name, the character and the image URL.
268:11 - We have an arrow function, we make an implicit
return we have the wrapper, then we're going
268:20 - to display our image, we have the source or
image URL ot is going to equal actor dash
268:32 - thumb. And then we close it. Now we have an
H three tag, that's going to display the names
268:42 - of curly brackets and name that's the prop
name. And then we have a p tag and we have
268:49 - curly brackets and we're going to grab the
character that's going to be the name of the
268:54 - character. Right, then we just need to export
default actor and or component is good to
269:03 - go. So go back to the movie.js file imported
up here, import actor from dot forward slash
269:14 - actor, right, and then move down to our JSX.
I'm just below the movie info bar. We're going
269:23 - to show these actors and we're going to show
them inside of our grid. So we first display
269:28 - a grid. The header for this one is going to
be actors. If you remember, we have this prop
269:34 - that's called header where we can set the
title of our grid. And inside a grid, we're
269:40 - going to map through all the actors. So we
have curly brackets, and from the movie dot
269:44 - actors, we're going to map through each actor.
So we have an actor and an inline arrow function,
269:51 - parenthesis, we make an implicit return. Then
we display an actor, it needs to have a key,
269:59 - as always, when we met through stuff in our
JSX in react, so the key is going to be from
270:05 - the actor dot credit underscore ID. That's
the key. Then we have a prop that's called
270:14 - name. So we're going to give it the actor
dot name. And a scroll up a little bit here.
270:21 - And then we have a prop that's called character.
And for that one, we give it the actor dot
270:26 - character. Like so now we have an image URL.
And it's going to equal and this one is also
270:36 - going to be that ternary operator that we
use before because we want to display a fallback
270:41 - image if we don't have that one. So we check
if we have an actor dot profile underscore
270:46 - path. And then we have a question mark and
we're going to return our nice little URL.
270:54 - So I have double backticks dollar sign and
I have curly brackets and I grab the image
270:59 - base URL and then directly after that I have
another dollar sign curly brackets and I grabbed
271:05 - my poster size. And then I have a third dollar
sign and curly brackets. And I'm gonna grab
271:12 - actor dot profile underscore path. Be very
careful with the spelling here. It's very
271:19 - easy to get a typo when you do stuff like
this. Now we have our colon and if we don't
271:25 - have a profile path, we give it a no image.
And then below here we need to close that
271:33 - component also do some auto formatting. So
this should be my friend We have hopefully
271:38 - finished the base of the application. And
then I'm going to teach you some other stuff
271:43 - that's useful in react. So this should be
it, I hope, save it and go back to the browser,
271:50 - you can see that we have the accuracy, but
it doesn't look good, because we haven't styled
271:55 - them yet. But at least it's working. And these
are in white, there, you can see the character
272:03 - they play in the movie. So we're going to
style them in the next video. And then we
272:07 - have this nice actors grid. Alright, let's
give those actors some styling. So inside
272:15 - our code in the actor.styles.js file, we have
two style components. So let's start with
272:22 - wrapper as usual. I'm going to set the color
from our variables, we have white, I set the
272:31 - background. And also from our variables, we
have the dark gray, I set the border dash
272:40 - radius to 20 pixels, padding is going to be
five pixels, and the text align is going to
272:50 - be Sunder then I'm going to have an age three
tag nested here, I set the Morgan to 10 pixels
273:00 - 000. on that one, and then we have the p tag
is going to have a margin of five pixels and
273:06 - zero. All right, so that's everything for
the wrapper, then we have the image, just
273:12 - a few lines of code left, we display it as
a block, the width is going to be 100%. The
273:23 - height is going to be 200 pixels. And albeit
dash fifth is going to be cover and the border
273:31 - radius is going to be 15 pixels. And this
should be it, save it go back to the application.
273:39 - And hopefully you have a nice grid. Yeah,
almost. There's something wrong here with
273:45 - a background. Yeah, and that's because I have
a typo, it should say border radius, like
273:52 - that Not radius. Save it go back. And there
you have it. Let's make sure that it works
274:01 - on all devices. And it does. Sweet, sweet,
sweet. And that concludes the basic stuff
274:08 - for this application. In the next video, we're
going to talk about prop types and how you
274:12 - can type check the props that you send in
to your components. I'm going to talk about
274:19 - something that's called prop types. And prop
types is something you can use on your components
274:23 - in react to type check the props that you
send into your component. So you have this
274:28 - special property on your components you create.
That's called prop types. I'm on the official
274:33 - react page. Now, reg deus.org. And just as
to say here, React has some built in type
274:39 - checking abilities. I'm going to show you
how to convert this application into TypeScript
274:44 - later in the chapter. So if you don't use
TypeScript, you should use prop types instead.
274:49 - That way, you can at least type check your
props that you send in it. So they tell you
274:54 - here to run type checking on the props for
a component, you can assign a special prop
274:58 - types property. And I'll give you an example
here. So they import the prop types that's
275:03 - from the library that we installed earlier
prop types up here. Then they have the component
275:09 - name, and then assign and then assigned to
this property that's called prop types. So
275:13 - this one has a lowercase letter to start with.
And this one has an uppercase letter. So this
275:18 - one is the actual property on the component
itself. And this one is the one that you import
275:23 - from the library that's called prop types.
So it can be a little bit confusing, but we're
275:28 - going to practice this in our components.
So hopefully, you'll get a grasp of it quite
275:33 - quickly, you have this special property on
your component that's called prop types. And
275:38 - that is an object. And here you can specify
your props. And from the prop types that we
275:42 - import up here, you have different types you
can check against. So this one will get a
275:46 - warning if the prop isn't a string that this
component receives. And if we scroll down
275:52 - here, they show you everything you can do
here. And we are actually just going to do
275:56 - those simple checks if it's a string, a number
or a Boolean. But you can also check against
276:02 - an object, for example, you can set all the
properties in an object, and then you use
276:06 - something that's called shape. And then you
specify your orbit shape inside of that one.
276:12 - So you can do some more advanced prototype
validation here, instead of just check that
276:16 - it's an object. You can check all the properties
on the object by using the dot shape. So I
276:23 - highly suggest that you read this one on rxjs.org.
If you want to know more about prop types.
276:28 - I think a lot of people now are starting to
use TypeScript with react. And with TypeScript.
276:34 - We don't have to do this. We have it for free
in TypeScript. So prop types is only If you
276:38 - don't use TypeScript, and that's why I won't
go into super detail about it either, because
276:43 - I think TypeScript is actually great to use
in combination with react. But you should
276:49 - know at least that you can do some deeper
prop type validation by using some of these
276:54 - syntaxes. Here, you can also check an object
with with warnings on extra properties. And
277:01 - you can do an exact check here, if you want
to do that. And you can also check if you
277:06 - send in an array that should have only numbers,
you can check that also. So that you make
277:10 - sure that the array doesn't contain strings,
for example. Or then you can do the same with
277:15 - an object here. So there's some really useful
stuff inside of here that you can learn if
277:20 - you want to get more advanced into prop types.
But we are going to use the most simple use
277:25 - cases. And we're going to check for strings,
numbers, and Boolean and also for functions,
277:31 - I think. So in the next video, we're going
to learn about the most simple forms on how
277:36 - we can use prop types on your components.
Okay, let's start doing some prop type validation.
277:44 - So we're going to do that with the prop types
library that we installed in the beginning
277:48 - of this course. So let's begin at the top
here with the actor in the components folder,
277:53 - and then we're going to move away down and
go through all our components. So in the actor,
278:00 - make sure that the import prop types, capital
P, capital T, from Prop, dash types, right.
278:13 - And then just below the component at the bottom
here, just above the export default, we have
278:19 - our actor component, so we're going to use
the special property that's called prop types
278:23 - on that one. So actor dot prop types, and
this one is lowercase p, not capital T, as
278:31 - it is up here. Be very careful here is can
be quite confusing, actually. So prop types,
278:39 - is going to equal and we have an object. And
then we can specify our different props that
278:44 - we have here. So we have the name, Prop, and
the name prop. We know that this one is a
278:50 - string. So from the prop types that we import
that capital P prop types with capital P prop
278:56 - types, we have something that's called string,
so we're going to check against if it's a
279:02 - string. All right, then we have the character.
And from prop types with capital P, we're
279:12 - also going to check if that one is a string,
and we have the third one, image URL, Rob
279:17 - types, dot string, all of these are going
to be strings. So we say this one, go back
279:24 - to our application. And we can see here, we're
going to need to be on an individual movie
279:32 - here. So we have this movie here, nothing
shows up here. But if we go inside, or I'm
279:40 - just going to close this here. So if we go
inside our move it up JS component, we have
279:46 - our actor here. And we know that this name,
for example, is a string. So if we change
279:51 - this one to a number, for example, 10, save
it, go back to our application, you can see
279:56 - that we instantly get a warning here fail
prop type, invalid prop name of type number
280:00 - supplied to actor expected string. So this
is a very handy way when you develop your
280:07 - application to know that you're sending the
correct props to your components. And this
280:11 - is only available in development mode, it
will not be in production. So it's kind of
280:15 - a tool when you develop this application to
actually validate your props that you're sending
280:20 - to your components. So we're going to change
this back now, and hopefully get an idea on
280:26 - how it works. Now, that was our actor. Then
we have our bread crumb. So just as before
280:33 - we import prop types, capital P capital T
from prop dash types. And below the component
280:46 - we have the component name, breadcrumb dot
prop types. With a lowercase p, it's going
280:54 - to equal an object. And for this one, we have
a prop. That's called movie title. And from
281:02 - the prop types with a capital P, we're going
to check if it's a string, right. So that's
281:10 - the bread crumb. Then we have the button.
For that one, we have two props. So we import
281:18 - prop types, capital P, from prop dash types.
And below the component. We have the bottom
281:29 - dot prop types. lowercase p equals an object.
We have our text prop that one We're going
281:38 - to check prop types, capital P here and a
little bit repetitive here that we check if
281:44 - it's a string. And then we have a coma, and
we have a callback. And from the prop types,
281:54 - capital P, this one is going to be a function.
So we have that one also on the prop types
282:00 - object. funk, we can check if it's a function,
save it, go back to our application and check
282:07 - Yeah, it seems to be right. Let's have baronne.
Then we have our grid, import prop types capital
282:18 - P from prop dash types, below the component,
grid dot prop types lowercase p, then we have
282:30 - two props for this one, header, prop types
dot string, we check if it's a string. And
282:38 - we actually don't need to check the children
because that is a built in Prop, so we don't
282:42 - need to verify that one. That's the grade
that we have the header and the header don't
282:48 - have any props, we can skip that one, we have
the hero image. And this one has reom to import
282:56 - prop types capital P from prop dash types.
Below the component, type in hero image, dot
283:08 - prop types lowercase p, we have our object.
And we have the image we check against the
283:15 - prop types with capital P dot string. All
of these are going to be strings. Also, we
283:20 - have the title, prop types dot string. And
we have the text prop types. dot string, right?
283:29 - image, title and text. Save the component
we move inside of movie info component. And
283:40 - for that one, we have one prop import prop
types from prop data types. And below the
283:57 - component movie, info dot prop types equals
an object. And we call it movie I think, yeah,
284:07 - movie. And this one is an object. So prop
types dot object. And this is what I talked
284:16 - about before in the last video. If we go back
here, you can see if you want we can save
284:21 - this object with dot shape. But I think there's
too many properties in this object. Now to
284:27 - actually do this. I don't think it's worth
it. So just check if it's an object. But if
284:32 - you use dot shape, you can shape the complete
object here and check every property on the
284:37 - object. All right, let's move on we have the
movie info bar. And for that one, we have
284:45 - three of them. So import prop types from prop
dash types. The loader component, movie infobar
284:59 - equals an object. And we have the time and
prop types. dot this is going to be a number
285:06 - so we have the number property check against.
That's the time then we have the budget, prop
285:14 - types. DOT number is also going to be a number.
We have the revenue, prop types DOT number
285:22 - all three of them are numbers. movie in forbore
Yeah, of course, I also have to have dot prop
285:33 - types like this. Right? Just check the application.
Everything seems to be working. Movie info
285:43 - isn't the fun is it because I typed in Yeah,
this one is auto generated when I typed in
285:49 - movie info below. Okay, just remove it, save
it. Then we have the search bar. Import prop
286:01 - types from prop data types. Right below the
component. We have the search bar dot prop
286:12 - types equal an object. So we have the callback
function. So prop types dot func, we check
286:22 - if it's a function. Save it. The Spinner will
not have any props for that one. We have the
286:30 - thumb and we have three of them there. So
import prop types from prop Types below the
286:41 - component, we have thumb dot prop types, lowercase
p equals an object. And we have the image.
286:51 - I think image movie ID and clickable image,
prop types capital P, dot string, that's the
287:00 - URL for the image. So it's a string. Then
we have the movie ID, prop types, DOT number,
287:08 - the ID is a number, and then clickable. Prop
types, dot, and this is a Boolean. So we have
287:20 - something that's called bool. And this will
check against a Boolean. Right? Now, it's
287:27 - actually our last component, I think we don't
have anything in home and movie and not found.
287:33 - That's the last one. And I saved this for
last, actually, because we built the whole
287:39 - application. Sure, you should do this from
start when you build a component, I didn't
287:43 - want to confuse you too much before we have
learned more about react. So that's why I
287:48 - said it last. But you should have as a habit
to always do this when you create a component
287:53 - that receives some props. So that's why I
saved it for last. I think that sums it up
287:58 - about prop types, I'm not going to go all
crazy about prop types. Hopefully you learn
288:03 - something here to get you started with prop
types. And actually, I don't think in this
288:08 - application, we don't need to do any deeper
checks here, actually. Okay, in the next section,
288:13 - we're going to see how we can persist our
state in the session storage. We have almost
288:21 - finished replication, there are some things
we can do to optimize it. Because now Yeah,
288:26 - it works. But for example, here, those movies
here, we always reload those movies when we
288:30 - visit each site here. And also, when we go
back to the start page, we always fetch from
288:35 - the API. And that's what we're going to talk
about here. Because in your browser, you have
288:39 - something that's called local storage and
session storage. And we're going to utilize
288:43 - the session storage to store the data that
we already retrieved. If you open up the panel,
288:49 - and you have something that called application,
and inside application, you have the storage.
288:53 - And there you can see the local storage and
the session storage. And these here are all
288:58 - the movies that are stored from the application.
So you can see it's the movie ID here, and
289:03 - here we have the data for the movie that's
stored here. Then we also have the homestead.
289:09 - This is from the other application that is
finished, not ours. I just wanted to keep
289:14 - them here to show you how it's going to look
when we store this stuff in the session storage,
289:18 - local storage and session storage are quite
similar. The big difference is that the local
289:23 - storage persist until you decide to remove
it, the session storage only persist over
289:29 - a session. So every time you create a new
session, the session storage will get wiped
289:33 - out. And you may wonder, wouldn't it be better
to have the local storage for application?
289:38 - Yeah, it would probably, but this page here
is based on all the popular movies. So it
289:45 - changes a lot. So that means if we store it
in the local storage and never remove it,
289:50 - we always get the same list of movies here.
And that's no good. So that's why it's better
289:54 - to store it in the session storage. And also,
each individual movie here. Also sharing just
289:59 - because we have a rating, that one has zero
rating. Okay. Let's select another one, that
290:06 - one has 7.6. So the rating will change depending
on the voting. So there is stuff that can
290:12 - change in each movie also. So that's why I
chose the session storage for both of them.
290:17 - But if you want, you can use the local storage
instead, the code is going to be the same
290:20 - except that you swap out session storage for
local storage when we write the code. In the
290:26 - next video, we're going to learn how to persist
the state in the session storage for the homepage.
290:33 - Okay, we're going to learn how to persist
the state in the session storage. And we're
290:38 - going to start by creating a little function
that we can use to read from the session storage.
290:43 - So go back inside of the code editor, and
in the file, let's call helpers dot j s that's
290:48 - the one are provided for you in the store
defies we're going to add in a little function
290:53 - at the bottom here in this file. So we export
the const is persisted, stayed like this equals,
291:03 - then we have a parameter that's called state
name or name, you can name it whatever you
291:08 - want, then I have an arrow function. And then
we create a cost that we call session state
291:16 - equals and from the session storage, session
storage. We have a method that's called get
291:24 - item. And this is what I talked about before
if you want to use the local storage instead,
291:29 - you can just change this one to local storage
and it will work you just swap this one out
291:34 - to local storage. Alright, so we invoke The
method is called get item, we give it the
291:40 - state name. And this will return the state
from the session storage if there's a state,
291:46 - otherwise it will return No. So it will get
the item from the session storage with the
291:51 - name that we provide, there would need to
return something from this function that we
291:56 - created. So return, and I'm going to do a
short circuit here, I checked, if session
292:03 - state. If we have something in this one here,
now I have double ampersand and it will return
292:10 - what's the right of the ampersands. Otherwise,
it will return this one. And this will be
292:15 - now if it couldn't find this one in the session
storage. Let's say that we have something
292:20 - in the session state, it will run what's to
the right of the double ampersand so we can
292:24 - return that state. But we can just return
it as it is because you can only write to
292:29 - the session storage and to the local storage
as a string. So we have to parse it back from
292:34 - a string into JSON. So that's also what we're
going to do when we write to the session storage,
292:40 - we're going to first convert it to string
but now we have to parse it back and forth,
292:45 - we can do that with JSON capital letters,
parse, and then we give it the session stayed
292:50 - like this. And this will parse it back to
JSON object and we return it save the file.
292:55 - And this is it for this little function. So
let's move inside of the use home fetch hook
293:02 - down below here. Our search an initial use
effect hook. In this one, we can check if
293:09 - we have a session state before we retrieve
anything from the API. So there are a couple
293:14 - of things we have to consider here. Because
we want to check the session storage on the
293:18 - initial render, before we fetch anything from
the API. If we have something in the session
293:23 - storage, we retrieve that one instead. And
later, we're going to create a hook that also
293:27 - writes to the session storage. And we're not
going to write to the session storage if we're
293:31 - in a search. And that means that we also don't
want to retrieve anything if we are in a search.
293:37 - So that's why we're going to create an if
statement here. Just at the top in this use
293:43 - effect if and we'll have an exclamation mark,
and search term. So this means if not search
293:50 - term, then we're going to check the session
storage. So we create a new cost, call it
293:57 - session stale equals, and then we also have
to import a function that we created in the
294:02 - helpers file, it's up here at the top with
the market with helpers, and import is persisted
294:10 - state from dot dot forward slash helpers.
So that's our function that we're going to
294:19 - use here. To the right of the equal sign,
we call that function is persistent state.
294:27 - And for our homepage, we're going to create
a state that is called the home state. So
294:31 - we are hard coding in the string here for
this one, you can make it a little bit more
294:35 - elegant if you want to do that. But I have
a string here that I call home state. So that's
294:41 - the property that we're going to write to
the session storage. And this one should actually
294:45 - be called stayed like this. Then I'm going
to nest in another if statement here. You
294:51 - could do this in multiple ways. But I think
this one is more readable for this course.
294:57 - So that's why I have a nested if statement
here also. So if session state, we check if
295:02 - we have something here, then we're going to
set the state and give it the session state.
295:09 - And it's also important that we return because
we don't want to do anything else here, because
295:15 - otherwise it will fetch it from API also.
And this is all that we need to retrieve something
295:20 - from the session state, we make sure that
we don't check the session storage if we're
295:25 - in a search. But if we're not in a search,
we check if we have something here. And if
295:30 - we have something in the session storage,
we set the state with the form that we retrieved
295:35 - here. And then we return, we return early
from this use effect. Otherwise, it will work
295:41 - as before here. We set the state first with
the initial state to wipe it out. And then
295:46 - we fetch the movies from the API. All right,
save it, just make sure that everything works.
295:51 - And it does. So that's great. I'm also going
to wipe out the old session storage here.
295:57 - This one is from react dev tools. So when
you delete it, it will create a new one. Right.
296:03 - But we don't actually have something to retrieve
yet, we also need to write something to the
296:08 - session storage. So if we go down here below
our load more use effect, we're going to create
296:13 - another use effect. And I mark it with right
to session storage. And then I have my use
296:21 - effect like this. This one is going to have
a dependency rate. And it's going to write
296:29 - to the session storage when the search term
seniors and also when the state changes and
296:35 - yet Again, I checked if not search term. Because
if we're in a search, we don't want to write
296:44 - that one to the session storage. And this
is of course, optional. Also, if you want
296:47 - to, to save the search, you can do that also.
But I don't think that's a great way of doing
296:52 - it to have your last active search on the
homepage. So that's why. So if not, in a search
296:58 - term, we can set on the session storage. And
this is the same as before, if you want to
297:03 - store it in local storage, you change this
one to local storage instead.we have a method
297:09 - that's called set item, just as we had the
one that's called get item. In this case,
297:14 - we're going to set it the first argument is
going to be the name that we wanted to have
297:18 - in the sessions to session storage. And for
this one, I chose the name homestead, just
297:21 - as the one as I grabbed up here, really important
to have the same name. It's a hard coded string
297:30 - there, then the second argument is going to
be what we want to write to the state. And
297:37 - if you remember, I mentioned that we can only
write a string to decision storage and to
297:41 - the local storage. So we have to stringify
it. And we can do that with JSON, capital
297:45 - letters, dot stringify. And we give it the
state like this. And even if we didn't specify
297:53 - these ones first, you can see that it complains
that it wants to search term and the state
297:58 - now so this is the linting rules for hooks
that is included in create react app. So it's
298:02 - really great to have that one. All right.
So that's how we write to the session storage,
298:09 - save the file, go back to the browser. And
you can already see when I say the file it
298:16 - that it wrote the whole state here for us.
So we have the results here. And we can actually
298:21 - go back to the code and do some console logging.
So up here in the search and initial inside
298:29 - the if statement where we grabbed from the
session storage, we can console log, grabbing
298:36 - from session storage, like this. And down
below here, we can console log grabbing from
298:47 - API and save the file. And then if we go back
to the console, you can see grabbing from
298:55 - session storage. And if we reload the page,
it works, it grabs from the session storage
299:01 - all the time. And then go back to the application
here. And we delete the homestate in the session
299:08 - storage, go back to the console, reload it.
And now you can see that we grabbed from the
299:12 - API. So if we load some more movies here,
a few of them. And then we reload the page,
299:22 - you can see that we have them here, instantly.
And that's because we save it to the session
299:28 - storage. In the next video, we're going to
persist the state in the session storage for
299:32 - each individual movie. Okay, one more thing
to do with the session storage. And that is
299:40 - to store each individual movie in the session
storage. That's what we're going to do back
299:44 - in the code editor. So we're going to be in
the use movie fetch. And we only have one
299:49 - use effect in this one. So down at the bottom
of that one, we run that fetch movie function.
299:57 - And before we do that, we're going to check
if we have something in the session storage
300:01 - just above that one. Just as before, we create
a const that we call session state equals.
300:09 - But of course, first we also have to import
that function up here. To mark market with
300:15 - helpers, an import is persisted state from
dot dot forward slash help us. Yeah, I don't
300:28 - know why I did like this. Okay, to the right
of the equal sign here, we got to run is persistent
300:34 - state. And we're going to check for the movie
ID. Because each movie is going to be stored
300:40 - in the session state with its own ID. So that
will give us null or the actual state. So
300:46 - if session state, if we have a session state,
we're going to set the state and give you
300:56 - the session state. And then we're also going
to set the loading to false. This one because
301:03 - we setting it to true up here, when we start.
That's why we have to set it to false also
301:09 - Otherwise, it will keep on showing the spinner.
Okay, and then we make an early return, just
301:15 - as we did before. Otherwise, it will run this
function here that fetches the movies from
301:20 - the API, right auto format it and save it.
But we're going to create the use effect also
301:27 - for writing to the session storage. Right
this session storage then we create our use
301:36 - effect. With an inline IRA function, it's
going to have a dependency array. And it's
301:41 - going to change on the movie IDs change and
the state change. And these actually won't
301:46 - change because we're just grabbing data one
time for each movie. But as I told you many
301:52 - times before, you should specify all the dependencies
for each use effect. If there's something
301:58 - that won't work, because you specify them
here, you should handle it inside of the use
302:02 - effect. And that will make sure that you have
less errors in your application. For this
302:06 - one, we don't need an if statements, we can
write to the session storage dot set item,
302:12 - and we're going to give it the name of the
movie ID, each movie is going to be stored
302:17 - in the session story with its own ID, that's
how we separate them out. Then we have a comma
302:22 - and we give it the state. But just as before,
we have to run JSON stringify. State, because
302:29 - we can only write the string to the session
storage. All right, save this one and go back
302:34 - to the application. And here, you can see
that it already saved the movie here. So here's
302:40 - the movie for that one. So if we check this
one out, I think it's down below here, you
302:47 - can see that it will instantly grab that movie.
And if we choose not one, here it is zero
302:54 - rights to decision storage. And next time,
it will instantly grab it because this one
303:00 - here you can see where the loading spinner
on this once, but next time, we don't have
303:06 - to reload it. That's how you utilize the session
storage to persist the state in your application.
303:13 - In the next section, I'm going to show you
how to deploy this application, it's time
303:20 - to deploy the application. And for this course,
I'm going to show you how to deploy it to
303:24 - netlify. I think netlify is a great and very
easy way to deploy your react application.
303:30 - So that's why I'm not sponsored in any way
by netlify. I just like it. And I know that
303:35 - there's a lot of people that likes it also.
So I think netlify is a good choice for this.
303:40 - So the first thing you have to do is to create
an account at netlify, it's free. So make
303:45 - sure that you create an account. And that
will show you kind of a dashboard here, I
303:50 - have a lot of sites here now. So yours will
be empty if you don't have an account already.
303:55 - So make sure to create an account at netlify.
We will need it in the next video. So in this
304:01 - video, I'm going to show you how to create
a production build of the application that
304:05 - we're going to deploy to netlify. So back
into the terminal and create react app is
304:10 - really simple to use. It has a built in command
that we can use to build our site. So make
304:15 - sure that you're inside your application folder.
And then you run NPM, run build like this.
304:23 - And this will build the application for us.
As it says here, it will create an optimized
304:27 - production build for us. So that's great.
And it will place it in a folder that's called
304:32 - build. If we move inside our code editor again,
we can see that we now have this folder that's
304:38 - called build. And this is a complete site
in here. It's the it's the production build
304:43 - of our site, we have to do one small thing
here when we're deploying to netlify if we
304:47 - want our routing to work correctly, because
for example, I can show you here, this is
304:53 - the site here. If I go to this site and choose
a movie, grab this URL, that's the direct
305:00 - URL to the movie, and then paste it in here,
you can see that it works now. And that is
305:05 - because I created that little file that we're
going to do now. Otherwise it won't work,
305:10 - it will show an error here. And that's because
we using in with react router. So that's why
305:15 - we have to have that little file. So back
inside of the code editor. And inside a build
305:22 - folder at the root create a new file, the
name is going to be underscore redirects like
305:30 - this, it's very important that you name it
exactly like this underscore redirects. And
305:36 - then inside of that one, we're going to type
in forward slash asterisk, forward slash index
305:43 - dot HTML, space and 200. And this will make
sure that the routing will work in our application.
305:51 - So save the file. And now we ready to deploy
it on natla phi. So that's what we're going
305:56 - to do in the next video. I'm going to show
you two ways in this video how to deploy your
306:03 - site to nullify, and the first one is going
to be really easy actually. Because if you
306:08 - log into your account at nullify, and you're
at this dashboard side, down below at the
306:13 - bottom, you will have this little sewn here
where you can drop your site want to deploy
306:18 - a new site without connecting to get drag
and drop your site folder here. And this is
306:23 - really sweet with netlify actually. So if
we grab our folder, that's the folder here
306:29 - where the complete application is your working
folder with application, you have the folder
306:34 - inside of that one that's called build. So
make sure that To grab the build folder that
306:39 - we build in the last video, and just drag
and drop it here, you can see that netlify
306:45 - starts to build your site. And I actually
didn't have time to finish that sentence before
306:50 - it's published my site. So you have the link
here, it will create a randomly generated
306:55 - name, you can change that if you want to do
that, click this link. And you can see that
307:00 - your application is up and running. So that's
how easy it is to deploy, who would nullify,
307:06 - that's one way of doing it. Another way is
to use something that's called the netlify
307:11 - COI. And that's what we're going to do next.
So make sure to be inside of your terminal.
307:17 - So of course, you're going to be in the folder
where your application is, we've already built
307:21 - our application, otherwise, you have to build
it. So NPM, run build, and also add in that
307:26 - little file that I showed you in the last
video for the routing to work in nullify,
307:31 - then we're going to install the natla phi
COI, I have already installed it, but I can
307:35 - show you again, of course NPM, install netlify
dash c ally dash D. So that means that I install
307:43 - it globally. Alright, that installed correctly,
I'm going to clear my console. And then we
307:50 - can run nullify deployed like this. And then
you're faced with different questions here.
308:00 - So in this case, we're we're going to create
and configure a new side. So make sure that
308:05 - you navigate down to that one. And it's waban
Fox team, in this case, you will probably
308:11 - also just have one team to choose from. So
select that one. And then you can create a
308:16 - site name, if you want to do that. I won't
do that now. But you can also change it later.
308:21 - So we'll use the default and just press enter
here. And then it asks for the public directory
308:26 - down here. And if you remember, the Publish
directory is the build folder. So we type
308:32 - in dot forward slash build and press Enter.
And there you have it, but the site isn't
308:41 - actually live yet, because we now have the
opportunity to see if our site works. So you
308:46 - have a website draft URL, we can click that
one. and here we can try our application to
308:52 - see that it works before we actually go live
with it. Right, it seems to be working back
309:00 - to the terminal. And if we read here, we can
add the dash dash prod flag if we want to
309:06 - go live with it. So we run nullify deploy
dash dash prod and this will make it go live.
309:14 - Yeah, of course, I shouldn't have space, it
should be dash dash prod like this. And the
309:22 - public directory is just as before dot forward
slash build. And you are provided with a couple
309:31 - of URLs here. So this is the unique deploy
URL for this deploy. This isn't actually the
309:36 - live site. So this is the live site here on
this link, you can click that one and open
309:40 - it up. But I want to go inside of natla phi
and check that is actually here, you can see
309:47 - that is here. So you can click this one and
see if it works. And it works. And that's
309:55 - sweet. So that that is actually also quite
simple to do it in the terminal like this.
309:58 - So if you change something in your application,
you can deploy it very easily without logging
310:03 - into netlify from the browser. So you just
type in netlify deploy. And if you know that
310:12 - it works, you can flag it with prod like this.
And you can do this every time you change
310:16 - something on your site. Alright, in the next
video, I'm going to show you how to deploy
310:21 - with continuous deployment. That means when
you change something and push it to GitHub,
310:25 - I'm going to use GitHub for that one is going
to deploy it automatically. Okay, we're going
310:32 - to talk about continuous deployment on netlify.
Now, and that means that you can have, for
310:37 - example, in this case, I have a repository
on GitHub that I'm going to use for this one,
310:40 - I published my site here to get up and I'm
going to use this one for continuous deployment.
310:46 - And that means that when I push something
to this repository here, netlify will automatically
310:51 - build my site and publish it. So that's really,
really neat. Actually, just make sure that
310:56 - you add to Git ignore file to not upload the
dot m file. And also just one other thing
311:02 - you have to do, and that is the file that
we created in the build folder, you have to
311:07 - move that one inside of the public folder
instead, you can see that I have the underscore
311:11 - redirects in the public folder. And this will
make sure that this one is included when netlify
311:16 - builds the side. So that's all you have to
do and push it to your repository. I'm using
311:22 - GitHub, you could use Bitbucket or some other
service if you want to do that. So this is
311:27 - the complete side. Then I'm going to move
inside of nullified and I'm at my dashboard.
311:33 - You have something that's called new side
from get I'm choosing Get up because that's
311:38 - what I'm using. So it's authorized me here.
So you have to log in, then I can search for
311:43 - my name is RM DB version three. So I select
that repository. And we're going to build
311:51 - from the master. That's correct. The command
is going to be MPM run build. And we the Publish
311:57 - director is the build folder. So that is correct.
But we have one more thing to do, because
312:01 - we have an environmental variable for our
site. So we have to set that one up also Show
312:07 - Advanced. and here we can create a variable
new variable. So you can set the name here
312:12 - and the name is going to be react underscore
app underscore API underscore key, just as
312:18 - the one that we had in our application in
the dot env. file. Alright, there, we need
312:25 - to give it some value. And here, we can give
it the API key to the Movie Database API.
312:30 - So I'm obviously not going to show that for
you. So I'm going to paste that one in. And
312:33 - then I'm going to click Deploy site. So make
sure that you also paste in your key here,
312:38 - and then click Deploy site. And now we just
wait for it, it's going to build the site.
312:43 - So it will take a little bit longer now. And
hopefully this will work. And if we want to
312:47 - see the build log, we can also do that by
clicking here deploying your site, and it
312:51 - will show us the log. And there you have it,
the site is live, it says here, so we're going
312:59 - to try that out. Go back to our dashboard.
And here's the side. Click the link, we make
313:09 - sure that it works. And it does. And that
is great. Just going to make sure also, that
313:17 - these unique links work if we paste that one
in. Yeah, and it works. Sweet, sweet, sweet.
313:25 - This is how you publish on netlify. And this
also concludes the main part of this course,
313:30 - I hope you enjoyed it, there are some bonus
parts. In the next part, I'm going to show
313:35 - you how to use class components instead of
hooks. And then I'm going to show you how
313:39 - to convert this application into TypeScript.
And lastly, I'm going to show you how to use
313:44 - the login and vote system for the Movie Database
API. We're going to reflect our application
313:53 - into using class components instead of react
hooks. I actually don't use class components
313:58 - anymore. And I think a lot of people don't
do it. But the chances are that if you get
314:03 - a job as a react developer, you will work
with a code base that at least has some class
314:09 - components. So there's a lot of applications
out there that still has class components
314:13 - in it. And it's actually not even deprecated
from the React libraries. So it's a legit
314:18 - way of creating components in react. So in
some sense, it's a matter of preference. I
314:24 - don't think I ever will use them again, actually,
because I love hooks. And I always use functional
314:30 - components with hooks. But I want to show
you how to do it with class components also.
314:35 - And there's three components that we have
to refactor because we have three components
314:39 - with stadium. And that's the search bar to
home and the movie. And we're going to start
314:43 - with the search bar. So make sure that you're
inside index.js file in the search bar folder.
314:49 - And there will be a lot of errors and warnings
here when we remove stuff here now, but we'll
314:54 - fix that as we go along in this video. So
first of all, this one is a functional component,
315:00 - we want it to be a class component. And then
up here, instead of importing use state use
315:05 - the fact that you use ref, we can import something
that's called component like this. And instead
315:15 - of the const here, we delete all of this here.
And we create a class that we call search
315:24 - bar just as before the same name, and it extends
component. So if we did an important one up
315:31 - here, we had to specify extend react dot component,
this is a little shortcut you can do here.
315:38 - So we can remove these ones here. In a class
component, you have one class property, that's
315:45 - called state. And that is the only state holder
you have. So that's one. So that's one downside
315:50 - with classes. If you use you state and react
hooks, you can have as many states as you
315:55 - want to separate them out. Here we only have
one. So we have the class property. That's
316:00 - called state. And now you can see that I'm
not using the constructor like this. Because
316:09 - we don't need to do that Babel and Webpack
will make sure that it will be transpiled
316:14 - down correctly. So we have this class property
here. That's called state and it equals an
316:19 - object. We're going to have a property that's
called value, and it's an empty string. So
316:24 - that's the value for our input field in the
search bar. And then we also got to have a
316:30 - class property that's called timeout. And
we set that one to know right, the use effect
316:37 - we can use That one anymore. But we can reuse
this logic here for the timer. So I'll remove
316:44 - these ones for now. And in a class component
in react, you have something that's called
316:52 - lifecycle methods. And there's three of them
that you should know, that's probably the
316:56 - most used once you have one that's called
component did mount. And that's the one that's
317:01 - going to trigger initially in the component.
And then you have another one that's called
317:05 - component did update, and that's the one that
we're going to use now. And then you have
317:10 - the last one that's called component will
unmount. And that one is triggered just before
317:15 - the component will unmount. And in that one,
you can do some cleanups and stuff like that.
317:21 - But we're going to use to underscore component
did update. And you could do this in several
317:26 - ways, you don't actually have to use this
lifecycle method to get this to work. But
317:31 - I want to use it here to show you how this
lifecycle method works. So component did update
317:39 - like this, this one is going to give us the
previous props and the previous state. So
317:45 - I make an underscore prep props, we're not
going to use the props, because we don't need
317:49 - to check against the previous props. So market
with an underscore just to tell that we won't
317:54 - use that one. And then we have the prep state,
the prep state we will use. Alright, so that's
318:02 - the component did update lifecycle method.
And this one will trigger on each update on
318:07 - the component. So what do we want to do here,
now the state here with value is going to
318:12 - be the text that the user typed in, in the
input field, because this is a control component
318:18 - to keep it in the state. So we want to check
if this dot State DOT value, it's the value
318:26 - here. And as this is a class, we have to use
this. So this dot State DOT value, if that
318:31 - one isn't equal to the prep State DOT value,
we want to do something otherwise, we will
318:37 - go into an infinity loop here, and that's
no good, we check here, if the value in the
318:42 - state isn't the same as the previous one,
then we know that we should do something.
318:46 - All right. And then we have one prop that
sent in to this component, and we can destructure
318:52 - that one out. So const, it's called set search
term equals this dot props. So we destructure
319:01 - this one out from the props. Because we send
in this function here, that's going to trigger
319:06 - when we do a search, then we have a timeout.
It's the one here to copy this one, move it
319:13 - inside of there. Instead of const timer, we're
going to set this one to this timeout that
319:20 - we created up here. So this doc timeout, is
going to equal this one here. And the first
319:26 - thing we also have to do is to clear this
timer, so clear timeout, this stop timeout,
319:33 - and this is why I have this appears so that
we can access it here and clear it before
319:37 - we do something else. Alright. And inside
of this timeout here, we're going to grab
319:45 - our state value. And we can also destructure
that one out. So cost value equals this dot
319:54 - state. So we grabbed that property from our
state. And instead of the state here, we give
320:01 - it the value like this. So every time we type
something in, we're going to set the state
320:10 - and that will update the component, and it
will trigger this one, we cleared the current
320:15 - timeout and then we set a new one. And at
every 500 milliseconds, we will trigger this
320:20 - search function just as we did before. Then,
in the class component, we have a render method.
320:30 - And inside the render method, we can return
this logic here, we can grab this one, turn
320:37 - it out and paste it inside a render method
like this. And this one, we have to change
320:47 - this one, this dot state value. And also when
we set the stage this one is incorrect here,
320:57 - we should specify this dot set state. And
our state will look like this we have an object
321:08 - like this URL, we have appropriately this
called value. And the value here is going
321:13 - to be the same. And now you can see we don't
have any errors in this component. And that's
321:19 - great. If you want you can also destructure
this value out up here just before the return
321:25 - statement, cost value equals this dot state
like this, and then we can use the value like
321:36 - this instead. Save the component, go back
to our application, make sure that you're
321:43 - running the application, then we can try if
it works, and it's working. So it works exactly
321:52 - as before, we're just using a class instead
now. So this is how we refactor the search
321:58 - bar to a class component instead. In the next
video, we're going to refactor the homepage.
322:07 - We refactor the search bar into a class component.
And now we're going to refactor the home component.
322:11 - So make sure that you're inside the home.js
file. And first, we can remove this hook here,
322:18 - like this, and up here, we're going to import
the component and the home function, we create
322:28 - a class called home that extends component
like this. And the use on fetch, we're not
322:36 - going to use that one, we're going to copy
that logic and use it inside of this component
322:41 - instead. So we have our state equals an object.
And I'm going to have a property for this
322:50 - one, that's called movies, that's going to
hold the array with all the movies. And I'm
322:55 - going to give it the initial state. And this
one, we have that one inside of our hooked,
323:01 - that's called use home fetch. So copy this
one. And we can paste it in maybe here, he
323:13 - need she stayed, he need to stayed. Yeah,
it shouldn't be a see my column, because this
323:22 - is no big. So we have a comma. And then we're
going to have the search term, because now
323:27 - we have everything in the same state. We can't
separate them out, then we have is loading
323:39 - more is going to be set to false initially.
And we have loading is also going to be set
323:45 - to false. And we'll have the error false.
So this is how the structure of a state is
323:51 - going to be. Yeah, I said I did this one is
going to be an array, but it's going to be
323:55 - an object. And then we'll have the results,
that's going to be an array that holds all
323:58 - the movies. So you can structure it however
you want. This is the way I choose to structure
324:03 - it the movies is the data that we get back
from the API, and the other ones are the ones
324:08 - that we create ourselves. All right. Then
we're going to make some room here and go
324:16 - back to the use home fetch hooked. We have
our fetch movies function here, to grab that
324:22 - function. Everything, copy it, go back to
the home.js file and paste it in here. Below
324:33 - the state, we have to remove const. That's
movies, it's the same here. Here, we have
324:42 - to do something else, because we don't have
the state as separate states. Now, to remove
324:46 - these ones. And this doc set stayed, we have
our object, we set the error to false. And
324:53 - we set loading to true like this. And here
you can see we only changing the properties
325:01 - that we want to change, React will merge the
other ones automatically. And this is actually
325:06 - different from how the state works in a functional
component with use state. With the use state
325:12 - hook it won't merge the old Stadium, they
also have to make sure that you also provided
325:16 - one if you want to keep it. But in this case,
we changing the error and the loading here
325:21 - and other ones will stay the same. So this
is how it works in class components. All right,
325:27 - we have our movies, this one is going to be
the same. The set state is going to be quite
325:33 - different now. First, I'm going to spread
out the previous state. And then I gotta have
325:41 - my movies properties. Because inside of this
movies property that we created up here, we're
325:47 - going to place everything that's returned
from the Movie Database API. And that's the
325:53 - stuff that we have here, I'm actually going
to remove the sidebar also. So move this one
325:58 - up inside of the movies object here. So we
spread out the previous movies and never have
326:04 - the results. And then we check if the page
is greater than one just as before. But here
326:10 - we have to change this one because from the
previous state, we also have to go inside
326:14 - the movies property, like this. So prep dot
movies dot results. The movies dot results
326:21 - is going to be the same here because this
is the new data that we grabbed from the API,
326:25 - so we merge that one. This one is also going
to be the same. So this is our set state for
326:32 - the movies and then below we have a coma and
then we set loading False. And then inside
326:44 - of the catch, we don't have a set error. So
this set stayed. We set the error to true.
326:54 - And we also set the loading to false. Like
this, we can remove this set loading here.
327:04 - This is our fetch movies method. That's called
a method. Now because we're in a class, then
327:12 - we don't have the use effect here to trigger.
So we're going to have a few functions here,
327:16 - we're going to have one that's called handle
search. equals, we have the search term, or
327:24 - create an arrow function for this one. And
when we search for something, we're going
327:28 - to call this set state parenthesis and we
have our state object movies, we're going
327:36 - to set the movies to the initial state just
to reset it just as before. And then we also
327:44 - give the state the search term. And as this
is a sixth syntax, we don't have to specify
327:48 - it like this, it's enough to just specify
search term when the name is the same. Okay,
327:56 - so we set this state and when we have set
the search term, and also reset the movies
328:00 - to the initial state, we want to do something
when that state has updated. And in a react
328:06 - class on the set state, we have a callback
function that we can use that will trigger
328:11 - when the new state is set. So we have a coma,
and I create an inline arrow function here
328:18 - and go on another row here. So then we want
to fetch the movies, this dot, that's movies.
328:25 - And we give it the one because we're fetching
from page one, this dot stayed. And we give
328:32 - it a search term, like that. And we can actually
remove those curly brackets, I don't think
328:38 - we need them. If we don't want to have them,
it's up to you to decide. All right, so that's
328:45 - the search, then we have the handle handle
load more function. And it's only going to
328:50 - be an arrow function like this. And I'm going
to type it in on another row, this dot fetch
328:56 - movies. And from this dot State DOT movies,
we have the page. And we're going to add one
329:03 - to the page, because now we're grabbing the
next page. And then we give it the start state
329:09 - the search term. So we also provide a search
term if we're in a search, right? We can actually
329:19 - auto format it yet, because there's some arrows
down below here. So we're going to create
329:23 - a random method. And then we're going to move
this one this logic here, inside of the random
329:35 - method, like this. And then we have a few
things to correct here. So first, I want to
329:47 - destructure out some stuff from the state.
So up here, as the first line in the render
329:53 - method, I have a const. I destructuring. out
the search term movies, loading and error
330:03 - equals this dot state. All right, so that
will fix a few things. Here, we have to change
330:14 - stayed, because it's going to be from the
movies dot results. And I do that on all three
330:23 - of these movies. And instead of set search
term on the search bar here for that Prop,
330:33 - we're going to give it this dot handle search.
And here instead of state, we're also going
330:40 - to map through the movies dot results. Down
below here, we change state. The movies on
330:49 - this callback here is going to be this dot
handle load more instead. And now we can auto
331:00 - format it. And hopefully we won't have an
error. But there's one more thing that we
331:04 - have to do. Because it won't fetch anything
yet. Yeah, of course, I have to have this
331:11 - dot set state. And I haven't imported API
either. So go back to the US home fetch. Grab
331:23 - this one up here, copy and go to the home.
We can paste it in here. And this will get
331:30 - rid of all the errors, but we're not actually
fetching anything. Now, if we save this one,
331:36 - go back to the application. You You can see
that it's, it's empty here, because we won't
331:40 - we don't trigger on the thing, we need to
have a lifecycle method to trigger when this
331:45 - component mount. And we have a lifecycle method
built in for that. It's called component did
331:54 - mount. So we call that one and inside, we're
simply going to invoke this dot fetch movies.
332:01 - And we give it a one, because we want to grab
the first page or format it and save it, go
332:08 - back to the application. And now you can see
we have our data and our movies here. And
332:14 - hopefully, everything works as it should.
Yeah, it works. So that's how you do it. And
332:24 - yet again, the app will look exactly the same
here, we have the same functionality in the
332:29 - application itself. But we have refactored
the homepage, to use the class component instead.
332:35 - And as you can see, I think there's a lot
more code here. And I think it's actually
332:40 - not that easy to separate out things. So that's
why I prefer to use functional component and
332:46 - the use state hook can use effect instead.
I don't really like this way of doing it anymore,
332:53 - especially with the state because you have
to nest a lot of stuff here. As you only have
332:57 - one state, it's much easier when you can separate
them out into different states as you can
333:02 - with the use state hook. Alright, just one
more thing to do in this section. And that
333:07 - is to refactor the move a component to use
a class component instead. And that's exactly
333:12 - what we're going to do in the next video.
We're almost finished with a refactoring into
333:18 - class components, we only have the movie page
left to do. And we're going to do that right
333:23 - now. So go back inside of the code editor
and the inside a movie.js file. And for this
333:29 - one, we're actually going to do a little special
thing here. And that's because we are using
333:33 - this hook here, use params. That's from react
router, version six. And there's actually
333:39 - no good way of grabbing the params in a class
component with react router, they have completely
333:45 - removed that functionality. And they do not
support that for class components. That's
333:50 - why I'm going to do a little trick down below
here at the bottom, just above where we export
333:55 - this one here, we're going to create the functional
component for this one const. movie with params,
334:03 - like this, and then it's gonna take in some
props, we have an arrow function, actually
334:09 - going to remove the sidebar again. And then
we have our movie component that we have up
334:15 - here. So this one is going to spread all the
props that this component receives that way,
334:21 - we can have more props, if we want to do that.
So we just pass them along to the movie component.
334:28 - Then I'm going to create a prop that's called
params. And inside here, I invoke use params,
334:34 - like this. And then instead of exporting the
movie itself, I'm going to export movie with
334:43 - params. So what I'm doing here is creating
a wrapper component that will show the movie
334:49 - class component and also provide it with the
params for us. So that's the best way I found
334:55 - of doing this actually, there may be some
other solutions also. But I think this is
334:59 - actually kind of neat, because you can do
it on one roll like this, before you have
335:04 - something that's called with router that you
can wrap your component with. But that's actually
335:08 - not provided in the React router Dom or in
the React router library anymore. So that's
335:14 - why I have to do it like this. Alright. So
let's reflect to this one, we're going to
335:21 - remove this hook here. And we can also grab
from the use movie fetch hooked, we can grab
335:29 - the API import. And I'm going to paste that
in the movie up here somewhere, maybe there.
335:37 - And we're not going to use that hook anymore.
And of course, we have to rename this one
335:45 - also. And up here, we're going to import component
just as before, and we rename this one we
335:55 - create a class class movie extends component.
This one, we can remove that one also. And
336:06 - we can actually create a render method right
now and move this logic inside of 
336:15 - that one. Something like this. All right,
now we have some serious refactoring to do
336:22 - here. So first, we're going to create our
state. Whoever class property state it's an
336:31 - object movie. I'm going to set that one to
an empty object to start with. Then we'll
336:37 - set Loading to true and error to false, like
this. All right, that is the modal formatting
336:49 - there also, then from the use movie fetch
hook, I'm going to copy this fetch movie function
337:00 - like this. For this one, I'm not going to
implement the session storage. So I'm just
337:04 - copying this one here. And I didn't do that
in the home component either. Right pasted
337:11 - in here in the mover component, we remove
the const from fetch movie. Let's just before
337:18 - we have to refactor this one, this one becomes
this set stayed parenthesis and we have our
337:26 - object error is going to be false. And loading
is going to be true like this. And then we
337:33 - can also destructure out or or Prop, because
we're sending that in with that special little
337:39 - component that are created down here. So now
we have access to a prop, that's called params.
337:46 - So destructor that one out, because we're
going to need the movie Id like this equals
337:53 - this dot props, dot params. And that will
grab that one for us. All right, these ones
338:01 - are going to be the same. This one also set
state we have to change this one, this one
338:06 - also this dot set state, and the state is
going to be movie, we have that property,
338:14 - it's an object. So we move these ones up inside
of that object. And then we have a coma. And
338:22 - we set the loading property to false like
that. That should be if we're not one, we're
338:30 - going to remove the set loading. And here,
change the set error to this dot set state.
338:36 - parenthesis and object error. True and loading
the false. All right. And I think that's it
338:50 - for that function. And then we're going to
have a lifecycle method also, for this one,
338:55 - the component did mount we're going to do
something when the component mount, and the
339:00 - only thing we're going to do is to invoke
this dot fetch movie. And then down below
339:06 - in the render function. We can destructure
out from our state const. We have our movie.
339:16 - We have the loading, we have the error. And
that's it. Then we grab them from this stuff
339:23 - stayed. And hopefully, it will work here now.
Yeah, I think that's fine. There's a more
339:30 - formatting. And let's see if it works. We
save the file, go back to the application.
339:40 - is grabbing from the session storage? No,
I think. Yeah, it works. So that's sweet.
339:57 - We have successfully refactored this application
into something that what I think is a worse
340:02 - application because we use in classes. Now,
I wouldn't do it like this, I would keep the
340:07 - functional components and the state with hooks,
and the use effect and the use state stuff
340:12 - that we use in the application. But it's up
to you to decide that. But hopefully this
340:17 - gave you an idea on how class components works
in react, and to keep state in class components.
340:23 - And the lifecycle methods. There's more lifecycle
methods, but I won't go into them here because
340:29 - I'm not using them in this application. So
that's why all right, in the next bonus section,
340:34 - I'm going to talk about TypeScript. And we're
going to refactor our application into TypeScript.
340:41 - Welcome to this bonus section, where we're
going to reflect your application into using
340:46 - TypeScript. And TypeScript itself is quite
a large topic. So we will only scratched the
340:51 - surface actually. But hopefully, that's going
to be enough to give you a basic understanding
340:55 - of how TypeScript work and especially with
react. So TypeScript is an extension of JavaScript.
341:02 - And it adds types to JavaScript. So that's
great, because JavaScript is actually quite
341:07 - a loose language where you can do whatever
you want, and it still works. So it can be
341:11 - a little bit messy if you're in a large application.
So TypeScript will transpile down to JavaScript
341:17 - in there. And so that's why, as they say here,
all valid JavaScript code is also TypeScript
341:22 - code. So you can decide how much you want
to type stuff and how strict you want to be
341:27 - with TypeScript. And TypeScript is gaining
a lot more ground. And it's almost a standard
341:32 - today, when you create something from scratch.
A lot of applications, of course, don't use
341:36 - TypeScript, as they are And there's a lot
of code base out there that hasn't been refactored.
341:41 - And you probably shouldn't do it for all of
the applications either. But TypeScript is
341:46 - great if you have quite a large application,
and you want to keep track on types. And it's
341:51 - really great also, because it's kind of like
to have a second coder beside you, that tells
341:56 - you what you do wrong. Meanwhile, your code.
So it's a great way to write a lot more error,
342:02 - less code. I think that's one of the great
things with TypeScript because you have a
342:06 - really powerful IntelliSense with TypeScript,
and it will tell you if you do something wrong.
342:10 - All right, that was a really short introduction
to TypeScript. In the next video, we're going
342:15 - to set up a project and start refactoring
our application into using TypeScript. Alright,
342:23 - let's start refactoring our application into
using TypeScript. And I'm actually going to
342:27 - create a complete new application with create
react app. And that's because you can also
342:32 - create an application with TypeScript support,
and it gives you some defaults and setup that
342:36 - we can use. So we don't have to do that ourselves.
If we look here, with create react app, we
342:42 - can flag it with template and TypeScript.
And that will create our application with
342:46 - TypeScript support. So that's what we're going
to do first. So make sure that you're inside
342:50 - a folder where you can create a new project,
and then go inside a terminal. And that's
342:55 - going to show you this also. And then we type
in MP x, create dash react dash app. And then
343:02 - we name our application, React dash or IMDb
dash, Ts. And I think you also must have only
343:10 - lowercase letters in the naming. Then we flag
it with template type scripts, like this.
343:18 - And we press enter, and we wait for it. Alright,
that's the bootstrapping of the application
343:24 - itself. So let's navigate inside of that folder,
CD, React dash or IMDb dash Ts. And you can
343:32 - see that we have some different files here.
So that's great. Well, one more thing that
343:37 - we need to do before we can start coding,
and that is to install our dependencies in
343:41 - this TypeScript application, also, to have
the style components. And we also have the
343:46 - React router. So let's start with the style
components, MPM, I style dash components.
343:52 - And as this is a TypeScript project, we also
need the types for style components. And if
343:57 - a library won't provide you with types, by
default, you can usually find the types in
344:02 - AD types forward slash, and then you can type
in the name of the library that you're installing.
344:07 - So in this case, it's going to be ad types,
forward slash styled dash components. And
344:14 - we'll press enter. Alright, so that installed
correctly. And then we also need to install
344:19 - the React router, the next version, the version
six and the types for that one. So MPM I,
344:26 - if you remember, we also install a library
that's called history, that one is used for
344:30 - react router, history, space, and then we
have the React dash router dash dome at next,
344:38 - just as before we grab in your next version,
and that is the version six, then we have
344:42 - a space. And we're going to grab the types
for this one also. So add types, or a slash,
344:48 - React dash router, dash dome, and we press
enter. Alright, so that's the dependencies
344:56 - we need for this product. But there's one
more thing we have to do, because now we have
345:01 - bootstrap this new TypeScript application.
But we want our old files inside of that one.
345:07 - So if we look here, here's the file for this
project. I'm also showing the hidden files
345:12 - here. So we have the Git and Git ignore. So
now inside of this src folder, here, we have
345:18 - all the TypeScript files. But we want our
files instead. And therefore, we can actually
345:25 - remove some of those files here, we don't
need to set up tests, we don't need a service
345:31 - worker, we don't need a logo index CSS app,
we can still keep the index actually, because
345:37 - that one is already set up for us. The other
ones we can delete. So just keep the index
345:42 - TSX and the React app and the.ts. And remove
the files. Like this. And then from our finished
345:53 - application, I'm using the hooked version
now. So not the class based one, use the hook
345:58 - based one. And we're going to grab from the
src folder, the API app components, config,
346:04 - global style helpers, hooks, images, everything
except the index.js file, copy these ones,
346:11 - and go inside the src folder of the newly
bootstrapped TypeScript project and paste
346:16 - them in. And the application won't work now
because we have to do a lot of stuff here
346:21 - to get it to work, but that's fine. There's
one more thing we have to do also analysis
346:27 - to copy your dot m file 
like this or if it says that you can't copy
346:38 - it because it's hidden, you can create a new
dot m file and set up your environmental variable
346:43 - for the Movie Database API there again, so
just copy. So just copy that code from your
346:49 - other m file and create a new one and paste
it in. Because it's really important, because
346:53 - we need that one to be able to fetch data
from the Movie Database API, we have copied
346:58 - all the files that we need for our TypeScript
project. And that means that we can close
347:03 - the other project and we're going to be in
the new project from here on. In the next
347:07 - video, we're going to convert this base files
here, the API, app config, global style helpers,
347:13 - and stuff like that into TypeScript. And then
we'll move on with the components and the
347:18 - home and the movie page. Okay, before we do
anything, I have to correct the mistake I
347:25 - did in the last video. And that is the dot
m file, it shouldn't be in the src folder,
347:30 - it should be in the root folder. So move this
one out to the root folder of your project.
347:37 - And make sure that it's outside the src folder,
otherwise it won't work, we can go inside
347:42 - of our terminal and try to start a project
up, we will get an error or probably a lot
347:47 - of them. As you can see, because we haven't
actually converted anything into TypeScript
347:53 - yet. So that's why. So first in the index
dot TSX file, we have to do some cleanup,
347:59 - we're going to remove the index dot CSS, we're
going to remove the ServiceWorker like this,
348:06 - and save the file. And then we have something
that's called react dash app, dash m.ts. And
348:13 - this is the references for the types for react
scripts. So we'll leave this alone. And also
348:18 - we have something here that you can see that's
called Ts config dot JSON. And this is the
348:22 - the config you can set up for TypeScript.
So this is why I wanted to bootstrap the application
348:28 - with create react app, because they already
set this one up for us. So they have a lot
348:32 - of great defaults here, that set up for us.
And if there's something special you want
348:37 - to configure for TypeScript, you can do it
in this file. So you can add them here, it's
348:41 - actually a lot you can do to set it up just
as you like it. But we're not going to do
348:46 - that we're going to use the defaults that
create react app provides for us. So we cleaned
348:51 - up the index dot TSX file. And we're going
to refactor all of the other files here in
348:56 - this video. So we can start with the api.js
file, we have to rename it, we're actually
349:01 - going to rename all of these files. Because
they they should be called.ts. So that it
349:08 - indicates that it's a TypeScript file, so
we renamed them to.ts. Instead, all of these
349:18 - files is going to be.ts. The app is actually
going to be dot TSX. And that's because we
349:26 - using JSX, inside of that one, otherwise,
it won't work. So every time you use JSX,
349:34 - make sure that you have the file extension
dot TSX. Otherwise, type TypeScript will fail.
349:41 - Alright. So that's the renaming of the files.
And then we can start in the api.ts file.
349:48 - And for this one, we're actually going to
create some types because we returning data
349:53 - from the API, and we need to type that data.
But first, we can start to actually type the
349:59 - functions themself. So here, you can see that
it complains, no parameter search term implicitly
350:04 - has an any type. And that's because we haven't
set any type. This one, if we want to specify
350:10 - a type on this parameter, we use a colon.
And then we specify it as a string. And you
350:20 - can see that it stops complaining now. And
that's great. And the page, this one is actually
350:24 - going to be a number. So we specify it as
a number. So that's how you specify parameters,
350:31 - you have a lot of types you can specify for
them. And then if you want to specify the
350:35 - return type on the function, you can see that
TypeScript actually won't complain out because
350:40 - the default setup don't force us to specify
a return type. But I want to show you how
350:46 - we can do that. And in this case, it's a promise
that we return because we're fetching from
350:50 - the API and we get back a promise. So if we
want to type the return type to be a promise,
350:56 - we have a colon here. And then we specify
it as a promise. But the promise needs something
351:02 - else you can see here represents the completion
of another, blah, blah, blah, generic type
351:07 - promise requires one type argument. And when
you send in a type argument type like this,
351:14 - you do it inside of angle brackets, and we're
going to specify that this is going to be
351:19 - the type of a new type that we're going to
create. That's called movies. We haven't created
351:25 - this one yet. So of course, it complains.
So we're going to do that in a second. We're
351:30 - only going to specify this const here also,
the endpoint that we create here. We have
351:35 - a colon and then I type it as a string. So
that's how we typed this function. And now
351:41 - we're going to create a type. That's called
movies. And the actual data that we get back
351:47 - from the API is, it has a lot of properties.
So I'm only going to type the properties that
351:51 - I'm actually using inside of the application.
So we can mark it with types here. And then
351:57 - I got to export this type, because I'm going
to use it in another file. So that's great.
352:02 - You can also export the types, you don't have
to specify them all over the place, you can
352:07 - specify them in one file, and you can export
them and import them wherever you need them.
352:12 - So export type movies like this. And from
the API, we get the page. And that one is
352:25 - going to be a number, you could also create
something that's called an interface. And
352:30 - then you do it like this. They are almost
the same today, in the new versions of TypeScript
352:37 - before there was some major differences. Actually,
the recommendation is to use type in a react
352:43 - application. So we're going to do that. So
export type movies and then equals and the
352:50 - object, then we have the results. And the
results is actually going to be all the movies,
352:55 - we're going to specify another type, that's
called a movie, that's a singular movie. And
353:00 - this one is going to be an array. So it's
going to be an array of the movie type. So
353:06 - this is how we specified our array. So if
you had an array, for example, with only numbers,
353:11 - you can specify it like this. But we are going
to create another type object, that's called
353:16 - movie. And we're going to do that in a second.
But first, we're also going to type the total
353:22 - pages, it's going to be number. And then we
have the total results, that one is also going
353:30 - to be a number. Do some more formatting. And
you can see in the type of bacteria that it
353:39 - uses see my colon and not coma as in a regular
JavaScript object. I actually think it will
353:44 - work with coma also. But the formatting is
set up, so that it uses see my column, but
353:51 - you can see that it, it seems to be working.
But when I want to format it, yeah, it will
353:56 - return to the semi colons. Okay. All right.
So we need to specify each specific movie
354:02 - here. So we create another type that I export,
export type movie equals an object. And here
354:11 - we have a few more of the different properties.
So we have the backdrop underscore path is
354:20 - going to be a string, the ID is going to be
a number, the original underscore title is
354:29 - going to be a string, the over view is going
to be a string, it's easy to have a typo here.
354:38 - So be careful. popularity is going to be a
number, poster underscore path is going to
354:48 - be a string, the title is going to be a string,
the vote underscore average is going to be
354:58 - a number. And the vote underscore count is
going to be a number, the budget is also going
355:07 - to be a number. And then we have the run time,
it's the number also and and the last one
355:13 - is the revenue. And it's also going to be
a number. So that's the type of object for
355:20 - a singular movie. And now you can see that
it won't complain here, because we using that
355:25 - one and telling the results is an array of
the type movie. So each element in the array
355:32 - is going to be an object of this type. So
that's how we specified it now. All right,
355:40 - and you can see that it won't complain here
now, because we using this type here, the
355:44 - movies, so that's fine. Then we move on to
the fetch movie, the singular fetch. For each
355:50 - movie, we have this parameter here. So we
have to use parentheses. When we type this,
355:57 - the movie ID is going to be a number. And
the return type is going to be a promise again.
356:04 - And this time, it's the movie, we already
created this one because it's a single movie.
356:08 - So we have this object here. So that's great.
And we can also specify the endpoint, you
356:14 - can see that it won't complain because the
default setup won't force us to specify everything.
356:19 - But it's always a great ID to specify what
type you return in the context. All right.
356:25 - So that's the fetch movie. And you can see
also bonus material for login. We're not going
356:31 - to type this one. So I'm going to stop here
for the basic fetch functions here. So fetch
356:37 - credits We have the movie ID, that one is
going to be a number, like so. And it will
356:45 - also return a promise that we create a type
that called credits. But before we do that,
356:57 - we can also specify the credits endpoint as
a string. All right, then we go up here, again,
357:04 - just below the type movies, we're going to
export the type that's called credits, it's
357:10 - always a great idea to export the types because
you never know when you need them. That way,
357:16 - you make sure that you can access them from
anywhere in your application, the ID is going
357:21 - to be a number, the cast, we're actually going
to create a new cast object for that one.
357:28 - So it's going to be an array with an object
that we specify as a cast. And we're going
357:32 - to do that in a second, we have the crew,
and it's also going to be a new type object.
357:37 - So an array of crew like this. So up here,
we export the type to cast equals, we have
357:50 - the character is going to be a string, the
credit underscore ID is going to be a string,
358:00 - the name is going to be a string. And a profile
underscore path is also going to be a string.
358:09 - If you want to type these in one row, instead
of typing them out, when all of them going
358:14 - to be a string, you can do it like this. You
have a square bracket, and then you have the
358:21 - property, the property is going to be a string.
And then the type is going to be a string
358:28 - like this. And this will also work. But I
think it's better to be more explicit and
358:36 - type all of them like this, then we have the
crew. So export type, crew equals object job
358:45 - is going to be a string name is also going
to be a string, and the credit underscore
358:52 - ID is going to be a number or to format it
and save it. And hopefully this will work,
359:00 - you can see that it will, it will give us
some arrows here now because I won't type
359:04 - this one here. Or is it only Yeah, I can actually
just type this one. So we don't have an error,
359:10 - the request token is going to be a string.
The username is also going to be a string.
359:17 - And the password is also going to be a string
some more formatting, and then we have them
359:22 - on the wrong row. So that will get rid of
the arrows. But we won't focus on these below
359:28 - the bonus material, all of these ones here.
So that's what we're doing. Alright, save
359:35 - the file. So that's the api.ts, then we'll
have our app dot TSX file. You can see here
359:42 - now that it complains, because we don't have
the types for this one. And that's because
359:46 - we're using the next version. So in this case,
I'm just gonna ignore it, because I know it
359:52 - will work. So when you ignore something with
TypeScript, you can do that by command and
359:57 - n at Ts dash ignore. And that will get rid
of that error. So we have to do this for now,
360:04 - before it is officially released, then they
will provide the types for it. And then we
360:08 - don't have to do it like this. And the only
thing we have to do more is to specify our
360:13 - react component. So this is a functional component.
And if we do a colon, and react.fc, we have
360:20 - that built into react. So we have that type
for a functional component. So this is everything
360:25 - we have to do to specify this as a react functional
component. Alright, save the file. Then we
360:32 - have the config.ts file. And the only thing
we have to do here, if we want is to specify
360:39 - those strings, because all of them is strings.
This one can be undefined also. So yeah, well,
360:45 - we can do it, API URL colon string, this one
colon string. And if it can have more than
360:53 - one value, we can have this pipe. And we specify
it as undefined also, because you can see
360:58 - if I remove this one here, it complains because
it tells us that type string, undefined is
361:04 - not assignable to type string, because we
saying that it can only be a string, but it
361:09 - can actually also be undefined. So TypeScript
tells us that Yeah, you're doing something
361:14 - wrong here. So this one could also be undefined,
so you should do something about it. So that's
361:20 - what we're doing here. Pipe undefined, like
this, and it will be happy and all of the
361:26 - other ones will be strings here. So I'm just
going to do it quite fast. string, string
361:36 - string Spring lists one here, a string and
this string and the last one a string. Right,
361:50 - save the file. That's the config. And then
we have the global style, we don't need to
361:56 - do anything inside of here, this is a start
component. So it's fine like it is now, the
362:02 - helpers.ts here, we're going to start this
ones up also. So here we have this time puram.
362:09 - So we create parenthesis. And this one is
going to be a number. But the return type
362:16 - of the function itself is going to be a string.
So we type it like this, and ours is going
362:23 - to be a number. And the means is also going
to be a number. So that's it for that function,
362:31 - then we have to convert money, parenthesis,
it's going to be a number, and it's also going
362:40 - to return a string. And this one is a special
one. So you can see that this format here.
362:48 - The type is actually this one here into into
DOT number format, international number format.
362:55 - So copy this one. And we can actually specify
this as a type also for it. Like so. Then
363:05 - the last one inside of this file, is the state
name. This one is going to be a string. Jason,
363:12 - of course, has an Annie type as a return type,
we can specify Annie, it shouldn't actually
363:18 - complain here. Yeah, and that's because this
is named the wrong way. Here it should be
363:23 - session state. So that's why. So JSON dot
parse, has an any type. So that's why we have
363:31 - to specify it as Annie, you should avoid specify
anything as Annie, because you remove all
363:37 - the type checking here when you specify it
as any, because you're saying that it can
363:40 - be of any type. So always make it a habit
to not use any if you can do only use it in
363:47 - specific case like this one, because this
one will return. And that's why we have to
363:51 - specify it as an ID. And that's it for these
files. Here, we can start up our application
363:57 - to see that it works NPM start. And it seems
to be working. So that's sweet. In the next
364:10 - video, we're going to refactor the homepage
to use TypeScript and also the components
364:14 - that we use on the home page itself. Alright,
let's continue to refactor the application
364:21 - into TypeScript and move inside of the component
home dot j s, we're going to rename this file
364:28 - to Ts. And also I can tell you that if we
look here in the terminal, I don't run my
364:33 - dev environment, because when you change the
file names, it will break. So you'll have
364:37 - to restore it again. So that's why I'm going
to start it up later. But if some stuff don't
364:42 - work, because I've changed some file name,
or things like that, try to break it and start
364:47 - up your dev environment again. rights are
renamed the home Ts like this. And then inside
364:56 - of that file, the only thing we have to do
here is to specify this as a react dot functional
365:02 - component react.fc. And you can see there
actually made a mistake here, this one shouldn't
365:07 - be Ts, then it won't work because we have
gay sex here. So this one should be dot TSX.
365:13 - So change that one to home dot TSX. And then
it will work hopefully, here we have some
365:19 - stuff that it complains about. And that is
because we haven't typed anything yet in our
365:24 - hooks that fetches that data. So if we move
inside of the hooks, and use home fetch, first
365:31 - we rename this file to.ts. Here, we're not
using any Deus Ex, so we can name it to.ts.
365:36 - Okay, the first thing we have to do here is
to import the type movie. And we do this inside
365:43 - of curly brackets, because this is not the
default export. And then it complains here
365:50 - on the page, this one is going to be a number
and a search term, it actually interprets
365:57 - this one as a string, because we set it as
a default string here. So we don't have to
366:01 - specify anything more here. But it complains
about the state. And that is because if we
366:06 - hover over this use state, you can see that
results is set to never it doesn't know what
366:10 - type this will be. That's why we can specify
it as movie and an array. So we're telling
366:17 - it that we're setting this to an empty array,
but it should interpret it as a movie array.
366:22 - So that's why we imported it up here. And
that's why we also get the types on the state
366:26 - correctly here. So in the home, you can see
that the warnings has disappeared because
366:31 - now it knows all these types because it interpreted
from this hook here as we telling it that
366:37 - this state is Gonna be of this type. And then
it follows along inside of this file, that's
366:43 - super great. Say the home also, then we're
going to refactor the components that we're
366:50 - using for the home component. So we have the
bottom. So in the index.js file, that one
367:00 - is going to be renamed to index dot TSX. And
the style file is going to be renamed to.ts.
367:09 - Because we're not using any JSX inside of
that one. And for a style file, we don't need
367:14 - to do anything there. But in the index dot
TSX file, we have to do some stuff, because
367:20 - now we have some props here. And we're also
going to remove prop types. We don't need
367:24 - that one when we're in TypeScript. So remove
everything that has to do with the prop types,
367:29 - then here are going to specify types. And
I created a type that are called props. You
367:35 - can call it whatever you want, it doesn't
need to be called props. So we have the text
367:40 - prop here, text, that's going to be a string.
And then we have the callback, then I'm going
367:47 - to type this very loosely, it's going to be
a function that returns nothing. So when we
367:54 - specify to void because void means that it
won't return anything. So this is a click
367:58 - callback. All right, but it still complains,
we have created a prop object. So we have
368:05 - to specify the button as a react dot functional
component react.fc. And if we want to specify
368:11 - our props, we can do that inside of angle
brackets. And then we use our props object.
368:17 - And then you can see that it works. It knows
the types now of these props, you can see
368:22 - if we hover over them, you can see the types.
Right, so that's it for the bottom. Now we
368:31 - have the grid, the grid styles, we're going
to rename that one to grid styles.ts. And
368:38 - the index is going to be renamed to dot TSX.
Yet again, for the stars, we don't have to
368:45 - do anything here because we're not sending
in any props to the style components. In the
368:50 - index dot TSX file, we have to do some stuff,
though. So we remove the prop types. And also
368:56 - make sure to remove them at the bottom here,
like this. Then I specified types. And I create
369:04 - a type props an object and we have the header.
We set up one as a string, the children, we
369:12 - don't need to type that one because that's
built in to react. So we specify the grid
369:17 - to react.fc. We have angle brackets, and we
give it the props object. This is it for a
369:26 - grid. Move on to the header header dots header
styles is going to be.ts like this, and the
369:35 - index is going to be dot TSX. Nothing to do
in the stars file. But in the index dot TSX.
369:43 - We can do some stuff. We only have to specify
this as a react.fc. That's everything for
369:52 - the header. All right, then we have the hero
image here we image dot Stiles is going to
369:59 - be renamed to.ts. And this index.js is going
to be renamed to dot TSX. Instead, in this
370:08 - star component, we actually have to do something
because we have this prop here and we haven't
370:12 - thought that one up here. I mark it as types.
I create a type props equals, we have the
370:24 - image and this is going to be the URL so it's
a string. And when you type a style component,
370:29 - you do it here just after the components you
choose to create. We have the angle brackets
370:35 - again, and we send in the props like this.
There you have it, that's the styles. Then
370:44 - we have the index dot TSX remove the prop
types. Just as before we specify our types,
370:54 - type props equals an object image is going
to be a string title is going to be a string
371:05 - and the text is also going to be a string
we specify it as a react.fc. We have the angle
371:13 - brackets and send in the props. And this should
be it for this component save it move on.
371:21 - Moving for moving football These are for the
movie page we have the search for the index.js
371:28 - is going to be renamed to index dot TSX. The
search for styles is going to be.ts we don't
371:37 - have to do anything In this style file, but
in the index dot TSX, we remove the prop types.
371:45 - everything that has to do with prop types.
Then we have the types. I create a type props
371:54 - equals an object. And then we have the set
search term and this one is going to be a
372:01 - callback. And how do we type this one? Well,
this has implicitly an Annie type. But if
372:06 - we go back to the home, and see where we have
the search bar, you can see here, and here,
372:12 - we actually get that type. So when you hover
over stuff, we get the type. And that's really
372:18 - good, because we can actually just copy this
one, copy and move back to the index dot TSX
372:26 - file in the search bar. And then we paste
it in here. So this is the React dot dispatch.
372:34 - And inside here where the React dot set state
actions, so this is the type for the setter
372:38 - for the use state. And it's a string in this
case, if it was a Boolean, it would have said
372:43 - Boolean here instead of something. First,
we have a react dot dispatch. And we specify
372:49 - the type that is, is that it is a state action.
And we specify that one that it's a string
372:54 - that we're going to set this state with. So
the search bar is going to be a react.fc component,
373:00 - we have the angle brackets, and we give it
the props. And that's it for the search bar,
373:09 - move on to the spinner, spinner Stiles is
going to be renamed.ts. And the index is going
373:17 - to be renamed to dot TSX. The Spinner we don't
have any props for that one. And this one
373:25 - is actually nothing to do because it just
exports the star component. And the last one
373:31 - is going to be the thumb. So we renamed the
index to dot TSX. And the thumb styles is
373:37 - going to be.ts. So nothing to do with the
styles but in the index dot TSX remove the
373:44 - prop types like this. And then we specify
types, type props, equals, the image is going
373:57 - to be a string because it's the URL to the
image, then we have the movie ID, that one
374:03 - is going to be a number and the clickable
is going to be a Boolean. And then specify
374:10 - this as react.fc. And we give it the props.
And this should be it save the component.
374:20 - And I think we should be able to start up
our application. So we run NPM start. Let's
374:27 - see if we have any errors. It actually seems
to be working. Alright, that's great. I didn't
374:40 - have any typos or stuff like that. That always
makes me happy when it works the first time.
374:47 - Okay, so that's the home component. In the
next video, we're going to convert the movie
374:52 - page and all the components for that page
into TypeScript. So we're going to refactor
374:59 - to move a component and also actually the
not found component. So we're going to start
375:04 - with a not found this one is a small component,
so we just specify this as a react of FC.
375:10 - And that will be that one. And we also have
to rename it to dot TSX. And save the file.
375:21 - And now if we look in the console, you can
see that it gives an error, that's because
375:26 - we renamed that one. And that's what I meant
before break it, and you have to restore it,
375:31 - otherwise, it won't work usually. Okay, so
let's move inside of the movie.js file, rename
375:37 - it to move it off TSX. And then we're going
to refactor some stuff here. So we specify
375:44 - it as react.fc. We don't have any props for
this one. And you can see that it complains
375:50 - now because it can't interpret the types here.
So we're going to fix that in the hook. So
375:56 - go inside the hooks and use movie fetch, we
renamed this one to.ts. And we also need to
376:04 - import some stuff here, we need the movie
type object, we need a cast and crew. That's
376:11 - the one that we created all errors, we import
a mural. So now I'm going to specify some
376:15 - types. Export type, movie state, and the movie
state is going to be the movie. But as I'm
376:26 - also creating these properties, myself, the
actors and the directors, I have to add these
376:31 - ones, so we can actually merge them together
to one type. So we use the ampersand and then
376:37 - we have the object The actors is going to
be an array of cast, this and the directors
376:48 - is going to be an array of crew. And that
will create a type object with the movie.
376:59 - And then we merge in the actress and type
domestic an array of cast. And then we have
377:04 - the directors and we type them as an array
of crew. Right? The movie ID, it complains,
377:12 - here, we have to specify the types. It was
specified as a number. And the use state here,
377:22 - it doesn't know what state is this actually.
So we're going to specify the state, we have
377:27 - the angle brackets, and then we can give it
the movie state. And then it will know that
377:34 - this state will have this type. But it complains
now, and that is because we're setting it
377:39 - to an empty object. And it doesn't like that,
because we say that it can only be a movie
377:43 - state. So we could do it like this, if we
want to tell it that it can also be an empty
377:47 - object. Or we can do as we did before, we
say as movie stayed, like so. And it won't
377:57 - complain anymore. So that's everything we
have to do, I think the movie ID okay. Yeah,
378:04 - we also have to make this a string because
this persistent state function is taking in
378:11 - a string. And this is actually a number enough.
So you can see how great it is with TypeScript,
378:16 - because it's telling us when we're doing something
wrong, so we convert this one to a string
378:20 - with a built in function like this. And then
I bet it's the same here yeah.to string, like
378:32 - so. And this will hopefully be it. Back inside
a movie dot TSX file. Yeah, and this is because
378:45 - we get a string back from the API. And now
it wants a number. So we can convert this
378:49 - to a number. And there are smoother ways of
doing this. So you don't have to convert it
378:54 - like this. But I think it's a great practice
in TypeScript. So that's why I did it this
378:58 - way. So we can convert it because TypeScript
will complain if we send in the wrong type.
379:03 - But of course, we could be more consistent
and refactor some stuff in the use movie set
379:08 - and also in the API file, to specify the correct
type from the beginning. With course in the
379:16 - API here, you can see that the movie ID is
a number, we could specify this as a string,
379:21 - instead, we can actually do that. So we make
this a string. Or we specify this as a number,
379:29 - this one should be a string. And we save it
go back to the movie. And now it should work.
379:36 - Yeah. So that's probably the way to do it
instead. So you don't have to do all this
379:40 - converting. And now we have to refactor the
components that we use for the movie page
379:45 - also. So let's begin with actors, right, the
dot styles is going to be active.stars.ts.
379:52 - And index is going to be dot TSX. We don't
have any props in the styles. So we're only
379:57 - going to be in the index dot TSX. Remove the
prop types just as before. And then we have
380:05 - the types. types, I created type props equals
an object, we have the name is going to be
380:15 - a string, the character is going to be a string,
the image URL is going to be a string also,
380:26 - we specify this so react.fc. And I give it
to props. Just as before, save the file, then
380:39 - we're going to be in the breadcrumbs. So rename
this one also.ts. And the index is going to
380:45 - be dot TSX. Same goes with the stars. We don't
have to do anything but in the index dot TSX.
380:52 - Remove the prop types. A lot of repetitive
stuff here, but that's great when you learn
380:58 - things. As I told you before, I specified
a types type of props equals an object. We
381:07 - have the movie, that's the URL, so it's a
string. And then this one is going to be a
381:14 - rec.fc and where the angle brackets and give
it to props. Yeah, I actually named it movie
381:24 - title. That's what it should say. Right, that's
the breadcrumb. Then we have the movie info
381:33 - renamed the index.js to index dot TSX and
the movie info tiles is going to be renamed
381:40 - to.ts. And the story in the stars because
this one was sending in some props to up here,
381:48 - a market with types created type props, equals,
we have the backdrop, and is going to be a
381:57 - string. Just as before, we have the angle
brackets here on the component that we crave,
382:03 - and we send in the props. Don't know why it's
still red. Yeah, that's because this one should
382:09 - be named animated movie info like this. So
yet again, you see TypeScript is great, because
382:18 - it will warn us, if we don't do stuff the
right way, it will warn us save it. Because
382:25 - I didn't see this actually, when I created
it before in the course, I forgot to name
382:30 - this one. And I didn't see a warning. But
now TypeScript warns me about this, save the
382:35 - file, and go inside the index dot TSX file
like this, we remove the prop types. And we're
382:47 - going to have some types for this one. For
this one, I'm going to import the movie state
382:54 - from dot dot forward slash dot dot forward
slash hooks, and use movie fetch. Like so.
383:07 - And then I also going to specify a type props
equal an object, and we have the movie, and
383:15 - the movie is going to be the movie state type.
So you can see here I import the types, I
383:20 - don't have to specify them again. I mean,
if you really love structure, you can create
383:25 - specific files for your types and have them
inside of those files. All right, movie info,
383:32 - it's going to be a react.fc are going to give
it to props, like so. Alright, then it complains
383:41 - here, this one shouldn't be here. And compliance.
Again, I did a mistake here. And you see TypeScript
383:49 - is great. It tells me that this mistake Yeah.
And that's because I'm not providing a movie
383:54 - ID for this one, because we shouldn't be able
to click it. So go back inside of the thumb.
383:59 - And this one, movie ID should be set to optional,
you can set an optional prop with a question
384:04 - mark like this, save the file, go back. And
you can see that the warning disappeared from
384:10 - the movie info. Alright, save that file. And
we'll have one more component to go. That's
384:16 - the movie info bar, rename this to dot TSX.
And the styles.ts, we don't have to do anything
384:24 - with the styles. And inside the index, we
remove the prop types like this. And then
384:33 - we specify the types. So I have a type props.
An obit time is going to be a number, the
384:43 - budget is also going to be a number and the
revenue is going to be a number. And then
384:51 - we specify this as the rec FC, we have the
angle brackets and give it to props, we auto
384:56 - format it. And it should hopefully work, save
the file. And this my friend should be it
385:02 - actually we have successfully, hopefully,
refactor this one into TypeScript. So let's
385:08 - make sure that it works. Go inside the terminal
and run NPM start. And it works. super great.
385:22 - There you have it, you have a TypeScript application
now. And everything works as it should. No
385:38 - arrows anywhere. Sweet. There is the TypeScript
part. And in the next part, I'm going to show
385:45 - you some extra stuff that the Movie Database
can do. And that is a neat little login system.
385:50 - And then you can vote on the movies. We've
reached the last section of this course. So
385:56 - first, congrats to you because we've come
a long way in this course. And I hope you've
386:01 - learned something about react. In this part
of the course, I'm going to show you how to
386:05 - create a login for the Movie Database API
from our application, and you will be able
386:10 - to vote on the different movies. So first,
I just want to show you on developers dot
386:15 - the movie db.org what we're going to use to
make the login work. So down here where it
386:20 - says movies, I clicked on this one, you can
see the complete API for the movies. And they
386:25 - have one here, that's a post that's called
rate movies. So this is the one that I clicked
386:29 - on here. And by posting to this URL here,
we can rate the movies and we have to provide
386:36 - our API key and we Also to provide a session
ID. So that's where we do the login. And the
386:41 - login is, I think, somewhere. People search,
where do they have a authentication, they
386:52 - have a lot of stuff here. And first you have
to create a request token. And then we create
386:57 - a session. So we get a session IDs. So there's
two steps you have to do to be able to log
387:02 - in. And they also recommend you to actually
reroute to the Movie Database for making the
387:08 - login. But it also provided with a solution
here that we don't actually recommend where
387:12 - you can log in from your own site without
leaving that application or the site. So that's
387:17 - the one I'm going to use here. And the reason
for this bonus chapter in the course is actually
387:22 - that I want to show you how to create a global
context and store the user the logged in user
387:27 - in that global context. That's the main part
that I want to show you. And also, I got a
387:33 - lot of requests to show how to make a login
form and be able to vote on the movies. There
387:38 - is one thing though, that's not going to work
with this solution. Because it's not a fully
387:42 - solution. Really, in this case, you have to
use your login from the movie database to
387:47 - be able to log in. So we won't be able to
create a new users and stuff like that. And
387:52 - the best thing would probably be to build
your own API, your own back end somehow to
387:57 - have your users log in there and save data
so that you can save all the stuff about the
388:03 - user. So there's a lot of different approaches.
And this is absolutely not a fully login system
388:08 - and voting system. I just want to show you
some small tips and tricks here to get you
388:13 - started if you want to create your own fully
functional logging system, and stuff like
388:17 - that, Okay, so let's get to it. I'm just going
to show you the code shortly here, before
388:23 - we move on in the api.js file. I have created
these functions for us here down below this
388:29 - comment to your bonus material below for login,
I have a function that called GET request
388:34 - token so that that will obviously get the
request token from the API. And then I have
388:40 - this one that's called authenticate. And I
did some comments here also. So first, we
388:45 - have to authenticate the request token that
we get from this one. And then we have to
388:50 - get the session ID with a request token. So
there's actually three steps and not to order
388:55 - them because we have to get the request token
first. And then we authenticate that request
388:59 - token. And then we get the session ID and
then we are logged in. And then I have this
389:05 - function down below here. That's called rate
movie. And this one will send a rating score
389:10 - to the Movie Database API, and hopefully return
an object that says that we were successful.
389:16 - So that's what we're going to be using in
this part of the tutorial. So let's get started.
389:20 - In the next video, we're going to create a
global context and a global state that we
389:24 - can use to store the user in. Alright, let's
start by creating a context for our application.
389:31 - And we are touching on China have advanced
stuff now in react. So don't feel bad if you
389:37 - don't understand all of this stuff the first
time. All right inside the src folder, we're
389:43 - going to create a new file that we call context,
dot j s. all lowercase letters seem to be
389:52 - in the root of the SRC, not in the components
or anything like that, in the root of this
389:57 - are See, I can close this one here. So we
have the context.js file, and inside of that
390:03 - one, we're going to import react, comma and
the use state that we imported from react,
390:14 - then I'm going to create something that's
called a context in react. And when we create
390:20 - a context, we are creating something that
will make it possible for us to provide our
390:24 - application with something in this context
that we want to use down in the component
390:29 - tree in the application. In this case, it's
going to be estate value and a setter that
390:33 - we're going to use. So the context can be
any value that you want to provide down to
390:38 - your application. But it's really, really
handy if we want to have a state and a setter
390:42 - that we want to be able to access from anywhere
in the application. So I'm going to export
390:47 - this one because we have to import the context
in the component where we want to use it.
390:52 - So export const, I call it context. With capital
C, you can call it whatever you want. It doesn't
390:59 - need to be named context. And from react.we
have something that's called create context.
391:07 - And I call this one. You could also of course,
imported up here, like this. We can do that
391:14 - instead. If you feel that that is better.
I don't know really. All right. Then I'm going
391:20 - to create something that's called a provider.
The provider is going to wrap our application
391:25 - and make sure that we provide this value to
our application so we can decide where we
391:31 - want to wrap this provider in our application.
In our case, we're going to wrap it in the
391:35 - app component later so that we can The value
to our complete application. So we wrap it
391:41 - high up in the hierarchy, so that the complete
application and all the components will have
391:45 - access to this value. So I created a const,
I call this component use a provider, I destructure
391:53 - out the children's, because we're going to
use this component to wrap our application.
391:57 - So that means that the children is going to
be the app. In this case, I have a fat arrow.
392:05 - And then I'm going to create a state const.
State Set state just as we did before, I call
392:12 - the use state hook. And I can give it the
value of undefined as initial value. Right,
392:20 - that's our state's we creating this one in
the use of provider, then we want to provide
392:24 - this one to our application. So I'm going
to return from the context we created up here.
392:32 - context, that's a component, we have something
that's called a provider. So context dot provider,
392:39 - capital C, capital P, and then we have a prop
is called value and inside the value prop,
392:45 - we can provide this value that we want our
application to have access to. So a curly
392:51 - brackets, and I want to provide an array with
the state and the set state, that will make
392:56 - sure that we get the exact same structure
as we do here with the state, we have the
393:00 - state itself, and then we have the setter
in an array. So that's what I'm doing here,
393:05 - I'm giving it the exact same structured array.
Alright, so inside this one, we're going to
393:12 - return the children. And this makes sure that
we can use this provider to wrap any component
393:18 - in our react application, and it will provide
it with these values. Now we have to export
393:23 - default use of provider like this, save this
file, we finished here. This is how you set
393:33 - up a global context and a state that you want
your application to be able to access globally.
393:38 - Now, we're going to move inside of the app.js
file, and inside this file up here somewhere,
393:46 - we can mark it with context. And we import,
use the provider. That's the one we created
393:53 - from dot forward slash context. All right,
so that's our provider component. And we want
394:03 - to place it high up in the hierarchy. So we
can just place it here inside of the router.
394:09 - Use a provider like this. And we're gonna
take this one here and move it down and do
394:18 - some auto formatting. So we're wrapping or
complete application inside of the use of
394:22 - provider. And this makes sure that our complete
application will have access to the state
394:26 - that we created. So we're going to use this
one later. But first, we're going to create
394:30 - a login page. So that's what we're going to
start doing in the next video. We're going
394:36 - to start creating our login component. And
I didn't say that I'm using the version of
394:42 - the application without TypeScript. So you
shouldn't use the one with TypeScript use
394:46 - the original one that we finished before we
did anything with TypeScript. And also before
394:51 - we refactor it to classes, because I'm using
the functional component version, just to
394:57 - be super clear, so that you know what product
you're using for this one. Alright, let's
395:01 - move on inside of the components folder, we're
going to create a new component component
395:05 - that called login dot j, s, capital L. And
we import react. And we're also going to need
395:15 - you stayed and use context, that's the new
hook that we're going to use to grab our context.
395:22 - I'm going to show you that in a second. And
we import this one's from react. Then we're
395:29 - going to import something that's called use
navigate from react dash, router dash DOM.
395:38 - And this one is used if you want to navigate
programmatically in your application, then
395:42 - we're going to need a functions that I showed
you in the API file, so import API from dot
395:47 - dot forward slash API. For this one, we're
going to reduce the button component. So I
395:56 - marked it with components import button from
dot forward slash bottom. Right. And then
396:04 - we're also going to create some styles for
this one. So we can actually do that now and
396:10 - scaffold them out first. So we create a new
file in the components folder that's called
396:16 - login dot styles dot j s. We're going to create
the actual styles in the next video. But for
396:22 - now, we import styled from styled components.
And we export const wrapper and it equals
396:32 - A styled dot div and double backticks save
the file Go back to the long end note as we
396:39 - marked it with styles and import refer from
dot forward slash login styles, login login
396:50 - dot stars like this, and then we need our
context. So I marked it with context. And
396:58 - we import context from dot dot forward slash
context. And that's, of course, the one that
397:05 - we created before. All right, then we can
create our component cost login equals, we
397:13 - don't have any props for this one, to make
an explicit return, and we have a return statement.
397:19 - And we can create the JSX. First, I'm just
going to export default first also. So don't
397:25 - forget that one export default login. In the
return statement, we're first going to return
397:31 - a wrapper. And inside a rapper, I'm going
to create the label. I'm going to type in
397:38 - username colon, number load at one, I created
an input field input, the type is going to
397:47 - be text, the value we're going to grab the
value later from the state. So I'm gonna just
397:56 - mark it with state value for now. And the
name is going to be username. The onchange
398:10 - is going to be handled input. And that's the
function that we're going to create, we can
398:15 - scaffold this one out here, first const handle
input equals on our function, we're going
398:22 - to take in the event, I can skip the parentheses
as it's the only one parameter. And we just
398:29 - create an empty function from now like this.
Then we're also going to have a function that's
398:35 - called handle Submit. And we'll leave it empty
for now also. Right, so let's continue here
398:44 - with the input. So we can close this one here,
then we create another input field. type for
398:54 - this one is going to be password. We don't
want to show the characters that the user
399:00 - type in this one, because it's the password
input box value is also going to be a state
399:08 - value that we're going to add. The name for
this one is password. And onchange is also
399:22 - going to be handled input. So we have the
same function to both of these input fields,
399:27 - and we close it here, then we're going to
have a submit button and we use a component,
399:32 - the bottom component, the text is going to
be login. And also we don't have to provide
399:38 - us with a prop that's called text and we send
in the text, we could also wrap the text with
399:42 - this component if we want to do that instead.
And then we grab the text with the children
399:46 - prop. We have a callback. And that's going
to be the handle Smith for this one. Do some
399:54 - auto formatting, save it. So that's the basic
structure of our component, we want to be
400:01 - able to use this component so we have to create
a new route for it. And we can do that in
400:06 - the app.js file. First up here with where
we have the components, we're going to import
400:13 - login from dot forward slash components forward
slash login, they will have the component
400:23 - and then we can create it somewhere here we
create a new route with a path. This one is
400:30 - going to be shown when we go to the path login,
the forward slash login and the element is
400:37 - going to be our component. Login. And then
we close the route component and some more
400:45 - formatting, save it, go back to our application,
make sure that it's running. I'm actually
400:51 - not running mine. So I'm going to type in
NPM start. Whoa, I heard it really sumed in
401:05 - here. And I'm going to bring up the console
for later. So if we go up here in the route,
401:13 - and type in forward slash login, you can see
that we show our component here. So that is
401:19 - working. Great. Go back to the application
and the login component. We're going to create
401:28 - a few states for this one. So at the top of
the login component, we create a state that
401:35 - we call user name and set the username, equals
use state are going to create an empty string
401:43 - as initial state for this one, we create another
state, that's called password. And the setter
401:50 - is called Set password equals use state with
an empty string as initial value also for
401:57 - this one, something like that. And then I
also want to notice state, that's called error
402:05 - and set error. And we have a use state call.
And we set it to false initially. So these
402:12 - are the three states that we have, you could
also have won combined states for input fields,
402:16 - if you want to have that is used to create
them separately like this, then we're going
402:22 - to grab our context, we're importing it up
here. And we can grab the context with a hook
402:27 - that's called use context. And our context
is going to be the state that we created.
402:31 - So we create a new cost. And we can just structure
it out just as before, we have the state,
402:37 - the state is actually going to be the user.
So we can be more specific, we call it the
402:40 - user and the set user. And it equals, we call
the use context hook. And this works as simple
402:48 - as we just give it the context. And this one
is going to bring in the context for us. And
402:54 - the user, we're not going to use this one,
we're only going to use the set user, we can
402:58 - mark it with an underscore. If we want to
do that. This is also very subjective on how
403:05 - you like to do stuff like this, then we have
a hook that we will see imported for our navigation.
403:11 - So we create a course that we call navigate.
And we call that hook use navigate. And this
403:19 - will make it possible for us to use this navigate
const to navigate programmatically in our
403:24 - application. Alright, so first, we're going
to make these input fields controlled by this
403:29 - component. So we have to hook them up with
state just as we did with the search bar.
403:33 - And we have this handle input here, where
we get the event from the input field, so
403:40 - the input fields, the value for this one,
we can change this one now. It's going to
403:45 - be the state that's called username. No, not
a capital N, all lowercase letters, and this
403:55 - one is going to have the value from the password
state. All right. So this will make sure that
404:03 - it is connected to the state. So now when
these input fields change, we can make that
404:08 - change in the handle input because we have
an on change handler on them. And we can set
404:13 - the different states in the handle input.
And you can see here that I give them a name.
404:17 - So first, we want to grab the name. So I create
a const name equals e dot current target dot
404:23 - name, and this one is going to grab the name
that are set here on the name prop. Then we
404:29 - have another cost with the value. And we get
that one from e dot current target dot value.
404:37 - So we need the name and the value. And actually,
you could do this in a one liner. If we use
404:41 - just one state for our input fields, we could
set the name of the properties in an object
404:47 - dynamically with the name that we get from
the input field. And then we set the value
404:51 - so that will create new values in the object.
Depending on how many input fields we add
404:55 - to our application. But in this case, I have
a separate state for each input field. So
405:00 - I do it like this instead, in a small application
like this, I think this is more readable,
405:04 - actually. But this means that we have to check
now what input box that we type in. So we
405:11 - have an if statement. If named equals username,
then we're going to set the username stayed
405:19 - with the set username, stay setter, and we
have the value. So we set the name of the
405:27 - input box, and then we get the value. If the
name is username, we know that we should set
405:31 - the state for the username. So that's what
we do in here. And if the name equals password,
405:38 - we're going to set the password state. And
we give this one the value also. This one
405:47 - maybe should have a lowercase m instead not
an uppercase, so we change this one just to
405:55 - be consistent. Or format it save it and we
can see if it works, go back to the application.
406:02 - And we can type something in here. And yeah,
it works. So we know that we have our control
406:06 - components. So that's great. So our input
fields are working, then we'll have to submit
406:12 - something and actually grab something from
the API to make the login. And we do that
406:18 - in the handle submit function. The first thing
we're going to do is to set the error to false
406:23 - just when we did when we finished our movies,
and then I have a try block and then a catch
406:30 - block and we have the error. For this catch.
We can set that or True. That's the only thing
406:40 - we're going to do inside of the catch block.
So we're going to be in the try block now.
406:44 - And first, we need to get the request token.
So I create a new const. I actually noticed
406:49 - now also that I forgot to bump up the font
size. So I'm going to do that now, from now
406:56 - on is going to be bigger. Okay, so I have
a cost with a request token. We're going to
407:05 - wait from the API, I have this function GET
request token. And of course, this one has
407:12 - to be an async function, because we are waiting
here. So Mark this one with a sync. So that
407:19 - will hopefully get us the request token, if
something goes wrong here, the catch block
407:24 - will set the error to true and we're going
to handle that just in a second down in the
407:30 - JSX. The cost, we're going to grab the session
ID We await again, from the API, I have a
407:38 - function that's called authenticate. And for
this one, we're going to give it the request
407:43 - token first. And then we give it the username,
and then the password. All right, that will
407:57 - hopefully get us our session ID. And then
we can set the user. And this one, the set
408:04 - user is actually the context that we created,
because we're grabbing the context here and
408:08 - the setter for the user. So we're setting
this one in the context, I'm going to set
408:12 - it with an object First, I want to set the
session ID. So I gave it from the session
408:17 - ID that's the one that we'll get back from
the API. We have a property that's called
408:23 - session underscore ID, all lowercase letters,
and then I'm going to set the username. And
408:30 - as this is also e6 syntax, I don't have to
type out this twice, because it will interpret
408:35 - this automatically. Alright, and then we just
have one more thing to do. And that is we
408:42 - have to navigate somewhere when we successfully
logged in. So we can navigate programmatically
408:47 - with react router, we use the navigate that
we got here from that hook us navigate, we
408:53 - placed that one, we placed what we get back
here in the navigate cost. So navigate parenthesis
409:00 - and we just specify the URL. And in this case,
we want to go to the homepage. So we specify
409:06 - it like this. And I want to do some console,
log in here, console log, the session ID just
409:15 - to see that we get something here, save the
file, go back to our application. And now
409:21 - we haven't styled this one. We're going to
do that in the next video. But we can use
409:25 - the input fields here anyways. So my login
is vevo and then I have my password that I'm
409:31 - not going to tell you something like this,
and I tried to log in. And you can see that
409:38 - we get this object back from API, we get the
session ID and the success is telling us true.
409:45 - So that's really, really neat. We know that
our login system is working, and it redirected
409:49 - us to the homepage. To go back to the login
page. I want to do one more thing here before
409:56 - we finished with the logic for this component.
Down below here just above the first label,
410:01 - I have a curly bracket and I'm going to create
a short circuit, I'm going to check if the
410:06 - error is true. Double ampersand If the error
is true, we're going to have a div with a
410:11 - class name of error. And then I'm just going
to say there was an error, something like
410:21 - this. And then I want to format it. And then
I'm going to say this file. So you can of
410:26 - course type in whatever you want to save the
file, go back to the application. So just
410:30 - try to type something in here and click Login.
And you can see that we show this one here.
410:37 - Instead, there was an error. And we also get
an error in our console. So we know that the
410:40 - try and catch block is working. So this is
our login component and the logic and in the
410:46 - next video, we're going to create the styles
for this component. We have our login component
410:53 - and the functionality for that one. And now
we're going to create the stars for it. So
410:56 - go back inside of the code editor and the
login dot styles dot j s file. We have our
411:04 - wrapper that's the only style component that
we use him for this one. First, we're going
411:09 - to display it as a flex. we align dash items
to center and we justify the content Center
411:21 - also just the center stuff. Then we set the
flex direction on this one is going to be
411:27 - column and we can save it to see what we've
got so far. You can see that we're centering
411:34 - it here in the middle of the screen. So that's
great. Go back to the code, I'm going to set
411:41 - a max width to 320 pixels, the padding is
going to be 20 pixels. And the color is going
411:49 - to be from the variables, we have a color
that's named dark gray. So double dash dark
411:56 - grey. Save it go back just to see what we've
got, right? When I set the max width to 320
412:04 - pixels, it's showing it to the left. But if
we set the margin to zero and auto, and save
412:10 - it, that will place it in the center again,
so that's great. All right. So that's everything
412:15 - for the wrapper. Now we have the input, we
nest, this one inside of the wrapper component,
412:21 - we set the width to 100%. On the input fields,
the height is going to be 30 pixels. border
412:29 - is going to be one pixel solid. We have a
variable for color. And we also use dark gray
412:37 - for that one. Then we set the border dash
radius to 20 pixels, the margin is going to
412:47 - be 10 pixels and zero. And the padding is
going to be 10 pixels, save the file, go back
412:54 - to the application. And you can see that we
created this nice little input fields here
413:00 - sweet with rounded corners, and it matched
the overall the overall look of the application.
413:11 - Then we just want to style our error class
also dot error. And for that one, I'm just
413:19 - going to set the color to red. You can style
this a little bit better if you want to do
413:24 - that. So if we type something in here and
click login, you can see that this is the
413:29 - error. All right. And that's actually it for
this login component, I'm not going to do
413:35 - any heavy styling, as this is the bonus section
of this course. So if you want to do it nicer,
413:41 - you can do that yourself. In the next video,
we're going to be in the header and showed
413:45 - a logged in user and also have a log in bottom.
Okay, let's create the login system from the
413:52 - header, we're going to show a bottom to log
in. And I'm just going to place it in the
413:56 - middle actually here. It may be should be
to the right. But yeah, as I told you, I'm
414:00 - not doing any heavy styling for this section.
So you can style it to your own liking later.
414:05 - So let's go back inside of the application
and inside the header component, so the header
414:09 - folder and the index.js file. The one thing
we need to add to the imports here is to actually
414:16 - import the context. So we import context.
From dot dot forward slash and dot dot forward
414:29 - slash, again, we have the context file like
this. And this one is making an implicit return.
414:36 - Now we need to have some functionality inside
of it, we have to change this one into an
414:41 - explicit return. Like this, we add the return
statement here or reformat it just to make
414:52 - it a little bit nicer. Some people also have
the formatting to activate when you save the
414:57 - file, I'll actually I actually don't like
that, because sometimes when I save it, and
415:01 - I'm not finished, it starts to format stuff.
And I don't like that. That's why I do it
415:05 - manually, instead. Alright, const user, we're
going to grab the user from the context, we
415:12 - don't need to set anything here, we just need
the user. And recall the use context hooked,
415:18 - we actually need to import that one also appear.
So import react comma, curly brackets use
415:25 - context. So we give this use context, hook
the context. And this will bring us the user.
415:33 - So we don't need to destructure out the setter
for the state, we just need to use so so that's
415:38 - why we're not destructuring out that one.
And we can do a console log user like this.
415:46 - Save the file, go back to our application,
I'm going to try to login again. I click Login.
416:00 - And you can see that we get this console log
here. So we have the session ID and the username
416:03 - of vaman. And that's of course for vaman fault.
All right, so we know that our context is
416:10 - working great. And that's sweet. So go back
to the index.js file in the header folder.
416:18 - And now we can use this one here. So just
between the two logos here. I'm going to create
416:26 - curly brackets. And the first thing I'm going
to do is to check if we have a user and then
416:31 - I create a ternary operator. So I have a question
mark, parenthesis and the first thing I'm
416:36 - going to do if we have User are going to show
a span with a class name of logged in, like
416:45 - this. And I'm going to type out logged in
as colon. And then I have new quarter brackets,
416:53 - and I grabbed the use of dot username. And
that's from the object that we get back from
416:58 - the context, of course. So when we are logged
in, we're going to show the text logged in
417:05 - as and we also show in the username. Otherwise,
if we're not logged in, we have a colon, here,
417:11 - we have a new pair of parenthesis, are going
to use the link component. And it's going
417:17 - to link to if you remember this one, the link
component is the one that we use from react
417:22 - router to navigate inside of our application.
This one is going to link to the login page
417:29 - like this. And inside the link, I'm going
to have a spam that has a class name of login.
417:41 - And it says login and then do some nice auto
formatting. I'm going to move this one off
417:47 - and save the file and see if it works. Go
back to the application, we can't hardly see
417:52 - it here. We're going to style this in a second.
But we have a login button. So it takes us
417:57 - to the login page. So here again, I'm going
to log in. And this is something that you
418:03 - also can do if you want you can store the
user information in the session storage or
418:07 - in the local stories, there's a lot of discussion
going on, on what is the best practices to
418:13 - use. In this case, we have a session ID, so
we have to request a new session ID on each
418:17 - session from the Movie Database API. So I'm
just storing it in the application itself.
418:22 - So that means that it will get wiped out every
time you reload application, I had to log
418:27 - in. Again, if this was in the real world,
we probably would have a login system that
418:31 - will also save this token somewhere. So you
don't have to log in every time. And I actually
418:35 - have a YouTube video, where I show how to
create a back end and set up JSON Web tokens
418:41 - and how to create a login system in a react
application. So this is a very simple use
418:45 - case on how you can create a login system
here. All right, that was a side note, I'm
418:50 - going to click the Login button. And hopefully
up here Yeah, you can see that we showing
418:55 - logged in as beiben. So it's working, we have
to give it some styling also. And this is
419:00 - just going to be a couple of rows. So I'll
do it in this video. So inside the header.styles.js
419:06 - inside here, we actually don't need the class
names that are set, we can just set the color
419:09 - to a variable of white, like this, and then
we have the a tag, I set the color to the
419:19 - same variable there, double dash white. And
the text dashed declaration is going to be
419:28 - set to none. Auto format. Let's save it. And
also if we want, we can remove these classes,
419:34 - we don't need them, we can just have a span
on this one's awesome thing like this, save
419:40 - the file, go back to the application, you
can see that now we see it. And yeah, this
419:44 - is probably not the most beautiful way, it
doesn't look that good, because I'm just placing
419:50 - it in the middle. Now, we would have some
dedicated space for a login button and stuff
419:55 - like that. But this is just to show the functionality.
So I'm not going to style it any better than
420:01 - this. So I clicked the login. And I log in
again. click the Login button, whoops, something,
420:08 - I guess I typed the password wrong here. I
log in again. And that works. And now we can
420:16 - see that we have this white text instead.
And it tells us that I'm logged in. So that's
420:20 - great. In the next video, we're going to create
the rate component that we're going to show
420:25 - somewhere here, I think we're almost finished
with the voting system. But we need a rating
420:33 - component that we can place here in the movie
info component. So we're going to create that
420:38 - will now move back inside of the code editor
and inside of components create a new folder
420:43 - that we call Wraith, capital R. And inside
of that folder, we create a new file that's
420:49 - called index dot j s and I actually not going
to have any styling for this one. I'm going
420:53 - to use the components as they are. So first
I'm going to import react. And I'm also going
420:58 - to need the use state for this one. Because
it is going to be a control component I imported
421:05 - from react. Then I create my component rate
equals, and I'm going to destructure out the
421:13 - callback for this one. Because when we vote,
we need to have a callback function that will
421:18 - do something. And in this case, it's going
to send a request to the API. That's a component
421:24 - I'm also going to export default rate like
this. And the first thing we do in this component
421:30 - is to create a state with a value and set
value equals use state And we're going to
421:38 - start with the value five, the rating is going
to be between one and 10. And then we have
421:46 - the return statement and we return our JSX.
So I'm going to make it simple here, I create
421:52 - a wrapping div, and then I create an input.
And the type is going to be range. So we create
421:59 - a range slider, the min value is going to
be one, the max is going to be turn, and the
422:09 - value is going to be our state value. And
then on change, we have to change this state
422:19 - value. So I want to show you also that you
can create an inline function instead of creating
422:24 - a function up here to where the event E, I
create an inline arrow function. And then
422:31 - we set the value e dot turn target dot value,
and this is enough. And we will close this
422:40 - component. Alright, so that's a range slider
after the range slider, we want to show of
422:45 - our value like this. And then I create a p
tag just to get it on a new row. And I create
422:54 - a button. I have an onClick handler on this
button. And in this case, we have an inline
423:00 - arrow function because we are going to call
our callback with a value. And we give it
423:06 - the value if we don't have this inline arrow
function here, and we just type it out like
423:10 - this, then it's going to instantly run this
and it won't work. So we have to have an inline
423:14 - function here as we providing an argument
to this callback function. Right, close it
423:19 - and inside of the button with type out rate,
do some more formatting, save it, we're gonna
423:26 - move inside of movie info component in the
index.js file. And up here where we import
423:32 - the thumb, we also got to import our rate
component, dot dot forward slash rate. And
423:38 - then we're going to show the rate component
somewhere below. theme, we're going to place
423:45 - it Yeah, maybe here, just above the M tag
for the text. So I create a new div and inside
423:53 - that div, I have a p tag rate movie. And below
that one, we use a rate component. And for
424:02 - now, we don't have a function that we're going
to send into this one the callback function.
424:07 - So just showing the component just to see
that it works and shows up, save the file.
424:12 - Go back to the application. And you can see
that we have the rate slider here. And we
424:16 - have a rate bottom, it doesn't work. Now,
as you can see, because we're not sending
424:20 - in the callback function to it. But this one
will work in the next video, because we're
424:26 - going to tie all this together and make it
work so that when we press this red button,
424:31 - we will send along this rating number to the
API, and we will rate this movie. Alright,
424:39 - we're almost finished. And this is actually
the last video in this course. So hope you
424:44 - enjoy the course, we're going to tie this
together. So let's move inside of the code
424:49 - and inside the movie info component in the
index.js file, the first thing we have to
424:54 - do is to grab the context, the context or
import context, from dot dot forward slash
425:08 - and dot dot forward slash again, and context.
So we're going to use the context. And that
425:13 - means that we also need to import from up
here, the use context hooked. Right. And now
425:21 - you hopefully can see how handy it is to have
this global state because we can access it
425:26 - from any component in the application. And
in this case, we're going to grab the user
425:30 - and the session ID. So you can send along
the session ID to the API when the user rate
425:35 - the movie. And now we're making this implicit
return, we're going to change this one to
425:42 - an explicit return, so return and I created
curly bracket, and then we need to have one
425:48 - below also. There is some auto formatting,
and go back up if it's in space. And first,
425:59 - we're going to grab the user from our context,
just as we did before the cost user use context.
426:08 - And we've given you the context. So this will
give us the user here. And then we are going
426:14 - to send in a callback function to our rate
component here. So we're creating this function
426:18 - here in this component and send it along to
the rate component. We're going to call this
426:23 - function calls handle rating. This is going
to be an async function because we're making
426:33 - a an API call. We have the value And then
we can do some stuff inside of here. So this
426:43 - value is going to be the value from the range
slider. So create a new cost rate equals,
426:49 - then I wait. And from the api.id and I imported
up here. No, I also need to import the API.
426:58 - We do that up here, import API from dot dot
forward slash dot dot forward slash API, like
427:06 - this, then I go back down here and change
this one. API dot, I'm going to grab the function
427:14 - that's called rate movie. And if you want
to know more about these functions, you can
427:18 - always check them out in the api.js file.
Because I told you probably too many times
427:24 - now that I pre made these functions for you.
So you don't have to do that in this course.
427:29 - Alright, move back to the movie and for an
index.js file. So the rate movie function
427:34 - is going to take in three arguments. So we
have the user dot session ID. And we have
427:40 - the movie ID, because we need to know the
movie ID of the movie that we want to rate.
427:45 - And we also want to give it the value, that's
the rating value. Right. And that's actually
427:51 - everything we need to do. In this case, I
just want to console log out to rate to see
427:56 - that we get something back and that the rating
was working. So we can use this handle rating.
428:01 - Now down below here, we can give it to the
rate component, we have a prop. That's called
428:06 - callback. And we give it to hand reading and
save the file. And hopefully this should be
428:14 - it. Go back to the application. Yeah, we have
one more thing to do, because I don't want
428:19 - to show this rate slider when we're not logged
in. So we can do that also. So just here,
428:25 - when we have the rating, outside of the wrapping
dem are going to create a ternary operator,
428:30 - I'm going to check if you sir. Then I'll double
ampersand, and I move my M curly bracket down
428:37 - here or to format it. And it will also auto
generate this parenthesis. So if the user
428:43 - exists, if we're logged in, we're going to
show the rating. Otherwise, we don't show
428:47 - anything. Save the file go back to our application,
you can see that we're not showing the rate
428:52 - slider now we have to log in. So we click
the Login button, and I log in. And now we're
428:58 - logged in, we're going to go to movie here.
Now you can see that we see the rating slider.
429:05 - So I don't actually know if this movie is
any good, but I'm going to give it a rating
429:09 - or eight. And I click the red button. And
here you can see in the console that we got
429:15 - a success of true and status code one, a status
message success. And if we click rate again,
429:22 - you can see that we get another message because
it says that the item record was updated successfully.
429:28 - So you can update your rating score. If you
want to do that. There's also a resource in
429:33 - the endpoint if you want to remove the score
also. So there are some neat stuff that you
429:37 - can do with the Movie Database API. And I
hope this inspired you to actually build more
429:42 - stuff into this application, because now you
have a good foundation. And for example, the
429:46 - next step you can do is to create a logout
button for the user. And the way I would do
429:51 - it in this case is that I can just wipe out
the global context the state here and remove
429:56 - the user from the global state. And that will
log out the user we don't have to do anything
430:01 - else with the Movie Database API or something
like that. Alright, that's it for this course.
430:07 - I hope you enjoy this. I sure enjoy this.
This is the third iteration of the course.
430:11 - So this is the third time that I actually
update it and re recorded from scratch. And
430:17 - if you want free tutorials, you can always
visit my YouTube channel, search for vaman
430:22 - Fox, or you can go to vevo in fact.com if
you want more courses from me