00:00 - learn how to create a sticky notes app
00:02 - using aite from Dennis Ivy aight is an
00:05 - open source self-hosted backend as a
00:08 - service platform that makes building
00:10 - backends quick and easy aight provided a
00:13 - grant to make this course possible hey
00:16 - what's up everybody I'm Dennis Ivy
00:17 - developer Advocate at aight and in this
00:20 - video I want to show you how to make one
00:22 - of the coolest notes applications that
00:23 - you've ever seen so before we get
00:25 - started I want to walk you through a
00:27 - demo of the final product I'll show you
00:29 - some of the features that we're about to
00:30 - build into this and then I want to show
00:32 - you some helpful resources that are
00:34 - really going to make following this
00:35 - video a lot easier so I've prepped
00:37 - written guides we have the final source
00:39 - code I just want to show you how all
00:41 - this works and then we'll just go ahead
00:42 - and jump right into it so let's get
00:44 - started okay so this is going to be the
00:46 - final product at the end of the video
00:48 - and I want to show you every single
00:49 - feature here so first of all we have a
00:51 - Sticky Notes application and I can move
00:54 - these notes anywhere I want and the cool
00:56 - thing is this is all saved in a real
00:58 - database if I refresh I don't have to
01:00 - explicitly save these notes it's
01:02 - automatically saved for me now at any
01:05 - point I can move these notes go ahead
01:07 - and change the colors to whatever I want
01:09 - we just use that color palette if I want
01:11 - to add a new note I can go ahead and
01:13 - generate one set that color and I get
01:16 - the note now something that's pretty
01:18 - cool and I was really excited to add
01:20 - this feature here is an autosave feature
01:22 - so as I add a note let's just say hello
01:25 - world you notice how we have this load
01:27 - spinner now when that spinner stops it's
01:29 - going to wait 2 seconds it's going to
01:31 - automatically save that note for me now
01:33 - this saves every two seconds but if I
01:35 - keep typing it doesn't start saving
01:37 - until the last key up event so that way
01:40 - we're able to keep typing we can work on
01:41 - it we don't have to worry about
01:43 - explicitly saving anything it just does
01:45 - it all for us now when it comes to note
01:46 - sizing this is all also automatic for us
01:49 - as we type we're constantly reading the
01:51 - input Fields here and we're just growing
01:53 - that note and shrinking it as the user
01:55 - adds or removes data something that's
01:58 - also really cool now if we want to Del a
02:00 - note we can always just hit that delete
02:02 - button and this is all being updated now
02:04 - when it comes to the text Tac we are
02:06 - going to be using react on the front end
02:08 - and for our backend we are using aight
02:11 - which is an open- Source alternative to
02:13 - Firebase and this is where we have our
02:15 - database so if we go in here we can
02:17 - actually see our data we connect to all
02:19 - of this with the aight web SDK that's
02:21 - how we make requests to it so if you
02:24 - don't have an account on aight go to
02:26 - aight. make sure you have an account
02:28 - there's a very generous free tier so
02:30 - this is what we're going to be using
02:31 - throughout our project so there's two
02:33 - more things to talk about before we get
02:34 - started so first we have the source code
02:37 - make sure you download this this is
02:38 - linked up in the video description this
02:40 - is the final code for this project it's
02:42 - great to reference it anytime you get
02:44 - stuck go ahead and use this and see what
02:46 - that final code is supposed to look like
02:48 - now with that I also have a little bit
02:50 - of surprise here so I have a written
02:53 - guide that I myself I'm going to follow
02:54 - throughout this tutorial and this is
02:56 - literally every single step in this
02:58 - project here so if we go through these
03:00 - eight steps here we are going to go
03:02 - ahead and follow all of this so if I
03:04 - want to go ahead and see what we're
03:06 - doing in section 2.2 I can go ahead and
03:10 - click on it I have the written
03:11 - description of what I'm going to talk
03:12 - about all the source codes so if I ever
03:15 - want to copy anything at any point I can
03:17 - just go ahead and hit copy to clipboard
03:19 - and that code is mine so this is going
03:21 - to be very helpful you can always jump
03:23 - to any point here and use it as a
03:25 - reference this is also going to be
03:27 - linked up in the video description make
03:29 - sure to use it because I'm following
03:31 - every single step in this process using
03:33 - this
03:36 - guide all right so now it's time to get
03:38 - things started and we're going to kick
03:40 - things off by using the written guide
03:41 - for this tutorial and I want to show you
03:43 - how to use this and how to follow along
03:46 - to really make this process a lot easier
03:48 - so you know where to reference all the
03:49 - source code all the code examples and
03:52 - written instructions so let's start by
03:55 - opening this up and make sure you're in
03:56 - part one and I'm going to follow this
03:58 - along directly with you at least to kick
04:00 - things off so in this first part here
04:03 - you can see all the commands you need to
04:04 - run you see the written explanations
04:06 - here all the prompts you need to select
04:08 - here and in the Second Step the files we
04:11 - need to delete the files we need to
04:12 - clean up the components that we need to
04:14 - create so for example we're going to
04:16 - create a notes page if you want to
04:18 - actually just copy this code directly
04:20 - you can just go ahead and add that to
04:21 - clipboard and copy and paste that in I
04:24 - recommend you actually type this out but
04:26 - if you ever need it it's right here so
04:28 - then we go into our app. jsx file here
04:30 - or our component I show you how to
04:32 - import that where to add that so all the
04:35 - examples are directly in here so let's
04:37 - actually follow this so I'm going to
04:39 - open up my terminal here and I'm going
04:41 - to use vs code for my text editor so I'm
04:43 - going to use a terminal directly in here
04:45 - and we're going to follow the first step
04:46 - here by creating our react application
04:48 - with vit and you need to make sure you
04:50 - have no JS installed before you do that
04:52 - so make sure you have it and let's just
04:54 - go ahead and run npm create vit and this
04:58 - is going to go ahead and ask me a series
04:59 - of questions like my project name I'm
05:01 - going to call this my app and then I'm
05:03 - going to make sure we select react and
05:06 - I'm going to use JavaScript if you want
05:07 - to use typescript go ahead and do that
05:09 - for this tutorial this is the one we're
05:10 - going to select so this is going to
05:12 - create my boilerplate code that's all on
05:14 - my desktop I'm going to find that file
05:17 - open this up and then we're going to run
05:18 - some basic installs here so we'll close
05:21 - this out we'll open up my terminal run
05:23 - npm install now while that's downloading
05:26 - the default packages here let's go ahead
05:28 - and check the next step here so I need
05:30 - to delete my app.css file and then
05:32 - remove everything from index.css and
05:35 - then clean up my app.jsx file so we'll
05:38 - just do that once that's done so let's
05:41 - run our server just to make sure it
05:42 - looks good and I want to open this up
05:44 - here on Port
05:46 - 5173 and this is my app right here so
05:49 - let's go ahead and change this so inside
05:50 - of my source folder we're going to
05:52 - delete app.css we'll move that to trash
05:56 - then index.css I'm going to go ahead and
05:59 - copy all of that delete it so we want to
06:02 - completely clean slate because we're
06:03 - going to add our own code here and from
06:05 - here we can go into app.jsx and let's
06:08 - just go ahead and remove all of this
06:10 - besides the empty fragments here and I'm
06:12 - just going to write my app just so we
06:15 - can see some kind of output here so
06:16 - we'll remove this state we'll fix that
06:19 - indentation right there clean up some
06:21 - space and we should have just a very
06:23 - empty component and at this point I can
06:26 - just go ahead and see what I have here
06:28 - so inside of my application it should
06:29 - just look like this no styling just some
06:32 - text that says my app so inside of my
06:34 - source folder what I want to do is
06:36 - create a page for my notes page and even
06:38 - though this application is only going to
06:39 - have one page I still want to separate
06:41 - my code into different pages and
06:42 - components just to keep that code clean
06:45 - and separate so inside of source let's
06:47 - go ahead and create a folder called
06:49 - pages and then a page called notes
06:53 - page.js and what I'm going to do here is
06:55 - use a shortcut so react Arrow function
06:57 - component export so if I type in r f a i
07:01 - can hit enter and it's going to generate
07:03 - this component for me and this is a an
07:05 - extension that you can use in vs code so
07:07 - go ahead and add in es7 react Redux code
07:10 - Snippets I have one of these installed
07:12 - and essentially there's certain
07:13 - shortcuts that you can type makes it a
07:15 - lot easier just to generate these
07:16 - components without having to type them
07:18 - all out from scratch here so now that I
07:21 - have this component let's go into
07:23 - app.jsx let's import this so we'll just
07:26 - bring this in right here so import notes
07:29 - page page and we're going to bring this
07:31 - in right here and I want this to be a
07:34 - div actually and then the actual notes
07:36 - page component I can bring in right here
07:40 - so with that we should see notes page
07:43 - right there and let's go to the guide
07:45 - again so we have our component we
07:47 - cleaned up what we were supposed to if
07:48 - we go to step 1.2 in basic styling here
07:52 - is where we want to just go ahead and
07:54 - add in some CSS so I want to take care
07:56 - of some basic styling before we move on
07:58 - to specific app like styling so we want
08:01 - to set the background we want to set the
08:02 - default fonts text size and so on so
08:05 - what I'm going to do is go ahead and
08:07 - just copy this right here and let's
08:09 - bring that in so this is all going to be
08:11 - within index.css and in here we're just
08:15 - adding that basic styling and then in
08:17 - our app we have that dark background
08:19 - color and then we create some grid lines
08:21 - right here with that background image
08:23 - set the default height make sure we have
08:25 - a background size and our position is
08:27 - going to be relative because we want to
08:29 - make sure those notes that we drag
08:31 - around have an absolute position so we
08:33 - need to make sure the parent has a
08:35 - relative position now if I go to my app
08:37 - this is what it looks like right here so
08:39 - so far so good okay so going into step
08:43 - 1.3 what I'm going to do here before we
08:45 - actually set up a backend is I want to
08:47 - make sure we have some data that we can
08:49 - work with before we get to the more
08:51 - complex stuff so this is going to get a
08:52 - lot easier to actually reference before
08:55 - we actually start working with a real
08:56 - database so here's what we're going to
08:58 - have here we're going to have in array
08:59 - of different notes Here there going to
09:01 - be an object here and each note is going
09:03 - to have an ID some kind of body text
09:05 - right there some colors and a position
09:08 - now with these values if we actually
09:10 - look at these and I'm actually just
09:11 - going to copy this and then we're going
09:12 - to see what it actually looks like we're
09:14 - going to put this into assets and then
09:16 - call this file fake data.js and I'll
09:20 - actually go by piece by piece and
09:21 - explain it so let's create a new file
09:24 - called fake data and make sure it's ajs
09:27 - file and not a Json file and the reason
09:30 - for that is we're going to have some
09:31 - rich text here so for example our body
09:34 - we're going to have some data here where
09:36 - we may want to have some kind of line
09:37 - breaks if we want to add more maybe
09:40 - styling to that font we want to make
09:42 - sure that it's all stringified and we're
09:44 - not going to be able to stringify that
09:45 - if that's just Json data and the same
09:47 - for colors so inside of our colors we
09:50 - have this object right here and in our
09:52 - actual database that's going to be
09:53 - stored as a string so we need to
09:55 - stringify it and then when we render it
09:57 - out we're going to parse this data so
09:59 - again that's why it needs to be
10:00 - JavaScript data now the last part here
10:02 - is the position these are just going to
10:04 - be X and Y coordinates for this specific
10:07 - card so I have some filler data that I
10:09 - already added in here so that's that
10:11 - rich text we have some colors so this
10:13 - one will be purple this one's going to
10:14 - be blue and then the actual yellow color
10:17 - and we're going to reference these
10:19 - values to style the actual note here so
10:22 - back to our guide we set up our Json
10:25 - data so I explain how everything's going
10:27 - to look right here then for our card
10:29 - component we need to create a separate
10:31 - component so we're going to create this
10:32 - component and then we're going to
10:34 - reference the actual body and then
10:36 - render that out so let's go ahead and
10:37 - create this note card component so back
10:41 - to our code we're going to create a
10:43 - folder called components so we're going
10:45 - to also separate this components and
10:48 - this is going to be note card. jsx and
10:52 - let's use that shortcut so react Arrow
10:54 - function component exported and when we
10:56 - render out an actual note we're going to
10:58 - pass down the note itself now for the
11:01 - body because we want to parse this right
11:02 - away so we're going to create this
11:04 - variable called body and we're going to
11:05 - call Json parse and then we'll pass in
11:09 - note. body like that now for the actual
11:12 - data let's go ahead and just render out
11:15 - the body like that and that should be it
11:18 - for the note card now let's clear up a
11:20 - little bit of this let's go into our
11:23 - notes page and inside of our notes page
11:26 - in here I want to import my Note data so
11:28 - we're going to import fake data and
11:31 - that's going to be from assets and we
11:34 - have that in fake data.js like that and
11:37 - what I want to do here is create an
11:38 - alias because I want to reference these
11:40 - by note so import fake data as notes
11:43 - here and in fake data.js that's going to
11:46 - be this array of objects right here so
11:48 - we have Note One Note 2 and three and
11:52 - all those have a different position and
11:53 - then let's go ahead and just map through
11:55 - these we want to render these out so
11:57 - we'll go ahead and call notes
12:00 - map and we want to go through each note
12:03 - and as we render these out what I'm
12:04 - going to do here is import the note
12:06 - component so we'll import note card and
12:09 - then we want to render that out and
12:12 - close that off here and first of all we
12:14 - need a key so we're going to use the
12:16 - note ID for the key we want to make sure
12:18 - that that's unique and then we want to
12:21 - pass in the actual note object and
12:23 - that's going to be just the note itself
12:26 - so let's save that and let's go into our
12:29 - steps here so we rendered that out that
12:31 - looks correct here and before we add
12:32 - some styling let's just see what we have
12:35 - so we see each note it's a little bit
12:37 - difficult to see because they're all
12:38 - Blended in together and they all have
12:39 - the same text but we can see note one
12:42 - two and three so next I want to make
12:45 - sure these notes are actually styled
12:46 - here so if we go down in our
12:48 - instructions here we can see the CSS
12:50 - that we can actually use for this note
12:51 - so we'll go ahead and copy that to
12:53 - clipboard and then what we're going to
12:54 - do is go ahead and add in the card class
12:56 - to an actual note and we're going to use
12:59 - use the actual note background and body
13:01 - color to go ahead and style that in line
13:03 - so we're going to have a default style
13:05 - for every note and then the actual note
13:07 - itself will have its own colors for that
13:09 - and the positioning style so we'll go
13:12 - into our index.css file and let's go
13:15 - ahead and just bring that in right here
13:16 - we'll paste that in so we have a width
13:18 - for every note we set a radius set the
13:21 - cursor pointer for that specific note
13:23 - and then we just add in some kind of box
13:25 - Shadow just to make sure it looks a
13:26 - little bit more 3D and to to actually
13:29 - implement this we need to make sure that
13:31 - this class is added to the note body so
13:34 - we're going to add in card right here so
13:36 - that wraps the entire note and because
13:39 - of that inline styling I need to make
13:41 - sure to go ahead and parse the position
13:44 - of the actual note so that's going to be
13:45 - the X and Y values here later on that
13:47 - we're going to use so
13:48 - json. parse we need to parse that data
13:51 - and that's going to be note. position
13:54 - and then we're going to do the same for
13:56 - body so const body or Not body but
13:59 - colors and that's going to be json.parse
14:02 - and we'll call note docolors right here
14:06 - so we want to set the unique colors for
14:08 - every note and for the colors we're
14:10 - going to reference this now and that's
14:11 - going to be styled in line so we're
14:13 - going to use a note body color and we're
14:16 - going to set background color and that's
14:18 - going to be referencing colors do color
14:22 - body like that and that should style the
14:24 - note and when I save it you're going to
14:26 - notice that indenting fix so I have a
14:28 - prettier installed on nvs code here so
14:31 - that's how it just autof formats that
14:32 - for me so let's see if this is working
14:34 - so if we go to each note here we go so
14:36 - it looks a little bit off because the
14:38 - text is all white we're going to style
14:40 - that in a second but we at least can see
14:41 - the note width and then the actual text
14:44 - changing based on each note while taking
14:46 - on all the stylings for the note class
14:49 - so moving on to the next step now we're
14:52 - going into part one 1.5 so finalizing
14:56 - note card style so what we need to do
14:58 - here is we we want our note to be like a
15:00 - text field where we can actually make
15:02 - edits directly within the note card but
15:04 - we don't want it to look like a standard
15:05 - text field we want it to look like a
15:07 - note that you can actually write on so
15:09 - what I'm going to do is create a body
15:11 - around the note itself we're going to
15:13 - create a text area here and we're going
15:14 - to style that text area so you can't
15:16 - actually see that and that's also going
15:18 - to have its own colors here so let's go
15:21 - ahead and do that so we're going to
15:22 - create a body and then a text area so
15:27 - we're going to wrap this here and and
15:29 - this is going to be the class of note-
15:32 - body and then the body itself I'm going
15:35 - to copy this and we're going to import
15:37 - this above or paste this above and this
15:39 - will be text area and we'll bring this
15:43 - as the default value actually of the
15:45 - text area so I'm going to bring this in
15:46 - and that's going to be an attribute here
15:48 - so default
15:51 - value and that's where the body is going
15:53 - to go so I need to make sure it's only
15:55 - one curly bracket around that and if we
15:58 - look at the note itself s it looks a
15:59 - little bit bad right now so we want to
16:00 - make sure to style that and we want to
16:03 - go ahead and add in this style right
16:06 - here so for the actual text area we're
16:08 - going to style the text so color text
16:10 - here so for this we're going to do style
16:14 - and the color of the actual text will be
16:17 - colors Das color
16:20 - text and that should give it its unique
16:22 - styling which I think most of these
16:24 - colors will be black so that looks good
16:25 - right there and we need to actually
16:27 - style the text area now so let's go into
16:30 - our guide here and we're going to copy
16:33 - the card body card body text area and
16:36 - then the actual focus of that that text
16:39 - area so let's copy that and then review
16:40 - everything line by line so inside of
16:42 - index.css we're pasting that so card
16:45 - body we add some padding we set a border
16:47 - radius on that body and then the text
16:50 - area itself we want to make sure to
16:52 - inherent the background color from the
16:54 - card itself then we want to make sure
16:56 - that we have no border because you don't
16:57 - want it to look like a text area the
16:59 - height and width we want to make sure
17:00 - that covers everything resize is going
17:03 - to be none we set the font right there
17:05 - and then the focus Styles so let's take
17:08 - a
17:09 - look let's see card-
17:13 - body looks like I added that let's go
17:15 - ahead and just check the note card
17:16 - itself card body that's what it was
17:18 - supposed to be and there we go so we're
17:21 - going to fix this right here but that's
17:23 - looking a lot better it actually looks
17:25 - like a note so let's continue here in
17:29 - finalizing the card style so we want to
17:31 - add in a header now so we're going to
17:33 - create a div with the class name of card
17:35 - header and then the the actual style the
17:38 - color to that is going to be colors.
17:40 - color header so the header is going to
17:41 - be like a variation of that built-in
17:44 - color so let's go ahead and do that
17:47 - we'll create that just above our card
17:49 - body so we'll create the div and this is
17:52 - going to have the class of card- header
17:55 - and then the inline style is going to be
17:58 - background color
17:59 - and that's going to be
18:01 - colors.
18:03 - color header like that okay and then we
18:07 - don't have any text in there and let's
18:09 - just take a look let's see so before we
18:12 - actually see that output we want to make
18:13 - sure to copy the card header CSS so in
18:16 - the next step we're also going to copy
18:18 - that we'll bring this into index.css and
18:21 - I'm going to put this above the card
18:23 - body so we have the card and I want to
18:25 - bring this in so the higher R key is a
18:27 - little bit more accurate we'll save that
18:29 - so we have a default background color I
18:31 - just realized I don't think I need that
18:32 - so I'll update the actual guide here to
18:35 - make sure we don't have that we
18:37 - displayed that as Flex because we're
18:38 - going to have multiple items in there
18:40 - we're going to have a trash icon and
18:41 - then later on when you're saving a note
18:43 - it's going to have that load spinner so
18:44 - we want to make sure that that's in line
18:46 - we set that styling with a padding and
18:48 - let's take a look so I should see the
18:52 - difference here I'm not sure why I don't
18:54 - see it so card header and then in the
18:56 - actual note card it's card header like
18:59 - that color header that's why it's not
19:01 - working so color header and there we go
19:04 - so we don't have anything in there just
19:05 - yet but that styling already gives us a
19:07 - header and then the actual body so
19:10 - moving down to the next step let's go
19:11 - into absolute positioning so we want to
19:14 - actually let's finish up the card header
19:15 - let's go ahead and make this trash icon
19:17 - so what I'm going to do here is I'm
19:18 - going to copy this entire component I
19:21 - recommend you do the same and we're
19:23 - going to go ahead and just re render out
19:25 - this SVG file here so let's copy all of
19:28 - that and that's going to be inside of a
19:30 - folder called icons and the instructions
19:33 - I said to do that inside of icons so
19:36 - let's create a new folder for that so
19:38 - that's going to be icons and that'll be
19:42 - trash.
19:44 - jsx we'll create that we'll paste all of
19:46 - that in and we just want to export
19:49 - default and want to make sure we
19:51 - actually export the trash icon and here
19:54 - again it's just an SVG that we wrap
19:56 - around that we can adjust the size if
19:58 - want by passing that down as a parameter
20:00 - here but all the colors and all of that
20:03 - is all already prepped here so inside of
20:05 - our note card we'll go ahead and import
20:08 - trash and inside of the card header
20:11 - let's create some space and that'll be
20:14 - trash like that and let's take a look so
20:18 - here we go we see the trash icon and
20:20 - then I believe from here we can go to
20:23 - the next steps here and that's where I
20:24 - show you how to import that so absolute
20:27 - positioning so right now every single
20:28 - card has an X and Y value we're going to
20:30 - go ahead and add in position absolute to
20:33 - the card class we'll do that inside of
20:35 - index.css and I'm just going to paste
20:38 - that under my cursor here so we're going
20:40 - to call that position absolute and what
20:42 - this is going to do is it's going to
20:44 - stack all the cards on top of each other
20:45 - because they have an absolute position
20:47 - but we haven't specified what that is so
20:49 - they're all just going to the top and
20:51 - left right here so we only see the last
20:53 - card that's actually on top but they're
20:55 - all right there so to actually place
20:57 - them what we need to do is go into our
20:59 - note card here and we're going to add
21:01 - that directly in the styling because we
21:03 - have these positions right here so
21:05 - remember inside of our fake data.js file
21:09 - we have a X and Y position right here so
21:12 - we're going to grab that and then set
21:14 - that here so in styling let's make sure
21:17 - that that's indented let's add a comma
21:19 - right there and then we're going to set
21:21 - left right now and the value of this
21:24 - we're going to need back tis for this
21:25 - because we need to set the actual
21:27 - position so we're going to do position
21:28 - position. X for left and then we're
21:30 - going to set the pixel value so once
21:34 - that's set we're going to do the same
21:35 - for top here so let's just copy this
21:38 - paste it and that's going to be the top
21:41 - position and that's going to be position
21:43 - y so now we should see the cards placed
21:46 - everywhere so that's perfect now the
21:48 - next thing I want to fix is this scroll
21:50 - right here so what I want to do is make
21:51 - sure that this scroll bar is never seen
21:54 - because by default the max scroll is set
21:56 - to the height of the actual content so
21:59 - let's go ahead and create a function
22:00 - that automatically updates the size of
22:02 - this when a card gets rendered and then
22:04 - as we type it also adjusts to that so in
22:07 - order to actually update this text area
22:09 - we need to create a reference so we can
22:11 - make updates to it so we're going to
22:13 - call or import use ref here and use ref
22:17 - allows us to reference Dom elements and
22:19 - actually update them without rendering
22:21 - the entire components we're able to
22:23 - reference the elements and that's how we
22:25 - can actually set the value for text area
22:27 - and we also need to import use effect
22:29 - and this is called on every single life
22:31 - cycle update so when we first render our
22:33 - component we want to call use effect and
22:36 - we want to call this Auto grow function
22:38 - that we're about to create to make sure
22:40 - that that card is actually updated so
22:42 - let's go ahead and import that we have
22:44 - use ref and use effect and we need to go
22:47 - ahead and create that text area ref so
22:49 - text area ref will be the name of it and
22:53 - use ref the way we call that is we just
22:55 - call use ref directly and the default
22:57 - value will be null and then we assign
23:00 - what this ref is actually going to be by
23:02 - passing this into that text area so we
23:04 - can pass in ref right here and now at
23:07 - any point we can reference this text
23:09 - area by calling something like text
23:11 - area. current because that's going to
23:13 - give us the current value it's a little
23:15 - bit weird but we have to call current in
23:17 - order to actually reference that so
23:19 - let's go ahead and create the function
23:20 - now so we're going to create a function
23:21 - called Auto grow and with autog grow
23:25 - we're going to take the actual reference
23:28 - here so we're going to create the
23:29 - function itself and I completely forgot
23:32 - to pass in that right there so text area
23:35 - ref because we need to pass this in
23:37 - directly into the function and from here
23:40 - let's look at our code here so in this
23:42 - section we first want to destructure
23:45 - text area ref so I want to make sure
23:46 - it's easier to actually get the value so
23:48 - we're going to call const and get the
23:51 - current
23:52 - value and this will be text area ref
23:54 - like that and from here we just want to
23:57 - set the height to Auto and then adjust
24:00 - the actual height in pixels so let's
24:02 - paste that in and as we call the
24:04 - function we're getting the current value
24:07 - of the text area so current is just that
24:09 - text area itself and we're first saying
24:11 - the style of the height is going to be
24:13 - Auto so auto adjust that and then set
24:15 - that in pixel value and we're taking the
24:17 - current scroll height to adjust that so
24:20 - that's all this function does now to
24:21 - actually call this because right now we
24:23 - have the function but we're not doing
24:24 - anything with it we want to call this on
24:26 - first load so we're going to use effect
24:28 - here and we're going to pass in an empty
24:31 - dependency array because we only want
24:33 - this to be called on the first iteration
24:35 - of this or the first render and we're
24:37 - going to call autog grow and let's pass
24:40 - in the text area ref so at this point
24:44 - the cards should grow like that but the
24:46 - only issue is as I add stuff to it now
24:49 - we see the scroll bar because we have a
24:51 - fixed height to that we have a set
24:52 - height but we're not adjusting it so
24:54 - once we exceed a certain value the Cards
24:57 - start growing so in order to fix that
24:59 - what I'm going to do is go ahead and go
25:00 - into the text area and I'm going to call
25:02 - this on input so we're going to
25:04 - reference the on input uh event listener
25:06 - so as we're typing we're going to go
25:08 - ahead and call the autog grow function
25:11 - and we need to put that in a function
25:12 - because we need to pass in a value to
25:14 - this so autog grow here we pass in the
25:18 - text area ref like that and as we make
25:21 - those changes we're just going to go
25:23 - ahead and grow it so right now as I grow
25:25 - that and as I decrease that it shrinks
25:28 - and grows with me and that's perfect so
25:31 - in the next step what we're going to do
25:33 - is go ahead and move on to making our
25:36 - cards
25:39 - dragable so what we're going to do is go
25:41 - ahead and update the position value so
25:44 - right now it's hardcoded we have our
25:46 - position set like this we can't update
25:48 - it so what we'll need to do here is
25:49 - change our position to use the UST State
25:51 - hook instead of hardcoding this value
25:53 - because with the UST State hook we have
25:56 - this set position method that we can
25:57 - call now now what will happen here is
25:59 - every time we drag the card around on
26:02 - the screen we're going to go ahead and
26:03 - call the set position method and this
26:05 - will update the X and Y position of our
26:08 - note card now anytime we call set
26:10 - position this renders that component
26:12 - therefore rendering the component out on
26:14 - the new part of the screen so the top
26:16 - and left Position will change as we drag
26:18 - it around because it just keeps getting
26:20 - rendered therefore creating that
26:22 - draggable effect here so we're going to
26:24 - go ahead and update that let's do that
26:26 - right now so we'll change this to use
26:29 - State we want to import that so use
26:31 - State here and we'll call use State go
26:35 - ahead and just wrap what we currently
26:36 - have and remove that right there and
26:40 - we're going to put that into an array
26:42 - because that's how we set our state so
26:43 - we have the value itself and then set
26:45 - position for the updater method or
26:47 - Setter method and from here what we need
26:51 - to do is we're first going to start with
26:53 - our Mouse position so we want to know
26:54 - where the mouse is when we first click
26:56 - on the the card itself now we don't know
26:58 - what that's going to be right away so
27:00 - we're going to set our Mouse start
27:01 - position X and Y at zero right here so
27:04 - we'll just go ahead and bring this down
27:07 - here and we're also going to need a
27:10 - reference to our card itself so we have
27:12 - some setup to do before we start
27:14 - creating those Mouse move and mouse down
27:16 - events here our card ref is going to
27:18 - reference the card itself so let's bring
27:21 - that in here just above our card class
27:25 - and we'll set the ref here and from here
27:27 - we can create create our functions to
27:29 - respond to certain Mouse events so the
27:31 - first one we're going to listen for is
27:33 - going to be the mouse down event and
27:35 - we're going to pass in the event itself
27:37 - here and on Mouse down what we're going
27:39 - to do is go ahead and set this start
27:42 - position right here and the position is
27:43 - going to be the current Mouse position
27:45 - so we'll set the x position to e.
27:49 - clientx and we'll do the same for the Y
27:52 - position so Mouse start POS is going to
27:56 - be or Mouse start p Y is going to be e.
27:59 - client y so we set that initial position
28:02 - and we're going to use these values to
28:04 - calculate the distance from the current
28:06 - position to the next one so we have to
28:08 - set it on Mouse down and from here we're
28:11 - going to call document. addevent
28:13 - listener and we're going to listen for
28:15 - the mouse move event now on Mouse move
28:18 - we're going to trigger the mouse move
28:21 - function which we don't have yet so
28:22 - we're going to create that so we kick
28:24 - things off here we add that to the Dom
28:26 - let's create the mouse move move
28:28 - function and this is really where all
28:30 - the magic happens here and I'm going to
28:31 - have to do a little bit of explaining
28:33 - here just to make sure you understand
28:34 - how it works so on Mouse move first
28:37 - thing we're going to do is create a
28:39 - object here called Mouse move dur for
28:42 - Mouse move Direction and this is going
28:44 - to be an object that holds the X and Y
28:45 - position so X is going to be calculated
28:48 - by taking the current Mouse Exposition
28:51 - and subtracting it from the new position
28:53 - so e. client X like that so from the
28:56 - time we clicked on it to where when we
28:59 - moved it that position had changed and
29:02 - we want to know this is going to be a
29:03 - couple of pixels to the top bottom right
29:06 - left wherever that goes we're going to
29:08 - figure out how far that moved and we're
29:10 - going to take that value and we're going
29:11 - to be able to calculate the new position
29:13 - based on that so we'll take the X
29:16 - position and we'll do the same for y and
29:19 - we'll do e do client Y and I'll show you
29:22 - the output here in a second so we're
29:23 - going to take these values then once we
29:26 - figure out the mouse move Direction
29:28 - we're going to reset the mouse starting
29:30 - positions for the next move because we
29:33 - can call this mouse move function maybe
29:36 - a 100 times in a second or a couple
29:38 - seconds because we're going to drag it
29:39 - across the screen and it's going to
29:41 - recalculate every single second that it
29:43 - moves or every single time so we want to
29:45 - set the mouse start position so on the
29:47 - next move we can run that calculation
29:49 - again and I just realized we need to set
29:52 - y right there okay so let's go ahead and
29:54 - actually start this off here and it's
29:57 - not going to work too well because we're
29:59 - not actually going to update the card
30:00 - but let's go ahead and console out the
30:03 - mouse Direction here so console.log
30:05 - we'll take this mouse move Direction and
30:07 - I just want to show you what this looks
30:09 - like so let's throw that out here and we
30:12 - want to trigger Mouse down anytime we
30:15 - click on the card header so let's go
30:17 - ahead and add that here so on Mouse down
30:21 - we'll call the mouse down function and
30:24 - let's just take a look here so we have
30:26 - our console open and as I click on it
30:29 - now I'm just moving this around and you
30:31 - notice how the X and Y position keep
30:33 - changing let's zoom in a little bit and
30:35 - see this here so as I'm moving the
30:37 - card's not moving but it's tracking my
30:38 - mouse here so if I move to the right we
30:40 - see a bunch of minus ones there and then
30:42 - if I move up we keep seeing those pixel
30:45 - values change so that's what we're doing
30:46 - here now once we've done that we can
30:48 - actually move the card here so let's go
30:51 - back into our not card and we want to
30:53 - actually set the position itself so once
30:56 - we've recalculated everything we
30:58 - calibrated it all let's go ahead and
30:59 - clear that up we can call set position
31:02 - and this will update the actual card
31:03 - because we're going to update the state
31:05 - here now within the set position
31:07 - function we're going to set the x
31:08 - position and we're going to calculate
31:10 - this by calling card ref. current and
31:14 - we're going to use the offset top and
31:16 - left position so
31:18 - current. offset top or offset left to
31:22 - start and that's going to be minus Mouse
31:25 - move dur Direction dox and we're going
31:29 - to do the same for y so offset left
31:31 - tells us the diff distance from our
31:33 - current card to the left side of our
31:36 - screen and then y does the distance from
31:39 - the top to the current card here so
31:41 - Mouse move Y and then this is going to
31:43 - be top right here so let's take that
31:47 - update it I'm just making sure it's all
31:48 - right so card ref. current offset left
31:51 - for x and then offset top for y okay so
31:56 - that should do it let's see if we have
31:57 - any errors so now when I drag it look at
31:59 - that I can move it around the only issue
32:01 - is I let go and I can still move it it
32:03 - doesn't let go of the actual card itself
32:06 - I can click on the next card or maybe it
32:07 - won't I guess the only way for me to do
32:09 - that is by refreshing the screen now
32:11 - what we want to do is we want to go
32:13 - ahead and remove the event listener on
32:15 - Mouse up so when we let go we want to
32:17 - make sure we can actually release this
32:19 - card remove those event listeners and
32:21 - then click on another card so let's go
32:23 - into our notes here and we'll move down
32:26 - here so we added Mouse down now on Mouse
32:28 - up all we're going to do is go ahead and
32:30 - remove the mouse move and mouse up event
32:33 - listener so really what I need to do is
32:36 - I need to actually add the mouse up
32:39 - event here so let's start by creating
32:41 - this entire function we'll bring this in
32:43 - here so after Mouse move we'll bring
32:46 - this right here but Mouse up is not
32:48 - technically added to the Dom yet so
32:50 - we'll just go ahead and bring this right
32:52 - here so on Mouse down we're going to add
32:54 - the mouse up event function and this is
32:57 - going to be Mouse Mouse up and we'll
32:59 - call Mouse up like that so once I save
33:02 - that we should go ahead and remove those
33:04 - and if I test this out let's go ahead
33:06 - and refresh it and now I should be able
33:09 - to grab any card and move it around let
33:11 - go grab another one and we successfully
33:14 - have added and removed those events as
33:16 - we're clicking on those cards and that
33:18 - gives us that perfect effect of being
33:20 - able to grab and drag and drop any card
33:22 - now there is something that's happening
33:24 - here that I want to fix there's actually
33:25 - a few things but one of those is the
33:27 - fact that I can take this card and I can
33:28 - move it way off of screen and then now
33:31 - from here I can't grab it now if it goes
33:33 - to the bottom left and right technically
33:35 - I can set some bounds here too but
33:37 - that's fine because I can scroll so
33:39 - anytime it goes this way I can scroll
33:40 - but I shouldn't be able to go all the
33:42 - way to the top now in order to get this
33:44 - I have to refresh but if that's saved I
33:46 - can't get that item anymore so I want to
33:48 - create those borders so let's go ahead
33:51 - and go into our guide here and let's go
33:53 - into section 2.2 inside of setting
33:56 - bounds and what we'll do here is we're
33:58 - going to create a new function here and
34:00 - we're going to put this into its own
34:01 - file and this function is going to allow
34:03 - us to calculate the actual distance from
34:07 - the top and left and if that value goes
34:09 - below -1 then we go ahead and set that
34:12 - to zero so it's going to go ahead and
34:13 - reset it and it doesn't let us drag it
34:15 - any further and we've just done this
34:18 - right now so we're basically abstracting
34:20 - this code and we're putting it into that
34:21 - function then we're going to take this
34:23 - new offset function or set new offset
34:26 - and we're going to use this function
34:27 - function right here to create that new
34:29 - position and then we'll call that with
34:31 - the set position method so let's go
34:33 - ahead and create the function and this
34:34 - is going to be inside of
34:37 - utils.py
34:43 - be set new offset and with this function
34:48 - we want to pass in the card ref itself
34:51 - and then the mouse move Direction so the
34:53 - direction we actually moved and card ref
34:55 - will be passed in as card as a parameter
34:58 - here so we'll bring that in and then
35:00 - Mouse move dur and if we don't have any
35:04 - values we're going to set X to Zero and
35:06 - then y to zero so we just want to make
35:09 - sure we at least have some default
35:10 - values so that's only if we don't pass
35:13 - anything in now within the function
35:15 - itself let's go ahead and set the
35:16 - variable of offset left and this will be
35:20 - equal to card. offset left minus the
35:25 - mouse move Direction so we first want to
35:27 - figure out where we're going to
35:28 - reposition it and if these values are
35:31 - less than zero then we update so Mouse
35:33 - move Direction X we want to update that
35:36 - and then const offset top and that's
35:40 - going to be
35:42 - card. offset top like that minus Mouse
35:46 - move Direction doy okay so let's go
35:50 - ahead and return the following so we'll
35:53 - return an object here and X will be
35:55 - equal to offset left and if we're less
36:00 - than zero then we want to go ahead and
36:02 - update this so we're going to throw in a
36:04 - question mark here if it's less than
36:06 - zero we set it to zero so if it's minus
36:08 - one then we update that we don't let it
36:09 - go any further and if it's not then we
36:12 - just pass in the original offset left
36:15 - value let's grab this for x and we'll do
36:17 - the same for Top This will be top right
36:20 - here and we'll fix this change that to
36:23 - top and that should be done once I
36:26 - update this just making sure offset top
36:29 - y okay perfect so we can take this
36:32 - function and bring this into no card so
36:35 - we'll
36:37 - import set
36:39 - offset from utils and we're just going
36:42 - to make the update by setting new
36:44 - position on Mouse move so we'll create a
36:47 - variable called new
36:50 - position and this will be using set new
36:54 - offset and we're going to pass in card
36:57 - rep do current so that's how we get that
37:00 - offset top and left position and then
37:02 - Mouse move Direction which we get from
37:05 - here so we set those values and then we
37:07 - can update set position to new position
37:10 - because new position is returning this
37:13 - object so let's go ahead and give this a
37:15 - test so if we try this out let's refresh
37:18 - it now when I move it I can't move any
37:20 - further to the left and I can't move any
37:23 - further to the top because once we go
37:24 - negative it stops us but we can move
37:27 - right so perfect that's exactly what we
37:29 - needed so next step here let's go ahead
37:32 - and actually clean up our code a little
37:33 - bit so this autog grow function let's
37:36 - just bring this into our utils.py
37:57 - hopefully we don't have any errors let's
37:58 - see it looks like we have a bug here
38:01 - what's the
38:03 - issue so text area ref is not
38:07 - defined text area ref okay that's what
38:10 - happened so I need to update this
38:12 - because we need to pass down that
38:14 - parameter and I didn't pass it down
38:15 - correctly so now when I refresh It autog
38:18 - Grow should work perfect our code is a
38:20 - little bit cleaner and now we can move
38:23 - to active card Z index so what's
38:26 - happening here is right now anytime I
38:28 - click on a card it looks fine but what
38:30 - happens if I click on the card behind it
38:32 - well right now this card just happens to
38:34 - be on top but if I click on the card
38:36 - behind it I want the currently active
38:38 - card to be brought to front so I don't
38:40 - want this to be random I want to make
38:42 - sure that we always have an active State
38:44 - and we can see the card that should
38:46 - happen on Mouse down anytime I start
38:48 - typing so we need to update this right
38:51 - here to make sure that we actually have
38:52 - an active state so going back into our
38:54 - notes what we're going to do is create a
38:56 - zindex function here and we're going to
38:58 - take the currently active card and we're
39:00 - going to set the zindex to 99 so a very
39:03 - high number that way it's at the very
39:04 - top but the problem is we could have
39:06 - other cards that have a z index of 99 if
39:08 - we clicked on them before so we're going
39:11 - to take all the cards we're going to get
39:13 - the cards by the card class and we're
39:16 - going to Loop through them so on click
39:17 - of a card we're going to take all the
39:19 - other cards and set the Z index to minus
39:22 - one based on the current card and we're
39:24 - only going to do this if those are not
39:26 - the ACT active card so let's go ahead
39:29 - and just copy this I want to get this
39:30 - one done pretty quick here and I just
39:33 - want to make sure to explain it too so
39:35 - let's see inside of utils we'll paste
39:37 - this in so first we're exporting this so
39:40 - we can use it this is in
39:51 - uil.com by class name we get the card
39:55 - value we Loop through them and and we
39:57 - need to make sure that we're using array
39:59 - from because this is an HTML collection
40:01 - if we want to iterate through this we
40:03 - need to make sure that we're creating an
40:04 - array out of this and then we're
40:06 - checking if the card so on each
40:08 - iteration if the current card on the
40:10 - iteration is not the selected card go
40:13 - ahead and update the card style. zindex
40:16 - value to the selected card. style zindex
40:20 - value minus one so that means every
40:21 - other card will have a z index of 998
40:24 - and then this one the active card will
40:26 - be 9 99 so let's import that here we'll
40:30 - bring that
40:32 - into set Z Index right here from utils
40:35 - in note card jsx and this is going to be
40:38 - on Mouse down here so as we click on it
40:42 - let's call set zindex and we'll pass in
40:46 - card ref. current and I just want to
40:49 - make sure that's right based on the
40:50 - notes here so we pass in card ref
40:53 - current on Mouse down and then I also
40:55 - want to do this on Focus so anytime we
40:57 - actually click to focus on that so I'll
40:59 - show you what I mean by that so if I
41:00 - click on this that brings it to the top
41:03 - and that brings it to the top too but
41:05 - this right here is focus State on that
41:07 - pink card right there so I want to make
41:08 - sure that that also brings it to the top
41:10 - so we're going to go ahead and call that
41:13 - and pass in the current card so on the
41:15 - text area let's set this to on
41:19 - focus and we're going to go ahead and
41:21 - put this inside of a function and we'll
41:23 - do set Z index and we can pass in card
41:29 - ref. current and that should do it on
41:32 - Focus as well so if I click on that
41:34 - there we go start typing and the latest
41:37 - or the active card is always set to the
41:39 - top so that completes most of our
41:41 - functionality for the cards now it's
41:43 - time to officially build out a
41:47 - backend all right now it's time to
41:49 - really make this project a full stack
41:51 - application and for our backend we are
41:54 - going to be using aight as I mentioned
41:56 - in the intro so if you haven't created
41:58 - an account with aight do that at
42:01 - aight. and it's free to do so so go
42:03 - ahead and register and we're going to
42:05 - start walking through those steps and
42:06 - setting up our database so you're just
42:09 - going to need to go ahead and register
42:10 - create an organization and once you have
42:12 - that organization you are going to be
42:14 - prompted to see this screen right here
42:16 - where you can create your first project
42:18 - so let's go ahead and do that once
42:20 - you're here click on create project and
42:23 - I'm going to call this sticky notes you
42:25 - can name this whatever you want and by
42:27 - default we're going to be given a
42:29 - project ID so it's going to be
42:31 - autogenerated for us go ahead and create
42:33 - that okay so here's our project
42:35 - dashboard and for now all we're going to
42:37 - do is focus on the database adding some
42:40 - data and then connecting to that from
42:42 - the web SDK so let's go ahead and create
42:44 - our database and I'm going to create a
42:46 - database called Dev as in development
42:48 - you can name this whatever you want and
42:50 - for the database ID I'm just going to
42:52 - leave that blank and let aight generate
42:54 - that for me now inside of a database we
42:56 - have our tables you can call them
42:58 - collections uh we're changing this name
43:00 - up a little bit but aight technically
43:02 - has a relational database so you can
43:04 - call this a table I prefer to do that
43:06 - but I'm sure I'll reference it in
43:07 - different ways so we're going to create
43:09 - this collection or table and I'm going
43:11 - to call this notes here and same thing
43:14 - we're going to create the collection ID
43:16 - aight is going to generate one for me
43:18 - and once we have our collection we need
43:21 - to set some attributes for this
43:22 - collection so what's a note going to
43:24 - look like we need to Define that
43:26 - database schema so for a note what I'm
43:29 - going to do is make sure that we have a
43:30 - note body and that's going to be a
43:32 - string here so even though we're going
43:33 - to have some rich text in here we're
43:35 - going to make that a string and then
43:36 - we're going to stringify data and hold
43:38 - it in there I'm sure you saw that in the
43:39 - Json object where we had that Dynamic
43:42 - data we stringified it it's still
43:43 - technically text and I'm going to set
43:45 - the max value to let's say I don't know
43:48 - thousand maybe whatever whatever works
43:50 - there go ahead and create that for
43:52 - yourself and with that we also want some
43:55 - colors and that's also going to be a
43:57 - string because we're going to store this
43:59 - as an object but for our colors we're
44:02 - just going to stringify that data let's
44:04 - go ahead and just add in 200 I think
44:06 - that's enough space for us and we'll hit
44:09 - create hopefully we don't run into
44:11 - limits there and we're going to go ahead
44:13 - and set our position and this will also
44:16 - be a string because all of that
44:17 - stringified so the size for this let's
44:20 - just go 200 so we're going to have an
44:22 - object inside of position and inside of
44:24 - colors and we're going to reference that
44:27 - soon so once we have that what we need
44:30 - to do is go ahead and add some documents
44:31 - and what I did here is inside of our
44:33 - guide here inside of part three in the
44:37 - app right backend section I'm going to
44:39 - update this by the time the video is
44:40 - released but I did add in some dummy
44:43 - data that you can use here so what I'm
44:44 - going to do here is create our first
44:46 - note we have note number one and I'll
44:48 - just zoom in a little bit and inside of
44:51 - note number one we're going to set this
44:52 - for our colors so let's just copy this
44:55 - and hit create document for our Colors
44:59 - Let's just throw that in right there so
45:01 - we'll save it
45:03 - create and we're going to grab the
45:06 - position right here let's take that and
45:09 - I just realized I probably should add
45:11 - that in multiple areas before I save it
45:12 - so we're going to add that and we'll
45:13 - just say uh first note some kind of body
45:16 - text let's go ahead and add it and then
45:18 - we'll just quickly do the same for the
45:21 - other two notes so in my case I'm just
45:23 - going to do two but I have three
45:25 - examples here so we'll bring that in
45:27 - we'll add in another note create
45:28 - document and we'll say hello and that's
45:32 - going to be our colors and our position
45:35 - here we're going to set X and Y bring
45:38 - that in and save that and there we go so
45:42 - we have some notes now before we can
45:44 - actually connect to our app right back
45:46 - end here what we need to do is we need
45:48 - to make sure that we set our permissions
45:50 - So within our collection if we try to
45:52 - make a request by default that request
45:54 - is going to be blocked and why that's
45:56 - going to happen is because aight is
45:57 - going to be secure by default it's not
45:59 - just going to allow anybody to make that
46:00 - request so what we're going to say is we
46:03 - can set a position for certain users
46:05 - different types of users we're going to
46:07 - select it select any here and we're
46:09 - going to say anybody can create read
46:11 - update and delete so make these types of
46:13 - requests to this database now in theory
46:15 - that's not very secure but because of
46:17 - this tutorial I want you to be able to
46:19 - work with this right now let's go ahead
46:20 - and just set it this way now once
46:22 - permissions are set let's go ahead and
46:25 - actually connect to our web SDK and
46:26 - there's one other thing that we need to
46:28 - do so we need to go into the overview
46:30 - Tab and we need to set allowed host to
46:33 - our application so this is basically
46:35 - course configuration now whenever
46:37 - someone tries to make a request aight if
46:39 - it doesn't recognize what URL that's
46:41 - coming from so in our case it's going to
46:43 - be Local Host it's going to block that
46:45 - request because we don't want just
46:46 - random people spamming R SDK and trying
46:48 - to make requests to it so we're going to
46:51 - hit add a platform and this is going to
46:52 - be web and we'll just say my app that's
46:55 - where we're making these requests from
46:57 - and we're going to say Local Host and we
46:59 - don't need to specify a port number so
47:01 - we'll hit next and from here it's
47:04 - showing us how to install the aight web
47:06 - SDK so let's just copy that and let's
47:08 - actually bring that in and let's run npm
47:12 - install app right so we can turn off our
47:15 - server hit paste npm install app right
47:18 - so we're doing this simultaneously so we
47:20 - just install the aight web SDK and we're
47:23 - just going to click next I'm going to
47:24 - skip this part and this is going to get
47:26 - set up in a second so we'll just go
47:28 - through this and now we've officially
47:30 - allowed a host here so we've allowed a
47:32 - host we've set our permissions we've
47:33 - created a database a table added data
47:36 - and we can start connecting to this so
47:38 - we'll go back into our guide and let's
47:40 - just see what the next step is here so
47:42 - inside of basic config here first thing
47:44 - I'm going to do is go ahead and just
47:45 - copy all of this we'll just grab this
47:48 - and we need to set some of our app right
47:51 - core settings here so we need to know
47:52 - our project ID our database ID our
47:55 - collection ID and and make sure that we
47:57 - can use these to connect to it so I'm
48:00 - going to create a EnV file in the root
48:03 - directory so EnV and we'll paste this in
48:06 - so for the endpoint that's just going to
48:08 - be cloud. aight.
48:11 - iv1 for the project ID we're going to
48:14 - get this from our overview Tab and
48:16 - that's this project ID make sure you're
48:17 - getting your own I'm going to delete
48:19 - Mine by the time this video comes out so
48:20 - don't try to make request to mine for
48:23 - the database ID we're just going to grab
48:25 - this one right here let's bring this in
48:28 - and for the collection ID we're just
48:31 - going to grab this one from notes so we
48:35 - have our IDs let's just run our server
48:37 - so npm run Dev and before we continue
48:41 - there let's go to the next step here and
48:43 - this is where we want to connect to our
48:44 - SDK so what I'm going to do is create a
48:47 - folder named aight and all aight
48:48 - configuration is going to go into this
48:50 - folder so to create that configuration
48:52 - let's go into our source folder and
48:54 - we're going to create a new file and
48:56 - folder so this will be aight and then
48:58 - SLC config.js and this is where the core
49:02 - aight configuration will sit so we're
49:04 - going to first import the client
49:06 - instance this is how we can initialize
49:08 - an app right client then to make any
49:11 - request to the databases we're going to
49:12 - import databases and we're just going to
49:15 - call const client initialize the actual
49:18 - client instance and this will be new and
49:21 - we're going to call the client class now
49:24 - here in order to actually set that up we
49:26 - want want to set up the endpoint so
49:28 - where are we going to make requests to
49:30 - and that's going to be this right here
49:32 - so the V endpoint that's going to cloud.
49:35 - aight.
49:37 - iv1 and we can import that by going to
49:40 - import. meta Dov and then pasting in the
49:45 - environment variable so with the
49:46 - endpoint we also need to specify the
49:49 - project ID so what's the project that
49:51 - we're going to connect to and that'll be
49:53 - the same thing we'll grab that bring
49:56 - that in and then we're going to copy V
49:58 - project
49:59 - ID and that should set that up okay so
50:03 - with that we also need to create an
50:04 - instance of our database so we'll do
50:06 - const databases and remember we can have
50:09 - multiple databases so that's why we're
50:10 - going to set the variable up this way so
50:12 - data bases and we're going to call new
50:17 - call the databases class and pass in the
50:19 - client instance okay so once we have
50:22 - that we'll export it and we want to
50:24 - export the clients so we want to access
50:26 - this anywhere and then the databases
50:29 - class right there the
50:32 - instance so now we're officially
50:34 - connected to our app right web SDK and
50:36 - it's time to make some requests to our
50:38 - backend and get that data that we set up
50:40 - here in the previous step so what I'm
50:42 - going to do here is go into my notes
50:44 - page and we want to stop working with
50:46 - this fake data so we're going to comment
50:47 - that out and because we're about to make
50:50 - this request we need to set some state
50:52 - so we're going to import use State and
50:54 - use effect here and inside of my my
50:56 - notes page we're now going to work with
50:58 - some real States so we're going to set
50:59 - notes here and then the setter method
51:01 - which is going to be set notes and this
51:04 - is going to use use state which will be
51:06 - an empty array when we first start this
51:09 - so if we go to my page here we see that
51:11 - we have no notes so we need to populate
51:13 - this we're going to make the request
51:15 - from this init function which is going
51:17 - to be an Asing function and within this
51:20 - function we need to import the databases
51:23 - class from our aight config file because
51:25 - this is how we make first request so
51:28 - we're going to do this just underneath
51:30 - our fake data our fake notes here that
51:32 - import we're going to do this just below
51:34 - it and we're going to import databases
51:37 - and that's going to be from aight config
51:39 - so we import that instance and we want
51:42 - to make that request which will bring
51:44 - back a response and we'll use await and
51:47 - to make a request to the app right
51:48 - backend to get a list of data from a
51:50 - collection or a table we're going to
51:52 - call databases. list documents and
51:56 - there's a few parameters here that we
51:57 - need to set so first of all we need to
52:00 - set the database that we're making a
52:01 - request to so we're going to import and
52:03 - we're just going to actually copy this
52:05 - right here we need the database ID so
52:09 - that's the first parameter and we're
52:11 - going to do V database uncore ID and
52:15 - after that we need our collection ID so
52:17 - which collection are we going to make
52:18 - this request to and that's going to be
52:21 - V and let's just actually copy this from
52:24 - our EnV file so V Collection notes ID
52:29 - and that's going to make that request
52:32 - and let's just console this out so we'll
52:33 - console do log and let's see what that
52:36 - looks like so response is going to give
52:37 - us the total along with an array of
52:39 - objects if everything works successfully
52:41 - but before we do that we need to call a
52:43 - use effect
52:44 - here we need to actually call the
52:46 - function throw in an empty dependency
52:49 - array so we don't call this more than
52:51 - once and let's trigger init and let's
52:54 - see what we get so we're log out the
52:57 - response let's go ahead and inspect
52:59 - element go to console
53:03 - here refresh it and here we go so we see
53:07 - a total so two documents those are the
53:08 - two items that we added to our database
53:11 - here and then we see these two objects
53:13 - right here where we have our first note
53:15 - and we say hello so what we need to do
53:18 - with this is go ahead and just take this
53:20 - response right now so we're going to
53:22 - call set
53:23 - notes and set notes is going to be
53:25 - response do documents so that should
53:28 - populate it so let's go ahead and see
53:30 - what we get in the front end and at this
53:32 - point we should actually run into an air
53:34 - and I want to explain what's going on
53:36 - here so at this point this is telling us
53:38 - that we can't parse the data inside of
53:40 - our note body here so essentially what's
53:42 - happening is we have a string inside of
53:45 - our body text here so if we go to the
53:47 - note component we're taking this body
53:50 - right here and we're parsing it
53:51 - expecting that to be Json data because
53:54 - if this is going to be rich text we
53:55 - stringify it and enter it into our
53:57 - database and then when we parse it out
53:59 - then it goes back to standard text here
54:01 - well in our database we added just
54:03 - standard text it's not technically Json
54:05 - data if I wanted to make this Json data
54:07 - what I could do is go ahead and change
54:10 - this and add some quotes to that and
54:12 - that'll make it standard Json data
54:14 - because it's stringifying it but we
54:16 - don't always know if this is going to be
54:17 - the case here because if someone adds
54:19 - data manually here then it changes up
54:21 - our entire back end so what we're going
54:22 - to do here is we're going to create a
54:24 - function here that doesn't just parse
54:25 - the data we're going to create a
54:26 - function called body parser and we're
54:29 - simply going to check if this is Json
54:31 - data if it is we parse it if it's not
54:33 - then we just return back that standard
54:35 - text and that should return back this
54:38 - array of data without any errors here so
54:40 - let's go ahead and do that and we're
54:41 - going to do that in utils do JS here so
54:44 - let's go ahead and create that function
54:46 - and we'll export that call it body
54:50 - parser and this function is going to
54:52 - take in a value and that's going to be
54:53 - the actual body from the note here we'll
54:55 - make that an arrow function
54:56 - and we're going to create a try catch
54:58 - here so we'll do try and then catch and
55:02 - in this case right here let's go ahead
55:03 - and finish up the catch in the try
55:05 - method right here what we'll need here
55:07 - is just to try to parse that data so
55:09 - we'll do json. parse and we're going to
55:11 - take in the value which is going to be
55:13 - that body if this works we're just going
55:15 - to go ahead and return this we'll do
55:17 - return like that and the function will
55:19 - return the par data if not then we're
55:22 - just going to go ahead and return the
55:24 - value itself so we'll just do return if
55:26 - I can spell that and that'll be the
55:28 - value now we can take this function
55:31 - bring this into our note card let's
55:34 - import that from utils and we're going
55:36 - to change this right here so let's copy
55:38 - body parser let's take this import it
55:41 - and change json.parse to body parser so
55:45 - we're either returning back the string
55:47 - or the parsed Json string here so once
55:50 - we have that there we go now we can see
55:52 - the data so even though this is a string
55:54 - it renders it out just fine so that's
55:55 - exactly what we needed and this is data
55:57 - from our backend so right now if we just
55:59 - go ahead and add in something like hello
56:01 - world so we'll change this and let's
56:04 - make this Json data right here so we'll
56:06 - add quotes around it so that way it can
56:08 - actually be parsed and let's make sure
56:10 - that the other alternative works here
56:12 - too so if I refresh this now we see
56:14 - Hello World now there's a few things
56:16 - here that I want to fix up here so I
56:18 - mentioned this inside of the
56:19 - documentation and one of the things I
56:21 - want to take a look at is going to be
56:23 - the notes page here app right has a web
56:27 - and they're standard methods that we get
56:28 - to work with so if we want to render
56:30 - data out we have list documents if we
56:32 - want to get data like a single object we
56:34 - have a get document function create
56:36 - update and delete and one of the things
56:39 - with these is they have built-in or
56:41 - default parameters that we need to use
56:43 - like passing in the database ID and the
56:45 - note ID well I want to simplify this a
56:47 - little bit and I want to make this a
56:49 - little bit more human readable because
56:51 - ideally I would do something like this
56:53 - I'll would do response await and then
56:55 - just call DB do notes and just call list
56:59 - because I don't want to I want to change
57:01 - that to DB I don't want to have to
57:03 - remember the databased collection ID
57:05 - every single time or both IDs I don't
57:07 - want to have to import this every time
57:08 - it's a little bit messy so I would
57:10 - prefer creating some kind of wrappers
57:11 - around this and making this process a
57:14 - lot easier so what I'm going to do is go
57:15 - ahead and just comment this out right
57:16 - now and we're going to replicate this
57:19 - call right here and I already added this
57:21 - inside of my documentation so inside of
57:25 - basic config here what I'm doing here is
57:27 - I'm going to go ahead and create this
57:29 - array of collections so let's copy this
57:31 - right here in database config and inside
57:35 - of my config file I just want to add
57:37 - this right here which presets my
57:40 - collection information so I want a human
57:42 - readable name so I want this to be notes
57:44 - and if you have more collections you
57:45 - would add that name here and then I want
57:47 - to pass in the ID for the collection
57:49 - itself and then the database ID so I
57:52 - don't have to specify this every single
57:54 - time now we have this array of
57:56 - Collections and I'm going to go ahead
57:58 - and Export this and with this step I'm
58:00 - going to summarize it briefly but I
58:02 - highly recommend you just copy this and
58:03 - we move on from here I have a full video
58:05 - that explains this so I'll link that up
58:08 - but in this case what we need to do is
58:10 - we need to create a databases. JS file
58:13 - and we're going to go ahead and just
58:15 - copy all of this into that file and I'll
58:17 - summarize it quickly so inside of the
58:20 - app right folder we'll create a
58:22 - databases. JS file and we'll paste this
58:25 - in and in this file what we do is we
58:27 - import the databases instance right here
58:30 - then we also import the collections
58:32 - right here that we set up so that
58:35 - information for the collections itself
58:37 - and then we create a DB object here so
58:41 - with that object we Loop through all the
58:43 - collections in our array which we only
58:45 - have one and we just go ahead and wrap
58:47 - each app right method so create document
58:50 - update document we're still calling
58:52 - these methods under the hood but we're
58:54 - going to change the name and how this is
58:56 - pass along so if I minimize this we now
58:59 - are going to have these methods for or
59:02 - from the DB instance so we pass in the
59:04 - collection name so we can now call db.
59:06 - notes because that's going to be the
59:08 - collection name here and then we're
59:09 - going to call create and pass along the
59:11 - same information which in this case
59:14 - create is simply going to pass in the
59:17 - collection ID the database ID or other
59:19 - way around and then we get to proceed on
59:22 - with the original method so if we do
59:24 - things this way create the databases .js
59:26 - file go ahead and copy and paste this in
59:28 - save it make sure you have this array
59:31 - right here with this information save
59:33 - that make sure you export Collections
59:36 - and inside of your notes page you can
59:38 - now call db. do list so let's actually
59:42 - go ahead and just save this and make
59:44 - sure that this works and we also need to
59:47 - import DB from aight SL databases so
59:52 - it's just a wrapper around our methods
59:54 - and I want to use this way of doing
59:56 - things from now on so it's going to
59:57 - really simplify things so if I want to
59:59 - make sure that that's working let's
60:01 - refresh it I shouldn't have any errors
60:02 - in the console and that really should
60:05 - simplify our process and it looks like
60:06 - it works exactly as it's supposed
60:10 - to all right so now it's time for the
60:12 - fun stuff we're going to make some
60:13 - updates to our database anytime we move
60:16 - a note around by Saving its X and Y
60:18 - positions and also we're going to work
60:20 - on saving the actual notes content here
60:23 - so when I refresh it none of this
60:25 - information saved so that's what we're
60:27 - going to work on so the first thing
60:28 - we're going to do is we're going to work
60:29 - on saving the position so when we drag
60:32 - an item here on Mouse up that's when
60:34 - we're going to trigger an update to the
60:35 - database it's going to take those X and
60:37 - Y values and save them so inside of
60:40 - section or part number four in Saving
60:42 - changes this is where we have this in
60:44 - our documentation or in our written
60:46 - guide we're going to start with this
60:48 - part right here and then we'll move back
60:50 - to the save data function so this is
60:52 - going to be just to abstract everything
60:54 - away so that way we can reuse this
60:55 - function
60:56 - but right now in the mouse up event we
60:59 - want to go ahead and get those positions
61:01 - and send the update so inside of my note
61:03 - card component let's import our actually
61:07 - I need to make sure it's not capitalized
61:08 - we're going to import DB and that's
61:11 - going to be from aight SL databases and
61:15 - we want to make that call right here so
61:17 - on Mouse up the first thing I need to do
61:19 - is go ahead and get the new position
61:21 - which we're going to use the set new
61:23 - offset function for and pass in the card
61:26 - itself so card ref. current and if we
61:29 - look at this function right here we pass
61:31 - in the card then we get the offset left
61:34 - and offset top position we check if it's
61:36 - out of bounds if it's not then we just
61:38 - save the actual X and Y position if not
61:41 - it's not an issue and we don't need to
61:42 - put in the mouse Direction because this
61:44 - is on Mouse up we're no longer moving
61:47 - the mouse so it has no New Direction so
61:49 - it returns back this right here
61:51 - basically so X and Y with those
61:53 - positions and once we have that we can
61:56 - call db. notes. update and in this
62:01 - update function first of all we need to
62:02 - know what note we're going to update so
62:04 - we're going to pass in the note ID and
62:06 - then we're going to pass in a payload
62:08 - and in that payload we want to know what
62:10 - attribute we're going to update so this
62:12 - will be our position and this position
62:15 - right here is going to be the new
62:16 - position but we need to stringify that
62:18 - so json. stringify and we're going to
62:21 - pass in new position like that so on
62:24 - Mouse up we're going to get the those
62:26 - new positions from the card itself so
62:28 - top and left pass in position let's make
62:31 - that a string just uh I guess it doesn't
62:33 - matter and that should make the update
62:36 - with a new value so let's try that out
62:38 - so we'll go into our front end let's
62:40 - move these two to the left here if I
62:43 - refresh that awesome it saves it then if
62:46 - I move those here refresh that and the
62:48 - new position is updated so that's
62:51 - exactly what we wanted now from here we
62:53 - want to go ahead and move everything
62:55 - into the SA save data function because
62:57 - we also want to call save data anytime
63:00 - we make an update to the text itself so
63:02 - let's go ahead and create this function
63:03 - so we're going to add this just below
63:05 - our Mouse up function so we're going to
63:07 - call this save data and in here we're
63:10 - going to pass in the key so the
63:12 - attribute we want to update and the
63:14 - value which is going to be the payload
63:16 - so the request we're actually going to
63:17 - make so we'll get this payload we want
63:19 - to make sure that this is stringified
63:21 - here so this is going to be an object
63:23 - and we want the key and then the value
63:26 - is going to be json. stringify and we're
63:29 - passing in value here now with this
63:33 - because of the way we're setting it we
63:34 - need to add in square brackets around
63:36 - that because if we don't this key right
63:38 - here is going to be the string of keys
63:40 - so we want to explicitly make sure that
63:42 - it's going to be the dynamic value so if
63:44 - this is position or if this is body we
63:47 - want to make sure that's added so make
63:48 - sure you don't forget the square
63:50 - brackets so that's payload and once we
63:53 - have the payload we want to create a tri
63:55 - TR catch statement here so we'll do try
63:58 - catch take that error and we'll just do
64:02 - console. error for the error and we want
64:05 - to send that message back now in the try
64:07 - statement we're going to call await
64:09 - we'll make this an Asing function and
64:12 - we're going to call db.
64:15 - notes. update and this is where we just
64:19 - pass in the note ID so we can actually
64:21 - just grab well I'll just write it out so
64:23 - note. ID and then then here we can pass
64:27 - in the payload like that so the payload
64:30 - is now going to be this object so we
64:32 - know what key to update and once we have
64:34 - this we can take save data we'll go
64:37 - ahead and bring this in right here and
64:40 - the key is going to be position so we
64:43 - can take that add this as a string value
64:46 - and then we'll pass in new position as
64:50 - the value of payload or the value that's
64:53 - going to be the payload and we can just
64:55 - get rid of this so that just makes it a
64:57 - little bit cleaner that way we're going
64:58 - to call this and we can actually call
64:59 - this in the next step and it's going to
65:01 - be easier so let's just make sure that
65:02 - this is working we'll go back here we'll
65:05 - refresh everything let's see if I move
65:07 - it we shouldn't have any errors I'm
65:10 - going to check the
65:12 - console and if I refresh it these should
65:14 - stay
65:15 - here and that looks good awesome so we
65:19 - have successfully added some update
65:21 - functionality so in the next section
65:23 - what we're going to do is work on
65:24 - updates any time we make changes to the
65:27 - actual text now the way this is going to
65:29 - work as I showed this in the preview is
65:31 - when a user starts typing we don't want
65:33 - to save on every single key up because
65:35 - if I'm making update request right here
65:37 - that's going to be a lot of requests
65:39 - being sent to the back end so what we're
65:41 - going to do is we're going to add in a
65:42 - load spinner that pops up here and we're
65:44 - going to set a timer so only once the
65:46 - user has stopped typing for 2 seconds
65:48 - then we make that request so if I keep
65:50 - typing we're essentially just going to
65:52 - keep extending another two seconds on
65:54 - every single key up what once we're done
65:56 - then we have that load indicator and
65:58 - then once that goes away that means the
66:00 - request finished up so this is what
66:01 - we're going to do in this next section
66:03 - so let's just copy this saving state
66:05 - right here and let's bring this into the
66:07 - top of our note card component here and
66:10 - I also want to get this key up timer
66:12 - right here which uses a ref and I'll
66:14 - explain what this does in a second but
66:16 - long story short this right here is
66:18 - going to hold the timer ID for the set
66:20 - timeout function so when we call set
66:22 - timeout it returns a timer ID and we're
66:25 - going to need to to clear that anytime
66:26 - we want to create a new timeout so
66:29 - whenever we want to extend those two
66:30 - seconds we need to clear the old one and
66:32 - set a new key up timer so we have that
66:35 - right there and down here just under
66:37 - save data let's create a function called
66:39 - const handle key up and let's go ahead
66:44 - and just finish up the function and we
66:46 - want to attach this to the text area so
66:48 - we'll just add this right here and we'll
66:51 - just do on key up or not key down but on
66:54 - key up so when we're actually inputting
66:57 - the value we're going to call handle key
66:59 - up so with this function I'm going to
67:01 - reference my notes here so the first
67:03 - thing I want to do is call set saving so
67:06 - as we call it saving is now going to be
67:08 - true because we're in that saving State
67:10 - and then we want to go ahead and get our
67:12 - keyup timer. current and we want to set
67:15 - the value to set timeout like this so
67:19 - let's go back to our notes here so in
67:21 - set timeout we're going to add a
67:23 - function in here and we're going to time
67:25 - it out after 2,000 milliseconds so two 2
67:28 - seconds and we're going to call save
67:30 - data we're going to pass in body as the
67:32 - attribute that we want to update and we
67:34 - want to pass in the text area value here
67:37 - so the body data we want to pass that in
67:39 - so let's bring this into the set timeout
67:41 - function so it's a function within it
67:43 - and then the time we're calling save
67:45 - data and then passing this in so before
67:49 - we actually call this if we keep
67:50 - triggering key up it's going to keep
67:52 - setting our timeout and we're going to
67:53 - call this a bunch of times and we don't
67:55 - want to do that so we need to add a
67:57 - condition here and I'm just going to
67:58 - take this directly from here paste it in
68:00 - and then I'll explain it so on set
68:02 - saving we first want to check do we
68:05 - currently have a timer ID in there if we
68:08 - do we clear that because we want to
68:10 - ignore it so this doesn't get called
68:11 - multiple times so if we have it we clear
68:14 - it then we re-update it so that check
68:16 - happens in the beginning now what we
68:17 - want to do is go ahead and take set
68:19 - saving once we actually call save data
68:22 - at the end of this we're going to set
68:24 - this back to false
68:26 - and that's going to go ahead and remove
68:28 - our indicator once we actually add that
68:30 - in so we have that here we already added
68:33 - our event listener and we want to render
68:35 - a saving indicator so let's just copy
68:38 - this directly here and we're going to
68:40 - bring this into our header so inside of
68:42 - not card we have our main div then we
68:46 - have our card header so just after our
68:49 - trash icon here we're going to paste
68:52 - this in and we're going to check this
68:54 - condition so we're first going to check
68:55 - if we're currently saving let's go ahead
68:57 - and just wrap this so if we're currently
68:59 - in Saving State let's go ahead and
69:02 - render out this div with the class name
69:05 - of card saving and then we're just going
69:07 - to go ahead and render out the saving
69:09 - text here so now I want to test this so
69:11 - we'll go to our front end and as I type
69:14 - here check this out so I'm typing saving
69:17 - keeps being rendered out here if I go
69:19 - ahead and remove this it's still
69:21 - rendering out so the timer is working
69:22 - cuz it keeps adding it 2 seconds after
69:24 - it's updated so if I hit G updates one
69:28 - two then it's out I can do the same here
69:30 - and this can render out for both right
69:32 - here and now if I refresh this look at
69:35 - that it's saved in my database so if I
69:37 - go back to my database we'll go to this
69:39 - one right here we're going to go into
69:41 - data and now we have all that text
69:43 - stringified and that's successfully
69:45 - updating my backend so I want to make
69:47 - this look a little bit better so I want
69:48 - to create like a loading indicator so it
69:50 - looks active so we'll go back into our
69:52 - notes here and we're going to copy this
69:54 - entire load spinner component so we're
69:57 - going to copy spinner let's go ahead and
70:00 - bring that into icons here we're going
70:02 - to create a new component called spinner
70:05 - and I need to make sure it's not
70:06 - capitalized so spinner. jsx and we'll
70:10 - paste all of this in and make sure it's
70:12 - exported so this right here is just
70:13 - going to be an SVG we're rendering this
70:16 - out here inside of our note card so I
70:18 - want to import that first so import
70:21 - spinner from our icons here so icons
70:25 - and that's going to be the spinner
70:27 - component let's just copy this right
70:29 - here bring this into our header so just
70:33 - after card saving the opening tag let's
70:36 - throw that in and we want to set the
70:37 - color and the color here is going to be
70:40 - colors. color text we'll throw that in
70:44 - close it off here and let's just see
70:46 - what we get for now so if I refresh that
70:49 - so as I type we see the spinner but it's
70:51 - not actually spinning and the
70:52 - alignment's a little bit off here so
70:53 - we're going to add some CSS to actually
70:55 - fix this so for this the CSS is all
70:58 - provided right here so after our spinner
71:00 - section so in input changes let's go
71:03 - ahead and first of all add this to root
71:05 - inside of index.css so we'll bring this
71:08 - in here so that's going to be the
71:10 - spinning speed here the animation then
71:13 - we're going to take this right here from
71:15 - Key frames all the way down to spinner
71:17 - and then card saving here so that's
71:21 - going to be brought in just after our
71:24 - app or app ID we'll save that and that
71:28 - should make it look good here so now
71:30 - when I type there we go that's the
71:32 - effect that I wanted so that looks good
71:35 - and now we actually update our text we
71:37 - have our load spinner and let's just see
71:38 - what the next section
71:41 - is here we can go into deleting notes
71:44 - here so now we're going to take care of
71:45 - uh our trash icon so we're going to
71:47 - create a button for that icon here we're
71:49 - going to wrap it and then the delete
71:51 - functionality is all going to be handled
71:52 - in the delete button component so let's
71:55 - just Dive Right In and start building
71:56 - this out so we'll go into our components
71:58 - here and we're going to create a new
72:00 - component called the leite button here
72:02 - do jsx and we'll create the component so
72:05 - react Arrow function component export
72:08 - that's my shortcut here and we need to
72:10 - pass in a few values and we're also
72:12 - going to import the trash icon here
72:15 - because we're just going to wrap this
72:16 - here so we'll just go ahead and bring
72:19 - this around we'll just do trash like
72:21 - that close it off and then for the props
72:24 - that we want to pass down we want to get
72:26 - the note ID so we want to know what note
72:28 - are we deleting and then we actually
72:29 - want to update the state here to filter
72:32 - out the note from our front end so we're
72:33 - going to do note ID and then set notes
72:37 - that's going to be passed down as a prop
72:39 - and as far as the function itself goes
72:41 - we're going to create a handle delete
72:42 - function and before we actually add in
72:44 - the delete functionality I want to
72:46 - filter this out from the front end so we
72:47 - can see how this works before we
72:48 - actually start removing that from the
72:50 - database so let's create the function
72:52 - here handle delete and we'll make this
72:56 - an async function and with this let's
72:58 - just go ahead and pass in on click so
73:01 - we're going to do this on the div here
73:03 - so on click we're going to trigger this
73:05 - and that's going to be handle delete and
73:08 - then in the function itself what I'm
73:09 - going to do is just copy set notes here
73:11 - and we're going to bring this in to the
73:14 - function and essentially we're just
73:16 - calling set notes and we're going to
73:18 - filter out the note by ID so we're going
73:20 - to check the note ID and we're going to
73:22 - say on iteration if the current note is
73:24 - the note not ID go ahead and remove it
73:27 - and then return back the new array so we
73:29 - want to call this let's bring this into
73:31 - our note
73:33 - card and we can actually remove the
73:36 - trash icon here so we'll just do delete
73:39 - button and this can now replace the
73:42 - trash icon so down here inside of our
73:45 - header we have trash so we want to pass
73:48 - down set notes and we want to pass down
73:51 - the note ID and then set notes right
73:54 - here we haven't used this yet I believe
73:56 - in this component so we need to actually
73:58 - pass this down through the note card so
74:01 - we'll do set notes like that and then
74:03 - this also needs to be passed down from
74:05 - the parent so let's throw this in
74:08 - because we update this all the way from
74:10 - the parent component so we're going to
74:11 - do a little prop drilling don't worry
74:13 - we're going to clean this up later using
74:14 - the context API but that's in a later
74:17 - section so let's go ahead and throw down
74:20 - set notes so we pass it down to the
74:22 - component then within the note card
74:25 - itself we take it from here then we pass
74:28 - it down to the delete button right here
74:32 - and we want to make sure it's actually
74:34 - passed through and now when I click the
74:36 - delete button again it's not updating
74:38 - the database but we should experience
74:40 - how this removes the actual card so just
74:43 - checking this okay that looks good so
74:45 - far let's go ahead and refresh it let's
74:49 - click delete delete and that removes it
74:53 - and we still see our notes once we
74:54 - refresh so that's good so I want to talk
74:56 - about a little issue that occurs here
74:58 - though so right now we have a mouse down
75:00 - event that gets triggered that
75:02 - eventually triggers a mouse up event
75:04 - that actually updates our component well
75:07 - what's Happening Here is whenever we
75:08 - click on this delete icon here it's not
75:11 - only triggering the click event it's
75:13 - also bubbling out and it's triggering
75:15 - the mouse down event which is trying to
75:17 - update a note that doesn't actually
75:19 - exists so right now we don't have an
75:20 - error because we're not deleting the
75:22 - icon yet but I want to explain what this
75:24 - actually looks like and I write about it
75:25 - here so ultimately anytime I did a full
75:28 - explanation anytime we want to trigger
75:29 - it we trigger the wrong events here so I
75:32 - want to ignore those events so let's
75:34 - just start with this let's just say
75:37 - console.log and we'll just say delete
75:40 - clicked and we're also going to bring
75:42 - this into our note card and we're going
75:45 - to say on Mouse down first we actually
75:48 - want to do this on Mouse up so we're
75:49 - going to say console Mouse up and then
75:52 - we'll just say saving and we also want
75:55 - say mouse up was triggered or Mouse down
75:58 - here so we'll just do
75:59 - console.log and it's kind of a funny
76:01 - issue but it's a really important one
76:03 - because it's going to give us a lot of
76:04 - Errors so we'll say mouse down was
76:07 - triggered so let me explain this so
76:10 - right now if I refresh this and if I
76:12 - click on Mouse down once I release Mouse
76:15 - up is triggering so it's Saving right
76:17 - well if I click on the trash icon we
76:20 - first see Mouse down Mouse up and then
76:23 - delete was click so we don't want to
76:24 - update a note before we delete it so
76:26 - it's basically propagating those events
76:29 - or bubbling those out and it's
76:30 - triggering the wrong events so what I
76:32 - want to do here is I just want to go
76:34 - ahead and add this condition that
76:36 - basically says hey if the current Target
76:38 - so we can figure out what caused that
76:40 - event to fire off so if we click on the
76:42 - icon it's going to basically give us a
76:45 - different class name or a different
76:46 - Target so we want to say if the card
76:48 - header itself was clicked then we just
76:51 - want to go ahead and ignore the rest of
76:53 - the mouse down events therefore not
76:55 - adding the mouse up function and not
76:57 - calling update so let's go ahead and
76:59 - just change this so if I bring this in
77:01 - right here to Mouse down and we're going
77:04 - to say if e. target. class name is the
77:07 - card header go ahead and continue then
77:09 - if not we're just going to ignore it so
77:12 - I wanted to focus on this before we
77:13 - actually start updating the database so
77:15 - right now if I click on it we see Mouse
77:17 - down was triggered that's perfect that's
77:19 - what we wanted but if we click on the
77:20 - trash icon delete was clicked and we're
77:23 - now successfully ignoring that event
77:25 - where we're not ignoring the event
77:27 - itself but we're ignoring the action
77:29 - that occurs after the event so that's
77:31 - what we wanted let's go ahead and just
77:32 - clear out these console logs right here
77:35 - we don't need that anymore we also don't
77:37 - need that inside of our Mouse up event
77:41 - and we don't need that in our delete
77:43 - button so let's remove that and the last
77:47 - step in this process is to actually
77:48 - update the database so now all we're
77:51 - going to do is call db. notes. delete
77:53 - and we're going to pass in the note ID
77:56 - so that's in the delete button here
77:57 - we're going to import DB then inside of
78:00 - handle delete we're going to call db.
78:02 - notes and in order to delete a note all
78:04 - we need to do is call delete and just
78:07 - pass in the note ID so let's try this so
78:10 - if I go back here into my front
78:13 - end let's hit delete and now if I
78:16 - refresh it that note is gone it's no
78:19 - longer in my database so now we only see
78:21 - one note and that takes care of the
78:24 - delete function
78:28 - okay so in this next section we're going
78:29 - to use the context API to lift up our
78:31 - state and have some sort of global state
78:33 - so we're not having to deal with prop
78:35 - Drilling and as our application gets
78:36 - more complex this is going to make
78:38 - things easier so if you're not familiar
78:40 - with a context API you may have heard of
78:42 - something like Redux or react recoil
78:45 - which are basically State manager tools
78:47 - that allow you to lift up State and
78:49 - access that Global State well the
78:50 - context API is like a built-in react way
78:52 - of doing things and essentially lets us
78:55 - set that state wrap our application and
78:57 - having access to information is a lot
78:59 - easier this way so what we want to do is
79:01 - we want to get rid of prop drilling here
79:03 - so if you're not familiar with prop
79:04 - drilling this is the process of drilling
79:06 - down a prop through multiple components
79:09 - so we have our note page and we need to
79:11 - be able to update our notes through our
79:14 - delete component so in order to get that
79:16 - there we have to pass down set notes
79:18 - into our note card then in our note card
79:22 - we have to get that set notes method
79:24 - then we pass pass it down into the
79:25 - delete button right here and that gets
79:28 - really messy and this can really get
79:30 - ugly when you start doing this over and
79:32 - over again so we want to fix this so to
79:34 - create our context right here we're just
79:36 - going to go ahead and create a new file
79:37 - and folder and this is going to be in
79:40 - the source folder and we're going to
79:42 - create a folder called context and this
79:45 - context is specifically going to be for
79:47 - our note context so not context. jsx
79:51 - that's what we're going to call it and
79:53 - this is where we're going to keep all
79:54 - that state so first we want to import
79:57 - create context and this is how we create
79:59 - it we want to import use effect and
80:02 - we're also going to have state so use
80:05 - State and now we can create our context
80:08 - which we're going to export right away
80:09 - and we're going to call this note
80:11 - context and we can create it with the
80:13 - create context method so once we have
80:15 - our context we want to create a provider
80:17 - which is going to provide the data and
80:19 - all the information down to the child
80:21 - component so we're going to go ahead and
80:23 - create that that's going to be note
80:25 - provider and with this provider let's go
80:27 - ahead and just pass in the children I'm
80:30 - going to need to do a little bit of prep
80:31 - work and then I'll just explain what's
80:32 - going on as we finish this up because
80:35 - there is a little bit of preparation
80:36 - here so first of all we want to go ahead
80:38 - and return our provider so that's going
80:41 - to come from our note context. provider
80:45 - and the provider is what's actually
80:47 - passing down that information now with
80:49 - that the provider itself is going to
80:51 - have a value and this is going to be the
80:53 - data that we sent send down so let's go
80:56 - ahead and create this data we'll add
80:57 - information into it later this is just
80:59 - going to be an object called context
81:01 - data you can name it whatever you want
81:04 - and that's going to be an empty object
81:06 - and we're going to take this object and
81:07 - pass it down as a value so anything that
81:09 - goes in here is now going to be
81:11 - accessible through the children now with
81:13 - our context provider or note Provider by
81:16 - default we want this to be loaded up
81:18 - before anything else happens in our
81:20 - application because if we don't have any
81:22 - data we might get errors in the future
81:24 - so we want to go ahead and first of all
81:26 - set loading to use State and this is
81:29 - going to be true so as our application
81:32 - first gets loaded the state is loading
81:34 - then we'll update this but before we
81:36 - actually update loading we're going to
81:38 - go ahead and add a condition in here if
81:40 - we're currently in loading State let's
81:43 - go ahead and render out our load spinner
81:45 - so first we'll bring that in so we're
81:47 - just going to render this out right away
81:51 - and once we're done loading we're just
81:52 - going to do children like that and let's
81:55 - just see how this looks right now so if
81:58 - we're loading we're just rendering out
81:59 - the spinner and once we're done loading
82:01 - we allow all the child components to be
82:03 - rendered so let's export this before we
82:06 - actually use it so we're going to export
82:08 - default and this is going to be our note
82:11 - provider and in order to actually use
82:13 - this we're going into app.jsx we're
82:15 - going to import our note provider so
82:18 - everything that's wrapped inside of this
82:20 - provider is now going to have access to
82:22 - the context data so we'll take our note
82:25 - provider and we should be able to access
82:27 - all of this inside of the notes page now
82:29 - and all the child components of that so
82:32 - let's just try this inside of our front
82:34 - end here we go we see our application we
82:37 - see that load spinner so I'll make sure
82:39 - that it's a little bit bigger let's add
82:40 - some styling but we're still in that
82:42 - loading State nothing else is being
82:44 - rendered out so I'll actually fix that
82:47 - up here and I'm just going to copy this
82:49 - div right here that wraps that spinner
82:52 - and we'll set the size so we're going to
82:53 - cheat a little bit and just copy and
82:55 - paste that's all in here so the load
82:57 - spinner itself let's paste it I'll save
83:00 - it so the formatting gets fixed and now
83:03 - we should see this so let's look at our
83:06 - example here so next what we want to do
83:08 - is go ahead and actually create the note
83:10 - state so that's coming down from here
83:12 - and we're going to take this same init
83:13 - function and bring that into our context
83:16 - so it's no longer going to be inside of
83:18 - our notes page so we'll go into our
83:22 - Pages we'll go into notes page let's
83:24 - take this init
83:26 - function we'll bring this into the notes
83:30 - provider and we're also going to take
83:32 - use effect so we already imported that
83:34 - right here we'll bring this in here and
83:37 - we'll take our notes and we'll also
83:40 - paste those into our notes provider so
83:43 - we have notes and loading and at this
83:46 - point let's just go ahead and get rid of
83:48 - all of this right here so we don't need
83:50 - that we don't need our databases anymore
83:53 - let's get rid of fake data data right
83:54 - now and we don't have access to any data
83:57 - in the notes page but we're going to
83:58 - pass this down in a second so once we
84:01 - have all of this we're going to take our
84:03 - notes and we're passing them through the
84:05 - context data we're going to take set
84:07 - notes we're going to pass those down
84:09 - also so we can actually update that in
84:11 - the future and inside of AIT we're going
84:14 - to set loading to false here so once
84:18 - that's set to false we also need to get
84:20 - our DB instance so let's import that
84:23 - from app right for SL databases and that
84:26 - should complete our provider here so we
84:28 - have our loading State we get our notes
84:30 - we initialize it we load them in loading
84:33 - set to false then we pass down notes and
84:36 - set notes so let's see how this works
84:38 - and how we can actually access this
84:40 - information so from our notes page so
84:42 - right now we don't have anything here we
84:43 - don't have any notes we need to get that
84:45 - state and the way we can do that is by
84:47 - calling the use context hook right here
84:50 - and use context allows us to get that
84:54 - object or basically destructure the
84:56 - object of data here which is going to be
84:58 - a note here or we're going to take our
85:00 - notes from that and we're going to call
85:02 - use context and we need to specify what
85:05 - context we're using which is going to be
85:06 - the note context and that should just
85:09 - import that for me if it doesn't just go
85:11 - ahead and type that out and now I have
85:13 - access to the notes inside of the note
85:15 - page so I have a few issues here so
85:18 - right now set notes I'm no longer going
85:20 - to prop trol that so if I remove it and
85:22 - I save it in my front end I should see
85:25 - some issues here so at this point we're
85:28 - going to maybe call the delete method
85:31 - right here we get an issue because set
85:33 - notes is not a function so how do we get
85:35 - that method down to the delete button
85:37 - here so we're going to do some updating
85:40 - so in our note page here or note
85:43 - component note card we're going to take
85:46 - set notes and we want to remove this so
85:47 - we no longer need that we no longer need
85:50 - to pass this down into the delete button
85:54 - here so we're going to get rid of that
85:56 - right here and in order to actually get
85:58 - this in the delete button we're just
86:01 - going to go ahead and import use
86:04 - context and let's just go ahead and
86:06 - actually pull that in set notes and
86:09 - we're going to use context we're going
86:12 - to use note context and I can get rid of
86:15 - this right here because that's going to
86:16 - cause an error if I don't actually pass
86:17 - that down and let's just see what we
86:20 - have so at this point in my console I
86:22 - shouldn't have any errors and we should
86:24 - be ble to call that delete function
86:26 - right now so we don't have any notes
86:27 - because we actually deleted it but
86:29 - that's perfect because in the next step
86:30 - we're actually going to take care of
86:32 - adding notes but now we have our context
86:34 - provider passing down data and we're
86:36 - able to take functions from that
86:37 - provider without prop trolling so that's
86:39 - going to be a big Advantage for
86:43 - us okay so now it's time to add in some
86:46 - add note functionality into our
86:47 - application and this is going to be in
86:49 - section 7.1 under add button here so
86:52 - let's quickly review it and then we're
86:54 - going to start building so first of all
86:56 - we have this add component and this is
86:58 - going to need a new icon called plus so
87:01 - we're going to add in this icon and then
87:03 - we're going to create a controls
87:04 - component which will actually hold not
87:07 - just our ad button but it'll also hold
87:09 - our other colors that we're going to add
87:10 - on in the next section so that way we
87:12 - have a whole controls panel that we can
87:14 - work with and this is where our add
87:16 - component is going to sit within so
87:18 - let's actually start with this plus icon
87:21 - so what I want to do here is go ahead
87:22 - and just copy that we're going to add
87:24 - this into the icon section and we'll
87:26 - call this
87:27 - plus. jsx and we'll paste this in and I
87:31 - want to make sure this is exported so
87:33 - let's just export default and once we
87:36 - have that we want to create the add
87:39 - component so that's going into
87:40 - components we'll call this add button
87:44 - and we'll just do react Arrow function
87:46 - component exported we'll go ahead and
87:47 - generate that let's just add in our plus
87:50 - icon in here and we're going to render
87:52 - that out right away so just do plus and
87:56 - we'll finish that off right there save
87:58 - that let the indentation get fixed here
88:00 - and we'll just remove the extra bracket
88:02 - there so from here once we have the plus
88:05 - icon in here we're just going to add the
88:06 - ID of add button we want to make sure
88:09 - that we can get some styling here we'll
88:11 - throw that in and let's just continue
88:14 - scrolling down here and see what's next
88:16 - so we have our control panel now so
88:18 - we're going to create that and within
88:20 - our control panel we're going to add in
88:22 - our add button so we're we're just
88:24 - testing a few buttons here or a few
88:26 - components so we'll call this component
88:29 - controls we'll generate that real
88:31 - quick and in here let's just import our
88:35 - add button we'll bring this in
88:38 - here just a little bit of redundant
88:41 - stuff here and then we want an ID and
88:44 - the name of the ID is going to be
88:46 - controls so we'll throw that in and
88:49 - we'll just finish this up with some
88:50 - styling I believe that's the next step
88:52 - here so once we have that we're just
88:54 - going to add controls into our notes
88:56 - page so we can't see anything just yet
88:58 - and we'll just render this out so this
89:01 - technically is going to have a fixed
89:02 - position so it really doesn't matter
89:04 - where this component goes this controls
89:06 - component because we're going to place
89:07 - it on the left side of our screen right
89:09 - in the middle when it comes to how we
89:10 - Center that uh vertically I believe I
89:13 - always get that mixed up so let's import
89:16 - the controls
89:18 - component and I'll just put this at the
89:21 - bottom just so it doesn't get in the way
89:23 - of anything and now if I go to my
89:26 - application here we see that plus icon
89:29 - so we we just want to style that now so
89:31 - if we scroll down we have some CSS to
89:34 - add so we have our controls ID and our
89:36 - add button styling here and then our
89:38 - hover effects so let's just copy all of
89:41 - this and we'll bring this into index.css
89:45 - I'm going to add this to the bottom of
89:47 - the page and let's just review it so we
89:50 - have our controls we have our own
89:52 - styling for the controls here we make
89:54 - sure that the position is fixed this
89:56 - allows us to put this anywhere and then
89:58 - the top and bottom position here we just
90:00 - make sure that's 50% we have some
90:02 - background colors some shading we also
90:05 - set Z index to 10,000 just to make sure
90:07 - it's brought to the front so if we have
90:09 - any notes that go behind it they're
90:11 - going to actually be behind the
90:12 - component and won't cover our controls
90:14 - now for the add button itself we have a
90:16 - background color and we just make sure
90:18 - everything's centered we make sure we
90:20 - have a border radius of 50% a height and
90:23 - width to this and then just a hover
90:25 - effect so it's going to look a little
90:26 - bit weird right now with just this
90:28 - button here so let's see what that looks
90:30 - like so here's that effect right here
90:33 - and that's our add button so now we want
90:36 - to actually add in some functionality so
90:38 - what we need to do here is first we need
90:40 - to have a default color for the button
90:42 - that we create so we have this array of
90:45 - colors that we're going to work with and
90:46 - we have four different options so we
90:48 - have a yellow green blue and purple
90:50 - button and we're going to create this
90:51 - array and then we're going to reference
90:53 - the first index of this array to set our
90:55 - default color which will be yellow if
90:57 - you want to change the default component
90:59 - or default note card when you create one
91:01 - you can just go ahead and change the
91:03 - index here that's up to you but we're
91:05 - going to work with this one so let's
91:07 - copy this we'll bring this into assets
91:10 - and this is going to be
91:12 - colors.
91:14 - Json and we can just paste this in right
91:17 - here that looks good and now we just
91:20 - want to import that into our add button
91:23 - here so let's just remove a few things
91:25 - here and we'll go into add button and
91:28 - we're going to import colors from and
91:31 - then we're going into
91:33 - assets SLC colors so we bring that in
91:37 - and we need a handle ad function now so
91:40 - if we go into our add component we're
91:42 - going to create this function that
91:45 - basically handles adding a note we're
91:47 - going to call that add note and we're
91:49 - going to send a payload and we're going
91:50 - to call create or send a create request
91:53 - to our datab base so let's start by
91:56 - first creating the ad note function so
91:58 - let's create some space here and for
92:01 - this add note function we want to make
92:02 - sure this is an Asing function and the
92:05 - first thing we're going to do here is
92:06 - create an initial state for this note so
92:08 - we want to pass along the payload here
92:10 - with that initial data and that's going
92:12 - to be an object like this and we first
92:14 - want to make sure that we have the note
92:16 - position and we're going to set some
92:18 - default values here but before we do
92:20 - that we want to make sure it's
92:21 - stringified because even though we're
92:23 - going to pass on an object like this we
92:25 - want to make sure that that's string in
92:27 - that database and for this starting
92:29 - position we're going to set this to 10
92:31 - but we need something specific to happen
92:33 - here because when we add a note if you
92:35 - happen to add notes let's say two notes
92:37 - at once we want to make sure that those
92:39 - notes don't stack on top of each other
92:41 - that the next note will have a different
92:43 - position so we can actually see those
92:44 - get indented and moved along the screen
92:47 - as we add those so we want to make sure
92:48 - that they don't overlap each other so
92:50 - for this we're going to import use ref
92:54 - here and we're going to create a
92:56 - starting point so starting POS and this
93:00 - is going to be use ref and then we're
93:02 - going to set this to 10 and then we're
93:05 - going to set X to starting pos. current
93:09 - which is going to be 10 on the first
93:10 - instance of this so we're going to set
93:12 - that for X then we'll do the same for y
93:16 - and that's going to be the notes first
93:18 - position now after we do that we want to
93:20 - make sure that we have our colors so
93:23 - colors is going to be json. stringify
93:26 - and we're going to stringify the colors
93:29 - and that's going to be the first index
93:31 - from the colors array so we'll do yellow
93:33 - you can go to any index that you want I
93:36 - just want that to be my default once we
93:38 - create the payload we want to go ahead
93:39 - and update the starting position so if
93:41 - we happen to add another note we want to
93:43 - make sure to increment this so we'll do
93:45 - starting position. current and that'll
93:48 - be plus equals 10 so we're just going to
93:51 - indent it 10 from the top 10 from the
93:53 - left and that'll move it to the side
93:55 - here so we just want to make sure that
93:56 - we have a new one each time here so from
94:00 - here we can actually go ahead and just
94:01 - add this to our database so we're going
94:02 - to import DB from and then we're going
94:06 - into aite SL databases and we're just
94:10 - going to call db. update so this is all
94:13 - within the adote function db. notes.
94:17 - create and with this we can just go
94:19 - ahead and pass along the payload our ID
94:21 - will be automatically generated for us
94:24 - and we just want to console out the
94:26 - payload and let's just see what we get
94:28 - here so last thing to do here is just go
94:31 - ahead and take this this function and
94:33 - we'll just do on click we'll call add
94:38 - note let's give this a test so hope
94:41 - hoping everything went correctly here no
94:44 - errors let's refresh it and the note is
94:47 - not going to appear right away we still
94:48 - haven't added this to our state yet but
94:50 - let's just try this so we're going to
94:51 - hit add note and here we go we get this
94:53 - response let me zoom out a little bit
94:56 - this is our object with a new note now
94:57 - if I refresh this we're going to go
95:00 - ahead and see that note and now I can
95:02 - actually update it and this is in my
95:04 - database if I hit this twice we should
95:07 - in in theory see the notes stack up on
95:09 - top of each other like that so that's
95:10 - the effect that we're trying to create
95:12 - now it looks fine here but when we do
95:14 - this all at once with the state being
95:16 - updated that's where we really need that
95:18 - to happen so let's go into the next step
95:21 - here and we're going to scroll down into
95:23 - updating our context state so we're
95:27 - going to go ahead and get the set notes
95:29 - method here from our context let me zoom
95:31 - in a little bit and we just want to make
95:33 - sure that we can update the state so
95:35 - once we get that response we're going to
95:37 - update this and fill it in so let's do
95:40 - that from the top of add button we'll
95:43 - import use context then at the top here
95:47 - we're just going to go ahead and do
95:48 - const destructure set notes from Context
95:53 - and we're we're going to call use
95:55 - context and now we can get note
95:59 - context should automatically import for
96:01 - us so use context and then note context
96:04 - let's just quickly import that and see
96:06 - what's going on so we'll do
96:08 - import and that's going to be note
96:13 - context from we're going into context
96:16 - and then note context okay let's just
96:19 - manually do that usually it just
96:20 - autofills that for me but let's give
96:22 - this a test so once we have that we're
96:24 - going to change this right here we'll do
96:26 - set
96:27 - notes and let's just copy this directly
96:30 - here so we're just going to take that
96:31 - previous state take that response and
96:33 - then use the spread operator to add the
96:35 - new note I believe at the end of the
96:38 - array yeah we're just going to we're
96:39 - actually adding it to the beginning of
96:41 - the state here so that's going to update
96:43 - our set note state so let's refresh our
96:45 - page let's give this a test I'm going to
96:47 - delete these two and now when we add
96:49 - them we should see that note being added
96:51 - and indented so the this is most of what
96:54 - we want there's still an issue here so
96:55 - you notice as I add new notes the note
96:58 - is being added and incremented so it's
97:00 - being added slowly to the bottom right
97:02 - but as we add it the new note gets
97:04 - placed behind all the other notes now if
97:06 - I select a note and make that the active
97:08 - State it'll be brought to front but we
97:11 - want to make sure that that's the
97:13 - default Behavior so this is an easy fix
97:15 - all we need to do is go into our note
97:17 - card and we're just going to use this
97:20 - set zindex function and we're going to
97:22 - call this on user effect so not just on
97:24 - key up or when we click that card header
97:26 - we're going to call card ref. current
97:29 - and this is going to be right away when
97:31 - the note is rendered out and that should
97:33 - fix it so now when we add it this is
97:35 - going to bring the first note and then
97:36 - the next one should be above it like
97:38 - that and that's fixing our active State
97:41 - and that's more so of what we wanted so
97:43 - I really like that I think it's looking
97:47 - good all right so we're in the final
97:49 - stretch here and now it's time to allow
97:51 - users to actually update the colors of
97:53 - specific notes so we're in section 8.1
97:56 - with our guide and what we're going to
97:58 - do here is create a color component and
98:00 - we're going to render out these colors
98:02 - inside of our controls component and the
98:04 - colors are going to be generated from
98:06 - this colors array right here inside of
98:08 - assets so we're going to Loop through
98:10 - this array and we're going to specify a
98:12 - specific color for each instance of that
98:15 - component so let's go ahead and just
98:17 - kick this off and we're going to create
98:18 - the component first so let's close this
98:21 - out we're going into components let's
98:23 - create the new component called color
98:26 - and let's generate the component itself
98:28 - and within this we're going to pass in
98:30 - the color which will be passed in from
98:32 - the array so on each iteration we'll
98:34 - throw in the color as an object and
98:37 - let's give this a class name of color
98:39 - and within this we're going to add in a
98:42 - function that can handle the click so on
98:44 - click whenever we click on this we're
98:46 - going to go ahead and change the color
98:48 - so we're going to call this change color
98:50 - we'll create this in a second and let's
98:52 - go ahead and gener generate that so
98:54 - change color and the first thing we want
98:56 - to do is just console out the color and
98:58 - make sure we actually clicked on the
99:00 - right one and just to ensure that we're
99:01 - passing this information down correctly
99:03 - so we do
99:04 - console.log and let's console out the
99:07 - color so onclick we console it out we
99:10 - also want to make sure that each color
99:11 - has its own styling so let's indent this
99:14 - right here make sure that we can add in
99:16 - inline styling and we'll just do style
99:19 - and we're going to set the background
99:21 - color we're going into
99:24 - color. color header if we go into our
99:27 - array this is the color that we're
99:28 - trying to get so we're going into color
99:30 - header so as we pass it down we get the
99:32 - color of the header and that's what it's
99:34 - going to look like once it actually gets
99:36 - rendered so from here we also need to
99:38 - make sure we just add in some CSS
99:39 - because if there's no height or width
99:41 - you're not going to see anything here so
99:43 - let's go into this section right here
99:45 - let's copy that so the color class and
99:47 - then the hover effect and we'll bring
99:49 - this into index. J or index.css
99:54 - so we'll bring that down add this just
99:57 - below the add button and now it's time
99:59 - to actually render out the colors so
100:02 - this is going to be in the controls
100:04 - component so we need to import the
100:06 - actual color data so we'll import colors
100:09 - then the actual color component and then
100:12 - at this point we just want to map
100:14 - through all the colors inside of our
100:16 - colors array here and then we're going
100:18 - to render out each component so we'll
100:19 - just do colors. map and each color is
100:22 - going to give get a key which is going
100:24 - to be the color ID and then we want to
100:27 - pass in the actual object here so the
100:30 - data so we pass in the color component
100:33 - we render these out so at this point we
100:35 - should just see all those components
100:36 - inside of our controls so let's take a
100:39 - look at this so here we go we have our
100:41 - colors that looks good and now whenever
100:44 - we click on this let's make sure that
100:45 - the actual correct color is rendered out
100:47 - so if we zoom out a little bit let's
100:51 - click on Green we see color green and
100:54 - all the data if we click on purple blue
100:58 - yellow that's exactly what we want to
101:00 - see so that looks good right there okay
101:03 - so now we actually want to implement
101:05 - this change right here so first what
101:07 - we're going to do is now that we've
101:09 - lifted up our state anytime we select
101:12 - some kind of note so let's say we start
101:14 - the process and focus on the note or we
101:16 - click the header we want to make sure
101:18 - that that is the currently active note
101:20 - if that's the note then when we click it
101:22 - we want to make sure that that color is
101:23 - applied to that note if we haven't
101:25 - selected a note we just want to maybe
101:27 - create some kind of alert that says you
101:28 - need to select a note before you can
101:30 - change a color so back inside of our
101:32 - guide we're going to go ahead and go
101:34 - into our notes provider we're going to
101:36 - create the selected note state by
101:38 - default it's going to be null then we're
101:40 - going to pass this information down and
101:42 - in the note card we're going to add this
101:44 - to certain events like on focus and on
101:46 - Mouse down on that header so let's just
101:48 - do that so going into our context so
101:51 - note context let's bring this in We'll
101:54 - add this right here after
101:57 - loading so we have selected note then we
102:00 - need to pass this down here inside of
102:03 - our context data so we'll do selected
102:05 - note and set selected note so the first
102:09 - step is to set the selected noes so
102:12 - we'll go
102:13 - into our note card here so let's close
102:16 - all that out go into components let's go
102:19 - into not card and we'll bring this in
102:21 - from our context data which we have used
102:24 - maybe we haven't I thought we did I
102:26 - thought we used that here so let's just
102:28 - import use context so import use context
102:32 - and we're going to use the set colors so
102:36 - or set selected note from use context
102:40 - and then we'll bring in note context
102:43 - that's going to import note context and
102:46 - now let's see
102:48 - on Mouse down this is where we want to
102:51 - set it so we're just going to go ahead
102:53 - add this in right here and let's see do
102:55 - we want to pass in the full note so
102:58 - we're just going to go ahead and pass in
102:59 - the Note data so the Note data that's
103:00 - passed in as a prop right here we're
103:02 - going to take this so that's just going
103:04 - to be the No Object which holds the note
103:05 - information like the ID and all the
103:07 - other data that's stored in our database
103:10 - and we're passing that into selected
103:11 - note so if we bring this down here we
103:15 - also want to do this on Focus so let's
103:18 - see we have on Focus where we set the
103:20 - zindex we'll also make sure that the
103:22 - selected note is Select selected there
103:24 - and then once we set that here inside of
103:26 - our color component let's go ahead and
103:28 - actually console out the selected note
103:30 - let's make sure that this is actually
103:31 - working properly so we'll import use
103:36 - context and let's just get the selected
103:39 - note so selected note and we're getting
103:42 - that from note context it's so weird
103:44 - because in this component for some
103:45 - reason it doesn't Auto Import but it is
103:47 - correct so we just need to manually
103:49 - bring that in and we're importing that
103:52 - from
103:53 - context and we're getting note context
103:57 - okay so now instead of the color let's
103:59 - get the selected note so let's give this
104:02 - a test now so what we're going to do is
104:04 - let's just say note one and then we'll
104:06 - just say hello world for these let's
104:09 - make sure they're saved and we're going
104:11 - to refresh this because the note State
104:12 - won't update for the color change we
104:15 - only need the ID of the note so when I
104:17 - change this it's not going to change the
104:19 - actual data for the selected note and we
104:21 - don't need that so it's totally fine so
104:23 - we have note one and if I click on a
104:25 - color here we go we see the body data of
104:27 - note one and if I click on hello world
104:30 - so let's click on the header hit change
104:32 - now we see Hello World now if I just
104:34 - click on Focus for Note One any color
104:37 - that I click on is going to give me the
104:39 - active note here the object so really we
104:41 - only need the ID but we're going to get
104:43 - that actual note so that's exactly what
104:45 - we wanted now the final step is to
104:47 - actually change the color then we need
104:48 - to send that data to the database so
104:51 - let's go ahead and go into the next step
104:52 - so handle color change in section 8.1
104:55 - what we need to do is we're going to
104:57 - create this TR catch so first of all I'm
104:59 - going to take this alert message right
105:01 - here and we're going to go into change
105:03 - color and I'm going to create a TR catch
105:06 - we just want to make sure that anytime
105:08 - we don't have a selected note we could
105:10 - also write a if statement here but this
105:12 - is fine we're just going to say you must
105:14 - select a note before changing colors now
105:17 - if we do have a selected note then what
105:18 - we're going to do is go ahead and go
105:20 - into the notes State here so we need to
105:22 - import that and we're going to search
105:24 - for where this note is inside of this
105:27 - stage so we want to find the index then
105:29 - we we want to be able to actually update
105:31 - the Note based on where it's at and
105:33 - resubmit it and then send the update to
105:35 - the database so first step is to find
105:37 - that so we're going to go ahead and
105:38 - create a new variable called current
105:40 - note index and for this we're going to
105:43 - use the find index method and inside of
105:46 - this function first thing we're going to
105:47 - do is go ahead and take the note on each
105:50 - iteration then we're going to create a
105:52 - function here and we're going to say if
105:54 - the
105:55 - note. ID is equal to the selected note.
105:59 - ID so that means we found that specific
106:01 - note if we have it go ahead and return
106:03 - the index so this is going to be 1 2 3 4
106:06 - 5 however long our array is and where
106:08 - that note was that's going to be the
106:10 - value of current Noe index so we find
106:12 - that that's the first step here now the
106:14 - next step is to go ahead and create an
106:16 - updated version of this note so we're
106:18 - going to call this updated note and this
106:21 - is going to be an object so we're
106:22 - creating an entirely new object for this
106:24 - note we're going to take that note that
106:26 - we found we're going into the notes
106:28 - array and we're going to use the current
106:31 - index of the note so we're basically
106:33 - using the spread operator to create a
106:34 - new object get the original Note data
106:36 - pass it through this object and then
106:39 - specifically we want to go ahead and
106:41 - update the colors here so we're going to
106:42 - do colors and that's going to be
106:45 - json.stringify and we're going to
106:47 - stringify the new color data so we're
106:50 - passing in the new colors into that note
106:53 - within that index and from here we can
106:56 - create a new array for our note State
106:59 - and actually have that updated so I'm
107:01 - going to create this new array called
107:03 - new notes and we're going to make a copy
107:06 - of the original notes here where we're
107:07 - using the spread operator that's going
107:08 - to create an entirely new array now with
107:11 - this new array we can actually update
107:13 - that so we're going into new notes we're
107:15 - going to take the current note index so
107:18 - we're taking that note and we're going
107:19 - to update this note with the updated
107:22 - notes passing in a new object to that
107:25 - note within the index and then the last
107:28 - step here is to go ahead and call set
107:30 - notes and actually update it so let's
107:32 - bring that in from our context we'll do
107:34 - set notes here and let's try testing
107:38 - this before we actually update our
107:40 - database so we'll pass in new notes
107:43 - right here and that should go ahead and
107:46 - completely recreate the state here so
107:50 - let's go ahead and try this let's select
107:52 - a note we'll hit blue we'll move that
107:55 - one we'll do purple we'll focus on that
107:57 - one we'll do green and that looks like
108:00 - it's working properly now if I refresh
108:02 - it the colors are going to go back so we
108:04 - just need to make sure that we update it
108:05 - so we'll go here after we set the new
108:08 - notes let's go ahead and call db. notes
108:11 - and let's make sure I updated or
108:13 - imported DB let's bring that in there we
108:16 - go we have the import db. notes. update
108:20 - and what we're going to do here is go
108:22 - ahead and take the selected note ID we
108:24 - want to know what note to update and
108:26 - we're just going to pass along the
108:27 - payload which is going to be colors and
108:30 - we're passing in the colors here let me
108:32 - just change this indentation and we're
108:35 - just going to stringify color instance
108:37 - right here so we have that and we pass
108:39 - along the new data so let's go ahead and
108:42 - test this and we'll select this note
108:44 - we'll change that to Green we'll focus
108:46 - on this one change it to Blue we'll even
108:48 - move this one go to purple and let's
108:51 - refresh it and and that's all working so
108:54 - we can now update notes we can
108:56 - reposition them change their colors and
108:58 - that does it for our application all
109:00 - right that's it for this video thank you
109:02 - for watching I hope you enjoyed it and
109:04 - you learned a bunch in this process and
109:06 - if you happen to build on top of this
109:08 - project and you want to share your links
109:09 - with me go ahead and tweet at me my
109:12 - information is linked up in the video
109:13 - description I would love to see what you
109:15 - come up with and the end results to your
109:16 - projects and to the free code Camp team
109:19 - thank you so much for having me here I
109:21 - really enjoyed being on the channel it's
109:22 - really really an honor and I hope to be
109:24 - back someday so with that being said see
109:26 - you all next time