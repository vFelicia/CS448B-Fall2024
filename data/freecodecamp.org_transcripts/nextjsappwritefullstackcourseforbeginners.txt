00:00 - learn how to use next.js to create full
00:02 - stack web apps in this course you will
00:05 - create a project that also uses mongodb
00:07 - and apprite a test chowdery developed
00:09 - this course hitesh is a software
00:11 - engineer and a popular technical course
00:13 - creator let's get started hey there
00:16 - everyone my name is hitesh and I'll be
00:19 - your instructor for this really long and
00:21 - very up-to-date next JS course nextges
00:24 - is an amazing framework which actually
00:26 - helps you to build a full stack
00:28 - application yes you write your backend
00:30 - in the next JS you write your front end
00:32 - in the next JS and don't you worry your
00:34 - back end is just because it is written
00:36 - in JavaScript it doesn't get exposed to
00:38 - the client side all the backend that you
00:40 - write in next.js is rendered only on the
00:43 - servers and all the front end that you
00:44 - write it that is getting rendered on the
00:47 - client side it's a fantastic framework
00:49 - to work with it it's growing rapidly
00:51 - like anything I'll walk you through with
00:53 - that but before we go further you need
00:54 - to know some things first of all I'll be
00:57 - your instructor my name is Satish and I
00:59 - make tons of videos on YouTube do
01:01 - consider checking out my channel as well
01:03 - in case you get some time otherwise no
01:04 - problem at all now the way I have
01:06 - designed this entire series of next
01:09 - year's videos is because next year's got
01:11 - a revamp there is now a new app
01:13 - directory the API folders and how we
01:15 - write the things so I wanted to keep
01:16 - everything up to date if you're watching
01:18 - any past tutorials they are either being
01:20 - made outdated or they'll not no longer
01:22 - good so we need to work on that now
01:24 - apart from this there are some
01:26 - prerequisite that you should be aware of
01:28 - it and there's a mindset also that you
01:29 - also need to be aware nexius is a
01:32 - framework so first of all understand
01:33 - that there are certain rules and
01:35 - regulation that you have to follow that
01:37 - comes up with every single framework and
01:39 - especially the file names how the
01:41 - directories are being structured how the
01:43 - file names are structured next.js is a
01:46 - file based routing system that it uses
01:48 - behind the scene so every single file
01:50 - name and everything which I've walked
01:51 - you through with quite in detail with
01:53 - the diagrams and everything so make sure
01:55 - you take care of that another important
01:57 - thing is next year since it's a
01:59 - framework built on top of react.js
02:01 - definitely it uses react so your react
02:03 - Foundation should be decent I'm not
02:04 - saying you need to be expert in that you
02:06 - will learn a lot of things on the go as
02:08 - well but yeah it's built on react so
02:10 - obviously you need a basics of react
02:11 - since it's a full stack framework I also
02:14 - expect that you have worked a little bit
02:15 - on the API building as well I don't
02:18 - expect you to be an expert in that but
02:20 - make sure you have decent basics in it
02:22 - because we'll be writing some apis we'll
02:24 - be creating some apis as well so a
02:26 - little bit Foundation is expected but do
02:27 - I don't expect too much you will
02:29 - understand everything every single code
02:30 - that I'm writing now along with this uh
02:33 - one more request that I have the way I
02:36 - have built this entire project is
02:38 - actually divided into two phases first
02:40 - we understand the next shares and do
02:42 - everything Hands-On means we'll be
02:44 - writing our own uh back end we'll be
02:46 - using mongodb and all of that and the
02:49 - second portion is dependent on some
02:50 - service we'll be using one service known
02:52 - as apprite which is totally open source
02:54 - and will be using their Cloud to
02:56 - actually see that how when their backend
02:58 - is being written by somewhere else how
02:59 - you can utilize those things in this
03:01 - case we are using app right but your
03:03 - backend might be in Java maybe Django
03:06 - fast API anything so that portion covers
03:08 - that now I expect and I also see that
03:11 - make sure you understand that
03:13 - authentication is really amazing thing
03:15 - and it's not like we are only learning
03:17 - authentication in this entire series see
03:19 - in the authentication you collect some
03:21 - data from the user and then you send
03:22 - this data to to the to the back end your
03:25 - database this is exactly what you do
03:26 - when you're building any other model
03:28 - your product category everything so a
03:30 - lot of people think that authentication
03:31 - is different to do app is different in
03:33 - this case I have merged it all I've gone
03:35 - through with all the complicated cases
03:37 - that how you'll be collecting the user
03:39 - data in this case the sign up data I
03:40 - will be sending it and making a
03:42 - connection on the mongodb send the data
03:44 - make some queries filter out the data
03:46 - collect this so this is fantastic also
03:48 - there are two videos which are optional
03:50 - but in case you are not aware of it I'll
03:52 - also walk you through with that so make
03:53 - sure you understand that part so in this
03:56 - entire series I haven't actually walked
03:58 - you through with like apps absolute
04:00 - scratch because we already did a live
04:02 - stream here I don't know an xjs live
04:04 - stream which was almost around a one
04:06 - hour of live stream where we went into
04:08 - the documentation of next year's how to
04:10 - read the documentation how to study it
04:12 - how the file rest file based routing
04:14 - works the error files how you can have
04:15 - the middlewares and all of that so this
04:17 - actually covers all of that in the
04:19 - series itself I have actually skipped
04:21 - that part that's one thing the second
04:22 - thing is since it's next year's there
04:24 - are some Basics that you need to know
04:26 - especially like what is CSR SSR the
04:28 - client-side rendering server side
04:30 - rendering incremental rendering there's
04:32 - some jargons which are absolutely
04:33 - hundred percent Theory so I've already
04:35 - created a video about it so make sure
04:37 - you simply go ahead and check it out
04:39 - this one here I have not included them
04:41 - in the series because I thought that's
04:42 - too optional for this one and we'll be
04:45 - starting the series fresh every single
04:46 - code is available on GitHub as well so
04:48 - make sure you check it out as well so
04:50 - that's it now let's get started with the
04:52 - very first video let's start the Journey
04:54 - of the latest next.js
04:57 - hey there everyone hitesh here back
04:59 - again with another video and I would
05:01 - like to welcome all of you into this
05:03 - really long and hopefully really long
05:06 - next JS course I wouldn't be calling it
05:08 - as the next year's crash course because
05:11 - it's not a crash course it doesn't just
05:12 - give you overview but it's a real world
05:14 - production grade application that you
05:16 - can deploy and can use in the real world
05:19 - this application is specially designed
05:21 - in such a way that it provides you a
05:23 - path to learn nexjs absolutely from
05:26 - scratch I'll give you the prerequisite
05:28 - as well but the goal was not to just
05:30 - teach next years but to teach it in
05:32 - certain way that you feel absolutely
05:34 - confident about building application
05:36 - using nexjs I want to lay down the
05:39 - entire architecture of nexgs in such an
05:41 - easy manner that you feel that it's like
05:43 - a walk in the park no longer afraid of
05:46 - being app directory and Source directory
05:48 - and all those jargons you will be able
05:50 - to dive deep into the actual
05:52 - documentation of the next shares if you
05:54 - find any problem you will be able to
05:56 - tweak it out now this application is
05:58 - decently complex so we need to pick up a
06:00 - tech stack I will choose that I will
06:02 - also give you the prerequisites and
06:04 - everything that is required I'm pretty
06:05 - sure you are excited to build this
06:07 - application with me this application one
06:10 - more very important thing this
06:11 - application will lay as a foundational
06:13 - block of some of my upcoming tutorials
06:16 - in the future as well as if you are
06:18 - trying to make any application which is
06:20 - really really complex in next year's
06:22 - this will lay down a solid foundation
06:24 - for you so everything is all set up and
06:27 - I'm pretty sure you are all excited
06:28 - about getting started with the next
06:30 - shares along with me this is going to be
06:32 - one of the best ride and again trust me
06:35 - you will have so much of confidence
06:37 - that's my goal bring confidence in you
06:40 - so that you can build application and
06:42 - again even if you are not that much
06:44 - confidence in building a full stack
06:45 - application no worries I'm here I'll
06:48 - walk you through with each and every
06:49 - word that we are going to write no copy
06:51 - pasting of the code we'll be writing
06:53 - everything down and I'll explain you
06:55 - every single logic that is required for
06:56 - that so I hope you are excited for that
06:58 - now first let me tell you what are the
07:01 - tech stack and what are the prerequisite
07:03 - for that let's start with the
07:04 - prerequisite now this entire next.js
07:07 - application is built in typescript but
07:10 - again if you are not much familiar with
07:13 - the typescript that is totally okay I am
07:15 - not using any a crucial part of the
07:17 - typescript which is making it just for
07:19 - typescript people if you know JavaScript
07:21 - that is also fine you will be able to
07:23 - understand hundred percent of the code
07:25 - so there is no too much higher
07:27 - dependency of the typescript if you know
07:29 - it that's great otherwise I do have a
07:31 - series on typescript as well you can
07:32 - watch that otherwise it's not that much
07:34 - of a hard and fast requirement
07:36 - on top of that nexjs is a framework
07:39 - which is built on top of a library known
07:41 - as react.js everybody's favorite now
07:44 - react.js is amazing but I don't expect
07:46 - that you have 100 knowledge of react.js
07:48 - if you know how to just use a simple
07:50 - user State use effect and just can write
07:54 - some buttons in next year in the
07:56 - react.js that is all that is all but if
07:58 - you don't know even that much that's
07:59 - also totally fine I'll still try to
08:01 - explain you some of the bits and pieces
08:03 - of it but I would certainly say that the
08:05 - experience of react.js would be super
08:07 - helpful in this series and that is it
08:09 - now I don't expect you to have too much
08:12 - knowledge on the back end part I just
08:14 - expect you have heard about some of the
08:15 - backends and stuff this would be also a
08:17 - great starting guide for you to
08:20 - understand about the database that we
08:21 - will be using which will be mongodb in
08:23 - this case everything that we are writing
08:26 - in this in this entire example and this
08:28 - entire app is fully productionable so
08:30 - you will be able to put all of your
08:31 - application into the cloud and you will
08:33 - be able to serve the users and
08:35 - everything not only that that this
08:37 - application will be available to you on
08:39 - the GitHub not just to Simply watch and
08:41 - see it but actually to contribute in
08:43 - that I am deliberately not touching too
08:46 - much on the styling part of this
08:47 - application I'm keeping it very raw so
08:50 - that you can bring in your Tailwind
08:52 - experience and can contribute in this
08:54 - repository you can the functionality of
08:56 - this app will be 100 working but the UI
08:59 - part you can modify it as much as you
09:01 - like I'll keep it open-ended so that you
09:03 - can focus more on this remember this is
09:05 - a Nexus course not a Tailwind course so
09:08 - I'll keep your Tailwind aside on totally
09:10 - you so that you can bring your knowledge
09:11 - and can contribute in this application
09:13 - remember don't fall into the tutorial
09:15 - hell you need to contribute something in
09:17 - this as well all right I hope you're
09:18 - excited now bringing in about the tech
09:21 - stack side that what is the text tag
09:23 - that we'll be using let me walk you
09:24 - through with that so the text tag that
09:26 - we'll be using is absolutely simple
09:28 - there is nothing too much to be scared
09:30 - about that first thing we obviously will
09:33 - be using next.js together we'll be
09:35 - reading a lot of documentation so that
09:37 - you can actually learn that what it
09:39 - takes to read the documentation bring
09:40 - the code from documentation and write
09:42 - along with it so this is the first thing
09:44 - that we'll be doing and we'll be using
09:46 - App router absolutely latest as modern
09:48 - as possible we'll be firing up an npx
09:51 - create next app later so we can pull in
09:54 - the latest of the next JS apart from
09:57 - this for the database side we'll be
09:58 - using mongodb and we'll be using mongodb
10:01 - in the cloud the only thing that I don't
10:03 - like about it it's too white it should
10:05 - have a dark mode but sadly I couldn't
10:07 - find it so we'll be using and creating a
10:09 - new cluster I'll walk you through from
10:10 - the scratch that how to create a
10:12 - database and how to use it and apart
10:14 - from this since we are building up an
10:16 - authentication system I'll walk you
10:17 - through what we are building in a minute
10:18 - but we will be needing some kind of a
10:20 - mail service now one of the production
10:22 - grade mail service is a mail trap I'm
10:24 - not affiliated with them but I have been
10:26 - using them for a while for teaching
10:27 - purposes I found it pretty interesting
10:29 - instead of just exposing your Gmail and
10:32 - firing up email from that that's not a
10:33 - good idea use professional tools and
10:35 - mail trap is one of of the many such
10:37 - tool that you can use so I'll be using
10:39 - this one so apart from this I'll be
10:41 - using a little bit of excally draw
10:42 - everybody's favorite to just draw some
10:44 - diagrams and explain you the stuff all
10:47 - right so this is all what we'll be doing
10:49 - first let's dive into the theoretical
10:51 - part and what we are about to build so
10:53 - what we're about to build is pretty
10:55 - simple so first and foremost we will be
10:56 - having at this screen and this one is
10:59 - going to be a simple sign up screen now
11:01 - this is not going to be any ordinary
11:03 - sign up screen in the world of next year
11:05 - so you obviously cannot just rely on the
11:07 - front-end part we surely will have
11:09 - front-end part we need a back-end part
11:10 - as well I'll talk about that in a second
11:12 - so now apart from this we'll be having a
11:15 - simple login screen as well so what
11:18 - we're building basically is a user
11:20 - authentication system now since in the
11:22 - latest a lot of upcoming tutorials will
11:24 - require this authentication system so we
11:26 - have a proper course here which explains
11:29 - you everything about what happens what
11:30 - goes in the authentication system as
11:32 - much as in the core way possible all
11:35 - right so we have a sign of have a login
11:37 - and apart from this once we have this
11:39 - sign up and the login we will also have
11:41 - a profile section now this profile
11:44 - section will have a couple of pages
11:45 - again we'll not focus about what we are
11:47 - serving on the profile we are more
11:49 - concerned about how we can actually
11:50 - reach through the profile if there is a
11:54 - unique ID with the user associated with
11:56 - that how can I grab that unique ID from
11:58 - the URL there's so much to explore about
12:00 - this so this is going to be a basic
12:02 - application where user will be able to
12:04 - sign up login and profile that's all but
12:07 - there are also cases where user might
12:09 - also request you couple of more features
12:11 - so we'll be designing them I'll walk you
12:13 - through with the scenario of how we can
12:14 - actually go ahead and reset the password
12:16 - or maybe also verify
12:20 - so user account needs to verify as well
12:22 - so we'll be working on the functionality
12:24 - of reset and verify once you understand
12:26 - even one part of it the next part is
12:28 - super easy to understand I'll walk you
12:30 - through with that scenario as well how
12:31 - to reset the password how to verify the
12:34 - user so all of this functionality will
12:36 - be taking it down it's absolutely a core
12:38 - of any application that you'll be
12:40 - building so we'll be working on that
12:41 - part and after this I'll keep it a
12:44 - little bit open-ended so that there is
12:45 - enough space that you can contribute in
12:47 - that part all right so hope that is good
12:49 - and I'll just write the tech stack here
12:51 - as well so that we don't uh get any
12:53 - troubles or problem in it so we'll be
12:55 - using next year's I know that's very
12:57 - small I don't like even the small fonts
12:59 - and stuff I always keep them Big Easy to
13:02 - watch in the tutorial for the back end
13:04 - part we'll be using uh mongodb so we'll
13:07 - be going with the mongodb now of course
13:09 - we'll be needing a few of the stuff
13:11 - since we are on the mongodb we'll be
13:13 - going with the Mongoose we'll be going
13:16 - with the node mailer as well and couple
13:18 - of more things will be there like I'll
13:21 - be using react hot toast and all these
13:23 - things I'll not configure them properly
13:25 - I'll leave them as a simple exercise for
13:27 - you but don't worry we'll get the enough
13:28 - of the messages and everything for us so
13:31 - again it will be super fun to work on
13:33 - with that all right so this is majorly
13:35 - The Tick stack that we'll be going
13:37 - through so I think that is it that is
13:39 - all what will be going of course I'll
13:40 - walk you through how we can configure
13:42 - the mail trap and stuff now let's first
13:44 - start not not by creating anything but
13:47 - actually to understand the theory about
13:49 - it now the theory is actually very very
13:51 - amazing here so let me just walk you
13:53 - through so first and foremost just
13:55 - understand that everything in nexjs has
13:57 - changed any tutorial that you're
13:59 - watching which is older is no longer
14:01 - going to work so you need to really
14:02 - understand this part now everything that
14:04 - you work on with this now actually goes
14:06 - inside the source directory so consider
14:08 - this as this is my source directory so
14:11 - this is the source directory where you
14:13 - will be working inside the source you
14:16 - are going to find that there is a
14:17 - directory known as app so this is our
14:21 - app let's explore this
14:24 - so this app directory has a couple of
14:26 - things inside it the first part in fact
14:29 - if I bring this app directory here and
14:31 - try to explain it that how does this app
14:33 - directory actually goes this app
14:35 - directory can easily be divided into two
14:37 - portions of it the first portion goes
14:39 - here second portion goes here the first
14:41 - part you can easily call this one as
14:43 - backend
14:44 - and yes there will be a lot of people
14:46 - who will try to explain it with the
14:49 - meaning of this is a server component is
14:51 - it a client component yes we'll go
14:53 - through with that we'll understand the
14:54 - difference of it but not right now they
14:56 - are much more easier to understand in
14:59 - this way and context so we have this
15:01 - back end and we have got this front end
15:04 - so this is all that goes into this app
15:07 - directory and this app directory is
15:08 - obviously a part of this source so go
15:11 - ahead and just let's just go ahead and
15:12 - have an arrow just like this so we have
15:14 - this Source but apart from this app you
15:17 - will also find that it's not just
15:19 - everything goes into the app directory
15:21 - some things goes outside of the app
15:22 - directory as well for example most of
15:25 - the time when I design my models you can
15:28 - absolutely place these models outside of
15:30 - the app directory not just the models I
15:32 - will also keep some of our helper files
15:34 - for example I want to shoot an email I
15:37 - want to verify my tokens JWT tokens yes
15:40 - we'll be using them so how that works
15:42 - we'll be keeping them outside as well
15:44 - all right this is the whole gist of
15:47 - everything let me summarize that quickly
15:49 - now in the latest of next.js you'll find
15:51 - everything is inside the source
15:53 - directory and inside the source
15:54 - directory you have this app app has two
15:57 - portions of it the back end part and the
15:59 - front-end part of it but it's not like
16:01 - everything goes inside the app directory
16:03 - there are other files you can obviously
16:04 - create it like models helpers components
16:07 - there's so many of the files that you
16:09 - can create which can rely and reside
16:10 - outside the app directory now more
16:14 - notoriously you will see not notoriously
16:16 - but yeah more of the time you'll see
16:18 - that the backend portion is actually
16:20 - written inside the API folder and yes
16:23 - the naming convention is super super
16:25 - important in the next JS even a
16:28 - slightest wrong thing in the next in the
16:30 - naming convention will just create a
16:32 - havoc in the folder remember this is a
16:34 - framework whenever we talk about
16:36 - framework There are rules and regulation
16:37 - you have to follow usually these rules
16:39 - and regulation comes with the variables
16:41 - names or maybe uh how the process needs
16:45 - to work how the response needs to send
16:46 - how the app directory should work out so
16:49 - all these things need to go hand in hand
16:51 - now you'll find a common thing as well
16:54 - that whenever you are writing most of
16:56 - the part in the apis in the back end you
16:58 - are using file name as route and in case
17:01 - of the front-end part you are actually
17:03 - using the file name with the name of
17:05 - page it could be page.tsx it could be
17:07 - page.ts usually TSX and Route is usually
17:11 - route dot either JS or either TS
17:13 - whatever you are using will be using
17:14 - typescript so we'll be calling it as a
17:16 - route dot TS and here the page so I have
17:19 - now this diagram makes it so much clear
17:21 - that how things are going to go and how
17:23 - things actually work now apart from this
17:25 - there are certain files which also needs
17:28 - to be inside this app directory and how
17:31 - this actually goes and work on now one
17:33 - of the most important thing that you'll
17:35 - be looking up for
17:36 - is notice this this is what the meaning
17:39 - of app but hey there is a very common
17:41 - file which you'll be using a lot which
17:43 - is known as middleware where does the
17:46 - middleware looks like
17:47 - it's inside the source directory but
17:49 - it's not inside the app directory yep
17:51 - that's how usually the configuration is
17:53 - there are other files and folders you
17:56 - can have middleware just like the
17:57 - middleware is here you can have your
17:59 - customized error Pages lots of other
18:01 - Pages which I'll walk you through with
18:02 - the documentation as well you need to
18:04 - put it a little bit outside so let me
18:06 - walk you through with the documentation
18:07 - as well so let's just say we want to
18:09 - understand about the middleware right
18:10 - now we don't understand too much the
18:12 - working part of it but if I go ahead and
18:14 - look for it notice here this is the
18:16 - middleware and here's the convention use
18:19 - the middle page and notice here for
18:21 - example the same level as page or app or
18:24 - inside the source if applicable so as I
18:27 - told you it's actually inside the source
18:30 - everything is inside the source but it
18:32 - doesn't need to be inside the app
18:34 - directory this is where it confuses a
18:37 - lot of people but don't worry I'll walk
18:38 - you through with every single thing how
18:40 - to read the docs and everything how to
18:42 - even see and utilize will be utilizing
18:45 - this exact piece of code so you don't
18:47 - have to worry even a tiny bit for that
18:49 - part all right so this is all the basics
18:51 - that we have done and we have understood
18:53 - the basics meanings of how the things
18:55 - are being done let's go ahead and create
18:56 - with that I have already created an
18:59 - account on mongodb Atlas you also need
19:01 - to do this so let's go ahead and start I
19:03 - have actually removed everything from
19:04 - scratch we are going to be getting with
19:05 - there so just click on build a database
19:09 - and I'll be using AWS but I'll be using
19:11 - free one I'll not pay money this is
19:14 - YouTube I'm teaching for free so I think
19:16 - this should also be free uh so I'll be
19:18 - choosing a location which is nearby to
19:20 - me
19:21 - and where is nearby to me I think Mumbai
19:24 - is the nearest looking for me and yes I
19:26 - am from India so I think that's it and
19:29 - create this this usually takes a couple
19:32 - of minutes to spin so go ahead and be a
19:35 - little patient about that I also want to
19:37 - create a user and a password so I'll
19:40 - actually do this later on and connect
19:43 - from IP address and all of this so we'll
19:45 - be doing that manually so I think we'll
19:47 - not use this quick start of the security
19:48 - guide I'll just walk you through this is
19:51 - actually way better to explain if I go
19:53 - ahead and explain everything in a much
19:55 - precise and easier way so there we go
19:57 - our cluster is created now first thing
20:00 - that you have to do is go up here and
20:02 - let me just go ahead and show you this
20:05 - so all right I'll just shrink myself a
20:08 - little bit move here all right so uh
20:11 - first thing that you have to do is look
20:13 - up into this security thing so this
20:15 - security thing is super important first
20:17 - go ahead and click on network access
20:19 - here this network access simply means to
20:21 - say that from where your application
20:23 - should be available your application is
20:25 - maybe Universal your database might be
20:27 - in AWS should they talk to each other or
20:29 - not so in this case I have given access
20:31 - to all of this so you can just go ahead
20:33 - and also click on ADD IP address you can
20:35 - either add your current IP address but
20:37 - since you are not on a permanent IP your
20:40 - IP as soon as your router shutdowns and
20:42 - reboots it might change so in this case
20:44 - just for an example this is not a
20:46 - production level setting we can go ahead
20:47 - and say 0.0
20:50 - dot 0.0 and slash 0 which means I want
20:54 - everybody to be able to access my
20:57 - database if they have correct ID and
20:58 - password again there is one more layer
21:00 - which is ID and password so that needs
21:02 - to be there I can confirm this and this
21:04 - will add there's nothing to add then go
21:06 - ahead and click on database access that
21:08 - who can access your database right now
21:10 - we don't have any user so I'll click on
21:12 - add user and I'll add a simple sample
21:14 - user with the name of YouTube
21:18 - and I'll enter a password
21:23 - and again you really need to be careful
21:26 - about what you are using as your
21:27 - password if you use any special
21:28 - character that might be URL encoded or
21:31 - might create some issues in that so be
21:33 - careful about that the usual practice is
21:35 - to use numbers and letters that's all
21:38 - and what we're going to do is we will be
21:40 - also adding a built-in role so click on
21:42 - that drop down and we'll be selecting
21:44 - read and write to any database right now
21:46 - and I'll just click on add user so this
21:49 - will simply add a user which can
21:51 - actually talk to any of the database now
21:53 - that is it that is all you have to do
21:55 - now click on the database
21:57 - and all you have to do is click on this
21:59 - connect and it will give you this
22:01 - Compass click on the compass again and
22:04 - this is the URL that you want to copy so
22:06 - just click up here it will copy it now
22:08 - notice here carefully that if you go
22:09 - ahead and carefully look onto this one
22:11 - this actually gives you the username but
22:13 - doesn't gives you the password so
22:14 - password is something that you have
22:16 - already given there so go ahead and use
22:18 - that one I'll just close this one that
22:20 - is all the requirement here for having
22:22 - this now let's just go ahead and move on
22:24 - to the next JS home page and we'll be
22:26 - creating a new project here so I'll just
22:29 - go ahead and open up a folder so this is
22:32 - the folder that we are using I already
22:34 - built this app obviously otherwise why
22:36 - would I be recording the tutorial so
22:38 - I'll be calling this one as auth next JS
22:42 - and this one is for YouTube so I'll be
22:44 - just grabbing this one let me fire up my
22:46 - vs code there we go vs code here we are
22:50 - and I'll just go ahead and
22:53 - just fire this up here
22:56 - and let's create an xjs app
22:59 - all right so this looks good full real
23:02 - estate
23:03 - all right let me go ahead back up here
23:05 - and just click on this small command
23:07 - which says npx create next app very
23:09 - nicely hidden there I'll just go on to
23:11 - vs code and we'll start that so I'll
23:13 - just go ahead and open this up and just
23:15 - paste it up here and I guess the dot
23:18 - command still works if I want to install
23:19 - everything here let's go ahead and try
23:21 - this out and I'll just put up a DOT to
23:23 - just create a project in this same
23:25 - directory and it will ask us a couple of
23:27 - things do you want to use typescript
23:28 - obviously I want to use it let me also
23:31 - move myself a little bit on to the
23:33 - perfect place all right looks good looks
23:36 - good okay do you want to use es linting
23:39 - for this one so obviously I want to use
23:42 - es linting so I'll just go ahead move it
23:44 - up here
23:46 - and let me just
23:48 - all right just give me a second all
23:51 - right so we want to use eslinting uh yes
23:53 - we want to use eslinting uh do you want
23:55 - to Tailwind yes maybe you can contribute
23:57 - with the Tailwind a little bit so I'll
23:59 - just go ahead and yes do you want to use
24:01 - the source directory with this project
24:03 - uh we want to use the source directory
24:06 - or we want to use the app directory now
24:08 - this is where a lot of people get
24:09 - confused yes we want to use Source
24:11 - directory because as I mentioned up here
24:13 - the source directory is now everything
24:16 - remember the source yep source is
24:18 - everything and this will also give you
24:19 - the app directory so moving back yes we
24:22 - want to use it you want to use app
24:24 - router a 100 you want to use app router
24:27 - this is the way forward so anything that
24:30 - you're learning from now onwards you
24:31 - want to use app router I'll just hit
24:33 - enter would you like to customize the
24:34 - default import Alias I usually no but
24:37 - I'll show you that if you write yes what
24:39 - actually happens if you go ahead and
24:41 - select yes it gives you two options you
24:43 - can use at the rate or you can use or
24:45 - asterisk for showing where is the home
24:48 - of this home directory so we'll be using
24:50 - at the rate which is also the default
24:51 - and then it will just create a simple
24:54 - project in your application
24:56 - in your folder not your application so
24:59 - this doesn't usually take much of the
25:00 - time should be really really fast and
25:03 - yeah mostly other things are installed
25:07 - all right so there we go okay let's
25:10 - clean this up first let's understand the
25:12 - directory structure which I was telling
25:13 - you so notice here in the source we can
25:15 - see there is the app directory and
25:17 - inside this all the files are there we
25:19 - have the page.tsx which is always the
25:21 - common file there is also a layout which
25:23 - is also a wrapper and inside the layout
25:26 - we actually get the page so notice here
25:28 - if I just show you this is wrapper so
25:31 - everything that you are passing in as a
25:32 - children the whole job of this is to
25:35 - just render this if I go ahead and move
25:37 - it to next line it's much more easier to
25:39 - understand so this layout is nothing
25:41 - it's just a wrapper maybe you have a
25:42 - common navigation bar maybe you have a
25:45 - common footer so all this can be
25:47 - actually injected into the layout and
25:49 - then children whatever is being passed
25:50 - on it just renders it as it is so that's
25:52 - the basic meaning of how the layout
25:54 - actually works
25:55 - base.ts is the way how we deal with the
25:58 - front-end part of it and most of the
26:00 - client side or the client rendering will
26:03 - be doing through this I'll show you the
26:04 - difference between the client side and
26:06 - the server side in the next JS you don't
26:07 - have to worry in that part absolutely
26:09 - simple and basic I will go with that so
26:11 - we'll close this one this is the basics
26:13 - of it now inside this app directory
26:16 - there is so much that you can go ahead
26:17 - and work on with this and we will surely
26:19 - be doing that in just a second first
26:21 - let's open the package.json and you can
26:23 - see in order to run this we have to say
26:25 - npm run Dev which will run the next Dev
26:27 - which is let me tell you is painful low
26:31 - painfully slow not low painfully slow
26:34 - application to run so if I go ahead and
26:36 - say npm run Dev this looks like it it's
26:40 - faster but it's not so I'll just copy
26:42 - this and go back on to the browser
26:46 - and I'll start this and you will notice
26:48 - every time it takes build the first
26:51 - build is painfully slow but this is how
26:53 - you get your application all right now
26:56 - it's not just that we will be just
26:58 - working with these dependencies only we
27:00 - actually have some of our own
27:01 - dependencies as well which will be super
27:03 - helpful for us in the future so we'll be
27:05 - first installing them installing them is
27:07 - super easy you can just go ahead and say
27:09 - npm install the first package that we'll
27:11 - be using is xeos yes you can use fetch
27:14 - as well but I want to give you the taste
27:15 - of how things actually work in the
27:17 - production but feel free to use fetch
27:18 - there is no such hard fast rule then we
27:21 - have
27:22 - decrypt
27:24 - decrypt JS now bcrypt JS is a library
27:27 - which use is used commonly to encrypt
27:29 - the stuff I will be encrypting our
27:31 - password obviously we don't want to
27:33 - store the clear text password in our
27:34 - database not only that for creating the
27:36 - tokens as well if you remember I told
27:38 - you just a few minutes ago that hey
27:41 - we'll be using this middleware models
27:44 - and helpers and they will be useful to
27:46 - reset and verify the tokens we don't
27:47 - want to send ABCD we want to send a
27:50 - really long strings which is encrypted
27:52 - to the user so for that we'll be using
27:54 - the bcrypt JS it's a super simple and
27:57 - amazing library for this one now apart
27:59 - from this we'll be sending the tokens
28:01 - and securely we'll be sending it not to
28:03 - be stored in the local storage but we'll
28:05 - be sending and securing the cookies from
28:08 - the server side so that it doesn't get
28:09 - manipulated on the front-end side for
28:12 - this we'll be needing a Json web token
28:14 - so Json web token this is the library
28:16 - that we use for that now after that
28:18 - we'll be using node mailer this is one
28:21 - of the most simplest library to shoot
28:23 - out an email either you want to send it
28:25 - or shoot it out from the Gmail or if you
28:27 - have something else like AWS maybe
28:30 - Bluehost whatever you're using you can
28:32 - just go ahead and use the node mailer
28:34 - for that now another Library which I'll
28:36 - not be setting it up but I'll give it to
28:38 - you for as an exercise is this react uh
28:42 - hot dose this is one of my favorite
28:44 - Library which works really amazingly
28:46 - well it actually gives you small pop-up
28:48 - messages that hey just a user
28:50 - successfully signed up a user didn't
28:52 - sign up so we'll be using that I'll not
28:54 - be using it so you can skip it at this
28:56 - moment but it will be super good for you
28:58 - to contribute further down the road
29:00 - all right so I guess this is all that we
29:02 - need as of now if we'll be needing
29:04 - something else we can just oh I forgot
29:05 - one guy which is Mongoose how we are
29:08 - going to talk to the database now
29:09 - Mongoose is a library which helps you to
29:11 - talk to mongodb it's a wrapper around
29:13 - mongodb drivers makes our life a little
29:15 - easier so we'll be using that now one
29:19 - thing a lot of you who are coming from
29:20 - the backend development might be
29:21 - noticing I'm not using Express you don't
29:23 - need it you don't need it in the next
29:25 - years this is all what we'll be using so
29:27 - go ahead and install that if we'll need
29:29 - any more Library we can go ahead and use
29:31 - it later on I think this is more than
29:33 - enough for as of now and further down
29:35 - the road let's go ahead and work on with
29:37 - this okay so a couple of things I'll
29:41 - mention it straight forward I'll be
29:43 - creating couple of directories first and
29:45 - foremost so that you get a feel of how
29:46 - the directories and all of this is
29:48 - layout because notice already you can
29:49 - see the source and then app then all the
29:52 - things are inside that but it is too
29:53 - difficult to see I'll show you in the
29:56 - part here so if I go ahead into next.js
29:58 - notice inside the source everything is
30:00 - inside the app but here the structure
30:01 - the directory structure of the vs code
30:03 - might confuse some of the people so
30:05 - everything is inside the app all right
30:07 - I'll show you more of this as well now
30:09 - let's go ahead and create couple of more
30:11 - folders and directories and stuff like
30:13 - that first and foremost now click on the
30:15 - source very carefully click on the
30:17 - source and create a new folder and we
30:19 - want to create a folder known as model
30:21 - or you can say models both are the same
30:23 - so it helps us now to actually see that
30:26 - oh now we can see that everything is
30:28 - inside the app and there is a model
30:29 - directory as well we obviously will need
30:31 - some helper as well to shoot email and
30:33 - stuff like that so it's a good idea that
30:35 - we create these helpers as well again
30:37 - this was not going to crash your app or
30:39 - anything it's just a folder in directory
30:41 - structure all right now we have these
30:43 - application there's a lot more that you
30:45 - can go ahead and create like that so
30:46 - we'll be using that part as well now one
30:49 - of the most important thing that we'll
30:51 - be using is the environment variables
30:53 - obviously our database strings cannot go
30:56 - in the clear text format they need to go
30:58 - somewhere secure so that when we deploy
31:00 - them in the production they actually are
31:02 - secure there as well so one neat trick
31:04 - is you can come here into the vs code
31:06 - and just double click here and it will
31:08 - automatically create a file in the root
31:10 - of the directory that's where we want it
31:11 - it is dot EnV these are your environment
31:14 - variables and you can access them easily
31:16 - and in the production as well in every
31:19 - single hosting these environment
31:20 - positions are there that where you have
31:22 - to inject them in the digitalocean AWS
31:24 - everybody has these secret managers
31:26 - we'll come back on to this one right now
31:28 - we don't want to add anything like that
31:29 - I'm just creating a folder structure
31:31 - which can help you to do all these
31:32 - things all right so this is the basics
31:34 - that we have that everything now notice
31:35 - here everything is still inside the
31:37 - source as I mentioned then we have this
31:39 - app and then all the things are here now
31:42 - one more interesting thing which
31:43 - confuses a lot of people is majority of
31:46 - your file will go into the app and I
31:48 - told you just here that inside this app
31:51 - somewhere here it is your backend also
31:54 - goes your front end also goes so we need
31:56 - it's time that we verify that that how
31:58 - does that works so inside this app I'm
32:01 - going to go ahead and create a new
32:02 - folder and I'm going to call this one as
32:05 - login so login is going to be first now
32:09 - I have to ask myself before creating
32:10 - these folders am I creating it for
32:12 - backend or front end I am creating it
32:14 - for front-end so if I'm creating it for
32:16 - front end I know I have to call it as
32:18 - page yeah that's that's the page we
32:20 - talked about so I'll go back and inside
32:23 - this I'm going to go ahead and create a
32:25 - new file and I have to call it as page
32:28 - dot TSX the name is super super
32:31 - important call it something else and it
32:33 - will crash up everything here that's how
32:35 - it works so now that we have this
32:37 - page.tsx now it's time that we simply go
32:40 - ahead and just simply have the basics of
32:42 - a simple hello world kind of a thing or
32:44 - just have it a simple test or something
32:46 - like that so I'm going to go ahead and
32:48 - say export and default
32:52 - export default function and we'll call
32:55 - it as login page just like this now
32:57 - inside this login page obviously you
32:59 - want to return something to just say
33:02 - hello world or something like that right
33:03 - now I'm not worried about the
33:04 - functionality so I'll just go ahead and
33:06 - say hey return and what do I want to
33:08 - return a simple div and which will say
33:11 - login and a Dev close that's it that's
33:13 - all what we are doing now obviously I
33:15 - would love to just properly align this
33:18 - this is really really bad I'll enable my
33:21 - uh oh there we go so I need to just have
33:25 - this now no Auto prettier is coming in
33:27 - I'll make sure I enable that so that
33:29 - doesn't bother you that much but I have
33:31 - to just save it now the moment I save it
33:33 - that is it I don't have to worry about
33:35 - any route or anything I can go back on
33:38 - to my next app and I can simply go ahead
33:40 - and say slash login
33:42 - and that's it probably I didn't started
33:45 - my server yeah my bad so we'll just go
33:48 - ahead and say npm run Dev
33:51 - and there we go our server is up and
33:53 - running
33:55 - all right looks good looks good let's go
33:58 - back on to the browser and hit a login
34:00 - route again and this is painfully long
34:04 - so we can see that this is a login of
34:06 - course you can use go ahead and use your
34:08 - skills like you can go ahead and add a
34:10 - class name then you can go ahead and say
34:12 - Hey I want to have something suggestions
34:14 - please
34:15 - Flex
34:17 - okay no suggestions
34:20 - I'll just leave it I'll just add a
34:22 - simple classes here so class name we'll
34:24 - just go with the text Dash Center text
34:27 - Dash white I was expecting that it will
34:30 - give me all these suggestions and we'll
34:33 - just also say text Dash 2 Excel yep
34:37 - so that at least we can see that there
34:39 - is a nice login
34:41 - there should be text Center as well
34:43 - align Center yeah there should be text
34:45 - Center all right anyways we'll just
34:48 - figure out the CSS part little bit later
34:50 - on but as we can see now can I go ahead
34:52 - and use a sign up here
34:55 - nope I cannot this is a 404 page by the
34:58 - way you can customize your 404 page as
35:00 - well you can read the documentation a
35:02 - little bit and you can customize just
35:04 - read about hey I want to learn about 404
35:08 - not found.js so you can create a new
35:11 - file there with the name of just not
35:14 - found as you can see app blog not found
35:17 - so wherever your app is inside the blog
35:19 - and this is where you can just create a
35:21 - file and customize this one I'll not do
35:23 - that as of now I just want to show you
35:24 - the basics of how things are working now
35:26 - let's try to crash this app so let's
35:29 - just say I understood the basics of it
35:30 - but I didn't understood truly of it so
35:33 - I'll just go ahead and again click on
35:34 - the app create a new folder you always
35:37 - have to create a folder for every single
35:38 - route I'll just go ahead and say sign up
35:41 - and obviously it's engineering that we
35:44 - try and fail the stuff as well so let's
35:46 - just say I call this one instead of the
35:48 - page I just call it as login dot TSX
35:53 - what happens in that case again we are
35:56 - going to go ahead and say export uh
35:59 - default command suggestions and we'll
36:03 - call this one as we should call it as
36:05 - sign up page that would be more cool to
36:07 - crash
36:08 - because we are in the sign up so let's
36:10 - just call this one as signup.tsx so now
36:13 - we have export default and I'll not call
36:17 - it as login page
36:19 - sign up page
36:22 - there we go and inside this we're going
36:24 - to go ahead and say We'll return what do
36:26 - we want to return a simple div with the
36:29 - flex it's probably not we'll also have a
36:32 - simple sign up and we'll have a div just
36:35 - like that and again of course this needs
36:37 - to be there
36:38 - all right so we're returning this now
36:40 - let's just save this there is no problem
36:42 - here it says compiled successfully no
36:44 - problem there but if I go up here
36:46 - instead of
36:47 - hitting the sign up now if I let's try
36:50 - login First
36:51 - login works and then I try
36:55 - sign up
36:56 - nope it doesn't work so now we
36:59 - understand the importance of the file
37:00 - and naming convention because it's a
37:02 - naming based routing so I'll go ahead
37:05 - and turn it up into page.tsx and what
37:08 - you're going to notice as soon as it
37:10 - compiles all you got to do you don't
37:12 - even need to hit the reload so it works
37:14 - out of the box so this is how the naming
37:16 - convention and everything works up here
37:19 - all right
37:20 - let's go back and try to explore a tiny
37:23 - bit more into that how the things are
37:25 - going to work all right so as I told you
37:27 - everything is inside the app and there's
37:29 - one major portion of it so we have
37:31 - talked about how the front end part will
37:33 - look like and I told you you can also
37:35 - work with the back end part of it but
37:37 - the back end part needs to be inside the
37:39 - folder of API let's go ahead and do that
37:41 - so inside the app we'll create a new
37:43 - folder naming convention cannot
37:46 - emphasize it more API and inside this
37:49 - API this is way how you actually Define
37:51 - your routes so for example let's take
37:54 - this API and in this API the way how
37:56 - you're going to make your folder is
37:58 - going to be your API route so for
38:00 - example if further inside this API you
38:03 - create a folder or maybe a couple of
38:05 - folders let's go ahead and work on with
38:06 - that so you created a folder named as
38:09 - users maybe for an example
38:12 - and you also created a folder name as a
38:17 - what else home
38:19 - so you can go ahead and create and this
38:21 - will Define that how the routes are
38:22 - going to work so API slash users and
38:26 - similarly API slash home so this is how
38:29 - it actually works absolute basic there
38:31 - is nothing too much complex about it but
38:33 - this is how it actually goes I'll go
38:34 - back and now inside the apis I want a
38:38 - new folder structure to be followed
38:39 - which is known as users so obviously my
38:42 - route is now not just the API directly
38:43 - but API slash users and then whatever
38:46 - the file folder how am I creating and as
38:49 - I mentioned inside this API just like in
38:51 - the front end it is exactly almost copy
38:53 - paste but the file name is just route so
38:55 - what we learned here is if we want to
38:57 - create a sign up we have to create a
38:59 - signup folder first and inside that
39:01 - folder we have this page.tsx similarly
39:04 - in the users also we need to create a
39:06 - folder first now this folder can be
39:09 - anything sign up anything whatever you
39:11 - like so I'll just go ahead and create a
39:13 - sign up
39:14 - and once I have this sign up now inside
39:16 - the sign up you have to create a route
39:18 - that is Route dot TS of course it's not
39:22 - X because it's not a component now just
39:24 - to make sure you understand it more
39:25 - proper inside the users I'll create one
39:28 - more folder that will be login because
39:30 - obviously anyhow I have to create login
39:32 - route and I'll just create a new file
39:34 - and that will be route dot TS so this is
39:39 - now a proper folders and structure that
39:41 - we have that we have this login API
39:43 - route we have this sign up API route as
39:46 - well
39:46 - this is now finally a complete guide
39:50 - that how actually the folder structure
39:52 - and everything is is laid out this is
39:54 - absolute basic uh but there's couple of
39:56 - things I cannot just go ahead and work
39:58 - on with sign up I cannot go ahead and
40:00 - work on with login because these apis
40:03 - needs database connection and this
40:05 - next.js is an edge run framework so
40:08 - there's always edged runtime so it
40:11 - doesn't stay connected with your
40:13 - database every single time there is a
40:14 - database call you have to actually call
40:17 - your database make a connection with it
40:18 - and then you talk to a database send
40:20 - some file receive some file all these
40:22 - things actually go ahead and work
40:24 - through that now in order to actually
40:26 - have this you need to have some
40:28 - configurations so I'll just close this
40:30 - app notice here we have helpers outside
40:32 - we have models outside just like this we
40:35 - can also have our database connections
40:37 - outside as well and there are a lot of
40:39 - ways how you can go ahead and do this so
40:41 - at least let's go ahead and connect the
40:42 - database I'll first go into EnV and I'll
40:45 - create couple of environment variables
40:46 - so that they are helpful for us and
40:48 - later on we can use them so first and
40:50 - foremost we'll be having this
40:52 - underscore URL or URI whatever the way
40:55 - you prefer I'll also be using a token
40:58 - underscore
41:00 - secret that could be any secret I'll be
41:02 - using something like next Js YouTube
41:06 - whatever and we'll also have a domain
41:08 - this will also be useful later on so
41:11 - I'll just use an HTTP local 3000 that's
41:14 - my domain name this will be helpful for
41:16 - me when I'll be shooting some emails so
41:18 - I obviously want to click on the and
41:20 - have the localhost so this will be
41:21 - useful later on now let's go back on to
41:24 - getting the string so let's go ahead and
41:26 - connect
41:27 - compass and just literally copy this
41:29 - come back here paste it up here
41:33 - and all you have to do is add your
41:35 - password here so obviously I'll be
41:37 - adding my password but behind the scenes
41:39 - so once this video gets over this part
41:41 - of the video gets over I'll add my
41:43 - password so I'll just say add my
41:45 - password so obviously I'll not add it in
41:47 - front of you otherwise I don't want to
41:49 - mess up anyways it's a test database but
41:51 - still okay so I'll just save it and
41:53 - we'll try to connect with the database
41:55 - I'll walk you through with the
41:56 - connection at least the code part of it
41:58 - now notice here we have app helper
42:00 - modules so similarly we'll have the DB
42:02 - config whatever the name you want to
42:03 - give it I'll give it a name of dbconfig
42:06 - I think that makes sense so DB config
42:08 - yeah that sounds good to me now again
42:12 - inside the DB config I would love to
42:13 - keep uh I can just actually close all
42:16 - this close others yeah close everything
42:20 - all right so inside the DB config
42:23 - come on
42:25 - yeah now inside the DB config I will
42:27 - just have a dbconfig.ts file let's go
42:30 - ahead and create so DB
42:34 - config.ts
42:35 - in this part the naming convention
42:38 - doesn't really matter much so you can
42:39 - just call it whatever you like it is not
42:41 - going to bother you anything at all in
42:44 - order to connect with the database let's
42:45 - get some more screens real estate the
42:47 - first thing is who actually is capable
42:49 - of connecting or talking to mongodb it's
42:52 - Mongoose so we're going to go ahead and
42:54 - have Mongoose and that Mongoose will be
42:56 - coming up from Mongoose and then we'll
42:58 - be exporting this method as well and it
43:01 - obviously needs to be a sync we are
43:02 - talking to database and as I always say
43:04 - database is always in another continent
43:05 - so things needs to be a sync so I'll
43:08 - just go ahead and have a function just
43:09 - like this connect we'll call this one as
43:11 - absolutely simple connect and we'll wrap
43:13 - this up into try catch block so I'll
43:15 - just go ahead and have the try
43:18 - try catch there we go the catch part is
43:21 - the easiest one so first we are going to
43:23 - handle that part it's really simple
43:25 - we're going to have a oops console dot
43:27 - wrong and we'll say the classic the most
43:30 - horrific error which is something went
43:31 - wrong but we'll also go ahead and use
43:34 - the console log for displaying the error
43:35 - you can go ahead and use error.messages
43:37 - as well that's totally up to you no
43:39 - problem at all in that case let's try to
43:41 - get a string of mongoose connections so
43:43 - Mongoose dot connect obviously
43:46 - dot connect and this requires you to
43:50 - have just the URL now I'll not give the
43:52 - URL which is suggested me by the copilot
43:54 - I'll be using my own string and that you
43:56 - will see quite a lot in this entire
43:57 - Series so process.env dot
44:01 - um and again make sure you take the URL
44:04 - and name of the variable pretty
44:05 - accurately it is URL I'm using I
44:09 - should be using all uppercase to make it
44:11 - actually all underscore URI
44:15 - this one should also be domain so
44:18 - everything is consistent there
44:20 - I'll I'll simply copy this and we'll say
44:23 - manga URI now here's the interesting
44:26 - thing since we are using typescript
44:27 - there is no guarantee that this URI will
44:29 - always resolve but I know it will always
44:31 - so I'll just put an exclamation to make
44:33 - sure that hey I take care of it you
44:35 - don't worry it will always be available
44:37 - and that's it so all you have to do is
44:39 - this much now once you have done this
44:41 - much then you can actually grab a
44:43 - connection so we can go ahead and grab a
44:45 - connection
44:45 - and actually let's hold this into a
44:48 - variable
44:49 - so connection will be given to you by
44:52 - Mongoose dot connection
44:54 - once Mongoose has connected it will give
44:56 - you Mongoose dot connection the string
44:58 - will be available and based on this you
45:00 - can actually listen to variety of events
45:02 - for example
45:04 - one such event is a connection and every
45:07 - event is being listened by the word dot
45:09 - on now inside this you can go ahead and
45:11 - try the connected
45:14 - connected this is the one event and it
45:16 - fires a callback obviously so once I
45:18 - have this call back and I'll just go
45:21 - ahead and use it like this
45:23 - and we'll remove this yep
45:26 - sometimes these Auto suggestions are
45:28 - just painful but bear with me so we'll
45:31 - just simply have a mongodb connected
45:34 - successfully
45:36 - successfully yeah I would love that okay
45:40 - so this part is all done you can also
45:42 - listen to some of the errors in case you
45:43 - wish to so similar to that connection
45:45 - dot errors and you can just go ahead and
45:48 - listen to these errors just like this
45:49 - I'll come back here if there is any
45:52 - error you can just go ahead and say hey
45:54 - mongodb connection error please make
45:56 - sure mongodb is running then we can pass
45:58 - on error as a post process string and we
46:00 - can exit gracefully here so this is all
46:03 - that is required to go ahead and get
46:05 - connected with that and I'll save this
46:07 - one as well so there we go so this is
46:09 - the basics of it now the most important
46:12 - part is this connect needs to come in in
46:14 - almost every single place in the API
46:16 - because without the connect
46:18 - you cannot talk to database and every
46:20 - single time an API call is there you
46:22 - have to have to connect with the
46:23 - database there is no exception there is
46:25 - no option that is available for you this
46:28 - is how it works so there is no exception
46:30 - on that part all right so I think this
46:33 - is a really really a good progress that
46:35 - we have made about this application so
46:37 - far all right so this looks okay this
46:40 - looks good okay what else we can do uh
46:43 - next up now next up I want to do is
46:46 - actually I want to prepare my at least a
46:49 - sign up screen so that I know that there
46:50 - is a sign up screen and how things are
46:52 - actually going on working on with this
46:54 - all right so let's go into again I don't
46:56 - want to go into API backend part I'm not
46:58 - handling I'm handling first the front
47:00 - end part so this is my sign up screen
47:02 - I'll go into page.tsx and I will
47:05 - obviously import few of the things now
47:08 - one thing important that you need to
47:09 - understand
47:10 - from the front end part I need to grab
47:13 - some data and send it to the backend
47:15 - just like we do in a regular application
47:17 - in react application or maybe there's a
47:20 - backend in Django spring wherever that
47:22 - is you collect the information and make
47:23 - an xcos request or fetch request to that
47:25 - the same thing I have to do but there is
47:28 - a problem in the recent version of the
47:30 - next JS everything is a server component
47:33 - and server component don't have access
47:34 - to anything that is on the front-end
47:36 - side it's on server so the most crucial
47:39 - thing that you need to understand here
47:41 - is that whenever there is this dilemma
47:44 - between the front end part or the back
47:46 - end part you need to understand it very
47:47 - clearly that anything that's on server
47:50 - needs can access everything on the
47:51 - server side file system anything that's
47:54 - on the server front-end part if you want
47:56 - to take advantage of you state use
47:58 - effect anything that's on the front end
48:00 - part of it Windows location maybe you
48:02 - want to access the location the URL
48:04 - anything that's on the page that's on
48:06 - the client side and you have to
48:09 - explicitly make make your application as
48:11 - a client side cut it no confusion
48:14 - absolutely simple anything that's on the
48:16 - back end here's a simple hint most of
48:18 - the things in the API folder yep that's
48:20 - on the back end side that's default
48:22 - server component so that is that but
48:24 - anything that's usually outside not
48:27 - always but outside is usually a client
48:29 - component if you want to take some data
48:31 - in this case the sign up form we want to
48:33 - take some data from the user and send it
48:35 - on the back end so obviously that is
48:37 - going to be on the front-end side so let
48:39 - me walk you through how we can convert
48:40 - any component into the front end or the
48:43 - client component it's super super simple
48:45 - let's go ahead and go up here all you
48:48 - have to do is simply say use client just
48:50 - like we have used strict we can go ahead
48:52 - and say use client that is it one
48:55 - decorator and it is now a client
48:56 - component you can use all of your window
48:58 - object you can use all of your use date
49:00 - you can use all of your use effect
49:02 - everything yeah how cool is this all
49:05 - right so now we'll be needing some of
49:07 - the libraries and stuff so obviously
49:08 - I'll be needing something to redirect
49:10 - the thing so I'll be just going ahead
49:12 - and say Hey I want to import the link
49:14 - this is the next link okay I'll be also
49:17 - needing react as well so I'll be saying
49:19 - that hey let's go ahead and bring in
49:21 - react and from the react we'll be saying
49:24 - we'll be using a couple of stuff but as
49:26 - of now let's bring in react only I don't
49:27 - know what we'll be using and we will be
49:30 - using because once the user is
49:32 - successfully signed up I want him to
49:34 - redirect or get redirected to the home
49:36 - page for this I need to use router
49:38 - here's a common thing which a lot of
49:40 - people are going to make mistake the
49:42 - router is changed in Nexus in case you
49:44 - are coming up from the previous routers
49:45 - I'll go ahead and say I want to use
49:47 - router so this is the way how you bring
49:49 - in use router and this router actually
49:53 - notice your suggestion it's absolutely
49:55 - wrong this suggestion doesn't work you
49:58 - cannot bring it like this
50:00 - and let me show you how you actually
50:01 - bring it you have to actually bring it
50:03 - from next come on I can write it next
50:07 - slash
50:09 - again this suggestion is also Wrong by
50:12 - default even your GitHub co-pilot every
50:14 - suggestions these are all wrong because
50:16 - this is the latest version of it this
50:18 - one is now coming up from navigation yep
50:22 - use router not user router use router
50:25 - this is the one I want to bring in use
50:27 - router is actually coming up from
50:28 - navigation and I tried it while building
50:30 - the application every single time the
50:32 - suggestion I relied on it it gave me the
50:34 - wrong suggestion so maybe it will take
50:36 - some time and last but not least we'll
50:38 - be using xeos so I think we need to
50:41 - bring it like this
50:42 - xeos and these suggestions are usually
50:46 - correct
50:47 - not this time again suggestions are good
50:50 - but they always don't work always so
50:52 - we'll be just going xcos
50:55 - all right
50:56 - so this is the basics now you'll also
50:58 - get these squiggly line because a lot of
51:00 - time a lot of models Mongoose xios this
51:03 - is perfect installation there is no
51:05 - problem in the installation but
51:06 - typescript is one such thing which
51:09 - requires type definitions as well and
51:12 - since the axios types are not defined we
51:14 - have to actually explicitly install it I
51:16 - don't remember them always so always
51:17 - remember this you can click up here and
51:20 - then you'll get this bulb icon and you
51:22 - can click on it and you can say that hey
51:24 - uh right now it's for error for the
51:28 - unused input but it will also give you
51:29 - that hey install the dependencies or the
51:31 - types for it so I usually click on that
51:33 - that's how I actually go for it right
51:35 - now we are not using Xeo so that's why
51:36 - it's getting a little bit bothered so no
51:38 - no worries on that part okay how we are
51:41 - going to get a sign up now first and
51:42 - foremost we haven't designed our model
51:45 - yet but I'll do that very very soon so
51:48 - first let's go ahead and try on the
51:49 - front end part what user data you want
51:52 - to accumulate so I'll go ahead and say I
51:54 - will grab a user so so it will give me a
51:57 - suggestion hopefully set user react use
52:00 - date and I'll just go ahead and close it
52:02 - like that
52:03 - now what all information I'm looking up
52:05 - for uh maybe I'm looking up for an email
52:07 - maybe I'm looking up for a password of
52:10 - course and also maybe username
52:12 - so let's just say username that is all
52:15 - that is all the information I'm looking
52:17 - up for as of now and of course once a
52:20 - user actually gives me this all
52:21 - information there should be a method
52:23 - which does all the sign up thing so
52:25 - we'll be just going ahead and say const
52:27 - and I'll say on sign up and this method
52:31 - obviously will be talking to database so
52:33 - this needs to be a sync and there we go
52:35 - right now I have no clue that how this
52:37 - will work so I'll just keep a method as
52:39 - it is I'm not worried on that part so
52:41 - I'll just keep it as a test all right
52:43 - now right now there is nothing uh more
52:45 - in my mind I just want to have a simple
52:48 - divs here so that I can just go ahead
52:50 - and place it up here so I'll just use a
52:54 - little bit of my CSS that I have
52:55 - pre-written here so I'll just use that
52:57 - instead of this login and stuff so I'll
52:59 - just go ahead and give it to you
53:01 - directly there's nothing basic
53:03 - all right now inside this we are going
53:06 - to first have in simple H1 which says
53:09 - login
53:10 - and I think that should work a tiny bit
53:12 - decent let's see that if we are crashing
53:14 - our app or it's going good and we should
53:17 - be ah we should be in the sign up page
53:19 - so we should not be saying login we
53:20 - should be saying sign up that's better
53:24 - all right so our looks sing up
53:29 - all right
53:31 - sign up there we go all right looks very
53:35 - tiny but I'm okay with that now after
53:37 - this I'll be creating a couple of input
53:39 - forms for this I'll be starting with the
53:41 - label we just need to create one and
53:42 - then after that we'll be just copying
53:44 - and pasting so have some line break then
53:46 - let's go ahead and have a label
53:49 - this one is going to be HTML for
53:52 - not for email but I'll I'll edit that
53:54 - this one will be for username I'll First
53:57 - grab the username this one will be for
53:59 - username
54:01 - all right by the way we have we have all
54:04 - lower case that's nice we have this
54:06 - label up here and let's see how does
54:09 - that look yeah username not the best but
54:11 - I'll I'll work with that all right next
54:14 - up is we need an input
54:16 - now input field will have some other
54:18 - things ID username okay I'm fine with
54:22 - that type is text and the value is user
54:25 - dot username yep absolutely correct and
54:28 - on change absolutely perfect in case you
54:30 - didn't got it we are grabbing the event
54:32 - we are calling this set user which is a
54:36 - method a function responsible for
54:39 - updating my variable user so that's why
54:41 - I'm using here is set user and set user
54:44 - in which we are keeping existing user
54:46 - everything same and the username only is
54:48 - getting updated with the E dot Target
54:50 - dot value which is coming up from here
54:52 - absolutely simple uh no problem uh we'll
54:55 - also grab a couple of modes like for
54:57 - example it is not suggesting me anything
55:00 - but
55:02 - all right
55:04 - I want placeholders as well
55:07 - placeholder and I'll say username let's
55:10 - see how does that look
55:13 - decent not the best but I'll just work
55:16 - with that in case you want you can go
55:18 - ahead and add a class name we can add a
55:20 - little bit of padding of four
55:24 - there's some suggestion let's see if
55:25 - that suggestion uh okay not the best not
55:29 - the bad
55:30 - all right I think padding four is too
55:33 - much I'll just go ahead and padding one
55:36 - is
55:37 - uh two we'll go with the two we'll go
55:40 - with the two all right okay so this is
55:42 - just a decent as I told you you can use
55:44 - your Tailwind skills and just uh design
55:46 - this much better now the best thing
55:48 - about this is now I have to grab email
55:50 - and password so I can just go ahead and
55:51 - copy paste this so I'll just grab from
55:53 - here I'll make a duplicate of this one
55:56 - and obviously they made a mistake yep we
56:00 - shouldn't be copying and pasting till
56:02 - the div my bad and we'll just copy from
56:06 - the label to the input now we'll copy
56:08 - and paste better so we'll just go ahead
56:11 - and use multi-cursors username username
56:15 - username username username this needs to
56:19 - go on email
56:20 - let's see if we have made any mistake
56:22 - should be okay
56:24 - and then let's copy and duplicate this
56:28 - and this one this time will be password
56:30 - so command D command d control D also
56:33 - multi-cursor I love that
56:36 - password
56:37 - the text should also be password
56:43 - password
56:44 - and that should be it for majority of
56:48 - the portion
56:50 - username email password horrific form
56:52 - but it will work it will work now let's
56:55 - go ahead and grab a button as well so
56:58 - we'll just go ahead and say button just
57:00 - like this and this button will have
57:03 - class name ah I love that and what we're
57:06 - going to do is just have this button and
57:08 - we'll call this one as sign up suck sign
57:12 - up
57:12 - all right sign up button sign up here
57:16 - well right here okay a couple of more
57:19 - things we need in this one is
57:21 - first and foremost this signup needs to
57:23 - go uh somewhere so obviously we cannot
57:26 - just go like this so we need to have an
57:28 - on click
57:29 - suggestions please no suggestions
57:32 - on click
57:34 - yeah on click sign up so I'm referring
57:36 - to this method which I created above I
57:38 - don't know how this method works but
57:40 - right now this is all the basics also
57:42 - apart from this I'll use a link
57:45 - so link will go to a login and will say
57:49 - something like this this page will go
57:51 - like
57:54 - visit login
57:55 - I'm not interested about login page yeah
57:59 - that's basics
58:00 - so there we go now we have a sign up
58:03 - page looks decent and we have this
58:05 - username email password uh so right now
58:08 - I don't want this email
58:10 - okay so we got this one so password sign
58:13 - up everything is working nice we are
58:15 - happy with this this also is taking us
58:16 - to the login page which is not yet
58:18 - design but we can actually quickly
58:20 - design that very very uh Basics all part
58:23 - of it so nothing too much worried on
58:25 - that part as of now we are going
58:26 - absolutely good with that let's also try
58:30 - and do login also in this same video
58:34 - Also let's let's try that okay so I'll
58:37 - just go up here and we'll go to vs code
58:40 - okay this part looks good notice here
58:42 - how easy it was for us to actually
58:44 - Design This I'll go ahead and create
58:47 - copy all of this so copy this let's go
58:50 - into the login and page and let's go
58:53 - ahead and paste it obviously we want to
58:55 - change first the sign up page to login
58:57 - page that's the most important thing
58:59 - login page
59:00 - okay let's analyze this from top to
59:02 - bottom uh this needs to be client okay
59:04 - link is there react is there use router
59:07 - is there we are not using it but we'll
59:09 - be using it very soon to forcefully push
59:11 - the user to slash profile or something
59:13 - like that
59:15 - all right so this is what we have as a
59:17 - user
59:18 - we'll be grabbing only the email and
59:20 - password so this time it's a login so I
59:22 - don't need this field
59:24 - all right no suggestion please thank you
59:26 - this one is on login makes sense on
59:29 - login
59:30 - and then we are returning this sign up
59:33 - no it should be login
59:35 - and login all right and then we have
59:39 - this username is not here we are just
59:42 - email and password so I think we can
59:44 - just get rid of this very first
59:47 - and should be all okay yep all okay so
59:51 - there we go email is there nice and easy
59:53 - password is there nice and easy uh this
59:55 - one is obviously going to be on login
59:59 - did we ported anything else yep we don't
60:02 - want this on so this one is good we have
60:05 - got this one password is getting
60:07 - password value good good login here
60:12 - and what we can see uh visit
60:16 - sign up here we are not too much worried
60:18 - about providing a proper message to the
60:20 - this is not what we are going to do all
60:22 - right now notice here though all the
60:23 - error is because of axios but this is
60:25 - not going to bother anything this is
60:26 - just because of we are not using it
60:28 - right now notice here XC has declared
60:30 - but it's never used so don't worry don't
60:32 - bother this is just squiggly line
60:33 - warning I'm not going to do anything all
60:36 - right save this and let's see if I go
60:38 - ahead and there we go sign up is good
60:40 - and our login page is not good now it's
60:43 - good take some time some reloads common
60:45 - so we have some email and password and
60:48 - that's nice and we can visit the sign up
60:51 - page and yeah it takes a little time did
60:55 - we properly linked it
60:56 - looks like not
60:58 - yeah not this one is
61:00 - sign up so there we go small debuggings
61:04 - sign up there we go login sign up all
61:07 - right so at least we are able to do this
61:09 - much of the thing now not this much is
61:11 - not enough we need to do a tiny bit more
61:13 - tiny bit more uh I want to walk you
61:16 - through with One More Concept which will
61:17 - act as a foundational for a lot of
61:19 - upcoming things don't worry about these
61:20 - Reds I know these are bothering you but
61:22 - these are okay okay just like we have
61:25 - studied about these logins and
61:27 - everything we need to study about one
61:28 - more thing which will also be super
61:30 - super helpful for us which is known as
61:32 - how we can grab and build a profile for
61:35 - the user now notice here this profile is
61:36 - not in the API this is not in the
61:38 - backend part I'm talking about the front
61:40 - end part only so I'll just go ahead and
61:42 - say that hey app I'll create one more
61:45 - folder for you which will be
61:47 - profile
61:48 - and as you know in the profile I
61:51 - obviously have to create a page.tsx so
61:54 - page.tsx and we'll just go ahead and say
61:57 - export suggest me please
62:00 - suggestions no no suggestions hate that
62:03 - export default yeah now suggestions ah
62:06 - good I like that
62:08 - and we can just go ahead and say return
62:11 - give me something yep nice and easy
62:14 - and a profile
62:16 - and an HR
62:18 - and what else profile page okay I'll
62:21 - take that now I'm not going to take this
62:23 - much I'll just go with this
62:26 - and I'll just go ahead and wrap this up
62:29 - this div
62:30 - isions are good as long as you know what
62:32 - you are doing or what your application
62:34 - is trying to do
62:36 - otherwise you'll fall into the crap okay
62:38 - I'll just indent this a little bit so
62:40 - that it doesn't bother you that much
62:42 - all right so this is my profile page and
62:44 - as you all know this is super easy to
62:46 - work on with this later on we'll learn
62:48 - how to protect these profile Pages as
62:50 - well so I can go ahead and work on the
62:52 - profile okay profile page works
62:54 - absolutely fine but what about if I go
62:57 - ahead and move into the profile and type
63:00 - slash One how can I grab this one
63:03 - because this is a very crucial part of
63:05 - building the application how can I grab
63:07 - not just one but if I go ahead and write
63:09 - ABC here this is a common syntax you'll
63:12 - be doing this thousands of time there's
63:14 - a special syntax of how you do this in
63:16 - the next year so let's go back on to the
63:17 - code there we go so in any folder or any
63:21 - route where you want to grab this ID
63:23 - there is a special syntax in next.js
63:25 - right click on this create a new folder
63:27 - yeah
63:28 - folder not file all right and make sure
63:32 - you put this into square brackets in the
63:34 - square bracket whatever you want to
63:36 - extract whatever the object named
63:37 - remember we have this request.body
63:39 - similar we have request.params in case
63:42 - you worked somewhere in the next.js not
63:44 - next year's express.js similar to that
63:47 - you have to grab your ID it could be
63:49 - user ID it could be ID whatever you want
63:51 - it could be anything but it needs to be
63:53 - in the square bracket but for example if
63:55 - I go ahead and say ID
63:57 - ID
63:58 - this is not alone enough this since is a
64:01 - folder and every folder on the front end
64:03 - needs a page known as page.tsx you have
64:05 - to create that so I'll just right click
64:07 - and create a new file and I'll call this
64:09 - one as page not a page page dot TSX
64:13 - there we go now inside this page.tx you
64:16 - will be able to grab it how first I'll
64:18 - go into outside page because we have
64:20 - this already created for us I'll copy
64:22 - this and I'll go into this page.tsx
64:25 - inside the square ID yep the square id1
64:28 - so this is going to be the page where
64:30 - I'll actually grab everything now notice
64:32 - here this is not my client component I
64:35 - haven't said use client or something
64:37 - like this
64:38 - I'll just go ahead and call it something
64:40 - different because profile page there's
64:42 - already profile page although it's not
64:43 - going to bother me anything but I don't
64:45 - like it I'll probably call it as user
64:48 - profile
64:49 - not even page user profile whatever the
64:52 - name you want to give it's not going to
64:53 - bother you all right so how can we grab
64:56 - these parameters really simple you have
64:58 - to Simply say I want to grab some params
65:00 - that's it this prompts needs to be of
65:03 - type any but if you know the exact type
65:05 - strings whatever you're passing on you
65:06 - can get that type but since I'm not
65:09 - focusing too much on the typescript so
65:10 - that everybody can understand next.js so
65:12 - we'll simply go like that now
65:15 - how we can actually grab this so just
65:17 - here in the profile page we'll first add
65:20 - some classes here so that it can be
65:22 - easily visible so we'll just grab text
65:24 - Dash 2 not to 4XL we need we need big
65:28 - one for Excel text is already white yeah
65:31 - I think that's enough now just go ahead
65:34 - and inject your variable and all you
65:36 - have to go ahead and say is
65:37 - params.whatever you are grabbing in this
65:39 - case we are grabbing ID so just grab the
65:41 - ID that's it now let's go back and
65:45 - probably we have got some errors I know
65:47 - it is compiling successfully let's go
65:49 - ahead and kill this probably I saved it
65:51 - at the wrong time
65:53 - all right compiled successfully now
65:56 - let's go ahead and grab this come on
65:58 - take so much time so we can see the
66:00 - profile and ABC I think we should
66:03 - actually span this up all right to show
66:05 - you in a little bit better manner
66:07 - although it doesn't really matter but
66:08 - I'll just go ahead and do this I'll cut
66:10 - this out and I'll go ahead and say
66:13 - span just like this paste it up here and
66:16 - I'll add some classes onto this one
66:18 - and we can close this down and we can
66:21 - say hey what do you want I want first of
66:23 - all padding off two and I want it to be
66:26 - rounded I want a PG Dash golden do you
66:32 - have golden yeah they don't have golden
66:34 - we have to go through with the orange
66:35 - and the text is going to be black I
66:38 - guess
66:39 - text Dash black you can use your own
66:43 - CSS of Tailwind there we go we got it we
66:46 - just need a tiny bit of margin on left
66:49 - we'll just grow with the two
66:51 - there we go so although it was not
66:55 - intended to make it look like that I
66:57 - know what you're thinking don't think
66:58 - that it's not that uh so I will go ABC
67:03 - and we can go one one two two three
67:05 - three whatever you're grabbing it's
67:06 - gonna grab it from there so this solves
67:08 - a lot of our future problem that we'll
67:10 - be having looks nice absolutely gorgeous
67:12 - there and simply if I go on to just the
67:15 - profile one page is also getting served
67:17 - there but that is this page this page
67:20 - that right now here this is a different
67:22 - page and once you have this uh some IDs
67:25 - after this like 9988 whatever this is a
67:28 - difference page that is being served so
67:30 - this actually sums up your Basics about
67:33 - nexius I know this is a really really
67:35 - long video but again uh we'll be having
67:37 - a really long short videos about
67:39 - discussing about next years and
67:40 - everything now we are in a perfect
67:42 - position that we have our folder
67:44 - structure ready everything is almost
67:45 - ready that how we want it to be our DB
67:49 - connection is also ready now in the next
67:51 - video or if you're watching in
67:52 - continuation that means just to skip
67:54 - forward what I'm going to do is now
67:57 - first we'll create an API how we can
68:00 - create a back end I'll just close a lot
68:02 - of things here okay so let me just walk
68:05 - you through what we are going to do next
68:06 - up in this one so the next plan is
68:08 - really simple we simply want to work
68:10 - with the back end now we have worked
68:12 - quite a lot on the front-end part handle
68:13 - the parameters file structure directory
68:16 - structure client component server
68:18 - component a lot of things we have
68:19 - discussed now the next goal is how I can
68:22 - design apis that will make me a full
68:24 - stack developer almost so in in the next
68:27 - video or just a fraction after if you're
68:29 - watching in continuation next up we are
68:31 - going to take an attack on building the
68:33 - apis we'll start obviously with the sign
68:35 - up API the most basic will extract the
68:38 - data and we'll sign up a user and throw
68:40 - up into the database that is all what we
68:42 - want to do and that would be a fantastic
68:44 - start and then eventually we'll do login
68:46 - then mailing verify tokens and all of
68:48 - that but slowly slowly we want to take
68:50 - enough of the gradual that it's
68:52 - enjoyable it's fun and all of this so I
68:55 - hope you have enjoyed this one and in
68:57 - case you are watching it along with me
68:59 - then hey let's catch up in next video if
69:01 - you're watching it in the next one just
69:03 - the moment of pause and let's catch up
69:04 - on the other side
69:07 - all right hey there everyone hitesh here
69:10 - and welcome to another video or another
69:13 - part of the video in case you're
69:14 - watching in sequence and it's a next
69:17 - year's complete full stack course that
69:19 - you're watching on YouTube of course so
69:22 - in this video I'll walk you through with
69:23 - the next step now this video is almost a
69:26 - part two so in case you have in case you
69:27 - haven't watched the part one go try that
69:29 - or in case you are jumping directly on
69:31 - this portion please don't it's not a
69:33 - good idea so we have seen that how we
69:35 - can handle the front and part a little
69:37 - bit more like a file structure we
69:39 - haven't learned how we can make a web
69:40 - request from the front end to our
69:42 - backend because our backend was not
69:43 - ready in this particular section we are
69:46 - going to learn that how we can create
69:47 - models which can talk to a database we
69:50 - have already configured our database we
69:51 - have already injected our environment
69:53 - variables learned that how we can have a
69:55 - database connection file which can which
69:57 - needs to be called in every single API
69:59 - call because edge cases not edge cases
70:02 - Edge functions which actually run so
70:05 - they don't have a constant database
70:06 - Connection in this we'll start by
70:09 - creating a simple model and that model
70:11 - will be a structure of our database and
70:14 - there's a lot of ways how you can design
70:15 - it I'll walk you through with some of
70:17 - the quirky things and interesting things
70:18 - about it you'll definitely enjoy that
70:20 - part and then we'll directly jump into
70:22 - the sign up portion so that we can write
70:25 - a simple
70:26 - apis which can or basically controllers
70:29 - for API which can do the logical part
70:31 - take all the data and send it to the
70:33 - database that's our first goal then
70:35 - we'll figure out what to do next up so
70:37 - that is how we'll be going now let me
70:39 - take you on my screen first so this is
70:41 - our screen that's where we have been
70:42 - enjoying so notice here the models is
70:45 - right now totally empty we have almost
70:47 - nothing in our model so it's a good idea
70:49 - good time to create a new file into it
70:51 - and feel free to call it whatever you
70:53 - like and why is it not listening to me
70:57 - why is it not listening to me so just
71:00 - give me a second probably my keyboard is
71:03 - not working yeah should be working now
71:06 - yep and we'll be calling it as user
71:09 - model M should be capital or not I'll
71:12 - keep it capital user model dot again
71:14 - this would be a simple JS you can make
71:18 - it TS as well I'll make it JS
71:20 - usermodel.js because there is nothing
71:22 - too much sensitive going into this one
71:24 - first question who can talk to my
71:26 - database obviously Mongoose so go ahead
71:29 - import Mongoose that will be coming up
71:31 - from Mongoose now how do we create it
71:34 - simple const let's call this one as user
71:36 - schema and that is going to be simply
71:39 - new Mongoose dot schema
71:42 - and there we go basic just like this now
71:46 - before we go ahead and work about rest
71:48 - of the things let me tell you something
71:49 - really interesting now there is a
71:51 - special way of how you export your
71:53 - models from a mongoose in case of nexjs
71:56 - because there are chances that the model
71:58 - might already be created in the database
72:00 - so in most of the cases in the express
72:03 - and all that the model file doesn't run
72:05 - again and again automatically but here
72:07 - we need to actually import this file
72:09 - quite a lot of time and we need to take
72:10 - care of the cases if it is already
72:12 - created then use that if it is not
72:14 - created just create that so there's a
72:16 - lot of ways how we do that one of the
72:18 - very common user built syntax is just go
72:20 - ahead and take a user and simply go
72:21 - ahead and say Mongoose dot models and
72:25 - then create this users because remember
72:27 - in the mongodb even if you call this in
72:30 - the Mongoose or the model file as user
72:33 - with a capital u everything is
72:34 - lowercased and is pluralized that's a
72:37 - mongodb thing it does it for everything
72:39 - so that is the first thing if it is
72:41 - already created use that otherwise we
72:43 - are going to create our own model so
72:44 - we're going to go ahead and say Mongoose
72:47 - a DOT model demo
72:50 - model and then we will be creating this
72:53 - is going to be a simple model which
72:55 - takes two parameter what do you want to
72:57 - call it in the database and how does it
72:59 - look now usually you'll see that
73:01 - something look like this and again
73:02 - that's totally fine and you can go ahead
73:04 - and call it like this as well there is
73:06 - absolutely no problem in that case why
73:09 - is it giving it like that there we go
73:11 - why is it bothering me this much
73:14 - there we go
73:16 - or if you wish you can go ahead and call
73:18 - it as lowercase users that is also
73:20 - totally fine anyhow end of the day it is
73:22 - going to get created as users lowercase
73:25 - and once you are done with this then you
73:27 - can go ahead and Export it as a default
73:29 - so export default user that's what I
73:31 - prefer that whenever I'm taking this
73:33 - user I always call it as uppercase
73:35 - because it has a lot of superpower it's
73:36 - not any ordinary variable it's coming
73:38 - from from Mongoose so dot save method
73:40 - find one there's a lot of features that
73:42 - comes up as a built-in now apart from
73:45 - this I'll not talk too much about the
73:47 - Mongoose superpower because Mongoose
73:49 - definitely itself deserves a course but
73:51 - I'll just go with the basics for example
73:53 - I'll just go ahead and say hey I'll be
73:55 - having a username and that will be of
73:58 - type string and we're going to go ahead
74:00 - and required it true and provide a
74:03 - customized message of hey and we'll also
74:05 - keep this you username as unique so that
74:08 - will be nice and easy we probably can
74:10 - have a trim but I'm not interested in
74:12 - that already too much and then we'll be
74:15 - having email will be having a type of
74:17 - string and required true please provide
74:20 - an email and let's keep emails as unique
74:23 - as well that is it this much is already
74:25 - more than enough all right now next up
74:28 - we'll be having the password which will
74:29 - be a type of string and require true
74:32 - please provide a password that's it
74:34 - don't want to do any further into the
74:36 - password category now apart from this
74:38 - you'll see that in these kinds of model
74:40 - there are common fields which are there
74:42 - for example uh usually I go with the
74:44 - role because I bring my roles from an
74:46 - enum file constant file from where I can
74:48 - bring the enums like is admin manager
74:51 - student teacher there's a lot of roles
74:52 - with that in this case I'll drill it
74:54 - little bit down so that it doesn't
74:56 - create that much of confusion all the
74:58 - introduction grade application I usually
74:59 - keep it as a role but I'm going to go
75:01 - ahead and use this one here first of all
75:04 - is verified so is the user verified by
75:06 - default no it is not type Boolean of
75:08 - course default is false so my user is by
75:11 - default not verified I will send him an
75:13 - email in which all he'll click a link
75:15 - and once you click the link then only
75:17 - he'll get verified similarly as I was
75:20 - talking about the role I'll just go
75:22 - ahead and call this one as is admin and
75:24 - is admin will be like type Boolean
75:27 - default will be false and probably
75:30 - that's it
75:31 - now again as I mentioned I usually don't
75:33 - go with the is admin I usually go with
75:35 - the role because that's a better
75:36 - approach but again will not go about the
75:39 - better approach or data modeling in this
75:40 - case that's uh very basic now comes up
75:43 - the interesting part now what a lot of
75:46 - people does is they try to keep their
75:48 - tokens as a separate model itself I
75:50 - don't do that usually I try to keep them
75:52 - all separate because I think somehow
75:54 - that they are part of user itself and
75:56 - mongodb is a document database so I
75:58 - think this is a better approach again I
76:00 - could be wrong you could be right so
76:01 - there's a lot of debate about it so the
76:03 - way how I do it is I keep a couple of
76:05 - string like forgot password token and
76:08 - this forgot password token is usually a
76:10 - type of string and I keep on updating
76:12 - the values now along with the forgot
76:14 - password I keep the forgot password
76:16 - token expiry so forgot
76:20 - password pass
76:23 - word
76:24 - token expire
76:26 - nah not happy with expire I go with
76:29 - expiry expiry which is a type of date
76:32 - similar to that I do have a verify token
76:35 - as well
76:36 - very no no suggestions please give me a
76:40 - suggestion there verify token that is
76:43 - also a type of string and similar to
76:45 - that verify token expiry now how does
76:47 - this token works there's a lot of
76:49 - mechanics into that and I would love to
76:50 - share this but this is the whole our
76:53 - model is now complete now let me take
76:55 - you back on our excali draw and show you
76:58 - that how actually the token part and
77:00 - everything works so for this we need to
77:03 - understand what are the three parts of
77:05 - our application so the three part of our
77:07 - application uh the first one being
77:10 - the first one is the user wherever or it
77:14 - would be better to write browser or I'll
77:16 - just write user slash browser
77:19 - so whatever makes sense to you so this
77:21 - is our user and browser so this is first
77:23 - part of it the second part of the
77:26 - application is our controllers or you
77:29 - can say our apis uh I think API would be
77:32 - a greater name but obviously I would
77:34 - love to call it as controller but I
77:35 - think in this case API is also fine and
77:38 - the third part is actually our database
77:41 - where all of these things are stored so
77:43 - if I go back all this data about is
77:45 - admin forgot password token and all
77:47 - these things are actually kept up there
77:49 - now how does this forgot password token
77:51 - or verify token works that is also a
77:53 - very interesting use case so I'll just
77:55 - walk you through so
77:56 - this thing known as your verify token
78:01 - this is nothing it's just a field which
78:03 - holds some string values now obviously
78:05 - these string values are encrypted that's
78:07 - why we brought in the B crypt.js and we
78:10 - love to store the complex things the way
78:12 - how it works is in your API call if
78:15 - somebody makes a call to your let's just
78:17 - say user slash verify so you simply
78:20 - generate this verify token and this
78:22 - verify token is going to be long
78:24 - gibberish string something like this
78:26 - this is how it usually goes so this is
78:28 - let's just say a long gibberish thing
78:30 - now this is generated by API now there
78:33 - are two portions of it now this only
78:36 - alone is not generated
78:38 - this thing is actually one portion of it
78:40 - is updated into the user's database now
78:43 - our this model has something inside us
78:46 - right now it is empty but as soon as
78:48 - somebody hits that API call that long
78:51 - generated string is actually copied and
78:53 - is saved into database of that users
78:56 - now one portion of this is actually sent
78:59 - to the user as well all right now API
79:02 - doesn't keep anything it's just a
79:03 - business logic it doesn't have the
79:05 - capability to save anything it just
79:07 - simply goes ahead and sent one copy to
79:09 - the database one copy to the user
79:12 - now what next now what next is once
79:15 - somebody actually verifies that this
79:17 - token actually comes back to you now how
79:20 - it comes back that's we'll study in this
79:22 - lecture but this might come up into a
79:24 - URL you can extract it from a URL we
79:27 - know how to do it it might come up into
79:29 - a request body as well that's okay we
79:31 - can also handle that part but the whole
79:32 - idea is this token actually comes back
79:34 - to you now once this token comes back to
79:36 - you in the database we have to find that
79:39 - where this token is just like we can
79:41 - find a user based on email just like we
79:43 - can find a user based on ID we can also
79:45 - find the user based on this token yep we
79:47 - can do that now once that particular
79:49 - user is actually being found and let's
79:51 - just say you have found this and there
79:53 - is this user now this user information
79:56 - comes to your API based on this token
79:59 - now once this is actually being done you
80:01 - actually invoke the API Logics and
80:04 - simply go ahead and certain Fields into
80:06 - it for example we are talking about
80:07 - verify you go ahead and update verify as
80:10 - true so now this is a verified user so
80:13 - this is how the basic logic of how
80:15 - verification works somebody clicked on
80:17 - it you know the request is coming up
80:18 - from that token now apart from this you
80:20 - might have noticed that I also keep the
80:22 - verify expiry as well because I want to
80:24 - give the user only a certain time
80:26 - duration when this verification can
80:28 - happen I don't want it the verification
80:30 - that I send an email today it happens 30
80:32 - days after that so I'll definitely don't
80:34 - want that that's why I keep that
80:35 - expiration I always bring back the user
80:38 - only basis on that the token should
80:40 - match and the time should be certain
80:42 - limit in under certain limits I'll walk
80:44 - you through with that as well so this is
80:46 - the base case of it now with a similar
80:48 - way
80:49 - your forgot password token also work
80:51 - I'll walk you through with that scenario
80:52 - as well because I can understand this
80:54 - can be complex so I'll again retrade
80:56 - that part it will be a revision as well
80:58 - so I'll just go ahead and remove this
81:00 - this this and we'll just get back to
81:03 - this one
81:04 - all right so what happens in this forgot
81:07 - password token we can now remove this
81:09 - part okay so we have a forgot password
81:11 - token again what is the forgot password
81:13 - token nothing it just encrypted a long
81:16 - string a hashed value that's it so this
81:19 - hash value looks something like this
81:20 - this can be something like this with few
81:22 - numbers really long strings something
81:24 - like that and what's the job of the API
81:26 - is to send the copies simply it takes
81:30 - one copy send it to the database I'm
81:32 - going out there we go and this one copy
81:35 - is sent to the user browser it doesn't
81:37 - keep anything for itself it just removes
81:39 - it API cannot hold it so now user had
81:42 - this has this token of forgot password
81:44 - and the DB also has this token or the
81:47 - forgot password again this is sent to
81:49 - the user or the browser or you can say
81:51 - to the email that is also a good word to
81:53 - have here so now this is being sent to
81:56 - the email now what next obviously we
81:59 - have to search it so now this token will
82:01 - come to you from the user side so user
82:03 - will hit a route maybe forgot password
82:05 - whatever the route is it will give you
82:08 - that a particular long token again I
82:11 - repeat this token might come up into the
82:13 - URL in the request body it doesn't
82:14 - really matter in this case we are
82:16 - talking about this forgot password so
82:18 - obviously with forgot password I need
82:20 - this token and I also need what is the
82:22 - password that you want to update so that
82:24 - I can add the us into my field with my
82:26 - logic so that is there the logic is same
82:28 - for verify and the forgot password now
82:30 - what I have to do next I have to take
82:32 - this long string and I have to search it
82:34 - here in the database just like I can
82:36 - search for email I can also search with
82:38 - the token and this will return you an
82:40 - user entire user who is having this
82:43 - token when this user actually comes to
82:45 - the API the API is perfectly capable
82:48 - after matching the token and the expiry
82:50 - that hey the token is valid the expiry
82:52 - is also valid then it simply goes and
82:54 - update one field so I can simply go
82:56 - ahead and say hey update user dot
82:58 - password that gets a new value whatever
83:00 - the new encrypted value user has given
83:02 - you a value you encrypt that and you
83:03 - update that so you simply go ahead and
83:05 - simply say updated password password if
83:09 - I can write that updated password so
83:11 - that that is all you have to do that's
83:12 - it you have updated your password so
83:14 - this is behind the scene logic of how
83:17 - the verify password Works how the forgot
83:19 - password work or any other token based
83:21 - mechanism that you are used to this is
83:23 - how all of them works
83:25 - quite a lot of theory isn't it
83:27 - uh yeah but I hope that you are enjoying
83:30 - this I hope that I'm able to explain
83:32 - this so much Basics to you and you are
83:34 - enjoying that all right so now that my
83:37 - models are all done now it's time to
83:39 - open another file my models are there my
83:42 - database connection is there notice here
83:44 - the database connection I can just call
83:45 - this connect and connect to any time
83:47 - with the database now what's interesting
83:49 - is go into the app and inside the API we
83:52 - have users and inside that we have the
83:54 - sign up and we have this route now this
83:57 - route is actually empty right now in
83:59 - this case but you might be wondering can
84:01 - I create only just one file in the sign
84:03 - up yep there is no other file you can
84:05 - create and this might be bringing to
84:08 - your question another question so I'll
84:10 - bring this up a lot of notes Here
84:12 - that I also handle a lot of things so
84:15 - for example if it is slash API slash
84:17 - users slash
84:19 - sign up if this is the case then I have
84:23 - a lot of things that I handle here for
84:24 - example uh on the same route how do I
84:27 - handle the get request or the post
84:29 - request or the put request or the delete
84:32 - request so how do I handle all of these
84:34 - cases now there is a nice way of how you
84:37 - handle this the standardization of the
84:40 - apis I'll not talk about too much of the
84:42 - standardization of API that again
84:43 - requires a separate course in itself but
84:46 - the ideal is that you handle all these
84:48 - things via the request method a lot of
84:50 - time when we actually teach the tutorial
84:51 - it's okay then we go ahead and simply
84:54 - ask them to Simply create routes with a
84:57 - different controllers like for example
84:59 - create user or maybe something like we
85:03 - asked to create update user but the
85:06 - whole idea is this is not a
85:07 - standardization approach it's okay for
85:09 - tutorial part there is no harm in that
85:11 - but if I go ahead and say simply user
85:13 - then if it is a get request I should be
85:16 - getting a user if it is a post request I
85:18 - should be adding a user if it is a
85:19 - request I should be updating a user
85:21 - delete request then I should be deleting
85:23 - a user so this is a standardized
85:25 - approach and this exactly is being
85:27 - followed in the next JS as well a lot of
85:29 - behind the scene details so all we got
85:31 - to do is simply write the functions for
85:34 - the Post method get method and all of
85:36 - that now the syntax is a little bit you
85:39 - have to first get it and understand it
85:41 - once you get one syntax all of them are
85:43 - exactly same so first we're going to go
85:45 - ahead and simply bring the connect
85:47 - that's the most important thing so
85:49 - connect
85:50 - and the first time you'll be seeing the
85:52 - default import statement so yeah this is
85:54 - the first time you'll be seeing it
85:56 - from if I can write that
85:59 - from and this will be coming up notice
86:02 - here you can write at the rate yep
86:03 - that's your root directory and then you
86:06 - can simply go ahead and say Hey I want
86:07 - to go where should I go
86:09 - what's the name dbconfig okay DB config
86:12 - and inside the dbconfig there is this DB
86:16 - config file okay this is dbconfig.js I
86:19 - guess let me just check this uh
86:22 - dbconfig.ts although you don't need to
86:25 - import the TS but sometimes I have seen
86:27 - that there are some issues in bug
86:28 - because I didn't mention a DOT TS a very
86:32 - rare very rare sometimes it even gives
86:34 - you problems but it has happened to me
86:36 - couple of times okay the first thing
86:38 - that you have to do is simply go ahead
86:39 - and connect that's it that is it don't
86:42 - need to do anything no then catch it
86:46 - just needs to connect but we need couple
86:47 - of more things as well
86:49 - the first obvious thing is user we need
86:52 - model so that we can add things into the
86:54 - database and that will be coming up
86:56 - import user and that will be coming up
86:58 - from at the rate app models and users
87:01 - make sure you double check this because
87:03 - I had noticed this this actually creates
87:05 - a lot of problem just now you have seen
87:06 - because our model is not coming up from
87:09 - App model user our model is sitting
87:11 - somewhere else and that's totally
87:12 - allowed you can keep it here as well
87:14 - there's no problem in the app models and
87:16 - user that is also one way but we're
87:18 - keeping it all totally outside so in the
87:20 - models and then we are getting in notice
87:23 - here this is still going to give you a
87:25 - problem the reason for that is you need
87:28 - to give the file name so inside the
87:29 - model we are calling it as user model so
87:32 - make sure you are cautious about that
87:35 - user model that should be happy
87:37 - okay now the next thing is you need to
87:39 - grab request and response so in case you
87:42 - have worked with Express or anything of
87:43 - a backend you notice everything actually
87:45 - is dependent on request and the response
87:48 - you need to take something send
87:50 - something in the next JS you actually
87:52 - work with it a little bit different we
87:54 - go ahead and First grab next request
87:58 - yeah come on so just me yeah there we go
88:01 - next request and we also get next
88:03 - response so these are the two things
88:06 - which actually helps you to do all of
88:08 - this they all comes from the next server
88:09 - just like this we'll be encrypting some
88:11 - of the passwords so let's go ahead and
88:13 - import
88:15 - decrypt Js
88:18 - and that's coming up from B crypt.js and
88:21 - what else I guess that's it uh this one
88:24 - we don't need JWT because we are just
88:26 - talking about sign up so that's not
88:27 - required uh it's declared but never used
88:30 - we'll use that no problem there all
88:32 - right so now this connection and
88:33 - everything is done so I'll just keep it
88:35 - there outside so all the connection
88:37 - everything is done now the way how you
88:39 - define a syntax of handling a post
88:42 - request because data is coming to us so
88:44 - we'll first say export and then we'll be
88:47 - using a sync because obviously talking
88:49 - to database database is another
88:51 - continent it takes time and then simply
88:54 - write the function and then what request
88:56 - you want to handle is it a post request
88:58 - is it a get request is it a delete
89:00 - request so whatever that is you just
89:01 - handle that in my case post makes sense
89:04 - so I'll just use that then you simply go
89:06 - ahead and say that hey I will be
89:07 - handling a request you can handle both
89:09 - request and response but there is no
89:11 - need of handling everything here in the
89:13 - first parameter you can just say I'll
89:15 - handle the request and then say hey I'll
89:17 - get the next request just like this and
89:19 - there we go that's it that is how you
89:22 - handle and if you want more things to be
89:24 - handled just create another function
89:26 - which is post which is get you get the
89:29 - idea you get the idea now in here the
89:31 - simplest part is to handle the try catch
89:34 - via the try catch so I'll just go ahead
89:36 - and have the try catch and the error is
89:38 - going to be of type error type any by
89:43 - the way
89:44 - not ideal case of handling everything
89:46 - with any now how we're going to return a
89:48 - response that's also super easy you
89:50 - simply go ahead and say next response
89:52 - and we will not be handling the errors
89:55 - like this although you can there is no
89:57 - hard and fast rule but I prefer to send
89:59 - a Json response with the error message
90:01 - and status code I think that's that's a
90:04 - better approach so that's the first part
90:06 - of it how we'll be handling
90:07 - now the next question is how we're going
90:09 - to grab data from the body in case you
90:13 - have worked with Express or something
90:14 - request.body was our friend which
90:17 - actually does that it is almost similar
90:18 - to that but in here you actually have to
90:20 - await a little bit so await a request
90:23 - it's not body.json don't go with these
90:26 - suggestions it's Json just like this and
90:29 - we can hold this into a variable let's
90:31 - call this one as request body just like
90:33 - this and lot of example you'll see
90:35 - calling it as request.body I also picked
90:37 - it up from the dark so yeah all right
90:40 - notice here it's request.json just like
90:42 - how it works now further down this you
90:45 - can actually extract all the variables
90:47 - that are coming in so we'll be doing a
90:48 - little bit of the destructuring so from
90:51 - request
90:52 - body we need to extract some stuff and
90:55 - what we'll be extracting is const let's
90:58 - grab some stuff from request.body I know
91:01 - that from front-end side I'll be getting
91:03 - a user name I'll also get an email and I
91:06 - also get a password because this is the
91:08 - first time I'm registering a user now
91:11 - again it makes sense that you first go
91:13 - ahead and do all the kinds of check if
91:14 - email is not there if username is not
91:16 - there if password is not there then go
91:18 - ahead and throw this response although
91:20 - we have handled a lot of these error
91:22 - cases required and all of that in the
91:24 - Mongoose itself so in the error response
91:26 - they'll be getting a good message and
91:28 - all thanks to the custom messages that
91:30 - we have written here so it is handled a
91:32 - lot but not entirely so I highly
91:34 - recommend you do on your own validation
91:36 - I'll just move on to the basic
91:38 - validation but before that I'll also do
91:40 - a console log of uh entire request body
91:44 - so that we can see that what is
91:45 - happening not ideal for the production
91:48 - grade so remove these console logs but
91:50 - I'll just keep it to check things now
91:53 - I'll go ahead and first check
91:55 - check if user already exists very simple
91:57 - basic check all I have to do is use the
92:00 - superpower of this user remember this
92:02 - user is coming up from the Mongoose so
92:04 - this has a lot of superpower and can
92:06 - find a lot of things for us so for
92:07 - example it will say find one and what do
92:10 - I want to find I want to find an email
92:12 - so I'll just go ahead and say email and
92:15 - that's it I want to find most important
92:18 - thing is this will return you a query if
92:20 - you don't put up in a weight so this is
92:22 - a common mistake that a lot of people
92:23 - are doing these days posting them on
92:25 - every single platform so put up in a
92:27 - weight because it's a database call
92:29 - and we'll just say simply user now if
92:32 - this returns me something that means
92:33 - user already exists so all I have to do
92:35 - is if user is there then simply go ahead
92:39 - and suggestions please no suggestions
92:43 - we're going to go ahead and simply say
92:45 - return
92:46 - next
92:48 - response come on now suggestion there we
92:51 - go Json that user already exists so this
92:54 - is nice and easy so there we go again
92:57 - you can make more checks onto this one
92:59 - I'll not do more I'll just go ahead and
93:01 - hash the password now
93:03 - hash password
93:05 - again this is what the basics will be
93:08 - doing so we'll be first creating a salt
93:10 - which is the basic and after the salt we
93:12 - need to create a hashed password just
93:13 - like this uh feel free to use any number
93:15 - of rounds that you want to have uh so
93:18 - the B Crypt JS library is responsible
93:20 - for creating the salt and if you'll read
93:22 - the documentation you'll find it exactly
93:23 - same the Gen salt will generate a salt
93:26 - with the 10 rounds and again different
93:29 - Frameworks and libraries use different
93:31 - rounds for example Ruby on Rails use 12
93:33 - rounds nexius and react not react
93:36 - Express and Mongoose mostly use 10 so
93:39 - again it's totally up to you a hashed
93:41 - password we are hashing password we have
93:43 - to provide two parameter to bcrip.j Hash
93:46 - the first is the password which we are
93:47 - grabbing from the request body and then
93:51 - the salt value so absolutely simple
93:52 - there is nothing too much Panic about it
93:54 - now we want to save a user in the
93:56 - database so we have to create a user
93:58 - accordingly
94:00 - so all we're going to do is create a new
94:02 - user just like this this will have a
94:04 - username this will have an email and
94:07 - this will have a password but not the
94:08 - password that we're getting from request
94:10 - body but the password that we have
94:11 - encrypted the hashed password so we'll
94:13 - be going like this so we'll be saying
94:15 - hey let's just go ahead and go like that
94:18 - all right now we'll be storing this into
94:20 - a variable first so let's just call this
94:23 - one as
94:24 - const new user because it's actually our
94:28 - user to be saved new user whatever you
94:30 - like now this is nice and easy now all
94:33 - we have to do is save this to the
94:35 - database you can do it in one line as
94:36 - well but I prefer to have more uh
94:39 - explainable approach of this thing so
94:41 - I'll just go ahead and say await new
94:43 - user dot save that's it it's going to
94:46 - save let's store the response into a
94:48 - variable maybe you want to save it have
94:50 - a look on it so I'll just say save the
94:52 - user again this is a little bit of a
94:55 - verbose approach but you can do this All
94:57 - by shortcut as well but it's a tutorial
94:59 - I need to explain the things so I'm just
95:01 - keeping it a little bit more verbose now
95:03 - after this maybe you want to do a
95:05 - console log of the saved user that's
95:07 - totally up to you I just keep it so that
95:09 - I can show you more things and that's it
95:12 - now apart from this all we have to do is
95:14 - simply return a response maybe in the
95:17 - response I'll just go ahead and hit and
95:18 - enter here and one more
95:22 - okay
95:24 - okay let's just go ahead command Z
95:26 - because I think that is messing it up a
95:28 - little bit yep it's messing it up I'll
95:31 - just remove it like this and there we go
95:33 - so I'll say message is created user
95:36 - successfully then we'll get no not like
95:38 - that
95:39 - success
95:41 - is true and maybe I want to throw in the
95:44 - saved user totally up to you how you
95:46 - want to deal it with this I just want to
95:48 - go like this
95:49 - all right so this is my Approach of
95:52 - saving the user and as you saw that it's
95:54 - not really that difficult now we
95:56 - understand how this is going to be all
95:57 - taken here in the database and
95:59 - absolutely but one thing that is still
96:01 - missing is we are not able to send any
96:04 - data to the page we have to actually
96:06 - work on this page as well because it's
96:08 - right now not going to be doing anything
96:09 - at all so let's go ahead and take care
96:12 - of this so right now this is the basic
96:14 - page that we designed a moment ago now a
96:16 - couple of variables that needs to come
96:18 - once the user will be signed up I need
96:20 - to push it to the login page for this I
96:23 - will be using a router so notice here
96:26 - this use router now it will come in
96:27 - handy so I'll say const router use
96:31 - router I'll use that in a minute I've
96:33 - already created my state so that I can
96:35 - actually go ahead and use it but I'll be
96:38 - creating couple of more states which
96:39 - will be helpful okay but again you can
96:41 - optimize this a lot more and a whole lot
96:44 - of things can go on so I'll just go
96:46 - ahead and create one more which will be
96:48 - button
96:49 - disabled so there we go I'll keep it by
96:53 - default as false button will not be
96:55 - disabled I'll not do much here I'll just
96:57 - change the name of the button on our
96:58 - front end so if you remember on the
97:01 - localhost we have the sign up
97:04 - uh my hopefully my server is not running
97:08 - I guess
97:09 - yeah it's not running I just push the
97:10 - code on the git that's it so by default
97:13 - it will be saying just sign up so I'll
97:14 - be changing the text only based on
97:15 - whether the button is disabled or not so
97:17 - I'll not do too much but you can go all
97:19 - fancy with it so that's all the basics
97:21 - we'll be doing all right now coming up
97:23 - onto the part that how the things are
97:26 - going to work now this button state is
97:28 - all just a fun that we are doing to
97:30 - understand a little bit more about the
97:32 - react use States and all of that now
97:34 - this button will be changed on like
97:36 - usually what how you want to utilize
97:38 - this button disabled so this will add
97:40 - some classes on the button so nobody is
97:42 - able to press it but as soon as the
97:44 - button disabled is gone that means
97:46 - somebody can press it one ideal case is
97:48 - when there is some values in our field
97:50 - so one case one a hook that you can use
97:53 - for this is use effect
97:55 - so what is going to happen in the use
97:57 - effect if there is a user uh I'll just
98:01 - first enter end it so there we go it is
98:04 - dependent on this user so this is a
98:06 - dependency array that how should I how
98:07 - how often should I run this use effect
98:09 - and I'm able to do all of this because I
98:12 - have actually enabled use client and I'm
98:13 - doing this just to show you that I can
98:15 - do it so this is all dependent on this
98:17 - user as soon as something change in that
98:19 - that will run this use effect or
98:21 - whatever the code you write inside this
98:22 - use effect callback so I'll just go
98:25 - ahead and write the very basic of it so
98:27 - I'll just go ahead and say if user dot
98:30 - email so there are a lot of fields into
98:31 - it email email and I'll just check the
98:36 - length of it
98:37 - if the length is greater than 0 and wow
98:41 - suggestions I love that
98:43 - then I'll check the user.password length
98:45 - is greater than 0 and the username
98:47 - length is greater than zero then I'll
98:49 - set the button as disabled as false
98:52 - because if the length is greater than 0
98:55 - the set button should be default to
98:57 - false let me just check that quickly all
99:00 - right
99:01 - and in other cases it should be enabled
99:05 - yeah because it is set button disabled
99:07 - if it is true the button is disabled ah
99:09 - get it sometimes you need to evaluate
99:11 - yourself as well all right so set button
99:15 - disable to true in other cases all right
99:17 - so there we go we can run this and again
99:19 - this use effect is not available so I
99:21 - need to go to react and say hey we will
99:23 - be bringing use effect
99:25 - and there we go now we can do it and
99:27 - based on this we can check out some fun
99:29 - stuff here as well so I'll just go ahead
99:31 - and change up the text here sign up here
99:35 - and I'll just cut this out and inject my
99:39 - variables and based on
99:42 - button disabled
99:44 - I'll check that if there is a button
99:46 - disabled then I'm gonna go ahead and do
99:50 - something otherwise I'll do something
99:53 - else so if disable button is
99:57 - true that means button is disabled so
100:00 - I'll just say no sign up
100:03 - and if the button disabled is false
100:07 - that means button is enabled that means
100:10 - this time I can do sign up
100:12 - so there we go just really basic so we
100:14 - can go ahead and save this let's try to
100:16 - run that server it's been a while so npm
100:20 - oops npm run Dev
100:24 - and let's see how many crashes we are
100:26 - going to see always expecting the
100:29 - crashes
100:30 - all right looks good decent
100:33 - all right so yeah take some time
100:37 - okay so we'll do a sign up and there we
100:40 - go so it says no sign up all right
100:41 - that's good because right now there is
100:44 - no value so if I go ahead and say a oh
100:46 - man the reason why you are not able to
100:48 - see it is because there's a text color
100:50 - so
100:51 - in all of this come on I have to do this
100:54 - for all of them yeah
100:57 - okay no no other option we'll just go
101:00 - ahead and say text Dash black there we
101:03 - go we have to do this for everyone
101:05 - text Dash black
101:08 - one more one more not that much of a big
101:11 - problem text Dash black
101:15 - there we go so as soon as I save this
101:17 - there we go now I can see a and no sign
101:20 - up still then I go ahead and a and then
101:22 - I go ahead and a and it changes to sign
101:24 - up now I can sign up definitely I'm not
101:27 - checking much of these fields neither on
101:29 - the backhand side or front-end side that
101:30 - what should be the minimum length of
101:32 - password we can do a lot of validation
101:34 - but this video is little bit beyond the
101:36 - validations all right so this is the
101:38 - basic that we have gone through with it
101:40 - now let's learn that how we can actually
101:42 - utilize the sign up method because we
101:45 - haven't talked about it we have this
101:46 - xios giving us red squiggly line but we
101:49 - haven't worked on that all right the
101:51 - basic and the most easiest way is first
101:53 - have the try catch handle the catch part
101:57 - and that's the basic sometimes people
101:59 - actually get this uh on loading as well
102:01 - maybe you want to show some loading
102:03 - let's go ahead and do this loading as
102:05 - well let's go ahead and have a loading
102:06 - text as well so const and we'll have a
102:09 - loading
102:10 - set loading by default it's false So
102:13 - based on this we can actually render
102:14 - some variable as well uh maybe in place
102:17 - of sign up we'll just go ahead and cut
102:21 - this out inject a variable again and
102:24 - we'll just check for loading if loading
102:26 - is true we'll if loading is true we'll
102:28 - do something otherwise we'll do
102:30 - something so we can just go ahead and
102:32 - say sign up
102:33 - and
102:35 - in this we can say
102:37 - processing you can have better Spinners
102:39 - and loaders but my goal is not to have
102:41 - you parked down with 1000 different
102:43 - libraries but to show you more about
102:45 - next year's we can see this is
102:47 - processing right now because loading is
102:49 - true somehow
102:50 - uh loading
102:53 - all right why this is loading
102:56 - okay let's check if loading is true oh
102:59 - my bad if loading is true this should be
103:01 - processing
103:03 - processing
103:05 - and if it is not true that means loading
103:08 - is not happening that means user can
103:09 - sign up all right so at least this also
103:12 - gives us a check that you can flip the
103:13 - switch all right good good enough good
103:15 - enough
103:16 - so let's go back here in the try catch
103:19 - and let's also add a finally here you
103:21 - rarely see the implementation of finally
103:23 - but in this case finally makes sense
103:25 - because no matter what happens loading
103:27 - needs to go away this is the common
103:29 - syntax
103:30 - now as soon as you go first let's handle
103:32 - the catch part because it's easy and in
103:35 - case you remember I actually asked you
103:37 - to do something we'll actually handle
103:39 - that part as well so if you remember I
103:41 - asked you to have this react hot toast
103:43 - this is your assignment you have to take
103:45 - care of how this Library actually works
103:47 - so the way how it works is you simply go
103:50 - ahead and say toast and then error and
103:53 - you can just give it error message
103:54 - that's how the basically it works now in
103:57 - here it says hey I know I have no
103:59 - guarantee that error will have a message
104:00 - so I'll just go ahead and write in any
104:02 - here so that it gets away the errors but
104:04 - also I love to get a console log
104:07 - because I know I have I have not
104:09 - perfectly implemented react hot toast
104:11 - it's assignment for you but just for the
104:13 - sake of so in this case we'll just go
104:15 - ahead and say
104:17 - sign up
104:18 - failed and we'll also get the error Dot
104:23 - message in the logs now this log message
104:27 - will be available to you on the user
104:29 - side in the browser because it's a use
104:31 - client all the console log messages in
104:33 - the API will be available in the bottom
104:36 - section the terminal because it's on the
104:38 - server side that's one difference as
104:40 - well now let's come back on to the
104:42 - tripod what do you want to try first and
104:45 - foremost what I want to try is set the
104:47 - loading that's the basic set loading as
104:49 - true all right now I want to make a
104:52 - request so I'll just use xeos and I want
104:55 - to make a post request from the xeos now
104:58 - make sure you provide this URL very
105:00 - carefully you don't need to provide the
105:02 - entire URL the next JS is already
105:04 - configured for hitting your own route so
105:06 - slash API slash users the folder you
105:10 - have defined let's check it one more
105:11 - time API slash users so there's an S and
105:16 - then you can simply go ahead and hit a
105:17 - sign up route so I'll just go ahead and
105:19 - hit the sign up now I'm also taking
105:21 - along with me all the data which is user
105:23 - which is stored in here so I'm just
105:25 - taking all of this and obviously once
105:28 - this is being done this will take some
105:29 - time so I'll just go ahead and await for
105:31 - this one and I'll hold the response in
105:34 - some variables so I'll just go ahead and
105:35 - say response
105:37 - the punch
105:40 - response there we go
105:42 - all right so this looks okay now I also
105:45 - want to see that what kind of response
105:47 - is coming up so it would be properly
105:49 - better for me if I go ahead and say sign
105:52 - up success and I just go ahead and say
105:55 - response.data I should be getting a
105:57 - response.data.message as well but let's
105:59 - just say I want to get a response data
106:01 - only
106:01 - and then the most important thing is I
106:04 - need to push the user onto a new page
106:06 - and that is exactly why I have this
106:09 - router sitting behind sitting idle doing
106:11 - nothing so I'll just go ahead and say
106:13 - hey router just go ahead and push the
106:15 - user to slash login make sense
106:18 - all right so that is it that is it if we
106:22 - haven't mistake done any typo attempted
106:25 - import error xeost did we made any
106:28 - mistake typos
106:30 - and why is it having an issue because it
106:33 - shouldn't be like that
106:36 - there we go now it should be happy why
106:38 - did it added these extra
106:40 - curly braces no idea about that all
106:44 - right so this should be all let's hit a
106:45 - refresh just for the sake of
106:48 - self-satisfaction I'll just go ahead and
106:50 - add a username with the name of one
106:52 - email will be one at the rate gmail.com
106:55 - and the password will be one two three
106:57 - four five six and let's try a sign up
107:01 - processing working nice we have been
107:03 - redirected that is also nice let's go
107:06 - ahead and check out in the database in
107:08 - the database and oops uh so let me go
107:12 - ahead give me a second I'll just go
107:14 - ahead and sign in again probably just
107:17 - redirected me I need to actually use my
107:20 - emails so I'll just keep you up here
107:22 - till the meantime you can just hang out
107:24 - with me chit chat with me no worries it
107:27 - will just take a seconds I'm just
107:28 - logging it into my detail I don't want
107:30 - to expose that email so that is the only
107:32 - reason I'm just having this ah didn't
107:35 - bother it much so let's go back up here
107:37 - and going back all right so this is
107:39 - where we are and we'll just go into the
107:41 - database
107:43 - and there we go we can browse the
107:46 - collection
107:47 - what did we name this project
107:50 - and there we go this one we named it as
107:54 - test all right we should be naming it
107:56 - better but anyways this is also going to
107:58 - work so we can see we have one one at
108:00 - the rate gmail.com is it visible yep
108:02 - little bit is verified as false is admin
108:04 - is false the rest of the fields since
108:06 - they don't have any value they are not
108:08 - being displayed here let's try with one
108:10 - more user so I want to go with the sign
108:12 - up page let's sign up to as well two
108:15 - this will be two two two at the rate
108:18 - gmail.com at least we need two users one
108:20 - two three four five six nice very secure
108:23 - password
108:24 - sign up this time it's quick because
108:26 - obviously first time it takes time and
108:28 - you get the idea it is always like that
108:30 - let's hit a refresh
108:32 - and it should be getting us two users
108:34 - hopefully there we go so we can see that
108:36 - it is not that much difficult to
108:39 - actually get the data into the database
108:40 - let me go on to code base there we go
108:43 - and we can see that some of the users
108:45 - that we are getting these users are
108:47 - actually on the backend side so we are
108:48 - getting that but not only that we must
108:51 - be getting some of the users in response
108:54 - on the console as well there we go we
108:56 - can see sign up success which gives us
108:57 - an object and this object has a message
108:59 - which is coming up our own message from
109:01 - the backend user created successfully
109:03 - then we said saved user is getting us
109:06 - that's nice and then we have success
109:08 - true they can be in any order so it
109:10 - doesn't really matter so there we go
109:12 - it's working nice and we can also see
109:14 - the difference between the messages that
109:16 - are coming up some are being read on the
109:17 - backend side some are on the front-end
109:19 - side if it is a console log in the use
109:21 - client obviously it will be in the
109:23 - browser otherwise if it is in the API
109:25 - route usually that will be on the back
109:27 - end part of it or the back end side of
109:29 - it so this is how we can actually go
109:31 - ahead and and create a simple uh sign up
109:35 - you can say uh now the next thing that I
109:38 - want to do is uh similarly take down the
109:41 - route for the login as well the login is
109:44 - almost similar you'll find so much of
109:46 - similarity there but I'll still do it in
109:48 - front of you so that you get more idea I
109:51 - will grab all of this because yeah we'll
109:53 - be a little bit uh lazy you can say
109:57 - there's no good word of putting it all
109:59 - right so I'll just paste it so we have
110:01 - all the things make sure use client is
110:03 - the most important thing again this is
110:05 - all happening in the route not in the
110:07 - front end part we are still in the route
110:09 - of login so the first thing we have to
110:11 - do is connect with the database every
110:13 - single time we have to connect I have
110:15 - spent a little bit good amount of time
110:17 - in debugging when all I was doing is
110:20 - missing disconnect
110:21 - all right so connect who said to bring
110:24 - it to you from HTTP 2. I am bringing
110:26 - this from ah why oh my bad we actually
110:30 - brought this in from the wrong place my
110:32 - bad my bad we should be bringing in from
110:34 - the sign up this is where the real stuff
110:37 - is so copy this
110:39 - and paste it there we go
110:43 - okay so now notice here this is the B
110:45 - Crypt this saying uh cannot find a
110:48 - declaration file for module the whole
110:51 - idea this is saying is I don't know the
110:52 - types about it so all you can do is
110:54 - click on this bulb and say install the
110:57 - types about the big crypt.js once you do
110:59 - this it actually install additional
111:01 - types for you and get rid of the error
111:03 - no need to worry about that part in case
111:04 - this red squiggly line is bothering you
111:06 - too much get with that or fix your
111:08 - linting
111:09 - okay uh this is good all right so now we
111:13 - can go ahead and connect
111:14 - there we go connect in with the database
111:16 - again
111:17 - this is my login route so async export a
111:20 - sync function uh post is good request
111:23 - header looks great suggestions love them
111:26 - it increases my speed of explaining and
111:29 - writing the things so much okay all
111:31 - right the basic starts again so there is
111:33 - a try catch the catch is any and in here
111:37 - we can just go ahead and send any
111:38 - response that you want we want to Simply
111:40 - return a next response so return
111:44 - suggestions no suggestions
111:47 - requestresponse dot Json error message
111:49 - status 500 happy with that done with the
111:51 - catch part now coming up on to the
111:54 - tripart most of this is going to be very
111:57 - similar what we have seen But there are
112:00 - some changes not too much first is how
112:03 - we can get data from the request so it's
112:05 - really same request dot Json this will
112:09 - be giving you all the data so how we can
112:11 - grab this we can grab request body from
112:14 - it and we'll be destructuring some
112:16 - values so let's go ahead and restructure
112:18 - email and password from request.body uh
112:21 - basic so there we go why are you
112:24 - bothered again
112:26 - all these structure elements are unused
112:28 - come on let me type first too much
112:30 - aggressive let's go ahead and do a
112:32 - console log
112:34 - and we'll be saying request.body that's
112:36 - fine okay to give us just the detail
112:38 - that whether it is working or not now
112:40 - obviously when we are logging uh into
112:42 - this one so we have to check whether the
112:44 - user exists or not so check if user
112:47 - exists or not otherwise we'll throw him
112:48 - in some error so we'll be saying that
112:50 - hey how can I do it again the user which
112:53 - has all the superpower I can go ahead
112:55 - and say find one and this is bad find
112:58 - one and I want to find it based on the
113:01 - email that's it that is all I want to do
113:03 - if I found it I'll just go ahead and
113:06 - store that into a user variable but
113:08 - since this is a database call make sure
113:10 - that is awaited
113:12 - all right looks nice and if I don't find
113:15 - any user then I'll just request send a
113:18 - response that user doesn't exist so much
113:20 - time is being saved all right but don't
113:23 - rely totally on suggestion they are
113:25 - horribly wrong sometimes
113:27 - all right so what I want to do next this
113:30 - is a login so I've checked the user now
113:32 - I want to check the password all right
113:34 - so I'll just go up here why are you
113:37 - bothered I have used the email just here
113:40 - email does not exist on Typecast it
113:43 - exists I know the email is coming up and
113:47 - I think we need to handle an await yep
113:51 - my bad almost missed that okay sometimes
113:55 - the linting is good okay now we want to
113:58 - check if the password is correct that is
113:59 - super easy we can simply go ahead and
114:02 - validate the password based on the B
114:04 - crypt.js it has a method which says dot
114:06 - compare and we can compare the password
114:09 - which is coming up from the request.body
114:11 - and if you remember this user is coming
114:14 - up from the database this is also
114:16 - bringing the password there is a field
114:17 - in the model user dot password so I
114:21 - don't have to do any magical thing
114:22 - becrypt.js can compare it it knows the
114:25 - stuff how much the default values and
114:27 - everything so it will handle the stuff I
114:28 - don't have to worry about that now if
114:31 - the password is not valid I have to send
114:34 - a response that hey you have an invalid
114:36 - password I won't be doing that now in
114:39 - case that is all done now let's prepare
114:40 - the data because the way how it works is
114:44 - it's actually really really simple if
114:46 - you have never done this kind of a thing
114:47 - it's actually super easy to work on with
114:49 - now once everything is verified that
114:51 - your user exists your password is
114:54 - correct then we actually create a token
114:56 - this token is created by uh simply Json
114:59 - web token we encrypt that obviously it's
115:01 - not just a plain token and we send this
115:04 - token into users cookies not in the user
115:07 - local storage because you can manipulate
115:08 - the token there but we can send the
115:10 - secure cookie to the user and then later
115:12 - on whenever we wish we can access those
115:14 - cookies as well so it helps as a Bridger
115:17 - to verify whenever the user we want to
115:19 - verify it just has the ID of the user
115:21 - but it can have a lot of payload into
115:23 - that you can send a user ID email admin
115:26 - type whatever you wish you can send all
115:28 - this data as a payload to that that's
115:30 - exactly what we'll be doing next
115:32 - all right so moving up here first of all
115:35 - what we're going to do is create this
115:37 - token data so I'll just go ahead and say
115:39 - create token data now how we are going
115:43 - to do this is we'll be first having this
115:46 - ID
115:47 - and one more important thing whenever
115:49 - you look into this notice this uh every
115:52 - single time a user is created it's with
115:54 - underscore ID that's what the ID is
115:56 - there so this is what exactly I'm
115:58 - bringing in although every single detail
116:00 - you can bring in from with this ID again
116:02 - you just have to type in this uh find
116:04 - one that's it based on ID you can find
116:06 - anything but it is no harm that if you
116:09 - want to send extra things like user dot
116:11 - a username or maybe you want to send his
116:14 - email I'll just send this much but you
116:17 - can definitely send a lot more than this
116:19 - now once you have done this then
116:20 - obviously it's time to Simply go ahead
116:22 - and create the token and send this token
116:25 - as well so first and foremost let's this
116:27 - is token data only we haven't created
116:29 - the token now we are going to go ahead
116:30 - and create the token the token this is
116:32 - how it is created all we have to do
116:35 - again notice here there's a problem why
116:37 - because suggestions don't always rely on
116:39 - them you have to actually import this so
116:41 - I have to say import JWT and that's
116:44 - going to come up from Json web token
116:46 - again and could not find the Declaration
116:49 - so I'll just click here where's the bulb
116:51 - here it is and install all the types
116:53 - don't want to see the Reds quickly lines
116:56 - okay so all it does is obviously uh the
117:00 - process.env JWT secret key that's not my
117:03 - key my data is actually stored I have
117:07 - actually created a sample file for you
117:09 - so that I don't have to Peak it again
117:10 - and again where it is somewhere here uh
117:14 - sample.env uh so hitesh subscribe app
117:18 - you should do that
117:20 - my token secret is here so I'll just
117:23 - copy this go back here this is not my
117:26 - this is how it works but still it will
117:29 - give you some of the issues that hey
117:30 - what is this and all of that I'm 100
117:32 - sure that this is coming in so I'll just
117:34 - put an exclamation That hey I know this
117:35 - is coming in so all you have to do is
117:37 - this takes some time to create the token
117:39 - so make sure there is an await here JWT
117:41 - has a method of DOT sign to create
117:43 - signed token it takes the token data
117:46 - this is all the data that we have you
117:47 - can directly inject a object here there
117:49 - is no problem and then
117:51 - process.env.token dot secret how long
117:54 - you want it to stay there expire in one
117:56 - hour I'll not do one hour I'll stay for
117:59 - one day at least totally up to you how
118:01 - you want to do that now all we have to
118:03 - do is token is created but this token is
118:05 - not yet set into the user's cookie the
118:08 - way how we do it first there are a
118:10 - couple of steps involved is we have to
118:12 - create a next response so we'll be just
118:14 - going ahead and say hey we want to have
118:16 - a response we are not sending this
118:17 - response yet we are just creating it and
118:20 - the way how we create it is simply
118:22 - uh next response and it will be dot Json
118:28 - there we go I have an object like this
118:32 - there we go and in here we'll say
118:33 - messages login successful that's a nice
118:36 - message and success true I think that is
118:38 - enough but now the great advantage of
118:41 - this is if you have this response this
118:44 - response right now is a type of next
118:46 - response which can actually go ahead and
118:48 - access your cookies not your the user's
118:51 - cookie so I'll just go ahead and say hey
118:54 - response
118:56 - did I mistyped it yeah response
119:00 - response response
119:03 - come on too many suggestions response
119:06 - dot cookies there is a s here don't go
119:09 - with the suggestion bad suggestion here
119:10 - response dot cookies and you can set the
119:13 - cookie similarly you can also get the
119:15 - cookies so I'll just use a set here and
119:17 - for this I'll be using token token HTTP
119:19 - only yeah that's that's fine I would
119:22 - love to have it on to a separate line I
119:24 - think that will make sense for me at
119:26 - least
119:28 - there we go we don't need to set even
119:30 - the path that is obviously cookies yeah
119:33 - Escape that escape that don't need that
119:34 - all right so this is what we have now we
119:36 - have response dot cookies being set now
119:39 - this response has already sent the
119:41 - cookies and everything now you can
119:42 - return the response back
119:44 - return response now as you'll be
119:47 - returning the response it will be doing
119:48 - all the things it will be sending the
119:50 - message it will be handling the cookies
119:51 - all the things are being done so that is
119:53 - how it is being done
119:54 - ah quite a lot quite a lot but I think
119:57 - that's good now just like we did here uh
120:00 - we need to now go into the login page
120:04 - .tsx yep we haven't actually worked a
120:07 - little bit onto this page so uh now we
120:10 - need to do exactly all the same kind of
120:11 - thing that we did in the past yeah
120:13 - Basics just like that all right so we'll
120:15 - start this time we'll do it a little
120:17 - faster because I think we have studied a
120:19 - lot all right so first thing uh router
120:22 - because we'll be pushing it to some
120:23 - different page so const router use
120:26 - router there we go first thing done we
120:29 - have got the state we'll be getting the
120:31 - button disabled and the loading as well
120:32 - so we can copy this all suggestions I
120:35 - love that don't need to even copy paste
120:37 - that loading there we go
120:39 - okay all right this is all done very
120:41 - quickly on login okay how do we want to
120:44 - handle the login part first what we want
120:46 - to do is exactly same use effect hook we
120:49 - want to actually use that and since this
120:51 - is a use client or the client side or
120:54 - the client component we can actually do
120:55 - this so use effect and I'll just close
120:58 - it first
120:59 - and then the user it's dependent on the
121:01 - user and it's not available so react
121:04 - please give me
121:06 - use effect
121:09 - there we go and in here we'll be using
121:12 - the exact same logic
121:13 - so let's just go ahead and use it like
121:15 - this if user dot email now it's
121:18 - suggesting me nicely there we go and we
121:20 - can also have an else part
121:24 - and we can have set button disabled to
121:27 - true
121:28 - button disabled is true that means
121:31 - button is disabled okay that's correct
121:33 - and sometimes confused in that so yeah
121:37 - re-evaluating yourself is not a bad idea
121:40 - okay although it is giving me the entire
121:43 - bunch of code but I'll prefer to write
121:45 - it
121:46 - so try catch catch error would be any
121:49 - and all I have to do is simple
121:51 - assignment for you but first I'll do a
121:52 - console log so that I also know that
121:54 - what is happening so console.log login
121:56 - failed error.message that's nice but
121:59 - we'll also do the toast so that you can
122:01 - verify the toast messages and stuff
122:03 - right now the toasting is not working I
122:05 - have not properly Incorporated it but
122:08 - hey and we'll also go with the finally
122:10 - how can we forget that finally
122:13 - set loading uh bad there we go
122:16 - es like this
122:19 - and a suggestion no suggestion there we
122:22 - go okay so we have finally this set
122:25 - loading as false that's nice okay Meat
122:27 - part the how we're going to handle this
122:29 - request super simple first start your
122:32 - loading there we go and keep it as true
122:35 - so that we know something is happening
122:36 - then we have to use a weight because it
122:40 - might take some time and then we have
122:42 - xeos
122:44 - axios will make a post request here so
122:47 - super simple where it is going to make a
122:49 - post request slash API slash users slash
122:52 - login that's the route it will also take
122:54 - the users with them so that is nice and
122:57 - easy and there we go
122:59 - and looks like there's an extra yep
123:02 - there we go we also want to store that
123:05 - response so we'll be saying const
123:07 - response
123:09 - and again you can dump down this
123:11 - response into console log you can post
123:14 - up a toast message whatever you like
123:15 - I'll do a console log because this is
123:18 - important and we should be seeing this
123:21 - data as of now learning phase learning
123:23 - phase and then obviously we can hope
123:26 - first before we do router push this is
123:28 - great suggestion by the way but we'll be
123:30 - doing a toast
123:31 - dot Success login success you can
123:34 - Implement that just a few lines of code
123:36 - and then we're going to go ahead and
123:37 - router.push we don't want to push it we
123:39 - will be pushing it on to
123:41 - slash profile Maybe
123:44 - yeah do we have profile pages
123:47 - did I taught you that
123:49 - uh yep I I taught you that yeah profile
123:51 - page so we'll be redirecting into
123:53 - profile all right so let's see if this
123:56 - actually works in action or how many
123:59 - errors we are going to get
124:00 - okay okay xcos is not exported this is
124:04 - again xcos problem
124:06 - there we go
124:08 - save this hopefully things are okay
124:10 - expect errors that's the only advice I
124:13 - can give
124:14 - okay now we are on to the login page
124:16 - just to refresh can I go into sign up
124:19 - yep visit login
124:21 - yeah working nice so the email is one uh
124:25 - my bad email also needs to go ahead and
124:27 - work with this
124:29 - nobody is able to see this because of my
124:32 - bad CSS text Dash
124:36 - black
124:38 - and the password is also going to have a
124:41 - text Dash black
124:44 - should be okay now also let's since we
124:46 - are here let's also change the thing so
124:48 - login will be based on
124:51 - not like this we'll be having a loading
124:54 - so if loading is true
124:57 - that means processing
125:00 - otherwise we are doing what
125:03 - we are login
125:04 - okay and button disabled
125:09 - I'll not do this you can do this
125:12 - all right so I'll just go ahead and say
125:14 - one at the rate gmail.com and we'll be
125:17 - having one two three four five six the
125:19 - securest password ever let's try login
125:22 - and no I don't want to save it
125:25 - did we call it even
125:27 - uh there we go on click login
125:31 - on click
125:34 - login
125:36 - so all right so this should be working
125:40 - do we have any data okay so we are
125:43 - receiving the data till here that is
125:45 - nice
125:46 - but it's not getting redirected
125:49 - okay
125:51 - we should be getting a redirection
125:54 - log in don't want to save this let's
125:57 - check out and let's see what are the
125:59 - mistakes that we're doing console log
126:01 - okay the server is
126:05 - okay so we are getting a lot of Errors
126:07 - probably we should be going back onto
126:09 - the code file there is a lot of
126:11 - okay uh we need to check out what is
126:14 - going on wrong API slash user slash
126:17 - login
126:18 - that seems to be correct
126:21 - and since we are receiving the data on
126:24 - the backend side that means at least
126:26 - this one two three four five six one at
126:28 - the red gmail.com do we have one at the
126:30 - rate gmail.com and the passwords are
126:32 - coming in okay at least we are getting
126:34 - this on the backend side so now the
126:36 - problem is technically on the backend
126:38 - side so two times we have requested the
126:39 - body
126:40 - and we were able to encrypt that
126:44 - and we were able to actually get this
126:47 - saved user as well
126:49 - okay
126:51 - oh I'm checking on to the sign up route
126:54 - I should be checking into the login
126:55 - route
126:58 - I should be in the login route did I
127:00 - made a mistake
127:03 - okay so here is this this is coming up
127:05 - from here so we are getting this
127:06 - request.body and now we are getting this
127:09 - so we should be actually checking this
127:12 - token data we are getting the user no
127:15 - user here we are getting the user again
127:17 - this debugging will take some time so
127:19 - this is the real world development
127:21 - that's how it happens and let's see if
127:24 - the user is actually getting some tokens
127:26 - so let's see in the application
127:28 - and here in the localhost we don't get
127:31 - any token all right so this is going to
127:32 - take a little while to debug so let me
127:34 - go ahead and quickly debug this and will
127:36 - tell you what is actually happening here
127:39 - Welcome to the Real World development
127:41 - this is how it happens and Yes actually
127:43 - I found the bug it was nothing I just
127:46 - forgot to save the file there was a big
127:48 - white dot I couldn't see it and that
127:50 - actually turned out and notice here I
127:52 - didn't change anything I was just
127:53 - logging out a few things to check out
127:55 - whether user exist or not not even a
127:57 - single line changed but yes I made a
127:59 - couple of requests then I realized I
128:01 - need to actually restart the server that
128:03 - is all that is all I did and nothing
128:05 - changed and it works nicely now I'll I
128:09 - don't have a log out route yet we'll do
128:11 - that soon but this is how we have I can
128:13 - go into my application now just after
128:16 - restarting I can see there is a token
128:17 - being included up here and I'm also
128:20 - getting redirected to profile but there
128:22 - is a problem there's a lot of problem
128:23 - here I can still go back to my login
128:26 - route this shouldn't be happening and I
128:28 - can directly access these profile which
128:31 - shouldn't be happening if I'm not logged
128:33 - out so there is no controlling mechanism
128:36 - right now also there is no log out
128:37 - mechanism right now now I'll obviously
128:40 - push this code so let's do it right now
128:42 - in fact so I'll just go ahead and push
128:44 - all of this yep all of this and we'll
128:47 - say
128:48 - sign up
128:50 - and login
128:53 - complete good
128:56 - I'll just complete this commit this and
128:58 - obviously I'll push it
129:00 - why don't you use command line I don't
129:02 - it's just easier it's fun so I'm just
129:05 - going with that
129:06 - so uh what we have done right now and
129:09 - what position we are that's the most
129:11 - important to evaluate right now so let's
129:13 - just go ahead and quickly evaluate this
129:14 - so we are at a position now our front
129:16 - end is working our back end is working
129:18 - we are able to register a user in the
129:20 - database we have tried that couple of
129:21 - times it works and we are also able to
129:24 - log in a user there was a small hiccup
129:25 - where I paused for a minute but again it
129:28 - was nothing more I just had to save and
129:30 - restart the server so once I restarted
129:32 - it worked absolutely fine also I'm
129:34 - pushing the code in the GitHub as well
129:36 - so that you can also see and check out
129:37 - what is happening how is it happening
129:39 - and all of that now there are a couple
129:41 - of challenges in front of us first of
129:43 - all there is no logout button so we need
129:44 - to design that we also don't have any
129:47 - kind of a mechanism to stop the user
129:50 - from visiting the profile if they are
129:52 - not authenticated and if they are
129:54 - authenticated they have the token we
129:56 - have no way to stop them and protect the
129:59 - routes that the logged in user should
130:00 - not be seeing the sign up and the login
130:02 - page he should be seeing just the
130:04 - profile and all of these pages so we
130:06 - need to find a way and of course I'm
130:08 - talking about middleware so we'll be
130:09 - talking about Dem so this is all what we
130:12 - will be doing in the upcoming videos I
130:14 - hope you are enjoying them I'll take a
130:16 - small pause it's already like four
130:17 - o'clock in the night or in the morning
130:19 - so I'll record the rest of the videos
130:21 - tomorrow so just stay tuned hit that
130:23 - subscribe I would be super super helpful
130:25 - if you drop me a tag note on Twitter or
130:27 - LinkedIn there's so much effort that is
130:29 - going on in that so in case you wish you
130:31 - can do that otherwise it's totally fine
130:32 - let's catch up in the next video or
130:34 - after a break and finish up our
130:36 - middleware and remaining of the part
130:38 - let's see you in the other side of the
130:41 - video or the next video whatever that is
130:44 - all right hey there everyone hitesh here
130:48 - one more time into the next year's
130:50 - Series so what we were doing in the next
130:52 - year series it's tough to remember just
130:55 - kidding just kidding I exactly know what
130:56 - we were doing in the last video and yes
130:58 - in this video we'll be taking this a
131:00 - step further so we have achieved the
131:03 - goal of signing up the user logging in
131:05 - the user even producing a token and
131:07 - storing that token into the user cookies
131:08 - but right now there are a couple of
131:10 - issues that we want to take down the
131:12 - first one being some of my pages are not
131:14 - protected I want to protect them and
131:16 - obviously the middleware will kick in
131:18 - here the middleware how it works in
131:19 - nexgs is little different so you need to
131:21 - understand that part as well other
131:24 - couple of other use cases as well which
131:25 - I'll discuss in this video and on top of
131:28 - that we want to Simply achieve a route
131:30 - where we can have slash me or something
131:32 - where anybody can get their own
131:33 - information from the database right now
131:35 - we don't have ton of information but
131:37 - whatever the information is we would
131:38 - love to extract that and obviously we
131:40 - need to click up with the log out route
131:43 - as well we haven't worked on that so
131:44 - we'll be working on that as well I think
131:46 - that's enough for this video and uh we
131:49 - will see if there is a little bit more
131:50 - to explore or something we'll definitely
131:52 - go ahead and do that as well all right
131:54 - so let's share the screen here so this
131:58 - is what we have been doing now let's run
132:01 - this first and foremost npm run Dev so
132:04 - that we can see what is happening how is
132:07 - it happening and is it all okay so if I
132:10 - just go ahead and refresh this hopefully
132:12 - this is booking Yep this is working
132:15 - let's try to change the number with some
132:19 - name yeah bits working but this is
132:21 - nothing is protected I can still go
132:23 - ahead and visit the login page as well
132:25 - so everything is just back and pass and
132:27 - forth let's also see let's also try to
132:30 - log in again let me see the database we
132:32 - have two at the rate gmail.com so let's
132:34 - go ahead and try to log in with that so
132:37 - we'll just go with the two two at the
132:39 - rate gmail.com because I set up the
132:42 - expiry time for one day it's it is not
132:45 - here 24 hours but still I would love to
132:47 - just set it up password very secure one
132:49 - one two three four five six very very
132:51 - secure one let's login it's processing
132:54 - nice and we are redirected to the
132:56 - profile page let's right click inspect
132:58 - is there a shortcut of going directly
133:01 - into the application just let me know if
133:03 - you know in the comment section so I
133:05 - have the token so that is all clear that
133:07 - is that part is still working nicely so
133:09 - let's go back and let's see how we can
133:11 - do that now first thing that I would
133:13 - like to take down is a log out button
133:15 - that how we can actually have a log out
133:17 - so for this I have to create a log out
133:19 - route should be fairly simple obviously
133:22 - we need to First create a backend
133:23 - portion of it then we need to call that
133:26 - log out button or that method or that
133:28 - API route from the front end part of it
133:31 - so let's start with the backend in the
133:33 - apis we have user slash login sign up
133:36 - we'll create another one which is for
133:38 - logout so let's create another folder
133:40 - and obviously without any
133:43 - thought we'll just call it as log out we
133:45 - know this is a back end so we know this
133:47 - is going to be route dot TS there we go
133:49 - now basics of this logout is going to
133:52 - remain same we don't need to create any
133:54 - post requests for that because the way
133:56 - how this is going to do a log out is
133:58 - simply just clear out the token that you
134:01 - have there are a lot of ways how people
134:03 - do it some people actually create a
134:04 - token and save the token expiration time
134:06 - as well refresh token there are a lot of
134:08 - ways I will be going with the basic I
134:10 - want to just clear out the token now in
134:13 - order to clear out the token there is
134:14 - nothing too much to worry about I'll
134:16 - just first bring the next response
134:18 - because that will be doing this
134:20 - and we will be using next response
134:23 - majorly requests no not request okay
134:26 - let's go ahead and do this export
134:28 - obviously this will be a sync
134:31 - uh function I'll just use the get
134:34 - request for that
134:36 - get and we don't need
134:38 - any of this here so we anybody can just
134:41 - make a get request just directly that's
134:43 - that's it all right so how we are going
134:46 - to log out first and foremost is go
134:48 - ahead and work on with the try catch the
134:50 - catch part is easy so we'll do that so
134:52 - let's try with the try catch catch and
134:56 - then we'll be saying error that could be
134:58 - any suggestion please
135:00 - no suggestion there we go so and we'll
135:02 - be saying next response we won't be
135:04 - dealing up with the errors suggestions
135:06 - are good but they're not always the best
135:08 - I will be having a Json error response
135:10 - just like that and we are having an
135:12 - extra dot all right so that part is done
135:15 - now only thing that's remaining is
135:17 - create a response which is capable of
135:21 - removing the cookies why this is giving
135:23 - me a problem
135:25 - is it extra
135:28 - yeah this one was extra all right
135:31 - so let's create a response how do we
135:33 - create a response
135:35 - response if I can write that
135:38 - and we simply go ahead and use the next
135:42 - response and with this we want to create
135:45 - a Json remember we are not returning the
135:48 - response yet we are just trying to
135:50 - create a response object so with this
135:52 - I'll hit an enter just like this we'll
135:54 - create a message of logout successful
135:56 - and a success of true also I want to
135:59 - send
136:01 - success of true and that is it now this
136:03 - is my response this response now since
136:06 - it's a response of type next response
136:09 - this can actually interact with my
136:11 - cookies so I can go ahead and say hey
136:13 - response go ahead and interact with
136:15 - cookies there is an S at the end of it
136:18 - and then we can go ahead and use a set
136:20 - and that's it so what we are doing here
136:22 - is
136:23 - a response now this should be a smaller
136:26 - response
136:27 - so token we are setting the cookie token
136:30 - as empty and we are also setting some of
136:32 - the options here which are HTTP true and
136:35 - expire we are just expiring it right now
136:37 - immediately although there is no need of
136:39 - this expiration because just HTTP true
136:41 - will actually do the job but anyways if
136:43 - we are just doing it that's also don't
136:46 - forget to return the response because
136:47 - right now we have done a lot of work but
136:48 - we haven't returned the response and
136:50 - that is it now you are completely
136:53 - capable of logging out the user but the
136:56 - point is how you are going to do this
136:58 - log out because there is right now no
137:00 - place where this logout actually works
137:02 - so you need to find a place where this
137:04 - logout actually works so I'll walk you
137:06 - through that you can just choose any
137:08 - page and can do a log out there
137:11 - the logout that we'll be doing is going
137:14 - to be simply on which page we should be
137:17 - doing it that's a confusing statement
137:19 - I'll be doing it in the profile not into
137:22 - the ID so in case you remember we have
137:25 - this profile and we have the slash ID
137:27 - wherever you wish you can do this I'll
137:29 - actually do this directly into the
137:31 - profile again there is no strong Choice
137:33 - there you can definitely inject a header
137:35 - a navigation bar can put a button there
137:37 - that's not my goal my goal is to get you
137:40 - familiarized and comfortable with next
137:41 - shares so a button wherever that is you
137:43 - know now you now know how that is going
137:46 - to work so in this profile page let's go
137:48 - ahead and add a button first we're going
137:50 - to do is simple an HR
137:52 - so there we go and after this let's go
137:55 - ahead and add a button so we'll just go
137:57 - ahead and say hey Button this button is
137:59 - going to say logout
138:02 - all right and we'll add couple of
138:05 - classes here as well so that button at
138:07 - least looks decent so we'll be having uh
138:10 - I'll happy I'll be happy with the
138:12 - suggestion whatever they provide us all
138:14 - right let's see if that actually works
138:17 - I'll say yeah that's a decent button if
138:19 - I can just add a little bit of the
138:21 - margin on the top
138:22 - margin top four
138:24 - yep I'm happy with this button now this
138:27 - button alone is not going to work
138:28 - definitely we need to set up an on click
138:30 - on that so on click we'll be calling
138:32 - this one as log out this reverse
138:35 - approach is always good because first
138:37 - when you actually click this or declare
138:39 - this method on click automatically the
138:41 - suggestions are improved so that's why I
138:43 - love this all right so let's create a
138:46 - method of this so const log out and
138:49 - we'll be showing like this all right now
138:52 - before we do this obviously we need to
138:53 - make this because right now this is a
138:56 - client not a client component this is a
138:58 - server component so let's go ahead and
138:59 - create this as a client how do we do
139:02 - this a simple uh decorator decorator-ish
139:06 - I will be saying use client there we go
139:09 - now this is a client component what do
139:11 - we need in this we need xeos for that so
139:14 - we'll be saying axios from axios that's
139:16 - the first part we'll be also redirecting
139:18 - the user or probably providing some
139:20 - linking as well so we'll be using this
139:22 - next link
139:24 - there we go and what else
139:27 - I think that is it I think that is it
139:29 - all that we need all right so how do we
139:32 - log out a user really simple just go
139:34 - ahead and simply have a try catch we
139:37 - have done this many times so that should
139:38 - be all easy for you now and for the
139:41 - error part we'll be doing a console log
139:43 - of the error Dot message but I'll also
139:47 - give you an assignment as well we also
139:49 - need to provide an any here
139:52 - and after this we'll be having a message
139:54 - which will be a toast
139:58 - Dot error
140:01 - suggestions please no suggestions
140:04 - and here we can say error.message
140:07 - obviously we haven't brought in the
140:09 - toast so I'll just bring in the toast
140:11 - you decide how the properly how is the
140:13 - proper way to bring it up
140:15 - so toast and that is from react toastify
140:18 - not reactors if I react hot toast
140:22 - there we go this is obviously not a
140:25 - proper implementation but I'll just
140:27 - leave this as a simple exercise for you
140:28 - now how do we do this make a simple uh
140:31 - get request that's it so we'll be saying
140:34 - axios
140:35 - uh dot get request because that's what
140:38 - we are handling where does this get
140:40 - request go it into slash API slash users
140:44 - slash
140:46 - log out this is where it goes and again
140:49 - this is asynchronous Operation so we
140:51 - need to provide an await as well this
140:53 - logout is also not a synchronous so
140:56 - let's go ahead and add this a sync so
140:58 - that it's happy you can actually trap
141:01 - the response as well in case you wish
141:03 - but I don't think that is required so if
141:07 - you wish you can actually provide better
141:08 - messages with that but I'll go ahead and
141:10 - say toast or successful obviously this
141:12 - is not going to print it anywhere but I
141:15 - also want to push the router somewhere
141:16 - so we haven't used the router because
141:19 - once user is logged out he should be
141:21 - pushed back to login page
141:23 - so we'll be saying import
141:26 - use router from next router okay I'm
141:29 - happy with this and let's go ahead and
141:31 - say I want to create router from use
141:34 - router nice and this router will be
141:37 - capable of pushing to slash login
141:42 - all right so looks okay to me let's try
141:45 - let's test this out and see how many
141:47 - bugs and errors we have got all right so
141:51 - okay next router not mounted
141:54 - all right why the next router is not
141:57 - mounted that's ah my bad because this
142:00 - used router is not from router this is
142:02 - from navigation
142:03 - I told you we actually got this bug many
142:07 - many times let's go all right looks
142:09 - happy now let's go ahead and try ah is
142:12 - there some video recording issue let's
142:15 - see if we have this token uh do we have
142:18 - the token token token token
142:20 - and I don't have a token that's good
142:22 - that's good that means I'm properly
142:24 - logged out so our logout functionality
142:26 - is working that's that's good to know
142:28 - all right so now that our logout
142:30 - functionality is working
142:32 - uh let's go ahead and work on that how
142:35 - the middleware actually works for this
142:36 - we have to actually study a little bit
142:38 - we have to close all of this and this
142:41 - let's study the middleware
142:43 - and here it is this is file not found so
142:46 - I'm going to go ahead and say I want to
142:47 - study middleware thanks for
142:49 - understanding my typos so now it says
142:52 - that middleware allows you to run code
142:54 - before a request is completed so
142:56 - obviously this is exactly what I want to
142:58 - do is before when my request is
143:00 - completed I want to run something the
143:03 - advantage of this my request doesn't
143:05 - reach to the completion phase it
143:07 - actually is being checked intermediately
143:09 - in between so if somebody is not
143:12 - authorized to visit the profile page it
143:14 - will stop it before doing that if
143:16 - somebody is not authorized to visit the
143:17 - login page the user who is already
143:19 - logged in so I can just stop him before
143:21 - visiting that page and I can redirect
143:23 - him to some other page so that's the
143:24 - goal of it so that's a nice one before
143:27 - completing a request
143:28 - and let me Zoom this again then based on
143:31 - incoming request you can modify the
143:33 - response by rewriting redirecting modify
143:36 - the request or response headers
143:37 - sometimes we inject some things in the
143:40 - headers as well for example maybe user
143:42 - ID so some things you want to inject in
143:44 - the response headers or the request
143:45 - header you can do that or you can
143:47 - redirect this modify this however you'll
143:49 - go with that a middleware run before the
143:52 - cached content and routes are matched so
143:54 - this is what they say I use the file
143:56 - middleware.ts now this is a really
143:58 - important word here you have to have to
144:01 - use this as middleware.ts there is no
144:03 - exception in that there is no other file
144:06 - name that you can use it needs to go
144:08 - into I'll show you where it needs to
144:09 - exactly go and how it runs so don't
144:11 - worry on that part although it is
144:13 - mentioned that it goes the same level as
144:14 - Pages app or source so we obviously need
144:17 - to put it inside the source we are
144:19 - talking everything about the source if
144:20 - applicable yes source is applicable for
144:22 - us so we need to put it into the root of
144:24 - source not the root of project remember
144:27 - this okay and now how does the
144:29 - middleware looks this is how it looks in
144:32 - fact instead of talking about it here we
144:33 - can just copy it that would be great and
144:36 - we can simply go up and talk about it so
144:39 - let me go back my code editor here it is
144:41 - again as I told you it is inside the app
144:44 - directory just to show you again Yep
144:46 - this is inside the source so not in the
144:49 - app inside the source all right
144:52 - so we'll just right click on the source
144:54 - create a new file this will be middle
144:57 - middleware dot TS or JS whatever you're
145:01 - using I'm using TS obviously I'll be
145:02 - using the TS you can copy and paste the
145:05 - code which we just copied here just a
145:07 - moments ago and this is exactly how your
145:09 - middleware looks like now there are two
145:11 - parts of the middleware the first
145:13 - portion of it is the logic part and the
145:15 - second part is the matching part that on
145:17 - what route you want to match and you
145:19 - want to run your middleware so you can
145:22 - define a lot of things here so what I'll
145:23 - do is instead of giving it as a string
145:26 - like this you can actually give it an
145:27 - array and it will match all of this that
145:29 - is what I found in the documentation and
145:31 - I found it much more useful so the route
145:34 - that I want to match is Slash and by the
145:36 - way there is also something more
145:37 - interesting in the darks so there is a
145:40 - pattern matching as well so you can
145:41 - match the file patterns as well for
145:44 - example here you can say slash about
145:45 - Slash colon path and whatever the path
145:48 - comes of asterisk means anything you can
145:50 - also match the paths like this like this
145:52 - so this there is a regex that you can
145:54 - involve there's a lot of this so you can
145:57 - see somewhere here
145:58 - let me zoom out so somewhere here they
146:01 - actually mentioned that hey you can
146:02 - match a lot of paths a lot of these
146:04 - details so all of them are mentioned up
146:05 - here I'll just go with the basics that I
146:07 - want to match so I want to match uh this
146:10 - one I also want to match
146:13 - slash profile you can match slash
146:16 - profile slash anything as well that
146:17 - comes up I also want to match if
146:20 - somebody is visiting slash login login
146:24 - and I also want to match slash sign up
146:27 - okay uh these are the paths that I'm
146:30 - worried as of now if I have more I can
146:32 - come back in the middleware and can just
146:33 - simply write the code for that super
146:36 - easy so this part is a matcher I hope
146:38 - that is clear now now let's go back on
146:40 - to this part I'll just remove this
146:42 - comment somehow they're bothering me a
146:43 - little okay
146:45 - so we have this function middleware and
146:47 - right now it's redirecting just the
146:49 - response and we'll just remove
146:51 - everything what is it is returning
146:52 - because we want to write our own logic
146:54 - now what do we want to do now we have
146:56 - couple of paths which are public paths
146:58 - for example login and your sign up these
147:01 - are public paths if somebody has the
147:03 - token he should not be able to access
147:06 - those public paths all right and there
147:08 - are some parts which are protected path
147:10 - so somebody who is
147:12 - not allowed or who is not logged in he
147:15 - should not be seeing profile so
147:17 - something like that so first we need to
147:19 - find out that how we can find out what
147:22 - are the paths because right now we have
147:23 - no access to the paths and luckily for
147:26 - us this next request actually gives us a
147:28 - lot of thing uh next request by the term
147:31 - next request I mean to say this request
147:32 - so this will be helping us in finding on
147:35 - what path you are so you can go ahead
147:36 - and declare a simple path variable just
147:38 - like this and this request has access to
147:41 - this next URL dot path name yep that is
147:44 - that is so simple and no it is not a
147:47 - client side or a client component this
147:48 - is how it always needs to be so once you
147:51 - have this now you can match that what is
147:53 - your path name so we'll be declaring
147:55 - that some of the paths are public and
147:57 - some of the paths are not public so we
147:59 - just need to find out which one are
148:00 - public so const is
148:04 - public but and for the public path what
148:08 - we're going to do is we'll just check if
148:09 - the path is equals to login or the path
148:13 - equals to sign up I think these are the
148:15 - two public paths we are worried about
148:17 - login and sign up so this should not be
148:20 - visible to somebody who has token all
148:22 - right
148:23 - so it's public path again if it is login
148:25 - then it will be true if it is sign up
148:28 - then also it will be true now next thing
148:31 - is we need to extract the token now this
148:33 - is very common we have already seen that
148:34 - while injecting the token that this
148:37 - request is completely capable of going
148:39 - into the user's cookie and we can
148:40 - extract the token from it super simple
148:42 - we can go ahead and say hey request just
148:45 - access the cookies and from that just
148:48 - like we were using set we can actually
148:50 - use the get method of this and we can
148:52 - grab the token now this token might be
148:55 - there might not be there but if it is
148:57 - there so optionally it might be there
148:59 - that's why the optional we can extract
149:01 - the value or we can just provide the
149:03 - empty one so in any case there is a
149:06 - variable known as token which has some
149:08 - value either the actual token value or
149:11 - completely empty that's that's fine
149:13 - okay now I have two variables here and I
149:16 - can decide based on them that whether
149:18 - should somebody should be able to access
149:20 - a path or not so if the path is public
149:23 - and you are having the token that means
149:26 - you should not visit the login you
149:28 - should not be able to visit sign up so
149:29 - let's go ahead and code out that so
149:31 - we're going to go ahead and say if the
149:33 - path is public is public path and you
149:36 - have token then I would love to redirect
149:38 - you now the redirect response is is like
149:41 - that but there are a couple of other
149:42 - ways as well how you can actually
149:43 - provide that this is also good there is
149:46 - no problem in it and you'll also see
149:49 - some of the documentation code that is
149:50 - written somewhat a little bit different
149:52 - in this there you can directly use the
149:54 - redirect there is no problem I haven't
149:56 - found any if you find any let me know in
149:58 - the comment section but you can actually
149:59 - create a new URL that is what I found
150:02 - and new URL
150:04 - no suggestions are not good so I'll just
150:07 - go ahead and say hey this guy needs to
150:09 - redirect somewhere we need to redirect
150:11 - him somewhere because he's trying to
150:12 - access a sign up and login so I don't
150:15 - want that so let's redirect him on to
150:17 - slash that's it and then the second is
150:19 - you have to request use request and then
150:24 - we can say dot next URL so I found this
150:30 - is a little bit tiny better this one
150:32 - needs to be request
150:35 - request
150:36 - come on can't I write request all right
150:40 - so again you can directly use a redirect
150:42 - and can work with that there is no
150:44 - problem with that I found this one a
150:46 - little bit more reliable but again I'll
150:48 - check out documentation as in the next
150:50 - years things are evolving so I'm just
150:51 - also learning as as we go so this is
150:54 - first path we have handled we have
150:55 - rededucted the authenticated users to
150:58 - the slash of the application or in case
151:00 - you want to redirect him to slash
151:01 - profile uh that's your choice totally
151:04 - your choice maybe dashboard whatever it
151:06 - is that's up to you
151:07 - now what if the URL is not public and
151:11 - token is not there so in that case
151:13 - obviously you should log in first so
151:15 - we'll just go with that if
151:17 - uh
151:19 - there is no public path and
151:23 - there is no token
151:26 - so in that case we'll be just
151:28 - redirecting him to login and then again
151:31 - we'll be using the same format request
151:33 - dot next URL so that it automatically
151:35 - moves to the next URL and it looks like
151:37 - we are having some issues with the curly
151:40 - braces
151:41 - should be happy now
151:43 - yeah the indentation is messed up
151:46 - it shouldn't be like that
151:48 - I think this one can go here and that
151:50 - will do a little bit cleanup
151:52 - yeah I think better all right so now we
151:55 - can see that this is all there and let's
151:57 - see if we can still visit the profile
151:59 - let's save this and let's see how many
152:01 - errors we got
152:03 - uh looks like a good day no errors and
152:06 - let's go back to our application okay
152:08 - let's try to visit
152:10 - profile
152:12 - okay I'm not able to visit profile uh
152:15 - what if I visit profile and Slash hitesh
152:19 - I can still visit it because I haven't
152:21 - mentioned that after the profile am I
152:24 - looking for all the path remember we saw
152:25 - in the documentation we can use Asterix
152:27 - and all those rejects to do so but I'm
152:31 - happy with this this is a simple
152:32 - assignment for you but I cannot visit
152:34 - the profile because that is now
152:35 - protected now let's see the login
152:37 - version of it so I'll just go ahead and
152:39 - say 2 at the rate gmail.com password
152:42 - secure one you know it one two three
152:44 - four five six uh login processing and
152:47 - now we are on the login page can I still
152:49 - visit the login
152:52 - uh no I'm redirected to the slash which
152:55 - is home uh but I can actually go ahead
152:57 - and visit the profile as well we should
152:59 - get a profile link here on the home page
153:01 - as well but anyways
153:03 - ah it's fine it's fine we Now understand
153:05 - that how we can extract and write a
153:07 - middleware as well so that's that's a
153:09 - good start now one more thing is notice
153:12 - here that we are able to grab the token
153:14 - as well can we extract some data from
153:16 - the token as well because yes it was us
153:19 - who actually designed this token so we
153:21 - can definitely uh 100 get some uh data
153:25 - from the token as well let's go ahead
153:27 - and try this out let's go ahead and
153:29 - create an API route for it so inside the
153:32 - API users and let's create a new folder
153:34 - what should I call it a user
153:38 - a me user
153:40 - and me yeah whatever the naming
153:42 - convention you want to follow you can go
153:44 - with that I'll probably go with me I
153:46 - think that's okay
153:48 - and then here we'll have a new file so
153:50 - we'll be having route dot TS there we go
153:53 - now how we can grab this information all
153:56 - right now this grabbing the information
153:57 - is going to be done probably multiple
154:01 - times because we will have the token now
154:03 - we know how we can extract the cookies
154:04 - and token and token if you remember if
154:07 - you forgot that let me remind you again
154:09 - at the time of login we actually
154:11 - injected a lot of information in this
154:13 - token I'll just close this one this is
154:16 - the token data so I can technically
154:18 - extract all this information if I know
154:20 - this token secret which I know because I
154:23 - created it so I can actually do this now
154:26 - I can do it directly here as well or I
154:29 - can create a helper method which can
154:31 - help me to extract this token so maybe
154:33 - later on at some point if I want to use
154:35 - it I can call this method so time to go
154:37 - into helpers let's go up here
154:40 - and in the helpers we have this we have
154:43 - no helpers as of now that's so sad we
154:45 - should be having some more helpers so
154:48 - let's create a new file and let's call
154:50 - this one as why it's not writing ah
154:53 - there we go now it's writing so we can
154:56 - say get data from token very liberative
155:01 - dot TS of course
155:03 - okay how we can grab the token data now
155:06 - get token data is super super simple
155:08 - just a few lines of codes I'll do that
155:10 - quickly again this requires the next
155:13 - request otherwise how we will be doing
155:15 - it
155:17 - all right and also we'll be needing JWT
155:22 - JWT suggestions from Json web token now
155:26 - let's go ahead and simply export a
155:28 - function which we'll be calling it as
155:30 - get data from token very liberative I
155:34 - like that and we can have requests just
155:37 - like this and we'll close this
155:39 - all right how we can get that obviously
155:42 - we'll do a try catch the catch part is
155:44 - super easy super simple we can go ahead
155:46 - and get any and we can say
155:49 - throw
155:51 - not like that
155:53 - throw come on I can write that and throw
155:56 - a new error and we'll be throwing an
155:57 - error message all right that's all we'll
155:59 - be doing now how we can grab this we can
156:01 - simply go ahead and say hey request
156:03 - you can access the cookie you can get
156:06 - the token value just like this or there
156:08 - might be a case where it is empty so
156:09 - we'll just go ahead and use this and
156:12 - we'll store this
156:13 - uh token into a variable or you can call
156:16 - this as encoded token because right now
156:18 - the value is encoded now we need to get
156:20 - a decoded token as well so for that I
156:22 - can use this JWT and this JWT has the
156:26 - option of dot verify not only it
156:28 - verifies the token but it also actually
156:30 - extracted the information as a response
156:33 - of this function so I can just go ahead
156:35 - and say process
156:37 - token and then process.env this is not
156:40 - my variable I have created a sample EnV
156:43 - for you so that we can actually grab
156:45 - this variable from here I'll not open
156:46 - mine one because there's a password in
156:48 - that
156:49 - so I'll just go ahead and paste this
156:51 - make sure you follow this exclamation as
156:53 - well if you are in the typescript now as
156:55 - I told you this actually contains a lot
156:57 - of information so you can call this one
156:59 - as d
157:01 - coded token because it is now having
157:04 - this information and you can extract
157:06 - this information now it's up to you what
157:08 - do you want to return you can return the
157:10 - entire decoded token or you can just
157:12 - extract the ID from it now we have to
157:14 - check that what we actually injected
157:16 - into this one in order to extract this
157:18 - so I need to go into my app API and
157:21 - login route Let's see we injected this
157:24 - ID which is actually user.underscore ID
157:27 - okay so we are happy with this all the
157:29 - keys that you are setting that needs to
157:31 - remain same ID username email so this
157:33 - key is really important so we'll be
157:35 - simply going ahead and getting it like
157:37 - that now this is going to give you a
157:38 - problem because there is no surety that
157:40 - the ID will be here because it doesn't
157:42 - know the data type of it I'll not
157:43 - declare any types here that's not my
157:45 - goal so I'll just inject an any here not
157:48 - a good idea I explicitly say do this in
157:50 - my typescript series but we'll do it
157:52 - here all right so now that this method
157:55 - is available for me which is uh get get
157:58 - data from token now we can actually go
158:01 - back into the me route again I'll just
158:03 - close this login one so that we don't
158:05 - get confused let's import this method
158:08 - and simply work with that so we'll just
158:10 - say get
158:11 - data from token so there we go we got
158:14 - this method here and we'll be needing
158:16 - the request and response because this
158:18 - method is dependent on this request
158:19 - somebody needs to send it there so we'll
158:22 - be saying hey import give me uh not like
158:26 - that yeah give me next request and
158:28 - response from the next server uh we'll
158:31 - also be needing the user
158:33 - user
158:34 - and that user will come up from Models
158:37 - user model I think that's correct
158:39 - let me check that
158:41 - so we are having this models and inside
158:45 - the models user models okay that's
158:47 - correct that's correct and we'll be
158:49 - needing the database connectivity as
158:51 - well so let's go ahead and simply say
158:53 - connect
158:54 - there we go
158:56 - obviously the connection needs to
158:57 - establish so first and foremost let's do
158:59 - this now let's create a simple a method
159:02 - don't go with the suggestion in this
159:04 - case you will explicitly make it go
159:06 - wrong so let's go ahead and say export
159:09 - async I'll accept that and then let's
159:13 - call it as a function this will be a get
159:15 - method a get yeah we are not getting any
159:17 - data so get method is fine and we'll be
159:20 - saying request that request will be type
159:23 - of next request and we can have it like
159:27 - this
159:28 - all right next up obviously our try
159:30 - catch
159:31 - so we'll go ahead with the try catch the
159:33 - catch part is easy so we'll just go
159:35 - ahead and say any here and then we'll be
159:37 - returning a next response not like that
159:41 - next response Dot Json I want to return
159:46 - a Json yeah that's what I like now what
159:49 - do we want to do in the try catch part
159:50 - simple just call this get data from
159:53 - token and pass on a request to it that
159:56 - is it it will give you a return response
159:57 - we coded it like that return the decoded
160:00 - it gives me a ID so I can just store
160:03 - that into a variable now and obviously
160:04 - this will take some time so let's just
160:06 - go ahead and await that
160:08 - and that is why we created a sync and
160:10 - this will give me a user ID that is my
160:14 - variable so I can call it as user ID
160:15 - underscore ID whatever you like that's
160:17 - totally up to you and then it's time to
160:20 - find a user based on this user ID so
160:23 - user has the superpower to query with
160:25 - the database and I can go ahead and say
160:27 - find by ID or find one whichever you
160:30 - like both of them are gonna serve same
160:33 - in this situation so I'll just use the
160:35 - find one and I'll just give you that hey
160:38 - find based on underscore ID and I'll
160:41 - give you the ID user ID
160:44 - so a space would be nice okay I made it
160:48 - all caps now I just want eye caps not
160:51 - the T
160:52 - I'm happy with this okay so now when
160:55 - this is done uh what more we need to do
160:58 - await because that's a database
160:59 - operation database is another content
161:01 - and we'll store this as a user so you
161:04 - have given me back a user now this will
161:06 - give you everything I don't want
161:08 - everything because if you check out the
161:10 - database it has ID username email
161:13 - password verified is admin so you can
161:16 - select your fields which one you want
161:17 - and you can deselect the fields which
161:19 - you don't want so I'll just say hey I
161:22 - will go ahead and set select and the
161:25 - password that is what I don't want so
161:27 - you can put a negative sign there by
161:29 - putting a space sadly there is no comma
161:31 - I think the comma would make more sense
161:33 - but sadly there's no comma if you want
161:35 - that I don't want maybe is admin so you
161:38 - can go ahead and put that as well but
161:40 - I'm happy with this one only
161:42 - all right so now I have a user now what
161:45 - can I do with this user I can return a
161:48 - response that hey here's your user now
161:50 - do whatever you like it's an object so
161:52 - I'll just go ahead and say return next
161:55 - response
161:57 - the next response
161:59 - response come on and we'll have a Json
162:02 - just like this and in here we'll be
162:05 - saying a message first and foremost
162:09 - come on
162:10 - message user found and then the data
162:13 - will be sending the data like this so
162:15 - we'll be sending user all right looks
162:17 - good you can send the data directly as
162:19 - well in case you wish that's okay and
162:22 - now we can simply have a save on this
162:24 - one all right so now we have designed a
162:27 - route which can actually help us to
162:29 - Simply go ahead and work with this so
162:32 - it's totally up to you that how you want
162:34 - to utilize it maybe you want to make
162:35 - another request let's do it let's have
162:37 - fun so in this slash profile let's
162:40 - actually grab the user's ID
162:44 - now we know how to do this so as soon as
162:46 - somebody lands here I want to fire an
162:49 - xeos request to me and I want to grab
162:52 - that user let's try that let's try if we
162:54 - can do this
162:55 - and
162:57 - inside the profile will go into page now
163:00 - obviously I want to have this get
163:02 - details method and this get details
163:05 - method uh will run
163:07 - let's just run it on a button click you
163:11 - can run it with the use effect as well
163:13 - as soon as the page loads but I want
163:15 - this one to run it on a method call so
163:17 - we'll go up here we'll design the method
163:20 - so I'll just minimize this log out not
163:22 - interested in that let's call this as
163:24 - get
163:26 - user
163:28 - details like this and obviously this
163:31 - will be a sync just like this now how do
163:33 - we do this pretty simple we need xtos
163:37 - it will fire a get request to slash user
163:41 - slash me ah nice I like that this will
163:44 - await because it's a request and we'll
163:46 - grab a user out of it or a response out
163:49 - of it first not the user now with this
163:52 - we can go ahead and say a console log
163:54 - first
163:56 - and we'll say res dot data all right and
164:01 - since this is a res dot data we actually
164:04 - need a state as well where we can pass
164:07 - on this information without this it's
164:09 - it's not going to be very helpful but
164:12 - again it's up to you I need a I need a
164:15 - state so I'll call this one as data you
164:18 - can call it as user as well I'll call
164:20 - this one as data no I don't need this
164:24 - I don't need this either I'll have a
164:27 - string which says nothing just for fun U
164:30 - state is not available why is it not
164:32 - available
164:34 - it should be here
164:38 - react and we'll be having you state from
164:41 - react okay now once we have this now I
164:44 - can use this set data method to actually
164:47 - use this so set data
164:49 - what is happening no I don't want
164:51 - Mongoose set why
164:53 - unobvious suggestions so we'll be having
164:56 - set data and that data will get res dot
164:59 - data but the problem is the data is not
165:02 - inside the res dot data it's actually
165:04 - inside since we have passed our
165:06 - information like this so let me show you
165:08 - this if we are passing the data so res
165:11 - dot data has all of this data so res dot
165:13 - data dot data dot user will have the
165:16 - information Yeah we actually
165:18 - accidentally made it more messy so
165:20 - further down the data and then further I
165:23 - can extract this underscore ID yeah
165:25 - that's that's messy and what we're going
165:28 - to do is
165:30 - just below this profile page we will get
165:33 - an H2
165:35 - and this H2 will get some data so if the
165:39 - data is there do something do get
165:42 - available
165:44 - just like this
165:45 - uh probably not we'll just first get the
165:48 - strings otherwise do something else
165:52 - so what is happening so if there is
165:55 - nothing inside the data so what we can
165:58 - do is we can write some of the things
166:00 - let's actually evaluate this that would
166:02 - be better if data equals
166:05 - nothing because that's the default State
166:07 - remember nothing so if data is nothing
166:10 - then we'll be saying hey this is nothing
166:12 - so let's just go ahead and inject
166:15 - nothing here
166:16 - just like this and if there is some data
166:19 - then we can actually go ahead and inject
166:21 - instead of this string let's go ahead
166:23 - and give it a link as well
166:27 - so I'll just go ahead and say link
166:30 - just like this
166:33 - okay
166:35 - and why is it giving me this problem
166:37 - here
166:38 - that oh href is missing okay I can I can
166:41 - add that no problem
166:43 - and I'll move it to the next line
166:46 - now I'll do it here okay
166:48 - href okay where do I want this one to go
166:52 - so I'll use the back tech I'll say slash
166:54 - profile okay but since I have extraction
166:58 - of the ID now I can go ahead and Slash
167:00 - and put this data although we should be
167:03 - calling it as ID but I think that is
167:05 - good
167:06 - all right now uh one more thing who will
167:10 - be calling this uh there is no button to
167:12 - call it all right so let's create
167:14 - another button who can actually call
167:16 - this so I'll just duplicate this one
167:18 - and I'll say that hey you will be
167:21 - responsible for get user details so yep
167:25 - get user details ah I don't think you
167:28 - will be happy as a blue so we'll just go
167:30 - ahead and say you will be what a violet
167:33 - purple
167:35 - you you get purple a little darker shade
167:37 - of purple
167:39 - 900 no I'm not happy with this
167:42 - okay uh what else colors
167:44 - uh green yeah will will go green
167:49 - 800 cream okay I know
167:52 - okay so this still says logout this
167:54 - shouldn't be saying log out this will be
167:56 - get user details
167:59 - all right ah right now it says nothing
168:02 - which is good I also want to actually
168:05 - highlight this nothing as a little bit
168:08 - so we'll say class and we'll be having a
168:10 - little bit of padding rounded
168:13 - and we'll be having a BG Dash I'll use
168:16 - green this time not the orange you made
168:18 - a lot of fun of that
168:20 - and we'll be saying 500.
168:23 - and padding
168:25 - not padding like this what am I doing
168:28 - padding Dash three
168:31 - let's go
168:35 - yeah better okay so let's see get user
168:38 - details and there we go right now we are
168:40 - having an empty that means we are not
168:42 - getting any user details let's see what
168:44 - we are going doing wrong it says a
168:46 - message user found and then we have this
168:49 - data and username and email okay so this
168:52 - is coming up into the rest or data
168:54 - so what we have to do is rest.data
168:58 - and then inside that we need to go
169:00 - inside the data and then we need to grab
169:02 - the underscore ID
169:04 - and then we actually can grab the ID so
169:08 - I think this is correct why it is not
169:12 - mentioning the details here so let's
169:14 - check what we are doing wrong in this
169:16 - case
169:18 - okay okay my bad my bad I actually
169:21 - didn't set up anything inside this link
169:23 - my bad we never injected the variables
169:26 - so my bad so we need to inject this data
169:30 - here
169:31 - so the URL was there but the value was
169:33 - never there ah there we go totally a
169:36 - small bug so now we can actually click
169:38 - on this and there we go not looking good
169:41 - this profile should be a little bit
169:42 - above but anyways you get the idea that
169:44 - how we are able to grab the user so now
169:46 - any user we are able to track him down
169:49 - so that's nice and the log out
169:52 - middleware that's working nice get user
169:54 - details we get this and now we can
169:56 - actually click this we can actually grab
169:58 - all of this so instead of running this
170:00 - method on a button click just like we're
170:02 - doing here we can actually use a used
170:04 - effect hook and just whenever somebody
170:07 - visits this page we can load his
170:09 - information there and can directly just
170:11 - display there so I think that's a that's
170:13 - a great start that we have done so
170:15 - that's really nice and I think this is
170:17 - wrapping up our application quite a lot
170:19 - that we are able to do so much in this
170:21 - one I'm super happy that we are actually
170:22 - on this phase that it's working nicely
170:25 - now a couple of more things what we can
170:27 - do is we haven't talked about how we can
170:30 - utilize the mail trap which I actually
170:33 - discussed it's probably logged out
170:36 - so we haven't discussed that I'll close
170:38 - this one I'll close this one I need to
170:40 - push this on to GitHub as well so let's
170:42 - go ahead and do this and I'll go ahead
170:44 - and say hey let's add every things like
170:48 - this and we'll be saying added
170:52 - middleware
170:54 - come on
170:56 - added middleware and what else we have
170:59 - done we have added middleware we have
171:01 - also worked on me route
171:04 - okay Commit This
171:06 - and of course we want to push it
171:09 - all right so that you can see the
171:10 - repository is available on my GitHub
171:12 - account it's pretty easy to find you can
171:14 - definitely easily find that all right so
171:16 - I think that is uh what we'll be doing
171:19 - in this video but there is little bit
171:21 - more that we need to have an action plan
171:23 - so we have gone through with quite a lot
171:25 - of details in this one we have gone
171:26 - through with the middlewares I showed
171:28 - you how the how to protect some pages
171:30 - routes and all of that from the server
171:32 - side grabbing the cookies and all of
171:34 - that
171:35 - couple of more things which are easier
171:37 - things now is how we can first and
171:39 - foremost shoot an email so obviously
171:40 - we'll be creating a helper file for that
171:42 - and once the email is being shot how now
171:45 - the values are there in the database so
171:47 - I want to update the values in the
171:48 - database that's my concern now get this
171:51 - token into the database as well and send
171:53 - this token to the user email as well
171:55 - that's what my action plan is right now
171:56 - and obviously we'll figure out the plan
171:58 - as we go we make a lot of mistakes and
172:00 - all of that so that's that's a part of
172:02 - the things I hope you are enjoying this
172:04 - series if you want more details or more
172:06 - projects or something let me know in the
172:07 - comment section I'll definitely love to
172:09 - do that for you guys and consider
172:11 - hitting subscribe there's a lot of
172:13 - effort going on I would appreciate that
172:15 - let's go ahead and catch up in the next
172:16 - video or if you're watching all in
172:18 - continuation just a small break and
172:19 - catch up on the other side
172:23 - hey there everyone ate here and welcome
172:26 - to almost the finalish video of the
172:29 - series I'm saying almost because I'm not
172:30 - sure I will be able to do all of this or
172:32 - we'll be extending this series depends
172:34 - on you just let me know the comments so
172:36 - the one of the last thing that's
172:38 - remaining almost last is how we can
172:40 - actually retrieve the user update some
172:42 - data in the database as well as send an
172:44 - email now sending the email has a lot of
172:47 - issues and a lot of good ways okay
172:49 - shways and the bad ways of doing it I
172:51 - found that luckily we are in this
172:53 - typescript JavaScript environment where
172:55 - things are super easy for us to work on
172:57 - with that we have this package known as
172:59 - node mailer which helps us to do almost
173:01 - everything that we want to do but there
173:03 - are new players which are coming around
173:05 - in the market which are handling these
173:07 - mailing into a new and creative way I'll
173:10 - talk more about them in probably some
173:11 - another video this time we'll be going
173:13 - with the core node mailer way also there
173:15 - is an exception that I have taken in
173:17 - this particular video that is usually I
173:20 - keep my mailing helper as just to send
173:22 - email nothing else it doesn't do
173:24 - anything it doesn't generate any token
173:26 - or anything like that it's a special
173:27 - helping file which helps me to send an
173:29 - email that's it but in this case I'm
173:31 - actually generating my tokens within the
173:33 - mailer as well because in this use case
173:35 - it actually makes sense to generate
173:37 - these tokens within the mail itself and
173:40 - I'll show you the walkthrough as well
173:41 - and again I always say there is no good
173:43 - practice bad practice it depends on what
173:45 - the project is what scale is and is it
173:47 - the maintainable code is it not so
173:50 - that's all it is in this project since
173:51 - it's not very scale we are not talking
173:53 - about like making thousands and
173:56 - thousands of files into it so we'll keep
173:58 - our mail and we'll keep it in such a way
173:59 - that we are able to generate the token
174:01 - within the mail itself the mail helper
174:03 - file and based on whether the user is
174:05 - requesting to verify an email or forgot
174:07 - the password I'll walk you through with
174:08 - a couple of scenarios of how you can do
174:10 - it that's the one part the second part
174:12 - is how do you want to verify the user
174:15 - that's up to you there are a couple of
174:17 - ways you can do it all in the back end
174:18 - you can do a mix of backend and
174:20 - front-end that is also totally doable
174:22 - it's totally your approach again there
174:24 - is no good right and wrong here it's
174:26 - totally approachable whichever you feel
174:27 - you can do that in case I talk about
174:29 - just the back end approach then the URL
174:31 - formatting needs to be in that way and
174:34 - if you are looking for the front-end
174:36 - part of it then obviously you need to
174:37 - have a front-end page of it both have
174:39 - their advantage if you do it totally on
174:41 - the back end then there is nothing much
174:42 - you can just redirect the user onto a
174:44 - home page or something but if you bring
174:46 - the user on some page and then the
174:48 - verification happens then we can provide
174:50 - a message to the user that hey
174:51 - verification was successful that's
174:53 - totally up to you how you want to do it
174:54 - it's totally up to you I'll show you and
174:56 - walk you through with the boasted
174:57 - approach that it makes you comfortable
174:59 - with both the approaches all right so
175:01 - first this is the service that I'll be
175:04 - using known as mail trap the one good
175:07 - thing I like about the mail trap is
175:08 - again go ahead do a sign up they have a
175:10 - free tier I'm on the free tier I'm not
175:12 - buying it because it's a good service
175:14 - but I'm happy with without buying it for
175:17 - testing we'll be using this email and as
175:20 - soon as you go ahead and create ad inbox
175:22 - it was empty so I added an inbox and
175:24 - simply go ahead and click on this inbox
175:26 - after this and what you'll notice that
175:29 - on the left hand side you get all the
175:30 - Inbox and you get all your Integrations
175:33 - here so you can go ahead and integrate
175:34 - it directly with the curb I'll really
175:36 - like that how thoroughly and deeply they
175:38 - are working on almost every single thing
175:40 - is available for E for us we are using
175:42 - the node Mailer in case you are using
175:44 - play mailer or something for Java or
175:45 - something you can still use it so I'll
175:47 - go with the node mailer and all you have
175:49 - to do is copy this and the good thing is
175:51 - while copying it also copies your
175:52 - password so obviously I'll resetting
175:55 - this one so again this will obviously
175:57 - expose my password as well but again
175:59 - this is just a test account I can reset
176:01 - this reset the credential just a one
176:03 - click not going to be bothering it much
176:05 - now one more thing that you should
176:07 - really know about it is let me show you
176:09 - this by opening up the Google and try to
176:11 - search for JS and this will be useful
176:14 - information notice here the URL let's
176:16 - say search question mark Q equals and
176:18 - something now this is a classic
176:19 - JavaScript there is nothing in like too
176:22 - much import important in this case what
176:24 - I'm asking you is how you can actually
176:26 - grab this information how you can grab
176:29 - the URL information now grabbing the URL
176:31 - information requires a couple of things
176:33 - you can grab it from the back end we
176:35 - have already seen that by creating a
176:36 - square bracket ID we can directly prick
176:38 - the params.id that's one way but if
176:41 - you're having this question mark or
176:42 - something like this you can still go
176:43 - ahead and click on inspect and in the
176:46 - console clean this up and we can just go
176:48 - ahead and say window dot location if I
176:53 - can write that and then you can go ahead
176:55 - and look for a search and this gives you
176:57 - the search parameter everything after
176:58 - question mark Q equals and I can go
177:01 - ahead and later on split this up and
177:03 - divide it based on the question marks
177:05 - everything before the question mark
177:06 - after the question mark I can grab all
177:08 - of this data so this is basic that we
177:10 - have now coming back why I'm showing you
177:12 - all of this yes that's a good question
177:14 - that's a very good question let me go
177:16 - back into my helpers where are my
177:19 - helpers and here are my helpers I'll
177:22 - create a new file and feel free to call
177:25 - it Alan thing I'll just call this one as
177:27 - mailer dot TS of course now the reason
177:30 - why I'm showing you this is there are a
177:32 - couple of ways how you can do this for
177:33 - example if you have a domain.com
177:36 - ah come on don't do this domain.com
177:39 - there we go you can go ahead and write
177:41 - something like a verify token and then
177:45 - slash and the token name so whatever you
177:48 - want to write so that's the one way of
177:49 - doing the thing another way of doing the
177:52 - exact same thing is how you craft your
177:54 - emails it will be whole dependent on
177:56 - that and which approach to take another
177:58 - approach is having this
178:00 - again domain.com
178:03 - why are you doing this to me domain.com
178:06 - and then you can write something like
178:08 - this slash
178:10 - verify
178:12 - token and then you can have simply a
178:14 - token question mark token equals
178:17 - whatever the token is now again there
178:19 - are some easier way of doing the things
178:21 - if you do it with the first the first
178:22 - way this is almost looking like
178:23 - domain.com profile and then send this so
178:27 - we can extract it directly with the
178:28 - params params ID so we have the square
178:30 - bracket syntax we studied about it and
178:33 - this is also the syntax which we just
178:35 - studied that we can actually grab it
178:36 - anything that's a question mark and then
178:39 - token equals all of that we can extract
178:41 - that by using window.location.search
178:43 - this second approach is better for me if
178:45 - I am actually using a client component
178:47 - this approach is better for me if you're
178:49 - if I'm doing everything from the server
178:51 - component there is no right and wrong in
178:53 - this one so again make sure you choose
178:55 - whatever you are choosing a little bit
178:57 - wisely will make your life easier and
178:59 - again it's it's not like that hey this
179:01 - approach is not possible in the printed
179:02 - it is possible but easier way and making
179:06 - yourself an extra travel that's up to
179:07 - you all right so we have already
179:09 - installed the package of node mailer we
179:13 - actually talked about that in the
179:14 - earlier so we'll be just grabbing the
179:16 - node mailer we also need to grab the
179:18 - user I usually don't do this because I
179:21 - like to send the token and everything
179:23 - and update the information directly from
179:26 - the controller where I'm writing but in
179:28 - this case we'll be actually doing a
179:29 - little bit different so just bear with
179:31 - me for a minute
179:33 - all right so we'll be getting the user
179:37 - come on from
179:39 - and we'll be using command at the rate
179:42 - slash come on no suggestions
179:46 - models and then this is
179:49 - slash
179:51 - user model there we go this is the file
179:54 - name and also we'll be encrypting this
179:56 - so we'll be needing be correct Js
180:01 - that's coming up from B group J so these
180:03 - are the libraries that we'll be needing
180:04 - now first of all let's learn how we can
180:06 - send an email now sending the email is
180:08 - actually super easy if you'll go on to
180:09 - the node mailer website you'll see that
180:12 - hey is it that simple
180:14 - yeah it's actually that simple so if I
180:17 - go ahead into npm install node mailer we
180:19 - already did that and all it takes here
180:21 - is example so in this example you can
180:23 - see we create a transporter which
180:25 - actually is nodemiller.create transport
180:27 - in this you provide your host Port
180:29 - secure authentication which will grab
180:31 - all the details uh from our SMTP host
180:34 - which is mail trap and then you simply
180:36 - go ahead and provide some options in the
180:39 - send mail so these are all options we'll
180:41 - actually create these options outside so
180:42 - it's much more easier from to subject
180:45 - text HTML so you can just provide
180:47 - everything and that's it that's await
180:50 - dot send mail that is all provide the
180:53 - option so two lines of code first is
180:55 - provide the create transport and then
180:57 - this transport can just send the email
180:59 - with the options yeah literally that
181:01 - simple so this is all what we have as of
181:04 - now let's go back and see that how we
181:05 - can try this let's create a simple
181:07 - function and call this one as send email
181:09 - which is perfect in this case and
181:12 - obviously this is going to be a sync
181:15 - and what information you will be taking
181:17 - from the user that is a big big question
181:20 - now what information do I expect from
181:22 - the user first and foremost I expect
181:24 - that he'll be sending me the email where
181:27 - do I want to send this email obviously I
181:29 - need to know that then optionally you
181:31 - might use the same file for sending the
181:34 - email for verify token for forgot
181:36 - password as well so both the tokens can
181:38 - be sent and right now we'll talk only
181:40 - about the verify but I'll still walk you
181:42 - through with the code that can be there
181:44 - for detecting the email type and all of
181:47 - that in this case we have just two but
181:48 - otherwise I prefer to have an enum for
181:51 - that and based on that I like to check
181:52 - that so I'm telling you what approach I
181:54 - usually use and what I'm using in this
181:56 - case so I'll just have this email type
181:57 - and then also send me the user ID as
182:00 - well without this I won't be able to do
182:02 - much and I'll just go ahead and type any
182:04 - here so that it doesn't bother me much
182:06 - and there we go so this is my basic it's
182:09 - all right email to send where should I
182:11 - send this email email type that is it a
182:13 - verify email forgot password token email
182:15 - or something else like that and the user
182:17 - ID because obviously I need to grab some
182:19 - information from that user so I'll
182:21 - actually use this one as well again it's
182:24 - not super required but I'll actually use
182:26 - it to get some encrypted token all right
182:29 - first and foremost let's go ahead and
182:31 - have the simple try catch the catch part
182:33 - is always the easy so I always take down
182:35 - this one super easy just cast this as
182:38 - any I don't know what the error type is
182:40 - and then simply go ahead and say Throw
182:42 - new and we'll be saying error.air
182:45 - message not much worried not much
182:47 - bothered about it the first step is now
182:49 - if you remember from our excalib draw if
182:52 - we have this
182:53 - yeah here we have
182:55 - if you remember I told you that we need
182:58 - this hashed value now this hashed value
183:00 - can be generated by a variety of means
183:02 - and variety of encryption rounds as well
183:05 - decrypt.js helps us to do all of this
183:07 - but right now we don't have this so how
183:09 - we can actually go ahead and get the
183:11 - value so it's super simple we are using
183:13 - the user ID So based on the user ID we
183:16 - have to provide some string that can be
183:18 - encrypted around so obviously there is a
183:19 - requirement for this you can go ahead
183:21 - and give him any gibberish which doesn't
183:24 - really make sense but you can you can
183:25 - there is nothing which is stopping you
183:27 - so all you have to do is simply ask
183:29 - becrypt JS that hey bcrypt.js I need a
183:32 - hash value yep that's it and in the hash
183:35 - value you have to provide that hey uh
183:37 - what should I use to do the hash value
183:39 - like what am I encrypting what is the
183:41 - string that I'm encrypting you can give
183:42 - any string because it doesn't have a
183:43 - meaning it just in the database we want
183:45 - to match it but in this case I want to
183:47 - actually provide the user ID
183:49 - and then you have to provide what number
183:51 - of rounds that you want to go so I will
183:53 - just go ahead and go with the 10 rounds
183:55 - and that's it that is all I'm doing now
183:57 - I don't have a guarantee that this user
183:59 - ID is going to be string or not because
184:01 - there is a chance that user might throw
184:02 - up directly me uh mongodb bson ID almost
184:06 - like Json but bson so I'll just go ahead
184:08 - and just use a simple two string method
184:10 - on top of it so that I'm 100 sure of it
184:13 - now let's go ahead obviously this will
184:15 - take some time because we are using 10
184:16 - rounds of encryption so let's await this
184:18 - and call this one as const
184:22 - hashed token
184:25 - all right so the token generation part
184:27 - was super easy there is nothing I'll
184:29 - just write the comment here as well that
184:32 - will be create a
184:34 - hashed token all right so this part was
184:37 - super easy now the next part is actually
184:39 - tricky now I want to update the user I
184:43 - want to find a user and in case you
184:45 - forgot that let me go ahead and open the
184:47 - model for you we have this uh thing
184:49 - forgot password token verify token and
184:51 - all these so I want to add these things
184:53 - into the token all right so how am I
184:56 - going to do this again this is super
184:58 - super simple there is nothing to be
185:00 - worried but there is something known as
185:02 - email type and based on this I want to
185:04 - update so first let's update with
185:05 - regardless of what the email type is so
185:08 - I'm going to go ahead and await this
185:09 - obviously a database operation database
185:12 - is another card to then so I'll go ahead
185:14 - and say user and then user can actually
185:16 - run a find by ID and update for this I
185:20 - have to provide the ID so I do have the
185:22 - user IDs so super helpful here as well
185:23 - and then I can put up a comma and then I
185:27 - can just use the verify token so what
185:30 - I'll do is the next thing is actually
185:32 - suggestion is really nice here okay uh
185:35 - so what I can do is let me just go ahead
185:37 - and hit and enter here this is fine so I
185:40 - am first of all having this reset
185:42 - password token no I'm not as uh I don't
185:44 - want this I want the verify token to be
185:46 - updated first so I'll just go ahead and
185:48 - update the values so this is my verify
185:50 - token and obviously if the time is for
185:54 - that expiry time should be for the
185:55 - verify token time as well so I have this
185:57 - so the verified token that we have is
186:01 - getting this hash token that's exactly
186:03 - what I want first make sure you
186:05 - understand this part find by ID looks
186:08 - for an ID and update the values and user
186:11 - ID is the ID which you will be looking
186:13 - for hunting the record in the database
186:15 - and then only these fields will be
186:17 - updated not all the fields so verify
186:19 - token will get this new hash token
186:21 - verify token expiry will get the date
186:23 - dot now and then these values if you
186:25 - don't understand this that's okay it's
186:27 - nothing much more we are giving it 36 so
186:29 - it's in milliseconds or you know 36
186:31 - hours and all of that so in case you
186:33 - want that you can just do it uh like how
186:36 - many hours 24 hours into converted into
186:38 - minutes and hours and all of that I'll
186:40 - not go into that much of detail in depth
186:42 - that's very basic now you can actually
186:44 - go ahead and say new equals to true and
186:46 - all of this we don't need this third
186:47 - parameter although that's nice but I'll
186:49 - talk more about that in some another day
186:51 - right now that's not important for us
186:53 - this will do the job for us and we are
186:55 - happy with this okay now this is all
186:57 - happening when I'm assuming that my
186:59 - tokens are getting updated for verify
187:01 - token but what if the email type is for
187:04 - another one which is forgot password
187:06 - token obviously this is the token part
187:09 - of it you need to grab the password from
187:10 - the request body and have to submit that
187:12 - as well that's that's a different case
187:13 - but actually I can just entirely cut
187:16 - this out and just write a simple if Case
187:18 - to understand that what type of email
187:20 - you are sending me up so if the email
187:22 - type and again I usually do that with
187:25 - the enum but in this case I'll just go
187:26 - ahead and do capitalize of that if the
187:28 - email type is verify then I'm going to
187:31 - do all of this now in case
187:34 - else if
187:38 - the email type
187:41 - is actually other one which is the reset
187:44 - password or I'll just use the reset
187:47 - reset then in this case I'm going to
187:50 - paste this again but I have to change
187:51 - the values in that case I'll just go
187:54 - ahead and use forgot password token
187:56 - forgot password token and of course the
187:58 - expiry will also be the forgot password
188:00 - token expiry
188:03 - again really simple code but again we
188:05 - have just modified this now this email
188:07 - is usable for both the context and we
188:09 - can just we are just generating the
188:11 - token based on that so that's super
188:12 - simple now next part is this is all the
188:15 - settings that we are doing already in
188:16 - the database so the value by the time
188:18 - this method is called the value should
188:19 - be there in the database now again there
188:21 - are lots of good approaches of handling
188:23 - this scenario maybe you don't want to
188:24 - send an email until unless all the
188:26 - values are set in the database there are
188:28 - a lot of use cases of that I'll not go
188:29 - into that one then the next step that we
188:32 - saw is use this node mailer
188:34 - and create a transport so node mailer
188:37 - dot create transport
188:40 - create
188:42 - transport there we go and we'll store
188:45 - that into a variable as well we'll call
188:47 - this one as transporter
188:50 - just like this
188:52 - and there we go we'll just end it like
188:54 - this there we go
188:56 - now what are all the options that are
188:59 - required here notice here it says
189:00 - Service Gmail we won't be using Gmail
189:02 - instead what we're going to do is go on
189:04 - to mail trap and we'll just copy all of
189:07 - this so all this transport in fact we
189:08 - could have copied this earlier and grab
189:10 - all of this so I'll just go ahead and
189:12 - paste it like this notice here all of
189:14 - the password and everything are there
189:15 - these are random password doesn't really
189:17 - bother much but similarly you can have
189:19 - these host and everything for other
189:20 - domains as well like for Gmail there's
189:22 - different port number obviously the
189:24 - author and password I don't want to
189:26 - display my password here again you can
189:28 - put this into your process.env file as
189:31 - well that's totally you usually we go
189:32 - ahead and put this so I'm going to go
189:34 - ahead and put up a to-do here
189:36 - and add these uh
189:40 - credentials to EnV files so that's a
189:43 - to-do for you you can actually go ahead
189:44 - and do this now this is ready now the
189:47 - next option that we saw in studies was
189:48 - creating a mail options you can create
189:50 - it on the go as well but I'll just go
189:52 - ahead and create these mail options just
189:53 - like this now in the mail options we
189:56 - have couple of things that we can get
189:57 - first is from email so whatever Reserve
190:00 - from email you can go ahead and do that
190:02 - I'll just go ahead and say hitesh at the
190:04 - rate gmail.com which is not my email
190:07 - come on there we go
190:10 - and I'll just put up a comma Now the
190:13 - next is two emails so two is email whom
190:15 - to send email we are already taking that
190:17 - as an input in the parameter so I'll
190:18 - just go with that and then after this we
190:21 - also need to have a subject now the
190:24 - subject can be just directly verify your
190:26 - email or you can actually go ahead and
190:28 - use that what kind of email is actually
190:30 - coming in so I'll just cut this out and
190:33 - I'll test it based on the email type so
190:35 - email type
190:36 - if email type is verify we'll say verify
190:39 - your email otherwise we'll say reset
190:41 - your password so again we can just use
190:43 - these smaller variables now how the
190:45 - email is being crafted actually I have
190:47 - written it already so that we can
190:48 - discuss this so there we go
190:51 - so as we saw uh directly we don't have
190:54 - hash token
190:55 - hush oh hashed token
190:58 - hashed we missed an edge almost all
191:01 - replace I'll update this
191:04 - hashed token small typo
191:07 - there we go and we need to use hash
191:10 - token or we have hash token here
191:13 - and I think here also and now it should
191:16 - be happy here as well okay so what we
191:18 - are doing is we are simply providing an
191:20 - email which is saying click on this
191:22 - domain to verify your email or to reset
191:24 - your password and notice here this is
191:26 - going to process.env.domain the domain
191:28 - name we have already set in environment
191:30 - variable so it will be directly like uh
191:32 - HTTP colon slash localhost colon 3000 in
191:36 - case you deploy it on the domain just
191:38 - environment variable needs to be updated
191:40 - and then verify email question mark
191:42 - token equals to Hash token so this will
191:44 - be our email that we'll be having all
191:46 - right that is all what we need the last
191:48 - thing is to Simply send email with these
191:50 - mail options so that's all again this
191:52 - takes some time so transporter will send
191:54 - an email with all the mail options and
191:57 - you can go ahead and store this mail
191:59 - response
192:02 - just like this and after this you can
192:04 - simply go ahead and return this if you
192:07 - wish
192:08 - totally up to you uh so we got this one
192:11 - let's see what all so this one is also
192:14 - saying hey cannot find a declaration
192:16 - file of this one we'll just probably
192:18 - install this types as well so that we
192:20 - get rid of these errors
192:22 - all right so quite a lot of detail
192:24 - talked about the mailer and how the
192:27 - mailer is going to work now once the
192:29 - mailer is done all we have to do is
192:31 - first create a page or we can first ah
192:36 - now that's a confusion should we take
192:38 - down first the apis or should we first
192:39 - take down the front-end page let's take
192:41 - the apis first I think that makes sense
192:44 - so in this inside the user we will be
192:47 - simply now again based on where you are
192:49 - landing the user your route should be
192:51 - according that but in this case now my
192:53 - bad I'll take that back so in this case
192:55 - the route doesn't really matter it can
192:57 - be any route we need to just create a
192:59 - front-end for verify email for that in
193:02 - the back end my API request could be
193:03 - anywhere because once I land there then
193:06 - I'll use a use effect hook to fire a
193:09 - request okay I'll do it that way
193:11 - so I'll just right click and create a
193:13 - new folder and this folder will be
193:15 - simply
193:17 - verify email
193:19 - verify email verify token yeah totally
193:22 - up to you I'll just right click create a
193:25 - new file and we'll just go ahead and say
193:27 - route dot TS now inside the route.ts
193:30 - we'll have just the request response we
193:33 - have to connect with database as well
193:34 - because we'll be updating some fields in
193:35 - the database as well and uh
193:38 - already things are there in my database
193:41 - so I need to extract the values by
193:43 - searching through the token all right
193:45 - so I'll first and foremost will be
193:47 - connecting to
193:50 - connect connect no option for Connect
193:55 - nope don't want that
193:59 - add the rate
194:00 - slash and this one is config dbconfig
194:03 - slash dbconfig
194:06 - all right so no matter what happens this
194:08 - needs to connect so I'll say that hey
194:10 - you connect so database is connected now
194:11 - we don't need any async or anything like
194:13 - that we'll be needing the next response
194:16 - and request all of that
194:18 - so we'll be saying next
194:21 - request
194:22 - and next response
194:26 - and we'll be needing user as well
194:27 - because I want to perform a search so
194:29 - I'll just go ahead and say hey give me
194:31 - the user from model user model all right
194:33 - that's great now once the database is
194:35 - connected then I can go ahead and Export
194:37 - My Method so I'll say export
194:40 - async
194:41 - uh no not like that a sync function come
194:46 - on
194:47 - if I can write that that would be great
194:50 - function and this will be a post method
194:53 - obviously because we are retrieving some
194:55 - data or not
194:57 - request that will be of type of next
195:00 - request
195:01 - and there we go
195:03 - all right first try catch we should have
195:06 - created a wrapper around it because this
195:08 - is too many try cash in the entire but
195:10 - again what can we do now after this I'll
195:12 - just scroll this a little there we go
195:14 - let's return uh next response with again
195:19 - dot dot Json come on
195:23 - response.json there we go error messages
195:27 - and there should be a status code as
195:30 - well
195:34 - yeah that is the one that I'm looking up
195:36 - for
195:36 - and now next up is first and foremost
195:39 - let's grab some of the tokens so we'll
195:41 - be grabbing the token from request.body
195:44 - so const and request body and await
195:49 - request.body.json app that's
195:51 - request.json directly
195:55 - there we go okay now once this is there
195:58 - I know that there will be a token coming
195:59 - up for me so I'll just go ahead and
196:01 - extract this token now this is an
196:03 - approach where I'm using that there will
196:05 - be a front-end call who will be making a
196:07 - call to the API and will be able to
196:08 - handle this again this could have taken
196:11 - a different route if in the verify email
196:13 - I directly create a ID the square
196:16 - brackets an ID or maybe a token with the
196:19 - name of token so I can directly extract
196:20 - a colon token there so again both
196:23 - approaches are correct there is nothing
196:24 - wrong or right like that I would also
196:26 - like to see if this token is actually
196:28 - coming into this it helps me to debug
196:30 - that later on
196:33 - so there we go now I can see whether the
196:35 - token is coming it or not I have to find
196:37 - a user based on the token just like I
196:39 - can find a user based on email I can
196:41 - find a user based on the token as well
196:43 - so I'll say find one yeah find one that
196:47 - is fine
196:48 - and this one this time will be finding
196:51 - based on the token and whose time is
196:54 - greater than now so obviously if the
196:55 - token time has expired in the past
196:57 - whatever the time I have set there I
196:59 - don't want that so two condition needs
197:01 - to be true now I have to find the token
197:03 - as well and verify token expiry should
197:07 - be like that so verify token expiry
197:09 - comes from the model itself so if I go
197:11 - ahead verify token expiry this should be
197:14 - greater than what's the current time is
197:16 - so obviously in the future I can verify
197:18 - if it is already in the past I cannot
197:23 - sorry uh
197:25 - little cold here but again don't mind
197:27 - that sorry I cannot edit them out
197:30 - all right so now if it is there
197:32 - obviously that needs to be a weight
197:35 - and what else we will be storing that
197:38 - into a user
197:40 - all right
197:42 - all right good and nice now what else I
197:45 - can do if I don't find any user in that
197:47 - case I need to take care of that
197:49 - scenario
197:50 - so if there is no user
197:53 - then in that case return a next response
197:56 - Json error invalid token yeah that
197:59 - that's a good response or we can say
198:01 - invalid token or we can say user not
198:04 - found yeah that's the debate but we will
198:06 - not go in that debate and now here I
198:09 - would like to do a console log that
198:10 - whether I'm getting this user or not
198:12 - because it will help me to debug later
198:14 - on I can remove them but I'll just keep
198:15 - it here for you to Simply have this now
198:18 - there are a lot of ways how you can
198:19 - actually now update this since you have
198:21 - this user actually you can utilize this
198:22 - user but in case you want to make
198:24 - another database call you have verified
198:26 - it now now you can make another database
198:28 - call to update this you can use this
198:30 - Capital user but I will not do it
198:32 - because I already have a reference of
198:34 - this user which is a return from this
198:36 - user object so it also has some of the
198:38 - superpower so I can go ahead and simply
198:40 - say user dot is verified so I found the
198:43 - token I found the user everything is
198:44 - okay so I need to update it not only
198:46 - that I have to flush out my verify token
198:50 - as well as the time as well otherwise
198:52 - the time will always be there there's no
198:53 - point of keeping the unnecessary data
198:56 - and after that I'll just say a weight
198:58 - and then user.save this await is super
199:00 - important because it will take some time
199:02 - to update this and now we can actually
199:04 - be all happy now once this is done we
199:06 - can simply go ahead and say return next
199:08 - response and we can probably redirect no
199:12 - I don't want to redirect the redirection
199:14 - should be a job of front-end guys so
199:16 - I'll not do this next response will just
199:18 - send a Json response
199:20 - he can actually do things based on the
199:22 - response
199:23 - so message email verified status is
199:26 - success I'll actually use different
199:28 - messages
199:29 - and I'll say message email verified and
199:32 - success
199:35 - suggestions success true there we go
199:38 - forgot the comma there we go all right
199:40 - so in theory now it actually works
199:43 - everything works in theory all right so
199:46 - this should be all okay now we should be
199:49 - able to send and fire an email
199:52 - okay so how you are going to send an
199:54 - email now that's that's a big question
199:57 - so I think the email should be a part
200:00 - when somebody is actually signing up
200:02 - when somebody sign up we can actually
200:03 - give him a message or we can give him a
200:05 - button as well that hey get your email
200:06 - send write your email and we can provide
200:09 - another page for it but I think in this
200:10 - case I'll just send him an email
200:12 - whenever he signs up so that makes sense
200:15 - otherwise we have to write another page
200:17 - button don't want to do that okay where
200:19 - it should be it should be a last job so
200:22 - user is saved in the database before
200:24 - sending a response we have saved the
200:26 - user here before sending the response
200:28 - let's send him an email send
200:31 - verification email so how do we do that
200:34 - now we can bring this send email so I'll
200:36 - just wait for it and we'll say send
200:38 - email so we can bring this up hopefully
200:41 - the import is done
200:42 - send email helper Sim mailers okay
200:44 - that's good and there we go we can send
200:47 - an email so already this is the email we
200:50 - have extracted from the user body so
200:52 - this will be used as to whom I want to
200:54 - send email the email type is verify so
200:57 - it's it's really bad to see this string
200:59 - in the all caps here there should be an
201:02 - environment variable or an enumeration
201:03 - or a constant file for that but anyways
201:05 - I'll be just happy with this and what
201:08 - would be the user ID so now we have
201:10 - saved the user so this is now useful for
201:12 - us and we can extract and underscore ID
201:13 - from it and I think that is it now in
201:17 - theory at least it should be saving uh
201:20 - sending me an email all right how many
201:21 - errors ah nothing so far surprising
201:25 - let's see how we can actually register
201:28 - another user so I think this is it yeah
201:32 - let's go ahead and go and visit the
201:35 - profile if we still have a user yep
201:37 - nothing
201:39 - okay oh we have to get the user details
201:41 - and we'll log out so now there is nobody
201:43 - let's try to sign up another user how
201:45 - many users we have we have one we have
201:48 - two time for three
201:50 - so this will be three this will be three
201:53 - at gmail.com and this will be one two
201:56 - three four five six we can put some a
201:59 - validation for password as well but we
202:01 - will not do it right now let's try to
202:03 - sign up processing
202:05 - command do it the first time it's little
202:07 - bit slower
202:09 - ah there we go now in theory we should
202:12 - have something in the mail trap there we
202:14 - go three gmail.com all right so these
202:16 - are testing email now notice here when I
202:18 - click on this uh verify email
202:21 - I can actually right click and
202:24 - ah there should be a link
202:28 - oh there is a link but this link is
202:30 - blocked probably that's really bad we
202:34 - need to gra get this email directly so
202:36 - that somebody can copy paste in the
202:37 - browser as well uh we need to try it
202:40 - again in the mailer as well let's go in
202:42 - the mailer this might happen to you as
202:44 - well so nothing wrong
202:46 - okay
202:48 - so this is email
202:50 - this is somebody writing up here so
202:53 - we'll just enter
202:55 - here
202:57 - and we'll say
202:59 - r
203:01 - copy
203:03 - paste the link below in your browser
203:06 - I think that's good
203:08 - and we'll add a br
203:13 - and there we go so now I think it should
203:16 - be much better so that somebody at least
203:18 - can copy and paste the link uh this way
203:21 - okay uh I need to sign it up again I saw
203:23 - this this doesn't expose any email or
203:25 - something like that so we'll just do
203:26 - this now in the meantime where we are
203:29 - here we are we can actually delete this
203:32 - ah how do we delete it we can delete
203:35 - this confirm I want to delete it let's
203:37 - go back here and we have three time for
203:41 - four time for registration of the four
203:45 - okay we don't need this we can come back
203:48 - here sign up sign up the four
203:52 - four and we'll get 4 at the rate
203:55 - gmail.com
203:58 - and one two three four five six
204:01 - sign up
204:04 - and taking some time that's ok we got
204:06 - the processing here all right now let's
204:09 - see where we have this mail trap okay
204:11 - forgot here and this time hopefully
204:14 - we'll get better
204:15 - and Yep this is much better
204:18 - oh we got some issues here which was
204:21 - saying your browser dot undefined then
204:24 - verifies so probably because it was a
204:27 - local host that's why it's creating some
204:28 - issues because I think process.env ah my
204:32 - bad my bad my bad actually I know I know
204:34 - why it is giving us an issue because if
204:36 - I go ahead and check out my sample EnV
204:38 - the domain is all caps so it's not an
204:41 - issue it's actually an issue but anyways
204:43 - it's good to have the text link as well
204:46 - so it should be domain my bad I'm
204:49 - referencing the wrong variable there
204:52 - uh that's good
204:54 - all right save this and this should be
204:56 - all good this is how real world
204:58 - development works it breaks it fails
205:01 - uh let's let's go ahead and register
205:03 - another user now
205:05 - sign up it's time for five
205:09 - five and then we will have five at the
205:12 - rate gmail.com and one two three four
205:15 - five six
205:16 - sign up processing at least our emails
205:19 - are shooting that's we're happy but we
205:21 - have limited emails as well we cannot
205:24 - just go all crazy so five and five Where
205:28 - You Are
205:29 - okay there we go all right good and now
205:32 - we can click even on that I'll not click
205:34 - on this but I can actually copy paste
205:36 - this entire thing we have the token and
205:37 - everything nice but if I'll do this we
205:39 - don't have a page which goes on to slash
205:42 - verify email and again now you can see I
205:45 - can just provide a link of Slash verify
205:47 - email slash and whatever the long string
205:49 - and I can extract that that's easy but
205:51 - we don't have we don't have the front
205:53 - end part of it so it's time and by the
205:56 - way everything is also dumping down here
205:57 - as well so that's also nice that we have
205:59 - got all the five four all the emails
206:01 - email is going there username everything
206:04 - let's also verify in the database as
206:07 - well refresh where are you
206:10 - where is the refresh option
206:13 - there is somewhere refresh here it is
206:15 - refresh option so I want to check
206:16 - whether this tokens and everything is
206:18 - getting to my database also
206:20 - here we can see verify token and expire
206:23 - is also getting up here all happy all
206:25 - good that's good that's good okay
206:28 - now what we can do is
206:31 - next up is okay we need to create a
206:34 - front end for it so apis you can go
206:35 - minimize and I now need to create a a
206:39 - simple route on the front end or the
206:41 - pages which can actually do this so I'll
206:43 - just close everything that's already too
206:45 - confusing all right sign up verify this
206:49 - is inside the API I need to create a
206:51 - route for the pages which will be verify
206:54 - email
206:55 - and again it needs to be exactly same as
206:57 - what you are crafting your url so I am
206:58 - crafting this verify email so somebody
207:00 - will land up here I'll copy this go back
207:03 - and inside the app I'll create a new
207:05 - folder the name of the folder will be
207:07 - verify email that's exactly and of
207:09 - course I know what will I be creating
207:11 - the file name with this which will be
207:13 - page dot TSX
207:17 - okay now this is a little bit tricky
207:19 - that how we are going to create this
207:21 - verify page there is a little bit
207:23 - involvement here first and foremost this
207:25 - will be use client that I know for sure
207:28 - use client there we go we need couple of
207:31 - imports so axios obviously will be there
207:34 - xeos from xcos and we'll be needing the
207:37 - link to redirect the user as well
207:39 - probably
207:40 - not I will still get this
207:43 - so we'll have this link from next link
207:45 - and we'll be needing some use effect
207:47 - Hooks and stuff like that so let's
207:48 - import them so this will be coming up
207:51 - from react and we'll be needing use
207:54 - effect is the one that I am looking up
207:56 - for first use effect I'll anyway I'll be
207:59 - using reuse State as well so let's bring
208:00 - that and I think that's that's all
208:04 - majorly I'll be needing router will be
208:06 - needing it probably not
208:07 - anyways so let's go ahead and Define
208:10 - export default function verify email
208:13 - page we don't need any props in here we
208:16 - can just go ahead and just close it like
208:18 - that verify email page we don't have
208:20 - props otherwise it would have any props
208:22 - we can just extract it like this params
208:24 - IDs just like that basics
208:26 - okay we don't have it right now so we'll
208:28 - just go ahead and escape this and now
208:31 - first of all I will grab some tokens so
208:33 - I need to store that token somewhere so
208:35 - we need a state for that so we'll just
208:37 - say token set token and this will not be
208:40 - a string will not use the typescript
208:42 - functionality here we'll just keep it
208:43 - empty you state that's like and then
208:46 - based on user is verified or not I'll
208:49 - show him some messages as well so either
208:52 - I can just create a message like this or
208:55 - I can create a variables like booleans I
208:57 - can use them to verify not verified or I
208:59 - can use a message for the same so it's
209:01 - totally your choice I think I'm going to
209:03 - choose with the verify email so I'll
209:05 - just say verified set verified and by
209:08 - default it will be false
209:10 - also we can grab some errors as well
209:12 - maybe there are some errors on the page
209:13 - so we'll just grab them as well error
209:15 - set error I'll just use the booleans for
209:17 - that as well
209:18 - right now there is no error all right so
209:20 - these are my data now how can I verify
209:22 - this obviously in order to verify I'll
209:24 - need a method
209:26 - and I'll call this one as verify user
209:29 - verify user email that's fine it will
209:34 - obviously be a sync so there is no doubt
209:36 - about that we need to set up an request
209:39 - to an API so let's go ahead and do a try
209:42 - catch for that
209:44 - and in the catch part
209:46 - we'll just set the error
209:48 - with the error or true yeah true because
209:51 - we are using Boolean and then we can
209:54 - just do a console log as well so that we
209:55 - can at least see what's going on wrong
209:57 - so error
209:59 - we can actually go ahead and get error
210:00 - Dot
210:01 - response because it will be because this
210:04 - is going to get an XTO so xeos might
210:07 - throw up some depth so response.data all
210:10 - right for this we need to cast this
210:12 - error as any otherwise it will not work
210:15 - okay now next up is sending a request
210:19 - from xcos okay all right axios will send
210:22 - a post request did we made it post did
210:25 - we made it post let me verify that again
210:28 - yeah we made it post we made it post
210:31 - so axials.post and where do you want to
210:34 - send this request slash API slash users
210:39 - slash notice here the suggestions are
210:42 - absolutely horribly wrong we need to get
210:44 - the verify token I'll verify email
210:48 - what is happening to my memory
210:51 - and this is what we have what we are
210:53 - expecting we are expecting a token there
210:55 - and the request is obviously verify
210:58 - email should have seen that already
210:59 - verify emails what we are bringing along
211:01 - with us a token so let's go ahead and
211:03 - grab this token this token is given to
211:06 - us directly by this estate so that's
211:08 - nice let's go ahead and wait for this
211:13 - a wait for this one and that's it once
211:15 - everything is all done then we can go
211:17 - ahead and simply say set verified to be
211:20 - true otherwise it is already false so
211:22 - that is all my method is going to be
211:24 - doing
211:25 - all right so now the problem is when you
211:28 - will be running this thing and I'll
211:31 - write some of the controversial code
211:33 - here okay so how you'll be or when
211:35 - you'll be running this obviously we'll
211:37 - be using use effect for this
211:39 - and for this we are dependent on nothing
211:41 - so we want to as soon as somebody lands
211:43 - on this we will be running this but I'll
211:45 - just do a small check whether there is a
211:47 - token or not and all of that so if
211:49 - uh I'll just check if the token dot
211:53 - length because it's a string so I can
211:54 - access its length is greater than 0 then
211:57 - go ahead and run this verify user I
212:00 - actually don't like this way because
212:01 - it's less readable I prefer this
212:03 - whenever students actually watch this
212:04 - they find it more easy readable so I'll
212:06 - go with that okay there is another use
212:08 - effect that I am going to run again you
212:11 - can write this yeah that's Advantage you
212:13 - can go a little bit sloppy with the next
212:15 - JS it actually do all the optimization
212:18 - do duping a lot of things of the request
212:20 - I don't have to worry too much okay so
212:22 - this is what we'll be doing another
212:24 - thing which I want to do is going to be
212:26 - dependent on the token
212:29 - so any change in the token will actually
212:32 - no I'm actually bad any change in the
212:35 - token should actually run this one okay
212:38 - this one we'll talk about that in a
212:40 - second I'll just go ahead and remove
212:42 - this so let me tell you what is
212:43 - happening here
212:44 - this is the dependency array of use
212:47 - effect so use effect is a hook which
212:48 - automatically runs it runs first time
212:50 - when the page loads there are a couple
212:51 - of other ways but will not go into that
212:53 - much it actually automatically runs as
212:55 - soon as somebody comes on the page but
212:57 - if somebody comes on the page and there
213:00 - is any manipulation in the token then
213:02 - also it will run now right now nobody is
213:04 - filling up my token notice here there is
213:06 - no code here which is actually filling
213:08 - up my token the token is empty will
213:10 - always remain empty so I need to grab
213:12 - the information from the URL and update
213:14 - my token as soon as my token is
213:16 - Disturbed that's when this dependency
213:18 - array is going to say hey something is
213:20 - Disturbed which is mentioned in the
213:22 - dependency array and I'll run this piece
213:23 - of code that's the whole flow now I'll
213:26 - come back here I need to actually grab
213:28 - as soon as somebody lands on my page I
213:31 - want to extract the URL so I'm going to
213:33 - go ahead and say I'll just grab URL
213:35 - token and this URL token we saw this
213:38 - already window.location and then
213:41 - again window dot location
213:43 - dot this will be on based on search once
213:47 - somebody is searching on that I'll just
213:49 - go ahead and split it nice and easy
213:50 - based on equals to and then the left
213:54 - portion will be all zeroth value of the
213:56 - array right portion is my token so I'll
213:58 - be able to extract that not only that I
214:00 - have to set this into the token so set
214:02 - token will get this URL token now as
214:05 - soon as somebody lands on this he will
214:07 - be giving me the token I'll set this
214:09 - token into this this will create a chain
214:11 - of events the token will be updated here
214:13 - this will notify that hey one of your
214:15 - dependencies got updated so run this
214:16 - method so this is obviously going to run
214:19 - this method and that's it so I'll just
214:22 - shrink this I'll shrink this and I'll
214:25 - shrink this the only problem is right
214:28 - now we are not returning anything so
214:30 - there is no page
214:31 - so return and there we go now what do we
214:35 - want to return okay we'll actually
214:37 - return and I have this already with me
214:41 - in my notes yeah I have actually saved
214:43 - this div class it brings everything to
214:45 - the center easy for me okay what do I
214:47 - want to have first of all most I want to
214:49 - have an H1 which will have a class
214:53 - name and we'll be going with the text
214:55 - dash for
214:57 - suggestions please yeah for excel
215:02 - for Excel this will say just the verify
215:04 - email
215:08 - verify email or verify your email now in
215:11 - the H2 I also want to display the token
215:13 - so that I can see whether the token is
215:15 - actually coming in or not so I'll just
215:17 - go ahead and grab an H2 now inside the
215:19 - H2 we'll start our JavaScript and based
215:21 - on whether we have token or not we'll do
215:23 - something if we have token we'll write
215:25 - something otherwise we'll write
215:27 - something that's something we'll write
215:29 - no token
215:31 - okay what do we want to do when oh my
215:34 - bad
215:34 - what do we want to do when the token is
215:36 - there we want to Simply display the
215:38 - token so what we're going to do is
215:39 - instead of this let's use packticks and
215:42 - let's go ahead and dump the token
215:44 - directly
215:45 - and
215:46 - token
215:48 - all right now also let's stylize it a
215:51 - little bit it's class name this one is
215:54 - going to be
215:55 - a little bit of padding padding two uh
215:59 - BG Dash value is orange I like that
216:01 - color
216:02 - orange 500 and the text is going to be
216:07 - black
216:09 - okay that's good now based on whether
216:12 - the user is verified or not we want to
216:14 - show him some text as well so what we're
216:15 - going to do is let's inject the
216:17 - JavaScript directly and we can just go
216:19 - ahead and say verified if he is verified
216:22 - then obviously I want to display this so
216:25 - what do we want to display in that case
216:27 - we'll just go ahead and have a div
216:29 - and in the div we'll just say nice and
216:31 - easy
216:32 - email verified and you can log in I like
216:35 - that I like that and all we need to do
216:37 - is close this div all right that is
216:40 - already good I love these suggestions so
216:42 - in this case if the user is verified
216:44 - then we'll optionally display him that
216:46 - email verified now you can go ahead and
216:49 - proceed to the login page so slash login
216:51 - is there text blue I think that's that's
216:54 - good enough
216:55 - I think what can give us an issue is
216:57 - this a tag because I think this is a
216:59 - wrong usage of a tag this will
217:01 - definitely crash our application so
217:03 - we'll just remove this a tag usage of a
217:05 - tag and the link tag is actually very
217:07 - very dangerous
217:09 - so I'll just go ahead and just clean it
217:10 - up like this that is all good now we can
217:13 - similarly make a copy of this and now we
217:16 - can actually go ahead and paste on the
217:18 - error we can display this
217:20 - so we'll just display that there was an
217:23 - error
217:25 - and then we can just ask him to do
217:28 - nothing we don't want to show him
217:30 - anything the text is to Excel and the
217:33 - color will be
217:34 - BG Dash
217:36 - red
217:38 - 500
217:40 - and
217:42 - yeah the text is default going to be
217:44 - white but that is ok
217:46 - I'll I'll convert that to Black
217:49 - okay so I think that is it now we can
217:52 - actually verify and go on to this page
217:54 - if it works in theory at least
217:58 - so now can I go to the verify page oh by
218:01 - the way by the way one thing I forgot
218:02 - almost I
218:04 - I think we need to actually do something
218:06 - more
218:07 - verify email
218:10 - and if I go ahead and look onto this
218:12 - notice here I go and go back so notice
218:15 - it says I cannot read the property of
218:17 - undefined so if token length is 0
218:20 - we shouldn't be running this so
218:22 - obviously we need to verify there are
218:24 - some of the steps
218:26 - undefined reading lengths so let's go
218:28 - back
218:30 - so what we are doing is the token is
218:32 - right now empty string so that is
218:34 - creating some of the problems and issues
218:36 - on this page all right so let us take
218:38 - care of this you state is empty
218:41 - and at the token length here we have the
218:44 - token length is less greater than zero
218:46 - then only run this
218:48 - okay this should be okay verify user
218:51 - email and what in the case we are not
218:54 - able to grab this token all right so in
218:58 - that case right now this is setting it
218:59 - to undefined that is the problem so
219:02 - let's use an or statement to set it as
219:04 - back to the empty string
219:07 - come on all right so this should be much
219:10 - better approach okay there we go now we
219:13 - have fixed this small bug happens so
219:15 - right now there is no token
219:17 - ah but there is a problem we should
219:19 - actually fix that up into the middleware
219:22 - also because remember you always and
219:24 - always will forget about the middleware
219:26 - that hey where the things are actually
219:27 - matching so go back onto the code part
219:29 - open up your middleware and also add
219:32 - this URL here although we are not
219:34 - matching it up with anything but I think
219:36 - I'll add this one
219:38 - verify
219:42 - email
219:44 - now as of now this is okay I'll just
219:46 - save this but later on maybe I want to
219:48 - add this to public pay so that everybody
219:50 - can actually access this otherwise if I
219:53 - add this here it will not be verifiable
219:55 - I'm not tracking this if you don't add
219:57 - it here that's not being tracked so I
219:59 - want to call this as public page so even
220:01 - if you don't have token you can actually
220:03 - go ahead and access this so I'll just
220:05 - add that hey path dot verify email that
220:08 - is also allowed
220:10 - to be visited without the token so
220:15 - so if the path is there so this is the
220:18 - public path let me just check this again
220:20 - public path and token so redirect here
220:23 - if there is not public path and the
220:25 - token is not there
220:26 - if the public path is not there in the
220:29 - token so I think this is good all right
220:31 - I am re-evaluating the things so let's
220:33 - go back can I still access this yes I
220:36 - can still access this okay now it's time
220:38 - that we verify the email our
220:40 - verification should happen now I can
220:43 - just go ahead and click on this in
220:45 - theory and it should verify this
220:47 - and we are not actually bringing the
220:49 - tokens so sometimes what happens is when
220:51 - you click on this in the URL and stuff
220:53 - your question mark token all these
220:55 - things are not being traversed via the
220:58 - browser that is why this issue actually
221:00 - happens that's why a lot of companies
221:01 - give you this or you can actually
221:03 - provide a better URL notice here there
221:06 - is a dollar and all of that so that
221:07 - sometimes gets into spam so you can go
221:10 - ahead and use this as link I can go
221:12 - ahead and use this so I'm not able to
221:15 - grab the token so why is it happening
221:19 - okay so I'm going on to the verify
221:23 - verify email uh my bad
221:27 - so I'm just saying verify email question
221:30 - mark token uh now we got the token this
221:33 - is a common issue that you are going to
221:35 - see that when you are actually doing the
221:37 - development in the next JS this is a
221:39 - common issue the development is so slow
221:41 - that sometimes it takes time so yeah
221:43 - this happens now let's see if we are
221:45 - able to verify the user
221:47 - ah let us refresh this and whether
221:50 - everything got clean got a clean up or
221:52 - not
221:53 - let's see let's see come on give me that
221:56 - okay I can see that the 5 is verified is
222:01 - false
222:03 - uh is verified is still false for the
222:05 - five and we're actually verifying which
222:08 - email
222:09 - let's just check
222:11 - okay so probably there is some issue in
222:13 - the mail trap we are verifying the five
222:15 - so five I think the rest of the things
222:18 - are going great let's see
222:21 - is verified false
222:25 - okay so we got the password is verified
222:27 - false the token verify token everything
222:30 - got here nicely let's see that if we
222:34 - grab the token what we are doing in our
222:35 - apis so this is the job of our API to
222:39 - actually say user dot is verified
222:43 - and let's grab it from the model
222:46 - and is verified I'll just copy it
222:49 - probably I'm making a mistake here I'll
222:52 - just open this up verify routes
222:55 - and this should be oh my bad there is a
222:59 - typo here it's is verified so bad
223:03 - anyways anyways no problem no problem we
223:05 - can just create a fresh user and try
223:06 - this again one more time this is how the
223:08 - debugging works so it's everywhere is
223:11 - verified
223:12 - oh goodness and the token names are
223:17 - token names are good should have paid
223:20 - more attention but anyways these are
223:21 - small bugs this is how you fix them
223:23 - let's try with a new user this time
223:26 - I'll open this up here and let's try
223:30 - we're here and we'll try with the
223:33 - sign up
223:35 - let's try it's time for six
223:38 - 6 and this one will be 6 at the rate
223:41 - gmail.com password will be one two three
223:44 - four five six
223:46 - sign up the user
223:48 - processing slow but only in the dev in
223:51 - the production it goes like ridiculously
223:53 - fast The Edge functions are always up
223:55 - almost always up and there we go we got
223:58 - the six
223:59 - and again this is also painfully slow
224:01 - I'll just copy this this time
224:04 - whether this extra dot is there
224:07 - horrible the dots should not be there
224:09 - but this actually creates a problem so
224:11 - we should actually use better approach
224:12 - of generating the tokens
224:14 - uh I'll just have this one the start
224:16 - definitely is going to create issues and
224:19 - again this
224:21 - again why is it having the issues
224:24 - probably with the dot now we have this
224:25 - this dot is definitely creating the
224:27 - issues so we can notice there is little
224:29 - bit wrong in our approach that we are
224:31 - generating The Tokens The Token should
224:33 - be just a mix and match of letters and
224:37 - numbers uppercase lower case that's fine
224:39 - but these special characters and these
224:42 - dots especially that is creating so much
224:44 - of the issue also in the development
224:46 - environment uh serving the page actually
224:48 - takes some time so you will notice that
224:50 - when it actually serves the page
224:51 - compiled successfully and all of that so
224:53 - this actually creates a problem
224:56 - so possible emitter memory Leak
224:58 - Detection will actually take care of
225:00 - that but anyways now we have this is
225:03 - verified false here so that is we are
225:05 - getting all of this now let's check
225:06 - whether we are actually having this
225:08 - properly there
225:10 - all right let's see
225:12 - so we have the user six there we go we
225:15 - can see that the is verified is true
225:16 - verified
225:18 - that is true in this case so we are
225:20 - actually able to grab it now this is
225:23 - really a very thorough example of
225:25 - understanding a whole lot of things
225:27 - that's happening it's really a decently
225:29 - complex project we have worked on a lot
225:31 - of things now I'll not actually do the
225:33 - spoon feeding to you yes that is one of
225:35 - the bad thing that a lot of people do on
225:37 - the online codings and tutorials and all
225:39 - of that now we have seen thoroughly that
225:41 - how you can actually shoot an email the
225:44 - verification of the email we have also
225:45 - seen how we can extract the data from
225:47 - the body as well there was a reason why
225:49 - I did it this way the reason is because
225:51 - I want to have you an assignment the
225:53 - assignment is really simple we have
225:54 - worked on our verify emails verify
225:58 - accounts as well now we also want to
226:00 - work with the forgot password the
226:02 - mechanism is simple that again we'll be
226:05 - using our mailer and mailer can shoot an
226:07 - email so you have to first create a page
226:09 - where you can simply say hey send me a a
226:13 - male for for getting the password so you
226:16 - have to create an API for that as well
226:17 - as soon as somebody sends their email
226:20 - and a submit button is being clicked now
226:23 - it makes an xcos request use your node
226:25 - mailer to send a token to him and also
226:27 - send this token into a database as well
226:30 - now when somebody visits this page as
226:32 - well now you can take that token in
226:34 - another API call and based on this you
226:37 - can actually give him a simple thing on
226:39 - the token on the URL you'll be grabbing
226:41 - the token and in the body just get here
226:43 - the password and the confirm password
226:44 - and submit Button as soon as you click
226:46 - on submit button he'll be sending you
226:48 - the token he'll be sending you the
226:49 - password and the confirm password based
226:52 - on that first verify whether the token
226:54 - is actually valid or not if the token is
226:56 - valid now grab the user again based on
226:59 - the token and update the password field
227:01 - for the password field you have to
227:03 - actually encrypt the things again so
227:05 - there's a lot of things you can learn
227:06 - and do the things and again I would
227:08 - highly highly recommend that once you do
227:10 - this do let me know on LinkedIn on
227:12 - Twitter or anywhere that I have
227:14 - completed the project this will be your
227:16 - Learning Journey just watching the
227:18 - tutorial is not going to be cut through
227:19 - it now you know everything the only
227:21 - thing that's lagging and missing in you
227:23 - is the confidence so if you face any
227:25 - trouble just reach me out on Discord
227:26 - Twitter I'll help you in understanding
227:28 - the code or seeing a code or something
227:30 - like that as I get time but again the
227:32 - goal is improve or implement the
227:35 - functionality of the forgot password
227:37 - it's super simple if you are not able to
227:39 - do it if enough of requests are coming
227:40 - in I'll do that no problem at all but
227:43 - again I take this as take this as a
227:45 - simple assignment I highly highly
227:46 - recommend that you should be actually
227:48 - doing this so this was all about an
227:50 - introduction of nexjs I think this was
227:53 - quite an in-depth introduction of next
227:54 - shares definitely in the future I'll be
227:57 - rolling out more of full-fledged more
227:59 - complex projects in next year's if you
228:01 - want that do let me know in the comment
228:02 - section I would really really love to
228:04 - have this one so that's it for this
228:06 - video let's go ahead and catch up in
228:08 - another such video it was great and
228:10 - fantastic for teaching all of you I
228:12 - enjoyed it thoroughly do let me know in
228:13 - the comment section if you are enjoying
228:15 - such videos I'll make them more
228:16 - interactive more like just like you're
228:18 - sitting next to me and learning
228:19 - everything I'll make them more engaging
228:21 - so that's it let's catch up in the next
228:23 - one hit that subscribe
228:26 - hey there everyone hitesh here back
228:29 - again with another video and welcome to
228:31 - this another video on xjs I thought we
228:33 - have done so much why not to show you
228:35 - the deployment part and some assignment
228:37 - part as well so I've added some of the
228:39 - assignments for you we'll first talk
228:41 - about that and then we are going to talk
228:43 - about how we can take this and Deploy on
228:45 - the varsal Warsaw is one of the great
228:47 - platform where you can host your nexjs
228:49 - application our database is already
228:51 - online in manga DB so we'll utilize that
228:54 - let's go ahead and try this out let me
228:56 - share my screen uh with you so this is
228:59 - what I've added in the next JS readme
229:00 - file you might have already seen that in
229:02 - the repo it's nothing it says a detailed
229:05 - course on xjs we can just actually move
229:07 - this here a little and I have added what
229:09 - are the tech Stacks that we have uses
229:11 - mail trap Nexus typescript Basics
229:14 - nothing much big deal and here's my
229:16 - YouTube channel link as well so I've
229:18 - added a YouTube I'm pretty sure you're
229:19 - watching this on YouTube if you're
229:21 - watching it somewhere else hey I have a
229:23 - YouTube channel uh apart from this there
229:25 - is assignment the first assignment is
229:27 - improve the UI of the application right
229:29 - now we were focused too much on
229:31 - implementing uh the functionality part
229:33 - and the bare minimum basics of UI so
229:36 - that you can understand the flow of the
229:37 - application now definitely integrating
229:39 - too much of the Tailwind we could have
229:41 - done that we could have just copied and
229:42 - pasted that that I'll surely do that in
229:44 - the upcoming videos but it doesn't
229:46 - really add any much value if you request
229:48 - me enough in the comment section I would
229:49 - definitely add some of the videos which
229:51 - are focused purely and purely on
229:53 - Tailwind skills so I can do that if you
229:56 - wish want to have it let me know in the
229:58 - comment section but anyways in this one
229:59 - I have skipped that so that's your
230:01 - assignment to add more beautiful UI
230:03 - maybe make button mode beautiful maybe
230:05 - use a theme for it or maybe have better
230:08 - inputs so something like that you can
230:10 - have it and also add a feature of forgot
230:12 - password we have done exactly same thing
230:14 - in the verify email and again just
230:16 - watching the video is no benefit for you
230:18 - and in case somebody's saying hey why
230:20 - didn't you do it you should have done
230:21 - that this is an incomplete tutorial I
230:24 - would say probably you will never learn
230:26 - programming if you'll just watch the
230:28 - videos and expect me to do 100 of it uh
230:31 - you won't be learning programming so I'm
230:33 - not bothered about you those who are
230:34 - bothered about learning the programming
230:36 - now is the time that you achieve it now
230:39 - if anybody is actually completing the
230:41 - entire thing just let me know your
230:43 - GitHub repository or you can send me a
230:46 - kind of a request here pull request but
230:49 - make sure your pull request is not
230:51 - merging your code in my code I don't
230:52 - want that I want user to see only the
230:55 - code which I have written I don't want
230:56 - other people otherwise people will be
230:58 - confused that hey from where this code
230:59 - came in so only after the hint just try
231:02 - to add or I can just add it just in
231:04 - front of you that we can go ahead
231:06 - instead of the hints up here so we'll
231:08 - just add your completed repositories so
231:11 - we'll just go ahead and say something
231:12 - like this
231:14 - uh your completed
231:17 - assignments
231:19 - assignments
231:21 - and you can just add your links up here
231:23 - so we can add here something like this
231:25 - uh
231:27 - add
231:28 - your repo so if you have completed
231:31 - everything so you can add up your repo
231:33 - link here I'll just push it again so you
231:36 - can just go ahead and add a repo link
231:37 - here that hey here is my completed
231:39 - version of it or probably a deployed
231:40 - version of it so go ahead and add it
231:42 - that kind of a pull request only I'll be
231:44 - accepting if your pull request is going
231:46 - to make any kind of a mess then I'll not
231:48 - accept it if there is a conflict I'll
231:50 - not accept it make sure you actually
231:51 - update the conflict take the proper poll
231:53 - and everything so go ahead and do that
231:55 - that's your contribution in here all
231:57 - right so that's the basic of how you can
231:58 - do that I have even written your forgot
232:00 - password hints as well that what user
232:02 - needs to do it's a five-step process I
232:04 - have given it here so that it will help
232:06 - you to learn all of that all right now
232:08 - this whole thing is being pushed so
232:10 - let's go ahead and actually push this
232:11 - final readme as well I'll just add this
232:13 - changes add
232:17 - your
232:18 - contribution here gear
232:22 - here and I'll just Commit This
232:25 - and we're going to push this so that
232:27 - this also this is also available there
232:29 - so all right so now everything is being
232:31 - pushed onto the GitHub it's time that we
232:33 - actually go ahead and take it on to the
232:35 - next JS uh versal actually deployment
232:38 - part but before that we need to actually
232:39 - create another user I have actually
232:41 - removed all the previous users so I'll
232:42 - just create another one just for the
232:44 - testing this user will be I'll just call
232:47 - this one hitesh
232:49 - hitesh123 really bad uh show the
232:52 - password h123 add a built-in role of
232:55 - write and write any database not a good
232:57 - idea but we'll still do it
233:00 - I'm just uh making this up all here so
233:03 - that you understand that what are the
233:04 - security issues and concern which you
233:06 - should be having so we'll just go into
233:09 - database
233:10 - and we will be connecting with the
233:13 - strings so I'll just copy this so that I
233:16 - can actually inject this in here so I'll
233:18 - just copy this
233:19 - go back up here and let's go ahead and
233:21 - deploy this so virtual and we need to
233:25 - bring up on our all of our environment
233:26 - variables here so I'll just click on
233:28 - project and this one is react not react
233:33 - It's actually an xjs next JS full stack
233:36 - auth yeah we want to import this this
233:39 - whole thing is good here is our
233:40 - environment variable this is where we
233:42 - actually inject all of this so let's go
233:44 - ahead and open up our environment
233:45 - variables since I have deleted
233:47 - everything so I'll just go ahead and
233:50 - open up the sample.env hey I can just
233:53 - close all of this we don't need this
233:55 - sample.env I'll just paste this into
233:59 - sample link so the username that we are
234:02 - using is hitesh and the password is
234:05 - hitesh123
234:08 - and what you need to do further is add
234:10 - up your database name so we'll just call
234:12 - this as next YouTube auth yeah that's
234:16 - good so the first variable that we have
234:18 - is URI copy that enter into your
234:21 - domain variable just like this you had
234:22 - your environment variables and you don't
234:24 - have to do even a single thing paste
234:26 - copy its value
234:28 - paste the value here add this up we have
234:31 - one more
234:33 - how can I get here here it has one more
234:35 - we'll have the token secret make sure
234:37 - your token secret is oops
234:39 - make sure your token secret is way
234:41 - better than mine I'll just add some
234:46 - complex
234:48 - token
234:51 - yeah that that's good enough
234:53 - I'll add this and we can also go ahead
234:56 - and add a domain
234:57 - uh domain yeah that's that's a crucial
235:00 - one because right now the domain is we
235:03 - have no idea what domain we have so we
235:05 - need to come back here and add this
235:07 - after the deployment because we will get
235:09 - a URL if we would be having our own
235:12 - domain then there would be no problem I
235:13 - can just go ahead and do this but we
235:16 - need to add the environment variable
235:17 - little bit later this domain part I will
235:20 - just click on deploy
235:21 - and that is it that is it all it takes
235:24 - to deploy your application it will start
235:27 - building and if we don't have any bugs
235:29 - or issues we will be able to deploy it
235:32 - if we have some issues or something like
235:33 - that obviously we have to debug that
235:35 - part but again there is nothing much it
235:38 - will just give me a URL and all I'm
235:40 - looking for is a word cell app URL so
235:42 - that I can add it into my domain as we
235:44 - can see this is the domain that we have
235:45 - we don't have to have ports and stuff
235:47 - like that so
235:49 - this is taking us some time in building
235:51 - the build phase actually takes some time
235:53 - yeah
235:55 - okay maybe we should pause the video
235:57 - here there is no point of unnecessarily
235:59 - staring the screen here okay so let me
236:03 - pause the video
236:05 - all right so you just missed the
236:07 - confetti there is a confetti that
236:09 - actually comes up here so right now
236:11 - notice here it says add your domain I
236:13 - don't have my domain that's why I missed
236:16 - out that environment variable so again
236:19 - so let's continue the dashboard of it
236:21 - where this is so I can see my
236:24 - application is up and running and this
236:25 - is the deployment URL so that is what
236:27 - I'm looking up for so I need to actually
236:29 - copy all of this uh next year's full
236:33 - stack auth then some random variable
236:35 - Dash My
236:36 - username.versal.app I think that is a
236:38 - better way of actually
236:41 - domains
236:43 - let's just click on it and we can edit
236:45 - this to have a better URL
236:48 - so let's just have this
236:52 - next year's full stack auth versal app
236:54 - yeah we'll just copy all of this
236:57 - and now we need to actually add this
236:59 - into environment variable so there is
237:01 - environment variable without this the
237:03 - thing is not going to work so we have
237:05 - our token secret we need to
237:07 - actually provide domain
237:11 - and then the value of it so whatever the
237:13 - domain wherever you are deploying it
237:14 - needs that this is what we are using in
237:17 - our mailing services so make sure you
237:20 - actually get that and also there is a
237:22 - issue here that in the if you go into
237:24 - the source and inside the helpers
237:28 - and in the mailer I have actually
237:30 - deployed my own user ID and password
237:32 - here but I have actually deleted that
237:34 - account so it doesn't really work
237:35 - anymore but still make sure you actually
237:38 - use this to do add these into the
237:40 - credential and EnV that's a security
237:42 - concern here but anyways so I'll just go
237:44 - ahead and say that hey this is add
237:46 - another one no Adam save this one so
237:50 - please define the name for environment
237:51 - variable ah accidentally added that one
237:54 - so we have all these domains and tokens
237:56 - and everything now our app should be
237:58 - there so now in theory at least we
238:01 - should be having this being deployed
238:04 - and it takes some time so there we go we
238:07 - can sign up and we can log in that's
238:09 - good and we'll just grab hitesh and
238:12 - we'll be saying hitesh at the rate
238:14 - google.com which is not true and we'll
238:18 - be saying one two three four five six
238:19 - very secure password uh we'll do the
238:22 - sign up obviously our mail will fail
238:24 - because that doesn't exist so that part
238:27 - of the code is not going to work it's
238:30 - saying processing
238:32 - taking some time
238:35 - and we got the sign up because our
238:38 - mailing is actually failing otherwise we
238:40 - would have got redirected there but in
238:42 - theory at least we should be getting
238:44 - some of the users in the documentation
238:47 - here or the document
238:49 - so there we go so there we go obviously
238:52 - we didn't got properly redirected
238:54 - everything but we are getting this the
238:55 - reason for that is because in this
238:58 - portion we are having a bug which is
239:00 - intentional I didn't want to expose my
239:02 - credentials otherwise we would have seen
239:04 - that the everything is going nice and
239:05 - easy so now one more assignment for you
239:08 - is extract these user ID and password
239:10 - put that into environment variable so
239:12 - that we can actually inject them there
239:13 - that would be really really nice but now
239:16 - you know that how you can actually have
239:17 - your application and stuff like that we
239:20 - can log in and we can go ahead and say
239:23 - hitesh at the rate google.com
239:26 - and we should be able to get this so one
239:29 - two three four five six we should be
239:31 - able to log in processing login and the
239:34 - login now we are getting this so get
239:36 - user details I'm able to get my user
239:39 - details hopefully there we go
239:40 - and I can visit the profile as well this
239:43 - is working fine I can go back and hit
239:46 - the log out button let me see that if we
239:48 - are getting this token as well inside
239:50 - this and application
239:53 - and cookie and there we go we got the
239:56 - token this is how the real world
239:57 - application works and we can hit the log
240:00 - out and this should be taking us back
240:02 - only thing that's not working is our
240:04 - mail and we know why it is not working
240:06 - in the code part as I always say it's
240:09 - important to know how your code is
240:11 - working but it's also important to know
240:12 - that why your code is not working which
240:15 - is the part of the flow that might be
240:16 - broken this actually helps you to
240:18 - understand and debugging debug a lot
240:20 - faster because you understand your code
240:22 - in and out and that's what I always
240:24 - Focus that please go ahead and
240:25 - understand the part that it's not always
240:27 - about working code it's also about the
240:29 - ability to understand that which portion
240:31 - of my code is causing the bug or issue
240:33 - as the application will grow larger
240:35 - which shortly we'll see later on you'll
240:38 - understand that hey there's so much more
240:39 - to learn and so much more to understand
240:41 - but this was a fun deployment part told
240:44 - you deployment is super easy it's
240:46 - actually fun so in this video you have
240:48 - learned how you can deploy use your net
240:49 - environment variables some of the issues
240:51 - that we have that you can fix up there
240:53 - and can actually make a pull request
240:55 - that hey my repository is now all good
240:57 - and perfect at the age can you add this
240:58 - into the readme again I repeat this all
241:01 - those people who will be sending an
241:03 - unmindfully these pull request which
241:06 - actually merge your code I will not
241:08 - accept that I'll write a comment below
241:10 - that that hey you didn't understood the
241:11 - video but those will be just sending me
241:13 - the pull request where there is a link
241:14 - of your repo in the readme file only
241:17 - I'll happily accept that and maybe
241:19 - thousands and thousands of people will
241:21 - be able to check out your repository
241:22 - that what's your version and your
241:24 - implementation of the assignments that
241:26 - we have done so be cautious don't just
241:28 - mindlessly send the pull request be
241:30 - cautious about that and in case I miss
241:33 - you uh miss your pull request or
241:35 - something let me know on the LinkedIn or
241:36 - Instagram or Twitter wherever you like
241:38 - that's it for this one let's call this
241:40 - one as the end for the series officially
241:42 - I'll definitely make more videos so do
241:44 - check out and subscribe to the channel
241:46 - I'll catch you up in another such video
241:50 - hey there everyone here and welcome back
241:53 - to another video if you're watching in
241:55 - continuation then no it's okay so
241:58 - welcome back and I'm really happy that
242:00 - you have shared so much of the series on
242:03 - the LinkedIn on Twitter I'm really super
242:05 - thankful for you for doing that there
242:07 - are only handful of people who actually
242:08 - promote the educational content and
242:10 - you're one of them thank you so much so
242:12 - I've decided that I'll continue this
242:14 - series further on and I'll walk you
242:15 - through with more scenarios where you
242:17 - can understand next year's in a little
242:19 - bit more depth and you can enjoy that
242:21 - now one scenario that we have already
242:23 - gone through is a full stack application
242:25 - using the next JS we built our own apis
242:27 - we send it Up all In the mongodb and
242:29 - work with that now another scenario is
242:31 - that maybe your backend is already
242:33 - cooked up maybe in another language or
242:35 - maybe you're using already cooked up
242:37 - back end now your your backend might be
242:40 - in fast API or maybe in the spring boot
242:42 - so you'll get a lot of idea that how to
242:44 - handle these scenarios so I'll be using
242:46 - a already cooked up back-end which is
242:48 - known as apprite and apprite is is a 100
242:51 - percent open source you can deploy it on
242:53 - your own servers or you can use their
242:54 - Cloud I prefer to use their Cloud it's
242:56 - easy to set up so in this entire series
242:59 - not series but a couple of videos that
243:01 - it will take I'll walk you through with
243:02 - one such application so let me first
243:04 - show you the application so that in case
243:06 - you want to try it before me you can go
243:08 - ahead because you have a lot of
243:09 - knowledge now so let me show you what we
243:11 - are about to build so this is what we'll
243:14 - be building and I would agree and say
243:16 - that hey upright I actually borrowed
243:18 - your color scheme and themes because it
243:20 - was so nice so sorry for that it was
243:22 - beautiful so I couldn't resist myself so
243:25 - we actually borrowed some of your theme
243:26 - sorry for that but hey you are a good
243:27 - platform so what we're going to be doing
243:29 - is in this one we'll be using this nexjs
243:32 - meets uh app right so I've already
243:35 - created app or account on the app right
243:37 - so if you go up into this one so it's a
243:40 - free account anybody can create that
243:42 - there is no limitation or something like
243:43 - that I have created this next test we'll
243:45 - be creating a fresh account fresh
243:47 - project for the app when we'll be walk
243:49 - through doing the walkthrough now we can
243:51 - click on this and all that I'm using
243:53 - here is the auth now notice here they
243:55 - give you nice bandwidths and API keys
243:57 - and whatnot so everything is pretty cool
243:59 - about them go into the auth we have got
244:01 - couple of users just like you know me
244:02 - one at the red Gmail today at the regime
244:04 - mail it takes a couple of users to
244:06 - actually register and do it properly so
244:08 - we'll be doing exactly that now this is
244:11 - the application that we'll be building
244:12 - there are couple of routes which are
244:13 - protected so in case you don't know
244:15 - about that so we'll be doing the route
244:16 - protection as well so there's a profile
244:18 - route which it doesn't allow me to visit
244:20 - I have to be logged in user for that so
244:23 - it's tracking all of that now if I go
244:25 - ahead and click on the sign up obviously
244:26 - I can do a sign up let's try with the
244:28 - three so we'll go with the three at the
244:31 - rate gmail.com uh that's that's a full
244:35 - name so
244:36 - I'll copy this I'll paste it up here and
244:38 - I'll remove this one we don't want that
244:40 - and the one of the best thing about
244:42 - using the apprite is all the
244:44 - authentication validation that is being
244:46 - set as a default in apprite day comes in
244:48 - so there's a minimum criteria of having
244:50 - your password you cannot just set it one
244:51 - two three four the needs of eight
244:53 - characters so that is a default of app
244:55 - right so you have to follow that as well
244:56 - that automatically comes you can
244:58 - obviously overwrite its open source but
245:00 - I don't want to having a security and
245:02 - password that's that's good so I'll just
245:04 - go ahead and okay did I type it wrong so
245:07 - one two three four five six seven eight
245:09 - the most secure password in the world we
245:11 - are using that let's create an account
245:13 - as soon as you create an account it
245:15 - actually the way we have set it up is uh
245:18 - we have actually directly redirected the
245:19 - user created an account and redirected
245:21 - the user onto the profile page so we are
245:23 - bringing in this three and the email ID
245:25 - from the app right itself and these are
245:28 - hard-coded so these are just taking few
245:30 - values but you can definitely take more
245:32 - values I'll just hit on logout and show
245:34 - you the login flow as well this is our
245:36 - login screen so I can just go ahead and
245:37 - say hey this is uh three if I can write
245:40 - that three at the rate gmail.com looks
245:43 - like my keyboard is not at perfect place
245:45 - and we can have one two three four five
245:47 - six seven eight that's that's basic and
245:49 - I'll just do the sign in and there we go
245:52 - the same information I can hit a log out
245:54 - as well there's no problem now one of
245:56 - the thing that is absolutely amazing
245:57 - about this project is that we are
245:59 - maintaining the state of the user so
246:01 - there is a state management also
246:03 - involved in this project now that's not
246:05 - Redux if you want me to do the Redux
246:07 - part so let me know in the comments
246:09 - section I'll do a proper separate video
246:10 - probably an hour hour long or two hour
246:12 - long video just on explaining what the
246:15 - Redux is and what the state management
246:16 - is in this one we are using the context
246:19 - that is it the context API in the react
246:22 - as well as next.js is so much like
246:26 - Underdog it I would say that I would not
246:28 - hesitate to say that it's so much more
246:30 - powerful that you always don't need to
246:32 - take out your big guns of Redux you can
246:34 - just do everything with the context API
246:36 - and that's exactly what you're doing
246:38 - here as well I'll walk you through with
246:39 - the context API how we'll create our own
246:41 - custom providers and custom hooks so
246:44 - that you can manage the user
246:45 - authentication and States as well on the
246:47 - front-end side as well and back end is
246:49 - all cooked up on the app right so we
246:50 - won't be touching too much on the back
246:51 - end part this project is going to be
246:53 - serving a lot of other knowledge as well
246:55 - which you should be having with the
246:57 - upright uh not apprite the next JS as
246:59 - well so there are a couple of routing
247:01 - information parenthesis folder name
247:03 - structure which are also there in the
247:05 - yes I'll walk you through with that but
247:07 - hey uh go ahead and try this application
247:09 - on your own first I'll definitely give
247:12 - you the link in the GitHub repo for that
247:14 - as well but it's always a good idea to
247:16 - at least try out something on your own
247:17 - otherwise I'm always here so in the next
247:19 - video or in the sequence of the next
247:21 - video I will just walk you through we'll
247:23 - start with a fresh project we won't be
247:25 - using the previous one so let's go ahead
247:27 - and get started with this one
247:31 - all right so let's go ahead and get
247:33 - started with the app right and the
247:35 - next.js we'll create a fresh new project
247:37 - and we'll understand that how we can
247:39 - inject app right into an xjs project we
247:42 - have to work on something known as
247:43 - parenthesis there are some routes which
247:45 - you can create with the parenthesis we
247:47 - have worked on the square brackets and
247:49 - there's a difference but in thesis
247:50 - square brackets curly braces so we'll be
247:53 - talking about how we can utilize
247:54 - parenthesis and something known as
247:56 - layout and can take advantage of this so
247:58 - all of this in this video without a
248:00 - further Ado let's go ahead and get
248:01 - started because things are easier to
248:03 - understand if we go directly on the code
248:05 - part I'll just copy this here and I'll
248:07 - just click and copy first we'll be
248:09 - generating a simple nexius project so
248:12 - let me go ahead and fire this up a new
248:14 - Fresh vs code instance and let me go
248:18 - ahead and get a project as well just
248:20 - like this so I'll just actually move
248:23 - this for a second and we'll be bringing
248:25 - this all up here so that's nice and
248:27 - let's create a new folder a fresh new
248:29 - project and we'll be calling this one as
248:31 - simply the next JS Dash app right
248:35 - because that's what it is and obviously
248:37 - it's a YouTube Project so let's Trail it
248:40 - with the YouTube as well drag and drop
248:42 - this should be absolutely easy open up
248:45 - the terminal that we have so if it can
248:47 - open that so there we go and paste the
248:50 - command simply and I'll at the end of it
248:51 - I'll just add a DOT so that it generates
248:53 - everything in the same project folder do
248:57 - you want to use typescript of course let
248:59 - linting I'm not a big fan but I'll still
249:01 - use it Tailwind CSS yes please give it
249:03 - to us Source directory do you want to
249:06 - use it yeah I'll take the source
249:07 - directory app router yes of course would
249:10 - you like to customize the default uh
249:13 - I'll not customize it I'll use the basic
249:15 - at the rate which is the default one and
249:17 - that's it now it generates a fresh
249:19 - project for me now here's the idea will
249:22 - not be working too much in the app
249:24 - folder in this video or in this section
249:26 - of the video if you're watching it all
249:28 - in one go we'll be first working on
249:30 - configuration of the app right because
249:32 - that's the logic part that's the
249:34 - difficult part how we build the pages
249:36 - and how we can transform the data that's
249:38 - that's easy part there is nothing too
249:40 - much difficult for that one
249:42 - all right so looks great and looks okay
249:45 - now let's go back on to the upright and
249:47 - see how that we can configure it I've
249:49 - already created an account on Earth but
249:51 - we'll create a fresh project for this
249:52 - one because I have no shortage of
249:54 - creating the apps I'll create this one
249:55 - and let's call this one as YouTube next
249:59 - JS yeah that's that's good enough name
250:02 - go ahead and create this
250:04 - and there we go now you don't need to
250:06 - find any project ID or anything here you
250:08 - can just simply click on the ADD web app
250:10 - because that's what it is and let's call
250:12 - this one as next JS with
250:15 - app right that's my app name the host
250:18 - that I'm using for this one is actually
250:20 - localhost so no worries on that part now
250:23 - as soon as you click on next it will
250:24 - give you that what should I do I should
250:26 - actually do npm install app right first
250:28 - so I'll just copy this and we'll go up
250:31 - onto my code editor and first and
250:33 - foremost I'll just go ahead and do npm
250:34 - install app right it's not really that
250:37 - much of a big package comparatively very
250:38 - very small and that's majorly what we
250:41 - need and then you can just ignore this
250:43 - because I'll walk you through how to do
250:44 - this with the web SDK we just need the
250:46 - app right and just click on the next and
250:48 - this is something that we'll be needing
250:50 - so let's go back here into the root of
250:52 - directory just create a DOT EnV I'll
250:55 - create a sample EnV for as well so that
250:57 - I can give you all of these files as
250:59 - well so I'll just go ahead and say
251:00 - sample dot EnV so that I can push it
251:03 - onto the GitHub I'll be working with
251:05 - this mainly so let's go ahead and First
251:08 - grab the EnV file in the EnV file you
251:11 - need these two things so endpoint which
251:13 - is actually your next year's public URL
251:16 - and the endpoint which is a project ID
251:18 - so let's go ahead and add this one so
251:20 - I'll just go ahead and lower this down
251:22 - so this one for me is next underscore
251:25 - public
251:27 - underscore app right and URL
251:31 - all right and then simply have an equal
251:34 - to sign and this is where you grab it
251:38 - copy this entirely without the codes
251:41 - that's the first part of it and next
251:43 - part that we need is Project ID so
251:45 - notice here that's that's a funny one we
251:48 - won't be using that we'll be using the
251:50 - actual one so go ahead and copy this
251:53 - and that's it now we don't need to come
251:55 - back and again by the time you'll be
251:56 - watching it I might have already deleted
251:58 - that but I'll still copy this and paste
252:01 - it up here so that you know which URLs
252:02 - to actually work on with this one so
252:04 - this one is saying the top one we are
252:06 - not worried about that part here I'll
252:07 - just add the classic one 5c 5c 5c5 see
252:10 - that whatever that is so that it
252:12 - actually remains for you so that you can
252:14 - work on with that now let's also take a
252:16 - look on to our package.json as well that
252:19 - what all we have in this one we have
252:21 - actually very less we don't want to kind
252:24 - of overburden with this one we'll be
252:26 - having just the app right that's where
252:28 - the focus is I won't be even installing
252:30 - the xeos and anything that that will go
252:32 - with the classic so that is it if we
252:34 - need anything else we can just go ahead
252:36 - and just create it at the go and that is
252:39 - all we can just hit the next here and
252:41 - take me to the dashboard we don't need
252:42 - anything else the advantage is when you
252:44 - actually work on with authentication and
252:46 - the auth part you don't have to worry
252:48 - anything in case you wish you can go
252:50 - into the settings and add all these
252:51 - things probably we can talk about them
252:52 - later right now I'm just worried about
252:54 - email and password that is enabled for
252:56 - me by default so that is it that is all
252:58 - I need one good idea is to once you have
253:01 - done all of this it's actually good idea
253:02 - that we go ahead and say npm run Dev
253:05 - which we have already learned and see so
253:07 - at least I can see that whether my
253:09 - project is actually up and running or I
253:11 - need to debug at this point also
253:13 - all right
253:15 - initially it takes a little bit time to
253:17 - load and there we go we can see now the
253:19 - project is all good done will be just
253:21 - changing a lot of this a lot of this
253:23 - this time but don't you worry I'll give
253:25 - you the exact CSS and the code files of
253:28 - the tailwind and all of that so that you
253:29 - don't worry on that part now first and
253:32 - foremost inside the source we can see
253:34 - there is this app folder and there's so
253:36 - much more going on we'll discuss about
253:39 - the app little bit later right now we
253:41 - just want to go ahead and create couple
253:43 - of other folders now one of the more
253:45 - approach that I will walk you through in
253:46 - this one is first create a new folder
253:48 - into this one and let's go ahead and
253:50 - call this one as conf for config or
253:54 - maybe something else I'll just go ahead
253:56 - and shrink down this app because I'm not
253:58 - interested in app as of now I'll just
254:00 - right click on this create a new file
254:01 - and let's just call this one as conf.ts
254:04 - now one of the common thing that you
254:06 - might have already seen that when we
254:08 - were importing these environment
254:10 - variables we had to put an exclamatory
254:12 - sign to say that hey this is always
254:14 - there I'm pretty sure of it one of the
254:16 - other alternative that you'll see
254:17 - especially in the production is actually
254:19 - to use a config file or some other
254:22 - third-party libraries as well which can
254:23 - get you a surety that it is there one of
254:26 - the way of doing that is you'll see this
254:28 - a lot is actually create a simple conf
254:30 - variable just like this or config I'll
254:34 - just call it as conf that's much better
254:36 - and we can simply go ahead and create an
254:39 - object and here we can simply say export
254:41 - default conf now this config will be
254:43 - responsible of having this so we'll just
254:45 - go ahead and say Hey I want a app write
254:48 - URL
254:50 - and that URL will be coming to me in a
254:53 - string so that I know the format that
254:55 - it's coming in and in here I can just go
254:57 - ahead and say process dot e and V Dot
255:01 - and the name of it which is next
255:03 - suggestions app right public URL
255:06 - hopefully that's the same if I'm not
255:09 - making any mistake all right the next
255:11 - one is app write project ID and we'll
255:15 - just go with the next public app right
255:18 - project ID so now that we have exported
255:20 - it that's actually considered as a far
255:22 - better approach instead of just directly
255:24 - calling them and calling them hey that's
255:26 - a string and that's an exclamatory sign
255:28 - there are a couple of packages around it
255:30 - as well which are also considered quite
255:32 - a lot with the dignity in the community
255:34 - as well so I will say that if you want
255:36 - you can go ahead and have that one as
255:38 - well now let's go ahead and talk about
255:40 - the app right because that's the major
255:42 - ingredient here so let's in the source
255:44 - we'll create a new folder and we'll just
255:46 - call this one as app right so that later
255:48 - on somebody comes up he just knows
255:50 - exactly that hey this is the app right
255:52 - folder and all the configuration related
255:54 - to apprite belongs here I'll create a
255:57 - new file into this one and let's call
255:58 - this one as config.ts
256:01 - now this is the one file which we'll be
256:03 - talking to your app right now the way
256:06 - how you talk to the upright it's not
256:08 - really difficult it's actually easy app
256:10 - right from the upright package module
256:12 - gives you everything your client your
256:14 - account your ID anything that you need
256:16 - will be provided just directly by that
256:18 - so let's go ahead and try this
256:20 - first I need the config so I'll just go
256:23 - ahead and say hey bring me the conf from
256:24 - the config then I'll say that hey I need
256:27 - some stuff from upright
256:31 - app right so what are the stuff anything
256:33 - that you want to deal with that in this
256:34 - case I obviously want to deal with the
256:36 - client so client is one which will be
256:38 - talking to that giving me the user
256:40 - details and everything we are
256:42 - specifically working on account so
256:43 - that's why we need that and we'll also
256:45 - be smallly handling the ID part so
256:47 - that's also important in case you need
256:49 - more this is exactly the place you
256:51 - actually write so in case you want
256:52 - database or something you just go with
256:54 - that right now we are not playing around
256:56 - with the database we'll do that in some
256:58 - another video right now we're just this
256:59 - much important now we'll be creating
257:01 - some types as well so far we haven't
257:04 - created any type and we have always
257:05 - written any that's that's also an
257:07 - approach but in this case we'll just
257:09 - write the type so at the time of
257:11 - creating the user or at the time of
257:13 - logging in the user we know exactly what
257:15 - type to expect in that that's the
257:17 - typescript specific feature we have
257:19 - talked quite a lot about typescript so I
257:20 - think that's a good idea in this case so
257:22 - we'll first create a type which simply
257:24 - go ahead and say create user create user
257:27 - account
257:29 - and we'll be creating a type for it as
257:31 - well now similar to this we'll also
257:33 - create another type so let's go ahead
257:35 - and say the login user account login
257:37 - user account we'll be creating a time
257:40 - all you have to do in this since these
257:42 - are type specification just mention what
257:44 - are the variables and what's their data
257:45 - type is so in this case I'll grab an
257:48 - email I'll grab a password and I'll also
257:50 - grab a name that all string type that's
257:52 - it in the case of log in a user I'll
257:54 - just grab email and I'll grab a password
257:56 - as a string that's it so this is my type
257:58 - again you can skip this part in case you
258:01 - wish to but all you have to do is just
258:03 - write the simple any in that case now
258:06 - step one how do we deal with that this
258:08 - client is responsible for talking to app
258:10 - right so let's create an object from
258:14 - this client all we have to do is simply
258:16 - say new and client this actually gives
258:18 - you a reference to it let's store this
258:20 - reference into a variable and call this
258:22 - one as app right client
258:26 - there we go now storing the reference
258:28 - this is going to be super helpful for us
258:30 - this client actually talks to your app
258:33 - right but it doesn't know how to talk to
258:35 - it it doesn't know the URL it doesn't
258:36 - know the project ID so yes you get it
258:38 - right you have to exactly tell it that
258:40 - hey I need this so upright client has a
258:43 - lot of methods into it called config
258:44 - headers and all of that we are
258:46 - interested in this set endpoint this is
258:48 - the first one as soon as you do this
258:50 - then you have to say that hey config or
258:53 - conf I want to use apprite endpoint it
258:56 - does not know that endpoint so obviously
258:58 - you have to go into the conf and look
259:00 - for that hey what is giving you that URL
259:02 - so in this case app right URL so I'll
259:03 - just go ahead and copy this app right
259:05 - URL because it knows that variable
259:07 - on top of this once you have mentioned
259:10 - the URL then you have to set the project
259:11 - ID so on top of this let's change it and
259:14 - then we'll say that hey I want to set a
259:16 - project
259:17 - and the project also needs to go ahead
259:19 - and say upright project ID and again
259:21 - we'll be borrowing this one from here so
259:25 - that I don't make any mistake here there
259:27 - we go that's exactly the same now at
259:29 - this moment you specifically know that
259:32 - what project you are talking about and
259:33 - how you are talking about and all of
259:35 - that now on top of that we have used
259:37 - this client now also we want to take a
259:39 - reference from the account in case you
259:40 - are working with the database you have
259:42 - to take the reference from database as
259:43 - well but in this case we are talking
259:45 - with the account so just like we have
259:47 - taken the reference here with the client
259:49 - for setting up the connection let's take
259:51 - a reference of the account as well super
259:53 - easy so again the the idea is same we
259:56 - want to have a new account reference and
259:58 - we can provide the upright client so we
260:00 - know how to talk to it let's store that
260:02 - into a variable so let's go ahead and
260:03 - call this one as
260:05 - account with a small one just like that
260:08 - not only that I would love to export
260:11 - this as well because I'll be using it in
260:12 - a lot of other places so just write a
260:14 - export here so anybody can talk to the
260:16 - account wherever they want we don't want
260:18 - to export it at the end we just want to
260:20 - have it like this now this is all basic
260:23 - now whenever we work with the upright
260:25 - client in case you have watched my other
260:27 - videos on the react native and stuff I
260:29 - always recommend to create a class out
260:31 - of it simply the simple reason is as
260:34 - soon as the class Constructor is it
260:35 - actually does a lot of job for you not
260:38 - only that you can create a lot of
260:39 - methods a synchronous method which are
260:41 - responsible for creating the account
260:43 - logging in the account log out the
260:44 - account so that at the time when you're
260:46 - actually doing the work you don't have
260:48 - to do the work there you can just call
260:49 - these methods and it's a singular place
260:51 - where everything is being mentioned this
260:53 - file is for just for just the
260:55 - authentication but I usually prefer to
260:57 - create separate classes all for
260:59 - authentication all for database all for
261:01 - storage and just like that this is my
261:03 - workflow that I usually like to do
261:05 - so let's export this class so that
261:07 - anybody can use this so we'll just go
261:09 - ahead and say I won't have a class which
261:10 - will be app
261:13 - write service
261:15 - this is one of the best practice that
261:16 - you can utilize now in this the first
261:18 - one that we are going to go ahead and
261:20 - say create a new user or rather better
261:23 - will be create a new record of user
261:28 - inside app right probably that's that's
261:31 - a better name all right then what we are
261:34 - going to do is start with a sync
261:36 - async create user account I think that
261:39 - that's a good suggestion that's a good
261:41 - suggestion and I'll just go ahead and
261:43 - close this like this so all we are doing
261:45 - here is we are simply naming this as
261:47 - create user account so we'll be using
261:49 - this method instead of the app rights
261:51 - account dot create method uh we'll be
261:54 - just taking email password and name that
261:56 - are given to me and these are of type
261:58 - create user account remember the type
262:00 - that we have exactly created so these
262:01 - are of type so now instead of writing
262:04 - any here I can just route this write the
262:06 - specific type now since it's a database
262:08 - connection it's no different than a
262:09 - mongodb it can fail so we go ahead and
262:11 - wrap this up into the try catch we won't
262:14 - be doing too much we'll be just throwing
262:16 - the errors so let's just go ahead and
262:17 - say Hey I want to throw the error
262:21 - through the error that's it in case you
262:23 - want to do console log or something more
262:24 - you can go ahead and do that in the
262:27 - Tripod I would love to just go ahead and
262:29 - create a connect account so I'll await
262:31 - this one because it can take some time
262:33 - and I'll just go ahead and say account
262:35 - dot create again for creating all of
262:37 - these accounts the thing which is
262:39 - responsible is this account not only it
262:41 - actually creates the account it actually
262:43 - gives me some more details about the
262:45 - user that whether it is logged in
262:46 - session is there or not so I can use it
262:48 - later in later Point as well once that
262:51 - is being done all I'm going to do is
262:54 - ah will will be just creating this but I
262:57 - think we can do a tiny bit better just
262:59 - instead of saying uh email password and
263:01 - name we also need to put a unique ID for
263:04 - this one because this is an this is a
263:06 - new record in the entry so obviously you
263:08 - have to do it uh it sometimes I have to
263:11 - check the docs to actually make a
263:12 - comment I'll put that in the comments if
263:14 - I have something in my mind but again in
263:16 - this case I'll just use the ID directly
263:18 - which already we have and we have a
263:20 - method on this which is known as unique
263:21 - so oops unique just like that so there
263:25 - we go now still we are creating this now
263:28 - notice here we are not taking this from
263:29 - the user so anybody who creates or call
263:32 - this method I don't have to worry about
263:34 - this ID we are directly bringing up from
263:36 - the app right it gives us this ID and
263:38 - you don't have to use any uuid or
263:40 - something like that so let's go ahead
263:42 - and store that into a variable call this
263:45 - one as user account
263:48 - there we go nice and easy
263:50 - once this is all done then let's check
263:53 - if the user account was created or not
263:54 - so simply go ahead and ask for it that
263:57 - hey do you have this user account if you
263:59 - have it just return this user account
264:01 - based on this user can do that if you
264:03 - found sir account redirect him and to
264:05 - log in or keep him on the page or
264:06 - something like this I think if the user
264:09 - account is created then I'll go ahead
264:11 - and simply log in so I'll just say this
264:14 - again Dot Login feature doesn't exist
264:17 - right now I have to actually go ahead
264:19 - and create this one remember it doesn't
264:22 - exist right now just like the create
264:24 - user account is responsible for creating
264:26 - it I'll create my own login feature so
264:29 - that I immediately log in the user I
264:31 - already have the access of email and
264:33 - password so I can directly pass on to
264:34 - this one and it's the job of my method
264:37 - which I'm about to create that hey go
264:39 - ahead and log in the user and in the
264:42 - else case I'll just return whatever is
264:45 - being given to me so I'll just go ahead
264:47 - and say hey you want to return this user
264:50 - account
264:51 - now there are chances that you have
264:53 - nothing in the user account so I'll
264:54 - check on the front-end part that if user
264:56 - account is nothing I'll just accordingly
264:59 - proceed and if there's something into it
265:01 - I don't have to worry I'm not returning
265:02 - that I'm just returning the login so I'm
265:04 - directly going inside this all right now
265:07 - well the issue is that this whole thing
265:09 - looks great the try catch and everything
265:11 - but I don't have this thing the login
265:14 - which is creating a problem so
265:16 - immediately the first thing that I'll do
265:17 - is just go ahead and create this so that
265:20 - it stops giving me these errors so go
265:21 - ahead and say a sync a login and there
265:24 - we go now this should be all happy
265:27 - and it says async login login account
265:30 - why are you giving
265:32 - okay property password so we don't have
265:35 - this password
265:36 - let's see we have this password in the
265:39 - login user account so I think there is
265:41 - some issue
265:42 - all right shouldn't be that much login
265:45 - user account we have this one
265:48 - should be all okay let's try this one
265:50 - more time
265:51 - or probably we are missing some of these
265:54 - so where is this shrinking in
265:58 - all right so let's expand this probably
266:00 - I'm missing out some of this one so this
266:03 - is whole part of it and now here we can
266:05 - actually do the login
266:07 - is this extra looks like this
266:11 - yeah this is probably extra so I have
266:14 - this create user account so yeah
266:16 - I think now let's go ahead and try in a
266:18 - sync login email just like this and have
266:21 - this yeah this one was extra all right
266:24 - anyways so now obviously this is where
266:27 - we are catching the errors so this is
266:29 - giving us some issues here
266:31 - let's go ahead and expand this why are
266:34 - having you having some issue okay error
266:37 - is not of Define type so we can go ahead
266:39 - and say any
266:41 - still there is an issue there is an
266:42 - issue
266:43 - all right let me check this I'm pretty
266:46 - sure the issue is of these curly braces
266:48 - let's try this
266:50 - all right
266:53 - catch finally ah
266:56 - there is something there is something
266:57 - issue this is the try block
267:01 - else let me just quickly check and find
267:04 - out that I'm pretty sure this is an
267:05 - issue of a curly braces so let me just
267:07 - quickly figure out that
267:09 - ah I really hate these indentation
267:12 - issues I thought somehow that I'm in
267:14 - yaml file or something but yes finally I
267:16 - have fixed it it's actually not that bad
267:18 - I was just missing this one here and
267:20 - this one is here so now we have this
267:22 - async login which is also resolving the
267:24 - issues that all we were having this is
267:26 - still not in the best indentation where
267:29 - I want it to be but okay okay I'll get
267:32 - that it sometime happens and it's it's
267:35 - not the best of the work all right let's
267:37 - just close this one let's close this one
267:39 - now it's in the better position
267:41 - I prefer it to be on
267:45 - this line a little bit indentation like
267:47 - this
267:48 - but we'll keep it there all right so now
267:50 - we have this login method as well which
267:52 - is accepting email and password how it
267:54 - is doing the login that's not our
267:55 - concern but since if I'm here and I know
267:58 - this kind of mistakes will happen I'll
267:59 - just first declare rest of the other
268:01 - method as well so another method that
268:03 - will be going with that is going to be
268:05 - to finding out whether it's logged in or
268:07 - not so we'll just go ahead and say is
268:08 - logged n so if is it logged in or not
268:12 - and this is going to be a promise but we
268:15 - will worry about that in a second first
268:17 - let's go ahead and get is logged in this
268:19 - will give us a promise that whether the
268:21 - user is there or not if it is a user it
268:23 - will give me the user data otherwise it
268:25 - will just return me a false and similar
268:27 - to this we might need to get the current
268:29 - user as well
268:31 - so a sync and we'll be saying get
268:35 - current user again you can design as
268:39 - many methods as you like and finally
268:41 - last but not the least we'll be giving
268:43 - it a log out as well
268:45 - a sync logout that's it now it's time to
268:48 - implement them implementation is super
268:50 - super simple we can go ahead and work on
268:53 - with that so let me try with the login
268:55 - First again the most easiest one to go
268:57 - with that hopefully I don't do the typos
268:59 - or the try catch the error that's any
269:02 - and we can simply go ahead and simply do
269:04 - a through error
269:07 - throw suggestions throw error that's it
269:10 - in the try part of the login it's
269:12 - actually one of the simplest of all
269:13 - login all you have to do is simply say
269:15 - account and it just creates an email
269:17 - session so again create email session
269:20 - not the session so we'll be using Create
269:22 - come on
269:24 - three too many suggestions create email
269:27 - session that's the one I want to use and
269:29 - I'll just pass on email and password
269:30 - just like that and we'll be awaiting
269:33 - this because it takes some time and
269:35 - we'll be returning this so as soon as
269:36 - the session is being created I'll just
269:38 - return that session directly so return
269:40 - await just like that told you it's super
269:42 - simple it's a backend pre-written so
269:44 - there is nothing too much to discuss on
269:46 - that now this is logged in is actually
269:48 - an event which will happen in the future
269:50 - as well so this is going to return me a
269:53 - user itself so it's the best idea that
269:55 - you actually go ahead and make it a
269:56 - promise
269:58 - again you can just go with the try catch
270:00 - it might take some time and all of that
270:01 - but actually giving it a Boolean value
270:03 - and promise a Boolean value that's
270:04 - actually better because it's an event
270:06 - that will happen in the future
270:08 - Boolean there we go
270:10 - and again looks okay
270:13 - why are you having this issue a function
270:16 - whose declare type is neither undefined
270:18 - void must return a value yes I will
270:20 - return a value don't you worry
270:21 - I'll go ahead and return that in all the
270:24 - other case just go ahead and return a
270:26 - false so that should actually get rid of
270:28 - this now let's go ahead and try catch
270:30 - this
270:31 - so in the catch we'll just go ahead and
270:34 - say hey I don't want to do anything so
270:36 - we'll just keep it as it is so there is
270:38 - nothing that we are doing because if you
270:40 - don't do anything in the catch phase
270:41 - that's okay because we are anyhow
270:44 - returning the false that I couldn't get
270:45 - the user so that's that makes sense but
270:47 - in case you want to do that in the
270:49 - catchphase as well that's okay and all
270:51 - we're going to do is returning a Boolean
270:54 - data so what this actually does I can
270:57 - just go ahead and say await and then I
271:00 - can find this dot get current user so
271:04 - this is a method which actually gets you
271:05 - the current user and we can just hold
271:08 - this into a data
271:10 - now in this case you can return the data
271:13 - there is no problem for it but we have
271:15 - actually created a separate method which
271:16 - is get current user this is just
271:18 - checking whether you are logged in or
271:20 - not this will be super helpful a later
271:21 - phase now one of the hack that you can
271:23 - do here is you can just go ahead and
271:25 - simply return something like this and
271:28 - then you can say hey I want to return a
271:29 - Boolean variable Based on data if the
271:32 - data is present it will return a true if
271:34 - the data is not present it doesn't get
271:36 - anything it automatically returns a
271:38 - false very tricky but it happens in case
271:40 - you don't want to do that that's okay
271:42 - you can try if and else if the data is
271:44 - present return it true if data is not
271:45 - present return of false that's also
271:47 - valid no worries at all all right so
271:50 - this part is all easy now we are done
271:52 - with is logged in now this is the point
271:54 - where we'll be doing almost the same uh
271:57 - this dot get current user there is a
272:00 - better way of getting the current user
272:01 - again both of them returns you the data
272:03 - so we'll be working with that in the get
272:06 - current user we can actually get the
272:07 - current users simple absolutely simple
272:09 - just go ahead and have a try catch
272:12 - and in the error part uh we'll be doing
272:15 - a simple error so just like this let's
272:17 - go ahead and do a console log and in the
272:20 - console log we'll be simply saying that
272:21 - hey I want this error and I'll also want
272:25 - that get current user actually provided
272:27 - that error so get current user actually
272:31 - gave me this error and I'll just go
272:33 - ahead and work with the error yeah
272:35 - that's that's it
272:37 - all right why are you having issue this
272:40 - is having an issue which is having an
272:42 - unexpected
272:44 - colon just like this why are you having
272:46 - an issue
272:47 - get current user error
272:51 - do you need this one yeah it needs this
272:54 - one and now why are you having an issue
272:58 - all right this is bad this is bad why is
273:02 - it having an issue all right so
273:05 - if this is not working first and
273:07 - foremost I want to return a null
273:09 - so there we go that is happy
273:11 - ah man sometimes it's difficult to even
273:14 - read the errors that why is it giving me
273:16 - these errors
273:18 - let's try it one more time ah my bad
273:20 - this this one shouldn't be there yeah
273:23 - this one is happy now all right okay so
273:26 - now this part is handled and if we are
273:28 - able to get the current user current
273:29 - user getting there are two ways of
273:31 - getting the current user the first one
273:32 - is this dot get current user remember uh
273:35 - this is the instance of this entire
273:36 - thing so remember here we are creating
273:38 - this app right and hold this so I want
273:41 - to get the user of this but there is
273:42 - another way in case this is confusing to
273:44 - you you can go ahead and use this
273:46 - account remember we have account just
273:48 - simply get it that's it that's all it
273:51 - takes to get all the details about the
273:53 - current user since we are getting this
273:55 - let's go ahead and return this as it is
273:56 - in the front end side or in the pages
273:58 - side we'll see that what this current
274:00 - user actually gets us you can do a
274:02 - console log here as well but we'll just
274:04 - return this and in all the other cases
274:05 - we are returning the null you can read
274:07 - the documentation of apprite as well
274:09 - it's yes it's that ridiculously simple
274:11 - and also in the log out it's again
274:14 - simple there are a couple of ways how
274:16 - you can do the log out you can delete
274:18 - multiple sessions as well or you can
274:20 - delete the session as well so there are
274:21 - multiple ways of handling this I'll just
274:23 - go ahead and do a try catch and there we
274:25 - go suggestions are really really nice in
274:27 - this case okay so what it's doing is
274:29 - it's returning in a weight where it says
274:31 - account dot delete session and we can
274:33 - just provide the current this is the
274:35 - string yes this is a string where it
274:37 - actually removes the current session and
274:39 - then you can simply go ahead and catch
274:41 - the errors thrown out so this is the
274:43 - basics of how this is being done
274:45 - now if you remember this is the class we
274:48 - are not we can export this class as well
274:50 - but nobody needs this entire class we
274:53 - can actually make it kind of a one-time
274:56 - usable and we can do something like this
274:57 - let me show you we can go ahead and say
274:59 - hey app right service I'll create an
275:02 - object from this class and then I'll go
275:04 - ahead and Export a default app right
275:06 - service that's it now again you can
275:08 - directly get this class and just create
275:11 - an object there then run with this but
275:13 - since I can make my life a little easier
275:15 - I can just go ahead and create an object
275:16 - directly here from the class and Export
275:18 - that object and have a default of it so
275:20 - that I can import this and work on with
275:22 - that I also have an access of account so
275:24 - in case I need something more I can do
275:26 - this but I think everything that is
275:28 - probably usable I'll do this I'll prefer
275:31 - that to do in my class itself so that is
275:34 - what the wrap up of the app right
275:36 - configuration that we have here now
275:38 - let's also work a little bit of how we
275:41 - will be using the context as well
275:43 - because that's also important let's go
275:45 - ahead and save this so we'll be just
275:47 - removing this now since we have all of
275:49 - this now you'll be super happy that how
275:51 - we are working with the context part of
275:53 - it the context is nothing it's just a
275:57 - wrapper which will be wrapping up a lot
275:58 - of components and will tell these
276:01 - components whether the user is logged in
276:02 - or not so if he is not logged in we'll
276:05 - be protecting some of the pages if his
276:07 - uh logged in we'll be allowing him to
276:09 - access the certain pages that's that's
276:11 - all it is so let's go ahead and do this
276:13 - we'll be creating our own context so
276:15 - let's go into the source create a new
276:17 - folder and call this as context there we
276:20 - go the context will have just the two
276:22 - file the first one is use auth which is
276:24 - our own custom hook that we'll be
276:26 - writing and we'll be creating first a
276:28 - new file to provide this auth context
276:31 - auth context and Dot TS of course
276:35 - the way how you write the context is
276:37 - it's super simple if you know the react
276:39 - you will be just doing this like this
276:41 - but in case you don't know about the
276:43 - react as well that's also okay creating
276:46 - the context mainly includes creating a
276:49 - provider provider is something which
276:51 - provides you the information that's all
276:53 - it is that is all so let's go ahead and
276:55 - do this the step one of doing this is
276:58 - first go ahead and import a create
277:01 - context just like this and now we don't
277:05 - want it to film from the when we want it
277:06 - from react
277:08 - come on react there we go once we have
277:11 - this then we have to export couple of
277:14 - things first is auth context and the
277:16 - second one is auth provider okay how do
277:18 - we do that first is export const auth
277:21 - context which will be created by this
277:23 - create context there we go and we go
277:26 - like this that's it it actually does
277:28 - that but how is it going to tell me that
277:31 - somebody is logged in or not that's the
277:33 - job of the context it gives me the
277:35 - information right now it's going to tell
277:37 - me just a Boolean information and a way
277:39 - to update that Boolean information but
277:41 - you can pass on so much of the
277:42 - information here so again this will be
277:44 - responsible for just two things giving
277:46 - me a Boolean value and the ability to
277:50 - update that Boolean value otherwise
277:51 - what's the point of it it will always
277:53 - give you the same information so what
277:55 - we're going to do is after this context
277:58 - that we have we'll first declare the
278:00 - data type here so how we do that we
278:03 - simply go ahead and use this and inside
278:04 - this we can have a curly braces this is
278:07 - a type declaration you can avoid that
278:09 - skip that that's no big deal but I'll
278:11 - still declare that the first one is auth
278:13 - status
278:14 - the auth status obviously is going to be
278:16 - a Boolean and then a method or a way how
278:19 - I can update this so I'll just call this
278:21 - one as set odd status
278:23 - and this status obviously is a Boolean
278:25 - type but I am declaring a method here so
278:27 - notice here this is a callback not
278:30 - callback It's actually an arrow function
278:31 - so it doesn't do anything it returns you
278:35 - void but now I have mentioned my data
278:37 - type that hey there would be a value
278:39 - which will be true and false and I have
278:40 - the ability to update this value why are
278:43 - the context as well so by default dot
278:45 - status will be false so nobody is logged
278:47 - in and I'll also give that that hey
278:50 - right now this is the empty method but
278:51 - since I am expecting or accepting a
278:54 - method you can go ahead and provide me a
278:56 - value and since I'm also providing out
278:58 - States using this method you can
278:59 - actually change this that's the whole
279:01 - idea and that's how you always actually
279:03 - do this you can provide more information
279:05 - here an entire object as well but it's
279:07 - really simple now this is the half part
279:09 - this is the half part that's the context
279:11 - you also have to have a provider
279:14 - see this is the informational part of it
279:16 - context and in when I'll be creating
279:18 - component I'll show you that I can
279:20 - actually just like I create user State I
279:22 - can create a simpler hook like that
279:24 - which will give me direct information
279:26 - whether user is logged in or not and
279:27 - I'll I'll actually ask the use for this
279:30 - provider is something which wraps all
279:32 - these components because otherwise uh
279:34 - there is a prop Drilling and a whole lot
279:36 - of things in the react itself so what
279:37 - I'll be doing is I'll be creating a
279:39 - provider which will act as a wrapping
279:41 - box where I can put my components and
279:43 - anytime my component need an information
279:45 - I can just directly grab it so this is
279:47 - how I do it export const auth provider
279:50 - auth context.provider now since this
279:52 - auth context is Created from this create
279:55 - context it has the ability of that for
279:57 - more information read the react docs
280:00 - that's the basic once we have all of
280:01 - this let's go ahead and Export this so
280:03 - we are going to go ahead and say export
280:05 - and did we export it no export const
280:08 - auth provider let's go ahead and Export
280:10 - default as well
280:12 - although not required but I prefer to
280:14 - have a default so that I don't use curly
280:15 - braces and all of that I'll just have
280:17 - this one
280:18 - all right that's the part one of it now
280:21 - also let's go ahead and make a hook from
280:24 - it now how do you design the custom
280:26 - hooks that's that's an interesting one
280:27 - let's go ahead and design a hook it will
280:30 - be not as powerful as a use State use
280:32 - effect something like that but it's it's
280:33 - our hook we'll call this one as use auth
280:36 - there's no such thing in the react which
280:38 - is known as use auth so we'll be
280:40 - creating our own how can I create
280:42 - such hook on my own you can you can you
280:46 - can do this really simple steps so first
280:49 - and foremost you have to use the context
280:50 - so use context from react that's the
280:54 - first part also bring in that auth
280:56 - context that you have created
280:58 - so now it's super simple just go ahead
281:00 - and say const use auth is my hook just
281:03 - like this
281:04 - and there we go what does this hook does
281:07 - every single time you use this hook it
281:10 - just provides you the data which is
281:12 - there in this auth context what's the
281:14 - data Yep this exact data and all I'm
281:17 - looking up for is this auth context and
281:20 - Status so all the data will be given to
281:22 - you so now I can just go ahead and say
281:24 - hey give me the data and the data will
281:26 - be coming up from use context auth
281:28 - context
281:29 - that's it this is classic react 101
281:32 - again this can be a little bit confusing
281:34 - but this is what we have and after this
281:36 - you can just go ahead and simply say
281:38 - return data and the data will be
281:40 - returned to you now what's inside this
281:42 - data that's very very crucial uh
281:45 - question I'll surely answer that but
281:47 - it's easier to answer all of this when
281:49 - I'll actually show you directly in the
281:51 - console log that's that's much easier so
281:53 - there we go finally we'll be exporting
281:54 - this now I highly highly recommend that
281:57 - you go ahead and read a little bit so in
281:59 - case you are confused about this part of
282:01 - the code go ahead and say that hey I
282:03 - want to study more about this let me
282:05 - show you this so This use context and
282:06 - the react is actually available directly
282:08 - so just search for this use context and
282:11 - in the react and I'm pretty sure they'll
282:14 - redirect to best official documentation
282:16 - yeah here it is notice here this is why
282:19 - it's saying use context is a react hook
282:21 - that lets you to read and subscribe to
282:23 - the context from your component context
282:25 - is something that we are creating and it
282:27 - reads And subscribe to our contacts so
282:29 - that anytime there is a change and all
282:31 - of that it actually automatically gets
282:33 - to know that
282:34 - and then it's actually used to passing
282:36 - the data deeply into the tree whatever
282:38 - that's exactly what you are using and
282:40 - notice here they are exactly saying that
282:42 - hey how to use it caveats and all of
282:44 - that and we're using exactly what they
282:46 - are doing
282:47 - so notice here we have created this
282:49 - provider something like this will be
282:50 - using almost exactly like this theme
282:52 - context or provider something like this
282:54 - so read the documentation a little bit
282:56 - that how they are doing it that's the
282:58 - basic in case you don't understand it
283:00 - much I do have a video on the context as
283:03 - well on my channel if you want a newer
283:04 - one just let me know in the comment
283:06 - section I'll try to do that as well all
283:08 - right so a lot of work that we have done
283:09 - in this one video we have created a lot
283:11 - of things upright connection is all done
283:13 - uh configurations is all done context is
283:16 - all done these are major portion of it
283:18 - we have to spend a little bit time in
283:20 - creating the component since this app
283:22 - looks beautiful and beautiful takes time
283:24 - so the next video is all about creating
283:27 - the components don't worry I'll not
283:29 - waste a lot of your time in just the CSS
283:31 - part of it I'll give you directly there
283:33 - because there's no sense of it uh we are
283:35 - not on the Tailwind side we are on the
283:37 - next year's side and I highly highly
283:39 - recommend to read a little bit more
283:40 - about it because I can understand
283:42 - already this context part if your react
283:45 - Basics and Foundations are not that
283:46 - great you will struggle here either
283:49 - brush of them or just ask me I'll do
283:51 - that so go ahead understand it if you
283:53 - got this one you know it's basic one so
283:55 - that's it for this video I hope you have
283:57 - enjoyed this one let's go ahead and
283:59 - catch up in the next one
284:02 - hey there everyone hitesh here and
284:05 - welcome to another video or another
284:06 - section of the video if you're watching
284:08 - it in the long run so in this section of
284:11 - the entire training that we're doing
284:13 - we'll be focusing a little bit on
284:14 - building the components now components
284:17 - are not very crucial apart from login
284:18 - and sign up rest of them are just for
284:20 - the beautification the Avatar that we
284:22 - are getting is just holding the images
284:24 - the profile card it's not doing much
284:26 - just checking available and If the
284:28 - variable is present display this if it
284:30 - does not present display that I will not
284:32 - be wasting your time in just giving you
284:35 - these CSS classes or the Tailwind
284:37 - classes it just is a wastage of your
284:40 - valuable time so since we are focusing
284:42 - on next year's and upright I'll be
284:43 - skipping that part I'll give you these
284:45 - code Snippets via my GitHub repository
284:47 - and I'll be just copying and pasting
284:49 - them via my coding notes that I have
284:51 - already with me but I will be still
284:53 - writing the important portion of it the
284:55 - logical portion where it's required only
284:56 - the return statement where it returns an
284:58 - input box and the buttons and all of
285:00 - that will be bringing them up from my
285:02 - notes itself so this section is wholly
285:04 - divided just in just four uh coming up
285:07 - with the components and finishing them
285:08 - up with so that's the plan for this
285:10 - particular section let's go up here in
285:13 - the uh this portion on my code editor
285:16 - and let's try to have this one so inside
285:18 - the source we are still not going into
285:20 - the app directory we are still into the
285:22 - new directory which is known as uh
285:25 - components
285:27 - components there we go now this
285:29 - component let's first take down the most
285:32 - important one the signups and the login
285:33 - because rest of them are just copy and
285:35 - paste so let's start with the sign up
285:37 - component so we'll be going with the
285:39 - sign up and of course dot TSX because
285:41 - it's a component itself now first and
285:43 - foremost this is going to be a client
285:45 - component so I'll just go ahead and
285:46 - declare this like this let me just move
285:48 - my keyboard a little bit
285:50 - so we have this use client once we have
285:52 - this we'll be needing the app right so
285:55 - first bring that so how we are going to
285:57 - bring the app right that's the most
285:58 - important question it's pretty simple if
286:00 - you remember we have this app right
286:02 - service that we created an object from
286:04 - the upright class file and we exported
286:06 - that this is exactly what we'll be going
286:09 - through and working with that uh also
286:11 - thanks to our uh at the rate symbols so
286:14 - that we can actually reference it from
286:16 - any files anywhere directly from the
286:17 - reference of this one okay another thing
286:20 - is in the sign up we'll be actually
286:23 - taking some advantage of our hook as
286:25 - well so let's go ahead and bring that
286:26 - one as well so we'll be saying import
286:28 - and I don't want to import this using
286:31 - the curly braces because if you go ahead
286:33 - and look into the context and use auth
286:35 - we actually exported that as a default
286:37 - as well so we don't need to do this we
286:39 - can just go ahead and directly Say Hey I
286:41 - want to use this use auth and I can
286:43 - directly bring this up
286:45 - now we'll be needing some link as well
286:46 - uh in a minute but let's go ahead and
286:49 - first import them so next link
286:51 - oops not like that
286:55 - from next link there we go and we'll be
286:57 - needing the router as well so let's go
286:59 - ahead and bring router and here's a
287:01 - common mistake that is there in all of
287:04 - the suggestion so don't just bring this
287:06 - from the router itself we want to bring
287:08 - it from the navigation itself so let's
287:10 - go ahead bring this up and say
287:12 - navigation
287:14 - nothing else
287:16 - okay so one more thing one more
287:18 - important thing how we are going to be
287:19 - submitting the form that's that's
287:21 - important one so let's ring in react and
287:24 - uh we will be using use state for sure
287:26 - uh but in the react now you have
287:29 - actually this uh form event that we'll
287:31 - be using now what happens with the form
287:33 - event is uh we can do a lot of tracking
287:36 - of what's the form how it is being
287:38 - filled up all these data so we can
287:40 - actually take advantage of it and we'll
287:43 - be taking one that one
287:44 - all right so first and foremost let's
287:46 - create a simple sign up so we'll be
287:48 - saying con sign up just like this and
287:50 - there we go now obviously once the sign
287:52 - up is there I want to export that as
287:54 - well so export default sign up that part
287:56 - is easy we will be returning something
287:58 - from here so let's go ahead and First
288:00 - Take Care Of The Return part as well so
288:01 - there we go we are returning nothing as
288:03 - of now but let's just say we return a
288:05 - simple div
288:06 - that says a sign up and we just go ahead
288:10 - and close it up just like that so that
288:12 - now we are not worried about that what
288:14 - we are returning back it's obviously
288:15 - going to be a sign of form but first
288:17 - let's take out the logical part okay
288:20 - going like this first I need this form
288:23 - data to be somewhere because I'm
288:24 - collecting name email and password so
288:26 - let's go ahead and do that so I'll say
288:28 - that hey I'll be collecting that into
288:30 - the form data and set form data this
288:33 - will be a object just like this so I'll
288:37 - come back here and I'll say I'm
288:38 - collecting email for sure I'm collecting
288:40 - the password for sure and I'm collecting
288:42 - the name so that's all I'm collecting
288:44 - now obviously to show some errors I will
288:47 - need a state which actually tracks my
288:49 - errors as well so I'll just go ahead and
288:50 - say hey here is what is keeping track of
288:52 - errors and set error right now the error
288:56 - is nothing so that's okay now coming up
288:59 - on the most important part how the
289:01 - signup will know that whether somebody
289:03 - is logged in or not and how it is going
289:06 - to do all of that for this we are going
289:07 - to take advantage of this use auth and
289:11 - there is a similarity here lots of
289:12 - similarity let me show you that how this
289:14 - is
289:15 - so what we're going to do is we are
289:16 - going to go ahead and extract so we'll
289:19 - be extracting just one this which is set
289:22 - let me just go ahead and open this
289:25 - and
289:26 - will be opening up not this one we need
289:29 - this one so set auth status copy that
289:31 - this is the one that I need not both of
289:34 - them or all of them this is the one I
289:35 - need and by destructuring I can extract
289:37 - the one information which I really need
289:39 - so in this case I'll be using this use
289:42 - auth there we go just like how I do it
289:45 - there we go forgot the equal sign there
289:48 - now you might be noticing a striking
289:50 - similarity because let's just say we are
289:52 - also having this use router you use the
289:54 - use router almost similar to this one so
289:56 - you go ahead and say const router and
289:59 - that is use router just like this
290:01 - exactly similar so there is no
290:02 - difference in the hooks that we are
290:04 - using so this is exactly like that
290:06 - whatever the coding of the router is
290:08 - behind the scene we actually get all the
290:10 - information in this and you get all the
290:11 - methods like router.push and all that
290:14 - all that that you need similarly in this
290:16 - I use auth it provides me just two
290:18 - things one is auth State status I can
290:21 - actually import that or I can just go
290:22 - ahead and use this auth status which is
290:24 - a method responsible for changing this
290:26 - this one here so it's totally up to you
290:29 - whichever one to go with the path uh
290:31 - that's totally okay okay next up we want
290:35 - to Simply go ahead and have a method
290:37 - which actually creates a user so let's
290:40 - go ahead and create that so we'll be
290:42 - saying hey this one is going to be
290:43 - create or create user however you want
290:45 - to call this one this one is going to be
290:47 - async and then we'll be capturing an
290:50 - event which will be a form event just
290:52 - like this and not only this you can
290:54 - actually go ahead and specifically
290:56 - mention that hey what kind of elements
290:58 - are going to be coming in not really
291:00 - required but in case you want to go too
291:02 - much into the typescript part of it you
291:03 - can actually go ahead and do this you
291:05 - can go ahead and say that hey there will
291:06 - be HTML form Element no suggestion form
291:10 - element so I can explicitly mention that
291:12 - these are the data that will be coming
291:13 - to me in this case the first thing
291:16 - whenever there's a form you don't want
291:18 - to submit it you want to prevent the
291:19 - default basic JavaScript 101 so prevent
291:22 - default so that's the one part of it so
291:24 - I'll just go ahead and say prevent
291:25 - default after this I'll just run the try
291:28 - catch so try catch the catch part is
291:31 - easy I'll just cast this one as error
291:33 - that will be of any I don't know I
291:36 - really don't care too much and I'll be
291:38 - simply setting the error because I have
291:39 - a state for tracking it and I'll be just
291:41 - saying error.message that's basic now in
291:44 - the try part I need to go ahead and
291:46 - create a user for this I'll be using a
291:48 - weight and then I have a service already
291:50 - written for it which is apprite service
291:52 - and this has a method I don't need to
291:55 - use dot account.create I can because
291:57 - there is an account export as well but I
292:00 - don't need to do this if I go ahead and
292:01 - open up my app right notice here I'm
292:03 - actually exporting this one here which
292:04 - is app right I'm definitely exporting
292:06 - the account as well I can use that but
292:08 - since I have all these methods which are
292:10 - actually doing everything for me so I'll
292:12 - just go ahead and use that one rather
292:14 - one of the method that I created was
292:16 - this create a user account and I can
292:19 - pass on all the information directly
292:20 - here and I don't need to do it like this
292:23 - I can just go ahead and simply pass on
292:25 - my form data because my form data is
292:28 - actually a state just like here all
292:31 - these information and my method is also
292:33 - expecting the same information so email
292:36 - password all of this so this is being
292:37 - passed on to it that's it and you just
292:40 - simply go ahead and create an account
292:41 - now let's also hold this into a variable
292:43 - so we'll just go ahead and call this one
292:45 - as user data just like this and let's
292:48 - hold this one now once the information
292:49 - is in my user variable I can actually
292:52 - check whether the user I actually got a
292:54 - user or not and at this point I highly
292:56 - recommend to Simply go ahead and console
292:58 - log the user data so that you find out
293:00 - whether things were okay or they were a
293:02 - little shaky I'll use a simple if else
293:04 - statement I'll say if the user data is
293:06 - there then go ahead and set this one set
293:10 - all status that hey we are authorizing
293:12 - it so let's just set it to true and
293:14 - let's also push the user since we are
293:16 - using the router so router.push we want
293:18 - to push it to profile right now we don't
293:20 - have this but we'll definitely create
293:22 - this one in the else case we do nothing
293:24 - so simply by default the status is false
293:28 - so I don't have to worry anything about
293:29 - it and that is majorly what my logical
293:32 - part is now obviously in this one as
293:34 - well I'll give you some of the code as
293:36 - well so don't you worry in that part but
293:38 - I'll explain you that part directly
293:40 - so this is a long piece of code and
293:43 - again don't worry you'll be finding
293:44 - everything inside of the GitHub
293:46 - repository all we are doing this is all
293:48 - just gibberish the CSS of the Tailwind
293:51 - so we don't even bother much about it if
293:53 - it is there that's great if it doesn't
293:54 - there that's okay fine you can create a
293:57 - bare minimum forms as well now first and
293:59 - foremost there are a couple of links
294:01 - which are going on to the login as well
294:02 - we haven't created that but we'll surely
294:04 - create that now most important thing
294:06 - here is if I go back here this one value
294:09 - which is form data dot name this is
294:12 - where we are capturing the name this is
294:14 - the on change event which actually pass
294:16 - on the information from the form to my
294:19 - state that is the most important and the
294:21 - email is exactly same the password is
294:23 - exactly same I could have written that
294:24 - but that would simply waste your time
294:26 - and here we are simply saying hey this
294:28 - is the type submit so as soon as the
294:30 - submit is being done uh we actually
294:32 - capture all of this and we can just
294:34 - simply go ahead and work with that so
294:36 - nothing in case you are little panicky
294:39 - about that that hey how this is all have
294:40 - happening and all of this you probably
294:42 - don't need to worry too much about it
294:44 - you can just simply go ahead and simply
294:46 - call a method that hey what happens on
294:48 - click as well totally up to you how you
294:50 - submit the form data that's totally up
294:52 - to you how you work with that and how
294:53 - you feel comfortable with that we can
294:56 - definitely come back and debug obviously
294:57 - that's a part of the life so we can
294:59 - actually go ahead and work with that so
295:01 - this is a form event if any form event
295:03 - happens we'll just simply say create if
295:06 - it doesn't work I'll just come back and
295:07 - set it to on click all right so that's
295:09 - the basic of it let's just save this
295:12 - all right hope there is no issue into
295:14 - this one let's go ahead and now create
295:16 - the login form or the login component as
295:19 - well
295:20 - and yes one more thing I would like to
295:22 - mention here is that a notice here in
295:24 - this portion I'm not checking whether my
295:26 - data is actually properly set or not so
295:28 - form data if email is present or not I'm
295:29 - not checking that uh usually this can be
295:32 - done automatically by the app right they
295:33 - check it and provides you better error
295:34 - messages and all of that but in case you
295:36 - want to do it go ahead do it there is no
295:38 - harm in that let's create another
295:39 - component almost exactly similar to this
295:42 - rest of them are just boilerplates they
295:43 - are no logical components they don't
295:46 - have their brain they are just display
295:47 - components so let's go ahead and create
295:49 - another one which will be login and
295:51 - again since I have predefined some of
295:54 - the things in this one so go ahead and
295:55 - make them named exactly so this one is
295:58 - TSX just like that now one of the
296:01 - important thing let me mention this
296:02 - already in advance you'll notice that
296:04 - here we are actually redirecting it so
296:07 - notice here this link says slash login
296:09 - so right now we are creating components
296:11 - not the pages at the time of when we'll
296:13 - be creating Pages I'll walk you through
296:14 - but these are important so just keep
296:16 - that in mind let's go into the sign up
296:18 - and log in and first let's go into sign
296:21 - up and bring all of this copy paste into
296:24 - the login that's the basic and now let's
296:26 - create a method so this one will be
296:28 - login
296:30 - and that login is going to be just like
296:32 - this
296:33 - and we'll be saying
296:36 - export default login so that part is
296:38 - handled
296:39 - all right now the logic part again
296:41 - exactly same we'll be needing a router
296:43 - so that we can push the user onto the
296:45 - new page so let's just go ahead and say
296:47 - hey router let's go ahead and do a use
296:49 - router just like that we obviously need
296:51 - somebody who can change my auth state
296:53 - because my provider will be providing
296:55 - all information from there so let's go
296:57 - ahead and say hey we want this set all
296:59 - status that will be coming up from our
297:01 - own designed hook which is use auth and
297:03 - we'll be needing the form data so the
297:05 - form data just like this and there we go
297:07 - we'll be needing some information email
297:09 - and password that's it nothing much more
297:12 - we'll be setting the errors as well so
297:14 - let's go ahead and set the error as
297:16 - default now let's go ahead and create a
297:18 - method now again you can create a method
297:20 - on click you can create a method on when
297:21 - some events are triggered I know which
297:23 - event I'm looking up for so I'll just go
297:25 - ahead and directly go for that so this
297:26 - one is login so notice here it is async
297:29 - it is looking for an event which is a
297:31 - form event which actually gives me all
297:32 - the HTML form element again not
297:34 - comfortable with this totally okay you
297:36 - can just go ahead and say on submit on
297:39 - login on click whatever makes sense and
297:41 - whatever makes you comfortable there is
297:43 - no right and wrong in this particular
297:45 - portion
297:46 - okay uh first thing just like always
297:48 - we'll be preventing the defaults so e
297:50 - dot suggestions prevent default
297:53 - once the default is prevented let's go
297:55 - ahead and have uh simply held over the
297:58 - try catch
297:59 - and here we'll be saying that set error
298:04 - set error error.message that's fine and
298:07 - simply here we can just go ahead and
298:08 - await for the that we created the
298:13 - did we have this one yep we have the app
298:15 - right service so apprite Service uh
298:18 - login form and I can just pass on the
298:19 - data directly to it that's it and if it
298:22 - is all successful first let's hold this
298:24 - into variable because what we'll be
298:26 - checking without that so const and let's
298:28 - call this one this will be creating a
298:30 - session just like this
298:32 - if it is all good let's check this if we
298:35 - have a session which actually upright
298:38 - creates it for us we'll be simply saying
298:40 - uh set auth status probably this one is
298:43 - extra yep a set out status is true and
298:46 - will be pushing the router to the
298:48 - profile that's it really really basic
298:50 - couldn't be much more simpler than this
298:52 - I'll shrink this and I'll just go here
298:55 - because obviously we need to return
298:56 - something again return part is exactly
298:58 - same so that's why I'm not focusing much
299:00 - on that part I'll walk you through with
299:02 - that still so notice here this is all
299:05 - just the form designing and all of that
299:06 - sign in actually goes on to the link
299:08 - which says sign in sign up and basic
299:11 - like that and simply after that we have
299:13 - this email address important parts are
299:15 - here that the value is form data.email
299:18 - on change is also handled here nicely
299:20 - and set form data previous values
299:24 - expanding the previous one getting the
299:27 - email as Target email so very basic
299:29 - nothing too much extraordinary there if
299:31 - you know even your basic job script you
299:33 - can actually figure it out Simply we
299:34 - have this submit as form as soon as the
299:36 - form is being submitted we'll be
299:38 - capturing it while the event trigger
299:40 - which is for form data and we can
299:41 - actually do all of this so really really
299:43 - basic so these were the most logical one
299:46 - complex one after this is just a copy
299:49 - and paste but I'll still do it because
299:51 - obviously we need to completion we need
299:53 - a completion on this one let's go ahead
299:55 - and do one by one so we'll first go
299:57 - ahead and say
299:59 - Avatar
300:01 - ta and why is it not typing yeah little
300:04 - slow when you record the videos it's
300:06 - actually a little slow the system is
300:07 - otherwise it's really Beast fast okay
300:10 - what we're doing in this Avatar uh
300:12 - nothing really much we'll be importing
300:14 - the react
300:16 - there we go I will be creating a type
300:18 - because we'll be injecting uh some of
300:20 - the images into it that's what Avatar is
300:22 - let's go ahead and have this type props
300:25 - are we importing something yeah we are
300:27 - importing type from OS now we don't need
300:29 - this
300:30 - so we'll be having some props and inside
300:33 - this will be saying image is going to be
300:36 - and string and there will be some alt
300:39 - text if somebody gives me but I'll keep
300:41 - this one as optional if they give it to
300:43 - me that's nice otherwise it's okay and
300:46 - here we need actually column because we
300:48 - are defining types so sometimes the
300:50 - suggestions are really bad okay and
300:52 - we'll be saying type props is declared
300:54 - but never used I'll be using that in a
300:56 - second don't worry
300:59 - now let's go ahead and say const Avatar
301:01 - somebody will be giving me these props
301:03 - just like this and let's go ahead and
301:06 - have it just like this and then I have
301:09 - my code base which is returning me as
301:11 - CSS class CSS object basically
301:14 - so there we go we have this class
301:15 - rounded all of that we will be having
301:17 - these images
301:19 - why are you having issues because this
301:21 - doesn't need to be like this these are
301:23 - not a prop declaration like this uh the
301:26 - way how this is being done is whenever
301:28 - somebody calls this this will be
301:30 - returning a react component so react
301:34 - functional component basically and the
301:37 - data type that it is expecting is
301:39 - actually inside the props
301:42 - and this should actually do the job so
301:44 - let's go ahead and have it like this
301:46 - react functional component props equals
301:49 - looks okay to me
301:51 - what is your issue now it says type
301:54 - playlist can be used in the typescript
301:55 - file ah I named it as jsx my bad
301:59 - I don't edit these out because these are
302:01 - most important thing to understand TSX
302:04 - now it's happy
302:06 - okay so there we go now the Avatar is
302:09 - done another such component is also
302:11 - almost similar to that so I'll be just
302:12 - directly creating that again these are
302:14 - copy paste I know this is very boring so
302:16 - speed it up 2X or something like that
302:17 - this blog is not doing any blog it's
302:20 - it's just very simple dumb component it
302:23 - doesn't even accept anything somebody
302:24 - just runs it uh gets me a Boolean value
302:27 - and there we go so I'll just go ahead
302:29 - and have it it just has this simple
302:31 - color a blur a Blog at the back it's
302:36 - just a Blog blog doesn't mean those
302:37 - article writing blogs are simple
302:39 - circular blog blob yeah so that that's
302:42 - one I'll show you what's the use case of
302:44 - it it's nothing it just has this uh SVG
302:47 - file into it nothing else so based on
302:50 - true and false you can pass it on and
302:52 - make it enable and disable for the
302:53 - mobile responsive and all of that after
302:55 - that almost similar to this we have a
302:57 - header file as well so I'll just walk
302:59 - you through with that one as well so
303:01 - we'll be saying header dot TSX and I'll
303:04 - be just copying and pasting this one
303:05 - again because literally there is nothing
303:08 - here that is new and we have discussed
303:10 - everything here so what we have is we
303:14 - need to actually bring this auth
303:16 - from Context use auth why is it having
303:19 - an issue we don't have a logo yet but
303:21 - we'll be creating it very soon so let me
303:23 - just try that why the import
303:26 - of use auth
303:29 - probably there is some typos probably
303:32 - missed there and Logo will be creating
303:34 - in a minute what it is having is a menu
303:36 - items so we have home about us and the
303:38 - contact they are going nowhere so it
303:40 - just is helping us to get the visualize
303:42 - there and notice here we have this use
303:44 - auth status as well based on user is
303:47 - logged in or Not So based on that we are
303:49 - checking some things this is where we
303:51 - are looping through the menu items and
303:53 - we are creating simple navigation bar
303:55 - and whether the user is on profile or
303:57 - not so based on that we are saying in a
303:59 - slash profile or slash sign up based on
304:01 - this auth very basic ternary operator if
304:04 - you have reached so far in the course
304:05 - itself you are pretty much aware of this
304:07 - one similarly we are saying hey we
304:09 - should show him the sign up or we should
304:11 - show him profile show him a log out
304:13 - route or a login route based on that so
304:15 - very basic there is nothing too much to
304:17 - be worried about all right so let's save
304:19 - this obviously there is an error here
304:21 - because we don't have this component log
304:23 - logo let's see if it allows me to create
304:26 - this directly from here
304:28 - uh probably not I have to create it
304:30 - manually and let's right click and let's
304:33 - go ahead and Logo dot TSX logo is
304:36 - exactly same uh it just gets you a logo
304:39 - so we actually love the logo here so we
304:41 - are directly using an SVG path here
304:42 - again nothing much logo is just an SVG
304:45 - so this is your SVG it returns your logo
304:47 - uh that's it and you simply go ahead and
304:51 - use this one so
304:53 - should be should be all happy
304:56 - okay let's try to are we exporting the
304:59 - logo as well yeah we are exporting but
305:01 - why this is having an issue let's try
305:02 - this one more time so I want to bring
305:04 - the logo from dot slash logo now it's
305:07 - all happy
305:08 - just want me to rewrite the thing
305:10 - similar to this we have just one more
305:12 - rest of all are done I know very patient
305:15 - I'm testing your patience out
305:16 - okay the next one is profile card and
305:19 - this is having no much information so
305:21 - let's right click and create a profile
305:23 - and the profile card dot TSX
305:27 - let me bring this again profile card
305:29 - from my notes itself because we are
305:32 - doing nothing much here but uh still
305:34 - I'll just walk you through with some of
305:35 - the important Concept in the profile
305:37 - card so this is very basic uh why are we
305:40 - having issue in Avatar
305:44 - TSX
305:46 - okay shouldn't be having an issue just
305:48 - like this
305:50 - dot slash Avatar
305:52 - are we not exporting this Avatar
305:55 - yeah we are not exporting this
306:00 - export default Avatar should be all good
306:02 - so that's also a testing all right now
306:05 - uh the most important thing here is if
306:07 - we go ahead and declare a simple const
306:09 - like profile card and we'll be having
306:11 - react functional component just like
306:14 - this go like this and of course export
306:16 - this as well export default profile card
306:18 - now this is not going to do any return
306:21 - type like that so we can just go ahead
306:23 - and get rid of this there we go the most
306:26 - important thing in here is that as soon
306:28 - as this component loads up we want some
306:30 - states to come into the picture and as
306:32 - soon as this one loads up that means I
306:34 - need to use use effect to figure out
306:37 - that whether somebody is logged in or
306:38 - not if he is logged in I can grab some
306:40 - data and in case you remember we
306:42 - actually wrote a script for it as soon
306:44 - as I call this one method here which
306:46 - says uh get current user it actually
306:50 - gives me the user details so we'll be
306:52 - actually taking advantage of this one so
306:54 - first and foremost let's create a simple
306:56 - a state
306:58 - so const user
307:01 - user set user just like this so really
307:04 - basic and a couple of interesting stuff
307:07 - here notice here we don't have this
307:09 - model so why there is suggestion of this
307:11 - and yes you can actually go ahead and
307:13 - completely get rid of this so this will
307:16 - be absolutely happy this will work this
307:19 - will 100 work but let me show you one
307:21 - more interesting stuff about the app
307:23 - right if you go ahead and simply say
307:25 - models.user because uh what you are
307:27 - about to inject into this is not going
307:29 - to be a regular string it is something
307:30 - that is coming up from the app right
307:32 - itself and apprite actually gives you
307:34 - these types as well and the one of the
307:36 - great advantages you can go anywhere
307:37 - here and you can just actually import
307:39 - these models from the app right and
307:41 - simply work with that now right now this
307:43 - is complaining let's see the complaint
307:45 - that generic type user requires one
307:47 - argument and we haven't passed on to
307:49 - this one so right now this is all null
307:52 - and let's go ahead and use this so let
307:54 - me just quickly check this that why is
307:56 - it still crying
307:58 - all right had to look into the
308:00 - documentation a little bit uh with this
308:02 - error so exactly let me show you what I
308:03 - found out when I say model.user it's
308:06 - saying that hey it requires generic type
308:08 - user requires one argument so after
308:10 - looking a little bit into this models by
308:12 - the app right I find out that hey this
308:14 - one is saying that hey uh give me
308:16 - another type so just like with the
308:17 - angular brackets typescript we actually
308:20 - need to provide it one here which is
308:22 - also given to us by model so no need of
308:23 - further includance of this and they say
308:25 - that hey if you go ahead and set it up
308:27 - as preferences it will just get rid of
308:29 - this again if this is something which is
308:32 - too much for you can cut this out but we
308:35 - are not taking advantage of the
308:36 - typescript in that case we are simply
308:38 - saying that hey this is a user right now
308:39 - there is a null there could be something
308:41 - else into it or you can just set it up
308:42 - with empty string whatever you like but
308:44 - we want to be little bit more explicit
308:46 - and take advantage of the typescript so
308:49 - that's why we are doing it after this is
308:51 - super simple we have already seen this
308:52 - so many times so we'll be saying Hey I
308:54 - want to have a use effect just like this
308:58 - and we'll be saying hey use effect this
309:01 - will be dependent on nothing as soon as
309:03 - this component loads I want to take
309:04 - advantage of this one go ahead and
309:07 - execute a method
309:08 - you can name a method outside and then
309:11 - call it or maybe just call an Fe here
309:13 - and that's it if we immediately invoked
309:15 - function we'll be calling it as an async
309:18 - if we and there we go
309:21 - that's it this one takes no parameter
309:23 - nothing is needed I'll go inside in here
309:25 - and say that hey I will be awaiting and
309:29 - this app right service
309:31 - can actually call the get current user
309:34 - the method that I created it doesn't
309:36 - take any parameter if the user will be
309:38 - there then it will be doing the job and
309:40 - that's it let's hold this into a
309:41 - variable so let's just call this one as
309:43 - user data again
309:46 - if the user data is there then we'll be
309:49 - setting the user that's it let's go
309:51 - ahead and say that hey if there is user
309:54 - data
309:57 - user data then uh suggestion could have
310:00 - used that
310:01 - set user as user data that's it
310:04 - otherwise let's keep it null and we'll
310:05 - be checking all of our condition based
310:07 - on that so I'll just copy and paste the
310:09 - conditions that we have already checked
310:11 - so I'll just go up here
310:13 - and paste it now all we are doing is we
310:16 - are rendering a component based on
310:17 - whether the user is there or not if user
310:19 - is not there we are not rendering it so
310:21 - null yeah you get that very basic
310:23 - JavaScript and in this case we are just
310:25 - rendering a profile and notice here
310:26 - there are some information that I'm
310:28 - getting so this user is an object model
310:32 - that is coming up from upright it has
310:33 - all the information that you are storing
310:35 - for a user and we're not storing much
310:36 - we're just storing name and email so
310:38 - that's why you see that in the place of
310:40 - name we are saying simply user dot name
310:43 - we could have done it better in case you
310:45 - don't like this approach you want to
310:46 - always show the card then you can check
310:48 - if user is there then show the username
310:50 - otherwise show the null very basic
310:53 - ternary operator you can go ahead and do
310:54 - that that's basics of it so all right
310:57 - too much of the basic some values are
311:00 - hard coded obviously because we are not
311:01 - taking that data simply then it says log
311:03 - out button and that's it we are just
311:05 - doing the profile card so all right so
311:07 - all of the components are ready and
311:08 - let's evaluate the situation where we
311:10 - are right now in the app right so let me
311:12 - summarize this this will be a super
311:14 - helpful summary station
311:16 - first we haven't talked about the app
311:18 - yet everything here is absolute basic we
311:20 - haven't touched it this was all the
311:21 - preparation ground so first we created a
311:24 - service which is config.ts and before
311:26 - even creating that config service we
311:27 - went into the config this is nothing we
311:30 - are just setting up our configuration
311:31 - variable which are given to us by the
311:33 - app right itself once we are done with
311:35 - this then we simply go ahead and create
311:37 - a upright config now you can create all
311:39 - these methods into separate files and
311:41 - folders but I think that's not a very
311:43 - scalable approach I want to keep all
311:45 - this in one file at least the odds1 file
311:47 - database related stuff in one file and
311:49 - maybe storage in one file and we can go
311:51 - with that then we created and worked on
311:53 - with this so we created couple of types
311:55 - after that we set it up the end point
311:57 - and create an account out of this app
311:59 - right then we simply created a class and
312:01 - created a couple of methods so that we
312:03 - can reuse them we created a create user
312:05 - this is not a original method for
312:06 - creating the user in upright the
312:07 - original method is account.create so we
312:10 - actually wrapped them up as a wrapper so
312:12 - that our code is more reusable
312:14 - and then we created a login we created a
312:17 - log out we created a get user to check
312:19 - the at least check that whether the user
312:21 - is there or not and then we created a
312:23 - log out and all these so it's logged in
312:25 - to check the user is logged in or not
312:26 - and get user to get the actual
312:28 - information after that we worked on to
312:30 - the context API we don't want to use
312:32 - Redux or anything so we simply used auth
312:34 - context provider we created our own hook
312:36 - which actually gets two values one is
312:39 - auth status and set auth status set odd
312:42 - status is capable of manipulating the
312:44 - auth status and the auth status is all
312:45 - status it's a Boolean value true and
312:47 - false then we created a hook based on
312:49 - this provider so auth context and we
312:52 - simply says anybody now should be able
312:53 - to use this context and should be able
312:55 - to get the data so anybody who uses it
312:58 - we return the data to it that is it that
313:01 - is all that we are doing in this one
313:03 - then after that we created a few
313:05 - components the most important components
313:07 - for us were login and sign up there is
313:08 - nothing too much into that just like we
313:10 - created the use router we simply also
313:13 - use the set all status which can
313:14 - manipulate our status that's it and as
313:17 - we will be wrapping our other components
313:19 - in the pages all of my components will
313:21 - be aware that the state of the user is
313:23 - logged in or not based on the context
313:25 - provider so that's all what we have done
313:27 - here we are just tracking for an event
313:29 - which is a form event if that event is
313:31 - triggered we are preventing the default
313:33 - trying to either sign up the user or log
313:35 - in the user rest of the components like
313:37 - logos these are nothing just filler
313:39 - elements there is literally nothing into
313:41 - it and similarly for headers and all
313:43 - this thing there is nothing too much
313:45 - going into that the next thing is super
313:47 - important for us that is handling the
313:50 - app right now I'll show you some of the
313:52 - interesting things about this app folder
313:54 - as well there is one more way how you
313:56 - can create your folders which is by the
313:58 - parenthesis so far we have seen with the
314:00 - square brackets but now I'll show you
314:02 - how you can do that with the parenthesis
314:03 - and what's the importance of this layout
314:05 - this layout can be directory level and
314:08 - for the global level as well I'll walk
314:10 - you through and we'll show you that as
314:11 - well but I think we need a small break
314:13 - as well in case you are watching in
314:14 - continuation that's great another
314:15 - segment is breaking out here if you're
314:17 - watching in the videos itself it will be
314:20 - catched up in the next video let's go
314:21 - ahead and see you there
314:24 - all right hey there everyone hitesh here
314:27 - and welcome back to the series if you're
314:30 - watching in continuation then that's
314:31 - great uh but in this video we'll try to
314:33 - finish up and wrap up this project
314:35 - because there is nothing too much to
314:37 - discuss and uh discuss in this video uh
314:39 - we have prepared everything our services
314:41 - are prepared for app right our
314:43 - components are prepared now we just need
314:44 - to do is bind up everything that's what
314:47 - the thing is but I don't want to repeat
314:48 - The Binding process as you have seen in
314:50 - the previous video where we discussed
314:52 - about how we can make a mongodb call and
314:55 - all of that I want to show you a
314:56 - different approach of that otherwise
314:57 - that would be a repetition of the things
314:59 - and it doesn't add value to your life
315:01 - and that's what my goal is add a value
315:03 - so let me show you one interesting thing
315:05 - which will be super helpful for you and
315:07 - again there is no right and wrong there
315:09 - are different approaches of doing the
315:10 - things sometimes you find more value in
315:12 - this approach sometimes you find Value
315:13 - in this approach more so I'll show you
315:15 - one such approach maybe there you can
315:17 - find some of the values all right let's
315:21 - go ahead and get started with that so uh
315:23 - this is the directory structure this is
315:25 - one of the project that we built in the
315:27 - earlier in this series or in the video
315:29 - wherever you are so notice here we were
315:32 - going into the source directory and we
315:34 - were keeping all the files here our app
315:35 - directory was important so we actually
315:37 - went into this the API is the backend
315:39 - which we kept into users and then we
315:42 - have a lot of folders inside it but if I
315:44 - go outside this API is a backend rest of
315:47 - all the things are front end so I hope
315:49 - you can imagine as the pages will like
315:52 - expand there will be so much of these
315:54 - directories which some of you might get
315:56 - panicked that hey this is a problematic
315:58 - structure directly here we are having
316:00 - our backend organized in just one folder
316:03 - why don't we have something which can
316:04 - organize our front end as well uh yep
316:07 - I'll explain you how you can do that
316:09 - just in this video that's exactly why
316:10 - I've opened this up so I'll walk you
316:12 - through that how we can do that in a
316:14 - minute I'll tell you that but first this
316:16 - is a different approach that we're using
316:18 - we won't be using any middleware or
316:19 - something because you have already
316:20 - knowledge of that so I won't be focusing
316:22 - on that I'll walk you through with a
316:23 - different approach of how you can do the
316:25 - things now first here let's take an
316:27 - example of this layout we haven't
316:29 - discussed it in much I did created a
316:31 - video earlier which is not a part of
316:33 - this series where we discussed the file
316:35 - structure a lot in details in case you
316:36 - want that go ahead and watch that live
316:38 - stream I was discussing that in the live
316:40 - YouTube video but I'll still give you a
316:42 - brief approach so notice here this is a
316:44 - layout this layout is actually right now
316:47 - inside my app directory so this is
316:49 - considered as a global layout what is
316:52 - the layout nothing much more it is a
316:53 - wrapper this will be a wrapper around
316:56 - all of the things and which are
316:57 - happening inside that directory so
316:59 - notice here in the app directory right
317:00 - now there is one thing only which is
317:01 - Page and this wrapper is actually a
317:04 - wrapper around the page itself so for
317:07 - example notice here there is a title
317:09 - here which says create next app so we'll
317:10 - just go ahead and say that this time we
317:13 - are not creating just an app so we are
317:14 - going to go ahead and say create next
317:17 - and app right app
317:20 - something like that
317:22 - and we we're gonna say description is
317:24 - generated by create next app uh now you
317:28 - are learning uh learning it on YouTube
317:31 - so we'll just get that now not only this
317:34 - what I want to show you is that notice
317:36 - here this component actually is a root
317:39 - layout component that means it's on root
317:41 - level so obviously that's where this is
317:42 - it accepts children and it renders the
317:46 - children the whole job of this component
317:48 - is to do nothing the whole job and idea
317:50 - is to just render the component but
317:53 - right now if I just save this and go
317:55 - back on to my code files and this is how
317:57 - it looks like but somehow if I actually
317:59 - want to modify all the pages that I have
318:02 - I can actually come here and every
318:04 - single page is going to render this I'll
318:05 - go inside the body I'll just say hey I
318:08 - want an H1 tag
318:10 - and this one is going to say this is uh
318:13 - all render element something like this
318:16 - and we'll add some classes so that we
318:18 - can actually see it much more easier so
318:20 - we'll just go ahead and say uh we'll
318:22 - just get a width of 100 we'll just get a
318:25 - background of a white maybe and the text
318:28 - is going to be black and the text is
318:31 - going to be 3XL just basic classes so
318:35 - what you'll notice now that every single
318:37 - page has this render element and maybe
318:39 - we can actually try something more fun
318:41 - in case you are enjoying these classes
318:43 - so text Dash Center if I can write that
318:46 - properly text Center so this is a render
318:49 - element now no matter what page you go
318:52 - this element will be present in every
318:55 - single element and that's the whole idea
318:57 - behind having this layout now if you
318:59 - amend anything so notice here we are
319:01 - since injecting this metadata this
319:03 - metadata will be presented in every
319:05 - single page that we have all right so
319:07 - now that you understand the importance
319:08 - of the layout it's not like that this is
319:11 - the only layout that you can go ahead
319:12 - and create there are other other layouts
319:14 - also that you can go ahead and create
319:16 - that and I'll walk you through that how
319:17 - you can actually go ahead and do that
319:19 - I'll show you in a minute all right so
319:21 - what we're going to do is notice here
319:23 - how interestingly we are going to modify
319:24 - everything we can just save this we are
319:26 - not worried about changing things here
319:29 - inside the app I'm going to create a new
319:31 - folder notice the syntax of how I'm
319:34 - actually creating these folders I'll
319:36 - create a folder I'll start with a
319:38 - parenthesis not the square bracket
319:40 - square bracket has a different meaning
319:42 - and it's a framework everything has a
319:44 - different meaning in here and I'll call
319:45 - this one as Pages now in the next JS
319:49 - still you can actually use this
319:50 - parenthesis to denote a special thing
319:53 - for you it will not affect anything
319:54 - inside the framework itself but it will
319:57 - help you to organize your files and
319:59 - directories and folders everything quite
320:01 - a lot so now inside this pages I can
320:03 - create a lot of things the first thing
320:05 - that I'm going to do is I'll create a
320:08 - page so I'm going to go ahead and say
320:09 - hey this will be page dot TSX just like
320:12 - this now why I'm creating this page only
320:15 - now this is a page which will be saying
320:18 - that hey what should I log in should I
320:21 - render this will act as a home page and
320:23 - I'll show you how it is being actually
320:25 - done because right now there is no other
320:26 - page so we'll be actually redirecting
320:29 - our home page that hey this is the
320:30 - children I'll do that
320:32 - now the first thing that I want to do
320:33 - here is that should I be rendering a
320:37 - home element or should I be rendering a
320:40 - profile card because if the user is
320:42 - logged in he should be seeing a profile
320:44 - card so for this we'll be using
320:45 - something like this so first and
320:47 - foremost I'm going to go ahead and say
320:48 - use client I'll surely inject some of
320:51 - the CSS as well that I'll directly give
320:52 - you I'm going to go ahead and simply say
320:55 - hey use auth is the one thing which is
320:56 - telling me whether I should be having
320:58 - this or not everything is designed there
321:00 - obviously we'll be needing a react and
321:02 - that react is going to come up from
321:04 - react and we'll be importing the profile
321:07 - card as well so profile card comes up
321:10 - and we'll also grab the login component
321:14 - as well
321:15 - so let's go ahead and say hey let's go
321:17 - ahead and bring in login that comes up
321:19 - as a component that's it let's call this
321:22 - one as const and we'll be calling it as
321:24 - home this home will go like this and
321:27 - there we go now I can do conditional
321:30 - rendering based on just one thing I can
321:32 - just go ahead and bring something from
321:34 - the use auth and you know what what I'm
321:36 - about to build and I'll just go ahead
321:38 - and say auth status all right now as
321:40 - soon as I do this now where should I
321:43 - access this that's that's a big question
321:45 - if I go ahead and reload this there's
321:48 - nothing if I go ahead and say slash
321:50 - Pages which I just mentioned up here
321:53 - there is nothing so what's the point of
321:55 - having this Pages if I'm actually not
321:57 - able to do all of this and we have
321:59 - created a component right now this
322:00 - component doesn't return anything but
322:02 - let's just say for some the sake of
322:04 - rendering so I'll just go ahead and say
322:05 - hey return and this will not do anything
322:08 - I'll just shift it a little
322:11 - come on not like that
322:13 - I'll shift it here and I'll say return
322:15 - and we'll be returning just a simple
322:18 - home so just like this
322:20 - and I'll say give me an H1 and we'll be
322:22 - saying home page that's all and again
322:25 - you'll be seeing there is nothing
322:27 - literally nothing so how do I actually
322:29 - grab anything from there that's that's
322:31 - the question so let me answer that first
322:34 - all right so now let's address the issue
322:36 - which is bothering us so again we have
322:38 - created all this we are super happy but
322:40 - one thing is still bothering us how can
322:42 - I get these Pages this is a million
322:44 - dollar question right now in front of me
322:45 - and if you look into the documentation
322:47 - it's actually a little bit confusing
322:49 - there as well so I don't have these
322:51 - Pages that's for sure but also I don't
322:54 - know how can I actually bring the home
322:56 - page as home here so this is my home
322:58 - page I want it to redirect here this is
323:00 - where the directory structure fallback
323:02 - comes in so let me just tell you a
323:05 - theory here again Theory not a whole
323:08 - hard proof up here so notice here
323:10 - everything is inside the pages and I'm
323:12 - not directly defaulting to serving this
323:14 - page here what if this page doesn't
323:17 - exist this has so many things right now
323:19 - all that next.js and stuff like that
323:21 - what happens if this page doesn't exist
323:24 - let's go ahead and delete this and try
323:26 - this out if I go ahead and move it to
323:28 - trash ah now this page is gone does my
323:31 - app crash so let's go ahead and look at
323:34 - the refresh ah my page is hey received a
323:37 - promise that resolved to undefined lazy
323:39 - element and all of that so what is
323:41 - actually happening how this is not
323:43 - working if I don't have a page it
323:46 - doesn't really work let's go ahead and
323:47 - try to refresh but but but here couple
323:50 - of things here interesting one I'll just
323:52 - close this and we'll restart this and
323:55 - there we go we don't have anything so
323:58 - this is not yet giving us the error now
324:00 - hit a refresh and this will take still
324:03 - some time and now the thing is that if
324:05 - that page doesn't exist we get an error
324:07 - we know this already now let me just
324:09 - resolve this error
324:11 - all right so I'm back after a small
324:13 - phone call yes things happen and this is
324:15 - life and this is how we run all right so
324:17 - everywhere uh we were just trying to
324:19 - explore that okay we have this home page
324:21 - we haven't yet exported it so let's go
324:23 - ahead and simply go ahead and Export
324:25 - default home so that's nice uh but this
324:27 - is not going to resolve the problem but
324:29 - what we have done is a foundational
324:30 - change in the next JS project which is
324:33 - everything is dependent on the page uh
324:35 - this and this layout is also expecting
324:37 - that okay I'm a rapper but you need to
324:39 - provide me some children so that I can
324:41 - render them out and you have deleted
324:43 - this entire page thing what are you
324:44 - doing are you in your right mind or not
324:46 - and that is the reason why nothing is
324:49 - getting served and nothing is going to
324:50 - be served here even if you get this page
324:52 - this page is right inside the pages uh
324:55 - that's great that's great but there is
324:57 - the issue of the layout here again after
325:00 - couple of hit research you'll find that
325:02 - this error is a little bit trickier
325:04 - because next year's is still in very
325:06 - development phase aggressive development
325:08 - so sometimes you'll get this error
325:09 - sometimes they're not and all there are
325:11 - asking is that hey what you're missing
325:13 - is okay you have this pages but you
325:16 - should also have a layout inside the
325:17 - pages as well this is the structure of
325:19 - what the next GS follows yes layout
325:22 - inside a layout and there can be one
325:23 - more every directory can have its own
325:25 - layout and that that's crazy here and
325:28 - that actually solves a lot of issues in
325:29 - here so let's inside the pages I'll
325:31 - right click and create a new file and
325:33 - we're going to call this one as layout
325:35 - what you export method inside it doesn't
325:37 - really bother you much but the file name
325:39 - should be layout.tsx just having a
325:42 - layout is not going to solve the issue
325:44 - if I go ahead and save this layout but
325:46 - at least it resolves the issue giving us
325:48 - that now there is not that much of
325:50 - problem uh the nexgs is decently happy
325:53 - but not too happy because it needs all
325:55 - of this now layouts are exactly same so
325:57 - you can just either copy and paste this
325:59 - whole layout or you can just actually
326:01 - write it along with me I'll prefer to
326:03 - rewrite it so that it builds some habit
326:05 - for you now this layout is also going to
326:07 - be a cloud client layout because I want
326:10 - to pull in some information this is
326:11 - everything happening client side I would
326:14 - definitely need app right service so
326:16 - I'll just say app right service let's
326:18 - bring it up here I will be needing some
326:20 - of the blog from the component to just
326:22 - display some fancy stuff nothing much
326:24 - there we'll also be needing header
326:26 - because header will be every single
326:28 - place and the way how we have designed
326:31 - the header in case you forgot that it's
326:33 - actually automatically uh rendering
326:35 - Things based on conditions so notice
326:37 - here
326:38 - so here it is based on the auth status
326:40 - our header is displaying either the
326:42 - profile or signup so header is a good
326:44 - information that we want to have it now
326:46 - one of the most important thing that
326:48 - we'll be bringing here is actually
326:50 - the auth provider so if you notice that
326:54 - auth provider this auth provider will
326:57 - help us to display conditionally whether
326:59 - we should be displaying something or not
327:01 - and all of that not only that since it's
327:03 - a provider I told you that provider
327:04 - actually wraps up everything and this
327:06 - layout actually wraps up everything so
327:07 - this solves our issue that I can use my
327:09 - auth provider and this provider can send
327:11 - information to all of my component what
327:13 - they need there otherwise there will be
327:15 - prop Drilling and I really don't want
327:17 - that so I'll after this I'll be having a
327:19 - react and then two famous guys of the
327:21 - react which is use effect and use state
327:23 - will be bringing it up the way how this
327:26 - layout is designed you can call this
327:28 - method anything but first let's study
327:29 - this layout that how this layout is
327:31 - designed so rest of the things are
327:32 - pretty boring so after this export
327:34 - default function root layout this root
327:36 - layout takes the children and that
327:38 - children is of type react dot react node
327:41 - and then we simply go ahead and render
327:42 - these children this is the basic I
327:44 - repeat this again probably that was the
327:46 - first name your function whatever you
327:48 - like I usually use the word layout
327:50 - that's a good idea but again the naming
327:52 - of the file is important not the methods
327:54 - it accepts children that's one thing
327:56 - this children is of type react.react
327:59 - node and then simply you go ahead and
328:01 - render it so that's what exactly we'll
328:03 - be doing in this case let's go ahead and
328:05 - say hey we are going to call this one as
328:07 - protected uh layout
328:11 - and protected layout takes a parameter
328:13 - as children again remember children's
328:16 - are of type react dot react node so
328:19 - we'll be giving this type as well and
328:21 - let's go ahead and say that this will be
328:23 - of type react Dot
328:26 - react node I'll copy this otherwise I'll
328:30 - probably make a mistake so I'll copy
328:31 - this and we'll paste it up here that's
328:34 - better
328:35 - all right that is good enough now let's
328:37 - go ahead and have it like this this will
328:40 - complain obviously because you are not
328:41 - rendering the children you are not
328:43 - returning the type as well we'll deal
328:45 - with this error in a minute but first
328:47 - let's go ahead and grab our auth status
328:50 - so we'll be saying hey I'll probably use
328:53 - a tab indentation here
328:55 - there we go so we'll simply have
328:58 - that's a wrong one I'll actually bring
329:00 - in mine so I'll be saying that hey I
329:02 - need a state which will be auth
329:06 - auth status that's my variable set out
329:09 - status and we'll be setting the states
329:12 - just like this so that's fine I'll also
329:14 - introduce a loader I probably would love
329:16 - to have a loader which is more of a a
329:19 - spinning wheel or something but in this
329:21 - case I'll just uh settle up with a
329:23 - simple loader which is just a text a set
329:25 - loaders initially it's true so that's
329:27 - okay now before I return anything
329:30 - obviously as soon as this layout but end
329:32 - of the day we are calling it as a layout
329:34 - but end of the day this is just a react
329:36 - component and react components can use
329:38 - use effect we'll do that so I'll just
329:40 - simply Say Hey I want to use the use
329:42 - effect and there we go I have nothing
329:45 - inside as a render so it renders only
329:47 - the first time as soon as this comes up
329:49 - I want that my app right service should
329:53 - actually ask that the weather is
329:55 - somebody is logged in or not and since
329:59 - this actually returns a promise the way
330:00 - how we have designed it we can actually
330:02 - go ahead and say hey Dot then if
330:05 - actually it results then we're going to
330:07 - go ahead and say Seth odd status and as
330:10 - soon as I call this this is going to set
330:12 - it because notice here what we are
330:15 - returning this we are passing it on here
330:16 - so this set auth status is going to set
330:18 - it up and if it is not then will not do
330:21 - the catch we'll simply go ahead and run
330:23 - the finally because anyhow we need this
330:25 - one in this case we'll set it up false
330:27 - so if you just call it this is obviously
330:29 - going to set it up to true in case you
330:31 - are not happy with this one I will just
330:32 - go with this otherwise we'll set the
330:34 - loader false this set auth status is
330:37 - default false it will remain as it is
330:38 - all right
330:40 - now after this we'll just go ahead and
330:43 - simply use The Return part of it in the
330:45 - return I'll use this auth provider yep
330:47 - the value of the auth provider is going
330:49 - to be auth status and auth set auth
330:52 - status so both of them are being
330:53 - provided to us and we'll simply go ahead
330:55 - and in this one first and foremost we
330:58 - need to cloth close this auth provider
331:00 - so I'll just say auth provider
331:02 - and not like that we'll be having a
331:04 - slash there we go should be all happy
331:07 - all right so now we have this one now
331:09 - inside this auth provider I told you
331:10 - this auth provider is nothing come on
331:13 - why are you doing this
331:16 - escape and hit a tab escape and hit a
331:19 - tab okay so now what this auth provider
331:21 - is is a wrapper so it will pass on the
331:23 - information every single place where I'm
331:24 - just asking it uh but based on
331:28 - the loader is done or not we'll be
331:29 - providing the information so first I'll
331:31 - check if there is no loader
331:34 - and not leader
331:38 - loader and we don't need all status and
331:40 - stuff we'll just go ahead and put the M
331:42 - percent Escape that we'll just render an
331:44 - element what that element is going to be
331:46 - a simple fragment just like this and
331:49 - inside this I do have some classes which
331:51 - will help you to have a proper display
331:53 - so uh div dot text Dash
331:57 - primary I'll give you these assets and
332:00 - some of the files as well so don't you
332:02 - worry
332:03 - come on no suggestions div dot primary
332:05 - just like that and
332:08 - I'll actually give you directly this so
332:10 - that actually helps you copy that and
332:13 - I'll paste this again nothing more there
332:15 - are some CSS files which actually
332:16 - include this blog nothing to be worried
332:19 - these are just the background elements
332:20 - so nothing much more than that after
332:22 - this we'll be having this header so just
332:25 - like this we'll be having
332:27 - header come on
332:30 - what is happening
332:32 - there we go we have this header and
332:35 - after this we'll be having a simple main
332:36 - class which will be rendering the
332:38 - children so that is all what we are
332:39 - doing
332:40 - and let's hit enter main class all right
332:43 - so this was all fancy with stuff so this
332:45 - whole div is a fancy stuff nothing to be
332:46 - worried this header is also almost fancy
332:48 - stuff the Meat part is here the main
332:51 - which is rendering the children so auth
332:52 - provider will be responsible that
332:54 - whatever the children comes up here I
332:56 - can pass on information and can query
332:58 - directly the auth provider hey what's
332:59 - the current value of it so as soon as I
333:01 - save this now let's go ahead and try to
333:03 - hit a refresh now notice here we have
333:06 - couple of errors that did hey elements
333:08 - are of lazy type there are some issues
333:11 - with that probably we are not exporting
333:13 - this yeah we are not exporting the
333:15 - protected layout so let's go ahead and
333:17 - do that first
333:19 - and we'll be saying export default
333:22 - protected layout so now things should be
333:24 - different and there we go now we are
333:26 - having this app right home about contact
333:28 - and home pages rendering so what we have
333:31 - learned with this that is the most
333:32 - important thing and what we have learned
333:34 - into this is although I don't have a
333:38 - page.tsx directly inside the main I
333:41 - really don't need it but what I need 100
333:43 - is a layout if that file goes yeah the
333:46 - project is Bonkers but inside the pages
333:48 - I can have this layout and Pages dot TSX
333:51 - and this can actually serves as a home
333:54 - page yeah that's that's a new
333:56 - information all right let's see where we
333:58 - are having this issue so this children
334:01 - why are we having
334:03 - a property protected layers all right so
334:06 - I think this is bothering a little bit
334:08 - shouldn't be bothering that much
334:10 - let me just quickly check that why this
334:12 - is bothering us let me quickly take a
334:14 - look on this
334:15 - all right got it there are some syntax
334:17 - issues so it's actually better if I go
334:20 - ahead and take this one as a structure
334:23 - so I'll just copy this till the above
334:25 - this one so I'll copy this directly
334:27 - these syntax and structures are
334:29 - sometimes problematic
334:31 - so I'll just go ahead and copy it here
334:34 - and there we go and probably we copied
334:37 - an extra colon and I think we shouldn't
334:40 - be doing that
334:43 - and now this is giving a colon just like
334:46 - this there we go hopefully things are
334:48 - okay now okay let's check it out
334:51 - all right so at least uh this is working
334:53 - and we have so this blog yeah this is
334:56 - exactly the background elements and all
334:58 - that so this is what we are having now
335:00 - so here is the interesting part now that
335:02 - you have understood this much part now
335:04 - can you understand that we can instead
335:06 - of doing this home page we can actually
335:07 - go ahead and do a conditional rendering
335:09 - here and that is exactly what we are
335:11 - about to do so based on this auth status
335:14 - we'll be doing some conditional
335:15 - rendering let me just go ahead and tell
335:17 - you that directly so instead of this
335:18 - return we'll be pasting this one here so
335:21 - notice the top part is just nothing it's
335:22 - just centering the element on the left
335:24 - side next JS and blah blah nothing to be
335:26 - worried the whole thing is actually here
335:28 - this is the piece and this is very basic
335:31 - minimum we have already discussed in the
335:32 - previous part of it that if the auth
335:34 - status is present then go ahead and
335:36 - render the profile card otherwise just
335:37 - load the login component that we have if
335:40 - I save this notice here this is what we
335:42 - have again we don't have this Global
335:45 - some of the style sheets are still
335:47 - missing I'll just go ahead and add this
335:49 - a little bit in a minute but notice here
335:51 - this is all what we are having and if
335:53 - this is what we are logged in let me
335:55 - quickly check that if I can quickly fix
335:57 - the styling part otherwise we'll just
335:59 - move with this one
336:00 - all right it's not a big issue I
336:02 - actually forgot to customize some of the
336:04 - theme elements as well so I'm actually
336:05 - configuring a little bit of the Tailwind
336:07 - team nothing too much but I'll still
336:09 - show you so this is how the project is
336:10 - looking like because it's not able to
336:12 - find these primary colors and all of
336:14 - that I'll just go ahead and do that so
336:15 - inside this extended all I can do is
336:18 - actually provide some of the custom
336:19 - colors that we are using so I'll just go
336:21 - ahead and wrap this up first and put up
336:23 - a comma so that it doesn't give us any
336:24 - error and all I'm doing is setting up
336:27 - some of the primary and secondary colors
336:29 - so I'll just give you we actually picked
336:30 - up the colors from the app right itself
336:32 - so I'll just give that so that is it and
336:35 - should be all happy now
336:37 - save this and there we go so most of the
336:40 - colors are there uh but yeah I know this
336:42 - is not the best styling work I don't
336:44 - want to focus too much on the styling
336:46 - part so that is it okay let's just let's
336:49 - just close it right there all right now
336:51 - that we understand that okay this is
336:53 - again a cool way of having the elements
336:55 - and layouts and you understand the
336:56 - importance of layout there is little
336:58 - more that we can do with this layout and
337:00 - I'll walk you through with that but
337:02 - first what we're going to do is do close
337:04 - the sign up and all these Pages as well
337:06 - because there is nothing too much in
337:07 - that it's actually very basic right now
337:10 - this is the home page but if I go ahead
337:11 - and do the sign up that doesn't exist
337:13 - because we don't have nothing here there
337:15 - so I think that's the easy part now
337:17 - let's quickly do that and how we do that
337:19 - because right now we are seeing
337:20 - everything is outside of this now inside
337:22 - the pages I'll create a folder and I'll
337:24 - call this one folder as sign up
337:28 - and inside this I'll create a page.tsx
337:30 - again this is because it's a front-end
337:34 - page.tsx and there is nothing much into
337:37 - this one all I have to do is simply say
337:40 - hey use Client First
337:43 - use
337:45 - client just like that and let's import
337:47 - our classic things uh use auth and all
337:49 - of that we don't need to import service
337:51 - here we can just go ahead and work with
337:52 - the use auth here everything We'll be
337:54 - asking with the use auth let's also go
337:56 - ahead and import router as well use
337:58 - router this one is coming from
338:00 - navigation
338:02 - navigation there we go and we'll be
338:04 - needing react of course so we'll be
338:06 - saying hey react
338:08 - and that will be coming up from react
338:10 - and we'll be needing a sign up component
338:12 - as well
338:14 - and we'll be saying give me sign up
338:16 - component sign up from sign up component
338:20 - sign up okay now again basic uh sign up
338:23 - page yeah that's good enough and let's
338:25 - export this as well export default sign
338:28 - up in here we'll be first asking that
338:31 - hey let's give us a router
338:33 - routers will be coming up from user
338:36 - router will also be having one more
338:38 - which is auth status based on this I'll
338:40 - be rendering the stuff
338:42 - so I can just simply ask if the auth
338:44 - status is true then I can simply go
338:47 - ahead and simply say hey router let's
338:50 - actually replace the stuff instead of
338:52 - router.push we are going to replace the
338:54 - entire page
338:55 - so router dot replace and we'll be
338:59 - replacing it to a page
339:02 - or a URL that is Slash
339:04 - profile because if the user is already
339:07 - logged in I don't want to show him the
339:09 - sign up page really simple there is
339:11 - nothing much and what you're going to
339:13 - see I think that is already uh that's it
339:15 - but
339:17 - uh what we found out while working on
339:19 - this is sometimes you want to actually
339:21 - return an empty fragment why this
339:23 - because of the layout layout needs
339:26 - sometimes this to actually avoid this is
339:28 - the issue which I am still researching a
339:30 - little bit like how we can do the basics
339:31 - so again I'm also in a Learning Journey
339:33 - so please if you find some better
339:35 - alternative or solution like that just
339:37 - give me that I'll actually take that
339:38 - otherwise if the user is not logged in
339:41 - then that block will not run so I'll
339:43 - just go ahead come here what I'll return
339:45 - is just a sign up component wrapped
339:47 - around it that's all but I have actually
339:49 - a wrapper so I have actually written
339:51 - some CSS here so we can simply have the
339:53 - sign up component here so this is just a
339:55 - sign up and that's it now if I save this
339:58 - and hopefully if I go ahead and refresh
340:00 - this and we have the sign up page there
340:03 - we go so this is what we built up again
340:05 - you don't have to worry about the CSS
340:06 - part even if you have the basic CSS that
340:09 - is also totally fine
340:10 - all right similarly we need to build up
340:13 - a login page as well and a log out page
340:15 - as well so let's go ahead and build the
340:17 - login page
340:18 - we can close this inside the pages we
340:21 - are having a folder which will be
340:24 - login
340:25 - and we'll be having this page.tsx this
340:28 - is for a lot of people a better approach
340:32 - again I don't judge people based on what
340:34 - approach they are following I think this
340:36 - is all is required so I'll copy this
340:39 - paste it up there
340:41 - and we don't need signup we actually
340:43 - need login in this one
340:46 - and actually just directly write it
340:50 - that would be better
340:52 - import login from login all right const
340:55 - login page there we go we simply go
340:58 - ahead and Export default login page
341:00 - inside this the same stuff will happen
341:02 - we'll first ask that hey whether you are
341:04 - logged in or not and all of that so I'll
341:06 - just copy this it actually makes sense
341:08 - to copy all of this
341:10 - and paste it up here so we'll say let's
341:13 - read this again so router is there auth
341:15 - status is there if the auth status is
341:17 - there I want to redirect him to on the
341:19 - profile this is still on the research
341:21 - phase if it is not working then
341:23 - obviously I want to mount the login
341:26 - all right so the login page is done
341:28 - what's interesting is that how we are
341:30 - actually dealing up with the log out
341:32 - that's interesting because if actually
341:34 - you see the component part the way how
341:37 - we have designed it
341:38 - so in the login also and also let me
341:42 - show you the login as well
341:44 - now the login actually Avatar yeah here
341:47 - it is
341:48 - if I open up this Avatar component not
341:50 - the Avatar actually profile card yep my
341:53 - bad profile card we have this log out
341:55 - and this is directly a link
341:57 - so what I want to do is I want to create
342:00 - this log out in such a way that if
342:02 - anybody visits this lockout
342:04 - automatically I have couple of options
342:07 - as soon as I could have done this
342:09 - directly here as well that I could have
342:11 - requested a route could created a method
342:13 - here but I don't want to do this I will
342:15 - create a component of logout as soon as
342:17 - somebody visits slash logout so there
342:18 - will be a page of logout there I'll use
342:21 - my use effect hook because I can and
342:23 - there I'll call my app right service
342:25 - that hey just do the log out so that's
342:26 - my flow again if you don't like this
342:28 - flow simply go ahead and create a method
342:30 - here that's that's it so how we are
342:33 - going to do this is create a page for
342:35 - the logout
342:36 - so let's right click on the pages create
342:38 - a new folder we'll be calling this one
342:40 - as log out make sure you call it exactly
342:42 - lockout because that's what we have
342:44 - mentioned in the profile card right
342:46 - click new file
342:48 - page.tsx nothing too much in this one we
342:51 - don't need all of this but I'll still
342:53 - grab all of this
342:55 - copy this we can close this we can close
342:57 - this paste this we don't need to bring
342:59 - in any components so that is fine but
343:01 - obviously I know that I'll be using use
343:03 - effect so it's better to have the use
343:05 - effect just like this okay
343:08 - very simple log out page there we go we
343:11 - simply go ahead and say export default
343:13 - logout page that's the basic absolute
343:15 - basic okay now I need couple of things
343:18 - we need router to push to some somewhere
343:20 - else so let's go ahead and create a
343:22 - router
343:23 - router use router there we go we
343:26 - obviously need the auth states so we'll
343:28 - be saying const I need set auth status
343:32 - because I'm pretty sure I don't need the
343:35 - status to verify I just want the method
343:37 - so that I can just do the false here
343:40 - there we go and I'll simply go ahead and
343:43 - first return so I don't need to return
343:44 - anything but since there is a layout if
343:47 - you don't return an even an empty
343:48 - fragment it will crash we have seen that
343:50 - so just giving you Advanced heads up
343:53 - there all you have to do is provide an
343:55 - empty fragment and this actually saves
343:57 - your life
343:58 - there we go
344:00 - and yes our team struggled really hard
344:02 - in understanding that that why is it
344:04 - crashing then we realized oh that's a
344:05 - layout it needs to render a react
344:07 - component and that's we injected uh the
344:09 - tail the typescript that hey we need
344:11 - this so yeah just sharing the experience
344:13 - how we actually build it use effect and
344:16 - there we go Basics just like this in
344:18 - here I'll use the app right
344:21 - are we bringing the app right here no
344:23 - we're not bringing the app right so we
344:25 - should be bringing the upright service
344:26 - where should I bring probably top is
344:28 - good
344:29 - app right service now we have this so
344:33 - app right service you go ahead and just
344:35 - do the log out we created a method
344:37 - here is the log out and again the logout
344:41 - is also a promise so you can just run
344:44 - the method and once you have this method
344:46 - you can actually go ahead and use a DOT
344:48 - then
344:49 - and if the dot then is there then we can
344:51 - have a call back so let's go ahead and
344:53 - have
344:55 - first let's close the then then we can
344:57 - have a callback just like this there we
344:59 - go now inside the Callback I'll say set
345:02 - auth status to false and router is going
345:05 - to push you to the home page home page
345:06 - will take care of itself and that's it
345:08 - so I hope you understand the logic that
345:10 - we are doing with the log out super
345:12 - simple nothing complex there okay now we
345:15 - have let's check out we have the sign up
345:17 - happy with this we have log out we are
345:19 - happy with this login we are happy with
345:21 - this but what about profile hitesh
345:24 - that's that's the major question we have
345:26 - been wondering so far now again
345:28 - something interesting about this one as
345:30 - well
345:31 - now notice here inside the pages I'll
345:34 - create a new folder notice the naming
345:37 - convention again I am creating a
345:39 - parenthesis again yeah parenthesis means
345:41 - there's a lot of stuff that is going to
345:42 - happen I'll call this one as protected
345:46 - so all the pages inside this one are
345:49 - going to be protected Pages since I'm
345:51 - not creating a middleware I can go with
345:53 - the middleware approach as well but
345:55 - actually a lot of thing can be taken
345:57 - care by the use context itself so just
346:00 - like I have used this couple of other
346:02 - places as well inside the protected also
346:04 - I can have other pages and all of this
346:07 - so again you know what's the syntax and
346:10 - how the structure goes protected the
346:12 - page inside the protected is not that
346:14 - important so let's just say I don't have
346:16 - this one so I'll directly create a
346:17 - folder I'll say that hey there will be a
346:19 - profile here which will be protected so
346:21 - inside the profile I'll create a new
346:23 - file which will be page.tsx or there
346:26 - could be hundreds of other protected one
346:28 - not the TS right click and what is
346:32 - happening
346:33 - I want to rename this
346:36 - and this one will be page dot TSX why is
346:39 - it not working
346:41 - page.tsx because it's a component
346:44 - and this protected itself the most
346:47 - important thing is this protected should
346:49 - have a layout
346:53 - layout.tsx
346:55 - all right so I hope this is now very
346:57 - repeatable so you can have as many
346:59 - protected routes and this layout will be
347:01 - common for all the directory yes that is
347:04 - where you actually uh include or enjoy
347:06 - the directory structure so in the
347:08 - directory structure we'll be working
347:10 - through so again remember this uh this
347:13 - layout will be for all this directory
347:15 - structure and this layout will be for
347:19 - all the directory structure at this so
347:21 - the level actually matters and we have
347:23 - one more here this layout will be for
347:25 - everyone so layout inside layout inside
347:26 - layout yeah we are going crazy with that
347:29 - but we'll go with that all right so
347:31 - let's first handle this layout this is
347:34 - actually a relatively simple to
347:37 - handle let's go ahead and do that all we
347:39 - are doing is predicting if the user is
347:41 - logged in that's okay we'll be rendering
347:43 - the children if it is not then we'll be
347:46 - sending email on to some other place
347:48 - again this is again use client
347:50 - suggestions no suggestion
347:53 - no suggestion hate that okay once we
347:56 - have this client let's go ahead and
347:58 - first bring the use auth
348:00 - so we'll be saying hey I'll be saying
348:02 - give me use auth that will be context
348:07 - all right I will be needing the router
348:09 - as well to redirect ah next navigation I
348:12 - like that import react from react that's
348:15 - there again we'll be saying const I'll
348:19 - actually copy paste this time I don't
348:21 - want to get into the mess of fixing this
348:23 - so I'll be just saying that hey this is
348:25 - a product let's name it exactly same
348:27 - there is no point of changing the name
348:28 - so let's go ahead and do this there we
348:31 - go all I thing that I don't want to do
348:34 - is this whole stuff so I'll be just
348:36 - closing it like that and we also don't
348:39 - need to return it like that
348:41 - I'll just remove everything here that's
348:45 - it so it's much more we don't have a use
348:47 - effect here we don't want to do that and
348:50 - I'll also clean this one as well I don't
348:53 - understand what status what I have to do
348:55 - is as long as I return the children this
348:57 - will be super happy so I'm done I'm done
348:59 - with the layout but I don't want to do
349:00 - it like that since this is a protected
349:02 - route every single page on every single
349:05 - page if this is getting mounted then I
349:07 - can check something I don't need
349:08 - middleware just a simple line what
349:10 - middleware is it just is a checker you
349:12 - can inject this is on your own custom
349:14 - way of implementing the middleware so
349:16 - what I'll do is first I'll grab a router
349:18 - so let's go ahead and say hey router use
349:20 - router and also use our status and
349:24 - that's it and let's just check it simple
349:26 - if and else if there is an auth state if
349:28 - there is no auth State then hey redirect
349:31 - him onto the login page return this
349:33 - because crash yeah you get that and in
349:36 - that case return the children too much
349:38 - space
349:40 - and then we can simply have this
349:42 - protected now that's it the page is
349:44 - every single page is protected that
349:46 - that's all I'm saying yeah and now let's
349:49 - go ahead and try this out save this and
349:51 - inside the profile we have this page
349:53 - don't have to write a single line of
349:54 - code I can freely just say that hey this
349:57 - will be protected because of the layout
349:58 - so I'll just say hey let's bring in the
350:00 - profile cards now and once we have the
350:03 - profile card let's also bring in the
350:04 - link we'll be needing that this will be
350:07 - from next link okay and let's also
350:09 - import react
350:11 - from come on suggestion from react and
350:15 - we'll be having a profile
350:18 - command suggestions no suggestion the
350:20 - app profile page just like this export
350:22 - this as well export default profile page
350:25 - in here whatever you want to display you
350:27 - can just go ahead and display that I
350:29 - know that I I'm not going to be
350:30 - bothering you with much of it
350:32 - I have told you the concept now you
350:34 - display here the Account Details you
350:36 - display the profile card whatever you
350:38 - want you can just go ahead and do that
350:40 - we are also not doing a drilling we are
350:42 - just getting a profile card
350:43 - and we are getting the information
350:45 - directly in the component itself so
350:47 - whatever that is we can actually bring
350:49 - it up here and that's the magic that's
350:50 - coming up here and now let's see if I
350:52 - can actually visit the profile so
350:54 - instead of the sign up let's try this if
350:56 - I go ahead and say Hey I want to visit
350:57 - uh profile
351:00 - no I don't I don't visit it because
351:03 - I am redirected back to the login so
351:05 - that is what is now this is again a
351:07 - different way of understanding and
351:09 - learning let me summarize this because
351:10 - this is again a really really
351:12 - interesting take on the next JS I'm
351:14 - super happy about it uh but let me show
351:16 - you and walk you through with that so
351:17 - how this entire thing happened and how
351:19 - this is all working so we learned that
351:21 - if we don't even have the pages we can
351:23 - still make the layout of the next JS
351:25 - work but what's more important than the
351:28 - pages is the layout because layout is
351:30 - the thing which is rendering everything
351:32 - and it needs something to actually
351:34 - display that's what the whole goal is
351:36 - what approach we are using here inside
351:38 - the app is we were worried that if we
351:40 - will have too many of the front-end page
351:42 - that might get scary uh scattered here
351:45 - so now our API can have dot app can have
351:48 - dot API and there we can write the
351:49 - backend logic if we have if we don't
351:51 - have it we can create a pages with the
351:54 - parenthesis this doesn't need to have
351:56 - its own page itself we can have and can
351:58 - just be worried about the layout itself
352:00 - so inside the pages we created this
352:02 - layout which is the most important thing
352:04 - and inside this we have this page here
352:06 - and now this page is conditionally
352:08 - rendering this layout is effective on
352:11 - all the pages that we are having all
352:12 - right so this is what the directory
352:14 - structure means in one Pages we will
352:16 - have just one layout and this will be
352:18 - rendered in all the pages that we are
352:20 - having further if we know this we use
352:22 - this technique inside the protected as
352:24 - well that hey again a directory
352:26 - structure that means inside this also I
352:28 - can have one more layout and in this
352:30 - layout I have checked it so before
352:32 - rendering any component I'm checking
352:34 - this out so this is another approach in
352:36 - case you don't want to have this
352:37 - middleware or the back end or anything
352:39 - related to the back end you can simply
352:41 - check this with the component level as
352:42 - well because end of the day this is
352:44 - react this is how we used to do this
352:45 - react so there are different approaches
352:47 - there is no right and wrong whichever
352:49 - feels good to you you use that whichever
352:51 - your company says hey this is better
352:53 - approach use that I've walked you
352:54 - through with the cases of middleware as
352:56 - well I've worked you with the cases of
352:57 - context API as well in case you need
353:00 - something more just let me know I'll
353:02 - present that scenario as well in case
353:04 - you want to have a research or a
353:05 - discussion with me hey which one is
353:07 - better which scenarios are good for
353:08 - which one we can do that in our Saturday
353:10 - live surely but I think this is it
353:13 - and I'll also push this entire source
353:15 - code in my GitHub repository as well so
353:17 - that you can see this all of that that's
353:19 - basic and again if there is a small bug
353:21 - or something like that I'll definitely
353:23 - go ahead and tweak that out as well but
353:25 - majorly whatever I wanted to share with
353:27 - you I've done that so I think that's a
353:29 - good start of uh there's a really lot in
353:32 - depth start of the react.js and we are
353:34 - just talking about authentication how
353:36 - amazing is that really I'm enjoying this
353:38 - teaching part so I hope you understand
353:39 - the efforts as well that we are putting
353:41 - in so a subscribe is kind of you can get
353:44 - that you can give that that is it for
353:46 - this video I hope you have enjoyed that
353:48 - and let's go ahead and catch up in
353:49 - another such video
353:52 - all right so you have gone through with
353:55 - a really really long course I don't know
353:57 - how many of you will be reaching into
353:58 - this section or this portion of the
354:00 - video a really long video but the good
354:02 - news is now your basics of nexgs is
354:04 - absolutely Rock Solid you understand
354:06 - every portion of it how we are dependent
354:08 - on the client side how we can do
354:10 - everything on the server side but of
354:11 - course there are use cases where we
354:13 - actually can use some of the just the
354:15 - client side just the server side or mix
354:18 - of it incremental updates and all of
354:19 - that for this we need to create more
354:21 - tutorials and obviously I'll be doing it
354:23 - I'm already planning to create more
354:25 - tutorials which uses nexjs and show you
354:27 - some of the use cases we're already
354:29 - trying to build some of the Clones which
354:31 - are not just the look wise clone like
354:33 - Amazon or something their functionality
354:35 - clones so complex functionalities are
354:37 - being included I'm already working on
354:39 - that since these videos take time so
354:41 - obviously I'll work a little bit more on
354:42 - to this then recording process will
354:44 - begin but rest rest assured that I will
354:46 - be bringing up more tutorials on next JS
354:48 - and some more stuff as well just like we
354:50 - always do so thank you so much here
354:52 - spend so much time with me I hope you
354:54 - have enjoyed this and I'm pretty sure
354:55 - that I was able to add some value to
354:57 - your life that was the goal and if I was
354:59 - able to successfully do that then drop
355:02 - me a note on Twitter Instagram threads
355:04 - yeah that's the new one just drop me a
355:06 - tank note and that will be my piece from
355:09 - your side that's it so let's go ahead
355:11 - and catch up in another such video