00:00 - [Music]
00:17 - i've been a maintainer of mocha
00:19 - since mid
00:21 - 2014
00:23 - i work at ibm as a developer advocate
00:27 - in the iot and emerging technology
00:30 - uh area
00:32 - um
00:33 - i'm bone skull on on github
00:36 - and uh twitter um except with a zero on
00:39 - twitter um and so i'm gonna talk today
00:42 - this is kind of just a introduction to
00:45 - um
00:47 - unit testing node.js apps with mocha um
00:51 - this is this is really kind of low level
00:53 - it's i kind of wrote it with you know
00:56 - um
00:58 - having someone who's never really done
01:00 - this before in mind and so
01:02 - um yeah i'm just gonna kind of run
01:04 - through some fundamentals
01:06 - um of of testing um just just a couple
01:10 - concepts just just i'll keep it really
01:12 - short because there's a lot of concepts
01:14 - but just
01:15 - just i'm just going to do a couple um
01:18 - then
01:19 - [Music]
01:20 - we'll
01:21 - talk about how to write a unit test with
01:22 - mocha
01:23 - and i'll show you that process and then
01:26 - we'll move on to an integration test um
01:30 - with mocha as well
01:32 - and if there's questions about anything
01:35 - along the way just
01:37 - pipe up and stop me um so
01:41 - um
01:43 - what is mocha
01:44 - mocha is a testing framework um so a
01:47 - testing framework
01:49 - um
01:50 - has a few responsibilities one of those
01:51 - responsibilities is providing an api
01:55 - to help you write tests automated tests
01:58 - against your software
02:00 - a test framework will also help you
02:02 - organize those tests
02:06 - some uh
02:08 - test frameworks more than others will
02:11 - actually let you run the tests too and
02:13 - mocha is one of those um
02:15 - and uh also
02:17 - another responsibility is they report
02:19 - the results of the tests
02:21 - so you you write them and you run them
02:24 - and at the end you get
02:26 - you know in various human or machine
02:28 - readable formats
02:30 - you know this is what happened with the
02:31 - test this is these are the ones that
02:33 - failed and this is why etc etc
02:36 - um
02:37 - so
02:38 - mocha
02:41 - mocha runs in
02:43 - node.js of course and that's what i'm
02:45 - going to talk about i'm not going to
02:46 - talk about testing in the browser with
02:48 - mocha um
02:50 - because moka also runs in in the browser
02:53 - uh it runs in
02:54 - um
02:56 - right now uh the oldest browser we
02:59 - support is
03:00 - ie9 but i think we're going to ditch
03:02 - that soon i
03:04 - then the oldest one will be ie11
03:06 - um
03:07 - hopefully you don't need actually we've
03:09 - never tested opera i have no idea i just
03:11 - pulled that off anyway so um
03:13 - so what what's cool about mocha mocha is
03:16 - simple it's got this it's got a very
03:18 - small api surface um
03:21 - it's it's easy to learn there's there's
03:24 - really just not a lot you have to
03:25 - remember when working with mocha
03:29 - it kind of does one job and it seems to
03:32 - do it well
03:33 - um it lets you write your tests and it
03:36 - kind of wants to get out of the way and
03:38 - and because of that um it's actually
03:41 - it's very versatile
03:42 - so
03:43 - um
03:45 - it will kind of bend how you want to
03:48 - you know how do you how you want to push
03:49 - it um
03:50 - uh you know it's it's not limited to
03:53 - simply one kind of test you can write
03:55 - many different kinds of tests you can
03:57 - run that test in many different
03:58 - environments
04:00 - you know you can use reporters designed
04:03 - for node.js um
04:05 - running in a headless browser and still
04:07 - output you know like
04:09 - weird stuff to the console and just you
04:12 - just they're things i never consider
04:13 - that people use this
04:16 - for and of course you know they file
04:18 - bugs about all this weird stuff um
04:21 - so
04:22 - uh one of the things about moka is that
04:24 - the entire user facing api the thing
04:26 - that you in uh you interact with with as
04:29 - a developer writing your test the whole
04:31 - thing can be swapped out
04:34 - there's a default which is this kind of
04:38 - r-spec style
04:41 - api but but it can also moca also ships
04:44 - with
04:45 - uh if you're more comfortable with with
04:47 - the way q unit works um
04:50 - which is uh
04:52 - i think originally q unit was written to
04:54 - test jquery itself
04:56 - if you're if you're familiar with that
04:59 - you can write your mocha tests in in in
05:01 - queue unit format or there's several
05:03 - different ways you can do it
05:05 - and if you don't like any of them you
05:06 - can even write your own and just use it
05:08 - and
05:08 - i haven't seen too many of that too many
05:10 - of those
05:11 - the defaults work pretty well for a lot
05:13 - of people
05:14 - mocha is also
05:16 - i dare say fun
05:19 - for a testing framework i suppose
05:22 - because there's really no other testing
05:24 - framework that has a nan cat reporter
05:28 - that i know of anyway
05:30 - so
05:32 - now i'm going to talk a little bit about
05:34 - some fundamentals so this is kind of
05:36 - this is what milk is and now we're going
05:37 - to go into
05:39 - um
05:40 - fundamentals of testing
05:42 - and
05:43 - so
05:44 - this this this is just going to be like
05:46 - three
05:47 - this is terminology this is not we're
05:49 - not going to go very deep it won't hurt
05:51 - i promise
05:52 - the first thing is the assertion and so
05:56 - um
05:56 - what is an assertion it's it's a
05:59 - fundamentally it's a comparison um
06:02 - and if the comparison is is true or
06:05 - truthy
06:06 - nothing happens
06:08 - if the comparison is false or falsy
06:12 - then it throws an exception
06:15 - and
06:16 - it's really trivial to write your own
06:18 - assertion function and here's here's an
06:21 - example so
06:24 - you pass assert and a value if that
06:26 - value
06:28 - evaluates to falsie
06:30 - throw an error
06:32 - that's that's basically what an
06:34 - assertion is
06:35 - testing you know testing you're going to
06:37 - make a lot of assertions in your tests
06:39 - that's that's kind of that's kind of the
06:41 - idea um
06:43 - so
06:44 - the next
06:45 - term uh is the unit test
06:48 - um and so a unit test is kind of like
06:51 - this recursive acronym or not
06:54 - it's the definition is is it's well it's
06:56 - a test of a unit and and that doesn't
06:59 - mean anything right but you have to know
07:01 - what a unit is and so
07:03 - um
07:04 - a unit test asserts a unit behaves as
07:07 - intended so a unit is
07:10 - the
07:11 - smallest testable chunk of code so
07:15 - you know generally that's going to be a
07:16 - function
07:18 - because you can't
07:19 - very easily crawl inside a function and
07:21 - pull a little bit out and just test that
07:23 - piece
07:24 - so we're talking about functions most of
07:26 - the time but not always
07:29 - you know you can have a unit test that
07:32 - maybe is testing events or something
07:34 - like that um
07:36 - where it's it's not a function itself
07:37 - that you're testing per se
07:40 - um
07:41 - so
07:42 - a a unit test then has two
07:45 - responsibilities
07:46 - one
07:47 - it executes the unit and so
07:50 - uh i may refer to this as the unit under
07:52 - test or code under test
07:55 - um
07:56 - the uh unit test then makes an assertion
08:00 - about
08:02 - whatever it just did and so
08:04 - in the case of a function that
08:07 - returns something like say you have a
08:09 - function and it adds two numbers
08:12 - um
08:13 - that is your unit you call it call it
08:15 - add or something and you pass it you
08:18 - know two and two
08:19 - your unit test is going to execute that
08:22 - function and then
08:24 - it's going to make an assertion that the
08:26 - function returned four so
08:28 - um
08:30 - that's that's one way uh if your unit
08:34 - just does some side effects um and we'll
08:37 - see that here um in a minute like you
08:40 - know maybe it modifies some application
08:42 - state
08:43 - um you can just you know your unit test
08:46 - is going to execute your function and
08:48 - then it's going to make an assertion
08:49 - about the state of the application
08:52 - so here's the last concept
08:54 - there's only three i'm going to do so
08:57 - it's the integration test and so um
09:02 - i found when i started writing unit
09:04 - tests i would
09:07 - not really be sure what i was doing or
09:12 - in some cases the code i was trying to
09:14 - test was just
09:16 - very poor and
09:18 - coupled too tightly and i was trying to
09:20 - write unit tests in fact that's what i
09:22 - thought i was doing but i was writing
09:23 - integration tests and so
09:26 - um an integration test
09:29 - asserts like a a
09:32 - it's a test across multiple units or
09:34 - multiple modules multiple layers of your
09:37 - application or multiple subsystems
09:42 - when your unit test starts testing other
09:45 - units too you you just wrote an
09:47 - integration test and and it you can get
09:51 - really confused and uh
09:53 - your your whole tests all your tests can
09:55 - get really confused and but if you find
09:57 - yourself doing that all the time it
09:59 - might be a sign that that it's not the
10:01 - test that that's the problem it's it's
10:03 - that your code's not very testable
10:05 - um
10:07 - so
10:08 - an integration test
10:10 - is is a test across you know groups or
10:12 - layers and if that sounds vague it's
10:14 - because it is vague it depends on your
10:18 - your software's
10:20 - you know the kind of application you
10:21 - have maybe a web server will have an
10:23 - integration test
10:25 - um
10:26 - you know between
10:28 - i don't know you know that something is
10:30 - going to hit hit hit a
10:32 - a json endpoint or something maybe a
10:34 - command line app is going to have
10:35 - something different
10:36 - um
10:37 - a desktop app
10:39 - whatever
10:40 - you know an integration test is really
10:42 - just depends on what you're trying to
10:44 - test
10:45 - you may not know how i feel like this is
10:48 - this is like required to put
10:51 - in a tutorial like this this is how you
10:53 - install mocha
10:55 - with npm
10:56 - um how you install most things i
10:59 - recommend you use a is save it as a
11:02 - development dependency with i i like
11:05 - capital d some people like save dev but
11:08 - you know whatever
11:10 - so
11:11 - this is how you install mocha in node if
11:13 - you're going to use it in the browser
11:14 - it's a different story maybe
11:17 - so
11:18 - never mind that i'm just talking about
11:21 - node this is how you do it in node and
11:23 - so what happens when you do this well
11:26 - mocha is added to your manifest which is
11:29 - package.json it's in the dev
11:31 - dependencies property it becomes part of
11:34 - that
11:35 - um you know that object
11:38 - and it also gives you the mocha
11:41 - executable which lives in
11:45 - your local node modules in the
11:48 - dot bin folder i have no idea what that
11:51 - looks like on windows all this is going
11:53 - to be
11:54 - you know linuxc unixy
11:57 - type stuff i'm not sure exactly how that
11:59 - works in windows but
12:02 - so you get a mocha executable
12:04 - it's in it's in your your manifest and
12:06 - next time you're on npm install you'll
12:08 - get mocha so great
12:11 - but if we're installing mocha that means
12:13 - we have something to test
12:14 - and so this is what we have to test so
12:18 - this is the obligatory contrived example
12:21 - which is
12:23 - some express middleware
12:25 - i couldn't
12:26 - think of i mean i i don't know what else
12:28 - to do it's something that's kind of
12:30 - practical but really really simple
12:33 - um
12:34 - so if you're unfamiliar with express
12:37 - express is like the
12:39 - the the defaults
12:42 - like
12:43 - like web framework web server framework
12:46 - for node.js it's what you're probably
12:48 - going to reach for there are other ones
12:50 - but most people just use express it
12:52 - seems
12:53 - and so
12:55 - expresses is kind of this
12:59 - wrapper around
13:00 - um
13:02 - you know node's built in http server uh
13:06 - and
13:07 - it it it basically functions as this
13:11 - as as like a list of
13:14 - it it's it's built out of these things
13:16 - called middleware and so middleware is
13:18 - just a function um and this is this is
13:21 - this is middleware it's its function
13:23 - accepts uh three parameters
13:25 - when you build an express act you
13:27 - basically chain all these things
13:28 - together you set up routes and
13:30 - um you know what happens when a
13:33 - [Music]
13:35 - a request comes into your server is uh
13:39 - that request gets filtered or it's sent
13:41 - through all this different middleware
13:43 - and and eventually something happens and
13:46 - you get your response um
13:48 - and so a middleware function
13:50 - accepts a
13:52 - request which is req which is this
13:55 - object that represents the the request
13:58 - whether that's a get request a post
13:59 - request some somebody some machine
14:02 - hitting your web server
14:04 - and the re uh response object which is
14:07 - going to be this thing you're building
14:09 - and that's what you're eventually going
14:10 - to return
14:12 - and send it back to the requester
14:15 - and then there's this this third
14:17 - parameter to middleware which is this
14:20 - which is next and it's a function and it
14:22 - says
14:23 - i'm done doing what i'm doing
14:26 - go ahead and execute the next middleware
14:28 - whatever that is you don't really care
14:30 - what it is it's just just like it's it's
14:32 - like a cue and it
14:34 - you know knocks off the next one
14:36 - and so this particular bit of middleware
14:40 - um it adds a
14:44 - time property
14:46 - to the request object and so it's it's
14:49 - not a
14:50 - uh it's a javascript timestamp which is
14:53 - not a unix timestamp because it's in
14:55 - milliseconds
14:56 - anyway that's what it does
14:59 - and that's all it does
15:01 - and so
15:02 - we decided we wanted to write a unit
15:04 - test for this and so we're going to make
15:06 - one
15:08 - um
15:09 - mocha will
15:11 - it has some defaults which i think are
15:13 - pretty reasonable if you make a folder
15:15 - called test
15:17 - mocha assumes that if you give it no
15:19 - other information it assumes your test
15:20 - files are in there
15:22 - and so if you make a test directory and
15:24 - and put a file in it with a dot js
15:27 - extension it will find that file and
15:29 - execute it
15:33 - by convention
15:35 - we like to name these files with the dot
15:38 - spec.js
15:40 - i
15:41 - i don't know where that came from but
15:44 - it's just one of those things well we
15:45 - always did it that way so
15:48 - um that's kind of how we're doing it but
15:50 - it's it's a good way to say you know to
15:53 - just visually tell oh this is a test and
15:54 - not not a source file
15:57 - some people like to put them next to the
15:59 - source files which is another way to do
16:01 - it so
16:02 - but anyway uh by default it looks in
16:04 - this test directory
16:06 - and the file we're going to create is
16:08 - request
16:09 - dashtime.spec.js which will contain unit
16:12 - tests for this
16:13 - middleware
16:14 - and before i go any further
16:17 - um and this is this is something that
16:19 - that people get really religious about
16:21 - it's that moki uses globals
16:25 - when you go and you
16:27 - want to write a test that the you know
16:30 - moka is going to run
16:32 - you don't have a like require mocha like
16:35 - give me all these functions at the top
16:37 - of your test file you don't have import
16:39 - stuff from mocha
16:42 - mocha doesn't even use a namespace it
16:44 - doesn't even have like that like sort of
16:47 - you know courtesy it simply just dumps
16:50 - everything into the global namespace and
16:53 - in the browser that's going with the
16:55 - window object and node it's the global
16:57 - object um and so why
17:00 - um
17:04 - the only reason that i can think of it
17:05 - no i didn't write mocha i just maintain
17:08 - it but
17:08 - the only i can only speculate why some
17:10 - of the
17:11 - the decisions were made but
17:14 - it reduces boilerplate plain and simple
17:16 - it's a trade-off a design decision that
17:19 - was made this is you know what i don't
17:20 - want to have to require all this crap at
17:23 - the top of every file because i got 400
17:25 - test files
17:27 - if we simply throw things into the
17:29 - global like you're not supposed that but
17:31 - we did it anyway
17:32 - and so
17:34 - there it is it's for
17:36 - developer ergonomics more or less it
17:38 - reduces boilerplate and some people
17:39 - don't like this
17:41 - um
17:42 - but
17:44 - it is what it is
17:46 - um what we want to do
17:48 - is create a suite and so um what's a
17:50 - suite it's it's a way to organize your
17:52 - tests so a a suite
17:55 - will contain
17:56 - tests that will contain something called
17:58 - hooks that i'm not going to talk about
18:00 - but
18:01 - you can also put other sweets in them
18:05 - we use a function called describe
18:08 - to create a suite and you give it a
18:11 - title and a callback function and the
18:12 - callback is the body of the suite and so
18:15 - the title um is you know basically
18:18 - this is this is this logical
18:19 - organization whatever makes sense to you
18:22 - you can nest the hell out of these
18:24 - things or not it's up to you
18:27 - but since we're going to write a test
18:28 - for the request time middleware
18:31 - that's what we're calling the suite
18:33 - um ostensibly we would have more than
18:35 - one but in this talk we do not
18:38 - um
18:40 - and so uh next we're going to start
18:43 - trying to turn the variety unit test but
18:46 - another another kind of gotcha
18:48 - about mocha is that
18:50 - it doesn't actually contain anything to
18:52 - oops
18:53 - but
18:55 - so the question was uh ken about
18:58 - um
18:59 - conventions uh for
19:02 - uh naming suites naming tests and and so
19:08 - you know
19:10 - i i feel like some people who really are
19:13 - into this the whole bdd thing which i'm
19:16 - not going to go into you can look it up
19:18 - it's behavior-driven development it's
19:20 - it's more than just
19:22 - like it's more than just coding you know
19:24 - it's it's like a whole like business
19:26 - process thing and if you're really into
19:28 - that i'm sure they have some really nice
19:30 - rules that you get to adhere to
19:32 - but i'm not one of those people um and i
19:35 - don't think most people do that and so i
19:39 - think at some level it doesn't matter
19:41 - too much um
19:43 - what i like to do personally is i will
19:46 - have like a suite and it will um
19:49 - you know kind of give give a basic
19:51 - description of of where we're at um
19:55 - if i have some sort of condition um
20:00 - uh i might want
20:02 - and and within that condition i need to
20:04 - have multiple tests i like to have one
20:06 - assertion per test and so if i have um
20:09 - a a suite with uh you know
20:12 - with with some condition and then i'll
20:14 - have some tests in there and then i'll
20:16 - like try to try to chain them with and
20:20 - and say so
20:21 - you know we'd start with describe
20:23 - request time middleware um
20:26 - uh describe when such and such is true
20:29 - and then we're going to have another
20:30 - describe and such and such as false it
20:33 - should blah blah blah blah and so i try
20:35 - to make it kind of like a sentence but i
20:37 - don't go crazy about it i mean i'm
20:39 - there there's there's things i mean if
20:42 - you have a test
20:44 - test this
20:45 - you know
20:46 - like typescript i think is the biggest
20:48 - consumer of mocha that i know of they
20:50 - have like thousands and thousands of
20:52 - tests maybe you should ask them how they
20:53 - do it because like i can't imagine how
20:57 - to organize something like that but
20:59 - you know i think just just whatever
21:01 - works for you is is fine there's there's
21:04 - really
21:05 - there's no reason in my mind to
21:09 - you know
21:10 - some some people like to have
21:12 - like um
21:14 - special tokens in there so they can grep
21:16 - for things and stuff and i don't know
21:18 - but
21:20 - so uh and you'll see that there's um i
21:23 - talk a little bit about this kind of
21:26 - english language type type thing um but
21:29 - so mocha
21:31 - mocha doesn't
21:32 - have any functionality in it to make
21:35 - assertions which is odd for a test
21:38 - framework
21:39 - it seems like kind of a
21:42 - fundamental part of the test framework
21:44 - right um
21:46 - so with other test frameworks like maybe
21:49 - jasmine you get the whole enchilada and
21:51 - like jasmine is really similar to mocha
21:54 - um
21:55 - you you just you get everything with
21:57 - jasmine you get
21:58 - your spies your stubs your assertion
22:00 - framework blah blah blah you get
22:02 - everything in there
22:04 - but
22:05 - um
22:07 - mocha doesn't and again i don't know why
22:11 - one can speculate
22:13 - maybe maybe the original author felt
22:15 - that it was
22:16 - simply you know
22:19 - the
22:20 - the best way to to give people the
22:23 - flexibility to work the way they want
22:25 - maybe he was lazy and didn't want to do
22:27 - it i don't know but i could i can look
22:29 - at this problem now with with hindsight
22:32 - and say you know he made the right
22:33 - choice because you know after he he
22:36 - wrote mocha and it started to take off
22:39 - it started this kind of
22:41 - you know
22:43 - a market or is this like um
22:47 - you know all these little assertion
22:48 - libraries started popping up and and now
22:51 - there's quite a few
22:52 - and they're all different and so people
22:55 - have found lots of different ways that
22:57 - they want to write assertions and
22:59 - certainly now mocha couldn't support all
23:01 - these
23:02 - you know
23:03 - it's it's kind of
23:05 - there's like unexpected and and chai i
23:09 - mean
23:10 - try especially as an assertion library
23:12 - that has its own ecosystem
23:14 - i mean it's there's there's just like a
23:17 - ton that you can do and i think i think
23:19 - originally the the right choice was made
23:22 - not to kind of go there with the
23:23 - assertion library
23:24 - but
23:25 - node comes with one there's a assert
23:28 - module uh node uses this assert module
23:31 - to test itself
23:32 - um and we're also going to need our
23:34 - middleware and so
23:36 - this is our unit test file and we're
23:38 - just going to pull in the assert module
23:40 - we're going to pull in our middleware
23:45 - and next we're going to create a test
23:48 - and so uh before we had described for a
23:51 - suite and then in the sweet body we put
23:53 - a test and you create a test with it
23:55 - title callback very similar um you can
23:58 - see here
23:59 - it kind of
24:01 - went out a little bit but
24:03 - so
24:04 - putting this more together so we have
24:06 - request time middleware it should add a
24:07 - request time property to the rec
24:09 - parameter which is basically
24:12 - all that little middleware function is
24:14 - doing and so
24:15 - uh here we have a call function make
24:17 - assertion with notes this is what's
24:19 - going to go in there
24:21 - and it's if if you
24:24 - kind of write your tests
24:26 - like a sentence can we know it
24:30 - um then the reporting will look a little
24:33 - nicer but
24:35 - um
24:36 - so here we go here is here is my first
24:39 - try at
24:41 - at the unit test and so
24:43 - my unit test um is going to call request
24:46 - time
24:48 - it's going to pass a
24:49 - empty object
24:51 - and um why is it going to pass an empty
24:53 - object well
24:55 - you know this this middleware function
24:56 - you have to when you're writing your
24:58 - test you have to think of that unit as a
25:00 - completely standalone piece of code it
25:02 - doesn't it shouldn't be
25:03 - coupled to anything else really and
25:06 - you know the the middleware as you wrote
25:07 - it it doesn't know anything about
25:08 - express all it knows is it gets three
25:10 - parameters and and you know it adds a
25:12 - property to some object and so
25:16 - the the object that it adds a property
25:18 - to might as well just be an empty object
25:21 - and this is an example of
25:23 - a unit that
25:25 - just basically has side effects it
25:27 - doesn't return anything so
25:30 - um
25:31 - we get we have this uh
25:33 - you know we call request time and so now
25:37 - uh the state should be modified
25:40 - and um we can make an assert and so uh
25:44 - make an assertion so assert okay okay is
25:47 - is
25:48 - maybe it's the same thing as the assert
25:51 - function i don't know but basically
25:53 - you pass something to okay and if that
25:56 - something is truthy then it passes if
25:58 - not it's false it's very very simple
26:00 - just pretty much the same kind of bare
26:03 - bones assertion function wrote before
26:05 - um
26:07 - and so if you know what's going to
26:09 - happen here
26:10 - don't spoil the surprise
26:12 - it's a good surprise i promise
26:17 - now
26:17 - we're going to run this
26:19 - and so how do we run it we
26:21 - it ends up in node modules
26:24 - and so we just call mocha it looks in a
26:26 - test folder it runs all the files in
26:28 - that test folder and it
26:30 - fails because
26:32 - why
26:34 - so what do we see here um
26:37 - we see
26:38 - um
26:40 - this first line request time middleware
26:42 - this is the
26:43 - suite
26:44 - um below that is a test
26:47 - and
26:48 - i believe that yeah that number shows up
26:52 - to
26:53 - cross-reference down here
26:56 - it's a number if it fails it's a check
26:58 - if it passes
27:00 - and we can see we have no
27:02 - passing tests in seven milliseconds one
27:05 - failing test in
27:06 - seven milliseconds and
27:08 - what happened so
27:11 - it gives us the sweet again that failed
27:13 - it gives us the test title that failed
27:15 - and right under that it gives us a stack
27:17 - trace and this stack trace goes on a
27:19 - while
27:20 - i cut it off there but
27:22 - the important part is next is not a
27:23 - function
27:24 - and so why is next not a function it's
27:26 - because our middleware tries to call a
27:28 - function called next and we didn't give
27:30 - it one
27:32 - oops
27:33 - so
27:35 - let's take a look at that quest time
27:37 - source again
27:38 - okay so
27:40 - what can we get we could we could do it
27:42 - like this
27:44 - so we have that empty object again
27:46 - and the second parameter it needs a
27:48 - second parameter we don't use the second
27:50 - parameter for anything
27:52 - but it needs something in there right so
27:55 - null
27:56 - um
27:57 - it could be void 0
28:00 - it could be anything it could be foo if
28:02 - you want it doesn't it doesn't use it
28:04 - doesn't matter and but the third
28:06 - parameter is is a function uh it simply
28:08 - calls the function and so it has to be a
28:10 - function that function doesn't have to
28:12 - do anything um
28:13 - and so then we assert that the request
28:16 - time
28:17 - property is greater than zero and
28:20 - run it again and
28:22 - great
28:23 - it passed
28:25 - so does anybody have any questions about
28:27 - this kind of this
28:29 - this flow of
28:30 - of uh
28:32 - writing unit tests and ex executing
28:34 - mocha and
28:40 - good
28:44 - yes
28:45 - it's stubbing it's just i would call it
28:47 - a stub yeah and so you're going to find
28:49 - yourself creating something called stubs
28:52 - when you're writing unit tests quite
28:54 - often um where you have some dummy data
28:56 - or
28:57 - maybe that that unit calls a another
29:00 - function somewhere and maybe you need to
29:02 - stub that out because you don't really
29:04 - care what that does or or you want to
29:07 - say oh so i have function a that calls
29:09 - function b well what happens when
29:10 - function b what happens to function a
29:13 - when function b returns such and such
29:15 - you have this stub or this this
29:18 - uh yeah that basically pretends it's
29:20 - function b and returns a certain value
29:22 - and that's kind of up to you and so
29:25 - um
29:26 - there's there's a lot of
29:29 - kind of bickering about
29:31 - what's best there and i think i think it
29:33 - more comes down to
29:35 - not how your tests are written more
29:38 - importantly how your how your actual
29:40 - code is written
29:41 - but your
29:42 - test can be indicative that your code is
29:44 - not good and so this passed that's great
29:48 - um we have an integration test example
29:51 - um
29:52 - and so again an integration test is it's
29:55 - like it's the next level up from a unit
29:58 - test um
29:59 - it's it's like you pull back and you get
30:01 - this higher level view um
30:04 - it's
30:05 - it's as far as we're going to go with
30:07 - this one but um so
30:09 - what do we have uh you're looking at an
30:11 - ex like an express-based web server here
30:14 - and so
30:15 - all this thing is doing is it's it it
30:18 - creates an express server it pulls in
30:21 - our middleware
30:22 - and then it registers a root that's this
30:26 - app.get and so when i start this server
30:29 - on port 3000 and if i go to the
30:33 - path if i go to you know localhost colon
30:36 - 3000 forward slash unix timestamp
30:40 - it's going to execute this code
30:42 - and so
30:44 - what this
30:45 - res.json thing does is it it it sticks a
30:49 - g sooner response in the
30:51 - adjacent object in the response built
30:53 - from my object here
30:55 - and remember if um
30:57 - i mentioned that a javascript timestamp
30:59 - is not a unix timestamp but we want a
31:00 - unix timestamp and so
31:02 - we need to
31:04 - you know turn that into seconds and
31:06 - that's about as good as we're going to
31:07 - get there and finally this bit at the
31:09 - bottom i don't know some of you may have
31:11 - seen something like this before
31:14 - but basically um
31:16 - what you can do with this file is you
31:18 - can either acquire it or you can execute
31:21 - it straight away so you can say node
31:23 - app.js and then it'll start listing on
31:26 - port 3000 but if you require it from
31:28 - some other module it will not listen
31:31 - because that's not the main module um
31:35 - it's just kind of a an easy way and
31:37 - maybe not the best way but it's a way to
31:40 - to get at this application that we've
31:43 - created and and test it
31:45 - from you know an integration testing uh
31:49 - standpoint and
31:51 - um
31:52 - one thing with integration testing and
31:53 - as you get
31:54 - kind of to a higher and higher level
31:58 - when you're testing your code if you go
32:00 - to integration test or finally you end
32:02 - up with end to end tests where you're
32:05 - you know you're hitting a browser maybe
32:07 - and and and clicking some buttons and
32:09 - and it tests all the way through the
32:11 - data layer um
32:13 - you know the higher up you get the more
32:15 - tooling you need um and so here we are
32:18 - at integration tests and
32:20 - this would really be a pain we asked the
32:22 - test without some nice
32:24 - helpers and so there's a great helper
32:26 - called super test and supertest is a
32:30 - it's basically
32:31 - it's like a
32:33 - mutant assertion framework that helps
32:35 - you test
32:36 - express servers
32:38 - and um
32:40 - you're going to need express too but uh
32:42 - super test so uh basically it it runs
32:46 - these requests against an uh a server
32:49 - object
32:50 - you don't have to start a server in
32:52 - process a
32:53 - and then tab over and then start your
32:55 - tests and start hitting hitting the the
32:58 - the endpoint um
33:00 - you just give it the server object and
33:03 - you can work with it directly which is
33:04 - kind of nice
33:05 - um
33:06 - you know you don't have to listen on a
33:08 - port
33:09 - apparently it's a lot quicker
33:12 - you know i haven't used it too much but
33:16 - here it is so super test
33:19 - and so we have our
33:21 - assert
33:23 - as before we have our app and so this
33:25 - was that thing i just showed you which
33:27 - is
33:28 - uh
33:29 - this this dude this is app.js and so we
33:32 - pull that in and we have our suite
33:35 - uh get unix timestamp so so all the
33:37 - stuff that we want to test when
33:42 - that endpoint is hit with a get request
33:46 - we
33:47 - might have multiple tests in here but we
33:49 - just have one and our test should
33:51 - respond with json object containing
33:52 - timestamp
33:53 - and so this is the same type of thing
33:56 - um
33:58 - that we're asserting before but we're
33:59 - asserting it at a at a higher level now
34:01 - we want to make sure that
34:03 - you know
34:04 - um not only was
34:08 - uh request time
34:10 - you know written properly not only does
34:11 - that function do what we thought it
34:13 - should do
34:14 - but our whole system works and you know
34:16 - the point of our system is to have an
34:18 - endpoint with
34:19 - returning a unix timestamp and without
34:22 - this integration test how can we be sure
34:24 - um other than the test manually because
34:26 - our unit test won't tell us if our app
34:28 - actually works um
34:30 - this won't really tell us that but it'll
34:32 - get this closer so
34:34 - um there's a couple ways to do it one is
34:36 - this node back style with with callbacks
34:39 - um and this is an example of a
34:41 - uh
34:42 - asynchronous mocha test and so um when
34:45 - you're using supertest you're making
34:47 - http requests
34:49 - in tests these are asynchronous
34:53 - in this case
34:55 - so
34:56 - it's kind of magic in mocha you give it
34:58 - this done function and if that done
35:00 - functioning exists
35:02 - mock will expect you to call it um
35:05 - it doesn't care when
35:07 - it will eventually time out after so
35:09 - long but um
35:11 - it wants you to call done at some point
35:13 - and so you can do all sorts of async
35:15 - stuff in here
35:17 - and then when you're finished you you
35:19 - call done um and so super test is this
35:22 - request function
35:23 - um
35:24 - and we pass it our app instance that we
35:26 - had before
35:28 - dot get would be um you know pretend i'm
35:31 - gonna get requests to the unix timestamp
35:34 - path of this server
35:36 - uh we expect
35:37 - this is kind of the assertion portion we
35:39 - expect uh 200 okay
35:42 - status
35:43 - back and then finally when we're done if
35:46 - there's an error which
35:48 - i don't think there really could be an
35:50 - error here but if if if there is we we
35:53 - can hand that back to done and so this
35:55 - is the kind of air first
35:57 - callback thing that was so popular um
36:00 - and still is for some people but
36:02 - um finally uh if that's okay we can make
36:05 - our assertion again and so
36:09 - what i did there was um you know now
36:12 - that i've
36:13 - you know divided this millisecond style
36:16 - timestamp by a thousand i can now be
36:19 - sure that it's a unique style timestamp
36:22 - maybe
36:23 - if it's
36:24 - under this very large number um
36:27 - if if i didn't do that you know division
36:29 - this would fail anyway so that's one way
36:31 - to do it but that way sucks so this way
36:35 - is even better and you can probably get
36:37 - even better too with async await but um
36:39 - with moka you can simply return a
36:41 - promise and if you return a promise from
36:44 - a test it it says oh you're an async
36:46 - test okay great and so this just works
36:48 - with promises
36:50 - it's the same exact test as before
36:53 - so we we check to make sure we got a 200
36:56 - okay and then we look at the response
36:58 - and in that body
37:00 - which has been like
37:02 - magically becomes a javascript object
37:04 - out of its json format
37:06 - we check the timestamp
37:09 - and so
37:11 - there we go and so we just run mocha it
37:14 - finds that we just added this other
37:16 - uh i can't remember what i called this
37:17 - file but we tossed it in there and into
37:20 - the tester and it just ran both of them
37:24 - so the question was do if you have an
37:26 - asynchronous test um
37:28 - is it reported
37:30 - asynchronously or is it is reported in
37:32 - in order
37:33 - the answer is report it in order mocha
37:36 - is uh it only works in serial um
37:40 - it it will not execute two tests at a
37:43 - time
37:44 - if it's doing something like that you're
37:46 - probably gonna get a really hard to
37:48 - debug error and you're doing something
37:50 - wrong
37:51 - but
37:52 - um yeah it just runs it's gonna run unix
37:55 - timestamp and it's gonna hang out there
37:57 - and wait until that's done before it
37:59 - goes to this other file
38:01 - uh it's
38:02 - yeah it it runs everything in order and
38:05 - it it it will not try to
38:08 - um you know do two things at once
38:13 - um
38:15 - that's that's that's about all i got so
38:18 - you know before this uh ben said i was
38:21 - super positive which is
38:23 - really weird and so but i don't want to
38:25 - let him down there you go
38:27 - that's all folks balloons
38:30 - an emoji and a poop
38:32 - and um this this these slides and the
38:35 - example code is up there at this url
38:38 - and you can download it and install it
38:40 - and run it and
38:42 - stuff um there's all sorts of all that
38:44 - code is in an example folder and that
38:46 - works i think
38:49 - [Applause]
38:55 - [Music]
39:07 - you