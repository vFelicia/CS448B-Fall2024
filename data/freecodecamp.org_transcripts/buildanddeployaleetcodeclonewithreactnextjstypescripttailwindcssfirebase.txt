00:00 - in this course Barack will teach you how
00:02 - to build a detailed full stack lead code
00:05 - clone the app uses react with next.js on
00:08 - top it uses typescript to make the code
00:11 - easy to debug by adding types and
00:14 - interfaces and it uses Tailwind CSS for
00:17 - styling lastly the app uses Firebase for
00:19 - authentication and for the database then
00:22 - at the end you'll learn how to deploy it
00:24 - to versel Barack starts with a demo of
00:27 - what you'll be building so in our home
00:30 - page we have a list of problems where we
00:33 - can see so far we have 10 problems but I
00:35 - will show you how you can add more of
00:37 - these and for each problem we have the
00:40 - title difficulty category solution as
00:43 - well as the status which will come back
00:45 - later
00:46 - and when we click one of the solutions
00:49 - it'll take us to the related individual
00:52 - solution and it'll show this YouTube
00:55 - video but so far it navigates us to my
00:58 - own YouTube channel because this is how
01:01 - I set it up and I will show you how you
01:03 - can integrate your YouTube channel into
01:05 - this application so we can watch it from
01:08 - here or we can click to this link it'll
01:10 - take us to the YouTube so we can close
01:13 - that and so we so we can visit the
01:16 - problem pages so let's go to this to
01:18 - some problem page which will take us to
01:21 - this URL and we have our description
01:25 - site with examples constraints as well
01:29 - as our code editor and test cases so we
01:32 - can switch between these test cases
01:33 - it'll update the UI and we can write our
01:38 - code here it have JavaScript support so
01:41 - far and you can change the font size by
01:45 - getting this settings and we can toggle
01:49 - between the full screen
01:51 - exit full screen we can like problems
01:54 - but so far we cannot because we need to
01:56 - log in which we'll do in a minute and we
02:00 - can submit problem and again we need to
02:02 - log in to submit that
02:04 - and now let's try to log in which I have
02:06 - already count so I'm going to try to log
02:08 - in it showed it's logged Us in and now
02:11 - we're in this page so since I already
02:14 - saw this problem it'll fetch this code
02:16 - solution from the local storage
02:19 - and now since I've solved it I have this
02:23 - status check and now let's try to like
02:26 - this
02:27 - it'll send a fashion request to our
02:31 - database which is going to be a Firebase
02:33 - firestore and then it'll update the UI
02:37 - so now let's try to submit our code we
02:40 - will get this beautiful celebration text
02:42 - as well as our toast so this is what we
02:45 - call toast this alert and now let's try
02:49 - to make this
02:50 - uh called uh it doesn't work so let's
02:52 - say I plus one and now let's try to
02:55 - submit that it'll say one or more test
02:56 - cases failed so that's cool we're also
02:59 - handling the errors we have our timer so
03:03 - we can open that or we can reset that
03:06 - um so we can see our email when we hover
03:09 - over our profile image we can log out
03:12 - and yeah this is going to be pretty much
03:14 - it also we can go to the next problem we
03:18 - even have this uh examples with images
03:21 - we can go to next one next one next and
03:25 - this should be the end of it and like in
03:28 - the problem page we see that or like in
03:30 - the home page we see that we have 10
03:31 - problems but here after the fifth one
03:34 - watch what's gonna happen when I click
03:36 - this it'll take us to the first one and
03:38 - it is because I only added test cases
03:41 - for all these this all these five
03:44 - problem but I will show you how you can
03:46 - add for these if you wanted to and I
03:49 - didn't do this I didn't do this for my
03:51 - own site project because it just
03:54 - requires writing a bit more code and I
03:57 - basically didn't and in the status that
04:00 - I said well I'm gonna come back later so
04:02 - if you are logged in so if you are solve
04:04 - that problem it'll fetch that in our
04:07 - database and it'll put that a check mark
04:10 - into this status calling
04:13 - and for these other problems when we
04:16 - click one of them it'll take us to the
04:17 - Lee code original problem uh link
04:21 - and yeah I think this is the old
04:23 - application and lastly we can log out
04:27 - and we have instead of a premium button
04:30 - we have this support button if you like
04:32 - this project and if you want to support
04:34 - my work
04:36 - just click this link and it'll show you
04:38 - how you can contribute or how we can
04:41 - support and otherwise you don't need to
04:42 - worry because I'm just putting this
04:44 - content for free so with this machine
04:46 - stop out of the way now we can go to
04:49 - this authentication model or the page
04:51 - where we can create account we can log
04:53 - in or we can reset our password by
04:56 - providing an email so let's say I fill
04:59 - this form and I click this it'll send us
05:02 - a reset email and when we open that in
05:05 - our email we will be able to reset our
05:08 - password
05:09 - so also we have this kind of cool image
05:12 - and I think this is going to be all and
05:16 - now let's get into the coding because
05:18 - there is a lot to cover and there is a
05:20 - lot to learn
05:21 - now to get started I created an empty
05:23 - folder called liquid YouTube you can
05:25 - call it yours however you want and you
05:28 - will create a terminal and we'll go to
05:29 - Google to get the next JS typescript
05:32 - script to start our project we will type
05:35 - next JS typescript we will go to the
05:37 - first one we'll take this script copy
05:40 - and paste it into our terminal
05:43 - so let's paste it and enter so it'll
05:46 - create us an xjs app with typescript
05:49 - configurations so what is our project
05:51 - named we can just click that to make it
05:54 - into our root folder we'll click enter
05:57 - yeah we want es link you want Source
06:00 - directory
06:02 - so we don't want experimental app
06:04 - directory so we'll click now so we can
06:06 - click tab for aliases and we can click
06:09 - enter so it'll create us our app and
06:12 - once it is done I'll be right back
06:16 - okay now our app is initialized and now
06:19 - let's try to add Tailwind CSS into our
06:22 - app so we'll go to Google and say
06:24 - next.js Tailwind CSS
06:27 - and we'll go to Tailwind CSS website
06:30 - will already create our project so we
06:33 - will install till in CSS we copy this
06:36 - um to yes code paste it yes we want to
06:39 - paste that
06:40 - so it'll run that for us
06:42 - and after that we will need to configure
06:45 - our template paths I guess
06:49 - yeah I will also copy this file and it
06:51 - will paste it into Tailwind config.js
06:54 - and now back to our vs code editor and
06:57 - now we need to click enter for this as
06:59 - well
07:00 - okay the configuration is done we'll go
07:03 - to Tailwind config.js file and we'll
07:06 - paste the latest thing that we copied
07:10 - so I pasted my colors and please feel
07:12 - free to get them from our repo
07:15 - and now the last thing that we need for
07:17 - Tailwind CSS is to get this base
07:20 - components and utilities and copy them
07:22 - paste it into our global.css which is
07:25 - going to be in Styles folder so we can
07:28 - delete all of them and we can paste it
07:30 - but we can save this one and now let's
07:33 - try to npm run Dev
07:36 - we will get in localhost 3000 so
07:40 - localhost
07:41 - 3000 what do we get
07:44 - so we got our boilerplate home page with
07:47 - next.js and it doesn't have any Styles
07:50 - because we just deleted them now we can
07:52 - go to the pages folder into the index.js
07:55 - or TSX where we can delete all of the
07:58 - content here so within the main and we
08:02 - can write our own main tag with maybe
08:04 - with heading 1 saying hello world and we
08:07 - can delete fonts families Styles images
08:10 - and we can even delete this one but for
08:13 - now let's just put it right there and
08:15 - save it go to the browser here we see it
08:18 - is updated and for now the first thing
08:21 - that I want to build is the
08:23 - authentication page where we are going
08:25 - to have our Nail Bar in this
08:28 - um this image with the our models okay
08:32 - we'll have our signing model register
08:34 - model and also the forgot password model
08:37 - and first we are going to build the
08:40 - design the UI and then we're gonna add
08:43 - to the functionalities
08:46 - so then first let's get started with
08:48 - this navbar and this image
08:50 - so the first thing that we want to do is
08:53 - to delete this head tag and we want to
08:55 - put it in another file which is going to
08:58 - be underscore app.tsx this is the where
09:02 - our application starts so this line
09:05 - makes it possible for our application to
09:08 - run so we're going to delete this line
09:10 - for a second and we'll create a react
09:12 - fragment and we will paste the line that
09:16 - we just deleted and then we're going to
09:18 - add our own head tag where I'm going to
09:21 - walk you through what i what we are
09:22 - doing here so we are adding our title
09:25 - which is lead clone and we are adding
09:27 - our file icon as well as our viewport
09:30 - this is just as some requirements that
09:32 - we need to give for the browser and then
09:35 - we have our description which tells what
09:37 - is our application is all about
09:40 - and then we have this images inside the
09:43 - public folder that I have added and you
09:46 - need to take them from you need to grab
09:48 - them from our GitHub repo so we have our
09:50 - Avatar we have our fav icon hero image
09:53 - logo and another logo for authentication
09:56 - page so with that being said now let's
09:59 - save this file and go to our browser we
10:01 - see that we've got our file icon as well
10:04 - as our title and now let's go to build
10:06 - the nav bar
10:08 - the first thing that we want to do is to
10:10 - go to inside the source folder and
10:12 - create another folder called components
10:14 - and all of we are going to put all of
10:17 - our components into this folder and our
10:19 - first component is going to be navbar
10:21 - and we're going to create navar.tsx file
10:24 - and then we're going to say TFC to get
10:27 - this boilerplate which if you don't have
10:29 - you need to come to this extensions Tab
10:31 - and you need to install react like the
10:33 - Crypt uh script if I can type I think it
10:37 - was Snippets
10:39 - um this one so you need to install this
10:41 - to get this Snippets and we use the tfcd
10:44 - so we can change this text with maybe
10:47 - navbar and save it and then this is
10:51 - going to be inside our authentication
10:53 - page we can come to this Pages folder
10:55 - create auth page with
10:58 - index.tsx again using our boilerplate
11:01 - changing all of these indexes with uh
11:04 - both page and then we can again change
11:08 - this text with authentication page
11:12 - and now if we go to URL slash oath so it
11:16 - is our home page and we go to
11:17 - authentication page we are going to get
11:19 - our authentication page so it is it
11:22 - works in a way that when in your next GS
11:24 - applications whenever go to whenever you
11:27 - go to another page your next.js
11:29 - applications is gonna look up into this
11:31 - Pages folder and if there is any related
11:34 - folder or file name with that URL it'll
11:37 - try to match that and if there isn't
11:39 - it'll return 404. now let's try to go to
11:42 - login page which we don't have it'll
11:45 - give us this 404 because it'll take a
11:47 - look at this Pages folder it cannot see
11:49 - any folder called login and it'll return
11:52 - 404. okay with all that being said now
11:55 - let's try to add our markup or like
11:58 - class names with this authentication
11:59 - page so the first thing that I want to
12:02 - do is to give this background as well as
12:05 - giving this container where everything
12:07 - is in the middle
12:09 - so back to the vs code we are gonna
12:11 - first make this give us some class name
12:15 - and it's going to be PG gradient to
12:18 - bottom and from Gray 600 to it is going
12:24 - to be like 2 Dash black
12:27 - and then it'll also be covering the
12:30 - whole screen so we're going to say
12:31 - height screen and the position is going
12:33 - to be a relative uh in case you use any
12:36 - absolute and then we're gonna have
12:38 - another trial tip it is going to be
12:40 - maximum with 7x large and margin X is
12:44 - going to be Auto to Center everything
12:46 - and then we're gonna put our nav bar
12:49 - um we need to import that so uh we
12:52 - import it now let's save this one and
12:54 - take a look at it
12:56 - um into it should be an auth page
12:59 - yeah so I change this background from
13:01 - this it you know see it's kind of
13:03 - getting from uh gray to Black where we
13:06 - have this blue-ish that going to Black I
13:09 - think this looks better and now let's do
13:11 - the navbar
13:14 - so back to the vs code the navbar
13:16 - component so we're gonna have to delete
13:19 - this one and maybe put it like this give
13:22 - some class names it should be Flex uh
13:25 - item Center and justify between I guess
13:29 - yep and then from small screens and
13:31 - above it should have heading x 12 but
13:35 - otherwise in below small screen is going
13:37 - to be padding X2 and then from medium
13:40 - and above it should be heading x 24 and
13:44 - then yeah I think this is enough for
13:47 - this diff and then we need to have some
13:49 - link which is coming from next link
13:51 - we're going to import that and it'll
13:53 - gonna have some href that will navigate
13:55 - us to our home page and for the class
13:58 - name we're gonna have Flex items banner
14:02 - and justify enter as well and then
14:05 - height should be 20. and inside that
14:09 - link we're gonna have our image where
14:12 - it's class name gonna be hide full and
14:14 - it'll be your logo.png which you have
14:17 - inside this public folder that it should
14:20 - be that logo in our nav bar and after
14:24 - this we're gonna have another div for
14:26 - our button it's gonna be Flex with items
14:29 - Dash Center
14:31 - and inside we're going to have our
14:33 - button that says find should be signed
14:37 - in and for our class name we're gonna
14:40 - have
14:41 - um BG brand
14:44 - orange and this is where our Tailwind
14:47 - config.js comes into play we can see our
14:50 - so we can see a lot of colors and the
14:54 - brand orange is here and whenever you
14:57 - want to use one of them we can prefix
14:59 - them with this BG or text that is going
15:02 - to be changing either their color or
15:04 - their background so for now for this
15:06 - button we want them to we want it to
15:08 - have this brand orange color okay so
15:11 - moving on we're gonna have text white
15:14 - color and then heading X gonna be two
15:17 - and petting y gonna be one and small
15:20 - screens and above this button should
15:23 - have padding x S4 and we should give it
15:27 - around it empty for making it a border
15:30 - radius to give it to give it a border
15:32 - radius and it'll have text small and
15:36 - font medium
15:38 - okay now that looks great and then we'll
15:41 - have some other classes for Harvard
15:43 - state and it'll be on Hover text should
15:48 - be brand orange and PG and hover BG
15:52 - should be white like we are reversing it
15:55 - and then on Hover we are also gonna have
15:58 - a border two and on Hover again we're
16:03 - gonna have its border to be brand orange
16:06 - which if you print orange and yeah let's
16:10 - just for now save it and now let's take
16:13 - a look at in the browser yeah this is
16:15 - our button when we hover it do you see
16:17 - this flickring effect that it it gets
16:19 - its border and it just gets a little bit
16:21 - bigger and it is the reason is because
16:24 - at first it doesn't have that order but
16:27 - when we hover that we'll get border and
16:29 - it just makes it grow and in order to
16:31 - fix this we'll add this border to in
16:34 - normal case okay without hovering it
16:36 - should also have this but it its color
16:39 - should be
16:40 - um border transparent so that we don't
16:43 - see that now if you just save this now
16:45 - we hover this we don't see that
16:47 - flickering effect right and now let's
16:50 - just add a bit more duration and
16:52 - transition into this we will say
16:54 - transition duration uh 300 milliseconds
16:58 - and ease in out so we save this one we
17:01 - go to browser now it is a bit smoother
17:04 - okay now if you just zoom out you will
17:07 - see that it is identical to our original
17:09 - one and other than this background now
17:12 - let's add our image and then we're gonna
17:14 - create these models so back to the vs
17:17 - code and we save this one I think we
17:20 - should go to the arrow authentication
17:22 - page
17:23 - yeah now here we're gonna add some more
17:26 - divs with some classes after the nav bar
17:29 - so below it we're gonna have what actual
17:32 - images let me just create this div and
17:34 - for the class name
17:36 - um class name it should have Lex items
17:39 - banner and then it should justify Center
17:42 - and now for the height it should have we
17:45 - will use the calculate function which is
17:48 - going to take a caulk 100 VH 102 height
17:53 - minus 5 Ram which we uh give it for
17:57 - navbar okay and then we're gonna use
17:59 - this uh pointers events none and select
18:02 - none for but we're not gonna use We're
18:05 - not gonna let users to select our images
18:08 - and we're gonna say image that is gonna
18:11 - be inside the public folder in hero.png
18:15 - and then we're gonna make this alt to
18:17 - like our hero image now if you see this
18:20 - one save this one we go to our browser
18:22 - that we see our image and now as you can
18:26 - see I cannot drag and drop this image
18:28 - because of this uh select non endpoint
18:31 - or events none when I have this over I
18:34 - cannot select this image
18:36 - yeah okay so this is for our
18:39 - authentication page now let's go to and
18:41 - build this uh I think it should be the
18:44 - sign-in model
18:46 - so we see there is a lot of models in
18:48 - this page where we have three models and
18:51 - there is something common in all of
18:53 - these models which is this background
18:56 - overlay and this close button and this
18:59 - uh orange card so for that reason we're
19:02 - gonna create some layout and or with our
19:06 - models so it will create our models
19:08 - folder and inside we're going to create
19:10 - our sign up model at SX we're going to
19:13 - create our login.tsx we're going to
19:16 - create our reset password
19:18 - um.sex and then this is going to be our
19:21 - oauth model.sx this is going to be our
19:24 - layout okay so far we can say tfcd and
19:27 - save this one uh now as I said in sign
19:31 - in model or in login model we're gonna
19:33 - have this title and we're going to have
19:36 - these two inputs this button and all
19:39 - these chats and in our register we're
19:42 - gonna have like different inputs and
19:44 - different buttons but the common thing
19:47 - is going to be this close button discard
19:49 - and this overlay that's why we create
19:53 - um this old model overlay so that we
19:55 - don't write the same code over and over
19:58 - again so for this auth model I will just
20:00 - copy and paste some HTML and CSS and I
20:03 - will walk you through this and please
20:05 - don't get angry with me just because I'm
20:07 - copying and pasting some code so this is
20:11 - like it's going to be pretty basic HTML
20:13 - and CSS that you don't need to worry
20:15 - about and so let me just copy and paste
20:18 - that
20:19 - okay now I copied it and I'm gonna paste
20:21 - it just like this where we have our
20:24 - overlay with some uh div with some
20:27 - background colors with close buttons and
20:30 - actual images populate it in our screen
20:32 - which should be our model that is coming
20:34 - from components folder and if we go to
20:37 - our browser now to react icons but you
20:40 - will get this um so this is our
20:42 - component that we just added with some
20:45 - overlay background and we have this part
20:48 - it doesn't have any content that's why
20:50 - it looks very small but we're gonna add
20:52 - it soon and it has this close button
20:54 - with some border uh radiuses etc etc so
20:58 - this is the basic HTML for that and with
21:01 - some CSS classes so since this x looks
21:04 - pretty ugly and we're going to be using
21:06 - a lot of icons we'll come to our
21:08 - terminal and we'll install
21:10 - um react icons so we're going to say npm
21:13 - install react icons but while it
21:16 - downloads that you can go to Google and
21:18 - write react icons we'll get to this
21:20 - GitHub bio link where we can now type it
21:24 - down any icons that we want to get so
21:27 - for now I want to get this I O close
21:29 - icon I will copy that and come to my vs
21:33 - code I will paste it just like this and
21:36 - it doesn't auto complete for me for some
21:38 - reasons then I so I will come here and
21:41 - import that with GitHub co-pilot so I'll
21:44 - save that and maybe we should give it
21:46 - some classes to make it a bit bigger so
21:49 - height five with five now save this I'll
21:52 - take a look at our browser yep it looks
21:55 - almost identical with our demo so I
21:59 - think this is all for our layout now we
22:01 - need to create our login and click reset
22:04 - password and sign up all that components
22:07 - and we're going to be showing them
22:09 - inside here okay so let's say for now
22:11 - let's show the login
22:14 - in which we need to import that so we're
22:16 - going to use tfcd we will say this is
22:19 - our login
22:21 - save that and come to here we're going
22:24 - to import it
22:26 - and save it now we see that we got this
22:29 - login and now let's make it look
22:32 - identical with this one
22:36 - so in our login component we are going
22:39 - to need to have some form right because
22:41 - it's going to have our inputs and at the
22:44 - end we're gonna try to submit that so
22:46 - for that let's just add some classes so
22:49 - it'll be space
22:51 - um y 6 heading X should be six heading
22:55 - bottom should be four and then we're
22:57 - gonna need some uh maybe heading three
23:01 - which is gonna say like sign in to lead
23:06 - clone and then it'll be some it'll have
23:09 - some class names it'll be text x-large
23:11 - font medium right what is going to be
23:14 - medium and takes is gonna be white and
23:17 - then we're gonna have some of our divs
23:20 - which is gonna be container for our
23:22 - label and our
23:24 - um for inputs but for this one is going
23:27 - to be email html4 and we're going to
23:30 - give some class names or label it is
23:32 - going to be text small font is going to
23:35 - be medium yep
23:38 - oops it's going to be a phone to medium
23:40 - it's going to be display block and
23:42 - margin bottom is going to be two and
23:45 - then we're gonna have text uh gray 300
23:48 - and then in our label it's going to say
23:51 - your email
23:53 - and then after this label we're gonna
23:55 - have our input where it's going to be
23:58 - type of email and then name of it let's
24:01 - put it just like email as well and ID it
24:05 - should be email because with this html4
24:08 - is going to be referring to this ID and
24:10 - then obviously it's going to have a lot
24:12 - of classes
24:14 - and let's start with my border so border
24:17 - is going to be to outline none and on
24:22 - smaller screens and above it's going to
24:25 - be text mold and rounded rounded LV
24:30 - and then we're gonna have on Focus state
24:32 - it should be bring blue
24:36 - um 500
24:37 - and then also on Focus State we're gonna
24:40 - have border blue 500 and maybe that
24:43 - should be a Blog with full with padding
24:46 - 2.5
24:48 - and let's see It'll have BJ gray 600
24:53 - it'll have border gray 600 as well or
24:58 - maybe 500 and then we're gonna add some
25:01 - classes for placeholder it's going to be
25:03 - gray 400 and text maybe should be white
25:06 - now let's just try to save this one and
25:09 - before that let's just add also the
25:12 - placeholder for that so placeholder
25:14 - maybe it should be something like uh
25:17 - John or maybe like name at
25:20 - company.com so if we save this one and
25:24 - now let's go to the browser
25:25 - you'll see this like almost identical
25:28 - with this one right if you delete this
25:30 - it looks pretty similar and then we're
25:32 - gonna copy and paste this div which is
25:35 - gonna be almost the same thing with
25:38 - changing this content so your password
25:42 - write your password and this should be
25:45 - well let's just change all of them to
25:47 - password
25:48 - answered and for this maybe we could
25:51 - something like
25:53 - like this
25:54 - and I think that should be it for this
25:57 - one
25:58 - yeah it also looks pretty similar
26:01 - and then we're gonna have our button
26:04 - where
26:05 - it should be a button and then it'll
26:08 - have type of submit
26:12 - and then it'll have some classes again
26:14 - so it should be with full and text White
26:19 - and in Focus State it'll have Focus
26:23 - um bring blue of 300 and then it'll have
26:27 - font medium
26:29 - also around it should be LG and then
26:33 - we're gonna go to down maybe like this
26:35 - to give our a bit space and text small
26:39 - heading X gonna be five heading Y is
26:42 - going to be 2.5 and then text Center
26:47 - um and also we're gonna have background
26:50 - uh brand orange or good color and then
26:55 - on Hover we're gonna say background uh
26:58 - brand orange but with s okay and then in
27:02 - our button we're gonna say maybe like
27:04 - login
27:06 - and after that we're gonna have another
27:08 - button that tells to like did you forgot
27:11 - your password okay so we're gonna have
27:13 - another button and let me just scroll
27:15 - down to make it a bit cleaner and for
27:17 - class names it's going to be Flex with
27:20 - full and justify and and then inside
27:24 - this we're gonna have maybe an a tag
27:27 - okay so this is not really semantic but
27:30 - it'll gonna do that for us so for each
27:33 - rep that could be going anywhere not
27:35 - going anywhere it's going to be class
27:37 - name with X small and with block and X
27:43 - I'm sorry text brand orange and then on
27:47 - Harvard State we don't actually we
27:50 - actually want to have this underline and
27:52 - also it should be with full and also
27:55 - text should be on the right
27:57 - so with that we're gonna add our text
27:59 - that says forgot password
28:02 - last but not least we need to create
28:04 - another div which is gonna have again a
28:06 - lot of classes that says not register it
28:11 - why with a question mark and we're gonna
28:13 - give some class names if text small and
28:16 - font medium and like text Gray 500 and
28:22 - then inside this you are going to create
28:23 - an attack again with an href and it's
28:27 - gonna have some class names that says
28:29 - text blue to 700 and on Hover we want to
28:34 - underline that and inside that you will
28:37 - say create account so we kind of waste a
28:40 - lot of time by writing this HTML and CSS
28:42 - instead of me if I just copy and paste
28:45 - all of these so I think from here on out
28:47 - I'll be just copying and pasting a lot
28:49 - of htmls and I will of course explain
28:52 - them walk you through them but I don't
28:55 - think that I'm gonna be writing that
28:57 - much again because it just takes a lot
28:58 - of time and it is pretty basic thing and
29:02 - I'm sure that most of you guys know this
29:03 - so with that being said now let's just
29:06 - save this one go to our browser Yep this
29:09 - is the okay so this is we see here in
29:12 - here so maybe this one should be text
29:15 - Gray 300.
29:17 - and now yeah almost the same
29:20 - and we can give some uh we can do this
29:24 - by giving some space here
29:27 - and yeah I think this is all for our
29:29 - login page now we're gonna copy all this
29:32 - from this form
29:34 - okay we copy this
29:37 - and then we're gonna go to the sign up
29:39 - and then we are going to again do tfcd
29:42 - and then from here we're gonna paste
29:44 - that thing that we just copied and here
29:47 - let's save this one
29:50 - um
29:50 - so inside our oauth model instead of
29:53 - showing login now we're going to show
29:55 - sign up and we're going to be changing
29:57 - this dynamically and in our users uh
30:00 - input okay but for now we're gonna doing
30:03 - this uh hard-coded so let's go to the
30:07 - create account page where we say
30:09 - register to lead clone we have display
30:11 - name
30:12 - the email password and
30:17 - Let's see we have register button we
30:20 - delete the forgot button so actually
30:22 - let's just go line by line so first we
30:25 - need to change this to register so what
30:28 - what was it register only clone so
30:31 - register to lead clone and then instead
30:35 - of this only this email we're gonna copy
30:38 - this and duplicate it
30:40 - um I that wrong so yeah so that should
30:43 - be copy this and duplicate it where
30:46 - we're gonna say your or maybe only
30:49 - display name
30:51 - and we can do this uh we can change this
30:54 - by liking collecting all of them to
30:56 - display name and for placeholder you can
31:00 - say like Beyond so let's save this one
31:04 - to see how that look yeah it already
31:06 - changed it's display name and instead of
31:09 - like doing your email and your password
31:11 - I just want to change this to only email
31:13 - and only password and then what I would
31:18 - like to do is call this as register and
31:22 - delete this forgot password button
31:24 - so we'll save this one come to here yeah
31:27 - not registered instead of seeing this
31:29 - could say like already have an account
31:33 - with question mark If so in images log
31:37 - in
31:39 - save this one go to the localhost yeah
31:43 - this is really what I want to have
31:45 - almost same maybe with a little bit
31:47 - changes but it's okay for me and now
31:50 - let's create a reset password component
31:52 - which I think I'm gonna be copying and
31:55 - pasting some code which is going to be
31:56 - pretty basic HTML and then I'm gonna
31:58 - explain it to you so I copied that now
32:01 - I'm gonna paste it just like this and
32:04 - I'm Gonna Save this one where we have H3
32:07 - and with paragraph with the same input
32:10 - with label and input so and with a
32:13 - button so let's go to auth model and to
32:15 - show this and as I said this is so far
32:18 - we are showing this
32:19 - um part coded but we're going to be
32:21 - doing this dynamically so we save this
32:24 - one now if we go to the Local Host we're
32:27 - gonna see this component and so really
32:29 - basic HTML so it is this one really
32:33 - basic HTML and CSS with some classes uh
32:36 - so yeah this is I think for the UI and
32:41 - so it's time for us to make the
32:43 - functionalities where we're gonna create
32:46 - the users they can log in they can uh
32:50 - you're gonna send them forgot password
32:51 - reset emails but before doing that let's
32:54 - actually build this functionality where
32:57 - our users can dynamically navigate
32:59 - between these models in sign in register
33:03 - and forgot password model and they'll
33:05 - able to close it and reopen it from this
33:07 - button and for this we're going to be
33:09 - using something called Global State and
33:12 - the reason that we need to use that is
33:14 - like we have in our application we have
33:17 - different parts that are using the same
33:19 - state so we have a nav bar here in
33:22 - authentication page that is different
33:24 - from this nav bar that is in the home
33:26 - page and also it is in the problem page
33:28 - there is another navbar and all of them
33:31 - are using the same state and so when we
33:34 - click the sign in button it also opens
33:36 - this model and is updating our state so
33:40 - for this case this is the best way so
33:43 - the best thing that we can use is
33:45 - Global state
33:47 - and for this one we're going to be using
33:49 - something called recoil so go to Google
33:52 - Play pre-coil JS and you will get to
33:55 - this page where it says Estate
33:57 - Management library for react that is
33:59 - provided by Google so you can get
34:02 - started reading this documentation and
34:04 - installation I will show you how you can
34:06 - use it in our case for this model so in
34:09 - this one and then so if you want to
34:13 - learn more about this you can always
34:14 - check back to this documentation so
34:16 - we're going to copy this command here it
34:18 - says npm install recoil and then we're
34:21 - going to go back to our terminal and to
34:23 - open up a new terminal then we're going
34:25 - to say npm install recoil and it's gonna
34:29 - download that so we in Recoil we have
34:32 - something called atoms and each atom is
34:35 - a different state that we're going to be
34:36 - using in our application so let's create
34:38 - our atoms folder inside the source and
34:41 - our first item is going to be oath model
34:45 - atom.ts so let's actually take this one
34:48 - and then you'll just see what I mean by
34:51 - an atom so we're going to say import
34:52 - Atom from recoil and then we're going to
34:56 - have our type that is going to be both
34:58 - model State just like this and is open
35:02 - and have a field called is open and
35:05 - it'll be Boolean and then it's going to
35:07 - have type as login or register or it's
35:10 - going to be a forgot password and then
35:12 - we're going to create our initial state
35:14 - so initial of model State and then it's
35:17 - going to be type of auth model State and
35:19 - initially it's going to be false and
35:21 - type is going to be login and then we're
35:23 - gonna need to export this so we're going
35:25 - to say export const of so actually just
35:29 - like this old model 8 and then we're
35:32 - gonna call this atom that we imported
35:34 - and then we're going to close our object
35:36 - with parentheses and now we need to give
35:38 - it a key or recoil to differentiate this
35:42 - from this other atoms that we're going
35:44 - to be adding and then our default value
35:46 - is going to be our initial value this is
35:49 - all that we need for this file and let's
35:51 - just save this one and then we need to
35:53 - go to our app.tsx to wrap our components
35:57 - or or our application to be able to use
36:00 - the recoil route okay so we're gonna
36:04 - wrap it just like this and we're going
36:05 - to import recoil root from recoil now it
36:09 - allows us to use all of the components
36:12 - hooks functions that is coming from
36:14 - recoil and then we're going to go to our
36:17 - authentication page where we're going to
36:19 - say only show this Olive model if our
36:22 - oauth model is the state is open so we
36:25 - can say cons of model it'll going to be
36:28 - equal to use recoil value so we are only
36:33 - taking this
36:35 - um so to say the value from our state
36:38 - from our atom that we just initialized
36:40 - we're going to import that and then we
36:42 - need to import
36:44 - as well use recoil value and then now
36:47 - this oauth model has this is open and
36:50 - type Fields so we're going to say oauth
36:52 - model that if it is open only then show
36:56 - this old model component otherwise you
36:59 - shouldn't show it and then we're going
37:00 - to save this one also we need to save
37:02 - our application uh or like underscore
37:06 - app.sx you can close this and now so in
37:09 - our office model we're we're gonna see
37:12 - let's see we have our reset password so
37:15 - for now
37:16 - let's go with the authentication page
37:20 - go like from here we don't see our reset
37:22 - password even though we are populating
37:24 - it right because inside our auth page is
37:27 - open is false so let's go to our nav bar
37:31 - where when we click this button we're
37:33 - gonna do some operations so we're going
37:36 - to say on click on click to this sign in
37:39 - button we're gonna have handle click
37:41 - function and let's initialize that on
37:44 - Scandal click it's going to be an arrow
37:48 - function that is doing nothing for now
37:49 - and then we need to import another Hook
37:52 - from recoil so it's going to be use set
37:56 - recoil
37:57 - State yeah it doesn't Auto Import that
38:01 - for some reason so let me just come to
38:03 - here and say import use set recall State
38:07 - and then we're gonna pass our always
38:08 - model State and it's going to be equal
38:10 - to our variable we called const set of
38:15 - model State and in our handle click
38:19 - we're gonna mutate this state so we're
38:22 - going to take the previous values and
38:24 - only we're updating this is Open Fields
38:27 - so we're going to save this one and now
38:29 - when we click this this button we're
38:31 - gonna get see this oauth model component
38:35 - because when we click that it's open
38:37 - becoming to true and then it shows this
38:40 - oauth model and inside of model we are
38:43 - gonna do some another checks so we are
38:46 - going to be we're gonna say like first
38:48 - let's import our hooks so it's going to
38:51 - be used recoil value and we're gonna
38:54 - paste uh so we're gonna pass our auth
38:57 - model state and then we're gonna import
39:00 - um user recoil value and then we're
39:02 - gonna assign it to a variable called
39:04 - both model
39:06 - and
39:08 - now here down below we're gonna say
39:11 - fill oauth model
39:13 - um components depending on the user what
39:16 - you choose okay we're going to say oauth
39:18 - model uh DOT type if it is equal to
39:22 - login then we're gonna show the login
39:25 - component that we import already okay
39:28 - we're gonna show that else if oauth
39:31 - model is equal to sign up we're going to
39:34 - show so it wasn't sign up actually it
39:36 - should be register and if it is
39:38 - registered show sign up in the else case
39:40 - it is going to be forgot password then
39:42 - so please show this one so when we give
39:45 - this one and come to here so our initial
39:47 - state was log in that's why it shows us
39:50 - this login if we refresh this now our
39:53 - initial state is our oauth model is
39:55 - closed and type is login so when we
39:58 - click this now it shows us login because
40:00 - it's open now is true
40:03 - now let's change the type when we click
40:05 - this buttons so we're going to come to
40:07 - our vs code it should be in forgot
40:09 - password which is inside this login
40:12 - so here in our form where we have forgot
40:16 - password so in this button we're gonna
40:18 - also have on click that is to handle
40:21 - click and then we're going to initialize
40:23 - our function up here on this handle
40:25 - click that should be like this for now
40:28 - and then we're gonna import this cons of
40:31 - model or maybe that should be let's see
40:34 - it should be actually set off model
40:37 - um set of
40:39 - model State we're going to import these
40:43 - um it still doesn't suggest anything for
40:46 - us that should be import I use
40:51 - recall State and then inside the handle
40:54 - click we're gonna put this and make type
40:57 - to register so when we actually it
41:00 - should be
41:02 - um let's see it should be a free and
41:03 - forgot password that should be so maybe
41:06 - we should
41:07 - and pass some type into that so we're
41:10 - gonna say handle Click by sending a type
41:13 - that is going to be forgot password
41:16 - because we're going to be doing the same
41:18 - thing in this other uh button click here
41:22 - if you need to create an account you're
41:24 - gonna say on click
41:28 - we are going to send this by saying
41:31 - um so that should be take us to our
41:34 - register page so in here we need to take
41:37 - a type that is going to be string and
41:41 - then we're going to take this type and
41:42 - edit just like this
41:45 - so what what it says
41:49 - um so maybe we should just copy this and
41:52 - instead of string we should say it
41:54 - should be something like this and now
41:56 - it's going to be okay with us and then
41:59 - now if we save this one it will come to
42:01 - here and we click this create account
42:03 - it'll show us this register and inside
42:06 - the register which is going to be in the
42:08 - sign up model we're going to also do the
42:10 - same thing so we just copy this and
42:13 - inside the here once they click this
42:16 - we're going to say on click we're gonna
42:19 - send our handle click function
42:22 - which is we need to add into here it is
42:26 - gonna we're gonna import these
42:29 - and import
42:31 - use of use uh set or equal State and now
42:36 - it should be good to go but actually we
42:38 - can make this one something like this
42:41 - because we're not going to be using
42:42 - different parameters so we're going to
42:44 - say that should be login
42:46 - and now if you save this one and come to
42:48 - browser now we click the login we see
42:50 - the sign in or the login model and in
42:54 - the forgot password we get this one now
42:56 - we need to be able to close this by
42:58 - clicking this button so this is where we
43:00 - want to go to our alt model and here we
43:03 - have this close button and here we're
43:05 - going to say on click and we're gonna
43:08 - maybe again we should say handle click
43:12 - but now instead of doing this I want to
43:14 - create a custom hook for this because in
43:18 - all of our models we want to uh by
43:22 - clicking this we want to close it and by
43:24 - pressing escape keyword we also want to
43:26 - close this model so for this we're going
43:29 - to use something called use um custom
43:31 - hooks where we're going to initialize it
43:33 - down below here and then we're gonna
43:36 - call it uh from this line it'll make it
43:39 - some it'll create some abstractions it
43:42 - is going to be fully perfect okay so
43:45 - let's go to down below and write our
43:47 - custom hook so it's going to be a
43:49 - function that is we call use maybe on
43:54 - use close model that could be and inside
43:58 - that we are going to have again using
44:00 - this recoil State okay we're going to
44:03 - say set const set of model use recoil
44:10 - not value but that should be used
44:14 - um set recoil value
44:17 - I'm sorry that should be State and then
44:20 - we're going to pass this import this one
44:22 - I don't know it why it doesn't give us
44:24 - any suggestions but that should be used
44:28 - that recoil state
44:31 - and then we are gonna do radar function
44:34 - variable const uh close model and it's
44:38 - going to be an arrow function that we're
44:40 - going to call in our use effect we will
44:42 - say set of model is going to be to uh is
44:45 - open gonna be false and maybe we should
44:47 - make the type to log in as the default
44:50 - and then we're going to have our use
44:52 - effect where it's going to be
44:54 - initialized on on Mount so it's not
44:57 - going to have any dependencies
44:59 - so we're gonna say window dot add event
45:02 - listener on key down and for this we can
45:05 - actually only call our close model
45:09 - or we're going to create another
45:11 - function called handle Escape
45:14 - so just like this and then we're gonna
45:16 - say the cleanup function we're going to
45:18 - have and it is going to be removing our
45:21 - event listener that is going to be
45:24 - reassigned to this handle Escape
45:26 - function and this key down event and
45:29 - then we're gonna have our function that
45:30 - is handle Escape
45:32 - is gonna be uh if either key is escape
45:35 - we're calling our closed model function
45:39 - and at the end we are going to return
45:41 - this closed model variable that we have
45:44 - so up here when we do
45:47 - um const close model that we are calling
45:51 - from this hook that we created now we
45:54 - have this function
45:56 - so now if we just make it like this
45:58 - close model and also on our overlay we
46:02 - also want to close our model so on click
46:04 - that should call our close model
46:08 - now save this one and I will be through
46:10 - it again so when we open our model when
46:13 - we click here it is holding this close
46:16 - model function that we are taking from
46:18 - this custom book that is in the at the
46:21 - very bottom in our file so what it does
46:25 - when you click that it'll gonna call
46:28 - this close model function where it says
46:30 - is open equal to false and type now is
46:33 - equal to login and we're making the type
46:35 - to login because let's say we go to
46:36 - forgot password and now if we close this
46:39 - and we open this it doesn't stay in
46:42 - forgot password where it goes to login
46:44 - so let's just delete this line to show
46:46 - you what I mean
46:48 - and save this if we come here and let's
46:51 - open it we go to forgot password we
46:53 - close it now if we open this that should
46:55 - be in the forgot password because we
46:57 - didn't we didn't uh make the type to
47:00 - initial value okay so that's why we are
47:02 - adding this and when user click the
47:05 - Escape keywords so now I'm gonna click
47:08 - set now I press Escape it closed you
47:11 - know so this is why we're adding this
47:14 - and on cleanup when this component we
47:17 - remove that from screen it'll be
47:19 - removing this email to the center so
47:21 - this is the function that we need I
47:23 - think this is
47:25 - we had we have added all of the
47:26 - functionalities for this you can close
47:28 - it by this clicking the overlay yeah
47:31 - that should be good to go okay now it's
47:34 - time for us to create our Firebase app
47:36 - and initialize our project and then
47:39 - we're gonna add this um register and
47:41 - login and forgot password
47:42 - functionalities
47:44 - so head over to thefirebase.google.com
47:47 - and if you don't have an account create
47:49 - one for free and then click this go to
47:52 - console button it'll take us to our
47:54 - console where we need to create a
47:56 - project so I will call mine as Lee clone
48:00 - or maybe Lee code uh YouTube and then
48:03 - I'll continue I will disable Google
48:06 - analytics and I'll create the project so
48:08 - if you don't know what Firebase is it is
48:10 - a backend it's a service that allows us
48:13 - to build full stack applications easily
48:15 - and quickly without us needing to create
48:18 - our own server and maintain maintaining
48:22 - this um security rules etc etc it just
48:26 - makes it fully secure and easy for us to
48:29 - build and create our projects so we're
48:32 - going to say continue and
48:35 - okay so we are in our console where we
48:38 - need to initialize a web application
48:40 - because we have a web application so
48:43 - we're gonna say again maybe League clone
48:45 - liquid YouTube and register our app
48:48 - so it tells us to install Firebase so it
48:51 - will come to vs code and you'll say npm
48:54 - install Firebase it's gonna install that
48:56 - for us and then we need to take this um
49:00 - so it's a configuration file where we're
49:03 - going to copy this and then we will come
49:05 - to here and we're going to collapse
49:06 - everything in the source folder we're
49:08 - going to create a folder called Firebase
49:11 - and then here we can create a file
49:14 - called Firebase dot yes
49:16 - and then we can paste our configuration
49:20 - that we just copied so we can delete
49:22 - this uh command line
49:25 - uh what it really happening is it
49:28 - initialize an application for us and
49:30 - then we're gonna use some services that
49:33 - is going to be authentication Service so
49:35 - we can call it as almost oauth it's
49:37 - gonna get our oath with our application
49:40 - so that should be get out
49:43 - so we're going to import that
49:46 - so that should be import
49:50 - but why doesn't give me suggestions I
49:52 - don't see that who's gonna get those and
49:54 - then we are also gonna get our Firebase
49:57 - which we are going to be using for our
49:58 - database to store
50:00 - um problem data so we're going to say
50:03 - get firestore and it still doesn't
50:06 - suggest me so that should be import
50:09 - um get firestore from Firebase firestore
50:11 - and then for our server side rendering
50:14 - since we are using xjs we can do some
50:16 - optimizations so we can say get app and
50:19 - then we're gonna say get apps so here
50:22 - what we're gonna be doing is instead of
50:25 - initializing our app immediately we're
50:27 - gonna say if there isn't any app so
50:30 - we're going to say get apps dot length
50:33 - if there isn't any then please just
50:36 - initialize an application for us but if
50:39 - you already have an app then just get
50:41 - that app for us
50:42 - so after release we're gonna export an
50:45 - object with our authentication firestore
50:48 - and with our application so this is all
50:51 - we need for this uh file and then maybe
50:54 - we should also create our file called
50:56 - that EMV dot local where we're going to
50:58 - put our variables into this so I can
51:01 - split my page like this and then I will
51:03 - say next public with this uh Firebase
51:08 - Firebase API key and I'll take them
51:12 - these strings and I will just paste it
51:15 - just like this and I'll be doing this
51:17 - for all of these and once I do this I'll
51:19 - be right back
51:26 - okay so I copy and paste all of them now
51:28 - we're gonna also do for each of them
51:30 - like process
51:32 - um dot EMV that it should be next public
51:36 - Firebase API key and I will again do
51:39 - this for all of them and I'll be right
51:41 - back
51:46 - so I have completed that and now please
51:48 - use your own variables with this case so
51:51 - you need to use your own configuration
51:54 - file because while you watch this
51:55 - tutorial I would be already deleting
51:57 - this project so it is not going to work
51:59 - if you copy and paste my variables so
52:03 - with all that being said now I think we
52:05 - can go to our sign up component and we
52:08 - can build the registration phase
52:11 - so now let's close everything that is
52:13 - open and let's collapse everything we go
52:16 - to our project continue to console and
52:19 - now we're gonna initialize or install a
52:22 - package that is react Firebase hooks
52:24 - that is a great npm package that we're
52:27 - going to be using for our authentication
52:29 - with Firebase and and later we're going
52:32 - to be using this maybe for our database
52:34 - so we're gonna come here and paste it
52:37 - while it downloads we're gonna go to our
52:40 - sign up component
52:42 - where it is inside these models so we're
52:46 - going to open that and we need some
52:48 - states
52:49 - so for that we're going to initialize
52:51 - something like const inputs it should be
52:55 - inside an array and set inputs
52:58 - um input yes it is going to be a use
53:01 - date where we have email display name
53:04 - and password
53:05 - so we are going to be changing them
53:08 - depending on what user typed in in each
53:11 - field so for each of these inputs we can
53:15 - select them by Ctrl D and then we're
53:18 - gonna add an unclick function or on
53:21 - change actually on change we're going to
53:24 - call handle change and we're gonna pass
53:26 - in the name of them maybe we'll just say
53:29 - handle change input
53:33 - and we're gonna create our function that
53:36 - is going to be const handle change input
53:38 - and then
53:40 - and then inside here we're gonna set our
53:43 - input so it'll be taking the previous
53:46 - values and it'll only be changing them
53:49 - depending on on their name so let's say
53:51 - our users are typing only inside this
53:54 - email input it will call this function
53:57 - it'll take a look at its name which is
53:59 - email then it'll only be updating this
54:01 - state it'll not gonna mutate this
54:04 - display name or password because we are
54:07 - destructuring them and only changing the
54:09 - one that we are changing so on this form
54:13 - we can call an on submit Handler that is
54:15 - going to say handle register
54:19 - and here let's say const handle register
54:22 - that is going to be taking an event
54:24 - which is react form event and we're
54:26 - going to say Event Event default for
54:28 - preventing clear refresh the page and
54:30 - then we can console.log or inputs
54:34 - so let's save this one and go to the
54:36 - browser if we open our console and maybe
54:39 - we should also
54:41 - console.log our inputs right here and
54:44 - whenever we change some field so as we
54:47 - can see in and when we initialize them
54:49 - it is empty strings for all of them and
54:51 - maybe say like hey at gmail.com you can
54:55 - see we are only updating our email we
54:57 - are not changing display name or
54:58 - password because in our code we are
55:00 - taking the name of this input which is
55:02 - email and for this one we can put my
55:05 - name and then it'll only be updated in
55:07 - my name it is not updating password and
55:10 - it is it applies for this one as well so
55:12 - you could make it test one two this is
55:14 - what we got now we're going to be using
55:16 - this react Firebase hooks for our
55:18 - authentication we're gonna click this
55:20 - repository where it takes us to GitHub
55:22 - account and then we will come back to
55:25 - this authentication hooks we'll click
55:27 - this where we have all of these methods
55:30 - and it is pretty self-explanatory like
55:33 - you sign in with GitHub with Google
55:35 - Microsoft and use update profile update
55:38 - password email send email verification
55:41 - and a lot of stuff so first we are going
55:45 - to be using this create user with email
55:47 - and password so click that you'll get to
55:49 - this page or to this component you're
55:52 - gonna copy this come back to vs code and
55:55 - delete this lines
55:58 - and then we're gonna paste it just like
56:00 - this and then we need to import this
56:02 - which auth is coming from Firebase and
56:05 - this one is coming from react Firebase
56:08 - hooks which we need to take it from here
56:10 - and then paste it just like this
56:13 - and then we're gonna save it we'll go to
56:16 - our Firebase console to initialize and
56:20 - um sorry to say authentication so you'll
56:23 - come to this authentication Service we
56:24 - need to get started with this
56:27 - and we're going to be using native
56:30 - providers which is email and password
56:31 - we're going to enable this to save this
56:34 - one it'll initialize this um so sign in
56:38 - method and then so far we have not in
56:40 - users so let's come to our application
56:43 - and let's close all these
56:47 - so now we are gonna try to add this
56:49 - registration functionality when we click
56:51 - this register button so we will come to
56:54 - this handle register function and I made
56:56 - this function async because we're going
56:58 - to be doing some operations that is that
57:01 - is going to take time so inside here
57:03 - we're going to take take a look at the
57:05 - documentation of to see how did they use
57:08 - it so they call this line with getting
57:10 - some states we already did that and now
57:13 - on click they call this function with
57:16 - email and password so let's just do the
57:18 - same thing and copy this line and then
57:21 - we're going to come to here and we will
57:23 - create our try catch block the catch if
57:26 - there is any errors so we're going to
57:28 - say alert error.message and the type of
57:31 - error could be any
57:32 - so here we're going to say await that
57:35 - function with our inputs.email and
57:38 - password so this will gonna return us
57:40 - our new user okay if it creates it it's
57:43 - gonna be our user if not it'll be empty
57:46 - so if there is not new user we're gonna
57:49 - return from this function and we're not
57:51 - gonna do the rest of this uh so we're
57:54 - not going to call the rest of this
57:55 - function okay but if we have a user then
57:59 - what we're going to be doing is that
58:00 - we're going to call this router.push and
58:03 - we're gonna take our users to our home
58:05 - page and for that we need to import this
58:09 - router from uh next next router so we're
58:13 - going to see const Rudder that is coming
58:15 - from use router which is coming from
58:17 - next router that we can see here and I
58:20 - think this is all for this function and
58:22 - now save this one come to here and try
58:25 - to do this so we have email of
58:27 - john.gmail.com and display name is gonna
58:29 - be John Doe and password could be
58:32 - um maybe John Doe and then we're going
58:35 - to register
58:36 - and okay so it take a bit time maybe one
58:39 - second and then it navigates us the home
58:41 - page so I now refresh this to see if we
58:44 - got our user and great so we got our
58:47 - johndo gmail.com it's our first user so
58:50 - this is how easy it is to add
58:52 - authentication to your application with
58:55 - uh like using Firebase
58:58 - okay now we need to handle some errors
59:01 - so let's say now we come to here and we
59:04 - try to again sign up with same account
59:08 - the johndo gmail.com so let's say name
59:11 - is same and we have some password now as
59:15 - we can see it didn't create it and it
59:18 - gave us some error if we click this
59:21 - oops this is not what we want so let's
59:24 - try to do this again so we got some 400
59:26 - errors and when we click this we're
59:28 - gonna see that we got some email exist
59:31 - uh error so this email is already exist
59:33 - so for this that's why we got
59:36 - um this error State okay so we can use
59:39 - inside the use effect where
59:42 - so we're going to initialize it like
59:44 - this by passing our error so whenever
59:47 - error changes this use effect will run
59:49 - so we're gonna say if there is any error
59:51 - then can you just please alert this
59:53 - error with its message so save this one
59:56 - I'll come to here if you try to register
59:59 - with the same email and password or with
60:02 - the same email that just should be
60:04 - enough when we try to register it'll
60:06 - give us this email already in use and we
60:09 - can click click OK and so we also should
60:13 - check if all of these fields are full so
60:15 - you can come to here and we're gonna say
60:18 - if now if there isn't inputs or inputs
60:21 - email is empty or password is empty or
60:24 - display name is empty we're gonna return
60:25 - this alert from this function and we're
60:29 - gonna say please fill all the fields and
60:31 - we're not gonna run this rest of it okay
60:33 - so you can save this one and now let's
60:35 - try to
60:36 - complete our display name try to
60:38 - register it'll say please fill all the
60:40 - fields and now let's just use this
60:43 - lighting State also where we got here so
60:46 - when we try to when it creates our user
60:48 - this loading will be true and while it's
60:51 - true let's instead of showing this
60:52 - register we're gonna say if it is
60:54 - loading let me just show registering
60:57 - okay
60:58 - okay and otherwise it will show register
60:59 - so now watch Me While I click this so
61:03 - let's take this and now I click this
61:06 - it'll be loading for a second and and
61:09 - then it will give us an error if you
61:11 - click this now it should be in the
61:13 - normal State because now loading is
61:14 - false
61:15 - and with this I think we are good with
61:19 - we are done with our registering phase
61:21 - now we can go to sign in
61:24 - and for this we're going to come back to
61:25 - again this documentation scroll to top
61:28 - and let's see if we have any methods for
61:31 - that now it says sign in with email and
61:34 - password we're gonna click this and
61:37 - again we will take this line copy this
61:40 - go to our vs code that should be inside
61:42 - the login we're gonna paste it just like
61:45 - this
61:46 - and import all of these dependencies so
61:49 - to say and then
61:52 - you need to
61:53 - this so let's see how to use it so again
61:56 - they pass your email and password so for
62:00 - this we again need some states that is
62:02 - going to be constant inputs where it
62:05 - should be
62:06 - an array we're gonna decide to structure
62:09 - that and inside view State we're going
62:11 - to have email and password and then we
62:14 - already have our uh names inside our
62:17 - inputs so we're going to select all of
62:19 - our inputs which is two and then on
62:21 - change we are going to call handle input
62:24 - change
62:28 - so we're going to initialize our
62:29 - function that's going to be const and
62:31 - the input change and then here we're
62:33 - going to say set inputs and only change
62:36 - the one that we we are typing in
62:39 - and then inside this form we're going to
62:41 - say on submit and it should be a handle
62:44 - login maybe
62:45 - and then we're gonna again create that
62:47 - function that should be const and the
62:49 - login that will be async and then we're
62:52 - gonna say uh prevent default and if some
62:55 - of our inputs is empty we're going to
62:57 - return from this function by providing
63:00 - an alert and otherwise we're going to
63:02 - use try catch if there is any error the
63:05 - type of this also going to be any if
63:07 - there is any error we're going to alert
63:09 - that by error that message but otherwise
63:11 - if we don't have any problem so we're
63:13 - gonna call this signing with email and
63:15 - password
63:16 - so and it'll give us a user if there
63:19 - isn't any user we're going to return
63:21 - from this and otherwise we are gonna so
63:24 - maybe we could do this to like new user
63:27 - new user
63:29 - if we have our user then we're going to
63:31 - say router.push that should be a
63:33 - lowercase that push the home page and
63:35 - then we're gonna import our router from
63:38 - use router
63:42 - okay with that now we need to save this
63:44 - one
63:45 - and after this we're gonna say
63:48 - console.log user if you already have
63:51 - okay or you're gonna show us if you have
63:53 - user or not
63:55 - so let's go to our application and now
63:58 - let's try to cons log in with this John
64:01 - Doe and password should be John Doe and
64:05 - now I'm going to try to log in
64:07 - and yeah it takes us to home page and
64:09 - now we have our user that we can see
64:11 - from our console where you have this
64:13 - user credential inside this VCR email
64:17 - and when do we create this one Etc like
64:20 - we have a lot of metadata
64:23 - and also we could use this loading state
64:26 - where we're gonna show it uh
64:29 - or instead of login we're gonna say if
64:32 - it is loading say login
64:34 - if it is lighting we're going to say
64:36 - lighting otherwise you're going to say
64:37 - log in
64:40 - and I think with that we're gonna be
64:42 - good to go and maybe to use the error
64:45 - handling you're gonna do inside the user
64:47 - effect we're gonna have our function and
64:51 - if you have any error we're gonna say
64:54 - um alert the error we're gonna save this
64:57 - one now let's try to create some errors
64:59 - both off page
65:01 - and try to log in with maybe a wrong
65:04 - password or one two three now it'll
65:06 - gonna tell us like uh the wrong password
65:09 - okay
65:10 - so this is how we handle our errors for
65:13 - now
65:14 - and now we have another problem which is
65:16 - that we are already signed in but we can
65:19 - still visit this authentication page and
65:21 - now we can sign in again and again which
65:23 - is not optimal and to fix that we're
65:25 - going to go to our authentication page
65:27 - and we're going to extract our user
65:30 - plotting and error state from use of
65:33 - state that is coming from our Firebase
65:37 - hooks then we're gonna put our oauth
65:40 - object into that which is coming from
65:42 - Firebase folder and inside the Firebase
65:45 - file so here we're going to check inside
65:48 - the user effect that we're gonna say if
65:51 - we have a user that navigates us to the
65:54 - home page so we're going to say if user
65:57 - rather dot push
66:00 - the home page and now we're gonna before
66:03 - we save this we're gonna say on Strutter
66:06 - that is coming from next.js and now I
66:09 - think we can save this and before that
66:11 - let's add this rather into this
66:12 - dependency array and save this one go to
66:15 - our browser now let's go to
66:17 - authentication page
66:19 - now it navigates us to home page and
66:21 - there is that one second fully current
66:23 - effect that it shows us this
66:24 - authentication page and the reason is
66:27 - that first our user
66:30 - um so this Hook is going to check if
66:32 - you're logged in or not but it'll take
66:34 - some time which is maybe one second or
66:36 - maybe less than one second and since
66:40 - this user is not it'll render this
66:43 - portion
66:44 - and we can prevent that by adding
66:46 - another state so we're going to say
66:48 - const page uh maybe page loading and
66:54 - then set page
66:56 - set page loading that is going to be a
66:58 - use State and initially it's going to be
67:00 - true the first our page is loading and
67:03 - if page is loading so page is loading
67:06 - then return nothing so it doesn't render
67:09 - this portion
67:11 - and now let's save this
67:14 - and now come to browser again go to
67:16 - authentication page but for a second we
67:19 - see that an empty page and then it will
67:21 - show us this home page but what is going
67:23 - to happen if we don't have so if you
67:25 - didn't log in so it'll stay in this uh
67:28 - null state right it'll not navigate us
67:31 - the home page so we're gonna be seeing
67:32 - nothing so to fix this we're gonna say
67:35 - if it is not loading anymore and if you
67:39 - don't have a user then this set page
67:42 - loading should be false which is optimal
67:45 - one and we're going to add this loading
67:47 - into the user effect dependency array
67:49 - so now if you are not logged in it'll
67:51 - make this set pay set it's going to set
67:54 - this page loading to false which it
67:56 - allows our application to render this
67:58 - portion so with that I think now we are
68:01 - ready to build our home page
68:04 - let's take a look at our demo that we
68:06 - have here so in the top bar we have two
68:08 - buttons with a logo and then we have a
68:11 - title and our problem table which has
68:14 - this title difficulty category the
68:16 - solution as well as the status field so
68:18 - first we're gonna build this and we're
68:20 - going to add this data as hard-coded
68:22 - data and then we're gonna push it into
68:25 - our DB and then we're gonna fetch it
68:27 - from there and in this case rdb is going
68:30 - to be firestore which is a service that
68:32 - Firebase provides so
68:35 - first let's create this top bar which
68:38 - I'm going to be copying and pasting some
68:40 - code and for that don't get mad at me
68:42 - just grab them in our GitHub GIS that I
68:45 - will provide you in the uh in the
68:47 - description below
68:49 - so we will come to vs code you are going
68:51 - to create a component called top bar and
68:54 - inside you're going to say top bar.dsx
68:57 - we're gonna say etfcd and then here
69:00 - we're gonna paste it just like this
69:01 - we're gonna import this link component
69:04 - from next and then inside home page
69:08 - we're gonna call our top bar
69:11 - import it like this and we're gonna save
69:14 - we're gonna give a class name that is
69:16 - going to be BG dark layer 2 maybe and
69:20 - then it'll be minimum height to print
69:22 - it'll make this main full screen with
69:25 - this ad for background we're gonna see
69:28 - this come to our browser yes it is
69:31 - almost the same or maybe identical
69:34 - so here uh what we are doing is that we
69:37 - are making this uh body so full height
69:41 - and then we're giving this dark PG that
69:43 - is coming from Tailwind config file that
69:47 - is this color
69:48 - and in our top bar we are giving some we
69:52 - are giving some our buttons and we are
69:54 - making it uh our top bar 50 pixels and
69:58 - basically like super basic HTML and CSS
70:01 - that you can
70:02 - um take a look at for a second
70:04 - and now let's build this
70:07 - uh so it is title so this title and with
70:10 - our table
70:12 - and before doing that let's actually put
70:15 - our mock data which I will again provide
70:17 - you in the GitHub gist that you can copy
70:19 - paste into vs code
70:22 - now let's go to our vs code and we're
70:25 - going to create a mock data folder so I
70:29 - will say Mark problems
70:31 - and I will maybe you can find it from
70:33 - the GitHub repo that I wouldn't delete
70:35 - this I will add the problems but yes I'm
70:39 - gonna paste that which you can find it
70:41 - uh in the description below so we have a
70:44 - problem type which is going to be every
70:47 - problem is going to have an ID title
70:49 - difficulty category which all are going
70:52 - to be string and then order is going to
70:54 - be number which is going to be this
70:56 - field that you can see that is prefixing
70:59 - prefixing our problems and then we also
71:02 - have an optional field which is going to
71:04 - be a video ID and this video ID is going
71:07 - to be the YouTube video solution that
71:08 - we're gonna have so some of our problems
71:10 - that we can see has video Solutions and
71:13 - some of them is coming soon so we're
71:16 - going to be checking this conditionally
71:17 - and we're gonna render render it uh
71:20 - depending on this so with that we have
71:23 - 10 problems we can save this one and
71:26 - then we're gonna go to our home page
71:27 - where we're gonna put our title and then
71:29 - we're gonna put our table so we're gonna
71:32 - go back to vs code we're gonna paste it
71:34 - into here and we'll save this take a
71:37 - look at it so we have our title as well
71:41 - as the title of our table which is
71:44 - coming from with this heading one that
71:46 - we have this um so to say HTML entities
71:50 - that is so some kind of best practice to
71:53 - use or like es link tell us to use it
71:56 - actually if you try to do this it'll say
71:58 - can you please replace them with uh one
72:01 - of these so that's why I did this and
72:04 - we're gonna add our emoji and then we
72:07 - have this table which will so far we are
72:10 - adding the head of this table we're
72:12 - giving it one table row with table
72:15 - headings so each of them is inside one
72:18 - table head
72:20 - or table heading and then we have some
72:23 - basic CSS stuff again like font medium
72:25 - padding X1 heading Y3 uh so yeah I think
72:31 - this is it's gonna be for our table and
72:34 - now let's try to populate this mock data
72:37 - with uh with each of these rows
72:41 - so back to the vs code we're going to
72:43 - create another component called problems
72:46 - table and we're going to create our
72:49 - folder or file problems
72:52 - um table that should be lowercase table
72:55 - dot TSX and then we're gonna type tfcd
72:58 - and inside this is and inside it is time
73:02 - for me to write some HTML and CSS with
73:04 - you guys because I don't want you to
73:06 - tell bad words about me we're gonna say
73:09 - table body and inside we're gonna give
73:12 - it a class name that'll be
73:15 - um class name should be text white for
73:18 - this should be enough and then we're
73:20 - gonna import our problems that is coming
73:23 - from that mock data that we can see here
73:26 - and then we're gonna map through that
73:28 - array so we're going to say problems.nap
73:31 - and it is autopilot the GitHub copilot
73:35 - can be sometimes annoying that's why I'm
73:37 - gonna do it just like this so for each
73:40 - problem or we can call it document and
73:42 - it's going to have some index and then
73:45 - over here we're gonna create this
73:47 - function and we're gonna return
73:49 - something here and the reason is I'm
73:52 - gonna add some JavaScript code here
73:54 - that's why I'm not immediately returning
73:56 - jsx so here we're gonna have our table
73:59 - Row for each of our problem and then
74:02 - we're gonna give it some class names so
74:05 - we're going to say class name and open
74:07 - this curly braces as well as backticks
74:10 - we are going to say if the index of it
74:13 - is the even or the index of it is odd so
74:17 - which you can check it just like this if
74:20 - so we are gonna say give it to BG dark
74:24 - layer one
74:26 - or it should be like this and otherwise
74:29 - it'll gonna be
74:31 - it will gonna be nothing so it's going
74:33 - to be transparent so we can make it just
74:35 - like this and we're gonna give it a to
74:38 - make
74:38 - um subscript or yes lint happy you're
74:42 - gonna say he should be the
74:45 - document.id and then inside here we're
74:48 - gonna give it table hat so we're gonna
74:50 - say table head we're gonna give it some
74:52 - class names which should be
74:56 - padding X to padding y four one to
75:00 - medium so we're gonna say font medium
75:03 - and then white space no wrap and then
75:07 - text dark green as that we have
75:10 - initialized inside a Tailwind config so
75:14 - and then we can put this solved Mark
75:18 - which is going to be BS check Circle
75:22 - um
75:23 - yeah that should be like this now let's
75:24 - try to import this
75:26 - from react icons and we can give it font
75:29 - size that is gonna be 18 pixels and
75:33 - width of 18 as well
75:36 - so just like this then
75:39 - um what we can do so we're gonna add all
75:41 - of our Fields now let's just try to save
75:43 - this one and why it gives us error
75:46 - so maybe we did something wrong
75:50 - um
75:51 - what it says actually
75:53 - okay maybe we should close this okay and
75:56 - then let's save this one go to our
75:58 - browser we can see we cannot see
76:00 - anything because we are not showing them
76:02 - into here so after the table had we're
76:04 - gonna say problem stable that is coming
76:06 - from our components save this one come
76:09 - to here yeah okay it's not completed the
76:12 - row is not completed that's why you
76:13 - chose it like this so let's continue so
76:17 - after this table heading we're gonna
76:18 - have cable data which is gonna have
76:22 - some classes of padding x 6 and heading
76:26 - y as four and then we're gonna put our
76:30 - link that is coming from xjs so inside
76:33 - what we're gonna say document dot title
76:37 - and then what we should do give it some
76:40 - class names that'll be so class name on
76:43 - Hover it'll be text blue
76:46 - 500 or maybe 600 and then cursor is
76:50 - going to be pointer and then obviously
76:52 - it's gonna have some href which will
76:55 - take us to problems page
76:59 - Flash the problem ID which is going to
77:02 - be twosome or the document ready this is
77:05 - going to be there to some like reversing
77:07 - Glitz linked lists etc etc if I can
77:10 - speak so that should be document.title
77:13 - and after that we're going to have
77:14 - another table data so table data
77:18 - so all of them is kind of going to have
77:19 - the same class names so for this let's
77:22 - put a document that difficulty
77:26 - and the class name of it gonna be
77:28 - heading X actually we can make it with
77:32 - backticks so it's going to be padding X
77:34 - fix padding y4 and depending on its
77:37 - difficulty we're gonna give it some
77:39 - different color that's why I made this
77:40 - function so we're going to say cons
77:44 - um difficulty color
77:48 - and then we're gonna make it like it's a
77:51 - difficulty if it's easy then we're gonna
77:54 - give it
77:55 - um text so let's just take this and
77:57 - we're going to mutate this so text dark
78:00 - green
78:01 - s so that should be text dark green as
78:03 - if it is easy then we're gonna show it
78:06 - I'm we're gonna give it green uh color
78:09 - I'm sorry I made it so long so if it is
78:11 - not easy then it could either be medium
78:14 - or it could be
78:15 - um so it could be hard so in the medium
78:18 - case we're gonna give it text dark and
78:21 - then it's gonna be yellow and otherwise
78:23 - it's gonna be red which which is going
78:25 - to be dark
78:26 - um I guess and then depending on this
78:29 - we're gonna give it this difficulty
78:31 - color inside so we can basically say
78:34 - difficulty color because we are already
78:36 - checking uh the condition and after the
78:39 - difficulty we're gonna give its category
78:40 - which so far I can copy this paste it
78:44 - like this and delete this backtick
78:47 - delete this
78:48 - um I'm gonna make it uh angle code and
78:52 - inside we're gonna have category and
78:55 - after that let me see what we have so
78:58 - we're gonna have depending on video ID
79:00 - so let's just save this one take a look
79:01 - at it so this is what we got almost the
79:04 - same as with this one so maybe with some
79:07 - changes but
79:08 - I think that looks great so we're gonna
79:11 - add the solution tab and it's gonna be
79:13 - it for this page I guess so we're gonna
79:15 - add another table data or maybe we can
79:19 - copy this one paste it and change the
79:22 - content we're going to say if document
79:25 - has a video solution or the video ID we
79:29 - are going to return something else and
79:31 - if it doesn't have anything any video
79:33 - Solutions you're gonna say we have a
79:36 - paragraph that is
79:38 - why it gives me error because I didn't
79:41 - complete this part so let's say this
79:44 - um we're gonna have a i YouTube fill
79:47 - YouTube that is coming from react icons
79:51 - so otherwise we're gonna say a paragraph
79:53 - that is saying coming soon and for the
79:57 - class names gonna have
80:00 - um text Gray 400 and we can save this
80:04 - and import this one
80:06 - so we're going to importing that from
80:08 - react icons AI and let me see if it has
80:11 - any class names yes it has so the font
80:15 - size is going to be 18 and class name
80:18 - it's gonna have cursor
80:21 - so here's their pointer and on Hover it
80:24 - is going to have text thread 600 so save
80:27 - this one finally come back to here that
80:30 - we can see now if we click any of them
80:32 - it doesn't show us the solution but
80:35 - we're going to implementing that soon
80:37 - and if we click any of this that has ID
80:40 - that will take us to the problem page
80:43 - but since we don't have the problem page
80:45 - it'll give us 404 which we're gonna
80:47 - handle later
80:49 - so I think that looks great but we can
80:51 - make this one a bit bigger which we can
80:53 - say font size should be 20
80:56 - um 28. and now it looks better so this
81:00 - is all that we need for this page and
81:03 - actually let's build a solution tab when
81:05 - we click this YouTube video icons you
81:07 - will get this YouTube model that we can
81:09 - watch the video solution
81:11 - and also I forgot to mention that now so
81:14 - far we can see all of our problems is
81:16 - solved but this is not correct and it is
81:19 - because we are putting these icons or
81:22 - all of the problems and later we're
81:24 - gonna check if we solved it depending on
81:27 - the data that is in the DB and also for
81:30 - this line that we are checking so each
81:33 - of these problem has an index right when
81:37 - we map it we give it them index and it's
81:40 - going to be starting from zero to all
81:42 - the way nine because so far we have 10
81:45 - problems so anyways for the problems
81:48 - that has uh that has the index as even
81:51 - number it is going to be a transparent
81:54 - background but if it is the odd number
81:57 - it's going to be this color that we give
81:59 - so one three five seven nine all of them
82:04 - are gonna have this color so that's why
82:06 - we're checking this and also we are
82:08 - giving this difficulty color and I'm
82:10 - just trying to make sure that we are all
82:12 - on the same page
82:14 - and yeah I think this is
82:17 - that should be it now let's try to
82:19 - implement this
82:21 - um YouTube video model
82:23 - so back to vs code here we're going to
82:25 - take a look at the smog problems
82:27 - so some of our problems has video IDs
82:30 - which looks like some random ID but
82:32 - actually it is an actual ID that we
82:35 - fetch from my YouTube channel so each of
82:38 - them is so every video on YouTube has an
82:41 - ID and we are gonna pass these IDs into
82:45 - our model component that looks like
82:48 - something like this and it'll fetch that
82:50 - YouTube video depending on that ID and
82:52 - then it'll populate it inside this model
82:54 - so let me just show you actually
82:59 - so if you visit this valid parenthesis
83:01 - on my channel we are going to see that
83:03 - in the URL bar we have this ID that
83:06 - starts with x t y and ends with t and u
83:09 - so back to the vs code into the valid
83:12 - parentheses that we're gonna see we have
83:14 - x t y and ends with at T and U so this
83:18 - is that ID that I copied and pasted and
83:21 - you can paste paste your own video IDs
83:24 - if you have any video that is related to
83:26 - these problems
83:28 - and now it is time for us to create that
83:31 - YouTube model by importing or installing
83:34 - a new package
83:36 - so go to Google type in PM react YouTube
83:39 - and visit this first link and then it'll
83:42 - tell us this command which is npmi react
83:46 - YouTube we're gonna go to vs code and
83:48 - we're going to create a new terminal
83:49 - where we're going to say npmi react
83:52 - YouTube so it'll install that package
83:56 - and it is pretty popular that we can see
83:58 - here and if you go to repository that
84:01 - we're gonna see it has it'll give us
84:03 - some this YouTube component which comes
84:06 - from react YouTube and we can pass the
84:08 - video ID and some other options that
84:12 - maybe a lazy loading on what's going to
84:14 - happen on end on pause
84:17 - etc etc
84:18 - so let's see if it is done yep it
84:21 - installed that and we're gonna go to our
84:23 - problems table
84:24 - and maybe we should put a react fragment
84:28 - here because we're gonna have full body
84:30 - and then and we're gonna have table food
84:33 - maybe table footer and then here I'm
84:36 - gonna paste a copy and paste some HTML
84:39 - and I'll explain it I don't want to
84:41 - waste time by writing all these CSS
84:43 - classes so we created a t food and let's
84:47 - import this by from react icons and from
84:50 - react YouTube
84:52 - package that we installed it's coming
84:54 - from the ACT YouTube and for the video
84:56 - ID we paste that same ID so that should
84:59 - be oops x t y and ends with tu which is
85:03 - for valid parentheses so it is going to
85:06 - be loading lazy and on cursor we have
85:09 - this pointer and also we have a
85:11 - background overlay or yeah it is it's
85:15 - going to be our model when we click that
85:17 - it'll close our model so back to our
85:19 - code or our browser let's save this one
85:22 - and now if we click or if we don't click
85:25 - it'll be right there that we can see
85:28 - It'll yeah it was this video and we can
85:31 - watch it we can forward it backwards and
85:35 - pause that and not close that for now so
85:37 - now let's add this other functionalities
85:41 - so we are going to only show this if our
85:44 - user wants to open that YouTube player
85:47 - so for that let's create a state where
85:49 - we're going to say const YouTube player
85:52 - uh YouTube player and then set YouTube
85:55 - player that should be coming from
85:57 - reactive State and you can delete this
86:01 - and initial value is going to be an
86:03 - object where we're going to say it's
86:05 - open to false and video ID will be an
86:09 - empty string
86:10 - and we're going to import the use date
86:12 - and go for close model we can add our
86:15 - function but before that we need to open
86:19 - that when we click that so let's
86:21 - actually make this conditionally
86:23 - rendering if YouTube player is open and
86:25 - then we want to we only then want to
86:28 - show this uh model okay we're gonna wrap
86:31 - it just like this now if you go to the
86:33 - back to the browser we're not going to
86:35 - see that model so when we click this we
86:37 - should be change the state to open so
86:40 - which is this icon and we're gonna add a
86:43 - handle click function into that
86:45 - so I'm going to click here and I'm going
86:47 - to say on click we're going to have a
86:50 - function it could be an arrow function
86:52 - an inline function just like this and
86:55 - it'll say set you to player T is open
86:57 - and video ID is so let's close this
87:01 - and video ID should be that
87:03 - document.videoid and we can cast it as
87:07 - as string
87:09 - and now let's save this one and what
87:11 - it's going to do when we click that icon
87:13 - it'll make its open field to true and
87:16 - then it'll pass that video ID
87:18 - so back to browser when we click that
87:21 - we will get this beautiful model with
87:24 - its ID but now I think it was hard coded
87:26 - here yeah it is here so we're gonna
87:29 - delete this and we're gonna say YouTube
87:31 - player dot video ID so it's going to be
87:34 - this Dynamic ID that you passed now if
87:36 - you save this one back to here so now if
87:39 - you click this uh so we cannot close
87:41 - that actually let's refresh
87:43 - now if we click this maybe maximum depth
87:46 - of binary tree and when we click that
87:48 - we'll get that video that we can see
87:50 - here so now let's implement this uh
87:54 - closing that model by clicking this and
87:57 - backdrop
87:59 - so back to vs code and we're going to go
88:02 - to top where
88:04 - we are going to add our function which
88:06 - is going to be close model so close
88:08 - model Gonna Be an Arrow function again
88:12 - which says that YouTube player is open
88:14 - to false and video ID is going to be
88:16 - empty so we are resetting this and we're
88:19 - gonna
88:20 - bind this function into that close
88:23 - button which is this one
88:25 - so on so make it like this on click so
88:30 - we'll call our close model so we can
88:32 - just put it like this also copy and
88:35 - paste this line into this overlay that
88:38 - we have here so it's going to be that
88:40 - background that you see here
88:42 - and if we save this now if we click that
88:45 - background it'll close that you can open
88:47 - our news problem solution and close it
88:50 - by this
88:51 - and open another close it like this and
88:54 - now we can also add that functionality
88:55 - when we press Escape keyboard so we're
88:59 - going to create a use effect
89:02 - and initialize it just like this or on
89:05 - Mount we're going to say
89:08 - window uh dot event listener or yeah ad
89:13 - event listener where it's going to say
89:15 - key down and on key down we're going to
89:18 - call our function which is going to be
89:19 - handle Escape
89:21 - and save this and then we're gonna
89:23 - return that by cleaning up this function
89:26 - where we can make it in one line and
89:29 - then create our function here const
89:31 - handle Escape
89:34 - so it's going to be a function that's
89:36 - going to take in our event and if e is
89:38 - escaped and we're going to call our
89:40 - disclose model function so we're going
89:43 - to save this now if I open our browser
89:46 - open this model if I click Escape it'll
89:49 - close that as well
89:51 - close this click Escape it close that
89:54 - so with that functionality is also out
89:56 - of the way now let's try to change this
89:59 - top bar depending on if user logged in
90:01 - or not so if you are logged in we're
90:03 - gonna show a logout button here and as
90:05 - well as a profile image so back to vs
90:08 - code where we're going to go to inside
90:10 - top bar and we're gonna extract our user
90:13 - from our hook so we're going to see user
90:15 - that is coming from use of state and
90:17 - we're going to pass a notification
90:19 - object and then import this and then we
90:22 - are only going to show the sign in
90:23 - button if we have not a user so if you
90:26 - are logged out so if you don't have a
90:28 - user
90:29 - then can you just please show us this
90:33 - button or wrap it like this and now
90:36 - since you are logged in it is not going
90:38 - to show us and instead of that it should
90:41 - show us a profile image which we are
90:44 - going to say if you have users and
90:46 - render this portion
90:49 - oops inside we're gonna have our div
90:52 - with some class names that is going to
90:55 - be a class name cursor pointer and it's
91:00 - going to be group which is coming from
91:02 - Tailwind CSS and I'm going to explain
91:04 - that to you so we're going to say
91:05 - relative
91:06 - and and we're gonna have our image which
91:09 - is going to be that image that we have
91:11 - inside our public folder this is going
91:13 - to be this avatar.png so we're going to
91:15 - say Source it's going to be inside
91:17 - public and Avatar Avatar the PNG and ALT
91:22 - could be user profile
91:25 - and then let me see if there is any
91:28 - class names yes it has so class name is
91:30 - going to be height 8 with 8 and around
91:33 - it is going to be full for make it round
91:36 - now let's save this and go to browser
91:38 - where we're gonna see this image and on
91:40 - Hover we would like to show the user's
91:43 - email so for this I'm going to come here
91:46 - and I'll paste a little bit of HTML
91:48 - where we can grab it from GitHub history
91:51 - so here what we are doing is we are
91:54 - giving we are inside the div we are
91:56 - putting our paragraph which is going to
91:58 - show our users email and initially it is
92:01 - it is here is zero so we are not gonna
92:03 - see it in the screen but on a group
92:06 - hover we're gonna make it scale 100
92:08 - which group is this stiff so save this
92:12 - one and so with making this group so we
92:15 - put all of these into you make all of
92:18 - them into one group so we're gonna go to
92:20 - browser now if we hover over this we're
92:22 - gonna see that it scales from zero to
92:25 - one hundred percent
92:27 - and since you are giving it some
92:29 - transition duration it's uh it looks
92:32 - very smooth
92:34 - and also we are absoluting them with
92:37 - positioning centering and giving some
92:40 - orange color and background so pretty
92:43 - basic HTML and CSS
92:45 - okay now I think we are ready to build
92:48 - our logout button and for this we would
92:51 - like to create a new component and put
92:53 - the logout logic into there
92:56 - and the reason being is that we don't
92:58 - want to so we want to keep this Tall
93:00 - part component clean and also you would
93:03 - like to make the logout component
93:05 - reusable so maybe months passed and this
93:09 - application got into a different state
93:10 - or maybe really the next day we would
93:13 - like to have a sidebar over here and
93:15 - then you would like to have a logout
93:17 - button there as well so that's why we
93:19 - would like to make that component
93:21 - reusable and then we can reuse that just
93:25 - by calling that
93:26 - so for this I'm going to create inside
93:29 - the components folder a new folder that
93:31 - is going to be buttons and then we're
93:33 - going to be putting all of our buttons
93:35 - into this folder so I'll say so the
93:39 - first button that we're gonna have will
93:40 - be a log
93:42 - out.tsx and then you're gonna type kfcd
93:45 - to get our boilerplate
93:47 - so here we have this type that says
93:49 - logout props which will so we are not
93:52 - going to be using for now or maybe for
93:55 - until the end of the project but in my
93:57 - site projects and this is kind of my
93:59 - preference that I even though I'm not
94:01 - going to be using them I would like to
94:03 - keep them so because maybe in the future
94:05 - I will I would like to take some props
94:08 - into this component and if we see this
94:11 - it'll be in in only one line so it
94:14 - doesn't harm us and but if you'd like to
94:16 - delete them you need to delete here and
94:18 - then you need to remove this from this
94:20 - brackets and that could be a react
94:23 - functional component like this that
94:25 - would be okay and let's let me just
94:27 - delete that as well and then since this
94:29 - logout is going to be button we're gonna
94:31 - say we need to return a button and then
94:34 - inside you are going to have a logo and
94:37 - it'll gonna be fi log out that is going
94:40 - to be coming from react icons so let's
94:43 - just import that and now this button
94:46 - will have some classes
94:47 - so we're going to say class name will be
94:50 - BG dark fill free and then petting y
94:54 - 1.5 and then padding X will be three and
94:58 - also I think we'll have our cursor as
95:01 - pointer and then we would like to give
95:04 - it some water radius we'll say around it
95:06 - and then X should be a brand orange I
95:09 - guess as always and then yeah this is
95:12 - going to be for our class names so let's
95:15 - save this one and add it into our for
95:18 - the top bar so we're gonna come here
95:20 - we're gonna say show us the log out so
95:24 - import that save this
95:26 - now here we need to we see this button
95:28 - that we have here and now let's make it
95:30 - work so for this interlog that we're
95:33 - gonna have when we click this function
95:35 - we would like to call our function that
95:38 - we're going to initialize so on click
95:40 - we'll say handle
95:42 - I can type handle log out I'm gonna copy
95:46 - this and then I'm gonna create this
95:48 - function here that'll be
95:51 - um that will allow this to log out but
95:53 - for this let's go back to our
95:55 - documentation and now let's scroll to
95:57 - top
95:58 - we need to uh so we need to look for
96:01 - something like logout or sign out that I
96:03 - can see here click that and then they
96:07 - import this hook so we're gonna copy
96:10 - this and paste it here and then import
96:12 - this
96:14 - um the hook as well as our object that
96:16 - is coming from our Firebase uh file that
96:19 - we have here so we are initialized so
96:21 - calling out this authentication object
96:23 - into here and then we have our sign out
96:25 - function loading State and error state
96:27 - so on on click what they do so they call
96:32 - this sign out function and they they
96:35 - await them but I think we don't need
96:36 - this because we're not going to show any
96:38 - alerts so now once they click that you
96:41 - would like to show call the sign out
96:44 - function
96:45 - okay now save this back to browser now
96:48 - if you click this it'll log out and we
96:51 - still show this button it is because we
96:54 - need to conditionally render this so
96:57 - we're gonna say if we have a user that
97:00 - is logged in then
97:02 - you should show this logout button low
97:05 - now save this and now we're not gonna
97:07 - see that I'll refresh this page and now
97:10 - if we click sign in button it'll take us
97:13 - to authentication page but it'll it is
97:15 - not going to open that model so for this
97:17 - we need to again click this but it is a
97:20 - bit too much work I what I want to do is
97:23 - when I click this I would like to get
97:25 - that model open that's why we need to uh
97:30 - mutate this oauth model state that we
97:32 - have here so for this I'm come back to
97:35 - top bar and inside the sign in
97:39 - when we click that button I would like
97:42 - to follow our function so on click we're
97:45 - gonna call this it or
97:49 - um we're gonna call our
97:50 - book that is coming from the US recoil
97:54 - we will say use set recoil State and
97:57 - then we're gonna pass our auth model
97:59 - state which is coming from that should
98:02 - be import
98:05 - um from atoms and alif model atom that
98:08 - is this file and now we are gonna
98:12 - assign it into variable called set all
98:15 - model state
98:18 - and now inside this on click we're gonna
98:22 - call that function so inside here
98:26 - we're going to call that and we're gonna
98:28 - change the is open field to true and
98:31 - then type is gonna be log in now if I
98:33 - save this back to here
98:36 - in home page if you click that button
98:38 - it'll take us to this authentication
98:40 - page and then it'll open this model
98:43 - oh that's great now we want to add this
98:47 - forgot password functionality and I
98:50 - think eventually you are going to be
98:52 - done with this authentication logic
98:56 - and for this I'm going to go back to my
98:58 - documentation and I'm gonna look for
99:00 - something like maybe you send password
99:03 - reset email click that you have a full
99:06 - example so I'm going to copy these two
99:09 - lines activist coach I collapsed and
99:12 - closed everything here so I'm gonna say
99:15 - Ctrl e to get my reset password and then
99:18 - inside I'm gonna paste that what I just
99:21 - copied and then I'm going to import my
99:23 - use date
99:24 - um that should be coming from react
99:28 - um use update and then I'm gonna import
99:31 - this as well as our authentication
99:33 - object and then format these
99:38 - um okay now we would like to use the
99:40 - state on change of this input so we'll
99:43 - uh bind this function into this input
99:46 - and then on submit of this form when our
99:49 - user click this button we would like to
99:51 - submit that so on submit we we're gonna
99:55 - have handle reset function and then I'm
99:58 - gonna create this up here it's going to
100:01 - be taking the event and we would like to
100:03 - prevent that because we don't want our
100:06 - browser to refresh the page and then so
100:10 - this is what co-pilots recommends me but
100:12 - let's make sure in the documentation
100:15 - yeah they sent this password reset email
100:17 - with email as well as some optional
100:20 - um optional objects but I don't like
100:22 - that
100:23 - and so they use async to get uh if they
100:27 - got a success the alert this and
100:29 - actually maybe this is what you would
100:31 - like to do copy this and paste that make
100:34 - this function async and then delete this
100:37 - line save it now if we sent the email
100:40 - then we're gonna show this alert which
100:43 - says email sent now let's save this back
100:46 - to here
100:47 - um so we were so let's try to send it to
100:50 - my email
100:53 - um so reset password so we didn't get
100:55 - that alert because there is an error so
100:58 - I didn't sign up with this account into
101:01 - this application so it is not going to
101:03 - send an email into this but if we say
101:05 - John do at gmail.com which we have
101:07 - signed in with this account and we try
101:09 - to reset our password it'll send that
101:12 - and it'll says uh it'll say like email
101:14 - sent and then for our error handling we
101:18 - can use a use effect where
101:22 - we're going to initialize it in whenever
101:25 - our error changes so we're going to run
101:27 - that whenever our error changes and then
101:30 - if there is any error error then we're
101:32 - going to alert that so let's import
101:34 - let's use effect
101:37 - this error is coming from this hook that
101:40 - is sending that is giving us okay save
101:42 - it now here let's say try to this
101:45 - account so if you sent that it'll says
101:48 - user not font right so we are done with
101:51 - our error handling so now let's
101:54 - uh so let's create a new account by
101:58 - maybe that should be Dev my name and it
102:02 - should be my name and password should be
102:03 - one two three four five six register
102:07 - okay now we have logged in and we have
102:10 - our email as well as home page now let's
102:12 - say you logout and I forgot my password
102:14 - and I'm gonna come here I will say let
102:17 - me just send a reset password to this
102:20 - email I'm gonna reset that it says email
102:23 - sent so and I'll just check my email
102:25 - okay now I am in Gmail and I can see
102:28 - that I got a reset password uh link I'm
102:32 - gonna click that it'll take me to reset
102:34 - password now let's say my new password
102:37 - is going to be test one two and then
102:39 - save this
102:41 - um here try to log in with this new
102:44 - password so if I say test one two login
102:49 - yeah it logged Us in because the
102:52 - password is updated so I think with all
102:55 - these
102:56 - um
102:57 - maybe we can add a bit more
102:59 - user-friendly alerts and for this we're
103:02 - going to be using react toastify npm
103:04 - package
103:05 - go to Google type react toastify npm
103:08 - click that and 1 million downloads
103:12 - weekly pretty popular package so we're
103:15 - gonna copy this and what it does is like
103:18 - we are we're going to be showing this
103:20 - cool alerts instead of sending that
103:23 - boring alert that we show and you can
103:26 - really customize it however you want
103:29 - um for this you can check the
103:30 - documentation but I'm going to be
103:31 - showing you guys how to show error and
103:35 - loading as well as success messages so
103:38 - back to vs code open a new terminal and
103:42 - then paste which is three copied
103:46 - okay now it is installed instead of
103:48 - showing this alert you'll say closed dot
103:51 - success and with a message and import
103:55 - this toast and maybe that should be
103:58 - positioned as
104:00 - so we can pass an object for our options
104:03 - and we'll say position it should be top
104:07 - enter and it should Auto close and maybe
104:11 - after three seconds and then now it's
104:14 - not gonna work because in our app we
104:17 - should add
104:19 - um
104:20 - we should add the container of this
104:23 - toast so we'll say toast container and
104:25 - we're gonna import that from react
104:27 - testify
104:29 - just like this then we also need to put
104:33 - CSS so you can see that from the
104:36 - documentation as well that that we can
104:39 - see that they are adding this container
104:41 - as well as the CSS file
104:43 - and now if we save this back to here
104:48 - now let's try to send an email so reset
104:52 - password
104:53 - idle says this beautiful it'll show us
104:56 - this beautiful alert
104:58 - and you can even make the mode dark I
105:01 - think
105:02 - it should be
105:05 - control space to get the options
105:08 - the theme could be
105:11 - um yeah dark save this
105:14 - again I will send another one yeah now
105:17 - it's in the dark mode
105:18 - okay that's cool
105:20 - um now we can add that post into other
105:23 - part of our application that we added so
105:26 - far maybe when we log in or we sign up
105:30 - so inside here
105:34 - so do we show any alerts
105:36 - or maybe instead of this maybe we'll say
105:39 - post
105:40 - add error as well as our error message
105:44 - import this and this options could be
105:47 - there import post from react classify
105:51 - now let's try to log in with a wrong
105:54 - email and password
105:56 - so that should be John Doe and password
105:59 - is random now try to log in it all says
106:02 - so it'll show this here I testify okay
106:05 - now you can add this just by doing this
106:08 - in one line or like even with change you
106:11 - can change this
106:13 - with this alerts
106:16 - um save this yeah
106:19 - okay this is also out of the way
106:22 - um
106:23 - why did I get two
106:26 - okay that was a bug okay now with this
106:29 - also out of the way I think we should
106:32 - maybe add this problem page that we see
106:36 - when we click one of these we'll get
106:38 - into the problem page so it'll load this
106:42 - in the server side and then
106:45 - we have our description our examples our
106:48 - constraints
106:50 - our code editor as well as test cases
106:52 - that we can switch between them and
106:55 - it'll update the UI and then we have our
106:58 - font size changer or adjuster whatever
107:01 - you say so we can make it small bigger
107:04 - we can go to full screen mode we can
107:07 - exit that start our timer and submit our
107:10 - code
107:11 - and then so we can reset that so
107:15 - everything that you can see here and I
107:16 - mentioned in the intro
107:19 - so now we can log in let's try to
107:22 - remember our user in the in the first
107:26 - part which was john.gmail.com and it was
107:29 - bundle and now let's try to log in now
107:32 - your yours user could be different so it
107:35 - might not log you in so if not just
107:37 - create an account and try to log in with
107:39 - that credentials so yeah now you're
107:42 - logged in we can log out as well as we
107:44 - can see our email so so far this is the
107:47 - current uh state of our application and
107:50 - now let's try to take a look at what we
107:52 - did so I just give you a quick summary
107:54 - uh of the current state of the app
107:58 - um so we created our project by
108:00 - initializing with next.js and typescript
108:03 - configurations which we got a script
108:07 - from the next JS website and then we
108:09 - paste it into our terminal and then what
108:12 - we did we initialized Tailwind CSS we
108:15 - added our colors and we will be changing
108:19 - this file at the end because we want to
108:21 - purge some
108:23 - um so CSS classes if you don't know what
108:25 - that really means I'm going to explain
108:27 - that but it is basically when you don't
108:29 - want to uh when you want to remove the
108:32 - classes that you didn't use so it'll
108:35 - really decrease the size of this bundle
108:38 - and it'll make our app a little bit
108:41 - faster and it is kind of best practice
108:43 - also when you use cln CSS and then so
108:47 - we're going to be changing this file if
108:49 - you see anything strange here and then
108:51 - what we did was we create the Firebase
108:54 - project where we had our API key domain
108:58 - so this configuration object that
109:00 - Firebase gave us and then we change it
109:03 - with this process.emv so that we can use
109:06 - it this local data so our keys right and
109:10 - we did this because once we push this
109:13 - repository into GitHub we don't want
109:16 - anyone to see our credentials so that's
109:19 - why we did this and for the Firebase
109:22 - authentication we initialize the package
109:25 - we installed it with npm and it is
109:28 - because this package is really useful if
109:32 - you don't use it you can still Implement
109:33 - your authentication logic but
109:36 - um this makes everything a lot faster
109:39 - and easier so let me just show you
109:41 - example so we use a use of state so
109:45 - which gives us our user if he or she
109:48 - logged in or not so if you didn't use
109:51 - this hook what we so what we would do is
109:55 - to create our own react context with the
109:58 - provider and then every time we would
110:00 - call our own hook with the user you know
110:03 - and it just takes a lot more time and a
110:06 - lot more code so that's why we use this
110:09 - package it works really cool with react
110:11 - because everything is wrapped around
110:14 - this hooks so with that we also used
110:17 - recoil which has atoms it is for Global
110:21 - state or like State Management some
110:24 - something like react Redux or maybe
110:26 - react context but a lot easier than them
110:30 - so we just have this file for each of
110:33 - our atoms we have our initial State such
110:36 - as is open is false and type is login
110:38 - and it determines if you are in the
110:40 - login component or in the register or in
110:43 - the forgot password component
110:45 - and yeah and also we created a lot of
110:49 - components that was not really complex
110:52 - so we have our models nav bar problem
110:55 - stable top bar as well as buttons
111:00 - um yeah so that was The quick summary of
111:02 - our app if you don't remember anything
111:04 - so just check back the part one which I
111:08 - have explained everything and if you
111:10 - don't understand some parts I have
111:12 - created a Discord server that you can
111:15 - see the link from the description down
111:17 - below just join them and ask me and to
111:20 - other developers that is also watching
111:22 - this tutorial
111:24 - so yeah with this I just did some three
111:27 - optimizations which it is in the navbar
111:30 - top bar and index that SX so let's go to
111:33 - navbar so here I have changed this line
111:36 - to this line okay you can delete this
111:39 - and add it like this because now if we
111:43 - have this do you see that we got a
111:45 - warning because in xjs we need to use or
111:49 - it's like kind of best practice to use
111:51 - this image that is coming from next
111:53 - image so you can still use this uh this
111:56 - line but it just kind of cool to use
111:59 - this because it does a lot of lazy
112:01 - loading stuff and image optimization so
112:05 - that's why I deleted this line and also
112:07 - in the top bar I did the same thing
112:09 - where I change this line to this and the
112:14 - only difference is we are deleting the
112:17 - class name and give it a height and
112:19 - width depending on the size that we want
112:22 - it to have so if you want to make this
112:25 - bigger you can play around with this
112:26 - height and width so I delete this line
112:28 - as well and then also inside the
112:31 - index.sx where not this one but
112:35 - so which one was that so in the
112:38 - authentication page okay so let's go to
112:40 - Alt
112:41 - here so I deleted this image and I
112:44 - changed it with this one with the height
112:47 - and width of 700 so delete this yeah
112:50 - that was all that we need to do for this
112:53 - part one and close everything now
112:56 - collapse everything now what what do we
112:59 - want to do so when we click one of these
113:01 - problems in our demo application which
113:04 - you can check from this URL and now
113:07 - let's try to go to two sum it navigates
113:09 - us to problems slash two sum and if we
113:13 - go to another problem we again navigate
113:15 - it to another problem so this problems
113:18 - part is static and then we have a
113:21 - dynamically changing uh sorry the
113:24 - problem ID that's why we'll come to
113:26 - inside source Pages create a folder
113:30 - called problems it's going to be slash
113:32 - problems and then we'll have a dynamic
113:34 - URL so for this open the square brackets
113:38 - and type PID which stands for problem ID
113:41 - and then close that bracket in dot ESX
113:45 - and then we'll say tfcd
113:48 - and click so select this PID Ctrl D to
113:52 - select all of them and say problem uh
113:55 - page so save it now if we come back to
113:59 - here slash dot problems of imitosum
114:03 - we'll get this have a code have a good
114:05 - coding and then what we want to do is
114:08 - every time when we come to this page we
114:10 - always want to see a top bar okay so top
114:13 - bar import this we already have it and
114:15 - we're gonna be mutating this component
114:18 - so save this and let's take a look at so
114:22 - here we have the same navbar that we
114:25 - have inside the home page right so
114:28 - actually it is exactly the same top bar
114:31 - but the difference is inside this we
114:35 - have inside this problem page we have
114:38 - something in between that is problem
114:40 - list that goes backwards and forwards
114:43 - and then on the left on the right we
114:45 - have this
114:47 - um clock icon so this is what we're
114:49 - going to be implementing so really this
114:51 - is the difference and inside the home
114:53 - page we have this top bar as centered
114:57 - but here we're not going to be doing
114:59 - that so everything is space between
115:02 - so let's come back here and we're going
115:04 - to be changing this as depending on if
115:07 - you are in the problem page or not which
115:09 - we can pass a prop into this we'll say
115:12 - if you are in the problem page so this
115:14 - is exactly as doing this okay
115:16 - so problem page is true or we can
115:19 - basically make it like this and then
115:22 - inside the top bar we're gonna get a
115:25 - prop so that's why we didn't delete this
115:28 - type and now we'll say
115:31 - it's going to be a problem page type of
115:33 - Boolean and it's going to be optional
115:35 - because in the home page we are not
115:37 - passing that right so in the home page
115:39 - we have we call this top bar but we
115:42 - don't pass that uh problem page props
115:46 - for the prop so save this in here we are
115:50 - adding this and now let's destructure
115:52 - this we got our problem page and
115:54 - depending on that we're going to
115:55 - different something uh in between that
115:58 - we see we had this
116:00 - a problem list that is go goes to next
116:03 - and previous and as well as our clock
116:08 - so now below this link will say if you
116:12 - are in the problem page then render this
116:14 - portion
116:15 - uh which will have a div as always with
116:18 - some class names that is going to be
116:20 - Flags items Center and we'll have gap
116:23 - for Plex one justify Center and then
116:28 - inside you'll have another div that is
116:30 - going to have again some class names
116:32 - which is going to be flags and like
116:35 - items
116:37 - um if I can items it's gonna be Center
116:40 - and then what what do we have let me
116:43 - just check it's gonna have justify
116:45 - Center and around it dark field three
116:50 - how on Hardware will change the
116:52 - background it will say hover BG uh dark
116:56 - fill two two and then so that should be
117:00 - separated and then we'll have height of
117:02 - 8 width of eight
117:04 - width of 8 and we'll have our cursor
117:07 - pointer and then inside we'll have an
117:10 - icon which is coming from react icons
117:12 - it's going to be fi sharing uh right or
117:16 - maybe it should be a left
117:18 - and then we'll import that
117:21 - coming from react icon slash fa and then
117:25 - after this div we'll have another link
117:28 - it will take us to maybe homepage
117:32 - so let's call it and then import this
117:36 - so did we already got that
117:39 - yeah we already have it and now you'll
117:41 - have an href that will take us to home
117:44 - page as well as some class name
117:46 - so our class name is going to be X items
117:51 - tenor and then gap of two font medium
117:56 - uh you could better type it and then
118:00 - we'll have a maximum width of
118:03 - 170 pixels and then we'll have maybe
118:07 - text dark gray eight also these colors
118:12 - are coming from tail with config if you
118:14 - watch the part one then you know what we
118:16 - are doing here and then you will have
118:18 - the cursor pointer
118:23 - decide what it should say it could say
118:25 - it'll have a div that is going to be
118:28 - containing an icon that says BS list
118:33 - and we import this
118:35 - then
118:37 - um below this div you can save it to
118:40 - format this and then below this div
118:42 - we'll have a paragraph it says problem
118:44 - list now let's save this come back to
118:47 - here and go to problem page
118:51 - oops it didn't work out so
118:54 - because we didn't finish it right and
118:56 - maybe something is going on here if you
118:58 - have item Center we have flex and delete
119:01 - this Dash
119:03 - yeah now it's it works now maybe we
119:05 - should add some more classes
119:07 - and maybe after this link we'll take a
119:09 - look at that you'll have another GIF
119:11 - that says actually that's exactly the
119:13 - same thing with this one okay paste it
119:16 - here and instead of left it will say
119:18 - right
119:20 - save it
119:22 - yeah it is that part so it just doesn't
119:25 - have that first background maybe we
119:27 - should add this
119:29 - yeah so the problem here is that BG
119:32 - should be we add should this prefix as
119:36 - BG dark fill three David now it's
119:40 - exactly the same with this one maybe we
119:43 - should change this uh give it a space
119:45 - okay so we have this and now let's add
119:48 - our timer but before that so do you see
119:50 - that everything is justifies uh space
119:53 - between but here in our case it is in
119:56 - the center now let's just change this
119:59 - where we're gonna come to here
120:02 - delete this line okay just or maybe Ctrl
120:05 - X it's because we're gonna paste that so
120:08 - we'll say if we are in the problem page
120:12 - then paste this classes but otherwise
120:16 - we're not going to have anything
120:18 - and it should be not problem page so if
120:21 - you are in the home page right we will
120:23 - have everything in tenor which will have
120:26 - the maximum width of 1200 pixels and it
120:29 - should be MX Auto but on the problem
120:32 - page you're not going to have that uh
120:35 - container where everything is going to
120:37 - be justified between now save this as we
120:41 - can see we're in the problem page we
120:43 - don't have that container the width of
120:45 - 1200 pixels but in the home page we have
120:48 - that
120:49 - so yeah this is what we did now it's
120:51 - time for us to add that uh timer that
120:55 - we'll have on the right and for this I
120:58 - want to have its own component so that
121:02 - we don't
121:03 - um so maybe we want to use this in other
121:06 - parts of our application so I want to
121:08 - make it reusable so for this come back
121:12 - here collapse everything inside the
121:13 - components I want to create another
121:15 - component called timer and then it will
121:18 - say timer dot yes I use tfcd to get our
121:22 - boilerplate and
121:25 - so inside timer let's first add our
121:28 - markup and then we're gonna code the
121:30 - logic but first I want to have one state
121:33 - it is going to be troll climber
121:37 - and set your timer at first it's gonna
121:39 - be false now import this
121:43 - so we can also use something like this
121:46 - uh third uh I don't know how do you call
121:49 - it but it should be carried brackets
121:51 - where we put the type of this use state
121:53 - which is going to take the value as type
121:55 - which we're gonna have for this Boolean
121:57 - and then low timer we have the state
122:00 - because either user is who want to show
122:03 - that timer or not so so far show timer
122:07 - is false when you click that show timer
122:09 - is true now it shows that so that's why
122:12 - we have that state and you will say if
122:13 - show timer is true then you want to
122:16 - render something otherwise you want to
122:18 - render something else
122:20 - so here we'll say let me just check
122:23 - we're gonna have a div with a lot of
122:26 - class names again so because this we are
122:29 - using table in CSS for Flex items tenor
122:33 - really we'll say space X2 as well as BG
122:39 - um dark
122:40 - not Fork but dark fell free and painting
122:45 - Y is gonna be 1.5 cursor is going to be
122:49 - pointer as well as we're gonna give some
122:52 - border radius and then hover they on
122:55 - Hover will say BT it should be Park fill
122:58 - two
123:00 - and yeah so inside you will have our
123:03 - maybe we should have a div
123:06 - so inside if you'll now hard code it
123:09 - this will say like zero hours 10 minutes
123:12 - and 12 seconds and then below that we
123:16 - want to show a refresh icon which is
123:19 - going to be F I refresh TCW and then
123:23 - import that from react icons now format
123:25 - is
123:26 - and format that uh maybe tab then
123:30 - [Music]
123:31 - so let's come back to this else case
123:34 - where we're gonna have another div with
123:36 - some class names as well as inside we're
123:38 - gonna have an SVG so let's say class
123:41 - names for this is going to be on
123:44 - before doing that maybe we should say
123:46 - like X items tenor and padding one
123:51 - should be so padding should be one
123:53 - height should be eight and on Hover
123:56 - State we're going to say BG should be
123:58 - Park
123:58 - on dark fill 3 and then it could be
124:03 - around it
124:05 - as well as it should be cursor pointer
124:08 - and then inside I'm gonna have an SVG
124:12 - which I'll copy and paste it you can
124:14 - grab that from our GitHub repository
124:17 - so I copy that I'm gonna paste this and
124:20 - I'm gonna try to save it yeah so let's
124:23 - take a look at that so first
124:26 - um we are not rendering that because
124:29 - inside the top bar
124:30 - where maybe here we'll say if it is the
124:35 - problem page then we wanna render our
124:38 - oops
124:39 - we want to render the timer so import
124:43 - that from our components and then close
124:46 - it
124:47 - so save it now we'll see that Primary in
124:50 - our problem page but not on the home
124:52 - page right
124:54 - and then when we click this so we cannot
124:57 - see that because we didn't implement the
124:59 - logic but now let's say if this show
125:02 - timer is true then it'll be you will
125:05 - have this uh
125:07 - so this component right
125:10 - and then it's time for us to add that
125:13 - Dynamic
125:15 - um so logic but before I don't know why
125:17 - it doesn't work maybe we didn't add that
125:20 - padding y
125:21 - 1.5 so it should be
125:24 - this portion to be honest
125:26 - so maybe not painting y but heading
125:31 - yeah it should be maybe padding uh 1.5
125:35 - and now we want to add the logic and for
125:37 - this what I did I actually asked it to
125:40 - check GPT to give me the logic so I just
125:44 - got to check GPT and I said can you just
125:47 - create a timer component for me I'm
125:49 - gonna use it in my react next.js
125:52 - application and what I want you to do is
125:54 - I'm gonna have a clock icon in when the
125:57 - user clicks that I want to show that
125:59 - timer in this kind of small div small
126:03 - container and then I just asked him to
126:06 - write all of the HTML CSS and so the
126:09 - logic the HTML and CSS it gave me was
126:13 - really poor so I implemented my own with
126:16 - svgs and class names but I just copy and
126:20 - paste the exact functionality that it
126:23 - gave me with functions and use effects
126:25 - so I will just copy and paste it and I
126:28 - walk you through and I just want to say
126:30 - like this is where ggpt comes into play
126:33 - this is where you might gonna use it so
126:36 - it really reduce the time that you waste
126:39 - and it makes your productivity freely
126:42 - 10x so like 10x boosted or whatever you
126:45 - say so I'm gonna copy and paste that and
126:47 - I will walk you through again
126:49 - okay so I copied now I'm gonna paste
126:52 - that where we have our user effect
126:55 - import this
126:57 - and then so let's see we have a time
127:01 - that is another use state which the
127:04 - value is zero for now and for here we'll
127:07 - say instead of this we delete this and
127:10 - it will say format time and pass the
127:12 - time
127:13 - and then when we click that clock where
127:17 - was it so here once you click that what
127:20 - do we want to do so on click we might
127:24 - want to call this function or maybe we
127:26 - just can cut it from here and paste it
127:30 - inside an arrow function
127:32 - so we say that when we click that icon a
127:36 - clock icon we want to show the timer so
127:38 - delete this and
127:41 - so the initial value should be false
127:45 - and then let's see
127:47 - so once we click that our time show
127:51 - timer set it changes and use effect runs
127:54 - it says if show timer is true which case
127:57 - it is and then it initializes a set
128:00 - interval which will run in every second
128:03 - and every second it will add plus 1 into
128:06 - our time which was initially zero and so
128:09 - every time it passes every time every
128:12 - second it just adds plus one and then
128:15 - since time changes it is a state right
128:18 - we are updating it so it re-renders our
128:21 - component and we have our time states
128:24 - which we pass it into this format time
128:26 - and this function takes that number and
128:30 - it converts that into a string and it
128:33 - returns as a string and so this return
128:35 - type is something like that we just
128:38 - typed so maybe zero zero and like zero
128:41 - hours 10 SEC minutes in Lake 22 seconds
128:45 - right you are first 10 minutes and 22
128:49 - seconds so this is what it does it just
128:51 - gets it calculates the hour
128:53 - puts Colin and then minutes and then
128:56 - once again a colon and then it gives us
128:59 - the second so this is the where I just
129:02 - use the jgpt I didn't even think about
129:06 - this logic I just pasted and it works
129:08 - and it's really great so let's save this
129:11 - come back to here now when I click that
129:13 - we can see that our time is updating at
129:17 - every second and it just renders that
129:20 - into here so when I click this uh it
129:24 - should uh refresh that right and for
129:27 - this let's come back to here it was this
129:30 - refresh icon so I wanted you to say on
129:34 - click
129:35 - right what I want to do so maybe an
129:39 - arrow function I will say that show
129:41 - timer to false but there is a problem
129:44 - here because now
129:47 - the 30 seconds pass now I click this
129:50 - also it didn't
129:52 - it didn't so maybe
129:54 - maybe should I refresh this
129:57 - foreign
130:00 - for a second so like five seconds has
130:03 - passed now I click this okay six seconds
130:06 - has passed now if I start that again
130:09 - it'll be continuing from that six
130:12 - seconds so that's why here I wanna also
130:17 - um reset this time so I'm just gonna cut
130:20 - it for a second open my brackets and
130:23 - I'll say show timer is going to be false
130:25 - and time is gonna be zero now if I save
130:28 - this come back to here now if I re so
130:32 - let's refresh this
130:34 - so click that clock icon so let's read
130:37 - for five seconds and now I'm gonna
130:40 - refresh that now I reopen that it'll be
130:43 - it should start from zero seconds right
130:46 - so yeah this is what we want and with
130:49 - this our timer and nav bar is completed
130:53 - at least for the UI and now we are ready
130:56 - to build our workspace which is gonna be
130:59 - uh on the left you will have our
131:02 - description and on the right you will
131:04 - have the code editor as well as the test
131:06 - cases that we see here and for this we
131:09 - would like to have this splitter that
131:12 - will let us to shrink our window or the
131:15 - containers however we want
131:17 - um for this we're going to be using a
131:19 - package called Supply JS and for that
131:23 - let's just visit their website so go to
131:27 - supply.js.org that we see here we have
131:30 - this splitter that is so far horizontal
131:33 - and it just allows you to build
131:37 - um two containers with this splitter and
131:41 - if you want we can use the vertical
131:43 - which will make it to have uh two
131:46 - containers but on the vertical Direction
131:48 - and it turns out that in our application
131:51 - we use the both of them so you have this
131:54 - horizontal and you will have this
131:56 - vertical Direction
131:58 - um so yeah we're going to be using this
132:00 - switch.js and for this it it even has
132:04 - the code examples with react and so
132:08 - let's first import this package and then
132:10 - we're gonna take a look at this usage
132:13 - so go to Google type npm react split and
132:17 - click the first link and then it'll give
132:19 - us this command so copy that come back
132:22 - to vs code where go to terminal and just
132:26 - paste it and click enter it'll download
132:29 - that
132:30 - and we said that we're going to have a
132:32 - workspace so this is entire so this
132:35 - entire container is going to be our
132:37 - workspace and on the left you will have
132:39 - problem description and on the right
132:42 - maybe we'll have the playground which
132:45 - we'll call the first
132:47 - um container as our editor and for the
132:50 - bottom section we'll call it maybe test
132:53 - cases or something like that so for this
132:55 - come back to vs code we would like to
132:58 - have this inside the PID problem ID page
133:02 - so we'll say
133:04 - um import the workspace component which
133:08 - you will need to create it first so come
133:10 - back to components folder create a
133:12 - workspace
133:15 - folder and then inside will have
133:17 - workspace.usx
133:19 - so we're gonna use tfcd to get our
133:21 - boilerplate so maybe we can call this
133:25 - work base save it and then here let's
133:28 - import this by clicking control and
133:31 - space it'll give us this Auto completion
133:35 - and now save this inside our workspace
133:38 - we said that we're gonna have a problem
133:40 - description and then on the right you
133:43 - will have our code editor so let's say
133:45 - inside workspace you'll have a problem
133:48 - description
133:51 - and then we'll have the file that is
133:54 - going to be a problem description dot
133:57 - ESX
133:58 - so let's say tfcd and
134:01 - you could say
134:03 - problem description save this and then
134:07 - here what we would like to have is this
134:09 - split so you want to import this split
134:12 - and then if we have this split component
134:16 - we can put two different divs that is
134:20 - going to be one on the left and the
134:23 - other one is going to be on the right so
134:25 - let's just do this so we'll come back to
134:28 - here it will say import so is it a
134:30 - default yeah so we'll say so split from
134:34 - react split and then replace this with
134:37 - with components and then was it the
134:40 - class name yeah the class name is going
134:43 - to be split and then we'll have two divs
134:46 - so the first one is going to be the one
134:49 - gonna be on the left so which was which
134:52 - was going to be the problem description
134:55 - so import this and then maybe for the
134:57 - right we can say the code editor will be
135:03 - here
135:04 - so this is some kind of placeholder now
135:08 - let's save this and if we take a look at
135:10 - here they also give us some CSS classes
135:14 - so for this just go to the GitHub gist
135:17 - or the GitHub repo take all of the CSS
135:19 - that I have added and I will walk you
135:22 - through and we come there but when we
135:24 - get there so basically we have these
135:27 - that we all we have already added for to
135:30 - make detail in CSS work and then I added
135:33 - this reset I don't know if Tailwind CSS
135:35 - already does that but just to make sure
135:37 - I added this reset classes
135:42 - and then for the body we put our phone
135:45 - family as well as making it full screen
135:48 - and then we have a better
135:51 - um scroll bar which we make it dark as
135:54 - well as a bit thinner and also this
135:58 - these are the classes that we got from
136:01 - the split.js site it gives us this for
136:05 - this split it's gonna be display Flex
136:07 - for X direction is going to be raw but
136:10 - when we come to here for the vertical
136:12 - we'll have
136:14 - um so this direction is going to be
136:15 - vertical but once we came there so once
136:19 - we get this portion we will take a look
136:21 - at that so so far let's just build this
136:24 - horizontal and it gives us some gutter
136:27 - and what is gutter is that this thing
136:29 - that we so this blue thing that you see
136:33 - it is Gutter and for this it gives some
136:36 - background image which makes this uh to
136:40 - have these Square dots this is what it
136:43 - is and it just does some cursor to call
136:47 - resize as well as background color and I
136:50 - have changed it to make it have a black
136:53 - background color and on Hover we make it
136:55 - blue so that it looks
136:57 - um just exactly the same as Lee code
137:01 - so these are the classes that you can
137:04 - get
137:05 - and as you can see we also have some
137:07 - additional styles for some other classes
137:10 - which will explain that once we get
137:13 - there so just copy them from the GitHub
137:15 - gist or the repo and then paste it into
137:18 - the global CSS we also don't need this
137:20 - Honda
137:21 - module.css you can delete this I don't
137:24 - know why we put this until here but we
137:27 - just need to delete that and then let's
137:30 - come into the maybe the description site
137:34 - um so actually just save everything and
137:36 - let's take a look at in our demo so this
137:39 - is the result that we got something on
137:41 - the left and something on the right so
137:43 - it doesn't have any width or like height
137:45 - this is why it shows um it is very small
137:48 - but now let's just make this problem
137:50 - description to have maybe height to this
137:54 - screen that will make it full screen
137:56 - save this and yeah this is the result
137:59 - that you would like to have so now let's
138:01 - build this right side and then we'll
138:03 - gonna so let's build this left side
138:05 - which is going to be the problem
138:06 - description and then we're gonna
138:08 - building this code editor site
138:11 - so in our problem description component
138:14 - we have a description Tab and then below
138:17 - that we have the problem title as well
138:20 - as the problem category if we have sold
138:23 - it or not like counts dislikes counts
138:26 - and then if you have started started or
138:29 - not and then we have the problem
138:31 - statement which consists of
138:34 - paragraphs and then below that we have
138:37 - our examples each example has the
138:40 - structure of input output and then
138:42 - explanation and explanation is optional
138:46 - because some of them doesn't have that
138:48 - and then for the constraints which will
138:51 - have them at the very bottom of the page
138:53 - and it will be consisting of an
138:57 - unordered list in a way that liquid does
139:00 - and then so first we're gonna be
139:04 - inserting this data as hard-coded and
139:07 - then in the upcoming sections we will be
139:10 - updating that as like Dynamic data
139:15 - and as always this is not a CSS course
139:18 - so we will not be focusing on CSS I will
139:21 - just be copying and pasting this
139:24 - component that we have this problem
139:26 - description and I'm gonna paste that and
139:28 - we'll just do a quick walkthrough and if
139:31 - you don't understand some part of it you
139:33 - can always ask me from the Discord
139:35 - server or you can just pause the video
139:37 - take a look at the CSS classes for to 10
139:40 - 10 to 15 minutes and with this now let's
139:43 - just copy and paste it
139:46 - so I have grabbed that from the GitHub
139:49 - gist which you can after this return
139:51 - delete everything and just paste it
139:53 - which we are gonna have some imports for
139:57 - this maybe we can click control dot to
140:00 - add all missing Imports so this is kind
140:03 - of pro tip that you can get from the vs
140:05 - code and for some reason it doesn't
140:07 - import This Ti star outline so maybe we
140:11 - can say import Ki
140:14 - um star outline from react icons ti so
140:18 - save it and let's take a look at our
140:21 - browser in the localhost so this is
140:24 - exactly the output that we would like to
140:26 - get
140:27 - and so there is one thing that we would
140:29 - also like to add so do you see like it
140:32 - doesn't shrink 100 and it is because in
140:36 - our split we would like to say Min size
140:40 - should be zero so save it now we can uh
140:45 - so let's take a look now we can make it
140:48 - 100
140:49 - uh shrink or grow
140:52 - and let's take a look at output that we
140:56 - just got by pasting this code so we have
140:59 - a BG dark layer one which is going to be
141:02 - this black color as our other div and
141:06 - then below that we have our tab which is
141:08 - going to be this description it has some
141:10 - border radius and some text inside as
141:14 - well as some padding top and then below
141:16 - that we have our problem heading which
141:19 - is going to be this one uh like first
141:22 - two sum and then below that we have the
141:25 - category which is going to be this text
141:27 - old if BG Olive inline block rounded 21
141:31 - pixels so background opacity of 0.15 and
141:37 - so these other classes and like right
141:40 - next to it we have this icon that says
141:43 - if you have sold it or not and then we
141:46 - have likes count dislike count as well
141:48 - as our star icon and then below that we
141:51 - have our problem statement AKA
141:53 - paragraphs so below that we have three
141:57 - paragraphs I guess and there is
142:00 - something that you can see here that is
142:03 - this code
142:04 - um HTML tag which gives this effect that
142:07 - it has its own container it has some
142:10 - border uh about the radius for their
142:13 - color and background color that is
142:15 - coming from the global CSS that I said
142:18 - I'm going to be explaining that so it
142:20 - has border radius border width and
142:23 - background color border color text color
142:25 - as well as some font weight font size
142:28 - that you can see here this is what it
142:31 - gives this effect and then we have after
142:34 - the problem statements we have examples
142:37 - in each example is wrapped with this
142:40 - example card
142:42 - um div or with this class and inside it
142:45 - is a free HTML tag so with this pre-tag
142:50 - we have also added some class that is
142:53 - gonna have this background color and
142:55 - then it has border radius so we change
142:58 - the font size so give some more margin
143:01 - bottom and padding the and also all
143:05 - these classes that you can see here and
143:07 - for the strong strong tag that we wrap
143:11 - this input output and explanation we
143:13 - give we change the color as well as the
143:16 - font size
143:18 - foreign
143:20 - after our examples we have our
143:22 - constraints which is going to be an
143:25 - unordered list we can specify that by
143:28 - saying list.disc and we have our
143:32 - constraints some of them inside our code
143:34 - uh tag some of them in our strong tag so
143:38 - that was the component and you can feel
143:41 - free to just pause the video for like
143:44 - 10 to 15 seconds just watch the hourly
143:47 - take a look at the code
143:50 - and most importantly we have this
143:52 - overflow maybe that should be y Auto so
143:57 - do you see that like once we have this
143:59 - content is overflowing it just gives us
144:03 - this uh so scroll bar right it's it just
144:07 - looks like some different page
144:11 - and it is because of that overflow Y is
144:14 - equal to Auto now we can make this
144:18 - bigger
144:20 - so that was the problem description
144:22 - component if there is something that you
144:24 - didn't understand feel free to ask me to
144:26 - Discord server or in the comments
144:28 - and now let's try to build our code
144:31 - editor but before that we would like to
144:33 - have this uh language support as well as
144:37 - settings settings model and then
144:41 - um so this full screen functionality or
144:44 - maybe we will add that icon and then
144:46 - we'll add this functionality and then
144:49 - below that we're going to have our code
144:50 - editor and our test cases so let's get
144:53 - into that
144:54 - so now for this right side we would like
144:57 - to have our playground for this we'll
145:00 - come back to here and change this
145:02 - placeholder with our playground
145:05 - component which we need to create first
145:08 - so inside the work space folder we'll
145:11 - say playground and then inside this
145:15 - folder we'll say
145:17 - playground.dsx and then use tfcd to get
145:20 - the boilerplate and then change the
145:22 - content with playground and then save it
145:25 - come back to here import this with
145:27 - control space and then save it now we
145:32 - are going to see our playground
145:34 - and inside this we would like to have a
145:37 - preference nav bar which is going to be
145:39 - this black section that we can see here
145:41 - we have the language that we are using
145:43 - and then we're going to have settings
145:45 - and full screen icon
145:48 - so for this we will need to create
145:50 - another component which is going to be
145:52 - the preference navbar and it's going to
145:56 - be inside our playground so we'll say
145:59 - preference nav
146:02 - and then you will say preference nav.tsx
146:07 - use our boilerplate and then
146:11 - you might want to say prep nav save it
146:14 - come back to here open a react fragment
146:19 - and then paste our preference snap
146:24 - to save it and we'll take a look at here
146:28 - that we see our preference navbar and
146:31 - now let's try to build this
146:33 - to come back to vs code inside here we
146:36 - will have a lot of classes with divs and
146:39 - buttons
146:41 - so I will paste some code again but it
146:44 - is this time I will be pasting it like
146:47 - blocks by blocks Notch I'm not gonna
146:50 - paste the entire component in one go so
146:54 - first let's give some class names for
146:56 - this it's gonna be flex and items gonna
146:59 - be in the center and then justify
147:01 - between to make them separated and then
147:04 - we'll say BG dark
147:07 - um layer of two height is going to be 11
147:09 - and then width is gonna be full so
147:13 - inside this we're gonna have I think
147:17 - that is gonna be on the left which is
147:19 - going to be our language so let's paste
147:22 - this and again you can grab that from
147:25 - the GitHub I don't know if I need to say
147:27 - this again but let's save this and take
147:31 - a look at it so here we have our button
147:34 - on the left and we have some backgrounds
147:36 - when we hover over that it changes it
147:39 - has some border radius and and padding X
147:43 - padding y so
147:45 - this kind of stuff and here we can see
147:48 - this on Hover we have changing our
147:51 - background color padding X padding y
147:53 - cursor pointer rounded text left maybe
147:57 - we don't even need this because it's
148:00 - already too small
148:02 - so there isn't any change here
148:05 - um yeah so that was gonna be the thing
148:07 - on the left and after this div we will
148:10 - have the other div which is going to be
148:13 - wrapping our right side so that was our
148:17 - left and now we're gonna have the stiff
148:20 - that is going to be containing our icons
148:22 - so for this again I'm gonna paste it and
148:26 - it's gonna be like a blogs by blocks
148:30 - so let's first give some classes to this
148:33 - one it's gonna be Flex items Center
148:36 - and then it's gonna have margin as two
148:39 - and then below inside this we're gonna
148:42 - have our Button as well as and
148:46 - so it is gonna contain an icon and then
148:48 - the text which says settings so save
148:51 - this back to here that we have our
148:54 - settings so when we hover over this we
148:57 - get this tooltip that says settings and
149:00 - it is because it is again
149:03 - um so that should be scale 0 at first so
149:07 - where is it
149:08 - um yeah so scale is zero but when we
149:11 - hover over this group which is going to
149:13 - be this button when we hover over this
149:16 - this settings div is going to be 100
149:20 - scales and then it is gonna have this
149:23 - absolute position
149:24 - so that's why it's gonna be on the right
149:26 - zero and then top five so that will make
149:30 - it to in this position and then we would
149:33 - like to have another so one more this
149:35 - button so let's just copy this and paste
149:39 - it below and it is gonna have
149:42 - it's gonna say full screen and then for
149:45 - the icon you'll click to have ai full
149:47 - screen I guess and outline AI outline
149:51 - full screen save this come back to here
149:53 - now we see this full screen and again it
149:56 - has this
149:58 - um tooltip
149:59 - and now I can give you a real quick tip
150:03 - that we can see here we have two buttons
150:05 - right this is the first one and this is
150:07 - the second one and both of them has the
150:10 - same class names and it is really huge
150:13 - in tailing CSS so we can cut it from
150:16 - both of these and we can create
150:19 - something called components so we can
150:22 - come back to our global.css even at the
150:25 - very bottom of the page or really
150:27 - anything anywhere so we can say add
150:30 - layer and we'll say components so inside
150:34 - here we will try to create our own
150:36 - custom class name so for this we can say
150:39 - it's going to be preference
150:42 - uh button and inside we will say apply
150:46 - and we're gonna paste the classes that
150:49 - we just copied now if we save this file
150:52 - and come back to here let's just copy
150:55 - this as well if we come back to here
150:57 - this class names we can put it like this
151:00 - now it is really clean and it is
151:03 - repeated code we have repeated code
151:05 - previously but we just separated it into
151:08 - this file and then we also have the
151:13 - exact same thing for this tooltip that
151:15 - we can see we have the exact same
151:17 - classes so cut this from here and
151:21 - here we're gonna say preference uh
151:26 - tooltip or maybe preference button Dash
151:29 - tool tip
151:32 - so again it's gonna be the same here
151:34 - preference button tooltip
151:37 - save this file come back to here and
151:40 - then below this we're gonna have our
151:42 - button uh class name it's going to be
151:44 - prefer friends button Dash tool tip and
151:49 - then we'll say apply the classes that we
151:52 - cut and now we save this there isn't
151:55 - going to be any change so it looks like
151:57 - there is but what it says
152:00 - um yeah
152:02 - so what's going on here let me just take
152:04 - a look
152:06 - okay so the problem here is that it says
152:09 - apply should not be used with the group
152:11 - utility so for this we just gonna delete
152:15 - this group from here and then save this
152:17 - file come back to here inside this
152:20 - button we will add this group and for
152:22 - this button as well so we'll say group
152:25 - and the rest should be the exactly the
152:28 - same as I just explained now it is going
152:31 - to work the same that we had previously
152:33 - so what we did let me just uh real quick
152:37 - summary that so instead of having this
152:40 - huge lines of classes and repeat them in
152:44 - a lot of different buttons we will just
152:48 - create our own class Name by pasting
152:51 - that into this apply uh apply layer so
152:56 - this is how we create our own class
152:58 - names with Tailwind CSS
153:01 - all right now that we have added our
153:04 - preference nav bar now we would like to
153:07 - build this
153:08 - um split we will have our coded a code
153:10 - editor on the top and the test cases at
153:12 - the bottom and so it's going to be just
153:15 - like this that we have here and for this
153:17 - it's very obvious that we're going to be
153:19 - using split.js once more but this time
153:21 - it's going to be in the vertical
153:23 - Direction
153:24 - and then as I said we'll be implementing
153:27 - the code editor and then test cases so
153:29 - for this let's come back to split.js so
153:33 - you're going to be using the vertical
153:34 - Direction and it's going to be something
153:37 - like this so it gives us some classes
153:41 - and I have already copied and pasted
153:44 - into the global CSS where the difference
153:47 - is that vertical Gutter and it just
153:50 - gives us a background image that is
153:52 - going to be this Square dots but it's
153:55 - going to be in the horizontal Direction
153:56 - and then also I have added three more
154:00 - classes which is for our which are for
154:03 - our code editor and you'll see why we
154:05 - use this so maybe you can copy and paste
154:09 - this exact file into your repository and
154:11 - you can get it from the GitHub so this
154:14 - is going to be our global.css and here
154:17 - we would like to install some packages
154:19 - that is going to be for our code editor
154:22 - which is going to be the this uh UIW
154:25 - react code mirror that is going to be a
154:28 - code editor for react and additionally
154:31 - we are going to be installing two more
154:33 - packages which is going to be for the
154:35 - JavaScript language support as well as
154:38 - this vs code theme that we can see here
154:42 - um okay for this let's come back to our
154:44 - project and open up a new terminal and
154:47 - then let's say npm install and paste
154:50 - these commands where we'll have react
154:51 - code mirror as well as the JavaScript
154:54 - language that is coming from the code
154:56 - mirror and then the vs code theme so
155:00 - let's install this
155:02 - okay now it has been installed and let's
155:04 - try to wrap this preference snapbar with
155:07 - the div to give some class names which
155:09 - is going to be flags flags of column
155:12 - it's going to have the vertical
155:13 - direction as well as background dark
155:15 - layer 1 and then the position is going
155:17 - to be relative and then below this
155:18 - preference nav bar we would like to have
155:20 - our split
155:22 - so let's import this from react to split
155:24 - and you can have some class names which
155:26 - is going to be height of calculate
155:29 - function full screen minus 94 pixels
155:34 - 94 pixels and then close this as well as
155:37 - you will have our direction to be
155:40 - vertical so that it'll be on top of each
155:43 - other and then for the sizes it's going
155:46 - to be the first container on the top do
155:50 - you see here like this is a bit wider
155:54 - than this bottom section so let's try to
155:57 - yeah so it's like kind of 60 to 40
156:01 - percent so that's why I would like to
156:03 - say 60 to 40 and then here we'll say
156:07 - minimum size it's going to be 60 pixels
156:11 - and you'll see uh once we have this
156:14 - and inside this we would like to have
156:17 - our code mirror but before that let's
156:19 - have some class themes which is going to
156:21 - be with a full and then overflow is
156:24 - going to be Auto
156:26 - so here we'll have our code mirror that
156:28 - is coming from the package that we just
156:31 - installed it's going to be self-closing
156:32 - tag
156:34 - um so it's not going to be react with
156:35 - mirror but
156:37 - so import
156:40 - ant mirror from
156:42 - it's going to be that package that we
156:44 - have here so it's going to be at UIW
156:47 - This Record mirror
156:49 - and close this import that and it's
156:52 - going to have some values or like the
156:54 - props and the first prop could be the
156:57 - value as a JavaScript code and then
157:00 - we'll have our theme that is going to be
157:03 - this code dark that is coming from this
157:05 - package and we import this
157:08 - and then for the extensions which is
157:10 - going to be the language support it's
157:12 - going to have a JavaScript so import
157:14 - this and call that function
157:17 - and lastly we can say for the font size
157:20 - we could have as uh maybe 16 pixels
157:25 - so yeah that's gonna be the first
157:27 - section the section on the top and then
157:30 - the low this div we will have our test
157:34 - cases so let's have it if that is going
157:36 - to be test cases it's gonna be so let's
157:41 - see these cases
157:43 - save it uh come back here inside our
157:46 - localhost and yeah this is exactly what
157:48 - we see
157:51 - okay now let's refresh this so it gives
157:55 - us some error I don't know why it does
157:57 - that so it says Compass composite
158:00 - components
158:01 - yeah
158:03 - so this is not actually what we want
158:06 - um
158:07 - is there anything that is
158:13 - so let me just actually just close this
158:17 - and then npm run Dev again
158:19 - so it can be sometimes like a
158:21 - development errors
158:24 - um let's refresh our localhost
158:30 - and let's go to Tucson page
158:33 - and yeah now we don't have that error
158:35 - let's refresh the page and now it's just
158:37 - gone
158:38 - so do you see that we give some class
158:41 - names in our Global CSS
158:44 - that was this color
158:47 - um yeah this background color as well as
158:49 - we don't have this alt line now if you
158:51 - remove this class and when we click this
158:54 - click do you see there is an ALT line
158:56 - here so this is what we are when on
158:59 - Focus State we remove that this is that
159:01 - class that we have now let's add it and
159:04 - now even if we focus do you see that
159:06 - that outline is just gone and we also
159:10 - give this background here now let's try
159:12 - to remove this
159:15 - and now it should be let's refresh it
159:20 - so now it has this kind of uh like
159:23 - border DC and this is why when we add
159:26 - this it just negate that
159:29 - and yeah this is it so what what are we
159:33 - need to add right now it's going to be
159:36 - the test cases
159:37 - so for this let's come back to our vs
159:39 - code closest Global CSS below our first
159:42 - split so inside this test cases this is
159:46 - going to be our test case container
159:47 - we'll have some class names
159:49 - uh it's gonna be with over full heading
159:52 - X of 5 and overflow is going to be Auto
159:57 - and then now we need to give that uh for
160:00 - the heading of the test cases so we can
160:02 - say maybe a div
160:04 - it's going to be kind of a wrapper and
160:07 - then let's give its class names it's
160:09 - going to be Flex height of 10 items to
160:12 - be on the center and then Space X six
160:16 - and below this you're going to also have
160:19 - one more div
160:20 - and it's going to be the actually so
160:24 - it's going to be kind of again a wrapper
160:26 - so
160:27 - I'm gonna have some class names that is
160:29 - going to be relative and then Flex
160:33 - height of full
160:35 - and flex column justify Center
160:39 - and maybe cursor is going to be pointer
160:42 - and then we'll have a div that it said
160:45 - that is saying like test cases this is
160:48 - going to be that heading and it's gonna
160:50 - have some class names
160:51 - as always it's going to be text small
160:55 - text small font medium
160:58 - uh
160:59 - font
161:01 - medium and then it's gonna have the
161:04 - leading five as well as six color of
161:08 - white and then below this we would like
161:10 - to have a horizontal line which can we
161:13 - have with HR element pack HTML tag and
161:18 - then it's gonna have some class names
161:19 - which is going to be absolute
161:22 - bottom of zero height of 0.5 and then
161:27 - with full rounded full as well as border
161:31 - none and background is going to be white
161:35 - so save it and hopefully it's gonna work
161:38 - and here we got like full width
161:42 - but maybe do we miss the relative
161:45 - positioning
161:46 - so we'll see it's not going to be with
161:47 - full Maybe
161:52 - um so we don't it's maybe width of you
161:56 - can say 12.
162:00 - maybe that could be 16.
162:02 - and yeah this is almost exactly the
162:04 - thing with this one and now we would
162:06 - like to have these test cases boxes and
162:09 - for this let's come back to here again
162:11 - below this
162:14 - um
162:15 - So Below this div we're after the
162:18 - heading so we can say this is going to
162:20 - be our test case heading and we can even
162:25 - shrink this
162:29 - and here we'll have a flex container and
162:32 - below it will have let's say case one
162:35 - and then we're gonna we're gonna build
162:37 - this and then we're gonna copy and paste
162:39 - it
162:42 - so we'll say with a div it's gonna have
162:45 - class names of margin right of two items
162:49 - start and margin top two next is gonna
162:54 - be white
162:57 - and inside this we will have two more
163:00 - divs
163:01 - so this like a lot of wrapping stuff is
163:04 - going on here but this is the classes
163:06 - and the structure that I copied and
163:09 - pasted from the liquid original site
163:11 - this is how they do this so if you don't
163:14 - understand some part of it you can take
163:16 - a look at the code uh for like
163:19 - until you get it so basically and then
163:22 - let's have some class names that is
163:23 - going to be Flex Flex wrap and items is
163:28 - gonna be on the center as well as we'll
163:31 - have a cap of Y of four and then this is
163:35 - where we're gonna have our
163:37 - um
163:38 - so the
163:40 - case one text it's just going to be
163:42 - inside the div let's say case one and
163:45 - it's gonna have really long class names
163:46 - so it's gonna be font medium and then
163:50 - items to be on the center
163:53 - so I think we're gonna give some flex
163:55 - and this is going to be transition all
163:59 - and on Focus we don't have to have an
164:02 - old blind so it's gonna be outline none
164:06 - and then
164:08 - it's gonna be inline Flags
164:15 - FBG dark fill three and then on Hover
164:21 - will change that background color to BBG
164:24 - dark fill of two and there is going to
164:28 - be relative position it's going to be
164:30 - rounded LG and padding X is gonna be
164:33 - four as well as you will have heading y
164:37 - of one cursor pointer
164:39 - and maybe we could say white space no
164:42 - wrap so now let's save this
164:45 - and hopefully it's gonna work and now
164:47 - yes it it works it's working and now we
164:50 - can just copy and paste this case
164:53 - case one so I copied this now I'll say
164:57 - case two
164:59 - and paste it below this and then I will
165:02 - say case three and paste this one as
165:04 - well now let's change the content it's
165:07 - going to be case one case two and case
165:09 - three
165:10 - so this is the output that we got it's
165:12 - exactly the same as here
165:14 - and then below this we would like to
165:17 - have this input output structure where
165:19 - it is basically the example but you only
165:22 - got the input and output not the
165:24 - explanation
165:26 - so we can
165:29 - we can create its own Dev with this
165:32 - structure let's actually cut this up as
165:34 - well so below these test cases where we
165:37 - got here and so text heading so I think
165:41 - it's going to be below this Flex
165:45 - so let's come back to here below this
165:47 - flex and what is this div
165:51 - so it's actually the complete test cases
165:54 - so here we'll have our div with class
165:59 - name of
166:01 - or maybe font to be semi bold and then
166:05 - here we'll have a paragraph that is
166:08 - going to be saying input with pollen and
166:12 - then it's gonna have class names text of
166:14 - small and font is going to be a medium
166:18 - and then margin top is gonna be four as
166:22 - well as text color of white
166:24 - and below this we need to have a div
166:28 - and it's going to be saying the output
166:31 - structure or maybe so it's going to be
166:34 - actually the input itself so it's going
166:36 - to be its nums of so now it's hard coded
166:40 - but we're going to be changing that once
166:42 - we get there so we'll say 2 to the 7 11
166:46 - 15 and the target so you could have a
166:49 - comma and then Target is going to be
166:51 - nine and it's gonna have again some
166:53 - class names they will say so class name
167:00 - it's going to be with or full cursor
167:03 - text
167:05 - and then it's gonna have rounded L key
167:11 - border is it's gonna have a border
167:13 - setting X of 3 and then padding Y is
167:17 - going to be some default value we will
167:20 - say 10 pixels and then we'll say BG dark
167:24 - fill off three
167:28 - and then we will have the border to be
167:31 - transparent
167:34 - the color this color is going to be
167:36 - white and margin top is going to be two
167:38 - so let's save this and do we have now we
167:42 - need to also add this uh output
167:44 - structure below this div it's going to
167:46 - have the exact same classes with the
167:48 - input so it's going to be output and now
167:50 - we can copy this input structure paste
167:54 - it we will say the answer I guess well
167:57 - correlate we'll just put the answer here
167:59 - it's going to be 0 and 1.
168:02 - and that should be it so let's save it
168:07 - yeah this is the thing that we got now
168:09 - we can give some maybe margin bottom to
168:12 - this output
168:16 - or like maybe to this div so we'll say
168:18 - margin y it could it could have like
168:21 - four
168:22 - so now it gave us this uh additional
168:26 - space
168:27 - and yeah so this is the actual the
168:30 - complete uh test case part and the code
168:34 - editor now lastly we would like to add
168:37 - this foot here that we have our submit
168:40 - buttons and for this we can put it's all
168:43 - so we can create its own component
168:46 - so before we build that footer I just
168:49 - realized that I have some typos so this
168:52 - should be Flags uh only Flex not with
168:54 - Dash and that could be with a full
168:57 - because we didn't have that Flex that's
168:59 - why it didn't work now let's save it
169:02 - come back to here that should work as
169:05 - exactly the same width with this one
169:08 - um and also here we can delete this if
169:11 - extra comma and so I think that is going
169:15 - to be it and now we would like to have
169:17 - our editor footer that is going to be
169:19 - our buttons that submit buttons so we'll
169:22 - say editor footer
169:25 - and let's try to import this but before
169:27 - we need to build that and it's going to
169:30 - be inside the playground so I can just
169:32 - say editor footer.sx
169:35 - and I will say tfcd to get the
169:38 - boilerplate and I will just delete here
169:40 - and I want to paste that and you can
169:43 - grab this from the GitHub list I just
169:46 - don't want to write all these CSS
169:48 - classes
169:49 - um that's why I'm doing this here so
169:51 - let's import this icon from the uh react
169:55 - icons so let's save this and let me see
169:58 - if there is anything strange here
170:00 - um so run submit in this console
170:04 - and I think that should be we should be
170:07 - good so we save this and now we want to
170:09 - import this Ctrl b or control space
170:12 - click enter And since this has this
170:15 - absolute positioning it doesn't matter
170:18 - if it is out of the split
170:20 - so or like yeah it's outside of the
170:22 - split and
170:25 - so let's try to take a look at it here
170:27 - and since it is it has the Z index of I
170:31 - guess higher so do we have yes Z index
170:35 - is 10 so the higher the Z index so it
170:38 - means it's closer to screen that's why
170:41 - it's on top of this uh test cases
170:45 - so yeah that should be the complete UI
170:47 - and let me just take it uh just do a
170:50 - quick summary so inside the playground
170:52 - where we had only the preference navbar
170:55 - which was this right we have had our
170:58 - settings and full screen buttons and as
171:00 - well as the language support and below
171:03 - that we have added our code mirror which
171:05 - was a package that we installed uh from
171:08 - the npm and then for the language
171:10 - support we added JavaScript which was
171:13 - also a package and then for the theme we
171:17 - installed the vs code to dark now there
171:19 - is a lot of other themes that you can
171:22 - take a look at from the documentation so
171:25 - I like that part for you for your
171:27 - research and if you want to change it
171:30 - maybe you would like to have some
171:31 - different themes you can do that and so
171:35 - we give this split so that we have our
171:37 - vertical uh split and on top we had our
171:41 - code mirror and below that so the first
171:45 - it is the top one and the below one is
171:48 - the so the second tip is our test cases
171:51 - so we added our test is heading which
171:54 - says test cases and below that we have
171:56 - our cases and then our editor footer
171:59 - that we have here
172:03 - foreign
172:06 - so we also said that this split is going
172:09 - to have the sizes of 60 to 40 percent
172:12 - and minimum size is 60 pixels so this is
172:16 - pixels I guess because when you shrink
172:19 - this it doesn't go it doesn't get like
172:21 - zero height but here if you try to
172:25 - shrink this you can make it until zero
172:27 - because we said that mean size is going
172:29 - to be zero and oops there is something
172:32 - strange going on here so we have
172:34 - overflow and so I just realized this
172:38 - accidentally and that should be from
172:41 - here maybe we could say overflow X so
172:46 - like when you have something like this
172:48 - this problem so what is happening is
172:50 - that this content is overflowing our uh
172:54 - so our flowing our page which is going
172:57 - to be that container that we have here
172:59 - so we can say overflow X so it's X
173:02 - Direction you could say hidden so
173:04 - overflow flux so let's save this and now
173:09 - it should be gone so even though it's
173:11 - overflowing we don't get that
173:13 - um so we don't get that the scroll bar
173:17 - on the bottom so that should be it and
173:20 - now I think it is time for us to add the
173:24 - problems and to render that and then we
173:27 - would like to submit and fetch these
173:30 - data now it is hard coded and also we
173:33 - had this value from the inside the code
173:36 - mirror where now this value could be a
173:39 - boilerplate code so once so let's try to
173:42 - just do this and then I will explain so
173:44 - we can say boilerplate and we can say
173:49 - so open up back ticks
173:51 - and then we'll say function is going to
173:53 - be two sum which is going to have the
173:55 - nums and Target so click enter go to the
173:58 - bottom and then we will click to press
174:02 - the space two times and to open up this
174:05 - uh
174:06 - command and it will say write your code
174:10 - here and then below this you would like
174:12 - to close this function and now let's
174:15 - save this okay so this formatting it
174:17 - should be exactly the same here
174:19 - because we will paste this into this
174:22 - code mirror so for the value it is going
174:25 - to be this boiler kit so save it now
174:29 - once our user refresh this page or once
174:32 - they get to this page they will first
174:34 - see this boilerplate code so that they
174:37 - know what kind of function they should
174:39 - type in
174:40 - and again this boilerplate is right now
174:43 - is hard coded but we would be
174:46 - implementing that soon and we can even
174:48 - close this with this uh semicolon
174:54 - so yeah that should be it
174:58 - now let's take a look at our data
175:00 - handling and for this I have draw some
175:04 - diagram that we can see here and now you
175:07 - might think that we will add all of
175:09 - these data in the database but this is
175:13 - not the case actually I just wanted to
175:15 - mix them and to make it a bit a bit more
175:18 - easier and interesting so we are gonna
175:22 - have both our DB and we're gonna have a
175:25 - local folder and we're gonna have some
175:27 - files problem files where we'll have
175:30 - them each problem in its own file so
175:33 - let's first take a look at our database
175:35 - so we will have edit problems uh
175:39 - collection and then we're gonna have our
175:41 - users collection and for our users we
175:44 - would like to store their display name
175:46 - email their liked problems which
175:48 - problems they liked and dislike problems
175:51 - and so start problems solve problems and
175:55 - when this user is created so this is not
175:58 - actually a mandatory these two Fields
176:00 - but it is just kind of a best practice
176:02 - to have maybe in the future you would
176:05 - like to add the Prof profile page into
176:08 - this application and you would like to
176:10 - show this user has joined let's say like
176:14 - one year ago then you you would like
176:16 - like to fetch that data from this
176:19 - created ads field and then you will have
176:22 - our problems collection for each problem
176:24 - we will have its ID title category
176:28 - difficulty so likes count dislikes count
176:31 - and video ID as well as the link so
176:35 - video ID and Link is optional some of
176:38 - them will have the video solution ID and
176:40 - some of them will not have uh so will
176:43 - not have that video ID and some of them
176:45 - will have the link and some of them will
176:47 - not so it looks kind of messy but like
176:51 - when you click this merge intervals in
176:53 - our original demo it's since it it is
176:57 - not soluble within the this demo that
176:59 - will take you to the lead code original
177:01 - problem as we already mentioned in the
177:04 - intro so this is the code
177:06 - um so this field just takes us to the
177:10 - link where this problem is originally
177:12 - stored it's going to be the lead code
177:14 - link
177:15 - so with this long explanation
177:18 - and so we can go back to our local and
177:23 - in our local we will only have our
177:24 - problems we will not have any users data
177:27 - because that should be as Dynamic that
177:31 - is going to be always changing right
177:33 - they like problems uh each user will
177:36 - have it's going to be changing and for
177:38 - the problems we will have some static
177:41 - data and what is that so the problem
177:43 - statement which is
177:47 - so let's take a look so this is the
177:49 - problem statement so this is always the
177:51 - same we almost never change this so we
177:54 - would like to store this in our local
177:56 - and so
177:58 - so that we can immediately render this
178:01 - portion and then we have our examples
178:05 - also it's going to be for the test cases
178:07 - so you will have our constraints the
178:10 - order and we're going to be using this
178:12 - order to make this navigation when you
178:15 - go to next one it somehow calculates
178:18 - what is the order of this one so it's
178:20 - two when you go to next one the order
178:22 - should be three that's why we have that
178:24 - order and we have that starter code
178:27 - where we just did this boilerplate so
178:30 - this is going to give us so that
178:32 - boilerplates all of these is boilerplate
178:34 - for the linked list problem and then we
178:37 - also have a Handler function and this is
178:41 - going to be the function
178:43 - where we will test the user's code now
178:46 - let's say I came here and I write some
178:49 - code for this to some problem and when I
178:52 - try to submit this this Handler function
178:55 - the this Handler function is gonna
178:58 - evaluate this code if the user uh the
179:01 - solution of user is correct or not
179:04 - and that's why we are going to store
179:07 - this Handler function in our local and
179:10 - then we will have the starter function
179:11 - name which is kind of strange field but
179:15 - I will explain that and it's definitely
179:17 - useful and once we use it I will explain
179:19 - that and this is going to be our
179:22 - database and local uh so the files in
179:27 - collection structure this is where how
179:29 - we are gonna store our data
179:32 - so again why we're having this both DB
179:35 - and local because we would like to have
179:37 - Dynamic data on the DB where the likes
179:40 - and dislikes and maybe the video ID link
179:43 - of the problem will change over time and
179:46 - as well as the users like disliked this
179:49 - start solved problems uh count so for
179:53 - this we would like to have that in our
179:54 - DB and the other stuff we will put them
179:57 - in our local so that was a really long
179:59 - explanation now let's try to First add
180:03 - our problems into our local and then
180:06 - let's work on the DB
180:09 - all right now we can collapse everything
180:12 - and close everything and here we would
180:15 - like to have our utils folder
180:18 - and then inside here we'll have our
180:20 - problems data for this I create problems
180:23 - folder and then we'll have all of our
180:26 - problems here so the first one is going
180:28 - to be two sum I will separate it by a
180:31 - dash so I will say two dash sum dot yes
180:35 - and you need to make it uh like it
180:39 - should have this file name as exactly
180:42 - like this because we're going to be
180:44 - using this 2-sum as our ID so for this I
180:49 - will paste something but before that
180:52 - let's import a new package we will say
180:54 - npm install insert and this package is
180:58 - needed because we're going to be using
181:00 - that to compare if the function that
181:03 - user passed in gives us the correct code
181:07 - so it is for comparing stuff
181:10 - and let's import at the third function
181:13 - let's insert from excerpt and then so
181:17 - I'm gonna paste some stuff here and I
181:19 - will explain that so we'll come back to
181:21 - here in a little bit so here we have our
181:24 - two sum problem object where we have its
181:28 - ID it is two sum we have its title it is
181:32 - 1.2 sum and then so it's so this one is
181:36 - it's uh the problem order so let's say
181:39 - and then we have the problem statement
181:41 - which is going to be a string we will
181:43 - fill here so we'll have our examples
181:46 - it's going to be objects an array of
181:49 - objects or the objects and then we'll
181:52 - have our constraints and Handler
181:54 - function is going to be the function
181:56 - that is going to check if the user has
181:59 - the correct code or not and then starter
182:02 - code is going to be that boilerplate
182:05 - so here where we had the spoilerplate is
182:09 - going to be that starter code and then
182:12 - we have the order for this navigation
182:16 - as well as we have the starter function
182:18 - name which I said that I will be
182:21 - explaining that but I will explain that
182:23 - in a little bit
182:24 - and then so now we have the problem type
182:27 - we use this to make our code save type
182:31 - save so each problem will have the ID
182:34 - title and type of them is here types of
182:37 - them is here so the ID is going to be
182:38 - string title is going to be string and
182:41 - so on and so forth that you can see here
182:42 - our examples is going to be array of
182:45 - example which it is another type each
182:48 - example will have the ID as number input
182:52 - text as string output text as string and
182:56 - some of them will have explanation and
182:58 - some of them will not so that's why it
183:00 - is optional with this question mark and
183:03 - some of the examples will have image and
183:06 - that's why this is optional as well so
183:09 - when we take a look at to the reverse
183:12 - linked list problem it has this image
183:14 - explanation but twosome doesn't so
183:18 - that's why these two fields are optional
183:24 - so the Handler function is gonna take a
183:27 - function a callback function which is
183:30 - the function that users types in so
183:34 - this is the that callback function that
183:37 - when we submit that we send this as
183:39 - callback function all right so that FN
183:42 - so this function is that callback
183:45 - function so I think I said that like 100
183:47 - times in the last 10 seconds and then it
183:51 - is going to return either so it's going
183:53 - to return a Boolean and this Handler
183:55 - function is either going to be the type
183:57 - of string or the function which you'll
184:00 - see uh once we get there and now for
184:03 - this problem statement this is going to
184:06 - be string and we're going to be taking
184:08 - this from the problem description
184:10 - so here let's come back to this problem
184:13 - statement where we had these three
184:15 - paragraphs and let's copy them one by
184:18 - one we will paste them as string but
184:21 - then we will be concatenating them or
184:24 - we're going to be rendering them as the
184:26 - HTML so just delete all these white
184:30 - spaces that we have here hey guys this
184:32 - is me from the future you don't actually
184:34 - need to remove that white spaces all you
184:37 - need to do is just take all these
184:38 - paragraphs and copy them and then paste
184:41 - it into this problem statement string
184:43 - and then you can save it and then we're
184:46 - going to do the same thing for
184:47 - constraints you can come back to here
184:50 - and just copy all these list items in
184:53 - one go and then paste it into here so
184:55 - the formatting is doesn't really matter
184:57 - because it is HTML and we're going to be
185:00 - rendering that so that should be good
185:03 - and let me see if there is anything that
185:05 - we need to add and it is going to be
185:08 - this uh starter function or the starter
185:11 - code so we can create this by coming
185:14 - here we'll say const Charter code
185:18 - um so maybe we could say starter code
185:20 - for two sum and it's going to be in the
185:22 - JavaScript language so you can either
185:25 - add this or not I'm not gonna add that
185:27 - so we'll say
185:28 - yeah open up our bank text we'll say
185:30 - function
185:33 - and it'll take two parameters which is
185:35 - going to be the nums and Target
185:38 - so that function should have the name as
185:41 - two sum and then here we will open this
185:44 - come here you'll say two spaces write
185:48 - your code here and then close this with
185:51 - semicolon and copy the slider code to
185:54 - some paste it into here so it's going to
185:58 - be referencing this variable
186:00 - and then so what do we need else for the
186:03 - Handler function so we could say uh
186:06 - Handler to some uh yeah that could be
186:11 - our function name so we can come back to
186:13 - here again we'll say const
186:15 - Handler to some is going to be taking a
186:18 - function
186:20 - and that function is going to be our
186:22 - callback function in here we would like
186:25 - to have a try catch if there is any
186:27 - error we will throw that error we'll say
186:29 - Throw
186:31 - um
186:32 - throw near error as this error that we
186:36 - got oops new error
186:39 - and then it will take this error this
186:41 - error could have the type of any
186:43 - and then we might want to say
186:46 - console.log
186:47 - um to some Handler
186:50 - to some Handler function error
186:55 - and inside the try catch actually inside
186:58 - the try this is where the logic is going
187:00 - to happen so here we will have all of
187:03 - our test cases so we'll have our nums
187:05 - array that is going to be an array of
187:07 - arrays so each of these array will be
187:10 - one of our this case nums array so this
187:15 - is
187:16 - let me just actually take this from the
187:19 - as default and then we'll take a look at
187:22 - that
187:23 - so we will also have our targets and
187:26 - then lastly we will have our answers so
187:29 - you can say const
187:32 - answers so it's going to be an array for
187:35 - the first uh so for the first test case
187:38 - we will have 0 and 1 or the second one
187:40 - we'll have one and two and for the last
187:43 - one it's going to be zero and one in
187:45 - here
187:47 - so
187:49 - so in our first example we had this nums
187:52 - array so let's take a look at so it is 2
187:55 - 7 11 15 and Target is 9.
187:58 - so 2 7 11 15 Target is 9 for the first
188:03 - one right and then answer for the first
188:06 - nums was zero and one so if you take a
188:10 - look at the output this is zero and one
188:12 - and for the second one we have we have
188:15 - three two four and Target is six and the
188:19 - answer was one and two so three to four
188:22 - is our nums array our Target was six and
188:25 - the output was one and two that we can
188:28 - see here so this is what it is each
188:32 - index so the first one all of these
188:36 - first one is going to be uh related with
188:38 - each other and then we will take all of
188:42 - these uh nums so we'll say four let I
188:46 - starting from zero and we will Loop
188:50 - through these nums and for each of them
188:52 - we will call this uh test cases with the
188:57 - user's function and we will pass the
189:00 - Target and then we will check if the
189:02 - result is equal to
189:05 - is equal to this answer so this result
189:07 - is what we got from the users code
189:10 - so let's just type it result is the
189:14 - output of the user's function and
189:19 - so the answer is the expected output so
189:22 - we check it here if there is if this is
189:25 - correct we will at the end of this for
189:28 - Loop we'll say return true but otherwise
189:30 - it'll throw some error we will fetch it
189:33 - and we will return that
189:35 - so I know it is kind of uh actually it's
189:39 - pretty complicated but
189:42 - um let's just quickly Retreat so we have
189:44 - our Handler to some function this is
189:47 - gonna check if our users has the correct
189:50 - code so it checks if the user has the
189:55 - correct uh answer or the correct code
189:59 - so
190:00 - this is gonna take a callback function
190:03 - so this FN FN is the Callback that user
190:09 - user's code is passed all right so this
190:12 - FN is user's code and we got our test
190:15 - cases so this first one for our nums and
190:19 - the target is 9 for this array and the
190:22 - answer is 0 and 1 for this nums and
190:26 - Target and these is for this all right
190:31 - and this one is for this I think you got
190:34 - that part and then we are looping
190:37 - through all test cases the loop all
190:40 - tests to check if user's code is correct
190:45 - so result is to
190:48 - n was the function that users code right
190:51 - this is the user's code inside that code
190:53 - we pass this test cases and we got a
190:57 - result and then we check if it is equal
191:00 - to so the answer is equal to that result
191:04 - and if so we will at the end return true
191:07 - otherwise we will get an error so
191:10 - basically this is what we are doing here
191:13 - okay so now that we got ours through
191:16 - some file
191:18 - um now we are ready to render this but
191:20 - first let's just create all of our
191:22 - problems into our this problems folder
191:25 - for this I would like to come here into
191:28 - this problems folder I want to have my
191:30 - next problem which is going to be a
191:32 - reverse length list dot yes now I will
191:36 - paste the code for here and let's just
191:39 - explain that and before that let's just
191:42 - uh take this problem type
191:45 - so cut this from here inside the two sum
191:48 - and inside utils let's create a type
191:51 - folder so let's say the problem
191:55 - and that yes so let's paste it and
191:58 - Export this type uh from here save this
192:01 - file and then come back to into two sum
192:04 - let's import these from the clips
192:08 - and okay so now this file doesn't have
192:10 - any errors so save this and
192:15 - so we can close this and come back to
192:17 - here inside that now we are importing
192:19 - this problem type as well so let's first
192:23 - just take a look at here so we have our
192:26 - reverse linked list uh object that we
192:29 - had for the twosome just like that so we
192:33 - had our two sum object and now we have
192:35 - our reverse link list object so this is
192:38 - going to be the problem data here so we
192:40 - have the ID title we have the problem
192:43 - statement which is just a basic or the
192:46 - normal a paragraph or the HTML that
192:49 - we're gonna render so we have our
192:52 - examples and so here we have something
192:55 - additional which is going to be the
192:57 - image which I will provide you in a
192:59 - minute and then we have our other
193:01 - examples which has ID input text and
193:04 - output text and then you have our
193:06 - constraints
193:08 - which is again just a normal uh so to
193:12 - say list items and then what do we have
193:15 - we have our Handler function that is
193:17 - going to check if the user's code is
193:19 - correct or not we have our starter
193:22 - function so starter code which is going
193:25 - to be that boilerplate
193:28 - so if it let's take a look so this one
193:30 - and in our demo if you take a look at it
193:33 - so this is going to be this portion
193:35 - where we have first the kind of
193:38 - explanation the output so the input
193:41 - structure and then the function name so
193:44 - this is that boilerplate code and then
193:47 - we have our Handler function so we have
193:49 - starter function name we have the order
193:52 - so let's just take a look at this list
193:55 - item and here we have this class because
193:58 - it is going to be rendered as HTML so it
194:02 - is not class Name by the way we should
194:03 - fix this inside here as well so select
194:08 - all these class names by clicking Ctrl D
194:11 - and then just delete that uh so the name
194:15 - portion so now that should be good
194:18 - uh we can close this to some
194:21 - in here the Handler function is reverse
194:24 - linked list JS function so it reverse
194:27 - and cost Handler so what is happening
194:30 - here is that we have some tests so this
194:33 - is the input linked list and the answer
194:36 - is it is in reverse order and so we have
194:40 - create linked list function and it use
194:43 - this class set we just initialized it is
194:46 - because JavaScript doesn't have
194:50 - um so the link list data structure by
194:53 - default this is why we add this linked
194:56 - list class to emulate a linked list in
194:59 - JavaScript so JavaScript doesn't
195:03 - have a built-in linked list class so
195:06 - we'll create one and what this does it
195:09 - it creates a linked list a linked list
195:13 - from an array so here we call this
195:17 - creating this with the test of let's say
195:20 - the first one so it creates a linked
195:22 - list from this array and then so what
195:25 - this does it just get returns an array
195:28 - of values from a linked list
195:30 - rate it returns an array of values yes
195:33 - this values is array and
195:36 - so it returns an array of values from a
195:39 - linked list and let's take a look where
195:41 - do we use this
195:42 - so get list values from the results
195:45 - whatever the result is and then it
195:48 - Compares it with this answers the so
195:51 - whatever the I is so it's going to look
195:54 - through all these tests and answers if
195:57 - there is any error it'll uh so it'll
196:00 - throw that error and it will catch that
196:02 - in the front end and also if there if
196:06 - all of them pass so you'll return true
196:09 - um so this is basically this file the
196:12 - idea the logic is exactly the same as
196:14 - the previous problem which was to some
196:17 - but the implementation details is a
196:20 - little bit harder because as I said we
196:23 - need to create our own linked list class
196:25 - to emulate uh dell includes data
196:27 - structure so with this now we can save
196:30 - this and now let's try to add our SEC so
196:33 - the third problem which is going to be
196:35 - Jump game that yes
196:39 - so now I'm gonna paste the jump game
196:41 - problem here so again the same idea we
196:44 - have the ID title problem statement
196:46 - which is HTML and we change this class
196:51 - names to class and then we have our
196:53 - examples we have our explanation
196:56 - um inside this examples input output
196:58 - text as well as our constraints uh
197:01 - starter code which is going to be this
197:03 - boilerplate code and then we have our
197:06 - Handler function starter function name
197:08 - and then the order so the Handler
197:10 - function let's take a look what it does
197:12 - it takes the user's callback and then it
197:16 - has some tests and depending on that
197:18 - it'll either return true or false so
197:21 - this one is relatively easier than these
197:24 - two other previous problems and if there
197:27 - is any error we will throw that
197:29 - otherwise we will say true which means
197:31 - that the user's code is correct
197:34 - so and I forgot to give you the images
197:37 - and now let me just do this so inside
197:40 - the this utils problems folder we will
197:44 - create our images folder and now I will
197:46 - copy that images and paste it and feel
197:49 - free to get them from the GitHub repo so
197:52 - now I have pasted them we have the
197:54 - reverse linked list image and then we
197:57 - have the search 2D array or the Matrix
198:01 - and then we have this other image these
198:04 - both images is for this problem that we
198:09 - have this image and then we have this
198:10 - one
198:11 - and then
198:13 - what are we doing here is that we are
198:15 - importing that example from this images
198:18 - folder which is the reversing list jpeg
198:23 - and then when we provide it into here we
198:26 - say
198:27 - example.source so this is how it works
198:30 - it all reference to that image
198:33 - and now we added our Jump game problem
198:36 - as well now let's add our fourth problem
198:40 - so which is going to be the valid
198:42 - parenthesis valid parentheses so we'll
198:45 - say valid Dash parent disease dot uh yes
198:52 - so I copy that I'm gonna paste it so
198:55 - again the same thing ID title problem
198:57 - statement examples and constraints
199:01 - Handler functions Sutter code which is
199:03 - going to be the spoilerplate we have the
199:06 - Saturn function name and then the order
199:08 - and inside the Handler we take again the
199:11 - Callback the user's function and then we
199:14 - Loop through this test with the answer
199:17 - we check if all of them passes if if so
199:21 - we will return true otherwise we're
199:22 - gonna catch that error and throw that so
199:26 - save this and now the last problem which
199:29 - is going to be so it should be search a
199:33 - 2d metrics let me just actually copy
199:35 - this name
199:37 - um like this and then come back to here
199:39 - a create new file dot yes
199:43 - and now I'm going to copy and paste it
199:46 - so now I paste it and again ID title
199:50 - problem statement examples we have
199:52 - images which we are importing that as
199:55 - example one and example two and these
199:58 - are these images and then we have our
200:02 - boilerplate code uh as always and then
200:05 - we have Handler as well as the starter
200:08 - function name and then the order
200:10 - so inside our uh so we can delete this
200:15 - console log inside our Handler we are
200:17 - again looping through the tests and
200:20 - answers and we are checking if it
200:23 - eventually it's gonna return true or
200:25 - it's gonna uh throw an error so with
200:28 - this I think we are ready with our
200:31 - problems local data that I showed you in
200:34 - the diagram and now we can try to render
200:38 - that in our code editor or like in the
200:41 - problem page
200:43 - so for this we would like to go to
200:45 - inside SP ID and here we would like to
200:48 - do
200:49 - um so first we want to fetch that data
200:52 - that we just created right so we need to
200:54 - attach the
200:56 - HD local data and for this I want to use
201:02 - something called Static site generation
201:04 - and what it what it really means is that
201:07 - so SSG so the pages will be
201:11 - pre-generated on the server so when we
201:14 - take a look at our demo so let's go to
201:17 - home page and now if I try to go any of
201:21 - these problems Pages it is not going to
201:23 - have any loading state it will
201:25 - immediately render something to the page
201:27 - so it is going to be like super fast so
201:30 - when I click the jump game so do you see
201:33 - that everything is already rendered
201:35 - because that job is done for us in the
201:38 - server when we build our project so when
201:41 - I go to the two sum page so it's all
201:43 - already built it already rendered and so
201:47 - there is only one loading state which is
201:49 - going to be to fetch these data from the
201:51 - firestore so this is where when I click
201:54 - this do you see that for like one second
201:56 - it has that loading State and this is
202:00 - the client-side fetching and static side
202:03 - generation in like we mix them so to use
202:08 - static side generation in next.js we
202:11 - have two different functions the first
202:13 - one is get static pads so get static
202:19 - get static pads so what this does is it
202:24 - creates us the pads that should be
202:27 - um it's gonna give us the dynamic routes
202:30 - that should be pre-generated uh on the
202:34 - server so for this so let me just type
202:38 - actually and then let's say export so
202:41 - it's going to be an async function and
202:43 - it's going to be get static pads so here
202:46 - we would like to have our pads and it is
202:49 - going to take
202:50 - who's going to be a ray actually and
202:52 - then it'll have objects so let me just
202:55 - type it so we'll have cons to pads and
202:58 - we will use
203:00 - object.keys to get the keys of that and
203:03 - actually we didn't build it okay so
203:05 - inside these problems I want to have an
203:08 - index uh index.ts so here I'm gonna
203:12 - export all of these uh problems so for
203:16 - this I'm gonna say export const problems
203:20 - and then it's going to be an object
203:22 - where we're gonna have uh so let's say
203:25 - the idea of the problem is going to be
203:27 - two sum and then it's going to be to
203:29 - some problem that we are exporting from
203:32 - the to some uh file so this is going to
203:36 - be that and then for the reverse link
203:38 - list we're gonna have this object
203:40 - reverse link list for the jump game
203:42 - we're gonna have this constant and so on
203:45 - and so forth so let's go to inside this
203:48 - index and then now we're gonna have that
203:51 - reverse uh linked list we're gonna
203:54 - import this and then we're gonna have
203:57 - the jump game so let's put this comma
203:59 - here
204:00 - and then we will have the jump Dash
204:03 - jump Dash game and it is going to be
204:07 - that jump game constant and then we're
204:10 - gonna have so search a to d so what did
204:16 - we call it search a 2d Matrix
204:19 - and then we will import this especially
204:22 - 3D metrics not the Handler but the
204:25 - function itself and then eventually we
204:28 - will have
204:29 - so I think we skipped one which should
204:33 - be the valid parenthesis so order does
204:36 - matter really uh we could put it like
204:39 - this
204:40 - uh so we could put it like this it
204:42 - doesn't really matter because this is an
204:44 - object uh not an array so now uh we can
204:48 - create a tip for this so we'll say
204:50 - export or actually we don't need to
204:52 - export we could say interface so
204:54 - basically interface is the uh generally
204:57 - used uh in the same way in an object uh
205:01 - of course there are some differences uh
205:04 - but uh it would be I think something
205:07 - like Advanced if we take a look at that
205:09 - for this I'm just gonna show you how you
205:12 - use interface so for this I'm going to
205:14 - create an interface of problem math
205:17 - um
205:18 - so what it really means is that this
205:21 - problem is gonna have the key as string
205:23 - and then the value as the problem type
205:27 - which we're going to import from the
205:29 - types and now we can say this problem is
205:32 - going to be the type of for the its
205:35 - interface is going to be the problem map
205:37 - so with this you are ready and now we'll
205:40 - say object.keys we are going to get all
205:42 - of these keys in each of these Keys is
205:45 - going to be our one of our route okay
205:49 - like do you see we have reverse linked
205:51 - list and then so this is that for
205:54 - Traverse like this we have two sum Jump
205:56 - game right so we have two sum we have
206:00 - Jump game so we are giving this Keys
206:03 - into our static paths so we are saying
206:06 - to this function you need to
206:09 - pre-generate Pages for these routes okay
206:12 - so so far we have only five of them so
206:16 - we're gonna say object.keys we will say
206:18 - uh the problems which is coming from the
206:21 - utils problems not from the mock data
206:24 - and then what are we gonna do so we will
206:27 - try to now we need to map this to get an
206:30 - array and
206:33 - for each key we will say uh we need to
206:37 - return an object actually so that object
206:39 - is going to have the params field and
206:43 - then for this prems field it should also
206:45 - be an object we will say the PID is
206:49 - going to be that key and PID is so it is
206:53 - PID because this is what our file called
206:58 - and then we'll say key
207:01 - and then at the end we will return an
207:04 - object so we're just going to be the
207:06 - paths and it's going to be like this for
207:10 - the pads we are returning this array or
207:12 - we can simply put it like this and then
207:15 - for the fallback we will say false which
207:18 - means that don't
207:20 - um so when we go to a page so let's say
207:23 - we have the jump game too
207:25 - since we didn't give this Jump game 2 to
207:28 - this pads right we don't have Jump game
207:30 - 2 here so fallback means means is that
207:34 - if you got a URL that is not
207:37 - pre-generated return 404 now Jump game 2
207:41 - is not inside the pads array if I try to
207:44 - go there go there I will get this 404
207:47 - error so this is what fallback means
207:50 - and then now that we got our pads we
207:53 - need to have another function which is
207:55 - going to be get static props and it
207:58 - basically fetches the data so I will say
208:01 - export async function it's going to be
208:05 - get static props and it takes some prams
208:08 - and you'll see what it what it is
208:11 - so inside the prems object we have the
208:14 - URL which is going to be that PID so we
208:17 - can
208:18 - restructure that we'll say PID from the
208:22 - params
208:23 - and then what are we gonna do we will
208:26 - try to fetch the data so it will say
208:28 - const beta
208:30 - or maybe we could say the problem and it
208:33 - is going to be that problems so problems
208:37 - uh to PID
208:39 - and now what we did so when we go to the
208:42 - twosome page Okay so
208:46 - Dash to some
208:49 - like this when we go to to some page so
208:52 - that PID is now the two sum and from
208:56 - this problems object we are
208:59 - fetching this to some which is going to
209:01 - be that constant that object and then
209:05 - now we are we are going to say if there
209:08 - is no problem okay if we couldn't find
209:11 - it we will try to return not found to
209:14 - true to give 404 error but otherwise we
209:18 - will say return an object which has the
209:21 - props
209:23 - um so Props and it's also going to be an
209:26 - object and here we will return the
209:28 - problem which was this data and now we
209:32 - can take the problem from here and we
209:36 - can
209:37 - surrender that data so here we have some
209:40 - typescript errors for this params we can
209:43 - give a type or maybe we can immediately
209:46 - say that this cramps is going to be an
209:49 - object that has the fields of paramet
209:52 - and then it's also going to be an object
209:54 - with the PID to be the type of string
209:59 - and so we got out of that error and now
210:03 - let's try to save this so this problem
210:05 - is going to be what we are fetching in
210:07 - our component or the page so we will say
210:11 - get the problem so let's try to just
210:14 - import this
210:16 - or like console.blog
210:19 - y problem not importing
210:21 - and we can create our type which will
210:24 - say the problem is going to be the type
210:26 - of problem that we had uh problem
210:30 - so import this now let's try to see that
210:33 - in our console
210:35 - so go to localhost
210:37 - open up our console whatever we're gonna
210:39 - see try to refresh our page
210:43 - okay so we got a serializing error and I
210:46 - forgot to mention you
210:48 - so we have a Json data here right so
210:51 - this problem is Json or like the
210:54 - JavaScript object notation in here uh so
210:58 - Json doesn't expect or doesn't have the
211:02 - support for function okay so function
211:05 - cannot be serialized as Json for this we
211:08 - would like to get this problem dot
211:11 - Handler function which was function
211:13 - right so it was type of function and we
211:16 - want to make this string
211:18 - so let's take a look at that and let's
211:20 - go to inside the valid parentheses so
211:23 - that Handler function is actually a
211:27 - function that you can see here and now
211:30 - we we convert we are converting this to
211:32 - string
211:34 - to get out of that error and inside our
211:37 - types into the problem we said that it's
211:40 - either going to be a type of string or
211:43 - it's either going to be a function this
211:45 - is the reason uh why we are doing this
211:49 - so let's go back to our PID and then
211:53 - so let's save it again to get rid of
211:57 - that error
211:58 - and now in our console we see that
212:01 - object and now we have our constraints
212:04 - examples Handler function and all the
212:07 - other uh related data
212:10 - so here what I would like to do is so we
212:14 - want to put this data into our workspace
212:16 - right so let's just uh properly link
212:20 - that so it's going to say problem is
212:22 - gonna be the problem and let's go into
212:25 - the workspace
212:27 - so we will take that problem
212:30 - and it's going to be it'll take the
212:33 - problem
212:34 - as a type of problem
212:38 - and first let's build to maybe the
212:41 - description side so the left side we
212:43 - will say get the problem it's going to
212:46 - be this problem so we are still passing
212:48 - this prop and open the problem
212:51 - description
212:52 - we will take a prop which is going to be
212:56 - the problem as type of problem
212:59 - um so that should be the problem coming
213:02 - from the utils and then we will
213:06 - um restructure this and then now what do
213:09 - we have here so for the problem title we
213:12 - can basically say that it's going to be
213:14 - a problem dot title
213:17 - and then what do we have else so
213:20 - difficulty we'll get from the database
213:23 - uh even though we can put it into the
213:26 - problem object so let's say here we
213:29 - could also put a difficulty as like the
213:34 - medium or basically we could put the
213:36 - difficulty here but I want to put it
213:38 - into DB and if you want you can put it
213:41 - into this object as well
213:43 - and now what do we have else so this is
213:47 - the kind of like this icons and so this
213:51 - is the part we're all gonna have our
213:53 - problem statement
213:55 - so to render a string is HTML we could
213:59 - do something like something called Uh
214:02 - set dangerously inner HTML so for this
214:06 - so we had three paragraphs which is the
214:09 - exact same object that we had here so
214:12 - inside the object uh constraints or the
214:15 - problem statement so it is this
214:19 - um
214:19 - so this paragraph has one string and
214:23 - then we can delete these three
214:25 - paragraphs and we'll create a div
214:27 - self-closing div and it's gonna have set
214:31 - dangerously
214:33 - um so it is set inner
214:36 - dangerously set in HTML I'm sorry so
214:39 - this should be that prop name and then
214:41 - for this we will put the problem that
214:45 - problem statement now if we save this
214:48 - and what is the error string is not
214:51 - assignable so that should be
214:55 - so that should take also an object with
214:58 - this HTML tag underscore underscore HTML
215:01 - and then problem dot problem statement
215:05 - so that should be this structure inside
215:08 - the self-closing tag we have digital C
215:10 - set in HTML value or the prop and then
215:14 - we have an object inside that object we
215:18 - have the HTML as the key and then
215:21 - problem dot problem statement as the
215:24 - value so save this come back to here and
215:29 - so we don't have reading type title why
215:32 - is this
215:34 - so it should be some error from this or
215:37 - maybe a problem that
215:41 - title uh
215:44 - so let's just optional changes to get
215:46 - error but maybe we didn't save this okay
215:48 - we didn't save the PID that's the error
215:50 - we are getting so now
215:55 - okay now that we got our problem title
215:58 - that is coming from our object and we
216:01 - are rendering our problem statement now
216:04 - let's do the same thing for our examples
216:07 - so for this I'm going to come back to
216:09 - this example section and actually I'm
216:11 - going to delete this example to in
216:13 - example three
216:15 - and then so since this is this
216:17 - hard-coded I'm just gonna actually put
216:20 - this from here and then what I want to
216:22 - do is I will say problem dot examples
216:26 - and then map so examples dot map and get
216:30 - each example with the index of it so
216:33 - what I want to do is to return some jsx
216:36 - so I'm gonna paste that thing that I
216:38 - just copied and I will give it some key
216:41 - which is going to be the example dot ID
216:45 - and then like we have example and then
216:48 - number of that example so it is one two
216:51 - three whatever it is so I'm gonna say
216:54 - um actually index plus one and it is
216:59 - because index is starting from zero so
217:01 - it's going to be increasing at each time
217:03 - so it's going to be one two three etc
217:06 - etc and then in our input section I will
217:08 - cut this from here and I will say
217:10 - example type input actually it should be
217:13 - input text and then for the output we're
217:16 - going to do the same thing we're going
217:17 - to say example dot output text and some
217:21 - of them will have explanation and some
217:23 - of them will not so I'm just gonna cut
217:25 - it from here and then I will say example
217:28 - dot explanation if there is explanation
217:31 - then I will render this portion which is
217:33 - going to be inside the react fragment
217:35 - and it will take the strong tag and then
217:39 - for the example section we'll say
217:40 - example.explanation
217:44 - um so now we can actually save this and
217:47 - this is going to be the thing that we're
217:49 - seeing here so we have the input output
217:51 - explanation
217:53 - um examples with the count as well well
217:55 - as the problem statement that we already
217:58 - insert and now actually we can do
218:02 - um so you can even add our images so
218:04 - we'll say if so below this paragraph
218:06 - we're gonna say example that so it
218:10 - should be image if so what I want to do
218:13 - is to return an image
218:15 - so it should be image actually I want to
218:19 - go to next line so I will say image and
218:21 - for the source it's going to be
218:23 - example what should be actually so
218:27 - example has the image so you could just
218:29 - say example that image because it's
218:32 - already having that source so now save
218:35 - it and now if we come back to the
218:37 - reverse link list
218:39 - so we should be seeing this image and
218:41 - maybe we could even give it some
218:44 - um actually
218:48 - yeah we could give it some margin top
218:50 - right
218:52 - so I want to say a class name is going
218:55 - to be margin top maybe three
218:57 - let's take a look now I think it's it
219:00 - look it looks good
219:01 - and maybe you could go to the next one
219:04 - which was the search 2D metrics and now
219:06 - we have our images and it looks actually
219:09 - pretty
219:10 - pretty cool and the one thing that I
219:13 - just want to mention inside this
219:15 - problems folder we had our index.tsx and
219:18 - for the problems I said that we should
219:21 - have the their file should be exact same
219:24 - as this URL but this is not the case
219:27 - because we are taking this URL inside
219:29 - this PID page so the PID page right we
219:34 - are taking that PID from the URL
219:36 - and then we are associating this PID
219:40 - with this problems object which is going
219:42 - to be this index uh page so right so
219:45 - this this object should has should have
219:49 - the exact same IDs so if this is two sum
219:52 - then we are going to come back so once
219:55 - we get to this two dash sum that URL
219:59 - will see this problem and now if we go
220:02 - to valid parentheses so let's just copy
220:04 - this
220:06 - and paste it here and we're gonna see
220:09 - that problem otherwise we're not going
220:12 - to see that because we uh so we related
220:15 - them in this PID page
220:18 - and with this now what are what do we
220:21 - want to do
220:22 - to add our constraints so I'm going to
220:24 - come back inside the problem description
220:26 - so we have our constraints which is
220:29 - going to be
220:31 - to this list items I can cut one of them
220:34 - or actually I can just delete all of
220:36 - them right
220:37 - uh so I believe we had them in our list
220:42 - items yeah the HTML is already there so
220:45 - all we want to do is just render them so
220:48 - we're going to say if would be one div
220:50 - and it's going to be closing tip because
220:53 - if you want to do that that we just did
220:56 - above
220:57 - what it was
221:00 - um so this thing dangerously said in
221:02 - HTML because
221:04 - uh is a string that we have so this is
221:09 - the string that we have and it is
221:10 - already in HTML right we want to take
221:13 - that string and render render it as HTML
221:16 - so I'm gonna paste it and that was
221:19 - taking an object which has the
221:21 - underscore underscore HTML and for the
221:23 - value it had the problem dot constraints
221:27 - so let's save this now let's take a look
221:30 - so we got our examples uh I'm sorry we
221:33 - got our constraints and actually we can
221:36 - give it some margin y of uh maybe four
221:41 - so it'll take that spacing for us and it
221:44 - didn't because that should be
221:47 - uh she already has it actually so margin
221:50 - five
221:52 - we already have it so we're gonna see
221:54 - margin
221:55 - y of maybe eight
222:00 - so let's take a look in our inspect
222:05 - uh so it should be this
222:09 - um
222:10 - so not this one but
222:13 - yeah actually it should give us margin
222:15 - bottom right
222:17 - so it doesn't give us for some reason
222:22 - um
222:22 - uh so maybe we could say padding bottom
222:25 - of
222:26 - three or maybe two let's save it okay
222:29 - now it looks better it's for some reason
222:32 - it doesn't give us margin y maybe some
222:34 - overflow is happening but I don't care I
222:36 - want to say just padding bottom of four
222:38 - now it should work all right
222:42 - um
222:43 - so now we want to put that boilerplate
222:46 - code into our code editor for this I'm
222:48 - gonna come back to our PID
222:51 - so we got our problem and then I want to
222:53 - send this if I already send it into the
222:55 - workspace and now inside the playground
222:58 - I'm gonna also send that problem which
223:02 - is going to be this problem that we're
223:03 - taking and inside the playground we will
223:07 - take that
223:09 - problem as a type of problem that is
223:12 - coming from utils and then I will say
223:15 - just get that problem for us and delete
223:17 - this boilerplate and now I can say
223:20 - problem dot boilerplate or maybe it was
223:24 - started coach right now save it and save
223:27 - this one here
223:29 - and now we got our valid parentheses for
223:32 - this problem now if we go to the twosome
223:34 - you will get the two sum right that's
223:37 - other code for this and now we can work
223:40 - on this test cases
223:42 - and it was inside the playground
223:46 - um so we had our text setting and so
223:48 - that should be that cases so I'm gonna
223:50 - delete all of them actually so cut this
223:53 - from here or maybe just delete it and
223:55 - get this
223:57 - so wait
223:59 - um
223:59 - this has okay okay so so they has exact
224:03 - same structure so we can delete this we
224:06 - can
224:07 - delete this as well then I can cut this
224:12 - cut this so this one
224:14 - and then what I want to do is to say
224:17 - problem
224:19 - so like problem DOT test cases or maybe
224:23 - it was the examples right
224:25 - examples.map get each example and for
224:28 - this I want to render that thing that we
224:31 - just cut
224:32 - so I'm gonna say for the key it is going
224:34 - to have the example that ID
224:40 - and what do we have like this one and
224:43 - that should be case idx or mu index plus
224:47 - one
224:48 - we got our this is going to be that kind
224:51 - of heading that we have here how many
224:53 - test cases we have so for the maybe
224:55 - reverse link list so we have still three
224:59 - of them for the jump game we have two of
225:01 - them right
225:02 - and then now here this is where we are
225:06 - getting this input output structure so
225:09 - we have our input text and then the
225:11 - input itself then we have the output and
225:14 - then output itself
225:17 - um so this is going to be kind of a
225:19 - dynamic part where we're gonna when we
225:22 - click one of them it is going to be
225:24 - changing depending on which test case
225:26 - that we are currently at so maybe we
225:28 - could add that functionality later
225:30 - actually let's just implement it right
225:33 - now
225:34 - so inside our
225:36 - um so it is playground so maybe we could
225:38 - have a state that is going to say the
225:41 - current or maybe the active test case so
225:44 - we'll say active uh test case ID and
225:51 - then we will say set active test case ID
225:53 - we will get that from the reactive State
225:56 - and it's going to be type of number and
225:59 - also
226:01 - it's all the thing you state
226:03 - and initial value is going to be zero
226:05 - that is stating that when the user first
226:09 - comes to this page it is going to be
226:10 - showing the first test case
226:12 - and then okay so now we can save this
226:16 - and come back to here what are we gonna
226:18 - do it here is that whenever we click one
226:21 - of them
226:22 - so we should have maybe an on click so
226:26 - on click function you want to say set
226:28 - active test case to that current index
226:31 - that we are so the current test case
226:33 - right so if we click this now the test
226:36 - case is going to be zero when we click
226:38 - this the test case is going to be one
226:39 - right the index of this one is zero and
226:42 - this one is one
226:43 - so now we can save this or maybe before
226:46 - that inside here we're gonna say so
226:50 - you can delete this and you're gonna say
226:52 - problem dot examples
226:57 - um so should we get this from the index
226:59 - right and then we will get that input
227:01 - text and we're going to do the same
227:04 - thing for this we're going to say
227:06 - problem
227:07 - uh problem dot examples we get the
227:10 - active one and then show the output text
227:12 - of it now save it and now it's going to
227:15 - be dynamically changing so let's just
227:18 - refresh the page so in the initial load
227:20 - our active test case was zero right and
227:24 - so when we click one of them so when we
227:27 - click this it's gonna be one right so
227:30 - since it is one it'll show that uh the
227:34 - example one right so this one is zero
227:37 - and then this one is one so when you
227:39 - click this the nums is gonna be these
227:42 - numbers and the output is going to be
227:43 - this output and in the initial render
227:46 - we're gonna see the first example right
227:49 - so let's go to another one so it may be
227:52 - in the two sum so first when we this
227:55 - page is rendered it's going to be
227:57 - showing that first example the input and
228:00 - the output that you can see and when we
228:02 - click this now the active test case is
228:05 - one so it's going to be showing that
228:07 - content and then for the next one it's
228:10 - gonna be
228:12 - um so the example three so this is how
228:14 - we make it dynamic
228:17 - so one last little optimization that we
228:20 - can add to this test cases place is to
228:23 - show some kind of indicator to our users
228:27 - um to know them like which test case
228:29 - that they are currently looking at So
228:31 - currently I don't know if that was the
228:33 - case one the case two or the case three
228:36 - that I am looking at here so for this
228:39 - you can use uh that state so the active
228:43 - State and depending on that I would like
228:45 - to change the color of this text color
228:47 - right so I'll come back to here inside
228:50 - this I'm gonna change this uh with a
228:54 - back tick and I close it right here and
228:57 - close that Curly braces as well and now
229:00 - I'm gonna say actually Copeland can
229:03 - write it for me so I'm gonna see if the
229:06 - active test case is equal to this Index
229:09 - right
229:11 - um
229:11 - so if this is the current test case that
229:14 - we're currently at
229:15 - so
229:17 - maybe you could change the text color so
229:19 - I'm gonna say text uh maybe white or
229:24 - maybe let's say gray 500 otherwise it's
229:28 - not gonna add any class it'll be text
229:30 - right so let's save it and now let's
229:33 - take a look at it here so
229:35 - actually let's make it in reverse order
229:38 - so we're gonna say
229:41 - so normally if this is the active one
229:44 - we're gonna get the text to White
229:46 - otherwise we'll say text
229:48 - um gray 500. now if it is the active one
229:52 - we'll see it as white and otherwise
229:54 - we're gonna see it as this gray color
229:57 - so now our user is know that he is
230:01 - looking at the case one case two or case
230:03 - three okay now with this I think we are
230:07 - ready to take a look at our database
230:09 - which is going to be that diagram that I
230:12 - showed you now we added our local face
230:15 - where we had the problem uh so the
230:18 - problem title ID problem statement
230:20 - examples with test cases we got our
230:23 - constraints order starter code Handler
230:26 - function and starter function name so
230:29 - these three of them so this certain
230:31 - function name uh Handler function in
230:33 - order we haven't used that yet but we're
230:36 - going to be using that soon and now this
230:40 - this is going to be the DB part which is
230:42 - going to be our so to say the firestore
230:45 - database and here we're going to have
230:48 - two documents one for problems and one
230:50 - for users so for this let's go to the
230:54 - Firebase console
230:56 - so I am at
230:58 - firebase.google.com and then I am gonna
231:01 - go to the console so I'm going to click
231:04 - this and I'm gonna find that project I
231:07 - will click that as well now inside this
231:10 - build you should click this firestore
231:13 - database which is going to be our
231:14 - real-time DB and then here we'll we're
231:18 - gonna say like create the database and
231:21 - we want to start in test mode so we will
231:24 - click that the thing in the bottom at
231:26 - first so it'll allow you to read and
231:30 - write for the until next month but you
231:34 - should be changing this once you get
231:36 - your application to the production which
231:39 - we're going to be doing that at the end
231:40 - of this tutorial so for now let's just
231:44 - um continue with the test mode so let's
231:45 - click the next and the cloud first or
231:48 - location could be the one that is closer
231:51 - to you so I am in Europe so I'm going to
231:53 - click that and I'm going to enable that
231:59 - so now let's wait for a second
232:07 - foreign
232:09 - so now it has been initialized for us
232:12 - um so this is our panel view so to say
232:14 - and now here we can see our usage our
232:17 - rules and the data that we have here so
232:20 - so far we don't have anything but we can
232:22 - add our Collections and
232:26 - um inside that collections we're going
232:28 - to have our documents right so the users
232:30 - is a collection and each user is going
232:33 - to be a document so this is kind of uh
232:36 - in the same structure with mongodb if
232:38 - you have used it before so this is kind
232:40 - of like not no SQL and it is like
232:44 - document based database
232:47 - so we could come here and manually start
232:50 - a collection we would say the collection
232:52 - ID is going to be that problems and then
232:55 - in the next so we'll see the like
232:57 - document ID so each document is kind of
233:01 - like a row in SQL database so now the
233:04 - first problem is going to be that two
233:06 - sum and then if we take a look at this
233:08 - Fields here we have ID title category
233:11 - difficulty likes dislikes video ID and
233:13 - like the link so you could add all of
233:16 - them manually so that would be for the
233:18 - ID it's going to be let's say type of
233:20 - string and the value is going to be two
233:22 - sum now let's add one more field that is
233:24 - going to be the title the type of string
233:27 - and then it's going to be one point like
233:30 - two dash sum or maybe two some and then
233:34 - for the category we would have uh it's
233:36 - going to be type of string and then it
233:38 - would be in the type so the category of
233:40 - array so we could add all these fields
233:43 - and then you would save it and we would
233:45 - be doing this for all of all of our
233:47 - problems and like for all of our users
233:50 - but this is not what we want this is too
233:53 - slow and not user friendly so for this
233:56 - we would like to add some kind of
233:58 - dynamic form in our application and once
234:03 - we submit that we would have that data
234:05 - in our collections so or like in our
234:08 - database so for this let's go back to vs
234:11 - code and let me show you how we can do
234:14 - this so before we get going just click
234:17 - cancel to cancel this process
234:21 - so this HTML form is going to be
234:24 - something that we're going to be using
234:26 - only once and so for that reason you can
234:29 - put it wherever you want I'm gonna put
234:31 - it in our home page and we're going to
234:34 - be deleting that soon so at the very
234:37 - bottom of our main tag I'm just gonna
234:39 - come here and I'm say temporary form and
234:43 - then I'm going to create a form element
234:44 - it's not going to have any actions the
234:47 - inside is going to have some input
234:49 - Fields so it's the first one is going to
234:52 - be the type of text and the placeholder
234:55 - is going to be problem ID and then it's
234:58 - going to have the name field which says
235:00 - ID we're going to be using this name
235:02 - field once we use react use State and if
235:06 - we take a look at our
235:08 - um so this diagram that we have here so
235:11 - we have the problem ID title category
235:14 - difficulty likes dislikes the video ID
235:16 - and Link so this video idea was the
235:19 - solution ID and Link was that it tooks
235:22 - us to the original problem only code so
235:25 - we're going to be adding all of these
235:27 - and for them we would like to have input
235:30 - Fields so we got our ID now let's just
235:33 - duplicate this where we're going to have
235:36 - the title that says problem title or
235:40 - maybe basically title and it's going to
235:42 - be the type of text we're also would
235:44 - like to have our difficulty category
235:46 - video the link and something that I
235:50 - forgot to mention you would also like to
235:53 - have
235:54 - um so the order of the problem right so
235:58 - let's just say order because when we
236:02 - um when we populate these problems in
236:05 - our home page as you can see it starts
236:07 - from the first one and then goes to the
236:09 - very last one right so it has some kind
236:12 - of order and this is so this field that
236:16 - we are using that to make it go from in
236:19 - ascending order
236:20 - so that's why I wanted to add this
236:24 - um so to say the order field now let's
236:27 - do so this one is going to have the
236:30 - difficulty right
236:32 - so if you're gonna have the placeholder
236:34 - as difficulty and then it's gonna have
236:38 - the category so I can just copy this and
236:41 - paste it and after that we're gonna have
236:44 - the video ID
236:46 - and it's gonna have the link the video
236:50 - link
236:51 - or the problem like I'm sorry so also
236:54 - we're gonna have the order
236:57 - um
236:57 - so for the link and video ID we can put
237:01 - question marks to show them like it is
237:04 - optional right sum of problems some of
237:06 - the problems has video ID and all of
237:09 - them don't and some of them has links
237:12 - and some of them don't so let's just
237:14 - change this put the optional at the very
237:17 - bottom and then so to submit this you
237:20 - would like to have a button that says
237:22 - save to fire store
237:25 - or like save to a database whatever you
237:28 - want so now let's just save it and take
237:31 - a look at in our demo
237:33 - um so we can have any slides so let's
237:35 - just give it so we would like to make it
237:38 - so give it some paddings right so
237:40 - padding maybe six and then Flags Flex
237:43 - column to put them vertically and then
237:47 - maybe Max the width of small as well as
237:51 - the gap of three so save it come back
237:54 - here
237:56 - um okay that looks cool but we don't see
237:58 - that button so let's just say
238:01 - um class name ads and background white
238:04 - Maybe
238:06 - okay so that looks good to me because it
238:09 - is temporary
238:11 - anyways so we would like to have now
238:14 - state for this right we we need to like
238:17 - when the user types something in we just
238:20 - like to put at whatever that event right
238:22 - we want to save it
238:24 - um so for this let's come to here and
238:26 - we're gonna say use State
238:29 - um we're gonna say we'll have some
238:31 - inputs and set inputs
238:35 - it's using use State and initially it is
238:38 - going to be an object
238:41 - so we will have the ID of the problem as
238:44 - empty and then we're gonna have the
238:46 - title the category difficulty and then
238:49 - you will have the so let's say the video
238:52 - ID and then we will have a link we will
238:57 - have the order so for this we can just
239:00 - say zero because we're going to be
239:02 - mutating this anyways and then we will
239:05 - have the light and it's like straight
239:08 - this is going to be so we don't even
239:11 - need to type in the likes and dislikes
239:13 - count because it's going to be zero
239:15 - anyways when we first built the problem
239:20 - um so we don't have anything
239:22 - missing right so we have the likes
239:24 - dislikes or their link video ID and
239:28 - everything okay so now when we type in
239:31 - we would like to call that on change
239:33 - event on all of these so let's just
239:36 - um select all of them and then let's add
239:39 - on change Handler so we'll say handle
239:42 - input change
239:45 - I'm going to create this function above
239:48 - click here because handle input to
239:51 - change it's going to take an event this
239:53 - event is going to have
239:54 - type of react change event with HTML
239:57 - input element and then here what we'll
240:00 - like to do is just set inputs right oops
240:04 - so it's going to be set inputs it's
240:07 - going to be taking the previous values
240:09 - and only be changing the one that we are
240:12 - typing in so just just to show you that
240:17 - we're doing this correct so let's
240:19 - console.log the inputs now here open up
240:22 - our console and now problem ID is let's
240:27 - say two sum so it's only changing the
240:29 - two so I'm now the title to some problem
240:33 - so it didn't change the rest it only
240:36 - changes the one that we are typing the
240:38 - order is two let's say so now it has
240:41 - that order field changed and as you can
240:44 - see order is now the type of string we
240:47 - would like to make it
240:49 - um
240:50 - so we would like to make it type of
240:52 - integer right but before that now let's
240:55 - say we type everything here and then we
240:58 - want to just submit this into our
241:01 - database
241:02 - so for this let's go to Google and type
241:04 - add data to firestore
241:08 - so I just typed in add data to firestore
241:11 - and I'm gonna click the first one so
241:14 - this is gonna be the Firebase
241:15 - documentation and we already initialize
241:18 - our Cloud firestore we would like to
241:20 - actually add a document into our
241:22 - database so here it gives you some
241:25 - methods some Alternatives they were
241:28 - going to be using the first one which is
241:30 - this set document method and in this
241:33 - case you would like to so you actually
241:35 - need to provide the idea of the document
241:40 - but if you would like to have it auto
241:42 - generated you can just skip that part
241:44 - and use this method which is the add
241:47 - document and in this case we would like
241:50 - to add this ID because I think we're
241:53 - going to be using that in in the
241:55 - upcoming sections so I just want to copy
241:58 - this and then come back into the vs code
242:01 - where we would like to create a function
242:04 - when we submit this form right we will
242:07 - say on sub submit actually handle submit
242:10 - and then Nintendo submit is going to be
242:14 - a function handle submit which is going
242:18 - to be an asynchronous function and then
242:21 - first you would like to prevent the
242:23 - default uh so that it doesn't refresh
242:26 - the page prevent the page refresh rate
242:29 - and then what you'd like to do is just
242:31 - paste that line that we copied and then
242:34 - the set argument import that from
242:36 - Firebase firestore import this document
242:39 - method and then
242:41 - EB is going to be our firestore that we
242:44 - got from our so once we initialize that
242:48 - right that's why we initialize this we
242:51 - got our firestore
242:53 - so like the firestore database and we
242:56 - export this now we are importing that
242:59 - from here and we're going to be using
243:01 - that and then inside the collections
243:04 - it's not going to be cities actually
243:06 - it's going to be the problems uh
243:08 - collection and then ID we can say can I
243:12 - be
243:14 - inputs.id and for the data we could
243:17 - actually put that inputs but what we
243:20 - would like to do is we want to convert
243:22 - that order field into integer
243:26 - um so actually it's already initial rate
243:28 - we didn't so it is integer here but once
243:31 - you type in something inside this input
243:35 - field it's by default going to be a
243:37 - string so that's why we would like to
243:39 - convert that into
243:41 - so integer right so convert inputs dot
243:46 - order to integer so for this we can
243:49 - create a new problem so we'll say the
243:53 - new problem object it's going to have
243:55 - all of the inputs filled but we're going
243:57 - to say order is going to be now the type
244:00 - of integer and
244:03 - so we can either use this or we could
244:05 - say like number and put it like this and
244:09 - then you'll say new problem
244:13 - so we got our new problem which is this
244:17 - input that we just created and then
244:20 - we change the order now we would like to
244:22 - save it into our database so after this
244:26 - let's alert and let's say save to DB
244:30 - save it now come back to here so in our
244:34 - database we don't have anything and
244:37 - let's just
244:38 - fill this fields and for this actually
244:42 - I'm going to be using that the mock
244:44 - problems data that we got here so this
244:47 - is going to be our ID right so I'm gonna
244:50 - paste it and then come back to here so
244:54 - I'm gonna copy this so it's going to be
244:56 - easy category of array order is going to
244:59 - be one and actually I can copy this
245:01 - video ID and come back to here so that
245:05 - the title is going to be one point Dash
245:08 - so two sum and then the difficulty is
245:12 - going to be easy category is going to be
245:14 - array and then order is going to be one
245:16 - video ID is going to be this string it's
245:19 - not gonna have any link because we can
245:21 - solve it in our project right when you
245:25 - click this it allows you to solve it uh
245:28 - from our demo but if you have a link
245:31 - that would take you to delete code
245:33 - original problem that we got
245:36 - in this case this problem and
245:41 - so let's take a look at this and we put
245:44 - all of our data we can skip this link it
245:46 - is optional anyways now save the
245:48 - database it says save to DB now let's
245:52 - come back to here refresh our page
245:57 - so now that's great we got our the
245:59 - problems collection and then we got our
246:03 - document right which is the two sum and
246:06 - then we have the category of array
246:08 - difficulty of easy zero dislikes zero
246:11 - likes the idea of the problem link order
246:14 - title and then video ID so this is
246:17 - basically how we add a data into our
246:20 - firestore database and now let's just
246:23 - add if you rest of the problems which is
246:25 - going to be in total 10 problems so
246:29 - let's come back to in our home page and
246:31 - then come back to in our vs code inside
246:34 - the mock problems we have the reverse
246:37 - link list right now so we can get the
246:40 - problem ID from here and then we're just
246:43 - gonna be pasting that into here and then
246:46 - for the title is going to be two dot
246:49 - um so the reverse plane
246:52 - so reverse linked list and then
246:55 - difficulty is going to be hard category
246:58 - is going to be a linked list and then
247:00 - the order is going to be two uid and
247:03 - Link maybe empty for now we don't have
247:06 - we don't have it in our original demo as
247:10 - well so as you can see the solution is
247:12 - coming soon and then it doesn't have a
247:14 - link when you click that it takes us to
247:17 - our demo application slash problem slash
247:21 - reverse linked list so we're gonna skip
247:24 - this part and save to DB and it's been
247:27 - saved now it should be real time as we
247:30 - can see we got the reverse link list all
247:33 - the data that we got here now let's just
247:35 - add the rest of them I'm gonna be
247:38 - actually fast forwarding this video but
247:40 - this is how you would like to do you
247:42 - will take a look at here actually so we
247:46 - got the problems as here so I did title
247:50 - difficulty category and then the
247:52 - solution but most importantly you can
247:54 - take a look at in these problems or like
247:57 - the mock problems file you would like to
248:00 - get the ID copy it and paste it into our
248:05 - so let's just refresh this
248:07 - so paste the problem ID problem title
248:11 - and then
248:13 - to get the title copy this and once you
248:16 - paste it just put the order in front of
248:19 - it with that Dodge so that you can get
248:21 - that complete uh title and then you
248:25 - would like to put the difficulty the
248:27 - category which is going to be actually
248:29 - medium
248:31 - so it was the category it was dynamic
248:33 - programming so dynamic
248:37 - and then you would like to put the order
248:39 - video ID if there is inside the small
248:42 - problems if not just skip that and then
248:46 - um so if it has link put that inside
248:48 - here if it doesn't skip that as well and
248:51 - then just save it and now you would like
248:53 - to do this for all the problems and each
248:57 - time it should be adding that into our
248:59 - documents or like inside our database
249:02 - now we got the jump game with the all
249:06 - the data that we just give so this is
249:09 - how you would like to do and now I'm
249:10 - going to be adding all that 10 problems
249:12 - and then come back to so like continue
249:14 - the video
249:16 - so I have added all of the problems into
249:19 - our database and I just I just want to
249:22 - show you for a second all of them so
249:24 - that you can pause the video and just
249:26 - compare it with yourselves and then so
249:29 - like the first one or actually the ninth
249:32 - one we got the best time to buy and sell
249:35 - stock it doesn't have a video ID the
249:37 - order we got S9 we got the link that
249:40 - will take you to the original problem on
249:42 - we could and then likes dislikes the ID
249:45 - difficulty the category so it is going
249:48 - to be the same for the rest of the
249:50 - problems so you can just pause the video
249:52 - and take a look at them so this is what
249:55 - we got the jump game DP problem maximum
249:58 - depth of binary tree so we got the video
250:01 - ID the link as well so we got the merge
250:05 - intervals we got only a link not the
250:07 - video ID and then reverse link list we
250:10 - added this search a 2d metrics
250:13 - um subsets which is a backtracking
250:16 - problem then we got the two sum as well
250:18 - as the valid parentheses
250:22 - um so there might be some little bugs
250:24 - that I maybe accidentally added so like
250:27 - missed information here
250:29 - um if I realize that I will be updating
250:31 - that in our upcoming sections so with
250:35 - this now that we got our problems we can
250:37 - actually populate it in our home page so
250:40 - first things first I would like to
250:42 - delete this form it was temporary
250:44 - anyways we're not going to be using that
250:46 - again in this tutorial but let's say in
250:48 - the future you would like to add more
250:50 - problems into an application that would
250:52 - be one alternative to doing this do it
250:56 - like adding the problems
250:59 - um so since we deleted the form we don't
251:00 - need this handle submit handle input
251:02 - change and then this use State values so
251:06 - we can delete all these in this Imports
251:08 - as well
251:10 - um we can have used it because we're
251:12 - going to be using this now the next
251:14 - thing that you would like to add is some
251:17 - kind of loading state so in our original
251:20 - website Renault users refresh this page
251:23 - like in the initial load for one second
251:26 - they see this loading State and then
251:28 - once it fetches the data it'll replace
251:31 - that loading state with this
251:33 - um so this table so for this we can use
251:36 - something called loading skeletons and
251:39 - table and CSS covers that in
251:41 - flowbyte.com so they just have this
251:44 - really cool looking uh skeletons they
251:48 - have the default image placeholder like
251:51 - the video placeholder text placeholder
251:53 - and a lot of stuff so I just played
251:56 - around with this CSS classes and
251:58 - eventually I was able to came up with
252:01 - this uh design here we have an like
252:04 - circle on the left and then three
252:07 - rectangulars on the same line so for
252:11 - this I'm just gonna come back to inside
252:12 - vs coach I will paste that loading like
252:16 - the loading skeleton which you can find
252:18 - it from the GitHub test and then
252:21 - depending on this we're going to be like
252:23 - depending on the loading State we're
252:25 - going to be showing this so here we're
252:28 - going to have a like state that says
252:30 - loading problems
252:33 - so loading problems and then settling
252:36 - problems and initially it's going to be
252:38 - in the state of true and then below this
252:42 - div we are gonna show our loading
252:44 - skeletons depending on this state so if
252:48 - it is loading the problems then we're
252:50 - going to render some HTML which is going
252:52 - to be a div it's going to have some
252:54 - class names and inside it's gonna have
252:56 - the loading skeleton but it is not going
252:59 - to have only one of them if you take a
253:01 - closer look at here we're gonna have 10
253:04 - of them right so each of these so each
253:08 - this line each skeleton is actually only
253:12 - one of this component so we would like
253:14 - to Loop through this 10 times so for
253:17 - this we're not going to have only one of
253:19 - these but actually we're gonna create a
253:22 - loop that says 10 times of this array
253:26 - destructuring we're gonna map this for
253:29 - each of them we are going to render some
253:31 - actually we're going to render this
253:33 - sliding skeleton we're gonna cue we're
253:35 - going to give this key as the index for
253:38 - that react would be happy with us now if
253:41 - we just save it and take a look at our
253:43 - localhost we got this skeleton but it is
253:47 - it doesn't have that pulse animation so
253:50 - just to add this we can come to here
253:53 - we'll say animate pulse save it
253:57 - so now we got this pulse animation as we
254:00 - can see and now all the thing that we
254:03 - need to do is just Center this for this
254:06 - we're gonna add some more classes which
254:08 - is going to be Max width of 100 so like
254:12 - 1000 and 200 pixels and margin is going
254:16 - to be Auto margin X is going to be Auto
254:19 - to Center that and then we're gonna have
254:22 - like smaller screens and above we're
254:24 - gonna have the width of seven to twelve
254:28 - and then like normally it's gonna have
254:31 - with over full and I think this is all
254:34 - classes that we need save it and this is
254:37 - what we would like to see and now with
254:40 - the loading problems was false it is not
254:42 - going to show that loading state
254:45 - so let's just put it into the true state
254:49 - which is going to be our initial state
254:52 - and inside this table now we are gonna
254:55 - be only showing this table hat if you
254:58 - are not loading the problems right now
255:01 - you can just cut this and then you'll
255:04 - say if it is not loading the problems
255:06 - then just render this portion and just
255:10 - paste it and now if we save this and it
255:13 - is not loading the problems let's say
255:16 - actually that should be it is not
255:19 - loading
255:20 - so right now it's loading right
255:23 - so if that was false
255:26 - and it should show this uh some exchange
255:30 - is going on here
255:32 - so if let's see this is true
255:35 - um so we got both this and then this
255:37 - this is this shouldn't be the case
255:40 - actually it's coming from the problem
255:42 - table okay okay my bad so we're gonna go
255:46 - inside this problems table where we're
255:48 - gonna have fetching our problems and
255:51 - we're going to be changing this that
255:53 - problems
255:55 - um so what that lighting problems right
255:57 - just copy this and paste it we're going
256:00 - to be changing the state inside our
256:02 - problems table component so open this
256:07 - and here what we're gonna have is you
256:10 - would like to get this set loading
256:12 - problems and it shows that uh it's not
256:16 - going to be actually optional but it's
256:18 - going to be the type of reacts patch and
256:21 - it's going to be in the type of Boolean
256:23 - so we would like to get that it's
256:26 - uploading problems save it here save it
256:29 - from here and then now here is going to
256:32 - be the logic that we're gonna have the
256:34 - logic to catch the problem so for this I
256:38 - actually would like to do some
256:40 - abstractions where I'm just gonna say
256:42 - const problems and I'm gonna call my
256:45 - hook which is going to be use get
256:47 - problems we're going to create this and
256:51 - I'm just gonna call this hook it'll give
256:53 - me the problems so I don't care about
256:55 - the implementation detail let's say
256:58 - after like one month two months later
257:00 - when I come back to this project I just
257:03 - when I read the code I just like to see
257:05 - how it fetches so like where it fetches
257:09 - and not actually how it fetches so for
257:12 - this I'm gonna also paste it on this
257:15 - that loading problems so that we can
257:17 - change the state inside this hook and
257:20 - now I'm gonna create this hook below
257:22 - this file where I'm gonna say
257:26 - so it is going to be a function called
257:28 - use get problems and it's going to be
257:31 - taking that satelliting problems as the
257:34 - first parameter and then inside here
257:37 - we're gonna return the problems and
257:41 - these problems is going to be actually a
257:43 - state where initially it's going to be
257:45 - an empty array and once you fetch it
257:48 - we're gonna change it with the original
257:51 - problems so since we are talking about
257:54 - the fetching Logic for this the only
257:58 - thing that we can think of is going to
258:00 - be use effect in react so we're going to
258:04 - be calling this on like the initial
258:06 - Mount so for this I initialize my use
258:10 - effect like this and then here I'm gonna
258:13 - have a function called get uh maybe the
258:17 - get problems
258:19 - like this and it's going to be an async
258:22 - function and I'm going to call this
258:24 - function to execute the code inside so
258:27 - this function is going to be the
258:30 - um the function that we use the fetching
258:33 - data logic right from the firestore so
258:37 - here initially the set lighting problems
258:39 - is going to be true since we are trying
258:41 - to fetch the problems and then now I
258:45 - don't know how to fetch the data from
258:47 - Firebase right so for this I'm going to
258:49 - come back to Google where I'm going to
258:51 - just type get data from firestore so I'm
258:55 - going to click this so we already
258:57 - initialize our cloud firestore and the
259:00 - thing that we would like to get is get
259:03 - multiple documents from a collection if
259:06 - you remember we had our collection which
259:08 - is the problems collection and we have
259:10 - multiple documents that we would like to
259:13 - fetch them so this this is what you what
259:16 - I would like to do and what they show us
259:19 - is a kind of example code example or
259:23 - like example of a code block so we have
259:26 - a query we choose this collection and it
259:30 - it passes our database which is going to
259:33 - be our firestore and then from the
259:35 - collections it's going to be problems
259:37 - for our case if they use cities and they
259:41 - also have a different query but in our
259:44 - case it's going to be ordered by we're
259:46 - going to be ordering from this uh
259:49 - depending on this order from ascending
259:51 - order right so it's going to go from the
259:53 - first order to the very last
259:56 - so this is what you would like to do so
259:58 - let's just come back to inside the vs
260:00 - code where we're gonna
260:02 - they cost query is going to be a query
260:05 - that we import from firestore Firebase
260:08 - so it is coming like from let me just
260:11 - show you Firebase firestore and then
260:14 - below here we're gonna have a collection
260:17 - so inside we're gonna pass our firestore
260:21 - which is coming from this file
260:24 - um so which we initialize at the
260:25 - beginning of the project and we are
260:27 - importing this firestore object so that
260:32 - we can use our database and below here
260:35 - what we would like to do is pass our
260:38 - collection which is going to be the
260:40 - problems and then what we'd like to do
260:43 - is as I said we're going to be using
260:45 - order by it's also coming from Firebase
260:48 - and the field that you would like to
260:51 - order by is going to be that order field
260:53 - and it's going to be in ascending order
260:55 - and if you just control space here you
260:59 - can see also there is this descending
261:01 - option if you use but in our case we'd
261:04 - like to use ascending order and then you
261:07 - would like to pass this the query inside
261:10 - get dogs
261:12 - um so the function the method they just
261:15 - show us so I'm gonna say const query
261:19 - snapshot it's going to be a weight
261:21 - um so get dark
261:24 - not dark but get dogs and I'm gonna pass
261:27 - that query inside so let's just take a
261:29 - look at this query Snapchat what it is
261:32 - so I'm gonna save this come back to our
261:37 - so the localhost so now if we just take
261:40 - a look so it's already in loading State
261:42 - we didn't change this so here if you
261:45 - take a closer look we have our data or
261:49 - like documents here right it has array
261:52 - of 10 because we have 10 problems and
261:55 - each problem has like a lot of data that
261:58 - we don't need but if we take a closer
262:00 - look at here inside the underscore
262:02 - document inside the data value map value
262:06 - Fields so this is data that you'd like
262:09 - to do and for this they show us like
262:12 - they have this the
262:15 - document.data function they so it only
262:18 - returns you the data that you would like
262:21 - to get so I'm just going to copy this
262:23 - line okay I control so I copy this now
262:26 - I'm going to just paste it here and now
262:29 - let's just take a look at the data that
262:31 - we got
262:33 - which is refresh this page
262:38 - and as you can see we got the ID as well
262:42 - as the problem itself for all of them
262:44 - right so we got the two sum Jump game
262:46 - all the way down so each problem has
262:49 - only these fields that we give in our
262:51 - database
262:52 - so for this I am gonna just keep this uh
262:57 - the thing that I just copied but I'm
262:58 - gonna have a temporary array and the
263:01 - reason is for this because we don't want
263:04 - to get that unrelated data so we only
263:07 - need the problem data so for this I'm
263:09 - going to say Temp and it's going to be
263:12 - an amp array for now and inside this for
263:15 - each but I am going to do is I will say
263:18 - temporary inside it's array just push
263:21 - and object for all of them so it's gonna
263:25 - have an ID field which is going to be
263:27 - this document that ID and we're gonna
263:29 - just structure that document dot data so
263:34 - now if we take a look at this
263:36 - temperature array so let's just
263:38 - console.log temp
263:41 - save it and
263:44 - here what we're going to be seeing is
263:46 - that we have an array of objects and
263:49 - each of them has the only problem data
263:51 - this is what we would like to do and now
263:53 - I can easily say that this set problems
263:58 - is going to be this temporary array and
264:00 - now the set loading problem state is
264:03 - going to be false and we can also remove
264:05 - this warning which is passing the set
264:08 - lighting problems to make eslint happy
264:10 - and it's temporary array for now we can
264:13 - just say
264:15 - um so we have an error here which is
264:17 - going to be typescript error but we're
264:19 - going to handle that later so now I
264:21 - think this is gonna so this should work
264:24 - perfectly now I'm going to save this and
264:27 - if we take a look at these problems that
264:30 - we are taking so we are getting them
264:32 - from database not mock data anymore so
264:36 - we can just delete this and this is the
264:39 - problems that we are getting right each
264:42 - problem has the difficulty it has the ID
264:45 - so write this document we can actually
264:48 - change them with maybe a problem so
264:50 - let's just Ctrl B for all of them and
264:54 - I'm going to change it with problem
264:57 - of this problem
264:59 - now
265:01 - so we have difficulty we have the video
265:03 - ID we have category
265:06 - so title ID everything now I'm Gonna
265:09 - Save this if we take a look at here so
265:12 - this is the data that we are getting
265:13 - from our database so let's just come
265:16 - here for the two sum maybe we can change
265:18 - the difficulty to
265:22 - medium
265:23 - and update this now refresh our page
265:29 - we are going to see that difficulty has
265:31 - changed from easy to medium so now we
265:34 - really know that the data is coming from
265:36 - our database so I'm going to change the
265:39 - difficulty to easy again
265:41 - it is
265:44 - and yeah this is what we would like to
265:46 - do and so just let's just uh resolve
265:50 - this
265:51 - um the type error we're getting from uh
265:54 - typescript so here we didn't give any
265:57 - type for this problems right this is why
266:01 - we are getting this
266:02 - and for this let's just come back inside
266:05 - our types where we had so this is the
266:09 - type that for the local data right local
266:14 - problem data so that was we're holding
266:17 - that inside this folder right so that
266:21 - has like the starter code starter
266:23 - function like Handler function starter
266:25 - function name examples constraints all
266:29 - this stuff and what we have in our
266:32 - database is actually a little bit
266:33 - different we have the video ID so maybe
266:36 - the difficulty dislikes likes and all
266:40 - this stuff so for this we would like to
266:42 - create another type which is going to be
266:45 - actually also a problem type but we're
266:48 - gonna call it something different so for
266:50 - this I'm going to create another type
266:52 - which is going to be maybe I could call
266:54 - DB problem and maybe you could change
266:58 - this to local problem uh however you
267:00 - want but I'm not gonna do that in this
267:02 - tutorial so it's gonna have an ID so the
267:06 - ID is going to be able to string as you
267:09 - can see here then it's gonna have the
267:12 - title also going to be string we're
267:14 - going to have the category is going to
267:17 - be string we had difficulty
267:20 - so we had the light it's gonna be number
267:23 - we got dislikes also a number we got
267:26 - order it was number as well we got the
267:29 - video ID so video ID it was an optional
267:33 - field and it was a string type we also
267:37 - got the link
267:38 - which was also optional and it was
267:42 - stream
267:43 - so now we can save this and we're
267:45 - exporting this now we can come back here
267:48 - where I'm gonna say this is gonna be BB
267:51 - problem
267:53 - and so just like this array of DBA
267:56 - problem now if we take a look at here
267:59 - what do we get
268:02 - so this temporary is also going to be TD
268:06 - problem type of DB problem of arrays
268:09 - right and then we can catch this as
268:12 - oops as DB problem
268:15 - and with is now we just uh get rid of
268:19 - all that compiling errors so we can save
268:22 - this and everything is going to work
268:24 - perfectly as it before
268:27 - you can refresh this we got our loading
268:30 - State and now as we can see once it
268:33 - fetches we don't see that loading State
268:34 - anymore
268:37 - so in the home page everything works
268:39 - other than the status field where we're
268:42 - gonna handle that soon
268:45 - um
268:47 - so then as the next step we would like
268:49 - to maybe add this user data once we log
268:54 - in or create our account so we would
268:57 - like to put this data in our database as
269:00 - one more collection uh but should this
269:04 - step be the next step let me just think
269:06 - and come back in a second
269:09 - so before we do anything else actually
269:11 - we would like to use that problem link
269:14 - so when we click one of these from the
269:16 - sixth problem to the very last one we
269:18 - would like uh so we would like it to
269:21 - take us to the problem link page so when
269:24 - I click this right now it'll take us to
269:26 - 404 because we did not add this maximum
269:29 - depth of binary tree into our problems
269:32 - object so if we take it take a look at
269:35 - our original demo when I click one of
269:37 - them it'll take me to delete code as we
269:40 - can see
269:42 - um but here what we would like to add
269:44 - that link property into our code so it
269:48 - was here so I can just cut this where it
269:52 - takes us to the problem page I'm gonna
269:54 - just cut it for now and I'm gonna say if
269:57 - problem dot link if we have it do
270:00 - something and if you don't have it do
270:03 - something else or render something else
270:05 - and in the else case we're going to have
270:08 - that link that takes us to the problem
270:10 - page but otherwise we're gonna have a
270:14 - link tag or yeah we're gonna have a link
270:17 - which is gonna have the hrap as so the
270:21 - problem dot link
270:23 - and it's gonna have some class names
270:25 - it's gonna be one hover you would like
270:28 - to text to Blue 600
270:32 - and then maybe it's gonna have the
270:35 - cursor pointer and also you would like
270:37 - to have it the target to be blank so
270:41 - that it will take us to the uh which is
270:45 - gonna open a new tab and inside we're
270:48 - gonna say the problem dot title I'm
270:50 - Gonna Save it and here in our localhost
270:54 - when we click one of these so from the
270:56 - sixth one to the last one when I click
270:58 - this it it'll take me to delete code to
271:01 - this problem that we got the link for
271:04 - this but for the jump game let's say we
271:06 - don't have that
271:08 - um so the link in our problems uh so in
271:12 - our database so let's go to jump game
271:14 - for the link we don't have anything so
271:16 - it'll take me to the problem page
271:19 - as you can see we got our boilerplate
271:22 - test cases and all the things that we
271:24 - added so the next thing that I actually
271:27 - want to do is like display this like
271:31 - scan and when I click them it'll do that
271:34 - like operation but for this we actually
271:38 - need to First create this user's
271:41 - collection because what happens is that
271:44 - when you click so when you like a
271:46 - problem that problem ID is going to be
271:50 - pushed to this liked problems array in
271:54 - our users right so that when we log in
271:57 - again it'll show us that you already
271:59 - like that problem so for this we
272:02 - actually want to just create this data
272:04 - in our database
272:06 - so for this I want to head over to the
272:09 - sign up component where we sign up our
272:11 - users right we created with email and
272:14 - password
272:15 - and once we sign them in or like once we
272:18 - sign them up we would like to create
272:21 - that document as well so we're gonna
272:23 - have that user's collection and it's
272:26 - going to be inside our database and each
272:30 - document is going to be one of our users
272:32 - and each user will have inside this
272:35 - Fields it's going to have this add
272:38 - Fields right it is display name email
272:41 - like problems dislike problems and the
272:44 - rest
272:45 - so for this we're going to be also using
272:48 - that set document method which is coming
272:51 - from the documentation
272:53 - so if you don't remember that just type
272:56 - Firebase add data to Google and click
272:58 - this where we did this uh maybe two
273:01 - sections before and we had that
273:03 - temporary form so inside this add a
273:06 - document we use this set document method
273:09 - right so we're going to come back to
273:12 - here and what we'd like to do is use
273:15 - that method as well so we're going to
273:17 - say await set talk and it's going to
273:21 - take this document
273:22 - method and then we're gonna have our
273:25 - database which is it's firestore let's
273:28 - just import this and then we're gonna
273:31 - have inside users collection
273:34 - and as the ID we can we need to give it
273:38 - because we are using this set method
273:41 - they give that ID and we actually want
273:44 - that as well so we're gonna say new user
273:47 - that we just created new user it is
273:50 - coming from here right new user Dot
273:54 - user.id and then we want to give now the
273:58 - data so I'm going to say user data is
274:00 - going to be an object which we're gonna
274:02 - have here so this user data is going to
274:05 - have the uid right we're gonna say the
274:09 - user ID is going to be new user ID it's
274:12 - going to have the email it's gonna have
274:14 - the display name which is coming from
274:16 - our input
274:17 - so we would like to have it created at
274:20 - Fields so created add which is going to
274:23 - be maybe date start now and also you
274:26 - would like to have it updated ad it's
274:29 - also going to be data now we're gonna
274:31 - have the light problems it's going to be
274:34 - an empty array dislike oops display
274:38 - problems so we're gonna have solve
274:40 - problems and maybe art problems right
274:44 - our users want to start the problem
274:47 - and I think that was all the fields that
274:51 - we need let me just double check that
274:53 - update created at solve problems start
274:56 - dislike liked email display name and ID
274:58 - yeah this is the old thing that we need
275:01 - so it gives us some error maybe ID does
275:03 - not exist on so that should be user.uid
275:07 - not the ID
275:08 - and this field is coming from the
275:10 - firestore if you don't know
275:12 - and after this maybe we would like to do
275:15 - some
275:16 - um so they may be user friendly stuff
275:19 - where we're gonna import our toast it's
275:22 - gonna be toast.loading we're just gonna
275:24 - say maybe creating
275:27 - your account and then we can give it
275:31 - some object as like the position is
275:34 - going to be top tenor we're gonna have
275:36 - also the toast ID which you'll see why
275:40 - in a minute so those ID could be maybe
275:43 - the loading toast
275:45 - and then once we so instead once we have
275:48 - an error we would like to also do
275:50 - toolstad error and you'll like show that
275:55 - error.message in our top Center we don't
275:58 - want the toast ID
276:00 - so we can just delete this and open this
276:03 - and finally
276:05 - either it's um so either we success or
276:08 - we have an error we we just want to
276:11 - remove that floating uh toast so now you
276:14 - can toast that dismiss with this ID that
276:17 - we just give now the toastify you will
276:20 - know that it should only remove this
276:22 - loading tools from our screen
276:25 - and I think with this we should be ready
276:27 - to go so let's just save it and try to
276:31 - sign up one more user
276:34 - so I will come back to here and I would
276:36 - like to log out from this account which
276:38 - was John Doe so I will click this and I
276:42 - just realized that there is some bug
276:43 - here we don't want this timer to be here
276:45 - and we don't have a user right when we
276:48 - log that we don't want to see this timer
276:49 - so for this I will come back to here I
276:52 - think it was inside the top bar so we
276:56 - had this Pro if we had in the problem
276:58 - page we would like to show the timer but
277:01 - it should be if we have logged in and
277:05 - you are in the problem page then we
277:07 - would like to show this timer I'll save
277:09 - this come back to here it should be yeah
277:12 - like we don't see that right now so now
277:14 - let's try to sign up with a new account
277:16 - I will create an account I'm gonna say
277:19 - test thing ADD test
277:23 - dot com and display name could be test
277:26 - we're not using that anyways so for the
277:29 - password we'll say John Doe so let's try
277:32 - to register you see that creating your
277:34 - account and yes this is awesome we have
277:38 - our user we are logged in and now let's
277:41 - just check our collections in our
277:43 - database so refresh this
277:46 - and hopefully you're going to see that
277:48 - users collection and there we go so
277:51 - we're going to click this so this is the
277:53 - uid that we got and we have all these
277:56 - fields created at updated at dislike
277:59 - problems like problems they are empty
278:02 - arrays for now and we got the email
278:05 - display name and everything really so
278:08 - all the data that we just provided here
278:11 - right so this object is passed into our
278:14 - database within our users collection and
278:17 - for the ID we give the user ID
278:20 - and here now we can delete that to John
278:23 - Doe because so the first John Doe that
278:26 - we created because we didn't implement
278:28 - this part now if John Doe like the
278:30 - problem or disliked the problem it will
278:33 - not be added into here so we can
278:35 - basically come to here and just delete
278:38 - the John Doe from here and
278:42 - yeah this is the only user now we have
278:44 - if you realize we have like user ID
278:46 - starts with j g and
278:50 - maybe as jdd if we take a look at here
278:53 - we'll also see that ID as the user ID
278:56 - right so it is because we are using it
279:00 - from here
279:01 - yeah
279:02 - so as the next step since we have our
279:05 - data in our database the problem data
279:07 - and the user data now I actually want to
279:10 - fetch that problem data which was the
279:14 - like dislike count and the difficulty of
279:16 - the problem so for this I will come back
279:19 - inside this on the problem page so let's
279:22 - just collapse everything for now inside
279:25 - the pages inside the problem page PID
279:28 - where we sent our workspace right inside
279:32 - workspace we had the problem description
279:34 - and it had the it was this left hand
279:38 - side right we had the like and dislike
279:40 - count
279:41 - so here what I'm going to do is
279:45 - um actually just fetch that data from
279:47 - our database so for this I'm going to
279:49 - use the same apps Direction logic where
279:52 - I'm just gonna call my hook that I will
279:55 - be creating I'm going to say use maybe
279:58 - get current problem right because in
280:02 - this page we are only going to have one
280:04 - problem right so let's see this is the
280:06 - two sum page and then we will be have
280:09 - maybe Jump game so this page is only
280:12 - gonna be for one problem as you already
280:15 - know so I want to send this problem ID
280:18 - to this page so that we know which data
280:22 - should be fetched okay and at the bottom
280:25 - of our page I'm gonna create my function
280:27 - which is going to be use get current
280:30 - problem and it's gonna take the problem
280:33 - ID and it's going to be the type of
280:36 - string and inside here we're gonna do
280:39 - some data fetching logic right since we
280:43 - are going to be doing data fetching the
280:45 - first thing that comes to my mind is
280:46 - that use effect all right and let's just
280:50 - initialize it on Mount and we need to
280:53 - import this let's do a control space it
280:56 - doesn't suggest us for some reason so
280:59 - I'm going to just delete this react and
281:01 - I'm going to say use effect coming from
281:04 - react
281:05 - So Below this what we're going to be
281:08 - doing like we're gonna have that
281:09 - pitching data logic but we need to have
281:13 - some state right so first thing that
281:16 - we'll have is going to be that current
281:18 - problem and it's going to be type of
281:21 - actually
281:22 - B problem right we are pitching that
281:25 - from the database so it either is going
281:28 - to be that DB problem or it's going to
281:30 - be null and initially it's going to be
281:32 - null so let's import use date it'll not
281:36 - um suggest us so let's just
281:39 - do it manually so I'm going to say use
281:41 - date from react
281:44 - and then the next thing that we need is
281:48 - going to be the loading so set loading
281:51 - is going to be Boolean and initially
281:52 - it's going to be true and also we'll
281:55 - need a problem difficulty class
281:59 - so maybe yeah difficulty class and then
282:02 - set difficulty class so set problem
282:07 - and yeah so initially it's going to be
282:09 - actually an empty string and you'll see
282:11 - why we use this so actually like
282:13 - depending on the problem type or like
282:16 - the difficulty of the problem we're
282:18 - gonna have different classes so here I
282:21 - want to fetch the data but before that
282:23 - let's just say return an object with the
282:25 - current current problem that we fetched
282:28 - the loading State as well as difficulty
282:31 - class
282:32 - so here I'm gonna have an asynchronous
282:34 - function so I get problem from DB so
282:37 - it's going to be cons to get
282:40 - um maybe like the current uh problem
282:43 - maybe async function and inside this
282:47 - first we'll say set loading to be true
282:51 - and at the end we're going to say it's
282:53 - uploading to false but let's just do the
282:55 - intermediary step which is going to be
282:58 - fetching the data so I don't know how to
283:01 - fetch the data so I'm gonna go back to
283:03 - Google uh to the Firebase documentation
283:06 - so just type get data from uh so from
283:10 - Firebase and open the first link so get
283:14 - a document right we previously did get
283:17 - multiple documents from a collection but
283:19 - now we would like to get only one
283:21 - document so click here and it'll take us
283:24 - to this code example so in the example
283:27 - they use this document method which they
283:30 - pass the database as well as the
283:32 - collection name and then as the last
283:35 - parameter they pass this document ID and
283:38 - they use get doc to get the document and
283:41 - then they check if it exists or not so
283:43 - we're going to be doing pretty much the
283:45 - exact same thing so let's just go back
283:48 - to vs code where I'm gonna say so first
283:51 - get the document reference so I'm going
283:54 - to say const document reference is going
283:56 - to be
283:58 - um that document method coming from
283:59 - Firebase if we take a look at it it is
284:03 - coming from here Firebase slash slash
284:05 - firestore and then below here we're
284:08 - gonna say so we're gonna pass actually
284:11 - the our database it's gonna be firestore
284:14 - and then we're gonna pass our collection
284:16 - name there's going to be problems and
284:19 - then the uh so did that look like fetch
284:22 - is going to be that problem ID so we're
284:25 - gonna pass the problem ID let's say it
284:28 - is twosome it is gonna fetch this to
284:30 - some object and it is gonna return us
284:33 - this data
284:35 - so that's why we're passing that
284:37 - and below this
284:40 - we're gonna say cons document snap and
284:45 - it's going to be equal to a rate
284:46 - document ref.get so maybe that was the
284:50 - old way that's why co-pilot suggests us
284:52 - but we're gonna say get talk
284:54 - and that should be importing from
284:56 - firestore as well
284:58 - and we're gonna pass this document
285:00 - reference so this is how it works with
285:02 - Firebase
285:04 - so now we're going to check if the
285:06 - document exists so we'll say const
285:09 - problem and it's going to be document
285:11 - snap dot data and now actually we can
285:14 - just console.lock this problem and you
285:17 - could say uh current
285:19 - problem is your problem is here and then
285:24 - we need to call this function right it's
285:26 - going to be a head current problem and
285:28 - for the dependence area we're going to
285:30 - add that problem ID that we're getting
285:32 - as the parameter so let's just save this
285:36 - and
285:38 - take a look at our localhost refresh the
285:40 - Page open the console
285:43 - and we'll get the current problem so
285:46 - this is the data that we have in our
285:48 - database right for the two sum we got
285:50 - the title ID category difficulty likes
285:53 - dislikes order and the video ID
285:56 - so for this we can so let's do the rest
285:59 - actually
286:01 - so at the bottom
286:02 - once we get got this data we would like
286:05 - to change our state rate so we'll say
286:07 - Set current problem to be an object so
286:12 - we'll say it's gonna get the ID which is
286:14 - gonna be the document snap dot ID and
286:20 - then we'll have we're going to just
286:22 - basically restructure the problem as be
286:25 - a problem
286:26 - so the last thing that we would like to
286:29 - do is going to be updating this set
286:31 - problem difficulty class now it can be
286:34 - either be easy or like medium or
286:37 - eventually it's going to be hard
286:39 - so we'll say that problem difficulty
286:42 - class so let's just expand this and
286:47 - we'll say if the problem is going to be
286:50 - a lowercase the problem that difficulty
286:52 - if it is easy so it should be uppercase
286:55 - or like
286:56 - um capitalized
286:58 - so if it is easy then our class name is
287:02 - going to be BG Olive and text all it so
287:06 - if it is not easy then there is two
287:09 - other
287:10 - um for the possibilities either is going
287:12 - to be medium or it's going to be hard so
287:15 - if the problem that difficulty is equal
287:18 - to medium then it's going to have
287:21 - BG yellow
287:23 - and text yellow I guess for text dark
287:28 - yellow as well as BG dark yellow
287:33 - and if it is not medium then there is
287:35 - only one chance or the option which is
287:37 - going to be that
287:39 - PG dark pink for the heart problem and
287:43 - then text dark pink
287:46 - so just like this and eventually we can
287:50 - set our loading state to false and now
287:53 - just save this one come back to here
287:56 - um so take this data from here we're
288:00 - gonna destructure it so we'll say get
288:02 - the current problem loading State and
288:04 - problem difficulty class
288:07 - foreign
288:10 - actually we would like to replace the
288:13 - data with the real data right now we
288:16 - have the light count display count and
288:18 - the difficulty so I'm just gonna
288:21 - actually
288:23 - cut this div from here and for a second
288:27 - I'm gonna cut it and I will say if it is
288:30 - not loading and if there is the current
288:33 - problem
288:35 - if you got this now we want to render
288:37 - this so I'm going to paste it again so
288:39 - here it's gonna be current problem that
288:43 - difficult okay and then here we're gonna
288:45 - have the current problem that likes
288:49 - and here we're gonna have
288:53 - um the current problem that dislikes
288:56 - and so far that should be good but also
288:59 - we would like to have that class name
289:02 - that we got
289:03 - so that should be inside this one so we
289:07 - can delete this text Olive BGR live this
289:09 - is going to be dynamic so dollar sign
289:12 - and the curly braces you're going to say
289:15 - problem difficulty class that is coming
289:17 - from our hook so now let's just save
289:20 - this
289:20 - and go back to our Local Host now this
289:24 - is the data that we got for the two sum
289:27 - great so it is easy zero likes zero
289:30 - dislike so far now let's just update
289:32 - this to some with difficulty of medium
289:35 - and let's say it's going to be medium up
289:37 - it is refresh this page it is going to
289:40 - be that
289:41 - um yellow color that we can see here and
289:43 - if you make it
289:45 - so
289:46 - to make it hard
289:48 - then it's gonna get that pink dark color
289:53 - as we can see in for a second it doesn't
289:55 - show us because it is in the loading
289:58 - State and maybe we could add some
290:00 - skeleton for this
290:02 - so I'm just gonna update this to some
290:04 - with easy this is how it should be
290:07 - so now this is the correct data we are
290:10 - going to come back after this
290:13 - um where it should be so after this
290:16 - loading stuff we will say if it is
290:18 - loading then we're gonna return
290:20 - something else so and render this
290:23 - portion and now let's take a look what
290:25 - are we doing in our original demo so if
290:28 - if you can see here now let me just
290:31 - slow down this little bit
290:34 - so fast 3G preface the page
290:37 - we have one rectangular one circular two
290:41 - more rectangular and one more circular
290:43 - skeleton so this is what you'd like to
290:45 - have so I'm gonna say
290:48 - um here we're gonna have a div with the
290:50 - with some classes it's gonna have class
290:52 - name margin top three flags base X to be
290:58 - two to give some spacing and now as we
291:00 - said before it's gonna have one
291:02 - rectangular and one Circle two more
291:05 - rectangular and then one more Circle so
291:08 - for this I can just say rectangular or
291:11 - like rectangle
291:13 - so rectangle skeleton
291:16 - rectangle skeleton I'm just gonna call
291:18 - this and then I will have
291:20 - Circle so Circle skeleton
291:24 - and then like two more rectangular
291:26 - skeletons
291:28 - and then one more Circle skeleton right
291:30 - and I'm just gonna create this at the
291:32 - bottom of our file or maybe let's
291:35 - actually create its own file so inside
291:38 - the components you're gonna have our
291:40 - skeletons folder
291:42 - Kelly so if I can type skeletons and
291:46 - then we're gonna have the
291:49 - Circle
291:51 - Circle skeleton
291:53 - that should be TSX
291:57 - and then
291:58 - rectangle
292:00 - dot TSX let's do a tfcd to get the
292:04 - boilerplate we don't need any props
292:07 - so delete this
292:09 - and inside our Circle for like rectangle
292:13 - skeleton let's just rename this
292:15 - rectangle skeleton
292:19 - and now we can just say oops
292:25 - so rectangle skeleton
292:29 - and then here we're gonna have some
292:31 - class names and two more tips I guess so
292:34 - the first one is gonna have class names
292:36 - of space
292:40 - um space y
292:42 - 2.5 and animate is going to be pulse
292:48 - and then inside we're gonna have one
292:50 - more div which is gonna have class names
292:53 - of flags items thinner and width of full
293:00 - X of 2 and then inside we will have one
293:05 - more div
293:07 - and it's going to have some class names
293:09 - it's going to be height of six width of
293:11 - 12 and then round it full
293:16 - if I can see that rounded full and an
293:19 - arc
293:21 - but actually like background is going to
293:23 - be a park fill of three
293:27 - and so it should be PG dark fill 3 like
293:31 - this and now we can save this it's going
293:34 - to be for the rectangle and for this
293:36 - circle we're gonna have some kind of
293:38 - similar stuff so we can delete props
293:43 - and
293:46 - so inside is gonna have some class names
293:48 - almost the same thing I don't know why I
293:51 - type everything from scratch so I'm
293:53 - gonna now import keys
293:55 - and import this one as well now let's
293:58 - save this
293:59 - and
294:01 - change this for so to no throttling so
294:04 - that we got our original state so I'm
294:07 - gonna refresh this now for a second we
294:10 - see that loading state
294:13 - so this is the output that we got we
294:15 - have that same loading skeletons as we
294:18 - have in our demo app
294:20 - so now we would like to so we would like
294:23 - to be able to like the problems and
294:25 - dislike the problems but before that we
294:28 - need something some data which is going
294:31 - to be if we already like the problem or
294:33 - we didn't so did we dislike the problem
294:36 - or we didn't because now there is no way
294:39 - to know if I already like this problem
294:41 - or not and depending on this we're going
294:44 - to update the UI so once I like it like
294:47 - it it's gonna be that blue button and
294:49 - then like count is going to be
294:51 - incrementing so for this we need to get
294:54 - the user's data on the problem
294:57 - so we're going to create one more hook
295:00 - and it's going to be again be at the
295:02 - bottom of our file
295:05 - so I am going to call it as some
295:08 - function so it's going to be a hook so
295:11 - that's why it should start with the name
295:13 - of use so use get a problem or maybe use
295:19 - get users data on
295:23 - a problem right we're gonna give the
295:25 - problem ID and it's going to be type of
295:27 - string and then we're going to do our
295:29 - logic here so if you didn't understand
295:32 - still like why we're using this hook
295:36 - um I think you're gonna understand that
295:38 - once we use this and get the data out of
295:41 - it so if you still didn't understand it
295:43 - let me just uh finish this hook and
295:46 - integrate it and then you're gonna see
295:48 - why we are using this
295:51 - so as always fetching data logic is
295:54 - going to be here so user f8 says I am
295:56 - here dude don't forget me so we're gonna
295:58 - import this and it's going to be in on
296:02 - Mount we're gonna add that dependence
296:04 - area later so it's going to have a
296:07 - function that gets the user's data on
296:10 - the problem and then we're going to call
296:12 - this function on get users data on
296:15 - problem and then here we're gonna have
296:18 - some state right so we're gonna have
296:20 - cons data set data and initially it's
296:25 - going to be an object right so it is
296:29 - going to have the like so light pulls
296:34 - dislike pulse start false and solved
296:39 - goals right so initially we're gonna
296:42 - think that user didn't like the problem
296:44 - didn't dislike didn't start and didn't
296:47 - solve the problem so it's going to be
296:49 - initial State and like immediately after
296:52 - we call this we're going to be fetching
296:53 - that data and then update this so here
296:56 - we would like to also get our user which
297:00 - is going to be coming from our old uh
297:02 - good friend which which was used both
297:05 - stage that is coming from react Firebase
297:08 - hooks so we're gonna pass our
297:10 - authentication object into this
297:12 - so and now we are ready to actually
297:16 - build this function so I'm gonna say
297:19 - const user ref it's gonna be the
297:23 - document firestore users so I will
297:26 - import this import the document maybe so
297:30 - actually we already imported that
297:32 - because we used it up here so from the
297:35 - users you're gonna have from the user's
297:38 - collection you will get the user.uid so
297:42 - we can say it's going to be all we are
297:44 - going to always have this user object so
297:46 - we can show it with a question mark and
297:49 - then below this we're gonna again have
297:51 - the user snapshot so that should be cons
297:56 - if I can type const user snap
298:01 - and then it's gonna be a way to get the
298:05 - document user ref so it will say if user
298:08 - snap is exists right if it exists then
298:12 - you will get the data from it so it's
298:14 - going to be
298:15 - usersnap.data so if you remember in this
298:19 - data so inside our the database for a
298:23 - user we had the liked problems array
298:26 - solved problems start problems and
298:29 - dislike problems array as well as these
298:32 - other
298:33 - sorted fields and in this case we would
298:36 - like to just get this arrays right so
298:41 - it's going to be cons
298:44 - structure this and by the way I I think
298:47 - here I said that we are destructuring
298:50 - this but actually we are spreading this
298:52 - okay that was kind of mispronounced so
298:55 - here we are gonna get the solved
298:58 - problems and then the light problems
299:01 - array problems and then it's like
299:06 - problems as well as the start problems
299:10 - right and it's going to be coming from
299:13 - the data and we would like to set this
299:16 - data if this light problems array
299:19 - includes this current uh the problem so
299:23 - we're gonna get we're gonna do the same
299:25 - thing for dislike problems uh start
299:27 - problems as well as the solve problems
299:30 - and this is going to be our state so if
299:33 - user
299:35 - um so inside that so so this is going to
299:38 - be actually that's like the problems
299:40 - array so it's going to have maybe two
299:44 - dash sum so that was the problem ID so
299:47 - maybe we would like if we're gonna have
299:48 - the jump game if you go there so solve
299:51 - this problem then it's gonna have these
299:53 - values and if this problem ID is inside
299:57 - this liked problems array then it's
300:01 - going to be returning true for this uh
300:04 - liked field so I think this is how I
300:08 - would explain this I think it could be
300:09 - explained a little bit better but I hope
300:12 - you get the point so we are going to be
300:15 - calling this function if we have a user
300:17 - right if you don't have user so if we
300:20 - are logged out so we cannot get that
300:23 - data right so we need to just self guard
300:27 - this by telling or like if God is we're
300:30 - going to say if we have user then call
300:32 - this function and one more thing when we
300:36 - uh so like unmount this project or like
300:40 - unmount this component not the project
300:42 - so we're gonna call this function so
300:45 - it's going to be running on unmount so
300:47 - it's gonna set this data to the initial
300:50 - state so let's just present this problem
300:53 - ID into here as well as well as the user
300:56 - so when I in our original demo when I go
301:00 - to the next problem it is gonna just
301:03 - um so it's gonna set this light disliked
301:06 - and solved and start stage two false
301:10 - initially and then it's gonna fetch it
301:12 - so when I go to the previous one this
301:16 - unmount function runs inside use effect
301:18 - and it set this data state to this
301:21 - object which is exact same as with this
301:25 - the default state right so this is why
301:28 - we are doing this and then at the bottom
301:31 - we're gonna say return an object which
301:34 - will get all the data as well as this
301:37 - fit data right set data so that we can
301:40 - so we're going to be using this later
301:43 - so I think this is the all function that
301:46 - we need so this will give us the
301:50 - um so the light dislike start and solved
301:53 - state of the user okay so now we would
301:56 - like to use this
301:58 - so go to above where
302:01 - we will use const so from here we'll say
302:05 - use
302:07 - um get users data on problem and we're
302:09 - going to give the problem ID and then
302:11 - we're gonna destructure some stuff it's
302:13 - gonna be if user like this select
302:17 - comma is like and solved
302:21 - set data and start
302:24 - and now I think we are ready to build
302:27 - our
302:28 - uh handle like dislike and start
302:32 - functions so when we click this it's
302:35 - gonna like or unlike and we're gonna
302:38 - click this it's gonna dislike or like
302:41 - undislike and then it's gonna start a
302:43 - problem or it's gonna unstart a problem
302:46 - but before we Implement that functions I
302:48 - just wanna do that hard coded because I
302:51 - just want to show you so inside this
302:54 - like stuff
302:56 - so where it was let me just find it
302:59 - um here
303:01 - so it is going to be here actually and
303:05 - we're gonna say if we didn't so like
303:07 - open actually braces we're gonna say if
303:11 - we like the problem okay we're gonna
303:14 - show this AI if you like okay
303:17 - so we're gonna cut this and just paste
303:21 - it and that should be maybe end end so I
303:24 - feel like you're going to give some
303:25 - class themes which is going to be text
303:27 - Arc blue s all right it's coming from
303:32 - that Tailwind config if you remember and
303:35 - then if it is unlike okay if we didn't
303:39 - like this then we're gonna show that
303:40 - without any classes so now save it and
303:44 - initially it is disliked straight we
303:47 - cannot like it so far that's why we are
303:49 - seeing it in this way and we have the
303:52 - user testing so I'm going to go to my
303:55 - database and inside users liked problems
303:59 - array I want to add some field into this
304:02 - it's going to be two dash sum so add
304:05 - this now this user has like this problem
304:09 - so refresh the page and hopefully we're
304:12 - gonna see that blue button right so
304:16 - this is what I mean so light is now true
304:19 - because this user so the liked problems
304:23 - array includes that problem ID which is
304:26 - the two sum and this evaluates the true
304:29 - and
304:31 - inside the dislikes array let's say it
304:34 - doesn't have that two sum right so
304:36 - inside the dislikes dislike problems or
304:39 - solved and start problems it doesn't
304:41 - have any Fields that's why they return
304:45 - pools so this is what I mean and now we
304:48 - can we are ready to build our handle
304:51 - like function so it is going to be this
304:55 - right
304:56 - so we're gonna say when we click this
304:59 - actually it's going to be this okay this
305:01 - function
305:03 - I'm sorry it's going to be this button I
305:05 - cannot speak today so I'm gonna say on
305:08 - click it is gonna preference the handle
305:11 - click function which we are going to
305:14 - create
305:15 - right now so I'm gonna say const handle
305:19 - click or maybe that should be handle
305:23 - like and the like
305:25 - so copy this paste it and then it's
305:28 - going to be an asynchronous function
305:30 - we're gonna do the like uh
305:34 - so the like logic here
305:37 - so first I'm going to say if we don't
305:39 - have a user so if we don't have a user
305:42 - then what I would like to do is I just
305:45 - wanna return from this function so it is
305:48 - not gonna run anymore and we have got
305:50 - some problems it could be so we are
305:54 - missing this Arrow so if we don't have
305:56 - user we're gonna return and before that
305:58 - we're gonna say post the error and we're
306:04 - going to say you must be logged in to
306:06 - like a problem and we can give some uh
306:10 - for the object the position is going to
306:12 - be top dinner as well as the theme gonna
306:17 - be let's say dark
306:21 - and we don't have this user it's going
306:23 - to be this user let's copy this come
306:27 - here paste it
306:29 - so take this above and yeah now if you
306:32 - don't have User it's going to give us
306:33 - this error so save it come back to here
306:36 - maybe in
306:37 - like now
306:39 - log out
306:41 - so save it just refresh this
306:44 - if I try to log in or I'm sorry if I try
306:48 - to like this it's gonna say you must be
306:50 - logged into like a problem so I want to
306:53 - actually make this the top left so that
306:55 - it'll give me from this side
306:58 - so try to like it'll it's gonna come
307:01 - from here I think it looks better
307:03 - so now I'm gonna log in
307:06 - so it was testing at test.com and John
307:11 - Doe now login it's gonna
307:14 - oops so it is not right so testing at
307:16 - key.com was in it like this
307:20 - testing at test.com
307:23 - now login
307:26 - so now we are inside we're gonna go to
307:28 - Tucson and we'll like this for some
307:31 - reason because we added it into our
307:33 - database so I'm gonna just exclude that
307:36 - from our liked problems
307:39 - um array so I'm going to delete this now
307:41 - if you refresh this it's gonna be false
307:43 - and we're not gonna have that blue
307:46 - button
307:47 - so now there are three states
307:50 - so our user might be already like the
307:53 - problem or maybe like this state he
307:56 - didn't liked it or he didn't dislike the
307:59 - problem when it when he clicked this
308:01 - like button the button will convert like
308:04 - the transfer to the blue button and then
308:07 - this count is going to be incremented by
308:09 - one so watch this
308:12 - so it's updating and now it's gonna be
308:14 - 11 and now the button is blue so the
308:17 - second case is if user already like this
308:20 - problem and still tries to like this
308:24 - problem one more
308:25 - so like once more let's just click this
308:28 - what's gonna happen so we cannot like
308:30 - twice this uh so the user is going to be
308:34 - unliking this problem so it's going to
308:36 - be decrementing by one and now we didn't
308:38 - like this and the last case is going to
308:41 - be if user is already dislike the
308:45 - problem so if he tried to like it what's
308:49 - gonna happen so if he cannot like and
308:53 - dislike the problem at the same time the
308:55 - light count is going to be incrementing
308:57 - by one and the dislike count is going to
309:00 - be decrementing by one now watch this I
309:03 - click this it's going to be 11 and now
309:04 - it's gonna be three so we got three
309:07 - cases and it is going to be like if he
309:11 - already liked if already disliked right
309:15 - already disliked and maybe neither
309:20 - so didn't like it and didn't dislike so
309:22 - when you click the like button it's
309:24 - gonna like it but if it is liked and you
309:27 - click like button again it's gonna
309:28 - unlike so the stuff that I just
309:30 - explained and so this function is going
309:33 - to be the really the most complicated
309:35 - one in this project so far it is because
309:38 - it it is gonna have really it's a lot of
309:41 - if else statements we need to handle and
309:44 - then there's one more stuff that is
309:46 - transactions okay we're going to be
309:49 - using Firebase transactions and what it
309:51 - really means is that I just uh created a
309:54 - diagram that I can explain better
309:56 - so here when you like the problem right
310:00 - when you click that like button what's
310:02 - going to happen so there is so there are
310:04 - gonna happen two different operations
310:06 - the first one is gonna be you would like
310:09 - to update the problems collection which
310:11 - means you're gonna increment the like
310:13 - count of the problem right when you
310:15 - click this it's going to be incrementing
310:18 - the light count and then you also need
310:21 - to update users collection which you
310:23 - need to add problem ID into liked
310:26 - problems array of that user because when
310:30 - that user log Dodge and then login back
310:33 - you need to hold that problem ID so that
310:36 - you can show hey you already like this
310:38 - problem and there you go a blue button
310:40 - right so when you like the problem if
310:44 - you update this and then the internet
310:46 - connection went off so you would not be
310:49 - able to update this one so this is not
310:52 - we want and to handle this Firebase
310:54 - really helps us and they introduce this
310:58 - um transactions where it is all of the
311:01 - operations is either gonna success or
311:03 - all of them is going to fail so this is
311:05 - what we would like to do and for this
311:07 - you'll we would like to go to the
311:09 - Firebase documentation so one last thing
311:12 - that before we get into the
311:13 - documentation so this idea allows our
311:16 - database something we called consistency
311:19 - so can
311:21 - assistant
311:22 - so your application or like your
311:24 - database is going to be even though
311:27 - they're in the different collections the
311:29 - data is going to be informed with each
311:31 - other so instead of let's say the inform
311:34 - but so they are going to be at the same
311:36 - kind of state the one of them is not
311:40 - going to be different than the other one
311:42 - okay so they are gonna act with each
311:45 - other so this is the benefit of
311:47 - transaction and now let's take a look at
311:49 - the documentation so I just typed in
311:52 - transaction file store to Google and
311:54 - click the first one so there are there
311:57 - is one one more thing that we call the
311:59 - batch rights so it is kind of similar to
312:01 - the transactions so it is but it's a
312:04 - little bit different where a batch rate
312:06 - is a set of write operations on one or
312:08 - more document and the transaction is a
312:11 - set of read and write operations
312:14 - and so we need to read some data
312:17 - beforehand so we're going to be using
312:18 - the transactions but I highly recommend
312:20 - you to just read this documentation so
312:23 - this page it is only maybe like five
312:25 - minutes read so you can take a look at
312:27 - the batch rates but I think I will go
312:29 - with the transactions so let's click the
312:32 - first one so updating data uh with
312:35 - transactions so as they say and as I
312:39 - said before so transactions will fail
312:40 - when the client is offline and so one
312:43 - more stuff read operations must come
312:45 - before write operations
312:47 - so this is really what you like to do
312:50 - and it just group multiple operations
312:53 - into a single transaction so we have
312:56 - like multiple group of operations but
313:00 - it's going to be uh so it's going to be
313:02 - come together and it's going to be act
313:05 - as one transaction so either it's gonna
313:08 - fail or it's gonna success
313:10 - and in their example they use this run
313:13 - transaction method pass their database
313:15 - they get a callback function with the
313:18 - transaction object and then read the
313:20 - data if it exists and do some update
313:23 - stuff so this is what we'd like to do
313:25 - and now let's build our handle like
313:27 - function
313:29 - so inside our handle like function I
313:32 - will set the code so I'm going to say a
313:34 - rate run transaction and it's going to
313:37 - be coming from the firestore Firebase so
313:41 - I will pass the firestore and then I
313:43 - will get my callback function with the
313:46 - transaction object
313:47 - so what I am going to do
313:49 - uh inside first I need to get my
313:52 - reference to the user wrap problem wrap
313:55 - and user data in the problem data so for
313:59 - this I'm going to say const user wrap
314:01 - and you're going to see why we need this
314:03 - so we're going to say document from
314:06 - firestore and get this user and then
314:08 - const problem graph I could say and it's
314:12 - going to be again from the problems and
314:14 - get this problem reference and then I'm
314:17 - going to say get the user document and
314:20 - now we should use transaction.get and we
314:24 - can see it here we use transaction.get
314:27 - and pass the reference
314:29 - so now we read our data for the user and
314:32 - now we're going to get the problem
314:33 - document or like the problem we're
314:35 - asking a problem document we're going to
314:37 - pass the problem reference and then now
314:39 - we have the
314:41 - user reference problem reference and
314:43 - user document as well as the problem
314:45 - document now we are going to say
314:48 - um so if both of them exists then we are
314:52 - going to say if user already liked the
314:55 - problem right so we got three cases so
314:58 - the first one is he or like did she
315:01 - already like the problem so in this case
315:03 - what you'd like to do we wanna up user
315:07 - reference by uh removing that problem ID
315:11 - inside that liked problems
315:14 - array so let's let me just comment it
315:18 - out so remove
315:20 - problem ID from liked problems on user
315:25 - data or like user argument and then
315:30 - the other case is we would like to
315:32 - increment the likes on the problem
315:34 - document so for this I'm going to say
315:36 - transaction dot update and here I'm
315:40 - gonna pass the user reference as well as
315:43 - an object this object is going to say
315:45 - liked problems
315:48 - and here what I'm going to do I will say
315:51 - get user document.data and filter the
315:56 - liked problems and just remove the
315:59 - current problem from that like problems
316:02 - array and then we would like to now up
316:05 - the problem document so we're going to
316:08 - get the problem ref and close this what
316:10 - we're going to do is just decrement the
316:12 - light count by one so we'll say like get
316:16 - the problem documented data likes count
316:18 - and -1 now this is we did all these
316:24 - inside our database now we need to show
316:26 - we need to update the UI right for this
316:29 - we we got some stuff in our uh so some
316:33 - stage not stuff but like here I forgot
316:36 - to also export this the Set current
316:40 - problem we also need to pass this here
316:43 - so we're going to get Set current
316:44 - problem and we're going to be updating
316:46 - that here so I will say control space
316:50 - get this Set current problem
316:54 - So Below these updates I'm gonna say Set
316:58 - current problem it is going to take the
317:00 - previous object like the previous date
317:04 - value and it's going to be returning an
317:05 - object with the previous
317:08 - values as well as we're going to be
317:11 - decrementing the likes count by one so
317:14 - so far we got some typescript errors and
317:17 - we're going to be handling that in a
317:19 - little bit and then we're going to say
317:21 - now we also need to
317:23 - since we that liked was true right if we
317:28 - liked then means the light is true now
317:31 - we need to make that false because we
317:34 - unlike this problem so we're going to
317:36 - say set data to have like only change
317:40 - the liked field so we're going to say
317:43 - get the previous state value and return
317:46 - an object with all the previous state
317:48 - and only change the like to be false
317:52 - so yeah this is actually what what we
317:55 - want to do in our liked case and now if
317:59 - like user else if dislike
318:02 - we're going to be doing something else
318:04 - and in the else case so neither like or
318:07 - neither already this late
318:09 - so
318:11 - what it says I cannot find this light so
318:13 - it should be this light and now we're
318:16 - going to be doing pretty much the same
318:17 - same thing here but let's just write it
318:20 - so we're gonna say transaction dot
318:24 - update and then we're gonna get our user
318:26 - reference Cloud close this object and
318:29 - then inside we're gonna say I liked
318:31 - problems just add that new problem ID
318:34 - into this so this is the case so I just
318:38 - want to make sure that we are all in the
318:39 - same page
318:41 - um
318:42 - so it's going to be this case so when
318:45 - user dislike this problem and now we are
318:47 - clicking this like button now what's
318:50 - gonna happen so the this icon
318:53 - decremented like can't uh increase right
318:56 - incremented
318:57 - so here we add that like problems into
319:00 - so that problem made into light problems
319:03 - and now also we'll take it from the
319:06 - dislike problems array we want to remove
319:08 - that problem ID
319:10 - now let's uh up a problem reference
319:14 - we're going to say transaction dot
319:16 - update and we're going to get the
319:19 - problem reference close this object and
319:21 - inside we're going to be doing is you
319:24 - just incremental Icon by 1 and decrement
319:26 - the display count also by one so we're
319:29 - going to say likes plus one dislikes
319:32 - minus one and now let's just update the
319:35 - UI it is going to be Set current problem
319:39 - so let me just take a look what it uh so
319:43 - what it suggests us so legs count is
319:46 - incremented
319:47 - with previous and dislikes count is
319:50 - decremented depending on the previous
319:52 - state so I think that looks good to me
319:55 - this is correct and then we need to also
319:58 - update the set data and it's going to
320:00 - change the like to true and select to
320:03 - false
320:04 - and with this I think we handle this
320:07 - case as well and now let's do let's just
320:11 - format this a little bit like this this
320:14 - and
320:16 - maybe like this
320:20 - now we're in the else case
320:23 - so this case is the easiest one so user
320:26 - didn't liked or didn't display it you're
320:28 - going to be only updating the like count
320:30 - by one and add that problem ID into the
320:33 - liked problems so we're gonna say
320:35 - transaction dot up up it and user
320:40 - reference close this object and we're
320:42 - going to say like problems into the like
320:44 - problems array add this problem ID which
320:47 - is going to be two sum in this case and
320:49 - then
320:51 - yeah and then we're gonna
320:53 - come here we're gonna say transaction
320:55 - dot update problem reference Clauses
320:58 - object and just increment the light
321:01 - count by one
321:04 - then update the UI because this is for
321:07 - the database stuff and now we need to
321:09 - show that it is updated on the UI we're
321:13 - going to say Set current problem hit the
321:15 - previous values and just incremental I
321:18 - count by one and then make the liked
321:21 - field to true
321:23 - so to be honest this is all we need for
321:26 - this function at least so far so now
321:29 - let's just save this and come back to
321:32 - our localhost and let's just hope that
321:34 - it's gonna work so refresh this just in
321:37 - case and when I click this it is for a
321:42 - second it it was loading and now as you
321:45 - can see it is updated the light count is
321:47 - incremented by one and I think that to
321:51 - some ID is added into the liked problems
321:54 - array
321:55 - um so let's take a look so just to make
321:58 - sure that it works so inside our users
322:00 - like problems as we can see this testing
322:04 - user has uh so inside that live problems
322:07 - array we got the two sum ID and then
322:10 - inside our problems
322:13 - so let's see two sum the light count is
322:16 - one so as we can see we increment the
322:19 - light count by one and update the user
322:22 - collection by adding that problem ID
322:24 - into this array and now the one thing
322:28 - left is just let's show that floating
322:31 - state for this we can create one more
322:32 - state it is going to be cons updating
322:36 - and set updating and initially it's
322:38 - going to be false right use State
322:41 - initially it's going to be false uh when
322:44 - we click this then it's going to be true
322:48 - so we can just delete this so we're
322:51 - going to say set up hitting or like yeah
322:55 - set updating to be true and at the end
322:57 - of this it's going to be here we're
322:59 - going to say set up reading to be false
323:02 - and if it is updating we don't want to
323:05 - like it again so if it is updating we
323:08 - are going to return out of this function
323:09 - and what it really means so here
323:13 - in our original demo so when I like
323:16 - dislike or like unlike it's gonna have
323:19 - that loading seat for a second now just
323:21 - watch this now I cannot click this again
323:23 - it just
323:25 - um dislikes me so like returns from that
323:27 - function so I cannot like dislike again
323:31 - um this is what we would like to do
323:32 - that's why we're adding this line on 28.
323:36 - so now let's just show that
323:39 - um like spinning animation so it is
323:41 - gonna be I guess
323:44 - here we add that
323:47 - um so maybe this this side very if it is
323:50 - light we show this button with this
323:53 - color
323:55 - oops and now here if it is liked and it
324:00 - is not updating right then we want to
324:03 - show this so I'm going to just type all
324:05 - of them and then explain I think you can
324:07 - understand that better so I'm gonna say
324:09 - if it is updating and we want to show
324:14 - um that the loading animation so it's
324:16 - going to be AI outline loading three
324:20 - quarters AI outline
324:24 - so I would line three quarters loading
324:27 - three quarters and close this it's gonna
324:29 - have some class names and actually it's
324:31 - gonna have only one which is gonna be
324:33 - animate spin so it is updating and we're
324:36 - going to be showing this if you didn't
324:38 - like we're going to show that gray
324:40 - button and if you're late and it is not
324:43 - updating right if because it's updating
324:46 - we would like to show this
324:48 - um that loading spinning spin so if it
324:52 - is light and up not updating we want to
324:54 - show that blue button
324:56 - now let's just save this and pass it
324:59 - once more so in our localhost I'm gonna
325:02 - I would like to refresh this and now I
325:05 - am gonna click this it is gonna unlock
325:07 - this and as you can see for a second
325:09 - that has that loading animation so once
325:13 - more let's try to uh like this and as we
325:17 - can see so there is some flickering
325:19 - effect what's going on here
325:22 - ah I just realized so here if it is not
325:26 - light and it is not updating so it is
325:30 - not live and it's not upbeating then we
325:32 - want to show that gray button and now
325:34 - save this and now that should be exactly
325:37 - the same as our original demo now I'm
325:40 - gonna click this it's gonna have that
325:41 - loading animation for a second and now
325:44 - let's just double check if you unlike it
325:47 - so now if you take a look at here we got
325:50 - one like in the twosome right we got one
325:54 - like and in the user's problem I liked
325:57 - problems you got that to some now let's
325:59 - just unlike this I'm going to click that
326:00 - once more now the light count is zero
326:03 - and this user doesn't have that twosome
326:07 - inside this array it's going to be
326:09 - removed and
326:11 - inside the two sum the light count is
326:13 - zero so it's it's really 100 working
326:17 - so now I think we are ready to build
326:20 - this handle this light functionality
326:23 - and actually before we build that uh
326:26 - dislike functionality I would like to
326:28 - just get rid of this typescript errors
326:30 - so here what it really says is that like
326:33 - this Set current problem that we have
326:35 - here is expecting the type of DB problem
326:39 - or it's going to be null right it's
326:41 - going to be one of them so here we need
326:44 - to return either that object or we need
326:47 - to return null so I'm going to say if
326:49 - there is that previous state on the
326:52 - previous value I'm going to return this
326:54 - object but otherwise I'm gonna return
326:56 - null so now it just
326:59 - um it is happy with us so we're gonna do
327:01 - the same thing here so I'm gonna see if
327:03 - there is previous and return this return
327:06 - this otherwise just return null and then
327:09 - the same thing here if previous return
327:12 - this object otherwise just return null
327:15 - so there might be some other solutions
327:18 - that would work but I think this is uh
327:21 - it's the most straightforward in our
327:22 - case so now we can actually create our
327:26 - handle dislike function so I'm going to
327:28 - come here and I'm gonna say const handle
327:31 - this Lake and it's going to be async
327:34 - function again so inside here we're
327:36 - going to have our logic and let's just
327:39 - copy this and we're going to attach it
327:41 - into here in the dislike button so I'm
327:44 - going to say on click we're gonna paste
327:46 - this handle so we're gonna call this
327:48 - handle this like function so here it's
327:51 - going to actually be really similar to
327:54 - the handle like okay so we're gonna say
327:57 - if
327:59 - it's actually let's just copy this
328:02 - um just copy this part and then here I'm
328:06 - gonna paste it you must be logged in to
328:09 - it's like a problem and if if you don't
328:11 - have user we're going to show this error
328:13 - and if updating we're gonna return out
328:15 - of this function and setup bidding is
328:17 - going to be true so we're gonna have a
328:19 - weight run transaction we're going to
328:22 - give our database as well as we're going
328:24 - to get our call like function with our
328:26 - transaction object and now there is
328:29 - going to be some repeated code which I
328:31 - would like to create a function for this
328:33 - so we're gonna get the user reference
328:35 - problem reference uh user document as
328:38 - well as the problem document so instead
328:41 - of this let's just create a function
328:42 - that will return us these data so for
328:46 - this I'm going to come back to here like
328:49 - I'm gonna go here I'm gonna say const so
328:53 - what name could we give this so it
328:54 - returns us the user and problem data so
328:57 - I'm gonna just say cons to return uh
329:01 - user header and problem
329:06 - so name is pretty long but it doesn't
329:08 - really matter as long as our code is
329:10 - readable so it's going to be an async
329:12 - function and I think it's going to take
329:14 - a transaction
329:16 - object because
329:18 - or maybe it doesn't right so I'm just
329:20 - gonna call this like this and I will say
329:23 - so copy oops just copy this
329:28 - and paste it so we're gonna definitely
329:30 - have a user here
329:33 - um so it's not going to be null we can
329:35 - tell to the typescript that it's not
329:38 - going to be null with this exclamation
329:39 - point and then it says transaction
329:43 - um so it doesn't see this transaction
329:46 - for some reason and this is because that
329:49 - should be called within this run
329:51 - transaction method so for this I'm gonna
329:53 - give transaction parameter and it's
329:57 - going to be type of any and
330:00 - so now it should work and eventually
330:02 - we're going to return the user document
330:04 - as well as the problem document and then
330:06 - here we're going to check if it exists
330:08 - or not so now I can safely just delete
330:11 - this and I'm gonna call
330:14 - um return user data and problem data so
330:19 - passive transaction into this and then
330:22 - it is going to be
330:24 - so it's going to be actually reading
330:26 - this
330:26 - because it's an asynchronous function
330:28 - and I am gonna restructure that data so
330:31 - it's going to be a problem document and
330:33 - user document
330:35 - so we update our handle like function
330:38 - now I'm going to copy this line and
330:40 - paste it
330:42 - right here but there is some error that
330:44 - I just realized so I'm gonna paste it
330:47 - here but so here we also need user
330:50 - reference so I'm just gonna actually
330:52 - return everything so user reference and
330:55 - problem reference and get them structure
330:57 - them from here so problem reference is
331:00 - user reference
331:01 - so now it works and we're gonna do the
331:05 - same thing on here we're gonna import
331:07 - this import user reference
331:10 - and yeah this actually should be it now
331:14 - we got the user document everything
331:17 - and now we're gonna check the same thing
331:20 - that we did here so copy this and
331:24 - paste it
331:26 - so close that if statement or like the
331:29 - curly braces now there is again gonna be
331:31 - if I think three cases where user
331:34 - already so already disliked when you
331:39 - click that button maybe that problem
331:40 - should be would be already disliked or
331:43 - already like and or like neither Keys
331:47 - it's going to be not slight or not light
331:50 - so let's just first do the if it is
331:52 - already displayed so if it is like then
331:56 - what do you want to do so we're gonna
331:58 - say transaction dot update here as a
332:02 - reference call this object and then
332:06 - um we would like to inside that it's
332:08 - like problems we want to just remove
332:10 - that current problem that we are on
332:13 - disliking right so I don't know how to
332:15 - say that but we are removing that
332:18 - problem ID from that this like problems
332:20 - array and then we also need to update
332:23 - the problem reference where we're gonna
332:25 - document that as I count by one and now
332:29 - we updated the database now we need to
332:32 - update the user interface so the UI
332:35 - we're going to say the current problem
332:37 - is
332:38 - uh what's happening here we're
332:40 - decrementing the light count by one and
332:42 - this light is going to be false right
332:45 - and then now this is gonna be in the
332:48 - display uh statement now else if it is
332:52 - light so else if
332:55 - oops else if like and now we're gonna do
332:58 - transaction dot update and we're gonna
333:01 - pass our user reference and now what's
333:04 - gonna happen if it is light and we are
333:06 - now trying to dislike it because we're
333:08 - in the dislike function
333:11 - so we are going to add this problem into
333:14 - our dislike problems
333:16 - um array great and then we're gonna
333:18 - remove that uh problem ID from our light
333:21 - problems array because we cannot like
333:23 - and dislike at the same time as we
333:26 - talked about it this before so now we
333:29 - would like to also update the problem
333:31 - reference as always we're gonna be
333:33 - decrementing uh account by one and
333:36 - incrementing this I can't by one so
333:39 - increment this and decrement this and
333:41 - now a UI we're gonna get uh this likes
333:45 - count as plus one and likes count minus
333:47 - one and then set the data I'm sorry
333:51 - we're gonna have the dislike as true and
333:54 - like the state is going to be false and
333:57 - now the last case which is going to be
333:59 - else so the user didn't like or didn't
334:01 - dislike and now tries to dislike it
334:04 - this kind of um I would say like is
334:07 - confusing but I hope you get the point
334:11 - so we're going to be doing that
334:12 - transaction update stuff where we're
334:14 - going to have user reference and now we
334:17 - are trying to add that into our dislike
334:20 - problems array and then let's up hit our
334:23 - problem reference where we increment it
334:25 - is like count by one and then update the
334:29 - UI with just like count plus one and
334:32 - then let's just accept all them and this
334:34 - slide state is going to be true and then
334:37 - at the end of this I think it should be
334:39 - this one yeah at the end of this our
334:41 - transaction we're gonna say set updating
334:44 - is gonna be false right so we got
334:48 - everything done in this function save it
334:51 - and now let's try to test it so just
334:54 - refresh this page
334:56 - and
334:58 - now we are in the two sum problem and if
335:01 - we take a look at our database
335:05 - so the two sums doesn't have any Lake
335:07 - doesn't have any dislikes and user
335:09 - testing user doesn't have any liked and
335:12 - dislike problems so far so let's just
335:15 - try to like it and immediately take a
335:17 - look at it as you can see it is real
335:19 - time
335:20 - um so it just added into this like
335:22 - problems and actually we need to we
335:25 - should be testing the dislike count
335:27 - so
335:29 - it doesn't really matter now likes is
335:31 - working and now let's try to dislike
335:33 - this so as you can see it worked but we
335:36 - need to update the UI with that button
335:38 - so we're going to be implementing that
335:41 - right now but let's take a look at our
335:43 - database so the problem to sum now this
335:46 - like count is one and like count is zero
335:50 - and it is matching with our uh UI so
335:54 - here also let's take a look at our users
335:57 - inside this dislike problems we got the
336:00 - two sum ID but in the like problems we
336:03 - don't have anything now let's just do
336:05 - the reverse now I'm gonna like it as we
336:09 - can see this documented and light count
336:11 - is incremented by one and if we take a
336:14 - look at our database as we can see it
336:16 - just replace it so it is fully working
336:19 - now let's just update the UI as we did
336:22 - before so it was decide
336:26 - so it is going to be here where we can
336:29 - just uh you can say if it is it's like
336:32 - and it is not updating and we're going
336:36 - to show this uh
336:39 - this button with this class names and or
336:42 - like this icon and then if it is not
336:45 - it's like
336:47 - so if it if it is not disliked and not
336:49 - updating then we're going to show this
336:51 - in gray button without any color and
336:54 - otherwise if it is updating then we're
336:57 - going to show that spinning uh like the
336:59 - spinner I'll save this and come back to
337:02 - here and if you try to dislike it you're
337:05 - gonna get that button as blue because
337:08 - wait where it is like this and it's not
337:11 - updating then we're going to give that
337:12 - class name and now let's just uh reverse
337:16 - this if we click this once again so it's
337:20 - going to be decremented by one so we got
337:23 - the like and dislike functionality and
337:25 - now let's try to add that starring
337:28 - functionality so
337:30 - go back to inside TBS code inside this
337:33 - button we're gonna say on click we're
337:36 - going to call the handle star function
337:39 - which I will create right now I'll come
337:42 - back to here cons Kindle start it's
337:45 - going to be an asynchronous function and
337:47 - inside you're gonna actually copy and
337:49 - paste these lines
337:51 - copy this paste it and at the end
337:54 - eventually we're going to say setup
337:56 - reading to be false and if you don't
337:59 - have a user so we're going to say you
338:01 - must be logged in to start a problem and
338:04 - if it is updating we're going to return
338:06 - out of it and now set updating is true
338:09 - now there is two cases when our user
338:12 - tried to start it so if he or she is
338:16 - already like started when they click
338:20 - that again it's going to be OnStar this
338:22 - problem right but if it is not start and
338:25 - when they click that it's gonna be start
338:28 - so this is what you'd like to do and for
338:31 - this we don't need to use any
338:32 - transaction because
338:35 - um we are only updating one collection
338:37 - or like one document and it's gonna be
338:39 - that users collection and then user
338:42 - document and field is going to be that
338:44 - start problems array we're gonna only be
338:46 - taking that problem ID and then we're
338:49 - going to be appending that into this
338:51 - array so we don't have any data inside
338:54 - this problem as we can see inside the
338:57 - problems documents we don't have any
338:59 - Star account or Star rate anything like
339:03 - that so for this we'll just use the
339:05 - normal updating stuff where inside this
339:08 - edit document uh so the documentation we
339:12 - see also there is updated argument and
339:15 - here this is what we'd like to do so go
339:18 - back to inside PS code if user already
339:20 - if not start the problem actually if
339:24 - user not start the problem then we're
339:26 - going to try to start it so I'm going to
339:28 - say const user ref and it's going to be
339:31 - document firestore
339:35 - um inside users collection and get this
339:37 - user with giving it ID so this is what
339:41 - they do and what we're doing and then
339:43 - we'll try to actually update the
339:46 - document so I'm going to say a rate of
339:48 - this document and user ref close this
339:51 - object and then we're gonna say that
339:54 - start so start problems and we're gonna
339:59 - say a reunion and add that problem ID so
340:02 - this is how we add a data inside inside
340:06 - an array with Firebase import this and
340:10 - now this is I think what we would like
340:11 - to do now we up the database and let's
340:15 - uh just reflect that into our UI and now
340:18 - that start field should be true that
340:21 - state and now in the else case if user
340:24 - uh not start the problem already if did
340:28 - not already start the problem we're
340:29 - gonna try to uh I'm sorry so user did
340:34 - not already start the problem we run
340:36 - this portion and if he or she already
340:39 - start a problem we're gonna do undo this
340:42 - right and for this I'm gonna say const
340:47 - user reference again the same user and
340:50 - update the document to this user ref and
340:53 - we're gonna remove that problem ID
340:56 - from this array I'm going to say start
341:00 - problems and remove array remove the
341:03 - problem ID and update UI we're going to
341:06 - say set data start is going to be false
341:09 - and setup meeting is now false as well
341:12 - but before we test this let's just come
341:15 - back to here and add that loading State
341:17 - into so this line
341:20 - so for now let's just cut this and what
341:23 - we're going to be doing is actually the
341:25 - same thing that we did here so if it is
341:28 - star and if it is not updating
341:32 - then we want to show aif we'll start
341:35 - with a class name of text dark yellow
341:39 - takes dark not blue but it's going to be
341:42 - yellow and
341:44 - yeah this is our class that is coming
341:46 - from tail with config so import this
341:49 - from react icons Ai and then if it is
341:54 - not start and it's not operating then
341:56 - we're gonna be doing this um let's say
342:00 - not this one but
342:02 - so this icon here is our outline
342:06 - so after that if it is up hitting then
342:09 - we're going to show that uh spinner and
342:12 - now if we save this and come back here
342:15 - try to test it now I'm gonna refresh
342:19 - this and as we can see inside our test
342:22 - user we don't have any uh problems
342:24 - inside this start problems array so I'm
342:27 - gonna try to oops so we got an error
342:30 - okay that's great I wanted to show you
342:32 - this actually so you got the hydration
342:34 - error but this is not related to
342:36 - Firebase so we can just ignore this for
342:39 - now we're going to be handling that soon
342:41 - just refresh this it's gonna hopefully
342:43 - be gone so now try to start this and as
342:47 - we can see we got that updating and now
342:49 - it has been started actually let's take
342:51 - it at least
342:53 - um so double check it inside your
342:55 - database so it has been added into this
342:58 - third problems and now let's try to undo
343:01 - this it is going to be removed from here
343:04 - and it update the UI and now everything
343:07 - works perfectly as we wanted to have now
343:11 - we disliked it and started
343:14 - start problems got the twosome and
343:16 - dislike problems also got the two sum
343:18 - and this is going to be working for all
343:20 - of our problems so let's try to go to
343:23 - home page and let's check the valid
343:26 - parentheses and select it and start it
343:30 - so here it's going to be inside the
343:33 - start problems we got the two sum as
343:36 - well as the valid parentheses and inside
343:38 - the light problems we got valid
343:40 - parentheses as well
343:41 - so this is working as expected
343:44 - and now also let's just remove this like
343:49 - check icon if we have not solved this
343:52 - problem yet so we're gonna say
343:56 - but actually we don't have that Salt
343:58 - Field right so it's actually false yeah
344:00 - we got this
344:01 - so that should be
344:05 - what was it I don't remember so maybe
344:07 - Bui okay BS check to Circle so maybe
344:11 - we'll take say just cut this for now and
344:15 - if it is sold
344:16 - so if it is solved then render this and
344:20 - paste it
344:22 - since it's gonna be false it's not gonna
344:24 - show us and we're going to be
344:25 - implementing that as well
344:28 - okay now let's just try to add this uh
344:31 - logic where when we click the next Arrow
344:33 - it will gonna take us to the next
344:35 - problem and when we click this previous
344:36 - Arrow it'll gonna take us to the
344:38 - previous problem so as we got here when
344:40 - I click this I will be at the next
344:42 - problem and when I click this it I'm
344:45 - gonna be in the previous problem as I
344:47 - can see here so there are three main
344:50 - cases here so the first one is when you
344:52 - or it'd be a less problem and you are
344:55 - still trying to go to forward so it's
344:57 - going to be taking you to the first
344:59 - problem and then the second case is here
345:02 - when you're at the first problem and you
345:04 - are trying to go backwards it's going to
345:06 - be taking you to the less problem right
345:09 - so we're going to be so we need to
345:11 - handle that logic and the third case is
345:14 - like when you're in the middle so no
345:16 - logic actually is needed you just need
345:19 - to when you click the next one you're
345:21 - gonna be only incrementing the order by
345:23 - one and when you're in the like when you
345:26 - go to the previous one you're going to
345:28 - be decrementing your order by one so
345:31 - these are the three cases that we need
345:33 - to handle so for this uh let's just go
345:36 - to inside PS code and it's going to be
345:39 - inside the top part component and so
345:43 - let's just create our function which is
345:45 - going to be cons to handle problem
345:48 - change and it's going to take a
345:51 - parameter it's going to be is forward
345:53 - and it's going to be type of Boolean so
345:57 - when you click the next problem this
345:59 - forward is going to be true so which is
346:01 - going to be this right button so I'm
346:03 - going to say on click handle change
346:05 - problem and it's going to be is forward
346:08 - to true and on the previous button it's
346:11 - gonna be false so on click and delete
346:15 - this queue it's going to be a handle
346:16 - change problem to be false and now we
346:19 - need to get the current order of our
346:21 - problem and I'm going to be doing this
346:23 - by using my router that is coming from
346:26 - xjs so I'm going to say Roger use Roger
346:29 - import this from next router so now if I
346:32 - just try to console.log rotor.query
346:37 - okay so I'm gonna save it and open open
346:41 - my console in my local host and when I
346:45 - click this next button I'm gonna get my
346:48 - router.query and it has a field called
346:50 - PID because this is what we called our
346:53 - file right inside so as we can see the
346:56 - problem page ID was PID that's why we
346:59 - get it so now I'm going to use this
347:01 - actually
347:02 - so I'm gonna say
347:05 - um so let's just get hit current order
347:07 - where I'm gonna say uh problems that is
347:11 - problems that is coming from util's
347:13 - problems and then brought your query
347:16 - that
347:18 - PID so now it's going to be to sum and
347:21 - it's gonna get through some object
347:22 - within this problem object so I'm just
347:25 - gonna console.log this just to make sure
347:28 - that we are in the same page so save it
347:30 - and now if I click this I will get it to
347:34 - some object and if we take a closer look
347:37 - we can see that we got a field called
347:40 - order so let's just try to destruction
347:43 - this I'm gonna say so delete this
347:46 - console.logs
347:47 - and then this structure this const equal
347:51 - to order
347:53 - and so we got it
347:56 - and we can type cast this by saying as
347:59 - string and this is going to be the type
348:01 - of problem it's coming from utils types
348:04 - to the local problem type and then so
348:08 - our direction is going to be if it is
348:11 - forward it's going to be one otherwise
348:14 - it's going to be negative one right and
348:17 - then so get next problem order now const
348:20 - next problem order and it's gonna be
348:25 - order plus Direction so let's say we're
348:28 - in the first problem and we're trying to
348:30 - go to forward then it's going to be one
348:33 - plus one and let's say we are in the
348:36 - second problem and so we are trying to
348:40 - go backwards it's going to be 2 minus
348:42 - one it's gonna be one so the first
348:45 - problem and when we are in the first
348:48 - problem if you are trying to go
348:49 - backwards we're going to get the order
348:51 - of zero so this is not what we want so
348:53 - we're going to be handling that and it's
348:56 - gonna be one of the cases that I just
348:58 - mentioned
348:59 - so this is the next problem uh order and
349:03 - now let's just do that if else
349:05 - statements so if we are trying to go
349:08 - forward and there is not any next
349:12 - problem so next problem
349:16 - key and we need to create this next
349:18 - problem key so const next problem
349:22 - he which is going to be object the keys
349:27 - testing problems object and then from
349:31 - this we need to find it so each key so
349:35 - just Loop through them and problems the
349:38 - key dot order if it is equal to the next
349:43 - problem order so if this is the case
349:46 - so this is going to find the next
349:48 - problem order actually let's just uh
349:50 - console.log is so I know this is kind of
349:53 - complicated but you just need to take a
349:55 - look at code for a second so save it and
349:59 - if you are if I am in the first problem
350:01 - in the two sum when I click this it will
350:04 - get me to the like the next problem key
350:07 - which is going to be that reverse link
350:09 - list because in the home page
350:13 - um so the second problem is reverse link
350:16 - list now within this if I try to go
350:19 - forward what I'm gonna get is Jump game
350:22 - right because this is the third problem
350:24 - in our home page
350:27 - um so if we here try to go backwards
350:30 - that direction or like the next problem
350:33 - key right so the next problem key is
350:36 - undefined so we need to handle that
350:38 - so let's just try to do that first case
350:41 - where when we are in the last problem
350:45 - and we are still trying to go forward
350:48 - right we will get undefined so we need
350:50 - to push our user to the first problem so
350:55 - let's do this so I'm going to say
350:57 - if we are trying to go forward and there
351:01 - is not the next problem key
351:03 - not so let's just add that exclamation
351:06 - point and then we're gonna get the first
351:09 - problem key const first problem key and
351:14 - we're gonna say object dot piece and
351:18 - pass the problems inside and try to find
351:21 - so that should be a DOT and let's try to
351:25 - find that first problem key so I'm going
351:27 - to say Loop through each key and
351:30 - problems dot e dot order okay if it is
351:35 - equal to
351:37 - um if it's equal to one right and you
351:40 - are going to be pushing our user to that
351:42 - page so save it now let's try to do this
351:45 - in our last problem we are trying to go
351:48 - forward it's going to take us
351:51 - oops it take us to the twosome but that
351:54 - should be problems actually we uh so we
351:58 - missed an S here so save it and now
352:01 - let's go
352:03 - to this problem again
352:04 - so when I click this it is going to take
352:07 - me to the two sum so this is the first
352:09 - case and now if you are in the first
352:11 - problem and we are trying to go backward
352:13 - so let's try to do this what else if if
352:17 - it is not forward right and
352:21 - if it is so we don't have any next
352:24 - problem key we will try to get to the
352:27 - last problem key so we're going to say
352:29 - cons Last Problem D and it's going to be
352:35 - doing the same logic where if it's equal
352:37 - to the length so you just read this line
352:40 - to get it and we're gonna push our user
352:43 - to this page so now save it in inside
352:47 - our localhost if I try to go backwards
352:50 - from our first problem I will get to the
352:53 - next problem so the last problem and I
352:56 - click this I will get to the first one
352:58 - so now if I let's just do the last case
353:02 - this is going to be the regular one so
353:05 - I'm gonna say const or actually just
353:08 - Roger that push to the next problem key
353:10 - which is this one that we got
353:12 - so that should be it so from the two sum
353:16 - now I can go to forward forward
353:19 - backwards right it's kind of working
353:21 - fully perfect and this is what you'd
353:24 - like to have so I kind of feel like this
353:27 - function looks like a little bit
353:29 - complicated but just pause the video and
353:32 - read it for a second like maybe five
353:34 - minutes at most you should be able to
353:36 - understand it
353:38 - um not really complex stuff there is
353:40 - only like a lot of key handling going on
353:42 - here but this is our function that we
353:45 - have
353:46 - okay
353:47 - so previously we got an error of
353:50 - hydration and I said that we're going to
353:52 - be handling that soon or later now it is
353:56 - time to handle that and to handle that
353:59 - you need to understand what hydration
354:01 - means and I will I like highly recommend
354:05 - you to read this uh create blog post
354:07 - that has been written by Josh and it
354:11 - just covers everything that you need to
354:13 - know and as well as the solution I will
354:16 - immediately get into the solution but
354:18 - basically white hydration really means
354:20 - is that what has been rendered on the
354:23 - server and client if it if they don't
354:27 - match you will get an error so and
354:30 - specifically you will get the hydration
354:31 - error so to solve this you will have you
354:34 - so you need to kind of create a hook
354:38 - that says has mounted and let's just
354:41 - copy this and when we implement this
354:43 - you're going to be like you'll
354:44 - understand that better so inside the vs
354:47 - code
354:48 - um so let's create hook so collapse
354:51 - everything inside source not public so
354:55 - let's have a folder called Hooks and I'm
354:58 - gonna say use has mounted that on yes
355:04 - so I will just paste it so what we got
355:07 - and maybe
355:08 - instead of react we could just import
355:11 - the use effect
355:14 - from here
355:16 - so import
355:18 - ant use okay
355:21 - and use state
355:23 - from react
355:25 - so just delete this and eventually at
355:28 - the end you would like to return this
355:30 - has mounted State
355:32 - and also the component I'm going to say
355:34 - export default use has mounted so we
355:39 - have a state once this hook has been
355:42 - initialized like on Mount we got this
355:45 - has mounted to be true so now just save
355:48 - this and inside the home page
355:51 - so that should be index.psx
355:56 - so that was our home page and now we can
355:59 - basically use this so I'm gonna say
356:02 - const has mounted that is coming from
356:04 - use uh has mounted and just call it so
356:10 - here if it is not mounted still we're
356:13 - gonna return now so we're not gonna
356:15 - return anything until the our component
356:18 - has mounted and this is the solution so
356:21 - I again highly recommend you to read
356:23 - this
356:24 - um blog post so at most it's going to
356:27 - take you 10 minutes to read all of it
356:29 - and yeah this is our solution
356:32 - so now let's try to add code submission
356:35 - so this is the correct code for the
356:37 - Tucson problem and when we submit this
356:40 - we get this confetti as well as this
356:43 - congratulations message if it passes so
356:46 - for this we're going to be using a
356:47 - package called react confetti so let's
356:51 - just install this I will come back to
356:54 - here open up a new terminal and I'm
356:56 - going to say npmi react to confetti so
357:01 - just install this and we're going to be
357:03 - adding this into the workspace so inside
357:06 - the source components workspace
357:10 - so here we're gonna have that confetti
357:13 - so I'm gonna say import
357:18 - confetti from react confetti so this is
357:22 - going to be that container so I'm going
357:25 - to say confetti and so it's gonna have
357:29 - some parameters or props so the first
357:31 - one is going to be the gravity so it's
357:33 - going to be like how fast it's gonna be
357:36 - coming down so it's going to be a 0.3
357:40 - and we're gonna have three in duration
357:44 - going to be basically like how many
357:46 - seconds it's gonna take
357:48 - and for us we're gonna put four seconds
357:51 - and then
357:53 - it's gonna have the width and height so
357:55 - for now let's just uh skip that so save
357:58 - it and now here in our demo
358:07 - so it only shows it in this uh top left
358:11 - corner so to just make it full width
358:13 - we're gonna add to one hook which is
358:15 - gonna be uh calculating the width of our
358:18 - screen uh dynamically so inside the
358:22 - hooks I will create one more hook called
358:25 - choose window size dot yes and now I'm
358:30 - gonna paste it which is going to be this
358:32 - hook I have got this from the chat GPT
358:35 - so it doesn't really matter it just
358:37 - calculates the height and width of our
358:39 - screen so I'm gonna save it and now here
358:43 - we would like to use that width and
358:45 - height so I'm gonna say use window size
358:48 - and call it so
358:52 - from here we're gonna say const with and
358:56 - height
358:57 - and we're gonna pass it so it's gonna
359:00 - have with as with
359:03 - and height as the height
359:06 - I'll save it
359:08 - here we're gonna see that it takes the
359:11 - full screen but there is like one pixels
359:13 - of overflow so just to solve this
359:17 - um
359:18 - what we're going to be doing is gonna be
359:19 - just minus one from the width and -1
359:22 - from the height so now save it and
359:26 - hopefully it's gonna work without any
359:27 - overflowing stuff
359:29 - so we're not going to be showing this
359:31 - unless we submit the problem so we're
359:34 - gonna have one state for this so I'm
359:37 - gonna say const success
359:40 - And subscribe and set success and
359:43 - initially it's going to be false and
359:45 - import the use state
359:48 - so use State coming from react
359:51 - so just cut this Line it's gonna be if
359:55 - it's success then show that line that we
359:58 - just cut it so save it now it's not
360:02 - gonna show it because initially it's
360:04 - false and now if you make it through
360:06 - it's gonna work and it's gonna show that
360:09 - confetti
360:11 - so now let's actually try to implement
360:13 - that code submission so for this I'll
360:16 - come back to here and I will first
360:18 - change this to false and I want to send
360:21 - this set success uh function into this
360:25 - playground because we're going to be
360:27 - changing that success stage once we
360:30 - submit the code correctly so I'm gonna
360:32 - send this so it's going to be set
360:34 - success and inside the playground we're
360:37 - going to be taking that prop so it's
360:39 - going to be set success and it's going
360:42 - to be dispatch and Boolean so this
360:45 - structure this and now inside the editor
360:49 - footer we had that submit and run
360:51 - buttons so for this I will create a
360:54 - function that that says fonts handle
360:56 - submit and it's going to be just a
361:00 - function that alerts for now let's just
361:04 - submit it and or like maybe submit so
361:08 - I'm gonna send this function into this
361:10 - so I'm going to say handle or like yeah
361:14 - handle submit and I'm gonna say handle
361:18 - submit function so this component need
361:22 - to take this function so I will click
361:25 - this and as prop we're going to say
361:28 - handle
361:30 - handle submit it's going to be a
361:33 - function that returns nothing
361:35 - so this structure this function that's
361:37 - going to be handle submit and on
361:40 - collected this function as well as this
361:42 - function or like this button we're going
361:45 - to say on click
361:47 - just call that Kindle submit
361:51 - and so let's save this save this and
361:54 - save this one so when I click to this
361:57 - buttons it's just gonna alert as submit
362:00 - so this works as well now here what
362:03 - we're going to be doing is that inside
362:05 - the code mirror like that code editor
362:08 - that we had on change
362:10 - we are going to call a function called
362:12 - on change and let's just initialize it
362:16 - the const on change
362:19 - on change so it's going to be taking a
362:22 - value it's going to be the Playbook
362:24 - string and then here we're going to say
362:26 - console.log the value
362:28 - so save it
362:30 - and take a look at it in our console so
362:33 - I'm gonna open up here and in the
362:36 - localhost now if I try to write
362:38 - something I will get that latest code
362:40 - that I had in the editor so now I would
362:43 - like to save this right this is the user
362:45 - code I'm going to say const user code
362:49 - and set user code is going to be
362:53 - an empty string or actually it's not
362:55 - going to be empty string but it's going
362:57 - to be that problem
363:01 - problem the starter code so it's going
363:04 - to be that boilerplate initially and
363:06 - then once we try to change or when we
363:09 - type something in we would like to
363:11 - update that state with the latest value
363:14 - now we we are ready to build this handle
363:19 - submit function so first if if we don't
363:23 - have a user rate you would like to just
363:25 - return some errors so I'm going to say
363:28 - if not user then let's get the user from
363:31 - here we're going to say cons user is
363:34 - going to be used oh State and then we're
363:37 - gonna pass the authentication object
363:39 - that we had so now if you don't have a
363:42 - user I'm going to say toast and import
363:45 - this error please log in oops twist that
363:49 - error please
363:51 - log in to submit your code and let's
363:56 - give it some uh so to say like options
363:59 - I'm going to say position oops position
364:02 - and it's going to be top Center and Auto
364:06 - close gonna be three seconds in theme is
364:09 - going to be dark
364:13 - and then we're gonna return out of it so
364:15 - we're not gonna run the rest of the
364:17 - function
364:18 - so we handle our error if we don't have
364:21 - a user now what you'd like to do is to
364:24 - try to run our code right so I'm going
364:27 - to get give some try and catch block and
364:30 - I'm gonna make this asynchronous so that
364:32 - we can do some database stuff here
364:35 - so first of all I'm just gonna say
364:38 - um so let's just do the catch uh stuff
364:42 - here so I'm gonna say
364:44 - just post or maybe like console.log the
364:49 - error for now at least and then in the
364:52 - try block we will try to run the user's
364:55 - code so for this let's what I'm going to
364:58 - do is I'm going to say just cons to
365:00 - callback it's gonna be new function and
365:05 - what we're going to be doing here is
365:06 - that like we have a string right this is
365:10 - our string and we need to convert this
365:12 - into a function so that we can run it
365:15 - and evaluate its value
365:17 - so to make it from this like from a
365:21 - string to have a function we can use
365:23 - this new function Constructor that is
365:26 - built in in JavaScript so here I'm going
365:29 - to say return the user like dollar sign
365:34 - and user code so if we execute this it's
365:39 - going to give that user's code as a
365:41 - function not a string
365:43 - so now we would like to test this and
365:47 - I'm going to say result
365:49 - and we're gonna pass this into that
365:53 - um so the problem uh so the Handler
365:55 - function so let me just type in and I'm
365:58 - going to show you it's going to be from
366:00 - the problems that is coming from utils
366:02 - and we'll say PID which we are going to
366:06 - take from our
366:08 - um so the router so I'm going to say
366:10 - const launcher and it's going to be use
366:13 - router now if you remember router was an
366:17 - object that has the query field right to
366:20 - query and then query has APK the field
366:23 - so now I just destructured it like this
366:26 - and this is how you can do multiple
366:28 - destructuring in one line
366:31 - so we got the PID now PID as string and
366:36 - then we would like to just run that
366:38 - Handler function and then we're going to
366:40 - pass the Callback inside
366:42 - so far we have a typescript error but
366:44 - we're going to be handling that soon so
366:46 - now what are we doing here so we got the
366:49 - user's code and converted it into a
366:52 - function now we get it as a callback
366:55 - function or like just a regular function
366:57 - but we're going to pass it as callback
366:59 - function so here inside the problems so
367:02 - let's take a look at it so
367:05 - problems.pid so so far we are in the
367:08 - which problem like search the 3D Matrix
367:11 - so it will come to here okay so it's
367:15 - gonna pass this search 3D Matrix here
367:17 - and then it will try to run the Handler
367:21 - function and pass that callback into it
367:24 - so it's going to try to run this Handler
367:27 - function which is this one right search
367:30 - it 3D Matrix Handler and it's going to
367:32 - pass that callback here as a function
367:35 - and then we will try to
367:38 - run that function for all of our test
367:40 - cases and if it passes all of them so if
367:45 - it is equal to the result so result is
367:47 - equal to answer then at the end we're
367:50 - going to return true but otherwise we're
367:52 - gonna throw an error so
367:56 - so now I'm gonna say if the result right
368:00 - or like I can say this could be success
368:03 - because it's going to be either true or
368:05 - false now I'm going to say if success
368:08 - then I would like to just say uh maybe
368:12 - post a success
368:15 - um so let's just take this and change it
368:17 - so congrats
368:20 - congrats and all has passed
368:27 - so it's going to be on the top Center in
368:29 - autoclase three seconds theme dark and
368:33 - set success is gonna be true now that we
368:35 - were getting as a prop and now after
368:39 - this so
368:41 - once the set success is true we are
368:44 - going to show that
368:45 - um confetti and we don't want it to have
368:48 - like for the
368:50 - um so you want to remove that after like
368:53 - three or four seconds now I'm gonna say
368:56 - set timeout after this uh toast.success
369:01 - right I'm gonna say set timeout and just
369:06 - initialize it like this
369:08 - and give it like four seconds
369:11 - and I'm gonna say set success now should
369:14 - be false
369:16 - so now if we save this and come back to
369:20 - here inside let's try to solve it to
369:22 - some and I'm just gonna get the solution
369:25 - from here so I can just copy this and
369:29 - I'm gonna paste it now if we try to run
369:32 - this or submit this we're gonna get is
369:35 - congratulation message because our test
369:37 - passes now let's just do some errors so
369:41 - it's not going to be the correct code
369:42 - and now we're gonna get an error in our
369:46 - console and as we can see it says uh
369:50 - expected values to be strictly deep
369:52 - equal so basically this is our error so
369:55 - now we can basically just come to here
369:58 - and say toast dot error that error but I
370:01 - want to just show some L bit better
370:05 - error message so I'm gonna say if error
370:09 - write error in the message if it starts
370:13 - with okay
370:15 - so and just come here and try to copy
370:18 - this portion
370:21 - so if it starts with this and I know
370:23 - that it is an assertion error so the
370:26 - expected value is not equal to the one
370:30 - that we're expecting so I'm gonna just
370:32 - copy it and paste it
370:35 - so we got an e here so if this is the
370:39 - case then we're gonna say
370:43 - closed
370:45 - dot oops it was that error so we'll say
370:49 - oops
370:51 - one or more test cases failed
370:56 - and we're gonna pass our object inside
370:59 - but first let's just correct this
371:03 - and we're gonna pass our object so it's
371:05 - going to be position tab Center Auto
371:07 - close and theme dark
371:09 - so otherwise so this is going to be also
371:12 - type of any
371:13 - and now if this is not our message in
371:16 - the else case we're just going to say
371:18 - toast.error
371:20 - and it's going to be here I'm sorry this
371:22 - is going to be else plus that error just
371:25 - something ran wrong or maybe the
371:28 - error.message we can show it here so
371:31 - error the message
371:33 - so now let's try to do this and in this
371:37 - case if we write the wrong code we are
371:40 - going to get an error and it's gonna say
371:42 - so didn't we save it
371:45 - so actually saved it now let's try to do
371:47 - this one more
371:50 - and try to copy this paste it inside
371:56 - so that was the correct code but now
371:58 - let's try to run code
372:01 - so I think we copied that
372:04 - wrong so let's just come here and
372:08 - console.log the error again
372:11 - or like error.message maybe
372:18 - so now submit this
372:21 - okay so if it starts with this I'm going
372:23 - to just copy this and replace this
372:28 - here so if this is the case then we're
372:31 - gonna say test cases failed
372:34 - so here now let's try to do this one
372:36 - once more so I'm gonna submit it's gonna
372:38 - say one or more test cases failed
372:41 - and yeah this is actually the function
372:44 - that we are doing so let me just quickly
372:46 - reiterate what we are doing here
372:48 - so first we check if the user is not
372:51 - logged in then we're going to show this
372:53 - error and remove like get out of this
372:56 - function and then if you have a user we
372:59 - will take the user code and convert it
373:01 - into a function then we store it inside
373:04 - the Callback variable we're gonna pass
373:06 - it into our Handler function as a
373:10 - callback function so currently we're in
373:13 - the two sum problem right and our PID is
373:16 - two sum as you can see here
373:18 - so inside the problems object we're
373:21 - going to find the two sum which is going
373:23 - to be this object and then from here
373:27 - we'll try to call that Handler function
373:30 - I'm just going to call this Handler to
373:32 - some and we pass that callback and we'll
373:36 - Loop through our test cases and all of
373:40 - them passes successfully then we're
373:42 - gonna return true otherwise we're gonna
373:44 - throw an error and then we're gonna if
373:48 - we have an error we're gonna catch it
373:50 - here and we will show some error
373:53 - notifications but otherwise we are gonna
373:56 - show that congrats message and now we
373:59 - would like to since we solve the problem
374:01 - correctly we would like to add this into
374:05 - our database
374:07 - so inside this if success uh close I'm
374:11 - gonna come here I'm gonna say const and
374:14 - user wrap so if you remember in our
374:17 - database so here
374:20 - inside our users we had a solved
374:23 - problems array now we would like to push
374:25 - it into here so here I'm going to say
374:28 - use ref so it should be I think document
374:31 - right so document imported from Firebase
374:35 - and pass the firestore inside users
374:38 - collection and our current user
374:42 - so we got user reference now you would
374:44 - like to just update that field or the
374:47 - update that user reference I'm going to
374:49 - say update the document import this and
374:51 - I'm gonna pass user reference with an
374:54 - object so I'm going to say solve
374:56 - problems it's going to be array Union
375:00 - right it's going to add that PID inside
375:03 - to the solved problems array so save it
375:06 - now once we submit this right
375:09 - here so I'm gonna just
375:12 - this is the correct code I'm going to
375:14 - try to submit this it's gonna say
375:16 - congrats all tests past and now if we
375:19 - just refresh this we are gonna get that
375:22 - check mark because we solved the problem
375:24 - and if we take a look at it in our
375:27 - database we're going to see that this
375:29 - user has two sum inside the solves
375:31 - problems array so one more optimization
375:34 - that I would like to do
375:36 - so let's just remove this from here
375:40 - so another user did install this problem
375:42 - and we got a hydration error in the
375:45 - problems page as well we're gonna handle
375:47 - this in in a minute so if you just
375:50 - refresh the page We're not gonna get
375:52 - that submitted uh or like sold check
375:55 - mark so I want to get this whenever I
375:59 - when I submit this okay if I pass then I
376:04 - immediately wanted to have here I don't
376:06 - want to refresh the page to see that if
376:09 - I solved it or not so this is kind of a
376:13 - better user experience and for this I
376:15 - will come inside the workspace right so
376:19 - I'm gonna say const
376:21 - and I'm gonna say sold it's going to be
376:24 - a state sold and set sold and initially
376:27 - it's gonna be false okay I'm gonna send
376:31 - this sold uh function or like the state
376:35 - so I'm going to say salt and maybe that
376:38 - should be underscore sold and press that
376:41 - solved inside open up the problem
376:44 - description so here if you remember we
376:47 - already have a solved field that is
376:49 - coming from the database now also I'm
376:52 - gonna have once one more that is going
376:55 - to be the Boolean but it's going to be
376:57 - the local state so I'm gonna say
376:59 - underscore salt and when I am going to
377:03 - change this is once I submit the problem
377:07 - inside here so here I'm gonna say uh
377:12 - playground should get that is that
377:15 - so set solved state or like function set
377:19 - so pass it here and inside the
377:22 - playground we're gonna get that as a
377:25 - prop
377:26 - so here just import this
377:29 - and
377:31 - when I submitted successfully right at
377:33 - the bottom here I'm gonna say that sold
377:36 - to be true
377:40 - now I'm Gonna Save this file in here
377:42 - what I'm going to be doing is that we
377:45 - got some like solved and
377:48 - if we solve then we're gonna show that
377:51 - check mark but I'm gonna say if it is
377:53 - solved or okay so or if it is underscore
377:58 - solved right if it is just sold right
378:02 - um then I wanna render this portion so
378:06 - what are we doing here so initially
378:08 - we're gonna check if this problem has
378:10 - already been solved if it has been
378:12 - solved then we're gonna show that check
378:14 - mark if it is not been solved and when
378:17 - the user tried to click that submit
378:19 - button if that passes this is going to
378:22 - be true and if it's if it's that true
378:25 - then we're gonna show it so now let me
378:27 - just show you I think you're gonna
378:28 - understand this I'm Gonna Save it here
378:30 - and come back to here now I'm gonna
378:33 - delete this from here okay
378:36 - and
378:38 - I'm just gonna refresh the page
378:42 - now I will get the solution and this
378:44 - problem is not been sold yet I'm gonna
378:47 - paste it and this is the correct code
378:49 - when I submit this just watch this it's
378:52 - gonna immediately update in real time
378:54 - because our state has been is gonna
378:56 - change and now when I click the submit
378:59 - as you can see I got that submission
379:02 - check mark here so this is how we can
379:05 - mutate your state or like have them in
379:09 - like in concurrent state with your
379:11 - database
379:13 - um I just want to show you guys uh this
379:15 - one so
379:18 - now we can try to have this code in our
379:22 - local storage because watch what's gonna
379:24 - happen when I refresh this I just lost
379:27 - that code that I just submitted so I
379:30 - want to save it in our local storage
379:33 - and before we do that I actually want to
379:36 - solve that hydration error in our
379:38 - problem page so here I will come back
379:41 - into pages so here inside the home page
379:45 - we added it so which was this two lines
379:48 - I'm going to copy this and come here and
379:51 - paste it
379:52 - to here and import this
379:56 - and now that should be that error should
379:59 - be gone and if you get it
380:02 - anytime I mean like when you refresh the
380:05 - page just let me know in the comments or
380:08 - ask it in my Discord channel so now
380:11 - let's try to add the local storage
380:14 - so here I would like to just come back
380:16 - into vs code and I think it's going to
380:18 - be inside the playground where we were
380:21 - changing the value of the code editor so
380:25 - we're not gonna only update the state
380:27 - but I'm gonna also say local storage dot
380:29 - set item and
380:32 - that item it's gonna be back takes it's
380:35 - gonna be code dash problem ID and we're
380:39 - gonna pass the value by stringifying it
380:41 - so we're gonna stringify it and we're
380:44 - gonna have it in our local storage so
380:47 - now if we take a look at it in our
380:48 - console application here whenever I type
380:52 - something in like as you can see it is
380:55 - updating in real time so hi this is
380:58 - working so this is uh in our local
381:01 - storage now what I'm gonna do is inside
381:04 - a user effect I'm gonna fetch it so I
381:07 - will say use effect
381:09 - and initialize it on Mount for now
381:15 - and let's import this use effect so use
381:18 - State as well as the use effect
381:22 - here
381:26 - I will say let's get the code from the
381:29 - local storage I'm gonna say local
381:32 - storage and get the item and with the
381:36 - code dash PID and if we have a user and
381:41 - if we don't have a user
381:44 - so we're going to be handling that
381:45 - depending on the user
381:47 - so if we have a user then we're gonna
381:51 - say set the user code to be the code
381:55 - that we have and so if you have the
381:58 - codes I'm going to say json.parse
382:01 - if I can type
382:03 - json.parse the code and otherwise we're
382:07 - going to give that boilerplate the
382:09 - starter code and in the else case if the
382:12 - user is logged out we're just gonna
382:13 - immediately pass that boilerplate code
382:17 - and we're gonna pass dependencies it's
382:21 - going to be PID
382:23 - user as well as the problem dot starter
382:26 - code
382:27 - and in order to work we need to change
382:30 - this code mirror value so where it was
382:34 - to be the user code
382:37 - so user code save it and now if I just
382:42 - refresh the page
382:44 - I will hopefully still get this code
382:46 - right so whatever I type in so I'm gonna
382:49 - copy this solution and paste it submit
382:53 - it so we passed it and now if I refresh
382:57 - it
382:57 - hopefully I will still get that code
382:59 - because it is trying to fetch it from
383:01 - the local storage but however if I log
383:04 - out it's gonna be the
383:07 - um I could say the Border plate code and
383:10 - you can handle this however you want
383:13 - so now we have one more problem so let's
383:16 - just log in first so it was testing at
383:22 - test.com I guess in the password because
383:25 - John Doe try to log in
383:29 - okay now if we come back to here inside
383:33 - the reverse link list
383:34 - so if I try to just say console.log hey
383:39 - and if I just try to submit this it's
383:42 - going to say FN is not the function so
383:45 - this FN is that callback that we had in
383:48 - our
383:49 - so here so I'm going to say linked list
383:53 - so it's gonna be this FN so where is it
383:56 - so this is so this is where we are
383:58 - getting that error but why this is not a
384:01 - function because here we have some
384:04 - string
384:06 - or like the comment and we are trying to
384:09 - convert this into a function so it was
384:13 - inside the playground
384:14 - and here right we were trying to use uh
384:19 - return this code as a function convert
384:22 - this user code into that function and
384:24 - here we have some comments it cannot it
384:27 - is not able to convert this a function
384:30 - because of this lines so this is why we
384:34 - had the field
384:36 - so if you remember I said that we're
384:38 - gonna have this starter function name
384:41 - and I'm gonna explain that later now it
384:44 - is time to explain this so we are gonna
384:48 - slice this code okay we are only gonna
384:51 - take from here until the end when we
384:55 - execute the user's code so we will not
384:58 - uh evaluate this part because this is uh
385:02 - so to say
385:03 - a comment so let's say user uh write the
385:07 - solution for the twosome and he also
385:10 - want to say like the time complexity is
385:13 - going to be o of n but now he wants to
385:16 - just submit this and it's going to get
385:19 - the same error so for this we don't want
385:21 - to evaluate this lines and so let's say
385:24 - we have more we don't want to evaluate
385:27 - all these we just wanna evaluate from
385:30 - here until the end so that's why we had
385:33 - that starter function name
385:35 - and for each problem we have it function
385:39 - in the function name
385:40 - so for the two sum it's going to be
385:42 - function two sum and the parentheses
385:45 - so for this it's going to be function
385:47 - reverse link list in here so you can
385:50 - even include all these lines it doesn't
385:52 - really matter
385:54 - so here I'm gonna say inside the
385:58 - playground
386:00 - so I will first make this user code by
386:05 - making it let and now I'm gonna mutate
386:08 - this I'm gonna say the user code is
386:11 - going to be equal to user code dot slice
386:15 - and it's gonna take from user code but
386:21 - index of
386:23 - and problem that starter function name
386:27 - and now what I'm gonna do is what is
386:31 - happening here it only takes from that
386:34 - starting from here it tries to evaluate
386:38 - it doesn't really care about these
386:41 - comments before the actual function
386:44 - so this is kind of complicated and I
386:46 - don't know if I explained explain it in
386:48 - the past way but this is what it is now
386:52 - if we try to save it and let's try to
386:56 - run this function it's gonna say
386:59 - um so this is a error for the reverse
387:02 - like this but here if we try to submit
387:05 - here
387:06 - it is gonna hopefully work
387:09 - as you can see it says all test passed
387:13 - and
387:14 - it didn't care about these comments that
387:17 - we have here so now I say like space
387:20 - complexity is going to be of n as well
387:24 - it's gonna still work and it doesn't
387:26 - really care
387:28 - so now if we try to run the correct code
387:31 - for the reverse link list and I'm gonna
387:33 - paste it so this is the correct solution
387:36 - and if we submit this it is also going
387:39 - to work and now if I go to this problem
387:42 - it is going to get this from the local
387:44 - storage and if I go to this one it is
387:46 - going to get this from the local storage
387:48 - so I think we are done with all the
387:52 - functionalities we did the local storage
387:54 - we submit our code and it has been added
387:58 - into our database now we can see that
388:00 - reverse link list is also in the salt
388:03 - problems array and we got pretty much
388:05 - everything in this page the only left
388:10 - stuff is this full screen and then the
388:12 - settings now I think it is time to add
388:16 - them so before we add them I just want
388:18 - to get rid of this error so here this
388:21 - Handler function can be type of string
388:23 - or the function so it says string is not
388:28 - callable if this is a string so since
388:32 - string is not callable we can just
388:34 - convert this into like we're not gonna
388:36 - call it but it's going to be a reference
388:38 - to this function and I can say it's
388:40 - going to be the Handler and here we're
388:44 - going to say if type of a Handler is
388:49 - equal to function then we would like to
388:52 - run this so I'm going to say cons
388:54 - success
388:56 - is gonna be calling that Handler with
388:59 - the Callback so now I can just put all
389:03 - these into this if statement and now
389:06 - this is we how we get rid of that error
389:09 - so we didn't change anything any
389:11 - implementation we just got rid of this
389:13 - error so now if I save this it should
389:16 - work exactly the same that it was
389:18 - working so yeah if we go to the two sum
389:23 - here we can submit this and it's gonna
389:26 - run correctly we can even run it
389:30 - so yeah this is how it works and now
389:32 - let's try to add this full screen first
389:35 - so for this if you remember we had
389:38 - preference navbar
389:41 - um here what you'd like to do is
389:43 - whenever we click this button right so
389:46 - on click I will say will have a function
389:50 - that says handle full screen it's going
389:54 - to be calling that function and we're
389:56 - going to create this phone's handle full
389:59 - screen and it's going to be empty
390:03 - function for now and then here what
390:05 - you'd like to say is
390:08 - actually if it is not full screen right
390:12 - if it is not full screen then we want to
390:16 - show this icon that we have bottom and
390:20 - if it is full screen then we're going to
390:22 - say AI outline full screen exit and
390:25 - we're going to import this now we can
390:27 - oops can delete this line and have a
390:30 - state called is full screen so cons is
390:34 - full screen and initially it's going to
390:37 - be false now let's import the use date
390:40 - as well as use effect
390:43 - to State and use effect
390:47 - so now inside this function we are going
390:51 - to say if if we are in the full screen
390:55 - so if it is full screen then we're gonna
390:58 - say document dot exit full screen and if
391:02 - you are not in the full screen then
391:04 - we're gonna request for the full screen
391:06 - so we're going to say document dot
391:08 - document element and request full screen
391:11 - and then we're gonna set our state to
391:15 - whatever it was previously to like to
391:19 - negate it okay so if it was false then
391:22 - it's going to be true and it was true
391:24 - it's going to be false and now finally
391:26 - inside the use effect which I'm gonna
391:28 - just gonna paste it so here we are first
391:32 - checking like listening for the event
391:34 - listener of full screen change and we
391:38 - add three more lines to uh affect the
391:42 - other uh the browsers so for the Safari
391:45 - and chrome Mozilla and Microsoft Edge
391:49 - so once the full screen change events uh
391:53 - happens it's going to call this function
391:55 - and it says if document dot full screen
391:59 - element
392:01 - so what it basically says if it is not
392:03 - in the full screen mode then set is full
392:07 - screen state to false and otherwise
392:10 - set it to true now if we save this and
392:14 - you can just pause the video and analyze
392:16 - this code for a second
392:18 - and when I click this I'm gonna get into
392:21 - full screen and as you can see the icon
392:23 - has changed here and now if I click that
392:26 - again it's gonna be
392:28 - exiting the full screen and SK keyword I
392:31 - think is also gonna work and yeah
392:33 - so this is how we added a full screen
392:36 - functionality okay so now let's try to
392:39 - add this functionality of settings model
392:41 - and you'll be able to change the font
392:44 - size depending on this
392:46 - um drop down so it's going to be from 12
392:49 - pixels to 18 pixels and once we change
392:53 - it it's going to be changing the inside
392:56 - the code editor and then we're gonna
392:58 - save it into local storage so that when
393:01 - we refresh the page it's still gonna be
393:03 - the font size that we
393:06 - um put in in the last in the last time
393:10 - so here I will go back into the
393:13 - playground and I am going to create the
393:16 - state so it's going to be cons settings
393:19 - and it's going to be inside an array
393:23 - so settings set settings so it's going
393:26 - to be a use state
393:28 - of an object so it's going to have the
393:31 - font size initially it can be like 16
393:35 - pixels and then it's gonna have two more
393:38 - fields which is going to be settings
393:42 - model is open is open it's going to be
393:47 - false and drop down so drop down is open
393:52 - and it's also going to be false now
393:55 - let's just create an interface for this
393:56 - I'm going to say I settings
393:59 - and create it here export
394:02 - interface eye settings it's gonna have
394:05 - these fields font size type of string
394:09 - headings model is open type of Boolean
394:12 - and then drop down is open also Boolean
394:15 - so here
394:16 - settings model is open
394:19 - State we have it because like when you
394:22 - click this Now settings model is open is
394:25 - going to be true and then when you click
394:27 - this the drop down also going to be true
394:30 - and when you click this again now it's
394:32 - going to be false it's not going to show
394:34 - us that drop down and when we close this
394:37 - the settings model is open state is also
394:40 - going to be false that's why we have the
394:43 - like two of them
394:45 - and now what we would like to do is pass
394:48 - the settings to the preference nav bar
394:52 - so I will come back to here and I'm
394:54 - gonna say this component is going to
394:57 - take settings
395:00 - and then it's going to take the set
395:01 - settings function
395:06 - settings and then let's go to inside the
395:10 - preference nav bar
395:11 - and here I would like to also say that
395:15 - font size is going to be settings but
395:19 - set settings but settings
395:22 - Oops why it does this okay now it's
395:25 - gonna take the font size but it doesn't
395:27 - give me did I did that wrong so settings
395:31 - okay now it's gonna work and I'm gonna
395:33 - say settings
395:35 - dot font size
395:38 - and now I can go to the inside
395:40 - preference nav bar it's gonna take two
395:43 - props I'm just gonna be the settings
395:47 - and it's going to be a type of interface
395:51 - settings
395:54 - and I'm going to import this and then
395:57 - it's also going to have the set settings
395:59 - which is going to be the type of
396:01 - dispatch of interface settings and then
396:04 - I'm gonna say set headings and get the
396:07 - settings
396:08 - so here what I would like to do now
396:11 - I'm gonna say
396:13 - at the bottom of our page I'm gonna say
396:15 - if settings dot uh if settings model is
396:20 - open and I'm gonna I would like to show
396:22 - a component which is going to be that
396:25 - settings model component which will
396:28 - create in a minute
396:29 - settings model and then
396:32 - so it's going to be just like this now
396:35 - let's try to build this components
396:37 - so for this component I will actually
396:40 - give you the Bare Bones of it in a coded
396:44 - way so let's just go to the inside
396:46 - models now I'm going to say settings
396:49 - model dot ESX and then I'm just gonna
396:52 - paste it and you can grab it from the
396:55 - GitHub gist in the description below
396:57 - so if you just save this and then come
397:00 - back to here uh import this
397:03 - save this file and then save the
397:05 - playground and inside the localhost what
397:08 - are we gonna see so we're gonna see
397:10 - nothing because
397:12 - um this initially is false right so we
397:15 - say if the settings model is open then
397:18 - show this but here the setting model is
397:22 - open field is going to be false now if
397:25 - you make this through then we should be
397:28 - able to see that in our local host and
397:31 - yeah this is what you'd like to see for
397:34 - now and what is happening here let me
397:36 - just quickly walk you through
397:38 - so first what do we have here so I'm not
397:42 - going to explain the HTML and CSS part
397:44 - but right there I'm going to explain the
397:46 - logic so here we're gonna have an
397:49 - overlay which is going to be that
397:50 - background that you can see that is
397:53 - around this model and then we have the
397:57 - settings header with a close button
397:59 - which is going to be this part and then
398:01 - we have a little bit of description and
398:04 - then the drop down menu
398:06 - so this drop down is open we have it as
398:10 - true now if I say that it's going to be
398:12 - false it is not going to show this
398:14 - portion so save this
398:17 - now it's not gonna show me that but if
398:20 - it was true it's gonna show and then we
398:22 - have an array of editor editor font
398:25 - sizes so here it starts from the 12
398:28 - pixels to 18 pixels
398:31 - that's what we can see here and then for
398:34 - each of them right so the each of these
398:37 - like 12 pixels 13 14 15 so each of them
398:42 - is a list value and then I extracted it
398:45 - into its own component so we'll Loop
398:48 - through these font sizes and each of
398:50 - them is going to be
398:51 - this one sizes like 12 13 14 until the
398:56 - end of it so for each of them we render
398:59 - this component which is at the bottom of
399:02 - our component or like at the bottom of
399:05 - our file
399:06 - so what it does it takes a font size and
399:10 - it renders that so
399:12 - this is that like uh that font size
399:15 - field and then it says selected option
399:18 - so the selected option is like 14 now if
399:22 - I said that it's going to be 18 pixels
399:24 - now then it's gonna put that check mark
399:27 - into here so what it does is whatever
399:32 - the selected option is it checks and if
399:35 - so it changes the font uh so the font
399:39 - weight the medium and then put that
399:41 - check mark as you can see here it even
399:44 - makes it visible or invisible
399:47 - and then we also have an interface for
399:50 - this components
399:52 - um so I think this is basically it for
399:54 - now and now we will try to add all the
399:57 - functionalities to this component
400:02 - so now first of all let's just go back
400:04 - to here and let's say that
400:08 - um and also I want to show you this now
400:10 - we can just delete this
400:13 - um but okay like I will show you later
400:15 - so here let's just make this false to
400:18 - the initial state
400:19 - and we can save this now here I'm gonna
400:23 - say
400:24 - um we're just gonna be this button okay
400:27 - now on click I'm gonna say on click we
400:31 - would like to change that settings model
400:34 - is open field to true now I'm just gonna
400:37 - call an arrow function which is going to
400:39 - say that that settings and just pick all
400:44 - the previous values and then change the
400:46 - settings model to true and then close
400:49 - this function
400:50 - so if I click this here
400:54 - oops now if I click this this field so
400:57 - this model is going to be shown because
400:59 - we changed that set settings model field
401:03 - to true
401:04 - and then we would like to pass this
401:07 - settings in set settings into settings
401:11 - model
401:12 - so set settings it's also gonna have
401:15 - this set settings function and inside so
401:20 - save this file inside here we're going
401:22 - to take that as props so I'm gonna say
401:27 - settings model prompt
401:31 - and it's gonna be maybe type or
401:33 - interface and then you'll see it's gonna
401:37 - have the settings
401:40 - as a type of so this interface settings
401:43 - and import this and then it's gonna have
401:46 - the set settings which is going to be
401:47 - this dispatch and then let's just import
401:50 - this
401:52 - so it doesn't do this so but fittings
401:55 - model props I'm just gonna copy this
401:57 - paste it
401:59 - and then structure these
402:03 - so now when we click this overlay what I
402:06 - would like to do is to set that settings
402:09 - so the drop down or like the settings
402:12 - model is open to false so this is what
402:16 - I'm going to do and then do we have
402:18 - anything else to change here
402:21 - and yes actually we have so I'm gonna
402:23 - just delete this and then instead of
402:26 - that constant I'm gonna say
402:29 - so delete this so settings Dot is like
402:33 - drop down is open and then we're gonna
402:35 - show that drop down
402:37 - so I can basically save this
402:41 - and let's check the localhost so now it
402:45 - is closed by default and when I click
402:48 - this I would like to open that drop down
402:51 - so for this I would like to create
402:53 - another function and it's going to be
402:55 - called as const handle click drop down
403:01 - and then here first I will take the
403:04 - event so in where are we going to call
403:07 - this function is going to be
403:09 - I think it's going to be here because
403:11 - this is where we had that uh chair run
403:14 - down so it's going to be this button so
403:17 - here I'm going to say handle click drop
403:20 - down
403:21 - and then it's gonna take the event and
403:23 - here it's going to be so it's going to
403:25 - be the type is actually going to be a
403:28 - most event isn't it
403:30 - so yeah it's going to be a most event
403:32 - and inside I'm gonna first say event
403:36 - stop stop replication so that it doesn't
403:40 - close the model but it is going to be
403:44 - set the drop down is open so it's going
403:48 - to negate it so let's save it in here if
403:51 - I click this it's gonna open and now if
403:53 - I click this again it is gonna close it
403:57 - and what I would like to do is also when
404:00 - I click to this close button I would
404:02 - like to so I want to close it so I am
404:06 - going to come to here inside that close
404:08 - button here we have it here so I think
404:11 - this button so I'm just gonna say head
404:14 - settings model and then we are gonna
404:17 - change the setting settings model is
404:19 - open field to false and now if I click
404:23 - this it's going to close it I'm gonna
404:25 - open it close it from here and then like
404:29 - here it doesn't do anything and then I
404:31 - can open up the drop down and then close
404:33 - it
404:34 - so now I would like to
404:39 - um so what I would like to do now is to
404:40 - create a local storage hook
404:44 - so whatever value I choose here it is
404:47 - gonna put it into the local storage and
404:51 - then when we refresh the page it is
404:52 - going to fetch it from there so for this
404:55 - I would like to come up into the vs
404:58 - codes I will create the hook and it's
405:01 - going to be called as use local storage
405:05 - dot yes and then I'm gonna paste the
405:09 - local storage hook
405:11 - so it is gonna be like this and you can
405:14 - grab it from the GitHub fist but
405:16 - basically I just went to chat jpt and
405:19 - asked it for like can you type can you
405:22 - give me a used local storage hook that
405:25 - is gonna be working inside an xjs
405:29 - typescript application and less than 10
405:32 - seconds it just gave me this one and I
405:35 - don't need to think about any
405:36 - implementation detail of it
405:39 - um so I need to work on the other
405:43 - functionalities of my application so
405:46 - this is what I would recommend you to do
405:48 - and if there is any error prone stuff
405:50 - here you can modify it so I already
405:54 - checked it it doesn't it's gonna work
405:56 - 100 for our use case and now I can just
406:00 - save this file and then here
406:03 - I will call that hook so I'm gonna say
406:06 - use local storage and then I will give
406:10 - the first one is gonna be the key and
406:13 - then the second parameter is going to be
406:15 - the initial value so I'm gonna say Lee
406:19 - code clone
406:21 - um maybe like font size
406:26 - and for the initial value I'm going to
406:28 - say it should be 16 pixels
406:32 - and now it's gonna return me two values
406:35 - which is going to be the value and the
406:39 - set value so the value and the set value
406:42 - and if we just take a look at it here we
406:45 - can see that it's going to return us the
406:47 - value and then the set value which we
406:50 - can just say font size
406:52 - and
406:55 - so it's gonna be font size and then the
406:58 - set font size
407:01 - so now what you'd like to do is when we
407:05 - click one of these settings list items
407:09 - you would like to call a function so I'm
407:12 - gonna say here it's gonna take a prop
407:15 - it's going to be handle font size
407:19 - or like candle font size change and I'm
407:21 - gonna do some stuff here and now I would
407:24 - like to have it as a prop
407:27 - so it's not going to return anything so
407:30 - we can just accept it like this and then
407:33 - take this handle font size change
407:36 - so when we click to this font size it's
407:40 - gonna have this font size and then what
407:45 - it's going to do is to say set font size
407:49 - and it's also going to change the
407:51 - settings so set settings and then it's
407:56 - only going to change the other font size
407:58 - field so we could just change take all
408:02 - the settings and then say font size is
408:04 - going to be the font size we are taking
408:06 - and now we need to change this here
408:09 - which is going to taking a parameter
408:11 - it's going to be font size type of
408:13 - string
408:15 - so whenever we click one of these font
408:18 - sizes
408:19 - on click we're gonna call our function
408:22 - so handle font size change and it's
408:25 - going to take the font size now what is
408:27 - going on here
408:28 - so let's take a look at it here
408:31 - um
408:32 - so when we click that it is gonna
408:34 - so like we are in the 12 pixels right
408:38 - now and if we click the let's say 16
408:40 - pixels it's gonna update here because so
408:44 - like what's going on here we click this
408:46 - 16 pixels we run this function and we
408:49 - pass the 16 pixels into this function
408:51 - and what it does was to change the value
408:54 - from the local storage as well as it
408:58 - changed this set settings state to have
409:00 - that 16 pixels font size and we're using
409:04 - the settings inside the code mirror if
409:08 - you remember that we had here so we are
409:11 - using it from here that's why it changes
409:14 - the code editor font size but if we
409:18 - refresh the page it is not going to be
409:21 - that default value
409:24 - so not from the local storage actually
409:26 - because we didn't use it here so we also
409:30 - need to use that local storage value
409:32 - from this hook
409:33 - so I'm gonna say use local storage again
409:37 - and it is going to be so what did we say
409:41 - it well so what the name was it it was
409:43 - leeco clone font size
409:46 - I'm gonna copy this well actually this
409:49 - line completely and then I'm gonna paste
409:52 - it we will get the font size as well as
409:55 - the headphone size and Method from here
409:59 - so I am going to take it and put it
410:03 - above here and then we're gonna say the
410:05 - font size is either going to be
410:08 - um actually it's going to be the font
410:10 - size that is coming from the local
410:12 - storage so let me just quickly reiterate
410:14 - what we did
410:16 - so here from the local storage we try to
410:19 - get the font size of our font size and
410:22 - if there isn't any font size in our
410:23 - local storage then by default it's going
410:26 - to be 16 pixels and then we said that
410:28 - our state is going to be that font size
410:30 - either going to be the local storage
410:32 - value or 16 pixels now we're gonna come
410:36 - back here inside the code mirror we said
410:38 - that our font size is going to be the
410:41 - settings font size now I can save this
410:44 - and it's gonna hopefully work now if I
410:47 - just come here and I say 12 pixels or
410:51 - like 11 yeah 12 pixels or like 13 14 15.
410:55 - this is just gonna work however uh so
410:58 - the expected way and now we need to
411:02 - change this UI so whichever we uh
411:05 - whichever we select so here inside
411:09 - this line where we have this hard-coded
411:12 - 14 pixels but I'm gonna say font size
411:15 - that is whatever we choose right this is
411:18 - coming from the local storage and then
411:21 - here for the that check mark
411:25 - um
411:26 - so for the selected option it's gonna be
411:29 - again the
411:31 - maybe the font size or settings up on
411:33 - size so save it in here if we take a
411:37 - look at it now it should work let's just
411:39 - refresh it
411:42 - so I'm going to click the settings model
411:44 - and I am going to click to here and 12
411:49 - pixels now it is updating the UI as well
411:52 - as the phone settings so now if we
411:55 - refresh the page it is still going to be
411:57 - in the 12 pixels because we did it into
412:01 - our local storage and now let's just
412:03 - double double check it in our
412:06 - application so here we see that inside
412:08 - the local storage tab we got the Lee
412:11 - code font legal clone font size as 12
412:14 - pixels and now if I would like to change
412:17 - it to 17 it's going to be updated and
412:20 - the UI is going to be updated as well
412:22 - now if I refresh it it's gonna be
412:25 - in the 17 pixels if you take a look at
412:29 - it here so we are getting the our code
412:32 - from the local storage our settings from
412:34 - the local storage and everything from
412:37 - the database from the local via render
412:39 - our description site and so everything
412:43 - is completed in this
412:45 - um so in this page actually so the last
412:48 - thing that we have is inside our home
412:51 - page to add this status so we're gonna
412:55 - again fetch it from the database and so
412:59 - now let's just add it
413:01 - so back to the vs code it's going to be
413:04 - inside the home page so it's going to be
413:07 - indexed and if you remember the last
413:10 - time we fetched some data from this
413:13 - problems table inside this problems
413:15 - table and we used it by using this hook
413:18 - and now let's try to do the same thing
413:20 - for solve the problems
413:23 - if we're going to call this book and
413:25 - we're gonna create it
413:27 - so I'm gonna say function use get sold
413:30 - problems and initially it's going to be
413:33 - an empty array with type of string
413:36 - and then since you are going to be
413:39 - fetching some data we're going to have
413:40 - use effect in place
413:43 - so here we're gonna have the function
413:46 - that says cons to get solved problems
413:50 - it's going to be a synchronous and then
413:52 - at the bottom we're gonna call this
413:54 - function gets solved problems and then
413:58 - at the bottom we're gonna return this
414:00 - array so that we can use it up here
414:02 - right
414:04 - so I'm gonna say
414:06 - const user ref it's gonna be the
414:10 - document method
414:12 - I will pass the firestore users and user
414:15 - ID which I will get it from my hook I'm
414:19 - gonna say const user use of state and
414:25 - then pass the authentication object
414:27 - inside so this will give me the user and
414:30 - then I'm gonna use this I will say user
414:33 - dot
414:35 - uid right and I'm gonna make it like
414:38 - this
414:40 - so that it's gonna make sure that you
414:42 - already have the user will not get that
414:45 - typescript or if it was like this and
414:48 - then I will get a cons oops const user
414:53 - document and I will evade a get dark
414:57 - method by passing the user reference and
415:01 - then I'm gonna say if user document if
415:05 - it exists then what I'm gonna do is to
415:08 - set the solved problems to that
415:12 - um so user document that data that
415:15 - solved problems array so if you remember
415:17 - in our database we had it so this array
415:22 - now it's going to be set it to this
415:25 - array in our state and one more thing
415:28 - that we are missing is going to be if we
415:31 - have a user operate then we can paste
415:34 - the data if we are logged out we cannot
415:37 - get the status because we don't know
415:39 - which user this is and which problems
415:42 - did he solved so that's why we're gonna
415:45 - only get the problems if we have a user
415:48 - and now I think I can save this and what
415:52 - it says
415:54 - it's kind of weird but like we have this
415:57 - function and maybe we're missing some
416:00 - curly braces oh now it's it's working
416:02 - okay so here let's just try to console
416:06 - that like this solve problems
416:09 - console.log he solves problems and here
416:13 - we're gonna get that same array that we
416:16 - have in our database so we have the two
416:18 - sum and reverse linked list so this is
416:21 - what we have now let's try to add one
416:24 - more and try to add field it's gonna be
416:28 - Jump game
416:30 - and then add it so here refresh it and
416:34 - hopefully we're gonna have three values
416:36 - now and we got the jump game as well now
416:39 - let's update the UI and here we have
416:42 - that check mark I'm gonna cut it for a
416:44 - second and I'm gonna say false problems
416:47 - includes that problem ID then I want to
416:51 - just render this check mark and then now
416:54 - I can save this and here hopefully it's
416:58 - gonna work now if I remove this
417:01 - it is gonna update the UI as well and
417:06 - one more thing that we are missing is
417:08 - that when we log out that should update
417:11 - the UI by removing this check icons so
417:15 - for this I'm gonna come here and I'll
417:17 - say if user is logged out then we just
417:22 - wanna set this array to an empty array
417:25 - so now that should be gone and let's try
417:28 - to test it out again login
417:31 - and now I'm gonna log out and it's gonna
417:34 - immediately update the UI
417:36 - all right guys now believe it or not
417:39 - this is the end of our application we
417:42 - build everything from scratch from
417:44 - authentication to code submission and
417:47 - now application is completed and there
417:51 - is one last thing that I would like to
417:52 - talk about and it is going to be this
417:54 - code submission
417:56 - so here we are taking the user's code
417:58 - and immediately submitted inside our
418:02 - application
418:03 - and this is not safe so let's say we
418:06 - have a user that is hacker or like
418:09 - malicious user that is trying to bring
418:13 - down our database so they will come to
418:15 - here and they will write some bad code
418:18 - or like slash malicious code
418:22 - and then they will try to submit it and
418:25 - maybe this malicious code will bring our
418:29 - application down so for this we would
418:32 - like to use the idea of sandboxing so
418:36 - what it really means is that we have our
418:38 - application and our application contains
418:42 - our user's code
418:44 - so when they try to submit it we would
418:46 - like to send this code to our code
418:49 - execution engine so we need to create
418:52 - this for us and then our code execution
418:55 - engine is going to evaluate the code and
418:58 - then it's gonna return back the result
419:01 - so it's either going to be true which
419:03 - means that the code was successful or
419:06 - it's going to be false which also is
419:09 - going to mean that
419:10 - um so the code didn't pass so it wasn't
419:13 - successful and then our application is
419:17 - going to show that
419:18 - um so to say the notification if it
419:21 - passes or not so here uh so this is the
419:25 - idea of sandboxing so let me just type
419:28 - in send boxing and
419:32 - like if you're building a real
419:34 - application
419:36 - for your startup or your let's say for
419:39 - your company you would like to have that
419:41 - code execution engine but in our
419:43 - application we didn't build this because
419:45 - this is a normal
419:48 - um so to say a demo project that you'd
419:50 - like to add into our resume so we cannot
419:53 - go that complicated and the main
419:57 - advantage here is that our application
419:58 - is going to be safe our users can rely
420:01 - on our application without having any
420:04 - doubts but the disadvantage here is to
420:08 - it is really hard to implement this code
420:11 - execution engine so you need to know
420:15 - really advanced stuff about this code
420:18 - execution engine so with this I think
420:20 - I'm gonna wrap things up and we'll try
420:23 - to deploy this application to our cell
420:26 - but before that let's just submit all
420:29 - the uh changes place I mean let's just
420:33 - commit it and then push it to our GitHub
420:35 - and then from then there will take it to
420:39 - yourself
420:41 - so now inside TVs code I'm going to open
420:43 - up a new terminal and I will basically
420:46 - just say get at dot so I will change my
420:51 - so I will just change stage my changes
420:54 - and I got all these files now I'm gonna
420:57 - commit it and I'm gonna say git commit
421:00 - the dash M it's going to be complete the
421:04 - project
421:05 - and I'm going to commit this then I will
421:08 - try to push this to GitHub I'm going to
421:10 - say hit push
421:12 - so it's gonna try to push it and I
421:14 - already have a GitHub repository for
421:17 - this so I will go to my GitHub account
421:20 - so now as you can see it is updated just
421:23 - now so we would like to push this into
421:26 - your cell so I'm gonna go and so go to
421:30 - reversal
421:31 - so here this is our virtual dashboard so
421:34 - also Universal is the company that built
421:37 - the next JS so it is really easy to
421:40 - deploy your applications uh so
421:43 - specifically your next applications to
421:45 - yourself so I'm gonna click to this add
421:47 - new button and then here I'm going to
421:49 - click the project
421:51 - so I will get to this leeco clone
421:53 - YouTube I will try to import it and then
421:56 - I'm not going to change the project name
421:58 - but here we will try to change or like
422:01 - add the environment variables so for
422:04 - this I'm gonna go to my vs code
422:07 - so here inside the
422:10 - env.local it should be so we will try to
422:13 - get this environment variables so I'm
422:16 - gonna copy this and then here I'm gonna
422:19 - paste it and take value and I'm going to
422:22 - do this for all of them so I'm going to
422:24 - get the paste and then add now I will
422:26 - fast forward this and add all these
422:28 - variables
422:30 - okay so now I have added all of my
422:33 - variables and I will try to just deploy
422:36 - it and the chances are we're gonna get
422:38 - some errors so this is normally how it
422:40 - works first you deploy it and in the
422:43 - first few times you will get some errors
422:45 - until you resolve them so the deployment
422:48 - started now and let's wait if you'll get
422:51 - an error or success
422:53 - so now it took me to this page and we
422:57 - didn't get any error to be honest and
422:59 - now we can just continue to dashboard I
423:02 - think it's because we don't have any
423:04 - errors and now if I click to this link
423:08 - so let's visit this and as we can see it
423:13 - is now working we have the complete
423:15 - project here it is deployed on the
423:17 - internet so now I can just sign in or
423:21 - like the account that I already have I'm
423:23 - gonna say John crypto and login
423:27 - and as you can see we got data so we
423:30 - already solved these problems and so
423:33 - yeah this is
423:34 - what we have
423:36 - and now it is time for us to add our
423:39 - Firebase database rules to make our
423:42 - application a little bit safer so for
423:45 - this I'm gonna go back inside the
423:47 - Firebase so firestore database go to
423:50 - rules so here when we initialize the
423:53 - project now we are so this is the
423:56 - development mode where we allow to read
423:58 - and write operations uh for all the
424:02 - operations to to be honest so until the
424:05 - we are not in the 23th of the May so we
424:09 - will allow to read and write
424:12 - um operations now we would like to
424:14 - change this so I'm just gonna comment
424:17 - this out and I will write my own rules
424:22 - so first of all we would like to just
424:25 - allow our users to read user document if
424:29 - and only if they have been authenticated
424:33 - so I will create my comment and I will
424:35 - say user
424:38 - documents can only be read and written
424:44 - by the authenticated users so now I will
424:49 - try to write my rule so here first we're
424:53 - going to say match
424:55 - and then we're going to say the users
424:58 - collection and then we can pass here a
425:00 - dynamic value which I will say user ID
425:03 - but you could just add user ID hello it
425:07 - doesn't really matter so it should be
425:09 - something meaningful so here I will open
425:13 - up my curly braces and I'm gonna say
425:15 - Hello read
425:18 - Ella read
425:20 - comma right and
425:23 - so like Colin if
425:25 - request
425:27 - dot oauth is not null so if the user
425:30 - logged in if user is authenticated and
425:34 - the request but oauth dot uid is equal
425:38 - to this document ID so user ID
425:43 - so this uh here what we have is going to
425:46 - be each document inside users collection
425:49 - so if the user is authenticated and its
425:52 - ID is equal to that I so the document ID
425:57 - then we will allow to read and write
425:59 - operations
426:01 - so I will just tap this inside and then
426:05 - we would like to have one more rule for
426:07 - our for our problems document so I'm
426:10 - gonna say problem documents can be read
426:13 - by anyone but it can only be written by
426:16 - authenticated users
426:18 - so right this is what we do so here we
426:21 - just allow for all users if they logged
426:25 - in or like they logged out they can read
426:27 - the problem they can see the data but if
426:30 - and only if they logged in then they can
426:33 - like the problem right so this is going
426:36 - to be our database Rule and I'm gonna
426:39 - say match the problems uh collection and
426:44 - then you'll get a problem ID
426:47 - and open up my curly braces
426:51 - so
426:52 - tap inside allow read
426:55 - if it is true so it's gonna just work in
426:59 - any case and allow right
427:02 - if so colon if the request dot oath is
427:08 - not empty so if we have an authenticated
427:12 - user so I don't really want to get
427:14 - really com so it gets really Advanced
427:16 - with these rules you can read the
427:18 - documentation you can do like you can
427:20 - add a lot more into here but so this is
427:23 - the basic idea you just use the match
427:26 - keywords in your collection and then the
427:28 - so like a dynamic value for your
427:31 - documents
427:33 - so now I will just publish this
427:39 - so now it's been published and changes
427:42 - can take up to one or two minutes and
427:45 - then so if we just take a look at it
427:47 - here the so it's been published I was
427:51 - going to take effect in our application
427:54 - and inside this versatile dashboard we
427:57 - got three different domains and I think
427:59 - I like this one the most so we have the
428:02 - GitHub repository name and then
428:04 - dotversal.app so yeah this is the end of
428:08 - tutorial to be honest and now you can
428:11 - add a lot more stuff into this
428:13 - application you can expand this problem
428:16 - list or you can and just feel free to
428:19 - add your solutions by the way into the
428:21 - solution tab where when we click them
428:23 - you will get to my YouTube channel but
428:25 - put your YouTube video IDs into that
428:29 - solution that I showed you in the
428:31 - previous sections
428:33 - so maybe you could add a like the user
428:37 - profile page where when you go to that
428:40 - user profile page you will see all the
428:43 - problems that the user solved and like
428:45 - the
428:47 - um problem submission history which
428:50 - problems did they like they disliked and
428:53 - maybe you can add a comment section to
428:56 - each problem where users can add their
428:59 - own Solutions with the explanations so
429:03 - really a lot more stuff infinite amount
429:05 - of uh so like the possibilities you can
429:09 - add into this project and if you do that
429:11 - just let me know in the comments and I
429:13 - would like to see your versions
429:16 - so as always if you like this content
429:18 - the project and it helped you just feel
429:22 - free to like And subscribe it really
429:24 - supports the channel a lot and if you
429:28 - have any problems any bugs any any stuff
429:31 - that is not working or you would like to
429:34 - just learn it from me or our Discord
429:38 - server just click the link in the
429:41 - description below you can join to other
429:43 - developers who already built this
429:46 - project and you can learn from them and
429:48 - then I will also be there to help you
429:50 - out so with all this I really thank you
429:54 - for watching this tutorial and hopefully
429:56 - I will see you in the next project