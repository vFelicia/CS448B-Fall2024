00:02 - hi i'm beau and i am going to show you
00:04 - how to program a magic trick using
00:07 - node.js and mongodb
00:10 - we are going to be using these free code
00:12 - camp playing cards so free code camp has
00:15 - a some playing cards that you can
00:16 - actually buy so the link is in the
00:18 - description if you want to get your own
00:20 - copy but check out these playing cards
00:22 - each card has a different programmer a
00:26 - different important programmer from
00:28 - history these are pretty cool we got
00:31 - larry well
00:32 - adele goldberg
00:34 - and there's all sorts of different uh
00:36 - programmers from history so i'm about to
00:39 - perform the magic trick on my friend
00:42 - and then we'll show you how it works
00:44 - and then this is going to be a coding
00:46 - tutorial i'll show you how to code this
00:48 - trick using node.js in mongodb and we'll
00:52 - deploy it to heroku
00:54 - so let's see the trick
00:56 - okay caleb i have a card trick to show
00:58 - you okay i have these free code camp
01:01 - playing cards all right and what i'm
01:04 - gonna do is have you pick any card that
01:07 - you want okay yeah pick any card
01:11 - are you sure
01:12 - okay what car you can you can tell you
01:14 - can tell everyone what the card is what
01:15 - is it richard stallman uh a
01:19 - six of clubs okay so it's six it's a
01:22 - space six of spades six or six
01:24 - yes okay so this is what we're gonna do
01:26 - i made a a program that's going to be
01:29 - able to figure out what your card is
01:32 - so yeah i have we have our ipad here
01:35 - has a fun kid case
01:37 - and i'm gonna have you go to
01:41 - a website you have to uh type in the url
01:44 - um
01:45 - it's going to be do you see it i don't
01:46 - know
01:49 - so you're going to type in the word any
01:51 - card so a n a-n-y-c-a-r-d
01:56 - and they're gonna do dot
01:58 - okay and then you're gonna type in
01:59 - heroku app you spell it h-e-r-h-e-r
02:02 - you
02:04 - wait h-e-r-o
02:06 - h-r-o k-u
02:10 - a-p-p aapp
02:12 - dot com
02:14 - dot com
02:15 - now you do a slash slash you see the
02:18 - slash on the ipad keyboard
02:20 - i will
02:21 - there we go that's now type in your name
02:23 - caleb
02:26 - gonzalez just caleb now press uh go
02:28 - press go
02:31 - and it's the card why don't you show it
02:34 - to the camera
02:35 - six of spades
02:39 - the cards that you chose
02:42 - that's pretty cool
02:43 - coding it's like magic
02:46 - okay one thing you may not have noticed
02:48 - my wife was in the background and she
02:50 - was typing something into her phone so
02:53 - this trick actually you do need to have
02:55 - an accomplice that can help out with
02:57 - this trick it doesn't have to be right
02:59 - next to you you could actually have
03:01 - someone far away as long as they can
03:04 - hear a recording of what's happening but
03:06 - my wife was actually putting in some
03:08 - information into the website that gets
03:11 - stored on the mongodb database so then
03:14 - when my friend went to the certain
03:15 - website with his name it would not have
03:18 - worked with any other name just his name
03:19 - specifically it gets the data from the
03:22 - mongodb database so it can display the
03:25 - card that he chose
03:27 - so let's go into the computer the code
03:29 - editor so you can see how this works
03:31 - first i'll show you how this any card
03:33 - app works and then we'll start coding it
03:36 - from scratch so we went to the url if we
03:39 - this is the root url and then slash
03:42 - secret
03:43 - this is where your person is helping you
03:46 - the website that they go to so we're
03:48 - going to enter a name i'll put bo that's
03:50 - my name and then
03:52 - if they say whatever the card that the
03:56 - spectator picks your helper is going to
03:58 - go to four
04:00 - let's say it's four of spades and then
04:02 - just do submit
04:04 - now
04:05 - if we go to slash bow we should see four
04:09 - of spades but if we go to another name
04:12 - like quincy it will just show not found
04:16 - because that hasn't been entered into
04:17 - the database
04:19 - and then also if you ever wanted to to
04:22 - delete everything we can just go to
04:23 - delete all
04:25 - and the database reset so now if i go to
04:28 - bow
04:29 - it will not show anything so it's a
04:31 - pretty simple app but it can make a
04:34 - pretty impressive magic trick when you
04:36 - go to perform it on somebody
04:38 - so let's start building this from
04:40 - scratch i'll go over into
04:43 - visual studio code i've already created
04:46 - a folder and then inside the folder
04:49 - that's called any card i created
04:50 - server.js
04:52 - another thing i have already done is
04:54 - copied in this cards directory and this
04:57 - just has an image of each card that can
05:00 - be chosen by the spectator so you can
05:04 - get a link to all these files right in
05:06 - the description of the video here
05:09 - so let me go back into
05:12 - our server file
05:14 - server.js
05:16 - and
05:17 - we are going to start coding but
05:18 - actually before we start coding let's
05:20 - set up some things
05:22 - since we're going to be using
05:24 - node and we are going to be using some
05:27 - packages i'm going to have to
05:30 - set up a package.json json file so i
05:33 - have this terminal open down at the
05:35 - bottom here i'm going to do mpm and knit
05:38 - dash y
05:39 - and that's going to just create
05:42 - my package.json file and it just says
05:45 - yes to all the questions so now that
05:47 - we've done that we can install some
05:49 - things so do npm install we'll be using
05:53 - let's see express
05:56 - body parser
06:00 - and
06:02 - mongodb
06:04 - so we just install that
06:07 - and now we can start working on our
06:09 - server so the first things we're just
06:11 - going to require a lot of things at the
06:13 - beginning
06:17 - okay we got all this initial setup done
06:19 - let's go over this we've required
06:21 - express
06:23 - now this is a web server for node.js so
06:26 - it makes it easier to set up a web
06:28 - server pretty quickly
06:30 - and then we are going to be using the
06:31 - web server in app here you'll see that
06:34 - later
06:35 - path this is going to allow us to get
06:38 - the the root path that a file is stored
06:41 - in
06:42 - on our on in our directory you'll see
06:44 - that in a second and we have body parser
06:47 - this extracts the entire body portion of
06:50 - an incoming request stream
06:52 - and exposes it on the rect.body as
06:54 - something that's easier to interface
06:56 - with what it basically means is it makes
06:58 - it much simpler to deal with data coming
07:01 - in from forms and we have a form right
07:04 - on our page so when you know about
07:06 - mongodb we're going to be interacting
07:08 - with a mongodb database so we get this
07:10 -  client for mongodb now this url or
07:14 - actually let's call this uri
07:16 - and we can even i'm going to just put
07:18 - this all capital capitalized so this is
07:21 - our an environment variable which is
07:25 - where our database is so
07:28 - we're actually going to set this
07:30 - up right in
07:31 - right in heroku this environment
07:34 - variable in the mongodb database so
07:36 - we'll do that later and then our server
07:39 - is going to be running on this port
07:41 - which is either going to be at this
07:42 - environment variable or port 5000. and
07:45 - i'm going to add one more variable we'll
07:47 - do a const and this is going to be the
07:50 - db name the database name
07:53 - and this is going to be an environment
07:54 - narrow variable so i'll do process.env
07:58 - dot db
08:00 - name
08:01 - these will be set in heroku later so now
08:04 - we need to include our middleware the
08:08 - body parser middleware so i'll do
08:10 - app.use
08:12 - and then i'll just pass in body parser
08:17 - dot url encoded
08:20 - and then i have to put
08:24 - extended
08:27 - false
08:30 - and then one more
08:32 - thing with the body parser
08:39 - now this body partial things the url
08:41 - encoded and the json this is something
08:44 - to help the forms we'll be able to send
08:46 - the form data correctly to our server
08:49 - now we'll create our first route so do
08:52 - app.get this is going to be an http get
08:55 - request which is the normal type of
08:58 - request when you go to a website we're
09:00 - doing a get request so the route is
09:02 - going to be
09:03 - slash secret
09:05 - so
09:06 - if a person goes to the secret route
09:09 - that's where they can get the form to
09:11 - enter the card that the user has chosen
09:14 - we will
09:16 - make this request arrow function so
09:19 - after we go to that route
09:21 - then it's going to run this function
09:24 - here
09:28 - and it's going to do res dot send
09:32 - file
09:34 - and it's going to center html file we're
09:37 - going to do path dot
09:39 - join
09:40 - underscore
09:43 - der name
09:47 - secret
09:49 - dot html
09:52 - so what this is doing
09:54 - is it's
09:55 - finding the the root directory where
09:58 - we're storing our all of our files and
10:01 - then adding secret.html
10:04 - on the end
10:05 - now actually i already
10:07 - created that file
10:09 - so when you go to slash secret and it's
10:13 - going to send this file to the user and
10:17 - it's this file right here now i'll put a
10:19 - link in the description where you can
10:21 - get this file directly i didn't think i
10:23 - should just type all this in because
10:25 - it's a lot of repetitive stuff but this
10:28 - is the form that a user will see and you
10:31 - can see the form action is to
10:34 - post
10:35 - to slash secret which is the same route
10:38 - that we're on
10:39 - but
10:40 - this would be a post request instead of
10:42 - a get request to the slash secret and
10:45 - you can see they can input the their
10:47 - name and then it's a drop down box for
10:50 - the number and then a drop down box for
10:53 - the suit and then a submit button
10:57 - so let's go back over to our server here
10:59 - so
11:00 - our first route is slash secret and our
11:03 - second route is also
11:05 - secret but it's going to be a post
11:08 - request and this is where
11:10 - after someone fills in the form
11:13 - they will submit the form data to this
11:16 - route here
11:17 - so secret
11:19 - and it's going to start off the same
11:22 - so i'll do a wreck
11:24 - rez
11:29 - and this is not just going to be a one
11:31 - line thing this is going to be multiple
11:33 - lines
11:34 - so
11:35 - once someone submits the data it's going
11:37 - to have to connect to the database
11:40 - so this this is where we're going to use
11:41 - the client
11:44 - and we'll connect
11:47 - and we'll pass in the uri variable
11:50 - because that's the where the database is
11:53 - that we're connecting to
11:54 - and then i have to pass in this flag
11:57 - use new
11:59 - url parser now this is just something
12:02 - you have to do because things were
12:04 - updated and now there's this new url
12:07 - parser
12:08 - that's important to use so pretty much
12:11 - all new databases that you're connecting
12:13 - to you're going to pass in this new url
12:15 - parser
12:16 - and then
12:18 - it will put in the function so the
12:20 - result
12:22 - will have a error and then we'll have
12:24 - the database that we get as a result of
12:27 - connecting to this
12:29 - and
12:31 - what we're going to do here
12:33 - is check if there's an error so if
12:36 - there's an error
12:39 - then we'll just do something simple
12:40 - we're just going to
12:42 - console.log it
12:46 - but if there's not an error
12:50 - then we're going to get access to the
12:53 - database so const
12:55 - db and that reminds me actually this db
12:58 - should really be a client
13:02 - and then we access the
13:04 - db down here the database constdb equals
13:08 - client
13:09 - dot
13:10 - db
13:12 - and then we pass in
13:14 - the database name
13:18 - which is just our environment variable
13:20 - and then we have to get access to the
13:22 - collection of the database so i'll do
13:25 - collection
13:27 - equals db.collection
13:34 - names
13:35 - now the cl this collection
13:38 - that we're calling names you can call it
13:40 - anything here and the first time you
13:42 - access it it's going to create it if it
13:44 - doesn't already exist
13:46 - and now we have to create our entry that
13:49 - we're going to put into the database so
13:51 - we'll do
13:52 - const entry
13:56 - and we're going to have a name
13:58 - which is just going to be
14:01 - dot rec.body.net dot to
14:04 - lower
14:05 - case
14:08 - so
14:09 - from the request the http request we're
14:12 - going to get the body and then the name
14:15 - because remember we're passing in a name
14:16 - and a card or a name and a number so we
14:20 - get the name here and then we convert it
14:21 - to
14:22 - lowercase
14:23 - and that really should be a comma here
14:26 - and then the card is going to just be
14:28 - rec dot body dot number
14:32 - and so remember we passed a number in a
14:34 - suit and we're going to combine the
14:36 - number in the suit to the card name that
14:38 - corresponds to our
14:41 - files and our cards directory so we'll
14:44 - do number
14:45 - plus
14:49 - of
14:51 - so it'd be like three of hearts so the
14:54 - next part is going to be rec
14:56 - dot body dot suit
15:01 - okay now we've created our entry and we
15:03 - just have to insert that so i'll do
15:05 - collection
15:06 - dot insert
15:08 - one because we're entering one item into
15:10 - the collection
15:11 - and then we're going to pass in entry
15:14 - that's the entry we just created
15:16 - and then we'll have a function here so
15:18 - this is an arrow function error
15:21 - and result
15:25 - and
15:27 - in this if there is an error
15:31 - then we can just console.log
15:34 - the error
15:45 - else
15:47 - we'll send something back
15:49 - res.send and we'll just send back a
15:52 - string inserted into database so that
15:56 - they'll just show up on the screen that
15:58 - string
16:01 - and then we have to make sure to close
16:03 - the database so the db.close
16:08 - at the end here
16:10 - now we have to create our other route so
16:12 - remember the other route is if someone
16:14 - goes to the url and then puts a person's
16:19 - name at the end so we'll do
16:21 - app.get and this is where we can put a
16:24 - variable right in the route so i'll do
16:26 - slash
16:28 - and then colon param
16:30 - and then i'll put a star or asterisk
16:33 - here
16:34 - and this becomes a variable so a route
16:36 - with a variable at the end and then we
16:39 - have our function
16:40 - rec
16:41 - res this arrow function here
16:44 - and we can do something with the
16:46 - information we get from from the route
16:49 - so
16:50 - let's figure out what name was passed in
16:52 - as this parameter here so we'll do
16:56 - const
16:58 - name
16:59 - equals rec
17:02 - dot u url
17:04 - dot slice so this url we're getting it
17:09 - as a full section here
17:12 - and we are going to slice it and just
17:15 - get the index one of the url which will
17:18 - be the name and then we can do to
17:21 - lower case
17:26 - and then once we have the name we can
17:28 - connect to the database again so
17:32 - client
17:33 - and it's just like before where we're
17:35 - going to connect
17:37 - we're going to pass in the uri
17:40 - we are going to put in
17:42 - this flag here
17:44 - use newer
17:46 - new url parser
17:49 - true
17:51 - and then we have our function
17:54 - so
17:56 - in the function we're going to have the
17:57 - error and then we're going to have a
17:58 - reference to
18:00 - the client
18:07 - and let me scroll this a little bit here
18:11 - so if there is an error
18:15 - we'll just console.log it just like
18:17 - before
18:22 - else
18:23 - we can do something with that name so
18:26 - first we'll get we'll get a we'll store
18:28 - the database
18:29 - in a variable so db equals
18:34 - client
18:36 - dot db
18:38 - and we'll pass in the db name
18:47 - and then we need the collection this is
18:48 - just like before
18:52 - equals db
18:54 - dot collection
18:59 - names
19:03 - and remember if someone puts the word
19:06 - delete all in the url we want to delete
19:09 - the whole database
19:10 - so we're going to check
19:12 - if the name equals equals equals
19:15 - delete
19:16 - all
19:17 - and then if it does
19:24 - then we'll do collection dot remove
19:28 - and if we just pass in an empty object
19:31 - this is going to remove everything and
19:35 - it's going to delete everything in the
19:36 - collection and then we'll just send a
19:38 - message
19:39 - which is just
19:41 - database
19:43 - reset so that should appear on screen so
19:45 - we know that that happened
19:51 - else
19:52 - so for any other name here
19:57 - we'll do collection
19:59 - dot find so we want to find the item in
20:01 - the collection of the name so we're
20:03 - gonna pass in
20:05 - name
20:08 - colon name so the first name
20:11 - is the key
20:13 - in the database but this name is
20:14 - actually the variable from here
20:18 - so if the name of the database equals
20:20 - the name we passed in
20:23 - well
20:24 - we're going to convert that to an array
20:25 - because there could be multiple entries
20:28 - for that name and we want every single
20:31 - every single entry that has that name to
20:33 - be returned as an array so we can do
20:35 - something with it here so
20:37 - do air result
20:41 - and we'll have the arrow function here
20:45 - and again let's just do if the error if
20:49 - there is an error
20:51 - then we'll just
20:53 - console.log the error
20:58 - else
21:00 - or else if
21:03 - result dot length
21:06 - now this if the length is one or more
21:10 - this evaluates to true if the length is
21:12 - zero it evaluates to false so if there
21:16 - is at least one result
21:18 - then we're going to do this
21:20 - const
21:22 - card
21:23 - we're going to get what the card was
21:25 - that's associated with that person
21:27 - result
21:31 - result
21:33 - dot length
21:37 - minus one
21:39 - so
21:41 - result that length this is an array
21:44 - index result.length minus one is the
21:47 - last item in that array
21:49 - and then we want the card name
21:52 - of the item
21:54 - and then we just have to add plus dot p
21:58 - and g because that will be the file name
22:01 - so now we have the file name of the card
22:04 - and we'll just do
22:06 - res.send file but instead of seeing an
22:09 - html file we can send a png file so
22:12 - we'll do path dot join
22:16 - underscore underscore name
22:18 - this is just like before to get the
22:20 - directory the actual full
22:22 - path to that
22:24 - card that png file so we have a cards
22:27 - directory
22:28 - let me get this in a string here
22:32 - and then we will add the card
22:36 - oh
22:37 - i need to get rid of this in semicolon
22:41 - and put it here
22:44 - okay because we're joining all those
22:46 - things together into one path
22:52 - else if there's no results if the
22:54 - result.length equals zero then we'll
22:56 - send a status of 404
22:59 - and then the final thing we have to do
23:03 - is db.close
23:07 - now let's see what
23:09 - i did oh this is supposed to be a curly
23:12 - brace here so that's a curly brace
23:19 - and this is a curly brace
23:22 - so
23:24 - we created all of our variable names
23:26 - and then we put in our middleware then
23:30 - we have our routes here and the final
23:32 - thing we need to do is have our database
23:35 - start listening for people to connect to
23:38 - those routes
23:39 - so we'll do app dot listen
23:44 - and then we'll pass in the port
23:48 - that's the port number from our
23:51 - variables up above
23:55 - console.log
24:00 - server
24:02 - listening
24:04 - on port
24:07 - so this message will go to the screen so
24:09 - we know that the server is now listening
24:12 - on that port
24:16 - okay
24:17 - now normally when you're going to do a
24:19 - project you're going to set it up to
24:21 - work with the
24:23 - local database
24:24 - before you start
24:27 - using a database stored on another
24:29 - server
24:30 - but we kind of skipped that step of
24:32 - trying to get this tested locally
24:34 - because we are going to go right to
24:36 - hosting this on heroku and using a
24:39 - database that's right on heroku
24:42 - first let me see if there's any mistakes
24:44 - i have to fix oh yeah this should
24:47 - actually be
24:48 - spelled close here
24:51 - and then this word is
24:54 - number okay i'll save and then we'll go
24:57 - over to heroku in the browser i'm
25:00 - already on the page to create a new app
25:02 - in heroku
25:04 - and we're going to call this any card
25:07 - which is available now there can only be
25:10 - one of each name so
25:12 - this name will be taken if you're trying
25:13 - to follow along you'll have to pick a
25:15 - different name but i'll do create app
25:21 - okay now that i've created the app
25:23 - this actually kind of tells instructions
25:26 - on what to do so we want to log into
25:29 - heroku and do heroku
25:32 - login
25:34 - now
25:36 - pressing the key to open up in the
25:37 - browser to log in
25:39 - so i'll do that
25:41 - and i can just click login
25:44 - so now we're logged in to heroku
25:46 - you may actually have to download
25:52 - this it says initialize a git repository
25:56 - and so we'll go back over here and do
25:59 - get a net
26:02 - we got a new git repository and it says
26:05 - to
26:06 - run
26:08 - this line right here heroku get remote
26:11 - so we're setting
26:12 - heroku as a
26:14 - remote
26:15 - host for our
26:17 - git repository
26:19 - and the next thing it says to do
26:21 - is just
26:22 - um do it get add
26:24 - okay before we add everything
26:27 - we are going to add a get ignore file
26:30 - and ignore our node modules directory so
26:33 - i'll do new file and do git egg
26:38 - nor
26:40 - and then we'll just add node
26:42 - modules
26:45 - so now i'll do git add
26:51 - and then
26:53 - we can go to this one the get commit am
26:56 - we're just going off these directions
26:57 - here even though
27:00 - i think a lot of you probably already
27:01 - know the different commands here but
27:03 - we'll do
27:04 - first commit
27:08 - and the last thing it recommends doing
27:09 - is get push heroku master
27:13 - so we'll run that
27:18 - okay now that that's done
27:20 - we are going to add our database we can
27:22 - do that right from the command line with
27:24 - heroku
27:26 - add-ons
27:29 - create
27:30 -  lab
27:35 - okay we have one final thing we need to
27:38 - do which is to make sure our
27:40 - environmental variables are all set up
27:43 - so i'm in the heroku dashboard on the
27:46 - settings tab
27:47 - and if i click reveal config vars now
27:50 - the config
27:51 - these config vars are the environmental
27:54 - variables
27:55 - now this is automatically put in for us
27:58 - when we set up lab it has the
28:00 - mongodb uri there's this uri here we
28:04 - still need to create the
28:06 - db
28:07 - name
28:09 - so the db name is actually right in this
28:12 - uri i just have to copy this section
28:15 - right here
28:16 - now it will be different for you than
28:19 - for me because this is all randomly
28:21 - generated so i'm going to copy the
28:23 - section between these slashes and that
28:26 - colon i'll copy it and just paste in the
28:28 - value here and then click add
28:32 - now
28:32 - if i've done everything correctly
28:36 - our app should work now
28:39 - so let's give it a test
28:41 - okay now i'm to my app url
28:42 - anycard.herokuapp.com
28:45 - secret
28:46 - and if i type in a name here
28:50 - and then i can choose the three of
28:53 - spades if i click submit here
28:56 - and we have an error okay well i'm going
28:59 - to copy my
29:01 - heroku logs
29:03 - slash tail your dash dash tail i can put
29:06 - it into my command line over here
29:09 - i'll paste this in and then i can see
29:11 - the heroku logs and it should tell us
29:14 - what the problem
29:17 - was
29:19 - db.close is not a function
29:22 - now did i spell something wrong here
29:26 - oh okay
29:27 - i see what we did wrong okay so
29:30 - this is a client here so down here when
29:34 - i
29:35 - when we do db.close it should be
29:38 - client.close and then same with down
29:41 - here
29:43 - client
29:45 - that should fix it so if i save this
29:48 - and then i'm going to go out of this
29:51 - get
29:52 - add
29:54 - now get
29:55 - commit
29:57 - message update
29:59 - server
30:02 - and then i'll go to the
30:05 - get
30:05 - push heroku master
30:10 - okay i'm going to go back over to my
30:11 - browser
30:13 - and load this again
30:16 - type in my name bo
30:20 - bo
30:21 - and then
30:23 - ace of diamonds
30:25 - submit this insert into database so
30:29 - if i go to bow here it should show ace
30:32 - of diamonds it worked now if i should go
30:35 - to another name like quincy
30:37 - not found so any other name is going to
30:40 - be not found
30:42 - if i do delete
30:43 - all
30:44 - database reset
30:46 - if i go to secret again
30:49 - it will go to this page again so i can
30:52 - make this magic trick work
30:55 - all i have to do is ask someone to pick
30:58 - a card and then i have my
31:02 - co-conspirator or my helper
31:05 - would type in their name like quincy
31:08 - and then put the
31:11 - number maybe it was the seven of spades
31:14 - click submit
31:15 - and then when i have my person if what
31:19 - go to the url slash their name
31:24 - it's going to show
31:25 - the card they chose
31:28 - so everything worked so you can try this
31:31 - out with your own deck of cards or you
31:34 - can purchase the free code camp deck of
31:36 - cards like i said the link is in the
31:39 - description
31:40 - well thanks for watching and remember
31:43 - use your code for good