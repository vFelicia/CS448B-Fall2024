00:00 - Hey Frico Camp and welcome to another the daily program or webseries video and in this one
00:04 - We're going to talk about problem number 315 XOR
00:08 - Multiplication which is posted on the daily program or subreddit and then before we dive into this problem remember to brush up on your bitwise?
00:14 - Operations because we're going to be using them in a solution come time to implement in Javascript, all right
00:20 - So let's break it down the whiteboard
00:22 - So for this xor multiplication example. They give you two inputs right
00:26 - They give you an input A in this case is the integer 14 and then they give you input B?
00:31 - Which is another integer in this case
00:33 - It's 13
00:33 - And then the base two equivalents of these two integers would be 1 1 1 0 for 14 and 1 1 0 1 for 13
00:44 - so given this information their whole xor multiplication is defined like so
00:50 - for every bit an
00:52 - Input b. Or in this case the bottom number 13
00:57 - We need to write out
00:59 - input A if
01:02 - the bit is 1 so in this case the first bit on the right is a 1
01:06 - So we're going to go ahead and write out
01:09 - input A and
01:11 - Then we've taken care of that bit so we can cross it up and then for the next part of the multiplication
01:17 - you just go ahead and indent 1 so I'll go ahead an indent 1 here and
01:22 - Then if it's a 0 for this bit on the far right that you've moved in 1 on
01:26 - we just go ahead and write a 0 here and then repeat the process where you indent one more time and
01:32 - In this case we're at a 1 so we need to rewrite this 14 out so I can say 0 1 1 1 and
01:41 - Again, if it is a very last bit
01:44 - We need to end it a third time and write out 0 1 1 1 and
01:50 - Now at this point. You can just do an xor operation
01:54 - on all the ones
01:57 - beforehand so in this case if you xor 1 1 1 0 1 0 you get 1 1 1 0
02:04 - so I can go ahead and write that out here and
02:08 - You get x or this line with this line you're going to go ahead and get
02:13 - 1 1
02:16 - 0 1
02:23 - 1 0 and I'll ask you the x for this line with this line you're going to go ahead and get one
02:29 - zero zero zero
02:31 - One one zero
02:35 - Which will actually convert to the integer of seventy?
02:39 - So just to make sure that was kind of odd because I still can walk through it one last time
02:42 - so I'll go ahead erase this and
02:44 - I'll rewrite this bottom string so remember the algorithm that they're presenting to you is
02:48 - That for every bit in 13 starting from the right you need to write out the top one
02:54 - If it's a 1 and then indent for every bit, so let's do this
02:58 - One by one so again we'll cross that the one will write out and put a which is 14
03:04 - so then we get to the next bit zero and
03:07 - then we have to indent one so let's go ahead and set a to zero here and
03:12 - Then we can xor these which leaves us with one one one zero
03:17 - We can cross out this bit
03:18 - Which leaves us two indentations?
03:21 - And because the first one this is the second one and then write out input eggs
03:26 - x where those together and
03:28 - we get one one zero one one zero and
03:33 - It's finally we cross that this bitch. We end in three
03:37 - right out input a
03:39 - and
03:41 - then xor them all together
03:47 - Which again leaves us with one zero zero zero one one zero which equates to 70?
03:53 - So again for this problem
03:55 - they basically broke down the algorithm that we need to implement and
03:58 - The only thing we need to do is just let galva Script and implement it. So let's go ahead and do that now, okay?
04:03 - So to start off let's go ahead and make a function called x or multiply
04:07 - We're going to take two parameters and be like we discussed on the whiteboard and down here
04:11 - let's just go ahead and call it with 14 and 13 the same values that we did on the board and
04:17 - Then we can just go ahead and return null here
04:21 - so the first thing I'm gonna do is I'm going to declare a results variable where we can keep track of
04:27 - The results when we keep x soaring a to a shifted to a shifted ETC, and then I could just say return results down here
04:36 - so that function should make sense and
04:39 - The first thing that we mentioned in the white board is that we want to keep looping over b
04:45 - Until We run out of bits or run out of those you know digits 1 to 0?
04:49 - so we can say While b is not equal to 0
04:52 - We can just go ahead and keep shifting off bits
04:56 - So if you know anything about bitwise operations when you do this operation, we're pretty much saying take the integer B
05:04 - Take its base to representation and shift a bit off to the right
05:09 - so if it was 1 1 0 1 it will now become 1 1 0 and then 1 1 and then 1 and we can
05:15 - actually show this if I also go ahead and say console.log beat out 2 string Base 2
05:21 - And C console is not defined, so it prints out
05:24 - Again the first iteration the first thing and loop is going to print out 1 1 0 1 and
05:30 - Then it prints out 1 1 0 and then it prints out 1 1 1 and then 1
05:34 - So it's going to be four times and then one time for every character right until we reach 0
05:43 - so hopefully this part makes sense and then again to
05:47 - Demonstrate the other part you know step two of that algorithm is
05:51 - every time you do an iteration you need to shift a over to the left one so you need to add a zero to a
05:57 - And what we can do is the opposite we can say a less than less than equal one which
06:03 - Is again a bitwise operation which will push the integer a of the base to representation over one
06:13 - so again I can say console.log a two strings a base two and
06:19 - We see each iteration. It adds a zero to the end
06:24 - so now for the last part
06:26 - remember all we do all we have to do is just take a result and keep x oaring it with a if the bit of
06:33 - B on the far right is equal to one so I can say result x or equals a
06:42 - Which won't necessarily give us which our site results?
06:49 - So that won't give us the answer that we're looking for because we need to only x or
06:54 - when the rightmost right bit of b is equal to 1 so we can times it by
07:01 - B and then check if the right bit is on and we get our final answer of 70 down here. I
07:09 - Was going to print out this two string
07:13 - So again we can kind of walk through this and get a better understanding what's going on. So the first iteration
07:20 - B is 1 1 0 1 and a is 1 1 1 0 and
07:25 - then we need 2 times 1 1 1 0
07:30 - By the first bit and B, and it's 1 in this case the result it becomes 1 1 1 0 and then the way
07:36 - We're going to shift over a shift over b
07:40 - the loop goes on One more where b is equal to 1 1 0 a
07:44 - now has an extra 0 at the end and
07:48 - Again, we check if the most far-right bit is on for B. And if it is we just xor results with a again
07:56 - Which leaves us with the exact same results down here?
07:58 - So you see that results for the first iteration is 1 1 1 0 second iteration is also 1 1 1 0 and
08:04 - then for the third iteration
08:06 - B is equal to 1 1 the most right bits on so therefore we xor results with 1 1 1 0 which is a
08:14 - And we're left with this and then we again repeat it for the last one
08:18 - Again be sure to like the video. We thought it was good and be sure to subscribe to Frito Camp below alright. Thanks for watching