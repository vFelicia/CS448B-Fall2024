00:00 - in this video i'm going to be going over
00:01 - json which is one of the most important
00:04 - concepts that you can learn as a
00:05 - programmer or as a web developer i'm
00:07 - going to be going over what json is why
00:10 - you should know it and all the syntax
00:12 - involved with json and at the end of the
00:14 - video i'm going to go through examples
00:16 - of json so make sure you stick around
00:18 - till the end
00:19 - [Music]
00:22 - json also known as javascript object
00:25 - notation is simply a data representation
00:27 - format very similar to xml or yaml
00:31 - it's used
00:32 - widely across the internet for almost
00:34 - every single api that you will access as
00:37 - well as for config files and things such
00:39 - as games in text editors like vs code
00:42 - and many many other places throughout
00:44 - programming it's used because it's
00:46 - extremely lightweight to send back and
00:47 - forth due to its small file size it's
00:50 - easy to read compared to something like
00:52 - xml since it's much cleaner and there's
00:54 - not as many opening and closing tags to
00:56 - worry about and it also integrates very
00:59 - nicely with javascript since json is
01:02 - just a superset of javascript which
01:04 - means anything you write in json is
01:07 - valid javascript so it integrates nicely
01:09 - javascript which is used all throughout
01:11 - the web for front end or background of
01:14 - web applications also
01:16 - almost every single major language has
01:18 - some form of library or built-in
01:20 - functionality to parse json strings into
01:23 - objects or classes in that language
01:25 - which makes working with json data
01:27 - extremely easy inside of a programming
01:29 - language
01:30 - throughout your programming career
01:32 - you're going to use json all the time
01:34 - whether it's creating an api consuming
01:36 - an api or creating config files for you
01:39 - to use or for other people to use for
01:41 - your application now that we understand
01:42 - what json is and why it's important
01:45 - let's dive into some of the syntax
01:46 - involved with json by starting by
01:48 - talking about the types that json can
01:50 - represent
01:51 - as we know json is a data representation
01:54 - format so we need to be able to
01:55 - represent certain data types within it
01:57 - and json natively supports strings
02:00 - numbers and these numbers can be in any
02:02 - format whether they're decimal numbers
02:05 - whole numbers negative numbers even
02:07 - scientific notation numbers
02:09 - it supports booleans which can be either
02:11 - true or false
02:12 - it supports null which essentially
02:14 - stands for nothing arrays which can be a
02:17 - list of any of the types that we've
02:19 - talked about plus the next type which is
02:21 - the final type of object an object is
02:23 - the most complex but most used type
02:26 - within json and it allows you to
02:28 - represent
02:29 - values that are key value pairs so you
02:31 - give it a key and then a value and that
02:33 - value can be anything of the other types
02:36 - we've talked about so string number
02:37 - boolean array null any of those
02:39 - different types can be the value for a
02:41 - key so let's dive into an example of how
02:44 - to use json inside of a file
02:46 - the first thing that you need to do is
02:48 - to create a file with the dot json
02:50 - extension at the end of it so that's dot
02:52 - json at the end of your file and that'll
02:55 - create a json file
02:57 - inside of this json file what you do is
03:00 - you take one of the types that we talked
03:01 - about and you put that inside of the
03:03 - file so for example you could put a
03:04 - string you could put a number a boolean
03:07 - whatever type you want inside of that
03:09 - file and that's valid json
03:11 - but if all you have is a single string
03:13 - or a single number it's really not very
03:15 - useful to have a whole file for that
03:17 - single input so what most of the time
03:20 - when you're working with json you'll
03:21 - have either an array or an object as
03:24 - your top level of your file and then
03:26 - inside of that array or object you'll
03:28 - have other values so it may even have
03:30 - other objects have other arrays or even
03:33 - just individual values just strings or
03:35 - numbers inside of that so let's take an
03:37 - example of a user object that we would
03:40 - want to put at the top level of our json
03:42 - file which we're going to call user.json
03:45 - to create an object we need to use
03:46 - opening and closing curly braces and
03:49 - then inside of that we'll put all the
03:51 - key value pairs that make up our object
03:54 - and every single one of these key value
03:55 - pairs the key must be surrounded by
03:58 - double quotes followed by a colon and
04:00 - then the value for that key and then if
04:03 - we have multiple key value pairs we need
04:05 - commas separating every single one of
04:07 - our key value pairs similarly to how we
04:10 - would create an array in a normal
04:12 - programming language so for example
04:15 - if our user has a name we'd surround
04:17 - that name
04:18 - key in double quotes put a semicolon
04:21 - after it and then we'll put the value of
04:23 - our name
04:24 - inside of double quotes as well because
04:26 - it's a string and it must be in double
04:27 - quotes and at the end of that we'll put
04:29 - a comma because we have other key value
04:31 - pairs for our user for example if we
04:34 - wanted to use a favorite number as
04:35 - another property we would put favorite
04:38 - number in double quotes followed by a
04:40 - semicolon and then put that user's
04:42 - favorite number
04:43 - then if we wanted to use a boolean we
04:46 - use a comma and then another property we
04:49 - would use is programmer as our key put a
04:51 - colon and then we would put either true
04:53 - or false with no quotes around it to
04:55 - signify that this is a boolean and not a
04:58 - string so we would put true or false
04:59 - depending on if that user was a
05:01 - programmer or not
05:02 - we could then go down and use hobbies as
05:05 - our next key value pair so put hobbies
05:07 - in double quotes semicolon and then to
05:09 - create an array we use opening and
05:11 - closing square brackets and inside of
05:14 - the array we put whatever type of value
05:17 - we want and in this case we're just
05:18 - going to use strings for the different
05:20 - hobbies so we'll put those strings
05:22 - inside of double quotes and we'll put
05:24 - commas between each one of them because
05:25 - we put commas between all the values in
05:28 - an array when we're writing out json
05:31 - next we could have another property
05:33 - that'll be an array of friends but
05:35 - instead of putting strings inside this
05:37 - array we're going to put more user
05:39 - objects inside of that array so we can
05:41 - put different user objects inside of
05:43 - that array and now we have nesting of
05:46 - arrays with objects and that's how you
05:48 - really get into the power of json where
05:50 - you can start to deeply nest different
05:52 - properties and really show a hierarchy
05:54 - of data as opposed to just a flat format
05:56 - of data like most data format files give
05:59 - you
06:00 - so for example for this friends array we
06:02 - could have a friend's array and it can
06:03 - have the same properties of name
06:05 - favorite number is programmer hobbies
06:07 - and even friends inside of that and you
06:09 - can start to get a very deeply nested
06:11 - over a if you really wanted
06:14 - then we just have to make sure that we
06:15 - don't put a comma on the very last
06:17 - property value key pair that we have
06:20 - close it with a curly brace and that's
06:22 - our full json file created now that we
06:24 - understand what json is and the syntax
06:27 - involved with writing json i'm going to
06:29 - jump into live example of me writing a
06:31 - json file and then parsing that file in
06:34 - javascript so i have visual studio code
06:36 - open and i'm inside of a file called
06:38 - companies.json
06:40 - where we're going to store an array of
06:42 - different companies and each of these
06:44 - companies is going to have a name number
06:46 - of employees a ceo and their rating out
06:49 - of five so let's get started by using
06:52 - our syntax for creating an array which
06:54 - is to use an opening and closing square
06:57 - bracket and inside of this array we're
06:58 - going to store different objects
07:00 - so our first object is going to be our
07:02 - first company which as we mentioned has
07:04 - a name
07:05 - and we're just going to give that
07:06 - company a name of big
07:08 - corporation
07:10 - and then we put the comma at the end of
07:11 - the row we want to give it number of
07:13 - employees as well
07:17 - and then this number of employees for
07:19 - this big corporation we're going to say
07:20 - that they have 10 000 employees
07:22 - then we want to give them a ceo and
07:24 - their ceo's name
07:26 - is going to be married
07:28 - and then lastly
07:29 - their rating out of 5 stars
07:33 - is going to be a 3.6
07:35 - and now we want to store a second
07:36 - company in this array so we just put a
07:38 - comma at the end of our first company
07:40 - object
07:41 - open up a new object and then give it
07:43 - the same properties so we'll say name
07:46 - and we're just going to give this one
07:47 - the name of small
07:49 - startup
07:50 - go down to the next line we got
07:52 - number of employees in this case they're
07:55 - just going to have three employees since
07:56 - they're a small company
07:58 - ceo is next and this company does not
08:01 - have a ceo because they're so small so
08:03 - we're just going to put null here which
08:05 - is okay to have different types inside
08:07 - of your json object because json doesn't
08:09 - care what types your different keys are
08:11 - it just matters that you have keys and
08:13 - values so we have null here
08:15 - and then lastly we're going to give them
08:17 - a rating
08:18 - make sure to put that in double quotes
08:20 - and their rating here is just going to
08:22 - be 4.2 or 4.3
08:24 - and there we go that is our entire
08:26 - company's json object and as you see we
08:28 - have no errors but if we for example
08:31 - didn't put the quote here you see that
08:32 - we get an arrow and that's because we're
08:34 - using vs code and it tells us when we
08:36 - have errors inside of our json so we
08:38 - know that our json is always going to be
08:40 - correctly formatted just like this is
08:42 - here
08:43 - now it's looking up this index.html file
08:46 - here which is just a super simple file
08:48 - that has an opening script tag so we can
08:51 - put some javascript in here to run on
08:53 - our page so let's create a variable
08:55 - we're just going to call it companies
08:57 - and we're going to copy everything from
08:59 - this companies.json because as i
09:01 - mentioned at the beginning of the video
09:03 - json anything in json is valid
09:05 - javascript so we can take this json
09:07 - directly and just paste it into our
09:10 - companies variable
09:12 - and then if we go down here
09:14 - and we log
09:16 - the companies variable
09:18 - and we check that out inside of our
09:20 - browser here as you can see we have
09:21 - logged this company's variable and we
09:23 - have both parts of our array we have ceo
09:26 - name number of employees rating and all
09:28 - this is the information that we have in
09:30 - this file here that we copied over into
09:32 - our javascript file and same thing down
09:34 - here we have our other company
09:36 - but most of the time when you're dealing
09:38 - with json you're going to get it back as
09:41 - a string and not as an actual javascript
09:43 - object so to emulate that let's surround
09:46 - this in backticks so it's an actual
09:48 - string and if you save that you'll see
09:50 - that now our console just has a string
09:53 - instead of an actual object and we can't
09:55 - actually use this object inside of our
09:57 - javascript
09:58 - so in order to convert this json string
10:01 - into a javascript object we need to use
10:03 - what's called json.parse so if we go
10:06 - down to our log and we say
10:08 - json.parse
10:10 - and we pass it in a string it'll take
10:12 - that string and convert it into a
10:14 - javascript object so now as you can see
10:17 - in here we have our javascript object
10:19 - that we created from this string here
10:22 - using json.parse to get a jason object
10:25 - right here and we can use this inside of
10:27 - javascript for example if we wanted we
10:29 - could get the first company inside of
10:31 - that array we could get
10:33 - their name
10:34 - and now if we say that you'll see it
10:35 - prints out the first company's name
10:37 - you get the second company's name prints
10:39 - it out and so on and you can do anything
10:41 - that you could do with a normal
10:42 - javascript object to this newly parsed
10:45 - json object that we created with
10:47 - json.parse so i hope this video was
10:49 - useful for you as you can see the actual
10:52 - format for json is fairly
10:54 - straightforward you just have to mostly
10:55 - remember to use double quotes around all
10:57 - of your different keys because in
10:59 - javascript you don't need the double
11:01 - quotes but in json you do need these
11:03 - double quotes
11:04 - other than that it's very
11:05 - straightforward it's easy to read which
11:07 - is great because just looking at this
11:09 - you can tell what it's representing and
11:11 - you can tell what the different keys and
11:12 - values mean and it's extremely
11:14 - lightweight so when you send it across
11:16 - the internet through different apis
11:19 - it'll take up very much little amount of
11:21 - space which means it'll quickly send
11:22 - back and forth which gives your user a
11:24 - great end experience so thank you guys
11:26 - very much for watching you now know
11:29 - everything you need to know in order to
11:30 - use json and consume json in your future
11:33 - projects if you guys enjoyed this video
11:36 - please make sure to leave me a like down
11:37 - below letting me know and subscribe for
11:39 - more tutorials similar to this thank you
11:41 - guys very much for watching have a good
11:43 - day