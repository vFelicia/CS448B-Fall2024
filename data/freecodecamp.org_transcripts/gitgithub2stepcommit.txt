00:00 - Alright, so you've made commits, you
understand that a commit ID is a big
00:04 - deal and now we're going to talk about a
two-step commit: why you have to use
00:09 - 'git add' and 'git commit'. Now remember when we make a commit ID that is pretty
00:15 - permanent, right, that's in history.
00:17 - So, this section over here is our log of
commits. It's like a story of all the
00:22 - changes you've made to put together your
code base. But first, we have to get there,
00:26 - right? So, you're working locally you make
some changes. Say you make changes to an
00:31 - index.html and to a CSS file but you
don't really want those to be stored
00:37 - together - the changes that you made were not logically related in anyway - that's
00:42 - ok. That's what 'get add' is for. Git lets
you choose exactly which files you want
00:48 - to include in the next commit so let's
say we want to do the index first so
00:53 - we'll 'git add index.html' and they'll move
that file and git's metadata to the
00:58 - staging area. Git knows that when you run
'git commit' only to include the index
01:03 - file not the CSS file. So, any files in
the working directory, if you want them
01:09 - to be included in the commit you need to
use 'git add' first. Once they're in the
01:14 - staging area, Git's going to include them
in the next commit once you run
01:18 - 'git commit' and then all of those files, that snapshot of the repository, including
01:23 - your changes, are stored with that 40
character sha-1 hash in history.