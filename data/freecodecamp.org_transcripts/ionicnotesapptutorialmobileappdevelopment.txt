00:00 - [Music]
00:10 - hey guys wes here in this video series
00:12 - we're going to be doing some mobile
00:13 - development using ionic so we're going
00:15 - to be building a simple note-taking
00:17 - application that will deploy to ionic
00:20 - view so that we could actually test our
00:21 - application out on say an iphone for
00:24 - instance or any other mobile device so
00:26 - let's take a look
00:27 - [Music]
00:35 - so
00:38 - [Music]
00:52 - so here's a look at the application
00:54 - we'll be building in this series you can
00:56 - see that we have an app called my notes
00:58 - and on the front page of this
01:00 - application we have a list of notes that
01:02 - we've created in the past and you can
01:04 - see that we have the ability to create a
01:06 - new note either by clicking the button
01:08 - at the bottom of the screen here or at
01:10 - the upper right hand corner we have this
01:11 - icon that we can click on to add a new
01:13 - note so on this page we have the ability
01:15 - to supply a date
01:17 - and a title and some note content and we
01:20 - can actually go ahead and save that note
01:22 - and we'll look at using ionic storage to
01:24 - actually persist the data that we save
01:26 - to our application so once we've created
01:28 - some notes here we can click on them and
01:30 - then we get taken to a sort of detail
01:32 - page if you will where we have a title
01:34 - and the date and the note content
01:36 - displayed and it's here we can actually
01:38 - delete a note which will take us back to
01:40 - the home page we'll also look at how to
01:42 - do some basic styling so for instance
01:44 - having different background images for
01:47 - the different pages that we have as well
01:48 - as using some of ionix out of the box
01:51 - components like these buttons and these
01:52 - list items and the icons for instance
01:55 - towards the end of the series we'll look
01:56 - at how to deploy this application to
01:59 - ionic view so that we can actually test
02:00 - it on say an iphone even though i'll be
02:03 - developing on windows throughout this
02:05 - series so with that let's go ahead and
02:07 - get started so the first thing that i'm
02:08 - going to do is actually install ionic
02:11 - and cordova and we'll use npm for that
02:14 - so if you don't have npm make sure that
02:15 - you have node installed first of all
02:18 - which should actually install the npm
02:20 - package manager so we'll go ahead and
02:22 - npm install dash g
02:25 - ionic and i'm going to use specifically
02:28 - at the time of this recording the
02:29 - current version which is 3.19.0
02:32 - and we'll also install cordova
02:35 - at 8.0.0
02:38 - so the reason i'm going to install a
02:40 - specific version here is because of
02:42 - course in the future
02:43 - these versions will update and they may
02:45 - make breaking changes so if you'd like
02:48 - to follow along with the video then
02:50 - installing these specific versions
02:51 - should make that a little bit easier
02:53 - okay so once those are installed we can
02:55 - go ahead and create a new project using
02:58 - ionic start so we're going to say ionic
03:00 - start
03:01 - my notes
03:02 - and this will just be the name of your
03:03 - application so feel free to name this
03:05 - whatever you like
03:07 - here we're going to have the option to
03:09 - choose a starter template and for this
03:12 - series i'm just going to use a blank
03:13 - template which will just be a very
03:15 - simple starter project
03:18 - and for now we'll say no to whether or
03:20 - not we'd like to integrate our new app
03:22 - with cordova
03:24 - and we'll also say no to whether or not
03:26 - we want to install ionic pro sdk
03:30 - okay and with that ionic has created a
03:32 - new directory for us so we can go ahead
03:34 - and cd into my notes
03:37 - and if we just take a look at what's in
03:38 - this directory we can see that we have a
03:40 - new project scaffolded out for us so
03:43 - this is going to look pretty similar to
03:45 - an angular project that might be created
03:47 - with the angular cli for instance so i'm
03:49 - just going to go ahead and open up
03:50 - visual studio code in this directory
03:55 - and you can see that we have this source
03:56 - directory which contains a number of
03:58 - different directories as well as our
04:00 - index.html and a directory called pages
04:04 - where we have this home directory that
04:05 - has a home.html page an assets directory
04:09 - and an app directory so before we dive
04:11 - into some code let's go ahead and just
04:12 - start the application and see what it
04:14 - looks like
04:16 - so for that we can just use ionic serve
04:21 - and so you can see that this is going to
04:22 - start our development server running on
04:24 - port 8100 in my case and so it should
04:27 - open up a new browser window here
04:30 - and this is our ionic application so
04:33 - throughout the series i'm actually just
04:34 - going to be using chrome to sort of
04:36 - debug our application and we'll be using
04:39 - the inspector here so if you ctrl shift
04:41 - i to open that and here i will have the
04:43 - device toolbar toggled so just like this
04:46 - icon to toggle between sort of desktop
04:48 - mode and device mode and with the device
04:51 - toolbar note that you can also select a
04:54 - preset device so this is kind of nice so
04:57 - we can see how our application would
04:58 - look if we were using any number of
05:01 - different type of built-in devices here
05:04 - okay with that let's go ahead and take a
05:06 - look at our home page
05:07 - so i'm in the pages directory and then
05:09 - under home we're looking at home.html
05:12 - here
05:13 - and we'll just make this look a little
05:15 - bit neater okay so right off the bat we
05:17 - can see we have this ion header tag that
05:20 - contains an ion navbar and an ion title
05:22 - where we have this ionic blank title
05:24 - here let's go ahead and change this to
05:26 - my notes
05:30 - and when we save we can see that our
05:32 - server our development server restarts
05:34 - and we should see my notes in the header
05:36 - bar here likewise we can change what's
05:38 - inside this ion content
05:40 - tag so we'll just remove that for now so
05:43 - now we have a completely blank content
05:45 - area
05:46 - so if you've developed other
05:48 - applications with angular in the past
05:50 - the directory structure here will look
05:52 - pretty familiar so ionic has this pages
05:55 - directory that will contain a directory
05:57 - for any number of different angular
05:59 - components that we might build so any
06:01 - ionic application will consist of any
06:03 - number of different pages and any one of
06:06 - those pages is an angular component so
06:08 - you'll notice that in the home directory
06:10 - if we look at the typescript file here
06:13 - we can see that we have our component
06:14 - directive where we have our selector and
06:17 - our template url and then the class home
06:19 - page with some default constructor
06:21 - that's been scaffolded out here one
06:23 - thing that we don't have here is an
06:26 - array containing our styles which you
06:28 - may see if you've used the angular cli
06:31 - for instance or worked on another
06:32 - angular project instead by default
06:34 - angular is currently using scss files
06:37 - and we don't need to include this in our
06:39 - stylesheets array here in scss we can
06:41 - actually just nest our selectors and so
06:44 - any styles which go into our page home
06:46 - component here will apply to this
06:48 - specific component you could of course
06:50 - use the sort of standard angular style
06:53 - sheet array in
06:54 - your component decorator but for this
06:56 - series i'll just stick with using scss
06:59 - as well okay so let's take a look at our
07:01 - app module typescript file in our app
07:03 - directory
07:04 - so here you'll see our declarations
07:07 - where we'll put some of the new
07:08 - components that we create
07:10 - notice also that in this application we
07:12 - have an entry components array in our
07:15 - app module file and we're also going to
07:17 - put any of the pages that we'd like to
07:18 - visit in our application here as well
07:21 - and we'll get into this in a little bit
07:22 - more detail a little bit later let's
07:24 - look now at our app.html file so you can
07:27 - see that all this contains is an ion nav
07:30 - element and here we have a reference to
07:32 - this root page property which if we take
07:35 - a look in our typescript file simply
07:37 - stores a reference to our homepage
07:39 - component and so our root page here in
07:42 - this case our home page will be at the
07:44 - bottom of a stack of pages that we might
07:47 - navigate through
07:48 - when we use our application so ionic is
07:50 - going to use a stack to essentially
07:53 - manage routing in our app so this is
07:56 - different than using like url routes
07:58 - like you might use in a standard web
08:00 - application in this case ionic is going
08:02 - to use something called the nav
08:04 - controller which will basically manage
08:07 - that stack so the page at the top of the
08:09 - stack will be the current page that
08:11 - we're viewing and then to go to a
08:12 - previous page we would simply pop the
08:14 - top page off of the stack which would
08:16 - cause the page under the previous top
08:19 - page to be at the top and likewise if
08:21 - we'd like to visit somewhere else in our
08:22 - application we can simply push a page
08:24 - onto the stack causing a new page to be
08:26 - at the top so ionic essentially manages
08:28 - all of our navigation using this stack
08:31 - of pages we always view the topmost page
08:33 - of a stack and we navigate by either
08:36 - pushing or popping new pages onto that
08:38 - stack so let's go ahead and generate our
08:40 - first new page
08:44 - so i'm going to leave the server running
08:45 - and just open up a new console
08:50 - and here we can just use ionic generate
08:53 - page and let's call this page add note
08:57 - okay so we'll head back into the code
08:59 - and notice that in our pages directory
09:02 - we have this new directory add note so
09:04 - with that created let's go ahead and
09:05 - check out the html file
09:07 - and we're going to change add note here
09:09 - to simply add note
09:11 - and we'll go ahead and remove some of
09:12 - this
09:13 - generated stuff from the template
09:15 - generator and then in ion content here
09:18 - i'll simply say
09:20 - add note page so what i'm going to do
09:22 - now is create a button on our home page
09:25 - that we can click and then we'll take us
09:27 - over to our add note page to sort of
09:29 - demonstrate that routing concept that we
09:31 - just talked about so let's go into home
09:34 - and then in home.html
09:36 - what i'm going to do is go ahead and
09:37 - create a button here
09:42 - so notice that when we use this ion
09:44 - button directive we get some nice
09:46 - default styling for our button so here
09:48 - i'm just going to add a click listener
09:51 - and we'll just create a method called
09:52 - add note so now if we go into our home
09:55 - typescript file we'll go ahead and
09:56 - create that method
09:58 - and now we're going to use this nav
10:00 - controller that we have access to that's
10:02 - been injected into our constructor here
10:04 - to actually push the add note page onto
10:07 - the top of our navigation stack if you
10:09 - will so now we just need to make sure to
10:11 - add a reference to add note page and
10:13 - then in our app module file we need to
10:16 - also go ahead and add that to our list
10:17 - of declarations
10:22 - and make sure it's imported here as well
10:25 - and then
10:26 - we'll also need to include it in our
10:27 - entry components
10:29 - so now if we click our button
10:31 - you can see we get taken to our add note
10:33 - page
10:36 - now we're going to go ahead and create a
10:38 - new service that will be used for
10:40 - managing the notes in our application
10:42 - so this service will be responsible for
10:44 - both creating new notes as well as
10:46 - retrieving them for us so that we can
10:47 - see them either in a list or a detail
10:50 - view and we can just use the ionic cli
10:52 - to generate that service for us so we
10:54 - will say ionic generate
10:56 - provider
10:58 - note service
11:00 - and this is going to create a new
11:02 - directory called providers and that will
11:04 - contain our new class
11:07 - note service
11:08 - in a subdirectory of the same name so
11:10 - you can see that it's just an angular
11:12 - service we have our injectable decorator
11:14 - here i'm just going to go ahead and
11:16 - remove some of this boilerplate
11:19 - and here we're going to use ionic
11:21 - storage which will essentially allow us
11:23 - to save
11:24 - key value pairs as well as json data for
11:27 - our application
11:28 - it uses a variety of different means of
11:30 - storing data including sql lite and
11:32 - local storage so i'm going to head back
11:34 - to the command line and here we'll just
11:36 - say ionic cordova
11:39 - plug-in add
11:40 - cordova sqlite
11:43 - storage
11:46 - okay so let's go ahead and minimize this
11:47 - and now in our note service what i'm
11:50 - going to do is go ahead and
11:52 - import storage
11:54 - from ionic storage
11:58 - now we need to head into our app module
12:00 - and then in our imports array here
12:03 - just after the ionic module for root
12:05 - we're going to go ahead and also import
12:07 - ionic storage
12:08 - module for root
12:13 - okay and just make sure that this gets
12:14 - imported as well at the top of the file
12:17 - so let's head back to our add note page
12:19 - so under pages add note.html
12:22 - and let's create a basic form here so
12:25 - within the ion content tags i'm going to
12:28 - go ahead and create a new form
12:32 - and at first we're going to use a simple
12:35 - template driven form
12:36 - so first of all we'll say on submit here
12:40 - what we'll do is we'll call some method
12:42 - add note in our component and we'll
12:44 - store a local reference to the form here
12:47 - which we'll set to ng form
12:49 - and this will give us a reference to the
12:51 - form that we're currently using and then
12:53 - we can pass
12:55 - f.value to this method
12:58 - in our component
13:00 - so this would be the simple example
13:02 - first
13:03 - so we'll just write it out really
13:04 - quickly here so first we'll create a new
13:07 - ion item using this ion item attribute
13:09 - likewise we can use ion label to create
13:12 - a label for our form which we'll just
13:13 - call
13:14 - title
13:15 - and then we can use ion text area
13:20 - with the name of title okay now for the
13:23 - simple example here first we'll be using
13:26 - a template driven approach so we'll use
13:28 - ng model here to get a reference to the
13:31 - title property here in our component
13:33 - that we can then use
13:35 - and then just below the item here we'll
13:37 - have our button ion button and here
13:39 - we'll just say save note
13:42 - so now we'll have access to this object
13:45 - that has a title from our forum based on
13:48 - whatever we type into our text area so
13:50 - let's go ahead and select add note and
13:53 - you can see that we have our text field
13:54 - and then save note here so what i'm
13:56 - going to do is head into our add note
14:00 - typescript file and again we'll remove
14:02 - some of this boilerplate
14:06 - and you can see that we have a sort of
14:07 - lifecycle hook method that gets called
14:09 - here which currently is just logging
14:11 - something to the console when the ionic
14:14 - view loads so we're going to go ahead
14:16 - and just remove that as well
14:18 - and we're going to create our add note
14:20 - method in our add note typescript file
14:23 - and in fact i think i'd like to call
14:25 - this save note
14:27 - so let's go ahead and rename this to
14:29 - save note
14:32 - and then back in our typescript file
14:34 - here
14:39 - we have our save note function and what
14:41 - we're going to do is pass it
14:44 - this value which will be an object that
14:46 - has a title property on it
14:48 - which is a of type string and so now
14:50 - we'd like to actually make use of our
14:53 - note service so we'll go ahead and
14:54 - inject that into this constructor
14:57 - so we'll call it node service
14:59 - and it will be a type note service
15:03 - and we can go ahead and make that import
15:05 - here as well
15:10 - okay and right and so it looks like it
15:12 - can't resolve our note service saying
15:15 - that it has no exported member note
15:16 - service so let's go take a look here
15:19 - okay so it's calling it note service
15:20 - provider i think i'd like just to call
15:22 - it note service so we'll change the name
15:24 - here and then in our app module
15:28 - we'll also need to make sure that the
15:29 - name that we import here is is also node
15:32 - service
15:33 - we'll head down into our providers and
15:37 - should just have one note service
15:40 - okay so i'm going to go ahead and close
15:42 - some of these open tabs and then in our
15:45 - add note typescript file
15:48 - we now have a valid import of our note
15:50 - service and we've injected it into our
15:52 - constructor here so now let's go ahead
15:54 - and invoke it so we'll call
15:56 - this.noteservice
16:00 - and here we'll have a save note method
16:03 - that will pass
16:05 - value which in this case is currently
16:07 - just the title of the note that we're
16:08 - going to create so let's go ahead and
16:10 - create this method in our note service
16:13 - so i'm just going to f12 on note service
16:17 - and we'll remove what's in our
16:19 - constructor
16:20 - and we'll go ahead and create this
16:21 - method save note
16:24 - it's obviously going to take the value
16:25 - of our note title so we'll make the
16:29 - input parameter note which will be of a
16:30 - type
16:31 - object that has a title on it which is a
16:33 - string
16:35 - and then what we need to do is
16:37 - essentially push this note that we want
16:40 - to save onto an array of these notes
16:43 - and for now let's just do a really
16:46 - simple way of doing that where we'll
16:47 - actually just store a reference to those
16:49 - notes in this service
16:51 - so i'm going to go ahead and
16:53 - above the constructor create a private
16:56 - notes
16:57 - property which will be basically an
17:00 - array of objects that contain a title of
17:03 - type string
17:04 - and we can even initialize that just as
17:06 - an empty array here and then you can see
17:08 - all we need to do now is to actually
17:10 - push onto that array of notes
17:12 - so we have a way to save our nodes and
17:15 - now we also need a way to of course
17:16 - retrieve them so let's create a method
17:19 - get all notes
17:21 - and here all we need to do is actually
17:23 - return
17:25 - this.notes
17:28 - in fact maybe here we'll just return a
17:30 - copy of this.notes which we could do
17:32 - using the spread operator
17:38 - this would also be like if we wanted to
17:41 - use slice instead of the spread operator
17:46 - so in a sense we're just returning a
17:48 - copy
17:49 - of this.notes and not returning
17:52 - sort of a pointer to it directly
17:54 - but in any case we can use a spread
17:56 - operator or slice for that okay so then
17:58 - back in our add note component we've now
18:01 - completed our method to save the note
18:03 - which should call the save note function
18:06 - in our note service adding it to that
18:08 - array of notes that it's collecting and
18:10 - now maybe on our home page
18:13 - so if we look in the home typescript
18:15 - file
18:16 - we'll use the node service to get all
18:18 - the notes and then display them out here
18:20 - so again we'll inject a private note
18:22 - service here
18:24 - type note service
18:27 - we'll go ahead and make that import and
18:29 - so just after our add note method that
18:31 - we created we can create one called get
18:33 - all notes
18:36 - and here we'll return all notes from our
18:38 - note service so we can call this dot
18:40 - node service
18:44 - that will return again a copy of that
18:46 - array of notes that is stored in the
18:48 - note service
18:49 - and then we'll have
18:50 - an analogous array of notes in this
18:53 - component so we can have notes
18:56 - which again will be an array of this
18:59 - object that contains a title property
19:03 - which is of type string and we'll
19:04 - initialize it as an empty array
19:07 - and now we can use
19:08 - one of ionic's lifecycle hooks here ion
19:11 - view will enter
19:15 - and we can set this.notes
19:19 - to this dot get all notes
19:24 - so ion view will enter is just a life
19:26 - cycle event this one runs when a page is
19:29 - about to enter and become the active
19:31 - page there are a number of different
19:33 - lifecycle events that we can make use of
19:35 - including ion view did load and view did
19:38 - enter
19:38 - among others including when we when
19:40 - we're about to leave a page for instance
19:42 - if you like to see a full list of other
19:44 - lifecycle events then be sure to check
19:45 - out the ionic docs and you can find
19:47 - these under lifecycle events
19:49 - under nav controller okay and then back
19:52 - in our note service i'm going to go
19:53 - ahead and just remove
19:55 - what's in our constructor here because
19:57 - we don't actually need anything in our
19:58 - constructor here yet okay so the last
20:01 - thing we need to do here is to actually
20:03 - create the part of our template that
20:04 - will allow us to display the notes that
20:06 - we're saving on the home page here so
20:08 - i'm going to go to the home.html
20:10 - template page and then here just above
20:12 - our button what i'm going to do is
20:14 - create a new ion list
20:16 - so you can see the number of different
20:18 - components that ionic provides out of
20:19 - the box which are really useful
20:21 - and here we'll create a button we'll use
20:24 - the ion item directive here to provide
20:25 - some styling and now we can use the
20:27 - standard ng4 star ng4 here to loop
20:31 - through our array of nodes so we can
20:32 - just say let note of notes
20:36 - and then we can use some interpolation
20:38 - here to just go ahead and grab
20:40 - the title from each of those notes which
20:42 - is the only property that we have on it
20:43 - anyway at the moment okay so this is
20:45 - just pretty standard angular here so
20:47 - this notes in our let note of notes is
20:51 - referring to
20:52 - the notes property that we have in our
20:55 - component and when this view is about to
20:58 - enter we call our get all notes method
21:01 - which invokes our note service to return
21:03 - a copy of all the notes that it's
21:05 - storing so let's go ahead and test it
21:07 - out so we'll create a new note called
21:09 - first note
21:10 - and then we'll go ahead and try to save
21:12 - it okay so we don't get any sort of
21:14 - feedback
21:15 - but if we click back now we can see that
21:18 - we have the first note in our list so we
21:21 - can go ahead and add a second note and
21:23 - we can save that and then we go back and
21:25 - we can see that second note is also in
21:27 - our list
21:30 - okay so what i'm going to do now is
21:32 - inside of our source directory i'm going
21:33 - to create a new sub directory and we'll
21:36 - just call that models
21:38 - and we're going to use this
21:41 - directory to store a model for our note
21:44 - object so let's go ahead and create a
21:46 - new file it's going to be a new
21:47 - typescript file we're just going to call
21:49 - it note
21:51 - dot model.ts and it's just going to
21:53 - contain a simple interface export so
21:56 - we'll go ahead and export interface note
22:00 - and now we can define the different
22:01 - properties that any note in our apple
22:03 - has let's keep it simple we'll have a
22:05 - title
22:06 - which will be a string
22:08 - we'll have some content which will hold
22:09 - the note content which will be a string
22:11 - then we'll have a date so we'll allow
22:13 - the user to select a date
22:15 - and then i'm going to have this property
22:17 - create date which will be a number
22:19 - and we'll take a look at how we're going
22:20 - to use this a little bit later but we're
22:22 - essentially going to use it to be
22:24 - a way to get a sort of unique identifier
22:26 - for any note that gets created and it's
22:29 - going to be represented as a number
22:31 - because when we create a new date
22:33 - we are going to essentially represent
22:35 - that in milliseconds since i believe
22:38 - january 1st 1970 so we'll take a look at
22:40 - how that's used in a little while okay
22:42 - so what i want to do now is to implement
22:44 - ionic storage so let's head back into
22:46 - our providers directory and then into
22:49 - our note service so if you recall
22:51 - previously we imported storage from
22:53 - ionic storage but we haven't implemented
22:55 - it yet
22:56 - so previously we were simply pushing a
23:00 - new object onto this notes array
23:02 - anytime we were saving it using this
23:05 - method we don't really get any data
23:06 - persistence so as soon as we get a new
23:09 - instance of our note service we get an
23:11 - empty array
23:12 - of our notes and so that essentially has
23:15 - the effect of deleting any of the notes
23:17 - that we've stored there any time our
23:19 - application restarts
23:21 - so we're going to use ionic storage to
23:23 - do some basic data persistence now and
23:25 - we're lucky in that with ionic storage
23:28 - it's actually pretty easy to get data
23:30 - persistence set up
23:32 - so let's take a look
23:34 - the first thing that i like to do is to
23:35 - remove these objects that we've used the
23:37 - sort of placeholders for our note object
23:40 - and
23:40 - now we can actually
23:42 - uh bring in the new note interface that
23:44 - we had defined
23:46 - and so we'll go ahead and import that
23:48 - from our models directory so now our
23:53 - notes property will just be a collection
23:55 - or an array of this note object if you
23:58 - will
23:59 - and likewise when we save a note here
24:02 - we can also
24:04 - make it of type note okay so this
24:07 - shouldn't really change the
24:08 - functionality yet we just have this new
24:10 - object type which has
24:12 - several different properties on it so
24:14 - anytime we save a note what i'm going to
24:16 - do is first thing that i'm going to do
24:18 - is simply set that create date that we
24:20 - talked about just a moment ago as a new
24:22 - date
24:23 - dot now returning a number
24:26 - which
24:27 - as i mentioned will basically just be
24:28 - the number of milliseconds
24:30 - since january 1st 1970 um utc and so
24:35 - we should get a a new number at least
24:37 - for our purposes anytime we create a new
24:39 - note here if we wanted to scale our app
24:42 - and perhaps make this a little bit more
24:43 - robust then we might find a different
24:46 - way to get a unique identifier here but
24:48 - as i mentioned this should serve our
24:49 - purposes so we're still going to push a
24:52 - note onto our array
24:54 - but now what we'll do is we'll say
24:56 - this.storage and we need to actually
24:58 - bring in
24:59 - or inject
25:01 - a storage
25:03 - service if you will into our constructor
25:06 - of type storage
25:07 - again this is coming from ionic storage
25:10 - and so
25:11 - this that storage has some methods on it
25:13 - including a set method
25:16 - and so as you can see from the little
25:18 - intellisense i got there this is going
25:19 - to
25:20 - basically set a value for a given key
25:23 - so we're going to have a sort of like
25:25 - dictionary type structure where we have
25:28 - key value pairs and that we can set and
25:31 - access with storage so we'll make a key
25:34 - notes
25:35 - and we can set any other sort of object
25:38 - here so let's just go ahead and set our
25:40 - notes array to that notes key
25:45 - okay so now how are we going to get all
25:47 - nodes
25:49 - well let's look at how we can get notes
25:51 - from storage so
25:53 - if for instance if our app were to
25:55 - refresh and we were to get this that
25:58 - notes then we would just simply get an
26:01 - empty array if nothing had yet been
26:03 - pushed onto that array so what we'll do
26:06 - instead here is we'll return and then
26:08 - we'll use this dot storage
26:10 - and now we'll use a method get that we
26:13 - have here and you can see that this is
26:14 - just to get the value associated with a
26:16 - given key so we have a sort of getter
26:18 - and a setter method here
26:20 - and now we just pass it that key
26:22 - and this is going to return a promise so
26:25 - we can call then on it to
26:27 - pass it a callback function to do
26:29 - something
26:30 - when this promise gets resolved so let's
26:33 - just call that notes
26:35 - and what we want to do here is first of
26:38 - all we want to handle the initial case
26:40 - when notes is null
26:41 - so let's just do it this way we're going
26:43 - to set this.notes equal to notes we
26:46 - should get return from our callback
26:47 - function
26:49 - but when that's null
26:51 - then we are going to set it to empty
26:54 - array otherwise return us notes
26:56 - so we have a sort of ternary operator
26:58 - here
26:58 - where we want to check whether or not
27:01 - notes that we're getting back from local
27:02 - storage is null if that's the case then
27:04 - return an empty array
27:06 - otherwise return
27:08 - the notes that we should get back from
27:09 - local storage and so we set that to
27:12 - this.notes that is on our class here and
27:15 - then what we can do
27:17 - is once again simply return a copy of
27:20 - them here
27:21 - so we use a spread operator inside of
27:25 - square brackets here to return
27:27 - a copy of this as an array so as we saw
27:30 - previously you could also
27:33 - just return this.notes
27:35 - that slice as well to return a copy so
27:38 - that part yeah i'll just leave up to you
27:40 - okay cool so now you can see that that's
27:43 - actually super easy to simply get some
27:46 - data persistence set up using ionic
27:48 - storage and ionic storage is going to be
27:51 - handling all of the you know the storage
27:54 - aspect of keeping this data persisted in
27:57 - the background and so it will be using
27:59 - things like local storage or
28:02 - sqlite or web sql things like that
28:06 - to provide us with that data persistence
28:09 - also if you missed it in the previous
28:11 - video you will want to double check your
28:13 - app.module typescript file in the app
28:15 - directory and ensure that you've brought
28:18 - ensure that you've imported ionic
28:20 - storage module from ionic storage and
28:23 - included it among your imports and
28:25 - called for root on it here
28:28 - okay so while we're in here what i'm
28:30 - going to do is go ahead and make another
28:32 - import for some forms so we can import
28:37 - forms module
28:40 - as well as reactive forms module
28:44 - from
28:45 - angular
28:47 - forms
28:49 - okay
28:50 - and we're going to use the forms module
28:52 - and the reactive forms module to improve
28:55 - the form that we have currently in use
28:58 - in our app so we're going to come down
29:00 - here and
29:02 - in our imports array we need to actually
29:04 - make sure that we bring those in so
29:06 - forms module and reactive forms module
29:09 - if you don't import these modules and
29:11 - you'll get some kind of strange errors
29:13 - when we update our forms okay so
29:16 - that should take care of our imports for
29:18 - the time being now i'd like to head back
29:20 - to our add note page so you can f12
29:24 - there if you're using visual studio code
29:26 - and if you haven't removed the
29:29 - scaffolded code here in the placeholder
29:31 - code we can remove that as well
29:36 - okay so what i want to do now is to head
29:38 - back to our add note page
29:41 - that we
29:42 - briefly built up in the previous video
29:45 - and you'll notice now that we should
29:46 - also implement
29:48 - our note object rather than use this
29:50 - sort of in-place object that we were
29:52 - calling value before when we were saving
29:54 - a node so i'm going to make this a type
29:56 - note and we'll actually call the param
29:59 - that we pass it node and so we'll need
30:01 - to make sure that we bring that in as
30:03 - well so a control period here and bring
30:05 - it in from our models
30:07 - directory and then we will just go ahead
30:10 - and update the param here as well
30:12 - okay so far so good the other thing i'm
30:14 - going to do is remove nav params from
30:16 - our constructor here so if you have that
30:18 - in your constructor
30:19 - we can go ahead and remove it and really
30:21 - all that we
30:22 - need in this class anyway is a nav
30:26 - controller and a note service
30:29 - injected so
30:30 - and all we have currently is the save
30:32 - note method which will invoke save note
30:35 - from our injected instance of a note
30:37 - service here and we are going to save
30:39 - some sort of note object
30:42 - so we'll need a way to actually pass
30:44 - that note object from our form
30:47 - to our component here so that it can
30:48 - then be passed to our note service so
30:51 - we'll take a look at what is in the
30:53 - templates let's head over there
30:55 - and so you can see that previously we
30:57 - built this sort of template driven form
30:59 - where when we submit that form we pass
31:02 - the forms value and whatever it contains
31:04 - here to our component and you can see we
31:07 - have this text area with a name title
31:10 - and that was all we were actually
31:12 - passing back
31:13 - with the ng model binding so we had some
31:16 - property title with an ng model
31:18 - directive on it and so
31:19 - we're going to update our form here from
31:22 - being a very simple sort of
31:23 - template-based form to a more
31:25 - model-based and reactive form so let's
31:27 - take a look at that now so first of all
31:29 - we're going to use two new sort of
31:31 - directives here we're going to use a
31:32 - form group to be sort of an input
31:36 - which will be an input and we'll set
31:38 - that to form group
31:40 - we're still going to bind to
31:42 - an ng submit event here
31:45 - and rather than
31:47 - call add note on the component and
31:49 - passing it the value on our form in fact
31:52 - we can go ahead and remove
31:55 - the reference to the form itself and we
31:58 - can pass this form group object's value
32:01 - up so this form group is going to
32:03 - contain a number of different
32:06 - form controls
32:08 - in fact just one form control for each
32:10 - of the different fields that we'd like
32:11 - to pass
32:13 - from our form back up to the component
32:15 - so let's take our title for instance
32:17 - here and i'm going to change this ion
32:19 - text area to an ion input which is what
32:22 - it should have been to begin with
32:24 - so we've got an ion input for our title
32:26 - here now and i'm going to remove this ng
32:29 - model directive
32:31 - our ion input will still have a name
32:33 - title i'm also going to give it a type
32:34 - of text
32:37 - but now we're going to use this form
32:39 - control name
32:41 - and we're going to set that to title
32:43 - this is going to allow us to bind to a
32:46 - title property
32:47 - in our component but this title property
32:50 - will be a sort of child if you will of
32:53 - this form group as a whole
32:56 - okay now we can do some sort of reactive
32:58 - stuff here which is pretty cool what
32:59 - we're going to do is make a div
33:02 - class alert
33:05 - and we're going to ng if and say if the
33:08 - form is not valid or if this field is
33:12 - not valid
33:13 - then we're going to cause this alert div
33:16 - to show
33:18 - so we can say if the form group dot
33:20 - controls
33:23 - and we can access
33:25 - title here so you can see that our form
33:28 - control is title and so form group has
33:30 - this controls collection on it that we
33:33 - can access using the form control name
33:36 - of title here and then we can simply say
33:38 - dot valid to check if this particular
33:40 - form control is valid
33:43 - something else kind of neat we can do
33:45 - here is we might say
33:47 - if it's not valid and it's been touched
33:50 - so in other words it's not going to be
33:51 - valid when the form first loads because
33:53 - it'll be empty and it's required but if
33:55 - it's been touched and it's not valid and
33:57 - i got to pass the form control name here
34:00 - again
34:01 - oops and we should put this in double
34:03 - quotes so if it's been touched and it's
34:05 - not valid then we'll show some alert and
34:08 - we can just bind that to some property
34:11 - so title alert i'm going to just put
34:13 - this on two separate lines that's a
34:14 - little bit easier to read
34:16 - okay so we've got this div and we're
34:19 - going to show it using an ng if the
34:23 - title form control is not valid and the
34:27 - form control has been touched and then
34:29 - we're just going to show title alert
34:31 - here which we can define in our
34:32 - component okay so i think that's pretty
34:35 - cool and
34:36 - relatively clean anyway i'm going to go
34:38 - ahead and just copy
34:40 - the ion item and make a second one here
34:42 - for the note content so we'll just say
34:45 - maybe note here
34:47 - and the name will be content as will the
34:50 - form control name
34:52 - okay so if the content
34:54 - is not valid and
34:57 - it's been touched
34:59 - then we can show some content alert okay
35:02 - finally we're going to copy one more
35:04 - island item and i'm going to put it
35:06 - above here as the first item in our form
35:08 - and we're just going to
35:09 - use this to provide a little date
35:11 - selector and so what we'll do here is
35:13 - i'm going to go ahead and actually just
35:15 - remove the alert and the input
35:18 - and we can actually say ion date time
35:21 - and then supply a display format here
35:25 - so we'll do month
35:27 - oops
35:29 - day
35:30 - and year
35:32 - and then we can also give this a form
35:34 - control name as we should
35:36 - date so that we can pass that up to our
35:38 - component and this will be really nice
35:40 - we'll see in just a moment that this
35:42 - will provide us with a clean date
35:44 - selector
35:46 - for our app okay so one more thing we
35:48 - can do since we have access to this form
35:50 - group object now is on our button we can
35:52 - make our button actually disabled if the
35:55 - form group as a whole is not valid so we
35:58 - can say form group.valid
36:00 - so our save node button will then become
36:03 - enabled when the form group
36:05 - as a whole is valid
36:07 - okay so i think that looks good let's
36:09 - head back into the component now
36:12 - and take care of handling this new form
36:15 - it's not going to be all that difficult
36:17 - really to get it wired up first of all
36:18 - we'll have a reference to our form group
36:20 - which will be of type form group
36:22 - and we'll just need to make sure that we
36:24 - bring form group in from angular forms
36:28 - and while we're at it let's go ahead and
36:29 - bring in validators
36:31 - and form control
36:37 - okay then let's create a property to
36:39 - hold our submitted form we'll call that
36:41 - note of type note
36:43 - and that will be the same note that we
36:46 - will have a date
36:49 - which will be a new date
36:51 - for its default value and then we'll
36:53 - have a title which would be a string
36:55 - which we can set to empty string and
36:57 - content string again we'll set that to
37:00 - empty string as well so we've got our
37:03 - constructor and what we're going to do
37:04 - inside the constructor when we have a
37:07 - new instance of this class
37:10 - is set this.form group equal to a new
37:13 - form group and we can just simply define
37:15 - it as an object of these
37:18 - types here so let's go ahead and do that
37:20 - so we have a new form group and the
37:22 - properties on it will be title which is
37:23 - a new form control
37:25 - content which is a new form control
37:28 - and date
37:29 - so we have our three fields that we
37:32 - looked at in the template we have a
37:33 - title content and date and we have our
37:37 - save note method so let's double check
37:39 - back in the
37:41 - template here
37:42 - [Music]
37:43 - ng submit add note yeah we want this to
37:45 - say save note
37:47 - that's okay you can call it post note or
37:49 - add note or save note as i have here
37:51 - just want to make sure that that calls
37:53 - the correct method in the component and
37:57 - then one more thing that we're going to
37:58 - add here is if you recall from the
38:00 - previous video when we saved a note we
38:02 - didn't really get any feedback and we
38:04 - had to
38:05 - click back in our application and go to
38:07 - the home page
38:08 - we're simply going to use the nav
38:09 - controller now to
38:11 - pop the current view off of the stack
38:14 - if you recall from either the first or
38:16 - second video we talked a little bit
38:18 - about
38:19 - how ioniq is
38:21 - specifically the nav controller is
38:23 - managing
38:24 - our navigation through the app it's
38:26 - managing it as a stack so if we pop the
38:29 - current view off of that stack we go to
38:32 - the previous view
38:34 - which in this case should be the home
38:35 - page so when we save a note we will
38:38 - invoke our note service to save it to
38:42 - storage and then we'll pop the current
38:44 - view off
38:45 - which should take us back to the
38:46 - homepage
38:47 - okay and so speaking of the home page we
38:49 - should head back there
38:51 - and take a look at the component and as
38:53 - you can see we need to go ahead and use
38:55 - that new note
38:57 - interface that we built sort of model
38:59 - for our note
39:00 - and
39:01 - go ahead and reference that import here
39:03 - so we can import that from models
39:06 - note dot model
39:08 - okay and you can see that it's going to
39:09 - be upset now because if you recall when
39:12 - we
39:13 - use get all notes this is going to
39:14 - return
39:15 - a promise of a note array because we're
39:19 - using ionic storage now so there's a
39:21 - couple different things we could do here
39:24 - what i'm going to do is actually make
39:26 - notes
39:27 - a promise
39:29 - of notary
39:31 - type
39:33 - and that's going to satisfy
39:35 - this method
39:36 - but now we're getting a promise of notes
39:38 - back and not a an array of notes and so
39:42 - we need a way to handle that we could
39:45 - call dot then on get all notes within
39:47 - which we could create a callback
39:48 - function and then set notes equal to the
39:51 - return
39:52 - but what i'd like to do instead is head
39:55 - over into our template
39:58 - and when we are using this for loop
40:00 - where we say let note of notes what i'd
40:02 - like to do is to use the async pipe here
40:05 - so
40:06 - we can pipe async
40:10 - and what this is going to do is simply
40:12 - return the result of that promise as
40:14 - it's available
40:16 - directly in the template here
40:17 - so you can use the async pipe with
40:20 - observables or promises and it's really
40:22 - nice in the case of observables because
40:24 - it'll actually handle unsubscribing from
40:27 - that observable
40:28 - to prevent memory leaks which is
40:30 - something that you would consider doing
40:32 - otherwise
40:33 - in the component so it's nice to be able
40:35 - to do this in the template okay so that
40:37 - looks good when we click our add note
40:39 - button we'll get taken to our add note
40:42 - page uh and sorry about this but i see
40:44 - some typos here as well
40:47 - so obviously we don't need to end our
40:50 - double quotes uh here so just be sure in
40:52 - your ng if you're starting if directives
40:55 - here that they start with double quotes
40:57 - and end with double quotes and they wrap
40:59 - the boolean
41:02 - expression so
41:03 - so i think that looks okay and now let's
41:06 - go ahead
41:07 - and fire up the server and take a look
41:09 - so if it's not running already we can
41:10 - just ionic serve
41:12 - and if you have been running the server
41:14 - then you may want to consider restarting
41:16 - because we've updated our app that
41:18 - module file
41:20 - okay so you can see we have our
41:22 - application here we can click add note
41:24 - and we have our three fields
41:26 - so we can go ahead and set a date with a
41:28 - date picker that's kind of nice
41:30 - and we can supply some title so let's
41:32 - say grocery list and and we can go ahead
41:35 - and save this note
41:36 - so we can see it here
41:38 - we'll go ahead and add a new note and
41:40 - we'll go ahead and save that so we can
41:42 - see our second note here
41:44 - and in fact if we refresh the
41:45 - application now we can see that these
41:48 - notes are persisting and that is thanks
41:50 - to ionic storage
41:52 - so if you need to clear out your local
41:55 - storage and you're using chrome
41:57 - then in the inspector you can head over
41:59 - to the application tab at least at the
42:02 - time of this recording
42:05 - i believe this used to be under a
42:06 - separate tab but i don't remember the
42:08 - name if you're using a previous version
42:10 - of chrome
42:12 - but in any case you can see the various
42:13 - local storage that chrome has here we've
42:15 - got web sql and under that you can see
42:18 - actually underscore ionic storage here
42:21 - so you can see all of our note data here
42:24 - under the notes key again with the value
42:27 - just being an array of these objects
42:30 - which happen to map directly to the note
42:33 - interface that we created in our app so
42:35 - if you want to clear any of this out
42:37 - what you can do is simply click this
42:39 - clear storage you can actually see how
42:41 - much is being used and just be sure that
42:44 - everything in your storage is selected
42:46 - and then clear all site data and that's
42:49 - simply going to remove local storage for
42:51 - this particular domain in my case is
42:53 - localhost at port 8100 so we if we
42:56 - refresh now
42:57 - then we will lose our data
42:59 - but that was simply because we cleared
43:01 - our storage from local storage you also
43:05 - may get some weird things going on if
43:07 - you don't clear local storage and you
43:09 - make certain changes to your app you may
43:12 - see some unexpected behavior
43:14 - keep in mind that you just have this
43:16 - simple key value pair that's set up
43:20 - under web sql in the ionic storage
43:23 - sort of database here
43:25 - which is currently empty because we just
43:26 - emptied it but yeah you're going to want
43:28 - to prevent some collisions there if you
43:30 - have the same key and then all of a
43:31 - sudden you have brand new
43:33 - data so i just like to go ahead and
43:36 - clear out all of this local storage
43:38 - anytime i make some major development
43:40 - changes to the app
43:43 - okay so we're almost wrapped up with our
43:45 - ionic app now what i'd like to do is
43:47 - just to make some aesthetic changes as
43:50 - well as the ability to select a note and
43:53 - then get taken to a note detail page if
43:55 - you will
43:56 - so let's go ahead and get the
43:58 - functionality of the note detail page
44:01 - worked out first
44:03 - and then we'll worry about making the
44:04 - app look a little bit nicer so i'm going
44:06 - to go ahead and stop the server if it's
44:09 - still running for you just go ahead and
44:10 - stop it and what we're going to do is
44:12 - ionic generate
44:15 - page
44:17 - view dash note
44:19 - so you can see the
44:21 - okay response here and then it generated
44:22 - this new page for us let's go ahead and
44:24 - take a look we can see it under our
44:26 - pages
44:27 - we have this view note directory which
44:30 - contains our template and our component
44:32 - as well as our scss file let's go ahead
44:34 - and hammer out the template since
44:36 - it should be pretty straightforward and
44:38 - go ahead and as usual remove the
44:39 - boilerplate code and in our ion content
44:42 - i'm going to use an ion card element
44:44 - here
44:46 - and the ion card will have ion card
44:49 - content this is just a nice component
44:51 - that ionic provides for us to display
44:53 - some data
44:55 - and here we'll have ion card title
44:57 - this is going to give us a sort of
44:59 - material design type card
45:01 - component to work with and here we'll
45:04 - we're going to have access to a node
45:05 - object in this view so let's go ahead
45:08 - and grab the title property off of that
45:10 - note object and then maybe just below it
45:12 - will have a div with class no
45:16 - date and we will grab the date
45:21 - just using interpolation here again all
45:24 - right then i'm just going to keep things
45:25 - kind of simple we're going to have a
45:28 - separator there and then we'll have a
45:30 - div that just contains the note content
45:35 - okay that's all good and then maybe at
45:37 - the bottom of
45:39 - our view here we can
45:42 - have an ion footer this is going to put
45:44 - a sort of div if you will at the very
45:47 - bottom of our view
45:48 - and in here we'll have a button ion
45:50 - button
45:52 - and with ionic we can specify a color
45:56 - and danger will make it a sort of red
45:58 - color we'll make it block which will
46:00 - make the button spread across the entire
46:02 - bottom of our view and we'll have a
46:04 - click event here to actually delete a
46:06 - note
46:07 - so we want the ability to delete notes
46:08 - as well as to create them
46:10 - and what we're going to do is pass our
46:13 - unique identifier in the form of create
46:16 - date here
46:17 - to a click event so we'll just go ahead
46:19 - and bind that delete note method
46:21 - to a click event on this button
46:24 - and then we can say delete note okay so
46:26 - that's going to take care of a very
46:28 - simple note detail page if you will that
46:30 - we'll call view note and so let's head
46:32 - into the component to kind of wire
46:34 - things up
46:35 - again i'm going to remove the
46:36 - boilerplate and we're going to inject
46:40 - a note service instance into our
46:43 - constructor
46:47 - of type note service
46:49 - we'll go ahead and bring that in and
46:51 - we're going to create a new method on
46:53 - the note service to handle that delete
46:55 - but first we're going to need to get a
46:58 - note
46:59 - so let's go ahead and create a property
47:02 - note
47:03 - and
47:04 - oops and we need to bring in
47:07 - our note model as well
47:09 - and we're going to say this.note is
47:10 - equal to this dot nav params
47:14 - dot get note
47:16 - and the way this is going to work we'll
47:18 - see here in just a moment we're actually
47:19 - going to pass a note to this view
47:22 - and the way that we access that object
47:24 - is by calling
47:27 - navparams.get
47:29 - and it's going to be a note object so we
47:31 - are going to set the node object in this
47:34 - class to that object that we retrieve
47:37 - using node params
47:39 - okay i'm not going to worry about this
47:40 - life cycle hook
47:42 - but we will have a delete note method
47:45 - which will take this create date
47:48 - and then we're going to pass it as we
47:49 - saw in our template which is a number
47:51 - type because if you recall from the last
47:53 - video when we
47:55 - create any new note
47:57 - i just new up a new date and that will
48:00 - be essentially the number of
48:02 - milliseconds since january 1st 1970 utc
48:05 - so represented as a number and so we'll
48:07 - invoke our note service here and we'll
48:10 - write a new method on it called delete
48:11 - note
48:12 - and we will find that once again using
48:15 - this create date as our unique
48:17 - identifier
48:19 - after that's done we can just simply use
48:21 - the nav control as we've seen previously
48:24 - to pop this view
48:26 - from the stack because the nav
48:27 - controller is managing our routing as a
48:31 - stack so we'll pop
48:33 - this
48:34 - view note page from the top of the stack
48:36 - which should reveal the next view in the
48:38 - stack which will be our home page
48:40 - okay so let's head over into our note
48:42 - service and implement this delete note
48:44 - functionality so we're gonna head there
48:46 - with f12 and then under get all notes
48:50 - we're going to create that delete note
48:51 - method and it's going to take our
48:54 - create date which is a number
48:56 - and so let's think about this for a
48:58 - minute because it's not immediately
49:00 - obvious how we're going to delete a
49:03 - single note
49:05 - given the fact that when we're using
49:06 - storage here
49:07 - we're basically updating a single key
49:10 - that contains
49:12 - an array of notes as its values
49:15 - so the key in
49:17 - our local storage is notes
49:20 - and we've got this note array as its
49:22 - value so
49:23 - the way that we're going to delete a
49:25 - specific note given its unique
49:27 - identifier is not of course to delete
49:30 - the notes array but rather to return
49:33 - that note to ray as it is
49:35 - except for the note that we want to
49:37 - delete so let's do that so we know we're
49:39 - going to set this.notes and we're going
49:41 - to say this.notes
49:43 - is equal to itself
49:46 - but then we're going to use filter
49:48 - and we'll pass it a callback
49:52 - that will basically say return
49:56 - where the create date on a given note
50:00 - is not equal to the create date that we
50:03 - pass
50:04 - our method
50:07 - and then once that's called then we can
50:09 - once again set that in storage
50:12 - so if we were to have many other methods
50:14 - here then we might
50:15 - refactor since we're using this uh line
50:18 - repeatedly here where we're just setting
50:20 - this notes key to this.notes but
50:24 - it's fine here as well but again notice
50:26 - what we're doing is we're not in a sense
50:29 - deleting if you will
50:31 - but rather we're using filter to return
50:33 - that notes array with all of its
50:36 - elements except for the one that
50:38 - contains the create date for the note
50:40 - that we want to remove so i think this
50:43 - is kind of a nice example of using a
50:46 - filter when we're working with an array
50:48 - of objects that we want to
50:51 - mutate in some way okay so that's all
50:53 - good but now how are we actually going
50:54 - to get to our view note page well we're
50:58 - going to want to get a note from the
51:01 - home page so that we can display its
51:04 - data all of its data on this view note
51:06 - page
51:07 - so i'm going to add one more method
51:09 - to our note service here and we'll call
51:11 - that get note
51:14 - and we're going to pass it a create date
51:16 - should be a number
51:18 - again recall that this is our unique
51:19 - identifier for a given note so here
51:22 - we're going to use this dot storage
51:25 - again
51:26 - and we're going to get
51:28 - obviously we need to get a note from our
51:30 - collection of notes so we'll start with
51:32 - getting that collection using the key
51:34 - and this is going to return a promise so
51:37 - we'll write a call right then and then
51:39 - we'll write a callback function here
51:41 - so that when it resolves
51:43 - we
51:45 - can do something with that promise so
51:48 - what we're looking for is a single note
51:50 - so what i'm going to do is create a
51:52 - private note
51:54 - property which is of type note
51:58 - and so
51:59 - we're getting that collection of notes
52:01 - from storage as a promise
52:03 - and so when it resolves we're going to
52:05 - set this.note equal to
52:08 - all of those notes we're getting back or
52:09 - rather a copy of them that we can get
52:11 - using the spread operator again
52:13 - and now we can use dot find
52:16 - to find a note by its create date so
52:20 - create date is equal to the create date
52:23 - that we passed this method
52:26 - and then we'll return this.note
52:30 - so similar to how we used filter
52:32 - previously to return a collection of
52:34 - notes save for the note that we're
52:36 - deleting that we looked up if you will
52:38 - by its create date when we use find we
52:41 - can explicitly return a single instance
52:43 - of a note from an array
52:45 - by looking for a create date that
52:47 - matches on any one of those notes and
52:50 - then simply returning it so now we have
52:52 - a way for our service to return a note
52:55 - given its unique identifier to any other
52:57 - component that is requesting it and
53:00 - where might we want to request it well
53:02 - we want to request it on our home page
53:04 - where we have a list of notes so we want
53:06 - to be able to click on a note and when
53:09 - we click on it we want to get taken to
53:11 - our view note page
53:13 - and if you recall our view note page
53:15 - that we were just
53:16 - working with has a way to receive a note
53:20 - object from some nav params
53:23 - so let's wire this up now so on our home
53:26 - page template what i want to do is just
53:29 - add a simple click event binding so
53:31 - click
53:33 - to some method called get note
53:36 - and of course we have the note so we can
53:39 - just grab its create date okay cool so
53:41 - let's write this method in our component
53:44 - so under add node maybe we'll write a
53:47 - get note method
53:48 - it takes a create date which is a type
53:50 - number
53:52 - and we'll invoke our note service and
53:55 - specifically use the new get note method
53:57 - that we just wrote
53:59 - past the create date that we're passing
54:02 - in from the template
54:04 - and recall this is going to return us a
54:06 - promise
54:07 - so then what we'll do is we'll simply
54:10 - say
54:11 - when that resolves we set this.note
54:14 - because our promise will return
54:16 - that note object that it's finding from
54:19 - our array
54:22 - and so we can go ahead and create a note
54:24 - property here and we're just going to
54:26 - explicitly make these uh private
54:30 - okay so now
54:32 - when this promise resolves we set our
54:35 - note
54:35 - and now that we have the note we can
54:37 - actually use our nav controller again to
54:40 - do something pretty cool
54:41 - which is to
54:43 - actually push
54:45 - the view note page
54:49 - so we'll bring that in
54:50 - so that of course will bring up the view
54:52 - note page but the viewnotepage's
54:54 - constructor is
54:56 - expecting us or you know has the ability
54:58 - to receive some object so as a second
55:01 - perimeter to push here we can add any
55:04 - nav params that we want to pass along to
55:06 - the view so we're going to pass this
55:08 - object
55:09 - we're going to call it note and we're
55:11 - going to set it equal to this dot note
55:14 - so what's neat about this is we're just
55:16 - passing some object to the view we've
55:18 - got a note property on it we set it
55:19 - equal to this note that we've retrieved
55:21 - from our service and then back in our
55:24 - view note component
55:26 - in the constructor we can see that we
55:29 - are going to immediately set this.note
55:32 - on this page
55:33 - to some some nav prams that we're
55:36 - passing this view specifically the note
55:39 - from that object that we're passing so
55:42 - this is kind of a neat way i think
55:44 - to pass data between pages in ionic
55:48 - simply using
55:50 - nav params and the nav controller so if
55:53 - we've wired this up correctly we should
55:54 - be able to now
55:56 - see it if we start the server back up
56:00 - okay so let's take a look we'll go ahead
56:02 - and add a note and now if we click it
56:06 - oh we see that no component factory
56:09 - found for viewnotepage did you add it to
56:12 - ngmodule.entry components and no we did
56:15 - not so let's go ahead and do that now
56:18 - so i forget to do this often as i've
56:21 - been working with ionic because it's not
56:23 - something that we
56:24 - typically do if we're using
56:27 - just a plain angular project using the
56:28 - angular cli but take a look in
56:31 - app.module.ts and note that we have some
56:34 - entry components
56:36 - in an array here and we need to add any
56:39 - pages that ionic is going to need to
56:41 - render into these entry components
56:44 - which will include all the pages for our
56:46 - application so let's go ahead and
56:48 - include that here
56:51 - so view note page
56:52 - go ahead and make sure it's imported
56:54 - likewise we'll add it to our
56:56 - declarations
56:58 - so at least at the time of this
56:59 - recording the ionic cli is not adding
57:03 - view note or it's not adding new pages
57:05 - that we generate to our declarations or
57:07 - entry components array
57:10 - okay so let's see if that has solved our
57:11 - issue i'm going to go ahead and stop the
57:14 - server and restart
57:18 - okay notice that when you restart you
57:20 - should still see what's in your local
57:22 - storage unless there's something kind of
57:24 - wonky going on with your local storage
57:26 - in any case now when we click on our
57:29 - note we get taken to this page and so
57:32 - that's pretty cool we also have our
57:34 - delete note button so if we delete it
57:36 - let's see if this is working
57:38 - it appears to be working because our
57:40 - note no longer exists so let's add a
57:42 - couple of test notes here and we should
57:44 - be able to click on a note
57:46 - and yeah we can see it that's pretty
57:48 - cool we can click on another note and we
57:49 - can see some different data
57:52 - so let's see what happens when we delete
57:54 - a note
57:55 - and we can see that the new note that we
57:57 - had just created disappears
57:59 - okay so now what i want to do with the
58:01 - basic functionality of our app more or
58:03 - less complete is let's go ahead and just
58:06 - apply some very basic styling to the app
58:09 - and just kind of clean it up a little
58:10 - bit before we deploy it using ionic view
58:14 - so i'm going to just minimize this and
58:17 - now we can even just stop the server
58:20 - and what i'm going to do is close out a
58:22 - bunch of these windows
58:23 - and what i'm going to do now is take a
58:25 - look in our assets directory so we have
58:28 - in our assets directory this images
58:30 - folder which currently just contains an
58:33 - ionic logo in there so what i'm going to
58:35 - do is drop some background images here
58:38 - into this directory
58:40 - and this website just provides a bunch
58:42 - of free stock photos that are really
58:44 - high quality so they're kind of nice for
58:47 - use in building
58:49 - sort of test applications or demo
58:50 - applications i'm not affiliated with
58:52 - these guys in any way
58:54 - i just figured i would give you a heads
58:56 - up that this is what i use a lot of
58:57 - times and yeah i find it to be really
59:00 - easy to find some good photos here let's
59:02 - find some background images all right
59:04 - that one looks good and it's going to
59:06 - download like a medium size this one
59:08 - looks good we'll download this one and
59:10 - then i don't know maybe something like
59:12 - this looks good
59:16 - okay so we've got some images i'm just
59:17 - going to drop them here into the images
59:20 - directory and i just renamed them to
59:22 - like bg1 bg2 and bg3 all right so those
59:26 - look good now what we can do is in any
59:30 - one of
59:30 - our style sheets
59:33 - so let's take a look so like in home
59:35 - we'll go into our home.scss file
59:38 - and i'm just going to paste in some
59:40 - styles here so you can see that we can
59:42 - sort of nest our selectors here which is
59:45 - kind of nice so we can see that in this
59:47 - ion content div that we'll have in our
59:50 - homepage component we'll just have a
59:53 - background and
59:54 - i need to fix that so it's going to be
59:56 - in
59:57 - assets slash images and then we'll have
60:00 - this bg1.jpg so you can provide a
60:02 - relative path in your url and so that
60:06 - should work likewise on our add note
60:08 - page if we go into the scss file there
60:12 - i'm just going to go ahead and paste
60:14 - we'll grab our second background image
60:17 - and then finally in view note
60:19 - i'm going to go ahead and paste
60:21 - and you can see that here we'll use
60:24 - rbg3.jpg
60:27 - so again just use whatever images that
60:29 - you've collected and named in your
60:31 - assets slash images directory this other
60:34 - stuff here is basically just applying a
60:37 - little bit of a gradient overlay to each
60:39 - of the images this is an effect that you
60:41 - may have seen before where we have a
60:44 - sort of semi-transparent or semi-opaque
60:47 - background gradient and that's going to
60:49 - get overlaid on this background image i
60:52 - also have some css class selectors here
60:55 - just to do a little bit of styling to
60:57 - some of the other elements on this page
60:59 - okay so let's go take a look i'm gonna
61:01 - go ahead and start the server
61:04 - okay and we'll inspect to get more of a
61:06 - device type view
61:09 - and so you can see there's our
61:10 - background
61:11 - it's pretty cool if we add a note we can
61:13 - see another page with another background
61:15 - and if we view a note again we have a
61:18 - third background with a little bit more
61:19 - styling on our page here so this is
61:22 - pretty nifty we might add some more
61:25 - things to sort of like maybe add the
61:26 - date to our collection of notes here
61:29 - and you could do that very easily for
61:31 - instance if we just head back to the
61:32 - home page
61:34 - it's really up to you
61:36 - but maybe you have some span here that
61:39 - contains the
61:41 - node.date for instance
61:49 - and so you can see it here and then you
61:50 - could sort of style it however you like
61:52 - maybe we move it back here and i think
61:54 - the name of our class was just date
62:00 - so there's just a little bit more
62:01 - styling you can do and you can just play
62:03 - around with this and get it to a place
62:06 - where you're happy with it
62:08 - okay so now we've sort of completed a
62:11 - demo version of our application there's
62:13 - certainly other things you could do here
62:15 - maybe you have the ability to edit a
62:17 - note or copy a note or maybe even like
62:20 - text a note or something like that
62:22 - there's lots of things that we could do
62:24 - from here but we have a basic crud
62:26 - application set up or at least create
62:28 - read and destroy
62:30 - so like i said you may want to
62:32 - create
62:33 - a method to edit a note on a page that
62:35 - shouldn't be too difficult we've looked
62:37 - at ways to
62:39 - access a note directly using the unique
62:41 - identifier that we've chosen here and so
62:44 - you may want to consider
62:46 - adding a method to your note service to
62:49 - say update a note and you could again
62:52 - get that note just by using this create
62:54 - date that we're using as the identifier
62:57 - so i'll leave that up to you to make
62:58 - improvements to the app make updates or
63:00 - add new features for now let's go ahead
63:03 - and see how we can actually deploy this
63:04 - app to a device using ionic view
63:08 - so at the time of this recording if you
63:10 - head over to ionicframework.com
63:12 - pro view you can get some information
63:15 - here about vue basically a way to yeah
63:18 - as you can see here share test and
63:20 - collect feedback on your apps and this
63:22 - basically allows you to do that without
63:24 - ever going through the app stores so i'm
63:27 - not sure exactly how it's working but
63:30 - basically you would download vue onto
63:33 - your device and it serves as almost like
63:35 - a container for your application so i
63:38 - have an iphone and i simply downloaded
63:40 - the
63:41 - new
63:42 - view app or the newer view app
63:44 - note that there is a legacy ionic view
63:47 - which i believe has a white icon but the
63:49 - most up-to-date view app again at the
63:51 - time of this recording has an icon with
63:54 - a blue background so if you're following
63:56 - along here go ahead and get the current
63:59 - view app if you're using an iphone or
64:01 - android here and then go ahead and sign
64:04 - up and note that this is all free at
64:06 - least just for creating a small app here
64:09 - to test out
64:11 - on your own device so i'm going to go
64:13 - ahead and log into my account here and
64:15 - you can see that i've previously
64:18 - deployed an app
64:20 - so just to start fresh here i'm going to
64:22 - go ahead and delete this app and we'll
64:24 - go ahead and create a new one
64:26 - we'll give it a name we're just going to
64:27 - call it my notes again you can call
64:29 - yours whatever you like we'll go ahead
64:30 - and create it
64:32 - and then it's just going to give you
64:33 - some very straightforward instructions
64:35 - to build and deploy your application so
64:38 - what we want to do is connect an
64:40 - existing app and this is going to be
64:41 - very similar to using other sort of
64:44 - platforms as a service so if you're
64:46 - using like say heroku or something to
64:49 - deploy
64:50 - an application then this is going to
64:52 - look very similar basically you're going
64:53 - to push a git repo containing your ionic
64:56 - code to ionic and it's going to take
64:59 - care of building your application and
65:02 - deploying it then on your device you can
65:04 - log into your account and access
65:07 - that application and then launch it
65:08 - directly from ionic view
65:11 - so let's go ahead and just do that
65:15 - go ahead and stop the server
65:19 - and so we're in our project directory we
65:21 - want to make sure that we have the
65:23 - latest ionic cli
65:28 - okay so at the time of my recording i've
65:30 - got ionic 3.19.0
65:33 - and then we'll go ahead and ionic link
65:38 - and then you pass your pro id
65:40 - to link the current app
65:43 - to your ionic account and then we can go
65:45 - ahead and get push ionic master here
65:52 - okay and i forgot my password a few
65:53 - times but luckily on the third time we
65:55 - got it okay and once that's done we
65:58 - should be able to
66:00 - refresh the page here
66:04 - and you can see the branch you have here
66:07 - along with the latest commit so if we
66:09 - click here we can actually see the build
66:11 - log
66:12 - which is pretty cool
66:14 - you can even package a build for ios or
66:16 - android which will require you to
66:18 - upgrade to a pro account
66:20 - and you can do some versioning here for
66:23 - ios or android so it's pretty cool if we
66:26 - click head back to our account here you
66:28 - can see now that
66:30 - we have an app associated with our
66:31 - account called my notes and so if you
66:34 - have the
66:35 - ionic view app on your device you can go
66:38 - ahead and log into your account and then
66:41 - deploy this application for testing to
66:44 - your device