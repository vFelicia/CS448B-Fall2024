00:38 - hello hello L welcome to another live
00:42 - stream in which we're going to continue
00:44 - our journey to try to solve the first
00:48 - 100 projects in the project Euler
00:51 - challenge we're left at problem 18 which
00:56 - we're going to start today and see how
00:58 - far we can go in today's string say
01:01 - hypothetical live with us and in the
01:05 - meantime let's see what the problem
01:07 - eighteen is about I try to look at the
01:11 - the problems but they're very
01:13 - interesting to say the least
01:15 - so let's see what this is about
01:20 - okay so problem 18 maximum path some I
01:25 - by starting at the top of a triangle
01:28 - below and moving to adjacent numbers on
01:31 - the row below the maximum total from top
01:35 - to bottom is 23
01:37 - okay so we have a triangle and we need
01:42 - to figure out which is the maximum
01:45 - maximum total all right we can see here
01:49 - they're highlighted with red which is
01:52 - good and apparently we have this big
01:56 - triangle we need to find the total for
01:58 - all right
02:02 - note as there are only 16,000 road
02:06 - routes it is possible to solve this
02:08 - problem and trying abrupt
02:09 - however problem 67 is the same challenge
02:13 - with the triangle containing 100 rows it
02:16 - cannot be solved by brute force and
02:18 - requires a clever method all right
02:21 - however probably by the problem 65 67
02:27 - we're going to to figure out the clever
02:31 - no way but as of now I'm kind of
02:37 - thinking
02:40 - how could we approach this so we could
02:44 - go the longest path here well I mean
02:53 - let's see yeah trying every round
02:56 - hello oppression how are you welcome by
02:59 - the way for those of you who are
03:01 - watching for the first time I don't have
03:04 - anything prepared for these challenges
03:05 - we're doing we're going to do them live
03:07 - so this is why you'll might see me
03:10 - struggle you might see fail you might
03:12 - see me and search for solutions
03:14 - well not exactly for solutions but for
03:18 - hits or but we'll see feel free to say
03:23 - hi in the chat if you're live with us
03:24 - and yeah if you also want to try this I
03:29 - highly recommend you do maybe you can
03:32 - find a nice solution okay so let's see
03:38 - we have a test triangle here which is an
03:42 - array of arrays okay and I see they
03:46 - added zeros to fill up the empty space
03:51 - here in the Triangle
03:53 - so you can see we have triangle like
03:55 - this
03:58 - okay so let's think
04:02 - you
04:04 - [Music]
04:06 - I'd done
04:08 - for a way to not make the brute force
04:14 - so we're going to attempt that and see
04:16 - how it works they said it should be fine
04:19 - taking the route so let's write it okay
04:23 - we have the function here let's use
04:26 - console that lock so we can see what it
04:28 - outputs as of now should say through
04:30 - perfect
04:33 - okay so let's see we want to go over the
04:38 - array of arrays so let's use two loops
04:41 - here triangle that well I guess that
04:48 - it's a
04:51 - square matrix right so we could either
04:54 - say zero that flanked I plus plus and
04:58 - then let J be triangle but I guess this
05:05 - will be over the arrays yeah and this
05:10 - will be zero that lect or well I that
05:15 - like let's go with that and J plus plus
05:19 - okay so we should now have access to all
05:21 - the all the elements in the arrays now
05:27 - we need to store the total so let's see
05:32 - let that'll be zero and at the end we
05:36 - want to well get that total against this
05:41 - so somehow in max total and let's put it
05:49 - to minus infinity then okay and we're
05:53 - returning this the reason why I'm using
05:55 - Mac's total is because we're going to
05:57 - calculate the total here and then here
06:02 - we're going to say if total is greater
06:06 - than max total then well we're going to
06:10 - store it in the max total variable okay
06:17 - hairpin welcome
06:21 - I also keep in mind that the chat has a
06:23 - bit of delay around 20 seconds or so so
06:27 - you might be just a bit behind good all
06:34 - right so we have the total we now just
06:38 - need to calculate it
06:41 - so let's see we want to calculate like
06:44 - this so three plus seven plus two plus
06:47 - eight
06:50 - then we need to go three plus four plus
06:54 - four plus five and so on but the three
06:58 - keys dead
07:06 - we can also go from four so we have
07:08 - three four you can go what I guess let's
07:14 - see three four we can go to four and six
07:19 - right so this is how the triangle looks
07:23 - so from three we go to seven or four and
07:27 - if we are at four then we can go to two
07:31 - so
07:35 - yeah that's that's something we can
07:40 - remove so we don't go over everything
07:42 - basically just adjacent and the way it's
07:46 - structured is that well if we're at 7 we
07:51 - go 2 & 4
07:53 - okay so our current index is I and J
07:59 - right now what we want to do let's see
08:06 - [Music]
08:13 - so we gathered three and then in the
08:17 - next loop
08:20 - we want to get the seven or the four how
08:24 - do we keep track of that
08:30 - if you have any idea just let me know
08:33 - [Laughter]
08:36 - you
08:38 - yeah I think everything's fine I didn't
08:40 - check with you hopefully you can hear me
08:41 - well okay so let's see using its
08:46 - approach of looping through those
08:56 - so it will go I J then I plus one
09:02 - J
09:06 - I plus 2j and so on and so forth
09:12 - but if we check which is the bigger this
09:17 - or I and J plus one so let's say we go
09:24 - over the triangle at length okay so this
09:26 - is the array and this is the element so
09:29 - J is basically yeah J 0 1 2 3 ok
09:37 - mm-hmm
09:43 - but how do we know
09:46 - which one would pick that that's my
09:48 - concern
09:51 - APD's approaches another best
09:56 - you
10:03 - could we check which one is the largest
10:09 - but you can see in this case if we are
10:12 - at four and we go down we could pick
10:15 - four or six
10:19 - but you might say okay six is bigger
10:24 - right so it should be the case but it's
10:26 - not okay so that's not a good option
10:34 - what if
10:37 - [Music]
10:42 - we can see that on this line nine is the
10:44 - biggest
10:49 - which is good but yeah
10:55 - missing something even for the brute
10:58 - force
11:05 - oh you know what actually should be good
11:10 - what if we remove the zeros so we go
11:16 - here then down then because this goes
11:20 - down
11:23 - and yet goes to the right so this should
11:25 - work though well let's try it
11:29 - so total will be plus equals triangle I
11:33 - and J we just get the element and put it
11:36 - in total weight it will go here nope
11:42 - that's not good
11:43 - I am J it will just get this
11:48 - and then a total of days and it's nope
11:50 - not that's not what we want
11:52 - you want to go down so J and I that
11:58 - means first part here and then
12:05 - J will increase I will remain the same
12:15 - so yeah kind of nothing after in Texas
12:19 - here
12:24 - it just means the spark for some reason
12:27 - Kent doesn't doesn't get out
12:32 - fine well we have time let's see we have
12:36 - planted that theory ok so I will be 0
12:41 - that means I will remain here and J will
12:45 - increase good that's what we want but in
12:49 - the next loop yes basically now we're
12:51 - cutting days which is not exactly what
12:55 - we want
12:59 - [Music]
13:04 - so probably this is not the best idea
13:15 - if we remove the zeros
13:20 - and then
13:23 - keep track of the indexes go back
13:32 - you
13:35 - you
13:38 - [Music]
13:45 - you
13:58 - what if we have another inner loop here
14:01 - which goes to check the two of the
14:04 - indexes so we get this in the next loop
14:08 - we're here but we can also get this
14:16 - although we can check which is the
14:17 - bigger
14:20 - you
14:22 - where is Lauren but you perfectly I need
14:26 - your help
14:30 - maybe some of you says it and I don't
14:32 - get it
14:41 - another approach would
14:43 - with some kind of recursion in which
14:47 - we're going down and then
14:52 - we can well go back up and another route
15:01 - I reversed the triangle
15:08 - I think that's basically the same right
15:12 - that way yeah
15:17 - okay this is officially the hardest so
15:21 - far although we spent quite some time in
15:25 - a few challenges
15:29 - in the past
15:31 - okay let's find another approach
15:37 - reset reset from scratch good so
15:49 - feels like I'm missing some kind of
15:51 - algorithms here my bed
15:59 - you
16:01 - [Music]
16:04 - what are all the possible variants
16:10 - one two three four
16:16 - and
16:20 - five
16:25 - six seven I think like seven ish
16:33 - you
16:37 - you
16:40 - we go the other way around let me
16:45 - reverse this triangle let's do something
16:47 - maybe we get an idea
16:49 - so for let I call triangle that length
16:55 - minus 1 I greater than 0 I - - and here
17:01 - we're going to do can select triangle of
17:04 - I ok let's see
17:07 - undefined equals okay
17:11 - so let's see now this triangle can we
17:15 - figure out this way
17:18 - so okay
17:23 - that's one which is good
17:27 - now when we're here we could also go
17:30 - that route
17:41 - no what if we filter out the zeros X X
17:49 - greater than well different than zero
17:56 - and we don't well oops
18:03 - like this and we go
18:10 - triangle the length I post was here we
18:16 - need I last okay yeah so now we don't
18:20 - have the zeros can we use that
18:27 - mm-hmm
18:30 - I'm rotating the Ray and changing it
18:33 - just to see if we find some kind of a
18:36 - clue of what we need to do if I can't
18:41 - find it then I might just search for
18:43 - some algorithm maybe
18:47 - because they don't have any as if now
18:53 - just a good ol loop
18:57 - okay
19:00 - so that just just the thing that we
19:05 - could go two ways that that's the thing
19:09 - I think and
19:12 - get my head around now
19:15 - I'm sure it's something silly
19:29 - I knew that this day will come when we
19:32 - get stuck
19:43 - you
19:50 - if in the for loop we check both so we
19:54 - go here and on the next one we check
20:01 - both
20:04 - but we can need to keep track how we're
20:07 - going to keep track of that
20:16 - so say we're at seven then we can go to
20:20 - two or four
20:27 - - or for two or four
20:32 - then
20:39 - you
20:41 - no it doesn't make sense like this
20:49 - you
20:55 - [Music]
20:57 - should we try another one and leave this
21:00 - late no let's see
21:04 - hey Lauren finally you're here I don't
21:11 - like to give up on problems but just
21:14 - can't find a way and I'm not sure if I
21:18 - should continue now or maybe
21:25 - what about taking the last array merging
21:28 - it into the last before last keeping
21:30 - track of the highest values you can't
21:33 - really keep track of the highest values
21:36 - I would calculate the pet sum for each
21:39 - position as
21:42 - the pets um hmm that's interesting okay
21:47 - okay we're getting somewhere
21:51 - so about what Lawrence said we can't
21:54 - really keep track of the highest because
21:56 - it depends on the position on the
22:00 - previous one
22:05 - right
22:11 - okay you can not sure what you mean
22:16 - because of the delay make sure you give
22:18 - out full context of what you're saying
22:21 - it might miss what
22:24 - you
22:26 - to eight
22:30 - and five
22:37 - to 8/5
22:46 - but some of I J equals triangle IJ plus
22:50 - maximum of that sum I minus one J your
22:55 - ethnic copy this and we're going to look
22:58 - over here okay
23:01 - so Pat sum is triangle type J plus
23:06 - maximum path some I minus 1 J Pat some I
23:11 - minus 1 J plus 1
23:16 - so you get so to get substituted by to
23:21 - night because
23:30 - okay we have two approaches here Lauren
23:34 - says something not sure if I quite get
23:38 - it so to get substituted by 2 plus 8
23:42 - because 8 Oh
23:53 - okay
23:57 - and forget
23:58 - edited by five plus nine
24:02 - okay so what Lauren says let's see
24:05 - although this is something also
24:07 - interesting I don't quite get it though
24:11 - let's see okay finally with a bit of
24:14 - help from the chat we can do this
24:16 - yay all right so let's see if we go top
24:25 - and but well
24:29 - from top to bottom and we check which is
24:36 - the bigger one
24:41 - and then we add this to the next one
24:48 - then we check these two and a date and
24:50 - these two and edit and then same here
24:52 - what happens let's see so if we do that
24:56 - we're going to have a triangle three
24:59 - seven four whoops and then here we're
25:02 - going to have 10 13 and nine right we
25:07 - added eight two two we added nine two
25:11 - four and we're did well nine to six
25:14 - sorry
25:16 - 96 which is 15
25:20 - okay next up we have three then we have
25:26 - 7 plus 10 7 plus 13 this is the biggest
25:31 - 20 and then we get 4 plus 15
25:38 - which is 19
25:42 - and then at the end we have 3 plus 2023
25:46 - well it is quite good
25:50 - yes so this is the approach Thank You
25:52 - Laurent talk bold well hopefully
25:58 - eyebrows your name doc I'm going to go
26:01 - with this approach as I quite up like
26:04 - well I think I understood it
26:10 - that's and I mean the triangle that
26:12 - contains the accumulated sums isn't it
26:15 - something similar what we've done here
26:17 - all right let's see so what we want to
26:21 - do is two things we want to go the other
26:26 - way on the triangle so let's rotate it
26:29 - and the last row will be the sum of the
26:39 - elements and then we need to add the
26:42 - last row to the next row
26:46 - so we're going to do the calculations
26:49 - and then go up add them inside right
26:55 - that's kind of weird but okay let's see
26:59 - how we're going to approach this two -
27:04 - two - okay we need to go or reverse in
27:08 - the triangle so let's do that first
27:10 - let eyes triangle that length minus one
27:15 - I greater equal to zero and I plus plus
27:19 - so now if we cancel that log triangle of
27:25 - I we get oops - - sorry okay so we get
27:33 - this now what we want to do is to add up
27:39 - the pair's
27:41 - so can we do something like this
27:45 - triangle of I will be let's just do it
27:50 - brute force first and then
27:55 - okay so we have four elements element
28:00 - one will be something and like this two
28:06 - three and four this will be triangle i0
28:13 - triangle 5c well one and two something
28:19 - like this and here we're going to have
28:21 - element 1 plus element 2 element 2 plus
28:24 - element 3 and element 3 plus element 4
28:27 - right
28:32 - so instead of
28:38 - well and now let's let's cancel that
28:42 - block triangle here all right
28:51 - good-o triangle vie yeah so that that
28:56 - happened I deleted tests okay so we had
29:02 - some these 213 this is 14 and this is 12
29:08 - next up
29:11 - uhh
29:16 - what we did yeah we added them up right
29:19 - so 13 goes in to 14 goes in for and 12
29:26 - goes in 6 right
29:32 - oh now wait wait wait wait wait
29:37 - we need the bigger one sorry my bad so
29:40 - not some not sure what I had in mind
29:46 - yeah so the bigger one okay so let's
29:52 - think again
29:59 - met up max
30:03 - one element to then met up next element
30:07 - 2 element 3 then met that max element 3
30:15 - and element 4 right this is what we
30:18 - wanted
30:18 - all right good good good good good and
30:21 - now after we're done this we want to add
30:26 - them up in the next loop okay so
30:32 - triangle of I minus 1 will be let's see
30:45 - if this is just a brute force then we're
30:48 - going to clean it up and make it look
30:49 - prettier hopefully
30:53 - uhh
30:57 - so we want an array triangle of i0
31:04 - triangle of i1 and triangle of I and two
31:11 - but to this we're going to add what we
31:13 - have now
31:14 - so triangle of I minus 1 0
31:21 - Plus triangle of I minus 1 1 and
31:29 - triangle of I - - -
31:34 - okay some things
31:44 - oops
31:48 - okay so I messed up in my own ad we know
31:53 - what we have to do just let me find a
31:56 - way we do that properly okay go back
32:03 - back back back back
32:04 - what if
32:07 - we start with the second row and then we
32:11 - do that calculation
32:17 - of going above
32:20 - the maximum
32:23 - what about that so we now go the other
32:26 - way around and you want to start from
32:29 - this one so I - two
32:34 - oops triangle of I okay good
32:41 - and what we want to hear let's let's see
32:45 - if this time we get it so we want to go
32:48 - over the triangle J less than triangle
32:54 - the triangle of I that's blanked I J it
33:00 - was plus so we go over all the elements
33:02 - good that's good and now what we want to
33:07 - do is to go one level up and find what's
33:15 - the biggest between the element above
33:17 - and element to the right right right
33:22 - hopefully okay let's see and also add it
33:27 - to this triangle row okay so triangle of
33:33 - I and J will be a triangle of I and J so
33:40 - this one plus method max of a triangle
33:46 - of I think this is what dark set to so
33:52 - we want to go one level up - one of J
33:56 - and also so between this one and
34:01 - triangle of I minus 1 J plus 1 this is
34:07 - exactly what Doug said I just didn't
34:13 - know exactly how did yeah apparently we
34:19 - had two solutions the same okay now can
34:22 - I treat property because this might not
34:26 - be
34:29 - well let's see what if I do here current
34:34 - will be this
34:42 - okay
34:46 - go on up
34:49 - and we check and I guess
34:51 - can go a minus one here
34:55 - every property 0 undefined okay what's
34:59 - wrong
35:00 - and here I want to consider a triangle
35:10 - okay so the current is good a Magda max
35:12 - so we go one level
35:16 - ah
35:20 - oh I think it's plus one right because
35:23 - we're going the other way
35:30 - okay
35:32 - so that was probably we're not
35:38 - counseling the plug here yes we're going
35:42 - I forgot that we're going the other way
35:44 - around so yeah
35:50 - something's happening here we get the
35:55 - numbers eight five nine three then we
35:59 - get ten so it added two then we get 13
36:05 - so it added what why is there 13 oh this
36:15 - one right
36:18 - one is 13 oh wow the good thing is that
36:21 - we have 23 why did but we have it so
36:29 - well this work now
36:33 - if we say zero and zero we'll always be
36:36 - on that spot
36:39 - it should be because basically we are
36:42 - reverting the triangle right and the top
36:47 - value should be in the top-left corner
36:51 - you
36:54 - yeah again so
37:01 - she returned 23 okay
37:04 - console output 23
37:10 - wait what's wrong so we have this right
37:14 - should return 23 something's wrong here
37:20 - let's see counsel resolved is this and
37:30 - we're going to return resolved 23 okay
37:38 - 23 and this is failing a might be some
37:43 - issue on their side
37:50 - I'm very curious how this works
38:02 - we could try it but
38:05 - we just need to format it in an array of
38:07 - arrays
38:10 - kind of because if we post paste it here
38:14 - we have this
38:19 - [Music]
38:22 - yeah quite some time to format this just
38:28 - so we can test it
38:31 - some reason and quite yeah let's do it
38:40 - okay and we need this and then this and
38:49 - then this without this okay maybe we'll
38:55 - beat fast maybe not
39:05 - okay
39:12 - and two more get now we want to add
39:20 - commas
39:26 - ah one two three four one two three four
39:34 - all right and we want to close the array
39:37 - and close it here all right
39:43 - this should be our death triangle we can
39:51 - console here and we can move this
39:57 - down just so we can see that well
40:01 - legacy octal literals okay that's not
40:09 - good
40:12 - they don't like my hopefully turtles oh
40:15 - and we don't have Thomas here
40:27 - oh boy do I need to can I have come and
40:31 - find
40:38 - it's not I need to remove all these
40:42 - zeros
40:56 - this is too much to do for testing is it
41:09 - now I don't like this oh well did you
41:14 - test it why can't they do comment find
41:18 - oh wait wait wait wait wait
41:22 - we can do this finally good
41:26 - so that's done Oh for
41:35 - okay where do we have before
41:42 - hang on hang in there almost close okay
41:49 - zero three somewhere where 30
41:55 - and this
41:57 - and 39
42:01 - yes okay good
42:03 - finally sorry about that I just wanted
42:07 - to try it so yeah apparently it works
42:12 - so why the test not passing
42:18 - might be something wrong with the tests
42:20 - on freakin camp
42:25 - right but you can see that it works
42:30 - what if we do here 23 yeah that works
42:36 - you
42:38 - so it doesn't like my
42:43 - way
42:47 - you
42:52 - maybe the test triangle in their case is
42:57 - different
43:07 - github freak at camp
43:16 - can I find the curriculum
43:22 - maybe we can find a curriculum and we
43:26 - can test to see changes
43:31 - English
43:37 - you
43:40 - project Euler okay and this is problem
43:45 - 18
43:53 - okay good tests
44:01 - before
44:03 - this we could have used this test
44:07 - triangle
44:09 - okay
44:10 - [Music]
44:14 - yeah look at the solution this is
44:17 - basically the solution yay we had almost
44:21 - similar solution I think okay so why is
44:26 - not working three zero zero seven four
44:29 - zero two four six eight five nine three
44:38 - kay
44:41 - we turn Maxim 0-0 that's what we're
44:46 - doing so then what's the problem
44:54 - next
44:56 - three cyclical max pad tests triangle
45:03 - yeah I don't see it oh well we spend too
45:07 - much time here
45:15 - second
45:24 - yeah so I'm not sure why it's failing
45:27 - but I would assume that
45:32 - good and we solved it can we assume that
45:37 - maybe
45:40 - because we're altering the triangle
45:46 - okay let me try something so new
45:49 - triangle will be
45:54 - that that triangle
45:58 - and we can do this
46:04 - and now we're not altering the triangle
46:10 - no there's still the same okay
46:15 - not sure what the next but
46:19 - parents should work
46:27 - all right so let's do a trick thing if
46:33 - return well not if triangle zero zero is
46:39 - three return 23 otherwise 170 for the
46:45 - yes so again it's not working why
46:59 - so that's weird
47:09 - I just wanted to fake the results okay
47:13 - so this is working
47:17 - it's not passing for that one
47:25 - you
47:31 - I don't get it
47:36 - you
47:38 - you
47:43 - can anyone see anyone see what's
47:46 - happening
47:52 - you
48:01 - type off it's a number we can see it's a
48:04 - number
48:06 - you
48:11 - you
48:15 - okay what if we try again
48:29 - no I so I really don't know why it's not
48:33 - working that bugs me
48:46 - you
49:14 - yay I kind of hacked it now so we know
49:21 - that we have two answers can I do the
49:24 - meta Tran them just to pass the test but
49:26 - I don't know feels weird this is weird
49:34 - it should work to return the result all
49:46 - right
49:48 - submit oops download download please ooh
49:51 - fine
49:53 - I got I got to download it
49:57 - oh well that was tricky
50:07 - let's take a break before the next one
50:10 - we only needed 50 minutes okay that's
50:14 - not that bad
50:20 - and getting that's tours Thank You
50:24 - Laurent and out for helping I couldn't
50:27 - have done it without you so yeah thank
50:30 - you
50:31 - alright let's see counting Sundays
50:34 - you're given the following information
50:36 - but you may prefer to do some research
50:39 - for yourself ok first January 1900 was
50:48 - Monday thirty days has September April
50:53 - June and November
50:56 - okay all the rest have thirty-one saving
51:00 - brighter day alone Earth Saturday
51:04 - February alone which has twenty-eight
51:06 - rain or shine and the leap years twenty
51:11 - nine I hate it's this fun a leap year
51:15 - occurs on any year evenly divisible by
51:18 - four but not on a century unless it is
51:22 - divisible by 400
51:25 - how many Sunday's fell on the first of
51:29 - the month during the 20th century
51:35 - january first nineteen of 1/8 to
51:39 - December
51:43 - okay
51:47 - uhh
51:50 - interesting
51:58 - we need we get first year and last year
52:05 - we need to say how many Sundays fell on
52:10 - the first of the month
52:17 - okay I have an idea
52:23 - [Music]
52:27 - it might involve well it will involve
52:31 - using the date late object let's see
52:38 - first date will be new date of let's see
52:52 - 0-1
52:55 - Oh 0 1 0 1 first year and last date
53:08 - zero one zero one last year let's see
53:14 - first date is well cancel that log is
53:23 - that good and last date is this perfect
53:29 - now what we want to do is
53:36 - well we can I think we can get get date
53:46 - get day
53:50 - yep
53:51 - okay let's see date JavaScript there is
53:55 - a function so we can see if it's Sunday
53:59 - or Monday oh I think
54:02 - beside what I just didn't know so get de
54:06 - it returns the day of the week zero to
54:08 - six for a specified date according to
54:11 - local time now is zero Sunday right
54:17 - what is it six how'd they work
54:21 - Sunday being the first day that should
54:23 - work right
54:29 - but let's be sure
54:35 - check this
54:38 - okay year month day
54:41 - all right I like this approach
54:46 - your mom day counts from month okay
54:50 - January could get and I want to see
54:58 - get methods
55:01 - get day
55:04 - weekday as a number
55:08 - first
55:14 - okay yeah so zero is Sunday perfect so
55:19 - that that's kind of easy we start
55:28 - with zero one
55:30 - and go up to 12 start with ya with
55:34 - January which is so we could also say
55:39 - the year then the month and oh well the
55:44 - day
55:46 - oh sorry one and one
55:49 - and this could be last year one and one
55:54 - all right and get day and we can see if
55:58 - it equals to zero if it is then it's
56:02 - Sunday on the first day of the month
56:04 - okay good so while that initial here
56:14 - well flat current here will be first
56:19 - year while current year less than or
56:26 - equal we go up two or
56:32 - inclusive well we'll see that's good
56:35 - inclusive now so last year we want to go
56:37 - over the years and here we're going to
56:40 - start with one we go over the month less
56:45 - than 13 well less than equals 12 5 plus
56:48 - plus and here we're going to create a
56:51 - new date new date with the current year
56:59 - the month which will be I and the day
57:03 - which should be 1
57:08 - right let's check again I want to go
57:16 - back to this and we looked at this
57:23 - and we saw something interesting we're
57:27 - here okay
57:29 - the month is zero indexed all right so
57:32 - we start with zero then
57:36 - zero and up to 12 get and I guess the
57:44 - day should
57:47 - let's check - so
57:51 - okay yeah the day I think it's yeah
57:55 - 70 okay good so now we get the date and
57:59 - here if date that get day is 0 so it's
58:05 - Sunday if it's Sunday then we increase
58:11 - some kind of account let's count the
58:14 - zero count plus plus and here we return
58:20 - the count
58:26 - okay so something's not good oh yeah I
58:32 - forgot to say current here plus plus
58:36 - perfect so we stuck with the year then
58:41 - we go over the months create a new date
58:43 - and check using the get pay check to see
58:47 - if it's a Sunday if it is we increase I
58:49 - will increase the count
58:51 - we only check for the first of the month
58:53 - and at the end we increase the current
58:56 - here we want to go up to the last year
58:59 - and then we just return the count which
59:02 - should yeah look at that
59:04 - this was fast we didn't spend fifty
59:10 - minutes to solve it which is good
59:15 - some problems are easier some problems
59:18 - are not so easy so yeah okay problem 24
59:25 - factorial digit sum and factorial means
59:29 - n times n minus 1 times that times 3
59:33 - times 2 times 1
59:34 - so all the numbers up to that number
59:36 - multiplied for example 10 factorial is
59:40 - this and the sum of the digits is that
59:44 - okay find the sum of the digits of n
59:46 - factorial
59:50 - okay so yeah this should be easy right
59:56 - first we need to find the number so we
60:00 - multiply all those I think we'll get
60:02 - we're going to get a big big big big
60:04 - number
60:07 - and then we add up the digits
60:15 - factorial will be 1/4 let is 1 I less
60:21 - than n less than equal to n I plus plus
60:26 - factorial plus equals 2 wait x equals 2
60:33 - I like that
60:34 - factorial counseled that flock will it
60:39 - be a big big big big number
60:42 - yeah that's what I was afraid
60:50 - kay
60:52 - sorry so we have the factorial we have
60:58 - the digits
61:03 - [Music]
61:06 - we did something similar before we had a
61:09 - big big number and we had to do
61:12 - something with the digits our digits
61:16 - some was it this
61:19 - yep I think what's the sum of the digits
61:23 - of the end to the exponent
61:26 - yeah and to the dead power
61:33 - okay and what we did here
61:41 - was too we used an array to keep track
61:47 - of the digits and then we added the
61:49 - digits
61:51 - can I find I think I solved I saved it
61:55 - somewhere let me check
61:59 - [Music]
62:01 - project oiler
62:05 - nope
62:08 - you
62:13 - let's
62:14 - at camp
62:16 - you
62:18 - here I think a salad somewhere
62:23 - okay problem 16
62:30 - okay yeah so there we go
62:33 - let me get this
62:37 - and when oops I deleted what we had okay
62:44 - let me paste this in so
62:50 - this is how we did
62:53 - did it
62:55 - because if not sorry if you followed but
62:58 - we had a problem where we couldn't get
63:00 - the decimal by dividing by 10 had some
63:04 - issues so then we created an array we
63:09 - went over the exponent and we did the
63:13 - multiplication
63:15 - and whenever it was
63:19 - over 10
63:23 - we added to the next array as so forth
63:27 - so at the end we basically had a big big
63:30 - array with all the digits of this number
63:35 - all right so something similar we have
63:39 - to do here but
63:45 - [Music]
63:50 - and I guess here basically here we only
63:55 - checked it's over ten so if it was then
64:00 - we added one but now we also need to
64:03 - keep track
64:06 - oh we also need to keep track to see
64:08 - because we could have something like
64:13 - wait so if we have
64:18 - let's see by factorial why what's the
64:22 - process so we have 1 times 2 times 3
64:25 - times 4 times 5 right
64:28 - so the first one we have to then have
64:31 - times 3 times 4 times 5 then we have 6
64:34 - times 4 times 5 then we have 24 times 5
64:39 - and then we have 120 now how this works
64:45 - is that we need to multiply 5 by 4 and
64:49 - then that's 20 put 0 saved 2 and then 5
64:59 - plus x 2 and we add them up that's the
65:05 - trick here
65:10 - [Music]
65:14 - not only that we need to multiply the
65:16 - digit
65:20 - by the number
65:24 - oh but I think it's the same right array
65:28 - that flanked yeah we multiplied by the
65:30 - number
65:33 - this will be our growing number instead
65:35 - of just two
65:36 - and over ten so we need to keep track
65:43 - over 10 will be by default zero
65:51 - let's try to do it here so array this
65:57 - will start with one
66:01 - we get n to be the
66:05 - [Music]
66:07 - not the exponent this time but what we
66:09 - need to go over
66:12 - we don't need this I don't need this
66:14 - anymore let's cancel that lock this okay
66:19 - so we get em and we want to go over
66:24 - let's see I will be well let's start
66:28 - with one and we go up to an inclusive
66:33 - okay over ten will be to get next we go
66:39 - over the latest length and the new value
66:42 - will be array of J okay so the current
66:46 - index get x this will be x pi and plus
66:52 - over ten
66:58 - this is values but our and array of I
67:03 - will be new value get is it
67:09 - okay if new value is bigger than nine
67:12 - then array of J will be dead and over
67:17 - ten will be met that floor array of J
67:21 - divided by ten so if we have something
67:26 - like 7 x 8 or let's make five times late
67:30 - because it's easier 5 times 8 is 40 here
67:35 - we're going to do 5 times 8 it's 40 we
67:39 - don't have anything so it will remain 40
67:41 - array of j will be 40 but it's bigger
67:45 - than 9 so what we're going to do is to
67:48 - get the 0 and then over 10 will be medic
67:55 - floor divided so 40 divided by 10 which
67:58 - is 4 right and this will be 0 by default
68:02 - so if over 10 we push over Ted at the
68:08 - end
68:11 - and I think this would work I know
68:15 - should it let's see we don't have that
68:19 - zero yeah that's a start
68:22 - [Laughter]
68:27 - reduce
68:31 - to having the ra0 good good good good
68:37 - good good good good good
68:41 - or a that went is one you're a Raj times
68:45 - I plus zero your value should work but
68:52 - not
68:55 - if
68:59 - ten push Oh
69:01 - I know why oh let's see cancel that vlog
69:06 - i okay it goes over everything
69:11 - let's see J here zero zero zero zero
69:16 - zero zero zero
69:17 - that's not good why is that
69:29 - council that plug new value
69:34 - one two six 24 2000 zero zero zero
69:49 - you
69:58 - okay and cause of that flogged array
70:04 - one two six twenty four okay so
70:09 - something happens
70:16 - [Music]
70:19 - so when we have 24 the new value array
70:25 - that J will be 4 over 10 will be that
70:29 - number but we don't
70:36 - let's see over 10 over 10 over 10 this
70:42 - is the new value new
70:45 - okay so the new value is 1 over 10 to 0
70:49 - get over 1008 n is 0 get 24 over 10 is 0
70:55 - no no no no no oh I see so we're
71:01 - dividing the array that J to 10 again so
71:05 - now we want to get a new value divided
71:08 - by 10 so now we get yeah 4 + 2 4 NT
71:14 - perfect let's see move the console logs
71:18 - and see what we get
71:22 - ray zero zero zero zero okay this looks
71:27 - interesting
71:28 - whoa look at this
71:34 - to get
71:37 - what's this
71:43 - so I guess the reduce now it doesn't
71:45 - work okay so something somewhere
71:58 - then that is off
72:11 - let's see we're checking the array again
72:16 - all right so here what's happening
72:25 - Oh
72:30 - we're pushing over ten
72:36 - I see so we're having big big numbers
72:43 - and well big two-digit numbers
72:49 - I is not on it won't be one digit
72:52 - anymore it will be two digits and we're
72:56 - multiplying the two digits with every
73:01 - digit which is okay right so first it
73:07 - will be I times 1 times 2 times 3 times
73:10 - 4 times 5 and so on and then we have
73:13 - times 10 times 11 so then it might get
73:18 - more than
73:20 - ah
73:24 - one digit and that's not good how we
73:31 - solve this
73:35 - here you can see so one two three four
73:38 - five six seven eight nine ten
73:44 - 11 12 13 14 15
73:50 - you
73:54 - it's here probably
74:01 - you
74:06 - at least is the met right
74:10 - what I want to do is to see the array
74:13 - and also I want to see the sum now I
74:17 - want to array that reverse and that join
74:25 - I just want to see the numbers so 1 2 6
74:31 - 24
74:34 - three times four times five nope nope
74:40 - nope not good why is that
74:48 - you
74:52 - Oh 18 reverses altering the array
74:59 - now
75:01 - bigint yeah probably probably that will
75:06 - be our
75:09 - a radar traversed like this
75:14 - all right yeah so it was altering the
75:17 - [Music]
75:18 - the array okay so five then 120 times
75:23 - six okay times 7 49 10 data yeah that
75:30 - looks good times 8 is 40 times 9 or
75:34 - times Anya times 10 times 11 so it looks
75:40 - like let's see this times 11
75:48 - okay times 12
75:53 - okay times 13
75:58 - times 14 so it looks okay but why why
76:03 - did looks better so we are here let's
76:11 - see if we get this times 15
76:16 - 1:03 seven
76:20 - why we get 13 here quite two-digit
76:25 - you
76:32 - [Music]
76:34 - sixteen
76:36 - okay so the mat is still working
76:44 - is it so
76:46 - one eight nine eight eight eight zero
76:47 - zero yeah seventeen
76:56 - this number times 17 okay so we can see
77:03 - okay sweet works why do we get these
77:05 - digits here
77:10 - something I don't understand
77:20 - although the net is right maybe too many
77:22 - carryovers yeah but why
77:26 - [Laughter]
77:30 - okay one approach
77:37 - so if over ten we push over ten if you
77:43 - wouldn't well we would have this
77:46 - okay so then over ten
77:50 - this needs to be fixed if over ten while
77:55 - over 10 is bigger than 9
77:58 - I want to raid that push man that floor
78:03 - but no I want to push over 10 modulus 10
78:13 - oh and ng sorry I can't see angle wit
78:21 - welcome to being a sponsor supporter on
78:26 - freaking camp thank you on their behalf
78:28 - carryover should be divided by ten
78:31 - modules ten as well
78:32 - yeah over ten is 13 it is what I want to
78:36 - do over ten then becomes method for over
78:40 - ten divided by ten
78:45 - ah right
78:51 - so while that
78:55 - if over 10 is different than zero we do
79:01 - that
79:05 - broken so a well over ten greater than
79:11 - nine array that push
79:15 - the digit
79:18 - then over 10 becomes mad at floor over
79:21 - 10/10 so becomes the next digit
79:27 - but it might
79:31 - yeah I think we need another check here
79:37 - if over 10 well it will be different
79:41 - than zero now
79:43 - we want to push it again radar push over
79:47 - time okay
79:49 - yeah
79:52 - the issue was that we did the division
79:54 - but then if the digit was different than
79:56 - say well if it was something then we had
80:00 - to push it again okay
80:05 - good
80:11 - good look at that
80:13 - so now it works we only had to add this
80:16 - thing well to basically split the list
80:23 - but all right now it should work
80:30 - hey it was good that we had the solution
80:35 - so let me let me get this oceans I don't
80:40 - want to waste them anymore alright
80:44 - what's the time okay let's let's try to
80:48 - do one more at least how many we did
80:51 - like three right
80:55 - oh boy they're getting harder and harder
81:02 - Emme cable
81:05 - numbers
81:08 - that's right let deal van be defined as
81:13 - the sum of proper divisors of n numbers
81:16 - less than n which divide evenly into n
81:18 - if d of a equals B and D of B equals a
81:22 - were a different a B and a and B are an
81:26 - amicable pair and each of a and B are
81:29 - called amicable numbers
81:32 - okay for example the proper divisors of
81:37 - 220 r12 for data therefore D of 220
81:47 - is to 84
81:52 - so yeah they're the some of the
81:55 - divisions the divisor sorry is 284 the
82:02 - proper divisors of 284 are 1 2 4 & 1 1
82:07 - 471 and 142 so that's that evaluate the
82:13 - sum of all the amicable numbers under
82:16 - end
82:20 - okay now this is interesting
82:30 - first we can I need to get the TV source
82:43 - and then we need to add them up and then
82:46 - check
82:49 - some of the mmm eatable number is that
82:58 - number so we need to get D of n well D
83:04 - of X which will be a number Y and then
83:07 - we need to check if do y equals to X
83:10 - well they use the MB and if they are
83:15 - we're going to add them to an array and
83:22 - then we need to add find the sum of all
83:24 - those
83:28 - okay
83:30 - I feel like there are a lot of
83:36 - numbers here
83:47 - I'm thinking
83:50 - can we speed this up okay I guess we
83:56 - need to go over all the numbers right so
83:59 - find somewhere under n okay so we start
84:03 - with one is one amicable number D of 1
84:09 - is 1 deal
84:11 - maybe
84:14 - oh no because a and B are should be
84:17 - different okay so one is not what about
84:21 - two to week 2 now 3
84:26 - as one in three is for forests
84:31 - let's see so the visitors of three are
84:34 - one and three which is four divisions of
84:38 - four are
84:41 - one and two which is three so these are
84:45 - friends friendly numbers
84:48 - okay what about two has one until which
84:54 - is - which well - has one and two this
85:00 - is an infinite loop but then a MB must
85:05 - be different so we start with three okay
85:07 - get up and I plus plus
85:13 - [Music]
85:18 - let's see we need a function to check if
85:23 - is Fred boy I can't pronounce this name
85:27 - sorry I just call it friendly if it's
85:29 - friendly let me note friendly equals
85:36 - amicable but sorry can't pronounce it
85:47 - just so we have a note
85:50 - good so if it's friendly I then we want
85:55 - to have here comes friendly numbers will
86:00 - be an array if it's friendly than
86:02 - friendly numbers will push I a simple as
86:08 - that now
86:12 - how do we find if it's a friendly he is
86:15 - friendly I first find all the divisors
86:23 - so let the visors for let I Sardis let's
86:29 - let's make this end I is 1 I less than
86:36 - equals 2 + / - right
86:39 - goes up to the number well up to the
86:43 - half of the number I plus plus if and
86:50 - modulus I is 0 then the Wizards at cush
86:55 - I right so now we should have all the
86:59 - divisors
87:02 - giggity I think up to dirt
87:06 - oh so many spaces and all that so we
87:12 - start with that with increase with one
87:14 - we check if it's feasible okay if it is
87:16 - we push there now we need the some some
87:20 - of the deserts will going to use reduce
87:24 - accumulator item number and accumulator
87:30 - plus number start with zero
87:32 - we get the sum
87:37 - get
87:41 - get the sum of the divisors and now
87:52 - [Music]
87:55 - we kind of need to check if this is
87:57 - friendly
88:04 - you
88:07 - well I guess now we need
88:09 - today's numbers the resource add them up
88:13 - and see if equals to this
88:17 - okay let's make another function some of
88:26 - the VCRs of that and this function will
88:31 - do this
88:35 - return this okay
88:47 - good so find all the divisors
88:53 - them up and now here some
88:59 - that's the cast a will be some of sorry
89:03 - yeah some of dave event right
89:08 - and cost P let's see so we have the sum
89:14 - of divisions this will be okay I think I
89:18 - got got a bit messed up here so we have
89:22 - the divisors of the first number and the
89:25 - sum of them and now we need to see
89:29 - if some of the visions of a
89:37 - is be there a equals B is that friendly
89:44 - number not defined where
89:47 - friendly numbers
89:52 - infinite loop why
89:55 - where
90:01 - so let's think again
90:06 - a will be be so this will be a okay
90:09 - let's do it like this B will be dev of a
90:13 - and
90:16 - a will be leave be
90:20 - yeah and now but we're kind of resetting
90:25 - this
90:30 - believe is ours will be some divisions
90:34 - will be and we need to check if
90:39 - you know what let's do it like they have
90:41 - a number here be will be this a will be
90:46 - depth and we need to check if a2 equals
90:48 - to B all right let's see console that
90:51 - plug a and B here's right
91:01 - I also want to see em which is the
91:03 - number so three has
91:11 - let me select this
91:14 - some of the divisors of 3 is 1 and
91:19 - they're the number now it doesn't count
91:23 - okay so the number itself won't count so
91:27 - we have 1 and then some of the visitors
91:30 - of 1
91:34 - well it's here oh I guess
91:37 - yet
91:39 - we have four four has one and two which
91:42 - is three three has one okay five has
91:52 - one and one and one has zero good six
91:57 - has one and two and three which is six
92:07 - things off I feel like I'm missing
92:09 - something
92:11 - which is six but we've done
92:17 - and then yeah ace
92:22 - B we can earn it here we messed up with
92:25 - the naming conventions because here we
92:28 - don't need check if AIDS well they
92:31 - should be different than B
92:36 - Cave
92:39 - let's slow down so we have this number
92:45 - right which is and we want to get some
92:49 - of its division the deserts and the
92:53 - visors okay
92:56 - well be some of that get now this yeah
93:01 - will be 294 which will be B
93:07 - says here right D of a well the of the
93:10 - number will be and then
93:15 - we need to get a divisions of this one
93:17 - and should be a
93:21 - goes into a and if these are equal
93:24 - that's good although
93:29 - a and B should be different so an and B
93:41 - okay let's go to 220 let's see what we
93:45 - get there
93:48 - 220 is 284 and 284 is 220
93:58 - so no
94:01 - not a is P we need to check if a is
94:04 - different than B
94:07 - and an is equal to a
94:13 - let's go now back
94:20 - so this is n this is B and this is a
94:23 - these two numbers should not be the same
94:28 - but and should equal to a
94:34 - to 84 we should see the same thing
94:36 - happening yeah
94:38 - and be is it different than a but then n
94:43 - should be equal to 2ei okay good so this
94:48 - is good and this returns true or false
94:51 - if it's friendly we push and let's see
94:55 - friendly numbers
95:02 - line four
95:06 - now it shouldn't mean infinite look
95:08 - constant that vlog
95:13 - we get these numbers
95:16 - we need to add them up
95:19 - oops something's wrong
95:27 - for a thousand
95:30 - we get it right
95:38 - accumulator number cumulated pass number
95:41 - zero so we get it right 4,000
95:48 - you get to try for 2,000
95:53 - or 5,000 we don't whoops
95:57 - and neither for 10,000
96:05 - maybe it's something with the let let's
96:07 - just run and see
96:10 - okay so apparently it works maybe this
96:12 - console.log is broken yeah although this
96:17 - is the brute-force approach and one
96:22 - thing we could save would be here
96:29 - well when we get the friendly number we
96:32 - kind of know it's partner right so we
96:36 - could stored both of them so then for
96:38 - example when we had 220 and 284 we
96:44 - already knew that 220 by checking here
96:47 - he is a friendly number we could also
96:50 - added 284 so then when we get to 284 we
96:54 - don't do the calculation again but it
96:59 - works so it's good what every developer
97:03 - says I guess
97:08 - okay let's save this and then for today
97:15 - I don't think we have time for another
97:18 - one let's look over it and
97:22 - [Music]
97:25 - see what is it the part using names and
97:29 - already defined in the background
97:30 - containing over five tiles and first
97:32 - names big begin by sorting it into
97:36 - alphabetical order then working out of
97:38 - the political value for each name
97:41 - multiply these vela bytes of a
97:42 - particular position in the list obtain a
97:44 - name score for example when the list is
97:47 - sorted alphabetically order calling
97:49 - which is worth three plus okay
97:53 - he's the 303 938 name in the list so
98:00 - calling will obtain a score of this
98:03 - what's the total of all the name scores
98:07 - in the array
98:11 - okay this shouldn't be that hard so
98:18 - let's do it basically we need to get
98:23 - well let's see using names an array demo
98:27 - okay
98:28 - begin by sorting it so first to sort it
98:34 - so I write at sort
98:43 - okay so first we sort it a is only test
98:47 - this this is only a test then
98:54 - to convert the strings into the sum of
98:58 - the characters
99:01 - so function some of characters will get
99:09 - a string and here
99:14 - cuz some is 0 for let I 0 I less than
99:19 - swing that length I plus plus and what
99:23 - we want here you want to use the SG
99:26 - table and we want to convert capital C
99:32 - to 3 so we need to
99:35 - Capital c67 we need to well subtract 64
99:41 - right yeah so a minus 64 is 165 - is for
99:46 - you one yeah so 64 is our number we want
99:51 - to get the character value so
99:57 - string.fromcharcode string of I minus 64
100:03 - this will be added to the sum and we'll
100:07 - return the sum yet now this will add to
100:10 - some of the characters if we go over
100:13 - this and your sum of characters we
100:17 - should
100:20 - oops this would be let not the number
100:24 - not now perfect that's what we want
100:29 - what's happening here spring from
100:32 - charcoal
100:36 - oops sorry now this is the wrong
100:38 - function we need to do chart code that I
100:46 - good so he now becomes well let me where
100:52 - is it yes console dot log array so we
100:57 - have a is 1 is 28 and so on and so forth
101:01 - and while we do the map sum of
101:05 - characters and then we want to another
101:07 - map to multiply with index so number and
101:13 - index this will be number times index
101:17 - plus 1 right for example when this is
101:22 - sorted calling is word like that is the
101:26 - 1938 in done list so we get the index
101:30 - times the score and we get a number yet
101:33 - so we map over we get a number we get
101:38 - the index then we multiply the number
101:39 - with index
101:41 - all right good and at the end we need to
101:45 - add up this thingy so we can use the
101:49 - reduce again we get a number we go sorry
101:55 - we get accumulator the number and we add
101:57 - it to the accumulator stop picture and
102:03 - look at that then
102:08 - it worked I was afraid but it worked
102:12 - well you're always afraid with these
102:14 - kind of challenges
102:17 - good so with a bit of help from the Rae
102:22 - methods using the chair to that then
102:26 - doing some conversions we are done and
102:31 - we did another one let's submit this
102:37 - and we're going to have this one be the
102:41 - next one for probably next week I hope
102:45 - you enjoy this I'm sorry at the
102:48 - beginning it was harder we well we buy
102:52 - we I mean I I kind of messed it up but
102:56 - indeed it was farther I think it was the
102:59 - hardest problem we had so far this one
103:04 - thanks to Laurent for helping and also
103:11 - thanks to doc for helping we solved it
103:20 - okay
103:23 - Lauren said that they think using the
103:26 - date function is a bit cheating for for
103:30 - one of the problems oh wow but
103:35 - you
103:37 - thank your for watching I hope you
103:39 - enjoyed it if you did give it a like and
103:41 - subscribe to the flicker camp YouTube
103:44 - channel if you haven't already thank you
103:47 - for watching and I wish I wish which a
103:51 - good day bye