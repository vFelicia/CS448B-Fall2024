00:00 - hey this is andrew brown your cloud
00:02 - instructor at exam pro bringing you
00:03 - another complete study course and this
00:05 - time it's the hashicorp terraform
00:07 - associate certification made available
00:09 - to you here on freecodecamp so this
00:11 - course is designed to help you pass and
00:13 - achieve hashicorp issued certification
00:15 - and the way we're going to do that is by
00:16 - going through lectures follow alongs
00:18 - cheat sheets and even a practice exam so
00:20 - you can prove on your resume and
00:22 - linkedin you got that terraform
00:23 - knowledge so you can go get that devops
00:25 - job or get that promotion you've been
00:27 - looking for to tell you a bit about me
00:28 - i'm previously the cto of multiple
00:30 - edtech companies 15 years industry
00:32 - experience five years specializing cloud
00:34 - i'm it was community hero i published
00:36 - multiple free cloud courses and if you
00:38 - ever want to buy me a drink coconut
00:39 - water is what i drink uh if you i just
00:42 - want to take a moment here to thank
00:43 - viewers like you because it's you that
00:45 - make these free courses possible if you
00:47 - want to know how you can support more
00:49 - free courses like this the best ways to
00:51 - buy our additional study materials at
00:53 - exam pro dot co forward slash terraform
00:55 - for this particular course so this is
00:57 - where you'll get study notes flash cards
00:59 - quizlets downloadable lectures
01:00 - downloadable cheat sheets practice exams
01:02 - ask questions get learning support and
01:05 - so if you want to access the free
01:06 - practice exam cheat sheets you do have
01:08 - to sign up but there is no credit card
01:10 - required there's no trial limit and
01:11 - you're not going to get spammed okay if
01:13 - there are course updates they are going
01:15 - to appear within a link within the
01:17 - youtube and also on the exam pro
01:18 - platform and just make sure that you
01:21 - have access to these corrections
01:22 - additions modifications uh before you
01:25 - start this course so you're making sure
01:26 - you are consuming the latest version so
01:28 - that you have the best chance of passing
01:30 - if you want to keep up to date on uh new
01:32 - courses that i'm working on the best
01:34 - places to follow me on twitter at andrew
01:37 - brown and i'd love to hear if you passed
01:39 - your exam what courses you'd like to see
01:41 - next and there you go so let's go jump
01:43 - into the course now
01:44 - [Music]
01:48 - hey this is andrew brown from exam pro
01:50 - and we're at the start of our journey
01:51 - asking the most important questions
01:53 - first which is what is the terraform
01:55 - associate so the hashicorp terraform
01:56 - associate is a specialty certification
01:59 - in terraform and it is an infrastructure
02:01 - as a code tool that is both declarative
02:03 - and cloud agnostic so you might be
02:05 - considering getting the certification if
02:07 - you are seeking a devops engineer role
02:10 - if you enjoy automating infrastructure
02:12 - or writing scripts if you have knowledge
02:14 - uh working with multiple cloud service
02:16 - providers like aws gcp azure or you
02:18 - enjoy designing and entering on
02:21 - end-to-end infrastructure life cycles so
02:23 - terraform is the third most uh
02:26 - cloud skill that is in demand for devops
02:28 - roles so it goes aws azure terraform and
02:31 - kubernetes so terraform is the industry
02:34 - standard for infrastructure as a code i
02:36 - know aws really likes cloud formation
02:38 - but you know when you're using more than
02:40 - one provider and most companies are
02:41 - they're going to be turning to terraform
02:44 - this is not a difficult exam however
02:46 - grasping terraform requires a bit of
02:48 - patience since uh it requires a bit of
02:50 - uh silic uh circular learning to fully
02:54 - understand certain concepts so when i
02:56 - say that it's like you'll go over
02:57 - something you'll kind of get it then
02:59 - you'll go put it into practice and
03:01 - you'll come back to the original lecture
03:02 - content and then it will all make sense
03:04 - so you just have to kind of work through
03:06 - it with having partial information it's
03:08 - kind of like doing math back in the day
03:09 - for high school so terraform is easy to
03:11 - learn but it definitely is hard to
03:13 - master so
03:15 - just because you pass this terraform
03:16 - associate doesn't mean you're an expert
03:17 - in it but definitely means that you're
03:19 - gonna have the skills to meet the job
03:21 - requirements for junior devops roles or
03:24 - you know if you're upskilling okay so
03:27 - there are multiple ways that we can look
03:29 - at this i call it the multi-cloud
03:31 - roadmap because everything that
03:32 - hashicorp does is all about uh
03:34 - multi-cloud workloads and a prerequisite
03:37 - of doing this kind of stuff is actually
03:39 - having base knowledge in uh different
03:41 - providers so if we're looking at
03:43 - certifications you have the google cloud
03:45 - engineer you could have any any sort of
03:48 - um aws certification could be the
03:50 - solutions architect could be the
03:52 - developer
03:53 - but generally the sysops is probably the
03:54 - most aligned and then you have your
03:56 - azure administrator or maybe your
03:59 - azure
04:01 - developer the az204 and then there's
04:03 - also kubernetes because kubernetes
04:05 - workloads can come in there so that's
04:07 - the ckad
04:08 - so very common is you'll pick up one or
04:10 - two certs in your associate tier for one
04:13 - of the csps and then you're going to
04:14 - move on to your terraform associate
04:16 - certification uh hashicorp
04:19 - while i'm making this video does not
04:20 - have that many certifications beyond the
04:22 - associate track as you can see they only
04:24 - have a single professional up here and
04:26 - it's for vault would they make a
04:28 - terraform professional i don't know um
04:30 - but you know that'd be interesting to
04:31 - see if you wanted to know where to go
04:33 - after your associate i would probably go
04:36 - over to console because that is uh like
04:38 - cloud networking or multi-cloud
04:41 - networking that is agnostic and then
04:43 - maybe you might want to go over to
04:44 - vaults
04:45 - if you are
04:47 - uh interested to go the vault route and
04:49 - again this is outside of the terraform
04:51 - roadmap but you could just take one of
04:52 - those associates and move to vaults and
04:54 - then go to the take the professional if
04:56 - you're doing the kubernetes track then
04:58 - you you would probably want to go over
04:59 - to console there but really we're
05:01 - focused on here is this over here okay
05:03 - so how long does it take to pass uh this
05:06 - exam so here i have kind of a scale here
05:09 - we're going to look at beginner and then
05:10 - experience so i i describe a beginner as
05:13 - someone who's never written
05:14 - infrastructure as a code uh has not
05:16 - previously focused on automating
05:18 - infrastructure and doesn't hold an
05:19 - associate level certification if this is
05:21 - you you're looking at a 30 hour study
05:23 - time you really should go obtain
05:25 - a
05:26 - cloud service provider associate before
05:28 - you take this exam you don't have to but
05:31 - it's generally recommended for the
05:33 - experienced person
05:34 - this is someone who is written
05:35 - infrastructure's code maybe it's been
05:37 - cloud formation maybe it's been armed
05:38 - templates but maybe it's just not
05:39 - terraform
05:40 - they are already working in a devops
05:42 - role automating infrastructure writing
05:44 - scripts and they hold an associate level
05:46 - they probably have professionals too so
05:47 - they're looking at 12 hours study time
05:49 - okay so there's a large window of time
05:52 - but my recommendation is that you spread
05:54 - it out across 14 days study one to two
05:56 - hours obviously it's going to vary based
05:58 - on uh what you're doing here but that
06:00 - will pretty much get you there okay
06:02 - what does it take to pass this example
06:04 - you're going to have to watch the
06:05 - lecture
06:06 - materials and memorize key information
06:09 - you absolutely need to do hands-on labs
06:11 - it's really going to cement your
06:13 - knowledge here when i made this course i
06:15 - did all the lecture content first and
06:17 - then when i did my follow alongs i just
06:18 - had so many misconceptions
06:20 - because the um
06:22 - the actual documentation did not exactly
06:25 - match what was in practice so it's very
06:27 - important that you do that and i would
06:28 - strongly recommend some practice exams
06:31 - and the great thing is i have practice
06:32 - exams for you on our platform and not
06:35 - only that i have a full free practice
06:37 - exam for for you with 57 questions like
06:40 - that's a full set just like the real
06:42 - exam so i strongly recommend that you go
06:44 - redeem it uh you could probably pass
06:46 - just with the free one but you know if
06:48 - you want to help support the platform
06:50 - then go pay to unlock all the rest of
06:52 - the study material content okay
06:54 - um in terms of the content outline there
06:56 - is a lot of domains here so we have
06:58 - understand infrastructures of code
07:00 - understand terraform purpose under stand
07:02 - terraform basics use terraform cli
07:05 - interact with terraform modules navigate
07:07 - the terraform workflow
07:09 - implement uh and maintain terraform
07:11 - state regenerate modify configuration
07:14 - understand terraform cloud enterprise
07:16 - capabilities and the interesting thing
07:18 - is that they don't give a a distribution
07:20 - in terms of the weighting so it's my
07:22 - assumption that um and when we look at
07:24 - the exam guide outline you'll see that
07:26 - they'll have sub domains under each one
07:28 - so i would imagine that if you know if
07:29 - there's like five questions under or
07:31 - five sub domains under 1.0 then that
07:34 - kind of tells you the waiting for that
07:36 - section uh but we'll talk about that
07:38 - when we get the exam guide because
07:39 - there's some interesting stuff there
07:40 - okay where do you take the exam well you
07:42 - can take an in-person test center or
07:44 - online from the convenience of your own
07:45 - home
07:46 - and it's only with one
07:48 - test center and this is with psi
07:51 - when i say test center i mean like uh
07:52 - they're a network of test centers around
07:54 - the world and this is a project
07:56 - experience so there is a supervisor
07:58 - who monitors students during the
08:00 - examination so uh you know to make sure
08:02 - that it's legit okay in terms of grading
08:05 - you have to get a 70 percent to pass
08:07 - around that just like every other
08:10 - exam out there it probably uses scaled
08:12 - scoring so it's not always exact if you
08:14 - get exactly on the dot seven percent
08:15 - doesn't necessarily mean you pass so
08:16 - make sure you aim for 75 percent for
08:19 - your exam okay
08:21 - there are 57 questions that affords
08:23 - about 17 questions that you can get
08:25 - wrong there's no penalty for wrong
08:27 - questions so absolutely make sure that
08:28 - you always take a guess the format of
08:30 - the questions are multiple choice
08:31 - multiple answer and this last one's
08:33 - interesting but there's fill in the
08:34 - blank and this is where you type a
08:36 - single word answer so they might ask you
08:38 - like what is the name of the terraform
08:40 - save file and you just write in
08:42 - terraform.tf state
08:44 - so you know it could be as simple as
08:46 - that the duration of the exam is one
08:47 - hour but that is plenty of time you get
08:50 - one minute per question a little bit
08:52 - more than just a minute so your exam
08:54 - time is 60 minutes but your seat times
08:56 - 90 minutes see time is meaning that you
08:58 - show up
08:59 - 30 minutes early and you make sure
09:00 - you're ready so you can review the
09:02 - instructions
09:03 - if you have to work with your online
09:05 - proctor to make sure your workspace is
09:06 - secure accept and read the nda
09:09 - complete the exam provide feedback of
09:11 - the exam so make sure you get paid for
09:13 - that time
09:14 - this exam is valid for 24 months so that
09:16 - means two years before recertification
09:19 - one little thing i want to note here is
09:22 - about terraform version considerations
09:24 - when i designed this course it was
09:26 - designed around the 1.0 specification of
09:28 - terraform so terraform is always
09:31 - incrementing inversion so for your
09:33 - studies you may always need to look at
09:35 - the feature set of versions that go back
09:37 - three minor versions from the current
09:39 - stable version so if it's 1.0 like uh
09:43 - which the exams at least when i sat it
09:45 - wasn't even at 1.0 it's probably like
09:47 - point 15 or 0.14
09:49 - but my point is that i designed this
09:51 - kind of be like a bit future proof so
09:52 - it's this course is not going to go
09:54 - stale for a couple years but i do want
09:56 - you to tell you that like you know if
09:58 - the exam is based around let's say like
10:01 - the terraform version that's out is one
10:02 - point uh you know six uh that doesn't
10:06 - like the exam is always a bit behind it
10:08 - so you know the exam might be 1.0 and
10:11 - then that means that the content exam
10:13 - would cover these three things okay so
10:15 - throughout this course i will cover
10:17 - older stuff but i'll also cover newer
10:19 - stuff and i'll give more emphasis on and
10:20 - you'll see me do that throughout the
10:21 - course okay so for terraform
10:23 - certification is heavily dependent on
10:25 - practical knowledge so as as long as you
10:27 - take the time to apply the knowledge uh
10:29 - you'll have a good chance of passing
10:31 - regardless of the differences in
10:32 - versioning and
10:34 - uh more than half of this course is
10:36 - hands-on okay so the bulk of it is
10:38 - hands-on um you could pass just doing
10:41 - lecture content so like when i sat the
10:42 - exam
10:43 - i had done a i like like a very simple
10:46 - walkthrough and then i made all my
10:48 - lecture content and i was able to pass
10:50 - no problem uh but again i have a
10:52 - background in devops and i understand
10:54 - how this stuff works so it was easy for
10:56 - me to translate that if you are new or
10:58 - you're not confident you should really
11:00 - do all those practice exams so there you
11:02 - go and let's take a look at the actual
11:04 - exam guide okay
11:05 - [Music]
11:09 - hey this is andrew brown from exam pro
11:11 - and we are on the hashicorp
11:12 - certification website looking at
11:14 - terraform associate and we're going to
11:16 - take a look here at the exam guide
11:18 - because i have some commentary that i
11:19 - want to share with you about it
11:21 - and what i found really interesting with
11:23 - the way they design their courses is
11:25 - that everything that you see pretty much
11:27 - shows up on the exam so there is 57
11:30 - questions on the exam and but down below
11:32 - here there is just shy of 57
11:35 - subdomains and so the great thing here
11:38 - is that pretty much
11:39 - every single question will map to one of
11:41 - these
11:42 - and you're not going to be worried about
11:44 - having to figure out things outside of
11:46 - this pool so that really is going to
11:48 - narrow
11:49 - what you need to study for uh it creates
11:52 - a lot of less
11:53 - like confusion or guesswork or over
11:54 - study and i really appreciate that and i
11:57 - did not until i actually
11:59 - finished like i got certified and made
12:01 - the lectures in the labs and my practice
12:03 - exams and i realized wow that makes it a
12:06 - lot easier from a study perspective but
12:08 - when i came into this i thought the exam
12:10 - was going to be something like aws where
12:12 - what they do is they have all these
12:13 - domains and subdomains and subtopics and
12:17 - then besides that then they also have
12:19 - like appendix and then the service and
12:21 - features list and so basically
12:24 - more than half like half of more than
12:26 - half of the stuff that they say here you
12:27 - might not even experience an exam and
12:29 - that's really frustrating because you're
12:30 - really over studying here
12:33 - and i really like hashicorp's approach
12:34 - here so if you really do want to know
12:37 - what you know just go down the list here
12:38 - and say do i know what all of these
12:40 - things are and if you can checkbox those
12:42 - off you're very likely to pass okay
12:45 - um
12:46 - i do want to say that this is uh dated
12:48 - even like right now as we talk because
12:50 - this is not based off of terraform 1.0
12:52 - this exam guide outline and we can tell
12:55 - because we see terraform taint if you
12:56 - look up terraform taint
12:58 - this is a deprecated command
13:00 - um so it has been replaced with
13:02 - terraform apply
13:04 - with the hyphen replace but do not worry
13:06 - i've taken care of all of that for you
13:08 - in the exam so you do not have to worry
13:10 - about any kind of confusion we are going
13:12 - to cover things outside of just this
13:14 - exam guide outline because after talking
13:16 - to da's
13:17 - their technical writers product
13:19 - marketers i feel that there's going to
13:21 - be additional content coming in the
13:23 - update like terraform cloud because i
13:25 - feel like that needs a lot more
13:27 - attention here and so i was i was sure
13:29 - to pack this course with a lot of extra
13:30 - stuff so that the lifespan of this
13:32 - course is gonna be a lot longer than
13:34 - what is being shown here okay
13:36 - so
13:37 - yeah uh hopefully that gives you kind of
13:38 - an idea and some confidence going into
13:40 - this exam uh but let's jump into the
13:42 - real content okay
13:48 - hey this is andrew brown from exam pro
13:50 - and what i want to do is walk you
13:51 - through a few of our practice exam
13:53 - questions just to give you an idea of
13:55 - what it will be like on the real exam
13:57 - and where we might have had to make some
13:58 - adjustments to help your study so what
14:00 - you'd have to do to access this practice
14:02 - exam is you'd have to be signed up and
14:04 - logged in to the exam pro platform make
14:07 - your way over to the hashicorp terraform
14:10 - course accept the free tier or pay for
14:12 - full access but once you go there you'll
14:14 - scroll all the way down to the bottom
14:16 - and you should see three or four
14:18 - practice exams at the time of writing
14:19 - this we're still writing the questions
14:20 - so that's why they're not shown in the
14:22 - video here but what i want you to do is
14:23 - to go to the first practice exam and
14:25 - notice that there are 57 questions you
14:27 - get an hour
14:29 - on on the exam here and we have a
14:31 - breakdown based on domain now the
14:32 - percentage is not something that uh
14:34 - terraform or hashicorp provides so we
14:37 - just had to break it down based on the
14:38 - coverage of questions that we saw in the
14:41 - exam guide outline and so that should be
14:43 - accurate enough and that's kind of what
14:44 - it felt like on the exam so i don't
14:46 - think that's going to be a problem if we
14:48 - click into here we're just going to look
14:49 - at some of the questions i'll talk
14:50 - around them so the first one here is we
14:52 - have how do you create a workspace and
14:54 - it's showing us a bunch of cli commands
14:56 - and so on the exam you do need to know
14:58 - um uh you know cli commands and the
15:00 - difference of them and the questions can
15:02 - be as simple as this where you're just
15:04 - choosing the option and some are obvious
15:06 - distractors like there isn't there is no
15:08 - one called terraform workspace branch
15:10 - okay so just understand that you not
15:12 - just need to know the conceptual ideas
15:14 - behind terraform but also it in practice
15:17 - okay
15:18 - another one here would be the terraform
15:20 - registry can search based on the
15:21 - following search terms we have an option
15:23 - to choose multiple uh questions and so
15:25 - this is something that you will see on
15:26 - the exam where you're choosing multiples
15:28 - of something i didn't get a lot on my
15:30 - exam but i cannot say for certain like
15:32 - how many questions would show up like
15:34 - this um but you know they're not really
15:36 - that hard to figure out okay and this
15:39 - question is about um a tool or sorry uh
15:42 - the
15:42 - public terraform registry website and
15:45 - that is just a
15:46 - uh
15:47 - a public-facing website if we go to
15:49 - registry.terraform.io here it's this
15:51 - website here so it's not just the
15:53 - tooling of terraform itself but it's the
15:55 - ecosystem around it's a terraform cloud
15:57 - the terraform registry things like that
16:00 - another type of question you will see
16:01 - and i think it's over here is what they
16:04 - will do is they'll ask you to fill in
16:05 - the blank now we don't have that support
16:07 - in our platform just as of yet but the
16:09 - idea is they'll say like okay uh we'll
16:11 - ask you a question or we'll even give
16:13 - you um maybe they'll have like
16:15 - underscores and they'll say fill in this
16:17 - thing and you'll literally have to type
16:18 - the answer in but the answer is gonna be
16:20 - like a word answer so
16:22 - on the exam i literally had a question
16:24 - which was like where is the api stored
16:26 - and it was actually terraformed at tf
16:27 - state but i did not know i could not
16:29 - recall the name of it which is kind of
16:31 - embarrassing but uh you know that is the
16:33 - level of fill-ins that you'll have to do
16:36 - and you're very likely to see some code
16:38 - on the on the clut exam too so if i just
16:40 - click through here really quickly you
16:42 - may see a code block okay and you might
16:45 - have to decipher it so that's the
16:47 - difficulty of the exam i would not say
16:49 - this is a hard exam but you just have to
16:51 - understand the scope of those kind of
16:52 - questions and make sure that you have
16:54 - well-rounded study in both practical and
16:57 - conceptual concepts of terraform so
16:59 - hopefully that helps you out okay
17:04 - [Music]
17:05 - hey this is andrew brown from exam pro
17:07 - and we are looking at what is
17:08 - infrastructure is code and before we
17:10 - talk about that we need to talk about
17:11 - the problem with manual configuration so
17:14 - manually configuring your cloud
17:15 - infrastructure allows you to easily
17:17 - start using new cloud service offerings
17:19 - to quickly prototype architectures
17:21 - however it comes with a few downsides so
17:23 - it's easy to misconfigure a service
17:25 - through human error it's hard to manage
17:27 - the expected state of the configuration
17:28 - for compliance it's hard to transfer
17:31 - configuration knowledge to other team
17:32 - members and so this is why uh
17:35 - infrastructure code is going to really
17:36 - help us out so um infrastructure is code
17:39 - commonly abbreviated to iac and you'll
17:41 - see that a lot in this course allows you
17:43 - to write a configuration script to
17:45 - automate creating updating or destroying
17:48 - cloud infrastructure notice i gave great
17:50 - emphasis on automate or automation
17:52 - because that is really key to
17:54 - infrastructure's code iec can also be
17:56 - thought of as a blueprint of your
17:58 - infrastructure ic allows you to easily
18:01 - share version or inventory your cloud
18:03 - infrastructure and just to kind of give
18:05 - you a visualization imagine you write a
18:07 - script and that's going to uh provision
18:09 - uh and launch a bunch of cloud services
18:12 - that are all interconnected okay
18:14 - [Music]
18:19 - all right so we're taking a look at
18:21 - popular iac tools and so of course this
18:24 - course is about terraform but by
18:25 - understanding all the options out there
18:28 - you understand why we're using terraform
18:30 - and one thing that is very important to
18:32 - understand is the difference between
18:33 - declarative and imperative iec tools
18:36 - those are the broad categories that we
18:38 - see
18:39 - for iac so let's start with declarative
18:41 - so the idea here is what you see is what
18:43 - you get everything's explicit it's more
18:46 - verbose but there's zero chance of
18:47 - misconfiguration and this all relies on
18:50 - the fact that they use a scripting
18:51 - language such as json yaml xml in the
18:54 - case of terraform they have their own
18:55 - language called hcl but the way these
18:58 - languages are structured is that they're
19:00 - very verbose
19:01 - and there's not a lot of programming
19:02 - logic involved
19:04 - so for azure we have arm templates and
19:06 - azure blueprints for aws we have
19:08 - cloudformation for google we have cloud
19:10 - deployment manager and then there is of
19:12 - course terraform which has many cloud
19:14 - service providers such as aws azure gcp
19:16 - kubernetes and a lot more
19:19 - but these are all in the declarative
19:21 - category
19:22 - on the right hand side we have
19:23 - imperative so you say what you want and
19:25 - the rest is filled in everything here is
19:27 - implicit uh it's less verbose but you
19:29 - could end up with misconfiguration and
19:31 - when i say that it's that like if you
19:33 - were to find um let's say a virtual
19:35 - machine you might not have to provide
19:37 - every single uh option that you would
19:39 - normally do and it would fill in the
19:41 - rest but if you weren't aware of what it
19:43 - was doing that's where you could end up
19:44 - with misconfiguration
19:46 - though i would say that imperative tools
19:48 - generally try to always
19:51 - have their defaults as best practices so
19:53 - you're not usually in a bad position uh
19:55 - but you know you might end up with
19:56 - something you don't expect uh imperative
19:59 - can do more than declarative so there's
20:00 - just some very hard limitations with
20:04 - declarative languages uh so there's just
20:06 - cases where you want to do imperative uh
20:09 - and the idea here is imperative
20:11 - languages use programming language you
20:12 - know like python ruby javascript golang
20:15 - you know whatever it is uh there's
20:17 - likely an sdk for it
20:19 - and so it's just a lot more
20:21 - programmer friendly a lot of developers
20:23 - like imperative tools
20:25 - so aws has their own called cloud
20:27 - development kit cdk and it technically
20:30 - only supports aws i say technically
20:33 - because hashicorp has a very cool
20:35 - library that allows you to generate out
20:37 - uh terraform hcl files which allows you
20:39 - to work with anything but when we're
20:41 - just talking about cdk on its own it's
20:42 - just for aws then you have plumi it
20:45 - supports aws azure tcp
20:47 - and kubernetes um so it can do a lot so
20:50 - why would you choose with your team to
20:52 - use declarative over imperative well it
20:54 - just really depends on your um your team
20:57 - right so like if they're all used to if
20:59 - they're all administrators and they're
21:00 - used to using jason yaml and they're not
21:01 - good programming languages uh that is
21:04 - one reason why you might want to use
21:05 - declarative over imperative um the other
21:07 - thing is just you know
21:09 - you prefer to know exactly every single
21:11 - thing that was defined right you don't
21:13 - want anything
21:14 - left up to a chance and so that is
21:18 - another reason why you might want to use
21:19 - declarative but both are great options
21:21 - it just really depends on your team's
21:23 - knowledge and what your goals are okay
21:30 - so we just looked at imperative and
21:31 - declarative but i just want to clarify
21:33 - that terraform even though it's a
21:34 - declarative language it has imperative
21:36 - like features so i've coined the phrase
21:37 - declarative plus and so terraform kind
21:40 - of gives you the best of both worlds so
21:41 - you have declarative and imperative and
21:43 - then the three types so our yaml json
21:45 - xml we have terraform language which
21:48 - actually utilizes hcl underneath and
21:50 - then you have programming languages on
21:51 - the right hand side like ruby python
21:53 - javascript uh what have you right so
21:56 - when we're looking at yaml or json these
21:58 - are very limited languages
22:00 - or scripting languages where
22:03 - you know you don't really have any kind
22:04 - of complex data types you probably don't
22:06 - have a whole lot of
22:08 - robust functions but in some cases you
22:11 - can extend that base behavior so in the
22:13 - case of cloud formation which uses yaml
22:15 - or json files they have a concept called
22:17 - macros so you can extend it a bit but
22:20 - again it's very inflexible and so a lot
22:22 - of people are led to go and use cdk so
22:26 - terraform is great because it kind of
22:28 - has a lot of stuff you'd see in
22:29 - programming languages like for loops
22:31 - dynamic blocks locals it also has
22:34 - complex data structures and a lot of
22:36 - functions around using those data
22:38 - structures and so it allows you to stay
22:40 - in that declarative world but having the
22:42 - stuff that you generally need when
22:43 - you're in the paradive world when you're
22:45 - in the imperative side the idea is that
22:47 - the language is what you're utilizing so
22:50 - you can do anything that the programming
22:51 - language allows you to do
22:53 - but i just wanted to kind of show you
22:54 - that terraform sits in the middle okay
22:57 - [Music]
23:01 - hey it's andrew brown from exam pro and
23:03 - we are looking at infrastructure life
23:05 - cycle so what is infrastructure
23:07 - lifecycle it's the idea of having
23:09 - clearly defined and distinct work phases
23:11 - which are used by devops engineers to
23:13 - plan design build test deliver maintain
23:16 - and retire cloud infrastructure when
23:18 - we're talking about like sdlc so
23:20 - software development life cycle there's
23:22 - usually a really great visual that i can
23:24 - show for you but for infrastructure life
23:26 - cycle especially cloud infrastructure
23:28 - life cycle there isn't something that is
23:30 - well defined which is weird by the
23:32 - definition but
23:33 - i think that there's just nobody's
23:35 - agreed upon one yet or nobody's made the
23:38 - graphic yet so i just don't have
23:39 - anything to show you for that but i just
23:41 - want you to get familiar with the term
23:42 - infrastructure life cycle because you're
23:44 - likely to hear it again but one
23:47 - particular infrastructure life cycle
23:48 - that is pretty common is ones that talk
23:51 - about day zero day one and day two so
23:54 - the idea here is this is a simplified
23:56 - way to describe phases of infrastructure
23:57 - life cycle so when we say we are on day
24:00 - zero we are planning and designing our
24:03 - infrastructure
24:04 - on day one we are developing and
24:06 - iterating it so we might be uh you know
24:09 - deploying or provisioning it and
24:10 - actually testing it in the cloud and
24:12 - then day two is actually when we go live
24:14 - with real production users and maintain
24:16 - it and the idea of mentioning day zero
24:19 - one and two is to say well when does iac
24:22 - start and the idea is it starts on day
24:24 - zero okay the days do not literally mean
24:27 - a 24-hour day uh it's just a broad way
24:29 - of defining where in the infrastructure
24:32 - project we would be okay
24:34 - [Music]
24:39 - so after defining what infrastructure
24:41 - life cycle is what advantage or what
24:45 - advancement are we going to have when we
24:46 - add iac to our infrastructure life cycle
24:49 - well the first thing we're going to get
24:50 - is reliability so ic makes changes
24:53 - impotent consistent repeatable and
24:55 - predictable i'm going to give extra
24:57 - attention here to impotent because it is
24:59 - a very strange english word but no
25:01 - matter how many times you run your ic
25:04 - you will always end up with the same
25:06 - state that is expected that is a very
25:08 - important concept of iec
25:10 - whereas if you use configuration
25:11 - management there's no guarantee of that
25:13 - that's why you use a terraform over
25:15 - something like ansible okay you have
25:18 - manageability so enable mutation via
25:20 - code revise with minimal changes and
25:23 - then you have sensibility so avoid
25:24 - financial and reputational losses to
25:27 - even loss of life when considering
25:29 - government and military dependencies on
25:31 - infrastructure so there you go
25:33 - [Music]
25:38 - okay so it impodent is a very important
25:41 - concept to infrastructure as code and so
25:44 - we're going to give it a little bit more
25:45 - attention i wouldn't stress out about
25:47 - the pronunciation uh there's more than
25:49 - one way to pronounce it in english and
25:50 - i've probably even said it wrong uh in
25:53 - the previous slide so
25:55 - just be uh
25:57 - forgiving on that part okay but the idea
25:59 - is that let's stage a scenario between a
26:02 - non-edipotent example and an independent
26:05 - example so when i deploy my iac config
26:09 - file it will provision and launch two
26:11 - virtual machines that is what i'm
26:12 - expecting okay and that is what i get
26:15 - but what happens when i go and i update
26:18 - this infrastructure code file saying
26:19 - maybe i want to increase the size of the
26:21 - vms or some of the configuration i
26:24 - deploy that again when it's
26:25 - non-independent
26:27 - what will end up happening is i will end
26:29 - up with two additional virtual machines
26:31 - with the new configuration and the old
26:33 - ones will be there and so this is
26:35 - something you might not want because you
26:37 - just want to have a file that says
26:39 - exactly the state that you expect okay
26:43 - so when we have something that is
26:44 - idepotent
26:46 - the idea is we will go and we will
26:48 - define our two virtual machines and we
26:50 - will get our two virtual machines but we
26:52 - go and we update that file and we deploy
26:55 - again and what happens this time is it
26:57 - just ends up modifying the original
26:59 - virtual machines or if it really can't
27:02 - and it has to it might delete them and
27:04 - recreate them but the idea is that we
27:06 - end up in a state of exactly what we
27:08 - want so in the first case we expected
27:10 - two but we ended up with four but with
27:12 - the inopponent uh case we expected two
27:15 - and we always end up with two so
27:18 - hopefully that makes that very clear
27:19 - okay
27:20 - [Music]
27:25 - hey this is andrew brown from exam pro
27:27 - and what i want to do here is concretely
27:29 - define the difference between
27:30 - provisioning deployment and
27:32 - orchestration now in practice sometimes
27:35 - these have overlapping responsibilities
27:37 - so you might say provisioning when you
27:39 - really mean deployment or vice versa
27:41 - it's not a big deal
27:43 - we all get kind of mixed up about it but
27:45 - i did want to just take the time to make
27:47 - sure that we understand what these
27:48 - things are supposed to mean okay so the
27:50 - first on our list here is provisioning
27:52 - so to prepare a server with systems data
27:54 - and software and to make it ready for
27:56 - network operation if you're using a
27:58 - configuration management tool you are
28:00 - most likely provisioning because that's
28:02 - what these tools do so puppet ansible
28:04 - chef bash scripts powershell or cloudnit
28:07 - so you can provision a server when you
28:09 - launch a cloud service and configure it
28:11 - you are provisioning it okay
28:13 - then you have deployment so deployment
28:15 - is the act of delivering a version of
28:18 - your application to run a provision
28:20 - server deployment could be performed via
28:22 - a bus code pipeline harness which is a
28:25 - third-party deployment tool jenkins
28:28 - github actions circle ci there's a lot
28:30 - more other providers out there then you
28:32 - have orchestration so orchestration is
28:34 - the act of coordinating multiple systems
28:36 - or services orchestration is a common
28:38 - term when working with micro services
28:40 - containers and kubernetes so
28:42 - orchestration could be done with
28:44 - kubernetes salt or fabric so if you're
28:46 - working with containers uh generally
28:48 - like you use the word orchestration
28:50 - especially with kubernetes because
28:51 - you're working with thousands
28:52 - of uh microservices okay so you know
28:55 - hopefully that helps you
28:57 - know the difference between those three
28:58 - again it's not a big deal if you don't
29:00 - perfectly know them
29:02 - but there you go
29:03 - [Music]
29:07 - hey this is andrew brown from exam pro
29:09 - and we are taking a look at
29:10 - configuration drift so this is when
29:12 - provision infrastructure has an
29:14 - unexpected configuration change due to
29:17 - team members manually adjusting
29:18 - configuration options malicious actors
29:21 - so maybe they're trying to cause
29:23 - downtime or breach data or side effects
29:26 - from apis sdks or cli so you've written
29:29 - some code that uses a cli in the bash
29:31 - script
29:32 - and it does something you did not expect
29:34 - to happen
29:35 - so here an example could be imagine you
29:37 - have a server like a database
29:40 - and a junior developer turns off delete
29:42 - on termination for your production
29:44 - database this could be a problem where
29:46 - let's say there's an accidental deletion
29:49 - of the database
29:50 - this feature would protect the database
29:52 - from deletion but if it's turned off you
29:54 - don't have that right so configuration
29:56 - drift going unnoticed could be a loss or
29:59 - breach of cloud services and residing
30:01 - data or result in interruption of
30:03 - services or unexpected downtime so
30:04 - there's a lot of
30:06 - downsides to uh neglecting or not
30:08 - noticing configuration drift so what can
30:11 - we do about this so how to detect so
30:14 - there's three things detect um
30:16 - we can fix it and then prevent it okay
30:18 - so to detect configuration drift if you
30:20 - have a compliance tool uh it can detect
30:23 - misconfiguration so aws config can do
30:25 - that azure policies can do that gcp
30:28 - security health analytics can do that
30:29 - some of these are constrained to
30:32 - security things not just configuration
30:35 - general but there are tools there
30:38 - for all the cloud service providers
30:40 - there is built-in support for drift
30:41 - detection for it was cloud formation
30:44 - it's called confirmation
30:45 - drift detection
30:47 - other providers don't necessarily have
30:48 - that
30:49 - if you're using terraform which is this
30:51 - which is all this course is about you
30:53 - have the terraform state files which
30:55 - says what the state of things should be
30:58 - so that's how you could detect
30:59 - configuration drift
31:01 - how to correct configuration drift well
31:03 - compliance tools can remediate so again
31:06 - abs config you can create a custom
31:08 - lambda to say hey when this happens then
31:10 - do this so set the configuration back
31:12 - into place with terraform you can use
31:14 - the refresh and plan commands which
31:16 - we'll look at in detail in this course
31:19 - or you can manually correct it so if the
31:22 - option was changed you could do that not
31:24 - recommended to do that
31:25 - another thing would be tearing down and
31:27 - setting up the infrastructure again
31:28 - because that would bring it back into
31:30 - its original state
31:31 - that could be a risky thing to do um
31:34 - depending on how you have things set up
31:36 - or it could be it could be fine right
31:38 - then there's prevention so
31:40 - this is a the important thing and kind
31:42 - of why we're talking about configuration
31:43 - drift which is all about immutable
31:45 - infrastructure so always create and just
31:47 - destroy never reuse so that might be
31:49 - blue-green deployment strategies um
31:52 - servers are never modified they are all
31:54 - they're just always deployed with a new
31:56 - version uh the way you would do that
31:57 - would be baking ami images or containers
32:00 - via aws image builder or hashicorp
32:03 - packer or a build server like gcp cloud
32:05 - run or
32:06 - code build like aws
32:08 - but the idea is that you're not
32:10 - modifying after they're deployed you'd
32:12 - have that image already ready to go
32:14 - another thing you could use is git ops
32:16 - so uh you would version control your iac
32:20 - like within github or something like
32:21 - that and you would peer review every
32:23 - single uh um
32:25 - change via a pull request to the
32:26 - infrastructure so hopefully that gives
32:28 - you an idea of things we can do to
32:31 - tackle configuration drift okay
32:33 - [Music]
32:37 - we were just talking about immutable
32:39 - infrastructure but i just want to give
32:40 - it a bit more attention here so
32:43 - the idea is um we are going to first
32:46 - develop our infrastructure as a code
32:49 - file terraform cloudformation what have
32:51 - you and then we're going to go ahead and
32:53 - deploy that so we'll end up with our own
32:55 - virtual machine and that virtual machine
32:57 - needs to be configured so you need to
32:59 - install packages and things like that
33:01 - that's where cloud in it would come into
33:02 - play ansible puppet chef salt whatever
33:05 - configuration management tool you want
33:06 - to use
33:07 - the problem here is that
33:09 - there's no guarantee that that
33:10 - configuration is going to stay in place
33:13 - so that's where immutable infrastructure
33:15 - comes into play so we develop our
33:18 - infrastructure as a code file terraform
33:20 - cloudformation and then we're going to
33:22 - go ahead and do our configuration by
33:24 - building a virtual machine or building a
33:27 - container so we can use something like
33:28 - packer
33:29 - and then the idea is once we are happy
33:31 - with our configuration
33:33 - what we're going to do is bake that
33:35 - image and put it in an image repository
33:38 - and then
33:39 - that image is going to be referenced
33:40 - when we do our deploy and so that's
33:42 - going to make sure that our
33:43 - infrastructure is always immutable okay
33:46 - [Music]
33:50 - hey this is andrew brown from exam pro
33:52 - and we are taking a look at the concept
33:54 - or methodology of git ops so this is
33:56 - when you take infrastructure as code and
33:58 - you use a git repository to introduce a
34:01 - formal process to review and accept
34:03 - changes to infrastructure code and once
34:06 - that code is accepted it automatically
34:07 - triggers a deploy and changes that
34:10 - infrastructure so here's my illustration
34:12 - through it so the idea is you would have
34:15 - a terraform file and you would place
34:17 - that in something like github you would
34:19 - apply your commits and when you're ready
34:20 - you'd make a pull request you would
34:22 - merge that pull request into the main
34:24 - branch or whichever branch is set up for
34:27 - production and that could trigger
34:29 - something like github actions
34:31 - and github actions would then trigger a
34:33 - terraform uh plan and and accept it or
34:36 - maybe you have to manually intervene to
34:38 - say okay i accept these changes but then
34:40 - it would roll out those changes now
34:43 - terraform does have their own and it's
34:44 - pretty darn similar but i thought mine
34:46 - was a bit easier to read but the idea is
34:48 - you have your git repository uh you have
34:50 - your pull request uh this is pulling
34:52 - from terraform cloud because you can uh
34:55 - have files and state managed there uh so
34:58 - that is another means to do it but
35:00 - that's generally how it works okay
35:02 - [Music]
35:06 - so we were just looking at immutable
35:08 - infrastructure but what i want to do is
35:09 - just kind of cement in your head things
35:11 - that you should be asking yourself as a
35:14 - devops engineer so that you kind of lean
35:16 - towards uh that immutable uh kind of way
35:20 - of thinking and so this is mostly gonna
35:22 - be applicable for virtual machines but
35:24 - let's just ask some questions of things
35:26 - we should be thinking about so what's
35:28 - gonna happen if we deploy our virtual
35:30 - machine and there is a physical failure
35:32 - of the hardware by the provider so this
35:34 - can sometimes happen on aws where they
35:36 - have two status checks that have to
35:38 - complete before a virtual machine is
35:40 - ready sometimes they fail and so you
35:42 - know your infrastructure is not raised
35:44 - degraded or damaged right
35:46 - then you have application failure so you
35:49 - have this post installation script maybe
35:51 - to install your application and there's
35:54 - either a bug so introduced by developer
35:57 - or maybe there's just a dependency and
35:59 - it's changed and so it's breaking your
36:01 - app
36:02 - what happens when you need to deploy in
36:04 - a hurry
36:06 - what happens in worst case scenarios
36:07 - where you have accidental deletion
36:09 - compromised by a malicious actor need to
36:11 - change regions maybe there's a region
36:13 - outage and so the thing is is that when
36:15 - you look at these things what happens
36:17 - when multiples of these happen at the
36:19 - same time because that's the problem
36:20 - where you know it's like okay i have
36:22 - something wrong with my application code
36:24 - but i also have uh you know now we also
36:27 - have a region down and so you don't want
36:29 - to be dealing with more than one problem
36:31 - at the same time and so that's we're
36:32 - going to have an issue of agility in
36:34 - terms of deployment another thing that
36:36 - is overlooked is there's no guarantee of
36:38 - one to one if you are configuring your
36:41 - code after deployment
36:43 - because if you um were to deploy a
36:46 - virtual machine
36:47 - and installed all the dependencies
36:50 - and then you to were to deploy a virtual
36:52 - machine literally a minute later one of
36:54 - those dependencies could have a minor
36:56 - revision and so that would be deployed
36:58 - with that one minor revision so they
37:00 - would look very similar but they aren't
37:01 - one-to-one so by introducing golding
37:03 - images which is an immutable
37:04 - infrastructure idea you get a guarantee
37:06 - of one one to one with your fleet you
37:08 - have increased assurance of consistency
37:10 - security you have uh you can speed up
37:12 - your deployments the reason why you have
37:14 - an improvement of security is because at
37:16 - that stage you could um you could
37:18 - perform kind of security checks and
37:20 - things like that there on that image
37:22 - before you roll it out
37:24 - so i don't know i would just say that i
37:26 - would recommend that you go with the
37:28 - immutable infrastructure or baking your
37:29 - images when you can if you're using bms
37:31 - okay
37:35 - [Music]
37:36 - hey this is andrew brown from exam pro
37:38 - and we're going to take a look here what
37:39 - is hashicorp so hashicorp is who creates
37:42 - terraform and they are companies
37:44 - specializing in managed open source
37:45 - tools used to support the deployment and
37:47 - development of large-scale service
37:49 - oriented software installations and they
37:51 - have their own uh cloud platform called
37:53 - the hashicorp cloud platform hcp and
37:55 - it's a unified platform to access
37:57 - hashicorp various products so uh the
38:00 - main thing is that it's cloud agnostic
38:01 - so hashicorp makes it really easy to
38:03 - build cross-cloud
38:05 - and they have support for all the three
38:07 - main providers so aws gcp azure i'm sure
38:10 - they have more support like kubernetes
38:11 - and things like that they're highly
38:13 - suited for multi-cloud workloads or
38:15 - cross-cloud workloads and they have a
38:17 - lot of products that will help you out
38:19 - there so let's go through them quickly
38:21 - so first we have boundary this is secure
38:22 - remote access to systems based on
38:24 - trusted identity this is console this is
38:27 - a full featured service mesh for secure
38:28 - service segmentation across any cloud or
38:30 - runtime environment you have nomad this
38:33 - is scheduling and deployment of tasks
38:34 - across worker nodes in a cluster you
38:36 - have packer which is a tool for building
38:38 - virtual machine images that will be
38:40 - later deployed or they will place them
38:42 - in a image repository then you have
38:45 - terraform which is infrastructure as
38:47 - code software which enables provisioning
38:49 - and adapting virtual infrastructure
38:51 - across all major providers then you have
38:53 - terraform cloud and this is just a place
38:55 - to store and manage your iac
38:58 - state files and things like that with a
39:00 - team or just in the cloud by yourself we
39:02 - have vagrant so building and
39:04 - building and maintenance of reproducible
39:06 - software development environments via
39:08 - virtualization technology we have vault
39:10 - so secrets management identity based
39:13 - access encrypting application data
39:15 - auditing of secrets for application
39:16 - systems and users and lastly we have
39:19 - waypoint a modern workflow to build
39:21 - deploy and release across
39:23 - multiple platforms so there you go
39:29 - [Music]
39:30 - hey this is andrew brown from exam pro
39:32 - and we are looking at what is terraform
39:34 - so terraform is an open source and cloud
39:36 - agnostic infrastructure is a code tool
39:38 - and terraform uses declarative
39:40 - configuration files and the
39:42 - configuration files are written in the
39:44 - hashicorp configuration language hcl
39:47 - and so that's what you can see on the
39:48 - right hand side
39:50 - we'll generally call it the terraform
39:51 - language which we'll talk about later
39:53 - but notable features of terraform are
39:55 - installable modules plan and predict
39:57 - changes dependency graphing state
39:59 - management and provisioning
40:01 - infrastructure in familiar languages
40:03 - that's something you could do via aws
40:05 - cdk so i wouldn't say it's
40:07 - core to terraform but that's what they
40:09 - listed on their websites that's what i
40:10 - put in there and terraform registry
40:12 - which has over 1 000
40:14 - plus providers okay so there we go
40:17 - [Music]
40:21 - so we were just looking at terraform but
40:23 - what is terraform cloud well it's a
40:25 - software as a service offering for
40:27 - remote state storage version control
40:29 - integrations flexible workflows and
40:32 - allows you to collaborate on
40:33 - infrastructure changes within a single
40:35 - unified web portal and this is all
40:37 - accessible via
40:39 - terraform.io and the first thing you'll
40:41 - have to do is create yourself an account
40:42 - on terraformio but it's free to start
40:45 - with and they actually have a very
40:46 - generous free tier that allows for team
40:48 - collaboration for the first five users
40:50 - of your organization that's not part of
40:52 - the team's plan that's part of the free
40:53 - plan and in the majority of cases you
40:56 - really should be using terraform cloud
40:58 - as your remote back end even if you are
41:00 - an individual just because you know it
41:02 - makes experience so much better the only
41:04 - case that you might not want to use
41:06 - terraform cloud is if you have a very
41:08 - large company that's trying to meet
41:10 - particular regulatory requirements and
41:12 - it's not that terraform cloud
41:14 - does not meet them but sometimes there's
41:16 - just a long procurement process so in
41:19 - the meantime you'd have to use something
41:20 - like standard remote backend or atlantis
41:23 - or maybe you need to investigate
41:24 - terraform enterprise i do want to note
41:26 - that uh terraform cloud and terraform
41:29 - enterprise is the underlying software
41:31 - known as terraform platform it's not
41:33 - something you're going to ever have
41:33 - direct access to but
41:35 - just to clarify that terminology okay
41:38 - [Music]
41:43 - so what i want to do is just set you up
41:45 - with understanding the terraform life
41:47 - cycle this is not necessarily
41:49 - described in the documentation anywhere
41:51 - but it's something that is inherently
41:53 - known when you're working with terraform
41:56 - and it's definitely not
41:58 - inclusive of every single command that
42:00 - can be ran but the ones that you're
42:02 - going to counter most often so at the
42:04 - start you're going to be writing or
42:06 - updating your terraform configuration
42:07 - file okay and from there the first thing
42:10 - you'll want to do is initialize your
42:12 - projects and
42:14 - or if you need to pull the latest
42:16 - providers and modules you're going to
42:17 - use terraforming it to do that as well
42:19 - from there you're going to use plan so
42:21 - plan allows you to speculate what will
42:23 - change or generate a saved execution
42:25 - plan that you could use later on when
42:27 - you run plan validate happens
42:29 - automatically but you could also run
42:31 - this separately and ensures types and
42:33 - values are valid ensures the required
42:35 - attributes are present within your
42:36 - configuration file from there if
42:39 - everything is good you're going to
42:40 - execute your
42:42 - execution plan by running terraform
42:44 - apply uh you can also from this point
42:46 - use terror from apply to destroy
42:48 - infrastructure so if you have things set
42:49 - up there's actually a flag for it or you
42:51 - can use the alias the terraform destroy
42:53 - command and then you know as you work
42:56 - you're just going to keep updating your
42:57 - code and that is the terraform life
42:59 - cycle so you know hopefully this gives
43:01 - you kind of a a snapshot of what the
43:03 - workflow will be
43:05 - and i mean we'll be covering it tons and
43:07 - tons of times over in this course okay
43:10 - [Music]
43:14 - hey this is andrew brown from exam pro
43:16 - and we are taking a look at change
43:18 - automation but to understand that we
43:20 - need to first talk about change
43:22 - management so this is a standard
43:23 - approach to apply change and resolving
43:25 - conflicts brought about by change in the
43:27 - context of iac change management is the
43:29 - procedure that will be followed when
43:31 - resources are modified and applied via
43:33 - configuration scripts so what is change
43:35 - automation then it is a way of
43:37 - automatically creating a consistent
43:38 - systematic and predictable way of
43:40 - managing change requests via control and
43:43 - policies notice and i should have
43:45 - probably emphasized this is change
43:46 - requests saying i'm going to change
43:48 - these resources terraform uses change
43:50 - automation in the form of execution
43:52 - plans and resource graphs which will
43:54 - look at detail those two things in
43:56 - upcoming slides and apply review complex
43:59 - change sets so a change set is a
44:01 - collection of commits that represents
44:03 - changes made to a versioning repository
44:05 - and
44:06 - for iec uses change sets so you can see
44:10 - what has changed by who over time so
44:12 - when i say versioning repository that
44:14 - doesn't necessarily mean git uh and if
44:16 - you're using git ops i suppose you could
44:18 - consider your change sets being
44:19 - committed to that but something like
44:21 - cloud formation when you apply a change
44:25 - you actually have to accept a change set
44:27 - uh and so the virgin repository is part
44:29 - of aws and so
44:31 - you know terraform you just kind of
44:32 - accept it in place it's not necessarily
44:35 - on your local machine but it gets
44:37 - reflected in your state file okay so
44:39 - change automation allows you to know
44:40 - exactly what terraform will change and
44:42 - in what order avoiding many possible
44:44 - human errors a change automation is
44:46 - essential to any iac tool they all have
44:49 - it okay so there we go
44:50 - [Music]
44:55 - hey this is andrew brown from exam pro
44:57 - and we are taking a look at execution
44:58 - plans so this is a manual review of what
45:01 - will add change or destroy before you
45:03 - apply changes and so let's say you type
45:05 - in terraform apply it's not just going
45:07 - to go ahead and do that it's going to
45:08 - have you uh type in yes or accept the
45:11 - value but what you can do is see the
45:13 - resources or configuration settings that
45:14 - will be added change or destroyed and it
45:17 - will summarize them at the bottom and
45:18 - then you'll have to type something like
45:20 - yes in order to accept the changes okay
45:23 - [Music]
45:27 - something else i want to show you is
45:29 - that you can actually visualize your
45:30 - execution plans by using the terraform
45:33 - graph command and terraform will output
45:35 - a graphviz file you'll have to have
45:37 - graphviz installed but graphis is an
45:39 - open source tool for drawing graphs
45:41 - specified in the dot language scripts
45:43 - having the file name extension of gv
45:46 - so i believe this is cross platform it's
45:48 - open source but once it's installed in
45:50 - your machine you can run terraform graph
45:52 - and here this is linux so we're using a
45:55 - pipe to say okay pass it over to graphis
45:57 - which is dot
45:58 - and that is going to then create an svg
46:01 - file you can just open that in your
46:02 - browser and the idea is you're going to
46:04 - get this graph which kind of shows you
46:05 - the relationship of the resources uh
46:07 - here but we'll talk about the these
46:09 - relationships in the next slide here
46:11 - which is a resource graph okay
46:16 - [Music]
46:18 - let's take a look here at the resource
46:19 - graph so terraform builds a dependency
46:22 - graph from the terraform configurations
46:23 - and walks this graph to generate plans
46:26 - refresh state and more when you use
46:28 - terraform graph this is a visual
46:30 - representation or presentation of the
46:32 - dependency graph if you're wondering
46:33 - what a dependency graph is in
46:35 - mathematics it's a directed graph
46:37 - representing dependencies of several
46:38 - objects towards each other so it's
46:40 - pretty much like nodes
46:42 - with relationships between other nodes
46:44 - so that is one that i generated out from
46:47 - terraform and so there's a few different
46:49 - types here we have a resource node that
46:51 - represents a single resource a resource
46:53 - meta node represents a group of
46:55 - resources but does not represent any
46:57 - action on its own and provider
46:58 - configuration node so represents the
47:00 - time to fully configure a provider uh
47:03 - will you need to know this for the exam
47:04 - probably not do you need to know this in
47:06 - great detail probably not because
47:07 - there's a lot to the resource graph but
47:10 - the idea here is just kind of like
47:11 - terraform saying just so you know we're
47:13 - using a graph database and graph
47:15 - databases are very well suited for this
47:17 - kind of stuff
47:18 - and that's why terraform is very good at
47:22 - figuring out conflicts uh and things
47:23 - like that okay
47:25 - [Music]
47:29 - hey this is andrew brown from exam pro
47:31 - and we're taking a look at terraform use
47:33 - cases and the idea here is not
47:34 - necessarily because it's going to show
47:36 - up in the exam but the idea is to give
47:38 - you a business use case or to highlight
47:39 - the features as to why you'd want to be
47:41 - using terraform and the first one here
47:43 - is that it has exotic providers so
47:46 - terraform supports a variety of
47:47 - providers outside of gcp awesome azure
47:50 - and sometimes is the only provider
47:52 - terraform is open source and extendable
47:53 - so any api can be used to create iec
47:56 - tooling of any kind of cloud platform or
47:58 - technology so you can make your own
47:59 - provider there's some interesting ones
48:01 - that they have like heroku or even
48:03 - spotify playlists i have my own platform
48:04 - called teacher seat and i want to have
48:06 - iac um for my platform and so this is
48:10 - what i'm going to be using terraform for
48:12 - for multi-tier applications terraform by
48:14 - default makes it easy to divide large
48:15 - and complex applications into isolate
48:17 - configuration script modules you'll
48:19 - notice in this course that uh when you
48:21 - have a bunch of terraform files they're
48:22 - all treated as one
48:24 - so that makes it really easy to split up
48:26 - your uh your projects uh or your your
48:28 - infrastructure so it has a complexity
48:30 - advantage over cloud native ise tools
48:32 - for its flexibility while retaining
48:34 - simplicity over imperative tools then we
48:37 - have disposable environments this is not
48:39 - unique to terraform it's any kind of ise
48:41 - tool but easily stand up an environment
48:43 - for a software demo or a temporary
48:45 - developer environment resource
48:46 - schedulers so terraform is not just
48:48 - defined to infrastructure of cloud
48:50 - resources but can be used to
48:52 - set dynamic schedules for docker
48:54 - containers hadoop spark and other
48:56 - software tools you can provision your
48:58 - own scheduling grid on the last one here
49:01 - is multi-cloud deployment terraform is
49:03 - cloud agnostic and allows a single
49:05 - configuration to be used to manage
49:07 - multiple riders and to even handle
49:09 - cross-cloud dependencies and that is a
49:11 - big deal uh and is a very unique
49:14 - offering to terraform okay
49:16 - [Music]
49:20 - let's take a look here at terraform core
49:22 - and terraform plug-ins so terraform is
49:24 - logically split into two main parts
49:26 - terraform core which uses remote
49:29 - procedure calls rpc to communicate with
49:31 - terraform plugins and terraform plug-ins
49:33 - so expose an implementation for a
49:35 - specific service or provisioner uh
49:38 - something that's interesting to know is
49:40 - just terraform core is written in go um
49:43 - you know you probably won't ever
49:44 - encounter it but it's just a fact okay
49:48 - and so here's the graphic that terraform
49:49 - uses to kind of like explain uh
49:51 - terraform core uh versus terraform
49:53 - plug-ins and how they all relate um so
49:56 - here's the terraform core and here are
49:58 - the plugins notice we have uh providers
50:01 - here which will cover provisioners uh
50:03 - and they're just this is the group for
50:05 - plugins overall um but yeah that's about
50:08 - it um will it show up in the exam
50:09 - probably not but it's good to understand
50:12 - from a top level view the split between
50:14 - these two things okay
50:15 - [Music]
50:20 - if you are new to terraform i just
50:21 - wanted you to be aware of an additional
50:24 - resource that you can use beyond this
50:26 - course which is called terraform up and
50:28 - running so it's a a book
50:30 - and it has a deep dive into the internal
50:32 - workings of terraform and this is really
50:34 - great if you want to go beyond this
50:36 - course beyond certification beyond the
50:38 - basics because what we'll do is teach
50:40 - you about testing with terraform cloud
50:42 - zero downtime deployment common
50:45 - terraform gotchas and compositions of
50:47 - production grade terraform code there's
50:49 - a lot more to it and this book in
50:51 - particular is written by jim who's the
50:53 - co-founder of grunt work and we do have
50:55 - a whole section just on grunt work um
50:58 - and the thing is i just wanted you to
51:00 - know about this resource
51:01 - you definitely don't need it to pass a
51:03 - certification or to have
51:05 - a good understanding or working of
51:06 - terraform but you know at some point if
51:08 - you want more i just want to point you
51:10 - to that resource okay
51:12 - [Music]
51:16 - there's one other resource i want you to
51:18 - check out for terraform this one is free
51:20 - and just online and it's the terraform
51:22 - best practices so it's an open book it's
51:24 - a get book uh so it's essentially a wiki
51:28 - and it basically covers the best
51:29 - practices that are being used in the
51:31 - industry and so this is stuff that is
51:33 - separate from the terraform
51:34 - documentation it's just good practices
51:37 - you know if you're going to be using
51:39 - terraform professionally within the
51:41 - industry so i just wanted to make you
51:42 - aware of this resource and to go check
51:44 - it out okay
51:46 - [Music]
51:50 - hey it's andrew brown from exam pro and
51:52 - it's time to begin our follow along for
51:54 - terraform and the first thing we need to
51:55 - do is actually install terraform so what
51:58 - i've done uh and this is in the
51:59 - terraform associate folder this will all
52:02 - be hosted on github so you can access it
52:04 - later but what we're going to have to do
52:05 - is make our way over to the hashicorp
52:07 - learn website to get to the tutorials
52:10 - terraform install cli because that's the
52:12 - first thing we're going to need and then
52:13 - once we make our way there we're going
52:15 - to need to choose our installation
52:17 - method so we have manual install
52:19 - homebrew
52:20 - os 10
52:21 - chocolation on windows or linux so it's
52:24 - just going to vary based on your
52:25 - installation i'm not going to walk
52:26 - through them all but i'm going to
52:27 - definitely do the one that is for me so
52:29 - i'm on windows 10. it's very common to
52:31 - use the windows
52:32 - subsystem of linux and so the way i
52:35 - would go ahead and install this i would
52:36 - open up my terminal and vs code and by
52:39 - the way i recommend you probably follow
52:40 - with vs code through all these tutorials
52:42 - just because vs code has a very good
52:45 - extension for
52:46 - terraform okay but once we are there
52:49 - what we can do is make our way over here
52:51 - and because linux the linux variant i'm
52:54 - using is ubuntu um i can go ahead here
52:57 - and just go and start going through this
52:58 - process so we would grab the first url
53:01 - here and again it's going to vary based
53:02 - on how you want to install
53:05 - um so we'll go there and i already have
53:06 - it installed so i'm just installing it
53:08 - again
53:10 - all right after short wait that line
53:12 - finished there so we'll just proceed to
53:13 - the next so we'll grab the gpg key
53:15 - that's just going to verify that
53:17 - we are grabbing from who we say we're
53:19 - grabbing our code from so that takes two
53:22 - seconds we'll go ahead and this will go
53:25 - and uh add that repository so that we
53:28 - can install from there
53:30 - i believe this takes a second just as
53:32 - well
53:34 - okay that took a little bit more extra
53:35 - time there but no big deal
53:37 - and so now we are ready to actually
53:39 - install the cli so we can now do our
53:41 - sudo apt-get install terraform so just
53:43 - copy and we'll go ahead and paste that
53:46 - in there
53:48 - after a short little wait there the
53:50 - installation is finished and so what i
53:52 - would just suggest is type in terraform
53:53 - to make sure the command works and then
53:55 - just type in terraform hyphen version
53:57 - and just see what version you are using
53:59 - as of this tutorial i'm using version
54:01 - 1.07 there's one other thing i want to
54:04 - get set up for installation here and
54:06 - that's going to be going over to the
54:09 - extensions in vs code and making sure
54:11 - that this
54:13 - extension is installed because it's
54:14 - going to give us
54:16 - a bunch of options here i don't know
54:17 - what they all are but i definitely know
54:19 - that it's going to start format and do a
54:21 - bunch of nice things for us okay so once
54:23 - you have those two things installed our
54:26 - installation step is over and what we
54:28 - can do is begin on the getting started
54:30 - section here okay
54:32 - [Music]
54:37 - all right so now that we have terraform
54:38 - installed we're ready to uh go through
54:41 - our first basic terraform tutorial and
54:43 - the idea is to try to touch a bit of
54:44 - everything going through
54:46 - a very basic workflow um and the reason
54:49 - i want to do this early on with you it's
54:51 - not important for you to know what all
54:53 - these things do and remember them
54:55 - because we're going to cover them
54:56 - multiple times throughout this course
54:57 - but just to give you kind of an
54:58 - end-to-end experience so you have a
55:00 - point of reference
55:02 - because it's really hard to learn
55:02 - terraform because you have to kind of go
55:05 - back a lot to uh remember information
55:08 - okay so
55:09 - we'll just start at the top here and
55:11 - what i want to do is enter my getting
55:12 - started folder i'm going to make a new
55:14 - file called main.tf um the way terraform
55:17 - works is you can name them files
55:19 - whatever you want but generally the
55:21 - standard practices use main tf when you
55:23 - just have a single file or the entry
55:24 - point file but i'm pretty sure the
55:26 - terraform will read anything that starts
55:28 - with tf and treat all the files as one
55:30 - single file okay so once we have our
55:33 - main tf we're going to need to add
55:36 - ourselves a provider so what i'll do is
55:38 - make my way over to my browser here and
55:40 - i want to go to the terraform registry
55:43 - so just type in terraform registry
55:45 - and
55:46 - what we'll do here is go and look at
55:49 - providers and since we're going to start
55:50 - with aws we'll click that in the top
55:52 - left corner we have this use provider
55:54 - and we can just go ahead and grab this
55:57 - code okay
55:59 - and so we'll go ahead and paste that in
56:02 - and so now what you'll see here is we
56:04 - have this terraform block that is our
56:05 - terraform settings configuration we need
56:08 - to have a provider at least a single one
56:10 - and so we're using aws here
56:13 - notice that the source is hashicorp aws
56:15 - because this provider
56:17 - is provided by hashicorp not abs
56:19 - themselves but it is an official one so
56:21 - it is in pretty good shape okay
56:24 - uh notice the version is 03.580
56:27 - um
56:28 - i don't know much about the versions in
56:30 - terms of how they matter um but i would
56:33 - just say you probably want to stay up to
56:34 - date to the latest okay
56:36 - uh so down below we have provider aws
56:39 - and this is where we're going to
56:40 - configure our additional options so this
56:42 - is where we would do like our aws
56:43 - credentials but before we do that let's
56:46 - go uh find whatever could we need to
56:48 - provision ourselves a virtual machine
56:50 - because that would probably be the
56:51 - easiest thing that we could do so what i
56:53 - want you to do is go back to the
56:54 - terraform registry and we'll click on
56:56 - the documentation because this is where
56:58 - we're going to find all our information
57:00 - for anything we want to provision okay
57:02 - so if we want to provision ec2 instance
57:04 - which is a virtual machine aws we'll
57:06 - expand that uh there and i know that
57:09 - it's called aws instance so i'm just
57:10 - going to scroll on down here
57:12 - and click on itabus instance
57:14 - and right away we have ourselves a
57:17 - a very easy example
57:19 - i'm just going to scroll down here and
57:20 - just see what else we have
57:22 - so this all looks okay but you know what
57:25 - i think that i'd rather go grab one from
57:28 - the terraform
57:29 - um tutorial here because i believe that
57:31 - they have a much nicer one here for aws
57:34 - so i'm just going to scroll on down here
57:36 - yeah this one's a lot simpler so what
57:38 - we'll do so just grab this code here
57:41 - and we'll make our way back
57:43 - okay and i think it's probably good to
57:46 - set our region so i'm going to do us
57:48 - east one
57:49 - because that's where i like to deploy
57:50 - things
57:53 - uh and for profile we can set it as
57:55 - default that's totally fine for now
57:58 - and so notice here we have a bus
58:00 - instance that's going to be the type of
58:01 - resource we want to provision which is
58:03 - an ec2 instance and then we're going to
58:04 - name it whatever you want app server my
58:06 - server i'm going to name it something
58:07 - else here
58:08 - tt micro is pretty standard this would
58:10 - be the name so i'm just say my server
58:15 - okay and then we need to get our ami i'm
58:16 - just going to clear that out
58:19 - so that's pretty much all it takes to
58:21 - set up a resource for aws but we're
58:23 - going to have to go get the ami instance
58:25 - and we're also going to need to go get
58:26 - our credentials so let's go do that next
58:29 - all right so what i've done here is i've
58:31 - logged into my aws account you are going
58:33 - to have to create your own abyss account
58:35 - and if you're looking for how to do that
58:37 - just go to the readme here and just go
58:40 - to aws and just go and create an account
58:42 - it doesn't take that long to do
58:44 - you will need a credit card that's just
58:46 - like with any cloud service provider you
58:47 - have to have a credit card to activate
58:49 - the account doesn't necessarily mean
58:50 - they're going to charge you anything but
58:52 - you know there's the possibility in the
58:53 - future that if you do use resources it's
58:55 - possible to
58:56 - uh
58:57 - have it spend okay so what i want to do
59:00 - is make my way over to
59:02 - iam
59:04 - and
59:06 - i'm going to go to users
59:08 - oops over here and i have a user here
59:11 - but what i'm going to do is go ahead and
59:12 - delete this user just because this is an
59:14 - old one for me
59:15 - i'm just going to start the process over
59:17 - and create a new one now this is
59:19 - considered a machine user because i'm
59:20 - never going to use this user to log into
59:23 - aws i'm only going to use it to generate
59:25 - out pragmatic keys so i'm typing my name
59:27 - in here andrew brown
59:29 - uh and if you wanted to you could really
59:31 - just type in terraform as well actually
59:32 - that's what i'm going to do i only want
59:34 - to give it pragmatic access so i
59:35 - generated an access id and secret
59:38 - um
59:39 - i'm going to give it admin access so
59:42 - what i've done here is i've created an
59:43 - admin rule but let's just make a new
59:45 - group we're going to call terraform
59:48 - and we're going to give admin access
59:50 - this gives you 100 access to all of aws
59:53 - uh if you are uncomfortable that you can
59:55 - try power user
59:56 - but um
59:58 - it used to be called power user anyway
60:00 - if we can't find it that way we can drop
60:02 - it down here and say um it must manage
60:04 - policies
60:06 - and there should be or there should be
60:07 - like role based ones here ah job
60:09 - functions there it is
60:12 - and so
60:13 - you know if admin access is too much you
60:14 - can do power user and that usually
60:16 - prevents people from creating users and
60:18 - groups uh so that might be more uh or
60:22 - or
60:22 - less of a problem but i just want
60:24 - everything to work for this tutorial so
60:26 - i'm gonna do what everybody does and
60:27 - we're gonna give admin access okay
60:32 - and so now we have that new group um it
60:35 - says no policies are attached not sure
60:38 - why maybe i forgot to
60:39 - attach them so i'll just go back in here
60:41 - oh no it's there okay
60:44 - not sure why i didn't say it was there
60:45 - but we'll go back and i'll just check
60:47 - box on terraform i guess it needed a
60:49 - refresher
60:51 - i will just hit next next create user
60:53 - and so now i have an access id in secret
60:56 - so this is going to vanish after i leave
60:58 - this page so i want to leave it open and
61:00 - what i'll do is go down below here i'm
61:02 - going to open up my um aws credentials
61:05 - so i'm not sure how to open this in uh
61:07 - vs code so i'm just going to type in buy
61:08 - or vim and i'm going to go to
61:11 - tilde that's your home directory forward
61:13 - slash dot aws and this is going to be in
61:16 - credentials
61:18 - okay and so here i can add that so we
61:20 - want to have a default profile so i'll
61:22 - make square braces type in default um
61:25 - and then i need to put in these keys
61:27 - so i don't remember i mean should be
61:29 - just like aws
61:31 - you know key something but i always
61:33 - forget what it is so what we'll do is
61:34 - just look it up say it was credentials
61:39 - and it should just tell us here there
61:41 - they are so this is generally what we're
61:43 - looking for
61:44 - so i'll just copy that
61:48 - and i'm going to go ahead
61:52 - and paste that in there
61:54 - and i'll just clear out these keys
61:55 - because these are not my real keys
61:57 - i also like setting the region here so
61:59 - i'm just going to set it to us east one
62:01 - that is the uh the default region for
62:04 - aws and has the most stuff well
62:06 - technically your default region is going
62:07 - to be whatever's near you but that's
62:09 - where all new services are launched so
62:10 - we're not going to run into any problems
62:11 - if we use usc 1
62:13 - and i'll go ahead and grab my key
62:17 - okay
62:19 - and we will go ahead and
62:23 - paste that in
62:26 - and i will go ahead and grab
62:29 - this secret
62:32 - okay and we'll paste that in
62:35 - and i'm just going to double check if
62:36 - that ends actually with a tilde i don't
62:38 - think it does i think i introduced that
62:39 - by accident so i'll just delete that out
62:42 - and just double check because once you
62:43 - leave this page you're not going to see
62:44 - it again so a k
62:46 - i e p m
62:49 - k one that is for me and of course don't
62:52 - ever show these to anybody um for me i
62:55 - will i will be uh regenerating these so
62:57 - uh by the time this is published you
62:59 - won't have these and you can't
63:00 - compromise my sandbox account which
63:02 - wouldn't be a big deal anyway so i'm
63:04 - just going to go ahead and save this
63:06 - file
63:07 - and
63:08 - probably be smart to have the aws cli
63:10 - installed so if you're wondering about
63:12 - that
63:13 - able cli
63:15 - i already have it installed on this
63:16 - machine but let's go take a look
63:19 - um and see how it gets installed
63:23 - oh this looks like something new
63:24 - developer preview it with shell that
63:26 - looks cool about cli install oh it's
63:28 - over here so download unzip and then run
63:30 - the linux installer so if we wanted to
63:33 - do for linux
63:35 - i'd go in here
63:37 - and i would just go ahead and start
63:38 - grabbing this stuff so
63:41 - we'll just go and curl that file
63:45 - it's probably a good idea to install the
63:48 - cli here
63:59 - after a short wait that finished there
64:00 - so we'll go grab the next line here
64:02 - which is to unzip it
64:19 - all right so after waiting a little
64:20 - while there it finally unzipped and so
64:22 - we can go ahead and run the last command
64:23 - which is pseudo
64:25 - period aws
64:26 - install
64:29 - and so that shouldn't take too long
64:34 - okay and so here it's just saying found
64:36 - preexisting cli because i already have
64:38 - it please rerun install script with the
64:40 - update flag so you would not have to do
64:42 - this but i'm going to do this because
64:45 - you know i'm just trying to get it up to
64:46 - date so that i'm on the latest while
64:48 - doing this tutorial with you
64:52 - i'll just give it a second to see if it
64:53 - executes there
64:58 - i think we'll just wait
65:00 - okay great so now it is using the latest
65:01 - so if i just type in a bus version
65:06 - i have uh 2.2.38
65:10 - what i will also do is just go ahead and
65:12 - delete this uh zip here
65:15 - that it placed in my directory and also
65:17 - this aws directory just to make sure
65:18 - that it's working if i delete it
65:22 - just assuming that it didn't
65:25 - install it in this directory here and
65:26 - it's i mean it does say it's in user
65:28 - local bin
65:30 - but just as a sanity check there okay
65:34 - so we'll type in version again
65:39 - okay great and so now what we'll do is
65:40 - just type in aws s3 list just to see if
65:43 - there's anything there
65:46 - um
65:49 - so it has an issue let's just type in
65:50 - adris i think it's ada's credentials to
65:52 - authenticate
65:55 - i haven't done it in a while so let's
65:56 - just take a look at what we can do to
65:58 - check that out
66:02 - because we did set up the credentials
66:04 - file but sometimes
66:07 - sometimes you might have to
66:09 - run a command here
66:12 - so i'm just going to find that okay i'll
66:13 - be back in a second
66:15 - all right so i didn't have to look far i
66:16 - just went to configuring to
66:17 - configuration basis it's aws configure
66:19 - not credentials
66:22 - i'm not configuring new cli's all the
66:24 - time here so what we'll do is just type
66:26 - in database configure
66:30 - and so here it has that key i still have
66:33 - my uh my im open here so
66:36 - i e so that is correct
66:39 - and then that is forward slash y
66:44 - h that looks correct
66:47 - default region is uscs
66:50 - um default output you know json sounds
66:52 - good to me
66:54 - so
66:56 - uh you know if i do it
66:59 - list that should work
67:06 - because the signature you provided does
67:08 - not match check your signing method so
67:12 - just give me a second figure that out
67:14 - okay
67:15 - all right so i just tried another
67:16 - command that i know that should just
67:17 - work and it's just saying that they're
67:19 - not valid at access credentials so if
67:21 - it's having problems with those
67:23 - then that generally means that we need
67:25 - to go and
67:26 - fix our credentials so maybe there's
67:28 - like a hidden character we pasted by
67:30 - accident or something you might not be
67:32 - having this problem but i'm just going
67:34 - to go ahead and double check so what
67:35 - i'll do is go back over here and i'm
67:38 - going to go back to my users or i am
67:43 - and we will go to users
67:45 - and we will go into terraform here
67:49 - and we will go to our security
67:50 - credentials
67:52 - i'm going to delete those ones
67:54 - you have to deactivate them first and
67:55 - then i'm going to delete it
68:01 - and we'll create new ones
68:03 - we'll give this another go
68:12 - it really likes to put that tilde in
68:13 - there
68:18 - and that uh doesn't end with a one
68:20 - so you're saying i'm getting like weird
68:21 - characters as i do this but just double
68:24 - check to make sure they are correct
68:34 - ak the start
68:37 - eu on the end okay this is default that
68:40 - looks correct to me the region looks
68:41 - fine to me
68:42 - so we'll go ahead and quit this and we
68:44 - will try this again
68:49 - great and so it works and i do have a
68:50 - few uh s3 buckets there uh prior in the
68:53 - sandbox here so
68:55 - you might not might not get anything but
68:57 - as long as you're not getting the error
68:57 - that's saying does not match signature
68:59 - or validation doesn't work so now that's
69:02 - all set up
69:04 - if we go back to main tf that means that
69:05 - this here is going to use the default
69:07 - profile so
69:08 - that's going to make it easy so the last
69:10 - thing we need to do to set up this
69:12 - virtual machine is provided an ami and
69:14 - the reason why is that an ami is a
69:16 - required field so what i want to do is
69:18 - just go back over to the documentation
69:20 - here and if you scroll on down to
69:22 - attribute references you can see
69:24 - uh what is required so
69:26 - um
69:28 - well ami should be required i guess the
69:30 - only thing that's required is the
69:31 - instance type here maybe
69:35 - uh am i in it
69:37 - yeah i am
69:40 - so
69:42 - i might have went too far down here
69:45 - oh instant type is optional
69:49 - huh
69:50 - off they're both optional okay maybe
69:52 - it's just like one or the other
69:55 - but i think that if we didn't have the
69:57 - ami there we probably run into an issue
69:59 - so let's go ahead and make our way over
70:01 - to
70:03 - ec2
70:05 - and we're going to go ahead and grab
70:07 - ourselves that ami id so we'll go and
70:10 - make sure we're in north virginia which
70:11 - is usc 1 we'll go ahead and launch a new
70:14 - instance and i want the amazon linux 2
70:17 - so i'm going to go ahead and grab this x
70:20 - 68 ami ami id
70:24 - and it's really important that you watch
70:26 - which region you're in because different
70:29 - regions these ids are going to be
70:30 - different okay
70:33 - so again go ahead there and save that
70:35 - and so technically we should be ready to
70:37 - be able to do a plan and apply to
70:39 - provision this but before we do that
70:41 - there's a couple things that we should
70:42 - do which is to try out doing format and
70:45 - validate okay
70:46 - [Music]
70:51 - before we do format and validate what i
70:52 - want to do is actually initialize this
70:54 - project so go up and create yourselves a
70:56 - new terminal if it's closed or not so i
70:59 - actually have two open here so i'll just
71:01 - close the other one
71:02 - and i'm just going to type in clear here
71:04 - and what i want to do is type in
71:06 - terraform init
71:08 - and before i do that i just want to show
71:09 - you that right now there's only main tf
71:11 - in here and so if i hit enter
71:14 - it's going to say terraform initialize
71:15 - an empty directory
71:16 - oh you know what i did it in the
71:18 - terraform associate by accident
71:20 - so we're going to go into
71:23 - getting started here and typing clear
71:26 - and type in terraform and it again
71:28 - and so what it's going to do it's going
71:30 - to pull
71:31 - whatever providers and modules are
71:33 - defined so all we have is a aws provider
71:36 - so that is what it's pulling right now
71:40 - so i'll just give that a bit of time to
71:41 - do that okay
71:45 - all right so after a short little wait
71:47 - there you'll notice that we have this
71:48 - dot terraform directory and we also have
71:50 - this terraform
71:52 - lock hcl so this is a dependency lock
71:54 - file it's going to tell us
71:56 - uh what version of modules or providers
71:59 - that we are using
72:01 - um so because in the main tf you know we
72:04 - have 3.580 so that's going to match
72:06 - exactly that but if we said something
72:08 - like
72:09 - greater than or equals to this could be
72:11 - a different version right so whatever
72:12 - version is set here it's going to make
72:14 - sure that it stays with that version as
72:16 - long as we're not changing it okay
72:18 - so there's that if we open up the
72:20 - terraform file this has information
72:23 - about our provider so the provider is
72:24 - actually downloaded here and this is a
72:26 - binary file so there's not there's not
72:28 - anything to look at when we open it up
72:29 - okay
72:31 - so now that init is done what i want to
72:34 - do is go ahead and show you format and
72:36 - validate okay
72:38 - all right let's take a look here at
72:39 - format and validate so format is just a
72:42 - way of making the files
72:45 - syntax consistent and this is going to
72:47 - really help you
72:49 - reduce arguments within your team
72:50 - because there's only gonna be one way to
72:52 - write a terraform file and if you don't
72:54 - write it the the way to the standard
72:56 - format is going to correct it or
72:57 - complain about it okay so one thing we
72:59 - can do is change the indentation level
73:01 - here uh and what i'll do is run and run
73:03 - terraform format
73:06 - and notice that it fixed the indentation
73:08 - so that's all there really is to it it's
73:10 - just dealing with the uh styling of the
73:12 - actual file
73:14 - um i'm not sure if it would do anything
73:15 - for double lines let's see if that would
73:17 - take it out i'm not sure
73:20 - it doesn't so you know it's pretty much
73:21 - just indentation and a few other things
73:23 - besides indentation i don't know what
73:25 - else it would do
73:26 - then you have terraform validate and
73:28 - this is really useful to make sure that
73:29 - you have particular fields required so
73:31 - i'm going to go ahead and comment these
73:32 - out i'm going to type in terraform
73:35 - validate
73:37 - and it's going to tell me if my file is
73:38 - valid
73:40 - and it's saying here missing required so
73:43 - it wants an aws instance to have a
73:48 - instance type or launch template right
73:49 - so remember it said it was optional but
73:51 - one or the other is required so if we
73:54 - add this back in
73:56 - okay and type in validate we'll see if
73:58 - it works
74:01 - and now it's saying if you specify an
74:03 - instance type you have to also have an
74:04 - ami so we'll take that out there
74:07 - and type in validate
74:11 - okay
74:12 - another thing i want to show you is
74:13 - let's imagine that we just specified an
74:15 - ami that doesn't exist something like uh
74:18 - this doesn't exist
74:21 - i just want to show you what validate
74:22 - will do and what it will not do
74:25 - so we type in terraform validate
74:27 - that says it's valid because it's
74:28 - checking you know do you have the
74:30 - required attributes
74:32 - and is it the right type so this is a
74:34 - string
74:36 - but it doesn't know the contents of that
74:38 - string whether this is actually a valid
74:39 - one and doesn't match up to usc's one
74:42 - so just consider that validate doesn't
74:44 - take care of everything for you okay
74:46 - so yeah that's all there is to
74:49 - format and validate and so we'll move on
74:51 - to actually setting up a plan okay
74:56 - [Music]
74:57 - all right so now what i want you to do
74:59 - is just give yourself a lot of room in
75:00 - your terminal and type in terraform plan
75:03 - and what this is going to do it's going
75:04 - to generate a speculative plan of what
75:06 - it would deploy
75:08 - and so if we just scroll the top here
75:11 - uh what you're going to notice here is
75:12 - going to say this is what it's going to
75:13 - create so see the green plus sign and
75:15 - it's saying we're going to create a new
75:17 - aws instance or resource here and this
75:20 - is all the configurations that we're
75:22 - adding to it and down below it's going
75:24 - to say one added zero change zero
75:26 - destroy
75:27 - and so it's speculative in the sense
75:29 - that it's not generating out a a plan
75:32 - you can actually generate the plan to be
75:34 - used by a terraform apply so notice it
75:36 - says hyphen out option to save this plan
75:40 - so
75:41 - you know we don't need to generally save
75:43 - out our plans but that is an option if
75:46 - we want to do that for some pragmatic
75:47 - use
75:48 - but now that plan has been
75:51 - shown here and we're happy with it what
75:52 - we can do is go ahead and type in terror
75:54 - from apply and it's going to do the
75:55 - exact same thing it's going to show us a
75:57 - speculative plan
75:58 - um
76:00 - exactly the same thing so it's running
76:02 - basically terraform plan and then we're
76:04 - going to review it and if we're happy
76:06 - with it we're going to write the word
76:07 - yes okay and so what that's going to do
76:10 - it's going to go ahead and start
76:11 - creating uh some uh some adress
76:15 - infrastructure there and in particular
76:16 - it's just a single ableist instance so
76:20 - if we make our way over to aws and we go
76:22 - to ec2
76:24 - okay i can just close these other tabs
76:26 - here
76:29 - uh you'll notice that we have the server
76:31 - and it's starting to spin up but if
76:32 - you're familiar with aws you're probably
76:34 - also familiar with cloud formation
76:35 - cloudformation is what uh aws uses for
76:38 - infrastructure as code it's their
76:40 - native tooling for it i just want to
76:42 - show you that there are no stacks like
76:44 - these are for aurora serverless i just
76:46 - couldn't delete them out but notice that
76:48 - there is no underlying stack the
76:50 - terraform is setting up so terraform is
76:52 - responsible for managing the state and
76:54 - uh it's not using cloud formation
76:55 - underneath just so you're aware if we
76:57 - make our way back here it says that it
76:59 - is uh completed provisioning okay and so
77:02 - what we'll do is make our way over here
77:05 - and give it a refresh and notice that uh
77:07 - even though it says that it's
77:10 - complete it technically isn't because
77:11 - the status checks aren't done
77:13 - so
77:14 - if you use cloud formation it would not
77:16 - be considered done until we had a status
77:18 - check one and two um i'm sure there's
77:20 - some way to
77:22 - check that with terraform to consider it
77:24 - actually complete i'm not really sure at
77:26 - this point in time how to do that but
77:28 - i'm just pointing that out okay so we'll
77:30 - just wait here for this to complete to
77:32 - move on to the next step okay
77:34 - [Music]
77:38 - all right so after a long wait there our
77:40 - two statistics are complete so what i
77:41 - want to show you is how we would go and
77:44 - update that infrastructure okay because
77:46 - uh you know in the course we say that um
77:49 - infrastructure code is
77:50 - independent meaning that if you
77:53 - define something
77:54 - you know like a resource and you run
77:56 - this again it's not going to create an
77:57 - additional resource it's just going to
77:59 - only have what you define which is you
78:01 - expect there to be this single resource
78:03 - here so what i'm going to do is just
78:05 - change the c2 micro to a t2 nano
78:08 - and then we'll go down below and type in
78:10 - terraform apply
78:16 - and we're just waiting for it to refresh
78:17 - the state
78:19 - and by the way any time you run
78:21 - terraform plan or terraform apply it
78:23 - actually runs validate every single time
78:25 - so you don't have to run terraform
78:27 - validate you can just do it as part of
78:29 - your terraform plan or if you're doing
78:31 - tearful reply you'll it'll be it'll also
78:33 - run there as well okay so notice this
78:35 - time we get this little uh tilde
78:37 - squiggly here and it's showing what it's
78:38 - going to change and so this is doing an
78:41 - update in place or um yep and so that
78:45 - means that
78:46 - yeah update in place and so that means
78:47 - that it's not going to destroy and
78:49 - recreate that instance it's just going
78:50 - to keep it in place and modify it so
78:52 - we'll go ahead and type in yes
78:56 - and we'll let that perform there and so
78:57 - if we just make our way back over here
79:00 - it should show us that we have a t2
79:01 - micro and so if i refresh here
79:05 - and we take a look here shouldn't take
79:08 - too long
79:15 - and it is stopping the instance okay but
79:17 - it's not destroying it okay
79:19 - all right so after a short little wait
79:21 - there it's now a t2 nano coming back
79:23 - over here you can see that it's still a
79:25 - lapsing time it's checking to make sure
79:27 - that it's possible probably because it's
79:28 - in the initializing state
79:31 - and uh yeah there we go so now it is
79:33 - complete but you know like just because
79:36 - it says update in place doesn't mean
79:37 - that your instance or your service is
79:40 - not going to be interrupted uh so that's
79:42 - another consideration uh that updating
79:44 - place does not mean that there's no
79:45 - interruption of service okay
79:49 - um yep
79:50 - [Music]
79:54 - all right so um we were able to change
79:57 - the parameter of t2 nano but let's
79:58 - imagine that we wanted to make that a
80:00 - little bit more configurable so that we
80:01 - could provide a instance type uh
80:05 - pragmatically via a variable uh so so
80:07 - we'll do next so what i want you to do
80:09 - is make your way back over here to your
80:11 - main.tf
80:12 - and what we're going to do is define
80:15 - ourselves a new variable
80:16 - uh so it's like variable t2
80:19 - oops sorry instance type
80:22 - and just to look it up in the
80:23 - documentation we'll just type in
80:24 - variable terraform
80:27 - i'm just trying to show you where you
80:28 - can find this stuff very easily so if we
80:30 - scroll on down notice here that we need
80:32 - to define a type so this is just going
80:34 - to be a string so we'll go ahead and
80:36 - grab that
80:38 - okay
80:40 - and we can just make that a type string
80:44 - and then when we want to reference this
80:46 - what we do is just type in var
80:48 - and then the name of the variable name
80:50 - which is instance type
80:52 - and so instead of setting it um you know
80:56 - through here what we can do is we can
80:58 - create like a tfrs files
81:00 - or we can provide it as a a flag so what
81:04 - i'll do first i'll just do a plan to
81:06 - just show you how we can do it a few
81:08 - different ways but i'm going to type in
81:09 - var and i'm going to put the name of the
81:13 - the variable so it's like instance type
81:16 - equals
81:18 - and i think i do double quotations here
81:20 - t2 micro
81:27 - and we'll see what we get as a plan here
81:32 - okay so notice that it's using the t2
81:33 - micro i could do this at like with a
81:35 - medium as well here
81:46 - okay so
81:47 - that's just one way of changing it
81:48 - another thing we can do is create
81:50 - ourselves a terraform.tf vars file that
81:53 - allows us to set a bunch of variables so
81:54 - i'm going to go ahead and do that
81:56 - so what we'll do is just create a new
81:57 - file here until type in terraform dot tf
82:01 - vars
82:03 - and we'll say instance type
82:06 - equals t2
82:08 - large again i'm not going to execute
82:09 - this i just want to show you
82:12 - in the plan that's going to show up
82:22 - okay and see that says a t2 large so i'm
82:24 - going to go back here and just change
82:25 - this to
82:26 - a t2
82:30 - t2 micro because that's what's on the
82:32 - free tier for aws tt nano even though
82:34 - it's smaller and more inexpensive it's
82:36 - not
82:37 - so if you are in the free tier i want to
82:38 - keep you in that so you save any money
82:40 - or have no spend uh notice over here on
82:42 - the left hand side that we have this tf
82:44 - state file this has been generated out
82:46 - and notice that it's version four
82:48 - because every time we've ran this it has
82:51 - a new iteration okay
82:53 - and this is basically defining the
82:55 - current state of our
82:57 - infrastructure so if you go through here
82:59 - notice that it says type aws instance my
83:01 - server what provider it's using what its
83:04 - schema version is the ami here the
83:07 - reference to the ami and all the
83:09 - properties and these are all the
83:10 - properties we basically saw here
83:13 - uh like if we scroll up notice all these
83:15 - things here they're pretty much all
83:16 - defined in here exactly how it's going
83:18 - to be defined
83:19 - you aren't ever supposed to
83:21 - manually modify this file
83:23 - but it is something visible you can look
83:25 - at and when we do deploy it is going to
83:28 - show us the a backup here
83:30 - so if we
83:32 - if we ever happen to lose our tf state
83:34 - file or we want to go uh
83:35 - we can always grab that backup file okay
83:39 - um but uh yeah so what i want to do here
83:42 - is now that i have that tfr is in place
83:45 - i'm just going to go ahead and actually
83:47 - run apply and
83:49 - actually i'm going to run plan first
83:51 - sorry
83:53 - so let's see this is t2 micro
83:59 - okay it says t2 micro and what we can do
84:01 - is just do terraform apply and this time
84:03 - we're just going to do hyphen auto
84:04 - approve you probably really want to do
84:06 - this but if you just want to skip that
84:08 - yes process you're like you know it's
84:10 - going to be fine you can use the auto
84:12 - approved flag to do that okay
84:16 - so serious is the tt micro
84:19 - and it's just starting to modify it okay
84:21 - so uh now that we've done that i guess
84:23 - we'll take a look at locals here but
84:25 - we'll just let this finish updating and
84:27 - then we'll move on to that okay
84:31 - [Music]
84:35 - all right so now let's take a look at
84:36 - local values which seems very similar
84:39 - locals which seems very similar to
84:41 - variables but it's slightly different so
84:42 - what i'm going to do actually it's right
84:44 - here in the documentation so we'll go
84:45 - down to local values
84:47 - and this is kind of a way to dry up your
84:50 - code and so if i just go grab this block
84:52 - here
84:53 - it's different from variables because
84:54 - you know they generally are hard coded
84:57 - but i go to here and say locals and then
84:59 - if i had like a generic name i could say
85:01 - name
85:02 - and i could just say
85:04 - you know andrew or
85:06 - yeah andrew is fine
85:09 - just say project name
85:12 - and so if i wanted to use that somewhere
85:14 - else if it says my server i could uh use
85:17 - enter string interpolation
85:20 - i believe it's this
85:21 - yep
85:23 - and if we have locals it's just going to
85:25 - be local dot project underscore name
85:29 - okay and so now if i just do a terraform
85:31 - plan
85:35 - oops
85:37 - i have to type it right in
85:42 - uh whoops let's do uh terraform validate
85:45 - i think i'm using the syntax incorrectly
85:49 - local is not a valid template control
85:51 - keyword
85:54 - um it should be because if we go back
85:56 - over here
85:58 - yeah see how it's referencing is local
85:59 - and that's exactly what i'm doing it's
86:01 - just that i'm using interpolation and i
86:03 - might be using it incorrectly so what
86:04 - we'll do is make our way over to
86:07 - template strings terraform
86:12 - and if we go down here
86:15 - we have interpolation so i want the one
86:18 - that is for
86:20 - literals oh yeah this is for directives
86:22 - and so we want interpolation so it's a
86:24 - dollar sign just to show you like i've
86:25 - done this whole course i've passed the
86:27 - exam
86:28 - i've used terraform and i i can't
86:30 - remember so it's not a big deal if you
86:31 - have to look things up okay so type in
86:33 - tariff or validate here to see if that
86:35 - is correct
86:37 - good and so if we do terraform plan
86:46 - okay
86:47 - now you'll see that our tag would change
86:49 - over to that so that's basically what
86:50 - locals are it's just like a way of
86:53 - having some
86:55 - local variables that are in line with
86:57 - your code okay
86:58 - [Music]
87:02 - let's take a look at outputs so i'm
87:04 - going to go back to terraform here and i
87:06 - think it's actually right here but yeah
87:08 - variables and outputs and we'll go
87:10 - output values and this is just a way to
87:12 - get an outputted value and this is
87:14 - actually a really good example where we
87:15 - might want the private id or the public
87:17 - id so we'll scroll on down below here
87:20 - and this has its own section so we'll
87:22 - paste that there and this is private id
87:24 - and that is fine but i might want to get
87:26 - something a little bit more fun
87:28 - so we'll go here and just kind of see
87:30 - what we can get
87:32 - so we saw private id ip
87:37 - um
87:40 - argument reference right so we have
87:41 - private id maybe we want public id here
87:46 - public id
87:47 - ip oops
87:52 - yeah so let's give that a go instead i
87:53 - think i'd prefer to get the public ip
87:55 - because this is it is a public-facing
87:56 - server
87:58 - okay
88:00 - and notice that this is not the name
88:02 - right name we're gonna have to call this
88:03 - my server right
88:05 - and so outputs is gonna allow us to uh
88:07 - see those values so what we'll do
88:10 - uh i'm gonna run terraform plan and see
88:12 - if there is any required change
88:15 - i'm not sure if we have to deploy to get
88:17 - that output working so we'll just run
88:18 - here from plan first
88:20 - and notice it says changes to outputs
88:22 - and then it adds this as a plus so if i
88:24 - was to type in terraform
88:27 - outputs
88:30 - there is commands for this
88:33 - i don't seem to remember off the top of
88:35 - my head so we'll just look at it up here
88:36 - really quickly output
88:42 - uh here it is
88:44 - so
88:45 - oh it's terraform output okay sorry it's
88:47 - not the plural so we'll go here
88:50 - and type in terraform output i just want
88:53 - to see if it'll actually output it
88:54 - without us doing it so it says warning
88:55 - no outputs found so what we'll have to
88:58 - do so the state file either has no
88:59 - outputs defined or all the defined
89:01 - outputs are empty please define and open
89:02 - your configuration with output
89:04 - or run terraform refresh to become
89:06 - available so we don't need to run
89:08 - terraform apply i don't think we
89:10 - probably just run terraform refresh so
89:12 - let's give that a go and see what
89:14 - happens whoops
89:16 - might be a good example of
89:19 - using terraform refresh terraform
89:21 - refresh is a command that is going to
89:23 - make the state file match whatever the
89:26 - the remote instance is so we already
89:27 - have an instance up there and so that's
89:29 - what it did it's probably a better
89:30 - example to use output so now if we type
89:32 - in terraform output
89:34 - we should be able to get that value
89:35 - there
89:39 - only if you type it right though
89:42 - okay so there it is and if we really
89:43 - want it to be in particular we could say
89:45 - instance
89:47 - ip address
89:49 - i really don't like the name of that i
89:50 - might just change this here so we'll
89:52 - just say um
89:53 - public ip
89:56 - okay i'm not sure if we can just change
89:58 - on the fly there let's see what happens
89:59 - if we do that
90:01 - yeah see it's still the old one so in
90:03 - that case i'll just type in terraform
90:04 - refresh and see what happens
90:13 - okay and notice the old one is still
90:14 - there so
90:15 - i think in that case we'd have to do
90:17 - because this doesn't exist in our output
90:19 - files anymore so i think it because
90:21 - refresh just adds i don't think it's
90:23 - going to remove anything
90:25 - uh well actually it would if the server
90:26 - was gone it would do that so but anyway
90:28 - if we type in terraform outputs we get
90:32 - do we get both of them
90:34 - we do and so in that case i think we
90:35 - would want to do a terraform plan
90:39 - and see if there's any differences here
90:45 - yeah notice it's going to remove it
90:46 - there and so then that's how we'd have
90:47 - to get rid of it so we just say
90:48 - terraform apply
90:57 - and we'll just say yes
90:59 - and that's our opportunity to update our
91:01 - tags and also get rid of this output
91:05 - so you can see refresh doesn't work in
91:07 - all cases
91:09 - and so now if we type in terraform
91:11 - output
91:14 - you should get a list there
91:16 - i just want to say like public id just
91:18 - to get the exact one there
91:21 - uh ip
91:25 - okay cool so that that works great so
91:26 - that's outputs
91:28 - [Music]
91:32 - so we've seen providers let's go take a
91:34 - look at modules so what i want you to do
91:36 - is go back to the internet here
91:39 - and i want to
91:41 - go back to the terraform registry
91:43 - in this case i want to go grab some
91:44 - modules so providers
91:46 - uh you know providers are basically
91:48 - one-to-one mappings
91:50 - to the underlining api so like anything
91:53 - in cloud formation is pretty much mapped
91:55 - up here and modules are
91:57 - basically um they're like conveniences
92:01 - because they allow you to
92:03 - configure a bunch of resources using a
92:06 - more uh short form dsl okay so like if
92:09 - we open up here the vpc this is a very
92:12 - easy way for us to define an entire vpc
92:14 - without having to create like each of
92:16 - these resources individually so we had
92:18 - to do this by hand to be a lot of work
92:20 - so we'll do is go ahead and copy this
92:24 - and we're just going to expand this a
92:26 - little bit here
92:29 - that's a bit hard because my fonts are
92:30 - really large but you know of course
92:32 - you'd probably be using a smaller font
92:34 - and so what i want you to notice that it
92:36 - starts with a module block and we're
92:37 - providing it a source so terraform aws
92:40 - modules vpc aws
92:42 - and that's how it knows to map over to
92:44 - this one over here on the terraform
92:46 - registry
92:47 - and this is just defining a new vpc as
92:49 - long as we don't have any conflicts with
92:51 - this block it should deploy no problem
92:53 - so i'm going to go ahead and give that a
92:55 - go so we'll just type in terraform apply
92:57 - or plan
92:59 - and actually before we even do a
93:01 - terraform planner apply notice that the
93:03 - module isn't installed so this is where
93:04 - we'd have to type our terraform in it
93:06 - and that's going to go ahead and grab
93:08 - that module
93:14 - great and so once we have that we can
93:15 - now do our terraform plan
93:21 - and we'll give it a moment here
93:24 - and notice that it's going to generate a
93:26 - lot of stuff out that's fine so we will
93:28 - say terraform apply i just want to auto
93:31 - approve that
93:33 - save myself some
93:34 - trouble that's going to go set us us up
93:37 - a um a module i want to point out that
93:40 - actually uh when you're writing files
93:42 - out here and we're going to find this
93:43 - later in the course that even
93:45 - even when you write a single file like
93:47 - main tf you are creating yourself a
93:49 - terraform module because everything is
93:50 - based off of modules
93:52 - so you'll see that later on in the
93:54 - course but we'll just wait here until
93:56 - this is uh finished here okay
94:00 - so after a short little wait there i
94:01 - actually ran into an issue um here so i
94:04 - probably
94:06 - i was a bit too
94:07 - too quick to just copy this over because
94:10 - it is having some issues i think it's
94:13 - because our provider is in us east one
94:16 - and we're trying to specify something in
94:17 - u.s west so that's probably our problem
94:20 - so or this is actually europe which is
94:22 - no surprise because anton who made this
94:25 - is actually over in europe so it makes
94:27 - sense that he might set it to that so
94:29 - i'm going to do u.s east uh here
94:33 - right and so that's something that you
94:34 - have to understand that if you have a
94:36 - provider it's going to be mapped to that
94:37 - one actually if we wanted to keep it in
94:40 - uh er eu
94:43 - west this is a great opportunity to kind
94:44 - of show you how to make another provider
94:46 - as a reference so i'm just going to go
94:48 - here and paste this in and we'll change
94:50 - this to eu west
94:52 - was it one or two
94:54 - it's one
94:55 - and so in here what we can do is set
94:57 - ourselves up an alias
95:00 - okay
95:02 - and we could just say like
95:05 - this is called uh you
95:08 - uh
95:09 - we'll just say this this is eu
95:12 - or a to you
95:16 - and i actually might not remember how to
95:18 - do this exactly so i'm going to just
95:19 - type in
95:20 - terraform
95:22 - resource alias because that's what this
95:24 - is called
95:26 - it's a meta argument
95:29 - google europe
95:31 - okay so i just wanted to know if i had
95:32 - to type in google or something like that
95:33 - in front of it so if we make our way
95:35 - back over here
95:37 - and we go back to the top here we don't
95:39 - need to put the word adabas that's just
95:40 - redundant so we'll just say eu
95:42 - and if we go down to our
95:44 - vpc here and type in provider
95:48 - we'll say
95:49 - aws eu
95:52 - okay and so that should allow us to have
95:53 - both i'm not sure if we have to run
95:56 - terraforming it so we'll run tear from
95:57 - plan first
95:58 - it might say hey you got to run
95:59 - terraform in it maybe
96:02 - an argument provider is not expected
96:03 - here let's just make our way back over
96:05 - here oh because that's the within the
96:07 - resource and i put it in the module
96:09 - block so we'll just
96:10 - cut that out here
96:13 - and
96:14 - it doesn't uh
96:16 - doesn't have that so actually i wonder
96:18 - how you'd set a provider for module
96:20 - maybe you don't i'll be back here in a
96:21 - second okay
96:22 - all right so i just pulled up the
96:23 - documentation here and here's a module
96:25 - and it has this little provider's block
96:27 - so let's give that a go and see if that
96:28 - fixes their problem here
96:30 - so i'll just paste this in providers aws
96:34 - and we'll say eu
96:37 - okay and see if that works
96:44 - you know again it's not hard like if you
96:46 - get stuck you pretty much google
96:47 - anything
96:48 - and so that did not error out and so if
96:50 - i was to do a terraform apply auto
96:52 - approve
96:55 - that should work
96:58 - and so i'll see you back here in a bit
97:01 - okay
97:06 - all right so i have one little uh error
97:08 - here i actually typed in uh eu as uh
97:11 - instead of us there and so again my
97:14 - point is is that terraform validates not
97:16 - going to catch these things you're only
97:17 - going to find these uh when you actually
97:19 - run them so we'll run this one more time
97:21 - and i think it's going to work and i'll
97:22 - see you back here
97:24 - when this module is finished deploying
97:26 - okay
97:28 - all right so after waiting there it
97:30 - looks like our vpc is ready so if we
97:32 - make our way over to aws go to vpcs
97:36 - of course this is in the european region
97:38 - there so what we'll have to do is just
97:40 - switch over there in a moment but i just
97:42 - want to show you that it's not here
97:44 - but if we go over
97:47 - and find eu west
97:50 - one which is apparently ireland
97:57 - uh there it is so there's my vpc the one
97:59 - we created there okay
98:02 - so yeah
98:03 - what we'll do next is we'll just kind of
98:05 - break up these files and make things a
98:06 - little bit easier to work with okay
98:08 - [Music]
98:12 - all right so let's make it a little bit
98:14 - easier to work with our terraform file
98:16 - here and what's really nice is that you
98:18 - know we have this main tf but anything
98:20 - that's named.tf is going to be treated
98:21 - as a single file and so it's pretty
98:23 - common to break these up into individual
98:25 - files here so what i'm going to do is
98:27 - call this one
98:28 - providers dot tf
98:31 - and i found out that you can only have
98:33 - one terraform block and one required
98:35 - provider block so if you're thinking
98:36 - about making like uh one for each
98:39 - provider and then the resources within
98:40 - it that's just not possible
98:42 - so we'll name that there
98:44 - um
98:46 - and i guess we'll bring these over as
98:48 - well
98:49 - probably a good idea to do that
98:53 - okay and we have a variable pretty
98:55 - common to make a variables.tf
98:58 - so we'll say
98:59 - [Music]
99:01 - variables.tf here
99:04 - and we'll grab our single
99:06 - one there
99:10 - okay and uh
99:13 - so if we wanted to oh yeah probably in
99:15 - outputs would be good too so we'll say a
99:17 - new file here we'll say outputs.tf
99:24 - and i think when we get to
99:25 - module development i'm pretty sure this
99:27 - is like the standard if i just it's in
99:28 - my slides here we'll say like
99:30 - uh
99:31 - modules
99:34 - if i go over to that there for a second
99:38 - yeah it's in this section here
99:40 - but yeah when we get over to this yeah
99:42 - it's pretty common to have an outputs a
99:44 - variables a main okay
99:50 - and so we'll put our output there
99:54 - you know the rest is up to you so we can
99:55 - leave this in maine or we could try and
99:58 - take this and put this into
100:00 - one called aws resources
100:03 - maybe that's what i'll do i'll just
100:04 - rename this to aws
100:07 - okay
100:09 - and maybe we'll just keep a main around
100:12 - and i'm not sure if
100:14 - locals is i mean it treats it as one
100:16 - file so it must work that way but i'm
100:18 - just go ahead and paste that in there
100:20 - i was thinking maybe it's like bound to
100:22 - the file but it's probably just bound to
100:23 - the module
100:24 - and so i just want to make sure that
100:26 - this all works i'm going to do terraform
100:28 - plan here
100:35 - and see what happens here i'm just
100:36 - seeing if there's gonna be any kind of
100:37 - errors
100:39 - or just in general what are we gonna see
100:46 - uh no changes so it read all the files
100:48 - no problem so this is all good to go but
100:51 - yeah you can break it up however you
100:53 - like it's it's that easy okay
100:57 - [Music]
101:01 - okay so so far uh you know we said all
101:03 - this infrastructure but what if we
101:04 - wanted to go ahead and destroy it so
101:06 - what we could do
101:07 - is type in terraform
101:09 - uh apply and i think it's destroy
101:13 - i can't remember the flag off the top of
101:15 - my head so let's go take a look here
101:17 - just type in terraform apply
101:22 - and go down to our flags
101:26 - and it is called
101:29 - should be in here destroy
101:32 - oh it's not showing it i know that this
101:34 - flag exists so we'll go over here i just
101:36 - want to show you uh how that flag works
101:41 - maybe it's like terraform destroy
101:44 - probably better example here
101:49 - well um
101:50 - i know that there's a another flag that
101:52 - we can write here it's like destroy
101:55 - delete
101:58 - well that's fine because you're not
102:00 - really ever going to be doing it that
102:01 - way you're always going to be writing
102:02 - terraform destroy so that's what we're
102:03 - going to do
102:04 - you know what maybe it's under the plan
102:06 - that i'm thinking of terraform plan
102:10 - because maybe you make it in the plan
102:11 - and then it gets moved along yeah
102:12 - destroy mode here it is so i want you to
102:15 - understand that um
102:18 - you know that's how it would set it so
102:20 - active destroy mode using hyphen destroy
102:22 - so
102:23 - i think when you use
102:25 - plan or apply we could have done hyphen
102:26 - destroy and that is equivalent to this
102:29 - destroy command so i'll clear it out i'm
102:31 - just going to try that there destroy
102:36 - because i just want to show you that
102:37 - that's an alias of destroy okay
102:41 - or of apply
102:54 - and yep so that would destroy all of our
102:56 - resources
102:59 - and so
103:00 - i don't think it's really essential to
103:02 - show you that but i just wanted to show
103:03 - you how you'd run the terraform destroy
103:05 - command and that would tear down all
103:06 - your infrastructure
103:08 - okay
103:08 - but i want to keep it up because we're
103:10 - going to move this infrastructure over
103:12 - to terraform cloud and then we'll do a
103:13 - destroy soon enough okay
103:15 - [Music]
103:20 - all right so now that we have
103:21 - successfully created a resource
103:23 - organized their files learned the basics
103:25 - of
103:26 - getting started up to you know this
103:27 - point the next thing is to
103:30 - create a terraform cloud workspace and
103:32 - migrate our local backend to our remote
103:34 - workspace and the reason we want to do
103:36 - this is because we have this terraform
103:38 - dot tf state file and this is what
103:40 - contains
103:41 - all of our information about the state
103:43 - of our infrastructure and if we want to
103:45 - collaborate with other people we need to
103:46 - have it in shared space
103:48 - and so terraform cloud is one of the
103:50 - options and i would say the best option
103:51 - out there and so i want to show you how
103:53 - to use terraform cloud which by the way
103:55 - is free um and so before we do that i
103:58 - just want to show you uh uh what
104:00 - workspace we're in so if you type in
104:02 - terraform
104:04 - workspace list what you're going to see
104:06 - is a single workspace called default so
104:09 - this is a special workspace which every
104:11 - project comes with a default workspace
104:14 - and you cannot delete it so here you
104:16 - could create multiple workspaces like
104:18 - development production to have different
104:20 - variables for your infrastructure if
104:22 - you're deploying to different um
104:24 - uh different environments but for the
104:27 - purpose of getting started we're just
104:28 - going to work with the default but the
104:29 - thing is right now these day files are
104:31 - here locally and so what we need to do
104:33 - is define a back end and so far uh the
104:36 - back end that we're using is the local
104:38 - back end and that would be defined we
104:40 - had put it in our um providers probably
104:43 - been smarter to just call this like
104:44 - terraform this is the main you know this
104:46 - is what i'm going to do i'm going to
104:47 - take this here
104:48 - cut this and i'm going to put this in
104:50 - main because i think it makes more sense
104:52 - over here
104:53 - there's not like a true science to
104:55 - putting things places you're just going
104:57 - to have to feel them out so in this
104:59 - terraform settings block this is where
105:00 - we would specify our back end
105:03 - okay and so right now we are using local
105:06 - whether you specified or not you are
105:08 - okay
105:08 - and so we want to swap that out to
105:10 - remote which will use terraform cloud so
105:12 - what i will do
105:14 - is we'll just say terraform local
105:16 - migrate
105:18 - uh because they have a nice tutorial
105:20 - here for this
105:22 - but i just want the code from it so this
105:24 - is
105:25 - pretty close to what we want
105:27 - this is for multiple workspaces we're
105:29 - just doing local
105:30 - so this is what i want okay so what i'm
105:32 - going to do whoops
105:34 - is just bring this back on over
105:38 - and i just want to copy this interior
105:40 - part
105:41 - and it doesn't matter if you put it
105:42 - above or below providers but we'll have
105:44 - a back end we're going to specify the
105:46 - hostname we're going to need to set our
105:47 - organization and we're going to need to
105:49 - set our workspace name
105:51 - so now what we're going to do
105:52 - is make our way over to
105:55 - terraform dot io
105:58 - and what i want you to do is create
106:00 - yourself a new account it does not
106:02 - require
106:04 - a credit card or anything it's very easy
106:05 - to set up you just have to confirm your
106:06 - email and then once you have done that
106:08 - go ahead and sign in
106:12 - and what you'll need to do is create
106:14 - yourself an organization it'll probably
106:15 - prompt you right away so it's very easy
106:17 - just go here and give your organization
106:19 - name and provide an email it's pretty
106:21 - much those two options and once you have
106:22 - your organization you can go ahead and
106:24 - start creating workspaces and so i'm
106:26 - going to create a new workspace here and
106:28 - we're going to be presented with three
106:29 - options version control workflow cli
106:31 - driven workflow api driven workflow
106:33 - version control workflow is let's say
106:35 - every time we push to commit to our
106:37 - repository then it would trigger
106:39 - to do a terraform apply to execute the
106:41 - code but we don't want to do that we
106:42 - just want to use the cli which is what
106:44 - we've been doing all along so here i'm
106:46 - just going to say terraform
106:48 - um
106:49 - terraform example
106:51 - well maybe i'll just say getting started
106:52 - here actually getting started
106:55 - and we will go ahead and create this
106:57 - workspace
106:59 - and now that we have the name of the
107:00 - workspace
107:01 - and the organization so we'll put those
107:04 - in here so my workspace is called
107:06 - getting started
107:08 - and i just want to make sure i have the
107:10 - right name for this
107:12 - organization here
107:15 - i think it just would be called whatever
107:17 - it is so for mine it looks like it's
107:19 - just called exam pro i think you'd match
107:21 - it whatever's up here or okay
107:23 - it doesn't work we'll find out in a
107:24 - second though
107:26 - so we will paste that in there
107:30 - and so all we need to do to move from
107:32 - our local to a remote is type in
107:35 - terraform init
107:37 - to migrate it over
107:40 - and actually we probably need to log in
107:42 - first so before we do that well i can't
107:43 - stop it
107:44 - that's fine
107:47 - um so i'm just going to say no i don't
107:49 - want to migrate just yet so i'm going to
107:50 - type in terraform login first
107:53 - because we want to authenticate with
107:54 - terraform cloud
107:56 - so i've already done this previously so
107:58 - it already has a file saved over here
108:01 - okay but what i'm going to do i'm just
108:03 - going to delete mine you don't have to
108:04 - do this i'm just going to delete mine so
108:05 - you you can see a similar experience
108:07 - okay so i do terraform login
108:10 - and it's going to say if successful
108:11 - terraform will store in plain text in
108:13 - this area do you want to do this say yes
108:16 - and all this is doing is generating out
108:18 - an api token for a user so it's going
108:21 - over here and
108:25 - choose the description to help identify
108:26 - the token later and this is just for
108:29 - [Music]
108:31 - pro
108:32 - let's just say like terraform associate
108:33 - maybe
108:34 - because we're actually creating the
108:35 - token
108:38 - okay so your token
108:40 - we can copy it out
108:42 - um click on the token to copy and paste
108:44 - it into your terraform login prompt to
108:46 - continue so i'll hit copy
108:49 - and we will go back to terraform here
108:50 - and then we will paste in the value i
108:52 - know you couldn't see it but i
108:53 - definitely pasted it in and so it's now
108:56 - been pasted in there
108:58 - i'm going to go back here and hit done
109:00 - and i'm going to go ahead and
109:03 - delete my old tokens this is the one i
109:05 - made a month ago so i'll go ahead and
109:06 - delete that
109:08 - and again you don't want to share these
109:09 - tokens with anybody just make sure
109:11 - um you know you keep those secret
109:13 - because then they'll have access to your
109:14 - terraform account
109:16 - so now that we have that ready to go
109:19 - it's actually kind of cool to have a
109:20 - little getting started project here i
109:21 - didn't even notice about it
109:23 - but uh so now what we can do is type in
109:25 - terraformingnet
109:30 - because now that we have a local api key
109:33 - and it's just going to say hey you have
109:35 - a pre-existing state that was found
109:36 - while migrating the previous local
109:37 - backend to the newly configured remote
109:39 - no existing state was found in the newly
109:41 - configured remote backend do you want to
109:43 - copy the state to the remote backend
109:45 - before we do that i just want to go over
109:47 - to our workspace and click into it just
109:48 - to show you that we have nothing under
109:51 - runs nothing under states nothing under
109:53 - variables there's nothing in there okay
109:55 - and so what i'm going to do here is just
109:57 - type yes
110:00 - and that's going to
110:02 - take the terraform state file
110:04 - and move it to your
110:06 - workspace so it's finished that was
110:08 - pretty quick so what i'm going to do is
110:10 - go back over here
110:11 - and we're going to just click on here
110:13 - and
110:14 - refresh
110:17 - it looks like we also have the
110:18 - instructions here which we could do so
110:20 - if we go over to states here is our
110:21 - state file so we open it up and it's all
110:23 - the same contents of the terraform.tf
110:26 - state so what we can do now
110:28 - is go over here and we can go ahead
110:31 - and delete this
110:33 - normally you wouldn't want to delete
110:34 - your backup but i just want to see if
110:36 - when we run terraform apply if it'll
110:38 - actually produce another backup backup
110:39 - locally here
110:41 - okay
110:43 - and so
110:45 - now that we have our infrastructure
110:47 - there all we could all we need to do is
110:48 - now run terraform apply so that's what
110:51 - i'm going to do next
110:54 - i'm going to go here
110:58 - and type in tara from apply
111:01 - and we'll see what it changes
111:03 - like there's no infrastructure changes
111:04 - so nothing should change but let's see
111:06 - what happens the fact that we moved our
111:07 - remote state over
111:21 - okay so right away it say it says no
111:23 - value for required variable so the thing
111:26 - is we have it set in our tf bars over
111:28 - here but the problem is is that the
111:30 - workspace does not have it because
111:32 - what's going to be running terraform is
111:35 - actually
111:36 - a run environment there's actually a
111:37 - server that's part of terraform cloud
111:39 - that executes your code
111:41 - and so these variables are on a local
111:43 - machine there's no way for them to get
111:44 - up there so we have to go set them
111:46 - under variables
111:48 - we have two options here
111:50 - so there's terraform variables so these
111:52 - are settings used as the terraform.tfrs
111:54 - to use a non-string variable
111:57 - okay and then we have environment
111:58 - variables so we have two different ways
112:00 - to set it
112:01 - the way i'm going to set it is a
112:02 - terraform variable so we have a key and
112:04 - a value
112:06 - this is generally how you'd want to do
112:07 - it so we have our instance type so we
112:09 - will go and put the name in there and
112:11 - this is going to be a t2 micro
112:14 - okay and i'm just simply copying them
112:16 - over notice over here we have a checkbox
112:18 - for hcl so parse the field as the hcl
112:21 - language that's if we wanted to do
112:22 - something a bit more advanced mark it as
112:24 - sensitive if we need to and that's not
112:26 - something to do so this is going to be
112:27 - the size and this is optional but i'm
112:29 - just putting it the size of the ec2
112:31 - instance
112:33 - okay
112:34 - and we'll go ahead and set that variable
112:37 - great and so what we'll do is now try to
112:38 - run this again
112:50 - so now it's saying um
112:52 - it's not saying no credential provider
112:54 - so no val providers in the chain and so
112:57 - we did specify
112:59 - in our providers that we want to use our
113:01 - profile default but the problem is is
113:03 - that
113:04 - this is not going to work for
113:08 - this is not going to work for our
113:10 - our workspace here because we actually
113:12 - have to set it in here in the
113:14 - environment variables
113:15 - so what i'm going to do is just go look
113:17 - up the terraform provider
113:27 - oh sorry so we'll go to terraform
113:29 - provider aws
113:34 - i want to do this on the registry
113:38 - and what we'll do is try to look for
113:40 - authentication
113:41 - um i'm just making sure that this is
113:44 - what this says github so if you just
113:45 - click back here in the top left corner
113:46 - go to providers go to aws go to
113:49 - documentation
113:50 - usually in the beginning they'll have
113:52 - like information in the guides that
113:53 - explain like how to
113:55 - configure it
113:57 - and so that's what i'm just looking for
113:59 - here
114:02 - maybe just click on aws provider so yeah
114:05 - here's the section on authentication so
114:07 - he would say like access key access a
114:09 - secret secret key but what we want to do
114:11 - is set these environment variables
114:12 - because that's the way we're going to
114:13 - have to do with terraform cloud so we'll
114:15 - do is go here and
114:18 - specify this key here so we'll say
114:20 - aws access key id and we're gonna have
114:23 - to go get those credentials so i'm gonna
114:24 - just type in by
114:26 - aws credentials
114:29 - and there's my key
114:31 - so let's go ahead and copy that
114:33 - again that's secret don't ever share it
114:34 - with anybody and this is definitely
114:36 - sensitive so we're going to mark that as
114:37 - sensitive
114:38 - and we'll save that
114:41 - and the other one's going to be called
114:42 - aws secret
114:46 - access key
114:48 - just making sure i spelt that right i'm
114:49 - just looking off screen here to see if i
114:51 - spelt it right
114:54 - and we'll go ahead and copy that
114:57 - paste that in just make sure there's no
114:59 - uh trailing spaces we're going to say
115:01 - that is also sensitive we also want the
115:03 - region
115:04 - so aws default region
115:08 - and i'm going to set mine as us east one
115:11 - that's not sensitive it's not a big deal
115:13 - and so this should give us enough to be
115:15 - able to execute that command now again
115:17 - there is no new infrastructure to create
115:18 - but just to get it to run is what we're
115:20 - trying to do here i'm just going to
115:22 - write and quit
115:24 - and we will try terraform apply again
115:26 - and now see if we get better luck this
115:28 - time around okay
115:33 - great so notice it says no changes your
115:35 - infrastructure matches the configuration
115:37 - so there hasn't been anything that has
115:39 - changed so what i'm going to do is i'm
115:41 - just going to do a terraform destroy
115:44 - because i want to tear this all down and
115:46 - then i want to maybe change uh the
115:48 - variable within terraform cloud and
115:50 - we'll do terraform apply just to make
115:52 - sure that it does work with terraform
115:53 - cloud and indeed we aren't losing our
115:55 - old state file okay
115:58 - so yeah again i just ran here from
115:59 - destroy for real and i said yes so we're
116:01 - just going to wait a while here until
116:03 - all the infrastructure is destroyed and
116:04 - i'll see you back here in a moment okay
116:06 - all right so it took a little bit time
116:07 - to actually just generate out the uh
116:09 - delete plan so i'm just going to go
116:10 - ahead and type yes
116:15 - and that should proceed to destroy all
116:17 - the resources we'll just give it a
116:18 - moment here
116:32 - there we go and so it's deleting
116:33 - everything so i'll see you back here
116:34 - when this is complete okay
116:40 - all right so now that we destroyed our
116:41 - infrastructure what i want to do is just
116:43 - go ahead to our a to bus one here i just
116:45 - want to comment out the module for the
116:47 - time being just because we do not need
116:49 - it uh there are three types of comments
116:51 - in
116:52 - terraform i believe we have this one so
116:55 - we have
116:57 - this is the like javascript multi-line
116:58 - one
116:59 - but you could also be doing this or this
117:02 - it's up to you
117:04 - and so what we'll do now is do a
117:06 - terraform apply
117:14 - and we'll notice that it's just going to
117:16 - provision that ec2 instance
117:18 - so i'm just waiting for it to show me
117:21 - the option yes there we go so we'll type
117:23 - in yes
117:24 - and i'm going to go back to terraform
117:26 - cloud
117:31 - wherever i put it so i might have to go
117:33 - back to terraform.io here i might have
117:34 - closed it on my own
117:43 - okay so here you can see that it's
117:45 - applying right now we can even see it as
117:47 - it's running so it did the plan over
117:49 - here and now it's doing the apply
117:51 - i could even cancel it from here if i
117:53 - really wanted to
117:54 - i just want to show you that you have
117:55 - your previous states here so every time
117:57 - you do a deploy it's going to store a
118:00 - state file so it's technically versioned
118:03 - notice that
118:04 - if we open up our backups there's no
118:06 - longer a terraform backup file
118:09 - i suppose there's really no need for one
118:11 - because if we have all these states
118:14 - in here these are technically our
118:16 - backups
118:17 - so in the slides i might contradict that
118:19 - and say that the file remains but
118:21 - apparently it does not okay
118:29 - and i'll see you here when this is done
118:31 - okay
118:32 - all right so after a short little wait
118:33 - there it says it's complete
118:35 - again we'll just go over here to our
118:37 - overview we'll see that it has been
118:39 - applied we can see the resources under
118:42 - here and so this is our aws resource we
118:44 - can even see our outputs as well and
118:47 - that's pretty much all i wanted to cover
118:48 - in the getting started so now it's all
118:51 - just about clean up so what i want you
118:52 - to do
118:53 - is go back here and we're going to go
118:55 - type in terraform destroy to tear down
118:57 - all this infrastructure which is a
118:58 - single server right now
119:02 - and actually i'm just going to oops i'm
119:04 - trying to stop it here i want to do i
119:06 - think we can do auto proof here auto
119:07 - approve
119:09 - and actually if we wanted to do it the
119:11 - other way we do destroy
119:14 - auto approve
119:16 - and i'll see you back here in a moment
119:18 - when this infrastructure has been
119:19 - destroyed okay
119:23 - [Music]
119:27 - all right so this is finished destroying
119:29 - our infrastructure so now what i'm going
119:30 - to do
119:31 - is just go back to my workspace here and
119:33 - i just want to go ahead and delete it so
119:35 - we'll go down below and we'll delete
119:37 - this terraform cloud workspace so i will
119:39 - type in
119:41 - uh the name of it so this would be
119:43 - getting started
119:45 - like you can keep it around it's not a
119:46 - big deal also notice that it allowed
119:48 - destroy plan so when enabled the setting
119:49 - allows the destroy plan okay so that's
119:51 - just a way of disabling it um so we'll
119:53 - say getting started
119:59 - great and so now that workspace is gone
120:01 - and so we are done are you first getting
120:04 - started we can get back to the main
120:05 - course
120:06 - [Music]
120:11 - hey this is andrew brown from exam pro
120:13 - and we are taking a look at terraform
120:14 - provisioners so provisioners install
120:16 - software edit files and provision
120:18 - machines created with terraform and
120:20 - terraform allows you to work with two
120:21 - different provisioners we have cloud in
120:23 - it and packer so cloud init is an
120:25 - industry standard for cross-platform
120:27 - cloud instance initialization when you
120:29 - launch a vm on a cloud service provider
120:31 - you'll provide either a yaml or bash
120:33 - script uh and so for the case of aws
120:37 - what you'll have is this box called user
120:39 - data and so you can either put your yaml
120:40 - or bash script in there it's the same if
120:42 - you're using google or azure they both
120:44 - have this box it might just not be
120:46 - called user data
120:47 - but that is using cloud init underneath
120:50 - then you have packer this is an
120:51 - automated image builder service you
120:53 - provide a configuration file to create
120:54 - and provision the machine image and the
120:56 - image is then delivered to repository
120:58 - for use if you've ever heard of ec2
121:00 - image builder it's a very similar
121:02 - service except that one's just for aws
121:04 - i suppose for google you could use
121:06 - google cloud run
121:07 - and even on database you could use um
121:10 - code build but packer is great because
121:12 - it's cloud agnostic so you're going to
121:14 - just build the image and then you can
121:15 - deliver it
121:17 - to any provider
121:18 - provisioners should be used as a last
121:20 - resort for the mo for more common
121:22 - situations there are better alternatives
121:24 - this is a warning that hashnote puts out
121:26 - in their terraform provisioner section
121:28 - and so i wasn't really sure why they
121:30 - were saying this so i reached out to
121:32 - anton and anton uh if you don't know him
121:34 - he's an abe's community hero just like
121:36 - myself
121:37 - and so he specializes in terraform like
121:40 - he wrote so many modules for the
121:42 - terraform aws so he knows it pretty well
121:44 - and he says here the main reason is that
121:46 - provisioners will do something that
121:48 - won't be reflected in the terraform
121:49 - state and the better alternative for
121:51 - that one is to use cloud provider
121:53 - features like cloud init scripts i think
121:56 - this comes back to immutability when
121:58 - we're looking at uh the fact that we
122:00 - want to um
122:02 - lean towards doing an approach with
122:04 - packer right we want to
122:06 - um
122:07 - bake our baker machines or virtual
122:09 - machines and then deploy because that's
122:11 - going to be probably the better
122:13 - alternative
122:14 - so if we wanted to use cloud init uh the
122:16 - idea is we'd have to provide a cloudant
122:18 - yaml file which is a a very particular
122:21 - format you can find them on the cloudant
122:23 - website uh and the idea here is we have
122:25 - these run commands so let's just like
122:26 - bash commands here to start and stop
122:27 - apache we can install our packages here
122:30 - do an update do an upgrade we'll have to
122:32 - pass along our ssh key here that's a
122:35 - very important component to that
122:37 - once we have that file configured
122:39 - we can reference it as a template file
122:41 - over here call it user data and then
122:44 - we're going to pass it on to this
122:45 - section here for user data so that when
122:47 - we launch up this vm and this one in
122:49 - particular is for aws that's going to
122:51 - pass it to that user data okay
122:53 - now you might be asking well where's all
122:55 - these other provisioners because there's
122:57 - a lot of other tools out there so
122:58 - terraform used to directly support
123:00 - third-party provisioning tools in the
123:02 - terraform language but they were
123:04 - deprecated uh because it was considered
123:06 - to be poor practice suggesting better
123:08 - alternatives as we were just talking
123:09 - about so you might be asking where is
123:11 - chef where is puppet where is salt
123:13 - and the thing is is that you can
123:15 - technically still use chef and puppet
123:17 - through cloudinet because cloudnit
123:19 - actually supports uh some dsls in there
123:21 - i've never used this before myself but
123:23 - it doesn't look too complicated but the
123:25 - idea is that there's just not direct
123:27 - support so you're not going to use it
123:28 - directly in the language you can use it
123:30 - through cloud in it if you really need
123:31 - it one thing i didn't see mentioned
123:33 - anywhere was ansible and this one's a
123:35 - little bit confusing because there's a
123:37 - lot of videos online about terraform and
123:40 - ansible working very well together and
123:42 - they're complementary uh technologies so
123:45 - ansible is a little bit different than
123:47 - these other ones because it does more
123:48 - than just configuration management so
123:50 - maybe that's the reason there um but
123:52 - anyway the point is is that there's no
123:53 - direct support for these anymore you've
123:55 - got to use cloud in it and generally if
123:57 - you can use packer instead when you're
123:58 - working with virtual machines okay
124:00 - [Music]
124:05 - hey this is andrew brown from exam pro
124:07 - and we are taking a look at local exec
124:09 - which allows you to execute local
124:10 - commands after resource is provisioned
124:13 - so the machine that is executing
124:15 - terraform so what's doing the terraform
124:17 - apply is where the command will execute
124:19 - in a local environment could be
124:21 - your local machine so your laptop or
124:23 - workstation a build server like gcp
124:26 - cloud build abs code builder jenkins or
124:29 - terraform cloud run environment so that
124:31 - is a single use linux virtual machine so
124:34 - just an example and there's a lot of
124:36 - cases where you might want to automate
124:38 - but the idea here is after you provision
124:40 - a vm you need to supply the public ip to
124:43 - a third party security service to add
124:45 - the vm ip address and you could
124:46 - accomplish this by using locally
124:48 - installed third party cli on your build
124:50 - server and so there is a bit of
124:52 - overlapping responsibility between
124:54 - terraform outputs versus local exec
124:56 - because the idea is that by getting um
124:59 - uh by getting data out after something
125:01 - is provisioned or something like that
125:03 - you can do something pragmatic but the
125:04 - idea here is terraform outputs allow you
125:07 - to output results after running
125:08 - terraform apply local exec allows you to
125:11 - run any arbitrary commands on your local
125:13 - machine commonly used to trigger
125:14 - configuration management like ansible
125:16 - chef or puppet okay
125:22 - let's take a look at some example code
125:24 - for a local exec so here we have a bunch
125:26 - of examples on the right hand side and
125:28 - so i just kind of want to walk through
125:30 - some of the commands that we can use but
125:31 - before we do that just let's take a
125:33 - quicker look here at the code so notice
125:35 - we have a resource like about instance
125:36 - in web and then we are specifying a
125:39 - provisioner being a local exec and then
125:42 - we have a command that is being executed
125:44 - under there okay so hopefully that makes
125:46 - it pretty clear but let's just kind of
125:47 - work through the options we have
125:49 - available to us so the first is we have
125:50 - a command and this is required and this
125:52 - is the command you want to execute so
125:54 - notice that
125:55 - we are doing
125:56 - an echo there so it's whatever is
125:59 - possible there and i think by default
126:02 - it's using bash okay so if you're using
126:03 - linux that's what it would be using uh
126:05 - we could also set a working directory we
126:07 - don't see an example there on the right
126:08 - hand side but if you wanted to
126:10 - say where the command will be executed
126:12 - that's something you could do so maybe
126:13 - you want it over here another thing is
126:16 - the interpreter so this is the entry
126:17 - point for the command i think by default
126:19 - again it would probably use bash if your
126:21 - linux machine but you could say use bash
126:23 - ruby it was cli powershell whatever you
126:26 - want okay
126:27 - if you needed to pass environment
126:29 - variables in maybe you need a key and
126:31 - secret
126:32 - so the example here is you know we are
126:34 - printing out those keys and then putting
126:36 - them into a
126:38 - credentials yaml file so that could be
126:40 - an example there okay
126:42 - [Music]
126:46 - hey this is andrew brown from exam pro
126:48 - and we're taking a look at remote execs
126:49 - so this allows you to execute commands
126:52 - on a target resource after a resources
126:54 - provision so the idea is you have a
126:56 - local machine executing terraform and so
126:59 - the idea is that when remote exec
127:01 - happens it has a script and it's sending
127:03 - that off to the target so this case it
127:05 - could be a provision virtual machine and
127:08 - this is where the command is going to
127:09 - run so a remote execute is useful for
127:11 - provisioning a virtual machine with a
127:13 - simple set of commands for more complex
127:15 - tasks it's recommended to use cloud init
127:18 - and strongly recommend it in all cases
127:20 - to bake golden images via packer or ec2
127:22 - image builder if you want to use
127:23 - something more complex like ansible or
127:25 - something
127:26 - [Music]
127:30 - let's take a look at an example of a
127:32 - remote exact script so here we have a
127:35 - couple and just to quickly go through it
127:37 - the idea is you define your resource so
127:39 - here it's just a virtual machine on aws
127:42 - and we are provisioning our provisioner
127:44 - is going to be remote exact and so we're
127:46 - able to put these inline commands and
127:48 - say okay let's run puppet apply and then
127:50 - we'll use console join which is the cli
127:52 - for hashicorp console
127:54 - so
127:55 - there are three different modes for
127:57 - remote exec the first is inline list of
127:59 - command strings which is what we are
128:02 - seeing over here
128:04 - and then the other option is we can
128:06 - provide a script or scripts so the idea
128:09 - is that you would um well you just
128:12 - specify those locations and it would run
128:14 - it
128:15 - what's interesting here is that it
128:16 - doesn't say um like because we saw with
128:19 - local exec that we could use an
128:22 - interpreter and so it's my assumption
128:24 - that it's just going to use bash or it's
128:27 - going to use a script that is executable
128:30 - right where you have a shebang on the
128:31 - top there
128:32 - and so that's something you know i might
128:34 - test out it's not something that's going
128:35 - to be on the exam but maybe we'll just
128:38 - test out that theory because it's not in
128:39 - the documentation as of the time i'm
128:41 - recording this
128:42 - [Music]
128:46 - let's take a look at the file
128:48 - provisioner and this is used to copy
128:49 - files or directories from our local
128:51 - machine to the newly created resource so
128:53 - here we have some on the right as an
128:56 - example so again we have a virtual
128:58 - machine that we're deploying to aws
129:00 - we've set the provisioner as file and we
129:03 - are specifying a source file and a
129:05 - destination so source is going to be uh
129:07 - the file that's on your local machine or
129:09 - whoever is uh the considered the local
129:12 - that you might also want to provide
129:14 - content directly so in this example here
129:16 - you see that we're literally just giving
129:18 - it a string
129:19 - and then there's the destination where
129:20 - you want that file to be
129:22 - i don't have it shown in the code
129:24 - example here but there's a high chance
129:26 - that you would have to provide a
129:28 - connection block so that you could say
129:30 - okay i need to use ssh or
129:33 - winrm to gain access to that machine
129:36 - okay
129:37 - [Music]
129:41 - so we just mentioned that there's a
129:43 - connection block so
129:44 - it tells the provisioner or resource how
129:46 - to establish a connection so here is a
129:48 - big example on the right hand side so
129:51 - this is using the example for a
129:52 - provisioner file
129:54 - and here we are specifying our
129:56 - connection block and this one in
129:58 - particular is for ssh as you can see and
130:00 - there's a bunch of different parameters
130:01 - like the user the password the host
130:04 - you could also
130:06 - use a bastion host i don't i'm not
130:08 - showing it here but if you're using ssh
130:09 - you could specify a bunch of keys in
130:12 - order to do that because maybe you need
130:13 - to go through a bastion first
130:15 - for uh windows remote management you
130:18 - also have that option down below okay
130:20 - [Music]
130:25 - hey this is andrew brown from exam pro
130:27 - and we are taking a look at null
130:28 - resources so this is a placeholder for
130:30 - resources that have no specific
130:32 - association to a provider
130:34 - it's a bit confusing but it makes sense
130:36 - once you run into some use cases for it
130:38 - so here is a big example where we have
130:42 - an aws
130:43 - instance and we're defining a cluster
130:45 - and so we need a null resource here
130:48 - because we want to
130:50 - run this trigger and that's generally
130:52 - why you're going to be using all
130:53 - resources is to trigger a resource so
130:56 - triggers is a map of values which should
130:58 - cause this set of provisioners to re-run
131:00 - so values are meant to be interpolated
131:02 - references to variables or attributes of
131:05 - other resources and uh triggers are
131:07 - interesting because i think we also see
131:09 - them in terraform cloud i'm not sure if
131:11 - this is the same kind of functionality
131:13 - but um yeah that's in all resources okay
131:15 - [Music]
131:20 - hey this is andrew brown from exam pro
131:22 - and in this follow along we're going to
131:23 - be um learning all about provision or so
131:26 - what i want you to do is make sure you
131:27 - have a new folder and cd into that
131:29 - folder and we are going to create
131:31 - ourselves a new main.tf file and we're
131:34 - going to go set up a new workspace in
131:36 - terraform cloud so i'm going to choose
131:38 - the cli driven way of doing it i'm going
131:40 - to call this workspace provisioners
131:43 - okay and we're going to get some default
131:44 - uh code here that we can copy in so i'll
131:47 - just paste that into my main tf that's
131:49 - just going to set up that workspace we
131:51 - want to set up our environment variables
131:53 - or terraform variables again so we'll
131:55 - need to set up that for aws so i'm going
131:57 - to just go to the registry here
131:58 - registry.terraform.com
132:00 - or dot io
132:02 - and we'll go to aws here documentation
132:05 - aws providers scroll on down just
132:08 - because i can never seem to remember
132:10 - these key names and so we will
132:13 - put in this one here
132:15 - and i will need to actually get my
132:17 - credentials again these are secrets so
132:19 - you should not share these with anybody
132:21 - again i'm going to get rid of mine
132:23 - eventually here especially before i
132:25 - publish this course
132:27 - and i should be able to paste that in
132:29 - there didn't get it
132:31 - it's very finicky the um
132:35 - the copy paste here with uh
132:38 - vs code so we'll mark that as sensitive
132:42 - we'll add another one here
132:44 - and in this case it is called secret
132:47 - access key
132:54 - okay
132:56 - and we will save that and so we're all
132:57 - set up for aws with the exception that
132:59 - we need to define our actual required
133:02 - providers again we're going to go back
133:03 - to well we don't actually have to we
133:05 - could just go grab it from here if we go
133:08 - back here and grab the required provider
133:11 - there
133:14 - and so that needs to go
133:16 - just after back end here doesn't matter
133:18 - the order as long as it's in the first
133:20 - level of the terraform settings
133:22 - and we'll also want to specify the
133:25 - provider
133:28 - and i'm just going to set the region
133:29 - here
133:31 - as us east one
133:34 - and it's double quotations i don't think
133:36 - terraform supports single quotations
133:39 - and then i just need an aws instance so
133:41 - what i'm going to do here is go up to
133:44 - my getting started here and in here
133:46 - we're going to grab it from the aws code
133:48 - and we'll just scroll up
133:50 - and we'll grab this
133:53 - okay but we'll have to make some
133:54 - modifications because
133:56 - we don't have a local here so we'll take
133:58 - that out and i'm just going to hard code
134:00 - this value for the time being so t2
134:02 - micro
134:04 - uh and that looks good to me i'm just
134:07 - going to double check here that is all
134:09 - good so we'll go down below type in
134:11 - terraform init
134:15 - great and that's just going to start
134:17 - setting up
134:19 - that for us there
134:23 - so the thing is is that
134:25 - we're going to
134:26 - want to ssh into this me machine and so
134:29 - we're going to want to set up
134:31 - like a data key okay
134:33 - and so the way we're going to do that is
134:35 - we're going to need to use um it's
134:37 - called aws key pair so what i'm going to
134:40 - do is make my way over to the
134:41 - documentation here
134:43 - and i'm just going to type in database
134:44 - key pair
134:47 - okay
134:48 - and this is pretty much what i'm looking
134:50 - for so i will go ahead and paste this in
134:53 - if you're familiar with aws you can uh
134:55 - you know associate keys but this is the
134:57 - easiest way so we're going to need to
134:59 - generate our own key and attach it there
135:01 - once we have our key
135:03 - in there we can just reference it so i'm
135:05 - just going to go down here and add it
135:06 - right now so we'll go key underscore
135:08 - name
135:10 - and
135:11 - i think what we'd want to do is use
135:14 - an interpolation there or directive
135:16 - and we want to do aws key pair
135:20 - dot
135:20 - deployer
135:22 - dot key name
135:24 - okay
135:26 - and i'm just looking at that to see
135:28 - if that is correct
135:31 - the coloring is not right here but um i
135:34 - don't think that's why like that is the
135:37 - problem because the syntax definitely
135:38 - looks correct to me here
135:40 - so i guess i'm just not going to worry
135:42 - about that right now
135:44 - another thing we're going to need is the
135:46 - public id so again with the outputs we
135:48 - will just type in output
135:51 - and do public id
135:54 - ip sorry i like to say id
135:58 - and
135:59 - we'll set our value here adabus instance
136:03 - my server
136:07 - okay so we're going to need some kind of
136:08 - ssh key so we're going to go ahead and
136:10 - generate ourselves a new one
136:12 - um
136:13 - there is a s or a linux command called
136:15 - ssh keygen
136:17 - it's basically the standard for
136:19 - generating keys and so i'll just hit
136:20 - enter here and i'm just going to call it
136:22 - terraform
136:24 - and i'm going to hit enter and enter
136:26 - again and notice that it has generated
136:29 - out in the root.ssh directory actually
136:32 - it might have dumped it right here and
136:33 - that's no good i'm going to delete that
136:35 - the reason i i can't have it in this
136:37 - folder is that i'm right now mounted to
136:38 - a windows directory and so chamod which
136:41 - is what we need to modify the
136:42 - permissions won't work if we do that so
136:44 - i'll have to do this again and i'll have
136:46 - to type the full path
136:48 - okay
136:50 - and so this will generate it out in the
136:52 - correct directory i'm going to do a
136:54 - chamod on that 400. the reason why we're
136:56 - doing that is that whenever you launch
136:58 - an instance i'll show you later but uh
137:01 - when you in sessions manager but aws
137:03 - will not accept
137:04 - um
137:06 - a uh like a key unless it has uh it's
137:09 - only readable okay
137:10 - so we will go here and do ssh terraform
137:15 - and put on the 400 we don't need to do
137:16 - it on the
137:18 - the public key there and we need that
137:20 - public key so we'll do root
137:22 - dot ssh terraform dot pub
137:25 - we're going to copy the contents there
137:28 - this might take more than one go because
137:29 - the paste and vs code is not great
137:31 - double check the ends here make sure
137:32 - there's no spaces that causes a lot of
137:34 - issues check the front here ssh that
137:36 - looks good to me
137:38 - okay and so when we deploy this instance
137:40 - it's going to take that ssh key and and
137:43 - install it on the server for us which is
137:45 - really nice
137:46 - um so we need to now set up a
137:50 - secure security group because we're
137:51 - going to need
137:53 - a way of accessing port 80 and 22. so
137:57 - back on aws here we go the top here and
137:59 - if we just type in security groups i
138:00 - never remember if it's under ec2 or aws
138:04 - if we go down here there is the security
138:06 - group and so here is where we have an
138:08 - example so i'm going to go ahead and
138:09 - copy this in here
138:12 - and we're just going to go ahead and
138:13 - modify that okay
138:15 - so i'll just paste it right here
138:19 - and i don't need any tag on that
138:21 - and so we have our egress rule we have
138:24 - our ingress rule
138:26 - and so for ingress rule we want one for
138:28 - http
138:30 - because we're going to install apache
138:31 - and just have it running on
138:34 - port 80 here
138:37 - okay
138:38 - we're going to be using our default vpc
138:40 - and so that doesn't have an ipv6 so i'm
138:42 - just removing it out of there
138:45 - and
138:46 - we're going to have to reference some
138:47 - kind of vpc so for the time being like
138:50 - we're going to use a external data
138:51 - source we'll have to change that but
138:52 - this will be um
138:54 - we'll call this sgmyserver
138:59 - sgmyserver
139:03 - we're going to have to set our
139:05 - description here so this will be my
139:07 - security group
139:10 - my my server security group
139:14 - notice that we are explicitly setting an
139:16 - egress port if you're familiar with aws
139:18 - this is usually set for you by default
139:20 - but when you're using terraform you have
139:21 - to explicitly set it because if you
139:22 - don't it won't be there when you deploy
139:24 - it
139:25 - um
139:26 - so
139:27 - we're going to need to have that vpc
139:30 - and so we just need the id and we could
139:32 - technically just open aws and grab that
139:35 - key
139:36 - so if we go over to aws here and go to
139:39 - the vpc
139:42 - and go to vpc ids
139:44 - we could just technically grab it that's
139:46 - the default vpc but the problem is we're
139:48 - going to probably have to refer to this
139:50 - vpc in other places so we can't just
139:52 - grab the id and put it in here
139:55 - that's not going to be good enough
139:57 - so what we'll need to do is we'll need
139:59 - to actually reference the existing we
140:01 - don't want to set up a new vpc which
140:03 - might use the default one so that's
140:04 - where data sources come into play data
140:06 - sources allow us to uh externally
140:08 - reference resources um
140:11 - and so like if i wanted to figure out
140:12 - how to reference a vpc i would just say
140:15 - terraform
140:16 - data source vpc
140:20 - okay and then i should be able to easily
140:21 - find an example here so here's an exact
140:23 - example that i want
140:25 - so i will go ahead and grab that it's
140:27 - very simple
140:31 - i'm just going to call my main because
140:33 - that other one was called main and this
140:34 - is where we would want to actually place
140:36 - the id so i'll go back here
140:38 - and grab my vpc id
140:43 - okay so now uh this actually acts as a
140:45 - resource and we can access all of its
140:47 - attributes so
140:48 - that's going to be very useful like
140:49 - notice how we're referencing cider block
140:51 - if we had just hard coded vpncid we
140:54 - wouldn't be able to do this which is
140:56 - what we need
140:57 - um so
140:59 - let's make sure the egress
141:01 - we don't need an ipv
141:03 - well we can just leave that alone that's
141:04 - fine so what we need is
141:08 - um to reference this here so we'll say
141:11 - data dot aws vpc
141:14 - notice that we're using data dot in the
141:16 - front because it's a data source that's
141:18 - how we always reference them and we'll
141:19 - just do dot id down below this has to be
141:23 - data because it's not a standard
141:24 - resource it's a it's from a data source
141:29 - all right and that is good
141:33 - so
141:35 - we have our data source so that looks
141:39 - pretty good to me
141:42 - oh but we have to reference the security
141:43 - group actually down below here otherwise
141:45 - it's not going to work
141:46 - so i think for that it is vpc security
141:51 - um group
141:53 - ids
141:55 - and then there that's where we'd have to
141:56 - reference that so our resource up here
141:58 - is called
141:59 - absolute group sdg my server
142:02 - so we'll just have to type that in again
142:03 - down below here so we'll say aws
142:05 - security group
142:08 - dot s g
142:09 - my server dot id
142:13 - and that should apply we didn't actually
142:15 - create a port 22 here so we'll go here
142:17 - and copy
142:20 - this and uh we do not need
142:24 - uh we don't want the cider block of the
142:26 - vpc this is what we if we want this we
142:28 - want this to be the internet so we're
142:30 - going to say 0.0
142:33 - uh i'll just copy the one down below
142:35 - here just so i don't make any mistakes
142:37 - but this just means from anywhere
142:39 - okay
142:41 - and we only want rip to work so what
142:43 - we'll do is go to the internet here and
142:44 - type in what's my ip
142:46 - and so that is my current ip
142:49 - i'm going to go here and make a cider
142:51 - block
142:51 - forward slash 32 just means use a single
142:54 - address
142:55 - and i actually put that in the wrong
142:57 - block here so i'm just going to go ahead
142:58 - and paste it up there
143:00 - and we're going to go
143:02 - and clear that out
143:07 - and so that will give us access
143:09 - well
143:10 - i think i messed that up sorry so
143:12 - one is supposed to be one's supposed to
143:14 - be down here so we want the ssh to be
143:17 - our ip address here so sorry we'll say
143:20 - ssh port 22 port 22
143:23 - and i'm going to go back and copy this
143:24 - one here because i just cleared it out
143:25 - by accident
143:28 - okay
143:29 - and so we have the that port 80 open
143:31 - that ssh open
143:34 - um the only other thing that we need is
143:37 - a file to configure our resource so what
143:40 - we're going to do here is make a new
143:41 - file i'm going to call this
143:43 - userdata.yaml or maybe cloudenit.yaml
143:46 - because that's now we'll do user data
143:48 - yaml but this is basically uh cloud
143:51 - cloud in it when you're using aws this
143:53 - is gonna might vary for providers but
143:55 - you have to start the first line as
143:57 - cloud config even though this is a yaml
143:58 - file this is important for each of us to
144:00 - know what to do i want to install httpd
144:04 - okay
144:05 - and i'm going to do run cmd
144:10 - systemctl start
144:12 - httpd and then we have to do sudo system
144:15 - ctl enable hdb so this is going to
144:18 - install apache which is just a web
144:19 - server start it up and enable it so on
144:21 - reboot it will work um one thing i want
144:24 - to show you if i have not before cloud
144:26 - init examples
144:28 - if you're just wondering like how do you
144:29 - know what to write there there's a bunch
144:30 - of examples on cloud in it and then uh
144:33 - notice like it starts with that so we
144:34 - could literally create users and do all
144:36 - sorts of things here but for our
144:38 - purposes we're just going to keep it
144:39 - really simple
144:41 - um i don't know if it matters if it's a
144:43 - yml or a yml sometimes you have with the
144:47 - a sometimes you don't but i'm just gonna
144:49 - do it that way anyway like that
144:52 - so we just need to set our user data
144:54 - here so we're gonna have to pull in that
144:55 - script so we will type in um
144:58 - we'll need to reference our data so
145:00 - we'll need to create
145:03 - a new data source and this is going to
145:04 - be called template file we'll call it
145:07 - user data
145:11 - and here we'll say template
145:13 - equals file
145:16 - i think i called it cloudinet here
145:20 - oh no we renamed it user data
145:24 - there we go and so now we just need to
145:26 - reference that file
145:29 - so if i go down below
145:31 - and we say user data equals data
145:33 - template file user data and then i think
145:36 - you have to type rendered
145:38 - there
145:40 - so this will deploy a server that's open
145:42 - on port 80 ssh only allow it on our
145:45 - address to ssh into it it's going to
145:47 - copy over that key
145:50 - and it should run the script and install
145:51 - apache so we can see that server and
145:53 - we'll output our public ip address there
145:56 - so i'm going to do a terraform plan to
145:58 - see what happens
146:01 - because we did do a lot there right
146:05 - see if it takes it
146:09 - i don't even know if we did terraform in
146:10 - it yet
146:13 - if we didn't it will complain
146:20 - so it says here a data source 8bitsvpcid
146:23 - has not been declared in the root module
146:25 - it's probably
146:26 - um no we're doing data
146:29 - right so that shouldn't be an issue main
146:34 - oh i didn't write the word main on there
146:35 - so that's on line 29
146:38 - so i think we just need data here or
146:40 - sorry um
146:41 - main
146:42 - okay
146:44 - and we'll try another terraform plan
146:52 - and sometimes if you want to speed it up
146:53 - you can just type terraform validate
146:55 - before you do your plans that's why you
146:56 - see me do validate a lot without doing a
146:58 - plan first even though they both do it
147:08 - okay and so what we're having here is an
147:10 - error we're saying inappropriate values
147:11 - for egress so description prefix list id
147:14 - security group self are required so when
147:17 - you're specifying things in blocks even
147:18 - if they're optional sometimes like
147:20 - blocks being this sometimes you have to
147:23 - still specify them
147:24 - so
147:26 - we have
147:28 - we don't have prefix id
147:30 - so we should go look this up because i'm
147:32 - not sure what it's expecting here
147:35 - so we'll go down here
147:40 - to prefix id
147:43 - okay so that's just a list
147:45 - so i'm going to go here and just
147:46 - provided an empty list
147:51 - okay
147:52 - i have a feeling that's for ingress
147:54 - egress
148:03 - and it wants security groups
148:08 - right there it's also a list okay and
148:11 - then self that looks like it is what
148:15 - whether the secret group is added by the
148:16 - source or not i think that's a boolean
148:18 - so what i'm going to do here is do
148:21 - security groups
148:28 - self equals false
148:30 - it's not like i know what these mean in
148:32 - granular detail it's just the fact that
148:33 - it's like hey we want these fields and i
148:35 - just go and i go okay i'll give you some
148:37 - defaults
148:38 - because i don't plan to use them for
148:39 - anything right so
148:41 - um and we will paste that in there
148:45 - there's some weird characters there
148:51 - okay so we'll go down here and do tear
148:52 - from plan and we'll see if it likes it
148:54 - now
148:56 - i don't know if we're missing a
148:57 - description here we are so description
149:03 - for growing traffic
149:08 - try this again here
149:18 - all right so we didn't get any errors it
149:20 - looks like it's all good and it will
149:22 - provision so the aws root module does
149:24 - not declare variable name adabus access
149:26 - key id but a value is found in the
149:28 - terraform tfrs if you if you meant to
149:30 - use this value okay that's fine
149:33 - so what we're going to do is now try to
149:35 - provision and see if it works i'm going
149:37 - to do auto approve
149:42 - all right and
149:44 - looks like it's off to the races i will
149:46 - see you here when it's done okay
149:49 - all right welcome back so after a little
149:51 - while there i just wanted to make sure
149:52 - those two checks had passed uh we're
149:54 - ready to see if our server is working
149:57 - and by the way there is a way for us to
149:59 - make sure that terraform only completes
150:01 - uh when those two checks have passed and
150:03 - that's where we can use null resource
150:05 - and so we'll look at that later on but
150:07 - for the time being we'll just manually
150:09 - check that stuff when it's done so what
150:10 - i want to do is go grab that public ip
150:12 - address go and paste it up here and look
150:14 - where apache page is working so
150:16 - everything is working as expected let's
150:18 - see if we can ssh into that instance so
150:20 - what we can do is type in terraform
150:23 - outputs
150:24 - and see what we have here it might just
150:26 - be output my fault here
150:29 - and so notice that um oh we get a lot of
150:32 - stuff okay so i just want
150:35 - i'm not sure why i'm getting so much
150:36 - output here all i want is the public ip
150:38 - address but notice that it's uh giving
150:40 - me a bunch of stuff here that doesn't
150:42 - make sense so i must have made a mistake
150:44 - here if i go down below
150:46 - yes i forgot to do public ip all right
150:50 - so what i'm going to try to do here is
150:52 - see if i can do a terraform refresh
150:54 - and see if that well actually sorry
150:55 - terraform refresh is an old command so
150:57 - i'm going to do
150:58 - refresh only
151:01 - and see if we can get that change that
151:03 - change to reflect
151:05 - refresh only is like we didn't change
151:07 - any infrastructure but our state does
151:09 - not match our um
151:11 - our
151:12 - uh like the actual
151:14 - objects within the cloud so this way we
151:16 - can just pull that information okay
151:20 - refresh doesn't always work as expected
151:22 - but in this particular case i think it
151:24 - should work pretty well
151:25 - yeah see it's going to replace all that
151:27 - information with just that
151:31 - and we're going to type yes here
151:48 - great and so now if we do terraform
151:50 - output it should be a lot more sane
151:55 - and if we just want to get that single
151:57 - one there whoops we can do public ip
152:00 - but what i want is i just want um
152:03 - i want it in raw because i want to be
152:05 - able to use it as a bash command so i
152:07 - can ssh in so i'm going to do ec2 user
152:09 - at sine dollar sign
152:11 - parentheses here
152:13 - and i'm going to hyphen i to specify
152:15 - where my
152:17 - ssh key is my public key or sorry my
152:20 - private key i suppose
152:21 - so we will do ssh terraform and so that
152:24 - should allow us into the server that's
152:27 - much nicer than having to type the ip
152:28 - address every single time i'm going to
152:30 - type in yes
152:31 - and i'm in the server so there we go
152:34 - so we successfully provision with cloud
152:36 - internet the other way to provision is
152:37 - with terraform and packer but we'll
152:39 - leave that for the the packers section
152:42 - um but uh yeah that is that's all we
152:44 - need to know for cloud in it
152:46 - um so there we go
152:49 - [Music]
152:53 - all right so i just want to show you
152:54 - some other provisioning things like
152:56 - local exact remote exact and uh file so
152:59 - let's get to it um for local exec i'm
153:02 - just going to go ahead and google that
153:03 - quickly here local exec terraform not
153:06 - working let's just say it is working
153:07 - here and we'll scroll on down and so
153:10 - what this is going to do is run a local
153:12 - command or execute something locally on
153:15 - the machine that is running terraform
153:17 - now right now we are using a remote
153:18 - provider so where this is going to run
153:21 - is actually in the run environment which
153:22 - is not very useful to us so what we're
153:25 - going to do is switch back to the local
153:27 - provider here in a moment but we're just
153:29 - going to go and add this provisioner
153:30 - just use the default one here that is
153:32 - provided to us from the documentation
153:34 - i'm going to go up the top here and i'm
153:36 - going to comment this out so we'll go
153:38 - here
153:40 - i'm not used to migrating from remote to
153:42 - local so i'm not sure what's going to
153:43 - happen
153:45 - probably actually before we do that we
153:47 - should go and
153:48 - [Music]
153:49 - tear down our infrastructure so before i
153:51 - do that i'm just going to go terraform
153:53 - destroy we'll just say apply delete
153:57 - auto approve
153:59 - okay
154:03 - terraform
154:04 - did i spell terraform wrong
154:12 - delete
154:13 - it should be that well i'll just do
154:15 - terraform delete then that's fine
154:21 - i'm spelling something super wrong here
154:22 - terraform
154:26 - good
154:28 - destroy
154:29 - you know what it probably is it's
154:30 - probably the destroy flag
154:33 - there we go
154:35 - and so we're just going to tear down
154:37 - what we have and then uh
154:39 - we will set this up for local and then
154:41 - we will deploy that okay so i'll see you
154:43 - back here when that's all destroyed
154:46 - all right so our resources or our server
154:49 - is destroyed so what i'm going to do is
154:50 - go here and comment out the remote back
154:53 - end for the time being
154:56 - and we are going to do a terror form
155:01 - uh apply or sorry terraform init because
155:03 - we've changed out our back end so it's
155:05 - now local a change in the back end has
155:07 - been detected which may require migraine
155:08 - existing state
155:10 - if you wish to migrate it sure we will
155:13 - say migrate state
155:24 - i'm not used to going from remote to
155:25 - local but local to remote
155:28 - but seems to like it worked out okay so
155:29 - we'll say
155:33 - terraform
155:36 - apply
155:38 - okay and we should end up with a local
155:40 - state file
155:46 - we'll say yes here
155:48 - and so what i'm hoping that will happen
155:49 - is that we will once this is done it
155:51 - will output
155:53 - a file called privateips.txt in this
155:56 - folder but we'll see what actually
155:57 - happens here so i'll see you back here
156:00 - when the provisioning done and it
156:02 - actually has rand as private ips okay
156:05 - all right welcome back so uh we had
156:08 - waited for this to execute and notice
156:10 - that it says local exec executing and
156:12 - here is that file with those ip
156:14 - addresses so that is how local exec
156:17 - works okay
156:19 - so we'll move on to remote exec using
156:21 - the same file here
156:22 - [Music]
156:26 - all right welcome back so we just did
156:28 - local exec and so let's take a look at
156:30 - remote exact so in our documentation
156:32 - we'll just go down one and here we have
156:35 - an example i want something a little bit
156:38 - more simple than this
156:40 - um
156:40 - so what i'll do is just kind of grab
156:42 - this code here and we'll just kind of
156:43 - tweak it
156:45 - so we'll go down below
156:47 - we don't need both local and remote here
156:49 - so i'll go up here and
156:53 - i'm just going to take this command here
156:56 - okay
156:58 - and paste it on in here but i want to
157:00 - make sure that it actually goes
157:01 - somewhere that i can find it
157:03 - so i'm actually going to just
157:04 - ssh into the server we'll just hit up
157:06 - until we find that ssh command we had
157:08 - earlier there we go
157:11 - just because i can't remember the root
157:12 - directory here so we'll say pwd and i
157:15 - think that we can get it to put it in
157:16 - here i don't know what this is going to
157:18 - execute like in as what type of user i'm
157:21 - hoping that it will execute as the ec2
157:23 - user if it doesn't i don't know how
157:24 - we're going to find this file or the the
157:26 - command that it's going to run here but
157:28 - what i'm going to do
157:29 - is put in home ec2 user and
157:33 - we will have the echo command in here
157:37 - and we'll just actually copy this
157:40 - wholesale
157:42 - okay
157:45 - and i'm hoping that this will place it
157:47 - where we want it to go
157:51 - if not like it's not a big deal it's
157:54 - just the fact that uh it'd be nice to
157:55 - just be able to easily see that
157:58 - local exactin remote are a little bit
158:00 - different so this one takes just a
158:02 - command and this one can take multiple
158:03 - inline commands or a bunch of other
158:05 - stuff you can read the docs on it it's
158:06 - all covered in lecture content
158:08 - um so
158:10 - this should
158:12 - do the same thing this one says aws
158:14 - instance web private ip address so i
158:17 - don't think self is going to work in the
158:18 - way that we expect it to here
158:21 - uh it might it should actually yeah
158:24 - so let's give this a go and see if that
158:26 - will work
158:27 - to do this because it like from the
158:29 - perspective of terraform nothing has
158:32 - changed in terms of the infrastructure
158:33 - so we're going to have to do a replace
158:36 - so we'll do terraform
158:38 - apply replace and then we'll have to
158:40 - give it the resource addressing names
158:42 - let's address instance
158:45 - dot
158:46 - my server
158:49 - and i've got to type that right if i
158:50 - want that to work terror form
158:54 - oh you know what it's because i'm logged
158:55 - in the server
158:57 - common problem i have here
159:00 - replace equals
159:03 - database instance my server
159:06 - enter
159:08 - and so i'm just hoping that this is
159:10 - going to work actually you know what i'm
159:11 - going to stop that before it happens
159:12 - because
159:14 - we're missing the e there
159:17 - it doesn't matter because i would have
159:18 - had to confirm that action so
159:20 - i guess i didn't have to panic there
159:21 - it's still wrong i kind of put a forward
159:23 - slash on that
159:25 - so we'll just hit up again
159:31 - and we'll try this one more time
159:34 - this time i think i got it
159:36 - we'll say yes and i'll see you back here
159:38 - when it's done provisioning we'll esta
159:40 - station the server and see if we can see
159:41 - that file but maybe like the best we'll
159:43 - get is just the command that it's
159:44 - executed okay
159:47 - all right so we didn't have much luck
159:48 - here um it says missing configure uh
159:50 - connection configuration for provisioner
159:52 - so probably what we need
159:55 - is we might need to specify a connection
159:58 - let me just see here so provisionary
160:00 - invokes a script a remote resource this
160:02 - can be used as etc
160:04 - the example just shows this
160:08 - right and so down below missing
160:10 - connection configuration so i'm thinking
160:12 - what it is is that it just wants the
160:14 - connection
160:15 - information so there's like a connection
160:16 - block for provisioners
160:18 - so we will go and type in terraform
160:20 - connection block
160:24 - i wasn't planning on showing this right
160:26 - away but if this is what it requires
160:28 - then we will provide it that it's not a
160:30 - big deal
160:31 - so i just want one for ssh i really wish
160:34 - they just had oh they do right there
160:35 - there's an example so what i'm going to
160:36 - do is go ahead and grab this
160:40 - actually this probably tells us where it
160:41 - would execute which is kind of the
160:42 - question we had there before
160:44 - um this does not use
160:48 - root first so it's gonna be ec2 user
160:51 - but there's no password
160:55 - okay
160:56 - let's go down below here so the address
160:59 - of the resource to connect to
161:01 - so i would assume that's just the ip
161:03 - address so we just say um
161:06 - self
161:09 - dot private ip
161:12 - actually that'd be public ip sorry
161:13 - public ip
161:16 - uh there is no password
161:19 - so we'll have to pass the private key so
161:21 - that's how we're going to do it so we
161:22 - will take that out here
161:24 - private key
161:27 - the contents of the ssh key this can be
161:29 - loaded from a file on disk using the
161:31 - file function so we've done that once
161:33 - before with file
161:35 - and
161:36 - we actually did this this one i believe
161:39 - oops
161:40 - trying to search in this file here
161:44 - there we go so
161:46 - i'm just going to go down below here so
161:47 - i can see what i'm doing
161:50 - um
161:52 - paste that in there whoops
161:55 - you know this uh this vs code doesn't
161:57 - always work how i want it to so we'll
161:59 - say private i
162:01 - private key
162:03 - oh sorry this is
162:06 - template file
162:09 - private key
162:15 - i mean it's not a template file it's
162:16 - just a file
162:20 - i don't know if we need to really assign
162:22 - it to data
162:26 - i'm going to go google this i'll be back
162:27 - in a sec all right so i took a look here
162:29 - and it seems like it's very simple it's
162:30 - just something like that that's always
162:32 - wondering that maybe we don't have to do
162:33 - a data source there
162:35 - um so what i'm just going to do here is
162:37 - just paste that in there like that
162:40 - and we will go down below
162:43 - to our connection here
162:48 - and this is going to be at the root
162:53 - terraform
162:55 - terraform
162:58 - okay so that looks good to me
163:00 - let me just go double check if there's
163:02 - any other parameters we're missing
163:05 - uh the host the address used to connect
163:07 - to the resource required the other one
163:09 - didn't have it i'm surprised that now
163:10 - i'm kind of like wondering if this is
163:11 - going to work because that other one
163:13 - didn't have the host so maybe it's old
163:15 - the path to use for the script um
163:18 - user type host
163:22 - hps this all looks fine there's really
163:25 - not that much to type in here so
163:27 - i think that we're all good to go and i
163:28 - think that this connection block is in
163:30 - the right area it's with the provisioner
163:32 - so let's pull the trigger and see what
163:34 - happens
163:36 - so we'll try another replace here
163:40 - okay
163:43 - say yes
163:47 - hopefully we're just lucky here so yeah
163:48 - that kind of answers the question what
163:50 - what it would use would be ec2 user
163:51 - there so
163:54 - all right so i'll be back here if we run
163:56 - into any errors okay
163:58 - all right welcome back so uh looks like
164:00 - it finished here and it did establish a
164:03 - remote connection it didn't say that it
164:04 - failed said that it connected and it
164:07 - probably executed that command that we
164:09 - were expecting here
164:10 - it's not saying that it failed in any
164:12 - way so let's go ahead and log in and see
164:14 - if we can see it if we don't that's not
164:16 - a big deal we don't have to really dwell
164:18 - on this to make sure it's perfect more
164:19 - so important that we just kind of go
164:20 - through the motions so that we
164:22 - understand what this is hey the file is
164:23 - there look at that so we can open it up
164:26 - let's see if it's there perfect
164:28 - okay so that is a remote exect and so
164:30 - then we can move on to i suppose
164:33 - transferring files okay
164:36 - [Music]
164:41 - all right so this last one should be
164:42 - really easy because i think that we can
164:44 - just modify this one and call it file
164:46 - and then specify file so file takes a
164:48 - source and a destination
164:50 - or a content which might be just easier
164:52 - in our case so we'll just say
164:53 - destination here
164:55 - and we'll say content
164:57 - we'll go look up how this works for file
165:01 - um
165:03 - yeah this one's a bit easier so that's
165:04 - what i'm going to do
165:05 - a little copy this over here
165:09 - and
165:10 - i'm going to just say
165:14 - bar soon which i think is the name for
165:16 - mars in that book there
165:18 - and
165:19 - we'll say dot txt
165:22 - we want the uh directory to be in the
165:24 - home
165:26 - uh home
165:29 - what did we say there before when we
165:31 - logged in
165:33 - it is
165:36 - i think i might need the full path here
165:37 - to know
165:39 - yeah help me see too
165:41 - so we'll say home ec2 user
165:44 - bars soon
165:46 - and the contents will just be mars
165:50 - and so i think that's all we have to do
165:52 - to get that to work
165:54 - content destination
165:57 - okay so let's go give that a go and see
165:59 - if it works
166:01 - so terraform we'll need to do a replace
166:03 - again we're actually logged in the
166:05 - server here so i'll just exit
166:08 - and we will go ahead and replace that
166:10 - again
166:11 - just double checking making sure
166:12 - everything's okay good we'll hit enter
166:20 - let's make sure we don't get any errors
166:21 - here
166:23 - looks like it's good press yes
166:25 - and i will see you here in a bit okay
166:28 - all right so it says that it's been
166:29 - created or at least replaced let's go
166:31 - take a look at our server give it a
166:33 - refresh it's probably in our
166:34 - initializing state we should probably
166:36 - still be able to log in there so we'll
166:38 - sshn
166:40 - and we'll type in yes
166:42 - we'll type in ls
166:44 - there's our file file bar soon i'm just
166:47 - going to cat it to see if it works
166:50 - um and i don't think the uh contents is
166:52 - there
166:54 - oh no it's there okay
166:56 - oh i guess because i wrote cat oh no
166:58 - it's right there it's just there's no
166:59 - line break all right so that all worked
167:01 - out great so uh we're pretty much done
167:03 - for provisioners here so what i'm gonna
167:04 - do is just tear this all down
167:07 - and we'll just we're all done okay so
167:10 - we'll just do a terraform just or i'm
167:12 - going to do a terraform apply
167:14 - auto
167:15 - or sorry destroy
167:18 - auto approve
167:24 - and we're all good so yeah i'll see you
167:26 - later
167:27 - [Music]
167:31 - all right so it looks like we do have
167:32 - one more uh follow along here for
167:34 - provisioners and it isn't all resource i
167:36 - thought it was in another section but uh
167:38 - we can do it here so i just noticed that
167:40 - i went back and i broke up the
167:42 - provisioners into separate folders there
167:44 - so that when i share this repository
167:46 - it's gonna be easy for you to find all
167:47 - those examples but let's switch over to
167:50 - this new folder i have here which is for
167:53 - the provisioner null resource
167:55 - and let's create ourselves a new main
167:58 - dot tf file
168:00 - so you know null resource just keeps
168:02 - cropping up in a lot of different use
168:03 - cases but one in particular that's very
168:05 - helpful for is waiting for those status
168:07 - checks uh when spinning up an aws
168:09 - instance so what we're going to do
168:12 - um is we're going to go to maybe one of
168:15 - our examples like the cloud init
168:18 - and
168:19 - we'll go ahead and grab this one okay
168:24 - and so now what i'll do is make my way
168:27 - down to null resource here
168:30 - and i do not believe i got rid of
168:33 - this remote workspace but just to make
168:35 - it easier we're just going to keep it
168:36 - local
168:38 - okay so i'm just going to delete that
168:39 - out of there
168:40 - and to simplify this further i mean we
168:44 - don't need all this stuff while we just
168:45 - leave it in it's not a big deal
168:48 - so i think that's what i'll do i'll just
168:50 - leave it in because i don't feel like
168:52 - ripping all this out to streamline this
168:55 - but
168:56 - what we want is to create a new resource
168:58 - called
169:00 - null resource here and just a moment as
169:03 - i have
169:05 - a reference for this it's not easy to
169:06 - remember so
169:21 - okay and so what we'll do here is create
169:24 - ourselves a null resource
169:27 - and i'm just going to call it status
169:30 - and it's going to have a provisioner
169:32 - inside of it here
169:37 - and it will do a local exec
169:41 - and what it's going to do is execute a
169:43 - command
169:45 - this is going to be the aws ec2 weight
169:47 - instance status
169:49 - ok
169:50 - check and so this is used to check
169:53 - whether it is done or not and so we'll
169:55 - have to do some interpolation and what
169:56 - we need to provide here
169:58 - is the instance id right so down below
170:01 - what i'm going to do is type in depends
170:03 - on
170:06 - and
170:07 - i think just type in ec2 instance here
170:12 - okay
170:16 - i don't use depends on very often so
170:17 - let's just go look it up and check its
170:19 - reference so depends on terraform
170:27 - to see an example and so here it's
170:29 - actually referring to a particular
170:30 - resource
170:31 - that seems like a good idea to me
170:35 - so
170:36 - what i'm going to do is go up here
170:40 - and just bring this down onto a new line
170:45 - i'm just going to say aws instance
170:48 - my server because we want that this to
170:51 - provision before this does and for null
170:52 - reasons we absolutely have to specify
170:54 - that relationship
170:56 - okay so we need to get the instance id
171:00 - here
171:01 - so
171:02 - i'm going to
171:06 - just try to take a single one here
171:10 - and
171:11 - i think the instance id i'm not sure so
171:13 - let's go look up on the terraform
171:15 - documentation so registry.terraform
171:19 - we'll make our way over to providers
171:20 - over to aws into documentation and we're
171:23 - going to type in abus instance
171:29 - and so what i want to know is if we do
171:32 - id do we get back the id i think we
171:34 - would
171:47 - oh well i can't seem to find it very
171:49 - quickly there but i'm almost certain
171:50 - that if we do
171:52 - dot id that's going to give us the
171:53 - instance id back
171:56 - so we'll just type in instance my server
171:58 - dot id
172:02 - and
172:04 - i mean other than the fact that the
172:05 - coloring looks a little bit off i think
172:07 - that is fine
172:08 - and so we'll go ahead and try to
172:11 - provision this and see if it works so
172:13 - we'll do a terraform validate here
172:16 - because i find the terraform plan a
172:17 - little bit slow
172:19 - actually before we do that we have to do
172:20 - a terraform in it
172:23 - this is a new repository
172:30 - i think there's not supposed to be p
172:31 - here so i'll remove that
172:44 - and this will probably fail if we don't
172:46 - bring in the um
172:49 - uh that provisioning file there so we
172:51 - need this user data file here so let's
172:52 - bring it over
172:57 - or it's going to complain
173:00 - i believe it's with a a so let's rename
173:02 - that so it has an a in there
173:05 - there we go
173:07 - okay back to this file here we'll try a
173:09 - terraform init
173:11 - or sorry a terraform
173:13 - validate
173:14 - let's see if it throws any errors
173:19 - we have one error here blocks of type
173:21 - resource are not expected here
173:24 - so maybe my nesting is incorrect and it
173:26 - is because i haven't nested within
173:28 - a resource we cannot do that so let's
173:30 - cut that out
173:32 - and we will place this resource here at
173:36 - the top level
173:43 - and we will run that again
173:49 - and so we have something else failed
173:51 - initiate provider registry hashicorp
173:54 - null to obtain schema unknown provider
173:57 - um
174:01 - we'll do terraform init again
174:03 - since it's asking for it
174:09 - it's installing the hashicorp null i
174:11 - think it's because we added that null
174:12 - resource so if we go over here to
174:15 - [Music]
174:17 - the registry
174:19 - go back to the top level we type in null
174:22 - so i believe this is what controls the
174:24 - null resource here
174:26 - okay
174:27 - so if we want to read a bit more about
174:29 - it i think it's all there so it is a
174:30 - separate plugin
174:32 - so now that we have that i'm going to do
174:33 - terraform validate
174:40 - okay looks good
174:42 - and
174:45 - what we'll do here is go ahead and
174:49 - do terraform apply
174:54 - and i'm happy with it because it passed
174:56 - well i guess we should do a plan first
175:10 - and yep it's just going to create stuff
175:12 - so that's all fine so what we'll do
175:15 - is type in terraform
175:18 - apply
175:20 - auto approve
175:22 - and what we're watching for is to see if
175:24 - it's going to wait for the status checks
175:27 - because that's what we care about
175:29 - okay so if we go back over here we're
175:31 - gonna have to pay close attention
175:36 - see what happens
175:57 - you
176:25 - you
176:48 - great so we scroll up here it looks like
176:50 - we hit an error
176:52 - um so it's saying
176:57 - that it does not like our command
177:06 - oh this is supposed to be easy too
177:09 - sorry spelling mistake so we will i
177:11 - don't know if this provision so i'm
177:12 - going to refresh here
177:14 - it did spin up an instance
177:18 - so we will have to tear down here so
177:24 - or what we could do is just do it
177:26 - terraform apply replace
177:28 - that probably easier to do
177:30 - we'll do data as instance my server
177:45 - and we'll go ahead and write yes and
177:47 - we'll see if it works this time
178:59 - okay notice that it's executing our
179:01 - status check here
179:41 - we may be interested also just try out
179:43 - this command while we're waiting up here
179:45 - if i press the plus i can open up a new
179:48 - uh terminal and i can even try it myself
179:50 - here
179:55 - so notice it's just kind of hanging
179:56 - because um it's it's set to wait
179:59 - so until it's actually uh working
180:02 - uh and then it returns that's when it
180:04 - will proceed so that's probably how it's
180:05 - working here so i'm just gonna go ahead
180:06 - and delete this window here and so it's
180:08 - just waiting until it gets a valid check
180:10 - so i'm going to go refresh here
180:11 - notice that it's initializing so we'll
180:14 - just wait
182:34 - all right so notice here it says the
182:37 - creation is completed if i give it a
182:38 - refresh the stats that pass the check so
182:40 - this null resource worked it as intended
182:43 - and once this command had completed and
182:45 - the small resource existed then it was
182:47 - ready so basically that is null resource
182:50 - you can also do triggers with it so
182:52 - let's take a look here quickly
182:55 - so a map of arbitrary strings that when
182:57 - change will force the null
183:00 - resources to be replaced so that is also
183:02 - something else we can do not something
183:04 - we're going to explore uh right now but
183:06 - um
183:07 - yeah there you go
183:09 - [Music]
183:14 - okay so we are done the uh provider
183:16 - section but i forgot to tell you to
183:18 - destroy the uh resource here i was just
183:20 - doing another follow along and i noticed
183:21 - that i still had it running so i'm just
183:23 - going back here and doing a terraform
183:26 - uh we'll do
183:28 - destroy
183:29 - okay so yeah just in case always
183:32 - consider that you run destroy at the end
183:34 - of these fall belongs okay
183:37 - and we'll just make sure that is going
183:38 - to work here just before we end here yes
183:42 - great and so we're all good
183:44 - [Music]
183:49 - hey this is andrew brown from exam pro
183:50 - and we are taking a look at terraform
183:52 - providers so providers are terraform
183:54 - plugins that allow you to interact with
183:56 - cloud service providers like aws azure
183:58 - gcp
183:59 - software as a service provider so github
184:01 - angolia
184:03 - stripe or other apis such as kubernetes
184:05 - or postgres servers there's a lot there
184:08 - there's like over a thousand providers
184:10 - so providers are required for your
184:11 - terraform configuration file to work so
184:13 - you have to have at least one provider
184:15 - providers can come in three different
184:16 - tiers we have the official one so
184:18 - published by the company that owns the
184:19 - provider technology or service verified
184:22 - so actively maintained up to date and
184:23 - compatible with both terraform provider
184:26 - communities so published by community
184:27 - member but no guarantee of maintenance
184:29 - up to date or compatibility providers
184:31 - are distributed separately from
184:32 - terraform and the plug-in must be
184:34 - downloaded before use so if we do
184:36 - terraform init this will download the
184:37 - necessary plug-in provider plugins
184:39 - listed in the terraform configuration
184:41 - file so there you go
184:42 - [Music]
184:47 - hey this is andrew brown from exam pro
184:49 - and we are taking a look at the
184:50 - terraform registry so this is a website
184:52 - portal to browse download or publish
184:54 - available providers and modules and just
184:57 - remember providers and modules are
184:59 - plugins within terraform both of them
185:01 - okay
185:02 - so to get to this website we go to
185:04 - registry.terraform.io
185:06 - and everything published to the
185:08 - terraform registry is public facing so
185:10 - let's just distinguish between providers
185:12 - and modules and i feel that i should
185:14 - have given providers a little bit more
185:16 - attention in the uh in its own slide but
185:18 - i'll give it a clear distinction between
185:20 - providers and modules here so a provider
185:23 - is a plug-in that is a mapping to a
185:26 - cloud service provider's api so if you
185:29 - wanted to call individual api actions
185:31 - that is what the provider is providing
185:34 - to you when we're talking about modules
185:36 - a module actually relies on a provider
185:38 - plug-in but a module is a group of
185:40 - configuration files that provide common
185:42 - configuration functionality this is
185:44 - going to help you enforce best practices
185:46 - reduce amount of code reduce time to
185:48 - develop scripts
185:50 - so the way to think about it is imagine
185:52 - that you have to do something in your
185:54 - csp like aws and there's just common
185:56 - things that would go along with it so
185:57 - let's say you're launching a load
185:59 - balancer auto scaling group with ec2
186:01 - instances that's a bunch of services
186:03 - that you are just very common you'd have
186:05 - to configure it together so there could
186:06 - be a module
186:07 - that allows you to do all that with
186:10 - writing very little amount of code and
186:11 - we'll choose best practices when doing
186:13 - that okay
186:14 - [Music]
186:18 - let's take a look here at providers and
186:20 - modules within terraform registry really
186:22 - quickly so um here is the aws one here
186:25 - and so i just want to point out that
186:27 - this official one is by hashicorp it's
186:28 - not by aws but it does mean that it has
186:31 - a proper support so you know it's going
186:33 - to have pretty much one-to-one mapping
186:34 - to the itabus api
186:36 - um and so it has really really good
186:39 - documentation now i complain about
186:41 - terraform not having great documentation
186:44 - for learning like their language but for
186:46 - the actual documentation of doing things
186:48 - practically they're really really good
186:50 - and here's just an example where we see
186:52 - app mesh and they just give you full
186:53 - examples for basically everything it's
186:55 - really great
186:56 - and if you need a code sample to get
186:59 - going like to actually install it within
187:01 - your configuration file it's right there
187:03 - over here so you can just go ahead and
187:05 - grab that for terraform
187:07 - modules
187:09 - it looks pretty similar so the idea is
187:10 - you get your module code on the right
187:12 - hand side here you want to check out the
187:13 - examples it's going to be dependent on
187:16 - who is developing these modules this one
187:18 - is made by anton so he has lots and lots
187:21 - of really great examples and then you
187:23 - can see a list of dependent modules here
187:25 - under sub modules so it's not too
187:27 - complicated so there you go
187:29 - [Music]
187:33 - so we're taking a look at terraform
187:34 - registry which is a public registry but
187:37 - let's talk about private registry how
187:38 - would we do that well that's where we
187:39 - use terraform cloud it allows you to
187:41 - publish private modules for your
187:43 - organization within the terraform cloud
187:45 - private registry when creating a module
187:48 - you need to connect to a version control
187:49 - system of vcs and choose a repository so
187:52 - here you can see
187:54 - we can be using something like github
187:56 - gitlab bucket or azure devops
187:59 - and of course we're going to cover
188:01 - terraform cloud a lot more further on in
188:03 - the course and it definitely does more
188:05 - than just
188:06 - act as a private registry but i figured
188:09 - this is the best place to put it against
188:10 - the terraform registry okay
188:12 - [Music]
188:16 - let's take a look at how we would get a
188:18 - list of the current providers you are
188:20 - using so all you'd have to do is type in
188:21 - terraform providers and you'd get a full
188:23 - list
188:24 - this command is useful if you have a
188:26 - very complex
188:28 - architecture where you're using a lot of
188:30 - files and modules within terraform i
188:34 - wanted to just show this command just
188:36 - because i saw it on the exam and so it's
188:38 - just an easy point if you happen to get
188:39 - that question okay
188:41 - [Music]
188:45 - so we know we can set multiple providers
188:48 - in our terraform configuration file but
188:51 - there are some variations here that you
188:52 - should know so one thing is is that if
188:54 - you need to have an alternate provider
188:56 - you can use this thing called alias so
188:59 - if you just notice here there's the
189:00 - alias this is useful if let's say you
189:02 - want to have resources within different
189:05 - regions of aws is a very common use case
189:08 - when you want to reference uh what
189:11 - resource should use what provider you're
189:13 - going to have that little provider
189:14 - attribute and then you're just going to
189:16 - do
189:17 - what the name is of the provider
189:19 - followed by the alias you can also set
189:22 - an alias provider for a parent module so
189:25 - notice here
189:26 - in the required providers we have this
189:29 - attribute here and we're using this
189:31 - configuration alias
189:33 - and then if you need to set an alias
189:34 - provider for a child module but more or
189:37 - less you just need to remember these two
189:38 - up here okay for setting an alias
189:41 - [Music]
189:45 - hey this is andrew brown from exam pro
189:47 - and we're giving closer attention to
189:49 - modules so a terraform module is a group
189:51 - of configuration files that provide
189:52 - common configuration functionality to
189:55 - enforce best practices reduce the amount
189:57 - of code and reduce the time to develop
189:58 - scripts i definitely had a lot of
190:00 - confusion understanding the difference
190:02 - between a provider and a module
190:03 - initially
190:04 - but the clear thing is that a provider
190:07 - is just an api mappings to uh the
190:10 - service okay so on the example here on
190:12 - the left we have aws as a provider and
190:15 - the example is to show you if you had to
190:16 - create a vpc you'd have to specify many
190:19 - networking resources and uh just notice
190:22 - that i have the three ellipses there to
190:23 - suggest there is a lot more that you'd
190:25 - have to configure but by using a module
190:27 - and there's one called the aws vpc
190:29 - module it basically has this short
190:31 - domain specific language
190:33 - that allows you to quickly provision
190:36 - a vpc so
190:38 - the easy way to remember modules is
190:40 - imagine clicking a wizard that creates
190:41 - many cloud resources like it must have
190:44 - the vpc wizard that's basically the idea
190:46 - behind modules just to kind of give a
190:48 - better contrast to the value that
190:51 - modules have we'll look at the azure
190:52 - provider so imagine you had to provision
190:54 - an azure virtual machine this is how
190:56 - much code you'd have to write so it's
190:58 - going to vary based on providers so aws
191:00 - does not require this much work it's
191:02 - very short uh gcp requires a little bit
191:04 - more work and for some reason azure
191:06 - requires a lot so this is a case where
191:08 - you'd want to use a module so there's a
191:10 - module called compute and network module
191:12 - and it reduces the code to amount of
191:13 - this still a bit long but that's just
191:16 - what it is okay
191:20 - [Music]
191:22 - all right let's talk about the fine line
191:23 - and this is understanding the gray areas
191:26 - of responsibility between terraform
191:27 - infrastructure as code and third-party
191:29 - configuration management tools like
191:32 - ansible so there are cases where
191:35 - when you get outside of aws as your gcp
191:37 - you might see
191:39 - providers like for postgres database and
191:41 - you might say okay well what part of
191:44 - terraform should be automating it and so
191:47 - that's a little bit more complicated
191:48 - question because terraform does more
191:50 - than one thing so terraform has
191:52 - providers modules and provisioners and
191:54 - then on outside of that if we're not
191:56 - even using terraform we have third party
191:58 - configuration management tools that we
191:59 - can use like ansible and the thing is is
192:01 - that you could have ansible do
192:04 - everything but that does not mean that
192:05 - you should have it do everything and
192:07 - with terraform
192:09 - more or less most of these levels you
192:10 - can have them do everything but that
192:12 - doesn't mean that they should right so
192:14 - the idea is to try to figure out what
192:16 - should be where and how to define that
192:18 - so let's talk about creating a database
192:19 - so if we created a database that is like
192:22 - setting up a new service so that is
192:24 - going to be under the providers
192:27 - and so you'd use the postgres terraform
192:29 - provider to set up a database now you
192:31 - have users and so users are
192:34 - an entity they're not just like loose
192:36 - data so there's something you can add
192:38 - remove add permissions to and we would
192:40 - treat them as entities and so it
192:42 - wouldn't necessarily be under the
192:43 - providers but that's a great place to
192:44 - put it under modules
192:46 - okay then you have your data so where
192:49 - would the data go
192:50 - well data is not necessarily an entity
192:53 - it's just a bunch of data so i would say
192:56 - that that is for provisioners that can
192:57 - run random scripts and then when we want
193:00 - to do things like backup tables to data
193:02 - warehouses or truncate data
193:05 - daily tables things that are repetitive
193:07 - tasks that is what we're going to use
193:10 - ansible for or a third-party
193:11 - configuration management tool outside of
193:13 - terraform you wouldn't have terraform do
193:15 - that stuff at all so when you have a
193:16 - task done one time to set up the
193:18 - database like seating data it's going to
193:21 - go to provisioners when you have
193:22 - repeatable tasks for ongoing maintenance
193:24 - it's going to be out as a third party
193:26 - provider and if you have something that
193:28 - is like identified as an identity like
193:30 - as a resource that you want to manage
193:32 - like asset management
193:34 - which are these things these are going
193:35 - to be over here in providers and modules
193:38 - i do want to point out that a
193:40 - provisioner can be using ansible but
193:42 - you'd still want to use ansible or
193:44 - third-party configuration management
193:45 - tool uh isolate or separate to do these
193:48 - kind of things you do not want terraform
193:50 - running these okay
193:52 - [Music]
193:56 - hey this is andrew brown from exam pro
193:57 - and we are moving on to our providers
193:59 - section so we already covered aws but
194:01 - let's go take a look at some different
194:03 - ones because i just want you to get a
194:05 - bit of familiarity with something else
194:07 - so you understand that there are
194:09 - different challenges with each one and
194:11 - how the providers are a little bit
194:12 - different so let's take a look at azure
194:14 - first and you're going to need the azure
194:16 - cli installed so if you do not have that
194:18 - already go to azure cli and get that
194:21 - installed
194:22 - it's going to vary based on your
194:24 - requirements the other thing is you have
194:26 - to have an azure account so i'm just
194:27 - going to go to my portal here
194:29 - to my sandbox
194:32 - i guess i haven't logged in in a while
194:33 - so i'm just going to have to open up
194:36 - that for azure
194:40 - hopefully they don't make it too hard on
194:41 - me here
194:52 - there we go and i'm in my azure portal
194:53 - so what i'm going to do here and if i'm
194:56 - still running ml studio i really got to
194:57 - shut that down
194:59 - uh it doesn't look like i am so that's
195:00 - totally fine okay so anyway
195:02 - um coming back to
195:05 - azure what we want to do is make sure
195:06 - you're on the registry go to providers
195:08 - go to azure and we're going to grab the
195:10 - information to configure this
195:14 - and i have a new folder here called
195:17 - providers azure so just make a main.tf
195:20 - and that we're going to paste the
195:22 - contents there and just make sure you're
195:24 - in the correct directory so make sure
195:26 - you're seated into that
195:28 - and i know because i've done this before
195:31 - i know that we need to
195:33 - specify
195:34 - features empty in here cannot tell you
195:37 - why i just know that you have to
195:39 - but there are a lot of different methods
195:41 - for authenticating with azure some very
195:43 - easy some very difficult we can use the
195:45 - cli when we're working in local mode
195:48 - when it comes to
195:49 - using terraform cloud the remote version
195:51 - it's a lot harder we have a lot a lot
195:54 - more options but we're going to take the
195:55 - easy route here and use the cli and this
195:59 - is going to be reliant on us doing the
196:01 - azure login okay
196:03 - so
196:04 - um we have the provider
196:06 - um i'm not sure why the provider name's
196:08 - not there i didn't delete it out
196:10 - i believe it's azure rm so we'll just go
196:12 - back here and make sure that is correct
196:14 - so i'm just gonna click click
196:16 - up here at azure azure rm
196:20 - okay
196:21 - and if we scroll on down i think it even
196:23 - shows you
196:24 - yeah you have to have it like that okay
196:27 - so
196:28 - um
196:29 - we'll do that and i'll just type in
196:31 - terraform init
196:35 - and it doesn't like something i don't
196:37 - know what happened to the names
196:39 - we'll just copy it again no biggie
196:42 - somehow i must have replaced it by
196:44 - accident
196:46 - and we'll do features here
196:49 - and we'll do terraform in it
197:00 - and one of the easiest things that we
197:01 - can create in terraform is probably a
197:03 - resource group if you're not familiar
197:05 - with the resource groups they're just
197:06 - kind of like a folder for your resources
197:08 - so i'm going to go here and make a new
197:10 - one
197:11 - let's just say resource so i believe
197:12 - it's azure
197:14 - rm underscore resource group
197:17 - as you can see i've done this a few
197:18 - times
197:19 - and i'm just going to say you know my
197:22 - resource group or i will just say um
197:26 - providers azure providers terraform
197:28 - azure providers sure why not
197:32 - and
197:34 - we will give that a name
197:42 - okay and we'll have to give the location
197:45 - i'm going to do
197:47 - east us
197:50 - all right and so that says that has been
197:52 - successfully initialized and so
197:55 - um
197:57 - i can do terraform plan this is not
197:59 - going to work until i do a login but i
198:01 - just want to see what it prompts us with
198:03 - if we attempt to uh
198:05 - provision this without any credentials
198:07 - in place
198:09 - actually to be fair i've probably done
198:11 - it before so i'm actually just going to
198:13 - run it because i think it'll just
198:14 - actually work for me because i might be
198:16 - i might already have credentials
198:18 - but what you'd want to do is just do
198:20 - easy login so i'll type in azlogin
198:26 - and that's going to authenticate my
198:27 - machine to azure
198:30 - so see how it opened up my browser i'm
198:32 - going to log in
198:33 - it says you are now logged in you can
198:35 - close this great
198:37 - i'm going to close that and if we go
198:38 - back
198:40 - um you know we have established a
198:42 - connection there so
198:45 - doesn't look like there's any error yep
198:47 - okay we're all good so now if i was to
198:50 - do a plan
198:53 - i don't think it would really throw an
198:55 - air until we do an apply
198:58 - see if this will work
199:01 - while it's going we'll just navigate
199:03 - over to resource groups
199:07 - as you can see i have a bunch of junk
199:09 - resource groups here that i'm not even
199:11 - using
199:13 - some point i should clean that up
199:19 - and
199:20 - it says we're going to create this
199:21 - resource group sounds good to me so i'm
199:23 - going to type terraform apply and just
199:24 - see if that works
199:27 - it's a bit nice not having to handle any
199:29 - it was credentials you know like passing
199:31 - those along with the cli though of
199:33 - course once you get into these other
199:35 - ones it becomes a lot more difficult
199:37 - um every time i have to set this up i
199:40 - have to really uh read through this it's
199:42 - like a lot of work
199:44 - but i imagine if you're working in azure
199:45 - every day it's not a big deal but
199:46 - basically you're just going to be
199:47 - setting a bunch of these in terraform
199:49 - cloud okay so you'd have to get your
199:51 - subscription id tenant id client id
199:54 - um and it's going to vary based on a few
199:56 - different uh scenarios there so
199:58 - anyway what we'll do is make our way
200:00 - back over here and it says
200:03 - do you want to perform these actions we
200:04 - are going to say yes
200:18 - and it says it has created that resource
200:19 - so if we make our way over to azure
200:23 - um and we give this a refresh sometimes
200:25 - their console is not always up to date
200:28 - like s aws is so it could be
200:30 - not showing up here and actually exist
200:33 - and so
200:35 - i don't see it yet
200:39 - and that's terraform for you so i
200:41 - believe that it does exist that it is
200:43 - there because it says here
200:45 - that it has created this here
200:48 - but yeah the um the azure portal is just
200:51 - like that it just takes time to update
200:53 - so i would just say let's assume that we
200:55 - did create it correctly because it did
200:56 - say that it made it and we'll wait for
200:59 - the cash to buy bust or whatever it has
201:01 - to do to
201:02 - make this show up here i mean it's also
201:05 - possible it could have ended up in a
201:06 - different
201:08 - tenant or or that but i don't think so
201:10 - because this is my main one so
201:12 - let's give this another refresh there it
201:14 - is see yeah so you just have to wait
201:15 - again terraform or sorry uh azure's
201:18 - portal is a lot slower than the bus but
201:19 - it also does a lot more so i guess
201:21 - that's kind of a trade-off there anyway
201:23 - so now that we've have a resource group
201:26 - probably a great idea to set up a server
201:28 - i'm going to tell you right now setting
201:29 - up a virtual machine in azure is
201:31 - extremely painful um i think that if we
201:34 - wanted to go take an example and see
201:36 - like
201:38 - azure virtual machine
201:41 - tutorial
201:44 - for terraform
201:45 - hashicorp has one
201:47 - here
201:48 - and
201:49 - actually no this is actually just on
201:51 - microsoft but look at all the stuff just
201:53 - to set up a single virtual machine like
201:55 - you have your resource group your
201:56 - virtual network your subnet your public
201:58 - ip your network groups your network
202:00 - interface
202:02 - like just tons and tons and tons of
202:04 - stuff so i don't do it this way what i
202:07 - do is i go to the modules
202:11 - because that's the easiest way to set it
202:12 - up for
202:14 - azure so we'll say oops we'll go
202:16 - registry
202:18 - and if we go to modules and we go to
202:20 - azure
202:22 - there's one for compute
202:24 - we just type in compute up here
202:28 - azure compute
202:31 - and this is like way way way easier so
202:34 - we have a linux server a windows server
202:35 - things like that
202:37 - we are going to need we have a resource
202:39 - group but we are going to need our linux
202:41 - server
202:44 - because i do not want to spin up a
202:45 - windows machine
202:48 - just because uh like linux is just very
202:50 - inexpensive that's the reason why it's
202:51 - not because i have an issue with windows
202:53 - i'm working on a windows machine right
202:54 - now
202:55 - uh we'll go ahead and copy the network
202:57 - in because that is just something we
202:59 - have to have
203:00 - and it might be nice to have the output
203:03 - of the the name of the server so we'll
203:06 - do that
203:08 - and we might need to modify this so that
203:10 - it makes sense because
203:11 - i named my resource group that so this
203:14 - one is just called example there so i
203:15 - might just have to swap that out like
203:17 - that
203:18 - and
203:20 - i really should have just named an
203:21 - example i would have saved myself a
203:22 - whole lot of trouble but i did not know
203:25 - i would have saved time if i did that so
203:28 - we'll just scroll on up here and i think
203:30 - that is okay
203:32 - it's not specifying
203:34 - what size a server it is and that is
203:37 - something that is very important to me
203:39 - because i want it to be inexpensive
203:42 - so i i know what we have to say it's
203:44 - called vm size
203:48 - and a very inexpensive one is standard
203:52 - uh b21s
203:55 - okay i remember that for my azure days
203:57 - making the azure courses
203:59 - and that will be
204:00 - very inexpensive and we're not going to
204:02 - keep it around for very long so it's not
204:04 - a big deal
204:05 - and i think that this is correct i'm
204:08 - just going to double check
204:10 - this looks all fine to me
204:12 - so what we'll do is go ahead and see if
204:15 - this will provision so we'll do
204:16 - terraform
204:18 - apply
204:20 - i actually want to do terraform init
204:21 - because we've installed a new module
204:27 - okay and so we can now do terraform
204:29 - apply
204:31 - and we'll just review it make sure that
204:32 - everything is okay and it's happy with
204:34 - it
204:38 - yeah i would say that um azure is the
204:41 - hardest
204:42 - thing to use with terraform and that's
204:44 - not terraform's fault that's just the
204:46 - complexity of azure
204:48 - um
204:49 - but you know again that's a trade-off
204:51 - you know azure can do a lot of things so
204:52 - you just have to decide
204:55 - what you want okay so we will type yes
204:57 - there's way too much to review there and
204:59 - i'm just going to hope that this
205:00 - succeeds
205:04 - and what we'll do
205:07 - is we'll go
205:08 - back to the top here and i'm just going
205:10 - to go over to my virtual machines
205:13 - and
205:14 - we'll refresh here so we don't see
205:16 - anything yet
205:20 - okay and that is creating
205:23 - this is going to take a little bit of
205:24 - time so i'll see you back here in a
205:25 - moment okay
205:27 - all right so it looks like i might have
205:28 - made a spelling mistake or a minor tweak
205:31 - here so it's saying that uh b b21s is
205:34 - not valid so what i'm going to do just
205:35 - to find out what sizes there are and get
205:37 - the right name i think we can find it
205:39 - this way here
205:40 - and if i go to
205:43 - b1
205:44 - ls
205:46 - okay so maybe i just missed the uh the l
205:48 - in there i'm just going to double check
205:50 - yeah so i guess i missed that so let's
205:54 - put the little l in there
205:57 - okay and let's see if that fixes that
205:59 - problem hold on here
206:01 - b1 ls
206:04 - b2s
206:06 - okay well sure
206:09 - whatever it wants right i just wanted to
206:11 - be cost effective so i mean you might
206:13 - have to look this up because you know
206:15 - might be the future and they've
206:16 - changed change them here um but i
206:20 - remember this being a valid option
206:24 - okay well it must be my mistake so
206:26 - i want just check it one more time b1 ls
206:30 - i don't trust it so i'm going to copy it
206:35 - just in case it's a capital i and so
206:37 - what we'll do is try this again
206:43 - and maybe we'll have better luck this
206:44 - time and actually just to save myself
206:47 - some time i'm going to just do auto
206:48 - approve
206:53 - okay and i'll see you here in a bit
206:54 - alright
206:56 - okay so after
206:58 - a little bit of waiting there it looks
206:59 - like it deployed successfully so we're
207:01 - gonna go over back to our virtual
207:03 - machines here and give it a refresh and
207:05 - there it is so yeah it wasn't too
207:08 - difficult to get that working um but
207:10 - yeah hopefully you can just see that
207:13 - when you want to figure out these
207:15 - providers here all you have to do again
207:18 - is go to here
207:20 - and go to the documentation go to the
207:22 - first section and that's where the
207:23 - authentication always is and that's the
207:24 - hardest part honestly is just getting
207:27 - beyond that part but you are going to
207:28 - find different challenges locally and
207:30 - also with the terraform cloud because
207:33 - the configuration is different so let's
207:34 - move on to a
207:36 - another provider
207:38 - all right so i actually forgot to
207:40 - destroy the resources here so i just
207:42 - kind of cycled back here i was actually
207:44 - in my gcp
207:45 - one here a moment ago but i just want to
207:46 - make sure that you've destroyed your
207:48 - resources there as well so just type in
207:51 - terraform
207:54 - uh destroy
207:57 - okay
208:02 - all right and just type in yes
208:08 - and you're all good to go
208:10 - [Music]
208:14 - all right so we just did azure and we've
208:16 - obviously done it the best so let's go
208:17 - ahead and do gcp
208:19 - and using gcp with azure is actually
208:22 - very nice because google's api is very
208:25 - concise and so it's not a lot of work to
208:27 - set up anything there
208:29 - but authentication is kind of a pain um
208:32 - again aws still has the easiest method
208:34 - of authentication just dropping those
208:36 - keys in not to say that the methods are
208:38 - bad there's just again kind of a pain to
208:39 - set up so what we're going to do is grab
208:43 - our provider information
208:45 - and
208:46 - we will have a new folder here i'm
208:48 - calling this main.tf
208:51 - and we'll paste it in here as such
208:54 - okay
208:55 - um
208:56 - and
208:58 - if i remember correctly to configure
209:00 - this we need a bunch of stuff it's like
209:02 - credentials and other stuff i'll go back
209:05 - here and just see what information we
209:07 - have
209:09 - and so this is this one's a bit odd
209:11 - because it doesn't show that maybe it's
209:12 - under guides
209:14 - um
209:15 - configuration reference
209:18 - we're just looking for the credentials
209:24 - adding credentials
209:30 - okay
209:34 - oh maybe it's under here credentials
209:37 - yep so this would be the options we want
209:39 - here i think this is under the provider
209:41 - because i'm just starting to recognize
209:42 - the name like credentials projects
209:44 - region zones these are the things i
209:46 - remember having to set for it so what
209:48 - we'll do is go over here and again see
209:50 - like the documentation's a little bit
209:51 - harder to get through i mean it's
209:53 - probably all here it's just a lot of
209:54 - work to read honestly
209:56 - um and so i'm gonna do credentials
209:59 - okay i'm going to do project
210:02 - i'm going to do region
210:05 - i'm going to do zone
210:07 - and i'm likely going to want to do this
210:09 - in us central 1 because that is
210:12 - usually what i like to do for
210:16 - tcp
210:18 - i believe this is u.s central one there
210:20 - i'm just making sure i've spelt it right
210:22 - that doesn't look right to me
210:24 - and so we'll have to create ourselves a
210:26 - new project probably so what we'll do
210:29 - is go over to google cloud
210:32 - bye bye azure
210:36 - and
210:37 - we can create ourselves a new project
210:39 - probably be a good idea for this
210:41 - console
210:46 - and we'll give it a moment here
210:50 - and i'm going to go over
210:52 - up here to the top
210:54 - and
210:55 - i'm going to i think that was the test
210:57 - one i did a while back but i'm going to
210:59 - just say make a new project here
211:01 - and this one is going to be terraform
211:04 - gcp
211:05 - example
211:08 - and we'll go ahead and create that
211:13 - it's usually a very very quick
211:17 - creation in progress
211:22 - we'll give this a hard refresh here
211:29 - okay
211:30 - uh and it is now ready so we'll just
211:32 - switch over to that project um i need
211:34 - the project id which is right here so
211:37 - we'll grab that there
211:39 - and we'll paste that in there
211:42 - and now we need credentials
211:45 - so
211:46 - i never remember how to do this we'll
211:47 - say json
211:49 - credentials gcp i just remember that
211:50 - it's a json file there's something like
211:52 - with service accounts and things like
211:53 - that
211:55 - so
211:57 - seems like we'll go here
212:05 - and
212:06 - we want to go into
212:08 - our
212:09 - gcp one here
212:13 - and i'm just going to check my app as a
212:16 - reference
212:20 - i don't remember being that hard
212:25 - my server's account
212:28 - click continue
212:33 - i do not remember this whatsoever okay
212:35 - let me just read through here quickly
212:38 - yeah i do think we have to create a
212:39 - service account i just don't remember
212:41 - what rules click the select the role the
212:43 - role field effects which resources you
212:44 - want i just want everything okay so
212:48 - um
212:53 - i want to be i just i'll be an owner
212:54 - because that'll give me full access to
212:56 - everything there and we'll go ahead and
212:57 - hit continue
212:59 - uh this is optional so i'm just going to
213:01 - hit continue here
213:03 - and so now i am in and so from here what
213:06 - we can do is go ahead and create
213:07 - ourselves uh i guess we don't have to
213:09 - create any things we just have to
213:10 - download our key
213:13 - so just looking at this here
213:16 - um
213:17 - [Music]
213:21 - which one is it
213:24 - i cannot tell
213:27 - august 18th
213:30 - that's kind of today um so i think this
213:32 - is where our key would be
213:34 - so if we go to manage keys
213:38 - should be able to
213:39 - download them here
213:44 - maybe i can create it ah here we go okay
213:48 - it's tricky so it just downloaded it
213:50 - right now
213:51 - and like this is so hard for me to
213:53 - remember like i just have a really hard
213:55 - time with tcp
213:56 - around permissions and credentials i
213:58 - don't know why it's my abs brain for you
214:00 - and so what i want to do is place it in
214:02 - this folder just to make our lives
214:04 - really easy
214:06 - okay and we'll just paste that on in
214:07 - there
214:10 - i'm really surprised i can remember all
214:11 - that okay and but i guess the thing is
214:13 - once you're set up you just you don't
214:15 - ever have to think about the stuff again
214:17 - but every time you have to do it's very
214:18 - painful okay so our credentials are in
214:21 - and so this should
214:22 - work
214:24 - um
214:24 - we're gonna need something to provision
214:26 - so i'm going to go back over to gcp
214:29 - we'll just say gcp terraform
214:33 - actually it might be up here
214:36 - and i want to go back to the
214:38 - documentation and i believe that was
214:41 - like it's probably like it always starts
214:42 - with the name so it's google and their
214:44 - services compute so it's probably
214:46 - instance
214:49 - compute engine
214:56 - there it is okay
214:58 - and
214:59 - we'll just see what kind of examples we
215:01 - have here might scroll down have
215:03 - something at the bottom nope the only
215:05 - example we have here is this
215:07 - so i'm just going to quickly read
215:08 - through it and see if it is good for us
215:10 - to use
215:12 - um
215:13 - yeah it looks fine i know that we're
215:15 - going to need a boot disk
215:16 - and we're going to need a network
215:18 - interface
215:19 - we don't need to scratch this we don't
215:20 - need all these things so i'm just going
215:21 - to pair this down okay
215:23 - so we'll go ahead and grab on all this
215:26 - stuff
215:28 - just seems like so much
215:31 - and i'm gonna go down below
215:36 - and we do not have to place in a service
215:38 - account we do not need metadata for this
215:41 - example
215:42 - we'll take out the metadata information
215:44 - the network interface is fine we don't
215:47 - need to put anything in here
215:50 - we will have it on the network
215:52 - as default because it'll save us some
215:54 - time we do not need to specify the
215:56 - scratch disk
215:58 - we definitely need a boot image and
216:01 - i'm going to go debian 10 for fun i feel
216:03 - like 10 is probably out
216:05 - we don't want tags right now it's not a
216:07 - big deal
216:09 - is the zone uh it's almost the zone i
216:11 - want actually i don't think i even need
216:13 - to specify the zone i think it will just
216:14 - like pick up on what i have in my
216:16 - credentials
216:18 - the machine type i want this to be
216:19 - inexpensive i believe it's called micro
216:21 - and we need to give this a name so i'm
216:23 - just going to say terraform instance
216:26 - and i'm just going to say like vm
216:28 - instance up here
216:31 - and let's give that a go
216:33 - terraform plan
216:42 - i'm just hoping that it's going to pick
216:44 - up that credential file here locally and
216:45 - i did that all right
217:07 - okay so what we'll do is scroll up says
217:10 - no changes objects have changed outside
217:12 - of terraform well haven't provisioned
217:14 - anything yet
217:16 - oh you know what i'm in the wrong folder
217:18 - okay i always tell you to be in the
217:19 - right folder and i'm not even the
217:20 - correct folder myself
217:22 - so we need to go back a directory
217:26 - saying like i hadn't provisioned
217:28 - anything what is it talking about so
217:29 - we'll do terraform in it to get gcp
217:31 - installed there
217:33 - i was very surprised like we weren't
217:35 - getting errors okay
217:41 - okay good and so now we'll do a
217:42 - terraform plan
217:48 - and while that's going on i'm just going
217:50 - to bring this up into gcp and make our
217:52 - way over to compute
218:03 - okay
218:04 - and
218:05 - [Music]
218:07 - one to add no problems good so we'll do
218:10 - a terraform apply
218:13 - auto approve
218:23 - it has not been used in this project
218:25 - before oh so we've got to enable it of
218:27 - course
218:31 - compute api
218:38 - well
218:39 - didn't take me to the right place
218:42 - that's something i don't like is their
218:43 - uh
218:45 - their api jumps around everywhere i
218:47 - don't want to try it i just want to use
218:48 - it says it's enabled oh i'm in the wrong
218:50 - thing
218:52 - we'll go down here to terraform gcp
218:54 - example
218:55 - and now we'll enable it
219:04 - maybe we just didn't see it because we
219:06 - were in the wrong project
219:08 - i like how the search just vanishes here
219:10 - like that's a great ui choice there
219:12 - google
219:13 - okay
219:15 - you can see like azure really has other
219:17 - than the fact that it's slow it has a
219:18 - really really good
219:19 - uh ui that's someone that likes using
219:21 - aws for you
219:24 - um
219:28 - oh i guess it probably would have
219:29 - brought us here anyway um so i think
219:31 - we're just waiting for this to enable
219:34 - oh maybe the search was here the entire
219:35 - time okay i was just complaining because
219:37 - i didn't see it
219:41 - i don't know why they just wouldn't keep
219:42 - that expanded all the time though
219:43 - honestly
219:45 - i'll hit enable again i'm pretty sure
219:46 - that it is enabling
219:48 - this is initializing it is now enabled
219:51 - sometimes it's better to trust what's
219:52 - over here as opposed to what's here
219:58 - so i believe that it's enabled and the
219:59 - ui is just being a bit slow so i'm going
220:02 - to go here to auto approve
220:04 - and what i'll try to do is maybe just
220:06 - click back here
220:09 - there's nowhere to go back
220:13 - i'm just going to click into another one
220:15 - sometimes that helps
220:19 - then we'll go back to compute
220:27 - is this enabled yet
220:29 - required compute zones get permission
220:33 - forbidden
220:35 - well i'm an owner so i should have
220:37 - everything
220:40 - okay
220:42 - at least this is enabled now i'm going
220:43 - to try this one more time just in case
220:45 - the permissions were still kind of like
220:47 - enabling there
220:53 - okay um
220:58 - so that's our problem
221:05 - service accounts
221:14 - click into that
221:21 - okay maybe i was creating it in my app
221:23 - and i was in the wrong place that's
221:24 - probably what where i was and that's why
221:26 - i was so mixed up yeah so this is in um
221:29 - another test account and so when i
221:31 - created that service account i created
221:32 - in the wrong place if you made it in the
221:34 - right account you're not going to have
221:35 - this problem as i did you can just you
221:37 - probably aren't even countering this
221:38 - error
221:39 - but i am so i will go ahead and manage
221:42 - keys and we will create ourselves a new
221:44 - key
221:52 - sorry about that
221:54 - and and i mean it makes sense because it
221:56 - says my app here so clearly i generated
221:58 - the wrong one
222:00 - okay we'll drag that one over
222:06 - yes i understand it's very secure and
222:08 - i'll go here
222:10 - and i will copy that
222:17 - what we'll do here
222:18 - whoops i don't want that there we will
222:21 - scroll on down
222:27 - and delete that
222:30 - we'll do an auto approve
222:34 - and i believe that this will work now
222:35 - we'll have the correct permissions
222:52 - so yeah i believe it is working now oh
222:54 - that was fast there we go
222:55 - and so we'll go back over here and we
222:58 - will make our way back to compute
223:05 - vm instances here
223:11 - and there it is okay
223:13 - so we can go ahead and do a destroy here
223:20 - terraform destroy
223:29 - yes
223:32 - and we're all done okay
223:36 - [Music]
223:41 - hey this is andrew brown from exam pro
223:42 - and we are looking at hashicorp
223:44 - configuration files also known as
223:46 - terraform files that which contain the
223:48 - configuration information about
223:49 - providers and resources
223:51 - this is basically core to terraform and
223:53 - that's what we're doing so terraform
223:55 - files end in the extension of tf or
223:58 - tf json and we'll talk about the json
224:01 - case a little bit later but terraform
224:03 - files are written in the terraform
224:05 - language and so here is kind of an
224:07 - abstract way of looking at the language
224:09 - i know it's confusing here but don't
224:10 - worry we're going to reiterate on it to
224:12 - make more sense but terraform language
224:14 - consists of only a few basic elements
224:16 - you have blocks and so these are
224:18 - containers for other content and they
224:20 - represent an object so i'll have a block
224:22 - type which can have zero or more labels
224:24 - and a body you have a block label it's a
224:27 - name of a block you have arguments which
224:29 - is uh which is what you assign a value
224:31 - to a name so notice like we have
224:33 - assignments so we have identifier to an
224:35 - expression okay they will appear within
224:37 - blocks so here it is within a block as
224:39 - you can see
224:40 - expressions represent a value either
224:43 - literally or by referencing and
224:45 - combining other values they appear as
224:47 - values for arguments or within other
224:49 - expressions
224:50 - you might come across hashicorp
224:52 - configuration language so hcl and this
224:54 - is the low-level language for both the
224:56 - terraform language and alternative
224:58 - json syntax i don't know if we'll be
225:00 - getting into it in this course um or if
225:02 - there's even an easy way to distinguish
225:04 - it because it's basically terraform
225:05 - language but just if you see hcl just
225:07 - think terraform language is the easiest
225:09 - way to think about it okay
225:14 - [Music]
225:15 - let's take a look here at the alternate
225:17 - json syntax so terraform supports
225:19 - alternate syntax that is json compatible
225:22 - terraform expects json syntax files to
225:24 - be named
225:24 - tf.json so we mentioned that earlier and
225:27 - so this is generally what it would look
225:29 - like okay
225:30 - the syntax is useful when generating
225:32 - portions of a configuration
225:33 - pragmatically since existing json
225:35 - libraries can be used to prepare the
225:36 - generate configuration files
225:39 - and that's pretty much it would you want
225:41 - to work on this it's up to you
225:43 - but
225:44 - yeah so that's the reason for this
225:46 - alternate syntax
225:47 - [Music]
225:51 - all right let's take a look at terraform
225:52 - settings so the terraform configuration
225:55 - block type terraform curly braces you'll
225:57 - see this within your configuration file
225:59 - is used to configure some behaviors of
226:01 - terraform itself so here is what it
226:04 - looks like and what's very common is
226:05 - you're going to see those required
226:06 - providers so there are different things
226:09 - that we can put in here so we can put
226:10 - the required version so this expects us
226:13 - to match to a particular version of
226:14 - terraform required providers this is the
226:17 - providers that will be pulled during the
226:19 - terraform init we can also do
226:21 - experiments here so these are
226:22 - experimental language features that the
226:24 - community can try and provide feedback
226:26 - on and then we have provider metadata so
226:28 - this is module specific information for
226:31 - providers okay
226:32 - [Music]
226:37 - hey this is andrew brown from exam pro
226:39 - and we are taking a look at the
226:40 - hashicorp configuration language also
226:42 - known as hcl i'm going to tell you i was
226:45 - really confused at the start working
226:47 - with terraform because sometimes they
226:48 - mentioned things like hashicorp
226:50 - configuration files hashicorp
226:52 - configuration language tariff language
226:54 - and i could not discern you know what
226:56 - the difference was but so this is the
226:58 - idea here is to give you that clarity
227:00 - okay so hcl is an open source toolkit
227:02 - for creating structured configuration
227:04 - languages that are both human and
227:06 - machine friendly for use with command
227:09 - line tools and it's an open source
227:10 - project so you can find it at github.com
227:12 - forward slash hashicorp hcl so the idea
227:15 - is that they have this baseline language
227:17 - that you can extend for your own use
227:19 - case so
227:21 - terraform is using it and so
227:23 - it uses a good like it uses the language
227:26 - itself but then it goes ahead and
227:27 - extends it by adding additional
227:29 - functionality for its specific use case
227:31 - and this hcl based language is not just
227:35 - for terraform it's used for packer
227:37 - templates vault policies
227:39 - boundary controllers and workers console
227:42 - configuration waypoint application
227:45 - configuration nomad job specification
227:48 - and this one isn't a hashicorp product
227:50 - but this is an open source project
227:51 - called shipyard and you can use it for
227:53 - shipyard blueprints surprisingly
227:56 - sentinel which is a hatchet corp
227:58 - policy as code
227:59 - service um does not use hcl but it has
228:03 - its own hc acl custom language uh but
228:07 - the idea is that you know we're looking
228:09 - at mostly uh the use case is for
228:12 - hashicorp services
228:14 - but if you wanted to extend this
228:16 - language for your own use case you
228:17 - totally could
228:19 - and so i think that's really cool but
228:20 - hopefully that kind of distinguishes
228:22 - between hcl and terraform language okay
228:28 - [Music]
228:29 - hey this is andrew brown from exam pro
228:31 - and we are taking a look at input
228:33 - variables so also known as terraform
228:35 - variables or just variables are
228:37 - parameters for terraform modules that is
228:39 - the way we get data in to our
228:42 - configuration scripts is via input
228:44 - variables so you can declare variables
228:46 - in either the root module or child
228:49 - modules and the way you define them is
228:51 - via this variables block there at the
228:54 - top and just to kind of go over the
228:57 - possible fields for that block we have
228:59 - the default option so the default option
229:01 - which is here is going to be the default
229:03 - uh variable if you do not set it
229:06 - for type this is an argument that
229:07 - specifies the value types that are
229:09 - accepted for the variable so this case
229:11 - up here we can see string and this one
229:13 - is a list
229:15 - for description this specifies the input
229:17 - variable's documentation we don't see an
229:19 - example there i believe that is optional
229:21 - but it's always great to put a
229:22 - description in when you can there is a
229:24 - validation block so a block to define
229:26 - validation rules usually in addition
229:29 - addition to type constraints so we don't
229:31 - see that here on the right hand side but
229:33 - the idea is that you know this just
229:34 - makes sure that there's less of a human
229:36 - error entering the wrong information you
229:38 - can also have sensitive this limits
229:41 - terraform ui output when the variable is
229:43 - used in the configuration and we will
229:45 - cover sensitive a lot more in this
229:47 - course outside of just this one slide
229:49 - okay
229:53 - let's take a look here at variable
229:55 - definition files and these allow you to
229:57 - set the values for multiple variables at
229:59 - once so variable definition files are
230:01 - named with the dot tf vars extension or
230:04 - if you want to use the alternative
230:05 - syntax it's the
230:07 - tfvars.json file by default
230:10 - if you have a file called terraform.tfrs
230:13 - within your project directory this will
230:15 - be automatically loaded so it's pretty
230:16 - common to make that file
230:19 - to create a
230:21 - definition file it just uses the
230:22 - terraform language so you would just
230:24 - assign
230:25 - values here you wouldn't make variable
230:27 - blocks but you just
230:29 - define these um
230:31 - identifiers and give them values okay
230:34 - [Music]
230:38 - another way of loading input variables
230:41 - is via environment variables and this is
230:43 - very common
230:45 - way of loading them if you have your own
230:47 - cicd process
230:48 - for terraform so if you're using
230:49 - terraform cloud or you're using some
230:51 - kind of build server that's going to be
230:53 - the primary way you're going to get
230:54 - variables
230:56 - into
230:57 - those build servers
230:59 - probably won't be doing this much
231:01 - locally but the way it works is that
231:03 - terraform will watch for any environment
231:05 - variable starting with tf underscore var
231:08 - underscore followed by the name this is
231:10 - very important to remember because it
231:11 - definitely will show up on the exam
231:14 - so let's say we wanted to set a variable
231:16 - for an image id so we do tf underscore
231:20 - var
231:20 - uh and then image id probably most cases
231:23 - when you follow the name it's going to
231:24 - be a lowercase
231:26 - underscore i don't think you'd probably
231:27 - want to uppercase that stuff and you
231:29 - just set the value okay
231:31 - [Music]
231:35 - so there's a lot of ways for us to load
231:37 - input variables we just saw two so we
231:39 - saw terraform tfrs and environment
231:42 - variables but there's a lot more caveats
231:44 - to this so let's just run through them
231:46 - so we already covered uh terraform.tfrs
231:49 - the idea here is that if you create this
231:50 - file and it's in your project it will
231:52 - automatically be loaded we're running
231:53 - terraform apply you can name other tfr
231:57 - files so i just call them these
231:58 - additional tfr files but they won't be
232:00 - loaded by default you'll have to use a
232:02 - command line to load them this is useful
232:04 - if you have like a dev and prod
232:05 - environment and you want to swap those
232:08 - out now if you want to have
232:11 - files that auto load then you can just
232:13 - put the dot auto here and give it any
232:15 - name you want this would be useful if
232:16 - let's say you had a very large terraform
232:18 - tfrs file and you wanted to break it up
232:20 - to make it more human readable
232:22 - you could do that then you have the
232:25 - hyphen var file flag when you're doing
232:27 - tear from apply or
232:29 - or plan and this is actually how you
232:31 - load up these additional variable files
232:33 - if you need to override a single value
232:35 - you can use hyphen var so here i'm
232:37 - overriding the ec2 type to be t2 medium
232:39 - and then lastly here we have environment
232:41 - variables we cover this this is where it
232:43 - starts with tf underscore var underscore
232:46 - followed by the name and this is going
232:48 - to be very common when you are using
232:50 - code build servers or runtimes to run
232:53 - this in a ci cd automated way now
232:55 - there's a presence to which these get
232:57 - loaded meaning that uh
232:59 - that certain configurations of vari or
233:02 - input of variables will override other
233:03 - ones so as we go down this list these
233:05 - ones will override the previous one so
233:07 - at the top you have environment
233:08 - variables if you have a terraform tfrs
233:10 - file that will override the environment
233:12 - variables
233:13 - if you have the json one that will
233:15 - override that one if you have auto files
233:17 - that will override the default
233:19 - tfrs file and then on the last list you
233:22 - have hyphen var and hyphen var file will
233:24 - override the rest so there you go in
233:26 - terms of the exam they're not going to
233:28 - ask you the precedence here but you're
233:29 - going to need to know what var var file
233:32 - are environment variables are in this
233:33 - default one okay
233:38 - [Music]
233:39 - all right let's take a look here at
233:41 - output values which are computed values
233:42 - after a terraform apply is performed
233:44 - output values allow you to obtain
233:46 - information after resource provisioning
233:48 - such as a public ip address output a
233:51 - file of values for chromatic integration
233:53 - cross reference stacks via outputs in a
233:55 - state file via terraform remote state
233:57 - and so here's an example of an outputs
234:00 - block so notice that there's a block and
234:03 - you specify some stuff there you can
234:05 - optionally provide a description it's
234:06 - not necessary but generally with outputs
234:08 - i would recommend putting that in there
234:10 - you can also mark it as sensitive so it
234:12 - does not show in your terminal this is
234:15 - important if you're doing like logging
234:16 - stuff you don't want to compromise those
234:18 - values there but understand that
234:21 - output values um
234:23 - even though they might not be outputted
234:25 - to your terminal or sd out
234:27 - they will be visible within the state
234:28 - file so if somebody opens up the state
234:30 - file they're going to be plainly visible
234:32 - there so just understand that sensitive
234:34 - does not protect the values there okay
234:38 - now in terms of how we would use the cli
234:40 - with output values
234:41 - if we type terraform output it's just
234:43 - going to print out all the values that
234:44 - are within the state file i don't show
234:46 - this in the example here but if you
234:48 - wanted to use a um
234:51 - a like
234:52 - bash command to
234:54 - parse json you could extract them out
234:56 - and see they're just plainly in the json
234:57 - okay if you need to get exactly
235:00 - a particular field you type in terraform
235:02 - output and then followed by the name if
235:04 - you want it in a json format all the
235:07 - output then you could give that flag i
235:09 - don't know if it would work with this
235:10 - one i actually didn't test i just
235:12 - thought about that here for this one
235:13 - here
235:14 - if you want the raw output of it meaning
235:16 - like if you output a string and you want
235:19 - it to be escaped or what have you then
235:21 - you could use it pragmatically by
235:23 - passing it to something like curl to do
235:24 - something but the idea with all these
235:26 - output values is that it's one way of
235:28 - inspecting but you could also use this
235:29 - in a configuration script or or
235:32 - something to do kind of like an after
235:33 - action okay
235:34 - [Music]
235:39 - all right so we're taking a look at
235:40 - local values also known as locals that
235:43 - assigns a name to an expression so you
235:44 - can use it multiple times within a
235:46 - module without repeating it so here what
235:49 - we're going to do is define our local
235:51 - block up here and then the idea is that
235:53 - we're assigning these names or ids
235:56 - expressions or values so that we can
235:58 - reuse them throughout our code
236:00 - notice that we can define multiple local
236:02 - blocks in the same file
236:04 - and i just say this because like when
236:05 - you use required providers you're only
236:07 - allowed to have a single block but this
236:08 - case like with variables or locals you
236:10 - can have many
236:12 - and you can even nest them within each
236:13 - other so notice down here we're
236:15 - referencing local within a local so
236:18 - that's totally possible and i imagine
236:19 - it's in the order to which
236:21 - it is specified we can do static values
236:24 - or computed values so we can actually
236:26 - here's a function write an expression
236:28 - and then it'll output a value
236:31 - once a local value is declared you can
236:33 - reference it via the dot as local dot
236:36 - the name so here notice within our abuse
236:39 - resource we have local and common tags i
236:41 - have to point this out but when you're
236:43 - referencing you use the singular local
236:46 - because you might get an exam question
236:48 - which shows you local dot or locals dot
236:50 - and
236:51 - the trick here is you got to remember
236:53 - which one it is locals help
236:55 - can help dry up your code it is best
236:58 - practice to use local sparingly since
237:00 - it's in terraform it's intended to be
237:02 - declarative and overuse of locals can
237:04 - make it difficult to determine what the
237:07 - code is doing this all comes back to
237:09 - describing terraform as declarative plus
237:11 - where they give you functionality that's
237:13 - imperative like but the idea is that uh
237:15 - you know if you overuse these you can
237:17 - run into trouble okay
237:22 - [Music]
237:23 - hey it's andrew brown from exam pro and
237:25 - we are taking a look at data sources for
237:28 - terraform so the idea here is you want
237:30 - information defined outside of terraform
237:33 - and stuff defined by another separate
237:35 - terraform configuration or modified by
237:38 - functions so the idea here is we are
237:40 - going to define ourselves a data block
237:42 - and we have an external resource we're
237:44 - looking for so we're saying hey i want
237:46 - to see if i have an aws ami we're going
237:49 - to use these filters as a way of kind of
237:52 - selecting it within our aws account so
237:55 - we'd have a provider set up and so it'd
237:57 - be looking within that account to find
237:58 - it and it's even saying look for the
238:00 - most recent ami okay
238:03 - and once we
238:04 - have
238:05 - found that data source we can just
238:06 - reference it so notice we're using data
238:09 - to reference it there so data aws ami
238:12 - dot web id
238:13 - so there you go
238:18 - [Music]
238:19 - we're taking a look here at name values
238:21 - and these are built-in expressions that
238:23 - reference uh various values you'll find
238:25 - your configuration scripts we do cover
238:27 - these in their respective sections but i
238:29 - wanted to consolidate them here in one
238:31 - place just so that you get a second
238:34 - chance to reinforce this information
238:35 - because crux of questions on exam could
238:38 - be based on knowing how the name values
238:41 - work so let's go through them the first
238:42 - is resources i'm going to get up my pen
238:44 - tool here and so the way resources work
238:46 - is that you start with the resource type
238:49 - so adabus instance and then you're going
238:51 - to do the name of it so there's nothing
238:52 - that
238:54 - starts before the left-hand side of it
238:56 - so just remember it just starts with
238:57 - that resource type then you have input
238:59 - variables and that starts with var
239:01 - period so that's the singular var then
239:03 - we have local values and again that's
239:05 - singular so local period for child
239:07 - modules it starts with module period
239:09 - again singular for data sources it's
239:11 - going to be data singular just remember
239:13 - singular because they can have a match
239:16 - up on the on the exam questions where
239:18 - it'll be like data or data
239:19 - for file system and workspace info we
239:21 - have path.module this is the path of
239:23 - module where the expression is placed we
239:25 - have path dot root this is the path of
239:27 - the root module of the configuration we
239:29 - have path cwd this is the path of the
239:31 - current working directory and in
239:33 - practice
239:34 - the default cwd is the same as the route
239:36 - so those would be technically the same
239:38 - we have terraform dot workspace this is
239:40 - the name of the currently selected
239:41 - workspace then we have block local
239:43 - values these are things that appear
239:45 - within a body of a blocks so this could
239:48 - be within a resource provisioners things
239:50 - like that so we have if we're using the
239:53 - count meta argument we're going to get
239:54 - count and with that we'll have count dot
239:56 - index so we can say okay this is the
239:58 - uh fourth iteration of you know uh this
240:02 - this count loop um then we have for each
240:05 - and this allows us to have the key and
240:07 - the value so we can access that during
240:08 - our iterations we have self so selfless
240:11 - uh references information within
240:13 - provisioners or connections
240:16 - so it's just like a self-referencing
240:17 - thing name values resemble the attribute
240:19 - notation of map or object values but are
240:22 - not objects and do not act as objects
240:24 - you cannot use square brackets to access
240:26 - attributes of name values like an object
240:28 - so there you go
240:29 - [Music]
240:34 - hey it's andrew brown from exam pro and
240:35 - we are going to be learning all about
240:37 - variables and outputs so let's get to it
240:39 - here uh and
240:41 - the first thing we're going to do is
240:43 - create ourselves a new folder and just
240:45 - so you know that these file names might
240:47 - change because i have yet to actually
240:49 - publish this as i'm creating this course
240:51 - so you know if this one isn't 0 4 0
240:53 - because i just decided not to do the
240:55 - terraform registry one because i'm doing
240:56 - it later that you know the numbers might
240:59 - be different okay but in the course i
241:00 - will link up the correct repos if you're
241:02 - trying to find them what we'll do is
241:04 - type in main.tf
241:06 - and we just need to provision something
241:08 - so we'll probably go back all the way to
241:10 - our getting started one and try to grab
241:13 - something from there
241:14 - so i will go and grab this aws instance
241:17 - here
241:18 - and we will also grab its outputs
241:21 - because that's probably a good idea
241:25 - and we will go and grab its provider
241:28 - here
241:33 - all right and we will also go ahead and
241:36 - grab a variable because we're all
241:38 - learning about variables so we're gonna
241:39 - have to have some kind of setting here
241:43 - and we also need our terraform
241:45 - configuration block so i think that's in
241:47 - my main
241:48 - and we will go ahead and grab that so
241:51 - we'll go to the top here
241:53 - paste that in
241:55 - okay this looks all good to me actually
241:58 - we're just going to use a local backend
241:59 - for this to make our lives a lot easier
242:02 - and we don't need tags i'll just remove
242:05 - that for the time being
242:07 - and so this should be good enough
242:09 - yeah i'm happy with this so what we'll
242:11 - do is go ahead and deploy this instance
242:14 - but actually this is all about learning
242:15 - again about
242:17 - uh variables right so we said that
242:19 - there's a lot of different ways to
242:20 - inject them so we did we have the
242:21 - terraform.tf vars
242:24 - and other ones like that so let's just
242:25 - go down the road or go down each one and
242:28 - see
242:29 - if we can learn how to do all these okay
242:31 - so the first one is going to be
242:32 - terraform dot t f bars
242:36 - and then here we're just going to
242:37 - specify the instance type
242:42 - that's going to be a t2 micro
242:46 - put that in double quotations
242:48 - and we'll go ahead and type in terraform
242:50 - uh plan
242:52 - and just see if that gets populated
242:56 - oh we have to do terraform in it first
242:59 - we also don't even need to deploy this
243:00 - infrastructure because
243:02 - we're going to just be able to um
243:05 - run terraform plan if it's populated
243:07 - then we know that it's working as
243:08 - expected right
243:10 - and while that's going on i'm just going
243:11 - to go to the documentation here and
243:13 - we're just going to pull up
243:15 - terraform variables
243:18 - because i'm pretty sure it's just
243:19 - straight here in the documentation it
243:21 - talks about all the different ways
243:22 - there's like a list when they talk about
243:24 - the um
243:26 - uh the variable definition files
243:28 - download are down here so they kind of
243:31 - mention all the different use cases
243:32 - there and i mentioned that obviously in
243:34 - the course
243:35 - um but we'll just go and now do a
243:37 - terraform plan
243:48 - and so what i want to see is it's going
243:50 - to use a t2 micro here so if we scroll
243:52 - on up
243:54 - we can see that it says t2 micro so it's
243:56 - loading that from our terraform tfr it's
243:59 - just to prove that it is i'm just going
244:00 - to write a nano
244:02 - and we're going to go down below and run
244:04 - terraform plan
244:09 - and if we scroll up
244:10 - we can see now it's a nano so
244:13 - let's say we didn't have a terraform
244:14 - vars file we had something that is just
244:16 - anything we call it um
244:20 - variables
244:22 - or how about just vars to make our lives
244:23 - a bit easier so let's just say vars.tfrs
244:26 - and if we do terraform plan
244:28 - is it going to autoload that file no see
244:30 - how it's prompting us because if it
244:32 - doesn't have the word auto in it it
244:34 - doesn't know to load it so what we'd
244:35 - have to do here
244:37 - is we'd have to do terraform plan
244:39 - var file and then say vars
244:42 - dot tfrs
244:44 - and so now it should load that file
244:48 - okay we're gonna scroll up see if it's
244:50 - nano
244:51 - it is good i'm just gonna go change this
244:53 - to a medium for fun
244:56 - so let's say we we didn't want to have
244:58 - to always do that hyphen var file
245:01 - because we always want this to be loaded
245:02 - because it's just an additional file
245:04 - what we can do is put the word auto in
245:05 - it
245:07 - all right and so now if we do terraform
245:08 - plan it should just pick that up
245:14 - okay we're going to go ahead and scroll
245:15 - up
245:16 - and we can see we have that t2 medium
245:18 - okay
245:20 - so
245:21 - let's say we just wanted to input it
245:23 - from the uh the api here so i'm just
245:26 - going to rename this here
245:28 - or from the cli so what we can do is
245:29 - type in var
245:31 - uh instance type
245:35 - equals
245:38 - t2 nano
245:45 - and so if we scroll up here
245:48 - this should be t2 now so
245:50 - yeah it's pretty much all the variants
245:52 - that we need to explore but also notice
245:53 - that there is uh
245:55 - an order of presidents right so this is
245:58 - the order that will load in and later
246:00 - sources taking precedence over the
246:02 - earlier ones so the later it is the more
246:04 - likely it's going to override it so what
246:06 - i'm going to do
246:07 - is i'm going to create myself a
246:09 - [Music]
246:11 - um
246:13 - new file here and we're going to say
246:14 - terraform
246:16 - dot tf vars
246:19 - so i just want to show how that plays
246:21 - out
246:22 - and we'll have our
246:23 - vars.tfrs file which is fine
246:27 - actually we'll do the auto
246:29 - okay
246:32 - and so what i'm going to do is i'm going
246:33 - to start off small
246:36 - so this is going to be
246:40 - instance type
246:42 - equals
246:43 - nano
246:46 - and then this one here is going to be a
246:49 - micro
246:51 - and so i want to see what happens if i
246:53 - run terraform plan is it going to
246:55 - take
246:56 - this one or that one right
247:03 - and we're going to scroll up and we can
247:04 - see that it's a t2 micro
247:07 - so it's taking the one from the auto
247:09 - file because
247:10 - it's second president's right so this
247:13 - one has priority over this one
247:15 - and then if we want to uh override that
247:18 - there we could do
247:20 - um hyphen var and say
247:23 - instance type
247:27 - equals t2 medium
247:32 - and so that should override those there
247:37 - and we'll scroll up and see we can see
247:39 - there's a t2 medium so that's pretty
247:41 - much all we really need to explore in
247:43 - this one here
247:44 - and so we'll just move on to something
247:47 - like outputs okay
247:49 - [Music]
247:53 - you know what i thought about it and i
247:55 - think that maybe what i should do before
247:56 - we move on to outputs is actually just
247:58 - look at how we define these variables
248:00 - here and some of the additional options
248:01 - so here we have variable instance type
248:03 - and we specified it as a string of
248:05 - course there are different types but
248:06 - there's a few other things that we can
248:08 - do we can provide a description
248:10 - okay
248:12 - so we'll say
248:14 - the size of the instance
248:18 - i've never really noticed where the
248:19 - descriptions show up i'm assuming that
248:21 - if you were to run this without any kind
248:23 - of like terraform bars or anything so
248:25 - what i'm going to do here is just go
248:27 - ahead and delete this file here
248:29 - and delete the auto file here
248:32 - and i think that if we were to run it
248:34 - the prompt would show up there so i'll
248:36 - just clear that out
248:39 - i just want to see where it shows up
248:41 - yeah so it shows the description there
248:43 - okay
248:44 - there are some other options so i
248:46 - believe we can do sensitive
248:49 - i think it's just sensitive true
248:52 - here yep
248:55 - so we can do sensitive
248:57 - i'm not the best at spelling so i'm just
248:59 - going to put that off screen so i can
249:00 - see what i'm doing
249:02 - it will say true and what that should do
249:04 - is it should obscure
249:07 - it should obscure the actual
249:12 - value here so if i type in
249:15 - t2.micro
249:17 - and hit enter
249:21 - it should obscure it in the plan
249:24 - if we scroll up here
249:28 - so notice it's sensitive so when you're
249:30 - inputting it doesn't hide it i'm
249:31 - actually kind of surprised that they
249:32 - don't kind of blank that out as you're
249:34 - typing it in
249:35 - um but this is the only place that it's
249:37 - going to hide it and the thing that you
249:39 - need to understand is that just because
249:41 - it's there does not mean it's going to
249:43 - be hidden in the terraform state file so
249:44 - what i'm going to do
249:46 - is i'm actually going to go ahead and
249:48 - deploy this
249:51 - because i just want to show you
249:53 - that it's visible in the terraform state
249:55 - file so we'll say t2
249:57 - micro here
250:03 - and i believe it's already created the
250:04 - state file
250:05 - you know it's still empty so i'll have
250:07 - to wait a little bit
250:11 - but while that is going on we'll look at
250:13 - something else like validation
250:15 - i don't really play with validation much
250:17 - but i'm sure we can figure it out in two
250:18 - seconds so valid validation just make
250:21 - sure that
250:22 - the input is as you expect it to be
250:26 - so if we go here
250:30 - and
250:32 - we need to give it a condition
250:39 - and so can is a built-in function so i
250:42 - assume it's going to just be true or
250:43 - false we probably should go look that up
250:45 - so we go like built-in uh functions
250:49 - terraform can
250:54 - which is right here
250:56 - so can evaluates the given expression
250:58 - returns a billion indicating whether the
251:00 - expression produced a results without
251:02 - errors
251:03 - okay so that sounds pretty good to me so
251:06 - we'll go back over here
251:09 - to our
251:10 - file here and so we have can
251:13 - and
251:14 - in the input variables we have
251:19 - regex and that's probably what i'll use
251:20 - here just to make things a little bit
251:22 - easier
251:31 - and so what i want to do is i want this
251:33 - to be a t2
251:38 - or we even say t3 here so regex expects
251:41 - this to be a t3
251:43 - and i don't need the second parameter
251:45 - here so i can just take that out and
251:48 - make this a period here
251:49 - t3 is just another line of adabus
251:51 - instances
251:56 - instance must be a t3
252:00 - type
252:01 - ec2 ec2 uh instance
252:06 - okay and so notice this finished and we
252:08 - were seeing if the sensitive would show
252:09 - the um the size of the instance within
252:12 - the file here or would it be sensitive
252:16 - so we'll say instance type and so notice
252:18 - that sensitive does not obscure it in
252:20 - the terraform state file i'm going to go
252:22 - ahead and just uh destroy that so say
252:24 - terraform
252:29 - actually uh we don't have to do that
252:30 - just yet let's go ahead and actually
252:32 - test our validation here and see if we
252:33 - got it right
252:35 - so what i'm going to do
252:37 - is just do terraform plan again
252:41 - and i'm going to take out the sensitive
252:43 - option here
252:50 - terraform plan
252:56 - and so the condition for the variable
252:57 - must refer to var instance type in order
253:00 - for the incoming tests so i guess we do
253:02 - have to specify a second parameter here
253:06 - um the condition for the variable
253:08 - instances must refer to var instance
253:10 - type
253:12 - okay
253:14 - so i think it just probably wants it as
253:16 - the second parameter
253:20 - because we did see that a moment ago
253:22 - right
253:24 - you would think that it would just like
253:25 - infer it because it's already there eh
253:28 - um the validation error message must be
253:30 - at least one full sentence starting with
253:32 - an uppercase letter ending with a period
253:34 - wow
253:36 - grammar police
253:38 - your given message will be included as
253:40 - part of the larger terraform error
253:41 - message written as english prose i guess
253:43 - like if you're publishing your module
253:45 - and they want you to do it properly
253:47 - right so i guess that's a good way of
253:48 - enforcing good practices there and so
253:51 - i'm going to try t2 micro and i'm hoping
253:53 - that my validation works
253:57 - and it's here it says that it must be a
253:59 - t3 type and so
254:01 - that that's where that error is working
254:03 - uh so we're all done here i'm just going
254:04 - to go ahead and do a terraform destroy
254:07 - or actually i'll do it apply because i
254:09 - just like it to happen right away so
254:10 - we'll say destroy
254:12 - auto approve
254:14 - okay
254:15 - and we'll go off screen here and i'm
254:17 - just checking if there's anything else
254:18 - of interest that's pretty much it for
254:20 - the variables so we'll move on to the um
254:24 - actually you know what i want to keep
254:25 - this instance up and running because
254:27 - we're going to use it for outputs okay
254:29 - so um i think that's all good for now
254:32 - i'm going to switch this over to t2
254:34 - so that it stops complaining
254:37 - okay and we'll look at the output cli
254:40 - [Music]
254:44 - all right so let's take a look at other
254:46 - things we can do with the outputs here
254:48 - so i'm going to go and type in terraform
254:49 - outputs cli
254:52 - there's nothing super complicated here
254:54 - but i just want to go through some of
254:55 - these options with you okay
254:57 - so
254:58 - we'll go back here to
255:01 - our terraform here and we should have
255:03 - for output so i want to show you
255:04 - terraform
255:06 - output and that will output all of your
255:08 - um
255:10 - your
255:12 - defined outputs then we can provide its
255:14 - name so we can say public ip
255:16 - and that will give us an individual one
255:18 - you can give it a raw command and this
255:20 - is really useful when you are
255:22 - doing something like ssh or you want to
255:24 - pipe it to another command you saw us do
255:25 - this earlier when we did ssh so we did
255:27 - ssh and then we gave it some kind of
255:31 - address and then we did this
255:33 - dollar sign parentheses and that's
255:35 - actually part of the bash language and
255:36 - so that was great so that we were able
255:38 - to directly interpret it and we had to
255:41 - use the raw so it was escaped as double
255:43 - quotations
255:44 - right uh let's see if there's anything
255:46 - all sets of interest um you could say no
255:49 - color json is something i did not show
255:51 - you before so let's give that a go
255:54 - so we'll just go back
255:57 - and say json
256:02 - okay and that could be really useful if
256:04 - you wanted to parse that there is a um
256:06 - there's a uh
256:08 - a bash
256:10 - library called i think it's like jy or
256:12 - jq it's for parsing json so you could
256:14 - use it with that like uh jq library
256:19 - nope
256:20 - jy
256:23 - nope parsing json um parsing json bash
256:29 - maybe it's like jq
256:32 - yeah it's jq
256:34 - so i think i might have this installed
256:36 - here jq
256:38 - and so this is a very useful tool if you
256:40 - want to
256:41 - parse out stuff here so what we could do
256:43 - here is we could say json and make a
256:45 - pipe and then say jq maybe period i'm
256:48 - not sure what that would give us
256:49 - probably everything
256:50 - but if we wanted to just grab the name
256:53 - see which is like hyphen r we could try
256:55 - that
256:56 - so we could try hyphen r
256:59 - type
257:03 - okay
257:05 - or
257:09 - oh so he has like a little period there
257:10 - so maybe
257:12 - we need to do this
257:14 - i mean i've used jq in the past it's
257:15 - just like i never remember how it works
257:17 - so
257:20 - maybe we do man.jq here might give us
257:22 - some examples
257:31 - that's not very helpful
257:32 - so i could say like
257:34 - jq examples
257:41 - so
257:52 - i know period will get us the start of
257:54 - it
257:56 - here we have fruit
257:59 - period accessing properties
258:04 - okay so i think what we need to do here
258:07 - is
258:09 - do public ip
258:11 - like that
258:15 - and yeah it returns a string and so we
258:17 - can do value
258:20 - okay and so the jq's pretty commonly
258:22 - installed a lot a lot of instances so
258:24 - that's something that you might find uh
258:27 - that you might want to select things
258:28 - here right
258:29 - okay
258:30 - um but yeah that's pretty much uh it for
258:33 - outputs and we'll move on to the next
258:36 - part here okay
258:37 - actually again i probably should talk
258:39 - about some of the output options here
258:41 - and show those to you as well
258:43 - because there are some things we can do
258:46 - so i believe we can set sensitive as
258:48 - well
258:49 - so just want to
258:50 - go and type in
258:52 - terraform outputs here
258:56 - i cannot type well today
259:01 - and we can give it a description and we
259:04 - can set it as sensitive so that's
259:05 - something that we should give give a try
259:07 - here and see what that does
259:10 - sensitive
259:12 - equals true
259:15 - okay
259:17 - and
259:18 - i think that if we do terraform output i
259:21 - wonder if we'll have to do a refresh on
259:23 - this for that to work
259:30 - great so it's still showing it and i
259:31 - want it to be sensitive so i'm going to
259:33 - do terraform refresh or actually again
259:34 - it's terraform apply
259:36 - um
259:38 - refresh only
259:45 - oh it's asking for the type again t2
259:47 - micro
259:53 - and so refreshing state allows us not to
259:55 - have to reprovision it right so would
259:56 - you like to update the terraform to
259:58 - reflect the detected changes
260:00 - um
260:02 - yeah i'm fine with that yes
260:04 - i think because we had tags before on
260:05 - that resource possibly so now see that
260:07 - it says it as sensitive okay so what
260:10 - we'll do here is type in terraform
260:12 - output
260:13 - and so now it does not show us what it
260:15 - is
260:17 - so yeah there you go
260:20 - [Music]
260:25 - all right so now in this follow along
260:26 - what we're going to do is learn about
260:28 - chaining outputs from a sub module
260:30 - because this is something that uh really
260:32 - shows up a lot in the exam and so
260:34 - even though we're not into the module
260:36 - section of our follow alongs we have to
260:38 - kind of learn how to create a module
260:40 - or a sub module i should say so what
260:42 - we're going to do here is create
260:44 - ourselves a new folder and i think that
260:47 - it generally likes it if you call them
260:48 - sub modules you could technically name
260:50 - the folder whatever you want
260:52 - but that's what i'm going to call it and
260:53 - within there i'm going to make a new
260:55 - file and i'm going to call it main.tf
260:58 - and so what we can do is take any of our
261:01 - code that we like and throw it into that
261:03 - module
261:04 - i'm going to
261:05 - [Music]
261:07 - grab the
261:09 - instance here and actually while this is
261:10 - going i just want to go ahead and
261:12 - destroy our instance here
261:14 - um that we were running before oops
261:18 - destroy
261:19 - auto approve here
261:23 - and
261:25 - yeah t2 micro and it's because i
261:28 - it wants it every time even on a destroy
261:29 - which is totally fine but anyway so what
261:32 - i'm going to do
261:33 - is i'm going to grab our instance and
261:35 - we're going to really end up with
261:37 - basically nothing in this file here
261:40 - but i'm going to go and
261:43 - um
261:46 - go into the sub module here and
261:47 - basically grab everything okay
261:51 - and we're going to go ahead and paste
261:52 - that in there
261:54 - and so basically this specifies
261:58 - everything that we want but we need to
262:00 - pass we want to get these outputs and
262:02 - reference them in our main tf here so
262:04 - the way we're going to do that is we
262:06 - don't have these resources here anymore
262:09 - so i can just take these out and i can
262:11 - take this out here
262:13 - and what i can do is i can just say
262:15 - module
262:17 - and i'm going to say
262:18 - aws
262:20 - server
262:22 - and i'm going to then specify the source
262:25 - so the source is going to be in sub
262:27 - modules
262:29 - and we'll do
262:30 - forward slash forward slash here
262:34 - and probably it would have made more
262:35 - sense if i named this something like aws
262:37 - so i'll just say like database server
262:40 - i've already changed my mind
262:42 - okay because it didn't make sense like i
262:44 - had to make some modules maybe folders
262:45 - within that and i just didn't really
262:47 - want to move all that around
262:48 - and so if we want to reference this one
262:50 - here it's going to start with module and
262:52 - then the name of the module here
262:54 - and then the resource
262:56 - and so that should uh get us that value
263:01 - i'm just going to go ahead and hit
263:02 - sensitive and so i believe that this
263:03 - should work
263:04 - so we'll do a terraform plan here
263:10 - the module is not yet installed so we'll
263:12 - do terraform net fair enough
263:16 - great and so we'll do a terraform plan
263:18 - and we'll see
263:19 - if that's going to work now we
263:21 - technically have to give that module an
263:24 - input and so see it's expecting that
263:26 - input to have instance type so what
263:28 - we'll have to do here
263:29 - is specify instance type
263:32 - and i guess we'll just try t2
263:37 - t2 micro here
263:42 - let's see if it likes that
263:46 - so we have another issue here
263:48 - unsupported attribute
263:51 - in the output
263:53 - module aws server aws instance my server
263:57 - is a object known after apply this
264:00 - object does not have an attribute
264:03 - named aws instance
264:05 - um i think i might need to specify
264:10 - oh sorry we just want the outputs so
264:12 - this is actually we don't want to
264:13 - reference it this way we just want to
264:15 - get whatever the outputs is so we just
264:16 - do outputs here okay
264:19 - because it we can't access the aws
264:20 - instance that way it just doesn't make
264:22 - sense
264:23 - so we'll go ahead and hit apply again
264:25 - here
264:28 - and so here it says
264:31 - object does not have that maybe it's
264:32 - just output
264:42 - and that doesn't work so just give me a
264:43 - second i'll be back okay all right so i
264:45 - pulled up the documentation and here it
264:47 - says you know i don't need to put the
264:49 - word output or outputs i don't know why
264:50 - i thought i had to do that and so i
264:52 - should just be able to do this
264:54 - so let's see if that works here
264:58 - see if we're in good shape
265:01 - okay so to reduce risk of accidentally
265:03 - exporting sensitive data that was
265:04 - intended terraform requires that any
265:06 - root module output contain sensitive
265:08 - data be explicitly marked as sensitive
265:10 - if you do intend so
265:12 - it's not our intention to
265:14 - mark it as sensitive so i'm going to say
265:15 - sensitive false
265:17 - this is line nine
265:19 - so
265:21 - let's run that again
265:24 - not sure if it's in our other one here i
265:26 - don't think so because it's line 28 eh
265:29 - oh sorry okay so we had we had it in the
265:32 - other one so we'll just take it out
265:34 - okay and we will run that there
265:41 - cool and so let's go ahead and just
265:43 - deploy that to make sure our sub module
265:45 - works
265:46 - terraform uh apply auto approve
265:55 - but yeah throughout the course you'll
265:56 - you'll see that we're going to be
265:57 - repeating some things because you know
265:59 - it's impossible to show you chaining
266:00 - outputs without covering how to build
266:02 - out sub modules but we'll just have to
266:04 - do some variants
266:05 - down the road there but i just want to
266:07 - make sure that this works as expected
266:09 - and that we get an output
266:11 - so i'll see you back here when it's done
266:12 - deploying okay
266:14 - all right so after a short little wait
266:16 - there you can see that uh we have our
266:18 - public ip address and so that is coming
266:20 - from our sub module so that's all in
266:22 - good shape there so what we can do
266:25 - is go ahead and just start to store this
266:28 - instance i'm just going to double check
266:29 - to see if the next tutorial
266:32 - requires it we technically covered local
266:33 - values earlier but i guess we could
266:35 - cover them again
266:36 - um so yeah i'm going to go ahead and
266:39 - just
266:40 - destroy that instance
266:42 - so we'll just say apply
266:44 - destroy
266:46 - auto approve
266:51 - um
266:52 - gotta type it right
266:56 - two piece
267:01 - there we go okay great i'll see you in
267:02 - the next video
267:04 - [Music]
267:08 - all right let's go take a look at local
267:09 - values again i know we covered this in
267:11 - the getting started but it helps to do
267:14 - things more than once
267:16 - and since we've had an opportunity to go
267:18 - through the documentation we understand
267:19 - there's a few extra things that we can
267:20 - do with it
267:22 - um like nesting things in or be able to
267:24 - find them twice
267:27 - things like that
267:28 - but there's really not a lot to do that
267:30 - is new here so we're just going to go
267:32 - through the motions of it again just so
267:33 - that it's part of our memory so remember
267:35 - we've made this into a sub module here
267:37 - and so this is probably the best place
267:39 - to do a local's value and it's not
267:42 - complicated at all so we're just going
267:43 - to do locals
267:45 - and we could use this to abstract a few
267:47 - different things so that's the variable
267:49 - i'm going to go up here one second
267:54 - and uh we'll do this for the instance
267:57 - here
267:58 - oops
268:01 - locals
268:03 - okay we could say ami
268:06 - this is probably not what you'd use it
268:07 - for but you know we just have to have
268:09 - some kind of use case for this
268:11 - so local.ami right
268:15 - and uh i'm not sure if you can do this
268:18 - let's see what happens if we do
268:20 - can we do var instance type
268:23 - kind of would be kind of redundant to do
268:25 - that but let's just do it anyway
268:28 - and what i want to do is a terraform
268:31 - plan
268:34 - you know the key thing to remember is
268:36 - that when we're defining the block it's
268:37 - called locals we probably don't use an
268:39 - equals here
268:40 - um and it's the uh the singular when we
268:43 - are referencing it okay
268:46 - so just scroll up and see if that is
268:48 - correct
268:50 - yep everything is working as expected i
268:52 - was going to pull that out because this
268:54 - really doesn't serve much purpose
268:56 - but again we just had to go through that
268:57 - um just so that you remember how it
268:59 - works okay
269:01 - so i'm just removing that out of our
269:03 - code
269:04 - okay and there we go
269:08 - [Music]
269:12 - all right so we're going to be looking
269:13 - at data sources now we did experience
269:16 - creating our own data source in the
269:17 - getting started when we referenced an
269:19 - aws vpc and so data
269:22 - data sources are resources that already
269:24 - exist that you want to reference
269:26 - in your code and so a good example would
269:28 - be using it
269:29 - ami the amazon machine image to change
269:32 - what is being served so if we were to go
269:34 - into our server here it's using this
269:37 - particular ami but we could totally use
269:39 - a data source
269:40 - for that and so anytime you're looking
269:42 - for something you would just type in
269:44 - uh you know edibus ami data source and
269:47 - you'll get some examples here and notice
269:49 - that we have some interesting options
269:50 - like filter and stuff like that these
269:52 - are not available to every single um
269:56 - i might have actually have to update my
269:57 - lecture content because i might have
269:59 - highlighted this as a global feature but
270:01 - i realized that this filter option here
270:03 - is actually reflecting what is in the
270:05 - aws cli so i i originally had thought
270:07 - that this was part of the language but
270:08 - apparently it's just a reflection of
270:10 - this because if you look up something
270:12 - like an rds instance
270:14 - okay and you say data source
270:18 - and you go here
270:20 - this one doesn't have a filter option or
270:22 - at least i don't think it does i'm gonna
270:23 - type in filter
270:24 - right or if we were to go over to google
270:27 - so we'd say like google compute
270:31 - and we would say data source
270:34 - terraform
270:38 - maybe even a project doesn't really
270:40 - matter notice it doesn't have a filter
270:41 - option so i just want to
270:44 - clarify here that this filter option
270:46 - really is particular database because
270:48 - that's what their cli supports and
270:49 - that's being reflected by
270:51 - terraform okay but let's say we want to
270:54 - reference a different kind of instance
270:56 - and so i was looking here and this is
270:58 - kind of an example where they are
271:00 - they are selecting an ubuntu instance
271:03 - and so that's something that we could do
271:05 - to
271:06 - select something there
271:08 - notice that the owner is not ourselves
271:10 - here so if you go over here
271:13 - notice we have self and so this is an
271:15 - account id for aws and this is a
271:18 - particular version of ubuntu so if i go
271:20 - ahead and grab this here
271:22 - uh and what we'll do whoops
271:24 - the one thing i don't know is that this
271:26 - instance like what um
271:28 - what region it's in because a bus you
271:30 - have to launch your amis in the same
271:32 - region but what we can do is paste this
271:34 - on in here and just notice that i'm just
271:36 - under the instance documentation here
271:39 - okay
271:41 - and so
271:43 - it's very important to get something
271:44 - that is
271:46 - again in the same
271:48 - region but
271:50 - we're not specifying the ami image it's
271:51 - going to filter and find it so i think
271:53 - what it's going to do
271:54 - is based on any region it will find it
271:57 - there okay so here i can just go data
272:00 - dot adabus ami
272:03 - and we just choose the id and that
272:04 - should
272:06 - work
272:08 - okay so we'll just type in clear and
272:10 - we'll say terraform plan
272:16 - all right so a data resource aws ami has
272:19 - not been declared in your module
272:21 - aws server
272:25 - so let's just take a look here
272:30 - it is defined right here
272:38 - maybe we aren't giving it the right
272:39 - thing here
272:52 - i'm looking for the thing that we can
272:54 - reference so id is set to the id found
272:55 - in the ami in addition the following
272:58 - attributes are expected the arn
273:00 - so i'm pretty sure yeah it was the id
273:04 - that we wanted
273:07 - okay it says the data source aws my id
273:10 - has not been declared in the module
273:12 - dot aws
273:14 - server
273:17 - okay i have not seen this error before
273:18 - because we're working in a sub module
273:22 - it's not really any explanation so when
273:24 - in doubt what i'm going to do is do a
273:26 - terraform in it and see if that resolves
273:27 - that issue
273:29 - okay and we'll just try this again
273:36 - and it still doesn't like it
273:40 - oh i also have a name so i guess i have
273:42 - to provide that as well so that's
273:44 - probably my mistake right there
273:47 - okay
273:52 - there we go and so what i want to do is
273:54 - just scroll up and see if it selected an
273:56 - ami from aws so notice that it's pulling
274:00 - this one here and that's going to be for
274:01 - the relevant region
274:02 - again i don't want to provision this
274:04 - because
274:05 - i don't
274:07 - but
274:07 - you know i just wanted to show you that
274:10 - that's how you use data source and i
274:11 - really want to emphasize that this
274:12 - filter option that you see here is
274:15 - particularly to aws and the options are
274:17 - going to vary based on how you can
274:18 - select stuff and not everything is
274:20 - available you have to uh google each one
274:22 - and see what uh resources you can pull
274:24 - in for data sources okay
274:26 - [Music]
274:30 - hey this is andrew brown from exam pro
274:32 - and we are taking a look at resource
274:34 - meta arguments so the terraform language
274:36 - defines several meta arguments which can
274:37 - be used with any resource type to change
274:39 - the behavior of resources and so we'll
274:42 - quickly go through the list here and
274:43 - then we'll deep dive on each so the
274:45 - first is depends on so this is for
274:46 - specifying explicit dependencies we have
274:49 - count which is for creating multiple
274:50 - resource instances according to account
274:53 - we have four each which is used to
274:54 - create multiple instances according to a
274:56 - map or set of strings provider so this
274:59 - is for selecting a non-default provider
275:01 - configuration lifecycle this is for
275:03 - lifecycle customizations provisioner
275:06 - this is and also for connections for
275:08 - taking extra actions after resource
275:10 - creation so there's the quick list now
275:12 - let's jump into them
275:13 - [Music]
275:17 - all right the first resource meta
275:19 - argument we want to look at here is
275:20 - called depends on and this is the order
275:22 - of which resources are provisioned and
275:24 - is important when resources depend on
275:26 - others before they are provisioned
275:28 - terraform implicitly can determine the
275:29 - order of provision of resources but
275:32 - there may be some cases where it cannot
275:34 - be determined or like the correct order
275:36 - so this is where you can be a bit more
275:38 - explicit so here we have some terraform
275:41 - configuration where we have an ibus
275:43 - instance and it relies on a policy and
275:45 - so what we're doing is we're setting an
275:47 - explicit depends on here so that it
275:49 - knows that it requires that now in a
275:51 - normal use case you would not have to do
275:53 - this but it's hard to find use cases
275:55 - where this happens but when it does
275:57 - become a problem you'll know because
275:59 - your resources will not provision
276:00 - correctly you'll get an error so there
276:02 - you go
276:06 - [Music]
276:07 - let's take a look here at the account
276:09 - resource meta argument and this is when
276:10 - you are managing a pool of objects so an
276:12 - example here would be a fleet of virtual
276:14 - machines where you want to use count
276:17 - so here on the right hand side we have
276:19 - an example of us using that in terraform
276:21 - so we can specify the amount of
276:23 - instances we want so here it is for and
276:25 - then we'll have access to this name
276:27 - value called count.index so
276:30 - the tags will start at zero so it'll be
276:32 - server 0 1 2 and 3.
276:36 - then just down below here i just want to
276:38 - show you that with count you can accept
276:40 - a numeric expression so you know if you
276:43 - had a variable that you had set as the
276:45 - subnet ids or even just an arbitrary
276:47 - number like you want to have x amount of
276:48 - servers
276:49 - this would allow you to do that okay but
276:52 - just so you know those numbers must be
276:54 - whole and a number must be known before
276:57 - the configuration which you'd put in
276:59 - your input variables okay
277:00 - [Music]
277:05 - all right so let's take a look here at
277:06 - 4-h which is for iterating over resource
277:09 - meta arguments but it's slightly
277:11 - different because it allows you to map
277:13 - over dynamic values giving you a little
277:15 - bit more flexibility so here's an
277:17 - example of us defining a4 each and
277:20 - notice that we have defined a map
277:22 - sometimes i call it an object because
277:23 - they're so similar but this is a map
277:26 - and the idea is that once you have your
277:28 - a map defined with your 4-h you will now
277:30 - have access to these name values so you
277:32 - could do each dot key or each dot value
277:34 - to extract that out
277:35 - um you can also just use it like with an
277:38 - array so here we have an array and then
277:41 - we use two set to turn it into a set
277:43 - which it will accept as well
277:46 - and then we can just pull out the key
277:47 - because there will be no value so just
277:49 - an example of with a map and then with
277:51 - something that looks like an array okay
277:57 - [Music]
277:58 - to understand the resource meta-argument
278:01 - life cycle we need to understand how
278:03 - resource behavior works and so when you
278:05 - execute your execution order via
278:07 - terraform apply it will perform one of
278:09 - the following to a resource so the most
278:12 - common one you'll see is a create
278:14 - so these are resources that exist in the
278:16 - configuration but are not associated
278:18 - with a real infrastructure object in the
278:20 - state the way you can tell it's creating
278:22 - it will have this nice little green plus
278:24 - sign
278:25 - the next one is destroy so resources
278:27 - that exist in the state but no longer
278:30 - exist in the configuration and so that's
278:32 - going to tear down your resources out of
278:34 - your cloud providers this is represented
278:36 - by a minus symbol then you have update
278:38 - and place so the resources who arguments
278:41 - have changed so the idea here is that if
278:43 - you have a virtual machine and let's say
278:45 - you change the size of it it's not going
278:47 - to destroy it it's just going to modify
278:49 - its settings this is represented with a
278:52 - tilde and the last one here is destroy
278:55 - and recreate so resources who arguments
278:57 - have changed but uh which cannot be
278:59 - updated in place due to remote api
279:01 - limitations so there are just some cloud
279:03 - resources that always require destroy
279:05 - and recreate and this is something very
279:07 - easy to trigger if you are using
279:10 - the replace command or
279:12 - the older terraform tank command in
279:14 - order to
279:15 - replace a degraded or damaged instance
279:18 - so let's talk about
279:19 - life cycle so life cycle blocks allow
279:21 - you to change what happens to resources
279:23 - on the create update and destroy
279:24 - lifecycle blocks are nested within
279:26 - resources so here is a resource uh which
279:29 - is just an azure resource group and
279:31 - within it we have a life cycle block and
279:33 - we're setting our first option here
279:35 - that's possible called the crate before
279:36 - destroy so this is a boolean and when
279:39 - replacing a resource first create the
279:40 - new resource before deleting it so the
279:42 - default is destroyed old first so this
279:44 - is more about just the order of how it's
279:46 - destroyed prevent destroy so ensures a
279:49 - resource is not destroyed then we have
279:51 - ignore changes uh and this is based off
279:53 - a list of attributes that you feed to it
279:54 - so don't change the resource on create
279:57 - update destroy if a change occurs for
279:59 - the listed attributes so maybe um
280:02 - maybe you uh you're just changing your
280:04 - tag and you say don't don't change uh
280:06 - like don't tear down create or do
280:09 - anything strange if we change a tag okay
280:11 - so there you go that's uh life cycles
280:17 - [Music]
280:18 - so we're looking at our last meta
280:19 - argument here which are resource
280:20 - providers and this goes along with the
280:22 - idea of an alias so here we are defining
280:25 - ourselves a provider in google cloud but
280:27 - there's a case where we might need to
280:29 - override the provider
280:31 - at a at a per resource level the way we
280:34 - do that is by creating an additional
280:35 - provider and setting an alias and then
280:38 - here we could change something like the
280:39 - region and then once we have that set we
280:41 - can then reference our provider
280:43 - explicitly under a resource
280:45 - and so that's all there is to it
280:47 - definitely on your exam you will see a
280:49 - question about alias or you'll see that
280:50 - example so definitely want to know how
280:52 - to do that
280:53 - [Music]
280:56 - okay hey it's andrew brown from exam pro
280:59 - and in this follow along we're going to
281:01 - be covering all the different types of
281:02 - meta arguments okay so what i'm going to
281:04 - do is just cd into the directory i
281:06 - created for our first one right that
281:09 - arguments depends on and we're going to
281:11 - take a look at this as always we're
281:13 - going to create ourselves a new main.tf
281:15 - file as soon as i can find
281:18 - the correct folder here so we'll say
281:20 - main.tf
281:22 - and i'm just going to go to my variable
281:24 - outputs and just grab some existing code
281:26 - to save myself some time i think
281:28 - everything is self-contained into this
281:30 - subdirectory here so i'm just going to
281:31 - go ahead and grab that there
281:33 - and i'm just going to take out some of
281:35 - the code that i do not need
281:38 - um
281:39 - so we have an instance type which is
281:43 - fine
281:44 - um
281:46 - we don't have
281:48 - we don't need that
281:50 - we don't need validation we don't need
281:52 - to put the description in there
281:56 - we have this big old one here
281:59 - for the ami
282:02 - and what i'm going to do here is i just
282:04 - want to
282:06 - specify an ami manually just to make our
282:08 - lives a bit easier so i'm here
282:11 - and i'm just going to go and launch a
282:12 - new instance not for real but i just
282:14 - want to go ahead and grab this id here
282:17 - and what we will do
282:19 - is go back here and paste that on in
282:23 - and i'm just going to hard code hard
282:25 - code the instance type t2 micro
282:28 - oops
282:30 - and i'm going to scroll up take out this
282:31 - instance type variable
282:33 - okay so then we get a very small file
282:35 - makes our life a lot easier
282:37 - and so as always we need to do our
282:39 - terraform init
282:41 - that's going to initialize our back end
282:43 - there
282:44 - and we saw it depends on earlier it
282:45 - wasn't super complicated how it worked
282:47 - it was just that if you wanted something
282:49 - to be wait for the creation of something
282:51 - before you do something else that's what
282:52 - it would do so i think in this case what
282:54 - we should do is make an s3 bucket so
282:56 - we'll say and i've got some old tabs
282:58 - here so just close these out
283:00 - and we'll just say like uh aws s3 bucket
283:03 - terraform
283:06 - and these aren't really related in terms
283:08 - of their use cases but just the fact
283:10 - that we can set this on anything so what
283:12 - i'm going to do is go ahead and grab
283:14 - myself
283:15 - this code
283:16 - here and
283:18 - i'm not sure how that happens just close
283:20 - that out there
283:21 - and so i'm just going to go ahead
283:23 - and paste in
283:26 - this s3 bucket here
283:28 - and this is like having a unique name so
283:30 - you have to provide something that is um
283:33 - well i guess we can just call this
283:34 - bucket but here this is like having a
283:36 - domain name so i would strongly
283:38 - recommend to be very unique here so i'm
283:40 - just gonna pound in a bunch of numbers
283:42 - and just say
283:43 - um
283:44 - depends on
283:47 - because i don't want anyone to be using
283:49 - that
283:50 - i don't need to private i don't need to
283:52 - set any tags and that should be enough
283:54 - but what i want to say is that i want
283:58 - the bucket to only be created
284:01 - after the aws instance is created okay
284:04 - so if i go here and put depends on
284:10 - okay
284:11 - and then we say aws instance
284:15 - my server
284:18 - so now it has to wait for the server to
284:20 - be provisioned before the provisions of
284:22 - the terraform are the aws bucket there
284:25 - so we'll go terraform plan
284:32 - and if we just expand this a bit
284:36 - we'll see that it will
284:39 - create our instance
284:41 - and then our server you know i'm
284:42 - actually curious is what would happen if
284:44 - i was to take this
284:46 - and
284:47 - paste it here
284:49 - with the order change in the plan would
284:51 - it actually show in order of creation or
284:53 - is it just saying these are all the
284:54 - resources and what we're actually going
284:55 - to see is after the fact like what order
284:57 - we'll create it in
284:59 - so i go here
285:01 - okay so
285:03 - i guess it doesn't really matter it's
285:04 - just the order that it appears in or
285:07 - not necessarily just
285:09 - all right i'm just curious about that so
285:11 - what we'll do is we'll go ahead and say
285:12 - terraform apply
285:15 - auto approve
285:18 - and we'll let that go ahead and
285:19 - provision
285:24 - and so if we go over to our adabus
285:25 - account here
285:27 - and we go over to s3
285:35 - okay and you'll notice that it's not
285:37 - creating the bucket as of yet and as we
285:40 - watch our input here notice that it's
285:42 - creating the adabus instance first right
285:46 - so what i'm going to do is i'm going to
285:48 - wait for this to finish and then i'll
285:50 - see you back here okay
285:52 - okay after a short little wait we can
285:54 - see that equator our instance first and
285:56 - then our s3 bucket
285:58 - okay so what i'm going to do is i'm just
286:00 - going to tear this all down
286:02 - and hopefully it tears down to a problem
286:03 - but we'll say tear down or sorry
286:05 - terraform
286:06 - uh apply
286:09 - destroy
286:10 - auto approve again if you uh find that
286:13 - too much to type you can always just
286:14 - type in terraform destroy and then
286:15 - confirm the plan but i like to do this
286:18 - all in one go and so i'll see you back
286:19 - here in a moment once everything is
286:21 - destroyed okay
286:24 - all right so after a short little wait
286:25 - there our server has been destroyed our
286:27 - bucket has been destroyed so now what we
286:28 - want to see is if we were to take the
286:30 - depends on
286:31 - and we are to move it um down below here
286:34 - we're obviously gonna have to change
286:35 - this because we can't self-reference
286:37 - ourself or we're gonna be an infinite
286:38 - loop but we'll paste that in there and
286:40 - call this whoops
286:42 - we'll call this uh a
286:45 - bucket here
286:47 - and so what should happen is uh when it
286:50 - does the terraform
286:52 - apply it should try to create the bucket
286:54 - first and then the instance and we'll
286:56 - know that by the output here so it
286:58 - doesn't like what i typed in this um
287:00 - because i guess it didn't take what i
287:02 - typed
287:04 - so we'll just scroll up here
287:07 - paste that in oops
287:09 - copy and paste when you're in the mode
287:11 - and vs code is terrible okay we'll hit
287:13 - up
287:14 - and so now what we should see is the s3
287:16 - bucket being created first okay
287:20 - so see that the s3 bucket is being
287:21 - created first and then it's going to
287:22 - create the instance i'll see you when
287:24 - this is done creating uh and then we'll
287:26 - just tear it down okay
287:28 - all right so that's done there and so
287:30 - let's go ahead and just tear that down
287:31 - because we're all done with it and i'm
287:33 - doing destroy auto approve so that's
287:35 - just going to automate that process
287:37 - and uh you know then i'll see you into
287:40 - the next follow along okay so see you
287:42 - there
287:44 - [Music]
287:48 - all right so we are on to learning about
287:51 - the meta argument called count so this
287:53 - one is pretty simple the idea is that we
287:54 - are going to provide a thing that says
287:56 - count here and that's going to create
287:58 - additional number of servers okay so
288:01 - what we will do is we will go to our
288:03 - depends on here code that we were just
288:05 - working on i'm going to copy it and i'm
288:08 - going to paste it into a new file here
288:10 - called main.tf in this new folder
288:14 - and there's a few things we don't need
288:16 - we don't need this s3 bucket whoops i
288:18 - don't know what i keep on pressing to do
288:19 - that probably the side here but we'll
288:21 - take this out and we'll take out our
288:23 - depends on and so what we're going to do
288:25 - is specify a count i want two instances
288:29 - and we are going to also make sure that
288:31 - we name this so we know which server
288:33 - we're looking at
288:34 - and we're going to say server
288:36 - we'll do interpolation and we'll do
288:38 - count.index
288:40 - and so that should be good
288:42 - and
288:43 - what we'll have to do is just do one or
288:46 - zero to get that public ip address so
288:49 - what we'll do now is go ahead and switch
288:51 - folders it's very important make sure
288:53 - you're in the right folder
288:54 - i do that all the time where i'm in the
288:56 - wrong folder here whoops so we'll do 0 5
288:59 - 1 for mine again it might be different
289:01 - if i update
289:02 - the numbers when i do publish this
289:04 - course
289:05 - we'll do terraform init as always
289:08 - and then once that is done and that
289:10 - should not take too long we'll do
289:12 - ourselves a terraform apply and we will
289:14 - carefully look to see if it's actually
289:16 - going to provision two instances okay
289:18 - so this shouldn't take too long the unit
289:22 - just depends on how much work it has to
289:24 - do to fetch that information
289:31 - great so now what we can do is do a
289:33 - terraform apply and i'm just going to
289:35 - expand this up here so that we have a
289:38 - better opportunity to look at it
289:39 - apparently i've introduced an error so
289:42 - maybe it's tags or tags
289:46 - so we'll try that
289:48 - i think they show it here on the page so
289:49 - yeah it's with it's plural okay
289:53 - and so what i want to do is just make
289:55 - sure that we're going to have two
289:56 - instances so we'll scroll all the way to
289:58 - the top here it says server one
290:01 - server zero so it is doing that so
290:03 - that's pretty good so we'll type in yes
290:06 - and that's going to go ahead and create
290:07 - those two instances so i'll see you back
290:09 - here when it's done okay
290:12 - all right so after a little wait there
290:13 - um both of our instances have created so
290:15 - what i'm going to do is make my way over
290:17 - to our ec2 console here give it a
290:20 - refresh and i want to see that there are
290:21 - two servers running notice one is zero
290:24 - and one is one
290:25 - and i want to show you our outputs
290:27 - because in our outputs we said that we
290:29 - wanted the uh instance that is index one
290:33 - so that's server one here and its public
290:35 - ip address is 54 242 81 205
290:41 - and so that is what we get there and so
290:44 - that's pretty much all there really is
290:45 - to this
290:46 - i think it might be interesting to show
290:47 - splat to see if it works here
290:49 - so i want to see if i can get all the
290:51 - ids returned so i'm going to just try or
290:53 - public ips
290:54 - so i'm going to give that a go
290:56 - and see if that works and so we'll do is
290:58 - terraform apply uh we're not apply we'll
291:00 - do
291:01 - yeah apply
291:02 - and we'll just say only refresh because
291:04 - we don't need to reprovision our
291:06 - resources we just want to see if we can
291:08 - update our outputs there and this is an
291:10 - opportunity to show off splat
291:12 - uh maybe it's refresh only
291:20 - and uh notice here that the outputs is
291:22 - going to change to a list so we'll say
291:24 - yes and so now if we do terraform output
291:28 - okay we should get a
291:30 - list back here we say public ips
291:32 - right
291:37 - oops
291:39 - public ip
291:42 - i don't think we can do this but i'm
291:44 - just curious if i was to do this would
291:45 - this work
291:47 - no it does not okay so yeah um you can
291:50 - get the ball back you use splats and
291:52 - we'll talk about splats later but that's
291:53 - uh all there is for now for this okay
291:56 - oh and as always i forgot to destroy our
291:58 - instances there so let's just type in
292:00 - terraform um
292:02 - apply auto approve
292:06 - destroy and then we are all in good
292:07 - shape okay
292:09 - so yeah just make sure you destroy those
292:10 - instances
292:13 - [Music]
292:17 - all right so now we're going to learn
292:19 - about the four each so um what i'm going
292:21 - to do is just copy the count because
292:22 - they're kind of similar
292:24 - okay
292:25 - and so what i'll do is create a new file
292:27 - here and we'll call this main.tf
292:29 - we'll paste in the contents here so the
292:31 - difference is that instead of using
292:32 - account what we're going to do is use an
292:34 - object to iterate through and change you
292:37 - know some particular properties so what
292:40 - we can do is maybe change the size of
292:42 - the instance so we say nano
292:43 - [Music]
292:45 - micro might be an example here
292:47 - so t2 micro
292:53 - g2
292:54 - micro i should have made the first one
292:55 - nano there
292:58 - and i could even do a small i suppose
293:03 - and so instead of the instance type
293:05 - being set here what we're going to do is
293:07 - just say each dot value
293:10 - and then for the server name we'll do
293:12 - each dot key
293:15 - now this splats not going to work for
293:18 - a map because that's what this is this
293:20 - is a map data structure and spots only
293:22 - really work with lists
293:23 - so what we can do is use the values
293:26 - function to extract because that this
293:27 - would return if you just had this my
293:29 - server this is going to be a
293:32 - map okay
293:33 - so what we can do
293:34 - is just put the parentheses around here
293:37 - and that will turn into a list
293:39 - at just the values and then we should be
293:41 - able to get our public ip address that
293:44 - way i think
293:45 - so what we'll do
293:48 - is make sure we're in the right folder
293:49 - first that's always important
293:51 - tell you how many times i mess that up
293:53 - we'll do our terraform init to get
293:55 - things going
293:56 - and you know we might not even
293:57 - necessarily need to apply this as long
293:59 - as the plan looks good because if this
294:01 - was not correct this part here would
294:03 - probably error out like i definitely
294:05 - would
294:06 - okay but we just want to see that when
294:08 - we do a plan that this is correct
294:20 - great so what we'll do here is now type
294:22 - in terraform plan
294:28 - and so we have an error here i think
294:30 - it's because it's supposed to be values
294:31 - not value
294:33 - so i'll just correct that there
294:36 - and these are all like built-in
294:38 - functions so we go to
294:39 - [Music]
294:41 - while we're waiting for that plan to
294:42 - generate there i'll try to show this to
294:44 - you quickly built-in functions not here
294:47 - so we would just type in
294:49 - terraform
294:50 - built-in functions
294:54 - and probably under collections that's
294:56 - where these things become very useful
294:58 - these all these functions here
294:59 - and so values is the one we just use
295:01 - here for the map so i'm sure there's
295:02 - other ones that would come into play
295:05 - so now if we just scroll up what i want
295:06 - to see is that we have three instances
295:09 - so notice here the public ip is going to
295:10 - give us three back which looks correct
295:12 - to me
295:14 - the first one is server small
295:17 - notice that it's a t too small
295:20 - we have our
295:21 - [Music]
295:23 - oh this is too small as well
295:25 - nano and then that says small
295:31 - and if we go up to this one here
295:35 - this is micro
295:37 - so micro that makes sense maybe i just
295:40 - entered the value incorrectly and maybe
295:42 - you're watching me this entire time yeah
295:44 - i did so this is just supposed to be
295:46 - nano up here
295:48 - and so we'll run that again
295:53 - i have to say i really don't like how
295:54 - plans are laid out i find them a little
295:56 - bit hard to read
295:58 - but um i guess it's just the level
295:59 - complexity you have so there's not a lot
296:01 - of ways around that so we have the t2
296:03 - small
296:05 - the t2 nano
296:07 - and the
296:08 - t2 micro notice it doesn't really
296:10 - respect the ordering of this they're all
296:12 - just kind of there in the plan
296:14 - but yeah so that would definitely work
296:15 - i'm not going to run this i'm going to
296:16 - consider this done and we can move on to
296:19 - the next part here okay
296:23 - [Music]
296:25 - sorry i killed the screen there a little
296:27 - bit earlier we have to specify the
296:29 - region again so we'll just say
296:31 - us east one
296:34 - because it needs to know where to take
296:35 - the uh take those operations
296:38 - and so it says you can apply this plan
296:41 - did i not
296:43 - did i not uh oh
296:45 - sorry i guess i hit up i really
296:47 - shouldn't have done that so we'll try
296:48 - this again so we'll say terraform apply
296:51 - uh auto approve
296:56 - i hit up on my arrow and it was going to
296:58 - an old one which is a bad on me here
297:01 - so we'll try that
297:08 - and so we have an error here the image
297:11 - id does not exist the image id does not
297:15 - exist and it's showing the same one here
297:19 - this is my east server and this one
297:22 - is my west server
297:26 - so
297:28 - it's kind of interesting because
297:30 - that should be right again i don't know
297:32 - if it's because we're doing that weird
297:33 - alias so what i'm going to do
297:35 - is i'm just going to copy this here
297:38 - and give us back our default provider
297:40 - i'm going to try that again and see if
297:42 - that resolves our issue
297:46 - we're using a data source so there's no
297:47 - reason it should not be able to find it
297:49 - because it's best it's pulling it based
297:50 - on the uh
297:53 - the alias theorem
297:57 - unless i don't understand how data
297:58 - sources work and i have to set the
298:00 - provider for it as well
298:09 - it looks like it's working so i'll see
298:11 - you here in a bit unless we have an
298:12 - error okay
298:16 - all right so we gave it another go and
298:17 - we're getting this error again but i
298:19 - mean it shouldn't be too hard to try to
298:20 - figure this out because it's looking for
298:22 - amazon 2 ami hvm
298:25 - and you know if we are in
298:27 - aws here we should be able to figure it
298:29 - out like this one's the hvm up here so
298:30 - that's what it's pretty much selecting
298:32 - so we should be able to go to one of
298:33 - those regions and just confirm what it
298:35 - is we're looking at
298:37 - so
298:38 - this one here is for
298:41 - west
298:42 - it didn't complain about east but maybe
298:44 - it didn't ever got to east it just ran
298:45 - west first and it complained but here it
298:47 - says that it completed the creation of
298:48 - it so let's go first check out if that
298:51 - instance actually exists i assume that
298:53 - uh it does not but maybe it does
298:58 - whoops
299:05 - and so
299:07 - we have our e-server and that one worked
299:09 - out fine
299:10 - and then if we go over to our west
299:12 - server here
299:16 - it doesn't exist
299:18 - so that's a bit curious to me
299:22 - i'm just going to check to see if that
299:24 - is uh that ami actually exists in the
299:26 - oregon region i i'm not i wouldn't be
299:28 - surprised if it didn't it's right here
299:30 - ami 0 c 2 d
299:33 - and we look at this and it doesn't say
299:34 - that it has something that says 0 0 dfe
299:38 - so what i want to do is scroll up here
299:39 - and look at my plan and see what it did
299:41 - so for wes it's using 00dfe that's fine
299:45 - and then for east it's using the exact
299:47 - same thing
299:49 - so
299:50 - maybe it's my own mistake here let's
299:52 - just go double check here
299:55 - um
299:58 - no it looks correct so
300:01 - i guess i'll do a little bit more
300:02 - investigate investigation i'll be back
300:03 - here in a second okay
300:05 - all right so i'm not sure why this isn't
300:07 - working as expected because
300:10 - as i read the data source is supposed to
300:12 - be agnostic it shouldn't matter
300:15 - where it's coming from here
300:17 - and it should take into account the
300:19 - provider here the only thing i saw that
300:20 - somebody was doing different was doing
300:22 - interpolation around here so
300:24 - maybe we'll give that a go and see if
300:25 - that makes a difference i don't see why
300:27 - that would matter
300:28 - but uh we're just grasping at stuff here
300:35 - okay
300:36 - and we'll just try this one more time
300:38 - and see if that actually succeeds okay
300:41 - i think we might have to enter where we
300:43 - want that maybe not because we provided
300:45 - the default provider there
300:52 - okay and it still has this problem all
300:54 - right
300:55 - so i mean i don't feel like i should
300:56 - have to do this but i'm going to do this
300:58 - anyway to see if it resolves the issue
301:00 - what i'm going to do
301:01 - is just copy this and make a second one
301:04 - and let's see if that resolves the issue
301:05 - because these are supposed to be looking
301:09 - uh in that particular area where that
301:11 - resource is and just to double check
301:13 - here we have
301:15 - [Music]
301:17 - usc's 2 here you know what i'm curious
301:19 - about i wonder if it's just using the
301:20 - data source for the provider
301:23 - so
301:24 - i'm just going to undo that for a second
301:27 - and what i'm going to say here is i'm
301:28 - going to set the default to be usc 1
301:33 - and we will try this again and let's see
301:35 - if east and west fails because that
301:37 - would be very interesting if that
301:38 - happened eh
301:42 - and we probably just figured out by
301:43 - looking at the plan file
301:46 - so here that is changing and so what i'm
301:47 - going to do is just scroll all the way
301:48 - to the top here
301:49 - and i want to see what it's going to be
301:51 - set as if it's still the same value or
301:54 - it's a different value
301:57 - um
302:01 - and i can't really tell i guess we'll
302:02 - just have to wait for that to provision
302:05 - so i'll see you back in a bit
302:08 - all right so after a little bit of
302:09 - digging i looked at the actual sources
302:11 - here it says for selecting a non-default
302:13 - provider configuration you use the
302:15 - provider
302:16 - option so
302:18 - you know a lot of people are saying that
302:19 - they're agnostic and that's how i
302:20 - thought they worked but i guess you do
302:21 - have to specify the provider so i
302:23 - suppose
302:25 - we will just have to duplicate this
302:26 - twice
302:28 - alright so that was kind of an
302:29 - interesting investigation something we
302:31 - can
302:32 - try to remember for later so this would
302:34 - be east
302:36 - and this would be west
302:40 - and so i'll just have to specify the
302:41 - provider here and we'll just say adabus
302:44 - west
302:45 - and for this one we'll say adabus east
302:49 - and then we'll scroll down below
302:52 - and so i don't think we need the
302:54 - interpolation here i will leave it in
302:56 - it's not a big deal
302:58 - um where did we put the name well right
303:00 - in front of it okay great so
303:02 - we'll do east here
303:06 - we will do west here
303:18 - try this again west here
303:21 - oops that's the east one
303:23 - and then there's the west one here okay
303:25 - great and so we'll try this again
303:37 - and so i think this time we're going to
303:39 - get what we want
303:41 - so i mean that's really interesting that
303:43 - if you don't provide a provider you have
303:44 - to choose
303:45 - an operation for it to happen and um
303:50 - it's great to know that uh
303:52 - you have to set providers for data
303:53 - sources but you know you learn these
303:55 - things pretty quick because when you get
303:56 - into practical
303:58 - applications you start uh
303:59 - intersecting with those things but i'll
304:01 - see you back here in a moment when this
304:02 - is successful okay
304:04 - all right great so it says those have
304:06 - been provisioned so what i'm going to do
304:07 - is pull up aws here
304:10 - and we are going to
304:11 - make our way over to here
304:15 - and
304:18 - i'm gonna go over
304:20 - to
304:21 - us west one i think we said it too i
304:23 - can't remember
304:26 - and so we should have an instance there
304:27 - great
304:28 - and we'll make our way over to us east 2
304:32 - and we have our server there great so
304:34 - that's all we wanted to learn here so
304:36 - i'm going to go ahead and just tear this
304:37 - down so we'll say
304:39 - terraform apply
304:41 - destroy
304:43 - auto approve
304:45 - and we are good to go
304:48 - see that it runs here for a little bit
304:50 - and then i'm just going to stop here
304:52 - great and i will see you in the next
304:54 - follow along
304:55 - all right so
304:57 - we're going to learn all about alias and
304:58 - so what i'm going to do is create a new
305:00 - file
305:01 - here in our next folder main.tf i'm
305:04 - going to make sure i'm in that correct
305:05 - directory
305:07 - 0 53 is what i have right now it might
305:10 - be different for you later on in the
305:11 - course
305:12 - and so what i want to do is go to my uh
305:15 - anything like maybe count here
305:17 - and grab this one because i'm just going
305:19 - to
305:20 - update this ec2 instance for our alias
305:23 - and we're actually going to have two
305:24 - instances
305:26 - okay we're going to have an east in the
305:28 - west so i'm going to say east
305:32 - and west
305:34 - and i'm just going to change this here
305:35 - to my server
305:38 - my west server
305:41 - my eserver
305:43 - and what we can do here is just bring
305:46 - this down and the whole point of this
305:47 - tutorial is to show you about aliases so
305:49 - here we can go alias
305:51 - and
305:52 - we'll call this
305:54 - east and we'll have i don't know if we
305:57 - can do this but i'm going to try anyway
305:59 - i actually never tried but i wonder if
306:01 - we can have a um
306:03 - like a provider that has no default
306:06 - like where it does not have an alias
306:08 - because i think that'd be a really great
306:09 - way to be very explicit
306:10 - so here we have our instance i want this
306:12 - to be the east server
306:15 - and then i want to have a west server
306:23 - and then for our server name this will
306:25 - be server east
306:28 - and for this one it will be server west
306:32 - and so then we'll add in our provider
306:34 - and this will be aws
306:36 - west and then for this one it'll be aws
306:40 - east the only thing here is the ami is
306:42 - not going to be any good to us so what
306:44 - we can do is go grab some code so here
306:47 - uh this is like hashicorp supports
306:48 - terraform two amazon links two and so
306:50 - here's the code that we need to pull
306:52 - that so what i'm going to do is just go
306:54 - ahead and
306:56 - grab this aws ami here
307:00 - okay and i'm just going to paste this
307:02 - above
307:04 - our instance here
307:09 - and so that should grab that uh that
307:11 - instance
307:13 - we're going to need the name
307:14 - so i'm going to go down here
307:17 - just paste this line here and we'll just
307:18 - modify it so it's database
307:21 - amazon linux 2 has to start with data
307:23 - because it's a data source
307:25 - oops we don't want to change our
307:26 - instance type that's a mistake
307:29 - we want to
307:30 - do that for the ami here
307:33 - okay and we'll go down
307:35 - and replace it for both because we both
307:36 - want them on amazon links too but this
307:38 - way it'll pull the correct ami
307:40 - so we have server east server west we
307:43 - have the east and west public ip
307:45 - so it generally looks good i don't know
307:48 - if this is going to arrow but i guess we
307:49 - will find out so as always we'll do a
307:52 - terraform init
308:00 - all right and so now that tara for a
308:01 - minute is done we are going to do a
308:03 - terraform plan
308:06 - uh and see if that works
308:10 - and so notice it says the region where
308:12 - aws operations will take place
308:14 - so
308:15 - um i guess what we'll do is set it as
308:17 - usc 1 because we have two resources set
308:21 - um provider database region
308:23 - because we set the provider explicitly
308:25 - in both
308:26 - i'm kind of curious what would happen
308:27 - because it's saying usc 1 usc 2 and
308:29 - that's something i didn't specify
308:32 - what i want to do is i just want to be
308:34 - even more particular and set one
308:36 - provider that is totally and by the way
308:38 - this is supposed to be wes that's a
308:39 - mistake
308:40 - i'm just going to set it to something
308:42 - that i know is very different okay
308:45 - so
308:46 - southeast and west will just change this
308:47 - a little bit
308:48 - so how about
308:51 - we'll do
308:52 - us west one and then usc's two which is
308:55 - a little bit different
308:58 - and we'll do that because i want to see
309:00 - what it prompts
309:04 - so we'll just say us east one here
309:09 - and so the arguments owners is required
309:12 - but no definition was found in our data
309:14 - source which i'm kind of surprised
309:15 - because we copied that straight from
309:19 - hashicorp
309:21 - so maybe it's just a little article or
309:23 - maybe i did not copy that particular
309:24 - line
309:25 - so it should say who the owner is
309:29 - yeah say we're like owner alias
309:31 - but that's fine we can just look it up
309:32 - here
309:34 - because here it says owners and we just
309:36 - specify that as amazon it's not a big
309:37 - deal
309:43 - the real challenge to terraform is just
309:45 - dealing with the changes but i mean like
309:47 - it's pretty pretty powerful system so
309:49 - you just get kind of used to it
309:51 - so i'm just gonna try to fix that
309:52 - indentation
309:53 - i don't know if we need that owner alias
309:55 - there if we have owners up here but
309:57 - we'll try this anyway and see what
309:59 - happens
310:03 - okay
310:06 - i mean the major regions for north
310:08 - america is either uh usc 1 or usps2 so
310:11 - that kind of makes sense uh incorrect
310:13 - attribute value type
310:15 - so we have aws instance us west data dot
310:19 - abus ami
310:21 - is an object with multiple tributes so i
310:23 - think the thing is that we just had to
310:25 - specify its id because that's actually
310:27 - returning the ami it's just not going to
310:29 - infer it
310:30 - so that's just my mistake as per usual
310:32 - so we'll just go there and place in the
310:35 - id
310:49 - um so what we'll do is we'll just take a
310:51 - look here and see if it's going to
310:52 - provision the right place so this looks
310:53 - all good um so let's just go ahead and
310:56 - pull the trigger and see how it goes
311:04 - [Music]
311:08 - hey it's andrew brown from exam pro and
311:10 - we are on to our life cycle for the
311:12 - resource meta arguments so what i'm
311:15 - going to do here is just pull up the
311:16 - documentation so we can just take a look
311:18 - at an example for this so it's under
311:20 - providers
311:22 - or sorry it's under resources meta
311:24 - arguments life cycle
311:26 - and so you have this option where you
311:27 - can kind of set the behavior of it
311:30 - we covered this in the lecture content
311:32 - so like create before destroy so by
311:34 - default one terraform must change a
311:35 - resource argument that cannot be updated
311:37 - in place uh terraform will instead
311:39 - destroy the existing object then create
311:41 - a new replacement such as like create or
311:43 - destroy or maybe prevent destroy would
311:45 - be more interesting to do
311:46 - and a lot simpler to do so that's what
311:49 - we'll do we'll just set ourselves a life
311:50 - cycle thing but what i'm going to do is
311:53 - make my way over to
311:55 - one of our pre previous examples
311:57 - an easy one to pull from right now is
311:59 - still count because it's very easy to
312:00 - modify so i'm going to copy the contents
312:03 - of that
312:04 - and what i'm going to
312:05 - do here is open this up
312:08 - and make a new main.tf
312:11 - and we will paste that on in here
312:16 - and apparently i did not copy it
312:21 - i don't know for me like coding and vs
312:22 - codes like coding with like oven mitts
312:24 - on it's really hard i wish i could just
312:26 - use full vim but we're on a windows
312:28 - machine so you don't get to see the full
312:30 - power of my coding
312:31 - um so what we'll do here is get rid of
312:33 - that count because we only need a single
312:35 - instance here
312:36 - and
312:38 - we'll just simplify this to my server
312:41 - and we'll just change this back to my
312:43 - server
312:44 - and so we are going to specify lifecycle
312:50 - and i think it's just destroy but let's
312:51 - just go double check or prevent destroy
312:54 - maybe
312:57 - we go over here
312:59 - actually it's a boolean so it's probably
313:01 - lifecycle as a block
313:03 - yeah it's a block
313:05 - okay
313:15 - and we'll say true so we should be able
313:18 - to create this instance but when we go
313:20 - and try to destroy it that's where we're
313:21 - going to
313:23 - see the effect of this service
313:25 - so i'm going to make sure i cd into that
313:27 - directory that i just created with that
313:29 - new file and we're going to do a
313:31 - terraform init
313:35 - and so we did our terraform init but
313:37 - what we're going to do is do a terraform
313:41 - plan
313:43 - actually we'll just do apply because i
313:44 - have a lot of confidence in what i wrote
313:46 - here
313:47 - if it blows up on our face it blows up
313:49 - and we'll just correct it here but i'm
313:50 - pretty sure that this is going to work
313:51 - out pretty okay
313:56 - and so we will let this provision and
313:58 - i'll see you back here in a moment okay
314:00 - great so that looks like it's
314:02 - successfully provisioned and so let's go
314:03 - ahead and try to do a destroy
314:06 - so we'll do a terraform apply and we'll
314:08 - say destroy
314:09 - and auto approve and then we'll see what
314:11 - happens here
314:14 - because that life cycle should prevent
314:16 - it from being destroyed
314:19 - and so there it says resource abs
314:21 - instance my server lifecycle prevent
314:23 - destroy set but the plan calls for this
314:25 - resource to be destroyed to avoid this
314:27 - error continue with the plan
314:29 - either disable it or reduce the scope of
314:32 - the plan using the target
314:34 - so what i'm going to do here is put
314:37 - false
314:38 - and then we'll try this again
314:43 - and it should destroy the instance and
314:45 - if that's the case
314:47 - then uh what we can do is we'll just end
314:50 - here and we'll move on to our next step
314:57 - but yeah it looks like it's destroying
314:58 - so we are in good shape okay so there we
315:01 - go
315:04 - [Music]
315:08 - all right so we're starting our
315:09 - introduction here into terraform
315:11 - expressions because there's a lot we can
315:13 - talk about here so expressions are used
315:15 - to refer to or comp or compute values
315:17 - within a configuration so terraform
315:20 - expressions is a large topic and we'll
315:22 - be covering types and values strings and
315:24 - templates reference to values operators
315:27 - function calls conditional expressions
315:29 - for expressions
315:31 - splat dynamic blocks type constraints
315:34 - actually i don't think we covered typing
315:35 - strains just because there's nothing
315:36 - really to say about it but we definitely
315:38 - cover version constraints so yeah let's
315:40 - start off this section and go to it
315:46 - so we're taking a look here at types and
315:48 - values for expressions and so the result
315:50 - of an expression is a value and all
315:52 - values have types and so we have
315:53 - primitive types no type and complex
315:56 - structural collection types that last
315:57 - one is a bit more complicated than what
316:00 - we are presenting here we're going to
316:01 - simplify it and then cover it later okay
316:04 - so for primitive types we have string so
316:06 - you have your double quotations which
316:08 - represent your string then you have
316:10 - numbers so this can be uh integers or
316:12 - floats then you have booleans so this is
316:15 - either true or false for node types we
316:17 - have null uh and so null
316:19 - is different in all different types of
316:21 - languages so it's very important to
316:22 - understand how it works and so null
316:24 - represents absence or omission when you
316:26 - want to use the underlying default of a
316:28 - provider's resource configuration option
316:30 - so when you're saying null doesn't mean
316:32 - it's nothing it's going to be whatever
316:33 - the default is
316:35 - and the default also could be nothing
316:36 - it's just depending on what that is on
316:38 - the provider so for collection or for
316:40 - collection types complex structural
316:42 - types we have list or tuple and this
316:44 - generally looks like an array then you
316:46 - have map and object and this looks like
316:49 - basically like a json object or
316:51 - a ruby hash or i think they call it in
316:53 - python a dictionary
316:55 - so that gives you an idea of the basic
316:57 - types but for this last one here because
316:59 - this i found really confusing list
317:01 - tuple's map object we definitely
317:03 - explained this more in the course okay
317:09 - okay so we're giving a little bit more
317:10 - attention to the string type because
317:12 - there's a little bit more going on here
317:14 - so when quoting strings you've got to
317:15 - use double quotes uh at one point
317:17 - terraform i believe supported single
317:19 - quotes i think it only supports double
317:20 - quotes now and honestly you generally
317:22 - want to just use double quotes because
317:24 - double quotes always support escape
317:25 - sequences this is pretty much standard
317:27 - across all programming languages
317:29 - but the idea here is you can do things
317:31 - like new line carriage return tab
317:34 - literal quotes literal backslashes
317:36 - unicode characters both basic
317:38 - multilingual plane and supplementary
317:40 - planes
317:41 - there are some special escape sequences
317:43 - this makes sense when we look at the
317:44 - next slide for string templates but
317:47 - there's these things where you can do
317:48 - interpolation and so you might not want
317:51 - to actually do them you might want to
317:54 - do it without and so if you just use
317:56 - double of the symbol that will allow you
317:58 - to do it
317:59 - then there is also the ability to have
318:00 - multi-line strings and we use here doc
318:03 - for that and so here doc is a little bit
318:05 - different in all languages but here
318:06 - we're using unix style so that means
318:08 - that we're going to start with these two
318:09 - angled brackets to the left
318:11 - our opening angle brackets followed by
318:13 - some word that is all an upper case it
318:16 - doesn't have to be eot it could be
318:18 - whatever you want
318:19 - i always like to type here doc and then
318:21 - it has to end at the same indentation
318:23 - level with the same
318:24 - word all uppercase and then everything
318:26 - in between will be treated
318:28 - as
318:29 - um
318:30 - as multi-line the nice thing about this
318:32 - is that when you have this you can
318:33 - actually just use double quotes wherever
318:35 - you want because you don't have to
318:36 - escape them okay let's take a look at
318:38 - string templates because this is the
318:39 - real power of strings so the first is
318:42 - string interpolation and this allows you
318:44 - to evaluate an expression between the
318:46 - markers so the idea is instead of having
318:48 - to do double quotations and do plus
318:50 - signs to stitch together uh strings what
318:53 - you do is just do a dollar sign
318:55 - curly braces and then put the the
318:57 - expression or variable that you want to
319:00 - be
319:01 - converted okay then you have string
319:03 - directives and these are slightly
319:04 - different this allows you to evaluate an
319:06 - expression uh for a conditional logic
319:08 - between the markers so
319:10 - let's say we want to have an if-else
319:12 - statement so if the name is blank
319:14 - um
319:15 - then use
319:17 - var name or sorry if it's not blank then
319:20 - use the name provided otherwise
319:22 - put it as unnamed okay you can also use
319:25 - interpolation directives with here docs
319:28 - so you know just to show that you can do
319:30 - it um and then the last one thing here
319:32 - is you can uh
319:34 - strip out white space that would
319:35 - normally be left by directives blocks by
319:37 - providing a trailing tilde um so just
319:40 - notice this little tilde here on the end
319:42 - because these do take up space so if you
319:44 - were to view it there'd just be an empty
319:45 - space there if you want that space to
319:47 - vanish then you just put that tilde on
319:48 - the end so there you go
319:50 - [Music]
319:54 - let's take a look here at the possible
319:56 - operators that we can use within
319:57 - terraform expressions and so just a
319:59 - refresher operators are mathematical
320:01 - operations you can perform two numbers
320:03 - within expressions i'm not going to show
320:06 - full examples here and the outputs of
320:08 - them because this is pretty common for
320:10 - programming or scripting languages and
320:11 - also the exam's not really going to
320:13 - focus on the use cases for these so it's
320:16 - just more so to tell you what is
320:17 - available to you so you know what you
320:19 - can use the first is multiplication so
320:21 - you take two numbers and times them to
320:23 - get a larger number division so uses a
320:26 - forward slash modulus if you never use
320:29 - modulus i really like this it allows you
320:31 - to see if something is divisible by a
320:33 - certain amount and then you get the
320:34 - remainder you have addition subtraction
320:37 - uh if you need to flip to a negative
320:39 - number you can just put a minus sign in
320:40 - front of it if you need to do um equals
320:43 - it's doubles if you want to do does not
320:45 - equal its exclamation equals then we
320:49 - have a less than so that's a open angled
320:52 - bracket less than or equal so that will
320:55 - be followed by an equal sign greater
320:57 - than is a closing angle bracket and then
320:59 - followed by an equal sign for greater
321:01 - than or equal you have or which uses the
321:03 - double pipes you have n which uses the
321:05 - double ampersands if you need to flip a
321:07 - boolean you can just put an exclamation
321:10 - in front of it so if it was true now it
321:11 - is false if it was false now it is true
321:13 - i'm not sure what it would do for a null
321:15 - i would think that it would turn it to
321:17 - true but yeah so there you go
321:20 - [Music]
321:24 - we're taking a look here at conditional
321:26 - expressions and this is pretty much the
321:28 - only way that you can do if else
321:29 - statements uh within terraform but it
321:31 - works out fine and so it's actually
321:33 - using the ternary style of if else so
321:36 - what that looks like it's a single line
321:38 - so the it starts with a question mark so
321:39 - that's the if and then it's the true
321:41 - value and then the colon represents the
321:44 - else and then you have your false value
321:46 - it's ternary because there's three
321:47 - things one two and three okay so that's
321:50 - the way i remember uh this thing it's
321:52 - not a a preferred way of doing ifl
321:55 - statements in other languages
321:57 - because it is a little bit condensed but
321:59 - it makes sense when you're using
322:01 - scripting language and you're really
322:02 - restricted on per line actions so this
322:05 - is what it would look like in action so
322:06 - we'd have a variable that is a
322:09 - if a does not equal blank then use
322:12 - the variable or set it to default a as a
322:15 - string so that's kind of an example
322:16 - there
322:17 - just wipe that away there the return
322:19 - type of it of the if and else must be
322:22 - the same type
322:23 - so
322:24 - if you have a number
322:26 - okay and the one if statement and then
322:28 - you have a string they have to be the
322:30 - same so
322:31 - uh
322:32 - obviously we want a string to be
322:34 - returned in both cases so what we'll do
322:35 - is use this built-in function to string
322:37 - to turn this into a string so that we're
322:39 - not going to run into any problems so
322:42 - there you go
322:46 - [Music]
322:47 - all right we're taking a look here at
322:48 - four expressions and so these allow you
322:51 - to iterate over a complex type and apply
322:53 - transformations a four expression can
322:54 - accept as input list set tuple map or an
322:57 - object
322:58 - i want to distinguish this between for
323:00 - each which is a resource meta argument
323:02 - which allows you to iterate over
323:05 - a a resource or a collection of
323:07 - resources
323:08 - that are similar but four expressions
323:10 - are for these primitive types or not
323:13 - these primitive types but these
323:14 - collection structural types that we
323:16 - talked about in types and values okay so
323:18 - here's an example of something we might
323:20 - want to do imagine we have a list of
323:22 - names and we want to iterate through our
323:23 - list and
323:24 - make them all uppercase so we could do
323:26 - that with this four so we have the four
323:28 - with the in and then we're providing the
323:30 - value of each item in our list uh it's
323:32 - easy to think of list or tuple as an
323:34 - array so i'll just call it an array okay
323:37 - then you have a map
323:39 - and so this is where it has a key and
323:40 - value this is going to be for maps or
323:42 - objects and the idea is that we can then
323:44 - go apply transformations and notice that
323:46 - we are returning only a single string so
323:48 - we're actually going to get back
323:49 - something like a tuple and so how does
323:52 - it decide whether it returns a
323:55 - a array or something that looks like an
323:56 - object we'll explain that here in a
323:58 - moment the last one here is we have a
324:00 - list with an index so it's very similar
324:02 - to the first one but in this case
324:04 - we want to know the index here so
324:07 - imagine this says zero is andrew
324:09 - one is cindy
324:11 - two is peter and it would come back as
324:13 - an array or list so let's talk about the
324:15 - return types the return types are
324:17 - defined by the um
324:19 - the braces or brackets that are around
324:21 - the actual expression so if you have
324:23 - square braces we're going to get back a
324:24 - tuple so let's just think of an array so
324:26 - for in this case where we had our list
324:29 - it was returning back a tuple okay
324:32 - if we have curly braces it's going to
324:34 - return an object so here we have a list
324:37 - so it's like an array that's coming in
324:38 - here and then we're specifying as the
324:40 - return
324:41 - uh this kind of object structure and so
324:44 - that's how we're going to get that so
324:45 - that's that
324:47 - there's one other thing we want to
324:48 - mention which has to do with
324:50 - reducing or ordering so an if statement
324:52 - can be used uh to reduce the amount of
324:54 - elements returned so in this case what
324:57 - we're doing is we're using an if
324:58 - statement
325:00 - and so we're saying unless this is true
325:02 - so if this is true then return if it's
325:04 - not then return less of what is there so
325:08 - if there's any blank names that are in
325:10 - our list
325:11 - they just won't show up it'll just only
325:12 - show names that are actually there
325:15 - then we have implicit element ordering
325:17 - so since terraform can convert an
325:18 - unordered type so map objects and sets
325:20 - to an order type list or tuples it will
325:23 - need to choose an implied ordering so
325:25 - for maps and objects they're stored by
325:27 - key a to z set of strings stored by a
325:31 - strings a to z everything else is going
325:33 - to be arbitrary ordering so there you go
325:35 - [Music]
325:39 - all right we're taking a look here at
325:40 - splat expressions and these provide a
325:42 - shorter expression for the four
325:44 - expression which we just looked at so
325:46 - what is a splat operator a splat
325:47 - operator is represented by an asterisk
325:49 - it originates from the ruby language and
325:51 - splats in terraform are used to roll up
325:53 - or soak up a bunch of iterations in a
325:56 - for expression so here is an example
325:59 - where it's for list sets or tuples so
326:01 - here we have a list and the idea is that
326:03 - we're iterating over uh this id or in
326:06 - this case we're iterating over um
326:09 - it's objects or sorry a array and then
326:12 - that array is containing a bunch of
326:14 - objects and so we're accessing the name
326:16 - within it and so instead of writing it
326:18 - like that we don't even have to use a 4
326:19 - at all what we can do is put this
326:21 - asterisk here and this is going to
326:23 - equate to the same thing so here this is
326:25 - going to return all the ids and in this
326:27 - case it's going to return a all the
326:29 - lists and allow us to access
326:31 - the interfaces along to the name okay
326:34 - so let's take a look
326:36 - at splat expressions uh when we're
326:38 - applying them to lists so if the value
326:40 - is anything other than a null value then
326:42 - the splat expression will transform it
326:44 - into a single element list if the value
326:46 - is null then the expression the then the
326:48 - split expression will return an empty
326:50 - tuple and so this behavior is useful for
326:52 - modules that accept optional input
326:54 - variables whose default value is null to
326:56 - represent the absence of any value to
326:58 - adapt the variable value to work with
327:00 - other terraform language features that
327:02 - are designed to work with collections so
327:04 - i know that's a big mouthful it's just
327:06 - kind of like an
327:07 - edge case to these splat expressions
327:09 - this is not going to show up on the exam
327:10 - but i just wanted to show it to you in
327:12 - case you're interested here and just
327:13 - notice the splats being used over here
327:15 - okay
327:17 - [Music]
327:21 - so we're taking a look here at dynamic
327:22 - blocks and this allows you to
327:24 - dynamically construct repeatable nested
327:25 - blocks so i want to emphasize that this
327:27 - is a very powerful feature that can lead
327:29 - to abuse where your code becomes
327:31 - difficult to read but it's also very
327:33 - flexible it will absolutely show up in
327:35 - the exam so pay close attention on how
327:37 - this works
327:38 - so let's say you needed to create a
327:39 - bunch of ingress rules for your ec2
327:42 - security group
327:43 - and so this would lead to a lot of
327:45 - repeatable elements for rules within
327:47 - your resource and so what you can do
327:49 - with dynamic blocks is you can define
327:51 - objects locally so here i have my
327:53 - ingress rules as an object so here's one
327:56 - and here is two
327:57 - and then using dynamic block what i can
328:00 - do is use a 4-h to reference those
328:02 - ingress rules
328:03 - and within this dynamic ingress block
328:06 - we'll have our content and this will
328:07 - specify the things that we're swapping
328:10 - out so the idea is that it will iterate
328:12 - over this and apply all those values
328:13 - there so it's something you can't do
328:16 - with a 4-h or a count this is basically
328:18 - the the most advanced
328:20 - iteration but just understand if you
328:22 - remember this use case and it's very
328:23 - easy to understand or remember
328:25 - how to use it
328:27 - when you're doing an exam okay
328:28 - [Music]
328:32 - we're looking at version constraints so
328:34 - terraform utilizes semantic versioning
328:36 - for specifying terraform providers and
328:38 - module versions so semantic versioning
328:41 - is an open standard on how to define
328:43 - versioning for software management so
328:44 - you have your major minor and your patch
328:48 - and so here are examples or variants on
328:50 - this here so we have um you know where
328:52 - you see major minor and you can have
328:54 - this rc
328:56 - this rc1 or you could not have it or you
328:58 - can have beta and this can all be read
329:00 - about on the semver.org but just to
329:03 - quickly go through it
329:04 - major version is when you want to make
329:06 - incompatible api changes
329:08 - minor is when you add functionality that
329:10 - is backwards compatible in manner
329:13 - patch is when you make backwards
329:14 - compatible bug fixes
329:16 - there are additional labels for
329:17 - pre-release build metadata that are
329:19 - available as extensions so that's where
329:21 - we see
329:23 - those little
329:24 - additions there at the top a version
329:26 - constraint is a stream containing one or
329:28 - more conditions separated by commas so
329:30 - you have your equals
329:32 - or no operators or sorry your
329:35 - equals or no operators so match exact
329:38 - version of the number so it's either
329:40 - with the equals or not with the operator
329:43 - at all okay that's what i'm trying to
329:44 - write there excludes an exact number uh
329:47 - version so if we just said does not
329:49 - or will not be uh 1.0.0
329:53 - then you have a comparative one so that
329:55 - the version has to be greater or equal
329:57 - to
329:58 - 1.0.0
330:00 - um and then we have one with the tilde
330:02 - so allows only the rightmost version of
330:04 - the last number to increment so what
330:06 - this means is that the the last number
330:08 - here um is only allowed to increment
330:10 - okay so let's talk about progressive
330:13 - versioning because this kind of ties
330:14 - into semantic
330:15 - versioning but progressive versioning is
330:17 - the practice of using the latest version
330:19 - to keep a proactive stance of security
330:22 - modernity and development agility and we
330:25 - like to describe this as practicing good
330:26 - hygiene when we're uh working with our
330:29 - code okay so by being up to date you're
330:32 - always pushing left on things that need
330:34 - to uh stay fixed or compatible uh you'll
330:37 - have to deal with smaller problems
330:38 - instead of dealing with a big problem
330:40 - later on
330:41 - run nightly builds is a good example
330:43 - where you might have golden images and
330:45 - the idea is to provide a warning signal
330:47 - just to kind of elaborate on that a
330:49 - nightly build is an automated workflow
330:51 - that occurs at night when developers are
330:53 - asleep so if the build breaks because a
330:55 - change is required for the code the
330:56 - developers will see this upon arrival in
330:58 - the morning and be able to budget
331:00 - accordingly so what i'm trying to get at
331:01 - is that when you are
331:04 - like
331:05 - putting in your providers especially if
331:07 - you copy from the terraform
331:10 - the terraform website to get the
331:11 - providers and modules what they'll do is
331:13 - they'll actually have it set as the i'm
331:15 - just going to roll back here for a
331:16 - second but they'll actually have it set
331:17 - as the equals what i'm saying to you is
331:19 - you want to use something like a tilde
331:22 - or a greater than or equal sign so that
331:24 - you are staying progressive okay so
331:27 - that's just one thing i want you to
331:28 - watch out for and we will talk about
331:29 - that when we go through the fall alongs
331:31 - okay
331:34 - [Music]
331:36 - hey it's andrew brown from exam pro and
331:37 - we are moving on to our expressions
331:39 - section starting with string templates
331:41 - let's learn all about that and we are
331:42 - going to have to cd into a new folder
331:44 - here
331:45 - so i have one called expressions and we
331:48 - will make ourselves a new file called
331:50 - main.tf
331:52 - we'll define a local backend and i'm
331:55 - going to just define a new variable
331:58 - i'm going to call this variable hello
332:01 - and i'm going to give it a type of
332:03 - string
332:06 - okay and that's all i'm going to do
332:08 - there and then what we're going to do is
332:09 - create ourselves a tf var file so we'll
332:12 - say
332:13 - terraform dot tf vars
332:16 - and then there we'll just set hello
332:18 - to world
332:20 - and so what i want to do is enter
332:21 - terraform console
332:23 - okay this is going to allow us to just
332:25 - run arbitrary expressions i want to show
332:26 - you how you quit it you just type exit
332:28 - and so we'll do is make a string so
332:30 - we'll just first do a hello world
332:32 - i want to show you that you can put a uh
332:35 - a new line there and we'll get back a
332:36 - multi-line document this is uh um this
332:39 - console doesn't allow for multiple lines
332:41 - so we can't write our own here doc but i
332:42 - can show you what it looks like
332:44 - and then we can interpolate a uh a
332:47 - variable there so we'll just say hello
332:50 - and notice we get hello world so that's
332:52 - how interpolation works it's not super
332:55 - complicated
332:56 - uh directives is a little bit different
332:59 - where we have string
333:00 - right so we can do instead this
333:04 - but the control word's a bit different
333:05 - because you're using the uh
333:08 - this um
333:10 - percentage sign the directives when
333:11 - you're doing something like an if else
333:12 - statement so what we could do
333:15 - is
333:17 - say something like
333:19 - barsoon here
333:23 - okay
333:26 - and
333:27 - what i'm going to do is just exit out
333:28 - here clear so i don't know if it um it
333:31 - reloads the uh the variables there if
333:33 - you just change them on the fly
333:35 - but what we'll do is we'll just say
333:37 - hello
333:38 - and we will write ourselves
333:41 - an if statement so we're going to say if
333:42 - var.hello
333:44 - equals
333:48 - bar soon
333:49 - what it's going to do is then print out
333:52 - um
333:54 - it's going to instead print out
333:56 - mars
333:58 - okay
334:00 - otherwise
334:02 - what we're going to get is
334:06 - um
334:08 - world okay
334:10 - and you know what's really interesting
334:11 - is we're using the if and else
334:14 - here
334:16 - but i i could have swore that the only
334:18 - thing you had was ternary operators so
334:20 - like if you look at the um conditional
334:22 - expressions
334:24 - notice here that it's doing this and
334:26 - it's not showing the documentation the
334:27 - efl so
334:29 - you know maybe
334:30 - maybe that's just for a one-liner and if
334:32 - else does exist for expressions and i
334:34 - might have missed that in the course
334:36 - but you cannot blame me if the
334:37 - documentation shows it like that okay
334:40 - so what i'm gonna do here is just go
334:43 - ahead and hit enter
334:44 - and here we get hollow mars so that
334:46 - pretty much
334:48 - uh shows you how
334:50 - string interpolation works um for both
334:53 - interpolation and directives
334:54 - we'll just type it exit and so that's
334:56 - all we want to do there okay
334:58 - [Music]
335:02 - all right so let's learn about four
335:03 - expressions so four expressions allow us
335:05 - to kind of iterate over something and do
335:07 - something fun with it
335:08 - and so what we're going to do is create
335:11 - ourselves um some more complex types
335:14 - here
335:14 - so how about instead like this was just
335:16 - hello a second ago we'll change this
335:18 - over to worlds and what i'm going to do
335:20 - is just list out a bunch of worlds here
335:22 - from the uh the book uh you know john
335:24 - carter books
335:26 - so we have barsoon
335:28 - we have
335:30 - jasooom
335:32 - we have things like sesum
335:36 - okay and then we have oops
335:40 - so assume and then we have something
335:42 - like cosum okay
335:45 - and so the idea here is now that we've
335:48 - defined that there we've got to go back
335:49 - to our main tf i'm just going to update
335:51 - this to be worlds
335:54 - this will just be a list
335:56 - all right
335:57 - and so what we'll do is make our way
335:58 - over to terraform cloud or sorry
336:00 - terraform console
336:02 - and we'll try to do a for loop here so
336:05 - i'm going to do square braces for
336:07 - and we'll just say w in var dot worlds
336:12 - and
336:13 - then what we can do here is
336:17 - make a colon whoops
336:20 - okay and then type upper
336:24 - w and so that returns them all in upper
336:27 - case there
336:29 - and if we were to use the splat operator
336:31 - and technically this is something we
336:32 - want to move on to the next part
336:34 - but um
336:36 - yeah we'll leave it for the next video
336:38 - i'll just keep that separate so that is
336:40 - for just if we had a list imagine if we
336:42 - had this as the as an index here
336:49 - or we'll say map
336:52 - because what we can do is actually map
336:54 - these two names
336:58 - so bring this down here
337:02 - and this would be earth
337:05 - now you can use the colon or the equals
337:07 - just whatever you want to use here
337:09 - they're both supported
337:10 - actually this is an earth this is mars
337:12 - and then this one here is earth
337:15 - and this one here would be
337:19 - jupiter
337:21 - and then this one here would be venus
337:26 - okay
337:27 - um and so i think we still need to
337:29 - define it over here
337:32 - so i'm just going to say worlds map
337:35 - and then what we can do here instead of
337:37 - having lists we can say map
337:40 - and we'll try to iterate over this so
337:43 - it's going to be very similar
337:45 - except the difference is now we have a
337:46 - key and we have a value
337:50 - and so if we just want to return the
337:52 - names in capital we can just do k here
337:56 - oh that's the index uh what if we do
337:58 - [Music]
338:01 - oh you know why it's because um
338:03 - we have to do worlds map
338:06 - okay so reference to undeclared variable
338:09 - map so we do have to exit and restart
338:17 - and oh sorry the input was complaining
338:19 - there so i'll just copy the one up here
338:20 - so i have to type it again
338:24 - nope it did not work as we thought okay
338:26 - so i do have to type it by hand
338:28 - kind of a pain but i guess that's just
338:29 - how it works so we'll say 4k v in var
338:33 - dot worlds
338:35 - map
338:36 - and then we say upper
338:38 - b here
338:40 - okay or we could just say take the k
338:41 - here and get the other values now i
338:44 - didn't show you this a moment ago but if
338:45 - we do worlds here
338:47 - we can specify an index and an index
338:50 - would come first so it would be the
338:51 - value like the world the second and the
338:54 - index is first so notice that i is all a
338:58 - number
338:59 - the index of it and then the that is the
339:01 - value there
339:02 - um we could probably also return this as
339:06 - a map so notice that square braces are
339:08 - going to give you a list or and then
339:11 - curlers are going to give you map which
339:12 - kind of correspond to their actual data
339:13 - structure so if we wanted to turn this
339:16 - into
339:17 - the opposite here what we could do is
339:19 - just say
339:20 - we probably do stringer interpolation
339:22 - like this here and do i
339:25 - and then do equals or even maybe
339:27 - a colon here
339:29 - and then do the world like that and it
339:32 - didn't like the way i specified it so
339:33 - i'll try it like this instead
339:37 - extra characters after line four
339:42 - so
339:43 - i don't see that wrong there just give
339:46 - me a moment i think um
339:50 - oh you know what it's we need to use in
339:52 - this case i think we have to do it this
339:53 - way
339:55 - okay so you use the hash rocket so in
339:57 - that particular case you have to use the
339:59 - hash rocket that's what that symbol is
340:00 - called the equal zero
340:02 - um and so that's how we can get that
340:04 - value there so that pretty much
340:06 - outlines how to use um the for loops and
340:09 - next we're going to go probably look at
340:11 - the splats okay so i'll see you back
340:13 - here in a moment i'm just going to exit
340:15 - this
340:16 - actually before we move on to splats i
340:18 - just want to add one more thing to four
340:19 - expressions which is filtering so we'll
340:22 - just go back here and get back into
340:24 - [Music]
340:25 - our terraform console here
340:28 - and what i'm going to do is write
340:29 - another four
340:31 - and it probably would make sense to use
340:33 - the uh the the world's list we just did
340:35 - there so i'm going to do kv
340:38 - type in var worlds
340:40 - map and so the idea here is that i only
340:44 - want the
340:46 - let's say we'll say the upper i only
340:48 - want the
340:50 - key value here
340:51 - but i would just say at the end here i
340:53 - can say if
340:55 - the v the value equals and i can't
340:58 - remember what we set these as
341:00 - so this is key in value so if it is mars
341:05 - i think it's double equal so if it is
341:07 - mars
341:10 - then only return it that way or we could
341:12 - say the opposite say
341:14 - give me everything but mars
341:16 - okay so i just wanted to show you could
341:17 - use that if to do that filtering so i'm
341:20 - going to exit there and we'll move on to
341:22 - splats okay
341:27 - all right so we're moving on to splats
341:29 - and what we'll have to do is create
341:30 - ourselves a new
341:32 - variable here i'm going to call this one
341:35 - worlds
341:36 - splat and this one is going to be a list
341:39 - and so if we go back up here to tf vars
341:42 - we'll make ourselves a new variable down
341:44 - here and we'll just call this one splat
341:46 - and it's going to be a list but it's
341:48 - going to contain inside of it a bunch of
341:50 - maps okay so we'll do pretty much this
341:54 - up here
341:57 - okay um but what's going to happen here
341:59 - is going to be slightly different where
342:01 - we are going to
342:01 - [Music]
342:03 - set um one is the name
342:11 - so we'll just say like um
342:14 - earth name
342:16 - that's actually mars name so it's a mars
342:18 - name here
342:20 - for all these
342:28 - and then over here these are going to be
342:34 - earth name
342:51 - so i think that is valid and what we're
342:54 - going to do here is just type in
342:55 - terraform console
342:58 - and if we wrote that correctly oh no we
343:00 - got an error so it says expecting an
343:01 - equal sign to mark the beginning of a
343:03 - new attribute value
343:06 - so
343:07 - i mean this should be okay
343:12 - uh
343:13 - oh you know what i think this colon is
343:15 - just missing here
343:17 - that up again
343:19 - there we go we're fine so if we just
343:21 - want to look at that variable i think we
343:22 - just type it in here and it might print
343:23 - it out for lucky
343:25 - yes so there it is um so
343:28 - what we're going to do here is use a
343:30 - splat to get maybe the mars name or
343:32 - something so if we used a for loop but
343:34 - we'd have to probably write we could try
343:36 - this
343:37 - but we'd have to do four and then it
343:38 - would be for the actual
343:41 - map so say m for map
343:43 - in worlds splat
343:46 - and then we would have to do m
343:50 - dot
343:51 - mars name
343:54 - and so a reference to the attribute
343:58 - by one access trigger specifying the
343:59 - resource name
344:02 - so i mean that looks oh you know it's
344:03 - because we didn't write var okay
344:06 - i say we but it was really me um so you
344:09 - know that's that but we could write this
344:10 - in a more concise way
344:16 - okay so we use the splat
344:19 - mars name
344:21 - okay so you know that's a lot more
344:23 - convenient if we're just trying to
344:24 - access variables like that um i think
344:26 - that if you're trying to do
344:29 - things like
344:31 - if you want to do upper here
344:34 - i think you still have to use a four
344:37 - expression
344:39 - okay i don't think you can do this we
344:41 - could try it but i really don't think
344:42 - that will work
344:51 - no and if we look at the documentation
344:53 - they don't show an example like that so
344:55 - you know it's not that bad but you can
344:57 - see that it's for a particular use case
344:59 - you can't use that for
345:01 - maps or
345:02 - whatever the equivalent the other map is
345:04 - object
345:05 - but it's useful for this one particular
345:07 - use case okay
345:09 - [Music]
345:14 - hey it's andrew brown from exam pro and
345:15 - we are on to the dynamic blocks follow
345:17 - along so this one should be uh pretty
345:19 - fun because it's uh quite a powerful
345:21 - feature so what i've done is i've
345:23 - created a new folder here called dynamic
345:25 - blocks i'm going to make a new file here
345:27 - as always it's going to be main.tf and a
345:30 - really good example for this would
345:31 - probably be a database security group
345:33 - just because there's all those ingress
345:35 - and out outgress or egress rules so what
345:39 - we're going to do is just define our
345:40 - terraform settings block and i'm just
345:43 - going to pull up over here and make our
345:45 - way over to the registry for terraform
345:48 - and what we're going to do is go over to
345:49 - the airbus provider and um go to the
345:52 - documentation
345:54 - and actually i first want to grab the
345:55 - provider itself because that is
345:57 - something very easy that we can do here
345:59 - we'll just move that on over so we can
346:01 - see what we're doing
346:02 - and paste that on in and we're going to
346:05 - have to define our provider of course
346:07 - so we'll name that as aws the profile is
346:10 - going to be
346:12 - default
346:13 - and our region will be us east1
346:17 - okay and so now what we need is to
346:20 - go create ourselves a security group
346:23 - so we have of course done that
346:24 - previously here but
346:26 - let's pull up the documentation here i
346:29 - believe it was actually under vpc so
346:31 - let's just go down to vpc here and we
346:33 - will expand that and then underneath
346:35 - here there should be aws security group
346:38 - there it is and if we scroll on down
346:41 - there's the thing okay so what i'm going
346:43 - to do is copy uh this code here and go
346:46 - over
346:48 - and we'll just paste that on in
346:49 - and there is our security group so
346:52 - i remember that we had to have the
346:54 - description
346:55 - remember it complained about that
346:58 - so outgoing
347:00 - for everyone
347:02 - and uh we need to also have a few
347:06 - additional things
347:08 - we will just scroll on down here because
347:10 - it wanted the prefix list ids
347:14 - okay
347:17 - remember we needed that
347:19 - um i think there was like self false
347:23 - and there was like security groups
347:26 - i think was actually eight of security
347:27 - groups in particular
347:28 - let's just double check to make sure
347:29 - that is the case
347:31 - it is called
347:35 - uh oh it's just security groups okay
347:42 - so
347:45 - we'll say self equals false
347:48 - we do not need cider block 4 here or 6.
347:54 - we do not need this one here
347:56 - and it doesn't really matter what we set
347:58 - this to so it could be set to the main
347:59 - cider block that's totally fine
348:01 - but we are going to need to add a data
348:04 - source just like last time
348:06 - for the vpc
348:08 - so let's say vpc we'll call that main
348:11 - and i think it just needed the vpc id it
348:14 - was as simple as that
348:17 - and so we will go over to aws
348:20 - over to um dpc
348:27 - and
348:28 - from there we are going to go to rvpcs
348:31 - and i will go grab that vpc id
348:39 - okay so we've grabbed our vpc id
348:41 - and then we just need to name this as
348:43 - data
348:45 - and then we're going to name this as
348:46 - data we don't really care what the cider
348:47 - block is it's just again for
348:50 - this demo purposes we don't need tags
348:52 - we'll take those out
348:54 - and
348:55 - um
348:57 - yeah everything else is fine okay
348:59 - so
349:00 - this now comes to the fact that we want
349:02 - to
349:03 - uh use dynamic blocks before we do that
349:05 - let's just well i think i didn't leave
349:07 - the console there last
349:09 - but what we'll do here is
349:12 - just do our terraform init
349:15 - and as that is pulling that stuff we're
349:17 - going to look up dynamic blocks
349:22 - terraform
349:26 - so we'll go here and so dynamic blocks
349:28 - is like way more powerful than
349:30 - the 4-h
349:31 - where what we can do i'm just trying to
349:35 - find that example there but we have
349:38 - uh we have to set the
349:40 - dynamic part the for each you know i'm
349:42 - pretty sure i have these in my slides so
349:43 - let's just use my slides as the
349:45 - reference here
349:49 - dynamic
349:50 - ah here it is okay so the idea is that
349:52 - we'll just set up a locals with all of
349:54 - our information here and then we'll
349:55 - create this dynamic block and then
349:57 - provide the content okay
349:59 - so i'm just gonna move that off screen
350:00 - so i can see what i am doing here as we
350:03 - type it in and we'll see if we run into
350:05 - any problems
350:07 - um failed to query the available pro
350:09 - packages could not retrieve the list of
350:11 - available versions for the provider
350:15 - not have a provider registry terraform
350:16 - name all modules should specify the
350:18 - required providers so i'm not sure why
350:20 - it's complaining here but we'll scroll
350:22 - all the way to the top
350:24 - and the required providers is correctly
350:26 - set here
350:28 - so it shouldn't be a problem
350:32 - not sure
350:34 - what it doesn't like
350:37 - um
350:38 - so we'll just type in terraform
350:40 - providers here
350:45 - the vpc
350:46 - um
350:47 - is vpc a module
350:49 - you know what it's probably because i
350:50 - didn't do aws vpc that's probably my
350:52 - problem here
350:55 - terraforming it
350:57 - and as that's thinking there we'll just
350:59 - pull this on down and we'll start to
351:00 - make our locals block
351:02 - okay so we can go here
351:04 - make some locals
351:06 - and we'll do our ingress
351:09 - and
351:10 - we'll just go like that
351:13 - and the idea is we can say port whoops
351:16 - we can set the port like that 443.
351:20 - uh we have to always have a description
351:22 - so we'll just set that as well so port
351:25 - 443
351:27 - we can set
351:29 - as much as we want here so i'll just go
351:31 - hit enter
351:34 - okay
351:36 - and
351:40 - i think that looks right yeah so we have
351:45 - one ingress here and then we'll just
351:46 - copy this and make a comma
351:52 - vs code's not really formatting the way
351:53 - i wanted to and so we'll do port 80.
351:57 - and then down below we will need to
351:59 - specify
352:02 - our
352:04 - um
352:06 - for each okay so that's going to be
352:08 - within our dynamic block so what we're
352:10 - going to do is tab in here i'm going to
352:12 - say dynamic
352:15 - and we'll type in ingress because that's
352:18 - a match for what we're doing
352:22 - and then from there we can do our for
352:24 - each equals local ingress
352:28 - and then we need to specify our content
352:30 - i don't really understand why it's
352:32 - called content and things like that but
352:34 - i just know that that's what we have to
352:35 - do and it's not really that big of a
352:37 - deal
352:38 - um so
352:40 - we'll go here and paste that in
352:41 - we can take out our ingress block there
352:44 - we know we're going to need self these
352:46 - all here but what's going to change
352:49 - are these ports so
352:52 - we will go here and we'll say ingress
352:55 - value port
352:56 - and this will also be ingress value port
352:59 - and then this will be ingress
353:02 - value description
353:04 - if we really wanted to we could also set
353:06 - the
353:07 - protocol
353:09 - protocol pro
353:12 - to call
353:14 - and this could be then tcp
353:24 - and so we just say ingress value
353:26 - protocol
353:32 - so it just saves us from repeating these
353:34 - over and over again if they're all the
353:35 - same
353:36 - there's a lot you can do with uh dynamic
353:38 - blocks but honestly you shouldn't do
353:39 - anything
353:41 - too crazy
353:42 - we'll do our terraform plan and see if
353:44 - this works
353:45 - whoops
353:50 - bring that up there
353:52 - um an argument vpc id is not expected
353:55 - here okay so
353:57 - that was me just guessing from memory
353:59 - and i guess i guessed wrong
354:02 - so what we'll do
354:03 - [Music]
354:05 - is we'll just look that up
354:09 - database vpc data source terraform
354:17 - oh it's just id okay
354:21 - so what we'll do is just set id here
354:25 - and then we'll just hit plan again
354:28 - that should resolve our issue there
354:32 - uh inappropriate value for attribute
354:34 - egress security groups is required okay
354:38 - that's fine
354:44 - well this one uh it says
354:46 - doesn't say uh
354:47 - serious groups
354:49 - and this one doesn't say security group
354:51 - so that's probably our problem here so
354:52 - we'll just hit terraform plan again
354:59 - and here it says this
355:01 - vpc id does not exist probably what
355:03 - happened is they might be in the wrong
355:05 - region
355:06 - it's a very common problem
355:08 - on aws just because of the way their ui
355:10 - works
355:11 - if i can get this window over here
355:14 - and so this is because we're in usd
355:16 - we're supposed to be in usc 1 here
355:26 - and i'm going to go up
355:29 - to here
355:31 - we will save that
355:33 - i'll hit teraform plan
355:44 - and we could probably like use the
355:46 - filter and also just say choose the
355:47 - default but it's just so easy to put
355:49 - that in like that
355:50 - um so
355:53 - it doesn't seem like we have any
355:54 - problems serious let's go ahead and
355:55 - execute it let's just double check to
355:56 - make sure these values are correct
355:58 - so for the ingress
356:02 - um
356:03 - port 443 port 443 it's probably just
356:05 - because i didn't update the description
356:08 - probably because of a copy paste job yep
356:11 - okay and let's just make sure this works
356:13 - so we'll say terraform apply auto
356:15 - approve
356:28 - and we'll give it a moment
356:31 - and it's already created so it's that
356:33 - fast we can go here and take a look at
356:34 - it if we like
356:36 - it's not that big of a deal
356:39 - um
356:40 - so we should see it in here i just have
356:43 - so many
356:44 - uh junk security groups here this is a
356:46 - bit hard to find
356:48 - oh allow tls is what we called it so
356:50 - here it is
356:52 - go to our inbound rules
356:55 - 80 443 and that's pretty much it so
356:59 - terraform
357:00 - apply
357:02 - destroy auto approve
357:06 - okay
357:13 - and there we go
357:15 - [Music]
357:20 - all right so i want to talk about
357:21 - versioning very quickly here and so i
357:23 - have a new folder called versions i'm
357:24 - going to make a new file called main.tf
357:27 - and we're going to create a terraform
357:29 - block but what we're also going to do is
357:31 - set required
357:34 - uh providers or sorry required uh we're
357:37 - not providers required version and so
357:39 - what this is going to do is say
357:41 - explicitly what version of terraform we
357:43 - want to use and i'm setting it this as
357:45 - 1.0.0 and i'm using this tilde arrow if
357:48 - you're wondering you know what is the
357:49 - logic behind all those things i think
357:51 - it's all explained in the semantic or
357:53 - semver.org so if you want to learn more
357:55 - i strongly recommend you read through
357:57 - this to understand all the stuff inside
357:59 - and out highly applicable across the
358:01 - devops sphere not just to terraform um
358:04 - but you know if we go over to terraform
358:06 - github repository and we drop down the
358:08 - branches and go to tags here we can see
358:10 - all the versioning we are using version
358:12 - 1.0.0 and uh gold goes up to
358:16 - 1.1.0 alpha which is not out yet and if
358:18 - you wanted to really know what's going
358:20 - on here you go to releases and you can
358:22 - read what they have done so here 1.0.7
358:25 - remove check for computer distribute
358:27 - prevent object types with optional
358:28 - attributes for etc empty uh containers
358:32 - so when you're looking at the patch the
358:34 - patch which is the third number the the
358:36 - right most number that's going to keep
358:37 - you up to date in terms of security for
358:40 - the the major minor version that you
358:42 - have for the 1.0 and you absolutely
358:44 - always want to be using the latest and
358:46 - so that's what this tilde does it says
358:48 - take the the far row uh
358:50 - the the farthest number to the right and
358:52 - make sure it's the latest version that
358:54 - has been published
358:56 - and you know this comes back to my
358:57 - progressive versioning slide which is if
358:59 - you want to have really good hygiene in
359:02 - terms of your
359:03 - devops what you should be doing is at
359:05 - least setting the tilde for sure like
359:06 - this the tilde arrow or i would even go
359:09 - as far as saying equals arrow and if
359:12 - you're really concerned about um you
359:14 - know not using the next major version
359:15 - you could say you will less than
359:17 - you know like less than
359:20 - um
359:21 - less than uh you know one point
359:24 - two point zero even if it's not out
359:26 - that's a good indicator to say okay well
359:28 - i don't wanna go too far ahead of time
359:29 - but if you wanna have progressive
359:31 - versioning you should really be setting
359:32 - it like this okay
359:34 - um and this is going to be applicable
359:36 - for your abs providers um anything else
359:39 - so you know if we go over to
359:42 - um if we go over to the registry
359:47 - and we choose
359:50 - whoops
359:52 - aws and we drop this down here we have
359:54 - that required version as well so
359:57 - as you copy it in you're going to notice
359:58 - that it's actually hard coded but i
359:59 - would strongly recommend again
360:02 - if we go here
360:05 - and take this and at least at least do
360:08 - this
360:09 - uh and if you're really
360:11 - really being clever you could do that
360:13 - okay and these are also all in github
360:15 - repositories as that's how everything
360:17 - works so you can go here and click
360:20 - and you can go over to the tags and see
360:22 - the versioning and you can go over to
360:24 - the releases and it's the same thing you
360:27 - can read about all the things that have
360:28 - changed okay
360:30 - and that's something that you should uh
360:32 - you know consider doing all right so
360:34 - that's all there really is to this uh i
360:36 - might want to show you one more thing
360:37 - and this one is with terraform cloud so
360:39 - i'm going to go to terraform io
360:41 - and we're going to open up our terraform
360:42 - cloud and i'm going to sign in i
360:44 - probably haven't signed in a while so
360:45 - i'll probably ask oh no no username and
360:46 - password that's great what we can do is
360:48 - in a workspace we go to settings
360:50 - and
360:51 - is it version control no it is general
360:54 - and under here we can actually set the
360:56 - terraform version so if you happen to be
360:58 - working with a particular version uh you
361:00 - can go and say okay only use this
361:02 - version for terraform cloud and that
361:04 - will um
361:06 - that will not upgrade it'll just keep
361:08 - you there if you need for legacy reasons
361:09 - but again you know what you really
361:11 - should be doing is um using that
361:13 - progressive versioning
361:15 - doing nightly builds and discovering
361:18 - overnight that things are breaking
361:20 - so you can go fix those in the morning
361:21 - okay
361:22 - and that's it
361:24 - [Music]
361:28 - hey this is andrew brown from exam pro
361:29 - and we are taking a look at terraform
361:31 - state so what is state well it's a
361:33 - particular condition of cloud resources
361:36 - at a specific time so give an example
361:39 - imagine we expect to have a virtual
361:40 - machine running centos on aws with a
361:43 - compute type of t2 micro that would be
361:45 - the state that we are expecting okay
361:48 - so how does terraform preserve state
361:50 - well when you provision infrastructure
361:51 - via terraform it will create a state
361:53 - file named terraform tf state it's very
361:56 - important to remember that name because
361:58 - it literally is an exam question the
362:00 - exact naming of that okay this state
362:02 - file is a json data structure with a
362:04 - one-to-one mapping from resource
362:06 - instances to resource uh or to remote
362:08 - objects and if you're wondering what is
362:10 - a remote object versus a resource
362:12 - instance i cannot tell you i would
362:14 - imagine one is a representation of
362:17 - things that are deployed in the cloud
362:18 - and the other one are
362:20 - objects or or things represented in the
362:22 - state file but they don't clarify it so
362:24 - i just have to take a guess so this is
362:26 - kind of what the json structure looks
362:28 - like you can see you see resources this
362:30 - is describing like a type of instance
362:32 - and stuff like that
362:33 - there's not really any case for you to
362:35 - ever go through the terraform state file
362:37 - and look at it but we might take a peek
362:40 - just so that we get familiar as to what
362:42 - it is doing
362:43 - so just to kind of give a diagram to
362:45 - help you visualize this imagine you have
362:47 - your configuration file so you have your
362:49 - main tf maybe a variables tf a tf vars
362:52 - to load in your variables and then you
362:54 - run a terraform apply command what it's
362:56 - doing is using the terraform api and
362:58 - it's going to create what we'll say
363:00 - these we'll call these remote objects
363:02 - but maybe these are resource instances
363:04 - but uh it will go ahead and create those
363:06 - things and then those will get
363:08 - represented within a state file so the
363:10 - idea is that whatever is in the cloud is
363:14 - going to match what's in that file okay
363:17 - now there is a
363:18 - cli commands for terraform state and
363:20 - it's good just to quickly go through
363:22 - them so we have terraform state list
363:24 - this will list resources in the state
363:26 - terraform state move this will move an
363:28 - item in the state terraform state poll
363:30 - poll current remote state and outputs to
363:32 - st out terraform state push so update
363:34 - remote states from a local state
363:36 - terraform state replace providers so
363:39 - replace a provider in the state
363:40 - terraform state removed so remove
363:42 - instances from the state terraform state
363:44 - show so show a resource in the state
363:47 - some of these are a little bit
363:48 - interesting so we'll definitely look in
363:51 - greater detail to move and some of these
363:53 - we will just explore through our follow
363:55 - alongs okay
363:57 - [Music]
364:01 - okay so we're gonna give special
364:02 - attention to terraform state move
364:04 - because it's definitely on the exam uh
364:06 - and it is a little bit interesting to
364:08 - what it can do so terraform state moves
364:10 - allow you to rename existing resources
364:13 - move a resource into a module move a
364:15 - module into a module so if you were just
364:17 - to rename a resource or move it to
364:19 - another module and run terraform apply
364:21 - terraform will destroy and create that
364:23 - resource but state move allows you to
364:25 - just change the reference so you can
364:26 - avoid a create and destroy action so an
364:29 - example for renaming a resource we would
364:31 - have terraform state move and then we
364:33 - would have the we would identify the old
364:35 - one so here we have packet device dot
364:38 - worker and we are renaming it to helper
364:41 - so it's we that's just how we're doing
364:43 - it okay if we wanted to move a resource
364:45 - into a module what we do is say
364:48 - something like
364:49 - packetdevice.worker and then do
364:54 - module.worker.packetdevice.worker okay
364:55 - so the idea here is that we're moving it
364:57 - into
364:58 - this module here
365:00 - uh and i think we could probably even
365:02 - rename it at the same time but we're not
365:04 - doing that okay so move module into a
365:06 - module so here we have module app and
365:08 - then we're moving it into the
365:10 - parent one so we go module dot parent
365:12 - module dot app okay so what's important
365:15 - to remember for the exam is that
365:17 - terraform state move is when you want to
365:19 - rename existing resources they're not
365:20 - going to get into these more complicated
365:22 - use cases but that's how you rename a
365:25 - resource okay
365:26 - [Music]
365:30 - okay let's talk about how we backup our
365:32 - state file so all terraform state sub
365:34 - commands that modify state will write a
365:37 - backup file so read only commands will
365:39 - not modify it so imagine listen show
365:41 - will not cause a backup file to be
365:43 - created terraform will take the current
365:45 - state and store it in a file called
365:48 - terraform.tstate.backup so this is what
365:50 - it would look like
365:51 - backups cannot be disabled this is by
365:54 - designed to enforce best practices for
365:55 - recovery to get rid of the backup file
365:57 - you would need to manually delete the
365:59 - files so there you go
366:01 - [Music]
366:05 - hey this is andrew brown from exam pro
366:07 - and we are on to the terraform state
366:09 - follow alongs and these are honestly
366:10 - just all about the terraform cli
366:13 - commands as we do cover terraform state
366:16 - throughout this course in a variety of
366:17 - different ways so you can't just really
366:19 - contain it to this one little section
366:21 - here but let's go explore these things
366:23 - and so i have a new folder here on the
366:24 - left hand side and as always we're going
366:26 - to go ahead and create ourselves a new
366:28 - main.tf file and we need to just
366:30 - provision something and so we've done
366:33 - this multiple times over so i'm just
366:35 - going to go back here and i like to
366:37 - always go back to the count one because
366:39 - i find this is the easiest one to
366:41 - update and we will go
366:44 - down here into our
366:46 - terraform state file and while the it's
366:49 - not our actual terraform state file but
366:51 - our main file here and we will go and
366:53 - get rid of the account here so there's
366:54 - just a single one and we will just say
366:57 - my server
366:58 - okay
367:00 - and i think everything else is fine this
367:02 - is all good and so we just have to make
367:04 - sure we are in the correct directory and
367:07 - i'm going to do a
367:10 - terraform in it
367:13 - okay
367:16 - and we'll just give that a moment there
367:19 - and once terraforming it is happy we're
367:21 - just going to go ahead and do an apply
367:23 - because we do need a state fault to be
367:24 - able to do something right
367:36 - great so what we'll do here is just type
367:39 - in terraform
367:41 - uh apply
367:43 - and then we will run um
367:46 - auto approve
367:48 - okay
367:50 - and we'll just give that server a little
367:51 - bit of time to provision there that
367:53 - script
367:54 - and i'll see you back here in a moment
367:56 - okay all right so after a short little
367:57 - wait there our instance is provision and
368:00 - now we can go ahead and do some
368:02 - terraform state cli stuff so
368:05 - just waiting for my console to be a
368:07 - little bit responsive there great and so
368:08 - what i can do is type in terraform state
368:11 - and it's going to show me a bunch of
368:12 - commands i can run so we got list move
368:14 - pull push replace provider remove show
368:17 - i haven't much found a use for push or
368:19 - pull
368:21 - but
368:22 - definitely list move
368:24 - and show or something that we want to
368:26 - look at
368:27 - we could also give remove a try but i
368:29 - don't find much reason to use that so
368:31 - let's do the first one which is
368:32 - terraform
368:33 - state list and what that is going to do
368:36 - is it's just going to tell us what
368:38 - instances we have there or resources we
368:40 - have provisioned of course if we had a
368:42 - lot more this would be a pretty big list
368:44 - if we do show it's not going to show us
368:46 - anything because we have to specify
368:47 - something so we'll do aws instance and
368:51 - we'll say my server here and so we
368:53 - should get a lot more detailed
368:54 - information here okay
368:57 - so just going to pull this up here
369:00 - and as you can see we are getting all
369:02 - that information about that resource
369:04 - there
369:06 - if you wanted to rename something that
369:08 - is a
369:09 - something you're definitely going to
369:10 - want to know for the exam and that's
369:12 - where we use the terraform state move
369:14 - all right the way you should think about
369:15 - it is kind of like how
369:17 - bash has moved that's the way you would
369:19 - rename things there as well
369:21 - so imagine that instead of being called
369:23 - my server we wanted to call this uh
369:26 - [Music]
369:28 - our server i don't know
369:29 - and so if we wanted to rename it like
369:32 - that then what we'd have to do is type
369:34 - in terraform
369:35 - state
369:36 - move and then we would type the old name
369:38 - so adabus instance
369:40 - our server
369:42 - and then from there we would say aws
369:44 - instance
369:45 - oh sorry the original one would be my
369:47 - server
369:48 - and then we would do aws
369:50 - instance our server okay
369:56 - and so it says move database instance my
369:58 - server to our server
370:00 - so if we were to open up our state file
370:02 - here
370:04 - okay and we were to take a look at the
370:06 - actual name so we just look at our
370:08 - server
370:09 - you can say that resource has been
370:10 - renamed the only issue though is that
370:13 - just because we've renamed it here and
370:14 - we've moved it within our state file
370:16 - does not mean that these changes are
370:17 - reflected um actually uh in our in our
370:22 - system actually nothing really matters
370:23 - because it's just a name but let's go
370:25 - see what happens if we do a terraform
370:26 - plan okay
370:28 - i don't think it would matter but we'll
370:30 - find out
370:34 - and so down below i mean that's just a
370:36 - syntax error because we have changed the
370:38 - name
370:39 - so this is now our server right
370:43 - and we'll just do terraform plan here
370:51 - so terraform has compared your real
370:53 - infrastructure against your
370:53 - configuration found no difference so no
370:55 - changes are needed because like the
370:58 - logical name that terraform is using the
371:00 - the our server
371:01 - is just something that's within the
371:02 - state file it's not like any of those
371:03 - changes are reflected on the cloud on
371:06 - the cloud provider so there's no need to
371:07 - change anything there so you know that's
371:09 - pretty much it
371:11 - um you know if we go back to just
371:13 - terraform state here
371:15 - we do have replace provider i'm pretty
371:16 - sure i have used that one before let's
371:18 - go take a look at that really quickly
371:20 - terraform replace
371:22 - provider
371:28 - so the command will update all resources
371:29 - using the from provider setting the
371:31 - provider to the specified to provider
371:33 - this allows changing the source of a
371:34 - provider which currently has resources
371:36 - in state
371:38 - so that's kind of cool
371:40 - um
371:41 - so i guess this one here we see we have
371:42 - a hashicorp aws to the registry acme
371:45 - corp act media bus
371:47 - i don't know if we really have much
371:49 - cases for this but i guess here the idea
371:50 - is that
371:52 - if you had forked because all these are
371:54 - public facing right so if you forked it
371:56 - and made your own changes that could be
371:58 - a case where you'd want to do that there
372:00 - right
372:01 - so that's pretty much it uh whoops
372:03 - that's pretty much it there um so there
372:05 - you go
372:07 - oh and as always we have to make sure we
372:09 - tear down our resource there so i'm
372:11 - going to type in terraform
372:14 - apply
372:15 - auto approve
372:18 - destroy
372:27 - and there we go so i'll see you in the
372:28 - next video okay
372:29 - [Music]
372:33 - hey it's andrew brown from exam pro and
372:35 - we are taking a look at terraform init
372:37 - so it initializes your terraform project
372:38 - by downloading plugin dependencies so
372:41 - providers and modules creating a dot
372:43 - terraform directory so that's a hidden
372:45 - directory and creating a dependency log
372:47 - file to enforce expected versions for
372:48 - plugins and terraform itself so on the
372:50 - right hand side here we can see we have
372:52 - that hidden directory but also notice
372:54 - here that we have a terraform lock.hcl
372:57 - that is our dependency lock file
372:59 - uh and so our dependencies are all going
373:01 - to end up within this um see where it
373:04 - says providers that's the provider
373:05 - version there okay so terraform init is
373:07 - generally the first command you will run
373:09 - for a new terraform project if you
373:11 - modify or change dependencies run
373:13 - terraforming it again to have it apply
373:15 - the changes you need to know that for
373:17 - the exam because they will absolutely
373:18 - ask you that
373:19 - the first command here is uh and these
373:21 - are ones with flags so you can just do
373:23 - terraform in it but we have some extra
373:25 - options so terraforming it hyphen
373:27 - upgrade upgrade all plugins to the
373:28 - latest version that complies with the
373:30 - configuration version constraint
373:32 - terraform init hyphen get plugins uh uh
373:35 - and i think it's supposed to be uh
373:36 - equals false there but skip plug-in
373:38 - installation terraform init plug-in
373:41 - hyphen d-i-r
373:42 - equals path so force plug-in
373:44 - installation to read plug-ins from only
373:45 - target directory and then we have
373:47 - terraform init hyphen lock file so you
373:49 - can change the lock file mode it
373:51 - actually doesn't say what the modes are
373:52 - so i don't even know what you do in that
373:54 - case and i could not find examples but
373:56 - it is an option
373:58 - i just want to
373:59 - make it very clear that there is a
374:01 - dependency log file but there's also a
374:02 - state lock file and the way you know
374:05 - that they're different is that one has
374:06 - dot lock in it and the other one has dot
374:08 - tf state this one up here is for
374:10 - dependencies this one of course is for
374:11 - state a terraform init does not create a
374:14 - state log file that is going to happen
374:15 - when you do a terraform apply okay
374:18 - [Music]
374:22 - let's take a look at terraform get so
374:24 - terraform get command is used to
374:25 - download and update modules in the root
374:27 - module so when you're a developer you
374:29 - own terraform modules and you may need
374:31 - to frequently pull updated modules but
374:33 - you do not want to initialize your state
374:35 - or pull new provider binaries
374:38 - and so the idea here is terraform get is
374:40 - a lightweight
374:41 - way
374:42 - because it's only updating the modules
374:44 - it's not pulling providers in most cases
374:46 - you want to use terraforming it with the
374:47 - exception of local module development
374:49 - this will not show up on the exam but i
374:51 - saw terraform yet i was just so confused
374:53 - about it so i just wanted to make sure i
374:55 - included it here okay
375:00 - okay so we're going to be looking at
375:01 - three cli commands that are used to
375:03 - improve debugging configuration scripts
375:05 - the first is going to be terraform
375:06 - format this rewrites terraform
375:08 - configuration files to a standard format
375:10 - and style terraform validate this
375:12 - validates the syntax and arguments of
375:13 - terraform configuration files in a
375:15 - directory and then you have terraform
375:17 - console an interactive shell for
375:18 - evaluating terraform expressions and so
375:20 - let's go jump into these three okay
375:22 - [Music]
375:26 - all right let's take a look at terraform
375:28 - format so this command applies a subset
375:30 - of terraform language style conventions
375:32 - along with other minor adjustments for
375:35 - readability so terraform format will be
375:37 - uh by default look in the current
375:39 - directory and apply formatting to all
375:41 - your tf files so let's look at some
375:43 - examples of what it would format so the
375:45 - first is adjusting spacing two spaces
375:47 - indent so here we have something and
375:49 - it's over indented and so by running
375:52 - terraform format it fixes the
375:53 - indentation
375:54 - we can also get syntax errors so notice
375:57 - here that we have a problem and so what
376:01 - it's saying is is that this bracket
376:04 - okay
376:05 - is supposed to be up here okay but it's
376:07 - all it's down here
376:09 - and the last one here is we can do
376:10 - terraform format hyphen hyphen diff
376:12 - that's going to show what it would
376:14 - change okay so there you go
376:16 - [Music]
376:20 - let's take a look at terraform validate
376:22 - so this runs checks that verify whether
376:24 - configuration is fantastically valid and
376:27 - internally consistent regardless of the
376:30 - provided variables in existing state
376:32 - validate is useful for general
376:33 - verification of reusable modules
376:35 - including correctness of attribute names
376:37 - and value types so here's an example
376:39 - where i just had some code and there was
376:42 - a problem it's just saying you're
376:43 - missing an argument because for a
376:44 - database instance you always have to
376:46 - specify an instance type so when you run
376:48 - terraform plan or terror from apply
376:49 - validate will automatically be performed
376:52 - one thing i need to mention about
376:54 - terraform validate is that it does not
376:56 - go to external resources to check things
376:59 - are valid so if you have
377:01 - a
377:02 - a value and it's expecting a string
377:04 - that's all it's going to check for it's
377:05 - not going to check that the string is
377:06 - actually a proper
377:08 - uh like type of size so if it's supposed
377:10 - to be like a t2.micro and you write you
377:13 - know gobbly goop in there
377:15 - it's not going to know that that's not a
377:16 - valid type so
377:18 - but we do cover that in the fall longs
377:20 - and i think we have like some practice
377:21 - exam questions that cover that use case
377:23 - okay
377:24 - [Music]
377:28 - we're taking a look here at terraform
377:29 - console and this is an interactive shell
377:31 - where you can evaluate expressions so
377:33 - the idea is you type in tariff or
377:35 - console and what i can do is i can you
377:37 - know use like built-in functions and
377:40 - expressions so there i'm using min
377:42 - and i've actually entered it in
377:44 - incorrectly so there it's throwing an
377:46 - error and here i'm using the correct way
377:48 - of using it so i get the output so this
377:50 - is a great way just to kind of test very
377:52 - simple things um you can't do things
377:53 - like define variables or or resources or
377:56 - define providers but you if you need to
377:59 - figure out how the expressions work
378:00 - before you apply them in your code this
378:02 - is a great place to do that okay
378:04 - [Music]
378:08 - all right let's talk about terraform
378:10 - plans so this command creates an
378:12 - execution plan also known as a terraform
378:14 - plan and it consists of
378:17 - reading the current state of an already
378:19 - existing remote object to make sure that
378:21 - the terraform state is up to date
378:23 - comparing the current configuration to
378:25 - the prior state and noting any
378:26 - differences proposing a set of change
378:29 - actions that should if applied make the
378:32 - remote objects match the configuration
378:34 - and so this is an example of one that is
378:36 - generated you're going to see it uh
378:38 - throughout this course multiple times so
378:40 - it's not going to be
378:41 - unique that's why i don't have to make
378:42 - that too big for you there terraform
378:44 - plan does not
378:46 - carry out the proposed changes that's
378:47 - going to be the responsibility of terror
378:49 - form apply
378:50 - and a terraform plan file if you happen
378:53 - to generate one out is a binary file so
378:54 - if you open it up it's just machine code
378:56 - you cannot make sense of it okay
378:58 - so when you run terraform apply you have
379:01 - speculative plans and save plans and so
379:04 - speculative plans is what's going to
379:05 - happen when you run terror from apply so
379:08 - the tariff so terraform will output the
379:10 - description of the effect of the plan
379:12 - but without any intent to actually apply
379:15 - it when you have a save plan you're
379:17 - going to have this hyphen out flag to
379:20 - save it and you can name that file
379:21 - whatever you like
379:23 - and it will generate out that save plan
379:25 - file and again that's a binary file so
379:27 - you're not going to be able to see what
379:28 - it does and what you can do is then pass
379:30 - it along to terraform apply so you do
379:32 - terraform apply whatever the file name
379:33 - is and when you are using terraform
379:36 - apply what you have to understand is
379:38 - that it will not allow so it will not
379:41 - ask to uh manually approve it as you
379:43 - normally would it would just be auto
379:46 - approved so that's one thing you have to
379:48 - watch out when using those safe plans
379:50 - but you know i just wanted to make it
379:51 - concretely understood the terraform plan
379:53 - can generate a file
379:55 - and it's not actually the one that's
379:56 - doing the apply okay
379:59 - i don't have it written in here but when
380:00 - you do terraform apply it also is
380:02 - running terraform validate as well okay
380:07 - [Music]
380:11 - let's talk about terraform apply here so
380:13 - terraform apply command executes the
380:15 - actions proposed in an execution plan
380:18 - and it has two modes the automatic plan
380:21 - mode and the saved plan mode so for
380:23 - automatic plan mode that's just when you
380:25 - run tara from apply what it's going to
380:27 - do is execute the plan validate and then
380:29 - the apply
380:31 - you can or you have to
380:33 - manually approve the plan by writing yes
380:36 - but if you want to skip that process you
380:38 - can use the hyphen auto approve flag to
380:41 - automatically approve the plan
380:43 - we just saw save plan mode like how it
380:45 - worked in the previous slide but let's
380:47 - cover it again so when you provide a
380:49 - file name to terraform to the save plan
380:51 - file it's going to be terraform apply
380:53 - file
380:54 - and it's going to perform exactly the
380:55 - steps specified by that plan file it
380:58 - does not prompt for approval so if you
381:00 - want to inspect a plan file before
381:01 - applying it you can use terraform show
381:04 - okay
381:06 - [Music]
381:10 - hey this is andrew brown from exam pro
381:12 - and we're going to be taking a look at
381:13 - speculative plans and save plans just a
381:15 - little bit more in detail there's not a
381:17 - lot to talk about when we're talking
381:18 - about speculative plans because we've
381:20 - been using them throughout that but
381:21 - we'll just contrast them against the
381:23 - save plans
381:24 - and just how you would actually use them
381:26 - with the apply
381:27 - this stuff isn't super complicated but
381:29 - what we're going to do is make a new
381:31 - file here i'm going to call this main.tf
381:34 - and
381:35 - you know what i'm just going to go ahead
381:36 - and grab our code here from the last one
381:38 - to for the state file there and we'll go
381:40 - up and i'm just going to rename this
381:42 - back to my server
381:44 - and we'll save this as my server
381:47 - and there's only a single instance so
381:48 - i'm just going to take out that there
381:52 - i'm going to cd back there and we're
381:53 - going to make our way into the plan and
381:55 - apply i'm going to do a terraform init
381:58 - and we're going to wait for that to
381:59 - finish so you know we've been seeing
382:00 - speculative plans throughout all the
382:02 - follow alongs and that's just where it's
382:03 - going to show you that information but
382:06 - we can also save that uh that plan out
382:09 - to a file i don't think there's a
382:11 - particular naming convention for the
382:13 - file it just has to be named as
382:15 - something
382:16 - but we'll give it a moment here for this
382:18 - to initialize and then we'll do that
382:20 - with the out command okay
382:23 - so what i'm going to do is just type in
382:25 - terraform plan hyphen out and then we
382:28 - can give it whatever name we want
382:29 - probably it'd be good to name it like
382:31 - dot plans that's what i'm going to do
382:32 - here and so i'm just going to call this
382:37 - my save plan
382:39 - okay and what that will do is output
382:42 - that file
382:44 - in a moment here
382:45 - so it ran and then it output it if we
382:47 - open it up notice that it's a binary
382:49 - file so we can't actually um inspect it
382:51 - in any way but if we are happy with the
382:55 - these here what we can do is type in
382:57 - terraform apply and then we can just
383:00 - provide it the name my saved plan dot
383:03 - plan and hit enter
383:06 - and so what it should do is just proceed
383:07 - to deploy and it won't even review it
383:09 - should just deploy at least that's what
383:12 - the documentation says so hopefully it
383:13 - does not contradict what happens here
383:20 - okay notice that it's already carrying
383:22 - out the the action so
383:24 - uh you know save plans would be really
383:26 - great if you are setting up a um like a
383:29 - tool to review so this kind of makes
383:32 - sense when you're looking at terraform
383:33 - cloud and it it applies the plan and
383:36 - then you proceed to the next step where
383:37 - you accept the apply i would imagine
383:39 - that they are using that but i guess
383:41 - when you're using a ci cd pipeline
383:42 - that's something that would be really
383:43 - useful but anyway we're going to let
383:45 - this finish creating and then once it's
383:47 - done we're just going to destroy it but
383:49 - that's pretty much all i wanted to show
383:50 - you was the fact that you can
383:52 - use the hyphen out command to
383:55 - output that stuff so we'll just go here
383:57 - and type in terraform apply auto approve
384:01 - and destroy
384:04 - okay
384:10 - and we'll give it a moment there and
384:11 - we're all good so i'll see you later
384:13 - [Music]
384:17 - all right let's talk about managing
384:18 - resource drift so drift or configuration
384:21 - or infrastructure drift is when your
384:23 - expected
384:24 - resources are in different state than
384:26 - your expected state and the way we can
384:28 - resolve drift are in three different
384:29 - ways in terraform we can replace
384:31 - resources so when a resource has become
384:33 - damaged or degraded that cannot be
384:35 - detected by terraform we can use the
384:37 - hyphen replace flag we can import
384:40 - resources so when an approved manual
384:42 - edition of a resource needs to be added
384:44 - to our state file so we use the import
384:47 - command and refresh state so when an
384:49 - approved manual configuration of a
384:51 - resource has been changed or removed
384:53 - we're going to use the refresh only flag
384:55 - to reflect the changes in our state file
384:57 - it's very important to know these three
384:58 - different ways they will all show up in
385:00 - the exam and in practice you're going to
385:01 - need to know them okay
385:03 - [Music]
385:07 - let's first here take a look at
385:08 - replacing resources so
385:10 - we can use the terraform tank command it
385:12 - is used to mark a resource for
385:13 - replacement the next time you run apply
385:16 - and why would you want to mark a
385:17 - resource for replacement well the idea
385:19 - is that um you know and here's the
385:21 - command here but a cloud resource
385:22 - becomes damaged or degraded and you just
385:24 - want to return the expected resource to
385:26 - a healthy state so that's the idea
385:27 - behind it and the unfortunate thing is
385:30 - that terraform taint was deprecated in
385:32 - version
385:33 - 0.152 however there is a better way of
385:36 - doing it now and so it is recommended to
385:38 - use the hyphen replace flag and
385:41 - providing it a resource address when
385:42 - you're doing a terraform apply so it's
385:44 - basically the exact same thing the
385:46 - reason why they made this change was so
385:48 - that um
385:50 - you actually have an opportunity to
385:51 - confirm your change beforehand because
385:52 - terraform tank would just run and this
385:55 - one down below will actually prompt you
385:57 - to say are you sure you want to do this
385:59 - okay but it's not complicated you just
386:01 - do a hyphen replace and then you use the
386:03 - resource address of the thing that you
386:04 - want to
386:05 - um uh use that for and this can be used
386:08 - for both plan and apply uh the replace
386:10 - flag appears to only work for a single
386:12 - resource so you can't use multiple
386:14 - resources it's just one at a time and
386:16 - that's something that you should
386:17 - remember okay
386:18 - [Music]
386:22 - so we just saw a resource address and
386:24 - resource addressing is very important to
386:26 - know for the upcoming command so let's
386:28 - just give it a bit more attention here
386:30 - so resource address is a string that
386:32 - identifies zero or more resource
386:33 - instances in your configuration an
386:35 - address is composed of two parts so the
386:37 - module path and the resource path and
386:39 - just expand out that module path it
386:41 - would be module.modulename module index
386:44 - and then on the resource spec this is
386:46 - resourcetype.resourcename and then if
386:47 - there's multiple instances you give it
386:49 - an index so modulepath addresses a
386:51 - module within a tree of modules a
386:54 - resource spec address is a specific
386:56 - resource instance in the selected module
386:58 - so a module is the namespace of the
387:00 - module module name is user-defined name
387:03 - of the module module index when the
387:07 - multiple uh so when there's multiple
387:09 - specifying index on the other side
387:10 - that's your resource type your resource
387:12 - name and instance id uh most of the
387:15 - times you're going to be just working
387:16 - with resources but once you start
387:18 - getting to modules it becomes pretty
387:20 - simple it's always going to be module
387:22 - period
387:24 - because
387:26 - that's just i think that's the name of
387:27 - the name value so it's always going to
387:28 - be module dot and then the module name
387:31 - but here we have a very simple example
387:32 - just for resource type so
387:34 - here if we had a resource called abus
387:36 - instance and it was web and there was
387:38 - four of them and we wanted to select the
387:40 - third one we'd do aws instance dot web
387:42 - square braces three and that would get
387:44 - us the third virtual machine so there
387:46 - you go
387:47 - [Music]
387:51 - okay let's take a look here at terraform
387:53 - import and this is a command that is
387:54 - used to import existing resources into
387:57 - terraform so this is how you define it
387:59 - so you'd say what resource you want and
388:01 - uh you can just leave it blank so you
388:03 - define a placeholder for your imported
388:04 - resource and configuration file and you
388:06 - can leave the body blank and fill it in
388:08 - after importing but it will not be
388:10 - autofilled so you do have to specify all
388:12 - the values okay so the idea here is
388:15 - you're going to do terraform import aws
388:18 - instance dot example and then the name
388:19 - of the id so that maps over to the
388:21 - resource address and the id okay the
388:24 - command can only import one resource at
388:26 - a time this sounds very similar to
388:28 - that other command we saw for replace
388:30 - not all resources are importable you
388:32 - need to check the bottom of the resource
388:33 - documentation for support okay
388:35 - [Music]
388:39 - okay so we're going to look at
388:40 - refreshing and so we're going to break
388:42 - this between the old command refresh and
388:43 - the new command refresh only across two
388:46 - slides so terraform refresh command
388:48 - reads the current settings from all
388:50 - managed remote objects and updates the
388:51 - terraform state to match so here we have
388:54 - the terraform refresh and i just want to
388:55 - point out that
388:56 - the
388:57 - terraform refresh is basically the alias
388:59 - for terraform apply hyphen refresh only
389:02 - hyphen auto auto approve so you
389:04 - technically have this functionality in
389:06 - the latest version it's just that you
389:08 - can't use the old alias terraform
389:10 - refresh terraform refresh will not
389:12 - modify your real remote objects but will
389:14 - modify the terraform state
389:16 - so terraform refresh has been deprecated
389:18 - and the refresh only and with the
389:20 - refresh only flag
389:21 - like it's been replaced with it because
389:23 - it's not safe since it did not give you
389:25 - the opportunity to review proposed
389:26 - changes before updating the state file
389:28 - so that's why the reason they got rid of
389:29 - it let's take a look here at the refresh
389:31 - only mode so hyphen refresh only flag
389:35 - for terraform plan or apply allows you
389:37 - to refresh and update your state file
389:38 - without making changes to your remote
389:40 - infrastructure just to really make this
389:43 - clear i want to give you a scenario and
389:45 - i want you to pay close attention here
389:47 - to understand the difference because
389:48 - this is so important on the exam and
389:50 - also extremely useful
389:52 - for your day-to-day operations so here's
389:54 - a scenario imagine you create a
389:56 - terraform script that deploys a virtual
389:58 - machine to aws
390:00 - you ask an engineer to terminate the
390:01 - server and instead of updating the
390:03 - terraform script they mistakenly
390:05 - terminate the server via the aws console
390:07 - because they don't know any better so
390:10 - what happens if you were to run a
390:11 - terraform apply versus with a refresh
390:14 - only flag so that's what we'll do with
390:16 - and without the flag so without the flag
390:18 - first terraform will notice that the vm
390:20 - is missing terraform will propose to
390:22 - create a new vm so the state file is
390:25 - going to be what's considered as correct
390:28 - and the changes and so changes to the
390:30 - infrastructure will be made to match the
390:32 - state file okay if we use terafrom apply
390:35 - hyphen refresh only terraform will
390:37 - notice that the vmu provision is missing
390:40 - uh but with the refresh only flag
390:43 - it's going to know that the the vm
390:45 - is missing and it's intentional okay so
390:47 - i have a couple spelling mistakes there
390:50 - but the idea is that it knows that the
390:52 - vm is supposed to not be there so
390:54 - terraform will propose to delete the vm
390:56 - from the state file so just the json
390:58 - code from the state file so the state
391:00 - file is considered wrong and changes to
391:02 - the state file will be made to match the
391:04 - infrastructure so hopefully that makes
391:05 - it clear okay
391:07 - [Music]
391:11 - hey this is andrew brown from exam pro
391:13 - we are on to the manage resource drift
391:14 - follow alongs and there's three things
391:16 - we want to check out replace import and
391:18 - refresh
391:19 - so what i'm going to do is i'm going to
391:22 - go over to our folder here the the
391:25 - manage resource drift we're going to
391:27 - make a new file as always call it
391:29 - main.tf and i think the contents here is
391:31 - going to be pretty much the same as our
391:34 - last one so i'm just going to go ahead
391:36 - and grab that
391:37 - and
391:39 - we'll type clear we'll back our way out
391:42 - i'm going to just do terraform in it
391:46 - okay
391:49 - and uh the idea here is that we're just
391:51 - going to provision this resource here
391:53 - and we're just going to replace it we'll
391:55 - have to try to import something and do a
391:57 - refresh maybe we'll do replace import or
391:59 - we'll do import last just because that
392:00 - one is a little bit more
392:02 - challenging
392:04 - so we'll just let this initialize here
392:06 - and then we will
392:07 - deploy it and then we'll try to replace
392:09 - it
392:10 - great so that's all good so we'll do a
392:12 - terraform apply and we'll just say auto
392:15 - approve and let that go
392:27 - great and so that is done there and so
392:30 - what we can do is go ahead and replace
392:32 - that instance so the reason we would
392:33 - want to do this is let's say our
392:34 - instance became damaged or degraded or
392:37 - let's just say we in general just want
392:38 - to replace it and actually i think
392:40 - through some of the fall longs we had to
392:41 - use replace in some instances so we've
392:44 - already kind of had some experience with
392:45 - it but the idea is we just type in
392:47 - terraform
392:48 - apply
392:49 - and then we can just do replace and then
392:51 - we give it the database instance
392:53 - um like its resource name here so we
392:55 - just say my server now this used to be
392:58 - called terraform taint and depending on
393:00 - when you set the exam uh you know if
393:02 - it's really close to when i uh when i
393:04 - launched this course then you might
393:05 - still come across questions that are
393:06 - terraform tape but now it's just this
393:08 - hyphen replace uh replace command here
393:11 - and so what i can do is just hit
393:14 - enter i actually don't really want to
393:16 - execute this i just wanted to show you
393:17 - it because i want to move on to the
393:18 - refresh one which is going to take a
393:20 - little bit more time here
393:22 - and just if we scroll on up look what
393:23 - it's doing it just says we're going to
393:25 - replace this so destroy and then re
393:27 - recreate it so this is a great way to to
393:29 - re uh force that now notice when you use
393:31 - the hyphen replace flag you're only able
393:33 - to provide a single resource and that's
393:35 - just how it is so i'm going to go ahead
393:36 - and here type no now let's take a look
393:39 - at
393:40 - refresh so a great example of this is if
393:43 - we make our way over to the vpc console
393:45 - and we go over to ec2 what we're going
393:47 - to do is just um
393:50 - go ahead and destroy this instance
393:53 - okay so somebody came in and let's say
393:55 - you know you're working on your with
393:57 - your team and they and you told junior
393:58 - saying hey we need to destroy the server
394:00 - because it's costing us a lot of money
394:02 - and they get they go okay and they're
394:04 - not aware of all the terraform
394:06 - infrastructure or maybe there's an
394:08 - urgency to uh tear it down really
394:10 - quickly and so they use these uh the ui
394:12 - to do that and so here i've terminated
394:14 - the server but the problem is that my
394:16 - state file still thinks that this uh
394:18 - this exists so give this a moment to get
394:21 - into a shutting down stage there we go
394:23 - and so now what's going to happen if i
394:25 - do terraform apply
394:28 - and i don't know if we have to wait a
394:29 - bit longer for it to destroy there but
394:30 - it's going to check the state and see
394:32 - whether that server exists it's going to
394:34 - tell us what action it's going to take
394:37 - okay so
394:41 - there's no changes so we'll just wait a
394:42 - little bit here
394:44 - okay
394:50 - so i'll just talk to you here in a
394:51 - moment i'm just going to wait for this
394:53 - to shut down okay
394:54 - great so after a short little wait you
394:55 - can see my server is now terminated so
394:57 - what i'm going to do here
394:59 - uh once my console is responsive
395:01 - sometimes it just does this i have to
395:02 - like click a few times to get it to
395:05 - react there we go so what i'm going to
395:07 - do is i'm just going to
395:08 - [Music]
395:11 - write terraform apply
395:15 - okay
395:17 - and we're just going to see what happens
395:19 - here
395:21 - so notice that it's trying to add the
395:22 - server because the server is gone right
395:24 - but the thing is is that we actually
395:26 - want the server not to be recreated when
395:28 - we run this again and so the problem is
395:29 - that
395:30 - our state file is not telling the truth
395:32 - it should be updated to reflect the fact
395:34 - that that instance is removed i think
395:35 - this is where we could use the terraform
395:37 - state removed to actually remove it
395:39 - as a resource but another thing that we
395:41 - could do is use the terraform refresh
395:43 - and actually now it's called terraform
395:45 - apply uh
395:46 - reflect refresh only okay and what
395:48 - that's going to do is it's going to
395:50 - check the actual state against uh the
395:54 - actual or sorry the actual the state
395:56 - against the actual resource and notice
395:57 - it's just going to remove it because it
395:59 - says hey you removed this from aws and
396:03 - this is your intention right you
396:04 - actually want it gone so let's go ahead
396:06 - and say yes to that okay
396:10 - so yeah there we go and we'll move on to
396:12 - importing okay
396:17 - all right so now let's try to actually
396:19 - import a resource in here so imagine
396:21 - we've already created something like an
396:22 - s3 bucket and that's what we're gonna do
396:24 - i'm gonna make my way over to s3
396:27 - okay and we're going to go ahead and
396:29 - create ourselves a new bucket here so
396:31 - we'll say create bucket and i'll just
396:33 - say
396:34 - my new bucket
396:36 - and i'll just put a bunch of random
396:37 - numbers here because these are unique
396:39 - names just like domain names so it's
396:41 - easier if you just kind of like dump a
396:43 - bunch of random things in there and so i
396:45 - want to go down here and just uh oops
396:48 - create
396:49 - this bucket here
396:52 - okay so i have the name here for that
396:54 - bucket which is this one here and so we
396:57 - want to import that as a resource so i'm
396:59 - just going to go over here and type in
397:00 - whoops terraform import
397:03 - we're going to take a look at how we can
397:05 - go ahead and do that
397:06 - so
397:08 - um it's not really telling me much
397:11 - terraform import
397:16 - so i'll just go ahead and type the
397:17 - command i thought we'd get a little bit
397:18 - more information there
397:20 - okay
397:24 - and
397:25 - this is not helping much either so i'm
397:27 - gonna go pull up my handy-dandy uh notes
397:30 - here because maybe i
397:33 - did myself a favor whoops
397:36 - and i detailed it out and i keep on
397:39 - hitting the same button here and it's
397:40 - just not opening the search
397:43 - okay
397:44 - so we'll go look for import
397:48 - great here it is so
397:50 - um yeah we have to provide the
397:52 - placeholder so that's what we're going
397:54 - to do
397:55 - so just go up here and this is going to
397:57 - be resource
397:59 - um aws s3 bucket i think it is
398:02 - just to go double check that there
398:06 - go over to our documentation
398:08 - look for s3
398:10 - that's what it is good
398:12 - and
398:13 - this is pretty much all it is it's just
398:14 - the name the resource and the name so
398:19 - i'm sure it's not that hard to type but
398:20 - i'm just going to do that anyway
398:23 - we'll just say bucket
398:25 - and then we need our bucket name that
398:27 - we're going to import
398:29 - so go ahead and copy that
398:33 - and we'll paste it there get rid of that
398:35 - space
398:36 - and so now all we need to do is type in
398:38 - terraform
398:40 - import
398:41 - aws
398:43 - s3 bucket
398:45 - bucket
398:46 - and then we need to probably provide
398:49 - the id and i guess the id is the bucket
398:51 - name here so we'll go ahead and paste
398:52 - that bucket name in we'll see if that
398:55 - takes
398:59 - okay so that bucket is uh being added
399:02 - great and so now what we should be able
399:03 - to do is if we want to tear down that
399:05 - bucket we should be able to do terraform
399:07 - destroy
399:10 - i don't think everything can be imported
399:11 - so there's some things that might not be
399:13 - uh possible to import so we'll go ahead
399:15 - and type yes
399:18 - and it says that it's destroyed and so
399:20 - we will go back here give it a refresh
399:22 - and it is gone so there you go
399:24 - um so we covered them all replace
399:27 - refresh and import
399:29 - [Music]
399:33 - so let's take a look here how we would
399:34 - actually go about troubleshooting
399:36 - terraform so there are four types of
399:38 - errors you can encounter with terraform
399:40 - uh the first is language error so
399:42 - terraform encounters a syntax error in
399:44 - your configuration for the terraform or
399:46 - hcl language you have state errors so
399:49 - your resources states has changed from
399:52 - the expected state in your configuration
399:54 - file core errors so a bug that has
399:56 - occurred with the core library provider
399:59 - errors so the provider's api has changed
400:01 - or does not work as expected due to
400:03 - emerging edge cases and when we talk
400:05 - about what's easy for us to solve and
400:07 - what's hard well the first two are very
400:09 - easy and the other two are harder to
400:11 - solve so for language errors we can use
400:14 - format validate or version to uh
400:17 - resolve our language errors version
400:19 - would just say hey what version are we
400:21 - using maybe we need to update it right
400:23 - validate would detect if something's
400:24 - wrong with
400:26 - the the the syntax and format would fix
400:29 - formatting syntax but
400:30 - you know that probably wouldn't fix that
400:32 - much there for state errors the idea
400:35 - here is we might want to use refresh
400:37 - apply replace everything that we saw in
400:39 - the drift section for core errors
400:43 - we might want to go check out the log so
400:45 - tf underscore log is um basically just
400:48 - the way of saying like hey these are
400:49 - where the log files are or is logs
400:51 - turned on we have a whole slide on that
400:53 - but really like all you're going to do
400:55 - is use the logs to find information and
400:58 - and then report a github issue since all
401:01 - terraform is on github
401:03 - you just go there and then somebody
401:04 - would try to resolve it
401:06 - and the same thing with providers so
401:08 - providers are all hosted on github and
401:10 - so you would just use tf logs to try to
401:12 - find some information there but uh we'll
401:14 - take a look a greater look at tf log and
401:17 - how to
401:19 - you know get that information for the
401:21 - harder to solve cases okay
401:22 - [Music]
401:26 - okay so let's talk about how we would go
401:28 - about debugging terraform via the log
401:30 - file so terraform has detailed logs
401:32 - which can be enabled by setting the tf
401:35 - underscore log followed by
401:37 - the type of environment you want to run
401:38 - so the variables that we have or the
401:41 - environments we can specify is trace
401:44 - debug info warn error or json json will
401:48 - output logs at the trace level or higher
401:51 - and use parsable json encoding as the
401:53 - formatting okay
401:55 - so logging can be enabled separately so
401:58 - you can do this via tf log core
402:01 - or
402:02 - you can get it at the tf log provider so
402:04 - if you just want core stuff or if you
402:05 - just want provider stuff uh you just set
402:08 - those environment variables and as we
402:10 - saw in the previous thing that there
402:11 - were you know there was core errors and
402:13 - provider variables so that could be a
402:14 - good way to
402:16 - uh do that and so tf uh tf core tf log
402:20 - core and tflog provider take the same
402:21 - environment variables we see on the
402:23 - right hand side their trace debug info
402:24 - etc okay
402:26 - if you want to choose where you want to
402:28 - log things you just can set the tf log
402:30 - path i don't think i actually say where
402:32 - the default path is i think it's
402:34 - actually in the the project directory
402:36 - but if you want to override that you can
402:38 - i imagine it either takes an absolute
402:40 - path or a relative path um and here's an
402:42 - example of a terraform log so this is
402:45 - for everything and so there you can see
402:48 - information i'm going to get my pen tool
402:50 - out here for a moment but you can see we
402:52 - have information about the provider this
402:54 - is using um
402:56 - there then there's some back and local
402:58 - stuff so you know there's some
402:59 - information you're not expected to
403:01 - understand this information uh generally
403:03 - but you could go bring it to the
403:04 - provider but you could probably solve
403:06 - something you know if you were to read
403:08 - the core code or the providers okay
403:11 - [Music]
403:15 - okay so we looked at tf log um which is
403:18 - the terraform log but there's also a
403:19 - crash log and so if terraform ever
403:21 - crashes and basically this means it goes
403:24 - into panic because it uses the go
403:25 - runtime it saves a log file with the
403:27 - debug logs from the session as well as
403:29 - the panic message and backtrace to the
403:32 - crash dot log and so i imagine this is
403:35 - go lang information so i don't use
403:37 - golang that often
403:39 - but you can see we have dot go dot go so
403:42 - i think that there's not much you can do
403:44 - with it so this is where you would just
403:45 - create a github issue and pass it along
403:48 - to the terraform team because they're
403:49 - going to be able to make sense of it
403:50 - okay
403:51 - [Music]
403:56 - hey this is andrew brown from exam pro
403:58 - and we are on to the troubleshooting um
404:00 - follow alongs here so you know there's
404:02 - terraform logs and there's crash logs
404:03 - i've only ever encountered a crash log
404:05 - once i don't know how we're going to
404:07 - replicate that so i don't that's going
404:08 - to be
404:09 - something we're going to be able to
404:10 - cover here but definitely terraform
404:11 - debug log is something we absolutely can
404:14 - do so what i'm going to do is go down
404:16 - below to my troubleshooting folder make
404:18 - a new file as always type in main.tf
404:20 - and we will pull from
404:23 - not this one we'll go grab from our plan
404:25 - and apply
404:27 - since we had a really simple server
404:28 - there
404:29 - and we'll paste that on in
404:32 - apparently i did not copy it so we'll
404:34 - try that one more time
404:37 - and we'll go back over here and we will
404:39 - paste that in
404:40 - um and that all looks good to me so what
404:44 - we'll do is just cd back
404:46 - and we'll go to the troubleshooting
404:48 - folder and i'm going to do a
404:49 - terraforming net and as that's going
404:50 - we're going to go look up how do we set
404:53 - up that log okay
404:54 - so pretty sure i have it in my slides so
404:57 - i'm just going to go ahead here and look
404:59 - up log
405:01 - okay
405:03 - it's really great when i always have uh
405:05 - the code on hand here and so the idea is
405:08 - that through the tf log we're going to
405:10 - set an environment variable and we'll
405:11 - set this trace so we can get a lot more
405:13 - information okay
405:14 - so what i'll do here
405:16 - is i will go and
405:19 - um
405:20 - i'm going to set it when we do the
405:22 - terraform apply so
405:24 - i'll just say tf log equals trace
405:29 - and
405:30 - we will then do the terraform apply and
405:34 - hopefully we should get a lot more
405:35 - information
405:37 - already you can see that we're getting a
405:39 - lot of stuff see all these traces and
405:41 - debugs as we normally wouldn't get them
405:44 - we might want to
405:46 - dump all this data to somewhere so maybe
405:48 - that's something else that we can do i'm
405:49 - just going to say no for the moment here
405:52 - and let's go ahead and try to set a file
405:53 - here so we'll just say tf log
405:57 - path
405:58 - and
406:00 - i don't know if it would take a relative
406:01 - path so
406:02 - yeah let's give it a try let's see if we
406:04 - can give it a relative path and just say
406:06 - um terraform dot log because i want to
406:08 - see if we can get it to log right in
406:10 - this folder here and it did that's nice
406:14 - okay
406:15 - and so again i'm just going to type no
406:18 - and if we open that up
406:20 - there's all our logs
406:22 - okay
406:23 - so you know it's not that complicated
406:25 - you can also separate the logging so
406:27 - they have the tf log core and the tflog
406:29 - provider
406:31 - um i guess it would just be like if you
406:33 - were if you just wanted to log
406:35 - the core stuff so i'm going to go ahead
406:36 - and delete this
406:38 - so let's say you're or let's say you're
406:39 - trying to debug the provider i guess you
406:41 - could just go here
406:43 - and type in
406:45 - provider it might not log anything i
406:46 - don't know we'll just hit enter here
406:49 - and we'll see if we get any output
406:53 - okay i'm going to just type no
406:55 - so open that up yeah we do get stuff and
406:57 - see what says provide in the beginning
406:59 - okay
407:00 - and that's pretty much it so there you
407:02 - go
407:03 - [Music]
407:07 - all right i figured i would just include
407:09 - one more thing here because when you are
407:10 - troubleshooting a lot of times you do
407:12 - have to go
407:13 - to the github and open up an issue
407:16 - and so i just want to show you where
407:17 - that is just in case you're not that
407:19 - familiar with github or you're just you
407:21 - use github but you're not used to
407:22 - opening issues so here i'm on terraform
407:24 - and i can open up an issue
407:26 - and i can go here and create a new issue
407:29 - and here you can see that there's
407:30 - different information like feature
407:32 - requests reported reported security
407:34 - vulnerability report bug
407:36 - if there's something else it's going to
407:38 - go here and that's going to go to the
407:39 - discussion but if we report a bug i'm
407:41 - just curious if they actually tell you
407:42 - to include the logs here
407:46 - terraform version configuration file
407:48 - deep debug output so this is where we
407:51 - have the tf log and they're telling you
407:52 - to do it as a trace if you have a crash
407:54 - output so yeah that's pretty much it i
407:56 - just wanted to show you where that would
407:58 - be and also this would be the same for
408:00 - any of the providers so if you go
408:02 - up to
408:03 - a provider here
408:05 - like aws and this one is of course
408:07 - supported by hashicorps so if we go to
408:09 - issues and we open up a new issue we're
408:12 - going to see this something very similar
408:14 - and they're going to probably ask for
408:15 - the debug logs again here but here they
408:18 - might just say can you only give
408:20 - give us for the provider
408:22 - um
408:24 - i'm sure it's somewhere out here panic
408:26 - output right that would be that here we
408:28 - are the debug logs right
408:30 - um and for modules probably the same
408:33 - thing like if we went over to the
408:34 - modules i'm sure it's very similar but i
408:37 - don't know how you get that output for
408:39 - that
408:42 - so like if we just go to one of these
408:43 - sub modules here
408:46 - and go to issues i just want to see if
408:48 - anton is something similar
408:54 - so
408:55 - yeah that's pretty much it so there you
408:56 - go
408:57 - [Music]
409:01 - all right so we're on to our module
409:03 - section so let's first talk about how we
409:05 - would go find a module i know we already
409:07 - saw this earlier when we were looking at
409:08 - the terraform registry but let's just
409:09 - cover it again and talk about some of
409:11 - the uh
409:13 - details of a search okay so tariffer
409:16 - modules can be publicly found in the
409:18 - terraform registry and so on the
409:20 - left-hand side when you're under the
409:21 - modules within the terraform registry
409:23 - you can
409:24 - filter your providers okay
409:27 - but another thing you can do is you can
409:29 - type in search terms and you can do
409:31 - partial search terms like azure compute
409:33 - but what i really want you to know is
409:35 - that only verified modules will be
409:38 - displayed in search terms and so i
409:39 - assume that means verified and also
409:42 - official ones and the reason i'm giving
409:44 - this extra emphasis is because it was an
409:46 - exam question so i just want you to know
409:48 - that only verified and official ones are
409:51 - going to show up when you search okay
409:54 - [Music]
409:58 - let's talk about using modules and
409:59 - there's our public modules and private
410:02 - modules so public modules are going to
410:04 - be on the terraform registry and private
410:06 - modules are going to be in terraform
410:07 - cloud or i suppose terraform enterprise
410:10 - so terraform registry is integrated
410:12 - directly into terraform so it makes it
410:14 - really easy to start using them so all
410:16 - you're going to do is
410:17 - use the module block so i'm just going
410:19 - to
410:20 - highlight that there then we have the
410:22 - name of our module we're providing the
410:24 - source of our module and then there's
410:26 - the version of our module terraform init
410:28 - command will download and cache any
410:30 - module referenced by a configuration now
410:34 - looking at private modules it looks very
410:36 - similar
410:37 - it's just that the name is different so
410:39 - we're specifying the hostname in front
410:41 - here and a namespace as well so to
410:44 - configure a private module access you
410:46 - need to authenticate against terraform
410:48 - cloud via terror from login
410:51 - so that's something there
410:53 - we definitely cover that a lot in the
410:54 - practice exam so just in case you know
410:57 - you know all the edge cases there
410:58 - alternative alternatively you can create
411:00 - a user api token and manually configure
411:03 - credentials into cli to configure the
411:05 - file so there you go
411:07 - [Music]
411:11 - let's talk about how we would go about
411:13 - publishing modules and this in
411:14 - particular is for the terraform registry
411:16 - so these are public modules so uh if we
411:19 - want to publish modules it supports
411:21 - versioning automatically generating
411:23 - documentation allowing
411:25 - users to browse the version histories
411:28 - showing examples and readmes and all of
411:31 - these modules are actually going to be
411:32 - hosted on github so the idea is you're
411:35 - going to put your
411:36 - module there first and once a module is
411:39 - registered to push updates you simply
411:40 - push new versions to properly form get
411:43 - tags uh you have to name the your um
411:46 - your modules in a very particular way on
411:49 - github so the thing is it has to start
411:51 - with terraform hyphen then the provider
411:54 - so aws and then the name so hyphen vpc
411:57 - and the way you publish it on teraform
411:59 - registry is you have to connect and
412:01 - publish uh via your github account so
412:04 - you just hit sign in with github and
412:06 - it's just going to give you a drop down
412:07 - you're just going to choose the repo and
412:09 - that's as simple as it is okay
412:11 - [Music]
412:15 - all right let's talk about verified
412:16 - modules so these are reviewed by
412:18 - hashicorp and actively maintained by
412:20 - official contributors to stay up to date
412:22 - and compatible with both terraform and
412:24 - the respective providers so here's an
412:26 - example of a module from our friend
412:28 - anton down below and as you can see it
412:30 - has a little badge that's how you know
412:32 - that it's verified so verified modules
412:34 - are expected to be actively maintained
412:36 - by hashicorp partners verified badges
412:38 - aren't
412:39 - an indication of the flexibility or
412:42 - feature support but just to kind of go
412:44 - through some things here very simple
412:47 - modules can be verified just because
412:48 - they're great examples of modules unfair
412:51 - divide modules could be extremely high
412:52 - quality and actively maintained
412:54 - unverified modules shouldn't be assumed
412:56 - to be poor quality unverified means it
412:58 - hasn't been created by a hashicorp
413:01 - partner
413:02 - so you know that again it's not
413:04 - indicative of quality but it just means
413:06 - that it's gone through a bit of vetting
413:07 - okay
413:08 - [Music]
413:12 - all right let's take a look here at the
413:14 - standard module structure and this is a
413:15 - file and directory layout recommended
413:17 - for module development and this is the
413:18 - idea if you were to go and publish your
413:21 - own module this is what people would
413:22 - expect to see so if you had a root
413:24 - module that's what it be and you have
413:25 - nested module i want to point out that
413:27 - when you are writing terraform you
413:29 - technically are creating modules even if
413:31 - you aren't intending them to publish
413:33 - them into the terraform registry
413:35 - but you know when you make a main.tf
413:37 - you've basically made your own root
413:39 - module okay so the primary entry point
413:41 - is the root module these are required
413:43 - files in the root directory so your
413:45 - main.tf is the entry point file for your
413:48 - module variables tf is the variables
413:50 - that can be passed in outputs.tf are
413:52 - outputted values readme describes how
413:55 - the modules work license the license
413:57 - under which the module is available for
413:59 - nesa modules which are optional but must
414:01 - be contained in the modules directory a
414:04 - submodule that contains a readme is
414:06 - considered usable by external users a
414:08 - submodule that does not contain a readme
414:10 - is considered in for only internal use
414:12 - and the idea is to avoid using relative
414:15 - paths when sourcing module blocks so
414:17 - hopefully that gives you an idea okay
414:19 - [Music]
414:23 - hey this is andrew brown from exam pro
414:25 - and we are on to our module section so
414:27 - you know we looked at the structure of
414:29 - how modules should be just pulling up
414:31 - the documentation over here
414:33 - and scrolling on down to our shared
414:36 - module structure so this is pretty much
414:37 - what we expect we expect that main
414:39 - variables output readme license and then
414:42 - you you may need a modules directory
414:45 - there if you are learning to write your
414:46 - own what i would strongly recommend is
414:49 - to check out anton so anton um he
414:51 - basically uh he's an abused hero just
414:54 - like myself but he
414:55 - built and maintains
414:57 - like a ton of really good modules for
415:00 - terraform and you can go through any of
415:02 - these and find really good information
415:04 - so like for instance the rds instance
415:06 - has a very good example of how modules
415:09 - like should be used and so we have
415:11 - folders within folders you can see
415:13 - everything is very well organized and if
415:15 - we have a readme that tells you that
415:17 - it's exposed and
415:19 - how he's defined everything are very
415:20 - good examples but for our purposes we
415:23 - just want to make
415:24 - something very simple
415:26 - and so let's go ahead and create
415:28 - ourselves our own module so what i'm
415:30 - going to do
415:31 - is go over here and we've actually done
415:34 - a lot of this work already um when we
415:37 - were using cloud init so i think that
415:39 - would be a great place to kind of grab
415:40 - that stuff and so what i'm going to do
415:43 - is go ahead and grab this entire file
415:45 - here and we're going to scroll on down
415:48 - and make ourselves a new directory
415:52 - here under modules
415:54 - and i'm going to make a new file here
415:56 - and i'm just going to call it main.tf
415:59 - and we're going to go ahead and paste
416:00 - that on in there and so i think that we
416:01 - should have outputs as well
416:04 - what should it be called should be
416:05 - called outputs
416:07 - based on convention so
416:09 - we'll have that
416:12 - and i just made that a folder didn't i
416:14 - okay we'll just delete that there
416:18 - and we will go ahead and create a new
416:20 - file called outputs.tf
416:24 - and we also need a variables
416:29 - tf
416:31 - and we need ourselves a readme
416:36 - and we should also have ourselves a
416:38 - license
416:41 - okay
416:46 - and so what i'm going to do is just
416:49 - copy paste over here from anton because
416:51 - he's done a lot of the work here so we
416:53 - have this license here the apache
416:55 - license
416:56 - if it's good for anton it's good for me
416:58 - okay
416:59 - so we'll go ahead and paste that on in
417:01 - and so now we have that and let's go
417:03 - take a look at the readme and see what
417:05 - kind of work uh has been done here i
417:07 - assume it's just like to show how it
417:09 - works
417:10 - yeah
417:12 - so you know we'll just say in here um
417:16 - terraform module to provision
417:19 - an ec2 instance
417:21 - uh that is running
417:25 - is running apache
417:31 - okay
417:32 - not intended for
417:34 - for production use
417:37 - just showcasing
417:43 - how to create a custom module
417:45 - on terraform registry
417:51 - okay
417:54 - so nothing super fancy there and then
417:56 - we'll just give our um brackets there
417:58 - for the time being
418:00 - i don't know if there's like even
418:02 - uh something for
418:04 - these other you have these three
418:05 - backticks that will you can actually um
418:07 - highlight in particular oh so there is
418:09 - one for hcl so that's great so what i'll
418:11 - do is just type in hcl there
418:13 - and so now what we need to do is just
418:15 - kind of break up our main.tf here
418:18 - and i did not forget the fact that we do
418:20 - not have the um
418:23 - uh the configuration file but we'll get
418:25 - to that in a moment
418:27 - so we'll go ahead and paste that onto
418:29 - here
418:30 - and then in our main tf we might have
418:32 - some variables
418:35 - do we have any
418:36 - variables we do not
418:39 - i assume we don't
418:41 - specify any kind of back end so let's
418:42 - just go take a look at what
418:46 - anton has done here
418:49 - in his main.tf
418:50 - we go to the top here and just looking
418:53 - through here
418:54 - i do not see any
418:57 - kind of
418:59 - thing there so that's fine and you know
419:01 - what i should be doing is i should be
419:02 - making a new folder here
419:04 - and this is going to be
419:06 - new folder we're going to call this aws
419:12 - demo
419:15 - apache
419:17 - okay
419:20 - or maybe what we should do is actually
419:22 - call it
419:24 - hello world
419:29 - it technically is a module
419:32 - so we'll say idris module
419:35 - apache
419:37 - maybe example would be better
419:41 - okay and so i'm just going to uh reveal
419:44 - these in the folder here and i just want
419:46 - to
419:47 - you know place the contents of them in
419:49 - here okay
419:52 - and i've decided that we're going to
419:53 - want to actually use our module so
419:56 - what i will do is create a new file here
420:00 - it's actually making the subfolder
420:01 - actually want it
420:04 - at the top level there so i might have
420:06 - to just touch that file there main.tf so
420:08 - it'll show up there we go and so if i
420:10 - expand that now we have our main tf here
420:13 - and then we'll just call our module so
420:15 - we'll say
420:16 - um
420:17 - just waiting for my page to become
420:18 - responsive here there we go so we'll say
420:20 - terraform
420:24 - and we had module and then we need to
420:26 - call our module aws module is it module
420:28 - or modules let's go up the top here
420:32 - terraform aws rds
420:35 - oh it has to start with the word
420:37 - terraform
420:39 - okay
420:41 - so i'm just going to rename this
420:43 - hopefully this doesn't cause me a bunch
420:44 - of issues
420:45 - we'll say terraform
420:49 - i can always start with terraform aws
420:52 - and then apache
420:56 - example
420:58 - okay
421:03 - so we will go back over here
421:06 - and so we'll say terraform
421:10 - i think we can actually name this
421:11 - whatever we want so i can just say like
421:12 - apache
421:14 - and
421:16 - we have to specify its source
421:20 - i don't really remember this so i know
421:22 - we already did this before with
421:24 - something
421:28 - where did we do this where we had a
421:29 - child one
421:34 - getting started
421:36 - no
421:40 - on oh outputs that's where we did it
421:42 - over here okay so just pulling up our
421:44 - old one here
421:46 - just to save us some trouble
421:49 - since i cannot seem to remember off the
421:51 - top my head how that works
421:53 - so here we are just going to
421:56 - specify the source locally and so that's
421:59 - terraform adabus apache example
422:04 - okay
422:09 - and what i want to do here
422:11 - i'm going to close off some of these
422:12 - older tabs so we're less confused on
422:15 - what's going on
422:18 - um i just want to continue to break up
422:20 - this file here so we'll go to our main
422:26 - and we don't even need a terraform block
422:30 - pretty sure we should be specifying a
422:32 - terraform provider again we'll take a
422:34 - look at
422:36 - what
422:40 - what's going on here in this one here
422:44 - maybe it's under versions
422:46 - i kind of like that let's go call that
422:48 - versions could also call providers but
422:53 - and so
422:54 - yeah that's where we were seeing it
422:55 - there okay so what i'll do is go back
422:58 - over to here
422:59 - and we will cut that out
423:04 - and we will paste it in here
423:07 - and probably we should be very
423:09 - aggressive and with our progressive
423:11 - versioning and do this
423:14 - okay
423:15 - i'm not sure if you specified the
423:17 - provider here so i don't see the
423:19 - provider listed i don't know if you'd
423:21 - actually have to
423:22 - [Music]
423:24 - list that
423:29 - i don't think so
423:31 - no okay so what i'll do is i'm just
423:33 - going to
423:35 - grab the provider out of here
423:37 - oops
423:40 - we'll cut that out and we'll put that in
423:41 - our top level main file here
423:50 - okay
423:54 - and so um here we'd want to specify our
423:59 - aws vpc
424:01 - i wonder if there's like a way we could
424:02 - just select it by default so
424:05 - what i'm going to do here is just make a
424:06 - new tab
424:09 - there is vpc data source
424:11 - select defaults in region
424:14 - maybe there's a good example for us
424:25 - data aws vpc
424:29 - i was just hoping there was something we
424:30 - could grab in two seconds
424:37 - there is not i don't i don't feel like
424:39 - fiddling around with filters to figure
424:40 - it out so what we'll do is we'll just
424:42 - assume that we have to provide that as a
424:43 - variable so we'll just say var
424:46 - vpc id
424:49 - okay and then in our
424:54 - variables here we'll just do variable
424:58 - we have to spell it right though
425:00 - vpc id
425:05 - type
425:06 - string
425:10 - and so we can just close our versions
425:11 - here that's fine
425:15 - so that's set
425:17 - um this has a security group which is
425:19 - totally fine
425:22 - that's hard coded to our ip address so
425:25 - we might want to provide our own ip
425:27 - address
425:30 - my ip
425:34 - okay
425:36 - and so
425:43 - with cider
425:45 - okay so
425:50 - provide
425:52 - your ip eg
425:56 - i might just go grab mine really quickly
425:58 - here what's my ip
426:06 - 32.
426:10 - it's probably some built-in functions we
426:12 - could use but
426:14 - oh well
426:16 - my ip right
426:25 - um
426:27 - that's fine
426:30 - we have our deployer key
426:34 - um we only need this if we want to
426:38 - log in but i i suppose we could do that
426:40 - as well so we could just go here and say
426:44 - variable
426:45 - public key
426:49 - type equal string
426:58 - var
427:00 - public key
427:02 - uh we will need this user data file so i
427:05 - will have to go back to
427:07 - our tutorial that we did this in so
427:09 - [Music]
427:11 - this would have been for
427:13 - [Music]
427:14 - remote exact no cloudinet okay and then
427:17 - we'll just go ahead
427:19 - and grab the contents of this file
427:22 - and we will go ahead and create this in
427:24 - here
427:25 - userdata.yaml
427:31 - we will paste the contents
427:34 - okay
427:36 - so that is good
427:38 - um we probably would want to dynamically
427:40 - select the data source for the ami we
427:43 - have done this multiple times over
427:46 - the last time we did it
427:49 - uh did we do this for alias
427:55 - yeah we did so we'll grab it from here
427:58 - and we will go over
428:01 - back to the data source here um
428:05 - kind of getting a little bit mixed up
428:07 - here
428:08 - so just close some of these other files
428:12 - so we will want
428:16 - this here and so i'm just going to say
428:19 - my server i notice like anton likes to
428:21 - do this which is i guess really good if
428:23 - you just have one of everything
428:25 - i think that's a pretty good idea i
428:27 - don't think i grabbed the right thing
428:28 - here because that is not
428:31 - this is just another server we already
428:32 - have that
428:34 - so i'm going to go back over to
428:38 - that other project there under
428:42 - what do we say it was under alias
428:45 - main tf
428:47 - yeah it's right here i just didn't go up
428:49 - a bit that was my problem
428:51 - so we'll copy that
428:55 - and we'll paste that in there we'll just
428:57 - go up a bit and we'll just say
429:00 - amazon linux 2.
429:03 - we will scroll on down here
429:05 - and we will just make sure that we get
429:07 - this correctly
429:09 - i don't think we need interpolation
429:11 - again but i don't feel like updating
429:13 - this we'll just keep it the same
429:15 - and we'll go over here and we'll just
429:17 - say amazon linux 2.
429:19 - you might want to
429:20 - pass along the instance type so say var
429:23 - instance type
429:26 - put the oops
429:28 - double quotation there on the end
429:32 - um we'll go to variable
429:37 - and we will say instance type
429:40 - we'll just default that to t2 micro
429:47 - okay
429:52 - um
429:55 - this is a real file here
429:57 - deployer key instance type this is all
430:00 - fine this is all fine
430:03 - um we have this file here
430:06 - this is old
430:08 - so we can go ahead and just remove that
430:16 - um we want cloud in it yeah cloud and
430:19 - it's still happening that was just an
430:20 - additional thing there
430:22 - maybe they can name their server so we
430:24 - can just say like
430:25 - var
430:26 - server name
430:47 - okay i think i'm pretty happy with that
430:53 - could have spelling mistakes i don't
430:54 - know but um that seems all fine to me so
430:56 - what i'm gonna do
430:57 - is go back to my main file here
431:00 - and i'm going to do a terraform init
431:04 - i just wonder if i have to
431:05 - apply the provider looks like i don't
431:07 - have to i think it's pulling it from the
431:09 - the sub module there
431:11 - yeah it is okay that's great
431:20 - and it should complain on terraform plan
431:21 - if we don't provide the values in here
431:23 - so if we go to our variables
431:28 - we can go here
431:30 - and i'm pretty sure that anton has a um
431:33 - i'll probably cover this in the course
431:34 - but i think he has like a way of
431:36 - generating out his documentation
431:38 - um
431:40 - which is something we might want to look
431:42 - at at some point
431:44 - but uh we know that we're going to need
431:46 - some of these keys here or these values
431:48 - here so i'm going to go to my main
431:51 - over here
431:52 - i'm just going to go ahead and paste
431:54 - that in
431:55 - so we have server name whoops
432:02 - it's a bit of a mess
432:05 - try that one more time
432:07 - so we have server name we know we want
432:08 - to set that
432:14 - we want our t2 micro here as instance
432:16 - type
432:21 - okay
432:23 - we have our public key here
432:31 - we'll figure that out in a moment
432:37 - we
432:38 - have the
432:40 - ip address
432:47 - and i'm just going to go ahead and grab
432:48 - mine there because we already have it
432:50 - it's going to save me some time
432:56 - let me go grab that to ssh key so i can
432:59 - save myself some time there so we have
433:01 - ssh
433:03 - um
433:05 - terraform
433:09 - oh it's root right
433:14 - for this anyway
433:16 - terraform
433:20 - i guess i actually just want to cat it
433:22 - so we'll do that root
433:23 - dot ssh
433:25 - terraform here dot pub
433:29 - and we will go ahead and grab the
433:31 - contents there
433:32 - copy
433:34 - i'm just going to paste it in like that
433:38 - make sure this the end is the same there
433:40 - that is all good
433:42 - um
433:44 - we just did this so that's fine
433:48 - vpc id
433:55 - just make sure you are in the correct
433:57 - region but first we're going to switch
433:58 - over to vpc because right now we're in
434:00 - global region which is not going to help
434:01 - us that much
434:02 - i want to be in north virginia so i'm
434:04 - going to go over here
434:06 - we'll go to our vpc
434:09 - we'll go ahead and grab that
434:19 - something i don't know is like how would
434:21 - i override the region i just assume i
434:24 - can just specify that
434:25 - it would know so right now this is all
434:27 - hard coded for uh usc 1 so
434:32 - i do specify that up here
434:34 - to the provider which region is so i
434:36 - think that's fine
434:38 - so we will clear that out
434:42 - and i think that's
434:44 - what we need
434:47 - okay
434:48 - so
434:49 - if this all works um then we can put
434:51 - that in our documentation so i'll do a
434:52 - terraform plan here
435:01 - so it says to work with apache module
435:03 - data amazon linux 2 it has to be west
435:06 - okay so i just forgot to remove
435:08 - something in here
435:10 - which is probably like there's a
435:11 - provider or something in here
435:16 - west so we'll just take that out there
435:19 - okay
435:20 - hit up
435:25 - and
435:27 - invalid value for the path parameter no
435:29 - file exists at user data this function
435:32 - works with files that are distributed as
435:34 - part of the configuration source code
435:37 - so this file will be created by a
435:39 - resource
435:40 - uh you must instead obtain the result
435:42 - from an attribute of that resource okay
435:45 - so
435:47 - doesn't like the way i'm specifying this
435:49 - i'm not sure what i'm supposed to do
435:51 - here so i'll come back here in a moment
435:52 - okay
435:53 - all right so just thinking about it for
435:54 - a moment i bet i have to use some
435:56 - built-in functions to do this so we
435:58 - probably could get the absolute path
435:59 - because under the file system functions
436:02 - they definitely have a function like
436:03 - this and see this is calling path dot
436:05 - root
436:06 - um but we have to really figure out what
436:09 - it is that we want to use now we check
436:11 - this in our named uh named value so
436:14 - maybe we can find that in our
436:16 - slides here if we go named
436:20 - values if we just find that here yeah so
436:23 - for a module
436:25 - um there's these here right so file
436:27 - system and workspace info path of the
436:28 - module where the expression is placed
436:30 - path of the root module of the
436:32 - configuration so i think we want
436:34 - path.module
436:36 - okay
436:37 - and so i think if we were to do like a b
436:40 - absolute path
436:42 - and then we were to do
436:44 - path.module again i don't know i'm not
436:46 - publishing these on a regular basis but
436:48 - this is my guess
436:49 - and probably what we could do is do
436:51 - interpolation
436:54 - and i don't know if this is proper but
436:56 - i'm going to do it this way because
436:57 - sometimes like file systems don't use
436:58 - like windows will use backslash so i
437:00 - don't know if we're allowed to do that
437:02 - like this
437:02 - and how that will work
437:04 - but i'm going to do it anyway okay
437:06 - and so we don't need file here
437:10 - just yet
437:11 - actually any interpolation here we're
437:12 - just going to take that out
437:14 - and
437:14 - [Music]
437:17 - uh
437:18 - we don't need
437:21 - yeah that makes sense
437:23 - and
437:26 - so we do file like that
437:28 - so let's see if that works
437:30 - okay if that doesn't work i'm gonna have
437:31 - to do some digging okay
437:34 - fingers crossed
437:40 - wow okay that works so
437:43 - i guess we'll know once we provisioned
437:44 - it so what we'll do now
437:47 - and i want the outputs in the main
437:49 - module here so we're going to grab those
437:52 - and we learned how to do that in the
437:53 - outputs
437:55 - section there so we're going to go back
437:58 - and i'm just going to see how i did that
438:01 - i'm a large
438:02 - proponent of like always using your old
438:04 - code as you can tell
438:07 - so
438:09 - we'll go up here
438:11 - paste that in like
438:12 - that this is apache
438:16 - so we'll just say apache here
438:20 - and
438:22 - you know hopefully that works as
438:23 - expected so we'll do
438:24 - terraform apply auto approve
438:31 - i'd be pretty pumped if that just worked
438:33 - first time doing that
438:35 - path there
438:37 - because that was definitely a big guess
438:39 - on my part
438:46 - seems to be creating no problem
438:51 - okay well i'll see you here in a bit and
438:52 - then we'll just verify if the server
438:54 - works okay
438:56 - all right so that is finished
438:57 - provisioning i don't think it's past the
438:58 - initializations but you know sometimes
439:00 - it does work even if we don't do that so
439:02 - what i can do is just checkbox this here
439:04 - whoops and we'll just open that address
439:07 - in a new tab and see if we get that page
439:09 - not sure why it's not filling in the ip
439:11 - address it's kind of annoying
439:14 - but we'll go here and paste that in
439:15 - because it's trying to hit the https
439:17 - and so yeah there you go so it looks
439:19 - like our module works
439:21 - and that means that we can just wrap up
439:23 - some of the documentation here and then
439:25 - we can
439:26 - go ahead and see how we can publish it
439:28 - on the terraform registry so
439:31 - what i want to do is just update my
439:32 - documentation here
439:35 - and so
439:36 - we will go back to our readme
439:38 - not this readme the actual
439:41 - readme for
439:43 - this here
439:44 - and we will paste in our hcl and we'll
439:46 - just clear up some of our values so um
439:52 - own ip address
439:56 - right and then we'll just clear that out
439:58 - and say like zero zero zero zero zero
439:59 - zero
440:01 - and then here you know it's the same
440:02 - thing it's just like
440:13 - okay
440:15 - so nothing super complicated here
440:18 - um and so
440:20 - pretty much this is ready to move on to
440:22 - the publishing thing so we'll make that
440:24 - a separate little follow along here uh
440:26 - but this is pretty much done here okay
440:28 - [Music]
440:32 - all right so we're gonna go ahead and
440:33 - start publishing our
440:36 - um module here to the terraform registry
440:39 - and by the way if you forgot to and i
440:41 - might not have told you but you need to
440:42 - go and
440:44 - destroy that previous instance let me
440:46 - just do terraform apply auto approve
440:49 - destroy
440:52 - okay
440:54 - and what we need to do is make our way
440:57 - over to github
440:58 - and we're going to have to create
440:59 - ourselves a new repository here
441:03 - so we'll go here and i'm going to create
441:05 - myself a new repository i'm going to put
441:07 - it under exam pro co and we'll and we're
441:10 - going to name it exactly what it is so
441:11 - terraform aws
441:14 - apache example i think that's what we
441:16 - called it
441:17 - probably have to spell that right though
441:25 - and if i look here on the left hand side
441:28 - terraform aws apache example okay
441:32 - and we're going to set that as public
441:35 - and
441:38 - we're going to go ahead and say create
441:39 - repository
441:43 - and we're going to go ahead and
441:44 - initialize that so
441:46 - just waiting for the server to finish
441:48 - the string there that's all good
441:50 - and so what we'll do is cd into the
441:52 - subdirectory here
441:55 - and we'll go get a
441:56 - net and one thing i want to do is
441:59 - actually go check out what um
442:02 - terraform
442:04 - module vpc github
442:08 - doesn't matter which one i just want to
442:09 - see what he put in his dot get ignore
442:11 - file so i can figure that out as well
442:14 - and i'm just going to copy that because
442:16 - i bet it's good
442:17 - okay
442:19 - so say new file here we'll say dot
442:22 - get ignore
442:25 - get
442:26 - ignore here
442:28 - and paste that contents
442:32 - okay
442:35 - and i'm just going to click back here
442:36 - and see if there's anything else i'm
442:38 - missing doesn't seem like it
442:40 - and what we are going to do here whoops
442:43 - going to go get
442:45 - add all
442:47 - we go back to our github instructions
442:50 - here if i can find it
442:52 - and we're just going to go down the list
442:54 - so we'll copy that in
442:57 - okay
442:58 - and then we'll make our first commit
443:03 - and we'll create our main branch
443:09 - and we'll paste that in there
443:12 - create our origin
443:15 - okay so that's set up for main tracking
443:19 - and so if we refresh this
443:21 - it is now set up there the only thing
443:23 - that's not showing up is our
443:25 - highlighting which i'm a bit surprised i
443:27 - think it's because i didn't name this
443:28 - reamy.md so we'll just rename that here
443:31 - to
443:32 - dot md
443:34 - we'll say get at all
443:36 - get
443:37 - commit m
443:39 - fix readme file type
443:43 - okay
443:44 - get push
443:47 - and we'll flip back here
443:51 - and there it is some crazy indentation
443:54 - there i'm not sure why maybe that's
443:56 - what's happening on mine
443:57 - i'm going to go into the main
444:00 - order to the readme here
444:02 - is it really that crazy like it's that
444:04 - level of indentation
444:06 - it should shouldn't be
444:10 - okay well i mean it's not a big deal
444:11 - it's just aesthetic
444:13 - you might want to update the description
444:15 - here so this is um
444:20 - well we have a little spelling mistake
444:21 - there too
444:23 - i'm going to leave it in there just
444:24 - because i know like how much spelling
444:26 - mistakes bother people and so that's
444:28 - going to give somebody an opportunity to
444:29 - uh you know interact with my uh repo so
444:32 - i'll just leave it in there that's like
444:33 - my personal little touch
444:35 - so
444:36 - uh now that that's all set up um what we
444:39 - want to do is actually just publish it
444:40 - so
444:41 - we're gonna go ahead over to the
444:43 - terraform registry
444:48 - and click on here
444:51 - and i want to just go ahead and sign in
444:54 - and sign in with github
444:57 - and i guess we're granting to everything
444:59 - here because it doesn't seem like we
445:00 - have any other option to say
445:02 - just a few there if there is i'm i'm not
445:04 - being smart about it okay
445:07 - and i need my password for github so i'm
445:10 - just going to go ahead and grab that
445:12 - off screen here
445:17 - i'm just getting it from my um
445:19 - provider
445:22 - i like my password thing
445:28 - and i'm having a really hard time
445:29 - finding it right now there it is found
445:30 - it okay
445:33 - so we'll just paste that on in there
445:34 - we'll hit confirm
445:36 - and so
445:40 - what we want to do here is go and hit
445:42 - publish a module
445:46 - and we're going to go select the repos
445:48 - that already kind of autofilled and we
445:49 - are going to agree to the terms of use
445:51 - we probably should read it right
445:54 - i agree that i won't do anything bad
445:57 - okay
445:58 - that was me reading the whole thing i'm
446:00 - a speed reader we'll go ahead and
446:02 - publish no release tags found that are
446:04 - in the valve format please ensure the
446:06 - repository has at least one tag
446:08 - formatted v version where version is
446:10 - semantic version
446:12 - that's fair so what we're going to do
446:14 - just to
446:15 - see how that is we're going to go
446:16 - terraform modules
446:19 - again it doesn't matter github
446:23 - and we're just going to take a look at
446:24 - uh one of the repositories here
446:27 - i'm just wondering if it's
446:29 - how yeah so he puts the v in front of it
446:31 - i really don't like the v
446:33 - and i think that we don't have to it
446:34 - says yeah v or version so
446:37 - i'm going to i'm going to do the
446:39 - opposite of what anton's doing and i'm
446:41 - going to not have the in mind
446:43 - okay
446:45 - so
446:47 - what we'll do here is go over to the 110
446:49 - modules and i'm going to go get tag
446:52 - 1.0.0
446:55 - um
446:57 - oh sorry we've got to go into the
447:00 - subdirectory there and we'll again do
447:02 - that
447:04 - probably still have that other one open
447:05 - there i don't know why i have two now
447:08 - i'm gonna just close this redundant one
447:10 - i don't need to
447:12 - and we'll do git tag
447:15 - push
447:19 - or it's get push tags
447:21 - i should know this i do this all the
447:22 - time there we go so our version has been
447:25 - pushed and so now
447:27 - i'm going to try this again and hit
447:28 - refresh
447:33 - click on that publish the module
447:36 - give it a moment
447:38 - and there we go i'm in so
447:40 - yeah um
447:43 - there it is
447:45 - cool eh
447:47 - and that's all there really is to it uh
447:49 - you can see that i've had less than 100
447:51 - people provision this so
447:52 - i guess i have some work to do to
447:54 - promote this but you know if you want to
447:56 - provision it and give the project a star
447:58 - and i become
447:59 - uh super famous here i wouldn't mind it
448:02 - um but yeah you'll notice like i i did
448:04 - the aws there and it picked it up and so
448:06 - it shows the aws logo
448:09 - um but yeah so we're all done here uh i
448:11 - don't think there's any infrastructure
448:12 - for us to tear down so yeah that was fun
448:18 - [Music]
448:19 - let's talk about core terraform
448:21 - workflows and these have three steps
448:23 - write plan and apply so write plan and
448:25 - apply we saw this kind of in the
448:28 - terraform
448:29 - life cycle
448:31 - and the idea here is that
448:33 - you know it's just to try to describe
448:35 - what it's going to be for your team and
448:37 - requirements as you grow
448:39 - and you're utilizing this workflow so if
448:41 - you're talking about individual
448:42 - practitioners so a single person a team
448:45 - using oss so they're not using they're
448:47 - using open source software so using
448:49 - terraform but they're not using the
448:50 - terraform cloud platform and then what
448:52 - it would be like if they're using the
448:53 - terraform cloud platform in terms of
448:56 - this right plan apply you're going to
448:58 - see these examples don't perfectly fit
449:00 - here i am just presenting
449:02 - a summarized version of the
449:05 - documentation and the reason why is
449:07 - because on the exam this is one of
449:11 - the subdomains that you need to know
449:13 - so i'm not saying that i think these are
449:15 - perfectly presented but i think that i
449:18 - have to cover them because they are on
449:19 - the exam and i you do learn something
449:21 - here so we will go through them okay
449:27 - [Music]
449:28 - so let's take a look at a terraform or
449:31 - team workflow for a single person an
449:33 - individual practitioner looking at the
449:36 - right step first so you're going to be
449:37 - writing your terraform configuration in
449:39 - your editor of choice on your computer
449:42 - but the thing is you'll be storing your
449:44 - terraform code in something like github
449:46 - even if you are an individual user
449:48 - you're going to be putting in git or
449:49 - github or some kind of version control
449:51 - system you're going to be repeatedly
449:53 - running terraform plan or even possibly
449:55 - terraform validate to find syntax errors
449:58 - and the great thing about this is that
449:59 - you get this tight feedback loop between
450:01 - editing the code and running your test
450:03 - commands because it's all on your local
450:04 - machine we're not sending things off to
450:06 - build servers or
450:08 - other services so it's very fast and
450:10 - easy
450:11 - talking about the plan stage so when the
450:13 - developer is confident with their
450:15 - workflow in the right step they commit
450:17 - their code to their local repository
450:20 - this is the stage where it's a local
450:22 - commit it's not a remote commit
450:24 - they may be only using a single branch
450:26 - so just probably working in maine or if
450:28 - you're still using the old syntax master
450:30 - branch uh once their commit is written
450:33 - they'll proceed to apply that'll bring
450:35 - us to the apply stage so they will run
450:37 - terraform apply this is on your local
450:39 - machine it's not part of any other
450:41 - process you're just running terraform
450:42 - apply and they'll be prompted to review
450:44 - their plan after the review the final
450:47 - review they will approve the changes and
450:49 - await provisioning after a successful
450:51 - provision they will push their local
450:53 - commits to their remote repository so
450:55 - this is where you will then finally
450:57 - commit your code
450:59 - so there you go
451:00 - [Music]
451:05 - so we looked at what it would be like if
451:06 - we had a single person working with
451:08 - terraform let's talk about if it's a
451:10 - team and they're not using terraform
451:11 - cloud they're just doing it uh the
451:13 - old-fashioned way okay so each team
451:15 - member writes code locally on their
451:16 - machine and their editor of choice as
451:18 - per usual a team member will store their
451:21 - code in a branch in their code
451:23 - repository whether it's a
451:25 - per feature per user
451:27 - per whatever is up to you
451:29 - branches help avoid conflicts while a
451:31 - member is working on their code but
451:34 - branches will allow an opportunity to
451:36 - resolve conflicts during emerge into
451:38 - maine it's no different than working
451:40 - with you know code because that's what
451:41 - it is a terraform plan can be used as a
451:44 - quick feedback loop for small teams so
451:46 - we still have that option but as your
451:48 - team grows larger a concern over
451:50 - sensitive credentials becomes a concern
451:53 - and so this is where you may need to
451:54 - introduce a ci cd process
451:57 - so that it's it's going to be in control
452:00 - of the credential so the idea is that
452:02 - you don't run plan you just push to your
452:03 - branch and it could run it or it only
452:06 - happens on pull requests that's up to
452:08 - you know your team and how they decide
452:10 - to set it up when a branch is ready to
452:12 - be incorporated on pull requests an
452:13 - execution plan can be generated
452:16 - i guess when we say execution plan this
452:18 - could be a speculative plan okay so it's
452:20 - not something we're going to run it's
452:21 - just something we're going to review and
452:22 - displayed within the pull request for
452:24 - review to apply the changes the merges
452:27 - need to be approved and merged which
452:29 - will kick off a code build server that
452:31 - will run terraform apply that's the
452:32 - apply stage there so this is all good
452:35 - but
452:36 - what we need to kind of highlight is all
452:38 - the work and labor that goes into
452:40 - setting up your own team if you're going
452:41 - to do it all
452:42 - from scratch without terraform cloud so
452:44 - the devops team has to set up and
452:46 - maintain their own ci cd pipeline they
452:48 - have to figure out how to store the
452:49 - state files whether they're going to be
452:52 - in a standard backend remote state or
452:54 - they're going to encrypt it and put them
452:56 - into the code repository which is not
452:58 - recommended they are limited in their
453:00 - access controls so they can't do
453:02 - granular actions to say okay i only want
453:04 - to allow this person to destroy and this
453:06 - person to apply it's not like that with
453:09 - git repos
453:11 - they have to figure out a way to safely
453:12 - store and inject secrets into their
453:14 - build server's run time
453:16 - and that's not argue arguably it's not
453:18 - very hard depending on the solution that
453:19 - you choose but it is a thing that they
453:21 - have to figure out
453:22 - they might need to manage multiple
453:24 - environments and this can create
453:26 - additional overhead because for each
453:27 - environment you'll have to
453:29 - create another cicd pipeline okay so
453:32 - hopefully that gives you the idea of the
453:34 - effort here and this is going to set us
453:36 - up to say what terraform cloud is going
453:38 - to solve okay
453:39 - [Music]
453:44 - let's take a look at what our team
453:45 - workflow or our terraform workflow will
453:47 - be if we are using terraform cloud so 18
453:50 - will use terraform cloud as a remote
453:51 - back-end of course they're using uh
453:54 - their favorite editor as per usual
453:56 - working on their local machines to write
453:58 - that code the input variables will be
454:00 - stored on tara4 cloud instead of their
454:02 - local machine terraform cloud integrates
454:04 - with your version control system such as
454:06 - git to quickly set up a cicd pipeline a
454:09 - team member writes code to a branch it
454:10 - commits per usual so that doesn't change
454:13 - a pull request is
454:14 - created by a team member and terraform
454:16 - cloud will generate the speculative or
454:18 - execution plan however you want to call
454:19 - it for review in your version control
454:22 - system the member can also review and
454:24 - comment on the plan in terraform cloud
454:27 - after the pull request is merged
454:28 - terraform cloud
454:30 - in the terraform cloud runtime sorry the
454:32 - terraform cloud runtime will perform a
454:34 - terraform apply and a team member can
454:36 - confirm and apply the changes within the
454:38 - terraform cloud uh ui okay so terraform
454:41 - cloud streamlines a lot of the ci cd
454:43 - effort storing it starting at securing
454:45 - sensitive credentials and makes it
454:47 - easier to go back and audit the history
454:49 - of multiple runs so in terms of the exam
454:53 - if and i didn't see any questions on
454:55 - this but i know they exist they're just
454:56 - going to be asking you
454:59 - you know which like they might describe
455:00 - something and say which kind of workflow
455:02 - does this fit and so if you generally
455:04 - know the difference between terraform
455:06 - cloud working with the team
455:08 - open source software without terraform
455:09 - cloud and individual workflow it's not
455:11 - too hard you'll be okay all right
455:17 - hey this is andrew brown from exam pro
455:19 - and we are on to the terraform workflows
455:22 - and so i you know i listed out here
455:23 - individual terraform workflow but i
455:25 - think really what i want to do is just
455:27 - show you how to use
455:30 - the vs
455:31 - the vsc workflow because we've been
455:33 - mostly working with the cli and also
455:36 - just like committing our code in a way
455:37 - that we should be doing it okay
455:39 - so what i'm going to do is
455:42 - i guess start a new project here
455:45 - and i'm just thinking about it here uh
455:47 - we did just create that module and i
455:49 - kind of feel like using that module
455:50 - right away just to kind of get this
455:52 - going so what i'm going to do
455:54 - is create myself a new main file here
455:58 - main.tf
456:01 - and i'm going to go back to the previous
456:03 - project here where we have this i'm
456:04 - going to copy this over
456:06 - and we are going to
456:09 - paste that on in here
456:12 - and
456:14 - so this has
456:15 - my credentials here there's some
456:17 - sensitive stuff that i probably wouldn't
456:19 - want to be passing in here so what i'm
456:21 - going to do
456:22 - is make myself a
456:24 - variables
456:27 - dot or sorry not variables terraform dot
456:30 - tfrs
456:33 - and i'm going to just copy the contents
456:35 - here
456:36 - like so
456:38 - and i'm going to paste it on in as such
456:42 - and then what we're going to do is set
456:44 - up a bunch of variables here so we'll
456:46 - have var.vpcid
456:50 - we'll have var
456:52 - and we'll just name them all the same
456:53 - okay
456:56 - we probably could grab that uh that key
456:59 - via um using like the file system but
457:02 - i'm not gonna do that
457:05 - and i'm gonna grab this here
457:10 - oops
457:13 - far.server name okay
457:15 - and we do need to set up our variables
457:18 - so i'm going to make a new file here
457:20 - we'll call this variables
457:22 - uh walt variables.tf would probably be
457:25 - better right
457:28 - and we will go
457:33 - to our modules here
457:35 - and luckily all we've got to do is grab
457:37 - this
457:38 - so we'll grab that
457:40 - and i'm going to go to our new one here
457:46 - am i on the right nope i'm still in
457:47 - modules
457:48 - workflow is good we're going to go ahead
457:50 - and paste that on in
457:52 - i'm just going to remove the defaults
457:54 - okay we want to explicitly set all these
457:58 - okay and so
458:00 - that's all set up and we're going to
458:02 - have to create ourselves a new
458:03 - repository so i'm going to do git whoops
458:09 - get init
458:11 - and i'm going to go ahead and make
458:13 - myself a new repo
458:15 - i'm going to make this a private repo by
458:17 - the way
458:19 - so we will go
458:21 - to github here make a new repo
458:24 - and
458:25 - yeah i'll put it under roman king and
458:27 - this will just be like
458:28 - vsc
458:30 - terraform or
458:33 - version control system
458:35 - i always get that vsc vcs mixed up you
458:38 - can't tell i'm dyslexic and i literally
458:39 - am dyslexic so uh we have that set as
458:42 - private and that's totally fine we're
458:44 - going to create ourselves that
458:45 - repository
458:48 - and we have established that init i
458:50 - think i'm going to go ahead and grab
458:52 - the dot get ignore file that we
458:55 - had there a moment ago with our modules
458:58 - that was in our sub module there because
458:59 - i thought that was pretty good
459:03 - good ignore there so we'll go ahead and
459:04 - grab that
459:07 - and we will create ourselves a new file
459:10 - this will be dot get ignore
459:18 - we'll go paste that on in there
459:24 - and so we just have to go through this
459:26 - whole process so
459:31 - get at all
459:34 - get commit
459:36 - switch over to maine
459:43 - and we will switch over
459:46 - to this i kind of want this menu i'm
459:48 - sure you can move it to the right but i
459:50 - kind of want on the right just so when i
459:51 - click over here i'm not clicking onto a
459:53 - different file
459:55 - and we will go ahead and push this
460:03 - let's refresh this nothing has been
460:05 - pushed yet
460:08 - get remote ads so we add the main
460:16 - did our commit not work here
460:19 - oh you know what i'm i'm in the wrong
460:22 - folder
460:23 - that's fair
460:25 - as always wrong folder andrew okay so
460:28 - we'll do get at all
460:32 - whoop
460:34 - oh well get in it i guess
460:36 - get at all
460:41 - get commits
460:47 - get branch main
460:51 - hit add remote
460:53 - hit push
460:57 - sure we'll set it like that
461:01 - we will make sure that our code is up to
461:03 - date
461:04 - great no read me and that's totally fine
461:07 - um and so what we'll do is make our way
461:09 - over to terraform cloud okay
461:16 - so we'll go over
461:18 - here just gonna close that out we will
461:21 - sign in
461:23 - and i'm gonna just create myself a new
461:25 - workspace we haven't really done
461:26 - anything with this provisioners i can go
461:28 - ahead and delete this we're not even
461:29 - using this anymore let's go ahead and
461:31 - delete that
461:34 - yeah delete terraform cloud
461:38 - put the name in provisioners
461:41 - delete this workspace
461:43 - and we'll go back to our workspaces here
461:45 - we'll create a new one
461:47 - and we're going to choose a version
461:48 - control workflow we're going to go down
461:49 - to github choose github.com
461:52 - authorize it give them everything
461:56 - please disable block up popper
461:58 - okay so we'll go up here
462:00 - done no no no no always
462:03 - always allow here sorry so go to github
462:06 - here
462:07 - authorize terraform cloud
462:10 - this is in my personal account
462:13 - um we only need it for our select
462:15 - repository so what did we call this it
462:18 - was
462:19 - vcs
462:21 - there it is it's a private repo install
462:26 - and there it is
462:30 - i'm going to select it
462:32 - and if i have to do anything there
462:33 - terraform working directory
462:36 - workspaces with no terraform working
462:38 - directory will always trigger runs
462:40 - like i said we'll be doing that
462:43 - the default branch is
462:45 - i'm not sure what it is but i'm going to
462:47 - set it as main
462:50 - uh the branch from which to import new
462:52 - versions this defaults to the value your
462:54 - version control provides by default
462:56 - branch well then it's going to be main
462:57 - anyway so i don't have to change that
463:00 - we don't have any sub modules so we'll
463:01 - go ahead and hit create workspace
463:05 - okay so our workspace is set up
463:08 - um we are going to need to set
463:10 - our variables so we're going to make our
463:13 - way over here
463:15 - and
463:15 - [Music]
463:18 - we're going to go ahead and add this
463:20 - here if there's a way to do like an
463:22 - import i would love to know if like
463:24 - terraform is watching this like
463:25 - hashicorp
463:26 - if there's a way i'd love to know how to
463:27 - just like one import my file there but
463:30 - you probably have to bring it one over
463:32 - at a time it's probably like a security
463:34 - reason for that so go over here into our
463:36 - variables whoops rtfrs
463:40 - and we should probably check to make
463:41 - sure that this works
463:44 - um
463:46 - now i think i'm pretty confident with it
463:47 - so we're just going to copy these over
463:50 - so first we have our vpc id i'm just
463:51 - going to make this a little bit smaller
463:55 - okay so we have vpc id
463:59 - we're going to save that
464:02 - and then we have this ip address
464:07 - i'll just copy this one at a time
464:16 - and we'll add that
464:19 - we need our public key this we will
464:21 - consider i guess sensitive
464:29 - and we will paste that on in there
464:34 - we will specify our t2 micro here
464:41 - that would be instance type
464:46 - we are going to need our server name
464:48 - here
464:55 - okay and we do need to set our abs
464:57 - environment variables here so i'm going
464:59 - to go over
465:01 - to aws provider terraform
465:06 - i can never ever
465:07 - ever remember
465:10 - those environment variables even though
465:11 - i work with aws the most and super
465:13 - frequently i can never remember them
465:17 - so we go here to this to documentation
465:21 - we're going to scroll on down
465:24 - and
465:25 - there they are so we're going to grab
465:27 - that one
465:30 - and uh did i close nope i didn't okay
465:33 - good so we have that key
465:36 - and i'm just going to cap my aws
465:39 - credentials again i'm going to get rid
465:40 - of this so there's no chance that this
465:42 - is going to get abused at any time here
465:49 - and we need a secret here
466:01 - fun fun fun fun fun
466:04 - and i should be making these sensitive
466:08 - because they are super sensitive
466:15 - and we'll add a variable here
466:19 - and this one will be our defaults
466:28 - us east one
466:31 - we will save that and so this is all set
466:33 - up
466:37 - okay and so it should trigger whenever
466:39 - there is some kind of change to the
466:41 - repository now i don't know if it's
466:42 - going to change every time so like if i
466:44 - make a change or i add a readme file i
466:46 - don't know if that's going to trigger it
466:48 - and so i think that should be
466:49 - interesting to find out okay
466:52 - so
466:54 - your configuration has been uploaded
466:56 - next you probably want to configure
466:57 - variables we just did that
467:00 - what's cue plans
467:02 - oh okay like if we want to run something
467:07 - and so triggered a few seconds ago i'm
467:09 - not sure
467:11 - what it's talking about i didn't do
467:12 - anything
467:13 - unreadable module directory unable to
467:15 - evaluate the directory sim link at
467:17 - terraform oh that's right because we've
467:19 - published it we actually never tried our
467:21 - module
467:22 - after we published it and we need to
467:24 - refer to it and that's a great
467:25 - opportunity for us to update this file
467:28 - here
467:30 - so
467:32 - we want to
467:33 - reference it from
467:36 - terraform so we'll go registry terraform
467:39 - and we're going to find our sweet sweet
467:41 - module can i go to my profile to show my
467:43 - module under there
467:45 - i've published a module what are they
467:46 - talking about
467:48 - i've definitely published a module um so
467:51 - we'll go
467:52 - to modules here
467:54 - and we're going to go over to
467:56 - [Music]
467:57 - what we call it terraform aws
468:00 - apache
468:04 - oh it's not going to show up because
468:05 - they don't show uh show them under there
468:07 - eh
468:08 - oh well it's under modules here aws
468:12 - no i don't like that
468:15 - okay so
468:16 - that's a bit tricky but i think we can
468:18 - find it so
468:19 - this one here is terraform aws module so
468:22 - we could probably just do terraform
468:25 - apache example
468:29 - what
468:30 - come on my module's published
468:33 - they told me it was published
468:35 - right
468:37 - i'm not crazy am i
468:39 - we'll do it one more time
468:42 - yeah i was already published
468:44 - well there it is okay so we found it was
468:46 - a little bit tricky and so
468:49 - we just got to grab
468:50 - grab this here
469:00 - and i'm just going to go
469:02 - and swap out the source and i guess we
469:04 - should set the version
469:07 - and we will do a terraform init
469:17 - oh but something we haven't done is set
469:18 - up our our workspace here so that's
469:20 - another thing we're going to have to do
469:22 - um
469:24 - we don't have any instructions i don't
469:26 - think in our cli or sorry in our
469:29 - overview here no
469:30 - so we're just going to have to go back
469:32 - to our getting started one where we've
469:33 - actually used terraform cloud and use
469:36 - that as an example so we'll go over to
469:38 - our
469:39 - what is under providers now it's under
469:41 - main
469:42 - here it is and so i'm going to go ahead
469:44 - and grab this
469:45 - here
469:48 - and we'll go back here and we'll paste
469:50 - it in at the top
469:51 - and this one is going to be
469:53 - vcs
469:56 - what did we call this terraform
470:01 - terraform
470:04 - and
470:06 - i feel like i'm missing a curly brace
470:07 - here yeah i am
470:09 - and so what we're going to do again is
470:11 - do terraforming nets
470:18 - and then we're going to go
470:21 - terraform plan
470:24 - because that's what you would do you'd
470:26 - say okay does this plan look good before
470:28 - i push it out right
470:36 - running the plan and the remote back end
470:38 - output will stream here we'll stop
470:39 - streaming the log so
470:41 - i guess we can
470:42 - see the run happening
470:52 - not seeing the run here
470:54 - but it was streaming it out it said so
470:56 - if i went to
470:57 - [Music]
471:00 - where does that run here
471:04 - copy that
471:09 - and we'll grab it here
471:12 - so here we can see the run
471:16 - this was started as a speculative plan
471:18 - so it cannot be applied and that makes
471:19 - sense right
471:22 - uh if i go back to my runs here does it
471:23 - show up so it doesn't show under here
471:26 - but we can see it in isolate i don't
471:27 - know why they do that i guess it's
471:28 - because it's not a real run it's just
471:30 - kind of like a speculative one
471:32 - so i'm not really sure about that why
471:35 - they would do it like that but that's
471:36 - what it is
471:38 - um
471:39 - so
471:41 - i think this is all good to go like we
471:43 - just we look at over like yeah this is
471:44 - great right and so now what we'll do is
471:47 - we'll go get
471:52 - status
471:55 - we'll say get at all
471:58 - git commit hyphen m
472:00 - and this is going to be
472:02 - um
472:05 - make it work you know because that's
472:07 - what we want to do we want to make it
472:08 - work and we'll do a git push
472:10 - and so what that should do
472:12 - oh i just pushed to the main branch you
472:14 - know what like that's not what i should
472:16 - have done i should have made a pull
472:18 - request and then merged it in but the
472:19 - point is it doesn't matter if you push
472:21 - anything
472:22 - uh there it should deploy it and wow i
472:23 - really spelt work wrong w-o-w-r-k
472:28 - terrible
472:35 - that's awful
472:36 - uh so we'll give that a moment to deploy
472:42 - it's now in plan so we can close in here
472:43 - and watch it if we want
472:49 - oh it's a pending so it's waiting for us
472:52 - to accept it there eh
472:55 - wow this is actually really nice i have
472:57 - never seen this before in the ui so i
473:00 - guess when it does that you can go here
473:01 - and this is a lot easier way to navigate
473:04 - i think that if i knew this earlier i
473:05 - would never ever ever
473:07 - output here because it just sucks there
473:09 - and so if i'm happy with it i can
473:11 - confirm and apply i can add a comment
473:14 - looks great
473:18 - and since we actually haven't deployed
473:19 - anything yet i actually do want to go
473:20 - ahead and confirm it i just have to
473:22 - write a message so
473:23 - i will
473:25 - accept
473:27 - everything that goes wrong here
473:31 - so that's pretty cool
473:35 - and so we're going to watch that run
473:40 - and i'll see you back here when the
473:42 - server is provisioned okay
473:44 - all right so after a little wait here it
473:45 - looks like our server is provisioned and
473:47 - you know it shows us that we have our
473:49 - resources have been created there
473:51 - and we can see our outputs and so if we
473:53 - go over to aws we'll just see if our
473:55 - server is running and it absolutely is
473:58 - and so now what i want to do is actually
474:00 - do a branch and then push that branch
474:03 - and do a pull request because as far as
474:04 - i understand it's going to output some
474:06 - stuff for us in our
474:08 - pr
474:09 - and that's what i want to see so what
474:11 - i'm going to do is make a new branch
474:13 - here we're going to go get checkout
474:14 - hyphen b and we'll just say um
474:18 - add tags
474:21 - and we're going to go
474:22 - into here
474:25 - and
474:26 - i want to go down
474:29 - to our module
474:32 - so our modules here
474:36 - and i don't think we're going to be able
474:39 - to modify
474:40 - the server directly and add tags to it
474:44 - so i guess what i'll have to do is just
474:45 - add another resource so i probably
474:48 - shouldn't have called it tags it's kind
474:50 - of like too late now i actually no it's
474:52 - not too late i'm going to move back and
474:54 - fix that so we'll go back here go check
474:57 - out main we'll say get checkout hyphen b
474:59 - and i'm going to say s3 bucket
475:02 - we'll do that instead
475:04 - and so we will add our s3 bucket so this
475:06 - will be resource
475:08 - abs s3 bucket
475:11 - and we just need a name here so we'll
475:13 - give it a name
475:14 - and uh we can randomize out the name
475:17 - because there are functions like random
475:19 - with um
475:21 - with what you may call it here so i'm
475:23 - going to go built-in functions i'm just
475:25 - googling this really quickly here
475:27 - terraform random
475:32 - you know even if it wasn't that we could
475:33 - probably just use a uuid as well
475:36 - that'd probably work pretty well
475:38 - yeah let's do that
475:41 - so i'm gonna go here and
475:44 - curly's here and we'll just say um
475:49 - vsc
475:51 - vsc vcs you can't imagine how many times
475:54 - i made that mistake when i made the
475:55 - lecture content way too many times so
475:58 - what we'll do is do a terraform plan
476:00 - just to see if it's happy with that
476:04 - we actually have to give it a name
476:06 - say bucket
476:19 - and so it's going to just run that plan
476:20 - there
476:24 - and we'll just wait here
476:32 - um an argument name
476:34 - named name is not expected here
476:37 - okay so maybe it's called like bucket
476:40 - name or something
476:44 - it's just called bucket
476:46 - terraform
476:49 - this is just called bucket
476:51 - it's just bucket
476:53 - my bad
476:55 - bucket
476:59 - i guess the only problem with using the
477:00 - uid there is every time we run it it
477:02 - will change
477:04 - so we probably shouldn't have called it
477:07 - uuid
477:09 - like that
477:12 - that's probably a bad idea now that i
477:14 - think about it
477:27 - yeah so i think what i'll do instead
477:30 - of doing that
477:34 - is i'm just going to set a new variable
477:35 - in here
477:37 - say like
477:39 - bucket
477:41 - and i'm just going to default it to
477:43 - something like
477:50 - and we'll go back over here
477:55 - and i'm just going to say var bucket
477:59 - and
478:00 - i'm going to do another plan here just
478:01 - make sure everything is okay
478:32 - great and so that plan is all good and
478:34 - so now what we're going to do is
478:37 - go get add git commit m
478:40 - add bucket
478:43 - we're going to do git push it's going to
478:44 - ask us to push up stream so we're going
478:46 - to copy that paste that in there
478:48 - hit enter and what we'll do is make our
478:50 - way over to our browser
478:52 - we're going to go over to
478:54 - github here
478:56 - and i'm not going to bug
478:58 - hashicorp today i'd like to bug them
479:01 - quite a bit
479:02 - and we'll go to github and we'll find
479:05 - our new project what did i call this
479:07 - vcs right
479:09 - vcs
479:11 - terraform
479:13 - there's a
479:14 - thing here so i'm going to go ahead and
479:17 - create this pull request
479:22 - and it's asking to merge into main
479:26 - and i'm going to go over to
479:28 - terraform and see if it does anything
479:31 - interesting
479:33 - oh we got all our resources there that's
479:35 - pretty nice
479:50 - uh we'll go back over to
479:51 - [Music]
479:54 - here there are no conflicts we can
479:56 - definitely merge and accept this
479:59 - i thought i thought it would
480:01 - generate out
480:03 - a plan here i really thought that it
480:05 - would do that
480:06 - so i'm just wondering if maybe i don't
480:08 - have it configured how i think i do
480:11 - um don't trigger speculative plans for
480:14 - pull requests to this repository
480:17 - for pull request of the repository
480:19 - that's that's what i wanted i want to
480:20 - turn that on so we'll update that
480:23 - so now my question is if i go back to my
480:24 - pull request is it going to generate one
480:26 - i don't see one
480:27 - maybe it's from then on out so what i'm
480:29 - going to do is get rid of this
480:33 - pull request
480:37 - close this pull request
480:40 - and i'm going to reopen it maybe that
480:41 - will trigger it
480:46 - ah see here here we go so now i think
480:48 - it's going to create a speculative plan
480:50 - here first
480:55 - so we're just waiting for that to finish
481:13 - great and so uh if we
481:15 - we see that it generates a speculative
481:17 - plan i guess i thought it would output
481:19 - it in here we go show all checks so it's
481:21 - not here
481:22 - but it produced i guess a speculative uh
481:24 - plan
481:27 - somewhere
481:29 - i really thought it would be in line
481:30 - here
481:32 - okay
481:33 - if we go to runs
481:35 - i don't know where those speculative
481:36 - plans go so
481:38 - they're somewhere right i mean it's
481:40 - great that it ran it um i just wish i
481:42 - knew where they were
481:44 - and maybe like it would show us
481:46 - a link to it in there so maybe i can
481:49 - get a link
481:52 - details
481:53 - yeah there it is okay
481:56 - so maybe like someone could click in and
481:57 - just review it and that's what they
481:58 - would do so what we're going to do is go
482:00 - ahead and merge that pull request
482:03 - still using my old emails there but
482:05 - that's fine so we're going to add that
482:06 - bucket
482:08 - and we're going to go back over to
482:10 - [Music]
482:14 - here
482:18 - and we're going to see that's now
482:19 - running there
482:23 - so that's pretty much it for workflows
482:25 - and that pretty much covers
482:27 - like i mean technically we did it as an
482:29 - individual and so you know if i was an
482:30 - individual i would use the the version
482:33 - control system
482:34 - like as opposed to the cli
482:36 - um but this will also be for terraform
482:38 - clouds we're not
482:40 - like covering the the remote one the uh
482:42 - the middle tier there just because it's
482:44 - a lot uh like the um
482:47 - the terraform workflows for teams
482:48 - without cloud because it's just a lot of
482:50 - work
482:51 - um and you know i honestly think that
482:53 - you should use terraform cloud there
482:55 - so you know once this is done we need to
482:57 - kind of pull it down but you know i
482:58 - don't want to get rid of it because we
483:00 - might come back to this particular
483:01 - project
483:03 - and so maybe we can just destroy the
483:05 - resources here
483:09 - so i'm going to go to our settings and
483:10 - just take a look here
483:13 - what enabled the setting allows destroy
483:15 - plans to be created and stuff like that
483:17 - um queueing a destroy plan will will
483:19 - redirect to a new plan
483:21 - and will destroy all the infrastructure
483:23 - managed by terraform is equivalent of
483:24 - running the terraform plan
483:26 - destroy
483:29 - so i think we'll try that once this is
483:31 - done
483:32 - shouldn't take too long here
483:34 - oh maybe we have to accept it in here
483:37 - so i think that's the thing is like if
483:38 - you were to
483:40 - if you were to have pull requests it'd
483:42 - be kind of annoying to have to like
483:44 - double accept this every time so i think
483:45 - this is where you would go to general
483:47 - and you'd have auto apply turned on
483:49 - right and i'll flip that on because
483:51 - that's gonna get annoying
483:53 - if i'm gonna have to keep on doing
483:56 - that okay
483:59 - and so that's applied this will go
484:01 - pretty fast it's already done and so
484:03 - we'll go back over to
484:05 - settings here because i just want to
484:07 - destroy the infrastructure but i don't
484:09 - necessarily want to get rid of the state
484:11 - file or anything else
484:13 - like all the work we put into this so
484:15 - i'm going to say cue a destroy plan
484:17 - and i'm just going to
484:19 - type in the workspace name so this is
484:22 - vcs
484:23 - terraform and i believe this will just
484:26 - tear everything down
484:28 - but we'll leave our workspace in place
484:31 - so give it a moment
484:35 - because i definitely think we're going
484:36 - to come back to this when we're looking
484:38 - at terraform cloud okay
484:44 - so we have four resources we want to uh
484:46 - possibly destroy there
484:48 - and it has auto applies so it's gonna
484:51 - just automatically start doing that
484:52 - we're not even gonna confirm it
484:55 - i wonder if they should make like a
484:57 - feature that should just be auto
484:59 - like auto approved for just apply or
485:02 - you know etc like that that might be
485:04 - something they should might want to
485:05 - offer
485:06 - because in that case i kind of felt like
485:08 - i should have confirmed that because
485:09 - it's not going through the um
485:13 - the version control system where i'm
485:14 - doing a pull request i just
485:17 - happened to be destroying it
485:19 - but anyway that's good for now and i
485:20 - feel like this satisfies it and we'll
485:22 - come back to this
485:24 - the setup okay
485:25 - [Music]
485:29 - all right we're taking a look here at
485:31 - back ends and each terraform
485:32 - configuration can specify a back end
485:34 - which defines where and how operations
485:37 - are performed and where state snapshots
485:39 - are stored so terraform divides their
485:41 - backends into two types we have standard
485:44 - and enhanced first looking at standard
485:46 - this is where you can only store the
485:48 - state
485:49 - and it does not perform terraform
485:51 - operations such as terraform apply so to
485:54 - perform operations you have to use a cli
485:56 - on your local machine and the reason why
485:59 - is that standard back-ends are basically
486:01 - third-party back-ends so a standard back
486:03 - end could be aws s3 and so you know this
486:06 - is a storage service it doesn't have the
486:08 - capabilities of pragmatically triggering
486:10 - things okay
486:12 - when we have when we talk about enhanced
486:14 - back-ends we can store both the state
486:18 - and perform terraform operations so
486:21 - enhanced backends are subdivided further
486:23 - so we have local so files and data are
486:25 - stored on a local machine executing
486:27 - teraform commands and remote so files
486:30 - and data are stored in the cloud so
486:31 - terraform cloud the reason why they can
486:34 - perform terraform operations and when
486:35 - you look at local and remote local is
486:38 - your machine so of course it can execute
486:40 - terraform and then remote is terraform
486:42 - cloud which has its own runtime
486:44 - environment it's basically a build
486:46 - server so it of course
486:48 - can do both those operations and that's
486:50 - how you're going to remember the
486:51 - difference between those two okay
486:53 - [Music]
486:58 - alright so we were just talking about
486:59 - standard and enhanced back-ends that i
487:01 - was saying that standard back-ends are
487:03 - basically third-party providers so it's
487:05 - something other than terraform cloud so
487:08 - let's take a look at what options we
487:09 - have available to us starting with the
487:12 - major cloud service providers so aws has
487:14 - simple storage s3 azure
487:17 - has block storage account notice it says
487:20 - azure rm because that's just the name of
487:23 - what they call it i don't know what the
487:24 - rm stands for resource manager i imagine
487:27 - google cloud storage is an option then
487:29 - we have alibaba we have openstack we
487:32 - have 10 cent and then we have um
487:35 - manta which is part of joynet's cloud
487:37 - storage so
487:39 - i don't think a lot of people are going
487:39 - to remember join that joynet was very
487:41 - popular provider like post or pre 2010
487:46 - so i remember them 10 cent is a asia
487:49 - provider i think they were
487:51 - a texting service they're very popular
487:53 - but they're not the largest provider
487:55 - over in asia alibaba is
487:57 - and of course we have the the three
487:58 - major ones here and then openstack is
488:01 - for uh private cloud okay then on the
488:04 - other side of it when we're looking at
488:05 - more exotic or things that aren't cloud
488:07 - service providers we have
488:09 - artifactory
488:11 - we have hashicorp console etcd postgres
488:15 - database kubernetes secrets and you can
488:17 - also use the acp protocol
488:19 - now notice i have these little locks
488:21 - here that's indicating which have state
488:23 - locking which do not if you don't know
488:25 - what state locking is don't worry we'll
488:26 - talk about it here in a moment
488:28 - would there be a question on the exam
488:30 - saying oh which service you know doesn't
488:33 - have state locking and the answer is no
488:35 - they would never ask that it's to
488:37 - minute but just notice that the only
488:39 - thing that doesn't have state locking is
488:41 - uh artifactory which i'm kind of
488:43 - surprised because it's a universal
488:44 - repository manager
488:46 - and there's the one case like with hp
488:48 - protocol where it's optional so it's not
488:50 - that you can't have it it's just that
488:52 - it's not uh it doesn't necessarily have
488:53 - to be there and in particular some the
488:56 - the state is um or the locking state
488:58 - locking is
489:00 - by another service so for aws it's
489:02 - dynamodb that is doing the state locking
489:04 - and then with alibaba uh alibaba's cloud
489:07 - storage it's table store okay so
489:10 - uh you know there's not much to know
489:11 - here but uh you know it's just kind of
489:12 - interesting if you want to have a
489:14 - different kind of back and maybe you
489:15 - want to use postgresql familiar with it
489:17 - you can actually store it there okay so
489:19 - let's take a look at what it would look
489:20 - like if we were to use a standard back
489:22 - end so here's an example for aws
489:25 - since i think s3 is very popular
489:27 - so if you were to set up your back end
489:29 - so here i have a bucket
489:31 - here and i've
489:33 - i have to name the state file so i call
489:34 - it state file and then i give it the
489:36 - region and there it is so the backup of
489:38 - a state file will reside on your local
489:40 - machine so the backup's not going to be
489:42 - an s3 configuring a standard backend
489:44 - does not require terraform cloud account
489:46 - or workspace um
489:48 - because
489:50 - you know it's just it's totally separate
489:51 - from it so that's something i wasn't
489:52 - sure when i was first using was okay can
489:54 - i use a standard backend but i still
489:55 - have to have a terraform account or
489:56 - workspace and the answer is no all right
490:02 - [Music]
490:03 - all right so we're taking a look at
490:04 - enhanced backend so we're going to start
490:06 - with local and then move on to remote so
490:08 - for the local backend we store the state
490:10 - on the local file system and it locks
490:12 - the state using the systems api it also
490:15 - performs operations locally and when we
490:17 - say local we just mean a local machine
490:19 - we don't necessarily mean it has to be
490:20 - our workstation a code build server
490:23 - could also be considered
490:25 - a local machine okay it just means
490:26 - anything but terraform cloud that is
490:28 - running the terraform code
490:30 - so by default you are using the back end
490:32 - state when you have not specified any
490:35 - kind of back end so normally you'd see a
490:37 - background defined in here and we don't
490:39 - so it's going to just default to the
490:40 - local
490:41 - you can specify the back backend with an
490:43 - argument local most people don't we just
490:45 - leave it blank
490:46 - and you can change the path to the local
490:48 - file
490:49 - and working directory so i think that if
490:51 - you were to specify you'd want to put
490:53 - the path
490:54 - in but generally again we keep that
490:56 - blank
490:57 - you can set a backend to reference
490:59 - another state file so you can read its
491:01 - outputted values this is a way of
491:03 - cross-referencing stacks so just notice
491:05 - that we have this thing that says
491:06 - terraform remote state we're going to
491:08 - repeat this later on in the course
491:10 - because this is a very important concept
491:12 - and i feel that it gets overlooked in
491:14 - the documentation but it has to do with
491:16 - local backend so the idea is that
491:18 - you could say hey um i have this other
491:21 - file that has a back end and i'm just
491:23 - going to use data sources
491:25 - its back-end and then point to its
491:27 - actual terraform state file okay
491:30 - [Music]
491:34 - all right we're taking a look here at
491:35 - remote backends for the enhanced
491:37 - back-end type and a remote backend uses
491:39 - the terraform platform which is either
491:41 - terraform cloud or terraform enterprise
491:43 - uh by default i usually just say
491:45 - terraform cloud when i'm referring to
491:47 - the terraform platform but just to
491:48 - understand there is a distinction
491:49 - between terraform cloud and tariff
491:51 - enterprise enterprise being the
491:52 - on-premise um offering okay
491:55 - so with a remote back end when terraform
491:57 - apply is performed via the cli the
491:59 - terraform cloud run environment is
492:01 - responsible for executing the operation
492:03 - so that's what you get when you get
492:04 - terraform cloud you get this run
492:06 - environment so it's basically just a
492:07 - built-in
492:08 - code build server
492:09 - to run terraform commands for you one
492:12 - thing i really want you to know about
492:14 - remote backends because this really
492:16 - tripped me up uh when i was actually
492:18 - trying to make the follow along which is
492:20 - the fact that because the terraform
492:22 - cloud run environment is the one
492:24 - executing the command your provider
492:25 - credentials need to be configured in the
492:28 - environment variables in terraform cloud
492:29 - so you know if you had a project and you
492:32 - configured it with um tfvars locally and
492:36 - then you were to swap out your remote
492:38 - backend uh it's not going to work the
492:40 - way you expect it to because um again
492:43 - the terraform cloud run environment's
492:44 - not going to take your credentials and
492:46 - then move them to the cloud okay you
492:48 - have to do that yourself
492:50 - when using remote backing you need to
492:52 - set a terraform cloud workspace
492:55 - so you would go ahead and go to
492:58 - terraform cloud and just go create one
493:00 - you create one or multiple ones for a
493:02 - single project if you use a single
493:04 - workspace for a project you're just
493:05 - going to use the workspaces
493:07 - name and if you set multiple workspaces
493:10 - via prefa you can use a prefix okay and
493:13 - the way this prefix works is that you're
493:15 - going to say like my app or something
493:16 - and when you go to run terraform apply
493:18 - what it's going to do is prompt you to
493:21 - say which environment do you want to use
493:22 - so
493:23 - and this is what you've created in your
493:25 - terraform cloud workspace you've created
493:27 - one called dev you created one called pr
493:28 - prod and saying which workspace do you
493:30 - want to deploy to
493:32 - i want to know that uh you can only set
493:34 - either name or prefix you can't set both
493:37 - okay so just understand that
493:40 - [Music]
493:44 - so since we're talking about back-ends
493:45 - let's talk about back-end initialization
493:47 - in particular the back-end hyphen config
493:50 - flag this is more of an exotic option
493:52 - but i figured we should go over it
493:54 - because it could appear on your exam
493:56 - so uh the flag for uh the back-end
493:58 - config flag for teraform init can be
494:00 - used for partial back-end configuration
494:02 - so in situations where the back-end
494:04 - settings are dynamic or sensitive
494:06 - uh so they cannot be
494:08 - statically specified in your
494:10 - configuration file this is what you
494:11 - would do
494:12 - so here would be your main.tf and notice
494:16 - it says back in remote
494:18 - and it has no details in it
494:20 - so then what you do is you create a
494:21 - separate file called backend.hcl
494:24 - and now you're specifying the workspace
494:26 - the hostname the organization
494:28 - and then with terraformingnet you're
494:30 - going to then say okay use this file as
494:34 - the backend information that we're going
494:35 - to inject into our backend remote so
494:38 - there you go
494:42 - [Music]
494:44 - okay we're taking a look here at
494:45 - terraform remote state and i give this a
494:47 - lot more attention the course because i
494:48 - feel that it gets overlooked within the
494:51 - terraform documentation it's such a
494:52 - powerful feature and something that i'm
494:54 - used to having in cloud formation which
494:55 - is cross referencing stack so i want to
494:57 - make sure that you know it too so
494:59 - terraform remote state data source
495:01 - retrieves the root module output values
495:03 - from another terraform configuration
495:05 - file using the latest state snapshot
495:08 - from the remote back end so the idea is
495:09 - that you can reference a state file from
495:12 - somewhere else you can do it uh via a
495:14 - remote backend and a local backend so
495:17 - just take a look here
495:19 - we see data and the data sources
495:21 - terraform remote state and we're setting
495:23 - the back end as remote on the right-hand
495:25 - side here it is local and if it's a
495:27 - local backend we give the path to the tf
495:29 - state file if it's remote that means
495:31 - it's another workspace in terraform
495:33 - cloud so we set the workspace that we
495:35 - want to access and then when we want to
495:38 - access those resources we're using data
495:40 - sources so we do data dot and then it's
495:42 - terraform remote state and then we
495:43 - specify it notes that it's no difference
495:46 - whether it's remote or local but you're
495:48 - going to be getting data from outputs
495:49 - okay
495:50 - so only the root level output values
495:53 - from the remote state snapshots are
495:54 - exposed resource data and output values
495:57 - from nested modules are not accessible
495:59 - to make
496:00 - module outputs values accessible as a
496:03 - root module output values you must
496:06 - explicitly configure a pass-through in
496:08 - the root module so here's an example of
496:11 - us doing a pass-through so we have a
496:14 - module called app and it has a source
496:16 - and then we're just setting an output
496:17 - notice that we are just grabbing the
496:19 - value and passing it along
496:21 - i want to tell you about the alternative
496:22 - to terraform remote state because if you
496:24 - can you should use these as opposed to
496:27 - using tariff remote state so tariff
496:29 - remote state only exposes output values
496:31 - its users must have access to the entire
496:34 - state snapshot which often includes some
496:36 - sense of information it's recommended
496:38 - explicitly uh
496:39 - it it's recommended explicitly
496:41 - publishing data for external consumption
496:43 - to a separate location instead of
496:45 - accessing it via a remote state so what
496:48 - would be alternatives well you've seen
496:50 - this because when we looked at data
496:51 - sources we were technically reusing
496:53 - alternatives but the idea is that you
496:55 - are going to say aws s3 bucket aws
496:58 - referee 3 zones and these are kind of
497:00 - already set up to work with aws
497:03 - or whichever provider okay
497:05 - so
497:06 - um that's that there
497:09 - but uh you know hopefully that's pretty
497:11 - clear so the idea is that when you can
497:14 - use these data sources because you know
497:16 - they're actually working off of live
497:18 - data right like it's hitting a resource
497:19 - it's not just looking at a state file
497:21 - that contains data okay
497:23 - [Music]
497:28 - so we had mentioned state locking just
497:30 - briefly when we were looking at standard
497:32 - back-ends but let's go take a look in
497:33 - detail what these are because they're
497:35 - very important for your workflows so
497:37 - terraform will lock your state for all
497:39 - operations that could write state this
497:41 - prevents others from acquiring the lock
497:43 - and potentially corrupting your state so
497:45 - state locking happens automatically on
497:48 - all operations that could write state
497:50 - you won't see any message that it's
497:51 - happening if the state locking fails
497:54 - alright so terraform does not output
497:56 - when a lock is complete
497:58 - however if acquiring the lock is taking
498:01 - longer than expected terraform will
498:03 - output a status message so neither on
498:05 - failure and neither when it is complete
498:08 - just if it takes too long so there's a
498:10 - transient issue something with like a
498:11 - networking issue
498:13 - you can disable lock so
498:15 - what you do is use the hyphen lock flag
498:17 - but it's generally not recommended you
498:19 - can force an unlock there's cases where
498:22 - you know just does not unlock or and so
498:25 - what you'll have to do is use the force
498:27 - unlock command
498:28 - um if you unlock the state when someone
498:30 - else is holding the lock it could cause
498:32 - multiple writers force unlock should
498:34 - only be used to unlock your own block in
498:37 - the situation where automatic unlocked
498:39 - failed to protect you the force unlock
498:42 - command requires a unique lock id so
498:45 - terraform will output this lock id if
498:47 - unlocking fails so this is what it would
498:49 - look like so you have terraform force
498:50 - unlock and then whatever the id is
498:53 - hyphen force so yeah there's a lot going
498:56 - on here but
498:57 - yeah that's what it is
498:58 - [Music]
499:03 - all right so let's talk about protecting
499:04 - sensitive data so terraform state file
499:06 - can contain sensitive data so long-lived
499:09 - database credentials and is possible
499:11 - attack vector for malicious actors and
499:13 - so when you're dealing with the local
499:15 - state
499:16 - when you're using local backend the
499:17 - state is stored in plain text json files
499:20 - you need to be careful you do not share
499:22 - the state file with anyone you need to
499:23 - be careful you do not commit this file
499:25 - to your git repository when you're using
499:27 - a remote state with terraform cloud
499:30 - the idea here is the save file is held
499:31 - in memory and is not persistent to disk
499:33 - the state file is encrypted at rest the
499:35 - state file is encrypted in transit with
499:38 - terraform enterprise you have detailed
499:39 - audit logging for tampering evidence to
499:41 - take it one step further so you can just
499:43 - see that there's a lot of work that has
499:45 - to be done when you are using it locally
499:48 - but with terraform cloud this is kind of
499:50 - the cell for terraform cloud is that
499:51 - it's just going to do everything
499:53 - possible to make that secure would it be
499:55 - secure to use a remote state with a
499:57 - third-party storage let's talk about
499:58 - that so you can store state with various
500:00 - third-party backends but you need to be
500:02 - careful to review your backend's
500:03 - capabilities determine if you meet your
500:06 - security and compliance requirements
500:08 - some backends are are not by default as
500:10 - secure as they could be so for example
500:11 - abs3 you could have you have to ensure
500:15 - encryption and versioning is turned on
500:17 - and you need to create a custom trail
500:18 - for data events so you can get
500:21 - tamper evidence logging if you turn on
500:22 - uh data events for
500:24 - custom cloudtrail events but one thing
500:27 - that if it's important to you is that
500:28 - you know if you use s3 it's not held in
500:30 - memory you know that be using a cloud
500:32 - hsm
500:34 - or kms so you know you have to
500:36 - understand there are some trade-offs
500:38 - okay
500:39 - [Music]
500:43 - let's take a quick look here at
500:45 - terraform ignore files and if you know
500:46 - it get ignore files it's pretty much the
500:48 - same thing so when executing a remote
500:50 - plan or apply in a cli driven run an
500:53 - archive of your configuration directory
500:54 - is uploaded to terraform cloud and so
500:56 - you could define paths to ignore from
500:58 - upload via the dot terraform ignore file
501:01 - at the root of your configuration
501:02 - directory if this file is not present
501:04 - the archive will exclude the following
501:06 - by default so dot get dot terraform uh
501:10 - and dot terraforming nora works just
501:11 - like a document ignore with the only
501:13 - difference is that you cannot have
501:14 - multiple terraform ignore files in
501:16 - subdirectories only the file in the root
501:19 - directory will be read so there you go
501:21 - and yes i know there's a double though
501:23 - okay so
501:25 - don't worry about that
501:30 - hey this is andrew brown from exam pro
501:31 - and we are moving on to our uh back ends
501:34 - and so the first thing we're going to do
501:35 - is try to use a standard back end so
501:37 - we're going to back something with
501:38 - amazon s3 so what i want you to do uh is
501:42 - we're going to go find our folder here
501:44 - which is called back ends and i think
501:46 - i'm just going to break this up into
501:49 - multiple files or folders i should say
501:51 - because i feel like we're going to be
501:52 - doing more than one thing so i'm just
501:54 - going to rename this folder to
501:56 - standard
501:57 - s3 here
501:59 - okay i'm going to create myself a new
502:01 - file
502:03 - called main.tf
502:05 - and what i'm going to do is type in
502:07 - terraform here
502:08 - and what we'll do is we'll go
502:11 - to the internet and we'll see uh how
502:14 - this looks like for a standard back-end
502:15 - so we'll type in
502:16 - standard
502:17 - s3 terraform
502:21 - okay
502:23 - we're gonna scroll on down and there is
502:24 - our example it's pretty darn simple uh
502:26 - to set up terraform there or for um
502:29 - uh you know aws
502:32 - and so we have our backend defined there
502:34 - and we're going to need a new bucket so
502:36 - uh we'll name that here in a moment so
502:39 - i'm going to just call this
502:40 - uh terraform
502:43 - backend and i'm just going to pound into
502:45 - a few numbers here
502:47 - and we're going to have a key and so
502:48 - this is going to be our state file so
502:50 - i'm just going to call this
502:52 - terraform dot tf state
502:57 - and we'll keep the region to us east one
503:00 - so now that we have our bucket defined
503:03 - at least the name we're going gonna go
503:05 - there to aws and go ahead and create
503:07 - that bucket so you know we have
503:08 - something to put that in
503:14 - so we'll make our way over here and i'm
503:15 - gonna go ahead and create myself a new
503:17 - bucket
503:19 - okay scroll all the way down hit create
503:20 - bucket
503:22 - and so now we should have that bucket
503:25 - that's all good to go but we're going to
503:27 - need something to provision because we
503:28 - don't necessarily have anything here so
503:30 - what i'm going to do is go to one of our
503:33 - previous tutorials
503:35 - um actually i think the code in the
503:38 - last one is pretty good with the
503:39 - exception that we don't want to have it
503:41 - backed by
503:43 - um
503:44 - we don't want it backed by all this
503:46 - stuff up here so what we'll do is go
503:47 - grab all of this here
503:50 - okay
503:51 - and i'm just going to go ahead and paste
503:53 - that on in
503:55 - and i will also
503:57 - bring over the variables.tf because
503:59 - we'll need that as well so we'll say
504:00 - variables tf
504:08 - and paste that on in
504:09 - and we'll also grab our terraforms tfrs
504:12 - to save us some time
504:16 - um let's just call terraform
504:20 - tfvrs
504:22 - and we'll paste the contents in there
504:25 - and so now what we should be able to do
504:27 - is go into our folder here
504:30 - and i'm going to do a terraform init
504:34 - i think that should just be in good
504:36 - shape there
504:44 - now notice that we set it to s3 but we
504:46 - didn't specify a provider or details i
504:48 - assume that it would just pick up those
504:50 - environment variables if they are set in
504:51 - our credentials but i guess we'll find
504:53 - out here in a moment
504:54 - what's going to happen okay
505:01 - and while that's going i'm just going to
505:02 - look here and see what they have for
505:04 - permissions
505:07 - um
505:10 - i'm just looking for
505:13 - general permissions configuration like
505:14 - region and things like that so
505:16 - you know uh it looks like we would have
505:18 - to set a particular region and stuff
505:20 - like that but what i'm going to do
505:22 - is i'm just going to go ahead and do a
505:23 - terraform
505:25 - apply and see if this just works
505:28 - and while that is going we're just going
505:29 - to give a read here so region is
505:31 - required
505:33 - if the dynamodb table is used
505:36 - the following configuration is optional
505:37 - so the access key the secret
505:40 - i'm endpoint maxwe tries the profile
505:43 - and i am using the default profile so
505:45 - that's totally fine
505:46 - i would just assume you know if we want
505:48 - to do something besides the re like the
505:50 - default profile we do like profile
505:52 - default here or what have you
505:55 - and so down below i'm just going to type
505:56 - in yes
505:59 - well it's going we're just going to keep
506:01 - taking a look here
506:05 - see how there's a lot of options here um
506:08 - dynamodb endpoints so custom endpoint
506:10 - for dynamodb api this can be sourced
506:12 - from the itabus dynamodb endpoint so i
506:15 - guess if you provisioned a table or
506:17 - created a table you just specify these
506:18 - two options to
506:20 - add that there if you want locking okay
506:24 - but we'll give this a moment here and uh
506:26 - see it all spin up okay see you back in
506:28 - a moment
506:30 - all right so after a short little wait
506:31 - here um our server is done provisioning
506:33 - so what we can do is just confirm that
506:36 - and we'll go into our
506:38 - terraform folder here
506:40 - and give it a refresh and so there we
506:42 - have our terraform tf state file
506:45 - and i want to see if there is a backup
506:49 - and so
506:51 - and here i don't see one
506:54 - so i'm not sure what's going on like
506:55 - when local when you're local you're
506:57 - always going to get a backup here um i
506:58 - didn't turn on versioning here it
507:00 - probably wants us to have that
507:02 - versioning
507:03 - is highly recommended that you enable
507:04 - bucket version on the s3 bucket to allow
507:06 - the state recovery in the case of
507:07 - accidental deletion or human error
507:10 - i guess my one thought is is that um how
507:13 - would you keep track of previous
507:14 - versions right like if i was to
507:17 - update this
507:18 - you know what's going to happen so
507:21 - here i'm just going to
507:22 - [Music]
507:24 - maybe just change the instance size so
507:26 - we'll go over to variables
507:29 - or sorry our i think it might be set in
507:33 - our tfrs there and we'll change this to
507:35 - a nano
507:37 - and what i'm going to do is go ahead and
507:39 - deploy this again so we'll say terraform
507:42 - apply auto approve
507:46 - because what i'm really curious about is
507:48 - like the versioning right because if we
507:49 - turn on versioning and then we look at
507:51 - s3 uh will we see those mobile versions
507:54 - because that's just a way of like
507:55 - recovering older versions of the state
507:57 - file and that might be something that is
507:59 - important for us to do
508:04 - because again i don't see any backups
508:06 - over here i could probably open up this
508:07 - folder here
508:10 - and yeah so i don't see any backups
508:22 - all right so i'll see you back here in a
508:23 - moment
508:24 - great so after a short little wait there
508:26 - this deploy is done so we'll go back
508:27 - here and give it a refresh and so yeah
508:29 - we don't uh we don't have a another file
508:32 - here it's just the same file that it's
508:33 - overriding so this is probably where
508:34 - we'd want to turn on our versioning
508:37 - and so i'm not sure if we can we have to
508:40 - empty the bucket versioning as a means
508:42 - i'm not always turning versioning on all
508:43 - the time
508:44 - we'll go here and enable it
508:47 - you might need to update your lifecycle
508:48 - rules to manage previous versions of
508:50 - objects which is totally fine
508:53 - okay
508:56 - and so what i'm going to do is
509:00 - go back over here
509:02 - and i think if we go over here we can
509:03 - actually see um
509:05 - let me see like the version here
509:09 - hmm
509:14 - because where there used to be like an
509:16 - option here to see multiple versions but
509:18 - that's totally fine so
509:19 - i'm going to go ahead and see if i can
509:21 - do a terraform destroy
509:23 - okay
509:29 - because i'm not sure if that file that
509:31 - we've placed uh up there is actually
509:33 - being versioned it might be the one
509:34 - after this not only turn version on
509:36 - there's like no way to actually delete
509:38 - things
509:39 - at least that's what i remember
509:44 - so we'll see how this goes and i'll see
509:46 - you back here in a moment okay
509:49 - all right after a short little wait it
509:50 - turned everything down so i want to go
509:51 - back here and give this a refresh and so
509:54 - our state file is still there
509:56 - um and that's the thing with versioning
509:58 - oh it's right here that's the button so
510:00 - we go here and we can see our multiple
510:02 - versions okay so i guess we might have
510:04 - just peeled back one there and so what
510:06 - i'm gonna do is just switch this back to
510:09 - micro
510:11 - okay
510:12 - oops i don't wanna i don't wanna destroy
510:14 - but we'll say terraform um
510:17 - uh terraform
510:18 - plan again
510:22 - i actually don't want to plan i just
510:23 - want to apply it
510:25 - auto approve
510:31 - okay and my thought process is still
510:33 - again like if i'm doing destroy am i
510:35 - like just falling back to the previous
510:37 - state file of the previous version
510:39 - and the reason why that matters is that
510:41 - um you know if you keep on destroying
510:43 - that means that um
510:45 - you know you're not gonna you're not
510:46 - going to have a state file that actually
510:47 - reflects
510:49 - uh what it is unless the terraform
510:52 - destroy is writing a new version if it's
510:54 - doing that that would actually be pretty
510:56 - useful that's what it might be doing
510:58 - um and so that's something we should
510:59 - really be sure of here
511:02 - so we'll do an apply and what i want to
511:04 - see is another version appear and then i
511:06 - want to do a destroy and i want to see
511:08 - if it removes the state file or just
511:10 - adds another one
511:12 - with the remove things and i think it's
511:14 - going to be the latter okay but we
511:15 - should just definitively know here so
511:17 - we'll see you back in a moment
511:20 - all right so this just finished here so
511:21 - we're going to do is give this a nice
511:22 - little refresh
511:24 - and you can see we have a new state file
511:26 - and so what i'm going to do
511:28 - is now do my terraform destroy
511:30 - so do terraform
511:32 - apply
511:34 - destroy auto approve
511:38 - okay
511:41 - and
511:43 - i will see you back here
511:47 - when this is done destroying and we'll
511:48 - see if we have an additional file or if
511:50 - the last one was removed okay all right
511:52 - so another short wait here and our
511:53 - deploy is done so what i'm going to do
511:55 - is refresh and what we have is another
511:59 - state file so that's what it's doing
512:01 - it's just updating the save file
512:02 - removing all of those things and
512:03 - applying it there
512:05 - some other things that might be
512:06 - important to you is turning on
512:08 - encryption so
512:10 - if we go down to encryption it's it's
512:12 - disabled by default
512:14 - so there is an option to turn it on here
512:16 - but i also noticed in the back end that
512:17 - they have it here as well i'm not sure
512:20 - if that would flip the switch for you or
512:21 - if the fact that you need to have this
512:23 - enabled as well it would be also really
512:24 - great if they told us if this was a
512:26 - boolean or not i'm pretty sure that's
512:27 - what it is
512:28 - um so if i was to go over
512:30 - to
512:32 - here
512:34 - and we'll go up here and say encrypt
512:39 - and say true i'm not sure if it would
512:40 - take that
512:42 - just type terraforming it here
512:46 - if you wish to migrate automatic
512:48 - migration for state terror from init so
512:50 - it sounds like it might have to do a lot
512:51 - of work there so i think you probably
512:53 - want to turn that on before you do this
512:54 - but that's something you want to do is
512:56 - probably have encryption and then make
512:58 - sure that no one can delete the original
512:59 - option option or the
513:01 - object obviously versioning takes care
513:04 - of that for you
513:05 - um but yeah that's pretty much it so
513:07 - we'll move on to uh the next part of
513:10 - our back end stuff okay
513:13 - and uh just as always let's go ahead and
513:15 - destroy our
513:17 - infrastructure there
513:25 - i almost forgot to do this as per usual
513:28 - um you probably might want to tear this
513:30 - down so if you want to do that i think
513:32 - you would have to suspend it
513:34 - but preserve existing object versions um
513:37 - do not change
513:39 - okay that's fine we will save that
513:41 - change there
513:42 - and i'm gonna go ahead and press enter
513:44 - yes here
513:49 - okay and we'll go back to our objects
513:52 - and i want to show the versions i just
513:53 - want to see if i can empty this bucket
513:55 - here
513:56 - whoops i don't want to open that but hey
513:58 - we can see the contents of that file
513:59 - which is nice
514:00 - probably would help to show that as
514:02 - we're doing this
514:03 - we'll go ahead and delete all these
514:05 - say permanently delete
514:10 - and we'll go back over to our back end
514:12 - here
514:15 - and now our bucket is empty and so if
514:17 - you want to delete this bucket just go
514:19 - back a layer here
514:21 - and we'll go ahead
514:23 - and delete this bucket
514:31 - there we go
514:32 - [Music]
514:35 - this is andrew brown from exam pro and
514:37 - so we just set up a remote back end or
514:39 - sorry a standard back end with s3
514:41 - but that was just for a single uh
514:43 - workspace so imagine if we wanted to set
514:45 - up this for multiple workspaces so the
514:48 - first thing i'm going to do is go ahead
514:49 - and create a new bucket and by the way
514:50 - we're not going to go and create a bunch
514:52 - of aws accounts because i realize that's
514:54 - a lot of work for some people but what
514:56 - you i want you to do is go and create
514:58 - that bucket so just make sure it is
515:00 - named the same here and since we're
515:02 - using the same project we might have to
515:03 - do like a terraform init on this or even
515:05 - a migrate
515:07 - um
515:08 - so
515:09 - this looks like oh sorry i'm
515:11 - initializing the wrong directory here we
515:13 - got to go into
515:15 - 120 that's the one mine is called here
515:17 - and we'll do a terraforming it here
515:21 - oh sorry sorry that's the wrong workflow
515:23 - it's 1 30 for me
515:25 - having uh what like one of those days
515:27 - where i'm a bit forgetful here but we'll
515:29 - type in tara from init and because we
515:30 - had just used it we'll have to do like a
515:32 - migrate state on it
515:34 - okay
515:42 - if that's giving us too much trouble
515:43 - another thing that we can just do is
515:44 - just open this up
515:48 - i don't want to find it in a folder i
515:50 - just want to reveal that in my explorer
515:52 - here sorry
515:54 - so we'll go uh reveal and file explorer
515:57 - and i'm going to bring that over
515:59 - and i we've deleted these so we don't
516:01 - have them anymore so it's not a big deal
516:03 - if we delete them so say continue
516:08 - try again
516:12 - and
516:14 - really won't let me delete this here
516:22 - of course that permission the one who
516:24 - created it
516:25 - we'll say continue here
516:37 - okay but that's fine we'll try to do uh
516:39 - terraforming it on it now maybe it will
516:40 - take now that there's just the modules
516:42 - there
516:43 - there we go
516:47 - it's not always easy
516:55 - great and so now we can do is just do
516:56 - terraform
516:58 - workspace list to see what workspaces we
517:00 - have
517:03 - or it's just workspace
517:08 - and we do terraform workspace new
517:11 - um
517:12 - staging
517:17 - and i do not need to update my geforce
517:19 - drivers today
517:20 - and then we can do one for production
517:26 - and so the idea here is what we need to
517:28 - do
517:29 - uh and i have uh it's all in the s3 back
517:31 - end here but i'm just kind of walking
517:33 - you through it but the idea is
517:35 - what you'd first have to do
517:36 - [Music]
517:38 - is set up
517:40 - a variable here
517:43 - and we you know we should probably put
517:44 - this in our variables folder
517:48 - if you don't since that would probably
517:49 - be more proper
517:52 - and what this is doing is it's saying
517:54 - okay the default setting is a map
517:57 - and we have one value called staging or
517:59 - key and one key called production and
518:00 - this is going to be pointing to a role
518:03 - and this role is going to be in whatever
518:05 - account is doing the provisioning so you
518:06 - can have one account that is just
518:08 - provisioning both the development or
518:10 - staging and production environments
518:12 - and so you'd have a user and so if i
518:15 - went into
518:15 - [Music]
518:17 - uh i am here
518:20 - and i went to my users
518:25 - i guess i just have to create a role so
518:27 - i just create a role
518:30 - again we're not going to go fully do
518:31 - this but it'd be like another items
518:33 - account or third party we'd have to put
518:35 - the id in there uh and that's the way we
518:37 - would go assume that role so once we've
518:39 - created those we still be providing the
518:42 - account ids for each of those
518:44 - and the name of the role there over to
518:46 - whatever it is
518:48 - once we have that then we can go over to
518:51 - our provider which is in our main here
518:53 - and we can just
518:55 - provide this
518:56 - assume roll here
518:58 - okay and notice over here it's getting
519:00 - the variable and then we're passing in
519:02 - terraform dot workspace let's we'll
519:04 - select whatever workspace we're in
519:05 - server in production it's going to pass
519:06 - production in here and that's going to
519:08 - go through and select this and assume
519:10 - that role and we will have permissions
519:12 - to then deploy to that but
519:15 - things are going to still be stored in
519:17 - this single uh bucket as far as i'm
519:19 - aware of
519:20 - um and so that's one part of it but one
519:23 - thing that they don't even cover in the
519:24 - actual
519:25 - documentation here
519:27 - is how are you going to handle your
519:28 - terraform.tf vars
519:30 - because this is a file that generally
519:32 - you don't want to be tracking
519:34 - and so what you probably would do is you
519:37 - create a new file here so i would just
519:39 - go here and say
519:41 - um staging dot
519:43 - tf vars
519:44 - right and then when you want to you just
519:47 - fill in all your environment variables
519:48 - in there but when you want to go execute
519:50 - this
519:51 - uh when you are in production you're
519:53 - going to have to do terraform
519:56 - apply and you just do var hyphen file
519:59 - staging
520:02 - tf vars okay and so there's not really
520:04 - an easier way of doing this it's just
520:06 - pretty much it and this will once this
520:08 - runs it'll it will you know it will um
520:11 - work that way so you probably just make
520:12 - a staging a production one and that's
520:15 - just how it would be you'd have to
520:16 - update your git directory there so
520:18 - whatever it would be
520:20 - you'd have to go to dot get ignore
520:23 - and just you'd ignore everything that
520:25 - had tfrs um i bet that git ignore file
520:28 - that we're using over here probably does
520:29 - a good job of that if we just scroll up
520:31 - and down yeah see already ignores it
520:32 - there so that's pretty much how you use
520:35 - multiple environments again it's just
520:36 - too much work to set up here and it's
520:38 - not really that important to the
520:40 - certification so
520:41 - there you go
520:42 - [Music]
520:46 - hey this is andrew brown from exam pro
520:48 - and we're going to be looking at the
520:49 - terraform remote state uh maybe not
520:51 - remote because that might be too much
520:52 - work to set up but um we'll definitely
520:54 - look at local here so what i'm gonna do
520:57 - is go on the left hand side here and
520:59 - then just find uh my folder that i've
521:02 - uh created there and i guess
521:04 - i have back ends there so i'm going to
521:06 - need a new folder
521:08 - um i feel like i should have all the
521:10 - folders here somewhere yes i do
521:13 - and we're just going to make a new one
521:14 - here
521:15 - and we're just going to call it 131
521:21 - back ends
521:23 - terraform remote state
521:27 - and then within this we're going to have
521:29 - to have two projects so project one
521:35 - and then we're gonna have project two
521:42 - okay and we're not gonna treat these as
521:44 - sub modules they'll both be root modules
521:46 - uh meaning like we're not going to have
521:48 - a main in here so we're just going to go
521:50 - and make a main here main.tf
521:53 - and then we're going to add another one
521:55 - here main dot tf
521:59 - and so what i want to do is provision
522:01 - something in one place and then access
522:03 - it somewhere else
522:05 - so i think this is a good time to go and
522:08 - grab
522:10 - i have some things open here would be a
522:12 - good time to go and grab anton's aws
522:15 - module there so let's say a bus vpc
522:17 - module
522:22 - and we'll just expand this a little bit
522:24 - here
522:25 - so i just want to go ahead and grab that
522:28 - and we'll make that project one
522:31 - okay
522:32 - so
522:33 - this looks fine
522:37 - i want to do us east though
522:47 - and we'll just say
522:48 - my terraform vpc so we uh
522:52 - don't forget what it is i'm going to do
522:53 - a usc 2 just in case i have one in
522:55 - hanging around usc one that i didn't
522:56 - delete
522:58 - because i might have it from something
522:59 - else
523:00 - and
523:01 - i mean the this doesn't necessarily need
523:04 - us to specify the provider because it
523:06 - should get pulled in from
523:09 - this module here and so i'm just going
523:10 - to navigate to that folder
523:13 - uh 131 is what i've called it
523:16 - and we want to go to project one here
523:20 - and we'll do terraform in it
523:43 - just wait a little while
523:50 - there i'm just curious about are the
523:53 - outputs to this
523:55 - so there are a bunch of outputs here
524:00 - and i'm just looking for the vpc id
524:06 - okay so
524:08 - um that initialized there and so i do
524:11 - want to output
524:13 - that value output outputs
524:17 - i cannot remember so i'm just going to
524:19 - go look at another project and see how
524:21 - we do our outputs
524:24 - main tf here
524:26 - yeah just output like that
524:29 - back to our project here
524:35 - and this one is called vpc
524:58 - and um
525:04 - we can specify our provider if we want
525:07 - it's going to use the default anyway but
525:08 - we might as well be explicit here
525:10 - just be explicit about the region so
525:12 - we'll do region
525:13 - usc to 1.
525:17 - and it's going to be double quotations
525:18 - here
525:21 - and we'll do
525:21 - [Music]
525:24 - profile equals default
525:27 - okay
525:29 - and then we'll go down below and we'll
525:30 - do a terraform
525:33 - apply
525:35 - and we'll see if that takes
525:42 - we'll type in yes
525:46 - and so that looks like it's going to
525:47 - work while that is running hopefully it
525:48 - doesn't break along the way but we'll go
525:50 - set up our other main.tf and so we just
525:53 - want a basic project i think we've been
525:54 - pulling from the same one which is
525:56 - counts all the way at the top here
525:59 - or maybe we could pull into
526:02 - the standard back end might be a bit
526:04 - easier
526:07 - yeah let's use this one
526:10 - and i all i want is
526:13 - this here the apache module that we
526:15 - created
526:17 - so we'll go down below
526:19 - and we will jump back into
526:21 - our
526:24 - project 2 here
526:26 - and we will paste that in there
526:29 - and notice that we just have an error
526:30 - down below
526:33 - uh
526:34 - can only create the following a b c so
526:38 - there's a minor error there
526:41 - usc's two
526:42 - two two
526:44 - oh it's because i set this as one up
526:46 - here we're gonna do two here okay
526:48 - let's say auto approve
526:54 - we'll go back to this project here
526:56 - and so what i want to do is specify a
526:59 - data source
527:00 - and this is going to be that terraform
527:04 - remote state
527:08 - and we'll call this vpc
527:12 - and we're going to set it to the back
527:14 - end here
527:18 - saying oh we want to be local
527:22 - and then we need to set the config path
527:23 - this is going to be where the actual
527:25 - file is located
527:29 - so
527:31 - i think that we could probably get away
527:33 - with doing
527:34 - this there
527:37 - okay
527:38 - and so then down below here i should be
527:40 - able to data
527:42 - dot vpc vpc id
527:48 - this is going to need a configuration
527:50 - file or tfr is there so i'm going to go
527:51 - here
527:53 - and just go
527:54 - terraform dot tf vars
527:59 - i'm going to go up to
528:02 - our previous project where we might have
528:04 - defined that
528:05 - here
528:08 - but there's one minor difference here
528:10 - and that is that we are not specifying
528:12 - the
528:13 - cider or sorry we're not specifying the
528:15 - vpc id here
528:17 - okay
528:18 - so we'll go down below back to this file
528:25 - and we're just waiting for that vpc to
528:27 - be created it's creating a nat gateway
528:29 - uh oh i don't think i want that um now
528:32 - gateways cost money i mean like it's not
528:34 - a big deal we can just rip it out
528:36 - um but i think what i would have done
528:38 - here is
528:39 - not had either of these i would just
528:41 - said false and false
528:43 - so we're going to have to wait for that
528:44 - to finish to create this is going to
528:45 - take forever um if you've watched up to
528:48 - this point you know save yourself some
528:50 - trouble and just remove that out
528:53 - oh yeah so just finished
528:57 - nope it's still going so i'll see you
528:58 - back here in a bit okay
529:00 - the problem is it's creating that
529:01 - gateways in all the vpcs and there's a
529:03 - lot so i'll be back in a bit
529:06 - all right so we have to wait that long
529:07 - but what i'm going to do is just do
529:08 - false and false on this and i'm going to
529:10 - go and do terraform auto or reply
529:13 - auto
529:14 - approve here
529:15 - or actually i'm going to do terraform
529:17 - apply because i don't know if it's going
529:18 - to just tear down those resources or
529:20 - actually
529:21 - replace the vpc if the vpc doesn't get
529:23 - replaced then we can move on to
529:25 - the other part of this
529:27 - i'm just going to go to the top here
529:30 - because i'm really curious about the vpc
529:34 - so the nat will be destroyed then that
529:35 - will be destroyed
529:38 - the gateway will be
529:40 - changed road tables will be changed but
529:43 - the vpc id is not going to change so we
529:45 - can just say yes
529:47 - okay
529:49 - and what i'll do here is while this is
529:52 - going
529:53 - we can go figure out project two so i'm
529:55 - just gonna open up a new uh terminal
529:58 - here or window whatever you wanna call
529:59 - it shell
530:01 - and once that's loaded i'm just gonna cd
530:03 - into that i believe it's uh 31 we're on
530:05 - right now
530:06 - 131
530:07 - and the numbers might change depending
530:09 - on if i change them after the fact
530:11 - so
530:12 - uh we sourced our data source there i
530:15 - want to go back to our project 2
530:18 - and that's the tfvrs file
530:24 - and so this should just work it should
530:26 - take it
530:29 - except this isn't the wrong project so
530:30 - i'm just going to
530:33 - close this out
530:35 - project 2.
530:38 - yes this looks
530:41 - good so what i'm going to do is do
530:42 - terraform
530:44 - plan and see if this is going to take it
530:47 - oh we got to do terror from init first
530:49 - as always
530:58 - great so um we just ran that there and
531:01 - so now what we can do
531:04 - is do our terraform plan
531:06 - and while we're waiting on let's take a
531:08 - peek over at our original one here so
531:10 - that one got rid of all those extra
531:12 - services we didn't know need
531:15 - and so down below it says an input
531:17 - variable with the name server name has
531:18 - not been declared this variable can be
531:20 - declared with a variable server name
531:23 - um i thought we did define these
531:27 - that's right there
531:32 - did i name this far wrong terraform
531:34 - tfrs no that is correct
531:37 - oh it's because we don't have a
531:38 - variables
531:40 - okay so we just do variables
531:43 - tf
531:44 - we'll go back up to this one here
531:47 - and we'll grab all of it
531:50 - and we don't need this workspaces thing
531:54 - um
531:56 - we don't need a vpc id like that because
531:58 - we'll just pass it along via the data
532:00 - source
532:02 - we don't have a bucket so we'll just get
532:04 - rid of that
532:06 - okay
532:07 - and we'll do terraform plan again
532:12 - and they're saying data vpc vpc id has
532:16 - not been declared in the root module i'm
532:18 - going to do terraform init just as a
532:19 - sanity check there
532:22 - and i'm going to go back to my main tf
532:24 - here and just take a look
532:28 - oh it hasn't been defined
532:30 - did we put it in the wrong project here
532:32 - maybe i put it in the 130 here while i
532:34 - was doing it
532:42 - did we put it in project one maybe
532:48 - nope
532:48 - okay well
532:50 - wherever it's gone
532:53 - oh no it's right here
532:56 - okay so then what's it talking about
533:00 - let's try this again
533:01 - terraform plan
533:04 - plus i named it wrong here
533:08 - oh
533:09 - um
533:12 - what we have to do is do outputs or
533:14 - output
533:15 - i think it's outputs on this one here
533:26 - data.bbc so a data resource name that
533:29 - does not exist
533:31 - oh you know what it is we also have to
533:32 - do um
533:35 - terraform remote state
533:37 - like that
533:38 - and now it should take it
533:44 - the region is required but is not set
533:49 - sure
533:53 - it doesn't say for what but we'll i
533:55 - guess maybe it's just talking about the
533:56 - provider
534:00 - region equals
534:02 - us east 2
534:04 - defaults or
534:06 - profile
534:08 - default
534:10 - and so i'll go down here and hit up
534:21 - okay and so if we just scroll up it's
534:23 - going to take it so let's just go
534:25 - provision that and see if it works
534:26 - terraform apply auto approve
534:29 - okay
534:33 - and i'll see you back here if this
534:34 - successfully works okay
534:37 - all right so we've ran into a little bit
534:38 - of an issue here notice that it's giving
534:40 - us uh saying that it's running in a
534:42 - different network
534:44 - so
534:44 - [Music]
534:45 - the thing is what we're doing here is
534:48 - we're passing
534:50 - our
534:51 - [Music]
534:53 - vpc id here
534:54 - which is coming from project 1
534:57 - and so that should be setting this to be
534:59 - usc 2 right because we have the region
535:01 - set up as such
535:04 - um
535:06 - this is all right
535:09 - so we'll go over here and this is all
535:12 - right so some of the security grips all
535:14 - i can think of is we'd have to go back
535:15 - to our modules project
535:18 - and if we went in here and checked out
535:23 - the main
535:30 - this is where we define our security
535:32 - group
535:33 - and we specify the vpc id here and that
535:35 - is what we are passing through
535:38 - so you know i would expect this to be
535:40 - using
535:41 - the correct subnets and things like that
535:45 - but uh it's just not taking for some
535:47 - reason
535:49 - so
535:50 - instead of worrying about that what i'm
535:52 - just gonna do
535:54 - is i'm gonna go back to project one
535:57 - and i'm going to
536:01 - tear this down
536:09 - and the only reason i didn't do this in
536:11 - usc 1 was because i thought i might have
536:13 - already had one there so if we go over
536:14 - to our aws account
536:16 - and this won't be a problem for you this
536:18 - is just a problem for me
536:20 - but if i go over to vpc here
536:26 - and we go to your vpcs notice that i
536:28 - have two
536:29 - and one is called
536:31 - oh it's my terraform vpc
536:33 - that's in north virginia
536:37 - so maybe that never provisioned where we
536:39 - wanted to be so but i'll be back here in
536:41 - a moment
536:42 - all right so we ran into a bit of an
536:43 - issue here after waiting a long time it
536:45 - didn't delete and so
536:47 - uh if this happens there's not a lot you
536:49 - can do except delete the resource out
536:51 - manually this is like something that's
536:53 - not great also notice that somehow i
536:55 - ended up one with in north virginia and
536:57 - also this one has um
537:00 - a virtual private gateway so probably
537:01 - what happened was i deployed in usc one
537:04 - it wasn't correct so then i went to
537:05 - usc's two
537:07 - and uh so i just made a big old mess of
537:09 - this so i'll have to go here and see if
537:11 - i can delete it manually
537:14 - and i'm just going to type in
537:17 - delete
537:22 - and we'll see if that takes
537:27 - okay i'll try that one more time
537:30 - it's possibly that it's not deleting
537:32 - because of all the additional resources
537:34 - so i acknowledge
537:36 - and i really really want to delete this
537:39 - so i'll go here and type in
537:41 - oh hold on that's my default one so it
537:43 - actually did remove it that time
537:45 - what i would say is i would double check
537:47 - to make sure there's no virtual private
537:48 - gateways because those
537:50 - you do not want to leave those running
537:51 - that will cost money but these got
537:53 - deleted out of here
537:54 - um
537:56 - maybe to also check endpoints or not
537:58 - gateways
538:01 - and so those are deleted as well i'm
538:02 - going to go over back to my usc 1
538:06 - and so this thing
538:10 - uh if we go here oh it's all gone now so
538:12 - i'm not sure why it was showing up in
538:14 - both on that gateways that's fine those
538:16 - are gone so we have my terraform vpc
538:18 - here
538:19 - and if i go down to
538:23 - not gateways
538:25 - there's nothing there and i go over to
538:27 - virtual private gateways
538:30 - i have one set up here i didn't want to
538:32 - create one so what i'm going to do
538:36 - and i'm going to see if i can fake it
538:37 - here but i'm going to just switch this
538:38 - over to one
538:40 - and i'm going to do a terraform
538:43 - apply refresh
538:45 - only
538:47 - let's see if it picks it up
538:54 - and i'm going to see what it gets
539:01 - so here it says terraform detected the
539:03 - following changes made outside of
539:04 - terraform
539:07 - so that resource was deleted so that's
539:09 - not really the behavior i'm looking for
539:13 - i thought maybe we could like kind of
539:15 - like attach it there but i don't think
539:16 - that's going to work
539:17 - so what i want to do is i just want to
539:19 - delete this one here
539:21 - and so we will go and
539:24 - oh sorry i'm going to go delete the vpc
539:26 - because it might just take everything
539:27 - with it if we do it that way
539:29 - and so we say delete vbc
539:31 - and notice it has a virtual private
539:32 - gateway attached
539:34 - so i guess we're going to have to delete
539:35 - that first
539:37 - and we'll go up here and detach say yes
539:40 - detach
539:41 - and we'll make sure we don't have any
539:43 - gnats
539:44 - we don't that's good
539:46 - so we'll go up to our vpc
539:49 - and we'll go ahead and delete this vpc
539:53 - and go delete
539:55 - so yeah terraform is not always perfect
539:57 - sometimes you have to go in and delete
539:58 - resources
540:00 - but generally it's pretty darn good
540:02 - you just got to be careful what you're
540:03 - doing and that's why you should always
540:05 - be doing terraform plan and pushing
540:07 - things through
540:08 - a version control system like git
540:10 - so what i'm going to do is i'm going to
540:11 - try this again and we're going to do
540:12 - this through us east one
540:15 - so i'm going to do a terraform apply and
540:16 - i should be able to do this no problem
540:18 - now because um
540:20 - well there's nothing in my way
540:22 - so
540:23 - and while that's going on there i'm
540:25 - going to switch this over to usc 1
540:27 - and we'll say yes
540:35 - and while that's going there i'm just
540:36 - going to refresh
540:38 - because once we have the vpc id we are
540:40 - ready to start using it so down below
540:42 - here it says
540:44 - oh right right so this is set up for um
540:47 - two so we'll set one
540:49 - one
540:50 - one
540:52 - we'll hit up here and
540:54 - i'm just going to do a sanity check and
540:55 - make sure there's nothing in my other v
540:57 - my other region here
541:00 - okay good
541:01 - we'll go back to north virginia here and
541:03 - we already have the vpc id so because we
541:06 - have that it looks like it might produce
541:07 - a new one though zero zero nine
541:10 - no it's the same one
541:12 - i think
541:14 - but what i'll do is i'll go back to
541:15 - project two
541:17 - which is referencing this state here
541:19 - we'll go back
541:20 - to the second one here and we'll just do
541:22 - a terraform
541:24 - init because we did change the region
541:26 - here so it might want to do something
541:28 - we'll do a terraform plan
541:33 - i don't think we ran into an issue with
541:34 - the plan last time
541:36 - okay that's all updated there
541:40 - okay great and so i'm really hoping that
541:42 - this just works this time so we'll do
541:43 - terraform apply auto approve
541:48 - so there must be something we don't know
541:50 - about how we developed our module and
541:51 - it's not supporting other
541:53 - regions again this is kind of out of the
541:55 - scope of
541:56 - uh the course here
541:58 - um because we're just getting into very
542:00 - detailed stuff but uh you know if we can
542:01 - just kind of get this working here so
542:03 - error launching source instance and
542:05 - valid security group sg
542:07 - subnet belongs to a different
542:10 - server
542:11 - okay so i'm going to see
542:14 - what is going on here so we have the
542:16 - state file here
542:19 - and
542:20 - except for that
542:22 - i don't think it created a server let me
542:23 - go see
542:25 - go to north virginia here see if we have
542:26 - any servers
542:29 - no and we'll go over to ohio here
542:34 - okay so i absolutely do not trust
542:37 - the state files in here anymore so what
542:39 - i'm going to do
542:40 - is open them in file explorer here
542:45 - for this one here i'm just going to
542:46 - delete them out
542:48 - and i'm going to delete this out and i'm
542:50 - going to just
542:51 - clear out whatever i can clear out
542:56 - it probably won't let us delete
542:58 - everything like the modules that's fine
543:00 - and so i'm going to just try this again
543:01 - terraforming it
543:03 - who knew this would be so hard
543:14 - um terraform apply
543:19 - auto approve
543:21 - and so what i'm hoping is it just takes
543:23 - it i'm going to just also check our
543:25 - terraform vars make sure everything's
543:26 - fine here because we don't say anything
543:28 - in there
543:29 - so i should just take it
543:33 - um
543:35 - double p here
543:51 - so the problem is there's a duplicate
543:53 - key
543:55 - so this is under um
544:00 - i seem to talk about key pairs here
544:02 - so we'll go here and we'll just go ahead
544:03 - and delete that
544:09 - we'll also do that in usc's i think it's
544:11 - more of a problem in usc than anywhere
544:13 - else
544:15 - we'll delete that as well
544:22 - and we will go ahead and hit enter there
544:25 - i'm really surprised i didn't generate
544:26 - like a unique name each time
544:28 - i thought that would do that eh
544:36 - and i guess the security group still
544:37 - exists so we'll go here and delete that
544:39 - out as well
544:42 - so i think it's just this one here
544:47 - delete
544:48 - is the key pair back now do we have to
544:50 - delete that no okay
544:53 - and we'll try this again
544:56 - maybe what it was doing is it was
544:57 - picking up the old security group that
544:59 - was that was pointing to somewhere else
545:01 - i don't know
545:03 - whatever issue we're having it was
545:04 - pretty odd
545:12 - and so
545:13 - [Music]
545:15 - let's complain about the security group
545:17 - but now we're doing everything in usc
545:18 - one so i don't know what its problem is
545:20 - so if we go over to our security groups
545:28 - wherever that is
545:30 - it's under vpc
545:39 - security groups
545:43 - so here it's 0 0 9 fe all that kind of
545:47 - stuff there and if we go to the original
545:48 - project here
545:52 - 0 0 9 f e so it is using
545:56 - the correct vpc right
545:58 - and
546:00 - this one here
546:04 - is fine if we go over here to this one
546:07 - this is in us east one so that's totally
546:10 - fine as well
546:13 - so there must be something that's not
546:15 - being set for it so it must be using
546:16 - like the default vpc
546:19 - i think it really has to do with our
546:20 - original module here so what i'm going
546:22 - to do
546:23 - is i'm just going to specify our
546:25 - original source there
546:26 - and so this one's going to be
546:28 - what was it
546:33 - just type in child module
546:36 - terraform here
546:38 - source
546:40 - local just doing this off screen here
546:45 - uh yeah you would just do a period or
546:47 - something the other one like a double
546:49 - slash or something i can't remember so
546:50 - this is in our
546:53 - this is up one directory and it's up
546:55 - another directory
546:57 - and it's in our modules
547:00 - here
547:09 - 110
547:11 - modules terraform aws apache
547:15 - example
547:18 - okay and so this will just allow us to
547:20 - modify this and and kind of like fix
547:21 - what
547:22 - whatever issue we're having with this
547:31 - terraforming it let's see if we can find
547:34 - it there
547:39 - uh there wouldn't be any version
547:41 - constrained on here so that's right
547:42 - we'll just take that off
547:47 - and so i think what's happening is our
547:48 - um
547:50 - our resource is trying to launch in the
547:52 - default security group
547:55 - so we'll open up our main tf here
548:01 - and so this should be using that
548:04 - right
548:12 - and that should be using that
548:17 - and we don't set like a vpc here we just
548:20 - set the vpc security security group ids
548:29 - i'm just going to scroll up here for a
548:30 - second
548:33 - or this is on wc2 right or wsl2
548:37 - and so this would be terraform in it
548:45 - to reform
548:47 - autoproof
549:06 - okay so if this is the problem what
549:08 - we'll do is go look up aws instance
549:12 - this is insane
549:16 - because maybe we're not specifying the
549:17 - security group correctly but i'm pretty
549:18 - sure we are
549:20 - so we'll just say vpc
549:29 - this is the
549:30 - optional ec2 classic default vpc only so
549:33 - that's the old way of doing it
549:40 - a list of security groups ids associated
549:42 - with
549:52 - subnet id
549:55 - do we set the subnet id here we don't
549:58 - aha so that's our problem
550:01 - so we can go subnet id here
550:06 - and that's what we want to set so the
550:09 - vpc subnet to id to launch in
550:12 - um
550:14 - i'm not sure how we're going to grab the
550:16 - subnet here
550:19 - so we'll go over to adress vpc
550:30 - so it's just easier to type it up your
550:32 - abus vpc
550:38 - and i'm looking for
550:40 - a subnet
550:52 - aws
550:54 - vpc get for subnet
550:56 - terraform
551:11 - i guess that would be one way of doing
551:12 - it
551:16 - so we could just
551:18 - i suppose select them that way
551:26 - so we're going to say data
551:29 - dot um
551:34 - oh we're in the wrong one we're in the
551:36 - example aren't we oh no that's right
551:38 - okay
551:39 - so then we would just want to go up to
551:41 - [Music]
551:43 - the vpc up here
551:44 - so data it's vpc main
551:49 - um
551:54 - vpc id equals data
551:59 - dot
552:00 - vpc.main dot id
552:06 - and these are subnet ids
552:09 - i assume what this is going to return
552:10 - back is like
552:12 - an array
552:13 - so i'm going to i'm just going to take a
552:15 - guess here and do aws
552:18 - subnet ids and just choose zero here
552:20 - and we'll see if that fixes our problem
552:26 - terraform init because we might have
552:28 - changed our module there
552:30 - and there's a command terraform get this
552:33 - i think would be the perfect case
552:34 - because we're just updating the module
552:35 - we're not updating the provider so
552:38 - that'd be the time that we would use
552:39 - that
552:40 - so now i'm going to try this again and
552:41 - see if this works
552:47 - a reference to data source must be
552:48 - followed by at least one attribute um
552:51 - accessible there the problem is i don't
552:53 - know what this is right so
552:56 - that's not really helping me out here uh
552:58 - what this in particular would be
553:03 - um
553:04 - so
553:05 - it was subnet
553:17 - ids a set of attributes found by the ids
553:20 - found this data source will fail if none
553:21 - are found
553:22 - so if that's the case then what we're
553:24 - going to be doing is doing dot ids
553:27 - and then maybe zero like that
553:30 - okay
553:37 - it was
553:38 - subnet ids has not been declared
553:41 - oh okay so maybe we do
553:44 - subnet ids ids
553:47 - is that going to work for us now
553:52 - by the way this looks all messed up
553:55 - oh just maybe the indentation here that
553:58 - doesn't look right
554:03 - um
554:07 - yeah this is this is super messed up
554:09 - hold on here
554:11 - apparently i lost some of the block
554:20 - okay so we said subnet ids.ids
554:32 - a data source vpc main has not been
554:34 - declared
554:38 - it's right there
554:40 - what are they talking about
554:43 - um
554:49 - so what i'll do is i'll just cut this
554:51 - here or like cut it
554:56 - paste this below here
555:00 - data vpc
555:02 - main id
555:03 - i don't know if we can do like it
555:04 - depends on on this probably not
555:24 - apparently we can we can do it i'm
555:26 - seeing an example where they're doing it
555:27 - depends on
555:29 - so what i could do is say
555:31 - depends on
555:34 - and then i would just specify
555:36 - data.aws
555:38 - vpc.main
555:41 - and we'll see if that helps it out there
555:50 - we can do terraform init again
555:56 - and try that
556:02 - if it doesn't like that maybe we can go
556:03 - into the directory itself and see if
556:05 - that will fix it
556:10 - um
556:12 - 110
556:16 - and we'll just do terraform in it here
556:18 - maybe
556:23 - i remember ever having to do a knit with
556:25 - inside of it so
556:26 - i don't think that's the case
556:41 - oh you know what it's just this mistake
556:44 - and you might have caught that
556:46 - vpc
556:50 - but the depends on is probably a good
556:52 - idea
556:53 - data.vpc.main
556:59 - we'll try this again
557:07 - must be a whole object um
557:10 - okay well we'll take the depends on out
557:11 - then and we will try this again
557:14 - because it should be able to infer the
557:16 - order uh into which it works
557:19 - a data source another vpc vbc has not
557:22 - been declared in this
557:23 - stupid module this is so stupid
557:26 - data.awsvpc
557:30 - oh because it's not called vpc it's just
557:32 - called main
557:33 - okay
557:34 - my fault
557:39 - and so here it says elements of a set
557:41 - are identified but only their value and
557:43 - does not um
557:46 - it does not have separate indexes or
557:47 - keys with it it's only possible to
557:49 - perform operations across all elements
557:50 - in a set
557:52 - so
557:54 - let's just look up set so set terraform
558:02 - i just want to get like the first
558:03 - element in a set
558:06 - first element in a
558:08 - set terraform
558:12 - one
558:15 - one takes a list a set of tuple with
558:17 - either zero or one elements if the
558:18 - collection is empty
558:20 - one it returns null otherwise one
558:22 - returns the first element
558:24 - so what we can do here is if it's doing
558:27 - an id i suppose what we could do
558:30 - is go down to our
558:33 - subnet id here
558:35 - and we can say one
558:40 - and we will try that
558:44 - apparently it doesn't take an index
558:53 - invalid value for list parameter must be
558:56 - a list set or tuple with either values
558:58 - either 0
559:00 - or 1 elements
559:03 - is a set of string with six elements
559:08 - so
559:13 - i don't know what this thing is like i
559:14 - don't know how you would go and say all
559:16 - right just show me what this value is
559:18 - what i could try to do here
559:21 - i'm just trying to think here how could
559:23 - i see this value
559:25 - without having to provision the resource
559:27 - and that's what i don't know
559:28 - um
559:33 - [Music]
559:34 - it's very very frustrating
559:37 - um
559:39 - i'll be back in a second okay all right
559:41 - so this is what i found and what we have
559:43 - to do is actually convert because this
559:45 - is actually a set and we need to convert
559:46 - it to a list at least this is what i
559:48 - think so what i'm going to do is take
559:50 - this out of here and we'll wrap it as
559:53 - such and then we'll give it zero and
559:55 - maybe that's our problem here
560:03 - please be the answer
560:17 - okay so i think it's created now so
560:19 - yeah that's kind of like and we're not
560:21 - in that section under the built-in
560:23 - functions but
560:24 - this is just where sometimes the data
560:26 - set returned is a
560:27 - set
560:29 - or
560:30 - those are really frustrating to use and
560:31 - so i guess you just have to cast it into
560:32 - another type
560:34 - um that one function i think should have
560:35 - worked with it but it just decided not
560:38 - to for whatever reason
560:40 - um but in this provisions that are uh
560:42 - we're all done here and we're all in
560:44 - good shape
560:45 - so
560:48 - yeah that is all good so we can do is
560:51 - now just tear this down because that
560:53 - worked no problem
560:55 - we'll say apply auto approve
561:01 - okay
561:03 - and while that is destroying what i'm
561:05 - going to do i guess i already have the
561:06 - third one open here i'm going to just
561:08 - update the code here git
561:10 - status git add
561:14 - um
561:15 - here git commit
561:17 - oops
561:19 - fix my module so
561:21 - should use
561:23 - the subnet specified
561:26 - for the vpc from the vpc
561:32 - okay and we will do a get push
561:35 - we'll do a git tag 1.1.0
561:40 - we'll do a git
561:42 - push
561:44 - tags
561:45 - and so now for mo from now on we'll just
561:48 - use the version 1.1.0
561:52 - um so that's destroyed we'll go back to
561:54 - original one here we'll do a terraform
561:55 - apply auto
561:58 - approve
562:00 - destroy
562:02 - i just want to show you as it's
562:04 - destroying that if we want to do remote
562:05 - it's pretty much the same thing we're
562:07 - just setting the back end as remote and
562:08 - we're applying that configuration values
562:10 - there
562:11 - i'm just going to stick around here just
562:13 - to make sure that this does destroy just
562:15 - because
562:16 - for some reason it just might not
562:23 - so this was project one
562:28 - oh we're in project two in both of these
562:29 - folders okay that doesn't help that that
562:31 - much
562:34 - but we're going to wait until this is
562:35 - destroyed
562:37 - and then once that's destroyed we will
562:39 - um
562:42 - tear down the
562:43 - vpc okay
562:54 - all right so we'll just make sure we go
562:55 - into the other project here project one
562:58 - and we'll do the same thing
563:00 - tear that down
563:11 - so yeah i realize this fall along is a
563:13 - bit of a mess i could go back and
563:14 - reshoot it so it's a lot more
563:16 - streamlined but then i feel like we will
563:17 - miss all of these kind of little things
563:19 - and without getting that kind of
563:21 - experience you're not going to know how
563:22 - to debug that stuff on your own so i i
563:25 - feel that i'm just going to keep this
563:26 - follow along as is
563:28 - you know hopefully you find value at it
563:29 - but it will be a frustrating experience
563:30 - and you'll know this because you'll get
563:31 - to the end of this okay
563:33 - [Music]
563:37 - hey this is andrew brown from exam pro
563:38 - and we're going to be looking at how to
563:40 - uh force an unlock okay and so what
563:43 - we're going to do
563:44 - is as always we're going to need a new
563:46 - folder here so i'm just going to expand
563:48 - this and i'm going to
563:50 - uh reveal in my file exp
563:52 - explorer here and we're going to make a
563:55 - new folder here we're going to call it
563:57 - uh 1 3
563:59 - uh
564:01 - locking right okay like force unlocking
564:04 - i suppose
564:05 - and i'm gonna try to do this with
564:07 - terraform cloud because i feel like that
564:08 - will be the easiest way for us to do
564:10 - this so i'm gonna just go main.tf
564:12 - and what i'm going to do is make my way
564:14 - over to terraform cloud
564:17 - i know we still have that other
564:18 - environment that we're using
564:26 - the uh vcs terraform one but um what i'm
564:30 - going to do
564:32 - is
564:34 - i'm going to create a new workspace i'm
564:36 - just going to call this one cli driven
564:38 - we'll say create workspace and this one
564:40 - oops we're going to say
564:42 - force unlocking
564:48 - and then that's going to give us that
564:49 - nice little code there that we can grab
564:51 - we'll paste that on in there
564:53 - and i'm going to go back to our last
564:55 - tutorial here where we had project two
565:00 - and
565:02 - because i need something that's going to
565:03 - take a little bit of time so that we can
565:05 - force and unlock right
565:07 - so i'll go ahead and grab that code
565:12 - we'll paste that on in there and we are
565:13 - actually are going to use the version if
565:15 - we can here because i would rather do
565:17 - that
565:18 - and this is going to be terraform
565:20 - [Music]
565:22 - it was apache example
565:24 - i think i have to exam pro code to get
565:26 - that module there
565:29 - and it's going to be version 1.1.0
565:34 - and we are not going to import our vpc
565:36 - id here we're just going to set it like
565:38 - we did before
565:39 - so just say var vpc id
565:43 - and we will need a variables here so
565:46 - we'll
565:50 - say and we'll have to go over to
565:56 - our
565:58 - project here
566:00 - we'll copy that over
566:04 - and what i want is to add the vpc id
566:06 - here
566:15 - okay
566:17 - and i really don't feel like entering
566:19 - all the state form files i guess i'm
566:21 - going to have to there's not really any
566:22 - way around that i suppose i'm going to
566:24 - cd back here
566:27 - 132
566:29 - terraform init
566:33 - um
566:36 - cannot apply constraint to a
566:37 - non-registered url so i've clearly
566:40 - entered that incorrectly we'll go up to
566:42 - here and see what it was
566:44 - this one's referencing it locally
566:47 - we used it in another project here
566:50 - maybe we used in the remote state one
566:52 - here
566:54 - nope
566:56 - uh standard probably
566:58 - there it is
567:00 - okay so we'll go ahead and grab that
567:01 - we're going to go down to our main here
567:04 - we're going to paste that on in
567:07 - and i'm going to do terraform
567:12 - init
567:17 - just going to initialize that back in
567:19 - there for us
567:22 - and while that's going i'm going to go
567:24 - set up our variables because it always
567:26 - takes a thousand years so we need to add
567:28 - quite a few here so i'm just going to
567:30 - pull this over here and then pull this
567:32 - over there
567:33 - i'm going to go look at a previous one
567:35 - here where we have tfrs
567:38 - so
567:40 - we want a vpc id here
567:46 - okay
567:49 - we want our mo our my
567:51 - cider block here
567:57 - we're going to get our public key here
568:08 - we're going to add another instance type
568:17 - we're going to add a server name
568:27 - and we're going to need our environment
568:29 - variables never can remember these so
568:30 - we're going to go over to the terraform
568:32 - registry
568:34 - have this open already up here so we go
568:36 - to the top terraform registry
568:38 - we'll go over to providers just make
568:40 - this a little bit smaller here whoops a
568:42 - little bit too small
568:44 - and we will go to documentation scroll
568:47 - on down
568:49 - grab these keys here this is going to go
568:51 - first that's going to be sensitive we're
568:53 - going to cat as always
568:58 - and we're going to grab the first one
568:59 - here
569:04 - paste that in
569:06 - go grab the second one here
569:14 - forgot the name here so we'll grab that
569:16 - one here
569:23 - we'll say uh whatever the region is here
569:26 - i should really memorize these so i
569:28 - don't have to ever have to
569:29 - look up that page again
569:30 - um that one's not sensitive we probably
569:32 - want the secret sensitive that's
569:34 - probably more important than the key
569:37 - okay and so we're all configured here to
569:39 - go
569:40 - and so
569:41 - what i want to do is deploy this but
569:43 - before i do i just want to double check
569:45 - to make sure that i know how to use the
569:48 - force unlock so i'm just gonna
569:50 - go here and we're gonna just pull up
569:52 - some documentation so we're gonna say
569:53 - terraform force unlock
569:58 - and so we just write terraform force
570:00 - unlock lock id
570:05 - we need the actual key there
570:09 - um
570:13 - so we can disable it with the hyphen
570:15 - lock command here
570:19 - so that's what i need to find out so
570:27 - all right i'll be back in a second okay
570:30 - all right so what's going to happen is
570:32 - um
570:33 - when we run it it's going to give us
570:35 - that output of a lock id when we do
570:37 - terraform apply twice
570:38 - so i'm going to do is do terraform apply
570:41 - auto approve
570:44 - to get this going i'm hoping this just
570:46 - works
570:48 - you got to spell that right with two p's
570:59 - and we're just waiting for that plan to
571:00 - start
571:03 - and while that's going i'm just going to
571:05 - open up a another one here
571:08 - i'm going to make my way into the same
571:09 - directory cd
571:10 - one three
571:12 - or it's one three two
571:16 - oops
571:18 - we've got to be quick here
571:21 - that's old so i'm gonna close that out
571:24 - that's old
571:26 - i'll go back to this one i want to get
571:27 - it before it finishes
571:29 - so what i'll do is type in um
571:32 - terraform apply
571:34 - and what it's going to say is that it's
571:36 - locked
571:38 - if we can do this quick enough
571:45 - oh interesting so it says waiting for
571:46 - one runs to finish before queued so i
571:49 - guess this is a case where if we're
571:50 - using terraform cloud we're not going to
571:52 - be able to get that lock id and i guess
571:54 - the only way to unlock it would be to go
571:56 - into
571:57 - uh terraform cloud itself as it's
571:59 - executing
572:02 - right and see how it's running and from
572:04 - there you could do a force unlock but
572:06 - that's not what we were trying to do
572:07 - we're trying to use the actual command
572:09 - so i could show you
572:10 - so that means that we do have to um use
572:12 - a terraform back end
572:14 - and so if that's the case what i'm going
572:16 - to do
572:18 - is
572:20 - once this is done here so now it's
572:22 - triggering the other one just gonna stop
572:24 - that so we're gonna go back to our
572:26 - original one here and i'm just gonna
572:27 - tear this down
572:29 - uh destroy
572:32 - and i'm gonna go back over here and what
572:34 - i wanna do is go back to our uh standard
572:37 - back end tutorial
572:39 - because that'll make it a lot easier for
572:40 - us to do in that one
572:43 - and so we will just go and close off
572:46 - these here
572:50 - close out our tabs
572:54 - and what i want to do here is go to
572:57 - [Music]
572:58 - our main one here
573:00 - and we need to upgrade that to 1.10
573:04 - and the other problem is that we're
573:06 - gonna have to actually set this up for a
573:07 - dynamodb table so
573:10 - not only we're gonna have to create this
573:11 - folder right so
573:13 - what i want you to do is go to your s3
573:15 - and we wanna make sure that we already
573:16 - have this uh bucket
573:22 - and we do good
573:24 - we'll go over to dynovaddb
573:27 - and create ourselves a new
573:30 - thing here
573:32 - so say create table and as always
573:34 - they're updating the ui and i just want
573:36 - to call this like uh
573:39 - force unlock
573:46 - terraform i don't know what we'd have to
573:49 - set as the partition key
573:51 - that's a good question so
573:53 - state locking dynamodb terraform
574:02 - okay
574:06 - so
574:07 - which can be enabled by setting the
574:08 - dynamodb table field existing a single
574:10 - tip it can be used to lock multiple
574:12 - remote state files
574:15 - it's not saying here like
574:20 - what we have to set up as the key for
574:21 - this
574:29 - okay so maybe we can just set it i don't
574:31 - think it's going to auto create it but
574:32 - let's give it a go and see what happens
574:34 - okay
574:35 - so i'm going to go down to dynamodb
574:38 - options
574:54 - here it is
574:55 - custom end point to the adabus dynamodb
574:57 - api this can be sourced from the
574:59 - endpoint
575:01 - and there's the table name used for
575:02 - state locking the table must have a
575:04 - primary key of lock id with the type
575:05 - string okay so that's our instructions
575:07 - there
575:09 - and we're going to go back to dynamodb
575:11 - we're going to set up our partition key
575:13 - and that's going to be a string we don't
575:15 - need to set a sort key here
575:18 - default settings are fine
575:24 - and that's going to go ahead and create
575:25 - there
575:28 - and so what i'm going to do is grab that
575:29 - name
575:32 - and what we need is dynamodb table
575:44 - okay so i'm going to do terraform init
575:53 - and we're going to migrate the state i'm
575:55 - totally fine with that
576:00 - yes
576:07 - great and so now if i do terraform apply
576:21 - oh right we have that old code in there
576:22 - that we're not using
576:25 - all right so yeah we have some old code
576:27 - here we need to remove so we're going to
576:29 - just take out
576:30 - this workspaces thing um to see if
576:33 - there's anything else remaining there no
576:35 - i think that's it
576:36 - so we'll go ahead and we'll try this
576:37 - again
576:46 - and uh we are going to make sure we're
576:48 - going to switch to both of them in order
576:50 - for this to work so i'm just going to go
576:53 - here ahead of time okay we'll go back
576:56 - over to here no problems this time
576:57 - around so we'll say yes
577:03 - and that is provisioning so i'm going to
577:05 - go back to this one here and i'm just
577:07 - going to type in terraform apply
577:10 - and it should complain saying hey this
577:12 - is locked right now you shouldn't unlock
577:13 - it and so this is where you would grab
577:15 - that id okay
577:17 - and so you would just type in terraform
577:19 - force unlock and then we'd paste the
577:22 - value in here
577:26 - and the thing is this is where you just
577:27 - type yes but we definitely don't want to
577:29 - do this because the other one is
577:30 - provisioning but i just wanted to show
577:31 - you how you get that id and pass it
577:33 - along
577:35 - um
577:36 - and you know when i'm talking about
577:38 - state locking in the lecture content i
577:40 - kind of wrote about here it says state
577:42 - locking happens automatically on all
577:44 - operations that could write state you
577:45 - won't see any message that it is
577:46 - happening if state locking fails so it's
577:49 - true as
577:50 - locking is happening it doesn't tell you
577:52 - that it's going on but it will tell you
577:54 - when you do another terraform apply
577:56 - we'll say hey
577:58 - it's in it's in state so
578:00 - i didn't technically lie here but i
578:02 - guess that could be like a little
578:03 - highlight that would have been good in
578:04 - the lecture content there
578:06 - um but i'm just going to cancel it out
578:08 - there we're going to go back to our
578:09 - first one here
578:11 - and we can see that that was deployed
578:13 - and
578:14 - what we can do
578:16 - for fun i don't think there'll be
578:17 - anything within dynamodb because i think
578:20 - that it will create the record and then
578:21 - get rid of it but we just click into our
578:23 - table here
578:26 - and we go view items notice there's zero
578:29 - items right now well no there it is okay
578:33 - so there was a an id at one point
578:38 - so i think that is good and what i'm
578:40 - going to do is just go ahead and destroy
578:42 - the infrastructure
578:57 - type yes
578:59 - and while that is happening
579:01 - um well we gotta wait for this to finish
579:03 - but once that is done then we'll go
579:04 - ahead and we'll just tear down the
579:06 - dynamodb and um
579:08 - s3 bucket okay all right so that is done
579:11 - destroying there so what i want to do
579:12 - here is go ahead
579:15 - and uh just delete this table
579:19 - really don't like this new ui i don't
579:21 - know who came up with this
579:32 - yep we'll delete all that
579:34 - make our way over to s3 here
579:41 - and i'm going to go ahead and just
579:43 - delete this table
579:46 - we'll have to go in and just delete all
579:48 - the records first
579:52 - pretty sure we turned off versioning
579:53 - there so there's no versioning right now
579:59 - and
579:59 - [Music]
580:01 - oh i went into the wrong bucket not that
580:03 - it matters that's old anyway
580:06 - oh cool yeah so we didn't look at this
580:07 - earlier but when we had production and
580:09 - staging they placed them into these
580:11 - areas here
580:14 - okay
580:17 - so that's kind of
580:18 - cool um
580:21 - i guess it's something i didn't look at
580:22 - but
580:24 - if we go terraform
580:27 - workspace list are we in the default one
580:29 - i would have thought we were in there eh
580:32 - oh we're in the production one okay so
580:34 - i mean i never showed this to you
580:35 - earlier because we didn't actually
580:37 - deploy it but um we actually did do a
580:38 - deploy this time around
580:40 - and i guess both the environments were
580:41 - set up here and they had their own
580:43 - folders so that's kind of interesting to
580:45 - see
580:46 - we'll go ahead and we'll just go delete
580:47 - all this
580:59 - and i'm just going to leave the bucket
581:00 - around here just in case i want to use
581:01 - it again but it is completely emptied
581:03 - out so
581:04 - we're good from scratch so there you go
581:06 - [Music]
581:10 - all right let's talk about resources so
581:11 - resources in configuration files
581:13 - represent infrastructure objects such as
581:15 - virtual machines databases virtual
581:17 - network components and storage and so it
581:18 - pretty much looks like this a resource
581:20 - type is determines the kind of
581:22 - infrastructure object it is so here it
581:24 - says aws instance and this would
581:26 - represent an ac database ec2 instance
581:29 - this is all defined within the
581:30 - provider's documentation so you have to
581:32 - kind of look at what name they use to
581:34 - figure out what it is and even though
581:37 - you don't see provider explicitly set
581:39 - here a resource does belong to a
581:41 - provider and you can explicitly set it
581:43 - and you would do this when you'd want to
581:45 - set a resource outside the default
581:46 - provider that you have in your
581:48 - configuration file um and so one little
581:51 - thing that i hadn't mentioned anywhere
581:52 - else and that's why i made this slide
581:53 - was to mention about special timeout
581:55 - nested blocks within resources so some
581:57 - resource types provide a special timeout
581:59 - nested block argument that allows you to
582:01 - customize how long certain operations
582:03 - are allowed to take before being
582:05 - considered to have failed okay so there
582:06 - you go
582:08 - [Music]
582:12 - let's talk about complex types so a
582:14 - complex type is a type that groups
582:16 - multiple values into a single value and
582:18 - complex types are represented by type
582:21 - constructors but several of them are
582:24 - have shorthand keyword versions okay so
582:26 - there are two categories of complex
582:28 - types we have collection types for
582:29 - grouping similar values so list map set
582:32 - and structural types for grouping
582:33 - potentially to similar values so tuple
582:36 - and object and now that we have an
582:38 - overview let's go jump into collection
582:40 - types and structural types
582:42 - [Music]
582:46 - a collection type allows multiple values
582:48 - of one other type to be grouped together
582:50 - as a single value and the type of value
582:52 - within a collection is called its
582:54 - element type the three kinds of
582:55 - collection types are list map and set
582:58 - and so looking at our first one here
583:00 - what we're doing is we are setting
583:02 - ourselves something that looks kind of
583:03 - like an array it's this list type here
583:06 - and what we can do is use our index so
583:08 - the indices 0 to reference the first
583:10 - element which is mars so that's going to
583:12 - make our user name mars for a map it's
583:15 - very similar to a ruby hash or a single
583:17 - nested json object and the idea here is
583:20 - that it's very similar to the first
583:22 - except now we're doing a key and value
583:24 - and then we access it by based on the
583:26 - key name so plan b
583:28 - is going to return 50 usd okay
583:31 - we have set it is similar to a list but
583:33 - has no secondary index or preserved
583:35 - ordering
583:37 - all values must be of the same type and
583:39 - will be cast to match the first element
583:42 - okay so it's a great way to kind of have
583:44 - um well i guess no secondary index but
583:47 - yeah so you do two set and then it would
583:48 - turn into this okay
583:50 - [Music]
583:55 - all right let's take a look here at
583:56 - structural type so a structural type
583:57 - allows multiple values of several
583:59 - distinct types to be grouped together
584:00 - with a single value structural types
584:02 - require a schema as an argument to
584:04 - specify which types are allowed for
584:06 - which elements so this is what they're
584:08 - talking about when they say this schema
584:09 - so when you actually define the variable
584:11 - notice where it says object and you are
584:13 - actually setting a is going to be a
584:15 - string and b is going to be a string
584:17 - there's this optional option which i
584:18 - think is right now in beta uh but
584:20 - hopefully by the time this course is out
584:22 - or it's the future you have that option
584:24 - there but just assume that they're all
584:25 - required so that's what they're talking
584:26 - about is that you are specifying exactly
584:29 - what you expect the schema to be okay so
584:32 - there are two kinds of structural types
584:34 - we have objects and tuples and they're
584:36 - going to look very familiar to
584:38 - maps and lists because they're pretty
584:39 - much the same but with explicit typing
584:40 - so object is a map with more explicit
584:42 - keying so this example we'd have name
584:44 - for string age for number and so that's
584:46 - what it would expect the data structure
584:48 - to be for tuple multiple return types
584:50 - with a parameter so we can have string
584:52 - number or boolean so this is where we'd
584:55 - have um a
584:57 - as a string 15 or true as a boolean so
585:00 - yep there you go
585:02 - [Music]
585:06 - hey this is andrew brown from exam pro
585:08 - and we're going to look at
585:10 - the collection and structural type so i
585:12 - have a new folder down below
585:14 - just in case we need to define some
585:16 - things so i'm going to go here and just
585:18 - call this main.tf
585:22 - and we are just going to configure this
585:24 - for local terraforms we'll just give the
585:26 - brackets there and so the idea is that
585:28 - we might have different kinds of
585:29 - variables
585:31 - and we had done this previously where we
585:33 - created
585:34 - a list and a map but we can do that
585:36 - again so we'll have like planet
585:39 - right
585:41 - so that's list and then we just default
585:43 - that to a value mars
585:46 - earth
585:49 - moon
585:50 - and then we could also have you know
585:52 - plans here and that would be our map
585:54 - type
585:59 - okay and so here we'll just set it
586:04 - with the curlies
586:08 - plan a
586:15 - plan b
586:20 - plan c
586:33 - um
586:35 - so we'll do terraform console and so
586:37 - that should load
586:38 - these variables for us to use
586:41 - and so if i do var.plans
586:44 - i get that and if i do var.planets
586:49 - i didn't like what i did there input
586:51 - variable has not been declared
586:54 - i suppose it's just planet there so i
586:55 - should have named that planets up here
586:58 - and so what we're going to do here is
587:00 - just go ahead and exit
587:03 - type clear
587:05 - i'm just going to expand this a bit
587:06 - bigger so we're taking over more of the
587:08 - screen now let's take a look at
587:09 - structural types so these require you to
587:11 - actually define um
587:14 - parameters so what i'm going to do is go
587:16 - down below and we're going to do the
587:18 - object
587:20 - and object is very similar to the map so
587:22 - let's go down here
587:25 - plans object
587:29 - and so
587:30 - here what we do is we'd say
587:33 - type object
587:36 - and we would just have to define some
587:37 - settings here
587:44 - so we could say
587:50 - a is a string
587:54 - all right we'll see if that works
588:00 - the default value is not compatible with
588:01 - the variable type constraint attribute a
588:04 - is required
588:06 - so that's fine um what we could do is
588:08 - just
588:08 - define this as like plan a
588:13 - plan b
588:15 - plan c
588:21 - and now if we just do var plans object
588:26 - when you are using this you know you
588:28 - might want to specify some different
588:30 - kinds here so you could just say like
588:32 - you say like plan here
588:36 - so we say plan name
588:39 - plan amount
588:42 - maybe it's like number
588:45 - and so then we'd say plan name
588:49 - plan amount
588:52 - basic
588:54 - maybe this would be 10.
589:00 - okay and we'll just uh
589:02 - type exit here and go back into
589:04 - terraform cloud hopefully we don't get
589:05 - an error here so the plan amount is
589:07 - required so you know we can't have a
589:09 - spelling mistake here
589:13 - just do var plan here
589:18 - um
589:21 - well we named it correctly there and
589:23 - when we went up here and specified it i
589:24 - think we got it right plan object
589:29 - so
589:31 - sure what it doesn't like here oh you
589:33 - know what we're not in terraform cloud
589:34 - okay that's fair
589:37 - and we're still spelling this wrong
589:42 - oops
589:49 - okay so there we go we got our basic
589:51 - plan
589:52 - and then we can do a tuple here so
589:57 - i don't know if i've ever defined a
589:58 - tuple before so let's just try it here
590:00 - and so we'll just say uh
590:03 - um
590:04 - groceries or val or
590:06 - random
590:13 - type equals tuple
590:22 - i'm just looking up if there's any kind
590:24 - of definition i can find here
590:34 - i'm not really finding anything but i'm
590:36 - just going to go uh define this here
590:37 - because i thought maybe it needed like a
590:39 - schema or something but maybe it doesn't
590:40 - so we'll just say
590:42 - hello 22
590:45 - false
590:46 - okay
590:48 - terraform console
590:51 - typical constructor requires one
590:52 - argument specifying the element types as
590:54 - a list
590:56 - okay so if that's the case then what we
590:58 - could do is say string
591:01 - number
591:02 - boolean
591:08 - the uh type constructor requires one
591:10 - argument supposed to find the number of
591:12 - elements
591:13 - so clearly i'm doing this wrong so just
591:15 - give me a second i'll be back in a
591:16 - moment okay all right so i think the
591:17 - problem here was just that i need to
591:19 - make brackets here like this
591:22 - we'll give that a go
591:25 - boolean is not a valid option what if we
591:27 - try bool
591:31 - okay we say var.random
591:34 - good and so i'll just go ahead and exit
591:35 - that out i'm going to see what happens
591:37 - if i change the order here so let's say
591:39 - i do instead of 22 here
591:41 - we go here
591:44 - okay so notice that you know we can have
591:47 - all sorts of kinds but they have to
591:48 - match exactly the order that is there so
591:50 - yeah that's pretty much it so there you
591:52 - go
591:53 - [Music]
591:57 - the terraform language includes a number
591:59 - of built-in functions that you can call
592:01 - from within expressions to transform
592:03 - your combined values so we have numeric
592:06 - string collection encoding file system
592:09 - date and time hash and crypto ipnetwork
592:13 - type conversions so we are going to go
592:15 - through all of these we might not go
592:17 - through every single function but we'll
592:18 - go through every single major category
592:21 - uh in terms of the exam the only thing
592:23 - that's going to show up might be string
592:25 - functions why they do this i don't know
592:27 - it's not a very good exam question but
592:29 - those might appear but i think that this
592:31 - is one of the strongest features of
592:32 - terraform over something like cloud
592:34 - formation
592:35 - and i really want to just show you the
592:37 - gambit of them okay
592:39 - [Music]
592:43 - let's take a look here at numeric
592:45 - functions starting with absolute so
592:46 - returns the absolute value of a given
592:48 - number so 23 is 23 0 is zero and if you
592:50 - get a negative number it's going to flip
592:52 - to the positive for four what it does is
592:54 - it rounds down to the nearest whole
592:56 - number so see where it says 4.9 becomes
592:58 - a four
592:59 - you have log so it returns the
593:01 - logarithmic i can't say that word
593:04 - logarithm logarithm of a given number in
593:06 - a given base so log 50 comma 10 is going
593:10 - to give you that 16 comma 2 is going to
593:12 - give you 4 okay
593:14 - seal it it's where it will always round
593:16 - up so see where it says 5.1 and it goes
593:18 - all the way to 6. we have min so take
593:21 - one or more numbers and return the
593:22 - smallest number from the set and max
593:24 - take one or more numbers and return the
593:26 - greatest number of the set i don't have
593:28 - examples because that's pretty
593:29 - straightforward you know if there's a
593:30 - two and a four it's going to return the
593:31 - two in min if it's a two and a four it's
593:33 - going to return the four for max
593:35 - we have parse in so parses the given
593:38 - string as a representation of an integer
593:40 - in the specified base and returns the
593:42 - resulting number
593:44 - so if we have a hundred here in strings
593:46 - it's going to and we say comma 10 we're
593:49 - going to get 100 because that's the base
593:50 - system it's base system 10
593:52 - base system 16 we can see letters in
593:54 - there right so it's able to translate
593:56 - that this is two so that's basically
593:59 - binary so zeros and ones so you get the
594:01 - idea there
594:03 - uh pow so calculates an exponent by
594:07 - raising its first argument to the power
594:10 - of the second argument so that's just
594:11 - the way of doing powers and then we have
594:13 - signum so determine the sign of a number
594:15 - returning a number between negative one
594:17 - and one to represent the sign
594:20 - so there you go
594:22 - [Music]
594:26 - all right let's take a look here at
594:27 - string functions the first being chomp
594:30 - so removes new line characters at the
594:31 - end of a string so you know if there's a
594:34 - hyphen n or sorry backslash n you don't
594:36 - want to see that there that's the way
594:37 - you get rid of it then you have formats
594:39 - it produces a string by formatting a
594:41 - number of other values according to the
594:43 - specification
594:44 - so here there are uh percentage delight
594:47 - so this is representing a uh a digit so
594:50 - it's taking that number this says it's
594:51 - going to be formatted as a string okay
594:54 - um format list so produce a list of
594:57 - strings by formatting a number of other
594:58 - values according to a specification
595:01 - string
595:02 - so here we have an array and then we
595:05 - have our specification so you can see
595:06 - it's substituting the name there
595:10 - we'll look at indent so adds a given
595:12 - number of spaces to the beginnings of
595:14 - all but the first line in a given
595:16 - multi-string
595:17 - so here we have a string um and what
595:20 - it's going to do is see where we have
595:23 - the interpolation here and then we have
595:25 - indent i know the highlighting is not
595:27 - great because it's a single string but
595:28 - we have interpolation we have
595:30 - parentheses two so give it a a layer of
595:33 - two indentation
595:35 - and then it's going to break that up and
595:37 - give it indentation so we have join so
595:39 - produce a string by concatenating
595:41 - together all elements of a given list of
595:43 - strings with the given delimiter
595:45 - so you use delimiters is double click or
595:48 - sorry is a comma and so it's going to
595:50 - glue that together to make this okay
595:53 - if there's only a single one there just
595:55 - won't be any comma in there we can lower
595:58 - all the text it's pretty straightforward
595:59 - we have regular expressions so that is
596:02 - an extremely powerful feature so here we
596:04 - have the regex i don't know what the
596:06 - regex format is
596:08 - maybe it's pearl i'm not sure
596:10 - there's like a bunch of different types
596:11 - of regex standards so you know do you
596:14 - have to figure that out so you know how
596:15 - to use it and then there's a regex all
596:17 - supplies to a regular expression to a
596:19 - string and returns a list of matches
596:21 - where this just is returning uh one okay
596:24 - we have replaced so search is a given
596:25 - string for another given substring and
596:27 - replaces uh each occurrence within a
596:30 - given replacement string so it's just
596:32 - like the javascript replace we have
596:34 - split this is the opposite of join so if
596:37 - we want to split on the comma we specify
596:39 - comma here we have str rev so string
596:42 - reverse so reverse is a string so hello
596:44 - becomes holley
596:47 - we have sub
596:49 - hole
596:50 - sure i don't know
596:52 - um so string so extracts a substring
596:55 - from a given string by offset and and
596:57 - length so we have a sub string and we're
596:59 - saying we want one to four so we only
597:02 - want uh one two three four here okay
597:05 - because it starts at zero
597:07 - we have title so make a title case we'll
597:08 - capitalize the h and the w we have trim
597:11 - removes the specified character from the
597:14 - start and end of the string so we don't
597:15 - want these and we tell it to remove
597:17 - those
597:18 - there's a lot of string functions so we
597:20 - have trim prefix so removes the
597:22 - specified prefix from the start of the
597:24 - given string if the string does not
597:26 - start with the prefix the string is uh
597:28 - is returned and unchanged so here we say
597:31 - we want to get rid of hello in the front
597:32 - so we do that suffix is the opposite so
597:35 - we want to get a rid of world out of the
597:37 - suffix so we do that we have trim space
597:39 - that removes all types of white space
597:41 - from both the start and end of the line
597:43 - so it gets rid of the new lines and the
597:45 - spaces upper is going to put everything
597:47 - to upper and there you go on the exam
597:49 - they probably will ask you uh like what
597:52 - string function does or which one does
597:54 - not do something so this is the only
597:56 - part of the building functions you have
597:57 - to know for the exam i don't think it's
597:59 - a very good exam question but it does
598:01 - appear there so you need to know it okay
598:03 - [Music]
598:08 - we're on to collection functions and
598:09 - these are the most powerful built-in
598:11 - functions and there's a lot of them and
598:14 - i made sure to give you an example for
598:15 - each one because i really do want you to
598:17 - know these because this is the power of
598:18 - terraform the first on our list here is
598:20 - all true so returns true if all elements
598:23 - in a given collection are true or true
598:26 - or it also returns true if the
598:27 - collection is empty so it's either true
598:29 - true right or we have true false so
598:32 - because there's a false it's not going
598:33 - to be true so any true is very similar
598:36 - but there only has to be one that is
598:38 - true so if this is true and there's a
598:41 - false it's going to be true if it's
598:42 - blank it's going to be false okay we
598:46 - have chunkless splits a string
598:48 - list into fixed size chunks returning a
598:50 - list of lists
598:52 - so
598:53 - here we're telling it to chunk it every
598:55 - two so grab every two and make them into
598:57 - their own little array or list i suppose
598:59 - we have coalesce takes any number of
599:01 - arguments returns the first one that
599:02 - isn't null or empty string if you're
599:04 - used to postgres you use this all the
599:06 - time but the idea is it's going to
599:09 - grab the a in this case it'll grab the b
599:10 - because that's blank in this case we'll
599:12 - grab the one because that's the first
599:13 - value we have coalesce list takes any
599:15 - number of list arguments and returns the
599:17 - first one that isn't empty so very
599:19 - similar it's just using lists or if we
599:21 - want to call them array so the first one
599:22 - is available so it takes that one
599:24 - we have compact so takes a list of
599:27 - strings and returns a new list with an
599:29 - empty string elements removed so it's
599:32 - just going to get rid of that space
599:34 - there and we'll get abc
599:36 - we have concat so it takes two or more
599:39 - lists and combines them into a single
599:41 - list so that's very convenient we have
599:43 - contains so determines whether a given
599:45 - list or set contains a given single
599:48 - value as one of its elements so does it
599:51 - have an a yes it does does it have a d
599:53 - no it does not
599:55 - we have distinct so it takes a list and
599:57 - returns a new list with any duplicate
600:00 - elements
600:01 - removed so we just want to make sure we
600:04 - only have one of each so do we have any
600:05 - duplicates here we have two a's
600:08 - and two b so we're going to end up with
600:11 - just a single list so only exactly one
600:14 - of each letter
600:15 - we have element retrieves a single
600:17 - element from a list so get me the
600:19 - element at
600:21 - 3 here so um wait retrieves a single
600:25 - element from a list
600:28 - okay well that's what it does you give
600:29 - it a three and it gives you an a i don't
600:31 - know why it's not clicking for me but
600:33 - i'm i'm not following through here uh
600:35 - index finds the element index for a
600:38 - given value in a list so we say where is
600:41 - b and the index of b is is one because
600:43 - it'd be zero and this would be one still
600:45 - really confused about this one uh
600:47 - flatten takes a list and replaces any
600:50 - elements that are are
600:52 - lists with a flattened sequence of list
600:54 - content so basically it says give me a
600:56 - bunch of arrays or lists turn into one
600:58 - flat list
601:00 - keys take a map and return a list
601:03 - containing the keys from the map so we
601:05 - just want the keys a c and d
601:09 - we want length this is pretty
601:10 - straightforward so what's the length of
601:12 - this zero this is two this is one
601:14 - because it's a one
601:17 - map or one thing key value in there and
601:20 - if it's a string it's going to count the
601:21 - characters so there's five characters
601:23 - we have lookup so retrieves the value of
601:25 - a single element from a map
601:28 - given its key
601:29 - if the given key does not exist the
601:31 - given default value is returned instead
601:34 - so we say
601:35 - uh lookup a
601:38 - and what we get is a y right look up c
601:42 - and
601:43 - it could not find c so by default give
601:45 - us what instead
601:47 - a match keys construct a new list by
601:49 - taking a subset of elements from one
601:51 - list whose indexes match the
601:53 - corresponding indexes of values in
601:55 - another list
601:57 - that sounds complicated let's read that
601:58 - one more time so constructs a new list
602:01 - by taking a subset
602:03 - of elements from one list who indexes
602:06 - match the corresponding index of values
602:08 - in another list that is confusing so we
602:10 - have one list and another one so we have
602:13 - this one here
602:15 - and we have us west u.s east usd so we
602:17 - say okay we have usc's so the elements
602:20 - here is two and three so give us two and
602:22 - three so that's what it does
602:25 - that was it that was the tricky one i
602:26 - can't think of what you use that for but
602:27 - that's a interesting function merge
602:30 - takes an arbitrary number of maps or
602:32 - objects and returns a single map or
602:35 - object that contains a merged set of
602:37 - elements from all arguments
602:39 - so it just merges them together so it's
602:41 - just like concat
602:43 - or i suppose like fladden uh one takes a
602:46 - list set or tuple values from uh with
602:48 - either zero
602:49 - or one elements if the collection is
602:51 - empty one returns null otherwise one
602:53 - returns the first element if there are
602:55 - two or more elements then one will uh
602:58 - one will return an error
603:00 - so
603:00 - it returns null and an empty list it
603:02 - returns the first one and then here it
603:04 - says invalid function so it's just
603:05 - saying is there one right is one or zero
603:09 - uh ranges generates a list of numbers
603:11 - using a start value a limit value and a
603:14 - step value so we say 3 and we get 0 1
603:17 - and 2.
603:19 - generates a list of numbers using a
603:21 - start value limit value and a step value
603:23 - okay
603:25 - uh reverse so takes a sequence and
603:27 - produces
603:29 - res or not reverse
603:31 - reserve sorry reserve takes a sequence
603:33 - and produces a number
603:35 - uh induced sequence of the same length
603:37 - with all the same elements as the given
603:39 - sequence but in reverse order
603:41 - oh it is reverse r e reverse i guess i
603:44 - spelt it wrong here sorry reverse one
603:47 - two three three two one just notice this
603:49 - is a spelling mistake okay
603:51 - uh set intersection so function takes
603:53 - multiple sets and produces a single set
603:56 - containing only the elements that all of
603:58 - the given sets have in common in other
604:00 - words it computes the intersection of
604:02 - the sets
604:04 - well that's tiring so from what i can
604:06 - tell it's like they all have b so give
604:08 - us b right
604:10 - set product functions find all the
604:12 - possible combinations of elements from
604:14 - all
604:14 - of the given sets by computing the
604:16 - kardasterian product we're really
604:18 - getting into math here so
604:20 - we got app one and app two
604:23 - and so we get uh development develop
604:26 - okay so this continues on so it's gonna
604:27 - say give me app one with development
604:29 - give me uh
604:30 - app two with development then app one
604:32 - with staging and then app two with
604:33 - staging and etc etc because that's why i
604:36 - put the three dots there
604:37 - set subtract function returns a new set
604:40 - containing the elements from the
604:42 - from the first set that are not present
604:44 - in the second set and in other words it
604:46 - computes the relative complement of the
604:49 - first set in the second set
604:52 - uh it lost me there but it says set
604:54 - subtract so here i see a b and c a and c
604:57 - minus it you get b okay
605:00 - set union function takes multiple sets
605:02 - and produces a single set containing the
605:04 - elements from all the given sets in
605:06 - other words it computes the union of the
605:08 - sets
605:09 - so it says set union so we have
605:12 - a b b c and d and in the results we get
605:15 - d b c a so i guess
605:19 - um single set containing the elements
605:21 - from all the given so yeah yeah i guess
605:24 - it's just we get unique ones across the
605:25 - sets uh we have slice and notice like
605:28 - we're going through all these things
605:29 - it's like you probably won't use these
605:30 - more exotic ones so it's not a big deal
605:32 - if we don't nail them here but it's
605:34 - important that we go through these so
605:35 - that you know you just know all the
605:36 - options are here so slice extract some
605:39 - constructive
605:40 - consecutive elements from within a list
605:43 - so here we are saying one and three so
605:45 - we have b and c that's where they start
605:47 - index one
605:49 - [Music]
605:50 - and then
605:51 - extract some consecutive elements from
605:53 - within a list
605:54 - one
605:55 - comma three
605:57 - okay
605:59 - sort takes a list of strings and returns
606:01 - a new list with those strings sorted
606:04 - lexographically so we have e d a and x
606:07 - and so now they're alphabetical so a d e
606:10 - and x
606:12 - well i think this is the last one uh sum
606:14 - takes a list of set numbers and returns
606:16 - the sum of those values that's pretty
606:17 - straightforward add them all up
606:19 - transpose take a map of list of strings
606:21 - and swap the key and values to produce a
606:24 - new map a list of strings so kind of
606:26 - like inverts it values takes a map and
606:29 - returns a list containing the values of
606:31 - the map so we saw this earlier we got
606:33 - the keys this is where we just want to
606:34 - get the values
606:35 - zipmap so construct a map from a list of
606:38 - keys and a corresponding list of values
606:40 - so we have a b one two and this turns it
606:43 - into a equal one b equals two i think i
606:45 - saw this on the exam so that one you
606:47 - might wanna remember but yeah that's
606:49 - collection functions as you can imagine
606:51 - they're extremely powerful but they can
606:52 - also be really confusing so maybe just
606:54 - use them a little bit when you need to
606:56 - okay
606:57 - [Music]
607:01 - we're taking a look here at encoding and
607:03 - decoding functions so functions that
607:04 - will encode and decode for various
607:06 - formats so imagine we need to encode
607:09 - into base64 so we do hello world or
607:12 - imagine we give that
607:14 - encoded string and we want to decode it
607:16 - back to hello world uh that's what we
607:18 - can do so there's a lot of different
607:20 - encoding decoding functions most of them
607:22 - are the same they're just kind of
607:23 - variants so we're not going to go
607:24 - through every single one but i'll list
607:26 - them out so you know what they are so we
607:27 - have base64 encode json and code text
607:30 - encode base64 yamlin code base64 gzip
607:33 - url and code
607:35 - base64 decode csv code json decode text
607:39 - decode base64
607:40 - yaml decode
607:42 - and just notice that you know these
607:44 - aren't one to one so there is one for
607:45 - this
607:46 - uh we have one for here
607:48 - uh we have one for yaml
607:51 - and this is unique this is unique this
607:54 - is unique okay just so you can tell for
607:57 - your encode i think this one's a very
607:59 - common one that you'll use but the idea
608:00 - is that let's say you have hello world
608:02 - you want to replace that string with a
608:04 - whatever friendly for a url right so it
608:06 - just encodes it okay it's very useful
608:08 - when you're making uh url links so there
608:11 - you go
608:12 - [Music]
608:16 - we're taking a look here at file system
608:17 - functions so this has everything to do
608:19 - with the file system so the first is
608:20 - absolute path so the idea is you give it
608:22 - something that's relative and it's going
608:24 - to give you something absolute
608:26 - directory name so this is a string
608:28 - containing a file system path and
608:30 - removes the last portion from it so we
608:32 - don't need the file name so we just
608:34 - remove that off of there we have path
608:36 - expand so it takes a fascism path that
608:38 - might begin with a tilde and expands it
608:41 - into uh its absolute path so this would
608:44 - be like for home okay
608:47 - base name so it takes a string
608:49 - containing a file system path and it's
608:51 - basically the opposite of directory name
608:52 - we just want the file here okay
608:55 - onto uh the next page here
608:58 - this file will read the contents of the
608:59 - file pretty straightforward
609:02 - we can check if a file exists so we just
609:04 - do file exists here we have file set so
609:07 - it enumerates a set of regular file
609:08 - names given a path and pattern
609:11 - file base64 so reads the contents of a
609:14 - file at a given path and returns the
609:16 - base64 encoding that might be good for
609:18 - images template file so reads the file
609:21 - at a given path and returns its content
609:23 - as a template using a supplied set of
609:26 - template variables so that's really
609:28 - useful if you want to do some kind of
609:30 - templating
609:31 - and just notice it's a two-set process
609:33 - so this is the template file the actual
609:35 - file itself and then we load it here
609:36 - it's called a dot tpl
609:39 - so there you go
609:40 - [Music]
609:44 - we're taking a look at date and time
609:46 - functions the first is format date so
609:48 - the idea is that we provide a
609:51 - format that we want and then we give it
609:53 - a time stamp that is in the rfc 3339
609:56 - format and we get a variety of different
609:58 - um
609:59 - formats out there we can add time so
610:02 - again it's gonna be that rfc 339 format
610:04 - and we say add 10 minutes add one hour
610:07 - then we have timestamp so you it returns
610:09 - a utc timestamp string in the rfc 3239
610:12 - format so you just say timestamp it's i
610:14 - guess it would get right now and then
610:15 - you get it in that format okay
610:18 - [Music]
610:22 - let's take a look at hash and crypto
610:23 - functions so generates hashes and
610:25 - cryptographic strings so the most
610:27 - popular one out there would probably be
610:29 - b crypt so here we just say hello world
610:30 - and we're going to get this thing here
610:33 - uh understand that a hash cannot be
610:35 - reversed so once it is turned uh into uh
610:38 - you know this format the only way you're
610:40 - going to be able to confirm the contents
610:42 - of it is to
610:43 - hash something that is similar and then
610:45 - compare it against it okay
610:47 - so we have base 64
610:49 - sha256 we have 512 we got bcrypt we have
610:52 - file base64 64 sha-256 file based 64
610:55 - sha-512 file md5 file sha 1 file sha 56
611:01 - file sha 512 md5 rsa decrypts sha 1 sha
611:06 - to v6 sha-512 uuid uid v5 so i only
611:11 - showed the one because you know
611:14 - it gets kind of boring to go through all
611:15 - these and really it's just going to be
611:16 - based on your use case what you're going
611:18 - to be using on a day-to-day basis is
611:20 - probably bcrypt md5 and uuids so there
611:23 - you go
611:24 - [Music]
611:28 - let's take a look at ip network
611:30 - functions these are the coolest
611:31 - functions i think that are built into
611:32 - terraform so we have cider hosts so what
611:35 - we can do is give ourselves a um
611:38 - a address and then we can give it a
611:40 - subnet mass size and we'll get back an
611:42 - ip address
611:44 - and so you can see we have this both in
611:45 - the ipv4 and the ipv6
611:48 - we have cider net mask so here we are
611:52 - doing saturn net mass so we just say
611:55 - forward slash 12 and it's going to
611:56 - translate it into the full ipv4
611:59 - then we have cider subnet so this is
612:02 - just where we say okay i want a subnet
612:04 - of a particular size so we say 172 16 0
612:08 - 0 comma 4 2 and look it's going to give
612:11 - us 18 0 back this doesn't make sense
612:13 - that's okay i mean networking is really
612:15 - hard but i just want you to know that
612:17 - these functions are here for you okay
612:19 - cider subnet calculates a sequence of
612:21 - consecutive ip addresses within a
612:23 - particular cider prefix so four four
612:25 - eight four and then you get those sizes
612:27 - there okay
612:30 - [Music]
612:33 - all right we're on to type conversion
612:35 - function so the first we're looking at
612:36 - is can so can evaluates the given
612:38 - expression and returns a boolean value
612:40 - indicating whether the expression
612:41 - produced a result without any error so
612:44 - can we use this right so we say local
612:46 - dot foo dot bar and so you know if if
612:49 - this foo wasn't defined then it would
612:50 - say false but apparently we made it all
612:53 - the way to bar okay
612:55 - we have defaults a specialized function
612:57 - intended for use with input variables
612:59 - whose type constraints are object types
613:00 - or collection of object types that
613:02 - include optional attributes
613:05 - and i don't show that one here because
613:06 - it's not that exciting but non-sensitive
613:08 - takes a sensitive value and returns a
613:10 - copy of that value with the sensitive
613:12 - markings removed therefore exposing the
613:14 - sensitive values so if we have an output
613:16 - here and we want to make it
613:18 - non-sensitive that's what we could do
613:20 - then sensitive as you imagine is just
613:23 - the opposite okay
613:26 - um we have to bool so converts its
613:29 - arguments to a boolean value so if we
613:30 - have a string that's true we can turn it
613:32 - into a real boolean value we have to map
613:34 - converts an argument to a map value to
613:36 - set converts it to a set to list
613:39 - converts it to a list two number
613:41 - converts it to a number uh string to
613:44 - string and then we last we have is try
613:46 - so evaluates all of its arguments
613:48 - expressions in turn returns the result
613:50 - of the first one that does not produce
613:52 - any errors the thing that's the hardest
613:54 - to figure out is set i cannot find
613:57 - really good examples of documentation on
613:58 - the use case of set there are some cases
614:00 - where you need to use sets which is an
614:02 - actual type but even talking to da's and
614:05 - technical writers they weren't even sure
614:07 - themselves so
614:08 - this is not something you're going to
614:09 - come across very often but
614:11 - there's like one case where i saw it so
614:13 - i'll probably point that out when we do
614:14 - hit it okay
614:15 - [Music]
614:20 - hey this is andrew brown from exam pro
614:21 - and we are going to go take a look at um
614:25 - built-in functions as soon as my
614:26 - terminal decides to be responsive i
614:28 - don't know why as soon as i start
614:29 - recording it decides to lock up
614:31 - so let's just give it a moment there
614:32 - there we go and so i have a new folder
614:34 - there i figured we could just define
614:35 - some variables so that we don't have to
614:37 - uh
614:39 - you know constantly write stuff in so
614:41 - we'll just say main.tf
614:44 - we're going to go terraform here
614:48 - and so might be fun to you know set kind
614:51 - of some kind of variable here and so i
614:53 - have off screen here all the functions
614:55 - so we're just going to kind of pick some
614:57 - at random here to play around with so we
614:59 - get some experience okay
615:00 - so just going through strings
615:04 - i think what we can do is define like
615:06 - our string so we just say str here
615:09 - and we'll just say type equal string
615:12 - and we'll just say default here able to
615:14 - say hello
615:16 - world
615:18 - forward slash n
615:20 - something like that
615:22 - okay
615:24 - and then we'll do terraform console here
615:30 - i gotta remember to do it this way
615:35 - so we do var.str
615:38 - okay so that accesses our string there
615:41 - maybe we might want to take out the new
615:42 - line for now
615:50 - so i'm just going to kind of pull this
615:51 - up over here
615:53 - look at some kind of things we can do
616:02 - okay maybe collapse that get that out of
616:04 - the way all right so um there's a lot of
616:06 - string functions and on the exam they
616:08 - might actually ask you some which is in
616:10 - my opinion i don't i don't really like
616:12 - that but that's what they do
616:13 - and so you might we might want to look
616:15 - at something like split or something so
616:18 - here we could do
616:21 - hello world
616:24 - okay
616:27 - start that up again
616:29 - so we'll do split
616:31 - comma
616:33 - var str okay and that would split that
616:36 - into a list
616:38 - we might want to do something
616:41 - like upper so i think we did that
616:44 - earlier where we did upper
616:49 - okay
616:51 - you might want to do trim
616:52 - remove specify characters from the start
616:54 - and end of a string so maybe we have
616:57 - this here
617:03 - and so we'll say
617:04 - trim
617:06 - var str
617:10 - and
617:10 - whoops that's not what i wanted it to do
617:15 - trim bar str
617:18 - like that okay
617:22 - and uh there's again there's not a lot
617:24 - that's exciting here maybe we'll try a
617:26 - replace
617:27 - so we can do replace
617:30 - and we'll we want to replace we will
617:32 - provide our string
617:34 - and then the substring that we're
617:35 - looking for so world
617:37 - replace that with barsoon which is mars
617:41 - there we go
617:45 - so nothing super exciting over there
617:48 - uh what's more interesting are some
617:49 - things like these hash and cryptos
617:51 - so something we might want to generate
617:53 - out as a uuid
617:54 - i think that we might be able to do this
617:56 - here so let's just see what happens if
617:57 - we try to call it like that
618:01 - clear
618:02 - terraform cloud
618:06 - oops terraform console that's what i
618:07 - meant to type
618:10 - and so functions can't be called in here
618:12 - which is totally fine
618:14 - so go back and just set that like that
618:18 - i just wanted to show you that
618:20 - so if we did uuid we would get that
618:24 - if we used bcrypt
618:27 - so let's say bcrypt
618:32 - hello world
618:39 - okay
618:42 - might be something interesting the ip
618:44 - network here
618:46 - so you might want to generate out a
618:48 - cider subnet
618:50 - right
618:52 - the type of conversions is something
618:54 - that you might come across a bit so we
618:56 - already saw that when we converted a set
618:57 - to a list and things like that
618:59 - so maybe we might want to convert
619:01 - something to a boolean so we might say
619:03 - to bool
619:06 - true
619:08 - okay
619:12 - these are pretty complicated the
619:13 - collections
619:14 - but we might have something that we want
619:16 - to do here so last might be something
619:17 - that's interesting where we have an
619:19 - array so or
619:21 - a list i suppose
619:23 - so we might say like items
619:29 - and make that a list
619:34 - null
619:35 - null empty
619:38 - last
619:39 - okay
619:44 - bar
619:44 - items so we might say coal
619:49 - less
619:51 - okay
619:54 - and that didn't look like it pulled
619:55 - anything out of there to perform
619:57 - coalesce operation with a list of
619:59 - strings use this symbol so we could use
620:01 - that um
620:03 - to do that so that just kind of expands
620:05 - the arguments and so that what happened
620:08 - here is null didn't exist all didn't
620:09 - exist this didn't exist so it pulled out
620:11 - last okay
620:15 - maybe we might want to just use keys
620:18 - maybe we might just want to use keys
620:19 - here
620:36 - okay so i'm gonna say like hello
620:43 - world
620:45 - goodbye
620:49 - moon remember we can do uh hash
620:52 - rocket arrow equals or colons just up to
620:54 - your preference i just wrote that in for
620:56 - whatever reason i'm used to using ruby
620:58 - and that's what we use as hashrockets
620:59 - that's the name of the symbol the a
621:01 - equals arrow
621:02 - um okay it didn't like that so i guess
621:05 - we do have to do it this way that's
621:07 - totally fine i'm not upset by that i
621:08 - thought it supported all three
621:11 - maybe it's like minus equals or
621:13 - something i don't know
621:14 - but we'll do say it's a var stuff
621:18 - and then what we can do here is do keys
621:22 - okay
621:24 - and
621:25 - it didn't look like it grabbed the oh
621:27 - yeah i grabbed the keys that's fine okay
621:28 - and then we might say values
621:32 - all right
621:35 - um
621:37 - you know maybe we might want to try
621:38 - reverse that one's pretty clear
621:47 - one two three
621:52 - okay so nothing super complicated um i
621:54 - wonder if absolute would work in here
621:56 - like the file system so we have absolute
621:57 - path
621:59 - but i don't know if this would produce
622:00 - anything here oh it does okay so get abs
622:03 - path
622:05 - say path dot root
622:07 - there you go
622:09 - okay so that pretty much gives you a
622:10 - general idea of built-in functions so
622:13 - there you go
622:14 - [Music]
622:18 - all right let's take a look here at
622:19 - terraform cloud again but in greater
622:21 - detail so terraform cloud is an
622:23 - application that helps teams use
622:24 - terraform together uh and so there is
622:26 - the ui there and terraform cloud is
622:28 - available as a hosted service on
622:30 - terraform terraform dot io it's actually
622:32 - the app.terraform.i once you're logged
622:34 - in and it has a lot of different
622:36 - features so it can manage state files uh
622:39 - have a history of your previous runs a
622:41 - history of your previous states easy and
622:43 - secure variable injection tagging run
622:46 - triggers of chaining workspaces together
622:48 - specify any version of terraform per
622:50 - workspace global state sharing
622:52 - commenting on runs notifications via web
622:54 - hooks email and slack organization and
622:57 - workspace level permissions policy is
622:59 - code via sentinel policy sets mfa single
623:02 - sign-on uh cost estimation integrations
623:06 - with service now splunk kubernetes and
623:09 - custom run tasks and that is not the
623:12 - limit to what it does but this is what i
623:13 - could fit on the slide okay
623:18 - [Music]
623:20 - let's take a quick look here at the
623:21 - terminology or anatomy of terraform
623:24 - clouds so we have an organization and
623:26 - with an organization we have our
623:28 - workspaces and a workspace represents a
623:31 - unique environment or stack then you
623:33 - have your teams these are composed of
623:34 - multiple members and a team can be
623:36 - signed to multiple workspaces then you
623:39 - have runs a run represents a single run
623:41 - of the terraform run environment that is
623:43 - operating on an execution plan runs can
623:46 - be uh
623:47 - triggered by like you your the ui itself
623:49 - or maybe like a git repo it could be api
623:51 - driven or cli driven so there you go
623:57 - [Music]
623:58 - so there are three types of cloud run
624:00 - workflows so when you create a workspace
624:02 - you have to choose a workflow and you
624:03 - have either version control workflow we
624:06 - have cli driven workflow or api driven
624:09 - workflow okay
624:10 - so
624:11 - just going over them in greater detail
624:13 - for the first one which is that uh
624:15 - version controlled workflow uh terraform
624:17 - cloud is integrated with a specific
624:19 - branch in your vcs so githubs via web
624:22 - hooks whenever pull requests are
624:24 - submitted for branch speculative plans
624:26 - are generated whenever a merge occurs to
624:28 - that branch then a run is triggered on
624:30 - terraform cloud then you have api driven
624:32 - so workspaces are not directly
624:34 - associated with the version control
624:36 - system repository and runs are not
624:39 - driven by web hooks on your vcs provider
624:42 - a third-party tool or system will
624:44 - trigger runs via uploading a
624:46 - configuration file uh via the terraform
624:49 - cloud api so this configuration file is
624:52 - a bash script that is packaged in an
624:54 - archive and you're pushing it as a
624:56 - configuration version so you're
624:58 - basically creating configuration
624:59 - versions every time you do that then
625:01 - there's cli driven and this is the way
625:02 - we're going to be using mostly in the
625:04 - course so runs are triggered by the user
625:07 - running terraform cli commands so you'll
625:10 - run tear from apply
625:12 - and or plan locally on your machine it's
625:14 - going to just work as per usual okay
625:17 - [Music]
625:21 - let's take a look at organization level
625:23 - permissions which manage certain
625:25 - resources or settings across an
625:27 - organization so the first
625:29 - things that you can set would be
625:30 - something like manage policy so create
625:32 - edit delete the organization's central
625:34 - policies manage policy override so
625:36 - override soft mandatory policy checks
625:38 - manage workspaces so create administer
625:40 - all workspaces within an organization
625:42 - manage vcs settings so set of vcs
625:45 - providers and ssh keys available within
625:47 - the organization and for an organization
625:50 - we have this concept of organization
625:51 - owners so every organization has at
625:54 - least one organization owner and you can
625:56 - have multiple this is a special role
625:57 - that has every available permission and
625:59 - some actions only available to owners so
626:02 - this could be publishing private modules
626:04 - invite users to organizations manage
626:06 - team memberships view all secret teams
626:09 - manage organization permissions manage
626:11 - all organization settings manage
626:13 - organization billings delete
626:15 - organizations and manage agents so just
626:18 - understand that there are these special
626:19 - ones
626:20 - just for this organizational owner and
626:22 - then these are these other ones here
626:24 - that you can set for other types of
626:25 - organizational level permissions okay
626:32 - well let's take a look here at workspace
626:33 - level permissions that allows you to
626:35 - manage resources and settings for a
626:37 - specific resource and we have granular
626:39 - ones and then we have pre-made
626:40 - permissions so let's go through the
626:41 - granular permissions first so these
626:43 - granular permissions you can apply to a
626:46 - user via a custom workspace permissions
626:48 - and so we have read runs cue plans apply
626:51 - runs lock and unlock workspaces download
626:54 - signal mocks read variables read and
626:56 - write read state outputs read state
626:59 - versions read and write state versions
627:01 - and so the idea is that what you can do
627:03 - is just go and cherry pick out what you
627:05 - want to assemble
627:07 - your permissions for your user now if
627:09 - you want something a little bit easier
627:12 - to do you can use fix permission sets
627:14 - and these are pre-made permissions for
627:16 - quick assignment and they're based on
627:17 - the read plan and write so we have read
627:20 - runs read variables read state versions
627:22 - for plans we have q plans read variables
627:25 - read state versions we have write so
627:27 - apply runs lock and unlock workspaces
627:29 - download settings mocks read and write
627:32 - variables read and write state versions
627:35 - and then there are workspace admins and
627:36 - this is kind of like the organizational
627:38 - owner so a workspace admin is a special
627:40 - role that grants all level of
627:43 - permissions and some workspace
627:44 - admin-only permissions those admin-only
627:46 - permissions would be read and write
627:48 - workspace settings set or
627:50 - remove workspace permissions of any team
627:52 - and delete workspaces so there you go
627:58 - let's take a look here at api tokens so
628:00 - terraform cloud supports three types of
628:02 - api tokens users teams and organization
628:05 - tokens so for organization api tokens
628:07 - they have permissions across the entire
628:09 - organization each organization can have
628:11 - one ballot api token at a time only
628:13 - organization owners can generate or
628:15 - revoke an organization token
628:17 - organization api tokens are designed for
628:18 - creating and configuring workspaces and
628:20 - teams they're not recommended as all
628:22 - purpose interfaces to terraform cloud so
628:24 - basically you just use them when you are
628:26 - setting up your organization for the
628:28 - first time and you want to do it
628:29 - pragmatically okay then you have team
628:31 - api tokens so this allows access to
628:33 - workspaces that the team has access to
628:35 - without being tied to any specific user
628:38 - each team can have one valid api token
628:40 - at a time any member of a team can
628:42 - generate or revoke that team's token
628:44 - when a token is regenerated the previous
628:47 - token is immediately becomes invalid
628:50 - designed for performing api operations
628:51 - on the workspaces same access level to
628:54 - the workspace the team has to access to
628:57 - i would imagine this is when you're
628:58 - setting up your own custom ci cd
629:00 - pipelines or something like that i'm not
629:02 - really sure exactly the use case for
629:04 - team api tokens we have user api tokens
629:07 - the most flexible token type because
629:09 - they inherit permissions from the user
629:10 - they are associated uh could be for a
629:12 - real user or a machine user when you do
629:15 - terraform login this is what you're
629:16 - getting a a
629:19 - a user api token okay
629:22 - [Music]
629:26 - all right so i just wanted to quickly
629:27 - show you this access levels chart that
629:30 - helps you understand
629:31 - what kind of permissions you're giving
629:33 - at the access level and notice there's
629:35 - implicit and then required or explicit
629:37 - permissions i'm assuming that this means
629:38 - that you need to assign those
629:40 - permissions to the user first before
629:41 - they'd have it so just because you have
629:43 - a user token doesn't mean you get all of
629:45 - these orange
629:46 - diamonds it's just the ones that you've
629:48 - assigned to that user or team where i
629:50 - believe that the organization you're
629:52 - going to run into a chance where you're
629:53 - going to have all these permissions by
629:55 - default whether you want them or not so
629:58 - just understand
630:00 - that you have to double check this
630:01 - before you use your tokens and that this
630:03 - chart exists okay
630:05 - [Music]
630:09 - all right so we covered private registry
630:11 - earlier in the course and we were
630:12 - looking at the terraform registry the
630:13 - public one but let's cover it again with
630:15 - a little bit different information so
630:17 - terraform cloud allows you to publish
630:18 - private modules for your organization
630:20 - within terraform cloud private registry
630:22 - and tour from cloud's private module
630:24 - registry helps you share terraform
630:26 - modules across your organization include
630:28 - support for module versioning a
630:29 - searchable filterable list of available
630:31 - modules a configuration designer which i
630:34 - didn't find this thing but it sounds
630:36 - really cool all users in your
630:38 - organization can view
630:39 - your private module registry um
630:42 - authentic for authentication you can
630:43 - either use a user token or a team token
630:46 - so i guess this would be the case where
630:47 - you might want to use a team token for
630:48 - authentication but the type of token you
630:50 - choose may grant different permissions
630:52 - as we saw with the access levels uh just
630:55 - the slide prior using terraform login
630:57 - will obtain a user token just a reminder
630:59 - and to use a team token you'll need to
631:01 - manually set it in your terraform
631:03 - configuration cli file okay
631:06 - [Music]
631:10 - so there's a feature within terraform
631:12 - cloud that can do cost estimation uh and
631:14 - it is a feature that will give you a
631:16 - monthly cost of resources displayed
631:17 - alongside your runs uh this feature is
631:20 - only available starting at the teams and
631:21 - governance plant and above but the idea
631:24 - is that it will tell you for specific
631:26 - resources and then give you a summary so
631:28 - notice here that we have some pricing
631:30 - i'm gonna get my pen tool out but we
631:31 - have the overall cost and then it's
631:33 - broken down per resource and so you can
631:35 - see we have an hourly monthly and
631:37 - monthly delta
631:39 - i don't know what the monthly delta is
631:41 - but
631:42 - you know gives you kind of idea of cost
631:44 - you can use sentinel policies to assert
631:45 - the expectation that the resources are
631:47 - under a particular cost so that's just
631:49 - kind of a bonus there where you're like
631:50 - okay i want to assure my spend is this
631:52 - the only downside at least at the time
631:54 - right now for cost estimation uh is the
631:57 - amount of support it has so we have aws
631:59 - azure and gcp so these are the
632:01 - resources that it will support and so
632:02 - you have to look through here and say
632:03 - okay
632:05 - you know is there any resources i'm
632:06 - using outside of this that i really care
632:08 - about um and that so i think that if
632:11 - you're using like core services so like
632:12 - ec2 instances
632:14 - uh load balancers things like that that
632:17 - should help you out so like we see aws
632:19 - instance the load bouncer the volume
632:22 - some cloud watch logs alb
632:24 - for google it's just disk instance and
632:26 - database so yeah it's just really
632:28 - dependent on you know what's here so you
632:31 - know it may meet your needs or you might
632:33 - say okay this is not enough okay
632:38 - [Music]
632:39 - here's just a few options that i think
632:41 - are worth noting within the terraform
632:43 - cloud workflows we have a whole section
632:45 - of workflows but i decided to put it
632:47 - over here just because let's talk about
632:49 - it one thing you can do within terraform
632:50 - cloud is set whatever version you want
632:52 - so you can go as far back as you want uh
632:55 - and this is great if you need to
632:56 - mix and match uh different workspaces
632:58 - because you have different stacks and
633:00 - they were built on different terraform
633:01 - versions and you're just not ready to
633:02 - upgrade them yet you can choose to share
633:05 - state globally across your organization
633:07 - for a particular workspace this could be
633:09 - really useful if you need to reference
633:10 - things wherever
633:12 - you can choose to auto approve run so if
633:14 - you don't want to always do that manual
633:16 - approve you can do that this is great if
633:18 - you are looking for that kind of agile
633:20 - kind of workflow where uh if something
633:23 - is merged then it should be rolled out
633:24 - okay
633:26 - [Music]
633:29 - let's talk about if we had to migrate
633:31 - our local state and we're using just the
633:33 - default one two terraform cloud how
633:35 - would we do it so to migrate terraform
633:36 - projects that only uses the default
633:38 - workspace tier from cloud it's pretty
633:39 - easy you're gonna create a workspace and
633:41 - terraform cloud you're gonna replace
633:42 - your terraform configuration with a
633:44 - remote backend so if you have nothing
633:46 - it's using local and you just put in
633:47 - your remote state
633:49 - and then once you have that in there you
633:51 - do a terraform init and it's going to
633:53 - say hey do you want to copy the existing
633:54 - state you're going to type yes and once
633:56 - you've done that i believe you have to
633:57 - delete your old state file
633:59 - if you are migrating multiple
634:03 - multiple environments or you're moving
634:05 - from a standard remote backend it's a
634:07 - little bit more complicated they
634:08 - definitely have guides in the docs but
634:10 - this is the pretty much standard one
634:12 - that you're going to come across when
634:13 - you're working very early and we'll
634:14 - definitely see this as we are using
634:18 - terraform in our follow alongs okay
634:20 - [Music]
634:24 - i want to talk about what kind of
634:25 - integrations we have for terraform for
634:27 - version control systems so we have
634:29 - github github auth github enterprise git
634:32 - lab get lab ee nce i assume that's
634:35 - enterprise edition and community edition
634:37 - big bucket cloud bitbucket server and
634:38 - data center azure devops service as your
634:41 - devops server so it's very simple you're
634:43 - just going to choose from the one of the
634:45 - four
634:46 - right and then you're going to drop down
634:47 - and choose what variant it is there and
634:49 - connect your repo every single
634:52 - provider has different configuration
634:54 - settings so you might have to meet those
634:56 - depending on what they are you can get
634:58 - from private repos you might have to add
634:59 - your ssh key or something like that okay
635:02 - [Music]
635:07 - let's talk about terraform cloud run
635:08 - environment so when terraform cloud
635:10 - executes your terraform plan it runs
635:12 - them in its own run environment so what
635:15 - is a run environment a run environment
635:16 - is a virtual machine or container
635:18 - intended for the execution of code for a
635:20 - specific runtime environment a run
635:21 - environment is essentially a code build
635:23 - server so the terraform cloud run
635:24 - environment is a single use linux
635:26 - machine running on the x86 or x64
635:29 - architecture and the details of its
635:31 - internals implementation is not known it
635:33 - is possible to install software on it
635:35 - but the only issue is that we don't know
635:37 - what it is is it debian is ubuntu you
635:39 - just can't tell terraform cloud will
635:41 - inject the following environment
635:42 - variables automatically on each runtime
635:44 - so we have tfc run id this is a unique
635:47 - identifier for the current run
635:49 - the workspace name uh the workspace slug
635:52 - so this is the organization followed by
635:54 - the workspace just gonna get my pen tool
635:56 - to just kind of point out over here on
635:58 - the right hand side uh we have the
636:00 - configuration version and git branch so
636:02 - you know if it is gonna be on main it's
636:04 - gonna tell us that if it's going to be a
636:06 - particular version we'll know that as
636:07 - well we can get the shaw of the current
636:09 - commit there's that version
636:11 - and if you want to access these
636:12 - variables you just define variable and
636:14 - the name and then you can access it
636:16 - throughout the code okay
636:18 - [Music]
636:22 - let's take a look here at terraform
636:24 - cloud agents this is a paid feature of
636:25 - the business plan to allow terraform
636:27 - cloud to communicate with isolated
636:29 - private or on-premise infrastructure
636:30 - it's kind of like an in-between uh
636:32 - between a terraform cloud and terraform
636:34 - enterprise where you want to use
636:35 - terraform cloud but you have uh
636:37 - on-premise infrastructure but you're not
636:39 - ready to move to terraform enterprise so
636:41 - this is useful for on-premise
636:42 - infrastructure types such as vsphere
636:44 - nutanix and openstack the agent
636:48 - architecture is pull-based so there are
636:49 - no inbound connectivities required any
636:52 - agent you provision will pull terra from
636:53 - cloud for work and carry out execution
636:55 - of that work locally agents currently
636:57 - only support the x86 architecture or the
637:00 - x64-bit linux operating system okay so
637:04 - you can also run the agent within docker
637:07 - using the official terraform agent
637:09 - docker container if you just prefer that
637:10 - over a vm agent supports terraform
637:12 - versions 0.12 and above the system
637:16 - require
637:17 - this request the system requires i'm
637:20 - going to change that
637:21 - in the slide later on but the system
637:23 - requires at least four gigabytes of
637:26 - freedom space for temporary temporary
637:28 - local copies and two gigabytes of memory
637:31 - needs access to make outbound requests
637:34 - uh so you need to have open port 443 for
637:37 - app terraform io registry terraform io
637:40 - releases hashcorp.com and um archivist
637:45 - dot tara for my i o so there you go
637:47 - [Music]
637:51 - hey this is andrew brown from exam pro
637:53 - and we are on to our terraform cloud uh
637:55 - follow alongs now we already did
637:56 - terraform cloud version control system
637:58 - earlier than i thought we were going to
637:59 - do so i'm going to remove from the list
638:01 - and what we'll do is focus on
638:02 - permissions and maybe the api tokens and
638:05 - things like that so what i want you to
638:06 - do and i've got some old tabs open here
638:08 - i'm going to make my way over to
638:11 - terraform dot io
638:13 - and i'm going to go log into terraform
638:14 - cloud here
638:16 - and i don't think i've ever done this
638:17 - but i can upgrade to the trial account
638:19 - because the thing is is that when we are
638:21 - in our account here and we're trying to
638:23 - look at
638:24 - permissions and we're not using force
638:25 - and locking anymore i might just keep
638:27 - that around for a little bit but if we
638:29 - were to go to our user settings here we
638:32 - go to organizations
638:34 - um that might not be a very good example
638:38 - i guess i wanted like the organization
638:40 - settings here
638:42 - which would be
638:45 - maybe here yep up here
638:47 - and so you know when we go to our teams
638:49 - and our users our users everyone's being
638:51 - added as an owner we don't have like
638:53 - granular permissions and that's because
638:55 - we'd have to upgrade and so
638:57 - i figured this would be a good
638:58 - opportunity for me to kind of upgrade to
639:00 - show you those more detailed role based
639:02 - access control permissions just so you
639:05 - know where they are so i'm going to go
639:06 - the upgrade now and notice that we're on
639:08 - the free plan and also take note because
639:11 - um later on the course i talk about
639:13 - pricing or we've already already across
639:14 - it but notice that we have a team plan
639:16 - and a team and governance plan this
639:18 - one's at twenty dollars and this one's
639:19 - at seventy dollars
639:21 - so you know this is not something that's
639:22 - reflected at least not right now on the
639:25 - terraform website and so it just looks
639:27 - like there's a team in governance plans
639:28 - for 20 and this middle one's missing
639:31 - the key difference here is this one has
639:32 - sentinel policies code but you can see
639:34 - on the free plan we are able to do
639:36 - team based stuff
639:38 - let's go switch over to the trial plan
639:40 - i'm going to see if i can do this
639:41 - without entering a credit card in
639:43 - so here it says you're currently on
639:44 - trial plan i didn't have to enter
639:46 - anything in that's really great and so
639:48 - that means now i have all these team
639:49 - management options so if i go over to
639:51 - team management
639:53 - um i can actually go ahead and create
639:54 - some teams
639:56 - so i'll just say like developers
640:01 - okay
640:02 - and so now i have all these options so
640:04 - we can say this person if someone's in
640:06 - this team they're allowed to manage
640:07 - policies they're able to do that
640:10 - uh a visible team can be seen by every
640:12 - member or we can keep them secret we can
640:14 - generate
640:15 - team api tokens which i guess we could
640:18 - just like cover this as we do it but
640:20 - notice we can go here and that generates
640:22 - out that token that we can use i'm going
640:23 - to go ahead and delete that token
640:26 - um so nothing super exciting there you
640:28 - know it's not like that complicated
640:31 - if we want to
640:32 - set things on the workplace now if we go
640:34 - back to
640:35 - workplace or workspaces here
640:38 - and now we have team access
640:40 - and notice i can go to add team
640:43 - permissions here
640:44 - and we can say select this team for
640:46 - their permissions
640:48 - and so these are these uh pre-built ones
640:50 - in um
640:52 - so we have read plan rights so these are
640:54 - those three predefined ones that we
640:56 - talked about previously and then we have
640:58 - down here like assign permissions for
641:00 - the admin of a workspace
641:02 - we are able to set customized
641:03 - permissions so if we toggle this
641:06 - we should be able to do it i mean this
641:08 - looks like it's the same thing no i
641:10 - guess it's more granular so here i guess
641:12 - we have our granular permissions that we
641:13 - can set so for runs we can do read plan
641:15 - or reply
641:17 - lock or unlock a workspace
641:20 - send unlocks things like that
641:23 - it's not super complicated
641:26 - if you want to drain out api tokens for
641:29 - uh well there's the organizational one
641:31 - there's the teams one and then there's
641:33 - the user one so
641:35 - if we go to
641:37 - the organization
641:40 - we can see that we can generate out one
641:41 - here so i can say create an api token so
641:43 - there it is let's go ahead and delete
641:45 - that
641:46 - and if we go back to
641:48 - our teams
641:52 - we did this earlier but we can generate
641:54 - one here
641:56 - and then if you want to generate one for
641:58 - your user it's probably under user
641:59 - settings
642:00 - yeah so we generate tokens there as well
642:02 - okay
642:06 - so i mean again there's not a lot to
642:08 - talk about here but
642:10 - yeah so i guess that really covers
642:11 - permissions and api tokens okay
642:13 - okay so that finished uh deploying there
642:15 - and so we can see our resources have
642:17 - been created but one thing that uh we
642:18 - didn't set was the prefix i'm actually
642:22 - interested to see that that worked
642:23 - properly but what i could do is say
642:25 - prefix
642:29 - and then do an underscore here i don't
642:30 - know how that would affect it
642:37 - and this actually happened over in this
642:40 - repository here i'm actually using a
642:41 - hyphen so i'm going to just change that
642:43 - to that
642:54 - i might have to do a terraform ended
642:55 - there migrate the state
643:04 - so that was a complete mistake on my
643:05 - part but i guess my thought was that i
643:07 - thought i had to have
643:09 - um this is still on main and i guess we
643:11 - never really set up a production branch
643:12 - but yeah so now when we have the prefix
643:14 - end it's actually going to prompt us for
643:16 - the other one so the currently selected
643:17 - workspaces are default
643:19 - does not exist and so dev is showing up
643:21 - and notice that we can't deploy domain
643:23 - so i think the thing is is that if we
643:25 - wanted a production one we would just
643:26 - create that workspace and then it would
643:28 - reflect here so the way you make uh
643:31 - multiple workspaces here would actually
643:33 - have to make them all so we'd have to
643:34 - make a vcs terraform prod and i'm very
643:37 - certain that it would just show up here
643:38 - and then you would select the number
643:40 - that you'd want uh though what's
643:42 - interesting is the fact that we are in
643:43 - the dev branch and we have to say oh i
643:45 - want to deploy the dev1 so that's kind
643:48 - of a little bit of a caveat there but i
643:50 - guess there's not really any way around
643:51 - it but i mean this pretty much
643:53 - you know explores
643:55 - what we need for um multiple workspaces
643:57 - we tear from cloud and we did the remote
643:59 - ones and
644:00 - we're all good so there we go i guess
644:02 - the last thing here we should probably
644:03 - do is just clean up so if we go to
644:05 - terraform dev here
644:07 - we're gonna go down to destruction
644:10 - and we'll run a destroy plan
644:14 - here okay
644:18 - and once this is all done you know you
644:20 - can go ahead and
644:22 - just delete these repositories
644:25 - and notice this one is it has a private
644:27 - lock on it so oh because it's actually
644:28 - running right now so it's being locked
644:30 - so
644:31 - yep there we go so that's it
644:33 - [Music]
644:37 - all right now let's take a look at the
644:39 - terraform registry the private registry
644:41 - so just go over here and click on
644:42 - registry at the top and we can bring in
644:44 - public
644:46 - public things here so i can just go here
644:48 - and type this in and we can hit add
644:51 - and so now
644:53 - we just hit add terraform cloud
644:56 - add to my organization and that's public
644:58 - facing but we could also add private
645:00 - facing modules
645:02 - so if we go back to our registry here
645:05 - i'm just going to go ahead and
645:09 - down to publish here
645:11 - and we go to github
645:13 - and i guess custom
645:16 - and so then i suppose we just have to
645:17 - enter all the stuff in here so as an
645:19 - optional display name for your v version
645:22 - control provider
645:24 - client ids client secrets
645:29 - so it seems like there's a lot of work
645:30 - to do we'd have to set up the ssh key
645:32 - pair but i mean that's generally the
645:34 - details that you need to know for that
645:35 - okay
645:36 - it just seems like a lot of work for us
645:38 - to set that up um you know and the
645:40 - course is just gonna be like hey can you
645:42 - add a private module and be like yes
645:43 - okay
645:44 - so go ahead and just remove this
645:46 - so you can add both public and private
645:48 - modules
645:49 - um you know so there you go
645:55 - [Music]
645:56 - i have mentioned terraform enterprise so
645:58 - many times in this course but uh we've
645:59 - never really talked about in detail and
646:01 - now is our opportunity to do so so
646:03 - terraform enterprise is the self-hosted
646:06 - distribution of terraform platform and i
646:08 - just want to point out sometimes i call
646:10 - the terraform platform terraform cloud
646:12 - just because that's the more prominent
646:14 - uh version of it but terraform cloud is
646:16 - a separate product
646:17 - from terraform enterprise it's just one
646:20 - is
646:21 - assassin the other one is self-hosted so
646:24 - terraform enterprise offers a private
646:25 - instance of the terraform platform
646:27 - application with the benefits such as no
646:29 - resource limits with additional
646:31 - enterprise grade architectural features
646:32 - such as audit logging so you do you'd
646:34 - have tamper evidence saml single sign-on
646:37 - and i'm sure there's a lot more other
646:39 - options there so let's just kind of look
646:40 - at the architecture really quickly on
646:42 - how this works so the first thing is you
646:43 - have the terraform platform which is
646:45 - going to be installed on a machine and
646:47 - in particular this is installed on linux
646:50 - and uh it's specifically installed on
646:52 - debian okay so i believe that is the
646:54 - debian logo as far as i remember if it's
646:57 - not we'll find it on the next slide if
646:58 - i'm wrong okay
647:00 - you're gonna have to have some kind of
647:01 - storage and there's a few different
647:03 - options uh probably the most common is
647:05 - going to be on something like s3 but you
647:08 - can store it on the storage or on the
647:10 - disk itself
647:12 - you have to have a postgres database uh
647:14 - so that's part of the infrastructure
647:16 - because that is what the platform uses
647:18 - and you'll also have to have your own
647:20 - tls certificate to access the machine
647:24 - but there are also cases where you know
647:26 - these are going through air-gapped
647:27 - environments but the idea is that you
647:28 - have um ssl or tls it's like end to end
647:31 - encryption it goes all the way to the
647:33 - machine that's where it terminates okay
647:35 - um you'll also need your terraform
647:36 - license so you'll have to plug that in
647:38 - once you start up the terraform platform
647:40 - and say hey tell us the code so you can
647:42 - unlock this um
647:44 - this software for you to use on this
647:46 - dedicated machine okay
647:48 - [Music]
647:52 - so the requirements for terraform
647:54 - enterprise is going to highly vary based
647:56 - on your operational mode that you choose
647:57 - to run it in and that is really
647:59 - dependent on how data should be stored
648:01 - and when we were looking at the the
648:03 - architectural diagram that was uh the
648:06 - operational mode of external services
648:08 - there's three types of operational modes
648:09 - the first being external services that's
648:11 - when you use postgres and then
648:14 - use cloud storage so in that example
648:16 - we're using s3 but you can use gcp azure
648:18 - blob storage or mino object storage
648:21 - but the idea is that postgres and the
648:23 - cloud storage are external they're not
648:24 - part of that linux server okay then you
648:27 - have a mounted disk so this would just
648:29 - be having a
648:30 - persisted disk attached to
648:33 - the vm so you know in the best case it's
648:36 - called ebs so this stores data in a
648:38 - separate directory on the host intended
648:40 - for external disk so that would be both
648:42 - the postgres database and the storage
648:44 - volume itself you know postgres is still
648:46 - a requirement in no matter what mode you
648:48 - use then you have demo so stores all
648:51 - data on the instance data can be backed
648:53 - up with snapshots not recommended for
648:54 - production use so this is
648:56 - where you have ethereal data so you know
648:59 - the data you know can vanish if you
649:01 - restart the machine unless you make
649:02 - physical snapshots
649:04 - another component is credentials ensure
649:06 - you have credentials to use enterprise
649:09 - and have a secure connection so the
649:11 - first is we need the terraform
649:12 - enterprise license so you obtain that
649:14 - from hashicorp and the other part is
649:16 - having a tls certificate and private key
649:17 - so you need to prove
649:19 - uh your the you own
649:21 - uh your own tls certificate okay
649:24 - then we have the linux instance so
649:26 - terraform enterprise is designed to run
649:28 - on linux and it supports more than one
649:31 - version so you know i said it was only
649:32 - debian but i guess there's a bunch i
649:34 - just forgot so we have debian ubuntu red
649:37 - hat centos
649:39 - amazon linux uh there's a variety for
649:41 - those oracle linux
649:43 - um so yeah i guess i'm just a big fan of
649:45 - debian so that's i guess that was my my
649:47 - thinking there for hardware requirements
649:49 - we have at least 10 gigabytes of disk
649:51 - space on the root volume at least 40
649:53 - gigabytes of disk space for the docker
649:55 - data directory so that would be the var
649:58 - lib docker
649:59 - at least eight gigabytes of the system
650:02 - memory and at least four cpu
650:04 - cores so there you go
650:07 - [Music]
650:12 - let's talk about air gapped environments
650:13 - so what is an air gap an air gap or
650:15 - disconnected network is a network
650:17 - security measure employed on one or more
650:19 - computers to ensure that a secure
650:21 - computer network is physically isolated
650:23 - from unsecure networks so the public
650:25 - internet so
650:26 - it's no internet no outside connectivity
650:29 - industries in the public sector so
650:31 - government military or large enterprises
650:32 - finance and energy often employ air gap
650:34 - networks and so i want you to know that
650:37 - hashicorp terraform enterprise supports
650:38 - an installation type of air gap
650:40 - environments okay so to install or
650:43 - update terraform enterprise you will
650:44 - supply an air gap bundle which is an
650:46 - archive of a terraform enterprise
650:48 - release version so that's how you would
650:50 - um you know provided okay
650:52 - [Music]
650:56 - so let's take a look at terraform cloud
650:58 - features and pricing so i just want to
651:00 - quickly go through it here so
651:02 - we have three models we have the open
651:04 - source software so oss we have the cloud
651:07 - offerings and the self-hosted offerings
651:09 - and all these tiers we have free
651:11 - teams and governance technically it's
651:14 - teams
651:15 - and then teams and governance so they're
651:17 - two separate plans but this is the way
651:19 - they display it uh in their marketing
651:21 - content but it really is a separate two
651:22 - separate tiers in there you have
651:24 - business and then enterprise which is
651:26 - considered self-hosted so in terms of
651:28 - feature set
651:29 - across the board you have iec
651:32 - workspaces
651:33 - variables runs resource graphs providers
651:36 - modules the public model registry which
651:38 - is terraform registry workspace is a bit
651:41 - odd because there are terraform cloud
651:43 - workspaces right
651:45 - and then you have local workspaces so
651:47 - technically those should be broken up
651:49 - into two separate things
651:51 - or named differently but that's just how
651:53 - it is with terraform so you know just
651:55 - asterisk on that workspace is there for
651:57 - the free tier you get remote state or
652:00 - sorry for everything outside of the open
652:02 - source you get remote state vs uh vsc
652:04 - connection so that's version control
652:06 - state connection so connecting to github
652:09 - or
652:10 - or git lab whatever workspace management
652:12 - secure variable storage remote runs
652:14 - private module registry uh once we get
652:17 - into cloud we get team management
652:19 - sentinel policy is code management cost
652:21 - estimation the reason why i have that in
652:23 - red is because on the exam it could ask
652:25 - you when is sentinel policy available is
652:27 - it available at what level and the thing
652:30 - is it goes from
652:31 - teams and governments all the way to the
652:33 - enterprise level now technically there
652:36 - is again
652:37 - one called teams and there's teams and
652:39 - governance so it's part of teams in
652:40 - government it's not part of teams okay
652:44 - once we get into business this is where
652:45 - we start to get single sign-on and audit
652:47 - logging so you know if you need it in
652:49 - the cloud or if you need it self-hosted
652:51 - both options are available
652:54 - in the business we have the you can have
652:56 - the self-hosted agents for configuration
652:59 - designer servicenow integration you have
653:01 - it for those uh as well
653:04 - in terms of how many
653:06 - runs you can have this is very important
653:08 - because this is how many this is going
653:09 - to put a bottleneck in terms of your
653:11 - infrastructure right so on the free
653:12 - terror you can have one current run
653:14 - uh of a workspace in teams you can have
653:18 - two and then at the business level and
653:20 - beyond it's unlimited current runs for
653:23 - uh how you would actually interact with
653:25 - um
653:26 - terraform you know this is going to be
653:28 - through the local cli for the open
653:29 - source software uh for these it's cloud
653:32 - meaning that um
653:34 - it's cloud that is triggering the
653:36 - execution commands and then self-hosted
653:38 - it's not in the cloud it's on that
653:40 - private machine okay
653:42 - uh then we have support so for support
653:45 - it's all community um so that's just
653:47 - going reaching out to da's maybe there's
653:49 - a slack channel i believe that they have
653:52 - a forum so they have like a forum where
653:54 - you can ask questions and then they have
653:56 - these layers like bronze silver and gold
653:59 - i could not determine what these are
654:02 - like what is offered in them and the odd
654:04 - thing is is that you know there's a
654:06 - silver and gold but it's offered both at
654:07 - business and enterprise so i don't know
654:09 - if like you can upgrade to from silver
654:11 - to gold so it's optional or you always
654:13 - get silver and gold could not get
654:15 - clarification i tried asking the sales
654:17 - team no one would tell me so i think you
654:19 - have to really be deep in that sales
654:21 - funnel to find out uh in terms of
654:23 - pricing it's zero to up to five users so
654:26 - the thing is
654:28 - and this is really confusing about
654:29 - terraform cloud and they really
654:30 - shouldn't have called it teams up here
654:32 - but you can start using terraform cloud
654:35 - for free up to five users as a team
654:38 - okay so just negate the fact that it's
654:40 - not called teams what they're saying is
654:42 - that teams is really about getting um uh
654:47 - basic workspace remote management which
654:49 - is actually our rba like um
654:52 - our abc controls
654:54 - uh role-based access controls so that's
654:56 - the whole point of using teams so if you
654:58 - need that and that's when you're at five
655:00 - that's how you use it but you can use it
655:02 - in the free tier as a team and you
655:04 - absolutely should
655:05 - once you get to the team's plan it's
655:07 - going to be twenty dollars a month and
655:09 - then if you need teams and governance
655:11 - it's actually like seven dollars a month
655:12 - so again it's kind of like a bit
655:14 - misleading how they've labeled this out
655:16 - but if you go and open up teams cloud
655:18 - you can see
655:19 - what the actual packages are
655:21 - for uh business self-hosted
655:24 - your contact and sales so i have no idea
655:26 - what the cost is there so there you go
655:28 - [Music]
655:32 - all right we're taking a look here at
655:33 - workspaces so workspaces allow you to
655:36 - manage multiple environments or
655:37 - alternate state files such as
655:39 - development or production and there are
655:41 - two variants of the workspace we have
655:42 - cli workspaces a way of managing
655:45 - alternate state files locally or via
655:47 - remote backends and then we have
655:48 - terraform cloud workspaces that act like
655:51 - completely separate working directories
655:53 - i'm going to tell you these two are
655:55 - confusing because they don't exactly
655:56 - work the same way but they have the same
655:58 - name and originally workspaces were
656:00 - called environments and so you know when
656:02 - you're using terraform cloud it makes a
656:03 - lot of sense to call them environments
656:05 - and the cli workspace it's just a little
656:07 - bit different so you know i'm not sure
656:09 - if i'm going to do a great job
656:10 - explaining the difference of these
656:11 - things you really have to go through the
656:12 - motion of it to really get the hang of
656:15 - it but i'll do the best i can here okay
656:17 - so think of workspaces as being similar
656:19 - to having different branches in a git
656:20 - repo workspaces are technically the
656:22 - equivalent to renaming your state file
656:25 - okay so in terraform 0.9 they used to be
656:28 - workspaces used to be called
656:29 - environments but people got confused
656:31 - which i have no idea why but uh you know
656:34 - that's what it is now so
656:36 - by default you already have a single
656:38 - workspace in your local backend called
656:40 - default and the default workspace can
656:42 - never be deleted so even if you don't
656:44 - think you're using workspaces you
656:46 - absolutely are even the first time you
656:48 - use terraform at least in the cli
656:50 - workspace okay
656:51 - [Music]
656:56 - let's get a little bit into the
656:57 - internals this isn't really that much
656:58 - detail but depending if you are on a
657:02 - local or remote back end changes how the
657:04 - state file is stored so if you're on a
657:05 - local state or remote state it's going
657:07 - to be different so
657:09 - terraform stores the the workspace
657:11 - states in a folder called terraform.tf
657:14 - state.d
657:15 - on the road state the workspace file are
657:17 - stored directly in the configured back
657:19 - end
657:21 - in practice individuals or very small
657:22 - teams will have been have known to
657:25 - commit these files to the repos but
657:27 - using a remote backend instead is
657:29 - recommended when there are multiple
657:31 - collaborators so i guess there's not
657:32 - really much to say here but just
657:33 - understand that when you have a local
657:36 - state file it's going to be in that
657:37 - terraform tf state d and then when it's
657:39 - remote state you don't have to worry
657:40 - about it okay
657:42 - [Music]
657:46 - let's talk about interpolation with
657:48 - current workspaces so you can reference
657:50 - the current workspace name via the
657:52 - terraform.workspace uh named value so we
657:56 - saw that in the lineup way earlier in
657:57 - the course so the idea here is that if
658:00 - you wanted to
658:02 - see if the default like let's say you
658:04 - want to say am i in the default
658:05 - workspace then return five as opposed to
658:07 - one because maybe you're very
658:10 - comfortable spinning up more in the
658:12 - default than whether it was something
658:14 - else
658:15 - and just another example maybe you want
658:17 - to use it to
658:18 - apply the name of the workspace as a tag
658:21 - so here that would actually give this
658:22 - virtual machine an aws the name web
658:24 - hyphen whatever it is production or
658:26 - development so there you go
658:29 - [Music]
658:33 - let's talk about multiple workspaces so
658:35 - a terraform configuration has a back end
658:37 - that defines how operations are executed
658:39 - and where persistent data is stored so
658:41 - like the terraform state so multiple
658:43 - workspaces are currently supported by
658:45 - the following back-ends azure rm
658:48 - console
658:49 - cos
658:51 - gcs so that's google cloud storage
658:53 - kubernetes local manta postgres
658:56 - remote s3 they're not going to ask you
658:58 - this on the exam which ones are
658:59 - supported but you know for your own
659:01 - purposes if you want to use multiple
659:03 - workspaces with a
659:05 - a standard backend you probably want to
659:07 - know which ones certain backends support
659:09 - multiple name workspaces allowing
659:11 - multiple states to be associated with a
659:12 - single configuration
659:15 - that the configuration still has only
659:17 - one back end but multiple distinct
659:19 - instances of the configuration to be
659:21 - deployed without configuring a new
659:22 - backend or changing authentication
659:24 - credentials why would you want to use
659:26 - multiple workspaces for something like a
659:28 - standard
659:29 - um
659:30 - a standard backend well the idea here is
659:33 - that you know if let's say you're using
659:35 - terraform cloud and you've reached your
659:37 - limit of five users and it just gets too
659:39 - expensive to go to the six user where
659:42 - you have to pay for all of them uh you
659:44 - know then the thing is is that you know
659:46 - this is an option for you it's just kind
659:47 - of like another option out there until
659:49 - you are ready to pay for terraform cloud
659:51 - at the next tier up so that's the reason
659:53 - why i'm mentioning it here for you okay
659:55 - [Music]
659:59 - all right let's quickly walk through the
660:01 - terraform cloud workspace and the
660:02 - easiest way is to just show you
660:03 - screenshots so uh you create a workspace
660:06 - on terraform cloud so first you'll
660:07 - create an organization mine's called
660:08 - exam pro and within that you'll create
660:11 - multiple workspaces from there you'll
660:13 - click into your workspace and you'll see
660:16 - like previous run states variable
660:17 - settings we'll click into runs from runs
660:20 - what we'll get is a list of what
660:22 - happened previously we can click into
660:24 - one of those and we can see our plan and
660:27 - our apply we can leave a comment on each
660:30 - run that has happened if we if we just
660:32 - want to expand the plan and apply here
660:35 - for plan we will see all the details of
660:37 - what it would change and then apply is
660:39 - it actually setting up that
660:41 - infrastructure and whether it was
660:42 - successful or not
660:44 - um notice you can also download sentinel
660:46 - mock files we'll come and talk about
660:47 - that later when we get to our central
660:49 - section
660:50 - we can also see a history of previously
660:52 - held states so these are snapshots of
660:55 - that infrastructure
660:57 - and so you can click in there and
660:58 - exactly see what it looks like this is
661:00 - useful if you want to go and download it
661:03 - if you were to need it
661:05 - so here's a diff of what changed since
661:07 - the last state
661:08 - okay and of course you can download that
661:10 - stuff so you know hopefully that gives
661:11 - you an idea of what you can do with
661:12 - terraform cloud workspaces
661:15 - [Music]
661:20 - let's talk about terraform cloud run
661:22 - triggers so
661:23 - terraform cloud provides a way to
661:24 - connect your workspaces to one or more
661:26 - workspaces via run triggers within your
661:29 - organization known as source workspaces
661:32 - so runtriggers allows runs to queue
661:35 - automatically
661:36 - in your workspace on successful apply of
661:39 - runs in any of your source workspaces
661:41 - and you can connect each workspace to up
661:43 - to 20 source workspaces so run triggers
661:46 - are designed for workspaces that rely on
661:48 - information or infrastructure produced
661:50 - by other workspaces if a terraform
661:52 - configuration uses data sources to read
661:55 - values that might be changed by another
661:56 - workspace run triggers lets you
661:58 - explicitly specify the external
662:00 - dependencies so the idea is just allow
662:02 - you to say okay i have one workspace i
662:05 - i've triggered that i want it now to do
662:07 - that so this is really great if you have
662:09 - a bunch of uh
662:10 - of um environments or or stacks that are
662:14 - reliant on each other and you want it to
662:15 - kind of have a chain reaction the reason
662:18 - i'm mentioning run triggers is that i
662:20 - think it's a cool feature and b because
662:22 - um triggers is something that is also uh
662:25 - something else when we're looking at
662:27 - provisioners and i just wanted to just
662:29 - clarify that there's run triggers from
662:31 - terraform cloud and then there's
662:32 - triggers that are for um
662:35 - well i said provisioners i really mean
662:37 - null resources they have triggers in
662:38 - that okay
662:40 - so it's not going to show up in the exam
662:41 - but it's just a good to know feature i
662:42 - just want to make sure there's no
662:43 - confusion with the other triggers
662:46 - [Music]
662:50 - let's take a look at some of the
662:51 - terraform workspace cli commands that we
662:53 - have available to us the first starting
662:55 - with terraform workspace list so list
662:56 - all the existing workspaces and the
662:58 - current workspaces indicated by an
663:00 - asterisk so that is our current
663:02 - workspace there terraform workspace show
663:04 - show the current workspace so right now
663:06 - we're working in development terraform
663:08 - workspace select switch to a target
663:10 - workspace so here we could say select
663:12 - default and now we're in the default
663:14 - terraform workspace new so create and
663:16 - switch to a new workspace
663:18 - and then we have terraform workspace
663:20 - delete so delete a target workspace now
663:23 - understand that this is affecting um
663:25 - your local ones uh for the cli commands
663:28 - okay but um yeah so this would actually
663:31 - show up in the exam they might ask you
663:32 - like
663:33 - you know which is select and what does
663:36 - list do and things like that so make
663:38 - sure you know these commands okay
663:40 - [Music]
663:44 - all right so i just wanted to contrast
663:46 - against the local or cli driven
663:48 - workflows via the terraform cloud
663:50 - workflows because there's this great uh
663:52 - table chart that's from the um
663:54 - documentation that i want to show you so
663:56 - terraform cloud workspaces and local
663:58 - working directory serve the same
664:00 - purposes but they store their data
664:02 - differently so just looking here we'll
664:05 - go down the components here so for
664:06 - terraform configuration it's going to be
664:08 - on disk for local for terraform cloud in
664:10 - linked
664:11 - version control repositories or
664:13 - periodically uploaded via the api or cli
664:16 - uh we have variable values so this is
664:19 - where we use tfrs and when we're in
664:21 - terraform cloud it's in the actual
664:22 - workspace the terraform cloud workspace
664:24 - and so that means that we are setting
664:26 - environment variables to propagate that
664:28 - into our code or inject those variables
664:30 - into our codon execution for state it's
664:33 - on disk or in a remote backend uh and in
664:36 - the workspace for terraform cloud it's
664:38 - actually in the workspace credentials
664:40 - and secrets are in shell environments or
664:42 - are entered at prompts workspace they're
664:43 - stored as sensitive variables these are
664:45 - environment variables again so there you
664:47 - go
664:48 - [Music]
664:52 - hey this is andrew brown from exam pro
664:54 - and we are on to our terraform cloud uh
664:56 - follow alongs now we already did
664:57 - terraform cloud
664:58 - version control system earlier than i
664:59 - thought we were going to do so i'm going
665:00 - to remove from the list and what we'll
665:02 - do is focus on permissions and maybe the
665:05 - api tokens and things like that so what
665:06 - i want you to do and i've got some old
665:08 - tabs open here i'm going to make my way
665:10 - over to
665:12 - terraform dot io
665:14 - and i'm going to go log into terraform
665:15 - cloud here
665:16 - and i don't think i've ever done this
665:18 - but i can upgrade to the trial account
665:20 - because the thing is is that when we are
665:22 - in our account here and we're trying to
665:24 - look at uh permissions and we're not
665:26 - using force unlocking anymore i might
665:28 - just keep that around for a little bit
665:29 - but if we were to go to our user
665:32 - settings here we go to organizations
665:35 - um that might not be a very good example
665:39 - i guess i wanted like the organization
665:40 - settings here
665:43 - which would be
665:46 - maybe here yep up here and so you know
665:49 - when we go to our teams and our users
665:51 - our users everyone's being added as an
665:53 - owner we don't have like granular
665:54 - permissions and that's because we'd have
665:56 - to upgrade and so
665:58 - i figured this would be a good
665:59 - opportunity for me to just kind of
666:00 - upgrade to show you those more detailed
666:03 - role based access control permissions
666:05 - just so you know where they are so i'm
666:07 - going to go the upgrade now and notice
666:09 - that we're on the free plan and also
666:11 - take note because
666:12 - later on the course i talk about pricing
666:14 - or we've already already across it but
666:16 - notice that we have a team plan and a
666:18 - team and governance plan this one's at
666:19 - twenty dollars and this one's at seventy
666:21 - dollars
666:22 - so you know this is not something that's
666:23 - reflected at least not right now on the
666:26 - terraform website and so it just looks
666:28 - like there's a team and governance plan
666:29 - for 20 and this middle one's missing
666:32 - the key difference here is this one has
666:33 - sentinel policies code but you can see
666:35 - on the free plan we are able to do
666:37 - team-based stuff
666:39 - let's go switch over to the trial plan
666:41 - i'm going to see if i can do this
666:42 - without entering a credit card in
666:44 - so here it says you're currently on
666:45 - trial plan i didn't have to enter
666:47 - anything in that's really great and so
666:49 - that means now i have all these team
666:50 - management options so if i go over to
666:52 - team management
666:54 - i can actually go ahead and create some
666:56 - teams
666:57 - so i'll just say like developers
667:02 - okay
667:03 - and so now i have all these options so
667:05 - we can say this person if someone's in
667:07 - this team they're allowed to manage
667:08 - policies they're able to do that
667:11 - uh a visible team can be seen by every
667:13 - member or we can keep them secret we can
667:15 - generate out team api tokens which i
667:19 - guess we could just like cover this as
667:20 - we do it but notice we can go here and
667:22 - that generates out that token that we
667:23 - can use i'm going to go ahead and delete
667:25 - that token
667:27 - um so nothing super exciting there you
667:29 - know it's not like that complicated
667:32 - if we want to
667:33 - set things on the workplace now if we go
667:35 - back to
667:36 - workplace or workspaces here
667:39 - and now we have team access
667:41 - and notice i can go to add team
667:44 - permissions here
667:45 - and we can say select this team for
667:47 - their permissions
667:48 - and so these are these uh pre-built ones
667:51 - in um
667:53 - so we have read plan rights so these are
667:55 - those three predefined ones that we
667:57 - talked about previously and then we have
667:59 - down here like assigned permissions for
668:00 - the admin of a workspace
668:03 - we are able to set customized
668:04 - permissions so if we toggle this
668:07 - um we should be able to do it i mean
668:09 - this looks like it's the same thing no i
668:11 - guess it's more granular so here i guess
668:13 - we have our granular permissions that we
668:14 - can set so for runs we can do read plan
668:16 - or reply
668:18 - locker unlock a workspace
668:21 - send on locks things like that
668:24 - it's not super complicated
668:26 - if you want to drain out api tokens for
668:30 - well there's the organizational one
668:32 - there's the teams one and then there's
668:34 - the user one so
668:36 - if we go to
668:38 - the organization
668:41 - we can see that we can generate out one
668:42 - here so i can say create an api token so
668:44 - there it is let's go ahead and delete
668:46 - that
668:47 - and if we go back to
668:49 - our teams
668:53 - we did this earlier but we can generate
668:55 - one here
668:57 - and then if you want to generate one for
668:58 - your user it's probably under user
669:00 - settings
669:01 - yeah so we generate tokens there as well
669:03 - okay
669:07 - um so i mean again there's not a lot to
669:09 - talk about here but
669:11 - yeah so i guess that really covers
669:12 - permissions and api tokens okay
669:14 - okay so that finished uh deploying there
669:16 - and so we can see our resources have
669:18 - been created but one thing that we
669:19 - didn't set was the prefix i'm actually
669:22 - interested to see that that worked
669:24 - properly but what i could do is say
669:26 - prefix
669:30 - and then do an underscore here i don't
669:31 - know how that would affect it
669:38 - and this actually happened over in this
669:40 - repository here i'm actually using a
669:42 - hyphen so i'm going to just change that
669:44 - to that
669:55 - might have to do a terraform ended there
669:56 - migrate the state
670:05 - so that was a complete mistake on my
670:06 - part but i guess my thought was that i
670:08 - thought i had to have
670:11 - this is still on main and i guess we
670:12 - never really set up a production branch
670:13 - but yeah so now when we have the prefix
670:15 - end it's actually going to prompt us for
670:17 - the other one so the currently selected
670:18 - workspace is our default
670:20 - does not exist and so dev is showing up
670:22 - and notice that we can't deploy domain
670:24 - so i think the thing is is that if we
670:26 - wanted a production one we would just
670:27 - create that workspace and then it would
670:29 - reflect here so the way you make uh
670:32 - multiple workspaces here would actually
670:34 - have to make them all so we'd have to
670:35 - make a vcs terraform prod and i'm very
670:38 - certain that it would just show up here
670:39 - and then you would select the number
670:40 - that you'd want uh though what's
670:43 - interesting is the fact that we are in
670:44 - the dev branch and we have to say oh i
670:46 - want to deploy the dev one so that's
670:49 - kind of a little bit of a caveat there
670:51 - but i guess there's not really any way
670:52 - around it but i mean this pretty much
670:54 - you know explores
670:56 - what we need for um multiple workspaces
670:58 - we tear from cloud and we did the remote
671:00 - ones and
671:01 - we're all good so there we go i guess
671:03 - the last thing here we should probably
671:04 - do is just clean up so if we go to
671:06 - terraform dev here
671:08 - we're going to go down to destruction
671:11 - and we'll run a destroy plan here
671:16 - okay
671:19 - and once this is all done you know you
671:21 - can go ahead and
671:23 - just delete these repositories
671:26 - and notice this one is it has a private
671:28 - lock on it so oh because it's actually
671:29 - running right now so it's being locked
671:31 - so
671:32 - yep there we go so that's it
671:34 - hey this is andrew brown from exam pro
671:36 - and we are taking a look at sentinel
671:38 - which is an embedded policies code
671:40 - framework integrated within the
671:41 - terraform platform so what is policy is
671:44 - code when you write code to automate
671:46 - regulatory or governance policies and
671:49 - features of signals include it that it's
671:51 - embedded so enable policy enforcement in
671:54 - the data path to actively reject
671:56 - violating behavior instead of passively
671:59 - detecting so
672:00 - it's it's very active or proactive
672:02 - fine-grained condition based policies so
672:05 - make policy decisions based on the
672:07 - condition of other values multiple
672:09 - enforcement levels so advisory soft and
672:11 - hard mandatory levels allow policy
672:13 - writers to warn
672:14 - on or inject reject behavior we have
672:17 - external information so source and
672:19 - external information to make holistic
672:21 - policy decisions we have multi-cloud
672:24 - compatibili uh compatible so ensure
672:26 - infrastructure changes are within
672:28 - business and regulatory policy across
672:30 - multiple providers and central is a paid
672:32 - service part of the team and governance
672:34 - upgrade package so starting at team and
672:36 - governance it's available for that
672:38 - business and enterprise okay
672:41 - let us expand a bit on the concept of
672:43 - policy as code and relating to sentinel
672:45 - so sentinel is built around the idea and
672:47 - provides all the benefits of policy of
672:49 - code let's talk about the benefits we
672:50 - get with this so sandboxing the ability
672:52 - to create guardrails to avoid dangerous
672:54 - actions or remove the need of manual
672:56 - verification codification the policies
672:58 - are well documented exactly represent
673:00 - what is enforced version control easy to
673:02 - modify or iterate on policies with a
673:04 - chain of history of changes over time
673:07 - testing so syntax and behavior can
673:09 - easily be validated with sentinel
673:11 - ensuring policies are configured as
673:12 - expected automation so policies existing
673:15 - as code allows you to uh allows you to
673:18 - direct integrate policies in various
673:19 - systems to auto re remediate and notify
673:22 - we're talking about sentimental and
673:24 - policy as code we have language so all
673:26 - sentinel uh policies are written using
673:29 - the central language this is designed to
673:31 - be non-programmer and programmer
673:32 - friendly embeddable and safe for
673:34 - development sender provides a cli for
673:36 - development and testing and for testing
673:38 - sentinel provides a test framework
673:40 - designed specifically for automation so
673:42 - hopefully that gives you an idea of the
673:44 - benefits of policy code and in
673:45 - particular with sentinel
673:47 - all right let's take a look at the
673:49 - sender language and also just a broad
673:52 - range of use cases that we could use
673:54 - these for so you can start thinking
673:56 - about how to start applying sentinel the
673:58 - great thing is that there are a bunch of
673:59 - example policies provided by hashicorp
674:02 - so you can easily um you know start
674:04 - using them right away but let's go
674:05 - through the big list to kind of give you
674:06 - an idea where you would use policies
674:08 - codes so for aws maybe you want to
674:10 - restrict the owners of the aws ami to a
674:13 - date of the data source maybe you want
674:15 - to enforce mandatory tags on taggable
674:17 - aws resources restrict availability
674:19 - zones used by ec2 instances disallow
674:24 - 0.0.0.04.0 basically anywhere address
674:26 - out to the internet um restrict instance
674:28 - types of ec2 so maybe you only want
674:30 - people using t2 micros require s3
674:32 - buckets to be private and encrypted by
674:34 - kms since that is a big um
674:37 - a big problem for people on a bus where
674:39 - their buckets get leaked uh require vpcs
674:42 - to have dns host names enabled we're
674:44 - looking at gcp enforce mandatory labels
674:46 - on vms disallow
674:48 - anywhere cider enforce limits on gke
674:51 - clusters because those can get really
674:52 - expensive restrict machine types of vms
674:54 - just like aws for vmware require storage
674:57 - drs on data store clusters restrict size
675:00 - and type of virtual disks restrict cpu
675:03 - count memory of vms restrict size of vm
675:05 - disks recaro nfs 4.1 and
675:09 - kirbrose i never can say that properly
675:11 - on nas data stores for azure enforce
675:13 - mandatory tags of vms restrict
675:16 - publishers of vms restrict vm images
675:18 - restrict the size of azure vms enforce
675:20 - limits on aks clusters restrict cider
675:23 - blocks of security groups for cloud
675:25 - agnostic allow
675:27 - only say
675:28 - we can only use these allowed providers
675:30 - say
675:31 - or explicitly say what providers are not
675:34 - allowed
675:35 - limit proposed monthly costs prevent
675:37 - providers in non-root modules require
675:39 - all modules have version constraints
675:41 - require all resources be created in
675:43 - modules and private module registry use
675:46 - most recent versions of modules in a
675:48 - private module registry that's more so
675:50 - like about the tooling around modules
675:53 - now let's take a look at an example
675:55 - and this is one for restricting uh
675:57 - available zones on ec2 instances so like
675:59 - what data centers you're allowed to use
676:01 - and so we first import our language
676:03 - functions that's going to allow us to
676:05 - use particular
676:06 - feature functions in this we're going to
676:08 - specify our azs we're going to get all
676:11 - the virtual machines we're going to
676:13 - filter that and restrict that easy for
676:15 - those vms we're going to define that
676:17 - rule to make it enforceable so there you
676:19 - go
676:21 - all right let's take a look here with
676:22 - sentinel with terraform so central can
676:24 - be integrated with terraform via terror
676:25 - from cloud as part of your iec
676:26 - provisioning pipeline and where it's
676:28 - going to sit is between plan
676:31 - and apply okay
676:33 - so the way you do it is you're going to
676:34 - have to create a policy set and apply
676:36 - these to the terraform workspace so it's
676:38 - not that complicated to get it hooked up
676:41 - um so yeah that's all there is to it
676:43 - okay
676:44 - hey this is andrew brown from exam pro
676:46 - and we're going to learn a bit about
676:48 - sentinel with terraform i'm not going to
676:49 - say i'm amazing at it but we are going
676:50 - to stumble our way through and see what
676:52 - we can accomplish we know we can
676:53 - download sentinel box and there's also
676:55 - the ability to set policy sets and i do
676:57 - know that uh there are a bunch of
676:59 - pre-made um sendal policies so we go
677:02 - send all policies here
677:04 - uh terraform
677:06 - uh and we go examples
677:08 - uh there we are probably here
677:11 - there are a bunch of ones that we can go
677:12 - in here so i'm thinking that there's
677:14 - something that we can do here um but
677:16 - we'll have to figure our way through
677:17 - here because i actually haven't ran any
677:19 - policies myself so we have these two
677:22 - environments i'm not using dev anymore
677:23 - i'm done with this i'm going to go ahead
677:25 - and destroy that and we're going to go
677:26 - down to terraform destroy i'm pretty
677:29 - sure i don't have any running
677:30 - infrastructure actually i'm going to
677:31 - double check by going to the overview
677:33 - everything has been destroyed and so
677:35 - i'll go back over here and we're going
677:36 - to destroy this i'm going to type in vcs
677:40 - terraform dev
677:45 - great if we go into this workplace
677:47 - or workspace
677:48 - nothing is provisioned right now so i
677:51 - want to get everything running again
677:54 - because last time we ran a destroy so i
677:57 - think that if we want to get this
677:58 - working it should be pretty easy i'm
678:00 - going to go back to
678:02 - our
678:03 - workflows file here and we're just going
678:06 - to revert some changes so i'm going to
678:07 - go back
678:08 - and change this to name
678:12 - and i'm just going to go whoops we're
678:14 - going to go
678:15 - into our 120 directory here and we're
678:17 - going to get checkout main and that
678:19 - actually might just revert those changes
678:20 - there i don't think anything really
678:21 - changed much other than this part here
678:25 - and so what i'm going to do is just go
678:29 - make a minor change it doesn't matter
678:30 - what it is maybe a
678:32 - space get at all whoops
678:37 - git commit hyphen m
678:40 - changes
678:42 - get push
678:45 - we'll have to do a get pull here
678:49 - get push
678:52 - sorry get push
678:54 - and so what i want to see here is a
678:56 - trigger for the run
679:00 - there we go and i'll see you here in a
679:02 - bit when it's provisioned okay all right
679:03 - so after a short little wait there it
679:05 - looks like our uh branches ran so i
679:07 - think our resources are provisioned
679:10 - um it's cool we actually have cost
679:11 - estimation i didn't have to do anything
679:13 - to turn that on we already have it
679:14 - notice that it's giving us an hourly of
679:16 - um zero twelve cents the monthly is
679:19 - going to be eight dollars in
679:21 - you know 35 cents there if there was
679:23 - more resources there we would obviously
679:24 - get that i assume that it would show up
679:26 - here in the top right
679:28 - corner so we're not really interested in
679:30 - the provision infrastructure but more so
679:33 - looking at these uh sentinel locks so
679:35 - i'm going to go ahead and download them
679:36 - there and that's going to download as a
679:40 - a zip
679:41 - or an archive of some sorts
679:43 - and so what i can do here
679:46 - is just unzip it so i'm just going to
679:47 - make a new folder
679:50 - here and we'll just call these
679:53 - sentinel mocks
679:58 - okay i'm just going to open up the zip
680:00 - and so here's all the stuff in here so
680:01 - we have a variety of different files i
680:03 - think some of them might be redundant
680:05 - i'm not sure what we have to do with
680:06 - them but i'm just going to go ahead and
680:07 - grab these and drag them into the folder
680:10 - here
680:11 - okay and actually what i'm going to do
680:13 - is
680:15 - i'm going to just make a new section
680:18 - in my folder here
680:19 - whoops
680:21 - just give me a second here
680:25 - let's open up the explorer to anything
680:28 - yeah we have a folder right here
680:35 - because what i want to do is just drop
680:36 - those files and so we can just see them
680:38 - in vs code with the contents of them
680:45 - there we go
680:47 - so now i'm just going to go down to here
680:49 - and we'll take a look so we have
680:51 - sentinel hcl
680:54 - all right and so that's just defining a
680:56 - bunch of mocks
680:58 - uh we have this sendal file here
681:05 - so i was hoping when we opened this that
681:07 - we'd be able to figure out what to do
681:08 - with this and i have no idea so you know
681:10 - what what i'm going to do is i'm just
681:12 - going to do a little bit of reading and
681:13 - i'm going to come back to you after i
681:14 - finished reading this okay all right so
681:16 - spending a little bit of time uh
681:18 - watching some stuff so i was just going
681:19 - through the deep dive of sentinel here
681:22 - and just going through the documentation
681:23 - and as far as i understand it looks like
681:25 - that you write policies and then you can
681:28 - also write tests for your policies to
681:29 - assert that your policies are doing what
681:31 - you expect them to do and i guess those
681:33 - uh sentinel mocks are written in a form
681:35 - of hcl
681:37 - but it is a little bit confusing because
681:38 - you get this folder with a bunch of
681:40 - stuff in it and it can be either written
681:42 - as json or
681:43 - like this hcl like format but as far as
681:46 - i can tell it's just saying what it's
681:48 - done is it's generated out the the
681:50 - current state of exactly what your
681:52 - infrastructure is and i think that it's
681:54 - going to check to see is it exactly what
681:57 - you expect it to be
681:58 - so i don't know if mox is that very uh
682:00 - useful and might be a little bit too
682:02 - much for this particular course so i'm
682:05 - just going to say let's just kind of
682:07 - ignore
682:08 - blocks because they're just a little bit
682:10 - too too difficult and out of scope here
682:13 - let's
682:13 - focus on trying to get a policy
682:15 - implemented so i'm going to go back over
682:17 - here and what i'm gonna do is i know
682:20 - that
682:20 - if i go to
682:22 - settings
682:24 - i mean i've seen it before i just can't
682:26 - remember if it's under a workspace
682:28 - no it's i think it's at the organization
682:29 - level so we're gonna go to the settings
682:30 - here and there we have our policies so
682:34 - we here we can create new policies so
682:35 - managing individual policies terraform
682:37 - is deprecated policy sets now supports
682:39 - vcs integration with direct api uploads
682:42 - uh this provides a streamlined policy
682:43 - management experience policies which
682:44 - includes okay so this is the old way of
682:46 - doing it and so we'll go here and create
682:48 - a new policy set so connect a new policy
682:50 - set
682:51 - um okay so
682:53 - i guess what we have to do
682:56 - oh boy this is a lot different than i
682:57 - thought it was gonna be so i thought it
682:58 - was just like we're going to go here and
683:00 - create it and then dump our code in
683:01 - which apparently that's what it is but
683:03 - it seems like we need to associate with
683:04 - the policy set so just give me a moment
683:06 - because i do want to show you the the
683:08 - most up-to-date way to do this i'll be
683:09 - back in a second all right all right so
683:11 - doing a little reading here it looks
683:13 - like what we have to do is create
683:14 - ourselves a sendal.hcl file and this is
683:16 - going to say what policies we want to
683:18 - enforce so i assume this is basically
683:20 - the policy set as a file and here we
683:22 - specify the policies that we care about
683:25 - um
683:26 - i actually just want to go back to the
683:27 - files we were looking at earlier because
683:29 - we saw this htl file so i guess this
683:31 - would technically be a policy set
683:34 - is that what we call that here but
683:35 - notice it says mock so these aren't
683:37 - policies per se these are just grouping
683:40 - mocks
683:41 - but in any case
683:42 - i think we'll have to create this file
683:44 - so what i'm going to try to do
683:46 - and i don't know this is going to work
683:47 - but we'll just stumble our way through
683:49 - here because the best way to learn is
683:50 - we're going to create ourselves our own
683:52 - sentinel file here so we're going to say
683:55 - sentinel
683:56 - dot hcl
683:59 - and we're going to define ourselves a
684:00 - policy
684:02 - this isn't going to be the one that
684:03 - we're going to use but i'm just going to
684:04 - grab it here notice there are different
684:06 - enforcement levels so
684:08 - i don't really care we put it i just
684:09 - want to see that we can successfully get
684:10 - anything working here
684:12 - and i'm going to go back to the examples
684:16 - um if we can go find that there so
684:18 - sentinel
684:20 - policy examples and let's just go take
684:22 - one of those and see what we can do with
684:23 - it okay
684:26 - so if we scroll on down
684:30 - disallow zero zero zero cider block in
684:32 - the security group that seems like
684:33 - something that would be pretty relevant
684:35 - restrict instance type of ec2 instance
684:37 - that could be something as well that we
684:38 - could do
684:39 - so
684:41 - you know i just have to decide what it
684:42 - is we want to do here restrict owners so
684:44 - there's a few that are good here let's
684:45 - take this take a look at this one
684:46 - because i feel like this might be very
684:48 - simple
684:49 - so yeah this is perfect okay so what
684:51 - we'll do is we'll take uh this policy
684:53 - here
684:54 - so i wonder if i could just go download
684:55 - this file here there's probably a
684:57 - download button
684:59 - well i can't find it so we'll just maybe
685:01 - it's up here
685:02 - no okay we'll just create this by hand
685:05 - here so i'm going to go copy and
685:08 - it looks like we can just drop it in
685:09 - here so just go new
685:12 - file here
685:13 - and put that there and we'll just go to
685:16 - raw
685:20 - and we will go ahead and drop that on in
685:22 - there
685:24 - so i wish i had like send all
685:26 - highlighting i don't know if there is
685:27 - such a one for vs code if there is it'd
685:29 - be really nice so we would type in
685:31 - sentinel
685:35 - um yes we do
685:39 - this one has more downloads so we'll go
685:41 - with that one
685:43 - no rating as of yet looks like it works
685:46 - so let's go give them a five star
685:49 - i think that's only fair because uh no
685:51 - one's done that yet
685:58 - might be a bit too hard to uh i've never
686:00 - written a review before but we'll go
686:01 - here and say
686:02 - works as expected
686:05 - thank you for this uh
686:08 - extension
686:12 - okay so
686:13 - what i'm going to do is go back over to
686:15 - here and so here we have some kinds now
686:17 - we're running a t2 micro i believe so
686:20 - this policy should uh cause it to fail
686:23 - that's exactly what we want but i'm just
686:25 - going to go look up and down to see if
686:27 - it's all correct it looks good to me so
686:28 - i think we'll have to change over here
686:30 - is the name so i'm just going to
686:32 - clear this out and we'll say restrict
686:35 - ec2 instance
686:37 - type
686:39 - we'll save that hard mandatory sounds
686:41 - really good to me
686:42 - um probably have to spell it right for
686:44 - it to work r-e-s yeah strict okay great
686:48 - and so what i'll do is just copy this up
686:50 - here
686:58 - okay and so we have our sandal hcl file
687:01 - and it's referencing a local file now
687:02 - the question is you know can we use the
687:05 - same repository i assume we would be
687:07 - able to
687:08 - for our policy set but it almost seems
687:10 - like it might encourage you to have your
687:11 - policies separate from your repository
687:13 - that you're testing and that might be
687:14 - really good because let's say you have
687:15 - multiple workspaces or environments and
687:18 - they all require the same policy set you
687:20 - wouldn't want to have them in your code
687:21 - base like that but for the purposes of
687:24 - this we're just going to keep it simple
687:26 - i'm going to go ahead and
687:28 - open up terminal here and we're going to
687:30 - commit these these changes to our
687:31 - repository
687:33 - and this will end up triggering a deploy
687:35 - even though we don't necessarily want
687:37 - that to happen but there's no way around
687:39 - that so
687:40 - get well i suppose we could just cancel
687:42 - it out but or not have the auto apply
687:44 - but i don't feel like changing that so
687:46 - we'll do git status here we'll go get
687:48 - add all
687:49 - git commit hyphen m uh
687:52 - simple policy here
687:57 - get push
687:59 - okay
688:00 - and so that's being pushed to our
688:02 - repository that's going to trigger
688:04 - a deployment we don't care i i assume
688:06 - that it won't pick up the policy because
688:08 - we have to connect the policy set
688:10 - so
688:11 - um apparently you use the api to upload
688:13 - your policy set which is kind of cool i
688:14 - suppose we could have done that but um
688:17 - well too late
688:19 - we probably should use vcs anyway you
688:20 - know what i mean so we'll go to github
688:23 - here and we will find our terraform
688:25 - repository which is here
688:26 - um you know policy
688:31 - well we should probably name this right
688:32 - so we
688:33 - policy to enforce uh instance type
688:39 - i don't know if we need a description i
688:41 - guess we'll find it in a second here i
688:42 - guess we could have also put the policy
688:44 - in a um
688:46 - a subdirectory there that might have
688:47 - been okay to do
688:49 - it's going to default to the main branch
688:50 - which is fine policies enforce on all
688:53 - workspaces or policies and force on
688:54 - selected workspaces and we only have one
688:56 - but that's what we'll do down here so
688:58 - we'll say
688:59 - update
689:00 - the name is invalid
689:02 - oh uh it has to be like
689:05 - a proper name so
689:06 - restrict
689:09 - ec2
689:11 - now again this is a policy set so you
689:12 - could just say like um
689:14 - you know basic server policy set that
689:19 - probably better and then you probably
689:20 - want a list to say what it does
689:21 - restricts
689:22 - um ec2 instances instance type
689:26 - okay and we'll go down here and create
689:28 - that policy set
689:30 - and
689:31 - that looks like we're in good shape so
689:33 - we applied it um now will it actually
689:36 - happen on this run because it's already
689:38 - running i believe we go to this
689:39 - workplace
689:41 - workspace i like to say workplace it's
689:43 - workspace
689:44 - and we go over here this is already
689:46 - planned and finished so what i want to
689:47 - do is just trigger another
689:49 - uh um deploy here so there's nothing
689:52 - changed
689:54 - so
689:56 - i'm not sure what we do here um i guess
689:58 - what we could do and actually this is
689:59 - something that i'm i don't know but like
690:01 - how would you trigger
690:03 - a replace on here because if we're doing
690:06 - let's go to plan and see what happens i
690:08 - wonder if we could do that in the plan
690:09 - here
690:10 - reasons for trigger
690:13 - do refresh only plan
690:15 - because one thing i was thinking about
690:16 - is like imagine i wanted to replace an
690:17 - element you can do that hyphen replace
690:19 - but i don't know how you do that through
690:20 - vcs
690:21 - but anyway what i'm going to do is just
690:23 - go change anything in our code
690:26 - um so it could just be a space it
690:27 - doesn't really matter
690:30 - get at
690:31 - plus okay commit
690:33 - trigger uh change
690:37 - and we just want to observe
690:39 - the uh
690:43 - the policy working okay
690:49 - so i'm just going to open this up here
690:51 - i'm not sure if it's going to show up in
690:52 - the plan section or the apply section so
690:54 - we'll just wait here to see the plan
690:56 - generate out
691:13 - and so the plan finished
691:15 - um we don't see any sentinel uh central
691:18 - being applied there
691:20 - apply will not run
691:23 - let's expand that there this looks fine
691:29 - i guess technically we didn't change
691:30 - anything so that probably is not very
691:32 - helpful so what i'm going to do
691:34 - is go and change a variable because
691:37 - maybe that's that's what's going to help
691:38 - here
691:39 - so we have a micro here which is fine
691:41 - we're just going to change this over to
691:42 - nano
691:46 - that makes sense why it didn't do it
691:48 - so we'll go back over to runs and i'm
691:50 - going to trigger i'm going to start a
691:51 - plan so
691:53 - change ec2 instance type
691:58 - we'll say start plan
692:22 - okay so we have one change which is fine
692:27 - we just okay so that part pass is going
692:30 - to go to cost
692:32 - estimation that passed it's going to
692:34 - apply it because remember we have um
692:37 - auto approve on the server so it's not
692:39 - even going to ask us to confirm it
692:41 - and so i want to see if that policy is
692:43 - in place
692:57 - well it's running i'm just going to go
692:58 - review our policy here
693:02 - just to make sure it's not like the
693:03 - opposite saying like you cannot have
693:04 - these so include now a loud ec2 instance
693:07 - type so it's small medium or large so it
693:08 - really should quit out on this one here
693:16 - but it seems like it's working like it's
693:18 - not uh it's not picking up the policy
693:19 - but i'll see you hear it back in a bit
693:21 - okay
693:22 - all right so i didn't see the policy
693:23 - trigger there so i'm gonna go back to
693:25 - policy sets and notice here it says zero
693:26 - workspaces which is unusual because i
693:28 - definitely selected one but maybe i
693:30 - didn't click through or hit add so i'm
693:32 - going to go down here and click this one
693:34 - again
693:34 - and maybe i didn't hit this button here
693:38 - okay and now i'll probably have to hit
693:39 - update um paul this is set before we do
693:41 - i just want to read about this these
693:42 - parameters are passed to center runtime
693:43 - when performing policy checks so i guess
693:45 - i'd be like a way where you'd have a
693:47 - generic policy and then you could kind
693:48 - of put parameters in so that's kind of
693:50 - cool
693:50 - so i'm going to go back here and double
693:52 - check to make sure that we have a
693:53 - workspace set and so what we'll do is
693:56 - just change the variable again
693:58 - um so we will go to
694:02 - our variables here and i'm going to go
694:04 - change this back to a micro
694:05 - and so i think this time we are going to
694:07 - have better success okay so we'll hit
694:09 - save
694:10 - we'll go back up to runs
694:12 - we'll go and start a new plan
694:15 - change instance type
694:18 - again here
694:22 - and we will save that plan
694:23 - and so that plan is now running i will
694:25 - see you back here in a bit uh when we
694:27 - see that sentinel policy i don't know
694:29 - when it triggers i'll see you back here
694:30 - in a bit all right welcome back so after
694:32 - our cross estimation it did a policy
694:33 - check and you can see that it failed um
694:35 - and here the air says
694:37 - import tf plans function is not
694:39 - available so i'm not sure why that's
694:41 - happening so i think that um
694:43 - i mean our set failed but not for the
694:45 - reason we wanted to so i'm gonna go
694:46 - investigate this i'll be back in a
694:47 - moment okay all right so uh what i've
694:49 - done here is i've gone and looked up uh
694:52 - like how to create a policy set and
694:53 - hashicorp learn has this um example
694:55 - project here
694:57 - and if we go into its github project and
695:00 - i go here
695:01 - you're gonna notice that it it's like
695:03 - this apparently does basically the same
695:04 - thing restrict instance type and
695:06 - apparently tag as well but it doesn't
695:08 - have the tf
695:10 - functions the tf plan functions here so
695:14 - um
695:15 - maybe we don't need that function in
695:16 - there and maybe the the example is just
695:18 - out of date at this time so import
695:20 - common functions for sentinel
695:23 - okay but this one doesn't have it it
695:25 - does it does have it for mocks right um
695:29 - so
695:30 - maybe we just need to kind of like
695:33 - walk through this really quickly and see
695:34 - how we can fix this so the policy uses
695:36 - the central tf2 plan import to require
695:39 - that all ec2 instances have instance
695:41 - types planned on the loud list
695:44 - but
695:45 - i don't
695:46 - see that import there
695:48 - okay and it is in here so i guess what
695:50 - we'll do is just grab this one
695:54 - okay
695:55 - and i'm gonna go ahead and just delete
695:56 - this one out here um
695:59 - again this isn't working i don't know if
696:00 - this would work with that one so i'm
696:02 - gonna take it out
696:04 - this is pretty clear what this does so
696:05 - we'll just have that allowed types it's
696:08 - interesting like here it's underscoring
696:09 - that here it's like uh title case
696:11 - there's some inconsistencies there so
696:14 - they have a lot of types as well
696:16 - um
696:18 - and i'm just seeing if there's like find
696:20 - resources in here
696:25 - so allow types rule to enforce the name
696:28 - tag
696:29 - so i don't care about that
696:31 - rule to restrict the instance type so
696:33 - i'm going to go ahead and grab this one
696:34 - here and let's just take a look at the
696:36 - differences here
696:40 - okay so instance type allowed rule all
696:42 - these two instances as
696:45 - that instance
696:47 - change after instance type allow type so
696:49 - this is way way different
696:51 - um
696:53 - so i mean i fully don't understand this
696:55 - but i do know that this one
696:58 - it will probably work so i'm going to go
697:01 - down here
697:03 - we have count violations i'm not really
697:05 - worried about that
697:09 - and
697:11 - the rules different
697:14 - like if i was really serious about this
697:15 - i'm sure i could you know figure out the
697:17 - logic here but again this is just for
697:19 - the purposes of this learning so we
697:21 - don't have to go too crazy here now this
697:22 - says instance type allowed and mandatory
697:24 - instance tags we're not dealing with
697:25 - tags here so i'm just going to say
697:27 - this
697:34 - okay and so i think this will produce
697:36 - what we want
697:38 - so
697:39 - allows those types
697:42 - i don't know if it had this in here
697:47 - get all instance types from the module
697:50 - i think we didn't put this in here so
697:52 - this might be kind of the equivalent
697:56 - ec2 instances
697:58 - filter tf plan resource changes
698:03 - okay
698:07 - contains a create or an update
698:11 - okay
698:14 - um
698:16 - i mean this isn't bad we technically
698:17 - have a name set so you know what i'm
698:19 - just going to grab this whole thing
698:20 - because
698:21 - then we're just going to have a much
698:22 - easier time we don't have to worry about
698:24 - it but it was nice to walk through that
698:25 - file very quickly
698:26 - because the name tag is set um in our
698:28 - project a because we can see we can see
698:31 - that it's the server name so
698:33 - what we'll do is we'll just go ahead and
698:35 - add this to our
698:36 - repository here and the great thing is
698:39 - that since it's the vs code or it's in
698:40 - the same version control system i would
698:42 - think that it would update in time so
698:44 - what we'll do is just to get at all
698:47 - git commit hyphen m
698:50 - fix the policy
698:53 - get push
698:58 - okay
698:59 - and we'll go back over here
699:05 - and we will see
699:07 - if the policy check happens and when it
699:10 - does happen it's actually
699:12 - erroring out because we're not using the
699:14 - right instance size right that's what we
699:15 - want to see
699:18 - a little bit of trial and error it's not
699:20 - a big deal i also read like over here
699:22 - that the sendal file for hcl only
699:25 - contains module and policies but then we
699:26 - saw a single file or hdl file that
699:28 - clearly had mocks in it so
699:31 - i mean maybe maybe just only used
699:33 - locally maybe it's not intended for um
699:35 - production
699:37 - um so
699:38 - we'll go down here tf plan so it didn't
699:41 - pick it up okay so what i'm gonna do is
699:43 - go back to my policy set and maybe it's
699:45 - just like the order of how this happened
699:47 - so see this says it was updated last
699:50 - five minutes ago
699:52 - updated it a minute ago so this could
699:53 - just be like a race case where um
699:56 - you know this
699:58 - ran before the other one so i'm going to
699:59 - try to execute this again start a new
700:01 - plan uh
700:03 - trigger
700:04 - plan
700:08 - and we'll see if that works now because
700:10 - again this said
700:11 - literally updated a minute ago so maybe
700:13 - it didn't pick it up
700:21 - so you can see why it would also be good
700:22 - to have your policy set in a separate
700:24 - repo because if you're deploying this
700:26 - you don't want to
700:27 - keep triggering your deploys
700:29 - so i think probably that's what you know
700:31 - we should have done i mean it's a lot
700:32 - extra work but you know this way you
700:34 - kind of understand why
700:36 - so waiting on that plan run i really
700:38 - don't care about cost estimation i mean
700:40 - you could make a policy to check based
700:42 - on that i i'm assuming we just turn that
700:43 - off if we wanted to
700:46 - and we'll go over to cost estimation
700:48 - here yeah we could just disable it
700:51 - but the thing here is that it said our
700:53 - policy passed
700:56 - so we'll go here so the result means
700:58 - that all central policies passed
701:01 - so restrict the instance type so
701:03 - description
701:05 - main rule that requires other rules to
701:06 - be true
701:09 - uh ruleton force name tag is on all
701:11 - instances that's true rule to restrict
701:13 - the instance type
701:14 - so maybe we don't understand uh maybe
701:17 - this works in the opposite way oh the t2
701:19 - micro is here okay so
701:22 - i just want to see it fail so what we'll
701:24 - do is go back up to our variables here
701:27 - and we'll go to our instance type
701:30 - and we'll just change this to nano
701:33 - and we'll save that
701:35 - we'll go back over here to our runs
701:40 - oh this is still running the old one
701:42 - here that's fine we can just cue up
701:43 - another one here so we can just say
701:45 - start a new plan
701:47 - uh new instance type
701:53 - okay and if we go back over to here
701:57 - the last one wouldn't have done anything
701:59 - because the infrastructure would have
702:00 - been the same so
702:06 - the previous one we just did here right
702:08 - it would just been like oh no it's still
702:10 - trying to apply it so i guess there is a
702:11 - change
702:13 - maybe we changed the instance type last
702:14 - time i don't know
702:16 - so anyway i'll see you back here when
702:18 - this is completely done okay
702:20 - all right great so we got an error if we
702:21 - go into our instance type here
702:23 - right and we look at it we can see that
702:25 - it failed because uh it wasn't the uh
702:27 - right uh type
702:29 - so
702:30 - um i mean that's pretty interesting so
702:32 - the other thing i would say uh that we
702:34 - could do is also kind of check out mocks
702:36 - now because i kind of feel like i have a
702:37 - better grasp on it now that we have a
702:39 - test running so just thinking straight
702:41 - about it a mock really is a
702:42 - representation of the state of
702:44 - infrastructure at the time of so if we
702:46 - go back to our runs and we go to a
702:48 - successful run like the trigger plan
702:49 - here and this one was successful we
702:51 - could go to the plans here and then
702:52 - download these mock files
702:55 - so we do have the ones from prior and i
702:56 - think those are totally fine and valid
702:58 - to use so what if what we do is go back
703:01 - to our project over here and we have um
703:06 - the mock files over here but really
703:09 - where they need to be is within the
703:10 - workflow directory because looking at
703:12 - the documentation here
703:14 - what it's saying is that you get all
703:15 - these things and this basically
703:16 - represents the state of those mock files
703:18 - and then you need to make a test folder
703:20 - and then a test data folder and then
703:22 - there's gonna be something based on the
703:23 - name of this uh the mock file so
703:26 - what we'll do is we'll go
703:28 - um
703:29 - up to this folder here and we'll say new
703:30 - folder
703:31 - test
703:32 - and then we'll make another new folder
703:34 - here
703:35 - test data
703:38 - those folders are files
703:40 - i think those are files
703:42 - so we'll delete that it's just out of
703:43 - habit to click the um
703:47 - the file there so we'll say new folder
703:48 - so we'll say test
703:50 - and then we'll say another new folder
703:52 - there
703:53 - test data
703:55 - okay
703:56 - and so we have our sender file here so
703:59 - we need to
704:00 - um have i think a similarly named one
704:02 - here so if we go back over here
704:04 - um
704:06 - this is foo whatever so i think we need
704:07 - to have a folder in here
704:09 - because it's all based on convention and
704:10 - i just it's pretty not that hard to
704:12 - figure out i don't have to read the docs
704:13 - to know that uh we'll just put that in
704:15 - here take out the word sentinel
704:17 - and then i would assume that we need a
704:18 - file in here what's it called like just
704:20 - pass and fail so i'm gonna just do a
704:22 - pass
704:24 - file new
704:26 - pass.hcl
704:29 - okay and then we have our test data so
704:31 - that was what we had down below here
704:33 - so i need to go grab that information
704:37 - i'm just looking for a folder where
704:40 - i might already have open here if i
704:42 - don't that's fine we'll just go ahead
704:44 - down below and just right click
704:47 - and reveal and explore
704:50 - we'll go over here
704:52 - and i need to move all these over so i
704:55 - just copy them over and we're going to
704:56 - go over to our terraform work
705:01 - flow here
705:02 - and i'm going to go here and paste that
705:04 - data in
705:06 - i don't know if these contain any kind
705:07 - of sensitive data because if they're
705:08 - based on the tf state file these might
705:10 - be something you don't want to share
705:12 - that might be a security vulnerability i
705:13 - don't know but i definitely won't have
705:15 - these available when i put this
705:16 - repository up for free
705:18 - um so we have those files in the right
705:21 - place
705:23 - and
705:24 - we have all this stuff here so i i think
705:27 - that um
705:28 - like you notice it's not there so i'm
705:29 - assuming that we need to open up this
705:31 - file and copy into our main hcl file so
705:34 - we'll go down below here and then i
705:36 - think it's just a matter of copying all
705:37 - this stuff right
705:40 - we'll say cut
705:42 - and then we'll go to
705:44 - [Music]
705:46 - um back up to here i suppose
705:50 - into our
705:53 - file it's getting a little bit confusing
705:54 - with all the stuff eh
705:57 - okay so that's in the right place
705:59 - our test date is there good here we are
706:01 - okay so what i'm going to do is just go
706:03 - down here and paste that in
706:07 - okay and so
706:09 - we didn't write any kind of pass
706:13 - test data test
706:15 - so that's something we will need here
706:17 - i'm not sure what we'll get so we'll
706:18 - just scroll down here
706:20 - so you can find the contents of a pass
706:22 - dot hcl
706:28 - it's not showing me anything here so
706:30 - just give me a moment i'm going to see
706:31 - what we have to do for this this test
706:33 - okay all right so a little bit of
706:34 - googling it looks like this one's on the
706:36 - same track here so since we probably
706:38 - copied the mock data from this one or
706:40 - somewhere through here we could probably
706:41 - just go grab this so
706:43 - um this is pretty much what our pass
706:45 - file will look like
706:47 - so we'll go ahead and grab this here
706:50 - i don't know if we really need a fail to
706:52 - write a failing test i don't really care
706:53 - about that i just want to see anything
706:55 - pass here
706:56 - we'll paste that in here we do have to
706:58 - be sure that we are accessing our data
707:00 - correctly so
707:01 - if we're in test it's going to go up one
707:03 - directory to the
707:05 - terraform directory
707:08 - but wouldn't it have to then cd into
707:12 - test so i don't think that source path
707:14 - is correct
707:17 - i'm just going to double check that here
707:20 - did you have an example repositories
707:22 - let's take a look here what we have
707:24 - um
707:26 - yeah that's kind of odd so i think
707:30 - that
707:32 - if this is relevant it needs to go to
707:34 - test data
707:36 - because how else would it get there
707:38 - okay
707:40 - so we'll do that so test rules main
707:42 - equals true
707:44 - um
707:46 - okay so that's a pretty simple test
707:48 - and so i think the way we run tests is
707:50 - there's like a sentinel test
707:52 - thing here
707:53 - i don't know if we have cinder installed
707:55 - i don't think so
707:58 - so there's no sentinel command
708:01 - so i guess that's something we have to
708:03 - install sentinel um
708:05 - cli terraform
708:09 - okay
708:10 - over here
708:12 - uh we're on technically linux even
708:15 - though we're on windows we're on linux
708:17 - so here it's just saying uh download it
708:19 - and then put it in the correct path
708:23 - so install so we'll get the appropriate
708:24 - package here
708:27 - and we're technically on linux
708:31 - and
708:33 - i guess we are 64-bit
708:38 - just gonna download here
708:41 - scroll up oh it is already downloading
708:42 - okay great and so i'm just gonna go to
708:44 - my downloads
708:48 - and i'm gonna open it up here
708:50 - so there it is and so i need to
708:53 - get it into the user local bin here so
708:56 - i'm just going to first
708:58 - get it in anywhere so
709:00 - because i'm just working here i'm just
709:02 - going to go
709:02 - open this up so reveal in the explorer
709:06 - okay
709:08 - and this is not where i want it to be
709:10 - i'm just dropping here for the time
709:11 - being
709:18 - technically we could run it from there i
709:19 - don't think it'd be that big of a deal
709:22 - so i'm just going to go back to my vs
709:23 - code here
709:25 - and i'm going to just type sentinel
709:28 - sentinel
709:30 - it's there right
709:32 - yep it's there
709:33 - i'm not sure if it's executable but
709:37 - i'm just going to type in sentinel here
709:39 - signal test
709:42 - okay so it doesn't think it's command so
709:43 - maybe i have to do like chamod u plus x
709:47 - that makes it executable on linux
709:50 - said no command not found
709:52 - well heck i'm right there maybe i have
709:54 - to put a period forward slash like that
709:56 - okay there we go so um i mean of course
709:58 - you don't want to leave it in here you
710:00 - and this would also end up in a
710:01 - repository so this will go to like your
710:03 - user local bin probably so
710:06 - i'm going to say like move sendl
710:08 - to user local bin
710:12 - and so now i should just be able to type
710:13 - sentinel it should get picked up
710:15 - it does great so here i can do test
710:19 - and down below it says open test no such
710:22 - file or directory so it can't find the
710:25 - mock data notice that it's going into
710:27 - the test test data so that is no good
710:29 - for us
710:30 - we did say to go up a directory so maybe
710:32 - if i go up back one more like this
710:37 - would that work
710:40 - no let's go put back in what they
710:41 - actually had there which i have a hard
710:43 - time believing that would be correct
710:46 - so
710:48 - open mock okay so that's definitely not
710:50 - right okay and so
710:55 - personally i just want this to work so
710:56 - i'm just going to cheat
710:59 - this is absolutely what you should not
711:00 - do but you know like i don't wanna be
711:02 - fiddled around with paths all day here
711:05 - and so i'm just gonna give it an
711:06 - absolute path and see if that fixes our
711:08 - problem
711:09 - okay and this will just say test data
711:13 - here
711:18 - um
711:22 - so that should absolutely work i'm just
711:24 - going to expand this here
711:26 - this is mock tf plan
711:30 - oh but it says pass in the name okay so
711:32 - the problem isn't that it's the fact
711:33 - that uh the mock data isn't named it's
711:34 - because the thing is you could download
711:36 - two different mocks
711:37 - right so you could have a state that is
711:38 - successful and failed and you probably
711:40 - want to rename them to say passed or
711:42 - failed so we don't necessarily have that
711:44 - so i think my original thing was correct
711:46 - where we had this test data
711:49 - and so here we just have to make sure we
711:50 - match the name so mock tf
711:53 - v2 is fine here okay
711:56 - again i don't understand the difference
711:58 - between all these files i definitely saw
711:59 - the documentation they explained them
712:01 - all so
712:01 - you know that might be something we want
712:02 - to read through here
712:04 - um so this is looking a little bit
712:06 - better so mock tf plan hyphen version 2
712:08 - sentinel
712:10 - so that
712:11 - is correct
712:14 - um but the director it doesn't like the
712:15 - direction it's going into that test
712:16 - again so
712:18 - again i'm going to just go back up one
712:19 - more layer here
712:22 - okay
712:24 - there we go and it's passing so
712:27 - um yeah so that's all it takes to um do
712:29 - that again i think if we were to commit
712:31 - this to our code i don't think that
712:33 - these run
712:34 - so we go like so we can just go add it
712:36 - and see what happens so we'll say git
712:37 - add
712:39 - git commit hyphen m validation
712:46 - and again i don't know if this mock data
712:48 - should be allowed to be committed into
712:49 - the
712:50 - repository because we have a tf state
712:52 - file here right
713:02 - okay i don't know but i'm going to just
713:03 - do a push here to see what happens
713:06 - but again i i really think that we're
713:08 - probably not supposed to have it in
713:10 - there
713:11 - um
713:11 - so what we'll do
713:14 - is
713:15 - go back to
713:17 - our terraform io
713:22 - sign in
713:26 - and we'll just see what happens here i
713:28 - mean we don't expect the
713:29 - this to pass because it's still using
713:31 - the wrong instance type
713:32 - but i was just curious to see if the
713:34 - mock would appear in any way here i
713:35 - don't think it does i think that's just
713:36 - something that you'd have to do uh
713:38 - beforehand and i think what you'd have
713:40 - is you'd have a pull request and the
713:41 - pull request could be used to run those
713:43 - unit tests because that's basically what
713:45 - it is okay so yeah that's exactly what i
713:48 - thought would happen but down below here
713:49 - it says the mock block is not supported
713:52 - so
713:54 - i wonder what you would do so if you
713:56 - can't have mocks in the file
713:59 - what would you do locally because you
714:02 - need to
714:03 - i guess the thing is is that the mock
714:04 - file the sendal.hcl file would not be
714:08 - in this fold so you might have the
714:09 - central hdl file in your main repository
714:12 - for mocking right and if you committed
714:15 - it wouldn't run it because the policy
714:16 - set would actually be in another
714:17 - repository so i think that's how it's
714:19 - supposed to work so
714:21 - yeah i think really we want to have
714:22 - policy sets in their own repository like
714:25 - completely away from there because we're
714:26 - seeing we're running into a lot of
714:27 - problems but we pretty much accomplished
714:29 - what we wanted to do with sentinel more
714:31 - than i thought we were going to do uh so
714:33 - that's pretty great so there you go um
714:35 - in terms of this we probably want to
714:37 - tear this down uh we do need to do
714:38 - something with vault
714:40 - and stuff like that but i think that uh
714:42 - what we'll do is just tear this down and
714:44 - you know if we need to
714:45 - bring it back up we'll do that so i'm
714:46 - gonna go to destruction here
714:48 - and
714:52 - we're gonna go ahead and just destroy
714:53 - the plan here
714:58 - okay
715:01 - and we're all now in good shape
715:04 - and so um yeah i'll see you in the next
715:06 - part okay
715:07 - but we're all done here for for sentinel
715:09 - all right actually i guess we're not
715:11 - gone here just yet because it looks like
715:12 - our destroy run failed uh because we
715:14 - didn't pass here so
715:16 - um that is a bit of a problem so we'll
715:19 - have to go to the variables
715:21 - i guess it's a good edge case to know
715:23 - about but um we'll go back and change
715:24 - this to a micro even though it's going
715:26 - to just tear it down anyway you know
715:28 - so we'll go and type in micro save
715:30 - variable
715:32 - and we'll go back to our runs
715:34 - we'll start a new plan
715:36 - or sorry we'll go to settings here
715:39 - destruction
715:41 - cue the plan
715:43 - i'm just curious giving a plan we'll
715:45 - redirect a new up output here
715:48 - okay cool um so i'm just going to type
715:50 - in vcs terraform again here
715:59 - okay and so
716:01 - this should
716:02 - work
716:04 - and i will come back and just confirm
716:06 - this with you okay so i'll be back here
716:07 - in a second all right so the real reason
716:09 - we can't uh get rid of this is because
716:10 - we have those darn blocks in there so
716:13 - um
716:15 - what i'm going to do is go over to our
716:16 - sender file here um up to i mean we
716:19 - don't use this one so i'm going to go
716:20 - ahead and delete that that's not even
716:22 - something that's going to happen
716:24 - and
716:26 - we need to update our
716:31 - hcl file here
716:33 - okay
716:34 - and i'm assuming that this supports
716:38 - this okay
716:41 - because this is not how we should be
716:42 - doing this um and
716:44 - here we go git add
716:47 - git commit hyphen m
716:52 - minor change
716:56 - okay and this is going to trigger a run
716:58 - here
717:01 - i really wanted to destroy
717:07 - so let's give it a moment there to start
717:09 - so we can kill it
717:11 - um
717:16 - did i not push
717:20 - oh maybe i didn't push
717:25 - and we'll go back here
717:27 - there's that run i'm going to go in here
717:30 - i want to stop it uh cancel run
717:34 - okay
717:35 - and so now what i'll do is go over to
717:37 - the here
717:40 - destroy this
717:43 - we'll run that okay we'll destroy that
717:49 - and i will again see if this is working
717:52 - and i'll see you back here in a moment
717:53 - okay all right so i just wanted to
717:54 - confirm there that everything is uh
717:56 - destroyed so we're all in good shape
717:58 - okay so uh yeah so we're actually done
718:00 - sendal now for real okay bye
718:04 - all right let's take a look here at
718:05 - hashicorp packer so it's a developer
718:07 - tool to provision a build image that
718:09 - will be stored in a repository using a
718:11 - build image before you deploy provides
718:13 - you with the following immutable
718:15 - infrastructure your vms and your fleet
718:17 - are all one to one in configuration
718:20 - faster deploys for multiple servers
718:22 - after each build
718:23 - earlier detection and intervention of
718:25 - package changes or
718:26 - of deprecationable technology so let's
718:28 - take a look at what that workflow would
718:29 - look like so you'd have your code you
718:31 - commit it to your ci cd pipeline and
718:33 - within that pipeline it would start up a
718:35 - build server running
718:37 - packer and that would trigger a build
718:39 - image so you'd use a something to
718:41 - provision it with so you could use
718:42 - ansible or a variety of different
718:44 - provisioners within packer
718:46 - and then packer would then store it
718:48 - somewhere so maybe this would be amazon
718:50 - machine image because you're deploying
718:51 - to aws
718:53 - and then what you do is reference that
718:55 - image in your terraform code and when
718:57 - you provision it would get deployed to
718:59 - your
719:00 - csp so this would be aws in this case so
719:03 - packer configurations is a machine uh
719:06 - packer configuration configures the
719:08 - machine via oops
719:25 - hey it's andrew brown from exam pro and
719:27 - we are taking a look at hashicorp
719:28 - packers so packer is a developer tool to
719:30 - provision a build image that will be
719:32 - stored in a repository so using a build
719:34 - image before you deploy it's going to
719:36 - give you the following benefits
719:37 - immutable infrastructure your vms in
719:39 - your fleet are all one-to-one in
719:40 - configuration faster deploys for
719:43 - multiple servers after each build
719:45 - earlier detection intervention of
719:46 - package changes or deprecation volt
719:48 - technology let's take a look at what
719:50 - that workflow would look like so first
719:52 - we'd have github or or your git so
719:54 - wherever you commit your changes and
719:57 - from there that would trigger a ci cd
719:59 - pipeline with within that csd pipeline
720:01 - it would trigger a virtual machine so or
720:04 - a build server that's a running packer
720:06 - and so that would trigger the build
720:08 - image process from there packer would
720:10 - use some kind of provisioner like
720:12 - ansible to provision the image and then
720:14 - when it was done and and it was all good
720:16 - it would store it somewhere like an
720:18 - amazon machine image once it is stored
720:21 - wherever you want it to go
720:23 - then in terraform you would just
720:24 - reference it using like a data source
720:26 - and then from there you could provision
720:27 - your resource okay so packer configures
720:31 - a machine via a packer template and yes
720:34 - i know the e is missing
720:36 - so sorry about that but packer templates
720:38 - use the hashicorp configuration language
720:40 - hcl which we saw
720:42 - if you remember way earlier in the
720:44 - course
720:45 - and that's what we're going to review
720:46 - next is what that packer template file
720:48 - looks like okay
720:50 - all right so packer configures a machine
720:52 - or container via a packer template file
720:55 - and packer template uses the hashicorp
720:57 - configuration language hcl so that's why
720:59 - it looks very familiar to terraform and
721:01 - a variety of other languages we've been
721:03 - looking at in this course
721:04 - and so what this file is doing is
721:06 - provisioning a virtual machine on aws so
721:09 - here you can see that it's a t2 micro
721:11 - and the us west 2 region that it's
721:13 - probably going to be installing apache
721:14 - since it's named httpd
721:17 - and the way it's going to be created is
721:18 - via an ebs volumes let's talk about kind
721:21 - of the components that we're looking at
721:22 - here so when you have a packer template
721:24 - file you have to specify a source and
721:26 - this says where and what kind of image
721:28 - we are trying to build so the source is
721:30 - amazon ebs so it's looking for an ami
721:34 - image or it's being backed by that ebs
721:35 - volume there okay
721:37 - in this case it's an ebs backed ami the
721:40 - image will be stored directly in a bus
721:42 - under the ec2 images and so we have the
721:44 - build step so the build allows us to
721:46 - provide configuration scripts packer
721:48 - supports a wide range of provisioners so
721:51 - we have chef puppet ansible power power
721:53 - shell bash salt
721:55 - whatever you want basically has it and
721:57 - the post provisioners runs after the
721:59 - image is built so they can be used to
722:01 - upload artifacts or re-package them all
722:04 - right and the place where this is going
722:06 - to be stored is going to be on amis okay
722:09 - so there you go let's look at how we
722:12 - actually integrate terraform and packer
722:14 - together in terms of a ci cd workflow we
722:16 - kind of saw this in uh that overall
722:19 - graphic in the first uh packers slide
722:21 - let's just kind of look at the code okay
722:23 - so to integrate packer there are two
722:24 - steps you're going to build damage so
722:26 - packer is not a service but a
722:28 - development tool so you need to manually
722:29 - run packer or automate the building of
722:31 - images with a build server running
722:33 - packer then the second part of that is
722:35 - referencing the image so once an image
722:38 - is built you can reference reference the
722:40 - image as a data source
722:42 - so if it's stored in abus ami we're
722:44 - going to just source it from there
722:46 - and the way we select it is what we can
722:49 - do is say okay get us the most recent
722:51 - one and use this regular expression and
722:54 - the owner has to be us
722:56 - and and those kind of parameters to
722:58 - decide how to choose that image so
723:00 - that's all there is to it you're just
723:01 - using data sources to reference them
723:03 - after they've already been built okay
723:06 - hey this is andrew brown from exam pro
723:07 - and we are taking a look at uh using
723:09 - packer with terraform and mostly it's
723:12 - just about just using packer uh and so
723:15 - what i want to accomplish here is to
723:17 - generate an image and store that onto
723:19 - amazon machine images and then load that
723:21 - into a terraform file or like reference
723:23 - it as a data source so i've never done
723:25 - this before but it should be fun and
723:27 - we'll figure this out so what we're
723:29 - first going to need to do is download
723:30 - packer so notice in the top right corner
723:33 - we make your way to packer however you
723:34 - want to and we'll go ahead and download
723:37 - and this one is for windows it's a
723:39 - binary but we are going to be using
723:41 - linux uh we've done this so many times
723:43 - these three two commands so i'm not
723:44 - going to do that again here but if you
723:46 - have yet to do so you can go and run
723:48 - that and so i'm going to go ahead and
723:50 - install packer and once packer is
723:52 - installed i will come back here and we
723:54 - will get to it okay all right so after a
723:56 - short little white there packer is
723:58 - installed and so what i want to do is go
724:00 - into my packer folder here
724:02 - and i'm just going to run packer and see
724:04 - what we get
724:07 - and so we have packer build console fix
724:10 - format init so install missing plugins
724:14 - looks kind of similar to terraform
724:16 - build images from a template that that
724:19 - sounds kind of interesting so i think
724:20 - the first thing we're going to need to
724:21 - do is define ourselves a template file
724:24 - so uh i remember i researched one and
724:27 - and put one in my uh slides here so
724:30 - let's make our work way over there and
724:32 - see if we can kind of just like use our
724:33 - notes here as a reference so going down
724:35 - to this packer file let's go ahead and
724:37 - just write one here uh i don't say what
724:40 - the name of the packer file is
724:42 - that would probably help but i believe
724:44 - that they're just named as dot hcl files
724:46 - so what i'm going to do
724:48 - is go into
724:50 - this here and make a new file and we're
724:52 - going to say
724:55 - i guess apache.hcl since we're already
724:58 - very familiar with how to install apache
724:59 - that seems like the easiest way to do it
725:01 - and again this is going to be very
725:02 - similar looking to
725:05 - terraform because it's
725:06 - you know all based on hcl so we'll do a
725:09 - type
725:11 - string
725:13 - and we are going to need some kind of
725:15 - default ami so
725:17 - uh we can go grab the one we've been
725:18 - using all along here
725:20 - um i think we specified it
725:24 - and we can just go back to count counts
725:25 - always a good one to go to
725:28 - so i just want to go and grab
725:32 - where is it um
725:34 - count count count where are you anybody
725:36 - see it
725:44 - i'm blanking today so i'm just going to
725:45 - grab it from aws
725:48 - it's not a big deal
725:51 - i'm just pulling up aws here we're going
725:52 - to make our way over to ec2
725:56 - and we're going to go ahead and launch
725:58 - ourselves a new server actually i could
726:00 - probably grab it from the old one now
726:01 - i'll launch a new one just in case you
726:02 - don't see anything there that might not
726:04 - be fair i'm going to go ahead and grab
726:06 - that ami id
726:08 - and i'll just move that off screen here
726:09 - for a moment and we're going to place in
726:11 - that am id because i assume we want one
726:13 - to override then we're going to say
726:14 - locals
726:16 - uh app name
726:18 - and i think the example i wrote here is
726:20 - is apache because that is what apache is
726:21 - httpd not sure how they came up with
726:24 - that name but that's how they call it
726:26 - so we need to provide ourselves a source
726:29 - so we're going to do amazon ebs
726:33 - httpd
726:36 - notice that like the source is not
726:38 - called data it's just called source uh
726:39 - if we go over to the documentation here
726:42 - just when i want to show you here docs
726:48 - if it ever loads
726:49 - come on docs you can do it
726:55 - so down below here or on the left hand
726:57 - side we have sources so if i believe if
726:58 - we were to go over to here and go over
727:01 - to amazon ami
727:03 - someone says amazon ami
727:06 - overview
727:10 - [Music]
727:13 - builders
727:16 - ec2
727:18 - ebs
727:26 - i'm just trying to find the same kind of
727:28 - information that it has there eh
727:31 - it's not really doing what i want but
727:32 - anyway i know that this code is correct
727:34 - even though we can't seem to find uh
727:35 - this out probably just go type in
727:38 - packer ebs amazon ebs
727:41 - i really like to always refer to the
727:42 - documentation when i can here
727:44 - so it does say it's a
727:46 - builder amazon eps
727:50 - source
727:55 - down below here we go
727:58 - all right so yeah um i don't understand
728:00 - this uh this builder flag as of yet but
728:03 - uh we'll work our way through here and
728:05 - figure it out okay
728:06 - so i'm gonna go back and pull up my
728:09 - vs code here
728:11 - and
728:12 - we're gonna put curly's here
728:14 - and so we need our ami name here
728:17 - so my server
728:19 - dollar sign local
728:23 - app name
728:24 - instance type
728:27 - t2 micro
728:30 - region this is going to be us east 1
728:34 - source ami this is going to be
728:37 - the variable we set up above ami id
728:40 - then we are going to do ssh username
728:43 - that's going to be ec2 user
728:45 - that's the default that abuse always has
728:48 - ec2 user
728:50 - we can do some tags here not really
728:52 - necessary but it's good to probably give
728:54 - it a name right so we'll just say
728:56 - name
728:58 - apache server
729:02 - and actually we could probably just do
729:04 - local.app name
729:06 - maybe instead
729:08 - and then we have our build step here so
729:11 - we're going to specify our sources
729:13 - and we're going to do
729:17 - source.amazon.ebs.htpd
729:22 - and we're going to do
729:24 - provisioner pro
729:28 - visioner
729:30 - shell
729:33 - and then we want to provide a script
729:36 - i think we can we can actually do it in
729:38 - line if we didn't want to do a script
729:39 - there but we know our script works so
729:41 - maybe we should just stick to that so
729:43 - i'm just going to call this
729:45 - userdata.sh because we already have that
729:47 - somewhere
729:49 - before
729:50 - so we'll do post process we don't need a
729:51 - post processor so we just want to run
729:53 - that script
729:55 - i believe we have that in our terraform
729:57 - workflow
729:59 - we go over there to
730:01 - our workflow wherever it is
730:05 - might also be under modules if we go
730:06 - into our module here
730:09 - didn't we create one there called user
730:10 - data
730:13 - oh that's a yaml file
730:16 - oh okay
730:18 - i mean that's not a big deal um we could
730:21 - probably just
730:24 - okay so we're not going to do it that
730:25 - way all right um
730:27 - if we're not going to do it this way we
730:28 - probably can provide inline things we
730:30 - don't probably have to do script equals
730:32 - so what i'm going to do is go back
730:34 - to the terraform documentation here or
730:38 - packer documentation i should say
730:40 - and what i want to do is look at
730:42 - provisioners
730:43 - we're going to look at shell
730:46 - so it has this inline step and i assume
730:47 - that this is going to run in into
730:49 - sequential order so inline array of
730:50 - strings
730:52 - okay so what we will do here is we will
730:55 - type in inline
731:02 - and i've done this like a thousand times
731:04 - but i'm just gonna go google it
731:07 - apache install aws tutorial
731:10 - there's probably one on the adabus
731:12 - website for it
731:16 - for like user data
731:22 - and this is pretty much has some of it
731:24 - here i was just kind of looking for
731:26 - these commands like the yum install and
731:29 - the pseudo system start
731:31 - so we're going to go ahead and grab that
731:35 - and
731:37 - then we're going to go
731:42 - and grab the next few lines here
731:50 - just want to start and enable
731:52 - that's the three things that we need to
731:53 - do
731:57 - not complicated at all
732:01 - and so what i'm going to do is type in
732:03 - packer build and see what happens
732:06 - now i didn't specify any adwords
732:07 - credentials or anything like that i
732:08 - assume it would pick up the default
732:10 - and we're going to go to the top here so
732:12 - it looks like we have to provide the
732:13 - template name so maybe we'll do
732:15 - apache hcl here
732:21 - and it says
732:24 - error parsing json invalid character v
732:27 - for the beginning of the value
732:29 - oh so it has to be
732:31 - pkr.hcl okay
732:36 - i'm really liking the user experience of
732:38 - the developer experience for the cli
732:39 - they're really good at telling us what's
732:40 - wrong with them um pkr hcl
732:44 - if there's like a default file i don't
732:46 - know what it should be called
732:48 - so we got a bunch of errors which is
732:49 - fine unsupported argument locals an
732:52 - argument locals is not expected here did
732:53 - you mean to define a local's block it's
732:55 - because i put an equals in front of it
732:58 - supposed to just be this
733:00 - not that we were really using locals for
733:02 - much here
733:09 - and it looks like it is provisioning
733:10 - found in ami it's going to use that as
733:12 - the the source one creating a temporary
733:14 - key pair authorizing to port 22
733:19 - uh
733:19 - name packer builder so i don't know if
733:23 - this uses i don't think it does but i
733:25 - don't know if it uses amazon
733:28 - because there's like ec2 builder image
733:30 - and there might be a way to use it with
733:32 - um packer directly but i'm not sure how
733:34 - to do that
733:35 - it's going to go over here i'm just
733:36 - going to see to make sure it's not
733:37 - running
733:38 - a pipeline here is it
733:40 - image pipelines
733:42 - no okay that's good but what i will do
733:44 - is go over to my ec2 here
733:49 - and what i want to go do okay so packer
733:52 - builders is running as a virtual machine
733:53 - so it's actually um
733:55 - going to spin up a vm and then bake the
733:58 - ami that way
733:59 - which seems a lot better
734:03 - we'll go over to our amis and see when
734:04 - that happens there
734:08 - um
734:09 - it's just unlock another those that red
734:11 - stuff doesn't look good
734:13 - seems it seems like it didn't really
734:14 - matter
734:17 - so thing like aws has
734:19 - an entire pipeline for ec2 image builder
734:21 - but it does cost money to run where i
734:23 - kind of feel like
734:24 - if all packer is doing is spinning up a
734:26 - virtual machine temporarily to make that
734:28 - image that's going to be a lot more cost
734:29 - effective
734:31 - i mean we could go look up what the cost
734:33 - is to use ec2 image builder while we
734:34 - were watching this
734:38 - builder can't seem to type today
734:42 - uh just pricing i just wanted the
734:44 - pricing
734:51 - it can't be free
734:54 - oh is it there's no cost i could have
734:56 - swore there was a cost for this
734:58 - no cost image builders offered at no
735:00 - cost other than the cost of the
735:02 - underlying aws resource i think the
735:04 - thing is that
735:05 - it's that when you use um
735:07 - ec2 image builder you have to use of a
735:09 - particular size
735:13 - you know if you don't really use aws
735:14 - you're more wearing azure gcp i
735:16 - understand why this is not much of an
735:17 - interest but
735:18 - i'm pretty sure
735:20 - if i go here
735:26 - that the size that you get for the image
735:30 - what size of
735:32 - each image does ec2 image builder use
735:35 - because i remember was like really
735:37 - really large un like unreasonably large
735:40 - and that was the cost involved in it
735:41 - can't find it today it's not a big deal
735:45 - but waiting for the ami to become ready
735:47 - so if we go over to our amis here and
735:49 - give us a refresh we can see that it is
735:51 - spinning so it is provisioning that ami
735:55 - while that is going on what we can do is
735:56 - just start setting up the next part of
735:58 - this so
736:00 - within
736:02 - our packer here we can say new file and
736:04 - i'm going to say main.tf
736:07 - i'm going to go as per usual and grab
736:09 - some default code from our account
736:11 - example which is
736:13 - right here
736:15 - okay copy that we're going to go all the
736:17 - way down to the ground here and
736:19 - [Music]
736:20 - i'm going to go into the main tf here
736:22 - paste that on in
736:23 - and we probably want to keep the public
736:25 - ip around we actually don't really care
736:27 - but i'm putting it in anyway i'm going
736:28 - to take out the tags oh i want to leave
736:30 - the name in so i'll just say like server
736:31 - packer
736:33 - okay
736:34 - server apache packer
736:38 - and
736:40 - uh this is the thing that we want to
736:42 - replace out this all looks fine so this
736:44 - is what we need to figure out is our ami
736:46 - here it's probably going to come in as a
736:47 - data source it has to come in as a data
736:49 - source and i'm pretty sure that's what i
736:51 - wrote
736:52 - in our documentation here so yeah it's a
736:55 - my example things like that so
736:58 - what we're going to do
736:59 - is type in a bus
737:01 - mi
737:03 - packer image
737:06 - and we'll just define that data source
737:08 - so adabus ami
737:11 - packer image
737:14 - and we have executable users executable
737:18 - users equals self
737:20 - i'm not saying i know what all these
737:22 - options do but like you just go to the
737:23 - documentation you grab them you got
737:24 - something works
737:25 - true name regex
737:29 - okay and so we would do something like
737:31 - uh start with the little carrot
737:33 - character
737:34 - and
737:35 - what did we name this this starts with
737:37 - uh my server hyphen
737:40 - probably would have helped if we named
737:42 - it with like something like
737:44 - packer in the name but
737:45 - i think that's fine
737:48 - um
737:50 - we might as well
737:52 - might as well go the full name here
737:55 - and say httpd because that's technically
737:56 - what it's going to be
737:59 - um we might want to match for
738:02 - more values here so
738:05 - i'm not sure i guess like
738:06 - we do that
738:10 - because sometimes it's like three digits
738:11 - or whatever but i don't know what packer
738:12 - is going to do if we keep pushing
738:13 - additional ones i'm not really familiar
738:15 - with with that so
738:17 - we'll just say owners equal self
738:21 - and so now that should be all set up to
738:23 - go as that is
738:26 - running it finished so that's all good
738:27 - we're going to say
738:28 - terraform
738:30 - init and here it says a block definition
738:34 - must have a block content deliminator
738:38 - so we have a small problem here
738:43 - it looks correct to me
738:47 - this is not right okay
738:53 - we'll see if we can knit this
738:58 - now whether our build image works
738:59 - properly i don't know
739:03 - so it'd be really good to write like
739:05 - some tests for it i imagine that there
739:07 - is some kind of way to do that
739:10 - um
739:11 - i guess it'd be like the post processor
739:13 - scripts maybe you'd want to do that
739:15 - where you'd want to
739:16 - use that as a means for
739:18 - testing
739:20 - i'm not really sure
739:21 - obviously different provisioners might
739:23 - have
739:24 - that kind of stuff built in so
739:26 - you know it might be just part of the
739:27 - provisioning tool you can use
739:30 - so it initialized here we're going to do
739:32 - a terraform plan
739:36 - because i'm hoping that it might
739:37 - complain about the data aws ami here if
739:39 - it does not exist properly and it did so
739:41 - your curry return no results please
739:43 - change your search criteria and try
739:44 - again
739:45 - so
739:46 - however i wrote this is probably not
739:48 - correct so i will just take this out
739:51 - here
739:53 - try this
740:03 - no results
740:05 - so what i'll do is go over to
740:08 - uc2 here and actually that's the only
740:10 - name that's here
740:11 - for the ami so i guess i could just go
740:14 - here and grab the name
740:17 - but maybe that's not the problem oh no
740:20 - that might be fine so we'll just do this
740:28 - name regex
740:31 - okay
740:32 - so let's go look up data aws ami
740:40 - excavable users most recent name regex
740:43 - owners
740:45 - maybe we could just do like a filter
740:47 - here
740:48 - let's look at name x a regex to apply to
740:50 - an analyst returned by aws this allows
740:52 - for more advanced filtering not
740:53 - supported by the database api filtering
740:56 - is done locally on the aws
740:58 - returns
740:59 - so
741:01 - i suppose that is good but like i just
741:03 - need
741:04 - it to work so i'm going to try the
741:06 - filter instead
741:09 - and i'm actually going to put literally
741:11 - the name in my server
741:13 - httpd
741:15 - i'm going to take out the regex assuming
741:16 - that is the problem
741:23 - owners itself executable users itself um
741:26 - please change the criteria
741:30 - i don't know what x google users users
741:32 - actually does let's maybe look up what
741:33 - that is limit search to users with
741:35 - explicit launch permissions on the image
741:39 - is that required no so let's just take
741:41 - that out
741:45 - if more than one there isn't so let's
741:47 - just take that out for the time being
741:50 - who's the owner of this
741:52 - we're the owner right we have to be
741:55 - owner is this ip address that must be us
741:57 - or sorry not ip but like our account
741:59 - number
742:01 - so i mean that should be fine
742:14 - and incorrect attribute value type
742:18 - oh okay so that was fine so we'll do dot
742:20 - id
742:24 - but you know if you're doing this like
742:26 - if you wanted a continuous pipeline
742:28 - you'd probably want to get the most
742:29 - recent and have a better regex
742:33 - and so i'll do a terraform apply auto
742:35 - approve and see if this works
743:00 - one thing i kind of wonder is like with
743:01 - packer how would you do like a
743:03 - versioning
743:10 - because that's what i'm not certain
743:12 - about so like i'm just kind of like
743:13 - looking through here and seeing what
743:14 - they would do for that
743:16 - i would imagine that uh you're probably
743:18 - supposed to like increment it and have
743:20 - it part of the name
743:22 - nothing's really speaking to me there
743:23 - but you know like
743:25 - the idea is that you want to have things
743:27 - like
743:28 - zero zero zero zero one zero two zero
743:31 - three
743:32 - but i imagine like there's some
743:33 - pragmatic way maybe there's like a
743:35 - built-in function or something that we
743:36 - can do to do that
743:37 - um or what you do is you just have a
743:39 - variable probably that's actually what
743:41 - you probably do
743:42 - is you'd have like variable
743:45 - like version
743:47 - right
743:48 - string
743:51 - and then you'd probably set it and it
743:52 - would come through that way
743:56 - like you'd set it over here
743:58 - it says our server has finished
743:59 - provisioning let's go c and take see if
744:02 - that actually worked
744:03 - we'll go up to ec2 instances here
744:06 - that is running
744:08 - copy that
744:11 - paste that in
744:16 - um
744:18 - the security group doesn't have any open
744:19 - ports right
744:25 - so it probably did work it's just we
744:27 - didn't create a security group with us
744:28 - so there are no open ports for us to
744:30 - check i'm not worried about this i don't
744:32 - care if it actually did work or not
744:34 - because we more or less follow all the
744:36 - steps there but i believe the reason
744:38 - it's not working like there is just
744:39 - because we don't have a security group
744:40 - and i just don't want to
744:42 - uh fiddle with that and put it into a
744:44 - state so that it does not match
744:46 - so anyway we're all done here so i'm
744:47 - going to do a terror forum
744:49 - um apply auto approve
744:53 - destroy
744:57 - but there we go we accomplished that
744:59 - with packer that pretty much wraps up
745:01 - all the main
745:03 - follow alongs for the course so
745:04 - hopefully that was a lot of fun
745:06 - um yeah we'll just continue on here
745:09 - all right so let's talk about
745:10 - terraforming console because you're
745:12 - going to hear consul mention throughout
745:13 - the documentation and you might think
745:15 - it's critical to the exam but it's not
745:17 - so i just want to make sure we
745:18 - understand its relation to terraform so
745:20 - console is a service networking platform
745:22 - which provides service discovery so
745:24 - central registry for services in the
745:26 - network it allows for direct
745:27 - communication so no single point of
745:29 - failure via load balancers it has a
745:31 - service mesh so managing network traffic
745:32 - between services a communication layer
745:35 - on top of your container application so
745:36 - think middleware it has application
745:38 - configuration capabilities so console is
745:41 - useful when you have a microservice or
745:44 - service oriented architecture with
745:45 - hundreds of thousands of services so
745:47 - these are containerized apps or
745:49 - workloads
745:50 - and so the way console integrates with
745:53 - terraform is in the following ways it is
745:54 - a remote backend because console has a
745:57 - key value store
745:59 - and this is where you could
746:00 - store the state of your terraform files
746:03 - then also there's a console provider
746:05 - because you can use terraform to set up
746:08 - some things in console for you but
746:10 - there's not much else outside of that
746:12 - okay
746:15 - all right we're taking a look here at
746:16 - hashicorp vault so vault is a tool for
746:18 - securing accessing secrets from multiple
746:21 - secret data stores vault is deployed to
746:23 - a server where a vault admin can
746:26 - directly manage secrets and we have
746:27 - operators also known as developers can
746:29 - access secrets via an api vault provides
746:32 - a unified interface to any secret such
746:34 - as aws secrets console key values google
746:37 - cloud kms azure service principles it
746:40 - provides tight access control so just in
746:43 - time which is reducing surface attacks
746:46 - based on a range of time and just enough
746:48 - privilege so reducing surface attack by
746:50 - providing at least permissive
746:52 - permissions we can also
746:54 - record a detailed audit log so we have
746:56 - tamper evidence so this is kind of the
746:58 - idea of our
747:00 - little hashtag fault stack so you have
747:02 - your secrets engines these are
747:04 - third-party services or sorry cloud
747:06 - services that actually store the secrets
747:08 - you have your vault cluster which act as
747:09 - the adapter to your resources and the
747:11 - resources which are going to access them
747:13 - so again vault is is deployed to virtual
747:16 - machines in a cluster and vaults can be
747:18 - backed up via snapshots so if you do
747:20 - provision them and you're worried about
747:21 - the state of those vaults you can
747:23 - definitely save those for later okay
747:26 - let's take a look here at terraform and
747:28 - vault how they would work together so
747:30 - when a developer is working with
747:31 - terraform and they need to deploy a
747:33 - provider like aws they will need aws
747:35 - credentials so abs credentials are long
747:37 - lived meaning a user generates a key in
747:39 - secret and they are usable until they
747:41 - are deleted so the ada's credentials
747:43 - reside on the developer's local machine
747:45 - and so the machine is at risk of being
747:47 - compromised by malicious actors looking
747:49 - to steal those credentials so if we
747:51 - could provide credentials just in time
747:54 - expire their credentials after a short
747:56 - amount of time so short-lived we could
747:58 - reduce the attack surface area of the
748:00 - local machine and so this is where vault
748:02 - comes in because vault can be used to
748:04 - inject short-lived secrets at the time
748:06 - of terraform apply so imagine you are
748:10 - you are the developer and you run your
748:13 - terraform apply at that point in time
748:15 - it's going to inject the secrets the way
748:17 - we do that is via
748:19 - data sources data source is always the
748:20 - way we get data into our terraform
748:22 - configuration file but let's look at
748:24 - that in greater detail on the next slide
748:25 - here okay
748:27 - all right let's take a look at how this
748:28 - vault injection via data source works so
748:30 - a vault server is provisioned a vault
748:33 - engine is configured like aws secrets
748:34 - engine the vault will create a machine
748:37 - user for aws vault will generate a
748:39 - short-lived aws credential for that
748:42 - machine user thought we'll manage and
748:44 - apply the database policy and then
748:45 - within our terraform we can provide a
748:47 - data source
748:48 - to the vault so that's what we're doing
748:49 - we're saying vault about access
748:51 - credentials and we are getting the
748:53 - output from our terraform remote state
748:55 - admin outputs backend uh and then from
748:58 - there we can reference them into aws
749:00 - okay
749:01 - so when terraform applies run it will
749:03 - pull short-lived credentials to be used
749:05 - uh used for the scope of the duration of
749:07 - the current run every time you run apply
749:09 - you will get a new short live
749:11 - credentials which is the whole point of
749:13 - uh the short-lived idea okay hey this is
749:16 - andrew brown from exam pro and we are
749:18 - taking a look at vault
749:20 - and so the idea here is that we want to
749:22 - be able to inject uh secrets from vault
749:25 - in a secure manner for our local
749:27 - developer environments i really kind of
749:28 - wish i included this screenshot or this
749:31 - graphic within my slides i just found it
749:33 - as as of now because it does really
749:35 - represent all the types of secret
749:36 - engines and capabilities of vault one
749:38 - thing in particular i wasn't aware of is
749:40 - that it has its own key value store
749:42 - uh so that's what we're going to be
749:44 - using we're going to keep it really
749:45 - simple here um but the first thing we're
749:47 - going to have to do is go ahead and
749:49 - install vault so just down below i have
749:51 - a link here that i found
749:53 - and we'll go down below
749:55 - and it's not shouldn't be too hard to
749:57 - install so
750:00 - we are on linux today i mean i'm on a
750:02 - windows machine but i'm using linux
750:04 - as the windows
750:06 - subsystem there and so this is where
750:08 - we're going to start and grab our stuff
750:10 - so making my way over to vs code whoops
750:13 - um and
750:15 - i'm just trying to think should we use
750:16 - this for a new project probably so i'm
750:19 - going to just cd out here
750:22 - and i'm going to make my way into
750:25 - um vault which i apparently don't have a
750:27 - folder for so i'm going to just go here
750:31 - and we're going to
750:34 - find
750:35 - reveal and explore
750:40 - and we'll make a new one
750:44 - 200 volts
750:47 - okay and so
750:51 - we'll start first install something then
750:53 - we'll set up a project all right so um
750:55 - [Music]
750:56 - let's go through the installation
750:58 - process here okay so we'll go do a curl
751:02 - which is our first step
751:05 - and that's just gonna grab the gpg i
751:06 - think we already have it because we did
751:08 - it for probably
751:10 - the the cli4 um
751:12 - terraform there but we'll just do it
751:13 - again there it doesn't hurt i'll add the
751:15 - repository again i think we already did
751:16 - this when we installed the cli in the
751:18 - beginning of this course
751:21 - but we'll let it go again there i
751:23 - remember this takes a little bit of time
751:24 - so we'll just wait here for a bit
751:30 - all right so now we need to run the last
751:32 - command which is actually going to go
751:34 - ahead and install vault here for us
751:35 - let's go ahead and grab that line
751:38 - and i'm going to go ahead and paste that
751:40 - on in
751:41 - i'm not sure if i grabbed that properly
751:43 - we'll try that one more time
751:46 - it uh oh yeah my console is unresponsive
751:48 - there we go okay just happens when i um
751:51 - i stop and start recording it just for
751:53 - some reason times out like that so i'll
751:54 - go ahead and hit enter there and that
751:56 - will go ahead and install our vault
751:58 - and then after that we're gonna have to
752:00 - start getting it running um there is
752:02 - again a tutorial to inject secrets i'm
752:04 - not going to stick one to one with it
752:05 - because
752:06 - it does come with a repository but i
752:08 - find that it is a little bit more work
752:10 - than we want to do here we just want to
752:11 - kind of get a basic example working
752:14 - and i just want to make our lives a
752:15 - little bit easier so i'm just going to
752:17 - modify it as we go here
752:20 - but uh yeah we'll just wait for that to
752:21 - install i'll see you back here in a
752:23 - moment okay
752:24 - all right so after a short little wait
752:25 - here i believe that um vault is
752:27 - installed let's find out if it works so
752:29 - we'll type in vault
752:31 - once i get the responsiveness back from
752:33 - my console here just give you in a
752:35 - moment great oh nope there we go vault
752:39 - and so vault is there and so what we can
752:41 - do is start it up in a developer mode
752:43 - and i remember from here they actually
752:45 - had some pretty good instructions on the
752:47 - starting of that
752:48 - so
752:50 - um like the way they do this project and
752:52 - i have the repo here is that they um
752:55 - they
752:56 - provision vault with a bunch of
752:58 - different things so i think they're
752:59 - using like s3 here and that would
753:01 - probably be a really
753:02 - common use case for this but i really
753:04 - want to simplify and i don't want to
753:06 - have to provision that terraform and
753:08 - cross-reference the stuff so we're just
753:10 - going to uh simplify that so i'm just
753:12 - looking for the command to start fault
753:14 - because i saw a good one here
753:17 - that was like
753:18 - vaults um
753:20 - ah here it is right there so vault
753:21 - server hyphen dab that starts in the
753:23 - developer mode dev root token id there's
753:25 - something about like ceiling or
753:27 - unsealing stuff i don't know what that
753:28 - means but i assume that's a way of
753:29 - securing the vault but we're going to go
753:31 - ahead and just type that in so we're
753:32 - going to go vault
753:34 - server hyphen dev hyphen dev root token
753:38 - id and obviously you wouldn't want to do
753:39 - this for your production they call
753:40 - there's education i'm just going to
753:42 - stick with that to make our lives a bit
753:43 - easier and so what that's going to do is
753:45 - start up a vault server
753:47 - it is running on this port here so
753:50 - i suppose we should export that or or
753:52 - keep this because we'll probably have to
753:54 - reference it somehow
753:55 - notice we have this like unseal key so
753:57 - the unseal key and root token are
753:58 - displayed below in case you want to seal
754:00 - or re-authenticate
754:02 - um development should not be used in
754:03 - production so what i'm going to do
754:06 - is i'm just going to create a
754:10 - a
754:11 - readme file in our vault here so let's
754:14 - just say new file read me because i just
754:16 - want to dump this stuff of course
754:18 - you know you should not share these with
754:19 - anybody but i just don't want to forget
754:21 - these while we're working through this
754:23 - so i'm going to go ahead and copy that
754:26 - and we'll go ahead and save that
754:29 - uh and
754:31 - so
754:33 - what i want to do now oops
754:35 - did we lose our terminal
754:38 - did i close it
754:40 - okay i must have closed it so which one
754:43 - we're working in second third one which
754:46 - is it
754:47 - fourth okay it's the third one so
754:50 - don't be like me close out your old ones
754:52 - so i'm just gonna close out these old
754:53 - ones so i'm less confused
754:56 - there we go and so it says that it
754:58 - started on uh this address here so i'm
755:01 - gonna go copy that address
755:03 - and we're gonna open this up you can do
755:05 - everything via the cli
755:08 - i just want to
755:11 - copy that there
755:13 - but they have a nice ui which is nice
755:15 - and so this is where we're going to put
755:16 - that token education
755:18 - and drop that down so there are some
755:19 - other options or there's a lot of
755:21 - options for authenticating but token is
755:23 - obviously the easiest and probably not
755:24 - the most secure uh it's just the way we
755:26 - wrote it and notice that we have a
755:27 - couple things pre-installed so we have
755:29 - cubby hull which is a per token private
755:32 - secret storage
755:33 - and then we have key value secret
755:35 - storage again i don't know much about
755:36 - these because this isn't a um
755:39 - this isn't a course on vault it's just
755:41 - kind of us showing a basic integration
755:43 - and more focus on the terraform side but
755:45 - here is where we can create our secrets
755:47 - we can of course use the cli to do that
755:50 - and i think they showed in the getting
755:52 - started here
755:53 - and
755:54 - we don't have to do it this way i would
755:56 - i'd rather do to ui but you do like
755:57 - vault key
755:59 - key v put and you put the name of your
756:01 - secret so here's secret forward slash
756:03 - hello and then the key and the value
756:05 - that's where the store i assume that
756:06 - this would go to the well this would
756:08 - specify we're using here so what we'll
756:10 - do is we'll go over here
756:12 - and we'll create ourselves a new secret
756:13 - because we're going to want to store
756:14 - something here so we want the path for
756:16 - the secret
756:17 - this is pretty common with um if you've
756:19 - ever used
756:20 - a parameter store you have a path
756:22 - i don't know if it starts with a forward
756:24 - slash
756:25 - it may not end in a forward slash
756:26 - probably can begin with it so i'm going
756:27 - to say adabs
756:28 - key because we'll do the key and the
756:30 - secret right so
756:32 - here
756:33 - oh okay cool cool so we can do four
756:35 - slash aws
756:36 - and then down below i would just add
756:38 - another one
756:40 - maybe i gotta add each one at a time so
756:42 - we'll say key and i'll go actually go
756:44 - grab our proper ones
756:47 - um oh i should have stopped that i'm
756:49 - gonna have to s
756:51 - start that up again
756:52 - okay and we'll add a plus there because
756:55 - everything lives in memory when you're
756:56 - in the dev one so you really don't want
756:58 - to shut that down or you'll have to redo
756:59 - all this from scratch so what i'm gonna
757:01 - do is just go back
757:04 - here
757:05 - and drag this down a little bit more
757:08 - okay and i'm just gonna go see if i have
757:10 - to relog in because i might have messed
757:11 - this all up
757:13 - yes i do so type in education so we
757:16 - really don't want to stop running that
757:17 - server during the duration of this
757:19 - follow along
757:20 - okay and so we'll go back into secret
757:23 - here create a
757:24 - secret sports slash jws
757:28 - um we wanted to jason no i don't think
757:30 - it matters
757:32 - if we can add two keys that's all that
757:33 - matters to me and so what i'm gonna do
757:36 - is cat out
757:39 - credentials of course this is not the
757:41 - secure way of doing it so you know again
757:42 - don't show people these things
757:44 - and so i want this and i probably should
757:46 - match the name
757:47 - i'm going to like type in the whole darn
757:49 - thing
757:50 - and we'll grab this
757:54 - oops
757:55 - i want to see that value is correct good
757:57 - we're going to add another one here this
757:59 - is going to be our axis secret or axis
758:02 - secret access key i really don't like
758:04 - how those have been named and we'll go
758:05 - ahead and grab on this
758:11 - and um
758:13 - i mean we don't really need to really
758:15 - store the region here but why not
758:16 - because we're doing all the rest of here
758:18 - we might as well just throw them all in
758:19 - here
758:21 - for fun
758:24 - and uh here it says maximum number of
758:27 - versions i don't need anything beyond
758:29 - one
758:30 - because we're not going to be updating
758:31 - these um require check and set so rights
758:34 - will only be allowed if the keys current
758:36 - version matches the version specified in
758:38 - the cas parameter not sure what that
758:40 - means maybe just like you're passing
758:42 - something along when you are doing
758:43 - something but uh i think this is all
758:45 - good
758:46 - you know what i'm just going to leave
758:47 - that back to 10 just in case i've made a
758:49 - mistake and we have to go debug that i'm
758:50 - going to hit save and so there are
758:53 - secrets
758:55 - and so what we want to do is be able to
758:57 - access them and so maybe this is our
759:00 - opportunity to learn the cli here a bit
759:02 - so i have it pulled up on the left-hand
759:03 - side and so what i'm going to do is type
759:05 - in vault
759:06 - tv
759:07 - get and we'll do aws i don't know if we
759:09 - can start with the forward slash there
759:10 - i'm going to hit enter
759:13 - and um the server gave an http response
759:16 - to an https client
759:19 - so
759:20 - i'm not sure
759:22 - why that's a problem because
759:25 - like i mean i understand that it started
759:26 - up in hd http
759:29 - but i mean i'm in development so
759:31 - you know what else am i going to really
759:32 - do here
759:34 - let's see if i can just scroll up here
759:35 - and if there's anything else
759:38 - um
759:42 - and i kind of swore that it installed a
759:44 - private key as we were doing this
759:45 - because i remember seeing that there
759:49 - it was like a private key
759:54 - i could have swore there was one
759:55 - something but private key
759:57 - so i'm not sure what the problem is here
759:59 - i'll be back in a moment and i will
760:01 - resolve it okay
760:03 - so the suggestion i'm getting is that we
760:05 - need to
760:07 - export a couple of environment variables
760:10 - so see here where it writes this so we
760:12 - say you need to set the following so
760:14 - maybe we will go through and set those
760:17 - so i'll go grab that there
760:19 - but here's the thing is like how do i
760:22 - run that
760:24 - because these are i think these are like
760:27 - not the same so i mean i can't run it
760:29 - over here can i
760:30 - i don't think so
760:33 - uh well i guess if we're doing a key
760:34 - vault value there maybe we can
760:38 - um
760:39 - still no good what if we export the
760:43 - vault token
760:45 - i think we said it was education here
760:49 - [Music]
760:54 - let's do vault status
760:58 - so yeah i'm not sure how we're going to
760:59 - do it that way i mean it's not a really
761:01 - big deal because i don't think that we
761:03 - have to access it that way but notice
761:04 - here
761:05 - like
761:06 - as i was reading here you know
761:09 - they're just saying down below oh we had
761:11 - to set
761:12 - this and that so i'm not really sure
761:17 - what i would do here so the output is
761:19 - like this
761:21 - run these commands and it should do it
761:22 - again the error message can be similar
761:24 - or different problems so
761:26 - that or maybe i'm just specifying the
761:27 - key incorrectly and that's why it
761:28 - doesn't like it
761:30 - so
761:31 - um
761:32 - let's just type in vault and see what we
761:34 - have here so vault tv
761:36 - maybe if we do like a list can we get a
761:38 - list
761:40 - list the secrets
761:43 - um aws
761:45 - aws
761:48 - clear
761:52 - i'm not sure what parameter it wants
761:53 - there
761:56 - uh let's go look it up so let's say like
761:59 - tariff or was it uh vault
762:01 - tv list
762:04 - option seems to want another parameter
762:07 - here
762:08 - i'm going to scroll on down so
762:10 - secret
762:12 - forward slash my app
762:15 - um
762:16 - folders are suffix with the forward
762:18 - slash the input must be a folder list of
762:21 - a file will not return
762:23 - um
762:24 - do i have to put secret in front of it
762:27 - secret
762:32 - aws
762:35 - no so i don't know what the issue is
762:37 - there it just would would have been nice
762:38 - to use it via the cli but the thing is
762:40 - is that again we don't need to use it
762:42 - that way we just need to
762:44 - um you know set it and and get it but i
762:47 - thought it'd be fun to kind of use the
762:48 - cli there so
762:50 - now that we have those set the way we're
762:52 - going to extract out these values is by
762:55 - using a data source
762:57 - and so
762:58 - what i want to do is just create a new
763:00 - local project and i think we'd like to
763:02 - always pull from our account repo here
763:03 - so i'm going to go all the way up to
763:05 - here and i'm going to go grab the main
763:07 - and i'm just going to copy the contents
763:09 - there we're going to go all the way down
763:12 - to the ground and we're going to make a
763:14 - new
763:16 - main tf file here
763:18 - we're gonna go paste that on in
763:21 - and we just want my server
763:25 - we don't need an output it's fine
763:28 - this is all fine this is all fine but uh
763:30 - the one thing is we don't want to use
763:32 - our particular provider there so what
763:33 - i'm going to do
763:35 - um is i'm going to just open up
763:37 - our
763:41 - credentials file there
763:46 - and i'm just going to change this to
763:47 - something else like other so that it
763:49 - doesn't load that profile there
763:52 - okay i'm going to just
763:54 - take these out of here
763:56 - um i think we can leave that alone
764:00 - and i think that's everything so what i
764:03 - want to do now we don't need that count
764:04 - we'll get rid of that count
764:07 - we'll go check out the documentation or
764:09 - the code base here
764:12 - because it gives us a bit of an idea how
764:13 - we need to implement this
764:15 - we'll go over the operator
764:17 - uh we'll go over to the main
764:20 - and so they're setting some variables
764:22 - here like name region path things like
764:23 - that but again we want to grab it from
764:25 - the source
764:26 - they're actually cross referencing it
764:28 - like this other they provision the admin
764:30 - and grabbing it that way i don't want to
764:31 - do it that way i wanted to use just the
764:33 - data source like this
764:35 - so
764:38 - i'm not sure how that's going to work so
764:40 - let's go look that up
764:49 - okay so here it says read it's
764:50 - credentials from an abra secret back end
764:54 - and i'm not trying to do that i'm just
764:55 - trying to read them from the key vault
764:58 - okay so
764:59 - we probably want vaults
765:03 - generic secret would this be from key
765:06 - vault
765:09 - this resource is primarily intended to
765:11 - be used with the generic secret backend
765:13 - but it is also compatible with any vault
765:15 - endpoint that is provided
765:18 - but is that the key value one
765:20 - that's not clear to me
765:23 - um
765:25 - so i think it is
765:27 - so let's see if we can figure that out
765:29 - here so i'm just going to move that off
765:30 - screen here
765:32 - and we're going to add ourselves the
765:33 - data source so i guess we're really not
765:35 - following that other tutorial at all
765:36 - because it we literally have to use a
765:38 - different um
765:40 - key value there eh
765:42 - so we'll say secret and this is going to
765:44 - be like aws
765:47 - credentials
765:48 - maybe there's creds i don't have to
765:51 - worry about spelling mistakes and we
765:53 - need to specify a path notice it always
765:55 - starts with like secret i don't know if
765:56 - we always have to start it with secret
765:58 - um so i will just say aws here
766:02 - and there might be some additional
766:04 - options i'm just scrolling through to
766:05 - hear that so you have path so
766:07 - this is the fully lo the full logical
766:10 - path from which to request the data to
766:12 - read data from generic secret back in
766:13 - mountain vault by default this should be
766:15 - prefixed with secret forward slash so we
766:16 - do have to do that
766:18 - reading from other backends as data
766:19 - sources possible consult each back-end
766:21 - documentation to see which endpoint
766:23 - supports the get
766:25 - version version of the secret to read we
766:27 - only have a single version so we don't
766:29 - have to specify that
766:31 - so technically that should be correct
766:34 - so what we will want to do now in our
766:36 - provider is specify all those options
766:38 - so again i'm just going back to the
766:40 - source code this is off screen but we
766:43 - need to set the region the access key
766:47 - and the secret key here
766:50 - and so this is going to be data and
766:53 - it's going to be
766:55 - vault generic secret
766:59 - and
767:00 - i guess it would be aws
767:03 - and then we're accessing those things
767:05 - like region
767:07 - and so i'm going to go ahead and just
767:08 - copy that really quickly
767:15 - and we will go over back to our vault
767:17 - here because the names are over here
767:20 - so go grab that paste that in there
767:23 - we'll go grab that paste that in there
767:28 - and i'm just going to double check to
767:29 - make sure if i've made any mistakes
767:33 - this one it's showing it from the admin
767:35 - so it goes admin outputs but we're not
767:36 - outputting from anything we're just
767:38 - grabbing it from
767:40 - the vault there so maybe what we need to
767:41 - do is just kind of review
767:43 - how this generic fault works
767:46 - so this does data vault generic and then
767:49 - it does data and then square braces
767:54 - so
767:55 - i wonder if we always have to do data so
767:58 - for example the vault there is a a key
768:00 - named auth token the value is a token
768:01 - that we need to keep secret
768:04 - but yeah i don't understand is this a
768:05 - json object or just a way of referencing
768:07 - it because it doesn't specify that so
768:09 - we'll just give it a try
768:12 - nothing hurts with trying right so we'll
768:13 - say data
768:15 - and this might again might not be the
768:16 - right way i don't know if it's single or
768:18 - doubles there
768:19 - it's doubles
768:21 - so i just wonder if that was like the
768:22 - one case where it's doubles
768:28 - okay and we will do this
768:32 - and so i think that that should
768:35 - maybe work
768:36 - don't know what i'm wondering is if i if
768:39 - i'd led with a forward slash would it
768:40 - have considered that and or is it now
768:43 - double but i don't think so because look
768:45 - here looks like it's stripped it out
768:46 - because it just says aws here so we got
768:47 - a secret since just aws
768:50 - almost looks like there's a space in the
768:51 - front of it eh
768:53 - but it's not there so maybe there's not
768:55 - it's just kind of like a little glitch
768:56 - so
768:58 - um
769:00 - we need to go and cd into this directory
769:02 - here
769:04 - and we just need to do a terraform init
769:08 - that's kind of interesting because like
769:09 - we haven't set up the provider
769:11 - i guess it's not going to happen until
769:12 - we actually use the provider so maybe
769:13 - it's not an issue just yet
769:18 - i'm curious to see if it pulls any kind
769:19 - of modules in for the vault generic
769:20 - secret
769:23 - so i'll just give it a moment there to
769:25 - initialize
769:32 - okay so after there we can see that it
769:34 - did actually add vaulting so it must be
769:36 - ready to take it from there
769:39 - um i'm going to do a terraform plan here
769:42 - and you know i'm going to just change
769:43 - this to like my server with faults
769:47 - now remember it's not going to be able
769:48 - to pull from the um
769:52 - from our local credentials because we're
769:53 - not setting a profile and we overrode
769:55 - the default just in case
769:57 - so here it's saying a resource a data
769:59 - resource vault generic secret aws has
770:01 - not been declared in the root module
770:03 - um it hasn't
770:05 - i mean it looks like i did no
770:07 - maybe i typed it wrong so we'll go
770:11 - here
770:12 - i don't think it matters but i'll just
770:14 - put it above okay
770:17 - and i'm just gonna double check to make
770:18 - sure nope it matches oh because it's
770:20 - eight of us creds that's fair
770:40 - um you didn't use the option oh that's
770:42 - fine so my question will be will this
770:45 - correctly provision
770:46 - because we will not know until we uh
770:49 - use this right here
770:50 - i suppose if we try to use a data source
770:53 - for aws that would probably also
770:55 - indicate whether it's working or not so
770:57 - maybe we should try doing that
770:58 - so we do like data
771:01 - address vpc
771:03 - and then we just do like id equals here
771:07 - because that would have to use the
771:08 - credentials right
771:10 - um and so we'll just go well that's
771:13 - actually it's not specifying any of the
771:15 - the vpc here so maybe maybe we won't do
771:17 - that because it's just too much work
771:19 - um so what i'll do here
771:22 - is i'm going to do a terraform apply
771:26 - auto approve
771:28 - and let's cross our fingers and hope
771:29 - this works
771:38 - and while that is running what i'm going
771:39 - to do is just pull up my aws environment
771:41 - here
771:50 - and apparently i'm not logged in so
771:52 - that'll give me a bit of time here to
771:53 - kind of catch up here while this is
771:55 - provisioning there
772:14 - and uh so it looks like it actually
772:15 - provisioned the server if that's the
772:17 - case that means that our secrets are
772:18 - being pulled correctly right so
772:20 - if we go over to ec2 here
772:27 - and we go and check out this instance
772:30 - it is running so it worked
772:32 - if we just want to do a sanity check to
772:34 - make sure it absolutely is working we
772:35 - can just introduce a bug into this
772:38 - so maybe we go here and we just say
772:42 - um i guess we'd have to make a new
772:44 - version create a new version and what
772:46 - i'm going to do is purposely introduce
772:47 - some mistakes so we're just going to put
772:49 - like an at sign here on the end we're
772:50 - going to save that
772:51 - and i'm going to make a minor change
772:54 - like nano
772:56 - and so what i'm expecting is for this to
772:58 - fail let's see if it fails on the plan i
773:00 - don't think it will
773:05 - you're going to fail on the apply and it
773:07 - does okay so the plan would tell us
773:08 - whether it didn't work or not so that
773:10 - clearly uh clearly means it absolutely
773:13 - is pulling from it especially when we're
773:14 - doing the plan
773:16 - so um i want to go back to
773:21 - our file there i just kind of lost the
773:22 - folder i'm just looking for it
773:24 - the i got too many um
773:26 - too many chrome windows open here
773:29 - there it is okay so we'll go back here
773:31 - and we'll
773:33 - what if we can just revert back to the
773:34 - previous version
773:37 - um see i don't know if i would delete
773:40 - there i don't want to i don't want to
773:41 - jinx it so i'm just going to go here
773:44 - and take out that sign
773:46 - we're going to go ahead and save that
773:47 - and so that should be updated we're
773:48 - going to do tear from plan
773:58 - great and so what i want to do is just
774:00 - tear this down so it'll say terraform
774:02 - apply
774:04 - auto approve
774:05 - and destroy
774:07 - okay and while that is destroying i'm
774:08 - pretty pretty confident that's going to
774:10 - work i'm going to stop my vault server
774:12 - oh wait
774:14 - was that going to still work did i get
774:15 - the credentials in time
774:17 - oh no
774:18 - i
774:19 - i made a big boo-boo okay so um
774:23 - i uh i killed my vault server before i
774:25 - was supposed to
774:28 - that's really embarrassing um anyway
774:31 - that's not a big deal because i kind of
774:32 - wanted to stop the server anyway
774:35 - but i want to go back into our airbus
774:37 - credentials there
774:38 - and turn that back to defaults
774:41 - and i wanted to go back up here and just
774:43 - flip that back so that we can get rid of
774:44 - the server right so
774:46 - i don't want to kind of lose these for
774:48 - the tutorial so i'm just going to go
774:49 - here and just comment those out for a
774:51 - second
774:53 - profile default
774:56 - oops
774:59 - region
775:00 - usc 1
775:03 - and
775:05 - we'll do that again that's embarrassing
775:14 - okay and i'm just going to preemptively
775:15 - i'm not going to save this file but i'm
775:16 - just going to do this for now
775:20 - um it's still trying to connect
775:23 - oh boy
775:27 - so
775:30 - just put these back in here
775:34 - because it's set to the vault can i do a
775:36 - tear from refresh probably not
775:40 - no probably not uh what if i do a
775:42 - terraform init because i did change like
775:44 - i was using vault so maybe i just have
775:45 - to do that to fix that problem
775:49 - and let's try
775:51 - destroy again
775:57 - that was a big boo-boo on my part eh
776:01 - nope okay so
776:02 - let's go back over here
776:06 - and start it up again
776:07 - and i'm pretty sure there's like a way
776:09 - to back up your vaults like there's
776:11 - probably some kind of snapshot or
776:12 - something um again i'm not that
776:15 - deep into it so i cannot tell you if
776:16 - that's the case
776:18 - um so i guess we'll just go back here
776:20 - and remake our secrets
776:24 - because it shouldn't have persisted
776:26 - right
776:27 - if it did i'd be so happy
776:30 - nope
776:31 - okay
776:32 - aws we'll leave 10 in there and then
776:35 - we'll just have to copy all the stuff
776:36 - over again because of my
776:38 - bonehead mistake there so we have region
776:43 - which is u.s east one
776:47 - u.s east one here
776:51 - and
776:58 - go over here
777:03 - well at least you know what to do if
777:05 - that happens to you okay
777:08 - um i don't need the
777:10 - equal sign there
777:13 - go ahead and add this one
777:30 - okay and what we're going to do is go
777:32 - ahead and save that
777:35 - and we'll just quit out of that we'll do
777:37 - a terraform plan
777:41 - since we know that that will pick it up
777:42 - right
777:48 - great and we'll do terraform apply auto
777:52 - approve destroy
777:54 - okay so
777:56 - again this only applies to development
777:58 - but uh yeah don't kill your fault server
778:00 - before you're done destroying okay
778:02 - so i'll see you back here in a moment
778:05 - all right so that infrastructure is
778:06 - destroyed we can go back to here and
778:08 - then we can stop our server and for your
778:10 - benefit i'm just going to bring back
778:12 - these in here
778:13 - so you don't have to worry about that
778:15 - and uh yeah we uh we accomplished vault
778:18 - for injections now you might say well
778:20 - how would you do this with terraform
778:21 - cloud well the thing is the terraform
778:23 - cloud already uses
778:25 - a vault under the hood when you store
778:26 - your environment variables there and the
778:28 - idea is that
778:30 - i suppose you don't need to pull them in
778:31 - from all those sources
778:33 - but i think that was one of my my
778:34 - questions i had when i was talking to
778:35 - one of the das which was like okay it's
778:38 - great that terraform cloud has um
778:40 - you know uses vault behind the scenes
778:42 - but what if i want that to live
778:43 - somewhere else
778:45 - but maybe that's not really necessary um
778:47 - because
778:48 - i don't know but yeah that's it so we're
778:50 - all done with vault hey this is andrew
778:52 - brown from exam pro and we are taking a
778:53 - look at atlantis which is an open source
778:55 - developer tool to automate terraform
778:57 - pull requests which you can find at run
778:58 - atlantis.io so the idea is once this is
779:01 - installed on your github and you merge a
779:03 - pull request then it's going to go ahead
779:06 - and do a terraform apply so this would
779:08 - be a way for you to do um
779:10 - uh get ops or to automate your uh your
779:14 - infrastructure as code and uh the
779:16 - interesting thing is that hashicorp
779:17 - actually maintains this project they
779:20 - didn't originally build it was built by
779:21 - two people from another company and it
779:24 - wasn't that they did not want to use
779:25 - terraform cloud which can
779:27 - uh do this but at the time i think they
779:29 - had a hard time at the company getting
779:31 - procurement because it was a very large
779:32 - company and so they had to build
779:35 - something so they built out this thing
779:37 - um and anyway these two people end up
779:39 - getting hired by hashicorp and hashgraph
779:41 - maintains this project which is really
779:42 - nice because it is an alternative for
779:45 - terraform cloud um but uh yeah that's
779:47 - all
779:48 - let's take a look at cdk for terraform
779:51 - and so to understand this we need to
779:52 - first understand what is cdk so aws
779:55 - cloud development kit is an imperative
779:57 - infrastructure is code tool with sdks
779:59 - for your favorite language so the idea
780:02 - is that you can use something like
780:03 - typescript python java c-sharp go and
780:06 - ruby ruby's definitely there that's the
780:08 - language i like to use and aws cdk is
780:10 - intended only for aws cloud resources
780:13 - because cdk generates a cloud formation
780:15 - so cfn templates this is known as
780:17 - synthesizing and uses that for iac
780:20 - but cdk for terraform is a standalone
780:22 - project by hashicorp that allows you to
780:24 - use cdk but instead of cfn templates it
780:26 - generates out it's going to generate
780:28 - terraform templates and so basically
780:30 - anything terraform can do you can do it
780:32 - through cdk
780:33 - and that allows you to do interesting
780:35 - things like um use cdk to provision
780:38 - azure resources so that is very uh
780:40 - interesting uh and a great development
780:43 - that i think that they're doing
780:45 - hey this is andrew brown from exam pro
780:47 - and we are taking a look at grunt work
780:48 - which is a software company that builds
780:50 - devops tools that extends or leverages
780:51 - terraform the reason we're talking about
780:53 - them is that they produce a couple of
780:55 - very popular open source tools that work
780:57 - with terraform and you're going to see
780:59 - their name because um
781:01 - you know the co-founders there are very
781:02 - active in the community uh jim has wrote
781:04 - in a really good book on terraform so
781:07 - you know it's no surprise that uh they
781:09 - are present but it's worth giving them a
781:10 - mention so you know who they are uh the
781:12 - first thing i want to mention is the
781:13 - infrastructure is a code library so
781:15 - these are a bunch of reusable battle
781:16 - tested production-ready infrastructure
781:18 - code for aws gcp azure um and so they
781:21 - have some free ones there and some paid
781:23 - ones there then there's tara grunt so a
781:25 - thin wrapper that provides extra tools
781:27 - for keeping your configurations dry we
781:29 - have teratest a testing framework for
781:31 - infrastructure provisioned with
781:32 - terraform we have grunt work landing
781:35 - zones for aws this is a multi-account
781:37 - security on aws we have grunt work
781:39 - pipelines and then there's the grunt
781:41 - work reference architecture
781:43 - and so where we're going to focus our
781:44 - attention here is just on terra grunt
781:46 - and tara tess because those are things i
781:49 - think are essential to know uh if you
781:51 - are using terraform because you know
781:53 - you'll run into those use cases where
781:54 - you might want to use them okay
781:56 - all right let's take a look here at
781:58 - teragrun so this is a thin wrapper for
782:00 - terraform that provides extra tools for
782:02 - keeping your configuration dry working
782:04 - with multiple terraform modules managing
782:06 - remote state and this is accessible at
782:08 - the tariff tara grunt.gruntwork.io
782:11 - so the idea here is the concept of don't
782:13 - repeat yourself so it's a programming
782:15 - methodology to abstract repeated code
782:17 - into functions and modules or libraries
782:19 - and often in isolate files to reduce
782:21 - code complexity efforts and errors so
782:23 - the way that works is that you'll see
782:25 - these hcl files which are the uh
782:27 - teragraph code and they're actually
782:29 - named terragrant.hcl and that's what's
782:31 - going to be used to
782:33 - abstract away or dry up your
782:36 - terraform files so here is an example of
782:39 - terror grunt now terra grunt does a lot
782:40 - of different things and
782:42 - you're going to uh find its use when you
782:45 - actually use terraform in practice and
782:46 - you run into these limitations in
782:49 - terraform and you go and i wish there
782:50 - was a way around it interrogant like
782:52 - almost always solves that and so one
782:54 - example is being able to generate um
782:57 - dynamic providers and i don't mean like
782:59 - dynamic values here in the sense that
783:02 - there's that dynamic value feature of uh
783:04 - terraform but i just mean the fact that
783:06 - at the time of this it's very hard to
783:08 - inject or to write out providers so they
783:12 - have this generate function that allows
783:14 - you to get around that
783:16 - another really interesting thing is that
783:17 - terra grunt supports better
783:19 - granularity for modules by reducing lots
783:22 - of boilerplate uh the way they do this
783:25 - is is that you are referencing your
783:26 - terraform files uh via the source here
783:29 - okay so you're not including your
783:31 - modules within your code you're just
783:32 - referencing them and then you pass along
783:34 - their inputs
783:36 - and this is going to be very important
783:37 - when we look at
783:38 - wanting to write unit tests for your
783:40 - infrastructure because
783:41 - when you learn about how you test iac
783:44 - you have to really break things down
783:45 - into smaller parts and if you have a lot
783:47 - of friction there it's going to make
783:49 - your team not want to adopt that or it's
783:51 - going to make that process really slow
783:53 - but again this is more like at scale or
783:55 - when you hit these kind of requirements
783:57 - okay
783:59 - all right let's take a look here at
784:00 - testing in terraform and so what we have
784:01 - here on the left-hand side is our usual
784:03 - um
784:04 - pyramid that tells us the layers of
784:06 - testing and so i kind of want to walk
784:08 - through the layers there and talk about
784:10 - a bit of the tools that are available to
784:12 - the terraform community and you know the
784:14 - reason why we want to move up the
784:15 - pyramid here to get uh better tests and
784:18 - then we'll take a look at teratest at
784:19 - the bottom we have static analysis and
784:21 - this is where you test your code without
784:23 - deploying and you've been doing it all
784:24 - along when you do terraform validate
784:26 - terraform plan or you're using sentinel
784:28 - uh you're doing static analysis and that
784:31 - just means that
784:32 - we're testing you know like the
784:34 - composition or the the shape of our code
784:36 - or like its outputs to what it says it
784:39 - should be doing okay but you can't catch
784:41 - all your problems there and that's where
784:42 - you move on to unit testing and unit
784:45 - testing uh you know traditionally means
784:47 - like in programming to test like a
784:48 - particular functions its inputs and its
784:50 - outputs uh it's a little bit harder for
784:53 - infrastructure because um you know
784:55 - you have to have it connected to other
784:57 - things so it the definition is a little
784:59 - bit warped but the idea here and
785:01 - specifically with terraform is you're
785:02 - just testing a single module and that
785:04 - really says like okay well you need to
785:06 - really pare down that module to be
785:09 - of the small scope and that's where you
785:11 - end up dividing your modules into very
785:12 - small units of work
785:14 - and so for tooling here we got teratest
785:16 - kitchen uh terraform and inspec
785:19 - um and so
785:21 - uh yeah that's where that motivation
785:23 - came with um you know teragram the last
785:25 - thing saying okay let's split them up
785:26 - into smaller stuff uh you have
785:28 - integration testing this is pretty much
785:29 - just using multiple um
785:32 - uh
785:33 - modules together you know so you say
785:35 - okay well i know that this lambda
785:37 - function is working but do i know it
785:38 - works in conjunction with this sqsq or
785:41 - something like that then you have
785:42 - end-to-end testing and this is where
785:44 - you're testing basically like business
785:45 - use cases so it's not just saying okay
785:48 - from a technical perspective but from a
785:49 - business use case do or the customer use
785:52 - case do we meet the requirements here uh
785:54 - and this uh is very hard because what
785:56 - you have to actually do is set up a
785:58 - persistent test network environment but
785:59 - once you have one you're going to be
786:01 - really good shape one example of a
786:04 - test environment and it is paid but
786:06 - grumborg has their own called the grunt
786:08 - work reference architecture uh but you
786:11 - know if you had to do it without that
786:12 - you'd have to just roll your own kind of
786:14 - environment
786:15 - so you know if you do want a good
786:17 - breakdown of all these different kinds
786:18 - uh you know jim from grunt work has a
786:20 - complete talk on automated testing for
786:22 - infrastructure as code i strongly
786:24 - recommend it because it really gives you
786:26 - a better scope than what i can cover
786:27 - here
786:28 - but let's just go take a quick look at
786:30 - teratest so teratest allows you to
786:31 - perform unit tests and integration tests
786:33 - on your infrastructure it tests your
786:35 - infrastructure by temporarily deploying
786:37 - it validating the results then tearing
786:39 - down the test environment and so here's
786:41 - an example of what a
786:43 - a test function would look like in
786:45 - teratest it is written in golang i know
786:47 - golang can be very hard to use but you
786:49 - don't need to know much about it if you
786:51 - you pretty much copy and paste it and
786:53 - just kind of tweak the values to get the
786:55 - result you want so you know hopefully
786:56 - that helps to tell you how you would
786:58 - test in terraform and you know a bit
787:00 - about tear test okay
787:01 - hey this is andrew brown from exam pro
787:03 - i'm going to show you how to book your
787:04 - hashicorp certification so type in
787:07 - hashicorp certification into google
787:09 - we'll go to the first link and we'll
787:10 - just scroll around and try to find where
787:13 - it is that we can schedule so it's not
787:15 - that clear as to where we can go but
787:17 - let's say we click into the terraform
787:19 - associate certification and we have
787:21 - schedule and take the exam this will
787:22 - bring us to this page and it will just
787:24 - give us some instructions saying you
787:25 - have to have your id things like that so
787:28 - we'll say click here to go to the exam
787:29 - platform so we click that and it's going
787:31 - to bring us to the single sign-on so
787:33 - notice or it's not single sign-on but
787:34 - it's at ipd through offhashcorp.com so
787:37 - we'll click on our github
787:39 - and we will authorize that
787:42 - you could probably sign up via ps psi
787:45 - exams online if you don't have a github
787:47 - account but generally you probably
787:48 - should have one if you're taking a
787:51 - hashtag corp certification so what i'll
787:53 - do is scroll on down we'll click on
787:55 - schedule and i'm just going to enter
787:57 - some of my personal details here so
787:59 - we'll say andrew brown
788:01 - at andrew exam pro dot co
788:05 - okay
788:10 - and now i need to
788:11 - choose my location so we're gonna choose
788:13 - canada
788:14 - i'm going to choose my time zone so i am
788:16 - in
788:17 - toronto
788:21 - and so now i have some options down
788:22 - below so you can see
788:24 - we have available dates i'm going to put
788:26 - mine between wednesday and friday so i'm
788:28 - gonna take it wednesday
788:30 - and i'm gonna try to find a time that
788:31 - suits me
788:32 - so
788:33 - i'm thinking probably
788:36 - 8 p.m that's the time i like to take my
788:38 - exams we'll go ahead and hit continue
788:42 - and we'll just review our details here
788:44 - and hit continue
788:48 - and notice this is a remote online
788:50 - proctored exam
788:51 - it's probably possible to take it
788:54 - in person but at this time this is not
788:56 - possible to
788:57 - take an in-person exam so this is for
788:59 - the online process here and so what
789:02 - you're going to want to do is go ahead
789:03 - and go to pay now
789:06 - or actually sorry you have to
789:07 - acknowledge the terms
789:09 - and then go to pay now
789:11 - and so that would redirect you to the
789:13 - payment portal i actually have a code so
789:15 - i'm going to go ahead and enter my code
789:17 - in and that's how i'm going to proceed
789:19 - here but if you were paying you just go
789:20 - to the pay now
789:33 - okay and so mine has been set i'll go
789:35 - ahead and click pay now
789:41 - great
789:43 - and so now my exam is uh ready to go so
789:47 - that's all there really is to it they're
789:49 - going to give you a bunch of information
789:51 - that you need to follow through you need
789:52 - to make sure you have your government id
789:54 - and make sure that matches the name that
789:56 - you put in so i put in andrew brown so
789:58 - my government id needs to say that
790:01 - and that's all there really is to it