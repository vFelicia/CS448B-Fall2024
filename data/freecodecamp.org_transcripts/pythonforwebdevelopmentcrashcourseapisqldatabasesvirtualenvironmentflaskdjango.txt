00:00 - learn the basics of using python for web
00:02 - development in this crash course from
00:04 - popular Creator Tommy Toco Tomi will
00:07 - teach you different concepts through a
00:09 - series of short projects
00:11 - hey guys welcome to this tutorial
00:13 - so in this tutorial we're going to be
00:15 - learning python for web development so
00:17 - I'm going to be teaching you the major
00:18 - skills you need to know to get started
00:21 - with web development using python I'm
00:23 - going to be teaching you steps like
00:25 - using SQL with python using apis with
00:28 - python and some other fun stuff that we
00:30 - need to get started with web development
00:32 - in Python now everything that is going
00:34 - to be covered in this video is going to
00:36 - be shown in here right now so as you can
00:38 - see we talk about everything from SQL to
00:41 - apis to web scraping and even virtual
00:44 - environments and I hope you enjoy this
00:46 - course
00:47 - now I have some free resources like a
00:50 - jungle roadmap uh python data structure
00:53 - cheat sheet a Django cheat sheet and
00:55 - plenty more free resources in which I
00:57 - compiled into a PDF and you can download
01:00 - that PDF for free using the link in the
01:02 - description below and before we get
01:04 - straight into the video if you like more
01:05 - tutorials like this please don't forget
01:07 - to check out my Channel at code with
01:09 - Tommy where I teach more on Python and
01:11 - web development in general
01:13 - so let's get straight into this course
01:17 - now we're going to be looking at
01:19 - connecting SQL with python so we can
01:23 - create and use databases in whatever
01:25 - application that we're trying to build
01:27 - so for example let's say we want to
01:29 - build just a demo application that
01:31 - stores like customers details and we
01:33 - want to save that to an actual database
01:34 - we can use SQL with python to make that
01:38 - possible
01:39 - now when building a proper web
01:41 - application if you're using a framework
01:43 - for example like Django Django actually
01:46 - uses something called orm so you don't
01:47 - actually have to write SQL code to do
01:50 - this but that's only if you are using
01:52 - like specific Frameworks that adds those
01:54 - features but imagine you are using let's
01:56 - say you are building everything by
01:57 - yourself the old server and you actually
01:59 - need to code in SQL or there isn't a
02:02 - framework that requires you to you know
02:04 - code SQL by yourself then this will come
02:07 - in handy so this is why I'm adding this
02:09 - part to this old course
02:11 - so what we're going to do now I'm just
02:13 - going to show you how to you know use
02:15 - sqlite to create database update the
02:18 - database get response from it and all of
02:21 - that stuff and we're going to be using
02:23 - SQL Lite so sqlite allows us to easily
02:26 - create database using SQL and if you
02:30 - have python installed on your computer
02:31 - sqlite comes with it automatically so
02:34 - when you have python installed what you
02:36 - just need to do is to just first of all
02:38 - say import
02:40 - SQL lights
02:42 - three let me make this a little bigger
02:46 - so now when you say import sqlite3 what
02:49 - this does is that it's just going to use
02:51 - the SQL light library that comes with
02:53 - python so now when you when we do this
02:56 - the next thing that I'm just going to do
02:58 - Straight is to show you how to create a
03:00 - new database now when you're creating a
03:02 - database it always has the
03:05 - extension.db just the way python has the
03:08 - extension.py and you know other
03:10 - programming languages like JavaScript as
03:12 - dot Js when you're creating a database
03:15 - file it needs to have the DB so before
03:17 - we actually continue coding or start
03:19 - coding let me tell you more about what
03:21 - this is and what we're going to do first
03:23 - of all you need to have basic knowledge
03:26 - of SQL because what we're actually doing
03:28 - is we are connecting Python and SQL
03:30 - together as I said but that means we're
03:32 - going to be running some SQL commands in
03:34 - our python code so for example let's say
03:36 - we want to create a database that is
03:38 - called
03:39 - you know
03:40 - um like customer
03:42 - database.db right we need we might need
03:45 - to use uh for that we might just need to
03:47 - use a python code to create a database
03:49 - but to actually create a table in that
03:51 - database like customer table then we
03:53 - need to like write the SQL commands that
03:56 - you will use normally so if you're
03:58 - familiar with SQL which I suggest you
04:00 - should be then you understand website
04:02 - like we're going to run basic command
04:04 - like create table then the name of the
04:06 - you know the table we want to create but
04:08 - to do that we're going to use SQL to
04:10 - create that but in our python code so
04:12 - without making any confusion let me just
04:15 - get straight into what I'm talking about
04:16 - so before we even start creating any
04:18 - table or inserting any data we need to
04:20 - connect to our database so as I said
04:23 - database always has the Five Dot DB so
04:26 - we actually need to create our database
04:28 - file where we're going to be you know
04:30 - creating all our tables and all our you
04:32 - know data in it so what I'm going to do
04:35 - is to say SQL Lite
04:38 - dot connect
04:40 - so what this is going to do let's just
04:42 - say something like
04:45 - customer
04:46 - dot DB so let's say that is the name of
04:49 - the database right of the database file
04:52 - this can just be like test.database this
04:54 - can just be like let's let's just say
04:55 - this is data.database right let's leave
04:58 - it like this what this is going to do is
05:00 - that it's going to connect to uh data.db
05:03 - file in this particular directory so as
05:06 - you can see I'm in this direction in
05:08 - Python cheats if I come in here this is
05:11 - the directory and the only file that's
05:12 - there is app.py so as I said this is
05:15 - going to try to connect to a database
05:17 - file name data.db but in that folder
05:19 - there's no data like that there's no
05:21 - database file named data.db what it's
05:24 - going to do is that if there's no
05:25 - database file like that it's first going
05:26 - to create a database file name data.db
05:29 - before it tries to connect to it so what
05:33 - I'm going to do now I'm going to store
05:34 - all of this connection into like uh so
05:37 - I'm just going to remove this into a
05:39 - variable and name it let's say
05:41 - connect
05:43 - equals to this so once I hit connect
05:45 - equals to this it's going to try to
05:47 - connect to this I want to create a table
05:49 - so for me to create a table I'm just
05:52 - going to do the basic you know the basic
05:54 - syntax that we always use to create a
05:56 - table and I'm going to say
06:00 - connect
06:02 - dot execute
06:04 - right so what I want to execute now is a
06:07 - command that I'm going to use to create
06:08 - a table now to execute an xql command we
06:11 - need to use this triple parenthesis this
06:15 - triple quote or whatever you call it so
06:17 - in there in here this is where uh you
06:20 - know SQL command is going to go so what
06:22 - I'm gonna do is to say create
06:25 - and everything has to be in caps of
06:27 - course because it's SQL
06:29 - create table
06:31 - and let's just say something like
06:32 - customer
06:33 - and once we have this customer table
06:35 - created then I want to have all the you
06:38 - know
06:39 - parameters that you should have all the
06:41 - attributes of that table and let me just
06:44 - give this some space in and put it right
06:47 - here so what I'm going to do now is to
06:49 - say
06:50 - I want to give it an ID a customer ID
06:53 - and I'm going to say ID and when you
06:56 - give it the ID you're going to give it
06:57 - the data type so I'm going to say
06:58 - integer and then I'm going to say
07:00 - primary
07:02 - key so again if you are familiar with
07:05 - SQL and relational database in general
07:07 - you should understand what this primary
07:09 - key means so if you don't I'm just going
07:11 - to go through it quickly so what primary
07:13 - key is is basically just represent you
07:16 - know this entity or this particular data
07:19 - that we're going to create so for
07:20 - example each customer that we're going
07:21 - to create is going to have an ID and
07:23 - that is the primary key of that
07:24 - particular customer so that means that
07:26 - if we have the ID of that customer we
07:28 - can have access to all other details of
07:30 - that customer so that's just a basic
07:32 - explanation of what primary key is it's
07:34 - like it gives it the identifier that we
07:37 - need to identify a particular customer
07:40 - so you want to give it not no
07:42 - I was saying not no because we want
07:44 - there to be you know uh
07:47 - a value it needs to have a value it
07:49 - cannot be no
07:50 - so we're going to do the same thing I
07:52 - was just going to say name
07:55 - I'm going to say text
07:57 - and then when I say not snow
07:59 - now you can see the difference the only
08:01 - difference is that we have the name
08:03 - which is the name of the you know
08:04 - attribute we have the data type which is
08:07 - text but we don't have nothing like
08:08 - primary key because this is not a
08:10 - primary key we only have one primary key
08:12 - in a particular table and then we just
08:14 - have not know so we're going to do the
08:16 - same thing now and say h
08:19 - and it should be an integer and also not
08:23 - no
08:24 - and you put your comma and I think that
08:28 - should be enough for now and let's just
08:31 - you know leave that like that and then
08:33 - what we can just do is to
08:36 - put after year a column so we don't need
08:39 - a comma because that's the last one so
08:41 - after that we can just put a column to
08:42 - like end that and I'm just going to
08:44 - bring this back here so this is a basic
08:47 - SQL command to create a table name
08:49 - customer and give it three you know all
08:52 - these values all this attribute which is
08:53 - ID name and age
08:56 - so what I'm gonna do
08:58 - is to just
09:01 - close the connection after
09:03 - so let me say connect Dot close so what
09:07 - I'm doing is that after I have connected
09:09 - to this and executed this command I just
09:11 - want to close that connection so as you
09:13 - can see what I did here is very basic I
09:15 - just created this customer table this is
09:18 - pure SQL command but then I'm executing
09:21 - it in Python now let's run this now now
09:24 - if I run this
09:30 - Okay cool so as you can see the database
09:32 - file was created in this in my default
09:35 - user so apparently what you need to do
09:38 - is to specify the directory to where you
09:40 - want the database to be created if
09:42 - you're on a Mac and you just put
09:43 - database.db or whatever the name is dot
09:45 - DB and you don't specify what it is what
09:48 - it's just going to do is going to go to
09:49 - the user in my case which is told me and
09:52 - it's just going to create database.db
09:54 - right data.db or the file right there so
09:57 - as you can see let me bring that here so
09:59 - that's what you just do it so that makes
10:01 - sense so what we can do now as you can
10:03 - see we executed this table and now we
10:05 - know that we have a table created like
10:07 - this but you know how can we see that
10:10 - we've created a table now there are
10:12 - different ways we could first of all
10:13 - just insert values into it and then get
10:16 - return those values to know that we
10:18 - actually created the table or what I do
10:22 - I downloaded this application called DB
10:26 - browser for SQL Lite now once I run this
10:30 - browser
10:32 - what it's going to do is that it's going
10:34 - to allow me to import an sqlite database
10:37 - in it so if I say open database
10:40 - and then I go to tell me and I say allow
10:46 - and I say database.db now you're going
10:49 - to see that in these tables it actually
10:51 - creates that customer table in that
10:53 - database.db file and now we have ID name
10:56 - and age so that is good because that
10:59 - that is good because that is what we
11:00 - need and now we have the confirmation
11:01 - that we've created this database table
11:04 - in this data.db now what we can just do
11:06 - the next thing we can do is to insert
11:09 - like data into it so to do this is very
11:13 - easy we can actually remove this
11:15 - database right this execute because we
11:19 - already created that table or what we
11:21 - can just do is to add a line and we can
11:24 - say something like
11:27 - we want a drop table if exists so what
11:30 - we want to do is that before this is run
11:32 - we want to we can say something like we
11:35 - can have a command and just say connect
11:39 - dot execute
11:47 - and then we can just execute
11:51 - drop table
11:54 - if accessed
11:56 - and then the table we want to drop is
11:57 - customer
11:59 - so what this is doing is that before he
12:01 - tries to create the table he's first
12:03 - gonna look if there is any table name
12:05 - customer is going to drop it that is
12:07 - going to remove it or delete it and then
12:09 - create this table so this means that
12:11 - every time we run this is you know
12:13 - deleting the customer table and then
12:14 - creating a new one we can easily do that
12:16 - but we can also just remove this let's
12:19 - say just put it as a comment because we
12:20 - already know that in this database file
12:22 - there's already a table name customer so
12:24 - what we can just try to do now is to
12:26 - access that table so what I'm just going
12:28 - to do I'm going to come in here
12:30 - and I'm gonna say connect
12:34 - dot execute
12:36 - and what I want to do now is to just try
12:39 - to insert values into this customer
12:41 - table so I'm just going to try to insert
12:44 - just one value you must write write all
12:47 - your commands before closing it because
12:49 - after closing it you can access it again
12:51 - so what I'm just going to do in this
12:53 - execute I'm going to have my quotes and
12:56 - I'm going to say insert
12:59 - into customer since we already know that
13:02 - there's a customer database right and
13:04 - then what I want to insert I want to
13:06 - insert in the ID so I'm just going to
13:09 - copy ID I'm going to insert in the name
13:12 - I'm going to copy name
13:14 - and it only set in the age and I want to
13:16 - copy age
13:18 - so what I'm doing is I'm inserting into
13:21 - customer in this attributes I want to
13:24 - insert I'm just going to have the
13:26 - backwards slash and I'm going to insert
13:28 - these values
13:30 - let me just put here and save values
13:36 - and the values I want to insert for ID
13:38 - I'm just going to say one
13:40 - right and then for name I can just do
13:43 - something like tell me
13:46 - and then for the age let me just say
13:49 - something like 99.
13:51 - so I'm I can write all of this so as you
13:54 - can see it gives us an error what we can
13:56 - just do is because of the spacing that's
13:59 - why it gives us an error but since you
14:01 - know what I wrote I can bring that back
14:02 - so as you can see once we try to execute
14:04 - this command what he's doing this is
14:06 - also a basic SQL command is inserting or
14:09 - creating a new data under this customer
14:11 - under the ID name and age and it's
14:14 - giving you the values of one told me at
14:16 - 99. so the other in which you put it is
14:18 - how it's going to do it is how it's
14:19 - going to insert it so for the ID is
14:21 - going to take the value of one name is
14:23 - going to take the value of Tomi and age
14:25 - is going to take the value of 99. so now
14:28 - we're gonna run this
14:29 - and so again the unrecognized talking
14:32 - error which is this right here so
14:35 - actually we can just get rid of that it
14:37 - doesn't really make a difference yeah
14:38 - we're just inserting these values into
14:40 - this customer table so once I run this I
14:43 - get no response but I know that this has
14:46 - worked right but to actually see that it
14:49 - has worked what I need to do is to get
14:51 - all the values or or all the data in
14:54 - this customer database so what I can do
14:56 - to do that I can say something like
14:59 - all data
15:01 - a variable and I can say connect dot
15:05 - execute
15:06 - and I want to execute a SQL command so
15:09 - I'm just going to do is to say select
15:12 - star
15:15 - from student
15:18 - so actually this in this case is
15:20 - customer
15:21 - so once I say let's start from customer
15:23 - and this basically has all the database
15:27 - in this particular data right now all
15:30 - the data in the database so I can just
15:32 - do is say for Row in data so for every
15:35 - single row I just want to print the row
15:39 - so once I print the row this is all data
15:44 - and I save it now let's see where it
15:46 - prints us so as you can see if I scroll
15:48 - up right here it gives us one tell me
15:51 - and 99. so as you can see we
15:53 - successfully know that these values were
15:56 - inserted into this customer database so
15:59 - what I can just do now is to create
16:00 - another you know another
16:04 - data in there I just copied that line
16:06 - and pasted it again and I can give you a
16:09 - key of two and I can say team and I can
16:12 - say 29. once I save this right and then
16:16 - I run this
16:17 - as you can see it gives us that we have
16:20 - one Tomia 99 we have two team and 29.
16:24 - now this is very good this is how you
16:25 - can easily use uh SQL database in your
16:30 - python project wherever you're working
16:31 - on so that is what I'm going to show you
16:34 - for this section of this particular
16:36 - tutorial or in this tutorial
16:38 - now as you can see this is just the
16:41 - basics of you know SQL with python
16:43 - there's still a lot if you know SQL is
16:45 - basically the same thing whatever you
16:47 - want to do let's say you want to delete
16:48 - a database or you know you just want to
16:50 - get a particular data that has a
16:52 - particular ID what you can just do is to
16:55 - just you know get with you know filter
16:57 - with ID once you know SQL commands you
17:00 - basically know how to use this just
17:01 - input your SQL command here and execute
17:04 - it and it's gonna work
17:05 - so that's going to be all for this
17:07 - tutorial
17:11 - in this tutorial I'm going to be talking
17:12 - about using apis in Python
17:16 - so if you don't know what an API is it
17:18 - is an acronym that stands for
17:20 - application programming interface so
17:23 - what it does is that it's a server that
17:25 - allows you to receive and send data
17:27 - using Code so for example using python
17:30 - in this case
17:31 - so for in the most most of the time you
17:34 - actually use an API to basically
17:36 - retrieve data let's say from another web
17:38 - application or maybe to even send data
17:40 - and then get a response after
17:42 - so for example let's say I'm gonna give
17:45 - you a new stars of an API so let's say
17:48 - we have an application that has been
17:51 - built and you want to access the data in
17:53 - the application let's say like you want
17:55 - to access data like the amount of views
17:58 - the application gets or the amount of
18:01 - customers the application has the owner
18:03 - of the application can create an API
18:05 - that allows you to access those data if
18:08 - the owner of the application wants so
18:10 - they are you know various apis on the
18:12 - internet and you can also create your
18:14 - own API but in this tutorial we're going
18:16 - to be talking about how to use API so
18:18 - how to basically get responses and
18:20 - retrieve data from an API
18:22 - so right here I have this demo API that
18:24 - I created a while ago
18:31 - and what it does is that it just has
18:33 - data about you know different names and
18:35 - their age so this says team and age 27
18:38 - it says Tom and age 16 this is Jim and
18:42 - 19. so he just has this data and that's
18:44 - what it is there are of course more
18:46 - advanced apis out there but for this
18:49 - tutorial this is what we're going to be
18:51 - using so I'm going to show you how to
18:53 - access this you know this API that we
18:55 - have right here
18:57 - so to do this we need a python Library
18:59 - called requests so you need to go into
19:03 - your terminal and type just going to
19:05 - open up my terminal right yes I'm going
19:07 - to run this to open up a terminal and
19:10 - then delete this and let's say we want
19:13 - to run
19:15 - P3 install requests once you run this
19:19 - it's gonna install requests for you for
19:22 - me it says requirement already satisfied
19:24 - that's because I have requests installed
19:25 - already so once you run that it's going
19:28 - to install requests for you and you're
19:30 - going to use request to actually send a
19:32 - request to the API that you want to
19:34 - retrieve so what we're going to do now
19:36 - is to First import
19:38 - requests
19:40 - and is written s and then what we're
19:43 - just going to do is to send a get
19:45 - request to this particular API so as you
19:49 - can see this is built using the Django
19:52 - rest framework you don't need to know
19:54 - about that for now but it basically just
19:56 - allows us to you know have this good
19:58 - looking interface that has details about
20:00 - the API so you can see that it uses a
20:03 - get method what we can do now is to say
20:05 - request
20:08 - dot get or is in the get method let's
20:11 - just close this and we want to send a
20:13 - request
20:15 - two so I'm just gonna get out of that
20:17 - you open a bracket and then you have
20:19 - codes and in there you're going to send
20:21 - a request to the link of that particular
20:23 - API or we call it the you can say is the
20:26 - API endpoint that's the URL that has all
20:29 - the details we need so this is the end
20:31 - point that I will send in a request to
20:33 - you and let's get the let's store
20:35 - whatever we you know get as a response
20:38 - in a variable named response I'm gonna
20:40 - say all of this is equals to response
20:43 - so this is very easy very
20:45 - straightforward and how to create a
20:47 - request then what you can just do now is
20:49 - to just say response
20:54 - dot status code so once you say response
20:57 - does status code let's actually print
20:58 - this it's going to show us
21:01 - the status code of this and I'm going to
21:03 - tell you what that means right here you
21:05 - can see that it shows 200. so each
21:07 - recipe each status code
21:09 - as its meaning so if we get 200 this
21:12 - means that you know everything went okay
21:15 - and then we've gotten a response if
21:17 - there was any response we've gotten that
21:19 - response there there is
21:22 - um 301 there is you know 400 that is 401
21:26 - there's 403 there is 404 which you might
21:30 - have known because it's a popular error
21:32 - code and I think there's 503 also so
21:34 - each of these has their meaning the 301
21:37 - means that the server is kind of taking
21:39 - you to another endpoint that's what it
21:41 - means and for this um this is 400 not
21:45 - 100 so 400 basically means that we made
21:48 - a bad request so this means maybe we're
21:51 - not sending the right data that we need
21:52 - well it just means we made a bad request
21:54 - and 401 this happens when you require
21:57 - when it requires authentication it
21:59 - requires you to be authenticated but you
22:01 - are not dedicated so that's when we get
22:04 - a 401 error and 403 it basically doesn't
22:08 - give you access access to you know
22:10 - doesn't give you access to access this
22:13 - particular API basically it means like
22:15 - you're forbidden and you don't have the
22:16 - right to access that data that's what it
22:18 - means and 404 just means that the end
22:21 - point or the URL that we're trying to
22:23 - send a request to does not exist so
22:25 - that's what it just means so it wasn't
22:26 - found and 503 means that if the server
22:30 - is not ready to undo your request so
22:31 - maybe it's getting too much request or
22:33 - you're just down for that point so it
22:35 - means it's not ready to handle that
22:37 - request so that is what all of this
22:38 - means but as you can see we got 200 and
22:42 - as I explained 200 means that everything
22:43 - is okay and we got the response that we
22:46 - actually need
22:47 - so once we have that what I can just do
22:50 - next is to actually you know
22:53 - print the response that we got so as you
22:56 - know this is what is being contained in
22:58 - this particular API so once we print the
23:00 - response we should get that means we
23:03 - print the data of the response we should
23:05 - get that data right there so to do this
23:08 - is very easy what I can't just do is to
23:10 - say print
23:12 - and I'm just going to say response
23:15 - I'm just going to get out of that the
23:17 - text so once I print response.text and
23:20 - run this you're going to see that it
23:22 - prints all of this in like a list so it
23:25 - says name team age 27 that is one data
23:28 - name term h16 that is another data and
23:32 - as you can see Team 27 Tom 16 so that is
23:34 - a basic way of you know just printing
23:36 - this so let's say you know we want to go
23:39 - for that we want to be able to use this
23:42 - data because right now it just sees it
23:45 - as a string let me show you what I mean
23:47 - so let's say we do something like
23:49 - for res in response
23:53 - dot text
23:55 - right and then we just say print res
24:00 - so because it's a list you're going to
24:02 - expect that it prints each of these
24:04 - separately but no it's not going to do
24:06 - that see what's going to print let me
24:08 - comment this out
24:09 - and once I run this you see that it
24:11 - prints every single character every
24:14 - single letter
24:15 - separately now this is because it sees
24:18 - this as just one string so it see prints
24:21 - everything as one like every single
24:24 - character separately but what we want to
24:26 - do is to change this response into a
24:29 - Json format so we can actually use it as
24:32 - a recognized data type
24:34 - so for me to do this I need to import
24:36 - the Json library that is pre-installed
24:38 - with python
24:39 - I'm just gonna say import Json and once
24:42 - I import Json what we need to do is to
24:45 - say the right here
24:47 - I'm actually going to get rid of this
24:49 - print
24:52 - it's going to get rid of that and I'm
24:54 - going to say something like response
24:58 - no I'm going to say res
25:00 - equals respond.txt right but I'm gonna
25:04 - say Json dot loads so what this is doing
25:09 - is that it loads this response or it
25:10 - loads this text that I get and it kind
25:12 - of converts it into a Json format so now
25:16 - that we know we have this in the Json
25:17 - format let me just comment this out for
25:20 - a bit and I can just print res
25:24 - now once I print rest and run this if I
25:27 - come here you can see you don't really
25:29 - see the difference yet
25:30 - because it still looks similar to how it
25:33 - shows before but the difference now is
25:36 - that once I try to Loop through it
25:39 - so let me just comment this out so just
25:41 - remove this and I can say for data in
25:44 - res
25:46 - print
25:47 - data
25:49 - so I'm going to remove this now once I'm
25:51 - looping through this rest and I run this
25:54 - you cannot see that it doesn't print
25:56 - every single character separately it
25:58 - prints every data separately now this is
26:01 - just a basic way of you know getting
26:03 - data retrieving data from a particular
26:05 - API so as you can see what we did was
26:08 - import request and import Json then we
26:10 - sent a request to this particular API
26:13 - endpoint and then yeah we're just
26:15 - printing the status code to see if
26:17 - everything went good if everything was
26:19 - successful and we got the text from that
26:22 - response which is the data that we
26:24 - retrieved and we converted it into a
26:26 - Json format and then we Loop through all
26:28 - the data because now it's in a Json
26:29 - format it's in a recognizable data type
26:32 - and then we printed every single data so
26:35 - this is a basic intro to using apis in
26:38 - Python
26:40 - so in this tutorial we're going to be
26:43 - looking deep into oop so oop stands for
26:47 - object oriented programming and in op we
26:50 - are going to be talking more about
26:52 - classes and objects
26:54 - so whenever you're building web
26:56 - applications you're going to use
26:58 - something called a framework so let's
27:00 - say you're building a web app with
27:01 - python you have to use a framework to do
27:04 - that for you and the Frameworks a
27:05 - framework allows you to you know
27:09 - skip a lot of setup process and just go
27:11 - straight to the point like setting up a
27:13 - server you know basically setting up
27:15 - your database from scratch the framework
27:17 - already does all of that for you and
27:19 - what you just need to do is to create
27:21 - your project and get going with the main
27:22 - coding now the thing is most of these
27:25 - python Frameworks used for building web
27:27 - application they use something called
27:29 - orm which is known as object relational
27:32 - mapping and what this does is that it
27:34 - uses oop the concept of object oriented
27:37 - programming to create database for you
27:39 - so for you to be able to use database in
27:42 - your
27:43 - web application you need to have strong
27:46 - a strong knowledge of object-oriented
27:48 - programming so for example Django which
27:51 - is the most popular web framework for
27:53 - python uses this orm which means that
27:57 - using classes and objects you can easily
27:59 - create a database even a relational
28:02 - database in your web application now so
28:05 - all this breaks down to classes and
28:08 - objects so we're going to be looking
28:09 - deeper into that and we're going to be
28:11 - talking about everything you need to
28:13 - know so you know to have enough skills
28:15 - for you to start building web
28:16 - applications with python now the first
28:19 - thing we're actually going to talk about
28:20 - is just a basic class
28:23 - so first you just you know have a basic
28:25 - class of course uh we should just say
28:28 - class and let's just say something like
28:30 - person
28:33 - this is just a simple class and we can
28:35 - say the person name
28:39 - is Tommy
28:40 - I can say the person uh age
28:44 - is 12.
28:46 - and what we can just do is to in here we
28:49 - can have a simple method saying Dev we
28:52 - can have a function and that function
28:54 - can just be something let's just give it
28:56 - a round of let's just say random
28:58 - right I'm just gonna give itself
29:01 - now what we can do is to just say print
29:04 - something like
29:07 - my name
29:12 - is and we can just say self
29:16 - Dot
29:19 - name now we can do the same thing and
29:21 - print
29:25 - my name
29:27 - this time we say my age is
29:31 - or we can just say self.h
29:35 - so as you can see that's what this does
29:37 - of course if we run it nothing is going
29:39 - to show right here so let's delete this
29:41 - old terminal and run this nothing is
29:43 - going to show that's because we're just
29:44 - creating this class but we're not
29:45 - actually using you know running it or
29:48 - implementing any data with it so what I
29:50 - can just do now is to just create an
29:52 - object on this class so what I'm just
29:54 - doing is refreshing on the basic stuff
29:56 - you should already know with python so
29:58 - what I'm just going to do now is to say
30:01 - something like
30:02 - demo present this is just a random data
30:06 - now I'm creating an object of this
30:08 - pressing class I'm just going to say
30:09 - person this is how I create an object
30:11 - and I'm storing it in this variable name
30:13 - demo person so what I can just do now is
30:16 - to just say I can print
30:18 - demo person dot name now once I print
30:23 - demo person.name if I run this you see
30:26 - that it just prints to me
30:28 - if I print demo person.h once I run this
30:31 - it prints 12. good everything is fine
30:34 - and what I could just do I could call
30:37 - this function under the class and I
30:39 - could just say
30:40 - print
30:42 - no I cannot I could just say demo person
30:46 - dot render
30:48 - and what you're just gonna do is that
30:50 - it's gonna come into
30:52 - this demo person it's going to go into
30:54 - the class and it's going to look for
30:55 - this function name random and whatever
30:57 - is being done in this function is what
30:59 - it's going to do so once I run this now
31:01 - again you see that it says my name is
31:02 - tell me my age is 12. that is what I
31:05 - told you to do my name is self.name
31:06 - which is self dot this and my age
31:10 - which is this age so that is you know
31:13 - the basics of classes now what I want to
31:16 - talk more about is the init method
31:19 - so what I'm just going to do now is to
31:22 - come back in here and right here where
31:26 - we have this gonna remove all of this
31:28 - and I'm gonna do Def
31:31 - underscore and I'm gonna write in it and
31:33 - I'm gonna put two underscores now I'm
31:35 - going to have self
31:37 - right
31:38 - and I'm gonna have you know the
31:41 - parameters I want you to have I want you
31:43 - to have name and I want it to have age
31:45 - very basic so what this is doing is that
31:47 - allows you to have your own parameters
31:49 - and like it allows you to you know call
31:52 - your this particular class outside here
31:55 - so for example when I was creating this
31:57 - object I didn't give it any parameter of
31:59 - my own because there was already a
32:00 - parameter there but this allows you to
32:02 - create like Dynamic parameters so
32:05 - different parameters oh sorry different
32:07 - objects of this particular person so I'm
32:09 - going to show you what I mean now so if
32:11 - I say self dot name
32:14 - equals name I'm gonna do the same thing
32:17 - by saying self.h equals H once I say
32:21 - self.h equals H and did that I could
32:24 - also leave this at random and I could
32:26 - just you know leave these two as it is
32:28 - but the difference here is that when I'm
32:31 - creating this demo person what I can now
32:33 - do now is to say person I need to give
32:35 - you the parameters of name and age so I
32:38 - could say the name is Tommy and I could
32:40 - say the age is 13. so this is what I
32:44 - could do if I run this all of this is
32:46 - going to be exactly the same thing but
32:48 - now we are giving you the parameters we
32:49 - want outside the class
32:51 - so if I run this now you can see it says
32:54 - my name is Tommy my age is 13. good that
32:56 - is what we need but the good thing to do
32:58 - is to having the init method is that we
33:00 - can create more than one object of this
33:02 - particular class for example I could say
33:04 - demo person
33:06 - and I could say two
33:08 - to say the exact same thing as a person
33:10 - now I could say Tim
33:12 - and let's say 15.
33:15 - now what I could just do is to change
33:16 - this demo person to demo person 2.h so I
33:19 - wanted to print this demo person to you
33:21 - and I wanted to run the function demo
33:24 - person to the random so let's trace this
33:26 - back logically if I'm running this
33:28 - function demo person 2. random it's
33:30 - going to go into the demo person to
33:32 - variable and then it's going to see the
33:34 - class that has been called and it's
33:36 - going to go into that class in that
33:38 - class it's going to look for the
33:39 - function in random which is this
33:41 - function and it's going to do whatever
33:42 - is being done here so now let's run this
33:46 - and see as you can see now it's just the
33:48 - same thing but for the data of demo
33:51 - person 2. so this is how you can
33:53 - basically use the init method and this
33:54 - is why it is helpful in here
33:57 - so this is basically uh the basics of
34:00 - you know what we need of course there
34:03 - are multi these days multi-dis like for
34:05 - example I could have let's say more than
34:09 - one function for defining the data so
34:13 - what I mean by this if I come in here
34:16 - I could have an instance variable so I
34:18 - could come in here and say
34:21 - after death in it I could say death and
34:24 - I could say something like
34:26 - um let's just say School
34:30 - right and this cook will also take self
34:35 - and it could just take School
34:38 - okay let's do something like set screw
34:40 - right so if I say set screw
34:43 - and in here or I could just say self
34:47 - dot School
34:49 - is equal to screw
34:53 - now I could easily just add screw to
34:55 - this yeah and do the same thing but what
34:58 - I'm doing now is I'm basically adding an
35:01 - instance variable so what I could do is
35:04 - to get the color sorry get the screw so
35:06 - I could just have another function that
35:08 - basically gets so I could say get screw
35:13 - and I could just say self
35:16 - and right here I could just return
35:19 - self dot School
35:23 - now let me let's try this out so what I
35:26 - could do now to basically create a new
35:28 - one
35:29 - right here where I'm giving it the these
35:31 - values
35:32 - this is the required parameters that I
35:35 - need but for me to set a school let me
35:38 - just get rid of this what I'm going to
35:39 - do now is a demo person
35:42 - and I'm going to call this function but
35:44 - I'm going to have to give you a
35:45 - parameter which is cool so demo pressing
35:47 - dot set screw
35:50 - and then I'm gonna give you something
35:52 - like Oxford
35:55 - so I've said that's good and then what
35:58 - let me remove two let me remove two and
36:01 - then what I could just do is to let's
36:03 - say
36:05 - run demo person
36:08 - let me run this get screw
36:11 - Emma pressing dot get screw
36:14 - but because I'm returning a value I need
36:18 - to print all of this line so I'll say
36:20 - print demo press into get screw now
36:22 - let's see if I run this you can now see
36:25 - that it prints Oxford so everything is
36:27 - working that is the basic way of you
36:29 - know doing that the only difference we
36:31 - what I just did is that I created a
36:33 - whole new function it's called an
36:35 - instance variable just for this school
36:37 - just to set this cool we can create
36:39 - another function to get the screw that
36:41 - is how you can basically do that so the
36:44 - next thing I'm going to talk about is
36:45 - Constructors in Python so this in it
36:50 - right here that I used is a Constructor
36:52 - so it's basically the default
36:54 - Constructor right so a default
36:57 - Constructor is a simple Constructor that
36:59 - doesn't you know take any argument now
37:02 - for example if I say something like
37:05 - let's say I remove this right here right
37:08 - and then I remove all of this and then I
37:11 - just say
37:13 - you know self dot name
37:16 - is equals Tomy so this is just a default
37:20 - Constructor and that is the value that
37:22 - it has as a default now if I try to you
37:25 - know run it and print self.name of
37:27 - course it's going to do that or what I
37:29 - could just do I'm going to get rid of
37:30 - all of this
37:32 - actually I'm just gonna get rid of this
37:34 - and this
37:37 - and I'm going to use this particular
37:39 - function right here and I'm going to say
37:41 - return name
37:44 - and then I could just basically print
37:51 - and in this print function where I'm
37:53 - going to print is self.name
37:56 - so what I'm doing right now is this is
37:58 - I'm showing you an example of a default
38:00 - you know Constructor
38:02 - so this means that we don't pass any
38:04 - parameter in here but right here you can
38:07 - see that we have self.name and we just
38:09 - have it as tell me so that's just the
38:11 - static data and that's what it's going
38:12 - to be
38:13 - so what I can do now is to just you know
38:16 - run so I could remove all of this and
38:20 - let me just say demo person
38:22 - is equals to an object of pressing right
38:26 - and then if I just say demo person
38:30 - dot return name
38:33 - I'm just going to see that it's going to
38:34 - return that name that we put in there
38:36 - which is Tommy but now let's say I want
38:39 - to have a parameter rise Constructor
38:41 - this means I want to have a Constructor
38:43 - with parameters then I'm gonna use
38:47 - parameters right here so now it takes
38:50 - parameters like name it takes age and
38:52 - all of that so that's basically what you
38:55 - know we can do with that it's very easy
38:57 - it's very straightforward and as you can
39:00 - see you know it doesn't waste any time
39:03 - depending on whatever you want to use it
39:05 - to do so let me just show you a basic
39:07 - example of this parameter rights with to
39:10 - be honest we've just done it earlier on
39:12 - what we did when we add name and age
39:15 - passed in here that is a parameterized
39:17 - Constructor
39:18 - so this is you know the basics of
39:20 - classes and these are the basic stuff
39:23 - that you need when you're building web
39:26 - applications with python mostly Django
39:28 - if you are pointing directly to Django
39:30 - you just need to know how to create
39:31 - classes how to create objects and you
39:34 - just need to know your functions and all
39:35 - of that stuff to be able to you know
39:37 - filter and get results from your
39:40 - database using this oop right here so
39:44 - this is also just an intro to classes
39:47 - and objects and if you want to you know
39:49 - go deeper into it of course I'll suggest
39:51 - to take a full course on it but this is
39:54 - basic you know concept around classes
39:56 - and objects and this is basically what
39:58 - you might need when you're building web
40:00 - applications with python
40:04 - in this tutorial we're going to be
40:06 - talking about web scraping
40:08 - so what web scraping is it's basically
40:10 - also known as data harvesting or web
40:13 - crawling so what this means that it
40:15 - allows us to get data from a particular
40:17 - site that is on the web so if a website
40:20 - is present on the internet you can
40:23 - scrape data from it so for example if I
40:26 - come in here and let's say I just go to
40:28 - my site
40:29 - could we told me.com
40:31 - I can basically get the data of all the
40:34 - names of every post on this website
40:36 - using web scraping so there are a lot of
40:39 - use cases for web scraping like for
40:41 - example search engines using this is web
40:44 - scraping to you know crawl through sites
40:46 - and analyze the content and know you
40:49 - know what to what response or what
40:53 - is retrieved whenever someone searches
40:56 - for something or you could be building a
40:58 - price comparison sites that uses like a
41:01 - bot to fetch the prices on different
41:03 - products on the web so those are just
41:06 - simple use of web scraping it could be a
41:08 - lot but now I'm just going to show you
41:10 - how to actually you know code a web
41:12 - scraper or be the simple web scraper
41:15 - using python
41:16 - the first to do this we need two
41:18 - libraries and these libraries are called
41:20 - requests and beautiful ship so make sure
41:23 - that you go into your terminal I'm just
41:25 - going to run this to pop up my terminal
41:27 - so right here I'm just going to say pip
41:29 - 3 install request
41:33 - and this is going to make sure I have
41:34 - requests installed so it says
41:36 - requirement already satisfied which
41:38 - means I have it installed and I'm also
41:40 - going to say peep free install PS4 for
41:43 - me to install beautiful sweep I need to
41:45 - install bs4 so once I say that because I
41:48 - have it installed also it says
41:50 - requirement already satisfied I'm just
41:52 - going to close that and what I can just
41:54 - do is to go ahead and import requests
42:00 - and because we already know we're going
42:01 - to use beautiful soup so I'm going to
42:03 - say from bs4 import beautiful tube now
42:07 - I'm going to show you what these two
42:08 - libraries does so what we can just do
42:11 - first of all just similar to you know
42:14 - when you're sending a request to an API
42:17 - that is also how you do this so you can
42:19 - do something like res
42:21 - and just say request
42:24 - dot get and in here we're going to put
42:27 - the link
42:29 - that we want to scrape so in this case
42:31 - it's called retomi.com just going to
42:33 - copy that and put it with https and
42:35 - everything
42:36 - now once we have this done well we can
42:38 - just do is to print
42:41 - res dot text
42:43 - so if I print res dot text you're going
42:45 - to see what it prints for me
42:47 - so as you can see it basically prints
42:49 - all the code used to build this website
42:51 - all the HTML code so it doesn't show
42:53 - everything because this is vs code
42:54 - terminal and it just cuts out after a
42:57 - particular one length so as you can see
42:59 - it just gives me this HTML you know code
43:02 - this means I can get data that is
43:05 - present on this page
43:07 - so as you can see that's a very simple
43:08 - way for me to do that now of course I
43:11 - could just print rest and it's going to
43:13 - give me if I run this
43:15 - so let's say I run this right here it's
43:18 - going to give me the response so
43:19 - response 200 simply means that
43:22 - everything has worked successfully
43:25 - so now that we know that we have
43:26 - raised.txt what that does as you saw is
43:30 - that it basically allows us to get all
43:33 - the HTML code present on that website on
43:35 - that web page
43:37 - so now but as you can see that code
43:39 - wasn't like in a readable format or it
43:41 - wasn't in a in a format where I could
43:43 - edit some stuff and get data now for me
43:47 - to do that that's when I use soup so we
43:49 - use this beautiful tube to pass the data
43:52 - so I could say soup is equals to I'm
43:55 - going to use beautiful soup and I'm
43:57 - gonna say res dot content
44:00 - right but I could say raise or text well
44:02 - content is preferable and in here we're
44:05 - going to type HTML
44:07 - dot parser so we want to pass the HTML
44:10 - of that you know request of that
44:13 - response so what we can just instead of
44:15 - printing Reds I could print soup so if I
44:18 - print soup and I run this
44:20 - it still prints me the HTML but if you
44:22 - could see everything well it's going to
44:24 - print it in a more you know good format
44:27 - so in a more good looking formats you
44:29 - and you're going to see the difference
44:30 - so now that we have that I could just
44:33 - play around with the data for a bit and
44:35 - I could do something like super titu and
44:38 - this is just going to return to me the
44:39 - title of the page which is called
44:41 - returning let's run this and see what it
44:43 - returns as you can see it returns tied
44:45 - to code with Tommy now I could just say
44:48 - soup that you know type 2 dot name and
44:51 - this was going to return the name of
44:54 - that particular tag which is title
44:57 - I could also say name
44:59 - zoop.titude.parent dot name and once I
45:02 - run this it's going to give me add and
45:05 - this is because uh the title is under
45:08 - the
45:09 - is under the
45:11 - tag ad so it's basically printing the
45:13 - parent of that title and it's giving me
45:15 - the name
45:16 - I could get rid of this
45:18 - and run this and as you see it gives me
45:22 - everything represented in the head
45:24 - basically in the head
45:27 - tag
45:28 - so that is a simple way of doing that
45:30 - and that is just what we need or we
45:32 - could just also go further so for
45:34 - example in here where we have soup I
45:36 - could just say something like
45:39 - s is equals to ship dot find now let me
45:43 - see for example let's say we just want
45:45 - to get this particular you know
45:51 - I can right click on this and click on
45:53 - inspect now when I click on inspect it's
45:55 - going to open the HTML code of this and
45:58 - then I can see all the you know the tags
46:01 - that it uses so now I know that this is
46:03 - an H2 tag and it has the class post
46:07 - title
46:08 - so what I could just do is to say
46:11 - soup dot find find the content that has
46:16 - an H2 tag and it has a class
46:21 - it has a class of
46:26 - and in here we can see that the class is
46:28 - post Titus just gonna copy that and
46:31 - paste it in there
46:32 - this needs an underscore whenever you
46:35 - are doing that in Python so as you can
46:38 - see we have that now let's say I print s
46:41 - let's see what it's going to give us and
46:44 - I run this
46:46 - you see that it basically gives us H2
46:49 - post ID which is the first one built and
46:52 - publish a vs code extension so it just
46:55 - gives us the first one right now if I
46:58 - change this to find underscore all
47:00 - and I run this
47:02 - you're gonna see that it gives me all
47:04 - the titles in this particular page so as
47:07 - you can see if you use Django this is
47:08 - one type to build and publish the
47:10 - difference between find and find or is I
47:12 - find
47:13 - Returns the first one it sees so the
47:16 - first one you saw was this but find all
47:18 - returns everything that belongs to that
47:21 - particular class that particular tag and
47:23 - class now that is the difference that's
47:25 - the difference so what I could just do
47:28 - now is you know I could just print
47:30 - something like
47:32 - I could say s dot you know text so I
47:35 - could say s dot text right here and if I
47:38 - run this
47:40 - so it gives us an error and it says that
47:43 - that is not so it says what do you mean
47:47 - by fine
47:50 - so let's say find and run this
47:53 - so you can see that we have built
47:56 - it basically gives us the you know the
47:58 - title as you can see here build and
48:00 - publish a vs code extension with
48:02 - JavaScript if you just the title without
48:04 - the tag which is good which is what we
48:07 - want but as you can see before when we
48:09 - add find all we add an error now the
48:12 - reason why we add an error is because we
48:13 - are trying to do this for a whole list
48:15 - what I just need to do is to say for
48:18 - data in s right then I'm just going to
48:22 - print
48:23 - data your text now if I run this you can
48:27 - now see that it prints every single
48:29 - title without the tags or without the
48:33 - HTML code which is good now the reason
48:35 - why we had an error before was because
48:37 - we were trying to do s dot text so we're
48:41 - trying to do all of this all the old
48:43 - lists dot text which is impossible but
48:45 - if we do every single title you know
48:48 - every single title tag in there dot text
48:50 - then it gives us the text that we are
48:52 - looking for
48:53 - so there's a lot we can do like for
48:55 - example we could still go further and
48:57 - just try to you know get the it's let's
49:00 - say under here we could try to get this
49:02 - a tag this link or we could bring this
49:05 - up here and try to get
49:08 - let's see
49:10 - the author or we could try to get
49:12 - whatever we want to get let's say we're
49:13 - using a P tag I was saying Co spin it so
49:15 - let's try this and let's say we want to
49:17 - say
49:19 - A P tag right that has a class post
49:23 - peanut
49:24 - if you say post spinach we're just going
49:27 - to remove it like this
49:30 - baseball spinet
49:32 - nothing is going to change the only
49:33 - thing that's going to change is the
49:34 - actual data we're getting back so as you
49:37 - can see it says in this post I will show
49:38 - you how to build a vs code extension
49:40 - which is what we basically have here so
49:43 - that is how to get data that you want
49:45 - using python it's called Web scraping
49:47 - and it's very powerful and useful tool
49:49 - whenever you're building not just web
49:51 - applications but programs in general
49:52 - with python
49:54 - so I hope you understood what we did in
49:56 - this tutorial
49:59 - now I'm going to briefly talk about
50:00 - virtual environments a virtual
50:03 - environment is used to manage python
50:05 - packages for different projects using a
50:08 - virtual environment it basically allows
50:11 - you to avoid installing python packages
50:13 - globally in your computer which could
50:15 - break the system tools or it could
50:17 - affect other projects so for example
50:20 - let's say you are building a new project
50:21 - like a social media application it is
50:24 - advisable to create a virtual
50:25 - environment just for the application so
50:27 - that every single package you install in
50:30 - that virtual environment belongs to just
50:32 - that particular application now let me
50:34 - show you what I mean first of all let me
50:36 - show you how to create a virtual
50:37 - environment before we create this
50:39 - virtual environment let me run this
50:41 - command and say pip
50:43 - 3. install Django so if I try to install
50:47 - this package called Django you can see
50:50 - that it tells me that requirements
50:51 - already satisfied which means that I
50:53 - already have Django installed I'm going
50:55 - to clear this
50:57 - I'm going to create a new virtual
50:58 - environment now and to create a virtual
51:00 - environment in part in on a Mac what you
51:04 - just need to do is say Python 3
51:08 - m
51:09 - V and V and you're going to say the name
51:12 - of your environment I can just say new
51:14 - EnV
51:16 - now this is going to create an
51:18 - environment named the new EMV in
51:20 - whatever folder you're in now to you be
51:23 - able to you know use this environment
51:25 - you have to activate it to activate it
51:27 - you're also going to use this command
51:29 - source and then you're going to say new
51:31 - underscore EnV which is the name of the
51:34 - environment slash bin slash activate
51:39 - now you're gonna see that right here we
51:40 - have this new EMV which shows that we
51:43 - are in this new EMV environment and it
51:47 - has been activated now if I try to run
51:49 - peep free install Django
51:53 - you're now going to see that it's going
51:55 - to go ahead to install Django for us now
51:57 - the reason why is installing Django now
51:59 - is basically because
52:01 - Django has not been installed on this
52:02 - particular environment before we might
52:04 - have Django installed on our computer
52:06 - globally but that doesn't mean that this
52:08 - environment is going to have it
52:09 - installed now this is good so that when
52:11 - we create a new project we're going to
52:13 - create an environment with it so that
52:16 - means that for particular projects all
52:18 - the packages will install everything we
52:20 - use is going to belong to just that
52:22 - project and that environment
52:24 - today is the basic understanding of
52:27 - virtual environments
52:31 - in this tutorial I'm going to show you
52:33 - how to set up a flask project so what
52:36 - I'm going to do is to show you how to
52:38 - install flask on your computer and then
52:40 - create a new flask project and run that
52:42 - project
52:43 - so flask is a web framework so it's a
52:46 - python web framework and this means that
52:48 - using flux you can create or build web
52:51 - applications with the Python programming
52:53 - language so what it does is that it
52:55 - helps you use your python skills to
52:57 - build web applications so without
52:59 - wasting any time let's get straight into
53:01 - this so what I'm going to do is to
53:03 - actually show you how to install python
53:05 - first so to do this I'm on a Mac and
53:07 - you're going to have to open up your
53:09 - terminal so I'm in vs code and I could
53:12 - just open up a new terminal from vs code
53:14 - and I'm going to have to say pip 3
53:16 - install
53:18 - flask
53:20 - so
53:22 - install flask we say P3 install Flash
53:24 - and this is going to install flask on
53:26 - your computer for me I have installed
53:28 - that's why it says requirement already
53:29 - satisfied if you're on the windows open
53:31 - your command prompt and type pip install
53:33 - flask you don't need to type pip3 just
53:36 - type pip
53:37 - so once we have that you know installed
53:39 - then we are good to go
53:41 - so before we even create like a new
53:44 - project what I always recommend to do is
53:47 - to create an environment a virtual
53:49 - environment for your project
53:51 - so I recommend that every single project
53:55 - you have you know a different virtual
53:57 - environment just so you don't mix up
54:00 - libraries and other stuffs with
54:01 - different projects so to create a
54:03 - virtual environment we're going to run
54:05 - this command we're going to say python
54:07 - 3. once again if you're on a Windows
54:09 - just type python you don't need to type
54:10 - python3 you don't say m
54:14 - v e n v and let's say my underscore EnV
54:18 - so this is creating a virtual
54:20 - environment named my EMV so once I run
54:23 - that that is going to create the virtual
54:26 - environment named my EnV and what we
54:28 - actually want to do is to activate this
54:30 - virtual environment so we're going to
54:32 - save my underscore EnV
54:34 - slash bin
54:36 - slash activate
54:39 - but we need to say source so we're
54:41 - sourcing into this particular folder
54:42 - they source that and as you can see
54:45 - right here I have the brackets that I
54:46 - say in my EMV this means that this
54:48 - virtual environment has been
54:50 - successfully created now once we have
54:52 - our virtual environment created we
54:54 - actually need to install flask again I'm
54:56 - going to tell you why we're installing
54:58 - this again Now by studying this again
55:00 - because we installed flask earlier on
55:02 - our computer in general but for this
55:05 - particular project we want to install
55:06 - flask in this virtual environment let's
55:09 - say it's like a subset or sub
55:11 - environment from our computer so if I
55:14 - install flask and I say P3 install flask
55:16 - you're going to see that it doesn't say
55:18 - requirement already satisfied it
55:20 - actually goes ahead to download and
55:22 - install everything I need this is
55:23 - because we're in a new environment that
55:25 - is separate from our computer so now
55:27 - that we know that we have flask
55:29 - installed the next thing that we just
55:30 - want to do is to create a new flask
55:33 - project now I'm going to close this for
55:34 - a bit and to create a flash project all
55:37 - you just need to do is to First create a
55:39 - file so right here I just created a file
55:41 - named app.py and once we created that
55:44 - file in there we're going to have to say
55:47 - from flask import flask so we're using
55:51 - the flask you know library in our python
55:54 - file so I had to specify you must create
55:56 - a python file so that's why it is apt of
55:59 - Pi
56:00 - so now that we've imported flask what we
56:02 - cannot do is to say app equals flask
56:07 - underscore underscore and then what
56:10 - we're going to do is to just say name
56:13 - right so what we can just do is to say
56:16 - in this name we can change it to like so
56:20 - right here we should have name
56:23 - so in this name we can change this name
56:25 - to like the name of our module which can
56:28 - be like up but we're just going to leave
56:29 - that blank for now and what I'm going to
56:31 - have to do is to say that at app dot
56:34 - root
56:35 - I'm going to explain what this does and
56:37 - we're going to say slash
56:40 - and then we're going to have to say
56:42 - function let's just say hello
56:45 - and then for this function we want to
56:48 - return
56:50 - basic HTTP response we're just going to
56:54 - have like an H2
56:56 - that says welcome
56:59 - to my web app
57:00 - and we're gonna have to close our h2 tag
57:02 - so it's a basic HTML code so what this
57:05 - is doing is saying that when we go to
57:07 - this app and we go to this route so
57:09 - whenever we have this slash without any
57:11 - root this means the home page so it
57:13 - means that whenever we're going to this
57:14 - home page we want to run this function
57:16 - below it so what is happening in this
57:18 - function we're just returning a basic
57:20 - text that says welcome to my web app but
57:23 - it has its HTML tags so that's why the
57:25 - text is going to be a little big I'm
57:27 - going to show you that in a second now
57:30 - that we have all of this set up the next
57:31 - thing we need to do is to open our
57:33 - terminal again and in our terminal we
57:36 - want to so I'm just gonna open a new
57:39 - terminal in our terminal what we're
57:41 - going to run
57:42 - I just came back to that terminal and
57:44 - what we want to run in here is because
57:46 - we are in that particular environment so
57:49 - I'm going to say flask
57:53 - underscore app
57:55 - is equals to app.pi so specify the file
57:58 - name
57:59 - and the next thing I'm going to do is to
58:02 - say flask
58:04 - underscore e and V now we want to tell
58:08 - flags that we are still in development
58:12 - so
58:15 - um we specify that as development with
58:17 - the T so we're telling flowers that are
58:19 - still in development so we can use the
58:21 - debugger to catch errors and now what we
58:24 - can just do is to say flask
58:26 - right
58:28 - so as you can see once we run this it
58:31 - says this is a development server it's
58:33 - not in production so now it tells us the
58:35 - application is running on this
58:36 - particular URL now once I copy this URL
58:39 - and come into my browser and paste it in
58:42 - there you can see that it just gives us
58:44 - this text that says welcome to my web
58:46 - app so if I make that large a little bit
58:48 - you can see it perfectly there so that
58:51 - has successfully run that is how you can
58:53 - install flask and create a new project
58:55 - and run it on your computer
58:59 - in this tutorial I'm going to show you
59:01 - how to set up a Django project so I'm
59:04 - going to show you how to install Django
59:05 - create a new project and then run that
59:07 - project so without wasting any time
59:09 - let's get straight into it
59:11 - so the first thing we want to do is to
59:13 - actually make sure that Django is
59:14 - installed on our computer
59:16 - but before we do that since we are
59:18 - creating a new project let's go ahead
59:19 - and create a new virtual environment for
59:22 - our project
59:23 - so what I'm going to do is to open a new
59:25 - terminal
59:26 - and in this terminal I want to create a
59:28 - virtual environment so for me to create
59:30 - a virtual environment I need to run this
59:32 - command I'm going to say python3
59:36 - m v e n v and I'm going to say the
59:39 - virtual environment right here let me
59:40 - just say
59:41 - Django EMV
59:44 - now this is going to create a virtual
59:45 - environment in Django EnV
59:47 - and it's going to create that in a
59:49 - second what I'm not going to do is to
59:51 - activate this particular environment so
59:54 - I'm going to say source
59:56 - Django underscore EnV slash bin slash
60:01 - activate
60:03 - so as you can see Django EnV is
60:06 - currently activated
60:09 - now I'm going to have to make sure that
60:11 - Django is installed in this particular
60:14 - environment
60:15 - so I'm going to say peep 3 install
60:18 - Django it's that easy to install Django
60:22 - so that is 8.1 MB and it should take a
60:24 - few seconds a couple seconds to install
60:27 - so as you can see boom everything has
60:30 - been stored successfully
60:31 - now
60:34 - that we know that everything is
60:35 - installed
60:37 - just clear that up what we can now do is
60:40 - to create a new Django project in this
60:43 - particular folder so to create a new
60:45 - Jungle project we're going to have to
60:46 - run Django iPhone admin starts project
60:51 - and we can name the project something
60:52 - like
60:53 - new project
60:56 - so what we can do is to say LS if we say
61:00 - LS we can see that we have a new folder
61:03 - that has been created named new project
61:05 - now we want to go into that folder I'm
61:07 - going to say CD new project
61:10 - if I say LS again now you can see that
61:12 - we're in a new folder that has two
61:15 - that's a file named manage.py and a
61:19 - folder named new project
61:20 - now whenever we create a new Django
61:23 - project this is how easy it is to create
61:26 - it what I'm going to do now is to open
61:28 - up this particular project in vs code
61:31 - right here
61:32 - so I'm going to say command o
61:34 - and I'm going to go into this and say
61:36 - new project and I just want to open it
61:39 - up right here
61:40 - so this is how I created let me just
61:43 - make the little bit smaller
61:47 - and this area is a trust so I can cancel
61:50 - this and right here this is everything
61:52 - we have when we create a new Jungle
61:54 - project so these are the files that
61:55 - comes with it now there's a junk you can
61:58 - create the jungle project you can create
61:59 - a jungle app but we're not going to go
62:01 - into those details for now I'm just
62:03 - going to show you how to run this
62:04 - project that you just created
62:06 - so I'm going to open up a terminal let
62:08 - me just create a new one
62:10 - and let me press command B to close that
62:12 - up and since the terminal was removed
62:15 - let me create let's we have to activate
62:18 - that particular environment again we're
62:21 - going to say source
62:23 - Django underscore EnV
62:25 - slash bin
62:27 - flash activate
62:31 - so it says
62:33 - there is no file as this
62:36 - okay so what just happened is because we
62:40 - basically opened a new directory right
62:42 - that is in this new project directory so
62:45 - if I come into file and open
62:48 - now it open this directory called new
62:50 - project and it's trying to run that
62:51 - particular
62:53 - environment but it's not in this
62:54 - directory so what we need to do is to go
62:57 - to that directory that it is in if I say
62:59 - LS you can see there is no in that
63:01 - directory so because this directory is
63:04 - not there what we can just do is to open
63:07 - up terminal
63:09 - and when we open up terminal
63:12 - this is in the default directory and we
63:15 - can just run that so we can say source
63:20 - and we can say Django underscore EnV
63:23 - slash pin slash activate
63:29 - now you can see that this is activated
63:31 - right here
63:32 - now everything is working but let's
63:34 - actually run the Django project so to
63:37 - run you are going to say Python 3 manage
63:39 - dot Pi run server that's how easy it is
63:43 - if you are on a let's say you are on a
63:46 - Windows you have to run python so as you
63:49 - can see it gives us it gave us an error
63:50 - that it can open money.pi that is
63:53 - because we are not in the folder where
63:54 - this project is so note that you want to
63:57 - create your virtual environment in the
63:58 - same folder as your project so you don't
64:00 - have this directory error so what we can
64:03 - just do is to CD into new project
64:06 - and we press LS now we can see that we
64:08 - have manage.pi if I try to run that
64:11 - command again python3 manage.pi run
64:14 - server everything should be working
64:15 - successfully so it says that the
64:18 - development server has been started at
64:21 - this particular port or this URL if I
64:24 - copy this now and I go into my browser
64:27 - and I paste this you can see that it's
64:30 - just going to give me the default Django
64:32 - page saying that
64:34 - my install Works successfully
64:36 - congratulations and you know it's just
64:39 - saying that this project is now running
64:41 - of course if you want to learn more
64:43 - about jungle and go in depth I would
64:45 - advise you to take a course on Django
64:46 - and I have a ton on my channel so to
64:49 - learn more about how to change this page
64:51 - to your own HTML page and build your own
64:53 - web application but this is just an
64:55 - intro to Jungle how to install it set it
64:57 - up and then run the project
65:01 - now in this tutorial I'm going to be
65:03 - showing you how to build a very basic
65:06 - calculator in Django so it's going to be
65:09 - a basic calculator app where you can
65:11 - input two different numbers and input
65:13 - the operation you want to carry out on
65:15 - those numbers you can improve whether
65:17 - you want to add the numbers subtract
65:19 - divide or multiply so we're going to do
65:22 - that right now
65:23 - the first thing we want to do is to open
65:25 - up the project we created so we created
65:27 - this new project right here and what I'm
65:30 - just going to do is to open it up so to
65:33 - create a new Jungle project you just
65:35 - need to run the jungle command and I
65:37 - already done that I already created this
65:39 - project so what I'm just going to do is
65:42 - to open up this project that I created
65:44 - in my vs code so I'm going to come into
65:47 - vs code and I'm going to go into files
65:50 - and click on open folder so in open
65:52 - folder I'm just going to go to where it
65:54 - is so this is where it is
65:56 - and if you open that up for me so I'm
65:58 - just going to press command B to bring
66:01 - that open so as you can see the project
66:03 - has been opened everything is working
66:05 - so the first thing that we want to do is
66:08 - to you know just first of all run this
66:10 - and just make sure everything is working
66:12 - so I'm going to open up a new terminal
66:14 - and I'm going to say
66:16 - python 3.
66:18 - manage
66:21 - dot Pi run server
66:26 - now this is going to open it's going to
66:28 - run this application on this particular
66:30 - Port so I'm just going to come into our
66:33 - browser and paste that in there so good
66:36 - as you can see Django is successfully
66:38 - working the installation has worked now
66:41 - what I'm just gonna do I'm going to walk
66:43 - you through all the basics of Django by
66:44 - building this app
66:46 - so I'm going to close this terminal
66:48 - right here I'm not deleting the terminal
66:49 - I'm just minimizing it now what I'm
66:52 - going to do is to First create a new
66:54 - python a new Jungle application so
66:57 - whenever I create a Django project it is
67:00 - advisable to create an application that
67:02 - you can use in that project so I'm going
67:04 - to explain the difference between a
67:05 - jungle project and a jungle application
67:07 - so the jungle project is like let's say
67:10 - let's think about jungle application as
67:13 - a subset of a particular jungle project
67:15 - so for example if we have facebook.com
67:18 - which is like a social network project
67:20 - so let's say Facebook can be the project
67:23 - and then let's say the messages section
67:26 - of Facebook can be one app the you know
67:29 - the marketplace section of Facebook can
67:31 - be another app so different sections of
67:33 - that particular project can be dealt
67:35 - with by having different apps so when
67:38 - you have like a very big project
67:39 - normally you're going to have multiple
67:41 - apps but for a very basic project like
67:44 - what we're going to build now we just
67:45 - need one app so I'm going to show you
67:47 - how to create an app under this jungle
67:49 - project
67:50 - so I'm just going to bring back the
67:52 - terminal I'm gonna bring that back I'm
67:56 - just going to just come here and see a
67:58 - new terminal so this is the terminal
68:00 - where we are running our project but
68:01 - we're just going to run our commands
68:02 - here so to create an app I'm going to
68:05 - say Django
68:07 - admin
68:09 - start app and I can just say my app
68:14 - so what this does is Django admin
68:16 - startup creates an app and then my app
68:18 - should be the name of the app you want
68:20 - to create so if this is for messaging
68:22 - just say messages if this is for
68:23 - Marketplace just a Marketplace whatever
68:25 - app that is you should do it here
68:28 - and if you come back into the directory
68:30 - of the particular project you can see
68:32 - that my app has been created so there's
68:35 - a folder named my app that has been
68:37 - created now this is good and this is
68:39 - what we want
68:40 - so now I'm going to show you how we can
68:42 - build this basic project that I'm
68:45 - talking about
68:47 - so the first thing that we want to do
68:49 - is to come into
68:52 - the project and in URLs we're going to
68:56 - come back here to configure something
68:57 - but before we even come here the app
68:59 - that we created
69:01 - um let me just close this real quick in
69:03 - the app we want to create a new file
69:05 - named urls.pi so I'm just going to click
69:08 - on the app
69:09 - I see urls.pi so this urls.pi file is
69:14 - where all the URLs in our project is
69:16 - going to go or where we're going to you
69:18 - know configure all the URLs now what I
69:20 - mean by URLs is for example my website
69:22 - code with tommy.com
69:26 - so this is the base URL of my website
69:28 - let's say I have something like slash
69:30 - newsletter
69:32 - slash newsletter is this is one URL well
69:35 - let's say I have another URL that says
69:36 - login this is another URL so all of
69:40 - these URLs this all of them are going to
69:43 - be configured in these urls.py file so
69:46 - first to start configuring anything I'm
69:49 - going to show you what you need to do
69:50 - first of all you need to say from
69:53 - django.urls import path
69:57 - so when we say from django.urls import
69:59 - path we're going to create a new python
70:01 - list
70:05 - so I'm just gonna get rid of all of this
70:08 - so what I just did was that I'm using
70:11 - the path module from Django dot URLs
70:14 - that jangos gives us and what I'm just
70:18 - going to do is to create a new list and
70:20 - name it URL patterns so this list is
70:22 - going to take a list of all the URLs
70:24 - that's going to be in our web
70:26 - application so I'm going to say path we
70:30 - use pass to create a new URL and I'm
70:32 - going to have these codes and if I leave
70:35 - this code blank this specifies the base
70:37 - URL so for example I'm going to use my
70:40 - site again code retomi.com if I leave it
70:42 - blank it specifies code with tommy.com
70:44 - if I want to have a URL that says login
70:47 - I'm just going to say login so this
70:49 - specifies code you told me.com login
70:52 - so I'm going to leave it blank to
70:53 - specify the home URL and I'm going to
70:56 - say go to views.com
71:00 - I'm gonna give it a name
71:03 - of ohm so what I just did was that I'm
71:06 - saying that whenever a user tries to
71:08 - visit the home URL go into a views file
71:11 - right and I'm going to explain this
71:13 - views file in a bit and run the ohm
71:16 - function and they were just giving this
71:17 - a name of ohm so that's the name of this
71:19 - particular URL now let me explain what
71:22 - this views file is if you come back into
71:24 - this app you're going to see that you
71:25 - have a file named views.pi so this
71:28 - views.pi is basically where all the
71:30 - function happens all the you know back
71:32 - end of our website happens so for
71:34 - example whenever a user comes to the
71:37 - home URL it's going to go into the views
71:39 - dot Pi file and it's going to look for a
71:42 - function named om now whatever we do in
71:45 - that function is what is going to be
71:46 - rendered whenever a user goes to the
71:49 - home URL so we have to create that
71:51 - function named om and it's going to take
71:53 - a request
71:55 - and for now let's just pass we're going
71:56 - to come back to this
71:58 - so what this is doing is that
72:02 - is whenever he's not coming to the home
72:04 - page it's going to go into views and
72:06 - look for the function named om whatever
72:08 - has been done in ohm is what's going to
72:10 - be rendered so we need to fix some stuff
72:13 - the first thing is that it's not saying
72:15 - these views so I need to do from
72:21 - dot import views so what this is saying
72:25 - is that from the current directory
72:28 - import the views file so it's important
72:30 - views now we can use anything from that
72:32 - views file but now if we come into views
72:35 - you can see that we are we're not only
72:38 - rendering anything we're just passing so
72:41 - what I'm going to do is to return an
72:43 - HTTP response so I'm just gonna say HTTP
72:47 - response and right I'm just going to say
72:49 - return
72:50 - HTTP response and I can just give a
72:54 - simple response and say
73:01 - I
73:05 - so everything should work except one
73:08 - thing so if I come back in my project
73:10 - and I hit refresh you're gonna see that
73:12 - it still doesn't show us this eye that
73:14 - we input here
73:16 - the reason is because we were
73:17 - configuring everything for our app but
73:20 - we haven't told our project which is the
73:23 - main application where to you know what
73:26 - to do when user coming to the home URL
73:28 - we just told that to our app so what I'm
73:30 - going to do is that I'm going to come
73:31 - into my project URLs file and I'm going
73:34 - to say that whenever a user goes to the
73:36 - home URL go into this app and look for
73:39 - the home URL whatever is being done here
73:41 - is what you should do now for me to do
73:44 - that I need to import something called
73:46 - include
73:49 - so include is going to allow me to do
73:51 - that and I'm going to say path
73:54 - I'm going to leave that blank which
73:55 - specifies the home URL and then I'm
73:57 - going to say include so when I say
73:59 - include
74:00 - I'm going to see my app
74:02 - dot URLs now what this is doing is that
74:05 - it's saying that whenever a user goes
74:07 - into the home URL
74:09 - go into my app.urls and then look for
74:12 - this same URL pattern that is blank
74:16 - which is this and include that so
74:18 - whoever has been done here is what it's
74:20 - going to do right here also I'm going to
74:23 - save that and let's see if we have any
74:25 - change
74:26 - so he says sight can be reached now
74:30 - let's see let's bring back
74:32 - our terminal
74:35 - right here
74:37 - so I'm just gonna come here and create a
74:39 - new terminal
74:40 - I'll come back to that terminal so it
74:42 - says my app.urls
74:45 - okay
74:48 - okay so as you can see what this is
74:51 - saying is that it doesn't see my
74:52 - app.urls and the reason why it doesn't
74:55 - see my app does
74:58 - URLs is because it says it does not
75:01 - appear to have any patterns in it
75:04 - but okay so as you can see it says it
75:07 - doesn't appear to have any patterns in
75:08 - it the reason why is because right here
75:10 - where we are specifying URL patterns
75:12 - there was a typographical error so it is
75:15 - meant to have buttons
75:17 - erns so once we have that as you can see
75:20 - we don't have any error again
75:22 - so I'm going to come back in here and
75:24 - hit refresh boom as you can see now we
75:27 - have I
75:28 - that is working successfully so if I
75:31 - come back to views I'm just going to
75:33 - close this a little bit right here if I
75:36 - come back to views in this HTTP response
75:38 - you can just have a basic HTML tag or
75:40 - HTML code here and that is going to work
75:42 - successfully
75:44 - now instead of having just this basic
75:47 - HTTP response I'm going to show you how
75:49 - to use a template file for example an
75:52 - HTML file so an HTML file is just a file
75:56 - that we can allow us to actually design
75:58 - our web page the way we want it so for
76:01 - me to include this file I'm going to
76:02 - have to use or configure something name
76:05 - templates I'm going to walk you through
76:07 - all these steps right now so what we're
76:09 - going to do at the end is that instead
76:11 - of returning an HTTP response we're just
76:13 - going to return that HTML file so I'm
76:16 - going to collapse all of this and in the
76:18 - root directory so whenever I say root
76:20 - directory of my jungle project it means
76:22 - the directory that contains the
76:25 - manager.py file so now in the root
76:28 - directory I want to create a new folder
76:29 - and I want to name it template
76:32 - so in this template folder I'm just
76:34 - going to create a new HTML file I'm just
76:36 - going to say om.html
76:40 - now what I want to do I'm just going to
76:42 - have something like H2
76:45 - welcome
76:48 - so what I want to do is that whenever a
76:51 - user comes into the home page I want to
76:53 - render this HTML
76:55 - you know file instead of rendering an
76:58 - HTTP response for me to do this I'm
77:00 - going to now use the settings so I'm
77:03 - going to come into
77:05 - our project and I'm going to look for a
77:08 - file name settings.pi
77:10 - and what I'm going to do is to go all
77:12 - the way to where I see templates and in
77:15 - templates I'm going to have to configure
77:17 - something in theirs so I'm gonna say
77:20 - base
77:22 - de
77:23 - slash template
77:28 - so what this is doing is that it's
77:30 - saying whenever we try to get let's
77:34 - remove this whenever we try to render
77:39 - let's say or we try to use any HTML file
77:42 - it should go into this template folder
77:44 - now let me explain that logically so
77:46 - what this is saying is that
77:49 - we want to tell Django that any template
77:52 - file we want to get or use is stored in
77:55 - this folder named templates for me to do
77:58 - that I have to come into the settings.py
78:00 - file in my project folder I'm going to
78:03 - scroll down to this templates list and
78:06 - in there I'm going to look for where I
78:07 - have theirs and I'm going to specify
78:10 - that in here so what this is saying is
78:12 - that in the base directory which is same
78:14 - thing as a root directory which was what
78:16 - I explained earlier go into the template
78:18 - folder to look for any template file so
78:21 - now that that is done I can just easily
78:23 - come into views and instead of returning
78:25 - an HTTP response I could say return
78:28 - render
78:29 - and I could just easily render I'm gonna
78:31 - say request this is how we render an
78:34 - HTML file om.html
78:37 - now let's save it and then let me call
78:40 - me and hit refresh boom you can now see
78:42 - that it says welcome so this is what we
78:45 - want and this is working successfully
78:48 - if I come in here now and let's say I
78:50 - have another HQ and I say a
78:53 - if I save this file that is what is
78:55 - going to be updated in here now this is
78:58 - super sick this is what we want to work
79:01 - now I'm going to show you how to create
79:03 - a very basic calculator so I'm just
79:06 - going to have a simple form that takes
79:07 - you know two different values
79:10 - and then let's say it's going to add
79:12 - those values and give you the response
79:13 - of those values so what we're going to
79:16 - do is that I'm going to say I'm going to
79:19 - have to create another URL so let me
79:21 - show you how to create a new URL so this
79:24 - URL is where the form is going to be but
79:26 - when we click on submit the the page
79:29 - that you know that's going to show us
79:31 - the answer or the result of that
79:33 - addition is going to be have to be a new
79:36 - URL so I have to create that URL right
79:38 - here just going to say comma
79:42 - and let's just say result doesn't want
79:44 - to name this URL
79:48 - on the name result so I'm going to say
79:50 - go interviews or results and give it a
79:52 - name or result
79:54 - so now in views I'm going to have to
79:57 - create a new function named result
80:03 - take a request and for now let's pass
80:07 - and I can quit these settings so what I
80:10 - want to do now is I want to have a basic
80:12 - HTML form in here so I'm going to say
80:15 - form
80:19 - and in this form what I'm just going to
80:21 - do is to say
80:22 - input
80:26 - type
80:28 - number
80:31 - and I can just say play solder
80:35 - input number
80:38 - input number one I'm going to do the
80:40 - same thing input
80:42 - type
80:44 - number
80:46 - you're gonna have a placeholder and say
80:48 - input number two
80:54 - and then I'm going to have a submit
80:56 - button so I'm just gonna say
81:00 - button
81:03 - type submit
81:08 - so if I save this and I come in here
81:11 - so we don't it gives us an error and
81:14 - this is because it says
81:16 - views has no attribute results so let's
81:18 - save the views file so that can update
81:20 - that is working and now if I hit refresh
81:23 - good so we have this input number one
81:27 - input number two but the submit button
81:29 - doesn't show nothing actually what we
81:32 - need to do let's change this button
81:34 - to input instead of submit
81:37 - I mean I mean instead of button now if I
81:40 - hit refresh that is working
81:43 - what I want to do now is I want to you
81:46 - know send all these values to this
81:49 - particular URL named result so if you
81:52 - know St HTML you know that we need to
81:54 - specify what is called action and then
81:57 - in Django you're just going to specify
81:58 - the URL name of that particular URL so
82:02 - we're sending it to the results URL so
82:04 - now if I come back in here and hit
82:06 - refresh let's say I have two I have
82:08 - three if I hit submit it goes to this
82:11 - particular URL which is good so this
82:14 - gives us a few errors now we're going to
82:16 - take care of this in a bit what we want
82:18 - to do is to come into views now
82:21 - and we want to get the values that has
82:23 - been sent from this page
82:26 - into this result URL so to get those
82:29 - values
82:30 - I'm going to say request
82:33 - dot get
82:35 - dot get
82:38 - and we need to specify something in here
82:40 - what we need to specify is the name of
82:43 - each of this input
82:45 - now this inputs
82:47 - I need to have a name which can stand
82:50 - like as an identification for it so if I
82:53 - say name
82:54 - I say number one India can also say name
82:57 - and say number two now the reason why we
83:01 - need this name is so that we can get the
83:04 - value that a user inputs in each of this
83:06 - particular input so for example right
83:08 - here when I try to say
83:10 - request.get.get what I'm doing is saying
83:13 - get the value of a form that has been
83:16 - submitted to this particular URL
83:18 - but we don't know what value we want to
83:21 - get but if we know the name of that
83:24 - particular input then we can easily just
83:27 - say get the name
83:30 - get the value of the input with this
83:32 - name so this stores the value now and we
83:36 - can just say this is number one
83:38 - and we can do the same thing to say
83:40 - number two equals request dot get dot
83:45 - get and we can just easily say number
83:47 - two
83:48 - so that is what we just need to do and
83:51 - then we can just say answer
83:54 - equals to
83:56 - number one
83:57 - plus number two
84:02 - and now we can return
84:05 - render
84:09 - requests
84:12 - I want to say something that results
84:15 - dot HTML
84:17 - right but we don't have any page name
84:20 - result.html so we need to create that
84:22 - let's just copy the name to make it
84:23 - faster gonna come into templates
84:26 - create new file let's paste that name in
84:29 - now in here we have a file that will be
84:31 - loaded whenever a user
84:35 - basically whenever a user tries to load
84:37 - this page now let's run what we have and
84:40 - let's see I'm gonna go back it refresh
84:43 - so let's say we have three we have six
84:46 - and each submit so as you can see it now
84:48 - takes us to this results page and if you
84:52 - look well into the URL you can see that
84:54 - we have no number one equals three
84:56 - number two equals six so that's the
84:59 - values that's been inserted in each of
85:01 - these and it also send those values to
85:03 - this particular page that is what we
85:05 - want now for us to get these values that
85:08 - is exactly what we did here we sell
85:10 - request.get.get number one so when we
85:13 - say get number one it's going to get the
85:15 - value which is three when we say get
85:17 - number two which is what we did here
85:19 - it's going to get the value which is six
85:20 - and since we have those values we store
85:23 - them in a variable and now we're just
85:25 - gonna
85:26 - add those two values together right but
85:30 - the only thing now is that how can we
85:32 - show this value that we've added
85:34 - together in our HTML in this page right
85:37 - here now what I'm going to do is I'm
85:39 - going to have to send this data from my
85:42 - function here into my template View
85:45 - to do this I'm going to have a comma in
85:47 - here
85:48 - and I'm going to say answer
85:53 - so I'm going to have a simple dictionary
85:55 - and to give you a value of answer so
85:57 - what I'm doing is I'm sending a
85:59 - dictionary to this result.html page I'm
86:02 - giving it a key of answer
86:04 - and I'm giving it a value of answer
86:06 - which is basically this addition that we
86:08 - performed right so this is what we want
86:11 - what I can now do is to save this if I
86:14 - come into result.html since we sent this
86:17 - dictionary in here that means we can
86:19 - access this value in the result.html but
86:22 - how do I access it I'm going to come in
86:25 - here and to access it I'm just going to
86:27 - have two
86:28 - curly braces and in that Curly braces
86:31 - I'm going to write the name of that
86:34 - particular key so this is what I'm
86:36 - writing and it's going to print the
86:39 - answer of that let me save this and
86:41 - let's try it out
86:42 - I'm gonna eat refresh as you can see it
86:46 - prints 36. so first of all a lot of
86:48 - errors I'm going to explain and what I
86:51 - just want to do is to first put this
86:52 - into like an H1 tag just so we can see
86:54 - it clearly
86:58 - hit a paste that
87:01 - good so now if I come back here again
87:03 - you can see it says 36. so let me
87:07 - explain what just happened so what I did
87:09 - was that I sent this answer into this
87:13 - result.html using a dictionary so now
87:16 - once I say print answer
87:18 - which is basically what I'm doing here
87:20 - for me to say print answer in my
87:22 - template is I need to use these curly
87:24 - braces
87:25 - so it's going to come in here and look
87:26 - for Answer
87:28 - and the value of answer is this answer
87:30 - variable and the value of that answer
87:32 - variable is the addition of both of
87:35 - these variables so that is why we get
87:37 - the addition of three and six but we
87:40 - must have spotted an error and the error
87:42 - is that it is just combining the two
87:45 - numbers together it's not actually
87:46 - performing an arithmetic addition
87:49 - operation on it so we should have 9 as
87:52 - the answer not 36. now let's fix that
87:55 - the reason why is because when we were
87:58 - adding we didn't convert these two
88:00 - integers what we can do is to either
88:03 - convert this to integers here or convert
88:05 - it to integers right here
88:07 - so python initially sees this as a
88:10 - normal string because we didn't tell it
88:12 - is an integer we didn't tell you none of
88:14 - that so what I can do is to just say int
88:18 - and everything is going to go into the
88:20 - int wrapper
88:22 - gonna do the same for this integer
88:25 - everything is going to go into that
88:26 - integer wrapper so now we are performing
88:29 - this addition on non1 and num2 as you
88:32 - can see it now sees it as an integer
88:34 - which is what you see right here if I
88:36 - remove that let's say
88:39 - I do this now if I say no to you can see
88:43 - that the data type is any it's not
88:46 - integer so I'm gonna
88:48 - bring that back and now we have integer
88:52 - now let's come back in here and test it
88:55 - so let's say I have 55 and 44. if I hit
88:59 - submit boom you now see that I have 99
89:02 - as the value which is very good this is
89:05 - what we want so as you can see this is
89:08 - basically working now to this point you
89:11 - can you know make this better you can
89:12 - add whatever you want let's say we want
89:15 - to perform subtraction instead I can
89:18 - just change this to minus and if I come
89:20 - back in here if I just refresh this page
89:23 - automatically it performs a subtraction
89:25 - operation on these values which is 55
89:28 - and 44. I can just go back to you know
89:31 - to retest it so I can do seven and let's
89:33 - say I do nine seven minus nine is going
89:36 - to give us negative 2 which is what we
89:38 - have right there you can do the same
89:40 - thing for multiplication we can
89:42 - basically do anything that python
89:44 - supports let's save that file
89:46 - the community and it refresh is doing 7
89:49 - times 9 which is 63 if I do the same
89:52 - thing for division save that file but
89:55 - each refresh it gives us that results in
89:59 - decimal so this is very good you could
90:01 - take this further by let's say adding
90:04 - another form in this ohm.html let's say
90:08 - like a a drop down so in here we could
90:11 - just have another form and say what
90:13 - operation do you want to carry do you
90:15 - want to do do you want to add you want
90:16 - to subtract divide or multiply
90:19 - then depending on whatever the users say
90:21 - if the user picks addition subtraction
90:23 - division notification then you can just
90:26 - come in here and do something like if
90:30 - if let's say operation is equals to add
90:32 - then we want to do answer equals to know
90:35 - one plus node two evaporation equals to
90:38 - minus we want to do answer equals no one
90:41 - minus node two if you get the concept of
90:43 - what I'm trying to say
90:45 - so that is the basic way you know of
90:47 - getting your head around with Django
90:49 - that was the main purpose of this
90:52 - particular tutorial is just to introduce
90:54 - it to you this python web framework for
90:56 - building web applications called Django
90:58 - now I hope you are a bit comfortable or
91:01 - at least you've been introduced to how
91:03 - Django works and hopefully you can build
91:05 - this project now on your own using
91:07 - Django and that's gonna be the end of
91:09 - this video and thank you guys for
91:11 - watching to the end I hope you found
91:13 - this course useful or this tutorial
91:15 - helpful and if you did please don't
91:17 - forget to smash the like button and
91:19 - subscribe and I'll see you in the next
91:21 - one