00:00 - learn p5.js for Creative coding by
00:02 - following along with five beginner
00:04 - project tutorials p5js is a JavaScript
00:08 - library for Creative coding with a focus
00:10 - on making coding accessible and
00:12 - inclusive for artists designers
00:14 - Educators beginners and everyone else
00:16 - Pat ver created this course Pat loves
00:18 - making art with code and is great at
00:20 - teaching others about it hi everyone
00:22 - welcome to the course my name is Pat and
00:25 - I teach creative coding over at the pat
00:27 - vaa YouTube channel the goal for this
00:29 - course is to introduce you to p5js a
00:32 - JavaScript library for Creative coding
00:34 - that focuses on making coding accessible
00:37 - for artist designers Educators beginners
00:40 - and anyone else we'll be working on five
00:42 - projects that cover a range of topics
00:44 - including generative art kinetic
00:47 - topography interactivity and so much
00:49 - more all you need is a computer and a
00:51 - web browser just head over to editor.
00:54 - p5js dog so without further Ado let's
00:58 - get started welcome to another coding
01:01 - tutorial and in today's video we're
01:03 - going to be making this interactive
01:04 - display with rotating
01:06 - [Music]
01:08 - blocks we're going to start by creating
01:10 - this one block to understand the
01:12 - mechanics of it I'm going to use a
01:14 - function called wct and wct takes in a
01:16 - total four arguments the first two are
01:18 - the x and y coordinate of the top left
01:21 - corner of the rectangle and then the
01:23 - third and the fourth are the width and
01:24 - the height so I'm going to put it at the
01:27 - center of the canvas so with WID ided by
01:30 - two and then height divided by two and
01:33 - then the width and the height let's do
01:35 - 100 by
01:37 - 50 so as you can see here it is not at
01:41 - the center of the canvas because the X
01:43 - and Y coordinates is at the top left
01:45 - corner of the rectangle and we can
01:47 - change that easily by changing the
01:50 - rectangle mode using the function Rec
01:52 - mode and then give an argument
01:55 - center now I want to rotate the
01:57 - rectangle and we can use the function
01:59 - called rotate
02:00 - and how about we rotate by 45° and
02:03 - because we're using the degrees mode we
02:05 - also need to set the angle mode to
02:11 - degrees and that is not how we want to
02:14 - rotate the rectangle and the reason that
02:16 - it's doing what it just did because the
02:19 - rotate function rotates around the
02:20 - origin point and right now the origin
02:22 - point is at the top left corner of the
02:25 - canvas so we also want to use a function
02:29 - called Translate
02:30 - and put that before the rotate function
02:33 - and translate is the function that
02:35 - translate the origin point and we want
02:37 - to translate it to the middle of the
02:40 - canvas so let's give it width ided by
02:44 - two here and height / two and by doing
02:47 - this now we can draw the rectangle at
02:50 - the new origin
02:52 - point there you go now the rectangle is
02:55 - rotated around the origin point which is
02:57 - moved from this point to the middle of
03:00 - the canvas how about I create a new
03:02 - variable called angle and let's set it
03:05 - to zero and then I can put angle here
03:09 - and we can increment it by one degree at
03:13 - a
03:14 - time and now the rectangle is rotated in
03:17 - the clockwise
03:20 - Direction perfect to make this
03:22 - interactive we're going to have the
03:23 - rectangle rotate when the mouse is Clos
03:26 - to the rectangle and we can do that by
03:30 - first let's set a new variable called
03:32 - distance and I'm going to set it to a
03:35 - function called dist and dist is a
03:37 - built-in function within p5js that
03:39 - calculate the distance between two
03:41 - points and the two points that I want to
03:43 - calculate is the location of my mouse so
03:47 - Mouse X and mouse Y and mouse X and
03:49 - mouse y are built-in variables within
03:51 - p5js that outputs the location of my
03:54 - mouse now I want the distance between
03:56 - the mouse location and the center of the
03:59 - rectangle so width / two and height /
04:03 - two so how about we also first print
04:07 - distance just to see then I'm going to
04:10 - comment this out all right so as I move
04:14 - closer and closer to the center of this
04:16 - rectangle you can see that the distance
04:18 - becomes
04:23 - zero or closer to zero now that we have
04:26 - the distance calculated we're going to
04:28 - use a conditional statement
04:30 - to check if the mouse is close to the
04:32 - rectangle so we can use an if statement
04:35 - that says if distance is less than how
04:38 - about we set a new variable let's call
04:41 - it this mouse for distance between The
04:44 - Mouse and the rectangle is 50 so if
04:49 - distance is less than this mouse then I
04:53 - want to increment this angle here by
04:58 - 1°
05:02 - so not moving not moving not
05:04 - moving and then when the condition is
05:07 - satisfied the rectangle is moving then
05:09 - it stops when the mouse is further away
05:13 - now that the code is working for one
05:15 - rectangle let's put it in a class so you
05:17 - just come to this Arrow here Click A
05:19 - Plus signed and then click create file
05:22 - I'm going to name this file block. JS
05:25 - and before we start writing the class go
05:27 - to index.html file and then come to this
05:31 - line of code here copy and paste and
05:34 - then change the name of this file to the
05:37 - name that you just created so for my
05:39 - case block. JS and this is how we
05:41 - integrate a new Javascript file into the
05:43 - program let's go back to the class we're
05:46 - going to start writing it by writing the
05:48 - word class and then I'm going to call my
05:51 - class block and then we're going to
05:54 - write two methods one is the Constructor
05:57 - function and the other one is the
06:01 - display all right so for the Constructor
06:03 - function we need X and Y location of the
06:07 - center of the rectangle so I'm going to
06:10 - set these as variables this.x and
06:14 - this.y and for display let's go back to
06:17 - our sketch. JS file and then we're going
06:20 - to copy these set of code here for
06:24 - drawing the
06:28 - rectangle all right and we need to tweak
06:32 - this a little bit so instead of width
06:34 - divided by two and height divided by two
06:36 - here we're going to put this. X and
06:38 - this.y and then I'm going to
06:41 - also create a new variable here called
06:44 - this. angle and initialize it at
06:47 - zero all right and we also want another
06:51 - method called move and this is the
06:54 - method where we check the distance and
06:56 - move the rectangle rotate the rectangle
06:59 - so so we can copy this set of code and
07:03 - then put it in the move
07:05 - method all right and then we also need
07:08 - to change this to this.x and
07:11 - this.y and then this mouse is already
07:14 - the global variable so we can keep it as
07:17 - is and then we need to also set angle to
07:20 - this. angle perfect so now let's go back
07:24 - and let's try to create this one block
07:26 - object we don't need this angle anymore
07:29 - okay so I'm going to call it B and B is
07:34 - going to be a new block object we're
07:37 - going to set it at how about this the
07:38 - center of the circle so width divided by
07:41 - two and height divided by
07:43 - two and then to call the function or the
07:45 - methods we just do B which is the name
07:48 - of our object and then Dot and then the
07:50 - name of the method so move and then
07:57 - display all right so it's displaying and
08:00 - then once the mouse is closer the
08:02 - rectangle is moving great all
08:06 - right one more thing that I want to
08:09 - change before we move on is I want to
08:13 - also set the size
08:17 - here using a global variable size which
08:20 - I need to also create and then I'm going
08:23 - to set it here as how about
08:28 - 50 all all right so now it's a square
08:30 - now that we have this one block let's
08:32 - create a grid of blocks so I need a few
08:36 - new variables so the first one is
08:39 - columns second one is rows and then we
08:41 - also have the size and instead of just
08:43 - this variable block I'm going to create
08:47 - a new array and let's call it
08:51 - blocks all right so we're going to
08:54 - create a 2d array and we can do that by
08:58 - using a nested for
09:03 - Loop that goes from IAL to0 to I less
09:08 - than columns right and then in the Inner
09:11 - Loop is from J equal to Z to J less than
09:14 - rows in the outer loop here we need to
09:17 - populate the blocks array with empty 1D
09:23 - arrays and then inside the inner loop we
09:26 - can now create a bunch of new block
09:34 - objects and then for the arguments it's
09:36 - not going to be this anymore it's going
09:39 - to be I * size and J * size I * size and
09:44 - J * size will allow us to create a grid
09:47 - of rows and Columns of blocks that are
09:49 - spaced out by the distance size all
09:53 - right and then now we want to call the
09:55 - move and the display methods and we are
09:58 - going to use
10:00 - the nested loop as well so we can just
10:03 - copy and paste this and
10:06 - then now just call move then blocks of I
10:11 - and J dot
10:19 - display what's going
10:24 - on it is because first we have not yet C
10:29 - calate what calls and rows are so first
10:32 - we need to calculate that so columns
10:35 - will be the size of the width divided by
10:39 - this variable size here and then rows
10:41 - will be height divided by
10:45 - size all right so this is not a grid
10:48 - that we want and that is because we
10:50 - forgot two important functions called
10:53 - push and pop that are very important
10:56 - when we do any type of Transformations
10:58 - so let's go back to block. JS so
11:01 - essentially right now that we do
11:03 - transformation which is translating the
11:06 - origin point to this.x and this.y we
11:10 - need to use the function push and pop so
11:12 - we need to use the push function which
11:15 - saves these two transformation translate
11:17 - to this point and rotate at this angle
11:21 - and then we need to use the pop function
11:23 - to return it back to the original
11:25 - setting where the origin point is at the
11:28 - top left corner of the canvas before we
11:31 - do the next translation for the next
11:33 - object block and if we do that and click
11:36 - run we get a grid but this grid is not
11:39 - exactly what we want so we want to shift
11:41 - the grid a little bit to the right and a
11:43 - little bit down and that a little bit is
11:46 - actually by half the size to the right
11:49 - and then half the size down so let's do
11:52 - that go back to sketch. JS and then here
11:57 - we need to put an offset of size ided by
12:01 - two and size ided by two
12:04 - here all right now we have a grid of
12:09 - blocks and now when the mouse is
12:13 - closer all the blocks are
12:16 - rotating but as you can see here when
12:19 - the mouse is no longer closed then the
12:22 - blocks stop moving but what I want is
12:25 - that I want the blocks to keep moving
12:28 - until specific angle before it stops
12:31 - moving and that angle is 90° so it
12:34 - rotate exactly one
12:38 - rotation all right so we can do that by
12:41 - using an if
12:43 - statement inside the move function so
12:47 - right now what we have is we have we say
12:50 - if the distance that we calculated
12:52 - between the mouse location and the
12:54 - center of the squares is less than a
12:57 - specific amount then rotate the angle
13:00 - right or increment the angle by 1° else
13:04 - so right now we're going to say if it's
13:06 - not less than this. Mouse I still want
13:08 - it to rotate but only if this. angle is
13:14 - more than
13:15 - zero and
13:18 - also less than
13:21 - 90 then I want it to continue to
13:26 - rotate else so if it rotates more than
13:31 - 90° already then I want to set this dot
13:34 - angle to zero all right let's try
13:38 - that all right so as you can see
13:42 - here the square sto moving after it
13:46 - rotates
13:47 - 90° looks really nice perfect but
13:52 - now if I don't move my
13:56 - mouse the square keeps rotating and
13:58 - that's not what I want what I want to do
14:01 - now is I want the square to stop
14:04 - rotating if the mouse doesn't move and
14:06 - to check whether the mouse is moving we
14:09 - can use another buil-in variables called
14:12 - P Mouse X and P Mouse Y which are the
14:14 - built and variables for the location of
14:16 - the mouse previously inside the draw
14:19 - function I'm going to
14:21 - print going to print P Mouse X and mouse
14:26 - X and then P Mouse y and mouse
14:30 - y all
14:33 - right so right now I'm moving my mouse
14:36 - and then I
14:38 - stop then I move my mouse then I stop
14:42 - all right so let's look at this so as
14:45 - you can see here when I move my mouse
14:47 - right you can see that the P Mouse X
14:50 - versus mouse X it's different because
14:53 - the location of the mouse X previously
14:56 - and the mouse X now are different but
14:58 - when I don't move my mouse then they're
15:02 - the same so we can calculate the
15:05 - difference between P Mouse X and mouse X
15:08 - and P Mouse Y and mouse y to see if I
15:10 - move my mouse all right let's delete
15:14 - this then go back to block.
15:18 - JS so inside the move
15:21 - function we're going to write a
15:23 - conditional statement that says if P
15:27 - Mouse x - Mouse X is not equals to
15:35 - zero or P Mouse Yus Mouse Y is not equal
15:42 - to zero meaning that we're moving the
15:45 - mouse right then that's when I want to
15:49 - calculate this distance here so let's
15:52 - copy this part and put it
15:55 - inside all right so I'm also going to to
15:59 - declare the variable distance outside
16:01 - the if statement and then we can do this
16:04 - All right so now we also don't need this
16:08 - else statement
16:11 - anymore so we can just use another if
16:13 - statement here so basically what we have
16:16 - is that we will only check the distance
16:20 - if the mouse is
16:21 - moving right that's the first
16:23 - conditional statement second one is
16:26 - checking if the angle is
16:29 - more than zero or less than 90 meaning
16:31 - that if squares are already moving so
16:34 - how about let's comment so that we know
16:36 - so this one is if the mouse is moving
16:41 - check distance between Mouse location
16:47 - and center of square and then for this
16:50 - one
16:52 - is if squares are already moving or
16:58 - already
16:59 - rotating keep rotating until ankle
17:03 - equals to
17:06 - 90 all right it seems like I have an
17:09 - extra curly
17:13 - bracket no I didn't have enough okay
17:15 - let's try
17:17 - that all
17:21 - right it's not working the way that I
17:24 - want it to
17:26 - work right because it stopped
17:31 - stops before what did we forget
17:42 - so ah so we need to
17:46 - end this if statement before all
17:51 - right so this if statement of checking
17:54 - distance encapsulate this this part and
17:57 - then this is a new if statement so let's
18:00 - try
18:03 - that all right and now when the mouse is
18:05 - not moving then the squares are not
18:17 - rotating nice let's change the
18:20 - Aesthetics of how this look how about we
18:23 - make the size 10 let's make it small
18:29 - all right okay and then how about we
18:33 - change the background color to Black and
18:37 - then let's go to block. JS and then we
18:39 - are going
18:41 - to do the stroke color to be white and
18:47 - let's do no
18:52 - fill
18:54 - okay then actually I'm going to do the
18:57 - stroke color to to be this. C and I'm
18:59 - going to create a
19:01 - new variable here and set it to 255 for
19:05 - white and then let's go back to sketch.
19:08 - JS right now all the squares are right
19:11 - next to each other I actually wanted to
19:13 - have a slight gap between each one of
19:16 - them so I'm going to create a new
19:17 - variable called offset and let's set it
19:20 - to four and then if we go back to block.
19:23 - JS so instead of just drawing it at size
19:26 - let's do size minus
19:33 - offset all right and actually instead of
19:35 - 255 here I'm going to make it a little
19:38 - bit
19:39 - darker and now I want to change the
19:41 - color of the squares to White when the
19:43 - distance is less than this mouse
19:46 - so let's do this. C equals to
19:54 - 255
19:56 - okay but then now it's like drawing on
19:59 - the canvas because even
20:03 - if the distance is not less than this
20:06 - mouse anymore it stays at 255 so we want
20:10 - to change that too and we can do that by
20:13 - inside this conditional we can decrement
20:17 - the
20:17 - color by how about let's do
20:25 - three all
20:27 - right
20:30 - and you also want to set it at 70 here
20:35 - when the angle is no longer satisfied
20:38 - this
20:51 - condition H you saw this right that it's
20:56 - like slightly black here
21:02 - we can fix that easily by saying that we
21:06 - only want to decrement by three only if
21:10 - this dot C is more than
21:15 - 70 let's try
21:19 - that all right that's
21:21 - better perfect okay and I'm going to
21:25 - make this mouse here
21:28 - to be
21:34 - smaller all right now instead of just
21:37 - drawing squares we're also going to draw
21:39 - a different shape or an X shape so
21:42 - inside here instead of just drawing rect
21:44 - here I'm going to use the function
21:48 - called line and the line function takes
21:50 - in a total of four arguments so it's the
21:52 - x and y coordinate of the two points
21:55 - that will connect to become a line all
21:57 - right so I'm also going to comment out
22:00 - the rotate function so it doesn't rotate
22:03 - what if we draw it from 0 comma 0 to
22:06 - size comma
22:09 - size all right can you see this it's a
22:12 - little bit hard to see so let's go back
22:14 - to sketch. JS and let's
22:20 - make columns to let's just do one by
22:25 - one and make size to be 100 actually
22:30 - let's do
22:33 - 4x4 so you can see here that because
22:37 - when we draw the rectangle we need to
22:39 - move it out by a margin of size divided
22:42 - by two because when we draw the
22:45 - rectangle using the rect mode everything
22:48 - is from the middle point of the squares
22:52 - so now we also want to move this back by
22:56 - negative size / by to so if we go back
22:59 - to block we can do that by how about we
23:04 - create a variable called margin and then
23:06 - set it to negative size / two and I can
23:10 - do margin here margin here and
23:15 - then we want to add margin to this
23:21 - too all right so now everything moves
23:25 - where we want it to move but we ALS Al
23:28 - want to add the offset we want it to
23:30 - move it slightly to the right and
23:32 - slightly down by half of the offset so
23:35 - we can do margin plus offset /
23:39 - two for the first two argument so for
23:42 - the third and the fourth arguments we
23:44 - want to subtract the
23:47 - offset by the same
23:52 - amount all right you can't really see
23:56 - it's quite small but that is working all
24:00 - right so now we want a new line that
24:02 - goes the other way so it's going to be
24:07 - so let's start simple so it's going to
24:09 - be what size zero and then zero
24:16 - size okay and then now we want to First
24:21 - add the margin right so we want to move
24:23 - everything to the left and
24:26 - up
24:35 - okay and then now we need to work with
24:37 - the offset so for the first one we need
24:41 - to subtract
24:42 - by offset divided by
24:45 - two and then plus offset ID by two for
24:50 - the
24:51 - Y variable and then for the third one we
24:55 - need to add by offset divided by two and
24:57 - and then we need to subtract by offset /
25:02 - two okay let me change the offset here
25:06 - to how about I do 40 so you can see that
25:10 - it's actually is
25:12 - working all right okay so if we go back
25:15 - to block. JS again I'm going to put this
25:19 - whole thing here inside a
25:23 - new method and let's call
25:26 - it draw
25:30 - X all right and then I'm going to do the
25:32 - same one same thing for rectangle so
25:36 - draw rect and I'm going to move the set
25:39 - of code
25:41 - here
25:44 - here okay so now when we want to call a
25:50 - method within a class all we have to do
25:52 - is we just put the name of that method
25:55 - so draw
25:56 - X
25:59 - right and we just need to put the word
26:01 - this
26:03 - dot we get what we have here if we go
26:06 - back to sketch. JS and then just make we
26:09 - don't need to set 4x4 here anymore set
26:12 - the offset to four and then the size
26:14 - back to
26:17 - 10 and then uncomment
26:22 - this all right so now we have a
26:26 - different shape
26:29 - why did I make two shapes basically this
26:32 - tutorial is inspired by this website
26:35 - here called any pixel which is a project
26:38 - by Google creative lab and open source
26:40 - software and Hardware library to make
26:42 - interactive display but as you can see
26:46 - here they have a really cool
26:50 - interactive display which is exactly
26:53 - what we're trying to do and they have
26:55 - two shapes they have the X shape and
26:57 - then they have the square shape so
27:01 - that's what we're going to do for the
27:02 - last step all we need to do actually is
27:05 - come this part here inside the display
27:08 - method and we're going to write a
27:12 - conditional statement that say if this
27:14 - do angle is more than zero and this do
27:20 - angle is less than I'm going to do
27:23 - 45 then I want to
27:26 - draw the
27:29 - squares else
27:32 - then draw
27:36 - X let's see what
27:39 - happens so now it's all X because this
27:42 - dot angle is equals to zero right
27:46 - initially then
27:49 - now you see that we get a mix of two
27:56 - shapes
28:03 - this is my take on making an interactive
28:04 - display with rotating blocks what if you
28:06 - create your own version by creating
28:09 - different shapes maybe change the colors
28:11 - or even maybe change the speed at which
28:14 - things rotate give it a try welcome to
28:17 - another coating tutorial and in today's
28:19 - video I'm going to show you how to make
28:20 - this rotating circles using the concept
28:23 - of
28:26 - oscillation what you we see here is a
28:28 - set of smaller white circles in a shape
28:30 - of a bigger Circle that is traveling in
28:32 - an even bigger circle's circular path
28:35 - but that is not actually what is
28:36 - happening these smaller white circles
28:38 - are actually traveling independently of
28:40 - each other in an oscillating motion
28:42 - along a straight line first let's start
28:45 - by drawing the biggest circle so I'm
28:47 - going to use a function called ellipse
28:49 - and ellipse takes in a total of four
28:51 - arguments the first two are the X and Y
28:53 - coordinates of the center of the circle
28:55 - and then the third and the fourth are
28:57 - the width and the height of the circle
28:59 - so I want the circle to be in the middle
29:01 - of my canvas so we're going to put width
29:04 - / two and height divided by two here and
29:07 - then let's do the size to be 300 by
29:10 - 300 so actually instead of putting width
29:14 - ided two and height divided by two here
29:16 - I want to translate or I want to move
29:19 - the origin point from the top left
29:22 - corner of my canvas to the Middle Point
29:25 - here so I can do that by using a transl
29:28 - function and then put in the two
29:30 - arguments as the new origin point so
29:32 - let's do width / two and height / two
29:35 - and once we move the origin point we can
29:38 - put in 0 comma 0
29:41 - here all right so everything is still
29:43 - the same next I want to draw a smaller
29:46 - Circle and this smaller circle is going
29:49 - to travel along the circle path here so
29:52 - we need to figure out what are the X and
29:54 - Y location of this smaller Circle and we
29:56 - can do that by using the rules of
29:58 - trigonometry you can watch my video on
30:01 - how we convert from Polar coordinates to
30:03 - cartisian coordinates but essentially we
30:05 - need two equations and these two
30:07 - equations are X = to R * cosine of angle
30:11 - and y = r Time s of angle so let's us
30:16 - also
30:18 - declare X and Y variables as well as
30:23 - angle let's set angle to zero and also
30:26 - how about we
30:28 - also do radius = to 150 and then instead
30:32 - of putting 300 here let's do R * 2 and R
30:35 - * 2 and do not forget to draw this
30:38 - smaller Circle so let's do it at X and Y
30:41 - and then give it a size of 20 a few
30:45 - tweaks so I'm going to put this after
30:48 - and then I'm going to not color the big
30:50 - circle and I want the smaller Circle to
30:52 - be the color
30:55 - red and also I am going to use the angle
30:59 - mode degrees so I'm going to also write
31:02 - a function called angle mode and put in
31:05 - degrees here so right now this red
31:07 - circle is not traveling anywhere it's a
31:09 - stuck at angle equals to zero so let's
31:11 - move it we're going to move it based on
31:13 - the location of the mouse we can map
31:16 - using the equation called map and we're
31:19 - going to map what we're going to map the
31:21 - mouse X location from zero to
31:24 - width to the degrees of 0 to
31:28 - 360 all right so now it's traveling in
31:30 - the clockwise Direction along this
31:32 - circular path now I'm going to draw two
31:35 - more circles and these two circles one
31:38 - is going to follow the X location of the
31:40 - red circle and the other one is going to
31:42 - follow the Y location of the red circle
31:45 - so we can do that
31:47 - by calling the illust function again and
31:50 - instead of putting X comma y we're going
31:52 - to do X comma 0 Let's do the same size
31:55 - then the second one is going to be 0a y
31:59 - same size and let's give it a color how
32:02 - about
32:06 - white all right so right now one is
32:11 - following the X location of the red
32:13 - circle and the other one is following
32:16 - the Y location of the red circle you can
32:20 - see that it's traveling what along a
32:22 - straight line right along the X and Y
32:26 - AIS
32:27 - how about we draw the axis out as well
32:30 - so we can use a function called line and
32:32 - line takes in a total of four arguments
32:34 - the X and Y coordinates of the first
32:35 - point and the x and y coordinate of the
32:37 - second point where these two points are
32:39 - connected to make a line so let's do the
32:42 - x-axis first so it's going to be R comma
32:45 - 0 and R comma
32:48 - 0 all right and then another one will be
32:51 - 0 comma R and 0 comma
32:56 - r
32:58 - and what these two white circles are
33:00 - doing is that it is traveling in an
33:02 - oscillating motion right around a center
33:04 - point which is the origin
33:07 - point and this oscillating motion is
33:09 - called a simple harmonic motion which
33:12 - can be represented by the sign and the
33:14 - cosine function which is exactly what
33:17 - these two locations are right because X
33:19 - = to R * cosine of angle and y = to R *
33:23 - s of angle what we're going to do next
33:25 - is that we're going to draw another set
33:28 - of X and Y AIS but we're going to rotate
33:31 - it counterclockwise by
33:33 - 45° so let's copy these two lines of
33:39 - code and use a rotate function and we're
33:42 - going to rotate by 45° counterclockwise
33:46 - and that's why I need to put - 45 here
33:49 - all right so let's give it a different
33:52 - color so we can see so let's
33:55 - do
34:00 - blue for the Y AIS and green for the
34:07 - xaxis and then we need to also reset it
34:11 - back to black
34:13 - here all right let's try
34:15 - this and I'm also going to comment this
34:18 - out first all right so now we shift so
34:23 - if we don't shift it at all right so
34:27 - we can see that the X AIS is blue and
34:30 - then the Y AIS is green and now we shift
34:32 - it by
34:34 - 45° now what if we want to draw two more
34:37 - of these white circles have them travel
34:39 - along this new axis but still follow the
34:43 - location of the red circle what if we
34:46 - start by declaring two more variables
34:49 - the new X and Y coordinates so let's do
34:52 - X2 equals to and we're going to just set
34:55 - it equals to the same equation first and
34:58 - let's see what happens so Y2 = to R * s
35:04 - of
35:06 - angle and then we're going to draw it
35:08 - out as well so we're going to draw the
35:11 - exact same thing as
35:14 - this but we're going to replace it by X2
35:17 - and Y2 and then let's give it the same
35:19 - color of
35:24 - white angle all right so and then we're
35:29 - going to have it
35:31 - move okay so this is not exactly what we
35:35 - want right because right now everything
35:39 - is shifted by 45° meaning that at angle
35:42 - equals to Z the x coordinate is at
35:46 - equals to one right and then the y
35:48 - coordinate is equals to zero which is
35:50 - exactly the same thing as what it is on
35:53 - the main axis so we need to change
35:55 - something in these two equations such
35:58 - that the circles are following the X and
36:00 - Y locations of the red circle right so
36:04 - what we want is that let's change this
36:05 - to 45 and comment this out again so at
36:08 - angle equals to 45 the locations of
36:11 - these two circles need to be shifted a
36:14 - little bit right so we want actually
36:16 - this circle to be equals to one and we
36:18 - want the circle to be equals to zero
36:21 - what that means is in terms of X and Y
36:23 - as a function of angle we want Y at
36:26 - angle = to 45 to have a value of 1 and X
36:30 - at angle equal to 45 to have a value of
36:33 - zero if you look at the sign and the
36:34 - cosine graphs here as a function of
36:36 - angle y = to 1 and X = to 0 when angle
36:41 - equals to 90 so we need to tweak these
36:43 - two equations such that inside the
36:45 - parentheses it equals to 90 when we give
36:48 - an argument of 45 and we can do that by
36:51 - adding the shifting angle or in this
36:53 - case 45 inside the parentheses so now y
36:57 - of angle equal to S of angle + 45 and X
37:02 - of angle equals to cosine of angle + 45
37:06 - so let's first declare a new variable
37:08 - let's call it shifting
37:12 - angle and set it to 45 and then our
37:15 - angle will be at zero right and then we
37:18 - need to add
37:20 - shifting angle
37:25 - here
37:32 - all right
37:38 - so all right so add angle equals to 45
37:42 - right and this is what
37:47 - happens now we can start adding more
37:50 - access so let's first we don't need this
37:53 - green and blue stroke colors any anymore
37:57 - we want everything to be black so
37:58 - instead of declaring the shifting angle
38:00 - as a variable that is set to 45 we're
38:03 - going to make it an
38:04 - array so we're going to change it to an
38:07 - array and then we're going to declare
38:08 - another variable called num axis and
38:12 - this is going to be a variable that
38:15 - controls the number of axis that we want
38:17 - so let's start with two so two will be
38:20 - what we have right now right so the main
38:22 - axis and then another one that is
38:24 - shifted
38:25 - 45° and then in the setup function we're
38:27 - going to calculate the shifting angles
38:30 - based on the number of axis that we want
38:33 - so let's use a four Loop so four let I
38:36 - equal to Zer I less than num of axis I
38:41 - ++ and then the shifting angle of I will
38:46 - be equals to so the equation that we're
38:48 - going to use is going to be I * 90 / num
38:53 - of axis so let's try to understand this
38:56 - so if we only have this one axis which
38:59 - is the main axis I will be equal to 0
39:02 - right so 0 * 90 / number of axes will be
39:05 - equals to zero meaning that we're not
39:07 - shifting it anywhere and now we want the
39:12 - second axis to be shifted 45° right so
39:16 - if I = to 1 and then 1 / 2 right is 1
39:22 - and 1/2 1/2 * 90 is 45 so now that we
39:26 - changed the shifting angle from a
39:27 - variable to an array we also need to
39:30 - change the X2 and Y2 variables to an
39:32 - array as well so let's start by
39:34 - declaring X2 and Y2 as an
39:41 - array and we are going to use the for
39:45 - loop as well to populate the X2 and Y2
39:49 - array so let's do for let I equal to z i
39:54 - less than the num X
39:57 - I
39:58 - ++ and then we're going to copy these
40:01 - two lines of
40:02 - code in here it's going to be X2 of i =
40:07 - r * cosine of angle plus shifting angle
40:10 - of I right and then Y 2 of I = to R * s
40:15 - of angle plus shifting angle of i as
40:18 - well and now we're going to draw the two
40:21 - smaller white circles based on the X2
40:23 - and Y2
40:25 - location so so we have it here already
40:29 - so how about we just first we need to
40:31 - move this down
40:39 - here and then we want to copy the set of
40:44 - code and then put it in
40:47 - here so what do we have here so now we
40:50 - have calculated the X2 and Y2 locations
40:53 - of the smaller white circles we want to
40:56 - rotated by negative of the shifting
40:59 - angle of I right and then we also need
41:03 - to put X2 of I here and then Y 2 of
41:06 - I let's try
41:10 - this all right so now it's still the
41:15 - same we can clean this up a little bit
41:17 - more too because right now we also
41:20 - have this set of codes that draw the
41:23 - main axis and the main two smaller
41:26 - circles which now it's just a repeated
41:29 - of what we have in here so let's delete
41:33 - this all
41:36 - right and now all we have to do is that
41:38 - we need to change the number of the axis
41:41 - here so let's do
41:43 - three ooh what's going on
41:46 - here all right don't freak out the thing
41:49 - that is going on here is that we forgot
41:51 - to put in two functions that are very
41:53 - important when we do transformation
41:55 - which is push and pop so let's put it
41:58 - here
41:59 - push and pop and essentially the push
42:02 - and pop function push save the
42:05 - transformation and then pop returns it
42:07 - back to the
42:08 - original state that we are in and we
42:11 - need to put these two functions every
42:13 - time we call a new Circle because we
42:16 - want to save the new transformation
42:18 - which is the rotating of Shifting angle
42:20 - right and then we want to return it back
42:22 - before we rotate it again so let's try
42:25 - this
42:27 - all
42:28 - righty and now all we have to do is we
42:31 - just play around with the number of axis
42:34 - that we
42:36 - want okay and so now instead of having
42:39 - it mapped to our Mouse location what if
42:42 - we
42:43 - just increment it by
42:48 - one all
42:51 - right the last piece which is the fun
42:54 - piece is how do we beautify this I am
42:56 - going to change the color of my
42:59 - background to this turquoise color and
43:03 - then I'm going to change the color of
43:07 - my main Circle to be black and then how
43:10 - about let's give the
43:13 - stroke white color and let's do
43:16 - transparency to be 100 so it's not very
43:19 - very bright and yeah let's just do that
43:23 - and this is just like the original image
43:25 - that I had sh on
43:27 - you um and then let's do let's give it
43:30 - just a huge number of axes here and
43:33 - there you go and this is just using the
43:37 - concept of oscillation where the circles
43:39 - just travel back and forth on a straight
43:41 - path and it gives this illusion that
43:43 - it's travel in a circular motion which
43:45 - is really cool so give it a try welcome
43:48 - to another coding tutorial and in
43:50 - today's video I'm going to show you how
43:51 - to make this kinetic typography made out
43:53 - of a bunch of Cubes
43:57 - we're going to start by learning how to
43:59 - make this one Cube so first we need to
44:02 - come to this create canvas function and
44:05 - we need to add in the third argument
44:08 - webgl and this will allow us to render
44:11 - things in 3D mode all right so I'm going
44:15 - to start by drawing a box and we can use
44:17 - a function called box and the argument
44:21 - that I'm going to put in is going to be
44:23 - the argument for the size so let's
44:28 - 50 two things that I want you to notice
44:30 - so first usually when we draw in the 2D
44:33 - mode the origin is at the top left
44:35 - corner of the canvas right but now it is
44:38 - at the middle of the canvas so this
44:40 - point right here is actually 0 comma 0
44:43 - the second thing is that you only see a
44:44 - square but actually it is a box or a
44:47 - cube but the reason that you only see a
44:49 - square is because you only see the front
44:51 - facing side of the square the next thing
44:53 - that I want to do is I want to use the
44:55 - rotate function to show you that it is
44:58 - actually a cube and we're going to
45:01 - declare a variable called X and I'm
45:03 - going to Map X to my mouse
45:06 - location between zero and the width and
45:10 - we're going to map it to 0 to
45:14 - 360° so because I'm using the degrees
45:17 - mode in the setup function I also need
45:19 - to change the angle mode from radians to
45:23 - degrees all right then I'm going to put
45:25 - in X as the argument to the rotate X
45:31 - function so now as I move through here
45:35 - you can see that the box is rotated
45:38 - along the x-axis
45:41 - right all right what if we change to
45:44 - rotate
45:47 - y so now it's rotating around the Y
45:52 - AIS all right how about the Z axis
45:58 - AIS so this axis is the axis that goes
46:02 - through our screen
46:05 - right all right and what if we do it all
46:09 - at the same
46:13 - time so rotate X rotate Y and rotate
46:19 - Z all right so now you can actually see
46:24 - that it is a box and not just a square
46:26 - now let's draw another box but instead
46:29 - of having it at the origin how about we
46:32 - move it slightly I'm going to use a
46:34 - translate function and I'm going to
46:36 - translate it by how about 50 to the
46:38 - right and 50 down and then I'm going to
46:41 - draw a box of the same size
46:45 - 50 so how about we fill the first box
46:50 - red and then the second
46:52 - box
46:54 - white all right so as you might have
46:56 - guessed the box is now moved 50 to the
46:59 - right and then 50 down right one thing
47:01 - to notice you can see that it is a box
47:04 - you can see the second and the third
47:06 - sides of the Box whereas if you were to
47:09 - draw it at the origin you cannot see
47:11 - that what if we do the same thing and
47:13 - I'm going to use another translate
47:15 - function and I'm going to translate it
47:18 - to the left 50 and then up by
47:22 - 50 why do we only see two boxes now
47:25 - instead of three
47:26 - and it is because we forget the two main
47:29 - functions when we do Transformations
47:31 - which is push and pop push is the
47:33 - function that saves the Transformations
47:35 - that you do while pop restores it back
47:37 - to the original settings the reason that
47:39 - you only see two cubes right now is
47:41 - because we draw this red box right and
47:44 - then we draw the first white box but we
47:46 - moved it 50 to the right and then 50
47:49 - down from the original point and so we
47:51 - have this box here but because we didn't
47:54 - use the push or the pop function we
47:56 - translate it again on top of this first
47:58 - translation we say move to the left by
48:00 - 50 pixels and then move it up by 50
48:03 - pixels so it moves from this settings
48:06 - here to the left and then up and then we
48:08 - draw this other box and so this third
48:12 - box is actually on top of the red box
48:14 - that we drew initially but actually what
48:16 - we want to do is that we want to
48:18 - translate this box from the original
48:20 - point so we want to use the push
48:22 - function here and then the pop function
48:25 - here such that before we call this
48:27 - translate function we go back to the
48:30 - original setting which is the origins at
48:31 - the center of the canvas so if we click
48:34 - run now we have this third box here and
48:36 - the reason that now these two boxes are
48:39 - both red it's because I put this fill
48:41 - inside the push so it restores it back
48:45 - and now the third box is using the field
48:48 - function of the first box so if I were
48:51 - to put this here we get two white boxes
48:55 - and then one red one which is this top
48:57 - one now we want to draw rows and Columns
48:59 - of boxes so essentially we're going to
49:03 - be using these set of functions over and
49:06 - over again inside a nested for Loop
49:08 - let's start by writing the outer for
49:11 - Loop so let I equal to zero I let's then
49:14 - let's do how about 2 I ++ and then four
49:19 - let J equal to Z J less than 2 j++ so
49:23 - we're going to do 2 by two
49:27 - boxes all right then I'm going to copy
49:31 - this line of code put it in
49:34 - here then I'm going to delete
49:37 - this and before I move forward I'm going
49:41 - to declare a new variable called size
49:44 - and I'm going to set size to 50 so that
49:47 - I
49:47 - can put in size here instead of hard
49:52 - coding the number 50 but we don't want
49:54 - to translate everything everything by
49:56 - size right if we do that we only have
49:59 - one box because all the boxes all four
50:01 - boxes are at the same location we want
50:03 - to multiply I * size here and then J *
50:08 - size so we have four boxes and because
50:11 - we put this red here we don't see it
50:14 - let's put it after let's say that we
50:18 - declare rows equals to two and columns
50:23 - equals to two right and then we can
50:24 - replace
50:26 - this by columns and
50:29 - rows let's do the same thing and now we
50:32 - want to change it by let's do 10 by
50:38 - 10 now it's off the screen so what we
50:41 - want to do is that we want to shift
50:43 - everything to the left and up but by how
50:46 - much so if you look at it right now
50:48 - right there are how many here 1 2 3 4 4
50:51 - and A2 1 2 3 4 4 and A2 so we actually
50:57 - want a total of 10 so we're going to
50:59 - shift it by how about five so five boxes
51:03 - time the size so let's try that so if
51:07 - we subtract it by size times the number
51:11 - of columns and then subtract by size
51:15 - times the number of
51:20 - rows oh it has to be because columns is
51:24 - now 10 x 10 right right so we actually
51:26 - want just five so divide by two here
51:28 - divide by two
51:30 - here our canvas is a little bit too
51:33 - small for the size that we set so what
51:35 - if we do 600 by
51:38 - 600 all right so you can see that it's a
51:42 - little bit off
51:44 - centered so actually to have the same
51:47 - margin for everything we want to add
51:50 - size / by two here as an offset
51:57 - okay so now we're smacked in the center
52:00 - I'm going to change it back to 400 but
52:04 - I'm going to change the size here how
52:07 - about
52:08 - 6x6 and if you want it to fit the size
52:11 - of the canvas perfectly instead of
52:14 - giving it the number of rows and calls
52:16 - here we can also
52:19 - just calculate the number of rolls and
52:21 - calls in the setup based on the width
52:23 - and the height right so we could do
52:25 - calls equals to width / by size and rows
52:30 - equals to height / by
52:34 - size perfect next we're going to create
52:37 - a box class and inside the Box class
52:39 - we're going to be drawing each of the
52:42 - boxes based on the code that we just
52:43 - wrote so let's come here and then we're
52:47 - going to click the plus sign and then
52:49 - click create file I'm going to name my
52:53 - file box. JS and before we start writing
52:56 - a class let's go to index.html file and
53:00 - come down to this line
53:02 - copy and then we're going to change the
53:04 - name from sketch to whatever the name of
53:07 - the new Javascript file that we created
53:09 - so in my case it's box. JS and this is a
53:12 - way for us to integrate this file into
53:14 - our program now let's go back to box. JS
53:18 - we're going to start writing a class so
53:20 - start with the word class and we're
53:23 - going to name the class box inside the
53:25 - Constructor
53:27 - function we're going to give it two
53:30 - parameters X and
53:32 - Y then I'm going to set this xals to X
53:35 - and then this y equals to Y and then
53:38 - we're going to write a method called
53:40 - display and display is going to have
53:43 - functions that we just wrote let's go
53:45 - back to sketch.
53:47 - JS they're going to be these ones
53:54 - here
53:56 - all right so we're filling the box to be
53:59 - color white and then we have the push
54:01 - function the pop function here then
54:03 - inside we want to translate it by a
54:05 - certain amount but instead of having
54:07 - these numbers here because this is part
54:09 - of the nested for loop we're going to
54:11 - put this.x and
54:13 - this.y now let's try to just create one
54:16 - box
54:18 - so let
54:21 - B and then inside the setup function B
54:24 - is a new box and let's start by putting
54:28 - it in the middle of the canvas so it's
54:30 - not going to be width divided by two or
54:32 - height divided by two right because now
54:34 - our origin is at the middle of the
54:36 - canvas so we're providing Z comma Z as
54:39 - the
54:40 - arguments and then let's comment all of
54:43 - this
54:46 - out we're going to call the display
54:50 - Method All right but we don't want to
54:53 - just create one box we want to to create
54:55 - a bunch of boxes
54:58 - right and we're going to use a n four
55:01 - Loop here so four let I equal to zero I
55:05 - less than the number of columns I
55:09 - ++ and then four let J equal to Zer J
55:12 - less than rows j++ now we're going to
55:16 - populate this box array we're going to
55:18 - make it into a 2d array so inside the
55:21 - outer array we need to populate it with
55:25 - empty 1D arrays and then inside this
55:29 - inner loop we're going to create new box
55:33 - objects right inside this box here we
55:36 - need to put in two arguments right which
55:38 - are the X and Y location of the center
55:41 - of the box and as we have already done
55:44 - it it's going to be at this location
55:47 - right
55:49 - so we just fill these in
55:52 - here and then now inside here we also
55:57 - don't need any of this anymore
56:00 - because we already wrote the method
56:06 - display Tada all right so now we have a
56:09 - bunch of boxes we can delete this too
56:12 - next I actually want to tweak the
56:14 - display method a little bit so I'm going
56:17 - to tweak the display function a little
56:19 - bit by putting in a different argument
56:22 - here so instead of just putting size I'm
56:23 - going to do size minus 1/3 of size to
56:27 - give a little bit of a space between
56:29 - each of the boxes and then I want to put
56:32 - in two more arguments actually we can do
56:36 - three up to you but let's just do two
56:39 - which is the rotate function right I'm
56:41 - going to do rotate X and rotate Y how
56:44 - about that let's just declare the
56:47 - variable X again and have it map to the
56:49 - mouse
56:53 - location then I'm going to put it in
56:58 - here all right so now we have a function
57:02 - that rotates each of the
57:06 - boxes but just be careful so the order
57:10 - of the transformation functions really
57:12 - matter so if you were to put these two
57:14 - functions before
57:17 - translate it does a completely different
57:19 - thing right now we need to figure out
57:22 - how to draw the h letter that you saw
57:24 - that was moving up and down we're going
57:25 - to use a function called text to points
57:27 - to get the outline of the text that we
57:29 - want or the letter H to do that we need
57:32 - to first come here and I'm going to
57:34 - create a new folder I'm going to call it
57:37 - fonts and then you're going to click
57:39 - this Arrow here and you're going to
57:41 - click upload file and this is where
57:43 - you're going to drag and drop your font
57:44 - file in here once your file is uploaded
57:48 - then you want to use a function called
57:52 - preload and this function will allow you
57:55 - to preload the fonts into your program
57:58 - and you also need to create a new
58:00 - variable call font and we're going to
58:02 - set this font to another function called
58:04 - load font and then inside this
58:07 - parentheses this is where you're going
58:08 - to tell your program where your font
58:10 - file is and in my case it's in the
58:12 - folder called fonts and my file is
58:14 - called Roboto db. ttf so that's exactly
58:18 - what I'm going to put in and you need
58:19 - the quotation mark here you're going to
58:22 - put in funds back slash robo
58:25 - to- bold.ttf
58:30 - all right and then you want to click
58:32 - play just to make sure that there is no
58:34 - error for my there's none now we're
58:36 - going to use a function called text to
58:37 - points to get an array of points that
58:40 - outline the text that we want so let's
58:42 - declare a few variables the first one is
58:44 - how about MSG for message and I'm going
58:47 - to set that to the letter H then I'm
58:50 - going to create an array called points
58:53 - and this is where I'm going to keep the
58:54 - array of of points that is returned from
58:56 - the text to points function and then
58:59 - three more that I want to declare one is
59:03 - font
59:04 - X font Y and then font size and these
59:09 - are I'm going to set this to 400 and
59:12 - these are the X and Y location of the
59:15 - bounding box of the text and it's the
59:18 - bottom left corner of that bounding box
59:20 - and then font size is the size of the
59:22 - font so let's set this to zero and zero
59:26 - first and then we can adust
59:28 - accordingly all right and then we're
59:30 - going to set points to the text to
59:33 - points function but we need to put in
59:35 - font which is this variable here Dot and
59:39 - then text two points and then inside the
59:42 - text to points function you are required
59:44 - to put in three arguments so the text
59:47 - that you want the array of points and
59:50 - then the X and Y coordinates of the
59:52 - bottom left corner of the bounding box
59:53 - so we have it at as font X and font Y
59:57 - and the fourth and the fifth are
59:59 - optional but we're going to put in the
60:00 - fourth which is the font
60:03 - size okay now if you click play nothing
60:07 - happens because we haven't used any data
60:09 - within the points array yet so how about
60:12 - we come to the draw function here and
60:15 - then let's use a for Loop to go through
60:18 - the points
60:22 - array and I want to draw
60:25 - ellipse on all of the points that makes
60:28 - up the letter H so points of I dox and
60:32 - point of I doy and then let's set it to
60:36 - the size of 10 and how about we fill it
60:39 - the color
60:41 - red okay actually let's stop it from
60:44 - moving for
60:51 - now okay go back to sketch because we
60:55 - put font X and font Y at 0a 0 that's why
60:59 - the letter is at the top right corner
61:01 - right so we want to move it how about we
61:04 - move it a little bit to the left let's
61:06 - do how about
61:09 - 120 um that looks pretty good maybe 130
61:12 - 130 and then let's move it down so down
61:16 - for the Y AIS is positive right so how
61:19 - about
61:20 - 100 a little bit
61:23 - more
61:25 - maybe a little bit more that looks
61:27 - pretty good but we don't actually want
61:29 - to draw out all the points here right we
61:31 - don't want these red ellipses what we
61:33 - want is that we want our cubes to have
61:35 - the shape of the letter H all we need to
61:37 - do is that we need to find the distance
61:39 - between each of the cubes each of the
61:41 - location X and Y of the cubes to the
61:45 - points that are along this shape here
61:48 - and if it's is at a specific distance
61:51 - then we say that hey that is part of the
61:53 - H outline so what we're going to do is
61:56 - we're going to come here I'm going to
61:58 - comment all of this out inside this
62:00 - nested 4 Loop we actually need one more
62:03 - Loop so we're going to go
62:07 - through actually it's going to be K
62:09 - now and this K is going to go through
62:13 - from k equal to Zer to k equals to
62:15 - points. length so the length of the
62:17 - points
62:22 - array and I'm going to declare a new
62:25 - variable called distance here and
62:28 - distance is going to be a calculation
62:31 - between the distance of
62:34 - the what the points right points of K
62:40 - dox and points of
62:43 - K doy and the boxes right boxes
62:49 - X and
62:53 - boxes
62:55 - Y and this function here called This D
62:59 - is a built-in function within p5js that
63:02 - calculates the distance between two
63:03 - points and it takes in a total four
63:05 - arguments so two XY coordinates which we
63:08 - have given here then we want to say if
63:13 - this Den is less than let's do 10 then
63:18 - we want to set boxes of I and J dot is
63:23 - letter which we not created in the class
63:25 - yet so we're going to do that next to
63:28 - true so if the distance between the
63:31 - outline and the box is less than a
63:34 - specific amount in this case 10 then
63:36 - we're going to say that it is a letter
63:38 - it's part of the letter and else then
63:40 - boxes of I and J is letter is going to
63:45 - be
63:46 - false all right so now we're going to go
63:49 - back to box. JS and we're going to
63:52 - create a new actually we don't don't
63:54 - need this we just say this dot is letter
63:58 - and we're going to start it as false
64:00 - right and then in display now let's
64:05 - click play to make sure there's no
64:06 - errors there's none all right so in
64:08 - display what we're going to do is that
64:11 - we're going to write a conditional
64:12 - statement that says if this do is letter
64:16 - is true then let's fill it with the
64:19 - color how about blue and else then fill
64:23 - it at as
64:27 - white and something's wrong what I did
64:32 - wrong is that I put in this additional
64:35 - conditional statement so I guess it's
64:38 - because there are some points that we go
64:40 - through within this third inner loop
64:42 - second inner loop right that there's a
64:44 - point where the distance will not be
64:46 - less than 10 so it just reset the boxes
64:50 - of I and J do is letter to fall so we
64:52 - don't want that so if there is only just
64:55 - one point that has the distance of less
64:58 - than 10 already then set it to true so
65:01 - if we do this then we got something here
65:05 - all right so I'm going to actually
65:07 - uncomment this out so you can see an
65:10 - outline of this h letter you can see
65:13 - that actually only some of the boxes
65:16 - are blue right but we now can play
65:21 - around with this number here to
65:25 - get the outline that we want so it seems
65:29 - like from here to this point here it
65:32 - just doesn't match it enough that like
65:36 - these boxes will turn blue so you also
65:39 - want to play around with maybe this
65:42 - number here too all right so now it has
65:46 - the letter H that I want so now I'm
65:49 - going to comment this out actually I can
65:51 - just yeah comment it out now let's go
65:53 - back back to box. JS we were able to
65:57 - move the boxes using the rotate function
66:00 - already so we don't actually want to map
66:02 - the X location here right but we want a
66:04 - new variable and let's call it angle and
66:08 - set it equals to zero as the initial
66:11 - value and inside here let's use that as
66:17 - the
66:18 - argument
66:19 - right and then so now what if we just
66:22 - rotate the boxes that are part of the
66:23 - letter H so we just do this do angle
66:27 - plus equals to
66:30 - 1 all right and then we can do the same
66:34 - thing to the rest of the boxes but what
66:36 - if we rotate to in a different
66:40 - direction that looks pretty
66:43 - cool all right the last piece I want to
66:46 - show you is the depth so let's declare a
66:50 - new variable called depth and then I'm
66:52 - going to set it to zero this translate
66:54 - function we only translate in the X and
66:56 - Y Direction right now if I were to give
66:59 - it the third argument which is the Z
67:01 - Direction so if I put it at zero right
67:04 - nothing happens but what if I set the
67:10 - variable Z and map it to 0 to actually
67:14 - Mouse x 0 to with and then 0 to 100 then
67:20 - I'm actually going to comment this out
67:21 - for
67:22 - now let's look at
67:25 - this oh I need to set this
67:30 - here do you see that it's moving in and
67:33 - out right so I'm going to use this third
67:36 - argument here in the translate function
67:39 - to move the letter H to move the cubes
67:41 - that are part of the letter H up and
67:43 - down we don't need this I'm going to
67:46 - uncomment these two and I'm going to use
67:49 - this Z this third argument and I'm going
67:51 - to put this. death and I'm going to say
67:53 - that that if it is part of the letter
67:56 - then this dodeth is going to be equal to
67:59 - what I actually want it to move up and
68:02 - down in an oscillating motion to get the
68:04 - oscillating motion I need to use a
68:06 - simple harmonic motion equation which
68:09 - essentially is the sign or the cosine
68:11 - function so I'm going to set this. depth
68:15 - to be equals to this. Def plus let's do
68:20 - how about sign of and then I'm going to
68:23 - just say to this do angle because this
68:26 - angle is already incrementing by one and
68:28 - instead of doing this do dep equal to
68:30 - this do depth plus something I can just
68:32 - do plus equals right same thing as this
68:36 - we don't need this plus
68:38 - here and let's try
68:43 - this do you see that it's moving up and
68:46 - then it's going down but because the
68:49 - output of the sign function or the
68:51 - cosine function ranges between this 1 to
68:54 - 1 and that's why you can see that this
68:56 - oscillating motion is you can't really
68:58 - see it that much so we can change the
69:00 - amplitude to get a bigger motion so how
69:03 - about we multiplied it by
69:06 - five all right so that is a lot so you
69:10 - can play around with this variable as
69:12 - well to get the image that I had
69:14 - initially I need to change some of the
69:16 - appearance a little bit so here I'm
69:19 - going to change the stroke to White and
69:22 - with a transparency of 100 but if and
69:26 - then we want it to be no fill and then
69:29 - if it is part of a letter then the color
69:33 - will be
69:34 - white and we also want the sketch file
69:39 - here then inside the background we want
69:42 - that blueish color so 0 comma 0a 139
69:46 - let's try
69:49 - this all right this is a great tutorial
69:52 - that combines a lot of different
69:53 - concepts steps including how to draw
69:56 - things in 3D how to use the text points
69:58 - function to get an outline of the text
70:01 - how to map that into the shapes that you
70:03 - want and how to use the sign or the
70:06 - cosine function to get the oscillating
70:07 - motion so I hope that this Sparks a lot
70:10 - of your ideas give this one a try
70:12 - welcome to another coding tutorial and
70:14 - in today's video I'm going to show you
70:15 - how to make these hypnotic
70:18 - [Music]
70:19 - flowers let's start by creating this one
70:22 - Circle first we're going to to draw out
70:24 - a circle using a set of points so I'm
70:27 - going to declare two arrays one called X
70:30 - and one called Y and these are going to
70:33 - be the two arrays that store our X and Y
70:35 - locations of each of the points and then
70:37 - the third variable is going to be called
70:39 - points and these are going to be the
70:41 - number of points that we're going to
70:42 - create to make up a circle so let's
70:44 - start with 10 inside the draw a function
70:47 - I'm going to write a for loop from let I
70:50 - equal to zero I less than the number of
70:53 - points i++ I'm going to use the concept
70:56 - of trigonometry to convert from Polar
70:58 - coordinates to cartisian coordinates and
71:00 - I've made a video that explains this
71:02 - whole concept so if you want to get a
71:03 - better understanding be sure to check
71:05 - that out so essentially we're going to
71:06 - set X to be equals to R * cosine of
71:09 - angle and y to be equals to R * s of
71:14 - angle now we're going to set R to be
71:17 - equals to how about 100 so this is going
71:20 - to be the radius of this circle and we
71:23 - also want to set what angle is going to
71:26 - be we want to set angles to be I / by
71:29 - the number of points * 360 so this is
71:32 - going to allow us to evenly space the
71:35 - points all right let's try
71:38 - that oh see let me so we need to draw
71:43 - something too right so we're going to
71:44 - set each of these points inside the
71:47 - function called vertex so vertex allows
71:49 - us to draw points so this is going to be
71:52 - X of I and Y of I and if you click play
71:57 - right now you don't see anything because
71:59 - to use the vertex function we need to
72:01 - use two additional function called begin
72:04 - shape and in
72:08 - shape right so these two functions tells
72:10 - us that hey we're about to draw a shape
72:12 - using these points these sets of points
72:15 - and then after we draw all of these
72:16 - inside the for Loop then end the shape
72:19 - so let's run so first let's move
72:23 - everything
72:24 - to the center of the canvas so we're
72:27 - going to use the origin point from the
72:28 - top left corner to the Middle Point here
72:31 - so translated to width / two and height
72:34 - ided by
72:36 - two perfect and you see this whole thing
72:40 - that is not a circle and that is because
72:42 - we're using angle between 0° to 360° and
72:46 - that is in the degrees mode so we need
72:48 - to also set the angle mode to
72:52 - decre
72:55 - all right so now two things that I want
72:57 - to tweak one is I want to also
73:02 - set no fill for this and as you can see
73:06 - the first and the last Point are not
73:08 - connected and to connect them we just
73:10 - have to put in an argument called close
73:13 - in the N Shape function all right so as
73:16 - you can see here it's not really a
73:18 - circle right and that is because the
73:20 - number of points that we use right now
73:22 - maybe is too small which is 10 so what
73:25 - if we do
73:27 - 100 that's a better Circle next to make
73:30 - it look like a flower what we're going
73:32 - to do is that we're going to change the
73:34 - radius here right now the radius is set
73:37 - at 100 so we don't want it to be 100
73:39 - throughout this whole circle so what
73:42 - we're going to do is that we're going to
73:44 - add how about we declare this variable
73:46 - as flower
73:50 - radius and we also need a print C's
73:53 - around here and I'm going to copy and
73:56 - paste this for the Y part all right and
73:58 - then let's set flower radius to how
74:03 - about 50 and if we were to run this it
74:07 - just make the circle bigger and that is
74:09 - because the flower radius here has a
74:10 - constant value and that's not what we
74:12 - want we want to vary this value here
74:15 - flower radius in a wavy pattern so what
74:19 - we can do is that we can set this to an
74:22 - array and then inside the for loop we're
74:25 - going to say f underscore Radius = 2 and
74:29 - we're going to use aign or a cosine
74:32 - function to get that wavy pattern how
74:34 - about we set the amplitude to 10 then
74:37 - multiply by let's do how about cosigned
74:40 - and then just do angle it's the same
74:43 - angle as this one here and then let's
74:47 - run what you see here is still just a
74:50 - circle right but actually let me show
74:53 - you
74:56 - something so we're going to set the
74:59 - stroke here
75:00 - to the
75:03 - color
75:07 - red and then this next one I'm going to
75:10 - set it to Black so basically I'm going
75:12 - to show you two sets of circles one with
75:17 - the fcor radius and one
75:19 - without and as you can see here if I
75:22 - were to draw an ellipse
75:24 - at the center of the
75:28 - canvas you can see that our new Circle
75:31 - basically just shift to the right right
75:34 - by adding this fcor radius at a specific
75:38 - cosine function it just move it to the
75:40 - right but it didn't do the flower
75:42 - pattern that we want and that is because
75:44 - we're only just drawing one period so
75:47 - this equation outputs the number between
75:49 - -10 and 10 so what we can do is that
75:51 - what if we set period right and then
75:54 - we'll multiply the period
75:57 - here and right now the period is one so
76:00 - we have the same thing but what if we do
76:02 - two
76:04 - period all right what if we do three so
76:07 - the period is the number of times that
76:09 - we get the value between -1 and 10
76:11 - because right now our amplitude is at 10
76:14 - right so if we just keep increasing this
76:17 - we
76:18 - get a shape that looks more and more
76:21 - like a flower and I also want to set
76:25 - actually fcor M to be 10 so instead of
76:30 - just hard coding this number
76:32 - here all right and then we can change
76:35 - this to what if we do
76:41 - 15 so this is just depends on what you
76:45 - want your flower to look like all right
76:47 - so I'm going to delete these part out
76:50 - and then set this to Black
76:53 - so before we start making a bunch of
76:55 - these flowers let's figure out how to
76:57 - move this one flower so all we have to
77:00 - do actually is add a value here so if we
77:06 - add let's create a new variable let's
77:08 - call this variable how about rotate and
77:12 - rotate starts at
77:17 - zero actually I might not be able to use
77:20 - the word rotate let's just do rod
77:24 - I think it might be okay let's do
77:26 - rotate and then outside of this in shape
77:31 - function we're going to rotate it by a
77:33 - specific speed let's do
77:38 - one all right use this change Val
77:42 - rotate so I think we cannot use the
77:46 - variable called rotate so let's just
77:48 - do r o
77:51 - oh I think I can cannot do rotate
77:56 - because okay I just want to
78:01 - see all right so I could use the
78:03 - variable called rotate and that rotate
78:05 - is going to be the variable that we
78:07 - increment one degree at a time to get
78:09 - this rotation that you see here perfect
78:12 - now we can make a bunch of flowers let's
78:14 - start by creating a class called flower
78:17 - so you come here click a plus sign click
78:19 - create file and then let's call it
78:21 - flower. Js
78:23 - before we start writing a class let's go
78:25 - to
78:26 - index.html and then copy and paste this
78:29 - line of code change the name of this
78:31 - file to whatever the name of the file
78:33 - that you just created in my case flower.
78:35 - JS and this is how you integrate a new
78:38 - Javascript file into your program all
78:40 - right let's go back to flower. JS we're
78:42 - going to start writing a class called
78:44 - flower we're going to have a Constructor
78:46 - function and we're going to have
78:49 - function called display so we can go
78:52 - back to sketch. JS and then we can copy
78:55 - this whole
78:56 - thing up to here all right come to
79:01 - flower. JS and then paste it inside
79:05 - display inside the Constructor function
79:07 - I'm going to declare the
79:10 - X and the Y arrays right and then let's
79:13 - put this X and this y
79:19 - here and then we're going to declare f
79:25 - radius right which begins at zero and
79:30 - and then we're going to have F of amp
79:33 - let's set it to how about 10 so we can
79:36 - do this this. F radius this. F of
79:42 - mamp also this do r or the radius
79:48 - of the circle right actually I'm going
79:53 - to set all of these
79:54 - as arguments or parameters inside the
79:57 - Constructor function so F
80:00 - radius actually this one I don't need F
80:04 - of
80:05 - amp the reason I don't need this is
80:07 - because it's being calculated here and
80:09 - then I also need
80:14 - period which is going to also be the
80:17 - prator here so we'll have R we have F of
80:21 - M and then we have f f period right then
80:26 - for this F of radius we're going to
80:29 - initialize it at
80:31 - zero and then I want to also set one
80:34 - more thing which is the speed here let's
80:37 - do this. speed and that's going to be
80:42 - another parameter also all right so we
80:46 - have X and Y and then R so these are the
80:49 - initial Circle we have these variables
80:52 - for the flowers and then this is also
80:54 - for the flowers and then we have the
80:57 - speed that moves the whole flower all
81:00 - right let's try going back to our
81:04 - sketch. JS actually we can also set
81:08 - points here too so this do point is
81:12 - going to
81:13 - be another parameter so
81:19 - here okay so now if we go back here we
81:23 - can erase all of this all of that
81:27 - actually
81:28 - everything all right and then I'm going
81:30 - to just draw one flower I'm going to
81:32 - call it f and then f is going to be a
81:35 - new
81:36 - flower right then let's go back here so
81:39 - we need what so I'm going to copy and
81:40 - paste
81:43 - this so we need R so let's set R to 100
81:47 - the number of points also 100 the
81:50 - amplitude of the flower we set it to 15
81:52 - period how about seven and then speed
81:55 - let's just do one and then we're going
81:57 - to display the
82:02 - flower okay so we need this do points
82:05 - here this start points here let's try
82:13 - that period
82:17 - okay okay actually I cannot use the word
82:20 - or the variable called rotate so
82:22 - actually let's just use rot how about
82:27 - that and set rot initially to
82:30 - zero R is not
82:33 - defined
82:48 - so okay so now we have an additional
82:52 - variable call this do rot for the
82:54 - rotation of the flower perfect so now
82:58 - flower is moving all right now let's
83:01 - make a bunch of flowers so I'm going to
83:04 - change from F to flowers and it's going
83:06 - to be an array and then I'm going to
83:08 - create another variable called num and
83:11 - this is going to be the number of
83:12 - flowers that we want to create how about
83:14 - we start with this five that sounds like
83:17 - a good number so let I equal to z i less
83:22 - than n
83:23 - i++ so we're going to create a total of
83:26 - five flower objects right so we can just
83:29 - copy and paste
83:30 - this then flowers of I is going to be a
83:34 - new flower object we want the radius to
83:36 - be the same the number of points to be
83:38 - the same 15 is 15 is
83:44 - what amplitude is still okay period can
83:48 - be the same speed can be the same
83:50 - actually the radius should not be the
83:51 - same right because if we give the radius
83:53 - to be the same for all flowers that's
83:55 - the radius of the initial Circle then
83:58 - let's see what's going to
84:07 - happen you just see one Circle that's
84:10 - not what we want what we want is how
84:13 - about we subtract it by I * 10 so each
84:17 - of the other flowers will be or will
84:20 - have smaller and smaller radius
84:23 - that looks good maybe we start with how
84:26 - about 140 so it's a bit
84:29 - bigger okay okay okay all right so now
84:32 - comes the trick which is how do we get
84:35 - that hypnotic look so what we need to do
84:38 - is we come back to flowers and we're
84:42 - going to instead of doing no fill we're
84:45 - going to fill it with the color
84:48 - white nothing happens yet just wait for
84:51 - it so we do no
84:55 - fill H um not no fill I mean no
85:02 - stroke looks like this one flower but
85:06 - now I'm going to use a function called
85:08 - blend
85:10 - mode and the argument that I'm going to
85:13 - give is called difference blend modes is
85:17 - a function that blends the pixels in the
85:18 - display window according to the defined
85:21 - mode and the mode I'm using is called
85:23 - difference and difference subtract
85:25 - colors from the underlying image 2D so
85:28 - we're not going to go into details of
85:30 - this blend mode right now but by using
85:32 - this different mode it gives us that
85:34 - hypnotic look so just be warned what I'm
85:37 - about to run might give you a little bit
85:39 - of a headache so close your eyes for
85:41 - maybe 5 seconds if you don't want to see
85:43 - that 1 2
85:45 - 3 all right and that is because we need
85:49 - to put in two functions push and pop
85:57 - and by putting and push and pop it
85:59 - clears out all of that craziness that
86:03 - you just
86:03 - saw all right so now that we have this
86:07 - I'm going to go back to sketch. JS and a
86:11 - few things that we need to tweak to get
86:13 - the final result so first I want to set
86:16 - my background to
86:18 - Black all right I also want to set the
86:22 - speed instead of a constant one I want
86:25 - to change it to be based on which flower
86:29 - it is so I can do I times maybe a
86:33 - constant of 10 no actually let's just do
86:37 - 0 point let's just do one so as you can
86:41 - see here the biggest flower doesn't move
86:43 - and that is because when I equals z i *
86:46 - 1 is zero so the speed is zero and so it
86:48 - doesn't move so we can change it by do I
86:51 - + 1 and so a the flower actually moves
86:54 - but at a different speed but it's going
86:56 - a little bit too fast to my liking so
86:58 - I'm going to change it to how about
87:02 - 0.1 that's a bit better I like that
87:05 - better I also want to change the number
87:07 - of flowers to
87:10 - 15 and there you go so this is the
87:13 - hypnotic flowers that you saw at the
87:15 - beginning of the video and it looks
87:17 - really neat but before I end this video
87:20 - I want to show you another cool trick so
87:24 - instead of having all the flowers move
87:26 - in the same direction I'm going to write
87:29 - an if statement and I'm going to use an
87:31 - expression called I mod 2 = Z so mod is
87:39 - an expression that checks whether I / by
87:43 - number of
87:44 - two how many remainders is left for
87:47 - example if I is 3 I / 2 has a remainder
87:52 - of one right that means it's an odd
87:54 - number but if I equals to let's say 4 4
87:57 - / 2 is 2 and there's no remainder that
88:02 - means it's an even number so the answer
88:05 - is zero so this expression checks if it
88:09 - is an even number and if it is then
88:12 - we're going to declare flowers the same
88:15 - way that we just did but if not if it's
88:18 - an odd number I want to instead of
88:23 - incrementing the speed in the clockwise
88:26 - Direction I'm going to change it to a
88:29 - counterclockwise Direction and this is
88:33 - what
88:36 - happens looks really cool so this is
88:39 - when you finish a piece and then you
88:41 - just kind of play around with different
88:42 - variables and sometimes you get this
88:44 - unexpected result that is really cool I
88:47 - love this piece because it's using very
88:49 - fundamental concepts of how to convert
88:51 - from Polar corn to cartisian coordinates
88:53 - to draw points and how to use the sign
88:55 - and cosine function to create the wavy
88:57 - pattern of the flowers and when you put
88:59 - these concept together you can create
89:02 - some really cool stuff so give this one
89:04 - a try welcome to another coding tutorial
89:07 - and in today's video will'll be making
89:08 - this generative art piece inspired by
89:11 - the artist Pete
89:14 - mandrian let's start by drawing a
89:16 - rectangle so we can use a function
89:19 - called rect which takes in a total of
89:20 - four arguments the first two are the X
89:22 - and Y coordinates of the top left corner
89:25 - of the rectangle and then the third and
89:26 - the fourth are the width and height so
89:28 - I'm going to draw it at the origin point
89:31 - and then I'm going to give it a width
89:32 - and a height so let's also declare width
89:35 - to be 100 and then height to be I want
89:39 - it to be twice the size of the width so
89:43 - 200 all right and now I also want to
89:46 - draw a line and this line is going to go
89:49 - from the top left corner here to the
89:51 - bottom right corner corner here so the
89:53 - line function takes in a total four
89:55 - arguments the first two are the X and Y
89:57 - coordinates of the first point and then
89:58 - the last two are the X and Y coordinates
90:00 - of the second point and these two points
90:02 - are the points that we're going to
90:03 - connect a line so I want to connect from
90:06 - the top left corner Point here to the
90:08 - bottom right corner Point here so it's
90:11 - going to be from 0 comma 0 and
90:14 - coincidentally it's going to be W comma
90:16 - H all right but actually if we were to
90:20 - move the rectangle to 10 comma 10 here
90:24 - now if we do 10 comma
90:27 - 10 now you see that this line doesn't
90:30 - actually touch the bottom right so what
90:32 - we need is that we need 10 + W and 10 +
90:37 - H because the rec function takes in the
90:40 - first two points and then the width and
90:42 - the height so the width and the height
90:43 - depends on the first two point but the
90:45 - line function takes in the first point
90:48 - and the second point so you need to make
90:50 - sure that you need to set the offset
90:52 - which is the 10 comma 10 here in the
90:55 - third and the fourth argument too now I
90:58 - want to draw a 2X two set of rectangles
91:01 - so I'm going to start by declaring
91:05 - columns and set it to two and then
91:07 - declare rows and set it to two and I'm
91:11 - going to write a nested for
91:20 - Loop
91:22 - now I just need to put this function
91:24 - inside here and then I need to change
91:28 - the first two arguments here it's going
91:30 - to be I * the width and then J * the
91:35 - height same thing as for a line it will
91:38 - be I * W and J * H but then here we also
91:43 - need to do I * W + W and J * H +
91:50 - h
91:52 - perfect so now we figure out how to draw
91:55 - a line that goes from the top left
91:56 - corner to the bottom right now to draw a
91:59 - line that goes from the top right corner
92:02 - to the bottom left all we need to do is
92:04 - let's copy this line of code for the
92:07 - first argument it will be I * w+ W and
92:12 - then J * H and then the third one which
92:16 - is the bottom left will be I * W and
92:19 - then J * H + H so I'm going to comment
92:22 - this one
92:23 - out perfect I'm also now going to set
92:28 - the width to 50 and then the height to
92:31 - 100 and then let's do columns to be
92:33 - eight and then rows to be four but
92:36 - instead of having lines that go in the
92:37 - same direction I want the even rows to
92:40 - have lines that goes from the top left
92:42 - corner to the bottom right corner while
92:45 - the odd rows to have lines that go from
92:47 - the top right corner to the bottom left
92:49 - corner so I need to write conditional
92:51 - statement so
92:53 - if so what should be my condition my
92:56 - condition is going to be J mod 2 = Z so
93:00 - if you're not familiar with this
93:01 - expression this is an expression that's
93:03 - called modulo and how it works is that
93:06 - it takes the first number here divided
93:09 - by the second number and then tells us
93:12 - what is the remainder of this
93:14 - calculation so for example if J which
93:18 - goes between zero and row minus one
93:21 - right if JS is z 0 / 2 is z no
93:26 - remainders so the answer is zero but
93:30 - let's say J = to 3 3 mod 2 or 3 / 2 has
93:35 - a remainder of one so this expression
93:38 - will give us a result of one so this
93:40 - expression here J mod 2al equals 0 is
93:44 - basically calculating whether this
93:46 - number J is an even number or an odd
93:48 - number because whenever you divide
93:50 - something by two if there's no remainder
93:53 - it's an even number and if there is a
93:55 - remainder of one then it's an odd number
93:58 - so this is how we tell whether this row
94:01 - is an even row or an odd row all right
94:03 - so for an even row I want the line to
94:07 - goes from the top left corner to the
94:09 - bottom right
94:10 - corner
94:12 - while if it's odd then I want it to go
94:15 - from the top right corner to the bottom
94:17 - left
94:19 - corner let's try that
94:23 - perfect now I want to put the code that
94:25 - we just wrote for each of the rectangle
94:27 - or a set of lines in a class and let's
94:30 - call that class how about cell.
94:35 - JS and then before we start writing
94:37 - let's go to index.html file then come to
94:41 - this line of code copy and then change
94:44 - the name here to the name of your new
94:46 - file and this is how we integrate a new
94:49 - Javascript file into our program let's
94:51 - go back to cell.
94:53 - JS start by declaring class call cell
94:58 - and then we're going to declare two
95:00 - methods Constructor and
95:04 - display and then I'm going
95:07 - to put this set of code
95:10 - here inside the display
95:14 - function and then instead of Constructor
95:16 - function we will be declaring a total of
95:20 - four parameters
95:22 - X and Y location of the top left corner
95:24 - of each of the cells and then the width
95:26 - and the height and then let's set that
95:34 - accordingly and then the last parameter
95:37 - that we want is row to tell whether it's
95:40 - an odd row or an even
95:43 - row and then inside theplay here instead
95:46 - of J we just put in this do
95:49 - row and then here we need
95:54 - to change all of these arguments right
95:57 - so it's going to be this.x the second
95:59 - one is this
96:01 - doy third is this do X plus this do W
96:07 - and then what is it this.y plus this.h
96:13 - right this is for the case when the row
96:16 - is even and so when the row is odd we
96:20 - want to change it to this.x plus this.w
96:25 - and then comma this.y for the first
96:27 - point and then the second point we don't
96:29 - need this withth
96:30 - here all right let's try this go back to
96:50 - sketch.jpg to comment this inant Loop
96:53 - out and then just do c. display just to
96:57 - make sure that our class works it
97:00 - actually should go from left to right
97:02 - right because we forgot the fifth
97:05 - argument and then we will put zero which
97:07 - is an even number so it went from left
97:11 - to right and then if we put in one it
97:14 - goes from right to left let's create an
97:16 - array called grid and this is going to
97:19 - be a 2d array and and we're going to
97:23 - create a
97:24 - nested for
97:30 - Loop inside the outer loop we need to
97:34 - First populate this empd array with a
97:39 - bunch of empty 1D arrays and then inside
97:44 - here we're going to put new cell objects
97:48 - inside this
97:50 - grid
97:52 - and instead of doing 0 comma 0 here
97:55 - we're going to do I * W comma J * H
97:59 - right and we're not going to put one
98:01 - here we're going to put J because J is
98:04 - telling us which row this cell is on
98:08 - perfect then now let's uncomment
98:12 - this we don't actually need the
98:15 - rectangle anymore now we just do grid of
98:19 - I and J Dot
98:24 - display but what we have here is that we
98:26 - have a bunch of cell objects that fill
98:28 - the entire canvas but what if we only
98:31 - want to fill a part of the canvas let's
98:34 - declare four more variables I'm going to
98:36 - call it starting
98:40 - column ending column and starting row
98:46 - and ending
98:48 - row and then going to copy
98:53 - this then how about we set this to let's
98:57 - do one then ending will be how about
99:01 - four
99:03 - Z and two and then instead of setting
99:09 - columns and rows here right we just need
99:11 - to change the beginning for I here to be
99:15 - starting column and this to be ending
99:18 - column and forj starting row and ending
99:25 - row here and then I'm just going to copy
99:28 - and paste this in our second nested for
99:33 - Loop let's
99:35 - play uhoh What's Happening Here No error
99:39 - but nothing is coming up oh I
99:45 - re declaring these variables and we
99:49 - cannot do that we already declared them
99:50 - here here so I didn't need the let in
99:53 - all of these all right let's
99:55 - run so now we have a set of cells that
99:59 - goes from the variables that we declared
100:02 - here but to make this piece generative
100:05 - we don't want to give it a constant here
100:08 - right we want to randomize these numbers
100:11 - so let's use a random
100:13 - function and the random function can
100:16 - take in arguments in multiple ways so
100:18 - one of the ways is to put in two
100:21 - arguments by putting in two arguments
100:23 - basically it's going to Output a random
100:26 - number a random floating or decimal
100:28 - number between the first and the two
100:31 - arguments but not including the second
100:33 - argument so it's going to go between
100:35 - zero to columns but not including the
100:39 - columns number and because we want to
100:42 - get an integer or a whole number we need
100:46 - to use the function called floor and
100:48 - this is going to turn whatever the
100:50 - output here into an integer and we want
100:53 - to do the same thing for all of
100:58 - these these will be rows
101:01 - instead okay and I'm going to also print
101:05 - these numbers so you can
101:07 - see all
101:09 - right so there is one flaw with what I'm
101:12 - doing right now so the first one is what
101:15 - if the random number is the same number
101:18 - right between the starting and the
101:20 - ending column so as you can see here
101:22 - there's nothing on the screen actually
101:24 - in this case there's another problem so
101:27 - as you can see here the starting row is
101:29 - at three and then the ending row is at
101:31 - two so how is that going to work it it
101:35 - doesn't work we want the starting row or
101:38 - the starting call to be the lower number
101:41 - and then the ending call or the ending
101:43 - row to be the larger number so actually
101:45 - let's fix that one first so I'm going to
101:48 - declare actually for variables let's
101:50 - call it
101:51 - a b
101:54 - c and d and then actually these
101:57 - variables will be the variables where we
101:59 - get the random
102:11 - number and then the starting column will
102:15 - be the minimum number or the lower
102:18 - number between a and b
102:23 - right so we can use the function Comm
102:24 - Min and it's going to return the lower
102:27 - number between the first argument and
102:30 - then the second
102:31 - argument and as you might have guessed
102:34 - for the larger number we can use a
102:37 - function called Max and we have to do
102:41 - that for the variable CND D
102:49 - here all right let's tried
102:55 - this okay so we haven't fixed this
102:58 - problem
103:00 - yet but as you can see the starting
103:03 - number is always lower than the second
103:05 - number
103:08 - now I'm actually going to write a
103:10 - function to do this let's call this
103:14 - function
103:15 - random length
103:19 - generator and it's going to to take in
103:21 - one argument which is the length so in
103:24 - this case it's going to be columns or
103:26 - rows and then let's copy and paste this
103:29 - in
103:32 - here okay so basically we just need the
103:35 - first
103:39 - set and then columns here will be
103:43 - length and we need to declare these two
103:46 - in order to fix a problem where we
103:48 - generate the same numbers we'll be using
103:50 - a loop a while loop specifically a do
103:53 - while loop and a do while loop is
103:55 - similar to a while loop but with a do
103:57 - while loop you execute the commands
103:59 - first and then you check the condition
104:01 - instead of checking the condition first
104:04 - and then you execute the commands so the
104:07 - syntax is
104:09 - do and then do what do the commands
104:13 - which is this right this is the command
104:16 - that we want to
104:17 - do and then
104:19 - while so basically first we want to
104:22 - declare A and B outside of the
104:25 - loop and then we want to
104:28 - execute this expression here where we
104:31 - Generate random numbers but then after
104:34 - we do this then we use the Y Loop to see
104:38 - whether these two numbers are the same
104:40 - or not so we will do a minus B but a
104:44 - minus B can be a negative number so I'm
104:46 - going to use a function called ABS or
104:50 - absolute to turn these numbers into a
104:52 - positive number and then we want to set
104:54 - it equals to zero right while the
104:57 - difference between these two number is
104:59 - equals to zero then keep going through
105:02 - this y Loop until it is no longer equals
105:04 - to zero which means it's not the same
105:06 - number now inside this function we also
105:08 - need to return the starting column and
105:11 - the ending column value right actually
105:14 - instead of doing it this way I'm going
105:16 - to declare a new variable and call it
105:19 - how about range and this range is going
105:22 - to be a vector object and a vector
105:26 - object is an object that can hold two
105:28 - values so I basically just wanted to
105:32 - hold the first one is going to be the
105:35 - starting call Value and then the second
105:36 - one is going to be the ending call Value
105:41 - right and we don't need this anymore
105:43 - then we're going to return the
105:46 - range okay let's come back here let's
105:49 - declare a new variable how about let
105:52 - column range to be equals to the
105:56 - function name is random length
106:01 - gen and then we need to put in columns
106:05 - here right and then we need another one
106:09 - which we'll call row range and then the
106:13 - arguments will be rows you don't need
106:16 - any of this anymore and then now let's
106:19 - print these so it's going to be call
106:22 - range and then we want the first value
106:25 - so we dox and then call range for the
106:28 - second value we doy same thing for row
106:32 - range dox and then row range doy and
106:38 - then before we click run I'm going to
106:40 - comment everything out so it doesn't
106:41 - give us any errors let's try
106:45 - that
106:49 - okay
106:51 - so it seems to be
106:55 - working perfect so now we can uncomment
106:59 - this and then instead of starting call
107:02 - it will
107:03 - be call range dox to car range doy and
107:10 - then row range dox
107:15 - and row range doy then we can just copy
107:19 - this
107:21 - for our second nested
107:26 - Loop let's try
107:32 - this car range is not defined ah because
107:36 - I Define these two variables inside the
107:38 - setup function it's not defined here so
107:42 - basically I just need to Define these
107:45 - two variables outside of the setup and
107:49 - the draw function so it's going to be
107:51 - called range and row
108:03 - range I don't know if you
108:05 - notice
108:07 - but it never goes to the last column or
108:11 - the last
108:13 - row you know
108:16 - why it's because we basically generate
108:19 - between Z and columns minus one right
108:24 - but right now we say hey the four Loop
108:28 - let's go from I equals to whatever that
108:30 - number is the smallest is zero but the
108:33 - largest is columns minus
108:37 - one right but this is less than it's not
108:39 - less than or equals to meaning that it
108:42 - will go from i = 0 to I equal to columns
108:48 - minus 2 so what we need is that we need
108:52 - to we want to add columns plus one here
108:56 - and row plus one
108:59 - here and there you
109:01 - go it goes to the last column and the
109:04 - last row now perfect now we can also set
109:09 - it
109:13 - smaller nice now we can generate one
109:16 - block of these cell objects but I want
109:18 - to generate a bunch of these blocks so
109:21 - what if we put it inside a class so
109:24 - let's do the same thing click create
109:26 - file let's call it block.
109:30 - JS then comes to index.html file again
109:34 - and do the same thing rename this to
109:37 - block all right let's go back to block.
109:40 - JS we're going to create a class called
109:45 - block then we're going to have
109:48 - two methods here which which is
109:50 - Constructor and
109:52 - display so inside the Constructor
109:54 - function what do we need let's go back
109:56 - to sketch. JS we will want this call
110:00 - range and row
110:05 - range let's start with that and then
110:08 - let's do this. call range this. row
110:11 - range and then this will be columns and
110:14 - rows which are Global variables so we
110:16 - don't need this dot random length gen is
110:20 - a function outside here I want it to be
110:24 - inside our class so let's copy this and
110:29 - then let's create a method called random
110:33 - range perfect and then this will be
110:36 - this. random range gen same as this so I
110:41 - have to put this dot here because in
110:42 - order to call a function or a method
110:45 - inside a class you need this
110:48 - dot all right so let's look look at this
110:50 - if there's anything we need to
110:54 - tweak yeah everything should be fine
110:56 - here all right so now for display let's
111:01 - go
111:02 - back we basically want to also create
111:06 - this grid inside our block. JS
111:09 - Constructor function so let's declare
111:11 - how about we call it a block and it's
111:14 - going to be a 2d array and then we're
111:17 - going to have a nested for a loop
111:20 - that goes from this. car range which we
111:23 - have declare
111:26 - here and then this is going to be this.
111:30 - block this. row range here right this is
111:35 - going to be this do block as
111:37 - well and then for the
111:40 - cell we can keep it the same right all
111:43 - of these are Global
111:46 - variables and then we basically need
111:50 - these nested for Loop inside our display
111:53 - function right and what do we want to
111:56 - display we want to call the display
111:59 - function so not to be confused this
112:02 - display function is the display function
112:05 - inside cell here so let's do actually
112:08 - let's do display cell so that it's not
112:14 - confusing because this block of I andj
112:18 - is a cell object and so we're calling
112:20 - display cell which is a method inside
112:23 - the cell object so let's go back to
112:44 - [Music]
112:48 - sketch.jpg
112:52 - run yay all
112:58 - right okay so how about we make multiple
113:01 - of these blocks
113:03 - so let's
113:06 - do blocks is an array and then let's
113:09 - also create num a new variable to
113:12 - indicate the number of blocks that we
113:14 - want to create and then now we're going
113:16 - to write a for Loop that goes from Zer
113:20 - to
113:22 - num now we're going to declare new block
113:25 - objects inside our blocks
113:29 - array and then we also need this for
113:32 - Loop to call the display
113:40 - function
113:43 - perfect okay now you can see that some
113:47 - of these width of each of the block
113:49 - blocks are kind of small these ones are
113:52 - two
113:53 - right this is one for aesthetic reasons
113:56 - you can change it you don't have to but
113:59 - I want to change it so basically inside
114:02 - the random length gen function instead
114:04 - of setting this conditional statement to
114:07 - be equals equals to zero I want it to be
114:11 - if it's less than let's do how about
114:13 - four so I want the width to be at least
114:18 - three
114:20 - so now you get a
114:23 - bigger Block in general so now let's
114:26 - work with the colors so I said that this
114:29 - piece is inspired by Pete mandrian
114:32 - because he has a very signature color
114:35 - which includes yellow blue red white and
114:38 - black and I have created those color
114:41 - palette already so let's declare a
114:44 - variable
114:45 - colors and colors is going to be the set
114:49 - set of arrays so it has a total of four
114:54 - colors here because I'm not including
114:57 - black and then inside the
115:02 - block object here I want to put in one
115:06 - extra argument C for
115:09 - color and then inside the display
115:12 - function let's do
115:14 - stroke set that to this do c go back to
115:19 - sketch. JS so if we were to put in let's
115:22 - do how about we do red
115:26 - first now everything turns red so we
115:29 - want to be able to call all of these
115:33 - colors based on the number of blocks
115:35 - that we have here so I want to show you
115:37 - one thing we can use a modulo
115:40 - function so let's do how about I comment
115:46 - this out first and let's do colors
115:48 - equals to
115:52 - a b and c if I do for let I equal z i
116:00 - less than let's do how about 10 I ++ so
116:03 - I want to print a total of 10 characters
116:05 - so let's do print and I want to loop
116:08 - around this colors array so what I would
116:12 - do is what if I just do colors of ey
116:15 - would that work let's try
116:17 - it so you can see here that the first
116:21 - three are printed and then the last
116:25 - seven are
116:26 - undefined so for us to be able to Loop
116:29 - through this array over and over again
116:32 - we can use a modulo function how do we
116:35 - do that so if we do I mod and then the
116:39 - length of this array so colors. length
116:44 - then we click
116:46 - run what do you see here we have total
116:50 - of 10 characters from ABC ABC ABC and
116:54 - then a and that is because we can Loop
116:57 - through the index values by using this
117:01 - expression so what is happening here is
117:04 - I goes from zero to 10 right so when Z
117:08 - divided by the length the length is
117:10 - three we get a remainder of zero right
117:13 - when 1 divided by 3 we get a remainder
117:15 - of one two we get a remainder of two but
117:19 - then when it comes back to three three
117:21 - mod 3 has no remainder so the index goes
117:24 - back to zero and so on right four mod 3
117:28 - is 1 so it goes from 0 1 2 0 1 2 012 and
117:32 - so on and so on and so on so in order
117:34 - for us to be able to Loop through an
117:36 - array like this without getting an error
117:39 - like we saw earlier all we need to do is
117:42 - using the mod function here so that's
117:44 - what I'm going to do with the colors so
117:47 - I'm going to do colors of I
117:52 - mod colors.
117:57 - length and we don't need these
117:59 - characters we actually want the
118:05 - colors and there you
118:10 - go and we also how about not set a
118:14 - constant five number of blocks what if
118:17 - we do num to be equals
118:21 - to also a random number and I want it to
118:26 - be randomized between three to six not
118:29 - including six so it's going to be
118:30 - between three four or
118:36 - five we only have a few things left the
118:40 - first thing is let's go back to block.
118:45 - JS I also want the stroke weight to be
118:49 - be thicker I want it to be
118:54 - three yeah all right and with the pet
118:58 - mandrian kind of aesthetic each of his
119:00 - rectangles usually have a black border
119:03 - so to imitate that I'm going to set a
119:08 - conditional statement and this
119:10 - conditional statement is going to say if
119:14 - if what so if the columns is equals to
119:18 - this Dot call range.
119:22 - X
119:23 - or I is equals to this do calls range do
119:30 - y has to be minus one right which is the
119:33 - last one then I want to set
119:40 - stroke as
119:43 - black else stroke can be the
119:48 - color
119:52 - Tada that looks pretty
119:54 - good all right and then the last thing I
119:56 - want to do is I want to go back to
119:59 - sketch. JS and I actually just want to
120:01 - add a grid of cells that fill the entire
120:06 - canvas that we had at the beginning so
120:09 - let's just redo that
120:12 - grid and then we need a nested for a
120:18 - loop
120:29 - grid of I equals to Mt arrays and then
120:34 - grid of I and J will
120:37 - be the cells right so from I * W J * h w
120:46 - h and then J for the rows right then we
120:50 - can copy and paste this and we want it
120:52 - to be I want it to be underneath these
120:55 - blocks so I'm going to put it before
120:57 - this four
120:59 - Loop and then
121:01 - do
121:09 - display oh display
121:12 - cell all right and then I don't want
121:16 - these to be black although this looks
121:18 - kind of nice two let's do stroke to be
121:22 - how about let's do white and I want
121:24 - stroke weight to be a lot thinner at
121:30 - 0.5
121:33 - nice all right so this is my take on
121:37 - generative piece inspired by Pete
121:39 - mandrian hopefully this gives you an
121:41 - idea of how to create a generative piece
121:43 - using a random function so create your
121:45 - own version and share it with us give it
121:47 - a try