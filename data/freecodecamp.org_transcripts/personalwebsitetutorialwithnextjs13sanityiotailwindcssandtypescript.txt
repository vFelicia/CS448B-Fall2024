00:00 - in this course you will learn the
00:01 - process of building your very own
00:04 - personal website using a powerful Tech
00:07 - stack you'll learn how to create a
00:08 - stunning front end with nexjs13 manage
00:11 - content on the back end efficiently with
00:13 - sanity.io and leverage the benefits of
00:16 - Tailwind CSS for styling and typescript
00:19 - for type safety by the end of this
00:22 - comprehensive tutorial you'll have a
00:25 - fully deployed functional personal
00:27 - website that you can proudly showcase
00:30 - and continue to build upon kapehe
00:33 - teaches this course she is a senior
00:35 - developer Relations Specialist at
00:37 - sanity.io this course was made possible
00:40 - in part thanks to a grant from sanity
00:43 - Aloha everyone my name is kapehe you can
00:46 - call me cap short so I'm super excited
00:48 - for today's tutorial we are going to be
00:50 - building our very own personal websites
00:52 - so we'll have a list of projects a nice
00:54 - way for others to contact you and more
00:57 - so our personal website will be built
00:59 - with nexjs sanity.io Tailwind CSS and
01:03 - typescript so you will need a basic
01:05 - understanding of JavaScript react how to
01:08 - use the terminal and a general coding
01:10 - knowledge
01:12 - so what is next.js next JS is a flexible
01:15 - react framework that gives you building
01:16 - blocks to create fast web applications
01:19 - so you can check out their website you
01:22 - can click on start learning to kind of
01:25 - get a basic understanding of it we will
01:27 - be going over all the basic steps to get
01:30 - started as well but we can also Deploy
01:33 - on versus and today we will be deploying
01:35 - on Purcell so if you want to learn more
01:37 - about that on your own you can
01:39 - definitely visit the website
01:42 - next we will be having sanity.io manage
01:46 - our content back-end it has a real-time
01:48 - data store supporting apis for assets
01:50 - user management and the sanity studio so
01:53 - we will be embedding our own sanity
01:55 - Studio into our next JS app so we'll all
01:58 - be very seamless
01:59 - now to get started with sanity.io go to
02:02 - sanity.io click on start building and
02:05 - you will need to create your own login
02:07 - so definitely go ahead and go and do
02:10 - that now we will be using sanity schemas
02:12 - today so this is the docs page for the
02:15 - sanity schemas we'll be using a variety
02:18 - of these and this will be able to let us
02:20 - set up our Studios so we'll be using
02:22 - image string URL I highly recommend
02:25 - going into these schemas and learning
02:27 - more about what they can do for us and
02:30 - what things are required in our code for
02:32 - schemas but we will be using a lot of
02:35 - schemas today so definitely go and set
02:37 - up your own account
02:39 - now for everyone watching today
02:40 - YouTubers do get a boosted free plan
02:42 - everything we'll be doing today with
02:44 - sanity is going to be in that free plan
02:46 - but to get that boosted free plan visit
02:49 - sanity.io YouTube You're Going to click
02:52 - on the get started button right here now
02:55 - what does this plan include here's the
02:57 - list of things that are doubled 200 000
03:00 - API requests plus more so definitely
03:02 - head to sanity.io YouTube to get your
03:05 - own boosted free plan with sanity
03:08 - what is Tailwind CSS it is going to be
03:11 - the CSS framework that we will be using
03:14 - it is a utility first CSS framework
03:17 - filled with these various classes and
03:19 - you'll see us typing these out
03:20 - throughout the tutorial so definitely go
03:22 - ahead get started if you'd like to learn
03:24 - more about it but we will be going
03:25 - through all this installation together
03:29 - and lastly we will be using typescript
03:31 - it's a programming language that builds
03:33 - on JavaScript that strongly uses types
03:35 - it helps with things like errors and
03:37 - autocomplete so if you aren't familiar
03:40 - with job or with typescript but you're
03:41 - familiar with JavaScript it won't be too
03:43 - different in your eyes but we will again
03:46 - walk through all this together
03:48 - now that we know what we need to get
03:50 - started and the different types of
03:53 - um technologies that we will be using
03:54 - today let me show you exactly what our
03:57 - finished project is going to look like
03:59 - okay so here's what our finished project
04:01 - will look like we'll have our navbar our
04:04 - header and our list of projects that we
04:05 - map over
04:06 - so we'll have our header and then maybe
04:08 - a little description that we have
04:09 - underneath about ourselves what we do
04:11 - maybe where we work and then within
04:14 - projects we will list our various
04:17 - projects
04:19 - so for this one I have only one listed
04:21 - but once we add them they'll just come
04:22 - into a grid each one is clickable and it
04:25 - takes us to a specific page for that
04:27 - project
04:29 - here's a little description
04:31 - explaining what the project is and maybe
04:34 - how you built it why you built it
04:37 - and then up here if we click on view
04:40 - project it will take you directly to the
04:42 - project itself and then you can
04:45 - view the project
04:46 - people can click around for this one
04:49 - it's a YouTube video now this will take
04:51 - us back to the home page
04:53 - now these two are coming directly from
04:55 - sanity and we created a Pages section so
04:59 - one of the pages we created was a
05:01 - contact page and it will you can just
05:04 - have different information about
05:05 - yourself an email maybe a Twitter handle
05:08 - but this will be our contact page and
05:12 - then again you can name these whatever
05:13 - you want you can have any content you
05:15 - want on these
05:16 - this is all coming from the sanity
05:18 - Studio
05:19 - and then the photo gallery this is one I
05:22 - picked and we could just have a bunch of
05:24 - wacky pictures like oh that go here and
05:27 - maybe we took maybe there's a
05:29 - photographer a photographer so yeah this
05:31 - is what our final project will look like
05:33 - and this is built with next.js version
05:35 - 13 and Sandy sanity.io the V3 version of
05:39 - the studio
05:41 - we will also be using typescript and we
05:43 - will be using Tailwind CSS for styling
05:46 - and the really cool thing about this
05:48 - project is that because we will be using
05:51 - sanity V3 Studio
05:53 - we can drop it right into the next
05:55 - project embed the entire thing so this
05:58 - will all be in one GitHub repo and it'll
06:00 - be really nice to maintain since
06:02 - everything's located together on one URL
06:06 - next up we're going to start with our
06:08 - next JS app we're going to create it
06:10 - right now and to do that I'll jump over
06:12 - to my terminal
06:14 - and I'm going to type in the command
06:17 - to create a brand new Next application
06:20 - and that's going to be npx create Dash
06:23 - next Dash app and we're going to make
06:26 - sure we put at latest
06:28 - and once I hit enter there we're going
06:30 - to see a nice walkthrough
06:33 - so I'm going to say yes let's install
06:35 - this package and we're going to name our
06:38 - project next sanity you can name it
06:41 - whatever you'd like I probably shouldn't
06:43 - have named it next Dash sanity because
06:45 - it is the same name as the sanity
06:47 - Library we're about to use but oh well
06:50 - would you like to use typescript we are
06:52 - going to use typescript it will help
06:53 - with a little bit of autocomplete help
06:55 - us find errors and generally really
06:57 - helpful to have in a project so yes
07:00 - would we like to use eslint this will
07:02 - help us catch some error so click yes
07:05 - for eslint
07:06 - would we like to use a source directory
07:09 - this kind of a personal preference if
07:10 - you use the source directory everything
07:12 - gets thrown into a source directory and
07:14 - everything will just live under there
07:16 - so you'll have your app directory inside
07:17 - of that
07:18 - for us we're just going to stick with
07:20 - the default for no so that our project
07:22 - will actually use the app directory
07:25 - so the app directory is a next 13 thing
07:29 - so we'll click no here and here we go
07:31 - this is a fun one would you like to use
07:33 - experimental app directory which is
07:35 - brand new
07:37 - we are going to say yes so press right
07:40 - and you can click yes right here and
07:45 - we're going to hit enter
07:47 - and then what import Alias would you
07:49 - like to configure we're going to stick
07:51 - with the default here and just press
07:52 - enter all right
07:54 - so that is going
07:58 - doing its thing
08:02 - all right so we have a brand new Next
08:04 - js13 application with the new app folder
08:07 - so this is actually a great introduction
08:10 - to next 13's app folder so if you
08:12 - haven't used the app folder
08:14 - this video will walk you through how to
08:17 - use it
08:20 - a lot of different changes that are
08:22 - happening if you're coming over from the
08:23 - pages folder as you may already know in
08:25 - next app so at the recording of this
08:28 - video the app folder is still in beta
08:31 - that might change by the time you watch
08:33 - this but just be sure to go check out
08:35 - the docs to see if the app folder is
08:37 - still in beta
08:41 - all right so we have our app inside of
08:44 - next Dash sanity it's going to go we're
08:46 - going to use CD to get into our app
08:49 - let's do npm run Dev here just get our
08:53 - project up and running and
08:55 - it's going
08:58 - and here we go
09:00 - so we have compiled over at localhost
09:03 - 3000 we're going to get back to the
09:05 - browser and refresh and there we go
09:07 - next.js13 look at that brand new landing
09:10 - page super cool I really like the Styles
09:13 - here and that's going to set us up for
09:15 - the rest of this tutorial
09:17 - okay so now that we have our next JS app
09:19 - up and running we'll just leave this for
09:21 - a second so we can set up our content
09:23 - back in using sanity
09:25 - so we're going to go back to our
09:26 - terminal and we'll open up a new
09:28 - terminal
09:29 - we'll leave that one running
09:32 - so let's go back because we don't want
09:35 - to create this within our next project
09:37 - so here we're going to create our sanity
09:40 - project to do that
09:42 - run the command npm create sanity at
09:45 - latest
09:47 - and we want to make sure we do the at
09:48 - latest so we get the latest version of
09:50 - sanity and this will be using the V3
09:52 - version of the studio which is
09:54 - definitely what we want to use create
09:56 - new project hit enter now your project
09:59 - name we can name this anything we want
10:00 - but I'll just match it up with our next
10:02 - project and we'll do next sanity Studio
10:06 - again you can name this anything you
10:08 - want hit enter select organization to
10:12 - attach it to I'm going to click none for
10:13 - this so hit enter
10:15 - default data set do y for yes and hit
10:18 - enter
10:22 - we definitely want to use a production
10:23 - data set for this it's so it's creating
10:25 - that for us does that path look correct
10:27 - it does we're going to hit enter
10:30 - now there are different templates that
10:32 - we can choose from some have schemas
10:34 - with sample data some have just schemas
10:36 - but we want to arrow down to the clean
10:38 - project with no predefined schemas and
10:41 - hit enter we do want it to be just a
10:43 - blank slate for us
10:45 - do we want to use typescript yes so why
10:47 - and then enter
10:49 - and package manager npm so hit enter on
10:52 - that
10:53 - and it is creating our sanity studio for
10:56 - us
10:57 - so once this is done it will live at
10:59 - localhost 3333
11:02 - and we are creating this in a different
11:03 - folder completely different from our
11:05 - next app but we will soon be embedding
11:08 - this project into that next app but we
11:11 - will do that in a second
11:14 - so I'm going to CD into next sanity
11:17 - Studio because that's what we named it
11:19 - hit enter and
11:23 - we're just going to run it so npm run
11:27 - Dev to get the sanity Studio running at
11:30 - localhost 3333
11:33 - let it do that for us and it's going
11:40 - perfect so now it's running locally
11:43 - at localhost 3333 we're going to open
11:45 - that up
11:47 - we're going to log in
11:52 - and we have
11:54 - our project up and running
11:57 - perfect
11:59 - so I just want to pause here for a
12:00 - second and kind of talk about the studio
12:02 - so the studio is a web app that is
12:04 - written in react right now we are
12:06 - running it locally on our computer where
12:09 - we can edit it and customize it
12:10 - currently we are looking at the desk
12:12 - tool of the studio
12:15 - so the studio is connected to a
12:16 - real-time hosted content link there is
12:19 - no local content so what you do get
12:21 - synced automatically to the said content
12:23 - link
12:24 - so we can deploy the studio to the web
12:26 - once we think it's ready to use and once
12:28 - we have our updates we won't be
12:30 - deploying this separate from the next
12:32 - app because we are embedding it so once
12:34 - it's deployed
12:36 - with our next app we will have the
12:38 - online version to work with content you
12:41 - can invite others and collaborate and
12:42 - all that good stuff
12:44 - so at the end of this video we will
12:46 - deploy our next app
12:47 - and because it's embedded
12:49 - that will automatically deploy the
12:51 - sanity Studio as well
12:53 - so let's go back to our terminal and
12:55 - let's actually open it up in vs code
13:00 - so we're going to I'm going to do the
13:01 - shortcut code space period
13:03 - so here's our project let me get it back
13:05 - up and running npm run Dev
13:10 - so now that it's still running at
13:12 - localhost 333
13:14 - I just want to point out a couple of
13:16 - things this again is where you could do
13:19 - a lot of your schema building
13:21 - we'll talk about schemas more in just a
13:23 - second you can do your schema building
13:25 - you could configure your entire sanity
13:27 - project here but again we will be doing
13:29 - all of that in our next app folder I
13:32 - just want to show you kind of what it
13:33 - looks like out of the box here
13:35 - so the sanity config file is a really
13:37 - important one for us to note
13:40 - so this project ID is what we will be
13:43 - taking over to our next project so that
13:46 - it knows what sanity project to look at
13:48 - and which data set to pull from
13:51 - so these two the project ID and data set
13:54 - are very important to note
13:57 - so once you have your sanity project up
13:59 - and running definitely go to that sanity
14:01 - config file and find out what your
14:03 - project ID and data set are those don't
14:06 - need to be kept private because none of
14:07 - you have access to this so unless you
14:09 - have been granted access or invited
14:11 - through a sanity manage dashboard you
14:15 - can't actually get into it so you don't
14:16 - really need to keep this private
14:19 - Okay so
14:20 - here's our schemas folder in here
14:23 - we could be listing out different
14:24 - schemas but because we're going to be
14:26 - embedding we will not do that here right
14:28 - now but this is where we kind of tell
14:30 - our studio what to look like what fields
14:32 - to have
14:33 - but I want to talk about the content
14:36 - like
14:39 - so all of this content lives in a cloud
14:41 - we call this Cloud the content link and
14:44 - all this happens within data sets so a
14:47 - data set is a collection of Json
14:48 - documents that can be of different types
14:50 - and have references to each other
14:52 - as we start adding schemas and inputting
14:55 - content we will be able to see the raw
14:57 - Json of our data
14:59 - so we are going to actually go to
15:03 - our manage
15:05 - manage.sanity.io dashboard
15:10 - in that studio we just made is this top
15:12 - one so we're going to do next sanity
15:14 - Studio click on that and I just want to
15:16 - show this off for a quick second so
15:17 - notice that project ID that lives here
15:20 - this is where I can invite project
15:22 - members like I was saying earlier
15:25 - so if I wanted one of you to collaborate
15:27 - with me on this project I would click
15:29 - there put in your email address send the
15:31 - invite and then whatever role I want you
15:34 - to have
15:36 - I want to also point out API
15:39 - so right now our data is only allowed to
15:41 - be viewed at localhost 3333
15:46 - once we start embedding this into our
15:48 - next app we will need to add localhost
15:50 - 33 or localhost 3000 and once we deploy
15:54 - this we will need to add our URL
15:57 - that we used in the deployed version so
16:01 - we would do add course origin put in
16:03 - that URL allow credentials and then save
16:06 - so right now
16:09 - we can actually add in localhost 3000
16:12 - allow credentials save that so now when
16:16 - we embed this right away our next app
16:18 - will be able to see the entire data set
16:20 - for this project and all data that goes
16:22 - with it
16:23 - now we have our project and our sanity
16:26 - files
16:29 - so to query for our content we are going
16:31 - to be using grok when you use sanity you
16:34 - can use either grok or graphql but for
16:36 - this video we are going to be using grok
16:38 - and we'll look into what that is and how
16:40 - to use it and what kind of queries we'll
16:42 - grab what particular data but this
16:45 - Vision plugin is our playground kind of
16:48 - for this particular Studio
16:51 - so we can write our query in here click
16:53 - Fetch and it will show us exactly what
16:55 - content we would get back with that
16:57 - query so
16:59 - sanity's open source query language it
17:02 - lets you query any collection of Json
17:03 - documents and filter them down to
17:05 - exactly what you need by their
17:07 - properties and their value it also lets
17:09 - you reshape and reform that data using
17:12 - projections and functions we're going to
17:14 - be using grok to query for all of our
17:16 - data today so you'll definitely have a
17:18 - handle on grok by the end of this video
17:21 - so using the vision plugin it lets us
17:23 - query for our content for this specific
17:25 - data set in this studio
17:28 - and that is getting our sanity project
17:30 - up and running so right now we have our
17:32 - content back in already we don't want to
17:35 - stay in this vs code
17:37 - and in this folder for any more of our
17:39 - sanity project
17:41 - we want to actually embed this entire
17:44 - sanity project into our next app
17:47 - so we'll do all the code over there so
17:49 - the next thing we're going to do I'm
17:51 - going to actually stop this server and
17:52 - make sure it's not running anymore
17:56 - and we are going to move on to embedding
17:59 - our sanity Studio into our next app
18:03 - all right this is the moment we've been
18:06 - waiting for so we're finally going to
18:08 - get our sanity Studio which we have
18:11 - separate right now and we're going to
18:13 - embed that right into our next JS
18:15 - project So currently we have two
18:18 - separate folders We have neck sanity we
18:20 - have next sanity Studio
18:22 - that we're going to get rid of this next
18:24 - sanity studio and just drop it right
18:26 - into next.js
18:28 - and we're going to have one single repo
18:30 - for both next JS and Sanity so let's get
18:33 - started
18:35 - we are currently in the vs code project
18:37 - for next sanity studio so this is a
18:40 - sanity Studios project
18:42 - there was only one thing we need out of
18:43 - this project and that's going to be
18:44 - right here in the sanity.config.ts
18:49 - we need the project ID so I'm going to
18:51 - copy that and then we'll go over to the
18:53 - vs code project for the next JS app and
18:57 - will only work in there for the rest of
18:58 - this video
19:00 - so I'm going to go ahead go ahead and
19:02 - close this vs code project and here I
19:05 - have my terminal I'm going to actually
19:06 - close this out let's cancel this
19:10 - I'm going to open up this folder in code
19:12 - and here we have the nexjs project in vs
19:16 - code
19:17 - and the one thing I'm going to do next
19:18 - is go into my terminal and then make
19:21 - sure I do npm run Dev since we closed it
19:23 - out in the other terminal
19:26 - and now that is running I'm just going
19:28 - to go ahead and close the terminal there
19:29 - and now we are ready to roll use Ctrl
19:32 - tilde to open and close that so first up
19:34 - let's take a tour of the next 13 in this
19:36 - new app folder this might look a little
19:39 - different for some of you if you're
19:40 - coming from the pages folder and overall
19:42 - things are pretty close to the way they
19:44 - were but there are a couple of different
19:46 - conventions that were changed as far as
19:48 - routing file names and where we're going
19:51 - to place things
19:54 - so let's take a look at the home page
19:55 - for our next app I'm going to actually
19:58 - close out this terminal here we only
20:01 - need vs code and the browser
20:03 - I'll go over to my browser
20:06 - and let's go to the next JS app which is
20:08 - localhost 3000
20:11 - this homepage right here is under app
20:13 - slash page dot TSX
20:16 - and that's similar to how it was before
20:17 - with Pages slash
20:19 - index.tsx but let's jump back over
20:23 - and here in page.tsx this is our home
20:26 - page
20:27 - everything you just saw is all right
20:29 - here in our react.jsx now I want to show
20:32 - you a little bit about the routing let's
20:34 - say I wanted to create an about page
20:36 - Well normally you would go into the
20:39 - pages folder you'd go a new file and
20:42 - you'd go about dot TSX
20:45 - and that would be a route but now you're
20:47 - going to have to do about is the folder
20:50 - name slash page dot TSX
20:54 - so now you have a folder called about
20:55 - and then page is the actual contents or
20:59 - the react component for that page
21:02 - and you might be wondering well that's
21:03 - kind of interesting because now there's
21:05 - a little bit of more files that I have
21:07 - to create the benefit here is you can do
21:09 - multiple files underneath this about
21:12 - page or this about folder about route
21:15 - whatever you want to call it and it can
21:17 - apply to just this route
21:20 - and what I mean by that is let's see
21:22 - let's say we have this page let's do a
21:24 - page right here let's do the about page
21:27 - return about page
21:30 - and I'll save that
21:34 - and we'll go back over to this let's go
21:38 - to slash about
21:40 - and
21:42 - that's our about page
21:44 - so this actually brings us a couple of
21:46 - benefits since we can Nest our routes
21:49 - so this is the about page and then let's
21:52 - say we want to do a new file under here
21:54 - which is actually let's create a folder
21:57 - page dot TSX
22:01 - so now which when we have a slash Cape
22:04 - is going to be our routing but the
22:06 - benefit to this setup right here is that
22:08 - you'll notice under the app folder
22:11 - there's a layout.tsx which is actually
22:13 - the layout for our entire application
22:16 - so I can create a layout also inside of
22:19 - about layout dot TSX and that layout is
22:23 - going to Nest inside of that layout and
22:26 - then apply to all of these child routes
22:28 - so there's a lot of really cool things
22:30 - that you can do with new fault this new
22:32 - folder structure and nested routing and
22:34 - nested layouts are actually a lot easier
22:36 - than the new way of doing doing things
22:39 - now this just scratches the surface of
22:42 - what you can do with routing but overall
22:43 - what you need to know at this point is
22:46 - that a folder is going to correspond to
22:47 - the URL and then page.tsx inside of that
22:51 - will be actually the component that is
22:53 - rendered for that route
22:55 - and the same thing goes with the dynamic
22:57 - routes that were used before
22:59 - and I'll show you how those work as well
23:01 - for now let's delete this about folder
23:04 - and let's get back into it
23:09 - okay so what we'll be doing next is
23:11 - actually embedding the sanity studio
23:13 - right into a route that we'll Define
23:16 - right inside of this app folder so first
23:19 - things first let's go ahead and install
23:21 - some things I'm going to stop my
23:23 - terminal
23:24 - let's clear this out and I'm going to
23:26 - say npm install sanity which is the main
23:29 - sanity package that we're going to need
23:31 - and next Dash sanity is the library that
23:34 - we will need not to be confused with the
23:36 - name of our project I definitely should
23:38 - have named the same thing oops sorry
23:40 - everyone but that's where a lot of the
23:42 - magic is going to come from so all right
23:45 - we have those packages installed how do
23:47 - we start using them we are going to
23:49 - let's first start our Dev server again
23:52 - so let's close that out
23:55 - let's go to our sidebar and what we're
23:58 - going to do right inside the root of our
24:00 - project
24:01 - we're going to create a new file and
24:03 - we're going to call it
24:05 - sanity.config.ts and this is where we're
24:08 - going to Define all the things for our
24:10 - sanity project
24:11 - and a lot of this is going to come from
24:13 - what we did before when we ran npm
24:15 - create sanity
24:19 - now the way we're going to set this file
24:21 - up is we are going to Define
24:23 - config
24:27 - from sanity so import that
24:30 - and then we are going to use that Define
24:32 - config function to const config is equal
24:36 - to Define config and we're going to pass
24:38 - out an object and then we're going to
24:40 - export default config
24:44 - next up we are going to pass in a couple
24:46 - of things that are needed by sanity like
24:48 - project ID
24:49 - this is a thing we're going to copy over
24:51 - from the other project that we just
24:52 - created
24:54 - we're going to have our data set
24:58 - and that's going to be production
25:00 - and this would be cool if you had
25:02 - multiple data sets that you created and
25:03 - maybe one for development one for
25:05 - production
25:07 - we'll have title uh let's go for my
25:11 - personal website
25:14 - the API version is going to be
25:17 - today's date which is 2023-0-3-04
25:25 - cool and when you create this you can
25:27 - just go ahead and use the current date I
25:29 - know some apis are going to ask you to
25:30 - do a specific date but if you just use
25:32 - the current date sanity will know what
25:34 - to use
25:35 - now this is going to be an important one
25:38 - base path
25:40 - this is going to be the URL for where we
25:42 - want our sanity Studio to live
25:45 - so if you have a website and you wanted
25:48 - to have people edit content at slash
25:50 - admin then we're going to do slash admin
25:53 - right here
25:55 - if you want to call anything you want
25:56 - you can write that in right here like
25:58 - slash Studio
25:59 - and then you can create the route for it
26:01 - inside of our app folder
26:05 - all right so the next thing we need to
26:07 - do is plugins and we're going to bring
26:10 - in a plugin called the desk tool
26:13 - that comes from sanity we're going to go
26:16 - up to the top here and import that
26:17 - import desk tool from sanity desk the
26:24 - desk tool is a top level view within the
26:26 - sanity Studio we need this plugin to
26:29 - view our studio at all so definitely
26:32 - make sure you have this plugin
26:38 - next up let's go ahead and embed the
26:40 - sanity studio right into next.js
26:43 - so I'm going to open up my sidebar go
26:45 - into the app folder and we want
26:47 - everything at slash admin to go to our
26:50 - studio
26:53 - so we'll be using a catch-all route so
26:55 - that anything you type in after slash
26:57 - admin actually gets sent to one route
26:59 - and the way we used to do that in the
27:01 - pages folder was with the little square
27:04 - brackets in our route file name
27:06 - and here we're going to do the exact
27:08 - same thing so we're going to say slash
27:10 - admin and this is where we're going to
27:13 - use the double brackets dot dot dot
27:15 - index
27:17 - slash page dot TSX and that's kind of
27:20 - like a wild card so it says all routes
27:23 - under admin are going to go to this
27:24 - page.tsx
27:27 - now we're going to use the next sanity
27:30 - package here and I highly encourage you
27:32 - to go to the next Dash sanity
27:35 - GitHub for it and actually look through
27:38 - the installation instructions and what
27:40 - you can do with this package
27:43 - I'm going to just walk you through it
27:45 - setting it up I highly encourage you to
27:47 - always go read the docs
27:49 - so let's close that back up head on back
27:51 - to our vs code and we're going to say
27:53 - export default function admin page
27:58 - and we're going to return and check this
28:01 - out we're going to say next Studio
28:03 - which is a component that comes from the
28:05 - next sanity package
28:07 - and we're going to say config is equal
28:09 - to that config that we just created
28:12 - and just like that that's it that's all
28:14 - it takes for us to drop in the sanity
28:16 - Studio into a nexjs app in with the
28:19 - config file
28:21 - and the page.tsx for the admin route and
28:23 - there's a couple more things you need to
28:25 - add after this but this is really the
28:26 - gist of it so let's do our Imports real
28:28 - quick
28:29 - import next Studio from next sanity
28:33 - Studio
28:37 - let's go ahead and import our config
28:39 - so you can do the import from
28:42 - dot dot dot since there's a couple
28:45 - folders up I'm going to go down here to
28:46 - this config at the end of the word and
28:48 - type in control spacebar
28:50 - and we'll just let vs code do the import
28:51 - for us it's going to click down click
28:54 - enter and notice how next is actually
28:57 - using the at as an alias for the root of
29:00 - our project so you can actually just do
29:01 - the at sanity config super awesome
29:05 - all right those are all looking good now
29:09 - there's one thing left we need to do
29:10 - that's actually a really specific thing
29:12 - to next 13. next 13 by default will
29:15 - actually render all of our Pages under
29:17 - the app folder from the server
29:20 - so everything gets rendered on the
29:22 - server and as little as possible from as
29:25 - little as possible JavaScript is sent to
29:26 - our client
29:28 - compare this to the pages folder way of
29:30 - doing things where a lot of that
29:31 - rendering would happen on the client
29:33 - side next 13 actually tries to move all
29:36 - that over to the server side so that
29:39 - it's faster and we ship less less
29:40 - JavaScript to the client
29:42 - but since the sanity Studio
29:45 - is going to be rendered on the client
29:46 - side of things we actually have to say
29:49 - use client at the top of this file
29:52 - and that's a way to signal to next.js
29:55 - hey this component don't try to render
29:56 - on the server render it in the browser
29:59 - on the client
30:02 - all right so let's go check this out
30:04 - we're back on the home page we're going
30:06 - to go to slash admin right here
30:08 - and this should load up the sanity
30:10 - studio right inside of next Js
30:14 - let's see if it works
30:17 - all right so
30:20 - here we go we have the sanity Studio
30:21 - it's doing the whole thing it's asking
30:23 - for our login make sure you log in with
30:25 - the correct credentials that you've been
30:26 - using I'll click Google and check it out
30:29 - we have the sanity Studio embedded right
30:31 - into slash admin and this is our next JS
30:33 - app all we had to do was npm run Dev
30:36 - inside of our next app and we got the
30:38 - next app running and the sanity Studio
30:40 - running so this is great everything
30:42 - lives at one URL and it will be way more
30:46 - seamless for any users or clients or
30:48 - customers or whoever that are using our
30:49 - site to go to slash admin create content
30:52 - they log in right there and start
30:54 - editing
30:55 - next up we are going to actually get
30:57 - some stuff into the studio we have no
30:59 - document types we need to do that and we
31:01 - are going to create document types and
31:03 - schemas
31:04 - and we will show you how to do that and
31:07 - this is looking great
31:09 - all right now we have our sanity Studio
31:12 - dropped into our next.js app but this
31:14 - isn't real useful for us because we have
31:16 - no document types so there's not really
31:19 - content for us to edit or create the
31:21 - next step here is to add our content
31:23 - types and as we spoke about earlier
31:26 - we're going to have a project type so we
31:28 - can show off all of our cool projects
31:30 - we're building
31:31 - and then after that we're going to talk
31:33 - about the pages type so to start us off
31:35 - let's add a project type I'm going to go
31:39 - back into my editor here and let's close
31:42 - out our folders
31:46 - all right so where we Define our scheme
31:47 - is going I'm going to create a new
31:49 - folder called sanity and then inside of
31:52 - this we're going to create a new folder
31:53 - called schemas
31:55 - and then I'm going to do project Dash
31:59 - schema dot TSX
32:03 - and personally I like to put that Dash
32:05 - schema at the end of it you can leave it
32:06 - off if you'd like but for me it helps
32:08 - because soon you'll have a project type
32:10 - file
32:11 - you'll have a project schema file
32:14 - and you'll probably have a route for
32:15 - projects as well so this helps kind of
32:18 - know where you're at
32:19 - all right let's start this off
32:22 - so we're going to Define our project as
32:24 - a project is equal to I'm going to go
32:27 - ahead and Define this object
32:30 - which is going to Define our sanity
32:31 - schema so we're going to say name is
32:34 - Project we're going to say title is
32:37 - projects and the convention here is I
32:40 - like naming title as plural and name as
32:42 - singular
32:43 - and this is what's going to show up in
32:45 - our studio the title so that's why it's
32:48 - capitalized also and this is how we're
32:49 - going to query for each of our schema
32:51 - types so I'm going to say type is
32:54 - document so each one will have name
32:55 - title type
32:57 - this is a document type name project
33:00 - next up we're going to define the fields
33:02 - of this project so I'm going to type in
33:04 - a Fields array
33:06 - and we're going to insert a bunch of
33:08 - objects and each one is going to
33:09 - correspond to a field inside this schema
33:13 - so the first one let's do name is name
33:16 - and we'll have name title type
33:18 - and title is going to what going to be
33:20 - what shows in the studio so we're going
33:21 - to do capital name
33:23 - and let's go for type is string
33:29 - the next one let's do name is Slug title
33:33 - is Slug
33:35 - slug
33:37 - and then type is going to be you might
33:41 - think this is going to be a string but
33:43 - it's actually actually going to be a
33:45 - type slug
33:46 - so sanity has a built-in slug type and
33:49 - we're going to say options
33:53 - source
33:54 - is name so it's actually going to Define
33:57 - Itself by grabbing the information from
33:58 - the name field pretty handy
34:01 - and we can always com customize this
34:03 - later but by default it's just going to
34:04 - grab what's in the name and slugify it
34:06 - so that we can use it
34:10 - the next one is going to be image so I
34:12 - will do name is image name title type
34:16 - again title is going to be image with
34:18 - the capital because it's for the studio
34:21 - type is going to be image type and
34:24 - Sanity has a bunch of these schema types
34:26 - built in you can go check out the docs
34:27 - for which ones you need to use the ones
34:30 - that we're using here are going to be
34:32 - the most most common ones you'll you'll
34:34 - use so we'll keep going from here
34:37 - options this is a cool feature that
34:39 - sanity provides we have hotspot is equal
34:41 - to true
34:43 - and this means that in our studio we can
34:45 - actually zoom in pick a certain section
34:47 - of the image that will always show up
34:49 - and I'll show you what that looks like
34:51 - it's super fun
34:52 - and then fields are object
34:56 - for image is actually going to have its
34:57 - own Fields array and we're going to say
34:59 - name is Alt always good to have an alt
35:03 - title alt o and this has to be an object
35:08 - and the type is a string
35:14 - so now we have an image field that has
35:16 - its own fields for Alt
35:20 - all right let's we've got
35:22 - some left let's go for name is going to
35:25 - be URL
35:27 - title is going to be URL again name
35:29 - title type and this is going to be the
35:32 - URL that we point people to for a
35:34 - certain project that we have on our
35:36 - personal website type is going to be URL
35:40 - all right the next one
35:42 - and the final one right now is going to
35:44 - be the name is content
35:47 - we need to actually talk about the
35:49 - project itself so title is going to be
35:51 - content type is going to be array
35:54 - and this is going to be an interesting
35:55 - one because it's not going to be a
35:57 - string as you might think that this
35:59 - should be
36:01 - so it's going to be an array type so of
36:04 - type block
36:07 - and this is sanity's way to do Rich Text
36:09 - we call it block content and we are
36:11 - using what we call portable text what
36:13 - you need to know is that basically if
36:15 - you do type block then you're going to
36:17 - be able to do headings
36:19 - and bolds and all the good like wysiwyg
36:21 - type stuff you're going to get that
36:23 - right into your sanity Studio
36:27 - the last step in this is we need to
36:29 - export this object export default
36:32 - and I believe we call it project
36:36 - all right so we've created our project
36:38 - schema now let's go ahead and drop this
36:40 - into our sanity config so we can show
36:43 - the schema type in our studio
36:46 - I'll go into
36:48 - sanity.config.ts and underneath plugins
36:50 - I'm going to say schema
36:53 - and this will be an object we're going
36:55 - to say types is going to be an array and
36:58 - in this array I'm going to do project
36:59 - right here
37:01 - and notice this we're getting this red
37:03 - squiggly we'll have to import it to do
37:05 - that do control spacebar and we can
37:07 - import here from the sanity schemas
37:09 - project schema
37:11 - and there we go
37:12 - we get import at the top thank you vs
37:14 - code all right so let's go check out our
37:17 - studio there it is already reloaded
37:20 - thanks to next and here is the project
37:24 - and there we go we can just start
37:25 - writing in here creating new projects
37:27 - but I have one last thing I want to do
37:29 - before we close up this section
37:32 - so I want to do a little bit of
37:34 - refactoring and organization here
37:37 - right now we're importing our project
37:39 - here and as we start getting more
37:41 - schemas this is going to be a lot of
37:43 - stuff that we're importing so I want to
37:45 - clean this up
37:46 - let's go make a barrel file and put all
37:48 - of these schemas into one file one thing
37:51 - so I'm going to write some Wishful
37:53 - coding here
37:54 - let's say this would be schemas
37:57 - and this array would come from import
38:00 - schemas from
38:02 - sanity schemas
38:05 - and that's ideally what we want to see
38:07 - here so I'm going to go ahead and delete
38:09 - that and let's go make this Barrel file
38:11 - that we just wrote out
38:13 - so I'll go to sanity schemas and then
38:16 - inside of this folder we'll create a new
38:18 - index.ts
38:21 - and this file we're going to import
38:22 - project from
38:25 - project Dash schema
38:28 - and we're going to say const schemas is
38:31 - equal to an array with project in it and
38:35 - then we're going to export default
38:36 - schemas
38:39 - and this is really just an
38:41 - organizational thing so we have
38:42 - everything inside of this one file so as
38:45 - we build out more schemas we just import
38:47 - it here and we don't have to adjust our
38:49 - config because it always comes from that
38:53 - index.ts file so now all of our schemas
38:57 - are defined inside of the index.ts and
39:00 - we just work in the schemas folder when
39:01 - we want to add new ones
39:05 - all right next up let's go ahead and
39:08 - create some projects and then show those
39:10 - projects right on our home page of our
39:12 - website
39:13 - I'm going to go back into my sanity
39:15 - Studio let's click this new button right
39:17 - here
39:18 - and check this out we have this whole
39:20 - studio just dropped into next JS I'm
39:23 - going to go ahead and in my name I'm
39:25 - just going to put a test one here let's
39:27 - do test and for slug I'm going to click
39:30 - generate over here and it actually pulls
39:32 - from the name like we told it to
39:34 - image and ALT I'll leave blank for now
39:37 - URL I'll leave blank for now and for
39:40 - Content I'm going to say my first
39:42 - project
39:45 - and we're going to go ahead and click
39:47 - publish down here
39:53 - all right so let's go ahead and create
39:55 - another one just we have a couple to
39:57 - work with I'll say second test
40:00 - and we'll generate this slug
40:03 - and then down here under content I'll
40:07 - say I'll click bold
40:10 - second test
40:12 - so my second test and we'll go ahead and
40:16 - click publish here so there's a little
40:18 - bit of bold and that and now we have two
40:20 - documents four projects that we can go
40:22 - in and use inside of our application so
40:25 - I'll go back to our vs code
40:28 - let's close everything out close all
40:30 - editors let's close all of our folders
40:32 - and let's start from here
40:36 - so the way I want to do this is I want
40:38 - to go into the sanity folder and I want
40:40 - to create a new file we're going to call
40:43 - it sanity Dash
40:45 - utils.ts
40:47 - and inside of this file we're going to
40:48 - put all the functions that we're going
40:50 - to use to go grab data
40:54 - for is for instance Let's do an export
40:56 - async function called get projects
41:01 - and this is where we're going to use our
41:03 - query language called grok to go ahead
41:05 - and grab those projects that we just
41:07 - created
41:08 - so let's go ahead and write that in
41:13 - I'm going to do one const client is
41:16 - equal to create client
41:19 - and we're going to pass in a config here
41:21 - and this is so that we can use the next
41:23 - sanity package to create a client that
41:26 - can read from our content like
41:28 - so we'll pass in an object here for our
41:30 - config
41:31 - and our config is going to look like
41:34 - something similar to what we had in our
41:36 - sanity.config but it's going to be just
41:38 - a little different
41:40 - so this client that we're about to
41:41 - create is all going to do all it's going
41:44 - to do is read from our content the
41:45 - config that we had in sanity.config was
41:47 - more to generate our sanity Studio
41:51 - so only a few things from here are
41:53 - necessary like we're not going to need
41:55 - plugins we're not going to need schema
41:56 - we're not going to need base path so
41:59 - let's go ahead and grab all of these
42:00 - right here I'll copy those
42:02 - and let's drop them into this right here
42:07 - now we're showing a red squiggly for
42:09 - create clients we need to import create
42:11 - client control spacebar and we're going
42:13 - to add this from next sanity and you'll
42:16 - see the import at the top there
42:19 - and it looks like the title is also not
42:20 - necessary so let's go ahead and delete
42:22 - that
42:25 - all right now that we have our client
42:27 - created we can go ahead and read data
42:29 - from our studio
42:31 - next up we are going to take this client
42:33 - and we are going to do a fetch
42:39 - so this is where we're going to write
42:40 - our grok query if you haven't used grok
42:43 - before just type along with me and I'll
42:45 - explain these as we go through
42:48 - we're going to write out grok and this
42:50 - is going to be the function that we're
42:52 - going to use to create our query so
42:54 - let's go ahead and import this up here
42:56 - I'm going to do grock
42:58 - and that also comes from the next sanity
43:00 - package
43:02 - all right so here let's create our graph
43:04 - query so type along I'll explain we're
43:07 - going to start with an asterisk that
43:08 - grabs everything in our data set and
43:11 - then here we're going to Define this is
43:13 - going to filter down what we want to
43:15 - query for and then open up a projection
43:17 - and that's the curly brackets
43:20 - and we will Define exactly what we want
43:22 - to pull out of here so first up we want
43:24 - the type
43:26 - to equal project so it's going to put
43:28 - all of our projects and it's going to
43:30 - say hey Brock grab those projects that
43:33 - we just created and it's going to be
43:34 - looking for multiple projects and we
43:36 - want to grab the ID out of it we want to
43:40 - grab the created at
43:43 - and then let's do all the things we had
43:44 - in there
43:46 - we're going to have name
43:48 - we're gonna have slug but slug is gonna
43:50 - be a special case because we had a
43:52 - schema type of slug
43:54 - this one was a string this is a slag we
43:57 - have to do like this Slug and slug dot
44:00 - currents we're naming sub.current to be
44:01 - just slug from now on so we're like
44:03 - renaming it
44:06 - so
44:08 - that is that we have the ID created name
44:11 - slug is slug.current
44:13 - image is also a special case since the
44:16 - image type is going to give us image dot
44:18 - asset
44:20 - so it's going to pull in the URL out of
44:22 - that so the URL here is what we're going
44:24 - to display on our front end so the
44:25 - image.asset and then reference down to
44:28 - the URL and that is going to be named
44:30 - image
44:31 - URL is a string as a URL schema type so
44:33 - we can bring that out we have content
44:37 - and that is it
44:38 - so we're going to grab all of that and
44:40 - we're going to go grab
44:41 - all of our projects
44:44 - and we haven't actually returned
44:46 - anything so we're going to do a return
44:47 - right here and that should be able to
44:49 - give us our data so we can use it on the
44:52 - home page and show all of our projects
44:54 - there and this was queried using grok
44:58 - all right so that looks good right there
45:00 - let's go ahead and use this on our home
45:03 - page
45:04 - I'm going to go into app
45:06 - let's go into
45:08 - page.tsx and this is our homepage let's
45:11 - go ahead and just wipe this all out so
45:13 - I'm going to do command shift p to open
45:15 - up my vs code command palette and I'm
45:17 - going to type outward this is just a
45:19 - little trick
45:20 - you can do if you want I'll press enter
45:22 - and it highlights everything inside of
45:23 - that and I'll delete all of that
45:29 - and we're going to write out my projects
45:31 - go here
45:33 - so now we have the starting foundation
45:35 - for our home page let's go ahead and
45:37 - remove the Styles and enter from our
45:41 - custom fonts there we don't need all of
45:42 - that above there
45:44 - and now this is our home page so we're
45:47 - starting out pretty much from scratch so
45:49 - let's go get those projects and show
45:51 - them here
45:52 - the first step here is we are going to
45:54 - import get projects
45:59 - from and I'm going to use that Alias at
46:02 - next jss up for at sanity slash
46:06 - sanity Dash utils
46:09 - the next thing we're going to do is
46:11 - changing up a little bit from next 12 to
46:13 - next 13. so what you would normally do
46:15 - if you wanted your data to be fetched on
46:17 - the server side and shown to your react
46:20 - component on a page you would normally
46:23 - do this
46:24 - you would do export function get static
46:27 - props
46:31 - and then if you had a page that had
46:32 - multiple paths like a dynamic route you
46:35 - would also have to do export function
46:37 - get static paths
46:40 - now in my experience this has been a
46:42 - little bit harder to wrap my head around
46:43 - because you have to get static paths
46:45 - which returns a very specific array of
46:47 - how next.js
46:49 - does things and once it's formatted then
46:51 - it gets static props it's going to
46:52 - return props and that's going to be an
46:55 - array or something like that
46:58 - and you would have to return props which
47:01 - is going to be an object and let's say
47:02 - you have projects in there and that
47:04 - would be an array so very specific way
47:07 - of doing things but now
47:09 - in next 13 you can get rid of all of
47:11 - these and check this out we can just do
47:15 - get projects cons projects is equal to a
47:18 - weight get projects so right inside the
47:22 - function itself
47:23 - in our is uh our react component we have
47:26 - projects await get projects and we have
47:28 - to make sure this is an async function
47:30 - since we are using a weight but look how
47:33 - much easier that is to manage because
47:34 - now it kind of makes sense we just get
47:36 - projects and we're going to map over the
47:39 - projects here
47:40 - now the trick in next 13 all these Pages
47:43 - under the app folder are by default
47:45 - server side rendered so since that's the
47:48 - case all of this is happening on the
47:49 - server side and then it's splitting out
47:52 - all it's fitting all the projects
47:54 - rendered right here so I'm going to do
47:56 - this projects.map
47:59 - project
48:01 - and then we'll do a div and I'm going to
48:04 - do key is Project dot ID
48:09 - and then let's just go ahead and show
48:12 - out the project name
48:13 - so project.name
48:17 - and you'll see a typescript error here
48:19 - saying that the project is any we're
48:21 - going to fix that when we create our
48:22 - types but for now let's just make sure
48:23 - we show these projects on our site
48:27 - so I'll go back to the home page which
48:30 - is just localhost 3000
48:34 - and there we go
48:36 - so we have tests and we have second
48:38 - tests we are showing our project so we
48:40 - had from sanity in this video don't
48:43 - worry we're going to make these Styles a
48:45 - lot better looking than what it looks
48:47 - like right here remember the final
48:49 - project you saw earlier but right now
48:51 - let's just celebrate we have our data
48:52 - and we're able to show it and next.js is
48:55 - rendering this on the server so this is
48:57 - really really cool stuff if I go back to
48:59 - the studio let's go ahead and create a
49:01 - new project let's call it
49:04 - we'll stay with test so third test and
49:08 - we'll generate the slug here
49:10 - let's go down to Content
49:14 - I am
49:16 - the third test
49:19 - and we'll click publish document was
49:21 - published let's go see if we see that on
49:23 - our website
49:24 - refresh and there we go so third test as
49:29 - soon as we refresh the page it shows up
49:31 - and we were able to go get that new data
49:33 - and show it
49:35 - all right this is really cool stuff you
49:36 - can start to see how the flow works from
49:38 - having our studio content grabbing it
49:40 - and showing it in the next app and it's
49:43 - all embedded It's all under one URL
49:47 - all right if we look at our page.tsx
49:49 - notice this typescript error right here
49:51 - if I hover it
49:53 - project any parameter project implicity
49:56 - has in any type
49:58 - all right let's give it a little bit
50:00 - more of a con a little more of a context
50:02 - so that vs code can give us some
50:04 - intellisense some typescript features
50:05 - like helping us give
50:07 - us what properties are inside of a
50:09 - project type
50:10 - and this is going to help us out when
50:12 - we're working across our project because
50:13 - now we get smart intellisense and things
50:15 - are just going to be easier to find
50:18 - errors
50:19 - all right to do this we're going to
50:21 - create a type for our project so this is
50:23 - all typescript stuff so let's start
50:25 - cleaning things out I'm going to close
50:27 - all my files right here
50:29 - close this out
50:31 - so I can config all right so let's go
50:34 - ahead and create a new folder inside of
50:35 - here I'm going to say a new folder I'm
50:38 - going to call it types
50:40 - and then inside of here I'm going to
50:42 - create a new file project.ts
50:47 - and inside of this I'm going to export
50:51 - type project
50:53 - is equal to and we're going to do
50:55 - everything that we have from our schema
50:57 - we're going to say ID is a string
50:59 - created at and since it starts with an
51:02 - underscore that's kind of saying that
51:04 - sanity created this themselves remember
51:06 - we didn't create this that's not
51:07 - something we had to generate it kind of
51:09 - automatically comes generated for us
51:11 - that's awesome
51:13 - um that's going to be a date and then
51:15 - the ones that we generate ourselves that
51:17 - we generate ourselves we're going to
51:18 - Define name String slug is string image
51:23 - it's going to come back as a string URL
51:25 - is going to be a string so we're giving
51:27 - them types
51:29 - and now this one's going to be an
51:31 - interesting One content it might you
51:33 - might think it's going to be a string
51:34 - but the way that sanity returns it since
51:36 - we want to want Rich Text like bold
51:40 - we want images inside of our content we
51:42 - want
51:43 - links below block quotes we want good
51:45 - stuff like that it's not going to do it
51:47 - if we just say string
51:49 - so we're actually going to use what is
51:50 - called portable text block and it's
51:54 - going to be an array of portable text
51:55 - blocks and that's how sanity stores Rich
51:58 - content
52:00 - um and it's a thing called portable text
52:03 - so I'm going to import that you can see
52:05 - a little green thing right here I've
52:06 - been doing control spacebar to show the
52:09 - autocomplete but I can also click this
52:12 - add import from sanity nice thanks vs
52:16 - code
52:16 - and there we go to the top imported from
52:19 - sanity is going to be enough to create
52:21 - our project type for typescript
52:23 - all right now how do we use this thing
52:26 - if I go back to page.tsx it still shows
52:29 - an error there are a couple of different
52:31 - ways you could do it right here you can
52:33 - say project
52:35 - and then we have to import this project
52:37 - I'll click on the little green light
52:39 - bulb add import so that's one way to do
52:43 - it so now whenever we're typing in
52:45 - things are here and I say project Dot it
52:48 - will show check it out ID content image
52:52 - name slug URL and also tells me the type
52:55 - so I'll do name right here
52:58 - so
53:00 - that's one way to do it another way to
53:02 - do it is take this typescript type right
53:06 - here remove it from there and then do it
53:08 - right here and say project is going to
53:10 - be an array of objects or an array of
53:13 - projects sorry like that and we get the
53:15 - same autocomplete we see that this
53:17 - parameter is a project type but
53:19 - personally we will have to write a lot
53:21 - of code if we use this get projects
53:24 - um in different files so I don't like
53:26 - doing it right inside of each file where
53:28 - we call the get projects function
53:30 - so let's go all the way to the source
53:32 - sanity utils get projects right here
53:36 - we're going to say the return is going
53:38 - to be a promise and it's going to return
53:40 - project
53:41 - and an array of them
53:45 - so now let's go over here we'll do
53:47 - import from types project and just like
53:50 - that since we're doing it inside of our
53:51 - call where we say get projects now
53:55 - anywhere that uses get projects like in
53:57 - here
53:58 - get projects we hover and it's going to
54:01 - return a promise that gives an array of
54:04 - projects so now
54:06 - if we go over this it knows hey this is
54:08 - an array of projects and then down here
54:11 - it also knows that this is a single
54:13 - project since we're mapping over them
54:15 - so I think this is a great way to do it
54:17 - you keep all of your types and Sanity
54:19 - utils and then your main react
54:21 - components they don't really show types
54:22 - but they are typed which is really nice
54:25 - and we can delete this import now
54:28 - so that's how we're going to add types
54:30 - to our projects and use it in our
54:32 - utility functions
54:35 - next up let's start making our project
54:37 - look good it doesn't look the greatest
54:39 - right now if I go back to my browser
54:41 - it's just this thing right here let's
54:42 - make this look a little bit better so
54:45 - we're going to bring in Tailwind CSS and
54:47 - Tailwind is a CSS framework that helps
54:50 - us build websites out really quickly
54:52 - was kind of taking the entire Dev
54:54 - ecosystem by storm so if you haven't
54:57 - used Tailwind I'm going to walk you
54:58 - through how to style our website and if
55:00 - you have used telwyn let's start
55:02 - building out this cool looking website
55:06 - so here I am on Tailwind cs's homepage
55:08 - I'm going to click get started and under
55:11 - framework guides is where we want to go
55:13 - and next.js is going to be the first
55:15 - option
55:18 - we're going to go ahead and just follow
55:20 - the instructions they did a great job
55:22 - with these docs let's see and PX create
55:24 - next app we already have our next app
55:27 - and next is install Tailwind this is
55:30 - where we are going to start
55:33 - so we will copy all of this right here
55:34 - I'll go back to my vs code open up my
55:37 - terminal using control tilde
55:40 - open up new terminal and let's do this
55:43 - right in here so
55:47 - all right that is step one that's good
55:49 - let's go and create our Tailwind config
55:52 - file
55:53 - copy that
55:56 - back to vs code
55:59 - paste that in
56:02 - and we have a brand new tailwind.config
56:05 - in a brand new post CSS dot config
56:09 - down here we are going to configure our
56:11 - template path so that Tailwind can
56:13 - actually look at our templates
56:15 - and only give us the CSS needed for the
56:19 - classes that we use
56:20 - so it keeps our bundle size really
56:22 - really small
56:24 - and really the one we want to get here
56:26 - is the app folder one right here since
56:28 - that's where our stuff is going to live
56:30 - and maybe if you're using components you
56:32 - can use that
56:33 - or if you want you can just grab it all
56:35 - and throw it into your Tailwind
56:36 - config.js
56:41 - all right and I'm going to replace this
56:43 - entire content right here
56:46 - there we go and then I'll go back to the
56:49 - docs add the Tailwind directives to your
56:52 - CSS so we're going to take all this and
56:55 - put this inside of globals.css
56:58 - and I believe that's the last step until
56:59 - we can actually just start writing out
57:01 - Tailwind in our files
57:03 - so let's go back
57:06 - I'm going to open up globals.css
57:11 - under app globals and there's a bunch of
57:14 - stuff in here that next.js has already
57:16 - put in so I'm going to go ahead and
57:18 - delete it all and put in these three
57:20 - lines and that's all we need to get our
57:22 - Styles going
57:25 - another thing I notice is Page dot
57:27 - module that came with default next
57:30 - um
57:31 - with next we don't need that so let's
57:33 - delete that
57:35 - all right let's close everything here
57:37 - let's close our folder structure
57:41 - so let's start from a good place and
57:42 - let's go into our terminal
57:44 - I'm going to close that and let's
57:46 - actually restart our our Dev server so
57:49 - npm run Dev it's always a good idea
57:52 - whenever we build a new build tools like
57:55 - that
57:56 - so now I'm going to open up once this is
58:00 - done I'm going to open up
58:03 - page.tsx
58:05 - and let's
58:07 - let's write out some class names
58:09 - so class name is equal to BG red 500 so
58:12 - background
58:14 - not 50 500.
58:17 - and back over here to our next JS app
58:20 - refresh and there we go we have Tailwind
58:23 - ready to go inside of our app and now we
58:26 - can start styling out our home page
58:30 - so let's do this real quick let's delete
58:33 - that class name is equal to that and the
58:36 - things I'm going to need here I'm going
58:37 - to need a div
58:40 - let's do
58:41 - class name right here
58:43 - let's make sure we have a Max width so
58:48 - maybe with 5xl and MX Auto so that
58:51 - centers everything we're doing here
58:53 - then let's create a hero section we're
58:55 - going to say an H1 and then
59:00 - I'm going to say Hello I'm
59:03 - hey close that H1
59:07 - and next is going to use es link eslint
59:11 - to tell us hey we want this to be an
59:12 - entity so we'll do this with the a pause
59:15 - semicolon thing and we'll replace that
59:18 - so we can make make next.js happy
59:22 - perfect
59:25 - it's looking good all right so let's get
59:28 - some styles on our H1 so class name
59:31 - right here is equal to text 7xl and font
59:35 - extra bold
59:37 - let's take a look at that save it there
59:40 - we go that looks good
59:42 - let me zoom out a bit for now all right
59:44 - cool
59:46 - so another thing we can do we can do
59:48 - padding
59:49 - y of maybe 20 and get some spacing on
59:53 - the top and bottom top and bottom and
59:55 - then a fun effect I want to do I'm going
59:56 - to wrap this in a span
59:58 - so I'll put a span right there
60:01 - and I'm going to say class name let's
60:03 - give this a gradient this I think is a
60:06 - very fun effect so PG gradient to write
60:11 - so we have to give it two colors to
60:13 - start with and end with so we're going
60:14 - to say from Orange
60:17 - 402
60:19 - purple 600.
60:21 - and you can even do a middle color so
60:23 - like we'll do via red 500.
60:28 - sweet so let's take a look at that
60:31 - all right so it looks kind of
60:33 - interesting right now but let's apply it
60:36 - to the text instead so now with two more
60:38 - classes we're going to say BG
60:40 - clip text
60:43 - and we're going to say text transparent
60:47 - okay all right okay that looks really
60:50 - cool so let's keep moving let's go and
60:53 - add a P tag underneath this H1
60:56 - so
60:58 - P I'm going to say aloha everyone
61:02 - check out my projects
61:05 - you can say stuff like thanks for
61:07 - visiting my website all that good stuff
61:09 - and let's style this a little bit so
61:11 - class name is equal to margin top three
61:15 - text extra large XL and text Gray at
61:18 - 600.
61:20 - we don't want it to be like super dark
61:21 - so it kind of gives a little bit of a
61:23 - different differentiation from the H1
61:25 - above it so let's take a look nice that
61:28 - looks good
61:30 - all right let's go ahead and give these
61:33 - projects a little header to like say my
61:36 - projects
61:37 - so right above the projects map I'm
61:39 - going to say H2
61:42 - my
61:44 - projects
61:47 - and we'll give it a class name I'm going
61:49 - to do a giant margin top of 24 we'll do
61:53 - font bold text Gray at 700.
61:57 - and text 3 XL
62:00 - and that will give us a nice little
62:02 - subheading for our projects
62:04 - let's take a look
62:08 - nice so it looks really good right there
62:10 - and now let's style out each of these
62:12 - projects
62:14 - we have three of them let's separate
62:15 - them so we'll go back here I'm going to
62:17 - say class name
62:20 - here
62:21 - is equal to border
62:26 - border gray at 500
62:29 - let's give this rounded large
62:32 - and what we're doing is we're adding a
62:33 - nice border onto it with these class
62:35 - names
62:36 - I'll click save
62:38 - and then let's style out our project
62:41 - name I'm going to put div around this
62:45 - and then we're going to say class name
62:48 - is equal to we'll do font
62:52 - extra bold
62:54 - let's go for another BG gradient
62:57 - to write
63:00 - actually we can simplify this yeah let's
63:02 - just go and copy the one we have up here
63:04 - might as well just copy it scroll back
63:06 - down and we'll just do that right here
63:11 - and we'll save that we also have the
63:14 - image for these projects so let's go and
63:18 - say if project.image exists then let's
63:21 - show an image
63:22 - I'm going to use next js's image
63:25 - component here we're going to say source
63:27 - is equal to project
63:29 - Dot
63:31 - and check it out we have all of our
63:33 - properties things typescript types I'll
63:36 - say image
63:38 - and let's go for an ALT oh and I just
63:42 - realized we didn't bring an ALT from the
63:44 - studio so you can go ahead and add that
63:46 - to your sanity utils so that you can
63:48 - pull the alt for now
63:50 - for now I'm just going to use
63:52 - project.name so let's keep moving let's
63:54 - go for a width of five of 250 a height
63:58 - of 100
64:00 - and let's go class name let's say
64:04 - object
64:06 - cover so that doesn't go over the width
64:08 - of the div that it's contained in
64:11 - let's go for a rounded large and let's
64:13 - give the image
64:15 - border border gray 500 and we need to
64:19 - import next image so I'm going to go to
64:21 - the top myself
64:23 - and import image from next slash image
64:29 - and if you go down here there we go no
64:31 - errors and that should be good enough to
64:33 - show our projects on our home page and
64:36 - have some pretty good styles
64:38 - so save that let's take a look and there
64:41 - we go
64:42 - and our projects are kind of just
64:44 - punched together like this so let's give
64:47 - it some spacing next
64:49 - and I think we're reaching the end of
64:51 - this we're almost close to being done
64:52 - with styling our home page so
64:54 - let's wrap projects
64:59 - .map
65:02 - I'm going to shrink that and we'll give
65:05 - it a class name so div around it class
65:07 - name will do margin top of five to get
65:09 - some spacing away from this H2 let's go
65:12 - for a grid if you haven't used CSS grid
65:14 - yet this is really a really cool way to
65:16 - do it we'll do grid grid columns three
65:20 - and then we want a gap in between each
65:21 - of these so I'm going to say Gap is 8
65:23 - and then let's go close the div around
65:26 - here and that is going to be how we get
65:28 - our projects
65:30 - into a grid
65:33 - yeah isn't CSS grid so cool
65:36 - um so there we go yeah
65:38 - now let's also make this responsive that
65:41 - this is the last part of our Tailwind
65:42 - for this homepage because if I do they
65:44 - kind of stay in this grid
65:46 - so let's go over here
65:48 - let's see grid columns
65:50 - three is only on large screens on medium
65:53 - screen screens grade columns two
65:56 - and it defaults to grid columns one so
65:58 - we don't actually need to write grid
66:00 - columns one but there we go
66:04 - and I think we should give a little bit
66:06 - of padding to our project so padding
66:07 - maybe three
66:10 - let's go take a look
66:12 - there we go that looks a lot better
66:14 - let's scroll over here and look how
66:16 - responsive that is very cool
66:20 - now the images aren't showing because we
66:22 - haven't added any images to our sanity
66:24 - Studio
66:25 - but if you add images they should show
66:27 - up here all right so we've written some
66:29 - Tailwind we've made our site look pretty
66:31 - cool and I think we're a really good
66:33 - path to being able to click on these and
66:36 - showing each individual project Page by
66:38 - themselves
66:40 - next up let's go ahead and Link each of
66:42 - these individual projects to their own
66:44 - specific page
66:46 - right now we're on the home page but if
66:48 - we wanted to click into one it would
66:49 - make sense to be able to go to slash
66:51 - project slash the project slugged slug
66:55 - so to do this
66:58 - first of all let's get some real
66:59 - projects in here we're going to go back
67:01 - to our sanity Studio
67:03 - and let's go and delete this third test
67:05 - I'm going to keep it so delete right
67:07 - there or I'm going to delete it so
67:09 - delete right there delete now
67:11 - and then let's go into test let's go
67:14 - ahead and
67:17 - in this case we're just going to add two
67:19 - YouTube videos so I'm going to add a
67:21 - couple projects we'll this first one
67:22 - will be sanity.io crash course
67:25 - we'll regenerate that slug
67:27 - image I'm going to upload an image for
67:29 - the sanity crash course and I have one
67:31 - right here
67:34 - there we go
67:36 - and you'll remember in our schema we
67:38 - added a hotspot is equal to true in our
67:40 - image
67:42 - so if we click the little crop icon
67:44 - right here we can crop using the drag
67:46 - handles right here
67:48 - so if I drag that over there drag it
67:50 - over here we can also declare we where
67:53 - we want the hot spot to be so this
67:55 - basically says if we need to focus on a
67:57 - certain area of the image
67:59 - we want it to be there
68:02 - we want to be there or whatever and we
68:04 - get the previews down here they're
68:06 - really nice and you'll notice updating
68:07 - over here on the left as well and if we
68:10 - move it over it'll update again so this
68:12 - is a cool feature from sanity to tell
68:14 - when we render these images to kind of
68:17 - focus on a certain area of the image
68:20 - all right I'll go ahead and close that
68:23 - one
68:24 - and we'll keep everything there that's
68:26 - good I'm going to
68:28 - paste in our URL from YouTube
68:32 - let me go back copy this one right here
68:35 - let's go back to the dashboard and feel
68:37 - free to add whatever projects you have
68:38 - of your own
68:41 - and I'm going to update this to say
68:43 - sanity
68:45 - a sanity crash course video and hit
68:48 - publish
68:51 - highly recommend watching this by the
68:52 - way document was published that updates
68:55 - will go ahead and update this one for
68:57 - our other projects I'm going to say
68:59 - groken 2 which is a series that I did on
69:01 - YouTube that lets you learn how to use
69:03 - grok in two minute videos
69:06 - we'll regenerate that we'll upload a new
69:09 - image
69:10 - there we go
69:13 - and let's make sure the hotspot picks
69:16 - this section over here
69:20 - where it says groken two and let's do
69:23 - that
69:24 - we'll see update over there very cool
69:26 - we'll copy our grok into URL right here
69:30 - we'll come back to the studio let's
69:32 - paste that in
69:34 - so yeah these are
69:37 - um Quick videos to learn grok
69:42 - and I'll go ahead and publish and that
69:45 - will update that document so we now have
69:47 - two documents that are ready to go and
69:50 - I'll go back to our website refresh and
69:54 - oh let's
69:55 - so invalid Source prop you'll see that
69:57 - on next image host named
70:00 - cdn.sanity is not configured under your
70:02 - images in next sanity config
70:05 - or next next config so this is just in
70:08 - settings in next to say hey I want
70:10 - images from this URL to show
70:12 - so let's copy
70:14 - cdn.sanity.io let's click into this nice
70:16 - link and they
70:18 - give us the docs right away
70:20 - so
70:22 - um
70:23 - we'll go into our next config and just
70:25 - add that really that chunk of code that
70:28 - was a really great experience with the
70:29 - next JS docs and that error to give us
70:31 - the direct link to fix our problem
70:33 - all right back over here let's go down
70:36 - to
70:37 - nextconfig.js and paste this inside of
70:40 - the next config images
70:42 - hostname is cdn.sanity.io
70:48 - we don't need path names so we'll delete
70:50 - that since we're just worried about the
70:51 - main URL of the domain let's go back
70:53 - over here
70:55 - to our website so this was to handle
70:58 - images in next
71:01 - since we're we updated next config let's
71:03 - see if we need to update our server so
71:06 - npm run Dev restart that
71:10 - and let's see if this fixed
71:12 - so I'll go back over hit refresh
71:16 - and there we go
71:18 - we have our app running again
71:21 - so we have our images showing really
71:22 - nice I'm seeing a little bit of spacing
71:24 - issue on those and we'll fix that but
71:27 - right now we have a great way to show
71:28 - our projects
71:30 - let's go ahead and style these out and
71:33 - link to each of these
71:36 - so let's go back to vs code I'm going to
71:37 - go back to the page.tsx file
71:41 - and let's do a little bit of cleanup on
71:42 - our Styles our image let's bump up the
71:45 - width to 750 we'll bump the height to
71:48 - 300. I kind of want to drop this padding
71:51 - down to one so let's change that to one
71:54 - and then let's up our border to two
71:58 - so let's just make those quick changes
72:00 - and then down here I want to add a
72:02 - little bit more spacing
72:03 - let's go from margin top of maybe uh two
72:07 - so that gets a little more spacing from
72:09 - the image
72:12 - all right so let's check that out that
72:14 - looks better uh maybe a little bit
72:17 - getting cramped over there but that's
72:19 - okay let's start linking these so that
72:21 - they can go to an individual page
72:24 - so we'll go back over here and instead
72:27 - of this
72:29 - div I'm going to make this a link and
72:32 - we'll change the closing link right here
72:34 - and we need to import this
72:37 - so we'll go to the very top of the file
72:40 - and we'll do import link
72:43 - from next link
72:46 - let's scroll down
72:50 - and here we have an error
72:53 - probably wants an href yep
72:58 - href is missing so let's do that
73:00 - href
73:03 - and we'll do back takes we're going to
73:04 - say slash project slash
73:07 - projects project.slug
73:10 - so now that each of these is going to
73:11 - link to their own page with their own
73:13 - slug
73:14 - we'll show that from there so now you
73:17 - can see that this is linkable right here
73:19 - linkable
73:20 - if you hover let's go ahead and give
73:22 - these a little bit more style so that
73:24 - they show that they're linkable and this
73:26 - will be the last thing we do on styles
73:28 - let's go over here to the link and we're
73:30 - going to say hover
73:32 - let's do scale at maybe 105 and we'll
73:36 - say on Hover
73:37 - border blue at 500 and then we'll also
73:41 - transition both of these so that it's a
73:44 - nice transition between these two states
73:46 - all right
73:48 - there we go
73:50 - that looks great
73:51 - so now if we click one we get slash
73:54 - project slash sanity
73:57 - i o crash course but we have a 404 page
74:01 - could not be found that's because we
74:03 - haven't created this page yet
74:05 - so next up we have to create this page
74:08 - so what we are going to do
74:10 - is go into our vs code
74:12 - go into our folder structure under the
74:15 - app folder
74:17 - and this is how we are going to create a
74:19 - dynamic route that is going to be used
74:21 - for that route
74:23 - we're going to say new file
74:25 - and we're going to create the folders in
74:27 - here as well so project is going to be
74:30 - the folder
74:32 - and that corresponds to the first part
74:33 - of the route we're going to do that with
74:34 - project and that's going to be the
74:36 - dynamic part of our route
74:38 - so when we're passing the slug that is
74:40 - what is going to be called in as the
74:41 - project
74:42 - and then we are going to do page.tsx so
74:46 - a folder and a route doesn't really
74:48 - exist until there's a page.tsx under it
74:51 - so that's how nexjs knows to say okay
74:53 - I'll create a page for this route so
74:55 - good to note
74:57 - if there's no route then it's kind of
74:59 - private and it doesn't get used or shown
75:01 - to the public
75:03 - all right so let's define this thing
75:05 - right here we're going to export default
75:07 - function
75:08 - project
75:12 - and then we will return a div
75:15 - my project goes here
75:19 - now you might be wondering okay so in
75:21 - next 12 we used to have to get static
75:23 - paths and get static props here since
75:26 - it's a dynamic route
75:28 - well we don't need to do that which is
75:30 - really really really cool if you're
75:32 - going to pass in params and we're going
75:34 - to get that directly from our route and
75:37 - next.js is going to pass that in
75:40 - and then we are going to have the const
75:43 - slug is equal to prams dot project
75:48 - params is what next.js is going to use
75:51 - to pass us and the reason is called it's
75:53 - called projects is because of the file
75:55 - name right here so if you use this name
75:57 - differently it would pass in different
75:58 - params
76:01 - now that we have the slug let's go ahead
76:03 - and do const project is equal to a
76:07 - weight get
76:09 - project and we're going to pass in the
76:11 - slug
76:14 - now this is similar to how we did it in
76:16 - the page.tsx where we did get projects
76:18 - and we did it right inside the component
76:20 - what's cool about this is now we can
76:23 - start using the project right here
76:25 - and it seems like a lot simpler code
76:27 - than get static paths guess static props
76:30 - it's all just right here in the same
76:32 - component
76:34 - all right so we have a couple of things
76:36 - to do we have some errors let's fix
76:38 - those I'll do async right here to fix
76:40 - this await one
76:42 - let's fix this params type problem it
76:44 - says it's any let's just give it a type
76:46 - so it knows what we're looking at
76:48 - type props is equal to an object and the
76:52 - object is going to have params and
76:54 - inside of that we're going to have
76:55 - project which is a string
76:58 - and then we'll say this is going to be
77:00 - props all right
77:03 - that's the easy ones to fix um right now
77:05 - we are ready to go except for this get
77:08 - project we need to declare this thing
77:10 - and Define it and it hasn't been made
77:12 - yet
77:13 - but we do have a sanity utils file that
77:15 - we can throw all of this in so let's go
77:17 - over here to sanity
77:21 - sanity Dash utils and write
77:24 - now we have export async function get
77:27 - project so let's do another one
77:29 - export async function
77:33 - get project
77:35 - singular and we're going to pass in the
77:36 - slug which is a string
77:40 - and then just like get projects we are
77:43 - going to return a grout query fetch from
77:45 - in here
77:47 - and we can actually type out the return
77:48 - to so let's say promise and it's going
77:51 - to return a single project
77:55 - and the error here is because we're not
77:57 - actually returning anything out of this
77:59 - it says uh returning void or any must
78:02 - have a return value so we're going to
78:04 - write that in now but this is cool
78:06 - because we have get projects which
78:08 - returns an array we have get project
78:09 - which returns a single project so let's
78:12 - go ahead and copy this right here
78:17 - all right let's copy this whole thing
78:18 - and we'll work off this so I'm going to
78:20 - copy that let me zoom out
78:22 - so we can see a little bit better so
78:24 - we'll copy all of that
78:27 - and we're going to go down here and
78:29 - paste that in and the main difference
78:32 - right here is going to be a minimal one
78:34 - is that we need to say type is equal to
78:36 - project
78:38 - and sub dot current is equal to slug
78:44 - but this will still return an array of
78:46 - projects so we want to say take that
78:48 - first one and that's what the zero does
78:51 - so find any projects where the slug
78:53 - equals to the slug I'm passing in and
78:55 - only give me that one back
78:58 - and the way we pass in that slug we go
79:00 - down here and we say slug slug or we can
79:04 - shorthand that to just slug
79:06 - and I'll zoom in again
79:12 - so just like that we have get project
79:15 - which we can return which will return a
79:18 - single project
79:19 - and you might be wondering hey do I have
79:21 - to write this create client every single
79:23 - time uh yes but we can actually simplify
79:26 - this and move this config out so we'll
79:29 - show you how to do that right after we
79:31 - get this working
79:33 - so let's go back to page.tsx here we
79:37 - need to import get project add import
79:43 - and now let's do this right here let's
79:46 - just make sure we have project.name
79:48 - and let's make sure this works
79:51 - so let's go back to our browser
79:54 - we'll hit refresh
79:57 - and there we go sanity crash course so
80:00 - we have all the data for that project on
80:02 - this page and check out what we had to
80:04 - do we just did the get project right
80:06 - inside of the function
80:08 - how cool is that so much less code than
80:10 - what next 12 did and we're rendering on
80:13 - the server so we're sending less
80:14 - JavaScript to render this page on our
80:16 - browsers awesome
80:19 - all right so we're in a really good spot
80:22 - I want to simplify sanity utils a little
80:24 - bit more so there's a create client
80:26 - right here
80:28 - there's a create client right here if we
80:30 - changed out our project ID or data set
80:32 - then we would have to change it in
80:34 - multiple places especially if we had
80:36 - multiple functions inside of this file
80:39 - so I'm going to go into our sanity
80:41 - folder I'm going to create a new file
80:43 - say config
80:46 - slash client-config.ts
80:50 - and that creates a new folder a new file
80:52 - and the reason I called it client config
80:54 - is because this is for reading data from
80:57 - our client which in next which is next
81:00 - in this case but this one down here is
81:02 - for creating the studio so that's how I
81:04 - did I differentiate
81:06 - so we're going to say const config is
81:09 - equal to an object
81:10 - and then we're going to export default
81:13 - config
81:15 - and let's go ahead and grab that config
81:17 - from here and let's go to sanity utils
81:19 - and I'll copy all of this right here
81:23 - and I'll paste that into client config
81:29 - all right now that's looking good and
81:31 - now I can go back and do sanity utils
81:34 - and then we can clean this up we can
81:35 - remove all of this and just do it right
81:37 - here we're going to say create client
81:41 - client config
81:44 - and that we're going to get it from
81:46 - client
81:47 - slash client config
81:51 - so now we are importing it from a
81:53 - separate file and we can write it out
81:55 - just like this and it simplifies our
81:57 - code just a little bit
81:58 - and now we're not repeating ourselves in
82:01 - multiple places
82:02 - so I'll do the same thing here I'll go
82:04 - down and paste it in right here
82:10 - just like this
82:15 - all right so that looks good there and
82:17 - this one looks good as well much cleaner
82:19 - we have a little bit more organization
82:20 - in our sanity folder and we're in a good
82:23 - spot
82:24 - but what I am seeing is that if we go
82:26 - back to the site it does need a little
82:29 - bit of styling just like our home page
82:31 - needed
82:34 - so we have our projects on the home page
82:35 - we have a single project page next up
82:38 - let's make sure we style out the page
82:40 - right here so we can get this to look as
82:43 - good as our home page does
82:45 - and we are going to need an
82:47 - um a nav bar eventually so we can get
82:49 - back to the home page from here so
82:53 - let's kick things off I'm going to do
82:55 - some Tailwind styling on this page and
82:57 - we're going to bring in some more
82:58 - content
83:00 - let's go over to our projects page
83:03 - page.tsx
83:07 - and we'll work right in here
83:11 - we have the project so let's start
83:13 - showing more parts of the project
83:18 - so let's go with a header right here
83:23 - and then on this project name this will
83:26 - be in H1
83:29 - and on the right side we're going to do
83:30 - a href an a tag href this is going to be
83:35 - project.url
83:37 - and title is view project
83:42 - and we're going to do Target is equal to
83:44 - underscore blank so that opens up a new
83:46 - tab when you do that just for some
83:49 - security no opener no refer
83:54 - and we'll say view project
83:59 - close that up close that a tag
84:02 - all right there we go that looks good
84:04 - let's go see if anything changed it
84:08 - still looks not that great so let's
84:10 - start working on that
84:13 - um we're going to go to our main div
84:15 - class name is equal to Max with
84:18 - let's go for 3XL MX Auto so we can
84:21 - Center it and let's go for padding y of
84:23 - 20s so top and bottom of 20.
84:26 - our header here let's go class name is
84:28 - equal to flex so they sit side by side
84:32 - and let's say justify between
84:35 - so they go to the left and to the right
84:37 - so this H1 will go far left this a tab
84:40 - will go far right and we'll say item
84:43 - Center so that they are vertically
84:45 - centered
84:49 - all right that looks good right there
84:50 - let's go ahead and style out sanity.io
84:53 - crash course
84:54 - we are going to style it like we did the
84:56 - home page
84:57 - so if you still have your home page up
84:59 - go there and find that gradient that we
85:02 - did let's see right here we're going to
85:05 - copy this whole thing
85:08 - and so yeah copy that let's go back over
85:11 - and we'll paste that to our H1 so class
85:14 - name is equal to there
85:19 - okay so let's also style our a tag right
85:24 - here class name is equal to
85:27 - background gray 100 let's go for rounded
85:31 - at large then let's go text Gray at 500.
85:36 - and then let's go for
85:38 - um
85:39 - font bold
85:42 - I'm padding Y3 padding X4
85:46 - white space no wrap so so the button and
85:51 - text doesn't wrap into two separate
85:52 - lines when we do responsive work let's
85:55 - save that let's take a look all right
85:56 - that looks good this is not large enough
85:58 - so something happened there
86:02 - um oh we haven't even filed that one so
86:04 - let's go ahead and add that text
86:07 - 7 XL font extra bold and let's keep it
86:12 - right there
86:13 - and then I think this button also needs
86:16 - a little bit of a hover style so we'll
86:17 - say hover BG pink 500 however text pink
86:21 - 100
86:23 - and then let's give it a transition so
86:25 - that it transitions between the not
86:27 - hovered and hovered States
86:30 - okay
86:32 - that looks good and maybe a little large
86:34 - on this text right here so let's drop
86:36 - that down to maybe uh let's do 5xl and
86:40 - give it a drop shadow
86:43 - perfect
86:45 - all right that looks that looks good
86:47 - next up let's keep going we're going to
86:49 - add the content right here
86:51 - and then we are going to add the image
86:53 - right here so let's go down
86:57 - here after the header we're going to add
87:00 - our content goes here
87:04 - and then we're going to say image goes
87:06 - here
87:07 - so
87:09 - now to do the content we are going to
87:12 - add a div
87:13 - and then here we're going to say project
87:15 - dot content and this is going to get
87:19 - interesting because this comes back as
87:20 - portable text remember portable text and
87:22 - it's not assignable to react node so we
87:25 - can't just display it like this we have
87:27 - to display it in a special way and this
87:29 - is because it is an array of blocks
87:31 - which is like paragraphs that have bold
87:34 - or span tags or italics or block quotes
87:38 - all kinds of fun formatting that that
87:41 - isn't easy to do right here
87:43 - and let's see what this looks like if we
87:45 - just it just gives us an error right
87:47 - away and it says can't display this
87:50 - so the way we can do this is a new
87:53 - package let's go into our terminal
87:56 - let's cancel that out clear it out and
87:58 - we are going to say npm install
88:02 - at portable Text slash react
88:07 - and portable text is the tool we're
88:09 - going to use to show all of our blocks
88:10 - that we created in the sanity Studio
88:14 - let's go ahead and npm run Dev again
88:18 - we'll close up
88:20 - so how do we use it we are going to go
88:22 - to the top of this file
88:24 - and we are going to say import
88:28 - able
88:30 - text
88:32 - and this is importing a component from
88:34 - at portable
88:35 - Text slash react
88:39 - cool and now we can use this component
88:42 - to display the portable text down below
88:45 - let's go find that
88:47 - and this is a lot better than looping
88:49 - over the project dot content this will
88:51 - just do all of that work for us and we
88:54 - can say portable text value is equal to
88:58 - project dot content like that and that
89:01 - will display our portable text on the
89:04 - site
89:06 - so refresh and there we go
89:10 - so that's all of our text that we had
89:12 - it's just text so it might seem like a
89:13 - lot of work to just to display this text
89:15 - but if we had more stuff in here like
89:17 - bolds or fun formatting block quotes
89:20 - code blocks that would look really good
89:22 - all things to Portable text
89:25 - so let's go style that so on this div
89:28 - we're going to say class name text is
89:31 - large let's go for text Gray at 700 so
89:35 - it's not just pure black mt4 for margin
89:38 - top let's go from margin top five
89:40 - actually yeah
89:44 - all right that looks good and now let's
89:46 - add the image so we're going to go down
89:49 - here and we're going to say image and
89:51 - we're going to import the next image
89:56 - like that right here and we're going to
90:00 - go to the very top and import image from
90:02 - next image yep just double checking
90:05 - so we'll go back down and just like we
90:07 - did on the home page
90:10 - source is equal to project dot image
90:15 - alt is equal to and again you can go
90:17 - into your sanity utils and bring in the
90:19 - image alt I'm going to use project.name
90:21 - right now
90:23 - um
90:24 - yeah so we'll say width is going to be
90:27 - 1920 height is going to be 1080.
90:31 - and then let's give it some classes
90:33 - class names equal to margin top 10 we'll
90:37 - go for Border two border gray 700
90:41 - so it gets a nice border around it we'll
90:43 - do object cover and rounded
90:47 - extra large so for that rounded corner
90:50 - all right that'll be good for that let's
90:51 - go take a look check it out we have our
90:54 - project page looking really good we have
90:56 - our title our content our project right
90:59 - here
91:00 - um with this image and the link to go
91:01 - view the project which actually goes to
91:04 - the YouTube so very nice and if we go
91:07 - back to the home page I'll just delete
91:08 - all of that right here press enter
91:12 - I can click grok into and all of that is
91:16 - also dynamically pulled in so very cool
91:21 - now the next thing we need to get going
91:23 - to work on is to have a nav bar we need
91:26 - to create a shared layout between the
91:28 - home page and the projects page we don't
91:30 - want to have to create a header and a
91:32 - nav bar in both of the pages that we
91:34 - have right here
91:37 - so if we go to our folder structure we
91:38 - don't want to create a header in here
91:41 - and then header in here as well well
91:43 - lucky for us we have this layout file
91:47 - that next.js already gave us which the
91:49 - layout file will will wrap around
91:51 - everything inside of this folder that it
91:53 - sits in so let's close everything out
91:56 - and if I go into this layout file and I
91:58 - go down here language and body let's go
92:02 - class name
92:03 - is equal to BG
92:06 - pink 500 save that and come back to our
92:09 - entire yeah and our entire site is pink
92:11 - so it's working and then if we go to the
92:13 - main home page
92:15 - that site should be pink as well so
92:17 - anything in layout will span everything
92:20 - for all of our routes so it's working
92:23 - so have that in mind always do here is
92:26 - go here the
92:28 - the body of our content will live right
92:30 - here and I will say
92:33 - Main
92:35 - and then we can have a header here
92:38 - let's go ahead and do link this is going
92:41 - to be an xjs link component
92:44 - we'll say href is going to be the home
92:47 - page
92:49 - and let's go for class name is equal to
92:53 - we're going to do that whole BG gradient
92:55 - thing again so I'm just going to go back
92:57 - to the home page
92:59 - and I'm going to copy this again so
93:01 - we'll copy that
93:03 - let's go back to layout
93:06 - and I'm going to put my name here as the
93:09 - logo as the logo
93:12 - and then
93:14 - let's style it
93:15 - just a little bit more
93:19 - I'm gonna go for text large
93:23 - and font bold
93:26 - now we need to actually have a link
93:28 - right here so we're going to do this and
93:30 - I'm going to import from next slash link
93:33 - and I'll show you that at the top import
93:36 - next slash link right here
93:39 - and while we're here we'll change this
93:42 - to my awesome site
93:45 - generated by
93:46 - the next
93:49 - plus sanity
93:52 - that's just metadata
93:54 - and we'll scroll down all right so we
93:56 - have our header here and that should
93:57 - apply to all of our routes something I
93:59 - also want to do here is go class name
94:02 - let's put a Max width of 3XL MX Auto and
94:06 - let's go for padding y of 10 to the
94:10 - entire site because we did it to the
94:11 - home page and we did to the single pages
94:13 - but let's just do it right here on the
94:14 - main layout
94:16 - now that means I can go back to this
94:18 - page and delete this right here
94:22 - and that's gone and then I can also go
94:25 - to the projects project page.tsx scroll
94:28 - to the top
94:30 - and
94:32 - delete this right here as well
94:37 - all right
94:38 - so let's go back to our site now we have
94:40 - our nav bar right here we have our
94:42 - projects we have our hero section right
94:45 - here let's actually give our spacing on
94:48 - the main let's actually add some spacing
94:49 - on the main as well let's go down here
94:53 - we'll go back to layout down to main
94:55 - let's say class name is equal to let's
94:58 - go for padding y of 20 there
95:01 - yeah
95:02 - now that should get some spacing away
95:04 - from the header there it goes so now
95:06 - that's our header there's our hero and
95:09 - I'll click on a project and we still
95:12 - have our logo and we go back to the home
95:14 - page from here yep
95:17 - and I can click sanity crash course go
95:19 - back to the home page so
95:22 - everything works we have our layout
95:24 - working like it should but there's going
95:26 - to be something really interesting that
95:28 - happens when we update layout
95:31 - so right here and let me close all these
95:33 - files
95:39 - now I want to show you something
95:40 - interesting that just happened if we go
95:42 - back to our dashboard toward
95:45 - Studio notice that our layout applied to
95:48 - the Studio route as well so our entire
95:51 - padding and our Max width and our header
95:54 - are actually showing on the studio page
95:56 - which is not a great experience anymore
95:58 - so with that in mind we have to create a
96:01 - separate layout for the site and a
96:03 - separate layout for the studio
96:06 - now this is interesting because this is
96:08 - a brand new thing for next 13. and maybe
96:12 - going to be hard to wrap our heads
96:13 - around but if we have our layout file
96:15 - this applies to everything in that
96:18 - folder
96:20 - so since we can use our folder structure
96:23 - to Define our routing
96:25 - we can actually in next 13 now use our
96:28 - folder structure to Define organization
96:32 - and what do I mean by using your folders
96:34 - as organization
96:36 - so I can create a new folder here and
96:39 - I'm going to call it site with
96:40 - parentheses around it and I'm going to
96:43 - create a new folder and I'm going to
96:45 - call this studio with parentheses around
96:47 - it
96:49 - so these actually don't do anything for
96:52 - next.js's routing it helps more with
96:54 - organization
96:56 - so if I had a layout file in here
97:00 - that would apply to everything in this
97:02 - folder
97:04 - and then if I had a layout file in here
97:06 - that would apply to everything all the
97:10 - routes in the site folder so now we have
97:12 - two different parts of our site
97:14 - organized using these folders
97:18 - and I know that might sound interesting
97:20 - and let me just keep going and show you
97:23 - how it works so put this layout because
97:25 - it is a site layout in this site folder
97:28 - and we'll replace that one
97:31 - okay
97:32 - so that works out well let's copy
97:35 - everything in the site layout
97:37 - I'm going to copy all of this
97:40 - and then let's go into the studio layout
97:42 - and paste that in and I don't want any
97:44 - of this stuff in here so we're going to
97:46 - delete all that
97:49 - okay and this main right here all of our
97:53 - classes and all of our classes here
97:55 - that's going to be this studio
97:59 - layout
98:03 - and
98:05 - I believe I don't need the next Link at
98:08 - the top anymore
98:09 - yeah
98:10 - and that's it we actually don't need the
98:13 - globals.css here as well because the
98:15 - studio comes with its own styles
98:19 - all right so we can start moving
98:21 - everything over into the correct
98:22 - locations let's get organizing
98:25 - so let's go ahead and say the admin
98:27 - route is going to go into Studio
98:31 - so Studio doesn't do anything for
98:34 - routing admin is where the first routing
98:36 - starts
98:37 - so it's still at slash admin our studio
98:39 - is still at slash admin
98:41 - API routes can stay there can stay right
98:44 - there two projects will go onto the site
98:46 - if I have a con can say right there
98:48 - globals will stay right there
98:50 - page it goes under site so that's our
98:52 - home page right there so even if it's
98:55 - under slash site slash pages.tsx it's
98:59 - still just a home page
99:00 - all right let's close all of our editors
99:02 - there's some stuff going around let's go
99:04 - and close all those and here let's see
99:07 - and make sure everything's still there
99:09 - projects project page.tsx layout dot TSX
99:14 - page.tsx for the home page Studio admin
99:18 - index page
99:21 - cool
99:22 - so admin has its own layout as well and
99:25 - Studio has its own layout
99:28 - so let's actually delete this admin
99:30 - layout we don't need that one and there
99:32 - we go so we have Studio layout
99:35 - let's make sure our app still functions
99:37 - as we remember it we moved around a lot
99:39 - so we'll go back can't resolve
99:43 - globals.css that's because we have to
99:46 - update our import so we're going to site
99:48 - layout
99:50 - all the way at the top here we're going
99:51 - to do a
99:53 - dot dot since we're going up one folder
99:56 - let's go back over
99:58 - and
100:00 - all right the studio still works very
100:03 - nice and let's go make sure our home
100:05 - page works
100:06 - and our site works just like it did
100:09 - before
100:11 - and I can click into that and that works
100:13 - and I have my layout applying to the
100:15 - site only
100:17 - and not the studio side of things
100:19 - in the studio is untouched we can still
100:22 - use it as we did before
100:24 - I am seeing a quick problem here though
100:27 - there's like this border on here I think
100:30 - we actually do need the global CSS
100:31 - because it is a Tailwind reset a CSS
100:34 - reset so let's go back over under Studio
100:38 - layout and we are going to also import
100:40 - globals.css
100:43 - there
100:46 - all right so my mistake we do need
100:49 - globals.css in this file and in our
100:52 - other site layout so let's go over here
100:55 - there we go no weird padding around the
100:57 - edges and our home page looks good as
101:00 - well and that's how we are going to use
101:02 - organizational folders inside of next.js
101:05 - so that we can create multiple layouts
101:07 - for different routes and the child
101:09 - routes underneath each of those routes
101:11 - is pretty powerful stuff
101:14 - all right we have a fully functioning
101:16 - site so at this point we could just end
101:18 - here and say we're good to go we have a
101:21 - great website we have projects for
101:23 - individual Pages which are coming from
101:25 - our sanity studio and that is coming
101:27 - from a project schema type
101:30 - we have learned all about next 13 and
101:33 - how it's server side rendered how we can
101:35 - use our folders as our routing and how
101:37 - we can even use our folders as
101:38 - organization
101:40 - and we have a pretty good folder
101:42 - structure here
101:43 - we've dropped in the sanity Studio but I
101:45 - think we can take a take this a little
101:47 - bit further I want to do one more thing
101:49 - and let's go ahead and talk about it
101:51 - so we are going to add a Pages schema
101:54 - type
101:55 - So currently we have projects we're
101:58 - going to add pages and this is going to
102:00 - be so we can add pages like an about
102:02 - page or a contact page
102:04 - so I'm going to close everything
102:06 - let's close this let's close this and
102:08 - let's go into sanity schemas and we're
102:12 - going to create a new page Dash schema
102:16 - and this is cool because now we have all
102:18 - of our schemas in one folder we have our
102:20 - Barrel file here
102:22 - so let's go ahead and create page Dash
102:24 - schema dot TS
102:27 - I'm going to say cons pages is equal to
102:29 - and very similar to how we did the
102:31 - project schema
102:33 - we could go and copy and change some
102:35 - things but repetition makes for great
102:37 - learning so we're going to keep going
102:39 - here so name is Page title is going to
102:42 - be plural for pages and capitalize and
102:46 - type is going to be document remember
102:48 - name title type
102:51 - and now we get to our type
102:54 - Fields so our Fields arrays we're going
102:57 - to have
102:58 - a bunch of objects so name title type
103:01 - again name is title title is going to be
103:04 - title lots of titles
103:06 - um type is going to be string
103:11 - all right let's keep going here the next
103:13 - one is going to be name is Slug
103:19 - title is Slug
103:21 - and like we did for the project schema
103:23 - we're going to we're going to say type
103:25 - is Slug
103:27 - and like the project schema we're going
103:29 - to add some options here we're going to
103:31 - say options is an object
103:34 - source is going to be from the title but
103:36 - unlike the project one where we did
103:38 - Source over there we're going to also
103:40 - add max length is 96. so you can Define
103:44 - validation there
103:46 - and then the last field we're going to
103:48 - add is content
103:53 - perfect and so just like the project
103:56 - schema this one is going to be a type
103:59 - array and it's going to be of
104:03 - type
104:05 - is block and this is going to be our
104:08 - block content now that's all it takes to
104:10 - Define this object which is our page
104:12 - schema and let's just export it out of
104:15 - this file export default page
104:19 - now we have to make sure that sanity
104:20 - knows about this so we're going to go
104:22 - into index.ts inside of our schemas
104:25 - folder and add it right in here we have
104:28 - project we have page now and we'll do
104:30 - the same thing here we're going to bring
104:31 - that in from page
104:35 - just like that
104:38 - all right so we can make sure that this
104:40 - is coming in from our sanity studio now
104:42 - because it's in the sand in the schemas
104:44 - array so we'll go over to our studio
104:47 - refresh that
104:52 - and now we have Pages fantastic
104:55 - so let's create a couple
104:57 - let's say an about page will generate a
105:01 - slug and I'll just say I am the about
105:04 - page
105:07 - look at all the cool stuff here and I'll
105:11 - put a bold on that
105:13 - we can even put an underline somewhere
105:15 - in there we can just show the formatting
105:16 - on the front page
105:18 - and then we'll do first second third
105:20 - bullet points
105:22 - just to have that
105:24 - okay so publish that and let's go ahead
105:27 - and create another one we'll do contact
105:31 - and the slug will just generate
105:34 - you can find me on Twitter at at kapehe
105:39 - underscore okay and we can even take
105:42 - this right here and click on this link
105:45 - and I'll type it in right here and you
105:47 - can actually find me on Twitter at
105:48 - kapehe underscore okay
105:52 - all right so
105:54 - that URL is on there
105:56 - it is linked perfect so now we have our
105:58 - link we can click publish
106:00 - document was published and now we have
106:02 - two pages that we can work with so let's
106:05 - go back over to our code
106:10 - and we are going to get our sanity utils
106:13 - open and what we're going to do is we're
106:16 - going to create two functions to get all
106:17 - pages
106:18 - and a function to get a single page so
106:21 - just like we did for projects here we
106:23 - have get projects get project I'll do
106:27 - the same thing here export
106:29 - async function get Pages plural
106:33 - export async function get page singular
106:37 - and we're going to pass in the slug
106:40 - and now just like the projects and
106:42 - project we're going to do create a type
106:44 - we're going to create a type so let's go
106:45 - over here to our types folder
106:48 - I'll create a page.ts and you'll notice
106:51 - I'm moving a little bit faster than we
106:53 - did before and that's because a lot of
106:55 - this stuff is what we did in the project
106:56 - schema type and bringing all that data
106:58 - in
106:59 - so we're going to move a little bit
107:01 - faster
107:02 - export type
107:04 - page is equal to this object right here
107:07 - we're going to have ID
107:09 - which comes from sanity created at which
107:11 - comes from sanity as well and that's a
107:13 - date and then we have the fields that we
107:14 - created so title which is a string slug
107:17 - string content which is going to be
107:20 - portable text block
107:23 - and it's going to be an array
107:25 - and we're going to import that
107:27 - portable text block from sanity
107:33 - all right so now we've defined our page
107:36 - type and now we can use it insanity
107:38 - utils and that's the only place we're
107:40 - really going to use it since sanity
107:42 - utils
107:44 - uh we'll pass along to every other page
107:46 - that will use it
107:48 - so we're going to say this returns a
107:50 - promise of pages an array of those
107:54 - and let's make sure we do our import
107:55 - right there and this will return a
107:58 - promise
108:03 - or a single page perfect
108:07 - all right let's type in both of these
108:09 - I'm going to click here and ALT click
108:12 - here we'll press enter and then these
108:15 - are going to start the same way return
108:16 - create client
108:19 - client config.fetch
108:23 - and then we're going to pass in a grot
108:25 - query here
108:27 - just like this with the back ticks
108:29 - and now let's create these separately so
108:31 - this one
108:32 - we are going to say asterisk to grab all
108:35 - the data and we're going to open up our
108:37 - brackets to get
108:39 - type is equal to page so get all the
108:40 - pages now we're going to filter down to
108:43 - what exactly we want
108:45 - so we're going to grab the ID
108:48 - created a title
108:51 - slug remember we're going to create that
108:52 - Alias so slug
108:54 - is now slug.current we should also bring
108:57 - in content here
108:58 - but we're getting a list of our pages
109:00 - and I'm thinking we're going to put this
109:01 - in the nav bar so we aren't going to
109:04 - show the content in the nav bar so I'm
109:05 - going to remove that actually
109:07 - and this is only the stuff that we're
109:09 - going to use so we can create a list of
109:10 - links to each page
109:13 - all right let's do the same thing
109:16 - for down here
109:18 - let's go for asterisks to grab
109:21 - everything
109:22 - underscore type is equal to
109:26 - page and slug dot current
109:31 - is equal to Slug and remember what is
109:34 - going to bring back all the pages to
109:36 - match this it's going to give it as an
109:38 - array but we only want the first one so
109:41 - we're going to do that right there and
109:44 - then we're going to pretty much copy
109:45 - everything that's up here
109:48 - like that
109:50 - we're going to bring it down grab all
109:52 - the same stuff but here
109:55 - this is for an individual page so we are
109:57 - going to go ahead and grab the content
109:59 - this time
110:01 - and let's pass in the slug so that it
110:05 - knows to use the slug and let's also
110:07 - give the slug a type of string
110:12 - just like that
110:14 - okay
110:15 - now we have created both of our
110:17 - functions for get pages and get page and
110:20 - that's kind of how I like to do our
110:21 - setup we will create the schema we'll
110:23 - create some content we'll create our
110:25 - utility functions to go get that content
110:27 - and then we'll create our types to make
110:30 - sure it's all typesafe
110:32 - so looking good first up let's close all
110:35 - these editors and start from a good
110:37 - place
110:39 - we're going to go into the app folder
110:40 - site layout and I'm going to go grab all
110:44 - of our pages
110:46 - right here
110:49 - get all of our pages
110:51 - and I'm going to say const pages
110:54 - is equal to a weight get pages
110:58 - just like that and since we have an
111:00 - await we have to async this right here
111:04 - and get Pages needs to be imported I'll
111:06 - click This little light and Sanity utils
111:11 - so if I scroll up there you can see it's
111:14 - imported from at sanity slash
111:17 - sanity Dash utils now the next thing we
111:20 - need to do is show all of these Pages as
111:23 - links so here in the header right next
111:25 - to the logo I will say div
111:28 - div
111:30 - and then right here let's map over all
111:32 - these pages so we'll say pages.map
111:35 - page
111:36 - and we're going to create a link
111:41 - and make sure we put a key in there
111:43 - because react wants that key
111:45 - so page dot ID is going to be our key
111:48 - we'll close that link
111:55 - cool and then page dot title
111:59 - and we're going to add the href here for
112:02 - Slash
112:04 - slug
112:08 - and that'll be page dot Slug and I'm
112:13 - going to do that right inside of forward
112:15 - slash so that's not going to be slash
112:17 - projects or slash anything else it's
112:19 - going to be right in the home page slash
112:22 - the slug and that's because these are
112:24 - pages so we don't want it to be slash
112:26 - about or we do want it to be slash about
112:28 - or slash contact content contact
112:32 - so let's take a look at where this looks
112:33 - on our site
112:34 - it looks good we have contact and about
112:37 - and each of these links and you see at
112:39 - the bottom left slash about and slash
112:41 - contact
112:43 - so let's style them out a bit so they
112:45 - sit next to our logo instead of
112:47 - underneath so go to the header and
112:49 - you're going to say class name is going
112:51 - to be Flex
112:53 - items Center
112:55 - and we're going to go for justify
112:57 - between so that we can push the contents
113:00 - of this header to the left and to the
113:01 - right
113:05 - and then over here we need to have these
113:06 - sit next to each other
113:08 - so let's say class name
113:10 - is equal to flex item Center and let's
113:12 - give it a gap of maybe three so there's
113:15 - some spacing between those
113:17 - all right
113:18 - that looks good
113:21 - these are a little bit too dark let's go
113:23 - ahead and shrink these down too so Tech
113:26 - small and text Gray Maybe 600.
113:30 - and let's bring up the Gap to about five
113:34 - cool so let's go take a look
113:39 - all right that looks a lot better our
113:41 - logos over there our two links are over
113:43 - there let's make sure we have an
113:45 - indicator that they're hoverable
113:48 - so we're going to say class name
113:51 - this is hover underline
113:55 - let's take a look
114:00 - there we go now it's not the prettiest
114:03 - hover action but it does indicate that
114:05 - those are links
114:07 - just like we did for the projects we
114:08 - want to link over each individual one so
114:11 - let's click on an individual and this
114:13 - will 404 because we haven't created this
114:15 - page just yet
114:18 - so to do that
114:19 - we are going to go back over to our
114:22 - folder structure inside of site
114:25 - we are going to have a new file we're
114:27 - going to say slug is the dynamic route
114:30 - and in next 13 we have a page.tsx
114:34 - underneath it to make it a real route
114:37 - all right so let's export default async
114:41 - function page and that's going to get
114:44 - params from next
114:48 - cool and then we are going to take
114:51 - prams.slug
114:55 - and we are going to get a single project
114:57 - so we're going to say cons project is
114:59 - equal to a weight get project
115:03 - prams.slug we have to fix a couple
115:05 - things here let's fix this params error
115:07 - right here it probably wants to type so
115:09 - we'll say type props is equal to params
115:13 - which is an object that has slug which
115:15 - is a string let's give that to this
115:18 - function right here
115:22 - that one's good next up we need to
115:24 - import get project we'll click on the
115:26 - light bulb and click that to import from
115:28 - sanity utils
115:30 - and next up we have to return
115:34 - oh
115:36 - actually I'm seeing we're getting a
115:39 - project and we need to get a page so I'm
115:42 - actually going to select both of these
115:44 - and type in get page
115:48 - that was a good catch so let's return
115:50 - now a div
115:51 - let's say page dot title and I see I did
115:55 - it again
115:56 - this also needs to be paid right here so
115:59 - sorry about that
116:00 - all right looks good let's just go ahead
116:03 - get all of our styling in right here
116:05 - let's go in there let's give
116:08 - an H1 wrap around this
116:12 - um then we'll do class name and we're
116:15 - pretty much going to copy everything
116:16 - from the project
116:19 - so let's go ahead and go back to
116:20 - projects page.tsx we're going to copy
116:24 - everything in this H1 right here
116:26 - so
116:28 - get that copy that we'll take that go
116:30 - back over to the slug page.tsx
116:34 - and just paste that right in there
116:38 - after our H1 we're going to show the
116:40 - content of this page and we're going to
116:43 - just drop that in using the portable
116:44 - text component so portable
116:48 - text
116:50 - value is equal to page dot content just
116:53 - like we did for project and let's wrap
116:55 - this in a div and give it some styles
116:58 - so we'll do class name
117:00 - we'll do text large text Gray
117:04 - at 700 and margin top 10.
117:09 - and we need to import portable text we
117:11 - need we'll click on the little light
117:12 - bulb and import from portable text react
117:16 - and that should be good enough to show
117:18 - our page content so let's see let's go
117:22 - back we'll refresh
117:25 - and there we go check that out and it
117:28 - even gives the list items but Tailwind
117:30 - by default removes the bullet point
117:31 - things so we would have to bring in
117:34 - something like Tailwind Pros classes to
117:36 - get this to look good but we do have our
117:38 - underline let's click on contact
117:42 - and you see this is a link that still
117:45 - needs styling you could definitely bring
117:47 - in Tailwinds topography plug-in to get
117:49 - some Styles in but overall we have a
117:52 - great site we have our logo that goes
117:54 - back to the home page we have our
117:55 - projects we have our nav
117:59 - that links to Dynamic pages and I'll
118:02 - click about here
118:05 - and it has Dynamic content and if I went
118:08 - back to my studio and added a new page
118:09 - it would also show up right here and the
118:11 - content would be updated as well so
118:13 - really cool stuff and now that we've
118:15 - shown a list of them in addition to a
118:17 - single one of these schema schema types
118:20 - I think it's some good practice for how
118:22 - you can work with sanity studio and
118:24 - next.js applications
118:27 - so we have our application on localhost
118:29 - 3000 running nicely and all of our
118:32 - sanity content is coming from sanity's
118:34 - content link
118:35 - The Next Step here is to get this thing
118:38 - deployed and have a live website so I'm
118:40 - going to go to my GitHub I already made
118:42 - a GitHub repo for this so you're going
118:44 - to need to make a GitHub repo from the
118:46 - code that you have locally
118:48 - if you go into vs code and you go into
118:51 - your git panel
118:52 - over on the left here you should see the
118:54 - little git GitHub icon you can commit
118:57 - everything and you should be able to see
118:58 - a published repository button
119:01 - and that way you can click that and you
119:03 - can create a brand new repo in GitHub
119:04 - all from inside of vs code it's pretty
119:07 - slick
119:08 - so that's what I did and over here is my
119:11 - GitHub repo
119:14 - now we are going to take this repo and
119:16 - let's deploy it to Purcell it just makes
119:18 - sense to deploy next.js to herself so
119:20 - let's
119:21 - go to the dashboard for myversell and
119:24 - I'll click add new
119:26 - and we'll get a new project
119:30 - and we have our repos right here it
119:33 - already shows the one that I just
119:34 - created four minutes ago I'm going to go
119:36 - ahead and click import
119:39 - project name is nexanity framework
119:42 - preset next JS and these defaults are
119:45 - pretty good we don't have to change out
119:47 - environment variables because all of our
119:48 - authorization happens on the sanity side
119:50 - of things so nothing needs to happen
119:52 - inside of this repo
119:55 - we'll click deploy and how easy was that
119:58 - I jumped past the deploy loading screen
120:00 - if you noticed all right so we have our
120:03 - site deployed to this nice little
120:05 - preview and it pulled in the content in
120:07 - the preview
120:09 - let's go ahead go back to our dashboard
120:11 - we'll click on this new project that we
120:13 - just created and
120:15 - we can click visit right here to see
120:17 - this live in a website
120:19 - so there we go
120:22 - just like it looked on local really nice
120:25 - live and accessible to anyone that we
120:27 - send the link to
120:28 - so the next step is let's see what the
120:31 - admin dashboard looks like so I want to
120:33 - show you something really cool let's say
120:35 - that the studio is right here at slash
120:38 - admin
120:41 - and
120:43 - to access our content remember earlier
120:46 - we need to add the following URL as a
120:48 - course origin to our sanity project and
120:51 - that makes sense because sanity security
120:52 - says that you have to Define what
120:54 - domains are going to be able to access
120:56 - your content so I'll get this and we'll
120:59 - click continue
121:02 - and right away it opens up my sanity
121:05 - dashboard I have to sign in I'm going to
121:07 - sign in with Google
121:09 - and
121:12 - and just like that it's already Auto
121:15 - filled so with the course origin and I
121:18 - click add core's origin and it kicks me
121:21 - right back to the studio and I can log
121:23 - in with Google Now
121:26 - and I have access to my live studio from
121:30 - the URL that versell gave me at slash
121:33 - admin
121:34 - so I want to show you something super
121:36 - cool uh here I have the studio up on
121:38 - this tab let's bring the live studio
121:40 - over to the right and I'm using split
121:44 - view right here so the left is the local
121:46 - Studio
121:47 - and you can see localhost 3000 the right
121:50 - is the deployed version and what's cool
121:53 - is if I click into Pages it looks like I
121:55 - am in contact over here
121:57 - you can see that I'm editing this
121:59 - document over on my local Studio
122:02 - and I can click here and now
122:07 - the local Studio can see that I'm
122:08 - editing on the production side on the
122:11 - deployed side and this is API presence
122:14 - API at work so I'm going to go ahead and
122:17 - edit this on the live site and we'll say
122:19 - can't wait to chat
122:23 - and immediately you saw it happen on the
122:26 - left side and look how powerful that is
122:28 - even if you're working in local versus
122:30 - the deployed site you still get that
122:33 - real-time update because all this is
122:35 - backed up by sanity's content like
122:38 - so
122:40 - you can go ahead and click publish here
122:42 - let's go back and view the site
122:47 - so this is going to be this site
122:48 - localhost let's go to the contact page
122:53 - can't wait to chat shows up here and
122:55 - I'll go back to my versel dashboard
122:57 - click visit right here
122:59 - go to contact and on the deployed side
123:02 - there it is can't wait to chat also
123:04 - updated so really great way to see the
123:06 - flow of content from our studio even if
123:09 - you're working locally or on the
123:10 - deployed side it shows up directly on
123:12 - the website and remember next.js uses
123:15 - react server components and takes care
123:17 - of pre-rendering and caching for you so
123:19 - that it's fast
123:21 - all right that's a great look at
123:23 - everything we could build today and we
123:25 - went from having no nexjs website to
123:27 - creating our own next site adding in the
123:30 - sanity Studio
123:32 - so we have a slash admin route to work
123:34 - in and we have our content that we can
123:36 - update that updates on our website as we
123:39 - create it
123:41 - I'll be sure to live leave the GitHub
123:43 - repo in the description below
123:45 - but if you want to learn more about
123:47 - sanity
123:49 - definitely check out the sanity.io crash
123:52 - course
123:53 - uh
123:54 - you can find it on the sanity.io YouTube
123:57 - channel
123:58 - and that's a great way to learn more
124:00 - about sanity and get a full crash course
124:02 - into it you can find me at kapehe
124:05 - underscore okay over on Twitter
124:08 - I always love to see what you're
124:10 - building please let me know if you found
124:12 - this tutorial helpful I love hearing
124:14 - from all of you I had a lot of fun
124:16 - building this and I hope you did too
124:17 - thank you to free code camp for letting
124:19 - me be on this channel and make sure to
124:21 - smash that like button so we'll see in
124:24 - the next one thanks everyone and aloha
124:30 - again thank you so much for hanging out
124:31 - I'm excited to see all of your projects
124:33 - up and running with nextjs and sanity.io
124:37 - if you want to take it one step further
124:39 - you can join the next JS Discord
124:41 - Community you can find more information
124:43 - there and the link to join at nextjs.org
124:47 - blog slash Discord so definitely check
124:49 - that out also the next JS docs are
124:52 - awesome so head on over to nextjs.org
124:55 - docs to learn more about next
124:58 - the sanity crash course that I was
125:00 - talking about as one of my projects can
125:01 - be sound found at sanity's YouTube
125:03 - channel
125:04 - sanity.io
125:06 - sanity.io crash course and then the
125:08 - sanity Community has awesome people that
125:11 - can be found at slack.sanity.io and the
125:14 - handy dandy sanity.io docs can be found
125:17 - at sanity.io docs if you want to learn
125:19 - more about sanity but definitely check
125:22 - out all those links
125:23 - and you can find me on Twitter at kapehe
125:26 - underscore okay if you want to tag me in
125:28 - any of your finished projects I'd love
125:30 - to check them out Mahalo everyone for
125:32 - joining and I will see you around