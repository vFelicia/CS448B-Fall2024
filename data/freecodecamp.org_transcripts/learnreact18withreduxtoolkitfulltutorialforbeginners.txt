00:00 - John similga is back with this massive
00:02 - react 18 course John is one of the most
00:05 - viewed instructors on our Channel this
00:07 - course is perfect for people brand new
00:09 - to react and for people who want to
00:11 - learn about the latest version of react
00:13 - for their front-end web development
00:15 - projects hey what's up I'm John from
00:17 - recording addict then I'm super excited
00:20 - to present the react 18 and Redux
00:23 - toolkit tutorial video
00:25 - recently react released its latest
00:27 - version react 18 and I believe it's the
00:31 - perfect time to explore all of the
00:33 - exciting new features such as suspense
00:36 - API
00:37 - extra libraries such as Redux toolkit
00:40 - and build tools such as wheat
00:42 - in addition we'll be discussing the
00:44 - latest and most useful vs code
00:47 - extensions and configurations so long
00:50 - story short in this video we're going to
00:52 - learn react from the very scratch using
00:55 - its latest and greatest features as well
00:58 - as tooling I really don't want to bore
01:00 - you with the long list of things we're
01:02 - going to cover in this video so if
01:04 - you're looking for something specific or
01:06 - simply just need some persuasion please
01:09 - reference the timestamps available in
01:11 - the description
01:13 - since it's not my first rodeo
01:15 - effectively I believe it's already a
01:17 - third time I'm recording a react
01:20 - tutorial video I added a bunch of useful
01:23 - stuff
01:24 - for example a readme file with all of
01:26 - the notes bunch of challenges to
01:29 - immediately test our knowledge and of
01:31 - course tons of useful resources where
01:34 - you can find more info on some specific
01:36 - topic
01:38 - as a quick sign note this content is
01:40 - part of my rear course and since quite
01:43 - often I get this question
01:45 - what's the difference between the video
01:47 - and the course
01:48 - let me just answer it here
01:50 - first course contains way more content
01:53 - at the moment it's somewhere around 60
01:55 - hours specifically it contains more
01:58 - tutorials for advanced libraries and
02:01 - more complex custom projects
02:04 - second
02:05 - if there are any changes let's say react
02:08 - War one of the libraries comes out with
02:11 - an update I'm able to update the course
02:13 - content which unfortunately is
02:16 - impossible to do with the YouTube video
02:19 - and third I provide assistance
02:22 - so if you get stuck on some specific
02:25 - topic or project during the course I'll
02:28 - help you to troubleshoot the issue
02:31 - lastly if you enjoy the content and want
02:34 - to enroll in my react or any of my other
02:38 - web dev courses just navigate to
02:41 - johnsburg.com again the URL is www
02:45 - johnsmilk.com sign up for my newsletter
02:48 - and get any of my courses for just ten
02:52 - dollars
02:53 - simply choose the course you want to
02:55 - attend and I'll provide a discount code
02:57 - for you to use at the checkout alright
03:00 - and welcome to the course and we're
03:03 - going to kick things off
03:04 - by quickly covering what in the world is
03:07 - react and there's no better place to
03:10 - start
03:11 - than official Docs which by the way are
03:14 - located at this URL
03:17 - react.js.org again the URL is www
03:22 - .react.js.org and once we navigate there
03:25 - we're greeted by this one profound
03:28 - sentence react is a JavaScript library
03:31 - for building user interfaces
03:34 - that's it my friends not a 10-page essay
03:38 - just a short concise one sentence
03:41 - explanation
03:43 - and while I'm a big fan
03:45 - of such straight to the point answers
03:47 - let me elaborate a bit on that so react
03:52 - was developed by Facebook
03:54 - um it's still maintained by Facebook but
03:57 - as you know now the company name is meta
04:00 - its initial release was all the way back
04:03 - in 2013.
04:05 - and currently it is by far the most
04:08 - popular JavaScript library to build user
04:11 - interfaces
04:13 - as a side note some of react competitors
04:15 - are angular View and swelt now if
04:20 - there's one thing I want you to take
04:21 - away from this video
04:23 - it's this one when it comes to react
04:26 - it's all about components
04:30 - and you can think of components as
04:32 - independent chunks of user interfaces
04:36 - components can be as small as one HTML
04:39 - element let's say a button or a heading
04:43 - 2.
04:44 - or you can be a rebel and jam your
04:48 - entire Facebook clone in one component
04:51 - at the end of the day a lot of it
04:53 - depends on your preference and approach
04:56 - in reality though you'll probably avoid
04:59 - the one component route
05:01 - since such approach somewhat defeats the
05:04 - entire purpose of using react in the
05:07 - first place
05:08 - you see the benefit of component is that
05:11 - you can build bunch of
05:13 - independent isolated and most
05:15 - importantly reusable user interfaces but
05:19 - you can then piece it together just like
05:22 - the Lego blocks and as a result build
05:26 - even super big and complex apps without
05:29 - going insane
05:31 - well your app can have as many
05:33 - components as you like it will always
05:35 - have at least one
05:37 - called a root component we already
05:40 - glossed over it a bit but just to
05:42 - reiterate
05:44 - the major benefits of using components
05:47 - and essentially react to develop your
05:50 - next app are following you can build
05:53 - independent pieces of user interfaces
05:56 - meaning changing logic or layout in one
05:59 - component will not break your whole app
06:03 - and once the component is ready to go
06:06 - you can reuse it all throughout your app
06:11 - but the component code is still stored
06:14 - in one place so if you ever need to make
06:17 - some changes you don't have to run
06:19 - around like a headless chicken
06:21 - simply locate the component apply the
06:23 - changes and all of the instances will be
06:27 - automatically updated and of course
06:29 - let's not forget about the speed you see
06:32 - behind the scenes react is using
06:33 - something called a virtual Dom where
06:36 - only the component that needs to be
06:38 - updated is affected and what's really
06:40 - cool it's done without re-rendering the
06:43 - whole app which in turn of course
06:45 - increases the speed of your final
06:48 - product and as a result the user
06:50 - experience as well before I let you go I
06:53 - also want to show you great example of
06:55 - react components in action and I'm going
06:58 - to use our beloved Twitter
07:00 - if we take a look at the sidebar we can
07:03 - see list of links
07:06 - and you'll notice this repeating pattern
07:09 - where each link
07:11 - as the icon as well as the text
07:15 - so with the react what we can do we can
07:17 - set up a component that is going to
07:20 - accept
07:21 - those two things the icon
07:25 - and a text
07:27 - and essentially once we have the
07:28 - structure in place every time
07:31 - we want to use that link We simply need
07:34 - to provide the data show the icon
07:37 - and the text and what's really cool
07:40 - if we want to change something about the
07:42 - structure we only need to do that in one
07:46 - place and then all of the instances
07:48 - where we use the link are going to be
07:51 - automatically updated
07:53 - and if we keep looking
07:57 - in reality
07:58 - there's tons of repeating patterns not
08:02 - just in Twitter but pretty much in any
08:05 - app or site that you see for example
08:08 - this feed notice again we have the photo
08:10 - we have the name of the person who's
08:13 - posting We have the Twitter handle and I
08:17 - can go on and on and on so notice with
08:20 - every post only the values are changing
08:24 - so it's the same deal
08:25 - we set up a structure and then we just
08:29 - pass in the data and if you're looking
08:32 - at it you're like well okay what's the
08:34 - big deal well try doing that with HTML
08:37 - and CSS
08:38 - you see with just HTML we don't have any
08:43 - kind of templating correct
08:45 - so effectively we'll have to hard code
08:48 - all of this
08:49 - but that's not the case with react and
08:51 - if you're still not convinced hopefully
08:53 - by the time I show you the first
08:56 - component you'll see why react is so
09:00 - popular when it comes to building user
09:03 - interfaces when it comes to course
09:06 - requirements my expectation is that
09:09 - you're familiar with fundamentals of
09:11 - HTML CSS and most importantly JavaScript
09:16 - I can honestly say
09:18 - that the more JavaScript you know
09:21 - especially es6
09:24 - the easier is going to be pick up react
09:28 - since at the end of the day
09:30 - react is just JavaScript
09:33 - so if you're familiar with basic tags
09:36 - the general concept
09:39 - behind CSS selectors
09:41 - array methods and for example a spread
09:45 - operator
09:46 - you'll be in good shape
09:48 - now it's not the end of the world if
09:51 - you're still getting comfortable with
09:53 - JavaScript
09:54 - just keep in mind that once in a while
09:56 - you'll have to do some extra studying
09:59 - yes of course
10:01 - I'll try to cover
10:04 - even the straight up vanilla.js features
10:07 - in as much detail as I possibly can
10:11 - but at the end of the day it's a area
10:13 - course so if you still need more info
10:17 - please be prepared to utilize external
10:19 - resources
10:21 - and one such resource is my YouTube
10:24 - channel coding addict
10:26 - more specifically JavaScript nuggets
10:29 - playlist
10:30 - so before each video
10:33 - where we will utilize some vanilla.js
10:36 - feature
10:37 - I'll share a link to a corresponding
10:40 - video
10:41 - where I cover that feature in vanilla.js
10:44 - environment and hopefully that way you
10:47 - can simply watch the video get up to
10:50 - speed with what the specific feature is
10:53 - doing
10:54 - and continue with the course videos all
10:57 - right and up next let's work on our Dev
11:00 - environment
11:01 - is it when it comes to react it requires
11:04 - more tooling then straight up vanilla
11:08 - jazz
11:09 - where we only need text error and a
11:12 - browser
11:13 - now not to worry
11:15 - the setup is still extremely
11:17 - straightforward
11:18 - and you'll only need to do it once
11:21 - meaning
11:22 - once the setup is in place you will be
11:25 - able to start your react project
11:28 - in a lightning speed
11:30 - okay and let's start with the browser
11:32 - yes
11:33 - since we'll be developing Web projects
11:36 - we do need a browser
11:37 - I personally use Chrome
11:39 - but technically it's optional
11:42 - you'll be able to follow along with a
11:44 - different browser as well
11:46 - just keep in mind that here and there
11:48 - your results might slightly differ
11:52 - now let me be very clear I'm not saying
11:55 - that your entire project won't work on a
11:59 - different browser
12:00 - keep in mind that each browser has some
12:03 - default presets and therefore the same
12:05 - element for example input in different
12:08 - browsers can look slightly different
12:12 - if you also want to download the Chrome
12:14 - go to your favorite search engine which
12:17 - in my case is Google Chrome type install
12:20 - Google Chrome click on a link and follow
12:24 - the instructions all right and up next
12:26 - we've got text editor
12:29 - I'm going to use Visual Studio code
12:31 - pretty much a standard these days
12:34 - but just like the browser you can follow
12:37 - along with a different text editor the
12:42 - only downside here and there I will show
12:45 - some Nifty ways to speed up our
12:48 - development
12:49 - and you'll have to search for
12:52 - alternative
12:54 - available in your text editor
12:57 - as far as my configuration I keep it as
13:01 - close to default as possible
13:03 - simply because I'm recording content as
13:06 - far as my extensions I'm not going to
13:08 - cover them in this video since in my
13:10 - opinion a more solid approach is to
13:13 - Showcase what the extension is doing
13:15 - with the actual example
13:18 - so once we reach a point where one of
13:21 - the extensions becomes useful I'll stop
13:25 - and explain in detail and don't worry
13:30 - you won't need all of these extensions
13:32 - to follow along
13:34 - and the same goes for settings Json
13:37 - I will showcase the code once we
13:40 - actually need to work in the file
13:43 - now just in case you are like super
13:46 - eager to see my config right away
13:51 - just navigate to my GitHub profile
13:55 - and look for this repo vs code setup
13:59 - 2022.
14:01 - again the repo is vs code setup 2022.
14:07 - lastly if you want to install Visual
14:10 - Studio code just navigate to this URL
14:15 - and follow the instructions
14:18 - not bad not bad and before we install
14:21 - node.js let's quickly talk about this
14:24 - scary thing the terminal or if you use
14:27 - Windows the command prompt and first
14:30 - let's just establish that terminal is
14:33 - simply an alternative way to communicate
14:36 - with our computer
14:37 - so instead of graphical interface we
14:40 - just type commands also don't worry we
14:43 - won't run any dangerous commands in this
14:46 - course like wiping out the entire file
14:49 - system or anything like that for the
14:52 - most part we'll run some basic commands
14:54 - like CD which stands for changing
14:57 - directory as well as commands provided
15:00 - by create react app a tool which we will
15:04 - install in few videos
15:06 - lastly throughout the course I'll also
15:09 - utilize the integrated terminal and
15:12 - visual studio code
15:13 - please keep in mind that we can use them
15:16 - interchangeably essentially you'll get
15:20 - the same results
15:21 - and the only reason why I prefer
15:22 - integrated terminal and visual studio
15:24 - code is simply because it right away
15:28 - points to the existing project
15:30 - effectively it requires less work and up
15:34 - next let's install node.js on our
15:36 - machine now if you're not familiar with
15:39 - node.js it's a cross platform JavaScript
15:43 - runtime environment which allows us to
15:47 - build fast and scalable Network
15:50 - applications
15:51 - if you want to check whether the node is
15:54 - already present on your machine just
15:57 - navigate back to the terminal and type
16:00 - node
16:01 - hyphen hyphen version or dash dash
16:04 - version again the command is node hyphen
16:08 - hyphen version press return and if it
16:11 - returns some numbers you're good to go
16:15 - however if it returns something along
16:17 - the lines of command not found please
16:21 - continue with the video
16:23 - now in order to install a brand new node
16:27 - instance we need to navigate to this URL
16:32 - nodejs.org or you can simply go to your
16:36 - search engine type install node and
16:39 - most likely this is going to be the
16:41 - first link but again the URL is
16:44 - nodejs.org it will right away detect
16:47 - which operating system you're using
16:49 - and in my case that is mac and I highly
16:52 - highly highly highly highly recommend
16:55 - installing the LTS version instead of
16:59 - the current one again
17:02 - I recommend installing the LTS version
17:05 - since that way there's a smaller chance
17:09 - you'll have to chase some weird bugs
17:12 - you see we will use some external
17:15 - libraries and it takes some time for
17:18 - those libraries to catch up with the
17:20 - node versions as well
17:23 - so if you go with LTS which is a stable
17:26 - version there's a higher chance library
17:29 - or a package will work without any
17:32 - issues which can't be said about the
17:35 - current version
17:37 - the time of this recording
17:39 - the latest LTS version is 1812 but of
17:45 - course
17:46 - since you're watching this in the future
17:47 - your number most likely will be
17:50 - different it will be higher with that
17:53 - said let me emphasize something just
17:56 - because you're using different node
17:58 - version
17:59 - most likely a newer node version does
18:03 - not mean does not mean that the course
18:05 - content is old or invalid
18:09 - effectively we only use node to run our
18:13 - react app basically we'll use node to
18:17 - create a new react app instance
18:19 - so newer or older node version does not
18:23 - affect our code again let me be very
18:25 - clear and the reason why I'm being so
18:27 - annoying because I get these questions
18:29 - and Q a so I just want to address them
18:32 - here and if by any chance a newer node
18:35 - version will introduce some breaking
18:37 - changes to our entire setup rest assured
18:41 - I will update the course content so
18:45 - again download the LTS version follow
18:48 - the instructions and once the install is
18:51 - complete type again
18:53 - in a terminal node
18:56 - dash dash version again the command is
18:59 - node bash Dash and version and if
19:03 - everything is correct you'll see the
19:05 - node version
19:07 - however if you get the error please
19:10 - utilize your search engine and
19:12 - troubleshoot the issue since you won't
19:14 - be able to follow along with the
19:16 - upcoming videos and once we have
19:18 - successfully installed node
19:20 - now let's finally spin up our first
19:23 - react application
19:25 - like I mentioned before unlike vanilla
19:28 - Jazz react does require more tooling but
19:32 - luckily for us we won't have to do it
19:34 - manually
19:35 - for the longest time the most popular
19:38 - option for scaffolding react apps from
19:41 - scratch was packaged by the name of
19:44 - create react app
19:46 - but as everything in web dev things are
19:50 - changing and they're changing fast and
19:52 - as I'm recording the third iteration of
19:54 - the react tutorial
19:57 - actually there's a better and more
19:59 - popular option called Veet and yes it is
20:03 - pronounced Veet not white now since you
20:07 - will encounter create react app code
20:10 - examples in bunch of videos and blog
20:14 - posts during the first part of react
20:17 - tutorial so during the fundamentals part
20:21 - we are going to use create react app and
20:25 - once we get to Advanced react Concepts
20:28 - then we're going to switch to beat and
20:32 - of course I'll discuss why at this time
20:35 - beat is a better option once we get
20:38 - there
20:38 - don't worry both of them have similar
20:41 - setups so it's going to be a very easy
20:45 - transition I promise you so as I was
20:48 - saying during the first part of react
20:50 - tutorial we are going to utilize package
20:52 - called create react app and you can
20:56 - easily find it by just typing create
21:00 - react app in your search engine
21:03 - it was created and it's being supported
21:06 - by the Facebook team which means that we
21:10 - can always be sure
21:12 - that it uses all the latest and more
21:16 - importantly
21:17 - correct setup
21:19 - and if you go through docs you'll see
21:21 - that the main goal of this package
21:23 - is to
21:25 - speed up our development basically with
21:29 - the help of this package we can right
21:31 - away start building our awesome react
21:34 - applications instead of tinkering
21:37 - and getting frustrated with complex
21:40 - config setups and effectively
21:44 - in order to get started we want to open
21:47 - up our terminal navigate to our working
21:51 - directory in my case that is going to be
21:54 - desktop and run of this command npx
21:58 - create react app and the name of your
22:02 - application so in their example it's my
22:05 - app
22:06 - now before we do that let me explain the
22:09 - npm part
22:10 - you see when we install node
22:13 - we also install npm or node package
22:17 - manager
22:18 - which allows us to quickly install
22:21 - external packages
22:24 - and normally the command is going to be
22:26 - npm install or npmi for short and then
22:30 - the package name and don't worry if this
22:32 - sounds iffy it will make all the sense
22:36 - in the world once we install our first
22:39 - package and yes we'll do that throughout
22:42 - the course now why this command starts
22:45 - with npx instead of npm simply because
22:50 - instead of installing the create react
22:53 - app package on our machine which by the
22:56 - way used to be their old approach
22:58 - so we needed to install that globally
23:00 - and then we were able to create that new
23:03 - react application instance
23:05 - now we want to execute this package
23:09 - in order to create that new react app
23:12 - instance so instead of installing create
23:15 - react app on our machine we will just
23:18 - execute it and as a result we get a
23:22 - brand new react application on our
23:24 - machine and yes basically every time
23:29 - we want to start working on new react
23:32 - app we'll have to repeat the same steps
23:35 - so let's try it out I mean you can type
23:38 - it manually you can copy it's really up
23:40 - to you in my case I think I'm just going
23:41 - to copy I'm going to navigate back and
23:44 - first
23:45 - let's just
23:46 - get on the same page
23:49 - so as I'm looking at my thermal I can
23:50 - see that I'm sitting in the root and I
23:54 - can definitely
23:55 - check that by just typing LS which
23:58 - effectively is just going to give me all
24:01 - the directories that I have and notice
24:04 - here I have desktop so in my case since
24:07 - I want to set this project
24:10 - in desktop
24:11 - I'm going to use CD which is change
24:14 - directory and then navigate to the
24:16 - desktop now do you have to
24:19 - work on a desktop no of course not
24:22 - for example you can set it up in your
24:24 - documents this part is really up to you
24:26 - so I'm going to go with CD then
24:30 - stop so now I can clearly see that
24:32 - instead of root I'm located in a desktop
24:36 - again pretty much
24:38 - the same idea as with graphical
24:40 - interface the difference is that now of
24:42 - course we're just typing the command and
24:45 - then I'm going to copy and paste this
24:46 - command now let me right away show you a
24:50 - possible error that you might get and
24:53 - therefore I'll just keep this my app and
24:55 - I'll change that in a second so let's
24:57 - say if you run this command
25:00 - and it spins back the following error a
25:05 - fix that works for me is to add at
25:08 - latest at the end of create react app
25:11 - now if the install
25:13 - is successful then of course you don't
25:16 - need to do anything but if you run into
25:19 - the same error just go with NPH then
25:24 - create react app then add add latest and
25:30 - then come up with a name so in my case
25:32 - I'm going to call this tutorial like so
25:35 - again
25:36 - I'm located in the desktop we run npx
25:40 - because we want to execute this package
25:43 - and in order to avoid this bug we just
25:46 - go with ADD latest and then whatever is
25:49 - the name of our project and in my case
25:52 - that is tutorial press enter
25:55 - and the
25:57 - package is going to start setting up the
26:00 - application now it takes a little bit of
26:02 - time
26:03 - so I'll stop the video and I'll resume
26:06 - it once the install is complete okay it
26:10 - looks like the install is complete and
26:13 - like I mentioned before essentially we
26:16 - have two places where we can run more
26:18 - commands
26:20 - we can do that in the terminal or we can
26:22 - do that in the integrated terminal so
26:25 - notice here we have this npm start run
26:28 - build test as well as the eject and I'll
26:33 - talk about these commands a little bit
26:35 - later first I just want to spin up the
26:37 - application and in order to do that we
26:40 - need to run npm start and notice over
26:43 - here pretty much says what the command
26:46 - is doing it starts up the development
26:49 - server on our machine now
26:53 - like I just said we have two places
26:55 - where we can run that we can use the
26:57 - terminal but
26:58 - make sure that you navigate to this
27:01 - actual project because at the moment I'm
27:04 - located in the desktop
27:05 - so the fastest one is basically to drag
27:08 - and drop this one and once I press enter
27:11 - notice now I'm located in tutorial
27:15 - so now I can run this npm start and
27:18 - essentially it's going to spin up the
27:20 - dev server however I prefer the
27:22 - integrated terminal that is in the
27:25 - visual studio code and how we can run
27:28 - that well we first need to open up our
27:31 - text error when we need to open up this
27:34 - project in our text error which again
27:37 - I can simply drag and drop and once
27:40 - we're done with that we want to open up
27:41 - the integrated terminal and in my case
27:44 - the shorthand for that is control and
27:47 - tilde and tilde key is located just to
27:51 - the left of the one key so press this
27:54 - one and notice you'll have the terminal
27:56 - and again what's really cool about this
27:58 - integrated terminal
28:00 - that we're right away located in this
28:03 - particular project so I don't have to
28:05 - worry whether I'm in a desktop or I'm in
28:08 - some other folder I know for sure that
28:11 - integrated terminal
28:13 - always point back to my project
28:17 - and let's spin up that application so
28:20 - I'm going to go over here with npm and
28:23 - start
28:24 - and effectively this is going to spin up
28:27 - our
28:28 - react application
28:30 - and we'll have our application on
28:32 - localhost 3000 and this is how our
28:37 - initial application is going to look
28:40 - like
28:40 - as a side note I prefer setting up vs
28:44 - code and browser side by side since that
28:47 - way I don't have to switch screens
28:50 - if I want to showcase something in the
28:53 - browser
28:54 - but it's totally optional you're not
28:56 - required to do that also it's a Mac
28:59 - thing
29:00 - so effectively it has nothing to do with
29:04 - react
29:05 - so here's what I want to do I want to
29:07 - move this one down
29:09 - then I'll make it bigger smaller again
29:12 - now it's going to be on my desktop
29:14 - essentially I'll grab the code
29:17 - and then set it side by side
29:21 - I'll spend the next video
29:23 - going over the files and folders that we
29:27 - can find in our new instance
29:30 - in this video I'll simply showcase
29:34 - that every time we make some changes in
29:37 - our code
29:39 - the dev server will right away update
29:42 - the browser as well
29:44 - now you don't have to code along again
29:47 - we haven't covered what is the source
29:50 - folder and all that but in my case I'm
29:52 - going to go to Source folder then app.js
29:54 - and instead of this paragraph I'm just
29:57 - going to say I don't know maybe heading
30:01 - 1 so I'll just change from the paragraph
30:03 - to a heading 1 and then I'll say react
30:08 - tutorial once you save check it out
30:11 - right away we see the latest version in
30:16 - the browser which is really really
30:18 - awesome
30:19 - it definitely speeds up our development
30:22 - and like I said in the following video
30:26 - I'll go over the files and folders that
30:30 - we can find in our new react app
30:33 - instance okay and once we're done with
30:36 - the install now let's cover react
30:38 - fundamentals
30:40 - as a side note if you ever want to
30:42 - reference
30:43 - the complete source code just navigate
30:46 - to my GitHub profile and look for this
30:50 - repo
30:51 - more specifically search for
30:53 - fundamentals directory
30:55 - also in there you'll find a readme file
30:58 - with all of the topics we're going to
31:01 - cover in the fundamentals section and
31:04 - yes I will reference this file quite a
31:06 - bit in the upcoming videos as far as the
31:09 - readme I tried such approach in my meron
31:12 - course and since students seem to really
31:14 - like it I decided to implement it in my
31:18 - other courses as well basically the goal
31:21 - of the readme file is to save your time
31:23 - on note-taking and to allow you to
31:26 - complete tasks independently if that's
31:29 - your preferred way of learning content
31:32 - all right and once we have created our
31:34 - first react app now let's quickly
31:36 - discuss files and folders provided by
31:39 - create react app
31:41 - and first up we've got node modules and
31:44 - effectively in there you'll find all of
31:46 - our dependencies
31:48 - essentially the dependencies our project
31:51 - is using and if you're iffy on the whole
31:54 - dependencies concept just wait a little
31:56 - bit in few minutes we'll cover
31:58 - package.json and once we do that it's
32:01 - going to be easier to see the big
32:04 - picture after that we've got public
32:06 - folder which contains static assets
32:09 - including index.html
32:12 - which basically is the thing that is
32:14 - served to the browser
32:16 - in other words index HTML is responsible
32:19 - for whatever you see in the browser and
32:23 - if you decide to inspect index HTML file
32:25 - you'll see that it's pretty typical HTML
32:30 - file
32:31 - so if you crack it open you'll see that
32:34 - it has
32:35 - typical tags it has the head
32:38 - element it also has the body one and in
32:41 - the head element
32:42 - we can change the title get the fonts
32:46 - CSS maybe even a favicon and just to
32:49 - show you
32:51 - that I'm not making this up I'm gonna
32:53 - navigate there I'll search for title
32:55 - tags and let's right here react tutorial
32:59 - or whatever
33:02 - value you want to provide and check it
33:04 - out the moment I change it
33:08 - I also can see that in the browser now
33:11 - one thing that is very very important
33:14 - is this div with ID of root
33:18 - believe it or not our entire application
33:22 - effectively lives over here and I know
33:25 - it sounds somewhat unbelievable but
33:28 - effectively our workflow is going to be
33:30 - following
33:31 - we'll set up whatever logic
33:34 - we want or need in The Source One In The
33:37 - Source folder
33:39 - and then it's going to get injected in
33:43 - this route and essentially as a result
33:45 - we'll render our application in the
33:48 - browser and don't worry I will come back
33:50 - to this concept quite a few times
33:53 - because
33:54 - I fully understand that the first time
33:56 - you see that you're like whoa that's
33:58 - some really impressive stuff yep I agree
34:00 - after that we've got Source folder which
34:03 - basically is the brain of our app
34:06 - and therefore in there we'll do all of
34:09 - our work now I'm not going to cover any
34:12 - of the files
34:13 - in Source folder for now since create
34:16 - react app creates bunch of boilerplate
34:18 - and actually I prefer
34:20 - especially
34:22 - while we're covering fundamentals
34:24 - setting everything up together from the
34:27 - scratch but in short in the source we
34:31 - will set up all our components Pages
34:34 - utils functions assets CSS and whatever
34:38 - else we need for our project
34:41 - as we continue with the course you'll
34:43 - see that there are really no
34:45 - restrictions on the folder structure
34:48 - inside source so the way you manage your
34:52 - code really comes down to your
34:53 - preference as long as there's index.js
34:56 - which is going to be our JavaScript
35:00 - entry point so remember the ID root in
35:04 - the index.html once we're done adding
35:07 - our functionality like I said it's going
35:10 - to get injected in there and as a result
35:14 - we will render our application in the
35:18 - browser after Source we've got dot git
35:21 - ignore which specifies which files will
35:24 - be ignored by The Source control
35:26 - effectively get
35:28 - so if you navigate there you'll see a
35:31 - list of files and folders that are going
35:35 - to be ignored once we push our project
35:38 - up to GitHub for example after that we
35:41 - got package log but let's just skip it
35:43 - for now and first let's discuss package
35:46 - Json
35:48 - and effectively
35:50 - package Json contains useful info about
35:53 - our project now we will mostly be
35:56 - interested in two things in script as
36:00 - well as the dependencies
36:02 - now package.json is not specific to
36:04 - react apps pretty much every node
36:06 - project has one so let's take a peek
36:10 - essentially like I said useful info
36:12 - about our project and you'll also most
36:15 - likely hear this term manifest file so
36:18 - in here we can see the name you can see
36:20 - the version and like I said
36:23 - we are mostly interested in two things
36:25 - independencies our project is using so
36:29 - these are the main dependencies as well
36:31 - as the script so these are the commands
36:34 - we can run
36:36 - in our project
36:38 - that's why when we run npm start
36:40 - essentially it sets up our application
36:44 - and yes we'll discuss the other commands
36:47 - a little bit later for now we're
36:48 - literally interested in this one the npm
36:52 - start now when it comes to commands
36:55 - normally you go with npm run and then
36:57 - the command but with start we can simply
36:59 - go with npm and then start
37:02 - now if you
37:05 - picked up the node modules you probably
37:08 - noticed that it's huge
37:10 - it's literally massive but in the
37:12 - package.json we actually have way less
37:14 - dependencies so what's up with that
37:16 - or you see so these are the main
37:18 - dependencies our project is using but we
37:20 - need to keep in mind that every time we
37:22 - get the dependency so some kind of
37:24 - Library some other devs were kind enough
37:27 - to set up and essentially we're just
37:29 - utilizing the code in that Library
37:31 - well those libraries can have
37:33 - dependencies on their own
37:35 - which is the case over here
37:37 - so every time we'll install dependency
37:40 - which of course it will do during the
37:42 - course there's going to be more
37:43 - dependencies because the dependency has
37:46 - its own dependencies hopefully I'm
37:49 - making myself clear so again these are
37:51 - the main dependencies and then
37:53 - since they have dependencies on their
37:56 - own the node modules is quite big and
38:00 - that's actually one of the reasons why
38:02 - you will always see it in git ignore I
38:04 - mean in most cases so when we're pushing
38:08 - this up to a GitHub
38:10 - normally known modules are not included
38:13 - because they're huge and there's also no
38:15 - need if you have package Json the moment
38:19 - you will run npm install
38:21 - essentially you'll right away install
38:24 - all dependencies so not just the main
38:26 - libraries but also the dependencies that
38:30 - they are using and that's why we also
38:33 - need a package lock
38:35 - because essentially it's a snapshot of
38:39 - our
38:40 - entire dependency tree now I can tell
38:42 - you right away that you really are not
38:45 - going to do any work in the package lock
38:47 - or node modules so
38:49 - this is just the general info and pretty
38:51 - much you can forget about them all of
38:54 - our work is going to happen in the
38:56 - source and then yes once in a while
38:57 - we'll navigate to a package Json we'll
39:00 - discuss some package and yes we'll add
39:02 - few commands of our own but that's later
39:05 - in the course and lastly we have a
39:07 - readme file which essentially is a
39:09 - markdown file where you can share more
39:11 - info about the project for example build
39:14 - instructions and summary and while we're
39:17 - still on the topic of readme I just want
39:19 - to showcase how you can quickly get the
39:21 - readme that I provided now again you
39:25 - don't have to do it
39:28 - it's totally up to you but just in case
39:30 - you're interested navigate to that repo
39:33 - look for fundamentals then click on
39:36 - readme then you want to go with raw
39:38 - essentially select everything
39:41 - go back now of course I already have
39:42 - these values here select everything
39:45 - that's currently in a readme copy and
39:47 - paste and you are good to go now one
39:51 - last thing that I quickly want to
39:53 - mention here and there your results
39:55 - might differ a little bit as far as the
39:58 - browser just because
40:00 - I'm using zoom level
40:03 - so at the moment I have 175 that's
40:06 - pretty typical for me but here and there
40:08 - you might see me going more or less
40:11 - since that way I can showcase some stuff
40:14 - better again not a big deal it doesn't
40:17 - mean that the code is different I'm just
40:19 - saying that visually here and there our
40:22 - results might differ just because I use
40:25 - specific zoom level that's about it and
40:28 - up next we're going to remove some
40:30 - boilerplate code well create react app
40:33 - is super useful tool unfortunately it
40:36 - adds quite a bit of boilerplate code and
40:39 - especially while we're covering react
40:42 - fundamentals I prefer setting up
40:45 - everything from scratch
40:47 - since that way we can build everything
40:49 - together
40:50 - and in the process discuss the main
40:53 - purpose of some specific file or code
40:56 - snippet so that said our first task is
41:00 - going to be somewhat straightforward
41:02 - remove most of the boilerplate and we're
41:06 - going to do that in the following way
41:09 - navigate to your sidebar remove the
41:13 - entire Source folder event create one
41:16 - from the scratch yes I know
41:19 - this might sound redundant but this is
41:22 - what we're gonna do and then inside of
41:24 - it we want to create index.js I can tell
41:26 - you right away that your application is
41:28 - going to break don't worry we'll fix it
41:31 - in the next video so let's navigate over
41:34 - here
41:35 - notice the source folder I want to
41:37 - remove it
41:39 - yep the entire folder it goes to trash
41:42 - then we want to create a new folder
41:44 - let's call it source and inside of the
41:47 - source let's create that file
41:50 - our JavaScript entry point so the
41:52 - index.js and once we do that like I said
41:55 - our application is going to look
41:57 - different don't worry we'll fix it in
42:00 - the next video and also in this video I
42:03 - want to mention that throughout the
42:04 - course I'll toggle the sidebar just so I
42:08 - have more real estate and in my case the
42:12 - shortcut is command B now if you're
42:16 - using different operating system there's
42:19 - a great possibility that your shortcuts
42:21 - are different and in order to get the
42:25 - shortcuts for your Visual Studio code
42:27 - just navigate to this Cog and then look
42:30 - for keyboard shortcuts so for example if
42:34 - I mention toggle sidebar
42:36 - you can go here and then type toggle and
42:41 - then sidebar and somewhere
42:44 - in there you'll find your shortcut and
42:47 - the reason why I prefer using such
42:50 - shortcuts is because they save a bunch
42:53 - of time and in the long run massively
42:56 - speed up the development all right and
43:00 - now let's finally set up our first
43:03 - component and in order to create
43:07 - a component in react
43:10 - effectively this is what we'll need to
43:13 - do
43:14 - and as you're looking at it your first
43:17 - thought probably is wait a minute
43:21 - guy with a weird accent that looks a lot
43:24 - like a JavaScript function
43:27 - and guess what
43:28 - you're absolutely positively 100 correct
43:32 - yes in order to create a component in
43:35 - react essentially we need to create a
43:38 - function yes of course there are
43:41 - differences
43:42 - essentially that's the whole point of
43:44 - the section
43:45 - is to show you
43:48 - what differences are there between the
43:53 - good old vanilla.js function
43:55 - and the components that we'll be
43:57 - creating react but always always always
44:00 - when you think of component think of
44:04 - function every time we want to create a
44:06 - component think I need to create a
44:09 - function NES it can be
44:12 - function with good old function keyword
44:15 - or you can create the arrow function
44:17 - that part doesn't really matter like I
44:20 - said
44:21 - a lot depends on your preference now we
44:24 - will cover more rules later
44:27 - for now I just want you to be aware that
44:30 - we want to start our components with
44:32 - capital letter
44:34 - that's very important yes we're creating
44:36 - a function but we want to start with a
44:38 - capital letter
44:39 - and we must must must must must return
44:42 - some kind of HTML from this function
44:46 - now technically this HTML is called js6
44:49 - but
44:50 - you'll see in a bunch of blog posts and
44:53 - you'll hear me throughout this course as
44:55 - well
44:56 - effectively to use them interchangeably
44:59 - yes what we're doing from the function
45:01 - we are returning HDML
45:04 - essentially this is going to be the tag
45:06 - that is displayed on screen and
45:09 - technically you can return empty one
45:12 - you're just not going to see any content
45:14 - on the screen so once we know this info
45:16 - let's just go to index.js and let's
45:19 - create that function again the actual
45:23 - syntax is really up to you in my case I
45:26 - think I'm gonna go with good old
45:29 - function keyword just because I feel
45:31 - like good old function today then let's
45:34 - type return and whatever we want to
45:37 - display on our screen so I'm not going
45:39 - to be very original and I'm just going
45:42 - to say my
45:43 - first
45:45 - component so we're done
45:48 - but once we save nothing happens
45:51 - and you're like wait a minute you just
45:53 - said that we're going to create the
45:54 - function and we're going to be good to
45:56 - go so normally every time we'll create a
45:58 - component we'll need to do these two
46:00 - things we'll need to create a function
46:03 - AKA component and we'll need to export
46:07 - it now if you're not familiar with es6
46:10 - modules don't worry about it we'll spend
46:13 - quite a few videos on it and essentially
46:16 - what we're doing here is we're just
46:17 - exporting this particular component and
46:21 - then we can use it anywhere in our
46:24 - application again we'll focus on that
46:27 - a little bit later I really want to I
46:29 - kind of hone in on the react stuff first
46:33 - again if you're not familiar don't worry
46:35 - we'll cover it if you are familiar you
46:37 - know that essentially we're exporting as
46:39 - default so we can just grab it anywhere
46:41 - in our application and we can render it
46:44 - essentially on the screen now this is
46:46 - different though in the index.js that's
46:50 - where we're setting up our root
46:51 - component remember I said that we can
46:53 - have as many components as we want I
46:56 - mean you can have thousands and
46:57 - thousands thousands of components but
46:59 - you'll always have at least one
47:01 - so that's the root component that's the
47:04 - sucker that we will inject into that
47:08 - idea route remember we talked about it
47:11 - uh when we discuss the folder structure
47:13 - I said that there's a public one there's
47:15 - index HTML and then there is this famous
47:17 - ID root so now what we want to do
47:21 - we want to inject this greeting sucker
47:24 - into that ID route and then since this
47:28 - is
47:29 - our JavaScript entry point we do need to
47:32 - add a little bit more code now please
47:34 - keep in mind just like this code it's
47:37 - not specific to react this is es6
47:40 - modules so in here we export stuff away
47:43 - from the file and in here we import and
47:46 - we're actually importing from the
47:48 - libraries basically from our
47:50 - dependencies again if you are even less
47:53 - a little bit later
47:55 - I'll cover
47:56 - everything in detail okay don't worry
47:59 - about it for now just worry about the
48:01 - component
48:02 - and the function you need to create
48:04 - that's it and essentially as far as this
48:07 - entry point
48:08 - we want to grab react and react Dom and
48:11 - notice this one is coming from react
48:13 - package and this one is coming from
48:15 - react Dom forward slash client
48:18 - and then restore our function that
48:21 - doesn't change and then we want to go to
48:22 - react Dom create a root
48:25 - so there's a special method that creates
48:28 - the root and it's looking for one thing
48:30 - it's looking for that ID now how we can
48:34 - select ID in vanilla address we go
48:36 - document get element by ID root and then
48:40 - eventually we go with a root dot render
48:42 - again if you're looking in this code and
48:44 - you're like whoa this got really
48:46 - confusing really fast this is going to
48:49 - be your typical setup and I'll show you
48:51 - the extension that actually sets up all
48:53 - the code for you this is only for our
48:56 - root
48:58 - component for our JavaScript entry point
49:01 - and I can tell you right away that once
49:03 - we set it up
49:05 - we'll pretty much forget about all this
49:07 - code that's why again I know I've said
49:09 - this already ten thousand times
49:11 - Focus please on this one rest of the
49:13 - stuff we'll figure out as we continue
49:15 - with the section so first let's grab
49:19 - those two Imports we're looking for
49:21 - react so let me type over here if you
49:24 - want of course you can copy and paste
49:26 - from the readme so let's go here with
49:29 - the react and as I said I'll most likely
49:32 - vs code is going to give you the order
49:34 - import if it doesn't then again just
49:36 - look for react then we want to go with
49:38 - import react
49:41 - and then Dom and then this is coming
49:43 - from react Dom Library forward slash
49:47 - and client and as I say note
49:50 - they change the syntax in react 18.
49:54 - so prior to that there was react Dom
49:57 - render now they create that route first
50:00 - so right after the greeting we want to
50:04 - go with const
50:06 - and we'll create a root so react Dom and
50:10 - now we're looking for that create root
50:12 - and now let's select
50:15 - the ID
50:16 - with the value of root so this is where
50:19 - we go back to vanilla JavaScript and we
50:22 - go with get element by ID
50:24 - and yes we're looking for the ID of root
50:28 - and once we have all of this in place we
50:31 - want to go with a root and then render
50:34 - and here we want to pass our component
50:38 - now when we create a component we create
50:41 - a function correct we create a
50:43 - JavaScript function now when we want to
50:46 - render it the syntax is following we go
50:49 - here with the angle bracket so then the
50:52 - name of the component and then one thing
50:55 - we need to know about react that we
50:57 - always always need to self-close it
51:00 - so this is again one of the rules that
51:03 - we'll discuss a little bit later just
51:04 - remember that when you pass in the
51:07 - component you have two options you can
51:09 - pass it like so with the opening one
51:12 - and the closing one even though there's
51:14 - nothing in between
51:16 - yes that's the case or you can self
51:20 - close it but you always always
51:22 - have to do that you cannot just leave it
51:25 - like this notice it right away
51:27 - shows this red squiggly align and that
51:30 - means that there is error in our
51:31 - application and once we save it we
51:34 - should see my first component in the
51:37 - browser now if you don't just go back
51:39 - here and refresh since we're messing
51:41 - with the source folder and all that
51:43 - maybe create react app just needs a
51:46 - little nudge
51:47 - now if for some weird reason you're
51:51 - still stuck on this error don't panic
51:53 - since we tinkered with index.js we just
51:57 - need to give create react app A little
52:00 - nudge basically we need to restart the
52:03 - server so navigate to your integrated
52:07 - terminal press Ctrl C which is going to
52:10 - stop the server and then restart the
52:13 - server with npm start again navigate to
52:17 - the terminal
52:18 - press Ctrl C which is going to stop the
52:22 - server and then just restart the server
52:24 - with npm
52:26 - start and at the very end of the video I
52:29 - just want to showcase the casing so if I
52:32 - go here and if I let's say go with
52:35 - greeting and then greeting over here
52:37 - again the same deal we'll have an error
52:41 - notice I have nothing on the screen and
52:43 - if I open developer tools and warning
52:45 - with that greeting blah blah blah blah
52:48 - blah so again we don't want to do that
52:50 - we always want to start with capital
52:52 - letter and once I fix the casing of
52:54 - course everything works as expected
52:57 - we're done setting up our first
52:59 - component if there's one thing I want
53:02 - you to take away from this video
53:03 - every time you think of component think
53:07 - of function
53:09 - that's it if you do that you'll be solid
53:13 - and once we're done with our first
53:14 - component I think this is an excellent
53:17 - time for me to show you
53:19 - the extensions I use as well as my
53:22 - settings Json setup and first let's
53:26 - start with two easy ones so the ones
53:29 - that don't require much explanation and
53:32 - that is auto rename tag and highlight
53:35 - matching tag so if you want to take a
53:38 - look at those extensions so that's how
53:41 - the auto or name tag looks like and then
53:45 - the Highlight one looks like this
53:47 - essentially you just go search for
53:49 - extensions
53:51 - you install it in some cases you might
53:54 - need to restart the text error and after
53:58 - that you're pretty much good to go as
54:00 - far as the auto rename tag if I go here
54:04 - and let's say select a setting two
54:07 - notice right away I'm changing the
54:09 - values in the opening one as well as the
54:12 - closing one so if I go here with heading
54:14 - 3 and save yep I'll have the heading
54:18 - three now in the browser now when it
54:21 - comes to the matching tags this is
54:24 - technically optional you don't have to
54:26 - do it but I just prefer when I select
54:29 - the element I can right away see both of
54:32 - these tags and again the extension is
54:36 - this one now once you install
54:39 - probably your results are going to be
54:41 - tiny bit different just because I
54:43 - customized the way it looks so let me go
54:47 - here to the settings Json and showcase
54:49 - that
54:50 - and again
54:52 - remember repo I shared that's where you
54:54 - can get the code so let's keep on
54:56 - scrolling and notice over here I have
54:58 - this
54:58 - highlight matching tag Styles and then I
55:02 - added these values and essentially if
55:05 - you want to know your options just
55:07 - navigate to the docs of the extension
55:10 - essentially in there they provide all of
55:13 - the details
55:14 - so those are the easy ones now let's
55:18 - actually start working with some heavy
55:21 - lifters
55:22 - first one is prettier which is really
55:24 - awesome because it formats the code
55:27 - so if I go back to index.js and if I do
55:30 - something silly like this again there's
55:33 - technically nothing wrong with my code
55:34 - but imagine
55:36 - if all my files look like this
55:39 - I mean you would have to agree that it's
55:41 - somewhat annoying so once I save check
55:44 - it out
55:45 - everything is back
55:48 - to tip top shape why well because I use
55:51 - this extension by the name of prettier
55:55 - once you install this extension you'll
55:58 - also need to add some modifications to
56:02 - the settings Json so let me showcase
56:06 - that as far as the settings we have two
56:08 - options so essentially we have this the
56:11 - GUI
56:12 - this is where we can basically see and
56:14 - then we have settings Json where
56:17 - essentially we add rules
56:19 - to the Json file
56:22 - now as far as the settings the ones that
56:24 - I prefer are format
56:27 - and then I have format on paste and
56:30 - format on Save and also very very
56:33 - important otherwise it's not going to
56:35 - work you wanna
56:38 - set up your default formatter as a
56:41 - pre-year so let me go back over here
56:43 - and then we want to go with default
56:47 - format yep over here notice I selected
56:50 - prayer so this is what you need to do
56:52 - most likely you'll have this none and if
56:55 - that's the case it's not going to work
56:56 - even after you install it and then once
56:59 - you select this once you go with
57:00 - prettier in settings Json
57:04 - essentially you will have no that's for
57:08 - the Emma that's not what I want to do
57:09 - with my showcase 3M is probably going to
57:11 - be easier you'll see editor for my own
57:14 - paste format on Save yada yada then we
57:17 - have this one the default formatter and
57:20 - then these are just the rules that I
57:23 - applied again you can search for them
57:24 - here in the GUI or you can add them
57:27 - directly here in settings Json so as you
57:30 - can see my preference is the single
57:31 - quote and I don't use the semicolons so
57:34 - if I change that around of course
57:37 - allow the double quotes and I'll have
57:40 - the semicolons
57:42 - this is totally
57:44 - again up to you you don't have to use
57:47 - the same settings
57:49 - then we've got Emmett so throughout the
57:52 - course you'll see me
57:55 - essentially do something like this where
57:57 - I go with heading 2 and let's say if I
58:00 - want to go with an ID I go with the
58:02 - hashtag and I'm going to call this I
58:05 - don't know something something over here
58:07 - and then if let's say I want to add a
58:10 - class I'm going to go with DOT so this
58:13 - adds a class and again this is going to
58:15 - be some value
58:17 - and check it out I right away have this
58:19 - option where I simply need to press
58:21 - return or the Tab Key at least that's my
58:24 - setup
58:25 - in some cases students have said that
58:27 - they only can use tab in some cases they
58:30 - say that they can only use return again
58:32 - that's something that you need to check
58:34 - in my case I can use either of them and
58:36 - notice the moment I press the enter or
58:39 - tab I right away have this value now
58:42 - we'll discuss why this is a class name
58:45 - not a simple class a little bit later
58:49 - don't focus on that one but I'm simply
58:51 - trying to say is that
58:54 - in order to speed up development
58:56 - effectively I'm not going to type the
58:58 - opening tag and the closing tag
59:02 - essentially I'm just going to type what
59:04 - element I want to add and then e-file
59:06 - use some classes I'm just going to go
59:07 - Dot and then the class name the class
59:09 - name or the ID now these are not going
59:12 - to be that often but classes for sure
59:14 - will do this way so we go with heading 2
59:16 - and now let me again type my first and
59:19 - then component
59:22 - and essentially this is done by Emmett
59:25 - and Emmett comes by default
59:29 - in vs code so it's right away available
59:32 - however
59:35 - if we want Emma to work
59:39 - in react we need to add this code
59:42 - to our Json
59:45 - now you can also search for it in the
59:47 - GUI but to tell honestly I find this
59:51 - approach
59:52 - more straightforward or basically you go
59:55 - with press code and once you add it
59:58 - you're going to be good to go if you
60:02 - want you can copy it from my readme or
60:05 - you can just pause the video and type it
60:07 - that's really up to you just make sure
60:10 - that you have this code there's the
60:11 - Showcase that I'm not making this up
60:13 - I'll try to find it yep it's over here
60:15 - so I'm at include languages and we want
60:18 - to add JavaScript and then JavaScript
60:20 - react and once you do that Emmett is
60:23 - going to work in react effectively
60:28 - in our component and I guess the last
60:32 - thing I want to cover in this video is
60:35 - the awesome snippet extension and this
60:38 - is super super super
60:41 - helpful extension uh you're looking for
60:43 - this one now I'm too lazy to say the
60:46 - whole name just look for es7 and then
60:49 - somewhere there you'll see Snippets and
60:52 - essentially this
60:54 - allows us
60:56 - to set up our components really fast so
61:01 - remember I said this is going to be our
61:03 - typical component
61:05 - we don't have to type it ourselves and
61:09 - we haven't covered
61:10 - the exports and imports and all that but
61:13 - I'll showcase the typical setup so let's
61:16 - navigate to the source and we want to
61:19 - create a new file so every time we'll
61:21 - need a new component
61:22 - we'll create a new file because
61:24 - components sometimes can be really big
61:26 - again this is really up to you if you
61:30 - want to jam all your components in one
61:32 - file who am I to judge you so let's go
61:35 - here with new file and we can go with
61:38 - uppercase or we can go with lowercase
61:40 - just remember that the extension
61:41 - essentially
61:43 - is going to
61:45 - set up the component
61:47 - based on file name so I'm in a testing I
61:51 - have installed this extension so
61:53 - everything's in play I don't need to
61:56 - add anything
61:58 - to the settings Json pretty much once
62:02 - your install you're good to go and then
62:04 - you'll see in the dark that they have
62:06 - tons and tons and tons and tons of
62:08 - Snippets that they provide and
62:10 - essentially you just want to click on
62:12 - Snippets
62:13 - and then be prepared to spend the rest
62:17 - of the day going through those Snippets
62:19 - so I'm not going to cover all of them of
62:20 - course you can
62:22 - spend some time in the darks what we're
62:25 - gonna use pretty much all throughout the
62:28 - course
62:29 - r a f c e which is a arrow function
62:33 - right away with export and then
62:35 - rfce which is a regular function with
62:39 - the export so if we go to the testing
62:41 - once we have installed the extension
62:43 - notice I have essentially right away
62:46 - these Snippets so this is going to
62:48 - create a component as a arrow function
62:52 - and notice how the names match
62:55 - and if I go with the other one
62:58 - if I go here with the r
63:03 - f
63:04 - c e this is going to create a regular
63:07 - function now don't let this fool you
63:09 - notice over here how we're using the
63:11 - lowercase
63:13 - it's only going to work because we will
63:16 - import it and we'll set it up with the
63:18 - uppercase
63:19 - and therefore for the most part you'll
63:22 - see me essentially setting up files with
63:25 - the uppercase right away so that way I
63:27 - know that there are going to be no issue
63:30 - now one last thing that I want to
63:31 - mention about this particular extension
63:34 - is that once you initially install it
63:39 - most likely you'll see this import for
63:43 - react on top of the file and I think
63:45 - probably is going to be faster if I just
63:48 - showcase the settings one so
63:52 - let's navigate to the settings we're
63:53 - looking for react Snippets and we have
63:56 - this import react so let me navigate
63:58 - there so settings here
64:00 - then we want to go with react Snippets
64:03 - and notice over here how my one is
64:07 - unchecked
64:08 - most likely once you install it it's
64:10 - going to be checked
64:12 - so in here notice it says that we need
64:14 - to restart vs code and all that
64:17 - and effectively what's going to happen
64:21 - pretty much every time you run the
64:23 - snippet again doesn't really matter
64:24 - which one you'll get this import react
64:27 - from react now that used to be
64:31 - the older syntax so prior to react
64:35 - version 17
64:37 - we had to also right away import react
64:40 - we don't have to do that anymore now if
64:43 - you have the import
64:45 - there's nothing wrong with that
64:48 - so
64:49 - the code is not going to be wrong just
64:51 - because you have the import
64:53 - but since technically we don't need to
64:55 - import essentially we can set up our
64:58 - Snippets extension to avoid importing
65:01 - react for pretty much every component
65:04 - and again
65:05 - if you navigate to settings GUI look for
65:08 - react Snippets and then you just need to
65:10 - uncheck it yep again we'll have to
65:13 - restart the vs code and just to Showcase
65:16 - that I'm not making this up I'm going to
65:18 - remove the testing one
65:20 - let me create a new file I'll say test
65:23 - over here
65:24 - JS and now let me run the snippet I
65:29 - actually prefer
65:30 - the arrow function syntax so most likely
65:33 - throughout the course
65:35 - that's the syntax that I'm going to use
65:37 - and now check it out I don't have any
65:40 - import for react again there's nothing
65:42 - wrong if you do but I just showcased how
65:45 - we can remove that and also my component
65:48 - name matches exactly to my file name so
65:51 - those are my extensions as well as
65:53 - settings Json setup in the long run it
65:56 - will greatly speed up your workflow
66:00 - and now we're ready to dive back into
66:03 - the awesome world of react all right and
66:07 - up next let's see how I react
66:09 - create jsx under the hood
66:12 - and first let me just reiterate the main
66:16 - rules that we want to start with capital
66:17 - letter
66:18 - as far as our component and we must
66:21 - return something now it looks like in
66:23 - the latest version
66:24 - if we don't return anything it doesn't
66:27 - throw an error
66:29 - but it used to do that in the previous
66:31 - versions however if you're not returning
66:34 - anything from component it kind of
66:36 - defeats the entire purpose for the
66:39 - component and as far as the jsx if you
66:42 - find the whole syntax super weird let me
66:45 - just reiterate that
66:47 - the whole idea is to make our lives
66:50 - easier
66:51 - technically if we want to we can call
66:54 - create element which essentially
66:57 - is what the react is doing under the
66:59 - hood but I'm pretty sure that by the end
67:02 - of this video
67:04 - you'll probably agree with me that using
67:07 - jsx is a little bit easier so let's
67:11 - navigate to index.js and this video
67:14 - might be a little bit annoying because
67:16 - I'll comment this one out the first one
67:20 - since I don't wanna
67:21 - essentially create two separate
67:24 - components and then change the values
67:26 - here as well so let me showcase how we
67:29 - can create a component by calling react
67:33 - dot create element because remember
67:36 - react is a JavaScript library so
67:39 - essentially under the hood we are using
67:41 - JavaScript we are calling this method
67:43 - but in order to make our lives easier we
67:47 - can actually type here jsx
67:50 - so first let me just
67:52 - copy this comment this one out and let
67:56 - me showcase that I can go here with
67:58 - return
67:59 - and I can type react Dot and then create
68:02 - element and then here we need to provide
68:05 - three things
68:06 - what element we want to create
68:09 - perhaps which we haven't covered so for
68:11 - now we'll just pass in empty object and
68:14 - then what value is going to be inside of
68:16 - that element so let's try this one out
68:18 - I'm going to go with heading 2. or pass
68:21 - in the empty props empty object and I'll
68:25 - say the typical hello world let me save
68:29 - it and everything works
68:31 - okay well that's awesome
68:33 - but keep in mind that
68:36 - our components are not going to be as
68:39 - straightforward as this one what if
68:41 - let's say I want a div and then inside
68:44 - of the div I'm gonna have the heading 2.
68:46 - like I said this video
68:49 - is going to be a little bit more
68:51 - annoying than the usual ones because
68:53 - I'll toggle them back and forth
68:55 - so if I want to do that I can simply go
68:57 - here with a div
69:00 - so so let me type the div tag and then
69:04 - I'll place that heading 2 inside of it
69:06 - so let me take this one out
69:08 - set it up and of course technically
69:11 - since it's a div we don't see that but I
69:14 - can guarantee you
69:15 - that the element exists
69:19 - so if we take a look at the root notice
69:21 - so I do have the div and then I have the
69:23 - heading to
69:25 - so the next question is well how we can
69:27 - set this one up with create element
69:31 - well
69:32 - check it out
69:34 - we need to go to react create element
69:36 - then since the parent now is div that's
69:39 - what we're creating again same deal with
69:42 - the props don't worry about them just
69:43 - empty object
69:44 - and then since the heading 2 is sitting
69:46 - inside of it again we type react dot
69:50 - create element and then we pass
69:52 - the data and hopefully you see where I'm
69:55 - going with this
69:56 - I mean you can have maybe 20 50 or
70:00 - whatever elements in here in this one
70:02 - component
70:04 - and what do you think is going to be
70:05 - easier
70:06 - typing the HTML AKA jsx
70:11 - or during these acrobatics now I'm not
70:14 - going to set up the code if you want you
70:16 - can copy and paste and you'll see that
70:18 - yes it still works but you'd have to
70:21 - agree with me as weird as it looks the
70:24 - first time you see this kind of approach
70:26 - in the long run
70:29 - it's going to be easier
70:30 - and more straightforward than calling
70:33 - bunch of react dot create elements
70:37 - all right and up next let's talk about
70:40 - the jsx rules
70:43 - so before we discussed the rules for the
70:46 - components and again I'll repeat capital
70:49 - letter and we need to return something
70:51 - now let's talk about djsx rules so
70:54 - essentially the stuff that we are
70:57 - returning let's start with this one we
70:59 - always always always always always need
71:01 - to return a single element basically one
71:05 - parent element so if we take a look at
71:07 - our return
71:09 - we can go here as wild and crazy as we
71:12 - want so let's imagine that I want to go
71:16 - here with div inside of the div I decide
71:18 - that there's going to be a heading 3 and
71:21 - in there I'll say hello people after
71:24 - that we want to go with another list
71:28 - in there there's going to be a list item
71:31 - inside of the list item I'm gonna go
71:33 - with that href for now I'm just gonna
71:36 - add the
71:39 - over here don't worry there's probably
71:41 - going to be a warning in the console we
71:44 - don't really care about it and let's say
71:47 - over here
71:48 - hello world
71:50 - let's save it and as you can see
71:52 - everything works there are no issues and
71:54 - as I say not I don't want this one over
71:57 - here however problems are going to start
71:59 - if for some reason I understand that you
72:02 - know what right next to this div I need
72:04 - to have a heading too so not inside of
72:07 - the div but right next to it
72:09 - check it out right away I have this red
72:12 - squiggly line pretty much running all
72:14 - throughout my code why because we cannot
72:17 - we cannot return in jsx
72:21 - adjacent elements so we always always
72:24 - need to return a one parent element so
72:27 - what's the solution
72:29 - first let me type some kind of code
72:32 - I'm gonna go with hello world and
72:34 - effectively what we want to do is to
72:37 - wrap both of them
72:39 - so for now I'm just gonna go with div
72:41 - and I'll talk about why maybe it's not
72:44 - the best way but let me grab the opening
72:47 - and closing tag and check it out the
72:50 - moment we save everything works again so
72:53 - I know I already said this
72:56 - a thousand times we need to return one
72:58 - parent element so once we refactor we
73:00 - are good to go now this is not a rule
73:02 - but keep in mind that
73:05 - whatever elements we set up they
73:08 - actually live in the browser
73:10 - so we are actually returning them it's
73:13 - not like we're just making them up in a
73:14 - code notice I have div div and then
73:17 - heading two so again this is not a rule
73:20 - if you're
73:22 - favorite element is div you can
73:24 - definitely do show who am I to judge but
73:27 - I do suggest
73:28 - sticking with HTML semantics where we
73:31 - can use the section element we can use
73:34 - the article and of course whatever
73:37 - element you want to create so for nav we
73:40 - can use nav footer header and hopefully
73:42 - you see where I'm going with this again
73:44 - it's not a rule if you want to add I
73:48 - don't know 100 divs in your component
73:51 - absolutely
73:52 - react is not going to complain about it
73:54 - however
73:55 - as far as maintaining the code it might
73:59 - be an issue down the road again just a
74:02 - suggestion and also another approach we
74:05 - can take if let's say you don't want to
74:08 - add any semantic elements and you're
74:10 - also maybe not in a fan club of div you
74:14 - can add fragment
74:16 - so fragment allows us to group elements
74:19 - without adding those extra nodes and
74:22 - essentially we have two ways that we can
74:24 - use that we can go with react Dot and
74:27 - then fragment so notice the syntax it's
74:30 - kind of like a component opening and
74:32 - closing one or there is a shorthand so
74:35 - in here we can go with angle brackets
74:37 - and we just need to make sure that we
74:39 - close it so let's try it out I'm going
74:41 - to go back to index.js let's say that I
74:44 - don't want to go with Section which is
74:46 - also an option of course so once I save
74:48 - here notice now the section is returned
74:51 - not a div
74:53 - but if let's say I'm not a fan of that
74:55 - type of approach I can just remove the
74:59 - code and I can go to react Dot and then
75:02 - fragment so we're importing react that's
75:05 - something you'll need to do then if
75:07 - that's the case and we go with react dot
75:10 - fragment and once we save notice
75:13 - that essentially
75:15 - there's not that extra div so we have ID
75:18 - root
75:20 - but we don't have that div
75:23 - type of syntax we only have this one div
75:26 - that we have over here and like I said
75:28 - the shorthand is following just remove
75:30 - the stuff and everything is going to
75:33 - work
75:35 - after that let's talk about the camel
75:38 - case property naming convention
75:42 - if you're familiar when it comes to
75:45 - attributes in the index.html
75:49 - you write them in a following way for
75:52 - example tab index on click
75:55 - for read-only when it comes to jsx
76:00 - don't be surprised if you see the camel
76:05 - case property naming convention please
76:08 - don't worry about this code effectively
76:11 - what it's doing the values and all that
76:13 - just focus on naming here so instead of
76:16 - tab index we're going to type tab index
76:19 - as a camel case if we want to use 4 for
76:22 - the label in the jsx we'll use html4
76:25 - again those are just the rules and of
76:28 - course as we're progressing on the
76:30 - course every time
76:31 - we'll add that chemical case property
76:34 - I'll tell you hey this is the rule that
76:37 - we need to use and this is just
76:38 - something that you need to remember
76:39 - again please don't focus on this code
76:41 - I'm not going to type it we're going to
76:43 - cover all of this in great detail
76:45 - essentially while we have those funny
76:47 - curly brackets and all that for now just
76:50 - don't be surprised if you see this type
76:54 - of naming convention
76:56 - also speaking of naming conventions we
76:59 - don't have class something that I
77:01 - already showed you when we work with
77:02 - Emmett so if I go back and to this
77:05 - device I want to add some kind of class
77:06 - it's not going to be class so you can
77:10 - type here like this but it's not going
77:11 - to work we need to go with class name
77:14 - again just the rule that we need to
77:16 - remember that's it we need to go with
77:18 - last name and then we provide some kind
77:20 - of value over here some class name and
77:24 - then if we take a look
77:26 - somewhere there yep notice
77:29 - eventually in the browser
77:32 - it's set up as a class but in our code
77:35 - it's going to be a class name and up
77:38 - next let's discuss how we need to handle
77:41 - elements that don't have the closing tag
77:45 - so as you know in HTML we have some
77:47 - elements that do have closing tags and
77:50 - some that don't for example image or
77:53 - input and HTML5 has somewhat spoiled as
77:56 - well
77:57 - if we want we can now omit the
77:59 - self-closing and everything is going to
78:01 - be rendered just fine however we cannot
78:04 - do that in react all the elements that
78:07 - don't have the closing tag we need to
78:10 - self-close them so essentially you need
78:13 - to add this forward slash
78:16 - otherwise you'll get an error so if I
78:18 - navigate over here and let's say I'm
78:19 - gonna go with input now say text if I
78:23 - remove the forward slash I'll right away
78:25 - get the narrow
78:27 - so make sure if you use the element that
78:30 - doesn't have the closing tag
78:33 - to self close it and lastly let's talk
78:37 - about the formatting as you've probably
78:39 - noticed
78:42 - when it comes to return sometimes
78:45 - we have these parentheses
78:47 - and sometimes there are no parentheses
78:51 - so what's up with that
78:53 - well you see parentheses are here to
78:57 - help us
78:58 - technically you don't need to use them
79:01 - so now let me go back to the heading 2.
79:04 - and let's say hello world I save and
79:08 - everything works however if
79:11 - by mistake
79:13 - I move this to the next line You'll see
79:15 - that it right away gets grayed out
79:18 - and essentially we'll have no content in
79:21 - the browser so if you're not using
79:23 - parentheses you need to make sure
79:26 - that your opening tag is in the same
79:29 - line as return so set it up here
79:32 - and I removed one character and then we
79:36 - can do whatever we want so again we save
79:38 - it and then of course previous format
79:40 - for us if you have parentheses you don't
79:43 - need to worry about it and a friendly
79:46 - suggestion keep in mind that we are
79:48 - using prettier so a lot of times per
79:50 - year we'll add them or we'll remove them
79:53 - so
79:55 - I wouldn't suggest stressing about it
79:57 - just something to keep in mind so notice
80:00 - over here if I have those parentheses it
80:02 - doesn't really matter where the opening
80:04 - tag is I save it and prettier removes it
80:07 - for me anyway just keep in mind the
80:09 - general concept if you want to add them
80:12 - add them if not make sure that the
80:15 - opening tag is in the same line as the
80:18 - return okay and up next let's discuss
80:21 - whether we can Nest components and the
80:24 - short answer
80:25 - is yes and let's also see how we can do
80:28 - that
80:29 - so if I go back to my index.js
80:35 - um let's say I decide that my component
80:37 - is going to be more complex I'll add a
80:40 - div
80:41 - I'll say inside of the dev heading 2 and
80:44 - I'll call this John Doe and then right
80:47 - below it we're gonna go with paragraph
80:50 - This is my message
80:54 - and then down Route I decide that you
80:56 - know what
80:57 - these pieces are reusable
80:59 - or I just want to simplify this file I
81:02 - don't want to have the setting to and
81:04 - paragraph
81:05 - how I can set this value in a different
81:09 - component and then render that component
81:11 - well when you start by creating a
81:14 - component and I'll purposely set up
81:17 - two Arrow functions one is going to be
81:19 - implicit return
81:21 - so basically without the curlies and the
81:24 - other one is going to be with the curly
81:25 - braces just to Showcase that yes of
81:28 - course it is possible so let's start
81:30 - here with const so that's my first
81:33 - component person and this is where I'll
81:34 - set up that implicit return I'll say
81:37 - Arrow function and essentially what I
81:39 - want to return is this
81:42 - I'm gonna go with my adding two
81:44 - then let's copy and paste and now let's
81:46 - set up that message in this case though
81:48 - we will go
81:49 - without curly so now we do need to
81:53 - provide explicitly that return otherwise
81:56 - it's not going to work basically we're
81:58 - not going to be adding anything here so
82:01 - let me move this sucker up let me say
82:03 - return and now of course I want to
82:06 - change this I'm going to grab
82:08 - and I want to copy and paste so I have
82:10 - three components now I have the greeting
82:13 - I have the person as well as the message
82:17 - so how we can nest
82:20 - components well we simply need to
82:23 - reference the name
82:25 - and again same rules apply that's where
82:27 - we go here with this Capital case and
82:30 - also remember we cannot just place them
82:33 - side by side
82:34 - so we will have to set up some kind of
82:37 - parent now in my case that's div
82:39 - remember
82:40 - you can go with some other
82:43 - element as far as HTML semantics or you
82:46 - can go with react fragments so for me
82:48 - I'm just going to keep the div basically
82:51 - we just want to reference we want to go
82:53 - here with person
82:54 - and then we also want to display the
82:58 - message NES before you ask
83:01 - we can Nest another
83:03 - 50 000 components inside of these ones
83:08 - so imagine
83:09 - you go here you'll create more
83:11 - components you'll Nest them here and
83:13 - then all of them are going to be
83:16 - displayed eventually in the greeting and
83:19 - effectively this is how our applications
83:21 - are going to look like
83:23 - so have that root one
83:25 - so single root component the convention
83:29 - is to name it app but you don't have to
83:32 - and inside of it we Nest rest of our
83:35 - components
83:36 - so all the components we need for our
83:39 - app
83:40 - for example inside of the app we missed
83:44 - a page component which contains more
83:47 - components navbar sidebar and a header
83:51 - now
83:52 - those components might or might not have
83:56 - their own nested components and
83:58 - hopefully you see where I'm going with
84:00 - this
84:00 - we inject our root component in a div
84:03 - with an ID of root in the index.html
84:08 - which is located in the public folder
84:10 - and as a result our app is nicely
84:14 - displayed in a browser regardless
84:17 - regardless whether it has 5 or 300
84:21 - components okay and up next let me
84:24 - showcase a awesome extension for the
84:27 - browser which effectively will allow us
84:30 - to see our component structure so for
84:35 - that I'm actually going to open up a new
84:38 - browser
84:39 - tab just so you can see it on full
84:43 - screen then we want to look for these
84:47 - three dots
84:48 - more tools and then extensions now in my
84:52 - case of course
84:54 - the extensions are you present but since
84:57 - I wanna
84:59 - showcase how we can get one I'll remove
85:01 - it
85:02 - then we go over here
85:04 - Chrome web store
85:06 - and let's search for react
85:11 - developer and then tools
85:14 - get it over here
85:17 - yep we want to add it ADD extension
85:26 - and once everything is in place now
85:28 - let's navigate to a local host 3000 and
85:32 - once we do that we can close this tab
85:34 - then inspect
85:36 - and you'll see this components tab
85:39 - once you install the extension you'll
85:42 - have this one and now check it out now
85:45 - it does complain about the strict mode
85:46 - so you'll see this warning over here
85:50 - don't worry about it everything works
85:52 - fine and we'll discuss the strict mode a
85:54 - little bit later so check it out this is
85:56 - our root component the greeting again we
85:58 - haven't discussed the props and all that
86:00 - and functionality don't worry about it
86:03 - for now just focus on this
86:05 - so we can clearly see our component
86:09 - structure and this is super useful
86:12 - once your apps become big and complex
86:15 - since it's much easier to troubleshoot
86:18 - you can literally pinpoint the component
86:20 - and then see what is happening inside
86:22 - again the extension is react developer
86:25 - tools and if you haven't installed it
86:28 - already just go to Chrome web store and
86:32 - set it up on your browser all right and
86:36 - I think at this point we have acquired
86:39 - enough knowledge to start working on our
86:41 - first project the Amazon best sellers
86:45 - effectively a list of best selling books
86:49 - and of course in the process we'll cover
86:51 - more interesting react topics for
86:55 - example how to add CSS how to handle
86:58 - images
87:00 - what are the props just to name a few
87:03 - and our goal is to implement some of the
87:07 - features
87:08 - from this Amazon page now of course
87:12 - We're Not Gonna recreate the whole page
87:15 - but the main features will try to
87:18 - recreate using react
87:21 - and we're going to start actually with
87:23 - the structure
87:25 - so in the index.js I want you to create
87:28 - a book component where technically you
87:31 - can call it whatever you want and then
87:34 - in there
87:35 - let's just set up three components now I
87:38 - can tell you right away that later we
87:40 - will refactor
87:41 - to one component it's only one book
87:44 - component we're starting this way just
87:46 - because I want to emphasize one more
87:48 - time
87:50 - the way you set up the application is
87:52 - really up to you there is no rule that
87:55 - says
87:55 - you have to do one way or the other way
87:59 - if you want to create component for
88:01 - every single element
88:03 - you can definitely do so if you want to
88:05 - jam your entire application in one
88:08 - component that's also an option
88:11 - so a lot of times it really comes down
88:13 - to a preference so first
88:16 - we'll create three components notice
88:18 - effectively we're just returning some
88:21 - elements here
88:22 - and then eventually we will refactor it
88:25 - so I have the book component and there I
88:29 - have few more components and then I have
88:31 - book list component
88:33 - which we actually
88:35 - render
88:36 - so this is the one that we pass into a
88:39 - render
88:40 - so let's set up this one and then we'll
88:42 - get the values from the Amazon so first
88:45 - let me navigate to the index one so at
88:48 - the moment I have this greeting and all
88:50 - that
88:50 - I won't need this I'm going to go with
88:52 - const and let's start over here with
88:55 - book and list so that's my component
89:00 - essentially it's going to be a section
89:02 - so let's set up a return over here
89:05 - and for now it's going to be an empty
89:08 - section so there's not going to be
89:11 - anything in there then let's remove
89:13 - these two and now let's set up that
89:15 - component so const book that's the
89:19 - component as far as return we're gonna
89:21 - go here with an article so we're setting
89:23 - up the article for the book and then
89:26 - inside of the book component will render
89:29 - three more components and also in a
89:31 - process I want to showcase that yes
89:34 - essentially we can Nest as many levels
89:37 - deep as we want so notice in here we
89:41 - have book list then book is going to be
89:43 - rendered inside of it and then inside of
89:45 - the book we'll have three more
89:48 - components and let's start I guess over
89:50 - here with an image so I'm gonna go here
89:52 - and since we don't have the values yet
89:54 - I'm going to provide the heading 2 but
89:57 - eventually of course it's going to be a
89:59 - proper image element so let me change
90:01 - this and I'm going to go with heading 2.
90:04 - and we'll just say image Place holder
90:09 - now I'm purposely showing multiple ways
90:12 - how we can set up D components so notice
90:13 - this is going to be implicit return
90:17 - but we can also set up the explicit one
90:19 - so first let me change around and say
90:22 - that
90:23 - second one is going to be title and here
90:26 - we're looking
90:27 - forward heading two so that doesn't
90:29 - change we only want to change the
90:33 - content and I'm just gonna write here
90:35 - title and then last one is going to be
90:37 - the author author and in order to make
90:40 - it more interesting let me just cut it
90:43 - out let me set up the curlies and let's
90:46 - go to the return
90:47 - as you can see
90:48 - the result is exactly the same
90:51 - we'll have some elements rendered on the
90:54 - screen
90:55 - it really comes down to our preference
90:58 - so it's not going to be a image
91:00 - placeholder we'll type over here
91:03 - author let's save it and we want to move
91:06 - up now we want to render all three
91:09 - components so let's start with the image
91:12 - then we want to go with our I believe
91:16 - what title
91:18 - over here and then last one is going to
91:20 - be the author and then in the book list
91:23 - let's move up
91:25 - and let's say that we want to render a
91:28 - book
91:29 - for now let's just render one book
91:31 - component and then we'll worry about the
91:34 - rest of them so let's save and in here I
91:38 - still have the greeting so I want to
91:39 - change that one around let's go with
91:41 - book list once we save check it out so
91:44 - this is the result
91:46 - essentially I have these three elements
91:48 - rendered on the screen and we can
91:50 - definitely see that if we go to elements
91:52 - and notice here this is the root like I
91:54 - said this is going to be our entry point
91:56 - and then I have the section and in there
92:00 - I have the article and before we even
92:02 - get the values let me showcase something
92:04 - really cool so in react if I just copy
92:06 - and paste basically if I set up more
92:09 - instances of this book component notice
92:12 - now of course they're right away
92:14 - rendered on screen and what's even more
92:17 - cool
92:18 - if let's say I decide that you know what
92:21 - it's not going to be a book title
92:24 - what if I want to go with title
92:27 - of the book
92:30 - you can save it and check it out all the
92:33 - component instances right away have that
92:37 - value again really really cool that we
92:40 - don't need to run around
92:42 - and change those values manually
92:45 - effectively we just change it in one
92:47 - place and we're good to go so we're done
92:50 - with the structure
92:51 - now let's go back to read me and see
92:54 - what we need to do
92:55 - so essentially you have a few options
92:58 - you can go to your search engine and
93:00 - type Amazon best-selling books or you
93:04 - can follow this link now of course if by
93:07 - the time you're watching this the link
93:09 - doesn't work I mean the
93:12 - companies change their resources quite
93:15 - often so if you navigate to this link
93:17 - and it doesn't exist then of course
93:19 - you'll have to search for it the reason
93:21 - why I'm providing the link
93:23 - is simply because
93:25 - that way you can work with the same
93:28 - exact list since Amazon has
93:31 - quite a lot of those lists out there now
93:33 - you'll still be able to follow along
93:35 - don't worry about it I'm just saying
93:37 - just in case you want to work with the
93:38 - same exact list I'm providing a link and
93:41 - before we continue let me make something
93:43 - extremely extremely clear
93:46 - you won't have to buy anything there
93:49 - again you won't have to buy anything
93:53 - from Amazon and second this is not some
93:56 - kind of lame attempt to trick you into
94:00 - using an affiliate link
94:02 - this is not an affiliate link it's
94:06 - literally just the URL to the list that
94:09 - I'm using I want to make this extremely
94:10 - clear
94:12 - and essentially we're just using it
94:13 - because I don't want to come up with
94:15 - these values I want to provide the real
94:18 - values so once I'm done with this boring
94:22 - round now let me navigate
94:25 - to my list and again you can actually
94:28 - copy and paste here or you can click
94:31 - command and then
94:33 - follow the link just remember that if
94:35 - you have the same setup it's going to
94:36 - open over here so of course that's why
94:39 - I'll grab this one
94:40 - navigate copy and paste and unless by
94:44 - the time you're watching the video
94:45 - Amazon has already removed the page this
94:49 - is what you should see obviously your
94:52 - values might be different but the idea
94:54 - is going to be exactly the same
94:55 - and effectively this is where we want to
94:58 - grab those values I want to start with
95:00 - image then I want to get the
95:03 - title and after that I want to get the
95:05 - author now I'm going to open them
95:06 - because it's going to be easier to copy
95:09 - and paste the values and let's start
95:11 - with an image so essentially here's what
95:12 - we want to do we're going to go to copy
95:16 - image address and once it's saved in the
95:19 - clipboard let's navigate back to
95:21 - index.js and where we have the
95:23 - placeholder now let's go with that image
95:26 - tag and then let's provide those values
95:29 - so in here we want to go with the source
95:31 - and source is going to be equal to
95:33 - whatever URL
95:36 - we have in a clipboard and then as far
95:39 - as the alternative well I'm going to
95:41 - provide the title for that
95:43 - so in order to get the title I already
95:45 - opened a book in a new tab so let me
95:48 - navigate here now I'm not going to grab
95:50 - the whole thing
95:51 - it's kind of a Overkill let me just copy
95:55 - and paste here the title
95:56 - and the same here with the heading too
96:00 - and lastly we want to get the author
96:02 - which I believe the fastest way is just
96:05 - a copy like this
96:07 - so let me provide here where I have the
96:09 - heading for let's save it and yes it's
96:13 - gigantic and all that don't worry we'll
96:15 - add a little bit of CSS later and
96:18 - essentially we'll fix the issue again
96:21 - the cool thing is that
96:23 - since we set up multiple book instances
96:26 - you're gonna right away see that they're
96:28 - rendered on the screen and whatever
96:30 - changes will make in the individual
96:32 - components will right away
96:36 - be displayed on the screen now we don't
96:39 - need that many book instances so you
96:42 - know what for now why don't we just
96:45 - leave four simply because we'll be
96:47 - setting up a grid layout pretty soon so
96:50 - if you have the same result
96:52 - we're good to go and in the next video
96:55 - we'll take a look how we can add CSS to
96:59 - our react project beautiful at this
97:02 - point we know how we can render HTML
97:05 - but what about CSS
97:07 - because as you can see I mean it's cute
97:10 - to have this kind of list but
97:13 - you probably agree with me that it does
97:16 - require some CSS and essentially it's
97:20 - not as difficult as one might think
97:24 - effectively we just need to create a CSS
97:28 - file now as always name is really up to
97:31 - you
97:32 - but I'm gonna go with index CSS since my
97:35 - JavaScript file is index.js we want to
97:38 - set up the Styles and lastly we want to
97:40 - import that in our index.js file now I
97:45 - can tell you right away that
97:47 - for bigger projects
97:49 - most likely you'll have a folder with
97:52 - CSS files
97:54 - which again
97:55 - is totally
97:57 - okay
97:58 - you can definitely do so you'll just
98:01 - have to change the path if you want to
98:03 - set up the entire folder with bunch of
98:05 - CSS files you can definitely do so
98:08 - they don't have to be separate files in
98:11 - the source
98:13 - and as far as the logic I just wanna
98:17 - create a reset
98:19 - and then add to a body
98:22 - from family background and a color then
98:24 - we'll import and then we'll worry about
98:26 - the classes
98:28 - so let's start over here so I'm going to
98:30 - navigate to Source again if you want you
98:32 - can create a folder just your path is
98:34 - going to change I really want to
98:36 - emphasize that
98:37 - because I keep getting questions about
98:40 - it so I want to answer them here so
98:42 - let's start here with index CSS as
98:44 - always if you want to call this banana
98:46 - CSS
98:48 - it's also a cool option let's go here
98:51 - with that reset
98:52 - so margin margin zero
98:56 - batting zero
98:58 - and box sizing equal to a border box
99:03 - border box okay beautiful and then let's
99:05 - select the body now of course as you're
99:07 - looking at the browser you won't see any
99:09 - changes
99:10 - in order for those changes to take place
99:13 - we do need to import so first let's just
99:16 - set up those Styles we're gonna go here
99:18 - with font family and I'm going to set it
99:20 - equal to a system font slightly that is
99:24 - actually
99:25 - my preference then let's go with
99:28 - background and we're gonna go with
99:31 - hashtag F1 F5
99:35 - and f8 okay so that's the gray one and
99:39 - then as far as the color I'm gonna go
99:40 - with hashtag 222
99:42 - let's save it like I said the browser
99:47 - still displays the same list and now
99:50 - let's navigate to index.js and we want
99:53 - to import that index CSS
99:56 - now later when we import JavaScript
99:59 - files you'll see that we don't need to
100:02 - add extension
100:03 - and for the most part we'll say what we
100:06 - want to import whether that is some kind
100:09 - of array or whether that is the
100:12 - component when it comes to CSS we want
100:15 - to grab the entire file and we must must
100:18 - must must provide the file extension so
100:21 - since I have index CSS in the index.js I
100:24 - want to go with import and then like I
100:27 - said we need to go with the path so
100:30 - this is our own asset
100:33 - these are assets that are coming from
100:35 - the libraries so when it comes to
100:37 - libraries we don't need to provide a
100:39 - path libraries are installed so we just
100:42 - need to provide the library name now
100:45 - when it comes to our own assets we need
100:47 - to provide a path to that asset and it's
100:51 - always going to start with DOT now there
100:54 - might be two dots if we have to go one
100:57 - level up but one that means that we're
101:00 - in the same folder
101:01 - so in the same folder we go with Dot and
101:04 - then forward slash and notice it right
101:06 - away offers me the test now I don't want
101:09 - to test instead what I want is index and
101:13 - then Dot and like I said the entire
101:15 - file name including the extension with
101:19 - the JavaScript files you won't have to
101:20 - do that and the moment we save we should
101:24 - see some changes and check it out it
101:27 - looks like
101:29 - some changes were applied now it's kind
101:31 - of hard to see so let me navigate to the
101:33 - big screen so notice this is our Giant
101:36 - image and then we have some text then
101:37 - this is the background now if you want
101:39 - to take a look as always
101:41 - just go to developer tools and you'll
101:44 - notice that we have some Styles already
101:47 - okay awesome so now let's keep working
101:51 - I want to style the book list and I also
101:54 - want to style the book
101:57 - my single component
101:59 - and essentially we just want to add the
102:01 - class
102:02 - now of course you can style in the index
102:06 - CSS like you normally would let's say if
102:08 - you want to select the section but in
102:10 - most cases you would use some kind of
102:12 - class and we just need to remember that
102:15 - in react there is no class so I'm gonna
102:18 - go here with some value and if I'll save
102:21 - if we navigate to the browser
102:24 - in the console we should see invalid
102:27 - down property Clash did you mean class
102:29 - name
102:31 - so yes when it comes to react if we want
102:33 - to add a class in the jsx we need to go
102:37 - with class name not just class and once
102:40 - we do that
102:41 - it's exactly the same as we normally
102:43 - would in
102:45 - HTML basically we add the class and
102:47 - we're good to go we have the Styles and
102:49 - we don't need to worry about anything
102:51 - else just the name is a little bit
102:53 - different and in here I'm going to go
102:55 - with book list
102:58 - so book list and then the same I'll
103:02 - apply to the book
103:04 - so let me copy and paste I want to go to
103:06 - the article
103:07 - and then instead of book list it's going
103:10 - to be a book
103:11 - and basically I want to set up some kind
103:15 - of grid layout once we get to 768
103:21 - um as far as the book well I just want
103:24 - to add some background make sure that
103:26 - the image sits nicely in the card as
103:28 - well as add some styles to you a heading
103:31 - 2. so let's navigate back to index CSS
103:34 - first let's just grab the book list I'm
103:37 - going to set up the width to be 90 of
103:41 - the screen width then Max width is going
103:44 - to be 1170.
103:47 - so it's always going to be at least 90
103:49 - percent of the screen width but it's
103:52 - never going to be bigger than 1170. I
103:55 - want to add some margin top bottom five
103:57 - Rems I want to place it in the center so
104:00 - I'm going to go with Auto and then I'll
104:01 - right away display grid
104:04 - and as far as the gap for the rows and
104:07 - the columns it's going to be two Rems
104:09 - again
104:11 - the problem right now is the image
104:14 - since the size is quite big that's why
104:17 - we have this look so you know what I'm
104:20 - actually going to skip a little bit and
104:21 - I'm just going to say book so now I'm
104:23 - selecting the article that has the class
104:26 - and you know what I'll right away add
104:29 - this IMG so I'll select the image and
104:31 - I'm just going to say that width should
104:33 - always be 100 so now it will nicely fit
104:36 - in our card and object fit is going to
104:39 - be equal to a cover we save it and
104:43 - notice now of course
104:45 - our project looks more presentable now
104:47 - back to the book list once we get to 768
104:51 - I want to set up that three column
104:53 - layout so in here let's go with media
104:57 - media okay screen and we're going to add
105:02 - a Min width
105:04 - so let's go here with and and min
105:07 - width and that is going to be equal to
105:09 - seven
105:11 - 68 pixels so once we get to that screen
105:15 - size
105:16 - we'll have that three column layout so
105:19 - book list here and then inside of it
105:23 - let's go with grid template columns
105:25 - that's the property repeat and three and
105:28 - one fraction let's save it as you can
105:31 - see on a small screen
105:33 - there's no difference but once we get to
105:35 - the big screen we have nice three column
105:38 - layout and now let me just continue with
105:42 - the book
105:43 - first I want to add some background and
105:45 - I'm gonna go with the white one so
105:47 - hashtag FFF then we want to go with
105:51 - border radius and that is going to be
105:53 - equal to 1 Rems then we'll add a little
105:55 - bit of padding
105:57 - in my case I'm gonna go with two Rems
106:00 - and then text align Center so Place
106:03 - everything in the center
106:05 - we already have the image one so so we
106:08 - really need to focus on heading two
106:10 - that's it so book heading two
106:14 - and then margin top one REM and as far
106:19 - as the font size I think I'm gonna go
106:20 - with one Rems and now what I can do is
106:25 - set up the zoom again to 175 since
106:28 - everything is nicely displayed in the
106:31 - browser and again if we take a look at
106:33 - the
106:34 - bigger browser window we can also see a
106:38 - nice list so that's how we can add
106:40 - the most basic CSS to our react project
106:43 - we create a CSS file again I'm going to
106:48 - repeat yes
106:50 - can be index it can be shaken back CSS
106:53 - whatever if you want to set up the
106:55 - folder the only difference is when you
106:57 - import then of course you need to start
106:59 - with DOT since it's going to be in the
107:01 - same folder then forward slash the
107:04 - folder name and then the file
107:06 - effectively we want to import everything
107:08 - so later with JavaScript you'll see how
107:10 - we're importing something specific from
107:12 - the file whether that is component
107:14 - whether that is a data but with CSS we
107:17 - grab everything and we need to provide
107:20 - always always a extension as well which
107:23 - is not something we're gonna have to do
107:25 - with the JavaScript files
107:28 - with this in place now let's talk about
107:30 - the images in react okay and once we
107:34 - know how we can apply
107:36 - CSS to our react project now let's talk
107:39 - about images and I can tell you right
107:42 - away that
107:43 - it's an optional video technically if
107:46 - you don't want to follow along you don't
107:48 - have to but again it's the case where
107:51 - I'm getting questions about it in the
107:53 - course q a so I just thought that it's
107:56 - very useful if I showcase everything
107:59 - step by step
108:01 - and essentially when it comes to images
108:04 - we have three options
108:07 - we have external images that are hosted
108:10 - on a different server please keep
108:13 - something in mind
108:14 - this image
108:16 - is hosted
108:18 - on a different server
108:21 - so
108:22 - Amazon
108:23 - essentially
108:25 - is providing this asset so we're not
108:27 - doing anything we just take this URL
108:31 - and we provide it for our image tag and
108:34 - you can definitely take this URL and
108:35 - you'll see that this is the image
108:38 - so hopefully that is clear that's our
108:40 - first option so let's say when we'll be
108:42 - serving our data from our own database
108:45 - or getting some external API
108:48 - if there's going to be an asset for
108:50 - example image asset then there's always
108:53 - going to be a URL that points back to
108:56 - some kind of external server so that's
109:00 - our first option
109:01 - pretty straightforward correct just
109:03 - provide the URL and we're good to go
109:06 - and after that we have two options for
109:08 - local images one in the public folder
109:11 - which we're going to cover in this video
109:13 - but since it's less performant
109:17 - it's not something we're going to
109:19 - implement in our projects
109:22 - and then we have local images in the
109:24 - source folder which is a better solution
109:26 - for assets since under the hood they get
109:29 - optimized so throughout the course we'll
109:32 - stick with the source folder if we have
109:34 - local images but since we haven't
109:36 - covered the imports and exports and all
109:38 - that and since we'll have to utilize the
109:40 - S6 modules for that for now
109:43 - we'll just put it on hold
109:45 - but since I want you to be aware of this
109:48 - option of public folder even though it's
109:51 - not something we're going to implement
109:52 - since it's less performant in this video
109:55 - I'll show you how we can set it up again
109:57 - I'm getting questions in course q a
110:00 - so
110:01 - I might as well cover everything step by
110:03 - step and essentially the steps are
110:06 - following we want to save the image it
110:08 - can be any image but of course I'll use
110:10 - same image
110:12 - we want to create a images folder in
110:14 - public now technically you don't have to
110:17 - again create the folder but since in
110:20 - most cases you'll have multiple assets
110:23 - for your project it kind of makes sense
110:25 - to set up the folder structure as long
110:28 - as that image is in a public it's going
110:30 - to be available so keep in mind
110:32 - technically you don't have to have the
110:34 - images folder and then we want to copy
110:36 - and paste the image we downloaded
110:39 - we want to rename it now that's totally
110:41 - optional but in my case I'll do that and
110:44 - then in a source where we have the image
110:47 - stack we want to replace the URL
110:49 - so instead of the external one we'll use
110:54 - the internal one and in the process
110:55 - you'll see that pretty much any asset we
110:58 - add to the public is right away publicly
111:01 - available hopefully that makes sense so
111:04 - in my case I know that I'm going to call
111:06 - this book one and in the source notice
111:09 - I'm going to go forward slash images
111:10 - because it's in the folder if it
111:12 - wouldn't be in folder then of course I
111:14 - would just go with DOT forward slash and
111:15 - then the file name and then book and the
111:19 - full extension so let's try this one out
111:23 - I'm going to navigate here I believe I
111:25 - can actually
111:26 - get it from the source as well but just
111:29 - to Showcase that of course
111:31 - we can get it from the entire list let's
111:34 - navigate here notice the save image as
111:36 - option and I'm gonna go right away over
111:39 - here and I'm gonna say book and one
111:43 - let's save the file now it's on a
111:46 - desktop I want to navigate
111:48 - to my desktop I'm going to open up my
111:51 - project
111:53 - okay then very important we want to
111:56 - place this in the public so not in a
111:58 - source The Source option will cover
112:00 - later we want to go with images
112:03 - then we want to drag and drop this
112:05 - sucker here and then this one over here
112:09 - and once it's available you'll actually
112:11 - notice
112:13 - if you take the URL now
112:17 - again in my case the name is following
112:20 - but if you use a different name then of
112:22 - course you need to use that one if you
112:25 - take here this forward slash and added
112:28 - to your localhost 3000 you'll see that
112:32 - right away it's available so I have this
112:34 - localhost 3000 so that's the server
112:37 - that I'm working with notice if we copy
112:40 - and paste
112:41 - the full path so images and then book
112:45 - and whatever extension if I press here
112:48 - notice this is going to be my image so
112:50 - whatever we place in the public right
112:52 - away is publicly available and what that
112:56 - means is that we can also use it in our
112:58 - code
112:59 - so now we just want to navigate back to
113:01 - index.js
113:03 - and instead of this external URL
113:07 - we want to go dot forward slash
113:10 - then images and then book one on the
113:15 - extension so essentially whatever we
113:17 - place over there
113:19 - is immediately available in our code
113:22 - as well as in the browser
113:25 - again the reason why this is not a
113:30 - popular option is because
113:33 - these assets
113:35 - don't get optimized so later when we'll
113:38 - place our Assets in the source folder
113:40 - under the hood they get optimized
113:43 - and therefore
113:45 - the end result is better our application
113:48 - is faster
113:49 - but yes
113:51 - you also have an option to
113:53 - put your assets in the public and then
113:58 - access them in a code or provide them in
114:02 - the browser and lastly I just want to
114:04 - showcase that if you go back to your
114:08 - project and again inspect the elements
114:12 - you'll see now that the path
114:15 - URL path actually goes back to our own
114:18 - server and notice again this is going to
114:21 - be the full path localhost so that's our
114:24 - server then images and then book one
114:27 - so since the image the asset is on the
114:32 - same
114:33 - server we don't need to go with the full
114:35 - URL essentially we just need to set up a
114:38 - path that is relative
114:40 - to our public folder hopefully it's
114:44 - clear and up next let's talk about CSS
114:47 - in jsx all right and once we're familiar
114:51 - how we can add
114:53 - styles using external style sheet now
114:56 - let's take a look how we can add CSS
114:59 - in our jsx and effectively we just need
115:03 - to pick the element
115:04 - we want to apply our styles to and then
115:09 - we need to go with style attribute and
115:13 - we need to set it equal to the curly
115:16 - braces
115:17 - and essentially these curly braces just
115:20 - mean that we're going back to the
115:23 - JavaScript plan and we'll discuss them
115:26 - in more detail in one of the following
115:29 - videos when we cover the rules of jsx
115:34 - basically when we cover how we can add
115:36 - JavaScript to jsx for now just focus
115:39 - that you need to provide the curly
115:41 - brushes and then inside of it we need to
115:44 - provide a JavaScript object so please
115:47 - don't think that it's some kind of
115:49 - special
115:52 - react syntax where you need to go with
115:55 - these double curlies no
115:57 - effectively since we need to provide the
116:00 - object here that's why I have this
116:02 - result we always start with one curly
116:05 - braces and then at the end of the video
116:07 - I'll show you how we essentially can
116:09 - just pass the reference to the object
116:12 - now when God's about the object is that
116:15 - it's a JavaScript object what that means
116:18 - is that if you have a CSS property
116:21 - that has The Hyphen you'll have to
116:24 - capitalize and as far as the values
116:26 - they'll have to be here as string so
116:29 - let's try it out here I'm going to save
116:31 - let's navigate to
116:33 - index.js and let's look for a heading
116:36 - four so like I said we go here with
116:38 - style notice automatically it's set up
116:41 - with the curly braces and here we
116:43 - provide that JavaScript object
116:46 - so let's start here with color and as
116:48 - far as the value again key value Pairs
116:50 - and then the values are as strings so
116:54 - hashtag 617
116:57 - and we want to go d98 then we want to go
117:02 - with font size so let's add a comma not
117:05 - a semicolon and go with font size and
117:08 - that is equal to again
117:11 - quotation marks
117:13 - 0.75
117:14 - Rems by the way it looks like in the
117:18 - readme I'm missing the RM part
117:21 - so of course in your case that's not
117:22 - going to be the case anymore so let me
117:24 - save here and then
117:27 - we're looking for a third one and that
117:29 - is going to be margin and again we are
117:32 - not going with margin hyphen top we go
117:35 - here with margin top and we want to set
117:37 - it equal to 0.5
117:39 - Rems let's save it
117:42 - as you can see the styles were applied
117:45 - but one gotcha we need to be aware of I
117:49 - guess one more gotcha we need to be
117:51 - aware of
117:53 - at the end of the day these are inline
117:55 - styles
117:56 - so what that means General CSS rules
118:00 - apply
118:01 - so what am I talking about well if let's
118:04 - say
118:06 - you'll try to select the same heading 4
118:09 - in CSS and try to change the properties
118:13 - that we already set up over here with
118:16 - the inline one it's not going to work so
118:19 - letter spacing yeah it's going to work
118:20 - since we don't have it over here
118:23 - but as far as the color if I try to go
118:26 - with red it's not going to work and in
118:28 - order to speed this up I'm just going to
118:29 - copy
118:30 - so we're going to go here copy and paste
118:32 - the notice yeah the letter spacing
118:34 - change but not the color now why am I
118:37 - telling you that is because later
118:39 - as you're progressing with react you'll
118:42 - most likely start working with external
118:44 - libraries
118:46 - I don't know maybe a slider library or a
118:49 - model Library whatever
118:51 - and one thing to be aware of
118:54 - those libraries do use inline Styles
118:57 - here and there
118:58 - some quite often some less so keep in
119:01 - mind if you'll want to change some
119:03 - styles that the library provides
119:08 - sometimes it's not going to be enough to
119:10 - just go to the CSS and change it
119:14 - if the library is using inline Styles
119:16 - you'll have to figure out how you can
119:18 - modify those inline Styles and only then
119:20 - you will be successful so don't get
119:22 - frustrated if you install the library
119:24 - and you try to
119:26 - add your own Styles but it's not working
119:28 - always always
119:30 - first check the elements and if you see
119:33 - the inline Styles you know that you'll
119:35 - have to do more work and lastly I just
119:38 - want to mention that yes there is an
119:41 - alternative
119:42 - remember
119:43 - we're providing here a object now we're
119:47 - writing JavaScript correct
119:49 - so what we can do
119:51 - well we can create one
119:53 - and we can create the object here we can
119:57 - create it outside of the component that
119:59 - doesn't really matter and we can just
120:01 - provide the reference notice how the
120:04 - values don't change
120:06 - values exactly are the same
120:08 - the only difference is that now instead
120:11 - of passing that object directly
120:14 - we just set up the reference so let's
120:16 - try it out I'm going to go to index.js
120:19 - and this is the case where if you have
120:22 - of course the implicit return you will
120:25 - have to refactor to explicit since I'm
120:28 - going to be setting up this object over
120:29 - here so you won't be able to do that
120:32 - with a title
120:33 - but since the author is right away
120:36 - set up as a explicit I'm good to go so
120:41 - let me go here and set up that long name
120:44 - so const and then inline heading
120:49 - Styles and that is equal to my object
120:52 - and effectively I'll just cut it out
120:54 - here
120:55 - I'll cut it out here copy and paste and
120:58 - then we go with inline heading Styles
121:01 - now the reason why I'm showing you that
121:02 - is because again
121:05 - if you'll work with someone else's code
121:07 - you might see either of these Solutions
121:11 - you might see the object passed in
121:14 - directly or you might see them
121:18 - separately and basically
121:21 - this is the point that I want to make in
121:23 - this video for the most part
121:25 - there are multiple approaches available
121:29 - so there is no right or wrong
121:31 - if your preference is to set up the
121:33 - objects and pass them in this way
121:35 - go ahead and do that if not if you want
121:38 - to pass them directly in the code that's
121:41 - also an option as long as the result is
121:43 - the same it really comes down to your
121:46 - preference
121:47 - now why we won't use the inline Styles
121:50 - in this course because if you ever work
121:53 - with inline Styles you know that they're
121:54 - somewhat of a pain so yes it's a good
121:57 - solution here and there but in general
121:59 - you'll want to stick with external style
122:02 - sheet maybe some CSS libraries and all
122:04 - that because adding styles of course one
122:07 - by one to each element is somewhat
122:09 - painful but please be aware of this
122:11 - option because you might see that in
122:15 - someone else's code all right and up
122:18 - next let's see how we can use JavaScript
122:21 - in jsx so in the previous video we
122:24 - covered CSS now let's talk about
122:26 - JavaScript and before we continue I want
122:30 - to refactor this to a single book
122:33 - component and I'm not going to give you
122:35 - the entire speech one more time
122:37 - essentially my preference is to set up a
122:42 - component with all of these elements so
122:43 - this is exactly what I'm going to do but
122:46 - yes
122:47 - you can always split it up into more
122:51 - components so I want to navigate back
122:53 - and essentially where I have the book
122:56 - I'll remove all of them and basically I
122:59 - just want to grab the elements one by
123:01 - one of course I'll remove the other ones
123:03 - so let me take this one out
123:06 - so this is going to be right after image
123:08 - and I'm also not going to use this
123:12 - inline setup essentially I'm going to
123:15 - add that code in CSS
123:17 - so let me take the heading 4.
123:20 - I'll place right after heading 2. I'll
123:24 - move the style
123:25 - and effectively I just want to copy
123:28 - these Styles and set it up in the index
123:30 - CSS and in order to speed this up I'm
123:34 - going to grab this code as you can see
123:36 - pretty much the same properties and
123:39 - values I just don't want to spend time
123:41 - on typing them so let me navigate back
123:45 - I'll move this one and copy and paste
123:48 - and as far as the index.js well I want
123:51 - to remove all of this so now I have book
123:54 - list
123:56 - with four book components and then I
123:58 - have a book component
124:00 - now the only thing is that I need to
124:03 - remove this semicolon now let's talk
124:06 - about jsx
124:08 - and like we already discussed in the
124:11 - previous video
124:12 - if we add these curlies in jsx that
124:15 - means we're going back to the JavaScript
124:18 - land so essentially we can use our
124:21 - vanilla.js logic inside of the curlers
124:24 - now one big gotcha is that the value
124:28 - must be an expression so essentially it
124:32 - needs to return a value and of course
124:33 - I'll show you the example and I'll also
124:36 - show you what happens if we provide a
124:39 - statement so there's a difference
124:40 - expression returns a value statement
124:43 - does not and let's just start by setting
124:46 - up the variable somewhere here
124:48 - and
124:50 - I'm going to name this title and
124:52 - effectively where we have the heading 2
124:54 - with the title let's pass it in so
124:56 - notice in here we go back
124:59 - to the JavaScript so we set up the
125:00 - curlies and since we have the variable
125:03 - we can directly access it and you'll see
125:06 - what are the benefits back in the index
125:10 - .js
125:12 - let's go over here and let's grab this
125:15 - value
125:17 - for the title so let's cut it out and
125:20 - I'll set it up over here I'll say const
125:22 - title and again you can set it up inside
125:25 - of the component or you can set it up
125:27 - outside of the component in the file or
125:30 - you can set it up in a different file
125:31 - and then import it we just haven't
125:33 - covered the es6 modules yet so let's set
125:36 - it equal to a string so that doesn't
125:38 - change and now instead of
125:41 - card coding here in the heading two
125:44 - we're gonna go here with title and
125:47 - effectively whatever changes we apply
125:50 - right away will be displayed in the
125:52 - browser so it's already somewhat Dynamic
125:55 - now of course we're not getting the data
125:57 - from somewhere else from the external
125:59 - API for example and all that stuff but
126:02 - we're already moving in the right
126:04 - direction
126:05 - so when you think of dynamic think of
126:08 - less hard coding
126:10 - so that's the first then let's take a
126:13 - look how we can set up the author as
126:16 - well
126:17 - so now let me take this value and just
126:19 - to Showcase that it's still going to
126:21 - work
126:22 - I'm gonna go here and let's come up with
126:24 - a value author copy and paste and same
126:27 - deal we go back
126:29 - huge JavaScript land and we simply
126:32 - provide the variable in this case
126:38 - then let me show you some instances
126:41 - where this is going to fail where
126:43 - basically if we'll set up a statement
126:46 - it's not going to work so first let me
126:49 - go right after the heading four and
126:53 - we're gonna go with paragraph So if
126:55 - we'll write a statement and if we'll say
126:57 - let X is let's say equal to 6. pretty
127:02 - much right away you'll get an error and
127:04 - you'll get these quickly lines again we
127:07 - can only pass here an expression
127:09 - and essentially the expression returns a
127:13 - value now this is a side note but if we
127:15 - want to comment something out in jsx we
127:18 - need to go with this syntax and of
127:20 - course there is a shortcut for that so
127:23 - in my case that is command and forward
127:25 - slash but if you want to see in your
127:27 - operating system go to edit and notice
127:31 - it's going to be toggle line comment so
127:34 - that's how we can comment out and of
127:35 - course once I do
127:37 - notice I don't get the error and let me
127:40 - showcase one more time with the new
127:42 - expression so let's say if I have 6 plus
127:45 - 6 this is going to work because again
127:48 - this returns some kind of value
127:51 - hopefully that is clear so every time we
127:54 - want to go back to a JavaScript
127:58 - we just set up the curlies and we can
128:00 - start applying our logic and lastly let
128:04 - me just showcase that we can do more
128:07 - than just accessing the variables of
128:09 - course when it comes to Strings we have
128:11 - a cool method by the name of two
128:14 - uppercase so we can simply provide that
128:17 - we can invoke it and as you can see we
128:19 - don't get the narrow the author is now
128:23 - in uppercase now I'm going to clean up
128:26 - basically I'll just leave these
128:29 - variables over here
128:30 - and remove these ones just keep in mind
128:33 - that if you ever need a reference you do
128:35 - have a readme so let me remove this also
128:39 - this one as well I also want to clean up
128:41 - this gibberish
128:43 - and up next let's talk about props in
128:46 - react all right and up next let's talk
128:49 - about props and why they're so useful
128:52 - and also so powerful
128:55 - first let's start by doing a little bit
128:58 - of spring cleanup or essentially I just
129:01 - want to set up three variables with all
129:03 - of the values so for author title and
129:05 - image and where I have the book
129:09 - component I want to access them so
129:12 - pretty much the same thing again we're
129:14 - just not
129:16 - hard coding anymore and yes I'll place
129:18 - it above the book list and you'll see in
129:20 - a few videos why so let me move the
129:22 - sticker up first then I want to do the
129:25 - same thing with the author and now let's
129:28 - set up that image one so const
129:31 - const time G is equal to
129:34 - um let's just grab this string now copy
129:37 - and paste and now where I have the
129:39 - source what do we do we set up the
129:41 - curlies so now we're back in JavaScript
129:44 - plan and we provide the variable name
129:46 - awesome then the same we're gonna do
129:49 - with alternative
129:52 - so let's just provide here title and
129:54 - before we go any further let's discuss
129:57 - parameters and arguments and as a note
130:00 - you can actually take this code
130:02 - set it up anywhere in the index.js
130:05 - and
130:07 - effectively is going to run so if I go
130:09 - and inspect the console I should see job
130:12 - and developer so in vanilla Jazz for
130:15 - every function we can provide parameters
130:18 - when we're setting up the function and
130:20 - then when we invoke the function we
130:22 - provide the arguments and then of course
130:24 - whatever logic we have in this case is
130:26 - just a log
130:28 - gets executed okay hopefully we're clear
130:31 - on that and now let me remove this code
130:35 - so what does it have to do with react
130:37 - well
130:38 - but it also has to be some kind of way
130:40 - how we can pass the data down to our
130:43 - component because at the moment yes it's
130:46 - nice yes we're using the variables and
130:48 - all that but ideally of course you would
130:51 - want different
130:54 - books rendered in the browser correct so
130:58 - at the moment we're pretty much
130:59 - rendering the same but we need to come
131:00 - up with a way how we can pass data
131:04 - different data
131:05 - to individual components so we have the
131:08 - same structure but the data is going to
131:10 - be different and the way we do that is
131:13 - by using of the props object so every
131:17 - component we create gets automatically
131:20 - there's props object which essentially
131:24 - is the parameter now we can call this a
131:28 - shake and bake it's an awesome choice
131:31 - but a common convention is calling this
131:33 - props
131:34 - so again it's provided right away by
131:37 - default so we don't need to do anything
131:39 - so instead of creating a component and
131:42 - then saying yeah there's going to be a
131:44 - param it's right away provided
131:46 - so react effectively injects that
131:50 - so if I type here props I know that this
131:53 - props will automatically be passed down
131:56 - to me and now let's go with log and we
131:58 - have a few places where we can log that
132:00 - we can log it here in the function body
132:02 - again above the return if you place
132:05 - anything after returns not going to run
132:08 - or we can do that directly here in the
132:12 - jsx so we can go with console and log
132:15 - now I'll actually remove this one right
132:18 - away
132:19 - but I just want to showcase and you know
132:21 - there's going to be too many console
132:23 - logs so I'll go back to two books for
132:25 - now
132:26 - and then eventually we'll add more so if
132:28 - you take a look at the console you'll
132:30 - see four objects again the reason why we
132:32 - have four because we have two console
132:33 - logs and we have two components so if we
132:36 - do two times two yes we have four and
132:39 - check it out now for now it's an empty
132:41 - object but that's already a good start
132:44 - that means that we'll be able to access
132:46 - something now we have not provided that
132:49 - something
132:51 - so we have an empty object but it is a
132:54 - awesome start and the way we provide
132:56 - those values is here
132:58 - so again
133:01 - props here when we set up the component
133:04 - but then when we render the component
133:08 - that's where we provide eprops and again
133:11 - we'll start with the manual way where I
133:13 - can go here with job and then equals and
133:16 - then if it's string then we need to use
133:18 - the quotation mark if it's a number or
133:21 - variable whatever then we need to
133:23 - provide the curlish so
133:25 - in here I can go job developer
133:28 - and as far as the second book why don't
133:31 - we change things around I'm going to say
133:33 - here random
133:35 - title and then the second one will be
133:38 - number like I said
133:39 - when it comes to numbers we need to use
133:41 - the curlies
133:43 - if we have a string then we just use
133:44 - quotation marks and if let's say we want
133:47 - to provide here the variable same deal
133:50 - curlies and then we can access it for
133:52 - now let's just use the number I'm going
133:54 - to say 22. and the moment I say like I
133:57 - said I will remove this log there's no
133:59 - need to over complicate things
134:01 - now what I see in the console job
134:05 - developer so this is an object
134:07 - that's the props object
134:09 - and then for the second one I have title
134:12 - and number okay so this is clear now how
134:17 - we can access those values
134:19 - well
134:21 - just like any regular object it's an
134:23 - object these are the properties and
134:25 - these are the values what do we normally
134:27 - do in JavaScript we go with object dot
134:30 - property correct same deal over here
134:33 - now since these are extra props
134:37 - basically since we're just testing I'm
134:39 - going to add more paragraphs and I'll
134:41 - copy and paste essentially the most
134:44 - basic way we go here with the curlies so
134:47 - we go back to the JavaScript plan and we
134:49 - go with props job
134:52 - then we want to set up props again we're
134:55 - referencing the same object go title and
134:59 - then we go with props and a number let's
135:04 - save it and don't care about the console
135:07 - right now but you'll notice that
135:09 - basically
135:12 - our components now have some extra
135:14 - values
135:15 - now one important thing if you don't
135:17 - provide the prop
135:19 - even though in your structure you're
135:21 - accessing it
135:22 - you have nothing there so notice how the
135:25 - first component has the job prop with
135:27 - this value I don't see it anywhere in my
135:30 - second component why well because it's
135:32 - not over here it's not present in the
135:35 - second component so that's very
135:36 - important
135:37 - to remember
135:39 - the prop will be only displayed if it's
135:42 - actually provided
135:44 - so the first one doesn't get the title
135:47 - or number notice nothing is rendered in
135:50 - the browser why well because we don't
135:51 - provide them
135:53 - so again
135:54 - you'll have the structure
135:56 - you'll provide the props and then you'll
135:58 - be able to display them if the prop is
136:00 - not provided
136:02 - either you're not going to display
136:03 - anything or you'll get an error let's
136:05 - say if you're trying to access some kind
136:07 - of value that doesn't exist please keep
136:10 - that in mind
136:11 - so that should do it for
136:14 - the generic setup again
136:16 - we provide here the prop name then we
136:19 - provide the value now let's use the
136:22 - author title and image
136:25 - so instead of the testing ones now let's
136:28 - actually provide those values so I'm
136:31 - going to remove all these paragraphs
136:33 - let's save and then one by one let's
136:36 - provide them
136:37 - so what is the first value author now as
136:40 - far as the prop name does it have to
136:42 - match here no
136:44 - you can write banana but when you're
136:47 - accessing that's when you have to go
136:49 - with props.banana
136:51 - so this is the name this is the value
136:53 - and yes
136:55 - a common of course convention is to use
136:58 - the same one but it's not always
136:59 - possible so we just go with author
137:01 - author curlies we go back to JavaScript
137:04 - and then we provide the variable and the
137:06 - same thing over here title is equal to
137:09 - battle and then lastly what do we have
137:11 - we have the image same deal we provide
137:14 - all of them and in order to speed this
137:16 - up I'll grab this and I'll copy and
137:20 - paste and once we have successfully set
137:23 - up all the props now of course instead
137:26 - of accessing these variables directly we
137:29 - need to go with props dot image props
137:33 - dot title and yes of course in the
137:35 - following videos we'll take a look how
137:36 - we can shorten this up
137:38 - but for now object property object
137:41 - property and effectively it matches
137:44 - whatever we're passing here
137:46 - so we want to go here with props dot
137:49 - title and then we want to go with props
137:51 - dot author once we save if everything is
137:55 - correct we'll have the same list
137:58 - but the difference right now of course
138:00 - that we are providing these values
138:02 - dynamically which is really cool but we
138:05 - also need to keep in mind that if we
138:07 - don't provide some specific prop well
138:10 - we're not going to render anything on
138:12 - the screen check it out since the second
138:15 - book component doesn't get the image we
138:19 - just see the alternative hopefully that
138:21 - is clear and in the next video we'll
138:23 - take a look how we can
138:24 - make our setup more Dynamic all right
138:28 - and once we're clear on the most
138:31 - straightforward setup
138:33 - now let's make things more interesting
138:36 - and create two of those objects yes
138:40 - we won't have totally Dynamic setup yet
138:43 - that is still coming where basically
138:45 - we'll just iterate over the list grab
138:47 - the values and render everything on the
138:49 - screen but at least we'll be moving in
138:51 - the right direction so here's what I
138:53 - want you to do first create a object
138:57 - with
138:59 - the same three variables we already used
139:02 - in the previous one so author title and
139:04 - image now create a object in my case I'm
139:08 - going to call this first book and set
139:10 - them up as properties
139:12 - then
139:13 - create a second object and essentially
139:16 - just go to Amazon and get those values
139:20 - and don't worry about the local image
139:22 - just use the external one it's going to
139:24 - be faster unless you really want to just
139:26 - keep in mind eventually we'll still
139:28 - switch back to a local
139:31 - image option using source so it doesn't
139:34 - really matter and then we'll see how we
139:37 - can provide unique values
139:39 - paste on our data so let's start working
139:43 - on that where first in the index.js I
139:47 - want to create two
139:49 - objects I'm going to go here with const
139:51 - and then first book that's the object
139:54 - and then we want to grab all of those
139:57 - values I'm not sure whether I'm going to
139:59 - be able to just copy and paste so I'm
140:03 - gonna do it this way so author then we
140:06 - want to grab your title
140:08 - that is equal to this one
140:12 - and then lastly I have IMG
140:15 - and that is equal
140:17 - to list string value we can remove the
140:20 - properties
140:21 - and let's just add for sure that image
140:24 - hopefully it's clear
140:26 - uh we need to provide all of the props
140:28 - okay that's good as you can see we get
140:31 - an error since there are no properties
140:33 - anymore don't worry we'll fix that in a
140:34 - second
140:35 - so now we want to copy and paste and
140:38 - let's come up with a different name of
140:40 - course we can have two variables with
140:42 - the same name
140:43 - then let's navigate
140:46 - to our list
140:48 - and I'm just going to look for some
140:50 - other random book and as I said this one
140:54 - actually is a very good book again this
140:56 - is not
140:57 - some kind of Amazon promotion I'm just
141:00 - saying it is a good book so let me grab
141:03 - the title I guess first
141:06 - then we want to grab the
141:09 - author by the way
141:12 - collect something
141:14 - we want to take the title here
141:17 - provide so that's the author and then
141:20 - lastly we want to get that image so I'm
141:23 - gonna go with copy image address and we
141:26 - just want to provide it here so copy and
141:29 - paste and now instead of accessing the
141:32 - variables we're gonna go with first book
141:35 - or the second book so either of these
141:37 - objects and we can probably put already
141:40 - two and two together we'll use basically
141:43 - one object
141:44 - per component and essentially we just
141:47 - want to access
141:48 - those properties so instead of author
141:51 - I'm going to go here with the first book
141:54 - and in order to speed this up I'll just
141:56 - set up multiple cursors in my case that
141:58 - is with option and the mouse click and
142:02 - I'll just say first
142:05 - book Dot and then whatever property and
142:08 - essentially we want to repeat
142:10 - for a second component as well so again
142:13 - same deal
142:15 - we use multiple cursors
142:18 - second book and then dot once we save
142:21 - check it out now we have already a
142:25 - dynamic list
142:26 - again it's not totally Dynamic but we're
142:29 - moving in the right direction and if you
142:32 - take a look at our console log you'll
142:35 - see the values that we're getting
142:37 - so these are already different values
142:40 - the structure is the same but since
142:42 - we're providing different values to our
142:45 - props the result that we see on the
142:47 - screen is also different
142:50 - structure is the same the result is
142:53 - different since the values the data that
142:55 - we're providing is different right and
142:58 - up next let's take a breather and let's
143:01 - discuss multiple approaches how we can
143:04 - access props in the component and before
143:07 - we continue
143:08 - let me just make something extremely
143:11 - clear there is no right or wrong
143:14 - again I know you're probably sick of me
143:16 - saying this but it really comes down to
143:18 - your preference the reason why I'm
143:19 - showing multiple approaches because I
143:21 - want you to be aware
143:23 - just in case you see that in someone
143:25 - else's code
143:27 - also in this video we will highly highly
143:30 - highly lean on the the structuring
143:33 - concept in vanilla Jazz and if you're
143:36 - not familiar with the concept or if you
143:38 - see
143:39 - a feature during the video that maybe is
143:43 - new to you I suggest watching this video
143:45 - the JS nuggets playlist on my YouTube
143:49 - channel and the link is over here and in
143:52 - there we cover everything in vanilla.js
143:54 - setup and in more detail and ensure the
143:58 - structuring in vanilla.js just allows us
144:02 - to pull out the properties
144:04 - so we don't need to reference the object
144:07 - anymore and in the long run it just
144:10 - saves us time as far as the example
144:12 - again if you want to copy and paste you
144:15 - can definitely do so you can set it up
144:18 - in the index.js but I'm just gonna
144:21 - show you here in the readme that if we
144:23 - have an object with some kind of
144:24 - properties instead of doing this so the
144:27 - object name and then the property we can
144:29 - just pull them out so that's the the
144:31 - structuring we need to reference of
144:32 - course the main object and here we go
144:35 - with whatever properties we want to pull
144:37 - out and then in rest of the code
144:41 - we just need to reference these two so
144:44 - we don't have to go anymore with some
144:46 - object and then dot name and in our case
144:51 - it just allows us to do this
144:54 - where we have the perhaps object and
144:57 - instead of going props.props dot props
144:59 - dot we can simply go with props pull out
145:03 - the properties that we know exist over
145:05 - there again
145:07 - let me repeat one more time you cannot
145:10 - magically access the prop if it's not
145:12 - there so if you don't provide when you
145:14 - set up the component
145:16 - it's not going to be there
145:19 - hopefully that is clear and essentially
145:21 - then we can just go with the property
145:24 - name so let's try it out let me navigate
145:26 - here
145:27 - I know that I'll access over there
145:31 - three
145:32 - props
145:33 - so object with three properties image
145:36 - title and author
145:39 - and that is equal to a propped object so
145:43 - what do we need to do well now we just
145:46 - need to remove
145:48 - all the prop instances that's it let's
145:51 - save and if everything is correct the
145:53 - result is going to be exactly the same
145:54 - the difference well we need to type less
145:57 - we just reference these properties once
146:00 - and we're good to go now alternatively
146:04 - and this is something that I do discuss
146:06 - in the video so again if this is new to
146:08 - you I strongly suggest referencing that
146:10 - video we can also destructure
146:14 - in function parameters so in our case
146:18 - that's the props object now keep in mind
146:21 - though once we do that if you'll try to
146:23 - cancel log props it's not going to be
146:26 - defined so what am I talking about well
146:29 - this is a function
146:30 - right
146:32 - and at the moment we have props
146:34 - parameter now since it's an object we
146:38 - destructured inside of the function body
146:41 - instead I'm going to say all right I
146:44 - know that the object is going to be
146:46 - there and I right away want to pull
146:49 - these properties out
146:51 - Again Properties need to match exactly
146:53 - and everything
146:55 - but essentially we don't need to add
146:57 - this line of code we can do directly
146:59 - here in the function parameters let's
147:03 - remove this
147:04 - save and check it out again everything
147:07 - still works and like I mentioned
147:10 - in the beginning of the video it really
147:12 - comes down to your preference you'll see
147:14 - some people who use this type of setup
147:17 - and you'll see some that implement this
147:20 - one and it really comes down to
147:23 - what is your preference
147:26 - which code makes the most sense to you
147:28 - at the end of the day they deliver the
147:32 - exact same result instead of using
147:35 - props.props.props Dot we just grab the
147:38 - prop
147:39 - and set it up in our jsx okay and up
147:44 - next let's discuss special prop in react
147:46 - called children
147:48 - which provides access to everything we
147:50 - render
147:51 - between component tags as I say note the
147:54 - goal of this video is just to showcase
147:57 - the general concept of children prop
148:00 - since honestly at least during the
148:03 - course we'll only use it when we need to
148:06 - set up context API
148:09 - so if by the end of the video you're
148:12 - still iffy on some stuff or just don't
148:15 - see bunch of use cases for children prop
148:18 - it's totally okay
148:20 - we'll return to this concept
148:23 - when we cover context API
148:27 - and essentially let's imagine this
148:30 - scenario what if for some reason
148:33 - I want to render paragraph and a button
148:38 - in one of the components it doesn't
148:40 - really matter which one just one of them
148:44 - well you can say we can go to a book
148:47 - component let's add some dummy text
148:51 - and let's also add a button
148:54 - and let's just say click me let's save
148:58 - and everything is awesome but of course
149:01 - since we're adding it
149:03 - to the component all the instances get
149:07 - the paragraph as well as the button
149:10 - so what's the solution well we could
149:13 - render it
149:14 - in between the tags we just need to pick
149:16 - the component so in my case I'm gonna go
149:20 - with the second one or I'm sorry I'm
149:23 - working with the first one I'm telling
149:24 - you the second one so I want to do that
149:26 - with the first one but again it doesn't
149:28 - really matter which one we just want to
149:31 - create a opening and closing tag
149:33 - then and as I know this is the incorrect
149:36 - syntax we want to do it this way and
149:39 - then place the paragraph and the button
149:41 - in between those Stacks so let's get it
149:44 - out here
149:45 - and let's set it up and the moment I
149:48 - save I actually don't see them in any of
149:51 - the components so what's up with that
149:53 - well you see
149:55 - if we want to render something that is
149:59 - between the component tags we need to
150:02 - use a special prop
150:05 - and the name is children
150:08 - now before we access the children let me
150:11 - just make something really clear
150:13 - since we're already destructuring in the
150:15 - component since we're accessing the
150:18 - object we'll need to provide the prop
150:20 - over here
150:22 - now if you still have this setup where
150:24 - you have props you can log it and you'll
150:26 - see the children and that's why I will
150:28 - switch to this one to the second
150:30 - approach just so you can see that one
150:33 - component
150:34 - has the props and the other one doesn't
150:36 - again you can use either of these
150:39 - approaches just remember that children
150:41 - is going to be over here
150:43 - if you're destructuring right away in
150:45 - the parameters so let me just showcase
150:48 - that so we go here with children prop
150:49 - and the name must be exact so don't type
150:53 - here children like this don't say
150:56 - children's or whatever no it has to be
150:58 - children's so this is an extremely
151:00 - important point it's a special prop
151:02 - provided by react so we cannot use
151:05 - whatever name we like we have to use
151:07 - children and if we want to render the
151:10 - children we simply go with curlies and
151:12 - then
151:13 - access the prop let's save it and now
151:17 - you'll notice that the first one has the
151:19 - paragraph as well as the button
151:21 - now we can move this up and down as we
151:25 - like so let's say if I want to place it
151:27 - on top just render Children First
151:30 - again there's really no rule for it
151:34 - really depends on your setup and now let
151:37 - me refactor it just so we can see
151:39 - basically a props and that way I can
151:43 - showcase the children so let me cut this
151:45 - one out I'll say Here Comes copy and
151:49 - paste let's set it equal to props
151:52 - props over here and let's log it
151:55 - so let's go over here with log and let's
151:57 - say props
151:59 - and once I open up the developer tools
152:01 - and console notice over here
152:04 - so I have two objects but the first one
152:07 - actually has this children
152:09 - so notice special prop and essentially
152:13 - we just need to set it up in our jsx now
152:16 - the second one doesn't have that
152:18 - children prop
152:19 - so as a result it doesn't render
152:21 - anything
152:23 - wait let me just showcase how it's going
152:25 - to look like on a big screen so
152:28 - basically we have these two cards and
152:30 - optionally
152:31 - if you want to
152:34 - set up your cards in a way that they're
152:38 - not stretching we just need to add a
152:39 - little bit of CSS logic so
152:43 - let's navigate to index CSS
152:46 - we have book
152:48 - heading four again I'm not going to keep
152:50 - that paragraph and a button but just in
152:53 - case
152:54 - you want to keep it for your reference
152:56 - we can add here margin
152:58 - 1 RM 0 and 0.5
153:02 - so that's for the paragraph and then
153:05 - if you want all your cards to
153:09 - basically start at one point and just
153:12 - end where the content ends you can go
153:14 - here with align items and start and
153:18 - essentially or at least it should work
153:20 - not the line itself sorry align
153:23 - and items and then start and once you
153:25 - say notice so essentially your cards are
153:28 - just going to be spanning as much as the
153:30 - content instead of stretching so by
153:32 - default
153:34 - when it comes to CSS grid it stretches
153:37 - all the items so if this one has a bunch
153:38 - of content then this one will also
153:40 - stretch like I said in my case I'm not
153:43 - going to keep it if you ever need a
153:45 - reference you can always find it in the
153:46 - readme so I'll leave I guess the props
153:50 - in such a way but I'll remove the
153:53 - children
153:54 - I'll move children over here I'll keep
153:57 - the log because
153:59 - pretty often we use it and now let me
154:01 - remove the paragraph as well as the
154:03 - button so that's the general concept
154:06 - behind children which again essentially
154:08 - allows us to access everything we are
154:11 - rendering between the component tags
154:13 - okay and now let's finally set up a
154:16 - proper list and iterate over it which
154:21 - will be our actual setup in all the
154:24 - course projects
154:25 - and most likely in all your other
154:28 - projects as well so yes finally we have
154:32 - arrived at the list which is going to be
154:36 - our typical approach as they said now
154:39 - during this video we'll utilize the rain
154:40 - method called map and if you're not
154:43 - familiar with it please reference this
154:46 - JavaScript nuggets video where I cover
154:49 - it in great detail
154:52 - and essentially we'll start with
154:55 - refactoring
154:56 - first
154:58 - I want to create an array in my case I'm
155:00 - going to call it books and then let's
155:02 - remove everything from the book list
155:05 - and after that I'll show you an error
155:07 - that we're gonna get if we try to render
155:11 - objects so let's get cracking I'm going
155:14 - to navigate back
155:16 - I have two objects now I want to place
155:18 - them in the array
155:20 - so I'm going to say const and books so
155:23 - that's my array and now let's Place both
155:26 - of these objects in there so we don't
155:28 - need the names anymore basically we can
155:30 - just remove this
155:31 - and this we can add right away comma
155:34 - and we can remove this part as well as
155:38 - the semicolon so now I have my structure
155:41 - effectively I have an array
155:44 - of items and each item is that object
155:48 - now also we right away want to remove
155:52 - everything that we have in the book list
155:54 - otherwise of course we're going to get
155:56 - the error and now let me showcase what
155:58 - happens if we try to render objects in
156:02 - react so if I go with the correlation so
156:06 - I'm going back to JavaScript and I'm
156:08 - going to say box so I want to access the
156:10 - books variable
156:11 - and then if we take a look at the
156:15 - console we'll see these giant error
156:18 - messages and essentially here's the deal
156:21 - in react we cannot render
156:24 - object directly in the jsx and I'm
156:28 - purposely showing you this error because
156:31 - throughout your react Journey
156:34 - when you work with data here and there
156:36 - you might see this error so the first
156:38 - thing you want to do is double check the
156:41 - data that you're rendering
156:43 - if you see objects are not valid as
156:45 - react child blah blah blah blah that
156:48 - means
156:49 - you need to double check your data
156:51 - essentially somewhere in your data you
156:54 - have an object and we cannot directly
156:56 - display it in jsx now what's the
157:00 - solution well eventually we'll use map
157:02 - method we'll iterate over pull out the
157:04 - properties
157:05 - and one by one basically pass them to a
157:09 - book component but before we do that
157:12 - let me just show you step by step how we
157:15 - can work with arrays in react so first
157:18 - let me just remove this error again for
157:21 - time being we won't see anything on
157:23 - screen
157:24 - and let's just create a basic array
157:27 - let's say const names noun is equal to I
157:32 - don't know John Peter and Susan why not
157:34 - I'm not being particularly original but
157:37 - hey it's Thursday and I think that
157:41 - regular names are good enough if you
157:43 - want to go on shake and bake Bobby Lee
157:45 - of course you can do that and if I'm
157:49 - gonna go back to my book list and if I'm
157:51 - gonna change and I'll say names once I
157:54 - save I can see that everything is nicely
157:56 - displayed on the screen
157:58 - so we can definitely render array
158:01 - but most likely you will agree with me
158:03 - that
158:04 - it would be nicer if we could wrap these
158:08 - values in some kind of HTML because
158:11 - essentially at the moment I just have
158:14 - here this string so again yes I'm going
158:17 - to go back to the root I'll take a look
158:19 - at the book list and notice effectively
158:22 - I just have these string values
158:24 - so how we can wrap this in some kind of
158:27 - element
158:29 - so instead of displaying these strings
158:31 - essentially we'll display elements well
158:35 - this is where the map method is going to
158:38 - come into play
158:40 - so let me show you first in the readme
158:43 - basically react method creates a new
158:46 - array from calling a function for every
158:50 - array element so
158:52 - I have names array I can use the map
158:56 - method and I'm going to call a callback
158:59 - function for every item in the array and
159:03 - this is going to return a new array
159:05 - and eventually
159:08 - we'll wrap
159:10 - our items
159:12 - the moment these strings
159:14 - in the heading one so let's try this one
159:16 - out back in the index.js I'm going to go
159:19 - here with const and then new
159:22 - names then let's set it equal to names
159:26 - map so again this returns a new array we
159:30 - pass in the Callback function and
159:32 - essentially the first parameter
159:35 - references the item so if the item is
159:38 - going to be an object it will reference
159:39 - the object if the item is string
159:42 - it's going to reference that string and
159:44 - hopefully we are on the same page and
159:47 - since it's a parameter we can name it
159:49 - whatever we want in my case I'm going to
159:50 - call this name and yes this is the case
159:53 - where you can call this a vegetable as
159:56 - long as you reference it correctly
159:57 - you'll be good to go before we do
160:00 - anything let's just see what are those
160:02 - values so console log what do you know I
160:05 - have John Peter and Susan so those are
160:09 - the string values
160:11 - and what's really cool that we can
160:13 - effectively just set up a return
160:17 - and we want to return a HTML element
160:21 - wrapping that specific
160:24 - string of course with objects it's going
160:26 - to be a little bit different but for now
160:28 - we simply want to go here with return
160:31 - and then whatever element you want in my
160:33 - case I'm going to go with heading one
160:35 - and now I want to access it so now I
160:38 - want to say you know what grab me this
160:40 - name parameter and before we render
160:43 - anything let me just showcase what is
160:46 - the value for new names let's save it
160:49 - and in the console you'll see a new
160:50 - array which is of course awesome and
160:53 - then check it out
160:54 - now I have those react elements
160:57 - so essentially instead of doing this
160:59 - manually
161:00 - we iterate over the list
161:02 - we wrap it in some kind of element and
161:05 - we're good to go and as a result
161:08 - basically we can just replace names with
161:11 - new names
161:12 - save it and what do you know now I
161:15 - actually have three heading ones with
161:18 - these values and as you can see this
161:20 - right away
161:21 - opens up a lot of doors
161:24 - because this truly is a dynamic setup I
161:27 - have some kind of data which is a list
161:30 - and I can iterate over that list
161:33 - and return
161:35 - whatever HTML structure I want to see on
161:39 - a screen now don't worry about this key
161:42 - prop
161:43 - erly we'll fix this warning in few
161:46 - videos also I want to mention that since
161:48 - we have this option to go back
161:50 - to JavaScript land essentially you can
161:54 - also take this code and right away write
161:57 - it over here remember we are looking for
161:58 - expression so we want to get some kind
162:00 - of value back and essentially with map
162:02 - this is what we're getting so if you
162:05 - don't like setting up the new variable
162:07 - and then accessing it you can do this
162:10 - directly so essentially we're still
162:13 - doing the same thing the difference
162:15 - right now is that we're writing
162:18 - everything here inside of the component
162:21 - again two flavors there's no right or
162:24 - wrong
162:25 - you can use either of these options the
162:28 - result is going to be exactly the same
162:30 - again we iterate over the list and we
162:33 - just wrap the elements
162:36 - in some kind of HTML structure
162:39 - and once we are familiar with the basic
162:42 - setup up next we'll take a look how we
162:45 - can do the same thing with our books
162:48 - array okay and up next let's set up a
162:51 - proper list and essentially what I mean
162:54 - by that is
162:55 - iterating over the bookstore and then
162:58 - for every item eventually we'll return a
163:03 - component
163:04 - so let's start by just navigating back
163:06 - to index.js
163:08 - and we want to remove everything that
163:11 - has to do with names
163:13 - of course you can keep it for your
163:14 - reference just keep in mind that it's
163:16 - already available in readme so it
163:18 - doesn't really matter so again let me go
163:20 - back to empty book list and like I
163:24 - mentioned in the previous video if you
163:26 - want to set up a new variable and then
163:28 - render it in the book list
163:31 - totally
163:32 - okay option in my case I'm going to do
163:34 - it right away in the book list
163:36 - effectively I'll iterate over and return
163:38 - that new array so we want to start here
163:40 - with box then map and again we're
163:44 - passing the Callback function so yes
163:46 - you'll see the syntax over and over and
163:49 - over and over again and the honestly
163:52 - fetching data
163:54 - and rendering it on a screen
163:57 - is going to be your bread and butter
164:00 - when it comes to react applications it's
164:03 - hard for me to imagine a project where
164:07 - you won't be doing at least one of them
164:10 - so
164:11 - yes this is the syntax you'll see over
164:13 - and over and over again and don't worry
164:15 - the more times you'll write this
164:18 - the more familiar you'll be with the
164:21 - entire setup so again we have this
164:22 - callback function here and we just need
164:25 - to decide what we want to return because
164:26 - remember when it comes to functions by
164:29 - default they return
164:31 - undefined all right so yes explicitly we
164:35 - need to set up a return and for now
164:37 - let's just go here return and then div
164:40 - and just so you can see that pretty much
164:43 - everything works even if we don't access
164:45 - values from the array let me just go
164:47 - here with heading one we're heading two
164:50 - whatever doesn't really matter and let's
164:54 - just say item here
164:56 - and you'll notice that actually
164:58 - everything works
165:00 - so I have those items on the screen why
165:02 - well because I have an array with two
165:05 - items we are iterating over here and
165:08 - then for every item this is what we
165:10 - return so technically we don't need to
165:12 - even access it now it kind of makes
165:14 - sense right
165:16 - since we're iterating over the list we
165:17 - want to access those values but
165:19 - technically we don't have to and now
165:22 - let's grab here this book
165:24 - so this is what I'm going through
165:26 - do with my parameter I'm going to name
165:28 - this a book just please keep in mind we
165:31 - cannot pass it directly so if I go here
165:34 - with book and I'll do the same thing
165:36 - I'll say book I'll get the same error
165:39 - again object are not valid as a react
165:43 - child so what do we need to do well
165:47 - we need to pull out the properties
165:49 - so we can either destructure them
165:52 - or we can simply go to book that title
165:55 - and the reason why I logged it because I
165:57 - want you to see that we're iterating
165:59 - over and pretty much we're getting
166:02 - each object so yes if you have 200 of
166:05 - them
166:06 - you'll have 200 logs you'll access 200
166:09 - items and now effectively we simply
166:12 - wanna
166:13 - like I said access the property now
166:16 - eventually of course I will structure it
166:19 - and all that for now I just want to
166:20 - showcase that if I go here with title
166:24 - I'll have title in my heading twos if
166:26 - I'll go with author I'll get an author
166:29 - now for the image of course it's going
166:31 - to make sense if I
166:33 - set it up
166:35 - in different element but hopefully you
166:37 - see where I'm going with this what's
166:39 - next well even though we can nicely
166:42 - return HTML elements directly in our
166:47 - callback function
166:48 - let's also remember that we still have
166:51 - this book component
166:54 - so why don't we put two and two together
166:57 - so we have a book component that already
167:00 - has the HTML
167:03 - and it's simply looking for these three
167:05 - things
167:06 - image title and author
167:10 - so if we go back
167:12 - to our callback function
167:14 - and if we return book and pass in the
167:18 - values it should work
167:21 - correct so let's try it out I'm going to
167:24 - go back to my return I'm going to write
167:26 - here book so I'm rendering now the book
167:30 - component
167:31 - and for now let's just pass them one by
167:33 - one
167:34 - in the following videos I'll show you
167:36 - how we can pass the entire object as
167:38 - well as how we can spread out the
167:39 - properties which is my favorite way of
167:41 - passing in the props but for now let's
167:44 - just go one by one and let's say over
167:47 - here book and then remember all these
167:50 - properties are over here so above the
167:53 - return we want to go with const then set
167:55 - it equal to a book so essentially we are
167:59 - destructuring something that we covered
168:01 - already before and we want to go with
168:03 - image then title and author and yes I
168:07 - know that those properties are in there
168:09 - so as far as the return since I know
168:13 - that I need to pass them as props what
168:16 - do we need to do we just go here image
168:20 - is equal to image
168:22 - title is equal to title and hopefully
168:25 - you see where I'm going with this
168:27 - one by one essentially I just passed
168:30 - them in and as a result you'll see this
168:33 - cool setup where again we have structure
168:36 - in one place
168:38 - we have a structure for the book
168:41 - component
168:42 - and essentially
168:44 - we just iterate over
168:46 - some data some list
168:49 - we pull out the properties out of the
168:51 - object
168:52 - and then for every item we return this
168:55 - component
168:56 - and essentially we get this awesome
168:59 - setup
169:00 - where now all our logic is here
169:03 - in order to render stuff on a screen we
169:07 - simply need to iterate over and for
169:10 - every item we just need to return the
169:12 - component
169:14 - all right next let's get rid of that key
169:16 - prop warning in the console and
169:19 - basically every time
169:21 - you'll render a list of items in react
169:23 - react wants to keep track of those items
169:27 - so we need to provide a unique value and
169:31 - set it equal to a key prop
169:34 - and typically it's going to be an ID and
169:37 - since we're creating this list ourselves
169:40 - essentially we'll go back and just add
169:43 - these two properties keep in mind that
169:45 - the property name doesn't have to be ID
169:48 - just these values need to be unique so
169:51 - if you call this vegan food truck it's
169:54 - totally okay as long as you provide
169:56 - unique values and they don't have to be
169:58 - numbers
170:00 - essentially you can turn this into a
170:02 - string of one and string of two and
170:04 - hopefully you see where I'm going this
170:07 - and lastly normally
170:10 - will be fetching data from some kind of
170:13 - external resource anyway so
170:16 - those values again most likely IDs will
170:19 - be right away provided
170:21 - and I'll talk about the indexes
170:24 - at the end of the video and why we
170:26 - should
170:27 - avoid that so first let's just go back
170:30 - to index.js and we want to add those
170:32 - unique values again not going to be
170:34 - particularly original I'm just going to
170:36 - go with id1 and id2 and yes if you have
170:39 - 10 of them then
170:40 - basically manual you add this one id1
170:44 - and id2 in my case
170:46 - then we want to navigate and we want to
170:49 - set this key prop on the main return
170:53 - so it's not going to work if we go here
170:56 - and set it equal to key and then the
170:59 - Eddy
171:00 - because this is the element that I'm
171:02 - returning when I'm iterating over the
171:04 - list
171:05 - keep that in mind and
171:07 - the reason why I'm saying that because I
171:10 - get these questions in course q and I
171:12 - where in some project it's confusing
171:15 - where we should set the key so always
171:17 - always always
171:19 - look for the place where you're
171:20 - iterating over
171:22 - the data and then you want to set on the
171:25 - item that you're returning basically if
171:29 - there's going to be this type of setup
171:31 - so let me go back here and show that ID
171:33 - if you have this type of setup then add
171:36 - it on a div not on a heading 2.
171:39 - hopefully that is clear so let's go back
171:42 - over here now we know that in the book
171:43 - we actually have Daddy correct so we
171:47 - pull it out and then just like they
171:49 - suggest in console we just go with key
171:51 - and set it equal to an ID and what do
171:54 - you know the moment I save it everything
171:56 - is fine
171:58 - now
172:00 - as you're looking at someone else's code
172:03 - you'll see this approach as well
172:05 - essentially this just saves a little bit
172:07 - of time where
172:08 - in the map the second parameter is the
172:11 - index
172:12 - so
172:13 - you know that in JavaScript
172:15 - arrays are zero index based the first
172:18 - item is going to have the value of zero
172:20 - then one and if you have 100 items that
172:23 - means that you'll have those values from
172:24 - 0 to 99 and technically you can get away
172:30 - with passing this index into a key yes
172:35 - you'll see this type of approach in
172:37 - general I don't advise doing that even
172:40 - though you can get away with it
172:42 - because it only works for the list that
172:46 - you know will never change so basically
172:48 - if we'll have some kind of option to
172:51 - remove items from the list then this is
172:53 - not going to work effectively there's a
172:55 - high chance you'll get some bugs down
172:57 - the road
172:58 - now if you know 100 that the list is not
173:01 - going to change yes you can cheat a
173:04 - little bit but in general I don't advise
173:09 - using such an approach so that's how we
173:11 - can set up the key prop we just need to
173:14 - set it equal to some kind of
173:16 - unique value
173:19 - that is in our data okay and before we
173:22 - discuss events in react
173:25 - let's take a look at two options how we
173:27 - can pass the entire object as props
173:31 - so effectively if we take a look at the
173:34 - index.js Everything Is Awesome
173:37 - but what if I don't know we have 20
173:40 - items in this particular object
173:43 - we can see that I think we're doing
173:45 - double the work
173:47 - I pull out all the items over here
173:50 - and then I need to repeat the same steps
173:52 - or if you go with props.name same deal
173:56 - in the component
173:58 - so is there any way how we can
174:00 - simplify our life
174:02 - here when we're iterating over the list
174:05 - and essentially we have two options
174:07 - we can pass the entire object as a prop
174:12 - or we can use the spread operator which
174:15 - essentially is the method that I prefer
174:17 - the most
174:18 - but let's start by passing the entire
174:21 - object so inside of the map method
174:25 - instead of pulling them out one by one
174:27 - here's alternative I can simply go to my
174:31 - book component and I can say book prop
174:35 - so I need to come up with a name and
174:37 - I'll name this exactly the same as my
174:39 - parameter and I'll set it equal to my
174:42 - book object
174:44 - however once we save
174:46 - we'll see nothing on screen why well
174:49 - because remember
174:50 - now props
174:52 - is an object but inside of it I have
174:55 - another object I have a book object
174:58 - so in order to pull these properties out
175:01 - I have two options I can go here with
175:04 - props DOT book or another one if you're
175:09 - destructuring right away in the function
175:11 - parameter this is the syntax
175:14 - again if you're not familiar with it
175:17 - please watch the the structuring video
175:20 - that I shared previously in the readme
175:23 - so essentially I know that there is a
175:26 - object and I just pull these properties
175:28 - out that's the syntax again those are
175:31 - our two options
175:32 - either we just go with props Dot and
175:35 - then whatever is the object
175:37 - or we can restructure it right here in
175:40 - the function parameters again
175:41 - essentially it just saves us here on
175:44 - getting these properties now we'll still
175:46 - need to get an ID
175:48 - so this is the case where you can either
175:50 - pull it out or you can just say book and
175:52 - then whatever is that property
175:54 - and then of course in that case you can
175:56 - just remove all of them this is totally
175:59 - up to you
176:00 - and the method that I prefer the most is
176:03 - actually a little bit different
176:05 - where we can use the spread operator and
176:08 - again if you're not familiar with the
176:10 - spread operator I will give you the
176:12 - general overview but if you want to find
176:14 - out more info just please follow this
176:16 - link where I cover everything in great
176:18 - detail and essentially the spread
176:21 - operator so these three dots allow us to
176:24 - copy
176:25 - from the arrays or from the object so if
176:29 - you have friends and then if you want to
176:31 - create a new array you go here with data
176:33 - dot friends and then let's say you want
176:34 - to add a friend and if you log you'll
176:37 - see that effectively you have two
176:39 - arrange and again this is copying so
176:41 - this is not going to be passed as a
176:44 - reference and the same goes for the
176:46 - object if you have some object and then
176:50 - if you want to create a new one you go
176:51 - with dot dot and you copy the properties
176:54 - from some object and then let's say you
176:57 - add another property and if you log
176:59 - you'll see that essentially you have a
177:02 - new object with all of these properties
177:04 - now in react here's what we can do if I
177:07 - have
177:08 - a object
177:10 - and if I want to pass all of those
177:12 - properties
177:14 - as props one by one I simply set up the
177:18 - curlies here and I go with dot dot dot
177:21 - and then that object
177:22 - and once you log you'll see that all of
177:25 - them are effectively passed down as
177:28 - props so let's try this out and let me
177:30 - know right away tell you that it's
177:32 - not going to access anything from the
177:34 - book so this line is going to
177:36 - effectively fail
177:38 - so let's go back to the book list and
177:40 - instead of setting this up as book
177:42 - equals the book
177:44 - simply want to go with curlies
177:46 - we want to go dot dot and when we want
177:49 - to pass in the object again this line is
177:52 - going to fail right now because we are
177:55 - trying to access properties that don't
177:57 - exist there is no book anymore
177:59 - so now we need to go back and let's just
178:03 - log and check it out so now one by one
178:05 - we pass those properties down including
178:08 - the ID of course now we don't use it in
178:11 - a book
178:12 - but it's not a big deal
178:14 - so again
178:16 - this is totally up to you
178:18 - if you want to pass the entire object
178:20 - down as props you can definitely do so
178:23 - just come up with the property or you
178:25 - can spread out all the values the end
178:28 - result is going to be exactly the same
178:31 - and it really comes down to your
178:33 - preference
178:34 - if you prefer the first wave
178:37 - use that one if you prefer the second
178:40 - one the spread operator
178:42 - then of course go with that one now
178:44 - since
178:46 - I prefer the second option
178:48 - that's why in the course you'll most
178:50 - likely see me doing this
178:53 - the spread operator approach rendering a
178:56 - list with the help of components is
178:59 - awesome
179:00 - but of course it would be nicer if the
179:03 - user could interact with our application
179:08 - otherwise our app is somewhat boring so
179:12 - long story short
179:13 - our app needs to respond to events
179:17 - for example when the user clicks the
179:20 - button submits the form and rest of the
179:23 - good stuff
179:24 - so up next let's talk about how we can
179:27 - handle events in react
179:29 - now let me right away bring the cold
179:32 - bucket of water and just say that all
179:35 - our examples will focus on logging stuff
179:37 - yes that's going to be the case simply
179:40 - because we have not covered what is
179:43 - State and react and what hook we use to
179:47 - control the state
179:49 - and therefore we really can't change
179:51 - what we currently see on a screen don't
179:54 - worry
179:55 - all of that is coming up now let's just
179:58 - focus on the main points
180:01 - and essentially
180:02 - if you're a little bit familiar with
180:04 - vanilla.js you know that
180:07 - effectively the setup is following
180:10 - we have some kind of button form input
180:12 - whatever then we select that element and
180:15 - we can add event listener and I guess
180:19 - the most common or basic or however you
180:21 - want to say it is the click event
180:24 - so we have the event we pass the name
180:27 - and then we have the Callback function
180:29 - in the Callback function we can access
180:32 - the event object which
180:34 - contains bunch of cool stuff for example
180:37 - the element we're selecting
180:40 - what value is inside of it and of course
180:43 - bunch of other things and also we can do
180:46 - something when that event takes place
180:49 - and when it comes to react essentially
180:52 - the setup is extremely similar
180:56 - we have an element and of course in our
180:59 - case that element is located in the jsx
181:03 - in the component we have an event
181:07 - and remember when we talked about Lee
181:09 - kamokesh this is the time when we will
181:12 - write on click instead of click
181:16 - like we have been doing in vanilla.js
181:18 - and then the Callback function
181:22 - basically
181:24 - a functionality we want to invoke
181:27 - when that
181:29 - event fires now if you want to see all
181:33 - of the available
181:35 - events in react you can follow this link
181:40 - so let me copy this one just to Showcase
181:42 - but I strongly suggest not memorizing
181:46 - all of them because list is quite long
181:50 - and essentially if you'll ever need to
181:54 - use a specific event you can always go
181:57 - there and get the exact syntax
182:01 - the idea for all of them is the same
182:04 - again
182:05 - element event and a function and notice
182:10 - over here how basically we're passing in
182:12 - the reference so we go back to a
182:13 - JavaScript land we set up the curlies
182:15 - and same how we reference the variable
182:19 - now we're referencing the function and
182:22 - like I mentioned before
182:24 - in all our examples we'll invoke alert
182:27 - or log just because we haven't covered
182:30 - how we can control what we can see on a
182:33 - screen all of that is coming up
182:35 - and I can also say that during the
182:37 - course
182:39 - mostly we'll use these three so on click
182:42 - which responds to click events on submit
182:46 - which fires off when the user submits
182:49 - the form and on change which fires off
182:52 - when the user is providing value in the
182:56 - input again I strongly strongly
183:00 - so just not memorizing all of them over
183:02 - here
183:04 - I mean in my opinion it's a waste of
183:06 - your time if you'll ever have some kind
183:09 - of specific use case
183:11 - and come back over here you can get the
183:14 - exact name for that event and you're
183:16 - good to go because again the idea for
183:19 - all of them is going to be exactly the
183:20 - same
183:21 - and once we have covered the journal
183:23 - setup now let's create event examples
183:26 - component which I'm going to render
183:28 - above
183:29 - the books one
183:31 - and the reason why I'm doing that is
183:33 - because eventually we'll just have the
183:36 - books so this one will stay for your
183:38 - reference
183:39 - and of course since you have the readme
183:41 - I'll be able to remove the event
183:44 - examples so in the event examples
183:48 - we want to set up a section form
183:51 - with heading 2.
183:52 - so some kind of title I guess input
183:56 - and we want to go with a button with the
183:59 - on click now let's not worry about these
184:03 - functions for now as well as the name of
184:05 - the event over here let's just set up
184:07 - the basic return
184:09 - so essentially let's just worry about
184:12 - the jsx we're returning so let me
184:14 - navigate to index.js and I think I'm
184:17 - going to do right after the book list
184:18 - because like I just said I am going to
184:20 - eventually remove it anyway so why not
184:23 - I'm gonna go with const and then let's
184:25 - name this event
184:28 - examples so that is going to be my
184:31 - component
184:33 - inside of it for now let's just go to
184:35 - return
184:36 - just so we can see that everything has
184:38 - been set up correctly
184:40 - so let's go with heading one and then
184:42 - I'll say events let's save that and then
184:46 - we want to go back to the book list
184:48 - and effectively you want to do that
184:50 - before the books so this is really up to
184:53 - you if you want to set it up here in the
184:54 - bottom
184:55 - that's also an option but in my case I'm
184:58 - going to go above and I'm just going to
185:00 - access the event examples now if you
185:04 - want to place them side by side in the
185:05 - book list then of course just remember
185:08 - that we need to use that react fragment
185:10 - or div or whatever because there has to
185:13 - be one element that we're returning and
185:16 - also keep in mind that I'm placing this
185:19 - in a section because there is already
185:20 - some CSS so if you won't place it inside
185:23 - of the section then effectively it's
185:25 - just going to be hanging out here on the
185:29 - left top corner so let me save it I have
185:31 - your events so I'm good to go and as a
185:34 - quick sign up this is usually what I do
185:37 - I mean I'm not returning and hitting one
185:39 - each and every time but I always like to
185:41 - set up my component so I know that
185:43 - definitely it's being rendered on a
185:45 - screen there's no point to set up the
185:47 - entire logic and then start chasing some
185:49 - weird bugs
185:51 - if let's say the initial setup was wrong
185:56 - so in order to
185:58 - avoid chasing my own tail I usually
186:01 - start by rendering something on screen
186:02 - and then once I can clearly see that I
186:06 - mean the component setup is correct then
186:08 - we can move on and start adding the
186:09 - logic over here hopefully this wasn't
186:11 - too long of the explanation and now
186:15 - let's just set up that return
186:17 - where basically we want to go
186:19 - with another section
186:22 - then inside of the section let's right
186:24 - away go with form now we don't need the
186:28 - action here
186:30 - usually if you go damage right away it
186:32 - gives you an action just as a side note
186:34 - as far as the heading tools say typical
186:37 - form
186:39 - and then we want to go with inputs for
186:42 - now it's going to be a text input but I
186:45 - just want to add a little bit of
186:47 - inline styles so let's go with style
186:50 - it's an object and then let's say margin
186:53 - one Rems usually we won't do that we
186:56 - won't add the inline Styles but this is
186:59 - the case where I thought
187:01 - it's a great example of using such
187:04 - approach and then let's also go with
187:06 - name and we'll set up the example just
187:08 - because I want to showcase something in
187:10 - the following videos
187:12 - and as far as the value I'm going to go
187:14 - with examples so we know that in HTML we
187:17 - can add name attributes
187:19 - to the inputs and in the following
187:23 - videos I'll show you how we can access
187:24 - them in react and then right outside of
187:28 - the form let's set up that button
187:31 - as far as the value I'm just going to go
187:32 - to click me
187:33 - so we have our setup
187:35 - and now let's just reiterate when I
187:39 - covered I guess five minutes ago
187:42 - where basically we have these events
187:45 - so if we want to respond to user typing
187:49 - something in the input the event name is
187:52 - on change this is the case where we kind
187:55 - of just simply come up with our own
187:56 - names yes they need to match exactly
187:59 - and if we want to respond to click
188:02 - events we simply go here with on click
188:06 - and then we need to pass in the
188:08 - reference so we need to set up those
188:10 - functions again they can be inside of
188:12 - the component they can be outside of the
188:13 - component they can be coming from
188:15 - another file that part is irrelevant we
188:18 - just need to pass those functions as a
188:20 - reference and then every time that event
188:23 - is going to fire
188:25 - guess what react is going to execute the
188:28 - functionality we have inside of the
188:31 - reference function
188:33 - I'm not going to be particularly
188:35 - original I'm just going to say handle
188:37 - form input handle button click yes in
188:41 - react World this is somewhat typical
188:44 - essentially to start the name with
188:47 - handle but again it's not a rule so
188:51 - let's go back to index.js let's go above
188:54 - the return and let's come up with those
188:57 - two functions now of course we can
188:59 - pass them interchangeably
189:02 - as long as you have the reference
189:04 - function
189:05 - you can pass the same one in the input
189:07 - as well as the button click but
189:10 - most likely you'll have some specific
189:12 - Logic for the input or for the button
189:14 - click so let's go here with handle form
189:17 - sorry at four but form input for now
189:21 - we're gonna go with pretty basic Arrow
189:25 - function and we'll simply go log and
189:27 - we'll say handle form input then we'll
189:31 - copy and paste and we'll just change
189:33 - some stuff around so it's not going to
189:35 - be handle form input
189:37 - we'll say handle button click and
189:41 - instead of log why don't we go with
189:43 - alert
189:45 - let's save that and then like I said the
189:48 - event
189:50 - to handle
189:51 - form inputs is on change
189:54 - we go to any input in our case this one
189:57 - the text one and we go with on change
190:00 - so every time user is going to type
190:02 - something in the input the event will
190:06 - fire
190:06 - and yes this functionality
190:10 - will be executed so we go here with
190:12 - handle form input so we pass the
190:15 - reference and we want to do same thing
190:17 - here with the button in this case though
190:19 - the event name is on click
190:22 - what do we do we pass here the reference
190:25 - handle button and click I just make sure
190:30 - that the name is exact and let me open
190:33 - up the dev tool since there's going to
190:35 - be some console logs as I said you know
190:38 - it I think I can remove this sucker for
190:41 - now the props one
190:43 - if only to use it later of course I will
190:47 - uncomment it so let's try that out with
190:50 - a button check it out the moment I press
190:53 - F handle form input then of course it's
190:55 - because I didn't change the name my
190:57 - apologies
190:58 - so in here we want to go with handle and
191:01 - then button click
191:03 - of course you can leave the same one but
191:04 - just so you can see that I'm not messing
191:06 - with you I'm going to go click the
191:09 - correct one
191:10 - and of course we want to press OK OK
191:13 - and then let's click one more time
191:15 - handle button click awesome
191:17 - so we can see that this functionality
191:19 - works and the same is going to be with
191:21 - our input so I'm going to go here and
191:24 - start typing
191:25 - notice in the console I have these logs
191:27 - which means that again we're responding
191:30 - to the events
191:33 - and as a result of course our
191:36 - application is more Dynamic and again
191:39 - you'll need three things you'll need an
191:41 - element you'll need an event
191:44 - and you can always find all of the
191:47 - events
191:49 - in react docs and lastly you need a
191:52 - reference to a function or a callback
191:55 - function that you're going to invoke
191:58 - once the event takes place or fires off
192:03 - remember in the last video when we
192:06 - discussed the events in vanilla address
192:08 - we covered that
192:10 - when we pass the Callback function we
192:13 - have access to an event object
192:16 - and in that object we can
192:18 - find bunch of useful info and guess what
192:22 - we can do the same thing in react
192:25 - so every
192:28 - callback function so every function that
192:31 - we're referencing
192:32 - is going to have
192:34 - access to that event and since it's a
192:37 - parameter of course we can give it
192:40 - whatever name we want so you can go with
192:43 - e which is pretty popular you can go
192:46 - with event and always bananas is also an
192:50 - option
192:51 - and let's just log it in the input so we
192:55 - can see
192:56 - what values we're getting back and then
192:58 - we'll talk about the form submissions so
193:01 - as far as the annual form input I'm
193:03 - going to go here and
193:05 - we'll do few logs in this video so let's
193:08 - start with an event and check it out and
193:11 - here we'll find bunch of useful info now
193:14 - the ones that we'll use the most are
193:18 - event.target.name so Target effectively
193:20 - is going to point back to an element in
193:23 - our case since we're logging it in the
193:25 - input yes it's pointing back to an input
193:28 - and then remember in the previous video
193:30 - we set up name is equal to an example
193:34 - and if we want to access that name we go
193:37 - to
193:38 - event.target.name and if you want to get
193:40 - the value we go with event.target.value
193:45 - and essentially this is going to allow
193:47 - us
193:48 - to collect
193:50 - the data from the input and again we're
193:53 - not going to cover the entire example
193:55 - because we haven't covered the state yet
193:58 - but just to Showcase that it's actually
194:02 - a case let me go here with log and then
194:05 - event.target essentially is going to be
194:07 - our input and then let's copy and paste
194:10 - and if you want of course you can write
194:12 - some additional text over here
194:14 - just so you can see which one is which
194:16 - but in my case I'm going to go the first
194:17 - one name and then the second one value
194:19 - and again it's going to log once we
194:22 - provide some value in input and notice
194:25 - so the first one is my element the
194:27 - second one is the value that we provide
194:29 - for the name so of course if I'll change
194:31 - this around and if I'll say
194:34 - product and if I'm going to go back to
194:37 - an input any file type some kind of
194:40 - letter now of course
194:42 - in the console I'll see the product
194:45 - and the third one is the actual value
194:48 - in the input and last one is the
194:51 - original
194:53 - log that we set up in the previous video
194:57 - so these two will use quite often
194:59 - throughout the course and also we'll use
195:03 - prevent default which is very useful
195:06 - when we have it formed
195:08 - so if we want to respond to form
195:10 - submissions we just need to set up an
195:13 - event so we're going to go here with on
195:15 - submit and let's
195:18 - create that function as well so let me
195:21 - copy and paste and I'm going to rename
195:23 - it to handle form submission
195:26 - hopefully I'm spelling this correctly
195:29 - and for now let's just log something at
195:31 - least try to actually will fail
195:34 - that's the whole purpose why we covered
195:36 - the event object so let's go with form
195:39 - sub method and then let's pass in the
195:43 - handle
195:45 - form submission
195:46 - and once I save I mean it doesn't really
195:50 - matter whether we type something in the
195:51 - input or no if we'll press enter
195:55 - essentially your turn we should see
195:58 - something in the browser but we don't
196:01 - so we can clearly see that something
196:03 - happened notice over here we have this
196:06 - product but we didn't see anything in
196:08 - the browser and the reason for that is
196:09 - because the default behavior of the
196:12 - forms is to collect those values
196:16 - and essentially
196:18 - send it to
196:21 - some URL now in this case we don't want
196:23 - to do that we want to handle the forms
196:26 - ourselves
196:27 - and that's why we want to access the
196:29 - event again
196:31 - same as with handle form input we have
196:33 - right away access to it and in there
196:36 - there is a function called
196:38 - event Dot and then prevent
196:41 - default so this is also something that
196:44 - we use quite often and effectively this
196:46 - just means that we will handle those
196:49 - form submissions ourselves and as you
196:51 - can see now we can clearly see this log
196:55 - in the console
196:57 - so each and every
197:00 - reference function is going to have
197:02 - access to event in there we can find
197:05 - bunch of useful things but mostly will
197:09 - work with Target target.name
197:12 - target.value as well as event prevent
197:15 - default now if for some weird reason you
197:19 - still don't see the log once you submit
197:22 - the form don't panic and just try this
197:26 - Mouse click on the input and then press
197:29 - enter or return on the keyboard
197:33 - basically we want to set focus on the
197:36 - input
197:37 - and don't worry in the following videos
197:40 - we will add a button to submit the form
197:43 - which actually is going to be our setup
197:46 - for the rest of the course and in that
197:50 - case we won't have to do all of these
197:53 - acrobatics and before we continue let's
197:57 - just take a small break and let's
198:00 - discuss something that
198:02 - pops up quite often in the course q a
198:06 - and that essentially is how we can
198:09 - handle form submissions in HTML again
198:13 - please keep in mind that at the end of
198:15 - the day we're still writing HTML we're
198:17 - still writing CSS and yes JavaScript and
198:21 - essentially we have two options
198:24 - if we set up
198:25 - a button with type submit
198:28 - in the form
198:30 - we can also utilize that button
198:34 - but keep in mind that the value has to
198:38 - be submit
198:40 - so if it's just going to be a button
198:43 - then it's not going to work so let me
198:45 - just showcase what I'm talking about I'm
198:47 - going to go back to index.js
198:50 - and essentially where I have the form
198:53 - first let me move this sucker up over
198:56 - here let me add type and then equals to
199:00 - A Button
199:01 - and then let's copy and paste and we're
199:04 - not going to have any on clicks over
199:05 - here
199:06 - and instead of type button we're gonna
199:09 - go here with
199:10 - submit and then instead of Click me just
199:13 - so we can see which one is a which we're
199:16 - going to go with submit and I'll move it
199:17 - up
199:18 - so let's save I have this submit one
199:22 - and you know what
199:24 - just so it's not all over the place I'll
199:26 - add a div and just wrap the button the
199:29 - second one the quick one and check it
199:32 - out now of course we can click and
199:34 - notice we nicely submitted the form
199:37 - why well because we have on submit on
199:40 - the form
199:41 - and we have the Callback function and of
199:44 - course we prevent the default and you
199:47 - already know rest of the stuff
199:48 - now if I'll click this one
199:51 - I'll have the alert
199:53 - so if we have just type button it's not
199:56 - going to submit the form then please
199:58 - keep in mind this is straight up HTML
200:00 - setup
200:02 - that's effectively how it works
200:04 - now if you do want to set up an event
200:09 - over here on this button let's say you
200:12 - just don't like this unsubmit here in
200:14 - the form you can definitely do so
200:17 - and the logic is going to work exactly
200:20 - the same but
200:21 - the event you want to set up over here
200:23 - is on click so here's what I'm talking
200:26 - about
200:27 - if for some reason you don't like this
200:29 - setup you can remove
200:31 - but in here you're not going to write on
200:33 - submit
200:34 - so you're not going to go here on submit
200:36 - and then
200:37 - let's say pass in the value let me try
200:39 - that one notice over here up in paste
200:42 - okay good
200:44 - notice right so it's not going to work
200:49 - you're going to get an error
200:51 - in order to properly submit this form
200:55 - we'll have to go here with on click
200:58 - because it's a button
201:00 - so you need to provide here on click and
201:02 - then again both of them work so we can
201:05 - submit the form with enter if I just go
201:09 - to an input and press return key or if I
201:13 - click the button and again both of them
201:16 - are in your readme so you can clearly
201:19 - see if you want to use the button code
201:21 - on click if you're using the form just
201:26 - make sure this one is type submit
201:29 - because type button
201:31 - it's not going to work hopefully that is
201:33 - clear and now we can move on to the next
201:36 - topic and while we're still on the event
201:39 - topic let me throw you a mind grenade
201:43 - remember I believe two videos ago when
201:46 - we discussed the basic setup
201:50 - in vanilla address
201:52 - we use this example
201:54 - now what is happening over here
201:58 - I have here Anonymous callback function
202:00 - right
202:01 - now of course you can set up here the
202:03 - variable set it equal to a function or
202:06 - you can pass here directly
202:09 - Arrow function which by default is
202:11 - anonymous
202:13 - the main point is that we can directly
202:16 - pass in Anonymous function
202:19 - so
202:21 - do you think we can do that you know
202:23 - react and of course the answer is yes
202:26 - so you'll also see
202:29 - this alternative approach
202:31 - where instead of setting up those
202:33 - functions here or in the file or in a
202:36 - separate file
202:37 - we pass the anonymous function directly
202:42 - so in my case of course I'm passing here
202:44 - the arrow function now please keep in
202:46 - mind we're not invoking it over here
202:50 - we just pass
202:52 - the function so of course this logic is
202:55 - going to run when well when we click on
202:58 - a button in this case so let's try it
203:00 - out I'm going to navigate back of course
203:03 - I keep repeating this but I just want to
203:05 - make it clear all of this code is
203:07 - available and read me for your reference
203:09 - so I'll simply do this I'll remove and I
203:13 - don't think I'm gonna worry about the on
203:15 - submit
203:17 - so let me remove it keep in mind that
203:19 - yes essentially it works the same way
203:22 - but instead of using reference
203:25 - I'm going to go with my arrow function
203:27 - and then whatever logic we want to do
203:30 - in our case what do we want to do we
203:31 - simply want to log yes for now we'll
203:34 - just be a little bit conservative so
203:37 - let's go here with console log and then
203:39 - say click me and of course we'll have an
203:42 - error because we don't have here the
203:45 - reference so let's do the same thing and
203:47 - I guess one of the major gotchas here is
203:50 - that we still have access to this event
203:52 - object
203:54 - so that doesn't change if I want to go
203:58 - log
203:59 - and inside of it I want to go with
204:02 - event.target.value I'll still access
204:04 - whatever is in the input and yes it's
204:07 - still going to fire every time the user
204:09 - types something in input again those
204:11 - things don't change but you'll see this
204:14 - shorter syntax
204:15 - is there a rule no
204:17 - if you want to use this one use this one
204:19 - if you want to set up the reference use
204:22 - that one mostly it depends on how much
204:24 - logic you have if let's say you have
204:26 - this input
204:28 - and you're just accessing the value
204:29 - quite often you'll see this approach if
204:32 - you have some kind of button click and
204:34 - then there's 20 lines of code
204:36 - theoretically you can set it up over
204:39 - here just keep in mind that you'll have
204:41 - to set up the curlies and all that but I
204:44 - mean most realistically then you'll set
204:46 - up a reference function and now check it
204:48 - out
204:49 - both of them work exactly the same
204:52 - but effectively we just have less lines
204:56 - of code and since I'm enjoying mind
204:58 - grenades so much I'm effectively
205:01 - throwing them at you
205:02 - let me throw another one
205:05 - and that is the simple fact that
205:08 - components are independent by default
205:11 - and if this at the moment sounds like
205:14 - okay well what's the big deal let me
205:16 - show you an example
205:19 - um after that I'll probably spend five
205:21 - minutes just raving about it and let's
205:23 - start I guess by removing the events
205:25 - again we cover the basics we'll return
205:27 - to events many times throughout the
205:30 - course it's one of the main features to
205:34 - any application if it's Dynamic so
205:36 - there's no need to keep that component
205:38 - here it's always available in readme and
205:41 - therefore I'm going to go to index and
205:43 - first I'll remove
205:45 - the reference
205:47 - and then I'll actually remove the
205:50 - component
205:51 - and now let's try to set up an event in
205:55 - the book component and it's going to be
205:59 - somewhat straightforward where I want to
206:02 - set up a function I'll call this display
206:04 - title if you want to practice
206:06 - on setting up Anonymous callback
206:09 - functions you can definitely do so in my
206:10 - case I'll have a reference and I simply
206:12 - want to log the title that's it
206:15 - not much and of course we do need to set
206:18 - up the event we need to reference the
206:20 - function
206:21 - and
206:23 - it kind of makes sense to have some kind
206:25 - of value in there as far as the value
206:28 - inside of the button so let's start here
206:30 - doesn't really matter where you place it
206:32 - I think I'm gonna do it in between just
206:34 - because I have some margins
206:36 - so let's go here with on click for now
206:39 - we don't have the function
206:41 - so let me first just type display
206:44 - title and then above it let's go with
206:47 - that function const
206:48 - display title and
206:52 - let's go here and log that
206:55 - so I already have the log so just so I
206:57 - can speed this up or copy and paste oh
207:00 - uncommon this one and we're gonna go
207:02 - with title so what am I logging here
207:05 - a title prop correct
207:08 - so let's go here let's say display title
207:11 - let's save it let's find the button
207:13 - somewhere here
207:15 - and check it out right away in the
207:17 - console I see the same exact title that
207:21 - is displayed in component
207:23 - and guess what
207:25 - if I click
207:27 - the same button in the second component
207:30 - it does the same only this time
207:34 - it references the title that is
207:37 - associated with the second component
207:40 - and if you have done
207:43 - pretty much any work in vanilla.js
207:46 - you know that you need to do quite a bit
207:49 - of acrobatics to get to that point
207:52 - to essentially have some functionality
207:55 - directly point to that one specific item
207:58 - and just to give you an example let me
208:01 - show you one of the JavaScript projects
208:03 - that we're working on my course
208:06 - I think it was this one either the
208:08 - questions or the tabs I think it was
208:11 - tabs
208:12 - no sorry what was the questions my bad
208:14 - my bad I'm gonna go back we're going for
208:16 - questions and notice I mean it's not
208:19 - earth shattering functionality basically
208:22 - we're just displaying some kind of
208:24 - content once we click on a tab but trust
208:27 - me
208:28 - in order to get to that point
208:30 - where each of these buttons only
208:32 - reference the specific item it's not as
208:35 - easy as just setting up here to function
208:37 - and the button so if you open up the
208:40 - developer tools the sources tab
208:43 - and more specifically MJS
208:46 - you'll see that we're selecting all of
208:49 - the questions we iterate over the
208:52 - questions as we're iterating we're
208:55 - selecting
208:56 - the button and then essentially we
209:00 - toggle the text inside of the function
209:02 - now again there's multiple ways how you
209:05 - can set up the logic
209:06 - we also cover the alternative
209:09 - that's not the point
209:11 - the point is that in vanilla.js it
209:14 - doesn't come by default
209:15 - you cannot just right away go to a
209:19 - specific element and say that
209:22 - the functionality is going to apply only
209:25 - to that element
209:27 - you need to do more work and that is not
209:30 - the case in react
209:32 - so this is
209:35 - an extremely powerful concept where
209:38 - essentially whatever functionality will
209:41 - have inside of the component
209:44 - it's narrowed down to that component
209:47 - where in vanilla.js in order to
209:52 - have this type of functionality you need
209:55 - to jump through the Hoops you need to do
209:58 - some acrobatics
209:59 - in react
210:01 - it comes by default we don't need to do
210:04 - anything okay and up next let's talk
210:06 - about react data flow and in the process
210:10 - I will cover what is prop Drilling and
210:14 - the first thing we need to keep in mind
210:16 - that in react
210:18 - we can only pass the data down
210:22 - so in our case we can only pass data
210:26 - from book list to a book component
210:30 - not other way around and yes if you have
210:33 - a component
210:35 - nested inside of the book component
210:38 - and if you want to pass something from
210:40 - the book list all the way down to that
210:43 - component you'll have to go through the
210:46 - book component of course there are
210:49 - alternatives so later on
210:52 - will cover context API we'll talk about
210:54 - Redux and
210:56 - of course you can use other state
210:58 - libraries for that as well but by
211:01 - default
211:02 - we can only pass the props down
211:06 - and essentially in a process we're doing
211:08 - something called prop drilling so let's
211:11 - just take a look at the example and
211:14 - you'll see what I'm talking about first
211:16 - let's navigate to index.js
211:19 - I don't need the title
211:21 - but I will keep the button because we'll
211:24 - implement it in this example as well
211:27 - it's not going to be display title we'll
211:30 - just say click me doesn't really matter
211:32 - what you write over there and then as
211:34 - far as the book list let me come up with
211:36 - first variable so const some value and
211:41 - I'll go with Shake
211:43 - and bake and up next let's set up a
211:46 - function
211:47 - so hopefully it's clear that when it
211:49 - comes to this type of variable
211:51 - effectively
211:53 - we would just set up
211:55 - the prop correct now in this case of
211:57 - course we're iterating over the list and
211:59 - we're passing into a book but let's say
212:01 - if I have I don't know some component
212:04 - over here so some component in order to
212:08 - pass it down what would I do well I will
212:11 - just pass it here as a prop right so I
212:14 - would say some value is equal to some
212:16 - value name is as always up to you but I
212:20 - mean
212:21 - in my case I'm just going to go with the
212:22 - same name so some value equals the sum
212:24 - value hopefully that is clear
212:27 - but what about if we have a function so
212:31 - let's say what if I have a function that
212:34 - has a name of display value and in here
212:37 - I'm accessing that variable in the
212:41 - component
212:42 - so I'm accessing the variable that is in
212:45 - the book list component again we're just
212:47 - going to be logging
212:49 - we don't know how to control the state
212:51 - yet so how do we pass this function down
212:55 - well effectively it's the same thing we
212:58 - need to come up with a prop name and we
213:00 - need to pass it as a value
213:03 - same deal we're iterating over the book
213:05 - and we have actually this book component
213:08 - so I'll pass it here just keep in mind
213:10 - the same works with any component that
213:14 - you have
213:15 - in the jsx so let me remove this one
213:19 - because otherwise I'll get an error of
213:21 - course there is no sum component and let
213:23 - me just go here with display value
213:25 - equals
213:26 - to display value
213:29 - and how do we access it and as I say not
213:32 - the first I'll have the error over here
213:34 - because there's nothing in the on click
213:38 - so for now
213:39 - let's just deal with display value
213:42 - and in order to access it
213:44 - it's in the props again if you want you
213:46 - can log it
213:47 - sure
213:48 - in my case I already know that it's
213:50 - there so I'm gonna go display value so
213:53 - we grab the function and again we just
213:55 - pass it as a reference that's it that's
213:59 - all we have to do and now if we open up
214:01 - the devtools
214:03 - we'll nicely see
214:05 - that we log shake and bake and it's
214:08 - going to work the same in all of the
214:10 - components and again the main points are
214:13 - we can only pass props down
214:17 - so from the parent to the child
214:21 - and effectively it means that if you
214:24 - have really nested structure
214:27 - you'll have to go through all of those
214:30 - components which of course
214:32 - can get annoying
214:34 - and that's what prop drilling stands for
214:38 - the annoying part of passing perhaps
214:41 - literally down I don't know 10
214:43 - components or five components or
214:45 - whatever now at least in my opinion
214:48 - passing the props
214:51 - from parent to child is not a prop
214:54 - drilling again that comes down to
214:56 - preference but in my opinion that's
214:58 - totally okay if you have a parent and
215:00 - you pass it down to a child however
215:02 - if there is a grandchild basically if
215:05 - there is a child component inside of the
215:07 - book and then you have to do the same
215:09 - thing essentially you don't use it in
215:10 - the book component but you pass it down
215:12 - to whatever component in jsx yes in that
215:17 - case at least in my opinion it becomes
215:19 - prop Drilling and we'll come back to
215:22 - this topic
215:23 - a little bit later when we discuss the
215:25 - Alternatives when we discuss context API
215:28 - Redux and all that stuff again this is
215:30 - just to give you a general infill
215:33 - and one last time let me just repeat
215:36 - that in react
215:38 - as far as data flow we can only pass
215:41 - props down from the parent to the child
215:45 - okay and before we discuss es6 modules
215:48 - in react applications let's also cover
215:51 - more complex example when
215:55 - we have a function in a component and we
215:58 - need to invoke it in the child and as I
216:01 - said this is something that keeps
216:04 - tripping people up later in the course
216:08 - so please pay a close attention
216:11 - and in here we'll start with a little
216:13 - challenge where essentially in the book
216:16 - list component I want you to create a
216:19 - get book function
216:21 - now that get book function
216:24 - accept ID as an argument
216:26 - and it finds a book
216:29 - I can give you a hint I'm gonna use the
216:31 - find method and if you're not familiar
216:33 - with that you can reference this video
216:35 - in JavaScript nuggets
216:38 - and we're not going to do anything
216:41 - basically we want to grab the books all
216:44 - right we're going to find the book that
216:46 - matches the ID that we're passing in and
216:50 - we just want to log it we want to log
216:52 - our result again we don't know how to
216:55 - control the state yet
216:57 - so don't worry about that part just set
217:00 - up the function log the book
217:03 - that matches the ID that you passed in
217:07 - and then pass that function down to a
217:10 - book component and try to invoke it on a
217:13 - button click
217:14 - so essentially just like in the last
217:17 - video
217:18 - pass the function down come up with
217:20 - whatever prop to structure it grab the
217:22 - ID and try to invoke it
217:25 - and
217:26 - most likely you'll hit a bug and that
217:30 - essentially is the entire reason for
217:32 - this video so first try to set it up
217:34 - yourself
217:35 - and the next video I'll show you my
217:37 - solution for the get book function and
217:41 - also two possible solutions for the bug
217:45 - that you might encounter okay so let's
217:48 - get cracking I'm going to navigate back
217:51 - for now I have this display value I
217:55 - still know that I'm going to use the
217:56 - button so I'll just
217:58 - remove the reference as well as display
218:01 - value
218:03 - the prop is also not going to be here
218:06 - I don't need these values and let's
218:10 - first come up with the function so const
218:14 - get book
218:15 - then it's going to be looking for the ID
218:18 - and
218:19 - as far as the logic I want to find a
218:22 - book so I'm going to go with constant
218:23 - book is equal to books dot find
218:26 - so I'll use the find method and in here
218:29 - we pass in the Callback function and
218:32 - we need to come up with the parameter in
218:35 - my case I'm going to go with bulk and I
218:37 - wanna search in the array for the book
218:42 - whose ID matches this one how can we do
218:46 - that well we can go with book.id is
218:48 - equal to the ID that we're passing in
218:52 - and then like I said we're not going to
218:54 - be controlling anything what we can see
218:56 - on the screen but we do want to log the
218:59 - book
219:00 - again I'm going to get this error and
219:02 - you know what it's probably annoying to
219:04 - some people so I'll just remove it and
219:06 - I'll set it up from the scratch so let's
219:08 - save it yep everything works all that is
219:10 - nice now we need to pass it down okay
219:13 - same deal just go get book is equal to
219:17 - our function get book awesome then this
219:21 - time let's log it just so we can
219:22 - definitely see that it's there so both
219:24 - of them get this function get book all
219:28 - right awesome so let's grab it get book
219:32 - it's coming this one out for now we
219:34 - already have the button so we simply
219:36 - want to go on click
219:39 - and here comes the gotcha
219:41 - so how are we going to invoke it
219:44 - I mean
219:46 - you can try to do this way
219:48 - so get book here as a reference click me
219:52 - undefined
219:53 - why it's undefined well because it's
219:55 - looking for ID
219:57 - right
219:58 - okay let's pass in the array
220:00 - let's go here with get book Let's invoke
220:03 - it and let's pass it in
220:05 - so technically what's missing here is
220:08 - the ID
220:09 - all right so I know it's there I know
220:11 - it's in the props object so let me just
220:13 - grab it
220:14 - but now I have a different issue so I
220:17 - have the logs
220:19 - all this is nice
220:20 - but it's not happening on a button click
220:22 - essentially it happens when the
220:24 - application loads why
220:26 - because we have parentheses here
220:29 - and in JavaScript
220:31 - essentially if we have a logic like this
220:34 - where we have a function and then we
220:37 - invoke it
220:38 - what happens well we run the logic right
220:40 - so it's the same thing if I would go
220:42 - over here and if I would say I don't
220:44 - know two for example right so in here
220:46 - I'll pass in some kind of ID I will get
220:48 - that book
220:49 - so this is correct but we need to keep
220:51 - in mind that this runs instantly and the
220:54 - same thing happens over here
220:56 - we're not running this when we invoke
220:58 - this is not a reference anymore and the
221:01 - reason why I'm being so annoying and I
221:02 - keep repeating this because again later
221:04 - in the course as our applications get
221:07 - more complex this seems to be tripping a
221:10 - lot of people up
221:11 - yes in JavaScript once we set up the
221:13 - function if we don't have it as a
221:15 - reference if we have parentheses
221:18 - we'll invoke it right away
221:20 - and that's not what we want to do in
221:22 - this case in this case we don't want to
221:24 - do that so in the following video I'll
221:27 - show you two possible solutions okay so
221:31 - we have tiny bug in the code and the
221:35 - first option is to set up wrapper inside
221:39 - of the child component
221:41 - so again our main issue is that we are
221:44 - invoking this
221:46 - where we have the on click
221:48 - so in that case it runs instantly what's
221:51 - the solution well in the child we can
221:53 - come up with
221:54 - a different function in my case I'm
221:57 - going to call this get single book
221:59 - and
222:00 - will invoke the get book inside of the
222:03 - function
222:04 - so now we can pass the get single book
222:06 - and we're good to go you'll see that
222:09 - everything is actually correct so let me
222:11 - just I guess comment this one out
222:15 - just in case you ever need it for your
222:17 - reference so get book get book all that
222:19 - is good but instead of invoking it we're
222:22 - gonna go with const get single book
222:25 - again
222:26 - if you want to name this get my
222:28 - groceries that's also going to work
222:31 - the main point is that we want to invoke
222:34 - get book and grab the ID again this will
222:38 - get us the ID
222:40 - that belongs to that component as we're
222:43 - iterating over list again in the second
222:45 - component it's not going to get the ID
222:47 - from the first one that's the beauty of
222:49 - react and instead of going with get book
222:52 - we're gonna go with get single book and
222:56 - what do you know now of course
222:58 - everything is going to work so I'll
223:01 - save and once I click check it out this
223:05 - actually gets me the book with an idea
223:07 - of one
223:08 - and it references
223:11 - the book that is inside of the component
223:13 - which is just awesome and of course I
223:15 - can keep clicking and I'm going to be
223:17 - getting this book so let me I guess
223:19 - clean out the console and if I'll click
223:22 - on a second one hopefully you see where
223:24 - I'm going with this and yes
223:27 - eventually this is how we're going to
223:28 - remove items from the list now the logic
223:30 - is going to be a little bit different
223:31 - but the idea is going to be the same
223:33 - again
223:34 - the main thing that I'm trying to
223:37 - Showcase over here is that
223:40 - we need to pass a reference we cannot
223:43 - invoke the function right away and as
223:46 - far as the second option
223:48 - it's a little bit more challenging I
223:51 - guess as far as the concept where
223:54 - I can pass the anonymous function
223:58 - so think of it this way the general idea
224:01 - doesn't change I still pass the
224:04 - reference I'm just not naming it here
224:07 - I pass in the anatoms function and then
224:09 - I invoke it so let's go back to index
224:13 - and
224:15 - instead of get single book which is a
224:18 - valid approach again this really comes
224:20 - down to your preference the reason why
224:22 - I'm showing you both of them because
224:23 - again
224:24 - as you're going to be looking at someone
224:26 - else's project
224:27 - you most likely see
224:30 - one of those approaches so I just want
224:32 - you to be aware of them where you can go
224:34 - to get book and then pass the ID same
224:37 - deal here is a reference and inside of
224:41 - the function that's when we invoke the
224:44 - book and check it out once I click again
224:46 - I get the correct value in the console
224:51 - all right and up next let's talk about
224:53 - es6 modules
224:55 - or a way for us to split up our
224:58 - application into multiple files and of
225:03 - course folders
225:04 - and have the ability to Import and
225:08 - Export the code
225:09 - which essentially
225:11 - helps us to organize our application
225:15 - because if we take a look at the
225:16 - index.js I mean everything is awesome
225:19 - we have the list we iterate over we have
225:22 - the book component and all of that is
225:25 - great but you can probably imagine that
225:27 - as our application grows this is not
225:31 - sustainable I mean we need to have some
225:33 - kind of way where we can split up the
225:35 - code correct where we have separate
225:38 - functionalities
225:39 - in different places and then if we need
225:42 - that if we need the component or data or
225:45 - whatever
225:45 - we just access it and the way we do that
225:48 - is by using es6 modules which again are
225:51 - not unique to react react just uses them
225:54 - and if you have ever used node before in
225:57 - the previous versions of node they used
226:00 - to use only common JS now they also use
226:03 - es6 modules and again it's the same
226:06 - principle just the syntax is a little
226:08 - bit different and you'll see it's
226:10 - extremely straightforward so first I
226:13 - just want to remove all the get book
226:16 - logic as always
226:17 - it's available in the readme if you ever
226:20 - need a reference
226:22 - so I don't need to get book and I'm
226:24 - pretty sure I'm not gonna need the ID my
226:27 - apologies if I will and if I'll have to
226:30 - rewrite
226:31 - hopefully you can forgive me and I don't
226:33 - need the button okay good let's remove
226:35 - that
226:36 - and now
226:38 - essentially I want to come up with a
226:40 - file name we have two flavors when it
226:44 - comes to imports and exports we have a
226:46 - named one and we have a default one
226:50 - as always you can use whichever you
226:53 - prefer in most cases what you'll see if
226:57 - you have let's say a one component in
226:59 - the file you'll do that as a default one
227:02 - and if you have multiples they will be
227:04 - named now is it the only way how you can
227:07 - do that no but if I'll show you pretty
227:09 - much
227:09 - every flavor of Import and Export this
227:12 - video is going to be two hours long so
227:14 - we'll focus on two main ones name the
227:17 - export and default export and the only
227:19 - thing we need to understand
227:21 - is that when we import with the named
227:24 - one we need to use the same name so name
227:26 - must must must must must must be the
227:28 - same and with the default one we can
227:30 - come up with whatever value we want
227:32 - literally that's the main difference
227:35 - so first let's go to source and let's
227:38 - create box.js and book JS so this is
227:41 - going to be for our component and this
227:43 - is going to be for our data and then I
227:46 - want to remove books array from index.js
227:48 - and I want to add it to books j s
227:53 - so let's try this one out new file I'm
227:57 - going to go with books JS that's where
228:00 - I'll have my data and yes of course I
228:03 - can name this data as well if I want and
228:06 - I'm going to go with book JS let's start
228:09 - with the books array
228:10 - so let's get the data away from the
228:14 - index so let's clean up this file so I
228:17 - want to cut it out and I want to place
228:19 - it in the box of course the moment I
228:21 - save I'll have big fat error why
228:24 - because books is not defined
228:27 - of course I'm accessing it over here but
228:30 - there is no books anymore
228:32 - so in here we have this array and like I
228:35 - said we have two flavors and essentially
228:37 - with books I'll show you both and then
228:40 - with the book one we'll just use the
228:41 - default one so in here I can go with
228:44 - export notice I simply want to go with
228:46 - export and then whatever
228:49 - variable I'm exporting or function or
228:52 - hopefully you see where I'm going with
228:54 - this now again there are a few different
228:58 - flavors to this but we'll just stick
229:00 - with the most common ones so we'll save
229:03 - over here and then back in the index we
229:06 - need to repeat these steps however this
229:09 - is our own file so this is where that
229:11 - path comes into play when we go to
229:14 - import and this is extremely extremely
229:16 - important we need to go with curlish
229:19 - which means that
229:20 - we'll be getting a specific item meaning
229:24 - the item you're exporting is exported as
229:27 - named export so this needs to match
229:30 - exactly what I have in the file learn
229:33 - from and what do you know I'm looking
229:35 - for the books and remember I told you
229:39 - when we covered CSS JavaScript files we
229:42 - don't need to do that and the moment we
229:44 - save check it out everything works now
229:47 - if I'm gonna go here with carrot banana
229:49 - or whatever Bob it's not going to work
229:53 - so this is exported as books so anywhere
229:57 - anywhere in your application you need to
229:59 - access books that's a must you cannot
230:02 - just willingly come up with a different
230:04 - name so that's the first option we have
230:07 - let me go here with books and like I
230:10 - said I'll show you right away both of
230:12 - them but we'll stick with the named one
230:14 - now alternatively here's what we can do
230:16 - I can remove this export for now
230:19 - and I could say export default
230:23 - and then of course I need to reference
230:25 - the books
230:27 - one thing we need to keep in mind that
230:29 - we can only have one default export per
230:32 - file
230:34 - so you cannot have like 10 default
230:37 - exports that's the whole point that you
230:39 - have one default export and the biggest
230:41 - difference is that in the index.js we
230:45 - don't have any more this syntax we
230:48 - simply need to go with import and pretty
230:50 - much we're saying we're importing
230:51 - anything and this could be banana
230:55 - and I just need to change it here of
230:58 - course right so I need to go here with
231:00 - banana and of course everything works so
231:04 - hopefully this gives you a good idea
231:06 - again
231:07 - named and default and the biggest
231:09 - difference is that with default you
231:12 - actually can
231:13 - name it however we want in the index.js
231:16 - this is something that we talked about
231:18 - it before where you can technically set
231:20 - up a component with lowercase and Export
231:23 - it but when you import you will still
231:25 - have to use the application so first let
231:27 - me just go back to the name one
231:29 - export we use like I said the default
231:33 - one
231:34 - in the book component
231:36 - let's remove this and then in the
231:39 - index.js that's when we want to go back
231:42 - to the books
231:44 - little detour
231:45 - my apologies and now let's go with the
231:49 - component the reason why I showed you
231:51 - both I don't want you to think that you
231:52 - can only do default with a component
231:56 - you can do with any data so up next
232:00 - let's take this sucker out let's remove
232:03 - and
232:04 - I have book JS copy and paste and
232:07 - remember the extension that I used
232:09 - before
232:10 - so
232:12 - the Snippets one
232:13 - check it out I can of course create the
232:15 - component this way as well and notice
232:17 - how I right away have that export
232:20 - default book so now you know what that
232:22 - line of code is doing so let me copy and
232:25 - paste again and we're going to go with
232:27 - export
232:29 - export default
232:32 - and we're looking for the book component
232:36 - then we're going to navigate back
232:39 - and we want to go with import
232:42 - and book from the book
232:45 - also I want to right away mention that
232:48 - technically vs code tries to provide the
232:52 - Auto Import and when I say technically
232:54 - because I mean unfortunately sometimes
232:57 - it doesn't work but don't be surprised
232:58 - if for example you see me or some other
233:03 - instructor doing something like this
233:05 - where I can go with book and then notice
233:08 - out right away sets up that component
233:10 - now of course I'm not passing anything
233:12 - in here and it's looking for those props
233:14 - and all that but hopefully you see that
233:18 - yes I can type the component and visual
233:22 - studio code is going to try to help me
233:24 - and the reason why I say tries to help
233:27 - you because here and there it just fails
233:31 - so let me remove this one
233:34 - the import is in place and as you can
233:36 - see
233:36 - the logic still works
233:39 - I still have my list and everything is
233:42 - correct the difference right now is that
233:45 - I've nicely split up my code where the
233:49 - component is in one place so if I ever
233:51 - need to come back I can just navigate to
233:54 - a book.js this is all the logic for this
233:57 - one and you already know that we can add
233:58 - code remove code and right away all the
234:02 - components are going to be affected and
234:04 - the same goes with book shares in few
234:06 - videos we will cover
234:09 - how to set up local images in the source
234:12 - folder which essentially
234:15 - is a better approach because
234:17 - there's some optimizations
234:19 - happening under the hood so the result
234:22 - is better and yes all the work we're
234:26 - only going to do in books.js
234:28 - so we won't have to run back to index.js
234:31 - as long as the import is correct
234:34 - we're good to go again these are es6
234:37 - modules they're not specific to react
234:40 - you can use them in vanilla.js you can
234:42 - use them in node
234:43 - and essentially they help us to organize
234:48 - our application all right and now let's
234:50 - talk about how we can set up local
234:52 - images in the source folder which
234:55 - essentially is a better option for
234:58 - setting up the assets because like I
235:00 - keep saying when the react builds our
235:02 - production application effectively it
235:05 - optimizes those assets
235:08 - so unlike the public one where there's
235:11 - no optimization we just dump the asset
235:13 - and that's it in this case react is
235:17 - trying to help us and essentially by
235:20 - optimizing those assets
235:22 - the result is that our application is
235:25 - going to be faster
235:27 - and in order to Showcase how that works
235:30 - I decided to add one more book
235:33 - to our array and essentially we're just
235:36 - going to utilize the es6 modules we
235:39 - covered already in the previous video
235:43 - so first I want you to go back
235:46 - to Amazon so find that link or get your
235:50 - own images it doesn't really matter
235:52 - and just get for the book one and two
235:56 - so
235:57 - my guys have these two
235:59 - so I'm going to go and save images I
236:03 - think I'm going to place it on desktop
236:04 - and I'm just going to go with book one
236:07 - then let me find the second one
236:11 - I'll do the same thing
236:14 - and now I just need to come up with the
236:16 - third one
236:18 - this is probably going to be
236:20 - challenge but I'm gonna go with this one
236:22 - bad jokes why not
236:24 - so let's go here and I'm gonna go with
236:27 - book
236:28 - three and before we navigate to a
236:31 - desktop let me also get the data for
236:34 - this book
236:36 - so let me open this one up
236:38 - and basically this is going to be the
236:40 - title and this is going to be an author
236:44 - so let's navigate to the box and like I
236:46 - said we want to add the third one
236:48 - so let me copy and paste and let's just
236:51 - change the values around so these ones
236:54 - I'm going to get from the Amazon
236:57 - for now I just want to change the idea
236:59 - which is going to be three
237:00 - then we wanna
237:02 - get the
237:03 - title and I think I'm just going to go
237:06 - with the short one here
237:08 - title
237:09 - and let's get
237:12 - the author
237:13 - UPS keeps running away from me
237:16 - let me set it up over here
237:19 - and now let's deal with those images
237:21 - so I have these three images on my
237:23 - desktop
237:24 - the folder structure is definitely up to
237:29 - you for the bigger project you'll mostly
237:31 - have like assets and then images folder
237:34 - the CSS folder and hopefully you see
237:37 - where I'm going with this for now I'll
237:38 - just create a images and place it in the
237:41 - source but it's a must it has to be in
237:43 - the source so even if the structure is
237:46 - more nested make sure that the parent
237:48 - the main directory is still within the
237:50 - source please don't place it in the
237:52 - public it's not going to work
237:54 - so let's grab
237:56 - the folder and then we just want to move
237:58 - all of these images over here once
238:01 - they're there let's move them to the
238:03 - source like I just said
238:05 - and here's the deal we simply want to
238:08 - import those images one by one and yes
238:11 - this is a downside if you have 100
238:13 - images you'll have to do
238:15 - this one by one
238:17 - for example if you have
238:21 - images in the public then of course you
238:23 - can just reference it as dot forward
238:25 - slash and then whatever is the path
238:28 - so keep in mind yes
238:30 - it is a little bit more annoying
238:32 - technically because we need to do this
238:33 - one by one but the results are going to
238:36 - be better and essentially we want to
238:38 - import we want to come up with some kind
238:41 - of name and we need to look for images
238:43 - and then the file name and notice again
238:46 - full path basically extension included
238:49 - and then notice over here instead of the
238:52 - local one or the external one for the
238:55 - image what do we do we simply pass in
238:59 - that variable so one two and three in my
239:02 - case so let me save this I'm going to go
239:06 - to books again like I said we're not
239:08 - working anymore in index.js we only need
239:10 - to focus on box.js and one by one let's
239:13 - grab them let's go here and say import
239:18 - and IMG one from and now we're looking
239:21 - in the images and then book I believe it
239:25 - was a one and this was the extension so
239:29 - now we want to copy and paste and then I
239:30 - want to set up multiple cursors and
239:33 - let's just change these values so this
239:34 - is going to be book two and book three
239:37 - and like I said one by one
239:39 - or just change it we'll say IMG one
239:45 - img2 and img3
239:48 - img2
239:51 - and last one is going to be img3
239:56 - once we save we should have a list
240:00 - of
240:02 - three books
240:03 - and as you can see
240:05 - images work as expected again the main
240:09 - benefit of such approach not just for
240:12 - images again we're covering images keep
240:14 - in mind it goes for all the assets is
240:17 - that they get optimized when react or
240:21 - more specifically create react app they
240:24 - told that we're using build out our
240:26 - production ready application and as a
240:29 - result our applications are faster okay
240:32 - and before we set up a production or the
240:35 - application and deploy it online so
240:38 - everyone can see our awesome project
240:40 - let's work on two
240:42 - challenges and the first one is
240:45 - following I want to set up
240:47 - numbers just like they have in Amazon
240:50 - now please don't worry about the CSS
240:54 - the main goal is to figure out how we
240:57 - can get
240:58 - the correct number
241:01 - for the book
241:02 - so if I have a list
241:06 - each value represents whether it's the
241:08 - first one second one and hopefully you
241:10 - see where I'm going with this and I just
241:12 - want to display those numbers again I'll
241:15 - show you the CSS it's actually very
241:17 - simple and all that but for now just
241:19 - worry about getting that number
241:21 - somewhere here in a component
241:23 - and also we'll set up the title that's
241:26 - going to be our Second Challenge and for
241:29 - both of them pretty much
241:32 - if you want to work on that
241:33 - independently once I'm done explaining
241:36 - the challenge just stop the video try to
241:39 - accomplish it yourself and once you're
241:41 - ready to compare the results just resume
241:43 - the video now you don't have to you can
241:46 - simply just watch and code along with me
241:49 - and basically like I said I want to set
241:50 - up those numbers so I can see
241:53 - which
241:54 - item this is in the list whether it's
241:57 - the first one second one
241:58 - or third one don't worry about the CSS
242:01 - and I'll give you a tiny tiny hint I'm
242:04 - going to use index
242:06 - for this again I'm not using index for
242:09 - the key I'm using it to get the value
242:14 - so I can clearly display whether it's
242:16 - the first book second or third again if
242:19 - you want to work on this independently
242:21 - please stop the video right now and
242:24 - resume once you're ready to compare the
242:26 - results
242:27 - I'm going to go to index.js and then the
242:31 - second parameter in map method is the
242:34 - index so
242:37 - we can reference it here I'm going to go
242:39 - with index and I'm going to come up with
242:42 - a different prop name
242:44 - of course I can go with index index but
242:46 - I'm just going to go with number and
242:48 - then index all right good then let's go
242:52 - to a book JS so now we Navigate to a
242:56 - book component and we want to grab that
242:59 - number correct we're going to go here
243:01 - and remember
243:03 - arrays in JavaScript are zero indexed
243:06 - paste what does that mean that means
243:09 - that if I'm gonna go here with log and
243:11 - number
243:12 - I'll nicely see
243:14 - zero one and two which is awesome but it
243:19 - doesn't really match exactly correct so
243:22 - it should be one two three what's the
243:24 - solution well we can just add plus one
243:26 - and in my case I'm going to place that
243:29 - in a span so right after the author I'm
243:32 - going to go with span allari class just
243:36 - because I'll add the styles
243:38 - in a second and then we can go here like
243:42 - this number
243:44 - plus one which effectively will get us
243:48 - the right number and the reason why you
243:50 - see everything displayed because of
243:51 - course I already added the CSS and my
243:53 - apologies let me just remove this one
243:57 - for now I was already working on that
244:00 - we'll set that one up in a second if you
244:02 - have the same setup you should see
244:04 - number all the way after the author
244:10 - and also I want to showcase that once we
244:13 - go back to a JavaScript land of course
244:16 - we can use the template literals as well
244:18 - so let's say in my case I want to add
244:20 - that hashtag in front of it
244:23 - so in order to do that I'm gonna go here
244:26 - with the template literals and then
244:29 - remember in a template literal in order
244:31 - to access
244:32 - the variable we need to go with dollar
244:36 - sign and then the curlies keep in mind
244:38 - that is a JavaScript syntax
244:41 - we are back here in JavaScript plan
244:44 - so we just need to follow the same rules
244:46 - I'll start here with the hashtag
244:49 - and then I'll go to dollar sign and then
244:53 - the curlies so again I'm accessing the
244:55 - same number I'm still adding plus one
244:57 - the difference is that I just nicely
244:59 - added this hashtag that's it and then as
245:02 - far as the CSS we want to go to index
245:05 - CSS I want to make book relative because
245:08 - of the span
245:10 - with the value of number
245:12 - is going to be absolute
245:15 - so in order to control the absolute we
245:17 - need to set up the parent as relative
245:19 - then let's keep moving and we're going
245:22 - to go with number like I said position
245:24 - absolute then I want to go with top
245:28 - zero left
245:30 - is also going to be zero
245:33 - and we have font size padding and I'm
245:37 - just going to add those border radiuses
245:39 - since I'm using the poor radius for
245:41 - entire card I just decided that
245:44 - it's a good idea to do the same thing
245:46 - for the sponge so padding is going to be
245:48 - zero point
245:49 - 75 Rems than font size one
245:54 - after that we have Porter and I don't
245:57 - want to go with border radius because
245:59 - essentially this is going to apply all
246:02 - around and it's hard to see because we
246:04 - don't have any background so let's say
246:06 - here red of course I mean it doesn't
246:09 - look as good as
246:12 - when we go with border top and we're
246:15 - gonna go with left radius so only the
246:18 - left side and I also decided to do the
246:20 - right side now you don't have to so
246:22 - let's copy and paste this is going to be
246:24 - bottom
246:26 - and then right
246:30 - let's save that okay awesome and now
246:34 - let's just add some background colors
246:36 - and this one I actually got from the
246:37 - Amazon so
246:39 - it's not really a secret you can just go
246:41 - there pick the color
246:44 - and it's going to spit back this one
246:46 - most likely
246:47 - um let's just go with color
246:50 - and set it equal to a white
246:53 - and with that we're done with this
246:55 - challenge hopefully you enjoyed it and
246:57 - in next video work on the title
247:00 - challenge all right and up next let's
247:01 - work on the title challenge just like
247:04 - the previous challenge CSS is optional
247:06 - don't worry about the CSS the main goal
247:09 - is to set up an element with some kind
247:12 - of title and that element needs to sit
247:15 - on top of our books same deal if you
247:20 - want to work on it independently please
247:22 - stop the video and resume once you're
247:24 - ready to compare the results and
247:27 - essentially I'm gonna go back to
247:28 - index.js and here I guess the biggest
247:31 - gotcha is that we cannot return two
247:34 - adjacent elements correct so if I'm
247:36 - gonna do something like this it's not
247:39 - going to work what's the solution well
247:41 - we need to come up with a parent
247:43 - one option for parent is what it is
247:45 - react dot fragment or we can have here
247:49 - shortcut like a show so let me move this
247:53 - sucker down
247:54 - and then let's come up with that value
247:56 - so I'm going to call this um Zone
247:59 - and best
248:01 - Sellers and like I said CSS is optional
248:05 - but
248:06 - I'm still at it somewhere there doesn't
248:08 - really matter where normally I
248:11 - place it
248:13 - as I'm adding the item but in this case
248:15 - I'll somewhere in the bottom I'm just
248:17 - gonna go with heading one
248:19 - and text align
248:22 - text line Center
248:24 - then margin top
248:26 - I'm gonna go to four Rems and then
248:29 - lastly let's go with capitalize so text
248:31 - transform and let's set it equal to a
248:35 - capitalized and then also
248:38 - I want you to change the title
248:40 - in the public one
248:42 - remember
248:44 - there is this index HTML where we can
248:46 - change the title
248:47 - come up with the value and just change
248:50 - it in my case I have react tutorial at
248:52 - the end I want best sellers or something
248:55 - along those lines let me open this one
248:57 - up public
248:59 - access HTML remember
249:01 - this is where our entire application
249:04 - lives then we want to find the title
249:07 - instead of react tutorial we'll go with
249:09 - best
249:10 - Sellers and with this in place we are
249:14 - done
249:15 - with the challenge hopefully everyone
249:17 - enjoyed it and in the following videos
249:19 - we'll build a production ready
249:22 - application and deploy it on netlify
249:25 - okay and up next let's work on the
249:29 - production application you see this is
249:31 - our development environment
249:35 - which works really awesome we can right
249:37 - away see the results in the browser and
249:39 - all that
249:40 - but when we want to deploy the
249:42 - application
249:43 - the setup
249:44 - needs to be different
249:47 - essentially we're not going to have the
249:49 - source and then public and all that
249:51 - and in order to set up that production
249:53 - application so we can deploy it on any
249:57 - provider we need to stop the server
250:01 - and also we just need to take a peek in
250:03 - the package.json remember
250:06 - initially I showed you the script
250:09 - so these are our commands so start
250:11 - here's the development server a build
250:14 - one
250:15 - is the one that builds that production
250:17 - ready application and in order to run it
250:21 - I'm going to clear the terminal and the
250:23 - command is clear we go with npm and then
250:26 - we add this run
250:28 - and build
250:30 - npm run build and what you'll notice
250:34 - once we run the command
250:36 - create react app
250:37 - is going to be busy building our
250:41 - application and once everything is done
250:44 - there's going to be an extra folder a
250:47 - build folder this is where our
250:50 - production ready application is going to
250:53 - live now I don't know how long it's
250:55 - going to take most likely oh no as I was
250:57 - saying it actually finished it so notice
251:00 - this build folder right now
251:02 - and check it out this is our production
251:04 - ready application
251:06 - and if you'll take a look at it you'll
251:09 - notice that it has a bunch of static
251:11 - assets so a bunch of HTML CSS JavaScript
251:15 - and all that so again we don't have any
251:17 - more of The Source One
251:19 - this is only while we're developing once
251:22 - we run npm run build this is the
251:25 - production ready application and
251:27 - effectively we can use this build folder
251:31 - with pretty much any provider that you
251:35 - pick in our case we're going to go with
251:37 - metal fiber you don't have to again if
251:39 - you use some other provider it's going
251:41 - to work the same way just like you
251:43 - normally would with the HTML project or
251:47 - vanilla.js project and hopefully you see
251:49 - where I'm going with this once we run
251:51 - npm build
251:53 - we can get this build folder that we can
251:56 - use with any of the hosting providers as
252:00 - far as the hosting like I said already
252:03 - 50 000 times in the previous video you
252:05 - can use your provider but since I use
252:08 - nettlefive
252:10 - during the course we'll use this one
252:12 - now let me be very clear they're not
252:14 - sponsoring this video they're not
252:16 - sponsoring the course I'm not paid to
252:18 - say this I just enjoy the service they
252:21 - do offer generous free tier so
252:23 - essentially the only thing you need to
252:24 - do is sign up that's it you'll have to
252:27 - provide your email and you're good to go
252:30 - and once you sign up for account
252:32 - just log in and this is going to be your
252:35 - dashboard then you want to go for a new
252:38 - site and of course
252:39 - if you just opened up you're not going
252:41 - to see the sites but since I'm using
252:43 - this already for quite a while I have a
252:46 - bunch of sites in here
252:48 - you want to look for add new site and
252:50 - we'll start with deploy manually yes
252:52 - with a later project we will take a look
252:55 - at the
252:56 - GitHub option but for now let's just go
252:59 - deploy manually
253:01 - and essentially we just want to look for
253:03 - that build one so let's go to tutorial
253:05 - and let's grab this build folder
253:10 - yep we want to upload
253:12 - the
253:14 - process
253:15 - it's going to be pretty fast and once
253:18 - netlify is done processing the files we
253:22 - will have our site live and if you click
253:25 - on this link
253:26 - you'll see our awesome project one last
253:29 - thing that I want to mention in this
253:31 - video if you want to change the site
253:34 - name
253:35 - you just need to navigate here to a site
253:39 - settings let's say you're not happy with
253:41 - this generic name go to change site name
253:45 - and you need to provide whatever value
253:48 - you want now keep in mind unless you add
253:51 - the custom domain it's always going to
253:53 - have this notify that app which in my
253:55 - opinion is not a big deal but just in
253:56 - case you don't want to so yes you'll
253:59 - effectively need to use the search
254:00 - engine to figure out how you can set up
254:04 - a custom domain which by the way is not
254:06 - hard but we're not going to cover in
254:08 - this course because this is a react
254:10 - course and if the name is already taken
254:13 - let's say if I'm going to go with react
254:14 - of course I'm going to have this error
254:17 - so just keep that in mind okay so I'm
254:19 - going to go with the react
254:21 - horse and fundamentals hopefully that is
254:24 - not taken but you never know yep
254:27 - everything works like I said this is the
254:30 - link now that we can share
254:32 - and anyone who visits this link is going
254:35 - to see our awesome application so this
254:38 - is it for react fundamentals hopefully
254:41 - everyone enjoy this section and I'll see
254:44 - you in the next one alright we're pretty
254:46 - much done with react fundamentals and
254:50 - before we start discussing Advanced
254:52 - react topics let's quickly cover all the
254:56 - files in the source folder
254:58 - that create react app provides by
255:01 - default
255:02 - and I'll also show you which files
255:05 - I typically remove when I start a new
255:09 - react project with create react app
255:12 - technically this video is optional so if
255:16 - you don't feel like
255:17 - following along feel free to move on to
255:20 - the next video
255:21 - if you however do want to follow along I
255:25 - suggest installing new create react app
255:28 - instance and remember the command was
255:31 - following first
255:33 - we want to navigate to
255:36 - where we will set up the project so in
255:39 - my case that is going to be desktop and
255:41 - then we want to type npx create react
255:45 - app at latest and then the app name so
255:49 - type this command and resume the video
255:52 - once all the dependencies have been
255:55 - installed
255:57 - and once the install is complete
256:00 - just open up the project in your text
256:03 - error
256:04 - and you don't have to bother with npm
256:07 - start
256:09 - since essentially we'll spend most of
256:11 - this video in the source folder so just
256:14 - open up the project and text error and
256:17 - then crack open the search folder if we
256:19 - navigate to index.js you'll see that the
256:23 - setup is almost almost the same so we
256:26 - have
256:27 - Imports for react and react Dom we also
256:31 - have here import for index CSS now of
256:34 - course if we navigate there we can see
256:36 - that the code is a little bit different
256:38 - and again the general idea is that
256:40 - essentially this is where you set up
256:43 - your Global Styles or maybe all the
256:46 - styles again it really depends on your
256:49 - application
256:50 - then we have app component which I'm
256:53 - going to talk about in a second we also
256:55 - have this one
256:57 - so the report web vitals and essentially
257:01 - if you're interested learning more they
257:03 - provide detailed info in the comments
257:04 - now in our case we're not going to
257:07 - implement that so here's what we can do
257:09 - we can simplify we can remove this code
257:12 - and we can also remove this import
257:16 - so that's done then what's happening
257:19 - here with app.js well you see unlike the
257:22 - react fundamentals where if I remember
257:25 - correctly
257:27 - we ended up with a book list component
257:29 - which was in the index.js
257:33 - a common convention is to
257:36 - set up that root component as a app
257:40 - and set it up in a separate file
257:42 - basically we have app.js so this is our
257:46 - root component this is where all our
257:49 - components are going to meet
257:52 - um it's sitting in a separate file and
257:54 - Convention is to call this app and most
257:57 - likely I don't have to say that you can
258:00 - call this orange and everything is still
258:02 - going to work as long as the Imports are
258:05 - correct
258:06 - so again it's just a convention and
258:09 - basically if we navigate here in the
258:11 - app.js you'll see that the import logo
258:14 - so this is where we can see over here on
258:17 - the screen
258:18 - and since we're already familiar how the
258:20 - es6 modules work of course we're
258:22 - familiar with this code and then rest of
258:24 - the return now we'll start from the very
258:27 - scratch so
258:29 - I'll remove the logo actually I'll
258:32 - delete the file in a second as well
258:34 - and as far as the return well let's just
258:36 - go here with simple heading one
258:40 - and let's say Backroads app back roads
258:43 - and app let's save it because I still
258:45 - want to talk about the app CSS but while
258:49 - we're still in the index.js one last
258:51 - thing that I want to mention notice here
258:53 - how in the render
258:55 - not only we have the app so that's the
258:58 - root component again
258:59 - the exact same setup how we had in react
259:03 - fundamentals the difference of course is
259:05 - the component instead of book list now
259:08 - we have app
259:09 - but it's also wrapped here in this
259:11 - strict mode
259:12 - and essentially Street mode is a tool
259:14 - for highlighting potential problems in
259:17 - application
259:18 - it activates additional checks and
259:20 - warnings
259:21 - for its descendants Now it only runs in
259:25 - development so it's not going to impact
259:29 - your production build
259:30 - and one gotcha
259:32 - is that in development it renders twice
259:36 - and I'll showcase that in a second don't
259:38 - worry now if you want you can remove
259:40 - please keep that in mind it is an option
259:43 - if for some reason you don't like the
259:45 - warnings you don't like the fact that it
259:47 - renders twice you can always remove this
259:49 - component and just to Showcase that if I
259:51 - go back to app.js somewhere here
259:55 - if I go with console.log and if I'll say
259:58 - hello you'll notice that the moment we
260:00 - save
260:01 - basically it runs twice that's something
260:04 - that we need to keep in mind so again
260:05 - once we refresh notice essentially we
260:08 - have two hellos in the console and again
260:11 - it's because we have strict mode
260:14 - wrapping our app component our root
260:17 - component however it is not going to
260:20 - affect the production
260:23 - so once we ship this to production the
260:26 - strict mode is not going to affect our
260:29 - application
260:30 - now notice here how we have import for
260:33 - app CSS so essentially we have two files
260:36 - we have index CSS and we have app CSS
260:40 - and you can already see that
260:42 - essentially we can split up our CSS code
260:46 - so instead of jamming
260:49 - our entire CSS logic in one file we can
260:52 - split it up
260:55 - for example you create a component and
260:58 - you right away set up a
261:00 - CSS file with the corresponding logic
261:02 - now one gotcha we need to be aware of
261:06 - all of this is still
261:09 - going in the same pile now what do I
261:12 - mean by that
261:13 - so let's say if in the index CSS I have
261:16 - a code for heading 1. and I'm not going
261:19 - to be particularly original I'm just
261:21 - going to say here color red
261:24 - if we navigate back of course everything
261:26 - works now
261:28 - if we go to app CSS
261:31 - the thing is
261:33 - it's not going to be isolated by default
261:37 - basically it's not going to be scoped
261:40 - to just this app Js
261:43 - essentially whatever logic we're gonna
261:45 - add here in the app CSS it's gonna get
261:49 - added to whatever logic we have in the
261:52 - index file or any other CSS file and
261:56 - again just showcase that
261:57 - effectively we'll remove this component
261:59 - altogether in a second but for now let
262:01 - me just go here with heading 1 and again
262:04 - we need to go with color
262:06 - I'm gonna go with blue and once we go
262:10 - there actually this overrides wherever I
262:12 - have in the the index CSS so yes you can
262:16 - definitely
262:17 - set up the files and split up the logic
262:21 - however keep in mind one thing
262:23 - you'll still need to be careful as
262:25 - you're setting up the CSS now of course
262:27 - there are solutions for that something
262:29 - that we're going to cover in this course
262:31 - for example I am a huge fan of CSS and
262:34 - JS more specifically styled components
262:37 - and that's why I will cover in this
262:38 - course that solved this problem but
262:41 - right out of the box yes
262:44 - you can nicely split up your CSS code
262:47 - but please keep in mind that you'll have
262:50 - to be careful
262:51 - because all that CSS code ends up in one
262:55 - place
262:56 - so hopefully that is clear it's not
262:59 - scoped by default to a certain component
263:04 - all right I think we covered everything
263:06 - so now let me just remove this log
263:09 - let me also remove the import we won't
263:12 - need that essentially we'll just delete
263:14 - bunch of files we won't need them so
263:17 - let's start here with app CSS we'll also
263:20 - remove test so this is if you want to
263:22 - set up tests which we're now going to do
263:24 - then we also want to select the logo we
263:27 - don't need the logo this one as well as
263:30 - setup best so you should only see
263:34 - once you're done with delete app.js
263:36 - index CSS and index
263:39 - .js
263:40 - so let me remove
263:43 - and yep now I have again index.js
263:47 - this is where we inject
263:49 - our JavaScript logic into
263:52 - index.html in the public one and the
263:56 - app.js is our root component okay and up
264:01 - next let's switch to beat basically
264:03 - instead of create react app we're going
264:06 - to use different tool to scaffold and
264:09 - develop our react project now I really
264:12 - don't want to spend too much time on
264:14 - discussing benefits of beat if you're
264:17 - interested in learning more there are
264:19 - plenty of YouTube videos and blog posts
264:22 - that cover that
264:23 - and as a side note they also cover that
264:27 - in a docs just click on why veed tab in
264:32 - short at this point vid is much faster
264:35 - than create react app and right out of
264:38 - the box it provides tons of great
264:41 - features
264:42 - and as a result we get way better than
264:46 - experience
264:47 - now if you're wondering why we covered
264:50 - create react app in the first place
264:53 - effectively why we did not start with
264:56 - Veet right away well there are two
264:59 - reasons first
265:01 - there's still plenty of
265:03 - code examples that use create react app
265:06 - so in my opinion it's useful to know the
265:09 - general layout and commands second more
265:12 - importantly I really want you to get
265:14 - comfortable writing react code in any
265:17 - environment you see
265:20 - once you start working for a company or
265:22 - switch to one of the react Frameworks
265:24 - for example nexjs the dev environment
265:28 - will be different yes you'll still write
265:31 - the same react code but folders and
265:33 - commands they will be different in each
265:36 - environment and therefore it's important
265:39 - for us to get comfortable working
265:41 - in different setups with that said once
265:44 - we cover beat setup you'll see that the
265:47 - general idea is pretty much the same
265:48 - it's just here and there the
265:51 - implementation is tiny bit different
265:53 - okay and in order to get started with
265:56 - beat project we first want to navigate
265:57 - to the Dachshund the URL is
266:01 - dot Dev again URL is
266:06 - dot dev then we want to go with get
266:11 - started
266:12 - continue scrolling and we're gonna go
266:15 - with template now I'm assuming you're
266:18 - using the latest node version so if you
266:22 - don't if your npm version is less than
266:25 - seven then of course
266:26 - use this command
266:28 - but since I'm assuming that most people
266:30 - who are watching have the npm greater
266:34 - than seven that's why I'm gonna go with
266:36 - this command
266:37 - so we're looking for npm create Veet at
266:40 - latest then we need to provide the name
266:43 - and then we have two sets of dashes
266:46 - template and as you can see they provide
266:48 - bunch of templates we have for
266:51 - vanilla.js for view spelled and all that
266:53 - now we're looking for the react one so
266:56 - essentially we just need to
266:59 - structure this command so let me
267:01 - navigate back
267:02 - I'm going to massively zoom in again in
267:05 - my case I'm going to create that project
267:07 - in the desktop
267:09 - of course it's really up to you where
267:10 - you want to do that and now let me
267:12 - carefully
267:14 - grab this command so I'll take
267:16 - everything up to a template first I'm
267:18 - going to change the name it's not going
267:20 - to be my view app
267:22 - it's actually going to be a react app
267:24 - and then as far as the template we want
267:26 - to go with space and then type react or
267:29 - copy and paste react that's really up to
267:32 - you as you can see
267:34 - you'll right away get the project so
267:37 - that's the cool thing again I did not
267:38 - stop the video or anything like that you
267:41 - right away get the project and now we
267:43 - just want to spin it up so first let's
267:45 - just open up the text editor then I'm
267:48 - going to drag and drop
267:50 - and you'll see that the setup is very
267:53 - very similar to the create react app and
267:57 - first let's just navigate to the package
268:00 - Json and you'll notice that the command
268:02 - we're looking for is npm run Dev so this
268:05 - is going to spin up the dev server and
268:09 - before we can do that we want to install
268:10 - the dependencies so we go here with npm
268:13 - install so
268:16 - this might take a little bit but trust
268:18 - me it's definitely going to be much
268:21 - faster than create react app and then we
268:24 - want to go with npm run Dev again
268:26 - instead of npm start we go with npm run
268:31 - Dev
268:32 - and also the localhost is going to be
268:35 - different so yes we'll still have the
268:37 - react application and we'll take a look
268:39 - at the code in a second and all that
268:41 - but the Local Host is going to be 5173
268:45 - so up until now we have been using
268:48 - localhost 3000 but now it's going to be
268:52 - 5173 and before we take a look at the
268:55 - application I just want to quickly
268:57 - mention
268:58 - if you're interested
268:59 - in basically the info that I'm providing
269:02 - if you want to keep that as a note it's
269:05 - actually located in the fundamentals all
269:08 - the way at the end of the readme
269:10 - so after
269:12 - all the fundamental stuff
269:14 - over here you'll find info on create
269:17 - react app as well as beat
269:21 - so I guess our project is up and running
269:24 - at localhost 5173 so why don't we
269:27 - navigate over there just to see what we
269:30 - have
269:31 - and yes probably during this video it's
269:34 - going to be annoying to some people that
269:35 - I'll just keep repeating that as you can
269:38 - see the setup is extremely similar
269:39 - because that's the main point that I'm
269:42 - trying to get across
269:45 - even though we're switching to a
269:46 - different tool the setup is going to be
269:48 - extremely extremely similar so we
269:51 - installed dependencies
269:53 - if we want to run the project we go with
269:55 - npm around Dev as you can see here at
269:58 - the top we have node modules what do we
270:00 - have over there those are dependencies
270:02 - as far as the differences we must must
270:06 - name our files
270:08 - jsx so in create react app we can name
270:13 - the file
270:14 - JS or jsx
270:16 - in wheat the rule is
270:20 - jsx so if you'll name your file JS and
270:23 - then start setting up the component yes
270:26 - wheat will complain
270:28 - so that's the first difference we must
270:31 - use jsx extension in the read now second
270:35 - you'll notice that
270:37 - even though the public folder is there
270:39 - and the idea is exactly the same
270:42 - whatever we place over here is publicly
270:44 - available
270:46 - there is no index HTML
270:48 - so
270:49 - in here the index.html is sitting in a
270:52 - road again the idea is exactly the same
270:55 - notice we still have the div with an
270:58 - idea root so this is where our
271:00 - application effectively is going to live
271:03 - we can still change the title over here
271:05 - so for example I can say react project
271:10 - and now of course once I save
271:12 - this is what I'll have here in a tab so
271:15 - that part doesn't change only the
271:17 - location
271:18 - and once we're done with index.html now
271:21 - let's discuss main jsx so unlike create
271:25 - react app where we used index.js
271:29 - in beat project we need to use Main jsx
271:33 - and yes
271:35 - as you can see the code is extremely
271:37 - similar to
271:39 - the index.js in create react app
271:43 - so the idea is exactly the same we just
271:46 - need to use Main jsx and as you can see
271:51 - we're importing the app so this is still
271:54 - going to be our root component now the
271:58 - only thing that we haven't seen
272:00 - is the use State something that we're
272:02 - going to cover in a few videos but if
272:05 - for example
272:07 - I go here and change the jsx you'll see
272:12 - that I'll have the same result in the
272:14 - browser so let me go here I'll remove
272:17 - everything I'm gonna go with heading 1
272:19 - and I'll say
272:21 - our first
272:24 - beat project
272:27 - and check it out once we save course
272:30 - this is what we'll have on the screen so
272:31 - again the idea doesn't change
272:34 - we still import
272:36 - the logo the same way because notice now
272:40 - the assets is sitting in the source so
272:42 - this is the public one this is where we
272:44 - have all the assets that are publicly
272:46 - available however
272:48 - within the project when we're going to
272:50 - be importing those assets they are
272:52 - nicely tucked away in this assets folder
272:55 - in the source and this should look
272:57 - already familiar since we did Cover the
273:00 - es6 modules and all that
273:02 - and the rest of it is pretty much the
273:05 - same again don't focus on this one we'll
273:07 - cover this hook in pretty much few
273:10 - videos so don't worry about that we also
273:12 - have app CSS where basically we have all
273:15 - the Styles and also the index CSS and we
273:18 - did Cover differences when we discussed
273:21 - the folder structure in create react app
273:24 - so I'm not going to repeat that and
273:28 - lastly I just want to mention that
273:30 - if we want to build the application we
273:33 - go with
273:34 - and PM run build which again is going to
273:38 - create that production or the
273:40 - application and let's try it out and PM
273:42 - run and build and in this case is going
273:46 - to be sitting here in the dist folder so
273:49 - unlike create react app which creates
273:52 - build folder we have this folder
273:55 - same deal we can take this folder drag
273:58 - and drop and notify and we're good to go
274:00 - and yes
274:01 - if you use continuous deployment
274:03 - the idea is going to be exactly the same
274:05 - and as a signal notify right away picks
274:08 - it up so
274:10 - if you go with Veet right away it will
274:13 - say hey do you want to use the this
274:15 - folder and do you want to use this
274:17 - command so again
274:21 - the general idea is exactly the same
274:23 - whether it's the Imports whether it's
274:26 - the root component the index.html and
274:29 - all that so that is not going to change
274:32 - only difference is that this tool is
274:35 - much better so our Dev experience is
274:38 - just going to be awesome compared to
274:41 - create react app awesome and once we're
274:45 - comfortable with react fundamentals as
274:47 - well as Veet setup but finally discuss
274:51 - Advanced react topics
274:54 - so in the following videos we're going
274:57 - to cover things like react hooks
275:00 - conditional rendering fetching data
275:03 - forms context API and bunch of other
275:07 - cool things
275:08 - I also prepared quite a few challenges
275:11 - just so we can apply our knowledge right
275:14 - away and hopefully that way by the time
275:17 - you're done with the section
275:18 - you'll be able to apply the concepts
275:21 - while you work on your own applications
275:24 - so if possible
275:26 - try not to rush through the content
275:29 - since such approach very rarely leads to
275:33 - long-term results in order to follow
275:36 - along you mean some assets and they're
275:39 - located in the same GitHub repo so my
275:43 - profile and then you're looking for
275:45 - react course version 3. and even if you
275:50 - already downloaded the repo
275:52 - I suggest repeating that step since that
275:55 - way you'll get the very latest version
275:59 - you see as I'm recording I tend to
276:02 - update some stuff for example read me
276:06 - so once I'm here I'm gonna go for
276:08 - download zip option
276:11 - then I'm gonna navigate back
276:13 - look for downloads crack it open
276:17 - up the directory and then we want to
276:20 - grab the advanced react folder
276:24 - so it's up to you you can work in the
276:26 - main folder but I always prefer to work
276:29 - in a separate folder then I want to open
276:31 - up the text editor
276:33 - and right away I'll set it side by side
276:36 - with the browser again this is going to
276:37 - be the case where
276:39 - I'm gonna choose this option
276:41 - so let me set them side by side
276:45 - and basically you'll notice that it's a
276:49 - pretty typical beat project we just have
276:52 - here some assets and of course I'll
276:54 - discuss them
276:56 - in more detail
276:57 - in a second for now I simply want you to
277:00 - navigate to the readme and in here
277:03 - effectively you're looking for these
277:06 - commands now if you can run them in your
277:09 - operating system in such manner awesome
277:12 - if not then just run them separately so
277:15 - I want to open up the integrated
277:16 - terminal I'll make this one bigger and
277:19 - then we're gonna go with npm install
277:21 - and you know what I'll just run them
277:24 - separately
277:25 - just so you can see that everything
277:27 - works so
277:29 - we have npm installed so we installed
277:30 - dependencies and then we want to go with
277:32 - npm run and Dev
277:36 - and essentially this again is going to
277:37 - open up the project on localhost 5173
277:42 - and yep we should see a heading 2 with
277:46 - Advanced react and rest of the info
277:49 - essentially is going to be located in
277:52 - tutorial marking on file so this is just
277:55 - a general readme how we can spin up the
277:57 - project and all that in tutorial you'll
277:59 - find effectively all of the info we're
278:03 - going to cover in the following videos
278:05 - and as far as our workflow like I
278:09 - mentioned before this is a traditional
278:11 - Veet application I just removed some
278:14 - boilerplate then provided some assets
278:17 - like CSS and data and all that just so
278:20 - we can work on more meaningful examples
278:23 - and for that I do need some assets I
278:26 - also removed the strict mode just so we
278:29 - don't have a bunch of logs so remember
278:31 - strict mode was adding that extra login
278:33 - well working and essentially exploring
278:37 - stuff I don't want to have too many
278:39 - locks so if you'll take a look at the
278:42 - main jsx you'll see that essentially
278:45 - everything is the same
278:47 - there's just no strict mode in the index
278:50 - CSS you'll find all of the CSS we're
278:53 - going to use data this is going to be
278:56 - some data that we're going to use in
278:57 - examples app jsx so this is going to be
279:01 - our root component
279:03 - then we also have some assets here
279:07 - again something that we're going to use
279:10 - during the examples and there's also
279:13 - public which by the way we're not going
279:15 - to use and of course there's no modules
279:18 - which are our dependencies now if we
279:21 - again navigate back to tutorial you'll
279:23 - see that basically we have this tutorial
279:25 - directory
279:27 - and in here we have a bunch of folders
279:29 - so it starts with your state all the way
279:32 - to userducer and
279:35 - I'm actually working on more topics
279:37 - right now so probably by the time you
279:40 - install this you'll see more folders and
279:43 - essentially the idea is following each
279:46 - folder is going to have final and a star
279:49 - so we will do a work in a star folder so
279:53 - there you'll find some files and it
279:56 - really depends sometimes there's going
279:58 - to be just a structure for component and
280:00 - sometimes I'll provide already some
280:02 - stuff so yes
280:03 - sometimes we'll code pretty much
280:06 - everything from scratch but if we
280:08 - already have covered that topic and if I
280:10 - just want to provide some extra info on
280:13 - that then yes you'll find already some
280:16 - code in the star and of course
280:20 - if this doesn't make any sense right now
280:22 - you'll see as we start working on the
280:25 - examples and then in the final
280:27 - you can find the complete source code so
280:31 - this one you can use for two examples
280:33 - let's say if you want to compare your
280:36 - code to mine
280:38 - or you simply want to see how the
280:40 - feature looks like
280:42 - once it's done since again I will be
280:45 - setting up some challenges so if you
280:47 - want to take a peek
280:48 - out effectively runs in the browser then
280:51 - just set up the file and the way we set
280:54 - up the file is following
280:57 - so in the app.js essentially we'll just
281:01 - import that file
281:03 - and then we'll render it over here again
281:06 - you're gonna render both you can render
281:09 - star and the final this is really up to
281:11 - you but you'll definitely need to get
281:14 - that starter so pretty much every
281:17 - lecture is going to have its own star so
281:19 - you'll have to import that and set it up
281:22 - over here in the app jsx and then if you
281:27 - want to see the final folder again it
281:29 - could be any file just navigate to
281:32 - tutorial in this case you're looking for
281:34 - the final one and then whatever file you
281:37 - want
281:38 - and the reason why you have here this
281:41 - container is simply for some basic
281:43 - styling so notice how it's nicely
281:45 - sitting in the center it has some
281:46 - padding and all that technically if you
281:49 - don't want to you can just remove it and
281:51 - everything's still going to work and
281:53 - just to Showcase let me just navigate
281:57 - to let's say app jsx
282:01 - let me move up now the component name is
282:04 - really up to you I'm just gonna go with
282:06 - star and final because it just makes a
282:09 - little bit more sense so I'm gonna go
282:10 - here with import starter so that's going
282:13 - to be my component name and then from
282:14 - and then for now let me just navigate to
282:18 - tutorial then
282:21 - just as a example I'm gonna go to let's
282:25 - say use ref so that's going to be seven
282:28 - and then starter like I said and in
282:30 - there we only have one file so we grab
282:33 - this one and for now let me just remove
282:35 - that heading too
282:37 - then let's go with starter
282:39 - and then let me close the component so
282:43 - once I save notice I'll have some code
282:46 - already so essentially the idea is that
282:48 - we're gonna go to that file so that is
282:51 - zero seven user blah blah blah blah blah
282:54 - your starter essentially this is where
282:57 - we'll start setting up the logic and the
283:00 - same is going to work for all of the
283:02 - files and like I said if you want to see
283:05 - let's say how the complete code looks
283:08 - like you can simply take and you know
283:10 - what let me close the sidebar I'll copy
283:12 - and paste over here
283:15 - and once I'm done with that I'm just
283:17 - going to rename since we cannot use the
283:19 - same name correct so I'm going to go
283:21 - here with final and let's also look in
283:25 - the final folder
283:26 - so let's change things around and let's
283:29 - look in a different folder just so you
283:31 - don't think that I'm messing with you
283:32 - I'm just gonna go to I don't know maybe
283:35 - use effect or you know what let me go to
283:38 - your state I'll show you a nice list so
283:40 - let me go to use State again we're
283:42 - looking for final
283:44 - we're looking for use array so that's my
283:47 - final and then as an example
283:50 - I'll save it here and the notice will
283:52 - have a list and we can remove some items
283:55 - we can clear them and all that kind of
283:56 - stuff so hopefully this is clear
283:59 - effectively before each video I'm going
284:03 - to show you which file we want to import
284:06 - so let's say the first one is tutorial
284:09 - use State star and then error example so
284:12 - we want to import that in the app
284:15 - jsx we want to render it and then we
284:18 - want to navigate to that file and start
284:20 - setting up the code together and again
284:23 - if you want to look at any of the final
284:25 - ones
284:26 - just import the file and render it
284:28 - somewhere here in the app jsxn
284:32 - effectively my workflow is going to be
284:34 - following
284:35 - I'll simply
284:38 - keep changing the file name so let's say
284:40 - if I have this tutorial right now I just
284:43 - go with forward slash your state and
284:45 - again I know that all my examples are
284:47 - going to start with starter and then I'm
284:49 - just going to be changing files so
284:51 - pretty much you can leave the setup here
284:53 - as it is you're just changing the path
284:55 - that's it that's all you have to do
284:57 - unless you want to take a look at the
285:00 - final one then of course I already
285:02 - showed you what to do so let me go to
285:04 - the arrow example that's the one where
285:06 - we'll start and notice in this one we
285:09 - just have a heading two so in here we
285:11 - basically will code everything from
285:13 - scratch now a few more things I want to
285:16 - mention
285:17 - there will be some challenges like I
285:19 - said just so we can right away apply our
285:22 - knowledge so if you keep scrolling
285:24 - obviously over here you'll have the
285:26 - first setup challenge so
285:28 - in the beginning of each video where we
285:30 - have the challenge effectively I'll just
285:32 - read it to you
285:34 - I'll try to explain as best as I can I
285:37 - might show you
285:38 - the final one just so you can see how it
285:41 - looks like again I'm not going to show
285:43 - you the code but I'm going to show you
285:45 - how effectively the feature is supposed
285:48 - to act and if you want you can work on a
285:51 - challenge now some of them are purposely
285:55 - essentially made to fail so you'll work
285:58 - on a challenge and I'll right away tell
286:00 - you hey you most likely hit this bug
286:02 - because I want you to have a
286:05 - Real World Experience what triggers the
286:08 - bug and that way it's going to be easier
286:11 - to remember
286:13 - the possible solutions as well and one
286:17 - last thing that I want to mention yes in
286:19 - the beginning our examples are going to
286:21 - be with numbers and buttons
286:24 - just because we need to start with
286:25 - something yes of course
286:27 - as we progress with the topics
286:30 - I purposely chose already more complex
286:34 - examples just so it's not all the time
286:36 - numbers and buttons but the first few
286:39 - videos yes we'll have to utilize numbers
286:42 - and buttons just so we can see the
286:46 - workings of react hopefully everything
286:49 - is clear if not utilize the course q a
286:53 - and in the next video we're going to
286:56 - start working on our first example the
286:58 - error example
287:00 - okay and let's start by taking a look
287:04 - why we need a use State hook in the
287:07 - first place which by the way we're going
287:10 - to
287:10 - cover in the next lecture
287:13 - and essentially we'll run away start
287:15 - with the challenge so I want you to
287:18 - navigate to the file basically a
287:21 - component and create a count variable
287:25 - display the value in jsx add a button
287:29 - and try to increase the value
287:31 - now I can tell you right away that it's
287:33 - not going to work basically you won't
287:36 - see the latest changes in the browser so
287:39 - I don't suggest
287:40 - trying like 10 different options just
287:44 - basically try the most obvious one and
287:47 - then resume the video and yes
287:50 - I'm not going to be extremely annoying
287:52 - and I'm just gonna say this once if you
287:55 - want to work on those challenges just
287:57 - pause the video try to set it up and
288:00 - then resume once you're ready to compare
288:02 - the results
288:04 - so let me just go to app jsx
288:07 - let me check that I'm getting the right
288:10 - component again we're looking in the
288:12 - tutorial we'll start with zero on your
288:15 - state star and then the arrow example so
288:19 - let me navigate over here close and
288:23 - somewhere here I'm gonna create my
288:24 - account variable so I'm going to go let
288:26 - count is equal to zero beautiful
288:30 - then I want to display that value
288:32 - somewhere and since at the moment I have
288:34 - heading 2 and we know that we cannot
288:36 - return adjacent elements I'm gonna turn
288:39 - this into a div
288:40 - then we're going to set up a heading 2
288:44 - with the actual value so here I want to
288:47 - display the count let me save and I see
288:50 - the zero so that concludes this is
288:52 - already a good start then we want to set
288:54 - up the button
288:55 - right away type is equal to a button
288:58 - then we'll set up the unclick if you
289:01 - want the arrow function you can
289:02 - definitely do so in my case I'll set up
289:04 - the reference and I'll just increase or
289:07 - increment whatever
289:09 - your heart desires and now let's set up
289:12 - that function let's go over here let's
289:14 - say const handle click
289:18 - basically in here you want to go with
289:20 - count count is equal
289:23 - to count plus one correct and let me
289:26 - right away even console log and you'll
289:28 - see that technically everything works
289:30 - but we won't say anything e in the
289:33 - browser sorry for the spoiler so let's
289:35 - go here let's save we have the button by
289:38 - the way if you want to add
289:39 - a little bit of styles you can go here
289:42 - with class name
289:43 - and you can go with button again this is
289:45 - coming from Global stuff
289:47 - and check it out everything is awesome
289:49 - but as I'm clicking the button nothing
289:52 - is happening
289:53 - and actually if I take a look at the
289:56 - console I can see that my logic works
289:58 - so this is technically correct I am
290:01 - updating this value
290:03 - but nothing is happening why is that
290:05 - well
290:05 - because we're not triggering the
290:08 - re-render
290:09 - something we're going to do with use
290:11 - statehook
290:13 - so even though
290:14 - this logic is awesome in vanilla
290:16 - jazzland it's not going to work in react
290:19 - if we want to see the latest changes
290:22 - displayed in the browser in react we
290:24 - need to set up a state value
290:27 - and we need to trigger a re-render and
290:31 - in the next video we're going to cover
290:33 - how we can do that using use State hook
290:37 - all right so how we can achieve our
290:41 - previous functionality in react well we
290:44 - need to use a hook basically a function
290:47 - that react provides and the name is huge
290:50 - State as a quick sign out during this
290:53 - video will heavily rely on
290:55 - the structuring array principle and if
290:59 - you need to jog your memory or if you're
291:02 - not familiar at all with this concept I
291:05 - cover this in great detail in this
291:07 - JavaScript nugget video and essentially
291:10 - I just want to double check that I'm
291:13 - importing correct components so notice
291:15 - now I switch to use State Basics so
291:18 - that's the second file and if we
291:20 - navigate here this is what we will see
291:22 - and effectively we want to import from
291:25 - react the use statehawk now we have
291:29 - multiple flavors we can do it this way
291:31 - so notice this is going to be a named
291:34 - import so unlike let's say react this is
291:38 - written like this now we're actually
291:40 - looking for the curlies and we go here
291:43 - with euge State and this is coming from
291:46 - react now I believe
291:48 - vs code is going to try to help us so if
291:51 - you type here you state notice you'll
291:53 - right away get the import now
291:55 - alternatively whatever logic we're going
291:57 - to set up in a component you can also
291:59 - type it this way you can just import
292:01 - react and then go with react Dot and
292:04 - then use State just as I say no this is
292:07 - also going to work
292:08 - so once we have the use State hook like
292:11 - I said it's a function we want to invoke
292:14 - that function and we want to pass in the
292:16 - default value and let's start from the
292:19 - very scratch let's just invoke it in a
292:21 - log just so you can see that whatever
292:23 - I'm telling
292:25 - actually is true so let me save it let
292:28 - me invoke it and you know what I'll
292:30 - clean the console and I'll just refresh
292:32 - and notice over here
292:34 - like I said we have function we invoke
292:36 - it
292:37 - we'll need to pass here the default
292:39 - value
292:40 - and we get back two things we get an
292:42 - array with undefined and we also have
292:45 - the function so this is going to be our
292:47 - state value which we're going to change
292:50 - with the second argument with the
292:52 - function and this also is going to be
292:55 - preserved between the renders and don't
292:58 - worry if the render re-render and all
293:01 - that sounds kind of fuzzy actually we'll
293:04 - spend the next video discussing them in
293:07 - Greater detail so we have used statehook
293:09 - this is where we need to pass in that
293:11 - default value that's why we have right
293:13 - now undefined so if I'm going to type
293:15 - here Bob Yep this is going to be my
293:17 - value if I'm going to type here one then
293:20 - of course you can already guess that
293:22 - I'll have the value over here one so
293:24 - this is going to be my default value and
293:26 - of course you can pass here array the
293:28 - object and all that kind of stuff so
293:31 - hopefully that's clear now let's discuss
293:33 - how we can access these values now the
293:35 - fastest way is to use array the
293:37 - structuring but just to
293:40 - kind of proved the point that I'm not
293:42 - making this up I'll access them one by
293:44 - one so let me comment this one out let
293:47 - me just copy and paste and let me assign
293:51 - to some kind of value so in here I'm
293:54 - going to say that this is equal to hello
293:55 - again we can change these values as we
293:57 - want there's really no difference and
294:00 - you know what
294:01 - I'll actually remove this log I don't
294:03 - need it anymore I'll log the value so
294:07 - let me go here with const and this is
294:09 - equal to a value and then since we're
294:12 - getting back the array we can do it this
294:14 - way where I'm accessing the first item
294:16 - hopefully that is clear so if I go here
294:19 - with value
294:20 - you'll see over here that it's actually
294:22 - hello so whatever default value that I'm
294:25 - passing and if I'll copy and paste in
294:27 - here and if I'll say func which actually
294:30 - stands for function at me copying paste
294:32 - here as well
294:33 - and let's just log the function so two
294:36 - things
294:37 - the default value and the function that
294:40 - controls that value
294:41 - now y array the structuring is
294:44 - technically better well because we can
294:46 - use a one-liner so let me
294:50 - common this one out
294:52 - and let's keep on moving and notice over
294:54 - here I can simply go with const then I'm
294:58 - destructuring right away out items so in
295:00 - my case I'm going to go with count and
295:02 - set count
295:03 - now as far as naming it is a convention
295:07 - to go with set count basically whatever
295:10 - is the variable name so if you have name
295:13 - here then convention is to go set name
295:16 - but you don't have to and I'll talk
295:18 - about some other conventions as well for
295:20 - example for booleans and all that then
295:22 - we want to go with use State and we want
295:25 - to pass in that value like I said we can
295:27 - pass in the string we can pass in Array
295:29 - we can pass in number whatever you want
295:31 - to pass in this is going to be the
295:32 - default value and this is going to be
295:34 - the function that controls it again the
295:36 - reason why we went the long route is
295:40 - because
295:41 - maybe some people are not familiar with
295:43 - the syntax which is totally okay
295:45 - the first time I saw this so I was also
295:47 - like hey uh what's happening over here
295:49 - so basically we're just destructuring
295:51 - these values if you don't like the
295:53 - syntax you can always use this one
295:56 - but my guess is you'll stick with this
295:58 - one and then in here let's pass in that
296:01 - initial value in our case what is that
296:03 - well we want to go with zero correct
296:06 - so this is where we're going to start
296:07 - then let's quickly again set up that
296:11 - button I know that this is a little bit
296:14 - of repetition but since we just started
296:17 - working in jsx I think it's going to be
296:19 - a good practice so let's go here with
296:20 - heading four then we're gonna go with
296:22 - you clicked and then let's grab the
296:26 - actual count so notice not accessing
296:29 - some random variable I'm actually
296:31 - looking for the count one
296:33 - so the one that I'm setting up with you
296:35 - state and I'll just say times here then
296:39 - we want to set up our button
296:42 - so the same deal type is equal to button
296:46 - then class name just so we have a little
296:48 - bit of
296:49 - CSS and now let's also again set up that
296:52 - on click and we want to set up the
296:54 - function
296:55 - so in here we want to go with const and
296:58 - let's call this handle click
297:01 - and inside of that function what do we
297:03 - want to do well we wanna
297:06 - invoke the set count right so we're
297:09 - gonna go here with set count and before
297:12 - we pass the value I just want to mention
297:14 - something very important
297:17 - when we invoke set count technically we
297:20 - can pass here anything
297:22 - so if I'll pass here string of Bob yes
297:24 - instead of number this will turn into a
297:28 - string above just something to be aware
297:30 - of now of course in our case we will
297:32 - increase the count
297:34 - but
297:35 - this is a very important gotcha and I
297:38 - see this a lot in the course q a so I'll
297:41 - reference the handle click over here and
297:43 - then as far as the count what do we want
297:45 - to do well we want to go with count and
297:47 - then plus one that kind of makes sense
297:49 - right so let's save it
297:53 - and by the way I didn't add anything in
297:55 - a button let's say click me and now of
297:58 - course
297:59 - we'll see that in the browser and also
298:02 - if you log you'll see that count is
298:04 - nicely increasing so again let me remove
298:06 - everything here and check it out
298:09 - it's really cool
298:11 - that now we're triggering that re-render
298:13 - so every time we'll update this value
298:17 - using the function the Handler function
298:20 - we will also trigger a re-render
298:24 - so unlike the previous example where we
298:27 - were just updating the value we didn't
298:28 - see anything now you can clearly see
298:30 - that everything works and
298:33 - also what's really awesome you state
298:36 - preserves this value between the renders
298:39 - now I'm not going to do this right now
298:40 - since we have tons of examples coming
298:42 - out but let's say if you were to set up
298:45 - another button
298:47 - and set up another
298:49 - callback function that increases that
298:52 - value
298:53 - you'll see that this one will stay the
298:55 - same between the render so it's not
298:57 - going to go back to zero and again let
299:00 - me just emphasize one more time that we
299:02 - can pass here anything so we need to be
299:04 - very careful I could go here with let's
299:08 - say set count and I'll pass in the pants
299:11 - because why not
299:13 - so let me set up my pants here and check
299:17 - it out I start nicely here with zero
299:20 - everything is beautiful and then I have
299:22 - you clicked pants times
299:24 - which is great but probably not
299:27 - something you were expecting so those
299:31 - are the basics of you state again it's a
299:34 - function that we get back from react
299:38 - it returns an array with two elements
299:40 - the current state value and a function
299:43 - that we can use to update the state
299:45 - value and in the function we want to
299:48 - pass in the default value basically
299:51 - whatever
299:52 - we will set up in the state whether that
299:56 - is string number array and blah blah
299:59 - blah blah blah and then every time we'll
300:01 - update that we will trigger the
300:04 - re-render
300:05 - and the cool thing is we'll see the
300:08 - latest changes in the browser and also
300:10 - that value will be preserved between
300:13 - those re-render so if you have six use
300:16 - State values and if you update one of
300:18 - them rest of them will stay as they are
300:22 - so they're not going to go back to zero
300:24 - so those are the basics of use State and
300:27 - up next
300:28 - let's talk about renders re-renders and
300:31 - all that cool stuff all right and before
300:33 - we continue let's discuss two important
300:36 - buzzwords render and re-render
300:40 - so essentially when it comes to initial
300:43 - render
300:44 - it happens the first time that the
300:47 - component tree is rendered to the Dom
300:50 - basically it happens when the
300:52 - application loads so of this
300:55 - now there's another
300:57 - use case when we toggle the component
301:01 - but we haven't covered conditional
301:04 - rendering yet
301:05 - so for now don't worry about it we'll
301:08 - come back to it once we actually cover
301:10 - conditional rendering for now just
301:13 - remember that
301:14 - essentially when our application loads
301:18 - that's when the initial render of the
301:20 - component takes place and this is also
301:24 - called mounting so we Mount the
301:26 - component initial render happens and yes
301:29 - later we'll also learn how we can
301:31 - unmount the component
301:33 - now when it comes to re-renders
301:37 - they happen when the components state or
301:40 - props change
301:42 - so remember our previous example what we
301:45 - were doing we were changing the state
301:47 - value correct and as a result we were
301:50 - re-rendering our component and
301:54 - essentially we can
301:56 - re-render component also when the parent
302:00 - element re-renders again
302:02 - something that will run into
302:06 - quite a few times during tutorials so
302:08 - once that happens I'll just say hey
302:11 - remember we talked about it for now
302:13 - just remember if you'll change the state
302:15 - or perhaps or the parent re-renders
302:18 - that's when essentially re-render takes
302:22 - place hopefully this is clear and before
302:24 - we discuss the general rules of hooks I
302:28 - just wanna
302:29 - change it back to correct one so it's
302:31 - not going to be pants and I want to
302:34 - stress one more time that let's say if
302:37 - I'm gonna come up with another state
302:39 - value
302:40 - I'm going to say set name if you don't
302:43 - want to import your state and if you
302:46 - already have react keep in mind you have
302:49 - to import react here then you can go
302:52 - this way now this used to be more
302:56 - popular when we have to import react for
303:00 - every component we don't have to do that
303:02 - anymore so notice both of them
303:04 - effectively do the same thing as just
303:07 - previously we needed to import react
303:10 - and that's why it was somewhat
303:12 - convenient just to avoid importing your
303:15 - state but
303:16 - since we don't have to import react I
303:19 - mean I don't see the difference right
303:21 - now you can either use use state or you
303:23 - can import react just keep in mind that
303:25 - both of them pretty much do the same
303:27 - thing and with this in place now let's
303:30 - talk about the general rules of hooks
303:33 - awesome and now let's quickly discuss
303:36 - the general rules of hooks
303:39 - so all the hooks
303:42 - the ones we get from react as well as
303:44 - our custom one yes later we'll build our
303:47 - own custom hooks they need to start with
303:50 - use
303:51 - so every time you see use and then some
303:55 - kind of name
303:57 - just remember it's a hook
304:00 - so effectively all the hooks rules apply
304:03 - now in order to work with a hook
304:07 - component must be uppercase and this is
304:09 - something we already discussed at the
304:12 - very very very very beginning when we
304:14 - talked about react fundamentals now also
304:17 - we need to invoke
304:19 - the hook inside of the component body
304:23 - so if I'll try to do this over here
304:27 - use State and then I don't know provide
304:31 - something again it doesn't really matter
304:32 - what
304:33 - I'm just going to say here hello blah
304:36 - blah blah invalid hook call so hooks can
304:39 - be only called inside blah blah blah
304:42 - blah something that I just mentioned so
304:44 - that's something important to keep in
304:46 - mind also don't call hooks conditionally
304:49 - and again this is the topic that I'll
304:52 - showcase once we are familiar with
304:55 - conditional rendering because at the
304:56 - moment I fully understand if you're
304:58 - looking at it you're like what do you
305:00 - mean by that and essentially long story
305:02 - short you don't want to place for
305:04 - example a hook inside of the
305:07 - if commission so don't do it like this
305:10 - don't say if and again the same deal set
305:13 - up the EU state for example this is not
305:15 - going to work regardless whether this
305:17 - condition is true or not
305:19 - this is not allowed so hooks all the
305:21 - time need to be called in the same order
305:25 - and lastly
305:28 - set functions don't update the state
305:31 - immediately and again this is something
305:33 - we'll discuss later essentially don't
305:37 - expect
305:38 - V synchronous Behavior so for example if
305:42 - I go here and log the count you'll see
305:45 - that actually I'm going to be accessing
305:47 - the old value notice even though this is
305:50 - one the value in the console is zero
305:53 - again something we're going to discuss
305:55 - for now
305:56 - just focus on the main ones it has to
306:00 - start with use component must be
306:02 - uppercase and we want to invoke it
306:04 - inside of the function basically
306:08 - component body not bad not bad I think
306:11 - we are somewhat familiar with you state
306:14 - and hooks in general
306:16 - so why don't we
306:19 - set up
306:20 - a state value with array and in the
306:23 - process we'll work on the little
306:26 - challenge
306:27 - so you'll need to go to zero three use
306:30 - data array basically import it of course
306:32 - in app jsx
306:34 - and then
306:36 - navigate to the file in there I want you
306:39 - to import data and don't worry I'll show
306:42 - you where the data is located
306:44 - then I want you to set up State value
306:47 - and the default is going to be the data
306:51 - you're importing
306:53 - now it's going to be a list and I want
306:55 - you to render that in the browser again
306:57 - something we already covered how we can
307:00 - access the value it right over and then
307:04 - display the results in a browser now
307:07 - don't worry about CSS again that is
307:10 - totally irrelevant if you can set up the
307:13 - logic it's going to be already an
307:15 - awesome result
307:16 - and then once you can render the list in
307:19 - the browser this is an extra challenge I
307:21 - want you to create
307:22 - two functions one that clears the entire
307:27 - list
307:28 - and second one
307:31 - which removes the single item from the
307:35 - list and just to Showcase what we're
307:36 - looking for and you know what by the way
307:38 - before the data is sitting over here so
307:41 - if you navigate to the route you'll see
307:43 - data GIS and then here we have this
307:46 - array so this is what I want you to
307:49 - import in that component and then first
307:52 - render it in the browser now as far as
307:56 - our final result
307:58 - let me just copy and paste here
308:01 - I'm going to call this final
308:03 - again make sure that you of course
308:05 - import the correct component and in here
308:09 - I just want to change this to
308:10 - I know
308:13 - and let's also take a look what we have
308:15 - so essentially this should be your
308:17 - result like I said don't worry about the
308:20 - CSS effectively you just wanna
308:22 - render the name the button and also a
308:27 - button to clear all the items so if you
308:29 - click you remove that specific
308:32 - person from the list if you click on
308:35 - clear items obviously we are removing
308:38 - all of them
308:40 - and once you're done resume with the
308:42 - videos
308:43 - so let me first start by doing a bit of
308:46 - spring cleaning we won't need that and
308:49 - then we're not
308:51 - I will actually leave
308:53 - so I'm not going to render that
308:54 - component but I'll leave this one just
308:57 - in case
308:58 - next time I need to access some final
309:00 - component I already have the code I just
309:03 - need to change the path and then we want
309:05 - to navigate to use State all right in
309:11 - the star over here and essentially let's
309:14 - start by getting the data let's
309:17 - jog our memory how we can do that using
309:20 - es6
309:21 - modules so in here we want to go and
309:23 - import now this is a named one so we go
309:26 - with data I already know that's the name
309:28 - and notice you right away have the
309:30 - correct suggestion where it is located
309:32 - and then second I know I'm going to be
309:34 - setting up the state value and just to
309:37 - hammer this home I will set up my state
309:39 - value with react dot used it and then
309:42 - pretty much for rest of the course I'm
309:46 - pretty sure I'm just going to import
309:47 - your state so first let's go here with
309:51 - import and we want to look for react
309:54 - okay that's awesome and then let's go
309:56 - with the const and that is equal to
309:59 - people so this is what I'm going to be
310:01 - setting up and then set people so one is
310:04 - the state's value and then the second
310:06 - one is the function that controls it and
310:09 - let's go over here with react Dot
310:13 - so react that and then we're looking for
310:15 - use state
310:17 - and what is default value well passing
310:20 - the data
310:21 - and now we want to essentially
310:24 - set up our return
310:26 - so at the moment we have heading 2
310:28 - instead we're gonna have a div and
310:32 - we're going to iterate over so I'll say
310:34 - people map
310:36 - and just so you don't think
310:39 - that I'm making this up I'm just going
310:41 - to go with return and you know what for
310:43 - now let's just go with heading four and
310:45 - let's call this item what I'm interested
310:48 - is the person who I well because that's
310:51 - going to give me access to this object
310:54 - so if I navigate to data
310:56 - check it out
310:58 - so I have here ID and name so this is
311:01 - what I'm going to log over here
311:04 - so log
311:05 - and let's look for the person
311:08 - let's save notice we have four items
311:11 - okay that's awesome
311:13 - and also I'll see you over here
311:17 - the object now we do have the warning
311:20 - each child
311:21 - and all that stuff don't worry we'll fix
311:24 - that in a second so why don't we pull
311:26 - out both of those properties we'll say
311:28 - over here ID
311:30 - and the person and that is equal to our
311:34 - person right or I'm sorry this is not
311:37 - person this is his name my bad so we
311:39 - pulled these ones out I don't think we
311:41 - need a log anymore or let me just leave
311:44 - it here for your reference and then
311:47 - let's go with our div
311:48 - and be right away want to set up the
311:52 - wiki so let's set it up here over here
311:55 - key and that is equal to my ID and then
311:58 - inside of it we want to go with heading
312:01 - four and let's just render the name and
312:05 - if everything is correct we shouldn't
312:07 - see any warnings in the browser and we
312:11 - have
312:12 - nicely rendered our list in the browser
312:16 - so that's the first step and up next
312:19 - we're gonna work on
312:20 - removing the items from the list all
312:23 - right so now let's complete the
312:25 - functionality and as a quick signal
312:28 - during this video at least
312:30 - I will rely heavily on filter method and
312:34 - if you want to find out more info
312:37 - you can just follow this URL where I
312:40 - cover everything in great detail so
312:43 - let's navigate back to our example
312:47 - and essentially I want to set up two
312:49 - functions one is going to be
312:51 - for removing all the items in the second
312:54 - one is going to be for removing a single
312:56 - item so let's start with that one so
312:58 - remove item for now I'm not going to
313:01 - pass
313:01 - anything in even though eventually yes
313:04 - will pass in the parameter
313:06 - and I mean if you want you can set up
313:09 - the log but
313:11 - I think in order to speed this up I'll
313:13 - just copy and paste and I'll say clear
313:16 - all items so that's my second function
313:20 - then we want to set up two buttons
313:23 - so we wanna
313:25 - set up a button right here in a div and
313:29 - also if you want to set up a button that
313:31 - clears all the values and that one is
313:34 - going to be outside of the curlers since
313:37 - I'm not going to set it in the list so
313:39 - first I guess let's just start with some
313:42 - HTML elements I'm going to go with
313:44 - button type that is going to be equal to
313:47 - a button I'm not going to add
313:50 - any classes it's going to be pretty
313:52 - basic
313:53 - we can nicely see the buttons and now
313:55 - let's also set up that clear all so
313:58 - let's go here button same deal type is
314:02 - equal to a button then let's add a
314:04 - little bit of styles just because I want
314:08 - a margin so I'm going to go with margin
314:10 - top and that is equal to two Rems
314:15 - on click is coming up and now let's go
314:17 - with clear
314:19 - items and now let's go back to our tasks
314:22 - so essentially this one and as a note
314:25 - I actually need to add here class name
314:28 - and then that is equal to a BTN
314:31 - so this one
314:33 - we want to use to remove all the items
314:36 - correct so what do we need to do well we
314:39 - have people and set people currently
314:41 - it's equal to what to our data array how
314:44 - we can remove all items well we can set
314:48 - people equal to an mtra by just using
314:53 - set people so if I go with clear all
314:56 - items and I say set people and set it
314:59 - equal to an empty array I'll move
315:01 - automatically all the items and since
315:04 - we're updating the state value we will
315:07 - trigger what will trigger re-render and
315:09 - of course
315:11 - as a result
315:13 - we'll see the latest changes in the
315:15 - browser so let's go over here let's say
315:17 - on click that's the event and now we
315:20 - just want to pass the reference so let's
315:23 - say clear
315:24 - all and items
315:27 - let's save that
315:29 - Let's test it out yep we remove all the
315:32 - items from the list now just so we are
315:37 - aware remember we can pass here the
315:40 - arrow function as well
315:42 - so just for your reference we can do it
315:45 - this way you can go with arrow function
315:47 - and then set people invoke and pass in
315:51 - the value again this is very very
315:53 - important concept and yes I'm getting
315:55 - quite a few questions in the course q a
316:01 - both of them achieve the same result so
316:04 - keep in mind if you see this code
316:05 - essentially it's just a shorter version
316:09 - of this one and as far as the remove
316:12 - item well let's think about it so we
316:15 - have IDs correct so those are unique to
316:19 - each item now how we can remove a
316:22 - specific item from array well we can use
316:25 - a filter method
316:26 - where we're going to grab the ID
316:29 - whatever it is one two three four and
316:31 - essentially we'll just remove that one
316:33 - item whose ID matches and then we'll set
316:37 - the people equal to that new array so
316:42 - let's try this one out
316:43 - first again I just want to emphasize the
316:46 - point that
316:47 - each item right away have that unique
316:51 - value when it invokes the remove item so
316:54 - let's say here I'm going to go with ID
316:57 - parameter and log an ID and if I go back
317:01 - to the div that I'm returning notice
317:04 - over here if I go with on click and
317:07 - first of all if I want to invoke
317:10 - remove item right away I do need to set
317:12 - up the arrow function first and I'm not
317:14 - going to go back to this topic we
317:16 - literally spent like I believe three
317:18 - videos on that in the fundamentals so if
317:22 - you are a little bit confused please go
317:25 - back and re-watch those videos so remove
317:27 - item I'll pass in the Eddie and you'll
317:30 - see nicely
317:32 - once you click on remove that each item
317:36 - basically has that unique ID so whatever
317:39 - we'll pass over here
317:42 - is going to be unique to that item so
317:45 - like I said what can we do well we can
317:48 - create new array so const new people
317:53 - that is equal to what well filter
317:56 - returns a new array right so we go with
317:58 - State value then we go here with filter
318:01 - and then we need to pass in the Callback
318:04 - function
318:06 - now in a callback function I'll
318:07 - reference each item as a person and I'll
318:09 - say if the person
318:12 - ID
318:14 - does not match then return basically
318:17 - filter is looking for a flag
318:19 - and if it matches then it's going to
318:23 - return in this case if the ID doesn't
318:25 - match then it's going to return
318:28 - that person to a new people
318:30 - if it does match
318:32 - then essentially it's going to exclude
318:34 - it so we go here with set people and we
318:37 - set it equal to any new people
318:40 - that's it that's all we have to do let's
318:42 - come in this one out and notice how one
318:44 - by one basically we can remove the items
318:48 - from the array and
318:50 - if you're wondering can we pass this
318:53 - entire logic directly and set people
318:55 - the answer is yes
318:58 - so you can also do something like this
319:00 - grab this line
319:01 - don't set up the variable and right away
319:04 - pass in the functionality remember this
319:06 - returns a new array at the end of the
319:08 - day
319:09 - so yes this will also work notice I can
319:12 - nicely remove John so that's how we can
319:16 - set up
319:18 - a state value as an array and right away
319:21 - make it Dynamic by just adding a few
319:24 - buttons as well as the functionality and
319:27 - as you can see we are basically relying
319:30 - on all the concepts we cover in
319:32 - fundamentals
319:33 - the difference well now we're using this
319:36 - one line of code we're basically using
319:38 - the use state which allows us to change
319:42 - that value and every time we change the
319:45 - value we trigger what we trigger
319:47 - re-render and as a result we see the
319:50 - latest changes in the browser all right
319:53 - and before we start setting up the
319:56 - object as a state value now let me
319:59 - quickly answer the question which most
320:01 - likely I'm going to get in the course q
320:04 - a
320:05 - and the question is following since now
320:08 - we know you state should we go back to
320:11 - let's say previous project the back
320:14 - roads one and effectively add huge state
320:19 - in each instance we're reiterating over
320:22 - the list and honestly the answer really
320:26 - depends on what you're going to be doing
320:27 - with the list
320:29 - so of course if you'll be manipulating
320:33 - the list if you'll be removing the items
320:35 - adding the atoms and all that kind of
320:37 - stuff then of course you will definitely
320:39 - need use state
320:40 - if you know that data is not going to
320:42 - change
320:44 - then of course you can leave it the way
320:47 - it is I mean nothing bad is going to
320:51 - happen so what I'm trying to say there
320:53 - is no rule that you definitely have to
320:55 - use State however it is a common
320:57 - practice even if let's say you're not
321:00 - going to be doing anything with list
321:02 - you get used State you set it up and
321:04 - that way if you ever want to change
321:06 - something about list well you already
321:09 - have a state value so long story short I
321:12 - wouldn't go back to the previous project
321:14 - and change it I would leave it the way
321:16 - it is but in the future when you are
321:19 - iterating over the list yes setting up a
321:21 - state value is a good practice okay and
321:25 - up next let's work on
321:27 - setting up the state value as an object
321:30 - and before we do anything
321:33 - let's just see why that would be useful
321:36 - in the first place just like we did for
321:38 - example with huge state
321:40 - and also in the process
321:43 - will right away utilize whatever we
321:46 - learned in the previous lessons so
321:49 - here's what I want you to do navigate to
321:52 - starter and then you're looking for huge
321:55 - State object and you know what let me
321:58 - grab quickly that file here
322:01 - just so you have it for your reference
322:04 - in the readme
322:06 - over here and you're looking for zero
322:09 - four and I believe the name was use
322:12 - State object over here
322:15 - so you want to import that of course in
322:16 - the app jsx you want to navigate to that
322:19 - file and you want to set up three state
322:23 - values not in my case it's going to be
322:25 - name age and let's say a hobby
322:28 - set up all of them with use State
322:31 - basically one by one render them and
322:34 - then create a button
322:36 - and every time the user clicks the
322:39 - button invoke a function which updates
322:42 - all three state values
322:45 - so as a result once you click the button
322:48 - different person is going to be
322:49 - displayed in the browser so let's say
322:51 - these are my default values peer Pages
322:54 - 24 and Peter enjoys reading books now
322:58 - once I click on show John I'll have John
323:02 - 28 and John enjoys screaming at the
323:05 - computer
323:06 - and once we have this one in place we'll
323:08 - refactor to object just so you can see
323:11 - the actual use case so let's navigate to
323:16 - the object one in the star and you know
323:18 - what
323:19 - pretty sure I can just comment this one
323:21 - out for now
323:23 - and uh want to go to that file over here
323:27 - and I already have the huge state so I
323:30 - already imported for you and effectively
323:33 - you want to set up those State values so
323:35 - one by one so const
323:38 - let's go in here with name
323:40 - set
323:41 - name and that is equal to use State and
323:43 - whatever is the default and like I said
323:45 - Mike is going to be Peter right away
323:47 - copying paste and we want to change some
323:50 - things around where this is not going to
323:52 - be name it's going to be age
323:55 - we'll go with set age and
323:57 - this one is going to be number so let's
323:59 - go with 24.
324:01 - then we want to go with that Hobby
324:04 - Lobby
324:06 - and then set Hobby
324:10 - and that one will be equal to
324:14 - well I guess let's go with reading books
324:17 - because that is really nice so
324:19 - say read books awesome then let's render
324:23 - that
324:24 - and this is the case where I'm going to
324:25 - use the fragment
324:27 - sure so we can jog our memory how we can
324:29 - do that so that's my fragment and then
324:31 - heading three
324:33 - let's go with name copy and paste and
324:37 - effectively I want to set up rest of
324:39 - them so one two and after that we'll
324:42 - have the button so why don't we do this
324:44 - why don't we go with heading 4 here
324:45 - first one name second one page
324:49 - and let's add enjoys
324:51 - otherwise scream at the computer might
324:53 - be a bit confusing so let's say here
324:56 - Hobby
324:57 - and let's right away set up that button
324:59 - so let's save okay we have initial value
325:02 - and basically we want to go here with
325:04 - button and we want to go to class name
325:06 - BTN
325:07 - and we want to add on click and
325:11 - let's set up a function
325:13 - from here let's go with cons display
325:18 - person
325:20 - first let's just set up the structure
325:22 - and then we'll worry about
325:24 - the actual logic
325:26 - so let's say here display portion and
325:30 - I'm gonna write here show John since I
325:33 - know that's what I'm going to be doing
325:35 - so let's say okay we have the button and
325:37 - then
325:38 - it's pretty straightforward if I want to
325:41 - change all of these three values yes
325:43 - this is what I'll have to do one by one
325:45 - I'll go with set and name what is the
325:49 - name well that is going to be John and
325:51 - you can probably or guess the other ones
325:54 - so age as well as the hobby so we simply
325:58 - need to change here page
326:01 - and this one will be for example 28. and
326:05 - then lastly we have set Hobby and this
326:08 - is where I'll type scream at the
326:10 - computer so scream
326:13 - at the computer
326:15 - okay good now we need to change this one
326:18 - to a hobby of course and like I said
326:20 - it's very straightforward
326:22 - you have 15 values over here
326:25 - if you have this type of setup where
326:27 - each value has its own Handler function
326:32 - essentially you'll have to call them one
326:34 - by one
326:35 - and therefore in the next video we'll
326:39 - take a look at the object example okay
326:42 - and before we refactor our example to
326:45 - one state value which is going to be an
326:48 - object
326:49 - why don't we do a little quiz so
326:51 - remember when we discussed use State I
326:54 - mentioned that pretty much every time
326:56 - we'll update the state value will
326:57 - trigger rearrender
326:59 - now in this example we have three
327:02 - Handler functions
327:03 - so ten thousand dollar question do you
327:06 - think we're going to trigger three
327:08 - re-renders
327:09 - or it's going to be only one
327:13 - and if you guessed only one you're
327:15 - absolutely correct
327:17 - you see behind the scenes
327:20 - react is using technique called Auto
327:23 - batching
327:24 - to effectively group the update
327:28 - so what that means in our example even
327:31 - though we have three handle functions
327:34 - it's only going to trigger one re-render
327:38 - now
327:39 - prior to react 18
327:42 - there were actually some instances where
327:45 - yes
327:46 - such a code basically when we have
327:48 - multiple Handler functions would trigger
327:53 - three re-renders but that's not the case
327:55 - anymore with reactating so in react 18
328:00 - pretty much every time you have multiple
328:03 - Handler functions yes
328:06 - it will trigger only one re-render
328:09 - beautiful so our functionality Works
328:13 - technically everything is fine but we
328:16 - can save some lines of code if we
328:19 - refactor this to an object
328:22 - and of course
328:24 - it's going to make even more sense if
328:26 - you have more State values what do you
328:28 - think is easier to have one object that
328:31 - has let's say 10 Properties or to have
328:34 - 10 State values again it depends on the
328:38 - use case of course
328:40 - if you have
328:42 - a use case for 10 separate values then
328:45 - of course don't just randomly group them
328:47 - together but let's say alert example
328:51 - what is usually in the alert well you
328:54 - want to know whether it's going to be
328:55 - displayed so basically there's going to
328:58 - be a Boolean value true or false you
329:00 - probably also want to know whether it's
329:02 - going to be danger or success whether
329:04 - it's going to be some red alert or it's
329:06 - going to be green and you also probably
329:09 - want to change the text so that's a
329:11 - perfect example where actually you don't
329:13 - have to set them up one by one
329:16 - you can just group them together
329:18 - in one object so here's what I want to
329:20 - do I want to go with const
329:23 - and I'm going to call this person and
329:26 - set person
329:28 - now this is going to be equal to my use
329:31 - state
329:33 - and here we'll pass in my object
329:36 - and
329:38 - as far as the properties well we use the
329:40 - same ones
329:41 - we'll say name is equal to
329:45 - Peter
329:47 - and let's copy and paste one two and
329:50 - let's just change these values around as
329:52 - well so we're going to go here with age
329:55 - that will be equal to
329:58 - 24 yep you're exactly correct and then
330:02 - lastly we have our Hobby
330:04 - so we go here with Hobby
330:07 - and we'll go with read books
330:10 - now I can remove all
330:13 - these new States we won't need them
330:15 - anymore and we also don't need to call
330:17 - them one by one
330:19 - so now I can go with one function which
330:24 - is set person and I just need to provide
330:26 - the object here I'll say John first then
330:30 - age
330:31 - 28 and then I'll say the hobby is equal
330:35 - to scream
330:36 - at the
330:38 - computer and once I save I actually get
330:41 - an error why well because remember now
330:44 - our state is an object so we can either
330:47 - destructure it over here one by one just
330:50 - grab the properties or
330:52 - we need to go with person
330:54 - .name
330:56 - then we're looking for person.age
331:00 - and then lastly of course we have person
331:03 - and hobby correct so let's do that let's
331:06 - save and now everything should work so
331:08 - once I click check it out now I have the
331:12 - new values now be aware of the gotchas
331:15 - remember
331:16 - we can pass whatever value in the set
331:21 - function so even though this is an
331:24 - object I can pass the string and what do
331:28 - you think is going to happen well our
331:30 - application is going to somewhat break
331:32 - because there is no more object so let's
331:35 - try this one out first I'll copy and
331:37 - paste or I'm sorry I'll comment this one
331:39 - out my bad so go here with set person
331:43 - and then let's say shake and bake and
331:47 - what do you know the moment I save the
331:49 - moment I click I'm nothing rendered why
331:52 - well again there is no object anymore so
331:55 - I simply have the enjoys these ones
331:58 - they're undefined so that's the first
332:01 - thing to be aware of
332:02 - second
332:03 - you can also overwrite by just providing
332:08 - one property or two basically not all of
332:12 - the properties so in this example we
332:13 - provided all of the properties so it was
332:16 - kind of hard to mess it up but what if I
332:19 - go here and say set person and I just
332:22 - say you know what I want to change the
332:23 - name I don't want to change the other
332:25 - ones I just want to change the name well
332:27 - now I'll only have a object with a value
332:31 - of Susan so let's go here let's click
332:34 - and check it out again the other ones
332:36 - they're not there anymore because this
332:39 - is the new state value this is the
332:43 - object now a way around it is
332:46 - effectively to just copy the properties
332:49 - from the state
332:52 - so first let's just copy and paste let's
332:56 - uncommon this one and
332:59 - first we want to copy all the values and
333:03 - then we just need to decide which ones
333:05 - we want to overwrite
333:06 - so I'm grabbing all of the properties
333:09 - with all of the values and if I just
333:13 - want to overwrite one of them I say name
333:15 - is equal on whatever value so in this
333:18 - case there isn't so now everything is
333:19 - going to work we'll still preserve those
333:23 - current values so if I click over here
333:25 - notice it changes to Susan hopefully
333:29 - this is clear again
333:31 - it's not a solution for
333:34 - every use case of course there's going
333:36 - to be use cases where you will have
333:38 - multiple State dollars but this is a
333:42 - Nifty approach
333:43 - if you can
333:46 - effectively group together the state
333:49 - values since it's just going to save you
333:51 - time on setting up the logic again be
333:55 - aware of the gotchas it's very easy to
333:57 - override the value and then run around
334:00 - like a headless chicken and look for the
334:03 - bug
334:04 - okay before we wrap up your state and
334:08 - move on to the next topic let's also
334:11 - cover set function gotcha which by the
334:14 - way we already touched upon and let's
334:18 - take a look at the fix and a good use
334:21 - case for using the effects and first
334:24 - let's just set up a trivial challenge
334:28 - let's go to the file here's State gotcha
334:31 - installer all that and set up the state
334:34 - value so again practice on setting up
334:36 - the use State create a button like I
334:38 - said in the beginning we'll have these
334:40 - buttons don't worry in next examples
334:42 - we'll start making more complex setups
334:46 - add functionality to increase by one and
334:49 - log the state value right after the set
334:53 - function
334:54 - and see what is going to be the result
334:56 - so again let me just double check yep
334:58 - and here I'm in Houston
335:00 - okay that's awesome and then in the
335:03 - gotcha
335:04 - first I'm gonna get the use State here
335:07 - so let me try the Auto Import yep that
335:11 - works as far as the initial value I'm
335:13 - going to go with zero and then
335:15 - value and the function well
335:19 - I'm not going to be particularly
335:21 - original and I'm just gonna go with set
335:23 - value so that is equal to my view State
335:27 - okay awesome
335:28 - after that we want to right away create
335:31 - that handle click since I know that it's
335:33 - going to be there so handle click that's
335:36 - my function and in here
335:39 - I just want to set up increase by one
335:42 - so it's going to be equal to set value
335:45 - and let's go with Value Plus one so the
335:48 - gotcha is not here
335:50 - again this is going to work as expected
335:53 - then let's navigate to our jsx
335:57 - we want to change this around it's not
335:59 - going to be hitting two it's going to be
336:01 - heading 1. with our value
336:05 - so that is going to be correct here and
336:08 - then let's also set up that button type
336:11 - is equal to a button so button here
336:15 - and let's add a class name class name
336:18 - will be equal to BTN and let's say
336:21 - increase and let's also not forget about
336:24 - the handle click so on click
336:26 - is equal to handle click
336:30 - so once we have this one in place like I
336:33 - said the gotcha is not in this setup so
336:36 - this is going to work
336:38 - what I want you to keep in mind
336:40 - that this is not going to happen
336:42 - synchronously
336:43 - so if you log here the value
336:48 - this won't be already the new value
336:50 - notice once I refresh once I start
336:53 - clicking this is one behind
336:55 - so here I have the seven
336:57 - and actually in the console I have a six
337:01 - and again the problem is going to be if
337:04 - you have some kind of functionality that
337:06 - relies on that latest value
337:10 - and in the following video we'll see how
337:12 - we can get that latest value which
337:15 - basically is the most recent State
337:18 - update all right so now that we know set
337:21 - function is not going to be synchronous
337:24 - now let's look at the solution you see
337:26 - there's another way how we can update
337:28 - the state and that is using the function
337:32 - approach so
337:34 - instead of passing the new state value
337:37 - like we have been doing for the last
337:40 - whatever videos
337:41 - we can actually pass in the function and
337:45 - as a first parameter by default we get
337:49 - the current state now since this is a
337:52 - parameter yes
337:54 - Bobby Lee or Joe Coy is an awesome name
337:59 - but a more common convention is to call
338:02 - this current state previous state Old
338:04 - State whatever I mean again you can name
338:07 - this banana it's still going to work and
338:09 - yes it's by default provided
338:12 - by react
338:13 - it effectively just provides whatever
338:16 - you have currently in a state so in this
338:18 - case it would provide that number right
338:21 - before the update and then in here we
338:24 - just need to set up the functionality
338:26 - where essentially we must return
338:29 - something and this is one of the gotchas
338:31 - with this approach
338:33 - if you don't return anything it will
338:35 - right away fail why well because there
338:37 - is no value anymore it's now going to be
338:39 - undefined remember in JavaScript
338:41 - functions return by default what they
338:44 - return undefined so you must return that
338:46 - value
338:47 - and whatever you're going to return from
338:50 - that function that is going to be the
338:52 - new value so let's try this one out but
338:55 - essentially
338:56 - I'm going to remove this one we'll pass
338:58 - in the function yes this is what we're
339:00 - doing we're passing function into the
339:02 - set value that's the approach and like I
339:05 - said if you simply
339:07 - just leave it the way it is this is
339:09 - going to be undefined now I do want to
339:12 - showcase that we'll access the state
339:14 - value and again in my case I'm going to
339:16 - call this current state so this is the
339:19 - state right before the update hopefully
339:21 - that is clear and yes
339:23 - the reason why I'm being so annoying and
339:24 - repeating that this is provided by react
339:26 - because
339:27 - this is also one of those things that I
339:29 - see a lot in cost q a yes we're not
339:32 - doing anything
339:33 - right out of the gate reactus provides
339:36 - that value so let's go here with current
339:39 - state and I'm purposely returning
339:42 - nothing just so you can see that
339:43 - essentially the functionality is not
339:46 - going to work notice we get back
339:48 - undefined now we did get the correct
339:50 - zero over here right so if we have some
339:54 - kind of functionality that relies on
339:56 - that latest value we need to use this
339:59 - approach now since I'm recording this in
340:02 - tutorial I'm going to be more explicit
340:05 - keep in mind that of course you can
340:06 - simply return that new value in my case
340:09 - though I'm going to go with const then
340:12 - I'll say new state is equal to and then
340:15 - I'm just going to go with current state
340:17 - and then plus one and now let's just go
340:20 - with the return
340:22 - and new state and I'm not gonna log the
340:25 - new state hopefully it's clear that yes
340:27 - it's going to be latest value so we go
340:30 - here and notice everything still works
340:33 - only in this case we access that very
340:36 - latest value and in the following video
340:39 - we'll take a look at nice example where
340:42 - such approach makes a lot of sense now
340:45 - before you ask
340:47 - do your after setup
340:50 - set functions every time with function
340:52 - I mean
340:54 - it's really up to you there's going to
340:56 - be some instances where you definitely
340:57 - need to do that
340:58 - something we're going to cover in the
341:00 - next video
341:01 - but should you go back and now refactor
341:04 - every set function instance of this one
341:07 - no I mean if it works with just a
341:10 - regular approach where you're passing
341:12 - the new value you can definitely leave
341:14 - it some people use function for
341:16 - everything
341:17 - that's pretty much their preference
341:19 - there's nothing wrong with that but
341:21 - there is no clear rule that you always
341:23 - always have to use this one again
341:25 - there's going to be some instances where
341:26 - you must use it otherwise the
341:28 - functionality is not going to work but
341:30 - if you're just changing I don't know a
341:33 - list to an empty list no you don't have
341:37 - to pass in the function you can just
341:39 - pass in the new value all right and now
341:41 - let's take a look at the good use case
341:44 - where we need to use
341:47 - function approach and for that for now
341:50 - I'm just going to remove this one and
341:52 - set everything from scratch and let's
341:54 - imagine that we want to invoke
341:58 - the functionality in some time and for
342:02 - that we are going to use the set timer
342:05 - and essentially
342:07 - if you just pass here the set timer
342:09 - you'll see that the functionality won't
342:12 - work as expected so let's try this one
342:15 - out I'm going to navigate back let's say
342:17 - set timeout so now effectively I want to
342:19 - change that value in some time let's say
342:22 - three seconds
342:23 - as we know we need to pass here the
342:25 - Callback function first and then the
342:27 - second in how long like I said in my
342:29 - example it's going to be three seconds
342:31 - and then let's simply go with set value
342:34 - and then let's type Value Plus One now
342:38 - what is our expectation first of all
342:40 - well our expectation is that every time
342:43 - we will click the button let's say five
342:47 - times this is going to be invoked so set
342:50 - timeout is going to be invoked and then
342:52 - after three seconds we're going to get
342:55 - that
342:56 - latest Value Plus one so if I click five
342:59 - times my expectation is
343:02 - that I'm gonna see over here
343:04 - value five correct are we on the same
343:06 - page hopefully we are so let's refresh
343:10 - and one two three four five
343:13 - and the value did change in three
343:15 - seconds but
343:17 - it's definitely not five and I can click
343:20 - all day long and the same thing is going
343:21 - to happen
343:23 - and if you don't believe me we can set
343:25 - up a log over here
343:27 - otherwise you might be thinking okay
343:28 - he's just not clicking the button so
343:30 - clicked the button let's try one more
343:34 - time I apologize if you find this
343:36 - annoying one two three four five
343:39 - and
343:40 - should see over here five yep so this is
343:43 - correct I did click it five times
343:46 - but again the value does not change now
343:49 - why is that happening oh you see in our
343:52 - callback function when we invoke set
343:56 - value
343:57 - we're not grabbing the latest value
344:02 - we are grabbing the value that is within
344:06 - these three seconds so essentially what
344:07 - I'm saying
344:09 - let's imagine that I'm gonna click the
344:11 - button 100 times in those three seconds
344:15 - all of them will reference this value of
344:18 - zero and only once we switch then the
344:22 - value is going to become 2. so again
344:25 - regardless of how many times I click I'm
344:28 - not updating that value right away or
344:30 - here I'm just saying yep please update
344:33 - that value
344:34 - but I'm all the time using that old
344:36 - value hopefully that is clear again you
344:39 - can click five more times or six or
344:41 - whatever again if that happened within
344:44 - those three seconds it's all that I'm
344:46 - gonna be using the value right before we
344:50 - invoke the Callback function first time
344:52 - hopefully that is clear now what is the
344:55 - solution now we know how we can use the
344:58 - function approach right
344:59 - so we can pass in the function again we
345:02 - have access right now to the latest the
345:05 - current state value which by the way
345:07 - will increase as we're clicking on a
345:10 - button and then we just return the new
345:14 - state value so in this case I'm going to
345:15 - say current
345:17 - and State
345:19 - and we want to go with return
345:22 - and let's go with current state plus one
345:26 - and now you'll see that
345:28 - or functionality works where essentially
345:31 - again if I refresh and if I click
345:34 - whatever times
345:35 - in those three seconds I'll nicely
345:39 - increase the state value
345:42 - by the amount of times I clicked on a
345:45 - button hopefully it's clear
345:48 - we're pretty much done with use state
345:50 - and we are ready to move on to our next
345:52 - topic and up next let's talk about
345:55 - another important hook called use effect
346:00 - and we're gonna start just like the
346:03 - other examples basically in the app GSX
346:07 - we want to navigate this time to zero to
346:10 - use effect we're looking for the starter
346:14 - and we're gonna go with code example and
346:17 - just like with use state
346:19 - the first thing we're going to do is to
346:21 - understand why do we need a use effect
346:24 - in the first place and in order to do
346:27 - that basically we'll take a look how the
346:30 - code inside of the component runs
346:34 - so let's navigate to that file you
346:37 - should see on a screen something like
346:38 - this value equals to zero and a button
346:42 - so let me navigate over here and this
346:46 - shouldn't look too foreign so we have
346:49 - over here huge State we import that we
346:51 - set up the value set value use State and
346:54 - then of course I have jsx and what do
346:56 - you know I'm updating the value and
346:58 - again the gotcha is not over here
347:01 - now let's talk about how the code runs
347:04 - inside of the component
347:07 - so let's say if I set up a function and
347:10 - I'm going to call this say hello so
347:13 - const say
347:15 - and hello so that is equal to my
347:18 - function
347:20 - and inside of the function what do you
347:22 - know I just simply want to set up some
347:24 - console log
347:26 - I want to go with log and hello there a
347:30 - million dollar question again we're
347:32 - doing the quiz yes you got that right so
347:36 - previous time we went for ten thousand
347:38 - dollar question why don't we go for a
347:40 - million this time
347:41 - so million dollar question
347:44 - if I have a function over here
347:46 - and if I invoke it and as I say not yes
347:50 - the function declaration can be
347:53 - somewhere else for example it can be in
347:56 - different file or it can be above the
347:58 - component my question is
348:00 - if I invoke this function inside of the
348:04 - component
348:06 - how often do you think it's going to run
348:09 - and possible choices
348:12 - we have initial render basically when
348:14 - the component mounts like so so once I
348:17 - refresh
348:18 - only then the function is going to
348:20 - execute then I have after every render
348:24 - and as I know you can already kind of
348:26 - see that it's definitely happening when
348:28 - the component mounts then we have after
348:31 - every render
348:33 - and then we have I don't know randomly
348:36 - after every third render and if you
348:39 - guessed that it's actually happening
348:41 - after every render you are absolutely
348:43 - correct basically the initial render
348:46 - which again happens when the component
348:48 - mounts in this case when we load the
348:51 - application let's say when we refresh
348:53 - the browser and all that and also every
348:57 - time we re-render
348:59 - because what are we doing over here
349:01 - remember we use state every time we'll
349:04 - change the value we will re-render
349:07 - correct
349:08 - so let's try this one out
349:10 - notice I start clicking and what do you
349:12 - know in the console I have bunch of
349:15 - hello there's
349:16 - now it's not a good thing or a bad thing
349:20 - it's just a fact that's how it works if
349:24 - you have some kind of function here that
349:27 - is being invoked
349:29 - and for example this declaration yes
349:32 - it's going to be set up pretty much from
349:34 - scratch every time so every time we'll
349:37 - re-render
349:38 - react is going to create this function
349:40 - and also if you invoke the function it
349:43 - will run the code
349:45 - now when do we need to be careful
349:47 - well when we update the state why
349:50 - because we can trigger infinite Loop so
349:54 - let me showcase that I'm going to add
349:56 - comment here so be careful
349:59 - you will have infinite Loop
350:03 - now how can we have infinite Loop if we
350:08 - update the state value inside of this
350:10 - function so let's go over here with set
350:12 - value and then I'm going to go to Value
350:14 - Plus One and before we run it let's
350:17 - discuss why we're gonna have the
350:19 - infinite Loop well let's think about it
350:22 - so we have initial render this is where
350:25 - we set up the state value and also we
350:28 - set up the function and we invoke it
350:32 - now inside of the function what do we do
350:35 - we trigger re-render correct we go with
350:38 - Value Plus One
350:41 - so when we re-render again we do the
350:43 - same thing we create a state value and
350:47 - we set up the function inside of the
350:48 - function we do what we update the state
350:51 - value and hopefully you see where I'm
350:52 - going with this
350:54 - so hopefully this is clear and now let
350:57 - me just save the file and you'll right
351:00 - away see a bunch of errors in console so
351:03 - again just be careful yes there are
351:05 - going to be times when you will set up a
351:07 - function here actually by the end of the
351:09 - section I'll share a resource where
351:11 - you'll see that
351:13 - react is somewhat pushing for it
351:15 - instead of using a bunch of use effects
351:17 - to use functions like this but again
351:20 - there are nuances we need to be mindful
351:23 - when we set up such functions there's
351:24 - nothing wrong with setting them up the
351:27 - gotcha is you don't want to update the
351:29 - state in such a fashion because yes you
351:33 - will have an infinite Loop and that's
351:36 - why in the next video we'll cover use
351:38 - effect and how use effect helps us to
351:42 - run code
351:44 - conditionally in our application
351:46 - basically we'll be able to choose when
351:50 - do we want to run certain code inside of
351:53 - our component all right so now let's get
351:55 - familiar with use effect hook so in the
351:59 - app.js I'm importing or I guess app.jsx
352:03 - I'm importing the second one use effect
352:05 - Basics and you'll notice that pretty
352:07 - much it's the same starting point so if
352:11 - I go here yes I have the same function I
352:13 - have the log now in this case I'm not
352:15 - updating the state value and I also have
352:18 - my state value on a button and
352:21 - essentially when it comes to use effect
352:23 - hook in react it allows us to perform
352:27 - side effect in the function component
352:30 - now there's no need for Urban Dictionary
352:33 - basically any work outside of the
352:36 - component and if at the moment it
352:39 - doesn't make any sense
352:40 - trust me it's going to be more useful if
352:43 - we cover some examples essentially it's
352:45 - things like subscriptions fetching data
352:48 - fetching data is by the way very popular
352:51 - or let's say if we want to directly
352:53 - update the Dom remember in vanilla.js we
352:57 - can select the Dom nodes with things
352:58 - like query selector and all that
353:01 - this is where you would do that we also
353:03 - can set up some event listeners and
353:05 - timers and all that kind of stuff we'll
353:07 - pretty much cover all of these examples
353:09 - so
353:10 - please just be patient and essentially
353:13 - when it comes to use effect hook
353:16 - we import use effect it's looking for
353:18 - two arguments the second one is optional
353:20 - and the first one is the Callback
353:22 - function
353:23 - and effectively whatever you have inside
353:25 - of that Cobalt version is going to run
353:28 - now by default by default it runs after
353:31 - every render
353:33 - which means pretty much initial render
353:36 - and re-renders but there's a caveat
353:39 - where we can provide the dependency
353:42 - array and somewhat important we cannot
353:44 - return a promise from the Callback
353:46 - function so let's tackle all of those
353:49 - things first we want to import use
353:52 - effect from react whatever we do we
353:54 - simply go with use and then the name is
353:57 - use effect like I said hook starts with
354:00 - use so all the hooks our hooks react
354:03 - hooks they will start with use okay that
354:06 - is clear
354:06 - then let's go I guess pass say hello and
354:10 - let's just go with huge effect like I
354:12 - said it's looking for two arguments the
354:15 - first one is going to be the Callback
354:16 - function which is going to be invoked
354:18 - well that depends what we have
354:20 - independency array by default it's going
354:23 - to be invoked after every render so
354:26 - let's try this one out let's go here
354:28 - with the function again you can pass the
354:30 - reference you can pass here the arrow
354:33 - function that is really up to you and
354:35 - let's go here with log and I'm going to
354:38 - say hello from and use effect
354:42 - and what you'll notice that
354:45 - we have few loaders so let me refresh
354:48 - basically I want to start from scratch
354:50 - and
354:52 - you'll also see hello from use effect
354:54 - and basically every time I'll click
354:57 - we'll have both of those logs and as
355:00 - you're looking at you're like well wait
355:02 - a minute pal
355:04 - we were supposed to fix this issue while
355:07 - you're showing us the use effect well
355:10 - remember
355:11 - this is the default Behavior so by
355:14 - default it runs on each render however
355:17 - there's a second argument that we can
355:20 - pass which technically isn't optional
355:22 - but I mean quite often you'll pass that
355:24 - argument and that is the dependency
355:26 - array and if we set up the dependency
355:30 - area empty
355:31 - then it's only going to run on the
355:34 - initial render so let's try this one out
355:37 - like I said second argument so we go
355:39 - here with comma and then we pass in the
355:41 - dependency array so now once I save
355:44 - check it out
355:46 - you'll see that yes we have the initial
355:48 - render and all that everything is
355:49 - beautiful
355:51 - but once we click the button actually
355:54 - you won't see the second log in the
355:56 - console so notice over here I only have
355:59 - the hello there however the login
356:03 - use effect only runs
356:06 - in the initial render that's it so
356:09 - that's the biggest difference if we have
356:12 - just a plane function or we invoke the
356:15 - function inside of the
356:16 - component yes it's going to run
356:20 - on initial render and on every re-render
356:23 - our with use effect we can start
356:25 - controlling when this functionality
356:29 - around
356:29 - now lastly I just want to mention that
356:32 - from this function we don't want to
356:35 - return a promise so
356:38 - later on we'll be setting up
356:40 - functionality to fetch data and a pretty
356:43 - common approach is to go with a sync
356:46 - right so we set up our function to be a
356:49 - sync and then we can wait for something
356:51 - fetch axios whatever
356:53 - now we cannot do that with use effect
356:55 - because there's a special thing that we
356:57 - are returning from this use effect
356:59 - something we're going to cover a cleanup
357:01 - function and remember a sync functions
357:05 - what do they return do I need to do
357:07 - another quiz or no I think no so I'm
357:10 - just gonna tell it to you async
357:12 - functions return promise
357:15 - so if we set up this function as a sync
357:17 - it will return a promise and use effect
357:20 - is not okay with that now keep in mind
357:23 - within the Callback function I can still
357:26 - set up a synchronous function and invoke
357:28 - it so if I go here with some funk I set
357:33 - it up as a sync and basically have the
357:37 - await
357:38 - keyword inside of it and again just for
357:41 - sake of it I'm gonna go with Fetch and
357:43 - I'm not going to provide anything and if
357:45 - I invoke something this is okay you just
357:49 - don't want to set up the first argument
357:52 - the Callback function that we're
357:54 - providing as a sync and don't worry once
357:58 - we start fetching data most likely I'll
358:00 - come back and discuss this particular
358:03 - thing one more time so now let me just
358:06 - remove that let's save and hopefully
358:09 - it's clear that we have use effect talk
358:12 - we import that from react we invoke it
358:15 - and we provide few things
358:18 - we provide a callback function which is
358:21 - going to be invoked
358:23 - pretty much after every render unless we
358:27 - provide here a dependency array in that
358:31 - case if we have dependency array and if
358:34 - it's empty
358:35 - the functionality inside of the use
358:37 - effect is only going to run once
358:40 - only when the component mounts on the
358:43 - initial render unlike the regular
358:46 - function which is going to be
358:49 - declared and invoked
358:52 - on initial render and also on every
358:55 - re-render okay and up next let's talk
358:59 - about dependency array and how we can
359:03 - have multiple user effects in our
359:06 - application
359:07 - so in the app.js we want to navigate to
359:10 - zero three and multiple effects and once
359:14 - we navigate to this file you'll see use
359:16 - State you'll see user effect and
359:19 - essentially two State values
359:21 - this is the case where I didn't see the
359:23 - point of creating all of this from
359:25 - scratch there's always so many times
359:27 - when creating a button and a state value
359:30 - is useful and notice over here we have
359:33 - two heading ones in the jsx with two
359:36 - buttons and guess what pretty much every
359:38 - time we'll click we'll update that state
359:41 - value and let's start with the simple
359:43 - fact that yes you can have as many use
359:47 - effects in your component as you want so
359:50 - pretty much you can set up a use effect
359:51 - for every smallest feature now just
359:54 - because you can doesn't mean you should
359:56 - and again I'm going to return to the
359:58 - point that at the very end of this
360:00 - section I'll show you a very useful
360:02 - resource which is going to cover all of
360:05 - these cases in more detail so please be
360:08 - patient for now just remember just
360:10 - because you can have like 10 use effects
360:13 - in your component doesn't mean that you
360:15 - should do that and essentially if I go
360:17 - here with the first use effect if I
360:19 - uncomment we'll see that basically once
360:23 - I refresh
360:24 - there is initial load right so this is
360:27 - where we'll have that console log and
360:29 - all that and then pretty much every time
360:31 - we'll update the state values I mean
360:34 - we'll see nothing in the console and the
360:36 - same deal we can set up another use
360:38 - effect that also is going to run only
360:42 - when the application loads and again I
360:44 - can keep clicking all day long and I'll
360:47 - only see those two logs in the console
360:50 - so that covers multiple use effects yes
360:53 - you can have them in the component
360:56 - doesn't mean that you can only have one
360:58 - use effect
360:59 - now also let's talk about this
361:01 - dependency array notice how when it's
361:04 - empty it only runs when the component
361:08 - mounts correct but we can provide values
361:10 - over here so if I'm going to go here
361:13 - with value which essentially is my first
361:15 - one you'll notice that not only this
361:18 - user Factor runs
361:20 - when the component mounts and again for
361:23 - that I'll have to refresh but also
361:27 - when we update this value
361:29 - so this is already very powerful where
361:32 - not only this functionality is invoked
361:36 - on the mount but also when we're
361:38 - clicking on the first button however
361:40 - it's not going to happen if we click on
361:42 - the second one it's only going to happen
361:44 - if I add the second value over here
361:49 - yes at that point
361:52 - we'll have a log when we click on the
361:54 - first one as well as the second one and
361:57 - as you can see this is very powerful
362:00 - stuff since I can have one use effect
362:02 - for one value and then the second one is
362:05 - going to be for the second one and you
362:08 - can probably already guess that the
362:09 - first one is only going to show up if we
362:11 - click over here and then the second one
362:14 - is going to be when we click on the
362:16 - second button and of course you're not
362:18 - limited to the amount of values you can
362:20 - pass over here you can start with empty
362:22 - dependency array and then you can have
362:25 - three five or whatever so that again
362:28 - really depends on situation just keep in
362:30 - mind few things first you can have
362:32 - multiple use effects again I'm not
362:35 - saying you should but you can and then
362:37 - the second one is the dependency array
362:41 - where we can pass
362:42 - multiple values and every time that
362:45 - value is going to change we will invoke
362:49 - the functionality inside of the Callback
362:52 - function one more time and once we're
362:55 - familiar with the user effect basics
362:58 - why don't we work on a little challenge
363:00 - we're essentially I want you to
363:04 - fetch some GitHub users from the URL and
363:09 - render them on the screen
363:12 - now before we continue let me just
363:14 - mention that during this video I will
363:17 - use fetch API and yes I'm fully aware
363:20 - that there's Library called axios and in
363:23 - fact we will
363:25 - use it later on in the course we'll have
363:28 - tutorial and then for more complex
363:30 - projects we'll definitely use axios and
363:33 - if you're not a fan of fetch you can
363:36 - definitely install axios and use it but
363:38 - in my opinion for simple examples fetch
363:42 - is good enough now if you're not
363:43 - familiar with fetch at all then I
363:46 - suggest utilizing this link effectively
363:50 - this is the Jazz nuggets video where I
363:52 - cover fetch API from scratch and as far
363:56 - as the challenge we want to go to app
363:58 - jsx we want to get the star from zero
364:01 - four fetch data
364:04 - and essentially in there we want to set
364:07 - up the state and set up the use effect
364:09 - and as far as the users the default
364:12 - value is going to be empty all right
364:14 - then set up a user effect but make sure
364:18 - that it only runs on initial render keep
364:21 - in mind that the URL I provided it has
364:24 - some rate limits so if you'll just be
364:26 - randomly testing out stuff by omitting
364:29 - the dependency array well you'll exceed
364:32 - that limit then you'll basically have to
364:34 - wait to work on the challenge
364:36 - then in the Callback function in the
364:39 - user effect create a function which
364:42 - performs fetch functionality
364:45 - and use the URL I provided in Star file
364:48 - now you can go with that then or async
364:51 - that's really up to you so either you
364:53 - can set up the async function or since
364:56 - fetch returns a promise you can go with
364:58 - that 10. and for now I suggest just
365:01 - logging
365:02 - so if you're somewhat confused just try
365:06 - to set up fetch functionality and log
365:09 - them
365:10 - nothing more
365:11 - just log the users if you can log the
365:14 - users you already in good shape
365:16 - now if you want to challenge yourself
365:19 - more then set up users equal to a result
365:24 - just remember that fetch returns a
365:28 - promise we need to go with that then and
365:30 - then we need to return that Json in
365:32 - order to get the data and I want to set
365:36 - that result from that Json equal to my
365:39 - users
365:41 - the state value and then I want to
365:43 - iterate over the list and basically
365:45 - display them
365:46 - now I don't suggest worrying about CSS
365:49 - it doesn't really matter
365:52 - you can show them in any way you want
365:55 - effectively I just want to show the
365:58 - profile the link to the profile as well
366:01 - as their image that's it and a tiny hint
366:05 - if you don't want to deal with big
366:06 - images and if you don't want to set them
366:08 - up in CSS just add inline style for that
366:11 - image and set up the width for I don't
366:13 - know 50 pixels or something along those
366:16 - lines again go to the file try to set up
366:19 - the logic if you can log that's already
366:22 - a awesome start and once you're ready to
366:26 - compare the results continue with the
366:28 - videos beautiful so now let's start
366:30 - working on a challenge I'll comment out
366:33 - the final one in the app jsx just so
366:37 - it's not in the way
366:39 - then we want to navigate to fetch data
366:42 - and you can either use Auto Import or
366:45 - you can go
366:46 - basically with import and then those two
366:49 - values I'll try to use the Auto Import
366:51 - I'm going to go to use State yep that's
366:55 - what we're getting from react and like I
366:57 - said I'll set it equal to a users and
366:59 - the default value here is going to be an
367:02 - empty array so I'm going to go users and
367:05 - then set users now that is equal to my
367:08 - use State and as far as my default value
367:11 - I'm going to provide empty array after
367:15 - that let's set up that user effect so
367:17 - let's go here and say use effect
367:20 - notice we have nice Auto Import and I
367:24 - pretty much always start just by logging
367:26 - stuff because I don't want to set up the
367:29 - functionality and then it turns out that
367:31 - I don't know I'm invoking it the wrong
367:33 - way or something along those lines
367:35 - so I'm gonna go ahead with log and I'm
367:37 - going to say hello let's save it and let
367:40 - me check
367:42 - yep I am nice hello in the console and
367:45 - again please please please please please
367:46 - please add over here the empty
367:50 - dependency array otherwise you'll pretty
367:53 - much have to wait to work on the
367:54 - challenge you'll right away exceed the
367:57 - rate limit and you'll have to wait I
368:00 - believe like 15 minutes or something
368:01 - along those lines so once we have the
368:04 - use effect whatever we want to do well
368:05 - we want to fetch data from this URL
368:08 - correct and like I said we don't want to
368:11 - set up this function as async because
368:13 - for example in my case I'm going to use
368:16 - a single weight
368:18 - so I want to set up the fetching
368:20 - function as a sync
368:22 - but we cannot do that with the Callback
368:25 - function that's not allowed what we can
368:28 - do though is to set up a sync function
368:31 - inside so I'm going to remove the hello
368:35 - and I'm going to come up with a function
368:37 - I'll call this fetch data
368:40 - this is going to be my async function
368:43 - and I'm not going to provide the URL
368:46 - here I'm just going to say empty
368:48 - parameters and all that
368:49 - and I'm going to start by just waiting
368:53 - for fetch so response that is equal to a
368:56 - weight and then Fetch and let's provide
368:58 - the URL like I said effectively this is
369:02 - going to return a promise and I want to
369:05 - turn this into a Json
369:07 - so I'm going to go here with const users
369:09 - and that is equal to a weight and then
369:12 - we want to go with response and then Dot
369:14 - and then Json like so we want to save
369:17 - that and like I said
369:18 - we just want to start by logging stuff
369:20 - so in here I'm going to say users and if
369:23 - in the console
369:25 - I'll nicely see the users that are
369:28 - coming from this URL we're good to go
369:30 - now what's the problem well I'm not
369:32 - invoking it correct so I'm going to go
369:34 - here with Fetch and then data and check
369:36 - it out once I refresh notice now I have
369:39 - all my users
369:41 - now when it comes to sync functionality
369:44 - it's a good practice to set this up in
369:46 - try catch just in case you have any
369:49 - errors now I can tell you right away
369:51 - that when it comes to fetch it doesn't
369:54 - treat 404 as an error so unlike the
369:58 - axios which essentially is going to run
370:00 - the code inside of the catch if you have
370:02 - 404 that's not the case with the fetch
370:05 - one that's kind of a gotcha so first let
370:07 - me just cut this one out over here I'll
370:09 - place this one inside of the try and I'm
370:13 - just going to lock the error but again
370:14 - if you'll go here and change the url for
370:17 - example to users you'll see that
370:19 - basically the error is not going to run
370:21 - so go here with error and then again let
370:24 - me go here with users and then notice
370:27 - yes we do have an error but it's
370:30 - actually called in line 13.
370:32 - so we're not invoking the catch one over
370:35 - here just again something to keep in
370:37 - mind because for example axials if you
370:39 - have 404 yes then the functionality is
370:42 - going to be invoked in the catch that's
370:44 - just a tiny side note so once I have the
370:47 - users what I can do well we can set our
370:51 - users equal to whatever users we're
370:53 - getting back correct so why don't we do
370:56 - this I'm going to go with set users
370:57 - equals to the users and of course now I
371:00 - do need to fix the URL
371:03 - let's save it over here
371:04 - and if you want you can actually go to a
371:08 - big browser and let's test out the state
371:11 - value so let me navigate to the big
371:14 - browser I'm gonna go with the new tab
371:16 - and all that
371:17 - and I want to paste that 5173a
371:21 - and if we inspect again we can take a
371:24 - look at the console if we're logging or
371:26 - we can simply go with components then we
371:29 - have the fetch data and notice I have
371:32 - the user effect so I have my function
371:34 - and I also have my state value so if
371:37 - we're successful this is what we're
371:39 - gonna see we'll have this array of users
371:42 - in the state and like I said that's why
371:45 - the react Dev tools are so powerful
371:48 - because you can right away pretty much
371:50 - get the info okay that's good now let me
371:54 - remove all these errors and all that I
371:56 - don't think they're useful and now let's
371:58 - just worry how we'll render them so
372:01 - let's navigate to the jsx
372:03 - and we'll start by setting up the
372:05 - section so I guess I'm just going to
372:06 - remove this one there's no need here so
372:09 - section then inside of this section I'm
372:11 - going to go with heading three and let's
372:13 - just come up with some kind of value so
372:15 - GitHub and users let's save that and
372:19 - then we want to go with an ordered list
372:22 - and actually already set up this CSS in
372:26 - the CSS file so if you'll navigate to
372:30 - index CSS and if you look for users
372:34 - you'll see that basically there is
372:36 - already some CSS attached to it
372:39 - and essentially this is what you can use
372:41 - if you want again the CSS part is really
372:44 - irrelevant
372:46 - the main point of this challenge was to
372:50 - set up the logic so let's go here with
372:52 - another list let's right away add a
372:54 - class of users and then instead of that
372:57 - on our list I want to iterate over so
373:00 - I'm going to go here with users then I'm
373:03 - going to go with map so we're mapping
373:05 - over and I'll reference each and every
373:08 - item as a user now for now let's just
373:12 - return
373:13 - the list item with some kind of value
373:16 - and why I'm doing that because I want to
373:19 - log and show you what is inside of the
373:21 - user so let's go here with return list
373:24 - item and I'm just going to say item
373:26 - again there's going to be a warning
373:28 - don't worry about it and yes I already
373:31 - have a little bit of CSS over there but
373:33 - if we log we should see what properties
373:37 - we have inside of that user
373:39 - so let me scroll up I mean all of them
373:43 - are going to be the same but I'm going
373:44 - to start with the first one and check it
373:46 - out so we have the Avatar URL
373:49 - effectively this is where we can get the
373:52 - picture
373:53 - we also have the login that is going to
373:56 - be the user account and we have HTML URL
374:00 - which leads back to the profile and also
374:04 - we have a ID why do we need ID well
374:07 - because we have the key correct so what
374:10 - we can do
374:11 - we can pull out those properties so I
374:13 - can say here const and then ID then
374:17 - login then Avatar and underscore URL
374:21 - HTML underscore URL and all of that is
374:25 - equal to my user and then as far as the
374:29 - return well now let's provide the key
374:31 - that's the first thing so here we'll go
374:34 - with ID and then as far as the item I
374:37 - want to place the image and I want to
374:39 - set up the div again if you don't want
374:41 - to use my CSS I just suggest adding the
374:44 - inline for the image
374:46 - otherwise they're going to be pretty big
374:49 - as far as I remember so image now for
374:51 - the source we want to go here with
374:53 - Avatar URL alternative I'm just going to
374:57 - provide the login
374:58 - it's kind of a shortcut in here
375:01 - and then right after that we want to go
375:05 - with div
375:06 - and then inside of the div we're gonna
375:08 - go with heading five and we'll display
375:10 - the name so let's go here with login and
375:13 - then lastly let's set up that link that
375:16 - navigates back and if you're interested
375:18 - in the CSS again please just reference
375:20 - the index CSS C essentially the styles
375:24 - that I added they're not that many so
375:27 - let's go here and let's go for HTML URL
375:31 - and then instead of the link I just say
375:35 - profile let's save that and this is what
375:37 - we should see on the screen essentially
375:40 - a list of GitHub users hopefully
375:43 - everyone enjoyed the challenge and I'll
375:47 - see you in the next video all right as
375:49 - you can see in the readme technically
375:51 - our next topic should be use effect
375:53 - cleanup function however we'll actually
375:56 - skip this and the following user effect
375:59 - topic and come back to them once we're
376:02 - done with conditional rendering
376:05 - if you're wondering why are we hopping
376:07 - like that
376:09 - simply because use of a cleanup function
376:12 - is somewhat tricky topic
376:15 - so in this course iteration I decided to
376:18 - use different example in the hopes that
376:22 - it will help students to understand the
376:24 - main Concepts better
376:26 - and since in the example we're going to
376:30 - toggle component
376:32 - we first need to cover conditional
376:34 - rendering yes I also prefer to cover
376:38 - everything step by step
376:41 - essentially in order but in this case
376:45 - I did not see any other option
376:48 - so again let me repeat we will skip use
376:52 - effect cleanup function for now and come
376:56 - back to it once we're done with our next
377:00 - main topic
377:01 - conditional rendering and next let's
377:04 - talk about conditional rendering in
377:07 - react
377:08 - and in short in the following videos
377:11 - we'll learn how to control what is
377:14 - displayed in the browser based on some
377:18 - commission and let's just start with
377:21 - multiple returns
377:23 - so as far as the setup
377:25 - in the app jsx you should import starter
377:28 - from zero three yep we're switching the
377:32 - folders and then starter and then zero
377:35 - one multiple returns
377:38 - and effectively once you navigate to the
377:41 - file you should see just the heading to
377:44 - with two Imports for use effect and your
377:47 - state and as far as the topic it's
377:51 - actually not controversial or anything
377:53 - new
377:55 - let's think about it in vanilla.js
377:58 - we can set up multiple returns in a
378:00 - function so if I have a function say
378:03 - hello that is looking for the name
378:05 - parameter if name exists I can go to
378:09 - early return I can say you know what the
378:12 - function is going to return hello and
378:13 - then whatever is the name now if
378:17 - the name is not provided then of course
378:19 - you will bypass the safe condition and
378:22 - then we'll return whatever
378:24 - we type here in the bottom now just keep
378:27 - in mind that by default
378:30 - JavaScript functions return undefined so
378:33 - if you're not going to return anything
378:34 - then basically it's just going to return
378:37 - undefined so if let's say we invoke the
378:41 - say hello with the parameter if we
378:44 - provide the argument then it's going to
378:46 - be hello and then whatever the argument
378:48 - if not then it's going to be hello there
378:51 - now
378:53 - since our components are functions can
378:56 - we do the same in react and you can
378:59 - probably already guess that the answer
379:01 - is yes
379:02 - and effectively in this file
379:05 - here is the setup we have used effect in
379:07 - your state so why don't we set up a
379:10 - State value and I'm going to call my
379:14 - state value is loading so that's a tiny
379:17 - side note where a convention is to call
379:21 - Boolean values is and then whatever is
379:25 - that Boolean
379:26 - value so if it's loading then is loading
379:29 - and then the function is set is loading
379:32 - again
379:33 - it's a convention
379:35 - so taco and burrito is also a good
379:38 - approach but
379:40 - most likely a lot of times you'll see
379:43 - this type of approach so I'm going to go
379:46 - with is loading and then we're gonna go
379:49 - with set is loading so that's the
379:50 - function that controls it and we'll set
379:52 - it equal to use State and the default
379:56 - value is going to be true over here
379:59 - and essentially it's a Boolean so we can
380:02 - flip it like a switch
380:04 - from True to false and false to true and
380:09 - then let's keep on moving why don't we
380:11 - set up a condition so I do have my
380:13 - return
380:14 - which essentially just says heading 2
380:16 - with multiple returns Basics however I
380:19 - can go here with if and I can say if is
380:22 - loading basically my state value if this
380:25 - is true then I want to return something
380:27 - else so I'm going to go here with
380:29 - heading 2 and we're going to go with
380:31 - loading and then dot dot now before you
380:34 - ask yes
380:36 - essentially if you want you can return
380:39 - entire application over here
380:42 - I'm just showing heading 2 but you can
380:46 - place here 10 000 divs and whatever
380:48 - functionality you want and check it out
380:51 - now since this is true we actually
380:54 - return this heading too so we don't even
380:56 - get to this return and that's how early
380:58 - returns work in JavaScript functions if
381:02 - this condition is true then we return
381:04 - whatever we have inside of the cartilage
381:07 - and now the next question is can we make
381:10 - this dynamic because at this point it's
381:12 - like okay I can go here and I type false
381:15 - and of course everything is going to
381:16 - work but
381:18 - I mean in the real application you kind
381:20 - of want to change this programmatically
381:22 - correct and the answer again is yes now
381:26 - in our case we'll just Tinker with set
381:28 - timeout but in the following examples
381:31 - I'll show you how we can actually do
381:33 - that if let's say we fetch data for now
381:35 - we'll just basically pretend that we are
381:38 - fetching data so I'm going to go here
381:40 - with use effect I'll provide here my
381:43 - callback function and I'll say that I
381:45 - only want to run it once and the
381:48 - component mode and then let's set up set
381:51 - timeout and inside of the set timeout we
381:55 - again need to provide a function that's
381:57 - going to be invoked and then in how long
381:59 - and here I'm gonna go with three
382:02 - thousand basically three seconds so
382:03 - those are milliseconds and I'm just
382:06 - gonna add comment here done fetching
382:09 - there again this is going to be pretty
382:10 - common example
382:12 - for using multiple returns that's why I
382:16 - keep referencing fetching the data
382:18 - so let's go here with set is loading and
382:21 - let's set it equal to false and what
382:24 - you'll notice once you save basically
382:26 - the way it's going to work while we're
382:28 - loading while we're getting some kind of
382:30 - data
382:31 - will display something to the user so
382:34 - user knows hey things are happening
382:37 - users not looking at just blank screen
382:40 - and then once we're good to go then
382:43 - we'll display basically the jsx we want
382:46 - to show to the user
382:49 - um once we're familiar with the basics
382:52 - why don't we work on another challenge
382:55 - and effectively we want to implement
382:58 - multiple returns when we fetch data
383:01 - which again
383:03 - is most common use case for using the
383:07 - use effect and that's why of course
383:08 - we're implementing multiple returns with
383:12 - the fetching data example so back in the
383:16 - app jsx you should import starter
383:19 - from the zero to multiple returns fetch
383:23 - data and then if you navigate to the
383:26 - file this is what you'll see use effect
383:28 - in your state imported and then the URL
383:30 - that I want you to use
383:32 - and then as far as the challenge first
383:35 - practice on setting up these State
383:37 - values so for now practice on a user my
383:41 - default value is going to be null for
383:43 - the user and then fetch data from the
383:46 - URL again
383:48 - you should do that of course and use
383:49 - effect and all that and I'm not going to
383:51 - provide any more details that's the
383:53 - challenge and again for now just log the
383:55 - result if you want of course you can set
383:57 - up the state value and render something
383:59 - on a screen
384:01 - but if you see the user object in the
384:03 - console
384:04 - and you're already in good shape
384:07 - so let me navigate back to the component
384:12 - and effectively like I said the first
384:14 - thing that I want to do is set up that
384:15 - state value I'm going to go with const
384:18 - and then user and then set user that's
384:21 - my function that is going to be equal to
384:24 - use State and like I said by default I
384:27 - want to provide value no so nothing is
384:30 - going to be there and now let's set up
384:32 - that user effect so use effect in here
384:34 - let's provide a callback function
384:38 - and let's just make sure that we invoke
384:40 - this again only
384:43 - when the component loads so we don't
384:47 - wanna
384:48 - basically run this use effect after
384:49 - every re-render and up next I want to
384:52 - set up that function so I'm going to go
384:53 - with fetch user is equal to a sync
384:57 - that's the function and then we're gonna
385:00 - set up the functionality where oh right
385:03 - away Place everything in the try and
385:05 - catch and as far as the
385:08 - catch I'm just gonna go with error in
385:11 - here and then when it comes to try now
385:14 - let's again get the response back first
385:16 - and that is equal to a weight so we're
385:19 - waiting then fetch will provide the URL
385:23 - and let's right away turn this basically
385:26 - into a Json so const and then user is
385:29 - equal to a weight again then response
385:33 - and Json let's invoke this like I said
385:36 - if you want you can set user equal to
385:38 - user for now I just want to log this I
385:41 - want to see whether everything
385:43 - is working as I expected
385:46 - so notice over here at the moment I
385:49 - don't see anything
385:51 - um and of course the reason why nothing
385:53 - is happening because I keep forgetting
385:55 - to invoke the functionalities with me go
385:58 - with fetch user and now check it out in
386:01 - the console
386:03 - I should see the info about the user and
386:05 - as you can see this is just more info
386:08 - compared to when we fetched data and in
386:11 - the following videos set up multiple
386:13 - returns and also we'll set up a proper
386:16 - jsx now before we continue you know what
386:19 - let me just go over here and then
386:21 - comment this one out so essentially
386:25 - we can set this one up together
386:27 - okay and now let's put two and two
386:30 - together
386:31 - effectively we know how we can work with
386:33 - multiple returns and the reason why we
386:37 - want to use them with fetch data because
386:39 - essentially you'll have three states
386:43 - you have the loading one
386:45 - when we are waiting for data arrive
386:47 - because keep in mind when it comes to
386:50 - fetching data it's a synchronous so it
386:53 - doesn't happen instantly then second
386:55 - there might be an error so I don't know
386:58 - maybe the values were not correctly
387:01 - provided maybe the network doesn't work
387:04 - I mean whatever there could be all kinds
387:07 - of errors and then the last one is the
387:09 - success
387:10 - and essentially we go through those
387:12 - States those are our options
387:15 - and therefore in a state we actually
387:17 - want to set up two more booleans for
387:20 - loading and for error and then depending
387:24 - on the values we want to display
387:27 - or jsx so let's start working on that
387:30 - where first I want to navigate back to
387:32 - the component and let's set up those
387:34 - State values again the convention is to
387:38 - go with is and then the name
387:41 - technically you don't have to so if I'm
387:43 - gonna go here with is loading and then
387:46 - set is loading and you know what by
387:49 - default I'm going to set it equal to
387:51 - true and then I'll do the same thing
387:53 - with error now this one by default will
387:56 - be false
387:57 - so let's set it back to false
388:00 - and then as far as these values let's go
388:03 - error and we want to also change it over
388:07 - here
388:08 - let's save it and then let's keep on
388:10 - moving before we set the user
388:14 - why don't we set up two conditions so
388:17 - one is going to be for loading and one
388:19 - if we have an error now please
388:22 - placement here is important
388:25 - so if you place the loading after
388:28 - the actual jsx you want to return
388:31 - then it's not going to make sense
388:34 - because
388:36 - loading is going to be first and
388:38 - JavaScript effectively reads everything
388:39 - top to bottom
388:41 - so if you have returned before the
388:44 - loading commission then essentially you
388:47 - all the time display the jsx and that's
388:49 - not what we want so make sure that you
388:52 - set the loading first
388:53 - so the whole point
388:55 - of this rant is that the placement is
388:57 - extremely important and then let's go
389:00 - here with the return
389:01 - and we want to provide whatever value
389:04 - so in my case it's going to be again the
389:06 - heading 2 with loading and dot dot and
389:09 - now let's do the same thing with an
389:11 - error now keep in mind since this is
389:13 - true we'll right away hit this condition
389:16 - so this is what will return and error
389:19 - basically
389:20 - is going to be displayed only when we
389:23 - set this one to false so we bypass that
389:26 - condition and this one to True again
389:29 - something very important to keep in mind
389:31 - then I keep getting these questions all
389:34 - the time and of course q9 that's why
389:36 - spending more time on that so let's go
389:38 - over here with loading instead of that
389:41 - we'll just go with there was an error
389:45 - let's save this and for now we'll right
389:48 - away have the loading why well because
389:50 - this is equal to true then let's
389:53 - navigate back to our fetch user and
389:56 - let's go through the logic
389:58 - so we start over here fetching we
390:01 - display loading okay everything is
390:03 - awesome now what do we want to do when
390:05 - we get back to user well we want to set
390:08 - our state value right that kind of makes
390:11 - sense so let's go over here let's go
390:13 - with set user and now this one is equal
390:16 - to a user okay beautiful
390:20 - and then right after these conditions
390:23 - the try and catch we wanna
390:26 - essentially
390:28 - set loading to false because we're done
390:31 - loading so at that point we have only
390:33 - two options
390:34 - either there was an error we didn't get
390:37 - the data or if everything was successful
390:41 - then of course we want to display the
390:43 - user again
390:44 - it starts with loading
390:46 - loading is true and then once
390:49 - we're done with loading then we only
390:52 - have two options and that's why right
390:53 - after the catch I want to go with set is
390:57 - loading and we'll set it equal to false
391:00 - now let's move up here and let's take a
391:03 - look at the error so if something goes
391:05 - wrong
391:06 - basically this should get triggered
391:08 - right but again the gotcha with fetch
391:11 - that it's not going to do it if let's
391:15 - say the
391:16 - resource doesn't exist let's say 404 and
391:19 - this is something that we'll cover in
391:21 - following videos so I'm not going to
391:22 - spend too much time on that I'm just
391:24 - going to say that yes we'll sit here set
391:27 - is error and we'll set it equal to true
391:29 - but you'll see that it doesn't work
391:32 - with all the errors again with axios yes
391:35 - this is going to be the case
391:36 - this will be always in the catch but not
391:40 - with the fetch something important to
391:42 - keep in mind so now notice first we're
391:44 - loading and then we have fetch beta now
391:49 - the loading one is going to be very
391:50 - quick by the way because again we're
391:52 - working locally on all that so of course
391:54 - it's going to happen instantly once we
391:56 - set up the return yes I'll navigate to a
391:58 - bigger browser and I'll slow down the
392:00 - network just so you can see that it's
392:01 - definitely there so once I have the user
392:05 - in my state what we can do well we can
392:08 - navigate down here and essentially
392:10 - return something display the user we
392:13 - were actually fetching and here I'm
392:16 - gonna go with div I'm gonna set up first
392:18 - the image this is the case where I said
392:21 - that basically I want to go with inline
392:24 - styles
392:25 - just because I know that it's going to
392:26 - be massive and I don't want to spend my
392:28 - time in the CSS so this is a good use
392:30 - case in my opinion for the inline ones
392:33 - that's why I will go here with width 150
392:36 - pixels and I'm going to add a little bit
392:39 - of Border radius here so as you can see
392:42 - I actually have the error make sure that
392:44 - you have proper JavaScript syntax
392:46 - basically we need to come over here and
392:49 - we're going to set it equal to I don't
392:51 - know 25 pixels now at the moment we
392:54 - don't see anything because of course we
392:55 - need to provide those values and
392:57 - essentially for the
393:01 - image I want to go again with that
393:03 - Avatar I believe yep so we go here with
393:06 - user and Avatar now keep in mind the
393:09 - reason why we'll have to go with
393:11 - user.user DOT user dot is because now we
393:13 - have an object
393:15 - so this essentially is the object that's
393:17 - in our state
393:19 - so I have a user object and now in order
393:22 - to access those properties we either can
393:24 - destructure it something we'll do later
393:26 - because there's one gotcha I want to
393:28 - show you or we can go with the object
393:31 - which in my case is user and then the
393:33 - property again the Avatar should be
393:37 - somewhere over here
393:38 - probably first one yep notice over here
393:40 - that's the Avatar then as far as the
393:43 - alternative I'll provide the name here
393:45 - so let's go here with user and then
393:47 - Avatar
393:49 - underscore URL as far as the alternative
393:53 - we're gonna go with user and name and
393:57 - then we just want to provide
393:59 - again name in heading 2 company and a
394:03 - bio so we have an image then we want to
394:06 - go here with
394:07 - user and the name
394:11 - and then after the name
394:14 - we're gonna go with heading 4 works at
394:17 - and again let's grab the curlies we'll
394:20 - go with user and then company
394:22 - and then at the very end we have the
394:24 - paragraph with basically a bio
394:27 - so user and then bio let's save this and
394:31 - check it out now we have nicely fetched
394:34 - a GitHub user so now let me just grab
394:37 - this URL and let me set it up on a
394:40 - bigger browser window just so you can
394:42 - see how basically everything works so
394:44 - let me open this one up in new tab copy
394:47 - and paste everything is awesome and
394:49 - essentially let me slow down the network
394:51 - and we can do that if we navigate to the
394:54 - devtools we're looking for the network
394:55 - one and notice over here I'm actually
394:58 - using fast 3G that's why I was wondering
395:01 - why it
395:03 - took so long in the use effect examples
395:06 - oh well so actually I was all the time
395:08 - using that never mind notice basically
395:12 - if we go the regular it's going to load
395:14 - right away however if I'm Gonna Change
395:16 - it to let's say fast 3G
395:19 - you'll notice that first we'll get the
395:21 - loading
395:22 - that's going to be displayed on the
395:24 - screen so we'll have loading dot dot dot
395:27 - and then we basically get the user so
395:32 - that's our setup and up next let's talk
395:34 - about the fetch errors not bad not bad
395:37 - we can nicely fetch data in our
395:39 - application we can display multiple
395:42 - returns so user is aware what's
395:44 - happening in our application
395:46 - however before we
395:48 - move on to the next topic
395:50 - I also want to discuss fetch errors
395:53 - gotcha now if you're not interested if
395:55 - you're like I'm always going to use
395:57 - axios and all that feel free to skip
395:59 - this video technically this is optional
396:01 - by the way let me add that over here I
396:03 - mean if you don't want to follow along
396:04 - you don't have to essentially when it
396:07 - comes to fetch unlike the axios
396:10 - it doesn't consider for example
396:14 - 400 or 500 to be an error instead
396:18 - essentially it treats that as a
396:21 - successful request now why does that
396:23 - matter let's go back to our component
396:26 - and let's try to mess with the URL
396:30 - so first let me just mess it up the
396:32 - domain and the moment I do that notice
396:35 - right away I have error displayed so
396:37 - this is going to be the error response
396:39 - so this is going to trigger the sketch
396:43 - block with fetch however
396:46 - if I'm going to change this around and
396:49 - if I'll add the S over here
396:51 - and basically if I refresh now I'll have
396:54 - this works at
396:56 - so as you can see
396:58 - there is an error but it's not actually
397:01 - handled in here again why is that
397:03 - happening because patch doesn't consider
397:06 - this 404 as an error effectively we do
397:09 - have the successful response over here
397:11 - it's just not the user we're looking for
397:13 - and the way around that is essentially
397:16 - to look for the OK property if you go
397:20 - over here and if you log the I'm going
397:24 - to go with response notice we have the
397:26 - response and then the value is true for
397:30 - okay however again if we'll have here
397:33 - 404 and hopefully I'm not going to run
397:35 - out of the requests while I'm showing
397:37 - that
397:38 - check it out over here this is now false
397:40 - so what we can do in the success block
397:43 - we can check for that response and if it
397:46 - is an error we can set again the state
397:49 - value so let me first I guess just
397:52 - navigate to a try block and
397:56 - notice over here where we have the user
397:58 - so I don't want to get the Json if we're
398:02 - not successful
398:04 - so right after the response we can set
398:06 - up a condition and I'm going to say over
398:08 - here if response is not true that's what
398:12 - that exclamation point means so if the
398:15 - response that we're giving back is not
398:17 - okay if this Boolean effectively is
398:21 - false here's what I want to do I'm going
398:23 - to go with set is error I want to set it
398:25 - equal to true so now we'll display which
398:28 - return this one over here correct
398:31 - and then
398:33 - after that we do want to set again
398:35 - loading is false because I want to
398:37 - return from this function
398:39 - what I don't want to do is keep reading
398:41 - I don't want to go with response Json
398:43 - so I want to return however I also want
398:46 - to set loading to false so this is where
398:49 - we need to do technically double the
398:51 - work where I'm gonna go up I'm gonna
398:53 - copy and paste and now check it out I
398:56 - have true for error loading is false and
398:59 - then I'm returning from this function
399:01 - what it means that JavaScript is not
399:03 - going to read rest of the code because
399:05 - again I don't want JavaScript to go with
399:07 - response Json why well because I'm not
399:10 - getting back the user
399:11 - what's the point of turning the error
399:14 - into a Json so let me go here and remove
399:17 - the log let's save that and now notice
399:20 - how we nicely have is error
399:22 - even though technically fetch doesn't
399:25 - trigger the catch block so that's the
399:28 - fetch error catcher I want you to be
399:30 - aware of and up next we're going to
399:32 - return to the topic why or matters when
399:35 - we are setting up multiple returns
399:38 - beautiful and up next why don't we come
399:41 - back to something we already discussed
399:43 - before that order matters
399:47 - and why don't we work on a little
399:49 - Challenge and if I can ask you something
399:52 - please don't dismiss this topic this is
399:55 - literally the most discussed question in
399:59 - course q a
400:00 - because we do Implement that feature
400:03 - later on in the project and all that and
400:05 - this seems to be tripping up a lot of
400:07 - people that's why I purposely in this
400:10 - course iteration recording a video in
400:13 - tutorial just so we can cover this in
400:15 - great detail and essentially the
400:17 - challenge is following I want you to the
400:20 - structure properties so instead of
400:24 - user.user.user.in jsx
400:27 - destructure them out of the user
400:30 - and access them directly
400:32 - and I'm purposely not telling you where
400:35 - you should do that because you might or
400:38 - might not encounter the bug
400:40 - and effectively that's the whole purpose
400:42 - of the video
400:44 - so let's start working on that I'm going
400:47 - to go back to my file
400:50 - let's keep on moving and again the idea
400:53 - is that I don't want to go with user
400:55 - user user
400:56 - I just want to grab the properties and
400:58 - nicely display them in the jsx so what
401:03 - we can do well we can go above the
401:05 - return and then one by one pull them out
401:07 - right so I can go with Avatar URL then
401:11 - name
401:11 - then company and I believe I also have
401:15 - the bio in there and that is going to be
401:16 - equal to what that is going to be equal
401:19 - to my user so my state value and now of
401:23 - course
401:24 - instead of
401:26 - user.user.user dot you can simply select
401:30 - and then remove those instances
401:33 - so let's go over here and it looks like
401:36 - a messed it up over here a little bit
401:37 - that's okay let me save and if you're
401:40 - refreshing everything still works we are
401:43 - in good shape
401:44 - now what's the purpose of this video
401:47 - well
401:48 - if you're gonna go above
401:50 - the loading and I'm purposely going to
401:54 - place it over here just so you can
401:55 - clearly see the values but again
401:58 - typical question is this one if you
402:01 - place before these conditions why we
402:04 - have there so let me move this sucker up
402:06 - all the way over here by user and then
402:09 - let's save
402:10 - and what you'll notice that we right
402:14 - away have big fat error in the console
402:17 - and JavaScript is complaining
402:19 - it says I cannot the structure properly
402:22 - from the user since this is no
402:26 - so very very important to keep in mind
402:29 - if you have those multiple returns if
402:32 - you're just structuring something you
402:34 - need to do that after the conditions
402:37 - because keep in mind this is still null
402:41 - so as JavaScript is basically reading
402:44 - the code okay users now let's keep on
402:46 - moving and even before we have hit the
402:48 - loading or error and all that you right
402:51 - away start the structuring them from the
402:53 - null and that's not going to work
402:55 - there's a reason why we have those
402:57 - conditions so only when we bypass both
403:00 - of these conditions we will have that
403:02 - user
403:03 - I mean if there's an error then of
403:06 - course we'll return this one we're not
403:07 - even going to get to that line
403:10 - so essentially we'll have the early
403:11 - return because if there is an error then
403:13 - there is no user this is still null and
403:18 - again this is not controversial in the
403:21 - readme I left some code examples where
403:24 - this is null and we cannot pull
403:26 - properties out of null so this doesn't
403:28 - change we right away basically just try
403:31 - to read properties out of the no not out
403:35 - of the object now after returns after
403:38 - the is loading and and the error yes at
403:42 - that point we set the user
403:44 - so at that point we should have the user
403:48 - object in the state and at that point
403:50 - it's great you can definitely do so
403:54 - this is going to work for sure
403:57 - but before that nope and again let me
403:59 - just emphasize this by showing you a few
404:02 - vanilla.js examples because I was hoping
404:05 - that this is going to help you so if you
404:08 - have some object you have a property
404:10 - there
404:11 - with some kind of value
404:13 - I mean you can always go object.name
404:16 - okay that's awesome we can get the
404:19 - string now what we can also do is simply
404:21 - go some object and then let's say that
404:23 - we messed up the property but it's not
404:26 - there this is still going to work
404:27 - JavaScript is going to be like okay that
404:29 - property doesn't exist however
404:32 - I cannot do this we cannot say hey this
404:34 - is null and then I'm going to pull
404:36 - something out of the null JavaScript
404:38 - will scream
404:39 - yo uncomplained we cannot do that and
404:43 - also the same thing is going to work
404:45 - with arrays and the reason why I'm
404:46 - showing you arrays example because in
404:49 - one of the projects this is what we do
404:51 - we fetch a list but I only want to
404:54 - display the first item
404:55 - and what do I need to do well I need to
404:57 - go with random list or whatever array
405:00 - you have and then grab the first one
405:02 - however again in the beginning this is
405:05 - empty so this will return undefined How
405:08 - can there be a first
405:10 - item in the array if the array is empty
405:14 - so again if we're gonna go here with
405:17 - random list
405:19 - when this is just empty and then pull
405:21 - out the property let's imagine I'm
405:24 - trying to access some kind of property
405:25 - from the first item not cool at all
405:28 - JavaScript will scream yell and complain
405:31 - now if you're familiar with optional
405:34 - chaining of course you can make a good
405:36 - argument well we can avoid all those
405:38 - things and yes you're right a bunch of
405:41 - times you will actually
405:43 - avoid those errors if you use such
405:45 - approach
405:47 - and we'll definitely cover optional
405:49 - training later on in this tutorial
405:52 - because it is a very important concept
405:55 - however
405:56 - the biggest takeaway from this video is
406:00 - that order matters and that's why we
406:03 - have the error because the object is
406:06 - still null
406:07 - so essentially
406:09 - it's whatever is the default value so
406:12 - now let me go back over here and then
406:14 - let me move this second all the way
406:18 - where I have the return and now of
406:20 - course everything is going to work and
406:22 - we'll have no errors all right and
406:25 - before we discuss one of the rules of
406:28 - hooks
406:30 - let's also quickly cover the location of
406:33 - the fetch function
406:35 - so as you're looking at this component
406:38 - probably one of the questions you have
406:40 - is following can we just move this fetch
406:43 - user outside of the use effect or maybe
406:46 - into a different file
406:49 - and as far as different file yes you can
406:52 - do that for sure but just keep in mind
406:54 - that we're actually invoking functions
406:56 - from this component
406:58 - so in that case of course you need to
407:00 - pass them as
407:03 - parameters correct basically set up the
407:05 - parameters and pass them as arguments
407:08 - but as far as moving this in to a
407:11 - function body yes basically component
407:14 - body it's an option so what I could do
407:17 - here cut it out
407:19 - and then call it into a use effect now
407:22 - this copy and paste and everything is
407:24 - going to work now it doesn't do that in
407:27 - feed however in create react app if you
407:31 - do that
407:32 - essentially there's going to be a
407:35 - eslinteral that's going to complain that
407:37 - you need to provide the fetch user as a
407:41 - dependency and I want to tell you right
407:45 - away not to do that why well because
407:48 - we'll have ourselves a problem
407:50 - so we'll have our initial render where
407:53 - we'll set up the state values and all
407:55 - that and during initial render what do
407:58 - we do over here we invoke fetch data now
408:01 - what is fetch data doing it's updating
408:03 - the state value
408:05 - we already know that so we will trigger
408:07 - the rerend
408:09 - so when the re-render happens this gets
408:12 - created from the scratch and essentially
408:15 - as far as this dependency array is
408:17 - concerned
408:18 - its value changed so what happens here
408:20 - again we fetch data and again this
408:24 - problem is going to be easier if I
408:25 - showcase that over here now you don't
408:27 - have to do that because I believe you'll
408:29 - use up all your requests notice I have
408:31 - 403 right now basically I used up all my
408:34 - searches so yeah for sure don't do that
408:36 - now I have there was an error right and
408:40 - effectively the reason why we have that
408:42 - is because we have this infinite Loop so
408:44 - my suggestion for now if you're placing
408:46 - the function outside of the user effect
408:49 - for now just ignore the eslint warning
408:53 - you get in the console again you're not
408:55 - going to have it with Veet but if you're
408:58 - using let's say a create react app
409:00 - that's going to be case and later when
409:03 - we discuss use callback I'll show you
409:06 - two approaches how essentially we can
409:09 - make eslint happy and
409:12 - have the function here
409:14 - and also pass it here as a dependency
409:18 - okay and next let's return to one of the
409:23 - rules of the hooks and as a side note if
409:27 - you don't want to follow along with this
409:28 - video you don't have to so in my case
409:30 - yes I will import the file and all that
409:33 - but basically I just want to showcase a
409:34 - few things and the reason why I set up
409:36 - the file just so you can have it for
409:38 - your reference so long story short if
409:40 - you don't feel like it you can just sit
409:42 - back and relax and watch me struggle so
409:46 - if I navigate to the file d03 hooks rule
409:51 - you'll notice that I have a your state
409:53 - and use effect I have some kind of
409:56 - condition again this is just a random
409:58 - value and
409:59 - the Boolean value is true
410:02 - so remember when we discussed hooks one
410:05 - of the rules was don't call hooks
410:08 - conditionally
410:10 - so this is not going to work you cannot
410:12 - place a hook inside of the if condition
410:15 - hooks need to be called in the same
410:18 - order
410:19 - and just to show you another example
410:22 - which sometimes gets discussed in the
410:26 - course q a let me first comment this one
410:29 - out and then uncomment the second one so
410:33 - you'll notice over here I have the early
410:35 - return
410:37 - now this again is not something you want
410:40 - to do you don't want to place use effect
410:43 - after this condition because keep in
410:45 - mind if you're returning that's it we
410:48 - stop reading the code so effectively we
410:51 - call the use effect conditionally and
410:54 - Veet is not going to throw you a bunch
410:57 - of errors but if you use for example
410:59 - create react app
411:00 - you'll have a bunch of warnings and
411:03 - errors in the console and all that so
411:05 - again just few things to keep in mind
411:07 - don't place
411:09 - the hook inside of the if condition and
411:11 - also be careful if you have multiple
411:14 - returns basically if you have jsx
411:17 - returned based on some condition don't
411:20 - Place use effect after them make sure
411:22 - that use effect is always before those
411:24 - conditions and then yes of course you
411:26 - can set up tons of multiple returns so
411:29 - that is still okay but you don't want to
411:32 - call this one conditionally it's not
411:35 - going to work okay and up next let's
411:37 - quickly discuss truthy and falsy values
411:40 - as well as short circuit evaluation in
411:44 - JavaScript
411:46 - because we'll heavily rely on these
411:48 - topics in the following videos now I can
411:50 - tell you right away that if you're
411:52 - familiar with these topics feel free to
411:53 - skip this video I'll just quickly cover
411:56 - the major things we need to be aware of
411:59 - again the whole purpose is
412:01 - we'll use that in react and I really
412:04 - want to make sure that we're all on the
412:06 - same page if you're familiar with these
412:08 - Concepts then feel free to skip that and
412:11 - effectively in JavaScript we have falsy
412:13 - and truthy values and it's going to be
412:15 - easier to remember the falsy ones and
412:18 - those are false zero empty string null
412:21 - undefined and not a number with that
412:24 - said you have to sit here and memorize
412:26 - them now just don't be surprised when we
412:29 - use for example empty string in our
412:32 - conditions just remember that it is
412:33 - falsy now why do we care about that well
412:36 - because
412:37 - truthy and positive values can be
412:40 - evaluated in the condition
412:43 - so we can set up a condition not with
412:47 - just true and false the Boolean value if
412:51 - let's say I have hello and as a quick
412:54 - side note so these are the falsy ones
412:56 - and all the other ones are truthy that's
412:58 - why it's going to be easier to remember
412:59 - the falsely ones so fuzzy ones will
413:03 - evaluate in the condition to false and
413:06 - truthy ones will evaluate to true so
413:09 - again back to your example if you have
413:11 - these values so X Y and Z and the first
413:14 - one is a string a valid string second
413:16 - one is an empty one and third one is a
413:19 - zero
413:20 - for the first one if you'll set it up in
413:22 - the condition actually you'll see in the
413:25 - console axis truthy so this evaluates
413:28 - the true again instead of a Boolean this
413:31 - is a string with some kind of value now
413:34 - when it comes to a second and third if
413:36 - you'll run this code you'll actually see
413:38 - in a console that it evaluates to false
413:43 - so in the console you'll see Y is fuzzy
413:47 - now why do we care about that because we
413:50 - also have short circuit evaluation
413:54 - and essentially it just allows us to
413:57 - write code in more concise way and we
414:00 - can do that by using and operator
414:03 - and or operator
414:06 - and as far as the end operator it
414:09 - Returns the first operand basically this
414:13 - value over here
414:15 - if it is fuzzy or the second one if the
414:19 - first one is truthy so let's just back
414:22 - up a little bit and let's start
414:25 - everything from scratch so this one is
414:27 - zero what it is it is falsy correct and
414:30 - this one is what it's truthy because
414:32 - it's essentially a integer that is not
414:35 - zero now if we have this and operator
414:39 - then basically if this one is falsy
414:43 - it will be returned
414:45 - so if you have two of them and the first
414:47 - one is falsy then that's the one that's
414:49 - going to be returned from this
414:51 - expression now
414:53 - if it's the other way around if you have
414:57 - truthy as the first one
414:59 - then it will return regardless the
415:02 - second value
415:03 - something to keep in mind and when it
415:06 - comes to or operator
415:08 - it Returns the first operand if it is
415:12 - truthy
415:13 - or the second operand if the first one
415:17 - is fuzzy so as you can see it's the
415:19 - other way around
415:20 - if we have example of again zero and one
415:25 - since this is falsy
415:28 - the second one is going to be returned
415:30 - so opposite of end operator
415:34 - and if this is truthy
415:37 - then the first one is going to be return
415:40 - hopefully that is clear and again the
415:44 - reason why we quickly covered both of
415:46 - them is because we will use them in our
415:50 - react setup and as far as
415:54 - function example since we're working
415:56 - with functions if I have function
415:58 - display name and if I'm looking for the
416:02 - argument of name
416:04 - if it is provided
416:06 - then of course I'll have the argument
416:10 - because in return I have a short circuit
416:13 - operator I have the or one and remember
416:17 - if this one is full zip
416:20 - basically if we don't provide it then
416:24 - it's right away gonna return the second
416:25 - value
416:27 - if this one is true then it's going to
416:30 - return the first value again let's
416:31 - double check
416:33 - if the first one is palsy second one
416:35 - will be returned if it's truthy then the
416:40 - first one is going to be right away
416:42 - return
416:43 - hopefully we're on the same page and up
416:46 - next let's see
416:48 - how we can set up such functionality in
416:51 - our react components beautiful and once
416:53 - we have jog your memory on the short
416:56 - circuit evaluation as well as truthy and
417:00 - falsy values in JavaScript now let's try
417:03 - to set them up in react and we'll write
417:05 - away start with the challenge where
417:07 - basically I want you to navigate to this
417:09 - file and I want you to create two State
417:13 - values one is going to be truthy and one
417:15 - is going to be falsy and then in the jsx
417:18 - I want you to set up both conditions for
417:22 - each operator so
417:26 - try two of them with palsy so or and and
417:30 - and the same goes for truthy and a tiny
417:33 - hint
417:34 - you want to do that in the curlish in
417:37 - the jsx so let's start working on that
417:40 - basically
417:42 - in the objects I have a star and at the
417:45 - moment I'm rendering this file okay
417:47 - that's good
417:49 - that's an awesome start now let me
417:50 - navigate over there as you can see I
417:53 - just have huge State import and now
417:55 - let's set up those
417:56 - two State values now you can go with
417:59 - Boolean that's definitely an option but
418:02 - I'm just going to go with empty string
418:03 - and string with some kind of value so
418:06 - those are going to be my ones I'm going
418:08 - to go over here and say fuzzy now let's
418:10 - create that value so text and set text
418:15 - and that is equal to use State and like
418:18 - I said we'll start with the false even
418:19 - then I'm gonna copy and paste so with me
418:23 - select both of these lines over here and
418:25 - this is going to be true thing so truthy
418:28 - over here and as far as the name I'm
418:31 - gonna go with name
418:32 - and set name
418:35 - set name and in here as far as the
418:38 - default one I'll go with Susan
418:40 - okay that's awesome
418:42 - so now let's navigate to jsx and let's
418:46 - go over here with div and before we type
418:50 - anything let's just refresh our memory
418:52 - that in a jsx we cannot do something
418:54 - like this I cannot set up here a if
418:58 - condition if and then something this is
419:01 - not going to work so we'll have some
419:03 - kind of condition regardless of the
419:05 - value
419:06 - will get right away an error something
419:08 - to keep in mind so let me set this one
419:10 - up
419:10 - in a separate line
419:12 - and let me just add that value
419:16 - just so it stays for your reference so
419:18 - let's go over here and let's say it
419:20 - won't work
419:21 - I'll work over here and let me comment
419:24 - this one up and since we cannot use if
419:27 - conditions in jsx but we obviously still
419:31 - want to display stuff based on some
419:34 - condition that's exactly why we need to
419:37 - understand how short circuit operators
419:40 - work in react and now let's keep on
419:43 - moving and effectively you want to set
419:45 - up four heading fours and in there again
419:49 - I'll have both conditions so let me
419:52 - start with the first one and I'll say
419:54 - fuzzy and this is going to be or example
419:57 - let me set up a colon then I'm going to
420:01 - go with the curlies and I'm looking for
420:03 - a text so that's my falsy value and I'm
420:06 - going to use my or operator
420:08 - so now you have to guess which one is
420:10 - going to be displayed is it going to be
420:13 - the text one basically empty string or
420:15 - is it going to be a hello world and once
420:18 - I save I have Hello World why well
420:21 - because with or operator if this is
420:23 - going to be falsy then it's going to
420:26 - display the second value so now let me
420:29 - copy and paste then like I said I want
420:32 - to set up four of them so this is going
420:34 - to be and and then this will be truthy
420:37 - so now let me select both of them
420:40 - and I'll say truthy
420:42 - and this one will be and
420:45 - and here
420:47 - effectively I just want to change the
420:49 - operator and once I save notice now I
420:52 - have empty string
420:54 - so this is how it's going to work in
420:57 - react again it's the same as in
420:59 - JavaScript if we have falzi and we have
421:01 - and then effectively we display the
421:04 - first one so now let's just change this
421:06 - around where it's not going to be text
421:08 - essentially I want to go with name and
421:12 - you'll see that we have
421:13 - opposite Behavior where if this is or
421:17 - then we'll display the first one however
421:20 - if we have the and one
421:22 - then of course we'll display the second
421:24 - one so if this is truthy
421:27 - then we right away display the second
421:30 - value and lastly I just want to mention
421:32 - that of course we're not
421:34 - limited to just set up this
421:36 - functionality image.jsx directly I can
421:39 - also do something like this where I'm
421:42 - going to go with constant and code
421:43 - example and that one is equal to
421:46 - whichever value I want so again I'm
421:49 - going to use the same one where I'm
421:50 - going to go with text and then
421:53 - hello world and then we can render it
421:56 - right away in the jsx just showing you
421:59 - multiple
422:00 - options that you have let me save that
422:02 - and of course since this is falsy again
422:04 - we have or operator so we display the
422:07 - second value
422:08 - ratcheted for General concept and up
422:12 - next let's look at the most common
422:14 - examples okay and once we're familiar
422:17 - with the general concept now let's take
422:20 - a look at some examples so in the app
422:22 - jsx I want you to import zero five and
422:27 - then the examples and as far as the
422:30 - component notice over here
422:32 - we have a few more values basically we
422:36 - still have the empty string still have
422:38 - some kind of text also a user and we
422:41 - also have a Boolean value
422:44 - and effectively when it comes to or
422:46 - quite often it is used to display some
422:49 - kind of default value so let's say if I
422:52 - navigate here and if I set up a div and
422:55 - then inside of that div
422:56 - I want to go with some kind of heading
422:58 - 2. Imagine This
423:01 - I have some kind of value
423:03 - in this case I'm going to go text and if
423:05 - that value doesn't exist then I want to
423:08 - go with some kind of default one now if
423:10 - you're wondering like why value wouldn't
423:13 - exist well keep in mind that quite often
423:15 - we'll be getting stuff
423:17 - from the API and it's not guaranteed
423:21 - that for all the items that property is
423:24 - actually going to be there so this is
423:26 - very useful where you can be like okay
423:28 - try to set this property if not then use
423:32 - the default value and of course let's go
423:35 - with name here and you'll see that if
423:37 - the value is there then of course it
423:39 - will display the value so that is a
423:41 - pretty common approach for or operator
423:45 - in react now when it comes to and it's a
423:48 - little bit different where instead of
423:50 - text you essentially control what
423:53 - elements are going to be displayed now
423:55 - I'm going to show you both examples
423:57 - where we use the elements as well as the
424:00 - components just keep in mind that both
424:03 - of them effectively work exactly the
424:04 - same way so if I go here and right after
424:08 - text I'm just going to go with the
424:10 - curlies and I'll say if text
424:14 - evaluates to true what do I want to do
424:16 - well then I want to return a div with
424:19 - two heading twos so let's go over here
424:22 - and let's say div
424:26 - close div here and then inside of the
424:29 - div we want to go with those two heading
424:31 - Tools in one I'm gonna display the name
424:33 - so I'm going to go over here and I'll
424:36 - say adding two whatever
424:38 - and return
424:41 - and then right after that we want to go
424:43 - with heading two and I'm going to access
424:46 - the name over here and notice once I
424:49 - save I don't see anything why well
424:52 - because this is false correct so this
424:55 - one is an empty one
424:57 - and as a result we don't return anything
425:00 - basically we have nothing in the browser
425:03 - and that's something important to keep
425:04 - in mind where in this case
425:07 - there's always going to be that having
425:09 - two tag however if we use and operator
425:12 - and basically we set up whatever we want
425:15 - to return you'll actually notice that
425:17 - there is no div with those heading tools
425:20 - it just doesn't exist so we only have
425:23 - this heading 2 with default value we
425:25 - don't have that second dip now of course
425:28 - if this is going to be truthy if we'll
425:31 - add just let's say even one character
425:33 - you'll right away notice that first of
425:35 - all
425:36 - since we have the or operator here it's
425:38 - going to display this one and when it
425:41 - comes to text well now since this
425:43 - evaluates the true now we actually
425:45 - render div with those two running twos
425:48 - and of course we access the name here as
425:51 - well so those are pretty common
425:53 - approaches where again we use or inside
425:56 - of the element if we want to display
425:58 - some kind of default one and we use and
426:01 - to control effectively what we return
426:03 - now of course this is going to be
426:05 - dynamic at the moment we're just hard
426:07 - coding but normally this is going to be
426:09 - dynamic so let me set it back here to an
426:12 - empty string and again notice how we're
426:14 - not returning anything and before I show
426:16 - you the component example let's also
426:19 - cover that we can use the not operator
426:21 - so at the moment this is fuzzy right
426:24 - that's why we don't display anything
426:26 - however
426:27 - if I stick a not operator in front of it
426:31 - you'll see that actually everything is
426:33 - displayed now if you're not familiar
426:36 - with not operator in readme essentially
426:39 - you'll find code examples for vanilla.js
426:42 - again I don't want to spend too much
426:45 - time on that because I want to move on
426:47 - with react topics but again if you need
426:49 - to jog your memory on the not operator
426:51 - please utilize the readme where you'll
426:54 - find the vanilla Jazz examples and of
426:56 - course it's going to be easier to
426:58 - understand so essentially if I just
427:00 - stick here the exclamation point in
427:03 - front of it I'm good to go I'm actually
427:05 - displaying this why well because by
427:08 - default essentially this is all Z
427:10 - however with not operator I'm looking
427:13 - for the opposite value so now this is
427:15 - true thing
427:16 - and I display it over here again
427:18 - something important to keep in mind so
427:21 - I'll copy and paste I'll remove this one
427:24 - and I'll just comment this one out over
427:26 - here just so we don't have too many and
427:29 - as always you can reference do you read
427:31 - me as well and now since we're familiar
427:33 - how we can use the and operator to
427:36 - return some elements why don't we also
427:39 - take a look how we can do the same thing
427:41 - with components so below my first
427:46 - component I want to go with second one
427:47 - I'm going to go with const and then I'll
427:50 - just say sum component now I know that
427:53 - I'll pass the prop so I'll write away
427:56 - the structure it and essentially I'm
427:57 - going to be looking for the name prop
428:00 - so let's go over here
428:01 - and then as far as the return we'll do
428:04 - the same thing
428:05 - it's just now we'll return from the
428:07 - component so if I go with return Then
428:10 - space and I'll cheat a little bit then
428:13 - I'm just going to copy and paste so
428:15 - that's going to be my component
428:17 - let me scroll up over here and I guess
428:20 - I'll do after not so I'll set up over
428:23 - here a logic where
428:25 - essentially if
428:27 - the value is true then I want to return
428:31 - that component and in this case I'm
428:33 - going to be looking for the user just to
428:36 - use a more complex example so notice
428:39 - user set user use State and this is an
428:42 - object and of course this will evaluate
428:44 - to true so now let's scroll down and
428:47 - let's say over here that if the user
428:49 - exists only then I want to display the
428:52 - component so say over here some
428:55 - component and then I want to pass in
428:57 - that name prop now what is it going to
428:59 - be equal to well I'm going to go with
429:01 - name equals to user.name and then I want
429:04 - to close over here the component and as
429:07 - you can see now in the browser we have
429:09 - John because that's the value over here
429:12 - again both of them do exactly the same
429:16 - thing
429:17 - so either you can return a bunch of
429:19 - elements or you can set it up here in
429:21 - the component and also please keep in
429:23 - mind that like I keep saying this is
429:25 - going to be dynamic so essentially
429:27 - you'll try to fetch the user from the
429:29 - database if the user exists then I want
429:34 - to display
429:35 - some kind of component with the values
429:38 - that represent that user and if it
429:40 - doesn't exist let's say if
429:43 - the API or database returns that this is
429:46 - null what do you know we're not
429:48 - displaying that component altogether
429:50 - hopefully that is clear and up next I
429:53 - also want to show you how we can use
429:54 - ternary operator in jsx okay and while
429:58 - we're still on the topic of conditional
430:00 - rendering examples when we also quickly
430:03 - cover turning operator because this is
430:07 - also something that you'll see quite
430:08 - often in jsx and just jog your memory
430:12 - effectively in JavaScript we have this
430:13 - option to check for condition and if
430:17 - it's true when we return the first
430:19 - expression if not then we return the
430:23 - second one and the way it's going to
430:25 - work in jsx first I want to navigate
430:27 - back to the same file so again we're not
430:30 - changing the files in here we're working
430:32 - the same one first I'll start with some
430:34 - kind of divider and I'm going to go with
430:36 - heading 2 and I'll just say bernary
430:38 - operator
430:41 - and then in here when we add a little
430:44 - bit of
430:45 - CSS and I'm just going to add some
430:47 - margin top bottom
430:49 - and left and right I'll keep it zero so
430:52 - one Rems and then a zero and after that
430:54 - I want to render the button so let's go
430:57 - with button let's add a little bit of
430:58 - styles here so I'll say here last name
431:02 - and then that one is equal to
431:04 - BTR and then inside of the button
431:08 - I'm gonna check for is editing and if is
431:11 - editing is true then as far as the
431:13 - content is going to be added and if not
431:16 - it's going to be add so let's go over
431:19 - here and let's say is editing and then
431:23 - we want to set up the question mark here
431:26 - and then the first value is going to be
431:29 - if it's true so if is editing is true
431:32 - then we'll display edit if not then
431:34 - we'll go with ADD save that and now of
431:37 - course since this is false that's why we
431:40 - go with ADD now if we'll change this to
431:43 - True you'll see right away that text
431:45 - actually is added and not to sound like
431:48 - a broken record but of course normally
431:51 - this is going to be dynamic so if I go
431:53 - back over here to false then I'll have
431:56 - ADD and I also want to showcase how we
431:58 - can
432:00 - use the theory operator to return
432:03 - elements just like we covered with and
432:05 - operator so this is one option where we
432:09 - just check if the value is true and then
432:11 - we return the component but we can also
432:13 - use turnary operator and essentially if
432:16 - it's true then we return one set of
432:20 - elements or the components and if it's
432:24 - false then of course we return
432:26 - other set of elements and in here again
432:29 - I'm going to check for user so I set up
432:31 - the curlies I'll go here with my ternary
432:34 - operator and let's start with a div and
432:37 - again just to speed this up I'm going to
432:40 - grab this value over here so let me go
432:43 - here we wanna copy and paste Yep this is
432:47 - what we want to do now I'm not going to
432:50 - probably return two of them you know
432:52 - what I'm just going to go here with
432:53 - heading 4. and then inside of it I'll
432:57 - say hello there and user so what am I
433:00 - doing over here well since I have a user
433:02 - object
433:04 - if it's true if it's not null then of
433:07 - course I'll display div with the
433:09 - username now if it is false
433:12 - then I'm gonna go with colon over here
433:14 - and basically I'll just say hey
433:18 - you need to log in so there is no user
433:21 - so in order to do that I'm just going to
433:23 - change here heading 2. I'm not going to
433:25 - be looking for a user because now I know
433:26 - that this is false of course and then
433:29 - I'll just say please login and you'll
433:32 - notice that right away we have hello
433:34 - there user John
433:37 - and if we change this to null again then
433:40 - of course I'll have please login so let
433:43 - me go back to John and we successfully
433:45 - covered the most common examples I know
433:48 - that last few videos were probably a
433:50 - little bit tedious because we were just
433:52 - flipping the values from True to false
433:54 - and that's why up next I'm going to work
433:57 - on two challenges where you'll be able
434:00 - to utilize this knowledge all right and
434:02 - first I want to work on the toggle
434:04 - challenge so in the app GSX import this
434:08 - file zero six toggle challenge this is
434:10 - what you'll see on the screen and as far
434:12 - as the challenge I want you to create a
434:14 - state value and in this case I'm going
434:16 - to go with Boolean please keep in mind
434:18 - that of course you can set up a
434:20 - different value again we're talking
434:22 - about truthy and falsy just to make it
434:25 - easier I'm gonna go with Boolean then in
434:28 - the jsx we want to return a button and a
434:32 - component or element so for sure turn a
434:36 - button
434:37 - and then after the button set up some
434:40 - kind of element or a component that's
434:44 - really up to you in my example I'm going
434:45 - to use the component but of course you
434:48 - can use the element as well and then
434:51 - when the user clicks the button toggle
434:54 - the state value this sucker over here
434:57 - and then based on that value
435:00 - conditionally render component element
435:03 - and I want to right away tell you that
435:05 - there's multiple ways how we can set
435:07 - this up so again if your logic works
435:11 - do whatever makes the most sense to you
435:13 - now as far as my setup first of all I
435:16 - want to navigate to the file so I'm
435:18 - going to go to toggle challenge you want
435:21 - to grab the use State again I'm going to
435:23 - go with Auto Imports so I'm gonna go
435:25 - with use state
435:28 - let's grab that one and it's going to be
435:30 - false by default now as far as the name
435:33 - I'm gonna go with show alert and then
435:36 - comma and then set show
435:39 - alert now that is equal to of course my
435:42 - value okay good let's save that and like
435:45 - I said now we want to set up that button
435:48 - so in here I'm going to go with div
435:51 - and first is going to be my button
435:54 - so begin blah blah blah blah class name
435:57 - BTN and then on click for now let's not
436:00 - worry about it I just want to showcase
436:02 - how it's going to look like so I have my
436:04 - toggle button and like I said after that
436:07 - if you want to set up elements or
436:09 - element you can definitely do so in my
436:11 - case I'm going to set up the alert just
436:13 - so I can showcase some classes that we
436:16 - have in CSS so in here if I go with
436:18 - alert component
436:20 - and then as far as the return if I go
436:22 - with let's say div
436:25 - return and then div let's add class name
436:28 - so we have two of them alert which
436:31 - basically adds the general Styles and
436:33 - then I also have alert danger which
436:36 - essentially just adds some colors and
436:38 - all that kind of stuff so let me close
436:40 - it here and let me say hello world let
436:43 - me save this and now I want to go up
436:45 - where I have the toggle Challenge and I
436:48 - want to just display the alert for now
436:49 - this is what we're gonna see on the
436:52 - screen now awesome
436:54 - up next I want to actually toggle this
436:56 - value so first of all let's come up with
436:59 - the function and in my case that's going
437:01 - to be toggle alert so I'm going to call
437:04 - this toggle alert that's my function and
437:08 - then before I set up the functionality I
437:11 - want to actually invoke it every time I
437:13 - click so remember it was on click and
437:15 - then we want to go with toggle and alert
437:18 - and as far as the functionality well we
437:21 - want to toggle the state value right and
437:24 - like I said there's multiple ways how we
437:26 - can set this up at the end of the video
437:27 - I'll show you a shortcut but for now we
437:31 - can simply do it this way where I'm
437:33 - going to check what is the value of show
437:36 - alert basically if this is true then I
437:39 - want to go set show alert then I'll set
437:42 - it equal to false and very important we
437:44 - want to go here with the return Why well
437:47 - because I'm going to be setting up logic
437:49 - after my condition and if I don't add
437:51 - the return Then basically it's going to
437:55 - hit this
437:56 - functionality as well because that's how
437:58 - JavaScript is reading the code so let me
438:00 - go here with true and notice so if this
438:03 - is true I want to set equal to false if
438:05 - not then basically we'll just skip this
438:08 - condition and we'll set it equal to true
438:10 - so this is awesome but of course alert
438:14 - is always going to be displayed we also
438:16 - need to implement right now our and
438:19 - operator correct so I'm going to go with
438:21 - show alert if this is true and what do I
438:24 - want to do well that's when I want to
438:26 - display that alert so let me save it
438:28 - over here and notice
438:31 - once I click this is of course now true
438:34 - and I display the alert once I click one
438:37 - more time then of course it's false and
438:39 - I don't display the alert and as far as
438:42 - the shortcut let me keep scrolling and
438:46 - notice over here this is not operator so
438:48 - essentially we can just make it a
438:51 - one-liner where instead of setting up
438:54 - the entire function and all that I can
438:56 - just pass here the arrow function and I
438:59 - can say set show alert and then not so
439:04 - the opposite value of the current value
439:07 - of show alert so if it's true then set
439:10 - it equal to false and if it's false then
439:13 - set it equal to true hopefully that is
439:15 - clear
439:16 - so I'm gonna navigate back again I'm
439:19 - gonna comment this one out just so it
439:21 - stays for your reference and now let's
439:23 - do that one liner where basically we
439:25 - will go here with my arrow function and
439:28 - then we'll just say set show alert and
439:31 - set it to the opposite value
439:33 - let's save that and then notice our
439:36 - functionality still works Everything is
439:38 - Awesome we still have that alert
439:40 - component if this is true however now we
439:44 - have less lines of code
439:47 - all right and up next I want to work on
439:49 - the user challenge so essentially in the
439:52 - app GSX we want to import this one the
439:54 - zero seven
439:56 - user Challenge and as far as the
439:58 - challenge we want to set up the state
439:59 - value in my case I'm going to go user
440:02 - and default value is going to be no then
440:05 - I want you to create two functions One
440:07 - login function that sets the user equal
440:10 - to a object with a name property so you
440:14 - simply want to set it equal to object
440:16 - that name property and some kind of
440:18 - value again that value is totally up to
440:20 - you and then we also want to set up a
440:22 - log out
440:23 - button
440:25 - and for that we'll need a logger
440:27 - functionality
440:28 - and in there I want you to set user
440:31 - equal to a null
440:34 - so set it back to the default value
440:36 - which is null and then in the jsx use
440:39 - the ternary operator to display two
440:41 - different setups so if the user exists
440:45 - we want to go hello there and then try
440:47 - to get the username because remember
440:49 - we're setting the user equal to an
440:52 - object with the name property and also I
440:55 - want to display the logout button
440:57 - so if the user has already logged in I
441:00 - don't want to display the login button
441:02 - that doesn't make sense I want to
441:03 - display the logout button and then if
441:06 - it's false if the user is false I want
441:08 - to go with heading 4 and please log in
441:10 - and a login button so let's start
441:14 - working on this challenge first I'm
441:16 - going to go with const and like I said
441:18 - in my case I'm going to go to user and
441:19 - then set user that is equal to my use
441:23 - and then state so that's imported and
441:27 - we're going to go with no that's going
441:29 - to be the default value and right out of
441:33 - the gate let's set up those functions so
441:34 - const login
441:36 - and that one is equal to a function here
441:39 - and then I want to go with set user and
441:43 - I want to set it equal to an object so
441:45 - name and in my case I'm going to go with
441:48 - vegan
441:49 - food truck because why not and then I
441:52 - also want to add here a comment where
441:54 - normally
441:57 - connect
441:58 - to DB or API so essentially you're not
442:03 - going to be hardcoding this
442:05 - normally you'll connect to the database
442:08 - if everything is correct if it's the
442:11 - right password and an email and all that
442:14 - you'll get back the credentials for the
442:16 - user and that's where you'll set it in a
442:19 - state value now if it's not then of
442:22 - course nothing's gonna happen you'll
442:24 - display probably some kind of error
442:25 - message
442:26 - but hopefully this is clear so of course
442:29 - in this example we're basically hard
442:31 - coding we're saying yeah once we log in
442:33 - everything is going to be fine but it's
442:35 - not always the case
442:36 - and of course later in the course we
442:38 - will connect to a database and we'll
442:40 - check what's happening and if everything
442:42 - is correct that's when we set the user
442:46 - but again the main idea is going to be
442:48 - exactly the same you have that flag the
442:51 - user basically and if it exists it's
442:54 - awesome I want to display it if not then
442:56 - I want to go with a logarithm hopefully
442:59 - that's clear copy and paste I don't need
443:02 - a comment here
443:04 - I can set it up as null as well
443:07 - no and
443:10 - I want to call it logout here
443:12 - let's save this and now let's work on
443:15 - the jsx so first I want to display the
443:17 - div then instead of the div I want to
443:19 - set up right away js6 and I want to go
443:23 - with user
443:25 - so essentially I'm checking that user
443:26 - value and remember I have two options if
443:29 - it's true it's one thing if not then
443:31 - it's something else so let's start if
443:33 - it's true and again yes you can set up a
443:36 - component over here so if you want to
443:39 - work on the challenge more
443:41 - you can set up these returns as separate
443:45 - components so in here let's go with div
443:47 - I'm going to set it up as heading four
443:50 - remember in this case user exists so we
443:53 - can simply go with hello there
443:55 - and we can try to access the username
443:58 - now if it's null then it's not going to
444:00 - make sense correct so user.name okay
444:03 - that's awesome and as far as the button
444:05 - well like I keep saying we're not going
444:08 - to display the login
444:10 - we want to display the opposite one
444:11 - which one is that well that's the logger
444:15 - one so let's go with button class name
444:17 - BTN okay that's beautiful on click and
444:21 - now let's go with our log out button and
444:24 - the same goes for the text so log out
444:27 - here let's save it and we'll have an
444:30 - error don't worry we'll fix that in a
444:32 - second
444:33 - essentially we want to grab here this
444:35 - div
444:36 - and we want to copy and paste
444:39 - now here we're working with opposite
444:42 - values correct so we're going to go here
444:44 - with please log in and we're going to
444:47 - change the button this is going to be a
444:50 - login button
444:52 - over here
444:53 - as well as here let's save that and
444:56 - check it out
444:57 - now we have
444:59 - div with these values and the moment
445:01 - we'll click will actually flip it
445:04 - so notice this is what we have right now
445:07 - e in our browser right so these are the
445:10 - elements we're returning however once we
445:12 - click check it out now we're turning
445:14 - different values so now we have hello
445:17 - there vegan food truck so essentially
445:19 - we're displaying that user has logged in
445:21 - successfully and now he or she has an
445:24 - option to log out and once we log out of
445:27 - course we have the previous screen The
445:29 - Heading 4 with please login hopefully
445:33 - everyone enjoyed the challenge and I'll
445:35 - see you in the next video all right and
445:37 - now let's go back and discuss use effect
445:39 - cleanup function and why it's useful so
445:43 - yes
445:44 - once we're done with conditional
445:46 - rendering we'll actually go back to zero
445:50 - to use effect and
445:53 - take a look at the cleanup function and
445:55 - you'll see in a second why and let's
445:57 - start with the challenge so I want you
445:59 - to create a state value and
446:01 - in jsx set up a button which toggles the
446:05 - state and based on that condition return
446:07 - a second component now that's a totally
446:10 - simple return you don't need to worry
446:12 - about returning 10 000 elements
446:14 - literally it can be a heading 2. now
446:16 - what's important in the second component
446:19 - create a use effect and run it only
446:24 - on initial render and remember in order
446:27 - to do that we needed to use a second
446:30 - argument
446:31 - in the use effect and once you have the
446:34 - example in place then we'll discuss
446:37 - why we have such interesting Behavior so
446:40 - again we're looking for use Effect Star
446:43 - and then zero five cleanup function
446:45 - that's what I have in the app jsx and
446:49 - then as far as the file
446:51 - first let's just go with some kind of
446:54 - state value so in my case I'm going to
446:56 - call this toggle const and then toggle
447:00 - set
447:01 - toggle and that is equal to use
447:05 - huge State and by default let's set it
447:08 - equal to false but after that let's set
447:11 - up that return
447:12 - so right away go with return and I'm
447:15 - going to remove the heading too and I'll
447:17 - go with div instead and then in here
447:19 - let's create that button then we're
447:22 - going to go to class name and that BTN
447:25 - we also want to right away add on click
447:27 - and let's pass in the arrow function as
447:31 - far as the logic will go with set toggle
447:33 - and we'll use that not operator so set
447:37 - it equal to the opposite value and then
447:40 - in here
447:41 - I want to set up some kind of text and
447:45 - I'm going to go toggle component let's
447:48 - save that yep I have the button
447:50 - everything's awesome so now let's set up
447:52 - another component and based on that
447:54 - state value let's toggle it so in here
447:56 - I'm going to go with const and then for
447:58 - random
447:59 - component
448:01 - again the entire gotcha is the result
448:04 - you'll see in the console so that's the
448:06 - most important one first for now let's
448:09 - just go in random component then
448:11 - let's go with heading one man we'll say
448:13 - hello there
448:15 - hello there now we already know that of
448:17 - course we can toggle it correct so if I
448:20 - go here and if I'll say toggle and paste
448:22 - on that value if it's true then I want
448:25 - to return the random component if not
448:27 - then nothing is going to be displayed
448:30 - so we're expecting this Behavior correct
448:32 - all of that is good so now we're putting
448:35 - two and two together where we can use
448:38 - conditional rendering we can display the
448:40 - component but also keep in mind that in
448:43 - any component we can set up the use
448:44 - effect correct so let's try it out we're
448:47 - going to go here with used effect so
448:50 - we'll pass it here and then remember
448:52 - like I said we have two arguments we
448:55 - have the function that's first
448:58 - and then we have the dependency array
449:01 - now as far as the function here we're
449:04 - going to go with some kind of log we'll
449:07 - say hmm that's interesting and you'll
449:09 - see in a second why so
449:11 - um
449:11 - this is interesting okay good let's save
449:15 - it and now million dollar question yes
449:18 - we're going back to the quiz
449:21 - how often do you think this is going to
449:23 - show up
449:24 - so remember use effect
449:27 - it has the dependency array and
449:30 - technically this is empty
449:32 - so two options
449:35 - either it's going to show up only once
449:38 - when the component renders or
449:41 - there's actually a gotcha and we'll see
449:43 - it more often so let's try it out I'm
449:46 - gonna go over here and check it out
449:47 - every time I click
449:50 - I actually have this Behavior
449:52 - now before we continue why is this
449:55 - happening well remember long long long
449:57 - long time ago we discussed
450:01 - the render and re-render correct so
450:05 - let's go with I don't know initial
450:07 - render maybe this way I'll be able to
450:10 - find it
450:11 - yep over here remember
450:14 - we discussed the initial render and
450:16 - re-renders and I said that
450:18 - for time being let's think of initial
450:20 - render
450:21 - where basically the application loads so
450:25 - that's when we render for example this
450:28 - sucker over here the cleanup function
450:30 - however
450:31 - when we start toggling the component
450:34 - essentially we Mount and unmount the
450:37 - component and during the mount we repeat
450:41 - initial render
450:43 - so of course the functionality inside of
450:46 - the use effect will run even though the
450:49 - dependency array is empty but notice now
450:53 - I'm displaying the hello there that's
450:55 - the initial render and yes if there's
450:57 - going to be some kind of logic inside of
450:59 - the random component of course it will
451:01 - re-render if you'll have to use state
451:03 - but my main point in this video is to
451:05 - Showcase that just because we're used to
451:08 - use effect just running once
451:11 - when the application loads it's not
451:13 - going to be the case if
451:15 - you're displaying the component
451:17 - conditionally because in that case that
451:21 - initial render is going to happen every
451:22 - time you basically Mount and unmount
451:25 - Mount and unmount
451:27 - and this is why
451:29 - the cleanup function which we're going
451:31 - to discuss in the next video is going to
451:32 - be useful just don't be surprised if you
451:35 - have some kind of component that is
451:37 - being mounted and unmounted and even
451:40 - though you do have this dependency array
451:43 - as empty the functionality inside of the
451:46 - use effect which in this case is just a
451:47 - simple console log
451:49 - keeps running every time we basically
451:52 - show the component again it's not a good
451:56 - or a bad thing in the following videos
451:58 - we'll take a look at few examples and
452:00 - when it becomes a problem just something
452:02 - very important to keep in mind but yes
452:05 - you have this initial render when the
452:07 - application loads but for components
452:10 - that are being displayed conditionally
452:13 - actually it's going to happen when you
452:15 - also Mount the component okay so
452:18 - hopefully it is clear when we're
452:20 - toggling the component when we're
452:22 - mounting an unmounting component the use
452:25 - effect even though it has empty
452:28 - dependency array is going to run every
452:31 - time we show the component basically
452:34 - every time we Mount the component unlike
452:36 - in this example the cleanup function
452:38 - which is only going to be mounted once
452:42 - now this is just a fact
452:45 - when it becomes an issue well if we have
452:47 - some kind of functionality that
452:48 - essentially just keeps on running
452:50 - now I picked two examples the set
452:52 - interval and the event listeners keep in
452:55 - mind that of course there are other use
452:58 - cases and essentially the main point of
453:01 - these videos is just to showcase
453:05 - how we need to be careful when we are
453:07 - toggling the component if we have some
453:10 - kind of functionality that might
453:12 - possibly lead to an issue that's when we
453:15 - need to go back and set up the cleanup
453:17 - function please keep in mind you won't
453:18 - need to set up cleanup function for
453:21 - every use effect but yes in some
453:23 - instances it's a good practice now when
453:26 - it comes to set interval basically it
453:29 - comes from vanilla just just like the
453:31 - event listeners and essentially we go
453:33 - here with set interval we want to pass
453:36 - in the function we want to invoke and
453:39 - then
453:39 - essentially the interval so in my case
453:41 - I'm going to go with one second and I'm
453:43 - not going to be too
453:46 - dramatic and I'm just going to pass here
453:49 - the log I'm going to say hello from
453:52 - interval and what do you think right now
453:55 - is going to happen
453:56 - so if I toggle the component
453:59 - I have
454:01 - is interesting okay that's what I
454:03 - expected but I also have this hello from
454:05 - interval so that's the functionality
454:08 - now where it becomes really interesting
454:10 - is when we actually
454:12 - on toggle the component notice how this
454:16 - just keeps running even though the
454:19 - component is not displayed and again
454:21 - this can lead to some serious issues
454:23 - let's imagine you're subscribing to some
454:26 - kind of service
454:27 - and essentially you still have this
454:29 - running in a background even though the
454:31 - component is not displayed anymore
454:32 - what's even more interesting the more
454:35 - times I'm going to click the faster it's
454:37 - going to go because now I'll have more
454:39 - set intervals now what is the solution
454:42 - well it's a cleanup function and the
454:46 - syntax is a little bit funky so just
454:48 - bear with me we want to go here with
454:50 - return
454:51 - and we want to return a function and
454:53 - then whatever is within this function is
454:55 - going to be invoked and I'll showcase
454:58 - when it's actually invoked and that's
455:01 - the reason why we don't want to set this
455:02 - one up as a sync like so because react
455:05 - is expecting that if you're returning
455:07 - something you're actually returning a
455:10 - function now when it comes to set
455:12 - interval it actually returns an ID so in
455:16 - here I can go to const and then whatever
455:19 - the variable and then in order to clear
455:22 - this interval we want to go with special
455:25 - method it's called clear interval and we
455:28 - want to pass in that ID again this is
455:30 - just for Interval but effectively yes
455:34 - when you have a cleanup function what
455:36 - you want to do is essentially just to
455:39 - clean up whatever functionality you have
455:41 - over here so if you're subscribing to
455:45 - some kind of service you want to
455:47 - unsubscribe otherwise it's going to be
455:49 - running in the background and now notice
455:51 - something interesting we're basically
455:54 - I'll click I'll have the hello from
455:56 - interval but the moment I hide that's it
455:59 - the interval is not running anymore and
456:01 - I can click all the time
456:03 - but
456:04 - you'll see that essentially it's not
456:07 - going to be running if the component is
456:10 - not displayed now when this one runs and
456:13 - this one is a little bit tricky where
456:16 - basically if I go here with log and if I
456:18 - say render
456:20 - and you know what let's clean out these
456:22 - logs for now
456:23 - let me comment them out you'll see that
456:25 - of course when it runs well on a show
456:28 - render right so this one we're not
456:30 - toggling only when we Mount the
456:31 - component basically when the application
456:33 - loads that's when we essentially render
456:37 - this component the cleanup function now
456:40 - if we go here inside of the cleanup
456:42 - function and if we type log and we'll
456:45 - say
456:46 - clean up
456:48 - you'll see that essentially it runs
456:53 - after this render
456:54 - and before the use effect so that's how
456:57 - we can clean up after ourselves so let's
456:59 - refresh one more time initial render
457:01 - then once we click what happens well we
457:05 - re-render this component right
457:07 - because we change the state value
457:11 - and now check it out once I'll click
457:13 - again I'll re-render and I'll clean it
457:15 - up so notice
457:17 - I have another re-render because again
457:19 - we flip the value and then I have the
457:22 - cleanup so essentially it runs after the
457:25 - render and before the use effect so in
457:28 - our case basically when the component
457:30 - and mount that's when we run it
457:33 - hopefully that is clear again this is a
457:35 - function we want to return we want to
457:37 - set up here some kind of functionality
457:39 - and
457:40 - we want to do that in order to clean up
457:43 - whatever we have in the use effect just
457:46 - so it doesn't run in the background okay
457:48 - and now let's take a look at another
457:50 - example and in this case we're going to
457:52 - use event listeners again something that
457:55 - is coming from vanilla JS and
457:58 - essentially the way the event listeners
458:01 - work in vanilla JavaScript we just go
458:04 - with the element in this case I'm going
458:06 - to go with window and then we add The
458:08 - Listener and then whatever event we want
458:12 - to listen for so in this case I'm
458:13 - looking for the scroll one and then we
458:16 - want to pass in the Callback function so
458:18 - essentially this callback function is
458:20 - going to be invoked every time this
458:23 - event fires and in our example
458:28 - we want to go over here we want to set
458:30 - up the function inside of the use effect
458:31 - and all that and then we want to attach
458:34 - that listener on the window and then
458:37 - we'll see some interesting behavior and
458:38 - of course after that we will clean this
458:40 - up because that's the main point of
458:43 - these videos so let's start over here by
458:46 - just removing everything and let's come
458:48 - up with that some funk again doesn't
458:50 - really matter what happens in here and
458:53 - therefore I'll basically leave it blank
458:55 - that's irrelevant over here so I'm just
458:57 - going to say here some logic and then
459:00 - now let's go with window again in react
459:04 - we do have access to the window object
459:06 - we go with add event listener we're
459:09 - listening for scroll and basically we go
459:12 - with comma and then some function so
459:14 - this is going to be invoked so let's
459:16 - again click and
459:18 - refresh and all that let me click over
459:21 - here notice we have the render okay
459:24 - that's what we expect what we don't
459:27 - expect probably is if we go
459:30 - to a bigger browser window and if we
459:33 - check the event listeners in tabs and if
459:36 - we refresh basically see over here that
459:39 - we have quite a few event listeners so
459:42 - let's go here notice how I toggle the
459:44 - component and once I refresh I have here
459:47 - the scroll and now notice how many I
459:50 - have over here so essentially
459:53 - every time I toggle the component I'm
459:56 - actually attaching that event listener
459:58 - on a window and again
460:00 - eventually this can lead to an issue now
460:03 - some students have complained that they
460:06 - don't see that and every time I go and
460:08 - double check in my browser I can still
460:10 - see it again you're looking for event
460:12 - listeners and then you want to refresh
460:15 - and you want to check out every time
460:18 - you'll toggle the component essentially
460:21 - the value is going to increase over here
460:24 - so you'll have more event listeners now
460:27 - if you don't see that again just trust
460:29 - me that that's the behavior so now let
460:31 - me navigate back and let's see how we
460:33 - can
460:34 - fix that issue and again we want to go
460:36 - here with the return
460:38 - a function and we want to go with window
460:42 - then the method name is remove event
460:45 - listener and in here we want to pass in
460:47 - the scroll then comma and then we want
460:50 - to pass the same function so in this
460:52 - case it's going to be some function and
460:55 - now you'll notice that
460:57 - once I refresh
460:59 - once I toggle the component and refresh
461:01 - yep I have one so that's fine but then
461:05 - once I hide the component and refresh
461:07 - notice I don't have any more of that
461:10 - scroll event and effectively that's how
461:13 - we can use the cleanup function in a
461:17 - Year's effect not bad not bad we're
461:19 - pretty much done with use effect as well
461:22 - as conditional rendering for that matter
461:25 - but before I let you go let me share one
461:29 - particularly useful resource which is
461:33 - from react docs and it essentially
461:35 - covers use effect Alternatives now
461:39 - before you start yelling at the screen
461:41 - yes there are still use cases for use
461:45 - effect so no we did not waste our time
461:48 - on learning use effect especially
461:52 - if you consider how much code out there
461:55 - is still using use effect
461:58 - now since the article is quite extensive
462:02 - I'm just going to give you a general
462:04 - gist
462:06 - you see when the react hooks came out I
462:09 - believe it was version 16.
462:12 - developers started using use effect for
462:14 - pretty much everything
462:16 - and as a side note yes
462:18 - I was one of those developers as well so
462:22 - I'm not casting any shade however
462:25 - such approach basically to have use
462:28 - effect on top of use effect can
462:30 - potentially lead to clunky code
462:32 - basically hard to read and manage as
462:36 - well as some performance issues
462:38 - so in this article the reactive is
462:41 - simply encouraging the community to
462:44 - consider alternatives before jamming yet
462:48 - another
462:49 - use effect in the component
462:51 - and if I may make a suggestion try to
462:55 - find some free time to skim through this
462:58 - resource again you don't have to go line
463:01 - by line take a look at the general ideas
463:04 - and the next time when you want to set
463:07 - up a use effect just come back to it and
463:10 - see whether there is a better
463:13 - alternative
463:14 - quite often you'll be able to achieve
463:17 - the same functionality by adding logic
463:20 - straight in the jsx or by setting up an
463:24 - extra function in the component
463:26 - lastly one major use case for use effect
463:29 - used to be data fetching something we
463:32 - already covered in the previous videos
463:35 - however as I'm recording this course
463:38 - iteration at this point in time there
463:41 - are some great libraries for example
463:43 - react query which actually allows to
463:46 - fetch data with just one line of code
463:49 - so basically without doing too much work
463:52 - we already can use less use effect
463:56 - instances in our applications
463:59 - as you can see in the code example we
464:02 - simply install the library use a custom
464:04 - hook and right away get back data error
464:08 - loading and a bunch of other useful
464:10 - stuff about our request what's more such
464:14 - libraries also take care of things like
464:16 - caching and synchronization so it's no
464:19 - surprise that they are gaining
464:20 - popularity with the speed of light
464:22 - especially for bigger projects with
464:26 - bunch of requests and yes as a side note
464:29 - we will build a project later on of
464:32 - course with react query now does that
464:35 - mean that you have to use such library
464:37 - in a small project where you have only a
464:40 - few get requests
464:42 - no I probably wouldn't do that just
464:45 - something to think about when you start
464:47 - working on your own projects simply be
464:50 - mindful and consider alternatives all
464:54 - right and up next let's talk about the
464:56 - project structure essentially I just
464:59 - want to showcase few ways how we can
465:02 - structure our project because while
465:05 - we're working on somewhat small project
465:08 - this type of approach where you set up
465:11 - the components folder or whatever you
465:13 - want to name this folder and then set up
465:16 - all your components there is awesome but
465:18 - as your project grows and you have a
465:22 - need for more files you might want to
465:25 - implement different approach and
465:28 - effectively we're going to work in the
465:31 - zero four project structure will work in
465:34 - a star one and as you can see at the
465:36 - moment it's empty and also in the app.js
465:38 - I'm not importing anything so jsx is
465:42 - empty I just have the container
465:44 - and effectively one way how we can
465:48 - set up the structure for our project is
465:51 - by
465:53 - setting up every component as a folder
465:57 - so let's imagine that we have some kind
466:00 - of nav bar component and instead of just
466:03 - setting it up as component I want to set
466:06 - it up as a folder and in there I'll
466:08 - actually have the CSS file now
466:11 - the goal here is following essentially
466:16 - as our project grows we might want to
466:19 - keep all the files that are associated
466:22 - with that component in one folder
466:25 - and in turn is just easier you don't
466:27 - have to run around your project and look
466:29 - for CSS files the test files and all
466:31 - that you know that hey this is a
466:33 - component and these are all the files
466:35 - that are associated with that component
466:38 - so let's try this one out and in the
466:41 - process we'll take a look at multiple
466:43 - approaches so in here I'm going to go to
466:46 - starter I'm going to go to a new folder
466:49 - and let's just call this navbar and in
466:53 - here we'll just set up some example
466:55 - component again
466:57 - it's really irrelevant what we have over
466:59 - there so I'm just going to go with
467:00 - navbar jsx let's create the component
467:05 - I think I'm going to change it to
467:07 - heading like so and then I'll create
467:09 - empty CSS file again it's irrelevant
467:11 - what we have over there
467:13 - just want to showcase the example so
467:15 - I'll go here with navbar and then CSS
467:17 - and of course
467:19 - if you want to test it out you can set
467:20 - up the CSS over here and you can Import
467:23 - in Napa I'm not going to do that then I
467:26 - want to go back to app jsx and I want to
467:30 - import that component again
467:32 - the goal of this setup is essentially to
467:36 - keep all the files that are associated
467:39 - with that component in one place in this
467:41 - case it's just navbar CSS but of course
467:43 - there's other things that you can keep
467:45 - over there and in the app jsx if we want
467:49 - to grab this component we simply go with
467:52 - the name of the component and we use the
467:54 - Auto Import and check it out now of
467:57 - course I have the nav bar displayed on
467:59 - the screen and again all the files that
468:01 - are associated with this particular
468:03 - component are located in one place but
468:06 - here's the gotcha
468:08 - not as this one
468:10 - we have navbar and then navbar
468:13 - and this is somewhat annoying
468:16 - where essentially yes I have a nice
468:18 - folder but I don't want to keep using
468:22 - two names here one after another which
468:24 - essentially are the same and one
468:26 - solution for that is to create here
468:28 - index
468:29 - so we're going to go over here with
468:31 - index.js and basically we can set up the
468:35 - logic here in the index.js so for time
468:38 - being I'll just copy and paste because
468:40 - we will change our logic in a second for
468:44 - now I just want to showcase that if
468:46 - let's say I go to index.js and then if I
468:50 - go back to my app one I can omit that
468:54 - nav bar now I do need to fix the
468:56 - extension my apologies I keep forgetting
468:58 - with Veet that we need to go with jsx so
469:01 - let me save Here and Now check it out I
469:03 - have the navbar so essentially we save
469:06 - that one word here so instead of navbar
469:10 - navbar since this is a node project it's
469:12 - essentially a node thing where if you
469:14 - have index in the folder that's going to
469:17 - be used as an entry point so whatever
469:20 - you have over here here is going to be
469:22 - right away exported so in our example we
469:25 - don't need to look for specific file we
469:27 - can just say Okay so get me the navbar
469:30 - folder aka the navbar component
469:34 - now what is the issue with this setup
469:36 - well if you have tons of files
469:39 - effectively it just becomes bunch of
469:41 - indexes so it's very hard to navigate
469:43 - around your tabs so let me show you a
469:47 - way how we can
469:48 - have our cake and eat it too basically
469:52 - we won't have to use that nav bar nav
469:54 - bar and we also will have a bunch of
469:57 - these indexes over here so I have the
470:00 - navbar component and I have the
470:02 - index.jsx what I can do in
470:05 - index.jsx I can import
470:08 - the nav bar and then export it as
470:11 - default so it's going to look like we're
470:13 - going to go over here export and then
470:16 - default
470:17 - and we're looking from and since it's in
470:20 - the same folder we just look for the
470:22 - navbar and if I navigate back to the app
470:26 - jsx first of all if I want to do
470:29 - something in the navbar well I'll be
470:31 - using this tab right so this is my
470:33 - component and I'm just using index to
470:36 - export that component and here nothing
470:38 - changes so if I want to grab the navbar
470:40 - component then of course I'm just
470:42 - looking for the folder and as you can
470:44 - see everything still works so we have no
470:48 - issues
470:49 - so that's how we can set up essentially
470:51 - a folder for every component and few
470:55 - ways that we can use index.js to
470:58 - simplify our workflow now let me stress
471:01 - something it doesn't mean that now you
471:04 - have to use this kind of setup for every
471:06 - project again this only makes sense
471:09 - if your project is big and you need some
471:13 - kind of structure to navigate around the
471:15 - project all right and up next let's take
471:18 - a look at another approach where we can
471:20 - set up named exports and this is
471:23 - definitely something we're going to use
471:24 - during the course but again I want to
471:26 - stress something this only makes sense
471:29 - if you have a bunch of components in the
471:33 - folder and you'll see what I'm talking
471:34 - about in a second and effectively we'll
471:37 - definitely use this one when we're going
471:39 - to work with react router because in
471:41 - that case you have quite a few pages and
471:43 - it just makes easier
471:45 - if you set up such named exports so
471:49 - first we want to navigate to the starter
471:51 - and we want to create another folder and
471:54 - in this case let's call this pages
471:56 - now inside of the pages what we want to
471:59 - do
471:59 - we want to create two pages the home
472:02 - page and the about page and little
472:05 - spoiler alert when we're talking about
472:07 - pages in react essentially we're just
472:09 - talking about the components so I'm just
472:11 - going to create here home jsx I just
472:15 - need to remind myself all the time that
472:17 - I need to go with jsx so we want to set
472:20 - this one up this is going to be our home
472:23 - page and then we want to do the same
472:26 - thing with about so about and then js6
472:31 - same there we want to create that this
472:33 - is going to be our about page and if we
472:36 - navigate back to app jsx
472:39 - I mean everything is awesome we'll be
472:41 - able to access the pages same deal we go
472:44 - here and then we also want to go with
472:47 - about so this doesn't change but notice
472:50 - how
472:51 - we're getting quite a few lines of code
472:53 - over here and imagine if you have 10
472:55 - pages
472:57 - so essentially every time you want to
472:59 - use all of them you'll have like I don't
473:01 - know 20 lines of code or something like
473:03 - that and there's a way how we can
473:06 - simplify this
473:07 - so first let me remove this number we're
473:10 - not going to need that and back in our
473:12 - Pages we can create another index.jsx so
473:16 - remember that's going to be our
473:18 - entry point over here and we can import
473:22 - or the components from this directory
473:26 - so essentially we can do like this I can
473:30 - go with home so I'm importing home and I
473:32 - also want to do the same thing for about
473:35 - like so so I'm going to go with about
473:37 - and then from the index I want to export
473:40 - that so I'm going to go with export and
473:43 - I'm going to go with home and about and
473:46 - essentially if you have 20 components
473:47 - this is what you'll do you'll import all
473:49 - of them in the index.jsx and you'll
473:51 - export and the beauty here is that if I
473:54 - go back to app jsx
473:57 - I don't have to provide the path for
474:00 - every component I can do like this let
474:04 - me remove now these ones are named
474:06 - exports so the names need to match
474:09 - that's something important so here I do
474:12 - need to go at home and I do need to go
474:14 - with about if you'll go here with
474:16 - contact or whatever it's not going to
474:18 - work so first let me just showcase how
474:20 - this works and then
474:22 - we'll take a look at the error example
474:24 - as well so now let me remove home
474:26 - because notice now we're looking for
474:28 - that index and check it out everything
474:31 - still works
474:32 - so essentially if you have 20 components
474:35 - you can nicely import them effectively
474:38 - in one line of code no I mean the path
474:40 - is a little bit longer so it's
474:42 - technically two but hopefully you see
474:44 - where I'm going with this so instead of
474:46 - using
474:47 - the import for every component we're
474:52 - going to import all of them together
474:53 - again we set up index jsx in that folder
474:57 - that's going to be the entry point and
474:59 - one by one we grab those components and
475:02 - then we export them but again keep in
475:05 - mind if you're gonna do here like this
475:07 - if you'll say hey get me the contact
475:11 - what do you think is going to happen
475:12 - we'll have big fat error right so if
475:15 - we'll save notice it says well there is
475:18 - no named export contact that's just
475:21 - something to keep in mind now you can
475:22 - set up the aliases and all that I'm not
475:24 - gonna go as deep
475:27 - in these examples we'll just stick with
475:29 - the ones that we just covered so this is
475:32 - a nice way how we can group all of our
475:34 - components together and Export them as
475:37 - named exports okay and lastly let me
475:40 - showcase how we can export group of
475:43 - components so this is going to be a
475:45 - little bit different and also a very
475:48 - useful extension glean and maybe less
475:53 - useful to some people but to me also
475:54 - very useful a code spell checker so
475:58 - first let's start with example directory
476:00 - where
476:02 - we'll take a look at how we can export
476:04 - as a group
476:05 - first I want to navigate to app.jsx I
476:07 - want to clean this up so I'm going to
476:10 - remove the existing ones then we want to
476:12 - navigate back to the star we'll create
476:14 - another
476:16 - folder and in this case the folder name
476:19 - is going to be example
476:21 - example in here let's create two more
476:24 - components
476:25 - so I'll call this first component and
476:27 - second
476:28 - as always sex jsx so let's create that
476:31 - component I think I'm going to go with
476:33 - adding two just so we can see it better
476:35 - so first component okay awesome and then
476:38 - we want to do the same thing here with
476:40 - the second one so second and
476:43 - component
476:46 - jsx okay beautiful let's create that
476:48 - awesome and then let's change it to a
476:51 - heading two so another way how we can
476:53 - export from this example essentially I
476:57 - can set up a index
476:59 - and I can import all of these ones
477:03 - what I have in the example in the jsx
477:06 - now why that would be beneficial well
477:08 - let's imagine you have some kind of
477:10 - component that is using
477:12 - for example five other components again
477:15 - instead of those components being just
477:18 - scattered around your project if you
477:20 - know that you'll definitely use those
477:22 - five components inside of that one
477:24 - component well it kind of makes sense
477:26 - you set up index.jsx you just import all
477:30 - of them and you're good to go so just to
477:33 - Showcase that we can go new file then
477:35 - remember yes index
477:38 - jsx or JS is going to be the main entry
477:42 - point so at the moment we create that
477:43 - file yep as far as the paths and all
477:45 - that it's going to point to this example
477:47 - and in here we simply want to create a
477:49 - component
477:51 - and let's call this I don't know example
477:54 - why not so let me select
477:57 - all of them and we're going to call this
477:59 - example we'll also rename this and then
478:03 - we want to import those two components
478:05 - so we want to go here with the first
478:07 - component and second component and you
478:09 - know what I think it's going to make
478:11 - more sense if I'll place a div over here
478:13 - and then one by one I'll add both of
478:16 - those components so first component
478:19 - close it here and then second component
478:22 - as well so Auto Import second component
478:25 - awesome let's save that and it looks
478:28 - like I forgot to change it over here so
478:30 - we need to go with example
478:32 - and now we simply want to go back to app
478:34 - jsx and when we want to grab that
478:36 - example folder so let's go here example
478:39 - and check it out I'll have example and
478:42 - first and second component again
478:45 - something that has a very specific use
478:48 - case you don't have to do that for every
478:51 - project but here and there it's somewhat
478:53 - Nifty and that's why I decided to add a
478:56 - two tutorial and now let's take a look
478:58 - at those two extensions like promised so
479:02 - first of all this one somewhat
479:04 - straightforward but extremely extremely
479:06 - useful for me the code spell checker and
479:08 - it's somewhat self-explanatory it just
479:12 - checks for spelling errors this is very
479:14 - useful especially if you're following
479:17 - along
479:18 - because it will right away notify you if
479:21 - your name is off now it's not looking
479:24 - for the error you're just going to say
479:26 - Hey listen
479:27 - the spelling here is incorrect and why
479:30 - I'm telling you that because quite often
479:32 - I see students
479:34 - sharing their code and I can see that
479:37 - the problem is that they used the wrong
479:40 - name in the first place let's say
479:41 - there's some kind of spelling error and
479:44 - then later on they use the correct one
479:46 - and then things don't work so I think
479:49 - it's going to be easier if I showcase
479:51 - that let's imagine that in here I'll
479:53 - have some kind of function so I'm going
479:55 - to go with const and then handle and
479:58 - change
479:59 - now everything is awesome but let's
480:02 - imagine that as I was adding this
480:04 - function instead of handle I went like
480:07 - this so right away I have this blue
480:09 - squiggly line which is going to tell me
480:11 - Hey listen I mean technically there's
480:13 - nothing wrong with your code but you
480:15 - should probably check this does this
480:17 - really make sense as I know this is
480:19 - super useful for me because I'm the
480:21 - worst speller ever and then I also want
480:24 - to showcase the glean extension and
480:27 - what's really cool about this extension
480:29 - we can pretty much take elements we want
480:31 - to set up as component and right away
480:34 - create a file so let's imagine the
480:38 - scenario in the app I have some kind of
480:41 - element let's say div and inside of it
480:44 - I'm going to have a heading three and
480:46 - I'm gonna say hello world now if I want
480:48 - to set up a separate component what is
480:51 - normally the
480:53 - path well I need to create a component
480:56 - somewhere here right then I need to grab
480:59 - the elements and then copy and paste and
481:02 - it's much faster with gleam so
481:05 - effectively I can select the elements I
481:08 - want to extract I want to click on the
481:10 - light bulb and check it out we have this
481:12 - option extract component to file we
481:16 - click we need to pick the directory my
481:18 - case I'm going to go to Source keep in
481:19 - mind but of course you can go tutorial
481:21 - for example I'm just picking the easy
481:23 - option and then we're going to go here
481:26 - with test so the file name and I'm going
481:28 - to go with jsx and notice how right away
481:32 - not only it sets up the component not
481:35 - only it Imports it but it also right
481:39 - away sets up the component file as well
481:42 - and what's really cool it even provides
481:45 - the props which is super Nifty if for
481:48 - example you're iterating over the list
481:49 - and then you're passing in some props
481:51 - into the elements you can essentially
481:55 - right away set it up as a component and
481:59 - extract it again super super useful
482:02 - extension we save it over here and
482:05 - notice
482:06 - the result did not change however this
482:09 - is much faster and effectively this
482:12 - concludes the project structure
482:15 - section and up next I want to talk about
482:18 - how we can leverage JavaScript in react
482:22 - all right and up next let's talk about
482:25 - how we can leverage JavaScript basically
482:28 - how we can use JavaScript to fix issues
482:31 - if the data is missing and if you're a
482:35 - little bit confused on this entire topic
482:38 - don't worry as we're going to be working
482:40 - through the examples you'll see what I'm
482:42 - talking about first notice over here
482:45 - that in the app I'm not importing that
482:47 - and I'm doing that on a purpose because
482:49 - we'll set up everything from the scratch
482:51 - so let's navigate to tutorial and we'll
482:54 - right away start with the challenge and
482:57 - as you can see the further we get in
482:59 - tutorial the more challenges we have
483:02 - because now I want you to utilize
483:04 - everything that we have learned so far
483:06 - and in this video or
483:10 - more precisely in this section so most
483:13 - likely in the following video will rely
483:15 - heavily on optional chaining and if
483:19 - you're not familiar with this topic
483:21 - please utilize this
483:24 - JavaScript nuggets video now I do have
483:27 - the info also in the readme so if you
483:30 - don't feel like watching the video you
483:32 - can just scroll down in the readme as
483:34 - well so first I want you to navigate to
483:37 - zero five leverage JavaScript and you're
483:41 - looking for the starter
483:43 - and in there we basically want to set up
483:45 - the component now before we set up the
483:47 - component I just want you to navigate to
483:50 - data.js and take a look we have this
483:54 - people array so this is what we're going
483:57 - to be importing into a list one so
484:00 - whenever I say people just think of this
484:03 - array and as you can see in here we
484:05 - basically have list of objects and each
484:10 - object represents the person and the
484:13 - question here is that some object
484:17 - have the properties for example nickname
484:19 - and the images URL and some don't and
484:24 - before you wonder why is that the setup
484:27 - because this is I wouldn't say quite
484:30 - typical but don't be surprised if you
484:33 - work with an API and that's the case
484:35 - again I'm not saying that every API has
484:37 - this issue where basically the data is
484:39 - missing but you will run it through some
484:42 - instances where essentially yes
484:44 - some items have certain properties and
484:48 - some don't and also it happens quite
484:50 - often when you work with headless cmss
484:52 - essentially a nice graphical interface
484:56 - where you can add your own data and for
484:58 - some weird reason let's say you forgot
485:00 - to add that data that quite often
485:03 - happens with an images trust me on this
485:05 - one for sure and if you're wondering why
485:07 - we have this weird nested structure
485:09 - again when it comes to images don't be
485:13 - surprised if you actually see this in
485:15 - the real world it's not as
485:18 - flat as you might expect so you're not
485:21 - going to have a bunch of items with just
485:23 - okay name nickname and image no when it
485:27 - comes to real apis yes you have this
485:30 - nested sometimes weird structure so the
485:34 - sooner we get comfortable with that the
485:36 - better it's going to be in the long run
485:38 - so hopefully this is clear hopefully you
485:40 - haven't turned off
485:42 - since I was just ranting here about the
485:44 - array and now let's navigate back so
485:47 - effectively this is the challenge we
485:50 - want to create a new component I'm going
485:52 - to call this list call this I don't know
485:55 - orange still going to work and in the
485:58 - list I want to import the people all
486:01 - right again from the data I just showed
486:03 - you and I just want you to iterate over
486:06 - and render name that's it let's just
486:09 - start very simply
486:11 - we'll display the name now once
486:14 - everything is correct once you can see
486:16 - the name in the browser
486:18 - after that I want to set this one up in
486:21 - a separate component basically what
486:23 - we're turning and this is a good use
486:25 - case to try glean extension now you
486:28 - don't have to but I will I'll just
486:30 - showcase how the extension works and
486:33 - then in the person try to render all
486:36 - three properties and I'm sorry this is a
486:38 - mistake we're not going to be looking
486:40 - for a sister we're going to be looking
486:41 - for the image so initially when I was
486:45 - building this example I used sister but
486:47 - in fact we're looking for the image and
486:49 - as far as your question do I effectively
486:52 - need to get this URL yes you're
486:55 - absolutely correct so in order to show
486:57 - the image you'll have to figure out how
487:00 - to access the URL which is quite nested
487:04 - as you can see
487:05 - and if everything is correct yes there
487:08 - will be a bug effectively that's the
487:10 - point of these videos to show you how we
487:13 - can avoid such bugs so try to work on a
487:16 - challenge and whenever you're ready to
487:18 - compare the results resume with the
487:21 - videos Okay so let's start cracking
487:24 - first I want to navigate to the star and
487:27 - I'm going to create that list so as you
487:29 - can see the star is empty and I simply
487:31 - want to go list j s x in here let's grab
487:36 - the data
487:38 - so we're looking for people array in the
487:41 - data I'm pretty sure it's going to give
487:44 - me an auto import so I just want to set
487:46 - up the list first and then inside of it
487:49 - I want to iterate over data so where I
487:52 - have the div I'll simply go with an
487:55 - expression and I'll try to type people
487:58 - and if everything is correct I should
488:01 - see them yep as you can see everything
488:04 - Works nicely now I have the people okay
488:07 - that's good it's going to be an array so
488:09 - I do want to iterate over
488:11 - so let's go here with map and I'll
488:14 - reference each and every item as a
488:16 - person and then as far as the return
488:18 - like I said simply for now we want to go
488:21 - with person.name because that's the
488:23 - property that all of the items have as a
488:27 - quick send out
488:28 - when it comes to key you can actually
488:31 - use the name in this case as well so
488:34 - remember all this time I've been showing
488:36 - you following approach where if you have
488:39 - the div or whatever element you want to
488:41 - return
488:42 - um if this is where we're iterating we
488:45 - want to go with key of course and then
488:46 - we want to go with that unique one so up
488:49 - to this point all the time we have been
488:50 - using the ID keep in mind that in this
488:53 - case let's imagine that we don't have
488:56 - the ID over here
488:58 - we're still loving the name and at least
489:01 - in this case since I have four items all
489:04 - of them are unique so yes
489:06 - you don't always have to go with ID but
489:09 - it's going to be somewhat common because
489:11 - with the case of ID it's always going to
489:14 - be unique so here I set up the key it's
489:16 - going to be equal to person ID and then
489:19 - I want to render that I want to go with
489:21 - person dot name let's save it now I want
489:24 - to navigate back to app jsx I think I'm
489:27 - just gonna do it right after the hearing
489:30 - 2 because why not and in here I'm
489:32 - looking for less than again I'll rely on
489:35 - the Auto Import like I said if
489:37 - everything is correct this is what we
489:39 - should see on the screen
489:41 - great start and now let's navigate back
489:44 - to the list and now try to set up this
489:47 - one as a separate component now if you
489:50 - want you can create the file yourself
489:52 - and all that or you can utilize the
489:56 - extension I showcased I believe in the
489:59 - previous section
490:01 - basically which one was that this one
490:04 - over here the project structure so I
490:06 - want to hover over it I'm looking for
490:08 - that light bulb and I want to go here
490:10 - with extract component to the file and
490:14 - in here we just need to look for the
490:16 - correct path we need to make sure that
490:19 - this is the one that we click okay
490:21 - awesome we want to create a new file and
490:24 - we want to come up with a name so in my
490:27 - case I'm going to call this person and
490:29 - then j s x and check it out again we
490:33 - right away have the import we right away
490:35 - have the component and then if you check
490:37 - the person notice we right away have the
490:41 - prop set up as well now as you can see
490:44 - there are some issues here so basically
490:47 - either all I have to pass the person
490:49 - from the list or in my case since I'm
490:53 - going to be spreading out I'm actually
490:54 - going to remove these values over here
490:56 - so it's not perfect but at least it gets
491:00 - us halfway correct so let's just
491:02 - navigate back and in here essentially
491:05 - again I want to set up that key so I
491:08 - guess this is the case where I can just
491:11 - simply grab this one
491:13 - over here person and like I said we can
491:17 - use the name over here like so and then
491:21 - after that I want to pass the entire
491:23 - person
491:25 - so I'm going to be spreading out all of
491:26 - the properties we can most likely save I
491:30 - believe and then back in the person
491:33 - I'm not going to be accessing person in
491:35 - such a way
491:36 - I'm gonna go one by one so I'm going to
491:39 - go with name then I'm also looking for
491:41 - nickname that's the second property that
491:44 - I want to showcase and I also want to
491:47 - get that URL
491:49 - now in order to access that URL what
491:53 - I'll have to do well I'm gonna go with
491:55 - images correct since that's the array
491:58 - over here
492:00 - and for now let's just leave it the way
492:02 - it is and let's decide what are we gonna
492:05 - be returning so in here there's going to
492:08 - be a div and let's just try it out with
492:11 - a name because like I said there's going
492:13 - to be a bug So eventually we'll have an
492:16 - error so for now let me just see whether
492:18 - everything works yep so I can nicely
492:20 - display the name now let's go with
492:22 - nickname so right after that we want to
492:24 - go with paragraph and I'm going to come
492:27 - up with whatever value so nickname and
492:30 - as I say note this is now what I wanted
492:32 - to do
492:33 - so let me just take this one out
492:36 - and then I'll place it here before the
492:39 - curlies and now let me access the
492:41 - property
492:42 - and we already have a little bit of
492:44 - issue where notice only the stud muffin
492:47 - is displayed since only Bob as this
492:51 - particular property and again this is
492:53 - something that we're gonna fix in the
492:55 - following video and when we'll
492:58 - definitely get a bug is when we'll try
493:01 - to get the image now I'll purposely
493:03 - access it above since it's just going to
493:07 - save me essentially setting up the whole
493:10 - thing in the jsx so if I have a bunch of
493:14 - nested properties essentially that is my
493:16 - preference where I do it above the jsx
493:19 - keep in mind that of course you can do
493:20 - it in the GSX as well as far as the
493:23 - alternative I'm going to go here with
493:24 - the name and I'm sorry I forgot to
493:27 - actually mention a
493:30 - tiny suggestion you probably want to go
493:32 - with a small width my bad so let's go
493:34 - here so if you have massive images just
493:37 - add in-line Styles like I'm doing right
493:39 - now so we're looking for 50 pixels and
493:42 - now let me grab that image so let's go
493:45 - over here const I'm going to call this
493:47 - IMG and whatever we want to do well we
493:50 - want to go with images correct that's
493:51 - the area over here and
493:54 - I'm looking for the first item
493:56 - and there I'll have the small so that's
493:59 - the object itself and then in there I
494:01 - have the URL so one by one let's
494:03 - navigate there again we're looking for
494:05 - the first item
494:06 - then I want to grab the small object in
494:10 - there
494:11 - I'll have the URL property and that is
494:13 - going to be equal to my image and let's
494:16 - try to access it over here
494:18 - and like I said we'll have big fat error
494:21 - so in the following videos
494:24 - we'll work on these errors and we'll see
494:26 - how we can leverage straight up
494:29 - JavaScript
494:30 - to fix it and have something displayed
494:33 - on screen and before we cover the
494:36 - solution let me just quickly mention
494:38 - that in the readme you'll find info on
494:41 - default values
494:43 - and also the optional training so
494:47 - both features will implement
494:50 - in this video and if you want to find
494:52 - out more info if you're not familiar
494:54 - with them you can always utilize the
494:57 - readme so back in the person
495:00 - let's start with the nickname that's
495:01 - going to be a little bit easier so let
495:04 - me just comment out the image just so we
495:07 - don't have that massive error and notice
495:10 - over here we still have it because of
495:12 - course I am also accessing the image
495:15 - over here so I'll have to do it in two
495:16 - places let's comment this one out and
495:18 - for now let me just remove those
495:20 - messages
495:21 - and as far as the nickname what is the
495:24 - issue well again
495:25 - not all of them have that property
495:27 - what's the solution well one of the
495:30 - solutions is obviously to use the poor
495:32 - Operator just like we covered in
495:33 - conditional rendering correct
495:36 - so I can go here and say shake and bake
495:40 - and what do you know now all of them
495:42 - have at least some kind of value
495:44 - okay that's good but we can also utilize
495:47 - the fact that when it comes to functions
495:49 - in JavaScript we can provide right away
495:52 - a default value
495:54 - so if you're setting up a function and
495:59 - you're passing in the parameter you can
496:02 - also provide a default value just in
496:04 - case it's not provided shown here I know
496:08 - that I'm going to be looking for a
496:10 - nickname however if it doesn't exist
496:12 - what can we do well you can set it equal
496:15 - to shake and bake
496:19 - and what do you know now the result is
496:21 - going to be exactly the same again this
496:23 - is just straight up JavaScript something
496:25 - that you can utilize as you're setting
496:28 - up your react components now the second
496:31 - one is
496:32 - sort of the same the problem again we're
496:35 - having in here if we comment out we have
496:39 - that annoying
496:41 - error which essentially says hey you
496:44 - cannot access
496:47 - the properties from nothing
496:50 - why well because if we go back again
496:53 - only the third item has the images
496:58 - so if I'm trying to do this for Bob
497:00 - Pierre and all that it's not going to
497:03 - work
497:04 - so what word can do well we can do it
497:07 - the long way so bear with me I'll show
497:10 - you basically what we were doing before
497:12 - the
497:15 - optional training and then I'll show you
497:17 - effectively why optional chaining is so
497:20 - cool
497:21 - and the way it worked before
497:24 - we simply needed to
497:27 - repeat bunch of and operators
497:30 - so in here I'm going to go with image
497:32 - and I don't think I'm going to leave
497:34 - this one for your reference I don't
497:36 - think there's any need so first I go
497:39 - with images and I'll say listen
497:42 - if the images exist then look for the
497:45 - first one
497:46 - so essentially I'm using the N1 now if
497:50 - there is a first one then I'll look for
497:53 - small so essentially one by one you just
497:55 - keep repeating them so what I'm saying
497:57 - here is if images exist get me the first
498:00 - one now if the first one exists then get
498:04 - me the small property so in here I just
498:07 - want to take this copy and paste and yep
498:10 - I want to say hey
498:11 - if it's there then grab me the small one
498:14 - and you can probably already guess that
498:16 - yes in order to get the URL what do we
498:19 - need to do we need to copy and paste and
498:22 - then we need to just chain essentially
498:24 - here this URL like so so we grab it here
498:29 - and notice how we nicely don't have the
498:32 - error so essentially if I refresh I'll
498:35 - see no errors in console and also
498:40 - the one that has the image
498:43 - is going to have that in the jsx as well
498:45 - so once we save notice I have
498:49 - person displayed now rest of them don't
498:51 - have it
498:53 - so that's something that we need to work
498:54 - on but at least the one that has the
498:56 - image well I'm nicely rendering that in
499:00 - the jsx
499:01 - and essentially let's first worry about
499:05 - how we can shorten this code and then
499:08 - we'll worry about how we can display at
499:10 - least something in the browser so first
499:14 - yes this is awesome
499:16 - but I mean it would be nicer if we could
499:19 - just get it done in less lines of code
499:23 - essentially less characters and the way
499:26 - we can do that is by using optional
499:29 - chaining in JavaScript so here we go
499:32 - with const and then again IMG and if
499:36 - you're wondering this code is going to
499:38 - be again located in the readme so you
499:41 - can always reference it so we want to go
499:43 - here with images and then we just go
499:44 - with question mark
499:46 - and if
499:48 - the property
499:50 - exists basically if it's not null then
499:53 - everything is good if not then we'll
499:55 - right away just get undefined this is
499:58 - also awesome where we don't have that
500:00 - annoying hey you cannot get properties
500:02 - out of null so essentially what I'm
500:04 - saying here if images exist awesome get
500:07 - me the first one if that exists then get
500:10 - me small if that exists then actually
500:13 - get me the URL now
500:16 - this is great but it doesn't solve the
500:19 - issue
500:20 - where at the moment notice only one of
500:22 - them has the image and it's probably a
500:26 - nicer setup if you have at least some
500:29 - kind of default image correct and not to
500:31 - do that
500:32 - you actually need to look at the assets
500:34 - and you'll see that I provided some SVG
500:38 - and yes basically this is something that
500:40 - you'll need to set up manually yourself
500:42 - whether that is in the cloud Mary
500:45 - whether that is locally
500:46 - you'll need somewhere a default image so
500:49 - in my case that's the default Avatar in
500:52 - the asset so now let's navigate back to
500:54 - the person and we want to import that
500:56 - now please keep in mind that we're
500:58 - sitting in a source so we need to import
501:01 - we need to name the variable and then we
501:05 - need to provide the path so in this case
501:07 - I'm going to go with this one I'll call
501:09 - this Avatar and then from and now let's
501:13 - go one level up then two levels up three
501:16 - levels up we're looking in the assets
501:19 - and we want to go default and then
501:21 - Avatar and then SVG
501:25 - and now we can utilize the or operator
501:27 - where I can say Hey listen check four
501:31 - Images check for the first one check for
501:33 - small and URL and if it's there awesome
501:38 - return this one if not well just set it
501:42 - equal to my default Avatar and what do
501:45 - you know now we have a list and if the
501:49 - item doesn't have the image at least we
501:51 - display something now quite often as
501:54 - you're looking at the optional chaining
501:56 - code you'll see this approach as well
501:59 - where essentially let me comment this
502:02 - one out
502:03 - and you'll see this one and effectively
502:06 - this operator let me go back to read me
502:10 - I left it here for your reference so
502:13 - it's this one that's the operator you're
502:16 - looking for now I'm not gonna go into
502:18 - great detail what's the difference there
502:20 - extremely similar uh if you're
502:22 - interested then please utilize the
502:24 - search engine again
502:26 - instead of the or you'll see these two
502:29 - question marks and that's this operator
502:32 - and if you want to find out more info
502:34 - just please go to your favorite search
502:37 - engine and pretty much we're done with
502:39 - the challenge as you can see we can
502:41 - utilize straight up JavaScript
502:44 - to essentially fix the potential bugs
502:48 - that we might encounter once we start
502:50 - working with apis and I know that some
502:53 - of you think this is totally weird
502:55 - example there's no way there would be
502:57 - such structure and then there's no way
502:59 - that properties would be missing I mean
503:02 - he's totally making this up and again I
503:04 - don't want to be a bearer of bad news
503:07 - and I'm not saying that every API is
503:10 - going to have the issues but once you
503:12 - start working with external apis just be
503:15 - prepared that structure
503:18 - might not be what you
503:21 - expect it's going to be pretty nested I
503:24 - can tell you that right from the get-go
503:25 - and also here and there properties are
503:29 - going to be missing so if you ever seen
503:31 - a console JavaScript complaining that it
503:34 - cannot access certain property right
503:36 - away think ding ding ding ding ding
503:38 - there's a property missing so even
503:41 - though I'm expecting something
503:43 - back from the API and I'm trying to
503:47 - render it here
503:48 - well it's not coming through and as far
503:52 - as suggestions my always suggestion is
503:55 - to limit the amount of items you're
503:58 - rendering so if I hit this bug yes one
504:01 - by one effectively I comment out the
504:04 - stuff and then I go back and check which
504:06 - value is missing so normally I would log
504:09 - the person back here in the list and
504:12 - then I would go over where potentially
504:15 - that property might be missing just to
504:18 - Showcase that if we go here with log in
504:20 - person we'll right away see that only
504:22 - some of them have those values now of
504:25 - course this is somewhat simple example
504:27 - where I right away can see that but
504:29 - normally this is the place where at
504:32 - least I can start working on the problem
504:35 - because this is going to give me at
504:37 - least the idea of what data I'm getting
504:40 - back awesome and next let's talk about
504:44 - forms in react and we're going to start
504:48 - working in this folder so we're going to
504:51 - go to zero six forms and we'll start
504:54 - with the first file however
504:57 - since I want the examples to look
504:59 - somewhat nice
505:01 - we'll spend the first video just by
505:03 - setting up the form with some
505:07 - classes and labels and all that now if
505:10 - you're not interested in doing that just
505:13 - navigate to the readme look for
505:16 - controlled inputs and basically copy and
505:19 - paste this content so this component
505:22 - copy and paste and set it up in the
505:24 - controlled input essentially that's
505:26 - going to be the first step now don't
505:28 - worry we're not going to do that pretty
505:30 - much for every file
505:32 - I believe we have all here five of them
505:35 - so essentially in the next videos we'll
505:37 - just reuse this nice looking form
505:41 - so first I want to navigate to app jsx
505:44 - like I said we're looking for zero six
505:46 - forms then starter and then controlled
505:48 - inputs so that's what I have on the
505:50 - screen now let's navigate over here
505:53 - and effectively we just want to set up a
505:57 - form and if you're wondering where the
505:59 - classes are coming from that I'm about
506:01 - to use well they're located over here
506:04 - so if you look here in this file let's
506:07 - say if we search for class of form
506:10 - you'll see these Styles and then same
506:13 - goes for label input and all that so if
506:15 - you're interested of course
506:16 - you can navigate over there and see what
506:19 - styles I'm setting up
506:22 - so let's go over here in the controlled
506:24 - inputs we'll remove the heading 2. and
506:28 - effectively we're going to return a
506:31 - formal ad right away a class form as
506:34 - well
506:35 - inside of it let's place a hitting four
506:38 - and let's say controlled input so that's
506:41 - going to be our first topic after that I
506:45 - want to set up a div with a classiform
506:47 - row and you can think of it as a divider
506:49 - so it's just going to add some nice
506:52 - margin so let's go here with div let's
506:55 - add a class of form
506:56 - row and then inside of it first let's
507:00 - set up a label again it's just a HTML
507:02 - thing and notice over here it's going to
507:05 - give this html4 so that's the HTML
507:08 - attribute by the name of four and you
507:11 - add that to the label and then once you
507:13 - click on the label then it nicely sets
507:16 - the input in the focus and you'll see
507:18 - once we set it up how it works so in
507:20 - here we want to provide the ID so
507:22 - whatever ID we're about to set up on the
507:25 - input so I know that my one is going to
507:26 - be named so of course I'm going to set
507:28 - this one up as name then we want to type
507:31 - the text inside of the label and you
507:35 - know what there's one thing missing and
507:37 - that is the class
507:38 - and for that we want to go with form and
507:41 - label then we want to go with that input
507:44 - and we'll start with the most basic one
507:47 - the text input so let's go here let's
507:50 - look for text name for now let's leave
507:52 - it blank because I want to show you
507:55 - what is going to be the use case so for
507:58 - now let's not worry about it but yes
508:00 - eventually we will use it and then here
508:02 - we want to go with name so again these
508:05 - two need to match and in react it's
508:08 - html4 in normal HTML it's going to be
508:11 - just A4 attribute and we do want to add
508:16 - here a class so we'll go with class name
508:19 - and that is going to be perform input
508:22 - let's save it and this is what we should
508:24 - see on the screen and again if these two
508:26 - match then basically what happens notice
508:28 - once you click on a label
508:31 - it nicely sets the
508:34 - Focus for the input and
508:37 - since I also want to set up one for
508:39 - password or email sorry password is
508:41 - coming up for now let's just go with
508:43 - email and we want to change those values
508:45 - so everywhere where I have the name I'll
508:48 - set it up as email and as far as type
508:51 - yes it's also going to be an email so
508:53 - let me select over here
508:55 - let me go to email let's say that okay
508:57 - we have the second input and lastly
508:59 - let's just add that submit Button as
509:02 - well so for that we want to go button
509:04 - then we want to go with type and submit
509:08 - and in here let's go with class name ptn
509:11 - again Global button class and then we
509:15 - want to go with BTN block which just
509:17 - stretches
509:18 - that button
509:20 - to the size of the container in this
509:22 - case form and as far as the text I'm
509:24 - going to go with sub emit let's save
509:27 - that and we're pretty much good to go so
509:30 - this is going to be our setup for the
509:33 - remaining videos in this section
509:36 - and of course in the next video also set
509:38 - up the functionality for now we just
509:40 - have a good looking form okay and now
509:43 - let's start working on controlled inputs
509:46 - and essentially when you hear controlled
509:48 - inputs just think that there's going to
509:51 - be a state value now it can be one value
509:54 - which represents all of the inputs
509:58 - something we're going to cover a little
509:59 - bit later or it can be a case where each
510:03 - input is going to have
510:06 - a state value that is associated with
510:09 - that input and as you're changing the
510:11 - value in the input
510:13 - you're automatically also changing the
510:16 - value in the state
510:17 - and then in turn the input shows the
510:20 - state value and if this is somewhat
510:23 - confusing just think of it this way
510:24 - basically whatever we're going to be
510:26 - typing this is going to be added to the
510:28 - state value and then whenever you're
510:30 - ready to submit the form you can just
510:32 - grab that state value and do whatever
510:34 - you need to do whether that is to post
510:37 - some data on a server or to set up some
510:40 - kind of functionality and hopefully you
510:42 - see where I'm going with this so if this
510:44 - sounds a little bit confusing again just
510:46 - bear with me basically like I said we
510:48 - want to start by setting up State values
510:51 - and in this case we'll do a state value
510:54 - for each input later yes we'll combine
510:57 - all of them in one so for that we just
511:00 - need to go with your state and
511:03 - since I have name and email it kind of
511:04 - makes sense if I name my state values
511:07 - the same correct so I'm going to go here
511:09 - with name and then set
511:11 - name and that is going to be equal to
511:13 - use and state that's what we want to set
511:16 - it up over here and we'll start with an
511:18 - empty string because this is what we
511:20 - have in the input and then we want to
511:23 - change it around where this is not going
511:26 - to be name
511:27 - it will be email and then we're looking
511:31 - for set an email
511:34 - so this is our initial setup and then we
511:37 - want to set up a function that is
511:40 - actually going to be invoked every time
511:42 - the user is going to type something in
511:44 - the input and remember in the react
511:47 - fundamentals we covered that the event
511:49 - that we want to add to the input is on
511:52 - change so as the user is going to be
511:55 - typing something in the input we will
511:58 - invoke the Callback function which of
512:00 - course we need to set up first so let's
512:02 - go here and let's say const and then
512:05 - handle
512:06 - and I'll change that's going to be my
512:09 - function and remember that we right away
512:11 - have access to the event object there
512:14 - and for now let's just leave it blank
512:16 - and then when it comes to input if we
512:20 - want to set up controlled input on each
512:22 - input we need to add two things
512:25 - we need to add a value
512:27 - and this needs to be basically equal
512:31 - to that state value so I'm going to go
512:33 - here with name and second one is that on
512:36 - change and yes both of them need to be
512:38 - there
512:39 - otherwise it's not going to work so in
512:42 - here I'm going to go on change and then
512:45 - I want to pass in the Callback function
512:47 - correct so I'll go with handle change
512:50 - and save it now the last thing
512:54 - that we want to do is to set up the
512:56 - functionality and if you remember in
512:59 - react fundamentals I said that we have
513:01 - access to the event object and from
513:04 - there we can get tons of cool things the
513:07 - two most important ones I guess the ones
513:10 - that we're going to use the most in the
513:11 - course are
513:12 - event.target.name and event.target.value
513:17 - now for now we don't have the name and
513:19 - I'll showcase that basically we'll get
513:21 - an empty string but we'll definitely get
513:23 - the value
513:24 - so let's go over here
513:25 - let's say log
513:27 - and we want to go with event dot Target
513:31 - dot name copy and paste and we also want
513:34 - to set up the value and for this I'll
513:37 - actually move to the bigger browser
513:39 - window because I do definitely want to
513:41 - showcase the state so this is going to
513:43 - be the form on a bigger browser window
513:45 - and if we inspect
513:48 - the components right away see the
513:50 - controlled inputs okay awesome notice
513:52 - our two State values so they do exist
513:55 - and then as I'm going to be typing I'm
513:58 - going to get two things first one is
513:59 - going to be empty because there is no
514:01 - name set on the input our second one is
514:04 - going to represent whatever the user has
514:07 - typed now notice something interesting
514:09 - though we're not persisting this value
514:11 - input so this will always stay empty
514:14 - string why well take a look
514:17 - because our state value is an empty
514:19 - string
514:20 - so when we're setting up controlled
514:22 - inputs that's why we need
514:24 - all of those things we need a state
514:26 - value we need both of those
514:29 - attributes on the input we need the
514:31 - value as well as the on change and in
514:34 - the Callback function this is where
514:37 - we'll update the state value
514:39 - how we can do that well we can use set
514:41 - name correct and again keep in mind this
514:45 - is going to be empty if there is no name
514:48 - attribute and later we'll set up the
514:50 - name attribute and we'll use it but I
514:52 - definitely want to showcase that if
514:54 - there is no name attribute then I mean
514:56 - it's just going to be empty so I'll
514:58 - leave these ones for your reference
515:01 - and here's what I want to do I'm going
515:03 - to go with set name and then I want to
515:06 - grab whatever I have in the value so
515:09 - let's involve that and let's say event
515:11 - dot Target dot value and now the
515:14 - interesting thing is going to happen
515:17 - so we have the state value we have the
515:19 - on change and as the user is typing
515:21 - we'll be setting the state value equal
515:25 - to whatever is in the input and then in
515:29 - turn we use that value here to display
515:32 - it in the form so check it out here and
515:35 - I think again I'm going to use the
515:37 - bigger browser window just so you can
515:39 - see that we're definitely updating that
515:41 - state value now check it out essentially
515:43 - whatever I have in the form gets here
515:46 - has a state value and that's why
515:50 - I can see that in the form as well so
515:52 - hopefully this makes sense okay so that
515:55 - should do it for the first controlled
515:57 - input but what about the second one what
516:00 - about the email
516:01 - because as you can see at this point
516:03 - we're just updating the name so if I'll
516:06 - add this handle change to the email I
516:08 - mean it's not going to work
516:10 - even though I can add the email as a
516:14 - value
516:14 - to the input I mean in here I have set
516:18 - name not set email
516:20 - so what are our options well we can set
516:23 - up another function so let's say we can
516:25 - rename this so it's not generic I can
516:27 - say handle name change and then for the
516:30 - email of course I'm going to go handle
516:32 - email change or we can use the error
516:35 - function and effectively
516:37 - this is totally up to you if you have
516:40 - more logic then of course it makes sense
516:43 - that you set it up here as a separate
516:46 - function however if you're just passing
516:50 - event.target.value then we also have
516:53 - this option where instead of the handle
516:55 - change which by the way you can always
516:57 - find it in the readme and therefore just
517:00 - so it's cleaner I'm going to remove
517:03 - what we can do here is set up our Arrow
517:06 - function remember we do need to grab the
517:09 - event so that doesn't change and then
517:12 - invoke set name directly here so I can
517:16 - go here with email dot Target dot value
517:21 - and you guessed it correct
517:24 - for all the inputs we basically need to
517:27 - repeat these two steps we need to set up
517:29 - the value I mean considering that you
517:32 - already have the state value
517:34 - we need to set up the value and we need
517:36 - to set up the on change and then in the
517:38 - on change we just go with set and then
517:42 - whatever is the name of the input so
517:45 - let's go here
517:46 - let's keep on moving this is going to be
517:48 - my input I want to copy and paste again
517:51 - these are different values so it's not
517:53 - going to be named it's going to be email
517:55 - and the function is also going to be
517:58 - email let's save that and again let's
518:02 - navigate to the big browser window and
518:05 - if I'll type over here
518:06 - let's say some kind of dummy email
518:10 - doesn't look like it works here
518:12 - maybe just needs a little nudge let me
518:15 - try right now John
518:16 - and as you can see now everything works
518:19 - so now both of them are controlled
518:21 - inputs and essentially our workflow is
518:23 - going to be we'll set up value and on
518:26 - change and then we'll set up the on
518:29 - submit as well so let's navigate
518:32 - where we have the state values
518:35 - and let's just add a on submit on the
518:38 - form
518:40 - and let's
518:41 - create a handle submit
518:44 - so I just need to create that function
518:46 - handle
518:48 - submit and
518:49 - hopefully you remember from the
518:51 - fundamentals that again we have access
518:53 - to the event object and in here the
518:55 - first thing we want to do is prevent the
518:57 - default Behavior so we invoke prevent
519:00 - default and then we can do something
519:02 - again at the moment we're not going to
519:05 - do anything in this video but
519:06 - technically this is where you post to
519:09 - the server where you do something with
519:11 - the value so say do something and
519:14 - essentially we just want to access both
519:17 - of the values so in my case I'm just
519:18 - going to log it so I'm going to say
519:20 - name
519:22 - and email and once I save
519:26 - notice how I can nicely type so John and
519:29 - then John at gmail
519:31 - and once I click on submit and check the
519:34 - console notice I have both of the values
519:37 - I have the John as well as the email so
519:40 - essentially that's how we can set up
519:42 - controlled inputs in react beautiful and
519:46 - once we're familiar with controlled
519:48 - inputs why don't we work on a small
519:51 - challenge and first what I want you to
519:53 - do if you haven't done that already go
519:56 - to app jsx and look for zero two user
520:01 - Challenge and this is what you should
520:03 - see on a screen
520:06 - basically I prepare the form now I
520:09 - didn't set up any functionality again
520:11 - it's just a straight up form you'll have
520:14 - to do all of the work and as you can see
520:16 - in this case we're just using one input
520:19 - that's it that's pretty much the only
520:22 - difference and as far as the challenge
520:25 - well it's following so first
520:29 - create a control input
520:32 - and in my case I'm going to call this
520:33 - name and you'll see why it actually
520:35 - makes sense then set up on submit
520:39 - basically for now just a placeholder
520:41 - don't worry about the logic yet
520:44 - if you can log
520:46 - that user has submitted the form
520:48 - basically if you have prevented the
520:51 - default and all that you're in good
520:53 - shape so first set up those two things
520:56 - then I want you to import data array
521:00 - from data
521:01 - and just to drag our memory so we're
521:04 - here so this is what we want to get
521:08 - we want to get this data array and
521:10 - that's why we'll go with name input
521:11 - because this is the property we have in
521:14 - the object and once you have
521:16 - successfully imported the data set up
521:19 - another state value in my case I'm going
521:21 - to call this users and set the array as
521:26 - a default value and I'm purposely being
521:28 - somewhat vague because we have covered
521:31 - all of these things already then I want
521:34 - you to iterate over
521:36 - the list and display right after the
521:39 - form so if we navigate to the user
521:42 - challenge notice this comment over here
521:44 - so this is where I want you to display
521:46 - the users that are in the array again
521:50 - don't worry about the CSS if you can see
521:53 - the name
521:54 - correctly displayed in a browser you're
521:57 - in good shape
521:58 - and at the very end we want to set up
522:00 - following functionality when the user
522:02 - submits the form
522:04 - add a new person to the list now
522:09 - if you find this one easy you can work
522:12 - on extra challenge where I want you to
522:15 - add a button
522:16 - to whatever we're returning basically
522:19 - the item and set up the functionality to
522:23 - remove the user from the list
522:26 - so if you're interested work on this
522:28 - Challenge and once you're ready to
522:31 - compare the results resume with the
522:33 - videos Okay so let's get cracking first
522:36 - I'm going to navigate to the user
522:37 - challenge
522:38 - and I'll create those State values
522:41 - basically I know that I'll have two of
522:44 - them so
522:45 - while I'm setting up one I might as well
522:48 - set up the second one so name and then
522:50 - set name that is equal to use
522:54 - State let's pass in the empty Value
522:57 - First copy and paste then like I said
522:59 - Marcus I'm gonna go with users
523:02 - set and also when I do it over here now
523:05 - for now since I haven't imported
523:07 - anything let me just set it up as an
523:09 - empty all right let's save this and now
523:12 - I want to set up that controlled input
523:14 - so
523:16 - I need to look for my input and then
523:20 - here remember value
523:22 - that is equal to the state value and
523:24 - then the second one is the on change and
523:27 - this is going to be equal to our Arrow
523:29 - function we'll grab the event object and
523:33 - we'll go to set name and we'll pass in
523:35 - the event dot Target and then the value
523:38 - so now we have our controlled input next
523:41 - I wanna set up just the log
523:45 - when we submit the form so here notice
523:49 - Veet is pretty quick basically the
523:52 - moment you type the value it spins back
523:54 - the center don't worry you don't have it
523:56 - everything is correct and like I was
523:59 - saying we want to set up that handle
524:00 - Summit so let's go here and I'm going to
524:03 - call this handle submit
524:07 - we're gonna get the object yes the event
524:10 - object more precisely and here let's
524:13 - start with prevent
524:14 - default and I'm going to go with just
524:18 - log
524:19 - I'll say
524:21 - form
524:23 - submitted okay good and now let's
524:27 - navigate to the form
524:29 - and then let's set up on submit
524:31 - beautiful and let's pass in the handle
524:34 - submit let's save that and if everything
524:37 - is correct we should see form submitted
524:40 - awesome
524:41 - and once we have this setup in place now
524:43 - let's grab that data so let me try here
524:46 - whether I can actually do it data and
524:50 - nope that doesn't give me anything okay
524:52 - let's grab it from the file so import
524:54 - data and then from and now we need to go
524:59 - quite a few levels up so one two and
525:01 - then this should be coming from the data
525:04 - let me just double check quickly so data
525:07 - data yep that's the correct one probably
525:09 - not the best naming but as I was setting
525:12 - up
525:13 - that's the one that I used so this is
525:15 - going to be our default value for the
525:18 - users and now let's navigate over here
525:21 - where we render and then like I said
525:23 - right after form we're gonna go users
525:26 - and now let's iterate over those users
525:28 - and simply return a div since we
525:32 - potentially might set up a button again
525:34 - that is totally up to you but in my case
525:36 - I'll try to do that at least and then
525:38 - users map so we're iterating over and
525:40 - then this should be already very
525:42 - familiar we have done that quite a few
525:44 - times during the course and that's why I
525:47 - keep pushing for you to set it up on
525:49 - your own
525:50 - because we have covered that you just
525:52 - need to practice that's it there's no
525:54 - real secret and as far as the return I'm
525:56 - gonna go here with div
525:58 - and then let's set up the key this is
526:01 - where we're iterating over so I'm gonna
526:03 - go to user ID because I know
526:05 - that in my array in the object more
526:09 - precisely and then as far as the value
526:11 - well like I said let's not over
526:14 - complicate things we're just going to go
526:16 - to user and then name let's save and
526:18 - this is what we should see on the screen
526:21 - so here's our task and you know what let
526:25 - me make this one as heading to so it
526:26 - stands out now every time
526:30 - the user submits the form
526:33 - essentially we want to add a new user to
526:36 - our array
526:37 - so this basically is the main challenge
526:41 - and effectively we can do it this way so
526:45 - first I have the handle submit correct
526:47 - now I need to grab the value of the name
526:51 - but here's the thing user might try to
526:54 - submit the form basically without
526:56 - entering anything
526:57 - and this is normally where we would
526:59 - display the alert or some kind of toast
527:02 - or whatever that all the values need to
527:05 - be submitted but in this case we'll
527:07 - simply return from this function
527:09 - so the most basic check is following I
527:11 - can say if
527:13 - and if there is no name if you want of
527:15 - course you can log stuff that's totally
527:18 - up to you but in my case I'm just going
527:20 - to go with the return and you'll notice
527:22 - that if the user tries to submit the
527:25 - form with empty values I'll have nothing
527:27 - in a console so again this stresses the
527:30 - point that we're not going to get to
527:32 - this line JavaScript is going to keep on
527:33 - reading and this is the earlier turn
527:35 - jumpsuit is going to be okay
527:37 - this actually matches there's no value
527:39 - in here so I'm just going to return from
527:42 - this function that's the most basic
527:44 - check again for the empty value and yes
527:46 - before you ask if you have multiple
527:48 - values let's say name email password and
527:51 - all that then basically you go with or
527:54 - and then again you check so we go this
527:57 - not operator and we say
527:59 - if it meets the condition then we're not
528:03 - essentially doing anything we're just
528:05 - returning from the function so that's
528:07 - the first step now the second one if
528:10 - there's actually some value so let's say
528:12 - if the user types something and I click
528:14 - notice form submitted now I want to
528:16 - construct that user
528:18 - and this is the case where yes basically
528:21 - I'll have to create a new object on the
528:23 - Fly and I'll have to add it to my
528:26 - existing array
528:28 - so let's start over here let's say that
528:31 - there is some kind of value
528:33 - first thing we need to do is set up that
528:35 - ID now of course you can hard code
528:37 - somehow but one neat trick while you're
528:41 - basically working on some simple
528:43 - application like this one you can just
528:46 - use some helpers and in this case I'm
528:48 - going to use date dot now again this is
528:51 - not for serious projects in that case of
528:53 - course it's going to be more complex but
528:54 - also keep in mind one thing that
528:56 - normally you're communicating with
528:58 - database anyway and database is
529:01 - responsible for setting up those IDs so
529:03 - this is just for practice where since I
529:06 - know that
529:07 - my user has both ID and name I just
529:11 - manually need to create that ID
529:13 - because name of course is going to be
529:15 - provided by this input hopefully that
529:18 - makes sense so let's go here with cons
529:20 - and then fake ID and like I said I'm
529:23 - just going to use date dot now but
529:25 - please don't use that in any serious
529:27 - project and if you want you can log
529:30 - essentially those are going to be
529:32 - milliseconds
529:33 - from I believe 1970 or something along
529:36 - those lines so if we go over here
529:39 - and if we type check it out notice this
529:42 - is going to be my value again
529:44 - just something Nifty that we can use
529:46 - while we're working on this project so
529:49 - let me just comment this one out for
529:51 - your reference if you want and then now
529:53 - let's construct that user so we're going
529:55 - to go here with const new user and that
529:58 - is equal to an object so I have two
530:01 - properties first one is going to be at e
530:03 - which is going to be equal to fake ID
530:05 - and then the second one is the name Now
530:07 - where's the name coming from well it's
530:10 - coming from the state correct over here
530:12 - and we only get to this functionality if
530:15 - there's some value in the input if not
530:17 - then we won't even get to it and now
530:20 - let's construct that new array the one
530:22 - that we will set up using set users so
530:26 - in here let's go with cons and then I'll
530:29 - call this updated users and then that
530:32 - one is equal to first I want to spread
530:35 - out all of these values because I'll be
530:37 - adding to this array again I don't want
530:39 - to override that keep in mind we can
530:42 - pass here whatever we want so if you'll
530:44 - just simply Place new user in the set
530:46 - users you'll set your array now equal to
530:48 - an object that's not what we want to do
530:50 - we want to spread out so we want to copy
530:52 - all of the current values from the users
530:55 - and then we want to add the new one so
530:58 - say here new user and we'll use this
531:00 - updated users and set it as our new
531:03 - value so go to set users and we'll pass
531:07 - in an updated users and lastly
531:10 - it kind of makes sense if we clean out
531:13 - the input right
531:14 - otherwise it's just going to stay there
531:16 - and the way we do that is simply by
531:19 - typing set name again same function
531:22 - whatever we have over there and we just
531:24 - provide the empty value now I don't
531:27 - think we need any more of this one we
531:30 - can remove and now check it out
531:32 - essentially
531:33 - as I'm going to be submitting something
531:35 - this is going to be my new user and then
531:38 - if user tries to submit with empty
531:41 - values nothing happens however if we do
531:43 - provide the value and if I say Bob
531:46 - then check it out if I take a look at my
531:49 - browser I have Bob over here and input
531:52 - is also nicely set to an empty string
531:54 - and Just for kicks as far as the extra
531:57 - challenge now let's also set up those
531:59 - buttons and let's remove the user if the
532:05 - button is clicked so first we want to
532:07 - navigate where we have the return that's
532:09 - why I set up the div and we're going to
532:11 - go with button and I'll just type remove
532:14 - in here we're gonna go with on click and
532:17 - eventually we'll set up some Logic for
532:19 - now simply go and empty Arrow function
532:22 - just so we don't have the error and I'm
532:27 - also going to add the class name and I'm
532:28 - going to say BTN so that's going to be
532:31 - my generic button class
532:34 - and now let's move up and set up that
532:37 - functionality where essentially I'm
532:39 - going to call this remove user it's
532:42 - going to be looking for one thing and
532:43 - one thing only it's going to be looking
532:45 - for the Eddie and as far as the logic I
532:49 - want to use filter again
532:50 - and essentially return only the items
532:53 - whose ID does not match whatever I'm
532:56 - passing in so again I'm going to call
532:59 - this updated users in this case I'm
533:01 - going to speed this up a little bit by
533:03 - just copying pasting so this is going to
533:05 - be the same however I'm not gonna spread
533:08 - out values this way I know that filter
533:10 - returns a new one so I can simply say
533:13 - users
533:14 - and then filter
533:18 - and as far as the Callback function I'll
533:20 - call this person and I'll say if the
533:22 - person ID
533:24 - person ID
533:26 - doesn't match then return
533:29 - if it doesn't match the ID that we're
533:31 - passing in however if the ID matches
533:33 - then that person is not going to be
533:35 - returned and of course again we set
533:38 - users equal to this new value and now we
533:41 - just navigate down here where we have
533:44 - the arrow function and essentially we
533:46 - want to go with the remove user and
533:49 - we'll grab the user ID so user dot ID
533:53 - let's save this and now one by one I can
533:56 - remove them that concludes the entire
533:59 - challenge hopefully everyone enjoyed it
534:01 - and I'll see you in the next video okay
534:03 - and up next let's talk about how we can
534:06 - set up one state value for multiple
534:10 - inputs and before we begin let me just
534:13 - stress something it's not something that
534:16 - you have to do if you have multiple
534:18 - inputs so it's not a requirement however
534:21 - you'll see this quite often and
534:23 - therefore I think it's important that
534:25 - you know how to set it up and basically
534:27 - the logic behind it also
534:30 - during this video will heavily rely on
534:34 - Dynamic object keys and if you need to
534:38 - jog your memory on that please utilize
534:41 - this JS nuggets video so first we want
534:44 - to navigate to app jsx you want to make
534:47 - sure that we're sitting in the zero
534:49 - three multiple inputs and then let's
534:52 - navigate to the file
534:54 - so in here
534:56 - we want to set up one state value
534:59 - which is going to represent all of the
535:01 - inputs so at the moment notice instead
535:03 - of just name and email I also have the
535:06 - password so instead of setting up three
535:08 - state values I'll set up one how we can
535:11 - do that well we can create that State
535:14 - value as an object correct so let's go
535:17 - to use
535:18 - State this is going to be my object and
535:21 - I just need to come up with the
535:22 - properties now before we do that why
535:24 - don't we also
535:26 - come up with a name so in my case that
535:29 - is going to be user and set user so that
535:33 - is going to be my set function
535:35 - so as you can see nothing changes
535:38 - that part still stays the same
535:40 - difference right now is that we'll have
535:42 - an object and basically each input
535:44 - we can set it up as a property in here
535:47 - so we'll have name I'll also have the
535:50 - email
535:51 - and also have the password and as far as
535:53 - my default values they will be empty
535:55 - string if you want to go with some
535:56 - different
535:57 - value of course that is totally up to
536:00 - you so now I have the user and now let's
536:03 - think about it
536:05 - in order to set up the input
536:07 - we will have to have a function correct
536:10 - so why don't we create that and the
536:13 - beauty here is that we can use only one
536:15 - function since we have only one
536:17 - State value as an object we can also set
536:19 - up only one function so I can say handle
536:23 - change and hopefully you see that it
536:25 - kind of saves us a little bit of time if
536:28 - we have multiple inputs so again we only
536:31 - have one state value and we'll only have
536:33 - one function so that's basically the
536:36 - benefit of such approach and now once I
536:39 - have the function
536:40 - let's not worry about any logic in here
536:43 - I will navigate to all of the inputs and
536:46 - here's what we want to do
536:48 - we want to set up the value however in
536:50 - this case
536:51 - it's not equal to the state value it is
536:53 - equal to a state value which is a user
536:57 - and then that and then the property and
537:00 - in this case of course it is name and as
537:02 - far as the function well we go here with
537:04 - on change and we set it equal to our
537:08 - handle change
537:10 - and effectively we want to repeat that
537:12 - for all of the inputs again we have name
537:15 - email as well as the password so let's
537:19 - change it here to email
537:22 - and
537:24 - let me grab this one more time
537:26 - and copy and paste
537:29 - so of course now the state value is
537:31 - going to be a password all right awesome
537:35 - now let's decide how we can access the
537:38 - actual value
537:40 - because if I'm going to go over here
537:42 - if I'm going to say e and
537:45 - first let's just log e dot Target and
537:49 - value you'll see that everything is
537:51 - correct but we don't know which
537:54 - input we're referencing here as far as
537:57 - the target again let me remove this one
537:59 - and then notice yeah everything is
538:02 - awesome
538:03 - I mean I can see whatever letters I'm
538:05 - typing and of course the reason why we
538:07 - don't see anything in the form is
538:09 - because we're not updating anything so
538:11 - the state values stay empty however
538:15 - the big problem here is that I don't
538:18 - know which input am I typing here
538:20 - so yeah I have S but what is it name
538:24 - email password and therefore we need to
538:27 - use the name attribute remember the very
538:30 - very
538:31 - beginning of this section I covered it
538:34 - we can also access the event Dot
538:37 - target.9 and of course
538:41 - that needs to be here in the input as
538:43 - well and therefore I'm going to go here
538:45 - with name and I'll set it equal to name
538:48 - why I work because that's my state value
538:51 - basically so this is always the funny
538:53 - one when you show in the example because
538:55 - it's like name equals to name yeah
538:57 - that's effectively my property now it's
539:00 - probably going to make more sense here
539:02 - with an email because now name will be
539:05 - equal to email and you guessed it
539:08 - correctly we need to do the same thing
539:10 - for the password so this is a must if
539:13 - you have such setup where you have one
539:16 - state value and it's an object yes you
539:20 - will need to use this type of approach
539:22 - you'll definitely need the name as you
539:24 - saw before when we had two inputs and we
539:27 - used Straight Up functions these State
539:28 - functions you don't have to do that
539:31 - I mean you can always add the name but
539:33 - it's not a requirement in this case
539:35 - since we have one function yeah this is
539:38 - what we need to do so let's go here with
539:40 - log and let's say event.target
539:44 - and yes this will reference
539:46 - basically whatever
539:49 - input the user is typing in so this is
539:52 - name and then this is the value the same
539:55 - is going to be for email and you guessed
539:57 - it for the password again we see nothing
540:00 - yet in a browser because we're not
540:02 - updating
540:03 - but this is already an awesome start
540:06 - so we have the name and we have the
540:08 - value so here's what we want to do
540:10 - we want to take this name and we're
540:12 - going to update that specific property
540:15 - here
540:15 - in the object with what with this value
540:19 - how we can do that well
540:21 - this is the interesting part we need to
540:23 - use the following logic first of all we
540:25 - go with set user so that's our set
540:27 - function then remember we have multiple
540:30 - values so I cannot simply go with name
540:33 - and then whatever
540:34 - this is going to effectively remove
540:37 - these two
540:38 - if I use such approach so that's not
540:40 - going to work what we can do
540:42 - solution is dot dot and then user so
540:45 - essentially I want to spread out again
540:46 - all of the existing values first
540:50 - because I'll be overriding
540:53 - only one at a time right I'll be typing
540:56 - in one input at a time and after that we
540:59 - want to dynamically update the proper in
541:03 - the state and set it equal to Value so
541:06 - first let me set up the code and then
541:09 - I'll try to
541:10 - explain as best as I can because again
541:13 - this is something that pops up quite
541:15 - often in the course q a where I'm gonna
541:18 - go with these square brackets I'll pass
541:21 - in
541:23 - event.target.name and please keep in
541:25 - mind that this value
541:27 - will be either name email or password in
541:31 - this case
541:32 - so of course if you have 15 of them
541:35 - then it's going to be one of those 15.
541:37 - so this will reference whatever we have
541:39 - here in the name and what happens it
541:42 - will access dynamically this property in
541:45 - the object that's why it's so important
541:47 - that they are the same
541:49 - that essentially you have the properties
541:53 - in the object and they match exactly
541:55 - what you have over here because
541:57 - otherwise if this value for example is
542:01 - names
542:02 - and you'll try to set it in the object
542:04 - it's not going to work so make sure that
542:06 - they match exactly whatever you have in
542:09 - the object so we are accessing
542:11 - dynamically this property and we'll set
542:13 - it equal to what we have here the value
542:16 - right so we'll go with
542:18 - event.target and then dot value let me
542:22 - save and like I promised I will come
542:23 - back to this one don't worry and now
542:25 - let's go over here and notice we nicely
542:28 - type and I still have those logs I don't
542:31 - think I need them let me navigate to the
542:33 - big browser
542:35 - and let's see we should see the state
542:38 - value as well
542:40 - looks like I need to refresh here as far
542:42 - as Veet let me try multiple inputs
542:45 - notice so now my state is an object and
542:49 - as I'm typing I'm actually providing
542:51 - values over here
542:53 - for the name for the email hand password
542:56 - and like I said yeah this triggers a
542:58 - bunch of questions in course q a
543:01 - so as far as my explanation well let's
543:04 - think about it if I'm gonna go over here
543:06 - and if I'm gonna just hard code one of
543:09 - the properties if I'll say
543:11 - name like so in any input I'm going to
543:14 - type
543:15 - I'll be just updating the name so let's
543:17 - try this one out notice
543:20 - I can save all here and basically notice
543:23 - how it essentially just typing a value
543:26 - over here even though we're typing in
543:28 - this input and the reason why we see
543:30 - nothing in these ones well because these
543:32 - ones are still empty correct so even
543:35 - though I'm typing in the correct input
543:37 - as far as the value it's showing up here
543:39 - in the name because I'm hard coding here
543:43 - and the same is going to work for
543:44 - password the email and all that that's
543:47 - why we need to set this one dynamic
543:49 - so this will be dynamic depending on
543:52 - what depending what we have here
543:54 - so if it's time then this will
543:57 - dynamically access the property in the
544:01 - object that is name
544:03 - if it's email then it's email hopefully
544:05 - you see where I'm going with this and
544:07 - that's why we go here with event Target
544:09 - and name of course if you have already
544:12 - some experience with Dynamic object Keys
544:15 - then this should look very familiar
544:18 - again the reason for that is because we
544:20 - have multiple properties we have
544:23 - multiple inputs but we have one function
544:26 - and therefore every time the user types
544:29 - something in one of the inputs I want to
544:31 - check two things not only I want to get
544:34 - the value but I also want to get the
544:36 - property and I want to access that
544:38 - property and I'm going to set it equal
544:40 - to whatever value I have in the input
544:44 - and as far as the handle submit let's
544:46 - set it up here let's say on submit in
544:50 - this case
544:51 - let's come up with the function name and
544:54 - I'll submit and you know what I think
544:59 - I'm just going to copy and paste I think
545:01 - it's going to be faster so handle not
545:04 - change we're looking for submit we do
545:08 - want to get the object we do want to
545:10 - prevent the default
545:13 - and instead of setting the user I simply
545:15 - want to log it
545:17 - and again the only gotcha right now is
545:20 - that it's a state value so once I type
545:23 - here and of course since this is an
545:26 - email
545:27 - field we will have to add the add one
545:30 - and let's go with mail.com
545:33 - and check it out the moment I press
545:35 - submit
545:36 - now I have the object in the console so
545:39 - essentially rest of the logic is the
545:41 - same whatever you want to do after that
545:44 - so yes of course you'll check for empty
545:46 - values then you'll set up some kind of
545:48 - functionality and a common approach is
545:51 - then to clear the values so this doesn't
545:53 - change the only difference that right
545:55 - now we have an object and while we're
545:58 - still in a row let's also cover
546:01 - a few other input options more
546:03 - specifically I'll show you the gotcha
546:06 - when it comes to check boxes and we'll
546:09 - also take a look how we can display the
546:12 - select input basically when we have a
546:15 - list of options so in the app jsx grab
546:20 - the starter from zero for other inputs
546:23 - and this is what you should see on the
546:24 - screen essentially a forum with few
546:27 - labels and a submit button
546:30 - so first let's go to the file we're
546:32 - looking for other inputs in Star and
546:36 - this is going to be our entry point
546:40 - um let's start by setting up two State
546:41 - values and let's start with shipping
546:44 - which essentially is going to be our
546:45 - Boolean value so here let's go with
546:48 - const and then shipping and set
546:51 - shipping
546:52 - and we'll set it equal to use State and
546:57 - by default it's going to be false and
546:59 - then we want to navigate to our form and
547:02 - we're looking
547:04 - for this one the first form row where we
547:07 - have the free shipping in the label and
547:10 - in here let's set up the input first
547:12 - it's not going to be equal to type text
547:15 - we actually want to go with checkbox
547:19 - and since Emmett right away spits out
547:22 - this name one we might as well provide
547:24 - that so we're not going to use it
547:26 - in this example but normally if you
547:29 - would you type whatever is the state
547:32 - value over here and then when it comes
547:34 - to Eddie same deal we're going to go
547:35 - with shipping let me save and now notice
547:38 - where I have our own little checkbox
547:42 - over here after that let's set up the on
547:45 - change and also let's create the
547:49 - function now unlike the input the
547:54 - typical text or email or password we
547:57 - actually want to go with checked and we
548:00 - want to set it equal to that state value
548:01 - so unlike the value equals to the state
548:04 - value now we go checked
548:06 - so let's go here first checked and that
548:10 - is equal to my state value which again
548:12 - is a Boolean and then when it comes to
548:15 - function first we need to create one so
548:18 - let me go over here and in my case I'm
548:20 - going to call this handle
548:22 - shipping
548:24 - so that's my function I'll be looking
548:27 - for the event
548:28 - object and as far as the logic
548:32 - first let's just log
548:35 - event.target.checked so that's the one
548:37 - that we're going to use not event.target
548:39 - that value
548:41 - because notice we don't have the value
548:42 - in here we have the checked so let's go
548:46 - here let's say event dot Target and
548:49 - checked and I'll right away use the
548:52 - value that's coming back and I'll set it
548:54 - equal to my shipping in the state so in
548:56 - here I'll say set shipping and set it
548:59 - equal to that value
549:01 - and essentially it's going to be either
549:03 - true or false depending whether you have
549:07 - clicked on it or not
549:09 - and the very last thing we want to do
549:11 - over here is to set up on change and set
549:14 - it equal
549:15 - to the handle shipping let's save this
549:19 - again we'll have this warning in the
549:21 - console but basically you'll notice that
549:24 - every time we click on the checkbox
549:26 - we'll get back the value and we're
549:29 - setting that in a state
549:31 - and I guess the major gotcha about the
549:33 - checkbox is that we want to use the
549:36 - checked instead of the value and when it
549:38 - comes to select input essentially it's a
549:41 - list of options so normally you'll have
549:44 - some kind of list again typically it's
549:47 - going to be dynamic so it's going to be
549:49 - coming from the API and you want to
549:52 - render them inside of the select input
549:55 - and you'll set them up as option element
549:59 - and then you're going to State there's
550:00 - going to be that one value that
550:02 - represents whatever the user has
550:05 - selected
550:06 - so first we need to create a state value
550:09 - and here just be careful because I named
550:12 - the state value framework
550:14 - and the latest Frameworks
550:17 - and
550:19 - you don't want to mix them basically
550:21 - when we want to display the options we
550:23 - want to iterate over Frameworks but when
550:26 - we want to provide the value we want to
550:28 - look for framework
550:30 - and
550:31 - I'll remind you that once we get there
550:33 - so frame work and that is going to be
550:37 - equal to set framework
550:40 - so let me copy and paste and I just want
550:42 - to change it to a uppercase and as far
550:46 - as the default value this is totally up
550:48 - to you I'm gonna go with react since
550:50 - that's the first item here in this list
550:52 - but of course you can set any of these
550:55 - values
550:56 - let's also create the function because
550:58 - we'll need that
551:00 - so for now
551:01 - copy and paste so it needs to be the sub
551:03 - we won't
551:05 - actually use the checked one so of
551:08 - course I can remove we won't set up the
551:10 - logic for now we'll simply go with
551:12 - handle and then let's call this frame
551:14 - work let's save that and after that we
551:18 - want to set up the select input where we
551:22 - have the label for the framework so
551:24 - let's go here with select again Emmett
551:27 - is going to spit right away name and ID
551:30 - so we might as well provide those values
551:32 - so in here let's just write framework
551:35 - so again this is very important we are
551:38 - now referencing the state value not the
551:41 - list
551:42 - we'll work with the list in a second so
551:44 - set it equal to framework
551:47 - and as far as the options this is where
551:50 - we want to iterate over the list so
551:53 - first let's display them and then we'll
551:55 - add the value as well as the on change
551:58 - so let's start over here we effectively
552:01 - want to iterate over the Frameworks so
552:04 - we set up here the curlies we go with
552:06 - Frameworks then dot map so we're mapping
552:11 - over and then as far as the value
552:15 - I'm going to reference this as a
552:17 - framework
552:18 - framework and as far as the return we
552:21 - want to go with keyword and then we're
552:23 - looking for the option
552:26 - then since we have a list yes we still
552:28 - need to provide a key
552:30 - and in this case we don't have the Eddie
552:32 - however those names are unique so I'm
552:34 - going to go with framework so
552:35 - essentially I'm referencing the
552:37 - parameter and then inside the option
552:39 - This is Where I Wanna showcase
552:42 - one of those options let me save and
552:45 - notice that everything is correct
552:46 - however nothing is going to happen
552:48 - so essentially yes we're changing this
552:50 - but if we navigate to the big screen
552:54 - you'll see that I'm not changing that
552:56 - state value
552:57 - because we haven't set up the logic yet
553:00 - so technically this is view but of
553:03 - course in the state I still have the
553:04 - react and it's very similar to typical
553:08 - input
553:10 - so we don't need to go here we checked
553:12 - that was only for the checkbox again we
553:15 - go with value we go with frame work
553:18 - very very important not Frameworks but
553:21 - framework
553:22 - and as far as the on change well we want
553:27 - to provide
553:29 - our handle framework correct let's
553:31 - provide this function
553:33 - and as far as the functionality we
553:35 - simply want to go with set framework and
553:38 - it's going to be located again in event
553:41 - dot Target value so if you're wondering
553:44 - can we pass directly the arrow function
553:47 - like we have been doing yes absolutely I
553:50 - just thought since we have handle
553:51 - shipping here we might as well set up
553:54 - another one so we go with framework and
553:57 - then we'll look for event.target and
554:00 - then the value let's save that and now
554:02 - if I navigate to the big screen we
554:05 - should see that we're also successfully
554:07 - changing the state value so that's how
554:10 - we can work with check boxes as well as
554:13 - select inputs in react okay and as a
554:18 - very last thing in this section I want
554:20 - to show you a very Nifty alternative to
554:23 - controlled inputs you see we can also
554:26 - submit the form with uncontrolled inputs
554:29 - basically without referencing the state
554:32 - value now in the following section I'll
554:35 - show you an example
554:37 - of how we can do that using use ref hook
554:41 - but in this video I'll show you how we
554:44 - can accomplish the same task with form
554:48 - data API which in my opinion is a better
554:51 - approach if you have more than one input
554:54 - as far as form data API it's coming from
554:58 - vanilla.js and effectively
555:01 - it's a interface that allows us to
555:04 - construct
555:06 - a set of key value pairs representing
555:10 - the form fields and their values and if
555:14 - this sounds somewhat funky don't worry
555:16 - as we're going to be working through the
555:18 - example you'll see what I mean now if
555:21 - you're not familiar with form data API
555:24 - or
555:25 - you just want to get more info on it
555:27 - please reference this JS nuggets video
555:30 - where I cover warm data API in Greater
555:34 - detail effectively form data API has
555:37 - quite a few methods on it
555:40 - and since I don't want this video to be
555:43 - half an hour long I'll just show you the
555:46 - most common ones so first let's just go
555:49 - to app GSX notice over here I have the
555:52 - starter
555:53 - I'm looking for zero five form data and
555:57 - once you navigate you'll see that we
555:59 - have a state value so essentially it
556:02 - doesn't do anything I'm just going to
556:03 - use it to Showcase something we also
556:06 - have right away handle submit on the
556:08 - form and we prevent a default hopefully
556:11 - we are clear why we need that and then
556:14 - we have three inputs so we have the name
556:18 - one the email as well as the password
556:20 - and as you can see I messed up over here
556:24 - that should be a password I already
556:27 - provided the ID and I also provided the
556:30 - names this is very important when you
556:33 - work with form data it's a must to have
556:35 - a name that
556:37 - effectively represents that input so if
556:40 - you do decide to work with form data
556:42 - just don't forget about the name it's
556:44 - very easy to do that and then your
556:46 - functionality is not going to work
556:48 - and as far as the setup let's start with
556:50 - this
556:51 - let's get on the same page that if I go
556:54 - to handle submit and if I log not
556:57 - event.target but if I log event dot
557:01 - current Target
557:02 - this will point to what
557:04 - this will actually point to a form so if
557:08 - I go to console and if I submit notice
557:10 - this returns a form element
557:14 - and as far as the difference so the
557:16 - event.target
557:18 - refers to the Dom element that triggers
557:22 - an event however the current Target
557:25 - refers to the Dom element that event
557:29 - listener is listening on so in simple
557:33 - English in our case
557:35 - since the event
557:37 - our on submit is set on a form
557:41 - sure enough
557:42 - event dot current Target returns are
557:46 - form element now why is that useful
557:49 - because in vanilla Jazz there's form
557:51 - data API which is just a cool setup how
557:56 - we can directly access the inputs we
558:00 - have
558:01 - as well as the values so in this case
558:05 - I can go with const and I'll call this
558:08 - form data and I'll set it equal to new
558:13 - form data and one gotcha don't call the
558:16 - component form data essentially you'll
558:20 - have an error that's why I named this
558:22 - uncontrolled inputs not form data
558:24 - because essentially
558:26 - react is going to think that you're
558:28 - referencing the component and once we
558:31 - have the new form data it's looking for
558:33 - that form that's why we're going to go
558:36 - with event dot current Target so we go
558:39 - here with event and current Target and
558:43 - let's just see what we get back so let
558:44 - me move this sucker down
558:46 - and I'm going to go with form data now
558:49 - don't be surprised if you see Elvis in
558:53 - the console so don't freak out
558:55 - essentially everything is correct it
558:57 - just works a little bit differently so
558:59 - the first time I started working with
559:00 - form data I was like well wait a minute
559:02 - did I pass the correct
559:04 - Target because I don't see anything
559:07 - don't worry
559:09 - in order to access the values
559:11 - we have few approaches we can use the
559:15 - get method on this form data so for
559:18 - example
559:19 - if I want to get the name
559:22 - I'm going to go here with name I'm going
559:24 - to set up some kind of variable we go
559:25 - with form data and we go with get and
559:29 - then whatever is the name so again
559:31 - that's why it's important whatever is
559:33 - this value over here so if I'm going to
559:36 - go with name you can probably already
559:38 - guess what we're going to be getting
559:40 - back correct so let's try something else
559:42 - why don't we try
559:45 - let's say email I'm gonna go here email
559:48 - and yes of course that input needs to be
559:50 - there and if I log this
559:53 - I'll actually see the value once we
559:55 - submit the form so if I'll type here
559:58 - John and Gmail once I submit check it
560:02 - out I'll have this value over here so we
560:06 - have a few options like I said I'm not
560:07 - going to cover each and every method if
560:09 - you want to find out more about form
560:11 - data please reference that video but in
560:14 - this instance what we can do one by one
560:16 - we can grab the email password and name
560:18 - yes that's definitely
560:20 - one option however there's a little bit
560:23 - better option where we can transform
560:25 - this into an object directly and the way
560:29 - we do that we use object Dot from
560:31 - entries which again is
560:34 - essentially a method that we get from
560:36 - vanilla.js because what we need to keep
560:39 - in mind that this form data actually is
560:43 - an array of arrays and just so you don't
560:46 - think that I'm making this up let me go
560:48 - here where I have the log let me go with
560:51 - spread operator I'm going to go dot dot
560:54 - and then we're looking for form data Dot
560:58 - and I'm going to go with entries just so
560:59 - you can see both of them then let me
561:02 - save with me refresh and I'll have to
561:05 - provide the values again so in this case
561:07 - I'm going to go John
561:09 - John over here as well
561:14 - and then lastly we want to go here with
561:16 - some kind of password and once we click
561:18 - like I said what we're getting back from
561:22 - form data entries and as I said you can
561:25 - find all these methods over here notice
561:28 - it has quite a few of them that's why I
561:30 - said that we're not going to cover all
561:32 - of them I can spread out the entries and
561:36 - I'll have this array of arrays so this
561:38 - is going to be the name of the input and
561:40 - then this is going to be the value
561:42 - and even though this is nice
561:45 - most likely you'll want the object for
561:48 - example if you want to submit this data
561:51 - to a server how we can do that well
561:55 - first of all let me comment these ones
561:58 - out as always
562:00 - all this functionality is available
562:02 - already in the readme and let me go here
562:07 - with const and I'll call this new user
562:09 - and I'll set it equal to object dot
562:12 - again this is coming from vanilla.js
562:15 - basically it's not provided by react
562:17 - it's just JavaScript and effectively
562:20 - object Dot from entries
562:23 - turns an array of arranged data
562:26 - structure
562:27 - into a object with key value pairs
562:31 - and you can find a vanilla.js code
562:34 - example in readme and then here we pass
562:37 - in the form data and what you'll see are
562:40 - as a result we have this new user now so
562:44 - once I click check it out now I have an
562:47 - object with all of these values
562:50 - and the kicker here is that I can send
562:53 - it to a server I can do some kind of
562:55 - functionality and all that cool stuff
562:58 - again the main point of this video is
563:01 - that we don't always have to set up
563:04 - those controlled inputs if we don't want
563:06 - to
563:07 - for example we can use form data pass in
563:10 - the form as long as we have the names
563:12 - and all that we're good to go we can set
563:14 - up the functionality here in the handle
563:17 - submit
563:18 - so please don't think that you always
563:20 - always have to set up controlled inputs
563:23 - it really depends on your preference and
563:26 - pretty much the application you have in
563:28 - some instances you'll do that in some
563:30 - you'll be like nope I actually want to
563:32 - go with phone data and lastly let's look
563:35 - at one major gotcha so we did something
563:38 - with this user data we're good to go now
563:42 - we want to clear out the values
563:44 - you see
563:45 - if we just re-render those values that
563:48 - are going to stay over here and that's
563:50 - why we have over here the state value
563:51 - the set value so just to Showcase that
563:54 - I'm going to go to set value and I'm
563:56 - going to go with Value Plus One
563:59 - and essentially what you'll notice that
564:03 - even though we re-render correctly
564:05 - because remember we're updating the
564:07 - state value
564:09 - these are going to stay and as far as
564:11 - the values just so we can save a little
564:13 - bit of time I'm just going to type some
564:14 - G brush ones
564:16 - I don't think makes any sense to type
564:19 - anything meaningful let's click and
564:22 - notice we did update the state value
564:25 - it's actually happening everything is
564:27 - correct however
564:29 - these ones stay in input and if you want
564:31 - to clear the values you want to go with
564:33 - event dot current Target and then the
564:37 - method name is reset so we save this one
564:40 - and now notice pretty much the moment I
564:43 - will submit
564:45 - basically I'll do something with the
564:47 - data and as a quick sign out of course
564:49 - you would check for empty values so in
564:53 - that case either you would get them one
564:54 - by one or in the vanilla.js video I
564:58 - actually show you how to do that by
565:00 - iterating over array which is just less
565:02 - lines of code and then once we click on
565:06 - submit notice how we nicely clear the
565:08 - values and again
565:09 - don't think that they always stay empty
565:12 - again if we provide over here something
565:16 - in the inputs notice again we'll have
565:20 - the new values here as far as the new
565:22 - user and we also nicely clear out the
565:26 - inputs awesome and up next let's cover
565:29 - use ref hook
565:32 - it's a lot like use state
565:35 - so it preserves the value between the
565:38 - renders but the difference is that
565:40 - updating userf does not trigger
565:43 - re-render so remember when we work with
565:46 - use state every time we
565:49 - update the value
565:50 - we trigger re-render
565:52 - now it's not the case with user ref very
565:56 - often use ref is used to access
565:58 - downloads but there are some other Nifty
566:02 - use cases as well of course it really
566:04 - depends on the projects you're going to
566:06 - be working on but at least in my
566:08 - experience
566:09 - since I don't use use ref to access form
566:13 - inputs
566:15 - use ref is not something I use in every
566:18 - project but once in a while there's a
566:21 - very specific use case where user f is
566:24 - the right tool for the job we're going
566:27 - to start just like with the other
566:29 - examples where essentially we want to
566:32 - look for zero seven user F star and then
566:35 - zero one use ref Basics and
566:40 - of course I want to import that in the
566:42 - app jsx and I want to navigate to that
566:45 - file and notice over here I already have
566:48 - the state value I have handle submit
566:51 - that just prevents the default and I
566:54 - have the form
566:55 - as well as the heading one
566:58 - with the button and as I'm clicking I'm
567:01 - increasing the value here and you'll see
567:03 - why we have this kind of setup in a
567:06 - second so essentially if we want to
567:08 - start working with us ref just like the
567:10 - other hooks we want to import that from
567:13 - react and we want to come up with the
567:15 - name so in this case we're not looking
567:17 - for an array of values we're just
567:19 - looking for one value so I'm going to go
567:21 - here const and then we just come up with
567:24 - a name so in my case I'm going to call
567:26 - this container as a quick sound I
567:29 - actually like to think of use ref value
567:31 - as a container
567:34 - then that's just my mental model and we
567:37 - want to go here with use ref
567:40 - so that's the hook and then we want to
567:42 - pass in that default value
567:44 - so in my case I'm going to start with
567:45 - null but keep in mind you can pass here
567:48 - whatever you want and then if we log
567:50 - you'll notice something interesting
567:53 - if I log the container
567:55 - and if I take a look at the devtools
567:57 - you'll see that it is an object and it
568:01 - has the current property and the current
568:03 - property is equal to that null so
568:05 - current property is always going to be
568:07 - equal to
568:08 - whatever you sit here as a default value
568:11 - and yes react behind the scenes is going
568:14 - to set this one up as an object so
568:16 - notice we did not do anything basically
568:20 - we just set up the user ref and this is
568:23 - what the react return now once we have
568:25 - this one in place essentially
568:28 - we have two ways how we can set this
568:31 - value because of course you don't want
568:33 - to always keep it as no
568:34 - one way we can set it ourselves
568:36 - basically using some kind of
568:38 - functionality which is going to be
568:40 - actually our second example or you can
568:43 - use this container and set it equal to
568:45 - any of the Dom nodes now in our example
568:49 - yes we will use the input because it's
568:52 - somewhat common but keep in mind you
568:54 - don't have to
568:56 - I mean you can set it equal to any Dom
568:58 - nodes and if I remember correctly in the
569:01 - project we're actually going to use the
569:04 - navbar just so we have multiple examples
569:07 - but yes this is pretty typical to set it
569:10 - equal to an input if you remember when
569:12 - we talked about controlled inputs and
569:14 - form data API in the previous section I
569:18 - mentioned that there's another way how
569:21 - we can use uncontrolled inputs and
569:23 - essentially that is using use ref hook
569:26 - so once I'm done with my long speech and
569:29 - all that here's what we want to do
569:32 - we want to find the element again in my
569:34 - case that is going to be the input and
569:36 - we're going to go with the ref so that's
569:39 - the attribute we want to use and we want
569:41 - to set it equal to what well we want to
569:43 - set it equal to ref container so
569:47 - whatever you created with the user of
569:50 - now we don't see anything because of
569:53 - course this is essentially the initial
569:56 - render correct so in order to see our
569:59 - actual value we need to set up the user
570:01 - effect
570:02 - so in here I'm going to go with user
570:04 - effect and then we'll pass in the
570:06 - function now I don't care about the
570:09 - dependency array I just want to showcase
570:12 - that essentially once our initial render
570:15 - takes place
570:17 - we run this user fact and in there we'll
570:19 - see a different picture so here we're
570:22 - going to see error of container that
570:24 - actually has this input again something
570:26 - important to keep in mind that yes we
570:29 - have two ways that we can set up the
570:31 - user of
570:32 - we can either set it equal to any of the
570:34 - Dom nodes and the reason why we see that
570:37 - right now because this runs after
570:39 - initial render correct this one is
570:42 - happening during the initial render
570:43 - that's the difference and we can also
570:47 - for example set it
570:49 - ourself again that is going to be our
570:52 - second example and once current is equal
570:55 - to our Dom node
570:57 - what can we do well pretty much anything
571:00 - once we get the Dom node I mean sky is
571:03 - the limit
571:04 - for example
571:06 - I can grab the value and this one of
571:08 - course I'll do it in handle submit so
571:10 - again this was just the Showcase that
571:13 - after the initial render
571:15 - now in the rough container we'll have
571:18 - access to that input but we'll actually
571:20 - use it over here in the handle submit so
571:23 - in here effectively we want to grab the
571:27 - value by using value property again this
571:31 - is just coming from vanilla.js so if I'm
571:34 - going to go here in the handle submit
571:36 - and if I'm going to take a look at the
571:39 - value it will actually give me whatever
571:42 - is typed in the input so if I'm going to
571:45 - go here with cons name and ref container
571:48 - then current again I'm accessing the
571:50 - property and since the property is the
571:52 - input
571:54 - basically I can run with value again
571:56 - this is coming from an ljs you access
572:00 - the Dom node and if it's an input you
572:03 - can actually run dot value and
572:05 - effectively this is just going to get us
572:07 - whatever the user has typed in and then
572:09 - again we can do something about it now
572:11 - that's something in our case it's simply
572:13 - going to be logging the name so notice
572:16 - this essentially is no let me comment
572:19 - out we have quite a few logs here but
572:21 - then if I type something and if I press
572:24 - submit check it out now I'm getting this
572:26 - value so this is how we can set up again
572:30 - uncontrolled inputs using use graph so
572:35 - that's the first example we're going to
572:37 - look at and in the following video we'll
572:39 - take a look how we can use use ref
572:42 - to avoid running some functionality on
572:46 - the initial render and you'll see what
572:48 - I'm talking about in a second okay and
572:51 - now let's take a look at our second
572:52 - example where we will change the value
572:56 - of use ref and we're going to start just
573:00 - like the first one where essentially I
573:02 - want to create a value with user and in
573:06 - this case I'm going to call is mounted
573:08 - and I'll set it equal to use ref and
573:12 - just like before
573:13 - I want to provide some kind of default
573:16 - value and in my case I'm going to go
573:18 - with false again I probably don't need
573:21 - to say that now is mounted essentially
573:23 - is an object in there there's a current
573:26 - property and that one is equal to a
573:30 - false now I also probably don't need to
573:33 - remind you that if I have here a huge
573:36 - effect and if I add here
573:38 - dependency array and if I provide here a
573:42 - value basically
573:43 - the state value over here every time
573:46 - I'll click on a button guess what
573:49 - essentially the functionality inside of
573:51 - this use effect is going to run correct
573:53 - so let's kill two birds at the same time
573:57 - I'm gonna go with is mounted and let's
574:00 - save and notice pretty much every time
574:03 - I'll click I have this current is equal
574:05 - to false and once we have established
574:08 - this why don't we talk about a very
574:11 - specific use case
574:13 - what if I don't want to run certain
574:15 - functionality after initial render so I
574:19 - do want to run it
574:21 - after that every time the value changes
574:24 - but not on the initial render again this
574:27 - is not probably something that you're
574:29 - going to use in every project but here
574:31 - and there this is
574:33 - a Nifty solution where essentially you
574:36 - can just avoid running some
574:38 - functionality after that initial render
574:41 - and the way we do that we essentially
574:43 - check this value
574:44 - and if this one is false
574:46 - we set it equal to true
574:50 - and then after that every time this
574:53 - value changes this is equal already true
574:55 - and then the functionality is going to
574:57 - run now one gotcha though don't check is
575:01 - mounted because this will always be an
575:04 - object
575:05 - so this will be true we need to check
575:08 - for the current property and if you're
575:10 - someone iffy on that let me showcase
575:12 - what I'm talking about
575:13 - so inside of the use effect first of all
575:17 - I think I'm going to remove this one I
575:19 - can set up the if condition and I can
575:21 - say if is mounted current
575:25 - is false then don't run basically return
575:29 - from the use effect so in here I can say
575:31 - is mounted and current again don't check
575:36 - for is mounted because it is an object
575:39 - so essentially
575:41 - it's going to be true
575:43 - I'm checking for the current property
575:45 - which in the beginning is false and if
575:48 - that's the case then I want to go with
575:50 - is mounted so notice now I'm actually
575:53 - changing that value myself
575:55 - I'll set it equal to true and then I'm
575:57 - going to return so true and then I
576:00 - return and after that if condition I
576:03 - actually want to set up that
576:04 - functionality now again in my case that
576:07 - functionality is simply going to be
576:09 - log and then re-render like so but let's
576:14 - take a look what is the result so notice
576:16 - I refresh and there's nothing in the
576:19 - console and I'll only see something in
576:22 - the console once actually
576:24 - I'm changing this value
576:26 - so essentially what we're doing we're
576:29 - avoiding to run whatever functionality
576:32 - after initial render again not something
576:35 - that you'll do in every project but once
576:37 - in a while you might hit this use case
576:39 - and lastly I just want to showcase how
576:41 - we can set up nice Focus around our
576:44 - input and since we're not triggering
576:47 - re-render we won't have this infinite
576:49 - Loop so I have rest container which
576:52 - essentially is pointing to my input
576:55 - correct so I can set up a use effect
576:58 - instead of the use effect
577:00 - I'm going to pass in the function and
577:02 - then since I know that I'm accessing
577:04 - container then current so that's my
577:06 - input in vanilla.js we also have this
577:09 - Focus we just invoke it again this is
577:11 - not reacting this is vanilla.js and
577:14 - check it out basically the moment I'll
577:16 - refresh I'll have this Focus around the
577:18 - input and what's really cool that since
577:21 - use ref
577:24 - does not trigger re-render essentially
577:26 - you won't have this infinite Loop like
577:29 - you would if for example you would be
577:32 - using use effect without the dependence
577:36 - array and then updating the state value
577:39 - hopefully that is clear and we can move
577:42 - on to the next topic okay and up next
577:44 - let's see how we can create our own
577:47 - custom Hooks and custom hooks are great
577:51 - for
577:52 - abstracting some functionality basically
577:56 - to have less lines of code in the
577:58 - component and as a result it's going to
578:01 - be easier to manage our component and
578:05 - also once we have custom hook
578:07 - we can bring it from Project to project
578:09 - which of course speeds up our workflow
578:13 - our rule of thumb quite often use effect
578:16 - logic is a great option for custom hook
578:18 - and lastly
578:20 - all the hooks rules apply to our custom
578:24 - hooks for example they do need to start
578:27 - with use for the setup in the app GSX
578:32 - look for zero eight custom hooks star
578:35 - and then zero one toggle so we'll start
578:38 - with somewhat basic example and then
578:40 - we'll work on the fetch one and once you
578:43 - navigate here
578:44 - in the component you can see that I'm
578:46 - using your state I have show set show
578:49 - default value is false and then every
578:52 - time I click on a button what do you
578:54 - know I'm toggling the component
578:56 - and essentially
578:58 - if I have for example three four five or
579:01 - whatever components that have this kind
579:04 - of functionality the toggle
579:06 - functionality
579:07 - I can set up a pretty simple custom hook
579:11 - where first we're going to navigate to
579:14 - the starter and go with new file and
579:17 - let's go with use again this will have
579:20 - to start with you so might as well right
579:22 - away set it up and I'm gonna go with
579:25 - toggle and in this case we can go with
579:27 - JS now if you want of course you can set
579:30 - up jsx but in my case I'm going to go
579:32 - with Js and essentially the way it's
579:34 - going to work
579:35 - we'll just take this functionality and
579:39 - return from that customer so first let
579:42 - me grab this just so it's faster then
579:45 - let's come up with the function again we
579:48 - need to go to use and in this case I'm
579:50 - going to go toggle here when I know that
579:54 - I'm going to be looking for some kind of
579:55 - default value that's why I'll use this
579:57 - as a parameter I'll say default and then
580:00 - value and of course I'll pass that value
580:03 - when I invoke the custom hook
580:07 - and in here as far as the logic it's
580:09 - pretty much the same I want to have show
580:11 - and set show and I want to pass this
580:14 - default value so let's go back over here
580:16 - and we'll cut it out
580:19 - copy and paste and instead of false I'll
580:22 - actually go default and then value now I
580:26 - also want to set up the toggle function
580:28 - the one that I'm invoking here and I'm
580:31 - going to go with const toggle let me
580:33 - close the sidebar
580:35 - as far as the functionality same deal
580:37 - basically I want to go with Seth show
580:40 - and then the opposite value whatever it
580:43 - is and then from this huge toggle we
580:47 - have multiple options
580:49 - if you want you can return an array so
580:51 - you can go here and say return
580:54 - and then the first value
580:56 - can be show and then the second one is
580:58 - toggle so notice basically we're making
581:01 - a huge state
581:03 - just a little bit more complex
581:05 - so in here I also have the toggle
581:07 - function so hopefully it's clear so we
581:09 - have the state value but I'm just adding
581:11 - this extra function
581:13 - so now I'm returning this and then
581:16 - backing the toggle
581:18 - I can access it the same way I can go
581:20 - use toggle and then the first value and
581:22 - the second value now I actually prefer
581:25 - turning this as an object
581:27 - It just fits better my mental model
581:29 - where I know that there's going to be
581:31 - some properties there and I just want to
581:32 - access them now
581:34 - this is totally up to you
581:36 - if you want you can set it up as an
581:38 - array and then of course we want to
581:40 - export that so I'm going to go here with
581:42 - export default
581:43 - and then we're looking for use and then
581:46 - toggle that's what we're exporting
581:48 - and now back in the toggle one instead
581:52 - of State we don't need the State anymore
581:53 - we want to import the use and then
581:57 - toggle and I'll rely on my Auto Imports
582:01 - remember we do need to provide the
582:03 - default value
582:04 - either that's true or false and just so
582:07 - you can see that it works I'll actually
582:08 - go through and then remember we are
582:11 - returning the object correct and as far
582:14 - as the properties what do we have over
582:16 - there well we have show and we have the
582:19 - toggle so now this stays the same this
582:22 - doesn't change but here where I have the
582:24 - on click
582:25 - basically I have the toggle
582:28 - notice the moment I save right away see
582:31 - the component why well because the
582:33 - default value is true and then the
582:35 - functionality still works I purposely
582:37 - picked a very basic example
582:40 - of course
582:42 - as you're looking at it you're like well
582:44 - I mean are we really saving time again
582:47 - it really depends if you have 10
582:49 - components that use the same toggle
582:51 - functionality yeah this is very Nifty
582:53 - and in the following example you'll
582:56 - truly see the power of the custom hooks
583:00 - again this is just to showcase the main
583:03 - setup yes we can use here use State yes
583:06 - we can use use effect whatever hook you
583:08 - want make sure that you start with use
583:11 - and then when you actually invoke the
583:15 - hook if you have some default value you
583:17 - need to pass it in so for example if I
583:19 - flip it to false notice now I don't see
583:22 - the component on the initial render but
583:24 - if I go back to true this is still going
583:27 - to work so again I refresh and I'm good
583:30 - to go so that's the basic setup and in
583:33 - the following video we'll try to do the
583:35 - same thing with our fetch functionality
583:38 - okay and once we're familiar with the
583:41 - fundamentals of custom Oops why don't we
583:44 - cover more complex example and here's
583:48 - the challenge
583:49 - in the app jsx import 0 to fetch data so
583:55 - it's in the same folder just a more
583:57 - complex example and once you navigate
584:00 - there remember this is essentially
584:04 - a component that is fetching a GitHub
584:07 - user
584:08 - and now let's try to set up a custom
584:13 - hook
584:14 - so effectively we want to move away
584:18 - pretty much most of the logic so try to
584:22 - come up with that custom hook
584:25 - and a hint
584:27 - hooks should return is loading his error
584:29 - and user and it should take URL as a
584:34 - parameter so again if you're interested
584:36 - try to set it up and once you're ready
584:39 - to compare the results resume with the
584:41 - video
584:42 - effectively like I mentioned use effect
584:45 - quite often is a good use case for the
584:49 - custom hook notice all these lines of
584:52 - code it would be nice if we could just
584:54 - move it to a separate file and
584:57 - effectively we'll have less lines of
584:59 - code and it's going to be easier to
585:02 - grasp the functionality once you come
585:05 - back I don't know in two days three days
585:07 - or I don't know a half a year
585:10 - and the way we can do that we can set up
585:12 - the custom hooks so let's navigate back
585:13 - to the starter I'm going to go with use
585:15 - and I'll set up two examples first one
585:18 - is going to be use fetch person
585:21 - this is going to be kind of a specific
585:22 - case and then I'll show you how we can
585:24 - make this more generic basically how we
585:26 - can have a custom hook for any data so
585:30 - let's start over here I'll say fetch
585:33 - person.js and then let's create that
585:36 - function first
585:37 - so let's go here with const use fetch
585:44 - and then user
585:46 - or person sorry
585:48 - I mean it can also be a user of course
585:50 - correct then we want to set up the
585:54 - function body and first let's just take
585:57 - a look at our component
585:59 - so I have is loading is error and user
586:01 - all of these three state values can we
586:04 - move them to a custom hook yes of course
586:07 - because essentially What's Happening
586:09 - Here
586:10 - we just set up a use effect and
586:13 - eventually we get back the user or of
586:16 - course if there is an error
586:19 - so let's try that first I guess let's
586:21 - grab these Imports and I'll right away
586:24 - basically cut them out we won't use them
586:26 - in this file
586:27 - set it over here
586:29 - then we pretty much want to take the
586:32 - whole thing yep it's that drastic so I
586:35 - want to First Take These State values
586:38 - set it up over here inside of the
586:40 - function
586:41 - and then we want to grab the use effect
586:44 - so whole thing over here let's cut it
586:47 - out as well
586:49 - and copy and paste because this Hook is
586:52 - going to be looking for that URL now of
586:54 - course if you know that you're going to
586:55 - be using the same URL you can hard code
586:58 - in the use fetch person but if you want
587:03 - to make it more Dynamic set up the
587:06 - parameter so here I'll say whenever I
587:09 - invoke use fetch person I'm going to be
587:11 - looking for that URL and of course in
587:14 - this case it's this getup one and then
587:16 - we're pretty much done we just want to
587:18 - return all of these three values yes
587:21 - effectively it's that simple remember
587:23 - the use toggle
587:25 - in the component what did we do well we
587:28 - invoked it correct so initially is
587:32 - loading is going to be true
587:34 - then we're going to invoke the use
587:37 - effect only
587:39 - after the initial render and here we
587:42 - have all this logic where we'll grab the
587:45 - URL which matches the parameter of
587:47 - fetched the data if there's an error
587:50 - will return now if not then we'll return
587:52 - a user
587:54 - so essentially yes it's that simple and
587:58 - here let's just go with return
588:00 - and we want to go with is loading again
588:03 - if you want you can return an array but
588:06 - especially if I have like three values
588:08 - that's definitely a good use case for a
588:11 - object in my opinion let's go here and
588:14 - then we also want to return a user and
588:17 - then we want to navigate back to fetch
588:19 - data
588:20 - and essentially in here we just want to
588:22 - go to use fetch for some reason it's not
588:25 - importing that's fine let's just pass in
588:28 - the URL and remember this one is
588:30 - returning three things it's loading his
588:33 - error and if there is a user correct so
588:36 - we go here we set it equal to and then
588:39 - we just check for is loading
588:41 - same goes for is error and then we have
588:44 - the user and now million dollar question
588:48 - which one is easier to read
588:50 - if you have eu's fetch person or
588:54 - all these lines of code and as I said
588:57 - the reason why nothing worked actually I
588:59 - didn't export that my bad so I'm going
589:01 - to go here with export default
589:03 - and then use fetch Versa let's do this
589:08 - and then back in the fetch data of
589:10 - course we want to import that
589:12 - so I'm gonna go here with use Fetch and
589:15 - I'll cheat a little bit where I'll grab
589:17 - the import but I'll remove this line of
589:20 - code because otherwise I'm going to get
589:22 - the narrow so now everything should work
589:23 - again notice we have nice loading one
589:27 - if there's an error we'll get an r and
589:30 - eventually we get the user so that's how
589:33 - we can set up a custom hook with more
589:36 - complex example and as a side note
589:39 - whenever you start working with react
589:42 - query or other fetching libraries the
589:45 - setup is going to be extremely similar
589:47 - that's why I thought that it's very
589:48 - important for us to understand how
589:50 - fetching works with use effect of course
589:52 - those libraries do way more than just
589:55 - this
589:56 - they do caching and all kinds of cool
589:59 - things but the idea is going to be the
590:01 - same you're going to get some kind of
590:02 - custom Hook from the library that hook
590:05 - is going to be looking for some
590:06 - parameters and of course it depends on
590:08 - the library what parameters the hook is
590:10 - looking for
590:12 - and essentially you'll get back a bunch
590:14 - of useful info about the request and you
590:18 - can use that info to set up
590:20 - conditions to access the data and all of
590:25 - that cool stuff and lastly as far as the
590:27 - custom hooks let me show you how we can
590:30 - make our function more generic basically
590:33 - our use fetch person because I mean
590:38 - chances are we'll probably want to fetch
590:41 - more than just the user for example we
590:43 - want to fetch an array or something
590:46 - along those lines so again the
590:48 - functionality pretty much is going to
590:50 - stay the same I'll just change some
590:52 - names and what we're returning from the
590:54 - function and as a result we'll be able
590:57 - to use the custom fetch hook with pretty
591:00 - much any data not just with a user
591:04 - object so let's try this one out where
591:06 - first I want to navigate to the star
591:08 - I'll create a new file and I'll call
591:10 - this use fetch pretty generic correct
591:13 - then pretty much I want to take the
591:15 - whole thing
591:16 - one by one we'll just change some values
591:19 - so copy and paste over here and instead
591:23 - of user why don't we call this data I
591:25 - think that's pretty generic correct so
591:27 - data set data and as far as default
591:31 - value I'll still keep it as a and L then
591:35 - we want to change around the name it's
591:38 - not going to be fetch user I'll actually
591:40 - call this fetch data and I just need to
591:42 - remind myself that pretty much
591:44 - everywhere where I have fetch user I
591:46 - want to also
591:48 - rename it to a fetch data so page data
591:52 - here and then we also invoke it now I
591:56 - don't have user anymore I have the data
591:59 - so instead of user from this hook I'm
592:02 - returning a data and then lastly notice
592:05 - over here
592:06 - as far as the response I'm calling this
592:08 - a user well
592:10 - we can come up with response so that's
592:12 - going to be pretty generic where I'm
592:14 - going to go with set data and I'll set
592:16 - it equal to respond now let's save it we
592:19 - want to navigate to batch data and let
592:23 - me double check yep
592:24 - of course I have a mess up here it's not
592:26 - fetch person
592:28 - I'm gonna go with use and then fetch and
592:32 - same over here now technically this
592:34 - should work because the export is
592:37 - default but
592:39 - I'm gonna rename that and then back in
592:42 - the fetch data instead of use person or
592:45 - move this
592:46 - and we want to set it from the scratch
592:48 - where I'm gonna go with use and then
592:51 - Fetch and we still want to pass in the
592:53 - URL now you're probably wondering okay
592:55 - what about the user since that's what
592:58 - we're using in this component well we're
593:01 - not getting back any more user this is
593:03 - actually data so we have two options you
593:06 - can remove the user and go with data but
593:10 - then just keep in mind that everywhere
593:12 - where you have reference to a user you
593:14 - also need to use data or you can simply
593:18 - add an alias again a JavaScript thing
593:20 - where I'm saying yeah I want to grab the
593:23 - data out of the use fetch however in
593:26 - this component I'm going to call this a
593:28 - user that's it notice everything still
593:32 - works in this case we have the generic
593:35 - one which effectively we can take from
593:37 - Project to project and then every time
593:39 - we want to get some data we just invoke
593:43 - the use fetch pass in the URL and if
593:47 - everything is corrected we have no
593:48 - errors
593:50 - once we're done loading we'll get back
593:52 - the data and up next let's discuss
593:55 - context API and we're going to start
593:59 - actually with the challenge where I want
594:02 - you to see the pain of prop Drilling and
594:07 - the challenge is following
594:09 - first you want to navigate to the star
594:12 - in zero nine context API and create
594:16 - three components create nav bar jsx
594:21 - then nav links which you want to Nest
594:23 - inside of the number and then user
594:27 - container
594:28 - which you want to Nest inside of the nav
594:31 - links one so yes I don't want you to
594:33 - Nest use your container and nav links
594:36 - inside of the navbar no our use case is
594:39 - going to be the navbar component which
594:41 - basically is our parent then the child
594:44 - is nav links and then the user container
594:47 - is nested inside of the navic so
594:50 - essentially we have this
594:53 - three level structure now after that
594:56 - once you have the basic setup in place I
594:58 - want you to import navbar.jsx in the app
595:02 - jsx
595:03 - now as far as my solution I'm going to
595:07 - remove the container just so it looks
595:10 - like a nav bar because I have all that
595:13 - padding in the container and all that
595:14 - and it doesn't look very good if I place
595:17 - that nav bar but you don't have to do
595:20 - that and also don't worry about the CSS
595:23 - the main goal of this challenge is to
595:25 - work on a logic if your example doesn't
595:28 - look exactly like mine don't worry about
595:31 - it again we're just focusing on the
595:33 - functionality so once you have that
595:35 - nested structure
595:37 - then in the nav bar I want you to set up
595:39 - a user State value the default is going
595:43 - to be an object with some kind of name
595:45 - property
595:46 - again whatever you want to place over
595:48 - here as well as the logout function
595:51 - that sets the user back to no
595:54 - no
595:55 - I want to pass both of them down to a
595:58 - user container and just to give you a
596:00 - hint yes you will have to pass those
596:03 - values through the nav links now in the
596:07 - user container I want you to display
596:09 - user as well as the button and then once
596:13 - the user clicks the button I want to set
596:16 - it equal to null now there's an extra
596:18 - challenge
596:19 - you can also use conditional rendering
596:22 - and basically if the user is null then
596:26 - you can display please login notice over
596:29 - here that's the final example but again
596:31 - this is an extra challenge our main
596:34 - focus is to get both of these values
596:36 - down from the nav bar to a user
596:40 - component and once you're ready to
596:42 - compare the results
596:43 - resume with the videos Okay so let's
596:46 - start working on the challenge
596:48 - first I want to navigate to that folder
596:52 - so again we're looking for context we're
596:54 - not looking for the final one
596:56 - we'll start working the star and we want
596:59 - to set up those components let's start
597:02 - with the main one so nav bar jsx let's
597:06 - set up the component okay awesome and
597:08 - then we want to do the same thing for
597:10 - the nav links as well as the
597:14 - what was the name
597:16 - I believe they named it user container
597:19 - yep that's the one so let's continue I'm
597:22 - going to go with nav
597:23 - links jsx again create the component
597:27 - okay awesome and then lastly we want to
597:30 - create that user container user
597:33 - container jsx again
597:36 - set up the component let's save now
597:39 - remember we have nested structure so
597:43 - I want to go to navbar and First grab
597:47 - the nav links so in the nav bar I will
597:51 - add a class here
597:52 - of navbar just for style so I'll say
597:56 - here nav
597:57 - let's add the CSS and the class is
598:00 - navbar and then in here inside of the
598:04 - nav bar I'll have the heading 5 with
598:07 - some kind of logo
598:08 - so in this case I'll go with context API
598:11 - and then I also want to grab those
598:13 - navlicks so let's set up that component
598:17 - and we want to import them like so let's
598:20 - save now I don't see anything because of
598:22 - course in here I'm importing the
598:25 - complete one so now I right away want to
598:28 - go I guess
598:29 - two hey app jsx and when I grab the nav
598:34 - bar from the star
598:35 - so again
598:36 - we'll have two of them and like I said
598:38 - I'm not placing anything inside of the
598:41 - container and since I still want to
598:43 - showcase the final one I think I'm gonna
598:46 - go with the react fragment
598:49 - so I'm gonna go here with star
598:51 - then it's not coming from the final it's
598:55 - actually coming from the Star and then
598:57 - let me set up that fragment first
599:00 - and then inside of the fragment we'll
599:03 - place a final so that's going to be on
599:05 - the top and then we'll have the star
599:07 - let's save it and I actually get the
599:10 - narrow because
599:12 - in the final one I'm looking for context
599:15 - and of course the moment there is no
599:17 - context now if you're wondering about
599:19 - the folder structure notice the final
599:21 - one there's going to be two examples
599:23 - there's going to be a prop drilling
599:25 - which is the one that we're going to be
599:26 - working on right now so if you ever want
599:29 - to compare the results look for prop
599:31 - Drilling and then there's going to be
599:33 - the context one so that's going to be
599:36 - our complete example with context API so
599:40 - in here I need to change the path where
599:42 - it's not going to be context it's
599:44 - actually going to be a starter and then
599:47 - nav bar let me save it this should do it
599:49 - and now notice
599:51 - so I have context API that's my logo and
599:54 - I have the nav links so up next I want
599:58 - to go to a now links and I want to set
600:01 - up the logic as well and in here it's
600:04 - going to be a div with nav container and
600:07 - then inside of it we'll have an old list
600:10 - with nav links and then the user
600:12 - container so I guess let's start by
600:14 - setting up that div we do want to add a
600:17 - class of nav container
600:21 - and then let's go with that on our list
600:23 - so this is where we'll display those
600:25 - links so an ordered list and let's call
600:28 - this nav links and in here list item and
600:32 - I'm just going to go with an href and
600:35 - for time being I'm just going to pass in
600:36 - the hashtag so we're not going to go
600:39 - anywhere and then let's copy and paste
600:43 - and this one is going to be about
600:46 - now after the unordered list I'm gonna
600:49 - display that user container so again
600:51 - let's use the Auto Imports let's grab
600:54 - the user container and now notice
600:57 - I have the links and I also have the
600:59 - user container and before we set up any
601:03 - kind of logic
601:04 - in the user container I want to set up
601:07 - those values in the navbar and
601:10 - effectively I want to set up the state
601:13 - value the user and I also want to get
601:15 - the logout one so let's go over here
601:18 - let me close the sidebar I'm going to go
601:20 - with use
601:22 - State like I said the default value is
601:25 - going to be that object in my case the
601:27 - name will be Bob so name is equal to a
601:30 - bob now what are we getting back well
601:34 - we want to get back the array
601:36 - the user and set user now we also want
601:41 - to set up right away what the logger one
601:44 - so const logout and as far as the
601:46 - function in here we want to go with set
601:49 - user and set it back to no
601:53 - and like I said the main
601:56 - challenge here is to get both user a log
602:00 - out down to a user container
602:03 - so not just the nav links but the user
602:07 - container how we can do that well since
602:09 - we can only pass props down
602:11 - we go to in nav links and we come up
602:14 - with a prop so I'm going to go with user
602:16 - is equal to user and then log out is
602:20 - equal to a logout
602:22 - let's save that now we want to go to a
602:25 - nav links and essentially yes even
602:28 - though we're not using any of these
602:30 - props in the nav links component we'll
602:33 - have to grab them and we'll have to pass
602:35 - them down to a user container so it's
602:39 - not an official name but effectively
602:41 - it's called prop drilling where you're
602:44 - passing
602:45 - through the components that are actually
602:47 - not using those props because again we
602:49 - can only pass props down and as you can
602:53 - see in this case we only have what three
602:55 - levels basically we have parent child
602:57 - and let's call it grandchild but it's
603:00 - pretty normal in the application to have
603:02 - five six or whatever levels so probably
603:06 - your next question is are we gonna have
603:08 - to do that well yeah if we're not using
603:11 - the state libraries or the context API
603:13 - which we're going to cover in the
603:15 - following videos essentially that's the
603:17 - setup there's no way around it so let's
603:20 - go back over here let's say that I'm
603:22 - going to be looking for a user and a log
603:24 - out and yep the same deal I want to go
603:27 - with user is equal to a user and I
603:32 - probably don't have to say that of
603:33 - course you can name this prop
603:34 - differently but I just find it
603:37 - convenient if we go with the same name
603:39 - so I'm gonna go logout is equal to a log
603:43 - out and then in the user container this
603:45 - is finally where we're going to use them
603:48 - so again same deal we go with user and
603:52 - we want to set up the logo and now let's
603:54 - work on pretty straightforward jsx where
603:58 - I'm going to set up a div I'm going to
604:00 - add a class name of user container and
604:04 - then inside of it for now I'm not gonna
604:07 - render anything conditionally I'll just
604:09 - say hey grab me the user and also set up
604:13 - a logout button so I'm going to have a
604:15 - paragraph with hello
604:17 - their comma then let's grab the user and
604:21 - remember the property his name and then
604:24 - right after the paragraph We will set up
604:26 - a button
604:28 - so button
604:30 - class name
604:32 - is going to be a button and then on
604:34 - click
604:36 - it's going to be equal to our logar one
604:39 - so log out here and as far as the text
604:42 - let's just go with logout let's save and
604:45 - notice I have Bob and once I click I
604:48 - actually set this equal to null now
604:51 - we're going to have an error here
604:53 - because once the user
604:56 - essentially is null then of course we
604:58 - cannot access the name property and in
605:02 - order to avoid this error remember we
605:05 - have the optional chaining where I can
605:08 - say Hey listen if the user exists then
605:12 - grab the name if not then just return
605:14 - undefined so no others
605:16 - once I click hello there and basically I
605:19 - have nothing there because the value is
605:21 - undefined and I also want to add to
605:23 - uppercase just to Showcase that we can
605:25 - use multiple
605:27 - optional training operators and I'm
605:30 - gonna go with two
605:31 - upper
605:32 - and case here let's save it so I'm
605:36 - saying if there's a user grab the name
605:38 - if there's a name then set it to an
605:41 - uppercase so now once I refresh notice I
605:44 - have Bob and then again once I click I
605:46 - have nothing and then lastly let's set
605:48 - up that conditional rendering where
605:51 - if the user exists then of course I want
605:54 - to provide the paragraph and the button
605:57 - however if there's no user I simply want
605:59 - to go with please login and for that
606:02 - I'll first set up a paragraph I'll say
606:05 - please log in and then above both of
606:08 - them for now I'm gonna go user and
606:11 - remember we go with question mark and
606:13 - then we have two options
606:15 - so first if it's true we return
606:18 - something and then if it's false so
606:21 - let's start here by cutting this out but
606:23 - there's another gotcha if you copy and
606:25 - paste there's actually going to be an
606:26 - error because notice we have effectively
606:29 - two adjacent elements and we can only
606:32 - return one
606:33 - now the way around that is again either
606:36 - to set up a div or we can go with a
606:40 - fragment copy and paste and now
606:43 - everything works and then in here since
606:44 - I'm returning only one cut it out and I
606:47 - can set it up so now notice since the
606:50 - user is no I have login
606:54 - however once I have the user I have
606:56 - there hello there Bob and once I click
606:57 - now essentially I log out the user now
607:01 - pretty much most of the functionality we
607:03 - already covered
607:05 - at some point during the fundamentals
607:08 - and tutorial like I mentioned already
607:10 - previously the main reason for this
607:12 - challenge was to give you a first-hand
607:15 - experience
607:16 - of such nested structure so if you do
607:20 - have
607:21 - a component a parent
607:24 - and you have the nested structure where
607:26 - you have some kind of child and that
607:28 - child has child on its own and you want
607:31 - to pass something down from the parent
607:34 - to let's say
607:36 - grandparent let's call it that then you
607:39 - will have to pass the props
607:42 - through all of the components even
607:45 - though technically this component is not
607:47 - using any of these two props all right
607:50 - and now let's take a look how we can use
607:52 - context API which is provided by react
607:55 - to essentially solve our issue like I
608:00 - mentioned already in the previous video
608:02 - if you want to see the exact example we
608:06 - just completed look for prop drilling so
608:10 - in the context one
608:11 - you'll actually see
608:13 - the setup which we're going to work on
608:16 - right now now the reason why I'm telling
608:18 - you that because I'll remove essentially
608:20 - the user and logout from the nav links
608:23 - as well as the nav bar and user
608:26 - container so we'll start from the
608:27 - scratch keep in mind that if you ever
608:29 - need a reference it's right over here in
608:31 - the final so one by one let's remove
608:33 - them because that's not how we're going
608:35 - to pass them down so let's remove over
608:37 - here
608:38 - let's save
608:39 - then we want to do the same thing in the
608:41 - now links
608:43 - effectively we're looking for a way to
608:45 - bypass
608:46 - this one or multiple components that we
608:50 - have sitting in between the main one the
608:53 - parent and then whichever component
608:56 - wants to use those values so let's
608:58 - remove this and we'll probably have a
609:01 - narrow right now so you know what
609:04 - let me just
609:06 - return something else for now again
609:08 - we'll remove this I just don't want
609:10 - react to start looking for the user
609:13 - value and all that let's just go with
609:15 - the return and we'll go with hello world
609:17 - let's save it we should be good to go
609:19 - now how we can pass those values
609:23 - down without doing the prop drilling
609:26 - well like I said we need to use context
609:29 - API now there's multiple ways how again
609:32 - we can invoke this if you have react
609:35 - imported you can go and react and then
609:37 - create context but again you'll have to
609:40 - import react of course notice once I
609:43 - save I'll have big fat error because
609:44 - react is not defined just like with huge
609:47 - state or we can right away import that
609:51 - correct so since we already have used
609:52 - State we can go to create context
609:56 - and essentially in the parent we want to
610:00 - invoke that create context and this is
610:03 - going to return two things it's going to
610:05 - return a provider component and a
610:08 - consumer component however
610:11 - since there is a huge context hook
610:14 - I mean there's really no need
610:17 - for the consumer however we will use the
610:20 - provider so first I want to go above the
610:24 - nav bar and I'll right away export since
610:27 - eventually we will import the context
610:30 - I'm about to create in the user
610:32 - container that's why I right away go
610:34 - export and then const and come up with a
610:37 - name and since we're working in the nav
610:39 - bar I mean kind of makes sense
610:42 - if I named the snap bar context that one
610:45 - is going to be equal to create context
610:47 - we can pass in the default value but
610:49 - we're not going to do that and
610:50 - essentially once we invoke this
610:52 - we get back bunch of useful stuff and we
610:56 - can log that one here
610:57 - so if we go here with context we should
611:00 - see a bunch of cool things in a console
611:02 - let me just
611:04 - clean it out notice
611:06 - essentially this is what we're getting
611:08 - back but
611:09 - our main interest is in this provider
611:13 - that's what we definitely want to get
611:15 - again
611:16 - we used to use consumer but now use
611:20 - context hook which we're about to cover
611:23 - actually replaced it so there's no need
611:26 - for it anymore and basically if we go
611:28 - here with DOT notice
611:30 - I have these options and the provider is
611:33 - what we're looking for
611:34 - so we want to grab that provider and go
611:37 - to a main parent basically the component
611:42 - which is going to provide those values
611:45 - and we want to wrap the return
611:47 - in that provider so we go to our nav bar
611:52 - and let's say not I think I can just
611:54 - move this and then we want to wrap our
611:57 - nav in the navbar context that's the
612:00 - name Dot and then the provider now
612:02 - what's really cool that provider has a
612:06 - value prop
612:08 - and essentially whatever you'll pass
612:10 - over here you'll have access anywhere in
612:13 - that tree again we have three components
612:16 - but please keep in mind you can have a
612:18 - setup with 15 components so anywhere in
612:21 - that component tree you'll have access
612:24 - to this value now
612:26 - you can simply go here with hello and
612:29 - you'll be able to pass it
612:30 - however as you're looking at it you're
612:33 - probably thinking what's the use case of
612:35 - hello I mean it's nice that I can access
612:37 - it in the user container but that's not
612:39 - what I'm looking for and you're
612:41 - absolutely correct
612:42 - so here's what we can do we can turn
612:45 - this value into an object so please keep
612:48 - in mind this is not a special syntax
612:49 - again I'm just simply going back to a
612:52 - JavaScript land and I'll set it up as an
612:55 - object
612:56 - that's it this is not a special Syntax
612:58 - for double curlies I keep getting these
613:00 - questions in the course q a
613:02 - so I really want to stress that I simply
613:05 - want to set up an object and if you
613:08 - want to make it more readable
613:10 - you can set it up over here you can
613:12 - create an object and then pass it
613:14 - directly here in a value if that's
613:16 - easier for you to read
613:18 - I'm not gonna do that but
613:21 - just an option so I have an object and
613:24 - now notice effectively I can pass both
613:26 - of them down here in the subject as
613:28 - properties I can say user is equal to
613:30 - user and logout is equal to a log out
613:33 - let's save that and now we need to go to
613:36 - a user container and notice how we're
613:39 - nicely bypassing the nav links and we
613:41 - want to grab those values and for that
613:44 - we'll need two things we'll need a
613:47 - navbar context that's why we're
613:50 - exporting and also
613:52 - we'll need a huge context Hook from
613:56 - the react so let's navigate to a user
614:00 - container
614:01 - and in here let's import both of those
614:03 - things the use contacts as well as nav
614:07 - bar context
614:08 - so I'm gonna go for now above the return
614:11 - again I don't want to get the error and
614:14 - essentially we want to go with use
614:17 - context talk which is a special hook
614:19 - which is looking for that context again
614:22 - this is coming from react
614:24 - just like you state use effect and all
614:26 - that
614:27 - and we want to pass in that nav bar
614:30 - context or whatever context you have
614:33 - so the one that's in the parent whatever
614:35 - you create over here you export and then
614:38 - the use context is going to be looking
614:40 - for that so here I can go with navbar
614:43 - and context and since my Auto Imports
614:45 - are working we're good to go now what is
614:48 - this returning well
614:49 - let's go back to your navbar what are we
614:52 - setting up over here an object correct
614:55 - so let's try this one out I'm gonna come
614:58 - up with a variable and I'll set it equal
615:00 - to a value and you'll notice nicely in
615:03 - the console that we have access to that
615:06 - object so every user with the name
615:09 - property as well as the logo
615:12 - so in my jsx I can either go with Dot
615:16 - and then grab the logout or user or we
615:20 - can do the structuring right so instead
615:24 - of grabbing the value I'll say yep I
615:26 - know for sure that I'm getting back the
615:28 - object so let's go here with user and
615:30 - then the logout and of course I simply
615:33 - want to return hello world and
615:35 - everything is going to work like peaches
615:38 - and again the main goal here is to
615:41 - bypass the navx notice
615:45 - networks is not getting any props it's
615:47 - not passing any props
615:49 - I'm getting everything directly here in
615:52 - the user container and my functionality
615:54 - still works and since we just covered
615:57 - custom hooks why don't we put our
616:00 - knowledge to a good use
616:02 - so notice in the user container
616:05 - we are getting used context and we're
616:08 - getting that nav bar context and
616:10 - essentially in any component all
616:13 - throughout your application I mean in
616:16 - this case of course it needs to be
616:17 - nested inside of the nav bar but in the
616:20 - following videos I'll show you
616:22 - how we can set up a global context
616:24 - hopefully that is clear pretty much
616:27 - anywhere where I want to use that yes
616:29 - I'll have to grab these two things I'll
616:31 - have to grab the use context as well as
616:34 - the navbar context
616:36 - now this is a good use case for a custom
616:39 - hook
616:40 - so instead of these two Imports I can
616:43 - set up one custom hook and then just
616:45 - import that
616:46 - so back in the nav bar
616:49 - I first want to come up with the name in
616:51 - my case I'm going to call this use app
616:54 - context but sky is the limit so let me
616:57 - add here custom hook and then
617:01 - effectively we want to export it because
617:03 - same deal we will use it so const and
617:07 - then call it use
617:09 - so notice we still using the used so
617:13 - that doesn't change
617:14 - otherwise the stuff is not going to work
617:17 - use app context that's my function and
617:21 - what do I want to do from this function
617:23 - I simply want to return use context
617:26 - which I'm importing over here
617:28 - and the nav bar context
617:30 - so effectively this line over here so
617:34 - first let me navigate back I'll remove
617:36 - both of them from this user container
617:40 - just so you can see that I'm not messing
617:42 - with you let me go to a nav bar
617:45 - copy and paste we don't of course need a
617:47 - nav bar context but we will need this
617:50 - use context in the enable one and as far
617:54 - as the logic we just want to invoke this
617:56 - used context once and we want to provide
617:59 - the nav bar context so I'm going to go
618:01 - with use context and then I'll provide
618:04 - nav bar context so now I want to save
618:06 - and again keep in mind we're exporting
618:08 - this so now in the user container I can
618:12 - replace this used context with use and
618:15 - then app context now please keep in mind
618:18 - that there's also one in the final
618:21 - so don't grab that one just set up this
618:24 - one over here let's save it and then
618:27 - notice how
618:28 - our functionality still works and if
618:31 - you're looking at it and you're like
618:32 - well this just saved us one line of code
618:35 - keep in mind when you use context
618:39 - globally against something that we're
618:40 - going to cover in the next video
618:43 - you'll be accessing
618:45 - that context quite a few times and then
618:48 - it's much easier to just use one hook
618:52 - instead of importing the use context as
618:55 - well as that particular context each and
618:58 - every time you want to access it in the
619:00 - component okay now let's see how we can
619:03 - set up a global context basically how we
619:06 - can provide some data to all components
619:09 - in our application now for this one I
619:12 - will create a new application just
619:14 - because I want to set up everything from
619:16 - scratch and if you want to access my
619:19 - final application basically the
619:21 - application I'm about to create
619:24 - I will add it to the main repo
619:27 - in the Z assets folder so as I'm
619:31 - recording this video of course that
619:33 - folder does not exist but by the time
619:35 - you're watching the video just go to the
619:37 - main repo effective way where you got
619:40 - the advanced react and then the last
619:42 - folder should be there and the name is
619:45 - going to be Z assets and in there you'll
619:47 - find this application now if you're
619:50 - interested you can also try to set it up
619:52 - yourself the global context and here are
619:56 - the steps I'm going to create a new
619:58 - application with feet and we're going to
620:00 - go with npm create and blah blah blah
620:03 - blah blah then we'll install
620:06 - dependencies and run npm run Dev
620:09 - to spin up the dev server in the source
620:12 - create a context jsx file and set up two
620:16 - things a global context with create
620:19 - context
620:20 - and a component which I'm going to name
620:23 - app context with one state value now
620:28 - from the app context return a
620:31 - globalcontext DOT provider the component
620:35 - and then wrap the entire application
620:38 - which we're gonna do in the main jsx and
620:42 - there's going to be a gotcha effectively
620:44 - we'll have to jog our memory on the
620:47 - children prop so if you're struggling to
620:50 - set this up this is totally fine now
620:53 - once we have wrapped our entire
620:55 - application
620:57 - then we want to set up a custom hook so
621:00 - we don't have to import two of those
621:01 - things
621:02 - when we want to access the context and
621:05 - then just try it in app GSX there's
621:09 - going to be app.jsx and in there just
621:11 - try to lock whatever you have in the
621:14 - value prop in the global context
621:16 - provider and if you can see some value
621:18 - that means that it's going to work
621:21 - everywhere in our application
621:24 - so let's get cracking and
621:27 - I think I'm just going to copy and paste
621:30 - there's no need for you to watch me how
621:33 - I tap this so I'm just going to go with
621:35 - City
621:36 - bus stop
621:38 - and let me
621:39 - massively zoom in copy and paste again
621:42 - npm create beat latest and Global
621:47 - context that's the name of the
621:48 - application
621:49 - Dash Dash or hyphen hyphen space dash
621:53 - dash template and then we want to go
621:55 - with react one so once that is done I'm
621:59 - going to open up a new window
622:01 - because I might want to showcase
622:04 - something and read me
622:05 - and this is again totally optional but
622:09 - I'll send them side by side
622:11 - so there's my browser
622:13 - that's my text error let me open up the
622:16 - integrated terminal we want to go with
622:18 - npm install and we also want to go with
622:22 - npm
622:23 - start or I'm sorry it's not create react
622:26 - app we're going to go with npm run Dev
622:28 - and I know I already have set this quite
622:31 - a few times but if both of those
622:34 - commands don't work one after another
622:37 - just run them separately result is going
622:40 - to be exactly the same and once I open
622:43 - up 5173
622:46 - this is what we should see on the screen
622:49 - and since we're now familiar with the
622:52 - use state
622:55 - this shouldn't look very foreign we have
622:57 - count set count your state and what do
623:00 - you know every time I click on a button
623:03 - I'm increasing the account
623:05 - so now let's set up that Global context
623:07 - please do that in the source so don't do
623:10 - it in a public or the node modules let's
623:13 - create a new file here and I'm going to
623:15 - call this context
623:17 - a new file
623:19 - let's go with context and jsx
623:23 - and first I guess let's set up that
623:25 - Global one
623:26 - so first let's go with const I'm not
623:30 - going to export that because there's
623:31 - going to be a global hook basically a
623:34 - custom hook that's gonna set up
623:36 - everything
623:37 - so I'm gonna go with global context and
623:39 - that is equal to create context and we
623:43 - just want to invoke that that's the
623:44 - first step after that we want to set up
623:46 - the component which we're going to
623:48 - return from this file and I'm going to
623:52 - call this app context that's going to be
623:55 - my function here
623:57 - as far as what we're returning well
624:00 - we're going to return a global context
624:02 - dot provider correct so let's go with
624:06 - return keyword
624:08 - and then let's set up that Global
624:10 - context dot provider
624:12 - and for now we don't have anything in
624:15 - there so we're not going to set the
624:16 - value and as far as
624:18 - what are we gonna set up in between the
624:21 - component tags well that's the gotcha
624:24 - that we're going to discuss in a second
624:26 - so for now don't return anything and of
624:29 - course we do want to export that so
624:31 - export default
624:33 - and we're looking for app app context
624:37 - okay good
624:38 - before we set up the value why don't we
624:41 - also
624:41 - create the actual State value in my case
624:44 - simply going to be name
624:46 - and set name and as far as default value
624:50 - I'm going to go with Peter okay good and
624:54 - then remember
624:55 - there is a special prop on this provider
624:57 - and the name was value I do want to pass
625:01 - in the object in here and inside of the
625:03 - object there's going to be a name
625:05 - property and also a set name property
625:08 - save that now both of them are
625:11 - effectively passed down but of course we
625:15 - haven't wrapped our entire application
625:17 - correct and as I said I don't know
625:20 - whether I covered this before but
625:23 - in es6 essentially we can do the
625:27 - shortcut so if you're looking at your
625:29 - like I don't understand how are we
625:31 - passing here name equals the name
625:34 - well if we have this kind of setup
625:37 - where the property name is basically
625:39 - equal to a variable and the same over
625:43 - here so set name is equal to set name we
625:47 - can shorten this up again if you have
625:50 - this kind of setup
625:51 - then essentially you can shorten this up
625:53 - and just type one
625:55 - in this case name and set name okay good
625:58 - we have covered that so now let's
626:00 - navigate to the main GSX because we want
626:04 - to wrap our entire application
626:06 - effectively our app component
626:09 - and it's located over here so unlike the
626:12 - nav bar
626:13 - where effectively we imported a nav
626:17 - links and then the user container inside
626:20 - of the knowledge now we want to wrap our
626:23 - entire application
626:25 - so we're not going to import for example
626:28 - app over here no we want to go to
626:30 - main.jsx we want to import our app
626:33 - context
626:36 - so the import is in place and now this
626:39 - is really up to you if you don't want
626:40 - the strict mode if you don't want those
626:43 - extra logs and all that you can simply
626:45 - remove it or just place the app context
626:48 - within the strict mode just please don't
626:51 - wrap the
626:53 - react trig mode in the app context
626:55 - that's not going to make sense so we
626:58 - want to go here we want to set up a App
627:01 - context and yes I'm basically creating a
627:03 - new component and I'll just remove this
627:05 - one over here so now we're good to go
627:08 - but there's one gotcha the moment we
627:10 - save we're going to see nothing on the
627:12 - screen
627:13 - uh if you're wondering why is that
627:15 - happening well remember long long long
627:17 - long long long long time ago we talked
627:21 - about the children prop I believe it was
627:23 - all the way back in the fundamentals
627:27 - and at the moment if we take a look at
627:29 - the context notice we have nothing in
627:30 - here so of course I can type here
627:32 - context and everything is going to be
627:34 - fine it's going to be displayed on the
627:36 - screen but essentially that's not the
627:38 - goal so I want to grab that app
627:42 - component and then since all my
627:45 - components are going to meet over here
627:46 - in the app
627:48 - I wanna wrap it in the provider and as a
627:52 - result all my components
627:54 - are gonna have access to in this case
627:57 - name and set name
627:59 - how we can do that well I kind of
628:01 - already gave you a hint
628:03 - since app right now is within the
628:06 - component tags
628:08 - now we want to go back to context and
628:11 - essentially we want to access the
628:12 - children we have few ways we can go here
628:15 - with props
628:17 - and then instead of the silly context
628:19 - I can set up correlate and we can go
628:23 - with props Dot children or
628:27 - of course we can just shorten this up
628:29 - and set up the structuring and as you
628:31 - can see the moment I save everything is
628:33 - correct so now everything is going to
628:35 - work
628:36 - again this is totally up to you if you
628:38 - want to go with props
628:40 - in my case I'm going to go children here
628:42 - and then I can remove the props as well
628:46 - before we go to app.jsx Let's also set
628:50 - up that custom hook
628:52 - in this case I'm going to export it
628:54 - right away and I'll call it use global
628:58 - context that's my custom hook as far as
629:01 - the functionality
629:03 - I want to invoke use context so please
629:07 - be careful most likely vs code will try
629:09 - to invoke the same one the use Global
629:12 - context we don't want to do that
629:13 - essentially we want to go with use
629:15 - context which is coming
629:17 - from react again this is a special hook
629:19 - that is looking for one thing and one
629:21 - thing only it's looking for the context
629:24 - you want access to in this case it's
629:27 - going to be a global context since we're
629:30 - exporting this I can nicely hop over to
629:34 - app jsx I know that I'm getting back the
629:37 - object correct so I'm just going to go
629:39 - here const and the structure it right
629:41 - away I'm not going to look for set name
629:43 - hopefully it's clear that I'll have
629:45 - access to both of them and that is going
629:47 - to be equal to my use Global context and
629:51 - I just invoke it and just to Showcase
629:53 - that everything works
629:54 - I'm going to log name so if I go right
629:58 - now
629:59 - to my devtools I'll see Peter which
630:02 - means that any component that is going
630:05 - to be in the app where basically all our
630:08 - components meet
630:09 - it will have access and not only those
630:12 - components but if I have any components
630:15 - inside of those components
630:17 - so hopefully that is clear this is how
630:19 - we can set up a global context using
630:22 - context API and also hopefully you see
630:24 - how useful is our custom hook where now
630:28 - we don't need to do those two Imports in
630:30 - every file essentially we just grab the
630:32 - use Global context and we're good to go
630:35 - okay and next let's cover use reducer
630:39 - hook and essentially you could think of
630:42 - user doucher as a light version of Redux
630:46 - one of the most famous State Management
630:49 - libraries out there so here's the deal
630:52 - as your application grows in size it's
630:55 - going to be very hard to manage
630:57 - everything with just use State
630:59 - especially if you have multiple
631:01 - developers working on the project
631:03 - that's where State Management libraries
631:06 - like Redux come into play since they
631:09 - provide much needed structure and set of
631:12 - rules which in a perfect world leads to
631:15 - less bugs and easier code management
631:19 - the problem with such libraries is that
631:22 - they require quite a bit of boilerplate
631:24 - code
631:25 - and some time to get used to the
631:28 - terminology so react released use
631:32 - reducer hook and I like to think of use
631:35 - reducer as a middle ground
631:38 - between using full-blown State Library
631:42 - and just using huge state
631:45 - now a few more things before we begin
631:48 - exploring user reducer first
631:51 - don't get frustrated if some of this
631:55 - stuff looks foreign and weird
631:58 - It's Perfectly Normal
632:00 - it simply takes time and few projects to
632:03 - get used to use reducer or any State
632:06 - Management library for that matter
632:09 - second because I have to introduce quite
632:11 - a few new weird sounding terms like
632:14 - dispatch and reducer and the action I
632:18 - purposely picked the example we already
632:20 - worked on
632:21 - and we'll just refactor it to use
632:23 - reducer
632:25 - hopefully that way it's going to be
632:27 - easier to grasp all of the funky use
632:30 - reducer terminology and lastly please
632:33 - don't think that from now on you only
632:35 - have to use use reducer or even more
632:39 - drastic refactor all your existing apps
632:42 - to use reducer it's a tool that has a
632:47 - very specific purpose and as you work on
632:50 - the bigger project you'll definitely
632:51 - notice when there's need for it
632:53 - basically when it's a good time to
632:57 - implement use reducer or completely
632:59 - switch your app to State Management
633:02 - Library like Redux toolkit okay and as
633:07 - far as the setup we're looking for
633:09 - folder 10 use reducer we want to grab
633:13 - the star and we're looking for use
633:15 - reducer and essentially if you take a
633:18 - look at the file and folder structure
633:20 - you'll see that we have only one file so
633:24 - I want you to grab that starter in the
633:27 - app GSX for now I have
633:30 - commented it out because I want to
633:33 - showcase something so essentially grab
633:35 - the starter and if you navigate to the
633:37 - file you'll
633:38 - notice that it's one of the projects we
633:41 - worked on before
633:43 - and effectively we cover that in New
633:47 - State when we talked about the arrays so
633:51 - this is the same exact example where
633:53 - we're importing the datum
633:55 - we set this using use state so that's
633:59 - our default one and then we display all
634:02 - the people and then we have an option to
634:05 - remove specific person or clear playlist
634:09 - like I said I purposely picked this
634:11 - example because I think it's going to be
634:13 - easier to grasp all of the use reducer
634:17 - Concepts since you don't need to worry
634:20 - about this functionality we already
634:22 - covered it before and let's start with a
634:27 - tiny challenge
634:29 - I want you to add to this one a reset
634:32 - functionality now don't worry we're not
634:34 - going to do that right away with
634:35 - userducer we'll simply do it by just
634:38 - adding a function
634:39 - and in that function essentially I want
634:43 - to set back the state to an array and
634:47 - once you have the function I want you to
634:49 - set up a button
634:51 - and once the user clicks the button then
634:53 - we set basically the empty array to all
634:56 - of the items and I want you to render
634:59 - that button conditionally a hint you'll
635:03 - most likely use the ternary operator so
635:05 - notice two options either I remove them
635:07 - one by one
635:09 - and once I have the clear list I have
635:11 - now reset button which essentially sets
635:14 - it back to all of the items or
635:16 - we can simply clear it and same deal the
635:19 - moment I have empty list I want to have
635:22 - a reset button which essentially sets it
635:25 - back to our default people all right so
635:29 - first let's work on that and then we'll
635:31 - Implement user reducer essentially I
635:34 - just want to add a little bit more
635:35 - functionality
635:36 - just so
635:38 - it's more interesting when we cover use
635:40 - reducer okay I'm done with my big speech
635:45 - let me navigate here use reducer
635:47 - hopefully I'm in the correct one yep
635:49 - it's in the star and essentially let me
635:52 - just set up the function I think it's
635:54 - going to be faster if I just copy and
635:55 - paste I'm looking for the function name
635:58 - which usually is the most
636:01 - hardest thing in programming
636:03 - so let's go here with a reset list and
636:06 - instead of empty array what do I need to
636:09 - do well
636:10 - I already have the data correct so I
636:12 - just pass here this is an empty one this
636:15 - just resets to
636:18 - our original array and then we want to
636:21 - keep on moving Keep On Moving I have
636:24 - this button now I need to set up a
636:27 - functionality where once the list is
636:30 - empty
636:31 - I'll display one button and if I have
636:34 - some values then I'll have the clear one
636:36 - how do we do that well we go here with
636:40 - the curlies and what is going to be our
636:42 - condition people and length correct let
636:45 - me double check it that's my state value
636:47 - so don't set this as data that's a
636:50 - little bit different that's our original
636:51 - array and here we're looking for people
636:53 - and I'll say if it's less than one I
636:57 - have two options what is my first one
636:59 - well that's a reset one correct because
637:02 - this is the one that
637:04 - is displayed if it's less than one then
637:07 - I want to reset and I'll work on that
637:10 - one in a second and now let me check if
637:12 - this is false basically if I have some
637:15 - items I want to display this button so
637:18 - let me cut this one out okay good that's
637:20 - my first one and basically I'll use the
637:23 - same structure so just copy and paste
637:26 - over here I just need to change some
637:28 - values around where the text inside of
637:32 - the button is not going to be clear it's
637:34 - going to be reset and instead of
637:36 - clearing the list what do we need to do
637:38 - yep correct we need to go with reset so
637:43 - now check it out again two options I
637:46 - think I'll pick this one just because
637:47 - it's faster and notice now I can reset
637:50 - now of course I'm showing this because I
637:53 - already have the complete application in
637:55 - my app.js
637:56 - my apologies notice here I have the star
637:59 - I will I guess remove the final there's
638:02 - no need hopefully I didn't make some
638:04 - egregious errors
638:07 - you save notice that the result is
638:09 - exactly the same so that's already a
638:11 - good start
638:12 - I can remove yep I can reset and I can
638:15 - also clear so that was the first
638:18 - Challenge and up next we'll get to know
638:20 - use reducer all right so now let's
638:23 - refactor our application to use reducer
638:26 - since there are going to be multiple
638:29 - steps of course we're not going to do
638:30 - that in one video
638:32 - but let's just do a basic setup and
638:35 - arrive out of the get-go I can say that
638:37 - most likely this video is going to be
638:41 - the most difficult one
638:42 - because unfortunately I'll have to throw
638:45 - multiple terms at you right out of the
638:49 - gate unfortunately there's no other way
638:51 - in order just to create that setup
638:54 - I need to provide you values and yes
638:56 - they have funky names so my apologies if
638:59 - something sounds weird my best
639:01 - suggestion is just to re-watch the video
639:03 - a few times and hopefully by doing so
639:07 - you'll understand the stuff better now
639:09 - eventually we'll remove this one but
639:12 - since I don't want to have some massive
639:14 - errors on the screen since I think it
639:17 - might get distracting for now I'll just
639:19 - leave this one over here again
639:21 - eventually this is going to be gone what
639:24 - I do want to do for now is just comment
639:26 - out this functionality because we'll
639:28 - move this one to a reducer a function
639:31 - we're about to create so it's not going
639:34 - to be sitting here anyway and I don't
639:37 - want that functionality to run so let's
639:39 - just comment this one out so as the user
639:41 - clicks any of the buttons nothing should
639:44 - happen that's exactly what I want so in
639:47 - order to get started with use reducer
639:50 - first we need to grab be hook correct so
639:54 - we go over here now of course we can do
639:56 - the Auto Import and all that but why
639:58 - don't we change this around and just say
639:59 - use reducer again all of this is coming
640:01 - from react now
640:04 - when it comes to you state what do we
640:06 - pass in
640:07 - we pass in the default State correct now
640:10 - with use reducer
640:13 - it's a little bit more complex we need
640:15 - to pass in two things we need to pass in
640:18 - a default State and we need to provide a
640:22 - reducer
640:23 - effectively a function
640:25 - that is going to manipulate the state
640:28 - like I said
640:30 - right away many funky terms now keep in
640:33 - mind that it's just a convention to call
640:34 - this reducer you can call this banana
640:37 - pudding it's totally fine but yes most
640:40 - likely you'll always see the reducer so
640:42 - let's start working on that I'm going to
640:44 - go to use reducer I invoke the hook and
640:46 - yes eventually we'll set up the values
640:48 - that we're getting back for now let's
640:50 - just worry what we need to pass in like
640:52 - I said two things a reducer function and
640:55 - a default state
640:56 - so first let's come up with that
640:59 - function
641:00 - I'm going to go to constant you simply
641:02 - want to create a empty Arrow function
641:04 - that's all you need to do the hardest
641:06 - part probably is going to be coming up
641:08 - with the name that's why I'll stick with
641:10 - convention and I'll just say producer
641:12 - not a vegan food truck so reducer here
641:16 - and for now let's just try it with empty
641:18 - one I'm not sure maybe we'll right away
641:20 - have to pass in the state but let me
641:22 - just try with an empty one so this is an
641:24 - empty function that's our reducer this
641:26 - is where we'll control essentially our
641:29 - entire state so we need to pass this one
641:32 - first so then
641:33 - we need to pass in the default State Now
641:36 - default State can be anything however in
641:39 - my case it's just going to be an object
641:41 - with a people property which is going to
641:45 - be equal to the data so pretty much
641:48 - whatever we have over here
641:50 - but yes normally you have multiple
641:54 - things in there you can have is the
641:56 - modal open have you fetched the data is
641:59 - it loading and all that kind of stuff
642:01 - um
642:02 - while we were working on a project
642:04 - you'll definitely see that for now let's
642:06 - just start very simply and create that
642:09 - default state so I'm going to go here
642:11 - with const and you know what I think I'm
642:14 - just going to move this one up because
642:16 - pretty much once we set up that default
642:18 - state
642:19 - there's not going to be much work in
642:21 - there but reducer yes we'll do quite a
642:24 - few things in there so let me just move
642:26 - this one up default state so that's the
642:29 - second thing you'll always always need
642:31 - to provide
642:32 - and of course keep in mind one thing
642:34 - just because initially you add people
642:37 - doesn't mean that
642:39 - you cannot add later for example is
642:41 - loading so as your application grows
642:44 - essentially you just keep adding these
642:46 - items in a default state
642:48 - that's how it works so don't worry that
642:50 - pretty much prior to setting up your
642:53 - whole application you need to right away
642:55 - come up with the state no keep in mind
642:57 - you can keep adding things that's
642:58 - perfectly fine and all of them
643:00 - eventually
643:02 - will be over here as our default state
643:04 - so let's pass it
643:06 - I'm gonna go with default State and
643:08 - we're pretty much done with this part
643:10 - so now let's move on the other side of
643:14 - the equation over here
643:16 - remember would you state what did we get
643:19 - back eight people and set people right
643:23 - so a state value and a function it's
643:26 - very similar
643:28 - with use reducer however
643:31 - we're getting back a state and we're
643:33 - getting back a dispatch so the main idea
643:36 - is the same but the implementation is a
643:38 - little bit different so let's try this
643:39 - one out I'm gonna go with const yes it's
643:42 - still an array but this time it's not
643:45 - just
643:46 - one state value this is our entire state
643:49 - so if I'll have 50 values in here yep
643:51 - it's going to be represented here in the
643:53 - state now again in my case I only have
643:56 - people
643:57 - but I want to stress one more time
644:00 - you can have a bunch of values and all
644:02 - of them will be represented here with
644:04 - the state
644:05 - now since this is an object how we can
644:07 - access things in our application well
644:09 - state DOT State DOT state DOT hopefully
644:12 - that's clear now the second thing is the
644:15 - dispatch so we're going to go here with
644:17 - dispatch again this is a naming
644:20 - convention
644:21 - a bobo is also a nice alternative
644:25 - and yes this function is updating the
644:29 - state but here's the biggest gotcha
644:31 - there's the biggest difference between
644:33 - you state and the use reducer when we
644:36 - talk about dispatch we'll have to do
644:39 - this
644:40 - somewhat funny uh syntax where let me
644:43 - keep moving and show you that so when it
644:46 - comes to dispatch we need to do this
644:48 - we'll basically go dispatch will invoke
644:51 - it like so and then we'll pass the
644:54 - typing now all of that is coming up I'm
644:56 - just showing you that essentially the
644:58 - area is the same yes we are updating the
645:01 - state however this is not happening
645:03 - directly
645:04 - so remember with set people or any of
645:07 - the set functions in each state
645:09 - we just invoke them and this immediately
645:12 - changed the value of people that's not
645:15 - how it works with user reducer so that's
645:17 - where that structure comes into play you
645:19 - cannot just willy-nilly come in here and
645:21 - start updating the state no what you'll
645:24 - do you'll dispatch you'll pass in the
645:27 - action basically what you want to do and
645:30 - then it's gonna go through the reducer
645:32 - and then whatever we get back here from
645:34 - the reducer it's going to be our new
645:37 - state so yes multiple
645:40 - steps and multiple new terms like I said
645:44 - this is probably going to be the hardest
645:46 - video because I just have to cover these
645:48 - things unfortunately there's no way I
645:50 - can show you a use reducer setup without
645:53 - talking about them that's not going to
645:55 - make sense so let me try this I might
645:57 - need to pass in state I kind of want to
645:59 - leave it for later videos but if I'll
646:02 - get some bugs of course we'll have to at
646:04 - least talk about it a little bit so this
646:07 - is going to be our initial setup now we
646:09 - can bravely
646:11 - take this one out so we won't need it
646:13 - anymore that's it we can remove it and
646:16 - then remember
646:17 - we have people now do we have a state
646:20 - value now well
646:22 - not really right so what do we have we
646:25 - have state and in there I have the
646:28 - people so let's keep on moving and you
646:31 - know what I'll just log so you can see
646:34 - the state
646:35 - but since again I don't want to have
646:37 - some unnecessary errors I can tell you
646:39 - right away that in a state we have the
646:41 - people and now instead of accessing the
646:44 - people directly we're grabbing the state
646:46 - so here's the deal
646:48 - as far as access yes we still do the
646:51 - Good Old State value and then since this
646:54 - is an object we're grabbing some
646:57 - particular property but the update is
647:00 - not going to be like this you're not
647:01 - going to go hey
647:02 - um let's update the people already in
647:05 - the state let's create new people and
647:07 - set state DOT people equal to that no
647:10 - that's not how it's going to work we'll
647:12 - have to use the dispatch it's going to
647:13 - go through the reducer and all that
647:16 - shebang so let's keep on moving at him
647:18 - here I also have people and I just want
647:21 - to add State again let me see whether
647:24 - we're getting back the error if we don't
647:26 - return the state we might so let me save
647:31 - and if everything is correct then I will
647:32 - talk about these suckers in next video
647:35 - the state and action that we need to
647:37 - pass in and up everything
647:39 - seems to be working and check it out
647:42 - so this is my state object
647:44 - and this is my array correct State
647:47 - object I have people and now everywhere
647:49 - in my application I basically grab these
647:54 - values whatever they are again in our
647:56 - case it's just a people but there can be
647:59 - more things in there so that's the
648:01 - general setup for use reducer and in the
648:05 - following videos of course we'll start
648:06 - talking about how we can update this
648:08 - state because it's nice to have a
648:10 - default state but obviously we want to
648:12 - implement some functionality okay we
648:15 - have the initial setup in place up next
648:18 - let's talk about how we can Implement
648:21 - some functionality and like I already
648:24 - probably mentioned 10 000 times in a
648:27 - previous video essentially when it comes
648:29 - to use reducer or again since it's a
648:33 - Redux light effectively the same
648:36 - functionality Works in Redux you want to
648:38 - dispatch something called action and
648:41 - that action is going to be handled here
648:43 - in the reducer and then whatever gets
648:46 - returned from
648:48 - the reducer is going to be the new state
648:51 - so here's the deal by default this
648:53 - function whatever we said over here
648:55 - whether that is a vegan food truck or
648:58 - banana pudding or Bobo whatever it gets
649:02 - two things it gets state so that is the
649:06 - state right before the update and the
649:08 - action basically what are we trying to
649:11 - do and since those are parameters we
649:14 - simply go State again just a convention
649:17 - and an action
649:18 - okay hopefully we're clear on that and
649:21 - now let's see how we can change
649:22 - something in that state basically how we
649:25 - can Implement some functionality
649:27 - because what we need to understand it
649:30 - was the same deal over here when we for
649:33 - example remove the item we just change
649:35 - the state value and essentially we want
649:38 - to do it over here as well we just don't
649:40 - want to do it directly you want to do it
649:42 - through the reducer and you can pick any
649:46 - of the functions I think I'll start with
649:47 - clear list because in my opinion it's
649:50 - going to be the easiest one to grasp and
649:53 - essentially if we want to update
649:55 - something if we want to change that
649:56 - state value we go here with dispatch
650:00 - and like I said we have this somewhat
650:03 - funky syntax where we invoked this patch
650:06 - but dispatch is looking for an object
650:08 - and we must must must must must must
650:10 - must must must must must provide type
650:13 - over here type property yes you just
650:15 - have to do that I didn't make that one
650:17 - up
650:18 - and as far as the type it's equal to a
650:21 - string so I can say here do something
650:25 - or I can type whatever string value I
650:28 - want and I'll handle that in the reducer
650:30 - now a convention
650:33 - is to use
650:34 - all uppercase and actually assign a
650:38 - variable to this one I'll show you in a
650:40 - separate video why we want to assign a
650:42 - variable for now let's just stick with
650:44 - convention and what are we doing over
650:46 - here
650:48 - we are clearing the list right so yes
650:51 - essentially I would go with clear
650:54 - and then list
650:56 - this is just a convention you can write
650:58 - it in camel case you can write it all in
651:01 - lower case that's totally up to you just
651:04 - remember that you'll have to handle that
651:06 - here in the reducer so whichever option
651:09 - you pick just stick with it otherwise
651:11 - it's going to be very confusing and
651:13 - don't be surprised if you are working on
651:15 - a bigger project with other developers
651:17 - and you'll see this syntax yes this is
651:19 - pretty common so essentially what I'm
651:21 - saying I want to clear a list so now
651:24 - dispatch is like okay reducer now you
651:27 - handle that I did my work
651:29 - I dispatched an action so back in the
651:33 - reducer
651:34 - like I said we have two things
651:36 - we have the state and we have the action
651:38 - so state is going to be the state before
651:40 - the update so once we're done with this
651:42 - function there's going to be a new state
651:45 - value please keep that in mind and the
651:49 - way we handle that let's just First Lock
651:52 - two things state or you know what let's
651:54 - start with an action just to Showcase
651:56 - what we have so notice here right so I
651:59 - have my array now once I click there's a
652:03 - big fat error and we'll talk about it
652:05 - why we have nothing on the screen but
652:08 - for now let's just focus on this one so
652:10 - notice here I have the clear list in
652:14 - line 9. so this is what I'm getting
652:17 - that's my action now why we have this
652:20 - whole thing not just type well because
652:22 - we can provide more data in here and
652:25 - you'll see that in a second once
652:27 - essentially we need to remove a person
652:29 - so we'll add more things over here but
652:31 - if we just log this action this is going
652:34 - to be the object that we're passing in
652:36 - now what are we interested in well we
652:39 - want to get the type correct because
652:41 - we'll do something with that type that's
652:43 - the one that screams hey I want to do
652:45 - something
652:46 - now
652:47 - why do we have this massive error well
652:50 - whatever we're going to return from the
652:53 - reducer
652:55 - is going to be that new state value so
652:58 - notice this line 27 here
653:00 - our state why is it undefined
653:04 - well because reducer is basically a
653:06 - function by default returns undefined so
653:09 - this underscores the point whatever
653:11 - you'll return here from this reducer
653:13 - will be that state value so check it out
653:16 - I can go here with return
653:18 - and I can say shake
653:22 - and bake
653:24 - now I'll still most likely have the
653:27 - error once I click the clear again once
653:30 - I save technically everything is fine
653:31 - but check it out I'll have the same
653:33 - error and again we can scroll down and
653:35 - we can see that nothing works why
653:37 - because again line 28
653:41 - shake and bake
653:43 - is my people property somewhere in the
653:46 - shake and bake
653:47 - and of course the answer is no so
653:51 - here's what we want to do first of all
653:53 - we'll talk about the default returns in
653:55 - a second that for now let me just get
653:56 - rid of it and I'll also remove the
653:58 - console log here in the reducer
654:01 - essentially one by one will check for
654:04 - these actions yes
654:06 - if you're wondering do we have to do
654:07 - this manually that's correct that's the
654:10 - setup we go here with if now quite often
654:13 - you'll see this switch operator used I
654:16 - actually don't like that approach again
654:18 - switch is an alternative to a bunch of
654:21 - if statements I actually find if
654:24 - statements more readable so we go here
654:26 - with if and then I want to check for
654:29 - action and remember the type is the
654:31 - property correct so we go with type and
654:34 - I want to check whether it is equal to
654:36 - now what am I passing here clear list so
654:39 - what do I need to set here same deal yep
654:42 - that's correct so we'll take it here
654:45 - copy and paste and that's why I'm saying
654:47 - you can come up with whatever string
654:50 - value you want over here just make sure
654:52 - that you use the same one in the reducer
654:55 - otherwise it's not going to work and
654:57 - then we need to set up the functionality
654:59 - so whatever we'll return from this is
655:02 - gonna be my new state value
655:04 - so how our functionality is going to
655:06 - look like well we'll go with the return
655:08 - because we want to return something and
655:11 - essentially I want to spread out the
655:15 - current state values why well because
655:18 - even though I'm clearing the list keep
655:22 - in mind that if I have is loading over
655:24 - here and let's set it equal to false
655:27 - what do you think is going to happen if
655:29 - I'll just return empty array yes as far
655:32 - as the people array my functionality is
655:35 - going to work but keep in mind
655:37 - if I'm not going to include this is
655:40 - loading then essentially your reducer is
655:42 - going to return a new state and that is
655:46 - loading is going to be gone
655:48 - so just like previously
655:50 - effectively we want to spread out or
655:52 - copy
655:54 - the current state values so this is the
655:57 - current state before this update and we
655:59 - want to spread them out we want to copy
656:02 - them
656:02 - so now we're also passing this is
656:05 - loading otherwise it's going to be gone
656:07 - and then we want to overwrite then I
656:10 - want to go with okay what is going to be
656:12 - the new value of the people well we
656:15 - wanna set it equal to an empty array
656:17 - correct so we go here with people
656:19 - and check it out it's not different
656:23 - to what we have already in a clear list
656:25 - we're just doing that in reducer and I
656:27 - really want to stress that point that's
656:29 - why I picked this particular example so
656:32 - now let me save it let me clear out the
656:36 - console app a bunch of errors in there
656:38 - and now everything should work where
656:40 - again
656:41 - in clear list we dispatch a specific
656:45 - action called clear list and then in the
656:49 - reducer
656:50 - we handle that I check for Action type
656:53 - I grab the current state whatever it is
656:57 - of course now we have the default one
656:58 - but keep in mind that as we add more
657:00 - functionality of course it's going to
657:02 - update itself
657:04 - so the state
657:07 - is going to be the current state before
657:08 - that particular action and then we
657:11 - return a new value
657:13 - this is our new state this is what we'll
657:16 - see so now let me clear and check it out
657:19 - notice everything works here
657:21 - so there was no error and notice this is
657:26 - my new state now
657:28 - so initially I had four items and now I
657:30 - have zero however notice how nicely we
657:33 - still keep the is loading so we did not
657:36 - lose this one over here so essentially
657:40 - that's the general setup when we want to
657:43 - update something in the state with
657:45 - dispatch
657:47 - we need to provide a type which is going
657:48 - to be our action we need to tell what
657:51 - we're going to do
657:53 - and then in the reducer we handle that
657:55 - type and whatever we return from the
657:58 - reducer is going to be our new state
658:00 - value okay and before we set up rest of
658:03 - the functionality let's just talk about
658:05 - the conventions and first let's start
658:08 - with actions like I already previously
658:11 - mentioned it can be any string you want
658:15 - but in order to avoid some weird typos a
658:20 - convention is to set this one up as a
658:23 - variable
658:24 - and then you're just avoiding some silly
658:27 - bugs just to Showcase that if we go back
658:30 - to our application notice in here we
658:33 - have clear list but what if in the
658:35 - reducer I mistyped and I said clear list
658:39 - now do these ones match
658:42 - and
658:44 - the answer of course is no so now what
658:46 - happens when I clear the list well I'll
658:49 - have big fat error because
658:52 - we are right now returning undefined
658:55 - that's the default one since
658:57 - we're not hitting this condition correct
659:00 - and a way around that is effectively to
659:04 - set up variables
659:05 - that have the same name so if you have
659:08 - clear list yes the variable name is also
659:10 - going to be clear list so
659:14 - why don't we right away set up those
659:16 - variables we have only three pieces of
659:19 - functionality so it's going to be pretty
659:21 - quick I'm gonna go with clear list and
659:24 - the other one is equal to my clear and
659:26 - underscore list then I want to do the
659:29 - same for reset something we're going to
659:31 - work on in the next video so reset list
659:35 - now that one is equal to reset and
659:38 - underscore list and then lastly I have
659:41 - remove item so again const and remove
659:44 - item and at the very end of this section
659:48 - will actually set it up in a separate
659:51 - file and we'll import it because that is
659:54 - a pretty typical setup since you're not
659:57 - going to handle everything in just one
659:59 - file so remove underscore and then item
660:02 - and now where I'm checking in the
660:05 - reducer as well as in the clear list
660:08 - where I'm dispatching instead of passing
660:10 - this string directly I go with clear
660:14 - list that's my variable which holds the
660:18 - string so this just
660:20 - omits some weird bugs let's save this
660:25 - let's first double check
660:27 - we don't want any bugs here yep we can
660:30 - nicely do so and now let's talk about
660:33 - the state that we're returning from
660:36 - reducer
660:37 - you say what if I go to a reset list
660:41 - something we're going to work on in a
660:43 - second
660:44 - and just pass some random stuff now this
660:47 - could be because I just haven't created
660:50 - yet the functionality in the reducer to
660:53 - handle that dispatch or I just for some
660:56 - weird reason access to your wrong
660:58 - variable what if I do something along
661:00 - the lines of type and then something
661:03 - again we'll have big fat error correct
661:06 - because we're not handling it here and
661:10 - essentially we have two approaches just
661:12 - to Showcase bam this is what we'll get
661:14 - we only have clear list over here and
661:18 - you can always return each state like so
661:21 - so I have bunch of conditions I'll check
661:24 - for reset list I'll check for remove
661:26 - item and all that now if
661:30 - the action type does not match any of my
661:33 - conditions I'll simply return H state
661:36 - so notice a clear that should definitely
661:39 - work and once I reset technically
661:41 - nothing happens I'm just returning a
661:43 - state
661:44 - which was right before the update and
661:46 - since we did not perform any update I
661:50 - just returned State and call it a day
661:52 - now this is a valid approach however
661:56 - how are we going to know if we have a
661:59 - bug
662:00 - so alternatively you can actually throw
662:02 - error and this is very useful because it
662:05 - right away tells you like something's
662:08 - wrong with your application you need to
662:10 - check it and the way we do that and
662:12 - I think I'm just going to leave this one
662:14 - for your reference just in case so
662:16 - return State and the way we throw the
662:19 - error we go through new error again this
662:22 - is a JavaScript thing we're not making
662:25 - this up just because we are in react
662:27 - then I'll set up a template string and
662:29 - you'll see in a second why so I'll say
662:31 - no matching and essentially I'll look
662:36 - for the action type action and then type
662:41 - so access it and I'll just add here a
662:44 - text action and type let's save this and
662:49 - like I already said probably
662:51 - twenty thousand times effectively this
662:54 - just helps me if I see this I know that
662:57 - listen somewhere I'm dispatching an
663:01 - action that I'm not handling it that's
663:03 - very useful notice reset bam and at
663:06 - least I can go to console and I can be
663:07 - like no matching something action type
663:10 - so let me double check
663:13 - the action that I'm dispatching so
663:16 - essentially those are the conventions
663:19 - when it comes to actions as well as how
663:22 - we handle an action that we're not
663:25 - catching in the reducer all right and
663:29 - once we're familiar with the
663:30 - fundamentals now let's work on a small
663:34 - challenge where
663:35 - you can try to reset the list yourself
663:38 - so set up a dispatch and handle the
663:42 - action in the reducer and once you're
663:45 - ready to compare the results resume with
663:48 - the video so
663:50 - I'm going to navigate to use reducer
663:52 - basically I'm looking for reset the list
663:56 - instead of something
663:58 - I'll use my variable and what is that
664:01 - well that is reset list awesome
664:04 - I'm pretty sure I can remove this one as
664:07 - well as the previous one here
664:09 - and then let's just scroll up and inside
664:13 - of the reducer right after my clear list
664:15 - I'll set up the reset one now please
664:18 - keep in mind in this case order does not
664:21 - matter if I place it before or after
664:24 - clear list I simply want to check again
664:28 - for Action I think in order to speed
664:30 - this up I'll just copy and paste we're
664:32 - not checking for Clear list we want to
664:34 - go with reset so now notice how nice it
664:37 - is that we have that variable which
664:39 - right away grabs me in that string
664:42 - and instead of
664:44 - returning empty I'll just set it equal
664:47 - to data that's all we have to do again
664:50 - let's refresh so we don't have
664:52 - the errors in the console and let's just
664:55 - try it out
664:56 - yep
664:57 - it's empty and once we click on reset we
665:00 - set it back to data array okay and we
665:04 - also want to do that with a remove
665:05 - person our last piece of functionality
665:07 - and again if you want to set it up
665:10 - yourself
665:11 - set up a dispatch and then handle that
665:14 - action in the reducer a tiny hint as far
665:19 - as ID
665:20 - you want to pass it as an extra property
665:23 - in the object the one that you're
665:26 - passing into a dispatch so let's get
665:29 - cracking I'm going to navigate to use
665:32 - reducer I'm looking for a remove item
665:35 - and here we want to go with this patch
665:38 - we want to invoke it we want to pass in
665:40 - the type and in this case I'm looking
665:43 - for remove item comma and you can
665:47 - definitely pass here the ID like so you
665:50 - can go with ID equals to any because
665:52 - keep in mind that if you don't pass the
665:55 - ID how are you gonna know which item you
665:58 - want to remove I mean remove item okay
666:01 - but which one
666:02 - so you can set up the condition you can
666:05 - even return a state but it's not going
666:07 - to make sense if you don't have access
666:09 - to that specific ID
666:12 - and you can pass it like so ID equals to
666:16 - NAD however the convention is to call
666:18 - this property a payload
666:20 - set it equal to an object even though
666:23 - you're passing in one property yep set
666:26 - it up as an object and then pass the ID
666:29 - the name whatever so let me just
666:32 - showcase the
666:34 - could mention we go with payload that's
666:36 - our second property it is an object yep
666:39 - and then in here we go with ID and then
666:42 - equals to an ID
666:43 - so now let's navigate up
666:46 - and in the reducer right after reset
666:48 - list
666:50 - I want to come up with another condition
666:52 - I'll say if action type and in this case
666:55 - I'm looking for remove item if that is
666:59 - the case what do I want to do well first
667:01 - let's just start by returning a state
667:03 - and I want to showcase where we have
667:07 - that ID right now so I'm going to go log
667:09 - and then I'm just going to look for
667:11 - Action let me save and then you can
667:14 - click on any of them and check it out
667:17 - you'll see here remove item and then
667:19 - you'll see the payload so in order to
667:22 - grab that ID what do we need to do well
667:24 - first of all my spelling and notice this
667:28 - is even with the extension so just
667:31 - imagine how well air quotes I'm doing
667:34 - without it so this is a payload my bad
667:37 - and let me save it again basically we
667:39 - want to go with payload and then Dot
667:43 - and then the ID that's what we have to
667:45 - do so type is remove item and then they
667:48 - payload over here
667:50 - so now let's navigate to that condition
667:53 - and the setup is going to be pretty much
667:56 - the same I'm gonna go with people filter
667:59 - right so of course I'll have to access
668:01 - it using state I'm going to get back to
668:04 - new people and in here instead of ID
668:08 - I'll say action payload and ID and of
668:12 - course I can destructure it so let me
668:14 - take this one up there's no need to set
668:17 - it from the scratch again the difference
668:20 - right now is that
668:21 - people is in a state
668:23 - so we go here with state DOT people and
668:26 - the second thing this ID is located in
668:29 - the action dot payload Dot and then the
668:33 - Eddy and like I just said before of
668:36 - course you can destructure it above you
668:39 - can look for ID which is located in the
668:42 - action payload and as far as what we're
668:45 - returning well instead of State we're
668:49 - going to go with dot dot state so we
668:51 - return all of the properties and then
668:54 - let's set people
668:57 - equal to our new array which is going to
669:00 - be new people
669:02 - and that's it that's all we have to do
669:04 - now again let's be clear we have a bunch
669:07 - of things in here
669:08 - doesn't look like I have any more logs
669:11 - pretty sure I can remove this one and
669:14 - our functionality should work check it
669:17 - out I have the list I can clear it I can
669:20 - reset and I can move them one by one we
669:23 - get to an empty array and we set it back
669:26 - to I believe four items okay and lastly
669:30 - in the use reducer section I want to
669:33 - show you
669:35 - the approach we use as our application
669:38 - grows basically
669:41 - as we're getting more and more actions
669:44 - and we handle them in the reducer
669:47 - it's not going to be
669:50 - easy to keep it in one file as you can
669:53 - see it's getting hard to read and
669:55 - therefore we just essentially split it
669:57 - up of course in our case we have only
669:59 - three actions
670:01 - so this is only going to make sense if
670:05 - you're getting more actions but still
670:08 - the structure is going to be exactly the
670:09 - same and if you want you can work on it
670:12 - yourself essentially create a new file
670:15 - I'm going to call this actions JS and in
670:19 - this case since we're not going to be
670:20 - creating a component we can get away
670:23 - with just JS I think this is too much
670:26 - and then you want to set up all the
670:29 - actions from the use reducer in there
670:32 - and you want to export them
670:34 - and of course you want to import them in
670:38 - the user Edition since you'll still need
670:41 - to use them you just want to keep them
670:43 - in a separate place and as soon as this
670:46 - is not reducer this is actions like so
670:50 - then you also want to do the same thing
670:52 - with the reducer
670:54 - copy and paste the logic in that file
670:56 - and then keep in mind that you'll still
670:59 - need an actions
671:01 - so yes you'll have import for actions in
671:04 - two places in use reducer as well as the
671:08 - reducer JS and then lastly from the
671:11 - reducer JS export reducer and then
671:14 - import it in the use reducer
671:18 - so let's get cracking I'm gonna go with
671:21 - new file I'll call this actions Js
671:25 - beautiful
671:26 - and then the second one is going to be
671:29 - reducer JS as far as the actions I think
671:33 - it's going to be more straightforward
671:35 - where in the reducer I just want to grab
671:38 - them here
671:39 - copy and paste and we simply want to add
671:42 - those exports
671:44 - since we'll use them in the use reducer
671:49 - as well as the reducer so now if we go
671:52 - back
671:52 - to a use reducer
671:55 - we want to go above the default state
671:58 - remember we have a bunch of things right
672:00 - now coming from the file and one by one
672:04 - we can just access them so clear list
672:06 - first one then reset
672:09 - list and then lastly we have remove item
672:13 - so all of them are coming from the
672:15 - actions and if everything is correct
672:18 - then the functionality is still going to
672:20 - work so that's the first step we
672:22 - separate the actions now let's do the
672:24 - same thing with reducer and just so we
672:28 - can speed this up I can tell you right
672:29 - away that we'll need those actions in
672:31 - the reducer so copy and paste yep that's
672:34 - going to be the setup pretty much for
672:36 - every action that you have you'll need
672:38 - to import it most likely in two places
672:40 - where you dispatch it and also in the
672:43 - reducer that's quite typical setup
672:46 - so let's go with our reducer right now
672:51 - take this one out
672:54 - copy and paste and then we want to
672:56 - export so export default
672:59 - and then reducer beautiful let's save
673:03 - that and then back in the user educer we
673:06 - also want to import the reducer and I'm
673:10 - gonna try to do the Auto Import let's
673:12 - see whether that works yep so I can
673:14 - nicely grab my reducer and like I just
673:17 - said if everything still works
673:20 - which by the way it doesn't data is not
673:23 - defined ah you see something really
673:26 - interesting that I forgot to mention of
673:28 - course we also want to grab the data in
673:30 - the reducer right now since we're using
673:33 - it over here so let me add that one to a
673:37 - readme
673:38 - where I have the reducer import actions
673:42 - import data
673:45 - so let's go back to I guess user user
673:49 - first let's copy this one since it's in
673:52 - the same folder we don't need to change
673:53 - the path
673:55 - simply you want to copy and paste and
673:58 - now everything should work so let's try
674:00 - this one out
674:01 - I can clear I can reset and I can remove
674:04 - them one by one
674:06 - so those are the fundamentals of user
674:09 - reducer and now you're ready to move on
674:12 - to the next topic okay and up next let's
674:15 - see how we can test and improve the
674:18 - performance of our react applications
674:21 - now before we begin few disclaimers
674:24 - react as fast by default so all the
674:28 - techniques we're going to discuss in the
674:30 - following videos
674:32 - make way more sense when you are working
674:35 - on a bigger application not a small
674:38 - to-do list type of application
674:41 - also please keep in mind that I
674:43 - purposely picked simple
674:45 - and straightforward examples just so we
674:49 - can spend all of our time and energy on
674:52 - the performance topics okay and at the
674:55 - very beginning of our react performance
674:57 - Journey let's see what exact issue we're
675:01 - trying to solve so first in the app jsx
675:05 - navigate to this folder so tutorial 11
675:08 - performance starter 0 1 and Lower State
675:13 - and once you get there you'll see that
675:16 - it's pretty typical application I have
675:19 - here index GSX this is where
675:22 - my components meet in this case it's
675:25 - just a list and also there's a person
675:28 - component now in the
675:30 - index.jsx I have two State values one is
675:34 - people
675:35 - which is using data which is coming from
675:37 - our data file as the default one
675:41 - and I also have the count
675:43 - and the initial value is zero so at top
675:47 - I have the button and below it I have a
675:50 - list component where I'm passing the
675:53 - people prop
675:55 - you can probably already guess that in a
675:57 - list I'm just going to iterate over it
675:59 - and return a person component and in a
676:03 - person component I simply render a name
676:06 - and in here I have a console log that's
676:09 - it I mean it's not a magical application
676:13 - so here's what I want to show you though
676:16 - what's really interesting that every
676:19 - time I will click on a button and I'll
676:22 - increase the count
676:25 - my person component will re-render so at
676:30 - the moment you're looking at the console
676:31 - you can see okay I have four renders
676:33 - well that makes sense I have four people
676:35 - in the array I can clearly see that on
676:38 - the screen
676:38 - however what we probably don't expect is
676:42 - this notice every time I click
676:45 - I'm getting more renders now is it the
676:49 - end of the world in this application
676:50 - absolutely not again these are just
676:53 - example applications where we're trying
676:56 - to take a look at the issue and what
676:58 - Solutions we have however
677:01 - in a bigger application if you have a
677:04 - component tree of
677:05 - whatever 60 components yeah that is an
677:09 - issue if you're basically re-rendering
677:11 - for nothing you're just changing one
677:13 - value here in the Lower State component
677:16 - and then
677:18 - your entire tree
677:19 - constantly just re-renders now before we
677:24 - take a look at the tools and solutions
677:25 - and all that let's discuss why is that
677:27 - happening so if we navigate back to a
677:31 - readme file you'll see that
677:33 - when we covered re-renders I mentioned
677:36 - this
677:37 - component re-renders when the state
677:40 - or props change correct
677:44 - but if you take a look at the setup
677:47 - right now you
677:48 - are probably wondering okay but nothing
677:51 - changes over here so the people stay the
677:53 - same as well as the person stays the
677:56 - same right whatever I'm passing in the
677:59 - list
678:00 - it's not changing it's pretty much the
678:01 - same thing I'm just passing in that
678:03 - person object
678:04 - so there's another reason why components
678:08 - re-render and that is when the parent
678:10 - element re-renders so what's happening
678:14 - here in the index.jsx every time
678:17 - we update the count what do we do we
678:20 - trigger re-render correct we cover that
678:22 - when we talked about use State the set
678:24 - function
678:25 - and what happens
678:27 - the list which is a child also
678:30 - re-renders
678:31 - once the list re-renders what's
678:33 - happening with person component it also
678:36 - re-renders
678:37 - and before we
678:40 - take a look at the tools
678:42 - let me also quickly cover something that
678:44 - has been popping up
678:46 - in a course q a and essential is this
678:50 - setting up a use effect is not going to
678:53 - solve our issue so let me navigate here
678:55 - notice this use effect
678:57 - let me
678:59 - save and refresh yep I have now two
679:01 - console logs four for render and four
679:04 - for this log inside of the user effect
679:07 - and technically as I'm clicking I only
679:10 - see the render however
679:13 - this doesn't stop the component from
679:15 - re-rendering essentially the only thing
679:18 - we're doing we're invoking whatever
679:20 - functionality we have here in the user
679:22 - effect when the initial render takes
679:25 - place
679:26 - but
679:27 - the component itself still keeps
679:30 - re-rendering
679:32 - so yes it's a solution if you have some
679:34 - kind of function that you don't wanna
679:36 - trigger each and every time the
679:38 - component re-renders however it's not
679:41 - going to solve the issue of person
679:43 - component re-rendering just because the
679:46 - parent component re-rendered and if you
679:49 - still don't believe me in the next video
679:52 - we'll cover tools and then you'll
679:54 - definitely see what I'm talking about
679:57 - and before we take a look at our first
679:59 - solution let's see how we can utilize
680:01 - react Dev tools to measure the
680:04 - performance of our application needless
680:07 - to say that my assumption is that you
680:10 - already have installed the react Dev
680:12 - tools so if you haven't yet please
680:15 - reference the react fundamentals part
680:18 - where I covered the install
680:21 - step by step and once we install the
680:24 - tools we'll get these nice tabs
680:27 - in the devtools the components and the
680:30 - profiler and throughout the course we
680:32 - have been looking at the components
680:34 - however in this section we'll spend a
680:36 - lot of time in the profile and before we
680:39 - navigate to the profiler let's also
680:41 - discuss something very important if I
680:44 - navigate through my extensions
680:46 - while I'm developing I can see that the
680:49 - react developer tools have that red icon
680:52 - and once I click on it notice it right
680:55 - away tells me that the page is using
680:57 - development build of react and something
681:00 - important to keep in mind
681:03 - by default while we're developing our
681:05 - application is going to be slower
681:07 - because react is doing
681:09 - extra checks so don't be surprised if
681:12 - your development application is slower
681:15 - again that is happening for a reason and
681:18 - that is happening by default so for
681:20 - example if I navigate to one of the
681:22 - projects we worked on during the course
681:24 - and notice this is a hosted URL and if
681:27 - I'll check I'll see that this one is
681:30 - actually blue and this is also something
681:32 - very important to keep in mind you don't
681:35 - want to ship your development
681:37 - application to production
681:40 - so you don't want to host your
681:42 - development application
681:43 - well I will because it's not meant for
681:46 - production
681:47 - so whenever you want to push this up to
681:50 - production make sure that is actual
681:53 - production ready application hopefully I
681:56 - make myself clear and once we navigate
681:59 - back
682:00 - now let's go to a profiler and before we
682:04 - even look at anything let me just show
682:06 - you my setup so we're all on the same
682:09 - page so once I click over here notice as
682:11 - far as the general
682:13 - I'm using the Dark theme but of course
682:15 - you can switch to light or Auto or
682:17 - whatever
682:18 - then as far as density I went with
682:21 - comfortable I just like that they're
682:22 - spanning all across and this one is very
682:25 - Nifty this checkbox and you'll see in a
682:27 - second why basically every time I'll do
682:30 - something it's just gonna highlight the
682:32 - components that are re-rendering then we
682:36 - have debugging in here I have first two
682:39 - check boxes and then when it comes to
682:42 - components I'm just expanding the tree
682:44 - by default and I don't think I changed
682:48 - anything in here I have this setup and
682:50 - then for the profiler I just have record
682:53 - y each component rendered while
682:55 - profiling and essentially if we want to
682:58 - take a look what's happening in our
683:00 - application we just go to this button
683:03 - notice the start profiling it's going to
683:06 - turn red and then start doing something
683:08 - in the application and like I mentioned
683:10 - before
683:11 - I like that option where it highlights
683:14 - pretty much
683:15 - all the components that are re-rendering
683:18 - and
683:20 - I'm going to use this ranked I just
683:22 - prefer this setup better but of course
683:24 - you can also use this one
683:27 - and effectively you can see that okay my
683:30 - application loads right I expect all of
683:33 - them to render then on every button
683:36 - click notice all of my components
683:40 - re-rendered and it even nicely tells me
683:43 - why the parent component rendered
683:47 - so what happens
683:49 - all the items in my list are
683:51 - re-rendering pretty much I clicked 13
683:54 - times and same scenario now of course
683:57 - the times are going to be different and
683:59 - all that but that's not the main point
684:01 - the main point is
684:03 - that all my components are re-rendering
684:07 - just because I'm changing one value in
684:10 - the state and in the upcoming videos
684:13 - we'll cover possible solutions to such
684:16 - problem okay and what's our first
684:19 - possible solution well we can lower the
684:22 - state
684:23 - in other words
684:25 - I could just move the state variable as
684:29 - well as the button to a separate
684:31 - component let's think about it do we
684:34 - really need this count over here in the
684:37 - Lower State I mean I'm just showing it
684:40 - in a button
684:42 - so simply I could create a different
684:45 - component let's call it counter move all
684:48 - of the logic over there
684:50 - and then
684:51 - just import that in the Lower State and
684:55 - as a result yes we will be updating that
684:58 - state value but that is not going to
685:00 - trigger re-renders in the Lower State so
685:04 - let's try this one out when navigate to
685:06 - the star we want to create a new file
685:09 - and we'll call this counter jsx and once
685:13 - I'm here I'm just going to create that
685:15 - new component and then basically we want
685:17 - to jump back to index.jsx and grab the
685:21 - values I guess let's start with our
685:24 - return and in this case I can just cut
685:26 - everything out but that is not going to
685:28 - be the case with the import so make sure
685:30 - that you leave that use stately imported
685:32 - because in the index we're still using
685:35 - it correct so this one just copy
685:37 - let me set it up above the counter
685:41 - let's go over here copy and paste and
685:43 - then in here I just want to grab this
685:45 - count one
685:46 - so this one again we're cutting it out
685:49 - set it up over here in the counter and
685:51 - then lastly we wanna
685:54 - go back to the index and we want to set
685:56 - up that counter component so counter
685:59 - component let's save that and now let's
686:03 - use the dev tools that we covered in the
686:05 - previous video so now let me navigate
686:07 - back Let me refresh
686:09 - that's always a good starting point and
686:13 - then let me again record notice I'm
686:16 - starting profiling and I can right away
686:18 - see that only my box
686:21 - is being highlighted which essentially
686:23 - is a good thing that means that only
686:25 - this counter component is re-rendering
686:28 - our not the rest of the list so now let
686:32 - me stop over here and notice all this
686:34 - time only the counter is rendering right
686:37 - so that's my initial render and then all
686:40 - of these times I'm clicking on a button
686:42 - only the counter is basically
686:45 - re-rendering why well because State
686:46 - change notice
686:48 - why this rendered well hook one changed
686:51 - which effectively is our name now
686:54 - million dollar question are you going to
686:57 - be able to do that in all the instances
686:59 - of course not
687:00 - but this is definitely something I want
687:03 - you to consider before you grab the
687:06 - memos and use callbacks and all that
687:10 - they're going to be instances where you
687:12 - can simply just split up the logic
687:15 - so instead of jamming everything in one
687:18 - component and then having those
687:20 - unnecessary re-renders essentially the
687:23 - moment you move
687:25 - the logic to a separate component that's
687:29 - not going to be the case anymore so
687:30 - notice now I only have 400 and I still
687:34 - have of course the use effect code so
687:37 - that's the first solution to our issue
687:40 - we can simply lower the state right so
687:44 - we can just set up separate component
687:46 - and add all of the logic in there so
687:49 - that way we're not going to be
687:50 - triggering these unnecessary re-renders
687:53 - okay and once we're familiar with the
687:56 - concept now let's work on a small
687:58 - challenge so first in the app jsx change
688:02 - the folder so now you wanna get the
688:06 - starter from the second one and once you
688:08 - navigate there you'll see that there is
688:11 - index.jsx there's also a list so the
688:14 - same deal and the person
688:16 - now the logic works just fine if I go
688:19 - here and say Bob it's going to be nicely
688:21 - added to the list or notice as I'm
688:25 - typing stuff in the input all of my
688:29 - components again are having that
688:32 - flashing border around them why well
688:35 - because we are re-rendering those
688:36 - components so I want you to fix that
688:39 - just like we covered in the previous
688:41 - video so navigate to
688:44 - index.jsx and the side
688:47 - what do you need to move to a separate
688:50 - component to avoid this issue and I can
688:54 - give you a tiny hint once you set up the
688:57 - entire functionality you'll also need to
689:00 - fix the ad person so that's the only
689:03 - place where you'll actually have to
689:04 - change your functionality a little bit
689:07 - so try working on that and then once
689:10 - you're ready to compare the results
689:12 - resume with the video
689:15 - so first let me just navigate over there
689:17 - that's my index let me just double check
689:19 - that's the correct index one
689:22 - and once we're here let's just establish
689:24 - why is this happening well I have the
689:27 - Forum correct I have the value and on
689:29 - change and in there
689:31 - I have a name State value
689:35 - so every time I'm going to be updating
689:37 - that state value
689:39 - I will trigger what a re-render
689:42 - so what happens with a list and a person
689:45 - they also get re-rendered so first we
689:48 - always need to look what is causing the
689:51 - issue in this case it is the name one
689:53 - now million dollar question can remove
689:55 - name into a separate component basically
689:59 - can I set up a form in a separate
690:01 - component and of course the answer is
690:03 - yes
690:04 - I'll just have to move some
690:05 - functionality as well
690:07 - and lastly I will have to pass in the
690:10 - add person down to a form so this one
690:14 - we still want to keep it here because
690:16 - we're working with the list
690:19 - however we'll have to provide a
690:21 - parameter because add person won't have
690:24 - access to the name State value and
690:27 - you'll see in a second what I mean so
690:29 - first we find what is causing the issue
690:33 - it's this name State value and now we
690:36 - just want to set it up in a separate
690:38 - component
690:39 - so let's navigate here I'm going to go
690:42 - with new file we want to go with form
690:44 - jsx
690:46 - then here let's create that component
690:48 - that's my Forum I'm exporting all that
690:51 - is awesome and then one by one let's
690:53 - grab everything that we need so I'll
690:55 - start here with my return so we won't
690:58 - need it over here cut it out
691:00 - copy and paste in the form okay awesome
691:03 - then as far as the logic
691:05 - like I just said add person will stay
691:07 - here
691:08 - I mean I'm working with the list makes
691:10 - sense for this function to be in the
691:13 - Lower State component however I do want
691:16 - to grab this one and I'll submit
691:19 - and I also want to set up that state
691:22 - value correct so let's cut this one out
691:25 - and we will also need that use state so
691:29 - back
691:30 - in my index I just want to copy this one
691:33 - so I will navigate here copy and paste
691:36 - and now everything is nice now the only
691:38 - thing that's missing is that add person
691:41 - however like I already
691:44 - said I believe two times now add person
691:47 - does not have access to this name
691:49 - anymore so what do we do well we just
691:52 - pass it as a parameter we just say name
691:54 - here that's it and you nicely saw how it
691:57 - was crossed out essentially add person
691:59 - doesn't have access to the name unless
692:02 - we provide that as a parameter so in
692:06 - here we want to go first with the form
692:09 - so form component
692:11 - like so we grab the form and we want to
692:14 - add that person correct so add person is
692:16 - equal to add person we pass the prop we
692:20 - can save it here now it's going to
692:22 - complain and all that don't worry about
692:23 - it
692:24 - back in the form
692:26 - you want to grab add person and now
692:29 - everything is fine we just need to pass
692:30 - in the name so we go here with the name
692:33 - that's it that's all we have to do and
692:36 - essentially
692:38 - I want to clean out my console now
692:41 - notice how nicely as I'm typing only my
692:45 - form lights up why well because we're
692:48 - not triggering those re-renders anymore
692:50 - that's it we're only working with the
692:52 - form and of course once we submit yeah
692:55 - of course we're updating the entire list
692:58 - so there's going to be a re-render
693:00 - that's exactly what we want so once we
693:03 - create that new list I do want to
693:05 - re-render the list as well as the person
693:09 - but I don't want to do that while I'm
693:11 - typing stuff in the input okay so we
693:16 - know how we can push the state down
693:18 - awesome
693:19 - but it's not going to be possible in
693:22 - every instance so there's going to be
693:25 - times when yes you basically need to
693:28 - have that state value
693:30 - but you still wanna
693:33 - avoid those re-renders
693:35 - and in order to do that we can use a
693:39 - react memo function now please don't
693:42 - confuse it with use memo which we're
693:45 - going to cover in few videos
693:47 - essentially this is a memo function that
693:49 - is coming from react I want you to start
693:52 - by navigating to this folder so zero
693:56 - three hooks in the app
693:59 - jsx and essentially once you navigate
694:01 - here you'll see that we have our first
694:04 - example where as I'm clicking on a
694:08 - button I'm increasing the count which in
694:11 - turn
694:12 - re-renders the component which in turn
694:15 - re-renders the list as well as the
694:19 - person component and if I need to have
694:23 - this state value here there's nothing I
694:25 - can do I cannot just move it to a
694:28 - separate component we can
694:30 - pass the component the list component in
694:33 - this case through the memo one basically
694:36 - we go and look at the tree of our
694:40 - components and essentially you decide
694:42 - that hey if I stop this list from
694:45 - re-rendering
694:47 - what's going to happen well the person
694:49 - also won't re-render
694:51 - and the way we do that we simply
694:54 - navigate to a specific component in this
694:57 - case again it's a list so you would look
695:00 - at the component tree and then we want
695:02 - to get that memo function from react
695:05 - as with the rest of the functions we
695:09 - have few flavors we can go the react dot
695:12 - memo and then pass the component let me
695:15 - add here component
695:17 - so component here or I can just grab the
695:21 - memo function and effectively
695:24 - it returns a memoized component in
695:28 - simple English it just means that now
695:30 - the component will check whether the
695:32 - props have changed and if they haven't
695:35 - which again is happening right now with
695:38 - our people the people prop is not
695:40 - changing we're just re-rendering the
695:42 - Lower State component and if that's the
695:46 - case if the props haven't changed well
695:48 - then the component won't re-render let
695:51 - me go to a list
695:53 - so now let me go above my list and I'm
695:55 - going to go with memo and that is coming
695:57 - from the react and effectively where we
696:00 - have the export we simply want to wrap
696:05 - the list
696:06 - in the memo so essentially we invoke the
696:09 - memo and we pass down the list
696:11 - and as a result notice once I refresh
696:15 - only the component the parent component
696:19 - lights up because that's where we're
696:21 - setting up those State values and if you
696:24 - don't believe me let me navigate to the
696:26 - bigger browser window I will refresh and
696:28 - all that let's start from the scratch
696:31 - and check it out notice over here I'm
696:34 - increasing the count all of that is good
696:36 - once I stop notice only the Lower State
696:40 - we rendered so rest of them the list and
696:44 - each person component they didn't
696:46 - re-render because props did not change
696:50 - so essentially lists stayed the same and
696:53 - as a result we did not trigger those
696:55 - unnecessary re-renders
696:57 - okay and once we have established that
697:00 - memo function is awesome
697:02 - now let me throw you a mind grenade what
697:06 - if we have a remove person function
697:09 - and keep in mind
697:11 - it totally makes sense
697:13 - to set this function in this component
697:15 - why well because the list is here
697:18 - so let's set up this function remove
697:20 - person
697:22 - pretty much the logic is going to be
697:23 - following we'll grab the ID and we'll
697:26 - only
697:27 - return items whose ID does not match and
697:30 - then we'll set
697:32 - the array the people are equal to that
697:35 - new value and then we want to pass it
697:37 - down because of course I want to invoke
697:38 - it in the person component now in my
697:42 - case I will copy and paste
697:44 - since we have done that quite a few
697:47 - times during the course I really don't
697:49 - see the point of setting this up from
697:51 - the scratch so let me go back to the
697:54 - next copy and paste and then we want to
697:57 - pass it down to a person like I said so
698:00 - we're gonna go the remote person is
698:02 - equal to remove person okay beautiful
698:06 - then I'll copy and paste right away
698:08 - because we want to do the same thing in
698:10 - the list we just need to remember that
698:12 - we need to structure it here as well of
698:14 - course so remove person and then let me
698:17 - save the index
698:19 - and then back in the person I want to
698:23 - actually grab two things
698:24 - I want to grab the remove person
698:28 - and I also want to grab the ID and then
698:31 - right after the heading four I'm gonna
698:33 - go with button I'm not gonna set up any
698:35 - classes you can definitely do so if you
698:37 - want I'm just gonna go with on click and
698:40 - this is going to be equal to my arrow
698:42 - function and here let's go with remove
698:45 - person and let's pass in the ID
698:49 - now everything is awesome and by the way
698:52 - everything is not awesome because I did
698:54 - forget to add some kind of value here
698:56 - and I'll just say your room move so now
698:59 - everything is awesome however we'll
699:01 - probably notice something interesting
699:03 - every time I'll click on remove
699:08 - I'll be re-rendering so this is
699:10 - something we expect okay we're changing
699:12 - the list so of course it's going to
699:13 - re-render okay but what about this
699:17 - what about count
699:20 - we have a memo right
699:22 - so this shouldn't be happening
699:24 - I mean we established in the previous
699:26 - video
699:28 - that memo is checking for those props
699:32 - and if they haven't changed
699:34 - well then the component doesn't
699:37 - re-render
699:38 - and we saw that in a previous video that
699:41 - was the case however we add this
699:43 - function and now even without going to
699:47 - the performance tab I can clearly see
699:50 - that these ones are also re-rendering
699:53 - so why is that happening
699:55 - you see memo is doing its job
699:57 - everything is fine with the memo we
700:00 - don't need to pass some kind of extra
700:01 - argument or anything like that
700:03 - the problem is this function
700:06 - if you remember all the way back when we
700:09 - covered them let me find this
700:12 - use effect the first one code example
700:14 - what did I say
700:16 - I said that
700:18 - this function
700:19 - is going to be created from the scratch
700:22 - correct and it's also going to be
700:24 - invoked if you're invoking it here so
700:26 - every time the component is going to
700:28 - re-render two things are happening this
700:31 - function gets created from the scratch
700:32 - so in our case let's remove person and
700:36 - in here we also invoked it now we're not
700:39 - doing that in the
700:42 - component here but we are creating this
700:45 - function from scratch every time
700:47 - the state gets updated
700:50 - and here's the thing
700:52 - as far as JavaScript is concerned
700:55 - this prop has changed so every time we
700:58 - click on Account button we re-render the
701:01 - component correct
701:03 - and every time we render
701:05 - we create that function from the scratch
701:07 - be a remove person
701:09 - so now in the list component yes this
701:13 - value is not changing this one pretty
701:14 - much stays the same
701:16 - so memo fix that however
701:19 - when it comes to remove person
701:22 - since it gets created from the scratch
701:24 - each and every time
701:26 - JavaScript things that yeah the prop
701:28 - changed and we can actually go to a
701:31 - devtools and we can see that so let me
701:36 - first go to a profiler record and now
701:40 - check it out I'll click I can clearly
701:42 - see that they are rendering and we'll
701:45 - nicely see that the reason for that is
701:47 - because props changed
701:50 - so notice it even says the remove person
701:53 - changed that's why the list is
701:56 - re-rendering even though it's the same
701:58 - function
701:59 - and therefore in the next video we'll
702:02 - cover a huge callback hook which
702:06 - actually helps us to solve this issue
702:09 - okay so how we can fix this mind grenade
702:12 - issue well we can use use callback hook
702:15 - which in react allows us to memorize a
702:19 - function or basically remember the
702:22 - function it takes two arguments the
702:25 - first one is the function you want to
702:27 - memorize so of course in our case that
702:29 - is going to be remove person and the
702:31 - second one is the array of dependencies
702:34 - and we're already familiar with array of
702:37 - dependencies because we have worked with
702:39 - it when we used use effect hook correct
702:44 - so
702:45 - it only creates that function if the
702:48 - value in dependency array changes
702:52 - so for example if it's empty if it's
702:55 - nothing there then of course it's only
702:57 - going to create that function the first
702:59 - time the component
703:01 - renders basically when the initial Mount
703:05 - takes place so let's try this one out
703:07 - we're going to navigate to
703:09 - index.js and as I know I suggest pausing
703:13 - the video and try to set it up yourself
703:16 - in the readme you can find the
703:20 - syntax that you need to use just try to
703:22 - implement this in our component and
703:25 - effectively we want to grab the hook
703:28 - it's called euge callback and then where
703:31 - we have the function
703:33 - now I want to pass this function into a
703:37 - used callback so that's going to be my
703:39 - first argument and the second one is
703:41 - going to be that dependency array so
703:44 - first let me navigate here let me push
703:46 - this one down and also use callback and
703:49 - first I'll just pass empty dependency
703:51 - array just so you can see one major
703:53 - gotcha
703:55 - so now this is empty now this is
703:57 - happening only
703:59 - when the component mounts let me cut
704:02 - this one out and we pass this one in so
704:05 - it still removes the person all of that
704:06 - is good
704:08 - is just now we're creating it
704:10 - only once only the first time when the
704:14 - component renders so now check it out
704:16 - once I click count I don't have those
704:19 - unnecessary re-randers and we can
704:22 - actually double check that if we again
704:24 - navigate to the profiler
704:26 - record
704:28 - over here looks like I need to refresh
704:30 - yep I start recording and notice
704:34 - only the component re-renders not the
704:38 - person one so let me stop it over here
704:40 - and check it out everything is awesome
704:43 - however
704:44 - I said that there's a gotcha so
704:48 - everything is beautiful use callback
704:51 - creates this function only once but
704:53 - you'll notice that our functionality
704:55 - doesn't quite work
704:57 - notice I basically removed one person
705:00 - after that I get stuck and just keep
705:02 - flipping these values and the reason for
705:04 - that is following you see when we create
705:07 - this function
705:08 - basically
705:10 - this is the list that we're working with
705:13 - so once we remove that first person we
705:16 - actually change that value correct
705:19 - initial Aid was 4 and now it's three
705:22 - but we still keep using that old value
705:24 - and I think it's going to be
705:27 - very useful if we log it so let me go
705:30 - with console.log and let me set up
705:33 - people and you'll see what I'm talking
705:34 - about so let me refresh over here
705:37 - function gets created okay I don't see
705:39 - anything because I'm not invoking it but
705:41 - check it out once I click I have four
705:44 - items over here right but then the next
705:46 - time I still have the four items and
705:49 - that's where the issue is functionality
705:51 - is not going to work because pretty much
705:53 - all the time just working with the
705:56 - initial array but since we're moving
705:58 - items of course
706:00 - our array is changing the people State
706:02 - value so long story short this is why we
706:06 - want to pass the people as dependency so
706:09 - pretty much every time
706:12 - will change the people array we also
706:15 - want to generate this function from the
706:18 - scratch so there's going to be instances
706:20 - where you just create this once
706:22 - basically you'll have empty dependence
706:24 - here and yes there's going to be
706:26 - instances where you do need to provide
706:28 - some various independency array
706:30 - otherwise as you can see our
706:32 - functionality went bananas so now let me
706:35 - save and let's test it out notice our
706:38 - functionality works and yes we do
706:40 - re-render the
706:41 - person that's totally expected because
706:44 - we're actually updating the people State
706:47 - value however
706:49 - the person is not going to be
706:50 - re-rendering
706:51 - if we're clicking on account so now
706:54 - notice as I'm clicking on account
706:57 - everything stays the same and if you
706:59 - still don't believe me
707:00 - we can go back to our favorite profiler
707:03 - record
707:05 - and check it out I only have that main
707:09 - component over here I won't have the
707:13 - person re-rendering just because I'm
707:15 - updating the account value again we did
707:17 - that with use callback hook which takes
707:20 - two arguments first we want to pass in
707:22 - the function we want to memorize or
707:24 - essentially remember and then the second
707:27 - one is the dependency all right okay and
707:30 - once we're familiar with use callback
707:32 - hook
707:33 - now let's see a pretty typical use case
707:36 - for it and for that we're actually going
707:40 - to navigate away
707:41 - from the performance one
707:44 - and we're looking for the final one in
707:46 - the use effect technically this video is
707:49 - optional if you're not interested you
707:51 - can just watch and don't switch the
707:54 - directories so essentially remember when
707:56 - we fetch the users in the user fact zero
708:01 - four fetch data I did mention that
708:06 - essentially we don't want to set the
708:09 - fetch data outside of the use effect
708:13 - and then pass it in dependency array
708:16 - which Veet doesn't complain about but if
708:20 - you're working with create react app
708:22 - you'll see this es lint warning now I'm
708:25 - not going to place it in dependency
708:27 - array because I don't wanna
708:29 - basically run out of my requests however
708:31 - I will cut this one out from the use
708:35 - effect let me copy and paste so that's
708:37 - my fetch data
708:39 - notice once I run everything is still
708:42 - awesome everything still works but like
708:45 - I just said normally with create react
708:47 - app you'll get that warning in the
708:49 - console now that is not an error but it
708:52 - is a warning
708:53 - the reason why we don't want to pass
708:55 - fetch data directly in the user effect
708:58 - same deal because this one gets created
709:02 - from the scratch so essentially you'll
709:04 - have that influent Loop however since
709:07 - now we know how to work with use
709:09 - callback here's what we can do
709:11 - I can go here with comma use callback
709:14 - and essentially just set up this
709:17 - functionality over here
709:19 - so let's try this one out I'm going to
709:22 - go to use callback in this case it's an
709:25 - empty dependency array so I don't want
709:27 - to pass anything in here cut this one
709:29 - copy and paste and we're good to go let
709:32 - me save it notice the functionality
709:35 - still works
709:36 - and in this case I can nicely add fetch
709:40 - data to dependency array because now
709:42 - this fetch data will only be generated
709:45 - once
709:46 - when the component mounts during the
709:50 - initial render and while we're on a
709:53 - topic of news callback why don't we also
709:56 - cover use memo which is very similar the
710:00 - difference is that use memo memorizes
710:03 - the value that we're getting back from
710:06 - the function so essentially again it
710:07 - remembers that value now in this example
710:11 - I'll just show you with slow function
710:13 - but later on of course we'll use it to
710:17 - debounce some functionality so in one of
710:22 - the complex projects essentially there's
710:24 - going to be a input and we'll use use
710:27 - memo to the bounce some functionality
710:30 - basically to run some functionality
710:32 - later now why am I telling you that just
710:35 - so you don't think that we can only use
710:38 - for the example I'm about to show you so
710:40 - use memoize is actually very cool you
710:42 - can do a bunch of interesting stuff
710:44 - again in our case we'll just take a look
710:46 - look at the slow function example so
710:51 - the way use memo works is very similar
710:55 - to use callback we get use memo and then
710:59 - again notice
711:00 - it's looking for two arguments first one
711:02 - is going to be the function however in
711:03 - this case we're returning something from
711:05 - the function
711:06 - and then the second one is going to be
711:08 - the dependency array now in our case in
711:10 - our example we won't have any values in
711:13 - dependency array it's only going to run
711:16 - once now as far as our example
711:20 - let's imagine that in our project
711:23 - we have some kind of slow function
711:25 - that's doing some kind of calculation
711:27 - now I will simulate that by setting up a
711:32 - very ugly for Loop so please don't judge
711:35 - me on this one so essentially let's
711:37 - create a function I'll call this slow
711:39 - function.js in there set up this
711:41 - function again simply there's a value
711:44 - that I'm setting up a for Loop which I
711:47 - haven't done probably in four years or
711:50 - so and then once I'm done with this long
711:53 - for loop I just return a value
711:56 - effectively it's just going to take
711:57 - quite some time to generate that value
712:00 - so this function returns a value and in
712:02 - the index I want to import the slow
712:04 - function I want to invoke it and I want
712:07 - to set it equal to value and you'll see
712:09 - the result so let's navigate to the
712:12 - hooks like I said in my case I'll call
712:15 - this slow function and as I said if you
712:19 - don't want to work on this example you
712:20 - don't have to you can just see the
712:22 - result and I'm pretty sure you'll get
712:25 - the main gist of use memo so let's go to
712:30 - tutorial let me grab this I don't think
712:33 - there's a need to create it from the
712:35 - scratch
712:37 - now I want to make sure that I'm going
712:38 - to start
712:40 - yep that's my function then we want to
712:42 - navigate back to index we want to import
712:45 - that function and I'm going to rely on
712:49 - Auto Import and I'll right away set it
712:51 - equal to a value so say value is equal
712:54 - to and then slow function yep we invoke
712:56 - it we don't need to pass anything and I
712:59 - simply want to log the value
713:02 - so let me go with console log
713:06 - and we're looking for the value let me
713:07 - save and again same deal
713:10 - pretty much every time I'll click on
713:13 - account
713:14 - it's gonna take
713:15 - time for my component to render you'll
713:19 - see that it's definitely slower
713:21 - if you would have for example some kind
713:23 - of input and if you're typing it's going
713:25 - to be with delay
713:27 - so let me just showcase that I'm going
713:30 - to go to button and I'll click like six
713:32 - seven times
713:34 - and you'll notice that the value is not
713:37 - updating right away why well because
713:39 - again we're changing the state value we
713:42 - are re-rendering and what do we do in
713:44 - each render we run this slow function
713:47 - and since our slow function is really
713:49 - slow well that's why it takes ages for
713:53 - me to see that count of nine and this is
713:56 - where the use memo hook can definitely
714:00 - help us again the syntax is extremely
714:03 - similar to use callback we can go with
714:06 - use memo we import the hook and now I
714:10 - wanna
714:10 - set up this slow function in the used
714:13 - memo and as a result you'll see that the
714:15 - slow function is only going to run once
714:18 - when our initial render takes place so
714:22 - let's go to user memo again two
714:25 - arguments in this case I'll pass in
714:26 - empty dependency array then
714:30 - I wanna grab my slow function but again
714:33 - this needs to return a value so let me
714:35 - cut this one out I'll pass here the
714:38 - arrow function like so and then we'll
714:40 - invoke slow function and now you'll
714:43 - notice that once we refresh yep the
714:46 - initial render takes a little bit of
714:48 - time but after that everything's cool
714:52 - so unless I provide some kind of value
714:54 - in this dependency array
714:57 - this initial value the one that takes
715:01 - really long time
715:02 - for the slow function to calculate
715:05 - it's only going to run once
715:07 - I'm only going to get that value on
715:09 - initial render and that's it since the
715:12 - value is not changing essentially I'm
715:14 - not slowing down my component every time
715:17 - a state update takes place with react 18
715:21 - we also got use transition hook
715:24 - which we can use to treat some
715:26 - functionality as less urgent so imagine
715:30 - this scenario in your app
715:32 - there is some kind of user interaction
715:35 - which triggers some heavy computation
715:38 - for example user types something in the
715:41 - input and based on the input value you
715:45 - filter I don't know 20 000 items
715:48 - here's the thing while the computation
715:50 - is taking place it will actually block
715:53 - the UI
715:55 - basically our app will be less
715:57 - responsive and as you can imagine that's
716:01 - not a good thing ask yourself
716:03 - as a user what's more annoying waiting
716:07 - for some data to arrive or tirelessly
716:11 - clicking on the button
716:13 - so use transition just allows us to Mark
716:17 - certain functionality as less urgent
716:20 - which in turn prevents the whole UI
716:23 - blocking thing
716:24 - with that said like I already mentioned
716:26 - before react is Fast by default
716:30 - so even though this is a very cool
716:33 - addition to the library it has very
716:35 - specific use cases and most likely it's
716:38 - not something you'll use immediately in
716:41 - all your applications and once we're
716:44 - familiar with the general concept now
716:46 - let's take it out for a test drive
716:49 - in this video we will heavily rely on
716:52 - array Dot from method so if you're not
716:55 - familiar with it or you need to jog your
716:58 - memory please utilize this JavaScript
717:00 - nuggets video where I cover everything
717:03 - in great detail
717:05 - as far as the location in the app.jsx we
717:09 - want to grab the starter
717:11 - from zero four react 18. again zero for
717:17 - react 18. this is what we should see on
717:20 - the screen basically there's going to be
717:22 - an input and we'll have some items below
717:24 - and if we navigate to the file
717:27 - you'll see that I have two State values
717:30 - I have one for text so that's for the
717:32 - input and I also have one for items
717:34 - which initially is just empty array so
717:37 - in here I have the form everything is
717:39 - awesome I have the handle change I also
717:41 - have heading 4 right below the form so
717:44 - this is where we are displaying the
717:45 - items at the moment they're empty
717:47 - there's nothing there and as far as
717:49 - handle change well I have set text I'm
717:52 - just grabbing the value all of this is
717:54 - awesome
717:55 - however let's imagine that
717:58 - I attempt to do something very
718:01 - interesting
718:02 - first I'll create new items
718:06 - using array.com and I want to construct
718:09 - a very big array therefore I provide
718:13 - here an object with a length property of
718:15 - 5
718:17 - 000 and then the second one is the
718:18 - Callback function which gets invoked for
718:21 - every item now I don't care about the
718:24 - actual item I do care about the index
718:26 - and yes this is the case where I'll
718:28 - cheat a little bit and I'll set up the
718:30 - key as the index
718:32 - now inside of it I also want to return
718:34 - an image
718:35 - which essentially is that nice and cute
718:38 - wheat SVG
718:41 - so remember the public folder I talked
718:44 - about at the very very beginning in
718:45 - react fundamentals since it's in the
718:48 - public I can just go forward slash and
718:50 - beat SVG then once I create that array
718:54 - the 5000 items basically just a bunch of
718:58 - wheat SVG images I want to set it equal
719:02 - to my new items and if everything is
719:06 - still fast we can also slow down the CPU
719:10 - because it's one thing to work in
719:13 - development with a fast computer but
719:15 - it's totally different if you're
719:17 - somewhere out there with Spotty Wi-Fi
719:19 - struggling with I don't know iPhone 3 or
719:21 - whatever so the way we can slow down the
719:24 - CPU so again we're not talking about the
719:26 - network we can also do it with a network
719:28 - in this case I want to slow down the CPU
719:30 - we go with performant insights let me
719:33 - make this sucker bigger
719:35 - and then notice here it says no
719:38 - throttling I can actually go with CPU
719:40 - and I can make it I don't know four
719:43 - times slower something along those lines
719:45 - now let me make this one again smaller
719:48 - and you'll notice something interesting
719:50 - since I'm running this pretty much on
719:54 - every keystroke
719:56 - you'll actually notice that my input is
719:58 - going to be somewhat slow so I haven't
720:00 - saved the file yet so notice I can
720:03 - nicely type and everything is awesome
720:04 - however the moment I save the file and
720:07 - the moment I create those 5 000 items
720:10 - every time user
720:14 - presses something in the input you'll
720:17 - right away notice that it's very slow so
720:19 - I typed few characters and notice how
720:22 - long it took for them to show on screen
720:25 - and it's going to be a little bit faster
720:27 - once we already have all the items and
720:28 - all that since of course we're not
720:30 - changing the path but hopefully you can
720:33 - see the issue
720:35 - so we need to somehow fix this where I
720:39 - still want a fast response here in the
720:41 - input
720:42 - and then this one the new items well
720:45 - that can happen in the background so
720:48 - let's try this one out where I want to
720:50 - go to import and I want to grab use and
720:54 - then transition so that's the hook I'm
720:56 - looking for then I want to go right
720:59 - after the items and I want to invoke it
721:01 - and it's getting back to you things
721:03 - it's getting back is bending and the
721:06 - start transition
721:07 - so the slow function this one over here
721:11 - or functionality
721:13 - maybe be more precise we want to place
721:16 - that in the start transition and then is
721:19 - pending we'll use
721:20 - effectively to Showcase that something
721:22 - has happened so we're gonna go here with
721:24 - const and then is and pending
721:28 - and then comma and we'll say start
721:31 - transition now like I said that is equal
721:34 - to my use transition and I think
721:37 - I'll make this one smaller it's somewhat
721:40 - annoying here so yep we invoke them then
721:43 - let's go to a handle change
721:47 - and let's set up that start transition
721:50 - and now let's pass both of these things
721:52 - inside of it now we do need to set up
721:54 - the function here first
721:56 - so let's do that let's grab these two
721:59 - suckers so the
722:01 - array with 5000 items and the set new
722:05 - items good and now let's scroll down a
722:09 - little bit and where we have the items I
722:12 - actually want to look for the is pending
722:15 - the value of spending and then if we're
722:18 - loading basically if it's true then
722:21 - we'll display loading dot dot and once
722:23 - we're good to go then we'll display the
722:26 - items so right before D heading four
722:29 - let's open up the curlies I'll go with
722:32 - is pending and I'm gonna go with the new
722:35 - operator so if it's true what do I want
722:38 - to showcase let me go here with heading
722:40 - four and then loading dot okay awesome
722:43 - and then if it's false basically once
722:47 - we're done then we want to display those
722:49 - items so let me cut this one out copy
722:52 - and paste and once I save you'll notice
722:55 - something interesting that now the
722:57 - response in the input is going to be
722:59 - much faster and notice we have this
723:01 - loading so essentially something we want
723:04 - to keep fast which is the response to
723:08 - our user
723:09 - is still going to happen fast however
723:13 - the slow functionality
723:15 - is going to happen in the background
723:17 - okay and now let's see how we can do
723:20 - code splitting in react
723:22 - which in turn will allow us to
723:25 - progressively load or lazy load our
723:29 - application
723:30 - before we take a look at the code let's
723:32 - discuss the main benefits of such
723:35 - approach first
723:37 - improve performance by splitting up a
723:41 - code into smaller more manageable chunks
723:44 - we can reduce the size of the initial
723:47 - JavaScript payload that needs to be
723:50 - loaded this results in Faster load times
723:54 - and improved performance especially on
723:58 - slow networks or low end devices
724:03 - second better user experience
724:05 - with code splitting only the essential
724:07 - code needed for the initial render of
724:10 - your application is loaded the remaining
724:13 - code is loaded as the user interacts
724:16 - with your application
724:18 - leading to a smoother less blocking user
724:22 - experience
724:24 - you see especially when it comes to
724:26 - bigger projects not all the pages and
724:30 - components are equal
724:31 - meaning there are certain resources that
724:35 - are used More Often by the users for
724:38 - example typically
724:40 - which page do you think gets more
724:42 - traffic
724:43 - the homepage or the contact page
724:46 - so million dollar question
724:49 - if some resources are used less often
724:52 - than the other ones does it make sense
724:55 - to jam all of that code when we
724:59 - initially ship our application to the
725:02 - browser because keep in mind the more
725:05 - code we send
725:06 - the more time it will take for the
725:09 - browser to compile it which in turn will
725:12 - affect how fast the user can interact
725:15 - with our application
725:17 - so wouldn't it be nice if we could
725:20 - prioritize the important resources over
725:24 - the less important ones
725:27 - in order to Lazy load our components or
725:30 - progressively load our application we'll
725:32 - use a tool called suspense now suspense
725:36 - is a series of apis and it actually has
725:39 - been around for quite some time but at
725:43 - this point in time only the code
725:45 - splitting feature which we're about to
725:47 - cover is fully supported other ones are
725:51 - still experimental including data
725:54 - fetching and therefore we won't discuss
725:56 - them at this time lastly in our example
725:59 - we'll progressively load a big component
726:02 - when the user clicks the button
726:05 - however a more realistic scenario is to
726:08 - Lazy load our component when we have
726:12 - multiple Pages which is something we'll
726:14 - cover when we discuss routing in react
726:17 - so this is just general info and we will
726:21 - revisit this topic later on in the
726:24 - course okay and now let's see suspense
726:26 - in action
726:27 - for that we want to navigate back to the
726:29 - same folder
726:31 - the zero four react 18. and notice over
726:35 - there I created a slow component and
726:38 - essentially the idea is going to be
726:40 - exactly the same as in the previous
726:41 - setup where I want to create 5000 items
726:44 - remember those are images and then
726:48 - in the component I'll use use State I'll
726:51 - set this one up as default value and
726:53 - essentially I just want to render them
726:55 - on a screen so now I want to go back to
726:58 - index.jsx
727:01 - and effectively I'm not going to touch
727:04 - any of this logic I just want to
727:05 - showcase something
727:07 - so I'm going to go below this is pending
727:11 - and I'll just showcase the slow
727:13 - component and as I said you know I'll
727:16 - just refresh just so we don't have two
727:18 - of them on the screen so still within a
727:20 - section I want to go with slow component
727:23 - let's save that we should eventually see
727:27 - the component on the screen so let me
727:30 - refresh notice it took a little bit of
727:32 - time but eventually we see those 5000
727:35 - items again the idea is exactly the same
727:38 - this time we're not
727:40 - getting them from the input
727:42 - we are importing the component and of
727:46 - course the reason why everything is
727:47 - happening so slow is because I'm still
727:50 - throttling the CPU now
727:54 - what's also interesting
727:56 - if I navigate to the bigger screen
727:57 - you'll notice in the network tab
728:01 - more specifically if we look for Js
728:04 - since we are right away
728:06 - displaying the slow component we are
728:09 - also importing the JavaScript code
728:13 - correct but what if we have a different
728:15 - setup what if I create a state value
728:19 - I'm going to call this show
728:21 - and
728:23 - set show and I'll set it equal to let's
728:27 - say the default one will be false so
728:29 - that's my Boolean value
728:31 - then I'll set up a button that toggles
728:34 - it so right above the component
728:37 - I'm going to go with my button
728:39 - I'll set up on click
728:42 - let's invoke here
728:44 - the set show so set show and we'll set
728:48 - it equal to the opposite value whatever
728:50 - it is in a state and let's just call
728:53 - this toggle now in this case I do want
728:56 - to add a class so class name is equal to
728:59 - BTN
729:01 - and then when it comes to slow component
729:05 - I want to go to show
729:07 - and only if the value is true I want to
729:10 - display it
729:11 - so let's go here
729:13 - let's save again let me navigate to the
729:16 - big screen
729:17 - and notice
729:19 - even though I'm displaying this
729:21 - component only
729:23 - when the value is true
729:26 - I'm still importing
729:28 - right out of the gate right so I'm still
729:30 - grabbing that JavaScript logic even
729:33 - though there's no guarantee that the
729:35 - user will click the button
729:36 - and essentially it would be better if we
729:39 - only import this logic when we actually
729:42 - need to display that component correct
729:44 - so instead of importing everything on
729:48 - our initial render which of course is
729:50 - going to add the loading time we only
729:52 - want to import that slow component when
729:55 - the user actually wants to work with it
729:58 - in this case clicks the toggle button so
730:01 - how we can do that well we need to First
730:04 - navigate up and we'll need to grab two
730:07 - things we'll need to grab suspense
730:09 - components so this is a component that
730:11 - react provides and we also need to go
730:13 - with lazy then we have this somewhat
730:17 - interesting setup where we want to go
730:20 - with const we need to come up with an
730:22 - iron in my case it's still going to be
730:24 - slow component and that is equal to lazy
730:27 - so invoke this then we provide a
730:31 - function and then we go with import so
730:34 - as you can see now we're importing this
730:37 - dynamically
730:38 - so we go with forward slash and of
730:40 - course the path is still the same so now
730:42 - I want to remove this one the straight
730:45 - up import and then let's keep on moving
730:47 - and now we want to wrap
730:50 - our component
730:53 - in the suspense
730:55 - and we also want to provide some kind of
730:57 - fallback so I'm gonna go
731:00 - and I'll wrap the slow component in the
731:03 - suspense
731:05 - component then pullback prop basically
731:09 - what do we want to display when we're
731:11 - loading and I'll just cheat I'll grab
731:14 - this value over here
731:15 - and after that we want to place the
731:19 - slow component inside of the suspense
731:22 - and now notice something interesting
731:24 - when I navigate to the big screen and
731:26 - refresh you won't see anywhere the
731:29 - import for the slow component JavaScript
731:32 - code
731:33 - only once I click here notice then I'm
731:36 - importing which again is really really
731:38 - awesome because it allows us to decrease
731:41 - our initial load time
731:45 - since we're not grabbing all of the
731:46 - JavaScript code and only if the user
731:49 - decides to interact with the component
731:53 - only then we import so essentially this
731:55 - is how we can lazy load our components
731:58 - or in other words we only import the
732:00 - functionality when there is a need for
732:02 - it One Last Thing Before I Let You Go
732:05 - typically we will wrap our entire return
732:09 - in suspense
732:12 - since that way we can lazy load multiple
732:15 - components
732:16 - now the syntax and the result is the
732:19 - same
732:20 - we will still provide fallback prop and
732:24 - for all of the components we import
732:26 - progressively the fallback value in this
732:30 - case the loading text will be displayed
732:34 - the reason why I wrapped only the slow
732:37 - component in the previous example was
732:40 - just to underscore which component we'll
732:42 - get that fallback value all right up
732:46 - next let's cover what is Redux toolkit
732:49 - and why it's so useful
732:51 - you see when it comes to bigger
732:53 - applications
732:54 - especially
732:55 - if they're built by a team of Developers
732:58 - one of the biggest challenges is State
733:01 - Management yes context API is very
733:04 - useful tool but it clearly has its
733:08 - limits especially when we talk about big
733:10 - applications with tons of features
733:14 - and in order to solve the issue over the
733:16 - time various State Management libraries
733:19 - have been introduced by the community
733:22 - and without a doubt for very very very
733:25 - long time one of the most popular state
733:28 - libraries has been Redux now before we
733:31 - continue let me stress something Redux
733:34 - is not part of official react again
733:36 - Redux is not part of official react even
733:40 - though they are used together very often
733:44 - now
733:45 - even though Redux solves a lot of
733:48 - problems it also introduces some new
733:51 - headaches in short it requires bunch of
733:54 - annoying boilerplate and manual setup
733:57 - especially when it comes to Advanced
734:00 - features since you'll need to install
734:03 - more libraries and add some more config
734:06 - setup which over time especially if you
734:09 - have to do it for every project just
734:11 - becomes annoying and this is where Redux
734:14 - toolkit comes into play so creators of
734:18 - Redux notice the general need for
734:20 - opinionated approach while setting up
734:23 - Redux applications and as a result they
734:25 - came up with Redux toolkit which
734:28 - effectively is Redux with batteries
734:30 - basically it means that all the popular
734:33 - extra libraries and setups are built in
734:36 - and do not require extra setup
734:40 - as a result there is no time consuming
734:43 - setup
734:44 - and over time it speeds up our workflow
734:48 - tremendously
734:49 - so with Redux toolkit we can have our
734:52 - cake and eat it too meaning we get all
734:56 - of the benefits of Redux without any of
735:00 - the manual labor and as always we'll
735:03 - start with extensive tutorial where
735:05 - we'll cover all of the major building
735:08 - blocks of Redux toolkit during tutorial
735:11 - we'll build this card application and in
735:13 - the process we'll see all of the cool
735:16 - Redux toolkit features in action so
735:19 - things like store slice reducers action
735:23 - creators and of course create async
735:25 - thunk which handles a synchronous
735:28 - functionality in order to follow you
735:30 - will need a star and you can find it in
735:34 - this GitHub repo so look for my profile
735:37 - Jones milgar and the actual repo name is
735:41 - Redux toolkit tutorial then the name of
735:44 - the repo that you're looking for is
735:46 - Redux toolkit tutorial and once you get
735:50 - here just pick the option that makes the
735:52 - most sense to you
735:54 - I think in my case I'm gonna go for
735:55 - download zip option then
735:59 - I want to crack it open
736:02 - and in the folder you'll find two more
736:05 - folders
736:07 - the final as well as the starter and
736:09 - needless to say that in the final one
736:12 - you'll find the complete source code and
736:14 - then in a star is where we'll do all of
736:16 - our work so let me take this sucker out
736:20 - let me open up
736:22 - the text editor Visual Studio code
736:25 - oh right away set it side by side now
736:28 - this is a standard react application I
736:31 - used create react app the only
736:34 - difference is that I removed some
736:37 - boilerplate code and I also add some
736:40 - resources so in here what we want to do
736:42 - is run npm install and also npm start so
736:47 - npm install
736:48 - and PM start and there is an app so at
736:53 - the moment notice there's only having
736:54 - two we have some car items which we'll
736:57 - use in the beginning as our data and
737:00 - also a few icons
737:01 - I'll discuss them a little bit later
737:03 - index CSS all our CSS and also of course
737:08 - index.js so once you get the repo once
737:12 - you get the star install all the
737:15 - dependencies Run npm start you should
737:18 - see in the browser they hear into with I
737:22 - believe it was Redux toolkit and if you
737:25 - do we're in good shape and we can
737:27 - proceed to The Next Step a quick update
737:31 - I upgraded this project to react 18.
737:35 - which also means that in the index.js
737:37 - you'll find create root method instead
737:41 - of react Dom render
737:43 - which was used when I recorded this
737:45 - project
737:46 - now let me be very clear
737:49 - all of the upcoming content is still
737:52 - valid and up to date
737:55 - only few lines of code in the index.js
737:58 - are different
738:00 - since the latest react version uses
738:03 - create root method instead of react Dom
738:06 - render and yes in a few videos when we
738:10 - set up Redux store
738:13 - we still want to wrap the app component
738:16 - in the provider just like I showcase
738:21 - during the videos so again let me repeat
738:24 - all of the upcoming content is still
738:27 - valid and up to date the only difference
738:30 - is the react version now this app uses
738:34 - react 18. in the star you'll also find a
738:39 - readme file where I laid out all the
738:42 - steps we're going to take as well as
738:44 - some useful links and first if you want
738:48 - to find more info about Redux token you
738:51 - can always utilize this link so this one
738:53 - goes directly to their docs and we have
738:57 - few ways that we can add Redux toolkit
739:00 - to our project first we can go with
739:03 - straight up template
739:05 - so in that case instead of going npx
739:07 - create react app and then the app name
739:09 - we also add this hyphen hyphen and then
739:12 - template and Redux now from my
739:16 - experience they add way too much
739:19 - boilerplate so essentially I always
739:21 - avoid that and in general I just go with
739:25 - the Redux toolkit so I set up the
739:28 - application let's say with create react
739:31 - app and then install the toolkit
739:34 - separately and we do that with npm
739:38 - install and then add Redux JS and then
739:42 - forward slash toolkit and also We'll add
739:46 - react Redux
739:48 - and I'll talk about it in a second now
739:50 - let me just quickly mention that if for
739:52 - some reason
739:53 - you get some issues when you just run
739:56 - MPX create react app and again it's not
739:59 - specific to this template one if
740:01 - something goes bananas with npx you can
740:04 - always try to go with create react app
740:07 - and then the latest one so this is just
740:10 - a side note now back to the toolkit so
740:14 - when we install
740:15 - reduxjs toolkit we actually install fuel
740:19 - libraries so we install the Redux which
740:22 - is going to be our core Library we also
740:25 - install Emer which is going to allow us
740:27 - to mutate the state we install Redux
740:32 - thunk which will handle the async
740:35 - actions and also we install reselect
740:38 - which will simplify the reducer setup so
740:42 - these things of course will only make
740:44 - sense if you already have worked with
740:47 - the Redux so this is already provided
740:49 - for us and of course we'll see all of
740:51 - those things in action and if you didn't
740:53 - work with the Redux before don't worry
740:56 - of course I will explain all of them and
740:59 - also as an extra we get right away Redux
741:02 - devtools and also combined reducers
741:05 - right from the get-go again if you
741:07 - haven't worked with Redux I totally
741:09 - understand if none of those things make
741:12 - sense but don't worry we'll talk about
741:14 - them later now why we also install this
741:17 - package the react Redux well you see
741:21 - Redux can be used with any front-end
741:25 - framework it's not specific to react in
741:30 - order to connect our application to the
741:32 - Redux this is where we'll use the
741:35 - package by the name of react Redux now
741:38 - needless to say that of course if you'll
741:41 - take a look at the packages on
741:43 - you will see the both packages you'll
741:47 - see the toolkit as well as the react
741:49 - Redux but just so you don't think that
741:52 - there is some funny business going on
741:54 - let me copy this line of code let me
741:57 - install both packages and once the
742:01 - install is complete we can start setting
742:04 - up our Redux store so the install is
742:07 - done we go with npm start and if we take
742:10 - a look at the package Json you will find
742:13 - the toolkit as well as react reduct and
742:17 - with this in place now we can start
742:19 - setting up our application with Redux
742:22 - toolkit okay and once we have installed
742:24 - all dependencies up next I want to set
742:27 - up the store and you can think of store
742:31 - as the entire state for your application
742:35 - so remember previously we used context
742:37 - API now in this case we'll use toolkit
742:41 - and we'll set up the store and the
742:44 - syntax is following where first we want
742:46 - to create store.js somewhere in the
742:49 - source we want to import configure store
742:52 - function from the toolkit and yes in
742:56 - order to speed this up I'll just
742:57 - reference it as toolkit please keep in
743:00 - mind that of course I'm talking about
743:01 - the Redux token and then in this
743:04 - function
743:05 - we want to pass in the object and in the
743:08 - object there is going to be a reducer
743:11 - property which is going to be object
743:14 - itself and then in here we'll set up our
743:17 - features and I fully understand that I
743:20 - mean this can look somewhat fuzzy don't
743:24 - worry as we start setting up the
743:26 - features you'll see everything in action
743:28 - so for the time being just bear with me
743:31 - and then once we have the store we want
743:34 - to export that and this is the case
743:36 - where you can export this as default
743:39 - so the difference of course is just
743:40 - export default and then the store or you
743:43 - can go with name export and then we want
743:46 - to go back to
743:47 - index.js we want to import store from
743:52 - the store file as well as the provider
743:55 - from react Redux like I said this is the
743:58 - library that connects Redux store or
744:02 - Redux to our application and similarly
744:06 - to context API
744:08 - we want to wrap our entire application
744:11 - so we're going to grab this provider
744:13 - there's a store prop and we just want to
744:16 - pass in the store coming from the store
744:20 - file so let's get cracking first
744:24 - I'm gonna go with store Js
744:28 - in here let's import configure store so
744:31 - import we're looking for configure store
744:34 - notice right away I have suggestion for
744:36 - that and then let's set up that store
744:38 - like I said at the moment it might look
744:41 - somewhat funky the moment we'll set up
744:43 - some features it will make sense so
744:45 - let's go here with const and of course
744:48 - I'm adding export as well I'm going to
744:50 - store that is equal to configure store
744:52 - let's pass in the object let's set up
744:54 - the reducer is an object itself and for
744:57 - time being it's going to be empty and
744:59 - most likely we'll get the warning in a
745:01 - console don't worry about it again
745:04 - all of this functionality is coming up
745:06 - and then let's navigate to index.js
745:09 - Let's import both of the things let's go
745:12 - with import then store
745:15 - um this is coming from the store file of
745:17 - course and also we want to get that
745:20 - provider so import and then we're
745:22 - looking for provider now that is coming
745:25 - from react Redux and now let's wrap our
745:28 - entire application so let's say provider
745:31 - here let's close it out let's wrap our
745:34 - app and then we want to set up a store
745:37 - prop and we want to set it equal to our
745:40 - store
745:41 - and if nothing breaks we are heading in
745:44 - the right direction so then we can set
745:47 - up the slice again like I said
745:50 - if you see this warning don't worry
745:52 - we'll fix it in a second beautiful and
745:56 - once we have the store in place now
745:58 - let's set up the slice and I fully
746:02 - understand that this name is totally
746:04 - funky you're like what slice are you
746:06 - talking about and I want you to think of
746:08 - slice as the feature of your application
746:12 - so if we take a look at the complete
746:14 - project you'll notice that yes we have
746:16 - the card functionality
746:18 - but we also have the model
746:21 - and you can think of it as two features
746:25 - our application so we have one feature
746:27 - for the model and the second one is
746:30 - going to be for our card and of course
746:33 - the bigger our application
746:36 - the more features we're going to have
746:38 - and in the Redux toolkit land it is
746:42 - called slice now in order to set up
746:45 - slice a common convention is to set up
746:49 - features folder but of course naming is
746:52 - always up to you but then whatever is
746:54 - going to be the name of the feature so
746:56 - in my case it's going to be card that's
746:58 - why I'll set up a card folder and then
747:00 - we want to set up a file again like I
747:04 - keep mentioning the naming is up to you
747:05 - but again typically you'll go with
747:08 - whatever feature and then slice JS now
747:11 - in there
747:12 - you'll want to get create slash and
747:15 - don't worry about this one that create
747:17 - async thunk let's say not I'll remove it
747:20 - worry about that later and then we want
747:23 - to invoke that function create slash we
747:27 - want to give it a name again it's
747:29 - totally up to you but in my case I'm
747:30 - going to go with card and then we have
747:32 - initial State Property
747:35 - where we just set up whatever state we
747:37 - want in my case I'll set it up as a
747:39 - separate object and in here I'm going to
747:41 - go with cart items with an amount so how
747:44 - many items I have in a cart what is the
747:46 - card total both of them zero and then is
747:48 - loading true because eventually we will
747:50 - load this from the API then I'll log the
747:54 - sucker
747:55 - the card slice and in there we'll have
747:58 - the reducer and of course I'll talk
748:00 - about this one a little bit later once
748:01 - we get there and eventually what we want
748:04 - to do is in the store we want to import
748:07 - cart reducer so that's going to be the
748:10 - function that controls this state in our
748:14 - slides so think of our application we'll
748:17 - just split up the functionality where
748:19 - this slice is just responsible for the
748:22 - cart and this reducer specifically is
748:26 - going to modify it whatever
748:27 - functionality we set up and then in that
748:30 - reducer that we set up in the last video
748:31 - notice there's a complaint that there's
748:33 - no valve reducer now we want to set up a
748:36 - key now key name is really up to you
748:38 - just like everything else and I know
748:41 - that you're probably sick of hearing
748:42 - this but I just want to make this clear
748:43 - where this is totally up to you you can
748:46 - call this banana pudding if you want
748:48 - just remember that later once we start
748:51 - setting up our functionality yes of
748:53 - course we'll have to access this name so
748:55 - therefore I'm going to go with cart and
748:57 - I want to set it equal to reducer so the
749:00 - function that we'll have access to
749:03 - and a function that will allow us to
749:06 - control this
749:08 - piece of State for this specific
749:11 - functionality hopefully this is clear so
749:14 - now let's go to Source we want to create
749:16 - new folder like I said common convention
749:19 - we'll call this features so features our
749:22 - application in our case cart and model
749:24 - then let's create another folder and
749:27 - we're gonna go here with cart then
749:29 - inside of the cart let's go with new
749:31 - file and we're gonna go with cart slice
749:34 - Js so once we're here we want to import
749:38 - we want to import and we'll say create
749:41 - and slice now for some reason it does
749:44 - not oh yep it does so I have the
749:47 - suggestion and let's right away invoke
749:49 - it I'm going to call this const card
749:53 - and slice and that is equal to create
749:56 - slice
749:57 - it's a function we pass in the object
749:59 - and here we can set up a bunch of
750:01 - properties
750:02 - so first we want to set up the name
750:05 - so I'm gonna go here with card then we
750:08 - want to go with that initial State this
750:10 - is the case since I have more properties
750:12 - might as well set it up as a separate
750:14 - object so let's set up here initial
750:16 - state
750:17 - and then we'll add card items which
750:20 - initially is going to be empty array but
750:22 - then we'll take a look at multiple
750:24 - approaches to local data and then the
750:26 - data coming from the API I also want to
750:29 - go with amount so how many items I have
750:31 - in the cart and Please be aware that I'm
750:34 - not just talking about the products I
750:36 - have in my card I'm actually
750:39 - looking for the item count
750:42 - so how many items of that specific
750:46 - product I have and this is going to be
750:48 - that amount hopefully that is clear then
750:50 - we want to go with total so Total Money
750:52 - both of them zero initially and that is
750:54 - loading because eventually we'll pull
750:57 - this from the API so that's going to be
751:00 - our initial State once we save notice
751:02 - right away
751:03 - initial studio in here references the
751:06 - initial property then we want to log
751:08 - this sucker and we want to quickly
751:11 - import install.js now in a second we'll
751:14 - do more proper setup I just want to
751:16 - showcase what we have in the card slice
751:19 - so let me save it then I'll navigate
751:22 - back to the store and for time being
751:23 - let's just import the entire file like I
751:26 - said more proper setup is coming let's
751:29 - just go here with the features
751:32 - red card and then card slice and once we
751:35 - import of course we right away invoke
751:39 - the file and here we'll see that console
751:42 - log so we'll have some actions here
751:45 - something that we'll discuss a little
751:47 - bit later once we set up some reducers
751:50 - we have case reducers again something we
751:53 - don't need to worry about right now get
751:55 - initial State again a function that gets
751:58 - the state name and then notice all the
752:00 - way in the bottom we have that reducer
752:02 - so this reducer
752:05 - is the one that is going to control that
752:09 - state in this slice that's why we want
752:12 - to export that we want to export this
752:14 - and in the store we want to come up with
752:17 - a key and set it equal to that reducer
752:20 - so let's try this out I'm going to go
752:22 - with cart then instead of just getting
752:24 - the file I'll actually look for that
752:27 - reducer but I'll set it up as a default
752:30 - one so for time being I'll comment this
752:33 - one out we'll come back to this one
752:34 - because again we'll talk about these
752:36 - actions eventually and now I just want
752:40 - to export that reducer now there's
752:42 - Million Ways How we can export Us in
752:45 - this case I'm going to go export default
752:47 - and then cart slice dot reducer again
752:51 - this is an object and this is a property
752:53 - so let's export this event in the store
752:56 - we wanna import so I'm gonna go with
752:59 - cart not slice but reducer again if you
753:04 - want to name this differently of course
753:05 - you can and then we're going with from
753:08 - and now go with cart equals to card
753:11 - reducer and we shouldn't see any error
753:15 - messages anymore because now we have the
753:17 - proper set up so now we can take a look
753:20 - how we can access the data first from
753:24 - that initial State and then of course
753:26 - eventually also take a look at how we
753:28 - can set up functionality to control this
753:31 - but our first step is going to be
753:33 - accessing this data okay and before we
753:36 - go any further let's also quickly
753:38 - install Redux devtools and the good news
753:41 - is that as far as the code we don't need
753:44 - to add any configuration basically the
753:48 - moment we install Redux toolkit we're
753:51 - good to go however when it comes to
753:53 - browser we do need to install extra
753:56 - extension and the extension you're
753:58 - looking for is this one Redux Dev tools
754:00 - and in the Chrome if you want to install
754:03 - extension just go to your extensions
754:06 - and then more specifically look for open
754:09 - Chrome web store and then in here look
754:13 - for the Redux one not the Red X 4K
754:16 - apologies Redux so this is the extension
754:19 - you're looking for and once you do that
754:22 - let me open this up in the big browser
754:24 - so that's my localhost 3000
754:27 - you'll notice a tab it Redux Tab and
754:31 - here we'll be able to find bunch of
754:33 - useful info now at the moment
754:36 - I mean we have a clean application we
754:38 - only have the state but yes eventually
754:40 - once we set up the reducers the actions
754:42 - and all that yes this is going to be a
754:45 - very useful tool now at the moment the
754:49 - only thing that I want to showcase that
754:50 - this is our state notice that's my card
754:53 - card items amount total and is loading
754:56 - and yes of course
754:58 - in our store
755:01 - once we add more reducers
755:05 - all of them will meet over here and
755:07 - that's why this tool is very useful
755:09 - because as will dispatch our actions
755:11 - we'll clearly see how our state changes
755:15 - beautiful and once we have set up
755:18 - the Redux details up next let's see how
755:21 - we can access that initial state in any
755:25 - of the components
755:27 - so we have the initial state in the
755:30 - slice
755:31 - and let's say that I want to set up a
755:33 - navbar component where I want to access
755:36 - the amount
755:38 - and the setup is following where we do
755:41 - want to create the components folder
755:43 - then navbar.js and in there we'll import
755:46 - cart icon so that's the component that's
755:49 - coming from the icons folder and I'll
755:52 - discuss how we can set up the component
755:55 - e in the following video because at the
755:57 - moment I do want to focus on the state
755:59 - value access and then we want to import
756:02 - use selector so that's a hook coming
756:05 - from react reduction
756:08 - and then in the navbar component before
756:10 - the return we want to invoke use
756:13 - selector and the selector is looking for
756:16 - one thing it's looking for the function
756:19 - and as a parameter we get access to the
756:23 - entire state so we're talking about the
756:27 - entire store
756:28 - again in our case we just have the card
756:31 - but eventually we'll add more reducers
756:35 - over here so since this is a parameter
756:39 - of course we can call it whatever we
756:40 - want so you'll see probably state but
756:43 - actually my preference is to call this a
756:45 - store because that signals to me that
756:48 - that is entire store so the entire state
756:50 - of my application and then more
756:52 - specifically I'm looking for DOT card
756:54 - wire
756:56 - because that's the name of the property
756:58 - over here and then initial state if you
757:00 - remember we do have the amount property
757:02 - and of course there's Million Ways How
757:04 - we can set this up for example we can
757:06 - just return from this function this
757:08 - amount or since in this case we're
757:11 - returning the entire object we can to
757:14 - structure it so let's try to set this up
757:17 - where in the source I want to create a
757:20 - new folder and I'm going to call this
757:23 - components over here then let's set up
757:26 - that nav bar
757:28 - nav bar JS in here
757:32 - like I said first let's import card icon
757:35 - something I'm going to discuss in the
757:38 - following video then we also want to get
757:40 - that U selector
757:42 - so let's say use
757:44 - selector hook that is coming from react
757:47 - Redux and now let's set up that navbar
757:50 - component so I'm going to use my
757:52 - extension I'll set up the number and
757:55 - first let's set up the return and then
757:58 - we'll worry about the actual state so
758:00 - let's say here nav I do want to add here
758:04 - a div so inside of the div let's go or
758:07 - I'm sorry inside of the nav let's go
758:09 - with there let's add a class name of nav
758:11 - Center and here we want to go with
758:14 - heading 3 Redux toolkit
758:18 - and after that let's save it and we
758:22 - don't see anything so let me refresh
758:23 - don't see anything in the browser and of
758:25 - course the reason for that is because I
758:27 - didn't import in the object so let me go
758:29 - back
758:30 - and in the app.js let's import the nav
758:33 - bar
758:34 - and then let's set it up over here
758:37 - so what I want to do as far as the
758:40 - return in app.js
758:42 - I just want to go with Main and then the
758:45 - number so instead of the heading to
758:48 - index toolkit we'll go with main tags
758:51 - and then first we'll set up the nav bar
758:53 - and then we'll set up rest of the card
758:57 - items as well so that should be our
759:00 - number okay that's awesome
759:02 - and as far as the other stuff
759:05 - I think I'm gonna go here
759:08 - with a card icon but that is going to be
759:11 - placed in the nav container so right
759:14 - after this heading three I'm gonna go
759:17 - with div the class of nav container and
759:22 - here let's set up that cart icon yep
759:26 - that is how it's going to look like and
759:29 - then let's go with div the class of
759:31 - amount
759:33 - container and then paragraph with a
759:37 - class of total total hyphen
759:41 - and amount and at the moment let's just
759:43 - place a zero here let's save this and
759:45 - now let's see how we can access the
759:49 - entire state of our application so first
759:52 - let's just log the sucker let's say use
759:55 - selector
759:57 - so that's the hook and like I said it's
760:00 - looking for one parameter which is going
760:01 - to be our function and then inside of
760:04 - this function as a parameter we get that
760:07 - entire store so for time being I'm gonna
760:10 - call this store and I'll log it I'll say
760:13 - but the only thing that I want to do in
760:15 - this function is log the store and what
760:18 - you'll notice in the console
760:20 - is our entire state which is just
760:24 - awesome if you ask me so take a look
760:27 - over here we have card items we have a
760:30 - mount and we have the total so again I
760:33 - know I'm repeating myself
760:35 - but essentially the idea is that
760:38 - using this use selector notice how we
760:41 - don't need to pass anything coming from
760:43 - the specific slice or nothing like that
760:45 - we can right away in this function axis
760:49 - our entire store
760:51 - and essentially what we want to do we
760:54 - want to return something
760:56 - whether that is specific
760:59 - property for example amount or of course
761:03 - you can return the entire card and then
761:05 - you can the structure so first let's
761:08 - just set it up where
761:10 - we return the amount so notice over here
761:13 - we have undefined in line five because
761:15 - we're not returning anything from this
761:16 - function yet
761:18 - and let's set up over here in the
761:20 - paragraph and then we'll take a look at
761:22 - the the structuring option as well I
761:26 - don't think I'm going to leave this for
761:27 - your reference because again
761:29 - we'll set up multiple ways anyway so
761:31 - first let's go with a mount and that one
761:33 - is equal to Let's again invoke use
761:36 - selector let's pass in the function and
761:39 - I'm going to be setting up the arrow
761:41 - function and I'll go right away with
761:43 - implicit return so again in here we are
761:46 - accessing the entire state of our
761:48 - application and we go with store cart
761:51 - because that's the property value
761:54 - and yes once we add more reducers
761:58 - in our store then of course we'll be
762:01 - able to access it so I'm gonna go here
762:03 - let's say with modal and I'm not going
762:07 - to pass anything in because I do need to
762:08 - set up the reducer then of course we'll
762:11 - be able to access with
762:13 - store dot model hopefully that is clear
762:16 - and this is very very useful because
762:18 - again we don't need to import anything
762:20 - specific from that slice we have access
762:23 - to entire store and then let's go with
762:26 - the mount so this is what I'm returning
762:28 - from the function
762:29 - and probably it's not going to be
762:31 - surprising if I pass here the value
762:34 - still going to be zero now let's test
762:37 - this out though let's go to our features
762:40 - slice and let's change this around let's
762:42 - say there's going to be five items
762:44 - number one I save notice now of course I
762:47 - have this value of five so we know that
762:49 - our functionality works and like I said
762:52 - there's million different ways how we
762:55 - can set this up and one of them is
762:58 - actually the structuring so I know that
763:00 - I can return store Dot card which is
763:04 - essentially a object correct and then
763:08 - inside of it I have the amount property
763:10 - so this is also valid honest value did
763:13 - not change and we didn't get any bugs so
763:16 - that's how we can access data from our
763:20 - slice we need to pick the component we
763:23 - need to use a use selector and here we
763:25 - pass in the function
763:28 - and as a parameter of this function gets
763:31 - the entire store and then we just need
763:34 - to pick what we want to return in my
763:36 - case I want to return cart from this
763:38 - function it is an object and it
763:40 - represents this initial state
763:44 - and more specifically I'm looking for
763:46 - the amount that's why I destructured it
763:49 - and then I display it here in the return
763:52 - as far as the icons in this project I
763:55 - decided to go different route where I
763:58 - use the hero icons site so once you
764:04 - navigate there you'll notice a bunch of
764:06 - nice icons and essentially I just set
764:10 - them up as components so let me show you
764:12 - with one and then you understand the
764:15 - general concept just pick the icon you
764:17 - want in this case I think I'm gonna go
764:20 - with this bad one and as far as I
764:23 - noticed there's really no difference
764:24 - whether you go with jsx or SVG
764:27 - so let me just copy this one let's
764:30 - navigate back and then in the icons
764:33 - you'll notice full-blown components that
764:36 - I will right away export so let me keep
764:39 - scrolling and I'm going to call this
764:40 - testing so I'm going to say export const
764:43 - that's going to be my testing component
764:46 - and in here you just want to set up the
764:49 - value you want to return
764:51 - so this essentially will be the icon now
764:55 - I am styling it though in CSS and in a
764:59 - second you'll see what I mean so I have
765:01 - this testing icon right now so that's
765:03 - the return that I just copied so now
765:06 - let's navigate to the navbar since I
765:07 - already have the import for the card
765:09 - icon
765:10 - and let's set up over here the testing
765:13 - one as well
765:14 - and we can place it anywhere we want so
765:17 - let me put it side by side and you'll
765:19 - notice that this is a giant ore I'm
765:22 - sorry well I already applied The Styling
765:24 - so maybe this is not gonna work over
765:28 - here maybe let me set up here the
765:32 - fragment and then you'll see what I mean
765:34 - so let me move the sucker down again
765:36 - this is just temporary you don't have to
765:38 - follow along
765:39 - but you'll notice that if we don't apply
765:41 - a styling we'll get this massive icon
765:45 - basically that's the default that they
765:47 - provide
765:48 - so in the Styles in the index CSS
765:53 - I added some styling for specific icons
765:56 - so now I'm talking about the cart icon
765:59 - and also same applies for these ones
766:03 - over here as well so not only you'll
766:07 - need to get the icon but notice over
766:09 - here I applied some width as well as the
766:12 - color and of course you can add more
766:14 - Styles so essentially that's how I set
766:17 - up
766:18 - my icons where I created icons Js
766:22 - and in here you'll find three icons so
766:25 - one for the cart and then the other ones
766:28 - for the actual card items and I imported
766:32 - the icon from the hero icon so I set it
766:35 - up as a component I export and then I
766:38 - import in any of the components that I
766:41 - want and then I just need to apply a
766:43 - little bit of styling and you want to
766:45 - Target the SVG so now let me remove the
766:48 - testing one
766:49 - and also let me remove it from the icons
766:52 - since we won't use it and now let's
766:55 - proceed to The Next Step all right and
766:58 - up next let's work on our car items so
767:00 - at the moment it is empty array or I did
767:04 - prepare
767:05 - an array of products just so we can set
767:09 - up the initial functionality yes
767:11 - eventually we'll fetch this data from my
767:14 - API and in the process we'll practice of
767:17 - how we can set up asynchronous
767:19 - operations in Redux toolkit but for time
767:23 - being this will be hard-coded data and
767:26 - it is located in the car atoms and as
767:28 - you can see it is an array where each
767:31 - item is an object with some properties
767:34 - so what we're going to do we're going to
767:38 - set up the initial State equal to that
767:42 - array so of course we just need to
767:44 - import and then we'll repeat the same
767:46 - steps like we did with an amount in
767:51 - number however since we have unraveled
767:54 - after iterate over and all of that cool
767:56 - stuff so first what I want to do is go
768:00 - to the card slice and we want to import
768:03 - we want to import those card items so
768:06 - let's go here with car items it is a
768:09 - default export so it doesn't really
768:10 - matter how we call it here
768:12 - and then we need to go two levels up
768:15 - we're looking for the card items and in
768:18 - here
768:19 - what do we have the initial State let's
768:21 - set up current items equal to current
768:24 - items now if we want to see that we can
768:27 - either go to the nav bar since in there
768:29 - we have the use selector and we can of
768:32 - course log it or
768:33 - we can take an advantage of the Redux
768:36 - devtool so let's navigate here
768:39 - let's refresh just so we're on safe side
768:42 - if we navigate to the Redux depth tools
768:45 - now what you'll notice that card items
768:48 - in the card
768:50 - is an action array like I said each
768:52 - object represents that item with a bunch
768:56 - of useful properties so our next step is
768:58 - going to be setting this up in the
769:01 - app.js where we'll grab them we'll
769:04 - iterate over and then for each item
769:07 - we'll return a component with the image
769:10 - the title and rest of the stuff not bad
769:14 - not bad so we set up the card items
769:17 - equal to an actual array instead of
769:21 - empty one now let's set up two more
769:24 - components the cart container just and
769:28 - cart item.js
769:30 - and just the Showcase so this is going
769:32 - to be the container where we'll have all
769:36 - of the items as well as the total
769:38 - and the clear card functionality now
769:42 - eventually we'll add the model but the
769:44 - idea won't change if we click on clear
769:46 - card then of course we'll have empty
769:50 - card and then we also want to set up
769:52 - that cart item where again we'll display
769:55 - all of this info and yes we'll practice
769:59 - on use selector again where in the card
770:03 - container we not only want to get the
770:05 - car items we also want to get the total
770:08 - as well as the amount because we'll use
770:11 - that amount
770:12 - to display some things conditionally in
770:15 - this case if the amount is less than one
770:17 - then I'll display this and then if there
770:20 - are some items in a card then of course
770:22 - there's going to be a different logic
770:24 - and in the card item we'll just pass in
770:27 - the ready as a key as well as the
770:30 - properties of the atom and then we'll
770:33 - destructure it now when it comes to card
770:35 - item for the most part we'll get there
770:37 - our action creators which of course will
770:41 - set up a little bit later so for now we
770:44 - just want to worry about rendering the
770:47 - cart items on the screen
770:50 - so let's get cracking where I want to go
770:52 - two components and let's go here with
770:55 - cart
770:56 - container.js
770:58 - and I also want to set up that card
771:01 - item.js now when it comes to car animal
771:04 - work on that one in next video
771:07 - for a moment and as you know it should
771:09 - be card items should be call Item one
771:13 - and now let me fix this one as well
771:15 - where I'm gonna go with cart item now we
771:19 - want to import that in the cart
771:21 - container so let's set up this component
771:24 - as well
771:25 - so r a f c e and that's right away
771:30 - import that card item so let's go here
771:34 - with cart item then we want to navigate
771:37 - to the app.js and we also want to get
771:40 - that card container so let's get that
771:44 - one and I'll place it right after the
771:47 - container meaning the number sorry and
771:49 - we should see on the screen card
771:51 - container awesome
771:53 - now what's next well let's take a look
771:55 - at the readme where we do have the car
771:58 - item we also want to get the use
772:00 - selector and now from my application
772:03 - State I want to get the entire card and
772:06 - I'll adjust the structure columns total
772:09 - as well as the amount like I said the
772:12 - amount we'll use to display
772:14 - conditionally empty card
772:17 - um again I already showcased that but
772:19 - let me show you one more time this is
772:21 - what we want to set up if the card is
772:24 - empty and we'll control that with the
772:26 - mod now if there are some values in the
772:28 - card then this is what we want to return
772:30 - we want to go with Section header
772:32 - iterate over card items
772:35 - and then also in the footer we want to
772:37 - display the total with the clear card
772:41 - button so let's set this one up where
772:45 - I'm gonna go with import then use
772:47 - selector from yeah Redux let's right
772:51 - away access all of the items so let's
772:53 - say here const
772:54 - I'm looking for cart
772:57 - and items
773:00 - total also we want to get the amount and
773:03 - all of that is equal to use
773:06 - selector let's pass in the function and
773:09 - what we want to return we want to go
773:10 - here with store or state however you
773:14 - want to call it
773:15 - store and then cart so we get all those
773:18 - values right away let's set up that
773:20 - condition where I'll say amount is less
773:23 - than one if that is the case what we
773:25 - want to return well we want to go here
773:28 - with section
773:30 - then let's add a class name of card
773:33 - and let's set up some logic over here
773:35 - let's say here header
773:38 - and side of the header we'll have a
773:41 - heading to your
773:43 - bag and then right after that let's go
773:45 - with heading four and we'll say empty
773:48 - card now we do need to add here empty
773:51 - cart class
773:53 - and let's add a text your card is
773:56 - currently empty or your bag
773:59 - it's empty let's save it now since the
774:01 - amount is zero this is exactly what we
774:04 - display so in order to see the atoms of
774:07 - course we'll have to navigate back to
774:09 - the card slice and again for time being
774:11 - we'll just hard code this don't worry
774:13 - eventually we'll set up some action
774:16 - creators
774:18 - that control this logic essentially will
774:20 - set up some reducers and by default
774:22 - Redux toolkit is going to give us those
774:25 - action creators so let's go back to the
774:29 - cart container
774:31 - and right after this one you want to set
774:34 - up another return so as you saw this one
774:37 - was if we have less than one and now
774:41 - since we hard-coded we have four
774:43 - so in here we want to go with another
774:46 - turn
774:47 - another section
774:48 - and we do one on a class so class will
774:52 - be
774:52 - equal to cart
774:55 - and then the same deal we want to set up
774:58 - that header
775:00 - so header over here
775:02 - and inside of it we're just gonna go
775:04 - with heading to your bag
775:07 - your bag let's save that one and yeah as
775:12 - I know this is wrong so it should be
775:14 - class name
775:15 - then we want to iterate over the card
775:18 - items so for time being we just want to
775:21 - set up a div then we want to grab those
775:23 - card items we want to run the map and
775:26 - this is the actual array correct and
775:29 - then for every item we want to return
775:31 - that card item that we just set up
775:35 - and we want to pass in the data now on
775:38 - the screen we'll just see that text
775:39 - whatever we have over there so here we
775:41 - have the Karam but eventually yes we'll
775:44 - access it and we'll correctly display it
775:46 - so we're mapping over I'll call this
775:49 - item so now I'm talking about each and
775:52 - every object over there let's go with a
775:54 - return then let's set up a cart item we
775:58 - do need to pass in the key since this is
776:00 - react and I already know that there's a
776:03 - an ID property now if you don't believe
776:05 - me
776:06 - you can navigate over here and you'll
776:09 - clearly see that so each and every item
776:11 - has that ID property so let's say here
776:14 - dot ID and then I want to use the spread
776:17 - operator Dot and then pass in rest of
776:21 - the properties let's save it so since we
776:24 - have four items we have four card items
776:27 - on the screen and then right after this
776:30 - one right after this div let's set up a
776:32 - footer this is where we'll display the
776:36 - card total as well as the clear button
776:39 - cut which eventually will revoke the
776:41 - model and clear the card so I'm gonna go
776:45 - with a horizontal line here then let's
776:48 - add heading 2. with some data so total
776:52 - span and set of this one I want to set
776:56 - up a dollar sign I'll say total yes the
776:59 - moment it is going to be zero
777:01 - don't worry about it and as I not
777:04 - actually messed it up over here it
777:05 - should be there with a class of card
777:07 - total my apologies that's why the CSS is
777:10 - not correct
777:11 - and after that we want to go with that
777:14 - clear card button so still within the
777:17 - footer
777:19 - we want to go with a button let's add a
777:22 - class right away it should be the end
777:24 - clear begin
777:25 - and let's say clear card
777:29 - let's save this let's refresh so we
777:31 - don't have any errors and this is what
777:34 - we should see
777:36 - on the screen where again we used use
777:39 - selector
777:41 - to access our entire store more
777:44 - specifically we looked for cart which
777:47 - represents that initial state in the
777:49 - initial State we have all these values
777:52 - so we're able to structure and then we
777:55 - check for the amount
777:57 - if it's less than one we display the
777:59 - message if we have some items in there
778:01 - then we just iterate over them and for
778:05 - every item we return that card item and
778:07 - then below that we have total which at
778:10 - the moment is zero eventually this will
778:12 - be dynamic as well as the clear card
778:15 - button which eventually will remove all
778:18 - the items from the cart awesome and up
778:22 - next I want to set up the card item
778:26 - where we're passing in all of the data
778:29 - from the cart items so we go here with
778:32 - dot dot an item basically we spread out
778:36 - all the properties so we can access them
778:38 - of course here when we destructure the
778:42 - props and then we just want to set up
778:44 - some return with the image title and
778:47 - rest of the stuff yes of course none of
778:50 - the buttons at the moment will work but
778:52 - at least we'll have a better looking
778:54 - card item and also we want to get two
778:56 - icons from the icons we want to get rest
778:59 - of them the Chevron down and Chevron up
779:03 - so I'm gonna navigate to the card item
779:06 - first let me grab both of them let me
779:09 - get the import then we're looking for
779:11 - Chevron down and Chevron
779:15 - Chevron up
779:17 - after that we want to go in the
779:19 - structure all of the props so we're
779:22 - looking for ID
779:23 - image title price as well as the amount
779:28 - and as far as the return let's start
779:30 - over here with simple article
779:33 - so we want to go here with article and
779:36 - let's add a class of cart
779:39 - item then we want to go with image and
779:42 - Source will be the image
779:45 - so let me say here dynamically image and
779:48 - as far as the alternative well we have
779:50 - the title for that so let's save it and
779:53 - we should see the images and if we do
779:55 - and of course we can proceed to the next
779:58 - step
779:59 - after that we want to set up a div
780:01 - ing four is where we'll display the
780:04 - title so let's save that then we also
780:08 - want to set up the price so let's say
780:10 - here heading 4 with the class of item
780:13 - price which comes with a little bit of
780:15 - styling and then I'll add the dollar
780:17 - sign and I'll say a price let's save
780:20 - that then we want to set up the button
780:23 - so right below we'll go with button then
780:27 - class and remove
780:29 - iPhone B10 and we'll say remove would
780:32 - save that and then we just want to set
780:35 - up those buttons to increase or decrease
780:39 - the amount so we want to do that right
780:41 - after this div
780:43 - so this is where we set up the heading
780:45 - force and the button but after that we
780:48 - want to go with another div there's
780:49 - going to be no class
780:51 - well we want to set up a button let's
780:53 - call this amount
780:55 - hyphen BTN and then let's add that icon
781:00 - over here so in this case I want to go
781:02 - with Chevron up let's close it okay good
781:05 - then we want to copy and paste and set
781:08 - up the rundown
781:10 - so the class is going to be the same
781:13 - mount button and here we just want to
781:15 - say Chevron down and in between them
781:17 - this is where we'll place the amount so
781:20 - let's say here paragraph class name
781:23 - amount and we want to render the amount
781:26 - so say amount over here let's save it
781:29 - and for all of them we have one
781:32 - of course in the following videos we'll
781:34 - set up the functionality that allows us
781:37 - to change that and with this in place
781:40 - now we can start slowly
781:42 - adding our first reducers okay so how we
781:47 - can set up the functionality with Redux
781:49 - toolkit so if you remember previously we
781:52 - needed to set up the action we needed
781:54 - dispatch and then we always always need
781:56 - it to return a new state and then just
782:01 - of course copy the values and all that
782:03 - now this is not the case with Redux
782:07 - token in fact it's much much much easier
782:11 - and the way we can do that we simply go
782:15 - with a reducer's property in the slice
782:18 - and again key value pair
782:20 - so in my case I'm going to call this
782:22 - clear card that's going to be the name
782:25 - of my reducer over here now as a
782:28 - parameter this function gets a state and
782:31 - notice how we don't have to return
782:33 - anything I don't have to return the new
782:36 - state and always avoid the mutation
782:40 - basically remember with user reducer we
782:42 - always always needed to return a new
782:45 - state we don't have to do that right now
782:46 - why because when we installed Redux
782:49 - token we also installed email Library
782:51 - which behind the scenes does all the
782:54 - heavy lifting so in our case we can
782:57 - modify the state or mutate the state
783:00 - directly and yes you're not
783:02 - hallucinating this is clearly the code
783:05 - that mutates the state
783:07 - the reason we can write such code is
783:10 - because Redux toolkit comes with Emer
783:13 - library now it's also really cool that
783:17 - if we take a look at card slice
783:19 - Something That We're logging right now
783:21 - in the card slash.js we have actions and
783:25 - the moment we create that reducer
783:28 - will be able to see the action created
783:31 - by the name of yes exactly the same
783:34 - Clear card
783:36 - and what that means is that we don't
783:38 - need this code again remember with use
783:40 - reducer we set up the action we set it
783:43 - equal to string and we didn't set up the
783:46 - action Creator per se when we used user
783:48 - reducer
783:49 - but the idea would be that we actually
783:52 - set up a function that returns that type
783:55 - so we don't need to run around with this
783:57 - variable basically have right away
783:59 - function and
784:00 - optionally we can also pass in the
784:02 - payload now why am I saying this because
784:05 - now we can directly use this clear card
784:08 - we don't need to set up the variable we
784:11 - don't need to create the function
784:12 - essentially it's already provided for us
784:15 - and then in order to invoke it
784:18 - we need to get another Hook from the
784:20 - react Redux and this is use dispatch
784:24 - so remember
784:26 - with userducer we use dispatch in this
784:29 - case we right away get it if we invoke
784:31 - use dispatch and then we invoke this
784:34 - patch so whatever we're getting back
784:36 - from here and we just pass in action
784:39 - Creator so yes we do need to import
784:42 - clear card that's why we're exporting
784:45 - over here on this export console and
784:47 - then name import or I'm sorry name
784:49 - export
784:51 - and then we just need to use it and
784:53 - don't worry if some of this seems
784:55 - confusing at this point
784:57 - it will make total sense once we
784:59 - complete the entire setup so first I
785:02 - want to navigate to cart slice like I
785:06 - said we want to start over here by
785:09 - setting up that reducer the one that is
785:12 - going to clear the cut so let's go here
785:15 - with a reducers
785:17 - and it's going to be an object inside of
785:19 - it we just need to come up with name for
785:21 - our reducer okay so it's going to be
785:24 - clear card it's going to be a function
785:26 - that gets the access to the state now
785:30 - also we'll have access to the payload
785:33 - basically
785:34 - let's say we want to pass in the ID
785:36 - something we'll do a little bit later
785:38 - which is going to be a second parameter
785:40 - for now we don't need to worry about it
785:42 - I'll set it up as a arrow function and
785:45 - like I said
785:46 - I know I keep repeating this but we can
785:48 - mutate the state directly because behind
785:52 - the scenes immer takes care of that so
785:55 - we can go here with State then what is
785:57 - the value here it is card items whatever
785:59 - I want to do I want to set it equal to
786:01 - an empty array that's it that's all I
786:04 - want to do and now let's go to the cart
786:06 - slice let's uncomment the log
786:10 - and we'll see in the console that yes we
786:12 - have name and all that but now in the
786:15 - actions we have a function we have
786:18 - action Creator by the name of clearcard
786:21 - and again the beauty indices
786:24 - the fact that we don't need to set up
786:27 - anything manually as far as the action
786:28 - as far as the action Creator we right
786:31 - away get in by default
786:33 - and the only thing we want to do is pass
786:36 - in
786:37 - the clear card function
786:39 - into whatever we're getting back from
786:42 - this bachelor use dispatch and then pass
786:44 - it in so let's go back to the slice and
786:48 - instead of logging which as I said I'll
786:50 - comment this out we want to go with
786:52 - export const so all of these will be
786:55 - named and yes we'll add more functions
786:58 - of course over here
786:59 - and let's go with clear card and now
787:02 - where are we looking we're looking in
787:04 - the cart slice dot actions so let's set
787:07 - it equal to cart slash Dot and actions
787:11 - so from that object we export this and
787:14 - now we just need to decide well in which
787:16 - component we're going to use it of
787:19 - course in our case that will be cart
787:21 - container yes eventually we'll set up
787:24 - the model
787:24 - so we will move that functionality from
787:27 - the card container to the model but for
787:30 - now
787:31 - let's just see how we can invoke it in
787:33 - here so let's say use
787:35 - this patch that's the first one then
787:38 - comma and Below or above it doesn't
787:42 - really matter we want to go with that
787:44 - huge dispatch
787:47 - so const is going to be equal to this
787:50 - patch whatever we get back use dispatch
787:53 - invoke we don't need to pass anything in
787:54 - then let's keep on scrolling keep on
787:57 - scrolling this is where we have our
787:59 - button and now we do want to pass in the
788:01 - arrow function because of course I don't
788:03 - want to invoke this immediately I only
788:05 - want to invoke it when we click on a
788:08 - button so let's say here on click
788:12 - then let's pass in the arrow function
788:15 - and we'll say that every time we'll
788:17 - click on a button will dispatch
788:20 - an action and in here let's pass in that
788:23 - clear card again
788:26 - the beauty here is that we don't need to
788:29 - do all of that manual labor we just pass
788:32 - in the function that the side note I
788:35 - didn't import so let me go back we want
788:37 - to go with clear card which is coming
788:40 - from the card slice now let me save it
788:43 - and in here it says unknown event
788:45 - handler because I probably did some oh
788:48 - yeah this is not right and once we click
788:52 - this is what we'll see now we're not
788:55 - displaying this one the condition simply
788:58 - because we're not controlling the amount
789:00 - yet don't worry all of that is coming up
789:03 - for time being we are just displaying
789:05 - The Heading 2 with your back here and
789:08 - the total basically since we removed all
789:11 - of the items since it's set equal to an
789:14 - empty array we just have the your back
789:17 - and the total and with this in place now
789:21 - we can set up rest of the reducers and
789:24 - while we're still on the topic of State
789:26 - Management in the Redux toolkit reducers
789:30 - let's also cover
789:32 - an alternative option
789:34 - and that is simply the fact that we can
789:36 - return a new state from the reducer so
789:40 - let me comment this one out let me type
789:42 - here return but we need to be aware of
789:44 - the major gacha and that is following
789:47 - whatever we will return
789:50 - from reducer as our new state will
789:53 - become the new state so let's say if I'm
789:56 - going to return an empty object yes our
790:00 - state will immediately turn into an
790:02 - empty object without any of these
790:05 - properties same works if I'm gonna
790:06 - return here empty array so let's say if
790:10 - I return an object and if I just say
790:13 - card items equals to an empty array yes
790:17 - I will update this property
790:21 - but automatically I'll remove these ones
790:23 - just to Showcase that let me save it let
790:26 - me click on clear cut and you'll notice
790:28 - that now I'm nothing here as far as the
790:32 - amount as well as the total and I can
790:34 - clearly see that if I navigate two
790:37 - adapto's so let me open up the Redux
790:41 - death tools on a small browser window
790:43 - and then when it comes to our state
790:46 - notice all of the properties are missing
790:50 - now only the card items is there
790:52 - so let me comment this one out and let's
790:55 - take a look at the use case where
790:57 - this is going to come in handy so in one
791:01 - of our upcoming projects we'll have some
791:04 - pages and in there we'll have a bunch of
791:07 - inputs that are going to be our state
791:10 - values
791:11 - and essentially there's also going to be
791:13 - a clear button
791:15 - and the idea is like this once the user
791:18 - starts typing something let's say
791:19 - changes some values around here
791:22 - at some point maybe he or she wants to
791:24 - clear out all the input values so in
791:27 - that case we're gonna take that initial
791:30 - state
791:32 - and we'll just return that from our
791:34 - reducer so let's say you set up your
791:36 - state with whatever default values
791:39 - and then
791:41 - when you have the reducer that just sets
791:44 - it back to default you just pass that
791:46 - initial State as a return in your
791:49 - Edition so that's one of the use cases
791:51 - where this comes in handy but we do need
791:54 - to be careful again whatever we're going
791:57 - to return from the reducer will become
792:00 - that new state value so if we omit some
792:06 - of the properties yes they will be
792:08 - excluded okay and once we can clear the
792:12 - cart
792:13 - it's a smooth sailing from here
792:15 - we just want to set up those functions
792:18 - we want to add the functionality and yes
792:21 - we will take a look at the action how it
792:25 - looks like and why we're looking for the
792:26 - payload and I know I said this already a
792:29 - million different times but
792:32 - since right now we can modify the state
792:36 - directly
792:37 - there's tons of ways how you can set
792:39 - this up now I purposely kind of tried to
792:44 - showcase the mutation approach where yes
792:47 - of course
792:48 - in these examples for increase and
792:50 - decrease we can return a new array
792:55 - but I purposely just found the exact
792:58 - item and then updated the amount plus or
793:01 - minus and also of course you can combine
793:04 - increase and decrease into one function
793:07 - let's say you can call this toggle and
793:11 - of course you'll just have to provide
793:13 - here more values whether you're
793:15 - increasing the equation that could be
793:16 - your challenge for now we just want to
793:19 - focus on remove
793:21 - item and the first thing that I want to
793:23 - showcase is the fact that we can access
793:25 - the payload so whatever we pass in
793:28 - because in order
793:30 - to get the specific item in order to
793:33 - remove it I do need to get the Eddie
793:35 - correct if you're paying attention in
793:38 - the card item we did this structure
793:40 - already however
793:42 - we haven't used it here so this is
793:44 - something that we will pass into the
793:47 - function
793:48 - and essentially as far as the remove
793:50 - item I'll get it from action.payload
793:53 - because that is a structure I'll name
793:55 - this item ID
793:57 - and then I just want to set equal State
794:00 - card items to the new array now I wasn't
794:03 - doing this purposely again there's tons
794:05 - of ways how you can set it up but in
794:06 - like I said just thought that filter is
794:08 - the fastest one so let me go to state
794:11 - DOT card items we filter it we look for
794:13 - specific item
794:15 - that does not match the Eddie and we
794:19 - return that into this car items so if
794:22 - the ID matches
794:24 - so whatever we pass in Manchester to the
794:26 - 80 then that item won't get returned and
794:30 - in the process we'll move it from this
794:32 - array so let's try this one out where in
794:36 - the cart slash
794:38 - let's set up that remove item so I'm
794:41 - gonna go here with a move item and first
794:44 - I just want to showcase
794:47 - how we can access the payload so first
794:50 - one is the state so we access the state
794:52 - here then I'm gonna go with action and
794:56 - later I'll showcase how we can structure
794:57 - that and for time being let's just look
795:00 - for the action and now let's think about
795:02 - it where do we want to access all these
795:05 - functions they remove items increase
795:08 - decrease and not calculate totals so
795:12 - only these three well we want to get
795:14 - that in the car item so first in the
795:18 - card slice we want to export that again
795:20 - what's really cool is the fact that the
795:23 - name is exactly the same we don't really
795:24 - need to think about it and as I said it
795:27 - shouldn't be remove items it should be a
795:30 - remove item I apologize for some reason
795:32 - I just keep adding those s's there then
795:36 - let's navigate to the card item first we
795:39 - want to import the remove item so we're
795:43 - looking for a remove item
795:45 - and notice how right away we get that
795:47 - named import and also we want to get
795:50 - that dispatch so let's just set it up
795:53 - over here where we'll say import then
795:56 - use dispatch that is coming from react
796:00 - Redux then
796:03 - the very top we're gonna go here with
796:05 - const dispatch
796:08 - and that will be equal to use dispatch
796:10 - let's invoke it and then let's look for
796:13 - that remove button
796:15 - so now basically every time you click on
796:18 - a button
796:19 - we will remove that specific item so
796:23 - let's say here on click
796:25 - again we do want to pass in the arrow
796:27 - function first and then let's say
796:29 - dispatch and we'll go with a remove item
796:33 - and now let's pass in the ID
796:35 - so first thing what you'll see once you
796:38 - click is the log in the console so let's
796:41 - click and check it out
796:43 - in here we see two things
796:45 - first we see type
796:47 - so notice how that is right away already
796:49 - set up for us like I said we don't need
796:52 - to do anything right away it has cart
796:54 - and then remove item so this is the
796:57 - action that we're dispatching and we
796:59 - also get the payload now can you pass in
797:02 - the payload as an object absolutely but
797:05 - if we pass in as a simple property
797:08 - then we have payload is equal to
797:10 - whatever
797:12 - so knowing this we can set up rest of
797:14 - the functionality where in the card
797:17 - slice
797:18 - I'll assign action.payload equal to an
797:22 - ID const and I think I'm gonna call this
797:26 - product ID or sorry now I'll call this
797:30 - item ID so const
797:32 - Item ID is equal to action payload
797:37 - and then
797:39 - let's set up the new value for the state
797:43 - card items State again yes we're
797:46 - modifying this we're going to go with
797:48 - cart items is equal to and now let's
797:51 - access the old value basically before
797:54 - the update and we can do that with State
797:56 - card items then let's run filter and
797:59 - like I said if the ID matches the item
798:03 - won't be returned so essentially we'll
798:06 - remove it from our cart items array
798:09 - we're going to call this items and I'm
798:11 - gonna go with implicit return where I'm
798:13 - going to say if item id does not match
798:16 - the item id only then return it from the
798:20 - array
798:21 - and as a result check it out and click
798:24 - and we just keep removing the items from
798:28 - our bag again yes we're not affecting
798:31 - the amount as well as the total all of
798:34 - that is coming up but we should be able
798:37 - to remove all of the items from our cart
798:41 - be it with clear card or individually by
798:45 - clicking on the remove button all right
798:48 - and now once we're familiar now we can
798:51 - remove item let's also do the same thing
798:53 - with increase and decrease now in order
798:56 - to make things interesting I already
798:58 - destructured the payload so remember
799:01 - we're getting the action object and
799:02 - we're looking for the payload so in this
799:04 - case I just destructured that in the
799:07 - case of increase I'm going to State card
799:09 - items find so we get that specific item
799:12 - in this case where the ID matches unlike
799:16 - the filter approach and then I just want
799:19 - to update the amount so every time I'll
799:21 - click on the increase button will
799:23 - increase the amount of specific items we
799:28 - have in the cart for this phone or that
799:31 - phone
799:32 - and hopefully you see where I'm going
799:33 - with this and eventually of course this
799:36 - will also affect the amount as well as
799:39 - the total and yes I'll set them up
799:42 - pretty much right away since the
799:45 - functionality is exactly the same apart
799:47 - from the fact that in this case we
799:48 - increase and in this case we decreasing
799:50 - like I said if you want to challenge
799:52 - yourself set up a toggle functionality
799:55 - where you look for one more value
799:58 - increase or decrease which of course is
800:01 - going to be in the payload and then
800:03 - depending on that set up the
800:04 - functionality but for now let's just
800:07 - worry about these two so we're gonna
800:10 - navigate to cart slash and then right
800:14 - after move item let's say here increase
800:18 - let's set up our function
800:20 - let's say State like I said we'll right
800:23 - away look for the payload
800:25 - I'll set it equal to
800:27 - and when it comes to functionality we
800:30 - want to go with const first we want to
800:32 - get that card item each specific one
800:36 - where the ID matches and we can do that
800:38 - with state
800:39 - card items dot find then let's pass in
800:43 - the Callback function let's say item and
800:46 - then Item ID is equal to payload and
800:52 - we'll pass this in as an object so it's
800:55 - going to be payload
800:58 - dot ID
800:59 - and then
801:01 - let's increase that amount so now I'm
801:04 - accessing that one specific card item I
801:07 - have the amount property and please
801:09 - don't confuse this with the total amount
801:12 - so that's the total with all of the
801:14 - items that we have in a cart
801:16 - when we're talking about this cart item
801:19 - on property we're talking about this one
801:21 - over here for that specific card item
801:24 - and we'll just say card item
801:27 - mount
801:28 - so whatever it is right now plus or yeah
801:32 - in this case plus one and then
801:36 - in order to set up decrease you want to
801:40 - copy and paste you want to go with
801:42 - decrease still going to be a payload
801:45 - okay all of that is awesome we'll still
801:47 - look for the card item the difference
801:49 - here is minus one and then we will add
801:53 - them of course to our exports so let's
801:57 - say increase
801:59 - decrease and we want to navigate to the
802:02 - card item
802:04 - we want to import the other two as well
802:08 - so we're going to go here with increase
802:11 - then decrease
802:13 - both of them and first let's set up the
802:16 - increase because for a decrease we'll
802:18 - have to add a little bit more
802:20 - functionality
802:21 - so let's go with mount button let's say
802:24 - on click we already have dispatch so we
802:28 - don't need to worry about that one and
802:31 - we just want to pass in the increase
802:34 - so we're gonna go here with this patch
802:38 - and then inside of this patch let's pass
802:40 - in the increase and like I said in order
802:43 - to make this interesting I'm gonna go
802:44 - with an ID now normally if you're
802:48 - setting this up as an object of course
802:49 - you'll pass in more properties
802:52 - but in this case I won't do that and for
802:55 - some reason oh yeah my bad so I set up
802:58 - the import in the wrong place
803:00 - me out of comma here
803:03 - and hopefully everything is going to
803:04 - work Yep looks about right and if we try
803:08 - this out notice how again we're changing
803:11 - this value over here for each item and
803:13 - again the functionality here is
803:16 - following where we look for the payload
803:19 - which in this case is an object that's
803:21 - why we go here with payload dot ID just
803:24 - to Showcase that we can pass in more
803:26 - data and then we just increase the
803:28 - amount and the same thing we can do with
803:30 - decrease so let's go back to the card
803:32 - item
803:33 - I'll take this entire thing 40 on click
803:36 - or copy and paste and now let's go with
803:41 - decrease instead so say decrease again
803:44 - pass in the area that doesn't change
803:47 - it's refreshed so we start from scratch
803:49 - and now notice how we can decrease the
803:51 - amount now the problem is that we're
803:54 - going negative
803:55 - so I think it's going to make a bit more
803:59 - sense if we'll check for the amount and
804:03 - again we're talking about the amount of
804:06 - specific item not overall amount and if
804:09 - it is equal to one
804:11 - we want to remove it since that way
804:13 - we'll have zero items in the cart
804:16 - and if it's bigger than one then of
804:18 - course we just want to run the decrease
804:20 - so I'm going to go back to this on click
804:23 - and we'll set up if amount is equal to
804:27 - one that means that we're pressing the
804:29 - button amount is already equal to one
804:31 - and if that is the case well we might as
804:33 - well remove the item from the card
804:35 - correct we'll say remove item and we'll
804:38 - just pass in the edit now we do want to
804:40 - pass the return right after because you
804:42 - don't want to continue reading the code
804:45 - and if the amount is bigger than one
804:47 - then of course we just decrease the
804:50 - amount so let me go here let me refresh
804:52 - and notice I can increase I can actually
804:55 - decrease so all of that is working but
804:58 - the moment I get
805:00 - the amount of one if I will click the
805:03 - decrease I'll automatically remove the
805:06 - item from the cart all right and up next
805:09 - let's take a look at how we can
805:12 - calculate the totals because at the
805:14 - moment yes
805:15 - we can nicely control our cart but that
805:20 - is not affecting the amount then we have
805:23 - all the way at the top and also it's not
805:25 - affecting the total and in order to fix
805:28 - that we'll come up with new reducer
805:30 - we'll call this calculate totals and I
805:33 - went with this functionality so I
805:37 - created new variables amount and total
805:39 - then I iterate over the current cart
805:43 - items and each of them has the amount of
805:47 - property
805:47 - so I just add to the overall amount one
805:52 - so the one that represents the entire
805:54 - card and the same goes for a total only
805:57 - in this case I multiply
806:00 - the amount of items I have with the
806:03 - price and that is equal to the total one
806:06 - so I set up the loop I add
806:09 - both of these values and at the very end
806:11 - and just go with State amount is equal
806:13 - to amount so whatever we created over
806:15 - here the same goes for total now where
806:18 - do we want to invoke that one that's a
806:21 - good question let's keep on scrolling in
806:22 - the readme and I actually set this one
806:25 - up in the app
806:27 - so in the app
806:29 - I will set up a use effect
806:32 - on that user effect will depend on the
806:34 - car items so use use selector grab the
806:38 - card items from the cart and then every
806:40 - time there's going to be some change in
806:43 - the car atoms will dispatch the
806:45 - calculate totals and as a result
806:48 - both of those values will change in here
806:51 - as well as in the total so let's try to
806:55 - set this one up and let's start by
806:57 - creating the function
806:59 - calculate and then totals
807:03 - again it's going to be our function
807:05 - we'll access the state as far as the
807:07 - logic let's go with let amount is equal
807:11 - to zero and let's say not I have a tiny
807:15 - bug over here then I want to copy and
807:17 - paste and let's just say total so by
807:20 - default it's always going to be zero and
807:22 - zero
807:23 - then we want to go with State then cart
807:26 - items let's iterate over so call this
807:30 - for each and then we'll access each and
807:33 - every item and each and every item has
807:35 - the amount and Total Property and we
807:37 - just want to add this to the total
807:39 - amount therefore we'll go with plus
807:41 - equals and then item amount now when it
807:46 - comes to the amount of money we want to
807:49 - multiply the price that each item has
807:52 - with the amount of items we have in a
807:55 - cart so total is equal to and now in
807:58 - this case we'll go with plus equals item
808:01 - amount multiplied by item dot price and
808:06 - once we have this one in place
808:09 - up next we want to set State amount
808:13 - equals to amount that we just set up and
808:16 - the same goes with total so let's go
808:19 - here let's say total is equal to total
808:24 - and after that we want to export that so
808:27 - let's say calculate totals and we just
808:30 - need to set it up in the app.js so let's
808:34 - navigate to app.js
808:36 - and in here let's grab first the U
808:40 - selector and use dispatch we'll need
808:43 - both of them
808:44 - so let's say import use dispatch use
808:48 - selector and we'll set it equal to from
808:51 - react reduct and also I want to get that
808:55 - calculate totals so let's say calculate
808:58 - totals that is coming from the features
808:59 - okay beautiful and as far as the logic
809:03 - well first let's grab the card items and
809:06 - we'll use you selector for that so cart
809:09 - items now that is equal to use selector
809:12 - let's pass in the function and let's say
809:14 - here store is equal to store cart and
809:18 - I'm not going to repeat myself how we
809:20 - can access that and also we want to set
809:22 - up that dispatch so const dispatch
809:25 - not is equal to use dispatch let's
809:28 - involve that
809:29 - and let's finally set up that use effect
809:32 - so let's say here use effect
809:35 - and then as far as the Callback function
809:37 - we will invoke this every time there's a
809:40 - change to the cart items so every time
809:43 - we'll update something
809:45 - related to the card items we will invoke
809:47 - this use effect specifically we want to
809:49 - go with dispatch and we want to pass in
809:52 - calculate totals so check it out
809:56 - now we still have four here but I can
809:58 - clearly see my total
810:00 - and what's going to happen every time
810:02 - we'll click on any of the buttons and
810:04 - all that nicely display whatever items
810:08 - we have in the card now there's tiny bug
810:10 - over here
810:11 - basically we need to set this one to
810:14 - fixed essentially how many uh numbers
810:17 - after that and don't worry we'll do that
810:19 - in a second but the goal here
810:22 - is that now every time we remove item
810:26 - from the card or we clear the card
810:29 - altogether
810:31 - it will affect the amount of items we
810:33 - have which we display over here and also
810:37 - the total now in order to fix the bug
810:41 - there with too many numbers we just need
810:43 - to go to card container
810:47 - and where we have the total let's go
810:49 - with two fixed so that's again the
810:53 - JavaScript method that we have access to
810:55 - and we'll say that we only want two
810:58 - numbers after the dot so now everything
811:00 - is going to work
811:02 - and just like that we have calculate
811:05 - totals in place and every time we'll
811:08 - make some changes to our cart
811:10 - they will affect our initial state in
811:15 - the card slice all right and up next I
811:18 - want to set up a modal and in the
811:21 - process we'll create another slice and
811:24 - we'll see how we can access data when we
811:28 - have multiple reducers in our store and
811:32 - the first step is going to be creating a
811:35 - model JS with following code and then we
811:40 - want to import that in the app.js and
811:42 - place it above the number so we'll start
811:46 - working on that where first I'm going to
811:48 - create model Js
811:51 - I'm going to set up any kind of imports
811:53 - in this case
811:54 - we haven't set up the slice yet so let's
811:56 - just create that component
811:59 - and as far as the return we want to go
812:02 - here with a side
812:05 - and we want to add a class name of modal
812:08 - container and as I said if you're
812:11 - interested in the CSS just please look
812:12 - for those classes in the index CSS then
812:16 - we want to create a div of the class of
812:18 - model inside of it let's say heading 4
812:21 - with the text of remove all items from
812:24 - your shopping cart and after that we
812:26 - want to go with button container where
812:28 - basically we'll place two buttons just
812:30 - to Showcase how it's going to look like
812:32 - let me go to complete one
812:34 - and again we'll display that once we try
812:37 - to clear the cloud so this is going to
812:40 - be the result so right off 30 heading
812:42 - we're gonna go with div with a class of
812:45 - BTN
812:47 - container inside of it let's place two
812:50 - buttons first one will be confirm one
812:53 - and the second one will be the clear one
812:55 - type for both of them will be button
812:58 - then class name BTN and I'll call this
813:00 - confirm vtn and as far as the text I'm
813:04 - gonna go with confirm as well and the
813:07 - same deal with the clear one we just
813:10 - want to change some values around where
813:11 - it's not going to be
813:13 - confirm it's going to be cancel instead
813:16 - and instead of confirm hyphen vtn we're
813:19 - going to go with clear BTN now we want
813:22 - to go to app.js
813:24 - we want to get this particular component
813:27 - so
813:29 - I mean let me try here with the Auto
813:31 - Import Let's see we have model yep
813:35 - that worked and once we save check it
813:39 - out this is going to be our model so we
813:42 - have the component now we just need to
813:44 - set up the logic all right up next let's
813:47 - set up the slice for the model
813:49 - so remember we have features folder
813:53 - for time being we only have one feature
813:56 - we have the car
813:58 - but now I want to add the Moto feature
814:01 - which is going to be located in the
814:03 - model slice and then we want to set up
814:05 - the functionality where again we're
814:07 - going to go with create slice
814:10 - we want to set up some initial state in
814:12 - this case it's going to be is open
814:15 - and I'll set it equal to false then we
814:19 - want to go with model slice come up with
814:21 - name initial State and right away let's
814:24 - set up those two reducers we're gonna go
814:26 - with open model and close model we want
814:29 - to export that and we also want to
814:31 - export model slash reducer and in the
814:36 - store we want to set up another key only
814:39 - in this case it's going to be equal to
814:40 - this model slice reducer and
814:44 - as a result we'll be able to access the
814:48 - state as well as the reducers all over
814:51 - our application and the first thing that
814:53 - we'll do
814:55 - is in the app.js we'll grab is open
814:58 - and we'll display this one conditionally
815:01 - so I'm gonna go to the features we want
815:05 - to create a new folder let's call this
815:08 - modal then we want to go to new file and
815:11 - we'll call this model
815:14 - slice JS and then inside of it we first
815:19 - want to grab the create slice so let's
815:22 - go here with create and let's see
815:24 - whether yep gives me the import then we
815:27 - wanna
815:28 - set up the initial state in my case just
815:31 - going to be one property again this is
815:33 - just a practice
815:34 - working with more realistic application
815:36 - where of course there's going to be more
815:38 - features so we're going to go here is
815:41 - open and by default let's set it equal
815:44 - to false
815:45 - false and then let's set up that slice
815:47 - so const modal slice is equal to create
815:52 - slice let's pass in the object name
815:54 - model
815:56 - then initial state is equal to initial
815:58 - State let's right away set up those
816:00 - reducers now what reducers we're gonna
816:03 - have we're gonna have open motor reducer
816:07 - which is going to be equal to state
816:10 - and action again we're just practicing
816:13 - as far as the action we're not going to
816:14 - use it and in here let's just say state
816:18 - is open so if I want to open a model
816:21 - what is going to be value well you might
816:24 - as well set it equal to True kind of
816:26 - makes sense don't you think then let's
816:29 - copy in page then now we want to close
816:30 - the model now what is going to be the
816:32 - value for is open well let's set it back
816:35 - to false then we want to export three
816:38 - things the main reducer and I'm not
816:40 - going to log it we already have done
816:42 - that so export default now of course we
816:46 - have different object but the property
816:48 - we want to export meaning the
816:50 - method is still the same we want to
816:53 - export the reducer that's number one and
816:55 - then remember those action creators so
816:57 - we're gonna go here with export const
816:59 - and now we're looking for open model
817:02 - close model and both of them are coming
817:04 - from modal slice and the actions now
817:10 - in order for everything to work we
817:12 - definitely definitely definitely need to
817:14 - go to store
817:17 - so let's find where is that sucker over
817:20 - here and then in the store now I want to
817:23 - get the modal slice
817:25 - so I have to change some things around
817:27 - this is going to be coming from the
817:28 - model
817:29 - name will also be modal this is going to
817:32 - be a modal reducer and yes of course the
817:36 - property I'm going to go with model as
817:38 - well so model will be equal to modal
817:41 - reducer
817:43 - so that's good now let's try it out in
817:46 - our application on a big screen
817:49 - and
817:50 - at the moment we're calculating the
817:52 - totals notice we have our E2 actions not
817:55 - only the init and we also run calculate
817:57 - totals what I want to showcase though is
818:00 - that
818:01 - set up just cart now we also have the
818:04 - model
818:05 - and now let's utilize that we're in the
818:08 - app Js
818:10 - not only I want to get the model I also
818:13 - want to access what I want to access is
818:16 - open
818:18 - and I want to set this one up
818:20 - conditionally since in a second we'll
818:22 - add all the functionality so in here
818:25 - remember we were accessing the cart
818:27 - so the only difference is that now I
818:30 - want to access the modal and I'll say is
818:33 - open
818:34 - is
818:35 - open and that will be equal not to the
818:38 - store cart
818:40 - I'll say store model
818:43 - and where I have the model
818:45 - will have the conditional rendering
818:48 - where I'll say is open if it's true only
818:51 - then display the model so let's move it
818:54 - in and since the value is false we don't
818:58 - display the model now if I'll manually
819:00 - go back to model slice and I'll say that
819:03 - the value is true
819:06 - I mean
819:07 - you're not going to be surprised
819:08 - probably by the fact that we display the
819:11 - model okay awesome
819:13 - so now let's add that functionality
819:15 - where instead of just clearing the cart
819:17 - why don't we open up the model when we
819:20 - click on this button and then once we
819:23 - get to the modal container then we'll
819:26 - decide do we really want to remove all
819:28 - the contents and then close the model or
819:31 - we simply want to close the model so
819:34 - first let's start in the card container
819:37 - and I'll send out yes you'll find all of
819:40 - the logic here in the readmewhere first
819:43 - in the car container we want to get the
819:45 - open model from the model slice and
819:48 - instead of clearing the card directly
819:50 - we'll go dispatch and open model and
819:53 - from there we'll finish everything in
819:56 - the model just so let's start in the
819:58 - cart container
819:59 - so we have all of these Imports okay
820:01 - that's awesome
820:02 - but we want to copy and paste and we
820:05 - want to get open modal from the modal
820:09 - slice open model and instead of card
820:13 - slash we're gonna go here with model and
820:16 - then modal slice then let's keep on
820:20 - moving I don't think we actually need
820:22 - this import anymore
820:23 - so we can remove it and then where we
820:26 - have the clear card
820:28 - now let's pass in the open modal
820:31 - same deal we invoke it so that doesn't
820:33 - change now the difference of course is
820:35 - going to be that now once we click on
820:37 - clearing cart we display the model so
820:40 - now let's navigate there and let's
820:42 - handle that
820:43 - so what first do we need over there well
820:46 - we'll need quite a few things first we
820:49 - want to get the closed model because
820:50 - regardless on which button we click I
820:53 - want to clear it I want to get the use
820:55 - dispatch I'll need it since I wanna
820:58 - invoke some reducers and I also want to
821:01 - get the clear card so notice how again
821:03 - we're getting this data from multiple
821:06 - slices model slice and card slice and
821:10 - then of course we'll just set up the
821:11 - functionality so
821:13 - let's go back over here let's set up all
821:16 - those three Imports we're gonna get the
821:19 - closed model
821:21 - closed model and I also want to get the
821:25 - clear card for your cart and also we
821:29 - want to get the use dispatch so let's
821:31 - see where that is going to work so use
821:33 - this patch yep I have all of them so now
821:36 - I can remove these suckers then we want
821:39 - to quickly
821:40 - set up the dispatch where effectively we
821:43 - just go with use dispatch and we invoke
821:45 - it and now it's set up the functionality
821:47 - where if we click on confirm I want to
821:51 - do two things
821:52 - not only I want to clear the card but I
821:54 - also want to close the model now if we
821:57 - go to cancel then we'll just close the
822:00 - model so let's go here with button we're
822:03 - gonna go with on
822:04 - click and then in here let's pass in the
822:08 - function
822:09 - and then
822:11 - We're not gonna pass in any kind of
822:13 - argument we'll just go with dispatch
822:15 - then clear
822:17 - card
822:19 - that's the first thing we want to invoke
822:21 - and then the second one it looks like I
822:23 - have some weird bug oh yeah oh here and
822:26 - the second thing is the close model
822:30 - so let's pass this one in and I know I
822:32 - keep repeating this but I really like
822:35 - the fact that we don't need to do any of
822:37 - that manual labor where we need to set
822:41 - up the actions and all that in this case
822:43 - we simply right away get those functions
822:46 - and we pass in dispatch which obviously
822:49 - is way less time consuming and also less
822:51 - chance for errors so let's do the same
822:54 - thing with this button and the only
822:57 - thing we want to change here is clear
822:59 - card where we basically want to remove
823:00 - it so if we confirm then our card is
823:04 - empty if our we just click on cancel we
823:08 - close out the model so that's how we can
823:11 - add another feature to our application
823:14 - all right and now let's see how we can
823:17 - set up a synchronous functionality with
823:20 - a Redux toolkit so here's the plan so I
823:25 - have quarters API
823:27 - basically an API that serves some Json
823:31 - data just so we can practice on fetching
823:34 - data and in the use reducer project we
823:38 - already work with this URL so it's
823:41 - course API and then react use reducer
823:44 - card project which essentially Returns
823:47 - the same data that we currently have in
823:50 - the card items so use this URL to fetch
823:54 - data when initially our application
823:56 - loads
823:58 - and here's the thing we cannot just
824:01 - simply set this up in our current
824:04 - reducers it's not going to work that's
824:06 - why with redex toolkit we install
824:10 - another Library the thunk one and from
824:14 - the Redux tokit we get this create hsync
824:18 - funk
824:19 - and we right away wanna invoke it and
824:23 - the result we want to export
824:26 - so this is something that will require
824:28 - directly in our components so it's a
824:30 - very similar to how we exported the
824:34 - action creators from the reducers
824:37 - however in this case we export this
824:39 - directly in my case I'm going to call
824:41 - this get cart items so we invoke create
824:44 - async Funk and it's looking for two
824:48 - things for the action type so
824:50 - essentially in here we just come up with
824:52 - a name
824:53 - of our action and second is going to be
824:57 - that callback function
824:59 - now in the following video I'll show you
825:02 - more options but at the very least we
825:05 - pass here this function and this
825:07 - function needs to return a promise
825:11 - um I'm just using fetch to fetch data
825:13 - and remember
825:15 - when we go with fetch dot then we return
825:18 - basically a success response and with
825:22 - catch of course it's going to be the
825:23 - error but regardless from this function
825:26 - we are automatically returning the
825:29 - promise this is what the Callback
825:31 - function is looking for it's looking for
825:34 - that promise and of course you're not
825:36 - limited to the just fetch you can set up
825:39 - all kinds of things in here but just
825:41 - remember that this function needs to
825:43 - return a promise so of course if you
825:45 - just stick async in front of it
825:47 - then by default it's going to return
825:49 - promise which is something that we'll
825:52 - take a look at in the next video and
825:54 - then in the fetch I want to pass in the
825:56 - URL
825:57 - so the one that gets me the product and
826:02 - when it comes to this callback function
826:04 - it returns a life cycle actions so if
826:09 - you remember when we work with promises
826:10 - we add few options
826:12 - promise could be pending it can be
826:15 - fulfilled and rejected
826:17 - so where we have the create slice what
826:21 - we want to do is set up extra reducers
826:24 - property it's going to be an object and
826:26 - then in order to access those life cycle
826:29 - actions the syntax is like this where we
826:31 - go with name what we're getting back and
826:34 - then that pending fulfilled and rejected
826:37 - and yes
826:38 - these need to match to the T
826:40 - because
826:42 - they're provided by the Redux token and
826:45 - then we wanna and close this with the
826:49 - square brackets
826:51 - and then we'll set this equal to a
826:53 - function so what do we want to do when
826:55 - we're pending basically when we're
826:57 - loading that's why we have the state
826:59 - value is loading and we'll set it equal
827:01 - to true then what do we want to do if
827:04 - we're successful and this is the case
827:06 - where the data that we're returning in
827:10 - the case of success in our case response
827:12 - that Json is going to be located in the
827:15 - action payload and of course the lug it
827:16 - just so you can see so once we have
827:18 - successfully data we want to set is
827:21 - loading to false and card items to the
827:24 - actual payload and if there's some kind
827:28 - of error we have rejected option and in
827:31 - that case for this application we just
827:34 - want to set is loading to false
827:37 - and also keep in mind that when it comes
827:39 - to fetch 404 is not an R so we'll only
827:43 - have this one if there's some kind of
827:46 - network error and at the very last we
827:49 - want to grab get card items in the app
827:53 - app component and then when our
827:56 - application loads we want to do two
827:58 - things we want dispatch get card items
828:01 - so the asynchronous function
828:04 - and then we also want to grab is loading
828:07 - from the state and while we're loading
828:09 - we'll display this
828:10 - and once we're successful we'll set the
828:14 - state card items equal to the data that
828:18 - we're getting back
828:19 - so let's try this one out where I'm
828:22 - going to go to card slice
828:24 - and first I want to grab that create a
828:28 - sink thunk so that one is coming from
828:31 - Redux toolkit then I want to set up the
828:34 - URL so right after the import let's go
828:37 - here with const URL and you have two
828:40 - options you can either get it from
828:41 - readme or you can just navigate here in
828:44 - the browser so since I already have it
828:46 - open in the browser
828:48 - I'll use this approach so again this is
828:51 - the URL where we can fetch those
828:53 - products just like we have in the card
828:55 - items and then let's keep on scrolling
828:58 - and we'll go with
829:00 - create a sync thunk and we'll set it
829:03 - equal to our function but we want to
829:05 - right away export it so let's say const
829:07 - get cart
829:10 - items and that is equal to creative sync
829:13 - Duncan like I said it's looking for two
829:15 - things
829:16 - the type so in here we just need to come
829:18 - up with a name in my case I'm going to
829:20 - go with cart forward slash get
829:23 - card and I'm so that's going to be my
829:25 - action and second will be that callback
829:28 - function
829:29 - and here let's right away go with return
829:32 - fetch let's pass in the URL then that
829:36 - then so if you're successful I want to
829:39 - turn this into a Json so say response
829:42 - response Json let's invoke that and then
829:45 - let's also go with catch and don't worry
829:47 - next video to take a look at more
829:49 - reasonable approach how to handle this
829:51 - but for time being I just want to get
829:53 - that data from the URL so let's go here
829:56 - with error and then log that sucker
830:00 - and once we are done
830:03 - we want to keep on scrolling and in the
830:06 - create slides right after reducers the
830:10 - property name is extra reducers notice
830:13 - we right away get that suggestion and
830:15 - like I said then we get those life cycle
830:18 - actions
830:19 - so for every function that we will
830:21 - create
830:22 - in this case it is get card items we'll
830:25 - get those three life cycle actions
830:28 - pending fulfilled and rejected and the
830:31 - way we can access that we go with the
830:33 - same name so get card items in this case
830:35 - and then notice we right away have those
830:38 - options fulfilled pending and rejected
830:42 - so in my case I'm going to start with
830:43 - pending that is why we're still loading
830:46 - and in this function same way we can
830:49 - access the state and also we can get the
830:52 - action so action is going to be useful
830:54 - once we get the data for now while we're
830:57 - pending we just want to grab the state
830:59 - and I want to set the state is loading
831:02 - value equal to what equal to True
831:05 - correct so while we're loading is
831:08 - loading will be equal to
831:10 - true then we want to copy and paste like
831:13 - so we just want to add the commas so
831:15 - there's no bugs in here and we want to
831:18 - change these ones around where instead
831:20 - of bending now I'm looking for fulfilled
831:23 - and in this case I do want to add
831:25 - another parameter which is going to be
831:27 - action and again this action will
831:30 - contain the result
831:32 - if we're successful so in this case if
831:35 - we're successful we return the Json
831:38 - response and what I'm going to do is set
831:42 - my card item so state
831:45 - and then cart items equal to what action
831:49 - and payload and yes let's also log it
831:52 - just so you can see where it's coming
831:53 - from but I can tell right away that
831:55 - there's a payload property and that's
831:57 - the one that holds those card items so
832:01 - let's log the action and lastly
832:04 - we also have rejected
832:07 - and like I said since we're using fetch
832:09 - it's only for network errors and for
832:12 - time being also the sequel to false and
832:14 - also
832:15 - there's a tiny issue here once we have
832:18 - the data of course the loading will be
832:20 - false
832:22 - so we don't need to export this we're
832:25 - actually in good shape we already export
832:27 - that function
832:29 - here with export now we just want to go
832:32 - to app.js we want to grab the function
832:35 - get cart items we want to invoke it
832:39 - once our application loads and we also
832:42 - want to check for is loading so let's
832:46 - navigate to app.js
832:48 - and since we already import
832:50 - the calculator from the card slice
832:53 - simply want to add a comma and we'll go
832:56 - with get card items and then let's keep
832:58 - on moving not only I want to get the
833:01 - card items I also want to check for is
833:03 - loading sorry for loading then we'll
833:06 - display different return and then let's
833:09 - set up a different use effect
833:12 - where I'm going to go with use effect
833:13 - and I'll invoke it
833:16 - only when my application loads so once
833:19 - my application loads what do I want to
833:21 - do I want to dispatch and we'll go with
833:24 - get card items and we'll invoke it it's
833:28 - also set up that return
833:30 - where basically if we're loading this is
833:34 - what we want to return we want to go
833:36 - with Dave with glass of loading and then
833:37 - heading one loading so let's set it up
833:40 - here if is loading it's true then we
833:44 - want to go with return
833:46 - then let's set up the div here let's add
833:49 - a class of loading and on the side of it
833:52 - we're gonna go with heading one and
833:54 - loading dot dot and once we save for
833:57 - second we'll notice that loading and
833:59 - then we get the product and if you don't
834:01 - believe me
834:02 - let's navigate to the big screen over
834:05 - here let's refresh and then let's check
834:09 - it out in here we have the pending which
834:12 - is going to be for that loading one and
834:14 - we can clearly see our state
834:16 - so notice how awesome it is in the feed
834:19 - explos where you can clearly see your
834:22 - actions so what actions were dispatching
834:24 - and what is the state at that time and
834:27 - we can even see the difference so
834:30 - basically if I'm gonna go here with
834:31 - fulfilled notice this is going to be the
834:34 - difference so in the cart
834:36 - we basically get this is loading and we
834:39 - set it equal to false and also in the
834:42 - console you can see what we're getting
834:44 - back remember I said that once we log
834:47 - over here in the card slice
834:50 - we are logging the action so what is in
834:55 - this action it is a payload and that's
834:58 - the data that we're getting back so we
835:00 - have this array of four items we set
835:04 - here State card items equal to the
835:09 - payload so again something we can
835:11 - definitely double check over here so if
835:14 - I go here with State notice with
835:18 - fulfilled for example this is going to
835:20 - get me those car items those four card
835:23 - items and one more thing that we can
835:25 - actually do is go back to the cart slice
835:28 - and set this equal to an empty array so
835:31 - the car items and that way you'll
835:34 - clearly see how we can change this once
835:37 - the Theta gets here asynchronously so
835:41 - let's navigate back again let's refresh
835:43 - just so we are on the safe side and if
835:45 - we go right now with action fulfill them
835:48 - if we take a look at the difference now
835:50 - I'll notice two things first of all is
835:52 - loading changed from True to false and
835:56 - also notice how we switch the card items
835:59 - so initially it was empty array and now
836:02 - essentially we get those four items and
836:05 - again all of our functionality still
836:07 - works we can clearly see that in our
836:10 - actions over here
836:12 - but now we're getting this data
836:14 - asynchronously once our application
836:17 - loads all right and lastly I just want
836:20 - to showcase what options we have with
836:24 - the Callback function because in our
836:27 - previous example we just looked at the
836:29 - most basic setup
836:31 - so now let's go over the more complex
836:34 - one and don't worry in this video you
836:36 - don't have to type along and in fact we
836:39 - won't use any of this extra data in our
836:42 - current application the goal is to
836:45 - Simply get the gears in your head
836:46 - turning and showcase large amount of
836:49 - options we have and first what I want to
836:52 - do is install another Library the HTTP
836:55 - Library by the name of axios because I
836:58 - do want to showcase
836:59 - how essentially we can return a value
837:03 - for the error and since fetch is not
837:06 - responding to 404 basically for fetch
837:09 - the 404 errors are not errors I actually
837:11 - want to use the axios instead again if
837:14 - you don't want to do that you can just
837:15 - sit back and relax where I'm going to go
837:17 - with npm install axios first then we
837:22 - definitely want to spin up the dev
837:24 - server of course so npm start let me
837:27 - close this one then we want to navigate
837:29 - to cart slice I think I can remove the
837:32 - items we won't need it anymore so axios
837:35 - from axios let's keep on moving and
837:40 - before we do anything
837:41 - like I said we can create this function
837:44 - right away as a sync which essentially
837:48 - just means that we'll right away return
837:49 - the promise correct so go here with a
837:52 - sync and that also means that we can
837:54 - await so we can set up more logic so let
837:57 - me remove all of this code here and
838:01 - let's just go with try and catch right
838:03 - away since we can also do that and then
838:06 - let's wait for that response so I'm
838:08 - going to say here const and then
838:10 - response is equal to oh wait now I'm
838:13 - going to go with axios and then I'll
838:15 - pass in the URL and if we're successful
838:19 - what do we want to do we want to return
838:21 - that response again keep in mind we are
838:24 - returning a promise and yes we're
838:26 - handling that in the X reducers so none
838:30 - of this functionality changes right now
838:33 - we're just switching right now our
838:37 - create a sync done callback function to
838:40 - a sync where we're using axios now once
838:43 - we save we will get some errors in the
838:46 - console don't worry about it the reason
838:48 - for that is because when it comes to
838:51 - axios the data is located in the data
838:55 - property and just to Showcase that let
838:57 - me go here with log and then response
839:01 - and you'll see in a console
839:03 - if you scroll up you'll notice over here
839:06 - this is what we're getting back and
839:08 - essentially what we want to do we want
839:10 - to pass in this data property
839:14 - down to these lifecycle actions so we're
839:18 - talking about this one over here so
839:20 - let's scroll up and we'll go here with
839:24 - return and let's go with response and
839:28 - then there again
839:29 - this is just because that's how the
839:31 - response is structured so once we save
839:34 - notice how everything worked correctly
839:36 - where again we're getting those items
839:38 - and if we take a look at the action it's
839:41 - still the same thing we're getting this
839:43 - payload and the payload is that array
839:47 - so that's the first thing that I want to
839:49 - mention also well we can pass here the
839:52 - arguments now what does that mean well
839:55 - in our case we're not going to use that
839:57 - but we need to imagine that let's say
839:59 - we're going to be setting up some kind
840:02 - of functionality and we do want to pass
840:04 - here the value let's say whether that is
840:08 - a user or some kind of parameter or
840:11 - something so in this case I'm just going
840:13 - to say random
840:15 - and if we want to access that again in
840:17 - our case it's not going to change
840:18 - anything but if we want to access that
840:20 - this is going to be the first parameter
840:22 - so in my case I'm going to go with name
840:24 - and let's simply log that and we'll
840:28 - clearly see
840:29 - that we can access that value again not
840:32 - something we'll use in our application
840:33 - but it's very very important because
840:35 - there's going to be applications where
840:38 - of course this is going to be important
840:39 - the fact that we can pass something here
840:42 - from our component and we can access it
840:46 - in our create async thumb that's the
840:50 - first thing that I want to mention now
840:52 - second we also have access to thunk API
840:56 - again you can name it differently but I
840:59 - mean common convention is calling this
841:00 - Bank API which gives us even more
841:04 - options now what am I talking about well
841:06 - first of all let's log something let's
841:08 - go with log then let's access bank API
841:12 - and you know what let's just log the
841:14 - entire thing
841:16 - so you know what there's quite a few
841:19 - things here in the console so let me
841:21 - remove this action basically I'll
841:23 - comment this one out for your reference
841:24 - and also hopefully it's clear how we can
841:27 - pass the parameters from the components
841:30 - so that's clear
841:32 - but then check it out we have this
841:34 - somewhat giant object with bunch of
841:37 - useful things
841:39 - so here's the thing we could get the
841:42 - state now what's interesting we're
841:45 - getting the state of the entire
841:47 - application
841:48 - and this should get the wheels turning
841:51 - in your head because that means that we
841:54 - can get any values from the rest of the
841:57 - features so let me quick quickly
841:59 - showcase that so I'm gonna go with log
842:01 - and then thunk API and then let's go
842:05 - with get State and let's invoke it and
842:08 - in the console I have both I have the
842:11 - values for the card as well as the model
842:14 - so imagine if you have for example a
842:17 - user feature where you're setting up the
842:19 - user yes when you're setting up your
842:23 - async action
842:25 - you can actually access it so I can set
842:28 - up the user in a different feature
842:32 - and I can still access it with the help
842:33 - of this tank API which is very very very
842:36 - powerful and also what's interesting
842:39 - well we can dispatch
842:41 - if we take a look at the object over
842:44 - here notice we have this dispatch option
842:47 - so what we can dispatch well for example
842:50 - let's open up the model while we're
842:52 - fetching so let's try this one out we're
842:55 - right after the get State and all that
842:57 - we go here and we're gonna go with funk
843:01 - API
843:03 - we're gonna go with this patch and now
843:06 - we want to pass in open and modal again
843:10 - something that is not even in our slice
843:14 - and check it out and as I said I forgot
843:17 - to add here
843:18 - the parentheses notice even though this
843:22 - reducer is not even in this feature we
843:26 - can still access it with tank API and I
843:28 - know you're sick of hearing this but
843:31 - this is extremely powerful because we
843:34 - can do all kinds of functionality in the
843:38 - create async thumb and lastly what I
843:41 - want to showcase is how we can return a
843:44 - specific response because at the moment
843:47 - yes we have catch and we are basically
843:49 - getting the error but normally from the
843:52 - API
843:53 - you'll get some kind of specific message
843:56 - so first of all how we can pass this
843:59 - through again we're gonna look for thunk
844:02 - API and we want to go here with the
844:04 - return first of all and then the
844:07 - property or the method you're looking
844:09 - for so let's go here with thunk API is
844:13 - reject with value so in this case I will
844:17 - hard code this but keep in mind that
844:19 - normally with axios it's going to be
844:21 - located in error dot response so in here
844:24 - let's say something
844:27 - went
844:28 - wrong like so and then let's keep on
844:32 - moving let's keep on moving and where we
844:35 - have the rejected now we can look for
844:38 - that action in our case again we don't
844:41 - have any error values in the state or
844:43 - nothing like that but let's just log
844:45 - whether we can see that action whether
844:47 - we can see that everything works and
844:49 - since we are using axial so now I can
844:51 - mess up the URL and for axios it will be
844:55 - an error what that means well we will
844:58 - trigger this and we'll basically pass
845:01 - this value
845:02 - down to our rejected so let's save it
845:05 - and then notice in the console we right
845:08 - away see this log and we have this
845:10 - payload where we have something went
845:13 - wrong so for example if we're getting
845:16 - some kind of error from the API it's
845:19 - going to be located and error response
845:21 - and we can actually pass this down using
845:25 - thunk API and then reject with the value
845:29 - so that's how we can set up asynchronous
845:32 - functions with Redux toolkit and this
845:36 - concludes our tutorial hopefully
845:39 - everyone enjoyed it and I'll see you
845:42 - next videos if you have been following
845:44 - along with the videos and if your app
845:47 - uses latest Redux toolkit version most
845:50 - likely
845:51 - you see the following warning message in
845:54 - the browser the object notation for
845:57 - create slice extra reducers is
846:00 - deprecated and will be removed in rtk so
846:04 - Redux took it
846:06 - 2.0 please use the Builder callback
846:09 - notation instead
846:11 - and before we navigate to the docs
846:14 - effectively
846:16 - it means that we need to refactor our
846:19 - extra reducer setup in the card slice
846:24 - now the good news is that we won't have
846:26 - to change our logic too much only the
846:29 - way we pass our callback function and
846:32 - life cycle actions
846:34 - so let me click on this link we'll
846:37 - navigate to the docs create slice yada
846:40 - yada and we're looking for that I mean I
846:42 - keep forgetting his name the Builder
846:45 - callback notation that's the one that we
846:48 - want to use effectively like I said we
846:51 - won't have to change too much
846:54 - so we'll go with X reducers and I will
846:57 - have a function so pass in the function
846:59 - and the first parameter they call
847:02 - Builder so we will also call it Builder
847:04 - and then we go with Builder the dot add
847:08 - cache
847:09 - and then lifecycle actions stay the same
847:12 - so we're still looking for pending
847:14 - fulfilled as well as rejected and the
847:17 - same is with the Callback function it's
847:19 - still going to have the same parameters
847:21 - we'll just pass it here as a argument
847:25 - so life cycle actions stay the same as
847:28 - well as the Callback function the only
847:30 - difference is that now we need to pass
847:32 - them as arguments in this ad cache and
847:35 - yes for every life cycle action
847:38 - just like we did with object notation
847:40 - we'll just add this case
847:43 - and I think
847:45 - it's going to make more sense if we just
847:49 - start working on that so let me navigate
847:51 - back again I'm located in the cart slash
847:55 - I have my extra reducers as you can see
847:57 - we have these lifecycle actions for get
848:00 - card items and now we just want to
848:04 - refactor this to Builder I mean again
848:07 - let me double check
848:08 - for some reason I just can't remember
848:10 - the name Builder callback notation
848:12 - that's the one that we want to use
848:15 - um in order to
848:17 - make it easier I'm just going to type
848:19 - here extra reducers on top and I'll
848:22 - reuse the code
848:24 - so that way you can clearly see that the
848:27 - setup is pretty much the same so here we
848:29 - want to passively function like so
848:33 - that's the first step then we want to
848:36 - set up the parameter
848:37 - and we'll call this Builder and then we
848:39 - go with Builder and then add cache so
848:43 - this is a method so we need to pass in
848:45 - some arguments the first one is going to
848:48 - be that a life cycle action what do we
848:51 - have over here we have get card item
848:53 - spending so that's the one that we want
848:55 - to use so let's cut this one out pass it
848:57 - in as you can see syntax stays exactly
849:01 - the same the only difference is that now
849:03 - we don't pass this into the square
849:05 - brackets that's it that's the first
849:07 - parameter second one
849:09 - or argument more correctly the second
849:12 - thing that we want to pass is that
849:14 - callback function and notice how the
849:16 - syntax pretty much stays exactly the
849:18 - same and yes
849:19 - the same parameters State and action and
849:22 - yes we still update the state within the
849:25 - function body again I know I'm being
849:27 - annoying right now but I just want to
849:29 - make it extremely clear
849:31 - that all the functionality we have
849:34 - learned so far stays the same the only
849:36 - difference is how we invoke it here
849:39 - that's it that's the only difference so
849:41 - let's cut this one out again the
849:43 - function make sure that you don't have
849:45 - any syntax bugs and we're done that's
849:48 - our first case for depending one and of
849:52 - course what do we need to do we need to
849:54 - set up the same ones for fulfilled
849:56 - rejected then we can remove the sucker
849:59 - altogether and we're going to be good to
850:01 - go we'll have no warning messages in the
850:05 - console and as you saw in the message
850:08 - where if you're using the
850:11 - Redux toolkit 2.0 or creator of course
850:15 - then
850:17 - essentially it's not going to be
850:18 - supported so let's just go with that
850:20 - case yes effectively we just want to
850:22 - change here add one and then I'll add
850:25 - one more case right away like so and now
850:27 - let's set it up
850:28 - this one is going to be straightforward
850:31 - we just want to copy and paste
850:33 - there's not much logic in here so let's
850:36 - cut it out let's pass in the comma the
850:38 - only thing you need to look out for is
850:40 - some uh sewer syntax bug
850:43 - so let me take it here which by the way
850:45 - I'm an expert on so I'll take my sweet
850:48 - time while I'm setting this one up comma
850:51 - here copy and paste yep everything is
850:54 - good to go we just remove the extra
850:57 - reducers we save once I navigate to the
850:59 - browser as you can see I have no error
851:03 - so now our extra reducers is using the
851:07 - Builder callback notation all right that
851:11 - concludes the video thank you for
851:13 - watching I hope you enjoyed this video
851:15 - and learn something new
851:18 - if you want to continue learning react
851:20 - and take your skills to the next level
851:22 - be sure to check out my reactors in
851:25 - there you'll find bunch of additional
851:28 - in-depth tutorials challenges and
851:31 - projects designed to help you master
851:33 - this powerful library to get started
851:36 - just head over to johnsmilk.com thanks
851:39 - again for watching and I'll see you in
851:41 - the next one