00:00 - promises A promise is a proxy or
00:03 - placeholder for a value that you may not
00:05 - know when the promise is created you
00:07 - don't know exactly when an asynchronous
00:09 - method is going to finish in your
00:10 - program promises allow you to do
00:12 - something as soon as an asynchronous
00:14 - method or action does finish instead of
00:18 - immediately returning the final value
00:19 - the asynchronous method returns a
00:21 - promise to supply the value at some
00:23 - point in the future a pending promise
00:25 - can either be fulfilled with a value or
00:28 - rejected with a reason or error at this
00:30 - point the associated handlers will be
00:32 - called one way to create a promise is is
00:35 - with the new promise there are other
00:37 - ways to create a promise such as the
00:39 - fetch API but here is here's the basic
00:42 - usage you put new promise and then
00:45 - you're going to pass in a function with
00:47 - resolve and reject at this point in the
00:50 - promise you're going to do an
00:51 - asynchronous task so we don't know for
00:53 - sure when it's going to end and then
00:55 - it's up to the developer to manually
00:56 - call resolve or reject from within the
00:59 - body of the call back based on the
01:02 - result of the given task if the
01:04 - asynchronous task was successful you're
01:06 - going to call resolve and you're going
01:08 - to pass in whatever you want say success
01:11 - else you're going to call reject and
01:14 - you're going to pass in whatever you
01:15 - want such as failure so this that's how
01:18 - you set up the promise and then down
01:20 - here is what we call the promise and the
01:23 - then function is whatever you're going
01:25 - to do after the asynchronous task in the
01:28 - promise completes so as soon as this
01:31 - completes this task up here it's going
01:33 - to call the then function and it's going
01:35 - to do something with the result and so
01:39 - this function will not be called until
01:41 - whatever the asynchronous task is
01:44 - resolves if there's an error it will go
01:47 - down to the catch function and it's
01:50 - going to do something with the error
01:52 - this was just the basic usage of a
01:53 - promise now I'll show you another
01:54 - example that does a little more so let's
01:56 - scroll down here so this was created to
02:00 - show exactly what's happening when you
02:02 - use a promise so in this example we're
02:04 - going to create a few different promises
02:06 - and we're going to keep track of how
02:07 - many promises we have this is the
02:10 - function test promise and you can see
02:12 - we're going to call this three times at
02:14 - the end so we can create three different
02:16 - promises to see how they resolve and
02:19 - each promise we create by running the
02:21 - function is going to have a different
02:22 - number associated with it here this
02:24 - promise count equals Plus+ promise count
02:26 - so first we're going to console.log This
02:28 - Promise count so if it's the first one
02:30 - it's going to say one started sync code
02:33 - started so we're going to see all this
02:35 - in the console over here and then we're
02:37 - going to create the new promise inside
02:39 - the promise we're going to console that
02:41 - log that the promise is started and the
02:43 - async code is started and then right
02:46 - here it says this is only an example to
02:47 - create asynchronism so in this example
02:50 - function we are going to create it to be
02:53 - asynchronous by setting a timeout for a
02:56 - random number of seconds to simulate
02:59 - that it's asynchronous and we don't know
03:00 - it's when it's going to be resolved so
03:03 - then we're going to resolve this promise
03:05 - count so that means we're going to send
03:07 - out what number promise this is so let's
03:10 - go down here P1 that means the promise
03:13 - that we created up here then so once
03:16 - this P1 promise it resolves it's going
03:20 - to run this then function and it's going
03:23 - to have a value that value comes from up
03:25 - here when we resolved and we sent this
03:28 - promise count into
03:30 - the then function here and now we're
03:32 - going to console.log the value that's
03:34 - what number promise we're on remember
03:35 - there's three promis that we're going to
03:37 - create down below and it's going to say
03:39 - promise fulfilled async code terminated
03:42 - and if there's an error it's going to
03:44 - console.log handle rejected promise and
03:47 - it's going to tell the reason and after
03:50 - this promise is run it in our code it's
03:54 - going to console.log the promise count
03:56 - and that the promise made in sync code
03:58 - is terminated so let's run that to see
04:00 - exactly what
04:03 - happens now let me move the console log
04:06 - out a little bit so you can see console
04:09 - one started sync code started One
04:12 - Promise started async code started One
04:14 - Promise made sync code terminated now
04:17 - one thing interesting about this is that
04:19 - the promis made sync code terminated is
04:21 - toward the end of our code and it hasn't
04:23 - done the promise fulfilled async code
04:26 - termin terminated yet but that doesn't
04:29 - happen till well down at the very end of
04:31 - our console it says One Promise
04:34 - fulfilled async code terminated it's
04:37 - going to run this line of the code
04:38 - promise made sync code terminated before
04:42 - it runs this code promise fulfilled
04:44 - async code terminated because of this
04:47 - promise with the random number it's
04:49 - going to take a random amount of time
04:51 - before it can fulfill the promise but if
04:53 - you look back over at the console you
04:55 - see we have one one one and the next one
04:57 - isn't till the very end so then we're
05:00 - going to do the second promise 2 2 2 3 3
05:04 - 3 and all these are in order started
05:07 - promise started promise made started
05:09 - promise started promise made started
05:12 - promise started promise made but then
05:14 - they fulfill at different times so first
05:17 - the second one is going to be fulfilled
05:18 - then the third one's going to be F
05:20 - fulfilled and then the first one is
05:21 - going to be fulfilled this is because of
05:23 - the asynchronous nature of this function
05:26 - well I hope this helped you to
05:28 - understand promises a little more check
05:29 - the links in the description to learn
05:31 - more about promises and to see where I
05:32 - got some of the code Snippets in this
05:34 - video don't forget to subscribe and
05:36 - remember use your code for good