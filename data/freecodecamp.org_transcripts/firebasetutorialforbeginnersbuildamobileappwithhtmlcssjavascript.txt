00:00 - Firebase is an app development
platform from Google that offers
00:03 - tools and services for building
and scaling applications. It
00:08 - includes real time databases,
authentication, analytics, and
00:11 - hosting features. In this
course, you will learn how to
00:14 - build a mobile app with HTML,
CSS, JavaScript, and Google
00:18 - Firebase.
00:36 - Hey there lovely freeCodeCampers and welcome to my fully
00:38 - interactive Scrimba Firebase
course. In this course, we'll be
00:42 - building a useful shopping list
mobile app, which you can use by
00:45 - yourself or with other people
you live with. And of course,
00:48 - we'll be using our new friend
Firebase to hook up a real time
00:51 - database to our app. Now, what
do you need to already know to
00:54 - take this course? Well, you need
to have a basic understanding of
00:57 - HTML, CSS, and JavaScript.
Exactly how much more on that a
01:02 - little bit later. Okay, an
important thing about this
01:05 - course is that it's challenge
based, which means that rather
01:08 - than leaning back and just
copying the code that I'm
01:11 - writing, I'm going to be giving
you a bunch of challenges to
01:14 - solve. Alright, there are two
ways for you to take this course
01:17 - number one, of course, is to
take it here on YouTube. And for
01:20 - that, you'll need to set up your
own local environment. But
01:22 - number two, and my personal
favorite is to do the
01:25 - interactive version on Scrimba.
And if you haven't tried Scrimba
01:29 - before, oh, my God, you're in
for a treat, you'll find the
01:33 - link to the Scrimba version in
the description below. Okay,
01:36 - finally, if you enjoy this
course, and you happen to scroll
01:40 - back to this part of the video,
then I would absolutely love it.
01:44 - If you could give this video a
like. And if you have any
01:46 - feedback for me, then please
leave it in the comments below.
01:49 - Or even better reach out to me
on Twitter, or LinkedIn. And
01:53 - with all of that said, enjoy the
course. Hey there and welcome to
02:02 - this new Scrimba course where
we're going to be building a
02:04 - mobile app using Firebase. Don't
you find it frustrating when you
02:08 - want to make some dinner and in
the middle of cooking, you find
02:11 - out that you're out of a key
ingredient. So now you got to
02:14 - get all dressed up and go to the
grocery store. But wait, what
02:17 - other things did you need to get
again? Yeah, well, you see the
02:21 - problem here, right? Now here's
the thing for 99.9% of people
02:25 - out there, making their own app
would be an impossible dream,
02:29 - but not you because you're a
programmer now, which means that
02:32 - you can use your newly gained
superpowers to solve a problem
02:35 - in your life by building your
own app. Now, how cool is that?
02:39 - All right, I hope you're as
excited as I am. Let me show you
02:43 - what we will be building
introducing Add to Cart a
02:46 - shopping list app that lets you
keep track of what you need for
02:49 - your home and makes going to the
grocery store. Easy peasy. You
02:52 - can even use the app with your
partner family or flatmates. We
02:56 - even have a testimonial here
from a diehard fan. Now let's
02:59 - see how it works. All right, so
this is the homescreen. And this
03:02 - is where you put in the name of
the item that you want to get,
03:05 - let's put in oranges. And then
let's press Add to Cart. Boom,
03:09 - there it is added Perfect. Now
let's add some more items. There
03:12 - we go. Very nice. Now when you
go to the grocery store, you can
03:15 - just open up this app on your
phone and start checking off
03:18 - items that you've put in your
cart already. Let's delete
03:21 - oranges by clicking on it
perfect. Now, that's what I'm
03:25 - talking about. Now, I gotta
mention at this point that what
03:28 - we'll be building is not
technically a native mobile app.
03:32 - It's a web app that's disguised
as a mobile app. But by using a
03:35 - special technique, our app will
look and feel like a native
03:39 - mobile app. And we'll even be
able to put it on the home
03:42 - screen of our phones, both iOS
and Android. Now the question
03:46 - is, what do you need to know in
order to take this course? Well,
03:50 - you definitely need to have a
good understanding of HTML and
03:54 - CSS, how good you ask, well, you
need to be able to code this by
03:58 - yourself. And if you don't know
how to do that yet, don't worry,
04:01 - I got you covered. You want to
start off with pears free
04:04 - course, learn HTML and CSS, you
can get to it by clicking here.
04:08 - Alright, now what about
JavaScript? Now I'm going to
04:11 - show you a bunch of concepts
related to JavaScript. Now pause
04:15 - here and read through all of
these carefully. If you feel
04:18 - comfortable in all or most of
these concepts, then you're
04:21 - good. And if not, don't panic,
because you can learn all the
04:25 - JavaScript you need by taking
pairs free JavaScript course on
04:28 - scramble, click here to access
it, and then you can come back
04:32 - to this one. Alright, now that
we've got all of that covered,
04:35 - let me introduce you to the hero
of this course. Ah, damn wrong
04:40 - picture. Sorry. There we go. In
this course, we're going to be
04:43 - learning how to set up our own
database using a popular service
04:46 - by Google called Firebase. So
very quickly, what is Firebase?
04:51 - Well, Firebase has a database
which means that users can save
04:54 - data to Firebase, which can be
accessed from anywhere in the
04:57 - world and you browser any day
vise next Firebase allows the
05:02 - database to be updated in real
time. Which means that if I make
05:06 - a change to the database on my
device, it will be immediately
05:09 - visible for everyone using the
app as well. And finally, and my
05:13 - personal favorite, Firebase is
very easy to use, which makes it
05:17 - the perfect database for
beginners. Now, before we start
05:20 - this course, I feel like we need
to get to know each other a
05:23 - little bit better. So here's a
little bit about me. My name is
05:26 - Rafa Nadal, super easy to
pronounce. I know, I was born in
05:30 - India in 1991. Then I moved to
Norway with my family when I was
05:33 - five years old. And I've lived
here ever since three idiots is
05:37 - one of my favorite movies.
Seriously, if you haven't
05:40 - watched it yet, you got to see
it. I absolutely adore butter
05:44 - chicken with garlic naan Of
course. And finally, the thing I
05:47 - love the most in this world,
apart from my wife, of course,
05:50 - is technology, learning about
it, and especially sharing what
05:54 - I know with others. So I hope
you're ready to start this
05:57 - course with me, make sure to
grab your favorite drink, I'll
06:00 - do the same.
06:01 - And let's get coding. Okay, so
06:06 - what's the first step, I've
actually gone ahead and set up
06:09 - the basic HTML for us to get
started faster. So we have an
06:12 - input field here with an ID and
a placeholder. And then we have
06:15 - a button here as well, which you
can see right here. Let's run
06:18 - that. Yep, that's working. And
then we have just a little bit
06:22 - of CSS here to just to take care
of the margin and the padding,
06:25 - let's take a look at the
index.js file. So here, I
06:28 - already have a challenge for
you. Because I want you to make
06:31 - it so that whenever you write
something in here and press this
06:34 - button, whatever you wrote in
here to get console logged. So
06:38 - take a pause here, try it out
for yourself, and I'll be with
06:41 - you very soon.
06:42 - Good luck.
06:48 - Okay, I
06:49 - hope that wasn't too bad. Let's
take a look at it together. So
06:52 - the first thing we want to do,
of course, is to find a way to
06:55 - connect what we have here the
HTML elements with the
06:59 - JavaScript. So the way we want
to do that is use const first,
07:03 - and then make an input field, l,
I'll call it short for element
07:09 - variable. And in here, we're
going to use our trusty old pal
07:12 - document, dot get element by ID,
of course. And what was the
07:16 - thing that we named it here,
let's take a look here, input
07:19 - field. So we'll say input in put
field right here, perfect. The
07:25 - other thing, of course, is going
to be the add button L. And
07:29 - we'll say again, get element by
ID, and that I believe was just
07:33 - add button like this. Perfect.
And what is it that needs to be
07:37 - clicked before something
happens? That's the button
07:40 - right? So let's attach an event
listener to the add button L
07:44 - that we just created. So let's
do add button L and then add
07:48 - event listener. Inside of here,
of course, we want to be
07:51 - listening for the click event.
And what is it that we want to
07:54 - happen? Well, let's make the
function First, open up that
07:58 - with curly brackets. And inside
of here, I always just like to
08:01 - make sure that things are
working by just doing a very
08:05 - simple it works console log.
Let's try that out. Now. Run and
08:10 - click, it works perfect. Okay,
what's the next step now? So we
08:14 - got to get whatever value is
entered in the input field when
08:19 - the button is pressed, okay, so
I know for sure that I am going
08:23 - to need this because this is
where all that data is saved,
08:26 - right? So I'm going to put that
in here. And first just console
08:31 - log that let's try that first
run and console log, that
08:36 - console logs the entire HTML,
right? So what is it that we
08:41 - want from that? Well, we don't
want HTML, of course, we want
08:44 - the value that is entered. And
so here, we can use dot value,
08:50 - this method that gets us the
value. So let's try it out. Now.
08:54 - run this again. And I'm gonna go
in here and say, hot dogs. And
09:00 - hot dogs console logged Perfect.
Now, before we end this, I do
09:04 - want to add a little bit more
code here. Because I just think
09:07 - that it's much better to do it
this way. Let me show you. So in
09:11 - here, I'm going to make a
variable. And I'm going to say
09:13 - that it's input value. And I'm
going to set that equal to input
09:19 - field L dot value. And then I'm
going to use this instead. To
09:25 - say that I'm going to console
log that instead. There we go.
09:29 - Oops, get rid of that. There we
are. Now, why is this better?
09:34 - While it does the same thing,
but this is much better, because
09:37 - we know that we want to use
input value later to write and
09:41 - it's much better to have it
defined up here once and then
09:45 - just use this in the rest of the
code. So good job on working on
09:49 - the first challenge, and I'll
see you in the next one.
09:55 - And now
09:56 - it's time for you to add the CSS
and here you go. This is how it
10:00 - should look. So first, we got
this really cute image of a cat.
10:03 - And then comes the text input
field, and then the button. And
10:06 - of course, you want to write all
of the CSS code inside of the
10:09 - index dot css file. And as you
can see here, I've added some
10:13 - comments here that will give you
some information that you need,
10:15 - like the Google Font, the
background color, and all that.
10:19 - And I've already gone ahead and
added the Google Fonts code
10:21 - right here. Now remember, this
is a pretty big challenge. So
10:25 - give it your best shot. But
don't worry too much if you
10:28 - don't get it exactly right. So
pause the scrim here, do the
10:31 - challenge. And I'll be back in
just a few moments. Good luck.
10:39 - And we're back. I hope that went
well. Let's have a look at it
10:42 - together. So first thing I want
to do here is inside of the
10:45 - index dot HTML file, I want to
add a div container so that all
10:50 - the elements are inside of the
container. There we go. And then
10:56 - we want to add an image tag, of
course, for the cat, let's do
11:00 - assets and then cat dot png. Is
that working? Let's have a look.
11:04 - And we have the cat up here.
Perfect or perfect? Get it? I'm
11:09 - sorry, for the bad joke. Let's
go over to the CSS file. Okay,
11:14 - Let's uncomment all of this
first. There we go. Okay,
11:19 - already looking better. Okay, so
what do we want to start with?
11:22 - I'm going to actually start with
the container. Let's do
11:24 - container. And I do want to use
Flexbox here. So I'm going to
11:28 - say display flex right away.
There we go. And I do want to
11:33 - set the flex direction to be
column. Perfect. And then let's
11:38 - do max width 320 pixels. Now,
why am I doing this this max
11:44 - width? Well, it turns out that
if we set the max width to be
11:48 - 320 pixels, that basically all
devices in the world, especially
11:53 - mobile devices, will be able to
show that no problem. Alright,
11:56 - so what's next, let's center
this container. So I'm going to
12:01 - use margin for that. Let's do
margin 20 pixels, auto, maybe,
12:07 - maybe let's put a little bit
more there. 30 pixels. Okay,
12:11 - looking better. Now, let's fix
up this image first. So let's go
12:15 - in here and target the image.
And then we're going to do with
12:19 - 150 pixels, much better. And
then of course, again, use
12:24 - margin here to center that as
well. Perfect. Now let's take
12:28 - care of the input field and the
button. And as you can see here,
12:32 - they both look very similar. So
we can do some copy pasting
12:35 - here. So let me start with the
text input field first. Okay,
12:39 - let's get rid of the border
first, zero, perfect. And then
12:43 - let's add some padding 15
pixels, perhaps. Okay, that's
12:47 - looking pretty good. Now, we do
want a border radius as well.
12:52 - And what do we want to do here
five, maybe that's a little bit
12:56 - too little, and maybe do eight
instead. Okay, looking better.
12:59 - Now we do want to increase the
font size to so let's do font
13:02 - size. I'm going to do 20 pixels.
All right, that's looking pretty
13:06 - good. Now. Now what else is
there, we do want to center the
13:09 - text. So let's do text align
center. And then of course, we
13:12 - want to apply the Google Font
turns out, you have to manually
13:15 - do it for the text input field
and the button, it's not good
13:18 - enough to put it here. a bummer.
But that's how it is. Let's copy
13:22 - that and put that in right
there. Awesome. Okay, I think
13:27 - it's looking pretty good. So I'm
going to actually go ahead and
13:29 - copy all of this, and paste that
in right here. And of course,
13:36 - now it looks pretty much
identical to this. Now I'm going
13:39 - to get rid of these two. And
there we go. See, that's all
13:43 - what was needed. Now, we do want
to add some spacing here between
13:47 - these two elements. And perhaps
this element too. So why don't
13:50 - we pick the middle element,
which is the input field, of
13:53 - course, and add a little bit of
margin, top and bottom. So let's
13:56 - do 10 pixels. Yeah, that's
looking pretty good. Now, let's
14:01 - make it a little bit smaller
here and compare it. Is it
14:05 - looking good? Yes, it's looking
pretty much identical. So
14:09 - awesome job. Now we're done with
most of the CSS and we can focus
14:13 - on the JavaScript. I'll see in
the next scrim. All righty, in
14:21 - this scrim, we're going to be
setting up our very first
14:23 - Firebase real time database. I
don't know about you. But I am
14:27 - super excited about this.
Because this is where we take
14:31 - our projects to the next level,
a database is going to give us
14:34 - the ability to save data that
can be accessed by anyone in the
14:38 - world. So the first step, of
course, is to head over to the
14:41 - Firebase console. Click this
link to open it up on your side.
14:45 - Once you're there, make sure
that you sign in using your
14:48 - Google account. If you don't
have one, you have to create
14:51 - one. Okay, once you're logged
in, you'll see this press Create
14:54 - a project then you can name the
project playground, check off
14:57 - these two things and press
Continue. We don't need Google
15:00 - Analytics for this project. So
just disable it and press Create
15:03 - Project, it's going to take a
couple of seconds, and it's
15:05 - going to set up the project for
you. Once it's done, press
15:08 - Continue, it's going to take you
to your console. Now, on the
15:11 - left side, you'll see real time
database, click on that, then
15:14 - press on create database, it's
going to ask you which location
15:18 - Do you want to go for, pick the
one that is closest to you, I'm
15:21 - going to go for Belgium, then
it's going to ask you do you
15:24 - want to set the database in
locked mode or test mode, we're
15:27 - going to go for test mode now.
So choose that and press enable.
15:31 - And there we go, we have our
real time database setup. Now
15:34 - the final step is to go over
here and press on this icon to
15:38 - copy the database reference URL,
which we're going to use in just
15:42 - a little bit. All right, so let
me show you the app that I have
15:44 - here. This is called real time.
And it's just a simple movie app
15:48 - where you can add the movies
that you want to watch with
15:50 - someone together pretty stupid,
I know. But it'll illustrate the
15:53 - point. So the first thing I'm
going to do is go all the way up
15:56 - here and make a const and say,
app settings, I'm going to set
16:02 - this equal to be an object. And
in there, I'm going to say
16:06 - database URL. And that I'm going
to set to the string that I just
16:11 - copied from Firebase, remember
your database reference URL,
16:16 - paste that in here, let's
minimize the browser. There we
16:19 - are perfect. Now going forward,
you have to make sure that
16:22 - whenever I give you challenges,
or you're running the code on
16:25 - your end, you need to make sure
that this is replaced with your
16:29 - specific database URL,
otherwise, you'll be writing to
16:33 - my database. And that's not a
good thing. Because imagine
16:36 - 1000s and 1000s of students
writing to the same little
16:39 - database, that's going to be
pretty chaotic. So just remember
16:42 - that going forward. Okay, so
what's next? Now in order to use
16:45 - Firebase, we need to use some
code that lives on Firebase
16:50 - servers. So how do we do that?
Exactly. So let's look at a very
16:54 - simple example that I have set
up and then come back to this.
16:57 - So on the left side, you'll
notice that I made a file called
17:00 - functions.js. Let's go inside of
there. This has a very simple
17:04 - function that just adds two
numbers together. But you'll
17:07 - notice that it has a keyword in
front export. What does that
17:11 - mean? Well, imagine that I want
to use this function, not on
17:15 - this file, but in a different
JavaScript file. How would I do
17:19 - that? Well, the first step would
be to write the function here,
17:22 - and then add export, so it can
be exported to another file. And
17:26 - then you got to go into the file
that you want to actually use it
17:28 - in and use the Import keyword
first import, and then whatever
17:32 - we want to import, we have to
put inside of curly brackets
17:36 - like this. So what is it that we
want to import? Well, we want to
17:39 - use the add function. So we'll
just say add, just this right
17:43 - here. Okay, what next? Now we
have to tell it, where do you
17:47 - get it from? So that's going to
be this file, right? So we have
17:50 - to say import this thing from?
And then we'll say functions.js.
17:56 - So can we start using add here?
We actually can, and I want you
18:00 - to make sure that it can. So the
challenge is console log add, by
18:05 - using just two numbers, pause
here, and I'll see you in a bit.
18:13 - All right, I hope that went
well. You probably had some
18:16 - trouble with it, I can't
imagine. Let me show you what I
18:19 - mean. Let's go in here. Now, of
course, you would think okay,
18:22 - let's just do console log. And
let's just do ad and then one
18:26 - and one, right, so this should
work. But that actually gives us
18:31 - an error, it says cannot use
import statement outside of
18:33 - module. So in addition to this,
we actually got to go inside of
18:37 - the index dot HTML. And here, we
have to say type, and then
18:43 - module. This is the only way
this will work. Now, there's one
18:47 - more thing we forgot, we
actually also have to use the
18:50 - functions or js file here. So we
got to say functions.js. And
18:54 - both of them need to be set to
module because you need module
18:58 - to be able to export it, and
then import it. So both of them
19:01 - need to be set to module. Let's
try it out now. Run that. And
19:06 - now it worked. Perfect. All
right back to Firebase. I'm
19:09 - going to get rid of this. And
we're actually going to be
19:11 - importing a Firebase function
called initialize app. And where
19:16 - are we going to get it from?
We're going to be getting it
19:18 - from this location. There we go.
And if you want to see what this
19:22 - code contains, just feel free to
copy this and open it up in a
19:25 - new tab. You'll see all of the
code there. And we specifically
19:28 - want the function that is
initialize app from this
19:31 - location. All right, so with
that set up, let's go here and
19:35 - make a const and call it app.
And for that, we're going to use
19:39 - the Initialize function that we
just imported. And what are we
19:43 - going to give it as an argument,
we'll see the app settings here
19:47 - which has the specific database
URL, this is going to be the
19:50 - missing link, because this
information here is going to
19:53 - connect our project with the
project that contains this
19:57 - database. So let's do that. Now.
Let's go in here. and see app
20:00 - settings. There we go. And we do
want to see if this is working.
20:04 - So let's just do a console log.
And we'll just console log app,
20:08 - see what we get. I don't know
what we're gonna get. And we get
20:12 - this. Let's have a closer look,
open up the console. What do we
20:15 - see here? Okay, Firebase app.
Alright, that's good. And we get
20:18 - the database URL. And that's the
one that we're using. Perfect.
20:22 - There seems to be communication
now between the Firebase
20:25 - database and our specific
project. Alright, so what's
20:28 - next, let's get rid of the
console and keep going. So next,
20:32 - I'm going to make another const
here and call it database. And
20:35 - actually, for this, we have to
import another Firebase
20:38 - function. And so this time, I
want you to import that. So time
20:42 - for another challenge, import
the get database, Firebase
20:45 - function from this place right
here, following the same
20:48 - principle as up here, pause
here, try it out for yourself.
20:51 - I'll be with you soon. Good
luck. Alright, I hope that went
20:59 - well. I'm going to just copy
this URL, get rid of this. And
21:04 - then say, import, get database
from this place right here. And
21:12 - you'll notice here, the only
difference between these two is
21:14 - the app and the database.
Alright, with that important,
21:18 - let's go back here and say, Get
database. Now, again, we got to
21:23 - feed it some information, right,
that's the only way this is
21:26 - going to work. So let's feed it
the app object inside of here.
21:31 - There we go. Now we're getting
pretty close to this being
21:34 - finished, there's just one
little thing that we're missing.
21:37 - So let's have a closer look at
our database. So this is where
21:40 - we can start pushing data. But
before we can do that, we need
21:44 - to create something called a
reference. Now, what is a
21:47 - reference? Well, a reference in
this case is any location inside
21:51 - of the database. And so since it
doesn't have any data yet, we're
21:54 - going to create a reference here
called movies, where all of the
21:57 - movies that be pushed using this
input field, and pressing this
22:01 - button are going to go inside of
that reference. If that was a
22:04 - little bit too technical for
you. Don't worry it, let's just
22:07 - make it work. And we're going to
be hearing the word referenced
22:09 - several times during the
section. Okay, so let's make
22:12 - another variable here. And I
want to call this movies in dB
22:17 - short for database, of course.
And let's open that up. And
22:20 - again, we need to use another
function, import it from this
22:24 - place right here. So let's go up
here, say comma, and then ref.
22:28 - Short for reference. Let's go in
here and say, ref. Now ref takes
22:33 - in two different things. First,
which database are you working
22:37 - with? You got to see that
explicitly. So let's say
22:40 - database, because we got that up
here. Right? So it knows what
22:42 - that means. Now, the second
argument is going to be what the
22:46 - reference should be called.
Let's just call that movies. All
22:50 - right. So is it going to work?
Let's see, if we enter anything
22:54 - here and press this do you think
anything's going to happen? So I
22:57 - already went ahead and added
this code, right? The input
23:00 - value, and then it console logs,
whatever you put in, and it says
23:04 - added to database. But there's
no code here that we've added
23:07 - that specifically pushes this to
the database, we're going to do
23:10 - that. And for that, of course,
you probably guessed it, we need
23:14 - another function from Firebase.
So let's go up here and say,
23:17 - push. Now watch this. Let's go
in here and say, push. And what
23:22 - do we want to push? We want to
push the input value. But is
23:25 - that enough? No, because we need
to tell this function exactly
23:30 - where we want to push this in
the database. So we want to give
23:32 - it the reference first. So let's
do movies in dB for that. And
23:38 - now let's cross our fingers and
try it out. Let's run this. And
23:41 - of course, get rid of this
annoying thing first. Now, I'm
23:44 - going to enter in a movie here,
let's say three idiots, press.
23:48 - Did that work? Yes, it did.
Let's have a look. And it added
23:52 - it to the database. Again, if it
didn't work for you make sure
23:55 - that you changed this URL to
your database URL. So I'm going
23:59 - to add Shawshank Redemption. And
I'm going to add another movie
24:04 - to School of Rock. And did those
two get added? Indeed they did.
24:11 - And we got all three of them
their amazing work, we finally
24:14 - have our Firebase real time
database hooked up to our
24:18 - project. Great job. And I'll see
you in the next one. Now. It is
24:24 - finally time for us to set up
Firebase for our project. Let's
24:28 - get into it right away. So I
want to start you off with a big
24:30 - challenge. And here it is. Make
sure to read this very carefully
24:34 - before you get started. And
again, this is a big one. So
24:37 - please don't stress too much if
you don't quite get it. And
24:41 - please feel free to go back and
refresh your memory if you need
24:44 - to. So with that, pause here and
give it a go. I wish you all the
24:48 - best and I'll see you in a few
moments.
24:57 - Okay, how did
24:58 - it go? If you manage to do all
of that 10 Bravo, let's have a
25:01 - look at it together. So first
thing we got to do, of course,
25:04 - is head over to the Firebase
console, then press Create a
25:06 - project, name it real time
database, check off these two
25:10 - things continue, disable Google
Analytics continue, project
25:14 - completed, continue. Now on the
left side, let's go to real time
25:17 - database, create database,
choose your nearest location,
25:22 - choose Test mode, and then
enable. And here we go. We have
25:25 - our database setup, make sure to
copy the database reference URL.
25:29 - Okay, let's dive into the code.
So let's head on over to
25:32 - index.js. And I'm actually going
to give you a challenge again.
25:36 - So I want you to first import
the Firebase function initialize
25:39 - app from this place, and then
get database from this one. So
25:43 - pause here, give it a go. And
I'll be right back.
25:51 - All right,
25:52 - I hope that went well. I'm
actually going to use these
25:54 - comments to do this. See import
there. And we want to make sure
25:59 - that these are inside of curly
brackets. And there we go.
26:04 - That's it. Same thing. Here
import.
26:14 - Perfect.
26:15 - Okay, now you can relax a little
bit, because I've given you two
26:18 - challenges back to back. Let me
take over for a bit. Okay, let's
26:21 - go back to the Firebase console
and make sure to copy the
26:24 - database reference URL. Once we
have that, let's go back here
26:28 - and say const. And then app
settings, make that an object
26:33 - and say database URL, and set
that equal to this database
26:38 - reference URL. Now, again, I
have to reiterate that whenever
26:41 - you're interacting with scrims
in this section, you got to make
26:44 - sure to use your own database
URL. Otherwise, as you can
26:47 - imagine, there's going to be
chaos inside of this app. All
26:50 - right, so what's next, let's set
up an app variable and set that
26:54 - equal to initialize app. And we
need to give it some
26:57 - information, we need to give it
an argument, that's going to be
27:00 - the app settings that we've set
up, right, which contains the
27:03 - database URL, which is going to
be the key thing that's going to
27:06 - connect our project with
Firebase. Alright, so what's
27:10 - next, then we're going to set up
a database variable. That of
27:14 - course, uses get database. And
in here, we're going to pass in
27:18 - the app. Alright, one last thing
remaining here. And that's going
27:21 - to be setting up the reference.
So what should we call this
27:24 - thing? Let's call it shopping
list in dB, and set that equal
27:31 - to ref. Now, of course, we got
to remember to import that from
27:34 - up here. So ref. And of course,
the ref functions takes in two
27:37 - things, first, the database. And
then we got to call this
27:41 - reference something. Let's call
it shopping list. Okay, let's
27:45 - pause here for a little bit to
see if this is even working.
27:48 - Let's press run. And we get an
error cannot use import
27:52 - statement, our we forgot to do
that key thing. Let's go into
27:55 - index dot HTML. And we always
have to remember to go in here
27:59 - and say type module. When do we
need to do this? Anytime inside
28:05 - of any JavaScript file where
we're either using the Import or
28:09 - the export, or both of them, we
have to set this equal to
28:13 - module, otherwise, it's not
going to work. All right, let's
28:15 - test it out again. All right, we
didn't get an error. So
28:18 - hopefully that's working. Now to
conclude this scrim, I want to
28:21 - actually give you a final
challenge that we put it right
28:24 - here. So I want you to use the
Firebase function push to push
28:29 - the input value to the database.
So pause here, try it out for
28:33 - yourself, and I'll be right
back. Okay, I hope that went
28:41 - well. Let's do it together.
Let's do push. And first, we got
28:44 - to give it the reference, which
in our case is going to be
28:47 - shopping list in dB. And then
we're going to just give it
28:50 - input value. Now, is this going
to work? Well, not exactly
28:53 - because we haven't imported push
from up here yet. Alright, let's
28:57 - test it out now. So I'm going to
press Run, open this up. I'm
29:00 - going to put in oranges here.
Let's cross our fingers and
29:03 - press this button. And I see
that it worked for me. Great. I
29:07 - hope you got it to work on your
side as well. Awesome job. And
29:11 - I'll see you in the next scrim.
Just a very quick scrim where
29:17 - I'm going to cover something
that I glossed over in the
29:19 - previous two scrims, and that's
security rules. Now if you
29:23 - remember when we created our
real time database, we chose to
29:26 - start in test mode. Now this is
a perfectly fine way to start.
29:30 - However, as you can see, this
message right here says
29:34 - something important. The default
security rules for test mode,
29:37 - allow anyone with your database
reference to view, edit and
29:41 - delete all data in your database
for the next 30 days. Now what
29:45 - that means is is that reading
and writing to the database can
29:48 - be done by anyone starting when
you created the database and
29:52 - until the next 30 days, which
means whatever the time is, at
29:57 - this moment in time denoted by
now here It must be less than
30:01 - this long and weird number. Now
this is just one way to
30:05 - represent time in programming.
It's called Unix epoch time. And
30:09 - if you'd like to play around
with it, you can just go to
30:11 - epoch converter.com, or click
here. But Firebase has been
30:15 - helpful here and giving us this
as a comment, which you can see
30:19 - is the 10th of February 2023.
While is definitely past that
30:22 - date now, which means that we
won't be able to read or write
30:26 - anything to the database. Let's
fix that. So let's go back to
30:30 - our database. And as you can see
up here, you'll see rules in the
30:33 - menu. Let's click on that, there
we go. So as you can see here,
30:37 - there are two rules, one for
read and one for right now just
30:40 - click anywhere here to edit the
text. Now you want to go ahead
30:44 - and change both of them to true,
remember the comma in between.
30:48 - So this means that anyone can
read and write to the database.
30:52 - Now, is this a perfect scenario?
Absolutely not. Because it means
30:56 - that literally anyone can write
to your database. However, if
31:00 - you're only using this app by
yourself or just with a couple
31:03 - of other people in your life,
then it doesn't need to be a
31:06 - problem, because you'll only be
sharing your app URL with those
31:09 - people. So let's go ahead and
publish the changes. Now you'll
31:13 - see this warning message which
says exactly what I just
31:16 - explained. But for my database,
I'm going to actually set the
31:20 - writing rule to false because I
want to make sure that my
31:23 - database doesn't get spammed,
you know what I mean, which is
31:27 - also why whenever you run the
code on Scrum, but during this
31:30 - project, you will not be able to
write anything to my app. So
31:34 - that said for this scrim, this
is actually a very important
31:37 - aspect of Firebase. And
something we'll definitely cover
31:40 - in much greater depth in a
future Firebase course with that
31:44 - covered on to the next one.
Alright, so before we can work
31:51 - on fetching the database items
from Firebase, we need to first
31:55 - write the code that will
actually add the item to the
31:57 - DOM. In other words, we need to
write the JavaScript that's
32:01 - going to add the HTML necessary
to show the items right down
32:05 - here. So at this point, you've
actually already done this
32:08 - before, you've been using
innerHTML to add HTML stuff
32:13 - using JavaScript. So I'm going
to give you this task as a
32:16 - challenge. But before that,
let's quickly add the necessary
32:19 - HTML code we need. There we go.
So we got our UL right here with
32:23 - ID shopping list. And to Li is
that I have as examples here,
32:27 - oranges and hotdogs, which let's
be honest, here are really the
32:31 - only things you need to survive,
right? Let's see if that works
32:34 - or not run. And we got those
perfect. Okay, let's go over to
32:37 - the JavaScript file. So I have
the challenge written out right
32:40 - here. So you basically want to
make it so that whatever you put
32:43 - in here, and you press the
button, that gets appended right
32:46 - at the end here. So pause here
and give it a go yourself, and
32:49 - I'll be with you in a few
seconds. And we'll look at it
32:52 - together. Now, before you start.
If you don't remember how to do
32:55 - this, feel free to go back a
little bit and refresh your
32:58 - memory. Okay,
32:59 - good luck. Okay,
33:04 - did you get it? Well, let's look
at it together. So the first
33:08 - thing I think about here is we
need to connect our HTML and our
33:11 - JavaScript. And I'm going to do
that right up here. So let's do
33:14 - const. And make a shopping list
element. And of course, we're
33:18 - going to use our favorite method
here, get element by ID, and we
33:22 - call it shopping list. There we
go. Once that is done, I can
33:26 - just copy this, put it right in
here. And what do we want to
33:32 - apply to this thing? Well, we
definitely want to use inner
33:35 - HTML. And then of course, we
want to say plus equals, and
33:39 - this is where I'm going to be
using template strings, because
33:42 - that's going to let us do this
in a very elegant way. So let's
33:45 - do backticks. And inside here,
first, let's open it up with an
33:49 - LI tag. And then we're going to
say, input value. Close that
33:54 - with a curly bracket and then
enter that thing. There we go.
33:58 - Does that work? Let's test it
out. Open that thing up. And
34:01 - let's try adding some chocolate
here. Chocolate, add to cart and
34:06 - it added it right there.
Amazing. Did it add it to the
34:09 - database? Yep, it did that too.
Perfect. Now before we end this
34:13 - scrim, I've noticed something
that I really want to fix. It's
34:16 - a super simple thing. But did
you notice that? Do you notice
34:20 - that when you enter in something
here and press the button, it
34:23 - doesn't clear the input field.
And that's really annoying,
34:26 - because we want to make this
thing as user friendly as
34:29 - possible. In fact, why don't you
go ahead and add that code?
34:33 - Pause here, give it a go. And
I'll be right back. Okay, I hope
34:40 - that went well. So what are we
doing here? So we definitely
34:43 - want to start using the input
field element. Let's copy that
34:47 - here. Now what is it that we
want to do to it? Well, the
34:50 - value is this thing right here,
right? And that's what we want
34:54 - to reset. And how can we do
that? Let's just say that the
34:59 - value should would be equal to
the empty string. That should
35:02 - work. Let's try it out, run. And
I'll add a Red Bull here and
35:08 - press this. And there we go, it
clears it. Now notice that the
35:12 - chocolate disappeared. And
that's because we haven't
35:14 - started fetching the database
items from our actual database.
35:18 - But don't worry, we're going to
do that pretty soon. Great job
35:21 - so far. And let's keep going.
35:26 - Okay, I feel
35:27 - like we got to take a little
pause here, because you have
35:30 - been doing an incredible job.
Seriously, just think about when
35:34 - you started off learning with
Scrimba. You were learning
35:36 - simple HTML and CSS not too long
ago. And now you're making your
35:41 - own mobile app, and you've just
hooked up an actual database to
35:44 - your project. Isn't that crazy?
Now, just think about how good
35:48 - you can get if you continue
coding, how amazing Are you
35:51 - going to be in three months, six
months, a year, five years?
35:56 - Truly amazing to think about if
you asked me. So with that,
36:00 - let's have a look at the
challenges for the scrim. So in
36:02 - this one, we're going to be
spending some time refactoring
36:05 - our code. It's always good to
pause every now and then to
36:09 - rewrite your code. In a better
way, this gets more and more
36:13 - important, the more complex your
projects get. And it's
36:16 - especially important when you
work with other developers. So
36:20 - here are the two challenges that
I have for you. So take this
36:23 - line of code and refactor it,
which means just create a new
36:26 - function for it. And the same
thing with this one. So take a
36:30 - pause here, try it out for
yourself, and I'll be with you
36:33 - in just a little bit. Good luck.
All right, I hope that went
36:40 - well. So how do we think about
this? Well, I definitely want to
36:44 - take the first line of code and
cut it from here. So let's cut
36:47 - it from here. And let's remove
this as well. And then we're
36:51 - going to go down here, I'm going
to make a new function. Now what
36:54 - do we want to call this
function? I don't know. Let me
36:57 - just give it a temporary name.
Let's just call it Hello. And
37:02 - then we're going to paste in
that line of code. And now let's
37:05 - think about a good name for this
function. So what is this
37:08 - function doing? Well, it's
taking the input field element,
37:12 - and it's setting the value to be
the empty string. So it's kind
37:16 - of clearing the input field,
right? It's resetting it. So I
37:20 - like the word clear more. So why
don't we call this clear? input
37:27 - field? L? So clear. Make sense,
right? And what is it clearing
37:33 - the input field L, which is
exactly what this is called as
37:36 - well. So that kind of makes
sense, right? So once we've done
37:40 - this, we can actually take this
function and copy it and call it
37:44 - up here. So it actually runs. So
that's the first one. What about
37:48 - the second one. So let's start
off the same way. We want to cut
37:51 - it from here, cut that, and then
let's remove this. And we want
37:56 - to make a function down here.
Again, I'm not really sure what
38:00 - I should call it. So I'm just
going to call it hello for now.
38:03 - And then in here, let's paste in
the function. There we go. Oops,
38:07 - there we are. Now let's think
about what this function is
38:10 - doing. So this one takes the
shopping list element uses the
38:14 - inner HTML to append the input
value at the very bottom. Okay.
38:21 - Hmm. Okay, so what element is it
that it's changing? It's
38:25 - changing the shopping list out?
All right, so it's appending, a
38:29 - new item to the shopping list L.
Let's just write that out. So
38:34 - I'm going to go with a pend item
to, and I'm just going to copy
38:39 - this and paste it in there. And
of course, we're using camel
38:43 - case here. So I want to turn
this into a capital S. Let's see
38:46 - how that sounds. Append item to
shopping list L. Is that a super
38:51 - long function name, kind of? Is
that a problem? No, I don't
38:54 - really see a problem with this.
It's a pretty good function
38:57 - name. If you ask me. Let's go
with it. Now, is this going to
39:00 - work? Let's copy this up here.
And then try to run it. Let's
39:07 - run that. Let's see read. Does
that work? It's not working,
39:12 - because it's giving us input
value is not defined. Of course.
39:16 - What do we have here? We have
the input value. Does that mean
39:20 - anything inside of this
function? No, this is coming
39:23 - from up here, right? That's the
one. So we got to use a
39:27 - parameter in this case. So why
don't we go in here and say that
39:31 - we're going to feed it the input
value, whatever that happens to
39:35 - be. And then in here, we're
going to create a parameter and
39:39 - let's just call it item of
value. And I'm going to take
39:43 - that one instead. And use that
in here. All right, so let's try
39:47 - that again. Now. Let's do bread
once more. Is that going to
39:52 - work? There we go. Now it works
perfect. Now next up, we're
39:56 - going to be looking at how to
fetch items from the database
39:59 - and do that in Real Time.
However, before we can do that,
40:02 - we need to go on a tiny little
tangent here, so that we can
40:05 - learn about something that we
really need to know. And that is
40:08 - how to take a JavaScript object
and transform it into an array.
40:12 - Okay, see you in the next one.
So much of coding is about
40:19 - turning a piece of data in a
specific format to another
40:23 - format. As programmers, we need
to do that all the time. So
40:27 - let's have a look at what kind
of data we have here. So here we
40:31 - have a let variable called
scramble users, that is an
40:34 - object that contains three
users. The key is the ID of the
40:39 - user. And then the value is the
email address. Now what if we
40:42 - wanted to turn this object into
an array? Now, you might be
40:46 - asking yourself, why would we
even want to do that in the
40:48 - first place? Well think about
it, maybe you want to write a
40:51 - for loop, and you prefer to work
with a race. Okay, so how do you
40:55 - do that? Exactly? Well, in this
case, it turns out that the
40:59 - awesome people that contribute
to the JavaScript language,
41:02 - already thought about this. In
JavaScript, we have an object
41:06 - type, and you can get to it by
writing object with a capital O.
41:11 - Now, we don't need to worry too
much about what types are
41:14 - exactly at this point, what we
are interested in right now is
41:18 - how to use a method on object.
So we can convert this object
41:22 - into an array. Alright, let me
show you. So what we want to do
41:25 - here is say object and then dot,
and then I'm going to write
41:29 - values. Okay, and this is a
method, of course, so we got to
41:33 - end it with these parentheses.
And we can also feed in the
41:37 - object that we want to use here.
So I'm going to take this, copy
41:41 - it and put it right here. Now,
of course, we do want to console
41:44 - log this. So let's do console
log, right here. And let's see
41:50 - what we can run. And we get an
array. Let's have a closer look.
41:55 - Yes, it is indeed an array, and
we get all the email addresses.
41:59 - This is perfect. Now, what if
you wanted the keys instead?
42:04 - What if you didn't want the
values but the keys? Well, of
42:07 - course, we have that too. So for
that, we just change values into
42:12 - keys. Let's run that again. And
there you go, you got the keys.
42:16 - And then of course, naturally,
you're probably thinking, Okay,
42:19 - what if I wanted both, while
they thought about this, as
42:22 - well, of course. And so the
final method I'm going to give
42:25 - you is going to be entries, and
this is going to give you a
42:29 - little bit more complex of an
array. Let's have a look. And
42:33 - see, it gives you an array that
contains arrays that each have
42:37 - two different things in it
first, the key and then the
42:40 - value. So in this case, we get
both. Alright, now before we end
42:44 - the scrim, I want to give you
three challenges to get some
42:47 - practice with this. So I'm going
to remove this. And here are the
42:50 - challenges. Make sure to read
them carefully. Pause here, try
42:54 - it out for yourself. And I'll be
right back. Good luck. Alright,
43:02 - I hope that went well. Let's
have a look at it together. So
43:05 - first, I'm going to go for let's
and then scramble users emails,
43:11 - set that equal to object. And
then of course, the first one
43:14 - that we learned was the values
one, right? And what is it take?
43:17 - Well, it's going to have to take
this one, that's the only thing
43:20 - we have. That's the object. So
this together now is going to
43:24 - return us an array. Let's see if
that's actually the case by
43:28 - console logging it here. console
log, this one, let's see added
43:33 - gives us the emails Perfect. Now
once I've done this, the rest
43:37 - are pretty easy. So I'm going to
just copy this one, put it right
43:40 - down here. Replace it now with
IDs instead. IDs. And what do we
43:48 - want in this case, we don't want
the values we want the keys. So
43:52 - let's see if that works now.
Beautiful. Okay, the last one,
43:59 - again, copy this one, put it
down here. And then we go for
44:05 - entries instead this time. And
of course, we want to use
44:10 - entries like that. Let's see if
that gives us the final one. And
44:17 - there we go. Perfect. As I said
earlier on, this is a very
44:21 - useful thing. Programmers change
the format of the data all the
44:25 - time. All right, great job with
this one.
44:32 - In this grim,
44:33 - we're going to be using a
magical Firebase function that
44:35 - will make it super easy for us
to get exactly what we need from
44:38 - the database whenever it changes
in any way. I hope you're ready
44:42 - for it. Okay, so let's spend a
little bit of time looking at
44:45 - exactly what's going to be
happening here. So this thing
44:47 - right here is a real time
database. You'll see this type
44:50 - of icon pretty often. It's
usually used to denote a
44:52 - database. And so here we have a
person using our app on their
44:56 - phone. This app uses this
database to store all of its
45:00 - data. Now this party right here
is also called the client, if
45:03 - you've ever heard that technical
word before. Now, of course, the
45:06 - client could be using any device
could be an iPad, other kind of
45:10 - tablet, desktop, computer,
laptop, Android phone doesn't
45:14 - really matter. So let's bring in
another client right over here.
45:17 - Now this person is also using
the same app, which of course
45:20 - also uses the same database. And
so let's say that this client
45:23 - over here adds in some value to
the input field, and presses
45:27 - this button, at which point the
data is saved on to the
45:30 - database. Now, we've already
done this, but this is where the
45:33 - magic happens. Because right
after this action has taken
45:36 - place, the database immediately
sends a signal to everywhere
45:41 - saying that the database has
been updated. In fact, it does
45:44 - something even better, it
actually sends the new data from
45:47 - the database to all of its
clients. Now, this data at this
45:51 - moment in time is something that
Firebase refers to as a
45:54 - snapshot. We'll be working a lot
with snapshots in this scrim, so
45:58 - just get used to that word.
Okay, now let's have a look at
46:01 - the app that I've got set up
here. So this app is called a
46:04 - best REITs. And it's supposed to
show your favorite books right
46:07 - under here. Now, I've already
gone ahead and written the HTML,
46:11 - CSS, and most of the JavaScript
for it already. Now, before we
46:14 - start adding any code here, I
want to show you how you can add
46:17 - data to the database through the
Firebase console. So if you
46:21 - don't already have it open, let
me show you a shortcut on how to
46:24 - do that, you can just copy this
URL for the database, of course,
46:27 - use the one that you're using,
and just open that up in a new
46:30 - tab, it's going to take you to
your Firebase Console to the
46:33 - real time database. All right,
so I've got my real time
46:35 - database right up here. The
first thing we want to do is go
46:38 - right up here, and then press
this plus button. Once you've
46:41 - done that, this is going to
appear, it's going to ask you
46:44 - for a key and a value. Go ahead
and write books right in here.
46:47 - There we go. Now, instead of
putting something in for the
46:49 - value, we're going to just go
ahead and press this plus
46:52 - button. And did you see what
just happened there, this now
46:55 - allows us to nest the data
inside of the books, which is
46:59 - exactly what we want. Okay, so
let's go ahead and add our first
47:02 - book. For the key, we're going
to say one, and for the book,
47:05 - I'm going to put in make time,
which is one of my favorite
47:08 - books. Once you're done with
that, go ahead and press Add,
47:11 - boom, we got make time in there
perfect. Now let's go ahead and
47:14 - add another book, go up here and
press the plus button again. And
47:18 - then again, we want to put in
two here. And then I'm going to
47:21 - put an animal farm one of my all
time favorite novels, go ahead
47:24 - and press add. And there we go.
We got two items. I think that's
47:27 - good enough. Okay, now let's go
back to the code. So what's the
47:30 - first thing that we want to do?
Well, in order for us to fetch
47:33 - the database items in that
magical way that I was talking
47:36 - about, we want to use the on
value function. So let's go up
47:40 - here and import it. First, we're
going to see on value Perfect.
47:44 - Now what now let's go down here
and start using this function.
47:48 - So how do we use it exactly,
first, go ahead and just write
47:51 - on value. And then let's open up
the parentheses. Now the first
47:54 - argument that we want to give it
is going to be the reference
47:58 - where we want to fetch the data
from now what is that? Well,
48:01 - that's going to be this one
right here, the books one, and
48:04 - I've already got that set up
here. It's using the reference
48:07 - function right here. So I'm
gonna go ahead and copy this and
48:10 - put that in right there. Okay,
now we know where we want to get
48:12 - the data from. Now, what's next,
the next argument is going to be
48:16 - a function, which inside
actually contains the snapshot,
48:19 - so we're going to be able to use
the snapshot inside of here.
48:22 - Okay, let's go ahead and open
that up. Okay. So as always, we
48:26 - want to just do a test first. So
let's go ahead and console log
48:29 - snapshot just to make sure that
things are working. All right,
48:32 - let's go ahead and press Run and
hope for the best. And there we
48:35 - go. We got both of them.
Perfect. Now let's open up the
48:38 - console. And you'll notice here
that this is an object and we
48:43 - don't really want to work with
objects. In this case, we want
48:45 - to turn this into an array. So
let's go ahead and do that.
48:49 - Okay, so let's make some space
up here. And let's make a left
48:51 - variable and call it books
array. Now, how do we turn an
48:57 - object into an array? Well, we
just learned how to do that,
49:00 - right? So let's do object and
then values. And then inside is
49:04 - where we want to put the
snapshot. Okay, hopefully, this
49:07 - is going to work. So let's now
console log the books array
49:10 - instead, press run again. And we
get something very weird that I
49:16 - do not understand. It does look
like an array, but it's not
49:20 - quite right. problem here is
that we don't want to use
49:24 - snapshot directly, we want to
actually say snapshot, dot Val,
49:29 - which is going to make it work
now hopefully let's try it
49:31 - again. Run. And there we go. Now
we got that beautiful array with
49:35 - both of our items in it.
Perfect. Okay, now this is where
49:39 - I want to give you some work to
do. So here's your challenge by
49:42 - using this array that we just
made. Write a for loop where you
49:45 - console log each book. Alright,
pause here. Give it a go by
49:49 - yourself, and I'll be right
back. Good luck
49:58 - Okay, I hope that went well.
49:59 - Let's Do it together. Now let's
do for let i equals zero. And
50:04 - then I smaller than books array,
of course, the length of that.
50:09 - And then we want to do i plus
plus super standard stuff. Let's
50:14 - open that up. And we want to do
console log. And then we want to
50:19 - do this books array, but not the
whole array. We want the item of
50:24 - it right. And so we can console
log that. Okay, so let's see if
50:28 - this works. Now, Ron, do we get
it? Yes, we get both of them
50:32 - perfect. Now, before we end
this, I do want to add something
50:36 - here because I normally like to
do it this way, let's say
50:39 - current book, and then put this
right up there first. Once we
50:44 - have that, we can just use
current book in here, pores,
50:48 - let's make sure that that also
works. Of course, that's going
50:50 - to give us the exact same thing.
Perfect. All right, but we're
50:53 - not done yet. Because we don't
want to console log the books,
50:56 - we want to actually show them
here. And I've actually gone
50:59 - ahead and already made a
function right down here called
51:03 - append book to books list L.
It's kind of a long one, but use
51:07 - this function inside of the loop
so that you can show the books
51:11 - right here. Alright, so I'm
going to put the challenge right
51:13 - here. So pause here, try it out
for yourself. And I'll be right
51:17 - back.
51:22 - All right. I hope that went
well.
51:24 - Let's have a look at it together
now. So first thing I'm going to
51:26 - do is just copy this whole
thing, because that's what we
51:29 - want to use. Put it right down
here. So what is this book value
51:32 - here? Well, that's the parameter
of the function. And we don't
51:35 - really have that inside of here.
So we got a substituted with
51:38 - something. Where's that book?
Well, the book is right up here,
51:41 - current book. So let's just copy
this and put that in there. And
51:45 - I believe that's all we got to
do. So let's see if that works.
51:48 - Let's run that. And do we get
it? Indeed we do. We get both of
51:53 - these here. Let's make it a
little bit bigger. And there we
51:55 - go. Perfect. Now at this point,
you might be thinking are great,
51:59 - we're done. Not so fast. Because
let me show you what can happen.
52:02 - So let's say that you go into
the database, and you make a
52:05 - change. Let's say that we want
to change the title of this for
52:08 - make time to make time. And I
don't know why you would want to
52:12 - do that. But let's just do it to
demonstrate a point here. So
52:16 - let's go inside of the database.
And what you can do is you can
52:19 - just go ahead and press this,
and it's going to let you edit
52:22 - it. So I'm going to do that on
my side A B, go ahead and change
52:25 - that. Now before I press enter
to make this happen. Let's see
52:29 - what happens here now. Okay, I'm
going to press enter in 321. Did
52:34 - you see let's have a look what
just happened, it didn't remove
52:38 - the first books, it appended it
at the end, this is a problem,
52:42 - because every time the database
is going to be updated, it's not
52:45 - going to clear any of the first
stuff, it's just going to keep
52:47 - adding that's going to be super
chaotic. And we definitely don't
52:50 - want that. So at this point, I
want to give you the last
52:53 - challenge of this scrim, which
is to try to fix this bug. Now
52:56 - before you go ahead, though,
notice that there is a function
52:59 - that we haven't talked about.
And that's the clear books list
53:03 - L which actually contains the
functionality that you need. Now
53:07 - you just need to place it
somewhere inside of this on
53:10 - value function. I don't know
where that's what you're
53:12 - supposed to figure out. So pause
here, give it a go for yourself.
53:16 - And I'll be with you in just a
couple of seconds. Good luck.
53:24 - Okay, so how do we think about
this now? Well, here's how I
53:26 - think about it. So the on value
function is that special
53:30 - function that runs every time
there is an edit to the
53:33 - database. So in this case, we
just changed the title of this
53:37 - slightly. And so it ran the
entire code. Now this is the
53:41 - part of the code the for loop
that is actually doing the
53:44 - appending. But before that we're
not clearing anything. So why
53:48 - don't we just plain and simple
copy this. And right before the
53:51 - loop runs, we say Hey, make sure
if there's anything there just
53:55 - clear it before you start a
pending. Okay, let's see if this
53:59 - works or not. I'm going to run
this again. Now. Okay. Again, we
54:02 - have both of the books ah, hold
up right there for just a
54:05 - second. This is future mean
talking to you. After recording
54:08 - the scrim I noticed that at this
point, I'm actually seeing both
54:11 - books on my side. But you're
actually seeing a blank web page
54:14 - right now with just the best
reads heading. Now this is due
54:17 - to a little bug with the
scrambled mini browser. But I
54:20 - want to assure you that this is
actually working. In fact, to
54:23 - prove it to yourself, you can
pause right here and put in your
54:26 - database URL right in here, and
then press run. And you will see
54:30 - that it works. Feel free to make
edits to the database. And it's
54:33 - going to update here again.
Sorry about this. We're of
54:36 - course going to try to fix this
as soon as we can. But until
54:39 - that I hope you can forgive this
bug. So yes, indeed. This code
54:43 - right here is what fix that bug
that we run into. Now before we
54:47 - end this really long scrim. I
want to give you an extra well
54:51 - done. We managed to cover a lot
of ground in this one. All
54:58 - righty, so it's fine The time
for us to fetch the items from
55:01 - the database in real time.
Firebase is a gift to the world
55:05 - seriously. So why don't we just
start the scrim off with a
55:07 - challenge. So let's go down
here. And I'm going to give you
55:11 - a challenge right here. So I
want you to call the on value
55:14 - function, you're going to have
to import it up here first, with
55:17 - shopping list in dB as the first
argument. And then the function
55:22 - snapshot as the second argument,
this will get us started
55:25 - building our own value function.
So pause here, give it a go
55:28 - yourself, and I'll be right
back. Good luck.
55:35 - Okay, I
55:36 - hope that went well. Let's do it
together. So let's do on value.
55:41 - And then open it up and do
shopping list in dB. First, we
55:45 - have to specify the reference
first, so it knows exactly where
55:48 - to fetch the items from. And
then let's make that function.
55:52 - And then of course, we got this
snapshot in here. And then open
55:55 - this up. There we are. All
right, it's time for the next
55:58 - challenge. Here it is console,
log snapshot dot Val to show all
56:02 - of the items inside of the
shopping list in the database.
56:05 - Pause here. I'll be right back.
Good luck.
56:12 - Okay,
56:12 - so let's see, let's scroll down
a little bit. And let's start
56:16 - doing this. So let's do console
log, and snapshot dot Val. Let's
56:21 - see if that works. Run that. And
we have on value is not defined,
56:26 - obviously, because I forgot the
most basic thing, which happens
56:30 - all the time. So I'm going to go
up here and import that.
56:33 - Hopefully you remember to do
that. There we go. Let's run it
56:36 - again. And we got our object
with all of our items. Perfect.
56:41 - Okay, now I want to give you the
final challenge for this scrim.
56:45 - Let me get rid of this first.
And here it is. Use object dot
56:51 - values to convert snapshot dot
Mal from an object to an array.
56:56 - And you want to create a
variable for this. And also make
56:59 - sure to console log the result
just to make sure that it's
57:01 - actually an array. Good luck,
pause here. I'll be right back.
57:09 - Okay, let's do this thing. Let's
go up here. And we'll say let an
57:13 - items array. And we'll set that
equal to object. And of course,
57:18 - we want to use that object dot
values, right, that gives us
57:21 - exactly what we need, in this
case, snapshot, dot Val goes in
57:25 - there. And we do want to make
sure that we console log that
57:28 - just to make sure that things
are working. As always, let's
57:33 - run that and see what we get.
And we got that beautiful array.
57:36 - Perfect, great job working on
the challenges I'll see in the
57:40 - next one. Okay, so now we've got
the on value function, giving us
57:47 - the snapshot every time the
database updates. And then we've
57:50 - turned that into an array right
here. So of course, the next
57:54 - natural challenge is for you to
write a for loop using this
57:58 - items array. So that's the
challenge. Pause right here.
58:01 - Give it a go. And I'll be right
back. All right, let's do it
58:09 - together. So let's go with four
and let i equals zero. I smaller
58:15 - than items array, the length of
that, of course, and then i plus
58:20 - plus. Let's open that up. And
how do we get the specific item
58:26 - per iteration. That, of course
is going to be items array, and
58:30 - then the IFE element inside of
that, right. So let's console
58:33 - log that. And then we'll test
this thing out. Let's run that.
58:38 - And there we go. We got a full
list. That's perfect. Okay, my
58:41 - next challenge for you is this
one, use the Append item to
58:46 - shopping list element function
that we made before inside of
58:49 - the loop to append each item to
the shopping list element for
58:53 - each iteration. So basically,
when you run this, all of the
58:57 - items should show up here. Okay,
good luck, pause here. And I'll
59:01 - be with you in just a couple of
seconds. All right, I hope that
59:09 - went well. So what do we do
here? What's the first thing
59:12 - that we should do? Well, we
definitely want to use this
59:14 - function. So I'm going to just
go ahead and copy this. And then
59:19 - paste it right in here. Now let
me get rid of this console log.
59:24 - And do we have something inside
of here called item value?
59:28 - Absolutely not. That's the
parameter for this function. So
59:31 - we got to substitute that with
items array, and then the eighth
59:36 - element, of course in there,
right. So let's see if that
59:39 - works. Now, run that. Did we get
it? Yes, we did. Now there seems
59:46 - to be a little bit of a problem
here because we're getting
59:48 - oranges and hotdogs up here.
These were just examples that we
59:52 - added in the beginning. So let's
remove them now. There we go.
59:57 - Let's go back here again. Try to
run Once more, and then for some
60:02 - reason we're getting bread two
times. I wonder why that is. But
60:06 - the rest of them seem to be
right. Actually scratch that.
60:09 - That's my bad. I actually was
the one who accidentally added
60:13 - two breads to the database. So
let's actually delete it from
60:16 - the database. I'm going to do it
from the console and see if this
60:19 - fixes itself or not. So let's
see here. I'm going to delete
60:22 - one of them. Yes. And there we
go. Okay, so it now did it two
60:29 - times, right. So we got to fix
that. Because here we have
60:32 - everything. And then we have
everything once again. Now at
60:36 - least it only has one bread. So
let's actually end this scrim
60:39 - here. And we'll fix this bug in
the next one. Okay, so in the
60:45 - last scrim, we discovered that
there was a big bug with our
60:48 - code, whenever there was a
change to the database,
60:51 - something isn't working, right.
See, we got all of these here.
60:54 - So what is going on here? Well,
can you guess what I'm going to
60:57 - say? Now? While if you guessed
that I'll be giving you a
60:59 - challenge to fix this bug, then
you're absolutely right. Pause
61:02 - here, try to figure it out by
yourself. And I'll be right
61:05 - back. Good luck.
61:10 - Okay, how did
61:12 - it go? Well, the most important
thing is that you try to think
61:15 - about it yourself. Okay, so
let's look at the code together.
61:18 - So I want to immediately go to
the on value function. And so
61:21 - this function is running
whenever there is a change to
61:24 - the database, right? And what
are we doing inside here? We're
61:27 - using the snapshot to turn it
into an array, so that we can
61:30 - run a four loop on it, right? So
every time this happens, this
61:33 - for loop is running, which kind
of explains why it's continuing
61:37 - to add the items at the end.
We're not clearing the items
61:40 - before that happens, right? So
we got to do that right up here.
61:44 - So how can we do that? Well, we
can just say, shopping list, l
61:49 - innerHTML. equals and then the
empty string. So let's try to
61:53 - run that now. Okay, looking good
so far, let me try to add a new
61:58 - item to test this thing out now.
Coffee. And we have a new bug.
62:07 - Or at least maybe this was there
before as well. But we still
62:10 - haven't fixed all of it yet. At
least it wasn't rendering all
62:13 - the items now it was just
duplicating this one last year.
62:16 - Okay, duplication. What does
that mean? To me that says,
62:20 - okay, there is somewhere in the
code where we can remove
62:23 - something that is already
happening? Well, this one we
62:26 - can't remove, because this is
the key thing that's that we
62:29 - need to keep. But if you look up
here, you'll see that we're
62:31 - running the same function with
the input value. So we're doing
62:35 - it two times now. So let's just
get rid of this. And I think
62:38 - that's going to solve our
problem. Let's run it once more.
62:41 - And now let's add in solo, which
is a Norwegian soda that we like
62:46 - here. And now it works perfect.
Okay, but before we end this
62:50 - scrim, I am looking at this
piece of code right here, I
62:53 - actually want to take this out
and refactor it. So I'm going to
62:57 - copy this. And instead of that,
I'm going to say, clear shopping
63:03 - list L. And we're going to use
this one here. So let's take
63:09 - this out of here, make a new
function, clear shopping, list
63:15 - L. And then of course, we're
going to paste that in right
63:18 - here. Let's test it out again.
There we go. And let's add
63:23 - something healthy here. Let's
add in a salad, there, we are
63:26 - perfect. Always grab the
opportunity to refactor your
63:29 - code. Well done. I'll see you in
the next one. So up until this
63:36 - point, Flexbox has been making
our lives so much simpler than
63:40 - it could be. It's one of the
best things about CSS for sure.
63:43 - Now, let me introduce you to
another feature of Flexbox. That
63:47 - is just incredible. Let's have a
look at this website right here.
63:49 - So I've got some of my all time
favorite YouTube videos showing
63:53 - right here. There's a total of
12 video thumbnails that are
63:56 - showing here. But the problem is
that these thumbnails are
63:58 - continuing along this horizontal
line, as you can see by
64:02 - scrolling. Now, of course, this
is a horrible user experience.
64:05 - So let's fix this problem by
using something called flex
64:09 - wrap. Now, check this out. So
all I got to do is tell Flexbox
64:13 - pay, take all of the elements
inside of this parent div and
64:17 - wrap it around the max width of
the parent element. Okay, let's
64:21 - do it now. So flex wrap, and
then we'll say yes, please, we
64:25 - do want to wrap it. So let's do
that. And there we go. Isn't
64:28 - that amazing? Do you see how
beautiful that looks? Imagine
64:32 - how much more CSS we would need
to write without flex wrap. Now
64:35 - before we end the scrim let me
show you two more values that
64:38 - you can put right in here. So
the others would be no wrap,
64:42 - which takes you back to the
default. And then there's wrap
64:47 - reverse, which of course
reverses the order. So let's
64:50 - take it back to rap. And there
we go. Beautiful. So here we
64:57 - have one of the most iconic
album art so One of the best
65:00 - bands in history written in HTML
and CSS, of course, now
65:04 - currently, we're using margin
right here in order to create
65:07 - some spacing between the
pictures of the Beatles. This
65:11 - right here. Now that's fine, of
course. But now we know Flexbox,
65:15 - which means that there is a much
cleaner way to achieve the same
65:17 - result. So instead of using the
individual elements here to
65:21 - create a margin, we can instead
say to the parent element that
65:24 - you should create a gap of,
let's say, 10 pixels between all
65:28 - the child elements. Let me show
you. So let's remove this. There
65:32 - we go. And let's go in here and
say, gap. And then how much gap
65:37 - do we want? Let's do 10 pixels.
And there you go. That's all
65:40 - there is. Now let's add some
more gap. So let's do 20 pixels.
65:44 - Now, of course, that's too much,
because we have a max width here
65:47 - of 420. We can increase that to
440, let's say and then we're
65:51 - back here. Perfect. Now what if
you wanted to have a different
65:54 - gap top bottom, then left and
right? Well, you can do that in
65:57 - an easy way here, too. So let's
say go in here. And let's do 10
66:01 - pixels here. So here, you'll see
left, right is 10 pixels, and
66:05 - top bottom is 20 pixels. So you
can control even that, but I'm
66:09 - going to just let it be at 10
pixels. So let's get back to
66:12 - that.
66:18 - Okay,
66:18 - this is where we're going to
take a little pause from working
66:21 - on JavaScript for just a little
bit so that we can add some more
66:24 - CSS. As you can see, the list
items are being displayed like
66:27 - this, which is the default way,
but we want them to be
66:30 - displaying like this. And so
that's your challenge to solve.
66:33 - Now, before I let you work on
this, I gotta mention here that
66:36 - you want to put all of your code
inside of the CSS file. In fact,
66:39 - I've already gone ahead and
added all of this for you. So
66:42 - make sure that you write your
code in between here and here.
66:45 - And there's also a CSS comment
here that includes the
66:48 - background color, the cream
color that you can see here, and
66:51 - also the code for the box
shadows right here. Okay, so
66:54 - this is a big challenge. So
please take your time with this.
66:57 - And of course, if you don't
fully get it, then that's
66:59 - completely fine. The most
important thing is that you try.
67:02 - So pause here and give it a go
by yourself. And I'll be with
67:05 - you in just a little bit. Good
luck.
67:12 - Okay, I
67:13 - hope that went well. Let's have
a look at it together. So what's
67:16 - the first thing that we notice
here? Well, I don't know about
67:19 - you. But I noticed that there
are no bullet points here. We
67:22 - don't have that. So let's get
rid of that. And then of course,
67:25 - the items are laid out next to
each other. So we definitely
67:28 - want to be using Flexbox. And
then we want to use flex wrap to
67:32 - wrap the items around. There is
a little bit of a gap here as
67:35 - well that we want to include.
Okay, let's get started. So I'm
67:39 - going to go inside of the UL
first, and I'm going to use list
67:43 - style type. And I'm going to set
that equal to none. And there we
67:48 - go. Beautiful, all of the
circles are gone. Okay, what's
67:51 - next? I definitely want to get
rid of this space right here. I
67:54 - believe that's the padding.
Let's see. Padding equals zero.
67:58 - Perfect. Okay, next, let's do
display flex. There we go. Very
68:04 - nice. Then let's do flex wrap
and set that equal to wrap.
68:09 - Awesome. Okay, let's keep it
like that for now. And let's go
68:12 - down here now. And I'm going to
uncomment this first. There we
68:16 - go. Very nice. Let's get rid of
this line and add some padding
68:19 - here. How much padding Should we
add? I'm going to try 10 pixels.
68:24 - First. Let's see how that looks.
Looking pretty good. But I think
68:27 - I want to increase it to 15.
Actually, there we go much
68:30 - better. Okay, we also have a
border radius here, of course,
68:34 - like everything else. So let's
go ahead and add that right
68:37 - under here. Border Radius. I
also want to make that eight
68:40 - pixels like the others. So let's
go for eight pixels right there.
68:44 - Now is there anything we're
missing, as you can see right
68:47 - here, the items are kind of
cramped together. So we
68:50 - definitely want to give it some
gap. Let's do gap 10 pixels.
68:55 - Okay, that's pretty good. But
still, we can see that there was
68:57 - a little bit of space right here
on the right side for this Red
69:01 - Bull item. And I want these to
be stretched out as much as
69:04 - possible. We're gonna use flex
grow for this. So we're gonna
69:08 - say flex grow equals one, and
that should fix that perfect. Is
69:14 - there anything else we're
missing here, it's a little bit
69:17 - difficult to see. But you can
see that the text is not quite
69:20 - aligned to the center. Let's fix
that text align center. And you
69:26 - know what, I think this looks
pretty much identical to this
69:31 - now. Awesome. Now there is one
thing that I also want to
69:34 - change, I can see that the font
size right here is smaller than
69:38 - the one up here. I want to see
if it looks better if I change
69:41 - it the same font size of the
rest. Let's try that up here.
69:44 - Let's copy it from here, font
size and explicitly define it up
69:49 - here. So let's set the font size
to 20 pixels. In my opinion,
69:54 - this looks better. Now of course
it's up to you what you like
69:57 - better, feel free to make
changes whenever you see fit.
70:00 - Okay, let's have a final look at
it. Let's run the app. Let's
70:03 - stretch it out a little bit. Oh
my god, this is looking so good.
70:07 - This is genuinely looking like
an app that you would download
70:10 - from the App Store. Is that
crazy? Or am I a little bit
70:13 - delusional? Don't you think this
looks pretty good? Well, that's
70:15 - my opinion. Of course, this
definitely looks pretty sweet.
70:19 - Okay, good job so far. Let's
keep going. Okay, so now our app
70:26 - is really only missing one
feature. And that's the delete
70:29 - feature. So we wanted to make it
so that whenever you press on
70:32 - any one of these items, it is
removed from the cart, meaning
70:36 - it's removed from the database.
Right. Now, in order to do that,
70:40 - we need to understand something
very important in software
70:42 - development. And that's the
concept of a unique ID, let's
70:46 - have a look at our database. So
here we see all of our items
70:49 - listed out here inside of the
shopping list. Notice that each
70:53 - item is listed with a key and a
value exactly the same by the
70:56 - way as in a JavaScript object.
Now, what is this weird thing
71:00 - right here? Well, if you notice,
all of these are different from
71:03 - each other, which means that
it's a unique identifier. Now,
71:06 - why do we even have to have
these in the first place? Well
71:09 - think about it. If you want to
delete a specific item from the
71:12 - database, don't you need to know
exactly which item it is? And
71:15 - then you might think, well,
don't you already have the name
71:18 - of the item right here? Yeah,
sure. But what happens if
71:20 - someone asked the same item
twice the way we've programmed
71:24 - this, that's definitely allowed.
So we need to have a unique
71:27 - identifier. And that is why we
have this ID. Now luckily, we're
71:30 - using Firebase. So we don't need
to worry about creating this ID
71:34 - for ourselves. Firebase does
that automatically. However, we
71:37 - do need to figure out a way to
get the ID somehow inside of our
71:41 - code, because that's the only
way we can tell Firebase to
71:44 - delete an item for us. Okay,
let's go back to the code. All
71:47 - right, I'm going to go inside of
here. And I'm going to use the
71:51 - old console log trick. And I'm
going to say snapshot dot Val.
71:57 - That's what we started off with.
Right? So let's do that. Again.
72:00 - Let's run that and see what we
get. Okay, great. Those are all
72:03 - the items from our database. And
notice here we have both the ID
72:07 - and the items. Okay, so what
we're doing here is that right
72:11 - here in the items array, we're
using Object dot values, to
72:15 - convert those into just the
values. I wonder if there's
72:19 - another method that we can use
on object that gives us both.
72:23 - Can you think of anything? If
you can pause right here and put
72:26 - it in here? I'll be with you in
just a few seconds. Okay, did
72:33 - you remember it? While remember,
we can use values, but we can
72:37 - also use keys. Remember, that
will just give us the IDs. Let's
72:40 - try that by console logging
items array. Let's run that. Now
72:44 - we get only the IDs. But
remember, there was a third one
72:47 - called entries. Let's try that
one. Now. What do we get now?
72:50 - Now we get an array with smaller
arrays inside of it that contain
72:53 - both the ID and the value. This
is perfect for us. Okay, so what
72:57 - do we do now? Well, we want to
access these things right inside
73:01 - of the loop here. So I'm going
to go ahead actually, and do
73:04 - what I always like to do, which
is make a variable here for the
73:08 - current item. And in here, I'm
going to say items array, and
73:13 - then the if element. So we can
use current item here. Okay, so
73:18 - we got the current item. Let's
see what we get. Now. Let's open
73:22 - this up. Ah, do you see? Now
this is getting pretty
73:25 - congested, but we got both the
ID and the value. Okay, this is
73:30 - looking pretty good. Now I have
a challenge for you, because I
73:33 - want you to use current item,
but make two new variables, call
73:37 - it current item ID and current
item value and use current item
73:41 - to set both of them equal to the
correct values. Okay, pause
73:45 - here, try it out for yourself.
And we'll be right back.
73:53 - Okay, I
73:53 - hope that one well, let's do it
together now. Current item ID.
73:59 - And that's going to be current
item. Remember, this is an array
74:02 - with two things inside of it.
What's going to be the ID, well,
74:06 - that's the first one or rather
the zero of one because we're
74:08 - dealing with arrays. So I'm
going to say zero in here.
74:12 - Similarly, we're going to say
current item value. And here
74:16 - we're going to set it equal to
one. Let's try it out. Now. Id
74:20 - first let's see how that looks
run. Do we just get the ID
74:24 - indeed we do. Perfect. Let's do
it for the value now. Run and
74:29 - now we're back to getting the
value only. Perfect. Now we have
74:33 - the information that we need.
Well done. Okay, now we have a
74:39 - little bit of a problem here.
How are we adding a new item to
74:42 - the shopping list element? Well,
currently we're using innerHTML
74:46 - with template strings. And while
that works in a lot of simple
74:50 - cases is not going to work for
us anymore. Why? Because we need
74:54 - to make it so that we can attach
an event listener to all of
74:58 - these items, and we need to do
that so that we can run a
75:01 - function every time the user
clicks on any of these items.
75:05 - And that's just not possible
this way. So what we need is
75:08 - Create Element. And you've
actually already seen this,
75:11 - although very briefly in a
previous scrim. However, in this
75:15 - one, we're going to dive much
deeper into it. Now I gotta give
75:18 - you a little disclaimer here,
create element can be one of
75:21 - those things, that's pretty
confusing to understand, at
75:24 - least in the beginning, so I'm
going to try my best to explain
75:26 - it to you in an intuitive way.
Okay, so as you can probably
75:29 - guess, from the name, Create
Element is a function that lets
75:33 - you well create an element, of
course, but it's a method that
75:36 - needs to be applied to the
document object. So you can say
75:40 - document dot Create Element. And
then you have to make a decision
75:43 - about which element you want to
make, do you want to make an h1,
75:46 - a paragraph tag, a div, you can
make anything. And in our case,
75:50 - we want to make a new list item.
And li That's step one. Step
75:55 - two, is to give your newly
created item, some text content.
75:59 - And in our case, that's going to
be the name of the item.
76:02 - Alright, download step two, the
last step is to place the newly
76:06 - created element into its parent
element. And in our case, that's
76:10 - going to be the shopping list
element, the URL. Okay, so let's
76:14 - go back a little bit and start
with step number one. So I'm
76:17 - going to go down here. And for
now, we're going to just comment
76:20 - out this line. And so the first
thing we need to do is to create
76:23 - a variable, and I'm going to
call it new L. And I'm going to
76:26 - equal that to document dot
Create Element. Okay, inside of
76:32 - here, we got to give it what is
it that we want to make? In our
76:35 - case, we want to make a list
item. That's step one completed.
76:39 - Okay, so what's step two? Well,
that is put some text between
76:43 - the tags, right? So let's go
down here and say, Hey, new L, I
76:47 - want to add some text content to
you. And I want that to be
76:51 - something we'll fix this later.
We'll just put in a string here
76:54 - to test it out first. All right,
what is the last step, the last
76:58 - step is to take this thing that
we just made, and place it
77:01 - inside of the parent element.
And for that, where is our
77:04 - parent element? Well, let's go
up here and take a look. That's
77:08 - going to be our shopping list L
right. So let's copy that. Go
77:13 - down here. And say, start with
that. And then append. We're
77:18 - using a method called append.
What do we want to append? Well,
77:22 - we want to append new L at the
very end. So let's put that in
77:26 - here. And hopefully, when I run
this now in the mini browser,
77:29 - it's going to take away all the
names of the items, and is going
77:32 - to show us a bunch of items that
say something. Let's see if that
77:36 - works. Let's run this now. And
there we go. It works perfect.
77:41 - Okay, now, this is where I want
to give you a challenge, pause
77:44 - here and change the code so that
it actually shows the name of
77:47 - the items rather than something
for everything. So pause here,
77:51 - give it a go. And I'll be right
back.
77:59 - Okay, I hope that
78:00 - went well. So this is how I
think about it. We already have
78:03 - item value here as the
parameter, right. So we can just
78:07 - use this. And we're actually
feeding it up here using the
78:11 - current item values. So that
should give us what we're
78:13 - looking for. So let's just go in
here and say Item Value, just
78:17 - copy it up from here and replace
it down here. And let's now try
78:23 - to run it, see what we get. And
we get all the items. Amazing.
78:27 - Okay, so before we end the
scrim, I do want to do one more
78:30 - thing, because even though we're
getting the value of the items
78:33 - in here, and that's fine. But we
also would like the ID, because
78:38 - remember, we want to later on
make it so that we can delete
78:41 - these items by pressing on them.
And for that we're going to need
78:44 - the ID. So let's do that now. So
how are we supposed to do that
78:47 - now? Well, we are getting item
value here, right? But if you
78:50 - look up here, this is where
we're actually using this
78:52 - function. And we're feeding this
thing to it. Why don't we just
78:56 - feed it the current item, which
contains both pieces of
78:59 - information, right, and then
deal with that down here. Let's
79:02 - do that now. So let's do current
item, put it in here. And then
79:06 - we'll go inside of here. And
we'll say let and then let's do
79:10 - item ID, item, and then zero.
And then we'll say lead again.
79:15 - And then we'll say item value.
And then we'll say item. And
79:19 - then of course we want to get
the first one, right. So we can
79:23 - now delete this. And let's
delete this too. And let's
79:26 - change this to be just item
instead of item value. And I
79:30 - think that should work. Let's
run it now. So this, of course,
79:32 - is still showing the item names,
which is good. Let's change this
79:35 - now to Item ID just to make sure
that that's working to does that
79:39 - work and we get them beautiful,
perfect. So I'm going to just
79:42 - replace it with item value
again. And there we go. Well
79:45 - done. We achieved a lot in the
scrim. I'll see you in the next
79:48 - one. Okay, so how do we go about
deleting items from our Firebase
79:55 - real time database? Let's take a
look at this project that I've
79:58 - got set up here. So here we have
the Scrimba Times, a
80:01 - publication running since 2016.
Which is your one stop shop for
80:05 - Scimba news and beyond? Actually,
I like to go as far as to say
80:09 - that it's the most trusted
publication in tech. But
80:12 - unfortunately, that's not true.
See, with the rise of Scimba,
80:15 - we've been getting a lot more
contributors to the Scimba Times.
80:18 - And that's a good thing, right?
Well, not always, because
80:21 - sometimes we end up publishing
fake news, which, of course, is
80:24 - very bad. And that's not
something we want to stand
80:27 - behind. So in order to combat
this problem, we've hired fake
80:31 - news to leaders, yes, we
actually have to hire people to
80:34 - detect the fake news and delete
it. And so in order for these
80:37 - people to do their jobs, we need
to create the functionality for
80:40 - them. So how would that work?
Exactly. So here, I basically
80:43 - gone ahead and written all of
the code for this, almost all
80:46 - the code and here you can see
we've got some stories, three
80:49 - per row. And so we want to make
it so that these fake news, the
80:52 - leaders can double click any of
these items and delete them from
80:56 - the database. All right, so
where exactly are we supposed to
80:59 - write the code? Let's scroll
down here. And writing here's
81:02 - where we're going to be writing
most of our code. As you can
81:05 - see, we have double click event
right here, we have a function
81:08 - that's going to be executed
anytime any of these are
81:11 - clicked. So what's the first
step? How do we go about doing
81:14 - this? Let's have a look at the
database. Here we have the
81:17 - database with all of the stories
and the IDs for it. In this
81:20 - case, I manually added the IDS
myself just to make it a little
81:23 - bit simpler for us. But it would
work exactly the same with the
81:26 - automatically generated Firebase
IDs. Okay, so if we wanted to
81:30 - tell Firebase, hey, delete this
story right here, we need to
81:34 - tell it delete the story that
has the ID n s zero. That does
81:39 - make sense because it's a unique
ID, right? So let's do the first
81:43 - step, which would just be
literally to console log that
81:46 - ID. Let's do console log. And
where's that ID? Can we see it
81:50 - anywhere? There it is. Story ID,
let's try that. Put this in
81:54 - here, run this. And if we double
clicked any of these, we get the
81:58 - ID perfect. Does it work for all
of them? Looks like it. Amazing.
82:03 - All right. So what's the next
step? Well, the next step is a
82:06 - little bit more tricky, because
in order to delete this story
82:09 - with this ID, we need to give it
the exact location. So it's not
82:14 - just the ID. But the fact that
it's inside of the new stories
82:18 - inside of the database, we need
to give it the full path to
82:21 - that. So remember, references,
the ref function that we use
82:25 - before, that's what we're going
to be using. So let's do that
82:28 - down here. So let's delete this
now. And I'm going to make a
82:30 - variable for this, let's call it
exact location of story in dB,
82:38 - and equal that to be ref first,
and then always, we got to
82:41 - provide it with the database
first. So let's do database. And
82:44 - then this is where we got to
point to the location. So in
82:49 - here, we're going to need the
ID. But before that, we're also
82:52 - going to need this one right
here, the news stories
82:55 - reference. And so let's let's
put that in there. Let's do new
82:58 - stories. And then let's do one
of these IDs. Now, let's just
83:01 - test it out. Now with n s zero,
I see if that works or not, and
83:05 - S zero, okay, is this by itself
going to do anything? No, this
83:09 - is just the location, we
actually got to remove it from
83:12 - the database. And for that, we
need the Remove function, which
83:16 - is fairly simple to use. So
we're just going to go up here
83:19 - and import it from Firebase
first remove, let's go down here
83:22 - again. And we're going to do
remove and we're literally just
83:25 - going to feed it this whole
thing which contains everything
83:28 - that it needs. So at this point,
if we run this now and double
83:31 - click on any of the new stories,
this first story should be
83:34 - deleted. Let's test that out.
Okay, is the first story of fake
83:38 - news scramble gets acquired by
Microsoft for 11 billion. That's
83:42 - definitely fake news. That's way
too little money for scuba. So
83:45 - we're going to delete that
double click and delete it.
83:48 - Perfect. It works. Okay, so
what's the last step now? Well,
83:52 - we're going to make sure that
this ID is just replaced with
83:55 - whatever ID we're going to be
using for that specific news
83:58 - story. So let's use template
strings for this, go down here,
84:01 - make it into a backtick. And
then we're going to say which
84:05 - one do we want to use? We want
to use this ID right. So let's
84:07 - just replace it in there. Okay,
hopefully it works now. So let's
84:11 - run this again and delete all
the fake news. Okay, let's see.
84:14 - What do we have here? 89 year
old becomes oldest scramble
84:18 - student to get hired. That's
definitely not fake news. That's
84:21 - amazing news. scrambler releases
first course entirely made by
84:25 - AI. Definitely fake news. Let's
double click on that. Elon Musk
84:29 - welcome 16th child to the world.
That's not fake news. This one
84:32 - is that fake news now is not
fake news, either. And this is
84:35 - not fake news, either. I think
we're good now. All right, just
84:38 - to recap really quickly, the two
main things that we needed to do
84:41 - was to get the exact location of
the item that we wanted to
84:45 - remove from the database, and
then just feed that information
84:49 - to the Remove Firebase function,
and then it takes care of the
84:51 - rest. And how does it update
instantaneously? Well, remember
84:56 - we're using that on value
function that takes care of that
84:58 - right because deal Eating
something from the database also
85:02 - updates it, which means that on
value gets new information,
85:05 - which it runs. Okay, I hope that
was clear. I'll see you in the
85:08 - next one. All right, this is
exciting because we're finally
85:14 - ready to add the code that
removes items from the database
85:18 - when we click them in the app.
Okay, so we know by now that the
85:21 - key information that we need is
the ID of the item in the
85:24 - database. So let me actually
give you a challenge. Let's
85:27 - scroll down to this function
right here. And right here is
85:31 - where I want you to add an event
listener to new L, so that you
85:34 - can console log the item when
any of these buttons are
85:37 - pressed. That's the first step.
Pause here, try it out for
85:41 - yourself. And I'll be right
back.
85:43 - Good luck. Okay, how
85:48 - did it go? Let's try it
together. So let's start with
85:51 - new L. And then we want to add
event listener. We've done this
85:54 - a million times before. First,
of course, is the event that
85:57 - we're listening for, that's
going to be a click, and then we
86:00 - got to write the function in
here. Let's open that up. And of
86:04 - course, first step is always to
just console log, I personally
86:07 - find that the easiest to start
with. So what did we want to put
86:11 - in here though? The ID of the
item? Do we have that already?
86:16 - Indeed, we do we have it up
here. So let's just copy that
86:18 - and put that in right here. And
let's run this now to test it
86:22 - out. Okay, what do we want to
remove from here? Let's remove
86:26 - the salad. Click, and we got
this console log. Is that the
86:30 - same one? Yep, that's the same
one right here. P and B is what
86:35 - it ended on. So we know that's
right. Perfect. Well done. Okay,
86:38 - what's next. So let's go inside
of here. And this is where I
86:42 - actually want to give you the
second challenge. And that is
86:45 - make a lead variable and call it
exact location of item in dB.
86:51 - And set it equal to ref. That's
the function that we're
86:54 - importing right up here. We've
already used it here before. And
86:58 - so we want to use it again,
because we want to get the exact
87:01 - location of the item before we
can run the Remove function on
87:05 - it. So you want to set it equal
to this. And then first, of
87:08 - course, this database as always,
and then there is something and
87:12 - you are supposed to figure out
what that something is supposed
87:15 - to be. So pause here, try it out
for yourself, and I'll be with
87:19 - you in just a sec. Okay, I hope
that went well, let's do it
87:26 - together. Now, let's go in here
and say exact location of item
87:32 - in dB, set that equal to ref.
And of course, ref always
87:38 - requires you to specify the
database. So let's do database.
87:42 - And then in here, what are we
supposed to put in here? Well,
87:45 - let's take a look at our
database right now. So right now
87:48 - we've specified that this is the
database that we're dealing
87:51 - with. Now what other things that
we need to specify? Well, we
87:55 - first need to say we're inside
of the shopping list. And
87:58 - inside, this is the ID that we
want to take away, or this one,
88:03 - or this one, or whichever one
that we're clicking on, right.
88:06 - So we're going to start with
this first. So let's go in here,
88:10 - and I'm going to use backticks.
Let's start with that. And then
88:14 - do shopping list. And then we
want to do just slash and then
88:18 - this is where the ID goes. Now
do we have the ID again, we do
88:22 - have that because we just used
it right up here. Let's just
88:25 - copy that and put it right in
here course using the dollar
88:28 - sign in here. And there we go. I
think this is going to work. The
88:31 - last thing we got to do is to
actually use the Remove
88:34 - function. And that's where you
come in. Because this is going
88:37 - to be your last challenge for
this scrim use the Remove
88:39 - function to remove the item from
the database, pause here, try it
88:43 - out for yourself. And I'll be
right back. Good luck.
88:51 - Alright,
88:51 - so before we can use this
function, we got to import it
88:53 - from up here. So let's go ahead
and say Remove. And then we'll
88:57 - go down here. And we just got to
call it like this. And all it
89:02 - takes is the exact location of
the item in the database, which
89:05 - we already have. So we're just
going to feed it that
89:07 - information. And that should
take care of it. So let's run
89:10 - this now and test it out. Let's
try to delete something, or
89:13 - should we delete? Let's go ahead
and delete the salad. click and
89:18 - delete it gone. Perfect, great
job. So I don't know if you've
89:26 - noticed, but there is a big bug
that we haven't looked at yet.
89:30 - Try to pause the screen right
here to figure it out. Here's a
89:33 - hint. It has something to do
with the database items. So try
89:38 - to remove the items from the
database. I'll see you soon. So
89:46 - did you spot it? Let's have a
look at it together. So let's
89:49 - start off by deleting the
database items one by one. Okay,
89:55 - we're fine so far. Let's
continue
90:02 - Okay, so now we're down to the
last item. Let's click on it.
90:06 - Uh, ha, we got an error. Let's
have a closer look at that.
90:10 - Okay, let's minimize the minimum
browser, we got a huge warning
90:13 - here. And then it says here
cannot convert undefined or null
90:17 - to object. Hmm, what's going on
here? Let's close the console.
90:21 - And I want you to pause the
scrim right here, again, to try
90:25 - to think about it for yourself.
Before we look at it together.
90:28 - What is really going on here?
Okay, pause here. And I'll see
90:31 - you in just a sec.
90:38 - All right,
90:39 - so we got to do some detective
work here. First of all, which
90:42 - code is being executed whenever
we press the button to delete it
90:45 - from the database? Well, that's,
of course going to be this code
90:48 - right here, right? Remember,
whenever the database has
90:51 - changed, this runs every time
but in this case, did it really
90:55 - run, it gave us an error. And it
did that on the last item.
91:00 - What's so special about that
one, we'll see when we deleted
91:03 - the last item, Red Bull in this
case, with it, we also deleted
91:07 - the shopping list reference. And
when the reference no longer
91:11 - exists, this odd value function
fails, which means that at that
91:15 - point, we don't get back a
snapshot, because no snapshot
91:19 - exists. Okay, so how do we
handle that? Well, I can tell
91:23 - you that you don't need to
stress about this at all,
91:25 - because the awesome people of
Firebase, of course, already
91:28 - thought about this, which is why
they provided us with a method
91:31 - called snapshot dot exists,
which returns a true or false
91:35 - boolean value based on if there
is a snapshot or not. Okay, so
91:39 - armed with this method, I want
to give you a challenge, change
91:42 - the on value code, so that it
uses snapshot dot exists to show
91:46 - the items when there are items
in the database. And if there
91:49 - are no items, it should show the
text, no items here, dot dot dot
91:54 - yet. Okay, pause here, try it
out for yourself. And I'll be
91:58 - with you in just a few moments.
Good luck.
92:06 - Okay, I
92:06 - hope that one, well, let's have
a look at it together. Okay,
92:09 - we're using the snapshot method,
which is returning a true or
92:12 - false value. Whenever I hear
that, I immediately think of an
92:16 - if statement. Let's start with
that. Let's go up here. And
92:19 - let's say snapshot dot exists,
okay, this is going to return us
92:23 - true or false. In the case of
true, that means that there is a
92:27 - snapshot, which means that there
is at least one item in the
92:29 - database. So I'm going to open
this thing up here. And I'm
92:32 - going to put all of this code
inside of there. So let's cut it
92:36 - from here and put it right in
here. Let's make sure that we
92:39 - indented properly. There we go.
Now, the else clause, of course,
92:42 - is going to be when it's false,
which means there are no items
92:46 - in the database. And so in that
case, what do we want to do?
92:49 - Well, we want to show the text,
no items here yet. Okay. So
92:52 - which element is it that we want
to change? Let's go up here is
92:56 - in that shopping list L That's
the one that's the one showing
92:58 - all the elements. So let's just
copy that one and put it right
93:01 - in here. And here, we can just
use innerHTML. That's going to
93:05 - be the easiest. And let's just
say no items here, dot dot dot
93:10 - yet. Okay, let's run this now.
And now it shows this perfect.
93:15 - Now let's test it out by adding
another item here. Let's add
93:18 - some honey. And there we go.
Beautiful. Let's delete it
93:23 - again. And we go back. Perfect,
great job. So we have to once
93:32 - again, take a little pause here
so that I can acknowledge how
93:34 - awesome you are. Seriously,
you've been doing an amazing
93:37 - job. And we're so close to being
done. And I can't wait to see
93:41 - your project when it is done. So
now we only need to add a little
93:44 - bit of CSS to finish our app.
Now, of course, we'll need to do
93:47 - a couple more things before
we're finally done. But as far
93:50 - as the core code for the app is
concerned, this is it. So here's
93:53 - my next challenge for you add
these two hover effects. When
93:56 - you hover over the Add to Cart
button and all the items right
93:59 - here. Another thing is that when
you hover over you see how it
94:02 - turns into a Mickey Mouse
Cursor. Make that happen, too.
94:05 - Now let's have a look at the CSS
file because you're going to
94:08 - need two color hex codes, one
for the add to cart and one for
94:11 - the items. And I've included
both of them here. Now one thing
94:14 - I want to do before I let you
start this challenge is Do you
94:17 - see how these item colors are
black and not dark brown? Let's
94:21 - change that. I forgot to do that
earlier. There we go. Perfect.
94:25 - So pause here and make this
happen. Good luck.
94:33 - Alright, I hope that
94:34 - went well. Let's start with the
first one. So I'm going to copy
94:37 - this thing. I'm going to all the
way down here. And under button.
94:42 - I'm going to say button when
it's the hover state. What do we
94:45 - want to do? We want to change
the background color to this.
94:48 - And then we want to do cursor
pointer as well. Let's see if
94:52 - that works. Hover over and
beautiful works perfectly. Let's
94:57 - do the same thing for the other
one. Copy it From up here, go
95:01 - down to the UL. And Li, this is
the one, but we want to do it
95:06 - when it's hovered. So hover, and
then again, put this in here,
95:11 - and then again, cursor, and
pointer. That should do it.
95:16 - Let's see. And it works amazing,
great job. The deeper you get
95:24 - into development, the more
you'll realize that as a coder,
95:27 - you literally have to think
about everything, even the
95:30 - smallest things. Let me give you
an example. Here, we have a
95:33 - simple project that displays how
many cookies you have given the
95:36 - cookie monster at any given
moment. So let's run this thing.
95:39 - So he starts off with an empty
plate. And in order to give
95:42 - cookies, you just press this
text, here we go, let's give him
95:45 - a couple. See, everything is
fine when you go slow. But what
95:52 - inevitably happens when you have
this over to an actual person is
95:55 - that they start going super
fast. And when you do that, this
95:59 - happens, see, you start
selecting and D selecting the
96:04 - text. And in some cases, you can
even select everything like
96:07 - this. Okay, so how do we fix
this? Well, it turns out that
96:10 - there is a CSS property that
fixes this, let's go over to the
96:14 - CSS file, this property is
called user select. And it's
96:17 - super simple to use, you can
either tell it to select nothing
96:21 - or everything. So let's go
inside of the h1 and tell it to
96:24 - select nothing, let's say user
select and then none. Okay,
96:29 - let's test it out again. Okay,
pressing super fast now see, it
96:35 - is not able to select the text.
Now, here's the thing about user
96:38 - select, you can just have it
inside of the h1, or you can
96:42 - actually put it inside of the
container, or even the HTML in
96:46 - the body. So at this point, you
can still select and deselect
96:49 - the image. So what I normally
like to do is to just put this
96:52 - thing inside of here, and that
takes care of everything. But
96:56 - just so you know, you can narrow
it down to whatever you like.
96:59 - Okay, let's try it out once
more.
97:02 - Beautiful. Okay, time
97:08 - for a little story. And for this
story, we need to get inside of
97:11 - the DeLorean. Let's travel back
to the early 2000s. Those were
97:15 - simpler times, internet adoption
was growing insanely fast. It
97:20 - was an exciting time to be
alive. There was no YouTube,
97:23 - Spotify or Facebook. kind of
missed those times. But what
97:27 - definitely didn't exist back
then was this thing right here?
97:31 - Nope. Back then, if you wanted
to get on the internet, you
97:34 - pretty much could only do it
from a desktop computer laptops
97:38 - existed, but they weren't that
powerful. So for the people
97:41 - making apps and websites, they
knew that their projects would
97:44 - be consumed on one type of
display. Simple right? Now let's
97:48 - get back to our time. How is it
for us now? Well, now we have so
97:52 - many different devices, it's
hard to keep track of all of
97:55 - them. And all of them have
different sizes. See the people
97:58 - that wrote HTML back in the day
didn't think about this. And so
98:02 - what they decided to do is that
if a website would be shown on a
98:05 - smaller screen, they would just
shrink the website to fit the
98:09 - display, like here. And while
this works for monitor displays,
98:13 - it completely breaks down if
you're on a mobile display,
98:16 - because this website will look
like this on a phone. Okay, so
98:19 - how do we fix this? Luckily,
there's a very easy way to fix
98:23 - this, we just need to explicitly
tell the browser not to shrink
98:27 - the website, but rather use the
width of something called the
98:31 - viewport to be the device width
instead. If you'd like to read
98:35 - more about this, feel free to
click on this link. And so there
98:38 - isn't really much for me to show
you in this scrim. All we got to
98:41 - do is go inside of here and
paste in this code. Now I would
98:46 - like to link to this excellent
YouTube video by Kevin Powell.
98:49 - If you want a better
understanding of this, I would
98:51 - recommend you to watch this
video, you can click on this to
98:54 - open it up in a new tab. And so
that's it for this one. Okay,
99:01 - we're in the homestretch. Now in
this one, we want to do two
99:04 - things. Firstly, what can happen
sometimes is that if we press
99:07 - too fast on the screen, we might
accidentally select a text or
99:11 - even the image. Now, this is a
common problem that happens. But
99:15 - luckily, there is a simple fix
for this. In fact, that's my
99:18 - challenge for you make it so
that you can't select anything
99:21 - on the app, pause here, try it
out for yourself, and I'll be
99:24 - right back. Okay, I hope that
went well. I'm gonna go inside
99:32 - of here and just say user,
select None. And there you go.
99:39 - See it removed it from here. So
now you can try as much as you
99:42 - want, but you can't select
anything. Perfect. Okay, what's
99:46 - next? Well, this isn't something
that we're going to be able to
99:48 - recreate in the scrambled mini
browser. But what happens is
99:52 - that unless we add a very
crucial piece of code inside of
99:55 - our head tag, this app is not
going to look very good on a
99:58 - mobile device. It's going to be
Ranking, which is something that
100:01 - we obviously need to fix. Now, I
never seem to remember the exact
100:04 - code for this. So I always
Google it. So let me actually
100:07 - give you a challenge right here.
So the challenge is add that
100:10 - code that makes this app look
proper on a mobile display.
100:14 - Pause here, see if you can
figure it out. And I'll be right
100:17 - with you.
100:23 - Okay, I hope you
100:23 - got that. So actually went on
Google and found the W three
100:27 - schools page for it. And I just
copied the code from there. And
100:30 - I'm going to paste it right in
here. There we go. That's the
100:32 - one well done. I'll see you in
the next one. Have you ever
100:39 - noticed that when you use a
browser, every website has an
100:42 - icon up here? Yeah, well, that's
called a fav icon. And it's
100:46 - definitely something that you
should spend time on adding to
100:49 - your website. Okay, so first,
you got to make sure that you
100:51 - have an icon. This is a cute
image I found that we can use as
100:55 - an example. And an icon in this
case is really just an image.
100:59 - Now do make sure that it's a
square image. And also make sure
101:02 - that it's in a PNG format, I've
included this image for you
101:05 - inside of the assets folder, so
you can try it out for yourself.
101:08 - Now once you've got your image
ready, you want to head over to
101:11 - fab icon.io and press on the PNG
to Ico button, just press this
101:17 - image to get to the website,
then you want to drag and drop
101:20 - your image right here. There we
go. It shows up here, then go
101:23 - ahead and press the Download
button, that's going to download
101:27 - a zip file, which you can unzip,
and there you'll find all of the
101:30 - files you'll need. I've already
gone ahead and added those files
101:34 - to our project here. And now
we're going to need to install
101:36 - this onto our website, which
really just means to copy this
101:40 - code and paste it into the head
tag of our HTML. So go ahead and
101:44 - copy this. And you want to paste
this right inside of the index
101:47 - dot HTML file and put it under
the title tag. Now, technically,
101:54 - as long as you have it inside of
the head tags anywhere is going
101:57 - to be fine. Now, unfortunately,
because of the limitations of
102:00 - Skyrim, but I can't really show
you how this looks in this grim.
102:04 - But if you're doing this
locally, you can preview the
102:06 - website in a browser, and you'll
see the results of it. Okay, now
102:09 - check this out. This service
gives you some extra options. So
102:13 - we have some variations of the
image, you'll notice that we
102:16 - have several image files that
we've downloaded. Now, why is
102:19 - that? Well, this is just so that
the image quality is the best
102:23 - that it can be on different
devices. Okay. And then you
102:26 - might ask yourself, what is this
file right here site dot web
102:30 - manifest? Well, this is the
magical file that's going to let
102:33 - us show our icon on the home
screen of our phones, as if our
102:37 - web app was actually a native
mobile app. But more on that in
102:41 - another scrim. We're getting so
close to finishing this thing.
102:48 - Now, we got to make sure that
this app has an icon, so that we
102:51 - can see it on a tab header in a
browser. But more importantly,
102:55 - so that we can put that icon on
our phone homescreen to launch
102:58 - the app. So this is the image
that we'll be using. And I've
103:01 - actually included this inside of
the assets folder, add to cart
103:04 - dot png, now we're not going to
use that image directly, we're
103:08 - actually going to use the
service fab icon.io to generate
103:12 - all the stuff we need. So open
that up on your side, you're
103:15 - gonna press this image to open
up the webpage, and then press
103:17 - on the PNG to ICAO converter,
then you want to just drag and
103:21 - drop the image here, and then go
ahead and press the Download
103:24 - button, that's going to download
a zip file, which you want to
103:26 - unzip, and you'll find all the
files you will need in there.
103:30 - I've actually already gone ahead
and added those to our project
103:32 - right here. Now the final thing
we need to do is to scroll down
103:36 - a bit on the page and copy this
code right here to install this
103:39 - thing. So let's go ahead and add
that right inside of the head
103:42 - tag, indent that thing, perfect.
Now, because of how scribble
103:46 - works, I can't really show you
how this looks. But you'll see
103:49 - the difference if you're working
locally in your browser. Now you
103:51 - might notice that there is a
file right here as well site dot
103:54 - web manifest. We're going to
talk about that in just a little
103:57 - bit. So remember, when you made
a Chrome extension with ped
104:04 - earlier in this module, remember
there was a manifest.js file?
104:08 - Let's pull that up. Now what
exactly is this thing? Well, in
104:10 - the case of a Chrome extension,
this file tells chrome the
104:14 - information it needs to hook
this program into Chrome. So
104:17 - things like the name, the
version number, the icon, the
104:21 - description. Now all this data
turns into this inside of the
104:25 - Extensions Manager in Chrome.
Now similarly, there is a web
104:28 - manifest file that we can make
when we want to turn our web app
104:32 - into something that looks and
feels like a mobile app. Now the
104:35 - fancy word for this is a PWA, or
a progressive web app. Now let's
104:40 - go into the project to take a
closer look. So here I have a
104:42 - project set up that's called the
cat app. And all it does when
104:46 - you run it is show a random
picture of a cat. And these
104:49 - pictures are actually generated
by an AI so all these pictures
104:52 - are being fetched from this
website called this cat does not
104:55 - exist.com Okay, so on the left
side, I have a site dot web
104:59 - manifest file. out here. Now
look at this, this looks
105:02 - completely messed up. But the
only reason for that is because
105:05 - there's no spacing and no
indentation. So now I actually
105:08 - have a challenge for you pause
the screen right here and add
105:11 - the appropriate spacing and
indentation to make this look
105:15 - more like a JavaScript object,
something that you're used to.
105:18 - Okay, good luck. I'll be right
back. All right, I hope that
105:22 - went well. I'm just going to
paste the solution here. There
105:24 - we go. This looks much better.
Now what do we have going on
105:27 - here. So first, we got the name.
And then we got the short name.
105:30 - Let's go in and say cat app for
both of those cat app. And then
105:35 - here we have the icons, this is
what's going to pop up on our
105:38 - home screen. So these are images
that we already have in our
105:41 - project, of course, generated by
that five icon.io service. And
105:45 - then we have the theme color.
Now this color right here is
105:48 - something that you can control.
And let me show you where that
105:50 - is visible. So that color is
going to be popping up right at
105:53 - the top here. I haven't turned
to red, so it's easily visible.
105:56 - So I like to just set this color
to be the background color that
106:00 - we're using in the app. Okay,
now, what is this background
106:03 - color? Well, this is the color
that's going to be visible
106:05 - before the styles for your web
app have been loaded. So if it
106:09 - takes a while to load them, this
is what's going to be showing,
106:12 - okay, now finally, what is this
display, it's set to stand
106:15 - alone. And so this will make the
app look like a standalone
106:18 - application. So any extra things
that the browser has is going to
106:22 - take that away. So it looks and
feels like a native mobile app.
106:25 - Now there's actually a lot more
to the web manifest file than
106:28 - what I showed you. I can't cover
everything in this scrim, feel
106:32 - free to click on this page right
here and read more about all the
106:35 - things that are possible. But
for our use case, this is
106:37 - plenty. We're finally ready for
the very last step. Can you
106:45 - believe it? You made it here?
One tiny little thing, and we're
106:48 - going to be done with this bad
boy. So exciting. Okay, let's do
106:51 - this. So let's open up the site
web manifest file. And I want to
106:55 - give you a challenge right here,
pause the scrim and fix this
106:58 - thing up. So it looks better.
That means add spacing and
107:01 - indentation. I'll wait for you.
107:08 - Okay,
107:08 - I hope that went well. I'm just
going to paste this in. There we
107:12 - go much better. Let's start
filling in the information here.
107:14 - So the name of course is going
to be Add to Cart. And let's
107:17 - just copy this and paste it
right in here. The icons are
107:21 - already set the theme color we
want to set to the background
107:24 - color here. So let's just fetch
that from the CSS. Let's go here
107:27 - and copy this one right here.
We'll put that in for both theme
107:31 - color. And actually background
color as well. There we go and
107:34 - display. We want to just keep on
stand alone. And we're finally
107:38 - done. Can you believe it? You
just finished building your
107:46 - first app. Oh my God, I hope
you're proud of yourself.
107:51 - Because I certainly am.
Seriously, take a moment and
107:54 - give yourself a pat on the back.
Also, make sure to celebrate
107:58 - this very special moment.
Hopefully you're more excited
108:01 - than this guy. Seriously,
though. Amazing job. Now the
108:04 - only thing that's left for you
to do is to deploy your project
108:07 - using Netlify. And we're going
to do that in the next scrim.
108:10 - But before we go ahead and
deploy the app, I want to take a
108:13 - little pause here to briefly
talk about something very
108:16 - important. And that is that you
should spend a little bit of
108:18 - time personalizing your app,
because otherwise your app is
108:22 - gonna look exactly the same as
mine, and probably the same as a
108:25 - lot of other scoring students.
Now let me show you how easy it
108:28 - can be to give your app a
personal flair. So this is what
108:31 - we have right. Now let's change
the image of the cat. That's
108:34 - looking pretty good. Let's do
another one. Okay, not quite
108:38 - there yet. There we go. That's
the one. Okay, what about the
108:41 - font? Let's change it to another
one. Okay, let's keep going. One
108:45 - more. And there it is. All
right, what about colors? Let's
108:49 - change it up a bit. Okay,
looking pretty good. How about
108:52 - adding a little bit of contrast,
there we go. See how just a few
108:56 - minor changes can make these two
look pretty different. So make
109:00 - sure to personalize your app so
that you really feel that the
109:03 - app is showing who you are. And
I know it takes a little bit of
109:06 - time to do this. But it adds
that little extra you know.
109:13 - Drumroll please, because it's
finally time for us to deploy
109:17 - our app to nullify, let's jump
into it right away. So of
109:21 - course, the first thing we got
to do is to make sure that all
109:23 - of the project files are inside
of a folder on our machine. So
109:28 - if you have been following along
with me on scrim by this entire
109:30 - time, then you want to go ahead
and download the files as a zip
109:34 - and you probably already know
how to do that. But just in case
109:37 - you forgot, you want to press on
this button right here. And then
109:40 - we want to go up here to
download a zip press on that.
109:43 - And there we go. We're
downloading the zip file on our
109:46 - machine, then you of course want
to go ahead and unzip that file
109:49 - on your computer. At which point
you're going to get this folder
109:52 - with a very weird name where all
of your files are now you want
109:55 - to go ahead and rename that to
something like add to cart There
109:59 - we go. Now if you've been
following along on your local
110:02 - machine this entire time, then
of course, you already have a
110:05 - project folder. All right, this
part is done. Now, now we need
110:08 - to head over to nullify, you can
go ahead and press the
110:10 - screenshot if you want to open
up Netlify on your end, okay, so
110:14 - I'm going to quickly go up here
and login, I'm going to use
110:17 - email to log in. But please feel
free to use whichever account is
110:20 - best for you. And for a lot of
you, that's probably going to be
110:23 - your GitHub account. Okay, let's
go ahead and log in. And then
110:26 - you should see something like
this. Now we want to scroll down
110:29 - a little bit until we see this.
Now down here is where it says
110:32 - you can drag and drop your
folder, which is exactly what
110:35 - we're going to be doing. So just
go ahead and drag and drop your
110:38 - folder here. There we go. Now
it's gonna take a couple of
110:41 - seconds, and then boom, it's
done. Now, I want to take a
110:44 - little bit of time to appreciate
this moment, because I've been
110:47 - deploying my projects for a very
long time now. And I remember a
110:51 - time when this whole process
used to take several hours,
110:55 - sometimes even several days. And
we just did all of that with
111:00 - just a simple drag and drop
truly magical. Okay, anyway, now
111:04 - our app is finally deployed. Now
we want to go into the site
111:07 - settings to rename our app. So
just press right here. And then
111:11 - we want to scroll down a little
bit, there we go. And then press
111:14 - change site name. So I'm going
to change it from this very
111:17 - random name to something a
little bit more appropriate.
111:20 - There we go much better, then go
ahead and press save. Perfect.
111:24 - And that's it. Now we can go
ahead and press this URL to open
111:28 - it up in a new tab. Oh, yes,
look at that beauty. That's our
111:33 - app, which is now live for the
entire world, just like that
111:38 - amazing job. Now in the next
screen, we're going to do the
111:41 - very final step, which is to put
this bad boy on our phone
111:45 - homescreens See you in just a
bit is finally time for us to
111:53 - put our beautiful creation on
our precious phone. Okay, let's
111:57 - get right into it. So this scrim
is going to be split into two.
112:01 - First, I'm going to show you the
steps on how to put your app on
112:04 - your phone. If you have an
Android, then we'll do the
112:06 - iPhone. Okay, first thing you
want to do is to open up the
112:09 - default browser on your phone,
which for Android, of course, is
112:13 - Google Chrome. Once you've
opened up Chrome, you want to
112:16 - write down the exact Netlify URL
for your app. There we go. And
112:21 - there it is. Now go ahead and
press this button to open up the
112:24 - menu, then you want to go all
the way down to where it says
112:27 - Add to Homescreen. Press on
that, then it's going to ask you
112:31 - if you want to change the
display name, I don't want to do
112:33 - that. So I'm going to just go
ahead and press Add, and boom,
112:36 - the app is now added to the very
last position of all the apps.
112:40 - So if you have a lot of apps on
your phone, just got to go to
112:43 - the very last page. There it is
right there. Once you found the
112:46 - app, just move it to a more
appropriate position. I'm going
112:49 - to move it to my first screen.
Perfect. Now let's finally open
112:53 - it up. Oh my god, do you see it
looks exactly like a native app.
112:59 - Go ahead and try it out. All
right, let's do it for the Apple
113:02 - people now. So again, we want to
open up the default browser of
113:05 - the system, which in the case of
Apple is Safari, then we want to
113:09 - put in the URL of the app right
here. There we go. And there it
113:13 - is. And then we want to press
this button right here, it's
113:16 - going to open up the menu, we
want to go down to where it says
113:19 - Add to Homescreen. Press on
that. And then it's going to ask
113:22 - us to set the display name of
this, I'm going to just keep it
113:25 - to add to cart, press Add and
boom, there we go. There it is.
113:31 - Okay, now for the moment of
truth. Let's open it up. And
113:34 - there we go. Do you see it looks
and feels exactly like a mobile
113:39 - app. And there you have it, that
was the very last step you made
113:43 - it. You know the best part about
finishing a project being able
113:50 - to share it with the world. And
that's exactly what I want you
113:53 - to do if you're comfortable with
it. Of course. Now there are two
113:56 - platforms that are perfect for
sharing this kind of thing,
113:59 - Twitter and LinkedIn. So the
first thing you need is to get a
114:02 - great screenshot of your app
like this one best to do it from
114:06 - your phone. And if you want to
spend the extra time you can
114:08 - even make a video or a GIF, then
just write a tweet or post about
114:13 - you finishing this course. And
showing off your awesome
114:16 - creation like Brian has done
here with a scrim of project
114:19 - that he finished on LinkedIn.
This one's from James. And this
114:23 - one's from Bianca. This is
Oscars finished app on Twitter.
114:28 - This one's by So Sean. And
here's another one. Now apart
114:32 - from being able to share your
creations with other people, my
114:36 - favorite thing about this is
that you're documenting
114:38 - something that you did in your
life. Imagine how good you're
114:42 - gonna feel looking back at this
in three, five or 10 years,
114:47 - especially compared to what kind
of hardcore stuff you're gonna
114:50 - be working on then. So
definitely share your wins with
114:54 - the world. And remember to tag
me and scrim by in it that way
114:58 - I'm gonna get a sweet
notification And I can give you
115:00 - a like, and a comment to show
you some love. All righty, the
115:04 - very last thing I want to say is
this. If you have any feedback
115:08 - at all for me, then I'd love to
hear it. This is chrimbus first
115:12 - course on Firebase. But we think
it's an awesome technology. And
115:16 - we'd love to create more courses
going forward. So if you have
115:20 - anything at all to share on
that, let me know, the best way
115:23 - to reach me is to tweet at me or
DM me on Twitter. Or you can
115:27 - also send me a message on
LinkedIn. That's all for this
115:30 - one. Thank you so much for
listening.
115:35 - Can you believe it? You did it?
115:38 - You just finished this entire
project? I am so so so happy for
115:42 - you right now. Seriously, do
make sure to do something very
115:46 - nice for yourself after you're
done watching this scrim because
115:49 - what you've just achieved is no
small thing. Amazing, amazing
115:53 - job. Okay, we got to do a little
recap before I let you go. So
115:57 - the first thing we looked at was
import. Now what was that? So we
116:01 - wanted certain functionality
from Firebase, which we just
116:04 - imported in the form of
functions. So these are the
116:07 - things that we imported from
this location. And then here,
116:10 - this is where all of the code
was. And we only got certain
116:13 - things that we needed. And then
we covered the Initialize app
116:16 - function from Firebase, which we
use down here to initialize the
116:20 - app using the database URL. And
that is just so we have an app
116:25 - object to work with in our
project, this is what sets
116:28 - everything up, then we use the
get database function right in
116:32 - here, when we created the
database object using the get
116:35 - database function and fed it the
app object that we just made.
116:39 - This is still part of the setup
that we did. And then we use the
116:42 - reference function. Remember, in
a Firebase real time database,
116:47 - everything is a reference. And
so we needed to make a shopping
116:50 - list reference where all of the
shopping list items would be
116:53 - saved, then we use the push
function from Firebase, which
116:56 - was a super simple function
right here to first say that we
116:59 - wanted to push a new thing at
this reference. And then we just
117:03 - fed it the value. And that was
it. And then we finally came to
117:06 - the magical en value function,
which is where we wrote a lot of
117:10 - the code. So this on value
function just sits here and
117:13 - listens for changes in the
database. And whenever a change
117:16 - happens, it gets a new snapshot,
which it uses to run this code
117:20 - all over again. And so that was
the snapshot, of course. And
117:23 - then we talked a little bit
about IDs, because in software
117:26 - development IDs are super
important. And so as we saw in
117:30 - our real time database, every
single item has to have a unique
117:34 - ID, then using that unique ID,
we could remove a database item,
117:39 - which is what we did right here,
we got the exact location of the
117:43 - item in the database, and then
we just ran the Remove function
117:46 - on it. We also looked at how we
can transform objects into
117:49 - arrays, which is what we needed
to do inside of the on value
117:53 - function, so that we could
actually write a for loop on the
117:56 - array. That is what we did right
up here. And then of course, we
117:59 - used Create Element instead of
innerHTML. Because we realized
118:03 - innerHTML wasn't powerful enough
to do what we wanted it to do,
118:07 - which is why we wrote this
function, where we created a new
118:10 - element, and then we gave it
some text content. And then we
118:14 - made sure that we ran some code
whenever you press on that
118:17 - button, and then we appended it
to the parent element. And then
118:20 - of course, we looked at flex
wrap of Flexbox feature, which
118:24 - let us wrap these elements
around like this. And we also
118:27 - looked at the GAP feature in
Flexbox, that let us very easily
118:30 - create this gap between the
items. Then we used user select
118:34 - to make it so that the user
couldn't unintentionally select
118:37 - parts of the app, which is just
a much better user experience.
118:41 - Then we added a crucial line of
HTML to set the viewport, this
118:44 - one right here, which made it so
that the width of the app would
118:47 - be correct on mobile devices.
Then, of course, we added a five
118:51 - icon using that service fav
icon.io. It added all of these
118:55 - images as well. And then of
course, the final thing was the
118:58 - web application manifest file
right here, which made it
119:02 - possible for us to transform our
web application to look like a
119:06 - native app on our phones. Oh
boy, when you list it out like
119:10 - that it looks like so much
stuff. And so finally, I'd like
119:13 - to say well done on completing
this section.