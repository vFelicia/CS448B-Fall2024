00:00 - hi everyone i'm beau i run the blyle dev
00:02 - channel on youtube and today we're going
00:04 - to be going over how to create a full
00:05 - stack flutter application utilizing
00:07 - firebase authentication and firebase
00:10 - firestore along with some open sourced
00:13 - apis for this project we're going to
00:15 - have four key parts that we're going to
00:17 - be setting up
00:18 - firebase setup
00:19 - flutter setup to integrate with firebase
00:22 - we're going to build our flutter
00:23 - application and last we're going to hook
00:25 - up our apis to our application as well
00:28 - as firestore to our application
00:30 - by the end of this video you should be
00:31 - able to hook up apis into your flutter
00:33 - application and utilize them you should
00:35 - be able to
00:36 - utilize firebase authentication in your
00:39 - app at a more basic level and we should
00:42 - be able to perform crud operations using
00:44 - firestore in your flutter application so
00:46 - those are the main goals that we're
00:47 - going to focus on today to accomplish
00:49 - these goals we're going to be building a
00:51 - cryptocurrency wallet app we're going to
00:53 - be able to add coins and how much of
00:56 - that coin a user has to the wallet we're
00:58 - going to be able to read the current
01:01 - value converted into u.s dollars of that
01:04 - wallet and we're going to allow the
01:05 - users to
01:07 - sell or remove coins from their wallet
01:10 - and this basic functionality is going to
01:11 - allow us to practice using our apis
01:13 - using firestore and using firebase
01:15 - authentication i'd like to thank free
01:17 - code camp for this awesome opportunity
01:19 - make sure to subscribe to their channel
01:20 - below by clicking that subscribe button
01:22 - and if you're interested there'll be a
01:23 - link to my channel in the description as
01:24 - well for this project we're going to be
01:26 - using vs code as our main editor i'm
01:28 - going to assume that you've probably
01:30 - already done a flutter application or
01:31 - two before this video if you haven't
01:33 - that's okay you can follow along and
01:34 - build this out as we go if you're new to
01:36 - flutter development that's okay be sure
01:38 - to check out flutter.dev
01:40 - and then follow their steps for setting
01:42 - up your machine to use flutter
01:45 - in this case we're going to be using vs
01:47 - code and utilizing some of their flutter
01:50 - extensions
01:51 - in our project
01:53 - the key one being awesome flutter
01:56 - flutter
01:58 - and dart language support the first
01:59 - thing we need to do is set up firebase
02:02 - to work with our application but before
02:04 - we can do that we need to create a
02:06 - project first so that we can hook it up
02:08 - to firebase to do this we're going to
02:10 - open up our command prompt in vs code
02:12 - and we're going to select flutter new
02:14 - project
02:15 - for this project we're going to call it
02:17 - crypto
02:20 - wallet
02:23 - and then i'm just going to place it on
02:24 - my desktop
02:26 - once your app's finished building we're
02:27 - going to go over to firebase
02:29 - and you're going to go to
02:30 - firebase.google.com and we're going to
02:32 - click get started
02:33 - and all we're going to do is follow the
02:35 - prompts for creating a new project
02:37 - so i'm going to call my crypto
02:40 - wallet
02:43 - i'm going to enable google analytics
02:47 - select my default analytics account once
02:50 - it's finished building you'll get a page
02:51 - like this and we'll click continue
02:54 - this is your firebase dashboard this is
02:55 - where we're going to manage everything
02:57 - that we're going to be using with
02:58 - firebase from authentication to our
03:00 - firestore hookups and to setting up the
03:02 - connections to our mobile app
03:04 - the first thing we want to do is we want
03:06 - to configure firebase to connect to our
03:08 - flutter application
03:10 - to do this we're going to click on ios
03:13 - there's one field that we need to
03:15 - incorporate in order to hook up our ios
03:17 - side of our app to firebase and that's
03:19 - our bundle identifier to find your
03:21 - bundle identifier you're going to go
03:23 - into your flutter application in xcode
03:26 - if you're developing on a mac you want
03:28 - to make sure you open up xcode
03:30 - we're going to go to our ios folder
03:32 - and we're going to select the white icon
03:35 - runner.xc workspace not work proj
03:40 - i'm going to open it
03:44 - i'm going to click on our runner
03:46 - and under general you're going to see
03:48 - here we have our bundle identifier and
03:50 - we're simply going to copy this
03:54 - and paste it
03:55 - into google alternatively another way to
03:58 - find your bundle identifier is by
04:00 - opening up the ios folder
04:02 - runner.xcodeproject
04:06 - project.pbxproj
04:08 - and then you're going to search for
04:11 - bundle
04:12 - and you're going to see here there's a
04:14 - variable called product bundle
04:16 - identifier
04:17 - and that is the name of the bundle id
04:19 - that you want to use so if you're not
04:21 - using mac or alternatively you just
04:23 - don't want to open xcode you can go to
04:26 - this file and grab the product bundle
04:27 - identifier and use that instead
04:30 - we're going to select register app
04:34 - we're going to download the config file
04:37 - i'm just going to drag it to my desktop
04:40 - next we can skip this step
04:43 - we can skip this step as that is
04:45 - specific to swift
04:47 - and we can skip the verify the next
04:50 - piece we want to do is we want to make
04:51 - sure we add the android side to our app
04:54 - now this is going to be similar but the
04:56 - package name is going to be slightly
04:57 - different
04:58 - so you'll see here they suggest you go
05:00 - to your app level
05:02 - android app
05:03 - build.gradle
05:05 - and right near the top you'll see
05:09 - under default config and application id
05:13 - and this is going to be our package name
05:16 - i'm going to copy that
05:17 - we're going to paste it here
05:20 - register that app
05:24 - download the config file
05:30 - and unlike the ios side we are going to
05:32 - follow the instructions listed in the
05:34 - following extra tasks
05:37 - so the first one it tells us to do is go
05:38 - to our project folders build.gradle file
05:41 - and we are going to add in the following
05:44 - line
05:46 - when it means project level it means the
05:48 - android root folder
05:53 - and we're simply going to add this
05:55 - right here in our dependencies under our
05:57 - build script
05:58 - the next thing we're going to do is
05:59 - we're going to navigate to our app
06:01 - build.gradle
06:05 - and we're going to copy the supply
06:06 - plug-in line
06:13 - and paste it right here with the other
06:14 - apply plug-ins
06:17 - and then we're going to get under
06:19 - dependency
06:20 - we're going to add firebase analytics
06:22 - because we've got that enabled
06:29 - there we go
06:31 - everything's set up for android
06:35 - skip that step
06:37 - and the last thing we want to do
06:39 - is in our project we want to make sure
06:41 - we add in our new google files that we
06:43 - downloaded our config files our one for
06:46 - ios and our one for android
06:48 - for ios what we're going to do
06:50 - is you're going to navigate to your
06:52 - runner folder
06:54 - the same folder where you find your
06:55 - info.plist
06:57 - and that's where we're going to place
06:59 - our file
07:01 - quick side note if you're building on
07:02 - ios and run into an issue where it can't
07:04 - find the google plist file that we
07:06 - recently downloaded from firebase don't
07:08 - worry there's a quick fix to it go into
07:10 - xcode right click on runner click add
07:13 - files to runner and then you're going to
07:16 - want to select the google service info p
07:18 - list that we recently downloaded
07:21 - add it
07:22 - there you go and now you shouldn't get
07:24 - this issue anymore the android google
07:26 - file should be placed right within this
07:27 - app folder
07:32 - okay we have two more very simple steps
07:34 - to follow to finish our firebase setup
07:37 - the first that we want to do is we want
07:38 - to set up authentication
07:40 - for this application
07:42 - we're going to set up a sign in method
07:43 - of email and password
07:46 - and we're just going to check the top
07:47 - box
07:49 - and that's it now we can hook up our app
07:51 - to firebase authentication
07:54 - the next thing we want to do is we want
07:55 - to go to cloud firestore
07:58 - click create database
08:00 - and we're going to start it in test mode
08:02 - what test mode is it's going to allow
08:03 - any read and write abilities to this
08:06 - database but it's going to place a time
08:08 - stamp on it we're going to use this for
08:10 - our testing and once we're ready to
08:12 - deploy into production we're going to
08:14 - change it to production mode and modify
08:16 - the rules
08:18 - next we're going to select a region
08:19 - since i'm on the east coast of the us
08:21 - but i anticipate a lot of west coast
08:22 - users as that's where a lot of family
08:24 - and friends are i'm going to keep it on
08:26 - uscentral and there we have it we've
08:28 - officially set up our firebase console
08:30 - to manage our flutter application the
08:32 - next thing we're going to do is i'm
08:33 - going to quickly clean up the flutter
08:35 - application
08:37 - in our main.dart file i'm going to
08:39 - remove the theme.date the theme data
08:42 - i'm going to simplify this class below
08:45 - the homepage class
08:47 - remove a title from its implementation
08:50 - and then i'm going to clear out most of
08:52 - the contents of the clear state class
08:56 - i'm going to clear out everything within
08:58 - scaffold
09:00 - and only have a body of type container
09:10 - remove this title
09:13 - okay
09:14 - and i'm going to remove this unused
09:17 - method
09:18 - okay i'm officially ready to start my
09:20 - flutter application but the first thing
09:22 - we're going to do is we're going to
09:24 - install the packages necessary to talk
09:26 - with firebase from our flutter
09:27 - application so let's go ahead and do
09:29 - that next the first thing we need to do
09:31 - is we need to go to our pubspec.yaml
09:33 - file
09:34 - and underneath of dependencies
09:37 - this is where we're going to put our
09:41 - flutter fire dependencies
09:44 - the first dependency we want to add is
09:46 - authentication
09:50 - so we're just going to copy
09:52 - straight from the firebase.flutter.dev
09:55 - documentation
09:56 - and we're going to paste it into our app
09:59 - and this will give us the most recent
10:00 - version available on firefighter
10:04 - next up we're going to go down to cloud
10:05 - firestore and do the same thing
10:08 - except we don't need to copy in firebase
10:11 - core as we already did that with
10:12 - authentication
10:18 - okay
10:19 - upon saving
10:21 - vs code should run pubget
10:24 - if not you need to open up your terminal
10:26 - and run flutter pub get that way it
10:28 - imports it into your application and
10:30 - that's it that was the most difficult
10:32 - part about connecting with firebase
10:33 - everything from here on out is going to
10:35 - be a breeze so with that let's go ahead
10:37 - and build out our flutter application
10:39 - the first thing i'm going to do is i'm
10:41 - going to shell out all the files that i
10:43 - know i'm going to need in anticipation
10:45 - of having to create them anyways so
10:46 - let's go ahead and do that
10:48 - i'm going to create a couple folders
10:51 - one called model
10:54 - one that i'm going to call net
10:56 - and the other that i'm going to call ui
10:59 - and i'm going to go ahead and create a
11:00 - file called
11:02 - authentication
11:05 - and what we're going to do here is we're
11:06 - going to have a single file that handles
11:08 - our authentication there'll be two
11:09 - fields there'll be an email field a
11:12 - password field and we'll have both a
11:14 - login and register button so regardless
11:16 - of what the user is intending to do
11:17 - whether sign up or sign in they can do
11:20 - it all from that same page the next two
11:22 - files i know i'm going to need are my
11:23 - flutter fire functions file and my api
11:26 - functions file so i'm going to go ahead
11:28 - and create those in my net folder
11:44 - and lastly i'm going to have one model
11:46 - class at least
11:48 - which is going to contain my coin
11:51 - class
11:54 - for the time being we're only going to
11:56 - mess with our authentication file and
11:58 - we'll come back to these other ones
11:59 - later on
12:00 - we're going to first import
12:02 - material
12:03 - [Applause]
12:05 - and then we're going to create a
12:06 - stateful
12:08 - widget
12:09 - and that's going to be called
12:10 - authentication
12:14 - with a capital
12:18 - a
12:22 - it's important to note that file names
12:24 - are always lowercase letters with
12:26 - underscores in between words
12:28 - and your classes are always
12:31 - uppercase camel case so the first letter
12:34 - in each new word is uppercase and the
12:36 - rest are lower
12:38 - i'm then going to add just a simple
12:40 - container
12:43 - and i'm going to make the container
12:47 - a material
12:48 - okay
12:50 - the next thing i'm going to do is i'm
12:51 - actually going to delete the class from
12:53 - the main file i should have just done
12:54 - that to begin with
12:56 - and instead of my home page being the
12:58 - file that we're going to return
13:00 - we're going to return authentication
13:15 - one more thing that we want to make sure
13:16 - that we incorporate into our application
13:18 - is instantializing our firebase hookup
13:22 - so right at the very start we're going
13:24 - to call await firebase.initialize app
13:27 - and we're going to do this right inside
13:29 - our main
13:32 - we're going to then import
13:35 - firebase core
13:37 - make this main method asynchronous
13:39 - and we're off to the races
13:41 - so we're first going to focus all on the
13:44 - ui of our authentication page so let's
13:46 - go ahead and do that the first thing we
13:48 - want to do is we want to give our
13:50 - container a width of media query
13:57 - dot size dot width
14:02 - and we're going to give it a height
14:06 - of media queried out of context not size
14:08 - to height what this will do is it'll
14:10 - expand the container to fill
14:12 - the screen's max width and max height so
14:15 - it'll fill the entire screen
14:17 - we're then going to add a decoration
14:20 - of type box decoration
14:23 - and this is going to allow us to
14:26 - modify the colors
14:27 - if you want to add bordering to any
14:29 - containers if you want to add any
14:32 - additional styling you'll always use a
14:33 - decoration to do this
14:35 - so i'm going to say colors dot
14:39 - let's do a blue accent for now
14:43 - add a comma for some
14:45 - there we go
14:47 - and we're going to add a child of type
14:49 - text
14:50 - that's just going to say
14:53 - hello world
14:55 - the last thing we're going to do before
14:56 - we start up this app is we are going to
14:58 - add
15:00 - widgetsflutterbinding.ensure initialize
15:02 - this is a method we need to add if we're
15:04 - going to initialize the application in
15:06 - our main method
15:08 - now that all the setup is done we're
15:09 - going to go back to our authentication
15:10 - file and we're going to get to work on
15:13 - our authentication page
15:14 - so the first thing we're going to do is
15:16 - we're going to make this a scaffold that
15:18 - it's going to be returning which takes a
15:20 - type body so we had it as material that
15:22 - was the default that the
15:25 - class builder object created but we want
15:28 - it to be of type scaffold for this root
15:31 - container
15:32 - and then instead of hello world we are
15:35 - going to have a column
15:37 - and the reason for this is we want to
15:39 - display
15:40 - two fields an email form field a
15:43 - password form field and then we want to
15:44 - have two buttons and they're all
15:47 - vertical so there's nothing to the left
15:49 - or right it's just up and down and so a
15:52 - column is going to allow us to place all
15:53 - of those
15:54 - vertically positioned from each other so
15:57 - the first one we have is a text form
15:59 - field
16:02 - and this is going to be for our email
16:04 - we're going to have another text form
16:06 - field
16:07 - for our password we are going to have a
16:11 - let's just do it inside of a container
16:15 - for our buttons
16:17 - okay and we're going to start filling
16:18 - these out so what we need to do is since
16:20 - we're doing a text form field we need to
16:22 - have a controller that can capture the
16:25 - input that the user puts into the form
16:28 - so to do this we need a text editing
16:30 - controller and we're going to call this
16:32 - one
16:33 - email field
16:34 - and it's gonna be equal to a text
16:36 - editing
16:39 - controller
16:41 - and then we're gonna repeat the same
16:42 - thing for password we're just gonna call
16:45 - it password instead of email field
16:47 - so password field and these are going to
16:50 - be the values that we're going to pass
16:52 - to our method when the user clicks login
16:54 - or register
16:56 - the next thing we're going to do is
16:57 - we're going to add these controllers to
16:59 - our text form fields that we just
17:00 - created so for the top one it's the
17:02 - email controller
17:04 - and for the bottom one it's the
17:07 - password
17:10 - the next thing we want to do is we want
17:11 - to make sure the user feels secure when
17:13 - they're entering their password so we
17:14 - don't want to just show the password for
17:15 - anyone to see we just want them to be
17:17 - able to see it one letter at a time and
17:20 - so what we're going to do for that is
17:21 - there's a method here called obscure
17:23 - text it's a it's a property on text form
17:26 - field and it takes in a boolean input so
17:29 - by simply saying true what will happen
17:32 - is when the user's typing in it'll block
17:34 - out all the previously typed characters
17:36 - so that's the kind of action that we
17:37 - want to have
17:39 - and then the last thing we want to do is
17:41 - we want to give these
17:43 - a decoration
17:44 - so i believe text input decoration no
17:49 - input decorate that's the one input
17:51 - decoration
17:54 - and you can see even i struggle with
17:56 - this having done it hundreds of times
17:58 - don't feel bad if you have to google
18:00 - something or if you have to mess around
18:01 - with it a little bit in order to find
18:03 - the field that you're really looking for
18:05 - so for input decoration this is going to
18:07 - allow us to change things such as the
18:09 - hint or the label associated with the
18:11 - feel
18:12 - styling for the input
18:15 - input
18:16 - text form field um it's gonna allow us
18:18 - to manipulate all of these different
18:20 - things so what we're gonna do is we're
18:22 - gonna put a hint text
18:23 - and it'll be something
18:26 - uh let's just say email.com
18:30 - the next thing that we want to change is
18:31 - we want to add a label
18:33 - for label text we'll just call it email
18:39 - and for label style
18:41 - it takes in a text style input
18:44 - and we're going to say colors dot white
18:49 - okay
18:52 - and we're going to do the same thing for
18:53 - hint
18:54 - style we're going to say text style
18:59 - color
19:00 - it's colors dot white
19:03 - okay
19:04 - and by putting a trailing comma like
19:06 - this
19:06 - the dart formatter will format our code
19:08 - for us
19:10 - and i think that's all we want to do for
19:12 - this one so what we're going to do is
19:14 - we're going to actually copy this
19:15 - decoration
19:16 - we're going to come down to password
19:20 - and we're going to paste it and we're
19:21 - just going to replace the label to say
19:24 - password
19:26 - and for this one
19:29 - we're just going to say password for the
19:30 - hint
19:33 - and kind of going back up to the top
19:35 - really quick
19:37 - we've got a background of this light
19:39 - blue we can keep it at that we've made
19:41 - the
19:43 - form fields have a white text so just be
19:46 - aware of the colors you're using we're
19:48 - not going to style this a ton again
19:50 - we're just trying to get some basic
19:51 - functionalities that we can get into the
19:53 - real nitty-gritty of the api methods and
19:55 - working with firestore but this will
19:57 - serve our purpose for now
19:59 - in our containers
20:00 - we need to give them first a decoration
20:03 - and we're gonna give them a box
20:04 - decoration
20:06 - and
20:07 - the reason why we wanted to give them a
20:09 - box decoration is i want to create some
20:11 - white buttons with rounded borders
20:14 - and to do that
20:16 - using a box decoration we can easily say
20:18 - border radius
20:20 - dot circular
20:21 - and give them
20:23 - a nice
20:25 - rounded border
20:28 - okay
20:30 - and then we can say color is equal to
20:32 - colors
20:34 - dot white
20:36 - the last thing we need to do is we need
20:38 - to give it a width
20:40 - which we can say media query
20:45 - dot of
20:46 - context dot size dot width divided by
20:49 - 1.4
20:52 - and again what media query does is it
20:54 - gives us the width of the screen
20:56 - and it allows us to basically say okay
20:59 - no matter what kind of device you're
21:00 - using i want to give back a width based
21:04 - on the size of that device so it'll be
21:07 - unique to each device and this way it'll
21:09 - format nicely no matter what device it's
21:11 - being used on whether it's an ipad or an
21:13 - iphone or a google pixel no matter what
21:16 - kind of device it is it'll format it
21:18 - nicely
21:19 - and then we want to just give it a
21:21 - height
21:23 - of let's just say 40.
21:26 - uh 45 let's do 45
21:29 - and then it's going to have a child of
21:32 - material button
21:34 - which will have an on press method
21:37 - which for now we're going to leave blank
21:39 - and the material button will have a
21:41 - child of type text
21:43 - which will say
21:45 - register we'll put register on top
21:48 - and
21:51 - we are going to actually just copy this
21:53 - container
21:54 - and use it for
21:57 - in and all we need to do is change this
21:59 - to login
22:00 - and we're good to go
22:02 - going back to our main let's click run
22:05 - open up my simulator here so you guys
22:07 - can see
22:08 - we're going to wait for it to build
22:10 - okay once that's built you should get
22:12 - something similar to this screen now the
22:14 - formatting of this is really ugly but
22:16 - you have seen that the padding on the
22:18 - sides of the buttons is about what we
22:20 - wanted
22:21 - so to resolve the issue of everything
22:23 - being pushed right at the top
22:25 - we're going to go to our column
22:27 - and we're going to say main axis
22:29 - alignment
22:31 - dot space between
22:34 - actually let's do space evenly
22:38 - and again we don't care too much about
22:41 - um
22:42 - how things look we're going more for
22:44 - functionality
22:45 - so putting space between it allows for
22:48 - space evenly it puts an equal amount of
22:50 - spacing and padding between each item so
22:53 - we've got email password register button
22:56 - login button
22:57 - okay
22:58 - so what we're going to do is we're going
23:00 - to test this out
23:02 - there we go
23:04 - okay
23:05 - those are working as
23:06 - expected and we are going to go ahead
23:09 - and check
23:11 - okay buttons or function is functioning
23:13 - as expected
23:15 - the next thing we need to do is we need
23:17 - to create our authentication methods to
23:19 - sign a user in and sign user up so we're
23:22 - going to go over to our firebase file
23:25 - so our flutter fire
23:27 - and we're going to create two methods
23:29 - the first one is going to be a future
23:31 - type
23:34 - of void and it's going to be called sign
23:36 - in
23:38 - and that's going to take a string of
23:39 - email
23:40 - and a string a password
23:46 - and the second one is going to be
23:48 - similar
23:50 - it's going to be called
23:52 - register
23:54 - so what we're going to do for our
23:55 - register method is we're going to do a
23:56 - try catch
23:58 - and for the catch i'm actually going to
24:00 - just paste in
24:02 - this exception handling for firebase
24:06 - so you'll see here firebase auth
24:07 - exception quick fix
24:10 - import that okay to put a space between
24:13 - these methods for clarity in this try
24:15 - statement we're going to say our wait
24:18 - firebase auth
24:19 - dot instance
24:21 - dot create user with email and password
24:24 - to which we're gonna pass in our email
24:27 - oh my goodness and we're gonna pass in
24:30 - our password here
24:33 - okay
24:35 - so let's go over what's going on right
24:37 - here
24:38 - so we're going to create an instance of
24:41 - firebase authentication
24:43 - and this has a bunch of different
24:44 - methods that we can access and we can
24:46 - utilize such as signing the user in
24:49 - verifying email there's a lot of
24:51 - different methods associated with
24:53 - firebase authentication the one we are
24:55 - interested in however is creating a user
24:58 - with an email and password as that is
25:00 - the method that we set up on firebase
25:03 - and all we have to do is pass an email
25:05 - password if it's successful
25:08 - things will go on it'll complete and we
25:11 - can enter the application just fine
25:13 - if however it throws an error
25:16 - then we know we don't want to route the
25:18 - user
25:19 - and it'll throw one of these exceptions
25:21 - right here it'll just print it to the
25:23 - console
25:24 - so what we're going to do is we're
25:25 - actually going to change this to a type
25:27 - of string response actually let's change
25:29 - it to a bool
25:31 - and what we'll do
25:32 - is if
25:34 - it's successful
25:35 - we can return true
25:38 - and if it's unsuccessful we'll just
25:40 - return false
25:42 - so we'll just say
25:45 - return false
25:48 - and we'll say
25:50 - return false after it prints out those
25:52 - logs
25:54 - now ideally we'll we would handle these
25:56 - exceptions and display the validation
25:58 - error that's occurring and in an even
26:00 - more ideal situation you would probably
26:02 - use the provider package or some other
26:04 - kind of state management to
26:07 - set up your authentication in a very
26:08 - smooth clean way if you were to publish
26:10 - this app
26:12 - this will work for our purposes it's
26:13 - totally fine nothing's going to break
26:15 - it'll serve our purpose so we're going
26:16 - to continue with this
26:18 - and the way that this is going to work
26:20 - is we are simply going to say
26:22 - when the user registers so that's this
26:24 - one
26:26 - let me put a comma after here for some
26:28 - formatting clarity
26:30 - we are going to make this an
26:33 - asynchronous method
26:35 - and we are going to say
26:43 - should navigate it's equal to await
26:47 - register
26:49 - and we're going to pass to it our email
26:52 - field
26:53 - dot text
26:55 - and our password field
26:57 - dot text
26:59 - and it's probably going to prompt us to
27:00 - import that one file
27:05 - okay
27:06 - and then what we're going to say is
27:07 - we're going to say if
27:10 - should navigate
27:15 - navigate which we'll get to here in a
27:17 - minute
27:18 - else actually we don't even need an else
27:21 - um for for now nothing will happen if
27:24 - you press it we'll just say nothing
27:25 - happens
27:27 - and we're going to just copy this
27:29 - because we're going to be doing
27:29 - something similar
27:31 - with our login
27:33 - so in login we're going to do the same
27:35 - thing except it will be
27:37 - sign in
27:40 - and this will be asynchronous as well
27:43 - and going back to our flutter file file
27:46 - we're going to change this to a type of
27:48 - boolean for sign in
27:50 - and there we go that's resolved now we
27:52 - still need to build out the sign in
27:54 - method so let's go ahead and do that
27:56 - again we're going to do a try catch
27:58 - statement and in this one i'm just going
28:00 - to put catch
28:01 - e for error
28:03 - and we're going to say print e
28:06 - return false
28:08 - if it's unsuccessful
28:10 - and we're going to try
28:12 - to do a wait firebase auth
28:15 - instance
28:17 - in with email and password
28:21 - and then we have our email
28:24 - and we have our password
28:27 - if this feels like i'm going too fast
28:30 - feel free to pause slow down or even
28:33 - check out the code
28:34 - i always put this code public on my
28:37 - github page and so if you'd like to
28:39 - check that out as well so you can follow
28:40 - along better by all means please do that
28:45 - and it's still upset here because we
28:48 - haven't put a return statement for
28:50 - inside the try
28:52 - so if it successfully hits this line
28:55 - that means no error was thrown when it
28:57 - signed the user up therefore we can
28:59 - return true
29:00 - and let the authentication page know hey
29:04 - you're good to go
29:06 - now that we've shelled out our
29:07 - authentication page let's create one
29:09 - more new view that we're going to use
29:11 - after authentication
29:13 - which we're just going to call
29:14 - home view
29:16 - and i'm going to make this a
29:19 - stateful widget
29:22 - called home view
29:24 - for child i'll just do a text
29:27 - with
29:28 - home view
29:32 - as that text we're going to need to
29:34 - import material
29:36 - there we go
29:40 - going to close that out
29:41 - i'm going to remove these files that
29:43 - we're not using and we're going to focus
29:45 - purely on the authentication routing to
29:47 - the home view so what we're going to do
29:49 - is we're going to say navigator dot push
29:52 - and this is going to take two parameters
29:54 - one of context and the other of material
29:58 - page route
30:02 - material page route
30:04 - has a builder method we're going to be
30:06 - using
30:08 - i'm going to say context
30:10 - and then we're going to say
30:12 - home view
30:14 - that is where we want to go
30:17 - okay
30:21 - add in home view
30:23 - let's add on some trailing commas here
30:26 - for formatting sake
30:30 - okay
30:31 - and i'm going to copy this
30:32 - navigator.push method i'm going to place
30:35 - it under register as well
30:37 - so if we successfully registered the
30:39 - user or log them in we should push
30:42 - and display our new page that we want to
30:45 - go to
30:46 - and what home view is going to be is
30:48 - it's going to be where we contain all of
30:50 - our methods for adding coins removing
30:53 - coins and viewing the current value of
30:55 - our coins going to start it up so we can
30:57 - see if it's working and we can test with
30:59 - firebase
31:00 - so let's go ahead and see if this works
31:02 - and if we have time we'll come back to
31:04 - this and we will make it a little bit
31:06 - better a little bit cleaner looking
31:08 - so i'm going to type in an email i'm
31:10 - going to give it a very simple password
31:13 - i'm going to say register and we've
31:14 - successfully gone into our home view now
31:17 - you may be wondering why is it a black
31:19 - screen with these double underlines and
31:22 - the reason for that is we currently are
31:24 - returning a type of container
31:26 - what we want to do is make this a type
31:28 - material
31:30 - i'm going to hot reload that page and
31:32 - now you'll see that we have a white
31:33 - background like we're expecting
31:35 - and the home view in the top left corner
31:38 - and actually what we're going to do is
31:40 - we're going to make this instead of
31:41 - material widget let's make it a scaffold
31:43 - widget
31:44 - and the reason for this is we want to
31:46 - use a floating action button to show the
31:49 - add button and scaffold has a nice
31:52 - built-in property
31:54 - for
31:55 - floating action buttons we're going to
31:57 - do that instead
31:58 - and in place of the body we're going to
32:00 - place a container
32:03 - let's give the container a width of
32:05 - media query
32:09 - dot of context
32:12 - dot size that size.width we want it to
32:15 - fill the space of the entire screen
32:17 - and for height we are going to do the
32:19 - same but instead of width
32:22 - i'm going to say dot height
32:26 - and let's go ahead and give it a
32:28 - decoration
32:30 - box decoration
32:32 - and let's do color colors dot white
32:36 - and then for child we can do our text
32:41 - hello world
32:44 - so before we go ahead and create the add
32:47 - and remove methods to connect to
32:49 - firestore let's go ahead and show out
32:51 - the ui for our home view
32:53 - so in place of this text widget what
32:56 - we're instead going to do is we're going
32:57 - to create a stream builder widget
33:02 - and stream builders have two parts the
33:04 - stream and what you want to do with the
33:06 - data that you get from the stream so to
33:08 - set up the stream we're going to say
33:10 - stream
33:11 - and then we're going to say firebase
33:13 - firestore
33:16 - dot instance
33:18 - dot collection
33:20 - and what we're doing right now is we're
33:22 - creating a path to the specific
33:24 - collection that we want to be listening
33:26 - to and watching
33:27 - and so we're creating a path to that and
33:29 - setting it as our stream
33:31 - users.doc
33:33 - the name of the document that we want to
33:35 - reference
33:36 - is
33:38 - firebaseauth.instance.currentuser.uid
33:47 - and then it's going to be
33:49 - a collection under that user called
33:52 - coins
33:53 - and then we say dot snapshots
33:58 - okay
33:59 - scrolling back to the left
34:01 - okay so this is the stream that we have
34:03 - set up we're basically going to tell the
34:05 - user to be or tell the stream builder to
34:08 - be looking at
34:09 - the user dock of the currently
34:11 - authenticated user
34:13 - and then to check out any documents
34:15 - under the collection coins
34:18 - and that's where we're going to be
34:19 - storing all the coins that the user has
34:22 - and so what we're trying to do with the
34:23 - stream builder is display a list of all
34:26 - the different coins that the user has
34:28 - and the most recent pricing and value of
34:32 - the coins that that user has and so the
34:35 - next part that we're going to do
34:37 - is we're going to add our builder aspect
34:40 - and the builder is going to have a
34:41 - couple of variables it's going to have a
34:43 - build context
34:46 - of context
34:47 - and we're going to have an asynchronous
34:50 - snapshot
34:52 - of type query snapshot
34:59 - called snapshot
35:03 - okay
35:06 - and let's see did i spell this right
35:08 - async snapshot
35:14 - oh i missed an s that's why it was not
35:17 - working for me it's a little confused
35:18 - there for a minute
35:20 - okay so these are the two arguments that
35:22 - it's taking
35:23 - and what we're going to do is we're
35:24 - going to say if
35:26 - not snapshot.hasdata
35:30 - return
35:33 - centered
35:35 - a
35:36 - circular progress indicator
35:41 - so what this will do
35:43 - is in the case that let me put comma
35:45 - here for formatting in the case that
35:48 - it is still trying to read in the data
35:52 - or it's been unable to process it quite
35:55 - yet it hasn't quite gotten the data it
35:58 - is going to return a circular progress
36:00 - indicator which will just keep on
36:01 - spinning until it gets data
36:03 - then what we're going to do is outside
36:05 - of this if statement we're going to have
36:07 - a list view that we're going to render
36:09 - that displays all the data because if
36:11 - we've passed over this if statement we
36:13 - know that the snapshot does have data so
36:16 - then we can do something with it so
36:18 - we're going to say return list view
36:24 - and the list view is going to have
36:26 - children
36:27 - of type snapshots
36:30 - dot data
36:33 - dot docs
36:36 - dot map
36:38 - and we're going to map those to a
36:40 - variable called document
36:43 - okay
36:47 - we're almost there
36:49 - and after it we want to say dot to list
36:52 - so we're going to list them out
36:56 - okay
36:57 - yes
36:59 - and then what we're going to do is
37:00 - inside of here we're going to say return
37:03 - container
37:06 - and the container is going to have
37:09 - let's say a row element
37:12 - or a row widget
37:13 - and it's gonna have two children
37:15 - we're gonna have um
37:19 - coin
37:20 - we'll call it coin name
37:23 - and then for the second one
37:27 - we'll call it
37:28 - um
37:34 - amount owned
37:37 - and this may all seem a little confusing
37:39 - at first but here in a second it's all
37:41 - going to come together and make sense
37:43 - and we're going to give this row
37:45 - a main axis alignment
37:48 - of let's do space evenly
37:52 - okay
37:53 - so let's discuss what's going on here
37:56 - so we've already talked about how if we
37:57 - passed over this if statement that means
37:59 - we have data so what we're doing is with
38:01 - that data we are taking that data
38:04 - and what it is is it's a list of
38:06 - documents found in firestore
38:08 - so what we're going to do is we're going
38:09 - to map them out and we're basically
38:11 - going to have this list view iterate
38:12 - through each document and with each
38:15 - document we're going to create and
38:16 - return a container
38:18 - and what we're going to do here
38:20 - is we're going to display right here
38:22 - we'll do it right now so we can see this
38:26 - so we're going to do some string
38:27 - interpolation here
38:29 - and we're going to say
38:31 - document
38:32 - dot id
38:34 - and the reason i'm saying this is
38:36 - because we're going to store the name of
38:39 - the coin
38:40 - in the id of the document so if you
38:42 - remember us talking about this we're
38:44 - going to limit how many types of coins
38:46 - the user can actually utilize
38:48 - and so because of this we're just going
38:51 - to store
38:52 - the name of the the
38:54 - name of the coin that the user has as
38:56 - the identifying value of the document
38:59 - and then what we're going to do here
39:01 - this is going to be a little bit more
39:02 - complex because what we have to do under
39:04 - amount owned is we need to take the so
39:08 - there's a value that we're going to be
39:09 - storing
39:11 - it'll be document.data
39:14 - and then it's going to be called
39:17 - amount
39:18 - but that's not the only value that we
39:21 - need to display here we need to multiply
39:23 - this by the current price
39:25 - of the coin on the market and so we're
39:28 - going to have to create we'll probably
39:30 - do it in
39:32 - the
39:33 - on inits
39:34 - state class
39:36 - on a net state method
39:38 - in this class
39:40 - but we're gonna have to fetch the
39:42 - current price of each coin
39:44 - and then what we'll do here is we'll
39:45 - basically say okay take the amount of
39:47 - that coin they have so let's say they
39:49 - have one tether coin
39:51 - and let's say tether is worth five
39:53 - dollars i believe it's worth one but for
39:55 - this example we'll say five
39:57 - we don't wanna display one here we wanna
39:59 - display five dollars because that's how
40:01 - much that user owns of tether
40:03 - so what we're gonna need to do is we're
40:05 - gonna need to have some business logic
40:07 - and a fun activity if you feel like this
40:09 - isn't complex enough for you or you want
40:11 - to take it a step further
40:13 - rework this whole project but utilize
40:16 - block provider
40:18 - river pods utilize some other kind of
40:20 - state management process so that you can
40:22 - perform the business logic in a much
40:24 - cleaner fashion we're going to do it
40:26 - here but it's going to be pretty
40:27 - rudimentary just so we can show how to
40:30 - access apis how to interact with
40:32 - firestore that's our main focus but if
40:34 - you want to challenge yourself and take
40:36 - this a step further try to implement
40:38 - some state management
40:39 - a more effective cleaner solution estate
40:41 - management into your example
40:44 - that's not the focus of this video
40:45 - however so we're gonna
40:47 - go past that
40:48 - so this is the general idea for now i'm
40:51 - going to keep it as this
40:53 - remember we said we're going to work out
40:55 - the ui first and then we'll come back to
40:57 - hooking everything up to firestore into
40:59 - the api so let's leave it like that for
41:02 - now
41:03 - and the next thing we need to do
41:05 - is let's find our scaffold
41:08 - let's see here
41:09 - here's our scaffold
41:11 - so we want to add a floating action
41:13 - button
41:14 - and what the floating action button is
41:15 - going to be
41:16 - is it's going to route us to a new page
41:18 - where the user can add in new coins
41:20 - and the floating action button
41:22 - is going to basically be our clean
41:25 - simple way of the user adding additional
41:27 - coins to
41:29 - the list
41:30 - and the reason why going back to the
41:32 - stream builder that we want to utilize
41:34 - the stream builder is that when we do an
41:37 - action like adding in a new value
41:40 - the stream builder will pick up the
41:41 - changes live from firestore and
41:43 - immediately render them
41:46 - in the view so we don't have to
41:49 - constantly be checking hey do you have
41:50 - more data hey do you have more data hey
41:51 - do you have more data the stream's just
41:53 - going to say hey i noticed a change in
41:55 - firestore let's update the ui so that's
41:58 - why we're doing a stream builder here
42:00 - okay for the floating action button
42:01 - we're gonna have two bits we're gonna
42:03 - have so let's create the floating action
42:05 - button
42:07 - we need to have an on press method
42:09 - which is where we're gonna route to that
42:11 - new file which we're gonna call add view
42:14 - and that's going to have our um
42:17 - our
42:18 - drop down with the different options of
42:20 - coins you can add and a form field where
42:23 - they can add in the
42:25 - number of coins that they want to add in
42:27 - and then we'll have a submit button so
42:30 - that's what's going to go in the
42:31 - unpressed and so let's actually work
42:33 - that out right now
42:34 - but we're going to say navigator
42:36 - dot push
42:39 - and it's going to take in a context and
42:40 - material
42:42 - page route and material page route has a
42:46 - builder
42:49 - that has a context
42:52 - which then calls our ad view
42:55 - unfortunately though we have not yet
42:59 - created the ad view class
43:02 - so it may not like this
43:04 - so what we need to do is we need to go
43:06 - here to our ad view
43:07 - and we need to say
43:10 - stateful widget
43:11 - and we're going to call it add view
43:16 - and for now it's just going to display a
43:18 - text
43:21 - add view we will come back to this next
43:24 - and we will be
43:25 - modifying this and i'm going to replace
43:27 - that container with the material widget
43:30 - okay going back to our home view it's no
43:33 - longer getting upset about that so our
43:35 - on pressed is good to go so now all we
43:37 - have to do is customize what is within
43:40 - the floating action button that the user
43:41 - sees in our case we want just a simple
43:43 - plus button that's kind of the uniform
43:45 - add button so we're going to go ahead
43:48 - and say
43:50 - child is equal to icon
43:53 - we can say icons
43:56 - dot add
43:58 - color of the icon will be white
44:02 - and let's give it a background color
44:05 - of blue
44:09 - okay
44:10 - i believe that's all we want to do there
44:12 - okay
44:14 - so this is all looking good
44:17 - we haven't quite hooked up our api
44:18 - method yet remember we're working out
44:20 - the ui first and then we'll go to that
44:22 - let's go over to our ad view and let's
44:24 - just shell out this ad view really
44:26 - quickly
44:27 - so what we're going to do with in the ad
44:28 - view is there's a couple of
44:31 - state variables that we need to
44:32 - establish
44:33 - we need to establish the list of
44:35 - different options that the user can
44:36 - select from and we need to create a
44:39 - string variable that's going to be equal
44:41 - to the value that the user has selected
44:43 - in addition to that we're going to need
44:45 - a text editing controller
44:47 - to be
44:48 - listening to and to capture the text
44:50 - input that the user puts for their
44:52 - number
44:53 - so what we're going to do here
44:55 - is in place of this text we're going to
44:56 - have a column
44:58 - okay
45:00 - that's our base widget that we're
45:01 - working with
45:02 - and we're going to have three elements
45:04 - we're going to have our drop down button
45:05 - our container
45:07 - um that is our input container and then
45:09 - we're gonna have a button and the
45:11 - button's really easy because we've
45:13 - already created a clean button on our
45:14 - authentication page for login so we'll
45:17 - probably just copy that button over and
45:19 - save us a lot of time
45:21 - but let's go ahead and work on the drop
45:22 - down button first
45:24 - the first thing we need to do before we
45:25 - can create that widget is we need to
45:27 - create
45:28 - the list of strings
45:31 - that we want to display so i'm going to
45:33 - call this coins
45:35 - and i'm going to set it equal to
45:38 - a list of three coins we're going to
45:40 - have bitcoin
45:41 - we're going to have tether
45:44 - and let's have uh
45:47 - ethereum there we go
45:50 - so these are our coins
45:52 - we're then gonna have a drop down value
45:56 - that's equal to bitcoin we're just to
45:59 - default it to bitcoin first one in the
46:01 - list
46:02 - now let's go down oh let's do one more
46:04 - thing i'm sorry
46:05 - text editing controller
46:08 - we'll call this
46:11 - a mount controller
46:16 - text editing controller just default it
46:18 - to that
46:19 - okay now we can add in our drop down
46:21 - button
46:22 - so let's go drop down
46:25 - button
46:28 - and the drop down button has a couple of
46:29 - elements we have our value which is
46:31 - going to be set to our drop down value
46:34 - and what this will do is whenever the
46:35 - user selects a new value in the drop
46:36 - down it will set well
46:39 - we are going to set the value of this
46:42 - drop-down value variable to the newest
46:45 - selected value which will in turn update
46:48 - the displayed value on that drop-down
46:52 - okay the next thing we need to do is we
46:54 - need to have our orange change method
46:57 - so unchanged has a value
47:00 - oops
47:03 - so what we want to do here is we want to
47:05 - say
47:06 - her let's actually
47:09 - let's specify it's a string
47:11 - what we want to do here is we want to
47:12 - basically just do a set state so we say
47:15 - set state
47:16 - and we want to set drop down value
47:20 - is equal to
47:21 - value
47:22 - and like we just mentioned
47:24 - we're going to replace the value of drop
47:27 - down value with the recently selected
47:29 - one and that'll in turn update our drop
47:32 - down button
47:34 - that's our unchanged now the only thing
47:36 - left is our items field
47:38 - so we've already listed out our items
47:40 - you see here it's expecting a list of
47:42 - drop down menu items so what we're going
47:45 - to do here is we're going to do coins
47:47 - which is the name of the list of
47:49 - different available coins that we
47:50 - provided then we're going to say dot map
47:54 - and we're going to say drop down
47:57 - menu
47:59 - item
48:01 - and it's drop down menu item of type
48:04 - string
48:05 - so we're going to add on that
48:07 - close the bracket
48:10 - then we're going to have a method in
48:11 - here that has an input of type string
48:14 - value
48:18 - okay
48:21 - we've got to be very careful with our
48:22 - commas
48:23 - and our closing brackets and make sure
48:25 - everything's working well
48:27 - okay
48:29 - and then what we're going to do
48:31 - and this isn't
48:32 - oh
48:33 - that needs to be a lowercase okay
48:36 - then what we're going to do in here is
48:37 - we're going to say return
48:39 - drop-down
48:42 - menu item
48:44 - type string
48:46 - and it's gonna have two variables we
48:48 - have our value
48:52 - and we have our child
48:55 - which we're just gonna keep it simple
48:57 - and just do text
48:59 - and display value for that text
49:03 - and close that with a semicolon
49:06 - i believe that's it
49:08 - we're going to test it here in a bit and
49:10 - see for sure if we got that right
49:12 - but
49:13 - so what we're doing is we're mapping out
49:14 - the different values in our list
49:16 - for each value we're creating a drop
49:18 - down menu item and the drop down menu
49:21 - item we can customize it however we want
49:23 - but in our case we're just going to keep
49:24 - it a simple text that displays the value
49:27 - that we're looking at so it'll say
49:29 - bitcoin
49:30 - tether and ethereum just a simple list
49:32 - with text fields
49:34 - or not fields they're just text
49:38 - text widgets
49:40 - okay
49:41 - so that's all i want for the drop down
49:42 - button
49:44 - the next thing is pretty simple we've
49:45 - done it already before we're going to do
49:47 - a text
49:48 - form field
49:50 - now we're going to constrain this one to
49:52 - a container that way we can
49:55 - if you remember
49:57 - when we did our first one on our
49:59 - authentication page
50:01 - we
50:02 - haven't put any padding on it yet and so
50:04 - it goes edge to edge and it looks a
50:06 - little funky so we're going to change
50:08 - that for this one and we're going to
50:10 - give it a width
50:12 - and we're going to say media query
50:14 - dot of context
50:18 - dot size dot width divided by 1.3
50:22 - and then we'll give a child text form
50:24 - field
50:26 - in that text form field we have our
50:28 - controller already set up
50:30 - which is a mount controller perfect
50:33 - we're going to give it a decoration
50:36 - of type
50:37 - input decoration
50:39 - and the reason for that is that we can
50:41 - give it a label
50:42 - and the label is going to say
50:45 - um
50:47 - how much of this coin
50:52 - let's keep it simple coin amount
50:56 - and
50:57 - i won't mess with the styling we'll just
50:59 - keep it simple on this one if you'd like
51:00 - to spruce up yourself have at it be a
51:03 - great practice in working on your
51:04 - styling skills and your
51:07 - widget formatting skills
51:10 - okay
51:11 - and i think that's all we want to do
51:14 - be really simple
51:16 - maybe we'll add a keyboard
51:19 - text input type dot
51:23 - number with options
51:27 - hmm
51:28 - let's do
51:29 - actually i'm going to keep it text
51:32 - i can't remember if number allows you to
51:34 - do
51:35 - decimals or not i think it might
51:38 - restrict it kind of like a phone number
51:40 - so we're going to just keep it as
51:43 - and actually let's just remove that
51:45 - entirely we don't really care for that
51:46 - right now maybe we'll go back and style
51:48 - that a little bit more later
51:50 - and as i mentioned
51:52 - in our authentication page we've already
51:54 - created a button
51:55 - so let's take this material button here
52:00 - whoa okay
52:03 - oops too much
52:09 - there we go
52:11 - copy that
52:13 - exit out of that close that guy
52:16 - paste
52:17 - instead of register we're going to say
52:19 - add
52:21 - and in this
52:26 - this is where we're going to call our
52:28 - firestore method for adding
52:31 - but we haven't set that up yet so we're
52:33 - not gonna
52:34 - worry about that quite yet
52:36 - okay
52:37 - so we've got our three fields our drop
52:39 - down our coin amount and our
52:42 - button for adding
52:44 - and after this we need to say
52:46 - navigator.ofcontext.pop
52:52 - and what that'll do is it'll
52:54 - remove
52:56 - this
52:57 - material widget
52:59 - from the screen and bring us back to the
53:01 - original screen that we were on which is
53:02 - home view
53:04 - okay i'm going to start this up and
53:07 - let's check it out
53:11 - okay so it's built
53:13 - and let's go ahead and log in
53:17 - and we're going to come back to this i
53:19 - don't like the styling whatsoever too
53:21 - spaced out not enough padding
53:23 - this text the black when everything else
53:26 - is white it's a little funky so we're
53:28 - going to come back to this as soon as we
53:29 - finish testing and getting this right
53:31 - and clean this up just a little bit
53:34 - log in
53:35 - okay this looks good there's nothing to
53:37 - display so i'm not very surprised
53:39 - we'll have to check it out once we're
53:40 - starting working with data
53:42 - and maybe we'll have to modify it a
53:43 - little bit and clean it up but for now
53:45 - this is great we've got our floating
53:47 - action button let's see if it navigates
53:49 - us
53:50 - okay and we're throwing an error type
53:52 - maps list iterable
53:54 - is not a subtype of type list
53:58 - okay so
54:00 - that'd be here in our ad view
54:02 - and i'm assuming it's this method right
54:05 - here
54:08 - ah
54:10 - we are missing dot two list
54:13 - let's go get ahead and give this a hard
54:15 - restart
54:20 - log in one more time
54:22 - and let's see if it works this time
54:24 - around
54:25 - perfect okay and i'm just realizing we
54:28 - can't see the drop down menu because
54:30 - it's it's hidden
54:32 - behind this so let's go up
54:34 - and for a column let's give it a main
54:37 - access alignment of center
54:40 - give it a quick restart don't need to
54:43 - restart the whole app
54:45 - okay
54:46 - this is looking good this is how we want
54:48 - it to look
54:51 - okay if i pull open the keyboard in the
54:53 - emulator
54:55 - this will work um
54:57 - maybe we'll tinker with the other
54:59 - keyboard types later
55:01 - and we got add and add for now just pops
55:03 - you nothing more okay so that's good i'm
55:06 - going to close that down
55:07 - and let's go back really quick to our
55:09 - authentication page
55:10 - and let's clean this up
55:12 - like i was mentioning earlier there's a
55:14 - couple things i didn't like
55:15 - so the first thing to do is the white we
55:18 - want to make it white not black
55:22 - so i believe that all we need to do is
55:24 - this
55:25 - [Applause]
55:28 - done
55:29 - okay
55:30 - first thing that was bugging me
55:34 - care of
55:35 - the next thing that was bugging me is
55:37 - the fact that these text form fields
55:39 - went end to end i want to put some
55:40 - constraints so that they're less
55:43 - so what we're going to do is we're going
55:44 - to just cut them
55:46 - we're going to place them inside of a
55:47 - container widget
55:51 - and we're going to give that container
55:52 - widget a width of media query
55:56 - contacts dot size
56:00 - dot width divided by 1.3
56:04 - and we're going to do the same thing for
56:06 - the first one
56:11 - we are going to say
56:13 - child
56:15 - let's take the widget's width from that
56:18 - one
56:20 - and paste it into this one
56:22 - let's change this to center instead of
56:25 - space between
56:27 - and then let's just put some size boxes
56:29 - for now
56:31 - [Music]
56:34 - let's do media query
56:37 - of context
56:40 - size dot height divided by 35.
56:44 - that should be good just like a nice
56:48 - decent padding
56:50 - nothing too crazy
56:53 - put them between all of our objects so
56:55 - they aren't smushed on top of each other
56:57 - and
56:57 - [Music]
57:02 - i think we're good
57:03 - okay we're going to give this another
57:05 - run
57:06 - and let's see
57:07 - how those improvements look
57:10 - okay this is looking substantially
57:12 - cleaner than what we originally had so
57:14 - let's go ahead
57:16 - just do this one more time yep that
57:18 - looks great
57:19 - [Applause]
57:20 - i'm gonna remove this keyboard for my
57:22 - own sake
57:23 - log in
57:25 - everything is looking good okay
57:28 - let's close this down and let's shift
57:31 - over to our api methods and our flutter
57:34 - fire methods
57:35 - so we're going to start with our flutter
57:37 - fire methods first and we're going to be
57:39 - doing something interesting with our add
57:41 - method
57:42 - so we're not necessarily just
57:45 - creating a new document we're
57:47 - potentially updating at the same time so
57:51 - we need to know what is the current
57:53 - value of that's inside of that document
57:57 - and we want to potentially add on to
57:59 - that value if it exists so the way that
58:02 - we can do this with firestore is
58:03 - something called transactions so what
58:05 - we're going to do is we're going to run
58:07 - a transaction
58:08 - and essentially we're going to be
58:09 - opening up a document in firestore we're
58:12 - going to be reading the current value if
58:14 - it exists and then we're going to be
58:16 - adding on to that value
58:18 - and this way we can easily increment the
58:20 - number of coins that a user has so let's
58:22 - say i add one bitcoin today i come back
58:26 - tomorrow and i add .02 of a bitcoin
58:30 - now i don't want to replace the document
58:32 - with .02 i want to add on to the
58:35 - existing one so that the document reads
58:37 - 1.02
58:39 - the transaction is going to help us do
58:41 - this
58:41 - so what we're first going to do is we're
58:43 - going to create a future method and i'm
58:45 - just going to make it a boolean and
58:47 - we're going to say
58:48 - add coin and the reason for it being a
58:50 - boolean is this is just a simple way of
58:52 - telling the client hey
58:54 - um it worked or it didn't work
58:56 - so we're going to turn true if it did
58:58 - false if it didn't
59:00 - because we're not necessarily needing
59:01 - any data on the front end from it
59:04 - all we want to know is was it successful
59:07 - in adding or not
59:11 - so we need two variables that we're
59:13 - going to be using for this ag coin
59:15 - i thought about it at first and thought
59:17 - about utilizing a coin class
59:20 - but it's really not
59:22 - real it's
59:25 - i thought about using a coin class at
59:27 - first but it kind of felt like we were
59:29 - pushing it a little bit when all we
59:31 - really needed were a couple of simple
59:32 - variables
59:34 - so what we're first going to do is we
59:35 - have string id and this is going to be
59:37 - the id of the document that we're going
59:39 - to be referencing and in the case that
59:41 - the document doesn't exist this will be
59:43 - the name of the new document that we're
59:44 - creating
59:46 - and then we're going to have another
59:47 - value called amount which is also going
59:50 - to be of type string
59:52 - the user when they input that number
59:54 - it's going to be a text string
59:57 - we're not going to bother on the front
59:59 - end worrying about formatting into a
60:01 - nice double we're going to handle that
60:02 - here in this method instead so we're
60:04 - passing it in as a string
60:06 - and of course because this is a future
60:08 - method and we are working with firebase
60:11 - there is going to need to be
60:13 - an asynchronicity to this method
60:16 - the next thing we want to do is we're
60:18 - going to do a try catch statement
60:25 - and
60:27 - if we fail if the try isn't successful
60:30 - and it catches an exception we're going
60:32 - to return false because it was
60:34 - unsuccessful in adding to the database
60:36 - and then what we're going to do is
60:38 - inside the try we're going to say string
60:40 - uid
60:41 - because we first need to access the
60:43 - document of the user before we can even
60:45 - think about accessing the documents
60:47 - for the coins so we say string uid is
60:50 - equal to
60:51 - firebaseauth.instance.currentuser.edu
60:57 - this will give us the uid of the current
60:59 - authenticated user
61:00 - we're then going to say var value is
61:03 - equal to double
61:04 - dot parse amount so we're
61:07 - we're taking our string and converting
61:10 - it into a double
61:12 - and
61:13 - if we have more time this is another
61:16 - thing that you can do in your free time
61:18 - you can add some validation to ensure
61:20 - that the string that's coming in is of a
61:22 - type double or simply we can add some
61:25 - validation logic to the front end on the
61:27 - add button to where we don't allow them
61:30 - to add until they format their number
61:33 - correctly
61:35 - and then what we're going to do is we're
61:36 - going to say document reference
61:39 - and what this is going to be
61:44 - is we're going to set this equal to the
61:47 - reference of the document that we want
61:49 - to update
61:50 - so it's going to it's going to basically
61:52 - be collection user
61:54 - document users uid
61:57 - collection coins document the coin id
62:01 - and that is going to be the path that
62:02 - we're giving this document reference
62:04 - object
62:05 - so we're going to say firebase firestore
62:10 - dot instance
62:11 - dot collection
62:13 - users
62:17 - sorry about that
62:19 - action.users.uid
62:25 - dot collection
62:27 - points
62:29 - dot dot
62:30 - id
62:32 - okay
62:34 - so that is our
62:36 - document reference
62:37 - and the reason we need to grab that is
62:39 - this is the crucial part of the
62:40 - transaction method that we're going to
62:42 - be using
62:43 - so now we're going to say firebase
62:44 - firestore
62:47 - dot instance
62:49 - dot run
62:50 - transaction
62:52 - and it's going to be
62:55 - instead of this
62:57 - okay
62:58 - it's going to be a
63:00 - method and it needs to be asynchronous
63:04 - okay
63:06 - and we're going to say
63:07 - document
63:09 - snapshot
63:10 - we're going to call it snapshot
63:13 - is equal to a weight
63:16 - transaction
63:19 - which is the value that run transaction
63:21 - produced for us
63:23 - transaction dot get
63:25 - and then we want to pass in
63:27 - our document reference
63:30 - okay
63:32 - okay
63:34 - making good progress here
63:37 - so now that we have our snapshot it's
63:39 - essentially a capture of the data within
63:42 - that document we can say
63:45 - if
63:47 - snapshot.exists so this means if there's
63:51 - not any data
63:53 - like
63:54 - not necessarily not any data but
63:57 - oh not exits exists
64:00 - um
64:01 - essentially what this means is this
64:02 - document
64:03 - does not exist already like we the user
64:06 - has not created a document for this coin
64:09 - yet so let's say we're adding bitcoin
64:11 - and the user's never had bitcoin in
64:13 - their profile
64:14 - it'll hit this clause
64:16 - okay so what we want to do here is we
64:18 - want to set a new document because
64:22 - um just because it didn't exist doesn't
64:23 - mean we don't want it to exist we want
64:25 - it to exist with our new value we just
64:28 - don't want to
64:30 - there's no other logic that needs to be
64:32 - put into play it's not like we're adding
64:34 - an old value as well
64:36 - so we're going to say document reference
64:40 - dot set
64:44 - and in here we can set amount
64:47 - equal to
64:49 - and we called it value
64:51 - and then we can return false
64:54 - actually we can return true i'm sorry
64:56 - about that
64:57 - don't know what i'm thinking
65:00 - then we can say
65:02 - double
65:03 - new amount so if
65:04 - the document already exists we want to
65:07 - first
65:09 - create the new value that we're going to
65:11 - update the document with so we want to
65:13 - say
65:14 - snapshot
65:16 - dot data
65:18 - and then we want to take
65:20 - the
65:21 - amount
65:23 - from that data and
65:25 - just for sake of consistency i'm going
65:28 - to replace that with singles
65:30 - single quotes
65:32 - plus
65:34 - value
65:36 - and then we are going to say transaction
65:40 - dot update
65:42 - and this is important we want to make
65:44 - sure we say update
65:46 - and we list what do we want to update
65:47 - what document passenger document
65:49 - reference
65:50 - which we establish here so we want to
65:52 - update this document
65:56 - and then we want to say what is what is
65:58 - it that we want to update within that
65:59 - document
66:01 - we want to update a mount
66:03 - and we want the value to equal
66:05 - new amount
66:09 - and we can say return true
66:12 - okay
66:13 - and before we do a semicolon close on
66:16 - this run transaction we can just say
66:20 - actually
66:21 - we can leave it at that
66:23 - you could do a then clause to basically
66:25 - say successfully updated but we don't
66:27 - care we're returning true and letting
66:29 - the user know hey all is good in the
66:30 - world okay
66:33 - so that is adding
66:35 - so let's go ahead and hook this up to
66:38 - our ad view
66:39 - so right here we want to say await and
66:42 - what did we call this method
66:44 - we called it
66:47 - add coin
66:50 - add coin
66:53 - and add coin takes in two variables the
66:55 - first one is going to be
66:59 - drop down value
67:00 - and the second one
67:03 - is going to be our amount controller
67:11 - and we need to import our flutter file
67:13 - file okay
67:16 - that's looking good
67:17 - now let's go ahead and give this another
67:19 - run and see if our stream builder
67:22 - displays the coin once we've added it
67:24 - and also make sure that it's actually
67:25 - even adding the coin in the first place
67:29 - okay let's go ahead and log in
67:37 - okay we currently have nothing we can
67:39 - confirm that
67:40 - go to add
67:42 - let's add ethereum let's do that
67:47 - let's say we're going to add 1.2 of
67:48 - ethereum
67:50 - we've added it
67:53 - okay
67:54 - now i'm a little concerned because i'm
67:56 - not seeing anything show here
68:00 - okay so you can see here that it is this
68:03 - it is
68:04 - inserting
68:05 - um
68:06 - the coin
68:08 - into the database but as we saw here
68:11 - nothing is showing
68:13 - so what we're going to do is we're going
68:14 - to run one more test let's add one
68:15 - bitcoin
68:17 - add it
68:19 - okay
68:21 - and let's go ahead and close this down
68:25 - run it again
68:28 - and while we're waiting for this to pull
68:29 - up
68:32 - let's go ahead and check out our home
68:33 - view and see maybe if we can find out
68:36 - what we are missing
68:40 - document.id document.data amount we're
68:43 - returning to lists there's no errors
68:46 - we're
68:47 - mapping the data
68:48 - there's no circular progress indicator
68:51 - so we know that we are getting something
68:53 - some kind of response
68:56 - let's check out add view really quick
68:58 - and let's see what or not add view
69:00 - let's check out our
69:04 - flutter fire
69:06 - there we go here's our issue
69:08 - so the problem is is that we gave a bad
69:12 - reference
69:13 - we were saying
69:14 - lowercase users but
69:17 - on
69:18 - our home view we were looking at the
69:20 - collection with an uppercase u so
69:22 - firebase is case sensitive so this is a
69:25 - very common thing that can happen so you
69:28 - want to always be sure that you're
69:30 - using consistency among titles i always
69:34 - do uppercase camel case with all my
69:37 - collections and that way i just remember
69:39 - it's always uppercasecamelcase don't
69:41 - even have to think about it
69:42 - so what we're going to do here we're
69:44 - going to restart it i'm going to go
69:46 - ahead to firebase
69:47 - and let's go ahead and sure enough you
69:50 - can see here
69:51 - users is lowercase i'm going to delete
69:53 - this collection
69:56 - just to reset my data
69:58 - okay
70:00 - and let's go ahead and check out
70:04 - this again
70:05 - see if we got it right this time
70:10 - log in
70:11 - let's add one bitcoin
70:14 - awesome
70:15 - bitcoin one
70:17 - let's add in
70:19 - point zero zero zero three of bitcoin
70:22 - add
70:24 - awesome
70:25 - now
70:26 - i do wanna cap it i don't want it to be
70:29 - so long i want to cap it at say
70:33 - two decimal places because i think what
70:35 - we'll do is we'll say
70:37 - well
70:38 - what we're going to do is we're going to
70:39 - represent this as a price
70:41 - so we're going to say
70:43 - this times whatever the current price is
70:46 - and so we will have to cap this the
70:48 - decimal places that's one thing we need
70:49 - to keep in mind
70:52 - but so far it's looking good let's do
70:53 - another one let's do tether as well
70:56 - say 54 tether
70:58 - okay awesome and you can see here it's
71:00 - starting to create a list
71:02 - so
71:02 - the next thing we're going to do is
71:04 - let's hook up to our api
71:06 - let's get that live pricing added in
71:09 - and then we can do a little bit more
71:11 - styling here
71:12 - and we'll be off to the races so let's
71:14 - go ahead and close this down
71:17 - okay so here's the api that we're going
71:19 - to be working with it's coingeco.com
71:21 - they have a free
71:23 - open to the public api that you can
71:25 - utilize unless you're using this for
71:28 - commercial purposes and really pinging
71:30 - it a lot it should be perfectly fine to
71:32 - use so for our case where we're gonna
71:34 - have a low amount of users um we're not
71:36 - expecting a ton of people this is gonna
71:38 - be just fine
71:40 - so we have this get request um it takes
71:43 - in an id of a coin the way that
71:46 - coingecko does their ids i've already
71:48 - looked into this a little bit it's the
71:50 - name of the coin
71:51 - so we have bitcoin tether ethereum so
71:53 - the id that we have in our documents we
71:55 - can utilize that for this api call as
71:58 - well hence why we stuck with
72:01 - the
72:01 - lowercase coin name for the id and
72:04 - everything it just it flows well working
72:06 - with the api
72:08 - so what we're going to do here is let's
72:11 - go ahead and test it out
72:13 - so let's click try it out
72:16 - we're going to pass bitcoin
72:19 - click execute
72:24 - awesome and you can see here here's the
72:26 - data we're getting back now the only
72:28 - data we really care about
72:30 - is the
72:32 - price
72:33 - so let's look down let's see here this
72:36 - is description in different languages
72:40 - okay here we go
72:42 - okay this is what we care about market
72:44 - data
72:45 - then within market data there's a field
72:46 - called current price
72:48 - then within current price there's a
72:50 - field
72:51 - usd for us dollars
72:54 - so this is what we care about with this
72:56 - api and this is what we're going to try
72:59 - to capture
73:00 - so let's go back up to the top we're
73:02 - going to grab
73:05 - this request url
73:08 - i'm going to copy that
73:10 - i'm going to
73:11 - place it right here
73:13 - and the next thing that we're going to
73:15 - do is we need to import the http library
73:18 - in order to do that i believe i've
73:20 - already done this on this project but
73:22 - we're going to go to our pubspec.yaml
73:24 - file yep
73:25 - and you are going to add in http under
73:28 - dependencies just place it right with
73:30 - your other flutter fire dependencies
73:33 - um or just under
73:35 - and then you're going to use the latest
73:37 - version which as of date of this video
73:39 - it's 12.2
73:41 - okay
73:43 - um
73:45 - yes
73:47 - okay
73:48 - so
73:48 - we've now got that
73:51 - let's import http
73:55 - and we're gonna say as http
73:59 - and then we're going to say
74:01 - future
74:03 - double and we need to import one more
74:05 - thing
74:07 - oh
74:10 - thinking
74:15 - yeah there it is
74:16 - the convert library okay future double
74:19 - i'll call it get price and it takes in
74:22 - an id
74:26 - okay so we're returning a double which
74:29 - is the price that the user
74:32 - is asking for
74:34 - okay so the way that this works is we're
74:36 - going to do a try catch
74:39 - cover our bases here
74:41 - if we catch an error
74:44 - we're just going to print the error
74:47 - console
74:49 - and we're going to return
74:52 - zero
74:53 - and so if you see that the current value
74:57 - of a coin is zero then you know that
75:00 - you probably did something wrong
75:02 - um
75:05 - okay
75:11 - and we're just going to print the error
75:13 - to the console if we catch an error
75:15 - the next thing we're going to do is
75:16 - we're going to say var url is equal to
75:21 - and let's go ahead and copy this url
75:27 - paste it
75:30 - and the reason i'm leaving off the
75:32 - ending
75:33 - is we're going to add on id to the url
75:37 - okay
75:39 - the next thing we want to do is we want
75:41 - to say
75:42 - var response is equal to http dot get
75:47 - url
75:48 - and what this will do is it will perform
75:50 - a get request as if we were working at a
75:52 - postman or putting this url api
75:56 - into the browser
75:58 - it's essentially doing that and it's
75:59 - setting the response of that object
76:01 - to
76:02 - this variable called response
76:05 - we're then going to have a variable
76:06 - called json which we're going to say
76:09 - json to code
76:11 - and it's going to say response dot body
76:16 - so what we're doing is with the
76:19 - okay why doesn't it like this
76:27 - response to body
76:31 - ah
76:33 - that was incomplete that's why
76:35 - okay
76:36 - so what we're doing with this is we're
76:37 - saying
76:38 - take your response object
76:40 - and with your response object i want to
76:42 - take the body element and i want to
76:44 - format it in json format and what we can
76:48 - do with this is we can then say
76:52 - value is equal to json
76:57 - and i believe it was called market data
76:59 - let's confirm
77:04 - yep
77:05 - [Applause]
77:06 - market data
77:09 - oh not dot i want to do another one of
77:11 - these
77:13 - it's called current price
77:17 - current price
77:24 - usd
77:27 - and let's just for consistency's sake
77:32 - we don't want to trust the api to make
77:34 - the correct decision with formatting so
77:36 - we can trust ourselves so we're going to
77:38 - format it as a string
77:40 - and then we're going to say
77:42 - return
77:44 - double dot parse
77:46 - of value
77:48 - and the reason i say that is i've seen
77:49 - apis before that are poorly managed and
77:51 - kept and sometimes they'll return a
77:54 - double sometimes return to string
77:55 - sometimes they'll turn in int and it can
77:59 - cause a lot of problems if you're not
78:00 - ready for that so i find it best just to
78:02 - take matters in my own hand make sure we
78:04 - have a uniform string that we're reading
78:07 - and then do with the string as we want
78:08 - afterwards
78:10 - so what this will do is this will return
78:12 - the price of the
78:14 - coin that we're dealing with
78:16 - so now what we want to do we're done
78:18 - with add view we're going to go back to
78:20 - our home view and we're going to
78:21 - manipulate this a little bit
78:23 - okay so the way that we're going to work
78:25 - with this data is we're going to do the
78:27 - following we're going to say
78:29 - double bitcoin is equal to 0.0
78:33 - do the same for ethereum
78:37 - and for tether
78:42 - then we're going to override our init
78:44 - states
78:48 - and
78:49 - what we're going to do is we're going to
78:51 - say
78:53 - get values
78:59 - and then we're going to have get values
79:00 - be asynchronous
79:02 - and the reason for this you can't do
79:04 - asynchronous methods within init state
79:06 - so we're going to create a simple method
79:07 - that's called add a net state to go and
79:10 - grab the newest values for each of these
79:12 - coins
79:13 - and we're going to say
79:14 - um
79:17 - bitcoin
79:20 - is equal to
79:21 - get
79:22 - price
79:24 - of bitcoin
79:29 - this needs to be a weight
79:32 - and we're gonna do the same thing
79:37 - for ethereum
79:41 - and for tether
79:51 - then we're going to call set state
79:53 - just to make sure those get set
79:56 - okay
79:58 - okay so
80:00 - what we're doing is when the page
80:02 - initially loads we're going to go ahead
80:04 - and call our api method and get the
80:06 - current price for each of these three
80:08 - coins that the user could potentially
80:10 - show
80:11 - and then what we're going to do is we're
80:13 - going to have another method within our
80:15 - widget
80:17 - that's going to be called
80:19 - get value but this one's going to have
80:21 - parameters it's going to have a id
80:24 - and it's going to have a double of type
80:27 - amount
80:31 - and what we're going to do here is we're
80:33 - going to say
80:34 - if
80:36 - id is equal to
80:38 - bitcoin
80:42 - return
80:44 - um
80:46 - bitcoin times amount
80:55 - else if
80:57 - id is equal to
80:59 - ethereum
81:01 - return ethereum times amount
81:05 - and otherwise it must be tether
81:08 - so return
81:09 - tether times amount
81:12 - okay so what we're doing here is we're
81:15 - going to be calling this from within our
81:18 - individual rows
81:20 - to get the current price and so we're
81:21 - going to say okay get the current price
81:23 - of bitcoin and multiply it by whatever
81:25 - amount that you're passing me that the
81:27 - user owns of that
81:29 - and so we're going to say
81:30 - pass the coin you're looking at and
81:32 - we're going to check and see which one
81:34 - it is
81:34 - and then we're going to multiply the
81:37 - current price of that coin by the amount
81:39 - of that coin that the user owns
81:41 - so utilizing this method we're going to
81:43 - go down here into our stream builder
81:47 - go into our list view
81:49 - and for amount owned
81:52 - we are now going to say
81:54 - um
81:56 - get value
82:01 - oh my goodness i'm having trouble here
82:03 - it's gonna be document.id
82:06 - and then the second variable
82:09 - is the amount of that coin
82:14 - okay
82:19 - we want to put a dollar sign in front of
82:21 - it
82:22 - and we want to say
82:25 - dot to string or let's do two fixed
82:29 - or that's what it is to string as fixed
82:32 - and let's go to
82:33 - two decimal places so this will make
82:36 - sure that if our
82:38 - number that we get back our double has
82:40 - like
82:42 - two plus like it could have like five
82:44 - decimal places we want to make sure we
82:45 - only show two so it looks like a
82:46 - legitimate number and keep in mind that
82:48 - this is in us dollars if you'd like to
82:50 - use a different currency you can look at
82:52 - the api documentation you can figure out
82:55 - which one is represented is
82:57 - represents your country so for example
83:00 - we have the euro
83:02 - i believe canada is in here
83:04 - cad
83:05 - it has pretty much every common
83:08 - well-known currency
83:10 - um on here that it can compare to
83:13 - okay
83:14 - so let's go ahead and test this out and
83:16 - make sure that it is
83:18 - giving us the proper price
83:20 - and so we're going to run this and while
83:22 - we're running it we're going to go ahead
83:23 - and check out firestore really quick
83:25 - give it a refresh
83:28 - and let's see roughly what we think it
83:30 - should equal so we have
83:33 - and eight tether coins let's see
83:35 - tether to dollar
83:39 - okay one tether is about one dollar so
83:42 - we should see about 108 for tether
83:46 - and for bitcoin we have okay let's see
83:48 - one bitcoin price
83:52 - and we should see
83:55 - 10 800 to 10 900 somewhere in there for
83:58 - bitcoin
84:01 - let's pull up in our emulator
84:04 - let's log in
84:15 - awesome perfect not exact
84:18 - well actually
84:19 - what do i know i um i was given a rough
84:22 - estimate but it looks like that's
84:24 - correct like that's the amount that we
84:25 - want to have
84:26 - so the last thing we need to do is let's
84:28 - go ahead and give these some styling
84:30 - and then maybe we can even add in
84:33 - like a x icon and if they hit it
84:36 - then we just sell everything we just
84:38 - clear out that coin just so you can get
84:41 - familiar with how to delete things from
84:43 - a document
84:45 - okay
84:46 - and going over really quickly when it
84:48 - comes to deleting if you want to allow
84:49 - the user to delete up to a certain
84:51 - amount like i just want to sell half of
84:53 - my bitcoin
84:54 - what you're going to do is you're going
84:56 - to do something similar to the
84:58 - transaction that we did with adding
85:00 - coins but instead of adding onto you
85:02 - will subtract the amount that you want
85:04 - to do from that coin
85:06 - so it's a very similar method for this
85:08 - example just to wrap it up and make it
85:11 - concise we're going to just say delete
85:13 - all
85:14 - so let's manipulate this this container
85:16 - here
85:17 - so the first thing we can do is we can
85:19 - give it some decoration
85:22 - give it a box decoration
85:26 - we do border radius
85:30 - dot circular let's do 15
85:34 - we can do so unique coloring so we can
85:36 - say color
85:38 - is equal to colors.blue
85:42 - um we can do
85:45 - let's do some text styling here
85:47 - let's say text style
85:50 - color as we go to colors.white
85:55 - and let me go
85:57 - here
86:00 - and again i'm going to be putting all of
86:02 - this code
86:04 - i'll be putting all this code online and
86:07 - so if you have any questions or wanna
86:10 - or you wanna slow it down a little bit
86:12 - and get a better feel for it
86:14 - you can always go back and check out
86:15 - that code
86:17 - okay
86:23 - oh i'm sorry i forgot the key part of
86:25 - styling is
86:28 - the style tag i was wondering why i was
86:30 - getting a little error there
86:31 - okay
86:33 - that's good um we're gonna wrap this
86:36 - whole thing
86:38 - so container
86:40 - we've given it a width
86:43 - have we we have not given it a width
86:46 - oh we have no we haven't okay sorry for
86:48 - the back and forth
86:50 - let's give it a width
87:00 - let's give it a height
87:14 - give it a hot reload
87:20 - i'm sorry i meant restart hot restart
87:24 - okay looks good now we need some padding
87:28 - um let's do container
87:34 - return padding
87:39 - childish container
87:43 - and
87:44 - padding
87:46 - the edge insets dot vertical
87:52 - only
87:54 - top five
88:00 - looks good
88:01 - um
88:04 - i'm still slightly confused as to why
88:06 - this isn't working the way i want it to
88:09 - the sizing isn't how i want it
88:12 - um
88:14 - let's do this instead let's do left
88:18 - 15
88:20 - right
88:21 - 15.
88:24 - okay
88:29 - that looks good that looks good to me
88:31 - okay let's go ahead and add that button
88:33 - add that button
88:35 - button i'm sorry
88:37 - my mouth is getting a little dry
88:44 - okay let's go ahead and add that button
88:46 - and what i'm going to do to create a
88:48 - little bit more room
88:50 - i'm going to delete this i think it's
88:51 - pretty self-explanatory when you see
88:54 - the dollar sign and i don't think we
88:57 - need to include name
88:58 - so we're trying to do is we're just
88:59 - trying to free up a little bit more
89:00 - space to include that button
89:04 - and we're gonna have an icon here
89:06 - icons dot
89:08 - close maybe
89:11 - i'm not 100 sure what that icon looks
89:13 - like
89:14 - and then we're going to say
89:16 - color colors dot red
89:19 - [Applause]
89:21 - and actually now that i think about it
89:25 - we need an icon button
89:35 - okay
89:37 - on pressed
89:39 - let's just print something so we can
89:41 - test it
89:49 - okay
89:51 - um
89:57 - i'm going to say space between
90:01 - just make it a little bit cleaner
90:04 - that looks good we want some spacing on
90:06 - the left of those coins and we on it up
90:08 - the font size
90:10 - so first font size
90:13 - um let's say 18.
90:21 - and add in that padding on the left
90:24 - so the way we can do this is we can just
90:26 - put
90:27 - a size box
90:30 - of type width
90:32 - 5.0
90:35 - just the left of that first item
90:39 - reload it look at it
90:41 - looks good to me
90:44 - so we've got that padding on the left
90:46 - the x's will always be on the right
90:49 - let's see if that was printing or not
90:51 - output
90:54 - there we go debug console that was what
90:56 - i was looking for
90:57 - let's try this again
90:59 - okay
91:01 - that's good so now we can move on to our
91:04 - remove method
91:05 - so let's go back to our flutter fire
91:10 - let's create a future method
91:16 - type bool
91:18 - we'll call it remove
91:20 - and we'll pass in
91:22 - an id
91:28 - and we're going to say remove coin
91:30 - actually
91:32 - so we're first going to do is we want to
91:33 - get the user's uid
91:35 - so we've already done this up above
91:39 - get the current uid of the user
91:43 - then what we're going to do is we're
91:44 - going to say
91:45 - firebase firestore
91:48 - dot instance dot collection
91:52 - users
91:54 - dot
91:56 - doc uid
92:00 - dot collection
92:02 - and we're gonna say once again
92:05 - um
92:06 - coins
92:08 - dot doc
92:11 - id
92:15 - and then we're going to say dot
92:18 - delete
92:19 - what this will do is it will delete that
92:22 - document from our list
92:24 - okay
92:25 - so now all we have to do is we need to
92:27 - reference it oh i'm sorry
92:30 - and
92:32 - return true
92:35 - now we have to do is go back to our home
92:37 - view
92:38 - within our icon button we can say
92:41 - async
92:44 - and then we're just going to say await
92:48 - or we call it remove
92:52 - coin and
92:55 - we want to specify the coin we want to
92:57 - remove
92:58 - which is going to be document.data
93:02 - actually not even.data document.id
93:08 - and then we need to import our flutter
93:09 - fire
93:10 - into this page into this
93:14 - dart file
93:16 - okay
93:17 - we're gonna do a hard restart and we're
93:19 - gonna try this on our tether coin
93:34 - okay it's gone from our list but let's
93:36 - double check and make sure it truly
93:37 - removed it
93:39 - and it looks like it did
93:41 - now let's try it with bitcoin
93:50 - let's go back to firebase
93:53 - and it removed bitcoin as well
93:55 - awesome
93:57 - let's go ahead and just add in
94:02 - perfect
94:03 - okay
94:05 - so we've successfully completed our
94:08 - crypto wallet clearly there's always a
94:10 - lot of other things that you can do with
94:12 - this um if you'd like to challenge
94:13 - yourself a little bit more i would
94:15 - suggest doing the following things one
94:18 - incorporate some more advanced
94:21 - business logic state management into the
94:23 - app
94:25 - two establish some classes and work on
94:28 - api usage and improving how you utilize
94:32 - responses
94:33 - and three work on the styling you can
94:36 - never learn too much when it comes to
94:38 - flutter styling i hope that this is a
94:40 - good app to break you in and get you
94:42 - comfortable working with firestore
94:45 - firebase authentication and basic api
94:47 - usage
94:48 - it's really not as hard as some people
94:50 - make it out to be i hope that you felt
94:52 - the same way doing this tutorial with me
94:54 - once again i'd like to thank free code
94:56 - camp for giving the opportunity to teach
94:58 - you guys and show you guys how to
95:00 - utilize firebase in your flutter
95:01 - application and as always i'll catch you
95:04 - guys next time thanks for joining me