00:00 - this is the fifth video in my clean code
00:02 - series based on ryan mcdermott's article
00:06 - this series is about how to write clean
00:08 - code that is readable reusable and
00:10 - refactorable
00:11 - now i will talk about classes it's
00:14 - always better to write small functions
00:16 - than classes but if you do need a class
00:19 - you should use es6 classes instead of
00:22 - how classes are created in es5
00:24 - especially if you need inheritance so
00:27 - let me show you how an es5 class looks
00:30 - this is the bad way to do it
00:33 - so here is how you used to do it when
00:36 - you were
00:37 - using es5 if you wanted inheritance i'm
00:40 - not going to go through all the details
00:42 - because again this is not how we want to
00:44 - do it but
00:46 - we would create an animal and this is
00:48 - how you would create the animal class
00:50 - and you could add a move function to it
00:53 - and if you wanted to
00:55 - inherit from the animal class you're
00:57 - going to create mammal and you are going
01:00 - to have to
01:03 - call
01:04 - the animal class with and pass in the
01:07 - age but then if you want to add a fur
01:09 - color
01:10 - to the mammal that's different than the
01:11 - animal class you know this.fur color you
01:14 - are going to
01:16 - create this
01:17 - the prototype based on the animal class
01:20 - you are going to
01:21 - create what the constructor is
01:24 - basically there's a lot of different
01:25 - steps pretty long compared to what you
01:27 - will see for the es6 class
01:31 - so let me show you what the es6 class
01:33 - would look like
01:36 - and i just pasted that in and you can
01:37 - see this is much shorter this is the
01:40 - whole thing right here
01:42 - and it's so it's a lot more readable
01:43 - this es6 class is a lot more readable
01:46 - than you see what this es5 class looks
01:48 - like
01:51 - so we're going to create the class
01:53 - animal you're going to have the
01:54 - constructor where you passing the age
01:56 - you're going to have the function move
01:58 - which is not defined in this example
02:01 - but we have the mammal which is going to
02:03 - extend the animal that's how you're
02:05 - going to do inheritance
02:07 - and you're going to super age which
02:09 - passes in the age here
02:11 - create the fur color uh create the live
02:14 - birth function that's in the mammal
02:15 - class but not the animal class then we
02:17 - have the human class which extends
02:19 - mammal class you're going to pass in
02:21 - three things in the constructor but it's
02:23 - going to do super agent fur color
02:27 - where this is just going to call the the
02:28 - previous function the mammal function
02:30 - which is then going to pass the age to
02:32 - this function
02:33 - then you're going to create your new
02:36 - language spoken variable here
02:39 - and you create you can create a new
02:41 - function here
02:42 - basically the point is that it's just a
02:44 - lot easier to read now let's go on to
02:46 - method chaining
02:48 - method chaining allows your code to be
02:50 - more expressive and less verbose
02:53 - the easiest way to explain method
02:54 - chaining is just to show you so first
02:57 - i'm going to show you what it would look
02:58 - like without method chaining now this is
03:00 - the bad way to do it
03:03 - so if you create a class
03:06 - and you're going to have the constructor
03:07 - here and this is some of the default
03:10 - values and then you can also
03:12 - have these functions where you can set
03:14 - the make you can set the model you can
03:16 - set the color and then you would save
03:18 - the class using this function which is
03:21 - not the save is not fully implemented
03:23 - but just as an example it's going to
03:24 - console.log these things when you're
03:26 - creating a car class you're going to do
03:27 - constant car equals new car car that set
03:29 - color pink card set color four color.set
03:32 - model f150 and then card.save now let me
03:36 - show you what it would look like with
03:37 - chaining it's mainly this part right
03:39 - here that it's going to be a lot simpler
03:46 - so let me put in the the good way which
03:49 - is how you do
03:50 - method chaining now when you're creating
03:52 - a function with method chaining you're
03:54 - just going to return this at the end of
03:57 - every function so everything is the same
04:00 - in this new class car except we have
04:03 - this line at the end of each function
04:05 - we're going to return this we're going
04:07 - to return this we're going to return
04:09 - this we're going to return this and this
04:12 - allows us to do something different
04:14 - first let me show you what it used to
04:15 - look like when you were creating a car
04:17 - we were saying that we would do card
04:19 - asset color card asset make current
04:20 - asset model card save
04:22 - now since we've returned
04:25 - the car object at the end of each
04:29 - function we can just do this we don't
04:32 - have to do card outside color card
04:33 - except make card asset model we can just
04:35 - do
04:36 - dot set color pink dot set make dot set
04:40 - model and dot set save because up here
04:44 - after the function is is run it's going
04:48 - to just return
04:50 - undefined
04:51 - and then when you try to call another
04:53 - function if we did set color pink and
04:56 - then we put dot set make without putting
04:59 - the car here it's going to say that it
05:01 - cannot call this function on undefined
05:05 - because we're not returning that car
05:07 - again at the end of the function
05:09 - but when we return this at the end of
05:12 - each function
05:14 - if after it sets the color to pink it's
05:17 - going to return the car object so on
05:20 - that same car object you can set the
05:22 - make and then you can set the model and
05:24 - then we're just chaining the methods one
05:26 - after the other
05:28 - okay the last thing i want to talk about
05:29 - is that you should prefer composition
05:32 - over inheritance inheritance
05:35 - is like what we did up here where we did
05:38 - mammal extends animal human extends
05:42 - mammal that's inheritance human is
05:44 - inheriting from mammal mammal is
05:46 - inheriting from animal
05:49 - composition is when you have one class
05:53 - that's referenced from another class but
05:56 - you don't necessarily
05:58 - extend that class
06:00 - i'll show you an example but it's good
06:03 - to know that there are actually good
06:05 - reasons to use inheritance and good
06:07 - reasons to use composition
06:09 - but you should try to use composition
06:12 - over inheritance when possible well let
06:14 - me show you an example of the
06:15 - composition and inheritance so here
06:18 - would be the bad way to do it with
06:20 - composition
06:21 - and so what we're going to create the
06:23 - class employee which is going to have
06:25 - this constructor name and email
06:27 - and then we're going to create the class
06:29 - employee tax data and say extends
06:33 - employee so
06:34 - employee tax data is inheriting from
06:38 - employee but it says right here this is
06:40 - bad because employees have tax data
06:44 - employee tax data is not a type of
06:46 - employee
06:47 - and
06:48 - you're going to use composition when you
06:51 - have a has a relationship like employees
06:55 - has a or have tax data you're going to
06:58 - use inheritance when you have an is a
07:00 - relationship like a human is a animal or
07:04 - is an animal if you want to add tax data
07:06 - you're not just going to extend employ
07:09 - and add the tax data here you are going
07:12 - to use
07:13 - composition so let me show you what that
07:15 - would look like so in this composition
07:17 - example you're still going to have two
07:19 - classes so first we're going to define
07:21 - the employee tax data class
07:24 - with the social security number and
07:25 - salary and then we're going to define
07:28 - the employee class but none of the
07:31 - classes are going to extend from another
07:33 - class
07:34 - we are just going to use the employee
07:37 - tax data class within the employee class
07:40 - so it says set tax data uh social
07:44 - security number and salary
07:46 - uh this is just a function or a method
07:48 - of the employee
07:50 - class and we are going to say this tax
07:52 - data equals new employee tax data social
07:55 - security number and salary so we are
07:56 - just calling this class from within this
07:59 - other class and that's how you would do
08:02 - composition
08:03 - oh whoops this was supposed to say that
08:05 - this is the the good way to do it now
08:08 - there are some good reasons to use
08:10 - inheritance even though it says bad up
08:13 - here you just have to think through what
08:15 - your your actual problem is so
08:19 - if you have an is a relationship then
08:21 - you should use inheritance like the
08:23 - human is a animal like i said or but if
08:25 - you have a has a relationship like if
08:28 - you have user and user details a user is
08:31 - not
08:32 - user details but user has a detail then
08:35 - you'd use composition
08:37 - also you should use inheritance if you
08:39 - can reuse code from base classes like
08:42 - humans can move like all animals and the
08:44 - third reason why you would want to use
08:46 - inheritance is that if you can if you
08:49 - want to make global changes to derive
08:51 - classes by changing a base class well
08:54 - that's clean code classes thanks for
08:56 - watching my name is beau carnes don't
08:59 - forget to subscribe and remember use
09:01 - your code for good