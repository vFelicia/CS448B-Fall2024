00:00 - Hey guys, welcome to Whiteboard Wednesday. I'm Irfan Baqui, and in this series I solve coding problems
00:06 - on a whiteboard in a real interview setting and the problems are chosen by my wife
00:12 - who is also a Software Engineer, and she acts as an interviewer.
00:15 - As I solve the problems on the whiteboard, you will see how I interact with her and also how I approach to those problems.
00:23 - And this time she has chosen a Google interview question. So let's see what it is.
00:29 - So here's this week's question: "How would you implement a queue using stacks?"
00:33 - So I've actually encountered this problem before, and if you don't mind I will set it up over here, and we'll go through it.
00:39 - Yeah sure
00:41 - So let's say in this case
00:43 - let's say I
00:45 - Have an input of random integers that are coming in and I want to
00:51 - mimic a queue using two stats right, okay, so let's say inputs are just
00:56 - integer
00:58 - Let's say it's an integer stream
01:01 - Which is basically pushing off integers and
01:07 - Output should be a queue
01:13 - With
01:16 - Stacks
01:19 - And let's say the input may actually even be a stack you know stack and then the input to the stacks will be the integers
01:26 - Okay
01:30 - So the way I would do this is I'll have one stack as an on queue stack
01:42 - And another stack as a DQ stack
01:48 - Okay so in this case anytime. Let's say, this is the input stream I
01:55 - for inputs and
01:57 - I'm inputting 1 2 3 4 5 6 7
02:02 - Let's say in a row no DQ. Yet to be 1 2 3
02:07 - 4 5
02:10 - 6 & 7.
02:10 - So basically you are just pushing to the NQ stack?
02:14 - I'm just pushing to the on queue stack. Now, the moment there is a
02:20 - Let's say D is for DQ.
02:22 - Mm-hmm
02:22 - The moment there is a DQ command
02:25 - Then I will need to reverse this entire thing. So that's when the DQ stack comes in.
02:32 - So basically I will see, hey is there anything in the DQ stack? If there is then
02:36 - You output that...that would be the result of the D. But if there isn't then you pop everything out from here
02:44 - And you push it into DQ. So basically as you pop these out
02:49 - You'll have 7 6 5 4 3 2 & 1
02:56 - So you have to pop all of them out, so for each DQ command basically you need to empty the on Q stack.
03:01 - Okay.
03:02 - So now you will see that this is
03:05 - Like when we're de queueing this mimics our queue.
03:08 - Mm-hmm.
03:09 - So using these two stacks
03:11 - You know I can I would I would go about implementing it it this way.
03:17 - So in this case,
03:19 - the on queue
03:21 - the on queue
03:24 - command will be
03:26 - constant time okay
03:28 - The DQ command would be constant time as well in the best case scenario
03:33 - Mm-hmm
03:34 - because we DQ 1 right now with this D command. Let's say I have D again. I'll just be popping things out
03:40 - But that one time when this tag is empty or yeah this tag is empty
03:46 - And I want to DQ then that would be linear time
03:50 - Okay, so the worst case scenario is still
03:53 - linear time and
03:54 - The space complexity would be linear as well
03:58 - So basically we have to stick you
04:02 - stack
04:03 - And if that's empty, that's the only time V and T there any on queue stack
04:08 - Yep
04:10 - So the next time I encounter an NQ it will just push into an q stack
04:14 - And it doesn't have to do anything with the houston. Yes exactly so the next thing the next time you encounter
04:20 - Let's say seven then you want to on q8 at this point. This is empty. Yeah
04:26 - so then
04:28 - I on q8 there and if I want and then let's say there's a DQ again mm-hmm
04:34 - Then I DQ'd one and two so these two don't exist anymore
04:37 - And then the top of the stack is three so I DQ that let's say I have one two three four four
04:44 - more of these DQ's mm-hmm
04:47 - So this whole thing goes away mm-hmm so now if I have another DQ
04:53 - Then I see oh this is empty so I need to
04:56 - Reverse this entire on cue stack on to DQ stack again. I would like we did before
05:01 - Okay, I see so
05:04 - Basically, you are implementing this queue. Using two stacks, right. Yep, so can you do it with just one stack?
05:13 - Just one stack?
05:15 - Yeah
05:17 - Okay, let's let's think let's think about it so if I do it with just one stack
05:26 - Let's say, this is the stack
05:28 - So in this case I won't have that so if you don't mind
05:30 - I'll just erase that erase this entire thing, but yeah, I'll just keep one stack
05:39 - It's not a non-key stack anymore, so let's say this is my stack mm-hmm
05:46 - And I'm on queueing things so I will have one two three four
05:53 - Five six, let's say I'm on queueing the first six now if I want to DQ something right now
06:02 - in some way
06:03 - I will need to reverse this entire thing so if you say that I'm just implementing it using one stack is it possible for
06:11 - Well, I wouldn't really make sense for me to have an array or anything else right so basically you're saying
06:15 - Oh, the only data structure that i have is a stack
06:19 - nothing else
06:20 - Okay
06:22 - Okay
06:25 - Actually we can we can do it so the purpose of a DQ stack
06:31 - was just to have
06:34 - The things in memory the integers in memory, right?
06:39 - And if you're not using a data structure you can still have them in memory
06:44 - Somehow
06:45 - So I'm not saying have them in memory using an array because that would be
06:49 - In a sense as long as the program is running like a persistent memory
06:54 - But if we don't want to use something like that then we can store it
06:58 - In memory so basically I can I can say okay look at 6
07:04 - is that the last one if it's not the last one then look at 5
07:07 - Look at 4 look at 3 look at 2 and then look at 1 1 is the last one so we return 1 mm-hmm
07:14 - and that's and that's the answer and
07:17 - Throughout that time all of these would be in memory mm-hmm
07:21 - Then goes back again. It says okay. We found our answer
07:27 - push 2 back in 3 back in four back in 5 back and 6 back in
07:34 - Okay, so basically you will be looping through, i
07:36 - I want
07:37 - I think looping would be one way to do it, the thing I was thinking was just recursing through this stack
07:45 - So if you don't mind let me just lay out the operations yeah sure
07:49 - Or we can actually I think it'll go ahead and let me think about this
07:53 - How will it go and then I'll lay out the operations as well, so let's say these are the ops
08:00 - If I want to recurse through the stack and go all the way down
08:04 - the end condition for me would be
08:08 - So some way, I'll need to I'll need to
08:12 - Take into account the length of the stack, right
08:16 - so one of the properties of the stack would then be length as well, so I'll say if
08:21 - if
08:24 - So let's say let's say there's a function right?
08:27 - So this is let's say
08:31 - Function
08:34 - Dequeue
08:38 - And let's say this is inside of the scope of a bigger a bigger class or a bigger function that already has
08:45 - The stack in it so it has access to the stack so it's a part of Q
08:50 - It's part of Q. Yes. It's part of the Q class so
08:56 - In order for me to do this I
08:58 - Will need to recurse so basically
09:02 - even even before recursing, let's say I
09:07 - define the end condition which is if
09:11 - If stack
09:15 - .length is 1
09:21 - If stack.length is 1 then return
09:28 - Stack
09:30 - .pop
09:33 - So in this case if the length is 1 and this return this
09:37 - Right now if it's not 1 then
09:41 - You want to store each one of these in memory somehow, so I will say let
09:48 - Well at pseudocode, but basically I will say I
09:53 - Will say value or currVal, let's say
10:00 - Equals
10:02 - stag.pop
10:05 - For this iteration mm-hmm
10:08 - So in essence, I just stored this in in memory
10:12 - right
10:13 - So I will say okay currVal is stack.pop
10:16 - I know that there are more values because this condition didn't meet I'm still going
10:22 - Forward so I said stack.pop, and then I say Dequeue again
10:31 - Maybe I could have named this function better. You know Dequeue
10:34 - I'm not like Dequeuing multiple times, so just just so we're both clear. Let me just name this recurse
10:45 - Just so we don't confuse ourselves mm-hmm
10:50 - So I say recurse
10:52 - In once after I recurse. I want to make sure that okay i store this in memory now. I'm recursion
10:57 - See I'm going all the way down
10:58 - At the end, I want to push it back to the stack right so I'll say stack.push
11:06 - currVal
11:12 - Mm-hmm
11:13 - And of course we won't even go into this recursion if our first check says that the stack is empty
11:20 - You know then we won't then our queue class won't even call the recurrence function mm-hmm right
11:27 - so
11:28 - basically assuming that the stack has at least one value and
11:33 - We embark on
11:35 - the series of operations
11:37 - then we will have
11:39 - We will basically you start with six right we start with six. I store this in memory six
11:47 - Then as soon as I stored in memory
11:50 - I say recurse so I go into 5 I store that in memory
11:55 - 4 memory 3 memory
11:59 - 2 memory and then as soon as it hits 1 now the stack length is 1 so what it does is it returns 1
12:08 - Right so in this case actually I need to I need to store this for a curse as well, so I'll say let
12:16 - a result
12:20 - Equals recurse mm-hm and then at the end obviously I need to return something so I'll say a return
12:27 - Result
12:30 - So what happens is 1 is returned right and then
12:35 - For the 2nd one
12:39 - The recurse value that is returned is 1 and then it pushes 2 back again,
12:44 - so 2 is now in the bottom of the stack and
12:48 - Then returns 3, then 3 put is pushed back against part of the second returns 4 so on and so forth so
12:55 - It's the same stack that we are operating on.
12:59 - So the final result of the stack will be 2 3 4
13:02 - 5 and 6
13:07 - So this would give me the result
13:13 - Mimicking a queue using just one stack and obviously...
13:18 - I get this function is Dequeuing. So can you
13:21 - write the entire queue class for me?
13:24 - Yep. Yeah, so let me
13:27 - Let me erase this
13:29 - and
13:31 - Let's say, this is a function inside of the Q class. Let's call it Q
13:37 - And
13:39 - What it has is let's say it has a stack now the implementation of a stack optimally would be with a linked list
13:46 - But just for the sake of this let's say I have an array that mimics a stack.
13:53 - So, instead of this let's say I have stack
13:57 - Equals an array
14:01 - Now, I have another function that says...let's say this is
14:08 - Yeah, there's a recursive function let's say I have this dot
14:15 - So it's basically an instance function this.onQ
14:25 - Would basically take the value and what it'll do is it'll just say stack
14:36 - Stack.push, let's say
14:41 - Stack.push value
14:44 - Right? Now, on the other hand when I have this.dequeue
14:53 - Let's say it takes in of it doesn't take in anything right, so it's just a command so in this case it'll say okay
15:00 - I want to dequeue something let me make sure that there is something in the stack already so this will basically have the condition, "if
15:09 - Stack.length
15:13 - Is not equal to zero
15:19 - Recurse". So it'll basically call return
15:24 - Recurse
15:29 - So it would basically return the result like me like we did. "else..."
15:35 - "Else" basically that they're trying to dequeue something that's not even there so
15:39 - Depending on what the business logic is maybe we say return error you know "Else
15:45 - throw
15:47 - Exception".
15:53 - But basically this would at a high level and be the Q class
15:58 - Looks good
16:00 - Perfect.
16:01 - So let's see what you learned from this interview.
16:03 - Well, sometimes the interviewer may make the problems more complex as you're going through them.
16:09 - That's okay, just make sure you ask a lot of clarifying questions and
16:12 - That the problem is clear in your head before you proceed and then just go ahead and solve it.
16:17 - So I hope you like this video. If you did, make sure you like it,
16:20 - you subscribe and also subscribe to my YouTube channel, which I have in the description below
16:25 - Where I post a new Whiteboard Wednesday every week. Take care.