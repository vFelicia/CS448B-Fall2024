00:00 - In this game dev course you will learn how to 
create an endless runner game using Unreal Engine  
00:04 - and c++ file Fahir teaches this course. He has 
created a ton of game development tutorials and  
00:10 - he is an excellent teacher. What is up guys Fahir 
here and back out again with another Unreal Engine  
00:16 - tutorial this time a c++ one Yes, because a lot 
of your doozy blows blows. Okay, I'm going to  
00:21 - do a c++ tutorial. Anyways, let us take a look at 
the game that we are going to create. So over here  
00:26 - I have my editor if I hit the play button, it's 
a simple side scroller game. So if I, you know,  
00:32 - jump and all that stuff, you see, we can jump 
we can move, the goal is to avoid this wall that  
00:36 - is chasing us because if it touches us, we are 
going to die. And of course, we are going to have  
00:40 - obstacles along the ways such as these platforms, 
such as the spikes that we are hopefully going to  
00:45 - see pretty soon, because they're not spawning all 
of this time. There we go, we have the spikes. If  
00:50 - we touch the spikes, bam, we are dead, the level 
is going to restart. If the wall hits us, bam, we  
00:57 - are that the level is going to restart. As you can 
see, it looks like a basic game. But we are going  
01:02 - to learn a lot of cool things, especially c++ 
wise, because we're going to do all of this in c++  
01:07 - from scratch coding everything and you're going 
to see me code and you know, you're going to enjoy  
01:12 - that and learn a lot and yada yada yada. Anyways, 
what else can I say? Let's jump into this.  
01:18 - Course. Yeah, it's a mini course. What else 
is there? No, it's a mini course. Okay,  
01:22 - it's tutorial mini course, whatever, let 
us jump into it and create the school game.  
01:26 - Alrighty, then my game devolves. Now that we 
saw the game that we are going to create, let us  
01:31 - create the game. So over here, I have the Unreal 
Engine Project Browser, we are going to click here  
01:35 - on games. And by the way, this is unreal engine 
version four point 25. And we are going to select  
01:42 - our third person project. So not the blank one, 
but the third person because we need some elements  
01:48 - from that, you know, third person package. 
And over here, we're going to click on Next.  
01:53 - And from blueprint, I'm going to click on the 
drop down list and select c++ because Yay,  
01:58 - this is a c++ course. And over here, I'm going to 
name my project I'm going to call it side rather  
02:04 - CPP. Of course, you can think of something more 
creative than that, I'm going to click here Create  
02:09 - Project and wait until the project is created. 
And then I'm going to come back. And here we are  
02:16 - finally. So now what we are going to do is we are 
going to create the player and specifically the  
02:23 - player class over here, by the way, I have this 
engine content, we will use that as well. If you  
02:28 - don't have it, you're going to click here where it 
says View Options. So this right here that I draw,  
02:34 - so click on that, and from there, you're going 
to click this checkbox show engine content. So  
02:39 - make sure that that is checked. And then you will 
be able to see what I see in my project. Also one  
02:44 - neat trick, if you find that all of these elements 
inside of the editor are too small, especially if  
02:51 - you have a big monitor, you can go over here on 
the under window and then developer tools. And  
02:57 - then you can go over here widget or reflector. 
And let me just bring that bad boy over here.  
03:02 - And this is the scale for the application. Usually 
I set it at 1.16 and it is going to rescale my  
03:11 - application basically make it a little bit larger 
and that stuff so that I can see more better.  
03:17 - That's all there is to it. Anyways, going over 
here in the content, I'm going to right click  
03:22 - and create a new folder that I am going to call 
maps because over here we're going to create a new  
03:27 - map and that is going to happen under File and the 
new level basically new level I said map but as  
03:32 - the same thing Ctrl S to save it I'm going to save 
it over here and I am going to call this one game  
03:38 - play and there you go. So the first thing that 
I'm going to do with this gameplay is I'm going to  
03:44 - remove the floor that we have over here so simply 
delete it and there you go. And next I'm going to  
03:50 - go here into geometry and meshes and I'm going to 
take this template for and please head over here  
03:56 - and there you go. Let me just position this bad 
boy so for the x is going to be zero for the Y  
04:02 - is going to be zero z is going to be 20 and I am 
also going to rescale it so I'm going to click  
04:08 - here on this lock icon to lock the scale and I'm 
going to say point 25 and there you go. rescale it  
04:15 - and Wallah. Also in regard to the player start 
position let me just click on that yeah, it is  
04:22 - going to be where it is. And this is where we are 
going to spawn our player. Now before we proceed  
04:28 - to create the player class over here inside of the 
project settings and in the input we are going to  
04:35 - have some mappings and axes. So basically we 
only need the jumps I'm going to delete this  
04:40 - reset we are simply click here on this x and 
delete it. Here we are going to have move right  
04:46 - we're not going to have move forward and all of 
these stuff. So look up look rate, turn, turn  
04:52 - rate and move forward. We're going to delete all 
of these and leave only all of these. Of course  
04:58 - you can also filter these so we Don't need the 
GamePad, I basically only need the spacebar. But  
05:03 - again, that is up to you, depending on if you want 
to create, maybe you want to practice or whatnot,  
05:08 - I don't know I'm not you I'm not, you know, 
I'm not controlling you and stuff like that.  
05:13 - So there you go. So we should have jump and move 
right for the job, we have the spacebar for the  
05:18 - move, right A and D, you can also add the, you can 
also add the left and right that is totally up to  
05:25 - you, I am not going to go in there, you know, do 
not judge me. So now we can go over here inside of  
05:35 - our c++ or c++ classes. And from there, there you 
go. Here we have our side runner CPP character,  
05:44 - I am not going to use that one I'm simply going to 
right click and go here New c++ class, it is going  
05:50 - to inherit from the character I'm going to click 
on Next. And I am going to call this one runner  
05:56 - character and hit the Create class. Of course, you 
know that it takes a while for Unreal Engine to  
06:03 - you know, compile and load all of this, I am going 
to get an m two SSD just because of this, like I'm  
06:10 - not getting just because of this, I'm getting 
an es m two excuse me SSD that can read for I  
06:17 - believe, three 3500 megabytes per second. So that 
is what I'm getting. Okay, this is what I'm going  
06:24 - to get. And finally here is my class. So we have 
the runner dot h file and the runner dot cpp file.  
06:32 - If you don't know the difference between the two 
I'm quickly going to explain so in the dot h file,  
06:36 - we declare everything that we need and 
inside of our dot cpp file we then code  
06:42 - all of that that we have declared simple. 
Yes, it is. So what do we need over here,  
06:49 - right below where it says our generated body, I am 
going to declare a u property. So it's prah per T,  
06:57 - there you go. Sometimes I cannot spell and I'm 
going to call it the visible anywhere, there you  
07:02 - go. And this one is going to be our class. This is 
called a forward declaration when you type a class  
07:08 - so that we don't have to include the file over 
here. And I'm going to say you camera component,  
07:15 - and it's a pointer. So we need to denote that with 
the star. And I'm going to call this one side view  
07:20 - camera. Now as I said, this is called a forward or 
forward declaration, I believe I'm not 100% sure,  
07:26 - because I'm not good with those names, I don't 
care. But essentially what is the point of this  
07:31 - is that we declare it with a class over here so 
that we don't have to use the include over here,  
07:37 - you see, because every single thing that we use, 
for example, if we want to use functions from the  
07:42 - character, we need to include the game framework 
character. But I don't want to do that for the  
07:47 - camera component because every time you include 
the runner dot h file anywhere in your class or in  
07:54 - any other class that is, then it will include all 
the includes that come with it, but when you use  
08:00 - it like this, then it will not include them. But 
inside of here runner.or runner character dot cpp  
08:07 - then we are going to include it and that is the 
better way to go. So over here, this is you know,  
08:13 - the constructor for our character at the Begin 
Play and all of the good stuff tick and set up  
08:19 - player input components, so we're not going to 
touch any of those. Instead, what I'm going to  
08:24 - do is over here protected. And over here I'm 
going to declare my own functions and variables.  
08:29 - First things first, I am going to declare here 
void move right and this one is going to take  
08:35 - a float value as a parameter. And of course in a 
moment of do it is going to start complaining with  
08:41 - a green line below this move right because 
we then declare it inside of the dot cpp  
08:46 - file. Don't worry about that we will do it in 
a few moments. So over here, we're also going  
08:52 - to create a public and this one is going to 
return our you camera component and again,  
08:59 - it is a pointer and I'm going to call this one 
get side view. So get side view camera component.  
09:07 - And this one is going to take a constant or 
actually it's a constant and it is going to return  
09:13 - the side view cameras Simple as that. Next we are 
going to have another public function that I'm  
09:21 - going to call void re start level this is going 
to happen at the end when our player gets killed,  
09:28 - which is something that we saw as well. 
Also what I'm going to create and this  
09:33 - is what I said is going to complain with this 
Don't worry we will implement this in a view.  
09:38 - Over here I'm going to create a u function. 
And this one is going to be our void on  
09:44 - over lap begin, it's going to take a u primitive. 
So prayer may tiv component which is a pointer and  
09:53 - I'm going to call this one over lapped component, 
comma. It also takes an A actor Simply an actor,  
10:01 - but it's spelled a actor. It's a pointer 
and I'm going to call this one other actor.  
10:06 - There you go, we're also going to take another 
primitive component. So I'm going to copy this  
10:11 - here and paste it and it's a pointer. So again, 
we need to use this star over here. And other  
10:17 - comp or other component, this I'm going to 
call it to takes an int 32. Other body index,  
10:23 - a Boolean B from sweep. And last but not least, 
a constant of F hit result. And over here sweep  
10:34 - result, there you go. And last but not 
least, a few more private variables,  
10:41 - one is going to be the Z position. So float z, the 
position, there you go, it's position like that,  
10:49 - we are also going to take an F vector, which is 
going to be our temporary position that I'm going  
10:53 - to denote is equal to f vector like that. And last 
but not least a Boolean to denote if we can move  
11:00 - or if we cannot move. Now of course over here, as 
you can see, it is complaining for the move right  
11:06 - and the restart level, it is not complaining 
for the on overlap again, but it will start  
11:11 - complaining because I'm still waiting for that 
SSD to come. So what we need to do is we need  
11:16 - to declare this function over here inside of our 
runner character dot cpp file. So we need to, as I  
11:24 - said, declare it and that can happen by going over 
here and declaring and typing yet you know, void  
11:31 - a runner character call on call on and so on, and 
so forth. But there is a quicker way to do this,  
11:36 - what we can do is we can click on this move 
right then I can right click, and then I can  
11:40 - go here quick actions and refactoring. And over 
here I can say create declaration definition.  
11:47 - And there you go. When I click on that, it is 
going to create it of course, you know, this HDD  
11:54 - drive, it's driving me nuts. And I will probably 
have to cut out this video because you know, if I  
12:02 - sing to you, that will cost you extra. I mean, 
this is on YouTube, you don't pay anything for  
12:07 - this. But there you go, finally, okay, so now if 
I go here in the runner, there we go. So we have  
12:14 - the void runner move, right, we can do the same 
thing for this over here. So we can, you know,  
12:18 - do the same thing for the restart level by typing 
void a runner character call on call on will ride.  
12:24 - But instead of that, I'm simply going to right 
click again, quick actions and refactoring. And  
12:29 - I'm going to create a definition for it. And 
last but not least, we need to do that for  
12:33 - on overlap begin. So quick actions refactoring 
create declaration, there you go, save this over  
12:41 - here, save this over here, and voila, here are the 
functions that we need. So from here There you go.  
12:48 - So what are we going to do when it comes to our 
runner character? Well for our runner character  
12:57 - here is where I said that we are going to add 
those includes. So first one I'm going to include,  
13:04 - and that one's going to be components There you 
go, it's come ponents and then backslash and this  
13:12 - one is going to be capsule component dot age, and 
I'm going to include everything that we are going  
13:19 - to use so over here we're also going to include in 
quotes, game frame work, and then backslash spring  
13:30 - actually we don't need the spring our component we 
need the camera so I got carried away usually when  
13:34 - use the camera use the spring arm but I'm simply 
going to use the camera without it. So camera dash  
13:39 - or backslash camera component dot h There you go. 
And also include and over here game frame work. So  
13:49 - game frame work, actually, yeah, it's Capital 
Framework like that. And backslash character,  
13:58 - movement component. And there you go, actually 
thought Ah, and now there you go. So this is the  
14:06 - or these are the includes that I was talking about 
when I forward declared the camera component. So  
14:12 - instead of using this camera component include 
over here, I'm simply going to forward declare  
14:20 - it like this. And then over here I'm going to 
use the include because if we need to use the  
14:25 - runner character in some other class and we need 
to include the runner character dot h file, when  
14:31 - we include that, it will not include this import 
because this import is inside of the dot cpp file.  
14:39 - So over here inside of our runner character, which 
is the constructor basically, what we are going to  
14:45 - do first we're going to set the capital component 
so I'm going to say get capsule component.  
14:53 - And from there, I'm going to say in it 
capsule size and the size is going to be 42  
15:01 - On the X and 96, on the Y, there you 
go. I'm also going to set the channel to  
15:10 - response to collision with overlap, basically 
setting the collision settings to response  
15:16 - with overlap. So over here, I'm going to say 
get capsule components or get the capsule,  
15:22 - capsule component, there you go. And over 
here, I'm going to say set collision response  
15:30 - to channel. And from here, going down, I'm 
going to say ECC underscore game trays channel,  
15:41 - and is going to be traced channel one. And 
I'm going to say a CR, over lap, there you go.  
15:51 - And moving forward, we are going to the note 
that we are not going to allow the controller  
15:57 - to rotate us, instead we are going to use 
our own or basically we're going to control  
16:02 - this class from within itself. So I'm going 
to say here be use control rotation pitch,  
16:10 - that is going to be equal to false. I'm also 
going to simply copy this and paste it, paste,  
16:16 - paste it and this one is going to be pitched then 
we're going to have the role. And last but not  
16:21 - least, we're going to have the yard basically, as 
I said, this is not going to allow the controller  
16:26 - to rotate, the controller is not going to rotate 
this character instead, we are going to do that  
16:33 - from within this class. And since this is a side 
scroller, we're not going to rotate at all. Next,  
16:38 - I'm going to create the camera so our side 
view camera is going to be equal to create  
16:44 - default sub object and it's going to be type of 
view camera component like that. And I'm going to  
16:51 - give it a name by passing here a text. And that 
name is going to be side view camera Simple as  
16:58 - that There you go. Nothing complicated, I'm also 
going to or I don't want the controller to rotate  
17:06 - the camera as well. So I'm going to say side view 
camera. And over here, I'm going to say be use pan  
17:12 - control rotation that is going to be false. 
So this is not going to allow the controller  
17:17 - to rotate the camera. Next, I'm going to set the 
character movement to face the direction that we  
17:25 - are moving to so we are moving to the or in 
this case, because the game is a side scroller,  
17:31 - we can move forward or we can move backwards. 
So that is why I'm going to say over here,  
17:36 - get character movement. And from there, I'm 
going to say be orient rotation. So orient  
17:43 - rotation to movement that is going to be equal 
to true, which is basically going to allow us  
17:48 - as I said, to rotate towards the direction where 
we are going. Now this is going to be the rotation  
17:53 - rates, I'm going to say get character movement, 
but I'm going to copy it because we're going to  
17:57 - use it the few times over here. And I'm going to 
see here a rotation rate. And that's going to be  
18:03 - equal to App rotate or, and over here I'm going 
to say zero for the X 720 for the y and 0.0 F  
18:14 - for the Z now if somebody is confused if this is 
your first time seeing Unreal Engine c++ code,  
18:20 - first things first, I'm advising you to go 
through my c++ tutorial series here on YouTube.  
18:25 - You'll have that in my Academy as well. But what 
I wanted to say is if you're confused why I'm  
18:30 - using here is 0.0. But over here 720 point and 
I don't add zero what is the difference? Well,  
18:36 - there is you there isn't actually so you can 
add zero you can emit zero is the same exact  
18:42 - thing. So that is when it comes to the rotation 
rate that I'm going to actually point zero here  
18:49 - and move this backwards, and there you go. So 
next we're going to set the gravity scale for  
18:54 - our characters. So I'm going to say gravity 
scale that is going to be equal to two.  
19:00 - I'm also going to set the air control so air 
control is going to be equal to zero point f  
19:05 - air control is basically how or the how much 
control of our character do we have while he's  
19:12 - in the air the higher the number, the higher 
the control. Next we're also going to say here,  
19:17 - our jump z velocity is going to be equal to 1000. 
That's basically going to be you know how far or  
19:25 - how high we can jump. Next over here I'm going to 
say ground reaction is going to be equal to three.  
19:31 - And ground friction is basically you know 
the collision with the player and the ground.  
19:36 - Also over here I'm going to set the max 
walk speed that is going to be equal to 600.  
19:42 - And last but not least max fly speed that is 
going to be equal to also 600. And there you go.  
19:49 - And now we are going to get our temporary 
positions and we'd say temp pose that is  
19:53 - going to be equal to get actor location, which is 
the current location of our actor or Basically the  
20:00 - game character and I need this temporary position 
because I'm going to say our z position variable  
20:05 - is going to be equal to temp, position 
that z plus 300.0. There you go.  
20:13 - And now what do we are, what do 
we need to do, we need to bind,  
20:21 - we need to bind our controls if we want to move 
the character. So over here, we have our set up  
20:27 - player input. And this is where we are going to 
bind the axes and the jumping and all of the good  
20:31 - stuff. So now we have this player input component 
that is passed over here in the setup input  
20:36 - component. So I can simply use that. And I can 
say, player input component, which is, you know,  
20:41 - called as you can see, to bind functionality 
to input. So I'm going to say over here, bind  
20:48 - action. So bind action, and I'm going to bind 
the jump action and how where or what, where do  
20:58 - I have this jump action? Well, the jump actions 
over here, if I go into the project, here it is  
21:03 - action mappings. And this is the jump action. 
So this name needs to match up with the name  
21:08 - over here that we specify. So bind that to. And 
of course, because this is an action, we can press  
21:15 - it and release it. So I'm going to say IE pressed 
basically, what do we want to do when we press the  
21:20 - jump button? Well, over here, we're going to bind 
it passing this as well. And over here a character  
21:28 - call on call on jump, there we go. So 
essentially, when we press the jump button,  
21:33 - or in our case, the jump button is denoted with 
the spacebar. So when we press the spacebar,  
21:40 - we are going to call the jump functionality from 
the character that we have inherited. Because this  
21:45 - class inherits from the character see here public 
a character. And the character has some built in  
21:51 - functionality such as jumping. So I'm also going 
to copy this because when we release it, we are  
21:56 - going to so this is I II pressed and over here, 
ie released. So when we release the jump button,  
22:04 - instead of jumping, we're going to stop jumping, 
this will stop the jumping of the player and he  
22:09 - will start to fall down Simple as that. Next I'm 
going to take the player input component, and  
22:16 - now I'm going to bind the axes instead of binding 
the action and I'm going to bind the move right.  
22:23 - And I'm going to bind it to this referring to this 
class and referring to the a runner character call  
22:31 - on call on move right? There we go. So this 
right here is going to bind to the move right,  
22:38 - which is again, going back over here, this is that 
move right, it is going to bind to our move write  
22:45 - function, which is this function over here. So 
essentially Now, over here in our move right,  
22:56 - we are going to add the code that is going to 
move the player. So over here, we're going to test  
23:00 - if can move and we are going to use this to 
the note if the player can move when he's dead,  
23:05 - we will see that later on. But if the player can 
move we're going to say add movement input. And  
23:10 - from here I'm going to say f vector. So it's f 
vector, and over here, zero movement on the X on  
23:19 - the Y is going to be one and on the Y or actually 
on the Z, it's also going to be zero in over here,  
23:26 - I'm going to pass the value that we have. Now in 
order for this to work we do need to denote inside  
23:33 - of our Begin Play that can move. So can move is 
going to be equal to true. This is when we start  
23:39 - our game, which is you know normal and all of the 
good stuff, otherwise it will not work. So I'm  
23:43 - going to hold Ctrl Shift and press B This is going 
to compile my code. And of course, we're going to  
23:49 - wait a few moments. I don't know maybe I will cut 
out this video depending on how much it will take.  
23:56 - Because again, my SSD is the lot here, I can also 
try to sync to you none and then and then and  
24:01 - then there you go. It worked. You see here build 
succeeded, which means now we can go inside of our  
24:08 - editor. And if I were to go into the gameplay and 
hit the play button, we do see a character and we  
24:13 - can move the character but this is not the her 
character. This is the built in one that we have  
24:19 - that we have created with the project. So in order 
to create our own character, I'm going to right  
24:24 - click over here and go into the new folder. I'm 
going to call do some blueprints. And from here  
24:30 - I'm going to click and go inside of that folder 
and I'm going to create a blueprint class and  
24:34 - I'm going to inherit from the runner character. 
So here is my runner character and I'm going to  
24:40 - click on that one and I'm going to say BB runner 
character. So this is now our character. This is  
24:47 - going to create our character from the class that 
we have just created. Of course, as you can see,  
24:52 - we don't have anything. We do have the side view 
camera you see we have created it over here, but  
24:56 - what we need to do is we need to click on the mesh 
and over here, we need To add the Skeletal Mesh,  
25:01 - which is basically going to be our mannequin, 
which is this bad boy over here, I'm also going to  
25:08 - set his z location to negative 97 to lower him a 
little bit down as you can see, and I'm going to  
25:14 - rotate him 90 or minus 90 degrees like that. And 
basically that would be it. I can compile save  
25:22 - this well one more thing we do need to attach 
here, a blueprint class for his animation,  
25:30 - which again, click on the drop down list and we 
have the third person an MVP, which automatically  
25:35 - will make him or he will be animated. Now in order 
for us to add our character right now in the game,  
25:42 - we need to create our own game mode because 
if you remember from the previous tutorial,  
25:45 - previous Unreal Engine tutorial series, over here, 
inside of the maps and modes, you see we need to  
25:51 - create our own game mode. Because currently, 
again, if I hit the play button, this is not our  
25:55 - character. See, this is not the character that we 
want. Instead, over here, I'm going to right click  
26:00 - and blueprint class, and I'm going to filter from 
game mode or filter for game mode and click here  
26:07 - and inherit from game mode is going to be our 
BP runner or side runners cuse me side runner  
26:14 - underscore game mode. And let's go over here 
into the into the Project Settings and select the  
26:22 - BP side runner game mode. And here instead of the 
default pawn, I'm going to select the BP runner  
26:30 - care Rector. And finally, this is going to 
allow us to have our own character in the  
26:36 - game. So if I hit the play button, there we go, 
if I inject, here he is. Now we if I possess him,  
26:43 - we have a problem. You see, we don't see the 
character, we don't see anything. And the reason  
26:48 - for that is we can move him if I don't know if you 
notice, pay attention to where he is currently if  
26:54 - I possess him, and if I move like this, I'm 
moving. And let's try to see where he is now.  
27:00 - You see, he almost fell down. So there we go. 
Okay, so what do we need to do in order for this  
27:08 - to make this work? Well, we need to go back in our 
c++ class, and over here where it says the tick.  
27:15 - So inside of Arctic functionality, we need 
to say our temp position. So temp p o S is  
27:21 - going to be equal to get actor location, 
again, we're getting the actor location,  
27:26 - our temp position that x is going to be equal 
to or we're going to subtract from it 850  
27:35 - like this, and on the Z position, so temp position 
that z is going to be equal to z position. So z  
27:42 - position. And last but not least, our side view 
camera set world location over here, we're going  
27:50 - to pass the temp position, and there you go. So 
what this is going to do, it's again going to  
27:59 - get the current actor location, the current actor 
location is basically Well, the actor location,  
28:07 - just getting but the current location is the 
location of our own actor of the character,  
28:12 - we are going to then change the exposition, 
So subtract from it 850, and the Z position is  
28:18 - going to stay the one that we have over here, and 
then we're going to set that position to the word  
28:24 - location of the camera. So Ctrl Shift B in order 
for us to compile this. And by the way, I'm not  
28:29 - going to do that, but you're going to do it if you 
want to see the outcome like if you change this  
28:34 - number to minus 1000 minus 100 said the Z position 
over here, I don't know plus 500. Try it out see  
28:42 - the outcome that will be you know, that will be 
our practice you will understand more so if I  
28:48 - hit the play button now There we go. You see here 
is our character he falls down Look at that, we  
28:53 - but if he falls down like that, we cannot see him 
anymore. So that's all there is to it. Anyways,  
28:59 - again, hit the play button, we can possess the 
character, look at that, we can move over here, we  
29:03 - can move over here. That's the point you see, and 
he is rotating towards the direction where we are  
29:10 - moving. If we move backwards, you see he rotates 
to move backwards. If we move forward, he rotates  
29:14 - to move forward. There you go, we can press base 
to jump like that. There you go. But the issue  
29:21 - is we only have this one platform. How are what we 
need to do well, we need to create more platforms,  
29:27 - it's logic. So starting from the next video, we 
are going to prepare everything to start creating  
29:31 - our level parts and then we are of course going to 
start encoding all of that so that we can have our  
29:38 - level to play the game. If something was not clear 
in regards to this video, make sure that you ask  
29:42 - in the comment down below and I will help you 
out and I will see you guys in the next video.  
29:47 - Alrighty then my game dev ELS before we can 
create our level we also need to create the  
29:52 - obstacles because they are going to be part of 
the level. So over here in our c++ class, I am  
29:58 - going to create a new c++ class and it is going 
to inherit from the actor. So one is going to be  
30:03 - called obstacle. So over here, I'm going to see 
up the call. And of course wait for Unreal Engine  
30:10 - to add it into the project again, that SSD is 
going to arrive on Mondays or Thursday, Tuesday,  
30:17 - because now it's Saturday for me recording this. 
I'm going to sing to you in the meantime then  
30:21 - and then and then and then and then and then and 
then and then and then and then and then and then  
30:25 - thank you very much that will be $5 extra. Now the 
bad news is that we need to create another one.  
30:32 - So I right click over here, New c++ class, and 
this time an actor again and this one is going  
30:37 - to be spikes. So spikes There you go, hit enter, 
of course and wait for it to torture us. What else  
30:46 - can I say? The good thing is that we are not going 
to code anything. Instead, we're just going to  
30:50 - use these classes so that we can, you know, do a 
cast later on when we collide with these objects,  
30:57 - of course, from the blueprints that we will 
create. So over here, if I open it, let me  
31:01 - just reload everything, reload again. There you 
go. So we have the spikes, we have the obstacle.  
31:07 - But as I said, we are not going to code anything 
over here. Instead, we're just going to use these  
31:12 - as references to create blueprints. So let's go 
back in our Unreal Engine, and over here into  
31:17 - the blueprints, I'm going to right click a new 
folder, and I'm going to call this one obstacles.  
31:21 - And inside of the obstacles, I'm going to 
create a blueprint class one is going to  
31:26 - inherit from the obstacle, which is this bad 
boy. And I'm going to call it BB obstacle.  
31:32 - Simple, very simple, right click again, blueprint 
class. And over here, one is going to inherit from  
31:38 - the spikes. And I'm going to call it BP underscore 
spikes. Simple. Double click it, open it in  
31:46 - our editor over here almost said Visual Studio, 
but it's actually the editor again. So what are  
31:52 - we going to do? Well, first things first, for the 
spikes, I am going to click on this BP spikes and  
31:58 - add a static mesh component that I'm simply going 
to call spike very simple. Now for the spike  
32:06 - Static Mesh over here, I'm going to click on the 
drop down list and filter for our quad pyramids.  
32:12 - I'm going to say quad pyramids, there you go, 
this is the one that we want. And over here for  
32:18 - the materials, I am going to filter for the clay 
new, and this is the one that we want. There you  
32:26 - go. This is pretty much it except over here, I'm 
going to set it to minus 50 on the Z position,  
32:35 - so simple as that. And also when it comes 
to the collision, we are going to do one  
32:40 - interesting thing. First things first, I'm going 
to compile and save this and I'm going to go here  
32:44 - into the project settings. And I'm going to go 
here into the collision for the project settings.  
32:48 - So it's basically this over here under engine 
when you go into the project settings. Over here,  
32:54 - we can create our own object channels. What does 
that mean? That basically means we can create our  
33:00 - own layers to differentiate the collision between 
actors. So over here, I'm going to click on new  
33:06 - object channel, and the name for that one is going 
to be obstacle and the obstacle is going to block.  
33:14 - So the obstacle is simply going to block the 
player, it's basically going to be a solid body  
33:19 - not allowing the player to pass through. And that 
is what a block is. And I'm going to click here  
33:23 - except next over here, I'm going to say new object 
channel and this one is going to be our spike,  
33:29 - but the spike is going to overlap, the spike is 
going to overlap so that we can overlap in the  
33:35 - deck collision between the spike and the player. 
I'm going to click here except so now we have  
33:38 - the block and the overlap channels over here. What 
does that mean that means now that I can go inside  
33:44 - of the spikes over here and scroll down over here 
where it says the collision There you go, this  
33:50 - bad boy over here, I can zoom in for you to see 
There you go. So over here the collision preset.  
33:58 - I'm going to set that to custom so click on the 
drop down list and click here of custom from the  
34:02 - list. Over here we are going to have the collision 
back to query only. So we are going to have query  
34:10 - only no physics collision because we don't 
want the physics we don't want to collide as  
34:15 - a physics object with our pyramid or basically 
the spike and over here for the object type.  
34:21 - Now we are going to have so let me just Compile 
and Save this. So now we should see the spike and  
34:26 - the obstacle which is the one that we have just 
created over here. If you don't see it right away,  
34:31 - just Compile and Save for your blueprint. And 
then here from the object type where it says world  
34:37 - dynamic you can select this one to be spike, and 
there you go. So over here I'm going to set our  
34:44 - spike to overlap everything except over here the 
obstacle I don't want it to overlap the obstacle  
34:51 - and we can also set here not to overlap or simply 
ignore the camera because we don't need the camera  
34:55 - Compile and Save that. So it is going to overlap 
all of these other ones. responses such as the  
35:00 - pawn physics body, which basically our player 
were going to set him to be upon. So this right  
35:06 - here will be able to overlap with the player. And 
of course then we will detect collision between  
35:11 - them and destroy the player and all of that good 
stuff. So now we can move forward to our cube  
35:19 - or to the obstacle which is this one and again, 
from here static component we are going to filter  
35:23 - for our static mesh, and I'm going to call this 
one cube or simply call it block obstacle There  
35:31 - you go. Over here for the static mesh, I am going 
to filter for the cube. So simply type cube and  
35:37 - there you go, where is the QB QB. There you go, 
here is the QB QB. And over here for the material,  
35:43 - I'm going to say basic shape material. This is 
what I want Compile and Save that. Now I'm going  
35:50 - to leave at 000 for X, Y and Z and I'm not going 
to touch it rotation I mean there is no point in  
35:55 - touching the rotation because it will still be the 
same it's a cube. And going back over here again  
36:01 - for the collision preset instead of block all 
dynamic we are going to set it to custom over here  
36:07 - the collision enabled will be query and physics 
because again, this obstacle this block obstacle,  
36:12 - it is going to be a solid body and it is going to 
block the player when the player collides with it,  
36:18 - the player will not be able to pass through it. 
And over here for the object type we're going to  
36:24 - set that to be an obstacle and we are going to set 
it to block everything except over here to spike  
36:30 - we don't need it to block the spike you can simply 
overlap this spike, but it is going to block  
36:35 - everything meaning it's a solid body, I'm simply 
going to compile and save that and there you go.  
36:43 - So this is pretty much it as a preparation when it 
comes to creating our level parts. Now of course  
36:51 - if something was not clear, make sure that you ask 
in the comment down below and starting from the  
36:54 - next video we are going to build our level pirates 
and the level and all of the good stuff then we're  
37:00 - going to start spawning them and yada yada 
yada. So I will see you guys in the next video  
37:05 - would it is game day begins here EDA has moving 
forward now we are going to create our levels and  
37:11 - for that we are going to go inside of our c++ 
classes and right click and build a base level  
37:17 - class which is going to inherit from the actor 
and I'm going to call this one so over here,  
37:22 - base level and hit enter to create the class 
and of course, we will have to wait a moment  
37:29 - or two or a gazillion moments for Unreal Engine 
to take mercy upon our motors mortal souls.  
37:37 - Until we forget SSD man the more you watch these 
videos, the more ad revenue i get i guess and the  
37:42 - more faster I can buy that SSD. Just kidding, 
but let's go over here and reload everything  
37:49 - there you go. Here we have our base level dot 
age and here we have our base level dot cpp  
37:55 - so inside of our dot h The first thing here at 
the top right below the includes over here I'm  
38:00 - going to forward the Claire so I'm going to say 
class you box bone and as I said this is called  
38:06 - forward the coloration so that we don't have to 
use the import or include Excuse me. Now going  
38:13 - back here at the bottom right below the public 
virtual void I'm going to create protected  
38:18 - and I am going to create a new property. And 
this your property is going to be blueprint  
38:25 - read and write it is also going to be 
editable anywhere. So edit anywhere.  
38:30 - And last but not least I'm going to set it under 
a category which is going to be equal to triggers  
38:36 - like that. What the hell is this teacher I don't 
know I'm confused the I want to slap you listen,  
38:42 - listen, and don't slap me. Okay, so what we 
have over here is blueprint read and write,  
38:48 - basically meaning the component that we now 
declare which is going to be a you box component,  
38:53 - which is a pointer, so I need to add a star over 
here. And I need to call this or I don't need but  
38:57 - I'm going to call it a trigger, which means that 
this component trigger can be read and written, we  
39:04 - can edit it and we can get a value of it inside of 
the blueprint edit anywhere means we can edit it  
39:10 - inside of the Blueprint Editor on the side in the 
details tab. And the category triggers basically  
39:18 - when we search for this component in the blueprint 
code, we will find it under the triggers category.  
39:25 - So we can also call it my triggers you can call 
it like that and we will see that when we search  
39:30 - for it. So what I'm going to do is copy this and 
paste it down below because we are going to have  
39:35 - the same signature, but this time we're not going 
to call this one trigger but I'm going to call it  
39:40 - spawn location like that. And last but not least, 
we're going to have to public function so public  
39:47 - like that. And what's gonna happen here 
these functions are going to return a u box  
39:52 - component which is a pointer so this one is 
going to be get trigger which is going to get  
39:58 - our trigger not Teague. It's a trigger, 
and another one for you box component.  
40:07 - And it is a pointer. So over here, I'm going to 
say get spawn location like that. And there we go.  
40:14 - Now don't worry if this is still white text, 
you know takes unreal lunger engine for this to  
40:20 - compile. While we're waiting for that SSD, you get 
my point I'm going to right click on this bad boy  
40:26 - quick actions and refactoring, I'm going to create 
a declaration for it over here, do the same thing,  
40:31 - quick actions, refactoring, create a declaration 
for it. And of course, I don't know what to say I  
40:39 - mean, you see, you see the issues we all have. So 
inside of our CPP is where we are going to include  
40:48 - same as what we do with our players. So include, 
and I'm going to include components, backslash box  
40:55 - component dot h, it's that age, there you go. And 
inside of our Begin Play, I am first going to test  
41:04 - if the trigger, if it's not equal to null 
PTR, meaning null pointer, then I'm going to  
41:11 - say trigger. And from here, I'm going to say be 
hidden in game is going to be equal to true and  
41:17 - not allow that trigger to be you know, visible 
in the game live, just compile all of this,  
41:22 - so that we make sure that nothing is wrong, and 
that everything should be working because it's  
41:26 - not giving me out to complete the argument, the 
anything you see build succeeded, we're good to  
41:31 - go. But you know, it takes Unreal Engine, I will 
probably have to restart or close my Visual Studio  
41:36 - and open it for this to work. I don't know, do 
not ask me over here right now going to return  
41:41 - a null pointer, instead, I'm going to return a 
trigger. And over here, I'm not going to return an  
41:46 - old pointer, instead, I'm going to return a spawn 
location. That's all there is to it. And again,  
41:52 - make sure that you compile or build this. So it's 
Ctrl, Shift B to build this code. And voila, there  
41:59 - you go. Of course, another way to build this code 
is to go here and simply Click Compile does the  
42:04 - same exact thing. But I am not going to do that. 
Otherwise, we will wait a lot. So let's go over  
42:10 - here inside of our blueprints, and right click 
and create a new folder, and this one is going  
42:14 - to be our levels inside of the levels folder, I'm 
going to right click and create a blueprint class  
42:20 - and inherit from the base level, there you go and 
select I'm going to call this on BP level one,  
42:27 - of course, we're going to have level two up to 
level 10. And what's going to happen in this one,  
42:31 - I'm going to open it and I'm going to create a 
few levels. And then I'm going to leave up to  
42:36 - you to create the other levels because you know, 
this process can be a little bit tedious, it takes  
42:40 - a little bit of time and all of the good stuff, 
the first thing that I'm going to do over here,  
42:46 - in side of the inside of the VP level, 
I'm going to go and add a few components,  
42:52 - the first few are going to be a static mesh, one 
is going to be a floor. And another one, I'm going  
42:59 - to duplicate this bad boy, so copy and paste then 
instead of floor, I'm going to call this one cube,  
43:06 - there you go. And also I'm going to have to box 
trigger. So box collision, that is one I am going  
43:12 - to call and this is not going to be a child of the 
cube. So I'm going to call this one trigger box,  
43:19 - copy and paste it and this one, I am going to 
call it spawn location box. Let me just Compile  
43:27 - and Save that. And let me just add everything 
that I need. And we are going to code or  
43:33 - actually before that in the Event Graph. What I'm 
going to do is remove all of this. And over here  
43:41 - we have in the Event Begin Play, I'm going to set 
the spawn location. So I'm going to right click  
43:49 - over here and I'm going to say set spawn location. 
And notice it's under my triggers. Look at that,  
43:56 - you see this over here. Look at my triggers. 
It's basically what we did in our code. So  
44:02 - if I go back over here, where we have declared 
these triggers, look at that. So my triggers,  
44:07 - this is that category. So now we can find them 
under this category inside of our blueprints  
44:13 - when we want to code. So I'm going to right 
click and I'm going to say set spawn location  
44:20 - and the spawn location again, make sure 
that it is under my trigger. So set spawn  
44:25 - location, here it is under my triggers, 
and execution flow is going to go over here  
44:31 - and I'm going to set that or the spawn 
location box is going to be the spawn location.  
44:37 - Next from there, I'm going to say set trigger, 
and it's this one over here under my triggers.  
44:45 - So the execution flow is going to continue over 
here and then I'm going to take the trigger box  
44:50 - and plug it in over here and let me just Compile 
and Save that. What this is going to do is going  
44:56 - to set the spawn location from our code to this 
one over here. So we have have, you know connected  
45:00 - these two, meaning that now this is a reference to 
this over here, same thing that we did over here,  
45:08 - make sure that you Compile and Save that. So 
now going inside of our viewport, and here  
45:14 - is my floor, what am I going to do to the floor? 
Well, I'm not going to do anything to the floor,  
45:19 - because you know, I'm a good boy, I'm not going 
to do anything. Instead, what I'm going to do  
45:23 - is go over here for the static mesh and filter 
for the cube. And there you go, here is our cube  
45:29 - for the material, we are going to say basic shape 
material, voila, that's all there is to it. And I  
45:37 - am going to change the scale of it. So the scale x 
is going to be 10. The scale y is going to be one  
45:46 - and R, let me just go over here, I have locked 
the icon. So I don't want to lock anything.  
45:51 - But over here, scale, x is going to be 10, y is 
one and 0.5. So this is going to be this is going  
45:59 - to be our floor. Next we're going to have a cube. 
So over here, taking the cube. And again, adding  
46:07 - a cube to it. And over here basic shape, basic 
shape material, there you go. Now for this cube,  
46:16 - I'm going to set it and 90 for the Z position and 
leave it like that, that's all there is to it,  
46:25 - the trigger box, I'm going to take it and for the 
trigger box, I'm going to set that location 380  
46:33 - The location was going to be stay or 
stay at zero and the location z 250.  
46:38 - And I am also going to set the Z scale to 10. 
Over here for the trigger box, the trigger box  
46:46 - is basically going to be the trigger that when 
we pass through it then we are going to detect  
46:50 - collision and then we are going to spawn a new 
level. So this is what we are going to do with the  
46:57 - trigger box. So when the player passes here and 
he touches that collision, then we are going to  
47:02 - then we are going to detect that and we are going 
to spawn new level and over here just make sure  
47:07 - that it is overlap all dynamic. So the collision 
preset is set to that. Next we have the spawn  
47:13 - location and the spawn location. What am I going 
to do with it is simply I am going to reposition  
47:19 - it. So I'm going to position it at 1,000th. And 
that's all there is to it. So the spawn location,  
47:27 - we are going to use its position to position 
the next level. So when we spawn a new level,  
47:32 - it is going to start positioning from here. And 
basically it's going to form a new level like  
47:38 - that. Simple, that's all what we are going to 
do with the spawn or with the spawn location.  
47:46 - So this is our level one and just make 
sure that you Compile and Save that. If  
47:52 - I go over here inside of the gameplay, I'm going 
to right click and create a new blueprint class.  
47:56 - And now you're going to assume that again, I'm 
going to use the base level but this time No,  
48:00 - instead I'm going to use level one. And 
every next level that I create is going to be  
48:06 - a child of level one. So BP level one, I'm going 
to select that, and this one's going to be BP  
48:12 - level two, there you go. And I'm simply going to 
open it, it already has all of these components  
48:17 - set up in the Event Graph, it is going to call 
the parents Begin Play which is going to do  
48:22 - all of this, it's going to prepare everything, 
we don't have to do it again for this blueprint.  
48:27 - Very clever I know. And that's all there is 
to it. Of course now we're simply going to  
48:33 - add new things to it. And that would be it, 
for example, the cube that we have over here,  
48:39 - I'm going to reposition and so the exposition is 
going to be minus 330, the Y is going to stay the  
48:46 - same and the Z is going to stay the same. But I'm 
also going to add new boxes. So I'm going to copy  
48:52 - this cube and paste it and I'm going to call this 
one cube two. And for this cube two, I am going to  
48:58 - reposition it. So x is going to be 190 y zero z 
130. And I am going to set the Z scale at three  
49:09 - for the Z scale. Simple as that and copy this 
one copy and paste now we have the cube three,  
49:16 - and for the cube three, the position x is minus 
70, the position y 01 180 for the Z and set the  
49:24 - Z scale 2.3 and Wallah, Compile and Save 
that. So this is our level two blueprint.  
49:33 - Simple, very, very simple going 
back over here, right clicking,  
49:36 - and again blueprint class. Again, inheriting 
from level one, there we go. Not level two,  
49:42 - but level one, and this one is going to be BP 
level three. Again, we have everything prepared we  
49:48 - we have our base queue, we have everything here 
prepared in the Event Graph. We don't have to do  
49:53 - anything, but we are going to change or reposition 
this cube. So again, minus 330 For the x, y,  
50:02 - I'm not going to touch in z, I'm not going 
to touch so it's going to stay as is. But now  
50:06 - I'm going to copy this cube and rename it to cube 
two. And this cube two is going to be repositioned  
50:15 - at 70 for the x, y 04 20 on the z axis, 
and over here, I'm going to say three scale  
50:24 - for the Z Compile and Save that. Moving forward, 
we are going to have another level. So blueprint  
50:32 - class over here, inherit from the level. So 
inherit from our level one, select BB, level four,  
50:41 - double click it and open it over here in Visual 
Studio. And again, simply repositioning things  
50:48 - so cube over here is going to be repositioned 
x is minus 303 30, excuse me, 174 the z axis,  
50:57 - then I'm going to copy this cube and rename it 
to cube two. For our cube do, I am going to set  
51:04 - the position 160 on the x y zero 2020, or two to 
zero for the Z and resize the Z scale to four.  
51:15 - Last but not least, we have another cube, so copy 
and paste, and this one is going to be at the 10  
51:20 - for the X 370 on the Z and the scale, Z is going 
to stay one, but the scale x is going to be two  
51:30 - and Compile and Save that this is our level 
for moving forward, I'm going to right click,  
51:37 - and again inherit from level one. There you go. 
And this one's going to be our BP level five. And  
51:45 - now we're going to add some spikes in here. And 
this is the last level that I'm going to create  
51:49 - the next levels are on you. So over here for the 
cube, I'm going to set the x at minus 30 and the Z  
51:58 - 390. And I am going to set the x scale 
to three the Z scale 2.3 There you go.  
52:06 - And last but not least, we are going to attach 
something or we are going to attach a spike.  
52:13 - And I am going to do the following. So here 
I'm going to click on Add Component selecting  
52:20 - the BP level and I'm going to filter for child 
actor. And this one is going to be our spike.  
52:26 - There you go. I'm going to call this a spike 
too. But of course we're going to have spike  
52:29 - one as well. So copy this one. And so what we 
are going to do for our spike to is over here  
52:36 - you see the child actor component. From here, 
we can select the blueprint, we can click here,  
52:41 - and I can filter for spikes. There you go. 
And let me just remove this one I'm going  
52:46 - to duplicate this one after. So for this one, I'm 
going to set the X to two to zero and the Z is 40  
52:55 - There you go. But I am going to move it a 
little bit upwards so something like this.  
53:03 - There you go here on this position grid snap 
Val and we decided to one so I can snap it a  
53:08 - little bit better, while odd There you go. And I'm 
simply going to copy this and paste it and this  
53:13 - one's going to be our spike one and simply move it 
over here. Basically the position x is minus 260  
53:23 - and there you go Compile and Save that so this is 
the last level I'm going to create I'm going to  
53:29 - cut out the video right now and create the other 
levels and go back and show you the levels that I  
53:34 - have created but you have plenty of info for you 
to create your own levels. A quick note you don't  
53:39 - have to create the same levels as I did you can 
create you can create levels on your own which is  
53:46 - a good practice and I encourage that every single 
time. So again for this spikes when we you know  
53:52 - touch them we are going to die but we will see 
that later on. Do not worry about that right now.  
53:57 - And basically that's it every single level that 
you create is going to inherit from level one.  
54:01 - I'm going to cut out the video right now and 
I'm going to continue just remember when you  
54:05 - add spikes you're going to add them as child actor 
components. So from here you're going to filter  
54:10 - for the child actor when you select the child 
actor over here we're going to select the spikes  
54:15 - for that child actor. And that would be it. That 
will be basically it. So I don't have any the NX  
54:24 - anything nx I don't have anything else clever 
to say I don't know how to talk I will see in  
54:28 - a few when I create the other level parts and 
I am back Did you miss me because it took me a  
54:33 - while to create all this of course for you it was 
a few moments but you know if you didn't miss me  
54:37 - then you can watch this video anymore. I'm just 
getting anyways here we have the level 6789 and  
54:43 - 10 so this is my level six as you can see you can 
also download the complete project I have provided  
54:47 - that under the you know importing or creating the 
project video you can you know download the assets  
54:52 - or basically the complete project as well and see 
that on your own or you can create your own levels  
54:57 - which I highly encourage you to do but basically 
this is my life. Six as you can see so we have  
55:01 - a cube here and two spikes Next we have the level 
seven which is very simple as you can see I'm not  
55:06 - even moving the collision box or the trigger box 
and the spawn position they're staying at the same  
55:12 - spot where they are in level one and I'm just you 
know moving the cube resizing it adding here child  
55:18 - actors which are the spikes over here I have the 
level eight as you can see this is my level 8123  
55:24 - There you go till three boxes or T three cubes 
that is level nine There you go. We have a spike  
55:30 - in this weird thing over here the L shape if your 
name is Lauren, then you know this is for you,  
55:36 - Lauren, and over here we have the level 10 
There you go. And that's all there is to it  
55:41 - compile and safe. I cannot say anything else 
or I don't have anything else clever to say.  
55:46 - Except if something is not clear. Make sure 
that you ask in the comment down below.  
55:51 - And yeah, I will see you in the next video 
you know, where else can I see you, you know,  
55:56 - I don't live where you live, I don't know you 
in person. So I cannot see you, you know in your  
56:00 - home. I can see in the next video. So again, if 
something's not clear, as gone below, I'll see you  
56:05 - in next video. Alrighty, then my game dev elf. So 
let's go here in the c++ class, I'm going to right  
56:12 - click and create a new c++ class inherit from the 
actor and this one is going to be my spawn level.  
56:19 - So spawn level level spawner, however you want 
to name it, I do not care. You can name it car,  
56:25 - you can name it, same name as your grandma, that 
is up to you, I cannot control you. Okay, I named  
56:31 - it spawn level. And this is going to be the class 
that is going to allow us to spawn all of these  
56:36 - levels. But before we actually can do that, we 
of course need to add a few things inside of that  
56:41 - class. But first things first, you know, the SSD 
drive is still not there. I think I will finish  
56:46 - this recording today, which is Saturday for me, I 
don't know which day is for you. And there we go.  
56:54 - Some info that we don't need. So here we have 
the spawn level CPP and spawn level dot h. So  
56:59 - what's going to happen in the spawn level dot h, 
first things first here above below the includes,  
57:04 - I am going to add my a base level class, because 
we are going to have levels that we are going to  
57:11 - put inside of this inside of the spawn level. So 
over here, I am going to create another public  
57:22 - like this. I know it's right below the public. 
This is how I differentiate my own variables,  
57:27 - I like to group them and that's all there is to 
it. So over here, I'm going to create a u function  
57:33 - like that. And this is going to be my void spawn 
level, which is going to take a Boolean is first  
57:41 - meaning is this the first level that we are 
going to spawn, we're also going to have  
57:45 - our own on begin overlap. So I'm going to go 
here inside of our player character and simply  
57:51 - grab it from here so that I don't have to write 
all of these parameters and all of that stuff,  
57:56 - you get the point it can be a little bit 
tedious, it can be a little bit you know,  
58:00 - whatever. So there you go. So just go from the 
player and grab it copy and paste it is the  
58:05 - same signature, the same name and everything. 
Next over here we are going to have protected.  
58:10 - And for the protected, we are going to first 
have a player who is upon and it's a pointer  
58:16 - and I'm going to call him player, we are going 
to get a reference to the player. Next over here,  
58:21 - I'm going to create a new property, 
your property which is going to be added  
58:27 - anywhere. So we will be able to edit it from 
the blueprint itself and is going to be a T  
58:33 - sub class of a base level and is going to 
be our level one. And this is the reason why  
58:40 - I have imported this over here. So don't worry 
if you don't have those autocompletes I mean,  
58:45 - I don't have them. As you can see, the reason for 
that is simple because Unreal Engine is slow. And  
58:50 - you know, reading all of this and the SSD drive is 
still not here. So over here we have the level two  
58:55 - and we have the level three, come on level four, 
come on level five, you can see you know, some  
59:01 - not everything about the game that is, you know, 
fun and all of that stuff. Some things are a  
59:06 - little bit tedious for you and me to do but hey, 
you sign up for this, I did not you know, I didn't  
59:15 - threaten you or whatever didn't force you. So 
this is all on you. Next year we're going to  
59:20 - have a T array or simply an array of a base 
level who are pointers, and there's going to  
59:27 - be my level list. And last but not least, 
we are going to have also public variables  
59:32 - one is going to be a random level because we are 
going to randomize the spawning of the level.  
59:38 - We are also going to have an F vector which is 
going to be our spawn location for the level  
59:45 - and I'm going to call here f vector simply 
like that. We're also going to have the F  
59:50 - rotate tour and this is going to be our spawn 
rotation again f rotate or simply declare it  
59:57 - over here and our f x spawn parameters which is 
going to be our spawn info was going to be equal  
60:06 - to again simply copy this over here so that I 
can declare it because these are the variables  
60:11 - that we are going to use over and over. And Ctrl 
Shift to build this bad boy because you know,  
60:18 - I need to build it okay. And yeah, that will 
be its Let us wait for it a moment or two.  
60:24 - And there you go. We have something over here I 
believe function public static void. Expect struck  
60:31 - Oh, okay. Okay. Okay. I didn't actually, 
you know, declared these do so right click  
60:38 - quick actions and refactorings create the 
definition. Simple. Right click Actions and  
60:44 - refactoring create the definition. Again, very 
simple, but yet, you know, people are forgettable,  
60:52 - they tend to forget things as you just saw that. 
I cannot wait for that SSD to arrive, man. It's  
60:59 - like, you know, I'm waiting for a new life, like 
I die that I'm not waiting to live again. So yep,  
61:06 - I'm going to sing to you. Let me take my 
Oh, Colin 18 Union union union union union.  
61:11 - I'm kidding, I don't have a ukulele. I don't 
know what that is. I just heard that word.  
61:14 - And I told you that Okay, so over here, let me 
just now compile this. And you see only now we  
61:23 - see you know, different colors of everything that 
we have declared and stuff like that. But now the  
61:28 - you know, completion or the build has succeeded. 
There you go. So now inside of the spawn level,  
61:35 - we are going to include or add our includes. So 
we are going to have over here include base level  
61:42 - that age, though that is one of the includes the 
next include is going to be our engine dot age. So  
61:49 - we're going to use the whole engine. And the 
last include is going to be our components,  
61:55 - box component dot h like that. There you go. And 
I don't know why it's giving me here a red because  
62:03 - you know, it's included the same thing. So what do 
we need to create here, inside of our spawn level,  
62:13 - is where the main thing the main magic is going 
to happen. So over here, what I'm going to do, I'm  
62:18 - going to say spawn location is going to be equal 
to f vector. And over here, I'm going to say 0.0,  
62:26 - f 1000 for the y and 0.0, F for the z, y 1000 will 
because 1000 units is or 1000 centimeters is how  
62:37 - large the level is because we you know, set the 
level to be 10 scale on the x axis, I believe,  
62:45 - I think was x axis I cannot remember. But anyways, 
it's 1000 units, which means that when we have one  
62:51 - level over here, if we want to place another 
level over here, that's 1000 units, that's all  
62:56 - there is to it. Next we have the spawn rotation, 
which is going to be equal to f rotate or, and  
63:04 - it is going to be zero here, 90 here and zero 
here, so on the Y where simply and wrote a shit  
63:13 - like that. So 90 on the y and there you 
go. What I'm also going to check over here,  
63:20 - or perform a check if this is not the first 
time we're spawning, so if not his first  
63:27 - which is basically the parameter that we are 
going to pass here when we spawn the first  
63:32 - level we are going to say this is true. But for 
all other levels, this is not going to be true.  
63:37 - So if it's not the first level, then I'm going 
to say here a base level which is a pointer, last  
63:43 - level I'm going to get the last level I'm going to 
say level list. And that last and this is from the  
63:49 - array of the level list where I'm going to get the 
last level and the reason for that is because now  
63:54 - I'm going to say spawn location. So spawn location 
is going to be equal to last level. And from here  
64:01 - I'm going to say get spawn location. And from 
there I'm going to get the component transform  
64:08 - component transform, and from there I'm going to 
say dot get translation There you go. And if I  
64:20 - can finish the statement, if I hover over it says 
returns the translation of the component basically  
64:26 - it will return the position of our spawn location 
and notice here I'm using get spawn location if  
64:32 - you remember in our base level over here, we're 
getting the spawn location by returning it Look at  
64:37 - that get spawn location, we're returning the spawn 
location and if you double remember inside of the  
64:42 - blueprint for that so if I go over here inside 
of the blueprints and the level and over here,  
64:50 - we are setting the spawn location to be equal to 
this one which is this bad boy over here and this  
64:56 - is that spawn location. So we are going to get 
that value that reference here. And from there,  
65:03 - we're going to know where is the last position of 
the last level. So next over here, I'm going to  
65:09 - randomize this, I'm going to say a random level is 
going to be equal to f math, call on call on. And  
65:16 - I'm going to use a Rand range between one and 
10, which is going to return numbers between one  
65:22 - and 10, including both of these. And then I'm 
going to say a base level, which is a pointer,  
65:27 - new level, by default is going to be 
equal to null PTR. So null pointer,  
65:33 - but now I am going to test for the random level. 
So if our random level is equal to one like that,  
65:42 - then I'm going to say new level, which is 
the one that we have just created over here,  
65:48 - that is going to be equal to get the world. And 
from the world, I'm going to spawn an actor,  
65:55 - which is a type of base level. So this is 
going to be the actor that we're going to spawn  
66:00 - and we're going to spawn the level one actor at 
the spawn location, using the spawn rotation,  
66:08 - throwing bars at the Mars and and over here, 
we're going to use the spawn info. So spawn  
66:14 - in felt like that. There you go. And simply 
now I can copy this, and I can say, Here else,  
66:24 - and paste this over here. If the random level is 
equal to do then over here, I'm simply going to  
66:29 - spawn level two, that's all there is to it, we 
need to read and we need to need to, why am I  
66:34 - saying limini, we need to repeat this process. 
So again, this one is three. Now over here,  
66:41 - we need to spawn the level three, going back over 
here, as I said, Sometimes things can get tedious  
66:47 - over here, random level four, over here and the 
level four, of course, we can do this, you know,  
66:55 - I mean, we need to do it, I don't know what I 
wanted to say, anyways, six now. And over here,  
67:02 - there you go six, over here, now 
Come on, are going to have 7789  
67:13 - and 10. And we're done. So don't Don't cry, don't 
be a cry, baby, and all of that stuff, be patient.  
67:20 - Imagine how I felt when I 
created all of this, you know,  
67:23 - so yeah, there we go. The last one is here. And 
finally, we are done. So down over here, spawning  
67:30 - the 10 over here. So based on the as you can see, 
based on the random level that we have over here,  
67:37 - then we are going to, as I said, this is going 
to return either one or 10 or numbers in between.  
67:43 - So based on those numbers, then we are going 
to set the new level which is currently at  
67:47 - null pointer to be equal to one of these levels. 
If it's one, then level one than dude and three,  
67:52 - you get the point. But if something is not clear, 
make sure you ask in the comment down below.  
67:57 - Over here what I'm going to do if we have a 
new level, we need to perform this test because  
68:02 - otherwise, if this gets to an old pointer, but of 
course there is no chance that this will get to  
68:07 - an old pointer because over here where you know 
the randomized numbers are from one to 10. And  
68:11 - we're testing for all of them. But if we have 
a level, then we are going to say if new level  
68:19 - and from here I'm going to get the trigger. So I'm 
going to get the trigger from the new level again,  
68:25 - what is this new trigger if or getting the trigger 
if you remember from the base level over here,  
68:30 - we are getting the trigger we're returning that 
the trigger is again, the huge box over here,  
68:37 - this is the trigger where the player needs to 
pass by so if the player passes by this trigger,  
68:43 - then we are going to spawn new levels. Simple as 
that very, very simple. So if I go back over here,  
68:54 - so if we can get the trigger, then we're 
going to say new level and from there gets  
69:00 - the trigger. And from the trigger we are going 
to say on component begin overlap dot now we are  
69:08 - going to add the dynamic which is basically we're 
going to assign a function that will be executed  
69:15 - when we begin that overlap. So I'm going to say 
this, and from here I am simply going to copy this  
69:23 - and I'm going to say and and paste this over 
here. So essentially, when we collide with the  
69:29 - trigger of the level, the one that I showed you 
a moment ago, we are going to call the on overlap  
69:37 - begin from over here from the spawn level. And 
over here, what we are going to do is we're going  
69:44 - to call spawn level, passing false to spawn a new 
level, simple as that. So it's going to pass or  
69:51 - go through all of this over here same as what we 
did right now go through it, and then it is simply  
69:57 - going to spawn a new level And basically 
that's all there is to it, that's pretty much  
70:04 - all there is to it, nothing, you know more. 
And over here, inside of our on Begin Play, we  
70:12 - need to spawn the level. So spawn level and over 
here I'm going to say true. But I'm going to copy  
70:18 - this because the first one is going to be true 
and the next three are going to be false over here  
70:25 - false. Let me just copy paste, copy, paste, 
let me just compile this and make sure that  
70:31 - we don't have any problems and issues because you 
know, this is coding I am you know, I cannot code  
70:39 - according to some of the comments. So it can 
happen that I miss something and all of that good  
70:44 - stuff. So essentially over here in the and while 
this is compiling, I'm going to try and explain  
70:50 - what is going on. So over here, we have created 
a spawn level function that is going to spawn  
70:57 - new levels, we have the spawn location, we have 
the spawn rotation. And over here if it's not  
71:03 - the first, because when we spawn, the first one, 
we're going to say it's true, but for all others  
71:08 - is going to be false. So if it's not the first 
level platform that is going to be spawned,  
71:12 - then we're going to get the last level inside of 
our level array. And we of course need to add,  
71:19 - which is one thing that we need to do at the end, 
so we need to add our level to the level list. So  
71:26 - we're going to get the last level from the level 
list and then we're going to get its location of  
71:31 - the spawn location which is a component that we 
added. So we're going to get its location and  
71:36 - know from where we should spawn the next level. 
Over here we're going to randomize the value so  
71:42 - from one to 10, and if that random value is equal 
to one, we're going to spawn level one if it's to  
71:47 - level two, and so on up to level 10 over here as 
I said, I did forget so if we have new level after  
71:55 - that, so we are going to attach a dynamic and what 
the hell is this again when I save the seed saving  
72:01 - because it's processing everything gold this year. 
So again, if we have a new level and we do all of  
72:10 - this over here so we get the trigger from the 
level we attach the on component begin overlap  
72:15 - we add that to the dynamic spawn level and all of 
that good stuff. Then over here I'm going to say  
72:19 - level list dot add and I am going to an over here 
it's actually level list like that and capital A  
72:27 - and I'm going to add the new level so new level 
there you go. But I am not going to allow to have  
72:35 - more than five elements inside of the level list. 
So over here I'm going to test if our level list  
72:42 - dot num so if the length or how many elements we 
have in that level list is more than five then  
72:49 - from there I'm going to say level list dot remove 
add and I'm going to remove the last element  
72:55 - inside of that level list. Now the bad 
news is that this still did not compile  
73:02 - and the even more worse news is that we need to 
compile it again. So I'm probably going to cut  
73:11 - out the video right here until the SSD drive 
arrives and I'm going to continue from the you  
73:17 - know when this compiles but again here at the end 
what we did is we added the new level to the level  
73:24 - list so that we you know next time when we try 
to get the last level we will actually have it  
73:30 - so we will not have an empty list but we 
will have a level inside of that list and  
73:35 - we are checking if the elements or how many 
elements are inside of that level list. If that  
73:41 - number exceeds five then we're going to remove 
the element that's at index zero meaning the  
73:47 - first level that's there so that's all there is to 
it and I will see you in a few when this compiles  
73:54 - and I am back we have a problem over here that 
is the reason why this was yelling at me so  
73:59 - here spawn rotation I do need to declare this as 
spawn rotation and all here for every single level  
74:06 - I need to add that to spawn rotation so spawn 
location here spawn rotation, there you go.  
74:13 - Here it's bond rotation, rotation rotation, 
stupid misspelling, I really cannot wait for that  
74:20 - SSD drive to arrive you know I'm saying this 
SSD drive over and over again in hopes that  
74:26 - some of you guys will send it to me but you know 
apparently nothing will come out of it so I need  
74:31 - to rebuild this again but this time I think it 
will be faster because it rebuild it at once  
74:37 - so it you know went through that whole process and 
you know, it now knows it can go faster because we  
74:45 - for sure waited a little bit. Well, a little 
more bit for all of this to reload. Anyways,  
74:54 - come on. Let us wait and now there we go 
build has succeeded. Finally, finally,  
74:59 - finally. If something was not clear in regards 
to this one and I've explained it two times,  
75:03 - make sure that you ask in the comment down below 
because now we need to move on and go here inside  
75:08 - of our blueprints and right click and create 
our levels bahner who who is going to you know,  
75:15 - inherit from the level or spawn level Sue spawn 
level there you go. From here I need to say BP  
75:24 - spawn level and go inside and attach all of these 
levels so we need to attach all of these levels so  
75:30 - from here, we need to take level one, then level 
two, then here we have level three and all of that  
75:38 - good stuff so the tedious part that nobody likes 
to do but everybody likes to play the game. So  
75:46 - eight and nine and last but not least here is 
our level 10 and we need to Compile and Save that  
75:53 - so now I can go here in the gameplay and 
I can simply put my level spawn or I can  
75:58 - put him here 000 It does not matter what 
matters is if I hit the play button that  
76:04 - he will spawn the levels and indeed he did 
there you go look at that all of the levels  
76:10 - I can possess the character and now I can run and 
every single time we you know pass the trigger,  
76:16 - we will spawn new levels as you can see over 
here we have infinite number of levels and every  
76:22 - single time you see they're differentiated Look 
at that, then I can run and all of the good stuff  
76:27 - and yada yada yada you get the point. So there you 
go. As you can see we can run infinite the leap so  
76:37 - the last step is to add our wall that is chasing 
us that is going to kill us that we need to and  
76:45 - there we go for whatever reason why these levels 
huh this was for the I need to redo the level or  
76:54 - recheck this level that has these two I 
probably need to reposition the oh actually no,  
77:00 - I don't need to reposition but I need to make 
that trigger a little bit larger because we  
77:06 - jumped over it and that is the reason why that is 
the reason why we did not have new levels so we  
77:13 - need to make sure that the trigger is a little 
bit larger because again here is the level you  
77:17 - see we just need to make sure that the trigger is 
larger on every single level that is so make sure  
77:23 - and since we are inheriting from the level one 
we can I believe go simply over here inside of  
77:29 - the levels level one there we go and make this 
over here the trigger box a little bit larger  
77:35 - so I don't know let's say 20 something like 
that so it will not allow it and we can move it  
77:42 - there you go so now the player has no chance 
five to five is going to be the position for it  
77:49 - unit 530530 and Compile and Save that and I 
believe it will change it for every single level  
77:56 - yes it will there you go it will change it 
for every single level. So as I said now the  
78:03 - player will not be able to jump over it and it 
will not give us the problem that we just had  
78:08 - of not having the level so now even if I go from 
here and I tried to jump way over here I'm still  
78:15 - going to create new levels there you go. So if 
something was not clear in regards to this video  
78:21 - just ask I will not answer and just kidding I 
will answer and help you out. And that will be  
78:27 - it for this video I will see you guys in the next 
one we're going to create our wall that is going  
78:31 - to start to chase us and all of that stuff and 
then we are going to wrap up our game see it then  
78:36 - All righty then my game Deaf gangsta Roni owes 
Let us wrap up our game so going here inside of  
78:42 - our c++ classes are going to create a new c++ 
class but this one is going to inherit from  
78:46 - the spike so I'm going to click here show all 
classes and filter for our spikes it's it's not  
78:53 - spike spike just it spikes there you go and this 
one is going to be our wall spike There you go.  
79:02 - And what's gonna happen inside of this class is 
I am not going to do basically anything in the  
79:09 - dot h file but of course we need to you know 
go through the painful process of all of this  
79:15 - man send me that SSD What else can I say? I'm 
waiting for it just kidding in a few days it will  
79:22 - come to in the next tutorial we'll be ready and 
this is going to be fast as as as a as something  
79:27 - that is fast, I don't know a squirrel. So in 
the wall, let's go over here reload everything  
79:34 - first wall spike that age, I'm not going to do 
anything but in the dot cpp file we are going to  
79:40 - do something. So over here basically in the dot 
h file we are going to have all of the you know  
79:47 - basic so we have the generated body we are going 
to have a public over here we're going to have a  
79:53 - wall spike which is our constructor in the 
protected so protect that. We are going to  
79:59 - have our virtual void. So virtual void Begin 
Play because we want to override it. So override  
80:05 - in our public, we're going to have our. So 
from here, it's going to be virtual, void,  
80:12 - tick, and it's going to be float Delta 
time. And over here, override, there you go.  
80:20 - Because now in the dot cpp file, we are 
going to implement all of that. So over here,  
80:27 - we are going to say a wool spike 
colon colon, and is going to be our  
80:32 - a will spike basically the constructor. And 
over here, we're going to have our primary  
80:40 - actor tick that B can ever tick is equal 
to true. So we're going to enable that  
80:48 - also over here in our void, a wall spike 
call on call on is going to be our begin.  
80:55 - So it's begin blay. What's going to happen over 
here, first, you're going to call the super,  
81:00 - which is the superclass and call the Begin Play 
from there. So begin, play. There you go, actually  
81:09 - begin play like this. And then from here, what 
I'm going to do is it's not being it's begin play  
81:18 - like that Begin Play, I'm going to say this, 
and I'm going to get the root component from  
81:25 - our blueprint, and I'm going to say component, 
so component velocity, and we just said that F  
81:33 - vector, zero for the X 25 for the y and zero for 
the Z. So this is the velocity, or basically the  
81:40 - speed of our of the actor. And next, I'm going to 
say Boyd, a wall spike with double or capital W  
81:49 - spike, call on call on tick. And over here, 
we're going to have the Delta time, like that.  
81:57 - So what's going to happen over here again, 
first, I'm going to call the super dick. So  
82:01 - super dick, which is going to take the Delta 
time and I know you're expecting me to do some  
82:07 - jokes, oh, you're tick. Look, I'm not Danny, 
I'm not trying to be Danny, I don't care,  
82:11 - you know, I'm not going to do the tick joke and 
whatnot, said actor location. And from here,  
82:19 - I'm going to get the actor location, which is 
the current location of this actor, and I'm  
82:24 - going to add to it on F a vector. And inside of 
this F vector, I'm going to say zero for decks  
82:32 - 350 for the Y, multiplied with Delta time, delta 
time. So it's Delta time, there you go, and zero  
82:44 - for the Z. And over here, I'm going to say true. 
And that's all there is to it. So let me just  
82:49 - compile this and we can make sure that everything 
is okay, we don't have any issues. Essentially,  
82:55 - what we did over here is inside of our Begin Play, 
there we go succeeded we are good. In on Begin  
83:00 - Play, we set the component velocity of the root 
component to be 25 on the y and then over here,  
83:06 - inside of the tick, we are moving the actor by 
using its current location and adding to it only  
83:13 - the Y here because x and z are zero, that means 
they will not move and we're adding to it's 350  
83:20 - multiply with Delta time, of course, you can set a 
public variable speed or something like that. That  
83:26 - is, you know, up to you if you want to do that. 
I'm not going to do it. But yeah, there we go. So  
83:32 - let's go inside of the editor. And inside of the 
blueprints that I'm going to go in the obstacles  
83:37 - and right click and create a wall obstacle. So I'm 
going to say well spike, because it is going to  
83:42 - inherit from the wall spike BP will spike and we 
need to edit this, we need to edit it to look like  
83:50 - a wall. So over here, I am going to filter for the 
static mesh that I'm going to call walls simply  
83:58 - over here for the Static Mesh which is going 
to be our cube I'm going to say cube like that.  
84:05 - There you go. And here basic shape material 
Wallah. I'm going to change you know the scale so  
84:14 - the y and the Z scale are going to be 10. This is 
it. Over here for our presets you see it's set to  
84:23 - block all dynamic instead over here and we'd say 
no collision. Now the reason for that is because  
84:27 - I'm going to detect collision with a box 
Collider. So I'm going to here go here and  
84:32 - I'm going to say bar collision. And simply 
call it box you can call it box or however,  
84:38 - and for this one, I am going to set the x scale at 
three y scale is going to be 20 and the Z scale is  
84:46 - going to be 20. And with this one I want to detect 
collision with our player. And in order for me  
84:52 - to do that, I'm going to scroll down over 
here where it says for the collision presets  
84:58 - and I am going To set this one to the custom 
collision, over here, I'm going to say query only  
85:05 - no physics collision. So basically no physics 
collision over here for the world dynamic,  
85:10 - I'm actually going to set this to spike, because 
the spike will be able to collide with the player,  
85:15 - Compile and Save that now in order for us or for 
this to work, we are going to go in our player,  
85:20 - which is this one, let me just close these 
levels. So closing, all of the levels Come on,  
85:27 - there you go. For the player, I'm going to 
select his capsule component and scroll down  
85:32 - over here for the collision preset, it is set 
to be a custom one end it is said to be upon. So  
85:38 - this is what we need to do, we'll set it to be a 
custom one, set it to be upon make sure that it is  
85:44 - overlapping the spike, because that is what 
we need. So we need it to overlap the spike.  
85:52 - Now what we need to do is go over here inside of 
our game, and we are going to add our wolf spike,  
85:59 - here he is, and let me just reposition him. 
So the exposition is going to be minus 30,  
86:05 - the Y is going to be minus 830 and the Z 
it's 455. And of course, I'm also going to  
86:16 - rotate it 90 degrees on the so 90 degrees on the 
z axis. If I hit the play button now There we go,  
86:23 - you see, it is going it is trying to search for 
us or actually trying to get us if it catches  
86:29 - us looking now is simply going to pass through 
us we're not detecting collision in the code.  
86:33 - This is why we don't see anything. So we need 
to detect collision in the code for anything  
86:38 - to happen. But the point that I wanted to show 
you is that it is not the tech thing. It is not  
86:46 - a solid object, it simply passes through. So how 
can we detect collision with the player I don't  
86:52 - want to leave that in the next video. Instead, 
I'm going to do it right now I can leave it  
86:56 - in the next video, but I'm going to do it right 
now. So going back over here inside of our runner  
87:02 - character CPP at the top here, so inside of Begin 
Play after or before we set can move to be true,  
87:11 - we need to get the capsule component so we need to 
say get capsule component which is a component the  
87:16 - capsule component of the player that we have 
just edited. You know the one that I said it,  
87:21 - it needs to be upon. So from there, I'm going to 
see on component begin overlap dot and I would say  
87:29 - add dynamic. And over here we're going to add this 
and I'm simply going to go down and copy the name  
87:36 - over here so that we don't have to, you know, 
type it out. So and and that there you go. So  
87:42 - this is going to take that capital component from 
the player, which is you know, in the blueprints,  
87:47 - so taking that capsule component, then it is going 
to attach to it are on begin overlap or on overlap  
87:55 - begin. So essentially what's going to happen 
inside of this one is that we are going to detect  
88:01 - if we have collided with a spike or a wall spike. 
So over here I'm going to say if the other actor  
88:09 - is not equal to no PTR. So it's PTR, not TPR. 
It's PTR other actor is basically the actor,  
88:20 - the other one that we have collided with inside 
of our game. So if it's not equal to no we have  
88:25 - collided with some of the actors then we're 
going to say a spike like that, or spikes which  
88:31 - is a pointer. And I'm going to say here walls 
spikes There you go, or wall spike and that  
88:37 - is going to be equal to I'm going to cast that 
to a wall spike like that and I'm casting the  
88:43 - other actor. Now we don't have the completion 
or anything because we do need to go here on top  
88:51 - and right here we need to include a few things so 
we need to say include our spikes dot h file, we  
88:59 - also need to include our wall spike dot h file and 
last but not least, we need to include the engine.  
89:07 - So it's engine dot h because we are going to 
restart the game when the player dies in order  
89:13 - for us to do that. Then we need to use the 
engine and there we go over here our spikes  
89:18 - wall spike we're going to do that or try to cast 
that next I'm going to say a spikes and over here  
89:25 - because it's a pointer spike and I'm going 
to cast it into a spike like that then  
89:31 - I'm casting again the other actor same as 
what I did be for naturally here it spikes  
89:38 - not spike. So essentially if we collide 
with either the wall so if wall spike or  
89:48 - we have the spike. So if we collide with any of 
these meaning they are not not so essentially  
89:54 - over here what we are trying to do we are casting 
the other actor to the wall spike And other actor  
90:00 - to the spike spike basically. So below over here 
we're testing if we have a wool spike, or if we  
90:07 - have a spike, meaning they're not equal to null, 
that means we collided with one of the two, that  
90:12 - means game over. So now I'm going to say get mash, 
which is going to get the mesh of our character,  
90:20 - and then I'm going to deactivate that mesh, I'm 
also going to say get mesh. And from here, I  
90:27 - am going to say set visibility for that mesh to be 
false so that we don't see it anymore in the game  
90:33 - can move is now equal to false, we cannot move 
anymore. And next we are going to reload the level  
90:42 - after two seconds. And for that we need to create 
f timer handle I'm going to say on used so on used  
90:50 - handle like that. And I'm going to say 
get world timer manager. And from there,  
90:56 - I'm going to say set timer. And I'm going to pass 
the unused handle so on use the handle into this  
91:05 - and then I am going to pass this function which 
is our runner re start level. So over here and  
91:12 - passing the restart level passing over here too, 
because after two seconds, I want that to restart  
91:18 - and over here I'm going to say false because I 
don't want this to loop and be an infinite loop  
91:23 - and spawn over and over and over again. The last 
step over here is inside of our restart level,  
91:29 - we simply need to call you gameplay statics. So 
check out the statics and over here, open level.  
91:37 - And simply we can pass the name of the level 
or we can do this, I can pass this and I can  
91:42 - say the name of the level instead of passing the 
name. I can say here with a star get world like  
91:51 - that. And over here get the name there you go. 
And voila, this world is going to get the name  
91:59 - of the current level that we are in and it 
is going to paste it over here I'm going  
92:03 - to compile this and while I'm compiling 
I am going to explain what is going on  
92:08 - inside of here. I don't think there is nothing 
to explain because we already explained that  
92:12 - inside of our runner character we attached here 
the on begin overlap for the capsule collider.  
92:19 - That's everything what we did. And over here 
we're testing if we have the other actor,  
92:24 - meaning we have collided with something so the 
other actor is not equal to null and there we go,  
92:29 - the build has succeeded. So our game is done. 
And over here we have the other act and we  
92:34 - have collided with something. So try to cast 
that other actor into a wall spike or a spike,  
92:40 - basically meaning try to test if the other actor 
is the wolf spike or if the other actor is the  
92:46 - spike. Is that true is that the case basically 
this is what we're asking. And if we have  
92:52 - either of these so if we have a wolf spike or 
we have a spike meaning they're not equal to No,  
92:58 - we are going to get the mesh and the activated 
we're also going to set the visibility of the mesh  
93:03 - to false so that we don't see it anymore we cannot 
move inside of our game so that when we press the  
93:08 - buttons we will not be able to move because 
over here if you remember only if we can move  
93:13 - now we're going to have the move add the movement 
to the player and then over here we're going to  
93:18 - restart the level this is the signature how you 
restart the level so we need to pass this timer  
93:23 - handle even though we're not using it passing 
this referring to this class this is the function  
93:27 - I want to be called after two seconds and no I 
don't want it to loop I don't want it to repeat  
93:34 - over and over again and over here simply calling 
gameplay statics open level passing the level name  
93:40 - to reload the level and that's pretty much it we 
are done so if I hit the play button right now  
93:46 - when we you know collide with the spikes or this 
wall so now when the wall touches me there we  
93:50 - go the character has disappeared now we restarted 
the level and if I collide with one of the spikes  
93:56 - So come on let's try here is one of the spikes 
there you go bam. I've also died and there we go.  
94:05 - This is our game Let's try it out again 
again let's run Let's run anyways you get  
94:12 - the point. Congratulations for making it till 
the end of this game. If you liked this video,  
94:17 - hit the like button and subscribe to the channel 
all the good stuff because it will help me out  
94:21 - you know I'm trying to spread the word about 
my wisdom and just kidding but anyways, you get  
94:25 - the point. So I don't have anything else to say. 
If you like this, you have more tutorials in my  
94:31 - game development Academy. Thank you for watching 
again and I will see you guys in the next video.