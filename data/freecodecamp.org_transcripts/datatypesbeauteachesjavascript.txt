00:00 - data types there are seven data types in
00:04 - JavaScript and we are going to go over
00:06 - all of them a
00:09 - Boolean is just true or false for
00:12 - instance if we have our data equals
00:16 - true if
00:20 - data
00:27 - console.log boolean's rule
00:36 - else Bans are
00:40 - lame and if we run
00:46 - that boolean's rule but if we change
00:49 - that data to
00:53 - false and we run
00:56 - that booleans are lame now we down to n
01:00 - null is an assignment value that means
01:03 - no value uh null just means no value for
01:07 - instance if we have Varn equals
01:10 - null and we try to do some math with it
01:15 - console.log
01:18 - and now
01:20 - since um whenever you're doing math with
01:22 - something that's equal to null that's
01:24 - just going to be the same as zero so if
01:26 - we run that it's you can see over in the
01:29 - console on the side there it equals
01:32 - zero now undefined is kind of similar to
01:37 - null but not completely the same it
01:39 - means a variable has not been declared
01:42 - or it has been declared but it has not
01:44 - yet been assigned a value for instance
01:48 - let's um scroll down a little bit if we
01:51 - have our a and I'm not going to say that
01:53 - this variable equals anything it's just
01:55 - V A now I'm going to
01:58 - console.log
02:00 - a +
02:04 - 2 this is going to be a little different
02:06 - than the null if we run that it's going
02:09 - to see you see the letters n a n in the
02:12 - console log that means not a number if
02:15 - it's undefined it's not nothing it's not
02:18 - zero like n is but it just means not
02:21 - it's nothing it's not it's not nothing
02:23 - it's not a number so you can't actually
02:25 - add or do math with something that's
02:27 - undefined now let's go to the next one
02:30 - number uh this is pretty
02:32 - self-explanatory just any numbers like
02:34 - you can put ver num equals
02:38 - 3.6 VAR equals
02:43 - 6.4 and then if we try to add these
02:52 - together I'm going to run
02:55 - that and you can see at the very bottom
02:57 - of the console you see the number 10
03:00 - because 3.6 + 6.4 is 10 now I going to
03:05 - go to the next one string oh it get an
03:08 - example there like howdy anything that's
03:11 - a word so if we do um V name equals both
03:18 - my name and then we can do
03:25 - console.log
03:27 - hi my name is
03:30 - and with strings you can add together so
03:32 - I can put plus name and if I run
03:37 - that you can see in the bottom of the
03:39 - console hi my name is
03:43 - Bo now symbols are something that's new
03:48 - in um es6 this is a data type whose
03:52 - instance whose instances are unique and
03:54 - immutable so one thing different uh with
03:58 - strings if you have two strings that
03:59 - equal the same word they're the same
04:01 - word like bow and bow and if you check
04:04 - if they're equal it will say that
04:05 - they're equal symbols are a little
04:08 - different let me give you an example so
04:10 - if we have one symbol and we're going to
04:15 - equals
04:18 - Fu and I'm actually just going to copy
04:21 - this and put another one but we're going
04:24 - to call this symbol
04:27 - two now if we do console.
04:33 - log Sim 1 equal equal equal Sim 2 and if
04:38 - we see if they're equal let me just
04:40 - clear the log here and run that you can
04:43 - see at the very bottom it says false
04:45 - they're not
04:46 - equal however if we change one thing if
04:49 - we
04:49 - do if we convert this to a string
04:58 - first
05:03 - and if we run
05:05 - that we're going to get an error so what
05:07 - did I do wrong oh I need one more in
05:11 - parenthesis okay so you can see it says
05:13 - false at first and then true and just so
05:15 - you can see what happens when you
05:17 - convert these to a string um you can see
05:20 - at the very bottom now when you convert
05:22 - a symbol to a string it says the word
05:24 - symbol and then says what you call the
05:26 - symbol when you're creating it symbol
05:28 - Foo
05:30 - now the last thing we're going to talk
05:31 - about are objects um an object is just a
05:34 - collection of properties and a property
05:37 - is an association between a name or a
05:40 - key and a value let me give you an
05:42 - example we're going to create a new
05:44 - object called my
05:50 - car and we're going to assign
05:57 - something we're going to create the make
06:00 - to be Ford and we're to put my car.
06:03 - model which is going to equal Mustang if
06:07 - we just do
06:10 - console.log my car. make it's going to
06:13 - take this property um from from it it's
06:17 - going to give us the value so let's try
06:19 - that and as you can see it shows Ford in
06:23 - the console because that's what the make
06:25 - is the Ford thanks for watching my name
06:28 - is Bo k don't forget to subscribe and
06:31 - remember use your code for good