00:00 - you are in the right place to learn to
00:01 - become a data analyst in this massive
00:04 - boot camp Alex the analyst will cover
00:07 - all the core topics that data analysts
00:09 - need to know and along the way you'll
00:11 - build plenty of projects to gain
00:13 - hands-on experience hello everybody my
00:16 - name is Alex freeberg better known as
00:17 - Alex the analyst on YouTube and in this
00:19 - video you're going to be taking my
00:20 - entire data analyst boot camp this boot
00:22 - camp is comprised of videos that I've
00:24 - made over the past 3 years and they
00:26 - cover a lot of different topics like SQL
00:28 - Excel powerbi tableau and python
00:30 - throughout the boot camp there are a lot
00:31 - of Hands-On guided projects that will
00:33 - really help you learn these skills well
00:35 - and speaking of projects there's an
00:36 - entire Part near the end where you can
00:37 - build a free portfolio website where you
00:39 - can put all of your projects on so that
00:41 - hiring managers and recruiters can go
00:43 - and look at all these projects that
00:44 - you've built if you wanted to go even
00:45 - more in depth into the skills that we
00:47 - learn in this boot camp I have a data
00:48 - analytics learning platform called
00:50 - analyst Builder analy Builder was
00:51 - designed specifically for data analyst
00:53 - so all of the courses and all the
00:55 - content are just for you and it has a
00:56 - coding section where you can learn and
00:58 - practice for technical interviews and
01:00 - lastly before we jump into the boot camp
01:01 - I want to give a huge shout out to free
01:02 - code camp for putting this all together
01:04 - personally learned a ton from free code
01:05 - camp and so I'm really honored that my
01:07 - boot camp is going to be here for you
01:08 - guys to learn and I really hope you
01:09 - enjoy it what's going on everybody it is
01:11 - 2023 and in this video I'm going to help
01:14 - you become a data
01:16 - [Music]
01:20 - analyst we're going to start at the very
01:22 - beginning assuming you haven't started
01:24 - this process at all of becoming a data
01:26 - analyst if you already have you can kind
01:28 - of find IDE identify where you are in
01:31 - this process and then go from there now
01:33 - before we dive into everything I want to
01:34 - warn you I will be mentioning my own
01:36 - channel a lot in this video I have
01:38 - videos and playlists on just about every
01:40 - single topic that we're going to be
01:41 - talking about today I'll have all the
01:43 - links to those videos in the description
01:44 - so you can dive into those topics more
01:46 - in depth so I hope that's okay and it's
01:48 - all completely free I've been building
01:50 - this out for the past 3 years and
01:52 - honestly you can probably get 90% of the
01:54 - way to learning everything you need for
01:55 - data analytics just on my channel so now
01:58 - that I've warned you let's J been of
01:59 - number one and that is learn the data
02:01 - analyst skills now there are literally a
02:02 - hundred different things that you can
02:03 - learn for data analytics you can learn
02:05 - things like alter X or a cloud platform
02:07 - or different programming languages but
02:09 - there are some core skills that I
02:10 - recommend you start out with before kind
02:12 - of branching into some of those other
02:13 - skills the number one skill that I
02:15 - always recommend people start with is
02:17 - SQL SQL is just one of those fundamental
02:19 - skills I think everybody should learn
02:21 - even if you don't use SQL you'll use
02:23 - some variation of SQL if your company
02:25 - has a large enough data set SQL is used
02:27 - to actually query and retrieve data from
02:29 - a database so if your company collects
02:31 - data which every company does they're
02:34 - going to put it somewhere to store it's
02:35 - usually stored in a database and sqls
02:37 - how you get that data from the database
02:39 - I think SQL is also fairly easy to learn
02:42 - which makes it really good when you're
02:43 - just starting out I have several
02:44 - playlists dedicated to SQL starting from
02:46 - beginner all the way to Advanced and you
02:48 - can learn all of that for free one other
02:50 - reason why I think you should learn SQL
02:51 - first is that a lot of companies
02:53 - interview or have a technical interview
02:55 - during the interview process on SQL
02:57 - that's something that really caught me
02:58 - off guard when I was first starting out
02:59 - out because I thought it was going to be
03:00 - more behavioral I didn't even know what
03:02 - a technical interview was so knowing SQL
03:05 - actually became a really important part
03:06 - of interviewing and getting a job as a
03:08 - data analyst the second skill that I
03:10 - would learn is a business intelligence
03:11 - tool like Tableau or powerbi now there
03:14 - are a ton of different bi tools I can
03:16 - literally name 10 off the top of my head
03:17 - that I've used throughout my career but
03:19 - what I will say is that learning
03:20 - something like Tableau or powerbi is
03:22 - pretty transferable to almost all those
03:24 - other bi tools they're all fairly
03:26 - similar and how they do things and how
03:29 - they show display the data you most
03:31 - likely won't have a technical interview
03:32 - asking you about Tableau or powerbi like
03:34 - to build something for them that usually
03:36 - does not happen but the combination of
03:38 - SQL where you can query your data and
03:40 - then taking that data to build something
03:42 - that is a really really great
03:44 - combination to learn right away I have
03:46 - entire series on both Tableau and
03:47 - powerbi with projects on my channel the
03:50 - third skill that I would learn is Excel
03:52 - now most people have used Excel they
03:54 - know what Excel is and how it's used but
03:56 - it can be used a little bit differently
03:58 - for a data analyst for example example
03:59 - in Excel a lot of people haven't cleaned
04:01 - data in Excel or built charts and graphs
04:04 - using Excel and those are things that
04:05 - data analysts would probably do excel is
04:07 - also just a fundamental skill that every
04:09 - company is going to expect you to know
04:11 - so I have an entire playlist dedicated
04:13 - to excel to actually walk you through
04:15 - how to use it for data analysis the
04:17 - fourth skill that I recommend you learn
04:19 - is python now a lot of people will have
04:21 - python higher up on their list they only
04:23 - use Python they don't use SQL or a bi
04:25 - tool they just do everything in Python
04:27 - now python is a fantastic tool you can
04:29 - use it to manipulate your data to create
04:31 - data visualizations and a ton more like
04:34 - web scraping and regular expression and
04:35 - a hundred different other things but it
04:38 - can be kind of hard to learn it took me
04:40 - a long time to really learn the basics
04:42 - very well that's really the only reason
04:44 - why it is farther back I feel like SQL
04:46 - and a bi tool are really easy to learn
04:48 - and really pack a big punch whereas
04:51 - python can be quite tough to learn in my
04:53 - experience and you may not use it as
04:55 - often as you would something like SQL or
04:57 - a bi tool if you're interested in
04:59 - learning py python I have an entire
05:00 - series dedicated to python as well as
05:02 - projects that you can build again I
05:04 - warned you there's going to be a lot of
05:05 - self-promotion in this video I have
05:07 - videos on just about every single one of
05:08 - these topics the fifth and the last
05:10 - skill that I recommend you learning and
05:12 - this is the only one that I don't have a
05:14 - series on yet I will make those is
05:16 - learning a cloud platform like AWS
05:19 - Google Cloud platform or Azure there's
05:21 - no denying that these platforms have
05:23 - played a huge impact in how we use data
05:25 - as a whole in the data analyst industry
05:27 - they can be kind of tough to learn
05:29 - though if you aren't using it Hands-On
05:31 - in an actual job I think that learning a
05:33 - cloud platform is already something that
05:35 - most people should start working towards
05:36 - because in the future it's only going to
05:38 - become more prevalent now where can you
05:40 - go and actually learn all of these
05:42 - skills that you need to become a data
05:43 - analyst well the number one place I'd
05:45 - recommend of course is my channel I have
05:48 - free tutorials on all these skills and a
05:50 - lot of other topics and I think it's
05:51 - just a really great place to start the
05:53 - next place that I recommend you looking
05:55 - at is udemy I recommend udemy especially
05:57 - if you're just starting out because it's
05:59 - pretty pretty cheap you can buy an
06:00 - entire course entire SQL course for $10
06:03 - or $15 and they have courses on every
06:05 - single one of these skills and I just
06:07 - recently made a video called DIY data
06:09 - analysts curriculum using udemy for
06:11 - under $75 so you can create an entire
06:14 - curriculum to learn all of these skills
06:15 - for under $75 which is just amazing the
06:19 - next place I'm going to recommend you
06:20 - look is corsera now udemy is fantastic
06:23 - they have really good instructors and
06:25 - good courses but as a whole I find that
06:28 - sometimes corsera just has more
06:30 - professional or better content corsera
06:32 - is a bit more expensive though you're
06:34 - looking at $59 per month for all of
06:36 - their courses or you can pay upfront an
06:39 - annual fee of $399 so again it's just a
06:42 - lot more expensive I moved to corsera
06:44 - once I started having a data analyst job
06:46 - and had a bit more money but when I was
06:48 - first starting out I just couldn't
06:49 - afford it so I went to udemy and it was
06:51 - a really great place to start there's
06:53 - also places like data camp and data
06:55 - Quest that kind of gamify learning and
06:57 - they're more text based so all these
06:59 - other platforms udem me corsera and me
07:01 - they're all video based but if you like
07:03 - reading data camp and data Quest are a
07:05 - lot more of text where you can learn it
07:07 - by reading it and doing it after you
07:09 - learn all of these skills the next thing
07:10 - that I recommend you do is actually
07:12 - build projects with those skills now
07:14 - what is building a project actually mean
07:16 - it means taking a skill and then
07:18 - building something out of it that you
07:19 - can then show a potential employer for
07:22 - example if you went through and learn
07:23 - Tableau you go and take a data set and
07:26 - you could build a visualization and a
07:27 - dashboard in tableau and that would be a
07:30 - project with these projects you can
07:32 - build something called a portfolio and I
07:34 - usually call it a portfolio website a
07:36 - portfolio website is a website that you
07:38 - create where you store all of your
07:39 - projects and then you can share that
07:41 - with recruiters and hiring managers so
07:43 - that they can see all of your work now
07:45 - do you absolutely need a portfolio to
07:47 - show employers no you don't but it does
07:50 - help in two different ways the first
07:52 - thing that it may do is actually help
07:53 - you land the interview if you have a
07:55 - link on your resume and they click on it
07:57 - they may see your skills and see your
07:58 - projects and be like man this person
08:00 - really knows what they're doing this is
08:02 - exactly what we need the second reason
08:04 - that I recommend building projects is
08:05 - because most likely during your
08:07 - interview you're going to get asked
08:08 - questions like how have you used SQL how
08:11 - have you used Tableau and if you don't
08:13 - have any experience in that you're just
08:15 - going to say well you know I've taken
08:16 - courses to learn it but with a project
08:19 - you can be a lot more specific you'll be
08:21 - able to say well I actually just built
08:23 - out this project in Tableau I took the
08:25 - data and cleaned it in Excel and then I
08:27 - put it in Tableau and built out this
08:28 - Dash board and here are the insights
08:30 - that I found from this data set it's
08:32 - just a much better answer and as a
08:34 - hiring manager myself I can tell you
08:36 - that it is definitely beneficial to
08:37 - build out these projects The Next Step
08:39 - that I recommend you take in becoming a
08:41 - data analyst is building a data analyst
08:43 - resume the resume to say the least is
08:46 - extremely important it's what's going to
08:48 - actually allow you to land an interview
08:50 - to potentially get a job now if you were
08:52 - like me when I was first starting out I
08:54 - had a resume it just had nothing to do
08:57 - with data analytics so how do you make a
08:59 - data analyst resume if you don't have
09:01 - any experience as a data analyst well
09:04 - you are asking the perfect questions
09:06 - because the very first things that we
09:07 - talked about are what are going to go on
09:09 - your resume those skills and those
09:11 - projects if you have no experience or
09:13 - degree like myself who has a
09:15 - recreational therapy degree if you have
09:17 - no background in this it can be really
09:19 - daunting to kind of display that you
09:21 - know what you're doing and that a
09:23 - company should hire you so what I
09:24 - usually recommend is right beneath your
09:26 - contact at the top you put your skills
09:28 - and your projects that you built out on
09:30 - your resume things like work experience
09:32 - and education should go on your resume
09:34 - as well but just a little bit lower you
09:37 - want them to see those things before
09:39 - they see that your last work experience
09:40 - was at Domino's and you have a degree in
09:42 - Marine Biology it's just not relevant to
09:45 - data analysis and if you put those
09:47 - things at the top they're probably going
09:48 - to rule you out right away the fourth
09:50 - step to become a data analyst is
09:52 - actually applying you have the skills
09:54 - you have the projects you have the
09:55 - resume now you're ready to start
09:56 - applying for those data analyst jobs now
09:58 - there's there's a lot of different
10:00 - opinions on how you need to go about
10:01 - applying for data analyst jobs but I'll
10:03 - give you my take on it and this has been
10:05 - the most successful for me in my career
10:07 - the first thing I want to mention is
10:08 - actually what I would not do which is
10:10 - just blindly apply on glass door monster
10:13 - zip recruiter and all these other
10:14 - platforms to just any data analyst job
10:16 - that you can find now I'm not against
10:18 - this I think you should do that but I
10:20 - don't think that's the only thing that
10:21 - you should do because the chances of you
10:23 - getting a call back or actually hearing
10:25 - something back are extremely low to
10:27 - really increase your chance of becoming
10:29 - a data analyst I highly highly highly
10:31 - recommend working with a recruiter a
10:33 - recruiter is literally someone who is
10:35 - there to help you find a job now when I
10:37 - first started out I didn't understand
10:38 - what a technical recruiter was at all I
10:41 - was kind of nervous or scared to work
10:43 - with him but it's actually pretty simple
10:45 - a company has a position that they want
10:47 - to fill and they don't want to spend
10:48 - hours and hours and hours to find
10:51 - someone to fill that position so they
10:52 - hire a recruiter a recruiter is going to
10:54 - go out and try to find someone to fill
10:56 - that position AKA you and so if you go
10:58 - into talk to that recruiter and they
11:00 - have a position that opens up they will
11:01 - help you get that interview and then if
11:03 - you get a job let's say for
11:05 - $50,000 the company is going to pay that
11:08 - recruiter let's say 10% of your salary
11:10 - so they'll give them $5,000 so you don't
11:12 - actually lose or have anything to lose
11:15 - using a recruiter you can reach out to
11:17 - Recruiters in several ways and I've done
11:19 - every variation but I'll tell you my
11:20 - most successful way which was using
11:22 - LinkedIn there are tens of thousands of
11:25 - Recruiters on LinkedIn I made an entire
11:26 - video of how you can reach out to
11:28 - recruiters and what to St Recruiters on
11:30 - LinkedIn to help you land a job so be
11:32 - sure to check out that video when you
11:33 - actually get to that point but you can
11:35 - also just cold email and cold call these
11:38 - recruiting companies but to me it's just
11:40 - not as effective as reaching out
11:42 - directly on LinkedIn and this is just a
11:44 - bonus one the last thing that you need
11:45 - to do is accept a job offer so on step
11:47 - number four after you apply to those
11:49 - jobs you do actually have to go in
11:51 - interview and then get a job offer which
11:53 - you will accept I just thought I'd
11:55 - mentioned that just in case that was not
11:56 - super clear now that was a lot of stuff
11:59 - let's talk about time frames to actually
12:01 - complete all of these things now doing
12:03 - all of these things from scratch is
12:05 - going to take a while but let's break it
12:07 - down by each step and see how long I
12:09 - generally think it's going to take let's
12:10 - start with step number one which is
12:12 - actually learning the skills now just to
12:14 - be up front this one probably is going
12:15 - to take the longest for most people for
12:17 - most people to learn all of these skills
12:19 - it's going to take around 3 to four
12:21 - months now if you don't learn a cloud
12:23 - platform and python which are the last
12:25 - ones that I recommend and you just focus
12:27 - on SQL a to in Excel I think you can do
12:30 - that in under 3 months that is very
12:32 - dependent though on how much time you
12:34 - have to study that time frame is more
12:36 - for someone who has several hours per
12:38 - day maybe 3 hours in the end of a night
12:40 - after you go to work that is someone who
12:42 - has quite a bit of time to dedicate to
12:44 - learning during their week of course
12:46 - that time frame is going to take longer
12:47 - if you don't have as much time to
12:48 - dedicate to learning now let's look at
12:50 - number two which was creating projects
12:52 - and a portfolio of projects from my
12:54 - experience when you're first starting
12:55 - out it takes a lot longer to actually
12:56 - create these projects it can take one
12:58 - one or two weeks per project I usually
13:01 - recommend people doing three to five
13:02 - projects in their portfolio before they
13:04 - start applying and since they can take
13:06 - anywhere from 1 to two weeks you're
13:07 - looking at anywhere from 3 to 6 weeks
13:10 - The Next Step was to create a data
13:12 - analyst resume now in my opinion this
13:13 - one should take the shortest out of
13:15 - every single step here because you're
13:16 - really just kind of reformatting a
13:18 - resume or creating a resume you're just
13:20 - adding skills you're adding your
13:22 - projects and then kind of reformatting
13:23 - it to make it look nice this should
13:25 - hopefully take under a week but if you
13:27 - use something like a professional
13:28 - service so they help you build a resume
13:30 - it could take one to two weeks the two
13:32 - last steps which kind of go hand inand
13:34 - are step four and five which is actually
13:36 - applying for jobs and then Landing a job
13:38 - now this process can take as little as a
13:40 - month or it can take as long as 6 months
13:43 - or a year it really depends on how
13:45 - you're applying where you're applying
13:47 - and just the kind of luck that you're
13:49 - having with actually Landing interviews
13:51 - I've seen people who have never had any
13:52 - experience land a job within a month of
13:54 - starting to apply and it's incredible
13:57 - it's amazing but it doesn't happen too
13:58 - often you're usually looking at around 2
14:01 - to 4 months on average to land your
14:03 - first data analyst job if you put all of
14:06 - those together and kind of average
14:07 - everything out you're looking at around
14:09 - 6 months total for the entire process
14:12 - now I don't want that to discourage you
14:13 - okay 2023 is a long year you have a lot
14:16 - of time and it doesn't have to take 6
14:18 - months you could do it faster you could
14:20 - do it in three months and just prove me
14:22 - wrong but if you are really focused and
14:23 - you are really driven to become a data
14:25 - analyst this year I know that you can do
14:27 - it now to maybe boost your spirits and
14:29 - make you feel a little bit better I
14:30 - didn't know any of these things when I
14:32 - first started out I didn't have anyone
14:33 - telling me kind of a plan on what to do
14:35 - I had to go out and figure all these
14:37 - things out by myself and it took me
14:38 - almost a year to land my first real data
14:40 - analyst job so with all that being said
14:42 - I hope that this video is helpful I hope
14:44 - you now have a path on how to become a
14:46 - data analyst this year and that my
14:47 - channel can be a big part of that so
14:49 - thank you guys so much for watching I
14:51 - really appreciate it if you like this
14:52 - video be sure to like And subscribe
14:54 - below and I'll see you in the next
14:57 - video
14:59 - [Music]
15:08 - what's going on everybody my name is
15:10 - Alex freeberg and in today's video we're
15:11 - going to be starting our basics of SQL
15:13 - series now in this series we're going to
15:14 - be going over everything you need just
15:16 - to get started and then in future videos
15:18 - we're going to be going over some
15:19 - intermediate Concepts and some more
15:20 - advanced concepts and then in the final
15:23 - series we're going to be going over some
15:25 - portfolio projects in this video in
15:26 - particular we're going to be downloading
15:27 - SQL Server Studio we're going to be
15:29 - creating our tables inserting data into
15:31 - our tables and in future videos we're
15:33 - going to actually learn how to query
15:34 - those tables if you already have SQL
15:36 - Server management Studio downloaded you
15:38 - can skip ahead to where we actually
15:39 - create the tables and insert the data
15:40 - into the tables if you don't care about
15:42 - that at all and you're just looking at a
15:43 - query I would skip to the next video
15:45 - where we actually start quering the data
15:47 - that we inserted into those tables so to
15:49 - download SQL Server management Studio we
15:50 - actually have to download two things and
15:52 - I have both links right here I'm going
15:54 - to leave those in the descriptions that
15:56 - you guys have those but this one is to
15:58 - actually download SQL Server management
15:59 - studio so let's go down here I actually
16:01 - deleted it off my computer so I can walk
16:03 - through this with you guys so we're
16:05 - going to download that let's also go
16:07 - over here this is actually a server so
16:10 - we have to download a SQL server and if
16:12 - you go down right here there's a free
16:15 - version now I don't need the developer
16:17 - version I'm just going to download the
16:18 - express version it's actually smaller so
16:20 - let's download that as
16:22 - well now once this is done running we're
16:25 - going to open it up and I'll show you
16:27 - what to do next so it just finished
16:29 - running let's click on
16:32 - it all right so we need to install it
16:36 - we're going to click yes and this is
16:38 - going to take a little while so this
16:40 - popped up I clicked install and it's
16:42 - been running for the past couple minutes
16:43 - apparently I was not recording so I
16:45 - apologize for that but that's all I did
16:48 - so now it's been installed I'm actually
16:50 - going to pull it up right
16:52 - here and let's open it
16:55 - up now when it pulls up it's going to
16:57 - ask you to connect to a server and
16:59 - that's why we downloaded the SQL Express
17:01 - server so let's connect to
17:05 - that and there you go it's as easy as
17:08 - that so now we have SQL Server
17:10 - management Studio set up and we are good
17:12 - to go so the first thing that we need to
17:14 - do is actually create a database so
17:17 - let's go over here to databases and
17:19 - let's click new
17:21 - database and let's just do
17:25 - SQL
17:27 - tutorial keep it simple and if we click
17:31 - that it's going to create our database
17:32 - for us now when you open up the database
17:34 - there's going to be a lot of stuff you
17:36 - really do not need to know all this
17:38 - really what we're going to be sticking
17:39 - to is this tables right here uh as of
17:42 - right now we do not have any tables so
17:45 - we need to create tables now there's two
17:47 - ways that you can do that you can click
17:49 - right here and you can go to new and
17:50 - create table we're not actually going to
17:53 - do that we're going to create it using a
17:55 - script or a t-sql so we're going to go
17:57 - over here and do new query and we will
18:00 - get started on actually creating uh the
18:03 - two tables that we're going to be using
18:04 - for all the stuff going forward all
18:06 - right so let's get rid of me CU you
18:08 - really don't need to be seeing me
18:09 - anymore let's get started by doing our
18:11 - very first table which is going to be
18:12 - our employee demographics table so let's
18:15 - start off by saying create table and we
18:19 - have to name it so let's do
18:22 - employee demographics and enter down we
18:25 - want to do an open parenthesis now we
18:27 - need to specify what our column names
18:28 - are going to be and what the data type
18:31 - is for each column so let's start off
18:35 - with employee ID and we want that to be
18:37 - an integer so that'll be like 1 2 3 4 uh
18:40 - anything
18:41 - numeric now we want to
18:44 - do first name and let's make that varar
18:49 - 50 if you don't know what these data
18:50 - types are that's okay uh that will
18:53 - probably be covered in a different video
18:54 - that's not really necessary for this
18:56 - video uh let's do last name we'll also
18:59 - make that varar 50 let's do age make
19:04 - that an integer and very last let's do
19:09 - gender and we will make that varar 50 as
19:14 - well so now we have our very first
19:18 - table let's run that and we'll see if it
19:22 - works we'll go over here we'll refresh
19:24 - our
19:25 - tables and there you go so we have our
19:28 - very first table let's go up here let's
19:31 - get rid of this one and now let's create
19:33 - our second table so we're going to do
19:35 - basically the exact same thing but we're
19:37 - going to have a little bit different
19:38 - information in it this is going to be
19:39 - our employee salary table so let's do
19:43 - create table and again we need to name
19:48 - it and enter and open parenthesis so now
19:51 - we're going to do the same thing we're
19:53 - going to do employee ID let's make that
19:56 - an integer now we want the job title
20:01 - because we want to know what they
20:03 - do and this one is going to be varar 50
20:08 - because we keep it pretty simple
20:12 - whoops and then for our very last one
20:14 - we're going to do salary and that will
20:16 - be integer as
20:19 - well and I'll just do PR here so let's
20:22 - create this
20:24 - table let's see if it is there and there
20:29 - we go so let's open up one of these
20:32 - tables really
20:33 - quick see what's in there see what it
20:35 - looks like as you can see we do not have
20:39 - any information in there uh when you
20:41 - create a new table sometimes when you
20:42 - open it up you're going to see this if
20:44 - you want to get rid of that you just
20:45 - need to do a I think it's called A Hard
20:48 - refresh or something like that but you
20:49 - can do control shift R let's see if it
20:52 - works for me I just did it all right it
20:55 - goes away so now it recognizes it as a
20:57 - table so we're good there let's go back
21:01 - here and let's get rid of all this we've
21:03 - already created our tables now we want
21:05 - to insert the data into our tables so
21:08 - let's see what that looks like let's do
21:11 - insert into and now we need to specify
21:14 - what table we're inserting our data into
21:16 - so let's start off with employee
21:19 - demographics let's do
21:21 - values so now we have to select what
21:24 - values we're going to put into um into
21:27 - this table
21:29 - so now we're going to have to do the
21:31 - employee ID so let's do
21:34 - 101 then we're do first name so let's do
21:38 - Jim last name
21:42 - Halpert and then his age let's say he's
21:46 - 30 and he is a
21:49 - male now just for fun let's execute that
21:54 - let's go back to this table right here
21:57 - and execute
21:59 - and as you can see all of our
22:00 - information actually went in there so
22:02 - now we have his employee ID his first
22:04 - name his last name age and gender now we
22:07 - need a lot more information uh for this
22:10 - table in order to actually learn a lot
22:12 - of the concepts of quering the table so
22:15 - I'm actually going to go through and add
22:17 - a ton more information I'm not going to
22:19 - bore you through that but I will show
22:21 - you the final product before I actually
22:22 - hit execute so stick with me I'm
22:25 - actually just going to cut to the end
22:26 - where I insert all my stuff down on here
22:28 - and then if you want that I'll probably
22:30 - leave it in the description or maybe put
22:32 - in my GitHub or something so you can
22:33 - easily just go copy and paste that if
22:35 - that's what you want to do so I'll see
22:36 - you in a few
22:38 - seconds all right so I have all my
22:40 - values right here I actually going to
22:42 - take this one out cu I already did that
22:44 - one but this is our additional
22:46 - information let's insert that into our
22:49 - table real quick and go back here and
22:52 - take a look at it and there you go this
22:54 - is going to be our core information that
22:56 - we are querying off of
22:58 - uh in future videos so that table is
23:00 - completely finished let's go back here
23:03 - we're going to get rid of this because
23:06 - now we want to insert our information to
23:07 - our other table so let's do insert into
23:11 - and let's do
23:12 - employee and now we're going to do
23:15 - salary so let's do values to specify
23:19 - that we're inserting values into
23:22 - there and in this one we have employee
23:25 - ID so again let's do in th1 that's
23:28 - gym his job title is
23:33 - salesman and let's say his salary is
23:38 - $45,000 and let's execute that and you
23:42 - can't see it but down here it says it's
23:43 - done let's go to that
23:46 - table and as you can see that is
23:48 - inserted I'm going to do the exact same
23:50 - thing as I did before I am going to fill
23:52 - out all these and in a second it will be
23:54 - done uh on your side and then again I
23:57 - will leave it in the description or I'm
23:59 - going to put it on my GitHub and you
24:01 - guys can just copy and paste that if
24:03 - that's what you want to do or you can
24:03 - write it out whatever you want to do all
24:06 - right just like before I'm going to get
24:07 - rid of this first one that is Jim he is
24:10 - already done now let's insert this
24:12 - information Ed is finished let's go back
24:15 - here and there we go now we have both of
24:19 - our tables and we are good to go for
24:20 - future videos so thank you so much for
24:22 - sticking all the way through this one in
24:24 - the next video we're going to actually
24:26 - begin uh quering the table and learning
24:28 - the select the from the where the group
24:31 - by and the order by statement everything
24:33 - is in these upcoming videos so stick
24:36 - around and we will learn all of that
24:37 - together thank you so much for joining
24:39 - me if you like this type of content be
24:40 - sure to subscribe below and I'll see you
24:42 - in the next video what is going on
24:45 - everybody my name is Alex freeberg and
24:46 - in today's video we're going to be going
24:48 - over the select and the from statement
24:50 - so if you joined us for our last video
24:52 - we went over creating our tables and
24:55 - inserting data into those tables and so
24:57 - we have this employee demographics table
24:59 - and we also have this employee salary
25:01 - table and today we're going to be
25:03 - walking through the select statement in
25:05 - the fir statement on these tables so
25:08 - here are some of the concepts that we're
25:09 - going to be going over today let's just
25:10 - get it started by doing select
25:13 - everything and let's do this from the
25:16 - employee demographics table so let's
25:18 - execute this if we wanted to only show
25:21 - the first names we can just do first
25:25 - name and run that
25:28 - and if we want first name and last name
25:30 - we can just separate that by using a
25:34 - comma and it will return those well if
25:37 - we want to return all columns and all
25:39 - rows then all we have to do is use this
25:42 - star so that's what the star does now we
25:44 - have nine rows of data here and if we
25:47 - only wanted to return let's say the top
25:50 - five we can easily do that and we can
25:52 - just say top five of everything now the
25:56 - reason this could be useful is say you
25:59 - have a table that has millions of rows
26:01 - in it and you only want a small sample
26:03 - you can say select top 1,000 and when
26:06 - you do that it will only select the top
26:08 - five rows now let's get everything back
26:11 - in here really quick because we're going
26:13 - to move on to this distinct feature so
26:16 - when we use distinct we're actually
26:18 - saying that we want the unique values in
26:20 - a specific column so if we say distinct
26:25 - and then let's do employee ID
26:28 - D everything should be returned so all
26:32 - nine rows should be returned and that's
26:34 - because every single one of these are
26:36 - unique now let's try gender so there's
26:40 - only going to be two results the male
26:42 - and the female and that's because
26:43 - there's only two distinct values in that
26:46 - column now let's look at all of our data
26:49 - again so now we want to look at count
26:52 - now count is very simple all is going to
26:55 - do is going to show us all the non null
26:58 - values in a column so let's look at last
27:02 - name for example if we do count of last
27:06 - name all that's going to give us is a
27:08 - count of nine because we have nine last
27:10 - names if for whatever reason somebody's
27:13 - last name was left out and that was null
27:16 - then it would have returned maybe eight
27:18 - or seven depending on how many were
27:19 - actually in there so if an entire column
27:22 - was null we it would be a Return To
27:24 - Zero and if you notice we are not given
27:27 - a column name that's because this is
27:29 - derived information based off the last
27:31 - name so if we want to actually give this
27:34 - a name so that that column does not say
27:36 - no column name we can use this as right
27:40 - here so once you put as you can actually
27:43 - name it so since this is the count of
27:45 - the last name we'll write last name
27:49 - count keep it simple and if we execute
27:52 - that as you can see we have last name
27:55 - count right there so that's how you use
27:56 - that as let's look at all of our data
28:01 - again we want to look at some Max mins
28:04 - and averages right now and the only
28:07 - column here where it would be useful to
28:09 - do it on is age but let's actually go
28:12 - over and let's look at our salary table
28:15 - and at our salary table we have some
28:17 - really interesting salaries that I think
28:18 - would be a little bit more useful for
28:20 - this information so let's go over
28:23 - to employee
28:26 - salary all all right and let's look at
28:28 - this table really quick so we have our
28:31 - salary now we want to look at the
28:34 - maximum
28:35 - salary that is
28:38 - in uh that column and that is going to
28:41 - be
28:42 - $65,000 now let's say we wanted to know
28:44 - what the minimum salary was let's
28:47 - execute this and the person who makes
28:48 - the least money is making
28:51 - $36,000 now what's the average what is
28:53 - the average salary for all employees
28:56 - that's going to be $
28:58 - 48,5 so so super easy to use all of
29:02 - these things they're extremely useful I
29:05 - use them every single day so I know that
29:07 - each of these are very very useful and
29:10 - are definitely among the basics that you
29:12 - have to know let's look real quick at
29:16 - everything really quick so we just
29:18 - learned the select statement but
29:19 - learning this from statement really
29:21 - quick is also important up here this
29:23 - actually shows us that we're already
29:25 - Hitting off the SQL tutorial database
29:28 - but let's say we change it to master
29:30 - when we try to run this it's going to
29:32 - give us an error and that's because now
29:34 - we're hitting off this database and this
29:35 - database does not have this table in it
29:38 - so in order to do this in order to still
29:40 - hit off that table while up here we're
29:43 - actually hitting off a different table
29:44 - we can change this information so the
29:47 - from statement you have to specify three
29:49 - separate things the first thing that you
29:51 - need to specify is the database so let's
29:54 - say we want to hit off the SQL tutorial
29:56 - database
29:58 - now we want to select what table we're
30:00 - going to do this is actually a dbo so
30:04 - let's put dbo there's there's a lot that
30:06 - can go into that um it's not worth
30:08 - getting into now but dbo do and let's do
30:12 - employee
30:14 - salary when we execute this our
30:16 - information comes up even though up here
30:18 - we're still hitting off the master
30:20 - database when we specify it right here
30:23 - then we actually are choosing what
30:25 - database and what table a hit off of and
30:28 - so it does not matter what it is up here
30:30 - so that's how you use the from statement
30:33 - in the next video we're going to be
30:34 - going over the wear statement and then
30:36 - after that the group by and order by
30:38 - statement and that will be the complete
30:40 - basics of SQL tutorial and then we'll
30:42 - start getting into a little bit more fun
30:43 - stuff some more advanced concepts which
30:46 - I think it be really really exciting for
30:48 - everybody to learn thank you guys so
30:49 - much for joining me I really appreciate
30:51 - I hope this has been helpful if you like
30:53 - this type of content subscribe below and
30:55 - I'll see you in the next video thanks
30:56 - and goodbye
30:58 - what's going on everybody my name is
30:59 - Alex freeberg and in this video we're
31:01 - going to be going over the we statement
31:02 - and SQL in the very first video we
31:04 - created our table inserted data into our
31:07 - table in the second video we went over
31:09 - the select and the from statement and
31:10 - now we are on to the wear statements now
31:13 - what does the wear statement do it helps
31:15 - limit the amount of data and specify
31:17 - what data you want returned we have
31:19 - quite a few Concepts that we're going to
31:20 - be covering today let's just start out
31:22 - with something really easy let's
31:24 - do where first name
31:28 - equals gym really simple so we're
31:32 - selecting everything where our first
31:34 - name equals gym and this is our output
31:36 - so really really simple now let's try
31:38 - where it does not equal this right here
31:40 - says does not equal gym and let's
31:43 - execute that and as you can see we have
31:46 - everybody except Jim Halbert in there so
31:49 - now let's look at the greater than or
31:50 - less than so in this table I think the
31:53 - one that we're going to look at is age
31:55 - so let's look at age and let's do where
31:58 - it's greater than
32:01 - 30 and when we execute that we're going
32:03 - to get everyone who is over the age of
32:05 - 30 now as you can see we're not
32:07 - including people who are 30 years old if
32:09 - we want to include people who actually
32:11 - are 30 years old we're going to add the
32:13 - equal sign right there so we should be
32:16 - seeing people who are now 30 so before
32:19 - Pam and Jim were not in there and now
32:20 - they are if we do the exact same thing
32:23 - let's do less than 32
32:28 - here's everyone that's going to be
32:30 - included but if we want to include the
32:32 - people who are 32y old then we are just
32:35 - going to add that equal sign and now the
32:37 - people who are 32 years old like Toby
32:39 - and Meredith are now
32:41 - included if we want to go even further
32:43 - we want people who are less than or
32:45 - equal than
32:47 - 32 and who are male we can say where
32:52 - gender
32:53 - equals
32:55 - male so now we have two two things that
32:57 - we are specifying that we need we need
32:59 - somebody whose age is less than 32 and
33:02 - we need their gender to be male so let's
33:04 - execute that and we have four people who
33:06 - meet that criteria so that's what the
33:09 - and statement does if we write or then
33:14 - only one of these criteria has to be
33:16 - correct in order for it to be met so if
33:19 - we hit execute now we're saying anybody
33:22 - who's under the age or equal to 32 or
33:26 - their gender equals male so if we look
33:28 - down here Michael Scott is actually 35
33:30 - years old so he's over 32 but since he
33:33 - is male he is now included let's get rid
33:35 - of everything really quick I want to
33:37 - look at this like really quick so let's
33:40 - execute just that and if you do that you
33:42 - highlight just that hit execute then it
33:45 - uh will only run what you have
33:46 - highlighted so now let's look at this
33:48 - whole table now when you're using like
33:51 - you typically are doing this for
33:54 - sometimes numerical but most of the time
33:55 - you're using it for text
33:57 - information so if we're looking at this
33:59 - right here if I'm looking at last names
34:03 - and let's say I want everybody whose
34:06 - last name starts with s you can't really
34:09 - do that with anything else so I'm going
34:12 - to say where it's like and then I'm
34:14 - going to say s and after that I'm going
34:17 - to put a percent sign that's actually
34:18 - called a wild card and if I close that
34:21 - off what this is saying is is I want
34:23 - every last name where it starts with
34:26 - where it's like
34:27 - where it only starts with an S so let's
34:30 - run this really quick now we have two
34:33 - people whose last names start with s now
34:36 - if I put a wild card at the beginning we
34:38 - are now saying where there's an S
34:41 - anywhere in anybody's name so let's
34:44 - execute this and see what we get so now
34:47 - even if the S is like flenderson towards
34:49 - the end it's still counts so you can
34:52 - specify multiple things in here as well
34:54 - so let's say I want it to start with s
34:56 - that would return shre and Scott but now
34:59 - I want something that also has an o in
35:02 - it so so it has an S at the beginning
35:04 - and then somewhere in there there's an O
35:07 - now let's execute that and there's only
35:08 - one person that meets that criteria so
35:10 - you can do that for multiple things you
35:12 - can even say OT
35:15 - TT and let's execute that and he's still
35:18 - going to be returned and if we put C at
35:20 - the back it's not going to be returned
35:23 - because it follows it in order so isn't
35:27 - s o TT C the C would actually need to
35:32 - go over here so now we have s c o t t
35:38 - and although there's a bunch of wild
35:39 - cards in here it is going to return
35:41 - Scott so that is a little bit a little
35:44 - hint at how you can use like there is a
35:47 - little bit more that goes into it you
35:48 - can use it for numerics um there's a lot
35:51 - of things that you can use this for but
35:52 - this is just the basics how you can use
35:55 - it today how you get started on using
35:58 - the like a nutshell that is how you use
36:00 - like and as I said before you can use
36:03 - like with numerical data as well but for
36:06 - demonstration purposes I wanted to use
36:08 - text Data let's get rid of this really
36:10 - quick um let's look at our entire
36:13 - table and I wanted to show you how to
36:16 - use null and not null I can't really
36:19 - show you how to use null because I do
36:21 - not have any null Fields I could easily
36:24 - update this table and make n but that's
36:28 - in a future video where it's a little
36:30 - bit more advanced where you can start
36:31 - altering your data but just for purposes
36:34 - of showing you what null and not null is
36:36 - let's do where first
36:39 - name is
36:42 - null and if we see that is not going to
36:45 - return anything but if we say is not
36:48 - null it's going to return everything
36:50 - because nothing in here is null nothing
36:53 - in this first name column is null so
36:55 - that's how you use it um there are a lot
36:57 - of use cases where you actually will use
36:59 - null and not null that will be in future
37:02 - videos probably in the project section
37:04 - or the portfolio section we weren't able
37:06 - to show really how to use this super
37:08 - well but just as a demonstration that's
37:10 - really all it does it looks at the whole
37:13 - column and whether it is null or not
37:15 - null that's really all it's used for
37:16 - this is actually super useful and you
37:19 - can use it in a ton of situations but
37:21 - again for demonstration purposes that's
37:22 - really all it does so let's get rid of
37:25 - this let's look at in really quick so in
37:29 - is kind of like the equal statement but
37:32 - it's multiple equal statements so let's
37:35 - say we want to say we first name equals
37:41 - gy and then we were like wait we also
37:44 - want to include Michael
37:46 - Scott so then we would have to write and
37:49 - where first name equals and then we
37:51 - would do Michael and then etc etc for
37:54 - anybody that we wanted to include but if
37:56 - we said in we could do an open
37:59 - parentheses and then we can say
38:01 - gy we can say
38:05 - Michael and we can say as many people as
38:08 - we want going down the road just
38:09 - separating it by commas and if we had
38:11 - execute everything would be returned so
38:13 - it really is just a condensed way to say
38:16 - equal for multiple
38:18 - things so that is the we statement I
38:21 - think the wear statement can get
38:22 - extremely complex but this really is
38:25 - highlighting the basics so if you can
38:26 - learn all of these Concepts you will
38:29 - absolutely have the basics down and will
38:30 - be set to go over some more intermediate
38:32 - and more advanced things with the we
38:34 - statement later on in the next video
38:36 - we're going to be going over the group
38:37 - buy and the order buy and then we are
38:40 - done with the SQL Basics and then you
38:42 - can practice and work your way up into
38:44 - my intermediate level videos which are
38:46 - going to be coming out very shortly
38:48 - after these videos thank you guys so
38:50 - much for joining me if you like this
38:51 - tutorial Series be sure to subscribe
38:52 - below and I'll see you in the next
38:55 - video going on everybody my name is Alex
38:57 - freeberg and in today's video we're
38:58 - going to be going over the group by and
39:00 - the order by statements in previous
39:02 - videos we created tables we went over to
39:04 - select the from and the where and now we
39:06 - are at the very end of our SQL basic
39:10 - series if you stayed with us for the
39:11 - whole time hopefully you have learned a
39:13 - lot and learned the basics of SQL in
39:16 - future videos we're going to be going
39:17 - over intermediate and even more advanced
39:19 - concepts and even going through
39:21 - portfolio projects that you can use to
39:23 - put on your resume if you like this type
39:25 - of content be sure to subscribe below
39:27 - but let's get into it for today the
39:29 - group by statement is similar to
39:30 - distinct in the select statement in that
39:32 - it's going to show the unique values in
39:35 - a column the difference is is if we say
39:39 - distinct
39:40 - gender what's going to be returned is
39:43 - the very first unique value of female
39:46 - and the very first unique value of
39:48 - male but if we say
39:52 - gender and we say Group by
39:57 - gender it's only going to return two
40:00 - values but in these two values we
40:03 - actually have all the males rolled up
40:05 - into this one row and all the females
40:07 - rolled up into this one row now let me
40:10 - further show you what that means if I
40:13 - say count of
40:17 - gender now you can see that this whole
40:20 - time there were six males in this one
40:23 - row and there were three females in this
40:25 - one row so with a distinct it really is
40:27 - only showing us what value is in there
40:29 - that's unique but with the group by it's
40:31 - showing us what the unique value is but
40:33 - it's also rolling them all up into one
40:35 - column that we can use it for other
40:37 - things now real quick I want to be able
40:39 - to see both of these at the same time so
40:42 - let's just put this up here and let's
40:46 - run this so we can actually see both now
40:49 - let's add age to this statement down
40:52 - here or this
40:54 - query and let's only run this one and I
40:57 - want to show you what happens and why it
41:00 - happens we're now looking at gender age
41:03 - and then the count of gender so if we
41:06 - look down here we only have one male who
41:09 - is 29 we have one male who is female
41:13 - that's age 30 and so on and so forth so
41:16 - none of these people are both the same
41:19 - gender and the same age if for example
41:22 - we had two or three people who were male
41:24 - and who were 30 years old then we would
41:26 - have a two or a three over here so this
41:29 - count is actually being counted at each
41:31 - row that's being returned so for our
41:34 - data that we have today this isn't a
41:37 - fantastic example CU it really split it
41:39 - out there any that were the same but as
41:41 - you can see you can put multiple columns
41:44 - as long as you put multiple down here
41:47 - now why did we not have to put this
41:48 - count gender down here in this group by
41:51 - that's because this count gender is
41:54 - actually a derived field or derived
41:56 - column it's derived based off the gender
42:00 - column so it's technically not a real
42:02 - column that's in the table it's one that
42:05 - we're creating that's fictional uh per
42:07 - se so the age and the gender are actual
42:11 - fields or actual columns that are in our
42:13 - table they have to be down here and like
42:16 - I said before it's the comparison to
42:17 - that distinct in the select statement
42:20 - because we're looking at the distinct of
42:22 - gender and age so we're saying distinct
42:25 - across multiple columns both gender and
42:27 - age now as we had it before we were only
42:30 - looking at gender it's going to roll all
42:33 - of those up into just male and female
42:37 - but if we want to add more we can easily
42:38 - add more in this group by statement we
42:40 - can still do things like where age is
42:44 - greater than
42:46 - 31 we can still do those things so let's
42:50 - execute this and our numbers are going
42:52 - to change now we're doing it based off
42:54 - gender and we're looking at the count of
42:56 - people whose age is greater than 31
42:59 - which is smaller than before now let's
43:01 - look at order bu I'll do it down here
43:03 - really quick for demonstration but I am
43:05 - eventually going to come up here and use
43:06 - it because I think it'll be a little bit
43:08 - better to completely round out this
43:10 - query down here let me give this a name
43:13 - let's do count of gender and then let's
43:16 - come down here and let's order
43:20 - by uh let's order by count
43:24 - gender and when we run that it's going
43:27 - to do 1 three and that's because as a
43:30 - default SQL has an ascending feature
43:34 - which is going to be smallest to largest
43:35 - going down if we want to change that we
43:37 - can change it to descending that's going
43:39 - to be largest to smallest so now we have
43:43 - 31 and if we want to do it based off
43:47 - gender and we do it descending now we
43:49 - have Z to
43:52 - A and so that's going to be male female
43:54 - and if we get rid of that it's going to
43:55 - do the the default
43:57 - ascending and let's see what that brings
44:01 - female male now for what we're trying to
44:04 - do let's look at this large table so I
44:06 - think it's going to be a little bit more
44:08 - descriptive or a little bit better
44:10 - visually let's do order by and let's do
44:15 - age let's run this and it's going to
44:18 - order smallest to
44:20 - largest if we do
44:25 - descending it's going to do largest to
44:28 - smallest now you don't only have to do
44:31 - just one thing you can do multiple
44:34 - columns so if I wanted to do age and
44:37 - then gender I can do that as well so
44:39 - let's do
44:41 - gender and let's run that so now we have
44:44 - the age but under the age we also have
44:47 - it ordered by female and that's an
44:49 - ascending order so AB BC d f so females
44:52 - first so it's going to be female first
44:54 - and then it's going to be male and again
44:56 - female and male now we don't have to
45:00 - just let it be ascending for each one if
45:03 - I wanted to do it reverse in this column
45:06 - I can do descending now let's run that
45:10 - and when we have 30 now male is first
45:12 - and female second and if I wanted to do
45:15 - that over here I can do descending and
45:17 - now we have them both descending so it's
45:20 - going to go top to bottom and we have 32
45:22 - it's going to be male 32 female so you
45:26 - can specify lots of different things in
45:28 - here and we don't actually have to use
45:30 - column names we could just use numbers
45:32 - so if I wanted to do 1 2 3 4 5 I could
45:37 - but let's try to replicate the exact
45:39 - same thing before this would be column 1
45:41 - 2 three four so let's do where four
45:46 - descending and then let's do
45:48 - five descending and if we execute that
45:52 - it's going to give us the exact same
45:53 - result as if we' actually put in the
45:55 - column name and I I do use this a lot
45:57 - oftentimes I don't use the column name I
46:00 - just if it's a small table I'll just use
46:02 - the number so in my actual queries I do
46:04 - this a lot where I just use the number
46:06 - instead of the column name so that is
46:08 - the group buy and the order by statement
46:09 - and if you have walked through my
46:10 - previous videos you should be completely
46:12 - done with the basics of SQL so
46:14 - congratulations the next thing to do is
46:16 - really just practice the basics because
46:18 - the basics are what you're going to be
46:20 - using day in day out and so what I would
46:22 - recommend is create a few more tables
46:24 - query those tables try to think of use
46:26 - cases and what you would actually want
46:28 - to know from that information after that
46:30 - I would move on to my intermediate
46:32 - videos if those are already out and then
46:34 - I would move on to my Advanced videos
46:35 - those are going to go over some more
46:37 - challenging topics but things that would
46:39 - be very useful for anybody to know in my
46:42 - next video I'm going to be going over
46:44 - intermediate SQL topics things like
46:46 - joins and subqueries and a ton more so
46:49 - if I already have posted those be sure
46:51 - to go check those out on my page and if
46:53 - I haven't I hope to have those up soon
46:55 - thank you thank you guys so much for
46:56 - watching I really appreciate it if you
46:58 - learned anything in this basics of
46:59 - sequel Series be sure to subscribe below
47:01 - and I'll see you in the next video
47:03 - what's going on everybody my name is
47:05 - Alex freeberg and today we're going to
47:06 - be starting our intermediate SQL series
47:08 - if you joined us for our last series we
47:10 - walked through the basics of SQL which
47:11 - is everything you needed just to get
47:13 - started and in this series we're going
47:14 - to be walking through some intermediate
47:16 - Concepts to really take your skills up
47:17 - to the next level now today we're going
47:19 - to be walking through joins but let me
47:21 - show you what you can expect from the
47:23 - entire series for this intermediate
47:25 - course
47:26 - so we're going walking through joins
47:28 - today and then in future videos we're
47:30 - walking through unions case statements
47:32 - updating and deleting data Partition by
47:35 - data types aliasing creating views
47:39 - having versus the group by statement the
47:41 - get date function primary care of your
47:44 - foreign key and then we're going to have
47:46 - an advanced course and this is not set
47:48 - in stone yet but these are some of the
47:50 - things that I think I will be going
47:51 - through or walking through we're going
47:53 - through CTE CIS tables or system tables
47:57 - subqueries temp tables string functions
48:00 - regular expression store procedures and
48:03 - then importing and exporting data so
48:05 - with all that being said let's get into
48:07 - it all right now let's get rid of me
48:09 - because we do not need to be seeing me
48:11 - for the rest of the series at the very
48:13 - top here are some of the things that
48:14 - we're going to be going through today
48:15 - which are inner joins and then outer
48:16 - joins and in the outer joins we have a
48:18 - few different styles or a few different
48:19 - types of outer joins now a join is a way
48:24 - to combine multiple tables
48:26 - into a single
48:28 - output for now we're going to be using
48:30 - the employee demographics and the
48:31 - employee salary table so let's get a
48:34 - look at both of these tables and see
48:37 - what's in them in our employee
48:39 - demographics table we have employee ID
48:41 - first name last name age and gender and
48:44 - then down here in our employee salary
48:46 - table we have employee ID job title and
48:49 - salary if you notice they have a similar
48:52 - column and that's going to be the
48:54 - employee ID now when you're doing a join
48:57 - you have to do this based off a similar
48:59 - column and typically you want it to be a
49:02 - unique field so we're going to be using
49:04 - the employee ID from both tables to join
49:06 - these tables together to create one
49:08 - output so let's get rid of this real
49:11 - quick and let's start building our query
49:14 - to join these two tables
49:16 - together so the first thing we're going
49:18 - to do is an inner join so let's do
49:21 - select
49:22 - everything and let's do it from SQL
49:26 - tutorial.
49:28 - db. employee
49:31 - demographics and let's do join we can
49:35 - also say inner join but join by default
49:39 - is going to say
49:41 - iner and we're going to do SQL tutorial.
49:45 - db. employee
49:48 - salary now we have to join them together
49:51 - which is what we talked about earlier
49:52 - and we're going to be doing that based
49:53 - off the employee ID so for that we have
49:56 - to say on and then we're going to
49:59 - say employee
50:02 - demographics dot employee ID is equal to
50:08 - employee
50:10 - salary dot employee ID so let's run this
50:15 - real quick and take a look at the
50:19 - output and let me pull this up real
50:22 - quick
50:24 - so what we are looking at is actually
50:27 - both tables combined we have the
50:29 - employee ID first name last name age
50:31 - gender and then here's the salary
50:33 - employee ID job title salary now an in
50:36 - join is really only going to show
50:38 - everything that is the same so in both
50:41 - tables there are employee IDs of
50:44 - 10001 all the way down to
50:47 - 10009 but if you notice there is data
50:50 - that is missing real quick let's go down
50:52 - to this graphic and let's look at this
50:54 - inner join an inner join is going to
50:56 - show everything that is common or
50:59 - overlapping between table a and table B
51:02 - so what we are looking at here is
51:04 - exactly that we're only looking at the
51:06 - things that are similar based off this
51:09 - employee ID in both tables now let's
51:12 - change this join to a full outer
51:17 - join and let's run this and see what we
51:23 - get now if you notice the output is very
51:27 - different so let's take a look at it and
51:30 - see why it's so different if you notice
51:33 - everything down till here is the exact
51:35 - same so employees 101 down to 1009 are
51:40 - exactly the same but once we get down to
51:43 - row 10 it starts to get very different
51:46 - now we are joining these tables based
51:47 - off the employee ID so for example right
51:51 - here Ryan Howard has an employee ID of
51:54 - 101 but as you can see in this table for
51:57 - salaries there is no 101 employee ID so
52:01 - it has nothing to link it to so because
52:04 - of that it fills in everything as null
52:06 - because it has nothing to match on this
52:08 - table and vice versa in the employee
52:12 - salary table there's a person in here
52:14 - that's a Salesman and there's no
52:15 - employee ID at all which means all this
52:18 - information is going to be null and we
52:20 - can see that in this diagram right here
52:22 - so this is the full outer join right
52:24 - here and what it is saying is we are
52:27 - going to show everything from table a
52:29 - and table B regardless of if it has a
52:32 - match based on what we were joining them
52:34 - on so even if table a has an employee ID
52:37 - but there's no employee ID in table B
52:40 - we're still going to show it and vice
52:41 - versa so now let's look at a left outer
52:46 - join a left outer join is going to take
52:49 - the left table and say we want
52:52 - everything from the left table and
52:54 - everything that's overlook lapping but
52:56 - if it's only in the right table we do
52:58 - not want it now what is the left and the
53:00 - right table the left table is going to
53:01 - be our first table that we use our right
53:03 - table is going to be the second table
53:05 - that we use so we're going to look at
53:07 - everything in the employee demographics
53:08 - table regardless of whether or not it
53:10 - has a match on the employee ID in the
53:13 - employee salary table so this is what
53:15 - that looks like so as you can see this
53:18 - is our entire table for employee
53:20 - demographics and down here we have three
53:24 - that have information in the employee
53:26 - demographics table but have absolutely
53:28 - no information in any of the employee
53:31 - salary table because there's nothing to
53:33 - match it on so this 101 is not in this
53:36 - table this 13 is not in this table and
53:39 - this one does not even have an employee
53:41 - ID so we're not going to have a match at
53:43 - all and if we change that to the
53:47 - right you'll see the exact opposite it's
53:50 - going to show us everything in the
53:52 - employee salary table so now we have all
53:55 - of our information right here from the
53:57 - employee salary table and if it doesn't
53:59 - match in this table it's just going to
54:01 - give nulls so down here we have 1,0 and
54:04 - obviously there's not going to be
54:05 - anything associated with that because
54:07 - there's no 10,0 in the employee
54:09 - demographics table and for this one we
54:11 - have a Salesman with no employee ID and
54:14 - since there's no employee ID to tie it
54:16 - to this demographics table we're going
54:18 - to have nothing and we can see that in
54:20 - the diagram right here so for the left
54:22 - outer join we're looking at everything
54:24 - in table a which is our demographics
54:26 - table and in our right outer join
54:28 - looking at everything at table B which
54:30 - is our salary table now let's pull this
54:33 - down a little bit so so far we've only
54:36 - been using the select star so we've been
54:38 - selecting everything and I only did that
54:40 - just for demonstration purposes but you
54:42 - most likely would not be doing this when
54:44 - you actually use these joins what you're
54:46 - probably going to want to do is Select
54:48 - exactly what columns you want in your
54:51 - output so for example let's do employee
54:56 - ID let's do first
55:00 - name last
55:03 - name and let's do job
55:07 - title and let's do
55:09 - salary and let's try to run that really
55:12 - quick and as you can see it is not going
55:15 - to work now why is that not working it's
55:18 - not working because we have two Fields
55:21 - one in each of these tables and we have
55:23 - to specify what employee ID we want
55:26 - because that is going to drastically
55:27 - change what our output is so we have an
55:29 - employee ID in this table and in this
55:31 - table which one do we want to use so for
55:34 - this demonstration let's use employeed
55:37 - demographics. employee ID and let's
55:41 - actually just do an inner join because
55:44 - it's easier for the
55:48 - output now let's run this and see what
55:51 - we get so as you can see we now have the
55:54 - employee ID first name last name job
55:56 - title and salary now we're doing this
55:59 - with an injoin based off the employee ID
56:01 - from the employee demographics table but
56:04 - if we use the employee salary table it
56:06 - should give us the exact same output and
56:09 - that's cuz we're using an in join and an
56:10 - in joint is only going to show us
56:12 - everything that overlaps between both
56:14 - tables but now let's try a write outer
56:19 - join and let's run this now we're using
56:22 - this employee ID from our employee
56:24 - salary table and since we're doing a
56:26 - write outer join we're going to get all
56:29 - the information from our employee salary
56:31 - table and it does not have to be in our
56:33 - left table which is our employee
56:35 - demographics table so if you look at the
56:37 - information down here this 110 is in the
56:40 - employee salary table but it's in this
56:43 - position because that's what we're
56:44 - looking at in our select statement and
56:47 - then over here we have our salary and
56:49 - since we have information right here
56:52 - which is in our employee salary table
56:54 - but there is no employee employe ID our
56:55 - employee ID is null now let's change
56:58 - this to look at the employee
57:00 - demographics employee ID and execute it
57:04 - as you can see that 110 is gone now we
57:07 - just have this information right down
57:09 - here and we didn't have the employee ID
57:12 - for either of these so it's going to
57:13 - show it regardless and that's again
57:16 - because we have a right outer join and
57:18 - that's why we have no employee ID down
57:21 - here now let's do a left
57:25 - join and it's basically going to do the
57:27 - opposite of what we just looked at now
57:30 - we're looking at everything from our
57:31 - left table regardless of if it's in our
57:34 - right table and so our left table is our
57:36 - employee demographics table and we are
57:39 - looking at our employee demographics ID
57:41 - so with the employee demographics ID
57:43 - it's going to show us the first name and
57:45 - the last name which is everything in our
57:47 - left table our employee demographics
57:48 - table and since for these IDs or lack of
57:53 - IDs it's just going to give us NES in
57:55 - all of these places if I change it right
57:58 - up here to the employee salary employee
58:01 - ID and I execute it because we're
58:05 - showing everything from our left table
58:07 - which is our employee demographics table
58:09 - we are still going to see our names but
58:12 - since we're using the employee ID from
58:14 - our right table now we're just going to
58:17 - have blanks in this information and this
58:20 - information now let's look at a use case
58:22 - for these joins let's say Robert
58:25 - California is pressuring Michael Scott
58:27 - to meet his quarterly quota and Michael
58:30 - Scott is almost there he needs like a
58:32 - thousand more dollars and he comes up
58:33 - with the genius idea to deduct pay from
58:36 - the highest paid employee at his Branch
58:38 - besides himself so how does he go about
58:42 - doing this and identifying the person
58:43 - that makes the most money well of course
58:46 - he's going to come to SQL first so we
58:49 - actually want to look at a
58:51 - full outer join real quick
58:56 - and let's just look at
58:59 - everything so here's what we have we
59:02 - have the employee ID first name last
59:05 - name age gender employee ID job title
59:08 - and salary now what information do we
59:10 - need to know to get the information that
59:13 - Michael Scott needs well we need the
59:15 - employee ID we want the first name and
59:17 - last name so let's write all that real
59:20 - quick so employee ID we need first name
59:24 - name we
59:26 - need last name and then we're also going
59:30 - to need the
59:32 - salary cuz we need to know who is the
59:34 - highest paid
59:35 - employee so now let's do an injin
59:38 - because we really only want to look at
59:40 - the employee IDs where we know what
59:43 - their name is and their salary is and
59:45 - let's do this based off the employee
59:47 - demographics table really doesn't matter
59:48 - for an in join but let's do that real
59:51 - quick so let's look at this so we have
59:54 - our employee ID we have our first name
59:56 - our last name and our salary and we want
59:58 - to do it where it's not Michael Scott
60:01 - and that's because Michael doesn't want
60:02 - to take away his own money he wants to
60:04 - take away his employees money so let's
60:06 - do
60:07 - where first name does not equal Michael
60:12 - and he knows that he's the only one that
60:14 - is not named Michael so now we have our
60:18 - list and let's do order
60:21 - bu and let's do
60:25 - salary and let's execute
60:28 - this and let's do descending so that we
60:32 - can get at the very
60:33 - top and this is tough tough news for
60:36 - Dwight shut because it looks like he is
60:39 - the highest paid employee besides
60:41 - Michael and so it looks like he is going
60:43 - to get a cut in his pay this quarter so
60:46 - that Michael can meet his quota so
60:48 - that's just one use case let's look at
60:50 - one more use case let's start out by
60:52 - getting rid of this and looking at
60:56 - everything
61:00 - again so for our next use case Kevin
61:03 - Malone who is an accountant thinks that
61:05 - he may have made a mistake when looking
61:07 - at the average salary for our salesman
61:10 - now Angela Martin is very good at SQL
61:12 - and so what she is going to do is she
61:14 - wants to go in and calculate the average
61:17 - salary for our salesman so let's try to
61:20 - get that information so all we're going
61:22 - to need is the job title and the salary
61:26 - so let's come up here and let's get job
61:29 - title and let's get
61:31 - salary and let's look at
61:34 - this and now we only want to look at
61:38 - where the job title is equal to
61:45 - salesman now the very last thing we want
61:47 - to do is we want to say we want the
61:51 - average of salary now since we're going
61:55 - to need to do a group buy we're going to
61:57 - have to get rid of this
61:59 - salary and just take job title write
62:03 - down here and do group by job title so
62:07 - we're going to have job title and then
62:09 - the average
62:11 - salary and there you go we have the
62:14 - salesman and the average salary is
62:16 - 52,000 so Angela now knows to go back
62:19 - and fix what Kevin made a mistake on so
62:22 - that's how you use joins I will includ
62:24 - include this image in the description so
62:26 - you can go and look that up yourself if
62:28 - you are curious and want to look at that
62:29 - that really helped me out when I was
62:31 - first getting started to kind of
62:32 - conceptualize and understand what kind
62:34 - of data I was pulling based on what join
62:37 - I was using so I hope that was useful to
62:39 - you as well in the very next video we're
62:41 - going to be looking at the union so if
62:43 - that is posted be sure to check that out
62:45 - next thank you guys so much for joining
62:47 - me I really appreciate it if you like
62:49 - this type of content or got anything out
62:50 - of it today be sure to smash the like
62:52 - button smash the Subscribe button and
62:54 - I'll see see in the next video what's
62:55 - going on everybody my name is Alex free
62:57 - in today's video we're going to be
62:59 - looking at unions now in the very last
63:01 - video we walked through joins and I
63:03 - thought it was appropriate to look at
63:04 - unions next because unions and joins are
63:07 - somewhat similar or closely related and
63:10 - that's because in both instances they're
63:13 - combining two tables to create one
63:15 - output now what's the difference the
63:17 - difference is that a join combines both
63:19 - tables based off a common column and in
63:22 - last video that was the employee ID so
63:25 - in both tables we had an employee ID and
63:28 - when you're selecting your data you have
63:30 - to choose either to only select one
63:32 - employee ID or you can choose both
63:35 - employee IDs but they're in separate
63:37 - columns and with a union you're actually
63:40 - able to select all the data from both
63:42 - tables and put it into one output where
63:46 - all the data is in each column and not
63:49 - separate it out and you don't have to
63:50 - choose which table you're choosing it
63:52 - from now that may not have made1 100%
63:54 - sense but let's look at it real quick in
63:57 - stages so let's go down here and let's
64:00 - actually join this table
64:02 - together and see what we get now the two
64:05 - tables that we're looking at is employee
64:07 - demographics and warehouse employee
64:10 - demographics so over here we have our
64:12 - employee demographics information and
64:14 - then over here or actually down here we
64:17 - have our warehouse employee demographics
64:19 - now right now I'm doing a full outer
64:21 - join so we're looking at all the data
64:24 - and if we were to pull this in to an
64:26 - Excel spreadsheet we could just copy
64:28 - this and paste it over here and we would
64:30 - be good to go and that's because we have
64:32 - all the same columns first name last
64:35 - name age gender first name last name age
64:37 - gender but if we tried to combine this
64:39 - in a query where we have this
64:41 - information right here it wouldn't work
64:44 - we cannot get it in the same column and
64:47 - that's where a union comes into play so
64:50 - let's go back up here and let's actually
64:53 - run both of
64:55 - these now as you can see they have the
64:59 - exact same columns and that makes it
65:01 - super easy for what we're about to do
65:03 - all we're going to do is between these
65:06 - two queries which are completely
65:08 - separate right now all we're going to do
65:11 - is write
65:12 - Union so let's run just
65:18 - this now because of the Union you can
65:21 - look down here and the information that
65:22 - used to be in the other table which were
65:25 - in separate columns are now added Down
65:28 - Below in the exact same order now Daryl
65:31 - filin was actually in both tables and
65:34 - the reason he isn't showing up multiple
65:35 - times is because this Union is actually
65:37 - taking out and removing the duplicates
65:40 - kind of like a distinct statement now
65:42 - there's actually another thing called
65:44 - Union all and if we do Union all it is
65:46 - going to show us all of the information
65:49 - regardless if it is a duplicate or not
65:51 - so let's run that real quick and they
65:54 - they are both there but let's order
65:57 - by and let's do employee
66:01 - ID so now let's run it and as you can
66:05 - see right here these are exact
66:07 - duplicates and so the union got rid of
66:10 - it because they were the exact same but
66:12 - the union all kept it in because it is
66:15 - showing just the data as is now let's
66:18 - get rid of this Union all because the
66:20 - only reason why it works so well is
66:22 - because those two tables were exact same
66:25 - they were employee ID first name last
66:27 - name age gender so they're basically the
66:29 - same tables just with different
66:30 - information so it made it really easy
66:33 - but we have another table
66:36 - employee uh
66:38 - salary and let's look at these two
66:41 - tables so these two tables are obviously
66:45 - very different they hold different
66:48 - information now we would still be able
66:50 - to combine them so let's do employee
66:55 - ID first name and let's do
67:00 - age now down here on the employee salary
67:03 - table we will do employee ID job title
67:07 - and
67:09 - salary now let's use a union really
67:14 - quick and run this
67:17 - one and it is still going to work now
67:21 - why does this work well first off the
67:23 - the reason it's working is because these
67:25 - data types are the exact same or at
67:29 - least similar so text and text age which
67:31 - is an integer salary which is an integer
67:34 - it has the same amount of columns so
67:36 - three and three so we have employee ID
67:40 - first name and age and it's taking that
67:42 - from the first select statement and it's
67:44 - still using a union to take the data
67:47 - from the second select statement so it's
67:49 - still inserting this information now
67:51 - this is not what you want to do because
67:53 - right here we have first name and it's
67:55 - salesman salesman and then our age we
67:57 - have 30 45,000 and 45,000 is obviously
68:01 - not an age so you want to be careful
68:03 - when you're using a union to combine two
68:05 - separate tables and make sure that the
68:07 - data you're selecting is the same in the
68:10 - very next video we're going to be
68:11 - walking through case statements thank
68:12 - you guys so much for joining me I really
68:14 - appreciate it if you like this type of
68:16 - content be sure to subscribe below and
68:18 - I'll see you in the next video what is
68:20 - going on everybody my name is Alex
68:21 - freeberg and today we're going to be
68:23 - walking through cas statements in SQL a
68:26 - case statement allows you to specify a
68:28 - condition and then it also allows you to
68:30 - specify what you want returned when that
68:32 - condition is met so we're going to be
68:35 - using this employee demographics table
68:36 - that we're looking at right here we're
68:38 - going to walk through the syntax of how
68:40 - to create a case statement and then
68:41 - we're going to actually go into some use
68:43 - cases at the end so let's start off by
68:45 - specifying what columns we want let's
68:47 - say we want the first name we want the
68:51 - last name and we want want the age now
68:56 - let's just get that
68:57 - information now for our case statement
68:59 - we're going to be using this age column
69:01 - so we actually want the age to be in
69:03 - there so let's
69:04 - specify where age is not
69:08 - null and run that so now we have a
69:11 - pretty good look at it and let's just
69:13 - order
69:15 - by H just to clean it up a little bit so
69:19 - now let's start building our case
69:21 - statement so we're going to say case and
69:24 - then we want to say when now we need to
69:27 - specify what condition we want to look
69:28 - for so let's do when age is greater than
69:33 - 30 then then what do we want to be
69:36 - returned so we want to return that they
69:39 - are old else so that means anything that
69:42 - is not over the age of 30 we want to
69:45 - return
69:48 - young and then you need to specify that
69:50 - you done with the case statement and so
69:52 - you will write end at the very bottom so
69:55 - this is our first case statement let's
69:56 - run it and see what we get so as you can
69:59 - see a new column was created and if the
70:02 - person is over the age of 30 so 31 and
70:04 - up they are given old and if they're not
70:07 - over the age of 30 they are given
70:10 - young now we can do as many when and
70:13 - then statements as we want so if we want
70:15 - to we can also do when the age is
70:19 - between 27 and 30
70:24 - then we want to return
70:26 - young and anyone else we're going to
70:29 - call a
70:31 - baby so now we have Ryan Howard as the
70:35 - baby anyone between 27 and 30 they're
70:38 - considered young and anyone over the age
70:41 - of 30 is old now something to note is
70:44 - that the very first condition that is
70:46 - met is going to be returned so if there
70:49 - are multiple conditions that meet the
70:50 - criteria only the very first one is
70:53 - going to be return returned and let's
70:54 - demonstrate that real quick so if the
70:57 - age equals
70:59 - 38 then return Stanley because that is
71:05 - Stanley uh and let's execute this real
71:08 - quick so right here I'm specifying that
71:10 - if it's 38 it should return Stanley but
71:13 - he is right here and it still says old
71:15 - and that's because this condition was
71:17 - already met now if we were to put this
71:20 - right
71:22 - here it should work correctly and let's
71:26 - try it out so now because this condition
71:28 - is met first it is going to return
71:30 - Stanley down here so now let's get into
71:33 - our first use case let's start off by
71:36 - copying this and then commenting it out
71:40 - I only did that because I don't want to
71:43 - rewrite it because I'm
71:44 - lazy uh let's get rid of that and let's
71:47 - look at this real quick we are going to
71:48 - join on another table that we have
71:51 - really fast um that's going to be SQL
71:54 - tutorial if you watched my other videos
71:56 - then you know this table and we're going
72:00 - to do that on employee
72:03 - demographics. employee ID is equal to
72:08 - employee
72:10 - salary. employee ID okay so let's just
72:14 - look at everything in these tables
72:16 - really quick now we are going to be
72:17 - focusing on the job title in the salary
72:19 - column but we want their first name and
72:21 - last name as well so let's start
72:22 - building that out
72:24 - let's do first
72:25 - name last
72:27 - name job title and salary and let's look
72:32 - at this really quick so now we have our
72:34 - employees and here is the situation we
72:36 - had a fantastic year this year selling
72:38 - paper and corporate has allowed Michael
72:40 - Scott to give out a yearly raise to
72:43 - every single employee but not every
72:45 - employee is going to get the same raise
72:47 - because our salesmen are genuinely the
72:50 - people who made us our money and they're
72:52 - going to get the biggest raises well
72:53 - other people really aren't going to get
72:55 - that big of a raise so now let's go
72:57 - through and create a case statement to
72:58 - calculate what their salary will be
73:00 - after they get their
73:01 - raise so let's start off by saying
73:05 - case and
73:07 - when and we want it to say when job
73:10 - title is equal to
73:12 - salesman so when they are a Salesman
73:15 - what do we want to happen so this is
73:17 - where the calculation occurs so we're
73:18 - going to take their
73:20 - salary and then we're going to add their
73:24 - salary times how much their raise is
73:27 - going to be so the salesman did really
73:29 - really well and we want to give them a
73:30 - 10% raise this year now when their job
73:35 - title is equal
73:38 - to
73:40 - accountant then and we'll take their
73:44 - salary we will give
73:47 - them let's give them a 5% raise still
73:51 - very
73:52 - generous there we we go and when the job
73:59 - title is equal to
74:03 - HR then it's going to be the salary
74:07 - plus the
74:09 - salary times and then we're going to do
74:14 - 01 all right and else we are just going
74:18 - to
74:18 - do
74:20 - salary plus salary oops let's do
74:25 - parentheses times and let's just give
74:28 - everyone else a 3% rays and then we'll
74:32 - write end now let's take a look at our
74:36 - results so here's what we have so far we
74:39 - have our first name our last name our
74:41 - job title and our salary that is our
74:43 - current salary and then we're going to
74:45 - have our salary after we get our raise
74:47 - so I'm going to actually write that up
74:49 - here so let's do as
74:51 - salary a after
74:54 - raise and let's execute
74:57 - that so let's look at these raises
74:59 - really quick so we have 45,000 and since
75:01 - he is a Salesman he gets a 10% raise
75:04 - which is a raise of
75:05 - $4,500 so 45,000 plus
75:08 - $4,500 is $49,500 and as you can see
75:12 - down here we have HR who is making
75:15 - $50,000 and now he is making
75:17 - $5,000 5 so everybody got a raise so
75:22 - that is our case statement I hope that
75:23 - was helpful I find myself using the case
75:25 - statement a lot when I'm wanting to
75:27 - categorize things or label things and
75:29 - that's kind of what we did in the first
75:31 - example and you can even do calculations
75:33 - like we did in this use case so I hope
75:36 - that was helpful thank you guys so much
75:38 - for watching I really appreciate it if
75:40 - you learned anything from this video be
75:41 - sure to like And subscribe below and
75:43 - I'll see you in the next video what is
75:45 - going on everybody my name is Alex fre
75:47 - and today we're going to be looking at
75:48 - the having Clause now the having Clause
75:51 - I feels a little bit unappreciated in
75:53 - the SQL Community I feel like it doesn't
75:55 - get a lot of love and so today I want to
75:57 - describe how to use it and what it's
75:58 - used for so before we use the having
76:00 - Clause I want to set up our query here
76:03 - uh we want to use an aggregate function
76:04 - in the group by statement and then I
76:06 - will show you how to use this having
76:08 - Clause so let's look at the job title
76:12 - and let's look at the count of job
76:17 - titles and then down here we need to do
76:20 - group by job title
76:24 - and let's execute
76:25 - this and here is our job titles and
76:28 - here's the count of how many people have
76:30 - those job titles so now let's say we
76:32 - want to look at all the jobs that have
76:34 - more than one person in that specific
76:36 - job so let's do where uh the
76:42 - count of job title is greater oops is
76:48 - greater than one and let's run
76:50 - that and as you can see we're going to
76:52 - get this this message right here now
76:53 - let's read it an aggregate may not
76:56 - appear in the wear Clause unless it is
76:58 - in a subquery contained in a having
77:00 - clause or a select list and the column
77:04 - being aggregated is an outer
77:06 - reference what that is basically saying
77:08 - is is we cannot use this aggregate
77:11 - function in the wear statement we need
77:12 - to use a having Clause so let's get rid
77:16 - of this and let's say
77:18 - having the count of job
77:21 - title greater than one I did the same
77:24 - thing again and let's execute this and
77:27 - we're still going to get an error now
77:29 - why are we getting that error the reason
77:31 - is is because this having statement is
77:34 - completely dependent on the group by
77:36 - statement because we are performing this
77:38 - after it has been aggregated so this
77:40 - having statement actually needs to go
77:42 - after the group by statement because we
77:45 - can't look at the aggregated information
77:47 - before it's actually aggregated in that
77:49 - group by statement so now let's run this
77:52 - and and it worked
77:54 - perfectly so now we only have the jobs
77:56 - that have more than one employee for
77:58 - that job
78:00 - title so now let's look at one more
78:02 - example let's do the average let's say
78:06 - salary and let's get rid of this having
78:08 - Clause real quick and just to look at
78:12 - this
78:13 - information uh let's do order by and
78:17 - we'll do average
78:21 - salary so let's look at this and we have
78:25 - 36,000 to 65,000 so in the middle we got
78:28 - 44,500 so let's use this having
78:31 - statement and let's
78:34 - say the
78:36 - average of
78:38 - salary where it is greater than
78:44 - 45,000 and we actually need to put this
78:47 - right here right after the group buy and
78:50 - before the order buy so let's run this
78:53 - and see what we get and it worked
78:55 - perfectly so now we're looking at the
78:56 - job titles that have an average salary
78:58 - of over
79:00 - $45,000 so there you go that is the
79:02 - having Clause definitely one that is
79:04 - good to know and is very useful in
79:06 - specific situations thank you guys so
79:08 - much for watching I really appreciate it
79:10 - if you like this video or learned
79:12 - anything today be sure to subscribe
79:13 - below and I'll see you in the next
79:15 - video what is going on everybody my name
79:18 - is Alex freeberg and today we're going
79:19 - to be looking at updating and deleting
79:21 - data in a table now what's the
79:23 - difference between inserting data into a
79:25 - table and updating data insert into is
79:28 - going to create a new row in your table
79:31 - while updating is going to alter a
79:32 - pre-existing row while deleting is going
79:36 - to specify what rows you want to remove
79:38 - from your table so let's get going with
79:41 - the updating so down here Holly flax
79:44 - does not have an employee ID age or
79:47 - gender now we want to update this table
79:49 - to give her that information so let's do
79:52 - update now we need to specify what table
79:54 - we are going to be hitting off of so
79:56 - let's do SQL tutorial. db. employee
79:59 - demographics so now we're going to use
80:01 - something called set and set is going to
80:03 - specify what column and what value you
80:06 - actually want to insert into that cell
80:09 - so let's set
80:10 - her employee ID equal to and it's going
80:15 - to be
80:16 - 1,2 and we have to specify which one to
80:19 - do this to because if we ran just this
80:22 - is going to set every single employee ID
80:24 - to 112 because we haven't specified that
80:27 - we only want Holly flax's row to be
80:29 - updated so now we have to specify
80:32 - where first
80:34 - name is equal to
80:38 - Holly
80:39 - and last name is equal to flex so now
80:46 - let's run this and see what we
80:49 - get so one row has been affected
80:53 - let's see what we got and there we go as
80:57 - you can see the employee ID was updated
80:59 - exactly how we specified it right here
81:01 - so we also want to update age and gender
81:03 - and let's do that in the same
81:05 - query so let's set the age equal to 31
81:10 - and instead of using and we actually
81:12 - need to use a comma so let's say age
81:15 - equal to 31 comma gender is going to be
81:19 - equal to female and let's write
81:23 - this and see what we get there you go
81:26 - now let's look at our
81:28 - table and as you can see it was updated
81:31 - to 31 and
81:33 - female so very easy very easy to specify
81:36 - what you want often times uh tables like
81:38 - this will have a unique key like
81:40 - employee ID is our unique key in this
81:42 - table so I could easily just say uh
81:45 - where the employee ID is equal to and
81:49 - then you know
81:50 - 102 so it's an easy way way to specify
81:53 - what employee you're trying to update so
81:55 - now let's look at the delete statement
81:56 - the delete statement is going to remove
81:58 - an entire row from our table so let's do
82:03 - delete and we actually need to say from
82:06 - and we have to specify what table we
82:07 - want to be removing this information
82:09 - from so let's do SQL tutorial. db.
82:13 - employee
82:14 - demographics and now we need to specify
82:17 - what row we want to remove so let's do
82:20 - where employee ID is equal to and let's
82:24 - choose a completely random employee ID
82:27 - 105 so let's run this and see what
82:32 - happens so one row is
82:34 - affected let's look at our table and as
82:38 - you can see 105 is now gone now you have
82:42 - to be very careful when you use the
82:43 - delete statement because once you run it
82:46 - you cannot get that data back there's no
82:48 - way to reverse a delete statement so if
82:50 - I had gotten rid of this wear statement
82:52 - and I ran this it would delete
82:54 - everything from the entire table and you
82:55 - could not get that data back so a little
82:57 - trick that I use before I actually run a
82:59 - delete statement is I make it a select
83:02 - statement because you're going to select
83:04 - everything where the employee ID is
83:08 - equal to let's just do
83:10 - 1,4 and now when you run this you are
83:13 - going to see exactly what you will be
83:15 - deleting and now we know that Angela
83:17 - Martin that entire row is going to be
83:19 - gone if I hadn't done that and I just
83:21 - went like this and I wrote delete and I
83:24 - only had this running I would not know
83:26 - that this information is going to be the
83:27 - only one that's gone maybe I made a
83:29 - mistake down here maybe I accidentally
83:31 - put something in there that wasn't
83:32 - supposed to be in there and now I'm
83:34 - deleting much more than I thought I was
83:35 - actually going to
83:37 - delete so using the select statement can
83:39 - be a very good Safeguard against
83:41 - accidentally deleting data that you do
83:43 - not want to delete so that is update and
83:45 - delete thank you guys so much for
83:47 - watching I really appreciate it if you
83:48 - like this video be sure to subscribe
83:50 - below and I'll see you in the next video
83:52 - What's going going on everybody my name
83:53 - is Alex free and today we're going to be
83:54 - talking about aliasing now all aliasing
83:57 - really is is temporarily changing the
83:59 - column name or the table name in your
84:01 - script and it's not really going to
84:02 - impact your output at all aliasing is
84:05 - really used for the readability of your
84:07 - script so that if you hand this off to
84:08 - somebody or somebody comes behind you
84:10 - and starts working on this they can more
84:12 - easily understand it and it may not
84:14 - sound super useful especially for small
84:16 - scripts like what we have on the screen
84:18 - but when you start getting to larger
84:19 - scripts where you have six seven or
84:21 - eight joins and you're selecting 10
84:23 - different column names it actually is
84:25 - very useful and very important so let's
84:27 - get into how that actually works and
84:29 - then I'll have an example later of how
84:30 - we can use aling with a little bit of a
84:32 - larger query so in this table let's
84:35 - select first
84:37 - name and
84:39 - execute what we want to do is just write
84:42 - as and let's do FN name and all that's
84:45 - going to do is it's going to rename this
84:47 - column from first name which it was
84:49 - originally named to FN name now you can
84:52 - can use as but you can also just get rid
84:54 - of that and do it exactly how I have it
84:57 - and it's still going to work perfectly
84:59 - you can either use the as or you can not
85:01 - use it I typically don't I just put a
85:03 - space in between the actual column and
85:04 - the Alias now let's look at an example
85:06 - of how this might actually be useful so
85:08 - we have a first name and a last name in
85:10 - this column so what we're going to do is
85:11 - actually combine those so let's do plus
85:14 - and let's add a space in there and let's
85:16 - do a plus and let's do last name so this
85:19 - is going to take the first name add a
85:21 - space and then do the last name and
85:23 - we're going to do that as and let's do
85:26 - full
85:27 - name and let's execute
85:29 - this so now we have a column called full
85:32 - name which is our Alias so we've
85:33 - combined the first name and the last
85:35 - name column into one single column and
85:37 - we've renamed it full name if we had not
85:39 - used this Alias at all it would have
85:41 - just said this which is no column name
85:44 - at all we don't typically want that when
85:46 - we have an output we want to give this
85:48 - column a name so that somebody who's
85:49 - actually looking at the script or who's
85:50 - looking at the output of the script
85:52 - actually understand what is contained
85:54 - within this column so for that we're
85:56 - just going to keep it as full name now
85:59 - another time that you're often going to
86:00 - use aliasing in the select statement is
86:02 - when you're using aggregate functions so
86:04 - in this table we have age so let's pull
86:07 - that up really
86:08 - quick so we have age right here and
86:11 - let's actually just do the average
86:16 - age and when we execute this we're going
86:18 - to get no column name and 31 so we want
86:21 - to do
86:22 - is give it average
86:25 - age and when we do that we now have a
86:27 - column name and again you want to have a
86:29 - column name in case someone comes up
86:31 - behind you and is reading the script so
86:32 - that they understand what this column is
86:34 - being used for now that we've looked at
86:36 - aliasing column names let's look at
86:37 - aliasing table names it basically is the
86:40 - exact same thing uh we're just going to
86:42 - write as and let's do demo for
86:46 - demographics and let's do demo Dot and
86:50 - it's going to give us all of our options
86:51 - and we'll do employee
86:54 - ID so when you alias in a table name
86:58 - when you are selecting in the select
86:59 - statement you actually need to preface
87:01 - your column name with a table name or
87:04 - the table Alias Dot and then employee ID
87:07 - and this is extremely important to do
87:09 - especially when you have a lot of joins
87:10 - that you're doing or you're selecting a
87:12 - lot of columns when you have several
87:14 - joins because it can get very very messy
87:16 - quick so let's actually join this to
87:21 - employees
87:22 - salary and let's do that
87:25 - on
87:28 - demo. employee ID is equal
87:33 - to
87:36 - s. employee ID so now let's do demo.
87:40 - employee ID comma s do and let's do
87:43 - salary so looking at the script now is
87:46 - very clean it is very easy to understand
87:49 - and that is what's so important with
87:50 - aliasing if for for example we took this
87:53 - off every time we wanted to reference
87:55 - this table we would have to put the
87:57 - entire table name and putting the entire
87:59 - table name is correct it just is very
88:02 - cumbersome and does not look clean at
88:04 - all and so using something like demo as
88:06 - an alias makes it a lot more easily
88:08 - readable and a lot more manageable when
88:10 - you're looking at it when you have a
88:12 - very long script let's look at this
88:14 - queer where we're joining together three
88:15 - Separate Tables and after each table we
88:17 - have an alias for employee demographics
88:19 - we have a employee salary we have B and
88:22 - warehouse employee demographics we have
88:23 - C now unfortunately I have seen a lot of
88:25 - scripts that look exactly like this and
88:27 - this is what you do not want to do you
88:29 - do not want to use your aliasing to just
88:31 - write an a a b or a c that is very
88:33 - frowned upon when writing queries
88:35 - because it really doesn't give any
88:36 - context to what the table that you're
88:38 - referencing is and it gets really
88:40 - confusing as this query continues to
88:42 - grow and as you add more columns to your
88:44 - select statement it makes it more
88:45 - difficult to understand where those
88:47 - columns are coming from and so when I'm
88:48 - reading that I say select a. employee ID
88:51 - okay what's a a is employee demographics
88:54 - so you really do not want to do that now
88:56 - let's look at an example of what it
88:57 - should look like so for employee
88:59 - demographics instead of having an alias
89:01 - of a a I used demo for demographics for
89:04 - employee salary I used s and for
89:06 - warehouse employee demographics I used
89:08 - where now this is not perfect by any
89:11 - means but in the select statement if
89:12 - you're just glancing at it you can
89:14 - easily understand which columns are
89:16 - coming from which tables so when I look
89:18 - at employee ID I know that's coming from
89:20 - employee demographics CU I have demo as
89:22 - the Alias so it's a lot easier to
89:24 - understand and when you hand this query
89:25 - off to somebody it is going to be a lot
89:27 - easier for them to read through it and
89:29 - understand where those columns and those
89:31 - table names are coming from and so they
89:33 - will appreciate that in the long run so
89:35 - that is all I got that is aling again
89:37 - not a super tough subject but a really
89:39 - important one to understand especially
89:41 - as you start working in teams and as you
89:43 - start creating more and more complex
89:44 - queries you want to have it more
89:46 - organized and more easily readable and
89:48 - so it may not come into play with those
89:49 - really simple queries but again as as
89:52 - you build out those more complex queries
89:54 - this becomes very useful I really hope
89:56 - you enjoyed this video if you did be
89:58 - sure to comment and subscribe below
90:00 - thank you so much for watching and I'll
90:01 - see you in the next video what's going
90:03 - on everybody welcome back to another
90:04 - intermediate SQL tutorial today we're
90:06 - going to be covering Partition by now
90:08 - Partition by is often compared to the
90:10 - group by statement the group by
90:12 - statement is a little bit different the
90:14 - group by statement is going to reduce
90:15 - the number of rows in our output by
90:17 - actually rolling them up and then
90:19 - calculating the sums or averages for
90:21 - each group whereas Partition by actually
90:23 - divides the result set into partitions
90:25 - and changes how the window function is
90:27 - calculated and so the Partition by
90:28 - doesn't actually reduce the number of
90:30 - rows returned in our output let's get
90:32 - started to look at the actual syntax of
90:33 - how to use Partition by and then we'll
90:35 - compare it to the group ey statement
90:36 - later just to see the differences
90:38 - between the two we're going to be using
90:40 - these two tables on our left over here
90:41 - so I'm going to pull those up really
90:43 - quick so let's run this and let's look
90:44 - at the two these two tables Side by well
90:48 - one underneath the other really quick so
90:50 - what we're going to be using to
90:51 - demonstrate these partitioned by is this
90:53 - gender column as well as this salary
90:55 - column and so we just need to join these
90:57 - two tables together on the employee ID
90:59 - and then we'll go from there now I'm not
91:01 - going to bore you with that I'm going to
91:02 - skip ahead and we'll actually look at
91:03 - how to use this partition bu so I've
91:05 - joined these two tables together and
91:06 - this is our output but we don't want
91:08 - every single column I'm going to start
91:09 - selecting some of these columns and then
91:11 - we'll start using this partition Buy and
91:13 - see what the output looks like after
91:14 - that all right so let's go right up here
91:16 - let's choose the first name let's do the
91:19 - last name we'll do
91:22 - gender and let's do salary and now we
91:26 - want to identify how many male and
91:27 - female employees we actually have and so
91:29 - we're going to say count of
91:33 - gender and this going to be
91:35 - over and now we're going to do our
91:37 - Partition
91:39 - by and we're also going to partition
91:41 - that by the
91:43 - gender as total gender now I'm going to
91:46 - come back to why we did each part but I
91:49 - want to see the output first and then we
91:52 - come back to why we wrote it this way so
91:54 - let's just do this really
91:57 - quick so it's going to be a little bit
92:00 - different than what you typically would
92:02 - expect in a group by statement the group
92:04 - by is going to roll everything up and
92:06 - you typically wouldn't have like a first
92:07 - name last name in a group by statement
92:09 - because it would be very hard to roll
92:11 - all those things up into those
92:13 - individual columns and to reduce the
92:14 - number of columns that are in your
92:16 - output and so in our output we can see
92:18 - Pam Beasley she's a female she makes
92:20 - $36,000 as a salary and there are three
92:23 - total women that work alongside her in
92:26 - this employee demographics table and so
92:28 - in our total gender column over here
92:30 - this is where we use the partition bu
92:31 - and if we used a group bu statement to
92:34 - get this kind of information all we
92:35 - would be able to do to get this
92:37 - information in a group by statement is
92:39 - say select gender count of gender and
92:42 - then Group by the gender down below
92:43 - underneath the join so because we're
92:45 - using the partition bu we're able to
92:47 - isolate just one column that we want to
92:49 - perform our aggregate function on and so
92:51 - we're able to add things like the first
92:52 - name and last name columns even though
92:54 - we aren't trying to include that in any
92:56 - partition or group by statement yet
92:58 - we're still able to add the aggregate
92:59 - function to each individual row while
93:01 - still maintaining those other columns
93:03 - let's take this entire query and let's
93:05 - basically just transform it into a group
93:07 - by statement and we'll see kind of what
93:10 - that looks like and what the difference
93:11 - is so all I'm going to do is get rid of
93:13 - all this I'm going
93:16 - to copy all of
93:19 - this and I'm going to say
93:22 - Group
93:23 - by and I'm going to do that because we
93:26 - have to use all these columns in our
93:28 - group by statement so let's execute this
93:32 - and as you can tell we are not able to
93:34 - see the output for the aggregate
93:35 - function that we were hoping for if we
93:37 - wanted to get the same output that we
93:38 - had before where we're showing three for
93:40 - females and six for males what we'd have
93:42 - to do is get rid of this first and last
93:45 - name and the
93:47 - salary and do the same thing in the
93:49 - group by
93:50 - statement and so let me get rid of these
93:52 - really
93:55 - quick and run this and so what the
93:59 - Partition by is doing is basically
94:01 - taking this query right here and
94:03 - sticking it on one line in the select
94:05 - statement and so I hope now you can see
94:07 - how valuable the partition bu can be if
94:09 - used correctly thank you guys so much
94:11 - for watching I really appreciate it if
94:13 - you like this video be sure to like And
94:14 - subscribe below and I'll see you in the
94:16 - next video what's going on everybody
94:17 - welcome back to another squl tutorial
94:19 - today we're going to be talking about
94:20 - CTE
94:22 - a CTE is a common table expression and
94:24 - it's a named temporary result set which
94:26 - is used to manipulate the complex
94:28 - subqueries data now this only exists
94:30 - within the scope of the statement that
94:32 - we were about to write once we cancel
94:34 - out of this query it's like it never
94:35 - existed a CTE is also only created in
94:38 - memory rather than a tempdb file like a
94:40 - temp table would be but in general a CTE
94:43 - acts very much like a subquery and so if
94:45 - you know how to do subqueries you should
94:47 - be able to pick up on CTE fairly easily
94:49 - so let's get started writing our very
94:51 - first C CTE and we're going to come down
94:52 - here and we're going to say with and
94:54 - we're going to write
94:55 - CTE
94:57 - employee and we're going to say as and
95:00 - this is where everything's going to
95:01 - start now CTE are sometimes called with
95:04 - queries I've never personally used that
95:05 - but I've seen it called that online but
95:07 - that's because it uses this with
95:09 - statement right at the very beginning so
95:11 - now we have with CTE employee as then we
95:13 - have an open parenthesis and now we have
95:15 - to construct our select statement and
95:17 - this is kind of where we build out our
95:18 - quote unquote subquery and so I'm going
95:20 - to take in a select statement that I
95:22 - actually used in a previous video where
95:24 - we using the partition bu and so I'm
95:26 - going to put that in there and I'm kind
95:27 - of walk us through what that does and
95:29 - how we're going to use this so I'm going
95:31 - to paste this down right here and I'm
95:33 - actually going to go like this just to
95:36 - make it look a little nicer and then I'm
95:38 - going to close the parentheses at the
95:40 - end so now we have our CTE in place and
95:43 - as you can see it is basically just a
95:44 - select statement within the with CTE
95:47 - employee as and what this is going to do
95:49 - is going to take the first name last
95:51 - last name gender and salary and then
95:53 - it's going to take this aggregate
95:54 - function with the partition buy
95:56 - aggregate function with the partition
95:57 - buy and it's going to place it to where
95:59 - we can now query off of this data so
96:01 - it's putting it basically in a temporary
96:03 - place where we can then go and grab that
96:05 - data so all we're going to do at the
96:07 - very bottom is we're going to say select
96:10 - everything and we can do that from CTE
96:14 - employee so let's run this entire thing
96:17 - and see what we
96:19 - get so as you can see this select
96:22 - everything from CTE employee we are
96:24 - selecting everything from this select
96:27 - statement and so this feels a lot like a
96:29 - temp table we're actually quering off of
96:31 - a temp table but it actually acts a lot
96:33 - more like a subquery now we don't have
96:35 - to the select everything we can just do
96:38 - first name and let's do average
96:40 - salary and when we run this we'll just
96:43 - get those two columns and we don't have
96:45 - to go through and actually write this
96:46 - out each time it's just in this CTE for
96:49 - us so it does all the heavy lift within
96:51 - the CTE and then we can just query off
96:53 - of what we want now something to note is
96:55 - that the CTE is not stored anywhere and
96:57 - so it's not stored in some temp database
96:59 - somewhere if I try to run just this by
97:01 - itself it is not going to work so let's
97:03 - try that out really quick and we should
97:05 - get an error and that's because each
97:07 - time we run this query is actually
97:08 - creating the CTE again and so it's not
97:11 - being saved anywhere and so each time we
97:12 - run it we have to run it with the entire
97:14 - CTE another thing to note is you
97:16 - actually have to put the select
97:17 - statement right after the CTE if I try
97:20 - to go down here and say select
97:21 - everything from uh let's do
97:24 - CTE employees it doesn't actually work
97:26 - it's not going to come up at all and
97:28 - that's because it only is going to work
97:30 - with the select statement directly after
97:32 - the actual CTE that you've created I
97:34 - hope this was helpful and I hope that
97:36 - you understand how to use a CTE a little
97:38 - bit better again you don't have to go
97:40 - super complicated with the select
97:41 - statement within your CTE it can be very
97:44 - very simple I just wanted to demonstrate
97:46 - that you can use aggregate functions
97:47 - within your CTE and then just query off
97:50 - of those without having to do the the
97:51 - aggregate function again which I find is
97:53 - very very useful again thank you for
97:55 - watching if you like this video be sure
97:57 - to like And subscribe below and I'll see
97:58 - you in the next video what's going on
98:00 - everybody welcome back to another squl
98:02 - tutorial today we are looking at temp
98:04 - tables and if you can guess it based off
98:06 - of the name they're kind of like
98:08 - temporary tables and we create them very
98:10 - much the same way we're going to do
98:12 - create table um it's just a little bit
98:14 - different and you can hit off of this
98:17 - temp table multiple times which you
98:19 - cannot do with something like a CTE or a
98:23 - subquery where you can only use it one
98:25 - time or with a subquery you need to
98:26 - write it multiple times within a query
98:30 - and so these temp tables are extremely
98:32 - useful I'm going to kind of talk about
98:34 - how you can use them as we're going uh
98:36 - throughout this video but let's get
98:39 - started right away with actually
98:40 - creating one looking at it inserting
98:43 - some data and and and kind of showing
98:44 - you how temp tables work and what we can
98:47 - do with them so uh we're going to start
98:49 - off with create table
98:51 - much like uh a regular table is created
98:54 - the only difference is we're going to do
98:55 - this pound signed and then we're going
98:57 - to do
98:59 - tempcore
99:01 - employee uh so literally the only
99:04 - difference between a regular table and a
99:07 - temp table is this right here at the
99:09 - very beginning this this pound sign so
99:12 - uh let's just start by doing employee ID
99:16 - we make that an integer we'll do job
99:20 - title
99:22 - and we'll make that a varar
99:26 - 100 and then we'll do
99:29 - salary and let's make that an
99:31 - integer and so now we have our temp
99:35 - table uh let's go ahead and create
99:38 - it so now we have our temp table created
99:42 - and so we can look at it really
99:45 - quick so let's select
99:47 - everything from and we'll do temp
99:52 - employee so let's take a look it's
99:55 - completely empty um and we can insert
99:58 - data very much the same way we'd insert
100:00 - data into a regular table so let's start
100:03 - doing that let's do insert
100:07 - into and we'll do temp
100:10 - employee and we'll do
100:14 - values and let's just do something
100:16 - really quick because I'm going to get to
100:18 - a little bit more interesting stuff in a
100:20 - second
100:23 - oops so we'll make this person
100:27 - HR that's their job title then for
100:29 - salary we'll give them
100:32 - 45,000 and close it off so let's run
100:37 - this and let's select everything again
100:40 - and see what's in there perfect so we
100:44 - were able to insert data into this temp
100:46 - table and again we we don't have to
100:48 - create this every single time we um um
100:51 - or we don't have to run this every
100:52 - single time we need to hit off of it
100:53 - like we did a CTE if you watch my
100:55 - previous video and this one we can just
100:57 - run it and it sits there and so U again
101:01 - it feels very much like a real table and
101:03 - I'm going to get to a little bit of the
101:04 - nuances of of the and the differences
101:06 - between a regular table and a temp table
101:08 - in a second but let's really quickly um
101:12 - we want more data in there you don't
101:13 - have to just um do it value by value we
101:19 - can also just do
101:22 - um uh where we select all of the data
101:25 - from a specific table and insert that
101:27 - into a temp table and that is really
101:30 - quickly you know how I do it most of the
101:33 - time most of the time I'm not inserting
101:36 - values um I am you know taking a large
101:41 - table and taking a subset of that and
101:44 - then sticking it into a temp table so
101:47 - let's look at this really
101:49 - quick and
101:51 - and run that so now we took all of the
101:55 - data from employee salary and then we
101:59 - just stuck it into this table and really
102:02 - quickly this is one of the big uses of a
102:06 - temp table we had let let's say for
102:08 - example that this employee salary table
102:10 - had a billion rows or or or just an
102:13 - extremely large number and we were
102:15 - trying to uh you know hit a somewhat
102:18 - complex query off of it where we're
102:20 - using joint coins and we're using U
102:22 - maybe some window functions or different
102:24 - things you know it would take a very
102:27 - long time to hit off of this but what we
102:29 - can do is we could insert that data into
102:34 - this temp table and then we can hit off
102:35 - the temp table and it already has that
102:37 - sub uh that subsection of data that
102:40 - we're wanting to use for all of our
102:42 - later queries so really quickly that's
102:45 - kind of um kind of a use case for that
102:49 - so let's go down here we're going to
102:50 - kind of create another one and this
102:52 - one's going to be a little bit more
102:53 - advanced a little bit of how I would
102:55 - actually use a temp table above was just
102:58 - kind of showing the basic syntax how you
103:00 - kind of put data into it you know kind
103:02 - of how it's used now I'm going to show
103:04 - you kind of how I would actually use it
103:07 - so let's do create table uh let's do
103:10 - temp
103:11 - oops create
103:13 - table uh let's do
103:16 - temp uh employee
103:19 - 2 and then let's do open parentheses and
103:23 - we'll do job title and we'll make that a
103:27 - varar
103:29 - 50 and then we can do
103:33 - employees per job we'll make that an
103:37 - integer now we need average age make
103:40 - that an integer and the very last one
103:43 - will be average salary I'll make that an
103:46 - integer as well and let's run this oops
103:52 - so we have our second table now we want
103:56 - to insert data into this one so we're
103:59 - just going to do insert
104:01 - into and we'll do temp employee 2 and
104:06 - for this one I'm going to take a query
104:09 - that we used in a previous video and so
104:12 - I'm just going to copy and paste that to
104:13 - save time uh and then we'll keep on
104:16 - moving from there all right so I'm just
104:18 - going to paste that in we will run this
104:21 - and really all it's doing is from this
104:24 - these tables it's taking the job title
104:26 - we're getting a count on the job title
104:27 - average age average salary and that is
104:30 - it um so let's see if that worked which
104:34 - it looks like it did but you know let's
104:37 - actually take a look at the
104:38 - [Music]
104:40 - data and so now we have this subsection
104:44 - of data from this join
104:47 - above and what this is going to do is is
104:50 - whenever we want to run this we don't
104:53 - have to run it on these two tables and
104:56 - create the join and then do the
104:58 - calculations which takes time what it's
105:01 - going to do is it's going to take this
105:03 - these exact values and place this into
105:05 - this temporary table and if we want to
105:07 - run further calculations on these values
105:10 - we can easily do that in a fraction of
105:12 - the time instead of having to run this
105:14 - every single time which will take up so
105:16 - much uh uh processing power and it will
105:19 - reduce your runtime dramatically when
105:21 - you're placing this data in this temp
105:23 - table and hitting off of that instead of
105:25 - all these joints and everything above uh
105:28 - a lot of times these temp tables are
105:30 - used in store procedures now if you
105:31 - haven't learned about store procedures
105:33 - or used stor procedures at all you know
105:36 - that's okay I still want to show you
105:38 - something that might be useful um
105:40 - although this is used a ton in store
105:42 - procedures so for example let's say we
105:45 - have a store procedure set up we run the
105:47 - store procedure and we get an output and
105:49 - you know we for whatever reason want to
105:51 - run it again and when we run it again uh
105:54 - we get this error and you know this temp
105:57 - table lives somewhere it it doesn't live
106:01 - in an actual in the actual database uh
106:03 - but it lives somewhere and so when we
106:05 - run it again we get an error because
106:07 - there's already a temp table created one
106:10 - trick or one little tip that I would
106:12 - give is doing something like this saying
106:16 - drop table oops I don't know why I did
106:18 - so many spaces drop table if
106:23 - exists and we'll do temp employee
106:28 - 2 just like that now what this is going
106:32 - to do is when you're running that store
106:34 - procedure over and over and over again
106:35 - you're getting error or whatever for
106:37 - whatever reason you need to run it
106:38 - multiple times every time that you run
106:42 - it it's going to encounter this and so
106:45 - if that already exists it is going to
106:48 - delete that table and then allow you to
106:51 - create it again and this is just a
106:54 - really good thing to do so now if you
106:58 - see down below I can run this time and
107:00 - time and time again and it is going to
107:03 - work every single time because it is
107:04 - checking to see if that exists and if it
107:07 - does it deletes it and then I can create
107:09 - again and so that is just a helpful tip
107:13 - if you're going to try to use this I
107:15 - highly recommend adding that to your
107:17 - query just to make sure things run
107:18 - smoothly I know there is a lot more that
107:20 - can go into temp tables a lot more of
107:22 - the technical aspects or the DBA stuff
107:25 - um obviously I just want to teach you
107:26 - how to use it and what you might use it
107:28 - for and how to actually write it out but
107:31 - you know there are a lot more things
107:32 - that you can do research on about
107:34 - processing speed and storage but unless
107:37 - you are something like a DBA you
107:39 - probably don't need to worry about those
107:41 - things and so if you are a DBA I do
107:44 - recommend looking into those things
107:46 - making sure you understand how that
107:47 - works how this data is stored uh so that
107:50 - when people use them or you are using
107:52 - them you know what's going on in the
107:54 - background but for getting up and
107:55 - running with temp tables I hope that
107:57 - this was helpful thank you guys so much
107:59 - for watching I really appreciate it if
108:01 - you like this video be sure to like And
108:03 - subscribe below and I'll see you in the
108:04 - next
108:07 - [Music]
108:17 - video what's going on everybody welcome
108:19 - back to another SQL tutorial today we're
108:21 - going to be looking at string functions
108:24 - some of the things that we're going to
108:25 - be looking at are things like trim
108:27 - replace substring and upper and lower uh
108:29 - we're going to create a new table insert
108:32 - a little bit of bad data into it and
108:34 - then we're going to be using that to
108:36 - work on our string functions today so I
108:39 - already have this set up right here um
108:41 - I'm going to put this in the GitHub that
108:43 - you can just download this you don't
108:44 - have to you know type this out manually
108:46 - so go look in the description if you
108:48 - know you just want to get that off the
108:50 - GitHub and download that and copy and
108:52 - paste it save you a little bit of time
108:54 - but let's go ahead and run this really
108:56 - quick and as you can see in this table
109:00 - we have uh our data right here give me
109:02 - one second so in this employeee errors
109:07 - table basically what we have actually
109:08 - let me pull this back up basically what
109:11 - we have is in this first one we have
109:15 - here we go we have some uh basically
109:18 - blank spaces on the right side the
109:20 - second one some blank spaces on the left
109:22 - side U we also have Jimbo which is an
109:25 - error because his name is Jim um and
109:27 - Halbert because his name is actually
109:30 - Halbert um and then for Toby for
109:33 - whatever reason that o is capitalized
109:34 - and then uh Michael got in here and
109:38 - added this extra part so we're going to
109:40 - have to figure out a way to take that
109:41 - out when we're doing our query and
109:43 - that'll come in a little bit later I
109:44 - think in the substring section so let's
109:48 - get into it right away
109:50 - let's start using uh our left trim and
109:54 - right trim we're going to kind of go
109:55 - through each one um pretty quickly
109:57 - hopefully I'm not not trying to make
109:59 - this a super long video because we got a
110:01 - lot of things to get through in this one
110:03 - video uh so I'm going to go through the
110:05 - trim right trim and left trim let's look
110:07 - at uh the employee ID because that's the
110:10 - one where we have some blank spaces on
110:12 - the right and the left side the left
110:14 - side you'll be able to obviously you're
110:15 - going to see that one much easier but uh
110:18 - let's start walking through this so
110:19 - let's do
110:20 - select employee ID and before we get any
110:24 - further let me just get the employee
110:27 - errors on here so we can
110:31 - um so that we can see everything as it
110:33 - comes up so we're just going to do trim
110:37 - and then type in the column that we want
110:40 - to uh take these blank spaces out of
110:43 - that's where the trim does the trim gets
110:45 - rid of Blank spaces on either the front
110:48 - or the back or or the left on the right
110:50 - side so on both sides that's what trim
110:52 - does and we'll say as ID trim so let's
110:56 - run this one really quick and as you can
110:59 - see this is our regular employee ID and
111:02 - so you know you can't visually see it as
111:04 - easily on this first one but there are
111:06 - blank spaces after this 101 and we got
111:10 - rid of those and then there were blank
111:11 - spaces before the 102 and we got rid of
111:15 - those now I'm just going to copy this uh
111:18 - two times because it's basically the
111:21 - exact same thing but uh I'm going to
111:24 - show you them all at the same time so
111:26 - it's the exact same thing except lrim
111:28 - and right trim uh and let's take a look
111:30 - at all these at the same
111:32 - time and let me pull it up so in the me
111:37 - see if I can get these all in here okay
111:39 - in the trim it got rid of both the left
111:41 - and the right side so all of these were
111:44 - fixed in the employee ID for the left
111:48 - trim we're only getting going to be
111:50 - getting rid of this one this one still
111:52 - has um blank spaces on it and when we do
111:55 - the right trim we're only going to get
111:57 - rid of the stuff on the right side so
111:59 - this one doesn't change because this is
112:01 - on the left hand side where the blank
112:03 - spaces are so this one was fixed again
112:05 - not super visual so you can't really see
112:07 - it but that one is fixed uh let's move
112:11 - on to the next part uh which is using
112:16 - replace so for this one we're going to
112:18 - be looking at the last name so let's go
112:22 - back up really quick to the employee
112:25 - errors uh as you can tell the last name
112:29 - um the biggest one where we kind of want
112:31 - to take something out of because we
112:33 - don't want that um that Dash fired still
112:37 - in there we're going to replace that and
112:40 - so let's look at how to do that um let
112:43 - me
112:44 - just copy this real quick and get rid of
112:47 - this top part um so we're going to do
112:50 - the last name so let's just start off
112:51 - with our last name um and then just as a
112:54 - baseline so we can see what it looks
112:55 - like before and then we'll do replace
112:58 - and all we're going to specify is the
113:00 - column that we want uh to do the
113:03 - replacing in we're going to specify the
113:06 - value that we want to replace so in this
113:08 - it's going to be Dash fire oops got a
113:11 - little aggressive on that one dash
113:13 - fired and we're going to indicate what
113:16 - we want to replace it with now I'm just
113:18 - going to replace it with blank
113:20 - um and we can say as last name
113:24 - fixed so let's see what this looks like
113:27 - really
113:28 - quick and it looks like it worked so in
113:31 - this last name it originally had
113:32 - flenderson DF fired and when we replaced
113:36 - it and we took that Dash fired and
113:38 - replaced it with basically nothing uh it
113:41 - then fixed it and so now it looks
113:44 - correct all right let's move on to the
113:46 - next one I think this one might be um
113:49 - the the longest one to write but that is
113:51 - the
113:52 - substring um and let me take this real
113:55 - quick trying to save us some time so
113:59 - substring is
114:01 - very is very very unique you can
114:05 - specify um in a either a number or a
114:10 - string you can specify the place that
114:12 - you want to start and then you can also
114:14 - specify how many characters you want to
114:15 - go out um and and and it pulls that in
114:19 - so just as a really quick example um and
114:22 - then I'm going to show you kind of a use
114:24 - case for this one that I think is pretty
114:25 - cool that um you know
114:28 - maybe let me
114:30 - see so that maybe that you'd find useful
114:34 - so I'm going to do first name and then
114:36 - I'm just going to do one comma three so
114:39 - it's going to take the first name it's
114:40 - going to start at the very first um very
114:44 - first letter or number and it's going to
114:46 - go forward three spaces or three spots
114:49 - spots so let's just take a look at what
114:51 - that looks like so for our table it's
114:54 - going to take Jim Pam and to or or Tobe
114:57 - for Toby um and so it's only going to
115:00 - take the the first three because you're
115:03 - starting at number one now what if we
115:04 - started at three so we do three comma 3
115:08 - it's going to go to the
115:10 - third um digit or or third letter and
115:15 - then it's going to go forward three so
115:17 - you kind of get a sense of how this
115:19 - works now I'm going to show you
115:22 - something that I think is very
115:24 - interesting that I think you guys will
115:27 - also find interesting uh let me fix that
115:30 - CU I just messed it up so if you've ever
115:32 - heard of something called fuzzy matching
115:35 - now if you don't know what fuzzy
115:36 - matching is I'll give you an example
115:38 - let's say in one table my name is Alex
115:40 - and in another table my name is
115:42 - Alexander if we tried to join those two
115:44 - together based off of my name they will
115:47 - not join because one is Alex and one is
115:49 - Alexander there's not they're not an
115:50 - exact match but for if I take the
115:53 - substring and start position one and
115:55 - move forward four characters it's going
115:57 - to take Alex from both and then it will
115:59 - match them together uh and say that they
116:02 - are the same so that you know it may not
116:05 - be perfect that's why it's called a
116:08 - fuzzy match because it can work for a
116:10 - large majority of the time but it's not
116:12 - going to work every single time and so I
116:15 - want to show you how we can use this
116:17 - here um really quick I need to join this
116:21 - to um the demographics table so I'm
116:25 - going to do that really
116:27 - quick bear with me for just one
116:31 - second let's try to make this at least
116:33 - look somewhat good so what I'm going to
116:35 - do is I'm going to start off by saying
116:39 - um let's tie it to the first name uh
116:42 - let's do whoops let's do air. first name
116:45 - is equal to the demographics table first
116:48 - name okay so I want to see and I'm just
116:51 - going to do first name for
116:55 - ER and let's do them. first name so
117:01 - let's see what comes up when we do it
117:03 - like this so the only one that is going
117:05 - to work is Toby and that's because even
117:08 - though it has a capital O it's still
117:10 - going to take it um so you know we want
117:14 - to get all of them to match and we can
117:17 - do that but it's going to be um a little
117:19 - bit of a different way than maybe is
117:21 - perfect but that's why they call it
117:23 - fuzzy matching so we're going to use
117:24 - substring on this so I'm going to say
117:27 - substring oops let me that right so I'm
117:30 - going to say substring and we're going
117:32 - to go one three so starting at the first
117:34 - position and going forward with three
117:36 - and we're going to do the exact same
117:38 - thing on the oops subst string it be
117:41 - great if I could spell that correctly
117:43 - we're going to do the exact same thing
117:44 - so one and
117:47 - three so we are actually going
117:50 - to take this give me a second missed
117:54 - that we're going to take this up here
117:57 - and we're just going to go like that and
118:01 - I why did I copy it with the error okay
118:04 - so let's run this really
118:06 - quickly and as you can see it is now
118:09 - going to match all of them and you can
118:11 - do this on a lot of different things
118:14 - typically when I'm doing a fuzzy match
118:16 - like this I'm not just going to do it on
118:18 - a first name right because if every
118:20 - there can be a ton of people named JY
118:23 - you know we want to do it on uh and and
118:27 - real quick let me actually show you
118:31 - um what the originals looked like just
118:35 - to make sure I hit the the point
118:38 - across um and that is going to be first
118:42 - name and come all right so real quick
118:45 - let's actually look at this so it
118:47 - originally was Jimbo Pamela and Toby uh
118:51 - in this one was Jim Pam and Toby And so
118:54 - when we just took the first three
118:57 - because it was Jimbo it then becomes Jim
119:00 - it was Pamela it becomes Pam now it
119:02 - matches and so that's what that's kind
119:04 - of the example that we're going
119:06 - for like I was saying I typically will
119:09 - not just filter on a first name because
119:11 - there's going to be a ton of people
119:12 - named Alex or Jim or or or you know
119:15 - Henry or whatever you're going to do
119:17 - this on many different things so would
119:19 - be doing it on things like uh if I'm
119:21 - trying to do a fuzzy match on a person I
119:23 - do it on their gender to make sure that
119:25 - their gender is the same um and I
119:27 - wouldn't probably need to use a
119:29 - substring for that but just to kind
119:31 - of give you a little bit more
119:33 - information I need to do it on the last
119:35 - name um so I need to use that substring
119:38 - again and I would probably do it on the
119:39 - age
119:40 - oops the what am I doing come on the age
119:45 - and the date of birth okay so all of
119:48 - those things if you if you fuzzy match
119:50 - on the first name and the last name and
119:53 - then the gender the age and the date of
119:55 - birth are all the same then you can
119:57 - typically get a very high accuracy in
120:01 - matching people across
120:04 - tables whether or not you have you know
120:06 - this is an example if you don't have
120:08 - like an employee ID which is what we do
120:10 - have but take for example we were not
120:12 - given that uh this is a way to match
120:14 - them using substrings let's move on to
120:18 - Upper and lower all upper and lower is
120:21 - going to do is basically take all the
120:24 - characters in The the text and make them
120:27 - either upper or make them lower so it's
120:30 - very
120:31 - self-explanatory uh let me copy this up
120:35 - here and we will get going on this
120:38 - one uh let's just look at the first name
120:43 - um specifically we're going to be
120:44 - looking at Toby right here so let's do
120:48 - first name
120:49 - let's do uh lower and all we have to do
120:53 - is put in the column that we want to
120:57 - do so this is our original first name
121:01 - and it then takes every single uh string
121:06 - that is in here or every single I guess
121:08 - character and and it makes it lowercase
121:12 - that's all it does uh and it is the
121:14 - exact opposite when we do upper so we
121:18 - can now take take a look at this one and
121:21 - now everything's going to be capitalized
121:23 - so there is a lot that you can do with
121:25 - these string functions and this is not
121:26 - all the string functions that there are
121:28 - there are a lot more but I would say
121:30 - that these are the more popular more
121:31 - useful ones that I typically use on a
121:34 - regular basis and so I hope that this
121:37 - has been helpful I hope that you learned
121:38 - something from this if you did be sure
121:40 - to like And subscribe below I have a lot
121:43 - more videos coming out with tutorials on
121:45 - everything from SQL python Tableau and
121:48 - Excel
121:49 - thank you so much for joining me I
121:51 - appreciate it and I will see you in the
121:52 - next
121:55 - [Music]
122:05 - video what's going on everybody welcome
122:07 - back to another SQL tutorial today we
122:09 - are talking about stored procedures now
122:12 - what is a store procedure a store
122:14 - procedure is a group of SQL statements
122:16 - that has been created and then stored in
122:18 - that database a store procedure can
122:19 - accept input parameters and we will be
122:21 - looking at that today but that means
122:23 - that a single store procedure can be
122:25 - used over the network by several
122:26 - different users uh and we can all be
122:28 - using different input data a store
122:30 - procedure will also reduce Network
122:32 - traffic and increase the performance and
122:34 - lastly if we modify that store procedure
122:36 - everyone who uses that store procedure
122:38 - in the future will also get that update
122:40 - let's start writing out the store
122:41 - procedure so we can look at the syntax
122:43 - we'll start off very simple and then in
122:44 - the next one we'll get a little bit more
122:46 - complicated so the very first thing that
122:48 - you need to write is create and then
122:51 - procedure and after that you're going to
122:53 - name it so let's just call this one
122:56 - test and all you're going to say is as
122:59 - and then you're going to write your
123:00 - query and so let's just do select
123:04 - everything from employee
123:09 - demographics and that is it we have
123:11 - created our very first store procedure
123:12 - of course this is super super simple but
123:14 - let's execute this really quick and take
123:16 - a look at
123:17 - it so it says that the commands
123:19 - completed successfully let's go over to
123:22 - our SQL tutorial we're going to go over
123:24 - to
123:25 - programmability store procedures and it
123:27 - is not showing up there what we need to
123:29 - do is we need to refresh our store
123:31 - procedures we're just going to go right
123:33 - here we're going to click refresh and
123:35 - then there is our store procedure now
123:37 - how do you actually use the store
123:38 - procedure that we just created so let's
123:40 - go right down here and let's say x which
123:45 - means execute and then all we're going
123:47 - to say is test test and we're going to
123:50 - run
123:51 - this and there we go so all we put in
123:54 - this store procedure was a select
123:56 - statement and so when we actually
123:57 - Rebrand the store procedure it returned
124:00 - our select statement now let's go down
124:02 - here and we're going to make it a little
124:03 - bit more complicated we're going to do
124:05 - the exact same thing in create store
124:09 - procedure make sure I spelled that right
124:12 - and let's call this
124:14 - tempore employee so if you remember from
124:17 - a previous video we worked on temp
124:19 - tables and we created our temp tables
124:21 - then inserted data into that we are
124:22 - going to add that to this St procedure
124:24 - so we can see the difference between a
124:26 - simple query versus a little bit more
124:27 - complicated query so I'm going to say as
124:30 - and then I'm going to insert that in
124:32 - here now what this is doing is I'm
124:34 - creating a table and then right down
124:37 - here I inserting that table now if I
124:39 - create this store procedure and then
124:41 - execute it nothing is actually going to
124:43 - be returned it will insert the data into
124:45 - that temp table but since I don't have a
124:47 - select statement in this proced
124:48 - procedure nothing will be returned so
124:51 - let's write
124:52 - select everything and we'll just do
124:56 - from and this is temp
124:59 - employee and right here and so now let's
125:02 - create our store
125:04 - procedure so that created successfully
125:07 - let's refresh over
125:09 - here and let's execute this so let's
125:12 - just go down right
125:14 - here and say execute and it's going to
125:17 - be temp
125:19 - employee and now we will execute
125:22 - this and there is our output now really
125:25 - quick let's go into temp employee and we
125:28 - actually want to change this store
125:29 - procedure so we're going to go over to
125:31 - modify so when we modify it a few things
125:34 - are going to show up on your screen the
125:36 - first thing that you're going to see is
125:37 - it says use SQL tutorial so it's just
125:39 - specifying the database the next two
125:41 - things you may not be as familiar with
125:43 - it's set anzy nules and then set quoted
125:46 - identifier if you don't know what these
125:47 - are it's not super important the first
125:49 - one just talks about how it to deal with
125:51 - nulles when you're using the wear
125:52 - statement and then the quoted identifier
125:55 - just talks about how it uses quotes in
125:57 - the actual query itself again not super
125:59 - important but they have those
126:00 - automatically turned on let's go down a
126:03 - little bit further and we're going to
126:04 - look at the alter procedure so we
126:07 - created our store procedure but now we
126:08 - want to alter it so this is the alter
126:12 - procedure and we are going to add a
126:14 - parameter to this so what the parameter
126:16 - is going to allow us to do is when we're
126:18 - actually executing the store procedure
126:20 - we can specify an input into that store
126:23 - procedure so that we get a specific
126:24 - result back and I'm going to show you
126:26 - what I mean by that in just a second but
126:28 - let's actually add our input and we're
126:30 - going to say at we're going to say job
126:34 - title and we need to specify the data
126:37 - type that that is going to be so let's
126:39 - just say
126:41 - nvar 100 I know below it says varar 100
126:44 - but that's um not extremely important so
126:47 - this is going to be our input so we need
126:49 - to go down here and say
126:52 - where job title is equal to at job title
126:58 - so when we actually are executing this
127:00 - and we say the job title is equal to
127:02 - let's say accountant this is going to
127:04 - become accountant and it's going to give
127:06 - us our results based off of it being an
127:08 - accountant so let's go over here and we
127:10 - are going to click this execute temp
127:12 - employee which we just modified and when
127:15 - we run it we're going to get an error
127:17 - because it is now expecting us to
127:20 - include our parameter of job title so
127:23 - what we need to do is we need to say at
127:27 - job title and let's say it's equal to a
127:30 - Salesman now let's try running this one
127:33 - and see what we get and so there is our
127:36 - output if we go back here I just wanted
127:38 - to show you really quick we do not have
127:39 - to put this job title right here you can
127:42 - put this anywhere in the query and use
127:44 - it however you want that's how
127:45 - parameters work and that's why
127:47 - parameters are so useful and you can use
127:49 - multiple parameters for one store
127:51 - procedure so you don't have to just
127:52 - limit yourself to one or none you can
127:55 - put as many as you really like so I hope
127:57 - that this video is helpful and that you
127:58 - understand store procedures just a
128:00 - little bit better thank you guys so much
128:02 - for watching I really appreciate it if
128:04 - you like this video be sure to like And
128:06 - subscribe below and I'll see you in the
128:07 - next
128:09 - [Music]
128:17 - video
128:20 - what's going on everybody welcome back
128:22 - to another SQL tutorial today we are
128:23 - going to be talking about subqueries now
128:26 - subqueries are often called inner
128:27 - queries or an nestic queries and they're
128:30 - basically a query within a query a
128:32 - subquery is used to return data that
128:34 - will be used in the main query or the
128:36 - outer query as a condition to specify
128:38 - the data that we want retrieved you can
128:40 - use subqueries almost anywhere you can
128:42 - use it in the select part of a query the
128:45 - from the where you can also use it in
128:47 - insert update and delete statements but
128:50 - in today's tutorial we're only going to
128:51 - be looking at the select the from in the
128:53 - Weare statements and you should get a
128:54 - pretty good idea of how to use it in
128:56 - those other statements all right now I'm
128:58 - going to paste on screen basically what
128:59 - we're going to be walking through today
129:01 - but really quick let's just take a look
129:03 - at the table that we're actually be
129:04 - working in and that is going to be from
129:06 - the employee salary table and I just
129:09 - want to show you the data that we're
129:10 - going to be working with before we
129:11 - actually get into it so we have an
129:13 - employee ID we have a job title and then
129:16 - we have a salary so really quick I'm
129:19 - going to show you what it looks like to
129:21 - have a subquery in the select statement
129:24 - so let's go down here really
129:25 - quick and what we're going to try to do
129:28 - is kind of do something like a Windows
129:30 - function but without actually having to
129:32 - do the windows function um and so we're
129:34 - going to do this with a subquery so I'm
129:37 - going to select and really quick
129:39 - actually let me copy this so we're going
129:42 - to do employee
129:45 - ID there we go we're going to do salary
129:48 - and now we can start building our
129:50 - subquery so we need to do an open
129:52 - parenthesis and I'm just going to copy
129:54 - this really quick because we're going to
129:55 - be doing it off of that table so we're
129:57 - going to say select and then I'll paste
129:59 - that and close it as well but what we
130:02 - want to do is we want to say average and
130:05 - salary now what this is going to do is
130:08 - it is literally going to run this and
130:10 - let's run this really quick it is going
130:12 - to run this and is going to show that
130:15 - the average salary for all the employees
130:17 - is 40 $
130:19 - 7,99 so we are looking at the average
130:21 - salary for every employee so when we run
130:24 - this it is going to give us the employee
130:27 - ID the salary and then in the very last
130:30 - one is going to show the average salary
130:32 - for every employee now it doesn't have a
130:35 - column header so or or a column name so
130:38 - let's give it um let's say as all
130:42 - average salary and we'll run that one
130:45 - more time just to make it look a little
130:47 - prettier um you can also do this in
130:50 - Partition bu I'm going to Super quickly
130:52 - just really quickly write this out um it
130:55 - should take no time at all and then I'm
130:56 - going to show you why we can't do this
130:59 - without the subquery why you aren't able
131:02 - to do this with a group buy so really
131:04 - quickly let me copy this I'm going to
131:06 - put it right down here and we're going
131:08 - to say average salary whoops and we can
131:12 - get rid of all this and we can say over
131:16 - and we're not going to partition it by
131:17 - anything
131:18 - but let's run both these at the same
131:20 - time and you'll see that they're the
131:21 - exact same outputs and so it's just a
131:24 - different way of doing it in this
131:26 - example but it really is just to show a
131:29 - comparison of how you might be able to
131:31 - use a subquery in the select statement
131:33 - now you might be wondering why group I
131:34 - does not work for this uh really quickly
131:36 - I'm going to write this out and let's
131:39 - get rid of that and we'll say Group by
131:43 - whoops let me at least try to write it
131:45 - correctly Group by and we'll do employee
131:49 - ID and we also have to do salary and
131:53 - then we'll say order
131:56 - by one two so let's run
132:00 - this and as you can see since we have to
132:03 - use the group by it groups by both the
132:05 - ordered ID and the salary and so we're
132:08 - not going to be able to get that all
132:10 - average salary that we're looking for
132:12 - that we can get in the partition buy and
132:14 - also the subquery in the select
132:15 - statement now I'm going to show you the
132:17 - subquery in the from statement so let's
132:20 - just get rid of that really quick and
132:21 - let's say select everything let's say
132:24 - from and we're going to do an open
132:26 - parentheses here and here is where we're
132:28 - going to write our subquery so if you
132:31 - have watched previous videos where I've
132:33 - done uh tutorials on the CTE or tutorial
132:37 - on the temp tables this is one that is
132:40 - very much like those except I think a
132:42 - little bit less efficient when I'm doing
132:45 - something where I'm creating a table and
132:47 - then quering off off of it which is what
132:48 - we're about to do I much prefer a CTE or
132:52 - a temp table subqueries tend to be a
132:55 - little bit slow compared to a temp table
132:58 - or a CTE I tend to use temp tables a lot
133:01 - more because you can reuse them over and
133:03 - over whereas a subquery you cannot you
133:05 - have to write it out each time so really
133:08 - quickly I'm going to show you how it's
133:09 - done although I don't really recommend
133:11 - using this method really quickly let's
133:13 - go up here and let's steal this
133:15 - partition bu really quick this will be
133:17 - our
133:18 - subquery uh and let's paste this in here
133:21 - I'm going make this look a little nicer
133:23 - just so you can visualize it a little
133:25 - bit
133:26 - easier um so really quick what this is
133:29 - going to do is it is first going to run
133:32 - this and create this table again much
133:35 - like a temp table or a CTE so let's
133:38 - execute this really quick it's going to
133:40 - create this table and then it's going to
133:41 - allow us to query off of it so I can
133:44 - actually say um and let me give kind of
133:47 - kind of an alias to this a. employee ID
133:51 - and then let's say all average salary so
133:55 - now I can take um columns from this
133:59 - inner query if I want to and just select
134:02 - those or I can select everything and
134:04 - return that entire table again I much
134:06 - prefer a temp table or a CTE for this
134:09 - type of situation but as an example I
134:11 - just wanted to show you how it works now
134:14 - let's go down to the subquery in thewar
134:16 - statement but really quick I just steal
134:18 - this query so I don't have to rewrite
134:21 - everything and let's get rid of this
134:24 - really quick and add back the job
134:28 - title all right so let's look at this
134:31 - really quick so we have our table that
134:34 - we've been using our employee ID job
134:35 - title salary so for this example we only
134:38 - want to return employees if they're over
134:40 - the age of 30 and as you can see in this
134:42 - table there is no age column that is in
134:45 - the employee demographics table now if
134:47 - we wanted we could join to that table
134:49 - and get that information or we could use
134:51 - a subquery and so for this example we
134:53 - are going to be using a subquery so
134:55 - let's go right down here and say where
134:57 - employee ID is in and we'll do an open
135:00 - parentheses and now this is where we are
135:02 - going to build out the subquery so just
135:05 - for visual purposes I'm going to go
135:07 - right here I'm going to say select
135:09 - everything and we'll do from employee
135:11 - demographics and close the parenthesis
135:14 - so we're going to try to select
135:15 - something in this subquery that will
135:18 - then identify the employee IDs that are
135:21 - over the age of 30 so really quickly
135:23 - let's take a look at this table so right
135:26 - now we have the entire table selected so
135:29 - we have the employee ID first name last
135:30 - name age and gender so in this subquery
135:34 - the only thing that should be returned
135:36 - is the employee ID and in fact in your
135:39 - subquery you can only have one column
135:41 - selected so I can't select everything I
135:43 - have to specify one column and that's a
135:45 - little bit different than how we did it
135:47 - in in this from statement where we were
135:49 - basically able to select the entire
135:51 - table and then in the select statement
135:54 - specify what columns we wanted in the
135:56 - where statement we can't do that so we
135:58 - want to return the employee ID and we
136:01 - also want to say where the age is
136:04 - greater than 30 so let's run this really
136:08 - quick and see if it works as you can see
136:10 - in the results these are the employees
136:12 - who are over the age of 30 now if you
136:14 - wanted to display the age as a column in
136:17 - this output you would have to join to
136:19 - that table and then put that column or
136:21 - that field in the select statement but
136:23 - in a lot of situations you won't
136:25 - actually want or need to do that and so
136:27 - a subquery can be a really good option
136:29 - in these scenarios with that being said
136:31 - this is the last video in the advanced
136:33 - sequel tutorials I hope that this Series
136:35 - has been helpful and that you learned
136:36 - something along the way thank you so
136:38 - much for joining me I really appreciate
136:40 - it if you like this video be sure to
136:42 - like And subscribe below and I'll see
136:44 - you in the next
136:46 - video
136:48 - [Music]
136:57 - what is going on everybody welcome back
136:58 - to another video today we are starting
137:00 - our data analyst portfolio project
137:05 - [Music]
137:08 - series now before we jump into our first
137:10 - project I wanted to talk with you for
137:12 - just a second so that we're all on the
137:13 - same page first thing is that there are
137:15 - going to be four projects the first one
137:17 - is going to be SQL and we doing a lot of
137:18 - data exploration and we'll be setting up
137:21 - a lot of our data to visualize it in
137:23 - Tableau Tableau is going to be our
137:25 - second project in our third project
137:27 - again we're going back to SQL but we're
137:29 - going to be doing a lot more of the ETL
137:31 - process so a lot more of the data
137:32 - cleaning I did that one as the third
137:35 - project because I think it's going to be
137:36 - a little bit more advanced than this
137:38 - first project I tried to make it as
137:41 - beginner friendly as possible so even if
137:43 - you are a complete beginner as long as
137:45 - you've walked through uh you know the
137:47 - tutorial that I have made on my channel
137:49 - you should be pretty good and then the
137:51 - fourth and the final project will be
137:52 - with python we'll be using a lot of
137:54 - pandas doing a little bit of data
137:55 - cleaning and then doing visualizations
137:57 - as well as I said just a second ago I'm
137:59 - trying to make this as beginner friendly
138:01 - as I possibly can the whole point of the
138:03 - series is that if you are trying to
138:05 - apply for a data analyst job by the end
138:08 - of the series you should have an entire
138:09 - portfolio or at least a a really good
138:12 - start at a portfolio to show a potential
138:14 - employer I give you full permission to
138:16 - copy every script every query line for
138:17 - line if that is what you want to do and
138:19 - create your own portfolio I am totally
138:21 - fine with that but I will encourage you
138:23 - and I'm sure I'll say this throughout
138:24 - the video I encourage you to try to
138:26 - think of your own queries try to think
138:28 - of your own insights and your own things
138:30 - that you can do to make this portfolio
138:32 - project unique with that being said I'm
138:34 - super excited to get started on this
138:36 - with you guys so let's jump over to my
138:38 - screen and get started on our very first
138:39 - project all right so now that we are on
138:41 - my screen we are going to get started on
138:42 - this project we're going to download the
138:44 - data set we are going to format it just
138:46 - a little bit in Excel
138:48 - and then we're going to get into sequel
138:49 - where we will start querying it I will
138:52 - say that I think this is going to be a
138:53 - very long video I'm hoping to keep it
138:55 - under an hour and a half I may separate
138:58 - this into two videos depending on how
139:00 - long it runs um but you know I I will do
139:04 - my best to keep it short but we have a
139:06 - lot to get through I'm going to
139:08 - basically do no Cuts I'm I'm that's my
139:10 - goal is to do no cuts um in this because
139:12 - I want to walk you through each step of
139:14 - the process so that you understand
139:16 - everything that's going on and I I you
139:18 - don't get lost at some point um but I
139:21 - think this is probably the best way to
139:24 - do it we'll see uh the very first thing
139:26 - we're going to do is download our data
139:28 - set so you know as we're looking at this
139:32 - there's an option right here to download
139:33 - the data set I don't recommend that one
139:35 - um you can it just won't give you all
139:37 - the information that I personally want
139:38 - which is go back to like the very
139:40 - beginning um if you go down right here
139:42 - to the very first graph um you can
139:44 - actually push this back and then
139:47 - download it and what this will do is it
139:50 - will go back to I think January 1st of
139:53 - 2020 so let's open this one
139:56 - up um and when we get in here we're
140:00 - going to reformat it just a little bit
140:02 - it's nothing too complicated I hope um
140:05 - I'm just going to double click here
140:07 - actually let me let me go up here and
140:09 - filter just in case we want to filter
140:11 - anything so um what we have here is a
140:15 - ton of information on Co I mean just a
140:17 - ton and it goes back to early 2020 I
140:20 - believe it does go back to the first of
140:22 - 2020 so really quick a really brief
140:25 - introduction of what kind of data is in
140:27 - here we have total cases new
140:29 - cases um total deaths new deaths we use
140:33 - those quite a bit in the the queries
140:35 - that are coming
140:36 - up um if we go way over here we have
140:40 - total vaccin vaccinations people
140:42 - vaccinated um and then over here a
140:44 - little bit farther we have population
140:47 - that's the main stuff we're going to be
140:48 - working with today as you can see
140:50 - there's so many other things in here I
140:53 - mean you can use this if you want to go
140:55 - back and do more stuff on this I highly
140:58 - recommend it there's such you know
141:00 - there's so such unique data in here
141:02 - about smokers and diabetes and like all
141:04 - this random stuff that I did not do a
141:07 - deep dive in I mean I could I could
141:08 - spend you know a month just like looking
141:12 - at this data set and and getting really
141:14 - interesting stuff from it um but I'm not
141:17 - going to do that I wanted to do this
141:20 - faster than uh two months to to
141:23 - complete what we're going to do um is
141:26 - we're going to go back over here we're
141:27 - going to take this
141:29 - population and we're going to click on
141:31 - this as and we're going to click contrl
141:34 - X and that's going to cut it we're going
141:36 - to go back to the very beginning and
141:37 - we're going to place it right here and
141:39 - we're going to right click and say
141:41 - insert cut cells now why are we doing
141:43 - this because I've already done this
141:45 - entire project um and if you don't do
141:49 - this you're going to do a join with
141:51 - every single query you do which if you
141:53 - want to do that keep it there and then
141:55 - just you know change your query for for
141:57 - that I did it like this because I wanted
141:59 - to show joins later on I wanted to keep
142:02 - it kind of simple at the beginning um
142:04 - and then work my way to a little bit
142:06 - more advanced things which you will see
142:08 - um it gets you know semi Advanced but
142:10 - not too much I promise um just stick
142:13 - with me let's go back over here we're
142:15 - going to go to uh actually double A and
142:19 - then we're going to click control shift
142:21 - right key that's going to select
142:23 - everything over here and we're going to
142:25 - literally delete it okay this is going
142:27 - to be our first table over here so
142:29 - everything you see over here is our
142:30 - first table um and we're going to save
142:32 - that so let's save as I'm just going to
142:34 - keep it in my downloads as and let's do
142:37 - covid deaths so that has our death
142:40 - information the next one is going to
142:42 - include our um vaccination information
142:46 - which is what we're going to join on and
142:47 - then um we're going to do that later so
142:50 - let's let's hit contrl Z that's going to
142:52 - bring it back now let's select on Z and
142:55 - go all the way to e and we're going to
142:58 - do the same thing we're going to delete
142:59 - this looks like there's no data but I
143:01 - promise there is later on the
143:04 - vaccinations um like total vaccinations
143:06 - if we go down um you can see that that
143:09 - starts on in February the end very end
143:13 - of February in 2021 that's because
143:15 - vaccinations are you know didn't come
143:17 - out till recently now let's save this
143:20 - file and we're going to save as instead
143:23 - of covid deaths we'll do Co
143:27 - vaccinations all right now let's save
143:29 - that so now we have our two excels that
143:33 - we want we need to get them into SQL
143:36 - we're going to go over to SQL and we're
143:38 - going to create a portfolio project
143:40 - database I've already done this all you
143:42 - have to do though is rightclick click
143:45 - new database type in
143:49 - portfolio project and then click okay
143:52 - and it will create your database for you
143:55 - um if you open up the tables it should
143:57 - be empty and that's where we're going to
143:58 - put these two Excel files now uh I had a
144:01 - ton of trouble actually importing these
144:04 - excels um I mean I tried everything and
144:07 - I eventually just went down a rabbit
144:09 - hole of how to get these in I don't know
144:11 - if it's me or or what but I could not
144:14 - figure out how to do it if you go to
144:17 - portfolio project you hit tasks and you
144:19 - hit import data that may do it for you
144:23 - and it may work um it did not work for
144:25 - me uh it just it kept giving me errors
144:29 - so what I would recommend you do right
144:32 - off the bat just to make sure that we're
144:34 - doing the same thing um and you can do
144:35 - it that way if you want I went over here
144:37 - to start um again I'm on a Windows and I
144:40 - went down to Microsoft SQL Server 2019
144:43 - and clicked Import and
144:45 - Export looks the same but for whatever
144:48 - reason it it all the research I did it
144:51 - has to do with the 32-bit versus the
144:54 - 64bit when you do it this way it goes to
144:57 - the 64-bit and it is able to import the
144:59 - data if you do it the other way it was
145:01 - doing it the 32-bit version and gives
145:03 - you an error I don't understand it don't
145:05 - ask me that's that's the re that's I
145:07 - mean I went down a huge rabbit hole but
145:09 - this one works so let's go over here and
145:13 - this is going to be our data source
145:15 - where is the data coming from it's an
145:16 - Excel file
145:17 - so let's do that let's browse and let's
145:20 - go over to my
145:23 - downloads I thought I saved it in
145:26 - downloads uh maybe because it's an Excel
145:28 - workbook what was I saving
145:31 - before Oh that's a
145:34 - CSV okay something important to note is
145:37 - we're doing an Excel and not a
145:39 - CSV you're going to get the same error
145:42 - I'm just doing it live and I'm making
145:43 - myself look stupid so um we're going to
145:46 - save it but instead of a CSV we're going
145:49 - to save it as an Excel workbook so let's
145:51 - save that um now we have to go back to
145:56 - how it was right
145:57 - here um the same way and we're going to
146:00 - file save as and let's do this is now
146:04 - covid
146:06 - deaths and save it as a workbook now we
146:10 - have them now let's go back um now we
146:13 - have our covid deaths and our covid
146:15 - vaccinations let's do our deaths first
146:18 - um let me get back right here so it
146:20 - looks kind of more
146:21 - normal um so we have our Excel file we
146:25 - have our covid deaths let's go next and
146:27 - now we have to say where we're going to
146:29 - place it where's our destination so
146:31 - we're going to click over here and go
146:32 - down to SQL Server native client
146:37 - 11.0 I want to say this is something
146:39 - that I messed up and it took me like 45
146:41 - minutes to figure out it was the
146:42 - stupidest mistake um it's gonna autop
146:45 - populate a server name
146:47 - and I never checked to confirm that this
146:49 - was my server name and so I couldn't
146:51 - figure out why I wasn't able to insert
146:54 - this into my portfolio project uh
146:57 - database that's because mine is 01 I
147:00 - created two different servers um
147:03 - intentionally and for whatever reason I
147:06 - forgot that and so all I have to do is
147:08 - add 01 over here so just make sure yours
147:11 - is is the same thing click portfolio
147:13 - project click next yes we're want to
147:16 - copy the data should autop populate if
147:18 - it doesn't if it gives you like multiple
147:20 - you can always uh check mark on the one
147:22 - that you think is the right one it
147:23 - should be the first one we'll click next
147:26 - we'll just click finish I'm sure it says
147:28 - run immediately we'll click finish and
147:31 - finish now while this is running um
147:33 - there should be around
147:35 - 89,000 that's how it was like a week ago
147:38 - when I started it maybe a little more
147:39 - now because there's extra
147:41 - days um with that being said you know
147:45 - there's going to be
147:47 - a good siiz amount of data um we're
147:49 - about to do a lot of different things
147:51 - we're going to start at the very basics
147:52 - of just like queer quering the table
147:54 - like super simple um and then we're
147:56 - going to go into things like joins ctes
147:58 - temp tables creating views um I the
148:01 - whole purpose of what we're about to do
148:04 - is not
148:05 - to it's not to keep it too simple um I
148:10 - want to showcase to a potential employer
148:13 - right that you can do more advanced
148:16 - Advanced things so I'm going to probably
148:18 - do I mean I'm I'm looking at because I
148:20 - have already done this entire project
148:22 - individually I mean we've probably got
148:24 - like 15 to 20 queries here you don't
148:27 - have to do all of them um I'm going to
148:30 - walk through all of them and you can
148:31 - choose which ones you want but you don't
148:33 - have to do all them it is quite a few so
148:36 - just know that so there's 85,000 right
148:39 - here that's
148:40 - fantastic uh it won't show up
148:42 - immediately you need to refresh it uh
148:46 - and there we go so that's our covid
148:48 - vaccinations U let's get rid of this so
148:51 - we just have Co vaccinations um I
148:53 - thought that was our covid deaths one
148:56 - but maybe I'm wrong um but let's do the
148:58 - exact same thing down
149:02 - here and we will import and say
149:07 - next we're going to go down to
149:09 - Excel and browse and now we want to do
149:12 - the covid deaths apparently last time we
149:14 - did the vaccinations which
149:18 - um I actually actually you know what I
149:20 - bet what it did was it took yeah it took
149:23 - this right here as Co vaccinations but
149:25 - that was the deaths one as it saved so
149:28 - uh forget that let's go right
149:32 - here let's do the co vaccinations it
149:36 - just has the same sheet
149:37 - name uh so sorry for the confusion
149:41 - destination is going to be the exact
149:42 - same place it's going to be SQL Server
149:44 - native client let's add that
149:48 - 01 and let's click refresh portfolio
149:52 - project next next um like I said before
149:57 - if it does this just click the first one
149:59 - it's going to be Co vaccinations it did
150:01 - that for the covid deaths that's because
150:03 - I made the mistake earlier I hope you I
150:06 - hope when you're watching this you
150:07 - aren't super confused um the whole point
150:11 - make two tables or make two excels one
150:14 - should be covid deaths one should be Co
150:15 - vaccinations upload them and then rename
150:18 - them in a nutshell U so we have the same
150:22 - amount uh let's refresh
150:26 - this this one is actually the co
150:28 - vaccinations this one is covid
150:31 - deaths I'm telling you this stuff is
150:34 - it's confuses me sometimes to be honest
150:37 - um but we're going to query this really
150:38 - quick to make sure we act are actually
150:41 - doing um what we're supposed to be doing
150:43 - so let's do select
150:45 - everything from um and let's do
150:49 - portfolio project and you can do
150:53 - dbo or you can do dot dot I tend to just
150:57 - do that because it's easier um let's
150:59 - look at this one make sure it's the
151:00 - right table so we have total cases new
151:03 - cases
151:04 - perfect um and let's order on let's do
151:08 - three comma 4 just to make
151:12 - sure or order by of course just to make
151:17 - sure that we have all everything that
151:18 - we're looking for so this looks right
151:20 - this looks like our
151:21 - Excel let's copy this let's go down here
151:25 - we're going to do covid
151:27 - vaccinations and let's run this one make
151:30 - sure the second one came in correctly as
151:32 - well so perfect so we have our two
151:35 - tables this is fantastic news um and now
151:39 - we can get going um we can keep this one
151:43 - I'm GNA comment it out in case you know
151:46 - we want to come back to it um I'm going
151:50 - to really quick again right here I have
151:54 - another laptop I have already done this
151:56 - whole project so I'm just using it as a
151:58 - guideline to know kind of what I'm doing
152:01 - next so that I don't waste everyone's
152:02 - time um so really quickly let's just
152:06 - let's select the data that we are going
152:10 - to be using you don't have to use these
152:12 - comments I will say that I'm going to
152:14 - specify I'm going to say hey this
152:16 - comment is something I would keep in
152:18 - your portfolio project I'm going to add
152:20 - a bunch of extra stuff that is not
152:22 - needed um just for your purpose but when
152:25 - you are creating your portfolio project
152:27 - you shouldn't be adding some of the
152:29 - things that I'm going to be commenting
152:31 - um on so we're going to do um or
152:34 - actually let's do really quick let's
152:36 - copy this so that it kind of knows what
152:38 - we're doing so let's select the
152:42 - location uh the date the to total
152:48 - cases the new
152:51 - cases the
152:53 - [Music]
152:54 - total deaths and then
152:58 - population uh now where we're at I'm
153:02 - going to turn off my camera because it's
153:04 - going to get it's going to start getting
153:05 - in the way to be honest I don't want it
153:06 - to interfere with your ability to see
153:09 - what we're doing on screen so it's been
153:11 - great seeing you guys I'm going to turn
153:13 - this off and we will continue from here
153:16 - all right that should be turned off so
153:20 - let's keep running so this is what we're
153:22 - doing let's actually let's keep this
153:24 - going because I I don't like things not
153:28 - being
153:29 - organized um so we have our location oh
153:33 - no we want to do one two we want to do
153:36 - it based off the location and the date
153:38 - makes things everything easier I promise
153:40 - you so we're going to be the first one's
153:42 - obviously Afghanistan here's our date we
153:45 - have our total cases are new cases total
153:48 - deaths and population so really quick
153:49 - I'm just going to scroll down just a
153:51 - second um they started having you know
153:54 - the the total deaths it's um it started
153:58 - about a
154:00 - month after they got their first case it
154:03 - looks like so and then it just like
154:07 - ramps up a lot um and we're going to be
154:10 - diving into all these numbers what they
154:11 - mean how to you can do some really
154:13 - simple calculations on them um but
154:17 - really quickly we're just going to do
154:19 - again a super simple calculation um and
154:22 - one that we do multiple times for
154:24 - different things um so let's go right
154:27 - down here and let's say uh we're going
154:30 - to be looking at the total
154:34 - cases
154:35 - versus total deaths so how many cases
154:40 - are there in this country and then how
154:42 - many deaths do they have per um uh you
154:46 - know how many deaths they have for their
154:47 - entire cases so let's say they have a
154:50 - thousand people who H who've been
154:51 - diagnosed they had 10 people who died
154:54 - what's the percentage of people who died
154:57 - who had um who had it
155:00 - so uh let's go right down here and we're
155:04 - gonna I'm just going to copy this really
155:06 - quick this just going to make our life
155:07 - easier I think you should do the same as
155:10 - well um so we have location date total
155:13 - cases um and we're going to get rid of
155:16 - our new cases we don't need that one in
155:18 - this query right here uh nor do you need
155:21 - this population so let's work on our
155:23 - calculation really quick it should be
155:24 - super super easy let me make sure I'm
155:27 - still recording perfect oh man we're 25
155:30 - almost 25 minutes in um or more because
155:34 - I have the
155:35 - intro so now we're going to do uh we
155:38 - want to know the percentage of people
155:40 - who are dying who actually get infected
155:42 - or or or or who um report being infected
155:46 - so we're going to do um total underscore
155:50 - deaths we'll go right down here and
155:52 - we're going to divide that by the total
155:55 - cases total cases and if we do this
155:59 - really
156:00 - quick um what it's going to have and
156:03 - well let's go down to where there's
156:04 - actually
156:05 - numbers so we have 34 we have one um
156:09 - it's it's showing
156:12 - 0.029% if you ever try to get a
156:14 - percentage of something you have to
156:15 - multiply times 8 100 um so let's do that
156:18 - really quick all we have to add is the
156:21 - what's that the asteris sign um times
156:24 - 100 um and while we're here let's just
156:27 - add the um what's it called Alias Let's
156:31 - do let's call this death percentage I
156:35 - don't know that that works for me and
156:37 - let's take a look at this it'll be a
156:39 - little bit more accurate
156:41 - accurate so when there were 34 there was
156:45 - one and that gives gives us a
156:47 - 2.94% death rate and we can go down even
156:51 - further um and this is still all
156:54 - Afghanistan let's go down to the very
156:56 - bottom let's go down to the very very
156:58 - bottom so as of as of today yesterday
157:03 - there were
157:04 - 59745 total cases in Afghanistan and
157:07 - there were 20 2,625 deaths which is 4%
157:11 - so you have a 4% chance basically right
157:14 - now of dying I mean if if you want to
157:16 - look at it like that 4% chance of dying
157:18 - if you get it and you live in
157:20 - Afghanistan um let's I mean we you don't
157:23 - have to but really quick just to look at
157:24 - it further let's look at where the
157:27 - location um I think
157:30 - it's let's say like real quick because
157:32 - I'm not 100% if it's
157:34 - States
157:35 - um it should I think it's United
157:38 - States but yeah so I mean I live in the
157:41 - United States if you don't you can look
157:42 - at your country but um you know
157:46 - we we this is like this is genuine real
157:49 - reported data so it's really interesting
157:52 - um right at the beginning I mean the I
157:54 - don't know if it was the way we were
157:55 - reporting or what but we had really high
157:57 - percentage rates um as we go down we're
157:59 - looking at a 5% 6% I mean this was the
158:02 - peak of it this got really bad in the US
158:05 - um maybe get I hope it gets better um
158:09 - how many are we at this is I'm going to
158:11 - go to the end of this year we sitting at
158:13 - around 2 to
158:14 - 3% um um yeah it goes down to under 2%
158:18 - so at the end of at the end of the year
158:21 - we were looking at over 2 million people
158:24 - that's 2
158:26 - million no wait 20 million
158:31 - 9363 wait wait wait 20 million people
158:33 - who have been
158:35 - infected um that's a lot that's a lot of
158:38 - 20 million people who have had it 35,000
158:41 - or 352,000 deaths by the end of the year
158:43 - that's a lot um let's keep
158:46 - going um and at the very end we had over
158:50 - 32
158:55 - m346fa um there's a lot of deaths
158:58 - 576,000 and I verified this number um I
159:01 - Googled it Google knows all I googled
159:04 - this number and it's pretty accurate um
159:06 - and it's really sad that's a lot of lot
159:07 - of lives um and that's
159:11 - 1.78% so as of right now if you're were
159:13 - to get it today a estimate is around one
159:18 - uh and three fourest to 2% chance that
159:21 - you're that you could die from it um so
159:24 - really interesting numbers this is the
159:25 - kind of exploratory stuff that that you
159:27 - know we're going to be doing we're going
159:28 - to get a lot more advanced as we go on
159:31 - but this shows you know the likelihood
159:34 - um and we can I'm going to write that
159:36 - shows the likely I hope I'm spelling
159:38 - this right I'm not spelling this right
159:41 - likelihood I hope that's right if this
159:43 - not I apologize likelihood
159:46 - of dying if you
159:50 - contract uh covid in your
159:55 - country um again rough estimates but you
159:58 - know just glancing at the data that's
160:00 - kind of what we're looking at um now
160:03 - we're going to look at and let's go down
160:06 - here let's look
160:10 - at looking at the total cases versus the
160:17 - population again we're going to do a lot
160:20 - of this like percentage stuff um it it's
160:23 - pretty simple um that will only last for
160:26 - so long I promise you but it'll be
160:28 - really I'm going to keep it on the
160:29 - states just because um I'm going to be
160:31 - looking at that one the most because
160:33 - obviously it's pretty relevant to me um
160:37 - so if you're in another country filter
160:39 - by your country you'll be really
160:40 - interested in the stats I I know I was
160:43 - really really really um shocked by a lot
160:48 - of the things that we're going to find
160:49 - today so we're going to keep the
160:51 - location we're going
160:54 - to we're going to keep the date keep the
160:56 - total cases um but let's change this to
161:02 - population and then instead of um the
161:06 - total cases being here we're going to
161:08 - put the total cases there and then
161:10 - change this to population so what is
161:13 - this going to do for us this is going to
161:15 - show us what percentage of the
161:17 - population has gotten covid so shows
161:21 - what
161:23 - percentage of population
161:26 - oops got covid um some of these things
161:29 - again they're they're good to know um
161:32 - the one that I upload to
161:35 - GitHub will have the notes that I
161:38 - recommend keeping um again not
161:40 - everything in here is um not everything
161:44 - in here is
161:46 - what you know you need to have in there
161:49 - this is mostly just you know what I
161:53 - think you guys need to see while we're
161:54 - actually typing this out all right so
161:57 - let's take a look at this um actually I
161:59 - want to change this I want to put this
162:01 - right here just as easier for me
162:04 - visually um just for because the total
162:06 - cases right here so our our population
162:08 - in the US is around
162:11 - 331
162:13 - million um
162:16 - so at the beginning when we had one case
162:18 - I mean it's like nothing let's keep
162:21 - scrolling um and see where we get to 1%
162:24 - so
162:25 - 1% that's
162:29 - 3,311
162:31 - 32 uh people and that happened in what
162:35 - is that August August of last year so 1%
162:38 - of the population let's keep going all
162:40 - the way down again we're just kind of
162:42 - glancing at this we're about 10% um
162:44 - again we're at the that 32 million so
162:46 - 10% of the population has has gotten it
162:48 - gotten a test and it's been confirmed so
162:51 - really
162:52 - interesting um you know we'll come back
162:54 - to that one I'm sure in the future I you
162:56 - know we might make we might use this one
162:59 - as
162:59 - like um a visualization again uh I'm
163:04 - only looking at the states or United
163:07 - States right now but you know think
163:10 - about it in terms of how we're going to
163:11 - visualize this in the future cuz a lot
163:14 - of what we're doing
163:15 - we're going to visualize in the future
163:18 - um in Tableau I have Tableau even open
163:20 - right here you can see I have a map um
163:22 - this is just a super I threw this
163:24 - together in like two seconds um we have
163:27 - the uh we have the location and so you
163:30 - know this is like our future this is
163:31 - what you need to be envisioning when
163:33 - you're looking at this data so we have
163:35 - you know Afghanistan and let's just
163:38 - scroll through bellaro and Bolivia and
163:41 - Bulgaria and cambod all the every single
163:43 - country um that that is reporting so
163:47 - we're just looking at the states but
163:48 - remember all of these are going to be
163:50 - used so just something to remember um I
163:55 - want to know and I'm really curious as
163:57 - to what countries have the highest um
164:01 - infection rates compared to the
164:04 - population so we're just looking at our
164:06 - population um up here um how are we
164:10 - going to do this we'll do actually let
164:11 - me say well let me write it out really
164:14 - quick so let's look looking at
164:18 - countries with highest infection rate
164:24 - compared to population so that's what
164:27 - this script is going to do or this query
164:29 - is going to do I'm going to copy
164:32 - this um so we're going to keep the
164:34 - location we are not going to keep the
164:36 - date this is not going to be date
164:38 - specific this just going to be
164:40 - overall and then we're going to look at
164:42 - the max of the total cases so we only
164:45 - want to look at the highest so when when
164:46 - we were looking at the us we had 32
164:48 - million we don't want to look at every
164:50 - single Pop um uh of the total cases we
164:54 - only look at the very highest one so
164:56 - we'll look at the Max total
164:59 - cases um and let's right here we'll just
165:03 - say give it an alias at least something
165:05 - to recognize it so highest U I guess we
165:08 - can say infection count so we'll say
165:10 - highest infection count that's the
165:11 - highest infection count per country um
165:14 - so per location
165:16 - um and then we want to also take because
165:20 - it's going to it's not going since we
165:22 - don't have Max total cases here if we
165:24 - just kept total cases here it'll give us
165:26 - the same one that we were looking at in
165:28 - this above query what we need to do is
165:30 - we need to look at the max of this um so
165:33 - we're going to look at
165:35 - Max and just add a parentheses there um
165:39 - and we'll look at this isn't the death
165:41 - percentage anymore I forgot to change it
165:43 - in this last one this is
165:45 - is what is this it's percent of
165:50 - population
165:52 - infected so let's change that for both
165:54 - of these because I don't want to get
165:56 - confused when you're looking at the
165:57 - column headers later um so we'll look at
166:00 - the percent of population infected let's
166:03 - run this and see what we
166:06 - get uh list is not contained in either
166:08 - the aggregate oh I need to add a group
166:12 - ey of course um so let's add Group
166:16 - by um and we need to group by both the
166:19 - population and the location so let's try
166:22 - that really quick let's see if this
166:25 - works
166:28 - awesome um well we ordered on location
166:31 - and population but I really want to look
166:33 - at the
166:34 - highest um so let's so let's just see
166:36 - really quick look at some of these
166:39 - numbers got like 1% 4% um 10% okay so
166:44 - yeah yeah what we want to do is order on
166:47 - um this percent population infected so
166:51 - let's go ahead and do that uh and let's
166:53 - do that
166:54 - descending so the descending gets the
166:57 - highest number
166:58 - first um my goodness 177% so what
167:02 - percentage of your population has gotten
167:05 - covid it's been reported and and and um
167:08 - we can see that now so the very first
167:11 - one small population so it doesn't
167:12 - surprise me but if you look right down
167:14 - here here so that's that 32 million that
167:16 - we were talking about that's that Max of
167:18 - total
167:19 - cases um which is the the highest number
167:22 - of our infection count so we have 33 so
167:25 - we're at I mean we're we're right up
167:27 - there on the list let's look for other
167:28 - large countries I mean it's us you know
167:31 - there's Israel there's
167:34 - Belgium Portugal France so you know
167:37 - we're up almost to about 10% in a lot of
167:39 - these countries
167:40 - so some some of us including the United
167:43 - States we are we are in there as well
167:46 - some of us has have really high
167:48 - percentage rates we just did not keep it
167:49 - under control um and you know a large
167:52 - amount of the population has gotten it
167:54 - that's what this one shows um now let's
167:58 - look uh kind of at the sad side of
167:59 - things we were just looking at how many
168:01 - people were infected let's look at how
168:03 - many people actually died um so let's
168:07 - do let's comment and we'll say this is
168:09 - going to this is
168:11 - showing the
168:13 - countries with the let's do
168:17 - highest high am I spelling that right
168:19 - yeah highest death count per
168:25 - population um now how are we going to do
168:27 - this let's copy this off the bat but I
168:32 - don't know if we're going to do it the
168:33 - exact same way because we just need
168:37 - location um and not much else honestly
168:41 - so let's get rid of all this stuff but
168:42 - we do need we're looking at the highest
168:44 - death count so like we did up here with
168:47 - the Max total cases we're going to do
168:50 - Max and then we'll do total
168:53 - deaths I hope it's like this total
168:56 - deaths um and then we'll do as total
169:01 - oops total death
169:03 - count um and we'll order that by the
169:07 - total death count see I don't need
169:11 - this I think yeah I need to group by
169:13 - because there's an aggregate function
169:15 - and let's try this really
169:16 - quick okay so if you're getting this
169:19 - there's a there's a simple slash
169:22 - confusing explanation to
169:24 - this total deaths right now let's go
169:27 - into our covid deaths
169:31 - columns okay let's show the total deaths
169:35 - which is right
169:38 - here it's an nvar chart 255 it's an
169:41 - issue with the data type um oh wait
169:44 - total deaths no total deaths right here
169:47 - it's an issue with the data type um it
169:49 - just has to do with how the data type is
169:51 - read when you use this aggregate
169:53 - function we need to convert it um or
169:57 - cast it is what we're actually do we
169:58 - need to cast this as an integer so
170:00 - that's red as a numeric um why I cannot
170:05 - 100% give you a perfect explanation for
170:07 - it but this happens all the time you
170:09 - just need to look at the data and
170:10 - realize oh it's probably because of this
170:12 - data type let's try something else um
170:14 - and then it'll work so let's cast this
170:17 - and we're in casting it I find is just
170:19 - easier but just as int boom there you go
170:22 - so now we're taking this nvar chart 255
170:26 - over here and then we are converting it
170:28 - to an
170:29 - integer now let's run this um and let's
170:33 - get rid of this just for visual visual
170:36 - purposes now we are much more
170:39 - accurate but we have a slight issue or
170:43 - we're we're now seeing a slight issue
170:46 - with our
170:47 - data in our data in the location section
170:51 - we have a few ones that really shouldn't
170:54 - be there ones like world or
170:58 - Africa um or South America these are
171:04 - grouping entire
171:06 - continents so let's go back up to our um
171:11 - let's go back up here and let's do
171:14 - actually let's pull it up really quick
171:16 - because this is just part of exploring
171:17 - the data and figuring it out so if we
171:20 - scroll down um we're going to f we're
171:22 - going to see one like right where is it
171:24 - right here this this location is all of
171:27 - Asia whereas in other ones the continent
171:30 - is Asia if I can pull one up real quick
171:33 - so like right here the continent is Asia
171:35 - whereas before the location is Asia but
171:38 - if you also notice um the continent is
171:41 - null here so what we need to do is say
171:44 - um uh where
171:47 - continent is not null because when it is
171:51 - null that means that this location is
171:53 - actually an entire continent and we
171:54 - don't want that um that may be helpful
171:56 - for us um later on but it is not helpful
172:00 - now so now this right here will get rid
172:03 - of that um and just knowing that
172:06 - figuring that out now we can add that to
172:09 - every every
172:11 - script um and we can do you know you
172:14 - don't have to do this I'm just doing
172:15 - this for you know visual purposes I'm
172:17 - not going to do that for everyone um so
172:20 - let's say where continent is not null
172:22 - and now let's look at this and now you
172:25 - can see that the United States is number
172:29 - one and
172:30 - so number one is not the best thing to
172:33 - be number one in but we have a death
172:35 - count of 576,000 and again I I googled
172:38 - this earlier these numbers are pretty
172:40 - accurate there some of them are like a
172:42 - day or two behind give me a second I'm
172:43 - going to take a
172:47 - water they're like a couple days behind
172:49 - um this number is actually higher um and
172:53 - as you know as we continue to have more
172:57 - people die unfortunately that number
172:58 - just continues to go up um so the data
173:00 - that that you download may be a a lot
173:03 - higher um as of right now we've been
173:06 - breaking everything out by location
173:09 - right really quickly let's just do this
173:13 - by something we kind of saw earlier um
173:16 - and I'm just going to do this for
173:18 - breaking it up purposes but I'm going to
173:20 - say I'm going do caps lock let's break
173:24 - things down by continent how SP
173:28 - continent
173:30 - Contin jeez is that even how you spell
173:32 - it I don't even know let's keep going um
173:37 - but now we can do consonant right
173:40 - here and we'll just copy and paste that
173:44 - let's get that back up here um and now
173:47 - we can see where continent is not
173:52 - null let's see if that makes that yeah
173:55 - okay so now it's breaking it out by
173:57 - continents um with North America South
174:00 - America Asia Europe Africa
174:04 - Oceana is this
174:07 - perfect no no it's not perfect um North
174:10 - America looks like it's only including
174:13 - the numbers from the United States and
174:15 - not Canada um so we have some small
174:18 - issues in here um but for the purposes
174:23 - of what we're trying to do which I don't
174:26 - think anyone's going going to come in
174:28 - here and fact check us or check the data
174:30 - they may and then you're I don't know
174:32 - you might be screwed but for the
174:34 - purposes of
174:36 - hierarchy um and you know drill that
174:40 - drill down effect in Tableau which is
174:42 - something we are going to do we want
174:44 - want to start including this continent
174:45 - in our in our queries so that we can
174:48 - drill down um further into these things
174:53 - um we can also do where just wait I'm
174:54 - going to do where
174:57 - isnull um actually let me see so before
175:00 - we were doing work continent is not null
175:02 - but let's do location I'm just I I'm
175:05 - doing this on the Fly I haven't done
175:06 - this before I just kind of
175:07 - am doing
175:10 - this um this actually is the correct
175:13 - numbers
175:14 - and I don't know why I didn't do this
175:17 - before when I was actually creating this
175:18 - project but now this is a wonderful
175:20 - beautiful thing I believe this is the
175:21 - correct numbers um I could verify but I
175:23 - don't want to do that live because I I
175:26 - might look stupid but I think this is
175:27 - accurate um remember before we were
175:29 - looking at the location and the location
175:33 - um and it was actually the countries
175:34 - itself and then there were ones where we
175:36 - did where is notnull to get rid of all
175:39 - the ones that were like world and all
175:40 - those other things well now I'm just
175:42 - filtering on those instead of deleting
175:45 - them before we were looking at
175:47 - everything but these now we're only
175:48 - looking at these and these numbers look
175:50 - a lot more accurate so with that being
175:53 - said um I'm going to use this going
175:55 - forward in my script so I'm going to
175:56 - kind of change things up to where from
175:58 - what I originally had um let me see
176:02 - though because if that is the case it
176:06 - may screw up our drill down effect um
176:09 - which is highly unfortunate I may I I
176:12 - honestly might just revert back to it
176:13 - for the pure fact that we want the
176:15 - visualizations to look correct um just
176:17 - know that this is the right way and if
176:18 - you want to go back and do that I highly
176:21 - encourage that I didn't figure that out
176:23 - my first time around um but I'm willing
176:25 - to admit when I'm wrong let me see what
176:28 - let me do a time check all we're run
176:30 - like 50 minutes or so I think we're
176:33 - gonna we're just going to keep going all
176:34 - the way through I I I don't think we're
176:35 - going to stop um I don't think we're
176:38 - going to stop in this project so we want
176:41 - to do some of the the above queries were
176:45 - kind of what we were going for nothing
176:47 - crazy difficult right nothing crazy hard
176:51 - um and now we want to we want to start
176:55 - breaking this out by um continent as
176:58 - well I'm I'm going to go back
177:01 - and is this correct let me look no so is
177:06 - not
177:07 - no
177:09 - um so we want to start doing some of the
177:12 - above queries but adding that content in
177:14 - there you can even go back and add that
177:16 - as well um if you want to that's totally
177:19 - fine I'm going to do some more queries
177:22 - down
177:23 - here um or at least one more one or two
177:26 - more and then we're going to start
177:27 - getting I think into some a little bit
177:29 - more advanced things we're going to
177:30 - start getting into some temp tables uh
177:33 - stuff like that because we're going to
177:36 - eventually set these up in um views so
177:40 - that we have these views to um use for
177:44 - Tableau
177:45 - later um and again it shows you know how
177:48 - to create a view so that's important so
177:51 - we we've we've done this first one this
177:53 - next one is going to let me go down one
177:57 - more this is
178:00 - showing the continents with the highest
178:04 - death count so almost the exact same as
178:08 - we did before but now we're looking at
178:10 - the continents um we can even go up and
178:12 - look at uh just wait we literally just
178:16 - did that
178:18 - um so that's what this one is
178:21 - actually looking at my notes wrong
178:26 - idiot okay perfect um now we you know we
178:31 - want to start looking at this from a
178:33 - Viewpoint of I'm going to visualize this
178:36 - so how do we do that what we want to
178:39 - look at let's look at some Global
178:42 - numbers um you can do as many many of
178:44 - these as you want anything up here just
178:46 - add continent to it um anything what
178:49 - like groupy just replace it with
178:50 - continent and you and you got it um so I
178:52 - don't want to go through and do every
178:53 - single one of those but that is kind of
178:55 - the gist of what you might want to do
178:57 - especially if you want that drill down
178:58 - effect and if you don't know what that
178:59 - is um you know it's like clicking on
179:02 - North America and then when you bring up
179:04 - North America then it shows all the
179:07 - countries in North America so Canada uh
179:09 - and the United States and so it's a
179:11 - drill down so you like on Africa and
179:13 - then there's all the African countries
179:15 - that's what drilling down does and
179:16 - that's what you can do when you have um
179:19 - those layers so you have the continent
179:22 - then you have the location um so you
179:25 - know I'm not going to we we'll look at
179:27 - that when we actually get to Tableau but
179:29 - I don't want to actually spend all the
179:30 - time writing that
179:32 - out um but what we now want to do is we
179:38 - want to calculate everything for the
179:40 - across the entire
179:41 - world so
179:45 - let's do this let's
179:48 - say um breaking let's do Global let's
179:53 - just say global global numbers easier
179:56 - easier than
179:58 - nothing
180:01 - um all
180:03 - right uh I let me really quick find the
180:07 - I think it's probably the first one the
180:09 - death percentage let me let me see if
180:12 - this is the one that we want
180:15 - [Music]
180:17 - okay let me
180:22 - see all right so let's take this one I'm
180:25 - sorry that took me a while to find again
180:28 - I'm not cutting any of this stuff out
180:29 - you just got to stick with me you if
180:31 - you're sticking with me this long I know
180:33 - you care I know you're not you're not
180:35 - cutting away because I'm trying to
180:36 - figure things out on my side so um let
180:40 - me get rid of this so this is the exact
180:43 - same SC what well let's say where just
180:46 - so we can get the right
180:48 - numbers um so we are now going to look
180:52 - at the global numbers uh so we're not
180:56 - going
180:58 - to we're not going to uh include any
181:02 - location any continent or anything like
181:04 - that but we do want to make sure that
181:06 - we're only looking at all of the um
181:09 - countries and we're not looking at the
181:11 - world numbers plus all the countries
181:12 - because then the numbers would get
181:15 - astronomical so instead of now now we
181:17 - can't do so let's try running this
181:19 - really
181:20 - quick so now
181:23 - we really can't do this um because now
181:26 - it's breaking everything out by
181:30 - um by you know that uh which is the date
181:33 - it's breaking everything out by the date
181:35 - because um these total case the numbers
181:37 - are different right so really quick
181:40 - let's Group by date
181:44 - and now let's see what it looks
181:46 - like uh it's going to give us an error
181:49 - obviously that's because we're looking
181:52 - at
181:54 - um that's because when we're looking at
181:56 - this we're looking at multiple things
181:59 - and we can't Group by just the dates
182:01 - obviously if we wanted to group by
182:03 - something which we need to
182:05 - do we then need to um start using
182:08 - aggregate functions on everything
182:11 - else um so really
182:14 - quickly let's do some aggregate
182:16 - functions I'm looking at my notes for
182:18 - just a second um to see what I
182:22 - did basically what we want to do and I
182:24 - think what'll make things
182:26 - easier is I mean I could try to do the
182:30 - sum of Max total cases I don't think
182:33 - that's possible um let me comment this
182:36 - out really
182:38 - quick yeah um it's because there's an
182:41 - aggregate function within an aggregate
182:43 - fun function and we can't really do that
182:48 - um if we go back to the data and you we
182:52 - kind of looked at this earlier there's
182:53 - one called new
182:55 - cases um let's use this because instead
182:58 - of doing Max we can just sum it or or or
183:03 - do a sum on it and that's going to give
183:05 - us the sum of all the new cases which
183:07 - adds up to the total cases so if we do
183:11 - this let's see this will give us on each
183:15 - day the total across the world because
183:17 - we're not filtering by any continent or
183:20 - or we're filtering out um like the world
183:22 - and in the actual continents we're not
183:24 - filtering by location or continent or
183:25 - anything it's just by date so we're
183:27 - looking at the sum of the new
183:29 - cases so now let's
183:32 - do uh let's do the
183:34 - [Music]
183:36 - sum
183:38 - of uh new underscore
183:42 - deaths and we can run that
183:47 - one um operating data type and our chart
183:50 - is invalid for the some operator so
183:53 - going back um and this is something I
183:54 - encountered a lot when I was doing this
183:57 - is these new cases is a float which is
184:00 - why it's working in the sum but the new
184:03 - deaths is an narar so what we need to do
184:05 - again is cast that as an integer it's
184:10 - just the easiest thing to
184:11 - do um and now that one should
184:15 - work so um let's get rid of the well
184:19 - let's get rid of down to here so we're
184:21 - we're about to do another one and that's
184:23 - going to be our death percentage
184:24 - globally across um across the I guess
184:28 - the
184:29 - world so we need to do the sum of I
184:34 - think it's we need to do new
184:38 - deaths all right divided
184:41 - by the sum
184:44 - of new
184:46 - [Music]
184:48 - cases all right times
184:52 - 100 let's see what this takes
184:55 - us um okay of course we're getting the
184:58 - same thing let me
184:59 - um let me put this right
185:03 - here and see if this
185:07 - works um
185:09 - invalid data oh that's because this was
185:12 - new cases
185:14 - the new deaths one is right
185:18 - here and let's run
185:21 - this and now we
185:24 - are looking good um and as you can see
185:27 - the death percentage is right here we
185:30 - have
185:31 - 91 um and let me give these I don't we
185:35 - can't let me go back real quick and just
185:37 - say as total
185:42 - cases as as
185:45 - total
185:47 - deaths um and let's run that
185:54 - again okay and so across the world these
185:59 - are our numbers so we have total cases
186:02 - on that very first day that cases were
186:04 - starting to be
186:05 - reported there were 98 total cases there
186:08 - was one total deaths that gives us a
186:10 - death percentage of 1% across the
186:12 - country
186:13 - or across the world and as we scroll
186:16 - down it gets lower and lower and that's
186:18 - cuz we have a lot of people who have
186:21 - gotten infected are the total cases um
186:24 - and again that's per day right so if we
186:27 - remove this all together that date Al
186:30 - together which we can do right
186:34 - now this
186:37 - will uh this will give us the total
186:39 - cases which is oh gosh let me read this
186:42 - through one two 150
186:44 - million um versus
186:47 - 3,180 26 so overall across the world we
186:51 - are looking at a um a death percentage
186:54 - of a little over
186:59 - 2% so interesting numbers you can keep
187:02 - both of those queries separate if you'd
187:04 - like um you know they might come in
187:06 - handy
187:07 - later but let's do
187:12 - this
187:14 - so we
187:15 - have
187:18 - um give me one second check on my notes
187:21 - again because I just want to make sure
187:23 - I'm not doing something
187:27 - stupid all
187:32 - right all right so again we have a whole
187:35 - another table that we haven't used yet
187:38 - uh it's this covid
187:40 - vaccinations um and just to you know
187:42 - refresh your memory let's do um let's
187:47 - look at the table from portfolio
187:50 - project. Co vaccinations let's jog our
187:53 - memory on what we got
187:55 - here so we have
188:00 - um we have these tests we have um
188:04 - vaccinations over here which was what
188:06 - we're actually going to be
188:09 - using
188:11 - um excuse me
188:13 - me uh that's what we are going to be
188:17 - using so let's join these two tables
188:21 - together uh and let's let's actually
188:24 - just
188:25 - do from actually let's just do this
188:28 - whole
188:29 - thing from let's do covid deaths and
188:35 - here's how we're going to join it so
188:36 - we're going to say join and we're going
188:38 - to say oops wait that is wrong join and
188:43 - we're going to say on so what are we
188:45 - going to join them on um we're going to
188:48 - join them on two things we're going to
188:50 - join them on location because that's
188:52 - much more specific than the continent
188:55 - we're going to join them on location and
188:57 - we're going to join them on date let's
188:59 - call this one DEA let's call this one
189:02 - vaccination so a little Alias for these
189:06 - so that we don't have to type out this
189:07 - entire table name each time so let's do
189:11 - dea. location
189:14 - is equal to
189:16 - vac.
189:17 - location and da do and we'll say date is
189:23 - equal to
189:24 - vac. date and let's just see what we get
189:28 - really quick so we'll have all of these
189:31 - things and let's look at Granada
189:34 - 0717 let's go all the way over
189:39 - here and it should
189:41 - have Gren
189:44 - 0717 so just making sure that they were
189:47 - joined
189:48 - correctly um for this query what we're
189:51 - going to do is look at the total
189:53 - population and let's do that right here
189:56 - so looking at total population versus
190:01 - vaccination so how many PE what is the
190:04 - total amount of people in the world that
190:07 - have been vaccinated that is that is
190:09 - what we're going to do in this query
190:12 - right here so
190:13 - let's do
190:15 - dea.
190:18 - continent
190:20 - location uh da. date again these are
190:23 - going to be the same in either one but
190:25 - we have to specify um let me just for
190:29 - example if we do population population
190:32 - oh actually that's a terrible example um
190:35 - because population's only in one let me
190:36 - go back real quick let me say I only
190:38 - write date that's going to give me an
190:41 - error because there's date in both of
190:43 - them in fact we joined it on them so we
190:45 - know there's date in both of them so
190:46 - it's going to give us an error we just
190:47 - have to specify what table we want to
190:49 - pull it from so we going to do
190:52 - DEA um and da. population just to keep
190:55 - it consistent um and now we're going to
190:58 - add the next one da do and let's do new
191:02 - vaccinations um and really quick let's
191:05 - just look at
191:08 - this um and let me get my
191:11 - orders cu I want it to be organized I I
191:17 - actually one let's do one two three I
191:20 - don't like it when it's not organized it
191:22 - bothers
191:24 - me so we're looking at oh no I also need
191:29 - to add or consonant is not
191:31 - [Music]
191:32 - null there we
191:35 - go uh
191:37 - da perfect now let's run this this
191:40 - should look much better there we go all
191:45 - right we are in fact if we want to look
191:48 - at Afghanistan like we have normally
191:50 - been doing um in previous ones we do two
191:54 - slash3 so there's our population here's
191:58 - our new
191:59 - vaccinations
192:01 - now let's
192:04 - see we're going to go back go down and
192:07 - let's see they have vaccinations
192:08 - starting on
192:10 - 218 um if we go even further down let's
192:12 - just go
192:13 - to who's this Canada oh yeah Canada
192:16 - would be a good one to look at they
192:18 - started doing vaccinations
192:20 - on right here so 12:15 I mean they
192:25 - started very
192:27 - early and their numbers only increased
192:31 - and now they're you know doing this is
192:33 - per day right so this is 288,000 in one
192:36 - day um so that's you know really high
192:39 - numbers but this is the number of new
192:41 - vaccinations um there is a column called
192:45 - total vaccinations in this table but
192:47 - we're going to do something pretty just
192:50 - to display again this whole portfolio
192:52 - project is to show potential employers
192:54 - that you know how to do certain things
192:56 - so I want to set up opportunities to do
192:58 - that we're not going to use the total
193:00 - vaccinations we're going to use this new
193:01 - vaccinations which is new vaccinations
193:03 - per
193:05 - day um so we want to we want to know or
193:10 - do kind of like a rolling count um out
193:15 - here so as this number let me go back to
193:18 - the beginning as this number increases
193:19 - 718 2300 4179 we want it to add up over
193:24 - here it's a pretty cool thing I mean you
193:26 - know it's once you see it you'll be like
193:28 - oh that's pretty easy but you know we're
193:31 - going to be using partition bu we're
193:32 - going to be using
193:34 - um uh this a Windows function so it's
193:38 - really good to to Showcase I think so
193:41 - we're going to do
193:44 - um and let's
193:47 - do um we need to do the sum because
193:50 - we're going to be adding these together
193:53 - so we need to do the sum of new
193:57 - vaccinations
193:59 - oops do the sum of new
194:03 - vaccinations let's do
194:06 - over and we're going to say partition oh
194:09 - gosh Partition by and
194:13 - we need to Partition by the location
194:17 - first and foremost because we're
194:19 - breaking it up by if we do it by
194:22 - continent the numbers are going to be
194:24 - completely off we need to do it by
194:27 - location location and and also partly
194:30 - the date but you'll see that in just a
194:31 - second but we need to partition it by
194:33 - breaking it up by um
194:37 - location and why is that because every
194:40 - time it gets to a new location we want
194:41 - the count to start over we we don't want
194:43 - this aggregate function to just keep
194:45 - running and running running it'll ruin
194:46 - all of our numbers we only want the this
194:49 - part a partition on the the location so
194:51 - that it runs only through Canada and
194:53 - then when it gets to the next country it
194:55 - doesn't keep going um and if we only did
194:58 - that by the way let's look at what this
195:01 - looks like uh okay real quick I need to
195:04 - cast
195:06 - this um as an integer like we've been
195:09 - doing in the past you can also do um
195:13 - real quick I want to show you another
195:15 - one convert and I think
195:18 - it's comma
195:20 - [Music]
195:21 - integer um or is it integer comma let me
195:24 - try integer comma I think it's that way
195:29 - actually um and you can do it this way
195:31 - as well that is up to you um you know
195:35 - either one is totally fine if you want
195:36 - to use both that's even better because
195:38 - then it kind of shows you can do both um
195:40 - but they basically do the exact same
195:41 - thing so let's go
195:44 - down and let's see what what's happening
195:48 - here so it goes down to Albania and
195:51 - since we're partitioning on Albania
195:53 - Albania their total amount of
195:55 - vaccinations is 347,000 I know that
195:58 - going into it because it has it on every
196:00 - single stinking row but down here they
196:03 - started to add they started to add up
196:05 - right but we didn't do that we only
196:08 - partitioned on location so it added it
196:10 - did the sum of all the new vaccinations
196:13 - by that location so what we need to do
196:16 - is go over here and say order by and we
196:19 - need to order it by both the location
196:22 - oops da.
196:24 - location and the date that is very
196:28 - important uh the date is what's going to
196:30 - separate it out um and you'll see in
196:34 - just a second what I mean so now let's
196:36 - run this and let's go back down to
196:38 - Albania I think it was so here's Albania
196:41 - let's go to our first one so here's what
196:44 - we have we have 60 and it gives us 60
196:48 - then we add 78 so we add 60 + 78 = 138
196:53 - then 78 + 1 78 sorry 60 + 78 + 42 = 180
197:00 - then 60 + 78+ 142 + 61 241 so you get
197:03 - the point it adds up every single uh
197:06 - consecutive one and when there's nulls
197:08 - or there's zeros it's going to uh not
197:12 - anything it's just going to keep it uh
197:14 - going and then you can see as it's it's
197:17 - a rolling count so we're going to name
197:19 - this let's do
197:21 - as
197:24 - um let's do as um rolling people
197:29 - vaccinated let's call
197:36 - that um I think that's
197:40 - good now what we want to do is actually
197:42 - look at the total population versus the
197:45 - vaccinations um and really what we want
197:47 - to do is use this rolling people
197:50 - vaccinated we want to use the max number
197:52 - because at the very bottom is our Max
197:54 - number this is how many people in
197:57 - Albania um we want to use that number
198:00 - and divide it by the population to know
198:02 - how many people in that country are
198:05 - vaccinated so what we want to do is
198:08 - we'll do this we'll do rolling people
198:10 - vaccinated divided by
198:12 - population times 100 and as you can see
198:15 - we're getting an error you can't use a
198:18 - column that you just created to then use
198:21 - the next one so what we need to do is we
198:24 - need to create either a CTE or a temp
198:27 - table um this is at this is the time of
198:31 - of the show of this tutorial whatever
198:34 - you want to call it where I'm going to
198:35 - give you some options you can do one you
198:38 - can do
198:39 - both you know there's no preference to
198:41 - me
198:42 - um but we're going to take this and
198:45 - we're going to at least for this first
198:47 - one we're going to use a
198:50 - CT so we're going to say excuse me we're
198:55 - going to say with and let's call
198:59 - it um pop vers vac I don't
199:05 - know population versus
199:08 - vaccination and then all we need to do
199:12 - is specify the um basically the columns
199:15 - that we're going to input um so let's
199:18 - put as and let's insert that down here
199:21 - because what we need to do is we want to
199:22 - say
199:24 - um we do
199:26 - continent oh gosh I'm so bad at spelling
199:31 - continent uh
199:34 - location date
199:37 - population um and then we'll have this
199:41 - rolling people vaccinated that should be
199:47 - it um and let's see if there's we just
199:51 - need to close this parentheses so this
199:53 - is our CTE it should be
199:56 - working um actually that's not true I
200:00 - need an open parenthesis here that's why
200:02 - it's giving me that
200:04 - error um let's see it's I'm still
200:07 - getting an error so let me see if I'm
200:09 - doing something
200:10 - wrong do
200:15 - I have this in
200:18 - parentheses there and there I say
200:22 - with pop back there continent location
200:27 - date
200:28 - population
200:30 - ah I believe that is the
200:33 - issue so then we need we just need to
200:35 - add that last
200:36 - column new
200:40 - vaccinations um if the number of columns
200:44 - in the CTE is different than the number
200:46 - of columns here it's going to give you
200:47 - an error so you got to make sure um and
200:50 - then let's just say for real for right
200:52 - now select everything from and we'll do
200:56 - and we can even say pop versus vag it'll
200:59 - come up right away so really quickly
201:02 - let's run this and see what
201:04 - happens uh the order by Clause can't be
201:06 - in there I knew that but
201:09 - whoops let's comment that out
201:13 - let's get that all the way up here let's
201:15 - run this so now that query that we were
201:17 - looking at before is now in here but now
201:20 - we can actually use it to perform
201:23 - further calculations um so we'll just do
201:25 - everything
201:27 - comma and then we'll do rolling people
201:31 - vaccinated uh divided
201:34 - by and that needs to be
201:37 - population time 100 I'm pretty sure this
201:40 - is incorrect give me me a
201:42 - second um invalid object oh it's because
201:46 - I have to run it with the
201:48 - CTE my bad
201:51 - um so let's look at this percentage
201:54 - really quick
201:56 - um it's not wrong and it's actually
201:58 - going to give us a rolling number and
202:00 - this may actually be what we
202:02 - want
202:08 - um so basically what it's doing is it's
202:10 - taking this column
202:12 - and doing it versus this column and so
202:15 - this number should only increase because
202:17 - as this number increases this number
202:19 - will increase because the population
202:21 - stays stagnant um again I'm kind of
202:24 - looking at this as we go so right now
202:27 - 12% of the population in um
202:31 - Albania is vaccinated so that you know
202:35 - that is that's all we know I don't think
202:37 - we need to go any further than that I
202:39 - think um if you want to
202:42 - you can look at the max
202:44 - one um but you'll have to get rid of
202:47 - date and just keep the location um
202:50 - population Etc because the date is going
202:52 - to throw everything
202:53 - off so if that's something you want to
202:55 - do absolutely do
202:57 - that um you can use a temp table here uh
203:01 - we can look at how to do
203:03 - that really quickly I think um so that
203:08 - you guys know how to do that again I
203:10 - recommend throwing in one or two of
203:12 - these um like even up
203:14 - here you can do different um different
203:18 - counts and then do one for each um so
203:21 - let's do temp
203:23 - table all right so it's going to be a
203:27 - lot of the same stuff we're going to
203:29 - keep
203:30 - this
203:32 - and this is going to be what we insert
203:36 - so let's say insert into and we need to
203:39 - write where we're inserting it into but
203:41 - let's say uh again I'm only doing this
203:44 - for it's going to be basically the same
203:46 - it's going to have the same effect but
203:48 - um with a temp table so uh we're going
203:51 - to do temp table and let's look
203:53 - at um let's say let's call percent
203:58 - population
204:00 - vaccinated and we need to specify our
204:03 - columns so let's go down here excuse me
204:06 - let's go down here and let's do the
204:08 - basically the exact same thing so
204:10 - continent
204:12 - I think I spelled that
204:14 - right no I didn't spell that right I
204:18 - almost did I got really confident we'll
204:20 - do we and and just so you know for these
204:22 - we have to specify the data type as well
204:24 - um because we're basically creating like
204:26 - a genuine table is just a temporary one
204:29 - so let's do invar Char 255 we'll do um
204:34 - location we'll do the same thing and
204:36 - barar
204:38 - oops
204:40 - 255 we need to do date and we'll do that
204:44 - as date time we'll do
204:48 - population and we can do I mean there's
204:51 - lots of different ones we can do but
204:52 - we'll do numeric for this
204:54 - example there's new uncore
204:58 - vaccinations and let's do that one as
205:02 - numeric again you can use different
205:05 - things um and then we'll do rolling
205:07 - people
205:08 - vaccinated Um this can can be numeric as
205:11 - well
205:13 - um and then we need to insert that into
205:16 - here okay so we're inserting the data
205:19 - and then down here we can actually
205:21 - select it and let's let's take
205:25 - this and do right here except we're
205:28 - going to be doing this
205:30 - by this right here but it hasn't been
205:33 - created yet but it will be created in
205:34 - just a
205:36 - second okay so you let me see if
205:40 - yeah so these were the rows that were
205:43 - affected um and and then we got our
205:46 - actual output from this right here now
205:49 - let's say you wanted to change something
205:50 - in here you're like oh you know I I
205:52 - don't want to do it we this let me
205:53 - comment that out and then let me do this
205:57 - and um create that table again oh no we
206:02 - got an error um how can we get around
206:04 - this very simple I've done this in a I
206:06 - should do this in a different one you
206:08 - can do drop table if exist
206:12 - and then do this right
206:14 - here um and when we run this it
206:17 - should give us our output I highly
206:20 - recommend just adding this especially if
206:22 - you plan on making any alterations so
206:25 - that when you um run it multiple times
206:29 - you don't have to you know go and then
206:30 - delete the view or or delete the temp
206:33 - table or drop temp table or you know
206:36 - it's just built in it's at the top it's
206:38 - easy to maintain and it looks good it's
206:40 - it's something that that a lot of people
206:42 - do and so if you have that at the top of
206:44 - your query and somebody you know
206:47 - somebody who wants to hire you looks at
206:48 - this like oh okay that makes sense I'm
206:51 - glad they included that they know what
206:52 - they're doing this guy's smart I should
206:53 - hire them um now what we're going to do
206:58 - is uh I feel like I've showed you as
207:01 - much as I can show you um with the
207:03 - limited data that we've looked at again
207:05 - I could have done this for six hours
207:07 - straight if I had used all the data at
207:09 - least I mean there's just so much data
207:11 - but let's create a view you know I'm
207:14 - only going to show you how to create one
207:15 - view but I want you to go back and
207:17 - create multiple views you know if this
207:19 - is one that you want to look at these
207:21 - Global numbers um let's look at this one
207:23 - really quick if you want to look at this
207:26 - number right here toss it in a view I
207:28 - mean that one doesn't make sense to toss
207:29 - in a view but this
207:30 - one toss these numbers in a view um and
207:34 - we're we're going to um look at it in
207:36 - Tableau later but for right now let's
207:40 - just create our
207:42 - view um so like let's just
207:45 - say
207:47 - creating view to store data for
207:52 - later
207:54 - visualizations all right so let's say
207:57 - create view um and I want I'm just going
208:01 - to keep the same thing um like that um
208:06 - and for views it's so easy I mean I'm
208:09 - literally just going to and I can even
208:11 - take um the order by I believe we'll see
208:14 - if I'm
208:16 - correct um actually let's get rid of
208:18 - both of these
208:20 - things so it says create view percent
208:25 - uh percent populate oops percent
208:29 - population
208:32 - vaccinated um and let's see am I doing
208:34 - anything wrong
208:35 - [Music]
208:36 - here let me
208:39 - see the order by clause
208:42 - I was completely wrong I was wondering
208:44 - why I was getting that now let's try
208:46 - running it okay so it ran successfully
208:50 - um let's look at our views it's not
208:52 - going to be in there let's refresh it
208:54 - hey look we got our very first view we
208:57 - can open that up like a table if we want
208:59 - to um isn't it's I mean it's gorgeous um
209:01 - if you want to get rid of that select or
209:04 - sorry control shift R that's a
209:07 - refresh um and now it it basically
209:10 - recognized is it but let's go back here
209:13 - for a
209:14 - second um and you know we can now query
209:18 - off of that it's a view now so you know
209:22 - it's it's something that you can it's
209:25 - permanent you know you have to go in and
209:27 - actually delete it's not like a temp
209:28 - table this is now permanent and this
209:30 - could be something that we now use for a
209:32 - visualization later so do some of these
209:35 - look at some of the queries that we've
209:36 - looked at and create a few of these
209:38 - views um and we will use them later
209:42 - um normally in like a normal setting uh
209:46 - if I was actually working I would put
209:49 - some of these in actual like I would
209:51 - call them like a work view or a work
209:53 - table or something set aside so that I
209:56 - can use them consistently um but I would
209:59 - also set them aside so that I could
210:01 - connect Tableau to that view now we're
210:04 - going to be using something called
210:05 - Tableau public that'll be in the very
210:07 - next tutorial unfortunately um
210:11 - let me see if I can show you I can't
210:14 - show you Tableau public does not connect
210:17 - to SQL databases um and that's because
210:19 - it's free and I totally get it you have
210:22 - to pay for the upgraded version but I am
210:23 - not a a billionaire okay I cannot afford
210:27 - uh the real version of Tableau I'm also
210:29 - not like a student or or like something
210:31 - where I can get it cheap so I'm not
210:33 - paying for that so we're going to use
210:34 - Tableau public and and I recommend this
210:36 - anyways because anybody can access it
210:38 - it's it's free for anybody so we're
210:40 - going to be using Tableau in the next
210:41 - one to actually visualize a lot of these
210:44 - things I want to get at least five
210:45 - visualizations we're going to create a
210:47 - dashboard it's going to be a beautiful
210:49 - beautiful thing all right so the very
210:51 - last thing that we are going to do is we
210:53 - are going to actually save this and then
210:55 - put it into GitHub and I just want to
210:57 - show you how to do that that's where
210:59 - we're going to be storing our code at
211:00 - least for now um so let's go up here
211:03 - let's click file let's click save as
211:08 - I've already have multiple versions of
211:09 - this let's just put
211:12 - B2 we're going to save that so we have
211:15 - this saved now I'm going to go over here
211:18 - I'm going to go to my GitHub now if you
211:21 - don't have an account I highly recommend
211:23 - getting an account so you can start
211:25 - putting your portfolio projects in here
211:28 - of course we're not going to put our
211:29 - Tableau one in here but our SQL ones and
211:31 - our python ones you can put in here
211:33 - again I'll talk a lot more about how we
211:36 - actually want to display this in GitHub
211:39 - or other places but what we're going to
211:42 - do for this is we're going to create a
211:43 - new
211:44 - repository let's call this one
211:48 - portfolio
211:51 - projects make it public we'll create the
211:54 - repository we'll do all that extra stuff
211:56 - later so what we now want to do is
211:58 - upload an existing file we'll click
212:01 - right there go to choose files and we'll
212:04 - click this latest one that we saved uh
212:07 - and we'll open it and we can always
212:10 - change the name of it later on and you
212:12 - can add notes if you'd like but we'll
212:14 - commit that change so we'll actually
212:16 - upload this uh this
212:20 - file um but let's look at it really
212:22 - quick and I'm going to go back and I'm
212:24 - going to use the real one where has the
212:27 - formatting and and the notes that I have
212:29 - that I wanted to add in there but as you
212:31 - can see you know you can see all of the
212:35 - queries that we wrote and this is
212:36 - fantastic so if somebody comes in here
212:38 - you know we'll have more notes and kind
212:40 - of better comments on what they do um
212:44 - and what the takeaway is this from for a
212:46 - hiring manager to you know when they
212:49 - actually look at this so this is a
212:51 - really really good place to start again
212:53 - uh this may not be your optimal place to
212:56 - put this I'll give you a few different
212:58 - options in a later video about how we
213:00 - can actually uh potentially improve upon
213:03 - this I'm really looking forward to
213:06 - getting more portfolio projects done so
213:09 - we can actually start building a compl
213:10 - complete
213:12 - portfolio uh if you've stuck around all
213:14 - this way I just want to say
213:16 - congratulations I mean I know this was a
213:19 - long video I know that it took a long
213:22 - time but you stuck with me uh you you
213:24 - put in the hard work and that is
213:26 - fantastic and I really hope that it pays
213:28 - off and I hope that this has been
213:29 - helpful thank you for watching we'll
213:31 - have a lot more uh videos in the future
213:34 - on these portfolio projects and I'm I'm
213:36 - just really really looking forward to
213:38 - doing them to be honest so thank you for
213:40 - sticking with with me uh thank you for
213:42 - watching I really appreciate it if you
213:44 - like this video be sure to like And
213:46 - subscribe below and I will see you in
213:48 - the next
213:50 - [Music]
214:00 - video what's going on everybody welcome
214:02 - back to another video today we will be
214:04 - heading back in a sequel for our third
214:06 - portfolio
214:09 - project
214:13 - now I am extremely excited for this
214:15 - project in particular for a few reasons
214:17 - one we're getting back into SQL and I
214:19 - really like SQL and two we are finally
214:22 - focusing on data cleaning and I have
214:24 - talked so much about why data cleaning
214:26 - is important and that you really need to
214:28 - learn how to clean data and that that's
214:30 - a big part of what a data analyst does
214:32 - but I haven't actually showed you how to
214:34 - do it yet and so that is what this whole
214:36 - project is going to be and then at the
214:38 - end you'll get to add it to your
214:39 - portfolio so it's really a win-win now
214:41 - before we start I just want to say that
214:42 - I think it's going to be a little bit
214:44 - more advanced than our very first video
214:45 - in Sequel where we walk through data
214:47 - exploration if you see something that
214:49 - you have never seen before I will do my
214:51 - best to explain it while we're walking
214:53 - through it but if you get confused or it
214:55 - seems a little complicated please pause
214:57 - it Google it do a little bit of research
214:59 - and then come back and I think that will
215:00 - be very helpful with that being said
215:02 - let's jump over to my screen and we'll
215:03 - get started on the project so we're
215:04 - going to start over here on GitHub and
215:06 - this is where I've actually put the data
215:07 - set that we are going to be using so I
215:09 - will put this link in the description uh
215:11 - we're going to go right over here to the
215:12 - Nashville housing data for data cleaning
215:16 - all you have to do is Click download and
215:19 - it's going to download it and you can
215:20 - open it up if you want to we're not
215:22 - going to do anything to this data at all
215:25 - but really quick I'm just going to show
215:26 - you what it does look like um and we'll
215:29 - of course look at this in SQL in just a
215:30 - little bit but we have a unique ID
215:32 - parcel ID uh we have this
215:35 - address a sales date uh the price of the
215:38 - home so this is housing data if you
215:41 - didn't pick up on that already uh who
215:42 - actually owns the home the owner address
215:45 - and then some information about land
215:48 - value um bedrooms bathrooms things like
215:50 - that again not super important um
215:53 - because we're going to be doing all of
215:55 - this in uh SQL so let's actually get
215:59 - this data into SQL we're going to import
216:01 - it the exact same way that we did uh in
216:04 - the very first video so we're going to
216:06 - come right over here going to go all the
216:08 - way down to Microsoft SQL Server 2019
216:12 - Import and Export we'll click next our
216:16 - data source is like last time a
216:18 - Microsoft Excel and let's take a
216:21 - look and we'll take that first one this
216:24 - is the most recent one I've downloaded
216:26 - but I just wanted to make sure so I
216:28 - downloaded a few times um for the
216:32 - destination we're going to click SQL
216:34 - Server native client
216:36 - 11.0 and this is my client or my server
216:40 - right here
216:41 - and I'm going to go down here and I want
216:42 - to put it in this portfolio project so
216:45 - you know just configure this to what
216:47 - your server is um again if you haven't
216:49 - done this before you've never set up SQL
216:51 - server or a server um to go on SQL
216:54 - Server I will leave a link hopefully
216:57 - right here also in the description uh
216:59 - like I did for the first project so um
217:02 - you know be sure to go through that
217:03 - video so that you know how to download
217:05 - this and have everything we're going to
217:07 - copy the data we're going to take sheet
217:09 - one um we could renamed sheet one to
217:12 - something else but uh we didn't and then
217:14 - we're going to finish this and finish
217:16 - and it should run successfully
217:20 - hopefully it's looking good perfect so
217:23 - we have
217:25 - 56477 so let's head over to
217:28 - SQL all right let's go to our
217:32 - database portfolio project uh and here
217:36 - is our sheet one now I'm going to rename
217:38 - this um let's rename name it what is it
217:42 - Nashville let's just do Nashville
217:44 - housing that's what I'm going to rename
217:46 - it as um at least so when I post these
217:50 - queries um to the GitHub and you see
217:52 - them this is what they will be so if you
217:54 - want to have them the exact same or be
217:56 - able to copy and paste them um you know
217:58 - you should you should do that as well so
218:00 - let's take a look really quick let's
218:01 - select the top
218:03 - 1,000 but there's about 56,000 rows
218:06 - there's a lot of data in here um and a
218:09 - lot of things so
218:11 - uh I'm about to open up a a save thing
218:13 - and we'll walk through the exact things
218:14 - that we're going to be working on in
218:15 - just a little bit but um yeah this is
218:18 - what the data looks like in here there's
218:19 - lots of columns uh lots of data so
218:22 - really excited about this um let me pull
218:24 - this open really fast it's going to be
218:26 - this project walkth through here are the
218:30 - things and I'm going to show you this
218:31 - really quickly here are the things that
218:33 - we're going to be walking through so
218:34 - we're going to standardize the date
218:35 - format we're going to populate the
218:37 - property address data um that's
218:39 - referring to this right here if you
218:41 - notice there's the address and there's
218:43 - also the city that it's in so we want to
218:47 - be able to separate that out um and that
218:50 - is actually right over here we're going
218:52 - to be doing the same same thing to the
218:54 - owner address except that has an address
218:56 - a city and the state um which makes it a
218:59 - little bit more complicated and so um
219:01 - that one should be really really cool to
219:03 - to show you um oh whoops I I messed up
219:07 - that's what this one is breaking out
219:09 - into individual columns that's where
219:10 - going to do for that this popular in the
219:12 - property address um you know if you
219:14 - notice and we'll go into this a little
219:16 - bit there's actually some values in the
219:17 - property address that are blank but I'm
219:19 - going to show you how you can actually
219:21 - populate that um which you know is a
219:24 - it's just a cool trick that I've used a
219:26 - few times and it it it does work I think
219:29 - you'll find that one interesting um in
219:31 - the sold as vacant field we're going to
219:33 - be doing some um some case statements if
219:37 - then um then we're going to be removing
219:39 - duplicates and then delet deleting
219:40 - unused columns so we have a lot to get
219:43 - through this could be potentially the
219:44 - longest video and I'm okay with that um
219:47 - because I'm I love SQL down here and and
219:52 - I will say that when I when I in the
219:53 - very first video I said it was going to
219:54 - be an ETL video um and I fully intended
219:58 - on doing that but I ran into not issues
220:00 - on my side but issues in the fact that
220:03 - the ma vast majority of people who are
220:05 - going to be watching this are not going
220:06 - to be able to do what I did to configure
220:08 - my server um but I left it in here
220:11 - anyways when I think ETL is an automated
220:13 - process in order to uh extract the data
220:16 - from somewhere we're going to transform
220:18 - it and then put it somewhere this was
220:20 - going to be the extraction method um and
220:22 - I was going to put it in a store
220:23 - procedure so that you could um you know
220:25 - run the run the store procedure run the
220:27 - job import the data it was going to be
220:29 - really cool but I know that if I was
220:33 - having trouble with it me trying to
220:35 - explain it to you and you being able to
220:36 - figure it out on your side was going to
220:38 - be very tough I left the this anyways
220:41 - because I was able to get to work on my
220:43 - computer um but it is tough and it took
220:47 - a lot of research um and I did this for
220:49 - a previous server like a year or two ago
220:51 - and I remember it being crazy hard but I
220:54 - was able to figure it out on my computer
220:55 - so if you want to try it out um try it
220:57 - out and and look into the stuff so I'm
220:59 - going to leave this here this is just
221:01 - for if you want to try it it's a little
221:03 - more advanced um and so you don't have
221:07 - to just important and this will be a
221:08 - data cleaning project
221:10 - instead of an ETL project but data
221:12 - cleaning is what 90% it was going to be
221:14 - anyways um anyways let's go back up to
221:17 - the very top really quickly I have a
221:20 - whole another laptop right here as I did
221:23 - in the first video I didn't show it to
221:24 - you last time but um I have all of my
221:27 - queries written out over here I'm going
221:29 - to try to do this as quickly as possible
221:30 - we have a lot to get through now before
221:32 - we start writing our queries I am going
221:34 - to turn off my camera so I do not get in
221:36 - the way all right you should still be
221:38 - hearing my voice let's let get started
221:40 - let's just start with select everything
221:43 - and we'll do from uh and it is portfolio
221:47 - project.
221:49 - db. Nashville housing so let's just get
221:52 - this pulled up on
221:55 - screen awesome so this is exactly what
221:58 - we were looking at
222:00 - before and the very first thing that
222:02 - we're going to be looking at is this
222:04 - sale date now uh I wrote standardized
222:06 - sale date but I'm really just going to
222:08 - change the sale date um so let's copy
222:12 - this really
222:13 - quick and let's look at just s
222:19 - date and it has this time on the end and
222:22 - it serves absolutely no purpose and I it
222:24 - just annoys me I want to take that off
222:26 - and so right now it's a say it's a date
222:28 - time format but we're going to convert
222:32 - and we're going to do date and we're
222:34 - going to take sale
222:37 - date sale date and we're going to go
222:41 - like that and let's run this really
222:44 - quick and this is what we want it to
222:46 - look like all right so let's say update
222:51 - and we have portfolio project specified
222:53 - up here so we can just say Nashville
222:55 - housing and we are going to set sale
222:59 - date equal to and we're just going to
223:01 - copy this now I will say before we do
223:02 - this um I had some issues in my when I
223:06 - was initially doing it whether or not it
223:09 - made the update and I was I'm not sure
223:11 - why why not it was doing it um so yeah
223:14 - it's not doing it right now I you try it
223:17 - out on yours it may or may not be
223:19 - working I'm not exactly sure why that is
223:21 - because I would say like 80% of the time
223:23 - it's doing it 10 20% it's not I don't
223:26 - know why um no logical explanation of
223:28 - that but uh when I most the time when I
223:32 - did it they would then be the same
223:33 - column something we can do I just
223:36 - thought of we can do alter alter can't
223:38 - even say that word alter
223:41 - table and we can say um I think it's new
223:46 - or it's add add um give me one
223:50 - second yeah so add and we'll just do
223:53 - sale date
223:56 - converted um and let's make that a date
224:00 - format and bum just like this and then
224:04 - we can
224:06 - say like this and say
224:10 - sale date
224:12 - converted um let's try this and see what
224:14 - happens so I'm going to add this
224:17 - column and then I'm going to update this
224:20 - and it says it's affected let's see what
224:22 - happened uh so let's write sale
224:26 - date convert
224:29 - sale date
224:32 - converted let's see what happened let's
224:34 - see if it actually
224:35 - worked and it worked okay so we we now
224:38 - have a column um and maybe at the end
224:41 - we'll remove that sale date column U so
224:44 - that we just have that sale date
224:45 - converted but we know what that is you
224:47 - don't have to name it that you can name
224:48 - it sale date to or something like that
224:52 - um cool well let's go down to the
224:55 - property address and let's get a just a
224:58 - really quick look at it uh let's copy
225:01 - this up here I hate rewriting this stuff
225:04 - so I'm always copying and pasting um but
225:07 - we're going to be working with the prop
225:12 - address there we go so let's take a look
225:15 - at this really
225:16 - quick
225:19 - um so let's look at sorry I was looking
225:22 - at my notes we need to look at where the
225:26 - property address is null so what you'll
225:28 - see really quick when we run this is
225:30 - that there are null values um why there
225:34 - are null values yeah I really don't know
225:38 - um I I really am not sure but let's look
225:42 - at
225:44 - everything where this
225:46 - is um where it's n so we have this
225:50 - property address we have a sale date a
225:52 - price legal reference um there's this
225:54 - parcel ID and there's this unique ID um
225:57 - so we have a lot of information and when
226:01 - you have something like this something
226:02 - like a u an address an address is you
226:06 - know the address isn't going to change
226:08 - the address is the address the owner the
226:10 - owner's address might change but the
226:13 - property itself the address 99.9% of the
226:16 - time is not going to change so you can
226:18 - say with almost certainty that you know
226:21 - this property address could be populated
226:23 - if we had a reference point um to base
226:27 - that off of so really quickly um let's
226:32 - look at just
226:34 - everything and let's look at and we'll
226:37 - just order by
226:40 - let's
226:41 - do property not property address uh
226:44 - let's do parcel ID and let's take a look
226:47 - at this so we have to do a little bit of
226:49 - some research on this um but I'm going
226:53 - to show you something really quick let's
226:54 - see if I can find
226:56 - example um in not too
226:59 - long okay so here's an example here's
227:01 - the same ID so 015 bum and that's the
227:06 - exact same address and we'll find this a
227:09 - lot of times and I look through the data
227:11 - and it's it is pretty much accurate um
227:15 - when it does have it it it is the exact
227:18 - same address so this parcel ID is going
227:21 - to be the same as the property address
227:25 - um so something that we can do is
227:28 - basically say if this parcel ID has an
227:33 - address and this parcel ID does not have
227:35 - an address let's populate it with this
227:39 - address that's already populated because
227:41 - we know these are going to be the same
227:43 - that is basically what we are about to
227:44 - do um and it's not super complicated um
227:50 - but let's get started writing
227:53 - it let's copy that down there um one
227:57 - thing we are going to have to do with
227:59 - this is do a self-join so we have to
228:01 - join the table to itself to look
228:05 - at if this is equal to this then this
228:09 - needs to be equal to this that kind of
228:11 - thing um so real quick let's just write
228:13 - that join part out and we'll go from
228:16 - there I don't know why I sounded
228:17 - Canadian right there we'll go from
228:20 - there uh so we'll join on this and we'll
228:24 - say
228:25 - on a do oh wait let's let's label them
228:30 - I'm gonna do this in a really lazy way
228:32 - I'm just going to do a and b a. parcel
228:35 - ID is equal to b. parcel ID
228:40 - and um let's see really
228:43 - quick so we need to find a way to
228:45 - distinguish these the sale date could be
228:47 - the same um one thing this unique ID is
228:50 - is unique so we need these to be
228:52 - different so let's use this and let's
228:54 - say um let's say and a. unique ID is not
229:00 - equal to b. unique ID so all we have
229:05 - done here is we've joined these the same
229:08 - exact table to it self and we said where
229:10 - the partiel ID is the same but it's not
229:13 - the same row right because this is a
229:15 - unique ID unique will never that means
229:18 - these will never repeat themselves so
229:20 - we'll never get the same one so if
229:22 - this is equal to this but these are
229:25 - different we want to then populate um
229:29 - populate the other one so let's do a.
229:32 - parcel ID and we'll say a do property
229:37 - address B do parcel ID comma bproperty
229:42 - address um and let's take a look at this
229:45 - really
229:46 - quick and let's
229:49 - do let me see if this works where
229:53 - aproperty address is null and let's see
229:59 - if see what comes up
230:00 - here okay so this is perfect this is
230:03 - exactly what I wanted to see so we have
230:06 - this parcel ID we have this parcel ID
230:08 - and here is our address and it's blank
230:11 - in all 35 of these so we have an address
230:13 - for all of these but we're not
230:15 - populating it so what we want to do is
230:18 - we want to say use this thing called
230:20 - isnull so isnull is basically saying
230:23 - it's the first thing is what do we want
230:25 - to check to see if it's null so we want
230:27 - to check aproperty address this whole
230:31 - thing now if it is null what do we want
230:35 - to populate um we want to put in there
230:38 - this B do bproperty um address because
230:43 - we want to take that property address
230:46 - and stick it in there so um let's run
230:50 - this really quick so this row is what is
230:53 - eventually going to be stuck into this
230:55 - row so this is perfect um it's literally
230:58 - saying when it's null take take this and
231:02 - put it there and so that's what this um
231:04 - this part of is doing so let's go in
231:07 - here and write our update
231:10 - uh so we want to update and let's take
231:13 - this whole thing from here
231:17 - up and we this will be the set
231:21 - oops um so we're going to set
231:24 - um
231:28 - property okay we need to specify um and
231:31 - just so you know when you're doing joins
231:33 - in an update statement you're not going
231:34 - to say Nashville housing okay that's
231:37 - going to give you an error you need to
231:38 - use it by by its Alias so let's put a so
231:42 - now we're going to say property address
231:44 - is going to be equal to and now we're
231:46 - just going to copy this is
231:48 - null and put it right
231:51 - here and we only want to update let's
231:54 - see if it it does take this so I think
231:57 - this should be correct let's let's test
231:59 - it out really quick and we're going to
232:00 - run this above query and see if it made
232:01 - that
232:04 - update all right so there you go um as
232:07 - you can see there are now none that have
232:09 - null in there otherwise it'd be giving
232:11 - us an output right now so that one is
232:14 - fixed we can go back and check it if you
232:15 - want to please go back and and double
232:17 - check that um but that is what we did
232:21 - and it worked perfectly so that's what
232:23 - that is null does it checks to see if
232:27 - this is null if it is null it it it can
232:29 - populate with a value you can also do
232:31 - like a string and what we I mean you can
232:33 - write you know no address if you wanted
232:37 - to do something like that we don't want
232:38 - to do that we're going to keep it how it
232:40 - is let's keep moving on we do not have
232:43 - unlimited time here trying to keep this
232:45 - I'm going to try to keep this on one
232:47 - under two hours stretching the rules
232:49 - because for my love of SQL and that is
232:51 - the only reason um and this I think is
232:53 - going to take a little longer so let's
232:56 - take a look and let's copy this real
233:02 - quick and let's take a look at uh what
233:06 - are we doing the property address the
233:09 - property address um and we can get rid
233:11 - of this as
233:13 - well so if you notice we have two things
233:18 - here we have both the address and then
233:21 - there's this comma after all of them and
233:23 - there is the
233:26 - city now you know you don't know that or
233:28 - you maybe you haven't looked into this
233:30 - but I have and there are no other commas
233:34 - anywhere except for in between these
233:36 - things as a separator as a delimiter
233:40 - um a delimiter is lit if you don't know
233:42 - what if you've never heard that term
233:43 - delimiter a delimiter um is something
233:45 - that separates different columns or
233:47 - different values so for us the delimer
233:50 - is a comma and for this first one
233:54 - because we're going to be separating
233:55 - this one out and then we're going to be
233:56 - doing the owner
233:57 - address um for this one we're going to
234:00 - be using something called a substring
234:03 - and we're also going to be using
234:04 - something called a character index or a
234:07 - charart index so let's start writing
234:10 - that out and let's do
234:13 - select and let's say substring now the
234:17 - substring that we want to take we of
234:19 - course want to be looking at oops let me
234:21 - um put this down here so it helps us out
234:23 - a little
234:24 - bit and I'll get do like that so
234:27 - substring and of course we're looking at
234:31 - property
234:33 - address and we want to look at position
234:36 - one so we're going to start at position
234:38 - one one now this next part
234:42 - is something that you may have never
234:45 - seen before um and if that if you
234:47 - haven't that's totally okay um we're
234:49 - going to be the character index is going
234:51 - to be searching
234:52 - for the um it's going to basically be
234:56 - searching for a specific value okay
234:59 - that's all it's doing and you and you
235:00 - can look into this a little bit more if
235:02 - you want um so it's going to be Char
235:04 - index that's how it's spelled and then
235:06 - like an open parentheses and we want to
235:08 - specify what we're looking for so it can
235:10 - be anything you can even do you know if
235:12 - you wanted to things like um Tom or you
235:16 - can do Val well you do it um like this
235:21 - you can look for Tom or if you're
235:22 - looking for a specific word like John
235:25 - you can search that that's what this is
235:27 - for um but we're going to do a comma
235:29 - where are we looking that's what this
235:31 - next one is so we're looking in property
235:34 - address uh and then we're going to close
235:36 - the
235:37 - parenthesis and and we'd also close it
235:40 - again to complete off that substring and
235:42 - we'll say as
235:45 - address um and let's just take a look
235:47 - really quick at
235:48 - this so right now it's taking the it is
235:54 - basically going it's looking at property
235:56 - address it's going to the very first
235:58 - value or starting at the first value and
236:01 - then it's going until the comma Now the
236:03 - unfortunate thing is is we actually
236:05 - getting this comma in this output and we
236:07 - don't want that uh you don't want a
236:09 - comma at the end of every address we can
236:12 - change that um so we can say because
236:15 - this is specifying a position if we just
236:19 - look at this chart index which we can do
236:21 - really
236:23 - quick it is going to give us a a number
236:27 - it is saying at position 19 that is
236:29 - where the comma is right so it's not
236:32 - like it's taking it's not a value or
236:34 - it's not a um it's not a string it's a
236:36 - it's a number so we can say minus one
236:38 - one and if we do
236:41 - that and now we run
236:43 - it now that comma is gone because we're
236:46 - looking back we're going to the comma
236:48 - and then going back one from uh one
236:50 - behind the comma so that's how you get
236:52 - rid of that comma right there um the
236:55 - next one's a little bit more tricky
236:57 - because we're not starting well it's not
236:59 - super tricky but we're not starting at
237:00 - that first position anymore so let's put
237:03 - a comma then we have our substring now
237:05 - where we want to start is at this as at
237:09 - where the comma is so instead of
237:10 - position one we want it to be where that
237:12 - character
237:14 - index um I don't want it to look like
237:16 - this this whole time is it like this
237:18 - what am I doing it doesn't
237:21 - matter let's just get rid of this and
237:24 - see if that fixes
237:27 - it what am I doing here oh it's just
237:31 - because this is wrong um and we'll just
237:34 - do comma parentheses that might fix it
237:38 - ah doesn't matter okay I'm wasting time
237:40 - I'm going to keep going we want to start
237:42 - in this in this position okay um but we
237:45 - actually don't want to start at minus
237:47 - one we need to start at plus one because
237:48 - we want to go to the actual comma itself
237:52 - then once we get to the comma we want to
237:54 - add one so if we didn't if we just left
237:56 - it the same again it would include the
237:57 - comma at the beginning um then we need
238:00 - to specify where it needs to go to where
238:03 - does it need to finish now every single
238:05 - thing is going to be different every
238:07 - single address has a different length
238:10 - but we can use that to our advantage in
238:12 - this one and we can literally say the
238:14 - length
238:16 - of property address you guessed it right
238:20 - and then we can close this off let's see
238:23 - if that
238:24 - works okay what's messing up so we have
238:26 - property
238:27 - substring property
238:30 - address comma character
238:33 - index and then we have specifying it in
238:36 - the
238:37 - comma um we have the property address
238:40 - plus one okay we can't have that right
238:42 - there I don't know why I had that F
238:45 - finally figured it out at the end um so
238:48 - let's see what we're doing here let's
238:50 - see if it worked it works perfect um and
238:53 - again this was one that I'm guessing a
238:55 - lot of people haven't used before so I
238:57 - was trying to explain it a little bit
238:58 - more than other ones um but if we take
239:00 - that out we take out that plus one
239:02 - you're going to see the comma at the
239:04 - beginning right here so that's what that
239:06 - is um so Plus one and that's what we're
239:10 - going to keep now we can't separate two
239:14 - values into from one column without
239:17 - creating two other columns so just like
239:21 - we added this um table up here we're
239:24 - just going to I mean we're we're I'm
239:25 - just going to copy this down here really
239:27 - quick we're going to create two new
239:30 - columns and add that value in so we're
239:34 - gonna we're gonna add that we're going
239:36 - to call this um let's call it because
239:39 - it's property address let's do
239:42 - property property split um and this is
239:46 - the
239:47 - address and then we'll say this one this
239:50 - next one is going to be property and
239:52 - this is City split
239:55 - city city and this isn't going to be a
239:58 - date of course uh this going to be let's
240:00 - do narar and let's make it 255 just in
240:03 - case it's a large um just in case it is
240:06 - a large string a large text so then we
240:10 - can say um update that update
240:15 - that um and now we need to in insert um
240:19 - what we did for it so this first one is
240:21 - the address so we're going to say that
240:23 - equals the address and we're going to
240:25 - take this whole thing this whole
240:28 - substring oops and copy that and that's
240:31 - going to equal this um and then at the
240:34 - end we'll we'll look at it really quick
240:37 - so first let's add this table I'm going
240:39 - to do this one at a time really quick so
240:41 - you can see it so it adds the
240:44 - table now it adds the results and again
240:48 - adds the table of city and sets that
240:52 - City to that
240:54 - substring and now let's take um let's
240:58 - take this and just do
241:00 - select everything from this and you
241:03 - should see at the very end because when
241:05 - you add it it goes to the end we should
241:07 - have two new values and here we are so
241:10 - property split address and property
241:12 - split city um it's much more usable than
241:16 - this I mean this would be a nightmare
241:18 - not a nightmare it just be annoying to
241:20 - use this column I mean now that it's
241:22 - separated on the address and the city
241:23 - it's so much more usable of data it
241:27 - really really is the next thing we're
241:29 - going to be looking at is this owner
241:31 - address
241:32 - now it was hard enough or it was tough
241:36 - enough to do this um but I want to show
241:40 - you maybe even a simpler way to do it
241:42 - even though this is more complicated so
241:45 - let's go down
241:46 - here and let's get rid of
241:50 - this so let's say um let's get this and
241:55 - let's just say property oops no we're
241:57 - doing owner owner address here we go
242:02 - let's just take a look at this let's see
242:03 - what we got so again we're using or what
242:07 - we have in here is the address the city
242:10 - and the state so what we need to do is
242:13 - split all of those out um and again I
242:16 - don't want to use substrings again that
242:18 - was a pain I want to use um something a
242:23 - little different something again that
242:24 - you may have never seen it's called
242:27 - parse name um and parse name is super
242:30 - useful um especially for like delimited
242:34 - stuff stuff that's delimited by a
242:35 - specific value um so let me just show
242:38 - you what it is and then we'll go from
242:41 - there so we can say
242:43 - parse parse name um and we're going to
242:46 - be doing this on the owner
242:50 - address okay let's let me see let me see
242:55 - yeah I mean it's because I don't have
242:57 - this of course I do that all the time so
243:00 - annoying so on the owner address um and
243:04 - then let's do
243:05 - one and let's just see what happens
243:10 - uh nothing changed of course because
243:12 - parse name only is useful with periods
243:16 - or that's what it looks for that's what
243:18 - par name looks for and these are commas
243:21 - so something we can just do is we can
243:23 - replace those commas with uh a a instead
243:27 - of a comma we replace it with a period
243:29 - so super easy we're just going to do
243:31 - owner address
243:33 - comma um and we'll look for the comma in
243:37 - there then we need to specify what we
243:39 - need to change it to we'll change it to
243:40 - a period and let's close
243:43 - that and now let's run
243:47 - it and it's taking Tennessee so
243:51 - something odd about at least to me odd
243:54 - about parse name is that it kind of does
243:55 - things backwards than what you would
243:57 - expect it to do uh let's really quick
244:00 - let's add the other things um you'll
244:03 - you'll get a kick out well you won't get
244:05 - a kick out of this as much as I do
244:07 - here's one two
244:08 - three let's execute this and it
244:11 - separates everything for us but it's
244:14 - backwards so it's 1 2 3 you would
244:16 - imagine it' be one two 3 but no it's one
244:18 - two three so all we need to do is go
244:22 - three 2
244:25 - one and run
244:28 - this and there we go so now we have it
244:31 - broken out this is now our address this
244:34 - is our city and this is our state so
244:38 - super what I would consider super easy a
244:40 - lot easier than the substring but I
244:41 - didn't want to show you the easy one
244:42 - first and then give you the hard one um
244:45 - so now we just need to add those columns
244:48 - and then we need to add the values so
244:51 - let's do
244:53 - this uh let's make some room and I need
244:57 - to get rid of one of these I think o did
245:00 - I do that right what did I
245:04 - do I have my alter table update alter
245:07 - table update what is this doing here
245:10 - what is this I don't even know what this
245:12 - is we'll just go like that so now we
245:14 - have three perfect um so from National
245:17 - Housing we're going to say we're going
245:19 - to say this is the
245:21 - owner oops owner split
245:25 - address um actually let me just copy the
245:27 - owner make it easier so we have owner
245:29 - split address owner split
245:34 - City
245:36 - and let's do owner owner split and then
245:40 - State oops and copy there owner split
245:47 - City there we go owner split address
245:51 - owner split address so I'm putting all
245:52 - the sets equal to what we're about to
245:54 - add to so now this first one this three
245:58 - is the address we'll paste it there the
246:02 - second one is the city so we'll put that
246:07 - oh I see what happened here that's what
246:10 - happened got to get rid of
246:12 - that um I set the owner split City equal
246:17 - to that middle one and then of course
246:19 - the third one is the
246:21 - state so let's go do
246:24 - that and that should be done so let's do
246:27 - it two at a
246:29 - time oops owner split address what's
246:33 - wrong with that oh I probably just got
246:35 - to run this first let's try that
246:39 - tried to get good too quick um you can
246:42 - do this a much more efficient way I'm
246:44 - just doing this for visual purposes I
246:46 - would update all the tables first or add
246:48 - all the um columns first I mean and then
246:50 - do all the updating at the end that's
246:52 - normally how I do it but um again for
246:55 - visual purposes that this is what we're
246:57 - doing so let's go get this actually
247:00 - let's get this bring this down
247:03 - here um don't keep this in in your final
247:06 - queries it's a lot of extra selecting
247:09 - everything you don't need to do that um
247:11 - so here we go so owner split address
247:14 - owner split City owner split State again
247:18 - so much more usable than when it's all
247:20 - in one column I mean it is 10 100 times
247:24 - more useful data now um you know that
247:27 - one to me you that gets used a lot let's
247:30 - keep it going I feel like we're making
247:32 - fantastic time I don't even know I'm not
247:33 - even keeping track of time time is not
247:35 - even relative anymore be three hours and
247:38 - I wouldn't care let's keep going um
247:42 - let's take a look at this column right
247:45 - here sold as vacant um right now has no
247:49 - but let's look at let's do select
247:52 - distinct oh gosh I hate when I do this I
247:56 - do this all the time am I the only one I
247:58 - don't think I'm the only one and we'll
248:01 - do sp uh what is it sold as okay sold as
248:05 - vacant let's do a distinct count on are
248:08 - distinct on
248:09 - these so right now we have yes no n y
248:13 - I'm guessing which is no and yes and
248:14 - then no so let's look just for just
248:19 - because I'm curious um let's look at a
248:23 - count
248:25 - of I don't want to do the let me just do
248:27 - sold as vacant let me do a count of this
248:30 - and we'll Group
248:33 - by uh sold is vacant okay let's run this
248:37 - and see what we get oh gosh let me order
248:42 - by okay here we go now we're now we're
248:46 - moving that's not what I wanted at all
248:48 - order by two here's what I wanted okay
248:52 - so at no we have 51,000 yes 4,000 almost
248:56 - 5,000 no and then just a few so let's
248:58 - change them to to yes and no because
249:01 - these are obviously the vastly more
249:03 - populated ones um and we're just going
249:05 - to do this through a case statement so
249:08 - we're going to say oh yeah let me get
249:10 - this ready before we start oh yeah I'm
249:12 - ahead of the game now let's do select
249:15 - and we'll do sold as vacant and then
249:18 - we'll start our case
249:19 - statement um yeah let's do right here so
249:22 - we'll do case when sold as vacant is
249:28 - equal to yes all we want to do is say
249:33 - then we want to make it
249:36 - no oh
249:38 - won't make a yes what am I doing geez
249:41 - I'm losing it when and I'm just oops
249:44 - oops oops oops ignore that pretend that
249:46 - didn't
249:47 - happen
249:50 - when sold as vacant is equal to
249:54 - n
249:56 - then
249:58 - no and then else we want to say if it's
250:01 - already if it's not one of those values
250:03 - it means it's already a yes or no so
250:04 - we're just going to say just keep it as
250:07 - sold as vacant and then we'll end it so
250:11 - let's take a
250:12 - look okay so let's scroll through here
250:16 - and see if we get any that we can see oh
250:19 - I just went byy some didn't
250:21 - I oh I just went buy some I know I
250:24 - did um let's see okay here we go so
250:28 - here's an N it's now a no so this this
250:31 - sold as vacant as this column the newly
250:33 - uh the case statement right here is
250:35 - changing it so the N is no so this
250:38 - should work all and this will be a
250:41 - unique update statement um and I hope it
250:43 - works unlike the first update statement
250:45 - that we we did that was a that was a
250:48 - travesty um let's do update Nashville
250:53 - housing um and we'll
250:56 - say
250:57 - set sorry I'm talking faster than I'm
251:01 - going set sold as vacant equal to and we
251:04 - can just literally put in this case
251:05 - statement um it's not but let's try
251:09 - it okay now let's go look at this again
251:11 - and see if it made the update there we
251:14 - go the update statement worked oh
251:16 - fantastic it's a beautiful
251:18 - thing okay great I'm glad that one
251:21 - worked I was worried for a second that
251:23 - uh my update had broken in um in SQL
251:28 - Server now now we're going to do
251:30 - something um these next two things is
251:31 - we're going to remove the duplicates and
251:32 - then we're going to get rid of unused
251:34 - columns um this removing duplicate I got
251:38 - to be honest I don't do it a ton in SQL
251:40 - but I have done it um especially for
251:43 - like
251:44 - queries you know when I'm looking at
251:47 - full tables I I will write some sort of
251:49 - temp table and like put the remove
251:51 - duplicates in there I normally don't
251:53 - delete actual data we are we're going to
251:56 - do that um but it's not a standard
251:58 - practice to delete data that's in um
252:00 - that's in your database so just for
252:03 - future purposes don't blame me if you
252:05 - delete all the all the duplicates back
252:07 - accident in your uh table at work so you
252:11 - can do this a few different ways but the
252:12 - way I'm going to show you is we're going
252:14 - to write a
252:15 - CTE and we're going to do some windows
252:17 - functions to find where there are
252:21 - duplicate values okay so excuse me so
252:26 - let's start writing out our CTE and or
252:30 - you know even we can write out the query
252:33 - first then put it into a CTE that might
252:35 - be a little bit better so let's do
252:38 - select everything and oh my gosh I was
252:41 - about to do it somebody's out there just
252:45 - like waiting for me to make that mistake
252:48 - again so we want to partition our
252:54 - data um when you're doing removing
252:57 - duplicates we're going to have duplicate
252:59 - rows and we need to be able to have a
253:01 - way to identify those rows right so you
253:04 - can use things like rank order rank
253:07 - um row number there are a few different
253:09 - options we're going to be using row
253:11 - number um and you know if you want to
253:14 - look into how Rank and rank uh like
253:17 - dense Rank and all those ones work
253:19 - please do that so you know why we're
253:20 - doing it um but we're using row number
253:22 - because it's the I think the simplest um
253:24 - and it's going to do what we need
253:26 - exactly so I'm going to get this over
253:29 - here we'll say select everything because
253:31 - we're selecting everything then we're
253:32 - going to add this row number on here so
253:35 - row number and we're going to do these
253:37 - parenthesis right here we're going to
253:38 - say over and an open parentheses now we
253:41 - need to write our partition because
253:43 - we're going to partition this data so
253:45 - we're going to say um
253:49 - Partition by cool um now really quickly
253:54 - while we're here we need to actually
253:56 - know what we're partitioning on that's
253:58 - helpful so let me write this so while
254:00 - we're writing it we can see what we're
254:02 - doing we need to partition it on things
254:05 - that should be unique
254:08 - um
254:10 - two basically to each row um if in I
254:15 - guess for the sake of what we're doing
254:17 - we're we're going to pretend this unique
254:18 - ID isn't here um although you know you
254:21 - could say I'm cheating it doesn't matter
254:22 - but I'm going to say you know if things
254:25 - like the parcel ID are the same if the
254:28 - sale date is the same um the property
254:32 - address is the same the sales price is
254:35 - the same This legal reference which I'm
254:37 - guessing is some type of legal document
254:39 - saying it's like somebody's uh property
254:41 - if all of those are the exact same then
254:44 - to me that is the same data it's it's
254:47 - unusable just for example I mean this
254:49 - may I don't I mean this data is just
254:51 - some random data set I found online
254:52 - right so that's what we're going to be
254:54 - going with that's what we're going to be
254:55 - running with and pretend that lie that I
254:57 - just told you is completely true so what
254:59 - we want to Partition by let's start with
255:02 - the
255:03 - parcel um can I is this not right here
255:08 - why is it saying this why is it not
255:09 - giving
255:10 - me okay doesn't even matter I'm just
255:13 - going to say parcel
255:15 - ID um we can
255:18 - say
255:20 - property we'll do a property address
255:23 - stick with me we're getting somewhere
255:24 - we'll do sale
255:27 - price um what do we say sale date I mean
255:32 - there shouldn't be two of this they
255:33 - didn't sell twice on the same day come
255:35 - on and then legal
255:39 - reference
255:41 - and oh I know why it's not working or my
255:44 - autocomplete isn't working which I love
255:48 - um it's because we're creating our own
255:51 - partition so it's its own column of
255:53 - course I don't know why I'm it's late as
255:56 - you can see down here it's 11:15 it's
255:59 - getting late for me but hey I I this is
256:02 - an adrenaline rush for me um now we need
256:05 - to order it now we want to order it on
256:07 - something that should
256:08 - be um not necessar I guess unique so
256:13 - we're going to order it on this unique
256:14 - ID we'll see if that actually does what
256:16 - we want it to do um oops what am I doing
256:19 - order bu come on and we'll say uh
256:24 - unique oops unique ID perfect and we
256:30 - should be able to close that off and
256:32 - we're going to call this R num I mean
256:33 - that's just that just makes sense so now
256:36 - we have this and let's run this really
256:39 - quick and see what happens so um and
256:43 - maybe we should order this as well but
256:46 - we'll maybe we'll do that
256:48 - later yeah let's order this on parcel
256:53 - ID um order by parcel ID let's just see
256:57 - what happens because this I think that
256:59 - should be pretty
257:02 - accurate um let's scroll down and see if
257:04 - we get
257:05 - any this is all
257:08 - ones maybe should be doing it on unique
257:11 - ID I don't know let's see if we get any
257:13 - hits okay there's a two in
257:16 - there let's let's look at this really
257:18 - quick because I want to see
257:20 - it maybe I did something wrong I don't
257:23 - know it is absolutely
257:27 - possible somebody play some Jeopardy
257:29 - music for me real
257:31 - quick yeah I don't know I don't know why
257:34 - it's um okay so let's see let's let's
257:36 - look at these
257:38 - two um and let's see if I
257:41 - did something wrong
257:45 - oops don't need to pull that
257:48 - up I was doing some research when I when
257:50 - that convert by wasn't working um okay
257:54 - so this one and this one it's giving
257:56 - different row
257:58 - numbers so let's look at the actual data
258:00 - ignore the unique ID but the data itself
258:04 - so the the sale date is the same the
258:06 - sale price is the same the legal
258:09 - reference is the same the owner is the
258:13 - same this is the
258:15 - same I mean literally every single thing
258:19 - in here is the same so this is a good
258:21 - example so we're going to in this query
258:24 - that we're about to write that that will
258:26 - be that second one will be deleted
258:27 - because we don't need it now there
258:29 - there's only one so it looks like this
258:32 - is working as intended um I can also
258:35 - do um
258:37 - let's do where rowcor num is greater
258:42 - than one let's see if that I don't think
258:45 - it will work
258:46 - actually yeah that's because uh it is
258:50 - that is in a Windows function of course
258:52 - we can't do that what am I thinking
258:53 - that's why we need to put it into a
258:55 - CTE oh of course it all comes back so
258:59 - let's call this all comes back to the CT
259:01 - those things are amazing um let's call
259:04 - this um row num
259:07 - num
259:09 - CTE and we'll say as and then open
259:13 - parentheses and I don't think we can
259:16 - have an order by in here let's do it
259:18 - like this and let's just do select
259:22 - everything from row number
259:25 - CTE so again if you haven't watched my
259:28 - like CTE CTE video or you've never used
259:31 - a CTE before um this is now basically
259:33 - almost like a temp table so we're going
259:35 - to be able to this query down here is
259:36 - querying off of this table that we quote
259:39 - unquote
259:40 - created so um it looks like it's working
259:44 - so all we're going to do is select um
259:47 - everything from that and we want to say
259:52 - where row num because that's now a row
259:55 - is greater than one and let's order that
260:00 - by I don't know property address let's
260:02 - see if that
260:03 - works and let's see what happens
260:08 - okay so all of these are duplicates we
260:11 - have 104 of them it looks like so
260:13 - there's not many but it there's twos any
260:17 - threes no no threes so there's multiple
260:21 - of these rows or columns that are
260:24 - basically duplicates um and we want to
260:26 - delete them so all we're going to say is
260:30 - we're going to select instead of saying
260:32 - select everything from row we're just
260:34 - going to say delete
260:38 - and uh yeah I got to get rid of that
260:40 - order bu that doesn't work and let's do
260:44 - this there's 104 let's see if it worked
260:47 - um so now let's do let's go back and
260:50 - we'll say select everything and let's
260:52 - see if there's any more duplicates in
260:53 - there there are none that is fantastic
260:56 - every I'm like biting my nails now to
260:58 - see if each one of these Works um
261:00 - because I that first one didn't work um
261:04 - so yeah so it worked we got rid of the
261:06 - duplicates that is fantastic um and now
261:08 - it's smooth sailing from here because
261:09 - we're just going to delete some um
261:12 - unused columns that we don't care about
261:14 - this doesn't happen often um this I
261:18 - would say actually happens more in like
261:20 - views when I'm creating views I have a
261:22 - view and I'm like oh I didn't mean to
261:23 - add that column let me just remove it
261:25 - because it's a I don't need it you don't
261:28 - do this to um like the raw data that you
261:31 - import usually this is I mean again best
261:34 - practices please don't do this to your
261:35 - raw data that comes into your database
261:38 - um talk to somebody before you do this
261:40 - that's just my my legal advice for the
261:42 - day I'm not legally bound or legally
261:44 - held responsible for any mistakes you
261:45 - make so let's keep going um we're
261:48 - literally just going to delete some
261:49 - columns it could be any columns that we
261:51 - want um but for example we got have
261:56 - these property split address and owner
261:58 - split address um in city and state and
262:00 - city and these are perfect and much more
262:03 - useful than these owner um these owner
262:06 - address because this is really unusable
262:09 - to be honest so we're going to delete
262:11 - those um and maybe we'll also get rid of
262:13 - like I don't know maybe the land that
262:14 - land use might be useful this tax tax
262:17 - District who cares about that um so it's
262:19 - going to be super easy we're just going
262:20 - to write alter table alter table did I
262:24 - say that right
262:26 - geez um and we're going to say alter
262:30 - this
262:31 - table and we're going to
262:34 - drop a column and you can do as many as
262:37 - many as we want so we're going to say
262:40 - owner um
262:42 - address we're going to do tax
262:48 - district and let's also do the property
262:55 - address all right and let's try this and
262:59 - let's see if it
263:01 - works I'm
263:05 - nervous all right so as you can see that
263:08 - the property address is gone the owner
263:10 - address is gone the tax what was it tax
263:13 - district is gone and now we are left
263:16 - with this um now remember the whole
263:18 - point of everything we were doing was to
263:20 - clean up the data right we wanted to
263:23 - clean the data and actually now well now
263:25 - that we're here we have this sale date
263:27 - as well U and we have the sale date
263:29 - converted over here let's get rid I
263:31 - forgot let's get rid of this oh that was
263:33 - my dog Max excuse them let's get rid of
263:37 - oops let's get rid of that sale price
263:39 - that that or the um sale date that made
263:41 - me look like an idiot this is Sweet
263:44 - Revenge sale
263:45 - date Sweet Sweet
263:49 - Revenge all right and it is gone so it's
263:52 - as easy as that now remember like I was
263:55 - saying before the whole point of this
263:56 - project is to clean the data and make it
263:59 - more usable um and it may not have felt
264:02 - like that as we were going through cuz I
264:04 - wasn't you know really looking at the
264:05 - clean cleaning data uh uh we were
264:09 - cleaning it but you know what was the
264:11 - purpose of it I may not have highlighted
264:13 - that too much all these other columns
264:16 - that we created um are just it's much
264:18 - more usable much more friendly um this
264:21 - is standardized now and you know we we
264:26 - did that through quite a few various
264:29 - methods um so let's go back up the top
264:32 - we're going to recap what we did really
264:34 - quick so using this convert we tried to
264:38 - standardize the date format or change
264:39 - the date format may or may not have
264:40 - worked for you didn't work for me we
264:42 - populated this property address um which
264:47 - we did that
264:48 - before we broke this out because if we
264:51 - reversed it if we broke these addresses
264:53 - out into individual columns and then we
264:56 - populated the this thing um we would
264:59 - have because then we went and
265:01 - deleted uh we went and deleted this
265:03 - column oops sorry we went and deleted uh
265:07 - this property address so we wouldn't
265:09 - have actually gotten any of that data so
265:10 - there was a reason it was in that order
265:12 - uh don't mess that up that's happened um
265:15 - so we broke it out we did that to to
265:17 - using um substring chart index as well
265:20 - as parse name and
265:22 - replace then we went through and we
265:25 - changed yes to no or Y and n's to yeses
265:27 - and NOS using case
265:30 - statements um then we use we removed
265:32 - duplicates using a row number a c te and
265:36 - windows function of Partition by and
265:39 - then at the end we deleted a few useless
265:41 - columns that we no longer want to see
265:42 - because um they are horrible and
265:45 - terrible and um you know we don't want
265:48 - to see them anymore that is the entire
265:51 - project that was everything and you did
265:54 - it and I'm honestly super proud of you
265:56 - for sticking around this long it this
265:59 - this was not necessarily an easy project
266:01 - we used quite a few new things that I
266:03 - may have not talked about or showed you
266:05 - before this to me is just the beginning
266:09 - right this is just a a glimpse into all
266:11 - the things that you need to do you need
266:13 - to look for um in order to clean data so
266:17 - you know I really do think this is a
266:19 - good portfolio project because it will
266:21 - show that you understand and know how to
266:24 - clean the data although this is not an
266:26 - end to-end project right that could that
266:27 - would take a long time and a lot more
266:30 - exploratory analysis looking into the
266:32 - data to to figure out what we need to
266:35 - change but for all intents and purposes
266:37 - I mean this is a a pretty good project
266:40 - for cleaning data and I hope that you
266:41 - learned something I also hope that you
266:43 - worked on this hard um if you want to
266:45 - make any improvements please do that
266:48 - this is not perfect by any means there's
266:50 - other things that you could change um
266:52 - you could you know I don't even know I'm
266:55 - not even going to try to guess you could
266:56 - do other things to this data though um
266:58 - and and create your own queries create
267:00 - your own um data cleaning uh part of
267:04 - this and so um you do that if you were
267:07 - able to get this um the ETL part of it
267:10 - done do that I think it'd be really
267:12 - really cool um again I was able to get
267:15 - it to work but I don't think 90% of
267:17 - people out there would be able to get it
267:19 - to work um it's just every computer is
267:22 - different every server is configured
267:24 - differently um and so it would just be a
267:27 - huge pain so I decided to cut that out
267:29 - and I'm sorry um but hopefully this will
267:32 - suffice um with that being said this is
267:35 - it you made it all the way to the end
267:37 - again I'm super proud you guys are doing
267:39 - fantastic you guys are the ones putting
267:41 - in the hard work to build the portfolio
267:43 - for your future job I mean it's not easy
267:46 - but you're putting in the work and so
267:48 - and so kudos to you um in our next video
267:51 - we're going to be going into python for
267:53 - the very first time really excited about
267:55 - that one because um I think the only
267:58 - python video that I have up right now is
267:59 - on one where I was scraping data from
268:01 - Twitter so um you know this will be a
268:04 - nice change a pace or a little bit
268:07 - different content than I normally put
268:08 - out and so I'm really excited about it
268:10 - and I hope you are as well with that
268:13 - being said I am done with the video I'm
268:16 - going to be stopping it soon thank you
268:17 - for joining me if you like this video be
268:19 - sure to subscribe be sure to like this
268:22 - video leave a comment below um telling
268:25 - me how it changed your life uh and I
268:28 - will see you in the next video
268:31 - [Music]
268:34 - goodbye
268:36 - [Music]
268:42 - what's going on everybody today we are
268:43 - starting our Excel tutorial
268:46 - [Music]
268:50 - series now there are so many things that
268:52 - you can do in Excel so I don't know how
268:54 - long this series is going to be it could
268:56 - be 15 or even 20 videos but what I do
268:58 - know is that I'm going to be covering
269:00 - just about every single thing that I've
269:01 - used since I became a data analyst and I
269:03 - want to show you how to do it uh so
269:05 - won't just be the more concrete things
269:07 - um you know like pivot tables charts V
269:10 - lookups things like that it'll also be
269:11 - some of the more nuanced things like how
269:13 - to deal with missing data or how to deal
269:15 - with dirty data and how to clean that up
269:17 - within Excel and so those are things
269:19 - that you may not be able to do you know
269:21 - if somebody wasn't showing you how to do
269:22 - it and so that's what I'm going to try
269:24 - to help you because I know that that is
269:26 - something that you will need to do or
269:27 - learn how to do in Excel now before we
269:30 - get into it I want to give a huge shout
269:31 - out to the sponsor of this Excel series
269:33 - and that is udem me I took so many Excel
269:35 - courses on you to me when I was first
269:36 - starting out as a data analyst and there
269:38 - was this one course that I kept going
269:40 - back to over and over again because as I
269:42 - got into it in my job I realized that
269:44 - there were so many things that were in
269:46 - that course that I really needed to know
269:48 - but I didn't realize I needed to know it
269:51 - and so I'm going to put the links to
269:52 - those courses in the description in case
269:53 - you want to take those again huge shout
269:55 - out to you to me without further Ado
269:57 - let's jump on my screen and get started
269:58 - with our very first Excel tutorial all
269:59 - right so I'm going to go ahead and get
270:00 - rid of myself we are going to be looking
270:02 - at something absolutely pivotal in your
270:04 - data analytics career and that is Pivot
270:06 - tables uh and I think that's really
270:08 - appropriate it is probably one of the
270:10 - most commonly used things I think that
270:13 - data analysts use to convey information
270:15 - in Excel it's super easy to group things
270:17 - together to display information in a
270:19 - very easily understandable way
270:22 - especially for people who are not data
270:25 - analysts right I use this a lot for
270:26 - other managers or for higher-ups um who
270:29 - don't want to get into SQL or or you
270:31 - know aren't super text savy in like
270:33 - python or Tableau they just want it in
270:35 - an except sell and so I use it all the
270:37 - time for that reason and so we're going
270:39 - to be using this data set right here
270:41 - bike store sales in Europe I will
270:42 - include this link in the description um
270:44 - we're not going to look at the columns
270:45 - just yet we're going to download it um
270:47 - I've already downloaded it a few times
270:50 - but we are going to go
270:52 - to um our downloads we're going to open
270:55 - it up and we're going to open up this
270:57 - sales right
270:59 - here and give it a
271:01 - second all right perfect and so here's
271:04 - what it looks like uh at least on my
271:06 - screen I'm going to uh spread it out
271:08 - just a little
271:09 - bit um and really quickly let's take a
271:12 - very quick glance at this so we have a
271:15 - date a day a month a year so some um
271:18 - some date
271:20 - information um then we have some
271:22 - customer age information so how old was
271:25 - the customer again this is bike sales so
271:28 - what did um you know what did they buy
271:31 - and they have some demographic
271:32 - information so this is their age group
271:34 - we have uh the gender country State the
271:38 - product category the subcategory the
271:41 - actual product that was purchased and
271:43 - then we have things like um you know how
271:46 - much these things cost the quantity that
271:48 - was that was ordered so we have order
271:50 - Quant quantity unit cost unit price then
271:53 - we have the profit cost and revenue all
271:56 - things that we almost everything in here
271:59 - we can in some way put into a pivot
272:02 - table now I'm not going to go through
272:03 - every single variation of that but we
272:05 - are going to be um looking at a lot of
272:08 - this um Revenue over here because I
272:10 - think it's it's pretty easy to show the
272:12 - value of a pivot table with especially
272:14 - with um you know currency or money so
272:18 - what we're going to do to get started is
272:20 - we're going to go up to insert and we're
272:23 - going to click on insert and then we are
272:24 - going to click on pivot table now really
272:26 - quick there is a recommended pivot
272:28 - tables and if you click on that what
272:30 - will come up is some recommendations
272:32 - that Excel gives based on the data that
272:34 - you have um and it can kind of give you
272:37 - some ideas of of what you can do with
272:40 - pivot tables it's going to generate it
272:42 - for you we're not going to do that we're
272:43 - going to build our
272:45 - own uh but let's click on pivot table
272:48 - and it's going to Auto Select basically
272:51 - everything and that's fantastic um but
272:53 - what if it doesn't come like that I I
272:55 - just erase that if it doesn't come like
272:57 - that you can click right here you can
272:59 - cck excuse me you can click control
273:02 - shift and then the right arrow and then
273:04 - the down arrow and is going to select
273:06 - all of our data um and you have right
273:08 - here a new worksheet or an existing
273:10 - worksheet we're going to create a new
273:12 - worksheet just tends to get too clogged
273:14 - up if we put it on the same worksheet
273:16 - that already has a lot of data in it so
273:19 - right over here are pivot table fields
273:22 - and these are all of our columns that we
273:23 - just looked at and we're going to be
273:25 - able to select those and kind of drag
273:27 - and drop now if you just took the
273:29 - Tableau um tutorial series that I just
273:32 - finished doing last week then this is
273:34 - going to be pretty pretty familiar um
273:37 - you're going to start seeing a little
273:38 - bit of um hopefully some patterns about
273:42 - how the data is kind of displayed and so
273:44 - we have our filters down here we have
273:46 - columns rows
273:48 - values all these things uh we will be
273:51 - using I'll show you how to use today as
273:53 - well as some additional things um one
273:56 - thing that we want to start with uh for
273:58 - this demonstration is we're going to be
274:00 - looking at kind of the um these bottom
274:02 - ones right here profit cost and Revenue
274:05 - and we're going to be doing that per
274:07 - country uh per country and state and
274:09 - we'll kind of do some drill Downs um and
274:12 - I'll show you how those work so for just
274:14 - to start out we're going to take the
274:15 - country right here and you'll see it
274:18 - populate right over here in fact um let
274:20 - me zoom in maybe once uh yeah that
274:24 - should be fine I don't know if I want I
274:25 - might zoom in it again in just a little
274:27 - bit um so we have our country and and
274:29 - it's just like this very very simple
274:32 - oops um now I'm going to include the
274:34 - state now I'm going to drag this um all
274:37 - the way and I'm going to put it under
274:38 - you can put it above or you can put it
274:39 - below I'm going to put it
274:41 - below uh it definitely makes the most
274:43 - sense there now when you do that it it
274:48 - um kind of populates it in an expanded
274:50 - way but you can collapse this very
274:53 - easily we're going to go right here
274:54 - we're going to right click we're going
274:56 - to go go down to expand and collapse and
274:58 - we're going to collapse the entire field
275:00 - and so now here are all of our um all of
275:03 - our countries as they were before now
275:05 - each of them has this plus sign to the
275:07 - left and if you click on it now we can
275:09 - go and we see this state that we that we
275:11 - added to these rows and what this is
275:14 - going to do is it kind of is like a
275:15 - rollup or it's like a grouping um and so
275:18 - if you you know have taken the SQL um
275:21 - tutorial series and you've done things
275:23 - with Group by this is very similar to
275:26 - that um and if you've done the Tableau
275:29 - tutorial series it's kind of like a
275:31 - drill down it's very very similar so you
275:34 - can drill into the information so we um
275:36 - can put some values in here uh and what
275:40 - we're what that's going to do is that's
275:42 - going to kind of create some some
275:44 - context to what this what we're grouping
275:46 - by so just for um visual purposes let's
275:51 - add this Revenue so this is the revenue
275:54 - that is bike uh bike sales revenue right
275:57 - that's what we're looking at so this is
275:59 - the sum of the revenue for these bike
276:03 - sales per country now if we drop down
276:06 - right here we can see that in Australia
276:09 - uh New South Wales had uh 92 was that
276:15 - 9,234 N5 Queensland had 5 million you
276:19 - know etc etc so now we can break it down
276:22 - we can't it's we don't just have to look
276:24 - at Australia we can now drill down even
276:26 - further to the actual state is what
276:29 - they're calling it um the actual state
276:31 - within Australia and so it's super super
276:34 - useful and you can do that for every
276:35 - single one and so we can look at Canada
276:38 - we can look at France and we can really
276:39 - drill down into uh the revenue for each
276:42 - of these countries as well as the states
276:45 - within them now over here this is not
276:48 - the most uh pretty um it just says sum
276:51 - of Revenue and then it has some numbers
276:54 - not not the most pretty thing I've ever
276:55 - seen um really quick we can go like we
276:58 - can um kind of highlight over these and
277:01 - we can go back to home you can do it in
277:02 - a couple different ways we can go to
277:03 - home and will type currency now it has
277:07 - these two. Z at the end you can get rid
277:09 - of those really easily by going like
277:11 - that um already this looks quite a bit
277:14 - better just visually um especially if
277:16 - you're looking at it in uh you know
277:18 - dollars you can change the currency um
277:21 - to different currencies if you want to
277:23 - do that now we don't just have to do uh
277:27 - the sum of Revenue we can do a lot of
277:30 - different things so let's go to the
277:31 - value field settings so we can customize
277:34 - this name so we can do um Revenue oops
277:40 - good if I get spell Revenue per
277:44 - country that's fine that you know it's
277:47 - just a placeholder trying to show you
277:49 - but we don't have to just do that um you
277:51 - know we could do the count the average
277:53 - the max the Min we can do just about
277:55 - anything we want um but let's keep it
277:58 - the sum right now um and if we want to
278:04 - we can show this value as different
278:06 - things so we percentage the percentage
278:09 - of column total percentage of row total
278:11 - let's do really quick just for
278:12 - demonstration purposes the percentage of
278:14 - grand total so when we do that we can
278:17 - see that the United States the per
278:20 - Revenue per country United States has
278:23 - 32% just between these um you know these
278:27 - countries and Australia has the next one
278:30 - so you know it might be kind of hard to
278:32 - glance at this really quickly to know
278:34 - who has the highest um but what we can
278:37 - do is we can go right here and we can go
278:39 - to sort and we can do largest to
278:41 - smallest and there we have the United
278:44 - States on top now when you do it right
278:46 - here it's not sorted largest uh to
278:49 - smallest you'd have to go in again click
278:51 - sort and do largest to smallest and so
278:54 - now we can see that California has the
278:56 - has the um you know biggest percentage
278:59 - they're pulling in 20% of that 32% of
279:02 - Revenue so I'm just going to click C
279:04 - control z a few times and get us back to
279:07 - where we just were um and what I want to
279:11 - do is I want to show you a few different
279:13 - things uh pretty quickly so we want to
279:16 - pull in this profit and this cost uh and
279:19 - so I'm going to pull in this cost next
279:21 - and then I'm going to pull in this
279:23 - profit again uh I'm going to
279:26 - change the currency on
279:29 - this and I'm not going to change the
279:31 - names um right now but you know you
279:34 - absolutely can do that now the revenue
279:37 - is the how much is actually being sold
279:40 - so you know for the United States it was
279:42 - 27 million now the cost is how much did
279:46 - it cost to manufacture or or store um or
279:50 - distribute all of these products so that
279:52 - was 60 million and the profit is
279:54 - actually how much money is being made at
279:57 - the end of the day after um you know all
280:00 - their costs after all their employee
280:02 - costs after everything they're still
280:03 - making the United States is still making
280:05 - $1
280:06 - million now you might look at this and
280:09 - you might say well you know I can kind
280:11 - of glance at it and say know that this
280:13 - profit is correct based off these two
280:15 - numbers um but we can do a calculated
280:19 - field um if you remember what calculated
280:21 - fields are that's something from Tableau
280:23 - very uh basically the exact same thing
280:26 - and so we can create an additional
280:28 - column right here that is a calculated
280:29 - field that can add and subtract these
280:31 - things to make sure that our numbers are
280:33 - adding up correctly
280:35 - so let's do that really quickly U let's
280:38 - go to pivot table analyze we're going to
280:41 - go over to Fields items and sets and go
280:43 - to calculated field now we can name this
280:46 - anything um and I'm just going to for
280:49 - demo purposes I'm going to say um oops
280:53 - calculated field demo uh I'm sure yours
280:57 - will be different now um if you want to
281:01 - you can go in here and this is the
281:02 - formula it's almost like um you know we
281:04 - haven't looked at formulas up this is
281:06 - our first tutorial but you know when we
281:07 - look at formulas it's basically the same
281:09 - thing as writing it if inside of a cell
281:12 - but here it gives us kind of this um
281:14 - open text to do how we uh do what we
281:17 - want with it now what we're going to do
281:20 - is we're going to do Revenue I'm going
281:22 - to insert that I'm going to get rid of
281:25 - this I'm going to do revenue and so
281:28 - that's the the the very large number and
281:31 - then we're going to
281:32 - subtract and we're going to sub subract
281:35 - our cost we going to insert that and
281:39 - let's do this and click okay so this is
281:42 - our calculated field demo column that we
281:45 - just created and as you can see it
281:47 - matches our uh sum of profit column
281:50 - exactly and that's exactly what we want
281:52 - to see we want to kind of check to make
281:54 - sure that this revenue and cost uh
281:56 - fields are generating the correct profit
281:59 - and sometimes those are off and so it's
282:00 - really good to kind of check those and
282:02 - have that additional column um You
282:04 - probably wouldn't have this if you were
282:06 - um you know going to submit this to
282:08 - somebody uh just so you know now that
282:10 - this is an actual column you can't go
282:12 - here and do something like cut or and
282:16 - paste it over here you know that's not
282:18 - it won't let you do that what it is is
282:20 - is now an actual um column and so we can
282:23 - go and remove that and we can add it
282:25 - back at any moment so if we want to go
282:27 - back and add that um oops add that down
282:30 - here we can do that because we've
282:32 - created that column it's now permanently
282:34 - there unless we go and delete all of
282:37 - that data uh and so we can just click
282:39 - this check mark and it will get rid of
282:40 - it for us all right now the last thing
282:42 - that we have not used down here is the
282:44 - filters now the filters is exactly what
282:47 - it sounds like it's going to allow you
282:49 - to filter on certain things um but
282:52 - probably not things that you already
282:54 - have included in your pivot table so if
282:57 - you add something like the country down
282:59 - here um it's going to kind of expand
283:02 - everything and then if you then go and
283:04 - filter on it it kind of breaks it down
283:08 - that's really not what the filter is
283:10 - kind of used for or meant for um for
283:13 - example right up here we have uh
283:16 - customer gender okay so let's take the
283:18 - customer gender and we'll put it in this
283:19 - filters now we can see all of the
283:22 - revenue all of the cost all the profit
283:25 - and we can do that based off of the
283:27 - gender so we can filter by a gender not
283:30 - really having to change anything about
283:32 - our pivot table and so at a super Quick
283:34 - Glance we can see that uh the males are
283:39 - the profit from the males is
283:46 - 16.48% so at a super uh basic level at a
283:49 - really quick glance we can see that the
283:51 - men or the males are you know spending a
283:54 - little bit more than the females by
283:57 - about about
283:58 - $700,000 now let's go ahead and create
284:01 - one more pivot table uh we are going to
284:03 - create a pivot table right over here
284:05 - let's go back to the
284:06 - sales right here again control shift
284:10 - right down it's going to select all of
284:12 - our data and we're click okay so one
284:16 - thing that we're going to look at is
284:18 - we're going to use some of this date
284:20 - information right here so let's select
284:22 - our country just like we did before um
284:25 - and what we want to do is see you know
284:27 - what year were we performing our best
284:30 - when were we doing our absolute best uh
284:32 - with oops
284:34 - let me go
284:36 - back uh with our sales so I'm going to
284:39 - select the year and put that in our
284:41 - columns and so now we have 2011 through
284:45 - 2016 and we want to look at our Revenue
284:49 - let's put our Revenue right down here
284:51 - and now we have all of our Revenue now
284:54 - let's again make this into a
284:58 - currency just like that and super
285:01 - quickly now we can get a really quick
285:03 - glance at at how Australia was doing
285:06 - each year and we can see that there was
285:08 - a huge uptick in 2013 and a huge uptick
285:11 - in 2015 it didn't happen for every
285:14 - single country uh it did go up uh for
285:17 - most countries very slightly for some
285:19 - but we can see on a large scale from um
285:23 - year to year what that's like and So
285:26 - within just a few minutes we're able to
285:27 - create some really useful pivot tables
285:30 - that anybody could look at and
285:32 - understand and that's really the biggest
285:33 - use of these PIV pivot tables is that
285:35 - you can kind of group these things
285:36 - together show some uh information and
285:39 - data at at kind of a broad larger scale
285:42 - and make it to where anybody who's
285:43 - looking at it can understand it that is
285:45 - why pivot tables are so useful and so I
285:48 - hope that this video was helpful I hope
285:49 - that I was able to walk through it and
285:51 - help you better understand how pivot
285:52 - tables work and how you can use them
285:54 - when you are working within Excel thank
285:57 - you guys so much for watching I really
285:58 - appreciate it if you like this video be
286:00 - sure to like And subscribe below and
286:02 - I'll see you in the next video
286:04 - [Music]
286:15 - what's going on everybody today we're
286:17 - going to be looking at formulas in
286:19 - [Music]
286:23 - Excel now I know what you're thinking
286:25 - there's absolutely no way that you're
286:27 - going to be able to show us every single
286:29 - formula in Excel and you're absolutely
286:31 - right but I am going to show you some of
286:32 - my favorites and the ones that I found
286:34 - the most useful and then you can go
286:36 - ahead and practice those and try those
286:38 - out and if there are ones that you
286:40 - really want me to do and you think that
286:41 - I missed put it in the comments below
286:44 - and I will see those and I'll try to
286:45 - make a list of those and make another
286:47 - video on formulas and include all of
286:49 - those as well and now before we jump
286:51 - into the actual tutorial I want to give
286:53 - a huge shout out to the sponsor of the
286:54 - series and that is udemy you guys
286:57 - already know if you have watched any of
286:59 - my videos that I absolutely love udem me
287:01 - I mean honestly they were the ones who
287:02 - got me started and were able ble to give
287:04 - me affordable courses for me to get
287:06 - started as a data analyst I learned SQL
287:08 - and Excel and python all through udimi
287:11 - courses and so if you are looking for a
287:12 - platform to take a course I absolutely
287:15 - recommend you look at udemy they have
287:17 - fantastic sales going on right now
287:18 - especially during the holiday season in
287:20 - this new year and so if you're looking
287:22 - to take a full-fledged Excel course I
287:24 - have some of my favorites in the
287:25 - description below and now without
287:26 - further Ado let's jump onto my screen
287:28 - and get started with the tutorial all
287:30 - right now before we start I want to say
287:31 - that this is not like every other
287:33 - tutorial that I have created created
287:34 - this one is very streamlined okay so I
287:37 - already know exactly what I'm going to
287:38 - do there's not going to be much messing
287:40 - around I left little notes here and
287:42 - there um and I'm going to try to get
287:45 - through it because there's a lot of them
287:46 - to get through um so all these ones at
287:48 - the bottom now these are ones that I use
287:50 - a lot that I think are useful again if
287:53 - you know other ones that you use a lot
287:55 - that think that I should be using which
287:56 - I know there are ones that I left out of
287:58 - here you know put it in the comments um
288:00 - I'll see the ones that people are liking
288:01 - and I will I will create more videos on
288:03 - the because I know there are so many I
288:06 - also will save this um excel in on the
288:10 - GitHub so you can go and download it it
288:11 - will be exactly what you're looking at
288:13 - right now I highly recommend trying
288:15 - these formulas out for yourself so you
288:17 - can get a feel for how they work and how
288:18 - they're actually used and you can mess
288:20 - around with it yourself so um as you can
288:23 - see at the bottom we're going to start
288:24 - with Max Min and then we're going to go
288:26 - on to some more I think a little bit
288:28 - more uh difficult things um and all
288:32 - these things are super useful I'll try
288:33 - to talk about how you can actually use
288:35 - it as we go through it some are super
288:37 - self-explanatory but some may not be so
288:41 - this one I think is super
288:41 - self-explanatory but again one that
288:43 - you're going to use all the time um and
288:46 - so what we can do is we can say equal
288:49 - and that's how you kind of start off
288:50 - saying this is going to be a formula in
288:52 - this cell equal means uh I am now
288:54 - creating a formula and we're going to
288:56 - say
288:57 - MX and I'll hit Tab and so it'll kind of
289:00 - populate it and right here if you've
289:02 - never seen a formula before it'll to
289:04 - give you what the inputs need to be so
289:06 - it's going to say Max of number one
289:08 - number two etc etc what we're going to
289:10 - do is we're going to give a range so
289:12 - we're going to go from here down to here
289:14 - you don't have to close the parenthesis
289:16 - but you can I'm going to and then you
289:18 - hit enter and so for this date it's
289:21 - going to give us the max date now these
289:23 - are um the start dates for these people
289:26 - right here and so if we just kind of
289:28 - glance through here we can see that 2013
289:31 - was the last year and this one is
289:33 - actually the latest in that year and so
289:35 - it gave us the correct one the Min is
289:37 - going to do the exact opposite it's
289:40 - going to give us uh the smallest and so
289:42 - we'll give it the same range we'll close
289:44 - the parenthesis and it's going to say
289:47 - December 7th of 1995 and we can see that
289:50 - that is correct so Michael Scott started
289:53 - in 1995 the earliest of all the
289:55 - employees um and you can do the exact
289:57 - same thing for really any of these
289:59 - columns we can see who the who's making
290:02 - the most money or at least what the
290:04 - higher salary is U so we'll do Max and
290:08 - then we'll do the salary range and so
290:11 - this is this one again uh whoops what
290:13 - did I do oh I did the wrong range didn't
290:16 - I no I didn't do the wrong range it's
290:19 - just there it goes uh this column was a
290:24 - date range or a date column for whatever
290:25 - reason let me get rid of that uh and
290:28 - then we can do equals Min and we'll do
290:32 - again we'll do the salary and at a quick
290:34 - glance we can see that Pam Beasley is
290:36 - making the least and 65,000 is Michael
290:41 - Scott who's making uh that so super
290:44 - simple it shows the max it shows the Min
290:46 - you can select a range there you go
290:48 - let's move on to if and ifs now if is um
290:53 - I think pretty straightforward so all
290:55 - you're going to do is you're going to
290:56 - say if this then that um ifs is a little
291:01 - bit different so ifs is you can you can
291:03 - put multiple conditions and as we're
291:05 - writing it I'll show you kind of what it
291:08 - the conditions that need to be met all
291:10 - right so we're going to click right here
291:11 - we're going to say equal we're going to
291:12 - do if hit Tab and we need a logical test
291:16 - uh and so we're going to give it a range
291:18 - or or or something we're going to say if
291:19 - it's equal greater to um something like
291:22 - that then we're going to say if the
291:23 - value is true what's the what is going
291:25 - to be the output or if the value is
291:27 - false what's going to be the output so
291:29 - let's do this right
291:32 - here we'll do this age range and so if
291:35 - they are greater than let's say let's do
291:40 - 30 if they're greater than 30 we're
291:43 - going to do a comma and so if the value
291:45 - is true what what should be the output
291:47 - uh if they're greater than 30 we're
291:48 - going to call them old and then if it is
291:52 - false so if they're younger than 30 what
291:55 - should it say and we're going to say
291:59 - young and we'll close the
292:01 - parenthesis and there you go so if
292:04 - they're over 30 then they are going to
292:06 - have young or if they're younger than 30
292:09 - they're going to have young now this is
292:11 - something where you need to specify if
292:13 - you want 30 and over or over 30 we chose
292:16 - over 30 so 30 is not included in that um
292:20 - so they're going to be
292:22 - young now uh let's get we don't actually
292:25 - need two of these that's pretty
292:26 - self-explanatory the ifs is a little bit
292:28 - different right you can have multiple
292:30 - conditions so let's open that up real
292:32 - quick so ifs and now we have a logical
292:36 - test value if uh that's true then you
292:40 - can do logical test two value if that's
292:42 - true um so you can have multiple
292:45 - multiple multiple things now this one is
292:47 - a little bit different in this one oops
292:50 - let me get out of this in this one you
292:53 - had a value of true a value of false ifs
292:56 - does not have that ifs is going to give
292:59 - you um different ranges in different
293:02 - specific conditions
293:04 - and you can't say if this one's false
293:06 - you're just going to have multiple
293:07 - conditions so let's do equals and ifs
293:11 - Tab and we'll do our first logical test
293:14 - so let's
293:15 - do
293:16 - um if the
293:19 - salesman or if that equals to
293:24 - salesman we're going to say we're going
293:27 - to respond with
293:30 - sales so that's if the value is true
293:33 - that's what we want the output to be now
293:35 - we're going to go on to our logical test
293:37 - two so you're going to see this pattern
293:39 - right if this is our conditional or
293:42 - logical test so if this is true this is
293:45 - what's going to be returned so you'll
293:47 - notice that's just a a pretty simple
293:48 - pattern we can just do random things so
293:51 - if it's equal to sales um and we'll just
293:54 - do the same one if that is equal
293:58 - to say HR we can say fire
294:05 - immediately and now we're going to
294:07 - say if it's equal
294:13 - to
294:16 - regional
294:18 - manager and we
294:20 - say give
294:23 - Christmas bonus and we'll close the
294:25 - parenthesis and let's see what we get so
294:29 - as you can see there's no default value
294:31 - for true or false like like this one
294:34 - there was a logical test and if it was
294:37 - true there was a value and if it was
294:38 - false there was a value so for every
294:40 - single one you'll get a value for this
294:42 - one that's not exactly going to happen
294:44 - as you can see there are these
294:45 - Nas now when that happens it just means
294:48 - nothing met that condition so we never
294:50 - said anything about supplier relations
294:52 - we never said anything about accountants
294:55 - but if it was part of that ifs statement
294:57 - then it got something um and so that is
295:00 - how the ifs works now let's move on to
295:04 - length uh this is exactly what we're
295:06 - going to do but you know some of the
295:08 - uses for this U for the length I've used
295:10 - it for a lot of different things um one
295:13 - thing that I've used it for in the past
295:14 - and you know Max and ifs you know you
295:17 - can use it for almost anything length is
295:20 - there's a lot of different use cases one
295:22 - I used to work with a lot of um customer
295:25 - data or patient data they had like
295:26 - Social Security numbers and if you know
295:28 - there was bad Social Security numbers we
295:30 - didn't want to include that and so we do
295:32 - like the length of that and if a social
295:34 - security number was let's say 10 numbers
295:37 - or 11 numbers where it should only be
295:39 - nine or or you know however many they
295:42 - are I think it's nine then we know that
295:43 - that social security number is incorrect
295:46 - and then we can get rid of that or
295:47 - discard it from our results that's just
295:49 - an example right um so for this oops
295:52 - what I do that I did control Z to undo
295:55 - that if you didn't know how to do that
295:56 - um so we're going to do equals Len which
295:59 - is length um and again if you didn't see
296:02 - that it Returns the number of characters
296:03 - in a text string so let's go right here
296:08 - and let's go to uh let's go to their
296:11 - last name and we'll give it a range so
296:14 - it's going to tell us how many
296:17 - characters are in that string so for
296:19 - halber it's seven characters for
296:21 - flenderson it's 10 characters and we're
296:24 - able to see a length and so again there
296:26 - are a lot of different use cases for
296:28 - this uh the social security number was
296:30 - one another one is phone numbers right
296:32 - if you look at the length of the phone
296:33 - numbers and there's ones that are like
296:35 - 12 numbers long you know those might not
296:38 - be ones that are accurate and you need
296:39 - to go look at them and see if you want
296:41 - to include them in your results or your
296:42 - output so that is how length is done
296:45 - let's move right over to the left and
296:48 - right um I I might be going a little
296:51 - fast but uh you know I'm keeping it I'm
296:53 - keeping it live I'm keeping this on our
296:55 - feet uh so let's keep going left and
296:58 - right um are kind of like substrings if
297:02 - you've taken the the sequel um tutorial
297:04 - series that I've done uh substrings are
297:07 - where you can choose a certain part of
297:09 - the text string and you can extract data
297:11 - from that um and usually have to
297:14 - reference a certain number so a certain
297:15 - amount of characters that's the exact
297:17 - same thing except uh unfortunately
297:20 - there's no substring there's substitute
297:22 - but there's no substring left and right
297:24 - is really the closest thing that we have
297:26 - so let's kind of take a look real quick
297:29 - and see what we can do so we're going to
297:31 - do left and it's going to say Returns
297:33 - the specified number of characters from
297:35 - the start of a text string so we're
297:37 - starting from the very far left and we
297:39 - need to choose our text and then choose
297:41 - the number of characters that we're
297:43 - going to be looking over so let's go
297:46 - over here and let's just choose you know
297:49 - start symol uh we'll get a little bit
297:51 - more advanced so we have um this is our
297:53 - text range so these are the the the ones
297:55 - that we want to look at and then how
297:56 - many characters do we want to look
297:58 - forward and we'll just choose three as
298:00 - an example and so you can see that it
298:03 - takes the first three characters from
298:06 - every single thing now you can also do
298:08 - this with numbers it doesn't just have
298:10 - to be um you know name with with actual
298:13 - words or letters you can do the exact
298:15 - same thing so you can say
298:18 - write um and we're going to choose our
298:20 - our string uh and let's do this one so
298:22 - you know all of them start with 100 um
298:25 - and we'll just say we want to take the
298:27 - last one so this one is going to start
298:30 - from the very far right and go over one
298:32 - character
298:33 - so right here you can see this is our
298:35 - range and I just chose one so starting
298:37 - from the very far right we go over one
298:39 - character and that's what we take and so
298:41 - that can definitely be useful another
298:43 - one that you can do and this one is one
298:44 - that I have used so many times I mean
298:46 - honestly countless times in in actually
298:49 - using this in my job uh so we're going
298:51 - to go from the right and we're going to
298:53 - look at a date so you know sometimes you
298:55 - have these date structures month month
298:58 - day day year year year or year um you
299:01 - know day month year all these different
299:03 - and sometimes you just want to extract
299:06 - either the month or the year or or
299:08 - something like that the day and so we
299:10 - want to come in here we're just going to
299:12 - extract the oops I wanted to make that
299:14 - arrange we want to extract the year of
299:16 - the start dates so we're going to do
299:18 - that and then we're going to go over
299:20 - four so we want to take the first four
299:22 - characters from the right to give us the
299:24 - entire year let's do that and now we can
299:27 - see exactly the year and this can be
299:30 - just super super useful this is again
299:32 - one that I've used used a lot and so
299:33 - that is one that you might want to
299:34 - remember in case you're ever doing
299:36 - analysis on you know start and end dates
299:37 - or or anything with um date data uh
299:41 - again one that I highly recommend
299:43 - remembering let's go over to date to
299:45 - text I actually probably should have
299:47 - included that um before because I
299:50 - actually used it in this one um if you
299:53 - notice right here this is a text so in
299:56 - in this one we just did that was a text
299:58 - you can't do this right on um start and
300:01 - end dates when it's a date uh format and
300:05 - let me show you so this is a date now if
300:08 - I do equals and you know we just did
300:12 - this uh let's do on the end date and
300:16 - I'll do the whole range give me a second
300:18 - and we'll do
300:19 - four it's giving us completely random
300:21 - numbers why is that because underneath
300:23 - the date range there are um numbers
300:27 - right so if I go right here and I make
300:30 - this a general it's going to have the
300:33 - numbers and look these are the first
300:34 - four characters from the right and so
300:36 - it's doing what it's supposed to do but
300:39 - uh it's not doing what we actually want
300:40 - and that's the issue so how can we
300:43 - convert this now there are a ton of
300:45 - different ways um but the quickest
300:48 - probably the easiest besides actually
300:51 - writing writing it out like this like
300:53 - 11-2
300:55 - d201 which then converts it to a date
300:58 - format um but what you can do you know
301:01 - just so you know you can create a as a
301:03 - text you can do 11-2
301:07 - d201 and now it will stay a text string
301:11 - and as you can tell these are a little
301:12 - bit different because this one is uh
301:14 - formatted or situated on the right and
301:16 - this one's on the left that's how you
301:17 - can tell the difference now if you don't
301:20 - want to do it by hand uh completely
301:22 - manually and waste hours of your time
301:25 - you can do it in a very simple way so
301:28 - we're going to do uh text so this is the
301:31 - exact um form for that we're going to
301:33 - use so let's get rid of that one there
301:36 - we go so we're going to do equals we're
301:39 - going to do uh oops text it says
301:42 - converts a value to text in a specific
301:45 - number format so for a date format we
301:48 - can choose a date format and then it'll
301:51 - convert it to a text for us which saves
301:54 - so much time I promise you uh let's do
301:57 - all of these just like we did and then
301:59 - we need to tell it what the format is if
302:02 - we don't if we tell it something
302:04 - incorrect it's going to give us a
302:05 - completely terrible output or just give
302:07 - us an error alog together so this is a
302:09 - DayDay month Monon year year year year
302:13 - format and that is what we're going to
302:14 - do so we're going to do
302:17 - ddmm y y YY and close that up and there
302:22 - you go and now we well because it's in a
302:25 - formula what we need to do
302:28 - is copy
302:31 - this and past paste it right over here
302:34 - and now you can see that is a general
302:36 - this is something that we can use as a
302:38 - string and let's just check it just to
302:40 - make sure we're going to do right we're
302:43 - going to do this one let's do all of
302:45 - them and we'll do
302:48 - four and there you go so now it works
302:51 - that is what we are looking for um and
302:53 - you can do that imagine doing that with
302:55 - millions of rows or you know let's say
302:57 - 10,000 rows it's going to be a breeze
303:00 - right it's going to take you two minutes
303:02 - or a minute
303:03 - to do everything that you want to do
303:04 - instead of having to just do a bunch of
303:06 - mess to convert it to a string which I
303:09 - promise you I've done it it just takes
303:10 - forever it's it's terrible so that is uh
303:14 - date to text super helpful formula let's
303:17 - go over to trim now I I purposefully
303:20 - messed up this column now why do I did I
303:24 - mess it up like this because when you're
303:26 - working with real data you're going to
303:28 - get data like this it it's messy it's
303:30 - dirty it just has random spaces at the
303:34 - end for no reason um because sometimes
303:38 - you're going to be working with um data
303:40 - that is inputed by a user it's not like
303:43 - a drop- down option so imagine
303:45 - somebody's typing this in they
303:46 - accidentally put a space so they
303:47 - actually put an enter or something and
303:50 - then they submit it and this is how it's
303:51 - going to look in the database um and if
303:54 - you're a data engineer or you know
303:55 - you're working with the raw data if they
303:57 - don't clean that up then you're going to
303:59 - be working with that that dirty data and
304:01 - I I guarantee you if you're working as a
304:03 - data analyst you're going to see stuff
304:04 - like this not with maybe a last name but
304:07 - all sorts of data so we're going to go
304:09 - right here we're going to say equals
304:11 - trim do open parenthesis actually this
304:14 - says removes all spaces from a text
304:15 - string except for a single space between
304:18 - words so like you know if it said
304:20 - Halpert space uh or gy space Halpert it
304:24 - won't take the space in between there
304:26 - because it it kind of understands that
304:28 - the in normal language space is supposed
304:30 - to be there so it won't do that um but
304:33 - we'll take that we'll give it this
304:35 - Range close that up and there you go now
304:39 - it is nice and clean much more usable
304:42 - now let's look at concatenate one that I
304:45 - have used just way way way too many
304:49 - times um and something that I've used
304:51 - concatenate for and you'll see this one
304:53 - in a lot of demonstrations for a good
304:55 - reason is because a lot of people use it
304:58 - for this um so what you can do is you
305:02 - can say equals um and well let me tell
305:05 - you what concatenate does real
305:07 - quick so what concatenate does oops I'm
305:11 - totally messing up here um but it joins
305:14 - two or more text strings into one string
305:16 - it basically joins things together and
305:19 - adds them together so let's do
305:21 - concatenate and we're going to add this
305:23 - first and last name again one that gets
305:25 - used all the time but that's because um
305:28 - it really is useful so you can do this
305:31 - and you can say now now I want to
305:33 - include this so concatenating this and
305:35 - this and let's take a look so it says
305:37 - Jim Halpert U but it's all connected and
305:41 - that's typically not how people write
305:42 - their names so what we can do is we can
305:45 - go back in here and we can do what my
305:47 - demonstration up here already tells us
305:48 - to do which is we're just going to add
305:50 - another thing in here and if we add two
305:53 - parentheses we can include anything in
305:55 - here we can include a dash we can
305:57 - include an exclamation point or we can
305:59 - just include a space so let's just
306:01 - include a space really quick and just
306:04 - like that it works perfectly and so now
306:07 - we have the full name now something that
306:10 - you could use it for is something like
306:12 - generating uh an email this is something
306:15 - that you absolutely could do um and it's
306:19 - you know pretty simple so I'm going to
306:21 - do it like this I'm G to say oops what
306:24 - did I do I'm G to say um Dot and then at
306:30 - the end I'm going to say at
306:33 - oops comma
306:36 - quotation
306:38 - gmail.com and now I've created emails
306:41 - for all of these people so just
306:44 - something that you can do with this um
306:46 - and something that it it absolutely is
306:48 - used for and you'll see that
306:49 - demonstration almost everywhere because
306:51 - honestly it gets used a lot um by data
306:54 - analysts and so uh you know just a good
306:56 - one to know understanding how that that
306:58 - concatenation works um let's go over to
307:01 - the next one
307:03 - so we are going to do substitute now
307:06 - substitute's really interesting um there
307:08 - are different ways you can do it I'm
307:10 - going to show it to you on these dates
307:12 - real quick uh that's what we're going to
307:14 - look at so changing a date format
307:17 - changing how what it's supposed to look
307:19 - like is absolutely something that
307:21 - happens all the time and um you know
307:24 - sometimes you'll even get it like
307:26 - this where it'll look like it'll be
307:28 - messy it'll be different a different um
307:31 - I guess format so this one has all the
307:35 - other ones have slashes where these ones
307:37 - have
307:38 - dashes and you know what you can do is
307:43 - if you want to well let me actually go
307:46 - with the no instances real quick because
307:47 - this one is uh actually makes the most
307:49 - sense um so we'll do equals and we're
307:53 - going to say
307:54 - substitute and oops and let me say
307:56 - substitute replaces existing text with
307:59 - new text in a text string so if we do an
308:03 - open parenthesis it says we take the
308:05 - text have the old text we have the new
308:08 - text and then we have how what instance
308:10 - or how many times uh or or or what
308:13 - instance are we looking at it and I'll
308:15 - explain that in a little
308:17 - bit so the text that we're going to be
308:19 - looking at is this one right here so
308:20 - let's take this
308:22 - range and the old is we're going to take
308:25 - this Dash and so let's take the
308:30 - dash and then what do we want to replace
308:32 - replace it with we want to replace it
308:34 - with this slash right here I think it's
308:36 - a forward slash isn't that what it's
308:37 - called it's called a forward slash am I
308:39 - crazy um and we're not going to put an
308:41 - instance notice that that's in a bracket
308:43 - that means it's optional we're going to
308:44 - do none of that um and what it's going
308:47 - to do is it's going to fix this so this
308:49 - one is now in the correct format that we
308:52 - want uh and that's fantastic that's you
308:54 - know that's what we tried to accomplish
308:56 - given what we had now let's fix that if
308:59 - we want to do the exact same thing uh we
309:01 - can say
309:03 - uh what are we doing substitute we can
309:05 - do substitute we can do open parentheses
309:08 - we'll give the range and now let's say
309:10 - we want to change all of them to a
309:12 - different format so instead of the um
309:16 - forward slash I'm going to keep calling
309:17 - it that if that's correct we want to
309:20 - give it a dash and so then we close that
309:22 - and now all of them are in this new
309:24 - format so it it's able to substitute a
309:27 - specific value for a new value and if
309:30 - you don't include an instance
309:32 - then it'll do it to every single one in
309:35 - there so let's go over here and we're
309:38 - going to actually use the the um the the
309:42 - instance num and I'll show you what that
309:45 - does uh and so really quick we'll do the
309:47 - exact same thing that we just did we'll
309:49 - do the forward slash and we want to
309:54 - replace it with this one again this Dash
309:58 - but we only want to do it on the first
310:00 - instance of that forward slash and so as
310:04 - you can see all the ones that um all the
310:07 - ones that were replaced are the very
310:08 - first instance whereas the second
310:11 - instance which is the second time it
310:12 - appears in this string does not get
310:15 - touched so if we take
310:18 - this and we put it right over here and
310:22 - we move it to
310:23 - two it's kind of the opposite so the
310:26 - first one wasn't touched the second one
310:28 - was so we're choosing which instance or
310:30 - which time it shows up in that string
310:33 - and then it replaces it if you do not
310:35 - choose an instance it chooses all of
310:37 - them so this can be super useful if you
310:39 - want to do like a bulk replace um but
310:42 - you only want to do it on a specific
310:44 - column um and you just want to use a
310:46 - formula really quick right um and so you
310:48 - can use this in a lot of different ways
310:49 - so that's how you're able to actually do
310:51 - it with the first instance the second
310:52 - instance and if you don't include an
310:54 - instance at all let's go over to the sum
310:58 - uh this is one I think everyone knows
311:01 - how to use but I want to show you two
311:03 - other ones um as well so let's go to the
311:07 - sum and we're just going to do equals
311:09 - the sum and I hope you know what this is
311:10 - well not hope I if you don't know what
311:12 - this is it just adds up all the numbers
311:14 - in range so we're going to add sum means
311:16 - add so we're going to take this and it's
311:19 - going to give us the uh what all these
311:21 - salaries are together so super super
311:23 - simple Su is one of probably the most
311:25 - basic formulas that you can do um some
311:29 - if is a little bit different you can add
311:33 - an if statement which we learned right
311:35 - back here you can add an if statement
311:38 - and then add it if it meets a certain
311:41 - criteria all right so we're going to do
311:44 - equals some if and then you're going to
311:47 - need to give a range in criteria and you
311:50 - can include a some range if you would
311:52 - like so we're going to do the salary
311:55 - again we going to do a comma and now
311:57 - here's our criteria let's do if they
312:00 - have greater than 50,000 for their
312:03 - salary and close our parenthesis so now
312:07 - it's only going to add up if their
312:09 - salary is greater than 50,000 now his is
312:12 - 50,000 exactly so that won't count but
312:14 - we have 63 and 65,000 which does equal
312:18 - 128,000 so it it just gives a specific
312:22 - criteria or an if statement then it does
312:25 - the addition uh so super useful on that
312:27 - one so that is how you do a su if and Su
312:29 - ifs is kind of the same thing as we did
312:32 - back here there's the if and the ifs so
312:35 - the ifs is going to be if it has it
312:37 - meets multiple conditions so let's take
312:39 - a look at that one so let's do um equals
312:44 - some ifs now uh oops now the Syntax for
312:49 - this one is going to be a little bit
312:50 - different you'll see that in just a
312:52 - second this adds the cells specified by
312:54 - a given set of conditions or criteria so
312:58 - let's do an open open parentheses we
313:00 - give the sum range so let's do um the
313:03 - same one as before then we have our
313:05 - criteria range so what are we looking at
313:09 - What's um this is the area that's going
313:10 - to be added after all these if
313:12 - statements are done right so we have to
313:16 - initially set that now we're going to
313:18 - say okay what criteria are we basing
313:20 - this off of so let's put a comma and
313:23 - we're going to base it off of let's do
313:25 - this one we'll say um if the uh gender
313:30 - so we'll do comma if that's female oops
313:35 - if that's female and then we'll give
313:37 - another one we can say if they're female
313:41 - and let's say they are greater than oops
313:44 - greater than 30 and we'll close that up
313:48 - and it's going to give us 88,000 so
313:50 - female female there's one two right here
313:55 - so it's going to be this one and this
313:57 - one that equals 88,000 so that's how
314:00 - that works you're able to incorporate
314:02 - several different
314:04 - conditions into uh the sum formula so
314:08 - again I know this one's super simple but
314:10 - you you can use it in a much more
314:11 - complex way if you use the sum if and
314:14 - the sum ifs um almost the exact same
314:18 - thing for this count I'm not going to go
314:20 - super in depth into this one um I'll
314:23 - just kind of show you because count is
314:27 - um count and sum are kind of on the same
314:30 - level of difficulty they're both pretty
314:33 - beginner this is just going to give you
314:34 - a count of how many cells um are there
314:38 - so let's give this range um and so it's
314:41 - not going to add it it's just going to
314:42 - give us a count so if we do right here
314:44 - and scroll over them like highlight them
314:47 - this countdown here oops this countdown
314:49 - here is nine and so it's going to give
314:50 - us that count but we can do a count with
314:54 - conditions exactly how we did it in the
314:57 - sum so if we do count if Oops I did not
315:00 - spell that right if we do count if we're
315:03 - going to give a range and a criteria
315:05 - exact same as we did before so let's do
315:08 - this I me you can do this on basically
315:11 - any of these it doesn't really for this
315:12 - demonstration it doesn't really matter
315:14 - um but we'll say if their salary is
315:18 - greater than 45,000 so how many people
315:20 - this is going to give us how many people
315:22 - have a salary over 45,000 and that's
315:25 - five so before in the sum if if we did
315:28 - that um we did 50,000 it adds everything
315:31 - together the count is just going to
315:33 - count the amount of cells that meet that
315:35 - criteria and again count
315:39 - ifs uh we're going to have a criteria
315:41 - range and then we will specify what if
315:45 - statements we want to be uh to occur in
315:48 - order to count those cells so let's do
315:52 - we want you know we want to count it can
315:54 - be any range or it can be any of these
315:56 - we'll do the ID this time and now we can
316:00 - say you know want it to be is our
316:03 - criteria one we can say we want it to be
316:06 - greater than want their ID to be greater
316:09 - than
316:11 - 1005 and let's say we want them to
316:17 - be
316:19 - male so they have an ID over a certain
316:23 - um a certain range and then they are a
316:26 - male so there's only three people that
316:27 - meet that criteria and so it'll be
316:31 - Michael Stanley and Kevin those are our
316:33 - three people and so it gives us a count
316:35 - very useful to give quick numbers like
316:37 - this something I I genuinely use a lot
316:41 - and I know I've said that a lot during
316:43 - this tutorial but that's because
316:45 - everything I'm showing you are things
316:47 - that I've used a lot so I don't feel
316:48 - like um you know I'm speaking out of
316:50 - turn here let's look at this one this
316:52 - one is very um has some specific use
316:57 - cases um notice that this is a text
316:59 - right now um if you do it when it is uh
317:03 - in a date format it actually will not
317:06 - work I mean I can you can test it out
317:08 - yourself you just got to trust me it's
317:09 - not going to work so what this does is
317:12 - it's going to give you the range from
317:15 - this day to this day that's what it's
317:16 - going to do so let's do uh oops days
317:20 - it's GNA we want to choose our end date
317:22 - so this is our end date it's kind of
317:24 - backward from what you think end date to
317:26 - start date you think start date to end
317:28 - date so you have to start with this one
317:30 - and then we're going to choose the start
317:31 - date and now it's going to tell us how
317:34 - many um how many uh days was it from
317:40 - here to here and this one it's
317:43 - 5,56 so Network days is extremely
317:46 - similar except it takes out holidays and
317:49 - it takes out weekends and you can see
317:51 - how many working days has this person um
317:55 - how many working days or network days
317:57 - has this person worked not including you
317:59 - know weekends and holidays have they
318:01 - actually worked since their start date
318:03 - and their end date so let's do Network
318:06 - days and we need our start date our end
318:08 - date and you can specify extra holidays
318:11 - if you'd like but there are a already
318:14 - standard set holidays in there that it
318:17 - takes out um so you know if you want to
318:19 - do that you can so we're going to do the
318:21 - start date again this one's different
318:23 - this one says start date end date and
318:25 - then we're going to give the end
318:27 - date and if you
318:29 - notice they are going to be different
318:31 - numbers is dramatically lower because
318:33 - it's taking out weekends and holidays so
318:36 - this is how many days uh calendar days
318:38 - they've worked and this is how many days
318:40 - they've actually been in the office and
318:42 - worked and that is it um again there are
318:47 - so many formulas I mean literally
318:48 - hundreds of formulas that you can
318:51 - utilize and use and are out there for
318:54 - you to try out yourself if there are
318:57 - specific ones that I did not cover in
319:00 - this video please please put it in the
319:02 - comments below so that I can you know
319:05 - show you how to do these things I I I
319:07 - will say I've probably used a majority
319:08 - of the ones that you're going to put in
319:09 - the comments already and if I haven't
319:12 - used it I'll take a look at it and see
319:13 - if it's really useful and I'll show you
319:15 - that so thank you guys so much for
319:18 - watching I hope that this has been
319:19 - helpful I I feel like a lot of these
319:22 - things are not things that I learned
319:24 - before I started almost all these are
319:26 - ones that I learned while I was on the
319:28 - job and so I'm hoping that you can get
319:30 - ahead of the curve and you can learn
319:31 - learn these things before you actually
319:32 - start so that when you get in there
319:34 - you're just like killing it with the
319:36 - formulas and people are like whoa this
319:38 - guy is like this guy knows what he's
319:39 - doing in Excel give him all the Excel
319:41 - work and then you become like you know
319:43 - just the Excel guy um and everyone you
319:45 - know loves you for it so with that being
319:48 - said thank you so much for watching I
319:49 - really do hope this helped if you like
319:51 - this video be sure to like And subscribe
319:53 - below I'll see you in the next
319:56 - [Music]
320:00 - video
320:04 - [Music]
320:07 - what's going on everybody welcome back
320:08 - to another video in this Excel tutorial
320:10 - we'll be looking at
320:15 - [Music]
320:17 - xlup now if you don't already know what
320:19 - xlookup is it is a new feature in Excel
320:21 - to kind of replace vlookup or to be a
320:24 - much better option at least in my mind
320:26 - is a much better option than V lookup
320:28 - and so if you're someone who's either
320:30 - used V lookup a a lot and you're trying
320:32 - to you know learn this new Option or if
320:33 - you've never used it before this video
320:35 - will be super helpful because I'll walk
320:37 - you through kind of the options and what
320:38 - x lookup can do as well as the
320:40 - difference between X lookup and V lookup
320:42 - but before we get into the tutorial I
320:43 - want to give a huge shout out to today's
320:45 - sponsor and that is udemy udemy is the
320:47 - go-to place if you want a full-fledged
320:48 - course in Excel I have three options of
320:51 - courses that I have taken on em me so
320:53 - I'd highly recommend checking those out
320:55 - they are having a huge sale on all their
320:56 - courses during this time and so if you
320:58 - are in the market for a course I highly
321:00 - recommend checking out UD to me and
321:02 - getting one there now without further
321:03 - Ado let's jum on my screen and start the
321:05 - tutorial all right so let's get me off
321:07 - the screen because we all know why we're
321:08 - here so I didn't include this in the
321:10 - formulas video last week because I knew
321:14 - this was going to be a large one and a
321:15 - lot of people are going to want to know
321:16 - how to do this what the difference
321:18 - stream V lookup and X lookup is so it
321:20 - has its own dedicated video to it so
321:23 - let's get started it is a Formula so
321:24 - we're going to come in here in this cell
321:26 - we're going to hit equal and then we're
321:28 - going to start typing X lookup now I'm
321:30 - GNA hit tab in just a second but let's
321:33 - read what this says it says searches a
321:34 - range or an array for a match and
321:37 - Returns the corresponding item from a
321:39 - second range or array by default an
321:41 - exact match is used so really useful to
321:44 - know um we'll talk a little bit more
321:45 - about that in just a second let's hit
321:47 - Tab and it's going to complete it and
321:50 - it's going to start giving us or it's
321:51 - going to tell us what our input values
321:53 - need to be we're going to have our
321:55 - lookup value we're going to have our
321:57 - lookup array our return array and then
322:00 - some options things like if not found so
322:03 - if your option isn't found you know what
322:05 - will be um you know the the uh output
322:08 - that it gives us a match mode and a
322:11 - search mode and I'm going to show you um
322:12 - kind of how to use every single one of
322:14 - these things as you can see at the very
322:16 - bottom I've kind of already set up all
322:18 - of the instructional um instructional
322:21 - content for this video and so we'll kind
322:24 - of get through all these different
322:25 - scenarios so let's just start really
322:28 - quickly with um how to use it very
322:31 - simply with the lookup lookup array and
322:33 - return array so we're going to come in
322:36 - here and we're going to give it our
322:37 - lookup value Now Toby Fenderson right
322:40 - over here in A3 is going to be our
322:42 - lookup value so that's who we're going
322:44 - to be searching for now we're going to
322:46 - hit comma and now we're going to be
322:48 - needing to look up uh or to input our
322:50 - lookup array now an array is just uh you
322:52 - know a range basically so we're going to
322:55 - do this is where it's going to be
322:57 - searching for um that value this is
323:00 - where it's searches for A3 so here's
323:02 - Toby Fenderson here's Toby flenderson so
323:04 - it will find it in this array right here
323:08 - then we're going to hit comma and now we
323:10 - need to give it the return array what
323:11 - it's going to return on that row when it
323:14 - finds it so we're going to return his
323:16 - email keep it really simple so what it
323:18 - should do and let's close parentheses
323:21 - what it should do is it should take Toby
323:22 - Fenderson it's going to search in this
323:25 - column or in this array and then it's
323:28 - going to return the email when it finds
323:31 - Toby Fenderson so it's on Toby Fenderson
323:33 - is on row six so it's going to find Toby
323:37 - flenderson it's going to come over here
323:38 - and it's going to return Toby flenderson
323:41 - dundermifflin corporate.com that's what
323:43 - it should do let's see what it actually
323:45 - does said enter and it returns it now if
323:49 - we drag it down like this it'll apply it
323:52 - to all of these names right here and it
323:54 - works exactly how it's supposed to um
323:57 - again if you have never used vlookup you
324:00 - don't know how good you have it okay
324:02 - vlookup um was extremely useful but just
324:05 - uh a bit complicated and I'll talk about
324:06 - that near the end of the video when we
324:08 - compare V lookup to xlookup but just
324:11 - know that if you're using X lookup for
324:13 - the first time and you're just getting
324:14 - into using Excel you guys have it good
324:17 - okay so just know that um now let's go
324:20 - over here to X lookup multiple rows
324:23 - because you can return more than one
324:26 - output with um with X lookup so let's go
324:31 - right in here and we're going to
324:33 - basically write the exact same thing as
324:36 - we did before so let's write X lookup
324:39 - we're going to do Toby flenderson as our
324:41 - value we're going to search here and
324:44 - we're going to do something a little bit
324:45 - different this time we want to include
324:47 - our end date and the email so what we're
324:50 - going to do is we're going to start here
324:52 - we're going to go down all the way to
324:53 - the bottom of end date and then we're
324:55 - also going to include the email and when
324:58 - we do that it will uh in the output give
325:01 - us a row or a column for end dat and a
325:04 - column for email so an output for both
325:07 - so let's hit enter and now we can see
325:09 - that we have the end date here and the
325:12 - email here now one of the downsides or
325:15 - or something that I'm not a huge huge
325:18 - fan of is well first off I love that you
325:20 - can do this that's fantastic um but it
325:24 - have to be right next to each other so
325:26 - you're only going to get that output
325:28 - exactly how it is in the columns so if I
325:31 - went and did this range um I would
325:33 - include all of that um so H you know
325:37 - let's just for example let's pull that
325:39 - down here so let's take
325:41 - this and put it right here if I did
325:45 - instead of zero or or O2 to P10 if I
325:50 - included age to email this whole range
325:53 - and I hit enter it's all going to be
325:56 - included so you know that's one of the
325:58 - small downsides of of that functionality
326:02 - of when you can use multiple rows is
326:04 - that it's going to use the rows exactly
326:06 - as they are you can't really customize
326:09 - it within the formula you can move
326:12 - around um these columns to how you want
326:14 - it um so that is something to note and
326:18 - again you can pull this down and it'll
326:20 - be applied to all of those names let's
326:23 - go over to X lookup exact match so let's
326:27 - open this up we're going to do equals
326:29 - xlup as we've been doing and we're
326:30 - actually going to be looking at the if
326:32 - not found and the match mode U both you
326:34 - know on this tab right here so let's do
326:38 - what we've been doing before we take our
326:40 - value that we're looking up we take the
326:44 - array that we're looking and we're going
326:46 - to do the email and you know as you can
326:50 - see this says Toby flender and not Toby
326:53 - flenderson so what we are going to do is
326:56 - we're going to hit comma and if it's not
326:57 - found you can return um a value or a
327:01 - string that you want to return now for
327:04 - simple purposes or for simple
327:06 - instructional purposes we're going to do
327:08 - not
327:10 - found and then we're going to close that
327:13 - off so let's do this and Toby Fenderson
327:16 - was not found and so it was returned not
327:19 - found if Toby Fender was actually in
327:22 - this full name then it would have
327:25 - returned the email and then if along the
327:27 - way you know one of these was not part
327:28 - of it then you know we would have uh we
327:32 - would have had the KN found all right so
327:34 - let's go right up here we're actually
327:36 - just going to copy this uh because I
327:38 - want to reuse it um and then we're going
327:41 - to go right here and we hit a comma now
327:43 - this is our match mode option and so we
327:47 - have four different options that we can
327:48 - choose from a zero is an exact match and
327:50 - that is by default that is what we have
327:53 - or what we use then there's a minus one
327:56 - that's an exact match or next smaller
327:58 - item then there's a one which is an
328:00 - exact match or next larger item and then
328:02 - there's a two which is a wild card
328:04 - character match now we're going to do
328:06 - that and we are going to um you know try
328:09 - this out and it's not going to work and
328:12 - not just because I forgot to put A4 um
328:14 - it's doing it because it's searching for
328:16 - Beasley but if there's not a wild card
328:20 - option already put in here um it doesn't
328:23 - recognize it so we need to indicate
328:25 - where that wild card needs to be so
328:27 - we're going to do a double apostrophe or
328:29 - quotation marks we're going to put put
328:30 - an asterisk right here and then do
328:32 - another one and we're going to hit an
328:35 - Amper sand so we're going to have an
328:36 - Amper sand right here and when that's
328:38 - going to say is anything that comes
328:40 - before A4 anything that comes before
328:43 - Beasley is okay doesn't matter what it
328:45 - is as long as it has Beasley at the end
328:48 - that is going to be okay so we're going
328:49 - to have Pam that comes before Beasley
328:52 - and that's going to tell it and it's
328:53 - going to say okay I know that anything
328:55 - that comes before Beasley is all right
328:57 - and so when we hit enter is now going to
328:59 - return the output that we are looking
329:01 - for and we can include that on these as
329:04 - well now this one is Meredith um and so
329:08 - Meredith is at the beginning so we have
329:11 - Meredith Palmer so we can actually take
329:13 - this and we're going to put this at the
329:17 - end put the Amber sand right here and
329:20 - now it'll work and the exact same thing
329:24 - for Kevin Malo right here Kevin Malone
329:27 - so it just didn't include uh the ne at
329:30 - the end and so it's still going to work
329:33 - if we include that asterisk at the end
329:36 - now I know I said we were looking at
329:37 - search order but I'm actually going to
329:38 - kind of give you an exact match uh first
329:40 - and then search order but it just kind
329:42 - of easier to show it over here so I'm
329:44 - going to do X look up I'm going to look
329:47 - up this value do a comma here's the
329:50 - range this is our start date that's it's
329:52 - going to be looking for and I want to
329:54 - return the full name now no value in
329:58 - here has one one 2000 but what we can do
330:02 - is we can do comma and then a comma for
330:05 - the match mode and do an exact match or
330:07 - next
330:09 - larger and I know this is in the exact
330:11 - match part but it you know kind of
330:14 - refers to search ORD a little bit um
330:16 - where it searches for the next largest
330:18 - value that's that's what that number one
330:20 - represents the next larger value so we
330:22 - have 112000 and if we look right here
330:24 - the next value above 112000 is
330:28 - 152000 and so it should should return
330:31 - Angela Martin let's see if that works
330:34 - and there it is now let's look up the
330:36 - actual search order um so let's do
330:38 - equals x
330:40 - lookup this is the value that we want to
330:42 - be searching for and we're going to be
330:44 - looking in this start date and comma and
330:49 - we want to return the name now let's get
330:52 - over to search mode now the search mode
330:55 - performs a search starting at the first
330:57 - item so at the very top going down so by
331:00 - default it searches from first to last
331:02 - but you can reverse that and do search
331:05 - from last to first or you can do a
331:07 - binary search which is where it sorts in
331:09 - ascending order or sorts in descending
331:11 - order um and that's with the actual
331:14 - value and so we won't be able to show
331:17 - this binary search or on ascending or
331:20 - descending because our values are the
331:22 - same but if we had different values and
331:25 - we were looking up um using this um next
331:29 - largest we we would be able to show that
331:31 - but I'm going to show you the search
331:32 - from first to last and last to first so
331:34 - let's put in by default and this is what
331:36 - it would be search From First to Last
331:38 - what the default would be so it starts
331:40 - at the very top it goes down and finds
331:42 - the first 56 2001 and returns Toby
331:46 - flenderson now if we go in here and we
331:49 - hit minus one that is going to search
331:51 - from last to first so it's going to
331:53 - start at the bottom and go to the top
331:54 - and the first one that it finds is
331:56 - Michael Scott so that's that first one
331:58 - starting from the bottom and then the
332:01 - Michael Scott right there so these two
332:04 - the exact match and the search order can
332:05 - kind of be combined into um this one
332:08 - right here we're using this
332:09 - one um which is you know exact match or
332:12 - next larger and you can include that in
332:15 - this binary search in this one as well
332:17 - all right now let's head over to the X
332:19 - lookup horizontal I think we're we only
332:22 - have a few left yep X look up horizontal
332:24 - then we'll do X lookup with sum and then
332:26 - I'm going to show you the V lookup at
332:27 - the end so let's go right here let's say
332:29 - equals X lookup the value that we want
332:32 - to be searching for is February that's
332:33 - what we're looking for hit comma and
332:35 - where do we want to search to find
332:37 - February we want to search in uh these
332:40 - calendar months and then we hit another
332:42 - comma and now we're going to be
332:43 - searching for paper so let's do paper
332:47 - and we'll hit enter and it found
332:50 - February and it return paper right here
332:53 - and we can do that for paper printer and
332:56 - manila folders and so it's going to give
332:58 - us the 310 the 40 and the 118 from
333:01 - February now let's go right over here to
333:03 - XL up with some um I actually it's
333:05 - basically a carbon copy of this uh let's
333:09 - take this over here real
333:12 - quick and place it right there because
333:15 - it's the exact same thing except at the
333:17 - end we're going to use I'm going to show
333:19 - you how to use sum with the X lookup at
333:22 - the same time now um we're going to be
333:26 - using the formula sum and
333:30 - so we're going to do sum and then within
333:32 - the sum our first number is going to be
333:34 - an X lookup and then our next value is
333:37 - also going to be an X lookup so let's do
333:41 - X lookup and now we're going to search
333:44 - for our very first value oops our very
333:47 - first lookup value so we're going to go
333:49 - to
333:51 - i1 and then we're going to search this
333:55 - again and we want whatever value oop
334:00 - goes into that so let's close that
334:02 - parenthesis and now we're going to do a
334:04 - colon and another X
334:07 - lookup and now let's do March so now
334:11 - we're going to search for March we're
334:13 - going to do our search range where we're
334:16 - searching for that March and we want the
334:18 - paper as
334:20 - well and let's close that and then we
334:23 - also need to close that parentheses so
334:26 - now we are basically adding this
334:28 - February and and this March so it's
334:30 - going to be 310 plus 150 it's adding
334:33 - those um two values and it should be uh
334:36 - what 460 so let's see if that is our
334:39 - output and it is so you can do this with
334:43 - a lot of things not just some but you're
334:44 - able to use x lookup within different
334:47 - formulas if you're searching for a
334:48 - specific value and a specific value um
334:51 - in in another um cell you can add those
334:54 - together using X lookup which is
334:56 - honestly it's pretty great so let's go
334:58 - over to V up so I wanted to show you
335:01 - this because I wanted to show you where
335:02 - it came from and what we used to do um
335:06 - unless you are continuing to use V
335:07 - lookup and what we can do now so X
335:09 - lookup I just showed you kind of
335:11 - everything um but super quickly I'm
335:13 - going to show you how vlookup used to
335:15 - work um in a super short way so that you
335:18 - can understand how it used to be used
335:20 - and how it is used uh how X lookup is
335:22 - used now so let's go in here and we're
335:25 - going to say equals and we're going to
335:26 - do a vlookup and so we have a lookup
335:29 - value Val and so we're going to click
335:31 - this we're going to hit Comma just like
335:34 - we did before and now we're going to do
335:35 - a table array and the table array is a
335:39 - little different in that you're
335:40 - searching an entire area so let's do uh
335:46 - H2 all the way through o oops o10 so
335:52 - that's what that's what our table array
335:55 - is going to be then we're going to do a
335:57 - comma and now we have to do a column
335:59 - index number which number um are we
336:03 - going to be um searching for which um
336:06 - value are we going to be searching for
336:08 - in here and so we want to search for
336:10 - eight because this is 1 2 3 4 five 6 7
336:14 - eight we want to return that email and
336:16 - we're searching for the name right here
336:19 - in this very first column so we have
336:21 - that comma and we're going to do eight
336:23 - and then in the range lookup you can do
336:25 - true which is an approximate match or
336:27 - false which is an exact match and we'll
336:29 - do
336:30 - false I don't know why it's not Auto
336:32 - auto doing it but there we go and now we
336:35 - will do it and it's going to return it
336:38 - just as we had it um a lot of people uh
336:42 - I guess not everybody but some people
336:45 - didn't like and the reason why they
336:47 - created X lookup you had to do those
336:49 - ranges and if you ever went in here and
336:52 - then we let's say we um added another
336:56 - column which happens to data now it
336:59 - gives completely different um different
337:02 - data so let's say for whatever reason we
337:04 - added uh address so now we have these
337:07 - people address well now it's going to
337:08 - give us a different um value it's going
337:11 - to have this end dates because if we go
337:12 - in here now it doesn't um now the eighth
337:16 - is this end date and the ninth is this
337:18 - email so if you have a vlookup that you
337:21 - use for um you know a calculation or a
337:25 - table that you've created or different
337:26 - things in Excel you then have to go
337:28 - through here and manually change this
337:30 - and so a lot of people didn't like that
337:31 - CU if you you know needed to change data
337:33 - or you needed to change something or add
337:35 - an additional column you'd have to go
337:37 - back and fix all of your vlookups they
337:40 - wouldn't just automatically U Move with
337:42 - it which is what happens with xlookup
337:45 - and just to prove this uh let's go back
337:48 - to the very first one which is the X
337:50 - lookup and right now the email is
337:52 - looking at O2 and through o10 um we're
337:56 - just going to insert right here and that
337:58 - would be our new colum we'll do address
338:01 - oops address and notice that it hasn't
338:04 - changed and why is that because it auto
338:07 - changed for us from P2 to P10
338:10 - understanding that it wanted to stick
338:11 - with when something was inserted here it
338:13 - wanted to stick with the original data
338:15 - the original array that was selected and
338:18 - so xlup does that work for you and it
338:20 - makes it a little bit easier to automate
338:23 - things and create these processes in
338:26 - Excel without having to go fix it later
338:28 - which you had to do with lookup so that
338:30 - is it for today I hope that you know how
338:32 - to use x lookup a little bit better now
338:34 - that you have watched this uh if you
338:35 - enjoyed this video be sure to like And
338:37 - subscribe below and I will see you in
338:39 - the next
338:41 - [Music]
338:51 - video what's going on everybody welcome
338:53 - back to another Excel tutorial today
338:55 - we'll be looking at conditional
338:58 - formatting
339:00 - [Music]
339:03 - now if you've never heard of conditional
339:04 - form mounting before that's okay I had
339:06 - never heard of it before I became a data
339:08 - analyst and so now that I've been using
339:10 - Excel a lot of course I use it quite a
339:12 - bit and so I want to show you how to use
339:14 - it conditional formatting is basically
339:16 - just a way to see patterns and Trends
339:17 - and data and that's a super simple way
339:20 - of putting it um but it's very easy to
339:22 - use and so hopefully I can show you how
339:24 - to use it uh really easily in a lot of
339:27 - the things that I use the most and some
339:28 - of the things that I use it for so that
339:30 - you can also know how to use conditional
339:32 - formatting now before we jump into the
339:33 - tutorial I want to give a huge shout out
339:35 - to the sponsor of this Excel series and
339:36 - that is udemy you guys know by now that
339:39 - I absolutely love udemy I've been using
339:41 - them for years and I've taken literally
339:42 - hundreds of courses on udemy and I've
339:45 - learned so so much especially when I was
339:46 - first starting out as a data analyst uh
339:49 - I learned a lot through their Excel
339:50 - courses on udemy and so I have actually
339:53 - put the ones that I really like and I
339:55 - have taken and enjoyed and think you
339:56 - would as well in the description so if
339:58 - you want to take those sure to check
339:59 - those out again huge shout out to UD me
340:02 - for sponsoring the series now without
340:04 - further Ado let's jump onto my screen
340:05 - and get started with the tutorial all
340:06 - right so let's jump right into it on
340:08 - this Home tab right here if we go all
340:10 - the way over to the right there is
340:12 - conditional formatting and the
340:13 - description that it gives us is easily
340:15 - spot Trends and patterns in your data
340:17 - using bars colors and icons to visually
340:19 - highlight important values and that is
340:22 - exactly how I would have defined it a
340:24 - really good job Microsoft exactly how I
340:26 - would have done it so what you'll see
340:27 - right away is there's nothing too
340:29 - complex so we have some highlight cell
340:31 - rules um we have some top bottom rules
340:34 - data bars color scales icon sets and
340:37 - then at the bottom we can create a rule
340:39 - we can clear the rule and we can manage
340:41 - our rule so if you create a rule then
340:43 - you can manage it so we're going to
340:45 - start with these icon sets and I'm going
340:47 - to show you how to use those and we'll
340:49 - work our way to the top and then I'll
340:50 - show you how to create some rules
340:51 - yourself and how that all works so let's
340:55 - start off with the icon sets I'm going
340:57 - to go over here to sales um and for this
341:01 - data we kind of have this um you know
341:03 - Trend or or pattern that you can kind of
341:06 - see over time so over the months um so
341:09 - if we go right here and let's use that
341:13 - conditional forming let's use that icon
341:14 - sets and right here we can use these
341:17 - directional so you know we have this
341:19 - kind of Time series each month that
341:21 - shows us how much paper they're selling
341:23 - and if we do this right here it's going
341:26 - to show us if it's kind of average or if
341:28 - it's below average or if it's above
341:31 - average or if it's going up so at a
341:34 - really quick glance you can kind of see
341:35 - the pattern of this data set it's kind
341:38 - of going mostly yellow and red there's
341:40 - only two months where it's going up
341:42 - significantly now we don't have to only
341:45 - do that for one row or one column you
341:48 - can apply to all of them but as you can
341:51 - see all of these are red now why are
341:53 - they all red it's because they're using
341:55 - numbers for everything so they're
341:57 - comparing these 24s these 50s and 65s
342:00 - against these 450s and 750s and so
342:03 - they're all going to be red but if we do
342:06 - it individually if we do it each row if
342:08 - we take it just like this and then we go
342:11 - to Icon sets and do it it's going to be
342:14 - much more representative of the actual
342:16 - printers not of all the numbers as a
342:18 - whole and you can do other things uh the
342:20 - arrows are ones that you'll probably see
342:22 - the most often that's the one I've used
342:24 - if I ever do use them um but you can you
342:28 - know do ones like this where they have
342:30 - you know kind of a trend upward or a
342:32 - trend downward um and so there's just
342:35 - several more arrows this one only gives
342:36 - you three as you can see this one gives
342:38 - you five um and you can do you know
342:41 - colors or shapes or or different
342:43 - indicators and all these different
342:45 - things um and honestly it's kind of
342:47 - whatever you want to use whatever makes
342:49 - sense for your data but you know I've
342:51 - really only ever seen like these colors
342:53 - being used I've never really seen these
342:55 - flags or anything like that but again it
342:57 - just depends on what industry you work
342:58 - in you might you might see that let's go
343:00 - right over here to the demographics um
343:03 - and let's look at our color scales now
343:07 - color scales are going to be the
343:08 - probably the most obvious thing that in
343:10 - datab bars are going to be the most
343:11 - obvious things in here um if you go
343:14 - right here and and you look at this
343:16 - color scale if it's high if it's among
343:19 - the top ones it's green the lowest it's
343:22 - red and you can change that um to really
343:25 - any colors you want any colors that they
343:27 - offer you um and it it does exactly what
343:31 - it does it's a color scale a gradient of
343:33 - the colors from high to low or low to
343:36 - high and so any color that you do you'll
343:38 - be able to kind of see um you know
343:40 - what's good and what's not good that
343:43 - really is um color scales in a nutshell
343:47 - data bars are again super super
343:51 - straightforward it's going to be either
343:53 - a gradient fill or a solid fill so let's
343:54 - look at the gradient fill if we do a
343:57 - blue gradient fill I'll actually let's
343:59 - get rid of our um let's go over here
344:02 - let's go to clear rules from selected
344:04 - cells we haven't looked at that yet but
344:06 - that's how you clear it let's go to data
344:08 - bars and we'll use this blue gradient so
344:12 - with this blue gradient you know this
344:13 - one is or sorry this one is the highest
344:16 - one so it's going to be completely
344:17 - filled and this one is 36,000 almost
344:20 - half of this I'm pretty close and so
344:22 - it's almost half um this one again you
344:25 - know it's not used very often
344:29 - I you don't see these a lot to be honest
344:31 - you just don't um but if you do see it
344:34 - that's how you use it that's how it can
344:36 - be done again pretty easy uh as I just
344:40 - showed a second ago if you want to clear
344:41 - the rules you can clear from the
344:42 - selected cells that's what we're doing
344:44 - so I have column G selected and I'm
344:46 - going to I'm going to clear that if you
344:47 - want to clear the rules for the entire
344:49 - sheet you can do that as well so it
344:50 - would affect every single column and row
344:53 - we'll just do this for now so now let's
344:56 - go look at the top bottom rules so so
344:59 - this is the top 10 items top 10% bottom
345:02 - 10 items bottom 10% above average and
345:05 - below average and they're going to do
345:06 - exactly what you think they are going to
345:08 - do if you select above average it is
345:10 - going to select or highlight the cells
345:13 - that are above the average in column G
345:15 - so let's look at the salaries that are
345:17 - above average all right and so uh the
345:20 - ones that are at the very top are
345:22 - Michael Scotts Toby flenderson and
345:25 - Dwight shro uh no shock there um I
345:28 - believe the average is somewhere around
345:30 - like
345:31 - 48,500 or something so I think this one
345:34 - just is just below it and so all these
345:36 - other ones are below average and that's
345:38 - just because you know Michael Scott and
345:41 - Dwight Sho are and Toby are kind of
345:43 - bringing up that average quite a bit so
345:45 - everyone else is going to fall beneath
345:46 - that so at a super quick glance you're
345:49 - able to just highlight the cells and
345:52 - you're able to see who is above average
345:54 - and you know you can do this in a lot of
345:56 - different ways in Excel but this is just
345:58 - a really simple fast way to do that um
346:01 - let's get rid of that real quick and
346:04 - let's go back up here and now we can
346:06 - oops let's go to top bottom rules and
346:08 - now we can see the below average and
346:10 - it's going to highlight all the other
346:11 - ones and so it works exactly how you
346:13 - think it is going to work and this is
346:15 - the default way that it highlights these
346:17 - cells so it highlights them this kind of
346:20 - um seeth through red and then it
346:22 - highlights the actual text or or the um
346:25 - characters in there red as well now I'm
346:27 - not going to go through and show you
346:29 - every single one of these top bottom
346:31 - rules I think they're pretty
346:32 - self-explanatory I just kind of wanted
346:33 - to show you what happens when you do use
346:36 - one of them it's going to highlight that
346:37 - cell so let's go up here to the
346:39 - Highlight cells rules and honestly these
346:42 - are the ones that I use by far the most
346:45 - uh all these other ones combined I do
346:48 - not use more than this highlight cells
346:50 - rules um and the one in here that I use
346:52 - more than any other conditional
346:53 - formatting rule is this duplicate values
346:56 - so I'll start with that really quick and
346:57 - I'll kind of show you a few few of these
346:59 - other ones but this duplicate values to
347:01 - me is one of the most useful ones um and
347:05 - so let's kind of show you how that works
347:08 - if we go to the start date you can see
347:10 - that we have a duplicate value right
347:12 - here and if we go over here to
347:15 - conditional formatting highlight cells
347:17 - rules and duplicate values it is going
347:19 - to highlight um the uh duplicate and
347:23 - that says duplicate right here now we
347:24 - can go through here and click on unique
347:27 - um and then it would highlight all the
347:29 - ones that are not duplicates um so you
347:32 - can use it you know kind of in a similar
347:34 - inverse way uh it's just different
347:37 - different but I use the duplicate almost
347:39 - always um another thing that you can do
347:42 - is go over here and you can change the
347:44 - color um or you can even do a custom um
347:47 - which I never do that it's not um
347:51 - something I spend a lot of time doing I
347:52 - typically just stick with this one so
347:54 - you can do that and it's going to
347:55 - highlight um you know something that has
347:58 - a duplicate value in there now why do I
348:01 - use this so much well I work with a lot
348:04 - of different types of data sets but one
348:07 - thing that you'll find in almost all of
348:09 - them is they have some type of ID and
348:12 - they're going to have some type of um
348:15 - personal information whether that's a
348:17 - social security number or an address or
348:21 - um you
348:22 - know or a cell phone number or something
348:25 - like that there is going to be data that
348:28 - is going to to identify that person now
348:30 - I work a lot with pharmaceutical data a
348:32 - lot with Pharmacy data um as well as
348:36 - Healthcare data so like names Social
348:38 - Security numbers addresses phone numbers
348:40 - all those things all that customer or or
348:42 - client information and oftentimes when I
348:44 - get a new data set and I have it in
348:46 - Excel or I convert it to excel I will
348:48 - start using these duplicates to try to
348:50 - find issues with the data and I find
348:53 - them all the time either there's an
348:55 - employee ID or some type of customer ID
348:57 - or client ID that has a duplicate in
348:59 - there that should not be in there or
349:01 - there's multiple Social Security numbers
349:03 - or there's an issue in some other way
349:04 - and I'm able to find those things and
349:06 - spot those patterns using this
349:08 - duplicates and I promise you I use this
349:11 - one almost every single time I open a
349:13 - new data set or I work with a new
349:14 - clients working with their data um and
349:17 - so I wanted to show you this one I
349:18 - wanted to really press upon you that
349:20 - this one is a really really really good
349:22 - one to know and learn how to use it's
349:25 - not complicated it's not hard it just
349:26 - shows you you know you know
349:29 - if there's a duplicate value but I
349:30 - wanted you to know how I use it and how
349:32 - often I use it so that you can you know
349:35 - pick that up and put that in your tool
349:36 - kit in your back pocket so that you can
349:38 - use that later on if you have uh if you
349:40 - have a similar need or if you're trying
349:42 - to do something similar to what I was
349:43 - just talking about so that is how
349:46 - duplicates work again super great it's
349:49 - obviously not super useful when you're
349:51 - only using um 10 rows but when you have
349:53 - you know 50,000 100,000 and there should
349:56 - be zero duplicates in there and you
349:58 - highlight it and then uh you come right
350:00 - here use the
350:03 - filter and we're going to filter and
350:05 - we're going to sort by the color and it
350:08 - allows you to sort by the color and you
350:10 - have duplicates in there then that's a
350:11 - problem and you identified a problem
350:13 - super quickly uh and you know some of
350:16 - those things they slip by because nobody
350:18 - checks it and so that's something that I
350:20 - I often check and if you go here and you
350:22 - sort by color and there isn't an option
350:24 - to do um this this pink red color and
350:26 - that means there aren't any duplicates
350:28 - and that a really good thing most of the
350:30 - time that's a really good thing so let's
350:31 - go ahead and we're going to clear that
350:34 - as well
350:36 - as get rid of our conditional formatting
350:40 - rules now another one that I use a lot
350:43 - is this one right here which is the text
350:47 - that contains honestly this one comes a
350:51 - lot in handy especially when you're
350:52 - looking for like a specific keyword in
350:55 - my uh case a lot of times I was using
350:59 - this when I was going through drug names
351:01 - I am not a doctor I do not pretend to be
351:03 - a doctor and so when I was looking for
351:05 - laraza Pam or something like that um I
351:08 - would just search for like lorz or
351:10 - something and and not Lorax but loras
351:12 - you know I I would just search for it
351:15 - and then all the ones that contain that
351:17 - would pop up I can bring them to the top
351:18 - and I can see them and to me that's
351:21 - super super useful and I would do that
351:23 - all the time and so in this case we're
351:25 - looking at emails and let's say we all
351:27 - only wanted to pull all the ones that
351:29 - are Gmail and so now we can go through
351:32 - and we can you know click okay and
351:33 - that's going to pop up or we want all
351:35 - the ones that have Dunder oops Dunder
351:40 - Mifflin and if we click on that all the
351:42 - ones that are Dunder Mifflin come up or
351:44 - have done their Mylin in it and again we
351:46 - can um sort by or we can um and so we
351:50 - can sort by right here and we can bring
351:52 - all those to the top and so super super
351:55 - useful um and another use for it that
351:58 - you may not think of is something like
352:00 - if it's you know there's some incorrect
352:03 - data in there this happens often with
352:05 - phone numbers addresses um start dates
352:09 - or or or dates in general date formats
352:12 - where you can go in here and you can say
352:15 - text that contains and if you know you
352:17 - put in a oops a dash and it has it in
352:21 - there then you know that that is that is
352:23 - wrong now that is really all I wanted to
352:25 - show you in the Highlight cells rules uh
352:27 - the duplicate values and the text
352:28 - contains are by far the ones that I use
352:30 - the most all the other ones I have used
352:33 - um these ones not so much but in these
352:36 - highlight cells rules I use you know
352:38 - these two all the time um sometimes I
352:40 - use this between I don't really use
352:42 - these other ones as much although I have
352:44 - used them and so you got nothing else
352:46 - from this video I just wanted you to
352:48 - know that these two are super useful and
352:51 - if you haven't used them before to maybe
352:52 - try them out and see if you can apply
352:53 - them to your own data sets now we've
352:56 - looked at all of these preset ones in
352:58 - conditional formatting but you can also
353:01 - do a new rule and so if we click on new
353:03 - rule right here and we go down to use a
353:05 - formula to determine which cells to
353:07 - format we can add our own formula in
353:10 - here that will then highlight exactly
353:13 - what we want and so if there isn't a
353:15 - preset rule that you like and it doesn't
353:18 - have the option that you want you can do
353:20 - almost any formula that you want in our
353:22 - formulas video that we did a few weeks
353:24 - ago and you can put it in here and then
353:26 - you can format uh what you want the cell
353:28 - to look like if it meets that criteria
353:31 - so let's take this right over here um
353:33 - and before we start this formula I just
353:35 - want you to note that you know I have
353:38 - h11 highlighted that's going to come
353:39 - into play in just a little bit but I
353:41 - want you to be aware that h11 is the
353:43 - cell that we're highlighted so what
353:45 - we're going to do is we are going to
353:47 - create our formula now if you've never
353:50 - created a formula I highly recommend uh
353:52 - watching my formulas tutorial because
353:54 - that is going to show you how to do this
353:56 - um but we're all we're going to do is
353:58 - we're going to do equals that's how you
354:00 - start the uh how you actually create a
354:02 - formula and we're going to give it this
354:04 - range right here and so it's going to
354:07 - take everything from G2 to G10 now these
354:10 - dollar signs are super important if you
354:13 - don't know how to use them or you don't
354:14 - know what they do um you're going to
354:16 - mess up this formula a lot uh and so
354:19 - what this dollar sign basically does is
354:21 - it's basically hardcoding it in there it
354:24 - is only going to look at G2 and is only
354:26 - going to look at G10 or through G10
354:28 - because that colon and this can come
354:31 - into play because if you have something
354:33 - selected like the h11 it's going to mess
354:36 - it up because now if you have h11
354:39 - selected like we do you'll see this in a
354:40 - second it's not going to be applied to
354:43 - this um and again I'll show you that in
354:46 - just a minute but we don't want this
354:47 - hardcoded in there okay but we do have
354:51 - to select the proper range in a second
354:54 - um so we're going to get rid of this
354:55 - we're going to get rid of the dollar
354:56 - signs because we want to pretty fluid
354:59 - and be able to applied to be applied
355:01 - basically anywhere we want let's go into
355:03 - this
355:03 - formula um if it meets our criteria
355:07 - let's give it um let's give it a border
355:10 - and we'll give it um we'll give it some
355:13 - color we're going to say if this is
355:15 - greater than
355:16 - 50,000 so let's hit okay and nothing
355:21 - happened so let's go back and see why so
355:24 - if we go to our manage rules you can see
355:26 - that so as the G2 to G G10 is greater
355:28 - than 50,000 but it only is being applied
355:30 - to this h11 cell which really makes no
355:34 - sense um so if we had wanted to get it
355:36 - done the first time we needed to have
355:38 - basically selected that G2 to G10 right
355:41 - away um but we can do that now so let's
355:43 - get rid of this and we're going to say
355:47 - G2 to
355:48 - G10 and that is hardcoded in there
355:51 - that's should be fine still um but let's
355:54 - see what it
355:55 - does and so now every every single thing
355:58 - is highlighted and why is that uh that's
356:01 - because when we changed it it also
356:04 - changed the format of it because we
356:06 - changed the cell that we were looking at
356:09 - so we need to come back here and that's
356:11 - why again you want to do this the right
356:12 - way the first time we're going to come
356:13 - back here we're going to give it this
356:15 - range and we're going to get rid of
356:17 - these dollar
356:19 - [Music]
356:21 - signs and now we're going to hit okay
356:25 - and so now it's being applied G2 to G10
356:28 - and G2 to G10 and we'll keep it like
356:30 - that and we'll apply it and now it works
356:33 - properly so now everything that's above
356:35 - 50,000 is being highlighted again if
356:37 - that was confusing um it it is confusing
356:40 - it genuinely is and so if you wanted to
356:42 - do this right the first time without
356:43 - having to make a bunch of changes you'd
356:45 - want to highlight these before you start
356:48 - and then you want to go in and create
356:50 - the rule we'll do this really quick just
356:52 - to kind of show you what I'm talking
356:53 - about we'll say equals we'll give it
356:56 - this range
356:59 - get rid of these real quick because
357:02 - again I don't want this hardcoded in
357:05 - there it will ruin our formula and then
357:07 - we'll say greater than 30 um and we'll
357:10 - give this nice green uh and so now if
357:14 - they're over the age of 30 it will be
357:16 - highlighted and we didn't have to go
357:17 - back and change anything we didn't have
357:19 - to go back and fix anything like we did
357:20 - in the first one um that was all for
357:23 - demonstration purposes but again you
357:25 - need to really be aware of that that is
357:27 - something that I think think almost
357:28 - everybody's going to mess up at some
357:30 - point if you don't already know about it
357:32 - then you definitely are going to make
357:34 - that mistake now if we come over here in
357:36 - this area uh we go to our manage rules
357:39 - and not just the current selection but
357:40 - this whole worksheet then you can see
357:42 - that we have these two formulas now you
357:44 - can go in and edit any of these by
357:45 - double clicking or clicking on it and
357:47 - then hitting edit rule you can also
357:49 - delete these rules or duplicate these
357:51 - rules um I just wanted to show you what
357:53 - you are able to do with them but if we
357:55 - uh go ahead and we get rid of this um so
357:58 - let's say we delete that rule and we hit
358:01 - apply uh you know the rule is going to
358:02 - go away that's that I mean it's as
358:04 - simple as that so that is how you can
358:07 - create your own rule I want to be again
358:10 - very specific in the fact that that is a
358:12 - confusing piece and if you mess that up
358:15 - you're going to be you know fixing a
358:17 - bunch of different stuff and not
358:19 - understanding why your rule is not
358:21 - working properly it's just because it's
358:23 - confusing those dollar signs are are
358:25 - really important to watch out for and
358:27 - that is all all there is to it with
358:28 - conditional formatting again conditional
358:30 - formatting is um you know it's not
358:33 - anything super confusing we've looked at
358:35 - more complicated things but it's a
358:37 - really really useful tool to use to look
358:40 - at these patterns and Trends super
358:41 - quickly and to find um these outliers or
358:44 - these specific values that you're
358:45 - looking for very quickly and if you're
358:47 - looking at just thousands and tens of
358:50 - thousands or hundreds of thousands of
358:51 - rows this is one of the fastest ways to
358:54 - find these things without having to kind
358:56 - of wait and filter and use these um
358:59 - these these filters right here because
359:00 - again this can just take forever um and
359:03 - so if you haven't or if you've never
359:05 - worked with a ton of data and tried to
359:06 - use this before it can take honestly
359:09 - like 10 minutes for something simple
359:11 - that you could do with conditional
359:12 - formatting in like 10 seconds so
359:14 - definitely something to mess with and
359:15 - use when you are working with your own
359:17 - data sets uh I hope this was helpful I
359:19 - mean honestly I use this all the time so
359:21 - you know I hope that somebody out there
359:23 - can can use this uh for their own work
359:26 - that they're currently using thank you
359:28 - guys so much for watching I really
359:29 - appreciate it again huge shout out to
359:31 - you me for sponsoring this Excel series
359:33 - if you like this video be sure to like
359:34 - And subscribe below I'll see you in the
359:36 - next
359:38 - [Music]
359:48 - video what's going on everybody welcome
359:50 - back to another Excel tutorial today we
359:52 - will be looking at
359:55 - [Music]
359:56 - charts
360:00 - now if you have data in Excel and you
360:01 - want to visually show that with bars or
360:04 - graphs or anything like that you can do
360:06 - that really simply and I'm going to show
360:07 - you how to do that today and a lot of
360:09 - people are a little bit intimidated
360:11 - because they think it's a little bit
360:12 - complicated but I promise you by the end
360:14 - of this video you will know how to do it
360:16 - like a pro it's not that difficult it's
360:19 - just you need to know where to look
360:21 - where to click and how to actually
360:22 - filter through things to make sure that
360:24 - you're visually showing the things that
360:25 - you want to show but before we actually
360:27 - jump into the the tutorial I want to
360:28 - give a huge shout out to the sponsor of
360:29 - this Excel series and that is udem me
360:32 - you may not know this but I probably get
360:33 - at least 15 to 50 companies every single
360:36 - month reaching out to me wanting to
360:38 - sponsor the channel and promote their
360:39 - product and I turn down almost every
360:41 - single one because I either don't know
360:43 - their product or I don't believe in
360:44 - their product and so I'm not going to
360:46 - you know go and promote that on my
360:47 - channel but unud me is one that I have
360:49 - consistently promoted over the past year
360:51 - and that's because I truly believe in
360:53 - their product I've been taking courses
360:54 - off their platform for years and I've
360:56 - honestly learned so much and I cannot
360:58 - recommend them enough so if you want to
361:00 - take a full-fledged Excel course I have
361:02 - my recommendations in the description if
361:04 - you want to check those out thank you
361:06 - again to UD me for sponsoring this Excel
361:08 - Series so without further Ado let's jump
361:10 - onto my screen and get started with the
361:11 - tutorial all right so let's jump right
361:13 - into it right here we have the Dunder
361:15 - Mifflin sales report and over here we
361:17 - have all the products that they were
361:18 - selling along with the months that they
361:20 - were sold in and so in January they sold
361:23 - 450 reams of paper down here we have the
361:26 - total it items per month and so in
361:29 - January they sold 898 units of uh
361:32 - products or or things that they sold at
361:34 - the very end we have the year end total
361:36 - so this is the total amount of paper
361:38 - that they sold throughout the year now
361:40 - we're going to use this data right here
361:42 - for all of our charts now you may not
361:45 - have data exactly like this it can come
361:47 - in lots of different flavors but you're
361:49 - going to get the basic gist of how to
361:51 - use charts how to edit it how to
361:54 - customize it to fit what you need and
361:56 - then we're going to kind of put it right
361:57 - over here and kind of create its own
361:59 - sheet where we can kind of visualize all
362:02 - the things that we want to
362:04 - show so let's jump right back over here
362:07 - into sales and first thing we need to do
362:10 - is kind of highlight the data that we're
362:12 - going to be working with now I'm going
362:13 - to start with everything but um you know
362:15 - I'll show you along the way we don't
362:17 - actually want everything but we can
362:19 - filter that stuff out as we go so let's
362:22 - go right here and we're going to insert
362:24 - and we're going to go over to charts now
362:27 - this is the chart section there's lots
362:28 - of different types of charts um but the
362:31 - first thing that we're going to be
362:32 - looking at is right here this is a 2d
362:35 - column or kind of like a bar chart and
362:37 - we're just going to click right here and
362:39 - we're going to pull this
362:40 - down so now that we have this down here
362:44 - there are a few things that I want to
362:45 - show you before we actually really get
362:47 - into it I kind of want to show you the
362:49 - options that you have so if you go up
362:51 - here we have different uh chart Styles
362:55 - and so if I hover over them you can see
362:57 - that each one kind of looks a little bit
363:00 - different and it really doesn't matter
363:03 - uh it doesn't really change the data in
363:05 - any way just how you visualize it and so
363:08 - if that is important if that is
363:10 - something that you um you want to stick
363:12 - with a certain theme or a certain look
363:14 - then go for that uh the other thing
363:16 - that's really nice to have over here is
363:18 - this switch row and column so right down
363:21 - here you can see this purple and you can
363:23 - see this red those are our rows and
363:25 - columns and we can switch that right
363:27 - here so if we go like this now instead
363:30 - of the months being right here the
363:32 - months are the colors and the actual
363:34 - product is right here let's click it
363:36 - again and it'll go back and so now we
363:38 - have this kind of Time series now we
363:40 - have January through the end of your
363:42 - total now this one is one that I think
363:45 - is super helpful you know it you can do
363:48 - it down here as well if you go to this
363:49 - filter um but both of these are super
363:53 - helpful because you sometimes just want
363:55 - to select all the data and then kind of
363:56 - get in there and mess with with it
363:58 - something that we want to get rid of is
363:59 - this total items per month so we want to
364:02 - remove that and then we also want to
364:04 - remove this year-end total because both
364:06 - of those are are kind of the end result
364:10 - they're not the actual data per month or
364:13 - or per product so we're going to get rid
364:14 - of those and we're going to apply that
364:16 - and as you can see just right off the
364:18 - bat our data is changed dramatically uh
364:20 - and that's because we aren't including
364:22 - these these large large numbers that
364:24 - were kind of throwing off uh the
364:26 - visualization for us so this one right
364:29 - here as is is already pretty good um
364:34 - what we can do right here is we can
364:35 - change this and we're just going to
364:37 - say products
364:40 - sold per
364:43 - month now what we can do if we want to
364:45 - move it to another um to another sheet
364:48 - is we can actually move the chart and we
364:50 - can select where we want to move it we
364:53 - can move it to chart sheet and we can do
364:54 - that or something that I do um almost
364:57 - 99% of the time I just copy and I come
365:00 - over here and I'm going to paste it and
365:03 - so now we have this um this chart right
365:06 - over here as well as back here and so I
365:11 - typically tend to do that because now we
365:13 - can still go over here and change this
365:15 - one as much as we want so if we want to
365:17 - go in here we can alter this one and it
365:18 - won't affect the other one so we just
365:20 - have basically two copies so we're going
365:22 - to keep this one right here this is
365:23 - going to be our first
365:25 - visualization um and as I said said it's
365:27 - it's fairly straightforward if you've
365:29 - ever done any types of charts or graphs
365:31 - before um right here it's January
365:33 - February March April May and if you
365:35 - hover over these you can see that that's
365:38 - the the paper and if we just glance you
365:40 - know the paper is their biggest product
365:42 - by far and so that blue um which is
365:45 - their paper is going to be the biggest
365:47 - every single month so that makes perfect
365:49 - sense now what if we want to change up
365:52 - uh the the kind so what if we want to
365:55 - change up the kind of visualization that
365:57 - it offers us well we have a lot of
366:00 - different options let's go right over
366:02 - here to change chart type now this is
366:05 - going to offer you just about everything
366:08 - you could possibly imagine or want and
366:11 - even things that you absolutely would
366:12 - never ever want ever um and so I'm going
366:15 - to show you some of the good ones and
366:17 - I'm going to show you some just
366:18 - absolutely insane ones that uh Excel
366:21 - came up with which cannot I could not
366:23 - imagine a scenario that these are ever
366:25 - used um but Within These columns you can
366:28 - do they're called cluster columns uh
366:31 - these stacked columns so would look just
366:33 - like this those are often used as
366:36 - well um and then we have ones that
366:39 - they're just not used often let's look
366:41 - let's take a look at this one right
366:43 - here I mean it's tough it's tough to
366:46 - look at um but let's let's put it right
366:48 - here this is basically the same thing
366:51 - that we just had except visualized in a
366:54 - different um we'll call it more unique
366:56 - way
366:57 - uh and let's for the sake of it let's
366:59 - put it over here um these two things
367:02 - show the same information they show the
367:04 - same data just one is shown well and one
367:08 - is not shown well um I'm not a fan of
367:11 - these 3D type of
367:13 - visualizations I I just don't like them
367:16 - but maybe you do and and you want to use
367:19 - that that's fantastic let's go back um
367:22 - something else that you'll probably use
367:24 - a lot are things like these um these
367:27 - line graphs okay so these are line
367:29 - graphs and they're different types so
367:31 - they're these stacked um 100% stacked
367:35 - line lines with markers different
367:37 - flavors for this this type of line graph
367:40 - and so you can go in here and take a
367:42 - look again um not my favorite but they
367:47 - have it as an option if you CH so choose
367:49 - to do this um but I kind of I'm kind of
367:52 - a simple guy um but I'm going to go in
367:54 - here and it's pretty cluster
367:57 - um I want to kind of take the ones that
367:59 - have the highest
368:01 - sales or the highest total amount sold
368:04 - so that would be paper manila folders
368:07 - and three ring binders so let's go in
368:10 - here we want to keep paper we want to
368:14 - keep uh manila
368:16 - folders and we want to keep three ring
368:19 - binders and let's apply that and so now
368:22 - it's a lot cleaner and we're just going
368:24 - to copy this and we're going to put it
368:27 - over here and I'm just putting these all
368:29 - over here for you U because we'll look
368:30 - at this at the end and just kind of see
368:32 - different options and and ways to do
368:34 - things as we have gone through this
368:36 - tutorial so let's go back here now
368:39 - something else that we haven't looked at
368:41 - is the actual colors and color schemes
368:44 - that you can do so let's go right here
368:46 - to these chart Styles and we can go to
368:48 - color now color is um something that
368:52 - probably is quite overlooked um in
368:55 - actual charts and graphs some terrible
368:57 - colors like this or or this um where
369:00 - they're really close together especially
369:02 - when you have a lot of them um for
369:04 - example let's just pretend we put all of
369:07 - them back really quickly it is near
369:11 - impossible to distinguish these colors
369:14 - um we
369:15 - wouldn't we wouldn't want that let's go
369:17 - back to this color you know when you
369:19 - have it like uh in some of these colors
369:21 - at least it at least distinguishes them
369:24 - so you can kind of see what you're
369:26 - working with with um but when you have
369:28 - it in these monochromatic options
369:31 - sometimes they're just impossible to
369:32 - distinguish so be sure to choose the
369:34 - right colors that you're using so that
369:37 - if somebody who's never seen this data
369:38 - before looks at it they can easily
369:41 - distinguish uh the product and the month
369:44 - that you are looking at but let's go
369:46 - just back up here we'll choose this
369:48 - default option um well let's choose this
369:50 - one right here this one's nice although
369:52 - there's lots of yellows and oranges
369:54 - let's see this one this one's not bad
369:56 - greens blues uh and like yellows so
370:00 - that's nice um other things that we want
370:03 - to look at and there are these chart
370:05 - elements right here other things that we
370:07 - can add are things like data labels um
370:11 - and right here it's super messy um but
370:14 - if we went back and we got rid of some
370:16 - of these things like the printer Staples
370:20 - highlighters pens and total we apply
370:23 - that it's a little bit easier to
370:25 - distinguish um
370:27 - and that's you know something that you
370:29 - may be interested in doing you can also
370:31 - add this data table at the bottom which
370:33 - is the actual columns and rows that you
370:36 - have for this visualization right here
370:38 - now let's expand this quite a bit I'm
370:40 - going to make this extremely large if
370:42 - you have something like this it actually
370:44 - can be pretty nice um you know maybe we
370:47 - get rid of these data labels but it can
370:50 - be easy because you're putting it all in
370:51 - one place you can also make this two
370:53 - separate visualizations so you can have
370:55 - one visualization just like this and
370:56 - right underneath it you can have the
370:58 - actual rows and columns but this option
371:01 - allows you to put it all in one so let's
371:03 - put this back down because that is way
371:06 - too big and uh wait let's expand it a
371:09 - little bit now if you notice right here
371:11 - we have our Legend up top um it is
371:14 - possible to actually change that you can
371:16 - go right here and you can move this um
371:19 - kind of wherever you want um but it's
371:22 - not exactly easy to put based off how we
371:25 - have it right here if we go into to this
371:28 - chart elements we go down to Legend and
371:30 - we hit this little arrow right here we
371:32 - can select it on the right the top the
371:35 - left and the bottom or we can just go to
371:38 - more options uh which allows us to push
371:40 - it anywhere but um let's say I want to
371:42 - do it just like this I'm going to put on
371:44 - the right and I actually want to bring
371:46 - it down right here and you know that's
371:50 - just an option if you want to kind of
371:52 - customize it a little further makes a
371:53 - little cleaner uh you can do that with
371:55 - almost any of these things so if you
371:56 - click on this oops if you click on this
371:59 - you can move this anywhere as well so if
372:01 - you want to move this over here on top
372:03 - of it you can and make it look terrible
372:04 - or you can move it uh right back over
372:06 - here you know this is something that you
372:08 - can move around uh you just kind of want
372:10 - to make sure you're doing it the right
372:12 - way so let's get this back where was
372:14 - there we go now before we go any further
372:16 - let's copy that and put it right over
372:19 - here with our other uh charts and graphs
372:23 - and if you see over here on this side we
372:26 - have this this format chart area notice
372:27 - I haven't showed you this at all yet
372:30 - that is because I genuinely just don't
372:32 - use this almost at all um there are some
372:35 - good stuff in here um and I'm sure that
372:37 - you know if you were someone who really
372:39 - wants to go in there and super customize
372:41 - it you can do that um but I honestly I
372:44 - just never get in here and I never you
372:46 - know change the glow or the Shadows um
372:50 - just not something I use and some of
372:52 - these are only for these three 3D
372:53 - formatting which I never use and so I'm
372:56 - not going to show you and walk through
372:57 - these things again I I really don't use
373:00 - it and so if you want to go in there and
373:02 - mess with it uh you know by all means go
373:04 - for it it's just not something that I
373:06 - want to take the time to show you and
373:08 - with that being said let's go back over
373:10 - to this chart sheet that we have and it
373:12 - was super super easy to get these um
373:16 - charts and graphs and and and whatnot
373:18 - there are lots of different options
373:20 - again if we go back here and we go up
373:23 - here to chart design and go to the
373:25 - change chart type and again there are a
373:28 - ton of different options like a pie
373:30 - chart um like this it's it's you know
373:34 - you can try to figure this out and use
373:36 - these um but you know I wanted to show
373:39 - you the ones that you'll probably use
373:40 - the most which are these columns and
373:42 - line charts and they all kind of are
373:45 - similar in their own way this bar chart
373:47 - is basically you know this column chart
373:50 - just on its side and so they all have
373:52 - their different flavor they all have
373:54 - their different way of visualizing the
373:55 - data but but in essence they're using
373:57 - the data in a similar way to to
373:59 - visualize it and represent the data
374:00 - itself especially things like these box
374:02 - and whisker plots or these waterfall
374:04 - charts uh you know these are things that
374:07 - usually require specific data to kind of
374:10 - use uh and and so I'm just using data
374:13 - that you'll probably see the most of um
374:15 - like this this sales data so I hope that
374:18 - this given you a pretty good um you know
374:20 - quick understanding of how to use these
374:22 - how to customize them how to copy and
374:25 - paste them over to to a different sheet
374:27 - to create some type of little uh chart
374:30 - and visualization sheet that you can use
374:32 - to show your employers and and visualize
374:34 - the data that you are working with thank
374:36 - you guys so much for watching I really
374:38 - appreciate it again huge shout out to
374:40 - you to me for sponsoring this Excel
374:41 - series if you like this video be sure to
374:44 - like And subscribe below and I'll see
374:45 - you in the next
374:47 - [Music]
374:55 - video
374:58 - what's going on everybody welcome back
375:00 - to the Excel tutorial Series today we'll
375:02 - be looking at how to clean data in
375:05 - [Music]
375:09 - Excel now knowing how to clean data in
375:11 - Excel is actually extremely useful and
375:13 - there are a ton of techniques to do this
375:15 - I'm going to be showing you the ones
375:16 - that I probably use the most I feel like
375:18 - are the most helpful to kind of do the
375:21 - bulk or the majority of the data
375:23 - cleaning that you're going to do in
375:24 - Excel like I said there's so many
375:26 - different ways and very specific things
375:28 - that you can do but I'm going to
375:29 - highlight some of the bigger ones that I
375:31 - find the most useful and some of you may
375:33 - be thinking well I'll just do my data
375:34 - cleaning in SQL or python or when I get
375:36 - it ready to put it in Tableau um but
375:39 - honestly a lot of the data cleaning at
375:41 - least a lot of the big stuff I tend to
375:42 - do in Excel IF the data set is small
375:45 - enough to fit in Excel and so I think
375:46 - it's actually really really useful to
375:48 - know how to do this because you'll most
375:50 - likely be doing it more than you think
375:52 - now before we jump into the tutorial I
375:54 - want to give a shout out to the sponsor
375:55 - of this video and is brand new sponsor
375:57 - it is unlocked by Z by HP unlocked is a
376:00 - movie that's actually broken up into
376:01 - four parts and each of them have a
376:03 - unique data science challenge associated
376:05 - with it now I'm going to read this next
376:07 - part because it's extremely interesting
376:09 - each challenge represents a different
376:10 - topic so there's data visualization text
376:12 - analysis audio signal processing and
376:14 - computer vision and you can submit your
376:16 - answers in your work on their website
376:18 - for a chance to win one of 10 zbook
376:20 - Studio laptops or a free trip to the
376:22 - kaggle World Championships so I'll leave
376:24 - a link in the description where you can
376:25 - go watch the movie and then do the
376:27 - challenges and then submit your answers
376:28 - for a chance to win you should also go
376:30 - check out their hackathon where you can
376:31 - do these projects with other people just
376:33 - like you who are trying to figure out
376:34 - these answers and submit them to win as
376:36 - well so go check that out thank you
376:38 - again to the sponsor of this video
376:40 - unlocked by Z by HP now without further
376:43 - Ado let's jump onto my screen and get
376:44 - started with the tutorial all right so
376:46 - let's jump right into it I have this US
376:47 - president data set I got the base data
376:50 - set from kaggle uh but I added some of
376:52 - my own data and then I messed some stuff
376:54 - up as well just to kind of um
376:56 - demonstrate some of these things that
376:57 - we're going to be looking at today this
376:59 - is not a full project so you know we're
377:02 - actually going to be using this to
377:03 - create any visualizations or anything
377:04 - like that so you know all this is just
377:06 - for demonstration purposes but we will
377:09 - be doing a full project in about two or
377:12 - three videos uh in this Excel Series
377:15 - where we're going to be doing from start
377:16 - to finish with a real data set so you
377:18 - know if that's something that you're you
377:20 - wanting then we will absolutely be doing
377:22 - that now something that you may be
377:23 - wondering is how do you actually
377:25 - identify what you need need to clean in
377:26 - the data what do you know to look for
377:29 - well some of the obvious things are
377:30 - things like formatting and
377:32 - standardization so things like you know
377:34 - this James Monroe is in all caps that
377:36 - happens all the time within real data um
377:39 - and and so you know you want to
377:40 - standardize that or this all lowercase
377:42 - you want to standardize that you want
377:43 - that all to be the same there's also
377:46 - things like um right here or we have
377:49 - this wig and this wig with a bunch of
377:51 - random stuff after it this happens all
377:54 - the time where it's not completely
377:56 - standardized um and you may even notice
377:59 - um you know there are some spelling
378:01 - errors in here and I'll we'll kind of
378:02 - look through that in a little bit and
378:04 - then you know there are things like
378:07 - additional spaces where there shouldn't
378:09 - be spaces there are things like
378:10 - currencies that you need to be aware of
378:12 - if you were importing this into or going
378:14 - to be importing this into a SQL database
378:16 - um things like currencies can be just a
378:20 - problem or be really um unnecessary it
378:24 - may actually cause more issues in the
378:25 - long run so you may just want to you
378:27 - know take that to the base value and
378:30 - then dates are always an issue always
378:32 - always always um so always look at your
378:34 - dates make sure they're they're
378:36 - formatted correctly make sure they're
378:37 - all the same these are the types of
378:39 - things that right when I glance at this
378:41 - data set these are things that I'm
378:43 - looking for um one other thing that is
378:46 - actually the first thing that we're
378:47 - going to start out with is you want to
378:48 - make sure that your data is not
378:51 - duplicated because if your data has
378:53 - duplicate data in it and you don't want
378:56 - that it's not supposed to be there there
378:57 - are some specific use cases where
379:00 - duplicated data is okay um you know you
379:03 - want to get rid of that and it's very
379:05 - easy to do in Excel uh the first thing
379:07 - we're going to do we're going to go uh
379:09 - to this data tab we're going to go right
379:11 - over here and we're going to get see if
379:12 - there's any uh duplicates in our data so
379:14 - we're just going to go up to remove
379:16 - duplicates it's going to automatically
379:18 - choose all of your columns to to check
379:20 - against so it's going to for from a all
379:23 - the way through I it's going to see is
379:25 - the exact same data in all these rows
379:27 - and if it is it's going to get rid of it
379:29 - um and so we're going to click okay and
379:32 - it did find one duplicate and I'll show
379:33 - you that one real quick um because you
379:36 - know it was right here so Barack Obama
379:39 - was here twice and then I'm going to hit
379:40 - control I hit control Z to go back I'm
379:43 - going hit control y to go forward and it
379:46 - removed that uh that row completely now
379:50 - in this example you may be able to spot
379:51 - that with your eye but in a real data
379:53 - set where you have 10,000 100,000 rows
379:56 - there's absolutely no way you're going
379:57 - to see that or very very unlikely that
380:00 - you are going to see that there's
380:01 - duplicated data in there so just running
380:03 - a a a quick um dup or or removing of
380:06 - duplicates that is really important to
380:09 - make sure that you um have gotten rid of
380:11 - those things so that's one of the first
380:13 - things that I do um we're going to go
380:15 - into a lot of these different uh columns
380:18 - and I'm going to kind of show you
380:19 - different techniques or things that I do
380:21 - when I look at actual data so I'm going
380:23 - to come right over here I'm going to
380:26 - insert and this is what I actually do I
380:28 - I usually create a separate column
380:29 - especially when I'm working with this
380:30 - because I don't want to change this one
380:33 - um I don't want to go in here and you
380:35 - know say um equals upper equals proper
380:39 - Etc there's a lot of different ways that
380:41 - you can change um names or not a lot but
380:44 - the main ones that you can change names
380:45 - and all of them are completely okay so
380:48 - for example I'm going to hit equal upper
380:51 - oops upper and I'm going to go like this
380:53 - and close my parentheses so I selected
380:55 - this S I close my parenthese hit enter
380:58 - it is and I'm going to hit um in the
381:00 - bottom right I'm going toit double click
381:01 - this and it's going to apply to all of
381:03 - them it is completely okay to have your
381:05 - data like this if you want it to be like
381:07 - that um if you want it to be all lower
381:09 - you can do that if you want it to be in
381:11 - proper case you can do that um there are
381:14 - oops there are different um uses for all
381:18 - of them and honestly as long as it's all
381:20 - the same typically it's okay but if um
381:23 - you know for example if you're selling
381:24 - this to like a third party company or
381:26 - something like that they may have um
381:28 - what they want for their ingestion
381:30 - process when they take your file in if
381:33 - you send you know a weekly file or a
381:34 - monthly file they may want it exactly
381:37 - how they want it and you can change that
381:39 - to to what they want um but as long as
381:42 - it's standardized for you it's all the
381:43 - same for you that is a good thing so now
381:46 - we have all of these um in the proper
381:49 - case that's typically what I I do or I
381:52 - use upper those are the ones I use the
381:55 - most I don't usually use um lower and if
381:57 - you go in here and you type in
382:00 - lower you know it changes it to all
382:02 - lower I don't typically do that um and
382:04 - I'm gon to add I'm oops I'm gonna say
382:07 - president Dash fixed and so now all of
382:12 - these names um all of these uh different
382:15 - uppercase and lowercase these are all
382:16 - fixed and and it just makes it so much
382:19 - easier to read and you don't have
382:21 - different um uppercase and lowercase
382:23 - issues it's all the same so I'm going to
382:25 - keep keep that right
382:26 - there uh if we move a little bit to the
382:30 - right if you look at this prior now this
382:34 - prior is a mess it it has stuff all over
382:38 - and to be honest this is not really
382:40 - something that I would probably be using
382:43 - um like in a real data set I would look
382:45 - at this column and I would say this is
382:46 - pretty useless um if I had a very
382:50 - specific use case for this this data in
382:52 - this column I might try to you know
382:54 - parse it out and do something but I
382:56 - don't uh this this is a completely
382:58 - useless com to me so I'm actually going
382:59 - to skip this one I'm going to go to this
383:01 - party one and this party one to me it
383:04 - looks pretty important because this is
383:05 - something that I know I can Group by um
383:07 - and I can create visualizations with and
383:10 - and kind of break that out and if you
383:13 - look right here we're going to add um
383:15 - we're going to add a filter so now let's
383:17 - open up party and take a look so if we
383:21 - look right here we have Democratic
383:23 - democratic-republican Federalist
383:24 - nonpartisan repu Republican Republicans
383:27 - wig and wig with a a date and some
383:29 - information in the back of it and then
383:31 - some blanks um and it's really important
383:34 - when we're when we're looking at these
383:36 - um ones that we think we might Group by
383:38 - that we have these um properly grouped
383:42 - so Republican and Republicans to me
383:44 - right off the bat looks like a spelling
383:45 - error and so I'm just going to deselect
383:48 - All I'm going to go to Republican
383:51 - Republicans and it's literally
383:54 - Republican all the way down except for
383:55 - for this last one and to me that's just
383:58 - something that I would update so I would
383:59 - just go right here I do that if I didn't
384:02 - do that and then I try to create let's
384:04 - say a pivot table on here I'll have its
384:06 - own group of Republicans and it wouldn't
384:08 - be added to Republican and maybe that's
384:10 - on purpose but let's just presume that
384:13 - we know this data extremely well and
384:15 - that's not supposed to be like that
384:16 - right again that that just comes back to
384:18 - knowing your data really well
384:20 - understanding what it um you know what
384:22 - it should look like and we know that it
384:24 - should not be like that so we're going
384:25 - to fix that uh the next thing that we're
384:27 - going to fix um and as you can see it it
384:29 - got rid of it next thing we're going to
384:31 - fix is this wig
384:33 - um that's just like an error that's
384:36 - that's some issue on the the data side
384:41 - and we're just going to fix that by
384:43 - updating it and that's it I would always
384:46 - be keeping um a a copy of this with the
384:49 - raw data uh somewhere else because this
384:52 - is presumably like a working document
384:54 - this is not
384:55 - a um you know you aren't saving over
385:00 - your original file let's just say that
385:01 - and then let's take a look at these
385:02 - blanks real quick um okay so there are
385:07 - these rows right here that have nothing
385:09 - I think we're okay but if we see
385:12 - anything different 47 48 okay so yeah
385:15 - it's just these ones right here that
385:16 - have no data in it anyways it's just
385:18 - seeing it in the filter so not an issue
385:21 - at all so okay we're looking good we've
385:24 - gone all the way over we we fixed this
385:26 - President we skipped this one um we we
385:29 - cleaned up this party and I kept this
385:31 - one in here because I'm not exactly sure
385:33 - if that's a Democratic or republican so
385:35 - I'm going to keep it its own thing um
385:37 - I'm not a huge uh history buff in that
385:40 - aspect the next one right here is um the
385:45 - next one right here is really easy uh
385:47 - this is something that happens all the
385:49 - time especially on actually most often
385:52 - it's happens on numerical data so like
385:56 - uh you know there'll be a number of 1,1
385:59 - and then there'll be a space after it
386:00 - for absolutely no reason uh and it
386:02 - happens all the time it does happen like
386:05 - this as well um where you'll see this
386:07 - and all you got to do is do trim and
386:10 - select the the cell we're going to close
386:12 - that parenthesis and we're going to
386:14 - apply that all the way down what is so
386:16 - fantastic about the trim is that it's
386:18 - really intuitive and it knows basically
386:21 - everything it needs to do for example um
386:24 - it gets gets rid of the um spaces before
386:28 - it gets rid of extra spaces in the
386:30 - middle and um it'll get rid of extra
386:33 - spaces at the end um which you wouldn't
386:36 - be able to see but they are there and
386:37 - they they absolutely can cause issues if
386:40 - you have spaces at the end that you
386:41 - cannot see um let's take this one for
386:44 - example like if I had spaces at the end
386:46 - that can cause issues when you insert or
386:49 - or or put that into a database um that
386:51 - happens a lot with numbers um you know
386:53 - when you're putting that into SQL
386:55 - that can cause issues and so you really
386:57 - it is important to actually do that trim
387:00 - um and you can do that on all of your
387:02 - columns or just ones that you know
387:03 - you're having issues with but once you
387:05 - import that data into SQL you will know
387:07 - if there's an issue or not when you
387:08 - actually try to start using it so we're
387:11 - going to say Vice and we're going to say
387:14 - fixed oops there we go uh this next one
387:19 - is one that you'll run into a lot when
387:21 - you're working with numerical data you
387:24 - will encounter so many different issues
387:27 - um one that I run into a lot is I I've
387:30 - worked with a lot of cost data or
387:32 - pricing data and when it's in an Excel
387:35 - it h it sometimes comes in with um these
387:38 - currencies like a dollar sign a pound
387:40 - sign things like that and when you put
387:43 - that into
387:44 - SQL it just is a nuisance right you're
387:47 - not going to be able to run um it's
387:51 - going to go in as a text or it's going
387:52 - to be like a string right because it has
387:55 - that special character and you don't
387:56 - want that you don't want to have to then
387:58 - go in and then change things around you
388:00 - just want to be able to start um you
388:02 - know doing calculations on those numbers
388:05 - so what you can do is sometimes it'll
388:07 - come in as a text sometimes it'll come
388:09 - in as um currency which I think this
388:12 - one's a currency we are just going to
388:14 - change that to be a number and then
388:17 - we're going to get rid of these
388:19 - oops and get rid of those that it
388:23 - doesn't look as pretty but that is much
388:25 - more useful than actually having the
388:28 - currency on there with the decimals this
388:31 - actually is so much easier when you when
388:33 - you want to use it for almost anything
388:34 - because you're able to add and uh do
388:38 - things properly in other systems in
388:39 - Excel I think it does understand it um
388:42 - but you know that can cause issues so
388:45 - there is how you do that the next thing
388:47 - that we're going to look at is these
388:48 - dates and just notoriously whenever I
388:51 - see a date field I know there's going to
388:53 - be an issue with it it's very rare
388:55 - that I get a date field that is perfect
388:59 - uh it just it is genuinely is um is a
389:02 - novelty when that happens and most of
389:05 - the time it has to do with um let's say
389:08 - a date comes into Excel and it's in a
389:10 - text format or date comes into Excel and
389:12 - they're not the same in this example
389:14 - they are not the same um and we just
389:17 - want them to all be similar they say
389:19 - date on if you look right here it says
389:21 - date it says date it looks like it
389:24 - should be the the same um but if we go
389:28 - like this it all looks the same right
389:31 - there's no issues at all if we were to
389:34 - um try to use that it may or may not be
389:38 - an issue but we don't want to leave that
389:39 - to chance later on if you're using this
389:41 - with python or something like that it
389:43 - can cause issues U maybe not in SQL
389:45 - because it may um see the underlying um
389:48 - what's in the underlying cell not just
389:50 - what we see but some systems won't and
389:53 - so you want to make sure that they're
389:54 - all the same
389:55 - and so you know what we were doing back
389:57 - here with um oops with the party and we
390:00 - were looking at this uh this filter and
390:02 - identifying the issues I usually do that
390:05 - on date fields as well and and
390:06 - oftentimes um I know just for just for
390:09 - demonstration purposes ofttimes I will
390:12 - get something like that and then I'll
390:14 - come up here and I'll notice that
390:16 - there's this one random number that
390:18 - happens all the time all the time um and
390:22 - so you know you want to make sure that
390:25 - you um that you look at these things and
390:28 - just just do at least a quick glance if
390:30 - not kind of doing a kind of a deep dive
390:32 - into it but all we're going to do is
390:34 - we're going to do both of these and
390:36 - we're going to do a short date and let's
390:38 - take a look and see if that fixed it and
390:40 - so now they are all the same format and
390:43 - that is fantastic that is exactly what
390:45 - we want we're going to go back through
390:47 - here we're going to get rid of these um
390:50 - again this is a
390:52 - working um this is a working document
390:56 - oops uh we need to we're I'm going to do
391:00 - um control shift down oops let me go
391:04 - back up do control shift down and copy
391:07 - and what I'm going to do right now is
391:09 - I'm actually going to copy let me do it
391:12 - right here I'll show you sometimes I do
391:13 - this does just depends I'm going to go
391:15 - right here I'm going to hit rightclick
391:17 - and I'm going to paste as a value which
391:20 - means it's not going to take the
391:23 - calculation or the formula that I just
391:24 - did
391:25 - uh it's going to actually paste it as
391:27 - that value so we just replaced it um
391:29 - right here you can see up here it says
391:31 - equals trim of
391:33 - G2 this now now that I copied and pasted
391:36 - it over as a value um it got rid of that
391:41 - um calculation and now it is actually a
391:43 - string so we don't need this anymore and
391:46 - I'll do the same thing over here as
391:49 - well I'm going to control shift down
391:54 - copy and I just hit the right key uh or
391:58 - the left key sorry now I'm going to
391:59 - right click and I'm going to do paste as
392:02 - a value and again it has this proper and
392:06 - now it doesn't have the proper it's
392:07 - actually the value that was here so
392:09 - that's really important to note uh and
392:12 - we're going to get rid of that one and
392:14 - so now what we have is is already
392:16 - looking much better now one of the last
392:18 - things I we're going to look at is
392:19 - deleting columns that we are not going
392:21 - to use and this is why it's so important
392:23 - to keep a backup or or or the raw data
392:26 - not in this file because if you start
392:28 - saving over this file and this is your
392:29 - raw file uh that can mess up a lot of
392:31 - things and that happens to me before and
392:34 - it's terrible and then you have to
392:36 - request another file or you have to go
392:38 - back and find it or something like that
392:40 - it's terrible um so so this is our
392:42 - working document so we can mess with
392:44 - this and do whatever we want for our
392:45 - purposes now for us um I can already
392:49 - tell you that this prior is a bunch of
392:51 - nonsense and we do not need it we're not
392:53 - going to use it for anything and it and
392:55 - if we have um this is a small very small
392:58 - data set this only has like um let's say
393:00 - you know one two three four five six
393:03 - seven eight we have like eight columns
393:05 - that we're you know kind of using that
393:06 - has data eight or nine now that's a
393:09 - small data I've had ones with literally
393:11 - like hundreds um and and it has so many
393:15 - columns uh so much data and sometimes
393:18 - it's good to just trim it back to the
393:20 - things you know you're going to use this
393:21 - to me is absolutely useless um we're
393:23 - going to delete that
393:25 - and then right over here it's pretty
393:26 - redundant um it's just one number off
393:30 - but if we scroll down just a little bit
393:32 - um it goes it's basically just counts
393:34 - it's a you could even call it a unique
393:37 - um identifier if you want sure why not
393:40 - but we don't need both um so we're going
393:41 - to get rid of this first one and now we
393:43 - have more of the useful and relevant
393:45 - data rather than the stuff that we
393:46 - absolutely know that we are not going to
393:48 - use um these date updated and date
393:50 - created we may never use them but we
393:53 - might um so it doesn't hurt to keep it
393:56 - on hand those other ones are ones that
393:57 - we are almost certain we will never use
394:00 - again keep a backup just in case you
394:02 - need it you can always go back and get
394:03 - it so you know if you go back to what we
394:06 - started with and you look at what we
394:07 - have now it is much cleaner it's much
394:10 - more usable and these are small subtle
394:13 - changes um especially with this very
394:15 - small data set of only like 50 rows or
394:17 - or 46 rows but you're going to be
394:19 - working with data sets that are
394:21 - thousands tens of thousands hundreds of
394:22 - thousands of rows and you need to know
394:25 - how to kind of look at this data
394:27 - standardize it um format it properly for
394:30 - what you're going to be using it for if
394:31 - you're keeping it in Excel there are
394:33 - different things that you may do than if
394:34 - you're putting it into a database or
394:36 - going to be using it in you know um
394:40 - using python to to access it so you need
394:43 - to kind of know your use case but these
394:45 - are some things that I do all the time
394:48 - to kind of clean up the data before I
394:50 - use it for something whether I'm
394:52 - creating pivot tables or I'm inserting
394:54 - it into or I'm putting it into SQL these
394:57 - are things I do all the time and so
394:58 - hopefully that helps give you kind of an
395:00 - idea of some of the things that you
395:02 - should be looking for when you're
395:03 - actually cleaning data and it's really
395:05 - important to understand why you're
395:06 - actually making these changes and the
395:08 - reason you're making these changes
395:09 - because some of the things that I did
395:11 - today may not be things you want to do
395:13 - on a different data set that has
395:14 - different uses and different um purposes
395:16 - for so you know take everything that
395:19 - I've said and and apply it um with a
395:21 - little grain of salt to your data set
395:23 - because your spefic specific needs may
395:25 - be different than what I wanted when I
395:27 - was cleaning my data set so I hope this
395:30 - was helpful I hope you this gave you a
395:31 - small glimpse of some of the things that
395:33 - I'm looking for when I clean a data set
395:35 - or I get a new data set in and I'm kind
395:36 - of you know analyzing it figuring out
395:38 - what I need to fix in it I hope this has
395:41 - been helpful uh with that being said
395:43 - thank you so much for watching I really
395:45 - appreciate it if you like this video be
395:47 - sure to like And subscribe below and
395:48 - I'll see you in the next
395:51 - [Music]
395:53 - video
395:57 - [Music]
396:02 - what's going on everybody welcome back
396:03 - to the Excel tutorial Series today we're
396:05 - going to create an entire project in
396:08 - [Music]
396:12 - Excel now if you've never done a
396:14 - complete project in Excel where you take
396:16 - the data you clean it then you create an
396:18 - actual dashboard where people can click
396:20 - on things and filter things this is
396:22 - going to be a really great learning
396:23 - opportunity as well as potentially you
396:25 - know a simple project that you can use
396:27 - for your portfolio or you can spice
396:29 - things up and go a little farther than
396:30 - what we're going to be doing in today's
396:32 - video I will walk you through every
396:33 - single step of the way and hopefully we
396:35 - learn something together and without
396:37 - further Ado let's jump right into it
396:39 - let's jump onto my screen and get
396:40 - started with the project all right so
396:42 - this is the data set that we're going to
396:43 - be working with I will leave a link in
396:45 - the description to my GitHub where you
396:46 - can go and download it so you can be
396:47 - working with the exact same data set
396:49 - that I am using now before we actually
396:51 - get into this data and start looking at
396:53 - it I'm going to show you what the final
396:55 - dashboard is going to look like um we're
396:57 - going to create a few different types of
396:58 - visualizations nothing too crazy um and
397:01 - then we'll create some filters as well
397:03 - so we can kind of you know create some
397:04 - interactive filters with our data so
397:06 - let's go right on over to our data set
397:10 - now I'm going to hide this because we
397:13 - are not going to use that but what I am
397:14 - going to do before we do anything is I'm
397:16 - going to create a
397:18 - dashboard and I'm going to create a
397:21 - pivot table oops
397:24 - and I'm going to create a working sheet
397:30 - so um all these things have different
397:33 - uses and I'll explain that as we go
397:35 - along so this is our data set um I'm
397:38 - going to copy this over to our working
397:40 - sheet when I go into you know an Excel
397:44 - and I'm working on something I don't
397:45 - like to you know use just the one that I
397:48 - was using in case I mess something up
397:49 - and it saves over or's some issue I like
397:51 - to create a working sheet and keep the
397:53 - raw data right over here it just makes
397:55 - my life easier I don't have to save it
397:57 - and then you know open up a different
397:58 - Excel to compare them so we have our
398:00 - bike buyers this is our working sheets
398:02 - this is our raw data this is the one
398:04 - we're actually be working on today so
398:06 - let's um let's start looking at it
398:08 - really quick and just kind of glance and
398:10 - see what data we're working with and
398:12 - then we'll start cleaning it up making
398:14 - it more useful for what we are going to
398:16 - be using it for and then we'll start
398:18 - building out the dashboard so right here
398:21 - we have an ID that should be be a unique
398:24 - ID to each person uh this is their
398:27 - marital status so married or single this
398:30 - is their gender male female we have
398:32 - their income children their education
398:35 - their occupation do they own a home how
398:38 - many cars they own how long their
398:40 - commute is the region where they live
398:43 - their age and if they purchased a bike
398:45 - and this column right here is extremely
398:47 - important this is going to tell us
398:48 - whether they did or did not buy a bike
398:50 - so we got their information they're
398:52 - looking for a bike but they either
398:54 - decided not to buy a bike or they did
398:55 - buy a bike and we're going to be using
398:57 - that one a lot in in this video and so
399:01 - um you know this is basically the data
399:04 - set that we're working with um some of
399:05 - the demographics and and information
399:07 - behind the person so what we want to do
399:11 - when we are cleaning the data before we
399:13 - do anything uh I like to see if there
399:15 - are any duplicates in here um what we're
399:17 - going to do is come right up here we can
399:20 - go to
399:22 - uh where is it right here we got remove
399:26 - duplicates so we're going to click on
399:27 - that it selects every single one we just
399:30 - want to see if there's any useless
399:32 - duplicated data that we do not need uh
399:34 - and the data is a header so we're going
399:36 - to click
399:37 - okay all right so we had a ton of
399:38 - duplicates in there uh for whatever
399:40 - reason so yeah we do have duplicates in
399:42 - there so I'm glad we did that otherwise
399:44 - we would have uh you know not good data
399:48 - and we don't want that let's start right
399:50 - over here um the ID of course we're not
399:53 - going to change the marital status and
399:54 - gender are M's s's fs and M's um this
400:00 - isn't inherently a bad thing to have it
400:02 - like this but you know we have to think
400:04 - about it from the perspective of someone
400:05 - who's going to be using this dashboard
400:07 - do they know what M ands is do they know
400:09 - what M uh and F is and if they don't
400:13 - it's better to just spell it out for the
400:14 - most part um so let's just do that so
400:18 - we're going to click on the column B
400:20 - we're going to hit controll H that's
400:22 - going to bring up our find and replace
400:24 - now there's an m in both of these
400:26 - columns and there's different things one
400:28 - is married and one means male so we're
400:31 - going to do is we're going to search by
400:33 - columns um and we'll have match case I
400:36 - don't think that's going to change
400:37 - anything but that just means an exact
400:38 - match uh and we're going to do m equals
400:42 - and we're going to replace it with
400:43 - married and we'll replace all awesome
400:47 - and then we do s is
400:49 - single this one is super easy we're
400:52 - going to do the exact same thing right
400:54 - here so column C to hit contrl H we'll
400:58 - do still has by column so we'll do m is
401:03 - male we'll replace all of those and F is
401:09 - female and replace all those that's
401:12 - great uh you know the next column right
401:15 - here is income and in a SE in a previous
401:18 - video I talked about how I don't
401:19 - typically like it in this format and
401:22 - that's true um if you're doing calcul
401:23 - ations on it or or any other thing it
401:25 - can mess it up sometimes having the
401:27 - dollar sign or it being a currency we're
401:30 - not really going to mess with it too
401:31 - much right now um what we can do is just
401:35 - kind
401:36 - of make sure all of it's currency um
401:39 - we'll just go like that to make it a
401:41 - little simpler but we're not going to
401:42 - change it to like a
401:44 - numeric um we will use this in the
401:47 - visualization we'll see how it looks and
401:49 - if we need to we'll come back and change
401:50 - it if not we'll keep it how it is um so
401:53 - so that's all we're going to do to that
401:55 - one uh the children those look good we
401:58 - have
401:59 - education partial College partial High
402:02 - School this looks fine to me um if
402:04 - there's any spelling errors or anything
402:06 - like that of course we need to clean
402:07 - that up it doesn't look like there
402:09 - is
402:11 - occupation skilled manual manual okay
402:14 - those should be separate are they a
402:17 - homeowner should just be yes or no all
402:20 - right we have Cars 1 2 3 4 good night
402:23 - who owns four cars um and then we have
402:25 - the commute distance uh and you know
402:27 - there's nothing terrible about this it's
402:29 - giving you ranges um which can be a good
402:32 - thing I say let's keep it for now but I
402:36 - have a feeling when we get further and
402:37 - we start using in the visualization we
402:39 - may want to change this so let's just
402:41 - hold off for now um but if needed we
402:44 - will come back to this and we'll change
402:46 - this um and then we have our region and
402:51 - that looks totally fine and we have our
402:52 - age now when you're using ages typically
402:56 - you have some type of like age bracket
402:59 - or or age range and you do that because
403:02 - there are so many ages in here right
403:04 - it's 25 all the way down to 89 and if
403:07 - you're using that in some type of
403:08 - visualization it could just get really
403:10 - messy and so you'll create kind of you
403:13 - know just brackets around these so that
403:15 - you can kind of condense it and make it
403:17 - a little bit easier to understand so
403:20 - let's do that and just create a new
403:22 - column and then then we can use that for
403:24 - our dashboard so let's go right up here
403:26 - we're just going to create a new column
403:29 - uh we'll call this age
403:32 - brackets and what we can do is we can
403:35 - use an if statement to kind of say if
403:40 - it's older than or less than and and and
403:42 - kind of give them these ranges um that's
403:45 - one way to do it and that's the way
403:46 - we're going to do it right now so let's
403:49 - go up here and what we want to do is we
403:51 - want to say is going to we're going to
403:53 - say equals and we're going to do if and
403:56 - we're going to close that parenthesis
403:58 - now what we're going to say is if
404:01 - this we'll go right back up here if this
404:04 - is less than so we're going do this 31
404:09 - and we're going to say comma so if they
404:11 - are less than 31 what do we want to call
404:15 - them what do we want their their you
404:18 - know name to be we'll call them
404:22 - adolescent oops that's not how you spell
404:24 - adolescent adolescent um and then if
404:27 - they're not what we're going to do is
404:29 - we're going to say it's
404:32 - invalid okay and let's just see if this
404:34 - one works
404:35 - first all right it's not working at all
404:39 - um okay so basically what we did was um
404:42 - incorrect we did it backward uh we want
404:44 - to do I said uh L2 is greater than 31 no
404:48 - we want to do like this so let's do that
404:52 - now all right and it should pull up
404:55 - where if they're under the age of 31 so
404:58 - if they're 30 or below is basically what
405:00 - it's saying so if they're 31 they'll be
405:03 - invalid but if they're 30 or below it's
405:05 - adolescent so it is working properly um
405:08 - and let's see what it see what it says
405:10 - perfect so this one is working and and
405:13 - now what we want to do is we actually
405:14 - want to build on this and make it uh
405:17 - kind of like a nested if statement if
405:19 - you've ever heard of that or done that
405:21 - before so this is our first first if
405:23 - statement and this is going to be this
405:26 - is invalid this is our value if false
405:28 - statement this whole statement is going
405:30 - to become our value if false for a
405:34 - different if statement um so let let me
405:38 - write it out and hopefully that'll make
405:40 - sense but we're going to say if do open
405:43 - parentheses and we're going to do it
405:44 - like this and let's just get rid of this
405:45 - for a
405:48 - second all right uh what did I do and
405:52 - let me do
405:54 - oops give me a
405:56 - second okay we have our if let me just
405:59 - write that out again we have our if
406:01 - there we go so now what we're going to
406:04 - do is we're going to write basically the
406:06 - next part of it so we're going to say if
406:09 - that L2 is and we're going to do this
406:12 - time we're going to do greater than or
406:13 - equal to 31 so now it's going to include
406:16 - that 31 so right here we did anything
406:19 - less than 31 so it's 30 and below this
406:22 - one is going to be 31 and above so we're
406:25 - going to say these people are middle
406:29 - Ag and if not then it's going to go to
406:33 - this if statement and then we need to
406:34 - close it I believe so now let's try this
406:38 - all
406:39 - right fantastic now if um everybody
406:42 - should be in one of these areas right
406:45 - everyone should either be an adolescent
406:47 - or middle age because basically all
406:48 - we're saying is is if they're older than
406:50 - 31 or 30 or below that's all these two
406:52 - statements do so we have um you know our
406:56 - next group now we can add and go even
406:59 - further into this and now we can use
407:02 - this entire thing as the um what was it
407:05 - called the value if false section so
407:09 - that's what we're going to do we're
407:10 - going to do one more so we're have three
407:11 - different categories so we're going to
407:13 - say if and do uh an open parenthesis and
407:16 - we're going to say if oh actually Let's
407:19 - Do It
407:20 - um let's not do it to this one
407:24 - let's do to this top one just
407:26 - easier uh so we're going to say if open
407:29 - parenthesis we're going to say L2 and
407:33 - this time we're going to say anybody
407:35 - over the age of 50 uh or we can do 55
407:39 - let's do 55 so we'll do 55 and we're
407:42 - going to call them
407:44 - old and we'll do a comma and this is the
407:48 - value if false statement and we need to
407:49 - close our parenthesis so let's try this
407:52 - anybody over the age of 55 should have
407:55 - old um you know maybe we'll do 54 so
407:59 - anybody who is 55 is considered old I
408:01 - think that's fair I think that's fair
408:04 - guys oops I should have
408:05 - done I should have done that to this one
408:07 - let me get out of this and we'll do
408:10 - 54 my dad is 55 that's why I'm doing it
408:14 - like this this is fre
408:16 - dead CU he should be in this old
408:18 - category to be fair so now we have
408:20 - adolescent adolescent middle-age and old
408:23 - these are three categories so we can now
408:25 - have these buckets these different
408:27 - groups of Ages and it's much more usable
408:30 - than these individual ages um and so we
408:33 - will be using this in our in our
408:35 - dashboard for sure now our next one is
408:38 - the purchased bike uh and we're not
408:40 - going to do anything with that so you
408:42 - know that is that is that one and you
408:46 - know there wasn't a ton to clean up here
408:48 - we removed some duplicates um I don't
408:51 - know why it says that what did I do
408:55 - married married what does this mean even
408:58 - mean I did I write that did I mess this
409:01 - up guys
409:04 - oh when I did the m and the S uh
409:08 - replacement in there it replaced it with
409:11 - married and single it's supposed to say
409:13 - marital status
409:16 - oops thanks for catching that guys
409:18 - thanks for catching that I hope that's
409:19 - how you spell marital uh we'll see so
409:23 - uh we are going to keep it just like
409:25 - this now what we are going to
409:29 - now now what we are going to do is build
409:32 - pivot tables with this data so we had
409:35 - our raw data we have our working sheet
409:38 - and now we want to create pivot tables
409:40 - and pivot tables is how you actually
409:42 - help build your dashboards or help build
409:44 - your visualizations so we're going to go
409:46 - right here we're going to hit whoops get
409:49 - rid of that we're going to go right here
409:52 - we're going to insert and we're going to
409:53 - say pivot table and it's going to ask us
409:55 - what
409:56 - range so we're going to go back to the
409:58 - working sheet and we'll just click here
410:00 - and hit control
410:03 - a this is going to select all of our
410:05 - data for us so it's really easy and
410:08 - we're going to hit okay and so now we
410:11 - have all of
410:12 - our pivot I don't need I don't need to
410:15 - pull it out that far that was way too
410:16 - far and now we have all of our pivot
410:17 - table information over here and so that
410:20 - should make it really easy to you know
410:23 - actually build out so what we're going
410:24 - to do is start selecting what columns
410:27 - and what data we actually want to work
410:28 - with so the first one that we're going
410:30 - to build out is a dashboard that is
410:33 - basically looking at the average income
410:35 - of somebody who either bought or did not
410:37 - buy a bike so we need in this one we're
410:41 - going to need their income that's
410:43 - definitely going to be a value right
410:44 - here um but we want to break it out by
410:48 - male and female so let's look at their
410:49 - gender we going to pull that down into
410:51 - the rows so
410:53 - um this is basically a sum and no let's
410:56 - look
410:57 - at let's make this an average so I just
410:59 - went to the um I clicked right here I
411:02 - went to the value field settings and
411:04 - we're just going to do an
411:05 - average all right and then we are going
411:08 - to make these um and as you can see
411:12 - there's four decimal points um we'll
411:14 - keep it as is right now but we may need
411:16 - to go back and change something then
411:17 - we're going to look at if they purchased
411:19 - a bik or not and we're going to put that
411:21 - right here so so we can see that uh
411:24 - right here for the people who did not
411:26 - buy a bike the females their their
411:28 - average salary was 53,000 the average
411:31 - salary for the average salary for males
411:33 - was 56,000 for yes the ones who did buy
411:36 - a bike the average salary was 55 for
411:39 - female and 60 for male so the people who
411:42 - had a little bit more money are buying
411:44 - bikes and you can also see that uh the
411:46 - men are making more money in this data
411:48 - set just overall in general um so let's
411:53 - make the visualization really quick but
411:55 - you know I don't know I'm not a huge fan
411:57 - of these decimal points and maybe we can
411:59 - just change that in the visualization
412:01 - we'll see um oops that's not what I
412:05 - meant to
412:06 - do um let's do that so what we are going
412:10 - to do is we're going to click into here
412:12 - we're going to click insert and we're
412:14 - going to go to these recommended charts
412:15 - and it's going to bring up basically
412:17 - every single type that we would want um
412:20 - and we can just click in here and see
412:22 - which one looks good uh oh yeah I love
412:25 - those 3D ones those are my favorite you
412:27 - guys know that uh let's let's use this
412:29 - one right here pretty simple um whoops
412:32 - let's pull this right over here and as
412:35 - is it looks pretty good um you know it
412:39 - shows male female we have the average or
412:42 - the incomes right here whether they did
412:44 - or did not purchase it um and so at a
412:47 - glance it's pretty easy to see let's see
412:50 - if there's anything um you know if you
412:54 - want to change up style-wise go for it
412:55 - I'm just going to keep it as is um but
412:58 - let's see if there's anything we need to
412:59 - add right do we want to add these access
413:02 - titles uh for the most part I I tend to
413:06 - do that um it makes it pretty easy to
413:09 - see so we can go in here and we can just
413:11 - click it like this and we'll say
413:13 - income and we'll say oops and we'll do
413:19 - gender so that's what that
413:21 - is and and let's go back in here do we
413:24 - want to add a chart title we definitely
413:27 - want to add a chart title uh for most of
413:29 - these we'll add a chart title for sure
413:30 - so we'll say average
413:32 - income per
413:35 - purchase um I don't know if that's 100%
413:37 - right but we'll we'll we'll use it uh if
413:39 - we need to change it to be you know by
413:41 - gender or something we can but um for
413:44 - now let's see do we want to add data
413:46 - labels uh definitely not uh a data table
413:50 - um we can do this it may make it a
413:52 - little easier to read I will say that
413:54 - again these numbers are just these
413:55 - decimal points are really throwing me
413:57 - off let's go see if um we can change it
413:59 - in here let's go
414:02 - to see if we can just make these numbers
414:05 - okay and um we can keep it like that or
414:08 - we can even do something like this add
414:13 - commas yeah I'm going to keep it just
414:15 - like this I I think this just looks the
414:16 - best um again I'm I'm getting adding
414:19 - commas here I'm changing the um decimal
414:22 - place right here it just makes it look a
414:25 - little nicer a little cleaner um so
414:28 - let's keep this exactly how it is um we
414:32 - can always change things if we want to
414:34 - uh if we want to come back to it so we
414:36 - created our pivot table and then we
414:38 - created our visualization basically
414:40 - exactly what we're going to do for all
414:42 - of these because again all of these need
414:44 - um you know all of these need pivot
414:46 - tables in order to create the
414:47 - visualization so let's um get out of
414:50 - here we're going to scroll down and
414:53 - we're going to create our next pivot
414:54 - table and once we get done with all of
414:57 - the pivot tables that we need all the
414:58 - visualizations that we need then we will
415:01 - um we will start so we're going to do
415:03 - control a we're going do okay and
415:06 - basically do the exact same thing that
415:08 - we did um this time we're going to look
415:10 - at the distance so for this one I wanted
415:13 - to see you know I try to you know I
415:15 - created this already I've already done
415:16 - this entire project through but I
415:18 - haven't really talked about why or what
415:20 - we're going to look at for this one you
415:22 - know know we're looking at is their
415:25 - income does it change whether they
415:27 - bought or didn't buy one um so if they
415:30 - said yes you know is there a reason are
415:32 - they making more money is you know are
415:34 - price points are the customers do they
415:36 - make more money so you we cater to them
415:38 - or not uh that's a good question uh
415:41 - another thing is you know we're we sell
415:43 - bikes or this person sells bikes so
415:45 - commuting distance definitely makes a
415:48 - difference you know does the person who
415:50 - is buying a bike live one mile away from
415:53 - where they work or 20 miles away uh this
415:55 - will help us determine this next
415:56 - visualization will help us determine you
415:59 - know who who is doing that or who's
416:00 - buying it so what we are going to do is
416:04 - we are going to look at the um that one
416:08 - that we were looking at earlier the
416:09 - commute distance so we're going to bring
416:11 - that right over here so we have these
416:13 - you know one mile 10 Mile 1.2
416:17 - Etc now we are going to uh again we're
416:20 - going to look at if they purchased a
416:22 - bike
416:23 - that's really important and let's make
416:25 - that the column as well so now what we
416:27 - have is a count of these Nos and yeses
416:29 - whether they did or did not buy a bike
416:32 - um one of the issues I already see and
416:34 - we'll I'm going to visualize it and then
416:35 - I'll show you that this 10 miles you
416:38 - know it's right next to the 0.1 so it's
416:40 - not an order um and that could be that
416:44 - could be an issue um so we may have to
416:47 - revise that somehow to put it at the
416:49 - very bottom because we can either do
416:51 - ascending
416:53 - or descending uh either one I don't
416:56 - think is going to work so we may have to
416:57 - work through that in just a second um I
416:59 - don't know if I did that my I plan for
417:02 - that um yeah so it has this big dip
417:06 - um yeah so let's let's create it um
417:09 - that's okay we're going to figure this
417:11 - one out together because I honestly um I
417:14 - didn't plan for this one so okay we have
417:16 - 0.1 miles that's exactly where it needs
417:18 - to be the one the two the five that's
417:21 - exactly where it needs to be this 10
417:22 - miles is not and let's see if I change
417:26 - that 10 10 plus miles to 10 miles plus
417:32 - let's see if that'll put it down here
417:34 - because I I don't know if it's looking
417:35 - at I don't know if it's reading it weird
417:38 - um but let's go into this working sheet
417:41 - and let's go right here and we're going
417:43 - to do controll H and we'll do oops not
417:47 - this
417:48 - one um 10 miles plus let's get that in
417:52 - there and we're going to do
417:54 - 10 uh
417:57 - miles plus I I don't know if that's
417:59 - actually going to work um we will see so
418:03 - let's go back to the pivot
418:04 - table let's re go to the data let's
418:08 - refresh uh no it didn't it didn't change
418:10 - it um okay so let's think about this
418:14 - maybe if we change it to like a letter
418:17 - it might change down here so start it
418:18 - with uh miles that could work um let's
418:21 - try it it okay it's already
418:25 - selected let's do the 10 plus miles okay
418:29 - so let's
418:31 - do
418:34 - um M uh more than 10
418:39 - miles and we'll replace all let's get
418:42 - rid of
418:44 - this let's go to the pivot and refresh
418:48 - all right okay so it's not perfect but
418:51 - it works
418:53 - um and for what we're doing I think
418:55 - we'll keep it how it is so we have our
418:58 - second one uh and you know there are
419:02 - different ways you can kind of change
419:04 - this one um you know on the last one we
419:06 - did a ton of different stuff we can
419:09 - do just
419:12 - do commute
419:15 - distance and we can
419:17 - say what do we want to say on this one
419:20 - what is this oh this is the count um do
419:23 - we have to do we have to keep this
419:26 - one um no there we go I'm just going to
419:30 - do um just one and
419:35 - say commute
419:38 - distance and let's add a
419:41 - title chart title we can make this one
419:45 - um let's
419:46 - say
419:49 - distance per customer uh that's not 100%
419:53 - true because it's no or yes um that's
419:55 - that's the important part of this it's
419:58 - distance um average distance uh let's
420:02 - see we'll just say customer
420:08 - commute all right and we'll keep it just
420:10 - like that all right perfect I don't
420:13 - think um let me see I don't think
420:16 - there's anything else we need to add on
420:17 - that one all right now let's go right
420:19 - down here we're going to create our very
420:21 - last one uh we only had three so you
420:24 - know sometimes you'll have a ton
420:26 - sometimes you'll have like one on each
420:28 - sheet and you'll create multiple sheets
420:29 - but um do contr a um now we have our
420:34 - thing now this one we're going to be
420:36 - looking at these age brackets that we
420:39 - were looking at that we created um
420:41 - something that I do honestly a lot is is
420:45 - kind of bracket things in into groups
420:47 - like this and you know for this I'm just
420:50 - kind of made them up but you know it's
420:53 - good to know how to do this because I I
420:57 - promise you this one happens a lot or I
420:59 - use this one a ton and then we just want
421:01 - to look at who purchased a bike uh so
421:04 - the same thing as we did before so like
421:05 - purchase a bike count of the purchase um
421:08 - you know pretty easy so we just have to
421:10 - count of either no or yes for these age
421:12 - ranges um and let's go to the insert
421:17 - we'll go to
421:18 - recommendation um I personally like a
421:21 - good line for this one um so
421:24 - let's this is already interesting we
421:27 - could do something like
421:29 - this that's nice see this one versus
421:33 - this it just adds a dot it looks nice
421:35 - we'll keep that one
421:37 - um so just really quick at a glance
421:40 - really interesting people under the age
421:42 - of 30 are not buying that many bikes um
421:45 - age 30 to
421:47 - 54 uh 31 to 54 buying a ton of bikes uh
421:52 - they buy more bikes or look at bikes
421:54 - more than anybody really interesting um
421:56 - but yeah we'll make the dashboard in a
421:58 - little bit um let's make these chart
422:00 - titles we'll
422:02 - do vert oops the
422:05 - horizontal we just call
422:07 - this age
422:11 - bracket um and then we'll add a chart
422:14 - title um again you can add some extra
422:18 - stuff if you want
422:19 - to um but you don't need to uh none of
422:22 - this other stuff we really need I'm just
422:23 - kind of looking at the stuff we do need
422:26 - or do want uh so what do we want to call
422:28 - this one let's call it customer
422:31 - age brackets um and it's not perfect but
422:36 - we'll keep it as is for comparison um
422:39 - let me see if I can copy
422:42 - um or or use this um real quick instead
422:46 - of the age brackets I'm going to get rid
422:49 - of this and use the age
422:53 - and then let's
422:55 - use um let's insert
422:58 - recommendation we use a
423:00 - line and we'll use this
423:04 - so This compared to this just think of
423:08 - it like if a customer or consumer or or
423:12 - not a customer if somebody you're
423:13 - working with is trying to use this
423:15 - dashboard to understand this dashboard
423:17 - this is going to be just it's going to I
423:20 - don't know it might melt their brain
423:21 - just makes no sense it makes sense it's
423:23 - just all over the place it's really hard
423:24 - to make sense of this it really is I
423:27 - mean you can kind of see a pattern going
423:29 - up around like the mid-30s and then it
423:31 - Trends downward but it's hard to see um
423:34 - it really is so doing these um these
423:38 - brackets really helps and you can even
423:39 - add you know adolescent um you know 0o
423:44 - to 30 underneath it and in fact we may
423:46 - want to do that um why not why not let's
423:49 - do that oh whoops um so why don't why
423:53 - don't we do that why don't we go back
423:54 - I'm just going to I'm doing this on the
423:56 - Fly why don't we go
423:58 - back uh what am I doing
424:00 - whoops and this is all calculated but
424:03 - let's do
424:05 - adolescent 0
424:07 - to
424:10 - 30 let's do
424:12 - middleaged 31 through
424:15 - 54 and then old 55 plus let's see if
424:19 - this breaks anything I hope it doesn't
424:23 - um and we'll go back to our pivot table
424:26 - let's refresh the
424:30 - data uh okay it did mess with
424:33 - stuff okay never mind guys that was a
424:36 - terrible idea don't do that um perfect
424:40 - uh let's get rid of that that was a
424:42 - terrible idea don't do that I'm glad we
424:44 - tested it out though I like I like to
424:46 - see if it was going to work no it messed
424:48 - with the um the Order of Things um I I
424:52 - intentionally named them adolescent
424:54 - middle- Ag and old because it's it it
424:57 - makes sense for the visualization um but
425:01 - you know if if I change something and it
425:04 - messes with it I'm not going to mess
425:05 - with it it was just an idea on the Fly
425:07 - guys come on all right so let's start
425:09 - building out our dashboard now um when
425:12 - we're building our dashboard what I
425:14 - personally like to do is to have this
425:16 - pivot table sheet and then I will copy
425:19 - them over and later we'll hide these
425:21 - other sheets beats um and I'll explain
425:23 - that a little bit but I like to have
425:25 - this this one for us so we're going to
425:27 - copy this so I just click on it hit
425:29 - controlc we're going to paste it right
425:31 - over
425:33 - here uh let's just make them small for
425:35 - now that's oh gosh no let's not do that
425:38 - oh these look terrible okay anyways
425:41 - um let's copy this one
425:45 - over
425:47 - oops okay what did I just
425:50 - do oh I didn't copy this one
425:54 - whoops it's not
425:56 - copying okay we're going to go
426:00 - copy hit
426:02 - paste
426:04 - fantastic oops guys look away this is
426:07 - this is tough to watch this is tough for
426:09 - me to watch I'm the one doing it it is
426:10 - tough for me to watch all right let's go
426:12 - to this last one I'm I'm gonna try it
426:15 - again all right it worked this time so
426:18 - now we have um our our three
426:22 - visualizations this is perfect but now
426:24 - we actually want to create a dashboard
426:25 - now how do you do that how do you make
426:26 - it look nice U and then we're going to
426:28 - add some you know filters and stuff like
426:30 - that how do we make it look nice um what
426:33 - happened here what changed what did we
426:37 - do oh my goodness gracious all right
426:39 - let's copy
426:42 - this let's paste this let's get rid of
426:46 - this I don't even know how that happened
426:47 - I've never seen that before that was
426:49 - wild uh Excel is trying to destroy my
426:52 - whole video I mean I'm doing this for
426:54 - you Excel good night okay no problem at
426:58 - all what we're going to do and how you
427:00 - make this at least look nice um first
427:03 - off we can get rid of these grid lines
427:05 - pretty easily and I recommend when you
427:07 - do that when you make a dashboard just
427:08 - makes it look cleaner makes it look like
427:10 - an actual dashboard um let's go to view
427:13 - and grid lines so we can get rid of
427:15 - these grid lines it just makes it look
427:17 - nicer um we're going to make you know we
427:20 - can choose any color here here I'm just
427:22 - going to get choose a
427:24 - color I like this and let's we're we're
427:28 - basically creating like a header right
427:30 - if you're using like Tableau or
427:31 - something um we're going to merge and
427:32 - center so it takes every single cell
427:34 - that we have highlighted creates it into
427:35 - one let's call this um bike sales uh I
427:40 - have I think I called it bike sales
427:42 - dashboard let's just call it that um you
427:45 - know see what happens let's get that
427:49 - let's make it white and and make it much
427:52 - larger than it
427:54 - is okay okay
427:57 - um sure let's do that doesn't look bad
428:02 - um what is it doing there we go uh let's
428:06 - bre that Center perfect um it's not
428:09 - perfect but we're going to use it all
428:10 - right so now we kind of want to organize
428:13 - these and you know everybody has their
428:16 - different way of doing it uh I'm just
428:18 - going to start building it out myself
428:21 - self and just see how it
428:24 - looks uh and then we'll go from there I
428:26 - like this one there um we can
428:30 - put this one I I this one's a kind of a
428:33 - longer one so I'll probably put it at
428:34 - the bottom let's see how it
428:36 - looks um but we'll put this one right
428:40 - here try to line it up geez let's let's
428:43 - zoom in a little bit let's try to line
428:45 - this up see what it looks
428:49 - like let's extend it to the
428:52 - end that doesn't look too bad uh needs
428:54 - to move up just a hair and I'll show you
428:57 - how to kind of align these in a second
428:59 - but um that looks not bad and we'll kind
429:04 - of try to align these as well let me
429:06 - zoom out and extend this the length of
429:10 - this just to make it look nice um you
429:12 - know now what you can do and you know
429:17 - this is something that's pretty simple
429:19 - is you can get both of these and we're
429:21 - going to go to shape format and we can
429:23 - just align these it's really nice to
429:25 - align especially if like the top and
429:27 - maybe like the left to right but like
429:29 - we're going to align these to the top
429:31 - and they just kind of align themselves
429:33 - on the very top now these look much
429:35 - better this one is a larger dashboard or
429:38 - a larger visualization so I'm going to
429:40 - keep it how it is um and I'm going to
429:43 - keep this one how it is so it is going
429:45 - to be a little bit smaller as you can
429:46 - tell and then we'll have this one um and
429:49 - I'm going to do that
429:52 - um I this is going to bother me if I
429:55 - don't align these so let me do this I'm
429:59 - shape format align to the
430:02 - right and it's not exactly what I wanted
430:06 - to happen
430:09 - because oh jeez what am I doing that's
430:11 - not exactly what I wanted to happen I
430:13 - actually wanted this one to align uh
430:15 - this one to align with this one it did
430:16 - the opposite um so let me just scoot
430:19 - this back all right visually looks fine
430:21 - but that's how you do it if you want to
430:23 - do it um I I I if you have multiple of
430:26 - them like this it you can make it look
430:28 - bad so we have our dashboards this is
430:30 - already looking really good I I like how
430:32 - this looks colors are coordinated it we
430:35 - have a kind of a theme throughout um and
430:38 - it looks nice I actually I actually kind
430:40 - of want to change this one um
430:43 - to
430:46 - um let's
430:50 - see maybe if I did like that it look
430:52 - nicer than all of them yeah this does
430:54 - look nicer um it doesn't change much
430:56 - either guys I'm should I do it all right
431:00 - we're going for it we're changing the
431:01 - design on the Fly should I do it for all
431:04 - of
431:05 - them let's
431:07 - see it doesn't fit doesn't fit um all
431:11 - right guys just ignore what I'm doing uh
431:13 - don't do any of this I'm just messing
431:15 - around at this point so this is really
431:18 - great to have it really is and what we
431:20 - want to do is there are other elements
431:23 - there are other things that people would
431:24 - like to feel a to filter by and be able
431:26 - to look at but it's not in this
431:28 - visualization um to be more specific one
431:32 - field that's could be really interesting
431:34 - is married versus single are single
431:35 - people buying more or um married people
431:38 - buying more you know it it'd be nice to
431:40 - filter on it so we're going to click on
431:42 - uh any of these actually and we're going
431:44 - to go up to Pivot chart analyze and
431:46 - we'll click insert slicer now we can
431:50 - choose which ones we want to be able to
431:51 - filter on all at the same time or one at
431:53 - a time I'm just going to do the first
431:54 - one by itself and then I'll show you how
431:57 - to do other ones um but this one is the
432:00 - marital status so this is the married
432:01 - single the one we were just looking at
432:03 - and we can drag this right over
432:06 - here bring it in a little
432:09 - bit all right and we don't need all that
432:13 - space so we're going to boop boop boop
432:14 - boop all the way up
432:16 - now while we're doing this um it only
432:20 - because we selected this uh this
432:22 - visualization it only is working on that
432:24 - one right now we of course wanted to
432:26 - apply to all of them is not hard to do
432:29 - all we're going to do is we're going to
432:31 - click on we're going to make sure we're
432:32 - clicking on this we're going to go up to
432:33 - slicer we're going to hit report
432:35 - connections um and if you remember we
432:38 - have this um this pivot table that we're
432:40 - working with um and this is where all of
432:43 - our pivots are coming from so we're
432:45 - going to actually apply it to all of
432:47 - them this is our sheet U and this is the
432:49 - name of the pivot table now again we
432:52 - created that fourth one we're not using
432:53 - it but we're going to apply it to all of
432:54 - them so now when we click on it it's
432:58 - going to apply to all of them so at a
433:01 - quick glance let's see what single
433:02 - people are doing
433:05 - um interesting interesting um you know
433:09 - when I'm looking at the just these
433:10 - numbers right here married people these
433:13 - individuals are making a lot more like
433:17 - eight um sometimes eight to like 10,000
433:20 - more on average than their single
433:23 - counterpart um you know again that's a
433:25 - rough estimate but it's it's interesting
433:27 - so now what we can do is we're going to
433:29 - create more of these so we're going to
433:30 - go to uh pivot chart analyze we're going
433:33 - to go to slicer now we already did
433:35 - marital status but what if we want to
433:37 - look at things like uh region and maybe
433:41 - something like their education so let's
433:45 - bring up both of those and look now two
433:47 - of them come up so let's add the region
433:49 - right here
433:51 - we'll bring that in just a little bit
433:53 - see if we can match it nailed it all
433:56 - right now we're going to put that up
433:59 - we'll bring this one
434:00 - down just like this bring it over see if
434:04 - I can match it again come
434:07 - on N almost nailed it I don't know if I
434:10 - nailed it but it's close all right kind
434:12 - of bring this up a little bit bring this
434:15 - up and we have to do the exact same
434:18 - thing that we did with this one because
434:19 - right now again it only applies to that
434:21 - one um chart so what we want to do is we
434:24 - want to go to slicer report connections
434:26 - add it to all of them okay do the same
434:30 - thing with education or connections bada
434:34 - bing bada boom We are looking good and
434:38 - now uh let's get rid of all of them it's
434:40 - just going to be everybody so now we can
434:43 - kind of slice and dice and choose what
434:45 - we want we want to look at people who
434:47 - have a bachelor's degree who live in
434:49 - Europe and are single
434:51 - and this is the information that we have
434:53 - on those people so now we can narrow it
434:55 - down by certain demographics even
434:57 - further and look at this key information
435:00 - so we may not you know look at counts
435:02 - and averages of these things but we're
435:04 - able to filter on them uh and that's
435:06 - really great to know so bachelor's
435:08 - degrees on average are making 60s 70,000
435:12 - um let's look at um let's look at
435:15 - graduate
435:16 - degrees okay a little
435:19 - more um but you know again I'm just
435:22 - looking at random stuff um but you can
435:24 - mess around with this take a look at
435:26 - some stuff um this to me I want to make
435:29 - this color darker I feel like it look
435:31 - nicer darker there we go oh yeah that's
435:34 - way better this to me is it's a good
435:38 - dashboard right you have key information
435:41 - that you're looking at nice
435:43 - visualizations it's color coordinated
435:45 - you have these slicers on the side um to
435:49 - me this is a fantas fantastic just
435:52 - simple dashboard and there are so many
435:54 - other things that you can do with this
435:56 - data and you can make it unique and you
435:58 - can add your own spin on it and I highly
436:00 - recommend that you do that push yourself
436:02 - go past what we just did today and add
436:04 - your own stuff and and use this and then
436:06 - you can add this to your portfolio
436:08 - website and show this off and show
436:09 - people that you know how to use Excel
436:12 - which is a fantastic thing to know how
436:14 - to use and show off so with that being
436:16 - said I hope that this project was
436:18 - helpful I hope that you learned
436:19 - something along the way I know I did um
436:22 - I was learning things as we were going
436:23 - and I hope that you didn't mind that I
436:25 - took some detours along the way um for
436:28 - your amusement as well as my learning uh
436:30 - so with that being said thank you so
436:32 - much for joining me I really appreciate
436:34 - it I hope you have a good day and
436:37 - [Music]
436:48 - goodbye what's going on everybody
436:50 - welcome back to another video today we
436:52 - are starting our Tableau tutorial
436:57 - [Music]
436:59 - series now this series is for absolute
437:02 - beginners so if you have never used TBL
437:03 - blow before you are in the perfect place
437:05 - I'm going to take you all the way from
437:07 - the very beginning of installing it and
437:09 - just understanding what Tableau is and
437:11 - how you can use it all the way to
437:12 - creating dashboards and sharing it now
437:14 - personally I hate those videos that are
437:16 - like 3 hours long and they just expect
437:18 - you to go through it uh i' like to break
437:20 - my videos up in chunk so if you have
437:22 - ever done my sequel tutorials you'll
437:24 - know that I like to break things up so
437:26 - it gives you time to try them out and do
437:28 - them yourself and then you can move on
437:29 - to the next video so I'm going to be
437:31 - breaking this up into five separate
437:32 - videos but in this video I'm going to
437:34 - show you how to install Tableau for free
437:36 - I'm going to show you the user interface
437:38 - we're going to download a data set that
437:39 - you can find on kagle and then we will
437:41 - build our first visualization together
437:43 - with that being said let's jump over my
437:45 - screen and we'll get started all right
437:46 - so the very first thing that we need to
437:48 - do is you need to actually download
437:50 - Tableau so we're not going to be using
437:52 - Tableau we're going to be using a free
437:54 - version called Tableau public it has a
437:56 - lot of the same features except of
437:57 - course it's not uh every single feature
438:00 - that regular Tableau has but it is
438:02 - absolutely perfect for learning it and
438:04 - for using it and and you can even build
438:07 - um you know dashboards and share those
438:08 - for your
438:09 - portfolio um I'm going to put this link
438:12 - in the description so you can just go
438:14 - and click on that and and all you have
438:16 - to do is input your email right here
438:18 - we're going click download the app um
438:20 - and then it should start to download and
438:22 - then you can save that and then you're
438:24 - going to open this up now I'm going to
438:26 - open it up I don't know what it's going
438:27 - to do I already have it downloaded um
438:30 - but it should open up and look hopefully
438:33 - like what you're seeing on my screen in
438:35 - just a second let see what it does um I
438:38 - hope you can see this but it says
438:40 - Tableau public um it says I already have
438:43 - it set up but you're going to click
438:44 - install and go through all that um all
438:46 - that setup stuff uh so I'm going to exit
438:48 - out of here but I'm going to go over
438:50 - here and type in table of public uh and
438:54 - it's 20 21.3 that's the current version
438:57 - that they have out if you're doing this
438:59 - in the future they may have you know
439:01 - different versions um so you should be
439:03 - able to pull this up right here now um
439:07 - I'm going to go and get our data set
439:10 - that we're going to be using and I'm
439:11 - going to show you how to get that as
439:12 - well and then we will actually jump into
439:13 - Tableau and start uh using it so let's
439:17 - go over here I'm going to get a data set
439:18 - from kagle I wanted something pretty
439:20 - generic uh to show you in future videos
439:23 - I'm going to show you some special or
439:25 - not special but just different
439:27 - visualizations that you might use um and
439:29 - we'll get different data sets for those
439:31 - because of course not one data set
439:33 - covers all these other types of
439:34 - visualizations so um we're starting off
439:37 - pretty simple right here we're going to
439:38 - be getting one called video game sales
439:40 - um and we can take a really quick look
439:43 - at it um here are some of the fields
439:44 - that you're going to be having uh like
439:46 - rank name platform the year genre and
439:49 - then some sales data and this is what it
439:51 - actually looks like it's called VG sales
439:53 - so video game sales it's then a
439:55 - CSV and um you know here are the fields
440:00 - and we have our data and all we are
440:02 - going to do is we're going to download
440:04 - that and I will save it now when you
440:07 - download it it's going to be saved into
440:09 - a zip file so we need to go to our
440:12 - downloads uh let's refresh this here's
440:16 - our archive we need to go in here you
440:18 - can just copy it and paste paste it
440:20 - right back into here um and just so you
440:23 - know that is a uh a CSV so be aware of
440:27 - that so what we want to do is we want to
440:29 - come in here now since it is a CSV this
440:31 - is not we're not going to be using
440:33 - Microsoft Excel we're going to be using
440:35 - the text file so we'll come in here
440:37 - we'll take VG sales now uh one thing I
440:40 - want to do before I do that is I'm going
440:42 - to rename mine uh VGC
440:46 - sales1 um I've already prepared for this
440:49 - and so I already have that in there um
440:51 - but so I want to make a distinct one for
440:53 - myself you do not have to do that so
440:55 - we'll come back here um and then we're
440:57 - going to do text file and VG sales we're
441:02 - going to open that
441:03 - up
441:05 - and when it pulls up right here um you
441:09 - can bring in other tables and then you
441:11 - can start to join them together and
441:13 - create those relationships we are not
441:15 - going to be doing that in this video
441:16 - we'll do that in a separate one um as
441:19 - for you know just getting started you
441:21 - know we're not going to be using that
441:22 - but you can see some of these things or
441:27 - some of these fields and if you notice
441:30 - they they um they're either ABC or
441:34 - they're a number so it starts to
441:36 - categorize what this field type is so is
441:40 - it a string is it numeric it starts to
441:43 - automatically do that and that's all
441:44 - done within
441:45 - Tableau and so it just kind of reads it
441:48 - and that's what it does um what we going
441:50 - to do is I'm going to click right down
441:52 - here it's called go to worksheet um the
441:54 - worksheets are where you're going to
441:55 - actually start being able to build your
441:57 - visualizations your charts your graphs
441:59 - all these things um and so you know we
442:02 - have this in here now and so we're just
442:04 - going to click right here on go to
442:06 - worksheet as you can see here is VG
442:10 - sales1 you will not have the underscore
442:12 - one if you did not add that like I did
442:14 - uh but right down here you can see all
442:16 - the fields that we just imported from
442:18 - that data set and they even created one
442:19 - right here for us uh they just generated
442:22 - that field u based on the file so it's a
442:25 - count of all the rows really so what I'm
442:28 - going to do is I'm just going to walk
442:30 - you through uh basically what we're
442:33 - looking at some of the things that we're
442:34 - going to be using today there will be
442:35 - things that I don't talk about but I'm
442:37 - going to highlight those in in in future
442:40 - videos when we start using those or
442:42 - going over them um and so let's just
442:45 - start with the most obvious one it's way
442:47 - over here I'm sure you saw it when we uh
442:49 - this first came up on the screen because
442:52 - it has all these different charts and
442:53 - visualizations and graphs and uh these
442:57 - will become available as you start
442:59 - dragging and dropping our data into this
443:03 - sheet and so if I go right here it says
443:05 - for Scatter Plots try zero or more
443:07 - Dimensions two to four measures so what
443:10 - our dimensions are are right here what
443:13 - our measures are are right down here and
443:15 - so typically uh things like like you say
443:18 - genre or names or or strings like that
443:21 - are going to be these uh dimensions and
443:24 - then a lot of lot of times the numerical
443:27 - is going to be our going to be measures
443:29 - next what I want to show you is right
443:32 - here so you can take something like
443:35 - Global sales and you can drag it right
443:37 - here into your rows and then it takes
443:41 - your rows and so it automatically
443:43 - created a sum of global sales now if we
443:46 - take that away and let's say we drag it
443:48 - right here it's going to give us a
443:49 - column
443:50 - now you can also do it right up here you
443:53 - don't have to um drag it on screen you
443:56 - can
443:57 - also just add it to the column or the
444:00 - row that's typically what I do I it's
444:02 - just more intuitive to me um or you can
444:05 - drop it in this section right here and
444:07 - it does its best to assign it some type
444:10 - of um some type of visualization and so
444:13 - that's what it always is trying to do it
444:15 - is trying to say okay this is what
444:18 - you're trying to do let me try to to get
444:20 - the best visualization for the data that
444:22 - you're giving me now while we are here
444:26 - um it went down here into marks and
444:29 - marks is a very important area it's
444:32 - where you can add color size text detail
444:35 - and Tool tip and I'm not going to go
444:36 - into what all those are cuz I'm just
444:38 - going to show you so let's start pulling
444:40 - some fields in here and creating a
444:41 - visualization and then I'm going to show
444:43 - you how all of that works including
444:45 - filters as well so the first thing that
444:47 - we are going to look at is global save
444:50 - and let's put that in the rows and then
444:54 - I'm going to take year and I'm going to
444:56 - make that the column and this is
444:59 - basically exactly what uh I wanted to do
445:02 - now as of right now it has only the year
445:05 - and it's looking at Global sales for
445:08 - everything but we want to break that out
445:10 - a little bit better I Want to Break It
445:12 - Out by let's do genre so different genre
445:16 - of games now if I add that right here to
445:19 - this column s it is going to break it up
445:22 - by year and genre if I add it right here
445:27 - is going to break it out by the year of
445:29 - course but then in each individual row
445:32 - has the different genre that's not what
445:34 - we want we want to keep this type of
445:38 - line graph uh and what we're going to do
445:41 - is we're going to add it to
445:43 - Marks and you can't really see it based
445:45 - off of these colors but they're all
445:47 - different so we have action J genre we
445:50 - have the sports genre racing uh role
445:53 - playing all these different genres
445:55 - within it now we can get rid of that cuz
445:57 - we don't need it
445:58 - anymore uh and this is where these U
446:02 - these marks really come in handy because
446:04 - you can start basically doing what you
446:07 - want with them so for the genre I want
446:09 - to be able to see all these different
446:11 - genres with different colors to me that
446:13 - just makes the most sense so I'm going
446:14 - to put color right here and
446:16 - automatically it assigns every single
446:19 - genre its own own color and gives us
446:21 - this Legend right over here and so it's
446:24 - really easy to see well when you have
446:27 - smaller numbers is much easier but I
446:29 - know that red is sports and I can go
446:31 - right here and find red and that is
446:33 - sports so it makes it a lot easier than
446:35 - when it is all the same color blue so
446:39 - what you can do after that is you can
446:41 - also add things like uh a label to it so
446:44 - if we take label and we or we take genre
446:47 - put label you can click right here and
446:50 - you can get rid of the labels that you
446:52 - have and you can see them right down
446:53 - here or you can also change uh the font
446:57 - so if you want to make it orange or or
446:59 - whatever color you can do all those same
447:01 - things and you can also do things like
447:04 - changing where you see these things so
447:07 - for Action you're going to see it a ton
447:09 - because for each year action is is at
447:11 - the is on the higher end and so you're
447:14 - seeing those in those mins and Maxes you
447:17 - can also do it for a selected area so if
447:18 - I come in here and I select it it's then
447:21 - going to show me what those are so label
447:23 - is really really uh useful really
447:26 - helpful let me get rid of that really
447:28 - quick uh you can also do it where the
447:31 - lines end so line ends is at the
447:33 - beginning and the end and you can also
447:35 - take that away or put that back on so
447:38 - labels are really important labels
447:40 - aren't very helpful when you're doing at
447:42 - least I don't find that it's super
447:43 - helpful when you're doing things like
447:44 - genre so when you're doing your
447:46 - Dimensions so I'm going to get rid of
447:48 - that and I'm actually going to bring
447:50 - our Global sales over here and let's
447:53 - label
447:54 - that and right now I think it's labeling
447:57 - the uh line ends we want to do the Min
448:00 - and Max now if we do Min and Max on the
448:03 - table it's just going to give us the Max
448:05 - and the men which is zero and then
448:09 - 139.0 it's a little bit more useful if
448:11 - we do it for each line uh this at least
448:14 - gives us some context I probably
448:15 - wouldn't do this in an actual visual
448:17 - visualization but to give you some um
448:20 - understanding just how it works so now I
448:22 - know that um right over here the men and
448:24 - the max or the men sorry the max for
448:27 - these for action and for sports is right
448:31 - around 138 139 so it's pretty easy to
448:33 - see um and you can again go in here and
448:38 - you can remove the max or remove the
448:40 - mins whichever one you feel is best uh
448:43 - you'll probably keep the maximums in
448:45 - there for each category and so this is a
448:48 - really quickly becoming uh a pretty
448:50 - usable visualization and that's not the
448:53 - only label that you can add we still are
448:55 - using year over here so we can always
448:57 - drop year in there as well we'll create
449:00 - a label and so now we have let's see for
449:02 - this one is a puzzle genre so we also
449:06 - have the year that it had the maximum uh
449:10 - sales and so you know just some things
449:13 - that you can do you don't have to add
449:15 - that now let's go up here and we're
449:17 - going to take a look at filters because
449:19 - filters are really important you know if
449:21 - you are making this for a client or you
449:24 - making this for somebody you want them
449:26 - to be able to filter down uh to very
449:29 - specific information that they want to
449:31 - see so let's take uh the platform lots
449:34 - of different
449:35 - platforms um as you can see you know PS4
449:38 - Xbox um if you're familiar with these
449:41 - we'll click all of these um and we'll
449:44 - click okay so now this is an option as a
449:48 - filter and all we're going to do is
449:49 - we're going to click on this Arrow right
449:51 - here and we're going to say show
449:53 - filter now right now all of them are
449:56 - selected so every single one is being
449:59 - taken into account for this
450:01 - visualization but let's say we come down
450:03 - here and we say okay I don't want to see
450:05 - sales for any of these PS the original
450:09 - PlayStation 2 three or four so I'm going
450:10 - to get rid of this one this one this one
450:14 - and this one and you could immediately
450:16 - see the the changes that were happening
450:18 - so now none of the numbers none of those
450:21 - sales are being accounted for and and
450:23 - being added to the sum of global sales
450:26 - right here at
450:27 - all so that is just how a filter uh can
450:32 - work and you can also do that and you
450:37 - can get rid of all of them and you can
450:39 - go in and actually just pick very
450:41 - specific sales so if you only want to
450:43 - see the PlayStation sales you can go in
450:45 - there and do that as well so really
450:48 - really handy filter are things that you
450:51 - at least want to have as an option for
450:53 - most of your your visualizations at
450:56 - least that's what I found especially
450:57 - when you're doing client facing work
450:58 - they like to uh get in there and mess
451:00 - around and look at different look at it
451:02 - in different ways and so that's one that
451:05 - I I think is is really useful to to
451:09 - have the very last thing that we want to
451:12 - do is we want to actually add this to a
451:16 - dashboard now let's say we add come
451:19 - right down down here and we add a new
451:20 - worksheet and actually we might change
451:22 - one more thing on that last one but
451:24 - we'll just make a really simple one um
451:26 - we'll just give it genre and we'll give
451:29 - it Global sales as the
451:31 - rows um and this Nifty button right up
451:34 - here which is a sorting button so I'm
451:37 - going to sort like that I'm going to add
451:40 - the genre in just as we did I'll give it
451:43 - different colors perfect now we have two
451:46 - really quick different visualizations
451:48 - right what I want to do is just show you
451:50 - how to combine those because what you
451:52 - are going to do is you're going to
451:55 - actually come in here and you're going
451:57 - to do new dashboard that's what this
451:59 - button is right here now when we come in
452:01 - here the size is extremely small it's
452:04 - very easy to fix that all we're going to
452:06 - do is Click right here we're going to go
452:08 - to this range or this dropdown and we're
452:10 - going to click automatic so now it is a
452:13 - much larger size for us to actually drop
452:15 - our visualizations
452:16 - into uh and let's put sheet sheet one
452:20 - and we'll put uh let's put it up top so
452:23 - now it looks a little bit like this uh
452:26 - not perfect but again if I wanted to
452:28 - make this look a lot better I definitely
452:30 - would and then you can go over here and
452:33 - you can rename these things you can also
452:34 - do that back when we were in our actual
452:36 - worksheets but you can also do it here
452:38 - as well and then start um you know
452:41 - customizing it and building it out
452:43 - that's not what this video is for that
452:44 - is the last video we're going to build
452:46 - an entire dashboard it'll be kind of
452:48 - like a small project you put that in
452:49 - your portfolio um if you have gotten
452:52 - this far and you want to jump straight
452:55 - into it and you don't want to wait for
452:56 - these other videos to come out or you
452:58 - don't you just want to jump straight
453:00 - into creating an entire portfolio
453:01 - project I have an entire portfolio
453:04 - project series that covers SQL Python
453:07 - and Tableau and so go check out that
453:09 - series I have one video dedicated to
453:12 - Tableau it's like 45 minutes or an hour
453:14 - long and it covers a lot of the things
453:17 - that we're going to hear in here as well
453:19 - as a few other things but I appreciate
453:22 - you checking out this video in future
453:24 - videos we're going be going over things
453:26 - like creating bins calculated Fields
453:28 - doing joins and then creating a final
453:30 - project and putting it all together so
453:33 - thank you so much for joining me I
453:34 - really appreciate it if you like this
453:36 - video be sure to like And subscribe
453:38 - below and I will see you in the next
453:42 - [Music]
453:48 - video
453:50 - [Music]
453:53 - what's going on everybody welcome back
453:54 - to the Tableau tutorial Series in this
453:56 - video we're going to be going over bins
453:58 - and calculated
454:01 - [Music]
454:04 - Fields all right so let's jump right
454:06 - into it the first thing that we're going
454:08 - to look at are bins and bins are
454:10 - basically just groupings or ranges of
454:12 - numerical values so we cannot create
454:15 - bins uh for genre name platform or
454:18 - anything like that we have to do
454:19 - something with this sign right here
454:21 - which means that it is a numeric so year
454:24 - or all this sales data or this ranking
454:26 - data and we're going to use what we
454:28 - worked on in our very first tutorial and
454:31 - so what we're going to be using to kind
454:33 - of demonstrate how bins work is this
454:35 - year right down here so right now we
454:37 - have a range of 1993 all the way up to
454:39 - 2018 and we're going to create some bins
454:42 - to group and create ranges for these
454:45 - years and it's pretty simple all we're
454:47 - going to do is I'm going to come right
454:49 - over here to year and this little drop
454:51 - down on the side and we're going to go
454:52 - down to create and go down to
454:56 - bins now it's going to say the size of
454:58 - Bin and it's going to give you a
455:01 - recommendation based off of the
455:03 - information that is already provided the
455:04 - Min and the max the ranges of these
455:07 - values you know you don't have to do
455:09 - this but usually um it it does give some
455:12 - good estimation on what you might be
455:14 - considering if you were thinking hey
455:16 - maybe do a bit of like 20 and they're
455:17 - recommending two think about why they
455:19 - might be doing that we're going to
455:21 - change ours to five and you can always
455:24 - change what this field is going to be
455:25 - I'm just going to give it an old
455:27 - exclamation point just to um really
455:29 - spice things up here so we're going to
455:31 - click okay and as you can see it adds it
455:35 - right up here is no longer um it is no
455:38 - longer a numeric now it is a categorical
455:41 - so it now it's this is no longer just uh
455:44 - 1 2 3 4 five its ranges its groups and
455:48 - we're going to get rid of this year
455:49 - really quick actually let's keep it up
455:51 - there for a second uh see what happens
455:53 - but we're going to bring this up and
455:55 - we'll get rid of this year and this is
455:59 - is what kind of it spits out for us now
456:01 - I did look at the data um when I was
456:03 - prepping for this there are some nulls
456:05 - in the Years um and so all we're going
456:07 - to do for this is we're just going to go
456:08 - like this and we're going to exclude the
456:11 - nulls uh probably not something you
456:14 - should be doing uh if you're doing this
456:15 - for work but this is for demonstration
456:17 - purposes so we can do it ever we want
456:20 - but as you can see we now have these
456:23 - ranges so this range starts at
456:26 - 1990 and it includes 1990 all the way up
456:30 - to 1994 and then it's 1995 to
456:33 - 1999 and so just really quickly we can
456:37 - tell that the years 2000 to 2004 were a
456:40 - huge huge huge uh season or group of of
456:44 - years for game sales so these are the
456:46 - global sales for for these video games
456:50 - and so it is really helpful it's very
456:53 - useful um you can do this on a lot of
456:55 - different information we could do this
456:56 - on the sales data you can do this on age
456:59 - you can do it on years like we did and
457:01 - it can be very very useful and so uh
457:03 - really quickly that is how bins work I
457:07 - would say it's pretty straightforward
457:09 - now this is a perfect time to segue into
457:11 - the next part of the video which is
457:13 - calculated Fields uh right over here on
457:16 - this left hand side we see that the
457:18 - global sales which are in millions goes
457:19 - all the way up to 900 million and
457:22 - created these beautiful bins right down
457:24 - here but let's look at Within These from
457:27 - 1999 to 2015 let's see which of these
457:31 - has the highest percentage of course
457:32 - it's going to be this one but we can do
457:35 - something called a quick table
457:37 - calculation uh we'll create a our own
457:39 - calculation later I'll show you how to
457:40 - do that but we're going to do a quick
457:42 - table calculation and we're going to do
457:44 - the percent of total and so now we have
457:47 - these bins and instead of just seeing
457:49 - the total amount of sales that they had
457:51 - we see the actual percentages based off
457:53 - these year ranges which is really useful
457:56 - something that you could absolutely put
457:58 - uh in some real work that you do for a
458:00 - client now really quick just to show you
458:02 - something that you can do if you click
458:04 - control and you drag this over here you
458:07 - can actually save that calculation so we
458:09 - can say
458:11 - percentage of global sales and that
458:15 - actually saves it as uh you know a
458:17 - measure for us so that was a quick
458:19 - calculation but let's look how to
458:20 - actually create a calculated field so if
458:24 - we do this right here what is going to
458:26 - come up is just the global sales and you
458:28 - can do a lot of what you would basically
458:30 - do in Excel multiplication division
458:32 - subtraction a few other things but we're
458:34 - going to keep it super super simple
458:36 - today all I'm going to do is I'm going
458:38 - to take Global sales and I'm going to
458:40 - subtract I'm going to do an open bracket
458:42 - and I'm going to say EU sales and it
458:45 - auto completes for me I'm going to click
458:47 - okay and created calculation 2 I'm going
458:50 - to come in here and I'm just going to
458:52 - say Global sales
458:56 - minus EU
458:58 - sales and let's drag this over these are
459:02 - different um one's percentage one is in
459:07 - terms of sum and so I'm just going to
459:10 - bring this in right here and so now we
459:12 - are comparing against the same thing and
459:15 - if we look at the global sales we have
459:16 - probably right around 9 50 million-ish
459:20 - in this 2000 to 2004 bin and for Global
459:24 - sales minus the EU sales we're looking
459:26 - at you know 650 million so there is a
459:29 - noticeable difference and this is just
459:32 - one of the ways that you can use
459:34 - calculated fields to actually just show
459:36 - the difference between two numbers or
459:38 - you can do more advanced calculations
459:40 - depending on the data that you actually
459:41 - have so that's it for this video I hope
459:43 - you learned a little bit more about bins
459:45 - and calculated fields in the next video
459:48 - we're going to looking at a ton of
459:49 - different visualizations and graphs and
459:51 - charts and just exploring what options
459:54 - really are out there for visualizing our
459:56 - data thank you guys so much for joining
459:58 - me I really appreciate it if you like
460:01 - this video be sure to like And subscribe
460:02 - below and I will see you in the next
460:06 - [Music]
460:16 - video what's going on everybody welcome
460:18 - back to the Tableau tutorial Series in
460:20 - this video we're going to be looking at
460:21 - lots of different visualizations
460:23 - including the scatter plot and density
460:28 - [Music]
460:31 - Maps now before we jump into the
460:33 - tutorial I have some very exciting news
460:35 - in just two days on October 7th I going
460:37 - to be partnering with alter X to host a
460:39 - webinar this webinar is completely for
460:42 - data analysts who are wanting to change
460:43 - careers to become a data analyst now you
460:46 - did hear that right I will be the host
460:47 - of the event but but we will be bringing
460:49 - on guests as well who are industry
460:51 - experts who actually change careers to
460:52 - become data analyst much like myself
460:54 - they'll be sharing their stories of how
460:56 - they actually transition careers along
460:58 - with the tools that they found extremely
460:59 - useful and helpful to make that switch
461:01 - and they'll be giving lots of advice
461:03 - along the way so if you are somebody who
461:05 - is wanting to change careers to become a
461:07 - data analyst or just wanting to learn
461:09 - about data analytics this is an absolute
461:11 - fantastic place to learn a lot more
461:13 - about that I will leave a link in the
461:14 - description so be sure to go and sign up
461:16 - for that again I'm going to be there so
461:18 - so it should be really fun without
461:20 - further Ado let's jump onto my screen
461:21 - and start the tutorial now we are about
461:23 - to look at a ton of different
461:25 - visualizations uh over here you can see
461:28 - just an array of them but not all of
461:31 - them are ones that I actually think are
461:34 - useful or ones that I would actually
461:35 - recommend using and so I'm going to take
461:37 - you through some of the ones that I
461:39 - absolutely think are worth learning and
461:41 - using and trying out uh and I'm just
461:44 - going to kind of just show you how I
461:47 - might use them how they might look how
461:49 - you can navigate them a little bit now
461:51 - before we do that we do need to go
461:52 - download one data set it's this
461:55 - Starbucks location worldwide yes we're
461:57 - going to do a little bit of longitude
461:59 - latitude here and all we have to do is
462:02 - click this downloads button and it will
462:05 - download we're going to do that into
462:07 - downloads we'll save that uh yeah I've
462:10 - already done that but you know I'm doing
462:13 - this with you guys I'm doing it for you
462:15 - so let's go to our
462:17 - downloads now we have have here we want
462:19 - to come in here we're going to copy it
462:22 - or um you can cut it and then we're
462:25 - going to paste it here yeah replace it
462:28 - perfect and now we have it ready to go
462:32 - we'll come in here let's do a new sheet
462:34 - and I already have it in there but uh
462:36 - I'm just going to show you what I would
462:37 - do do new data source we'll do text file
462:41 - we'll do directory and we will open
462:46 - it and let's see what data we have in
462:48 - here before we actually begin uh just
462:50 - super quickly we have the brand so um
462:55 - whatever company has it and then a bunch
462:57 - of um location information street
463:00 - address City the state this is all in
463:04 - the United States so that's basically it
463:07 - and what we are going to do is we're
463:09 - going to go over to this sheet
463:11 - three and we have this directory 2
463:14 - that's the one I just pulled in exact
463:16 - same thing as directory but so the first
463:18 - VIs visualization that we are going to
463:19 - look at is a bar and line graph so what
463:21 - we're going to take is the year right
463:23 - here take these Global sales and these
463:27 - na
463:28 - sales and we're going to be doing this
463:30 - one right here so this has a combination
463:33 - of two separate uh types of
463:36 - visualizations so sometimes you just
463:38 - have lines sometimes you just have these
463:40 - uh these bar graphs or the bar charts
463:43 - and we're combining the two and it's
463:45 - very nice I like how this looks now if
463:48 - you notice if I put this na sales behind
463:51 - it now it kind of cuts off so now this
463:53 - Global sales is in front we're going to
463:56 - you know put that back I just wanted to
463:58 - show you that uh right here there's all
464:01 - some of global sales some of Na sales so
464:03 - if we go into this all we click this
464:05 - drop down we can change it to a line um
464:08 - we can change it basically whatever we
464:10 - want I just hit contrl Z to reverse that
464:13 - but what we can do is we can go in here
464:15 - and we can change this color and let's
464:18 - see if we can just make it red is that
464:21 - [Music]
464:23 - possible see what I did I made it orange
464:25 - that works for me um just something to
464:27 - stick out a little bit more choose
464:29 - whatever color you want and this is a
464:31 - really nice visualization this is one
464:33 - that I have used in the past we're
464:35 - looking at Global sales versus the na
464:36 - sales and so it's very easy to see the
464:39 - distinction between the two and how one
464:41 - was doing a specific year versus how the
464:44 - other one was doing in that same year so
464:46 - I really like this if you want to do
464:48 - something uh like keeping it consistent
464:50 - you can do two bars I don't really like
464:53 - this one as much um and you can again
464:56 - you can really change it up um there's
464:58 - lots of different ones that you can do
465:00 - again I prefer the line but you know do
465:03 - whatever you think is best I'm going to
465:05 - change it back because this is not how I
465:06 - want to keep it but there you go so that
465:09 - is the first one that we are going to
465:11 - look at let's move on to the second one
465:14 - and we actually will be using our our
465:16 - Starbucks data here
465:18 - now when you bring in data that has um
465:22 - any type of map or or um address or
465:26 - postal code or things like that or or
465:28 - country it's typically going to create
465:30 - this latitude and longitude it's going
465:32 - to generate that now what we want to do
465:35 - is bring this longitude right up here
465:37 - and this latitude right
465:40 - there and if you do the show me right
465:43 - now it's giving us this but what we want
465:45 - to do is add what we're looking for so
465:48 - what will we actually be trying to
465:51 - search for on this map you can do
465:53 - anything from like a postal code um and
465:57 - it will drag us right here let's come
466:00 - over to this this allows us to kind of
466:03 - scroll around a little bit um we're
466:05 - going to mess around with this one for
466:07 - just a little bit and me see if I
466:11 - can that's nice that might be too big
466:14 - let me back up one so at least in the
466:18 - Continental us a little bit down here
466:20 - this these are the postal codes so right
466:22 - now we're looking at post codes uh
466:25 - and there are a lot that you can do with
466:28 - this um really color will make almost no
466:31 - difference it just becomes this mess so
466:33 - you don't typically want to do something
466:34 - like that at least not for this let's go
466:38 - to size and if we make it really small
466:43 - you can kind of see these groupings
466:45 - these pairings um typically of like
466:47 - larger cities or major major
466:49 - metropolitan areas and so you can do
466:53 - this and it's and it's really really
466:54 - easy I don't recommend uh labeling this
466:57 - I don't even know if it'll do it um it
466:59 - would be an absolute mess to try to
467:01 - label all these
467:02 - postcodes well let's bring this out and
467:05 - let's bring these State and provinces in
467:08 - now right now we have these little tiny
467:10 - tiny uh dots on here and I think what we
467:14 - want to do is not increase the size size
467:19 - but over here we want to actually do
467:21 - this and make it a map so now it's going
467:23 - to fill in all the states we can you
467:26 - know why not we'll add some color here
467:29 - um but we
467:30 - can it hasn't numbered I didn't think
467:33 - they were numbered
467:35 - um oh that's interesting I haven't seen
467:37 - that I didn't look at that before I was
467:39 - just found that interesting but now we
467:41 - can see what uh what states Starbucks is
467:45 - in and as you can see they're in all 50
467:47 - states but it's something interesting to
467:50 - um look at to think about now if we go
467:52 - right up here we can again choose a
467:54 - different type and we're going to go to
467:56 - the density now right now it's just
467:59 - doing a density on the uh the state
468:01 - we're going get rid of that we're going
468:02 - to bring back postal code I'm just
468:04 - switching it up on you a little bit and
468:07 - you can do it as small or as big as
468:09 - you'd like um you know I like to do
468:11 - somewhere in the middle um probably
468:14 - right right about there is fine um I
468:18 - don't think it's going to make sense to
468:19 - really add any color here again all
468:20 - these poster codes are different so it's
468:22 - just going to be complete mish mash but
468:24 - this is kind of how you can use a
468:26 - density map and you can do this with uh
468:29 - countries you can do this with postal
468:31 - codes you can do this with any type of
468:33 - kind of like address or location based
468:36 - data so that is how you can use a map
468:39 - again there's lots of different ways to
468:41 - use a map and so I'm not going to show
468:44 - you every single way but in a really
468:45 - brief way this is how you can use a map
468:47 - to actually visualize your data that
468:49 - does have location uh based information
468:52 - in it so let's go over to sheet three uh
468:55 - and this data that we have over here it
468:57 - just allows for a lot of different types
468:59 - of visualizations so we're going to use
469:01 - this one um and there are lots of other
469:04 - ones that you might see out there like
469:06 - this one right here uh we obviously
469:08 - wouldn't be using this we might do
469:10 - something like this change the
469:15 - label um and maybe add why have both of
469:18 - these in here um let's get rid of this
469:21 - oops that's not what I meant let's
469:23 - actually add that let's do the sum of
469:25 - global sales and we'll just make that
469:27 - into a label as well
469:30 - so what you can do with these and and
469:33 - how you're able to use them and
469:35 - visualize them again these are not
469:38 - you'll see these often but these are not
469:40 - often ones that I would recommend you
469:42 - use that's very similar to these packed
469:44 - bubbles um you can as these Global sales
469:48 - in here again add the label it just uh
469:53 - it sometimes is not as straightforward
469:56 - the information that it's trying to tell
469:58 - you right you kind of have to search for
470:00 - it a little bit you kind of have to look
470:02 - around um but you can find some good
470:05 - visualizations in here for very specific
470:08 - types of data and so these are just ones
470:10 - to consider uh one that you'll see all
470:13 - the time is uh this guy right here and
470:18 - uh let me see if I can expand this a
470:20 - little bit because this
470:22 - is very small um let's see we have the I
470:28 - just want Global
470:30 - sales and let's label
470:33 - that the
470:36 - size I how do I expand this haven't done
470:40 - this in a while let me just expand this
470:42 - I don't use pie charts what is
470:46 - happening this is a incredibly large pie
470:50 - chart oh my gosh I am making this um
470:53 - this is becoming a problem there we go
470:56 - uh and what I actually wanted to do was
470:57 - label the uh genre as well as I've been
471:00 - doing in all the other
471:02 - ones and we'll label this now look
471:06 - whether you are a fan of pie charts or
471:09 - not you have to understand that people
471:11 - use them uh some people just like how
471:14 - they look and for certain data it can do
471:17 - well for things that have a lot of
471:20 - different um groupings or categories it
471:23 - usually isn't super great but it does
471:26 - give you some type of order of things
471:29 - give you a quick glance and people use
471:31 - them right so let's not pretend like
471:35 - it's like the the the Hideous stepchild
471:37 - all right people use it people have it
471:40 - in their dashboards and their
471:41 - visualizations all over so it's best to
471:43 - just know what they look like know how
471:45 - to do them know um how to use them best
471:48 - again I'm not a super huge huge fan of
471:50 - it myself I've used it once or twice but
471:54 - one to look out for and again you can
471:57 - come over to here and use is called a
471:59 - box and a whisker plot um it's good for
472:02 - these large um distributions you know
472:06 - this is
472:07 - like the median upper upper lower lower
472:11 - I don't use these a lot but I know a lot
472:12 - of people who love them something to
472:16 - just look at and or mess around with it
472:18 - a little bit it's pretty I think
472:21 - straightforward and it does give you
472:22 - some good insight into your data if you
472:25 - know how to use it now there is one last
472:27 - one that I want to show you I'm just
472:29 - going to create it on a new sheet make
472:31 - it easy uh we'll do year here we'll do
472:35 - some of let's do na sales why
472:39 - not and we are going to make this like
472:43 - this now it's very similar to a line
472:45 - chart but when we break it out by the
472:48 - genre and we add some color you know
472:52 - it's just a different way to visualize
472:54 - this information you can uh you know
472:58 - potentially add some stuff in here like
473:00 - some labels if you uh want to depending
473:03 - on how it looks for you but this is just
473:06 - another way to visualize the data so
473:09 - wanting to give you guys some options
473:11 - wanting to give you some things that you
473:13 - might want to look at if you haven't
473:16 - already used these before four these are
473:18 - ones all every single one that I've
473:19 - showed you are ones that I've at least
473:21 - used once um this one I maybe have
473:24 - literally only used once but the first
473:27 - ones that I showed you the ones I
473:28 - pointed out as the ones that I really
473:30 - wanted you to know are great
473:33 - visualizations to learn how to use and
473:36 - learn how to make useful for the data
473:38 - that you have with that being said that
473:39 - is all that we are looking at in this
473:41 - video again I tried to keep it super
473:43 - easy just wanted to show you some
473:44 - different visualizations the data that
473:46 - you can use to get those visualizations
473:48 - and just some other options in case you
473:50 - wanted to get a little bit uh
473:52 - spontaneous a little bit out there a
473:54 - little bit funky uh to show your boss or
473:56 - something like that thank you guys so
473:58 - much for watching I really appreciate it
474:00 - if you like this video be sure to like
474:02 - And subscribe below and I will see you
474:04 - in the next
474:09 - [Music]
474:16 - video
474:17 - [Music]
474:20 - what's going on everybody welcome back
474:21 - to another video today we're looking at
474:23 - joins in
474:27 - [Music]
474:29 - Tableau now before we get into the
474:31 - tutorial I want to give a huge shout out
474:32 - to today's sponsor and that is udem me
474:35 - they were having a massive Black Friday
474:37 - sale and so everything is about 85% off
474:39 - so if you've been looking at a course
474:41 - now is the time to buy it if you are
474:43 - looking at learning and taking an actual
474:45 - full Tableau course there are fantastic
474:48 - ones on UD me that I have taken myself
474:50 - so be sure to go and check out UD me
474:52 - while they're having this huge sale I
474:53 - will include a link in the description
474:54 - if you want to check them out now let's
474:56 - get into the tutorial all right let's
474:58 - get started and first we're going to
474:59 - start off in Excel I'm going to kind of
475:01 - walk you through the data that we're
475:02 - working with and then we're going to put
475:04 - it into Tableau and I'm going to show
475:05 - you how to do all those joins in Tableau
475:08 - so the first table that we have is this
475:09 - demographics table we have employee ID
475:12 - name of employee employee age and
475:14 - employee gender now look right here
475:16 - because this will be important uh going
475:18 - forward in the demographics table we
475:21 - have 10 uh individuals and they each
475:24 - have an employee ID now when we go to
475:26 - the job title we have our employee ID
475:29 - employee name and the job title but this
475:32 - one is missing Ryan Howard is missing
475:34 - his employee ID and then the very last
475:37 - one there are only seven employee IDs
475:41 - and no names um and so we're going to
475:43 - use all of that and I'm going to show
475:44 - you how to actually do the joins into
475:47 - Tableau Tableau does a really fantastic
475:49 - job of visualizing for you so it takes a
475:52 - lot of the guesswork out um I am going
475:54 - to include a link to my joins video in
475:56 - SQL because these two are very closely
475:58 - connected and and if you understand how
476:00 - the joins work in in SQL you'll
476:03 - understand how the joins work in Tableau
476:05 - it's almost the exact same thing so with
476:09 - that being said let's jump over to
476:11 - Tableau so I'm going to pull this up
476:13 - going go right over here and now we have
476:16 - uh where where we can connect to our
476:18 - data and so we're going to click
476:20 - Microsoft Excel I'm going to scroll down
476:22 - here to Tableau joins file I'm going to
476:25 - open this up and I have it open so I
476:26 - can't use it so let me get rid of that
476:29 - and let's open it again perfect so now
476:33 - what we're going to do and I'm going to
476:34 - show you how to actually open up the
476:35 - joins um in a second but what you need
476:37 - to understand is when you first come
476:39 - here Tableau doesn't automatically allow
476:43 - you to to use the joins they use
476:45 - something called relationships and there
476:47 - are joins on the back end but they call
476:49 - it relationships because they are
476:51 - inferring all of these things they're
476:52 - trying to go in and make that inference
476:54 - for you so it takes a lot of the work
476:57 - off of you and most of the time that
476:58 - works and and you know you just plug
477:00 - these two things in here like a
477:02 - demographics and the job title and it is
477:06 - going to you know help you build those
477:09 - what they call relationships and you can
477:11 - click on this and learn how the
477:12 - relationships differ from joins again
477:14 - there's not a huge difference but it's
477:16 - not as custom customizable and you can't
477:18 - as easily do left joins or full joins or
477:21 - all these things that we're about to
477:22 - look at so uh I'm going to take this one
477:25 - off and what we're going to do to
477:27 - actually be able to look at the joins
477:30 - and and choose what joins we want to use
477:32 - is we're going to do this dropdown we're
477:33 - going to click open and so now we are in
477:37 - a place where we can actually create the
477:40 - joins uh and again it's just much more
477:43 - customizable and so um back when I was
477:46 - using
477:47 - regularly I would use the relationships
477:50 - when it was pretty simple and
477:52 - straightforward cuz almost they almost
477:53 - always got it right but uh you know the
477:57 - joins it it just makes more sense in the
478:00 - way it visualizes it for me so most of
478:01 - the time I'd be using the joins so let's
478:05 - pull over this job title right here and
478:08 - it's going to make this connection now
478:10 - before if you remember just about you
478:12 - know 30 seconds ago when it connected
478:14 - them it was just a line and and so it
478:16 - gave us the this option down here to
478:18 - kind of edit the relationship but now
478:20 - it's giving us this visualization and so
478:22 - let's click on it really quick and what
478:24 - is going to come up is the different
478:26 - types of joins that you can do you can
478:28 - do an inner join a left join a right
478:30 - join and a full outer join and then you
478:33 - can actually choose the different uh
478:35 - data sources and how you're connecting
478:38 - them so again um I'm going to walk
478:40 - through a little bit of this but I think
478:42 - the sequel video that I did on this
478:44 - shows it so well um I would highly
478:47 - recommend using that um and I recommend
478:50 - learning SQL too so you know two birds
478:52 - one stem so I'm going to get into each
478:55 - of the joins how they work what data is
478:58 - going to be displayed um and these
479:00 - visualizations are really going to be
479:02 - helpful and I think that it's it's just
479:05 - nice that they have it because it's a
479:06 - little reminder okay um you know this is
479:09 - what this joint is or this is what that
479:10 - joint is so super super simple so right
479:13 - now we have the demographics table and
479:15 - we have the job title table and so what
479:18 - it's doing right now and let's get rid
479:20 - of this what it's doing right now is
479:21 - it's doing an inner join and so it's
479:23 - pulling everything that overlaps if it
479:26 - matches on the employee ID and the
479:29 - employee ID and so right now you only
479:32 - see one through n but if you remember in
479:34 - the demographics table we had uh 1,000
479:38 - all the way through 10 so where's that
479:40 - 10th one well the 10th one is not there
479:42 - and that is because in this job title
479:45 - employee ID it only went up
479:48 - to9 and then Ryan Howard just didn't
479:51 - have an employee ID in there for
479:52 - whatever reason so that data is going to
479:54 - be missing now when you are using actual
479:57 - data sets very large data sets which we
480:00 - will use in the next video when we walk
480:02 - through an entire
480:03 - project um when you use large data sets
480:07 - this can be the difference between clean
480:10 - data and very wrong data and and
480:12 - visualizing it correctly and showing
480:15 - completely wrong numbers and so you
480:17 - really need to be sure you understand
480:18 - how your data works together when you're
480:20 - doing these joins so how can we fix this
480:23 - how can we um make it to where we can
480:27 - see all of the data well right now we're
480:29 - only making it to where if the employee
480:31 - ID is equal to the employee ID so we
480:33 - only are going to see through 109 and
480:35 - through 109 we're never going to see
480:37 - Ryan so there are two different types of
480:39 - joins that we could do to make it see it
480:42 - and then there's something else that we
480:43 - can join on to where we can see that
480:45 - data the first that we can look at is
480:47 - the right uh join and what this does is
480:51 - it's going to take everything that is
480:52 - the same but also everything from this
480:55 - job title table regardless of if it has
480:58 - a match in the demographics table so
481:00 - it's pretty you know this visualization
481:01 - does it all it's going to show
481:03 - everything in the right table regardless
481:05 - and it's only going to show things from
481:07 - this table if there's a match so let's
481:09 - try this one and we should see Ryan
481:11 - Howard in the job title table so let's
481:14 - click on it and if we scroll down there
481:16 - going to be n n n n n until we get to
481:20 - over here where we now have the data
481:24 - that we had in that actual table but
481:27 - again this wasn't a match and so we
481:29 - weren't able to see that data so this
481:31 - gives us a way to where we can see all
481:34 - of it um all everything from that right
481:36 - table this job title table and now we're
481:38 - going to click on the full outer now the
481:41 - full outer is going to take everything
481:43 - from both regardless of if there is a
481:45 - match at all and so right here you're
481:48 - going to see Ryan Howard and Ryan Howard
481:49 - now why are there two different rows for
481:51 - it well because in the demographics
481:53 - table there was an employee ID so we're
481:56 - seeing the employee ID Ryan Howard his
481:58 - age and his gender and over here there
482:02 - was no match right but in the job title
482:05 - table again this one didn't have an
482:07 - employee ID and so we we are going to be
482:10 - able to see this data but over here it
482:14 - has no match and so that's why showing
482:16 - us two different rows is because there
482:19 - was no connection there was no match
482:21 - there that's what a full outer joint is
482:23 - going to do now just for uh the purposes
482:27 - of seeing what this one does as well we
482:28 - have the leftand table um and now we are
482:31 - able to see the 110 or or 1010 that we
482:35 - didn't see before um and it's putting in
482:38 - nulles over here because there's no
482:40 - match so that's that is um what we have
482:43 - so far now like I said just a second
482:46 - going to go there is a way that we can
482:48 - do this without using the employee IDs
482:51 - we're allowed to use a different join
482:53 - Clause now there is the name of the
482:55 - employee in both of them this one is
482:57 - called name of employee and in the job
482:59 - title it's called employee name they
483:01 - don't have to have the same column name
483:03 - in order to join it you can do whatever
483:05 - you want so I'm going to get rid of this
483:10 - one and now we are only tying it on the
483:13 - employee name and let's do an inter
483:17 - join and it should be basically
483:20 - everything um except the only piece of
483:22 - data that wasn't filled in which is that
483:25 - 110 over on the job title table and so
483:29 - this way was a slightly different maybe
483:32 - uh less thought of way because normally
483:34 - you do it if there's an ID you go on the
483:36 - IDS but because we had a lack of data
483:41 - for in in one of the tables in the job
483:43 - title table we decided to use a
483:45 - different column to to join on and now
483:48 - we're able to look at all the data
483:50 - together so super quickly that is an
483:54 - inner join a left join a right join and
483:56 - a full outer join and it's pretty easily
483:59 - visualized here and you're able to uh
484:02 - change what you're joining on right here
484:05 - but you're also you can do multiple so
484:07 - if we want to do the employee ID and the
484:09 - employee ID you can do that as well and
484:11 - you can keep going as as many as you'd
484:14 - like um and
484:17 - right here or you can change some of
484:19 - these things uh I don't there aren't a
484:22 - lot of use cases for this um but you
484:25 - know you can absolutely do this um and
484:27 - mess around with this as seen I'm not
484:28 - going to go through it in the tutorial
484:30 - because again 95 plus perc of the joins
484:34 - you're doing you're going to want to do
484:35 - it to where this equals this um and if
484:37 - you want to get into where it doesn't
484:39 - equal or or all these other things which
484:41 - is more complicated I think it's much
484:44 - better to learn that in SQL uh that's my
484:46 - personal preference and so um again all
484:49 - in the SQL tutorial if you want to check
484:50 - that one out so you're able to join on
484:52 - multiple things now let's get rid of
484:54 - that one because we can actually bring
484:56 - in this salary one as well and what
485:00 - you'll see right down
485:01 - here is that we have our employee ID and
485:05 - this is all coming from the demographics
485:07 - so employee ID name of employer employee
485:09 - age employee gender then right over here
485:12 - we have the job title table so employee
485:16 - ID job title employee name job title and
485:19 - then right over here was or is our
485:23 - salary table and so we have employee ID
485:25 - salary and employee salary so again this
485:28 - is a way that you can put all of this
485:30 - data into one place and and just a
485:32 - second we'll go into the
485:33 - worksheet right down here I'm going to
485:35 - show you kind of how it looks because it
485:37 - looks a little bit different um than
485:39 - previous tutorials and so I want to show
485:42 - you how that actually all works together
485:45 - um but again you can create these joins
485:48 - um as well and do the exact same thing
485:50 - that we just looked at and customize the
485:52 - joins customize what you're what you're
485:54 - um uh joining on and then you have your
485:58 - finished product and so right now we
486:00 - have our demographics plus Tableau joins
486:03 - file and we can rename that if we want
486:06 - I'm going to call this um demographics
486:09 - plus joins
486:11 - demo and click enter and so now that is
486:15 - saved so so now let's go down to the go
486:17 - to worksheet we're going to click on
486:19 - that and so up here on our left side
486:21 - this may look a little bit different
486:22 - than it normally does um because it's
486:24 - broken out um on the measure names and
486:27 - the measure values it's broken out by
486:29 - the tables that they were joined on so
486:31 - we can pull in the employee gender now
486:34 - and we can pull in the employee name now
486:37 - um and we can pull in the employee ID
486:39 - again if we want to from the job title
486:42 - table and we can pull in the employee ID
486:44 - from the salary table we could do that
486:46 - if we wanted to it makes no sense uh uh
486:48 - for actually creating any visualizations
486:50 - but you know you can do that and so you
486:52 - probably you wouldn't be able to do that
486:54 - if you hadn't joined these together and
486:56 - so down here in the measure values the
486:59 - values that we have are from the
487:00 - demographics table and the salary table
487:02 - all of the um all of the stuff from the
487:06 - employee title none of those things were
487:10 - um values and so we can't use there are
487:12 - going to be no values down here and so
487:14 - really quick let's take the name of the
487:16 - employee let's take their salary sure
487:20 - why not um let's order
487:24 - that let's take the employee
487:26 - salary we'll do
487:29 - color and uh expan this out a little
487:34 - bit maybe one more time oops just like
487:38 - that and there you go so that is how you
487:40 - do joins in Tableau and I think Tableau
487:42 - does a really fantastic job of making it
487:44 - pretty simple they have the different
487:46 - types of joins when you click on that
487:48 - that join button and it shows you the
487:50 - inner and the left and the right and the
487:52 - full outer and they make it pretty
487:54 - simple um and and and it's just really
487:56 - useful to be able to see that while
487:59 - you're creating it and see the output
488:01 - below like we just did a second ago it
488:03 - it just makes it so simple to create
488:05 - those joins and then just keep going
488:07 - because you already know what your
488:08 - output is going to be and you can kind
488:09 - of mess around with it and make sure
488:11 - you're getting the data that you need in
488:13 - the very next video we're going to be
488:14 - doing an entire project in tap we're
488:16 - going to be using a lot more data and
488:18 - it's going to be a a complete project
488:20 - that you can add to your portfolio and
488:22 - it's going to be a really good time so I
488:24 - hope that you joined me for that one I
488:26 - appreciate your time I hope that this
488:27 - was helpful thank you guys so much for
488:29 - watching I really appreciate it if you
488:31 - like this video be sure to like And
488:33 - subscribe below and I'll see you in the
488:34 - next
488:36 - [Music]
488:44 - video
488:47 - what's going on everybody welcome back
488:49 - to the Tableau tutorial Series this is
488:50 - our very last video in the series and
488:53 - today we'll be doing an entire
488:57 - [Music]
488:59 - project now if you're watching this
489:01 - video I hope that you watch the other
489:03 - four videos in this series just so you
489:04 - can get the basics down you kind of know
489:06 - what you're doing uh this won't be a
489:08 - crazy hard project this is a beginner
489:10 - tutorial Series so I'm trying to make
489:12 - this super easy so you can follow along
489:15 - nothing super comp complicated I promise
489:17 - and if you were wanting to go above and
489:18 - beyond and just make a lot of different
489:20 - dashboards or try a lot of different
489:21 - things there's a ton of data in here and
489:24 - so I'll show you some of the things that
489:25 - I would do you know as we go through it
489:27 - of the things that I would be looking at
489:29 - and some of the different visualizations
489:30 - that I might do as well but again in
489:32 - this video we're going to be singing to
489:33 - a lot of the basics but I'll switch over
489:35 - my screen in just a second I will show
489:37 - you the final product and then we will
489:38 - actually walk through step by step of
489:40 - how to do the entire dashboard and at
489:42 - the end you should have a completed
489:44 - project that you can add to your
489:45 - portfolio or you know just share on
489:47 - LinkedIn if you want to do that as well
489:49 - with that being said let's jump over to
489:50 - my screen and let's get started all
489:52 - right so let's get me off screen and
489:53 - show you what we're going to be working
489:54 - on today this is the final dashboard
489:56 - that we're actually going to be building
489:58 - and so it's nothing crazy right I'm sure
490:00 - you have seen all of these things before
490:03 - um and I'm just going to help you kind
490:04 - of build it out show you what to do the
490:07 - buttons to click um and it's really
490:09 - going to be a simple walk through by the
490:11 - end of this you should be able to do all
490:12 - these things very easily and I highly
490:15 - encourage looking at at the data and
490:17 - looking at these visualizations and
490:18 - seeing what else you can do with it
490:20 - there's a lot of different colors a lot
490:22 - of different visualizations um that you
490:24 - can do with this data I'm just showing
490:26 - you this today and so the more you go
490:29 - out there and the more you do this on
490:30 - your own and you mess around with stuff
490:33 - and and choose different things and see
490:34 - how it all works the better you're going
490:36 - to get and so I highly highly encourage
490:38 - doing that uh so what we are going to be
490:40 - working with today is an Airbnb data set
490:43 - I'm going to show you that in just a
490:45 - second and I'm going to show you the
490:47 - data and we're going to just jump right
490:49 - into it all right so this is the data
490:51 - set that we are going to be using this
490:52 - is the Seattle Airbnb open data set and
490:56 - let's scroll down really quick um
490:58 - there's three different csvs in here and
491:00 - so this is some of the data that we're
491:02 - going to be working with um some date on
491:05 - listings and some pricing and then
491:07 - there's the actual listing that shows um
491:10 - the actual street address the location
491:13 - the price the bedrooms all of these good
491:15 - stuff stuff and then there's a
491:18 - reviews um and it has you know some
491:20 - comments and you know talks about some
491:22 - of the reviews so this is what we're
491:26 - going to be working with but you don't
491:28 - have to go in here and download it I
491:30 - have already combined all these csvs
491:32 - into one I've put it on the GitHub so
491:36 - I'll have a link below so you can just
491:37 - click on that and you don't have to do
491:38 - all the stuff that I did to get this set
491:40 - up um just so you know this is from 2016
491:43 - so this data set is a little bit old if
491:45 - you want to you can come right here and
491:48 - I will leave this link as well and you
491:50 - can get the data set from you know what
491:52 - is this a couple weeks ago uh this is
491:55 - they they are continuing to update this
491:56 - this is always updated and so you can go
491:58 - ahead and download these but some of
492:00 - these are the CSV Dogz um so you may
492:03 - need to like convert it I don't want to
492:04 - go through that process um on you know
492:08 - in the video and so I am just going to
492:10 - go with what is literally in kaggle um
492:13 - and use that but if you want want to
492:15 - have an updated one for your project I
492:18 - just advise you to go in here and grab
492:20 - it yourself and that should be perfectly
492:21 - good so go ahead and download the data
492:25 - set from the GitHub and we should be
492:27 - good to go so this is the Excel that I
492:29 - was just talking about this has all of
492:31 - our csvs in one place this is you know
492:33 - an Excel workbook so in this reviews
492:36 - actually let's start with the listings
492:38 - because that's kind of where it all
492:39 - stems from uh we have our listing and
492:42 - the DAT or the data in here is um you
492:45 - you know really extensive there's a lot
492:47 - of data in here so let's get over really
492:49 - quick um the listing refers to the
492:52 - actual home that they're renting out the
492:54 - Airbnb so it shows their
492:58 - location um and there's a lot more
493:00 - location information over here I'm
493:02 - getting into it in in just a second so
493:04 - there's the neighborhood the city state
493:06 - um zip code all stuff that you know may
493:09 - be useful there's a latitude and
493:11 - longitude it shows what type of property
493:14 - it is so that's really really good um
493:17 - right over here it has you know how many
493:19 - bathrooms bedrooms and beds um you know
493:22 - sometimes if it's a five bedroom house
493:24 - it has seven beds so that's why there's
493:26 - those two different um Fields I don't
493:28 - know if you're familiar with Airbnb and
493:31 - and you know what they have on there but
493:33 - just something to note uh they have the
493:35 - price this is the price per day this is
493:37 - a weekly price a monthly price and if
493:40 - there's a deposit needed uh and then a
493:42 - cleaning fee as well so a bunch of
493:45 - financial data that's you know super
493:47 - useful we go into it a little bit but
493:49 - there's so much you can do with that um
493:52 - you know if you want to dig into that
493:53 - and that's kind of it the rest of it's
493:55 - pretty uh pretty useless um and there's
493:57 - a lot so there's so much data in here
493:59 - almost you know more than half by far is
494:02 - nothing you would put in any type of
494:04 - visualization um and this is pretty
494:06 - common uh you're not going to
494:08 - get data every column where you're going
494:11 - to be able to use it a lot of times it's
494:13 - just a lot of useless junk and so you
494:14 - have to know what you're looking for and
494:16 - know uh you know what's actually useful
494:18 - so that's the listing then we have
494:20 - reviews
494:22 - now what's really a little bit confusing
494:25 - in here and something that you just need
494:26 - to kind of understand about the data um
494:28 - and something that if you're if you get
494:29 - a data analyst job you need to
494:32 - understand your data because it's very
494:33 - easy to come in here and say okay
494:34 - there's an ID ID field and here's an ID
494:37 - field so that means that those are the
494:39 - same well not in this case um this ID
494:42 - field is actually the review reviews ID
494:45 - not the reviewer ID that refers to like
494:47 - the person this is the reviews ID this
494:50 - listing ID is the actual ID right there
494:56 - so really important to
494:58 - note um and then the L and so then they
495:01 - just have their comment there what they
495:03 - left as a review and then on the
495:04 - calendar um I don't know why I'm
495:06 - scrolled down uh we have this listing
495:09 - idea again so again that listing ID is
495:11 - equal to the ID in this listing table
495:14 - and we have a date in a price so this
495:16 - refers to a specific location and on
495:18 - this day they got $85 for it somebody
495:22 - rented it out um and so then there's
495:24 - these like T's and Fs um let's try to
495:26 - find a blank one really quick here's a
495:29 - blank one so there's these T's and Fs uh
495:32 - the t means that it was taken um the f
495:35 - means that it's vacant I don't know
495:37 - exactly what it means uh what a TF means
495:40 - but that we can deduce that much from
495:42 - this and so you can see when and how
495:45 - much this person was making or this
495:47 - homeade uh in that time so really really
495:51 - good data in here there's a lot to work
495:53 - with um and and so we're just going to
495:55 - be kind of I'll give you a little bit of
495:58 - a use case for it in a second and then
496:00 - we're going to start trying to answer
496:01 - some of those the building out some of
496:03 - the visualizations for that use case uh
496:06 - again you could have 20 different use
496:08 - cases for this data or more um honestly
496:11 - for this data where you can build out
496:13 - different dashboards and different
496:14 - reports literally with just this data
496:16 - but you know we're doing a pretty
496:19 - General broad project and so it's hard
496:21 - to answer all of them so let's jump over
496:25 - to Tableau we're going to get started on
496:27 - this and we are going to build out
496:30 - everything all right so let's come right
496:32 - here uh this is a Microsoft Excel we'll
496:36 - open that up do this one we will open
496:41 - it and give it just a second says it's
496:44 - executing the query it's pulling the
496:46 - data in all right so we have our
496:50 - calendar our listing and our reviews
496:52 - those are the different tabs at the
496:53 - bottom we're going to start with the
496:55 - listing this is the the kind of the main
496:58 - one has um you know the there's I didn't
497:01 - show you but there's about
497:03 - 3,600
497:04 - locations that they had in
497:06 - there uh let's just have it update
497:10 - automatically I don't know why we need
497:12 - to click on that but um so we have this
497:14 - list listings we have our calendar and
497:18 - our
497:19 - reviews what we're going to do is going
497:20 - to come in here and we're going to open
497:23 - it as we did in our very last video uh
497:25 - for the joins so now that we've opened
497:27 - it we can kind of go in here and we can
497:30 - do the joins as um as needed and so
497:34 - let's go over here and we're going to uh
497:37 - let's start with
497:39 - calendar put it right there that was
497:41 - super slow I
497:44 - apologize all right let's wait for it
497:48 - to get the data start setting everything
497:54 - up did not think it would take this long
497:56 - I
497:59 - apologize no take your time so let's
498:03 - click on here and right now it has the
498:06 - uh the join based on the price which
498:10 - obviously is not going to work um and if
498:12 - you remember there is no ID in this
498:14 - calendar it's just just the listing ID
498:17 - um we can actually look right here
498:18 - there's just the listing ID so we're
498:19 - actually going to put listing ID is
498:22 - equal to
498:25 - ID and right down here we can see that
498:27 - we have a lot of of well you can't see
498:30 - it um but we show that there is a lot of
498:33 - data um and so we know that that is
498:36 - correct we know that that is now pulling
498:38 - in data correctly because it's showing
498:39 - up down here so that's a good thing now
498:43 - in this listings there there are about
498:47 - 3600 um about 3600 listings and
498:52 - so that all the data that's in listings
498:54 - is going to be in there but on the
498:57 - calendar because we converted from a CSV
498:59 - to an Excel workbook it isn't able to
499:01 - store as much information so some of the
499:03 - ones in calendar may have gotten cut off
499:05 - so we can just keep at this inj join
499:07 - because we know that if it's in listings
499:09 - it is going to be in calendar we know
499:11 - that it if it um there may be some in
499:14 - calar Cal that aren't in listings so if
499:17 - we really um you know if we really
499:20 - really wanted to we could do a full
499:21 - outer or something like that I I haven't
499:24 - really thought through this as I'm
499:25 - talking through it in my head but we
499:27 - know that uh everything that's in
499:30 - listing is going to be in calendar and
499:32 - so you know we don't really need to do
499:34 - anything other than an inner
499:36 - join and we can also pull in these
499:41 - reviews and it's going to do the same
499:43 - thing as before where just kind of
499:44 - pulling in the data and it defaults to
499:47 - ID equals ID now we know that that is
499:50 - not correct um because the ID in here is
499:53 - referring to the review ID we need to go
499:55 - to the listings ID so we need the ID be
499:58 - able to you know be part of that
500:00 - listings ID if we do the
500:03 - ID it goes down to
500:06 - 2,555 rows if we do how it's supposed
500:09 - and because that's just you know it's
500:10 - random luck there happen to be some
500:12 - numbers that are in both fields um that
500:15 - tie together if we do the correct one
500:17 - where we hit the listing ID it bumps it
500:19 - up to I think 2, 373,000 oh maybe more
500:23 - than that uh 23 million rows right a lot
500:27 - lot lot more and so it's super important
500:30 - to get these joins right to tie them
500:32 - together on the right Fields if you just
500:34 - do it based off what Tableau tells you
500:36 - because it has that automated um you
500:38 - know it goes into these fields and says
500:41 - okay these are the same exact column
500:43 - name so they're most likely going to be
500:46 - what you're looking for well it was
500:47 - incorrect in this point so it's really
500:49 - important to check those things and make
500:51 - sure you're pulling in the right data
500:52 - again we're going to keep it that inner
500:54 - join um you know if you wanted to you
500:57 - know try to see if there's any other
500:58 - data that correlate we're keeping it
500:59 - simple today but sometimes you need to
501:01 - join on multiple things uh so just uh a
501:05 - you know a tip so let's get out of here
501:08 - um and we are good to go so this is our
501:10 - listings plus Tableau full project
501:13 - that's what we'll that's what we'll be
501:15 - working with um and we we were able to
501:17 - tie all three of these um you know as
501:20 - you call them tables or sheets or
501:22 - whatever you want to call them we were
501:23 - able to tie them together so let's go
501:26 - over here to our first
501:28 - worksheet uh let's
501:30 - see all right so this says Tableau
501:32 - public only works with less than 15
501:34 - million rows of data we have 23 million
501:36 - rows of data that is uh that's a problem
501:39 - um and when I did this before it didn't
501:42 - do that so I you know we're going to
501:44 - work through this together so this is
501:46 - date reviews I believe this is date for
501:51 - um this is date for the calendar which
501:56 - is going to be a lot of rows of data and
501:58 - so I'm sure that's part of it let's
502:02 - see let's do
502:04 - years we only want 2016 oops we only
502:09 - want
502:12 - 2016 let's do okay
502:16 - let's see what that does let's see if
502:17 - that gets us under what we need um we
502:20 - only want 2016 data
502:22 - anyways so if it's in 2017 we were going
502:25 - to take it out um anyway so we'll see if
502:28 - that gets us underneath I have
502:30 - absolutely if this T ends up taking like
502:32 - 20 minutes I will just cut it and you
502:36 - know you won't have to wait as long as
502:37 - I'm waiting so let's see how long it
502:43 - takes all right so it took about 20
502:45 - minutes and it did absolutely nothing
502:49 - um one thing I do know is that we don't
502:53 - actually use this review tables at all
502:56 - um just for demonstration purposes so
502:59 - we're going to remove that and let's see
503:01 - if that helps us in any
503:06 - way if it does we're just going to keep
503:08 - it as is um you know the reviews table
503:11 - is really just for demonstrating how to
503:13 - do the joint
503:15 - but we weren't actually using any of the
503:16 - data for any of the
503:18 - visualizations although you
503:21 - could again I'm going to see how long
503:23 - this takes uh and I'll cut
503:27 - ahead all right so that worked uh
503:30 - perfectly it apparently took out all the
503:32 - data that we needed all the rows that we
503:34 - needed to get under that level again I
503:35 - was just doing that to show you the that
503:38 - that joins how you needed to change the
503:41 - columns to make sure that it joined
503:43 - properly we don't actually use for any
503:44 - of the visualization so their end
503:46 - product is going to be totally fine I
503:48 - don't know why uh this didn't happen to
503:50 - me when I when I created this whole
503:51 - thing already um so just going to move
503:55 - forward because uh I make mistakes so uh
503:58 - let's keep moving the first one that we
504:00 - are going to make is that uh is that
504:03 - colorful one I'll probably pop it up on
504:05 - screen so you can see it uh well if I
504:07 - remember I'm going to pop it up on
504:08 - screen um it's the colorful one it's the
504:11 - price by ZIP code so we're going to be
504:12 - looking at these zip codes and kind of
504:14 - see
504:15 - um you know how
504:17 - expensive is each zip code um and before
504:21 - we actually start I just remembered I
504:23 - want to talk to you about the use case
504:25 - for this
504:26 - data I want to imagine you to imagine
504:29 - that you're working for somebody they're
504:30 - like hey where you know I want to start
504:33 - an Airbnb business I want to know where
504:35 - I should go where should I buy up buy a
504:39 - home put it up on Airbnb and start
504:41 - renting it out where's the best place
504:43 - you know what are some of the fact fact
504:44 - that I should be looking at uh and so
504:47 - that's kind of what our use case is so
504:49 - we're going to some of the things that
504:51 - he cares about are things like bedrooms
504:53 - um location which is really important
504:56 - and how much price he's actually going
504:58 - to get how much money can he charge and
505:01 - so he's trying to optimize that to make
505:03 - sure that whatever rental he gets he can
505:05 - make a the most profit from instead of
505:07 - choosing something that you know he
505:09 - thinks would work but you know in the
505:10 - end he's actually not making that much
505:11 - money so those things are important so
505:14 - that's our use case we're trying to help
505:16 - this guy out help him find a really good
505:19 - Airbnb um so let's take a look at these
505:21 - zip codes real quick we have uh quite a
505:23 - few of them and there's one that's null
505:27 - uh we'll exclude that or if if it
505:28 - doesn't have a zip code we'll just
505:29 - exclude those because they're not going
505:31 - to show up on the these visualizations
505:33 - anyways um and so we want to look at the
505:36 - price so we just want to find uh the
505:39 - price which should actually be down
505:41 - here and not the sum
505:45 - uh no we want to look at the average
505:49 - price and let's order that this is great
505:53 - um so this is the most expensive one uh
505:56 - ZIP code 98134 at
505:59 - $26 uh
506:01 - per for the average price uh but let's
506:04 - give that some color really quick Let's
506:07 - uh where's the ZIP code it's up here so
506:09 - let's take that zip code we're going to
506:11 - put it right over here we're going to do
506:12 - color and it's going to give it some uh
506:15 - assorted colors now these colors are
506:17 - going to um when we do the map in just a
506:20 - little bit these colors will um match
506:22 - what we're doing in there and so you
506:25 - know I I like to try to color coordinate
506:27 - things um we're not doing going too
506:29 - crazy with the colors today so this is
506:31 - our very first visualization
506:32 - congratulations it is uh it is complete
506:36 - so uh we can label this one and we can
506:39 - just
506:40 - do price by zip code and I'll make that
506:47 - bold I don't know I usually like it bold
506:49 - we'll apply we'll do like that and boom
506:52 - first one is done uh and this is our
506:55 - starting place to say uh Hey person
506:58 - who's looking to buy this Airbnb here
507:01 - are the zip codes where they are able to
507:02 - charge the most um for for their Airbnb
507:07 - so let's go over to the second sheet and
507:10 - we are going to be doing the map and so
507:12 - um map is pretty easy
507:14 - but it it's pretty easy Once you
507:17 - actually get the data that you need
507:19 - although there's a lot of different data
507:21 - that you can use for the actual U map
507:25 - right here you need something that shows
507:28 - um the location and there's a lot of
507:30 - things that show location in here in
507:32 - fact they already um provide a latitude
507:34 - and longitude and then at the bottom
507:36 - they generated a latitude and longitude
507:39 - from from some different um fields and
507:42 - then there's just a bunch of different
507:44 - um State there's um States there's zip
507:47 - codes there are uh I think another one I
507:51 - yeah like country there's a lot of
507:53 - location data in here so which one do we
507:56 - want to use we want to stay consistent
507:59 - we don't want to deviate from that and
508:00 - start using different um L long
508:03 - longitude and latitudinal uh coordinates
508:05 - because that could throw off our our
508:07 - results completely we want to stay
508:09 - consistent with what we're using so we
508:11 - actually want to use this ZIP code but
508:13 - when we pull it up here it's going to
508:15 - give us uh basically the same um you
508:17 - know it's going to show these zip codes
508:18 - but we were going to right over here
508:20 - we're going to click on this one and now
508:22 - it's going to separate them out so now
508:24 - we have all of these um you know kind of
508:27 - separated out what you might get when
508:29 - you first do this um is it might look
508:31 - like this you may have to zoom in um I
508:34 - know that that happened to me the other
508:36 - time excuse me go to here that's what
508:39 - happened to me uh just when I first did
508:41 - it so uh know that that may happen
508:45 - and we want to change the colors the
508:48 - exact same way that we did them before
508:50 - so we're just going over here we're
508:51 - doing color and these colors do um they
508:57 - do should match up with the um with the
509:01 - other ones let me um exclude this let me
509:04 - see if it does 98134 that's the
509:08 - blue and right over here 98134 that's a
509:13 - blue I I I believe believe they are
509:14 - going to be the same yep and so just
509:17 - scrolling back if you look at the ZIP
509:19 - code on the far right uh they are the
509:21 - same so if you're looking like this
509:23 - section right over here I I'm just
509:25 - wanting to make sure I'm not going crazy
509:27 - uh before I get into this and realize
509:29 - I'm not correct at all so uh now what we
509:33 - want is you know this doesn't really
509:35 - give us any information if I was just to
509:36 - glance at this map I would have no idea
509:39 - what you're trying to show me um any
509:42 - information off this so we want to show
509:43 - some actual
509:44 - information so first thing that we're
509:46 - going to do is we're going to actually
509:48 - add the label to this so that you can
509:51 - see it you know when you're going over
509:53 - here and you see okay here's this um zip
509:56 - code um in the dashboard when we create
509:58 - it you can click on this but if you just
510:01 - want to do it visually without having to
510:03 - click anywhere you'll be able to see
510:04 - okay 98134 that's right here so this
510:07 - location right here is you know able to
510:09 - charge a lot of money it's probably a
510:11 - really nice neighborhood so um and we
510:14 - can back that up by putting the average
510:18 - price so these these two visualizations
510:20 - are really they really go hand in hand
510:23 - we're going to add oops not the
510:26 - sum this one needs to be the average so
510:28 - you go to this measure the sum go to
510:31 - average and there you go and these
510:34 - should match so this should be
510:41 - 206.125
510:42 - 206.000 so this all matches um and we
510:46 - can uh we can actually change that size
510:48 - a little bit if you want to actually get
510:50 - it in um get it within each of these
510:53 - things you know adjust it as you see
510:56 - fits I think that's fine right there um
510:59 - no need
511:00 - to mess with it
511:03 - anymore all right so let me see I think
511:05 - that is everything for this one I don't
511:07 - know if I want to add anything else uh
511:11 - no I'm going to keep it how it is so
511:13 - that is our second visualization again
511:15 - these ones are directly uh correlated
511:19 - and and you know this there's just
511:21 - different ways to visualize it this one
511:22 - you can see actually on the map where it
511:24 - is and the average price this one you
511:26 - can see from highest to lowest so again
511:28 - you know sometimes when you're doing
511:29 - these visualizations you're going to
511:31 - have these accompanying um uh these
511:35 - accompanying visualizations in your
511:36 - dashboard that's very normal so let's
511:40 - move over to the third one and for this
511:43 - third one um you know something that our
511:47 - guy was looking at is he's like okay
511:49 - well you know I'm thinking about listing
511:51 - it on Airbnb but I also want to live in
511:54 - it so I want to know the best times to
511:57 - actually um you know put it on the
511:59 - market for people to be able to use and
512:02 - so I was like okay man no problem uh
512:05 - let's let's take a look at when when are
512:07 - people spending the most money in
512:09 - airbnbs and we actually had that
512:11 - calendar um if you remember let's look
512:14 - let's see this calendar so we have this
512:16 - available the date the listing all of
512:19 - that stuff um and let's look at the date
512:24 - in
512:25 - here uh and we obviously don't want it
512:28 - like this we want it to be more uh more
512:30 - of a Time series and we're going to do
512:33 - be doing that based off of uh the price
512:37 - for the calendar so let's go see if we
512:39 - can find that really
512:41 - quick okay here's the price
512:46 - where is that calendar
512:48 - one let me see okay there's the calendar
512:53 - oh
512:55 - here I totally forgot where that was
512:57 - supposed to be o that looks
512:59 - terrible okay um let's see let's let's
513:04 - start working on this because this needs
513:05 - some work obviously uh this is the worst
513:08 - visualization I have ever seen um so we
513:11 - need to work on this a little bit what
513:14 - we need to do is we need to change oh
513:16 - whoops we need to change some the way
513:19 - that these dates are are seen so right
513:22 - here is a these are two separate things
513:25 - so if I go right here and I Do by
513:26 - quarter it's just going to change the
513:27 - quarters here right that's that isn't
513:30 - really helpful we actually want to keep
513:32 - the year here what we want to do it is
513:34 - by year we want to separate it by year
513:37 - um but we want to separate it let's just
513:40 - do I don't know let's try weak and see
513:41 - what it looks like okay this is great
513:43 - this is this is what we're looking at
513:45 - again um if we went back and Chang this
513:47 - like quarter it uh changed it quarter
513:51 - and then change it to week it would show
513:54 - the
513:54 - quarters but it wouldn't
513:57 - show everything right this isn't all the
514:00 - data that we need and so you know you
514:02 - really need to make sure that you're
514:04 - doing this correct I by default it's
514:07 - almost always year but if you're looking
514:09 - at it via quarter so like let's say
514:11 - somebody comes in you say hey what
514:13 - quarters I Want to Break these out by
514:15 - quarters um and not year-over-year
514:18 - that's how you would do this but in the
514:20 - year we want to break it out by uh the
514:23 - week and you see this huge drop off um
514:28 - at the end well that is actually because
514:30 - the data doesn't go past that um there's
514:33 - just like one day of data or one one um
514:36 - week of data in here with actual um with
514:40 - January of 2017 data so it just drops
514:42 - off because this is an this is the sum
514:44 - so it only adds up to like um 591 th000
514:48 - compared to like the 2 million so we
514:50 - want to get rid of that um and how do we
514:53 - do that uh let's see I think it's
514:58 - filter how's it format no it's not
515:00 - format what am I thinking bear with me
515:04 - uh let's a filter well I was looking for
515:06 - it I just couldn't find
515:07 - it uh let's bring it back to the 31st
515:12 - let's see if that fixes what we need
515:14 - perfect uh that's all you had to do um
515:18 - and the reason that this is helpful and
515:21 - often times you'd have several years
515:23 - worth of data in here um and then you
515:26 - could have you could do even do
515:27 - something like this um like this one
515:29 - where it has multiple
515:31 - lines the reason that this is helpful is
515:34 - because if I'm telling my friend let's I
515:37 - mean just I'm going to say it's a friend
515:39 - or business partner whatever you
515:40 - whatever you want to use this use case
515:41 - for I'm GNA tell him hey the beginning
515:44 - of January all the way until like you
515:47 - know even February it's like really low
515:51 - it's half so there's not a lot of people
515:53 - traveling because everyone travels when
515:55 - at the end of the year so in November
515:58 - December for the holidays to visit
516:00 - family um and then in the summer for
516:02 - vacations I would tell him just based
516:04 - off this one thing I would say hey over
516:07 - the summer and then at the end of the
516:09 - year and during the holidays that's when
516:11 - I would be renting out your air BNB okay
516:14 - so just this one very simple
516:17 - visualization can help him understand
516:18 - the best times um to do that that may be
516:21 - an intuitive you may have already known
516:22 - that but you can prove it with the data
516:25 - which is always really helpful um and
516:28 - let's see is there anything else that we
516:29 - need to do with
516:31 - this uh I'm just going to label it and
516:34 - I'm going to say
516:37 - um
516:39 - revenue for
516:42 - year
516:44 - let's do bold do apply there we go do I
516:47 - label this last one I didn't let's label
516:51 - that last
516:51 - [Music]
516:53 - one and we'll
516:55 - do price per zip
517:00 - code price per zip code we'll just keep
517:02 - it at that keep it
517:04 - simple um and let's do that all right I
517:08 - believe we have two more so we have done
517:12 - um we've done three of them um we got
517:16 - the zip codes we've got the um you know
517:19 - the time of the year now something else
517:22 - that he was wanting to know is um you
517:25 - know just how things affect it and
517:26 - something that's going to affect the
517:27 - price of the actual Airbnb is going to
517:32 - be the amount of bedrooms so the the
517:34 - larger the house the more bedrooms the
517:35 - more it's going to cost typically so we
517:39 - can take a look at that let's pull in
517:42 - these bedrooms
517:44 - um and that will be our
517:48 - columns uh no it won't what we need to
517:50 - do um and so I I knew this was going to
517:53 - happen I just forgot it until right uh
517:55 - until right now what we this right now
517:57 - is actually a um it's a a value right so
518:02 - it's a number and that's totally um
518:04 - reasonable because if we go right here
518:07 - we do count distinct that's because
518:09 - there's only seven values right it goes
518:11 - there's zero bedrooms 1 2 3 4 5 5 six 7
518:13 - all the way up to seven bedrooms right
518:15 - now it has it as a numerical value we
518:17 - want to um change that to create it as
518:22 - um these measure names not a value so
518:25 - we're going to um we're going to remove
518:29 - this we're going to go right down here
518:31 - we're going click this drop down and
518:33 - we're going to say convert to
518:35 - Dimension and so now we're going to add
518:38 - it as a dimension so there that looks um
518:41 - much more normal I really quick I'm
518:43 - going to I'm going to keep these in here
518:45 - for a second but we're going to get rid
518:46 - of these nulls and zeros because if a
518:47 - home has zero bedrooms that's a
518:50 - problem um and so we want to look at the
518:53 - price again let's go down here in the
518:57 - listings it should be the price now this
518:59 - is the price for the location per day um
519:02 - if you want to look at monthly or or you
519:05 - know stuff like that they have that data
519:08 - um but we're just going to do the price
519:09 - the average price not the
519:11 - sum um although this is is helpful so
519:14 - just really quick before we change it
519:16 - this is going to show you which ones
519:18 - make the which ones are bringing in the
519:20 - most money it also may show you which
519:21 - ones are the most common um those are
519:23 - all different visualizations that we can
519:25 - do but the one that brings in the most
519:27 - money uh that brought in 63 or that has
519:30 - $63 Million worth of um worth of
519:35 - listings so they all add up those one
519:38 - bedrooms are doing phenomenal half of
519:41 - that are two bedrooms at 30 million
519:44 - three bedrooms at 18 million and so on
519:45 - and so forth so there's a ton of
519:48 - one-bedroom ones we may even keep we
519:51 - could even keep that in there um you
519:53 - know if we wanted
519:55 - to um and then we do something similar
519:58 - later but you can keep something like
520:00 - this in there what we will do really
520:02 - quick though is we're going to do the
520:03 - same thing that we've been doing is
520:04 - keeping
520:06 - average um and we are going to get rid
520:09 - of this cuz if it doesn't have the
520:11 - bedrooms you know that's not helpful to
520:13 - us and if it has zero bedrooms that's
520:16 - that's genuinely a problem I will not be
520:17 - renting an Airbnb with my family uh that
520:20 - has zero bedrooms in it so now we have
520:23 - this and would be really helpful to be
520:25 - able to see that in the visualization I
520:27 - mean it's just kind
520:28 - of hard to see it as is I
520:32 - mean it just does not hurt to add that
520:35 - right here do a label um why is it
520:39 - angled like that maybe I just need to
520:43 - move it out
520:45 - more that looks much better um that's
520:49 - the average price that cannot be right
520:52 - that's the sum that's why so let's go
520:54 - over here let's make that average as
520:56 - well much better because uh if the price
520:59 - was $3
521:01 - million for a three-bedroom I would not
521:04 - be going there so this is really really
521:08 - useful information for our friend right
521:11 - if um he wants start you know get into
521:14 - those one that one bedroom area you know
521:15 - you're not going to be making a lot of
521:16 - money it may be low cost UPF front but
521:19 - he's not going to be making a lot of
521:20 - money it significantly goes up when you
521:23 - reach these five and six bedroom homes
521:25 - which makes sense I mean if it has five
521:27 - or six bedrooms in it it's probably a
521:29 - really large really nice home and you
521:31 - can charge a lot more money and our
521:32 - friend is uh extremely wealthy he can
521:34 - buy whatever he wants and so he may be
521:36 - looking at these um larger on seeing
521:38 - that there's a much higher return um on
521:41 - his investment the higher and the more
521:43 - bedrooms he goes so we're going to keep
521:45 - it just as it
521:48 - is um and let me see is there's anything
521:51 - else that we want to do with this no
521:53 - we're going to keep it just like this uh
521:55 - and the last one is by far the easiest
521:56 - and we actually just discussed it a
521:58 - little bit we want to know you know
522:00 - what's his competition look like so um
522:03 - for those for the bedrooms specifically
522:06 - so let's go back up to the
522:09 - bedrooms we want that one to be right
522:13 - here in our rows so we show um these and
522:16 - then we just want to count of um how
522:20 - many listings there are so we can do
522:22 - that via the listings ID so here's our
522:25 - listings each ID represents one location
522:28 - or one home so we're going to do that
522:30 - right here uh that looks absolutely
522:35 - terrible that looks terrible what am I
522:38 - doing wrong here um let me see
522:43 - uh one thing we need to do is we want to
522:45 - get rid of these nulls and
522:46 - zeros do that really
522:49 - quick um and then we don't want to do
522:52 - just the ID because I I'm realizing now
522:56 - uh what I'm doing I need to convert this
523:00 - to a numeric so we can do a count on it
523:03 - so let's um oops let me see what what is
523:06 - happening this is terrible all right
523:08 - let's put this back let's make let me
523:11 - see if I can just um
523:13 - do an
523:15 - attribute let's
523:18 - do the
523:20 - [Music]
523:21 - count and let's
523:24 - do
523:27 - text um no it needs to be a distinct
523:30 - count because that's that's basically
523:33 - like
523:34 - um a count of the numbers themselves not
523:39 - each individual ID okay it took figuring
523:43 - out I'm going to keep that in there
523:44 - because you guys need to see uh a lot of
523:47 - you guys like seeing when I make
523:48 - mistakes so you know makes it feel like
523:50 - when you make mistakes it's okay um and
523:51 - I'm all about that so I'm leaving that
523:53 - in there you guys can see me fail a
523:55 - little bit um I just forgot how to do
523:57 - that for a second and this is exactly
523:59 - what we're looking for right we want we
524:01 - now it showed us in that visualization
524:03 - that we were looking at earlier before
524:05 - we um switched it to the average price
524:08 - this is showing us that there are for
524:10 - one bedrooms there's 1,800 one bedroom
524:13 - two that 483 3 that have 206 four that
524:17 - have 55 only five that have 20 and six
524:19 - that have five so the more you go up the
524:21 - less and less it is or the less and less
524:23 - competition there's going to be now is
524:25 - there a lot of demand for four-bedroom
524:27 - five-bedroom six-bedroom uh that's for
524:29 - our friend to figure out um well maybe
524:31 - we'll help them out with that later um
524:34 - in the with the data you know we could
524:35 - look at the reviews that we had um
524:38 - there's so much data in here and we
524:39 - could absolutely figure that out but for
524:42 - what it's worth giving him this initial
524:44 - stuff and he'll have follow-up questions
524:45 - for us later that's how it always works
524:47 - I promise um so now we're good with this
524:50 - one let's label this one did I label the
524:52 - last one I will go back and look um
524:57 - distinct I I'm going to butcher this one
524:59 - I'm going do a distinct count
525:02 - of of bedroom listings I don't that may
525:07 - not make sense at all but we're keeping
525:09 - it so we're going to do bedroom apply
525:11 - okay let me see if I added the label on
525:14 - this one I didn't let me do that real
525:19 - quick we do
525:22 - average price per
525:25 - bedroom again I'm
525:29 - oops you didn't see that I'm just going
525:32 - with whatever is coming to my head this
525:34 - probably wouldn't be what I would keep
525:35 - if I this or like an actual project but
525:37 - it works for now so we have our five
525:41 - visualizations 1 2 three four and five
525:44 - and let's create our dashboard that's
525:46 - going to be this button right here so
525:48 - we're going to click that we are going
525:51 - to uh go right here and we're going to
525:53 - say automatic because we want to use
525:55 - this entire area and so now we're just
525:58 - going to start um you know pulling them
526:01 - over and I'm just going to start from
526:03 - the very first one and go to the very
526:05 - last one keep it really simple so this
526:08 - very first one we'll pull it over it you
526:11 - know it's going to take up the entire
526:13 - space until you start adding all the
526:14 - other ones we'll include this one right
526:17 - here um and well let's leave it as it is
526:20 - you know we'll adjust it once it gets to
526:22 - its final place now we have number three
526:26 - We'll add this one on this side it looks
526:29 - terrible right now but give it a second
526:31 - uh then we have number four we're going
526:33 - to add that across the top okay it's
526:36 - already starting to look a little
526:38 - better and um maybe I I you don't have
526:43 - to keep this in here
526:45 - um but you definitely
526:47 - can uh let's start to adjust things a
526:50 - little
526:52 - bit
526:54 - oops okay
526:56 - let's see if I can zoom in one more NOP
527:00 - I'm going to do it just like that
527:02 - actually let me
527:04 - [Music]
527:07 - see if I can make it even just a little
527:10 - bit closer perfect uh that's the the
527:12 - best you're going to get um if you
527:13 - didn't see I use this um magnifying and
527:16 - then I could click on the area that I
527:17 - wanted to see so we're going to keep
527:19 - that just like
527:21 - that we're going to move this over
527:23 - because that is um definitely not as
527:26 - important um and then we're going to
527:28 - move this way over as well so keep it
527:32 - just like that again this is something
527:33 - where if you want to you can click on
527:35 - this um it didn't I don't know why uh I
527:38 - can't remember how to get those
527:39 - connected but it's you definitely can um
527:42 - but okay I was just clicking on the
527:44 - wrong one that's
527:46 - why that is why but you can click over
527:49 - here and you you know it'll filter um
527:51 - based on so if I go to this one oops
527:54 - [Music]
527:56 - dang oh jeez what am I doing oh this is
527:59 - a
528:00 - travesty okay let's try to get this
528:03 - back all right I'm not touching it guys
528:05 - you get the gist you can mess around
528:06 - with it yourself I'm not messing this up
528:08 - okay so the next thing we need to add is
528:10 - the very last one that's going to go
528:12 - right up here and then we're just going
528:14 - to kind of move it off to the
528:18 - side
528:21 - and let's
528:24 - see going
528:28 - add yeah have this caption um if you've
528:32 - never seen something like this
528:33 - before um and I actually want to make
528:36 - this bigger as
528:38 - well oh jeez give me a second it's it's
528:41 - kind of lagging a little
528:43 - [Music]
528:47 - bit and make this a little bit tall
528:52 - maybe I don't want it as wide but I
528:53 - definitely want a little
528:55 - [Music]
528:58 - taller give it a second yeah let me
529:01 - scooch this
529:02 - [Music]
529:04 - back just like that that's fine uh we
529:09 - can keep it like that in my original one
529:11 - I didn't have this um um you can get rid
529:13 - of this if you want you know you can um
529:17 - you know just exit out right here if you
529:18 - want to do that but there you have it uh
529:22 - this is the entire thing so we started
529:25 - from the very start um we started with
529:27 - this one then this one uh did some um
529:30 - and this is you know all the zip all of
529:33 - our ZIP code work then we took a look at
529:36 - the calendar where we looked at the
529:37 - price and did some time series
529:39 - visualization and then we're looking at
529:41 - the bedrooms and and the count of
529:43 - bedrooms and so this should be really
529:45 - helpful for a friend it should be an
529:46 - initial dashboard to get him going and
529:49 - once he sees us he's going to have a
529:50 - million other questions and he's going
529:51 - to want another dashboard for different
529:53 - data that's in there he's going to ask
529:55 - about okay well what if I want to do it
529:57 - weekly or you know I want to rent it out
529:59 - for the month or you know how many um
530:02 - reviews are people five star reviews are
530:04 - people giving on you know W bedroom two
530:06 - bedroom three bedroom these are all
530:08 - things that you know he may ask and then
530:11 - we'd have to build out in the real world
530:13 - this is what happens all the time you
530:15 - know they make a request and then
530:16 - they're like oh this is great but I also
530:18 - want this so um you know your friend is
530:22 - is going to be right in line with just
530:23 - about everyone else um that has ever
530:25 - gotten a dashboard uh for work or for
530:29 - personal use with that being said this
530:31 - is it um we have done the entire thing
530:33 - now if you want to share this it is
530:36 - super super easy to share um and I'm
530:38 - going to try to remember how to share it
530:40 - uh so we're going to do save to tap
530:42 - public
530:43 - As and we're going to do this and we're
530:46 - going to make it um let's do Air BnB is
530:50 - it like is it a capital B is it like
530:52 - that no that doesn't look right
530:55 - Airbnb uh we'll do full project and
530:58 - we'll
531:00 - save and that is being created right now
531:03 - um and I will save this so if you guys
531:05 - want to go look at this you can um and
531:08 - I'll provide a link in the description
531:10 - as well for that and see if yours looks
531:13 - um similar to mine or better than
531:15 - mine give it a second CU it's
531:21 - thinking all right so here it is so
531:24 - here's our final our final project um
531:26 - and if you followed step by step then
531:28 - you should get this exact or very very
531:31 - similar to this one again I encourage
531:33 - you to if you want to have the upto-date
531:36 - data to go to that um Link in the
531:39 - description that has um the the most
531:42 - recent data and they update that I
531:43 - believe monthly so you can go there get
531:45 - the most recent data and then you can do
531:47 - stuff and you can create a beautiful
531:49 - project just like this um but with the
531:51 - you know the most recent data again I
531:52 - use the kaggle data just so you guys can
531:54 - remember and I encourage you to look at
531:56 - the different data points that are in
531:58 - the Excel there is so much in there and
532:00 - you can use uh honestly like there's
532:03 - probably 30 or 40 other fields that you
532:05 - could be using in there that we never
532:06 - even touched um but for this project
532:09 - we're keeping it pretty simple and so so
532:12 - go do that make completely unique
532:14 - dashboards and and visualizations and
532:16 - create projects and add it to your
532:18 - portfolios so that you can create uh a
532:21 - fantastic portfolio website and get a
532:24 - job and that's what this is all about um
532:25 - it's about upskilling and and getting
532:28 - these skills that you can you know get a
532:30 - job or or do better in your job so I
532:32 - hope this has been helpful I really
532:34 - appreciate you guys joining me and and
532:36 - doing this entire project with me I have
532:38 - no idea how long this is this probably
532:40 - this could be like an hour for all I
532:41 - know um so thank you so much for
532:43 - sticking with me this entire time if you
532:45 - like this video be sure to like And
532:47 - subscribe below and I will see you in
532:48 - the next
532:51 - [Music]
533:01 - video what's going on everybody welcome
533:03 - back to another video today we're going
533:05 - to be starting our powerbi tutorial
533:10 - series
533:13 - now I am super excited to start this
533:15 - series with you guys we are going to be
533:16 - breaking this up in about six or seven
533:18 - videos I don't really like those super
533:20 - long videos where it's like four hours
533:22 - long I like breaking mine up into chunks
533:25 - so that's what we're going to do this is
533:26 - the beginner series and so we're going
533:27 - to start with the very Basics and we're
533:29 - just going to work our way up and I'm
533:30 - going to walk you through every single
533:31 - step of the way it'll be very easy to
533:33 - follow everything will be provided for
533:35 - you so that all you have to do is really
533:37 - follow along and by the end of it you
533:39 - should know powerbi a lot better you
533:40 - should have a lot more com using it now
533:42 - before we actually jump onto my screen I
533:44 - want to give a huge shout out to the
533:45 - sponsor of this video and that is udemy
533:48 - you guys know that I absolutely love
533:49 - udemy I've been using them for years and
533:51 - that is no exception when it comes to
533:52 - powerbi I have taken some of the best
533:54 - powerbi courses ever on udemy so I
533:58 - highly recommend you checking out the
533:59 - ones that I have in the description
534:00 - these are ones that I actually took and
534:02 - I loved the most so if you're looking
534:04 - for a full powerbi course I highly
534:06 - recommend checking out you to me thank
534:07 - you so much again to our sponsor and now
534:09 - without further Ado let's jump onto my
534:11 - screen and get started with a tutorial
534:12 - all right so the first thing I'm going
534:13 - to do is download powerbi desktop I will
534:16 - leave this link in the description so
534:17 - you can just click on it go to it and
534:19 - download it we're going to click this
534:20 - download free button and once we click
534:23 - it you can go to the Microsoft store and
534:26 - I already have it downloaded so when you
534:28 - see it uh it'll already say downloaded
534:30 - but um for you you can go in here you
534:33 - can click download and it will download
534:35 - it for you I'm on Microsoft uh but it
534:37 - may look a little bit different for you
534:39 - if you're on a different system but once
534:40 - that is done we are going to open up
534:43 - powerbi so let's go right down here to
534:45 - our search let's go to
534:49 - powerbi and it is going to open up for
534:52 - us all right so right away this is what
534:54 - it's going to look like when you open it
534:56 - and we're going to go right over here to
534:58 - get data and let's click on that it's
535:01 - going to open up this window and it's
535:03 - going to give us a lot of different
535:05 - options for where we can get data from
535:07 - now some of these are free and some you
535:09 - need to upgrade from but you just taking
535:11 - a quick glance through here you have a
535:13 - ton of options there's databases there's
535:17 - um you know blob storages there's post
535:19 - create SQL or different SQL databases um
535:22 - there's Google analytics there's a lot
535:24 - of places and you can go through the
535:26 - process to connect to that data and you
535:28 - can pull that data in from those data
535:29 - sources now for what we are doing we're
535:31 - just going to be using an Excel I'm
535:34 - going to leave the Excel that I'm going
535:35 - to be using in the description you can
535:37 - go and download it and walk through this
535:39 - with me so what we're going to do is
535:40 - click on Excel workbook and we're going
535:42 - to click connect so we're going to go
535:44 - right here in our powerbi tutorials
535:46 - folder and we're going to click on
535:48 - apocalypse food prep so let's click on
535:50 - that and it is going to connect and pull
535:53 - that data in now right here we have our
535:55 - Navigator and so if you had a lot of
535:58 - different sheets you can click on that
535:59 - and choose which ones to pull in I just
536:02 - clicked on it right over here and we're
536:04 - able to preview the data but I can't
536:06 - load or transform it yet I need to
536:08 - select which sheets I'm bringing in so
536:11 - we only have ones that's the only one
536:12 - we're going to bring in so you can go
536:14 - ahead and load the data or you can click
536:16 - on transform data it's going to take us
536:17 - to powerbi power query which is going to
536:20 - allow us to transform our data so I'm
536:23 - going to have an entire video on how to
536:25 - transform the data but I'm going to give
536:26 - you a really quick glance at it to kind
536:28 - of show you what it is so right up here
536:31 - it says our power query editor this is a
536:34 - the window to basically transform your
536:36 - data and get it ready for your
536:37 - visualizations now you can do this in
536:39 - Excel if you want to and do that before
536:41 - forand or you can do it here and there
536:43 - are lots of things that we can do in
536:45 - here as you can see at the top again
536:47 - I'll have an entire video dedicated to
536:50 - just power query but let's take a quick
536:51 - look at the data and see if there's
536:53 - anything we want to transform quickly
536:54 - before we actually go and start building
536:56 - our
536:58 - visualizations so over here we have the
537:00 - store where we purchased it we have the
537:02 - product that we purchased the price that
537:04 - we paid and the date that we bought it
537:06 - now the first thing that jumps out to me
537:08 - is that this just says date on it um we
537:11 - might want to say date
537:14 - uncore purchased and we're going to hit
537:17 - enter and if you noticed right over here
537:19 - on these applied steps it says renamed
537:21 - columns everything that you do every
537:24 - single step that you apply to transform
537:26 - this data is going to be right over here
537:29 - and if I want to if I go back and I say
537:31 - you know I really didn't want to rename
537:32 - that column I can just click X and it is
537:35 - going to get rid of that and take it
537:37 - back to its original state so again I'm
537:40 - just going to say purchase
537:42 - and we're going to enter that now this
537:45 - is our apocalypse food prep so this is
537:48 - food that we are buying for the
537:49 - apocalypse um for this example and if we
537:52 - look at our products we have bottled
537:54 - water canned vegetables dried beans milk
537:56 - and rice and all of that stuff makes
537:58 - sense except for the milk U milk will
538:00 - not stay or last long in the apocalypse
538:03 - so I think what we're going to do is
538:04 - we're going to filter that out really
538:05 - quickly and we're GNA click okay and
538:09 - right over here again says filtered rows
538:11 - and so now if we scroll down there's no
538:13 - milk so what we are going to do is we
538:16 - are going to go over here to close and
538:19 - apply and it is going to actually load
538:22 - the data into powerbi
538:25 - desktop so on this left- hand side it
538:27 - immediately takes us to the report Tab
538:30 - and what we want to do is go right here
538:32 - to the data
538:33 - Tab and take a look at our data so again
538:36 - there's our date purchased and as you
538:39 - can see the milk is not in there another
538:43 - tab that we're going to take a look at
538:44 - um and again in this report tab this is
538:46 - where we actually build our
538:48 - visualizations the data is where we can
538:50 - see the data and and change it up a
538:52 - little bit and change some small things
538:53 - about it like sorting The Columns or
538:55 - even creating a new column and over here
538:58 - we have this other Tab and is called
538:59 - model and this is especially useful when
539:01 - you have multiple tables or multiple
539:03 - excels and you need to join them to kind
539:05 - of connect them together we don't have
539:08 - that but in a future video I'm going to
539:10 - walk through how to use this entire
539:11 - higher tab so now let's go back to the
539:13 - data Tab and I want to just look at the
539:15 - data really quickly before we go over to
539:17 - the report Tab and we start building our
539:19 - first visualization as you can see I've
539:21 - been buying these different products in
539:23 - different months so this rice I've been
539:25 - purchasing in January February March and
539:27 - April and I've been buying it from three
539:29 - different locations because I wanted to
539:31 - see if I was spending less money at one
539:32 - location on all of the products so then
539:35 - I would just shop there in the future
539:36 - and save a lot of money or if there were
539:38 - specific products that were really cheap
539:40 - at one location but others they were
539:42 - cheaper at a different location so I
539:44 - should just buy like the dried beans at
539:46 - Costco but everything else I should be
539:48 - buying at Walmart and so that's what
539:49 - we're going to look at in just a little
539:50 - bit so let's go over to the report tab
539:53 - right up here at the top there's this
539:55 - data section so you can kind of choose
539:56 - if you want to add any more data now
539:58 - that we are here we can also write
540:01 - queries or transform the data like we
540:02 - were looking at in the power query
540:04 - editor window over here in the insert we
540:06 - can add a new visualization or a text
540:08 - box and then in the calculation section
540:11 - we we can create a new measure or a
540:13 - quick measure and then over here we have
540:14 - share where you can actually publish
540:16 - your report or your dashboard online now
540:18 - over on the visualization section on
540:20 - this far right this is a very important
540:22 - area this is where a lot of the actual
540:25 - creating of the dashboards happen so
540:27 - let's take a look really quick and we'll
540:29 - get into a lot of these things as we're
540:31 - actually building our dashboard so we're
540:32 - not just sitting here looking and
540:34 - talking we're going to be actually
540:35 - building and doing all right so we're
540:37 - going to click right here on this drop
540:38 - down on sheet one it's going to show us
540:40 - all of our columns now two of the things
540:43 - that we wanted to look at were where are
540:45 - we spending the least amount of money
540:47 - buying the exact same product that'll
540:48 - help us determine where we want to shop
540:50 - and the second thing was should I be
540:52 - buying all my products at the same place
540:54 - or are there certain products that
540:56 - they're going to be cheaper at a
540:57 - specific store and I should buy it there
540:59 - so let's start out with the first one
541:01 - which we're just going to see uh with
541:03 - the store and the
541:05 - price uh where we're spending the least
541:08 - amount of money and just at a quick
541:10 - glance we can see we're spending the
541:11 - least amount of money at Costco at $210
541:13 - versus Target 219 and Walmart at 225 and
541:18 - that really answers our question but we
541:19 - want to visualize it better be able to
541:21 - see it in an easier way so we're going
541:23 - to go right over here and we can click
541:25 - on a lot of these but the one that
541:27 - probably makes the most sense is the
541:29 - stocked column
541:30 - chart and it's going to show Walmart
541:33 - Target and Costco now they're all the
541:34 - same color let's add a legend so we're
541:37 - just going to drag store over here down
541:39 - to this Legend and let's make this
541:42 - larger while we're working on it so now
541:45 - we can see we're spending the most
541:46 - amount of money at Walmart right in
541:48 - between at Target and then at Costco is
541:50 - the lowest and so right there we know
541:52 - that Costco is the place to go for our
541:54 - apocalypse food prep but is it going to
541:57 - be that way for every product I don't
542:01 - know let's take a look let's put this up
542:03 - in this corner and let's start a new one
542:06 - we're going to need to select the
542:07 - product for sure and the price and
542:11 - probably Additionally the store as well
542:14 - and let's click
542:16 - on let's not do this one we need a
542:18 - clustered column chart that's what we
542:20 - need let's bring this over here let's
542:23 - expand this quite a bit and so really at
542:26 - a glance this is giving us everything
542:28 - that we need we can see each product
542:31 - right here and we can see how much we're
542:33 - paying per store and so for Rice we're
542:36 - paying it looks like a lot more for our
542:40 - rice at Walmart while at Target is
542:42 - actually where we are paying the least
542:44 - now if we look at all of these it looks
542:46 - like for Costco the only one that we're
542:48 - really paying a lot more on is on our
542:50 - rice but for our dried beans our bottled
542:54 - water we're paying quite a bit less and
542:57 - really it's pretty negligible for these
542:59 - canned vegetables we're paying maybe
543:00 - what 60 cents 50 60 cents more per can
543:04 - so that's pretty negligible but for the
543:06 - big ticket items um we're really
543:08 - spending a lot less at Costco if we
543:10 - wanted to SP to save just a little bit
543:12 - more money we could go to Target for our
543:14 - rice now if I want to make this more
543:16 - like a dashboard and we're only keeping
543:18 - these two things I'm going to kind of
543:20 - size them kind of like this whoops going
543:24 - to show you that in a little bit I'm
543:25 - going to size them a little bit like
543:28 - this so now that we have that looking
543:30 - good we want to change the title of both
543:32 - of these so what we're going to do is go
543:34 - over here in our visualizations and
543:36 - format your visual uh and we are going
543:39 - to go to this General go to Ty TI and
543:41 - now we can name it anything we really
543:44 - want for this we're going to say best
543:48 - store for
543:51 - product and while we're in here one
543:53 - other thing that I wanted to do is I
543:54 - want to go to this visual go right down
543:57 - here to these data labels now we haven't
543:59 - added any data labels so I'm going to
544:02 - click on and you'll see exactly what it
544:04 - does uh it just puts the labels and the
544:06 - numbers above it so you don't have to
544:07 - actually like hover over it and see what
544:09 - it is now it is actually rounding these
544:11 - numbers so what we're going to do is go
544:13 - down here we're going to go down to
544:16 - values and we'll go down to display
544:19 - units and it's on auto so it's Auto
544:21 - rounding those numbers and we're just
544:22 - going to say none so we can see the
544:24 - actual value of these
544:27 - numbers and we can do the exact same
544:29 - thing over here it probably is a good
544:32 - thing to do um and it just is going to
544:35 - visualize it a little bit differently in
544:36 - here but you can always change that if
544:38 - you want to go over here to
544:41 - title and we're going to say total by
544:46 - store and now we're going to take a look
544:50 - and so in a matter of minutes we were
544:52 - able to take our data from an Excel put
544:54 - it into powerbi transform it a little
544:57 - bit then we're able to create these
544:59 - visualizations that gave us concrete
545:01 - answers to some very important topics we
545:04 - now know that Costco is the place to go
545:06 - for basically every single product
545:08 - except if we're buying rice and if we
545:10 - want to save just a few dollars we're
545:12 - going to head over to Target and that's
545:14 - genuinely going to change my shopping
545:15 - habits for the next several years until
545:17 - the apocalypse happens so in future
545:19 - videos we're going to dive into a lot of
545:20 - the things that we looked at today but
545:22 - just in more detail and then at the very
545:24 - end of the series we're going to have an
545:25 - entire project where we really use every
545:27 - single part of powerbi and create a
545:30 - beautiful dashboard and so that's all we
545:31 - have for our very first video in our
545:33 - powerbi series I hope it was helpful if
545:35 - you like this video be sure to like And
545:37 - subscribe below and I'll see you in the
545:38 - next
545:39 - video
545:42 - [Music]
545:51 - what's going on everybody today we're
545:52 - continuing our powerbi tutorial series
545:54 - and in this video we're going to be
545:55 - looking at Power
545:57 - [Music]
546:01 - query Now power query is really great
546:04 - because it allows you to actually
546:05 - transform the data before you actually
546:07 - get it into powerbi so if you want to
546:09 - make any changes like adding or deleting
546:11 - a column or changing the data type or a
546:13 - ton of other things you can do all of
546:15 - that in power query now without further
546:17 - Ado let's jump on my screen and get
546:19 - started with the tutorial all right so
546:20 - before we jump over to powerbi and start
546:22 - using power query I wanted to take a
546:24 - look at the data and this is the Excel
546:26 - from our last video called apocalypse
546:28 - food prep and in that video we went
546:30 - through and we bought some rice some
546:32 - beans water vegetables and milk all for
546:34 - the apocalypse getting prepared for that
546:37 - now we decided to buy some additional
546:39 - things like rope some flashlights duct
546:42 - tape and a water filter several water
546:45 - filters and after we purchased those uh
546:48 - our boss or whoever we're working with
546:50 - or somebody decided to go and make a
546:52 - pivot table now in this pivot table they
546:54 - kind of broke it out by Costco Target
546:56 - and Walmart and had all the items had
546:59 - some subtotals as well as some Grand
547:01 - totals right here and then they decided
547:04 - to kind of copy and paste that into this
547:07 - and you'll see this a lot when you're
547:09 - working with uh people who use Excel
547:11 - they like to kind of make things like
547:12 - this maybe make it into like a table or
547:15 - or format a little bit differently but
547:16 - you'll see stuff like this a lot so this
547:19 - is what we're going to actually pull
547:20 - into Power query and work with now we're
547:23 - going to imagine that this is all we
547:25 - have this is the only thing we were
547:26 - working with and I'll kind of reference
547:28 - this pivot table a little bit but we're
547:30 - going to pretend this is all we have and
547:32 - we want to transform it to make it a lot
547:34 - more usable to where we can make
547:35 - visualizations with it so let's hop over
547:37 - to powerbi and pull this excel in so
547:39 - what we're going to do is click import
547:41 - data from Excel we're going to click
547:43 - apocalypse food prep and click open and
547:45 - then it's going to bring up this window
547:46 - right here now this is where we can
547:48 - choose what data to bring in so we can
547:50 - take a preview and just click on it real
547:53 - quick and this is the pivot table that
547:54 - we were looking at so it does have that
547:56 - pivot table so we are able to pull in
547:58 - just a pivot table and then we have the
548:01 - purchase overview where it's kind of
548:02 - that formatted um thing that we're just
548:05 - looking at with all the colors we're
548:07 - going to pull both of those in so we're
548:08 - going to pull in the pivot table and the
548:10 - purchase overview now we could just load
548:12 - it or we could transform it and we're
548:15 - going to click transform and that's
548:16 - going to bring us to power query so
548:17 - let's click on transform data so now
548:19 - really quick before we actually jump
548:20 - into working through this and
548:22 - transforming it I want to show you what
548:24 - the power query editor looks like so if
548:27 - we go right over here we have our
548:28 - queries and these are the tables that we
548:30 - actually pulled in and we can click on
548:31 - those and kind of go back and forth
548:33 - between them now up top we have our
548:35 - ribbon and the ribbon offers a lot of
548:37 - functionality we have things like remove
548:40 - columns keep rows remove rows split
548:43 - columns these are all things that we're
548:45 - likely to use when using this power
548:46 - query editor there's also another tab
548:49 - called transform where there's a lot of
548:51 - functionality here as well things like
548:53 - unpivoting a column or transposing
548:55 - columns and rows and using a first row
548:58 - as a header some of the things that
549:00 - we'll be looking at today there's also
549:02 - another tab called add a column and this
549:04 - one's pretty self-explanatory where you
549:05 - can add additional columns like deleting
549:07 - a column creating an index column or a
549:10 - conditional column those are the three
549:12 - main ones there's also view tools and
549:14 - help but we're not going to really be
549:15 - looking at those today and then on the
549:18 - far right side we have our query
549:19 - settings you can do things like change
549:22 - the name so we call it pivot table
549:25 - 2022 and it'll update right over here on
549:28 - our query side and we have our applied
549:31 - steps now our applied steps are
549:33 - extremely important and very very useful
549:35 - anytime we make any change to transform
549:37 - this data it's going to be documented
549:39 - right here and then we can go back and
549:41 - look at it or we could even delete that
549:43 - change in the future if we want to and
549:46 - go back to a previous version of what we
549:48 - just did so when we loaded the data into
549:50 - powerbi it did a few things for us it
549:52 - shows the source the navigation and it
549:54 - promoted the headers and then it also
549:55 - changed the data type so if we want to
549:58 - check we can actually see those things
550:00 - or change those things like this Source
550:02 - right here we can click on this little
550:03 - icon and it's going to bring up the
550:05 - actual path where we got this file so if
550:08 - we wanted to change that or or it
550:09 - changes in the future future we can come
550:11 - here and we can change this file path
550:13 - but we're not going to do that right now
550:14 - so let's click on cancel and let's go
550:17 - back down to change type so it promoted
550:19 - these headers and obviously these
550:21 - headers are not correct we're looking at
550:22 - this pivot table and not the purchase
550:24 - overview but it changed these column
550:27 - headers and so in the future if we
550:28 - wanted to we could easily change those
550:30 - but it did that for us and it changed
550:32 - the type as well so if you look right
550:35 - here it says
550:36 - abc123 all the way over here it's where
550:38 - it just says ABC ABC means it's only
550:41 - going to be text where abc123 means it
550:44 - could be basically anything uh text or
550:46 - it could be numeric so now let's go over
550:49 - to purchase overview and this is the one
550:51 - that we're actually going to be working
550:52 - on the most but we might be looking at
550:54 - pivot table just a little bit to kind of
550:55 - reference it and see some of the
550:57 - differences so before we do anything
550:58 - let's just take a look at how powerbi
551:01 - decided to take this data in so it chose
551:03 - this apocalypse food prep overview as
551:06 - kind of the First Column and that was
551:07 - kind of our header or the title of what
551:09 - we were looking at before and then all
551:11 - these other columns are basically column
551:12 - 1 2 3 four fivs so that's something that
551:15 - we're going to want to change in just a
551:16 - little bit there's also all these blank
551:19 - uh columns right here at the top and
551:21 - kind of these null values as we go along
551:24 - and we'll take a look at those and we
551:25 - kind of we going to want to get rid of
551:27 - some of this and just clean this up to
551:29 - make it more usable for our powerbi
551:31 - visualizations this may be perfectly
551:33 - fine and acceptable in an Excel but when
551:35 - you're pulling it into powerbi the real
551:37 - reason you're pulling it in is to create
551:39 - visualizations not just it to look good
551:41 - in an Excel so we're going to need to
551:43 - clean this up quite a bit so let's go
551:45 - right up top the first thing that I want
551:47 - to do is I want to get rid of these top
551:49 - rows so we're going to go to this top
551:51 - ribbon and we're going to click remove
551:53 - rows and we're going to select remove
551:55 - top rows and we're going to select two
551:58 - because we have one two rows of all
552:00 - nulls and those are completely useless
552:02 - we just want to get rid of them right
552:03 - away so let's cck Okay and it removed
552:07 - those the next thing that we want to do
552:09 - is these this location product and all
552:12 - these dates these are actually the
552:14 - column headers that we wanted so what we
552:17 - need to do now is we want to go over to
552:20 - transform and we want to say use first
552:22 - row as
552:24 - headers and just like that we have
552:27 - location products and these dates as our
552:29 - headers exactly how we wanted them now
552:32 - let's say for whatever reason you know
552:33 - we made a mistake and we needed to go
552:35 - back we would just select remove top
552:38 - rows and that would be perfectly fine
552:40 - now you can see over here it promoted
552:42 - the headers but it's also changed the
552:44 - data type so before if we went to before
552:47 - we removed the headers these were all
552:50 - abc123 abc123 because it had a lot of
552:53 - different data types in there so it just
552:54 - kind of made a generic data type but
552:57 - when we promoted these headers the first
552:59 - thing that it decided to do was also
553:01 - change this data type for us giving us
553:03 - its best guess as to what this data type
553:06 - is and it decided to do this decimal so
553:09 - this one two is a decimal but we're
553:11 - actually going to change that and all
553:12 - you have to do is click on This 1.2 uh
553:15 - or or the data type that it has right
553:17 - here for you and we're going to click on
553:19 - fixed decimal number and let's do
553:21 - replace
553:22 - current and now it's just a little bit
553:25 - better so now it's 2.70 2.5 and that's
553:28 - normally how we would read uh values
553:31 - like this because this is money so we
553:33 - would normally read it to the second
553:34 - decimal just like that and if we have it
553:36 - on the second decimal for some we should
553:38 - probably have it on the second decimal
553:39 - for all all of them so really quickly
553:41 - I'm going to go through and I'm just
553:43 - going to change that and it should be
553:45 - pretty quick so hang with me for just a
553:48 - second all right that is perfect now for
553:51 - the purposes of what we're about to do
553:54 - we don't actually need these subtotals
553:56 - or this Costco total Target total and
553:58 - Walmart total as well as the grand total
554:00 - really we want to get rid of those and
554:02 - so what we're going to do is we're going
554:04 - to go right over here we're going to
554:05 - click on this drop down and we're going
554:06 - to try to filter this data before we
554:08 - actually load it into power VI so we're
554:11 - going to filter and we're going to say
554:13 - remove empty and let's remove those and
554:17 - it's going to take out all of those
554:18 - nulls if we wanted to try to filter this
554:20 - out by saying something like Costco
554:22 - total or Target total we could do that
554:25 - by going right here clicking this drop
554:27 - town on products going to text filters
554:29 - and saying does not contain and let's do
554:33 - insert and we're going to say does not
554:35 - contain and we want to say total and
554:39 - let's click okay okay and again it
554:41 - filtered out all of those things so
554:43 - there's a few different options that you
554:44 - can do if you want to filter out rows
554:46 - that contain either null values or
554:48 - specific values now the next thing that
554:50 - we're going to do is actually get rid of
554:52 - a column this grand total column and so
554:54 - what we're going to do is we're going to
554:56 - click on the very top part where it says
554:58 - grand total we're going to go back over
555:00 - here to home and we're going to click on
555:02 - remove columns and it says insert that's
555:04 - because we're on this filtered rows one
555:06 - right here um but what we're going to do
555:08 - is just insert that and it'll insert
555:10 - right there that's totally fine we can
555:11 - just move it to the bottom now we got
555:13 - rid of this column entirely now this
555:16 - looks really good visually I like how
555:19 - this looks I like how everything is set
555:20 - up the biggest thing about this is that
555:23 - when you're actually wanting to use this
555:25 - for visualizations these columns as
555:27 - dates doesn't really work too well and
555:30 - so what we're going to want to do is
555:32 - we're going to want to transpose this or
555:35 - pivot this to where these dates are
555:37 - actually rows so what we're going to do
555:39 - is select the first date which is
555:40 - January 1st all the way through April
555:43 - 1st and we're going to hit shift and
555:44 - click on that April 1st right there to
555:46 - select all of them at the same time and
555:48 - then we're going to go over here to the
555:50 - transform Tab and we're going to click
555:52 - unpivot columns and let's see what this
555:55 - does and so now what we've done is we've
555:57 - basically recreated our original Excel
556:00 - that we had so let's go back and take a
556:01 - look really quickly at that so this
556:03 - looks almost identical to what we have
556:05 - in powerbi right now and this is
556:07 - extremely usable and very good for
556:09 - visualization
556:10 - and is much much better than this but
556:12 - again we were pretending that this is
556:14 - what we were given at the beginning so
556:16 - you have to imagine you know somebody
556:18 - just handing you this and you need to
556:19 - make it much more usable for
556:21 - visualizations in the future which
556:23 - happens a lot and we actually wanted to
556:25 - create this we just weren't given this
556:27 - now a few last things that we might want
556:29 - to do is we want to clean this up just a
556:31 - little bit we're going to select the
556:32 - data type and change this to date and
556:35 - then we're going to select the value and
556:37 - I double clicked on the value and I
556:39 - actually want to call this cost uh or
556:42 - product cost
556:45 - productor
556:46 - cost and then for the location I
556:49 - actually want this to be called
556:51 - store so now this looks really good but
556:54 - I want to show you one thing really
556:56 - quickly on this pivot table 2022 so
556:58 - let's go back here this looks very
557:01 - similar to how we had it when it first
557:03 - started one thing I wanted to show you
557:06 - uh really quickly and I want to click on
557:08 - this first one we're going to make make
557:10 - this our column header and then we're
557:12 - going to try to Pivot or unpivot this
557:14 - January February March April so really
557:16 - quickly let's do that so we're going to
557:18 - transform use first row as
557:21 - headers so now we have this January
557:24 - February March April now if you notice
557:26 - these are not dates these are actually
557:29 - texts it says January February March and
557:32 - April so if we go to do this and we
557:36 - click
557:37 - unpivot and here's the columns that are
557:39 - cre cre when we unpivot it it is January
557:43 - February March and April these are not
557:45 - dates so we cannot go and change this to
557:47 - a date because that would error out
557:50 - because it's actually text so it's
557:51 - something that you want to look out for
557:53 - it's something that you need to be aware
557:54 - of and you can change that in the pivot
557:56 - table so you want to be aware of how it
557:58 - actually sits and looks in the Excel or
558:00 - whatever data source you're pulling from
558:02 - before you actually pull it into Power
558:04 - query to transform and now the very last
558:07 - thing that we need to do to finalize all
558:09 - of this is go over here to close and
558:11 - apply and once we click that everything
558:13 - that we've worked on is going to be
558:14 - applied to the actual data and it's
558:16 - going to load into powerbi to create our
558:18 - visualizations so let's go ahead and
558:19 - click on that and so now the data has
558:21 - been pulled into powerbi let's go right
558:23 - down here to data and we can see the
558:25 - data right here if we need to transform
558:27 - this data again we can bring it back
558:29 - into the power query editor window by
558:31 - just clicking the transform data button
558:34 - and it's going to bring us right back so
558:35 - I hope that this was helpful thank you
558:37 - so much for watching if you like this
558:39 - video like And subscribe below and check
558:41 - out all my other videos and everything
558:43 - data analyst related I'll see you in the
558:45 - next
558:46 - [Music]
558:56 - video what's going on everybody welcome
558:59 - back to the powerbi tutorial Series
559:01 - today we're going to be taking a look at
559:02 - building
559:07 - [Music]
559:08 - relationships now when you import
559:10 - multiple tables from either the same
559:12 - data source or multiple data sources you
559:14 - want to tie them together so that when
559:16 - you're creating your visualizations
559:17 - everything is connected so in this
559:19 - tutorial we'll be walking through how to
559:21 - create those relationships to make sure
559:22 - that all of your tables are connected
559:24 - properly and without further Ado let's
559:26 - jump onto my screen and get started with
559:27 - the tutorial all right so before we jump
559:29 - over to powerbi and start creating our
559:30 - relationships and our model I want to
559:32 - take a look at the data in Excel we
559:34 - realized we were buying so many products
559:36 - for the apocalypse that we decided to
559:38 - start our own store and we have several
559:40 - customers and some client information
559:42 - down here and so I wanted to take a look
559:44 - at some of the columns and these tables
559:45 - that we're going to be looking at first
559:48 - thing we have is the apocalypse store
559:50 - these are the things that we are selling
559:51 - I know it's a very limited inventory but
559:55 - these are the really high sellers these
559:56 - are the ones that I wanted to sell so we
559:58 - have this product ID our product name
560:01 - price and production cost then we have
560:04 - this apocalypse sales this is how many
560:06 - sales we've actually made to our
560:08 - customers so we have this customer ID
560:11 - our customer name product ID order ID
560:14 - unit sold and the date it was purchased
560:17 - and then we have our customer
560:18 - information right here here are all of
560:20 - our clients so we have this customer ID
560:23 - customer address city state and zip code
560:26 - so now that we've taken a look at our
560:28 - data let's go and load it into powerbi
560:30 - so we're going to say import data from
560:31 - Excel we're going to choose this model
560:33 - right here we're going to click open and
560:36 - we are going to want all three of these
560:37 - so I'm going to click on all of them and
560:39 - we're just going to load it we're not
560:40 - going to transform the data at
560:43 - all so now the data has been loaded
560:46 - let's go right over here on the left
560:48 - hand side to our model Tab and let's
560:50 - scoot this over just a little bit and
560:53 - move back and we're going to move these
560:56 - tables up to where it's a little bit
560:58 - easier to
560:59 - see so right off the bat you can already
561:02 - see that there are these lines between
561:04 - these tables so there are already
561:06 - relationships that powerbi has
561:08 - automatically detected and created from
561:10 - my experience powerbi actually does a
561:12 - really good job at creating these
561:14 - relationships automatically but we're
561:16 - going to go in and take a look at these
561:17 - and kind of see what everything means
561:19 - and then we're going to go back and
561:20 - create these relationships from scratch
561:22 - just to make sure that we know how to do
561:24 - every single part so to get it started
561:26 - let's double click on this line
561:27 - connecting the customer information
561:29 - table to the apocalypse sales
561:31 - table and it's going to bring up this
561:33 - edit relationship page right here so
561:36 - this line right here connecting these
561:37 - two tables actually gives us quite a bit
561:39 - of information without actually having
561:41 - to click into this edit relationship
561:42 - page what this is showing is that we
561:45 - have a one to many relationship and
561:47 - there's only one or a single crossfilter
561:50 - direction and you can find both of those
561:52 - things right down here and I'm going to
561:54 - walk through what those mean in just a
561:55 - little bit on this page you can also see
561:57 - the columns that powerbi decided to
561:59 - choose in order to tie these two tables
562:01 - together now for our example they
562:04 - decided to use the customer and customer
562:06 - right here from the customer information
562:08 - table as well as the apocal sales but I
562:11 - don't really want to use those
562:13 - specifically because on this apocalypse
562:15 - sales table I might remove this customer
562:17 - information and just keep the customer
562:19 - ID it may have chosen these customer
562:21 - columns because they have the exact same
562:23 - name and really the same information but
562:26 - I want to use this customer ID anyways
562:28 - so what I'm going to do is I'm going to
562:29 - click on that column and click on this
562:31 - column and then I'm going to click okay
562:33 - and if we go back into it by double
562:35 - clicking again we're going to see that
562:37 - and now save that and if we did what we
562:39 - just did before which is kind of hover
562:41 - over it it's going to show us what those
562:42 - two tables are joined on so opening this
562:45 - back up let's go down here to this
562:46 - cardinality and cross filter Direction
562:48 - cardinality has several different
562:50 - options that you can choose from you
562:51 - have one to many one to one one to many
562:54 - and many to many now for this example
562:57 - we're looking at apocalypse sales and
562:58 - we're going apocalypse sales down to
563:01 - customer information now there are a lot
563:03 - of rows in the apocalypse sales but
563:05 - there's very few in this customer
563:07 - information and there's only one
563:09 - customer per row whereas in the
563:11 - apocalypse sales up here the customer
563:13 - can have several rows for several
563:15 - different orders so that's why the
563:17 - cardinality is many to one now if we
563:20 - flip this and we say we want the
563:21 - customer information here and we want
563:24 - the apocalypse sales down here we tie
563:26 - that together now it's going to flip and
563:28 - it's going to say one to many now let's
563:30 - look at the cross filter Direction and
563:32 - there's only two options here it's
563:33 - either single or both and if we choose
563:35 - both and we click okay this now goes
563:38 - from a single arrow pointing in one
563:40 - direction to two arrows pointing in both
563:42 - directions but what does this really
563:44 - mean so in order to demonstrate this I'm
563:46 - going to put this back to a single
563:48 - Direction and what we're going to try to
563:49 - do is connect the data over here or the
563:51 - columns over here to the columns in this
563:54 - apocalypse store so let's go over here
563:56 - to build a visualization and what we're
563:58 - going to do is we're going to take this
564:00 - customer information and let's just say
564:02 - we want to look at state so I'm going to
564:04 - click on state right here and I'm just
564:06 - going to make this into a table and the
564:08 - customer information table is only tied
564:11 - right now to the sales table so we're
564:13 - actually going to go over to the
564:14 - apocalypse store and we want to see how
564:17 - many product IDs are being bought in
564:20 - these different states so really quickly
564:22 - we're going to come up here and create a
564:23 - new measure and all we're going to say
564:26 - is this measure is the count of
564:28 - Apocalypse store product ID and we're
564:32 - going to create that and now we're going
564:34 - to select it so it's added to that table
564:36 - so now what this is showing is that
564:37 - there are 10 product s which there are
564:40 - 10 products for each of these states but
564:43 - that's not actually technically correct
564:45 - because not every state purchased these
564:48 - 10 different items if we go back to our
564:51 - model and we change both of these
564:54 - to a both
564:56 - Direction and then we're going to go
564:58 - back and see what changed in our
565:00 - numbers so now let's go back to our
565:03 - visualization and now we can see that
565:05 - Minnesota actually only ordered seven
565:07 - different product IDs Miss Miss 8 New
565:09 - York 99 and Texas 10 this is actually
565:12 - much more accurate than before when you
565:15 - use the both option it takes these
565:17 - tables and treats them as if they are a
565:19 - single table but the single option is
565:21 - not going to do that and so for our
565:23 - example if we're trying to connect this
565:24 - table to this table and one of the last
565:26 - things that I want to show you is this
565:28 - option right down here which says make
565:30 - this relationship active now if we don't
565:33 - click list and there are other options
565:34 - in here that connect these things like
565:36 - the customer to the customer then that
565:38 - may be the active relationship but if I
565:40 - select this is the active relationship
565:42 - that means this is going to become the
565:43 - default relationship between these two
565:45 - tables so now let's come out of here
565:47 - we're going to click cancel we're going
565:49 - to zoom in just a little bit and bring
565:52 - these tables a little bit closer so we
565:54 - can zoom in just a little bit more now
565:57 - we are going to go ahead and delete
565:59 - these so we're going to say delete yes
566:02 - and delete yes so just for demonstration
566:06 - purposes we're going to build these
566:07 - relationships from scratch so we're
566:09 - going to come over to the customer
566:10 - information table and we're going to
566:12 - drag it all the way over here and put it
566:14 - on top of this cust ID or the customer
566:16 - ID in Apocalypse
566:18 - sales and it's going to automatically
566:20 - create that relationship and we can open
566:23 - this up and as you can see it created
566:25 - the relationship between this customer
566:26 - ID in the apocalypse sales and the
566:28 - customer ID in the customer information
566:30 - it also defaulted the cardinality from
566:32 - many to one and the cross filter
566:34 - direction to single so we're going to go
566:36 - ahead and change that to both and click
566:38 - okay
566:39 - and then we're going to come over here
566:40 - to the product ID in Apocalypse store
566:42 - and drag this over the product ID in the
566:44 - apocalypse
566:45 - sales and again if we open it up it
566:48 - created that relationship for us it
566:50 - created the cardinality automatically
566:52 - and we're going to change this cross
566:53 - filter direction to both and click okay
566:56 - and so on a really small scale that is
566:58 - how it works of course it becomes a
567:00 - little bit more complex the more tables
567:03 - that you add and the more relationships
567:04 - that are created but this is how you're
567:06 - going to actually create the
567:07 - relationships in the model tab within
567:10 - powerbi I hope that this tutorial has
567:11 - helped you understand this concept a
567:13 - little bit better thank you guys so much
567:15 - for watching I really appreciate it if
567:17 - you like this video be sure to like And
567:19 - subscribe below and I'll see you in the
567:20 - next
567:22 - [Music]
567:32 - video what's going on everybody welcome
567:34 - back to the powerbi tutorial Series
567:36 - today we're going to be taking a look at
567:38 - Dax
567:42 - [Music]
567:44 - now DAC stands for data analysis
567:46 - expressions and it's basically a library
567:48 - of functions and operators that help you
567:50 - build formulas you can use Dax to create
567:53 - measures and calculated columns within
567:55 - powerbi which can really give you a lot
567:57 - of insight into your data honestly it is
567:59 - not super complicated and hopefully by
568:01 - the end of this video you'll have a lot
568:03 - more confidence actually using Dax and
568:05 - powerp so without further Ado let's jump
568:07 - onto my screen and get started with the
568:08 - tutorial all right so let's take a look
568:10 - at our tables and data before we get
568:11 - started so we have two tables the
568:13 - apocalypse sales the apocalypse store
568:16 - for this apocalypse sales table we have
568:18 - the customer product ID order ID unit
568:20 - sold and the date it was purchased and
568:23 - then for the apocalypse store we have
568:25 - product ID product name price and
568:28 - production cost now these are joined
568:31 - together or they do have a relationship
568:33 - together via the product ID so what
568:36 - we're going to be using are these new
568:37 - measures and new columns to create our
568:40 - Dax functions so really quickly let's go
568:43 - over to this report Tab and let's drop
568:45 - down our Fields over here so we can see
568:48 - everything and so to get us started
568:49 - we're going to go right up here to
568:50 - apocalypse sales we're going to
568:52 - rightclick and click new measure and
568:55 - it's going to open up this right here
568:56 - which is basically our bar where we can
568:58 - create our functions and so right here
569:01 - it's automatically given us the name
569:02 - measure but we can change that and we're
569:04 - going to say count of sales so now we
569:08 - can start writing our Dax function
569:10 - that's just going to be the name of it
569:12 - and what's going to show up right over
569:13 - here once we click enter so let's go
569:16 - over here and we're going to say count
569:19 - and as we're typing it's automatically
569:21 - giving us options it has something
569:23 - called intellisense if you've ever used
569:24 - other Microsoft products intellisense is
569:26 - their kind of autoc completion that
569:28 - helps you look at other options very
569:30 - quickly and so we're just going to click
569:32 - on this count and it's prompting us to
569:35 - put in a column name and so we can come
569:37 - down here and we can select one or we
569:39 - can type it out and it'll try to predict
569:41 - and help us choose which column to
569:43 - select so for us we're going to use this
569:45 - order ID but let's just start typing it
569:47 - out we'll say order ID and then we can
569:50 - click on it and we're going to close
569:53 - this parenthesis and click enter or you
569:55 - can go over here and click this check
569:56 - mark but we're just going to click
569:58 - enter and so over on this right side it
570:01 - finalized that and save that and we can
570:03 - actually look at that by clicking on
570:04 - this box next to
570:06 - it and we want to look at the this in a
570:09 - table so now we can see that there are
570:11 - 74 sales now for this we want to see
570:14 - who's buying our products we want to see
570:17 - what our what our client name is so
570:19 - we're going to go over here we're going
570:20 - to choose customer and we're going to
570:23 - put customer on top of sales and we're
570:26 - just going to take a look at it like
570:28 - this so now we can see that our number
570:30 - one customer is Uncle Joe's Prep shop he
570:32 - has 22 orders now they have the most
570:34 - orders with us but it doesn't
570:36 - necessarily mean that they're spending
570:37 - the most money with us but we can take a
570:39 - look at that later the next thing that I
570:41 - want to take a look at is how many
570:43 - products we're actually selling what are
570:44 - our big products that we're selling we
570:46 - have 10 different items but I don't know
570:49 - exactly which one is selling the best if
570:52 - if one is doing really poorly and
570:53 - getting no orders this is something that
570:55 - I want to look into so all we're going
570:57 - to do is go right back up here to
570:58 - apocalypse sales again right click and
571:01 - select new measure and for this one
571:03 - we're going to call it the sum of
571:06 - products sold
571:09 - and all we're going to start out with is
571:11 - by doing sum and if this seems familiar
571:15 - to something like Excel you're 100%
571:17 - correct it is very similar and remember
571:20 - these are both Microsoft products so
571:22 - there's going to be similar
571:23 - functionality in both of them and so
571:26 - this Dax is going to have a lot of
571:28 - similarities to exactly how it has it in
571:30 - Excel so we're going to do an open
571:32 - bracket and now what we're going to
571:34 - choose is this units sold we want to sum
571:37 - up all of these units sold and see how
571:39 - many we actually selling so we're going
571:41 - to say units sold I'm going to hit tab
571:45 - it's going to autocomplete that I'm
571:46 - going to close my parenthesis and I'm
571:48 - going to come over here and click this
571:50 - checkbox so now it's created that
571:52 - measure and we're already selected in
571:54 - this table so all we have to do is click
571:56 - the check mark and it's going to show us
571:58 - that we have 3,000 total products sold
572:02 - and we can go through here and see what
572:03 - the big sellers are and probably the
572:05 - biggest one that I see right off the bat
572:07 - is this multi- Tool Survival Knife so
572:09 - these Dax functions that you can write
572:11 - can be very simple and lead to really
572:13 - good insights that you can use for the
572:15 - visualizations later on now I want to
572:17 - take a look at the difference between
572:18 - something like sum which is an
572:20 - aggregator function and something like
572:22 - sum X which is an iterator function
572:25 - because if you add X to some of these
572:26 - aggregator functions you can create them
572:29 - or or make them into an iterator
572:31 - function so you can have some and some X
572:33 - or average and average X adding X onto
572:36 - the end of them can make them to an
572:38 - iterator function so let's take a look
572:40 - and see how that actually works I'm
572:42 - going to show you the difference and
572:43 - then I'm going to talk through the
572:44 - difference at the end so really quickly
572:46 - let's go back to our data and let's go
572:49 - to the apocalypse store now what we have
572:52 - right here is we have the price and we
572:53 - have the production cost and we want to
572:55 - see how much profit we're getting from
572:57 - each of these as well as we can take a
572:58 - look at the unit sold and see how much
573:01 - money we are actually making so what
573:03 - we're going to do is we're going to come
573:04 - back over here we're going to go to
573:06 - apocalypse store we're going to right
573:09 - click and create a measure and in just a
573:11 - little bit we're going to be creating a
573:12 - new column and that'll kind of show the
573:14 - difference really well so we're going to
573:16 - create this new measure and we're going
573:17 - to name it
573:19 - profit and we're going to come over here
573:22 - and what we're going to do is we're
573:23 - going to take the sum oops we're going
573:25 - to start with our sums we're going to
573:27 - take the sum of the
573:29 - price and then we're going to close that
573:31 - parenthesis and we're going to subtract
573:33 - the sum of the production cost so all
573:38 - that does is it says if something cost
573:39 - $20 if we sold it for $20 and it only
573:42 - costs us $10 that's $10 in profit for
573:45 - that item and then what we're going to
573:46 - want to do is we're going to actually
573:48 - want to encapsulate that really quickly
573:50 - because we're about to use multiply and
573:54 - then we're going to sum and now we're
573:56 - going to take the units sold so how many
573:59 - units were actually sold at that profit
574:01 - that we just made so let's see if that
574:03 - works and let's click the check right
574:05 - here and so we have the profit so let's
574:08 - click on the profit oops that's not what
574:10 - I wanted to do let's use a new one or
574:12 - let's create a new uh table we're going
574:15 - to click
574:16 - profit let's make it a table and I'm
574:18 - going to pull this right over
574:20 - here now we have our profit but I really
574:23 - want to know is which customer is
574:25 - spending the most money at my store so
574:28 - we're going to come right over here
574:29 - we're going to click on customer and I'm
574:31 - put customer at the top and just at a
574:33 - glance we can see that Uncle Joe's Prep
574:35 - shop is spending the most money at the
574:37 - store now now what I want to show you is
574:39 - the difference between sum and sum X so
574:41 - what I'm going to do so I'm going to go
574:44 - back to this profit and going to copy
574:47 - this this entire thing and we're going
574:50 - to go back here to this table now we
574:53 - just created a measure and we were able
574:55 - to break it down by each customer so
574:58 - let's go back over here now let's go up
575:01 - here to home and we're going to create a
575:04 - new column and we're going to call this
575:07 - profit
575:08 - profit underscore column and we're going
575:12 - to literally paste the exact same thing
575:15 - into here and we're going to hit
575:18 - enter and each row is the exact same
575:23 - thing so what it's doing is it is going
575:25 - through the price and it's adding all of
575:27 - it up and calculating it at the bottom
575:30 - it's adding the production cost it's
575:31 - going all the way down and calculating
575:33 - it at the bottom and then it's going
575:35 - over and looking at how many units it
575:37 - sold and then it's performing this
575:39 - calculation up here and then it gives us
575:41 - the total and it's doing it for every
575:43 - single row but that's not really what we
575:46 - wanted to show what we wanted to show is
575:48 - the profit for each row what we wanted
575:51 - to say is here's the price for the Rope
575:53 - the production cost for the rope and
575:55 - then how many units we actually sold and
575:57 - then it'll calculate that and give us
576:00 - the actual profit for just that row but
576:03 - we cannot do it by just using this sum
576:06 - what we need to do is use something
576:07 - called Su X so let's add another column
576:11 - let's go back to home say new
576:14 - column and now we're going to
576:17 - say profit underscore oops underscore
576:22 - column underscore sum
576:26 - X and now we're going to use sum X and
576:31 - hit Tab and we need to choose the table
576:33 - that we want to put this in so we're
576:35 - going to say apocalypse sales because
576:37 - that's the table that we're looking at
576:38 - right here we're going to say comma and
576:40 - now we need to input an expression which
576:42 - it says it Returns the sum of an
576:44 - expression evaluated for each row in a
576:46 - table before when you're just using sum
576:48 - it's looking at all of these combined
576:50 - now it's taking it row by row so what
576:53 - we're going to do is basically input the
576:54 - same thing as we did before I'm going to
576:56 - copy I'm going to paste that it's not
576:58 - going to be correct I need to get rid of
576:59 - these
577:00 - sums but it's basically the exact same
577:03 - equation give me just a second and let's
577:07 - get rid of this
577:08 - some and let's see if this works so
577:11 - let's click the check
577:14 - button and now this looks a lot better
577:18 - so what this is now showing us is at a
577:20 - row level this nylon rope made us 51,000
577:22 - almost
577:23 - $52,000 the waterproof matches made us
577:27 - $115,000 and we can go down and look at
577:30 - each item and see how much that actually
577:33 - made us versus this profit column and so
577:37 - that is the biggest difference between
577:38 - sum and sum X hopefully that made sense
577:41 - I know that sum and sum X and and the
577:43 - difference between an aggregator
577:44 - function and iterator function can be a
577:46 - little bit confusing especially if
577:47 - you've never done it before but
577:49 - hopefully that was a good example for
577:50 - you to understand that concept now let's
577:52 - go back over here to apocalypse sales
577:55 - right here we have a date purchase now
577:58 - in the Dax function we have some ways
578:00 - that we can interact with dates and so I
578:02 - want to take a look at those really
578:03 - quickly so we're going to go right up
578:05 - here and click on new column and we're
578:08 - just going to leave that as column but
578:10 - what we're going to say is day so
578:13 - there's a few different ones we have Day
578:15 - dates YTD next day previous day and
578:19 - weekday and they all are pretty
578:22 - self-explanatory if you click on it
578:24 - let's click on weekday it says it's
578:26 - going to return a number from 1 to 7
578:28 - identifying the day of the week of a
578:30 - date so let's use this really quickly
578:33 - and so we're going to say date
578:36 - purchased and and click tab hit
578:40 - comma and it's going to give us a three
578:43 - different options basically it's a one a
578:44 - two and a three um right here if you hit
578:47 - this button read more you can read more
578:49 - on it this is going to say Sunday is
578:51 - equal to one Saturday is equal to seven
578:53 - I like this one personally which is
578:54 - Monday equals one in my brain it just
578:56 - makes more sense so I'm going to click
578:58 - on two I'm going to close that
579:00 - parentheses and we're going to I guess
579:03 - I'll say uh let's say day of week for
579:07 - the column
579:08 - let's click that
579:10 - checkbox and now Saturdays are equal to
579:13 - sixes Mondays are equal to one this
579:16 - allows us to see which day of the week
579:18 - people are buying the most products on
579:21 - or or which day of the week is somebody
579:23 - submitting their orders on and so let's
579:25 - go over to our report let's get rid of
579:28 - this we just going to move this oh jeez
579:32 - I hate moving stuff sometimes all right
579:35 - really quickly I want to show you the
579:37 - difference between what we just did and
579:38 - what we already have so we have this um
579:41 - date purchased and let's make that into
579:46 - a bar
579:47 - graph and what we're going to be taking
579:49 - a look at is actually the units sold so
579:52 - right here we have this and obviously
579:55 - for we don't want 2022 we're going to
579:57 - get rid of the year we only have one
579:59 - quarter right here we can see January
580:02 - February March so we can tell that
580:04 - January has the most sales or the most
580:06 - units sold in that month if we get rid
580:08 - of that we go down to day we do have
580:11 - some information but we don't know what
580:13 - day of the week it is it could change
580:15 - from month to month and it's really hard
580:18 - to tell exactly what if there's any
580:19 - pattern there at all that's where what
580:22 - we just created comes in handy so let's
580:24 - recreate this exact same thing but
580:26 - instead we're going to use day of week
580:28 - so we're going to select day of week and
580:30 - unit sold let's drag that down and move
580:34 - this over right here and this day of the
580:37 - week should be on the
580:39 - xaxis and it's really easy now to see if
580:42 - there's a pattern here there's really
580:44 - not at least not for this fake data that
580:46 - we have um but just I I want these uh
580:50 - data labels on really
580:51 - quickly um it's not easy to see if
580:54 - there's any pattern again Monday has the
580:56 - most so maybe that that I mean it goes
580:59 - down a little bit and then it picks back
581:00 - up so maybe middle the week is our least
581:03 - uh sales day our Wednesdays and
581:05 - Thursdays are a little bit lower than
581:06 - the rest and the beginning and the end
581:08 - of the week tend to be the highest again
581:10 - not a huge pattern but you know it's
581:12 - much easier to see if there is a pattern
581:14 - from week to week or what day of the
581:16 - week now that we use this weekday
581:18 - function and so this can be really
581:20 - really useful let's go back here to our
581:23 - data now we're going to look at our last
581:25 - Dax function for this video let's go up
581:27 - here and create a new column and we're
581:30 - going to be looking at something called
581:31 - the if statement now if you've ever used
581:33 - Excel I'm sure you have heard of this
581:35 - and you can do the exact same thing here
581:38 - in powerbi and so we're going to name
581:40 - this one order size order undor size and
581:44 - so all we're going to say is if we're
581:47 - going to click on this one right here we
581:49 - need to perform our logical test and
581:51 - then we want to say if it's true what's
581:53 - our value and if it's false what is our
581:55 - value so what we're going to be looking
581:57 - at is units sold so we're looking at
582:00 - order size so we're going to say if unit
582:03 - sold is greater than
582:06 - 25 what's going to happen if it is true
582:09 - if the order is larger than 25 you want
582:11 - to say it's a big order and if it's not
582:15 - we want to say it's a small
582:18 - order super simple we'll close that
582:20 - parenthesis we'll click okay and now
582:24 - really quickly we're able to see if this
582:25 - is a big order or a small order and so
582:28 - that is all I have for you today there
582:30 - are a lot of other dox functions but the
582:32 - ones that we looked at today are ones
582:34 - that are very common ones that you'll
582:36 - see the most and there can be a lot of
582:38 - really complex and intricate Dax
582:40 - functions that you can create and in our
582:43 - project at the end of this series I will
582:45 - be sure to include some more complex Dax
582:47 - functions but hopefully this gave you a
582:49 - good introduction into Dax so you know
582:51 - how to use it a little bit better thank
582:53 - you guys so much for watching I really
582:55 - appreciate it if you like this video be
582:57 - sure to like And subscribe and check out
582:59 - all of my other videos on everything
583:01 - data analyst related I will see you in
583:03 - the next
583:06 - video
583:07 - [Music]
583:16 - what's going on everybody welcome back
583:18 - to the powerbi tutorial Series today
583:20 - we're going to be looking at how to
583:21 - drill down in
583:25 - [Music]
583:28 - visualizations so when I say drill down
583:30 - I mean you're basically adding another
583:32 - layer beneath the top layer of the
583:34 - visualization and when somebody clicks
583:36 - or drills down in that data they can see
583:38 - more insights and more information on
583:40 - the top level of data when you drill
583:42 - down you can also drill up and I will
583:44 - show you how to do that in this tutorial
583:46 - so without further Ado let's jump on my
583:48 - screen and get started with the tutorial
583:49 - all right so before we get started I
583:50 - wanted to remind you that you can find
583:52 - the data that we're going to be working
583:53 - with in this tutorial in the description
583:55 - you can go and download it from my
583:56 - GitHub now the two tables I'm going to
583:58 - be looking at are apocalypse sales and
584:01 - purchase tracker and if you've ever
584:02 - created any visualizations you've
584:05 - probably seen something like this where
584:06 - you'll have the store and the price and
584:09 - this is the the things that we actually
584:10 - bought so this is the total amount of
584:13 - Apocalypse prepping uh equipment that we
584:15 - bought and we'll put the store in this
584:17 - Legend right here and you've probably
584:19 - seen something like this and if you're
584:21 - anything like me you're going to be in a
584:22 - meeting and you're going to be
584:23 - presenting this and some higher up is
584:24 - going to be like hey Alex that looks
584:26 - great but I want to you know see what
584:28 - things we actually bought in Target and
584:29 - how much this cost can you create a
584:31 - visualization for that and you're going
584:33 - to be like well I could or I could use
584:36 - drill down so you could have done this
584:37 - in the first place uh which you should
584:39 - have so what we're going to do is all
584:41 - we're going to do is we're going to say
584:43 - we're going to say the product right
584:44 - here and these are going to be the
584:45 - actual things and we're going to put it
584:47 - right under store now you can't see
584:50 - these things right but there is a a
584:52 - hierarchy here so once we added this
584:55 - these options became available let's
584:57 - take it out and all those just
584:59 - disappeared and then if we add it back
585:03 - right here they came back and so you can
585:06 - do right here which is is click to turn
585:08 - on drill down you can go to the next
585:10 - level in the hierarchy or you can even
585:12 - expand all down one level in the
585:14 - hierarchy so let's look at each of those
585:15 - really quickly so let's click on this
585:17 - one it's just going to turn on drill
585:19 - down mode so now if I go and I click on
585:21 - target it's going to drill down into
585:24 - these and if we want to I can then put
585:26 - product under this
585:28 - Legend and we can see all of those
585:30 - things but of course if we go back up
585:33 - it's going to be all broken up into this
585:34 - clustered column chart which is more
585:36 - like
585:37 - um this which isn't exactly what we were
585:40 - going for but it works now uh let me get
585:43 - rid of this I actually want store in the
585:45 - legend now if we turn that off and we
585:48 - click it doesn't do that anymore so what
585:50 - it does now is it just highlights
585:52 - Walmart it highlights Costco it
585:54 - highlights Target so we're going to keep
585:56 - that on uh but we can also do something
585:59 - called going down in the next level of
586:00 - hierarchy so let's click on that and so
586:03 - now this is going to go down to the next
586:05 - level down to this product level because
586:07 - that is the next level and now it's
586:09 - going to show us each of those things
586:10 - but it's going to have it broken out by
586:12 - the store and so it's a completely
586:15 - different visualization but all within
586:17 - the same Realm of the data that we're
586:19 - looking at and what we actually care
586:20 - about so let's go back up in the
586:22 - hierarchy and then let's use this one
586:24 - right here which is expand all down one
586:26 - level in the hierarchy and so this one
586:27 - is again extremely similar except it
586:30 - just visualizes it differently and now
586:32 - what it's doing is Walmart rice Target
586:35 - dried beans Costco rice so instead of
586:37 - having an all uh like this one where
586:40 - it's stacked on top of each other it's
586:41 - breaking it down individually so this
586:44 - one column would become three separate
586:46 - columns now I'm going to minimize this
586:48 - right here uh I'm actually going to go
586:50 - back up in the hierarchy just for visual
586:52 - purposes now I'm going to show you one
586:54 - more example we're going to use this
586:56 - apocalypse sales up here and this is one
586:58 - that I actually use all the time so the
587:01 - one you've seen you know you'll get
587:03 - stuff like that especially if you're
587:04 - working with like sales and stuff but I
587:06 - work in operations right so I have a lot
587:09 - of order IDs product IDs stuff like that
587:13 - now this one this one genuinely I use
587:16 - quite often I'll have a customer U let's
587:18 - make it we'll just go like this we have
587:21 - a customer and we have unit sold and
587:24 - let's use the customer as the legend so
587:27 - let's make this one quite a bit
587:31 - larger and I'll have something like this
587:34 - and they'll say okay well we want to see
587:36 - the order ID s that go with it because
587:38 - we want to know what orders are actually
587:40 - happening for each of these people
587:42 - obviously I'm not using this exact data
587:44 - but very very very similar and all you
587:47 - have to do is take these order IDs and
587:49 - slide it right under here under customer
587:52 - and this visualization right here is
587:54 - something I've done a thousand times
587:56 - because what happens is is someone some
587:58 - stakeholder in our company is saying hey
588:00 - Alex we want this and we want to know we
588:03 - want to drill down on this IP address we
588:05 - want to drill down on this certain
588:07 - database we want to drill down on
588:09 - something and we want to see the order
588:10 - IDs within them so then all you do is
588:13 - you turn on drill mode or drill down
588:15 - mode you'll click on it and you can see
588:17 - every single order ID that's in there
588:19 - and then they can go and look those up
588:20 - in their system and resolve them or
588:23 - whatever they're trying to do with it
588:24 - and it helps a ton and it's very very
588:26 - useful this one is extremely applicable
588:29 - and that's really all drill down is
588:30 - again you have these different
588:31 - hierarchies as well um but for different
588:34 - things it's not as useful as you can see
588:37 - we also have this hierarchy which again
588:39 - is not as useful so it just depends on
588:41 - the data that you're using and how you
588:43 - want to use this drill down effect but I
588:45 - promise you that drill down is used all
588:48 - the time especially when you're giving
588:50 - presentations where people want to know
588:51 - more information than just the the
588:54 - visualization that you're presenting so
588:55 - I hope that this has been helpful I hope
588:57 - that you understand drill down a little
588:58 - bit better if you like this video be
589:00 - sure to like And subscribe and check out
589:02 - all my other videos on powerbi thank you
589:04 - and I'll see you in the next video
589:07 - [Music]
589:18 - what's going on everybody welcome back
589:19 - to the powerbi tutorial Series today
589:21 - we're going to be taking a look at
589:22 - conditional
589:26 - [Music]
589:28 - formatting now conditional formatting
589:30 - may sound familiar because we looked at
589:32 - it in the Excel series and it's very
589:34 - similar how you use it in Excel versus
589:36 - how you use it in powerbi conditional
589:38 - formatting allows you to take a table or
589:39 - a matrix within powerbi and use those
589:42 - cells to color code them and create
589:44 - gradients and different visualizations
589:46 - within the actual table or Matrix I'm
589:48 - excited to start this one so let's jump
589:50 - over my screen and get started with the
589:51 - tutorial all right so before we get
589:52 - started if you want to use the data that
589:54 - we're using in this video you can find
589:55 - it in the description on my GitHub now
589:57 - conditional formatting is super simple
589:59 - and you've most likely used it in Excel
590:01 - before but you can also use it in
590:03 - powerbi and let me show you how to do
590:05 - that so the first thing we're going to
590:06 - do is come over over to our apocalypse
590:08 - store and we're going to pull up our
590:10 - product name as well as the price and
590:14 - what we can do is come over here and
590:17 - we're going to go to price and it has to
590:18 - be under the columns so you can't come
590:20 - over here and do this we're going to
590:23 - come right over here to price and we're
590:24 - going to right click and let's go to
590:26 - conditional formatting and we have
590:28 - background color font color icons and
590:30 - web URL let's take a look at background
590:32 - color first this is most likely the one
590:34 - that we'll look at the most so we're
590:36 - going to get this pop up and I'm going
590:37 - to slide this over now there's a lot of
590:40 - different things we can customize in
590:41 - here and the first thing I want to take
590:43 - a look at is format style we have the
590:45 - gradient and what it's going to say is
590:47 - the lowest value will be this color
590:48 - highest value will be this color it'll
590:50 - give us this gradient color scale and so
590:53 - we'll use that in just a little bit but
590:55 - we can also create rules kind of like an
590:57 - if statement and if it is between this
590:59 - range and this range we give it a color
591:02 - and if it's between a different range
591:03 - and a different range we'll give it a
591:04 - different color so we'll also try that
591:06 - one and then we have this field value uh
591:09 - and this one is one that uh honestly I
591:11 - don't use that much I've used it maybe
591:13 - once and what you can do is select a
591:15 - text field like customer and you can do
591:18 - some summarizations on the first and
591:20 - last and that is it so what we're going
591:22 - to do is we're going to look at gradient
591:24 - specifically for not the customer but
591:27 - we're going to go back to the apocalypse
591:29 - store and we're going to do it on the
591:32 - price now what I'm going to do is keep
591:34 - it as the count because this is what the
591:36 - default is and we're going to go back
591:37 - and fix it later but what we want our
591:39 - lowest value to be is this bright green
591:42 - showing that this it's a cheap product
591:44 - it's easy to purchase the high value
591:47 - ones are going to be just the shade of
591:49 - red more expensive and we'll do it on
591:51 - the count now remember the count is on
591:53 - each of these and we're not doing a
591:55 - count of how many are sold we're doing a
591:56 - count of each product so it's just one
591:58 - per row so it all should be the same
592:01 - color let's take a look so it is all the
592:03 - same color but what we really want to
592:05 - show is the actual price not just the
592:08 - count of the price so let's go back to
592:10 - conditional formatting we're going to
592:11 - click the background color again and
592:14 - this time we're going to change the
592:16 - summarization now you can do sum you can
592:19 - do average minimum maximum it really
592:21 - doesn't matter for this example the
592:23 - number is the same regardless of really
592:25 - which one we choose so we can just
592:26 - choose the minimum and it's going to
592:28 - choose the minimum of each row which is
592:31 - the price so we're just going to select
592:32 - minimum for this example we'll select
592:34 - okay and it should correct it
592:36 - accordingly which means the bright green
592:38 - is the lowest and it goes all the way up
592:39 - to the highest which is the red now
592:42 - let's go over here to apocalypse sales
592:44 - we'll add in the units
592:46 - sold and let's move that out a little
592:50 - bit and I'm doing that on purpose
592:52 - because we're about to look at something
592:54 - within the conditional formatting so
592:55 - let's go to unit sold and we'll look at
592:58 - the conditional formatting for this one
593:00 - now if you noticed we now have a new one
593:03 - on here called data bars now we're able
593:05 - to see data bar bars on unit sold and
593:08 - not price because unit sold is something
593:10 - like a sum an average something that's
593:12 - aggregated but let's take a look at
593:14 - datab bars because I want to show you
593:15 - how to use this and then we'll go back
593:17 - to the background color so for data bars
593:20 - we are going to taking a look at the
593:22 - lowest to the highest value again we're
593:24 - going to go from bright green all the
593:28 - way
593:29 - to this exact red it's going to be from
593:32 - left to right and what it's going to
593:34 - show you is if it is a positive number
593:35 - which all of these are is going to be a
593:38 - green bar basically representing the
593:40 - number that you see in here along this
593:42 - line so let's click
593:44 - okay and we're going to be able to see
593:47 - the highest numbers and let's scooch
593:48 - this over quite a bit so you can kind of
593:50 - get a better understanding and we're
593:52 - going to do it from highest to lowest so
593:55 - we sold the most multi-tool survival
593:58 - knives at 477 and so this entire bar
594:01 - this row is entirely filled up or almost
594:04 - all the way filled up while as it gets
594:07 - lower and as we sell only 182 solar
594:10 - battery flashlights the bar is going to
594:12 - represent that and show that now I'm
594:14 - about to completely mess up this
594:15 - visualization on purpose because it's
594:17 - about to get very messy to show you that
594:19 - you can do a little bit too much uh it
594:21 - is possible what we're going to do is
594:23 - we're going to go right over here to
594:25 - this background color unit sold and
594:27 - instead of gradient let's look at rules
594:29 - now with the price we just did a
594:32 - gradient scale but we can do basically
594:34 - groups of these and say if a number is
594:37 - greater to or equal than this number
594:39 - then it's going to be a certain color
594:40 - and then if it's in a different range we
594:42 - can give it a different color so we're
594:43 - going to say if it's greater than or
594:45 - equal to zero and we're going to say
594:47 - number not percent and if it's less than
594:52 - 266 because we have 265 right here let's
594:55 - make it a nice uh like gold a beautiful
594:58 - lovely mustard gold just just great now
595:01 - we're going to say if it's greater than
595:03 - or equal to we'll do 260 6 6 because
595:07 - this is less than 266 so it should be
595:09 - greater than or equal to 266 number and
595:13 - if it is less than we'll say
595:16 - 500 now we want to do this one and we'll
595:19 - give it uh let's do like a peach and
595:21 - we'll click okay and now we have another
595:24 - conditional formatting on top of that
595:26 - that can give us more information now
595:29 - again you should not do this it's just
595:31 - too many now let's go one step further
595:33 - and make it even more ridiculous and
595:35 - show you one more thing before I show
595:36 - you how you may actually want to use
595:38 - this uh let's go back to unit sold we're
595:41 - going to rightclick go to conditional
595:42 - formatting and you can do something
595:44 - called icons um font color is the exact
595:47 - same thing as background color except it
595:49 - changes the the font and so I'm not
595:50 - really going to look into that one icons
595:52 - are very simple extremely similar to
595:55 - Excel and how you've seen them and the
595:58 - rules that you can apply to them are
596:00 - basically the same as if you're doing
596:02 - like a gradient and it's these if
596:03 - statements that we saw before now it
596:06 - Auto gives us this right here which
596:08 - basically says 0 to 33% 33 to 67 67 to
596:12 - 100 if it's in the bottom 3% it gives us
596:15 - this red the middle is yellow and the
596:17 - top is green so we can go through and
596:20 - change all of this but honestly this
596:22 - looks pretty good so let's click on
596:24 - it and so the ones that are our least
596:26 - sellers are these red ones right here
596:28 - and the top sellers are up here now this
596:31 - is just based on unit sold and this
596:33 - looks absolutely terrible so let's kind
596:35 - of take this exact information but make
596:37 - it a little bit better so we're going to
596:40 - create a new visualization or at least a
596:42 - new table so let's click on product name
596:45 - and we'll take the price unit sold and
596:49 - revenue and what I think makes the most
596:51 - sense for looking at revenue is these
596:53 - data bars right here but there's only
596:55 - one problem I can't do that because it's
596:58 - not summarized like unit sold was but
597:02 - what I can do is to get that those data
597:04 - bars is I can come right down here
597:05 - instead of saying don't summarize I can
597:08 - summarize it and I can just click the
597:10 - sum so it now was summarized it's the
597:13 - exact same number but if I right click
597:16 - on here as sum of Revenue I go to
597:18 - conditional formatting I can now use
597:19 - those data bars and so we're going to
597:21 - use those data bars and we're going to
597:23 - say for the lowest value and the highest
597:25 - value and let's just make it a
597:28 - nice maybe a darker green I don't want
597:31 - it to well that's that's hideous let's
597:33 - make it this color right here a nice
597:34 - dark green and there's no negative so it
597:36 - doesn't really matter we're going to go
597:37 - left to right and you can show the bar
597:40 - only but we're going to keep it because
597:42 - I want to see it and we're going to go
597:44 - just like this we're going to
597:46 - order and this is pretty telling um
597:50 - honestly I did not think the
597:51 - weatherproof jackets were performing so
597:53 - well but I mean they are by far a number
597:56 - one seller so you know our weatherproof
597:59 - jackets multitool survival knives and
598:01 - the nylon rope are perform outperforming
598:04 - all of our other products so those my
598:06 - might be the ones that I focus on the
598:07 - most while duct tape the n95 masks and
598:10 - waterproof matches I mean those are
598:12 - those are garbage so I might be looking
598:13 - to replace those in the near future with
598:15 - some other items that might sell a
598:17 - little bit better so that's how you use
598:18 - conditional formatting and it's actually
598:20 - pretty useful there are a lot of times
598:22 - where I've done something like this in
598:23 - an actual visualization for work and it
598:25 - looks something like this it just
598:27 - depends on what you're visualizing but
598:29 - this is very much a simple thing that
598:32 - you can do to just add a little bit more
598:34 - information and and actual visual
598:36 - to this little chart or table that
598:38 - you're going to create sometimes it's
598:40 - just better to have these simple
598:41 - visualizations on this table rather than
598:43 - just having the numbers themselves makes
598:45 - it a little bit more easy to read and
598:48 - understand so again I hope that this was
598:49 - helpful thank you guys so much for
598:51 - watching I really appreciate it if you
598:52 - like this video be sure to like And
598:54 - subscribe and check out all my other
598:55 - videos on powerbi and I'll see you in
598:57 - the next
598:59 - [Music]
599:05 - video
599:07 - [Music]
599:10 - what's going on everybody welcome back
599:11 - to the powerbi tutorial Series today
599:14 - we're going to be taking a look at bins
599:15 - and
599:20 - [Music]
599:21 - lists now bins and list are really
599:23 - useful because they allow you to group
599:25 - things together to analyze and visualize
599:27 - them easier so in this tutorial I'll
599:29 - show you how to create your bins and
599:30 - lists and then we'll create some
599:31 - visualizations to show you how it can be
599:33 - helpful so without further Ado let's
599:35 - jump on my screen start with a tutorial
599:37 - all right so before we get started I
599:38 - wanted to let you know you can go and
599:39 - download the data that we're going to be
599:41 - using in this tutorial in the
599:43 - description below is on my GitHub so we
599:46 - are going to be looking at bins and
599:48 - lists today um and for this we're going
599:50 - to be going over here to this apocalypse
599:53 - sales uh and let's open up our data
599:56 - right over here and we want to look at
599:58 - apocalypse sales really quickly I feel
600:01 - like more people would know what a bin
600:02 - is so we'll kind of start with a list
600:03 - just go a little bit backwards than we
600:05 - normally would uh I'm going to use this
600:07 - customer or we're going to use this
600:09 - customer column right here for a list
600:11 - really quickly and you can do that in
600:12 - two ways you can come up here and you
600:14 - can right click on the customer and go
600:16 - to new group or you can come over here
600:19 - under this uh the Field section on the
600:21 - far right and go to customer rightclick
600:24 - and click new group so let's click on
600:26 - that
600:27 - now and right now is only giving us the
600:31 - list type it's not giving us bins
600:33 - because bins have to be numeric so we
600:36 - really can't do that at the moment um so
600:38 - we're going to call this just customer
600:39 - groups just or or we'll actually call it
600:41 - list just so it's easier to recognize
600:44 - when we create it and so all we're going
600:45 - to do is we're going to basically group
600:47 - these but it's going to be called a list
600:50 - and so what we're going to do is we're
600:52 - going to select and we're going to
600:54 - select and we're going to say group and
600:56 - click on this group button and then it
600:58 - creates this Alex the analyst apocalypse
601:00 - Preppers and uh this prep for anything
601:03 - prepping store so that it kind of named
601:05 - it for us but if we double click on it
601:09 - then we can rename this and we can call
601:11 - this the best prepping
601:16 - stores and then we have these last two
601:19 - and we can we can click on one and then
601:22 - click control and click on the other one
601:25 - so we get both of them and then we can
601:27 - click group and we can call this and
601:30 - we'll double click and we'll call this
601:32 - the worst prepping stores
601:37 - um and then that's it and that's all we
601:39 - have to do and what we're then going to
601:41 - do and if you want to undo this and you
601:43 - want to switch it up and do whatever you
601:45 - can click on group but we're not going
601:46 - to do that we're going to click
601:48 - okay and here is the column that it
601:50 - created and it basically tells us what
601:53 - list we put it in if it's Uncle Joe's
601:55 - Prep shop that's in the worst prepping
601:56 - stores list and if it's the Alex the
601:58 - analyst apocalypse Preppers that is in
602:00 - the best prepping stores so it's kind of
602:03 - like an if statement you could even
602:05 - create a calculated column do it on this
602:07 - customer create an if statement this is
602:10 - just a lot faster and a lot easier than
602:13 - doing that but it basically would do the
602:15 - exact same thing now you can use lists
602:17 - as well on things like numeric so let's
602:20 - say we have order
602:21 - ID and we'll go to new group and it's
602:25 - going to Auto go to bin because
602:27 - typically that's what you'll use but you
602:28 - can do list as well and let's say you
602:31 - know we want to say we want to call
602:33 - these like we'll group these and call
602:36 - these the
602:38 - first um we'll call this the first
602:40 - customers or the first orders because
602:42 - we're looking at order IDs look at the
602:44 - first orders and then we will go back
602:47 - here we're going on the left side we're
602:49 - going to click oops we're going to go
602:51 - back to the top we're going to hit shift
602:54 - group all of these and we'll say the
602:57 - latest
602:58 - orders and you absolutely can do this um
603:01 - again this is kind of like an if
603:03 - statement right so you're saying if it
603:05 - falls between this range and this range
603:07 - then it's called the first orders and if
603:09 - it's between this range and this other
603:10 - range it's the latest orders um again
603:14 - it's just a much simpler version of an
603:16 - if statement and so you don't have to
603:17 - write it all out you can just have this
603:19 - user interface kind of do it for you uh
603:22 - and and it's really really useful so now
603:23 - let's talk about bins and by far the
603:25 - easiest way to demonstrate this and I'll
603:27 - show you one other way uh but by far the
603:29 - easiest ways to show this is by using
603:32 - age and so uh for absolutely no reason
603:35 - whatsoever these customer IDs uh who are
603:37 - right here in this customer information
603:40 - they decided to give us some of their
603:41 - buyer information who are actually
603:43 - buying their products on their website
603:44 - or in their store they just decided to
603:46 - give it to us as well as some uh simple
603:49 - demographic information I I don't know
603:51 - why but what we're going to use bins for
603:53 - is grouping these age brackets so you
603:57 - know you might be interested in say well
604:00 - I want to know if my core population who
604:02 - are buying my products are within a
604:04 - certain range and you don't want to look
604:05 - look at every single age because then it
604:08 - just you know in your visualizations
604:09 - it's not going to look right you want to
604:10 - kind of group them make it easier to
604:12 - visualize so what we're going to do is
604:14 - we're going to go through here and we're
604:15 - going to basically go by tens so 10 20
604:18 - 30 40 50 60 and see what age bracket
604:22 - these people fall in so we're going to
604:23 - go to age we're going to right click and
604:25 - we're going to say new group and we're
604:27 - going to go to bin and we'll leave it as
604:29 - a default age bins um and you can do two
604:32 - things you can do the size of the bins
604:34 - which splits it uh uh which splits it by
604:37 - this number right here or you can go
604:38 - based on the number of bins so if you
604:41 - only want to do five different bins
604:44 - it'll calculate that for you and it'll
604:46 - say okay if you only want five bins
604:49 - you're going to have to do it at 12.2 if
604:51 - you want 10 bins it can be 6.1 but it is
604:55 - completely up to you on how you want to
604:57 - do that um you can do the size and we'll
604:59 - just say every 10 which is what we're
605:01 - going to do or you can go through and
605:03 - then you can create you know the how
605:05 - many many bins you actually want so
605:07 - let's go ahead and click okay and it's
605:10 - going to create those bins for us so if
605:12 - somebody is 78 they're going to be in
605:14 - the 70s bin if somebody's 41 they'll be
605:17 - in the 40 bin if somebody is 29 they'll
605:20 - be in the 20 bin and so on and so forth
605:23 - so when we go to visualize this we don't
605:25 - have you know 71 72 73 74 have a lot
605:29 - more things on our visualization it'll
605:31 - just be the 70 or it'll just be the 20
605:33 - now we can also use bins on dates as
605:36 - well so let's go back to apocalypse
605:38 - sales we have this date purchase so we
605:40 - can create a bin for this as well so
605:42 - let's go to date purchased let's go new
605:45 - group now you can also create a list and
605:48 - that's totally fine if you would like to
605:50 - do that um and it would look kind of
605:52 - like this where you can go through and
605:54 - you can select it and you can say okay
605:57 - this group all these dates you can group
606:00 - those and say this is going to be
606:02 - January uh and you can do that and
606:04 - that's totally okay um but for this one
606:07 - we're going to do bins I think it's a
606:08 - little bit easier to do bins because
606:10 - what we can do is go right here and we
606:12 - can specify if we want seconds minutes
606:14 - hours days months or years and so um for
606:17 - the data that we have it goes January
606:19 - February and March so we're going to do
606:22 - months and we're going to say the bin
606:24 - size is going to be one month so each
606:26 - month should have its own bin so it'll
606:27 - be three bins total so we're going to
606:29 - select
606:31 - okay and as you can see on this right
606:33 - side we have January of 2022 and that
606:36 - correlates to the January over here then
606:38 - it goes down to February and then it
606:40 - goes down to March and then when we
606:43 - visualize this uh we don't have to do
606:45 - this the hierarchy stuff that we do in
606:47 - here where we filter it down down to
606:49 - months we can just use this right here
606:51 - and that will be our month's column so
606:53 - now let's go over to our visualizations
606:55 - and we'll see how this looks really
606:57 - quickly we're not going to look at all
606:58 - of them but we will take a look at few
607:00 - of them so the first one that we can
607:01 - look at is age so let's look at the
607:04 - buyer ID and then we'll do age as well
607:07 - and so let's spread this
607:10 - out and we can see our distribution of
607:13 - our buyers so it looks like we have very
607:16 - few uh who are in the 10 range thank
607:19 - goodness and we can even put the age
607:21 - right under here under the age bins and
607:23 - we have this now we kind of have this
607:25 - drill down and so if we go right here
607:27 - and we drill down right there this will
607:30 - actually give us the breakdown so this
607:31 - is what it would have kind of looked
607:33 - like our visualization would have looked
607:35 - like if we had just kept it the age cuz
607:37 - now we're drilling down into the age and
607:39 - so it looks like we have one 18-year-old
607:41 - and maybe a 20-year-old as well um let's
607:44 - go back up yeah so it looks like we only
607:47 - have one buyer ID yes so there's only
607:48 - one 18year old so of legal age to start
607:51 - buying you know all these prepping
607:52 - equipment and probably uh buying online
607:55 - and stuff like that which makes sense
607:57 - right so uh this gives you kind of a
607:59 - quick breakdown in the bins rather than
608:01 - um doing it the alternative way so now
608:03 - let's take a look at the customer list
608:06 - as well as the unit sold and it looks
608:09 - like the best prepping store uh is
608:11 - actually performing much worse
608:13 - surprisingly uh than the worst prepping
608:16 - store and so I hope this gave you a
608:18 - really good idea of how to use bins and
608:19 - lists within powerbi thank you so much
608:22 - for watching if you like this video be
608:23 - sure to like And subscribe and check out
608:25 - all my other videos on powerbi I'll see
608:27 - you in the next
608:29 - [Music]
608:34 - video
608:35 - [Music]
608:40 - what's going on everybody welcome back
608:42 - to the powerbi tutorial Series today
608:44 - we're going to be taking a look at all
608:45 - types of
608:49 - [Music]
608:52 - visualizations now when you're working
608:53 - in powerbi there are a lot of different
608:55 - options to create visualizations and you
608:57 - may not always be sure which one to use
609:00 - and so that's what this video is for I'm
609:01 - going to walk you through a lot of the
609:03 - visualizations that I like and I use a
609:05 - lot as well as kind of point out some of
609:07 - the ones that I don't like as much so
609:09 - that you get kind of a feel for the ones
609:11 - that I think are really popular and that
609:13 - are used the most so without further Ado
609:15 - let's jump into powerbi and start taking
609:16 - a look all right before we jump into it
609:18 - there is a link in the description where
609:19 - you can get the data that we're going to
609:21 - be using for these visualizations if you
609:23 - want to practice them yourself before we
609:25 - actually get into it we do need to
609:28 - combine this and if you download that
609:30 - Excel and you see this you'll have to do
609:32 - the same thing all we have to say is
609:34 - that this product ID is the same as this
609:37 - product ID purchased and now we are good
609:40 - to go do one to many and it's okay if
609:42 - it's one way so right over here under
609:44 - this visualizations tab there are lots
609:46 - of different options and it can be a
609:48 - little bit overwhelming you don't really
609:50 - know which one to choose there are some
609:52 - in here that I have almost never used
609:54 - for my job ever so I'll Point those out
609:56 - as we go through but the main focus is
609:58 - going to be focusing on the ones that I
610:00 - do use that I have used and showing you
610:03 - how to actually create that
610:04 - visualization Maybe spice it up just a
610:05 - little bit but we have a lot of them to
610:08 - go through so let's jump right into it
610:10 - and the very first one that we're going
610:11 - to start with probably the easiest one
610:13 - and the one that you'll recognize the
610:14 - most is a stacked bar chart and what we
610:17 - going to do is go ahead right over here
610:19 - to the product name and we want this
610:22 - unit sold as well so we're going to
610:24 - click product name and it's going to go
610:26 - straight into the Y AIS for us and then
610:28 - we're going to click unit sold and that
610:30 - will go into the x-axis automatically it
610:33 - just kind of intuitively knows but
610:35 - sometimes it will make a mistake and
610:36 - then you can just fix it or flip it and
610:39 - we do want this uh let me make this much
610:42 - larger we do want this to be a little
610:44 - bit more colorcoded that is what this
610:46 - Legend is down here so what we're going
610:48 - to do is drag this product name down to
610:50 - the legend and now we have each product
610:53 - as its own
610:54 - color and in previous videos we have
610:57 - gone through and looked at some of these
610:58 - Visual and general options that you have
611:01 - when you're actually creating these
611:02 - visualizations but we're going to do
611:04 - some of them while we're in here as well
611:06 - so we're just going to go down here
611:08 - we're going to choose data labels and
611:10 - we're going to shrink that and if you go
611:13 - higher the higher you go the less you
611:15 - see so if you want all of them all the
611:17 - way down to the green we're going to go
611:18 - right about there and we're going to
611:20 - make it smaller so now we can go ahead
611:22 - and click anywhere outside of that
611:23 - visualization and now we can create a
611:25 - new one if we had just kept it like this
611:28 - where we were still interacting with
611:29 - this visualization and we clicked on a
611:31 - different one it would have then changed
611:33 - our visualization completely which we
611:35 - don't want so let's hit contrl Z click
611:38 - out of it and now we can create a new
611:40 - one let's go right over here to this
611:42 - 100% stacked column chart I'm going to
611:44 - click on it drag it over here and make
611:47 - it much larger and we're going to come
611:50 - right over here to this customer
611:52 - information and we're going to click on
611:54 - customer and then we're going to go up
611:56 - to unit sold and click on unit sold and
611:59 - we want to break these out and so
612:01 - basically what this is doing is it's
612:02 - breaking it out by each of these shops
612:05 - and we can see the total of what they're
612:07 - buying the units sold but we want to see
612:10 - exactly what products make up this
612:12 - percentage of this 100% so we're going
612:15 - to go right over here to product name
612:17 - we're going to drag that down to the
612:18 - legend and as you can see now we have
612:21 - each of these products and each of the
612:23 - products is up here so this backpack we
612:25 - can see the backpack right here backpack
612:28 - right here and right here and we can see
612:29 - which customer is buying what percentage
612:31 - of their purchases so for this prep for
612:34 - anything prep store they have a very
612:36 - large percentage 40% is duct tape so
612:39 - they're buying a lot of duct tape so
612:41 - really quickly we're able to see what
612:42 - clients are purchasing or which clients
612:44 - are purchasing what products the most so
612:46 - just like this Alex analyst apocalypse
612:48 - Preppers they're buying a lot of water
612:50 - purifiers we like drinking clean water
612:53 - um you know that's just what my audience
612:54 - likes and so you know we can easily get
612:57 - a quick glance of that again we're going
612:58 - to go in here I tend to like putting
613:00 - these data labels on here that's just
613:03 - what I preference
613:05 - so you know something like this it looks
613:07 - nice it looks clean um we can always go
613:10 - back and change these names which we'll
613:12 - do for this one so we're going to go
613:13 - over here go to title we'll go down to
613:16 - the text and we'll do
613:20 - customer
613:22 - oops customer purchase oh jeez
613:27 - breakdown pretend I'm really good at
613:30 - spelling and we're going to do it just
613:32 - like that we'll get out of there so now
613:34 - we have customer purchase breakdown and
613:36 - that looks really nice it's a good uh a
613:39 - good visualization and we're going to
613:40 - bring that right over here we're going
613:43 - to have a lot on the screen so I may
613:45 - have to uh make them smaller or larger
613:49 - to fit
613:50 - everything all right so let's go on to
613:52 - our next one another really common
613:54 - visualization is this one right here
613:56 - which is the line chart and the line
613:59 - chart is great especially when you're
614:01 - using things like dates I have found
614:03 - this one to be the best best and a lot
614:05 - of people use this as well so we're
614:06 - going to go right over here and click on
614:08 - date purchased and then units sold and
614:11 - on the x-axis you can see it's broken up
614:13 - by year quarter month and day so we
614:15 - don't want to do it that high level we
614:17 - only have three months of data in here
614:18 - so we're going to get rid of the year
614:20 - we're going to get rid of the quarter
614:22 - and then we at least have this and let's
614:25 - break it out because right now we're
614:27 - looking at all of the units sold so
614:29 - we're going to drag the product name
614:30 - right down here to the legend and now it
614:32 - breaks it out by the actual product and
614:35 - for each month in January February or
614:37 - March you can follow these products and
614:38 - see how they did in each of those months
614:41 - and if we wanted to we can come right
614:42 - over here to the filter on the product
614:44 - name and we could filter it by maybe the
614:46 - top three so let's do multi-tool
614:49 - survival knife the nylon rope and the
614:53 - duct tape and we can have it just like
614:55 - this and you know you can do those for
614:57 - any product that you want but again we
615:00 - just want to do it for those three just
615:01 - for an example and that really doesn't
615:03 - give us a ton of information we could
615:05 - even go down to the day and you know it
615:07 - might give us a little bit more
615:09 - information and so we'll keep it like
615:11 - that and we can go over here change the
615:14 - name as well we're not going to do this
615:16 - for all of them again we're just looking
615:17 - at the different types of visualizations
615:19 - I think are really good to know but
615:21 - we'll change this one as well to
615:24 - products
615:26 - purchased by
615:28 - date we'll keep it just like that again
615:31 - nothing fancy we're just trying to look
615:33 - at a bunch of different stuff so let's
615:34 - put this over here down here now let's
615:38 - click out of there and there are other
615:40 - ones in here um that are definitely
615:42 - useful and you absolutely can use um
615:44 - like this one is a stacked bar chart
615:46 - this one is a stacked column chart it's
615:48 - basically the same thing just a
615:49 - different orientation like we went to
615:51 - here it's just a different orientation
615:54 - it's the same thing um just like this
615:57 - clustered bar chart custom column chart
615:59 - it's just its orientation either
616:01 - horizontal or
616:02 - vertical then we have things like an
616:04 - area chart uh stacked area chart not
616:07 - really things that I've used too much in
616:10 - previous positions one that I have use
616:12 - though is a line and clustered column
616:14 - chart so it kind of combines a few of
616:18 - these with you know you have these bar
616:20 - charts as well as line charts into one
616:23 - visualization so let's look at this one
616:25 - because this is one that I have used
616:26 - several times in my actual job so for
616:28 - our x axis we'll use the product name
616:33 - then we'll look at something like the
616:34 - price and so let's make this a lot
616:37 - larger so you can actually see it so now
616:41 - we have the price and now we can look at
616:43 - something like the production cost and
616:45 - that can
616:46 - be our line ya AIS so now we're looking
616:50 - at the price of it how much someone is
616:52 - actually paying for it and then we're
616:53 - looking at how much it's costing us to
616:55 - actually produce that product and so
616:57 - really quickly at a glance you can kind
616:59 - of see that it's around the halfway to
617:00 - 2/3 point on most of these you can see
617:03 - that the production cost is always lower
617:06 - than the actual price because of course
617:08 - we're out here to make a profit on these
617:09 - products so let's minimize this one
617:12 - we're going to put this one right down
617:13 - here let's make it even smaller let's
617:16 - click out of that and the next one that
617:18 - we're going to take a look at is a
617:20 - scatter chart so let's click on that and
617:23 - make it much larger
617:26 - oops there we go so let's use the price
617:29 - and the production cost again and so our
617:32 - x axis is the price our y y AIS is the
617:35 - production cost but now we need to fill
617:37 - in this values right here so let's go
617:39 - over here and click on the product name
617:40 - and drag that into values and so now we
617:43 - have our values we just don't know what
617:44 - they are but we can see it so let's drag
617:47 - this down to Legend as well and it
617:50 - breaks it out and we kind of have this
617:51 - scatter plot and you know for this fake
617:54 - data that we're using it doesn't really
617:56 - show a lot U but if you're using real
617:58 - data you can definitely find outliers
618:00 - and Trends and patterns using this type
618:02 - of visualization let's go ahead and make
618:04 - that one small as well drag it right
618:07 - down into the
618:08 - corner now let's go right over here and
618:11 - we have the the dreaded pie charts um
618:13 - and dut chart now look I think it's kind
618:15 - of a joke in the data analyst Community
618:17 - about pie charts and doughnut charts but
618:20 - at the same time people use them and
618:21 - they request them and so sometimes
618:23 - you're going to use it whether you like
618:25 - it or not so let's click on the dut
618:27 - chart and let's make this one a lot
618:31 - larger and let's go over here and let's
618:33 - click on
618:35 - State and we're also going to click on
618:37 - total purchased and that's really all
618:40 - you have to do these ones are pretty
618:43 - straightforward you can change a few
618:44 - different things like where these labels
618:46 - are if you want them inside you can also
618:49 - do that and that would look totally fine
618:51 - um again I'm just not a super huge fan
618:54 - but you will get this one requested
618:55 - people like this and want to see it and
618:57 - the reason a lot of analysts don't like
618:59 - using this is because when you start
619:01 - glancing at these it's really hard to
619:03 - tell the difference between these sizes
619:06 - if you look at something like this you
619:08 - can easily see that this is larger like
619:10 - if you're looking at this one the
619:11 - multi-tool survival knife is obviously
619:13 - the longest and it gets shorter shorter
619:15 - shorter shorter but when you start
619:16 - getting in here it's really hard to
619:18 - approximate the size I would not be able
619:20 - to tell the difference between this 5.63
619:22 - 5.78 two uh 7.72 I would not be able to
619:26 - tell really the difference between these
619:28 - or or kind of the the difference between
619:30 - them very easily that's why a lot of
619:33 - people don't want to use them in general
619:36 - so again I want to show you this one
619:37 - because I think it's worth noting and
619:39 - worth knowing how to use but I don't
619:42 - really push people towards this because
619:44 - I don't think it's the best
619:45 - visualization available most of the time
619:48 - all right the next two are super easy
619:50 - but are used all the time uh maybe more
619:53 - than some of these even but they're just
619:55 - so easy to use so I'm kind of saved them
619:57 - for last this one is the card and all
620:01 - the card is is it displays one number or
620:04 - multiple numbers if you want to use a
620:05 - multi- card but we'll just look at the
620:07 - card for now all we're going to look at
620:09 - is the total purchased and it's just
620:11 - going to display it just like this and
620:13 - you can make it as large or as small as
620:15 - you'd like and normally it goes on like
620:17 - the top and you'll put card here a card
620:19 - here um just for example I'll kind of
620:22 - show you how this might look so it look
620:24 - something like this right and at the top
620:26 - it'll have different usually High
620:28 - overarching information and this is
620:31 - super common to see and I'm sure if
620:32 - you've looked at other people's
620:33 - visualization you'll see something like
620:35 - this this is usually totals or averages
620:38 - or something like that in here where
620:39 - it's super easy to look at so like right
620:42 - here this is total purchased and we can
620:44 - go in and look at the minimum and then
620:46 - we can go over here and this one can be
620:49 - account and so it gives us a lot of
620:52 - information just at a really quick
620:53 - glance and then we have all of our more
620:55 - in-depth colorful visualizations that
620:57 - kind of have more information than just
620:59 - a single piece like the card does and
621:01 - then the very last one that I'm going to
621:02 - show you is this one right here which is
621:05 - the table and this one is obviously
621:07 - extremely popular it's like an little
621:09 - Excel table and we can go in here and we
621:12 - can get the customer wherever that is
621:15 - and then we'll also get the unit sold
621:17 - and this is what it looks like and it's
621:19 - super easy and oftentimes you'll have it
621:21 - like on the side as well uh and all the
621:23 - other visualizations over here and so
621:26 - you know if we're going to take all
621:27 - these visualizations and pretend they
621:28 - were like a real thing you know there's
621:31 - a lot in here but we'll just kind of
621:34 - really quickly do this um you know we
621:36 - might have something like this and we'll
621:39 - make this larger and make this
621:42 - wider and you know we have a lot of
621:45 - information just in here and this is not
621:47 - a project so don't go put this on your
621:49 - portfolio I'm just threw a ton of random
621:51 - visualizations on you know this
621:53 - dashboard but you can already see a lot
621:56 - of these you most likely have seen in
621:58 - other people's work in other people's
622:00 - visualizations on LinkedIn or on YouTube
622:02 - these are very common very very popular
622:05 - and again we did not go through all of
622:07 - the ones over here there are maps that
622:09 - you can use but I haven't used Maps ever
622:12 - in my job there are things like gauges
622:14 - and decomposition trees and waterfall
622:18 - charts and uh tree maps and all these
622:21 - different things but I really have never
622:23 - used those in my actual job and I don't
622:26 - see them a lot in others people's work
622:28 - either otherwise I would be telling you
622:30 - to learn these and use these but again
622:32 - try them out see which ones you like if
622:34 - you like this video be sure to like And
622:36 - subscribe below and go check out all the
622:37 - other powerbi tutorial videos that I
622:39 - have on my channel and I will see you in
622:41 - the
622:41 - [Music]
622:53 - next what's going on everybody welcome
622:55 - back to the powerbi tutorial Series
622:57 - today we are going to be working on our
622:59 - final
623:02 - project
623:06 - now this is our final project of the
623:07 - powerbi tutorial Series so if you have
623:09 - not watched all of those videos leading
623:11 - up to this I recommend going and
623:13 - watching those videos so you can make
623:15 - sure that you know all the things that
623:16 - we're going to be looking at in today's
623:17 - project I am really excited to work on
623:19 - this project with you because I think it
623:20 - is a really good one and it uses real
623:22 - data that we collected about a month ago
623:25 - where I took a survey of data
623:26 - professionals and this is the raw data
623:28 - that we're going to be looking at and so
623:30 - I think it's just really interesting
623:31 - that we collected our own data and now
623:33 - we're using for a project we're going to
623:34 - transform the data using power query and
623:36 - then we're actually create the
623:37 - visualizations and finalize the
623:39 - dashboards as well as create a theme and
623:41 - a different color scheme to kind of make
623:43 - it a little bit more unique without
623:45 - further Ado let's jump onto my screen
623:46 - and get started with the project all
623:47 - right so before we jump into it I wanted
623:49 - to let you know that you can get the
623:50 - data below it is on my GitHub you can go
623:52 - and download this exact file that we're
623:54 - going to be looking at now in the past
623:57 - several projects we have been using this
623:59 - fake apocalypse data set you know it was
624:02 - fun it was you know what whatever this
624:04 - data set is real this is a real data set
624:06 - it was a survey that I took from data
624:08 - professionals I posted on LinkedIn and
624:10 - Twitter and all these other places and
624:12 - we had about 600 700 people who
624:14 - responded to the questions so before we
624:16 - actually get into it and start cleaning
624:18 - the data and doing all this stuff in
624:20 - powerbi I just wanted to show you the
624:23 - data all right so this is the CSV that I
624:25 - downloaded from the survey website that
624:27 - I used and this is completely raw data I
624:29 - haven't done anything to it at all let's
624:32 - go through the data really quickly and
624:33 - we'll kind of see what we have and we
624:35 - are not going to make any changes at all
624:37 - in Excel we're going to do all of our
624:40 - Transformations or at least a few
624:41 - transformations in powerbi because again
624:44 - this is a powerbi tutorial and project
624:47 - so I want you to kind of learn how to
624:48 - use that and not use Excel because you
624:50 - can go through my Excel tutorial if you
624:52 - want to do that so let's just look at it
624:54 - in Excel and then we'll move it over to
624:56 - powerbi and actually start transforming
624:58 - the data so we have this unique ID these
625:00 - are all the people that actually took it
625:02 - oops don't want to do that we have an
625:04 - email which this was completely
625:05 - Anonymous I didn't collect any data or
625:08 - user data on this then we have the date
625:10 - Taken um and let's get into the actual
625:13 - good information then we have all of
625:15 - these questions so we have question one
625:18 - which title fits you best and they can
625:19 - choose things now uh let's add a filter
625:22 - really quickly that we can look at this
625:25 - now you had the pre-selected ones which
625:28 - were like data analyst architect
625:30 - engineer but then there was an option
625:31 - where you could say other and you could
625:33 - spe specify what that was so if you look
625:36 - in here we're going to have all these
625:38 - different other please specify with
625:40 - different titles right and there were a
625:43 - lot of them now typically what you want
625:47 - to do is really clean this up and we're
625:50 - not going to be doing a ton ton ton of
625:52 - data cleaning but we are going to do
625:54 - some in powerbi but none in here but
625:57 - typically with this amount of data and
625:59 - the way that it's formatted we would do
626:01 - so much data cleaning um with this one I
626:03 - mean I mean there is a lot of work to be
626:05 - done um like this current year salary
626:08 - this is one that I would absolutely be
626:10 - cleaning up because it's ranges and it
626:13 - has a dash and a k and and all these
626:15 - numbers this is something that I would
626:17 - be cleaning up and using but we're not
626:19 - going to be cleaning this up right now
626:21 - so anyways let's just get into it let's
626:23 - see what questions we asked uh we have
626:25 - the yearly salary what industry do you
626:27 - work in favorite programming
626:30 - language then there were a lot of
626:32 - different options this is like one
626:34 - question where they picked multiple
626:36 - options so is how happy are you in your
626:38 - current position with the following you
626:39 - have your salary work life
626:42 - balance um then we have co-workers
626:46 - management upward Mobility learning new
626:49 - things um and they could rank it from
626:51 - zero to 10 so some people ranked upward
626:53 - Mobility a 10 some ranked it a zero or a
626:56 - one um and again they can answer however
626:59 - they want how difficult was it to break
627:02 - into Data very very difficult very easy
627:06 - um if you're looking for a new job we
627:08 - have you know what would you be looking
627:09 - for remote work better salary Etc we
627:12 - have male female which country you from
627:14 - and then this is more like demographics
627:16 - so if you're a male how old you are and
627:19 - this was in a Range so this is like a a
627:22 - a sliding bar so you could slide it to
627:23 - the exact age you had there's some
627:26 - people who are apparently 92 um which if
627:29 - that's true I mean good for you man or
627:31 - woman actually really quickly I'm going
627:33 - to see just just while we're here I'm
627:36 - going to see if this is a male male or a
627:37 - female oh it's a female from India very
627:40 - cool um so we have all this information
627:44 - and it is a lot of information when you
627:46 - have something like this I mean there is
627:49 - so much data cleaning that can be done I
627:52 - mean I already see like 20 plus
627:56 - different things that I would need to do
627:58 - to make this a lot better um and we also
628:01 - have date Taken and the time taken as as
628:03 - well as how long it they took on it like
628:06 - the time spent really just really
628:08 - interesting data but again this is a
628:11 - beginner tutorial Series this is the
628:14 - beginner project so we're not going to
628:15 - get do anything too crazy I will be
628:18 - using this exact data set in a future
628:20 - video doing a lot more data cleaning and
628:24 - creating a much more advanced
628:25 - visualization with what we have and what
628:28 - we're looking at right here but for this
628:29 - video we're just going to be doing a
628:31 - pretty simple visualization and D
628:33 - dashboard that you can use uh to
628:35 - practice with or put on your portfolio
628:37 - if you know that's where you're at right
628:39 - now so let's get out of here and let's
628:41 - put this into powerbi so let's exit out
628:43 - and let's come right over here to import
628:45 - data from Excel we'll click on powerbi
628:48 - final project and
628:50 - open give that a second doing this all
628:53 - in real time we only have the one so
628:55 - we'll do be we won't be practicing any
628:57 - joins or anything but we're not going to
628:59 - load it we're going to transform this
629:01 - data so let's put it into to power query
629:05 - editor and now we have all of our data
629:08 - in here and it should look extremely
629:11 - familiar now when I'm looking at this
629:14 - when I start looking at this information
629:17 - I kind of need to know beforehand what I
629:20 - want to get out of this do I need to
629:22 - clean every single column do I just need
629:24 - to clean a few of them do I need to get
629:26 - rid of columns that's kind of where my
629:28 - head's at and so right off the bat I can
629:31 - already tell you that there are columns
629:32 - that we can just delete to get out of
629:33 - our way so we're going to do that at the
629:36 - beginning so that we don't have to do
629:37 - that later on or they're just in our way
629:39 - so I'm going to click on browser and
629:41 - then I'm going to hit shift and I'm
629:43 - going to go over here to
629:44 - refer and I'm just going to go up here
629:46 - to remove columns and everything that we
629:49 - do is going to go over here to this
629:50 - applied steps if you've been following
629:52 - this series um you know we can remove
629:55 - things add things but anything we do
629:57 - will show up right over here so we can
629:59 - track it and go back if we need to now
630:02 - one column that I know for sure that I'm
630:04 - going to be using quite a bit is this
630:06 - which title fits you best in your
630:08 - current role because I I specifically
630:09 - wanted to do a breakdown of different
630:11 - people's roles and how much they make
630:13 - and different stuff like that so I know
630:15 - that I want to use this but as we saw
630:18 - before there's kind of the issue is is
630:20 - it's not very clean right it has data
630:23 - analyst data architect engineer
630:25 - scientist databased developer and then
630:27 - like a hundred different options and
630:30 - then a student or or none of these right
630:36 - um and so for the purpose of this video
630:39 - right here we are not going to take
630:42 - every single one of these options
630:43 - because this involves a lot more data
630:45 - cleaning let me give you an example this
630:47 - says software engineer this also says
630:50 - software engineer and with AI these two
630:53 - would typically be combined or
630:56 - standardized to software engineer but
630:59 - it's not very easy to do that in powerbi
631:02 - we could do that in Excel but not really
631:04 - in powerbi or even SQL if we pull this
631:06 - from a SQL database um and you can find
631:09 - lots of different you know options of
631:11 - that we have data manager and data
631:13 - manager if we separated these out these
631:15 - would be different options when we
631:18 - created our visualizations and we don't
631:19 - want that so what we are going to do uh
631:22 - and this is going to be kind of a an
631:24 - easy way out to just make sure that this
631:27 - is pretty clean and doesn't we don't
631:28 - have a thousand different options we're
631:30 - going to create this to other so we're
631:33 - to simplify this a lot and then we're
631:36 - going to use this so we'll have maybe
631:38 - six or seven options instead of the you
631:40 - know let's say 50 that we would have if
631:43 - we actually did the harder work which
631:45 - just break it out standardize it and
631:47 - clean it up that way so what we're going
631:49 - to do is we're going to click on this
631:51 - right here and we're going to go up here
631:52 - to split column in this ribbon up top
631:55 - we'll go to split
631:56 - column and we want to do it by a
631:59 - delimiter and if you notice let me see
632:01 - if I can move this over if you notice we
632:03 - have other and then we have this
632:05 - parenthesis and in no other option or
632:07 - way is there parenthesis so what we're
632:09 - going to do is we're going to use a
632:12 - custom and we're use this open
632:15 - parenthesis what that's going to do is
632:17 - it's going to separate it by this
632:18 - parenthesis it's going to leave the
632:19 - other it's going to create separate
632:22 - columns um just one separate column for
632:24 - each of these and we can do that at each
632:26 - occurrence or we can do the leftmost and
632:28 - we really we only need it for the
632:30 - leftmost because there's only one of
632:32 - these uh left-handed or left-sided uh
632:35 - brackets or or what is it whatever this
632:38 - is called and then let's go and click
632:40 - okay and it should create another column
632:43 - so it's going to have 0.1 Point 2 and
632:47 - now we have if we click on this now we
632:49 - only have these options we have analyst
632:52 - architect engineer data scientist
632:54 - database developer other and student
632:56 - looking or none that is what we want it
632:58 - makes it so much simpler and it's not
633:01 - perfect but again I'm trying to show you
633:03 - what we are able to do in powerbi so now
633:06 - we're just going to remove that column
633:08 - and we're going to go and do the exact
633:10 - same thing to this one as well because I
633:13 - know that we want to use this and I
633:15 - really wanted to use this one as well
633:17 - but if we look at this one also um
633:20 - there's a lot so I said what is your
633:22 - favorite programming language and people
633:24 - there were pre-selected answers like
633:26 - JavaScript Java C++ python R things like
633:29 - that and then there was an other option
633:32 - and in this other option I mean it was
633:34 - free text so they can fill it in as they
633:36 - want I mean there's four five six
633:38 - different ways that people put SQL that
633:41 - is something I would standardize and you
633:43 - know that would be the way I cleaned it
633:46 - but that's not how we did it in here so
633:48 - we're going to do the same thing we're
633:49 - going to keep that other so we're going
633:51 - to split this column again we're use a
633:53 - delimiter and for this delimiter though
633:56 - we're going to use a colon so we're
633:58 - going to say we're going to do a colon
634:00 - right there we'll just do the leftmost
634:02 - we'll click okay and then we have our
634:06 - options and it's much simpler now I
634:08 - really would have rather kept all these
634:11 - and because sql's in there quite a bit
634:13 - but you know a lot of people don't think
634:15 - SQL is even a programming language so uh
634:17 - we're going to delete that column now
634:19 - one that I just skipped and I kind of
634:21 - wanted to go back to is this current
634:23 - yearly salary I really want to use this
634:27 - let's see if we can use it I here's what
634:30 - I want to do with it and this is not
634:31 - perfect um for this video I want to try
634:34 - it what I want to do is break up these
634:36 - numbers 106 125 and then take the
634:39 - average of those numbers so then we'll
634:41 - use some docks in there so we'll take
634:43 - 106 125 create that into two separate
634:45 - columns then we'll create a third column
634:48 - that will give us the average of those
634:50 - two numbers so we'll do 106 plus 125
634:53 - divided by two and then we'll have the
634:56 - average of that now that is not perfect
634:58 - but it's going to give us at least you
635:00 - know an average of kind of roundabout
635:02 - number because they gave us this range
635:04 - they said my salary is between 106 and
635:06 - 125,000 so if we say that their salary
635:09 - was
635:09 - 112,000 at least gives us it makes it
635:12 - usable it's a numeric value instead of
635:14 - being this which is text which we really
635:17 - we could use and and I'll show you how
635:19 - to do that because we're going to keep
635:20 - this column I'll create a copy of this
635:22 - and I'll show you the difference between
635:23 - this and using the average but for but
635:28 - for this data cleaning portion let's
635:30 - just try it let's see what we can do and
635:33 - see if we can make it work so first
635:35 - let's create a duplicate so we're going
635:38 - to uh duplicate the column so now we
635:42 - have this copy at the very very end and
635:45 - we can use this one instead of having to
635:47 - use the original way way way back here
635:50 - so we're going to leave that one how it
635:51 - is and we're going to use this one so
635:55 - let's go ahead and split this one up
635:57 - we're going to click on the column
635:58 - header then we're going to click on
636:00 - split column and we'll do it by digit to
636:04 - non-digit and if you look at it right
636:07 - here it's broken it out kind of um in
636:10 - the fact that now in this one we just
636:13 - have numeric values and in this one we
636:16 - have k- numeric or just Dash numeric and
636:21 - now this can be easily cleaned whereas
636:24 - this one we can just completely get rid
636:25 - of because it's only K so we'll just
636:28 - remove that column and then in this one
636:30 - we're going to rightclick we're going to
636:32 - click on replace values and so if it
636:35 - just has we're just do a k we'll replace
636:38 - with nothing we'll do okay and then for
636:41 - the last one we'll go to replace values
636:45 - and we'll do the dash or the minus sign
636:47 - and we'll place that with nothing and so
636:49 - now we have our values as well oh we
636:52 - also have a plus let me get rid of that
636:54 - because that's when some people had 250
636:56 - or 225,000 plus so for that one the
636:59 - average is just going to be 225 we'll
637:02 - have to specify that in our dock I
637:03 - forgot but actually if somebody has
637:06 - 225 let me find this plus really quick
637:10 - uh let me filter by it because that's a
637:12 - lot faster what we actually want to do
637:15 - for the purpose of this one is we want
637:17 - to put 225 here so that when we do 225
637:20 - plus 225 divide by two it comes out to
637:23 - 225 that's just what we're going to put
637:25 - it as and there's only two people so uh
637:27 - I'm actually going to replace this I'm
637:29 - going to do replace values I'm G to say
637:31 - Plus
637:33 - with
637:34 - 225 and we'll click okay awesome we can
637:38 - unfilter these select all so we're going
637:41 - to go right up here to add column we're
637:44 - going to say custom
637:46 - column and we're going to go right over
637:48 - here actually let's make it uh
637:51 - average salary let's make it average
637:55 - salary so we're going to insert this I'm
637:58 - going to
638:00 - say parentheses and we're going to say
638:05 - plus this
638:07 - insert and close the parenthesis divided
638:09 - by two and it says no syntax errors have
638:13 - been detected let's click on okay and
638:17 - it's giving us an error so it's saying
638:19 - we cannot apply operator plus to types
638:21 - text and text which makes perfect sense
638:24 - these aren't uh numbers so let's make it
638:26 - a whole number and let's make it a whole
638:29 - number and then let's see if this will
638:32 - actually work
638:35 - no or maybe we just need to try a whole
638:37 - another one so let's try transform or
638:40 - add column custom
638:43 - column let's try this all again see if
638:45 - uh I can make it
638:47 - work
638:48 - insert do this
638:51 - one
638:53 - plus this
638:55 - one and we'll do divid by two and let's
638:58 - try this one and there we go so now
639:01 - let's get rid of this column
639:04 - columns and we can actually remove these
639:06 - ones as
639:07 - well because now we have this
639:12 - um average salary
639:16 - column which when we look at this or
639:18 - when we use this uh we can let me see if
639:21 - I can just move this way way way over
639:23 - all right I might cut because this is
639:25 - taking forever so if you take the
639:27 - average of these two numbers you'll get
639:29 - 53 if you take the average of 0 and 40
639:31 - you'll get 20 so now we have this
639:33 - average salary and again when we get to
639:35 - the actual visualization part I'll show
639:37 - you why this isn't as useful as having
639:40 - this average salary and just a reminder
639:42 - this is not perfect uh I wouldn't
639:44 - typically do this especially if I had it
639:47 - in Excel or if I was you know creating
639:49 - this survey in a different way I would
639:51 - probably have a very specific value
639:53 - where they could do it on a slider but
639:55 - this is how it is so we've at least made
639:57 - it usable or more usable in my mind and
640:00 - we have a few other things that we can
640:02 - change like what industry do you work in
640:04 - where we can break this one out so I'm
640:06 - going to go ahead and break this one out
640:07 - as well
640:09 - as this one right here which country do
640:11 - you live in I'm going to break bro both
640:13 - of those out to where it's the country
640:15 - or other I'm not going to have these
640:17 - other values although there are a lot of
640:19 - them because there's a lot of people who
640:20 - live in these different countries but we
640:23 - can't really do that super well in here
640:25 - because again the same issue kept
640:27 - happening Argentina Argentina Argentine
640:30 - a Australia so we can't normalize those
640:33 - values unless we spend just a copious
640:36 - amount of time doing that so I'm going
640:38 - to go ahead and do these I'm going to
640:40 - fast I'm going to fast speed this so it
640:42 - goes a lot faster so I'm just going to
640:44 - go silent and let this happen really
640:46 - quick and then we'll get to the end and
640:48 - we'll actually start building our
640:58 - visualizations all right so we've split
641:00 - them up and as you can see we have all
641:02 - the these options as well as other and I
641:05 - think you know there is let me tell you
641:08 - there is so much more that we could do
641:10 - with this I mean just so many other
641:13 - things but this is like what the bare
641:16 - minimum of what we need for this project
641:19 - so let's go ahead and close and apply
641:22 - this and if we need to come back at any
641:24 - point and actually fix anything or
641:26 - change anything we can so it's not like
641:28 - that's permanent um so as you can see we
641:30 - have everything over here we have all
641:32 - our data as it is transformed in here as
641:35 - well and now we can start building out
641:39 - our visualization let's go back to our
641:42 - report and let's start building
641:44 - something out all right so let's add a
641:45 - title to our
641:48 - dashboard we want to make this right at
641:50 - the
641:51 - top we call this the
641:54 - data
641:56 - professional
641:58 - survey
642:00 - breakdown and let's make make that quite
642:03 - a bit
642:04 - larger make it bold why not and we'll
642:08 - put that in the
642:09 - center and now let's um let's add some
642:13 - effects let's change that background to
642:15 - something like it's too dark something
642:19 - like this and I do not like that Boldt
642:21 - let's take that
642:22 - off there we go so something like this
642:25 - just as a quick title to what we're
642:28 - about to do what we are about to build
642:30 - so we're going to start off with the
642:31 - most simple visualizations that we're
642:33 - going to do and we'll kind of work our
642:35 - way towards kind of the harder ones so
642:37 - the first one that we're going to start
642:38 - off with is a card and the cards are
642:41 - obviously like just super super easy
642:44 - they usually just display one piece of
642:46 - information so we're going to go right
642:48 - over here to the very bottom at the
642:50 - unique ID and we're going to select it
642:54 - and we're going to say a account of
642:56 - distinct or account it doesn't matter um
642:59 - it says 630 count of unique ID now we're
643:02 - not going to keep that as is we're
643:03 - actually going to go right over here
643:05 - we're going to say rename for this
643:06 - Visual and it says count of unique ID
643:08 - but we're going to say count
643:11 - of survey takers and you can say
643:15 - whatever you want here but in in general
643:17 - that is what it is we're we're counting
643:19 - how many people um you know took this
643:22 - survey and that's just a kind of a total
643:24 - maybe I should say total amount or of
643:27 - survey takers but you can say count of
643:29 - survey takers how many people took this
643:31 - survey so let's click out of there let's
643:33 - click on card let's make it about the
643:36 - same size we're going to drag it up
643:38 - here and try to make them about the same
643:42 - we will in a little bit we'll make them
643:43 - the same size um but for this one we're
643:46 - going to look at age so we're going to
643:48 - look at current age so I'm going click
643:50 - on that and we'll say want the average
643:53 - age so our average age taker is almost
643:56 - 30 years old so let's go right over here
643:58 - we're going to say rename for this
644:00 - visual we'll say a average age of
644:05 - survey oop this might be too
644:08 - long average age of survey taker again
644:11 - name it whatever you'd like so again
644:14 - these are meant to be highlevel numbers
644:16 - so when somebody's looking at your
644:17 - dashboard they can just really quickly
644:20 - glance at this and know exactly what it
644:21 - is instead of like some of these other
644:23 - visualizations that we're about to
644:24 - create they don't really have to dig
644:26 - into it look at the x- axis the y axis
644:29 - the the different uh Legend colors and
644:31 - whatnot they can just see these high
644:33 - numbers and get a really quick glance of
644:35 - the data now let's create our first
644:37 - visualization and what we're going to do
644:39 - for that one is a clustered bar chart so
644:42 - let's go ahead and click on the
644:43 - clustered bar chart we can create as
644:45 - small or as large as we'd like and for
644:48 - this one we're going to be looking at
644:50 - the job titles now remember we kind of
644:53 - changed the job titles or you know U
644:56 - transform those if you want to say that
644:59 - so we're going to look at Job titles and
645:00 - then we're going to look at their
645:02 - average salary and if you remember we
645:04 - transformed that one as well we have a
645:07 - average salary now this one is it looks
645:09 - like a text right now so it may not work
645:11 - properly and what we're actually going
645:13 - to do is go over
645:14 - here I want to see the average
645:19 - salary so let's click on average salary
645:21 - and see if we can change this data type
645:23 - from a text to a decimal number let's
645:27 - click yes I forgot to do that when we
645:29 - were transforming it and there we go
645:31 - this is perfect um so now we can go
645:34 - back and we can select our average
645:38 - salary and as you can see it has this um
645:40 - this function symbol and so now we can
645:42 - click on it and it'll look a lot better
645:45 - and although this says average salary as
645:47 - the title it's actually doing a count or
645:49 - the sum so we can click average right
645:52 - here and what we want to do is actually
645:54 - break this down by the job title and so
645:58 - now we can see data scientists are
646:00 - making the most by far far they're
646:02 - making average of 93,000 at least from
646:05 - the survey takers that took it then we
646:07 - have our data Engineers making
646:09 - 65,000 data Architects are making 63 and
646:13 - then where the data analysts data
646:15 - analysts are right here making 55 so
646:18 - again we had 630 people take this survey
646:21 - and so the vast majority of them were
646:24 - data analysts so this one's probably the
646:25 - most accurate out of all of them and I
646:27 - actually don't like how this looks as
646:30 - the cluster bar chart let's try the
646:32 - stocked bar chart and put this as the
646:35 - legend that's more what I was going for
646:37 - I don't know I didn't want as skinny
646:40 - because when you're doing this one it
646:41 - typically they have multiple options per
646:44 - um uh x axis and so I think that's why
646:47 - it was that little skinny line but this
646:49 - one is more what I was looking for but
646:51 - let's make that smaller and let's
646:53 - definitely change that title because
646:54 - good night um this is like incredibly
646:58 - long let's go over here to this format
647:01 - visual ual we'll go to the general the
647:05 - title and we're just going to say
647:08 - average salary by job title just like
647:14 - that and this looks a lot better now
647:17 - we're not going to kind of format all
647:19 - our whole dashboard yet we're going to
647:21 - create our visualizations and then we're
647:23 - going to kind of organize everything and
647:25 - kind of play Tetris with it to make it
647:27 - look the best so we're just going to
647:30 - minimize this and put it right up here
647:33 - for now um but we will go back and kind
647:36 - of make everything look better at the
647:38 - end and actually while we're here I also
647:40 - want to change this as well so rename
647:44 - for this we're going to say job title
647:47 - Oops why did I do that
647:51 - job title and for this one we're just
647:55 - going to
647:56 - say name average
648:00 - salary there we go looks much better
648:03 - much cleaner uh took away a lot of the
648:06 - anxiety that I was feeling about two
648:08 - minutes ago when we first put that up
648:09 - there so let's go on to our second
648:11 - visualization the next one that I'm
648:13 - interested in is actually what
648:15 - programming language people were using
648:17 - the most so we have salary there's a
648:19 - thousand different things we can look at
648:20 - in here but I want to know you know what
648:23 - is people's favorite programming
648:24 - language so let's take a look at that so
648:27 - we have favorite programming language
648:29 - let's find that so we have our favorite
648:31 - programming language and we also have
648:34 - how many people actually took it or the
648:36 - unique people so right now this is
648:38 - columns we don't want that let's um
648:41 - let's do a clustered column chart click
648:44 - on this right here and it looks
648:48 - like here we go that is kind of what
648:50 - we're looking for and instead of count
648:52 - of unique ID we'll say count
648:55 - of let's do count of
648:59 - Voters and for favorite program language
649:02 - we'll
649:04 - say favorite oops favorite programming
649:07 - language and get rid of that as well and
649:10 - then we're going to go into here also
649:13 - and change the title and say favorite
649:18 - programming
649:20 - languages or favorite pro programming
649:22 - language just like this now let's make
649:24 - this a lot bigger so you can see it but
649:27 - really quickly at a glance you can see
649:30 - python is by far the most popular are
649:32 - other C++ JavaScript Java now all we're
649:34 - seeing is the count so it's all the same
649:36 - it's just blue we can see how many
649:38 - people voted for each one but if we
649:40 - wanted to break it out similar to how we
649:41 - did with the job titles we could still
649:44 - do that so all we'd have to do is break
649:46 - it out uh or bring this job title down
649:48 - to the legend and now breaks out like
649:51 - this and that's not exactly what I was
649:53 - going for I was going more for something
649:54 - like this where we can see the still the
649:57 - whole count but now we can see who is
650:00 - actually V voting for these things so
650:02 - I'm just not a huge fan of the colors
650:04 - that are pre-selected here and kind of
650:06 - the whole theme of this dashboard at the
650:09 - very end we're going to completely
650:11 - revamp this change a bunch of colors the
650:13 - background and make this look a lot
650:15 - nicer rather than just the white
650:17 - background like we have it um and so for
650:20 - now let's
650:21 - just make this a lot smaller and put it
650:25 - into this corner these will not be
650:27 - staying there but we need to we need
650:29 - room to create our next visualizations
650:31 - and just just a cleaner space to do
650:32 - things now the next thing that I really
650:34 - want to include is a way to break down
650:37 - where they're from their country because
650:39 - especially something like salary is very
650:41 - dependent on your country whereas the
650:43 - average salary in the United States for
650:44 - a data analyst may be like 60,000 in
650:48 - another country it could be 20,000 that
650:50 - could bring down the average quite a bit
650:52 - so we need a way to be able to break
650:54 - that down now we can do something like a
650:57 - filled map and there's no problem with
650:59 - that at all um
651:01 - but you know for what we're building
651:04 - what we're creating it's not probably
651:06 - going to work out the best I mean this
651:08 - looks okay we could stick it in the
651:11 - corner or something um and you can do
651:13 - that and that's perfectly fine I think
651:14 - what I'm going to do is something like a
651:16 - tree map which I don't use a lot but I
651:21 - want something where they can just click
651:22 - on it they can look at the
651:24 - values
651:26 - distinct they can look at the values and
651:28 - just click on it and it'll be right
651:30 - there for them so they don't have to
651:32 - filter it out on their own or no
651:33 - geography and look at this map they can
651:35 - just read Canada other United Kingdom
651:37 - India United States and click on that
651:39 - and so for example let's click over here
651:41 - on United States the numbers change
651:43 - quite a bit now the average salary for a
651:45 - data scientist is
651:47 - 139,000 for data analyst it's 80 and if
651:50 - we look at India you know the average
651:52 - salary for a data scientist is 68 the
651:55 - average salary is 26 for a data analyst
651:57 - that doesn't mean that they make less
651:59 - money in India that just means that the
652:01 - cost of living is probably lower in
652:03 - India therefore they don't need the
652:05 - higher US Dollars salary because again
652:07 - this was all done in US dollars so just
652:09 - something to think about uh let's click
652:11 - out of that so we'll keep that one as
652:13 - well so now let's create our next
652:14 - visualization and this is one that I do
652:16 - not get to use enough in my actual job
652:18 - so we're going to use it in this project
652:20 - um and it's going to be this gauge right
652:22 - here so let's add that one put it right
652:24 - over here we're going to add two of
652:27 - those let's just go ahead and add
652:29 - another one while we're at it because
652:31 - we're going to have them kind of like
652:32 - right here right next to each other the
652:34 - first one and these ones are really good
652:35 - for kind of looking at these kind of
652:38 - surveys and I don't get to work with
652:39 - surveys enough but we can see you know
652:41 - how happy are they in terms of work life
652:44 - balance so we can add that we're going
652:46 - to add work life balance um and right
652:48 - now it's doing a count and we don't have
652:51 - minimum or maximum values in there yet
652:53 - so it's going to look kind of weird but
652:54 - we're going to look at the average rate
652:56 - or the the average score of these then
652:59 - we're going to pull this over to the
653:00 - minimum value and we want to put that at
653:02 - the minimum and pull this over and add
653:05 - the maximum value so now it actually has
653:08 - zero to 10 and it shows that the average
653:11 - person is happy with which one was this
653:14 - their average person is happy with their
653:16 - work life balance uh they rate about a
653:19 - 5.74 overall now let's really quickly
653:23 - change the title of this because this is
653:26 - ridiculous I want to say happy with work
653:30 - life balance
653:31 - so this is their rating uh you know
653:33 - change it to whatever title you want
653:35 - that's what I'm going to do and we'll
653:36 - also do happy with their salary let's
653:40 - click on salary We'll add that to
653:43 - minimum and we'll add the maximum value
653:46 - as well to make sure that we know how to
653:48 - use
653:49 - that and then we'll take the average so
653:52 - not many people are happy with their
653:54 - salary I'm just finding out I mean this
653:55 - is a real survey this is real data so I
653:56 - mean it's h pretty interesting let's go
653:59 - to the title let's go to happy with or
654:04 - maybe it's happiness happiness with
654:07 - salary maybe that's what we should make
654:09 - it and I'm going to change that over
654:11 - here as well I think it sounds better
654:14 - some of this I've already planned out
654:15 - some I haven't this is not something
654:17 - I've planned out so uh so we're going to
654:18 - say happiness with work life balance
654:20 - happiness with salary really interesting
654:23 - um we may go back and tweak these just a
654:25 - little bit in the future but the very
654:27 - last visualization that we're going to
654:28 - do is male versus female kind to got to
654:31 - have that in there um I don't typically
654:34 - like pie charts and dut charts but uh
654:36 - you know I'm feeling I'm just feeling it
654:38 - so let's try it um and we will
654:42 - do let see let's make this larger so we
654:46 - have male
654:47 - female and what do we want to look at
654:49 - like what do we want to measure so we
654:50 - have male versus female we can measure
654:53 - anything um but maybe what we'll do is
654:56 - the average salary again I mean we've
654:58 - kind of only looked at salary once
655:01 - in this one right here um and a little
655:03 - bit of like how happy they are but we'll
655:05 - look at the average salary between males
655:08 - and females and then we'll look at not
655:12 - the current age Oops I meant average
655:16 - salary and then we'll look at the
655:19 - average and it looks like the average
655:22 - salary is actually really close versus
655:24 - males versus females 55 for female
655:28 - versus 53 for male so actually the
655:30 - females are a little bit higher
655:32 - congratulations so they're just a little
655:34 - bit higher in terms of pay so now we
655:36 - need to start organizing all of this
655:39 - cleaning it up making it look a lot
655:41 - better than it does right now it looks
655:42 - great uh you know but we can do a lot
655:46 - more with this so I'm gonna we're we're
655:47 - going to keep these or all these kind of
655:50 - over on this left hand side I'm GNA put
655:52 - this I want this up here we also need to
655:54 - change that title I want this up here um
655:58 - and again we're going to kind of change
655:59 - the theme as we go
656:02 - I I just want to format it
656:05 - right we'll have it just like this let's
656:07 - change the title of
656:10 - this let's go to title and we're going
656:13 - to say country of survey
656:16 - takers uh I'm not the the survey takers
656:20 - I'm not really stuck on that if you find
656:22 - something better you think of something
656:23 - better I would go with that but um you
656:26 - know it definitely doesn't look bad and
656:28 - where did this where did my other
656:29 - visualization go there goes um I think
656:32 - this one I want to make kind of more
656:34 - tall um so I might move it this way jeez
656:37 - this is such a I hate I hate having a
656:39 - lot of visualizations on here it just
656:41 - really is annoying to me so what we're
656:43 - going to do I think we're
656:45 - gonna step this to the side put this to
656:48 - the side as
656:50 - well I want to make it to where it's
656:54 - just okay I didn't want it to cut
656:57 - off we'll do that might make these
657:03 - um make these a little bigger actually
657:06 - so I want it to kind of match the
657:09 - size like right there I'll match this
657:13 - perfect this one I kind of want to bring
657:16 - over
657:17 - here and bring it down a little bit
657:20 - maybe something like
657:22 - this maybe I'm not sure I'm not I'm not
657:25 - sold on that um I added a few different
657:28 - visualizations that I didn't have in my
657:29 - original so now I'm kind of having to do
657:31 - this on the fly so I might fast forward
657:33 - some of the parts where I'm like really
657:35 - thinking about it or taking too much
657:36 - time on it but I'm going to bring this
657:38 - down a little bit actually because I
657:40 - don't like how close that is to um the
657:43 - the text above it but one thing we do
657:46 - need to
657:51 - do I'm going to put this up kind of like
657:54 - this I think that looks fine I think I'm
657:56 - going to put this at the very bottom so
657:58 - let's make some room for
657:59 - it all right just like that stretch it
658:03 - to the side and we'll lower
658:06 - it and I think we'll keep that as
658:10 - is kind of like this um okay there's a
658:15 - lot going on in here and there are some
658:17 - things I'm just noticing as we're
658:18 - walking through this that I kind of
658:20 - missed um like I need to change some
658:22 - titles and stuff like that so let me go
658:24 - ahead and change some of those things so
658:26 - we're going to do
658:28 - title do average
658:31 - salary by gender or by
658:36 - sex do like that average salary by sex I
658:39 - also don't like that it's in the middle
658:43 - um I don't like that it's on the outside
658:45 - I want them on the inside for this so
658:48 - let's go to the details let's go to
658:51 - inside and see if that looks any better
658:52 - oh that looks terrible um let me see if
658:56 - I can change that maybe I don't no I
658:59 - definitely want it
659:01 - um I guess we'll do outside I you can't
659:04 - even see the information oh the decimal
659:07 - is crazy long um let me go and see if I
659:10 - can change that decimal to just like a
659:11 - whole number or like
659:13 - 1.1 uh because that's a problem so maybe
659:16 - I need to go over here to the
659:20 - value all right so I think I want to
659:22 - change this one it's just not working
659:24 - out exactly how I wanted and you guys
659:26 - know if I make mistakes I'm going to
659:28 - keep it in here so you guys can see it I
659:29 - I hoped that this was going to turn out
659:31 - better but it didn't um one that I do
659:34 - want to add because this is kind of a a
659:36 - breakdown and a nice visualization I
659:39 - want to add this difficulty piece so I
659:41 - want to add this how difficult was it
659:43 - for you to break into data science let's
659:45 - get rid of these and I want to click on
659:47 - this really quickly see what it gives us
659:51 - um values okay so now this shows us
659:55 - percentages um of how easy it was again
659:58 - it's neither easy nor difficult
660:00 - difficult easy very difficult very easy
660:03 - these numbers make absolutely no sense
660:06 - we need to kind of order them a little
660:08 - better so I'm going to come over here to
660:09 - slices we have our colors over here we
660:12 - want very difficult to be like the most
660:16 - difficult um so we're going to make that
660:19 - red and then we want difficult to be
660:22 - maybe like an
660:23 - orange let see if we can find an orange
660:25 - there we have an orange this does not
660:28 - look red enough there we go oh
660:31 - no no no very difficult is red difficult
660:33 - is orange we have neither easy nor
660:36 - difficult and that's kind of a neutral
660:38 - um let's see if we have something
660:40 - neutral in
660:42 - here kind of like this yellow I don't
660:45 - know let's try it out then we have easy
660:48 - and very easy and these will be like our
660:50 - Blues so I'm going to keep that um I'm
660:54 - going to keep that kind of like a dark
660:58 - blueish and then our blue for super easy
661:02 - is just going to be like really blue U
661:07 - and that doesn't look bad the I mean
661:08 - look I'm I'm not a color person I I'm
661:11 - not great with colors and we're going to
661:13 - kind of organize this in just a little
661:14 - bit but this looks better to me um but
661:18 - we need to change up some stuff as well
661:20 - like the title need to
661:22 - do difficulty to break into
661:28 - Data there we go
661:31 - and we're also going to
661:33 - change this title right here we're just
661:36 - say
661:38 - difficulty difficulty difficulty this
661:42 - looks better to me um again not perfect
661:45 - and there's a thousand different things
661:46 - you could have done but that's just what
661:47 - we're going to do I need to go through
661:49 - here and see what I need to change so
661:51 - right off the bat I can see I need to
661:52 - change this
661:54 - um to let's see right here I'm going to
661:59 - rename this job title just like we did
662:02 - in this one right here uh count of
662:06 - Voters that's fine progr language
662:08 - breaking into difficulty happiness
662:10 - happiness average count okay okay so
662:14 - what we have here is very close to a
662:18 - finished product now it's not 100%
662:21 - complete I mean I I do want to make it
662:24 - look a little nicer rather than just the
662:26 - typical white so what we're gonna do
662:29 - we're GNA go up here we'll go to uh what
662:32 - is it View and we have all these
662:34 - different filters and we're just going
662:35 - to play around with it see if we can
662:37 - find something that we like um this
662:41 - doesn't look too bad it's not really my
662:44 - style we can do this one Frontier this
662:47 - is pretty neat I kind of am digging this
662:50 - we might come back to it I like the
662:52 - natural tones I don't know why I said
662:54 - tones like that but I did um this one's
662:58 - not bad but I don't I don't it's not
663:01 - that's not my I don't like how dark that
663:02 - is um and so maybe it's like you know we
663:08 - change like the background color of all
663:10 - of these as well as match it with um
663:13 - match it with something else whatever
663:16 - you want genuinely you customize this
663:18 - however you want I kind of like this one
663:20 - it's kind of groovy man and um it's not
663:23 - perfect by any means but what we can do
663:27 - and we can customize this current theme
663:29 - we can come in here customize this theme
663:31 - however we'd like I personally don't
663:35 - want color five which is the data
663:37 - analyst color I don't like it to I don't
663:40 - want to go go and change it because I
663:42 - don't like it but I don't really like
663:43 - that color per se you know I might want
663:46 - to choose a different color um but it
663:48 - has to be like this muted like that it
663:50 - has a style to it so you can come in
663:52 - here and you can customize this and make
663:55 - it however you'd like and and really
663:58 - mess around with it play play around
664:00 - with it for me uh I'm just going to keep
664:02 - it how it is because I don't really want
664:04 - to mess with it and break it or anything
664:05 - like that so U let me just put that up
664:09 - just a tiny bit so this is it this is
664:12 - the project I hope that it was helpful
664:15 - um I am not joking when I say that I'm
664:18 - because I'm gonna do a different project
664:20 - I'm gonna go really in depth in another
664:22 - project it's probably gonna be like a
664:23 - two-hour project it's going to be crazy
664:25 - long um well for a YouTube video but I
664:28 - can see doing thousand different things
664:31 - with this data creating a really great
664:33 - dashboard really cleaning the data which
664:36 - is a large part of of actually doing
664:38 - this and we didn't do much data cleaning
664:40 - at all there's just so much you can do
664:42 - with this and so really dig into this
664:44 - see what you like see what you don't
664:45 - like see what you want to clean what you
664:47 - don't want to clean you could put it in
664:48 - SQL you could put it in um Excel and
664:51 - just and just standardize the data to
664:55 - make it a lot more usable do whatever
664:56 - you want with it I mean I I took this
664:58 - survey for you guys that we could use it
665:01 - so go out and use it and make the best
665:04 - dashboard that you can possibly do so I
665:06 - hope that this was helpful I hope that
665:08 - you enjoyed this thank you so much for
665:10 - watching this video If you like this
665:13 - thank you so much for watching if you
665:15 - like this video be sure to like And
665:17 - subscribe below and I'll see you in the
665:18 - next
665:20 - [Music]
665:29 - video
665:31 - what's going on everybody welcome back
665:32 - to another video today we're going to be
665:34 - starting our Python tutorial
665:39 - [Music]
665:41 - series now I am extremely excited for
665:44 - this series we're going to be walking
665:45 - through all the things that you need to
665:46 - know to get started in Python we'll be
665:48 - looking at variables data types for
665:50 - Loops y Loops operators and a ton more
665:53 - after this beginner series we're going
665:55 - to be going into another set of Series
665:56 - where we look at pandas mat plat lib
665:58 - Seaborn web scraping and more now in
666:01 - this video we're just going to be
666:02 - setting up our environment to where we
666:03 - can learn python in future videos in
666:05 - this series we're going to be using
666:06 - jupyter notebooks for all of our
666:08 - tutorials because I feel like it's a
666:09 - really great place to learn the basics
666:11 - but then in future videos I'll show you
666:12 - different idees that you can use for
666:14 - your python code I genuinely cannot wait
666:16 - to get started on this series I
666:17 - absolutely love python so without
666:19 - further Ado let's jump on my screen I'm
666:21 - going to show you how to install jupyter
666:22 - notebooks all right so let's get started
666:24 - by downloading anaconda anaconda is an
666:26 - open- Source distribution of python and
666:28 - R products so within Anaconda is our
666:31 - Jupiter notebooks as well as a lot of
666:33 - other things but we're going to be using
666:34 - it for our Jupiter notebooks so let's go
666:36 - right down here and if I hit download
666:38 - it's going to download for me because
666:39 - I'm on Windows but if you want
666:42 - additional installers if you're running
666:43 - on Mac or Linux then you can get those
666:45 - all right here now if you are running on
666:48 - Windows just make sure to check your
666:50 - system to see if it's a 32bit or a 64
666:52 - you can go into your about in your
666:54 - system settings to find that information
666:56 - I'm going to click on this 64
666:58 - bit it's going to pop up on my screen
667:01 - right here and I'm going to click
667:03 - save now it's going to start downloading
667:05 - it it says it could take a little while
667:07 - but honestly it's going to take probably
667:09 - about 2 to three minutes and then we'll
667:10 - get going now that it's done I'm just
667:12 - going to click on it and it's going to
667:14 - pull up this window right here we are
667:16 - just going to click next because we want
667:18 - to install it this is our license
667:20 - agreement you can read through this if
667:22 - you would like I will not I'm just going
667:23 - to click I agree now we can select our
667:27 - installation type and you can either
667:28 - select it for just me or if you have
667:30 - multiple admin or users on one laptop
667:33 - you can do that as well for me it's just
667:35 - me so I'm going to use this one as it
667:38 - recommends now it's going to show you
667:39 - where it's installing it on your
667:41 - computer this is the actual file path
667:44 - it's going to take about 3.5 gigs of
667:46 - space I have plenty of space but make
667:48 - sure you have enough space and then once
667:50 - you do you can come right over here to
667:52 - next and now we can do some Advanced
667:55 - options we can add Anaconda 3 to my path
667:58 - environment variable
668:00 - and when you're using python you
668:02 - typically have a default path with
668:04 - whatever python IDE or notebook that
668:07 - you're using I use a lot of Visual
668:09 - Studio code so if I do this I'm worried
668:12 - it might mess something up so I am not
668:13 - going to do this it also says it doesn't
668:15 - recommend it again messing with these
668:17 - paths is kind of something that you
668:18 - might want to do once you know more
668:19 - about python so I don't really recommend
668:22 - you having this checked we can also
668:24 - register in AA 3 as my default python
668:27 - 3.9 you can do this one and I'm to keep
668:30 - it this way just so I have the exact
668:31 - same settings as you do so let's go
668:33 - ahead and click install and now it is
668:36 - going to actually install this on your
668:38 - computer now once that's complete we can
668:40 - hit next and now we're going to hit next
668:43 - again and finally we're going to hit
668:45 - finish but if you want to you can have
668:48 - this tutorial and this getting started
668:50 - with Anaconda I don't want either of
668:52 - them because I don't need them but if
668:54 - you would like to have those keep those
668:56 - checked and you can get those let's
668:57 - click finish now let's go down and and
668:59 - we're going to search for Anaconda and
669:02 - it'll say Anaconda Navigator and we're
669:05 - going to click on that and it should
669:07 - open up for us so this is what you
669:09 - should be seeing on your screen this is
669:11 - the Anaconda Navigator and this is where
669:14 - that distribution of python and R is
669:16 - going to be so we have a lot of
669:18 - different options in here and some of
669:19 - them may look familiar we have things
669:21 - like Visual Studio code spider our
669:24 - studio and then right up here we have
669:27 - our Jupiter notebooks and this is what
669:29 - work we're going to be using throughout
669:30 - our tutorials so let's go ahead and
669:32 - click on launch and this is what should
669:34 - kind of pop up on your screen now I've
669:36 - been using this a lot um so I have a ton
669:38 - of notebooks and files in here but if
669:42 - you are just now seeing this it might be
669:44 - completely blank or just have some you
669:46 - know default folders in here but this is
669:49 - where we're going to open up a new
669:50 - Jupiter notebook where we can write code
669:52 - and all the things that we're going to
669:53 - be learning in future tutorials and you
669:56 - can use this area to save things and
669:58 - create folders and organize everything
670:00 - if you already have some notebooks from
670:02 - previous projects or something you can
670:04 - upload them here but what we're going to
670:06 - do is go right to this new we're going
670:08 - to click on the drop down and we're
670:09 - going to open up a Python 3 kernel and
670:12 - so we're going to open this up right
670:13 - here now right here is where we're going
670:15 - to be spending 99% of our time in future
670:18 - videos this is where we're going to
670:20 - write all of our code so right here is a
670:22 - cell and this is where we can type
670:24 - things so I can say print I can do the
670:27 - famous hello world
670:30 - and then I'll run that by clicking shift
670:32 - enter and this is where all of our code
670:34 - is going to go these are called cells so
670:36 - each one of these are a cell and we have
670:38 - a ton of stuff up here and I'm going to
670:40 - get to that in just a second one thing I
670:42 - wanted to show you is that you don't
670:43 - only have to write code here you can
670:45 - also do something called markdown and so
670:47 - markdown is its own kind of you could
670:49 - say language but um it's just a
670:51 - different way of writing especially
670:52 - within a notebook so all we're going to
670:54 - do is do this little hashtag and
670:57 - actually I think it's a pound sign but
670:58 - I'm G to call it hashtag we're going to
671:00 - do that and we're going to say first
671:02 - notebook and then if I run that we have
671:04 - our first notebook and we can make
671:05 - little comments and little notes like
671:07 - that that don't actually run any code
671:09 - they just kind of organize things for us
671:11 - and I'm going to do that in a lot of our
671:12 - future videos so just want to show you
671:14 - how to do that now let's look right up
671:16 - here a lot of these things are pretty
671:17 - important uh one of the first things
671:19 - that's really important is actually
671:20 - saving this so let's say we wanted to
671:23 - change the title to I'm going to do a AA
671:26 - because I want it to be at the beginning
671:27 - um so I can show you this I'm do AA a
671:30 - new notebook and I'm going to rename it
671:33 - and then I'm going to save that so if I
671:35 - go right back over here you can see AAA
671:38 - new notebook that green means that it's
671:41 - currently running and when I say running
671:44 - I mean right up here and if we wanted to
671:46 - we go ahead and shut that down which
671:48 - means it wouldn't run the code anymore
671:50 - and then we'd have to run up a new
671:51 - cluster uh so let's go ahead and do that
671:53 - I didn't plan on doing that but let's do
671:55 - it so we have no notebooks running and
671:58 - right here it says we have a dead kernel
671:59 - so this was our Python 3 kernel and now
672:02 - since I stopped it it's no longer
672:04 - processing anything so let's go ahead
672:06 - and say try restarting
672:08 - now and it says kernel is ready so it's
672:12 - back up and running and we're good to go
672:13 - the next thing is this button right here
672:15 - now this is an insert cell below so if I
672:18 - have a lot of code I know I'm going to
672:19 - be writing I can click a lot of that and
672:22 - I often do that because I just don't
672:24 - like having to do that all the time so I
672:26 - make a bunch of cells just so I can use
672:28 - them you can delete cells so say we have
672:30 - some code here we'll say here and we
672:34 - have code here and then we have this
672:36 - empty cell right here we can just get
672:38 - rid of that by doing this cut selected
672:40 - cells we can also copy selected cells so
672:43 - if I hit copy selected cells and I can
672:45 - go right here and say paste selected
672:48 - cells and as you can see it pasted that
672:51 - exact same cell you can also move this
672:53 - up and down so I can actually take this
672:55 - one and say I wanted it in this location
672:58 - I can take this cell and move it up or I
673:00 - can move it down and that's just an easy
673:02 - way to kind of organize it instead of
673:04 - having to like copy this and moving it
673:06 - right down here and pasting it you can
673:08 - just take this cell and move it up which
673:10 - is really nice now earlier when I ran
673:12 - this code right here I hit shift enter
673:14 - you can also run and it'll run the cell
673:17 - below so you can hit run and it works
673:19 - properly if you're running a script and
673:21 - it's taking forever and it's not working
673:23 - properly at least it's you don't think
673:25 - it's working properly you can stop that
673:27 - by doing this interrupt the kernel right
673:29 - here and anything you're trying to do
673:30 - within this kernel if it's just not
673:32 - working properly it'll stop it you can
673:34 - restart it then you can try fixing your
673:36 - code you can also hit this button if you
673:38 - want to restart your kernel and this
673:40 - button if you want to restart the kernel
673:42 - and then rerun the entire notebook as we
673:44 - talked about just a second ago we have
673:46 - our code and our markdown code we're not
673:48 - going to talk about either of these
673:50 - because we're not going to use that
673:51 - throughout the entire series the next
673:53 - thing I want to show you is right up
673:54 - here if you open this file we can create
673:57 - a new notebook we can open an existing
673:59 - notebook we can copy it save it rename
674:02 - it all that good stuff we can also edit
674:04 - it so a lot of these things that we were
674:06 - talking about you can cut the cells and
674:07 - copy the cells using these shortcuts if
674:09 - you would like to we also go to view and
674:11 - you can toggle a lot of these things if
674:13 - you would like to which just means it'll
674:14 - show it or not show it depending on what
674:16 - you want so if we toggle this toolbar
674:18 - it'll take away the toolbar for us or if
674:21 - we go back and we toggle the toolbar we
674:23 - can bring it back we can also insert a
674:26 - few different things like inserting a
674:27 - cell above or a cell below so instead of
674:29 - saying This plus button you can just say
674:31 - A or B adding above or below we also
674:34 - have the cell in which we can run our
674:36 - cells or run all of them or all above or
674:39 - all below and then we have our kernels
674:41 - right here which we were talking about
674:42 - earlier where we can interrupt it and
674:44 - restart those there are widgets we're
674:47 - not going to be looking at any widgets
674:48 - in this series but if it's something
674:50 - you're interested in you can definitely
674:51 - do that and then we have help so if you
674:53 - are looking for some help on any of
674:55 - these things especially some of these
674:56 - references which are really nice you can
674:58 - use those and you can also edit your own
675:00 - keyboard shortcuts and now that we
675:02 - walked through all of that you now have
675:03 - anacon and jupyter notebooks installed
675:05 - on your computer in future videos this
675:07 - is where we're going to be writing all
675:08 - of our python code so be sure to check
675:10 - those out so we can learn python
675:11 - together thank you guys so much for
675:12 - watching I hope you were able to get
675:14 - everything installed correctly I am
675:16 - super excited for this series ahead of
675:17 - us if you like this video be sure to
675:19 - like And subscribe below and I will see
675:21 - you in the next
675:23 - [Music]
675:28 - video
675:31 - [Music]
675:34 - hello everybody today we're going to be
675:35 - learning about variables in Python a
675:38 - variable is basically just a container
675:40 - for storing data values so you'll take a
675:42 - value like a number or a string you can
675:45 - assign it to a variable and then the
675:47 - variable will carry and contain whatever
675:50 - you put into it so for example let's go
675:52 - right over here we're going to say x and
675:54 - this is going to be our variable we're
675:56 - going to say is equal to now we can
675:58 - assign the value to it so let's say I
676:02 - want to put
676:03 - 22 x is now equal to 22 so we won't have
676:07 - to write out the number 22 in later
676:09 - scripts that we write we can just say x
676:11 - because X is equal to 22 it now contains
676:15 - that number so now we can hit enter and
676:17 - say print we do an open parentheses and
676:20 - we'll say x now I'm going to hit shift
676:23 - enter and now it prints out that 22
676:26 - because we are printing x and x is equal
676:29 - 22 this is our value and this is our
676:32 - variable one really great thing about
676:33 - variables is that it assigns its own
676:35 - data type it's going to automatically do
676:37 - this so we didn't have to go and tell X
676:39 - that it's an integer it just
676:41 - automatically knew that 22 is a number
676:44 - so we can check that by saying type and
676:46 - then open parenthesis and writing X and
676:50 - we'll do shift enter again and this says
676:52 - that X is an integer type now we only
676:55 - assigned an integer to X let's try
676:58 - assigning a string value or some text to
677:00 - a variable so we'll say Y is equal to uh
677:04 - let's say mint chocolate chip I'm
677:07 - feeling some ice cream today so we'll
677:10 - say mint chocolate chip now if we print
677:13 - that again we'll do print open
677:15 - parenthesis Y and do shift enter it'll
677:19 - print mint chocolate chip and if we look
677:21 - at the type we can see that the type is
677:24 - a string this time and not an integer
677:27 - now again we did not tell it that X was
677:29 - an integer and Y was a string it just
677:32 - automatically knew this let's go up here
677:34 - really quickly we're going to add
677:36 - several rows in here because we're about
677:37 - to write a lot of different variables
677:40 - and really learn in- depth how to use
677:42 - variables the next thing to know about
677:44 - variables is that you can overwrite
677:46 - previous variables right now we have
677:48 - mint chocolate chip and that is assigned
677:50 - to the variable y so if I go down here I
677:53 - say print y I hit shift enter it's going
677:56 - to print out mint chocolate chip but
677:59 - if I go right above it I say Y is equal
678:02 - to and let's say chocolate if I print
678:06 - that out it's now going to say chocolate
678:08 - whereas up here I'm reassigning it to Y
678:11 - it's still going to say mint chocolate
678:13 - chip so if I come right down here and I
678:17 - copy this and I'm going to paste this
678:20 - right here initially it is going to
678:22 - assign y to Chocolate but then right
678:24 - here it will automatically overwrite y
678:27 - as mint chocolate chip and when we hit
678:29 - shift enter it's going to show mint
678:31 - chocolate chip variables are also case
678:34 - sensitive so if I come up here and I say
678:37 - a capital Y this is a lowercase Y and
678:39 - this is a capital Y it is going to print
678:41 - out the correct one instead of mint
678:44 - chocolate chip and then if I go down
678:46 - here to the print and I type the capital
678:49 - Y it will give us the mint chocolate
678:51 - chip up till now we've only assigned one
678:54 - value to one variable but we can
678:56 - actually assign multiple values to
678:58 - multiple variables so let's do X comma y
679:03 - comma Z is equal to and now we can
679:07 - assign multiple values to all of those
679:10 - so we can say
679:13 - chocolate and then we'll do a comma oops
679:16 - a comma then we can say vanilla and then
679:21 - we'll do another comma and we'll say
679:23 - rocky road now this is going to assign
679:27 - chocolate to X
679:29 - vanilla to Y and Rocky Road to Z so what
679:32 - we can do is we'll say
679:35 - print and we'll go print print print and
679:39 - we'll say X Y and Z so it prints out
679:43 - chocolate vanilla and rocky road and
679:46 - these are our three different values we
679:48 - can also assign multiple variables to
679:51 - one value and we can do this by saying X
679:54 - is equal to Y is equal to Z is equal to
679:57 - and we can put whatever we would like
679:59 - let's do root beer float then we'll come
680:03 - back up here we'll copy this and let's
680:07 - print off our X our Y and Z and they are
680:10 - all the exact same now so far we've
680:12 - really only looked at integers and
680:14 - strings but you can assign things like
680:16 - lists dictionaries tupal and sets all to
680:20 - variables as well so let's go right down
680:22 - here so let's create our very first list
680:24 - I'm going to say icore cream is equal to
680:28 - and that is our variable right there the
680:30 - ice cream is our variable so now we're
680:32 - going to do an Open Bracket like this
680:35 - and we're going to come up here and copy
680:37 - all of these values and we're going to
680:39 - stick it within our list so now within
680:42 - ice cream we have three string values
680:45 - chocolate vanilla and rocky road all
680:48 - within this list so what we can do is we
680:51 - can say x comma y comma Z is equal to
680:56 - icore cream so so now these three values
680:59 - chocolate vanilla and rocky road will be
681:02 - assigned to these three variables X Y
681:04 - and Z and we can copy this print up
681:08 - here and we'll hit shift enter and now
681:12 - the X Y and Z all were assigned these
681:15 - values of chocolate vanilla and rocky
681:17 - road now something that we just did
681:18 - which is really important or something
681:20 - that you really need to consider is how
681:22 - you name your variables so right here we
681:25 - have ice cream now this to me is exactly
681:28 - how I usually write my variables but
681:31 - there are many different ways that you
681:32 - can write your variables so let's take a
681:34 - look at that really quickly and let's
681:36 - add just a few more because I have a
681:38 - feeling we're going to go a little bit
681:39 - longer than what we have so there are a
681:41 - few best practices for naming variables
681:44 - first I'm going to show you kind of what
681:45 - a lot of people will do I'll show you
681:48 - some good practices and I'm going to
681:49 - show you some bad practices as well that
681:51 - you should avoid doing the first thing
681:53 - that we're going to look at is something
681:54 - called camel case and let's say we want
681:57 - to name it t test variable case oops
682:02 - case now if we have a test variable case
682:05 - the camel case is going to look like
682:07 - this we'll have lowercase test and then
682:09 - we'll have uppercase variable and
682:12 - uppercase case is equal to this is what
682:16 - this variable is going to look like and
682:18 - we can assign it a nilla
682:21 - swirl and this is what your camel case
682:24 - will look like it's going to be
682:25 - lowercase and then all the rest of those
682:28 - uh compound words or however you want to
682:30 - say that these letters are going to be
682:32 - capitalized to kind of separate where
682:33 - the words end and begin let's go right
682:36 - down here we're going to copy this the
682:38 - next one is called Pascal case so Pascal
682:42 - case is going to look just a little bit
682:43 - different instead of the lowercase at
682:46 - test it's going to be a capital T in
682:48 - test so test variable case again this is
682:52 - a very similar way of writing it very
682:54 - similar to camel case U but just a
682:56 - capital at the beginning now let's look
682:59 - at the last one and this one is my
683:01 - personal favorite this one is going to
683:02 - be the snake case now this one is quite
683:06 - a bit different in the fact that you
683:08 - don't use any capital letters and you
683:10 - separate everything using underscore so
683:13 - we're going to write
683:14 - testore variable underscore case now
683:19 - typically let me have them all in there
683:21 - typically these are the best practices
683:23 - these are what you typically want to do
683:26 - but probably the best one to to use is
683:29 - this snake case right here what a lot of
683:32 - people say is that it improves
683:34 - readability if you take a look at either
683:36 - the camel case or the Pascal case which
683:38 - you will see people do it's not as easy
683:41 - to distinguish exactly what it says and
683:43 - the name of a variable is important
683:46 - because you can gain information from it
683:48 - if people name them appropriately so
683:50 - when I'm naming variables I usually
683:52 - write it in snake case because I just
683:53 - find it a lot easier to read because
683:56 - each word is broken up by this
683:57 - underscore score so now let's look at
683:59 - some good variable names these are all
684:01 - ones that you can use or could use let's
684:04 - do something like test VAR so test VAR
684:07 - is completely appropriate we can also do
684:09 - something like testore VAR oops
684:13 - underscore we could do underscore test
684:17 - underscore VAR you'll see that often as
684:20 - well well people will start it with an
684:22 - underscore you can do test
684:27 - bar capital T oops capital T capital V
684:33 - in test VAR or you could even do
684:35 - something like test VAR two now adding a
684:40 - number to your variable is not
684:41 - inherently a Bad Thing usually it's
684:43 - semif fround upon but there are
684:45 - definitely some use cases where you can
684:47 - use it but one thing that you cannot do
684:50 - is do something
684:52 - like putting the two at the front if you
684:55 - put the two at the front it no longer
684:57 - works it won't run properly at all so
684:59 - we're going to take that out so we can't
685:01 - do that so I'm going to use this as an
685:03 - example of what you should not do you
685:05 - also can't use a dash so something like
685:08 - test- var2 that doesn't work either and
685:12 - you also can't use something like a
685:16 - space or a comma or really any kind of
685:20 - symbol like a period or a backslash or
685:23 - equal sign none of those things will
685:25 - work within your variable now another
685:27 - thing that you can do within your
685:28 - variable is use the plus sign so let's
685:31 - assign this we'll say x is equal to and
685:35 - we'll do a string we'll say ice
685:38 - cream is my
685:40 - favorite and then we'll do a plus sign
685:44 - and we'll say period now what this will
685:47 - do is it will literally add these two
685:50 - strings together so let's do print and
685:53 - we'll do X so now it says ice cream is
685:57 - my favorite one thing that we cannot do
686:00 - in a variable is we cannot add a string
686:02 - and a number or an integer so we can't
686:05 - do ice cream as my favorite two if we
686:08 - try to do that it will give us this
686:09 - error right here so in this error it's
686:11 - saying you can only concatenate a string
686:14 - not an integer to a string so only a
686:16 - string plus a string for this example
686:18 - you can also do and we'll say x is equal
686:22 - to or we'll say
686:24 - y we'll say Y is equal
686:27 - to 3 + 2 and it should output five
686:32 - because you can also do an integer and
686:34 - an integer now so far we've only been
686:35 - outputting one variable in the print
686:38 - statement but you can actually add
686:40 - multiple variables within a print
686:42 - statement so let's go right down here
686:44 - we're going to say let's give it some
686:46 - more right there so we'll say x is equal
686:49 - to ice
686:51 - cream and we'll say Y is equal
686:56 - to is and then the last one Z is equal
687:01 - to my favorite and we'll do a period at
687:04 - the end now we can go to the bottom and
687:06 - we can say print x + y + C and when we
687:12 - enter
687:14 - that and when we run and when we run
687:16 - that we get ice cream is my favorite now
687:18 - we can actually add a space before is a
687:21 - space before my and when we hit shift
687:23 - enter it says ice cream is my favorite
687:26 - you can also do this exact same thing
687:28 - with numbers as well so we'll say x = to
687:32 - 1 2 and what Z is equal to three so this
687:36 - should equal six now one thing that we
687:39 - tried to do was assign to one variable a
687:41 - string plus an integer and that did not
687:44 - work but what you can do is you can take
687:46 - something like this and you can say ice
687:50 - cream and we'll get rid of this one and
687:53 - we'll get rid of the Z now saying plus
687:55 - is actually not going to work let's try
687:57 - running this
687:58 - so again we can't concatenate these but
688:01 - what we can do in the print statement is
688:02 - we can separate it by a comma so when we
688:05 - add this comma it should work properly
688:07 - let's hit enter and it says ice cream 2
688:10 - again this makes no sense but you are
688:12 - able to combine a string and an integer
688:15 - separating by a comma now this is the
688:17 - meat and potatoes of variables there are
688:19 - some other things as well but some of
688:21 - those things are a little bit more
688:22 - advanced and not something I wanted to
688:23 - cover in this tutorial although we may
688:25 - be looking at some of those things in
688:26 - future tutorials
688:28 - but this is definitely the basics what
688:30 - you really really need to know about
688:32 - variables I hope that this video was
688:34 - helpful if it was be sure to like And
688:36 - subscribe below and I will see you in
688:38 - the next
688:39 - [Music]
688:50 - video hello everybody today we're going
688:52 - to be talking about data types in Python
688:54 - data types are the classification of the
688:56 - data that you are storing these
688:58 - classifications tell you what operations
689:00 - can be performed on your data we're
689:02 - going to be looking at the main data
689:03 - types within python including numeric
689:06 - sequence type set Boolean and dictionary
689:09 - so let's get started actually writing
689:10 - some of this out and first let's look at
689:12 - numeric there are three different types
689:14 - of numeric data types we have integers
689:17 - float and complex numbers let's take a
689:19 - look at integers an integer is basically
689:21 - just a whole number whether it's
689:23 - positive or negative so an integer could
689:25 - be a 12 and we can check that by saying
689:28 - type we'll do an open parenthesis and a
689:31 - Clos parenthesis and if we say the type
689:34 - of 12 it's going to give us an integer
689:36 - or if we say a -2 that is also an
689:38 - integer we can also perform basic
689:40 - calculations like -2 + 100 and that'll
689:44 - tell us it is also an integer so whether
689:46 - it's just a static value or you're
689:48 - performing an operation on it it's still
689:50 - going to be that data type if those
689:52 - numbers are whole numbers whether
689:53 - negative or positive now let's take this
689:55 - exact one and let's say
689:58 - 12 and we'll do+
690:01 - 10.25 when we run this it's no longer
690:03 - going to be a whole number it'll now be
690:05 - a float so let's check this and now this
690:08 - is a float type because is no longer a
690:10 - whole number it's now a decimal number
690:12 - and the last data type within the
690:13 - numeric data type is called complex
690:16 - let's copy this right down here now
690:18 - personally this is not one that I've
690:19 - used almost ever but it is one just
690:22 - worth noting so you can do 12 plus and
690:25 - let's say 3 J
690:28 - and if we do this it's going to give us
690:30 - a complex the complex data type is used
690:32 - for imaginary numbers for me it's not
690:35 - often used but if you do use it J is
690:38 - used as that imaginary number if you use
690:41 - something like C or any other number
690:44 - it's going to give you an error J is the
690:47 - only one that will work with it now
690:48 - let's take a look at Boolean values so
690:51 - we'll say Boolean the Boolean data type
690:54 - only has two built-in values either true
690:57 - or false so let's go right down here and
690:59 - say type
691:01 - true and when we run this it'll say bu
691:04 - which stands for Boolean we can do the
691:06 - exact same thing with false that is also
691:09 - Boolean and this can be used with
691:11 - something like a comparison operator so
691:13 - let's say 1 is greater than 5 and let's
691:18 - check this this is giving us a Boolean
691:20 - because it's telling us whether one is
691:22 - greater than five let's bring that right
691:24 - down here this will give us a false so
691:26 - it's telling us that one is not greater
691:29 - than five and just as we got a false we
691:31 - can say 1 is equal to one and this
691:33 - should give us a true so now let's take
691:35 - a look at our sequence type data types
691:38 - and that includes strings lists and
691:40 - tupal let's start off by looking at
691:42 - strings in Python strings are arrays of
691:45 - bytes representing Unicode characters
691:48 - when you're using strings you put them
691:49 - either in a single quote a double quote
691:51 - or a trible quote I call them
691:52 - apostrophes it's just what I was raised
691:55 - to call them but most people who use
691:56 - Python call them quotes so right here we
691:58 - have a single quote and that works well
692:02 - we can do a double quote and that works
692:06 - also and as you can see they are the
692:08 - exact same output and then we have a
692:10 - triple quote just like this and this is
692:13 - called a multi-line so we can write on
692:15 - multiple lines here so let's write a
692:17 - nice little poem so we'll say the ice
692:20 - cream vanquished my longing for
692:25 - sweets upon this diet
692:28 - I look
692:29 - away it no longer
692:32 - exists on this day and then if we run
692:35 - that it's going to look a little bit
692:37 - weird it's basically giving us the raw
692:40 - text which is completely fine but let's
692:42 - call this a
692:45 - multi-line and we're going to call this
692:47 - a variable multi-line and we're going to
692:49 - come down here and say
692:51 - print and before I run this I have to
692:54 - make sure that this is Ran So now let's
692:57 - print out our multi-line and now we have
693:00 - our nice little poem right down here now
693:02 - something to know about these single and
693:03 - double quotes is how they're actually
693:05 - used so if we use a single quote and we
693:08 - say I've always wanted to eat a gallon
693:13 - of ice cream and then we do an
693:15 - apostrophe at the end obviously
693:17 - something went wrong here what went
693:20 - wrong is when you use a single quote and
693:22 - then within your text within your
693:24 - sentence you have another apostrophe
693:26 - it's going to give you an error so what
693:28 - we want to do is whenever we have a
693:31 - quote within it we need to use a double
693:34 - quote these double quotes will negate
693:37 - any single quotes that you have within
693:39 - your statement they won't however negate
693:41 - another double quote so you need to make
693:43 - sure you aren't using double quotes
693:45 - within your sentence if you want to do
693:46 - something like that you need to use the
693:48 - triple quotes like we did above so we
693:50 - can do double double and then let's
693:54 - paste this within
693:56 - it
693:58 - and anything you do Within These triple
694:00 - quotes will be completely fine as long
694:02 - as you don't do triple quotes within
694:04 - your triple quotes we'll say this is
694:06 - wrong so even though it's between these
694:08 - two triple quotes it doesn't work
694:10 - exactly again you just have to
694:12 - understand how that works you have to
694:14 - use the proper apostrophes or quotes
694:16 - within your string and just to check
694:18 - this we can always say here's our
694:20 - multi-line we can always say type of
694:25 - multi-line and that is still a string
694:28 - one really important thing to know about
694:30 - strings is that they can be indexed
694:33 - indexing means that you can search
694:35 - within it and that index starts at zero
694:37 - so let's go ahead and create a variable
694:39 - and we'll just say a is equal to and
694:42 - let's do the all popular hello world
694:46 - let's run this and now when we print the
694:49 - string we can say a and we're going to
694:51 - do a bracket and now we can search
694:53 - throughout our string using the index so
694:56 - all you have to do is do a colon and we
694:58 - can say five what this is going to do is
695:01 - is going to say zero position zero all
695:03 - the way up to five which should give us
695:05 - the whole hello I believe let's run this
695:08 - and it's giving us the first five
695:09 - positions of this string we can also get
695:12 - rid of the colon and just say something
695:14 - like five and then when we run this it's
695:18 - actually going to give us position five
695:20 - so this is 0o 1 2 3 4 and then five is
695:24 - the space let's do six so we can see the
695:27 - ACT ual letter and that is our w we can
695:29 - also use a negative when we're indexing
695:31 - through our string so we could say -3
695:35 - and it'll give us the L because it's NE
695:37 - -1 2 and three we can also specify a
695:40 - range if we don't want to use the
695:41 - default of zero so before we did 0 to
695:44 - five and it started at zero because that
695:46 - was our default but we could also do two
695:48 - to five let's run this and now we go
695:51 - position 0 1 and then we start at 2 L L
695:56 - now we can also also multiply strings
695:58 - and we have this a hello world so we can
696:00 - do a * 3 and if we run this it'll give
696:05 - us hello world three times and we can
696:07 - also do a plus a and that is Hello World
696:12 - hello world now let's go down here and
696:14 - take a look at lists lists are really
696:16 - fantastic because they store multiple
696:18 - values the string was stored as one
696:21 - value multiple characters but a list can
696:23 - store multiple separate values so let's
696:26 - create our very first list list we'll
696:28 - say list really quickly and then we'll
696:31 - put a bracket and a bracket means this
696:33 - is going to be a list there are other
696:35 - ones like a squiggly bracket and a
696:38 - parenthesis these denote that they are
696:40 - different types of data types the
696:42 - bracket is what makes a list list so to
696:44 - keep it super simple we'll say one two
696:46 - three and we'll run this and now we have
696:49 - a list that has three separate values in
696:51 - it the comma in our list denotes that
696:53 - they are separate values and a list is
696:55 - indexed just like a string is indexed so
696:58 - position zero is this one position one
697:01 - is the two and position two is the three
697:04 - now when we made this list we didn't
697:05 - have to use any quotes because these are
697:07 - numbers but if we wanted to create a
697:09 - list and we wanted to add string values
697:12 - we have to do it with our quotes so
697:14 - we'll say quote cookie
697:17 - dough then we'll do a comma to separate
697:19 - the value and then we'll say
697:22 - strawberry and then we'll do one more
697:24 - and this will just be chocolate and when
697:27 - we run this we have all three of these
697:29 - values stored in our list now one of the
697:31 - best things about list is you can have
697:33 - any data type within them they don't
697:35 - just have to be numbers or strings you
697:37 - can basically put anything you want in
697:39 - there so let's create a new list and
697:42 - let's say
697:44 - vanilla and then we'll do three and then
697:47 - we'll add a list within a list and we'll
697:50 - say
697:52 - Scoops comma spoon and then we'll get
697:56 - out of that list and then we'll add
697:58 - another value of true for Boolean and
698:02 - now we can hit shift enter and we just
698:04 - created a list with several different
698:06 - data types within one list now let's
698:09 - take this one list right here with all
698:11 - of our different ice cream flavors we'll
698:13 - say icore cream is equal to this list
698:17 - now one thing that's really great about
698:19 - lists is that they are changeable that
698:21 - means we can change the data in here we
698:23 - can also add and remove items from the
698:25 - list after we've already created it so
698:28 - let's go and take ice cream and we'll
698:30 - say ice cream. append and this is going
698:33 - to append it to the very end of the list
698:36 - we do an open parenthesis and let's say
698:38 - salted caramel now when we run this and
698:42 - we call it just like this it's going to
698:45 - take this list add salted caramel to the
698:48 - end and we'll print it off and as you
698:51 - can see it was added to the list and
698:53 - just like I said before let me go down
698:55 - here we can also change things from this
698:57 - list so let's say ice cream and then we
699:00 - need to look at the indexed position so
699:02 - we're going to say zero and that's going
699:04 - to be this cookie d right here we can
699:06 - say that is equal to so we can now
699:08 - change that value so let's call that
699:11 - butter econ and now when we call
699:15 - it we can now see that the cookie dough
699:18 - was changed to butter peacon another
699:20 - thing that you saw just a little bit ago
699:22 - is something called a list within a list
699:24 - basically a nested list so we had Scoops
699:28 - spoon true let's give this and we'll say
699:31 - nested uncore list is equal to now when
699:35 - we run this we now have this nested list
699:38 - so if we look at the index and we say
699:41 - zero we'll get vanilla if we say two
699:45 - we'll get Scoops and spoons now since we
699:47 - have a list within a list we can also
699:49 - look at the index of that nested list so
699:52 - let's now say one and that should give
699:55 - us just spoon and you can go on and on
699:58 - and on with this you can do lists within
700:00 - lists within lists and all of them will
700:02 - have indexing that you can call now
700:04 - let's go down here and start taking a
700:06 - look at tupal so a list and a tupal are
700:08 - actually quite similar but the biggest
700:11 - difference between a list and a tuple is
700:13 - that a tupal is something called
700:14 - immutable it means it cannot be modified
700:16 - or changed after it's created let's go
700:19 - right up here we're going to say
700:22 - Tuple and let's write our very first
700:24 - tupal so we'll say Tuple score
700:28 - Scoops is equal to and then we'll do an
700:31 - open parentheses now these open
700:33 - parentheses you've seen if you do like a
700:34 - print statement but that's different
700:36 - because that's executing a function this
700:39 - is actually creating a tupal which is
700:40 - going to store data for us so we'll say
700:42 - one 2 3 two and one let's go ahead and
700:47 - create that Tuple and we can just check
700:50 - the data type really quickly and it's a
700:53 - tupal and just like we saw before a
700:55 - tupal is also index text so if we go at
700:58 - the very first position which is a one
701:01 - we will get the output of a one but we
701:03 - can't do something like
701:05 - aend and then add a value like three if
701:09 - we do that it's going to say Tuple
701:11 - object has no attribute append it's just
701:13 - because you cannot change or add
701:15 - anything to a tupal just like we were
701:17 - talking about before typically people
701:19 - will use tupal for when data is never
701:21 - going to change an example for this
701:23 - might be something like a city name a
701:25 - country a location
701:27 - something that won't change they
701:29 - definitely have their use cases but I
701:30 - don't think they're as popular as just
701:31 - using a list so now let's scroll down
701:34 - and start taking look at sets but really
701:36 - quickly let me add a few more cells for
701:40 - us and let's say
701:43 - sets now a set is somewhat similar to a
701:47 - list and a tupal but they are a little
701:50 - bit different in the fact that they
701:51 - don't have any duplicate elements
701:54 - another big difference is that the
701:55 - values within a set cannot be accessed
701:57 - using an index because it doesn't have
701:59 - an index because it's actually unordered
702:02 - we can still Loop through the items in a
702:04 - set with something like a for Loop but
702:05 - we can't access it using the bracket and
702:07 - then accessing its index point so let's
702:10 - go ahead and create our very first set
702:12 - so we're going to say daily uncore pints
702:16 - then we're going to say equal to and to
702:18 - create a set we're going to use these
702:19 - squiggly brackets I don't know if
702:21 - there's an actual name for those if I'm
702:22 - being honest I call them squiggly
702:24 - brackets and that's what we're going to
702:25 - go with we're to put in a one a two and
702:28 - a three so let's go ahead and run
702:30 - this and let's look at the type and as
702:34 - you can see it is a set now when we
702:36 - print this out it's going to show us one
702:39 - a two and a three and those are all the
702:41 - values within our set but if we copy
702:43 - this and we'll say daily pant log this
702:46 - is going to be every single day maybe I
702:50 - had different
702:52 - values now when we run this and we do
702:54 - the exact same thing now when we print
702:58 - this it's going to have just the unique
703:00 - values within that set now a use case
703:03 - for set and this is something that I've
703:04 - done in the past is comparing two
703:06 - separate sets maybe you have a list or a
703:08 - tupal and you convert that into a set
703:11 - and that will narrow it down to its
703:12 - unique values then you can compare the
703:14 - unique values of one set to the unique
703:16 - values in another set and then we can
703:18 - see what's the same and what's different
703:20 - so let's go down here and let's say
703:22 - wife's
703:24 - uncore daily just copy this right here
703:28 - we'll say is equal to let's do our
703:30 - squiggly lines let's do one two let's do
703:34 - just random
703:36 - numbers so now this is my daily log and
703:39 - this is my wife's daily log and now we
703:41 - can compare these values so let's go
703:43 - right down here let's say print we'll do
703:48 - my daily logs and then we'll do this bar
703:51 - right here and this is going to show us
703:53 - the combined unique values it's
703:54 - basically like putting them all in one
703:56 - second set and then trimming it down to
703:58 - just the unique values so we'll take
704:00 - wife's daily pintes log and when we run
704:03 - this we actually need to run this first
704:05 - when we run this we should see all the
704:07 - unique values between these two sets and
704:10 - so as you can see 0 1 2 3 4 5 6 7 24 31
704:14 - so these are all the unique values
704:16 - between these two
704:17 - sets we can also do another one and
704:21 - instead of this bar we're going to do
704:23 - this symbol right here which I believe
704:25 - is called an Amper sand
704:27 - don't quote me on that but when we run
704:29 - this it's going to show what matches
704:31 - that means which ones show up in both
704:33 - sets so the only ones that show up in
704:36 - both sets are 1 2 3 and five we can also
704:40 - do the opposite of that by doing a minus
704:43 - sign and this is going to show us what
704:44 - doesn't match and so we have four 6 and
704:47 - 31 now where is our 24 that was in our
704:50 - wife's daily pints log it's in this one
704:53 - but we're subtracting the values on this
704:55 - one so let's reverse reverse this and
704:57 - we'll say daily pints
704:59 - log and let's run it now those are our
705:02 - other values so we're taking the values
705:04 - of this and then we're subtracting all
705:06 - the ones that are the same and getting
705:08 - the remaining values and then for our
705:11 - last one we can get rid of this and
705:13 - we'll do this symbol right here and this
705:17 - is going to show if a value is either in
705:19 - one or the other but not in both so
705:22 - let's run this so these values are
705:25 - completely unique only two each of those
705:27 - sets now the very last one that we're
705:30 - going to look at in this video is
705:32 - dictionaries so let's go right down here
705:35 - let's add a few cells and let's say
705:39 - dictionaries now I saved dictionary for
705:41 - last because this one is probably the
705:42 - most different out of all the previous
705:44 - data types that we've looked at within a
705:46 - data type we have something called a
705:50 - key value pair that means when we use a
705:53 - dictionary it's not like a list where
705:55 - you just have a value comma value comma
705:58 - value we have a key that indicates what
706:01 - that value is attributed to so let's
706:03 - write out a dictionary to see how this
706:05 - looks so we're going to say
706:07 - dictionary cream and just like a set we
706:11 - use a squiggly line but the thing that
706:13 - differentiates it is that in a
706:15 - dictionary we'll have that key value
706:17 - pair whereas in a set each value is just
706:19 - separated by a comma so let's write name
706:23 - and this is our key and then we do a
706:25 - colon and this is then where we input
706:27 - our value so we're going to say Alex
706:30 - freeberg and then we separate that key
706:33 - value Pair by a comma and now we can do
706:36 - another key value pair so we'll say
706:39 - weekly intake and a colon and we'll say
706:44 - five pints of ice cream do a comma and
706:47 - then we'll do favorite ice creams and
706:51 - now what we're going to do is we're
706:52 - going to put in here a list so within
706:54 - this dictionary we can also add a list
706:57 - we'll do MCC from mint chocolate chip
706:59 - and then we'll add chocolate another one
707:02 - of my favorites so now we have our very
707:04 - first dictionary let's copy this and run
707:08 - it and let's just look at the
707:10 - type and as you can see it says that
707:13 - this is a dictionary let's also print it
707:15 - out now if we want to we can take our
707:18 - dictionary cream and say dot values with
707:22 - an open parenthesis and when we execute
707:24 - this we'll see all of the values within
707:27 - this dictionary so here's our values of
707:28 - Alex freeberg five mint chocolate chip
707:31 - and chocolate we can also say keys and
707:35 - when we run this all of the keys the
707:36 - name weekly intake and favorite ice
707:38 - creams and we can also
707:41 - say items so this key value pair is one
707:45 - item and this key value pair is another
707:48 - item now one difference between
707:50 - something like a list and a dictionary
707:52 - is how you call the index but you can't
707:54 - call it by doing something like like
707:56 - this where you just do a bracket oops
707:59 - and say zero so this would in theory
708:02 - take this very first one right our very
708:05 - first key value pair that's going to
708:07 - give us an error how you call a
708:08 - dictionary is actually by the key so it
708:10 - doesn't technically have an index but
708:12 - you can specify what you want to call
708:14 - and take it out so we're going to say
708:17 - name and this is going to call that key
708:19 - right here and when we run this we'll
708:21 - get the value which is Alex freeberg one
708:25 - other thing that you can do is you can
708:26 - also update information in a dictionary
708:29 - which we can't with some other data
708:31 - types so for this for the name it was
708:33 - Alex freeberg now let's say Ste freeberg
708:38 - and when we update that I'm also going
708:40 - to
708:41 - print the dictionary get rid of this so
708:45 - it's going to update Christine freeberg
708:48 - in that value of the name so let's go
708:51 - ahead and run this and now it changed
708:53 - the name from Alex freeberg to Christine
708:55 - freeberg we can also update all of these
708:58 - values at one time so let's copy
709:02 - this and I'm going to put it right down
709:04 - here I'm going to say dictionary.c
709:07 - cream. update then we're going to put a
709:10 - bracket or not a bracket but a
709:12 - parentheses around these so now what
709:14 - we're going to do is update this entire
709:16 - thing let me take this say print this
709:20 - dictionary now we can update this to
709:23 - anything we want so instead of here I
709:26 - can
709:27 - say I'll say
709:29 - weight and because of all that ice cream
709:32 - I now weigh 300 lb so let's run this and
709:37 - as you can see it did not delete our key
709:39 - value pair right here instead it just
709:41 - added to it when you're using the update
709:44 - we can't actually delete that's the
709:46 - delete statement and I'll show you that
709:47 - in just a second but all we did was
709:50 - added this new value it also is going to
709:52 - check and see if you changed anything
709:54 - with your key value pair so we can go in
709:55 - here here and change this value and
709:57 - we'll say 10 so now when we run this the
710:01 - value of this key value pair was changed
710:03 - but let's say we do want to delete it
710:05 - we'll say deel that stands for delete
710:08 - part of this dictionary cream and now
710:09 - let's specify the key which will also
710:12 - delete the value with it well let's
710:14 - specify the key that we want to get rid
710:16 - of and let's say
710:17 - wait and then let's print that
710:22 - again and as you can see the weight was
710:25 - deleted from that dictionary so that is
710:27 - all we're going to cover in this data
710:28 - types video thank you guys so much for
710:30 - watching I really appreciate it if you
710:32 - like this video be sure to like And
710:34 - subscribe below and I'll see you in the
710:35 - next
710:37 - [Music]
710:47 - video hello everybody today we're going
710:50 - to be taking a look at comparison
710:51 - logical and membership operators in
710:53 - Python operators are used to perform
710:55 - operations on variables and values for
710:58 - example you're often going to want to
710:59 - compare two separate values to see if
711:01 - they are the same or if they're
711:02 - different within Python and that's where
711:04 - the comparison operator comes in right
711:06 - here you can see our operators you can
711:08 - also see what they do so this equal sign
711:11 - equal sign stands for equal we have the
711:13 - does not equal the greater than less
711:15 - than greater than or equal to and less
711:17 - than or equal to and honestly I use
711:19 - these almost every single time I use
711:21 - Python so these are very important to
711:23 - know and know how to use so let's get
711:24 - rid of that really quickly and actually
711:26 - start writing it out and see how these
711:27 - comparison operators work in Python the
711:29 - very first one that we're going to look
711:31 - at is equal to now you can't just say 10
711:33 - is equal to 10 let's try running that
711:35 - really quickly by clicking shift enter
711:38 - it's going to say cannot assign to
711:40 - literal that's because this is like
711:41 - assigning a variable we're trying to say
711:43 - 10 is equal to 10 and then we can call
711:46 - that 10 later but that's not how this
711:48 - actually works what we're trying to do
711:49 - is to determine whether 10 is equal to
711:51 - 10 so we're going to say equal sign
711:53 - equal sign and then if we run that by
711:55 - clicking shift enter again it's going to
711:57 - say true now if we put something else
711:59 - like 50 in there and we try to run this
712:02 - it's going to say false so really what
712:03 - you're going to get when you use these
712:05 - comparison operators is either a true or
712:07 - a false if we take this right down here
712:10 - we can also say does not equal and we're
712:12 - going to use an exclamation point equal
712:14 - sign and that says 10 is not equal to 50
712:17 - and that should be true you can also
712:18 - compare strings and variables so let's
712:21 - go right down here and we're going to
712:23 - say vanilla is not
712:26 - equal to chocolate and when we run this
712:30 - it'll say false now if it was the same
712:32 - just like when we did our numbers it
712:34 - should say true and we can also compare
712:36 - variables so we'll say x is equal to
712:39 - vanilla and Y is equal to chocolate and
712:44 - then when we come down here we can say x
712:46 - is equal to Y and it'll give us a false
712:49 - and we say X is not equal to Y and it'll
712:53 - give us a true the next one that we're
712:55 - going to take take a look at is the less
712:57 - than so let's copy this one right up
712:58 - here let's scroll
713:00 - down and let's say 10 is less than 50
713:05 - now this will come out as true now let's
713:07 - say we put a 10 in here before 10 was of
713:11 - course less than 50 but is 10 less than
713:14 - 10 no that's false because they are the
713:17 - same so if we want an output that is
713:18 - true all we would have to add is an
713:20 - equal sign right here and this would say
713:22 - 10 is less than or it is equal to 10 and
713:26 - now it's true of course we can say the
713:29 - exact same thing by saying greater than
713:31 - so 10 is equal or greater than 10
713:34 - that'll be true because 10 is equal to
713:36 - 10 we can also say 50 is greater or
713:39 - equal to 10 because 50 is obviously
713:41 - greater than 10 now let's look at
713:43 - logical operators that are often
713:45 - combined with comparison operators so
713:47 - our operators are and or and not so if
713:50 - you have an and that returns true if
713:53 - both statements are true if it's or only
713:56 - one of the statements has to be true and
713:58 - the not basically reverses the result so
714:00 - if it was going to return true it would
714:02 - return false I don't use this not one a
714:05 - lot but I will show you how it works so
714:07 - let's actually test that out so before
714:09 - we were saying 10 is greater than 50 and
714:13 - of course this returned false so now
714:15 - let's add a parentheses around this 10
714:17 - is greater than 50 and we're going to
714:19 - say and we'll do an open parenthesis 50
714:22 - is greater than 10 now this statement
714:25 - right here is true 50 is greater than 10
714:27 - so we have a true statement and a false
714:29 - statement but this and is going to look
714:31 - at both of them and it's going to say
714:33 - they both need to be true in order to
714:35 - return a true so let's try running this
714:38 - and we still have a false if we want it
714:40 - to return true we're going to have to
714:42 - change this to make it a true statement
714:44 - so 70 is greater than 50 and 50 is
714:46 - greater than 10 when we run this it
714:48 - should return true now let's look at the
714:50 - or so let's copy this and we'll say 10
714:54 - is greater than 50 or 50 is greater than
714:58 - 10 now this is a false statement and
715:01 - this is a true statement so if even one
715:03 - of them is a true statement the output
715:04 - should be true and again we can do this
715:07 - even with strings so we can do
715:11 - vanilla and
715:13 - chocolate there we go and vanilla is
715:17 - actually greater than chocolate because
715:18 - V is a higher number in the alphabetical
715:21 - order so V is like 20 something whereas
715:23 - chocolate is three right so actually
715:25 - looks at the spelling for this so if we
715:27 - say or here it will come out true and if
715:31 - we say and here it should also be true
715:33 - because V is greater than C and 50 is
715:36 - greater than 10 so this should also be
715:38 - true now let's copy this right here and
715:42 - we're going to say not so what we had
715:44 - before is 50 is greater than 10 that
715:47 - returned true but now all we're doing is
715:50 - putting not in front of it so instead of
715:51 - returning true it's going to return
715:53 - false so now let's take a look at
715:55 - membership operators and we use this to
715:57 - check if something whether it's a value
715:59 - or a string or something like that is
716:01 - within another value or string or
716:03 - sequence our operators are in and not in
716:06 - so it's pretty simple if it's in it's
716:08 - going to return true if the sequence
716:09 - with a specified value is present in the
716:11 - object just like we were talking about
716:13 - and for not in it's basically the exact
716:15 - same thing if it's not in that object so
716:17 - let's start out by taking a look at a
716:19 - string we're going to say ice _ cream is
716:22 - equal to I love chocolate
716:25 - ice
716:26 - cream and then we're going to say love
716:29 - in ice cream and that will will turn
716:33 - true so all we're doing is searching if
716:35 - the word love or that string is in this
716:38 - larger string we could also just do that
716:40 - by literally copying this and putting
716:42 - this where this is so we can check is
716:44 - this string part of this string and
716:46 - it'll say true we can also make a list
716:49 - so we'll say Scoops is equal to and then
716:52 - we'll do a bracket and we'll say 1 2 3 4
716:55 - 4 five and then we'll say two in Scoops
717:00 - so all we're doing is searching to see
717:01 - if two is within this list and that
717:03 - should return true now if we put a six
717:06 - here and we said not in it will also
717:10 - return true because six is not in Scoops
717:13 - and that is true and just like we did we
717:15 - could also say wanted underscore Scoops
717:18 - and we'll say eight so I wanted eight
717:21 - Scoops so we can say wanted Scoops in
717:24 - scoops and this should return true
717:27 - because there's not an eight within the
717:29 - Scoops that we wanted and if we said in
717:32 - and we said we wanted eight is that
717:35 - within our list that we created and
717:37 - that's going to return a false so that
717:39 - is a quick breakdown of comparison
717:41 - logical and membership operators I hope
717:43 - that this was helpful thank you guys so
717:45 - much for watching if you like this video
717:47 - be sure to like And subscribe and I will
717:49 - see you in the next
717:52 - [Music]
717:54 - video
717:57 - [Music]
718:03 - hello everybody today we're going to be
718:04 - taking a look at the if statement within
718:06 - python now it's actually the if LF else
718:08 - statement but that's a mouthful so I'm
718:10 - just going to call it the if else
718:11 - statement now we have this flowchart and
718:13 - I apologize for being blurry but this is
718:15 - the absolute best one that I could find
718:17 - right up top we have our if condition
718:20 - now if this if condition is true we're
718:22 - going to run a body of code but if that
718:24 - condition is false we're going to go
718:26 - over here and go to the LF condition the
718:28 - LF condition or statement is basically
718:30 - saying if the first if statement doesn't
718:32 - work let's try this if statement if this
718:34 - LF statement is true it goes to this
718:37 - body of code if it's false it'll come
718:39 - over here to the else and the else is
718:40 - basically if all these things don't work
718:43 - then run this body of code now you can
718:45 - have as many ill if statements as you
718:47 - want but you can only have one if
718:49 - statement and one else statement so
718:51 - let's write out some code and see how
718:52 - this actually looks let's first start
718:54 - off by writing if that that is our if
718:56 - statement and now we have to write our
718:57 - condition which is about to be either
718:59 - met or not met so we'll say if 25 is
719:03 - greater than 10 which is true we'll say
719:05 - colon and then we're going to hit enter
719:08 - and it's going to automatically indent
719:09 - that line of code for us and this is our
719:11 - body of code so if 25 is greater than 10
719:14 - our body of code will execute so for us
719:17 - we're just going to write print and
719:18 - we'll say it worked now if we run this
719:21 - it's going to check is 25 greater than
719:23 - 10 if that is true true print this so
719:27 - let's hit shift enter and it worked now
719:30 - let's take this exact code we'll paste
719:33 - it right down here and we'll say is less
719:35 - than and right now this if statement is
719:38 - not true so it's not actually going to
719:41 - work as you can see there's no output
719:43 - there's nothing that happened really but
719:45 - it did check to see if 25 was less than
719:47 - 10 but it just wasn't true now we can
719:50 - use our else statement so we're going to
719:51 - come right down here and we're going to
719:53 - say else and we'll do a colon and we'll
719:55 - hit enter again automatically indenting
719:57 - and we're going to say print and we're
719:59 - going to say it did not work dot dot dot
720:04 - so what it's going to do is it's going
720:05 - to come up here and check is 25 less
720:08 - than 10 no it's not so this body of code
720:11 - is not going to be executed it's going
720:12 - to go right down to this else statement
720:14 - now this else statement is going to be
720:16 - printed there's no condition on this so
720:18 - the if statement has a condition 25 is
720:20 - less than 10 this has no condition so if
720:22 - this doesn't work if this is false it's
720:24 - going to come down here and it will run
720:26 - this body of code let's run this by
720:28 - clicking shift enter and as you can see
720:31 - our output is it did not work now let's
720:33 - go back up here and put greater than
720:36 - because this is now true it's going to
720:38 - say if 25 is greater than 10 print it
720:41 - worked and then it's going to stop it's
720:43 - not going to go to this lse statement at
720:45 - all so let's run this and our output is
720:48 - it worked so what if we have a lot of
720:49 - different conditions that we want to try
720:51 - let's come right down here this is where
720:53 - the LF comes in so so really quickly
720:55 - let's change this to a not true a false
720:58 - statement we're going to go down and say
721:00 - LF and we're going to say if it is and
721:05 - let's say
721:07 - 30 we'll say LF
721:11 - worked so now it's going to check is 25
721:14 - less than 10 no it's not let's look at
721:16 - the next condition is 25 less than 30
721:19 - and if it is we'll print L if worked so
721:22 - let's try running this and L if worked
721:25 - now we can do as many of these LF
721:27 - statements as we want we can do let's
721:30 - just try a few of them right here so
721:33 - we'll say if 25 is less than 20 is less
721:37 - than
721:38 - 21 and let's do 40 and let's do 50 so
721:42 - we'll say LF lf2 lf3 and lf4 now if you
721:48 - look at this the first one that is
721:50 - actually going to work is this 25 to 40
721:53 - right here once this one is checked and
721:55 - it comes out as true none of the other
721:58 - LF or L statements will work so let's
722:00 - try this one it should be
722:02 - lf3 and this one ran properly now within
722:05 - our condition so far we've only used a
722:07 - comparison operator we can also use a
722:09 - logical operator like and or or so we
722:12 - can say if 25 is less than 10 which it's
722:16 - not and let's say or actually and we'll
722:19 - say or 1 is less than three which is
722:22 - true if we run this now it will actually
722:26 - work so we can use several different
722:27 - types of operators within our if
722:29 - statement to see if a condition is true
722:31 - or not or several conditions are true
722:33 - there's also a way to write an IFL
722:35 - statement in one line if you want to do
722:37 - that so we can write print we'll say it
722:41 - worked and then we'll come over here and
722:43 - say if 10 is greater than 30 and then
722:47 - we'll write else print and we'll say it
722:52 - did not work just like we had before
722:55 - except now it's all occurring on one
722:57 - line so let's just try this and see if
722:59 - it works so it's saying print it worked
723:02 - if 10 is greater than 30 which it wasn't
723:04 - so it went to the lse statement and then
723:06 - it printed out our body right here
723:08 - although we didn't have any indentation
723:10 - or multiple lines it was all done in one
723:12 - line now there's one other thing that we
723:13 - haven't looked at yet uh and I'm going
723:15 - to show it to you really quickly and
723:17 - that's a nested if statement so when we
723:19 - run this it's going to say it worked it
723:22 - works because it says 25 is less than 10
723:25 - or one is less than three since this is
723:27 - true it's going to print out it worked
723:30 - but we can also do a nested if statement
723:32 - so we can do multiple if statements as
723:34 - well so we're going to hit enter and
723:36 - we'll say if and we'll do a true
723:38 - statement here so we'll say if 10 is
723:41 - greater than five let's do a colon hit
723:44 - enter then we'll say print and then
723:46 - we'll type A String saying this nested
723:49 - if
723:50 - statement oops
723:52 - worked now let's try this out and and
723:54 - see what we get so it went through the
723:57 - first if statement it said it was true
723:59 - and it prints out it worked this is
724:01 - still the body of code so it goes down
724:03 - to this next if statement and it says if
724:05 - 10 is greater than five we're going to
724:07 - print this out and you could do this on
724:09 - and on and on it can basically go on
724:12 - forever and you can create a really
724:13 - in-depth logic and that actually happens
724:15 - a lot when you start writing more
724:16 - advanced code so I hope that this was
724:18 - helpful I hope that you understand the
724:20 - IFL statement better I hope that you
724:22 - understand how nested if statements work
724:23 - as well thank you guys so much for
724:25 - watching if you like this video be sure
724:27 - to like And subscribe below and I'll see
724:29 - you in the next
724:31 - [Music]
724:41 - video hello everybody today we're going
724:44 - to be learning about for Loops in Python
724:46 - the for Loop is used to iterate over a
724:48 - sequence which could be a list a tupal
724:51 - an array a string or even a dictionary
724:53 - here's the list that we'll be working
724:54 - with throughout this video and I have
724:56 - this little diagram right here which
724:58 - kind of explains how a for Loop works
725:01 - the for Loop is going to start by
725:02 - looking at the very first item in our
725:04 - sequence or our list and that's going to
725:06 - be our one right here it's going to ask
725:08 - is this the last element in our list and
725:11 - it is not so it's going to go down to
725:14 - this body of the for Loop now we can
725:16 - have a thousand different things that
725:18 - can happen in the body of the for loop
725:19 - as we're about to look out in just a
725:21 - second then it's going to go up to the
725:23 - next element and ask is this the last
725:25 - element reached so it'll be no again
725:28 - because we'll be going to the two and
725:29 - then the three and then the four and the
725:31 - five once it reaches the five it'll go
725:34 - to the body the for Loop and then when
725:36 - it asks if that's the last element the
725:38 - answer would be yes because it's
725:39 - iterated through all the items within
725:41 - the list and then we would exit the loop
725:43 - and the for Loop would be over now that
725:45 - may not have made perfect sense but
725:47 - let's actually start writing out the
725:49 - syntax of a for Loop so we can
725:50 - understand this better to start our for
725:52 - loop we're going to say four and and
725:54 - then we're going to give it a temporary
725:56 - variable for this for Loop so it's a
725:58 - variable as it iterates through these
726:00 - numbers it's going to assign the
726:02 - variable to that number so for this one
726:04 - we're just going to say number because
726:06 - it's pretty appropriate because these
726:07 - are all numbers and then we're going to
726:09 - say in integers now right here you can
726:14 - put just about anything this could be
726:15 - the list this could be a tuple this
726:17 - could be a string even but that is what
726:20 - we're going to iterate through so we're
726:21 - saying for the variables each of these
726:23 - numbers within this list of integers and
726:27 - then we're going to write a colon this
726:29 - is the body of code that's going to
726:31 - actually be executed when we run through
726:33 - and iterate through our list so for our
726:35 - first example we're going to start off
726:37 - super simple and all we're going to do
726:39 - is say print open parentheses and say
726:42 - number as it iterates through the 1 2 3
726:45 - 4 and five number becomes our variable
726:48 - that is going to be printed so during
726:50 - that first loop our one will be printed
726:52 - because that will be assigned right here
726:55 - then through the next iteration the two
726:57 - will be assigned and'll be put right
726:59 - here in each Loop until the very end so
727:02 - let's hit shift
727:04 - enter and as you can see it did exactly
727:07 - that now in this body and I'll copy and
727:09 - paste this down here in this body we
727:11 - really can do just about anything we
727:13 - want we don't even have to use this
727:15 - variable number right here we can just
727:17 - print yep if we wanted to and what it's
727:21 - going to do is for each iteration all
727:23 - five of those every time it Loops
727:25 - through it's going to print off yep so
727:27 - let's hit shift enter and it printed it
727:30 - off for us so really we weren't even
727:33 - using the numbers within the list we
727:35 - were really just using it as almost a
727:37 - counter now let's copy this integers
727:39 - once again let's go right up here and
727:42 - let's go copy this for Loop that we
727:45 - wrote now we do not have to call this
727:48 - number this can be anything you want any
727:51 - variable name that you'd like to name it
727:53 - we could call it
727:55 - jelly and we can
727:57 - do jelly plus
728:00 - jelly I think you're getting the picture
728:02 - right when it Loops through that one
728:04 - it's doing 1 plus one when it Loops
728:06 - through the two it's doing two plus two
728:09 - that is basically how a four Loop works
728:11 - now for a dictionary it's going to
728:12 - handle it a little bit differently so
728:15 - let's create a dictionary really quickly
728:17 - so we'll say ice
728:19 - cream dictionary is equal to we're going
728:22 - to do a squiggly brackets so we're going
728:24 - to say name and we're going to say colon
728:27 - we need to assign our value for that
728:29 - item so we're going to say Alex freeberg
728:33 - we'll do our next one separated by a
728:35 - comma and we'll say weekly intake and
728:38 - I'll say five Scoops per week the next
728:42 - one we will do is favorite ice creams
728:46 - and for this one we're going to do
728:47 - something a little bit different for
728:49 - this we're going to have a list within
728:51 - this dictionary so we'll say within our
728:53 - list of my favorite ice creams we'll say
728:56 - mint chocolate chip and I'll just do MCC
728:58 - for that and we'll separate that out by
729:02 - a comma and we'll say chocolate so now
729:04 - we have this dictionary ice cream dick
729:07 - and within it we have my name my weekly
729:09 - intake and my favorite ice creams with a
729:12 - list in there as well let's hit shift
729:15 - enter and now we're going to start
729:16 - writing our for Loop now the for Loop is
729:18 - going to look very similar but to call a
729:20 - dictionary it's just a little bit
729:22 - different so we're going to say four the
729:24 - cream in icore
729:29 - creamore
729:30 - dictionary. values and then we're going
729:32 - to do parentheses and then a colon now
729:35 - we're going to print the cream so in
729:39 - order to indicate what we actually want
729:40 - to pull we have to specify within the
729:43 - dictionary what we want are we pulling
729:46 - the item are we pulling the value we
729:47 - need to specify this so that's why we
729:49 - have this dot values right here so let's
729:52 - run this and see what we get so as you
729:54 - can see we are pulling in the values
729:56 - right here that's why we're pulling in
729:57 - Alex freeberg 5 and mint chocolate chip
730:00 - SL chocolate now we are able to call
730:03 - both of those both the key and the value
730:06 - so let's go right down here and we can
730:08 - do both the key and the value so we can
730:11 - pull two things at one time and we're
730:14 - going to do this by saying do items so
730:17 - we could also do do key if we just
730:19 - wanted to do a key but we want to do
730:22 - items so we going to do both of them
730:24 - so we're going to go right down here and
730:26 - say for key and value in ice cream
730:28 - dictionary. items print and let's write
730:32 - key and then we'll do a comma and then
730:35 - let's give it a little arrow or
730:36 - something like that uh something like
730:38 - this and then we'll do a comma and we'll
730:40 - say value and let's print this off and
730:43 - see what we get so it's looping through
730:47 - and for each key and value it's saying
730:49 - here is the key so that's the name then
730:51 - we have weekly intake then we have
730:53 - favorite ice creams it's giving us a
730:55 - little arrow and then we're also
730:56 - printing off the value so we have name
730:58 - Alex freeberg weekly intake five
731:01 - favorite ice creams mint chocolate chip
731:03 - and chocolate so now let's talk about
731:05 - nested for Loops we've looked at for
731:07 - Loops we understand how they work and
731:09 - why they do what they do but what about
731:11 - a nested for Loop a for Loop within a
731:13 - for Loop for this example let's create
731:16 - two separate lists let's create
731:19 - flavors and let's make that a list by
731:22 - making it a bracket we'll do vanilla the
731:26 - classic
731:29 - chocolate and then cookie dough all
731:33 - great flavors so that's our first list
731:36 - and then we're going to say toppings and
731:38 - we'll do a bracket for that as well and
731:41 - we'll say hot
731:43 - fudge and then we'll do
731:47 - Oreos and then we'll do
731:51 - marshmallows is how you spell
731:53 - marshmallows
731:54 - I think it's an e that looks wrong I
731:57 - might be spelling it wrong but that's
731:59 - okay so let's save this by clicking
732:01 - shift enter and now we have our flavors
732:04 - and our toppings so now let's write our
732:06 - first for Loops we're going to say 41 as
732:09 - in our number one for loop we're going
732:11 - to say in flavors and we'll do a colon
732:15 - we'll click enter now we can write our
732:17 - second for Loop so we're going to say 4
732:19 - two in toppings and then we'll do a
732:23 - colon and enter and then we're going to
732:25 - say print and we'll do an open
732:27 - parenthesis and then we're going to say
732:29 - one so we're printing the one in flavors
732:33 - and then we're going to say one comma
732:35 - I'm going to say topped with comma 2 so
732:41 - what this is essentially going to do is
732:43 - we're going to say for one we're going
732:45 - to take the very first one in flavors
732:48 - and then we're going to Loop through all
732:49 - of two as well so we're going to Loop
732:52 - through hot fudge Oreo
732:54 - and marshmallows and once we print that
732:57 - off then we will Loop all the way back
732:59 - to Flavors and look at the next
733:02 - iteration or the next sequence within
733:04 - the first for Loop so let's run this
733:06 - really quickly and see what we get so as
733:09 - you can see it goes vanilla vanilla
733:12 - vanilla and vanilla is topped with the
733:14 - hot fudge the Oreos and the marshmallows
733:16 - and then we start iterating through our
733:18 - second one in our first four Loop so
733:20 - there's that hierarchy so we're
733:21 - iterating completely through this one
733:24 - before we actually go to the very first
733:25 - for Loop and start iterating through
733:27 - that one again now that is essentially
733:29 - how a nested for Loop works these nested
733:31 - for Loops can get very complicated in
733:33 - fact for Loops in general can get very
733:36 - complicated the more you add to it and
733:38 - the more you're wanting to do with it
733:39 - but that is basically how a for Loop and
733:41 - a nested for Loop works thank you guys
733:43 - so much for watching be sure to like And
733:45 - subscribe below and I'll see you in the
733:46 - next
733:48 - [Music]
733:52 - video
733:54 - [Music]
733:59 - hello everybody today we're going to be
734:01 - taking a look at while Loops in Python
734:03 - the while loop in Python is used to
734:05 - iterate over a block of code as long as
734:07 - the test condition is true now the
734:09 - difference between a for Loop and a
734:10 - while loop is that a for Loop is going
734:12 - to iterate over the entire sequence
734:14 - regardless of a condition but the while
734:16 - loop is only going to iterate over that
734:17 - sequence as long as a specific condition
734:19 - is met once that condition is not met
734:22 - the code is going to stop and it's not
734:23 - going to inter through the rest of the
734:24 - sequence so if we take a look at this
734:26 - flowchart right here we're going to
734:27 - enter this while loop and we have a test
734:30 - condition right here the first time that
734:31 - this test condition comes back false
734:33 - it's going to exit the while loop so
734:34 - let's start actually writing out the
734:36 - code and see how this while loop works
734:38 - so let's create a variable we're just
734:39 - going to say number is equal to one and
734:42 - then we'll say while and now we need to
734:44 - write our condition that needs to be met
734:45 - in order for our block of code beneath
734:47 - this to run so we're going to say while
734:50 - number is less than five and then we'll
734:53 - do colon enter and now this is our block
734:55 - of code we're going to say print and
734:57 - then we'll say number now what we need
734:59 - to do is basically create a counter
735:01 - we're going to say number equals number
735:04 - + 1 if you've never done something like
735:06 - this it's kind of like a counter most
735:08 - people start it at zero in fact let's
735:09 - start it at zero and then each time it
735:11 - runs through this while loop it's going
735:13 - to add one to this number up here and
735:15 - then it's going to become a one a two a
735:18 - three each time it iterates through this
735:20 - while loop now once this number is no
735:22 - longer less than five it'll break out of
735:25 - the while loop and it will no longer run
735:27 - so let's run this really quick by
735:28 - hitting shift enter so it starts at zero
735:31 - and it's going to say while the number
735:33 - is less than five print number so the
735:35 - first time that it runs through it is
735:37 - zero and so it prints zero and then it
735:39 - adds one two number and then it
735:42 - continues that y Loop right here and it
735:44 - keeps looping through this portion it
735:46 - never goes back up here to this line of
735:47 - code this is just our variable that we
735:50 - start with and then once this condition
735:52 - is no longer met once it is is false
735:54 - then it's going to break out of that
735:55 - code now that we basically know how a y
735:57 - Loop Works let's look at something
735:59 - called a break statement so let's copy
736:01 - this right down here and what we're
736:03 - going to say is if number is equal to
736:07 - three we're going to break now with the
736:10 - break statement we can basically Stop
736:11 - the Loop even if the while condition is
736:13 - true so while this number is less than
736:16 - five it's going to continue to Loop
736:17 - through but now we have this break
736:19 - statement so it's going to say if the
736:21 - number equals three we're going to break
736:23 - out out of this while loop but if this
736:25 - is false we're going to continue adding
736:27 - to that number just like normal so let's
736:29 - execute this so as you can see it only
736:31 - went to three instead of four like
736:33 - before because each time it was running
736:35 - through this while loop it was checking
736:37 - if the number was equal to three and
736:39 - once it got to three this became true
736:41 - and then we broke out of this while loop
736:43 - the next thing that I want to look at
736:44 - and we'll copy this right down here is
736:46 - an else statement much like an if
736:48 - statement but we can use the lse
736:50 - statement with a while loop which runs
736:52 - the block of code and when that that
736:53 - condition is no longer true then it
736:56 - activates the else statement so we'll go
736:58 - right down here and we'll say else and
737:00 - we'll do a colon and enter and then
737:02 - we'll say print and we'll say no
737:07 - longer less than five now because this
737:10 - if statement is still in there it will
737:12 - break so let's say six and then we'll
737:15 - run this and so it's going to iterate
737:17 - through this block of code and once this
737:19 - statement is no longer true once we
737:21 - break out of it we're going to go to our
737:22 - else state St now as long as this
737:24 - statement is true it's going to continue
737:26 - to iterate through but once this
737:28 - condition is not met then it will go to
737:30 - our L statement and we'll run that line
737:31 - of code now the L statement is only
737:33 - going to trigger if the Y Loop no longer
737:36 - is true if we have something like this
737:38 - if statement that causes it to break out
737:40 - of the while loop the L statement will
737:41 - no longer work so let's say if the
737:44 - number is three and we run this the L
737:47 - statement is no longer going to trigger
737:48 - so this body of code will not be run now
737:50 - the next thing that I want to look at is
737:51 - the continue statement if the continue
737:53 - statement is triggered it basically
737:55 - rejects all remaining statements in the
737:57 - current iteration of the loop and then
737:59 - we'll go to the next iteration now to
738:01 - demonstrate this I'm going to change
738:02 - this break into a continue so before
738:05 - when we had the break if the number was
738:07 - equal to three it would stop all the
738:08 - code completely but when we change this
738:11 - to continue which we'll do right now
738:14 - what it's going to do is it's no longer
738:15 - going to run through any of the
738:17 - subsequent code in this block of code
738:19 - it's just going to go straight up to the
738:20 - beginning and restart our while loop so
738:23 - what's going to happen when we run this
738:25 - is it's going to come to three it's
738:27 - going to become three it's going to
738:28 - continue back into the while loop but
738:30 - it's never going to have that number
738:32 - changed to be added to one to continue
738:34 - with the while loop this will basically
738:36 - create an infinite Loop let's try this
738:38 - really quickly and as you can see it's
738:40 - going to stay three forever eventually
738:43 - this would time out but I'm just going
738:44 - to stop the code really quick so if we
738:46 - just change up the order of which we're
738:48 - doing things we're going to say there
738:52 - and we're going to put this down here
738:54 - so what it's going to do now instead of
738:55 - printing the number immediately and then
738:57 - adding the number later we're going to
738:59 - add the number right away and then we're
739:02 - going to say if it is three we're going
739:03 - to continue and it's going to print the
739:05 - number so let's try executing this and
739:06 - see what happens so as you can see we no
739:08 - longer have the three in our output what
739:11 - it did was when we got to the number
739:12 - three it continued and didn't execute
739:15 - this right here which prints off that
739:17 - number so that really is the basics of
739:19 - the while loop I hope that this was
739:20 - helpful I hope that you learned
739:21 - something in this video If you did be
739:23 - sure to like And subscribe below and
739:25 - I'll see you in the next
739:28 - [Music]
739:38 - video hello everybody today we're going
739:40 - to be taking a look at functions in
739:41 - Python a function is a block of code
739:44 - which is only run when you call it so
739:46 - right here we're defining our function
739:48 - and then this is our body of code that
739:50 - when we actually call it is going to be
739:52 - ran so right here we have our function
739:54 - call and all we're doing is putting the
739:56 - function with the parenthesis that is
739:58 - basically us calling that function and
740:00 - then we have our output throughout this
740:02 - video I'm going to show you how to write
740:03 - a function as well as pass arguments to
740:05 - that function and then a few other
740:07 - things like arbitrary arguments keyword
740:09 - arguments and arbitrary keyword
740:11 - arguments all of these things are really
740:12 - important to know when you are using
740:14 - functions so let's get started by
740:16 - writing our very first function together
740:18 - we're going to start off by saying DF
740:20 - that is the keyword for defining a
740:21 - function then we can actually name our
740:24 - function and for this one we're just
740:25 - going to do first underscore function
740:28 - and then we do an open parenthesis and
740:30 - then we'll put a colon we'll hit enter
740:32 - and it'll automatically indent for us
740:34 - and this is where our body of code is
740:36 - going to go now within our body of code
740:37 - we can write just about anything and in
740:39 - this video I'm not going to get super
740:40 - Advanced we're just going to walk
740:42 - through the basics to make sure that you
740:43 - understand how to use functions so for
740:45 - right now all we're going to say is
740:47 - print we'll do an open parenthesis we'll
740:49 - do an apostrophe and we'll say we did it
740:53 - and now we're going to hit shift enter
740:55 - and this is not going to do anything at
740:56 - least you won't see any output from this
740:59 - if we want to see the output or we
741:00 - actually want to run that function and
741:02 - some functions don't have outputs but if
741:04 - we want to run that function what we
741:06 - have to do is just copy this and put it
741:08 - right down here and now we're going to
741:10 - actually call our function so let's go
741:12 - ahead and click shift enter and now
741:14 - we've successfully called our first
741:16 - function this function is about as
741:18 - simple as it could possibly be but now
741:20 - let's take it up a notch and start
741:21 - looking at arguments so let's go right
741:23 - down here and we're going to say Define
741:26 - number underscore squared we'll do a
741:30 - parenthesis and our colon as well now
741:32 - really quickly when you're naming your
741:34 - function it's kind of like naming a
741:35 - variable you can use something like X or
741:37 - Y but I tend to like to be a little bit
741:39 - more descriptive but now let's take a
741:41 - look at passing an argument into a
741:43 - function the argument is going to be
741:45 - passed right here in the parentheses so
741:47 - for us I'm just going to call it a
741:49 - number and then we're going to hit enter
741:52 - and now we'll write our body of code and
741:53 - all we're going to do for this is type
741:55 - print and open parenthesis and we'll say
741:58 - number and we'll do two stars at least
742:00 - that's what I call it a star and a two
742:03 - and what this is going to do is it's
742:04 - going to take the number that we pass
742:06 - into our function it's going to put it
742:08 - right here in our body of code and then
742:10 - for what we're doing it's going to put
742:11 - it to the power of two and so when the
742:13 - user or you run this and call this
742:16 - function this number is something that
742:18 - you can specify it's an argument that
742:20 - you can input that will then be run in
742:22 - this body of code so let's copy this
742:25 - right here and then we'll put it right
742:28 - down here into this next cell and we'll
742:29 - say five and so this five is going to be
742:32 - passed through into this function and be
742:34 - called right here for this print
742:36 - statement let's run it and it should
742:38 - come out as I believe 25 that is my
742:40 - fault I forgot to actually run this
742:42 - block of code so I'm going to hit shift
742:44 - enter so now we've defined our function
742:46 - up here and now we can actually call it
742:48 - so now we'll hit shift enter and we got
742:51 - our output of 25 now now in this
742:53 - function we only called one argument but
742:55 - you can basically call as many arguments
742:57 - as you want you just have to separate
742:59 - them by commas so let's copy this and
743:03 - we'll put it right down here now we'll
743:05 - say number squared uncore custom and
743:09 - then we'll do number and then we'll do
743:12 - power so now we can specify our number
743:15 - as well as the power that we want to
743:16 - raise it to so instead of having two
743:18 - which is what you call hardcoded we can
743:21 - now customize that and we'll have power
743:23 - power and now when we call this function
743:25 - we can specify the number and the power
743:27 - and both of those will go into this body
743:29 - of code and be run and we can customize
743:31 - those numbers so let's copy
743:34 - this and we'll
743:36 - say 5 to the power of three and let's
743:41 - make sure I ran this so let's do shift
743:43 - enter and now we will call our function
743:46 - and let's hit shift enter and we got 5
743:48 - to the^ of 3 which is 125 and just one
743:52 - last thing to mention is if you have two
743:54 - arguments within your function and you
743:56 - are calling it right here you have to
743:58 - pass in two arguments you can't just
744:00 - have one so if we have a five right here
744:02 - it's going to error out we have to
744:04 - specify both Arguments for it to work
744:08 - now let's take a look at arbitrary
744:10 - arguments now arbitrary arguments are
744:13 - really interesting because if you don't
744:15 - know how many arguments you want to pass
744:16 - through if you don't know if it's a one
744:18 - a two or a three you can specify that
744:20 - later when you're calling the argument
744:22 - so you don't have to do it upfront and
744:24 - know that information ahead of time so
744:26 - let's define our function so we're going
744:28 - to say Define and then we're going to
744:29 - say number underscore args and we'll do
744:33 - an open parenthesis and a colon now
744:36 - within our argument right here typically
744:38 - we would just specify here's what our
744:40 - argument will be it will be number or it
744:42 - will be a word right but what we're
744:44 - going to do is something called an
744:45 - arbitrary argument so it's unknown so
744:47 - we're going to put star and then we'll
744:49 - say args now you will see something
744:52 - exactly like this typically if you're
744:53 - looking at tutorials that'll have star
744:55 - args in there or if you're looking at
744:57 - just a generic piece of code this is
744:59 - what it will look like but for us we're
745:02 - going to actually put number so again we
745:04 - have the star and then we have our
745:06 - arbitrary argument right here and then
745:08 - we'll hit enter and we're going to say
745:10 - print open parentheses and this is where
745:13 - it's going to get a little bit different
745:15 - so we're going to say number and then
745:16 - we're going to do an open bracket and
745:18 - let's say zero and then we'll do that
745:21 - times and then we'll say number again
745:24 - with a bracket of one so in a little bit
745:26 - once we run this and then we call this
745:28 - number args function right here we're
745:30 - going to need to specify the number zero
745:33 - and the number one that's going to be
745:34 - called so let's go ahead and run this
745:37 - and then we are going to call it and
745:41 - let's say 5 comma 6 comma 1 2 8 so right
745:46 - up here we did not know how many
745:48 - arguments we were going to pass through
745:50 - it could be five it could be a thousand
745:53 - we could also call in a tuple and that's
745:55 - what this is right here we're calling in
745:56 - a tupal so what it's going to do now is
745:59 - when it calls this number it's going to
746:00 - call the very first within that tupal
746:02 - which will be that five and then it'll
746:04 - also call in this number which will be
746:06 - the first position which is the six so
746:09 - let's hit shift enter and it's going to
746:11 - multiply these numbers together so 5 * 6
746:14 - is equal to 30 now like I just said this
746:16 - is a tuple so we don't actually have to
746:18 - write out these numbers like we just did
746:20 - we can pass through a tuple when we are
746:22 - actually calling this function let's do
746:25 - that right up here let's just create um
746:27 - let's call it argor Tuple and we'll do
746:32 - open parentheses and we'll do the same
746:34 - numbers let's just copy it make it
746:37 - easier and now we've created this tupal
746:40 - right here which we can then pass in and
746:43 - this is a lot more handy a lot more
746:45 - specific and this is most likely how
746:46 - someone would do something like this but
746:48 - let's now create this and now we can
746:52 - copy args Tuple and pass it through now
746:56 - really quickly this is going to fail and
746:58 - I'm doing that on purpose but I want to
746:59 - show you what you need to do in order to
747:01 - pass through this
747:02 - tupal so right now it's going to say
747:04 - Tuple index is out of range all you have
747:07 - to do in order to use this is you have
747:09 - to specify a star before it just like
747:12 - you did when you're creating your
747:13 - argument up here you have to put a star
747:15 - in front of our Tuple that we just
747:17 - passed through and now let's try running
747:19 - this and now it works properly now the
747:22 - last two things that we're going to look
747:23 - at are keyword arguments and arbitrary
747:25 - keyword arguments there are more things
747:27 - that you can learn and do within
747:28 - functions but again I'm just trying to
747:30 - teach you the basics to make sure that
747:32 - you understand how they work so let's go
747:34 - right up here and a keyword argument is
747:36 - kind of similar to this right here and
747:39 - let's actually copy this and put it
747:41 - right down here now a keyword argument
747:44 - is very similar in that you're going to
747:46 - specify your arguments right here but
747:49 - what we did up here let me bring this
747:51 - down
747:53 - when we actually called the function
747:55 - what we did was we just put in a five
747:57 - and a three and when we did that it
748:00 - automatically assigned number to five
748:02 - and power to three and that's totally
748:04 - fine and you can do that but if you want
748:06 - a little bit more control you can use a
748:08 - keyword argument so right here we could
748:11 - say power is equal to five and number is
748:18 - equal to three so I just switched it
748:19 - around right number was assigned to five
748:21 - and Power was assigned to three but I
748:24 - just switched it to show you how this
748:25 - might work so let's run both of these
748:28 - and now it's 3 to the^ of 5 which is
748:31 - 243 so that essentially is a keyword
748:33 - argument again it just gives you a
748:35 - little bit more control you don't have
748:37 - to put them in specific positions like
748:39 - if you're just calling multiple
748:40 - arguments now let's come right down here
748:42 - we're going to create basically another
748:44 - custom function uh so for this one we're
748:46 - going to write Define number underscore
748:50 - bar and then we'll do an open
748:52 - parenthesis a colon and enter and what
748:56 - this one is is this one is a keyword
748:58 - argument or an arbitrary keyword
749:00 - argument now to specify an arbitrary
749:03 - argument all we did was a star and then
749:06 - we input number but if we're doing a
749:08 - keyword argument we actually have to
749:10 - have two stars right here so let's start
749:13 - taking a look and again if you're doing
749:15 - arbitrary it means we don't really know
749:17 - how many keyword arguments we want to
749:19 - pass into our function so we're just
749:21 - going to put star our number and then
749:23 - later within our body of code and when
749:24 - we're calling it we'll be able to
749:26 - specify it and just like the arbitrary
749:28 - argument before the arbitrary keyword
749:31 - argument means we really just don't know
749:33 - how many keyword arguments we're going
749:34 - to need to pass into our function so to
749:36 - demonstrate this let's write print do an
749:39 - open parenthesis and we'll say my oops
749:42 - need to do an
749:43 - apostrophe my number is we'll do just
749:48 - like that little space and we'll say
749:50 - plus and this is kind of where it gets a
749:52 - little interesting or a little bit more
749:54 - tricky so we're going to say is number
749:56 - so This Is Us calling our number and
749:58 - then we're going to do a bracket and
750:01 - then I'm actually going to go to calling
750:03 - the function it's a little bit backward
750:05 - or a little bit different than what you
750:07 - might think but when we're calling it
750:09 - what I'm going to do is I'm going to say
750:11 - integer is equal to let's just do some
750:14 - random number now when we're calling
750:16 - that keyword within our body of code
750:19 - what we're going to do is we're going to
750:20 - actually type out integer just like this
750:23 - and this looks a little bit different
750:26 - but what this allows us to do is we can
750:28 - put as many keyword arguments in here as
750:30 - we want later and I'll show you in just
750:31 - a second but for us we're just creating
750:33 - this key and this value when we are
750:36 - calling it within the function so now
750:38 - when we create this and we run
750:41 - this oh whoops I forgot this has to be a
750:44 - string um so let's run this
750:47 - again now we will say my number is
750:51 - 2309 then we're we're going to add we'll
750:53 - say plus and this isn't going to look
750:55 - great but we'll say my other number
750:58 - because this will all be in the same
750:59 - line that's okay my other number and
751:02 - then we'll say number and we can specify
751:05 - again what we want in there so now we
751:08 - can go down here to where we're calling
751:10 - it we'll put a comma and we'll say
751:13 - integer oops
751:16 - integer 2 is equal to we'll do a random
751:20 - number and then we'll put in two right
751:23 - here and then we'll add plus right here
751:26 - so we don't error out we'll create this
751:28 - we'll run this and as you can see both
751:31 - numbers were passed through again the
751:33 - syntax is terrible but now you can see
751:35 - that you have this arbitrary keyword
751:37 - argument right here and all we have to
751:39 - do is put number number and we can pass
751:42 - through as many of these arbitrary
751:44 - keyword arguments as we want as long as
751:46 - we just specify within our function when
751:48 - we're calling it so that's all we're
751:50 - going to look at in today's video on
751:51 - functions there are of course other
751:53 - things that you can do within functions
751:54 - and it can get a little bit more
751:55 - advanced but I wanted to show you the
751:57 - basics the meat and potatoes of things I
751:59 - definitely think you should know in
752:00 - order to get started using functions I
752:02 - hope that you were able to understand
752:04 - functions better because of this video
752:06 - if you did be sure to like And subscribe
752:07 - below and I will see you in the next
752:11 - [Music]
752:21 - video hell hello everybody today we're
752:23 - going to be talking about converting
752:24 - data types in Python in this video I'm
752:26 - going to show you how to convert several
752:28 - different data types including strings
752:30 - numbers sets tupal and even dictionaries
752:33 - so let's start off by creating a
752:34 - variable we'll say numor int is equal to
752:37 - 7 and we can check that data type by
752:40 - saying type and then inserting our
752:43 - variable number undor int and that will
752:46 - tell us that our data type for this
752:48 - variable is an integer let's go ahead
752:50 - and create another one we're going to
752:51 - say num underscore string is equal to
752:54 - and for this one we'll also do a seven
752:56 - but let's check the type and we'll do an
752:59 - open parentheses and we'll say the type
753:01 - of num string and that one is a string
753:04 - now let's say we wanted to add those
753:06 - we'll say Num uncore Sum so the sum of
753:10 - numor int plus numor string now when
753:16 - we're adding these two values it is not
753:18 - going to work it's going to give us an
753:19 - error and it's going to say unsupported
753:21 - op brand for INT and string so it cannot
753:24 - add both an integer and a string what we
753:27 - need to do in order to add these two
753:28 - numbers is to convert that string into
753:31 - an integer so let's go right up here
753:34 - let's add another cell and let's say
753:38 - numor string undor converted is equal to
753:43 - and we want to convert it into an
753:44 - integer so all we have to do to convert
753:46 - it into an integer is type int and then
753:50 - we're going to say num underscore string
753:53 - and that is as easy as it's going to get
753:56 - all we have to do is say integer with
753:58 - our numb string inside of it and then
754:01 - it's going to convert it and we can even
754:03 - check it right after by saying type num
754:06 - string converted and let's run this and
754:08 - now we can see that it was converted
754:10 - into an integer so now let's add that
754:13 - num string converted right
754:15 - here let's copy and replace that string
754:18 - with the string
754:20 - converted and let's actually print out
754:23 - that numor sum and it worked properly
754:28 - now we did not specify what type of
754:30 - value this Num Sum was going to be but
754:33 - because it was two integers in here it's
754:36 - going to automatically apply that data
754:38 - type of integer to that Num Sum let's go
754:41 - right down here and now let's look at
754:43 - how we can convert lists sets and tupal
754:46 - so now let's say we have a listor type
754:50 - and that's equal to 1 2 3 and we can
754:53 - check it again by saying
754:56 - type and that is a list let's say we
754:59 - want to convert it to a tupal it's
755:01 - fairly easy all we're going to do is
755:03 - write Tuple say listor type that list
755:07 - uncore type is now going to be a tupal
755:10 - and we can check that by saying type and
755:13 - wrapping it around this Tuple and it
755:16 - shows us that it is converting that list
755:18 - into a tupal now we can also convert a
755:21 - list into a set but it may change the
755:25 - actual values within it let's check that
755:28 - out really quickly so let's say we have
755:30 - this list and let's add a few more
755:32 - values to this just like that now let's
755:36 - say we want to convert it to a set so
755:38 - we're going to run this and we'll say
755:41 - set of listor type and let's try running
755:46 - this and see what the output is so this
755:47 - is something that you really need to be
755:49 - aware of when you are converting data
755:51 - types because set does not act the same
755:53 - as a list a set is basically going to
755:55 - take the unique values in the list and
755:57 - convert it to a set and it fundamentally
756:00 - changes the data that was in that
756:01 - original list and just to check the data
756:04 - type we can say
756:05 - type I'm just doing this for all of them
756:08 - and as you can see that is now a set now
756:10 - let's go down here and take a look at
756:12 - dictionaries now let's say we have a
756:15 - dictionary called dictionary type and
756:18 - we'll do a squiggly bracket and we'll
756:21 - say name name and we'll do a colon and
756:24 - we'll say Alex then we'll do age and a
756:29 - colon and we'll say
756:31 - 28 and then we'll do
756:36 - hair
756:37 - colon and so really quickly let's take
756:40 - that dictionary type and just confirm
756:43 - that it is a dictionary and it is and
756:46 - now what we're going to do is take a
756:48 - look at all of the items within that
756:50 - dictionary so we're going to do
756:51 - dictionary type. items open parenthesis
756:56 - and this is going to show us all the
756:57 - items within it now we can also take
757:00 - this and look at something like the
757:04 - values and when we run that these are
757:06 - our values So within our dictionary we
757:09 - have items and that's what this is right
757:10 - here this is one item and then within
757:13 - that we have our values which are right
757:15 - here so Alex 28 and Na and then we have
757:19 - something called a key and this is the
757:21 - key the name age and hair are all keys
757:25 - and we can look at that by saying dot
757:28 - keys so let's say we want to take all of
757:31 - the keys and put that into a list what
757:33 - we're going to do is we're going to take
757:34 - this right here say
757:36 - list we'll do an open parenthesis we'll
757:39 - type that in right there so it says a
757:41 - list and we're converting these Keys
757:43 - into a list and let's run that and now
757:46 - this is a list and let's just check the
757:49 - type as well just to confirm
757:52 - and as you can see it was converted
757:54 - properly into a list and we can do the
757:57 - exact same thing with
758:00 - values and the values can also be
758:03 - converted into a list now we can also
758:05 - convert longer strings that aren't just
758:07 - numbers like we did above in our very
758:08 - first example so let's do longcore
758:12 - string and we'll say I like to party now
758:16 - we're going to take this string and
758:18 - we're going to say list long string so
758:22 - we're going to convert this string into
758:24 - a list and let's see what happens so it
758:27 - took every single character in that
758:28 - string and put it into a list and we
758:31 - could also do a set as well that one's a
758:33 - lot shorter because it's only looking at
758:35 - unique values so that is how you convert
758:37 - data types in Python thank you guys so
758:39 - much for watching I really appreciate it
758:41 - if you like this video be sure to like
758:43 - And subscribe below and I'll see you in
758:44 - the next
758:46 - [Music]
758:50 - video
758:52 - [Music]
758:57 - hello everybody today we're going to be
758:59 - working on building a BMI calculator in
759:01 - Python now before we get started I want
759:03 - to show you this BMI calculator that I
759:05 - found online and it shows you the basic
759:07 - calculation that they use and that's the
759:09 - one we're going to use in this video and
759:11 - they also have this calculator right
759:12 - down here and some ranges that we can
759:14 - use for our calculator as well so for
759:17 - reference I weigh about
759:19 - 170 I'm about 5 9 let's calculate this
759:23 - so I'm about a
759:25 - 25.1 BMI which falls into the overweight
759:29 - category that's unfortunate but we can
759:31 - see exactly how this works and how ours
759:34 - should work when we actually build it so
759:36 - we're going to kind of reference this
759:37 - throughout the video so let's go right
759:39 - over here to our BMI calculator we need
759:42 - to calculate weight and height and then
759:45 - run this calculation right here so let's
759:47 - go ahead and copy
759:48 - this and we're going to put it right
759:51 - down here
759:53 - here and so now we have our calculation
759:56 - so what we need is we need input from a
759:59 - user and there is an input function
760:02 - within python that we're going to be
760:03 - using so let's actually give me a few
760:06 - more cells so the first thing that we
760:07 - need to calculate is their weight let's
760:10 - type out weight right here we'll say
760:11 - weight is equal to and this is where
760:13 - we'll use our input function so we'll
760:15 - say input and when we actually run this
760:17 - it's just going to give us this blank
760:18 - square or a user can input something
760:21 - we'll say Alex so this is our output is
760:24 - what the actual user input and it does
760:27 - save it to this variable so if we say
760:29 - print weight it will still print out
760:32 - Alex now this is where we want the user
760:35 - to just like we did before where they'll
760:37 - input their weight so we want to kind of
760:39 - give them a prompt for this we'll put a
760:42 - string in here so I'll do a double quote
760:45 - and then I'll say
760:47 - enter your weight in and we're using
760:51 - pounds
760:52 - say pounds colon space so now when we do
760:56 - this it'll say enter your weight in
760:58 - pounds I'll say 170 and then when we run
761:01 - this it does store that now let's do
761:03 - print I should have saved it wait again
761:06 - oops now it's only storing the value of
761:09 - 170 it's not actually storing this
761:11 - string right here so that's really
761:13 - important for when we do our
761:14 - calculations
761:15 - later um I'm going to I'm going to save
761:18 - this right down here because I'm sure
761:19 - I'm going to use that later um so we
761:21 - have that it's working now we need to
761:24 - also do our height so let's copy this
761:28 - and we'll put it right here and we'll do
761:31 - height and enter your height in inches
761:35 - so now for this one if we hit
761:38 - enter it's actually running let's stop
761:40 - it really quick and interrupt it let's
761:43 - try running this so it's going to say
761:45 - enter your weight and pounds that's the
761:46 - first input say
761:49 - 170 and then when I hit enter it's going
761:52 - to prompt me for that second input and
761:54 - so in inches 59 is 69 in and then I can
762:00 - hit enter again and now we have both of
762:03 - our inputs now we need this calculation
762:06 - right down here and just like that so
762:10 - now we have weight in pounds time 703
762:14 - divided by height in inches by height in
762:16 - inches so we actually have weight and
762:19 - it's already written in there but I'm
762:20 - just going to do like this we'll do
762:22 - weight time 73 so that's pounds there
762:25 - our weight and pounds * 703 divided by
762:28 - now we have our height in
762:31 - inches times the height in inches so
762:34 - this is our calculation right here so
762:37 - let's do this exact same thing let's run
762:39 - this and this times of course is not
762:42 - going to work whoops we need to do our
762:44 - star for both of these all right now
762:48 - this is our calculation so let's run
762:49 - this so we have
762:52 - 170 and that's pounds and inches was 69
762:56 - hit
762:57 - enter and it says cannot multiply the
763:00 - sequence of non- integer type of string
763:02 - Ah that's because these are being stored
763:04 - in strings they right down here I do and
763:08 - we'll do type of height we run that this
763:12 - is actually a string so we want to
763:15 - change that because we don't need that
763:17 - anymore
763:19 - that so we don't want it to be a string
763:22 - we need those to be integers or Floats
763:24 - or really anything besides a string it
763:26 - just needs to be numerical uh so integer
763:28 - float really so let's do integer and
763:30 - we'll wrap that input in it and we'll do
763:33 - the same thing for this
763:36 - one now we have an integer for our
763:38 - weight an integer for our height so now
763:41 - when we're running this calculation it
763:42 - should work properly let's run this
763:44 - again our pounds are
763:47 - 70 our height is 69 in
763:52 - and it's not giving us our output
763:54 - because we're not printing anything okay
763:56 - so I just need to
763:58 - do
763:59 - print BMI so let's try this again 170
764:05 - 69 and there is our BMI 25.1 so it
764:08 - worked the exact same as this one so
764:11 - they input well we input our height we
764:14 - inputed our or we inputed our weight we
764:16 - inputed our height and then it
764:17 - calculated rbmi the next thing that we
764:20 - need to do is we need to kind of give
764:22 - the user some context is that good is
764:25 - there BMI in within a good range a bad
764:28 - range we don't know uh so let's go ahead
764:30 - and I'm going to see if I can copy this
764:33 - know if this will work or
764:34 - not let's go ahead and copy this right
764:36 - down here perfect so what we now need to
764:40 - do is we need to say okay if the user
764:43 - has given us this input we want to give
764:45 - them or tell them if they are a normal
764:48 - weight overweight obese severely obese
764:52 - anything like that and we have these
764:53 - ranges so that should help us out quite
764:55 - a bit so let's just write our if
764:57 - statement and then we'll include it up
764:59 - here but let's go down here and we'll
765:02 - say if and then we'll do BMI and let's
765:05 - just say BMI is greater than zero so if
765:11 - it's greater than zero if they had any
765:12 - input where the BMI was not zero which
765:15 - should be every time if they do it
765:16 - properly and they don't you know put a
765:18 - string in there or something or type out
765:20 - 40 which maybe we should make a prompt
765:22 - for that if that happens then we can say
765:25 - if we'll do
765:27 - BMI and now we need to give that first
765:30 - range so this range right here so if
765:31 - it's under 18.5 so we need to do a less
765:35 - than so if it's less than
765:39 - 18.5 and it just says under it doesn't
765:41 - say under or equal to so I'll keep it at
765:43 - 18.5 so if it's under
765:46 - 18.5 then let's give kind of the output
765:49 - we'll say print
765:51 - and the output or the basically the
765:54 - prompt is underweight so we'll just say
765:57 - you are
766:00 - under under case underweight and just
766:04 - like that um then we're going to pass
766:09 - several ellf statements through here
766:11 - well let's just say else so I guess this
766:14 - would be like if they are if they don't
766:18 - input something properly if something
766:20 - messes up
766:21 - maybe I we could write something like um
766:24 - print
766:25 - oops I'm thinking all this through we
766:28 - can write print
766:30 - enter valid
766:33 - inputs or something like this or we can
766:36 - always change that but let's really
766:38 - quickly let's run
766:40 - this okay so I'm not in that range uh
766:43 - let's make the next one so then I can be
766:47 - within a certain range
766:48 - oops and we need we should need one one
766:51 - more a minimum so we'll say
766:54 - LF and
766:56 - LF these next two are this 24.9 so it's
767:01 - going to check this one first so if it's
767:03 - 18.5 or below 18.5 it's automatically
767:07 - going to print this one so this next one
767:09 - we don't have to do like a range or
767:11 - anything we can just say if it's below
767:15 - if it's between 25 and 29.9 so this one
767:18 - actually should be less than or equal to
767:21 - um this one is normal oh whoops
767:26 - 24.9 so this one is
767:29 - 24.9 this one is going to say you are
767:32 - normal weight so let's run this
767:36 - now let's see BMI was
767:40 - 25.1 oh guys I'm just messing up here I
767:43 - apologize all right this is the one that
767:46 - I was part of so now it's going to be
767:48 - I'm part of the overweight crowd now now
767:50 - let's run this and now our prompt is you
767:52 - are overweight cuz remember the BMI was
767:55 - saved right here as
767:57 - 25.1 down here if we run through this
768:01 - it's saying no you're not in
768:04 - oops get rid of that no you're not in
768:07 - under 18.5 you're not under
768:10 - 24.9 if you under
768:12 - 29.9 you are overweight so that did work
768:15 - properly so that's really good and I
768:17 - don't think I want this to be our output
768:20 - for person because we're going to add
768:22 - this up here it's just going to give us
768:23 - the BMI and then the output is going to
768:26 - say you are overweight uh let's make it
768:27 - a little bit more customized um I'm
768:30 - going to say name is equal to input and
768:34 - then we'll say
768:36 - enter your
768:39 - name um so it'll be enter your name
768:41 - we'll do Alex
768:44 - 70 69 there's our BMI now it's going to
768:48 - run through this logic or it will run
768:49 - through this logic and just just a
768:51 - second
768:53 - when we actually finish this so then we
768:56 - have
768:59 - 34.9 and let's do one
769:03 - more oops and then this one's going to
769:06 - be for
769:09 - 39.9 so this one was overweight this one
769:13 - is
769:15 - obese severely obese so we'll say
769:18 - severely that you spell it really obese
769:21 - and then anything that's over that 40
769:23 - and over so if it's not this one
769:26 - anything else should be S morbidly obese
769:30 - so actually this lse statement right
769:31 - here should
769:33 - say uh you
769:37 - are you are severely obese this is going
769:40 - to say morbidly morbidly obese now I
769:45 - added that name up here because I wanted
769:48 - to add that down below actually so we're
769:50 - we're going to say uh name plus and then
769:55 - we'll do like
769:59 - comma you are underweight so it'll be a
770:01 - little bit more personalized uh I think
770:04 - it'll I think it'll be a nice touch I
770:06 - really do we'll do it like this and
770:08 - we'll say you and let's go back and do
770:10 - that to all of
770:12 - them and let me see how quickly I can do
770:17 - thiss oh whoops what I do get rid of
770:20 - that
770:21 - name plus u like that geez you guys are
770:27 - seeing me mess up a h name plus you and
770:33 - then name plus you so now let's run this
770:38 - and now it's a little more personalized
770:39 - it says Alex you are overweight so this
770:42 - is all really good now this is an if
770:45 - statement um what we had done before I
770:48 - think is actually what we should put
770:49 - right down here so we'll say l else and
770:51 - then if that doesn't work we'll say what
770:54 - do we say enter valid input we'll just
770:57 - put that um and let let me see if I can
770:59 - test this out don't I don't know if this
771:03 - will error out or if this will even
771:06 - work let me just see if I can mess with
771:08 - it and see if I can get it to work
771:10 - actually let's copy this we're going to
771:13 - copy this whole thing we're going to
771:15 - include it right
771:17 - here and now we have basically our
771:20 - entire calculator so um let's run this
771:24 - enter your name we'll say Alex enter
771:28 - your pounds 170 into your inches
771:31 - 69 and then it's going to say
771:34 - 25.1 Alex you are overweight and that's
771:37 - perfect we could even go as far as
771:39 - adding like some feedback we say you are
771:42 - overweight and then it would be a period
771:45 - and we could say um you need to exercise
771:49 - more
771:50 - stop sitting and writing so many python
771:55 - tutorials so now if we run this we'll do
771:59 - Alex
772:02 - 17069 it says Alex you are overweight
772:04 - you need to exercise more and stop
772:05 - sitting and writing so many python
772:09 - tutorials period and that's it this is
772:13 - the entire project um you can go a ton
772:17 - farther you can include much more
772:19 - complex logic you could even build out a
772:22 - UI to create your own you know app just
772:25 - like this where it has this input and
772:27 - this UI you can build that out with in
772:29 - jupyter notebooks with python um but
772:32 - that's not really what this tutorial is
772:34 - for this is just to kind of help you um
772:36 - think through some of the logic of
772:38 - creating something like this so you know
772:40 - I hope that this was helpful I hope that
772:42 - this was fun I like creating stuff like
772:43 - this we have two other projects that
772:45 - we're going to do and maybe I'll include
772:46 - more but we have two right now that I
772:48 - have planned um and I hope those those
772:50 - are helpful this is probably our easiest
772:52 - one and they'll get a little bit more
772:54 - difficult in the next projects so I hope
772:57 - that this was fun I hope that this was
772:58 - helpful and that you can now kind of
773:00 - utilize those python skills that you've
773:02 - been working on if you like this video
773:04 - be sure to like And subscribe below and
773:06 - I'll see you in the next
773:09 - [Music]
773:18 - video hello everybody today we're going
773:21 - to be creating an automatic file sorder
773:23 - for your files and file explorer now out
773:25 - of all the projects that we've done in
773:26 - this series so far I think this one
773:27 - might be the most difficult but I also
773:29 - think this one is the most cool because
773:31 - it has some real life applications so
773:33 - without further Ado let's take a look at
773:35 - some files that we have right down here
773:37 - in my file explorer so I have this
773:39 - beautiful picture of Rosie uh right here
773:42 - this is a PNG file I have a CSV file and
773:45 - a text file and I want to sort all of
773:48 - them into their own folders depending on
773:51 - what kind of file it is so if I go right
773:53 - in here and I click on this one I go to
773:55 - properties I can see that this is a PNG
773:58 - file um if I go into this one I don't
774:00 - need to but if I go into this one it's a
774:02 - CSV file and of course this one is a
774:05 - text file so I want three separate
774:08 - folders in here and I want them to
774:10 - automatically go into those folders
774:12 - without me having to drag and drop and
774:14 - going and clicking now we only have four
774:17 - files here but imagine if we have
774:19 - thousands of files
774:20 - how much time that could save us so
774:23 - let's get out of here and let's start
774:25 - writing our code so we're going to say
774:28 - import OS comma and then we're going to
774:32 - say chut iil now OS obviously stands for
774:36 - operating system shuil uh I don't know
774:39 - what it actually supposed to stand for
774:40 - but what it will allow us to do is do
774:42 - some highlevel operations on our files
774:45 - in file explorer so we're going to go
774:47 - ahead and import those and now that we
774:49 - have those imported
774:50 - uh something that's going to be very
774:52 - important for us to have throughout this
774:53 - whole thing and this is anytime I'm
774:55 - working with like directories or
774:57 - something like this we want to get this
774:58 - path down so I'm going to go ahead and
775:00 - copy this
775:02 - path and we're just going to say path is
775:04 - equal to and we'll do this right here so
775:08 - let's run this and I need to put an R
775:11 - right here to make this a raw text um so
775:14 - when you don't have the r uh it's going
775:16 - to read in these you know these
775:17 - backslashes and these colons and
775:19 - different stuff if we do R it's just
775:21 - going to read it in as the raw string
775:22 - and that's what we want so here's what
775:25 - we need to do there there's a few
775:26 - different things that have to happen
775:28 - when we are writing this out one thing
775:30 - is is we need to go in here and we need
775:32 - to see this path and we need to see are
775:33 - there folders in here already um if not
775:36 - we need to create a folder so that's one
775:39 - of the first things that we need to do
775:41 - the next thing that we need is it needs
775:43 - to check each of these files
775:45 - individually identify what kind of file
775:47 - it is and then put it into the correct
775:50 - folder so we have to create the folder
775:53 - then check these and then place it into
775:55 - the correct folder so let's go right out
775:57 - of here so what we're going to start
776:00 - doing is we're going to start working
776:02 - with these paths and these directories
776:04 - and some of these things you may never
776:05 - have seen before but that's okay I'll
776:07 - try to explain it as I go through so the
776:09 - first thing that we're going to write is
776:10 - os. list directories uh and what this is
776:14 - actually going to do is show us all the
776:15 - files in there we're going to say path
776:18 - so it should show us all the files
776:20 - within path and so here are our results
776:23 - so we have the data professional results
776:26 - fake text file our image and our other
776:29 - image so this is actually showing us
776:31 - what files are in that path and that's
776:33 - super important because we're probably
776:35 - going to have to Loop through this in
776:36 - some way later um I wrote this all out
776:39 - before so I kind of remember but I'm
776:41 - doing this all off the top of my head so
776:43 - I guarantee you throughout this I'll
776:44 - make some mistakes but what we now need
776:46 - to do is we need to create folders or
776:49 - check if there's a folder and create it
776:51 - if it isn't there that's um The Next
776:53 - Step that we need to take so let's go
776:55 - right down here and we want to check if
776:57 - this path exists already so if that
777:00 - folder already exists so we're going to
777:01 - say
777:02 - os. path. exists so this is going to
777:06 - check does this path just like this path
777:08 - up here does it already exist and then
777:10 - we're going to do an open parenthesis
777:12 - we'll say path so that's our path now we
777:15 - need to add a folder name to this um we
777:19 - could hardcode it so we could do plus we
777:22 - could say CSV files and that could work
777:25 - so it would say does this path already
777:27 - exist and we can try running this and
777:30 - it's going to say false so this doesn't
777:31 - already exist but the thing is is we
777:34 - need to create three separate path so we
777:36 - could do this by just hardcoding it in
777:40 - by saying CSV files image files um and
777:43 - text files or we can just put this all
777:45 - in a list and loop through it I think
777:47 - it's just going to be easier to do that
777:50 - or I don't know visually it's going to
777:51 - be easier so we'll do uh folder undor
777:55 - names and we'll say is equal to and
777:58 - we'll create a list so I think I want to
778:00 - call it CSV files comma um image files
778:05 - or PNG files whatever you want to write
778:08 - and then we'll do text
778:11 - files do text files and then we can go
778:15 - right down here um a little for Loop uh
778:19 - I think what we'll do actually let's
778:20 - write
778:21 - folder underscore names um then we can
778:25 - put something like uh let's write Loop
778:30 - why not um so a little trick for the for
778:33 - Loop is you going to say four and we'll
778:34 - say Loop and and we'll just do a range
778:37 - because we want it to basically go
778:39 - through here we don't want it to
778:40 - actually give us these file names we
778:42 - just want it to count Zer one and two so
778:45 - if we do range from Zer to two zero uh 0
778:50 - one2 that should work if we do um this
778:53 - then when it Loops through it's going to
778:54 - call folder name and say zero which
778:56 - would be CSV files image files and text
778:59 - files um so
779:02 - let's uh yeah I need a colon let's run
779:06 - through this really quickly uh shouldn't
779:08 - do
779:09 - anything but what we can do now is we
779:12 - can say okay if this does not exist what
779:16 - we can do is actually create it so we'll
779:19 - say
779:20 - if not so if this does not exist then
779:24 - what we're going to do is take
779:28 - this and we'll say
779:31 - os. make directory and then we'll do
779:36 - just like that um I think it's make
779:40 - directory S I can't I think that's
779:42 - correct um so let's test this out really
779:45 - quickly let's see if this
779:47 - works and invalid syntax I I need a
779:50 - colon okay so I just ran this let's see
779:53 - if it did actually make those
779:56 - folders let's refresh it and it didn't
780:00 - so let's just print this off um so if
780:04 - not let's just print let's see does this
780:07 - actually
780:08 - work let's do
780:11 - if
780:13 - okay ah okay so I think I know what
780:17 - might be happening I think it's giving
780:19 - us it actually be let let's check this
780:20 - really quick go to python
780:23 - tutorials oh
780:25 - no I think it's
780:27 - creating yeah it's creating these Python
780:29 - tutorial images right here whoops okay
780:32 - so I just figured it out um let's go
780:34 - back into python tutorials don't take a
780:36 - look at any of those notebooks those are
780:38 - secret um we were creating them in the
780:41 - wrong place um and that's because of
780:44 - this right here we need a backslash so
780:46 - we need to actually include a backslash
780:49 - right here here in this path we didn't
780:51 - have that um e y scanning string
780:57 - literal okay so this back slash could
781:00 - cause an issue let's see if I can do
781:01 - forward slashes on all these just stick
781:04 - with me guys I might cut this out I
781:06 - might not we'll see if this is important
781:08 - just going to keep talking while we're
781:10 - doing it um let's run
781:13 - this okay so now that we're doing these
781:16 - forward slashes we're still checking
781:18 - let's make sure we can still check those
781:20 - files good now when we Loop through this
781:23 - I'm not going to well yeah I can print
781:25 - it off doesn't matter I'm going to print
781:26 - it and we'll see if that name works and
781:29 - then we're also going to
781:32 - um uh I said if so if it exists then
781:36 - make it no no no so if not I think the
781:38 - not did make sense we just weren't sure
781:40 - we had to do some um checking so if it
781:43 - exists then we're going to create it and
781:45 - we'll keep the print in there because it
781:46 - doesn't really matter so it's going to
781:48 - create the CSV an image but didn't
781:51 - create the text let's see okay let's uh
781:56 - I don't know why this would work but
781:57 - let's run it okay so I think I just had
782:00 - the wrong range so now we have our
782:02 - images all through or we have our
782:05 - folders all three folders now we need to
782:07 - write a script that will read in these
782:10 - and check and see what kind of file it
782:12 - is and place it into the correct
782:15 - folder so let's come right down here and
782:19 - let's see what we need to do so now I
782:21 - think we need to use this right here um
782:25 - I think we need to Loop through this to
782:27 - be able to check each one so we need to
782:28 - name this so we'll just do um file name
782:32 - is equal to run that so now we have this
782:35 - file name um and what we can do is Loop
782:39 - through this so let's say let's say for
782:44 - file in file name so we're going to Loop
782:47 - through this now when it goes through it
782:49 - needs to check the it's going to check
782:53 - the file path and in the file path it'll
782:55 - say. txt CSV so let's say um if I think
783:01 - it should be CSV Let's test it on this
783:04 - one but if CSV is
783:07 - in file name or actually it's file so if
783:12 - if it's in
783:13 - file and not in and oh not not in if
783:19 - it's also not in this I believe because
783:23 - we're going to check we're going to
783:24 - check each of those folders so we're
783:27 - going to Loop through and it's going to
783:29 - check and see if the CSV so if that
783:32 - string is in the
783:34 - file then what we want to do is check
783:39 - that it's also not in here that's
783:42 - actually just the folder we also need um
783:46 - also we're not doing that for Loop
783:48 - anymore um
783:50 - um okay I'm sorry I'm talking this
783:52 - through I'm figuring it out as I go
783:54 - because I may have forgotten some of
783:56 - this so we're going to say this that's
783:59 - the CSV files so we need to check this
784:03 - one um let's do it like this oops okay
784:09 - so it's going to check to see if CSV
784:11 - files and I think it needs that in
784:13 - between it so it's going to say the path
784:15 - so there's our path plus slash C SV
784:19 - files um actually no it needs to be like
784:23 - this CU we're going to check that then I
784:25 - got it all right I figured it out now
784:27 - then we're going to check if this file
784:29 - is in there yeah so that's right so it
784:31 - says if the
784:33 - CSV is in the
784:35 - file um which is right where am I
784:40 - looking oh file name so if it's in that
784:43 - list of the actual files which is all of
784:45 - these if we find CSV in any of these
784:48 - files
784:50 - and it's not already in here so it's
784:53 - going to say path plus CSV files did I
784:56 - say files yeah CSV files plus file okay
785:00 - that all looks correct so if it's not in
785:03 - there we're going to use shuttle. move
785:05 - now this is how we actually move the
785:07 - file it gives us the ability to move
785:09 - what we want then we'll say move we need
785:12 - to take it from our initial path to our
785:14 - new path so we're going to specify we'll
785:17 - separate by comma we need to spef ify
785:19 - its original path which it should just
785:22 - be
785:24 - this without this I think it should be
785:29 - file path because this is where it is
785:31 - now it's in the FI this path with that
785:33 - file name then we need to say we want to
785:37 - move it to here that is what we want to
785:39 - do
785:42 - um yeah so let's check it with just this
785:44 - one and see if it works okay it ran
785:47 - through it let's go check
785:49 - aha now that CSV file is gone perfect
785:52 - that is exactly what we want it to
785:54 - happen now we can just recreate this
785:58 - for um for both our PNG files our image
786:03 - files and our text files so we'll say LF
786:06 - and
786:08 - LF and let's do
786:11 - PNG then we'll do image
786:15 - files and image files because again
786:18 - we're just doing the exact same thing I
786:19 - can do text files the next one's going
786:22 - to be text files text files so this
786:25 - one's going to check for
786:27 - txt now do we need anything else um
786:31 - we'll just say else and we'll print off
786:35 - print this file type is not included or
786:41 - or if there's multiple files we'll say
786:43 - there are files in this
786:48 - path that were're not
786:51 - moved okay so if we run through this
786:56 - it's going to catch our CSV catch our
786:58 - PNG catch our text and if not it'll say
787:01 - there are files in this path that we're
787:02 - not moved exclamation point all right
787:05 - now let's run through
787:07 - this
787:09 - uh uh that's because if LF LF L
787:14 - if and then it's going to this lse
787:17 - statement uh I don't know let's let's
787:19 - Circle back around to that in a second
787:22 - all of them were moved properly that's
787:25 - really
787:27 - good really quickly I I'll I'll check
787:30 - and see I just don't I'm G to take that
787:31 - out for now so I'm just going to run it
787:34 - um I'm we may or may not go back to that
787:36 - but let's check and see if everything
787:38 - worked properly so let's go into the CSV
787:40 - file and we have our CSV file let go
787:43 - into our image files and we have our
787:46 - images and let's go into our text file
787:49 - and there are our text files now is
787:53 - there anything else that we need to do I
787:56 - don't believe so but what I can do is I
788:00 - can take all
788:02 - this I can include it in
788:04 - here and I'm going
788:08 - to basically restart
788:12 - it just to see if it works properly from
788:15 - scratch right I just want to make sure
788:18 - that I didn't miss it anything and we'll
788:20 - delete
788:21 - these so we have our I'm just going to
788:24 - rerun everything we we
788:26 - imported we created our path these are
788:29 - our file names and then when we run this
788:31 - it should take our folder names check
788:34 - through them if they aren't already
788:36 - created it's going to create it don't
788:38 - need it to print so let's get rid of
788:40 - that then for the file within our file
788:44 - names and it check it it checks each one
788:46 - we check if there's a CSV and if it's
788:48 - already already in that file if it's
788:51 - already in that folder I mean if it's in
788:53 - that folder then it doesn't do anything
788:54 - but if it isn't so and not it's not in
788:58 - there it is going to move it to that
789:00 - location so it's going to check CSV PNG
789:02 - and text I think everything should work
789:05 - properly let's run
789:07 - this and it looks like it's working good
789:11 - good good and perfect it worked exactly
789:15 - how I had hoped um that's great so
789:19 - this is the automatic file sorder in
789:23 - file explorer project uh you can go even
789:25 - a step further so I had to come in here
789:27 - and manually run this you can go a step
789:29 - further and put a timer on this where it
789:32 - automatically does this maybe every hour
789:35 - every day every 30 minutes you can run
789:38 - this in your background especially if
789:39 - you create um like a an execution for
789:43 - this you can run this in your background
789:45 - um if you are curious on how to do that
789:48 - I think I did something something
789:49 - similar to that in my web scraping
789:51 - project um my Amazon web scraping
789:54 - project if you want to go check that one
789:55 - out but we're not going to do it in this
789:56 - project this is all I wanted to show you
789:58 - how to do so I hope that this was
790:00 - helpful I hope that this project was you
790:02 - know interesting and that you liked it I
790:04 - hope that you learned something and so
790:05 - if you did be sure to like And subscribe
790:08 - below and I will see you in the next
790:09 - video what's going on everybody welcome
790:11 - back to another video today we're going
790:13 - to be starting our python web scraping
790:15 - tutorial series now this is more of a
790:17 - continuation of the Python tutorial
790:18 - series series but because we're going to
790:20 - be focusing on web scraping for three or
790:21 - four videos I wanted to just make it its
790:23 - own little minseries in this series I'm
790:25 - going to show you the basics of web
790:27 - scraping how to actually look at HTML
790:29 - how to inspect a web page how to pull
790:31 - that data in and then even put it into a
790:33 - CSV file so you can save it and use it
790:35 - now in this series we're just covering
790:36 - the basics which is a fantastic place to
790:38 - start but in future series I'll be going
790:40 - into some of the more advanced web
790:41 - scraping topics as well so without
790:43 - further Ado let sh up on my screen and
790:44 - get started with web scraping now the
790:46 - first thing that we need to learn is
790:47 - HTML HTML stands for hypertext markup
790:51 - language and it's used to describe all
790:53 - of the elements on a web page now when
790:56 - we actually go to a website and start
790:57 - pulling data and information we need to
791:00 - know HTML so we can specify exactly what
791:02 - we want to take off of that website so
791:04 - that's where HTML comes in and we're
791:06 - going to look at the basics
791:07 - understanding just the basic structure
791:09 - of HTML then we'll go look at a real
791:11 - website and you'll kind of see that's a
791:13 - little bit more difficult than what we
791:14 - just have right here but this is the
791:16 - basic building blocks to get to what the
791:19 - HTML actually looks like on a website
791:21 - now this is basically what HTML looks
791:24 - like we have these angled brackets with
791:26 - things like HTML head title body and
791:30 - then you'll notice that at the end we'll
791:33 - have a body and then we'll have a body
791:35 - at the bottom this forward SL body
791:38 - denotes that this is the end of the body
791:40 - section in HTML so everything inside of
791:43 - this is within this body so there is
791:46 - this hierarchy within HTML we have HTML
791:50 - and HTML at the bottom which
791:51 - encapsulates all the HTML on the website
791:54 - then we have things like head and head
791:56 - body and body now Within These sections
791:59 - we usually have things like classes tags
792:01 - attributes text and all these other
792:03 - things things that we'll get to in
792:04 - different lessons but one of the easiest
792:06 - ones to notice and look at are tags
792:09 - things like a P tag or a title tag now
792:12 - Within These tags because this is a
792:14 - super simple example we have these
792:16 - strings here my first web page page and
792:19 - this is what's called a variable string
792:21 - and this is actual text that we could
792:22 - take out of this web page now that you
792:25 - understand the super basics of HTML
792:27 - let's actually go to our website and I'm
792:29 - going to have a link down below but it's
792:31 - going to be this one right here this is
792:32 - basically just a website that you can
792:34 - you know practice web scraping on it's
792:36 - called scrape the
792:38 - site.com and what we're going to do is
792:40 - look at the HTML behind this web page
792:42 - and you can do this on any website that
792:44 - you go on so we're going to right click
792:46 - we're going to go down to inspect
792:50 - now right off the bat this looks a lot
792:52 - more complicated and a lot more complex
792:55 - than the very simple illustration that
792:57 - we were looking at but let's kind of
792:59 - roll this up just a little bit you'll
793:01 - notice we have HTML and HTML at the
793:03 - bottom we have a head and there is the
793:05 - end of the head and then a body and the
793:07 - end of the body so in a super simple
793:10 - sense it is similar but just the
793:13 - information that's within it is a lot
793:15 - more difficult now if we look at this
793:17 - title right here this is our title tag
793:19 - if we click this little arrow this is
793:22 - our dropdown you'll notice that here we
793:24 - have the string hockey teams forms
793:26 - searching imp pagination now let's say
793:29 - we didn't know we didn't want to click
793:31 - on that and go find it there's something
793:33 - that's super helpful within this
793:35 - inspection page that you can click on
793:36 - right here it says select an element in
793:39 - the page to inspect it so we're going to
793:40 - click on that and as we go through our
793:43 - page and let's click on this title it's
793:45 - going to take us to exactly where this
793:47 - is in our our HTML this is extremely
793:50 - helpful extremely useful for example
793:53 - let's say the data I want is down here I
793:55 - want to take in the Boston Bruins I can
793:57 - click on it and it's going to take me to
793:59 - where that is exactly in the HTML this
794:02 - is where we can start writing our web
794:03 - scraping script to specify okay I'm
794:05 - looking for a TR tag I'm looking for a
794:07 - TD tag I'm looking for the class called
794:09 - team this is all information and things
794:12 - that we can use to specify exactly what
794:14 - we want to pull out of our web page now
794:17 - there are other things that didn't
794:18 - really look at as well in just our
794:20 - simple illustration let's come right
794:23 - over here there's things like HRS now
794:26 - these are hyperlinks so if we went and
794:28 - then clicked on this this is just
794:30 - regular text but inside of it is this
794:32 - hyperlink where if we clicked on it it
794:34 - would take us to another website and
794:36 - typically that's denoted by this hre
794:38 - right here then you'll typically see
794:40 - things like a P tag which usually stands
794:42 - for a paragraph now the last thing that
794:44 - I want to show you while we're here and
794:46 - we're going to learn a lot more in the
794:47 - next several lessons
794:49 - but if we come right down here there is
794:51 - this actual entire table here and let's
794:53 - try to find this table and I'm having
794:55 - trouble selecting the entire thing but
794:57 - let's select this team name and if we
794:59 - look at this team name you can see that
795:01 - this is encapsulating the table this
795:03 - table tag now these are super helpful
795:05 - because it takes in the entire table now
795:07 - if we wrap this up and we look just at
795:10 - this it says class table and then we
795:12 - have the end of this table tag now when
795:15 - we open it it's going to have all of
795:17 - this information so as you can see as
795:18 - I'm highlighting over it we have these
795:20 - th tags and we have these TD tags and
795:24 - even these TR tags which is the
795:27 - individual data and this is something
795:29 - that we'll look at when we're actually
795:30 - scraping all of the data from this table
795:32 - in a future lesson so this is how we can
795:34 - use HTML how we can inspect the web page
795:37 - and see exactly what's going on kind of
795:39 - under the hood and then in future
795:40 - lessons we'll see how we can use this
795:42 - HTML to specify exactly what data we
795:44 - want to pull out thank you guys so much
795:46 - for watching if you like this video be
795:48 - be sure to like And subscribe below I
795:49 - will see you in the next
795:53 - [Music]
796:03 - lesson hello everybody in this lesson
796:05 - we're going to be taking a look at
796:06 - beautiful soup and requests now these
796:08 - packages in Python are really useful
796:11 - these are the two main ones that I use
796:13 - when I was first starting out with web
796:14 - scraping it can get a lot of what you
796:16 - want done in order to get that
796:17 - information out now of course there are
796:19 - other packages that you can use that may
796:21 - be a little bit more advanced but again
796:23 - this is just the beginner Series in a
796:25 - future series we'll look at other
796:26 - packages as well that have some more
796:28 - advanced functionality so what we're
796:29 - going to be doing is we're going to
796:30 - import these packages and then we're
796:32 - going to get all of the HTML from our
796:34 - website and make sure that it's in a
796:36 - usable State and then in the next lesson
796:38 - we're going to kind of query around in
796:40 - the HTML kind of pick and choose exactly
796:43 - what we want we look at things like tags
796:45 - variable strings classes attributes and
796:47 - more so let's get started by importing
796:50 - our packages what we're going to say is
796:52 - from bs4 this is the module that we're
796:55 - taking it from we're going to say import
796:58 - and then we'll do
797:00 - beautiful soup then we're going to come
797:02 - down and we're going to say import
797:05 - requests now let's go ahead and run this
797:07 - I'm going hit shift enter and it works
797:09 - well for me now if this does not work
797:11 - for you you may potentially need to
797:13 - actually install bs4 so you may have to
797:15 - go to your terminal window and say pip
797:17 - install BS 4 I'll just let you Google
797:19 - how to do that if you need to do that
797:20 - cuz it's pretty easy but if you're using
797:22 - Jupiter notebooks through Anaconda like
797:24 - how we set it up at the beginning of
797:26 - this python series then you should be
797:28 - totally fine it should be there for you
797:29 - the next thing that we need to do is
797:31 - specify where we're taking this HTML
797:33 - from so what we need to actually do is
797:35 - come right over here to our web page and
797:38 - we need to get the URL so we're going to
797:40 - go here we're going to copy this URL and
797:42 - I'm just going to put it right here for
797:43 - a second and what we're going to do is
797:45 - we're going to be using this URL quite a
797:47 - bit so we just want to assign it to a
797:49 - variable so just say URL is equal to and
797:52 - then we'll put it right in here now we
797:55 - can get rid of that so now this is our
797:57 - URL going forward this is where we're
797:58 - going to be pulling data from let's go
798:00 - ahead and run this now we're going to
798:02 - use requests and what we're going to do
798:04 - is we're going to say
798:06 - requests.get and then we're going to put
798:08 - in url now this get function is going to
798:11 - use the request Library it's going to
798:13 - send a get request to that URL and it's
798:16 - going to return a response object let's
798:18 - go ahead and run
798:19 - this as you can see here I got a
798:22 - response of 200 if you got something
798:24 - like a 204 or a 400 or 401 or 404 all
798:29 - these things are potentially bad
798:31 - something like a 204 would mean there
798:32 - was no content in the actual web page
798:34 - 400 means a bad request so it was
798:37 - invalid the server couldn't process it
798:39 - and you don't get any response if you
798:40 - got a 404 that might be one that you're
798:42 - familiar with that's an error that means
798:44 - the server cannot be found the next
798:46 - thing that we're going to do is take the
798:48 - HTML now if you remember we come right
798:50 - back here and we inspect this we have
798:52 - all this HTML right here now on this web
798:55 - page specifically right now it's
798:58 - completely static it's not a bunch of
798:59 - moving stuff or anything like that
799:01 - usually when you're looking at HTML if
799:03 - you're looking at something like Amazon
799:04 - and those web pages can update but when
799:06 - you actually pull that into python
799:08 - you're basically getting a snapshot of
799:10 - the HTML at that time so what we're
799:12 - going to do is bring in all of this HTML
799:15 - which is our snapshot of our website and
799:17 - then we can take a look at it so we're
799:19 - going to come right down here and now
799:21 - we're going to say beautiful soup so now
799:23 - we'll use the beautiful soup package or
799:25 - Library so we need to say beautiful soup
799:28 - and we're going do an open parenthesis
799:29 - we're going to do two things there's two
799:31 - parameters that we need to put in here
799:32 - first we need to put in this get request
799:35 - we actually need to name this and we'll
799:36 - call this page we'll say page is equal
799:39 - to and let's run this and now we're
799:42 - going to put that page in here and what
799:44 - we're going to say is do text so the
799:46 - page is what's sending that request and
799:48 - then the text is what's retrieving the
799:50 - actual raw HTML that we're going to be
799:52 - using then we're going to put a comma
799:54 - here and what we need to specify is how
799:56 - we're going to parse this information
799:58 - now this is an HTML so what we're going
800:00 - to do is HTML just like this this is a
800:04 - standard this is already built into to
800:05 - this Library so we don't need to go any
800:07 - further but it's basically going to
800:08 - parse the information in an HTML format
800:11 - let's go ahead and run this let's see
800:13 - what we get and as you can see we have a
800:16 - lot of information and as we scroll down
800:19 - I'll try to point out some things that
800:20 - we've already looked at in previous
800:22 - lessons
800:25 - um something like this th tag that
800:28 - should be very similar that's the title
800:30 - then we have these TD tags and then of
800:32 - course if we scroll down even further
800:34 - we'll have things like ATR tag so these
800:36 - are all things that we looked at in that
800:38 - first lesson when learning about HTML
800:40 - now again we want to assign this to a
800:42 - variable so we're going to say soup
800:45 - that's going to say equal to this
800:47 - information information right here now
800:49 - I'm not going to go into all the history
800:50 - behind beautiful soup what I will say is
800:52 - the guy who created this beautiful soup
800:54 - Library uh what he said was is that it
800:56 - takes this really messy HTML or XML
800:59 - which you can also use it for and makes
801:01 - it into this kind of beautiful soup so I
801:03 - just thought that was kind of funny uh
801:05 - but that's why we're calling it soup
801:06 - right here and we're going to go ahead
801:08 - and run this and we'll come right down
801:10 - here and we'll say print soup and let's
801:13 - run it and now we have everything in
801:16 - here so we have our HTML L our head we
801:19 - have some HR and some links in here
801:23 - let's scroll down a little bit more and
801:24 - then we have our body right there and of
801:27 - course we have a bunch of information in
801:28 - here now in the next lesson what we're
801:31 - going to be doing is learning how to
801:32 - kind of query all of this to take
801:34 - specific information out and basically
801:36 - understand a lot of what's going on in
801:37 - this HTML to make sure we can actually
801:40 - get what we need now if this looks
801:41 - really kind of messy to you and it just
801:44 - doesn't make a lot of sense there is one
801:46 - more thing that I'm going to show you
801:48 - and we'll come right down here so we'll
801:49 - say soup. pry and if you've ever used a
801:53 - different type of programming languages
801:55 - uh pry is very common in a lot of them
801:58 - where it'll just make it a little bit
801:59 - more easy to visualize and see uh you'll
802:01 - notice that it kind of has this
802:02 - hierarchy built in whereas if we scroll
802:05 - up there's no hierarchy built in it's
802:07 - all just down this left hand side so if
802:09 - you kind of want to view it and just
802:11 - kind of visually see the differences
802:13 - this does help a lot but it doesn't
802:16 - actually help a lot when you're you know
802:18 - querying it or using you know find and
802:20 - find all which is what we're going to
802:21 - look at in the next lesson so that is
802:23 - our lesson on beautiful soup and
802:25 - requests in the next two lessons we're
802:27 - going to be looking at find and find all
802:29 - as well as really diving into things
802:30 - like variable strings and tags and
802:32 - classes and all those things and then in
802:33 - the last lesson we're going to do kind
802:34 - of this mini project where we try to get
802:36 - all the data from this web page that
802:38 - we've been using from that table and put
802:40 - it into a panda's data frame so thank
802:43 - you guys so much for watching I really
802:44 - appreciate it if you like this video be
802:46 - sure to like And subscribe below and I
802:48 - will see you in the next
802:51 - [Music]
803:01 - lesson hello everybody in this lesson
803:03 - we're going to be taking a look at find
803:05 - and find all really we're going to be
803:07 - looking at a ton of different things in
803:09 - this lesson this is where we really
803:10 - start digging in seeing how we can
803:12 - extract specific information from our
803:15 - web page but in order to do that let's
803:17 - set everything up where we actually
803:18 - bring in the HTML like we did in the
803:20 - last lesson and we're just going to
803:22 - write all this out one more time just
803:23 - for practice if nothing else and then
803:26 - we'll get into actually getting that
803:28 - information from the HTML so we're going
803:30 - to start by saying from bs4 import
803:35 - beautiful soup there we go and import
803:40 - requests we'll go ahead and run this
803:42 - then we're going to come up here grab
803:44 - our HTML or sorry our URL so we'll say
803:48 - URL is equal to and we'll have that
803:51 - right here now we need to say page is
803:54 - equal to and then we'll do
803:56 - requests.get and then we'll put in our
803:59 - URL right here and we're going to come
804:01 - over here and run this and lastly we
804:03 - need to say soup so we'll say soup is
804:05 - equal to beautiful soup there we go and
804:09 - then within our parentheses we need to
804:11 - specify the page. text because we need
804:13 - that and our parser which is
804:16 - HTML
804:18 - and there we go and let's go ahead and
804:20 - run this let's print it out make sure
804:22 - it's
804:23 - working and there we go so we have our
804:27 - soup right here all this should look
804:29 - really similar to uh our last lesson and
804:32 - so now we've brought in our HTML from
804:35 - our page we have a lot a lot a lot of
804:37 - information in here now really quickly
804:40 - let's come over and let's inspect our
804:42 - web
804:43 - page now in here we have a ton of
804:47 - information right we have bunch of
804:49 - different tags and classes and all these
804:50 - other things but how do we actually use
804:53 - these well that's where the find and
804:55 - find all is going to come into play and
804:57 - they're pretty similar and you'll see
804:59 - that in just a little bit but let's say
805:01 - we want to take uh one of these tags and
805:04 - let's come down let's say we just want
805:06 - to take this div tag now there's going
805:09 - to be a lot of different div tags in our
805:12 - HTML but let's just come right here
805:15 - let's go down and let's say
805:18 - we're going to call Soup we're going to
805:19 - say soup that's all of our information
805:20 - we're going to say do find now within
805:23 - our parentheses we can specify a lot of
805:25 - different things but we're going to keep
805:26 - it really simple right now we're just
805:28 - going to say
805:29 - di let's go ahead and run this what this
805:31 - is going to bring up is the very first
805:34 - div tag in our HTML and that's going to
805:36 - be this information right here now let's
805:40 - copy this and we're going to do the
805:41 - exact same thing except we're going to
805:44 - say find underscore all now let's run
805:48 - this now we're going to have a ton more
805:51 - information really all find and find all
805:54 - do is that they find the information now
805:56 - find is only going to find the first
805:59 - response in our HTML Le that's the div
806:02 - class container let's go back up to the
806:04 - top that's our div class container but
806:07 - find all is going to find all of them so
806:10 - it'll put it in this list for you so
806:12 - it's going to have this first one and it
806:13 - goes down to uh this SL div which should
806:16 - be right here and then we have a comma
806:20 - which separates our next div tag so that
806:23 - is how we can use it now what if we want
806:24 - to specify one of these div tags we
806:27 - pulled in a ton of them but we want to
806:29 - just look for one of them well this is
806:31 - something where the class comes in handy
806:33 - because right now we have class is equal
806:34 - to container classes equal to co
806:38 - md-12 I don't know what these are at the
806:40 - off the top of my head but um usually
806:43 - they'll be somewhat unique and we can
806:45 - use these to help us specify what we're
806:47 - looking for for example just kind of
806:49 - glancing of this we could also use this
806:51 - a tag if we wanted to look at this so we
806:53 - could say oh we're looking for uh these
806:55 - hrefs so we have an hre here and this
806:59 - right down here we have this hre as well
807:01 - which again uh if you remember from
807:03 - previous lesson that stands for a
807:04 - hyperlink now something like the class
807:07 - or the href um or these IDs these are
807:10 - all attributes so we can specify or kind
807:14 - of filter Down based off of these now
807:15 - let's try it so what we can do is we can
807:17 - do class first and this is kind of the
807:19 - default uh within something like find
807:21 - all is you can even do class underscore
807:25 - we can come right back up we have this
807:27 - div and then here's our class so again
807:29 - we have to have the div and the class if
807:31 - we took this a tag this is an a tag
807:34 - which would go right here with the class
807:36 - of something like navlink or something
807:38 - like navlink again down here we need to
807:40 - specify that more but we have our div so
807:43 - we'll say CL Cole
807:45 - md12 right here and let's go ahead and
807:48 - run this and now it's going to pull in
807:50 - just that information now we're still
807:51 - getting a list because we have multiple
807:54 - of these so this div class uh Cole md-12
807:58 - doesn't just happen once if we scroll
808:00 - down we'll see it multiple times
808:03 - something like right here uh or actually
808:06 - let me see right here so here's this
808:08 - comma then here's our next one so we
808:10 - have two of these uh div tags with a
808:13 - class of coal- md-12 and in each of
808:16 - these we have different information this
808:19 - looks like a paragraph with this P tag
808:21 - right here and let's scroll back up uh
808:25 - so I also think we should try out doing
808:27 - something like this P tag typically
808:29 - these P tags stand for paragraphs or
808:31 - they have text information in them let's
808:33 - try to P tag really quickly and let's
808:35 - just see what we get and let's run this
808:38 - and it looks like we get multiple P tags
808:41 - now if we come back here you can see
808:43 - that there's this information and it's
808:45 - this information that we're pulling in
808:47 - and I'm just you know noticing that from
808:49 - right here and then we have this
808:51 - information right here and it looks like
808:53 - there's one more which is this href
808:56 - which looks like this open source so
808:58 - data via and then that uh hyperlink or
809:01 - that link right there so we have three
809:03 - different P tags now just to verify and
809:06 - make sure that that's correct what we
809:08 - could do is come over here we're going
809:10 - to click on this paragraph it's going to
809:12 - take us to that P tag where the class is
809:15 - equal to lead let's come over here and
809:18 - look at this paragraph now we have
809:20 - another P tag right over here with the
809:23 - class is equal to glyphicon glyphicon
809:26 - education I have no idea what that means
809:29 - um and then we'll go to our last one
809:31 - which is right here where the P tag is
809:33 - equal to uh we have a tag HRA class uh
809:38 - and a bunch of other information so
809:39 - let's say we just wanted to pull in this
809:42 - paragraph right here let's go here and
809:44 - see how we can specify this information
809:47 - so it looks like P or the class is equal
809:49 - to lead that looks like it's going to be
809:52 - unique to just that one so if we come
809:54 - down here we're going to say comma and
809:57 - it was class so you can do uh class
810:00 - underscore is equal to and then we're
810:03 - going to say lead let's try running this
810:06 - and we're just pulling in that
810:08 - information now let's say we actually
810:10 - want to pull in this paragraph We
810:12 - actually want this text right here and
810:15 - this is a very real use case you know
810:17 - let's say I'm trying to pull in some
810:18 - information or or a paragraph of text
810:21 - well let's copy this and what we're
810:23 - going to then do is say. text and let's
810:27 - run this now we're going to get an error
810:29 - right here and this is a very common
810:30 - error because we're trying to use find
810:33 - all unfortunately find all does not have
810:37 - a text attribute we actually need to
810:39 - change this to find typically when I'm
810:42 - working with these find and find alls
810:44 - I'm using findall most of the time until
810:47 - I want to start extracting text then
810:49 - when I specify it I'll change this back
810:52 - to find just like this now let's try
810:55 - this and now we're getting in
810:57 - parentheses this information now this is
810:59 - all wonky it needs to definitely be
811:01 - cleaned up a little bit but if we code
811:03 - back up it's no longer in a list and we
811:07 - no longer have things like these P tags
811:09 - in here or this class attribute so we're
811:13 - really just trying to pull out this
811:14 - information now again this does not look
811:17 - perfect we could even try to do
811:19 - something like do strip look like
811:21 - there's some white space uh that cleans
811:23 - it up a little bit this definitely looks
811:26 - a little better um and we could
811:28 - definitely go in here and clean this up
811:29 - more but just for you know an example
811:32 - this is how we can then extract that
811:33 - information now let's look at one more
811:36 - example this is some information and
811:38 - this is what we're going to do kind of
811:39 - our little mini project in the next
811:40 - lesson on let's say we wanted to take
811:42 - all this information what if we wanted
811:44 - to pull in something like the team name
811:47 - that's going to be in right here in this
811:49 - TR tag and each of these TR tags have th
811:53 - tags underneath them so if we scroll
811:55 - down you'll notice that each row is this
811:58 - TR tag so let's go ahead and search for
812:02 - let's do th let's just search for that
812:05 - first so let's come right back up here
812:08 - let's use this find
812:10 - all and we'll get rid of this text for
812:13 - right now and let's just say we want to
812:16 - look for the TR is that what we said we
812:20 - were looking for no th so let's say
812:22 - we're looking for th let's go ahead and
812:25 - run this so we're going to have
812:26 - underneath this th we have team name
812:28 - year wins losses and notice these are
812:31 - all the titles so these titles are the
812:34 - only ones with these th tags if we go
812:38 - down you'll notice that the data is
812:40 - actually TD tags so now let's go back
812:43 - and look for TD we'll say
812:47 - D and this is going to be a lot longer
812:50 - we have a lot of information but these
812:51 - are all the rows of data let's see if we
812:54 - can just get one piece of this data
812:56 - we're going to get back we want just
812:58 - this team name that's all we're trying
812:59 - to pull in for now um and then we'll try
813:02 - to get this row and then in the next
813:04 - lesson we're going to try to get all of
813:06 - this information make it look really
813:08 - nice and then we'll put it into a
813:10 - panda's data frame so let's just get
813:11 - this team name right now let's go ahead
813:14 - we're going to say th
813:17 - let's run this and we have this th and
813:20 - now that we know we're getting this
813:22 - information in we can
813:25 - do find let's run this so there's our
813:29 - team name we're just going to say. text
813:33 - and again we can do do strip just like
813:36 - that and Bam we have our team name so
813:39 - you can kind of start getting the idea
813:41 - of how we're pulling this information
813:43 - out we're really just specifying exactly
813:46 - what we're seeing in this HTML and
813:48 - what's really really helpful and you
813:50 - know something that I do all the time is
813:52 - I'm inspecting it I'm just kind of
813:54 - searching like how what do I want what
813:56 - piece of information do I want then I go
813:58 - ahead and click on it and then I'm
813:59 - looking you know where is this sitting
814:01 - in the hierarchy it's within the body
814:03 - it's within this table with the class of
814:05 - table then it's down here where this TR
814:08 - tag and then this TD tag so I'm looking
814:10 - kind of at the hierarchy and I'm
814:12 - specifying exactly what I'm looking for
814:14 - so that is what we're going to look at
814:16 - in today's lesson that's how we can use
814:18 - find and find all we were able to look
814:20 - at classes and tags and attributes and
814:23 - variable strings which is this right
814:25 - here getting that text uh and variable
814:28 - strings and we will look at find and
814:30 - find all and how it's pulling that
814:32 - information in and how we can specify
814:34 - exactly what we're looking for now in
814:35 - the next lesson which is definitely
814:37 - going to be the most exciting one we're
814:39 - going to try to pull in all of this
814:40 - information so every single thing
814:43 - because we'll be able to put all this
814:45 - information into a data frame which then
814:47 - we can use pandas to really search and
814:49 - manipulate that data within that data
814:52 - frame so with that being said that is
814:53 - the end of this lesson if you like this
814:55 - video be sure to like And subscribe I
814:57 - will see you in the next
815:00 - [Music]
815:10 - lesson hello everybody in this lesson we
815:13 - are going to be scraping data from a
815:14 - real website and putting it into a p
815:16 - and's data frame and maybe even
815:18 - exporting it to CSV if we're feeling a
815:20 - bit spicy now in the last several
815:22 - lessons we've been looking at this page
815:25 - right here and I even promised that we
815:26 - were going to be pulling this data but
815:29 - as I was building out the project I just
815:31 - I honestly thought it was a little bit
815:32 - too easy since in the last lesson we
815:34 - kind of already pulled out some
815:35 - information from this table and I want
815:37 - to kind of throw you guys off so we're
815:39 - going to be pulling from a different
815:41 - table we're going to be going on to
815:42 - Wikipedia and looking at the list of the
815:43 - largest companies in the United States
815:45 - by Revenue and we're going to be pulling
815:47 - all of this information so if you
815:49 - thought this was going to be easy in a
815:50 - little mini project uh it's now a full
815:52 - project because why not so let's get
815:56 - started uh what we're going to do is
815:58 - we're going to import beautiful soup and
815:59 - requests we're going to get this
816:01 - information and we're going to see how
816:03 - we can do this and it's going to get a
816:05 - little bit more complicated and a little
816:07 - bit more tricky we're going to have to
816:08 - you know format things properly to get
816:10 - it into our Panda data frame to make it
816:12 - looking good and making it more usable
816:15 - so let's go ahead and get rid of the
816:16 - this easy table we don't want that one
816:18 - uh and we're going to come in here and
816:20 - we're just going to start off this
816:21 - should look uh really familiar by now
816:23 - we're going to say from bs4 import
816:28 - beautiful soup I don't know if you've
816:30 - noticed but I've messed up spelling
816:32 - beautiful soup in every single uh video
816:35 - I've noticed uh let's run this and now
816:38 - we need to go ahead and get our URL so
816:40 - let's come up here let's get our
816:43 - URL say URL is equal to and we'll just
816:47 - keep it all in the same thing really
816:49 - quickly because we know this by Heart by
816:51 - now right uh we'll say request.get and
816:55 - then URL to make sure that we're getting
816:56 - that information it give us a response
816:58 - object um hopefully it'll be 200 that'll
817:01 - mean a good response and then we'll say
817:03 - soup is equal to and then we'll say
817:05 - beautiful soup and we'll do our page.
817:09 - text now we're pulling in the
817:10 - information from this URL and then we
817:12 - use our parser which will be oops HTML
817:17 - and let's go ahead and run this looks
817:20 - like everything went well let's print
817:21 - our soup now this is completely new to
817:24 - you it's completely new to me I don't
817:26 - know what I'm doing uh but it looks like
817:28 - we're pulling in the information am I
817:30 - right so we got a lot of things going
817:32 - for us uh the uh stuff was imported
817:35 - properly we got our URL we got our soup
817:38 - which is uh not beautiful in my opinion
817:41 - but let's keep on rolling let's come
817:43 - right down here now what we need to do
817:45 - is we we need to specify what data we're
817:47 - looking for so let's come and let's
817:50 - inspect this web page now the only
817:52 - information that we're going to want is
817:54 - right in here we're going to want these
817:56 - uh titles or these headers whoops so
817:59 - we're going to want rank name industry
818:01 - Etc and then we are for sure going to
818:04 - want all of this information let's just
818:06 - scroll down see if there's anything
818:07 - tricky in
818:09 - here all right that looks pretty good
818:12 - and there is another table so there's
818:14 - not just one table in here there are two
818:16 - tables in this page so that might change
818:20 - things for us but let's come right back
818:24 - and let's inspect our page by using this
818:26 - little button right here and let's
818:28 - specify in let's see if I can highlight
818:31 - just this page oh it's not going oh
818:34 - let's do that right there so now we have
818:37 - this uh Wiki table sorter now I'm going
818:40 - to actually come right here I'm going to
818:41 - copy and I'm just going to say copy the
818:44 - outer HTML just just going to paste in
818:47 - here real quick and that's a ton of
818:49 - information I didn't think it was going
818:50 - to copy all of it and we're just going
818:52 - to delete that I just wanted to keep
818:53 - that class uh because I wanted to then
818:57 - come right down here at the bottom and
819:00 - just see what this table uh looks like I
819:03 - don't know if it's part of it or if it's
819:04 - a if it's its own
819:06 - table um I can't tell let's look at this
819:09 - Rank and let's come up so it says uh
819:13 - it's under this
819:14 - table and it looks like it's its own
819:16 - table but it says Wiki table sort
819:18 - sortable jQuery table sorter wikip
819:22 - sortable jQuery table sorter so it looks
819:25 - like there are two tables with the same
819:28 - class which shouldn't be a problem if
819:32 - we're using find to get our text because
819:34 - we should be taking the first one which
819:35 - will be this table and this is the table
819:37 - we want um and if we wanted this one we
819:42 - could just use find all and since it's a
819:44 - list we could use index ing to pull this
819:47 - table right um but I think we're going
819:50 - to be okay with just pulling in this one
819:53 - so let's go ahead and let's do our find
819:56 - so we'll do
819:57 - soup. find and we could find all or we
820:01 - could just do find uh table let's just
820:03 - try this and see what we get and if it
820:06 - pulls in the right one that we're
820:07 - looking for that' be great now this does
820:10 - not look correct at all um I don't know
820:14 - what table it's pulling in oh maybe it's
820:17 - this right here this might be a table
820:20 - yeah it is so we have this uh box more
820:23 - citations so actually we are going to
820:24 - have to do exactly like what I was
820:26 - talking about uh let's pull
820:29 - this and we well we could do comma class
820:33 - uh right here and let's do both you know
820:35 - what this is a learning opportunity
820:37 - let's do both so let me go back up to
820:40 - the top because I need these um and what
820:44 - we're going to do let's come right down
820:46 - here I want to add in uh another thing
820:50 - actually I'll just push this one up
820:52 - there we go so we're going to say findor
820:55 - all let's run this so now we have
820:58 - multiple and again we got that weird one
821:00 - first but if we scroll down here's our
821:03 - comma and then here's our wik Wiki table
821:06 - sortable and then we have rank name
821:10 - industry all the ones that we were
821:11 - hoping to see and I guarantee you if you
821:14 - scroll all the way to the bottom
821:16 - um we're going to
821:18 - see potentially Well Fargo Goldman Sachs
821:22 - I'm pretty sure those are
821:25 - um let's see yeah here we go like Ford
821:27 - motor Wells Fargo Goldman Sachs that's
821:30 - this table right here so now we're
821:31 - looking at the third table but again
821:33 - this is a list so we can use indexing on
821:35 - this and we'll just choose not position
821:38 - zero because that's this one right here
821:40 - which we did not like well now we'll
821:42 - take position one let's run this let's
821:46 - go back up to the top and this is our
821:49 - table right here rank name industry this
821:52 - is the information that we were actually
821:54 - wanting just to confirm rank name
821:57 - industry Etc so this is the information
822:00 - we're wanting and we're able to specify
822:02 - that with our findall and this is the
822:04 - information we want so we now want to
822:06 - make this the only information that
822:08 - we're looking at so I'm just going to
822:09 - copy this we didn't need to use our
822:12 - class for this one you could probably
822:13 - could have um but we could so let's
822:15 - actually um put this right down here
822:17 - this will be our table we'll say equal
822:19 - to but then I'll come right here and I'm
822:22 - going to say soup. find this is just for
822:27 - demonstration purposes we do table comma
822:29 - class underscore is equal to and then
822:33 - we'll look at this right here whoops me
822:36 - do this and let's see if we get the
822:38 - correct
822:39 - output and let's run this and looks like
822:42 - we're getting a nun type object uh if I
822:45 - remember remember looks like the actual
822:47 - class is this right here so let's run
822:51 - this instead and I got to get rid of the
822:53 - index there we go okay so we were able
822:56 - to pull it in just using the find so the
822:58 - find table class and it says Wiki table
823:01 - sortable at least that's the HTML that
823:04 - we're pulling in right here let me go
823:07 - back because I don't don't know if
823:10 - that's what I was seeing
823:12 - earlier let's just get this rank let's
823:14 - go back up
823:16 - where's the
823:17 - rank we go rank there we go so here's
823:20 - our Rank and let's go up to the table
823:24 - and there's our
823:25 - class yeah and and that's just uh to me
823:28 - that's a little bit odd so it says Wiki
823:30 - table sortable jQuery Das table sorder
823:33 - right here but in our
823:36 - actual um in our actual python script
823:39 - that we're running it was only pulling
823:41 - in the wiki table sortable so it wasn't
823:45 - pulling in the jQuery dot sorter why uh
823:48 - I'm not 100% sure but all things that
823:51 - we're working through and we were able
823:53 - to uh we were able to figure out so
823:56 - we're going to make this our table we're
823:59 - going to say tables equal to uh soup.
824:02 - findall and let's run this and if we
824:05 - print out our table we have this table
824:07 - now this is our only data that we are
824:10 - looking at now the first thing that I
824:11 - want to get is I want to get these
824:14 - titles or these headers right here
824:16 - that's where we're going to get first so
824:18 - let's go in here we can just look in
824:20 - this information you can see that these
824:21 - are with these th tags and we can pull
824:25 - out those th tags really easily let's
824:28 - come right down here we're just going to
824:30 - say th and we can get rid of this let's
824:34 - run this now these are our only th tags
824:37 - because everything else is a TR tag for
824:40 - these rows of data so these th tags are
824:42 - pretty unique which makes it really easy
824:45 - which is really really great because
824:46 - then we can just do worldcore titles is
824:49 - equal to so now we have these titles but
824:52 - uh they're not perfect but what we're
824:54 - going to do is we're going to Loop
824:56 - through it so I'm going to say worldcore
824:58 - titles and I'll kind of walk through
824:59 - what I'm talking about isn't a list and
825:02 - each one is Within These th tags so th
825:05 - and then there's our um string that
825:07 - we're trying to get so we can easily
825:10 - take this list and use list
825:14 - comprehension and we can do that right
825:15 - down here so I'm going to keep this
825:17 - where we can see it um we'll do
825:19 - worldcore
825:21 - tore titles that's equal to now we'll do
825:25 - our list comprehension should be super
825:27 - easy uh we'll just say for title in
825:30 - worldcore titles and then what do we
825:33 - want we want title. text that's it um
825:37 - because we're just taking the text from
825:39 - each of these we're just looping through
825:41 - and we're getting rank then We're
825:42 - looping through getting name looping
825:44 - through getting industry that's that's
825:45 - it so let's go and print our world table
825:50 - titles and see if it worked and it did
825:54 - uh this looks like it needs to be
825:55 - cleaned up just a little bit so let's go
825:58 - ahead and do that while we're here
826:01 - before we actually put it into the uh
826:02 - P's data frame oops I just wanted uh I
826:07 - just wanted this actually so what we're
826:09 - going to do is try to get rid of those
826:10 - back slash ends if we do dot strip that
826:14 - may actually not work yeah uh because
826:16 - this is a list what we need to do is we
826:18 - can actually do it dot. text. strip
826:22 - right here let's try to do it in there
826:23 - there we go so now we have uh this and
826:27 - now this world tables is good to go now
826:30 - I'm actually noticing one thing that may
826:33 - be odd yeah so we have rank name
826:36 - industry goes to headquarters but then
826:38 - in here we're getting rank name industry
826:41 - and then the
826:42 - profits which is
826:44 - from this table right here which we
826:48 - don't want uh let's scroll back up let's
826:52 - kind of backtrack this and see where
826:54 - this happened we did find all table
826:57 - we're looking at the first one
826:59 - right and then we're doing
827:02 - [Music]
827:04 - headquarters uh so we're doing print
827:06 - table ah okay I think I found the issue
827:09 - here and let's backtrack again this is
827:11 - we're working through this together
827:12 - we're going to make mistakes uh the
827:14 - table is what we actually wanted to do
827:16 - we just did soup. findall th which is
827:18 - going to pull in that secondary table um
827:21 - jeez we were not thinking here um so now
827:24 - we need to do find all on the table not
827:28 - the soup because now we were looking at
827:29 - all of them oh what a rookie mistake
827:31 - okay uh let's go back now let's look at
827:34 - this now it's just down to headquarters
827:38 - okay okay let's go ahead and run this
827:40 - let's run this now we just have
827:42 - headquarters now let's run this now we
827:46 - are sitting pretty okay excuse my
827:49 - mistakes Hey listen you know if it
827:50 - happens to me it happens to you I
827:52 - promise you this is you know this is a
827:53 - project this a little U little project
827:55 - we're creating here so we're going to
827:56 - run into issues and that's okay we're
827:58 - figuring out as we go now what I want to
828:00 - do before we start pulling in all the
828:02 - data is I want to put this into our
828:04 - Panda's data frame we'll have the uh you
828:06 - know headers there for us to go so we
828:08 - won't have to get that later and it just
828:10 - makes it easier uh in general trust me
828:12 - so we're going to import pandas as PD
828:15 - let's go ahead and run this and now
828:17 - we're going to create our data frame so
828:18 - we'll say PD dot now we have these world
828:22 - uh table titles so what we're going to
828:24 - do is pd. data frame and then in here
828:28 - for our columns we'll say that's equal
828:30 - to the world table titles and let's just
828:33 - go ahead and say that's our data frame
828:36 - and call our data frame right here let's
828:37 - run it there we go so we were able to
828:41 - pull out and extract those headers and
828:42 - those titles of these columns we're able
828:44 - to put it into our data frame so we're
828:47 - set up and we're ready to go we're
828:48 - rocking and rolling the next thing we
828:50 - need let's go back up next thing we need
828:53 - is to start pulling in this data right
828:55 - here so we have to see how we can pull
828:57 - this data in now if you
829:00 - remember that we had those th tags those
829:03 - were our titles as you can see I'm
829:05 - highlighting over it but down here now
829:07 - we have these TD tags and those are all
829:10 - encapsulated within a TR tag so these TR
829:14 - represent the row
829:16 - right then the D represents the data
829:19 - within those rows so R for rows D for
829:21 - data so let's see how we can use that in
829:25 - order to get the information that we
829:26 - want so let's go back up here just going
829:29 - to take this because again we're only
829:30 - pulling from table not soup not soup
829:34 - what were we thinking um and let's go
829:36 - ahead and let's look at TR let's run
829:39 - this now when we're doing this TR these
829:42 - do come in with the head so we're going
829:45 - to have to later on we're going to have
829:47 - to get rid of these we don't want to
829:48 - pull those in um and have that as part
829:50 - of our data but if we scroll down
829:53 - there's our
829:54 - Walmart um we have the location these
829:58 - are all with these TD tags and then of
830:02 - course it's separated by a comma then we
830:04 - have our td2 so above we had our td1 so
830:08 - Row one row two Row three all the way
830:11 - down now we will easily be able to use
830:13 - this right because this is our column
830:16 - data and we can even call it that column
830:19 - underscore data is equal to we'll run
830:22 - that um and what we're going to do is
830:23 - we're going to Loop through that because
830:25 - it was all in a list so we're going to
830:26 - Loop through that information but
830:28 - instead of looking at the TR tag we're
830:30 - going to look at the T D tag so let's
830:32 - come right down here we'll say for the
830:35 - row in column
830:37 - row and we'll do a colon now we need to
830:40 - Loop through this we'll do something
830:42 - like row. findor all all and then what
830:46 - are we looking for we're not looking for
830:47 - the TR looking for the TD and just for
830:51 - now let's print this off see what this
830:55 - looks like apparently I didn't run this
830:59 - uh column data that's
831:02 - why and let's run
831:04 - this and what we actually need to do is
831:07 - something almost exactly like
831:10 - this and I'm going to put it right below
831:13 - it um instead of of printing this off
831:16 - because again this is all in a list
831:19 - we're using find all so we're we're
831:21 - printing off another list which isn't
831:22 - actually super helpful um for each of or
831:27 - all these data that we're pulling in
831:29 - what we can do is we can call this uh
831:31 - the rowcor data and then we'll put the
831:34 - row data in here so we'll say four and
831:38 - we'll say in row data so we'll just say
831:40 - for the data in row data and we'll take
831:43 - the data we'll exchange that and now
831:46 - instead of uh World Table titles we can
831:49 - change this into uh
831:52 - individual row data right and now let's
831:56 - print off the individual row data so
831:59 - it's the exact same process that we were
832:01 - doing up here and that's how we cleaned
832:04 - it up and got this and we may not need
832:06 - to strip but let's just run this and see
832:07 - what we get there we go um and strip I'm
832:10 - sure was helpful let's actually get rid
832:12 - of
832:13 - this yeah strip was helpful is the exact
832:16 - same thing that happened on the last one
832:18 - so let's keep that actually let's run
832:20 - this and now let's just kind of glance
832:23 - at this information let's look through
832:25 - it this looks exactly like the
832:28 - information that's in the table let's
832:29 - just confirm with this first one uh 25
832:32 - uh two what am I saying 572 754 2.4
832:37 - 2300 57275 2.4 2200 so this looks
832:41 - exactly correct now we have to figure
832:44 - out a way to get this into our table
832:47 - because again these are all individual
832:50 - lists it's not like we're just you know
832:52 - putting all of this in at one time we
832:54 - can't just take the entire table and
832:56 - plop it into um into the data frame we
832:59 - need a way to kind of put this in one at
833:01 - a time now if you're just here for web
833:03 - scraping and you haven't taken like my
833:05 - panda series that's totally fine that's
833:06 - not what we're here for anyways um but
833:08 - what we can do we'll have our individual
833:11 - row data and we're going to put it in
833:14 - kind of one at a time time now the
833:15 - reason we have to do that is because
833:17 - when we had it like this and let's go
833:19 - back when we had it like this it's
833:21 - printing out all of it but what it's
833:23 - really doing and let's get rid of it um
833:25 - what it's really doing is it's kind of
833:27 - doing it like this it's printing it off
833:29 - one at a time and it's only going to
833:31 - save that current row of data this last
833:35 - one it's only going to save that as it's
833:38 - looping through so what we actually want
833:40 - to do is every time it Loops through we
833:42 - append this information onto the data
833:44 - data frame so as it goes through and
833:47 - eventually it's going to end up with
833:48 - this one but as it goes through let's
833:50 - run this as it goes through it puts this
833:53 - one in and then the next time it Loops
833:55 - through it puts this one in and the next
833:57 - time it Loops through Etc all the way
833:58 - down um so let's see how we can do this
834:02 - so we have our data frame right here
834:04 - let's get rid of this let's bring our
834:06 - data frame in now again like I just
834:09 - mentioned if you don't know pandas and
834:10 - you haven't learned that uh you know go
834:12 - take my uh series on that it's really
834:14 - good and we do something very similar to
834:16 - this in that Series so I'm not going to
834:18 - kind of walk through the entire logic um
834:20 - but there is something called Lo which
834:23 - stands for location when you're looking
834:24 - at the index on a data frame and we're
834:28 - going to use that to our advantage so
834:29 - we're going to say the length of the
834:31 - data frame so we're looking at how many
834:33 - rows are in this data frame and then
834:35 - we're going to say that's our length
834:38 - then we're going to take that length and
834:40 - use it when we're actually putting in
834:42 - this new information pretty um pretty
834:45 - cool so we're going to say df.loc then a
834:49 - bracket and we're putting in that length
834:50 - so we're checking the length of our data
834:52 - frame each time it's looping through and
834:55 - then we're going to put the information
834:57 - in the next position that's exactly what
834:59 - we're doing so let's go ahead and put in
835:02 - the individual row data um so let's just
835:05 - recap We're looping through this TR this
835:09 - is our column data so these TR that's
835:11 - our row of data then we're as
835:15 - as We're looping through it we're doing
835:16 - find all and looking for TD tags that's
835:19 - our individual data so that's our row
835:21 - data then we're taking that data each
835:23 - piece of data and we're getting out the
835:26 - text and we're stripping it to kind of
835:27 - clean it and now it's in a list for each
835:31 - individual row then we're looking at our
835:33 - current data frame which has nothing in
835:34 - it right now we're looking at the length
835:36 - of it and we're appending each row of
835:39 - this information into the next position
835:43 - so let's go ahead and run this
835:45 - it's working it's thinking and it looks
835:48 - like we got an issue canot set a row
835:50 - with mismatched columns now we're
835:52 - encountering an issue not one that I got
835:54 - earlier but we're going to cancel this
835:57 - out we're going to figure this out
835:59 - together so let's print off our
836:01 - individual row data let's look at this
836:04 - this one is empty uh this is I'm almost
836:07 - certain is probably the issue um I
836:10 - didn't encounter this issue when I wrote
836:12 - these uh when I wrote this lesson um but
836:14 - I'm almost certain that this is the
836:15 - issue right here so let's do the column
836:17 - data but let's start at position um
836:21 - let's try one and not parentheses I need
836:26 - brackets because this is a list right so
836:27 - it should work and there we go so now
836:30 - that first one's gone so now we just
836:33 - have the information I didn't even think
836:34 - about that um just a second ago but I'm
836:36 - glad we're running into it in case you
836:38 - ran into that uh issue let's go ahead
836:41 - and try this
836:42 - again and it looked like it worked so
836:45 - let's pull our data frame down I could
836:47 - have just wrote DF let's pull our data
836:48 - frame down and now this is looking
836:52 - fantastic now um these three dots just
836:55 - mean there's information in there just
836:56 - doesn't want to display it but it looks
836:58 - like we have our rank we have our name
837:01 - have the industry revenue revenue growth
837:04 - employees and headquarters for every
837:05 - single one so this is perfect now this
837:08 - is exactly what I was hoping to get now
837:11 - you can go in and use pandas and
837:12 - manipulate this and change it and you
837:14 - know dive into all the information in
837:16 - there but we can also export this into a
837:19 - CSV if that's what you're wanting so we
837:22 - could easily do that by saying we'll do
837:24 - DF do2 CSV and then within here we're
837:28 - just going to do R and specify our file
837:31 - path so let's come down here to our file
837:33 - path then we'll go to our folder for our
837:36 - output so we're just going to take this
837:38 - path and let me do it like that so I
837:41 - have this path in my one drive documents
837:43 - python webscript being folder for output
837:45 - so you know I already made this um and
837:47 - I'm just going to put this right down
837:49 - here now I do have to specify what we're
837:51 - going to call this um we'll just call
837:53 - this companies and then we have to say
837:56 - CSV that is very important now if we run
837:59 - this I already know just because uh we
838:02 - have this Rank and this index here we're
838:04 - going to keep this index in the output
838:07 - not great uh but let's run it let's look
838:09 - at our
838:11 - output there's our companies and when we
838:13 - pull this up as you can see this is not
838:16 - what we want because we have this extra
838:18 - thing right here now if we're automating
838:19 - this this would get super annoying so
838:21 - what we're going to do is go back and
838:22 - just say index equals false let's go out
838:25 - of here and now we're just going to come
838:26 - right down here we're going to say comma
838:28 - index equals false and so it's going to
838:31 - take this index and it's not going to
838:33 - import or actually export it into the
838:36 - CSV now let's go ahead and run
838:39 - this let's pull up our folder one more
838:43 - time and let's refresh just to make sure
838:46 - should be good and now this looks a lot
838:49 - better so we're able to take all of that
838:52 - information and put it into a CSV and
838:54 - it's all there so this is the whole
838:57 - project so if we scroll all the way back
838:59 - up let's just kind of glance at what we
839:01 - did here scroll down we brought in our
839:04 - libraries and packages we specified our
839:06 - URL we brought in our soup um and then
839:10 - we tried to find our table now that took
839:12 - a little bit of uh testing out but we
839:16 - knew that the table was the second one
839:17 - so in position one so we took that table
839:20 - we were also able to specify it using
839:22 - find but then we used the class and of
839:25 - course we just wanted to work with that
839:27 - table that's all the data we wanted so
839:29 - we specifi this is our table and we
839:32 - worked with just our table going forward
839:34 - of course uh we encountered some small
839:36 - issues user errors on my end but we were
839:39 - able to get our world titles and we put
839:41 - those into our data frame right here
839:44 - using pandas then next we went back and
839:47 - we got all the row data and the
839:48 - individual data from those rows and we
839:51 - put it into our Panda data frame then we
839:55 - came below and we exported this into an
839:57 - actual CSV file so that is how we can
839:59 - use webs scraping to get data from
840:01 - something like a table and put it into a
840:04 - panda data frame I hope that this lesson
840:06 - was helpful I know we encountered some
840:07 - issues that's on my end and I apologize
840:10 - but if you run into those same issues
840:12 - hopefully that helped uh but I hope this
840:14 - was helpful and if you like this be sure
840:15 - to like And subscribe below I appreciate
840:18 - you I love you and I will see you in the
840:20 - next
840:22 - [Music]
840:32 - lesson so the first thing that we need
840:34 - to do is import our Panda's Library so
840:37 - we're going to say import we're going to
840:38 - say pandas now this will import the
840:40 - pandas library but it's pretty common
840:43 - place to give it an alias and as a
840:46 - standard when using pandas people will
840:48 - say as PD so this is just a quick Alias
840:51 - that you can use uh that's what I always
840:53 - use and I've always used it because
840:54 - that's how I learned it and I want to
840:56 - teach it to you the right way so that's
840:57 - how we're going to do it in this video
840:59 - so let's hit shift enter now that that
841:02 - is imported we can start reading in our
841:03 - files now right down here I'm going to
841:05 - open up my file explorer and we have
841:08 - several different types of files in here
841:11 - we have CSV files text files Json files
841:15 - and an Excel worksheet which is a little
841:17 - bit different than a CSV so we're going
841:19 - to import all of those I'm going to show
841:21 - you how to import it as well as some of
841:24 - the different things that you need to be
841:25 - aware of when you're importing so we're
841:27 - going to import some of those different
841:29 - file types and I'll show you how to do
841:30 - that within pandas so the first thing
841:32 - that we need to say is PD Dot and let's
841:36 - read in a CSV because that's a pretty
841:38 - common one we'll say
841:40 - read
841:42 - CSV and this is liter literally all you
841:44 - have to write in order to call it in now
841:47 - it's not going to call it in as a string
841:49 - like it would in one of our previous
841:50 - videos if you're just using the regular
841:53 - operating system of python when you're
841:55 - using pandas it calls it in as a data
841:57 - frame and I'll talk about some of the
841:58 - nuances of that so let's go down to our
842:00 - file explorer we have this countries of
842:03 - the world CSV you just need to click on
842:05 - it and rightclick and copy as path and
842:09 - that's literally going to copy that file
842:11 - path for us you don't have to type it
842:12 - out manually you can if You' like and
842:14 - we're just going to paste it in between
842:16 - these parentheses now if we run it right
842:19 - now it will not work I'll do that for
842:21 - you it's saying we have this Unicode
842:23 - error uh basically what's happening is
842:26 - is it's reading in these backs slashes
842:28 - and this colon and all those back
842:30 - clashes in there and this period at the
842:31 - end what we need to do is read this in
842:33 - as a raw text so we're just going to say
842:35 - R and now it's going to read this as a
842:38 - literal string or a literal value and
842:41 - not as you know with all these back
842:43 - slashes which does make a big difference
842:46 - when we run this it's going to populate
842:47 - our very first data frame so let's go
842:49 - ahead and run it and now we have this
842:52 - CSV in here with our country and our
842:54 - region now if we go and pull up this
842:57 - file and let's do that really quickly
842:59 - let's bring up this country's of the
843:00 - world it automatically populated those
843:02 - headers for us in the data frame but we
843:05 - don't have any column for those 0 1 2 3
843:08 - so if we go back as you can see right
843:10 - here there's this index and that's
843:11 - really important in a data frame it's
843:13 - really makes a data frame a data frame
843:15 - and we use index a lot in pandas we're
843:18 - able to filter on the index search on
843:20 - the index and a lot of other things
843:21 - which I'll show you in future videos but
843:24 - this is basically how you read in a file
843:27 - now if we go right up here in between
843:28 - these parentheses and we hit shift tab
843:31 - this is going to come up for us let's
843:33 - hit this plus button and what this is is
843:36 - these are all the arguments or all the
843:38 - things that we can specify when we're
843:41 - reading in a file and there are a lot of
843:43 - different opts options so let's go ahead
843:45 - and take a look really quickly really
843:46 - quickly I wanted to give a huge shout
843:48 - out to the sponsor of this entire Panda
843:49 - series and that is udemy udemy has some
843:52 - of the best courses at the best prices
843:53 - and it is no exception when it comes to
843:55 - pandas courses if you want to master
843:57 - pandas this is the course that I would
843:58 - recommend it's going to teach you just
844:00 - about everything you need to know about
844:02 - pandas so huge shout out to you me for
844:03 - sponsoring this Panda series and let's
844:05 - get back to the video the first thing is
844:06 - obviously the file path we can specify a
844:09 - separator which there is no default so
844:13 - when we're pulling in this CSV when
844:14 - we're reading in the CSV it's
844:16 - automatically going to assume it's a
844:17 - comma CU it's a comma separated uh file
844:21 - you can choose delimers headers names
844:23 - index columns and a lot of other things
844:26 - as you can see right here now I will say
844:28 - that I don't use almost any of these uh
844:32 - the few that I'm going to show you
844:33 - really quickly in just a second are up
844:35 - the very top but you can do a ton of
844:38 - different things and I'm just going to
844:39 - slowly go through them so that's what
844:41 - those are you can also go down here this
844:44 - is our dock string and you can see
844:46 - exactly how these parameters work it'll
844:49 - show you and give you a text and walk
844:51 - you through how to do this again most of
844:53 - these you'll probably never use but
844:56 - things like a separator could actually
844:57 - be useful and things like a header could
844:59 - be useful because it is possible that
845:02 - you want to either rename your headers
845:04 - or you don't have a header in your CSV
845:07 - and you don't want it to autop populate
845:09 - that header so that is something that
845:11 - you can specify so for example this
845:13 - header one I'll show you how to do this
845:15 - uh the default behaviors is to infer
845:17 - that there are column names if no names
845:19 - are passed this behavior is identical to
845:21 - header equals zero so it's saying that
845:23 - first row or that first index which is
845:26 - like right here that zero is going to be
845:29 - read in as a header but we can come
845:32 - right over here and we'll do comma
845:34 - header is equal to and we can say none
845:38 - and as you can see there are no headers
845:40 - now instead it's another index so we
845:43 - have index indexes on both the x- axis
845:45 - and the Y AIS and so right now we have
845:47 - this zero and one index indicating the
845:50 - First Column and the second column if we
845:52 - want to specify those names we can say
845:54 - the header equals none then we can say
845:57 - names is equal to and we'll give it a
846:00 - list and so the first one was country
846:04 - and what's that second one oh region so
846:07 - right here that's the first um the first
846:10 - row but we'll rename it and we'll just
846:12 - say country region and when we run that
846:15 - we've now populated the country and the
846:17 - region uh we're just pretending that our
846:19 - CSV does not have these values in it and
846:21 - we have to name it ourselves that's how
846:23 - you do it but let's get rid of all that
846:25 - because we actually do want those in
846:27 - there so we're just going to get rid of
846:29 - those and read it in as normal and there
846:32 - we go now typically when you're reading
846:34 - in a file what you need to do is you
846:37 - want to assign that to a variable almost
846:39 - always when you see any tutorial or
846:42 - anybody online or even when you're
846:43 - actually working people will say DF is
846:46 - equal to DF stands for data frame again
846:49 - this is a data frame in the next video
846:52 - in this series I'm going to walk through
846:53 - what a series is as well as what a data
846:56 - frame is because that's pretty important
846:57 - to know when you're working with these
846:59 - data frames but we'll assign it to this
847:01 - value and then we'll say we'll call it
847:04 - by saying DF and we'll run it and that's
847:06 - typically how you'll do things because
847:07 - you want to save this data frame so
847:09 - later on you can do things like data
847:11 - frame Dot and you can uh you know pass
847:14 - in different modules but you can't
847:16 - really do that it's not as easy to do it
847:17 - if you're calling this entire CSV and
847:19 - importing it every time so let's copy
847:22 - this because now we're going to import a
847:25 - different type of file so now we've been
847:27 - doing read CSV but we can also import
847:31 - text files now you can do that with the
847:33 - read CSV we can import text files let's
847:36 - look at this one we have the same one
847:37 - it's countries of the world except now
847:39 - it's a text file because I just
847:41 - converted it for this video I'll copy
847:43 - that as a path and so now when we do
847:45 - this oops let me get
847:47 - those quotes in there it'll say world.
847:50 - txt it will still work as you can see
847:53 - this did not import properly um we have
847:56 - this country back SLT region and then
847:59 - all of our values are the exact same
848:00 - with this back SLT that's because we
848:02 - need to use a separator and I'll show
848:05 - you in just a little bit how we can do
848:06 - this in a different way but with that
848:08 - read CSV this is how we can do it we'll
848:10 - just say sep is equal to we need to do
848:14 - back SLT now let's try running this and
848:17 - as you can see it now has it broken out
848:19 - into country and region we could also do
848:22 - it the more proper way and this is the
848:24 - way you should do it and I'll get rid of
848:26 - these really quickly but just want to
848:29 - keep them there in case you want to see
848:30 - that but you can also do read table and
848:36 - let's get rid of this
848:37 - separator and now we have no separators
848:39 - just reading it in as a table let's run
848:42 - this and it reads it in proper L the
848:44 - first time this read table can be used
848:46 - for tons of different data types but
848:48 - typically I've been using it for like
848:49 - text files um we can also read in that
848:52 - CSV so let's change this right here to
848:54 - CSV we can read it in as a CSV but just
848:57 - like we did in the last one when we read
848:59 - in the text file using read CSV this
849:02 - read table you're going to need to
849:03 - specify the separator so I'll just copy
849:07 - this and we'll say comma and now it
849:11 - reads it in properly again you can use
849:12 - that for a ton of different file types
849:14 - but you just need to specify a few more
849:16 - things if you don't want to use the more
849:17 - specific read uncore function when
849:20 - you're using pandas now let's copy this
849:23 - again we're going to go right down here
849:25 - and now let's do Json files Json files
849:28 - usually hold semi structured data um
849:31 - which is definitely different than very
849:33 - structured data like a CSV where has
849:35 - columns and rows so let's go to our file
849:38 - explorer we have this Json sample we
849:41 - will copy this in as the
849:45 - path let's paste it right here and we'll
849:48 - do reor Json again these different
849:51 - functions were built out specifically
849:53 - for these file types that's why you know
849:55 - each one has a different name so now
849:57 - we're reading this in as the
849:59 - Json let's read it in and it read it in
850:05 - properly now let's go ahead and copy
850:08 - this and take a look at Excel files
850:10 - because Excel files are a little bit
850:11 - different than other ones that we've
850:12 - looked at
850:13 - um so let's just do read uncore
850:17 - Excel and let's go down to our file
850:20 - explorer and let's actually open up this
850:23 - workbook as you can see we have sheet
850:25 - one right here but we also have this
850:27 - world population which has a lot more
850:29 - data let's say we just wanted to read in
850:32 - sheet one we can do that or by default
850:35 - it's going to read in this world
850:36 - population because it's the first sheet
850:38 - in the Excel file well let's go ahead
850:40 - and take a look at that let's get out of
850:42 - here and and let's say oops I forgot to
850:45 - copy the file path let's go ahead and
850:48 - copy as path and we'll put it right
850:53 - here and let's just read it in with no
850:56 - arguments or anything in there or no
850:58 - parameters when we read it in it's
851:00 - reading in that very first sheet so this
851:03 - is the one that has all of the data now
851:05 - let's say we wanted to read in that
851:06 - extra sheet name or the second sheet
851:08 - name we'll just go comma sheet undor
851:12 - name say is equal to and then we can
851:14 - specify sheet was it sheet one like this
851:18 - yes it was so we just had to specify the
851:20 - sheet name right here and then it
851:22 - brought in that sheet instead of the
851:24 - default which is the very first sheet in
851:26 - that Excel now that definitely covers a
851:28 - lot of how you read in those files again
851:31 - you can come in here and hit shift Tab
851:33 - and this plus sign and take a look at
851:34 - all the documentation and you can
851:36 - specify a lot of different things things
851:38 - that I didn't think were very important
851:40 - for you guys to know especially if
851:42 - you're just starting out the ones that
851:43 - we looked at today are what I would say
851:45 - are like the ones that I use almost all
851:47 - the time so I wanted to show you those
851:49 - but if you're interested in any of these
851:51 - other ones or you have very unique data
851:52 - and you need to do that um you know it's
851:55 - worth really getting in here and
851:57 - figuring things out a few other things
851:59 - that I wanted to show you just in this
852:00 - kind of first video or this intro video
852:03 - on how to read in files um one thing
852:05 - that you may have noticed especially in
852:06 - this file right here is we're only
852:09 - looking at the first five and then the
852:12 - last five so if we wanted to see all the
852:14 - data all the data is in these like
852:16 - little three dots right here right we
852:18 - want to be able to see that data but
852:22 - right now we can't and that's because of
852:24 - some settings that are already within
852:25 - pandas and all we need to do is change
852:28 - that so this one has 234 rows and four
852:31 - columns so obviously we can see all the
852:33 - columns well let's just change the rows
852:35 - all we'll say is pd. set uncore option
852:40 - now what we need to do is we're going to
852:42 - change the rows we're not going to
852:44 - change the columns at least not on this
852:45 - one so we'll say quote
852:49 - display. max. rows now if we just run
852:53 - this for whatever data we bring in it's
852:57 - going to be able to show the max rows
852:58 - and then we'll say
853:00 - 235 although there's 234 rows I'm just
853:03 - going to be safe let's run
853:05 - this and now it has changed it so let's
853:08 - read in this file again and you'll see
853:10 - how it's
853:11 - changed now we have all the numbers and
853:14 - we have this little bar on the right
853:16 - that allows us to go down all the way to
853:18 - the bottom and all the way to the top so
853:21 - now we can actually look and kind of
853:22 - skim and see our values I like that
853:25 - better than just having that you know
853:26 - shorter version um we can do the exact
853:29 - same thing on columns as well so if we
853:31 - look at this one this is our Json file
853:34 - has the same thing right here we have
853:36 - what was it 38 columns but we can only
853:39 - see I think it's maybe it's 20 or
853:41 - something like that I can't remember um
853:43 - but we have 38 we can only see like
853:45 - let's say 15 of them or 20 of them we'll
853:47 - do the exact same thing and we'll just
853:49 - say pd. set options.
853:54 - max.
853:56 - columns and we'll set that to 40 for
853:59 - that one when we run this oops let's get
854:03 - over here when we run this one again we
854:06 - can now scroll over and see every single
854:09 - one of our columns now that one is a in
854:11 - my opinion a lot more useful I like
854:13 - being able to see every single column so
854:16 - definitely something that you should be
854:17 - using especially when you have these
854:18 - really large files you want to be able
854:20 - to see a lot of the data and a lot of
854:22 - the columns so when you're slicing and
854:24 - dicing and doing all the things that
854:25 - we're about to learn in this Panda
854:27 - series you know you know what you're
854:29 - looking at I also want to show you just
854:30 - how to kind of look at your data in
854:32 - these data frames as well that's also
854:34 - pretty important so let's go right down
854:36 - here and the very last one that we
854:38 - imported was this one right here this
854:40 - read Excel so this data frame is the
854:42 - only one that's going going to read in
854:44 - let's run it um this is the last one to
854:46 - be run so this variable right here DF uh
854:49 - it won't be applied to all these other
854:51 - ones which we can always go back and
854:53 - change those typically you'll do
854:54 - something like data frame two you want
854:56 - to do something like that um so let's
854:59 - keep data Frame 2 oops so what we're
855:02 - going to do is we're going to bring data
855:03 - Frame 2 right down here and we want to
855:05 - take a look at some of this data we want
855:07 - to know a little bit more about it
855:09 - something that you can do is dataframe
855:10 - 2. info and we'll do an open parenthesis
855:14 - and when we run this it's going to give
855:16 - us a really quick breakdown of a little
855:18 - bit of our data so we have our columns
855:20 - right here rank CCA 3 country and
855:23 - capital it's saying we have
855:25 - 234 values in those columns because
855:29 - there's
855:30 - 234 scroll up here because there's
855:33 - 234 uh rows that tells me that there's
855:37 - no missing data in here at least not you
855:39 - know completely missing like null values
855:42 - there is something something in each of
855:43 - those rows the count tells me it's non-
855:45 - null so there's no null values and it
855:47 - tells me the data type so it's ringing
855:49 - in as an integer an object an object and
855:51 - an object and it also tells us how much
855:53 - memory it's using which is also pretty
855:55 - neat because when you get really really
855:57 - large data types memory usage and and
855:59 - knowing how to work around that stuff
856:01 - does become more important than when
856:03 - you're working at these really small You
856:05 - Know sample sizes that we're looking at
856:07 - we can also do oops let me get rid of
856:10 - that can also do data frame two
856:13 - and we'll do shape and for this one we
856:16 - do not need the
856:17 - parentheses and all this is going to
856:19 - tell us is we have 234 rows and four
856:21 - columns we're also able to look at uh
856:25 - the first few values or rows in each of
856:28 - these data frames so we can just say
856:30 - data frame 2. head and if we do that
856:33 - it's going to give us the first five
856:34 - values but we can specify how many we
856:37 - want we can say head 10 it'll give us
856:39 - the first 10 rows right here we can do
856:42 - the exact same thing and let's go right
856:44 - down here and we'll say tail so they'll
856:47 - give us the last 10 rows within our data
856:50 - frame now let's copy this and let's say
856:52 - we don't want to actually look at all of
856:54 - these values or all these columns we can
856:57 - specify that by saying df2 and oops
857:00 - let's get rid of all of
857:02 - this and we'll say with a quote we'll
857:06 - say Rank and now we can take just a look
857:09 - at the rank data now we can't do that by
857:12 - doing the index or at least not like
857:14 - this if we want to use this index that
857:17 - is right here we can but there's a very
857:19 - special function called Lo and IO for
857:22 - that and I'm going to have an entire
857:23 - video on this because it does get a
857:25 - little bit more complex but there's
857:28 - df2 and there's Lo and I stands for
857:31 - location and I location that's only for
857:33 - the indexes whether it's the x axis or
857:36 - the Y AIS those are the indexes and for
857:39 - location it's looking for the actual
857:41 - text the actual string of the index so
857:44 - if we come up here that data Frame 2 we
857:46 - can specify
857:48 - 224 and it'll give us this information
857:50 - right here in a little different format
857:52 - so let's go bracket and we'll say
857:56 - 224 and when we run this it gives us our
857:59 - rank CCA country capital with our values
858:02 - over here kind of like a dictionary
858:04 - almost now let's copy this and we'll say
858:07 - df2 do IO and right now these look the
858:12 - exact same but we haven't really talked
858:14 - a lot about changing the index and you
858:16 - can change the index to a string or a
858:19 - different column or something like that
858:20 - and we'll look at that in future videos
858:22 - the iock looks at the integer location
858:24 - so even if these um let's go right up
858:27 - here even if this index had changed to
858:30 - let's say this rank or this CCA 3 or
858:32 - country or whatever you make this index
858:34 - the ILO will still look at the integer
858:37 - location so that 224 would still be 224
858:40 - even if it was usbekistan
858:42 - so then when we look at this it's going
858:44 - to be the exact same but if we had
858:47 - changed that Index this Lo is the one
858:49 - that we could search on and we could
858:51 - search
858:54 - usuzan is that how you spell usbekistan
858:57 - hey I nailed it so that is how you use
859:01 - Lo and IO again I just wanted to show
859:03 - you a little bit about how you can look
859:04 - at your data frame or search within your
859:06 - data frame now in future videos I'm
859:08 - going to dive a lot deeper into a lot of
859:09 - the concepts that we just looked at
859:11 - because I just kind of touched on them I
859:13 - wanted you to have a brief introduction
859:14 - to them so that in future videos I'm not
859:16 - just dropping everything on you all at
859:18 - once so hopefully this was a good quick
859:20 - introduction to those topics uh you
859:22 - should be able to read in a file now see
859:24 - your data frame and kind of look at it
859:26 - in a few different ways that we just
859:28 - looked at and I hope that that was
859:29 - helpful and if it was be sure to check
859:30 - out all my other videos on Python and
859:32 - pandas and if you like this video be
859:34 - sure to like And subscribe below and I
859:36 - will see you in the next
859:38 - [Music]
859:41 - video
859:43 - [Music]
859:49 - hello everybody today we're going to be
859:51 - looking at filtering and ordering data
859:52 - frames in pandas there are a lot of
859:54 - different ways you can filter and order
859:56 - your data in pandas and I'm going to try
859:58 - to show you all of the main ways that
860:00 - you can do that so let's kick it off by
860:02 - importing our data set so we're going to
860:03 - say data frame is equal to and we'll say
860:06 - pandas and I need to import my pandas so
860:09 - we'll say import pandas as p
860:13 - that's pretty important I think um so
860:15 - pd. read CSV and we'll do R and then
860:19 - we'll say the world population CSV so
860:23 - let's run this all our data frame right
860:26 - here and this is the data frame that
860:28 - we're going to be filtering through and
860:30 - ordering in pandas so let's kick it off
860:34 - the first thing that we can do is filter
860:36 - based off of The Columns so the data
860:38 - within our columns so Asia Europe Africa
860:41 - or whatever data we may have in that
860:43 - column let's go right down here we're
860:45 - going to say DF and then within it we're
860:48 - going to specify what column we're going
860:50 - to be filtering on so we're going to say
860:52 - DF with another bracket and we'll say
860:54 - rank so we're going to be looking at
860:56 - this rank column right here and we'll
860:59 - say in that rank column we want to do
861:01 - greater than 10 and that's actually
861:03 - going to be a lot of them let's do less
861:05 - than so when we run this it's only going
861:08 - to return these values that are less
861:10 - than 10 we can also do less than equal
861:12 - to you know all of these um comparison
861:15 - operators so less than or equal to so
861:17 - now we have all of the ranks 1 through
861:19 - 10 now if we look at these countries we
861:22 - can specify by specific values almost
861:24 - exactly like we did here but instead of
861:27 - doing a comparison operator like we did
861:29 - right here and including those names
861:31 - let's say Bangladesh and Brazil we can
861:34 - use the is in function almost like an in
861:36 - function in SQL if you know SQL so let's
861:38 - go right down here and we're going to
861:40 - say specific underscore countries so
861:44 - right now we're just going to make a
861:45 - list of the countries that we want and
861:48 - then we'll say
861:52 - Bangladesh and
861:55 - Brazil so let's go right down here and
861:58 - we'll say okay for these specific
862:01 - countries from the data frame let's do
862:03 - our bracket we'll say in this country
862:06 - column so we'll do data frame and then
862:09 - another bracket for country so in this
862:13 - country column we can do do is in and
862:16 - then an open parenthesis and then look
862:19 - for our specific countries so we're
862:21 - looking at just this column and we're
862:23 - saying is in so we're looking at are
862:25 - these values within this column and
862:29 - we're getting this error and this looks
862:31 - very very odd let me um this doesn't
862:33 - look right there we go I just had some
862:37 - syntax errors I apologize made it way
862:39 - more complicated than it needs to be but
862:41 - here's how you use this is in function
862:44 - so we're looking at Bangladesh and
862:46 - Brazil and we return those rows with
862:49 - Bangladesh and Brazil really quickly I
862:51 - wanted to give a huge shout out to the
862:52 - sponsor of this entire Panda series and
862:54 - that is udemy udemy has some of the best
862:56 - courses at the best prices and it is no
862:58 - exception when it comes to pandas
863:00 - courses if you want to master pandas
863:02 - this is the course that I would
863:03 - recommend it's going to teach you just
863:04 - about everything you need to know about
863:06 - pandas so huge shout out to UD me for
863:07 - sponsoring this Panda series and let's
863:09 - get back to the video we can also do a
863:11 - contains function kind of similar to is
863:14 - in except it's more like the like in SQL
863:17 - as well I'm comparing a lot of this to
863:19 - SQL CU When You're filtering things I
863:21 - always my brain always goes to SQL but
863:23 - in pandas it's called the contains so
863:26 - let's do let's actually copy this
863:29 - because I don't want to make the same
863:30 - mistake again let's do that and we'll do
863:33 - the bracket but instead of dot is in
863:36 - we're going to do string. contains and
863:39 - then an open parenthesis so we're going
863:42 - to going to be looking for a string if
863:44 - it contain if it contains let's do
863:47 - United almost like United States or or
863:50 - any other United so let's run this and
863:53 - as you can see we have United Arab
863:55 - Emirates United Kingdom United States
863:57 - United States Virgin Islands so we can
863:59 - kind of search for a specific string or
864:02 - a number or a value within our data or
864:05 - within that column of country now so far
864:08 - we've only been looking at how you can
864:09 - filter on these columns we can also fil
864:12 - filter based off of the index as well
864:14 - and there's two different ways you can
864:16 - do it or two of the main ways there's
864:18 - filter and then there's L and IO Lo
864:21 - stands for location and IO stands for
864:23 - integer location and if you've seen
864:25 - other previous videos I've kind of
864:27 - mentioned those so we can take a quick
864:28 - look at all of those so really quickly
864:31 - we need to set an index because the
864:33 - index right now is uh not the best we'll
864:35 - set our index to
864:38 - Country so let's say
864:41 - df2
864:42 - is equal to DF do setor index and we'll
864:48 - say country I'm just doing df2 because
864:51 - later on I want to use that data frame
864:52 - again so I'm just going to assign it to
864:54 - another data frame so that we can just
864:56 - easily switch back and forth so now we
864:59 - have this index as the country and what
865:01 - we can do is use the filter function so
865:04 - let's go down here we'll say
865:07 - df2
865:09 - filter and we'll do an open parenthesis
865:11 - and now we can specify our items so
865:14 - these are actually going to be
865:14 - specifying which columns we want to keep
865:17 - so we're going to say items is equal to
865:20 - then we'll make a list we'll say
865:22 - continent hope that's how we spell
865:24 - continent I'm always messing up with my
865:27 - uh my stuff here my spelling then we'll
865:29 - do CCA 3 because why not you can specify
865:33 - whichever ones you want when we run this
865:36 - it's going to only bring in those two
865:38 - columns Now by default it's choosing the
865:40 - access for us but we can also specify
865:43 - which axis we want to search on so if we
865:45 - say axis is equal to zero it's actually
865:48 - going to search this axis this is the
865:50 - zero axis this is the one axis so where
865:53 - our columns are is one so if we go back
865:56 - and do one we're searching on that one
865:59 - Axis or those header axises again and
866:01 - this is the default but you can specify
866:03 - that so if you just want to search on uh
866:06 - you know filtering right here you can do
866:08 - that and let's actually copy this and do
866:11 - that right down here just you can see
866:12 - what it looks like but let's search for
866:15 - Zimbabwe and we'll do Zimbabwe and we'll
866:18 - be looking at the zero axis which is the
866:21 - up and down on the left hand side and
866:24 - when we filter on that we can filter by
866:26 - Zimbabwe by looking just at the country
866:29 - index we can also use the like just like
866:32 - we did before and I'll show you the
866:33 - exact same demonstration that we did
866:36 - which you can say like is equal to and
866:39 - instead of having to put in a concrete
866:41 - um text text you can just say United
866:44 - just like we did before and we're
866:45 - searching where the axis is equal to
866:47 - zero which again is this left-handed
866:49 - access so now we're looking for United
866:52 - and it's going to give us all of the
866:53 - countries or all the indexed values that
866:56 - have United in it like we were talking
866:57 - about before we also have l and ILO so
867:00 - we can say data frame 2. L now this is a
867:06 - specific value so we'll do United States
867:10 - so location is just looking at the
867:12 - actual name or the value of it not its
867:15 - position so if we search for United
867:17 - States it's going to give us this right
867:19 - here where it gives us all of the
867:20 - columns for United States and then all
867:22 - of the uh values for United States or we
867:27 - can
867:27 - do the io which is the energ location
867:31 - which is not the exact same because
867:34 - we're looking at the string for the L
867:37 - we're looking at this string but
867:39 - underneath it there still is a position
867:41 - that's that integer location let's do a
867:43 - completely random one let's just say
867:46 - three if we look at the third position
867:48 - it's going to give us ASM which I'm not
867:51 - exactly sure what it is but it still
867:53 - gives us basically the same kind of
867:54 - output which is the columns and the
867:57 - values so that's another way that you
867:58 - can search within your index when you're
868:00 - actually trying to filter down that data
868:03 - now let's go look at the order bu and
868:05 - let's start with the very first one that
868:07 - we looked at let's do data frame that's
868:09 - why I kept it because I wanted to use it
868:10 - later now we can sort and order these
868:13 - values instead of it just being kind of
868:14 - a jumbled mess in here we can sort these
868:18 - columns however we would like ascending
868:20 - descending multiple columns single
868:22 - columns and let's look at how to do that
868:24 - so we'll say data frame and then we'll
868:26 - do data frame look at rank again just
868:29 - like we were doing above and let's do
868:32 - data frame where it's less than 10 I
868:34 - should have just gone and copyed this I
868:36 - apologize so now we have this data frame
868:39 - that is greater than 10 now we can do do
868:44 - sortore values and this is the function
868:47 - that's going to allow us to sort
868:49 - everything that we want to sort so we
868:50 - can do buy is equal to and we'll just
868:54 - order it by the exact same thing that we
868:56 - were doing or calling it on we'll do
868:58 - rank so now what this is going to do
869:00 - it's going to order our rank
869:03 - column and as you can see it did that
869:05 - one 2 3 4 5 we can also do it with
869:08 - ascending or descending so if you want
869:11 - to you can look here and see what you
869:12 - can do so we'll do
869:14 - ascending we'll say that's equal to
869:17 - true and so that's the automatic default
869:20 - so that didn't change anything but if we
869:22 - say false it's going to be descending
869:24 - from highest to lowest so now we have it
869:26 - in the opposite direction now we don't
869:29 - have to just order or sort this on one
869:32 - single column we can do multiple columns
869:34 - and we can do that by making a list
869:36 - right here whoops make a
869:39 - list just like that and we'll input
869:42 - different ones as well so now let's
869:44 - input our
869:46 - country and when we run this it will
869:49 - give us rank of
869:51 - 9876 as well as the country of Russia
869:54 - Bangladesh Brazil now if you noticed the
869:57 - country really didn't change because the
869:59 - rank stayed the exact same that's
870:01 - because there's an order of importance
870:03 - here and it starts with the very first
870:04 - one if we change this around and we look
870:08 - at this
870:09 - one and put a com right here
870:12 - now the country is going to be descended
870:14 - and the rank would come second so it's
870:16 - not going the rank isn't going to really
870:18 - have any effect here so now we have the
870:21 - country United States Russia Pakistan
870:23 - and the rank really didn't get ordered
870:25 - at all now if we want to see how that
870:27 - can actually work let's do continent
870:29 - right here and actually put it right
870:32 - here and do country here so if we run
870:35 - this it's first going to come and it's
870:37 - going to organize or sort the continent
870:40 - then it's going to come come back and go
870:42 - to the country and then it's going to
870:44 - sort the country so keep so keep your
870:47 - eye right here in this Asia area because
870:49 - we're going to sort this differently
870:51 - than ascending so we have ascending
870:53 - false and that applies to both of these
870:55 - it's false and false but we can specify
870:58 - which one we want to do we can do a
871:00 - false here and a true here so we'll do
871:02 - false comma true and what this is going
871:05 - to do is it's going to say false for the
871:07 - continent so the continent right here is
871:09 - going to stay the exact same and so that
871:12 - is a lot of how you can filter and order
871:14 - your data within pandas I hope that this
871:16 - was helpful I hope that you enjoyed this
871:18 - video if you liked it be sure to like
871:19 - And subscribe below check out all my
871:21 - other videos on Python and pandas and I
871:23 - will see you in the next
871:26 - [Music]
871:36 - video hello everybody today we're going
871:39 - to be looking at indexing and pandas if
871:40 - you remember from previous videos the
871:42 - index is an object that stores the
871:44 - access labels for all Panda objects the
871:47 - index in a data frame is extremely
871:49 - useful because it's customizable and you
871:51 - can also search and filter based off of
871:53 - that index in this video we're going to
871:55 - talk all about indexing how you can
871:56 - change the index and customize that as
871:59 - well as how you can search and filter on
872:00 - that index and then we're also going to
872:02 - be looking at something a little bit
872:03 - more advanced called multi- indexing and
872:06 - you won't always use it but it's really
872:08 - good to know in case you come across a
872:10 - data frame that has that
872:12 - so let's get started by importing pandas
872:15 - import pandas as PD now we'll get our
872:18 - first data frame we say DF is equal to
872:21 - pd. read CSV and I've already copied
872:25 - this but we're going to do R and we're
872:28 - going to put this file path so I have
872:30 - this world population CSV I will have
872:32 - that in the description just like I do
872:34 - in all of my other videos let's run DF
872:38 - and let's take a look at this data frame
872:40 - so we have a lot of information here we
872:42 - have rank country continent population
872:46 - as well as the default index from zero
872:48 - all the way up to 233 now if you haven't
872:50 - watched any of my previous videos on
872:52 - pandas the index is pretty important and
872:54 - it's basically just a number or a label
872:56 - for each row it doesn't even necessarily
872:59 - have to be a unique number um you can
873:01 - create or add an index yourself if you
873:04 - want to and it doesn't have to be unique
873:06 - but it it really should be unique uh
873:08 - especially if you want to use it
873:09 - appropriately for what we're doing the
873:11 - country is actually going to be a pretty
873:13 - great index because the country you know
873:16 - is going to be all unique because we're
873:18 - looking at every single row as a
873:19 - different um country as well as the
873:21 - population so let's go ahead and create
873:24 - this country or add this country as our
873:26 - index now we can do this in a lot of
873:28 - different ways but the first way that
873:30 - you can do this if you already know what
873:32 - you are going to create that index on is
873:34 - we can just go right in here when we're
873:36 - reading in this file and we'll say comma
873:39 - index underscore oops I I spelled that
873:41 - completely wrong index uncore column and
873:44 - we'll say that is equal to and then
873:46 - we're going to say quote country so
873:49 - we're taking this country and we're
873:51 - going to assign it as the index now
873:54 - let's read this in and as you can see
873:57 - this is our index now it looks a little
873:59 - bit different we didn't have this
874:00 - country header right here which is
874:02 - specifying that this is still the
874:04 - country but you can tell that this is
874:05 - the index based off the um bold letters
874:08 - as well as it being on the far left and
874:11 - all the regular columns for the data is
874:13 - over here while the country header is
874:15 - right here and it's lower than all the
874:17 - others just a quick way that you can see
874:19 - that that is the index now before we
874:21 - move on I want to show you some other
874:22 - ways that you can do this as well but
874:24 - I'm going to show you how to reverse
874:26 - this index before we move on and we'll
874:29 - say data frame so we had our data frame
874:31 - right here so we have data frame dot
874:34 - we'll say reset index and then we'll say
874:38 - in place is equal to True which means we
874:41 - don't have to assign this to another
874:42 - variable and all that stuff it'll just
874:44 - be true so now when we run that data
874:46 - frame again the index was reset to the
874:49 - default numbers so now let's go down
874:51 - here I'll show you how to do this in a
874:53 - different way you can do DF do we'll say
874:55 - setor index and then we'll just say
874:59 - country so very similar to when we were
875:00 - reading in that file and we said set the
875:02 - index or that index column we said index
875:05 - column equals country if we do this and
875:08 - we run it in it works but if we say data
875:11 - frame right down here it's not going to
875:14 - save that if we want to save it just
875:16 - like we did above we're going to say in
875:18 - place is equal to true that is going to
875:22 - save it to where we don't have to assign
875:24 - it another variable so now when we run
875:26 - this the data frame right here which is
875:28 - going to populate this the data frame is
875:30 - going to say in place is equal to true
875:32 - so that country will now be our index
875:34 - again let's run this and there we go
875:37 - really quickly I wanted to give a huge
875:39 - shout out to the sponsor of this entire
875:40 - panda series and that is udemy udemy has
875:43 - some of the best courses at the best
875:44 - prices and it is no exception when it
875:46 - comes to pandas courses if you want to
875:48 - master pandas this is the course that I
875:50 - would recommend it's going to teach you
875:51 - just about everything you need to know
875:53 - about pandas so huge shout out to UD to
875:54 - me for sponsoring this Panda series and
875:56 - let's get back to the video now what's
875:57 - really great about this index is we're
875:59 - able to search based off just this index
876:02 - and so we can filter on it and basically
876:04 - look through our data with it and there
876:06 - are two different ways that you can do
876:07 - that at least this is a very common way
876:09 - that people who use pandas we'll do to
876:11 - kind of search through that index the
876:13 - first one is called lock and there's
876:15 - lock and iock that stands for location
876:17 - or integer location let's look at lock
876:20 - first let's say df.loc and then we'll do
876:24 - a bracket now we're able to specify the
876:26 - actual string the label so let's go
876:29 - right up here and let's say
876:30 - Albania so we'll say Albania so again
876:34 - this is just looking at the location
876:36 - let's run this now it's going to bring
876:38 - up all the Albania data just like here
876:41 - where it's kind of looks like a column
876:43 - in a column and we can get this exact
876:45 - same data but using iock right here and
876:50 - when we ran lock we were searching based
876:52 - off Albania which is in the 01 position
876:56 - so if we actually pull the one position
876:58 - for that
877:00 - integer the iock we can look at the one
877:04 - position and this should give us the
877:06 - exact same data now let's take a look at
877:09 - multi- indexing and we'll come back to a
877:11 - little bit of this in a second so multi-
877:14 - indexing is creating multiple indexes
877:17 - we're not just going to create the
877:18 - country as the index now we're going to
877:20 - add an additional index on top of that
877:23 - so let's pull up our data frame right
877:25 - now we have the country but let's do do
877:28 - reset
877:29 - index and we'll say in place equals true
877:34 - oops let's run it so now we have our
877:38 - data frame now let's set our index but
877:41 - this time when we set our index we're
877:42 - going to add the country as the index as
877:44 - well as the continent as an index so
877:47 - we'll say data frame. setor index then
877:51 - we'll do a parenthesis and instead of
877:53 - just doing country like we did before
877:56 - we're going to create a list oops and
877:59 - we'll do it like that and then we'll
878:02 - say oops
878:05 - continent and separate it by a comma so
878:08 - we have continents and Country let's
878:10 - just say in place is equal to true now
878:15 - when we run this we're going to have two
878:17 - indexes and let's see what this looks
878:20 - like and let's run this so now we have
878:24 - country as well as continent as our
878:27 - index now you may notice that these
878:30 - indexes are repeating themselves on this
878:32 - continent index we have Europe right
878:35 - here and Europe right here as well as
878:37 - Asia and Asia and it looks a little bit
878:40 - funky but we are able to sort these
878:43 - values and make they look a lot better
878:45 - so let's go ahead and try this we'll do
878:47 - DF do sortore index and when we run this
878:52 - it should sort our index alphabetically
878:55 - and we can also look in here and see
878:57 - what kind of things we can you know
878:59 - specify we can specify the axis but it's
879:02 - automatically going to be looking at the
879:03 - zero this is zero and this is one so we
879:05 - have two axes within our data frame you
879:08 - can choose the level whether it's
879:10 - ascending or not ascending in place kind
879:13 - string sort remaining all of these
879:15 - different things the only one that I
879:17 - really you know think is worth looking
879:19 - at is the ascending we already know some
879:20 - of these other ones but if we look at
879:23 - ascending let's run it now it's sorted
879:26 - these and so now it's kind of grouped
879:28 - together so we have Africa and all the
879:30 - African ones as well as South America
879:32 - and all the South American ones let's
879:35 - really quickly say
879:38 - pd. setor
879:41 - option and we'll say display.
879:46 - max. columns and just like this let's
879:49 - run it and I need to specify whoops
879:53 - specify right here let's see how many
879:54 - rows we
879:56 - have 235 so let's do
879:59 - 235 let's run this and now when we run
880:03 - this you can see that Africa is all
880:05 - grouped together and all the countries
880:07 - are in alphabetical order under it and
880:09 - then we go all the way down to Asia and
880:12 - again just all in alphabetical order if
880:14 - we wanted to we could say
880:16 - ascending equals
880:19 - true and then when we run this oh I
880:22 - meant to say false and then when we run
880:24 - this it's the exact opposite so it
880:25 - starts with South America the last one
880:28 - and then goes in reverse alphabetical
880:29 - order we could also say false make it a
880:33 - list and do comma
880:35 - true and just like this and then it
880:38 - would sort this First Column as false
880:40 - and this next column as true so you can
880:42 - really customize it but you know for
880:45 - what we're doing we don't need any of
880:46 - that we just need to be able to see this
880:48 - right here so now when we try to search
880:50 - by our index like we did before we did
880:53 - data frame. Loke now when we did that
880:56 - and we said you know let's say Angola
880:59 - when we specified Angola it's not going
881:01 - to work properly because it's searching
881:04 - in this first index for the first string
881:07 - that we have we can search Africa
881:11 - let's search for
881:13 - Africa and now we have all of the
881:15 - African countries and if we want to
881:18 - specify to Angola we can also go down
881:20 - another level oops by doing Ang
881:24 - Angola and now we have what we were
881:26 - looking at before where we're calling
881:28 - all the data within those but we
881:30 - couldn't do it just based off Africa
881:32 - because we had an additional Index right
881:34 - here so once we called both indexes now
881:37 - we get this view but let's look at that
881:40 - I look really
881:42 - quick when we run this let's just say
881:46 - one because right up here oh we have
881:50 - Angola zero and then one so you think it
881:54 - may pull up Angola let's go ahead and
881:56 - run this and it's still pulling up
881:59 - Albania let's go right up here if you
882:02 - remember when we didn't have the
882:04 - multiple indexes it was pulling up
882:06 - Albania the difference when you're doing
882:08 - these multi- indexes is that the the L
882:11 - is able to specify this whereas this one
882:15 - does not go based off that multi-
882:17 - indexing it's going to go based off the
882:19 - initial index or the integer based index
882:22 - so that's a lot about indexing in pandas
882:24 - we'll cover even a few more things in
882:26 - future videos as we get more and more
882:28 - into pandas but this is a lot of what
882:31 - indexing looks like within pandas and
882:33 - again super important to learn how to do
882:35 - and know how to do because it's a pretty
882:36 - important building block as we go
882:39 - through this Panda series so I hope you
882:41 - enjoyed this video on indexing if you
882:43 - did be sure to like And subscribe below
882:45 - and I will see you in the next
882:48 - [Music]
882:58 - video hello everybody today we're going
883:00 - to be taking a look at the group by
883:02 - function and aggregating within panas
883:05 - group I is going to group together the
883:07 - values in a column and display them all
883:09 - on the same row and this allows you to
883:11 - perform aggregate functions on those
883:13 - groupings so let's start reading in our
883:15 - data and take a look so we're going to
883:17 - do import pandas as
883:20 - PD and then we're going to say our data
883:22 - frame is equal to and we'll say pd. read
883:27 - CSV we'll do an open parenthesis R and
883:31 - our file path and we're going to be
883:32 - looking at the flavors CSV right here so
883:36 - right here we have our flavor of ice
883:38 - cream we have our base flavor flavor
883:40 - whether it was vanilla or chocolate
883:42 - whether I liked it or not the flavor
883:44 - rating texture rating and its overall or
883:47 - its total rating now these are all my
883:48 - own personal scores so you know I've
883:51 - spent years researching this so these
883:52 - are all very accurate but this should be
883:54 - a low stress environment to learn Group
883:56 - by and the aggregate functions so the
883:59 - first thing that we can do is look at
884:01 - our group by now you can't Group by well
884:04 - you can you can Group by flavor but as
884:06 - you can see these are all unique values
884:09 - what we need is something that has
884:10 - duplicate values or or similar values on
884:13 - different rows that'll group together so
884:16 - this base flavor is actually a perfect
884:18 - one to group it on and we'll do that by
884:20 - saying DF do group by do an open
884:24 - parenthesis and we'll just specify base
884:28 - flavor and this will then group together
884:30 - those values and I need to make sure I
884:32 - can spell properly this will group those
884:35 - flavors together so let's run this and
884:38 - as you can see it actually is its own
884:40 - object so it has a group by data frame
884:43 - Group by object so now that we've
884:45 - grouped them let's give it a variable so
884:48 - we'll say group underscore byor frame
884:52 - let's say that's equal to Let's copy
884:54 - this we'll run it and now what we need
884:58 - to do is run our aggregations in order
885:00 - to get an output so we're going to say
885:04 - mean and that's all we're going to put
885:06 - just for now just to get an output that
885:08 - we can take a look off and then we'll
885:10 - build from there so let's go ahead and
885:12 - run this and right here we have our base
885:16 - flavor which is now saying is the index
885:18 - of chocolate or vanilla and then it's
885:20 - taking the mean or the average of all
885:23 - the columns that have integers notice
885:25 - that it did not take the liked column
885:27 - and it did not take the flavor column
885:29 - because those are strings and they
885:30 - cannot aggregate those and we'll take a
885:32 - look at that later but it took all the
885:34 - values that have integers and then it
885:36 - gave us the average of those ratings
885:38 - really quickly I wanted to give a huge
885:40 - shout out to the sponsor of this entire
885:41 - Panda series and that is udemy udemy has
885:44 - some of the best courses at the best
885:45 - prices and it is no exception when it
885:47 - comes to pandas courses if you want to
885:49 - master pandas this is the course that I
885:51 - would recommend it's going to teach you
885:52 - just about everything you need to know
885:54 - about pandas so huge shout out to UD me
885:55 - for sponsoring this Panda series and
885:57 - let's get back to the video so right off
885:59 - the bat as averages with chocolate I
886:01 - have a much higher rating overall than
886:03 - the ones with vanilla bases now we can
886:06 - actually combine all of this together
886:08 - into one line and we can do something
886:09 - like this so we'll
886:12 - say DF do group by and we'll say mean
886:17 - just like this and this will actually
886:19 - run it before we didn't have any
886:21 - aggregating function on there so it
886:23 - didn't run but now that we combine it
886:24 - all into one it will run properly now
886:27 - there are a lot of different aggregate
886:29 - functions but I'm going to show you some
886:31 - of the most popular ones or the most
886:32 - common ones that you will see so let's
886:35 - copy this right here so we can do dot
886:39 - count and when we run this we can look
886:41 - at the count and this will show us the
886:43 - actual count of the rows that were
886:45 - aggregated so for chocolate we have
886:47 - three so there going to be three all the
886:49 - way across and for vanilla we had six so
886:51 - we're looking at a higher count of
886:53 - vanilla which if you're comparing it to
886:56 - this mean up here that could be a big
886:58 - skew towards the chocolate because if
887:00 - you have one or two good chocolates it
887:02 - could really pull the numbers up whereas
887:03 - if you had two good vanillas but all the
887:06 - other ones were bad it pulls that
887:07 - average down so knowing the count of
887:09 - something something is really
887:11 - good let's take a look at the next one
887:14 - and we can do Min and Max and I'll just
887:16 - run these really quickly we can do Min
887:19 - and when we run this the first thing
887:20 - that you should notice is that it now
887:22 - has a flavor and a liked column and
887:25 - that's because Min and Max will actually
887:27 - look at the first letter in the string
887:28 - or the first set of letters if there are
887:31 - um you know chocolate something it'll
887:33 - look at the first and then it'll
887:35 - actually populate it so chocolate with
887:37 - the CH chocolate is the very first or
887:40 - the minimum value for that string and
887:43 - for a cake batter that is the minimum
887:46 - value in vanilla as well now with the
887:48 - liked it's interesting because
887:50 - apparently I liked all the chocolate
887:51 - ones I'm going to go take a look so
887:53 - chocolate I liked chocolate I liked
887:55 - chocolate I lik so there is no no option
887:57 - in this liked column so yes was the only
887:59 - option and now let's look at Max
888:02 - whoops and it should do the exact
888:04 - opposite which is going to take the
888:06 - highest value even if it's a string so
888:08 - Rocky Road the letter r comes later in
888:10 - the alphabet so that's what it's looking
888:12 - at and so does vanilla and then we have
888:15 - yes as well and then of course right
888:17 - here it's taking the max value so before
888:20 - when we were looking at Min I just
888:21 - focused on those but it still does the
888:23 - exact same thing to these integer um
888:26 - columns as well so for the max value for
888:30 - vanilla it was mint chocolate chip that
888:31 - was our base so I had a rating of 10 for
888:34 - this vanilla row or grouping and then we
888:37 - can also look at the sum
888:40 - and there are all the sums for these and
888:43 - again it only does integer because we
888:44 - can't add the strings here are the sum
888:47 - or the total values for all of them and
888:49 - for the total values since we had you
888:51 - know six rows that were grouping into
888:53 - this vanilla we now have a lot of a much
888:56 - higher score for vanilla now that's a
888:58 - really simple way to do your
888:59 - aggregations but there is actually an
889:01 - aggregation function and let's take a
889:04 - look at this CU this is um a little bit
889:06 - more complex although when I write it
889:08 - out or show you hope it makes a lot of
889:10 - sense we can do a so this is our
889:14 - aggregate function and what we need to
889:16 - pass into our aggregate function is
889:18 - actually a dictionary so let's do an
889:20 - open parenthesis and we're going to do a
889:22 - squiggly bracket and then we need to
889:25 - specify what we're going to be
889:26 - aggregating on or what column so let's
889:28 - do this flavor rating let's copy this
889:32 - we'll do flavor rating and I need to put
889:34 - that as a
889:35 - string and then we'll do a colon and now
889:38 - we can specify what what aggregate
889:40 - functions we want so we've done sum
889:42 - count mean Min and Max all of those and
889:45 - we can actually put all of those into
889:47 - here and perform all of those
889:49 - aggregations on just one column so let's
889:52 - make a list and then let's say
889:55 - mean
889:57 - Max count and uh what's another one sum
890:02 - so let's do all four of those only on
890:05 - this flavor rating
890:07 - column and when we run this we have our
890:10 - base flavor right here chocolate and
890:12 - vanilla but now we don't have multiple
890:14 - columns we have one column with multiple
890:17 - Columns of our aggregations and it is
890:20 - possible to pass in multiple columns
890:23 - like that so we'll do texture
890:26 - rating and we'll just come right here
890:28 - and do a comma then we'll say uh uh
890:31 - texture
890:32 - rating and then a colon I don't know why
890:37 - I spelled it out when I copied it but I
890:39 - did and then we'll do the exact same
890:41 - ones and now when we run it we're
890:43 - getting the exact same columns mean Max
890:46 - count and sum for flavor rating then
890:48 - mean Max count and sum for our texture
890:50 - rating now so far we've only grouped on
890:53 - one column but we can actually group on
890:56 - multiple columns let's go back up here
890:58 - to our data and I should have just
891:00 - copied this down here let's go back down
891:03 - and just look at this so really we only
891:06 - grouped it on this base flavor but you
891:08 - can do multiple groupings or group by
891:11 - multiple columns so let's do our base
891:13 - flavor which we did already as well as
891:16 - the liked column so we're going to say
891:18 - DF dog Group by then we'll do an open
891:22 - parenthesis and then instead of just
891:24 - passing through one string we're going
891:27 - to do a list and we'll say base
891:31 - flavor oops comma and then we'll do
891:35 - liked so now when it groups this it
891:38 - should put put two groupings and let's
891:41 - run this and just see oops I got to say
891:43 - let's just do
891:46 - mean so now we have our chocolate and a
891:49 - vanilla and remember chocolate only had
891:52 - yes so that's the only one that it's
891:54 - going to group on but vanilla had a no
891:57 - and a yes so if we look at the vanilla
891:59 - we have our base flavor vanilla and then
892:01 - within liked we have no and a yes which
892:05 - can show us that within our vanilla when
892:07 - we group on these our NOS were really
892:09 - low
892:10 - but our yeses were really high we
892:11 - actually had a pretty similar rating or
892:13 - very close to the same rating as the
892:15 - ones we really liked in chocolate and
892:17 - just like we did above we can take this
892:20 - doag and I'm going to copy this and
892:23 - it'll perform it on each of those rows
892:26 - let me close that and what did I do
892:28 - wrong oh I need the squiggly
892:31 - bracket and it'll show us each of those
892:34 - so the mean Max count and sum for all of
892:37 - the chocolate and vanilla as well as the
892:39 - groupings of light yes and no now after
892:42 - we've looked at all that and that's how
892:44 - I usually do it there is one uh shortcut
892:47 - function that can give you some of these
892:48 - things just really quickly and so let's
892:51 - go back up here and take this it's just
892:54 - called describe um and if you've ever
892:56 - done it it's just going to give you some
892:58 - high level overview of some of those
893:00 - different aggregations so let's run this
893:03 - and it's going to give us our chocolate
893:04 - and vanilla and within each column it's
893:07 - going to give us our count our mean our
893:09 - standard deviation I believe is what
893:11 - that is our minimum 25% 50 75 and 100
893:15 - which is our Max then our count and our
893:17 - means so a lot of those aggregate
893:19 - functions but the describe is you know a
893:22 - very generalized um function we can't
893:25 - get as specific as we were with the
893:27 - previous ones that we were looking at
893:29 - but I just wanted to throw this out
893:30 - there in case this is something that
893:31 - you'd be interested in because it you
893:32 - know technically is showing a lot of
893:35 - those aggregate functions just you know
893:37 - all at one time so that is our group Buy
893:39 - and aggregate functions within pandas I
893:41 - hope that that was helpful I hope that
893:42 - you understood you know everything that
893:44 - we were working on if you like this
893:45 - video be sure to like And subscribe and
893:47 - check out all my other videos on python
893:49 - as well as pandas and I will see you in
893:51 - the next
893:53 - [Music]
894:03 - video hello everybody today we're going
894:06 - to be talking about merging joining and
894:07 - concatenating data frames in p do this
894:10 - whole video is basically around being
894:11 - able to combine two separate data frames
894:14 - together into one data frame these are
894:16 - really important to understand when
894:17 - we're actually using the merge and the
894:19 - join right here we have what's called an
894:21 - inner join and the Shaded part is what's
894:24 - going to be returned it's only the
894:25 - things that are in both the left and the
894:28 - right data frames then we have an outer
894:31 - join or a full outer join and this will
894:33 - take all the data from the left data
894:35 - frame and the right data frame and
894:37 - everything that is similar so basically
894:39 - just takes everything we also have a
894:41 - left join which is going to take
894:43 - everything from the left and then if
894:44 - there's anything that's similar it'll
894:46 - also include that and then the exact
894:48 - opposite of that is the right join which
894:50 - is going to give us everything from the
894:52 - right data frame and it's going to give
894:54 - us everything that is similar but it's
894:55 - not going to give us anything that is
894:57 - just unique to the left data frame so
894:59 - this is just for reference because in a
895:01 - little bit when we start merging these
895:03 - these become very important so I just
895:04 - wanted to kind of show you how that
895:06 - works visually so let's get started by
895:08 - pulling in our files so first we're
895:10 - going to say import and is aspd we'll
895:13 - run this and then we'll say data frame
895:16 - one and we'll also have a data frame two
895:18 - and these are the different data frames
895:20 - the left and the right data frame that
895:22 - we'll be using to join merge and
895:24 - concatenate so we'll say data frame 1 is
895:26 - equal to pd. CSV read and we'll do R and
895:33 - here is our file path so we have this
895:35 - lr. CSV that's our Lord of the Rings CSV
895:39 - and let's call that really quickly so we
895:41 - can see what's in there and I'm having a
895:43 - dyslexic moment uh because it's supposed
895:45 - to be reor CSV uh I apologize for that
895:49 - but this is our data frame this is our
895:51 - data frame one we have three columns
895:53 - it's their Fellowship ID 10001 2 3 and
895:56 - four their first name froto Sam wiise
895:58 - gelf and Pippen and their skills hide
896:00 - and gardening spells and fireworks so
896:02 - this is our very first data frame that
896:04 - we're going to be working with let's go
896:06 - down a little bit let's pull this down
896:09 - here and we're just going to say data
896:11 - Frame 2 Data Frame 2 and this is the
896:14 - Lord of the Rings 2 so let's pull this
896:17 - one in now as you can see it's very
896:19 - similar we have Fellowship ID 1 2 6 7 8
896:23 - so we have three different IDs here we
896:26 - don't have six seven and eight in this
896:28 - upper this First Data frame we also have
896:31 - the first name so froto and Sam or Sam
896:33 - wise are in the very first and the
896:35 - second data frame but now we have three
896:37 - new people barir Eland and legalis and
896:40 - now we have this age column which again
896:43 - is unique to just this second data frame
896:45 - really quickly I want to give a huge
896:46 - shout out to the sponsor of this video
896:47 - and that is zendesk I've been using
896:49 - zenes for my company's customer
896:51 - analytics and it has been absolutely
896:52 - phenomenal they're going to be hosting a
896:54 - conference called zenes relate on May
896:55 - 10th and they're going to talk all about
896:57 - customer analytics chat Bots and AI in
897:00 - this space you can attend in person in
897:01 - San Francisco or you can attend
897:03 - virtually but space is limited so be
897:05 - sure to apply if you want to attend so
897:07 - if you are a business leader and you
897:08 - want to make most out of your customer
897:10 - data or you want to learn customer data
897:12 - analytics I will leave links in the
897:14 - description again huge shout out to
897:15 - zendesk for sponsoring this video now
897:17 - the first one that I want to look at is
897:19 - merge and I want to look at merge first
897:21 - because I think this one is the most
897:22 - important I use this one more than any
897:24 - of ones that we're going to talk about
897:25 - today the merge is just like the joins
897:28 - that we were just looking at the outer
897:31 - the inner the left and the right and
897:32 - there's also one called cross and I'll
897:34 - show you that one although if I'm being
897:36 - honest I don't really use that one that
897:38 - much but It's Worth showing just in case
897:40 - you come into a scenario where you do
897:42 - want to do that so let's go right down
897:44 - here and I want to be able to see these
897:46 - while we do it so we're going to say
897:48 - data frame one and when we specify data
897:51 - frame one as the very first data frame
897:54 - we say datf frame. merge this is
897:57 - automatically going to be our left data
897:59 - frame then if we do our parentheses
898:02 - right here and we say data Frame 2 this
898:05 - is our right data frame and let's see
898:07 - what happens when we do this
898:09 - so what it's going to do and this we
898:11 - didn't specify this it's just a default
898:14 - it's going to do an inner join so it's
898:16 - only going to give us an output where
898:18 - specific values or the keys are the same
898:20 - now you can't see this but what is
898:22 - happening is is it's taking this
898:23 - Fellowship ID and saying I have 101 here
898:27 - a 102 here this is the exact same as up
898:31 - here with this Fellowship ID and
898:33 - fellowship ID of 101 and 2 but when we
898:36 - look at 13 and 4 those aren't in this
898:38 - right right data frame and 678 is not in
898:41 - this left data frame so the only ones
898:44 - that match are this 101 and two and
898:47 - that's why they get pulled in down here
898:48 - but because we didn't explicitly say
898:52 - here's what I want to join or merge
898:54 - between these two data frames it
898:56 - actually is looking at the fellowship ID
898:58 - and the first name so it's taking in
899:00 - these unique values of froto and Sam
899:02 - wise which are the same in both which is
899:05 - why I pulled it over but really quickly
899:08 - let's just check and make sure that we
899:09 - did it on the inner join because again
899:13 - we didn't specify anything that was just
899:14 - the default so we're going to say how is
899:17 - equal to and then we'll say iner and if
899:20 - we run this it's going to be the exact
899:22 - same because again the inner is the
899:24 - default but now just to show you how
899:27 - it's kind of joining these two uh data
899:29 - frames together I'm going to say on is
899:32 - equal to and then I'm only going to put
899:35 - Fellowship ID so let's run this now the
899:38 - first thing that you make may have
899:39 - noticed is this first name undor X and
899:41 - this first name uncore Y what the merge
899:44 - does as kind of a default is when you
899:47 - were only joining on a fellowship ID we
899:49 - have this right data frame with
899:50 - Fellowship ID the left data frame with
899:53 - the fellowship ID if you're just joining
899:55 - on these and you're not joining on the
899:57 - first name and the first name then it's
899:59 - going to separate those into an
900:01 - underscore X and an underscore Y and
900:04 - even though they have the exact same
900:05 - values since we are not merging on that
900:08 - column it automatically separates that
900:10 - into two separate columns so we can see
900:12 - the values within each of those columns
900:14 - if we went into this on and we make a
900:17 - list and let's do it like that and we
900:20 - say comma and then we write first name
900:24 - oops first name and then we run this
900:28 - it's going to look exactly like it did
900:30 - before again it automatically pulled in
900:33 - both of these columns when it was
900:34 - merging at the first time even though we
900:36 - didn't write anything but if we actually
900:38 - write this this it's doing exactly what
900:40 - it was doing when we just had df2 we're
900:42 - just now writing it out now there are
900:44 - other arguments that we can pass into
900:46 - this merge function let's hit shift Tab
900:49 - and let's scroll down here so within
900:51 - this merge function we have a lot of
900:53 - different arguments that you can pass
900:54 - into it first we have this right which
900:56 - is the right data frame which is this
900:58 - data frame two then we have the how and
901:00 - the on which we've already shown how to
901:02 - do there's a left on right on left Index
901:06 - right index not something you'll
901:08 - probably use that much but you
901:10 - definitely can if you want to look into
901:11 - that and there's all these doc strings
901:13 - which show you exactly how to use all of
901:14 - these so if you're interest in looking
901:17 - at the left and the right and the left
901:18 - index it's all in here the one that is
901:21 - really good is the sort and you can sort
901:23 - it saying either it's false or true then
901:26 - we have these suffixes now if you
901:28 - remember when we took these out what it
901:30 - automatically did was it put in these
901:33 - underscore X and underscore y you can
901:36 - customize that and you can put in what
901:38 - whatever you'd like instead of the
901:40 - underscore X andore Y you can put in
901:42 - some custom um string for that we also
901:45 - have an indicator and a validates again
901:47 - all things you can go in here and look
901:49 - at I'm just going to show you the stuff
901:50 - that I use the most so these things
901:53 - right here are things that I definitely
901:55 - use the most so now that we've looked at
901:56 - the inner join let's copy this right
901:58 - down here and let's look at the outer
902:01 - join and these get a little bit more
902:03 - tricky I think the inner join is
902:05 - probably the easiest one to understand
902:08 - well look at the outer is spelled o u t
902:11 - e r i I don't know why I always want to
902:13 - say o t t r but let's run this and see
902:16 - what we get so now this looks quite
902:19 - different the inner join only gave us
902:22 - the values that are the exact same this
902:25 - one is going to give us all of the
902:27 - values regardless of if they are the
902:29 - same so we have 1 2 3 4 six seven and
902:33 - eight so let's scroll back up here so we
902:37 - have 1 2 3 4 1 two and six s and 8 so we
902:40 - don't have a 105 and then if you notice
902:43 - in this data frame right here if the
902:46 - value doesn't have so if we can't join
902:48 - on the fellowship ID or the first name
902:51 - like legalis wasn't one that we joined
902:52 - on or that has a similar value in the
902:55 - left data frame it just gives us an N
902:58 - which is not a number and it's going to
903:00 - do that for any value where it couldn't
903:02 - find that join or it couldn't match uh
903:04 - something within that either ID or first
903:06 - name so in age we also have that for the
903:09 - ones that weren't in the right data
903:11 - frame we only had 101 and 102 so we'll
903:15 - have the age for both froto and Sam but
903:17 - for Gandalf and Pippen we don't have
903:20 - their corresponding IDs and so it's just
903:23 - going to be blank for Gandalf and Pippen
903:25 - and you can see that right here so again
903:28 - outer joins are kind of the opposite of
903:30 - inner joins they're going to return
903:32 - everything from both if there is
903:34 - overlapping data it won't be duplicated
903:36 - now let's go on to the left join and I'm
903:39 - going to pull this down right here and
903:41 - now we're just going to say how is equal
903:43 - to left and let's run this so what this
903:48 - is going to do is it's going to take
903:50 - everything from the left table or the
903:52 - left data frame right here so everything
903:54 - from data frame one then if there is any
903:57 - overlap it'll also pull the overlapped
903:59 - or the you know whatever we're able to
904:01 - merge on from data Frame 2 so let's go
904:04 - back up to our data frame 1 and two so
904:06 - it's going to pull everything from this
904:08 - left data frame cuz we're specifying
904:10 - we're doing a left join so everything
904:12 - from the left data frame will be in
904:14 - there we're also going to try to bring
904:16 - in everything from the right but only if
904:19 - it matches or or is able to merge so
904:21 - just this information right here will
904:23 - come over we weren't able to join on
904:26 - 1006 17 or 1008 so really none of that
904:30 - information is going to come over so
904:32 - let's go down and check on this so again
904:35 - we have 1 2 3 4 all of the data with
904:38 - this first name and skills everything is
904:40 - in here but then we are trying to bring
904:43 - over the age but we only have matches
904:45 - with 1,1 and 1002 so only these two
904:48 - values will come in let's look at the
904:50 - right join because it's basically the
904:52 - exact opposite let's look at the
904:56 - right and this is basically the exact
904:58 - opposite of the left in the fact that
905:00 - now we're only looking at the right hand
905:02 - and then if there's something that
905:04 - matches in data frame one then we will
905:06 - pull that in so this this is basically
905:09 - just looking like data Frame 2 except
905:11 - we're pulling in that skills column and
905:13 - since only 101 and 102 are the same
905:17 - that's why the skills values are here
905:20 - now those are the main types of merges
905:22 - that I will use when I'm using a data
905:24 - frame or when I'm trying to merge a data
905:26 - frame but there also is one called a
905:28 - cross or a cross join uh and let's look
905:31 - at this one and this one is quite a bit
905:34 - different here we go let's run this so
905:37 - this one is different in that it takes
905:39 - each value from the left data frame and
905:41 - Compares it to each value in the right
905:44 - data frame so for froto in this left
905:47 - data frame it looks at the froto in the
905:49 - right data frame Sam wise in the right
905:51 - data frame legalis elron and baromir all
905:54 - on the right data frame then it goes to
905:56 - the next value Sam wise and does the
905:58 - exact same thing Roto Sam wise legalis
906:01 - Elon baromir and it does that for every
906:03 - single value so let's go right back up
906:06 - here so it's taking this this this 101
906:10 - it's comparing it to 1 2 3 4 5 then it's
906:13 - taking Samwise it's comparing it to 1 2
906:16 - 3 4 5 Gandalf 1 2 3 4 5 Pippen and then
906:19 - you kind of see that pattern and that's
906:21 - what a cross joint is um there are very
906:23 - few in my opinion reasons for a cross
906:26 - join although you'll if you ever do like
906:28 - an interview where you're being
906:29 - interviewed on python you will sometimes
906:32 - be asked on Cross joins but there aren't
906:34 - a lot of instances in actual work where
906:37 - you really use need a cross join now
906:40 - let's take a look at joins and joins are
906:43 - pretty similar to the merge function and
906:46 - it can do a lot of the same thing except
906:48 - in my opinion the join function isn't as
906:51 - easily understood as the merge function
906:53 - it's a little bit more complicated um
906:56 - but let's take a look and see how we can
906:58 - join together these data frames using
907:00 - the join function so let's go right up
907:01 - here we're going to say data frame one
907:04 - do join and then we'll do data frame two
907:07 - very similar to how we did it before and
907:10 - let's try running this and it's not
907:12 - going to work um when we did the merge
907:14 - function it had a lot of defaults for us
907:17 - let's go down and see what this error is
907:19 - it says the columns overlap but no
907:21 - suffix was specified so it's telling us
907:24 - that it's trying to use the fellowship
907:25 - ID and the first name just like the join
907:27 - did except it's not able to distinguish
907:31 - which is which and so we need to go in
907:33 - there and kind of help it out a little
907:34 - bit again a little bit more Hands-On
907:37 - than the merge but let's see what we can
907:39 - do to make this work let's do comma and
907:42 - we'll say on and let's really quickly
907:45 - let's open this up and kind of see what
907:47 - we have so this one has less options
907:49 - than the merge does we have other and
907:51 - that's our other data frame we can do on
907:54 - and we're going to specify you know what
907:56 - column do we want to join on and then we
907:57 - can look at how do we want it to be a
907:59 - left an inner an outer the same kind of
908:02 - types of joins as the merge then we have
908:04 - that left suffix right suffix and that's
908:07 - right here is kind of part of the issue
908:09 - that we were just facing is that those
908:11 - columns are the same but if we say left
908:13 - suffix it'll give us an underscore
908:16 - whatever we want to specify any string
908:18 - four columns that are both in the left
908:20 - and the right we can give it a unique
908:22 - name so we'll no longer have that issue
908:24 - and then we can also sort it like we did
908:26 - on the other one but anyways let's go
908:28 - back to our on we'll say on is equal to
908:31 - and then we'll say
908:33 - Fellowship ID let's try running this and
908:37 - we're still getting an error it's just
908:39 - not as simple as the merge so let's keep
908:41 - going so now let's specify the type so
908:43 - we'll say how is equal to and we'll do
908:46 - an
908:46 - outer and if we run this it still
908:49 - doesn't work we're still getting the
908:50 - exact same issue as the left suffix and
908:52 - the right suffix so now let's finally
908:54 - resolve it I just wanted to show you how
908:56 - a little bit more frustrating it was but
908:58 - now let's say uh L suffix is equal to
909:03 - and now it automatically when we did the
909:05 - merge did an underscore X but we can do
909:07 - let's do
909:08 - underscore uh
909:10 - left and then we can do a comma we'll do
909:13 - right
909:14 - suffix and we'll says equal to and we'll
909:17 - do underscore right now when we run this
909:21 - it should work properly let's run this
909:24 - so this is our output and obviously
909:26 - looks quite a bit different over here we
909:29 - have this Fellowship ID then we also
909:31 - have Fellowship ID left first name left
909:34 - Fellowship ID right and first name right
909:37 - so it just doesn't doesn't look right
909:39 - now something I didn't specify when I
909:40 - first started this cuz I kind of wanted
909:41 - to show you is that the join usually is
909:45 - better for when you're working with
909:46 - indexes before when we were using the
909:49 - merge we were using the column names and
909:52 - that worked really well and it was
909:53 - pretty easy to do but as you can see
909:55 - right here when we're trying to use
909:56 - these column names it's not working
909:58 - exceptionally well let's go ahead and
910:00 - create our index and then I can show you
910:02 - how this actually works and how it works
910:04 - a little bit better when we're working
910:05 - with just the index although you can get
910:08 - to work just the same as the merge it's
910:10 - just a lot more work so let's go right
910:12 - down here and let's go and say df4 so
910:15 - we'll create a new data frame we'll say
910:18 - df1 do setor index and we'll do an open
910:23 - parentheses and we'll say we want to do
910:25 - this index on the
910:28 - fellowship ID and then we're going to do
910:31 - the join so now we're going to say join
910:33 - so we're setting an index so we're
910:35 - setting that index on the fellowship ID
910:37 - now we're we're going to join it on df2
910:40 - do setor index and then we're also going
910:44 - to do that on the fellowship ID and I'll
910:47 - just copy
910:51 - this oh geez I hate it when I do that
910:55 - okay now we also want to do and specify
910:58 - the left and the right index so I'll
910:59 - just copy this as we do need to specify
911:02 - this now let's try running the data
911:05 - frame 4 so really quick just to recap we
911:08 - were setting the indexes we were doing
911:10 - the same thing above right we have this
911:12 - join we were joining data frame one with
911:15 - data Frame 2 now we're joining data
911:17 - frame 1 with data frame two except in
911:20 - both instances we're setting the index
911:22 - as Fellowship ID so we're joining now on
911:25 - that index so now let's run this and
911:27 - this should look a lot more similar to
911:29 - the merge than the join that we did
911:31 - above except now the fellowship ID right
911:34 - here is actually an index so it's just a
911:37 - little bit different but we can still go
911:39 - in here and do how is equal to
911:43 - Outer oops let's say outer so we can
911:46 - still specify our different types of
911:48 - joins or the different way that we can
911:49 - merge or join these data frames together
911:52 - we can still specify that again it's
911:54 - just a little bit different and that's
911:56 - why for most instances I'm using that
911:58 - merge function because it's just a
911:59 - little bit more seamless little bit more
912:01 - intuitive the join function can still
912:03 - get the job done but as you can see it
912:05 - takes a little bit more work now let's
912:07 - look at concatenate concatenating data
912:09 - frames can be really useful and the
912:11 - distinction between a merge and join
912:13 - versus the concatenate is that the
912:15 - concatenate is kind of like putting one
912:17 - data frame on top of the other rather
912:19 - than putting one data frame next to one
912:21 - another which is like the merge and the
912:23 - join so concatenating them is just a
912:25 - little bit different in how it'll
912:26 - operate but let's actually write this
912:28 - out and see how this looks let's go up
912:30 - here and we'll say pd. concat we'll do
912:34 - an open parenthesis and then we're going
912:36 - to concatenate data frame 1 comma data
912:40 - Frame 2 that's all we have to write and
912:42 - let's run this and so just like I said
912:45 - it literally took the First Data frame 1
912:47 - 2 3 4 and put it on top of the right
912:50 - data frame 1 2 6 7 8 so that is our left
912:54 - data frame this is our right data frame
912:56 - and they're literally just sitting one
912:58 - on top of the other but just like when
912:59 - we merg either with a left or a right
913:02 - when you have these skills and there
913:03 - aren't any values that populate for them
913:06 - it is going to say not a number and
913:08 - since we're not actually joining we're
913:09 - not joining on one and two even though
913:11 - this one and this one is the same rows
913:14 - it's not populating that value because
913:16 - again we're not joining these together
913:18 - we're just concatenating and putting one
913:19 - on top of the other now if we go into
913:22 - this concat we say shift tab there are a
913:25 - lot of different things that we can do
913:27 - which if you remember the zero axis is
913:29 - the leftand index and the axis of one is
913:33 - the top index which is the columns so
913:35 - you can specify that and we can also o
913:38 - do joins and this is the one that I'm
913:40 - going to take a look at but there are
913:41 - other ones that you can um look into as
913:43 - well let's look at join let's do comma
913:47 - and we'll say join is equal to and let's
913:49 - do an inner join so let's see what
913:52 - happens with this as you can see it is
913:54 - only taking the columns that are the
913:56 - same that's what this in is doing it's
913:58 - joining these columns together and the
914:01 - ones that were different they didn't
914:02 - take because again we weren't able to
914:05 - combine them they aren't similar between
914:07 - both frames Let's do an outer and now
914:10 - it's going to take all of them and like
914:12 - I said that's doing this on these
914:14 - columns right here but we can also do it
914:15 - on this axis as well so let's go ahead
914:18 - and say axis is equal to one and when we
914:23 - run this now it's joining us on this
914:24 - Index right here of 0 1 2 3 4 so now
914:27 - these ones are being joined together and
914:29 - it's putting it side by side much like a
914:32 - merge wood so that's how concatenate
914:34 - works and I'm going to show you one more
914:36 - thing and again it's not up here in this
914:38 - you know title because it's not one that
914:40 - I recommend but is one called append the
914:43 - append function is used to append rows
914:45 - from one data frame to the end of
914:47 - another data frame and then we can
914:48 - return that new data frame and so let's
914:50 - do data frame one. aend we'll do an open
914:54 - parenthesis and we'll say data Frame 2
914:56 - very similar to how we've been doing
914:58 - other things and let's run this and as
915:00 - you can see this is almost exactly like
915:02 - how the concatenate did when we first
915:04 - did it but if we read kind of this
915:05 - warning it's saying the frame append
915:08 - method is deprecated and will be removed
915:11 - from pandas in the future version use
915:13 - pandas do concat instead so it's
915:15 - literally warning us you know a pend is
915:17 - on its way out if you want to do exactly
915:19 - what you're doing right here go and try
915:21 - concat or concatenate because that'll do
915:23 - the exact same thing so I'm not really
915:25 - going to show you any other variations
915:27 - of a pend because there's no reason it's
915:29 - going to be on its way out in the next
915:31 - version so that is our video on merge
915:34 - join and concatenate and aend as well uh
915:36 - in panda does and I hope that that was
915:38 - helpful I hope that you learned
915:39 - something I mean this stuff is really
915:41 - important because often times you're not
915:42 - just working with one CSV or one Json or
915:45 - one text file you're working with
915:46 - multiple of them and you need to combine
915:48 - them all into one data frame and so this
915:50 - is a really really important concept and
915:53 - thing to understand with that being said
915:55 - be sure to like And subscribe check out
915:57 - all my other videos on Python and pandas
915:59 - and I will see you in the next
916:02 - [Music]
916:06 - video
916:07 - [Music]
916:13 - hello everybody today we're going to be
916:14 - building visualizations in pandas in
916:17 - this video we'll look at how we can
916:18 - build visualizations like line plots
916:20 - Scatter Plots bar charts histograms and
916:23 - more I'll also show you some of the ways
916:25 - that you can customize these
916:26 - visualizations to make them just a
916:27 - little bit better with that being said
916:29 - let's go right over here start importing
916:31 - our libraries and we'll start with
916:33 - importing pandas as PD and this one is
916:36 - really all you need to actually create
916:38 - the visualizations in pandas but we may
916:40 - get a little bit crazy uh and so we're
916:42 - going to do a few different ones as well
916:44 - like import
916:46 - numpy as NP and then we're going to do
916:50 - import Matt plot lib do
916:54 - pyplot as PLT now I may or may not use
916:57 - this I just you know when I get into
916:59 - visualizations I may want to change some
917:01 - different things so we're going to at
917:03 - least have them here in case we do want
917:04 - to use them let's go ahead and run this
917:08 - so now let's get our data set that we're
917:09 - going to be using so let's say data
917:12 - frame is equal to pd. read _
917:16 - CSV and let's get this in right here now
917:19 - we're going to be doing these ice cream
917:21 - ratings let's take a look at this really
917:22 - quickly now these values are completely
917:26 - randomly generated they are not real in
917:28 - any way um but that's what we're going
917:31 - to be using cuz I just wanted something
917:32 - kind of generic something that wouldn't
917:33 - be too crazy confusing just something
917:35 - that we could use and you guys can
917:37 - understand that they're just numerical
917:38 - values but let's also set that index
917:41 - really quick so we'll say data frame.
917:43 - setor index and then we'll say date and
917:47 - then we'll say that's equal to the data
917:49 - frame and we have this date column right
917:51 - here as our index so we have uh January
917:54 - 1st 2nd 3rd 4th and then we have our
917:56 - ratings right here and again these are
917:59 - all just integers and they're pretty
918:00 - easy or are really easy to demonstrate
918:03 - how you can visualize these so that's
918:05 - why we're using it today so the way that
918:06 - we visualize something in pandas is we
918:08 - use something called plot so let's just
918:11 - take our data frame we'll do data frame.
918:13 - plot and we'll do our parentheses now
918:16 - let's go in here really quickly let's
918:18 - hit shift Tab and this is going to come
918:20 - up and this is pretty important because
918:24 - this kind of is going to tell us what we
918:25 - can do within this plot and
918:27 - unfortunately there isn't like a quick
918:29 - overview we just have this doc string
918:31 - but we have our parameters right here
918:33 - these are what we can pass in to kind of
918:35 - customize our visualization so the data
918:38 - is going to be our data frame then we
918:40 - have our X and Y labels we can specify
918:43 - the kind and this one's important
918:44 - because you can specify what kind of
918:47 - visualization do we want we can do a
918:49 - line plot horizontal a vertical bar plot
918:53 - histogram box plot and then a few others
918:55 - including area Pi density all these
918:58 - other things we can also specify if we
919:00 - want it to be a subplot and a lot of
919:02 - these things that I'm specifying you
919:04 - know I'm going to show you how to do you
919:06 - can use a different indexes you can add
919:08 - titles add grids Legends Styles all
919:11 - these different things I mean you can go
919:13 - through here CU there are a lot but you
919:15 - can specify and and you know customize
919:17 - all of these things we won't be going
919:19 - into all of them but I will show you
919:21 - some of the ones that I probably use the
919:23 - most and that I think are the most
919:24 - useful to know right away so let's get
919:26 - out of here and we're just going to do
919:28 - DF do plot and when we run this we'll
919:31 - get this right here and that was super
919:33 - super easy created a line plot by
919:35 - literally doing just about nothing
919:37 - nothing um but by default it's going to
919:39 - give us a line plot so if we come up
919:42 - here we say kind and let me get that out
919:45 - of the way is equal to line and we run
919:49 - this so by default without us actually
919:51 - having to input anything it's giving us
919:53 - that line plot as a default so uh we can
919:56 - specify it's a line plot as you can see
919:58 - we already have all of our data right
920:00 - here we didn't have to specify anything
920:02 - it kind of automatically took it in it
920:04 - is visualizing all three of these
920:06 - columns
920:08 - and it has this little um Legend right
920:10 - here and we can specify where we want
920:12 - that uh there is an argument to be able
920:14 - to do that it also gave us these tick
920:16 - marks of 2 4 6 8 10 again it read in and
920:21 - said it's only going from 0.0 to 1.0
920:25 - that is kind of the peak and so it kind
920:27 - of automatically gave us these ticks for
920:29 - us again that's another thing that you
920:30 - can specify we make it go up to 2 5 10
920:33 - 1,000 whatever you want it to be and
920:35 - then we're doing this based on off of
920:37 - this date value right here really
920:39 - quickly I wanted to give a huge shout
920:40 - out to the sponsor of this entire Panda
920:42 - series and that is udemy udy has some of
920:44 - the best courses at the best prices and
920:46 - it is no exception when it comes to
920:48 - pandas courses if you want to master
920:50 - pandas this is the course that I would
920:51 - recommend it's going to teach you just
920:52 - about everything you need to know about
920:54 - pandas so huge shout out to you me for
920:56 - sponsoring this Panda series and let's
920:57 - get back to the video if we wanted to
920:59 - break these out by the actual column we
921:03 - could go in here and say subplot is
921:06 - equal to true and it's actually subplots
921:10 - whoops and now we can run that and then
921:13 - we can see each of those columns being
921:14 - broken out by themselves instead of them
921:16 - all being in one visualization it's now
921:19 - uh three separate visualizations now
921:21 - let's go right over here we're going to
921:23 - get rid of the subplots I want to show
921:24 - you just some of the different arguments
921:26 - that you can use to make this look nice
921:28 - uh because I don't want to do this on
921:29 - every single visualization I just want
921:31 - to show you what you can do so we have
921:34 - this one right here we can add a title
921:36 - notice there's no title or anything
921:37 - really telling us what that is so we can
921:39 - say comma title and we'll say ice cream
921:44 - ratings if we run this we now have this
921:47 - nice title right here now we can also
921:50 - customize the labels or the titles for
921:52 - the X and Y AIS it automatically took
921:54 - this date which is right here this is
921:57 - our date index it automatically took
921:59 - that for us but we can customize that if
922:01 - we'd like to all we have to do is comma
922:04 - and then we'll say xlabel is equal to
922:07 - and so our X is this date one right here
922:10 - and we can say daily
922:12 - rating and then we can do the Y Lael
922:15 - we'll say y label is equal to and for
922:18 - this one we can say
922:20 - scores hope you cannot hear my dog in
922:22 - the background CU they being insane uh
922:24 - but let's go ahead and run this and now
922:26 - we have these daily ratings on the x-
922:28 - axis and on the Y AIS we have scores now
922:31 - let's go right down here and start
922:33 - taking a look at our next kind of
922:35 - visualization which is going to be a bar
922:37 - plot so we'll do DF do plot we'll do
922:40 - kind is equal to and for this one we're
922:43 - going to say bar now this is what your
922:45 - typical bar plot will look like and a
922:47 - lot of the arguments that we just did on
922:50 - the line plot you can also apply to this
922:52 - bar plot something that's unique to the
922:54 - bar plot is that you can also make it a
922:56 - stacked bar plot all we have to do is go
922:58 - in here we'll say comma and we'll say
923:00 - stacked is equal to true so now this
923:04 - going to make it a stacked bar chart
923:06 - instead of just know your regular bar
923:07 - chart let's go ahead and run this and as
923:09 - you can see this is now stacked on top
923:11 - of one another with each of these
923:13 - columns all representing the values that
923:15 - they have now we don't always have to do
923:17 - every single column we can also specify
923:20 - the column that we want so let's take
923:22 - the flavor rating for example we could
923:25 - do flavor oops flavor rating good night
923:30 - flavor rating and then it's only going
923:33 - to take in that flavor rating column and
923:35 - if you notice we don't have a legend
923:37 - that's only when you have multiple
923:38 - values which we are only looking at this
923:40 - one column so all the values are right
923:43 - here now in this bar chart it
923:44 - automatically defaults to a vertical bar
923:47 - chart but you can change it to a
923:49 - horizontal bar chart let's go ahead and
923:50 - take a look at how to do that bring back
923:53 - all of them we'll do DF do plot Dot and
923:57 - then we'll say
923:58 - barh and I don't know if I can keeping
924:01 - that kind equals bar let me run this
924:03 - yeah I need to get rid of that because
924:04 - the bar. H is its own um this is its own
924:08 - function so now I'm going to run this it
924:10 - should just have a stacked bar chart
924:12 - except now it should be horizontal so
924:15 - now you can see this worked properly
924:17 - it's basically the exact same thing as a
924:20 - vertical bar chart just now horizontal
924:22 - which may look better especially
924:23 - depending on if you have values like
924:25 - this or you know something else that
924:28 - just looks better being horizontal now
924:30 - the next one that we're going to take a
924:31 - look at is the scatter plot so we're
924:33 - going to say DF do plot do scatter
924:37 - scatter and if we run this we're going
924:39 - to get an error what we need in order to
924:42 - run this properly is we need to specify
924:44 - the X and the Y AIS in order for this
924:46 - scatter plot to work so let's go here
924:50 - and we'll say x is equal to and we can
924:53 - take any of our columns that we have up
924:55 - here so we'll say x is equal to texture
925:01 - rating and then oops Y is equal to we'll
925:05 - do overall rating
925:07 - now when we run this it should work
925:09 - properly let's go ahead and take a look
925:11 - now if we go in here and we do shift tab
925:15 - we can also see some other things that
925:16 - we can specify so let's go right down
925:19 - here so we have our X and we have our Y
925:21 - and those are the ones that we just did
925:22 - we can also pass through an S which is
925:25 - going to tell us or or change the size
925:28 - of the actual dots right here in our
925:29 - scatter plot then we can also do a c
925:33 - which is the color of each point let's
925:35 - start with the S
925:37 - let's say s is equal to let's just do
925:39 - 100 let's see what that looks like so we
925:42 - have a much larger number let's do 500
925:44 - and see what that looks like so we can
925:46 - make these much larger on our
925:48 - visualization depending on what you're
925:50 - looking for we can also look at the
925:52 - color let's put comma C so for color we
925:56 - can say color is equal to and let's do
925:59 - uh yellow let's see if this works so now
926:02 - we've changed it to Yellow that looks
926:04 - absolutely terrible but it does work now
926:07 - let's move on to the histogram histogram
926:09 - is always a good one it's very similar
926:11 - to something like a bar chart but what's
926:14 - great about a histogram is you can
926:15 - specify the bins um so let's go ahead
926:18 - and say DF
926:20 - dolot doist then we'll do an open
926:23 - parenthesis and let's go ahead and hit
926:26 - shift tab in here take a look at this
926:28 - one as well so some of our parameters
926:32 - are the actual Columns of the data
926:33 - frames that we want to pull in we get
926:36 - you can choose the bins and they have a
926:38 - default of 10 in here and so let's take
926:40 - a look at how this works so we'll just
926:42 - run this as it is so this is by default
926:46 - what this histogram is going to look
926:48 - like let's go ahead and specify our bins
926:51 - we'll just say it was 10 by default
926:53 - let's just do 20 see what that looks
926:56 - like so there are smaller columns right
926:57 - off the bat and remember histograms are
927:00 - really good for showing distribution of
927:02 - variables you know that's really what a
927:04 - histogram is for but of course since
927:06 - these are completely random numbers this
927:08 - histogram isn't going to make any sense
927:10 - at all but you can at least kind of see
927:12 - visually how it works and if I didn't
927:14 - mention it before which I should have
927:16 - the bins represent how many kind of tick
927:18 - marks are down here so if we just do one
927:22 - only going to be one very large uh you
927:25 - know histogram we could even go further
927:29 - down from 10 and do five so now there's
927:31 - only one 2 3 four five so the
927:34 - distribution gets smaller and and things
927:36 - get more compact as you spread it out
927:39 - again like we did
927:41 - 100 it's going to spread it out a lot um
927:44 - and this is what it shows you know it's
927:46 - showing the distribution of those bins
927:48 - across however many you want so the 10
927:51 - by default you know it usually is pretty
927:54 - good for a lot of different things now
927:55 - let's go down here and look at the box
927:57 - plot and the box plot is a pretty
927:59 - interesting one let's go ahead and
928:01 - visualize it really quickly and then
928:02 - I'll kind of explain how this one works
928:05 - let's do d boox plot let's run this and
928:09 - really what we're looking at is some
928:10 - different markers within our data this
928:12 - line right here is the minimum value
928:15 - within that column we also have the
928:16 - bottom of the box which is the 25th
928:19 - percentile of all the values within just
928:21 - this column this is 50% then we have 75%
928:26 - and then up here we have our maximum
928:28 - value so I can take a glance at this and
928:30 - see that we have a low minimum a high
928:32 - maximum and it definitely skews towards
928:35 - the lower range whereas if I look over
928:37 - here we have a lower minimum and a
928:39 - higher maximum and you can see that this
928:42 - medium point is at0 6 versus 04 over
928:44 - here so the skew is a lot higher now
928:46 - let's go down here and take a look at an
928:48 - area plot we'll do DF do plot. area and
928:53 - let's just run this this is what we're
928:55 - going to get by default now something I
928:57 - wanted to show you earlier I just
928:59 - haven't gotten around to I want to show
929:00 - you something called Figure size or fig
929:02 - size um so for this it's know it's just
929:05 - looks small small looks a little bit
929:07 - cramped let's say we want to increase
929:08 - the size of this and we'll say fig size
929:11 - oops fig size is equal to and let's just
929:14 - do a parentheses and say 10 comma 5 that
929:18 - should be pretty large this is going to
929:20 - make it a lot larger just something I
929:22 - wanted to throw in there I look at these
929:23 - area charts as pretty similar to like a
929:25 - line chart if we went and compared those
929:28 - be pretty similar um but they're
929:30 - different visually and you know you
929:32 - absolutely can use these for different
929:33 - types of visualizations but I don't use
929:36 - this one a lot if I'm being honest
929:37 - that's why it's kind of towards the end
929:39 - of the video but you definitely can do
929:40 - it let's go on to our very last one of
929:43 - the video that's going to be the
929:45 - beautiful pie chart let's say DF plot.py
929:49 - do an open parenthesis and let's run it
929:53 - we're going to get this error that's
929:54 - because we need to specify what column
929:57 - we're working with here so let's just
929:59 - say the Y and that's what we need let me
930:02 - open this up for
930:03 - us right here we have our y and this is
930:06 - our our label or a column that we're
930:08 - going to plot that's really all we need
930:10 - so we can just say Y is equal to flavor
930:14 - rating oops flavor rating let's run this
930:18 - and now we get this visualization right
930:20 - here let's make this one a little bit
930:22 - bigger big size is equal to 10 comma 6
930:30 - now it's a little bit bigger it
930:31 - definitely depends so this Legend is
930:33 - going to autop populate you know you can
930:35 - make this as big as you want and
930:38 - obviously it's going to look a little
930:39 - bit better if you do it larger and these
930:41 - colors autop populate now you can
930:42 - customize these colors although I found
930:45 - these ones to be just when you have a
930:46 - lot of them it's harder to customize
930:48 - them as easily but you know definitely
930:50 - look into it these are things that
930:52 - everything in here is almost something
930:54 - that you can customize in some way
930:56 - although it does get a little bit tricky
930:58 - you definitely have to do some research
930:59 - and some Googling around just to kind of
931:01 - figure out how to do those things now
931:03 - one last thing that I wanted to show and
931:05 - something you know I could have probably
931:07 - done at the beginning um is you can
931:09 - actually change what visual this is and
931:12 - we can do that pretty easily within mpot
931:15 - lib there are different styles um and so
931:17 - let's go right here let's add a new row
931:21 - a new cell and we'll say print and we'll
931:24 - do PLT so that's that map plot lib right
931:26 - here we'll do PLT do style.
931:31 - available and what this is going to do
931:33 - whoops what this is going to do is show
931:35 - us all these different different types
931:37 - of stylings that you can do to kind of
931:40 - change up this visualization then once
931:42 - we find the one that we like we'll just
931:44 - do PLT do style. use and then in the
931:49 - parenthesis we'll just specify which one
931:51 - we want now there's all these Seaborn
931:54 - ones and Seaborn is a really great um
931:57 - really great Library let's try Seaborn
932:00 - deep I haven't tried this one at all
932:02 - let's go ahead and try this and just
932:04 - changes some of the colors some of the
932:06 - visuals we can try something like
932:09 - 538 let's try this that looks quite a
932:13 - bit different and let's try something
932:16 - like um classic I don't know what this
932:19 - one looks like let's just try
932:21 - it so you can try out all these
932:23 - different styles find one that you like
932:24 - find one that you think looks really
932:26 - nice and you can run with it through all
932:28 - your visualizations so this has been our
932:30 - video on visualizing data in pandas I
932:32 - think it's is a really good introduction
932:34 - on how you can visualize data within
932:35 - python and in future videos we'll look
932:37 - at mpot lib and Seaborn which are some
932:40 - really great libraries for visualizing
932:42 - data which I use a lot so I hope that
932:44 - you enjoyed this video if you did be
932:46 - sure to check out all my other videos on
932:47 - Python and pandas and I will see you in
932:49 - the next
932:52 - [Music]
933:02 - video hello everybody today we're going
933:04 - to be cleaning data using paint P now
933:06 - there are literally hundreds of ways
933:08 - that you can clean data within pandas
933:10 - but I'm going to show you some of the
933:11 - ones that I use a lot and ones that I
933:13 - think are really good to know when you
933:14 - are cleaning your data sets so we're
933:16 - going to start by saying import pandas
933:19 - aspd and we're going to run that and now
933:22 - we're going to import our file so we're
933:24 - going to say data frame is equal to PD
933:27 - that's pandas do read uncore and we
933:30 - actually have this in an Excel file so
933:31 - we'll say read oops say read Excel do an
933:35 - open parenthesis eses and we'll do R and
933:38 - then we'll paste the path right here and
933:40 - now we're just going to call that
933:41 - variable so we'll call data frame and
933:42 - we'll actually read it in and look at
933:44 - the data so let's scroll down here and
933:46 - let's take a look at this data frame or
933:48 - this Excel file that we're reading in so
933:50 - right off the bat we have this customer
933:51 - ID that goes from 101 all the way down
933:54 - to
933:55 - 1020 we have this first name and
933:58 - everything looks pretty good here except
934:01 - in this last name column uh looks like
934:03 - we have some errors we have some forward
934:06 - slashes some dots some null values um so
934:11 - definitely going to have to clean that
934:12 - up because we don't want that in the
934:14 - data we have a phone number and it looks
934:17 - like we have a lot of different formats
934:19 - um as well as Nas not a number um just
934:24 - lots of different stuff so we're going
934:25 - to need to standardize that so clean it
934:27 - up and then standardize it to where it
934:29 - all looks the same um we also have
934:32 - address and it looks like on some of
934:34 - these we just have a street address but
934:36 - on some of the other ones we have like a
934:38 - street address and another location as
934:41 - well as a zip code in some of them so
934:44 - we'll probably want to split those out
934:45 - we have a paying customer uh which is
934:48 - yes and Nos and some of those are not
934:50 - the same so I have to standardize that
934:52 - we have a do not contact kind of the
934:54 - same thing as the paying customer and we
934:56 - have this not useful column which we'll
934:58 - probably just want to get rid of okay so
935:01 - the scenario is is that we got handed
935:03 - this list of names and we need to clean
935:05 - it up and hand it off to the people who
935:07 - are actually going to make these calls
935:09 - to this customer list so they want all
935:11 - the data in here standardized and
935:13 - cleaned so that the people who are
935:14 - making those calls can just make those
935:16 - calls as quickly as possible but they
935:18 - also don't want columns and rows that
935:20 - aren't useful to them so things like
935:22 - this not useful column we're probably
935:24 - going to get rid of and then ones that
935:27 - say do not contact if it says yes we
935:29 - should not contact them we probably will
935:31 - want to get rid of those somehow so
935:33 - that's a lot of what we're going to be
935:34 - doing to clean this data set normally
935:37 - the very first thing that I do when I'm
935:39 - working with a data set most of the time
935:41 - except very rare cases when you're
935:43 - actually supposed to have duplicates is
935:45 - I actually go and drop the duplicates
935:47 - from the data set completely all you
935:49 - have to do for that is say DF do
935:53 - dropcore duplicates so they make it
935:55 - super easy for you let's just run it and
935:59 - up here is our original data set we have
936:02 - this 19 and 20 and those are obviously
936:04 - duplicates they have the exact same data
936:06 - it's just a duplicate row that we need
936:08 - to get rid of if we look right down here
936:11 - we no longer have that 20 we now just
936:13 - have one row of Anakin Skywalker and of
936:16 - course we want to save that so we're
936:18 - just going to say DF is equal to and DF
936:23 - so now it's going to save that to the
936:25 - data frame variable again and now when
936:27 - we run this our data frame Now does not
936:29 - have any duplicates that's definitely
936:31 - one of the easier steps that we're going
936:33 - to look at uh things are going to get
936:34 - quite a bit more complicated as we go
936:36 - but I'm starting out you know kind of
936:38 - simple so that we can kind of get a feel
936:40 - for it and then we'll start getting into
936:42 - the really tough stuff so the next thing
936:44 - that I want to do is remove any columns
936:46 - that we don't need I don't want to clean
936:48 - data that we're not going to use so if
936:51 - we're just looking through here you know
936:52 - they may need you know first name last
936:54 - name phone number for sure address might
936:57 - give them some information of where
936:58 - they're calling to or time zone so we
937:00 - want that this not useful column looks
937:03 - like a pretty good candidate to delete
937:06 - and it's very easy to do that we're
937:08 - going to go right down here and we're
937:09 - going to say DF do drop and we'll do an
937:13 - open parenthesis drop just means we are
937:16 - dropping that column and we can specify
937:18 - that by saying columns is equal to and
937:21 - then we'll paste in that column that we
937:24 - want to delete so let's run this and see
937:26 - what it looks like and it literally just
937:29 - drops that column exactly like we were
937:30 - talking about it no longer has that
937:32 - column again we want to save that we can
937:34 - always do in in place equals true um if
937:37 - you follow this tutorial series you can
937:38 - always do in place equals true and
937:40 - that'll save it as well but just for our
937:42 - workflow most of the time I'm going to
937:44 - assign it back to that variable um just
937:46 - for keeping it the same really quickly I
937:49 - wanted to give a huge shout out to the
937:50 - sponsor of this entire Panda series and
937:52 - that is udemy udemy has some of the best
937:54 - courses at the best prices and it is no
937:57 - exception when it comes to pandas
937:58 - courses if you want to master pandas
938:00 - this is the course that I would
938:01 - recommend it's going to teach you just
938:02 - about everything you need to know about
938:04 - pandas so huge shout out to you me for
938:06 - sponsoring this Panda series and let's
938:07 - get back to the video now let's kind of
938:09 - go column by column and see what we need
938:12 - to fix and we'll start on this left-and
938:13 - side this customer ID to me looks
938:16 - perfectly fine I'm not going to mess
938:17 - with it at all the first name at a
938:20 - glance also looks perfectly fine I don't
938:23 - see anything wrong with it visually
938:25 - which is a good thing um although
938:27 - sometimes that can be deceiving and that
938:28 - can cause errors down the line but we're
938:30 - not going to uh assume that there are
938:32 - errors in here now let's look at this
938:34 - last name now the last name obviously
938:36 - I'm I'm seeing some obvious things
938:38 - things that we talked about when we were
938:39 - first looking at this data set we have
938:41 - this forward slash which we definitely
938:44 - need to get rid of we have null values
938:47 - so not a number right here we have some
938:50 - periods as well as an underscore right
938:52 - here so all those things I think we
938:54 - should clean up and get rid of it so
938:56 - that when the person is making these
938:57 - calls you know it's all cleaned up for
938:59 - them so how are we going to do that we
939:02 - can actually do this in several
939:03 - different ways but let's just copy this
939:05 - last name the first one I'm going to
939:07 - show you is strip and we'll write it
939:09 - kind of like this we'll say data frame
939:11 - and then we'll specify the column that
939:13 - we're working with because we don't want
939:14 - to make these changes or strip all of
939:17 - these values from everywhere we only
939:19 - want to do it on just this column if we
939:22 - do this and we don't specify the column
939:23 - name it will apply to everywhere so if
939:25 - we're trying to do these yeah let's say
939:28 - bum these underscores maybe that would
939:30 - mess with something else in another
939:32 - column and we don't want that so we just
939:34 - want to specify just this last name so
939:37 - let's go last name.
939:40 - string. strip now what strip does and
939:43 - let's see if we can open this up really
939:45 - quickly no we can't um but what strip
939:47 - does I was just I was hitting shift tab
939:50 - in here to see if it could bring up um
939:52 - you know some of the notes on it but
939:53 - what strip does is it takes either the
939:55 - left side or the right side well L strip
939:58 - takes from the left side our strip takes
940:00 - from the right side and strip takes from
940:03 - both but you can strip values off the
940:05 - left and the right hand side and we can
940:07 - specify those values now for what we're
940:09 - doing in this column we can just use
940:12 - strip because as you can see this
940:13 - forward slash these dots as well as this
940:17 - um underscore are all on the far sides
940:20 - if there was a value Like swancore Son
940:24 - the strip wouldn't work at all because
940:26 - it's not on the outside of the value or
940:28 - the word so we can use strip I'll also
940:31 - show you how to use replace and replace
940:34 - is another really good option for things
940:36 - like this but let's start with strip and
940:38 - just see what it looks like and see if
940:39 - we can get what we need done so let's
940:41 - just run this for now see what happens
940:45 - so it looks like nothing has changed
940:48 - because again we're not specifying any
940:49 - specific value just by default it's only
940:52 - taking out white space so like spaces
940:54 - that shouldn't be there that's what it
940:56 - does by default now we can specify
940:58 - within this exactly what values we want
941:01 - to take out so let's go ahead and do
941:03 - that let's say left strip and let's try
941:06 - to take out these dots real quick so
941:08 - we're just going to do a parenthesis dot
941:10 - dot dot now let's run this and see what
941:12 - it looks
941:13 - like for this one Potter it is now gone
941:18 - so those three dots were there before
941:20 - let's just show it so they were there
941:23 - and then when I ran it like this now
941:25 - they're gone that's what the L strip
941:27 - does it takes it only off the left hand
941:30 - side now we can also do a forward slash
941:33 - so we'll do something like this and
941:34 - it'll get rid of the white but as you
941:37 - can see now we aren't taking out these
941:39 - three dots so they're still there now is
941:41 - it possible to do something like this
941:45 - where we put these values inside of a
941:46 - list um let's try it so we'll say just
941:49 - like this one two 3 let's run it and no
941:53 - it doesn't um this L strip actually sits
941:56 - within the the realm of regular
941:57 - expression so if you've ever worked with
942:00 - regular expression you know it gets very
942:02 - complicated very complex so you want to
942:04 - keep it kind of simple especially with
942:06 - these values where we're just taking a
942:07 - few out so what we're going to do is
942:09 - we're going to do dot dot dot and we're
942:13 - take it out one by one now in order to
942:15 - save this because we want to save this
942:17 - we want to take out that value we don't
942:19 - just want to say data frame equals
942:20 - because that would be uh very bad what
942:23 - this would say is now this data frame is
942:25 - only equal to these values that we're
942:27 - seeing right here we want to only apply
942:29 - it to this column so we're going to go
942:32 - like this so now when we do it and then
942:36 - we call the entire data frame it's only
942:39 - applying this to this one column the
942:42 - last name column so let's run
942:44 - it and now when we go down to Potter
942:47 - right here it's cleaned up so we're
942:50 - going to do the same thing but for those
942:51 - other
942:52 - values and we'll do it just like this
942:54 - we'll do a forward slash and it's a left
942:58 - strip and then we'll do I'll do the left
943:00 - strip on this underscore to just to show
943:02 - you that it won't work and then
943:06 - we will go on from there so it's not
943:08 - pulling it because we're looking at the
943:09 - left hand side only we need to use R
943:12 - strip so now let's use R
943:15 - strip and now that looks perfect has no
943:18 - underscore so that's how you can use
943:20 - strip for either the left side the right
943:22 - side or just Strip by itself which
943:24 - covers both sides now I showed you all
943:26 - of that because I am going to show you a
943:28 - different way to do it um and I
943:30 - apologize because I somewhat lied to you
943:31 - earlier um let's run this right here
943:36 - actually we're just going to pull it in
943:37 - like
943:38 - this we're going to remove the
943:40 - duplicates again bear with me we're
943:42 - going to drop that column and then now
943:45 - we're sitting with that data frame again
943:47 - with those exact same mistakes I just
943:48 - wanted to reset it for a second there is
943:51 - a way uh that you can do this and I just
943:53 - wanted to you know kind of show you how
943:55 - you can do it you can do this right
943:59 - here and we'll say so we're now again
944:02 - we're just looking at this column just
944:04 - this column and we're using strip and
944:06 - let's get rid of R CU we want to do
944:08 - apply it to everywhere you can input all
944:11 - of those values in visually and it will
944:14 - clean it up so let's say we want to get
944:15 - rid of numbers we'll do one two three
944:18 - then we can do the dot so that's going
944:20 - to be for a period or for a dot dot dot
944:22 - Potter we could also do the underscore
944:25 - and we can do the forward slash so we
944:27 - put it all in one string right here now
944:32 - let's take a look at this we'll get rid
944:34 - of this really quickly now let's take a
944:35 - look and all of them were removed I
944:38 - showed you how to do it before because
944:40 - that's at least how my mind would think
944:41 - about it I'd think oh I can put it in a
944:43 - list and run it through this L strip or
944:45 - this right strip and it would work um
944:46 - but that's not how strip works you have
944:48 - to kind of combine it all into one value
944:50 - so uh yes I deceived you I apologize but
944:54 - now when we call data frame and we
944:56 - assign it to that column so the last
944:58 - name column or assigning what we just
945:00 - did to this last name column everything
945:03 - should look perfect
945:05 - and it does so our customer ID first
945:07 - name last name are all cleaned up now
945:09 - we're going to come to a much more
945:12 - difficult one this is probably if I'm
945:14 - being honest the hardest one I said we
945:15 - were going to work up but this is
945:16 - probably the hardest one of the whole
945:18 - video working with phone numbers and
945:20 - look at all these different types of of
945:24 - formats I mean it is um it's not going
945:27 - to be fun and imagine you you know
945:29 - there's 20,000 of these you can't just
945:30 - go and manually clean those up you need
945:33 - something to kind of automate that
945:35 - so that is what we're going to do so
945:39 - let's go right down here we'll copy the
945:40 - data frame and I'm going to pull it
945:43 - right here so now we need to clean up
945:45 - this phone number what we want is it all
945:48 - to look exactly the same unless it's
945:51 - blank and we'll keep it blank we don't
945:52 - want to populate that data but we want
945:55 - all of them to look exactly like this
945:57 - one and what we're going to do is right
946:00 - off the bat we're going to take all of
946:02 - the non-numeric values and just complete
946:04 - completely get rid of them strip it down
946:06 - to just the numbers so this 1 23- 643 or
946:10 - forward slash will just be the numbers
946:13 - same with these bars and these slashes
946:16 - and everything all of these will just be
946:18 - numeric then we'll go back and reformat
946:21 - it how we want to format it which will
946:24 - look exactly like this one um but we
946:26 - just want to do it for the entire column
946:28 - so let's go right up here and we're
946:30 - going to try replace for the first time
946:32 - so let's do phone number
946:36 - just oops that's not what I wanted so
946:39 - we're going to do a bracket say phone
946:41 - number do
946:43 - string. replace just like we did before
946:47 - now we're going to use some regular
946:49 - expression in here and I'll kind of do a
946:51 - really high overview although I'm not
946:52 - going to dive super deep into the
946:54 - regular expression then we're going to
946:56 - do a parenthesis and within there we're
946:58 - going to do a bracket um I can't
947:00 - remember what this is called is it
947:02 - called a carrot I think it's called a
947:03 - carrot uh I'm just going to call it that
947:05 - it may not be correct but I think it's a
947:07 - an upper Arrow so it's an upper Arrow a
947:10 - dash oops A- Z A- Z and then
947:16 - 0-9 now at a super high level what that
947:19 - character that first thing is doing it's
947:20 - saying we're going to return any
947:22 - character except and then we specify
947:25 - anything A to Z A to Z upper or
947:27 - lowercase and then actually I think this
947:29 - should be like this A to Z uh and then 0
947:32 - to 9 so any value like a BC 1 2 3 those
947:36 - are not going to be matched it's going
947:37 - to match all of them except these values
947:40 - and then we're going to replace them by
947:42 - saying comma and we're going to replace
947:43 - them with nothing so this is just an
947:45 - empty string so literally we're taking
947:48 - everything that is not an A B C A one
947:51 - two 3 so a letter or a number we're
947:53 - replacing all of that and then we're
947:55 - replacing it with nothing so let's run
947:57 - this and see what it looks like and it
947:59 - looks like that worked properly now we
948:02 - do have this na cuz we had an n- a for I
948:06 - don't remember maybe that was Creed
948:08 - Bratton um but it worked for basically
948:11 - everything else we're going to go
948:12 - through the entire process and then at
948:14 - the end we'll remove any values we want
948:16 - them to just be completely null we we
948:18 - don't want them to even see n an and
948:20 - wonder what that is we just want it to
948:22 - be blank and we'll do that at the very
948:24 - end so now that we know that that worked
948:26 - let's assign it we'll do DF phone num is
948:31 - equal to and then we'll say data frame
948:34 - and this looks a lot more standardized
948:37 - than it did before already but now what
948:39 - we want to do is try to format this um
948:42 - and I've done this many many times I
948:44 - always use a Lambda you can definitely
948:47 - use a for loop I just I don't do it that
948:49 - way myself so I'm going to show you how
948:51 - to do it using a Lambda let's get rid of
948:53 - this and we're going to say thef phone
948:57 - number we've already done that I'm just
948:59 - going to get rid of it now we're going
949:00 - to say d phone number then we're going
949:01 - to say do apply we'll do an open
949:04 - parentheses and then this is where we're
949:06 - going to build out our Lambda so we'll
949:08 - say Lambda X colon now this is where
949:11 - we're going to kind of format it so what
949:13 - I want to do is I want to take the first
949:15 - three strings one two three then I want
949:17 - to add a slash and then the next three
949:19 - strings add a slash or a dash uh and
949:23 - then that be the value that's returned
949:24 - so it's not super difficult we're just
949:26 - going to do X then a bracket let me get
949:29 - rid of that an X and then a bracket and
949:31 - then we want the 0 to three so goes 0 1
949:35 - 2 so 0 1 2 it doesn't include the three
949:40 - it goes up to three so 0 one two that's
949:42 - our third first three values then we'll
949:45 - do plus and do a quote and do a dash so
949:50 - this is our first kind of sequence and
949:52 - I'm just going to copy this we'll do
949:55 - plus and instead of three or we are
949:58 - going to start at three because now it's
949:59 - inclusive so we're going to go from
950:01 - three and we're going to go all the way
950:03 - up to six so it should be 3 four five
950:06 - our next three values then we have a
950:08 - dash and we'll copy this and we'll say
950:12 - plus and now we go from six all the way
950:17 - to 10 now let's try running this and as
950:22 - you can see we get an error now I
950:24 - already know what the error is float
950:26 - object is not subscriptable which means
950:28 - we're trying to um basically look at it
950:31 - like a string right now it's not a
950:32 - string it's actually a number so let me
950:36 - get rid of this for just a second I'm G
950:38 - show you what it's talking about so
950:40 - right now we have values that are floats
950:44 - and values that are strings or not even
950:46 - a number so we have values that are
950:48 - strings or not a number so if we want to
950:50 - actually look through it like kind of
950:52 - like indexing if we want to do that they
950:54 - all have to be strings so we need to
950:57 - change this entire column into Strings
951:00 - before we can apply this um formatting
951:03 - now when I was creating this if I'm
951:05 - being honest my first thought when I was
951:06 - doing this was to do it like this string
951:10 - DF phone number um let's just run that
951:13 - this is what the values look like um and
951:17 - I don't remember why or why it was doing
951:20 - this I can't I can't remember but I
951:21 - looked into it quite a bit and I was
951:22 - like oh I need to apply this string
951:26 - converting it to a string on each value
951:30 - not the entire row or not the entire
951:32 - column so how we can do that is actually
951:34 - fairly easy because we've already done a
951:36 - lot of the heavy lifting we're just
951:38 - going to copy this and we're going to
951:40 - say
951:42 - x so string of X and again Lambda is
951:47 - like a little Anonymous function so you
951:49 - could do this by saying for um X in this
951:54 - uh column we could do a for Loop and
951:56 - then say for every X it equals the
951:57 - string of X and then it changes it to a
951:59 - string but a Lambda just does it a lot
952:02 - quicker um so we're going to say so
952:04 - let's do that really quickly and all of
952:07 - our values look exactly the same and
952:09 - that's how we want it so we're just
952:10 - going to copy this apply
952:15 - it good and now we're going to take this
952:20 - and we're going to run this again just
952:22 - ignore all my commented out stuff
952:24 - pretend I don't have that um so now when
952:27 - we run this it should work there we go
952:30 - now if we look at these numbers 1 2 3-
952:32 - 545 d 5
952:37 - 421 and it does that for every single
952:40 - one where there's values even when
952:41 - there's Nan or na it's still adding
952:45 - those values but we expected that so
952:49 - let's apply it say is equal to and then
952:52 - we'll look at the data
952:54 - frame and this looks almost exactly what
952:57 - we're hoping for we just need to get rid
952:58 - of these so this n- Das and this na Dash
953:03 - we need to get rid of those and that is
953:05 - super easy to do um we're just going to
953:08 - say so now that we've done it and we'll
953:10 - comment that out we'll say
953:13 - DF and let's copy this ignore the
953:17 - messiness I do apologize for that it's
953:18 - very messy um but if you're following
953:21 - along with me you get what we're doing
953:23 - so DF phone number so only on the phone
953:25 - number say string.
953:29 - replace no open parenthesis now we can
953:32 - specify this value so we want to take
953:34 - this exact
953:37 - value and replace it with nothing and
953:40 - let's just see if that does work it does
953:43 - now we have these
953:45 - Nas and so let's actually I'll paste
953:49 - that right down here we're going to do
953:51 - this is equal to and then we're just
953:54 - going to take this entire string put it
953:56 - right here and put this value as our
954:00 - what we're looking for and then
954:01 - replacing and then when we call that
954:04 - data frame it should work properly and
954:07 - it is perfectly cleaned so we have every
954:11 - single value all the exact same they
954:13 - don't have different characters or
954:15 - different um you know formatting and we
954:18 - got rid of all the ones that we don't
954:19 - have or don't need um all the ones that
954:21 - were just random values so this column
954:25 - is now completely cleaned up again
954:27 - definitely one of the more difficult
954:28 - ones um one that I've done a thousand
954:31 - times I've had to work with a lot of
954:33 - phone numbers and stuff like like that
954:34 - this one does get very tricky especially
954:36 - if you have like a plus one which is
954:38 - like an area code um that can get tricky
954:40 - as well but this is on a kind of a high
954:43 - level this is how you can do that and
954:44 - it's pretty neat how you can actually
954:46 - you know clean up and standardize those
954:48 - phone numbers so let's go right down
954:50 - here uh let's run it the next thing that
954:52 - we're going to look at is this address
954:55 - now let's just pretend that the people
954:57 - who are on the call center want all
954:59 - these separated into three different
955:00 - columns they can read it easier see what
955:02 - the ZIP code is where they live
955:04 - uh you know whatever they want it for
955:06 - let's just say we want to do that and
955:07 - this is you know again for this use case
955:09 - it may not make sense but you have to do
955:11 - this I do this all the time um you need
955:14 - to split those columns now luckily all
955:16 - of these things are separated by a comma
955:19 - so we can specify that we're going to
955:20 - split on this column and then we'll be
955:22 - able to create three separate columns
955:25 - based off of this one column which is
955:27 - exactly what we want then we can name it
955:28 - as well and we can do that very easily
955:31 - by using this split so we're going to
955:33 - say DF and we want to
955:37 - specify oh jeez not again so we want to
955:42 - specify that we're looking at the
955:44 - address then we're going to say.
955:47 - string. split we'll do an open
955:50 - parenthesis now the very first value
955:52 - that we need to specify is what we're
955:53 - splitting on so we want to split on the
955:56 - comma so we want to specify that and
955:59 - then we need to specify how many values
956:01 - from left to right it should look for
956:04 - now we'll just start with one and then
956:07 - we'll go from there let's just see what
956:09 - this looks
956:10 - like
956:13 - so it doesn't really look like it did
956:16 - anything let's do two well let's go back
956:18 - to one and then let's say
956:21 - expand equals true when we expand it
956:25 - it's actually going to uh separate it I
956:27 - believe okay so we're expanding we now
956:28 - we're only doing this with one comma so
956:31 - we're only looking at the very first
956:33 - comma and splitting it but in some of
956:35 - these well just in one there is an
956:37 - additional comma so we should do it up
956:39 - to two let's do this okay so now we have
956:43 - three columns if we just save it like
956:45 - this it's going to give us these 0 one
956:47 - two these basically these indexed values
956:49 - for these columns and we don't want that
956:52 - we want to specify what these actually
956:54 - are and we can do that by saying DF and
956:56 - let me just do is equal to we'll do
956:59 - bracket and then within there we're
957:01 - going to specify our list so we have
957:03 - three three of them that we have so I'm
957:05 - going to do um the first one this is the
957:08 - street address so we'll say street
957:12 - address the next one is and it's sh is
957:16 - not a state uh but these all are states
957:18 - so I'm just going to say
957:20 - State and then for the very last one
957:24 - that looks like a zip code so we'll say
957:26 - zip and we'll do code in fact I also
957:30 - want to do streetcore address um so what
957:33 - this is is now going to do is these
957:35 - three columns are going to be applied to
957:36 - these three names and they'll basically
957:38 - be appended it doesn't replace the
957:41 - address we're not saying DF address
957:43 - equals the DF address we're not
957:45 - replacing it we're now creating
957:47 - different columns so let's run it and
957:50 - then let's also call it so they're right
957:52 - over here on this right hand side I
957:53 - couldn't see them at first but it did
957:56 - exactly what we needed it to do so now
957:58 - if we wanted to at the very end if we
958:00 - want to we're not going to we could just
958:02 - delete this address and keep the street
958:04 - address the state and the zip code
958:07 - another really common thing that you can
958:10 - do this happens often again with like
958:12 - first name last name well you'll have
958:14 - Alex freeberg but it's Alex comma
958:16 - freeberg or Alex space freeberg and you
958:18 - can separate those out into different
958:20 - columns now the next one that we want to
958:22 - look at is this paying customer and the
958:24 - paying customer and do not contact are
958:27 - very similar um in the fact that it's
958:30 - yes no NY yes no NY
958:34 - um and so let's go right on down here
958:37 - and we're going to say DF Dot and we
958:39 - want to just replace these values as all
958:43 - yeses or all NOS but just with the same
958:46 - formatting um just to keep it consistent
958:49 - so let's make anything that's an N into
958:51 - a no anything that's a a y into a yes I
958:54 - like it spelled out so let's change
958:56 - anything that's a yes into a y anything
959:00 - that's uh a a no into an n that's
959:04 - usually how I do it just saves on data
959:06 - because it's less strings although it's
959:08 - can be often very minimal um but let's
959:11 - specify the P
959:14 - customer we'll s say DF bracket Pay
959:18 - customer then we'll do do string.
959:22 - replace so now we're just going to look
959:24 - for those specific values so if it's a y
959:28 - oops a capital Y then we'll say
959:32 - yes now let's run it and now we have no
959:35 - more y's we now just have yeses although
959:39 - now these are yes yeses okay we don't
959:42 - want to do that let's do if we're
959:45 - looking because it's taking it's
959:47 - literally looking up here and saying
959:48 - okay there's here's a y um let's change
959:51 - the let's change that Y into a y so now
959:53 - it's doing y uh we don't want that so
959:56 - let's look for the yes and change it
959:59 - into a y now when we run this that looks
960:03 - a lot better um so we'll
960:06 - do DF paying customers equal to and then
960:10 - we'll copy this we'll do the exact same
960:13 - thing
960:14 - no and
960:16 - N then let's call it and now that entire
960:21 - column looks really good except for that
960:23 - value right there but I'm going to leave
960:26 - that because I'm just going to apply it
960:27 - to the entire thing all at once to get
960:29 - rid of those at the end instead of just
960:31 - going column by column and then it's
960:33 - it's literally going to be the exact
960:34 - same thing so I'm not even going to
960:36 - scroll down whoops I'm just going to put
960:39 - it right up here because this is the
960:41 - exact same thing I'm going save us all
960:43 - some
960:46 - time and when we run this this looks
960:49 - exactly like what we're looking for
960:51 - again some not a number values but we
960:53 - can get rid of that in just a second by
960:55 - doing a place over the entire data frame
960:57 - and that is basically the end of
960:59 - cleaning up individual columns now let's
961:02 - go right down here we're going to say DF
961:05 - do string.
961:07 - replace and then we'll first do these
961:10 - values oops so we'll do oops let me do
961:15 - that there we go and replace that with
961:18 - nothing and let's just see what it looks
961:20 - like oops data frame object has no value
961:23 - string well that's CU we were looking at
961:25 - columns before yeah I think I just need
961:27 - to get rid of this string we're not
961:29 - looking it we're just really doing it
961:30 - across the entire data frame now let's
961:32 - try that
961:34 - okay that worked
961:35 - appropriately and we'll just say data
961:37 - frame is equal to and then we'll copy
961:41 - this and we'll do the NN as
961:45 - well and we'll
961:46 - [Music]
961:49 - do and now when we do this it is not
961:52 - going to replace these because these
961:54 - aren't actually a value because we're
961:56 - looking for that string we actually need
961:57 - to use and I I completely forgot this
961:59 - I'm not going to lie to you um let's get
962:02 - rid of this uh to get rid those values
962:04 - because it's literally not a number
962:05 - there it is technically empty um I
962:09 - forgot we can do um or we could not even
962:12 - specify it we'll do DF do fillna so
962:16 - we're going to fill these values if
962:18 - there's nothing in them we're going to
962:20 - fill it and we're going to
962:22 - say blank and when we run that every
962:26 - value that doesn't have something in it
962:28 - is going to show up blank even over here
962:30 - where we only had a few all of them
962:32 - throughout the data frame if if it
962:33 - doesn't have a value it is now blank so
962:36 - let's apply
962:38 - that and we'll run
962:40 - this and now all of our cleaning we
962:44 - actually cleaning up the individual
962:46 - columns is completely done we've removed
962:49 - columns we've split columns we've
962:52 - formatted and cleaned up phone numbers
962:54 - we've also taken values off of first
962:57 - name or or this last name column and
962:59 - then we formatt it in just kind of
963:01 - standardized paying customer and do not
963:04 - contact now they also asked us to only
963:07 - give them a list of phone numbers that
963:09 - they can call so if we take a look some
963:12 - of these do not contacts are why which
963:14 - means we cannot contact them and then
963:18 - there are some that don't even have
963:19 - phone numbers so we don't want to give
963:21 - the people the call center numbers that
963:24 - or or people who don't have numbers so
963:27 - we want to remove those now there's a
963:29 - few different ways that we can do this
963:32 - but let's start with and we'll just go
963:34 - by do this do not contact it seems like
963:37 - the most obvious one now if it's blank
963:40 - we want to give them a call we only want
963:42 - to not call them if they've specifically
963:45 - said we cannot call them so if it's y
963:47 - we're not going to call them so what we
963:50 - need to do it's not anything like this
963:53 - we probably need to Loop through this
963:56 - column and then look at each row that
963:59 - has a value of this and drop that entire
964:01 - row uh and we probably will'll need to
964:04 - do that based off this index instead of
964:07 - doing it based off just this column uh
964:10 - that may not make sense but let's
964:12 - actually let's actually start writing it
964:14 - so we'll do 4X in and we need to look at
964:18 - our index so we're just going to do
964:20 - let's do nf. index and we'll do a colon
964:25 - enter and then we want to look at these
964:28 - indexes how do we look at these indexes
964:30 - we use lock that's going to be DF
964:34 - Lo and then we need to look at the value
964:36 - which is this x right here so each time
964:39 - it looks at the index it's looking at
964:41 - the value but we want to look at the
964:43 - value of this column do not contact I
964:47 - don't know if I copied this before let
964:48 - me copy it we only want to look at the
964:50 - value in this one column if we didn't it
964:53 - would look at um a different value so we
964:56 - don't want that so we're looking at just
964:58 - that value if it's equal to Y so if this
965:03 - value is equal to Y then we want to drop
965:05 - it so we actually need to say
965:07 - if so if this value X in this column is
965:12 - equal to Y then we want to do DF do drop
965:16 - and then we'll say x and we I think we
965:20 - have to say in place equals true here
965:22 - otherwise it won't take a fact um
965:25 - otherwise you have to say like DF is
965:27 - equal to DF yeah I don't I don't want to
965:29 - start messing with that let's just do in
965:31 - place equals true
965:34 - um and let's see if that works I I can't
965:37 - remember if this is going to work or not
965:39 - invalid syntax okay
965:42 - neon and now let's try to run
965:45 - this okay okay yeah if we look at our
965:48 - index we can already tell that there are
965:50 - ones missing the one the one is missing
965:52 - the three is missing um let's see and
965:56 - the 18 is missing so we already got rid
965:58 - of those values and you can you can see
965:59 - that there's no y's in here anymore
966:01 - which is really good we can if we want
966:04 - to and we probably should we should
966:05 - probably populate that um really
966:08 - quickly um let me just go up here really
966:14 - quick I'll copy this we probably should
966:17 - populate that and I didn't plan on doing
966:20 - this so um if it's blank oops it's blank
966:24 - give it an n and we want to attribute it
966:27 - to do not
966:30 - contact do not contact
966:36 - whoops let's see if that
966:38 - works and we probably need to do do
966:41 - string let's just see if it
966:44 - works so if it's
966:47 - blank dude okay I don't know why it's
966:49 - giving us a triple
966:52 - n maybe there's maybe I need to strip
966:54 - this or
966:56 - something uh okay never mind let's not
967:00 - do that but now we basically need to the
967:03 - exact same thing for this phone number
967:05 - um because if it's blank we don't want
967:08 - them calling it um so we can copy this
967:11 - entire thing go right down here and but
967:14 - now we're looking at phone
967:17 - number so now we're looking just at the
967:19 - values within phone number and we only
967:21 - want to look at if it's blank so if it
967:23 - literally has no value we want to get
967:26 - rid of it let's run this and see if it
967:28 - works again it should good and now our
967:32 - list is getting much smaller so you can
967:34 - see in our index a lot of um those rows
967:37 - were removed and okay good actually this
967:41 - worked itself out because these all have
967:42 - ends um so right now we're sitting
967:45 - really good everything looks really um
967:48 - standardized cleaned everything looks
967:51 - great I might drop this address if you
967:53 - want to you can drop this address but
967:55 - besides that this is all looking really
967:57 - good this Paint customer doesn't uh the
967:59 - yes and NOS aren't really anything um
968:02 - now we could and we probably should
968:05 - before we hand this off to the client or
968:08 - the customer call list we probably
968:09 - should reset this index because they
968:11 - might be confused as why there's numbers
968:13 - missing or you know they might use this
968:15 - index um to show how many people they've
968:18 - called or I don't know something like
968:19 - that so let's go right down here we're
968:21 - going to say DF Dot and then we'll do
968:25 - reset
968:27 - index and let's just see what this looks
968:29 - like um it does work but as you can tell
968:32 - it didn't uh get rid of that index
968:35 - completely it actually took the index
968:36 - and saved that original one we do not
968:39 - need to save that whoops let's put it
968:41 - right in here now we're just going to do
968:42 - drop equals true and when we do that it
968:46 - just completely resets it drops the
968:48 - original index and gives us a new index
968:51 - and that is what we want let's do DF
968:53 - equals and this is our final product now
968:57 - one thing that I you definitely could
968:59 - have done here um and I made this a
969:01 - little probably more complicated than it
969:03 - needed to be um that was just how my
969:05 - brain was working at the time when I'm
969:07 - you know typing this out we could have
969:09 - done DF do drop an a um which is
969:13 - literally going to look at these null
969:15 - values um
969:17 - before we couldn't do that with this one
969:19 - because these aren't we're not looking
969:20 - at na we're looking at y's so we
969:22 - couldn't do that but because we're
969:24 - looking at null values we could have
969:25 - also done drop
969:27 - na um and done subset is equal to and
969:31 - then done it just on this phone number
969:35 - and then done like this and done in
969:38 - place equals true so we could have also
969:41 - done this and then said DF equals um I
969:45 - can't I mean I can run it it's just not
969:47 - going to do anything I can run it on the
969:50 - different column but that'll me mess
969:51 - everything up but this is another way
969:53 - you can do it and I'll just save it in
969:55 - case you want to um I'll say another way
969:59 - to drop null
970:01 - values there you go and that'll just be
970:03 - a note for us in the future um but this
970:06 - is our final product it looks a lot
970:10 - different than when we first started I
970:12 - mean we had mistakes here completely
970:15 - different formatting in the phone number
970:16 - different address everything that we
970:18 - just talked about um and this looks just
970:20 - a lot lot better and you can tell why
970:22 - it's really important to do this process
970:24 - because again we're working on a very
970:26 - small data set I I purposely you know
970:29 - created this data set with these
970:31 - mistakes because you know when you're
970:33 - looking at data that has tens of
970:35 - thousands 100 thousands a million rows
970:38 - these are all things that are going to
970:39 - be applied to much larger scale and you
970:41 - won't be able to as easily see them um
970:44 - you'll have to do some exploratory data
970:46 - analysis to find these mistakes and then
970:49 - you're going to need to clean the data
970:50 - or doing it at the same time when you're
970:52 - exploring the data uh so you'll clean it
970:54 - up as you go but these are a lot of the
970:57 - ways that I clean data a lot of the
970:59 - things that you can do to make your data
971:01 - just a lot more standardized is a lot
971:03 - more um visually better and then it
971:05 - really helps later on with
971:07 - visualizations and your you know actual
971:10 - data analysis so I hope that that was
971:12 - helpful I know that this was a long
971:13 - video I'm sure it was uh but I hope that
971:16 - you got something out of this you
971:17 - learned some of the techniques on how to
971:19 - actually clean data in pandas if you
971:20 - like this video be sure to like And
971:22 - subscribe check out all my other videos
971:24 - on pandas as well as Python and I will
971:26 - see you in the next
971:28 - [Music]
971:31 - video
971:34 - [Music]
971:39 - hello everybody today we're going to be
971:41 - looking at exploratory data analysis
971:43 - using pandas exploratory data analysis
971:46 - or Eda for short is basically just the
971:49 - first look at your data during this
971:51 - process we'll look at identifying
971:52 - patterns within the data understanding
971:54 - the relationships between the features
971:56 - and looking at outliers that may exist
971:58 - within your data set during this process
972:00 - you are looking for patterns and all
972:01 - these things but you're also looking for
972:03 - um mistakes and missing values that you
972:05 - need to clean up during your cleaning
972:07 - process in the future now there are
972:09 - hundreds of ways to perform Eda on your
972:11 - data set but we can't possibly look at
972:13 - every single thing so I'm just going to
972:15 - show you what I think are some of the
972:17 - most popular and the best things that
972:19 - you can do when you're first looking at
972:20 - a data set the first thing that we're
972:22 - going to do are import our libraries so
972:24 - we'll do import pandas
972:27 - aspd we're also going to import Seaborn
972:30 - and matplot lib now dur during this
972:32 - exploratory data analysis process I
972:35 - often like to visualize things as I go
972:38 - because sometimes you just can't fully
972:40 - comprehend it unless you just visualize
972:42 - it and it gives you a a larger broader
972:45 - glimpse of everything so we're going to
972:47 - import and let's do caborn
972:51 - oops as SNS and then we'll import Matt
972:56 - plot li.
972:59 - pyplot as
973:01 - PLT
973:03 - let's run
973:04 - this this should work okay perfect now
973:08 - we need to bring in our data set so
973:10 - we've worked with that world population
973:11 - data set that is the exact one that
973:13 - we're going to use now so we'll say
973:15 - dataframe equals pd. read undor
973:19 - CSV do R and we'll paste in our CSV and
973:25 - this is what it should look like
973:26 - although your path may be different be
973:27 - sure to make sure that you have the
973:29 - correct file path then we'll read it in
973:32 - now this data set should look extremely
973:34 - familiar if you've done some of my
973:36 - previous pandas tutorials but I did make
973:39 - some alterations to this one took out a
973:41 - little bit of data put in a little bit
973:42 - of data here and there um to change
973:45 - things up because if it was just exactly
973:47 - how I pulled it which I got this data
973:49 - set from kaggle if it was exactly how we
973:51 - pulled it like we've looked at in the
973:53 - previous videos it's too simple you know
973:55 - we wouldn't actually be able to do some
973:56 - of the things that I would like to show
973:58 - you so be sure to actually download this
974:00 - exact data set for this video because it
974:03 - is a little bit
974:04 - different but what we're going to do now
974:07 - is just try to get some highlevel
974:09 - information from this now if yours looks
974:11 - just a little bit different like your
974:12 - values are in scientific notation uh I
974:16 - have applied this so many times I think
974:17 - it's um you know still applied to this
974:20 - you can do something and we'll write it
974:22 - right down here we're going do pd. setor
974:26 - option and we'll do an open parenthesis
974:29 - and we'll say
974:31 - display. float uncore format and so
974:34 - we're going to change that float format
974:36 - by just saying Lambda X colon and then
974:40 - we're going to change basically how many
974:42 - um decimal points we're looking at so
974:45 - let's just do here so we'll do a quote
974:49 - percent sign 2f so we're formatting it
974:52 - whoops 0 2f so we're going to format it
974:55 - and we'll do percent X this is going to
974:58 - format it appropriately I'm I can run it
975:00 - um and actually it will change it this
975:02 - is at 0 one I believe last time I did it
975:04 - so let's run this and then let's run
975:06 - this again it'll change it to point 2 so
975:09 - that's two I like it at 0.1 we don't
975:12 - really need it any well let's keep it at
975:14 - point two why not we're going to keep it
975:16 - at point two that's how you change that
975:18 - and I like looking at it like this a lot
975:20 - better than scientific notation so just
975:23 - something to point out um let's go down
975:25 - here and let's just pull up data frame
975:28 - so we have this data one of the first
975:31 - things that I like to do when I get a
975:32 - data set is to just look at the info so
975:35 - we're going to do doino and this gives
975:37 - us just some really high level
975:39 - information this is how many columns we
975:41 - have here are the column names here are
975:44 - how many uh values we have and if you
975:47 - notice this is where it kind of gets so
975:49 - we have 234 in each of these so in each
975:52 - of these columns we have 234 until we
975:55 - get to this 2022 population once we get
975:58 - there we start losing some values and
976:02 - then at the world population percentage
976:04 - we have all of our values all 234 of
976:07 - them the count tells us that it's non
976:09 - null so it does have values in it and
976:10 - then we also have the data types and
976:12 - these come in handy later um and these
976:15 - are really great to know and we'll be
976:17 - able to kind of use those in a few
976:18 - different ways later on in this tutorial
976:21 - really quickly I wanted to give a huge
976:22 - shout out to the sponsor of this entire
976:24 - Panda series and that is udemy udemy has
976:26 - some of the best courses at the best
976:28 - prices and it is no exception when it
976:30 - comes to Panda courses if you want to
976:31 - master Master pandas this is the course
976:33 - that I would recommend it's going to
976:34 - teach you just about everything you need
976:36 - to know about pandas so huge shout out
976:37 - to you to me for sponsoring this Panda
976:39 - series and let's get back to the video
976:41 - the next thing that I really like to do
976:43 - and this one is DF do
976:45 - describe this allows you to get really a
976:48 - highlevel overview of all of your
976:50 - columns very quickly you can get the
976:52 - count the mean the standard deviation
976:56 - the minimum value and the maximum value
976:59 - as well as your 25 50 and 75
977:02 - percentiles of your values so just at a
977:05 - super quick glance there is a row
977:07 - somewhere in here and there this country
977:10 - their population is 510 for 2022 and in
977:14 - fact if you go back to 1970 it was
977:16 - higher it was at
977:17 - 752 that's just interesting then if we
977:20 - look at the um max population one has
977:23 - 1.42 billion I believe that's China and
977:26 - then over here in 1970 we have 822
977:29 - million again I still believe that's
977:31 - China but this gives you just a really
977:33 - nice high level of all of these values
977:36 - or all these different calculations that
977:38 - you can run on it and we can run all
977:40 - these individually on even specific
977:42 - columns but you know it's just a nice
977:45 - highlevel overview one thing that we
977:47 - just talked about was the null values
977:48 - that we're seeing in here um I'd like to
977:51 - see how many values we're actually
977:53 - missing because that is a problem um we
977:55 - don't want to have too many missing
977:57 - values or could really obscure or change
978:00 - the data set in irely and so we don't
978:02 - want that so we'll say DF do is null and
978:06 - then we'll do a parenthesis and we'll
978:07 - say do sum and when we do this
978:11 - whoops dot sum there we go when we do
978:15 - this it's going to give us all the
978:17 - columns and how many values we're
978:19 - actually missing now we have
978:20 - 234 rows of data so we have 41 477 55424
978:27 - um so we have we definitely have data
978:30 - missing what we choose to do with it in
978:33 - the data cleaning process maybe we want
978:35 - to populate it with a median value maybe
978:37 - we just want to delete those countries
978:39 - entirely if the data is missing um you
978:41 - know I don't think you're going to do
978:43 - that but these are things that you need
978:45 - to think about when you're actually
978:47 - finding these missing values this is
978:49 - what the Eda process is all about we
978:51 - want to find different um either
978:54 - outliers missing values things that are
978:56 - wrong with the data or we can find
978:59 - insights into it while we're doing this
979:00 - as well so so this is definitely
979:02 - something that I would consider um when
979:04 - I'm actually going through that data
979:05 - cleaning process really really important
979:07 - information to know now let's go right
979:09 - down here go to our next cell say DF do
979:13 - unique and this is going to show us how
979:15 - many unique values and it's actually n
979:18 - unique uh this is going to show us how
979:20 - many unique values are actually in each
979:24 - of these uh columns and this one makes
979:27 - the most sense um for continents because
979:30 - I think there's only seven continents
979:31 - right right um but we have six right
979:34 - here and for all of these each of these
979:36 - ranks countries capitals should all be
979:39 - unique that makes perfect sense as well
979:41 - as these you know these populations are
979:43 - such specific numbers and such large
979:45 - numbers I would be shocked if any of
979:47 - these were similar and then for these
979:49 - world population percentages it's much
979:52 - lower and again that makes a lot of
979:54 - sense because when we're looking at and
979:55 - we'll pull it up right here when we're
979:57 - looking at these world population
980:00 - percentages um a lot of them are really
980:02 - low 0.00 0.01 like this one um 0.2 there
980:08 - are a lot of really low values for those
980:10 - small countries and so those are all um
980:12 - you know one unique value now let's say
980:14 - we just have this data right here and we
980:17 - want to take a look at some of the
980:18 - largest countries and we can easily do
980:21 - that we could even we could say Max and
980:23 - take a look at the largest country but I
980:25 - want to be a little bit more strategic I
980:27 - want to be able to look at some of the
980:28 - top range of countries and we can do
980:30 - that based off this
980:32 - 2022 population so we'll say DF do
980:36 - sortore values this is how we sort and
980:39 - um not filter but um order our data so
980:42 - we'll do sort values and then we'll do
980:45 - buy is equal and then we'll specify that
980:47 - we want uh this 2022 population and then
980:51 - we're going to say comma and we'll say
980:53 - actually let's just run this as is um
980:55 - but we'll do head because we just want
980:57 - to look at the top values so now we're
981:00 - just looking at the very top values so
981:02 - what we're looking at is actually these
981:04 - 2022 population um that's what we're
981:07 - filtering on or sorting on basically and
981:09 - we're looking at the very bottom values
981:12 - because it's sorting ascending so from
981:14 - lowest to highest so this Vatican City
981:17 - in Europe is um you know 510 that's the
981:20 - value that we were looking at earlier
981:22 - now we can do comma ascending equal to
981:25 - false because it was by default true we
981:28 - can do false whoops we can do false and
981:30 - then it'll give us the very largest ones
981:33 - so if we just take a look at the top
981:35 - five largest by population we're looking
981:37 - at China India United States Indonesia
981:40 - and Pakistan and we can even specify
981:43 - that we want the top 10 in this head we
981:46 - can bring in the top 10 we also have
981:48 - Nigeria Brazil Bangladesh Russia and
981:51 - Mexico and you can do this for literally
981:53 - any of these columns whether you want to
981:55 - look at continent capital country um you
981:58 - can sort on these and look at them and
982:00 - you can even look at you know things
982:01 - like growth rate world percentage this
982:03 - one seems really interesting let's just
982:06 - look at this one really quickly before
982:07 - we move on to the next thing um if we
982:10 - look at this world percentage just China
982:13 - alone I believe yeah just China alone is
982:16 - 17.88% of the world so
982:30 - 17.88% world population percentage again
982:33 - just getting in here looking around
982:35 - that's all we're really doing now I want
982:37 - to look at something and I have always
982:39 - liked doing this which is looking at
982:41 - correlations um so correlation between
982:43 - usually only numeric values we can do
982:46 - that by saying DF
982:48 - docr and a parenthesis and we'll run
982:51 - this and what this is is it is comparing
982:55 - every column to every other column and
982:58 - looking at how closely correlated they
983:00 - are so this 2022 population if we look
983:03 - across the board it's very highly I mean
983:06 - this is a one: one this is highly
983:08 - correlated to each other and that almost
983:11 - for all of these populations they're
983:13 - very very closely tied to each other
983:14 - which makes perfect sense because for
983:17 - most countries they're going to be
983:18 - steadily increasing and so they're
983:20 - probably almost exactly correlated but
983:24 - we can look at these populations and if
983:26 - you look at the area it's only somewhat
983:29 - correlated and that's because in some
983:31 - countries you know they have a very high
983:33 - population but a small area or vice
983:35 - versa a small area and a very high
983:37 - population so there isn't a one toone
983:39 - correlation there but it's hard to
983:41 - really just glance at this um and
983:43 - understand everything that's there we
983:45 - could just visualize it and it would be
983:47 - a lot easier so let's go ahead and do
983:51 - that let's go down here we're just going
983:52 - to visualize this using a heat map
983:55 - basically so we're going to say SNS do
983:58 - heatmap and an open parenthesis and the
984:02 - data that we're going to be looking at
984:03 - is DF do core correlation and then we
984:07 - also want to say inote equals true I'll
984:10 - kind of show you what that looks like in
984:12 - just a little bit um but let's do PLT
984:16 - doow and this will be our first look and
984:19 - I need to say show not shot um we can
984:24 - get a little glimpse of what it looks
984:26 - like but this looks um absolutely
984:27 - terrible let's change the figure size
984:30 - really quick so I want to make this much
984:32 - larger than it already is we'll do
984:35 - pl. RC prams RC params oops right there
984:42 - do an open parenthesis and then right
984:44 - here we're going to do in quotes do
984:46 - figure. fig size this actually needs to
984:50 - be in brackets I
984:52 - believe just like this not parentheses
984:55 - we'll say fig size is equal to and now
984:58 - we can specify the value that we want
985:00 - let's do 10 comma seven and see if this
985:02 - looks any
985:04 - better no no that doesn't look good do
985:09 - 20 okay that looks a lot better and um
985:13 - you know this is just a quick way
985:15 - because it gives you basically a
985:16 - colorcoded system highly correlated is
985:19 - this tan all the way down to basically
985:21 - no correlation or negative correlation
985:23 - even which is black so when we're
985:25 - looking at these 2022 populations and
985:28 - these are populations right down here on
985:30 - this axis we can see that all of these
985:32 - are extremely highly correlated very
985:36 - very quickly whereas the rank really has
985:38 - nothing to do it's it's negatively
985:41 - correlated doesn't really have anything
985:42 - to do with it then for the population
985:45 - and the world population percentage it
985:47 - again is quite correlated except for the
985:51 - area density and growth rate so I find
985:55 - that really interesting that you know
985:56 - the density the growth rate in the area
985:58 - aren't really all that Associated or
986:03 - correlated with the population numbers
986:05 - that is I kind of would assumed that on
986:08 - some level they went hand inand the area
986:11 - does um would you know again make sense
986:13 - you know larger area larger population
986:15 - that kind of thing but even density um I
986:18 - guess I guess density and growth rate um
986:21 - growth rate I can see because that's a
986:22 - percentile thing that could be
986:24 - definitely not correlated I thought the
986:26 - density would be more correlated than it
986:28 - is all that to say is this is one way
986:30 - that you can kind of look at your data
986:32 - see how correlated it is to one another
986:34 - that can definitely um help you know
986:36 - what to analyze and look at later when
986:38 - you're actually doing your data analysis
986:40 - let's go right down here um something
986:43 - that I do almost all the time when I'm
986:45 - doing any type of uh exploratory data
986:47 - analysis like this I'm going to group
986:49 - together columns start looking at the
986:51 - data a little bit closer um so let's go
986:54 - ahead and group on the continent so
986:57 - let's look at it right here let's group
986:59 - on this continent because some times
987:01 - when you're doing this Eda you already
987:02 - know kind of what the end goal of this
987:04 - data set is you know kind of what you're
987:06 - looking for what you're going to
987:07 - visualize at the end that you really
987:09 - comes in handy when doing this but
987:11 - sometimes you don't sometimes just going
987:13 - in blind and so far we've really just
987:15 - been going in blind we're just throwing
987:17 - things at the wind kind of seeing some
987:18 - overviews um looking at correlation
987:21 - that's all we've done now I kind of want
987:23 - to get more specific I want to have like
987:25 - a use case something that I'm kind of
987:27 - looking for not doing full data analysis
987:30 - not diving into the depths but something
987:32 - we can kind of aim for so the use case
987:34 - or the question for us is are there
987:36 - certain continents that have grown
987:38 - faster than others and in which ways so
987:41 - we want to focus on these continents we
987:43 - know that that's the most important
987:44 - column for this use case this very fake
987:47 - use case um so we can group on this
987:49 - continent and we can look at these
987:51 - populations right here because we can't
987:53 - really see growth you can see a growth
987:56 - rate but the density per uh kilometer we
988:00 - don't have multiple values for that it's
988:02 - just a static one single value same for
988:04 - growth rate same for world population
988:06 - percentage but we have this over a long
988:09 - span many many years um you know 50
988:12 - years of data here so this we can see
988:15 - which countries have really done well or
988:18 - which continents have really done well
988:19 - so without you know talking about it
988:21 - even more let's do DF Group by and then
988:25 - we'll say continent oops let me just
988:29 - copy this I'm I'm not could it's
988:31 - spelling we're going to say DF groupy
988:33 - and then we'll do
988:35 - mean and we can just do it just like
988:37 - this and now we have Africa Asia Europe
988:41 - North America Oceana and South
988:45 - America okay so if I'm being completely
988:48 - honest I knew most of these all right
988:51 - I'm no geography extra expert but I I
988:53 - knew most of these I don't know what
988:54 - this ocean is um this that I don't I
988:58 - genuinely don't know what that is um
989:01 - so let's just search for that value and
989:04 - see we'll come back up here in just a
989:06 - second but I want to I want to kind of
989:08 - understand um what this is so we're
989:10 - going to DF um and we'll say
989:14 - continent let me sound that out for you
989:16 - guys um then we'll do string. contains
989:21 - oops contains good night and then I want
989:26 - to look for
989:28 - Oceana uh and let's let's run this oh I
989:31 - need to do it like
989:35 - this now let's run this so now we're
989:38 - looking at our data frame we're seeing
989:40 - when the values have this continent as
989:44 - Oceana um okay so these look like
989:47 - Islands I'm guessing so we have Fiji
989:50 - Guam um New
989:53 - Zealand Papa New Guinea yeah these look
989:56 - like all I'm I'm guessing based off the
989:59 - continent Oceana
990:01 - um Oceania o Ocea Oceania guys this is
990:06 - tough for me okay I'm doing my best I
990:09 - you know this is part of the Eda process
990:11 - I don't know what that means I don't
990:12 - know what ocean ocean ocean Oceania geez
990:17 - I'm just going to call it Oceana that's
990:18 - so wrong but I'm just gonna it's so easy
990:20 - for me to say you know I I now am seeing
990:23 - this and it looks like
990:25 - Islands um which would make sense
990:29 - because for their average they have the
990:31 - highest average rank um and I'm guessing
990:35 - that's because they're just mostly small
990:37 - continents so let's let's order this
990:39 - really quickly we're going to do dot
990:42 - sortore values do an open parenthesis
990:46 - and I want to sort on the population
990:48 - we're just doing the average population
990:51 - um we'll do BU um equal so on the
990:54 - average population and we'll do
990:57 - ascending equals false so we're looking
991:01 - at this average or the mean population
991:04 - Asia has the highest population on
991:06 - average and we have South America Africa
991:09 - Europe North America and then Oceana at
991:14 - the very bottom which makes perfect
991:15 - sense again small Islands um world
991:19 - population percentage so each of the
991:22 - countries each of those countries in
991:23 - Asia makes up about 1% on average really
991:27 - interesting um to know and just kind of
991:29 - look at this and and the density in Asia
991:34 - is far higher than double almost double
991:37 - every single other continent um really
991:41 - really interesting actually now that I'm
991:42 - looking at this but you know that's
991:44 - something that I would actually look
991:45 - into and I would be like what is this
991:47 - Oceana or Oceania what does that mean
991:51 - and you know let me look into that let
991:52 - me explore that more because I want to
991:54 - know this data set I'm trying to really
991:56 - understand this data set well but what I
991:58 - want to do now is I want to visualize
991:59 - this um
992:01 - because I just feel like looking at it I
992:03 - don't it's hard to visualize and again
992:06 - the use case that we're saying is is
992:07 - which continent has grown the fastest
992:10 - like it could be percentage wise it
992:11 - could be um you know as just a whole on
992:14 - average let's take a look so we're going
992:17 - to take this and let's copy it like this
992:20 - let's bring this right down here so
992:23 - let's look at this so if I try to
992:27 - visualize this and let's do that let's
992:29 - do df2 is equal to because I'm I already
992:33 - know it's not going to look good just
992:34 - based off how the data is sitting um we
992:38 - do df2 oops what am I doing I don't need
992:42 - to do that but I will okay df2 and we'll
992:44 - do df2 do
992:47 - lot I'll we'll run it just like this um
992:51 - as you can see Asia South America Africa
992:54 - Europe North America Oceana we can kind
992:58 - of understand what's happening but these
993:01 - are the actual um values that are being
993:03 - visualized not the continents which is
993:06 - what I wanted um in order to switch it
993:09 - and it's actually pretty easy and this
993:10 - is something that um you know is good to
993:13 - know we can actually transpose it to
993:15 - where these these continents become the
993:17 - columns and the columns become the index
993:20 - and all we have to do is say df2 do
993:25 - transpose and we'll do this parentheses
993:27 - right here and let's just look at it and
993:30 - then we'll save it so now all these
993:34 - columns are right
993:35 - here and all of the indexes are the
993:38 - columns so let's say df3 is equal to and
993:42 - I'm just doing that so I don't you know
993:43 - write over the DF or my earlier data
993:45 - frames so now we have this data frame
993:47 - three so now let's do data frame 3. plot
993:51 - and it should look quite a bit
993:54 - different uh whoops I didn't run this
993:57 - let's run this and run this
994:01 - and as you can see this does not look
994:03 - right at all and the reason is is
994:06 - because we're not only looking at uh the
994:08 - correct columns we have this density in
994:10 - here word population percentage rank we
994:12 - don't need any of those the only ones
994:15 - that we want to keep are these ones
994:17 - right here this
994:18 - population now we can do that and we can
994:21 - just go right up here this is where we
994:22 - created that data frame two that we
994:24 - transposed we can go right up here and
994:26 - we can specify within this we actually
994:29 - only want specific specific values now
994:31 - we can go through and handr write all of
994:34 - these and by all means go for it but I
994:38 - am going to go down here I'm going to
994:39 - say DF do columns and I'm going to run
994:42 - this it's going to give us this list of
994:45 - all of our columns and I'm just going to
994:47 - you can just copy
994:50 - this and you can put it right in here
994:52 - think I need a list with I think it
994:54 - needs to be like this if I'm let me try
994:56 - running this okay so this worked
994:58 - properly you can do it just like this or
995:00 - a little shortcut if you want to do it
995:02 - like that if you want to do a shortcut
995:04 - like um I I would hope you would you
995:07 - would just do DF doc columns just like
995:10 - how we looked at down here except since
995:13 - this is our an index we can search
995:15 - through it so we can just say 0 one two
995:18 - okay so we can do five up to 13 because
995:22 - I think it's seven and we'll just let's
995:24 - see if this
995:26 - works uh it may not I may actually need
995:28 - to go like this let's see
995:31 - there we go so you can just use you know
995:34 - the indexing to save you some visual
995:36 - space gives you the exact same output so
995:38 - now we have this this is our df2 now
995:41 - let's go down and transpose it so now we
995:44 - just have these populations and we have
995:45 - our conents right here and then now
995:48 - we're going to plot it and this looks
995:51 - good although it's
995:54 - backward um okay it's
995:56 - backward so what I actually want to do
996:01 - is not this uh that is a quick way to do
996:04 - it although not the best way to do it um
996:08 - so I'm actually going to copy all of
996:09 - these and although I said it would save
996:11 - us time it did not at all so I'm going
996:15 - to put a bracket right
996:18 - here I'm going to paste this in here and
996:20 - I'm literally going to change these up I
996:23 - might speed this up or I might just have
996:26 - you sit through this because you know
996:28 - this is an interesting part of the proc
996:30 - process and I want you know you to get
996:32 - the full experience you know what now
996:34 - that I'm talking about it that is what
996:35 - we're going to do you guys can hang out
996:37 - with me this is a good time we have
996:40 - 2010
996:42 - 2015
996:44 - 2020 and 2022 now let's run it what did
996:49 - I do oh too many brackets there we go so
996:52 - now it's ordered appropriately we have
996:54 - 1970 all the way up to 2022 this is how
996:57 - we want it let's transpose it
996:59 - appropriate
997:01 - let's run it and now we basically have
997:03 - the inverted uh image of this now just
997:06 - at a glance and we haven't done anything
997:08 - to this except for literally what we are
997:10 - looking at at a glance we can see that
997:13 - from
997:14 - 1970 China here you know Asia and China
997:17 - are already in the lead by quite a bit
997:20 - and it continues to drastically go up
997:23 - especially in the 2000s like right here
997:26 - it explodes like just straight up then
997:30 - kind of starts going up and just
997:31 - leveling off every other continent
997:34 - especially oce Oceana is just really low
997:38 - it it never has done a bunch let's see
997:39 - look at green green has gone up um from
997:41 - you know Point let's say
997:44 - 0.1 up to about point2 so they've almost
997:47 - doubled um in the last 50 years and
997:51 - again you can just get an overview a
997:53 - high level overview of each of these you
997:56 - know continents over the span of this
997:59 - time so this is kind of one way that we
998:01 - can you know look at that use case we're
998:04 - not going to harp on that too long I
998:05 - just want to give you an example like
998:07 - you know when you're looking at this
998:10 - sometimes you'll have something in mind
998:11 - of what you're looking for and you go
998:12 - exploring and just kind of find what's
998:15 - out there and find what you see um the
998:17 - next thing I want to look at is a box
998:19 - plot now I personally I love box plots
998:22 - you know they're really good for finding
998:25 - outliers and there's a lot of outliers I
998:28 - already know this because because the
998:30 - average the 25th 50 percentile are very
998:32 - low and then there's some really just
998:34 - big outliers but for your data set it
998:37 - may not be that way and those outliers
998:39 - may be something that you really need to
998:41 - look into and box plots have been
998:43 - something that I've used a lot where I
998:44 - found those outliers that way and
998:46 - started to dig into the data to find
998:48 - those outliers and you know came across
998:50 - some stuff that I'm like oh I have to
998:51 - clean this up I have to go back to the
998:52 - source really um really really powerful
998:55 - and useful to be able to find these so
998:58 - all you have to do is d. boox plot and
999:01 - let's take a look at it and this already
999:03 - looks good as is maybe I'll make it a
999:05 - little bit wider um let's do fig size
999:10 - oops sorry fig size is equal to let's
999:14 - try
999:15 - 20 by
999:18 - 10 um okay that didn't help at all I
999:21 - apologize thought I would but let's keep
999:23 - going what this is showing us is that
999:26 - these little boxes down here which are
999:28 - actually usually much much larger
999:30 - because you have a more equal
999:31 - distribution of of um numbers or values
999:35 - in the small value this is where our
999:37 - averages lie this number right here is
999:41 - the upper range and then all these
999:42 - values all these Open Circles those
999:45 - actually stand for
999:46 - outliers so we're looking at the 2022
999:49 - population there's a lot of outliers now
999:52 - for our data set knowing our data set is
999:54 - really important outliers are to be
999:56 - expected especially when most countries
999:59 - are continents are small so we're
1000:01 - looking at you know all of these little
1000:03 - dots are outlier countries um or outlier
1000:07 - values which each value corresponds to a
1000:09 - country so if this was a different data
1000:12 - set I would be you know searching on
1000:14 - these and trying to find these so that I
1000:16 - can see what's wrong with them if
1000:18 - anything or if they are real um numbers
1000:20 - like if this was Revenue everyone's
1000:22 - revenue is way down here and then
1000:23 - there's one company that's making like
1000:24 - 10 trillion dollar that'd be an outlier
1000:27 - up here and it would definitely be
1000:28 - something that you want to look into to
1000:30 - for our data set knowing that you know
1000:32 - we're looking at population this is more
1000:34 - than acceptable you know oddly enough
1000:37 - but that's what box plots are really
1000:39 - good for showing you some of those cor
1000:41 - tiles the upper and the lower um as well
1000:43 - as denoting these points that fall
1000:44 - outside of those normal ranges for you
1000:46 - to look into so really really useful so
1000:49 - now let's go down here pull up our data
1000:51 - frame again and we've kind of just
1000:54 - zoomed into the whole Eda process there
1000:56 - was one last thing that I wanted to show
1000:58 - you and this is the very last thing that
1001:00 - we're going to look at we're ending on
1001:01 - really a low point if I'm being honest
1001:03 - because the last kind of stuff was more
1001:04 - much more exciting but there is
1001:06 - something DF DOD types oops let's do DF
1001:11 - DOD
1001:12 - types and we'll run this now just like
1001:15 - info it gave us these values but we're
1001:18 - actually able to search on these values
1001:20 - now so these um object float and integer
1001:24 - we can search on those which is really
1001:26 - great because we can do include equal
1001:29 - and we can do something like number and
1001:32 - none of these are numbers right or none
1001:34 - of them explicitly say number but when
1001:37 - we run it I'm getting an error series
1001:39 - object not oh that's because I'm doing
1001:42 - um D types is for a series we need to do
1001:45 - select underscore D types now let's run
1001:48 - this now it's only returning um The
1001:52 - Columns in this data frame where the
1001:54 - data types are included in this number
1001:57 - so you won't see any you know country or
1001:59 - any of those text or the strings if we
1002:02 - want to do that we go in here and say
1002:06 - object and run that and this is another
1002:09 - really quick way where we can just
1002:12 - filter those columns to look for
1002:14 - specific whether it's numeric um we
1002:17 - could even do float in here and so now
1002:19 - it's not including that rank which was
1002:21 - an integer so we can specify the type of
1002:23 - data type and it'll filter all of the
1002:25 - columns based off of that which you know
1002:28 - when you're doing stuff like this you it
1002:29 - is good to know what kind of data types
1002:32 - you're working with and look at just
1002:33 - those types of data types because there
1002:35 - might be some type of analysis you want
1002:36 - to perform on just that whether it's
1002:39 - numeric or just the string or integer
1002:41 - columns within your data set so again
1002:43 - ending on a low note I apologize um you
1002:46 - know everything else that we looked at
1002:47 - all those other things that we looked at
1002:49 - are all things that I typically do in
1002:52 - some way or another when I'm looking at
1002:54 - a data set exploratory data analysis is
1002:57 - really just the first look you're
1003:00 - looking at it you're going to be
1003:01 - cleaning it up doing the data cleaning
1003:02 - process and then you're going to be
1003:04 - doing your actual data analysis actually
1003:06 - finding those Trends and patterns and
1003:08 - then visualizing it um in some way to
1003:11 - find some kind of meaning or Insight or
1003:14 - value from that data and again there's a
1003:16 - thousand different ways you can go about
1003:18 - this it it does typically um you know
1003:21 - depend on the data set but these are a
1003:24 - lot of the ways that you'll clean a lot
1003:25 - of different data sets and so you know
1003:27 - that's why I went into the things that
1003:28 - we looked at in this video video so I
1003:30 - hope that you guys liked it I hope that
1003:31 - you enjoyed something in this tutorial
1003:33 - if you like this video be sure to like
1003:34 - And subscribe as well as check out all
1003:36 - my other videos on pandas and Python and
1003:39 - I will see you in the next
1003:41 - [Music]
1003:51 - video what's going on everybody welcome
1003:54 - back to another video today we are back
1003:56 - with another data analyst portfolio
1003:57 - project where we will be scraping data
1003:59 - from Amazon using
1004:03 - [Music]
1004:05 - python now you may be asking do I need
1004:08 - to know web scraping to become a data
1004:10 - analyst and the answer is no you
1004:11 - absolutely don't need to know it but it
1004:13 - is a very cool skill to learn and in
1004:15 - fact I have used it in my job in the
1004:17 - past and so it is useful but you really
1004:20 - don't need to know it something that it
1004:22 - is used for is kind of creating your own
1004:24 - data sets um and we're going to be
1004:26 - looking at one where you can create your
1004:27 - own data set today but there are a lot
1004:30 - of other uses for web scraping and I'm
1004:32 - sure I'll talk a little bit more about
1004:33 - that while we're actually walking
1004:34 - through the project one last thing I
1004:35 - want to say before we get started is
1004:37 - that this is most likely an intermediate
1004:39 - project so if you are just now learning
1004:40 - the basics of python this might be a
1004:42 - little bit challenging for you but I
1004:44 - still recommend going through it because
1004:46 - I will do my best to walk through
1004:48 - everything every single step of the way
1004:49 - and and kind of explain all the concepts
1004:52 - and so you can still learn something
1004:53 - even if you aren't super good at python
1004:55 - right now with that being said let's
1004:56 - jump over to my screen and get started
1004:58 - on the project all right so we are going
1004:59 - to get started and if you didn't watch
1005:01 - the last project I had people download
1005:04 - Anaconda uh we use Jupiter notebooks um
1005:07 - and I'll show you how to get to that in
1005:08 - just a second but I'll I'll leave this
1005:09 - link in the description if you haven't
1005:11 - done that already and you are just doing
1005:13 - this project um but you'll go you'll
1005:15 - download andaconda You Know download
1005:17 - super easy um and you're going to open
1005:18 - up Jupiter notebooks I'll launch it
1005:20 - right now I already have it open uh but
1005:23 - I'll open up another one just for you
1005:25 - know the purposes of demonstration what
1005:28 - we are going to do today and what we um
1005:31 - what people voted on I mean there's like
1005:33 - there was like 8,000 people that voted
1005:35 - um in the poll that I made of what data
1005:37 - you wanted me to scrape there was like
1005:39 - Amazon cryptocurrency weather um
1005:42 - something else I don't remember
1005:44 - overwhelmingly I mean like 70% of people
1005:46 - maybe even 80% I you don't don't fact
1005:49 - check me on that voted for Amazon um and
1005:53 - so I'm going to do it now there are many
1005:56 - things that you can scrape um off of
1005:58 - Amazon just a ton of stuff um and I'm
1006:02 - going to show you how to do it I'm going
1006:04 - to show you how to make it useful how to
1006:06 - make a data set um and it's going to be
1006:10 - really interesting but there are lots of
1006:12 - other ways to do this and so I think um
1006:14 - and I have already kind of created it
1006:17 - I'm going to show you how to do it off
1006:18 - of this page um when you're actually in
1006:20 - an item and you can scrape you know
1006:22 - basically anything in here um and I'll
1006:24 - show you how to do that another thing
1006:27 - that is a little bit more advanced and
1006:29 - that's why this first video is starting
1006:31 - off I think on the more easy side it's
1006:33 - not easy but it's easier the next thing
1006:36 - the next video that I'm going to make is
1006:38 - how to actually do um basically do
1006:42 - multiple items right so this item this
1006:45 - item this item this item and then
1006:48 - Traverse through the different pages so
1006:50 - there 20 Pages um you want all of that
1006:53 - data how do you get all of that that'll
1006:56 - be the next project um I don't know when
1006:57 - I plan on doing that I it like 90% of
1007:00 - the way done um but I had this one
1007:02 - completed and so I wanted to get that
1007:03 - out to you guys now but that will
1007:05 - probably be the next project I think
1007:06 - that is much more difficult um and so if
1007:09 - you can understand this one and you get
1007:11 - it and and you understand it then the
1007:13 - next project you should be able to
1007:14 - understand too is just a little bit more
1007:16 - complicated so with that being said um
1007:19 - we are going to actually get into the
1007:20 - project I'm going to delete one of these
1007:23 - um all we're going to do is go to new do
1007:26 - Python 3 it'll open up new one we'll
1007:29 - call this um
1007:32 - Amazon web
1007:35 - scraper um project that's what we'll
1007:38 - call it I spell it right perfect um the
1007:42 - first thing that we need to do uh or
1007:44 - that we should do is
1007:47 - upload um or or or import our
1007:50 - libraries so I'm going to say um import
1007:53 - oops what am I doing it's off to a
1007:56 - terrible start there we go import
1007:59 - libraries now I'm not going to write out
1008:00 - all the libraries um I have some things
1008:03 - that I'm going to be copying and pasting
1008:04 - throughout this I won't there's only a
1008:06 - few things that I'm copying and pasting
1008:07 - you can take a quick glance um some of
1008:09 - the things that I just don't want to
1008:10 - waste time on um because this could be a
1008:12 - long video I don't know I don't want to
1008:14 - waste time on stuff like this um and so
1008:17 - you know I'm just going to copy and
1008:19 - paste it you guys are going to I'm going
1008:21 - there will be a link below if you
1008:22 - haven't clicked it already that will go
1008:24 - to the GitHub page where you can
1008:26 - literally have all of this code already
1008:28 - written WR I do recommend writing it all
1008:31 - yourself because you will learn it much
1008:33 - better I promise CU then you'll make
1008:34 - mistakes and you'll figure it out and
1008:35 - all that all that good stuff but you
1008:37 - will have that code available so just go
1008:38 - copy and paste it um that's what I would
1008:40 - do but what we are we are going to be
1008:42 - using today is uh something called
1008:44 - Beautiful soup requests um then we're
1008:48 - going to be using time and date time and
1008:51 - a potential one if you want to get and
1008:53 - I'm going to show you this at the end
1008:54 - this is not really part of the project
1008:56 - it goes above and beyond but this
1008:58 - Library here is for sending emails to
1009:01 - yourself um and I'll show you how uh you
1009:04 - can use it if you want to I already have
1009:06 - the whole code written out um you can
1009:08 - just steal it and try it out yourself
1009:10 - and see if you can get it to work but
1009:11 - this one is not um as important I'll put
1009:14 - it down here so um let's move on now one
1009:18 - thing I want to say before we get too
1009:20 - into it is that well give me a
1009:23 - second is that right here in front of me
1009:27 - is a different laptop now it took me a
1009:30 - solid I would say you know 10 hours or
1009:34 - so to write all of this is took over the
1009:37 - course of like two weeks in my free time
1009:38 - I'd pick it up it took me a solid you
1009:41 - know two weeks on and off an hour here
1009:43 - an hour there to finish this project um
1009:47 - and I made a ton of mistakes and messed
1009:49 - a bunch of things up and I finally got
1009:50 - it to work um you know after a bunch of
1009:52 - revisions that's typically how things go
1009:54 - when I do projects and so uh I'm about
1009:58 - to give you a stream lined version of
1010:00 - this because I have all the code right
1010:02 - down here and so I'm going to be
1010:04 - glancing at this a lot um just so I
1010:07 - don't make this video 20 hours of trying
1010:09 - to remember all the code off the top of
1010:11 - my head I have it written out already I
1010:12 - already did the project it works it's
1010:14 - beautiful it's a good project so um I
1010:16 - don't want to waste your time and I just
1010:18 - want you to know that you know you you
1010:21 - nobody should be able to do this up top
1010:23 - their head in an hour most people won't
1010:26 - um it takes time you make mistakes um
1010:30 - but uh let's get started on the project
1010:33 - now in this uh in this what we're going
1010:37 - to have to do is we going to have to
1010:41 - tell beautiful soup and requests where
1010:44 - we are actually getting this data from
1010:46 - what website um what is our computer you
1010:48 - know some information from our computer
1010:50 - I'm going to again there's going to be a
1010:52 - little copying and pasting in here
1010:54 - because you don't ever you will never
1010:55 - ever ever need to know this um but right
1010:58 - here we're going to to basically connect
1011:00 - to the website so I'm just going to say
1011:02 - connect to
1011:03 - website and we going to say URL is equal
1011:07 - to and let's go get our
1011:09 - URL so we have this right here so
1011:12 - literally just go up here do you know uh
1011:15 - controll a copy that oops that's the
1011:19 - actual project get rid of
1011:21 - that uh paste it in here and that is our
1011:24 - URL we will use that in just a second uh
1011:27 - what am I doing
1011:30 - me just get some room here and then we
1011:34 - what we're going to need is something
1011:36 - called headers now again you will never
1011:38 - ever ever need to know this so I'm just
1011:41 - going to say headers um what I'm going
1011:43 - to do is I'm going to copy this I'm
1011:44 - going to show you how to get this really
1011:46 - quick um but is something called headers
1011:51 - so uh let me show you how to use how to
1011:54 - get
1011:56 - this and why you don't need to know any
1011:58 - of this so what this headers is is this
1012:01 - something called a user agent you need
1012:02 - to do this for your computer um and you
1012:06 - can do that by going to this link right
1012:08 - here so I'm going to put this link in
1012:10 - the description so that you can go and
1012:12 - get that and there's something right
1012:13 - here called the user agent so all you
1012:16 - have to do is copy this just like this
1012:20 - do copy I'm going to go back here and
1012:22 - I'll show you that it's I'm going to
1012:24 - copy it in um it'll be the exact same so
1012:27 - there you go
1012:29 - it's the exact same um all of this extra
1012:33 - stuff except encoding except um this
1012:38 - HTML stuff Connection close all the you
1012:40 - don't need to know any of it I promise
1012:42 - you'll never come in handy ever in
1012:44 - life actually there will be one person
1012:46 - who that becomes in handy for and then
1012:48 - they'll message me um but we are now
1012:52 - connecting um using our computer using
1012:55 - this
1012:56 - URL and then what we want to write is we
1012:58 - want write page we're going to say
1013:01 - equals and this is where we start using
1013:03 - uh these libraries so we're going to use
1013:05 - requests.get and we are going to pull in
1013:08 - that URL and we're just going to say
1013:11 - headers is equal to our headers right
1013:15 - here so uh we have this and this is
1013:19 - where we're going to actually
1013:20 - start getting the data bringing in the
1013:23 - data um and it's not going to look like
1013:26 - that at first but I'll try to print some
1013:28 - stuff out out as we go along the way so
1013:30 - that you can kind of see what it looks
1013:31 - like and how we're going to kind of make
1013:33 - it more useful because it comes in very
1013:36 - dirty uh when we first get it and some
1013:38 - of the things I'm going to show you will
1013:40 - just help clean that up um and before we
1013:42 - actually go any any further I don't want
1013:44 - my head to be here for the entire time
1013:46 - I'm going to get rid of myself so you
1013:47 - can just see the page uh I just it's
1013:51 - less distracting uh I hate when I feel
1013:53 - like people are always watching me so I
1013:55 - want people to just focus on the code uh
1013:58 - so I will see in a little bit let's get
1014:00 - back into it all right so what we are
1014:02 - going to do is we are actually going to
1014:03 - start using the beautiful soup Library
1014:06 - all right so we are going to say soup
1014:08 - one is equal to and this is where we
1014:11 - actually start bringing beautiful soup
1014:12 - and you guess it you're going to say
1014:13 - beautiful soup and then in parenthesis
1014:16 - we're going to do page.
1014:18 - content um and again these aren't really
1014:22 - things that you need to remember or need
1014:24 - to memorize we're just pulling in the
1014:26 - content from the page that's really all
1014:27 - we're doing right now and and it comes
1014:29 - in as HTML so we're going to do html.
1014:32 - parser uh and let's see if I can print
1014:35 - out uh actually let me just do soup one
1014:38 - I don't like I don't like doing upper
1014:40 - caps on
1014:41 - stuff let's see if anything prints out
1014:43 - real quick so we are literally pulling
1014:46 - in all of the
1014:49 - HTML um and let me go show you really
1014:52 - quick because we're going to get to this
1014:53 - in a second anyways um if you come here
1014:57 - this is
1014:59 - this is a static page basically written
1015:01 - in HTML um if you have never seen HTML
1015:04 - before um you
1015:07 - know actually a lot of this is you know
1015:11 - just stuff that most people will never
1015:13 - use uh it's just good to know some of
1015:15 - the stuff is good to know so as you see
1015:17 - I'm scrolling on this right side by the
1015:18 - way I did rightclick and inspect or
1015:21 - control shift I whichever one works
1015:23 - better for you but as I'm scrolling over
1015:25 - this you should see it kind of
1015:26 - highlighting different areas um it's
1015:29 - hard to kind of get what you want let's
1015:31 - say we want this title um what I can do
1015:34 - is I can click select element go right
1015:37 - here um and then we can select like a TI
1015:39 - the the the header or the title of the
1015:41 - the page now I just want to show you
1015:44 - though of what we're pulling in so we're
1015:46 - pulling in this doc type HTML all of
1015:49 - this is coming in so that's what this is
1015:51 - right here this doc type HTML and we're
1015:54 - pulling every single thing in that is
1015:56 - what we're doing right now uh so let's
1015:59 - get or let's go down a little bit let's
1016:02 - do soup two we're just going to do a
1016:04 - very uh you know an upgrade to soup one
1016:08 - basically we'll do beautiful soup
1016:11 - again and then we're going to do uh soup
1016:15 - one so we're pulling in that content
1016:18 - again so that soup one and we're going
1016:20 - to do do PR prettify if you don't know
1016:24 - what that is it is common in a lot of
1016:27 - different languages and a lot of
1016:29 - different stuff um it just makes things
1016:31 - look better it that's really all it
1016:35 - is uh I don't know why I'm using double
1016:39 - quotes I don't know why I can you can do
1016:41 - single ones if you want um and now let's
1016:43 - do beautiful soup to and it should just
1016:46 - be a it should be better formatted um
1016:49 - and let's see if that's true and it is
1016:52 - so before if you did if you could tell
1016:53 - it was didn't have basically any
1016:55 - formatting it has a little bit of
1016:56 - formatting now um it'll help in a second
1016:59 - um and you'll see that but now what we
1017:03 - want to do is go back and we want to
1017:05 - actually get the data that we want now
1017:07 - you can get any data you want I'm going
1017:09 - to show you simple things really really
1017:13 - easy um in my in in in my opinion it
1017:16 - gets more difficult the more complicated
1017:18 - stuff you start pulling um and and
1017:21 - you'll understand that as we go into it
1017:23 - so what I'm going to do is I'm going to
1017:25 - select this and I'm going to select this
1017:27 - um the title I want that and so if you
1017:30 - do span ID it's equal to product uh
1017:34 - title so we need to remember that um
1017:37 - class we don't need to know class I
1017:40 - believe uh we're going to be using that
1017:42 - ID this um ID equals product title so
1017:46 - that's what we're going to be using um
1017:48 - class will come in in the next video
1017:50 - when we start looking at these uh but
1017:52 - not in this one so let's remember ID
1017:54 - equals product title so let's go back
1017:57 - over here so we have this soup 2 it's
1018:00 - basically all of that HTML in it right
1018:03 - down here that that is what we're
1018:04 - pulling in so we need to kind of specify
1018:07 - what we actually want so let's say title
1018:09 - that's what we're going to be getting um
1018:11 - and we're going to do soup 2 so using
1018:13 - taking all that content um we're do
1018:16 - find and we're going to do open
1018:18 - parenthesis and we're going to say we
1018:19 - want to find that ID where it's equal to
1018:23 - product
1018:25 - title and then we're going to do do
1018:29 - getor text and then we're going to do
1018:33 - open parentheses so now let's um let's
1018:37 - print the
1018:40 - title and see what we get all right so
1018:43 - that is exactly what we're looking for
1018:44 - it's funny got data Mis um T-shirt that
1018:50 - that is what we're trying to pull in so
1018:52 - that's perfect that's exactly what we
1018:53 - want we don't uh let me let me just do
1018:57 - this save me some time later on we don't
1018:59 - only want the title we are also going to
1019:01 - be pulling in the price so if you can
1019:04 - guess uh we'll be doing some uh a data
1019:08 - set on the actual
1019:10 - pricing um and so let's go back here
1019:14 - we're going to again use this right here
1019:16 - and we're going to go to this
1019:18 - price and it says again we're going to
1019:21 - look at this ID the ID equals price
1019:23 - blockor our price so fairly easy you can
1019:27 - copy this I'm just going to write it out
1019:30 - um we're going to say price is equal to
1019:33 - sup
1019:34 - 2. find and then it's going to be again
1019:38 - ID is equal to and it's going to be
1019:41 - price block underscore our price did I
1019:45 - saw that right
1019:47 - oops excuse me there we go and the exact
1019:51 - same
1019:52 - thing.get
1019:54 - text
1019:56 - parenthesis uh and there's a g text
1019:58 - there's a get all or get all text um so
1020:02 - you know that get text is a specific
1020:04 - thing that we are using you we might use
1020:07 - a different one later on um but that
1020:10 - that is what we have so now
1020:13 - let's let's print the title and print
1020:16 - when I why do I have all
1020:18 - this too much uh too much space so let's
1020:22 - T print the title and print the price
1020:25 - let's see what we get okay so we have
1020:27 - our title and we have our price I mean
1020:30 - you know I don't know what all this
1020:32 - white space is over here um but it looks
1020:35 - like there's a lot of white space over
1020:36 - here we'll have to get rid of that uh in
1020:39 - a little bit as we clean it up a little
1020:40 - bit you can if you want do things like
1020:46 - um you can get and this is up to you I'm
1020:49 - not going to do this right now but I'm
1020:50 - just going to show you how to do it you
1020:52 - can get this where you're pulling in the
1020:54 - ratings um which is you know if you want
1020:57 - to look at like how the ratings over
1020:59 - time or or what ratings are for specific
1021:02 - products that could be really useful um
1021:05 - you can pull basically anything you can
1021:06 - go down the product details and look at
1021:08 - Dimensions uh anything you want on this
1021:11 - page it is static so you can go in here
1021:15 - and pull anything it's it you just have
1021:17 - to pull it from the HTML know where
1021:18 - you're looking pull it in um and now
1021:21 - when we go back here excuse me I'm going
1021:23 - to show you now kind of how to use this
1021:26 - right because we have this
1021:28 - but how are we going to use it um that's
1021:30 - kind of the important part I think first
1021:32 - thing we need to do is clean this up a
1021:34 - little bit because it just is you know
1021:39 - if we try to use this it wouldn't be
1021:41 - super useful because it'd be just a
1021:43 - little bit dirty it's not super
1021:45 - clean um so what we want to do is let's
1021:49 - start with the price why not uh we're
1021:52 - going to say price. strip um and that's
1021:55 - just going to take uh basically the the
1021:59 - junk off of either side and so let's run
1022:02 - that real quick so this is what we have
1022:04 - but what we can also do is I don't want
1022:07 - that dollar sign I just want the numeric
1022:09 - value um later on we are going to be
1022:11 - putting this and we're going to be um
1022:13 - creating a process to put this into an
1022:15 - Excel file again we're trying to create
1022:18 - a data set I don't want you to have to
1022:19 - copy and paste stuff it's all going to
1022:21 - be automated basically to input this
1022:24 - data into an Excel file for you or a CSV
1022:26 - file for you so um you know think about
1022:29 - making it useful in a CSV or in an Excel
1022:32 - later on so what we can do is do a
1022:35 - bracket and we're going to do one and
1022:38 - then everything after that so basically
1022:39 - it's just going to take everything from
1022:41 - the first position onward uh so let's
1022:44 - run that and there we go so let's just
1022:47 - say price is equal to price. strip um
1022:52 - and pull uh just do everything after
1022:54 - that first um that first not value what
1022:58 - am I saying what's the word for that I
1023:00 - can't remember the word the first space
1023:02 - that's not the right word but all right
1023:03 - let's do the title um this is basically
1023:05 - going to be the exact same thing um
1023:08 - super easy so we're just going to do
1023:10 - title. strip and open
1023:13 - parentheses um and we can you know if
1023:16 - you want to do this exact same thing so
1023:20 - now we have it it's a little bit cleaner
1023:21 - so this is what it originally looked
1023:23 - like and now this is what it looks like
1023:25 - so you know nothing super crazy but you
1023:30 - know something interesting to know now
1023:33 - we are about to in the very next part
1023:35 - what we are going to do and let me just
1023:37 - add a few of these because makes me feel
1023:39 - better um what we are about to do is
1023:41 - we're going to create our CSV to insert
1023:45 - this data into the CSV and then later on
1023:47 - what I'm going to do is show you kind of
1023:49 - how to um automate this process to pull
1023:51 - this data
1023:54 - um to create a data set right just
1023:56 - pulling this one time and putting into a
1023:58 - csb really doesn't do anything you can
1024:00 - just copy and paste that and save
1024:01 - yourself a lot of time um what I'm going
1024:03 - to show you is is um basically doing it
1024:07 - over over time and just having it
1024:09 - automated in the background that is what
1024:11 - I'm going to show you um I guess a
1024:13 - spoiler but what we need to do is we
1024:16 - need
1024:17 - to create uh create the CSV insert it
1024:22 - into the CSV and then create a process
1024:24 - to append more data into that CSV um I'm
1024:27 - doing a lot of talking let's do some
1024:29 - writing so what we need to do is we're
1024:32 - going to use um I should have done this
1024:34 - at the top maybe I'll go back and add
1024:36 - that later on we're going to do import
1024:38 - CSV now in a CSV what you want is you
1024:41 - want headers and then you want the data
1024:44 - right so for our headers and we're going
1024:46 - to call it header we're going to do um
1024:49 - we're going to do a bracket and let's
1024:51 - make the first one a title because
1024:54 - that's going to be uh we can call it
1024:56 - title you can call it product um
1024:59 - whatever you want I'm just going to call
1025:00 - it because I've been using title I'm
1025:01 - going to call it title um and then we'll
1025:03 - also
1025:04 - have
1025:06 - price now we need our data so I'm going
1025:08 - to say data is equal to now this is
1025:11 - important um right now how our data is
1025:15 - and I can do this right here we're going
1025:17 - type um title or no let's do type
1025:20 - price so these are strings and that's
1025:24 - important to know um again I don't want
1025:27 - to get too much into you know
1025:29 - dictionaries and arrays and lists and
1025:32 - and strings and all these things but
1025:33 - this is a string and you can't put that
1025:36 - right now it's not super usable what
1025:38 - we're going to do is make this a list um
1025:42 - and so I'm doing an Open Bracket and I'm
1025:44 - going to say our data is title
1025:48 - comma price oops price now oops if I do
1025:56 - type oops of data I'll just run that
1026:00 - it's a list now um and this is important
1026:03 - because you can run into a lot of issues
1026:05 - with the stuff it's really important to
1026:07 - remember what's what type
1026:11 - um how do I say this uh how your data is
1026:15 - is it a list is it an array is it a
1026:17 - dictionary um you know what is it these
1026:20 - things are important they do play a big
1026:22 - impact especially with this type of
1026:24 - stuff so just wanted to show you that
1026:25 - really quick but what we are now going
1026:28 - to do is create a CSV um you're going to
1026:32 - create an Excel I I call an Excel CSV
1026:35 - you know whatever you want to call it so
1026:37 - what we are going to do is we are going
1026:38 - to say with and we're going to say open
1026:42 - and now we're going to name our file you
1026:44 - can name this whatever you want I'm
1026:46 - going to call it
1026:49 - uh um
1026:52 - Amazon web
1026:55 - scraper data set that's real long
1026:58 - uh.
1026:58 - CSV and then we're going to do
1027:00 - underscore W and that means
1027:04 - right um oh whoops that's not right just
1027:08 - like I was wondering why that was uh in
1027:09 - Black uh so we're going to do W which
1027:11 - means right um and then we're going to
1027:14 - do new line and if you don't know what
1027:16 - new line is uh all that does is when we
1027:20 - insert the data it doesn't have a a
1027:23 - space in between each CSV and then we
1027:25 - are going to do encode
1027:28 - coding is equal to oops is equal to
1027:34 - utf8 and that is it and we'll just say
1027:37 - as uh let's do F so some of that stuff
1027:42 - you don't need to know some of it's
1027:43 - useful this W definitely need to know
1027:45 - this new line is is good to know and um
1027:48 - I'll take it I might take it out just to
1027:49 - show you what it actually does because
1027:51 - it's annoying if you don't have it I
1027:53 - promise um but you know that that new
1027:56 - Line's important this encoding you know
1027:58 - good to know I think that's by default
1028:00 - is is it's like that uh anyways what
1028:02 - we're going to do now is we're going to
1028:05 - uh it's something within the
1028:07 - CSV within the CSV um Library so we're
1028:11 - going to do something called CSV
1028:14 - writer and oops CSV do
1028:18 - writer and we're going to do open
1028:20 - parenthesis and that is that and we'll
1028:22 - just call that
1028:25 - writer and then we'll we'll do this is
1028:28 - where we need to actually create the
1028:30 - header so uh we're going to do writer is
1028:34 - dot sorry writer. WR row uh and this is
1028:40 - just for the
1028:41 - initial um the
1028:44 - initial import or or or um not import
1028:48 - the initial insertion of the data into
1028:50 - the CSV this is what's important the
1028:53 - next one that we're going to write is
1028:54 - for when we're actually appending the
1028:55 - data which is going to be a little bit
1028:56 - different but anyways we're going to do
1028:59 - right Row open parenthesis and this is
1029:01 - where that header is going to go so
1029:04 - we're going to that these headers are
1029:05 - going to be the title and the
1029:07 - price and then for our last one we're
1029:10 - going to actually write the data which
1029:12 - is this data right here and we're going
1029:14 - to say
1029:15 - writer. write
1029:18 - row and we're going to do data so this
1029:20 - one we are creating the
1029:23 - CSV and then we are inserting the header
1029:27 - and inserting the data so super easy um
1029:32 - yeah I think that's fairly
1029:33 - straightforward right now let's do this
1029:37 - and let's see what happens so I just ran
1029:40 - it um let's go over here in here
1029:44 - somewhere Amazon web scraper data set
1029:47 - let's open that
1029:49 - up and there we go oh
1029:53 - jeez this isn't good can't verify my uh
1029:59 - my subscription uh why does it say
1030:01 - $699 I'm going to go back and look but I
1030:04 - think I know the
1030:05 - issue um but this is exactly what we
1030:08 - want now of course we want more data and
1030:11 - maybe a little bit more useful data um
1030:14 - and I'll show you how to get that in
1030:14 - just a second but we just created that
1030:17 - out of thin air uh that was not I didn't
1030:19 - have that saved before so we have this
1030:21 - data set and the issue was is that I ran
1030:26 - this multiple times so now it's $6.99 if
1030:29 - I do it again it's 99 uh and if I did it
1030:31 - again it's it gets rid of everything so
1030:33 - I'm just going to run this again run
1030:35 - this
1030:38 - again now everything's back to normal
1030:41 - okay so now if we run this it's going to
1030:45 - overwrite this Amazon webscraper data
1030:47 - set. CSV and it will put the data in
1030:52 - properly so there we go oh jeez guys
1030:55 - this is embarrassing
1030:57 - I'm
1030:59 - embarrassed no I don't want this okay
1031:03 - perfect um guys I if you can't tell I'm
1031:07 - in need of some um I'm in need I'm in
1031:10 - need of some help here but I'm just
1031:14 - kidding I'm I'm doing fine uh I just I
1031:16 - don't know why that uh why I don't have
1031:19 - my uh subscription activated it's not
1031:21 - going to matter for this video I guess
1031:22 - but that's really random um so we got
1031:25 - what we need that's perfect
1031:28 - now what we want to do after this um I I
1031:31 - guess actually what is important is some
1031:33 - more useful
1031:34 - data something that I like to do a lot
1031:38 - when I do this type of this type of
1031:40 - stuff is I like to have some type of
1031:42 - date stamp um or some type of Tim stamp
1031:45 - to know when I collected this data it
1031:47 - usually comes in handy later on um I I
1031:50 - have never regretted putting it in there
1031:52 - I'll show you really quick how you can
1031:54 - do it uh you're going to do import
1031:55 - daytime
1031:58 - geez I hate having to format stuff like
1032:00 - that and what you can do is you can do
1032:02 - date let me get date time and you do
1032:06 - dat. today open parentheses and that is
1032:11 - going to give us this right here uh and
1032:13 - so we're just going to do um today
1032:16 - that's what we'll call it is equal to
1032:19 - this and we'll say print today and there
1032:24 - we go so that is today's date is the 20
1032:27 - of August in
1032:28 - 2021 so today is now um is now this so
1032:33 - actually I'm going to get rid of that
1032:36 - I'm going to put it back up here I'm
1032:38 - going to put it right there I'm going to
1032:40 - run it again let's add this right here
1032:44 - we'll do
1032:47 - um we'll do we'll call it
1032:50 - date and then we'll add
1032:53 - today and we'll just run this again
1032:57 - and what we can do just to check the
1033:01 - data without having to open up the data
1033:03 - every single time which is super
1033:05 - annoying is we're going to use pandas
1033:06 - again I should have imported this at the
1033:08 - top I'm just kind of um I'm not doing
1033:10 - this off the top of my head but uh I
1033:12 - didn't have it 100% planned so import
1033:15 - pandas and we're just going to say pd.
1033:17 - read CSV and then we'll read it in um
1033:22 - what you can do or what I often do is I
1033:25 - go to properties and I go right
1033:32 - here and we'll say boom boom back
1033:37 - slash this right here this I am doing
1033:40 - off the top of my head I don't do this
1033:41 - often I think I have this memorized by
1033:43 - now uh I I I hope and then we'll do
1033:47 - print oh no we don't have to do print
1033:49 - we'll just do this uh what do I do R
1033:52 - let's actually call this um data frame
1033:57 - and we'll do
1034:00 - print let's see what happens perfect
1034:03 - okay so what we have now is the new our
1034:07 - new header our new data that we added in
1034:09 - there so we have our title we have our
1034:11 - price and we have our date now again you
1034:15 - can customize this whatever you want to
1034:16 - add go back here um you know find what
1034:20 - you want you know do you want it to make
1034:22 - sure it has a men's option or different
1034:25 - colors or you want to pull in this
1034:27 - information whatever you want it it
1034:29 - really does not matter um just matters
1034:31 - that you know you get what you need for
1034:34 - whatever purpose whatever you're making
1034:36 - this for this is more of an introductory
1034:38 - video to how to scrape data from Amazon
1034:41 - um the next video will probably be a
1034:42 - little bit more difficult and in-depth
1034:44 - but this is kind of let's get you guys
1034:46 - started so um we now have this and this
1034:49 - is
1034:50 - beautiful now something that you want to
1034:56 - do when you're scraping data and you're
1034:58 - getting um I guess data over time and
1035:02 - that's kind of what we're doing is going
1035:04 - to be almost like um a price tracker
1035:07 - over time is you want to then append
1035:10 - data to this so we can't only create it
1035:15 - and that's what this does because if I
1035:16 - run this 100 times it'll only give me
1035:18 - this first row we need to now append
1035:20 - data to this so um
1035:23 - let's let's pull this down here
1035:27 - uh again I'm I'm not I haven't added a
1035:29 - bunch of notes I'm going to say now we
1035:31 - are appending data to the csb I haven't
1035:35 - added a ton of notes I'll try to go back
1035:37 - maybe afterwards and add some notes for
1035:38 - people who like to read
1035:40 - notes
1035:42 - um so what we are now going to do is
1035:44 - we're going to change this W to an A+
1035:47 - now this is going to be how we append
1035:50 - the data um and we no longer need the
1035:53 - header so we don't aren't going to do
1035:54 - the header anymore and there we go so
1035:57 - now instead of excuse me so now instead
1036:01 - of creating that header again creating
1036:03 - that first row of data again we are
1036:06 - ignoring the data and we're now going to
1036:08 - the next nearest free row and a pending
1036:12 - data which means to add on data to
1036:15 - that um and so if I run this which I'm
1036:17 - not going to right now I mean why not I
1036:21 - can I can run it um and then we can read
1036:23 - this in so now there there's our data
1036:25 - I'll run it a few more more
1036:28 - times I ran it like three or four more
1036:30 - times I I run that in and there we go
1036:32 - now it's all the exact same data super
1036:34 - um
1036:35 - boring but very very uh you know good to
1036:39 - have now we don't want to have to come
1036:41 - in here and run this every day let's say
1036:43 - we're going to do this daily um we don't
1036:46 - want to have to come and write run this
1036:48 - every single day right we want a way
1036:50 - where it does it while we sleep it does
1036:52 - it in the background of our laptop um
1036:55 - and is easy to do right I don't want to
1036:57 - come in here every single morning with a
1036:59 - set an alarm on my phone every single
1037:00 - morning come in here I want to automate
1037:03 - this so uh how are we going to do that
1037:08 - give me one second uh if you didn't know
1037:10 - I have three kids and one of them is
1037:11 - waking up I'll be right back all right I
1037:14 - think he is asleep um at least let's
1037:17 - hope he's asleep so now what we're going
1037:19 - to do is we're going
1037:21 - to put this
1037:24 - all into
1037:27 - uh this check uncore
1037:31 - price now you may never have used oh
1037:35 - geez what are these things called oh my
1037:37 - gosh
1037:39 - super used all the time you'll know what
1037:43 - I what it is
1037:45 - uh not a function I don't even remember
1037:48 - what it's called maybe this's a function
1037:51 - um I can't think I'm having like a
1037:53 - writer's block or whatever that is we're
1037:55 - going to put it all in here and then
1037:57 - we're going to be able to use this price
1037:58 - check later um because we want to be
1038:00 - able to automate this so let's go back
1038:02 - all the way up
1038:03 - here we are going to use this so let's
1038:07 - copy all of that
1038:10 - in and oh jeez I hate
1038:17 - this all right everything just like that
1038:20 - um so this pulls in our
1038:22 - data pulls in uh or or yeah pulls in all
1038:26 - of our data down to the title and the
1038:28 - price we want
1038:30 - to make it look
1038:34 - right so we're going to put it right
1038:37 - here so now we have it formatted
1038:41 - properly um we want to add our date
1038:47 - time do it just like that I don't know
1038:50 - if there's a better I'm sure there's a
1038:52 - better way to do
1038:53 - this um then we need
1038:57 - need this right
1039:03 - here and just like that like that so now
1039:06 - we have our header and our data and then
1039:08 - we want to pull this in right
1039:12 - here boom boom boom
1039:16 - okay so everything that we just wrote
1039:19 - out we are now putting into this check
1039:23 - price now you can call it whatever you
1039:25 - want doesn't matter but let's run that
1039:29 - see if we get any errors we don't so
1039:31 - this is now good to go
1039:34 - basically um what we are going to use
1039:37 - this for um and what this is going to do
1039:40 - is we are going to put this on a timer
1039:43 - um you know have you ever wanted to like
1039:45 - check something once a day once every 10
1039:49 - seconds once a minute whatever you want
1039:51 - and you don't want to have to actually
1039:53 - pull up your phone and look at it this
1039:55 - is how we are going to do that so we had
1039:57 - something called uh let's see time this
1040:01 - this Library time right here that's what
1040:02 - we're going to use right now so we're
1040:04 - going to say while oops while
1040:10 - true and go like this do a
1040:13 - colon we're going to say check unor
1040:17 - price that's what we just wrote out and
1040:19 - we're going to do time dos sleep now
1040:23 - this is completely up to you how how
1040:26 - much time you want to put in here for
1040:28 - the purposes of demonstration I'm going
1040:30 - to put 5 Seconds which means every 5
1040:33 - Seconds it is going to run through this
1040:36 - entire process and so let's run this
1040:39 - really quick and I'm going to run it for
1040:42 - let's say 30 seconds and then I'm going
1040:45 - to
1040:46 - pull this in right
1040:49 - here so we just looked at it earlier we
1040:52 - had four um well five rows of data right
1040:58 - what we are going to do is in just a
1041:00 - second I'm going to stop this you know
1041:01 - maybe after 30 seconds or so we're going
1041:03 - to see how much data is in
1041:05 - there uh and let's stop it right now
1041:07 - it's been going far enough um and La
1041:10 - let's run it so now we have five six
1041:13 - seven eight so I guess I ran for 20
1041:14 - seconds we
1041:16 - can that was for demonstration purposes
1041:19 - I've never do any some anything every
1041:21 - every 5 Seconds um unless it was like
1041:22 - Black Friday on
1041:24 - Amazon we can put this
1041:27 - as long or as short as you want you can
1041:30 - run it every second if you want um that
1041:32 - doesn't make sense to me but you can
1041:35 - what we can do is do a little bit of
1041:37 - math uh and I don't know this off the
1041:39 - top of my head so I'm going to uh do the
1041:42 - math with you live pretty exciting stuff
1041:45 - got the calculator out so there are 60
1041:49 - seconds in a minute and this goes by
1041:51 - seconds by the way and you could do you
1041:54 - know you can do some um some string up
1041:59 - here of calculating this but I'm just
1042:01 - going to put in the number because it's
1042:03 - easier uh maybe not easier I'm just
1042:05 - going to do it there's 60 seconds um in
1042:08 - a minute there are 60 seconds or 60
1042:11 - minutes in an hour so that's one hour uh
1042:15 - and we can do 24 hours in a day so
1042:17 - that's
1042:20 - 86,000 400 I believe did I read that
1042:23 - right oops did I read that right
1042:26 - right yes so this now if I ran this and
1042:31 - I'm going to this is going to check the
1042:34 - price every single day and this is the
1042:36 - entire point of this um of of
1042:40 - this project not the entire point but
1042:43 - this is a big part of this project is we
1042:45 - want to create our own data set now
1042:47 - something that I personally really love
1042:50 - is a data set that
1042:52 - has you know that I can do some type of
1042:55 - time ser series with now this is not
1042:58 - exciting it's probably not super
1042:59 - exciting for this right but you get the
1043:04 - idea that if this price were to change
1043:08 - we would then see that reflected in the
1043:10 - data at some
1043:11 - point you can do this on any item you
1043:15 - could ever imagine on Amazon it's the
1043:17 - exact same process and some items change
1043:20 - often this t-shirt will most likely
1043:23 - never change um and so you know again
1043:25 - this is for for demonstration purposes
1043:27 - the code itself will be nice to put in a
1043:30 - project although the data set that you
1043:31 - get from this probably won't be the best
1043:34 - I would
1043:35 - imagine but notice that this is running
1043:38 - um I can then minimize this and this can
1043:40 - run on my computer basically as long as
1043:44 - my computer uh is is
1043:47 - working um one thing I will say before I
1043:50 - go on to some more stuff one thing that
1043:53 - I will say is that I personally when I
1043:56 - did this for a when I um created this I
1044:01 - did something similar and I put this in
1044:03 - Visual Studio code um and I didn't put
1044:06 - it in Jupiter notebooks that's a
1044:09 - personal preference I would look into
1044:11 - that if that is something that you want
1044:14 - um I think visual studio code is a
1044:15 - little bit easier for automating these
1044:17 - types of tasks um but for illustrative
1044:20 - purposes and for demonstration purposes
1044:22 - you cannot beat jupyter notebooks that's
1044:24 - why I did it
1044:26 - so with all that being said that is
1044:28 - basically the end of the project now um
1044:30 - I'm not going to stop this and read it
1044:32 - again but you get the point um we now
1044:36 - have um a data
1044:39 - set that oh jeez all this again that now
1044:42 - has um data I'm getting out of here oh
1044:45 - geez it's hounding me let me get out of
1044:47 - here oh
1044:49 - no all this is embarrassing guys I'm
1044:52 - embarrassed we now have a CSV file with
1044:55 - data in now you run this in the
1044:57 - background of your computer you can do
1044:59 - that I have done it I've ran it for
1045:01 - weeks I have ran it for months um if you
1045:04 - restart your computer just come back in
1045:06 - here and restart running this process um
1045:09 - it's the same for any automated process
1045:11 - unless you start using some online um
1045:14 - automation service which will run it
1045:16 - regardless of your computer they do it
1045:18 - you know either in the cloud or on some
1045:21 - um
1045:22 - server so you know that this is a really
1045:25 - good option again if if you restart your
1045:27 - computer or something happens and you
1045:28 - lose connection just come in here run
1045:30 - this through this script again um except
1045:32 - for the one where it deletes all your
1045:35 - data don't run that one again only run
1045:37 - that one time um and then you will in
1045:42 - fact what I would do is then um I would
1045:45 - just comment this out right I'd come in
1045:48 - here and I would just comment this
1045:50 - out so that anytime I come back in here
1045:53 - I would never accidentally delete all my
1045:54 - data
1045:56 - but that is what this project does now
1045:58 - something really interesting something
1046:00 - that I have done in the past that I
1046:02 - thought was really cool really useful I
1046:06 - actually did it for um I actually did it
1046:09 - for some
1046:10 - watches that I was watching especially
1046:13 - on Black Friday it's when I used it I
1046:16 - was interested in a price drop or
1046:19 - specific price change and what I did was
1046:24 - is I said and I don't
1046:27 - know so what I basically did was is I
1046:31 - said if the price is lower than let's
1046:36 - say let's say we wanted to drop below
1046:39 - $14 it would then send an email um and
1046:44 - I'm going to show you the script that I
1046:45 - used it still works um and if this is
1046:49 - something that you are interested in
1046:50 - this could be a completely different
1046:52 - project I just think it's interesting
1046:54 - and I wanted to show it to you although
1046:56 - I wouldn't say this this is part of the
1046:58 - um final project let me just come in
1047:02 - here and we are going to create this
1047:07 - super simple um not super simple we're
1047:10 - sending a mail we're connecting to a
1047:12 - server we we're using Gmail we're
1047:15 - logging into our account that is my
1047:17 - email you will not get my password we're
1047:19 - creting the subject the body um we we
1047:22 - configure or or just kind of create this
1047:24 - message and then we send a mail so then
1047:27 - I have this Define uh or this send mail
1047:32 - I am blanking on what this is called I'm
1047:33 - going to call it a function but that's
1047:34 - probably not right so if that price
1047:37 - drops below a certain point it'll send
1047:39 - me an email um I have used this and I
1047:42 - used it and was able to buy a watch that
1047:45 - was like you know let's say 140 bucks
1047:47 - for like 90 bucks um on Black Friday
1047:49 - sale I was really really happy about
1047:50 - that so this can be used in that way as
1047:53 - well um not something you to write into
1047:56 - your project just something I'm going to
1047:57 - include down here if you want to try it
1048:01 - I think it's super interesting something
1048:02 - really
1048:03 - fun um really fun to mess around with I
1048:06 - enjoyed this so with that being said uh
1048:11 - this is this is the project um I in the
1048:15 - next one and I promise you this one is
1048:17 - probably going to get a lot
1048:19 - more difficult if you thought this one
1048:21 - was easy which I hope maybe I hope you
1048:23 - do then that means you're you know
1048:24 - pretty good at python you know in the
1048:27 - next the next um web scraping project
1048:30 - and I hope to do many of these I might
1048:32 - do um even all the ones that I put in
1048:34 - that poll but I started with the one
1048:35 - that was the most
1048:37 - popular um you know if you were able to
1048:40 - get through this I think that that is
1048:42 - fantastic I think this is a solid
1048:44 - project to create um a data set and so
1048:48 - use this how you will you can copy my
1048:51 - code exactly I don't have a problem with
1048:53 - that again I don't think this is
1048:55 - beginner there are some a little bit
1048:56 - more advanced things and I not even
1048:59 - Advanced just like intermediate level
1049:01 - things um that you kind of learn as you
1049:03 - get into it and so um I hope that this
1049:05 - was instructional I hope I explained it
1049:08 - you know well um and I hope that this is
1049:11 - useful again you know when you actually
1049:13 - use this you'll have 22 23 24 25 you
1049:19 - know you'll see a price change a price
1049:22 - change a price change a price change go
1049:25 - use a a product or go to something that
1049:27 - you were interested in or that you know
1049:29 - fluctuates often um and there are plenty
1049:32 - of those on Amazon I promise you there
1049:34 - some that literally change almost every
1049:36 - other day like down a dollar up a dollar
1049:38 - um and then Black Friday just goes crazy
1049:42 - um with these price changes so use this
1049:44 - as you will I hope that this was
1049:46 - instructional I hope that it's useful I
1049:48 - think I said that before is you know I'm
1049:50 - doing this because I think it's really
1049:52 - interesting it's really useful um um
1049:56 - this to me again was a good
1049:58 - introduction a really good introduction
1050:01 - to web scraping because in this next one
1050:04 - it gets quite a bit more difficult um I
1050:07 - would say on a scale of like difficulty
1050:09 - this is like maybe a four and it'll
1050:12 - probably jump up to like a seven on this
1050:13 - next one um just just much
1050:16 - more um technical or or coding heavy so
1050:22 - um you know look forward to that if
1050:23 - that's something that you look forward
1050:24 - to with that being said I'm going to go
1050:27 - back over here for my send off with that
1050:29 - being said I hope this was helpful I
1050:33 - hope that you learned something um don't
1050:36 - get mad at me if it was too easy don't
1050:37 - get mad if it was me if it was too hard
1050:39 - uh I'm doing my best over here so I
1050:41 - appreciate your patience thank you so
1050:43 - much for watching I really appreciate it
1050:46 - if you like this video be sure to like
1050:48 - And subscribe below and I will see you
1050:50 - in the next
1050:52 - [Music]
1050:54 - video
1050:57 - [Music]
1051:03 - what's going on everybody welcome back
1051:04 - to another video today we're going to be
1051:06 - creating a script to automatically take
1051:08 - data from a crypto
1051:11 - [Music]
1051:14 - API now this project stems from an
1051:17 - earlier video that I did where I walked
1051:18 - through what an API was and how you can
1051:20 - use it and in that video I showed you
1051:22 - how to use coin market caps API so you
1051:24 - could start pulling in their crypto data
1051:26 - and in this video we're going to take it
1051:27 - one step further and automate that
1051:28 - process now we're going to do a little
1051:29 - bit of transformation with the data I'm
1051:31 - going to show you some cool stuff of how
1051:33 - you can use it and maybe we'll do a
1051:34 - little bit of visualization at the end
1051:36 - but that is not the main point of this
1051:38 - video it's mostly around the automation
1051:40 - piece and a little bit of the data
1051:42 - cleaning piece as well now fair warning
1051:44 - this is not a beginners level project
1051:45 - it's probably more like an intermediate
1051:47 - project and it's not even a complete
1051:49 - project per se because we're not doing
1051:52 - all the data cleaning we're not doing
1051:53 - all the visualizations but but if you
1051:55 - follow along we're going to cover a lot
1051:57 - of different things and you're really
1051:58 - going to set yourself up to be able to
1052:00 - do just about anything you want with
1052:02 - this data or different apis that you
1052:04 - pull from so with that being said let's
1052:05 - jump onto my screen and get started with
1052:06 - the project all right so this is where
1052:08 - we stopped in our last video so if you
1052:10 - haven't watched it now is the time to go
1052:12 - back and do that I'll have a link in the
1052:14 - description also all the code that we're
1052:16 - going to be looking at today and working
1052:18 - through is going to be in a GitHub repo
1052:21 - below so you can go and get all the code
1052:23 - and have it completely finished and just
1052:24 - follow along or you can code it from
1052:27 - scratch along with me I do recommend
1052:29 - writing it from scratch if you can
1052:31 - because I think you'll learn more and
1052:32 - you'll make mistakes and you'll learn
1052:33 - from that as we go through it but it is
1052:36 - up to you so let's get started and as
1052:39 - you can see uh we have the script right
1052:41 - here and I'm starting basically from
1052:43 - scratch I have a completed one up here
1052:45 - I'm actually going to get rid of those
1052:47 - um and what we're going to do is we're
1052:49 - going to start from exactly where we
1052:51 - started in our last one I'm going to run
1052:52 - the script um this is going to p from
1052:55 - our
1052:56 - API and we're going to look at the
1052:59 - dictionary set our option and do our
1053:02 - Json normaliz so this is where we
1053:04 - literally left off from the from the
1053:06 - last video so we have all of this
1053:09 - data
1053:11 - and what we want to do with it is we
1053:14 - want to kind of automate that process
1053:16 - right because we don't want to have to
1053:17 - come in here run this and you know put
1053:20 - into a CSV manually or something like
1053:23 - that we want to automate this data
1053:25 - collection process so that we can just
1053:27 - have the data ready for us to use um and
1053:29 - it all be ready to go so we're going to
1053:32 - be using this script um but you know we
1053:35 - we might want to add a little bit more
1053:37 - to it before we do that uh the first
1053:40 - thing that I want to do before um before
1053:44 - anything is something that I like to do
1053:46 - when I'm creating these automation
1053:47 - scripts as I I like to add a Tim stamp
1053:51 - uh and the reason for that is because I
1053:53 - want to know when I ran or when each of
1053:56 - those um Loops you can say runs through
1053:59 - an and does those automated runs right
1054:01 - so if I do it every day I want to know
1054:03 - what time of day I ran it making sure
1054:06 - each run ran
1054:07 - successfully and so all I'm going to do
1054:09 - is I'm going to add a new column at the
1054:11 - end and just call it timestamp so let's
1054:14 - go right up here and we're going to say
1054:18 - PD Dot and there's something called two
1054:20 - date time so we're going to do
1054:23 - 2core date
1054:26 - time and then we're going to do now and
1054:31 - what this is literally going to do is
1054:32 - take the the date the the Tim stamp of
1054:36 - right now when it's running and it's
1054:39 - going to show that now we need to of
1054:41 - course add a new uh a new column for
1054:44 - that so all we're going to do is we're
1054:45 - going to say data frame whoops we're say
1054:49 - data frame and let me see real quick we
1054:52 - just have the
1054:53 - data
1054:55 - we need to add we need to create this
1054:57 - data frame right here so data frame
1054:58 - equals and then this Json normalized and
1055:01 - we're going to say data frame and then
1055:02 - we're going to do a bracket and we're
1055:04 - going to say timestamp and we'll do well
1055:07 - are all these lowercase we're going to
1055:10 - keep with the the lower case we're going
1055:11 - to say time
1055:13 - stamp and we do that bracket and we'll
1055:15 - say equals so what this going to do is g
1055:17 - to first off it's going to create this
1055:19 - dat or or assign this DF as our data
1055:21 - frame and then we're going to add this
1055:24 - time stamp and add this new column and
1055:26 - so let's run this really
1055:29 - quickly and let's go all the way to the
1055:32 - right and this is our timestamp and this
1055:35 - is the time uh that it is right now this
1055:37 - is the day that I'm running it this is
1055:39 - the time that I'm running it and so this
1055:41 - is working properly now if you look
1055:43 - really quickly there is a last updated
1055:46 - in here and this is very close to this
1055:50 - timestamp but it is not the same thing
1055:52 - um but if you looked through this data
1055:54 - and you really into it a little bit
1055:56 - there's this last update is coming from
1055:58 - coin market caps API and this is when
1056:01 - the actual um cryptocurrency was updated
1056:05 - in their system and so it is going to be
1056:07 - really close but it's not going to be
1056:08 - exact and so I don't like to rely on
1056:12 - built-in ones that you know are coming
1056:13 - from an API or something I want to make
1056:15 - one myself that's running on the system
1056:16 - where I'm creating the automated process
1056:18 - just like just something I do um so now
1056:23 - we have this original data frame created
1056:26 - right we H we now have what we need but
1056:30 - what we want to do is to keep adding
1056:32 - data to this um we don't want it to just
1056:35 - go to um you know create these 5,000
1056:38 - rows we want it to create 5,000 5,000
1056:41 - 5,000 over time whether it's a day an
1056:44 - hour a week um whatever you want to run
1056:46 - it so um what I'm actually going to do
1056:49 - is I'm going to limit this a lot I just
1056:51 - want to look at the top let's say 15 so
1056:54 - we're going to do that that we're going
1056:55 - to run through all this again so now I
1056:57 - just have top 15 it's going to be um
1057:01 - easier to to see and it won't take as
1057:03 - much time to run our scripts again you
1057:05 - can keep as many as you'd like if you
1057:07 - want a 100 200 all 5,000 you do whatever
1057:10 - you'd like but what we are now going to
1057:13 - do is we're going to create a function
1057:16 - using this original script so we again
1057:18 - we have this data frame and we are going
1057:21 - to create an automated process that is
1057:24 - going to autom a script to automate this
1057:26 - that is going to append data to this
1057:28 - data frame right here so that's kind of
1057:30 - you know the big thing that we're trying
1057:31 - to accomplish in this project um so
1057:35 - let's go up here and we're going to
1057:37 - we'll just take from here all the way to
1057:41 - here we just going to copy this and
1057:45 - going to paste it down here now what we
1057:48 - need to do is we need to create a
1057:50 - function so we're going to say
1057:52 - DF and we're going to call this the a
1057:54 - apore Runner because this is going to
1057:57 - run our API um whenever we need it to
1058:01 - run now when you are
1058:03 - formatting um something for a function
1058:06 - it it needs to be formatted properly and
1058:09 - so what we need to do is need to go over
1058:10 - here hit tap we're going to do this all
1058:13 - the way down I'm just going to skip
1058:14 - forward when it's all the way done all
1058:15 - right so now we have this URL and what
1058:18 - we want to add because this is again
1058:20 - this is going to run through kind of
1058:21 - this this automated process we're going
1058:23 - to run this um this function there what
1058:26 - we want is to also add this right here
1058:28 - so we need to take this and we're gonna
1058:31 - need to add
1058:32 - this we'll just put it down
1058:36 - here
1058:37 - [Music]
1058:39 - okay and let's do that so what we have
1058:43 - so far is really close to what we want
1058:46 - our function to be um we have this
1058:50 - function that we're going to be running
1058:52 - through it's going to call this function
1058:54 - it's going to call the the API we're
1058:56 - going to use our key we are going to um
1059:00 - you know test it load it format It And
1059:03 - format it right here then we're going to
1059:04 - add this timestamp and then we will have
1059:06 - this now right now it's just C it's just
1059:09 - going to print this data frame basically
1059:11 - but that's not what we want right now
1059:13 - what we want is to actually append this
1059:16 - data so when it gets to here when it
1059:18 - gets to this data that's going to be
1059:20 - right um right here what we want to do
1059:23 - now since we already have the original
1059:25 - data frame set up up top is we now want
1059:27 - to say that this is going to be data
1059:29 - frame two and we're going to say it's
1059:32 - going to append it to data Frame 2 and
1059:34 - so the original data frame we're going
1059:36 - to say data frame
1059:37 - 2. append and we're going to say
1059:41 - df2 all this does is this says this new
1059:46 - data that's GNA be coming in every time
1059:48 - let's say it's a loop and it's just
1059:49 - looping through pulling the data pulling
1059:50 - the data pulling the data we're going to
1059:53 - create this data frame we're going to
1059:55 - add add this time stamp like like we
1059:57 - want and then we're going to append that
1059:59 - to this original data frame so as of
1060:03 - right now this looks good I will we'll
1060:05 - run it in a second I'll create it so I
1060:09 - just created
1060:10 - it so now we need to actually create our
1060:12 - script to automatically run this so
1060:15 - we're going to do something called
1060:17 - import OS and let me tell you there's a
1060:20 - thousand different ways to do this and
1060:21 - there are better ways to do this but
1060:24 - they are much more complex much more
1060:26 - complicated and some cost money in order
1060:28 - to do it I'm going to show you different
1060:31 - options on how to do this in future
1060:33 - videos on how to automate your Python
1060:35 - scripts but this one to me is one I've
1060:38 - used a lot um many many times for
1060:40 - different projects and it works so I'm
1060:43 - not going to show you the most
1060:44 - complicated thing in the world I'm going
1060:45 - to show you something that I've just
1060:46 - used a lot and so we're going to say
1060:49 - from time import time from time import
1060:54 - sleep that one's
1060:56 - important and now we're going to create
1060:58 - our Loop so what these um what the time
1061:02 - and the sleep and the OS uh your
1061:05 - operating system what what these are
1061:06 - going to do is they're going to give us
1061:08 - the ability to track the time and we're
1061:12 - going to be able to run through and call
1061:14 - this function in certain intervals that
1061:17 - we want so let's create our for loop
1061:20 - we're going to say 4 I in now
1061:24 - you can create this specific part in
1061:28 - different ways but what I'm going to do
1061:30 - is I'm going to say range of one uh
1061:32 - let's say
1061:33 - 333 and I say 333 and if you remember
1061:37 - from the first video on the API you only
1061:39 - have 333 runs per day and so if I ran
1061:45 - ran this 333 times today that would be
1061:49 - our Max and so that's why I'm using that
1061:51 - 333 just for reference so now we're
1061:53 - going to
1061:54 - do
1061:56 - API Runner so in this loop we're going
1061:59 - to call this function up here and then
1062:01 - I'm going to say I want to prove or or
1062:04 - show have an output to show that this is
1062:06 - running through successfully so I'm just
1062:09 - going to and you can write anything here
1062:10 - we're just going to say API Runner
1062:16 - completed uh completed
1062:19 - successfully successfully how do you
1062:21 - spell that successfully that doesn't
1062:25 - look
1062:26 - right I'm just going to say completed
1062:28 - all right forget that I don't remember
1062:30 - how to say uh Spell successfully if
1062:32 - that's if it spelled it right you guys
1062:34 - spell it that way but I can't remember
1062:36 - now we're going to use this sleep right
1062:38 - here now this counts it in seconds you
1062:41 - can change it to minutes hours whatever
1062:43 - we're GNA have it run every minute which
1062:46 - is every 60 seconds and so this is going
1062:49 - to I'm just going to say it's going to
1062:51 - sleep for one
1062:53 - minute and then we're g to say
1062:57 - exit so all this is going to do and this
1063:01 - is again fairly simple it's just a
1063:04 - simple for Loop and what it says is it's
1063:07 - going to call this API it's going to
1063:09 - tell us that it ran successfully and
1063:11 - then it's going to wait for 60 seconds
1063:13 - and it's going to run again that's it so
1063:17 - let's run this and see what happens see
1063:18 - if what we did works so rant the first
1063:21 - time now I'm not gonna I'm not going to
1063:25 - bore you because I'm doing this live
1063:26 - exactly what we're about to get is what
1063:28 - we're going to use I didn't run it
1063:29 - overnight or or for a week so that we
1063:32 - have a bunch of data I'm what you were
1063:34 - going to work with I'm going to work
1063:35 - with as well so I'm going to wait a few
1063:37 - minutes I'm going to let this run I want
1063:39 - you to do the same thing I'm going to
1063:41 - let this run for maybe like five minutes
1063:43 - or so and we'll work with what we have
1063:46 - and we'll keep going with the project
1063:47 - because again we're not the point of
1063:50 - this project is not to create the final
1063:52 - product or creating all the visuals
1063:54 - ations that um will most likely be in
1063:56 - another video where we're taking all
1063:58 - this data and doing all these things
1063:59 - with it the point of this video is to
1064:00 - automate it clean it up to where we have
1064:03 - it to where we can really use it and
1064:05 - then I'm going to let you guys loose and
1064:06 - you guys can do whatever you want with
1064:08 - it and I think it's really setting you
1064:10 - up for a lot of successful projects in
1064:13 - the future that you can do all by
1064:14 - yourself without me having to walk you
1064:16 - through it so as you can see it's
1064:17 - already ran through twice I'm going to
1064:19 - pause for a second I'm going to let that
1064:21 - run through uh just a few more times and
1064:24 - then we will continue with the project
1064:26 - all right we are back and of course it's
1064:28 - only ran what five times um it has not
1064:31 - reached the limit of 333 so we are
1064:33 - perfectly fine what I'm going to do is
1064:35 - I'm just going to stop this by clicking
1064:36 - this uh square up here and it's going to
1064:39 - give us some error and then we're going
1064:40 - to check it and we will see what we have
1064:45 - I don't know why it's taking so long if
1064:46 - I'm being honest all right so I
1064:47 - interrupted it and let's run this let's
1064:50 - see what we got I hope we have more than
1064:51 - 15 because if not I'm going be very
1064:53 - upset
1064:57 - okay so okay
1065:00 - well uh I made a mistake um I was
1065:03 - supposed to put data frame right here
1065:06 - and I had data frame too so um take
1065:11 - change your script do not do what I just
1065:14 - did we're supposed to be append it's
1065:16 - supposed to be data frame append and
1065:18 - we're supposed to be appending the
1065:19 - original D this data frame two to the
1065:23 - original data frame so so um I messed up
1065:26 - on that one let's rerun that let's rerun
1065:30 - that um let's
1065:33 - see local variable DF reference before
1065:36 - assignment okay this is perfect because
1065:38 - this happened to me before um we're
1065:41 - running into all sorts of good stuff I
1065:42 - like to keep this stuff in my videos I
1065:44 - laugh because I hate running into
1065:46 - mistakes but everybody says they they're
1065:48 - happy that I do this um so I'm going to
1065:51 - keep doing it I'm not going to cut this
1065:52 - out I promise um
1065:54 - but what we actually need to do is we
1065:56 - need to go back up to this function
1065:58 - because what happened was is we called
1066:00 - this data
1066:01 - frame and now it's it's because it's in
1066:04 - a function it's in what they would call
1066:06 - a local variable what we need to do is
1066:09 - we now need to state that this is a
1066:13 - global um it's just called a global
1066:16 - that's all it is um and so what we're
1066:18 - going to do is we're going do tab we're
1066:19 - say Global say
1066:22 - DF and what this should do is this
1066:26 - should declare it as a global variable
1066:28 - and it should let this run properly
1066:31 - let's hope it
1066:32 - does all right it's
1066:34 - running um again I run into mistakes I
1066:38 - let me tell you something while we're
1066:40 - here for just a second this project I
1066:43 - ran into probably a hundred mistakes or
1066:46 - a hundred errors issues that I had to
1066:48 - research for hours um and hours I'm
1066:51 - legitimately on stack Overflow and just
1066:53 - Googling and F figuring these things out
1066:55 - there were a lot of new things that I
1066:56 - had never run into before um just on
1066:59 - this project and so um everything that
1067:01 - you're seeing is from after I went
1067:03 - through all of those things or after I
1067:06 - fixed all of those things and had to
1067:07 - really work through them it was it was
1067:09 - very um it was frustrating at times I
1067:11 - just I couldn't figure it out and so
1067:13 - what you're looking at is kind of the
1067:14 - polished version of that now that I have
1067:16 - everything laid out because I I can't
1067:19 - spend 10 hours on a project nobody would
1067:21 - watch it so just know that if you are
1067:24 - running into some of these mistakes or
1067:25 - you run into mistakes later on when
1067:27 - you're expanding this project that's
1067:29 - completely normal so what we're going to
1067:31 - do is we're going to let this run for a
1067:32 - little bit and then after maybe three or
1067:35 - four minutes we'll come back and we'll
1067:37 - keep going with the project all right so
1067:40 - let's run this and check and see if we
1067:43 - have uh the data that we're looking for
1067:46 - uh and it looks like we do let's go
1067:48 - actually back up here really
1067:52 - quick um we want to set this to display
1067:55 - Max rows because I want to be able to
1067:58 - see all the rows and not just um a few
1068:00 - of them so and that just instead of it
1068:04 - gives us this scrolling instead of that
1068:06 - dot dot dot that shows us just a few so
1068:09 - there's our original 15 and then we have
1068:12 - the next um the next Loop and then we
1068:15 - have the next Loop and let me scroll
1068:17 - over to the timestamps and I'll show you
1068:19 - what I mean um so was ran on
1068:22 - 52651 let's go down
1068:26 - 526 at 150
1068:29 - 2905 I say 1501 2905 and then the next
1068:34 - one you can see was ran at
1068:37 - 36 31 these are all the ones one minute
1068:40 - after each other my original one was
1068:42 - from
1068:43 - earlier 32 33 yeah so you can see 32 31
1068:48 - 3030 or um 3029 and this one was about
1068:51 - 15 minutes ago when I first
1068:54 - um ran the original data frame right all
1068:57 - right guys this is Alex from the future
1068:59 - I've actually completed this entire
1069:01 - project uh in the video and you're about
1069:02 - to see all that after this but I wanted
1069:05 - to show you one more thing that you can
1069:06 - do in this function up here that I
1069:08 - didn't show you uh originally that I'm
1069:11 - coming back to show you and that's how
1069:12 - to actually put it into a CSV now all
1069:16 - we've done in this one is we we've kept
1069:18 - it all enclosed in a data frame and
1069:21 - that's it and that may be great but a
1069:24 - lot of you guys are going to want to
1069:25 - automate this and put it into a CSV and
1069:28 - I want to show you how to do that all
1069:30 - right so what I'm going to show you
1069:31 - really quickly is right here in this uh
1069:33 - in this folder right here I have all
1069:35 - these different API 3es and fours these
1069:37 - were tests that I did before but what
1069:39 - you can do is instead of just putting it
1069:41 - into a data frame you can actually
1069:44 - append the data to a CSV and have that
1069:46 - CSV sitting out there for you instead of
1069:49 - just keeping it all in the data frame
1069:51 - and there's a lot of different uses for
1069:53 - that you may want to have that file
1069:56 - separately from here just in case
1069:58 - something times out or something breaks
1070:00 - which is a legitimate concern or your
1070:02 - computer shuts off or or something like
1070:04 - that that is a legitimate concern so
1070:06 - what we're going to do is we're going to
1070:08 - say um if not and this is basically an
1070:11 - if statement we're going to say
1070:14 - os.
1070:15 - path dot is file so what this is going
1070:19 - to do is check if there's already a file
1070:22 - under this name and we're going to do r
1070:25 - dot or or R um if you have never done um
1070:30 - if you've never done CSV stuff before
1070:33 - it's really important that you put that
1070:35 - you you're going to get an error every
1070:37 - time so we're going to take this right
1070:39 - here and we're going to copy that and
1070:41 - we're going to put that right here and
1070:43 - then we're also going to do a slash and
1070:47 - then we're going to name it basically um
1070:49 - let's name this API because I don't
1070:51 - think I have that one in there I think I
1070:52 - deleted it yeah so I don't have API so
1070:54 - I'm just going to keep it api.
1070:56 - CSV and then I'm going to close that
1070:59 - parentheses and then we're going to add
1071:01 - a colon right here and we're going to
1071:03 - say if that does not exist we are going
1071:07 - to write this to it and create it so
1071:10 - we're going to say data frames that's
1071:12 - this data frame right
1071:14 - here data frame dot we going to say 2or
1071:19 - CSV and we're going to do that R and
1071:23 - then we're going to copy this so let's
1071:27 - just let's just replace it like
1071:31 - that and then we're going to say
1071:34 - comma
1071:36 - header oops header is equal
1071:41 - to column uncore names so what this is
1071:46 - going to do is if we run through this
1071:48 - and what we would have to do is um I'll
1071:52 - talk about this in a little bit we'll
1071:53 - have to change this up a little bit but
1071:55 - what this is going to do is going to
1071:57 - check to see if this file right here
1072:00 - exists if it does not it is going to
1072:03 - create it and create the column headers
1072:06 - based off the this data frame that is
1072:08 - what that does now what we want to do is
1072:11 - say else and this next part that we're
1072:14 - going to write is saying if there's
1072:16 - already the API file there we want to
1072:19 - append the data we don't want to
1072:21 - overwrite it or anything like that we
1072:22 - want to append the the data so we're
1072:23 - going to say we're basically going to
1072:25 - copy
1072:27 - this maybe not the whole thing but I
1072:29 - already did it um so we're going to copy
1072:31 - that and we're going to say mode oops
1072:35 - mode equals
1072:38 - a and a stands for append and then we're
1072:41 - going to say header oops keep messing up
1072:44 - header and we're say false oops we're
1072:48 - going to say false which means when it
1072:49 - depends the data it's not going to use
1072:51 - those the column headers every time
1072:53 - which you don't want because every time
1072:55 - you append it if you added the headers
1072:58 - every 15 rows every 15 rows you're going
1073:00 - to have another headers that you're
1073:02 - going to have to like go out into that
1073:04 - CSV and filter out and and get rid of
1073:06 - them so we're going to say header equals
1073:08 - false now just a second ago I said you
1073:10 - would need to mess with this just a
1073:12 - little bit and you would because every
1073:14 - time um you'd be putting in this data
1073:17 - frame which it's already appending it to
1073:19 - this data frame so every time you'd be
1073:21 - creating a lot of duplicates if if you
1073:23 - kept it exactly as is what you were
1073:25 - going to need to do is basically take it
1073:27 - back to its to its um bones um so you
1073:30 - need
1073:31 - to kind of keep it like this so what you
1073:35 - need to do is just now run this and it
1073:37 - would work perfectly uh let's test it
1073:40 - really quick um to see if it works uh
1073:43 - because I'm I'm promising you something
1073:44 - I want to make sure it actually works
1073:46 - let's run it this time okay so it just
1073:50 - ran for the first time so it should have
1073:52 - created this file
1073:53 - let's go see if that works properly so
1073:56 - now it just created that file and now
1073:58 - we're going to see if it actually
1074:01 - appends the data so let's wait just one
1074:03 - time um and then I'm going to stop it
1074:05 - I'm going to see if it works again I'm
1074:07 - just verifying to make sure that what
1074:09 - I'm telling you is actually working uh
1074:12 - because if it doesn't I would feel
1074:13 - terrible we don't want that and while
1074:16 - that's running actually I'm going to add
1074:19 - this because now I want to show you how
1074:21 - to call it um super easy we're just
1074:24 - going to do
1074:25 - pd.
1074:27 - reor CSV we do that we're going to call
1074:34 - this just like
1074:36 - that and then we're going to say data
1074:39 - frame and we're just going to do
1074:42 - 72 something random because I've already
1074:45 - done this whole project I don't want to
1074:46 - mess anything up so we're going say data
1074:48 - frame 72 so now let's stop this
1074:53 - um and what we're going to do is once
1074:56 - that stops we're going to run this and
1074:58 - see if it actually um worked and see
1075:01 - make sure that this actually pulled the
1075:03 - data in all right so we interrupted it
1075:05 - the file is ready to be read in so let's
1075:08 - read it in there's our file um let's see
1075:13 - what did I mess up or did I mess
1075:15 - anything
1075:16 - up ah I didn't mess anything up this is
1075:19 - the index for this file and we already
1075:22 - had this in here we'd probably be able
1075:23 - to get rid of it but if you see we have
1075:25 - zero 1 two 3 four five six seven eight n
1075:28 - 14 then we have zero 1 2 3 and if we
1075:31 - look at the time stamp it should be one
1075:33 - minute apart so it's 11
1075:35 - 1945 it said 12045 so this worked
1075:40 - exactly as planned um again you have two
1075:42 - different options you can just keep it
1075:44 - how it was before and I'll leave both of
1075:46 - those options you know in the in the
1075:48 - script so that you can kind of choose
1075:50 - which one you want but um that's how you
1075:53 - do that so then right here you're
1075:55 - appending it to a CSV file and then if
1075:57 - you just keep this and you get rid of
1075:59 - all this you're just appending it to a
1076:00 - data frame now please continue with the
1076:03 - rest of the video that I already have
1076:05 - done um but again I'm future Alex so uh
1076:08 - please continue with the rest of the
1076:09 - video okay so we have all this data we
1076:13 - have we have so many columns we can do
1076:17 - now you know if you want to completely
1076:19 - just go and do your own thing you
1076:21 - absolutely can do that I'm going to mess
1076:23 - around with a few things um kind of show
1076:26 - you something that I did that I thought
1076:29 - was really interesting um in order to
1076:32 - visualize this data a little bit and
1076:33 - transform it a little bit to make it
1076:35 - more
1076:36 - usable um but we're not doing a full
1076:38 - data cleaning that's not what this
1076:39 - project is I'm not doing a full data
1076:41 - cleaning of this data that would be a ma
1076:44 - a very large undertaking because
1076:45 - honestly this needs a lot of work one
1076:47 - thing that I do want to clean up really
1076:49 - quick uh is is this right here I this
1076:54 - the math will be fine it's just the way
1076:56 - that it's shown on here is in state the
1076:58 - scientific notation and I don't like it
1077:00 - so what I'm going to do really
1077:02 - quickly I is just um get rid of that so
1077:06 - we're going
1077:07 - to we're GNA say
1077:09 - pd. set and we do underscore option and
1077:15 - this is going to be do parentheses I'm
1077:18 - going to say display this is just this
1077:21 - how this is formatting so we're going to
1077:23 - display
1077:25 - float underscore
1077:28 - format and we're going to say comma and
1077:32 - now we're going to use this
1077:34 - Lambda say x colon and we're going to
1077:38 - say
1077:40 - percent
1077:43 - 0.5f and that right there and we're
1077:46 - going to say percent X now if you don't
1077:50 - know what lambdas is lambdas are um I
1077:53 - highly recommend looking those up um
1077:56 - again this is not a beginner tutorial
1077:59 - whoops no such Keys display floor format
1078:03 - that makes sense uh this is float yeah
1078:07 - guys this is not a beginner's level all
1078:09 - right uh you can't use the floor format
1078:11 - this is the float format all right so
1078:13 - now let's take a look at this uh this DF
1078:15 - uh this data frame that we have so we're
1078:16 - just GNA hit DF hit enter and now our
1078:19 - numbers are a little bit more easily
1078:20 - readable I prefer it this way you do not
1078:23 - have to do this I'm doing this just
1078:25 - because this is what I
1078:27 - prefer so let's jump right into it um
1078:30 - something that when I saw this data I
1078:33 - was like something that I really thought
1078:34 - was interesting is this percent change
1078:37 - of one hour percent change 24 hours 7
1078:40 - days 30 days 60 days 90 days if you're
1078:43 - not in crypto or you don't do investing
1078:44 - or anything like that what this is going
1078:47 - to show us is how I mean it's pretty
1078:49 - obvious how much the price of this coin
1078:53 - has changed over the last hour 24 hours
1078:55 - seven days so as you can see it's it's
1078:58 - barely fluctuated over the past 24 hours
1079:01 - a little bit over the past um seven days
1079:04 - a lot over the last 30 days 60 days and
1079:06 - 90 days 20 minus 26% minus 33% we're in
1079:10 - may we just had a kind of a crash in
1079:12 - crypto a couple weeks ago so I mean this
1079:15 - tracks right but I want to visualize
1079:19 - this see this and kind of see um
1079:23 - you know how this is going to look and
1079:26 - how if I can gain any insight from that
1079:28 - information and just having it all
1079:30 - displayed for me but in its current
1079:33 - state um you know we really cannot do
1079:37 - that um now another issue not an issue
1079:41 - but another thing that we have to take
1079:42 - into consideration is we
1079:44 - have Bitcoin net right here we have
1079:47 - Bitcoin right here after different polls
1079:49 - now we just did it a minute after each
1079:51 - other but for your project may do it a a
1079:53 - run each day a run every hour or
1079:57 - something like that right
1080:00 - and if you did that your data could be
1080:03 - very different and so you may just want
1080:07 - to take this first one but what I'm
1080:09 - going to do for the sake of this project
1080:11 - I'm going to group them so let's go down
1080:14 - here and we're going to say DF dog Group
1080:19 - by and so if you've ever done something
1080:22 - like SQL uh this is how you Group by in
1080:25 - pandas basically we're going to group by
1080:28 - uh the name so so on bitcoin etherium te
1080:31 - so we're gonna we're gonna do that on
1080:34 - name and uh I'm not gonna I'm gonna say
1080:38 - sort is equal to false oops I'm not
1080:42 - going to sort it uh you could say true
1080:45 - there but we're not going to and I guess
1080:48 - you'll see why later we're going to do
1080:50 - an open
1080:51 - bracket and now we need to choose what
1080:54 - we're going to group by uh or what we're
1080:56 - going to what columns we're going to
1080:57 - have so I'm going to do another Open
1080:59 - Bracket and I'm just going to copy and
1081:01 - paste these so I'm going to start right
1081:03 - here at quote percent one hour so I'm
1081:06 - going to do boom and
1081:10 - then go over one and we're going to take
1081:14 - 24
1081:16 - hours paste that
1081:19 - comma we have the 7day 30-day
1081:24 - and we're going to do like
1081:28 - that and I'm just going to do comma I'm
1081:31 - gonna do the same one but I'm just going
1081:33 - to manually change it to
1081:36 - 30day rid of that at the end I don't
1081:38 - know what that is uh then we're going to
1081:41 - do 60
1081:44 - days and comma and we're going to do our
1081:47 - last one which is 90 days and let's see
1081:51 - what that gives us
1081:54 - uh doesn't give us
1081:56 - anything okay I know what's wrong here
1081:59 - um we forgot to add basically the what
1082:01 - we're we have we're grouping by
1082:04 - something we need to have like an
1082:06 - average a
1082:08 - mean a mode or something like that right
1082:12 - so all we have to do is go to the end
1082:14 - right here and let's just do we're going
1082:16 - to do an
1082:18 - average um and so we're taking this
1082:22 - number let's say this is for Bitcoin so
1082:24 - we're going to take this number in this
1082:26 - one hour for every time it's Bitcoin
1082:28 - it's going to group them all together um
1082:30 - and then it's going to average them so
1082:32 - in the past five minutes where it's been
1082:35 - running we're going to take the average
1082:36 - or the mean of that so let's run this
1082:40 - again and so now this is our output
1082:43 - let's take a
1082:44 - look Oops I meant down here let's run
1082:48 - this
1082:51 - now now what we have is all of these um
1082:55 - cryptos these are all 15 that we have
1082:57 - and this is the average um for this 1
1082:59 - hour 247 days 30 days 60 days and 90
1083:02 - days so now we have all of our
1083:05 - cryptocurrencies over here we have our
1083:07 - percent changes up top and then our
1083:09 - averages um here as well and so now what
1083:13 - we're going to do is you know if you try
1083:16 - to visualize this as is doesn't really
1083:19 - work because these percent changes are
1083:22 - up here as columns and we don't really
1083:24 - want them as columns because that it
1083:26 - just doesn't work for visual for
1083:28 - actually creating the visualizations we
1083:30 - really need these to be rows and so my
1083:33 - initial thought when I was doing this
1083:35 - was I of course I need to Pivot um you
1083:37 - know if you've ever used pivot like an
1083:39 - Excel or powerbi or something like that
1083:41 - that was my first thought and I tried
1083:43 - everything and I could get not could not
1083:45 - get it to work and I almost gave up
1083:47 - until I I ran across um something called
1083:50 - stacking or back and and so this was not
1083:54 - something that I I I think I have used
1083:56 - it before but I I couldn't remember to
1083:58 - be being completely Frank I couldn't
1083:59 - remember how to do this so I just did um
1084:02 - once I saw what it was I did Stack let's
1084:06 - make that dat four you don't have to do
1084:08 - this uh you can keep this all the
1084:09 - original data frame I'm just I like for
1084:12 - visual purposes you can see like the
1084:13 - progression that we're making um but I
1084:16 - like to you know create its new data
1084:18 - frame and I can always go back and look
1084:19 - at this data frame three um as we go but
1084:23 - you don't you don't have to do that
1084:24 - that's just what I'm doing so now let's
1084:27 - take a look at this now uh up here we
1084:29 - had Bitcoin and we had all these columns
1084:31 - and we had uh these numbers as rows but
1084:35 - now we have all of these as rows as well
1084:39 - this how we have this is much much more
1084:42 - usable um and if you've ever done
1084:44 - something like pivot or the stacking
1084:46 - before you'll know that you you kind of
1084:48 - have to do it if you really want to
1084:49 - visualize this
1084:51 - well but um you because we just stacked
1084:55 - it it kind of changed it so if we look
1084:58 - at um let's look at the type of let's do
1085:01 - type of data frame three this is
1085:04 - before um before we stacked it this was
1085:08 - in a data frame but now let's go and
1085:11 - look at data frame four so this is a
1085:14 - series this is no longer a data frame so
1085:17 - we have to remember that that's that's
1085:19 - really important because we can no
1085:20 - longer treat it as a data frame it's now
1085:23 - a series so we want to get it back to a
1085:25 - data frame we don't want it to be like
1085:28 - that because you can't really use it in
1085:29 - the series so what we're going to do and
1085:32 - let me just create a few of these so you
1085:34 - can be up here better so now what we're
1085:37 - going to do is we're going to say data
1085:39 - frame 4 Dot and something called 2core
1085:42 - frame so we're going to make this into a
1085:45 - frame and now we're going to specify the
1085:47 - name and it doesn't mean um the name
1085:50 - like right here we have actually mean
1085:52 - the name of these values right here this
1085:55 - is part of the stacking process in these
1085:58 - columns or these two columns so let's go
1086:02 - right here and we're going to call it
1086:04 - let's just say
1086:06 - values and let's make this data frame
1086:12 - five and let's see the output whoops for
1086:15 - data frame five and now so there's that
1086:18 - values and now this already looks a lot
1086:22 - better right so it's in this it's in
1086:24 - this more um this is already a data so
1086:27 - this is a data frame so let's look at
1086:29 - type data frame five so now it's in a
1086:32 - data frame
1086:33 - but the issue is is that this name is
1086:37 - kind of acting like a an index which we
1086:41 - don't want because we want to be able to
1086:43 - use this so it doesn't really have an
1086:45 - index at the moment so we need to give
1086:48 - it an index but typically when you give
1086:51 - an index you'll do something like um
1086:53 - we'll say dataframe do5 we'll do
1086:56 - setor index and then you'll do something
1086:59 - like um name so let's just do dat frame
1087:03 - six is equal to we'll see we'll see what
1087:06 - happens here it's going to give us an
1087:08 - error oops what I meant is we're going
1087:10 - to do data frame five
1087:13 - bracket uh name and that's a column
1087:16 - right we're going to do that and it's
1087:18 - basically going to say that that's not
1087:20 - going to work and and what we need to do
1087:23 - is what or at least what I want to do
1087:26 - and what we're going to do in this video
1087:28 - is I'm going to create numbers I really
1087:30 - would just want it to be numbered one
1087:32 - two three four five that's what I want
1087:34 - um but we don't have that right now I
1087:36 - can't just will it into existence so now
1087:39 - what we're going to do is kind of create
1087:41 - uh an index basically out of thin air so
1087:44 - we're going to do pd.
1087:46 - index and we're going to say uh you know
1087:50 - we basically want how many um rows are
1087:54 - in here that's where we want our our um
1087:57 - index to be we want it to count how many
1087:59 - are in here now you can make this
1088:00 - Dynamic and I it probably wouldn't be
1088:03 - that hard but I'm gonna take this super
1088:04 - lazy route um and I'm just GNA
1088:08 - say let's do DF
1088:11 - do5 or oops df5 doc
1088:15 - count and there's 90 values in here so
1088:19 - what I'm going to do is I'm going to do
1088:21 - a
1088:22 - range of 90 uh and this is not uh I
1088:27 - would definitely make this Dynamic but
1088:29 - I'm again I'm just
1088:31 - being being a little bit lazy we call
1088:33 - this index is equal to and I'm going to
1088:37 - put this Index right here so now this is
1088:38 - a number so now it's going
1088:41 - to literally Index this for us now I've
1088:45 - ran into this issue many times um so
1088:48 - what I need to actually do is to reset
1088:51 - this index and then do it properly the
1088:53 - first time uh so let's do re let's get
1088:56 - rid of this let's reset this index um
1088:59 - and it actually fixed itself um so what
1089:03 - was happening was is we were indexing
1089:05 - something that was already indexed we
1089:07 - were causing
1089:08 - issues in a nutshell so we reset the
1089:11 - index and now this is what it looks like
1089:13 - and this is exactly what we want this is
1089:16 - really how we wanted it formatted in
1089:17 - order to for our visualizations we have
1089:20 - multiple rows for the Bitcoin um each of
1089:23 - these columns are is now a row with the
1089:25 - value attached to it exactly what we
1089:28 - wanted so um really quick I for whatever
1089:33 - reason it it makes that uh level one I
1089:36 - don't know why but we're just going to
1089:37 - rename that column really quickly so
1089:39 - we're going to do data frame
1089:41 - 6.
1089:44 - rename and then we're going to do and
1089:46 - open parentheses say columns equal to
1089:51 - we're going to do one of these these bad
1089:52 - boys oops one of these bad boys this
1089:54 - this type of bracket and we're going to
1089:56 - say
1089:58 - levelor one and we do a colon and then
1090:03 - oops and then a colon and then we want
1090:06 - to change it to and I'm just going to
1090:07 - call this the percent underscore change
1090:11 - so let's call this dat frame
1090:13 - [Music]
1090:15 - seven again you don't have to do that
1090:17 - I'm just doing it so now this looks much
1090:21 - much better now let's try to visualize
1090:23 - this one um because we haven't done any
1090:25 - visualizations yet we've just been
1090:26 - messing with the data a little bit I I
1090:28 - you know I kind of want to see how we
1090:30 - can use this it's something that I
1090:32 - personally am interested in so I kind of
1090:34 - wanted to see visualize how these
1090:36 - changed over these these time periods um
1090:39 - but we need to um import some stuff in
1090:41 - order to be able to visualize this so
1090:44 - we're going to import cbor as SNS and if
1090:48 - we need to um we're going to import map
1090:51 - plot lib as well I don't know if we'll
1090:53 - use it right now or at all but um we're
1090:57 - going to we're going to add it in here
1091:00 - either
1091:00 - way so now those are added and so what
1091:04 - we're going to do is come right here
1091:05 - we're going to do
1091:06 - SNS doat plot and we're going to oops
1091:13 - we're going to say the x axis is equal
1091:16 - to and we want to do this as the percent
1091:19 - change percent
1091:23 - change and then we have the Y AIS now we
1091:27 - want the y- axis to be these values
1091:30 - right here say comma Y is equal to and
1091:35 - we're going to say
1091:36 - values oops and then we're going to say
1091:39 - comma and we'll say we want to basically
1091:42 - create a Legend um I guess you could
1091:45 - call it we're going to say Hue is equal
1091:47 - to name um I'll show you what it looks
1091:50 - like without it and then you know you
1091:52 - can
1091:53 - see that we need that we're going to say
1091:56 - the data is equal to this data frame
1092:01 - seven data frame
1092:04 - seven and then we are going to say the
1092:07 - kind is equal
1092:11 - to now let's run this and see what we
1092:14 - get and super quickly with just you know
1092:18 - limited um inputs here's what we have
1092:22 - now this looks really good we can narrow
1092:25 - this down if we wanted to to a few less
1092:27 - because there's a lot here and there's a
1092:29 - lot of colors but again that's just
1092:31 - because we have a lot of different stuff
1092:34 - but there's a few that are doing really
1092:36 - well I think this is
1092:39 - Tron um and then we have a few that are
1092:41 - not doing so well but it's really hard
1092:44 - to see if you look down here it's really
1092:46 - hard to see this um and that's just
1092:49 - because of the the column name
1092:52 - and so I actually want to change these
1092:54 - column names or these values so that
1092:56 - when we visualize it right down here it
1092:59 - it doesn't look like that I kind of want
1093:01 - this to be you know at least one good
1093:04 - visualization you can take out of here
1093:06 - this is definitely not perfect or
1093:07 - complete by any means but you know you
1093:09 - can take take that away from here um so
1093:12 - let's um I did Alt Enter which adds
1093:16 - another row I could have just pushed
1093:17 - plus that's was kind of the lazy way um
1093:20 - what I'm going to do
1093:22 - is I'm going to change these um these
1093:25 - values in here so how I'm going to do
1093:27 - that is I'm going to do data frame seven
1093:29 - and we only want to look at this one
1093:31 - column so we'll do that right
1093:35 - there and we want to say dot
1093:39 - replace and we're going to an
1093:41 - open parenthesis and then a bracket now
1093:45 - what we need to do is I'm just to show
1093:48 - you um one of them is I'm going to say
1093:52 - this one
1093:53 - hour do that oops and then what I need
1093:56 - to do is a comma another bracket and
1093:59 - this is what it's going to change to I'm
1094:00 - just going to say one hour oops one hour
1094:03 - um and we'll do this one really quick
1094:05 - and then I'm gonna I don't want you to
1094:07 - have to watch me type all this out but
1094:08 - I'm going to go through and basically do
1094:09 - all of this uh for those but let's let's
1094:12 - see this really quick and so now as you
1094:14 - can see that um the originally it said
1094:16 - quote. USD percent change 1 hour is now
1094:19 - only 1 hour now
1094:22 - this didn't actually do anything we need
1094:24 - to apply it to this right here so I'm
1094:27 - going to say data frame 7 is equal
1094:30 - to and then we'll run data frame 7 again
1094:35 - so now that has actually changed that
1094:37 - value now I'm going to go through and
1094:39 - I'm going to update that for every
1094:41 - single one all right so I basically just
1094:43 - put the other ones um in here that we
1094:45 - wanted to change with commas afterneath
1094:48 - so I have 24 hours comma with the seven
1094:50 - days 30 days 60 days 90 days and then
1094:53 - this bracket over here which tells uh it
1094:56 - what to change it do 24 7 days 30 days
1094:59 - 60 days 90 days so let's run this I
1095:02 - haven't even tried it yet uh and it
1095:05 - looks like it obviously worked properly
1095:07 - so now let's go back down here and let's
1095:10 - run this
1095:11 - again and look at that it looks so much
1095:15 - cleaner so much nicer um and as you I
1095:19 - mean all of them with that 1 hour change
1095:21 - has very little change and then you can
1095:24 - look back so we can see back within 90
1095:26 - days it's gone a lot of these have gone
1095:28 - down which again if you're following
1095:30 - crypto you know there's a big crash
1095:32 - recently um especially with with you
1095:34 - know all these altcoins um that you're
1095:36 - seeing right here went down a ton so I
1095:39 - think this is um Avalanche or die or
1095:42 - whatever these ones are you know went
1095:44 - down dramatically whereas there's one up
1095:47 - here this Lone Wolf um that's just
1095:50 - that's just did do really well for
1095:51 - whatever reason so it's really
1095:53 - interesting um to see now this is a
1095:55 - pretty specific um visualization that I
1096:00 - personally wanted to see and I thought
1096:01 - was interesting you can do absolutely
1096:04 - whatever you want to do with this data I
1096:06 - mean there's so much here you can do a
1096:08 - lot I mean a lot with this data
1096:11 - especially depending on how long you
1096:13 - track it right I only did this over the
1096:15 - course of like five minutes but if you
1096:17 - set this up um and you can track it over
1096:20 - a longer time
1096:22 - now um let's say you wanted to do
1096:25 - something much simpler uh you just
1096:27 - wanted to look at like Bitcoin over that
1096:30 - time that you you know uh uh took the
1096:32 - data in that's going to be a lot simpler
1096:34 - than what we just did and I'll show you
1096:36 - how to do that really quickly so we're
1096:37 - going to look at the data frame and we
1096:40 - are going to say uh or we're going to
1096:42 - take specific columns we just want um a
1096:46 - few columns that we want to keep or or
1096:49 - pull from so we're going to take uh oops
1096:51 - we're going to take the name
1096:54 - column we're going to do
1096:57 - uh might be easier if I copy them but
1096:59 - I'm just going to write them out quote.
1097:02 - USD do price this is the price of the
1097:06 - actual
1097:07 - cryptocurrency then we're going to
1097:09 - do Tim
1097:12 - stamp and let's make this data frame and
1097:16 - we're just going to do 10 for absolutely
1097:18 - no
1097:19 - reason uh maybe made at n it would have
1097:21 - been easier so now we just have these um
1097:25 - these columns and you know we have all
1097:27 - these separate columns so what we can do
1097:31 - and the re kind of the reason I want to
1097:32 - show you this is you can just query this
1097:34 - really quickly and just take the columns
1097:37 - that you want so let's say we just
1097:38 - wanted to look at Bitcoin so we're going
1097:40 - to say data frame
1097:43 - 10. query do open parenthesis and we're
1097:46 - going to say name is equal and equal is
1097:50 - not like that uh when you're doing it
1097:52 - like this you need to say equal equal
1097:54 - equal
1097:56 - to oops ignore that uh is equal to
1098:01 - bitcoin and we're going do it just like
1098:03 - that and we're going to say data frame
1098:05 - 10 is equal to let's try running that I
1098:09 - think something's wrong with it try it
1098:11 - like
1098:13 - this oops all right let's try that there
1098:17 - we go it was just the I needed a double
1098:19 - quotation instead of a single quotation
1098:21 - that was the issue so now we have
1098:23 - Bitcoin we have the price and we have
1098:24 - these time stamps so this is the actual
1098:26 - time when we ran it so this is the
1098:28 - original data frame and then in the you
1098:30 - know this this project it took me 15
1098:32 - more minutes to get this one and then we
1098:33 - had it running properly for the next
1098:35 - five minutes so that's you know that's
1098:37 - actually what we have now if we want to
1098:40 - just visualize this really simply what
1098:43 - we can do is we're going to
1098:45 - say uh we're going to do SNS doline plot
1098:50 - and that's going to be like a little
1098:51 - line chart or line graph what whatever
1098:54 - you want to call it and then we're going
1098:56 - to say x is equal to and we'll say
1099:01 - quote no actually we wanted the time
1099:04 - stamp to be on the x-axis um and then
1099:07 - we'll do y is equal to quote. USD do
1099:14 - price and let's see if that
1099:19 - works good not interpret time stamp for
1099:22 - the
1099:24 - parameter uh that's because it's not
1099:28 - understanding that the
1099:30 - data equals data frame 10 now let's try
1099:35 - this all right so this is uh looks
1099:38 - terrible let
1099:40 - me me just say SNS doet underscore
1099:46 - theme and open parentheses we'll do
1099:49 - style is equal to dark
1099:54 - grid this looks a little better now
1099:58 - again we are looking just at a very very
1100:01 - short time series but we can look at
1100:06 - just Bitcoin or we could look at
1100:08 - multiple and we're showing this you know
1100:11 - this line that's showing us this
1100:12 - trajectory over time so you can get
1100:15 - really creative with this you can run
1100:16 - this for a long time you can show
1100:18 - Bitcoin over days weeks or month months
1100:21 - however long you run this and so that's
1100:23 - really all I've got um honestly like I
1100:26 - said this is not a I wouldn't say this
1100:27 - is a complete full project but I'm
1100:30 - showing you how to do something to
1100:31 - enable you to kind of run with it and
1100:33 - run with the ball and do basically
1100:35 - whatever you want with this you can pull
1100:38 - it from you know data from a different
1100:40 - API you can use this exact API in data
1100:44 - but I wanted to show you just a few
1100:46 - things that I initially saw that I might
1100:48 - do with the data and you you have so
1100:51 - much let me go back to this original
1100:53 - data
1100:54 - frame uh right we'll use this one right
1100:57 - here this one right here look at all
1100:59 - this data I mean you have so so so much
1101:02 - data actually let's go to this one this
1101:04 - one's better you have so much data so
1101:06 - many numbers here um so many columns
1101:08 - that we didn't even look at that you can
1101:11 - use um and so you know there's a lot
1101:15 - that you can use here and I'm really
1101:17 - trying to just set you up so that you
1101:19 - can run with it and do whatever you want
1101:22 - I could have done a thousand different
1101:23 - things here but you know I tried to just
1101:25 - show you two things that you can do with
1101:27 - the data that I thought were pretty
1101:28 - interesting or or simple to do and you
1101:32 - know I want you guys to go out and do
1101:34 - something way way better than what I did
1101:36 - so I hope that this was helpful I hope
1101:38 - that this showed you how to automate
1101:40 - that process so you don't have to sit
1101:42 - there and click it and append it and do
1101:44 - all these different things that it can
1101:45 - show you how to kind of automate this
1101:47 - process and hopefully that will be
1101:48 - helpful in your future projects so with
1101:51 - that being said thank you so much for
1101:53 - watching if you made it all day to the
1101:55 - end you guys are fantastic if you like
1101:57 - this video be sure to like And subscribe
1101:59 - below I'll see you in the next
1102:02 - [Music]
1102:12 - video what's going on everybody welcome
1102:14 - back to another video today I'm going to
1102:16 - be walking you through how to create
1102:17 - your very own portfolio
1102:19 - website
1102:22 - [Music]
1102:25 - now we just completed our data analyst
1102:27 - portfolio project Series where we walk
1102:29 - through four projects in SQL Tableau and
1102:31 - Python and so if you have completed
1102:34 - those projects you now want to share
1102:35 - them with potential employers and I
1102:37 - think the best way to do that is to
1102:39 - create your own website in just a little
1102:40 - bit I'm going to show you two options on
1102:42 - how you can actually create your own
1102:43 - website the first one is a website
1102:45 - builder like wix.com and the second one
1102:48 - is hosting your own website through
1102:49 - something called GitHub Pages now if you
1102:51 - have never created your own website
1102:53 - before it can sound a little bit
1102:54 - daunting but don't worry I'm going to
1102:56 - walk you through every single step of
1102:57 - the way from the very start to the very
1102:59 - end and once you reach the end you'll
1103:00 - have a complete data analyst portfolio
1103:02 - website so without further Ado let's
1103:04 - jump on my screen and let's get started
1103:06 - all right so the website that you're
1103:07 - looking at right now is the actual
1103:08 - website that we are going to build in
1103:10 - this video um it is hosted on GitHub
1103:12 - Pages or github.io so this is actually
1103:15 - being hosted right now by GitHub pages
1103:17 - so if you type this in I'll leave a link
1103:19 - in the description if you type Tye this
1103:20 - in um you will get this page and you can
1103:24 - check it out for yourself if you don't
1103:25 - want to just watch me look at it um so
1103:28 - you know it has this little header and
1103:30 - you can write a little bit about
1103:31 - yourself and then these are our actual
1103:34 - projects so this is our data cleaning in
1103:36 - SQL project um and then there's the
1103:38 - covid uh data exploration Tableau
1103:40 - dashboards movie correlation with python
1103:43 - um this is a future video I plan on
1103:45 - doing a few more of these projects
1103:47 - because I just really enjoy them so uh
1103:50 - you know and then there's this contact
1103:52 - information at the bottom so it's a
1103:54 - really
1103:55 - simple website and it gets the point
1103:58 - across and uh I have something similar
1104:01 - to this for my own personal one I I use
1104:03 - a different variation but um this all
1104:06 - comes from this website HTML 5 up there
1104:10 - are lots of templates lots of options
1104:12 - that you can use um again the one we're
1104:14 - going to be working with is this one but
1104:17 - I use a different one for mine and they
1104:19 - are really good
1104:21 - I me super easy to build and customize
1104:25 - yourself and I will say again I have no
1104:28 - experience doing this I just watched a
1104:30 - YouTube video that showed me how to do
1104:32 - this and now I am creating my own
1104:34 - YouTube video to show you how to do this
1104:36 - so it's coming um pretty much full
1104:38 - circle so like I said there's no no real
1104:41 - narrative to it it just clicks to your
1104:42 - project um if you click on this and
1104:44 - let's just open a new tab it'll take you
1104:47 - right to our to the GitHub project um
1104:49 - and then you the the whoever is checking
1104:51 - this out like a an employer or a
1104:53 - recruiter can see your code so super
1104:56 - simple another way that you can do this
1104:59 - is kind of creating your own website
1105:01 - through like a template or something
1105:03 - like that um almost like a Blog style so
1105:06 - I imagine it being very something very
1105:08 - similar to this where there's this
1105:10 - introduction and you can talk about you
1105:12 - know where you got the data set how you
1105:13 - got the data um and then you can kind of
1105:16 - have a more narrative uh approach with
1105:19 - screenshots and with some code as well
1105:21 - so you know this person included
1105:23 - screenshots um and then there's the code
1105:25 - right here that I can actually copy um
1105:28 - and paste that and it just walks through
1105:30 - the logic of how the project was done um
1105:34 - there's a story to it really and so that
1105:37 - might be something that you're
1105:38 - interested in now I have done something
1105:40 - like this in the past and I used Wix and
1105:42 - there's a you can do this completely for
1105:44 - free um the one we're doing today is
1105:46 - completely free as well but you know if
1105:48 - you want the customize
1105:51 - um the customized URL you do have to pay
1105:54 - for it on Wix but you can get a free Wix
1105:57 - website with the Wix um in the URL so
1106:00 - you know try this out these are super
1106:03 - easy you can find thousands of templates
1106:05 - and a million tutorials of how to do
1106:06 - them um so that's not the one we're
1106:08 - going to be working on today so with
1106:11 - that being said uh the very very first
1106:13 - thing that we need to do before we do
1106:15 - anything is actually download visual
1106:18 - studio code this is where we're going to
1106:20 - download that HTML and we're going to be
1106:22 - working with it in there um again I
1106:25 - don't know if I said this before but it
1106:27 - seems a little bit intimidating at first
1106:29 - but once we actually start looking at it
1106:31 - it's a lot easier than it looks I
1106:33 - promise you so if you are me and you
1106:35 - have a Windows computer you'll just go
1106:38 - right here you'll install it um super
1106:40 - easy to install I'm not going to walk
1106:41 - you through how to do that um of course
1106:43 - I already have it up and running down
1106:46 - here so once you have that installed
1106:49 - what you're going to do going to come to
1106:50 - this website a link should be in the
1106:52 - description we are going to download
1106:55 - this all you have to click is the free
1106:57 - download it's going to pop up I'm going
1106:59 - to put it in my downloads I'm GNA click
1107:03 - save
1107:05 - fantastic uh so let's go to the
1107:07 - downloads and it should be right here
1107:09 - now if we open this up it has a few
1107:11 - different things in it okay so um I'm
1107:14 - using the brave browser so that's going
1107:16 - to be right here so that's this the
1107:17 - symbol but for you if you're using
1107:19 - Google Chrome that should be the symbol
1107:21 - there as well but this is everything
1107:24 - that you should be seeing and what we
1107:26 - want to do is we want to take it out of
1107:27 - this um zip folder because it's there
1107:31 - are things that can read into it with
1107:34 - Visual Studio code but I want to make
1107:35 - this as user friendly as I possibly can
1107:38 - so what we're going to do is we're going
1107:40 - to make create a new folder and I'm just
1107:42 - going to call it massively or you can
1107:44 - call it um Port website whatever you
1107:47 - want to call it I'm just going to do
1107:49 - Port website
1107:51 - um and we are just going to I'm going to
1107:53 - copy this in I'm not going to cut it in
1107:55 - just in case I make a mistake so going
1107:58 - to put all of those um all of those
1108:01 - things in
1108:02 - here and now what we're going to do is
1108:05 - we're going to go to visual studio code
1108:08 - right here and you should be greeted
1108:11 - with this um this right here and we're
1108:13 - just going to click open folder and
1108:15 - we're going to go to Port website and
1108:17 - we're going to go select
1108:18 - folder and you're going to say say yes I
1108:21 - trust this one and right over here is
1108:24 - all of the documents that we were just
1108:26 - looking at now the one that the only one
1108:29 - really that we're going to be working in
1108:31 - um we'll work a little bit in the images
1108:33 - um because I'll show you how to add your
1108:34 - own images the really the only one we're
1108:37 - going to be working in is this index so
1108:41 - again it looks complicated um if you've
1108:44 - never looked at HTML before um it does
1108:46 - look a little bit complicated but HTML
1108:49 - to me
1108:50 - is one of the more easily understood
1108:53 - languages um once you start kind of
1108:55 - getting into it which we're about to
1108:57 - we're going to walk through the entire
1108:58 - process it actually makes a lot of sense
1109:00 - and it is pretty simple um something
1109:03 - that you're going to want is you're
1109:05 - going to want something called a live so
1109:07 - like if I click right here and I click
1109:10 - open with live server you don't have it
1109:11 - yet I'm guessing unless you've done this
1109:13 - before um it's going to open up this
1109:15 - website and this is what we're looking
1109:17 - at right now so it has a bunch of um
1109:20 - gibberish or some language that I do not
1109:23 - know and so we can view this live um in
1109:27 - just a second I'm going to take myself
1109:30 - off screen but before I do that um let's
1109:33 - download or let's um search for that
1109:38 - that
1109:39 - live um I think it's called live share
1109:42 - live server um let me see what this is
1109:45 - called yeah live server so come right
1109:48 - here it's called this live server there
1109:50 - it is yeah that's the one so this is our
1109:53 - live server you just need to click
1109:54 - install it takes like 5 seconds and it
1109:56 - should be completely installed um what
1109:59 - this does is it just hosts a local
1110:02 - website it's not something that anybody
1110:03 - can access um but it connects to your
1110:06 - code and when we make updates it'll make
1110:08 - a lot you can see it live you can see
1110:09 - those updates live so I'll show you all
1110:11 - that in a second just be sure to um be
1110:14 - sure to download that or install that uh
1110:16 - with that being said let's get out of
1110:19 - this let's go all let's go back right
1110:21 - here uh with that being said I am going
1110:23 - to take myself off screen so that you
1110:25 - can see everything that I am seeing as
1110:27 - well um it's been really great seeing
1110:29 - you have lots of different videos coming
1110:33 - up lots of new projects um I just I
1110:36 - really enjoyed this project series I
1110:38 - think I'm just going to do more of them
1110:39 - so uh all right I'm G to get myself off
1110:41 - screen so let's look at what we actually
1110:45 - need to do so I'm going to um
1110:50 - so let me see okay so we're already
1110:51 - connected to the
1110:53 - live um actually I got rid of it
1110:56 - whoops let's pull this over and let's
1111:00 - pull
1111:01 - that and we're going
1111:04 - to open in live server so if we look
1111:09 - right over here and I know this going to
1111:10 - be a little bit Squish and I'm sorry
1111:12 - about that um but if we look right over
1111:16 - here this says this is massively so you
1111:19 - you can change that that's that's this
1111:21 - right here and you can say we're going
1111:23 - to say Alex the analyst portfolio and
1111:27 - we'll get rid of this massively I'm
1111:29 - gonna hit control save you can also go
1111:31 - up here and hit save but I'm I'm going
1111:34 - hit controls so I hit contrl s and just
1111:38 - like that it updates on the website now
1111:41 - again this is just a local so it's
1111:43 - nothing that anybody can see so don't
1111:45 - worry but what we're going to do is I'm
1111:47 - going to walk you through the entire
1111:49 - process of creating this and then at the
1111:51 - end I will show you how to host it on
1111:53 - GitHub um and it's honestly it's it's a
1111:56 - fairly easy process it's just takes a
1111:58 - little bit of time to customize it all
1112:00 - so let's get into it so we have this um
1112:04 - you may not be able to see it let me
1112:05 - actually pull this up so it says
1112:06 - massively by HTTP we're going to
1112:08 - customiz that customize that as well
1112:11 - whoops I don't want to do that every
1112:12 - single time I'm I'm going to try not to
1112:14 - go full and go back and everything like
1112:16 - that so we're just going to say Alex the
1112:18 - analyst
1112:21 - portfolio um contrl s and right up here
1112:25 - that changed it you may not be able to
1112:26 - see yeah don't ask me that again thank
1112:27 - you uh right up here you probably can't
1112:29 - see at the moment we'll see that later
1112:31 - um but it it customizes this um tab
1112:34 - which is really
1112:35 - cool so let's go right down here now
1112:39 - this is where it says a free fully
1112:41 - responsive HTML uh five template we can
1112:47 - customize that and I highly encourage
1112:49 - you do so what you can do and they
1112:53 - actually included their Twitter handle
1112:56 - right here and you can do the same if
1112:58 - you look at this one right here I
1113:00 - included my Alex the analyst handle that
1113:03 - that goes to my YouTube channel and you
1113:04 - can do the exact same thing includes
1113:06 - your LinkedIn or your GitHub profile or
1113:08 - whatever you want to include in there um
1113:11 - and so you know be aware that you can do
1113:14 - that so let's say um oops I need to
1113:18 - click back in here
1113:20 - so we're going to
1113:22 - say
1113:23 - um data analyst skilled in and then
1113:28 - again don't write what I'm writing um
1113:30 - you can it's I'm just going to make it
1113:32 - really simple but you know this part is
1113:35 - meant to be a little bit about you um as
1113:37 - who you are so I'm going to say data
1113:38 - analyst skilled in
1113:40 - SQL Tableau and
1113:44 - Python and then I'm just going to get
1113:47 - rid of all of this
1113:50 - yep yep yep everything from here
1113:54 - over and contrl
1113:56 - S and so super simple um actually let me
1113:59 - where was that
1114:01 - four four here it is we don't need that
1114:06 - actually we don't need any anything from
1114:09 - here
1114:11 - over probably here honestly see what
1114:14 - that looks like um and yeah and I can
1114:16 - again you can use any website right here
1114:18 - that you want
1114:20 - and you can customize what it looks like
1114:21 - so I'm going to say Alex the analyst um
1114:24 - and then whatever URL you want to
1114:26 - include in there that's what you need to
1114:28 - put so now if I save oops if I hit
1114:30 - contrl s so now it says Alex the
1114:33 - analyst um so pretty
1114:36 - easy now we're going to go down and you
1114:40 - can use this however you want to use it
1114:42 - I would you can even make this um you
1114:45 - can make this like one of your one of
1114:48 - your readmes like a you and put the link
1114:50 - for that I decided to include um again
1114:54 - on this one I decided to include the
1114:56 - project that I thought that we've done
1114:58 - that was like the most impressive or the
1115:01 - I don't know the coolest one I don't
1115:03 - know if you consider data cleaning and
1115:05 - SQ cool but um I do I think it's cool so
1115:09 - I included that one as my very first one
1115:10 - so that's what we're going to do um
1115:12 - right here so we're going to go down and
1115:16 - it's going to
1115:18 - say
1115:20 - let's say it says this is massively
1115:22 - that's not
1115:23 - it uh cool so let's see what oh okay I
1115:26 - know what that is we'll come back to
1115:27 - this up here um in just a little bit I'm
1115:30 - going to go full screen I'll show you
1115:31 - what this is and then we'll come back to
1115:33 - it but if we go right down here this is
1115:36 - our what they're calling a featured post
1115:38 - and then the ones below this are posts
1115:41 - so in our featured post um I'm going to
1115:44 - get rid of the date I don't want them to
1115:45 - know that I just created it like um I
1115:49 - don't know oops I keep doing uh control
1115:52 - a selecting everything whoops so we're
1115:55 - going to say um data cleaning in
1116:00 - SQL and we'll get rid of
1116:03 - this and contrl S again I'm just
1116:06 - updating it a lot so that you see what
1116:09 - I'm doing and where it's going and we're
1116:11 - going to get rid of basically all of
1116:13 - this and go back and we're just going to
1116:16 - say in this project we C clean data in
1116:21 - we clean let's do we clean housing data
1116:24 - in SQL
1116:26 - server and contr S so super easy again
1116:30 - uh give a little bit more description I
1116:31 - did in my other one um and you have the
1116:33 - you have you can see that website so go
1116:35 - check it out and then we'll have an
1116:37 - image and I'm going to show you um at
1116:40 - the end we're going to go back and redo
1116:41 - all the images but I'm not going to do
1116:44 - that at this very
1116:45 - moment um
1116:48 - so what
1116:49 - now you can have this full story I chose
1116:52 - to do view
1116:56 - project and i h contrl s it says view
1116:59 - project I think that just looks better
1117:00 - especially if you're displaying a
1117:02 - project I think it is nice uh now we go
1117:05 - into all the indiv individual posts um
1117:07 - actually no wait what I want I want to
1117:10 - show you really quick is how you
1117:11 - actually link it to this so let's go
1117:14 - right over here this is our co uh that's
1117:17 - our Co one here's a data cleaning
1117:19 - project so all you have to do is take um
1117:24 - take this website so that's the URL and
1117:27 - you're going to put it right here now
1117:29 - there's three different places this href
1117:31 - is places are places where you can put a
1117:33 - link to a website um and on here it
1117:37 - references this right here so you can
1117:39 - they can click on this data cleaning and
1117:41 - SQL they can click on the image um as
1117:44 - because you know this href is right next
1117:46 - to this image they can also click on the
1117:49 - view project button so you can put it in
1117:52 - all three um and you'll just go like
1117:54 - this you'll you'll stick the URL right
1117:57 - where that um hashtag or pound sign
1118:01 - is and then we're going to save that
1118:05 - oops oh I I this is embarrassing I am
1118:08 - not a website I am not a web developer
1118:10 - as you can see um but then if I go in
1118:13 - here and I right click and I say open
1118:15 - link it is going to take me to that
1118:18 - project so super super simple and we're
1118:19 - going to do basically that for all of
1118:21 - these um I'm only going to show you
1118:23 - three and then you can do the rest but I
1118:25 - want to show you how to also do the um
1118:27 - put the Tableau it's the exact same
1118:29 - thing but you know it's different so
1118:31 - wanted to show it to you so the next one
1118:35 - that we're going to do is go down to
1118:37 - posts
1118:38 - and again I'm going to get rid of this
1118:40 - date you can keep that in there if you
1118:41 - want excuse me and that's totally fine
1118:44 - just
1118:45 - update the date um this is that said mag
1118:49 - again I think this might be like some
1118:50 - language that I just don't know about um
1118:52 - the next one is data
1118:55 - exploration in
1118:57 - SQL and I'm going to get rid of
1119:00 - this and we'll save that
1119:03 - perfect and we'll do view
1119:09 - project
1119:11 - cool and yeah so now we need to um
1119:16 - customize this summary and so I'm just
1119:19 - going to say something really simple um
1119:23 - data exploration of
1119:28 - covid-19 data set in SQL
1119:34 - Server there we go let's save that we
1119:37 - have view project now let's go get our
1119:39 - project so this is the data exploration
1119:43 - we're going to take this we're going to
1119:45 - copy it and we're going to put it right
1119:46 - in
1119:48 - here and right in here as well and if
1119:52 - you want to you can also include it
1119:54 - right up here so we have it in all three
1119:56 - places uh again once you click on these
1120:00 - they will come up let's go to the next
1120:03 - one we're going to get rid of
1120:06 - this this one is going to be our Tableau
1120:09 - projects so actually let me just copy
1120:11 - that while we're here this is going to
1120:12 - be our Tableau projects so if you have
1120:15 - one specific project that you want to
1120:17 - include what you need to do is actually
1120:20 - go in here click view grab that URL what
1120:24 - I am doing is I am just sharing my
1120:26 - Tableau public page so if you have tons
1120:29 - of projects in here and um you want to
1120:32 - display all of them then or you want
1120:35 - them to be able to see all of them and
1120:37 - go and pick and see and choose what they
1120:38 - want to look at then just choose this
1120:40 - URL that we're choosing right here so um
1120:44 - in here on in the um HTML we're going to
1120:47 - put I'm going to put tab
1120:51 - projects
1120:53 - and let's go like
1120:56 - this and then we will get rid of uh that
1121:01 - hashtag pound sign whatever you want to
1121:03 - call
1121:04 - it and we'll hit contrl s and oh we got
1121:08 - to do the
1121:10 - um this as
1121:14 - well this is my this is going to be a
1121:18 - terrible don't use this this is my
1121:21 - Tableau this holds I'm just this is bad
1121:24 - this holds all of my
1121:27 - Tableau
1121:29 - dashboards don't please don't do this um
1121:32 - I am doing this because I don't want to
1121:35 - take forever in a video to make it
1121:37 - perfect um and then you know you're
1121:39 - going to do the exact same thing so in
1121:41 - this one right here I included four so
1121:44 - I'm going to keep
1121:45 - four
1121:47 - um let me do the
1121:49 - no I'm just going to do these three I'm
1121:51 - not gonna take up more of our time um so
1121:56 - we did those I'm just going to keep
1121:57 - these three in for visual purposes but
1122:01 - once you get down here um you know what
1122:04 - we're going to do is delete some of this
1122:06 - right so we this is our data
1122:08 - exploration and where's our
1122:11 - Tableau this is our Tableau right here
1122:14 - so Tableau projects they're separated by
1122:16 - these articles so what we're going to do
1122:17 - is go around right here and we're going
1122:19 - to go down down down down to right here
1122:22 - this is going to get rid of all these
1122:24 - other articles or all these other what
1122:26 - they're calling um posts so we're going
1122:29 - to get rid of those and we're going to
1122:31 - hit
1122:32 - save and now as you can see we have our
1122:35 - header we have our first project and we
1122:38 - have our second and our third I would
1122:40 - include those other projects that we've
1122:42 - done in here so that it looks good this
1122:45 - is this footer right here we don't need
1122:47 - that because we don't have any
1122:49 - um anything else in there so we're going
1122:51 - to get rid of that as well and now we
1122:53 - just have this information
1122:55 - now I don't have anything where they can
1122:59 - do the name email message or you can
1123:00 - keep that in there if you'd like um but
1123:03 - I am going to get rid of this so we're
1123:05 - going to go right here that's the
1123:07 - section so don't delete the section we
1123:10 - want that I'm going to delete this
1123:11 - footer section as what they're calling
1123:13 - it and now we have this address phone
1123:17 - email social um and I'm G to get to the
1123:19 - Social in just a second it's again super
1123:22 - easy but for the address I just put
1123:25 - location I don't want to give somebody
1123:26 - my address or put it on a website
1123:27 - anywhere um it's not something I want to
1123:30 - do so what we're going to do is just put
1123:33 - I'm going to put
1123:34 - Dallas and Texas and we can keep it like
1123:37 - that and we'll hit oops we'll hit save
1123:41 - and it'll have Dallas Texas um hate the
1123:44 - look of the zeros 6 seven8 n z so we're
1123:48 - going we're going to do that phone
1123:50 - number
1123:52 - two3
1123:54 - 56
1123:55 - 7890 and then email and we'll
1123:59 - put Alex the analyst 95@gmail.com
1124:05 - if you have issues with this um you can
1124:08 - email me
1124:10 - but I'll try I will try to respond to
1124:13 - all your emails I get a lot um so I will
1124:16 - do my best but that is my actual email
1124:18 - if you are curious
1124:19 - now um now that we have this we also
1124:23 - have these the social media now I want
1124:26 - to display my LinkedIn and I also want
1124:29 - to display my GitHub so what I'm going
1124:32 - to do right here is I'm going to go over
1124:34 - here and do
1124:36 - LinkedIn perfect let's go to this so I'm
1124:40 - going to take my LinkedIn
1124:44 - URL and I am going to get rid of these
1124:48 - first two because I'm only going to
1124:50 - include two and for this one I'm going
1124:53 - to do uh
1124:55 - LinkedIn oops linked in and then for
1125:01 - right here I'm going to replace that
1125:03 - with linked
1125:05 - in and what you're going to do is put
1125:08 - this link right here and then we're
1125:11 - going to go get get the
1125:13 - GitHub so let's do GitHub oh who is this
1125:17 - sign up what is going on
1125:20 - um I don't there let's just go back here
1125:24 - I that was some I was like viewing a
1125:26 - while back or something um so we're
1125:28 - going to take the GitHub and we're going
1125:30 - to put that right here so it already has
1125:34 - it as um the GitHub is this supposed to
1125:37 - be
1125:39 - lowercase I think it is let me see if
1125:42 - this is lowercased as well yeah um so do
1125:45 - it like that do it lowercased um I
1125:47 - forgot that that was how they did it
1125:51 - um and oh that's the label that doesn't
1125:53 - matter as much but this right here is
1125:54 - the class is actually the important part
1125:56 - because then when we go back here there
1125:59 - is no LinkedIn image but when we save it
1126:02 - oops when we save it it has the LinkedIn
1126:05 - image because it's already a class that
1126:06 - was created in this HTML um
1126:10 - template so we have that um and let me
1126:14 - bring this full screen really quick
1126:16 - because there are a few things that we
1126:17 - couldn't see in that that screen these
1126:20 - right here are things that we could not
1126:22 - see before um and these as well so what
1126:28 - we can do is we're going to go down here
1126:29 - we're just going to copy these social
1126:31 - we're going to replace them right here
1126:33 - so they can have those and then we're
1126:34 - going to get rid of these two right here
1126:36 - and this says this is massively um and
1126:38 - we're going to change that as well let's
1126:40 - make this full screen for the first time
1126:42 - feels good um I hate doing split screen
1126:45 - but I do it for you guys um so this is
1126:50 - massively and we're just going to put
1126:52 - we're just going to get rid of these two
1126:54 - this is um it's called The Navigator the
1126:57 - the different tabs we're going to get
1126:58 - rid of those two tabs and then for this
1127:00 - I'm just going to call it
1127:02 - projects and I'll once I once we go back
1127:05 - and update all this then you will um
1127:08 - you'll see those
1127:09 - changes so let's see so we made those
1127:12 - changes here's our social or the social
1127:14 - medias uh Social Media stuff we're going
1127:17 - to go and copy copy these
1127:20 - two and we're going to replace all of
1127:24 - these with
1127:27 - this
1127:28 - um and let's save that and let's go back
1127:33 - so now as you can see those two are gone
1127:35 - this says projects there's only two
1127:36 - right here and if you click on it it's
1127:38 - going to go to my LinkedIn or your
1127:41 - LinkedIn when you do it um and this will
1127:44 - take you to the GitHub so it is all
1127:48 - working as intended this is great um
1127:51 - when you scroll down and it says
1127:52 - massively we can change that as well and
1127:54 - we should let's do that really quick um
1127:58 - we'll just
1127:59 - say Alex the
1128:01 - analyst and we'll update
1128:04 - that and there we go so in a nutshell
1128:08 - this is the a lot of it um we need
1128:12 - images and I don't think I set this up
1128:16 - for this video so I'm going to I'm going
1128:18 - to like cut myself off for like 2
1128:20 - seconds go pull those images in um
1128:23 - because it could take like a few minutes
1128:25 - I don't want to waste your time and then
1128:26 - I'll come back so I'll see you in two
1128:28 - seconds all right so I just pulled over
1128:30 - the images that we are going to use
1128:32 - let's go to the downloads um they're
1128:34 - right here they're the housing Tableau
1128:36 - and Co um if I open up this Co one this
1128:39 - is what the image looks like this is
1128:40 - what we're going to use for that covid
1128:43 - project so I'm going to copy these I'm
1128:45 - going to go into the port website um
1128:47 - that we just have I'm going to go to
1128:49 - images and I'm going to insert these in
1128:51 - here so now that we have those images in
1128:54 - here let's go
1128:56 - back and let's see what we got so we
1128:59 - just put these images in this um you'll
1129:02 - have this folder right here and you can
1129:05 - open it up and you can see all of these
1129:07 - that we have so all we're going to do is
1129:10 - go and replace the images these these
1129:12 - you know temporary images that they had
1129:15 - for us and we should be gold and then
1129:18 - we're going to actually upload it to to
1129:20 - GitHub and then create our website for
1129:23 - free so let's go right down here this is
1129:26 - our very first uh one this is our data
1129:29 - cleaning in SQL this is with the housing
1129:31 - data so this image right over here it
1129:35 - says images p1. jpeg so jpeg I don't
1129:39 - know why I said it like that so this is
1129:41 - the housing so what we're going to do
1129:42 - right here is do housing and it'll
1129:45 - autocomplete for us um so that housing
1129:47 - should be in there now next one is the
1129:50 - data exploration in SQL that was with
1129:52 - the co so we're going to get rid of this
1129:54 - we're going to say Co um because that is
1129:57 - the image that I have right over here
1129:59 - and then the last one is excuse me
1130:02 - Tableau so let's go right over here
1130:04 - let's do TBL
1130:06 - low let's get rid oh I got to save that
1130:10 - uh contrl s perfect and now let's look
1130:14 - at
1130:16 - it there you go there you go go oh this
1130:18 - one still says full story go change that
1130:20 - um I'm going to go change it just
1130:23 - doesn't feel
1130:24 - right uh view project oh that's not how
1130:28 - you spell
1130:30 - it okay contrl s perfect okay so now
1130:36 - this looks a lot better um and when we
1130:39 - host it um through GitHub Pages or
1130:42 - github.io this is going to be what it
1130:45 - looks like I mean it is and you can add
1130:48 - a lot more to it you can take away from
1130:50 - it you can add as many projects as you
1130:51 - want you can keep adding you can copy
1130:53 - those articles or those posts and you
1130:55 - can just keep adding them um so this is
1130:59 - kind of what it's going to look
1131:01 - like
1131:02 - and it was not that hard I don't think I
1131:05 - hope this was not too difficult I really
1131:07 - don't think it is um it's really just
1131:09 - using a template and kind of
1131:10 - understanding a little basics of HTML so
1131:14 - um we are going to take this and we we
1131:16 - have this saved already we have this all
1131:19 - saved what we are going to do now is
1131:22 - upload this to GitHub so let's go right
1131:25 - over here let's go to here and let's go
1131:29 - to
1131:31 - repositories and how do where where's
1131:34 - the new one oh I need to sign in okay
1131:37 - I'm going to get rid of this part so you
1131:38 - can't see it so we are going to say a
1131:41 - new
1131:42 - repository we're going to call it Alex
1131:45 - the analyst
1131:46 - 2 .
1131:49 - github.io so we're going to write it
1131:51 - just like that you know if your name's
1131:54 - um
1131:55 - Alex Jimmy I don't know why I said Jimmy
1132:00 - Alex Jimmy Alex jimmy. github.io you can
1132:03 - always go back after the fact and change
1132:05 - this so it's not a big deal whether you
1132:07 - change it or not and we're going to
1132:10 - create this
1132:12 - repository we're going to say upload an
1132:14 - existing
1132:15 - file and instead of choosing them what
1132:18 - we're going to do is just go right over
1132:20 - here go to this and we're just going to
1132:23 - copy this in or not copy it in but drag
1132:25 - it in okay so we're going to take this
1132:27 - drag it in right here and it can take a
1132:29 - it'll take a little bit has a 75 but it
1132:32 - shouldn't take that
1132:36 - long and let's just wait for it I taking
1132:39 - a sip of water I
1132:41 - apologize but it is literally uploading
1132:43 - just everything that we had in there so
1132:44 - all the updates and all the changes and
1132:46 - all the stuff that we um had
1132:48 - and it looks like it's done so let's
1132:50 - just
1132:51 - write initial
1132:53 - commit commit
1132:55 - changes it is processing
1132:59 - it all right and it should be done very
1133:02 - very soon as long as I have a good
1133:04 - internet
1133:06 - connection we shall
1133:11 - see stick with me it's taking its
1133:16 - time um while while it's loading let's
1133:19 - go over to oh oh there it is so perfect
1133:21 - so here's everything that we have has
1133:23 - this read me that it generated let's
1133:25 - over to
1133:27 - settings and we have this U
1133:31 - github.io and if we go right down here
1133:34 - to GitHub Pages pages settings now has
1133:38 - its own dedicated tab let's check it out
1133:40 - here so it is
1133:44 - um it's currently disabled but we're
1133:46 - going to say want it to do pull from the
1133:48 - main um I think it's the doc we'll see
1133:52 - I'm going to save this your site is
1133:54 - ready to be published let's open this up
1133:57 - okay site not found maybe it's from the
1134:01 - root
1134:03 - save um your site is having a build a
1134:06 - problem let me see if I can actually
1134:09 - change the name I already have an Alex
1134:11 - analyist but I'm GNA see it's already
1134:13 - taken um I'm just going to try this one
1134:15 - one more time oh and now it's working uh
1134:19 - I have no idea why it uh didn't work
1134:22 - before but this is fantastic it was
1134:25 - giving me all this I was maybe I was
1134:27 - just reading too much into that I had I
1134:29 - had never tried to create another
1134:32 - umio or or GitHub pages on this so
1134:36 - anyways thanks for sticking with me
1134:37 - through all that um stuff so now we have
1134:41 - our actual website um it doesn't look
1134:44 - the same up here because of that thing
1134:47 - that we were just looking at it should
1134:49 - just be this part right here but um this
1134:52 - is an actual website now it's being
1134:54 - hosted through GitHub and it's
1134:56 - completely free if you want to pay you
1135:00 - can hide this from your GitHub um your
1135:03 - repository has to be public uh something
1135:05 - I didn't mention when you're doing this
1135:08 - your repository has to be public um if I
1135:12 - change the visibility to private um you
1135:15 - will not be able to see it anymore
1135:18 - you'll have to then pay if you want to
1135:19 - make this repository private you have to
1135:21 - then pay I think it's like $4 a month or
1135:23 - something like that so worth looking
1135:25 - into um if you don't want to display
1135:28 - that on your GitHub worth looking into
1135:31 - but this is our final product I mean it
1135:34 - looks pretty fantastic and you can use
1135:36 - any of these templates right there are
1135:38 - lots of different templates that are
1135:40 - fantastic I mean they look amazing they
1135:43 - look professional um it's really up to
1135:45 - your style like this one looks kind of
1135:48 - cool a little bit um edgy for for my
1135:50 - taste but uh this one looks really good
1135:52 - too might might be able to add some more
1135:54 - narrative to that one so again go
1135:57 - through it make your make a good choice
1136:00 - in it and then update it how we updated
1136:03 - it uh I will include the um let's see I
1136:08 - will include everything that's in here
1136:10 - and I'll keep this on my on this GitHub
1136:13 - that you can go in there and if you want
1136:15 - to download these images you can
1136:16 - download the images that I I used um or
1136:19 - you can go find your own just um you
1136:20 - know look for try to get like HD images
1136:23 - on Google just type in Google Images and
1136:26 - search for whatever image you want to
1136:27 - search try to get an HD image with that
1136:30 - being said that is the entire project I
1136:32 - I I I hope this didn't go too long um
1136:34 - this may have gone you know this may
1136:37 - have gone like 30 45 minutes but in the
1136:40 - end of it at the at the end which is
1136:42 - where we are now we have an entire
1136:44 - website it was completely free and I
1136:46 - hope that you can host the projects and
1136:48 - you can create create more projects I
1136:50 - will be coming out with more projects
1136:52 - myself that hopefully will be
1136:53 - interesting to you in the future so with
1136:56 - that being said thank you guys for
1136:58 - joining me for you who stuck it out to
1137:00 - the very end you are fantastic you know
1137:02 - send me a post your website on LinkedIn
1137:05 - and tag me in it because I love seeing
1137:07 - um you guys do these projects and this
1137:09 - stuff so I'm super excited to see all of
1137:11 - these um that you guys tag me on on
1137:14 - LinkedIn and whatnot so with that being
1137:16 - said this is it I hope you learned
1137:18 - something I hope that it worked for you
1137:21 - and I appreciate you watching be sure to
1137:23 - like And subscribe below and I will see
1137:25 - you in the next video
1137:28 - [Music]
1137:38 - goodbye what's going on everybody
1137:40 - welcome back to another video today I'm
1137:42 - going to help you create a data analyst
1137:46 - resume
1137:47 - [Music]
1137:50 - now when I say data analyst rume it's
1137:52 - not that much different than a regular
1137:54 - rume except that it's going to be
1137:56 - catered for a data analyst job in just a
1137:59 - second we're going to take a look on my
1138:00 - screen at a sample resume I'll have the
1138:02 - template in the description so you can
1138:03 - just go and download it and fill in your
1138:05 - information but it's a fantastic
1138:07 - starting place to actually creating your
1138:08 - resume when we're looking at this resume
1138:10 - we'll take a look at each section kind
1138:12 - of dissect each part of it and then at
1138:14 - the very end I'll give some extra tips
1138:16 - on what you should include and how to
1138:17 - actually write your rume as well so
1138:19 - without further Ado let's jump onto my
1138:20 - screen take a look at the rume and see
1138:22 - how you can create your own data analyst
1138:24 - resume so here's our sample resume I'm
1138:26 - just going to walk through the entire
1138:27 - thing super quick and then we'll break
1138:28 - down each section individually I'll give
1138:30 - my thoughts and some tips on each
1138:32 - section and remember you can download
1138:34 - this exact thing in the description
1138:36 - below I'll have a link I'll probably put
1138:38 - it on my GitHub or somewhere else but
1138:39 - it'll be free to download uh so you can
1138:41 - go ahead and do that but let's zoom in
1138:43 - just a little bit so at the very top we
1138:46 - have our header we have some just basic
1138:49 - uh contact information then we have
1138:51 - skills then we have projects and notice
1138:53 - the projects are up here at the top and
1138:55 - we'll get to that later about the order
1138:57 - of where you should be putting your
1138:58 - things then we have work experience and
1139:01 - then we have education so really quickly
1139:04 - I'm going to zoom out and I hope you can
1139:06 - still see it the order is actually quite
1139:09 - important now there is one piece that is
1139:11 - not in here right now and that is a
1139:14 - summary section I don't have a summary
1139:16 - section on my real resume I just I don't
1139:19 - think it's useful or helpful I don't
1139:21 - have one you can include one and it
1139:23 - would be right up here at the very top
1139:25 - now why do we have the skills and
1139:27 - projects at the top well it's because
1139:30 - that most people who are trying to break
1139:33 - into a data analytics don't have any
1139:34 - experience in data analytics if I am
1139:37 - reading this resume as a hiring manager
1139:40 - and the first thing that I look up here
1139:41 - and I see is experience and it's not
1139:44 - analyst it's a teacher or a nurse or
1139:46 - something I'm going to be like
1139:47 - this person doesn't have any experience
1139:49 - I don't want to hire them the first
1139:51 - thing that you want to have in your
1139:52 - resume is something that is good for the
1139:54 - hiring manager to see the first several
1139:56 - things you should put all your best
1139:57 - stuff at the top that's my uh what I
1139:59 - believe so I think that these skills are
1140:03 - really strong a lot of great skills and
1140:05 - then these projects are all really good
1140:07 - projects now this is just a sample these
1140:09 - aren't all real projects um or they are
1140:11 - real real projects they're just not you
1140:14 - know ones that I built myself it's just
1140:16 - a sample so uh then right here we have
1140:19 - our work experience now if you're like I
1140:21 - said a nurse or a teacher or a lawyer or
1140:22 - something that's not relevant to data
1140:24 - analytics you want that at the bottom um
1140:26 - and then you're going to want to tie in
1140:28 - uh some things in these descriptions and
1140:29 - then the education at the bottom my
1140:31 - education was terrible okay I had a
1140:33 - bachelor's in recreational therapy which
1140:36 - had nothing to do with data analytics so
1140:38 - for a tech job has was not good I always
1140:40 - had mine at the bottom so let's start at
1140:43 - the very top and walk through each
1140:45 - section so
1140:47 - at the very top you want to have maybe a
1140:50 - title but for sure your full name you
1140:53 - definitely want to include your phone
1140:55 - number if you're okay with them calling
1140:56 - you but definitely an email for sure
1140:59 - include things like a LinkedIn profile
1141:01 - or a GitHub profile you can also put
1141:03 - your portfolio in fact I highly
1141:05 - recommend putting your portfolio because
1141:06 - it just looks good or if they check it
1141:08 - out that's a really good thing and then
1141:10 - your location cuz sometimes your job is
1141:12 - going to be location based whether
1141:13 - you're in Dallas or another Metropolitan
1141:15 - City it's just nice ni to have that on
1141:18 - there this should be the simplest one to
1141:20 - fill out unless you haven't built out
1141:22 - something like a portfolio you just
1141:24 - don't include it um but this one should
1141:26 - be the simplest one right you're just
1141:28 - putting contact information maybe a link
1141:30 - to a website next we have the skill
1141:32 - section and this one on my own personal
1141:34 - resume I have at the very top I
1141:36 - typically recommend anyone who does not
1141:38 - have experience who is trying to break
1141:39 - in to data analytics to put this at the
1141:41 - top as well and have these skills and
1141:44 - know these skills that's important um
1141:46 - but when the hiring manager first
1141:48 - initially sees this there's just going
1141:50 - to be a mental check okay they have the
1141:52 - skills that we're looking for let's move
1141:53 - on to the rest of the resume um but you
1141:55 - want as many mental checks for what
1141:58 - they're looking for at the beginning
1142:00 - just going to I'm going to keep
1142:01 - repeating that um this is how I
1142:04 - personally write my skills so I write
1142:07 - something like SQL and then I'll say SQL
1142:09 - Server my SQL postrace SQL now I have
1142:12 - used all these different types of SQL in
1142:14 - my actual job if you don't you haven't
1142:16 - done done that and you're just starting
1142:17 - out maybe you put something like um you
1142:21 - know
1142:21 - subqueries store procedures joins
1142:24 - whatever the actual things within SQL I
1142:27 - don't really think I don't recommend
1142:28 - that as much because typically people
1142:32 - know what SQL is like if they use SQL
1142:34 - they know what SQL is so they're just
1142:35 - going to expect that you know those
1142:36 - things now for something like python
1142:39 - it's different because there are
1142:40 - packages something are there are
1142:41 - packages and libraries within them so
1142:43 - you can specify I have worked with
1142:46 - pandas in my actual job and I look for
1142:48 - people who know pandas as well because
1142:50 - you know we use it so actually
1142:52 - specifying these packages or libraries
1142:54 - is really helpful so this is how I would
1142:57 - put these things on a resume now this is
1143:00 - another resume this is our sample two
1143:02 - I'm going to maybe include this one down
1143:04 - below although I don't like this format
1143:06 - as much but if you like it you can but
1143:09 - here's another way that you can um show
1143:11 - these skills just a different way to do
1143:12 - it I want to show you both ways um we
1143:15 - have like Python and the libraries
1143:16 - underneath it I've even seen it to where
1143:18 - people will write out almost like um let
1143:20 - me go down here they'll write out like a
1143:22 - narrative um they'll do
1143:25 - Python and then they'll have like a
1143:26 - colon and then they'll say use to um
1143:32 - manipulate data and I'm not spelling
1143:34 - that right in pandas dot dot dot and
1143:36 - they've write it out you can do that as
1143:38 - well again I'd like bullet points
1143:41 - because it's to the point it's exactly
1143:42 - what you need let's get rid of this one
1143:44 - real quick so this is the one
1143:47 - uh that I like so that's the skill
1143:50 - section let's move down to the projects
1143:53 - now the project section is almost
1143:56 - primarily for people who are just
1143:58 - starting out once you get experience
1144:00 - typically you maybe have one project on
1144:02 - there or no projects at all but the
1144:04 - project section is used as kind of um
1144:07 - inl of actual experience right I've
1144:10 - always said that you need to build
1144:12 - projects not just for your resume but
1144:15 - also for the interviews so so then when
1144:17 - you get into an interview you can point
1144:18 - to these projects and say yes I've used
1144:20 - SQL I did it in this project and they
1144:22 - may have seen it and you can walk them
1144:24 - through how you actually used it it
1144:26 - gives you more credibility than just
1144:28 - saying you know how to use SQL So within
1144:31 - the project section we're going to have
1144:33 - a project like this one says data
1144:35 - science job market exploratory data
1144:37 - analysis so this is a personal project
1144:40 - and then within it they did some really
1144:42 - great stuff here's usually what I
1144:45 - recommend and this is in here which is
1144:47 - you specify what you did you say I used
1144:49 - Python and what did you do to analyze
1144:52 - this and gain insights in the job market
1144:55 - then you walk through some of the things
1144:56 - that you actually did things like regex
1144:58 - techniques you used pandas matplot lib
1145:01 - you built a wordcloud these are keywords
1145:04 - that somebody will look for and they
1145:06 - even highlighted them which I personally
1145:08 - like and do as myself they highlighted
1145:11 - these things so that the viewer or the
1145:13 - um hiring manager is actually seeing
1145:15 - them making sure that they're bold so
1145:16 - that they are catching their eye so I
1145:19 - personally do this and I recommend this
1145:21 - that's all it needs to be it just needs
1145:23 - to be I built a Tablo dashboard doing
1145:26 - this from this data set I cleaned it in
1145:28 - SQL and you show those skills something
1145:31 - that's important in both the skill
1145:33 - section and the project section is using
1145:36 - and highlighting your skills as much as
1145:39 - possible especially if you don't have
1145:42 - any experience if you've never had a job
1145:43 - before once you have a job and you come
1145:46 - down to like the work experience then it
1145:47 - kind of speaks for you but if you don't
1145:50 - you want the projects and the skills to
1145:52 - speak towards your skills and
1145:53 - credibility so we have this right here
1145:56 - now one thing that's not in here that I
1145:58 - actually do recommend is a hyperlink
1146:00 - maybe right here or actually this being
1146:03 - a hyperlink to the project because they
1146:06 - might read this and be like I we work
1146:08 - with you know data science job market
1146:11 - data I don't know and then they'll click
1146:13 - on this link and they can see your work
1146:15 - that is the one thing that I would
1146:16 - change change in this other than that
1146:18 - this is exactly how I would have it very
1146:20 - very very similar to my own um and a lot
1146:22 - of this that I did I actually took from
1146:25 - other resumés and formatted how I prefer
1146:27 - and like it um so again some of this is
1146:30 - personal preference and you can change
1146:31 - it however you want that's just how I
1146:33 - like it so that is the project section
1146:36 - now we're going to go down to the work
1146:37 - experience section now this person does
1146:39 - have a little bit of analyst uh
1146:43 - experience so you know if you don't
1146:46 - that's okay
1146:47 - but you put your previous experience now
1146:49 - here's what I recommend if you've been a
1146:51 - teacher for 15 years you've been a nurse
1146:53 - for 10 years you've had 10 different
1146:55 - jobs don't put all your experience on
1146:56 - here um maybe put your last two jobs
1147:00 - going back maybe three years I don't
1147:02 - recommend you filling it up because it's
1147:04 - not going to be super relevant unless
1147:06 - you're applying for a healthc care data
1147:07 - analyst position and you have a Nursing
1147:09 - degree then it's relevant and that
1147:11 - experience is super helpful because it's
1147:12 - domain experience right then you may go
1147:15 - back five years just you know use your
1147:17 - discretion but what you need to include
1147:20 - of course your title where you worked
1147:22 - your location and the times that's
1147:24 - standard for almost any resume but
1147:26 - within here uh what you really want to
1147:28 - do is highlight again the skills if you
1147:30 - can if you can't that'll change but in
1147:34 - here he says implemented a new reporting
1147:35 - using Excel pivot and VBA which reduced
1147:38 - processing time by 50% these types of um
1147:42 - quantitative information I reduced time
1147:45 - I I I saved the company money I I did
1147:48 - something quantitative putting that in
1147:50 - here is always helpful always highly
1147:52 - recommended although it can be tough to
1147:54 - measure these things right typically
1147:56 - what I recommend especially if you're
1147:58 - first starting out is to highlight
1147:59 - skills if you're a teacher you've
1148:01 - probably used Excel and you've probably
1148:03 - used Excel for closer to data analytics
1148:05 - than you think just in a teacher way and
1148:08 - not a data analytics way but you can
1148:10 - reward these things and make them sound
1148:12 - good if you are a a nurse like I was
1148:15 - saying youve used used Excel you've used
1148:18 - a health information system you've used
1148:21 - uh some type of database talk to that
1148:23 - include that in here um and it can be
1148:26 - hard to write these out and I'm going to
1148:28 - show you away in just a little bit about
1148:30 - how you can write these out and think
1148:31 - about these things or have a way to help
1148:33 - you write them or give you ideas we'll
1148:35 - get to that in a second lastly we have
1148:38 - the education piece this is again really
1148:40 - simple at the very bottom education what
1148:42 - your degree was where you went um and if
1148:45 - you have you know some help ful things
1148:47 - to include you can do that and then when
1148:49 - you actually went now you can include
1148:51 - other things in here as well like boot
1148:53 - camps if you went to a boot camp or you
1148:55 - could also include things like a GPA
1148:57 - although I don't personally recommend it
1148:59 - GPA has never been anything that I've
1149:01 - ever cared about or I've seen anyone
1149:03 - care about ever um so you don't normally
1149:06 - have to include it one other thing that
1149:08 - you can include at the very bottom is
1149:10 - something like
1149:11 - certifications uh I personally don't put
1149:13 - a lot of stock in certifications unless
1149:16 - it is one that I have recommended in
1149:17 - previous video like the Tableau
1149:19 - certification or Tableau desktop
1149:21 - certification if you're applying to a
1149:23 - job that uses taow that actually could
1149:25 - be really good so definitely include
1149:27 - that but ones on udem me ones on corsera
1149:31 - or like my Alex the analyst boot camp
1149:33 - that I have on my channel I wouldn't
1149:35 - really include that in your resume it's
1149:37 - mostly for learning if you get something
1149:40 - like the Tableau one or the AWS uh Cloud
1149:43 - one or the um Azure Cloud one those are
1149:45 - all actual certifications that can help
1149:47 - you and give you credibility towards a
1149:49 - certain skill now really quickly let's
1149:50 - just take a glance at the other resume
1149:52 - this is resume 2 so we have the
1149:54 - education at the top doesn't have to be
1149:57 - at the top unless it's relevant which
1149:58 - you could put at the top we have a skill
1150:00 - section they again this is the projects
1150:02 - same projects and then work experience
1150:04 - this is just a little bit different um
1150:06 - order so you can do it like this as well
1150:09 - in different way you can write the
1150:10 - skills and you can also include a
1150:12 - summary section as well so that's the
1150:14 - meat and potatoes of how I would create
1150:16 - create a data analyst resume now writing
1150:18 - it is actually a different Beast right
1150:20 - you have to actually write it out get
1150:22 - something on the resume and then apply
1150:24 - using that resume but it can be hard to
1150:26 - come up with these ideas so uh I just
1150:29 - want to show you something that a lot of
1150:31 - people have been using I personally
1150:32 - haven't written a resume in a little
1150:34 - while so I don't use it for my own
1150:36 - resume or haven't used it but I will um
1150:38 - and that's using chat gbt or some
1150:40 - variation whether it's on Bing or you
1150:42 - know you get some different version or
1150:44 - some new product that's out there at the
1150:45 - moment I'm just going to show you how to
1150:47 - do it in chat GPT some of the things
1150:48 - that you can prompt it to do and that'll
1150:51 - be it I'm just going to show you kind of
1150:53 - some ideas that it can generate for you
1150:55 - to help you write these things all right
1150:56 - so here in my screen we're on chat gbt
1150:58 - if you haven't used it I'll leave a link
1151:00 - in the description I also have a whole
1151:01 - video on how to use chat GPT for a data
1151:03 - analysis um so I like chat GPT now I've
1151:07 - already written out these questions
1151:08 - because I don't want to wait for the
1151:09 - responses but here's what I asked it to
1151:11 - do and you can do some variation of this
1151:13 - whether you're a nurse or a lawyer or a
1151:16 - teach teacher or whatever I said I'm a
1151:18 - math High School teacher trying to
1151:19 - become a data analyst how can I use my
1151:21 - experience on my resume to help me get a
1151:23 - job this is just to help provoke some
1151:26 - ideas and it says you know you most
1151:28 - likely have some skills emphasize your
1151:30 - quantitative skills so those are some of
1151:32 - the things you can focus on showcase
1151:34 - your ability to commute complex Concepts
1151:36 - which is really important in data
1151:37 - analytics being able to present
1151:39 - information which teachers have
1151:41 - highlight your experience with
1151:42 - technology hopefully you're using some
1151:44 - type of uh you know database for
1151:46 - students or you know Excel or something
1151:48 - like that you can highlight that and
1151:50 - showcase your ability to solve problems
1151:52 - now the next thing that I asked it was I
1151:54 - built a covid tableau dashboard using
1151:57 - Tableau how can I add this to my resume
1152:00 - and then it's going to tell you exactly
1152:02 - how you can do that it's going to say
1152:04 - include the link to your dashboard which
1152:05 - I also recommend provide a brief
1152:07 - description highlight your data
1152:09 - visualization skills include screenshots
1152:11 - or images which that's what I would be
1152:12 - putting in the project itself not on
1152:14 - your resume then provide context for the
1152:17 - data all really good stuff really great
1152:20 - now the last thing is kind of what I'm
1152:21 - trying to get at as a whole it can help
1152:24 - you write things so I'm going to say
1152:26 - write a two sent I said write a two
1152:28 - write two sentences highlighting my
1152:30 - covid Tableau dashboard to add to my
1152:32 - resume and it's going to say developed a
1152:35 - covid tablet dashboard to visualize
1152:37 - pandemic Trends using real-time data
1152:38 - sources demonstrating strong data
1152:40 - visualization and Analysis skills so
1152:43 - this can help you generate those
1152:45 - descriptions in your work experience it
1152:47 - can help you generate the descriptions
1152:49 - in your projects and this can be really
1152:52 - helpful to just generate some ideas cuz
1152:53 - I personally really struggle with like
1152:56 - highlighting my skills and descriptions
1152:58 - within those things this can be a way to
1153:00 - kind of help you do that so don't you
1153:03 - know just copy and paste but let it
1153:05 - prompt you let it give you ideas now the
1153:07 - last thing that I want to mention is
1153:09 - just your overall resume as a whole the
1153:11 - template that I use the template that I
1153:13 - recommend is very very friend friendly
1153:16 - to these automated systems that check
1153:18 - your resume if you did not know most
1153:21 - companies especially big companies use
1153:23 - these automated systems that scan your
1153:25 - resum see if it has what they're looking
1153:27 - for and then that rume if it gets
1153:29 - through that system gets passed on to a
1153:32 - recruiter or hiring manager typically
1153:34 - most companies don't go straight to the
1153:36 - hiring manager so you need a resume that
1153:39 - can pass through those initial systems
1153:41 - and pass those tests the RS that I've
1153:43 - shown you today will do that they have
1153:45 - bullet points they have the keywords
1153:46 - they have everything you need that's why
1153:48 - I recommend or partially why I recommend
1153:50 - this type of resume other ones that have
1153:53 - images and different fonts and different
1153:55 - stylings can cause issues with these
1153:57 - automated systems where it just doesn't
1153:59 - read it properly or you know it doesn't
1154:01 - read the right words that you want it to
1154:04 - read so just know that these types of
1154:07 - résumés have different uses right you're
1154:09 - not just handing it off to somebody to
1154:11 - where they can read it and it's needs to
1154:12 - be visually stimulating really what you
1154:15 - need is you needed to get through those
1154:16 - initial systems which these resumés uh
1154:19 - if you write them well you have good you
1154:21 - know skills and the right things on your
1154:22 - resume they will pass through that first
1154:25 - layer to get to those hiring managers so
1154:27 - again be sure to download those those
1154:28 - are completely free I just I highly
1154:31 - recommend using them I think they're
1154:32 - really good so be sure to download those
1154:34 - use those just put in your own
1154:36 - information be sure to build out your
1154:37 - own projects don't just keep the ones
1154:39 - that are on there because you'll need to
1154:41 - be able to speak to them sometimes
1154:42 - recruiters or hiring managers are going
1154:44 - to ask you about them how you build it
1154:46 - what you did and you can also point to
1154:47 - those projects in your actual interview
1154:50 - so I hope that this was helpful I hope
1154:52 - that your resume is ready to go I hope
1154:54 - that you ready to start applying for
1154:55 - those data analyst jobs thank you guys
1154:57 - so much for watching I really appreciate
1154:59 - it if you like this video be sure to
1155:01 - like And subscribe below and I'll see
1155:02 - you in the next
1155:05 - [Music]
1155:14 - video what's going on everybody my name
1155:17 - is Alex freeberg and today we're going
1155:18 - to be walking through my top three tips
1155:20 - on how to use LinkedIn to land a job
1155:22 - LinkedIn is a fantastic place to look
1155:24 - for a job it's its own little ecosystem
1155:26 - where career-driven people can connect
1155:28 - and talk with one another and help each
1155:30 - other find jobs I personally have landed
1155:32 - jobs through Linkedin and so I know how
1155:33 - effective it can be let's jump over to
1155:35 - my screen and I'm going to show you my
1155:37 - top three strategies that I have found
1155:39 - to be the most successful to actually
1155:40 - finding a job so I'm logged into my
1155:42 - completely Anonymous account here and
1155:44 - I'm going to show you the very first tip
1155:45 - which is you shouldn't be just applying
1155:47 - to a position you should be actually
1155:48 - reaching out to the recruiter and I'm
1155:50 - going to show you exactly how to do that
1155:52 - so the first thing that we have to do is
1155:53 - actually find a job that we want to
1155:55 - apply to so let's go to the job section
1155:57 - right over here and let's search for
1156:01 - data
1156:03 - analyst and let's do that
1156:05 - in let's do
1156:08 - Chicago because why not uh so it's going
1156:11 - to search for data analy positions in
1156:14 - Chicago we have one right here let's see
1156:17 - what it looks like cuz you know I don't
1156:19 - want to apply to jobs that I'm not
1156:21 - extremely qualified for so this is a job
1156:23 - that I want to apply for and before I
1156:25 - actually go and applies to the job I
1156:27 - want to see if I can reach out to a
1156:28 - recruiter and talk to them beforehand so
1156:30 - let me show you how to do that so what
1156:31 - we're going to do is actually click on
1156:33 - the company right here it's going to
1156:34 - take us to basically their LinkedIn
1156:36 - profile page for their entire company
1156:38 - and we're going to scroll down we're
1156:39 - going to go over to
1156:41 - people and then we're going to search
1156:43 - for
1156:44 - recruiter
1156:47 - so if we scroll down all the way to the
1156:49 - bottom we can see that there are
1156:50 - recruiters that actually work inh house
1156:52 - for this company and so now would be a
1156:54 - time where I actually reach out to some
1156:55 - of these recruiters and I say hey I see
1156:57 - a job that I really like I think I'm
1156:59 - really qualified for and I would love to
1157:00 - talk more about it with you you can ask
1157:02 - them things about the job to make sure
1157:03 - that it is a good fit for you and then I
1157:06 - highly recommend you asking them what
1157:07 - they think is the best way to apply for
1157:09 - this job to make sure that your resume
1157:11 - gets noticed and you get an interview
1157:12 - since they are a recruiter who works at
1157:14 - this company they may be the the one
1157:15 - who's actually going to be looking at
1157:17 - these resumés and so they may give you a
1157:18 - tip on the best way to actually apply
1157:20 - they may also just ask you to send them
1157:22 - your ré directly that they can look at
1157:24 - it or maybe later on down the line this
1157:26 - actually is a person who is reviewing
1157:27 - resumés and so if they come across your
1157:29 - resume they may be able to put a face to
1157:31 - the name and that may give you bonus
1157:33 - points I'm going to leave a template
1157:34 - script in the description in case you
1157:35 - don't know exactly what you want to say
1157:37 - to this recruiter and it'll give you
1157:39 - just a baseline of some of the things
1157:40 - that you might want to say number two is
1157:42 - to actually ask for a referral now if
1157:44 - you don't know what a referral is it is
1157:45 - is where somebody who already works at
1157:47 - the company can refer you to a specific
1157:49 - job and then might get you a little bit
1157:51 - higher on the list for interviews so I
1157:52 - highly recommend reaching out to
1157:54 - somebody who already works at that
1157:55 - company and ask if they're willing to be
1157:57 - a referral for you I get people reaching
1157:59 - out to me all the time asking to be a
1158:01 - referral for them for my company and
1158:03 - nine times out of 10 I say yes I always
1158:05 - ask to see their resume first just to
1158:07 - make sure that their resume aligns with
1158:08 - the position at least a little bit but
1158:10 - there's basically no harm in me being a
1158:12 - referral for somebody in fact I may
1158:14 - actually get a bonus if that person ends
1158:16 - up getting hired and so for the most
1158:18 - part there's almost no risk for the
1158:19 - employee to actually being a referral
1158:21 - and so a lot of times they will say yes
1158:23 - now let me show you how to do that and
1158:25 - it is very similar to finding a
1158:26 - recruiter so we're going to stay on this
1158:28 - people section but instead of searching
1158:30 - for a recruiter we're going to search
1158:31 - for a job title that is similar to yours
1158:34 - so let's actually see if they do already
1158:35 - have any data analysts and if they do
1158:38 - that is the person that we're going to
1158:39 - reach out to because that is the person
1158:41 - we'll probably have the best connection
1158:42 - with so it looks like we have six
1158:44 - employees and let's SC SC down and so it
1158:46 - looks like all these people have data
1158:48 - related jobs and so I would reach out to
1158:50 - these people and say I saw an open data
1158:52 - analyst position at your company I would
1158:53 - love to know more about your company as
1158:55 - a whole and then you can talk to them a
1158:57 - little bit and then in the end your goal
1158:58 - is to ask them for a referral and if
1159:01 - that happens that is fantastic and then
1159:02 - you can go ahead and apply for the job
1159:04 - and mark them as a referral for you now
1159:06 - my third tip on how to get a job through
1159:08 - Linkedin is to actually have recruiters
1159:09 - reach out to you so let me show you how
1159:11 - to do that the first thing we're going
1159:13 - to do is actually go over to my profile
1159:15 - here and we'll click view
1159:18 - profile now there's a few things that we
1159:20 - want to make sure that we have on here
1159:22 - so that recruiters can reach out to us
1159:24 - the first thing that I want to do is to
1159:26 - actually come to this section right here
1159:27 - which is show recruiters you're open to
1159:29 - work and when I click on this I can
1159:31 - actually choose some job titles and some
1159:33 - locations where I actually want to apply
1159:34 - and have recruiters reach out to me and
1159:36 - so right now I have data analyst I have
1159:39 - in the DFW area which is where I live I
1159:41 - can also add titles like business
1159:44 - analyst um and then maybe Junior data
1159:46 - analyst entry-level data analyst or
1159:48 - things like that that could potentially
1159:50 - have recruiters reach out to me for
1159:51 - positions that I'm interested in and
1159:53 - then you can say that you're immediately
1159:54 - and actively applying and you can also
1159:56 - say that you're only looking for
1159:58 - full-time positions or contract
1159:59 - positions and then you can actually add
1160:01 - this to your profile and I only want
1160:03 - recruiters to see that because I do
1160:05 - currently have a job at McDonald's and
1160:07 - so I don't want McDonald's firing me
1160:09 - because I'm looking for employment
1160:10 - elsewhere so let's save that and it
1160:13 - looks like it was updated and so now
1160:15 - when recruiters are searching for
1160:16 - candidates for a specific position you
1160:18 - will be on that list so that they can
1160:20 - find you and reach out to you something
1160:21 - else I should mention is on your profile
1160:23 - page I would try to have some type of
1160:25 - professional photo so that you look
1160:27 - really good I would also try to include
1160:28 - data analyst somewhere in your title if
1160:30 - you already have a data analyst job and
1160:32 - you're looking for another one you can
1160:33 - just have your previous company but if
1160:35 - you're looking for a data analyst job
1160:36 - you can always put seeking data analyst
1160:38 - position or something like that another
1160:40 - thing I think is really important is
1160:42 - having really good descriptions for your
1160:44 - previous work I don't currently have
1160:46 - this but I would go a little bit into
1160:47 - the work that I actually do make sure
1160:50 - that the experience matches kind of what
1160:51 - you're looking for if you do have
1160:53 - previous experience if not that's
1160:54 - totally fine the next section on your
1160:56 - profile page that I would recommend
1160:57 - looking at and updating is your skill
1160:59 - section and so you want to go in there
1161:01 - and make sure you have all of your
1161:02 - relevant really data analyst heavy
1161:05 - skills on there specifically hard skills
1161:07 - because soft skills aren't going to
1161:09 - translate too much into this section I
1161:11 - would definitely stick to things like
1161:12 - SQL python Tableau Excel things that
1161:15 - data analysts are going to use because
1161:17 - this is where they're going to actually
1161:18 - look and see if you have the skills that
1161:20 - they are looking for for that position
1161:22 - when I was applying to jobs in only
1161:23 - applying to job postings and not using
1161:25 - any of these strategies my success rate
1161:28 - was 0.04 which means out of 1,000
1161:31 - applications that I filled out and sent
1161:32 - my resume to I only heard back from four
1161:34 - of them to actually get an interview but
1161:36 - with these strategies I was able to get
1161:38 - that up to 10% and at my best I was able
1161:40 - to get that up to 15% but that's because
1161:42 - I was applying to a lot less positions
1161:44 - and I was targeting jobs that I really
1161:45 - wanted to work for and so I put in more
1161:47 - effort in order to contact people and
1161:49 - work with Recruiters in order to get
1161:50 - that job I genuinely hope that these
1161:52 - strategies can be helpful for you
1161:54 - especially if you're trying to apply for
1161:55 - jobs right now thank you guys so much
1161:57 - for watching I really appreciate it if
1161:59 - you liked this video and got anything
1162:01 - out of it at all be sure to like And
1162:02 - subscribe below and I'll see you in the
1162:04 - next video hello everybody
1162:05 - congratulations if you are watching this
1162:08 - that means that you completed the data
1162:09 - analyst boot camp if you haven't don't
1162:11 - keep watching this is only for people
1162:13 - who have completed the data analyst boot
1162:14 - camp playlist on my YouTube channel woo
1162:17 - all right now that we filtered those
1162:19 - people out I'm going to show you how you
1162:20 - can download your certificate and your
1162:22 - certification now that you've completed
1162:24 - the data analyst boot camp I will leave
1162:26 - a link in the description but let's go
1162:27 - on to my screen I'm going to show you
1162:28 - how to actually access this and download
1162:31 - your certification all right guys don't
1162:32 - go around telling people this or sharing
1162:34 - this uh but this is our data analytics
1162:37 - boot camp on the Alex the analyst GitHub
1162:39 - right up here I will have this link in
1162:41 - the description what you can go ahead
1162:43 - and do is you can come right here you
1162:45 - can download this you'll just right
1162:46 - click or click download and you just do
1162:48 - something like save image as um or you
1162:51 - can come to this one this is the one
1162:52 - that I think is the the real money maker
1162:54 - here uh this is the certificate of
1162:56 - completion for the data analytics boot
1162:59 - camp I have my not signature but my name
1163:02 - as well as U my position with a blank
1163:06 - space right here to fill in your name
1163:07 - feel free to put this on LinkedIn or
1163:09 - Twitter or Instagram and tag me in that
1163:11 - because I would love to just say
1163:12 - congratulations because honestly it's a
1163:14 - lot lot of work to go through all those
1163:16 - videos and learn all of those skills so
1163:18 - congratulations I hope that you learned
1163:19 - something along this journey a new skill
1163:21 - a new thought a new idea and I'm proud
1163:23 - of you I'm proud of you for putting in
1163:25 - the work it's not easy but you did it
1163:27 - and I hope that you came out on the
1163:29 - other side better for it so congrats
1163:31 - I'll see you in the next
1163:34 - [Music]
1163:44 - video