00:00 - this is a great project to improve your
00:02 - front-end skills you will build an SEO
00:05 - optimized blog with nextgs content layer
00:08 - and Tailwind CSS codebux created this
00:10 - course he has created many Great Courses
00:13 - on his own channel and we're excited to
00:15 - share this course with the free code
00:16 - Camp audience
00:18 - the course is designed to be a One-Stop
00:21 - resource for Learners who want to create
00:23 - their own personal blog website with a
00:26 - bunch of features including SEO
00:28 - optimization dark and light themes
00:30 - responsive design and markdown based
00:33 - blog rendering let's start learning hope
00:36 - you are all doing great today we are
00:39 - going to create something very useful in
00:41 - our developer Journey there are multiple
00:44 - options where we can share our learning
00:47 - through writing such as hash node Dave
00:50 - medium Etc but I always like to have my
00:54 - own blog as a developer where I can
00:56 - customize anything I want so today we
00:59 - are going to create this amazing blog
01:02 - using next.js and content layer so as
01:06 - you can see right now
01:08 - Let me refresh this and so we have this
01:12 - minimal
01:15 - navigation bar which has uh you know
01:18 - just for options one is the theme
01:22 - switcher and other two pages are the
01:25 - about and contact and on the right side
01:28 - we have this social media icons and the
01:32 - logo on the left
01:34 - now uh in the cover section uh I'm
01:38 - displaying the latest blog that I have
01:40 - published
01:42 - we have category block title and a small
01:45 - description and the cover image now
01:48 - let's uh scroll down
01:51 - next section is for the featured post
01:54 - this section is manually customizable by
01:56 - you so that
01:58 - you can show posts that you wanted more
02:03 - attention or you think it's uh best for
02:07 - visitors
02:09 - and the next is the recent post section
02:13 - where we are going to show the last six
02:17 - post
02:19 - at the end we have an uh really simple
02:24 - footer
02:25 - uh that has this input and a submit
02:29 - button now in this input you can connect
02:32 - any third parties services that provides
02:35 - you the subscription and stuff
02:38 - also we have a site map as well
02:43 - now let's check out this blog page
02:48 - now in the blog page we have this cover
02:52 - image
02:53 - title and the category
02:56 - now here we have details about the blog
03:00 - such as publish date total views
03:03 - and reading time
03:05 - and the category
03:07 - let's scroll down so on the left we have
03:10 - a table of content by clicking on any of
03:14 - this link you can just directly go to
03:16 - that section
03:20 - also we can close this Toc as well
03:24 - so uh this is the blog element that I
03:29 - have customized for the purple color
03:33 - so here is the
03:35 - code block
03:38 - now this image will use the image
03:41 - component of the next GS so that it
03:43 - loads faster
03:46 - now I have used the markdown to render
03:50 - this blog
03:52 - now let's open the category page
03:56 - so this is the category page that
03:59 - contains uh blogs relevant to certain
04:02 - categories so let's click on the
04:04 - productivity
04:06 - so it will contain three blocks and uh
04:09 - all three blogs have the productivity as
04:12 - their main category or tag
04:15 - let's click on the JavaScript so in
04:18 - under the JavaScript tag we have only
04:20 - one blog
04:22 - and let's click on this all button so it
04:26 - will show all the blocks that we have
04:28 - right now
04:32 - now let's check out the about page and
04:36 - as you can see we have this insights
04:40 - going from right to left
04:43 - and text on the right and this cute
04:46 - little image on the left now this image
04:49 - is generated by Delhi using a Bing
04:53 - search
04:55 - and here are the skills
04:58 - you can list your skills right here
05:03 - just a small hook to reach out
05:07 - this link will open the contact page so
05:11 - let's click right here
05:13 - and we have this minimal contact page
05:16 - now on the left we have this cute little
05:19 - animation by Lottie animation and on the
05:23 - right we have this form
05:27 - so I have created this form in a way
05:30 - that you know looks like a paragraph you
05:33 - just have to fill in the blanks
05:35 - now let's go to the home page now
05:39 - in this website I have implemented a
05:42 - really good SEO techniques so that your
05:44 - article can rank better on Google and
05:47 - other search engines let me show you uh
05:50 - how the SEO will help you
05:52 - let's go to the Google and type OG
05:58 - preview online now OG is an open graph
06:02 - that is an Internet Protocol to
06:05 - standardize the use of metadata within a
06:08 - web page to represent the content of a
06:11 - page
06:12 - so uh you can you know consider that as
06:15 - whenever you share some blog or any link
06:19 - on the social media it will preview the
06:21 - content of the link in a beautiful
06:23 - manner so let's open this first link
06:29 - copy this URL paste it right here and
06:33 - let's click on the check website
06:36 - now on the right you can see the preview
06:39 - so whenever we are going to share this
06:41 - website on Facebook it will look like
06:43 - this
06:44 - on Twitter on LinkedIn and in the
06:47 - Discord as well
06:50 - and here we have some details that will
06:52 - be shown on the Google search Pages such
06:55 - as title description and image
06:58 - let me open any blog
07:02 - let's copy this link
07:05 - and paste it right here
07:07 - let's check it
07:09 - so whenever we are going to share this
07:12 - Vlog there will be a title
07:16 - small description
07:19 - and the cover image
07:26 - so I have implemented all the required
07:29 - meta tags in this website as well
07:32 - let me close this
07:35 - let me show you the responsiveness of
07:38 - this website so let's go to the home
07:40 - page
07:42 - open the dev tools and
07:45 - click
07:46 - this device toolbar
07:48 - and let's select iPhone 12 Pro
07:52 - Let's uh keep the iPhone SC
07:59 - now as you can see here uh we have logo
08:02 - and hamburger menu so let's click on
08:05 - this and it will open this mini nail bar
08:08 - now uh
08:10 - unless you close this with uh by
08:13 - clicking on the hamburger menu this
08:15 - never will keep at the top
08:17 - so it's uh convenient for users who want
08:22 - to keep it this way
08:25 - scroll down we have WeChat post section
08:28 - with three blogs
08:31 - and recent post section with all the
08:35 - other blogs and the footer
08:40 - uh let's open the about page
08:45 - and it looks great on the phone as well
08:50 - let's open the contact
08:57 - and looks great
09:00 - now let's open this blog
09:06 - now we have a table of content on the
09:08 - top and after that we have this blog
09:12 - let's go to any of this title
09:17 - so it will scroll down to that heading
09:26 - let's open the category page
09:32 - foreign
09:38 - and it looks great
09:45 - now bear with me throughout this whole
09:48 - tutorial I'll be your guide every step
09:50 - of the way breaking down complex
09:52 - Concepts into easy to follow pieces so
09:56 - whether you are a tech newbie or an
09:59 - experienced developer looking to try
10:01 - building their own blog then this
10:03 - tutorial is for you so now let's get
10:06 - started
10:07 - now let's open this link uh you will get
10:11 - this link from the description of this
10:14 - video
10:15 - and in this repo I have put all the
10:20 - required project files and the starter
10:22 - code
10:23 - so let's go here and copy this make sure
10:28 - you have a uh node.js installed in your
10:32 - system and GitHub as well so let's go to
10:35 - the project folder
10:37 - if you are on Windows you can just open
10:39 - the command prompt by going to the
10:41 - address bar and type CMD
10:44 - and here we have command prompt
10:48 - let me use the git command git clone and
10:53 - paste the URL so now cloning is
10:55 - completed uh let's open this folder by
10:58 - going to the
11:03 - so now cloning is completed so let's
11:05 - change the directory by using the CD
11:08 - command and copy this folder name
11:12 - and paste it now let's use the npm
11:17 - install command to install all the
11:20 - required libraries and press enter
11:26 - once uh it install all the dependencies
11:30 - then let's open this repo in the vs code
11:34 - for that you just have to write code and
11:38 - Dot
11:48 - now let me show you the list of
11:49 - libraries that we are going to use so we
11:52 - are going to use this Lottie player to
11:55 - render the Lottie animations we are
11:58 - going to use the Super Bass uh to
12:01 - capture the total views of each blog
12:05 - we have Tailwind CSS and content layer
12:10 - we have GitHub Slugger to
12:13 - generate slugs for the blog
12:16 - and we are also going to create generate
12:19 - the sitemap let me just show you that
12:25 - if you go down and click on the sitemap
12:29 - let's copy this URL and paste it right
12:33 - here
12:34 - so other sitemap will show each and
12:38 - every URL each and every blogs now this
12:41 - sitemap is uh very useful for the search
12:46 - engines so that they can index each and
12:49 - every uh one of the blogs from your
12:51 - website
12:57 - let's go to the vs code and we will use
13:00 - react hook form
13:02 - to get the response from the form
13:05 - and we have reading time to calculate
13:07 - the reading time of each blog and we
13:10 - have few plugins of rehype and remark
13:14 - now this plugin will help us to form it
13:17 - and make the content look much prettier
13:22 - and for the CSS part we are going to use
13:25 - Tailwind CSS
13:27 - so let me close this
13:30 - first let's uh open the Tailwind dot
13:34 - config.js file and here you will find
13:37 - the
13:39 - colors object uh where I have put every
13:44 - color which we are going to use so let's
13:49 - copy this
13:51 - and
13:52 - first let's remove this we don't need it
13:57 - and paste it right here
13:59 - let's uncomment this
14:03 - uh now uh for those who don't know about
14:07 - this trailwind.config file now in this
14:10 - file you can create your customized
14:13 - theme and add your variables so uh in
14:18 - this colors we have this five variables
14:21 - that we are going to use
14:24 - so I forgot to show you the dark mode of
14:27 - the website so let me just show it to
14:30 - you
14:33 - scroll up and click on this theme
14:36 - switcher so it will turn the theme into
14:38 - the dark mode
14:40 - and as you can see uh now for the slide
14:44 - theme uh I have used this purple color
14:47 - as an accent color but for the dark
14:50 - we'll use this yellow
14:55 - this combination of yellow and black
14:57 - looks uh really great
15:00 - let's open any log
15:06 - as you can see here in this blog uh it
15:10 - has a yellow color instead of the purple
15:16 - now you can also customize this code
15:20 - block so they will also change these
15:23 - colors based on the theme light or dark
15:28 - let's open the about page
15:35 - [Music]
15:36 - and contact page
15:44 - let's go to the home page
15:49 - let me show you the project files
15:53 - uh so if you go to this project files
15:55 - folder you will find all the assets that
15:58 - we are going to use for uh in this
16:00 - project we have blog images and blogs
16:04 - that are already written now in all this
16:07 - blog uh I have just uh
16:10 - added the Tailwind documentation text
16:16 - and all the svgs
16:19 - and we have this Lottie animation as
16:21 - well and some icons and site metadata
16:26 - and all the text that we are going to
16:28 - use to create this website
16:32 - now let's open the development server so
16:36 - go to the command prompt and just write
16:39 - npm run div so this will open the
16:44 - development server at Port 3000 let's
16:48 - copy this
16:51 - and open the browser
16:53 - and paste it right here
16:59 - now let's remove this stuff
17:04 - go to the SRC and the app directory open
17:07 - the page.js file and let's remove all
17:13 - this except the main div
17:16 - and just write
17:18 - hello world
17:21 - let's save this and check the server
17:24 - and here it is
17:27 - now those of you who don't know anything
17:29 - about app directory then you don't have
17:32 - to worry about anything I will
17:35 - explain each and every concept so uh let
17:39 - me start with this page dot JS file
17:44 - you can consider this page or JS file as
17:47 - a UI that is you know unique to every
17:50 - route so uh
17:53 - for this this page.js file is directly
17:57 - under the app directory so whenever you
18:00 - open the slash part
18:03 - I'm in the home page it will uh always
18:06 - load the hello world
18:08 - uh this page.js file now let's uh open
18:13 - this layout.js file so those of you who
18:16 - knows the basics of next.js in the Pages
18:19 - directory we we have a underscore app.js
18:23 - file and underscore document.js file so
18:26 - similarly layout.js file is also do the
18:30 - same work so uh this layout.js this file
18:34 - will be
18:35 - shared across all the routes so
18:40 - if I create any route in this app
18:43 - directory it will also have this HTML
18:46 - and body tags and class names so
18:49 - anything I write here or any component I
18:52 - render right here it will be also
18:54 - rendered across all the routes because
18:57 - this is the root layout file you can
19:00 - also create a different layout files and
19:03 - different routes that we are going to do
19:05 - later on so first let's set up the
19:08 - phones and we are going to use this
19:11 - layer.js file like
19:14 - like this
19:16 - so uh we are going to use two phones one
19:20 - is the enter for the blogs and another
19:24 - is the main rope let me just copy this
19:28 - and paste it let's change its name to
19:32 - main rope
19:34 - and instead of enter let's import the
19:38 - rainbow as well
19:41 - from the next slash font slash Google
19:45 - and let's set display
19:50 - and this font configuration
19:52 - to
19:54 - swept
19:56 - and let's add the variable name for this
19:59 - enter fonts for that you have to type
20:03 - dash dash font and any name you like uh
20:08 - let's just type in
20:13 - let's
20:14 - let's copy this and paste it right here
20:19 - now for the main row we will change the
20:23 - variable to Mr
20:26 - now uh we are not going to use this
20:29 - class name instead we are going to use
20:31 - this variable because uh we are using
20:33 - the Tailwind CSS
20:36 - so let's remove this
20:38 - and instead
20:40 - Let's uh use both of these fonts let's
20:44 - open the pack text
20:46 - and
20:47 - and the currency symbol
20:50 - open the brackets and write
20:53 - this variable name Dot
20:56 - variable
20:58 - and do the same for the menu up as well
21:11 - so uh this way uh any component inside
21:15 - there is children can use any of this
21:18 - variable names
21:21 - let's save this and open the Tailwind
21:26 - CSS here we also have to configure the
21:29 - fonts so after the colors
21:32 - press enter and write font family
21:42 - uh now uh we have two fonts with two
21:45 - variables called Mr and I in now Mr
21:49 - stands for the
21:51 - a menu
21:53 - and here we have to add the variable
21:56 - name
21:57 - by using the VAR
22:00 - same as we do in the CSS
22:03 - just write dash dash font
22:06 - Dash Mr
22:09 - and copy this and paste it right here do
22:13 - the same for the inter fonts
22:19 - let's save this now we can use any of
22:22 - this font by just writing a class name
22:25 - such as
22:27 - font Dash in for the enter and font Dash
22:31 - Mr for the manual
22:36 - let's go to the layout.js file so I'm
22:39 - going to use the main drop fonts for the
22:41 - whole website unless we have any
22:44 - component that uses the enter
22:47 - fonts let me change this to main group
22:52 - Dot
22:54 - variable
22:57 - let's save this
22:59 - and also let's add some classes in this
23:03 - body tag so we are going to use Font
23:06 - Dash Mr which stands for the menu
23:09 - and set the background to light
23:13 - which is the white color
23:16 - and for the dark we are going to change
23:18 - the background to start
23:21 - so that's it now instead of using this
23:25 - brackets every time we want to use the
23:27 - variable uh there is a different method
23:30 - that we can use so in the SRC folder
23:34 - create one folder called
23:37 - utils which is for the utilities let's
23:41 - create one file called
23:43 - index.js file now here we are going to
23:46 - create one helper function so just write
23:49 - export const c x
23:54 - and in this function we will pass the
23:58 - class names
24:01 - now we have used this spread operator to
24:03 - get all the values of class names
24:06 - and let's use the arrow function from
24:09 - this class name let's use filter
24:16 - and the
24:17 - add the Boolean
24:19 - right dot join
24:22 - by space
24:24 - let's save this and let me explain what
24:27 - this function do
24:28 - now here uh we are going to use the CX
24:32 - function to add multiple classes instead
24:34 - of using uh the parenthesis this
24:37 - function except the class names are the
24:40 - array of class names now we are using
24:42 - this filter with the Boolean now why
24:44 - Boolean now this filter will filter all
24:48 - the falsy values so it can be an empty
24:52 - string null are undefined
24:56 - and then we are going to join each class
24:59 - name
25:00 - with one space
25:03 - so let's use this function
25:06 - go to the layout
25:08 - and
25:10 - let's create another class name
25:15 - here just write c x to import the CX
25:20 - function from the utils
25:25 - let's open the parenthesis and let's add
25:28 - the classes
25:32 - first we have entered our variable then
25:35 - mandrope
25:37 - dot variable
25:39 - then we have this three class names so
25:43 - let's pass it as a string
25:46 - let's remove this
25:50 - and save it
25:55 - now let's create the uh navigation bar
25:59 - let me close this
26:04 - let's remove this image and this classes
26:06 - as well
26:08 - so let's write Flex Flex slash column
26:12 - items do
26:15 - Center justify to Center as well now I'm
26:19 - getting the suggestion of this classes
26:22 - uh from this extension
26:27 - here is the extension called Tailwind
26:30 - CSS intellisense so make sure to install
26:32 - it in your vs code and also there is uh
26:37 - one more extension here it is now this
26:40 - extension will help us to create the
26:43 - area component faster
26:45 - so make sure you install this as well so
26:48 - let me close this
26:51 - now in the SRC folder let's create one
26:55 - folder called components
26:58 - and inside the components folder let's
27:00 - create another one called the
27:03 - header
27:08 - and press enter
27:10 - now in the header folder let's create
27:13 - one file called
27:15 - index.js now let's use the extension to
27:19 - create the react component just write r
27:22 - a f c e
27:24 - and we have this
27:27 - a small component let's rename this to
27:31 - header
27:33 - and Export as well
27:36 - let's save this now uh as we have seen
27:41 - in this blog
27:43 - we are using the same header and the
27:46 - same folder across all these pages so
27:50 - let's move this header and footer to the
27:52 - layout
27:54 - so that it can be shared across all the
27:57 - pages
27:58 - so in the layout before the children
28:01 - let's add the header component make sure
28:05 - you uh import this from the components
28:08 - folder
28:09 - let's save
28:11 - let's save this
28:13 - and check it out
28:15 - and we have some errors
28:19 - and the header
28:23 - and here is our header component
28:26 - Let's uh remove this black background
28:30 - go to the
28:32 - global.css and remove all this let's
28:36 - save it
28:39 - and here we have SIMPLE black background
28:44 - now let's start creating the header
28:47 - use the header HTML element let's add
28:51 - the class names
28:53 - keep the display to full
28:56 - padding Dash four
28:59 - pairing X and Y two let's keep it to
29:03 - 10
29:05 - and display to flex
29:08 - items to
29:10 - Center and justify between
29:14 - let's save this
29:19 - so here is the header part let's remove
29:23 - this black background as well for now
29:26 - open the layout.js file and remove this
29:30 - class
29:34 - save this
29:37 - so here is the white background
29:43 - now let's create the logo component
29:46 - so inside this header folder create one
29:49 - file called logo dot JS and
29:54 - write r a f c e to create this logo
29:58 - component
29:59 - here we will use the link component as
30:03 - the parent
30:04 - make sure you import it from the next
30:06 - slash link
30:07 - in the azuref
30:10 - just write slash
30:15 - and in this logo we are going to use one
30:17 - image and the text
30:20 - so let's add one do
30:23 - and import the image tag from the next
30:26 - slash image
30:27 - in the SRC
30:30 - we are going to import the image from
30:32 - the public folder so make sure you have
30:35 - stored your logo in the public folder
30:39 - for now you can open the project files
30:41 - and copy this profile image dot PNG
30:47 - and
30:49 - paste it inside the public folder
30:55 - now any files that you file such as
30:58 - image or videos that you want to use in
31:00 - the next years and if you are using it
31:03 - locally then you must have to uh pass
31:06 - all those files into the into this
31:09 - public directory otherwise it will not
31:11 - render those files
31:13 - so let's import the profile image from
31:18 - at
31:21 - slash
31:25 - public slash
31:28 - profile Dash image dot PNG
31:32 - let's use this image in the SRC and for
31:37 - the alt you can just write your name
31:48 - and for the class name let's keep the
31:51 - width to full and H2 Auto
31:54 - and rounded to full as well
32:00 - let's close this image
32:03 - now after this do add one spawn tag and
32:07 - just write code
32:08 - Lux
32:10 - let's save this
32:12 - and let's import this logo component
32:14 - inside this header
32:21 - let's save it
32:26 - I think we have some issue in importing
32:29 - this file let me check the
32:32 - name of this file again
32:35 - go to the logo
32:39 - it can be because of this internet
32:41 - notation for that you can just go to the
32:45 - Json dot config
32:47 - file
32:49 - so this at the rate slash will replace
32:52 - uh itself with the dot slash SRC slash
32:57 - so instead let's remove this and this
33:03 - so that we can access every folder such
33:05 - as a public SRC Etc let's save this
33:11 - and as you can see here here is our
33:14 - profile image
33:16 - let's add some classes
33:21 - and the image container let's add class
33:24 - names
33:29 - keep the width to 12.
33:34 - let's keep it to 16.
33:37 - round it to full overflow
33:41 - hidden
33:43 - border border type 2 solid and Border
33:49 - color to border Dash dark
33:54 - let's save it
33:57 - and it looks great
33:59 - now in this link let's add the class
34:03 - name
34:04 - set the display to Flags items to
34:07 - Center
34:09 - set text color to text Dash dark now in
34:13 - this spawn element let's add class name
34:17 - set font to
34:21 - bold
34:23 - and text size to text Dash extra large
34:28 - let's save this
34:31 - and it looks great now uh so let's uh
34:36 - add some space between this image and
34:39 - the logo
34:40 - go to this image container do
34:44 - right margin right
34:46 - two
34:48 - four
34:50 - save this
34:52 - and looks much better
34:56 - now let's create the center part of this
34:58 - navigation bar
35:00 - let's go to the index.js file so after
35:04 - the logo let's create one nav element
35:08 - and inside this now we are going to use
35:10 - the link
35:11 - so make sure you import it
35:14 - right Edge ref
35:16 - slash close this
35:19 - and right
35:20 - home
35:23 - copy this and paste it for two more
35:26 - times write slash
35:28 - about for the
35:31 - about page and do the same for the
35:34 - contact page as well
35:40 - let's save this
35:44 - and so we have those three links
35:47 - and after this navigation bar we are
35:52 - going to have one more to do
35:54 - and this will contain the Social Links
36:04 - and let's add classes let's keep the bit
36:09 - to the maximum
36:11 - and padding top and bottom to three
36:15 - padding left and right to eight
36:20 - and set border border Dash
36:24 - solid and Border color to dark set
36:28 - rounded to full font to medium
36:35 - capitalize all the text
36:39 - and display to flex
36:43 - items to
36:45 - Center
36:47 - now let's add class in the link
36:52 - set Emoji right to 2
36:58 - same for the about
37:00 - margin left and right two
37:03 - and for the contact as well
37:06 - and let's add one button which will be
37:09 - the theme switcher for now just write T
37:13 - let's save this
37:16 - and it looks great now if you see
37:20 - closely
37:21 - this navigation part is not at the
37:25 - center of this page but instead it is on
37:27 - the right so let's use the fixed uh
37:31 - position
37:33 - so in the class name
37:37 - add position to fixed
37:40 - and set top to
37:43 - six
37:45 - right to 1 by 2 that means right to 50
37:49 - and let's Translate
37:53 - X to 1 by 2 as well so that uh it uh
37:57 - comes at the center of the page
37:59 - let's save this
38:03 - and it looks great
38:07 - now let's also add the backdrop effect
38:10 - so that it looks uh blurry on scroll
38:14 - for that first let's add the background
38:18 - and set the opacity of the background to
38:22 - 80.
38:23 - and use the backdrop class
38:26 - so setback Doppler to SM and save this
38:33 - for now you won't be able to see
38:35 - anything but on scroll or whenever some
38:37 - content goes under this navigation bar
38:40 - uh you can see the different blurry
38:43 - effect
38:46 - now let's add the social media links
38:50 - so remove this and
38:54 - add the link element here we are not
38:57 - going to use the
38:58 - link element from the next.js because uh
39:02 - here in the Azure we are going to pass
39:05 - the website that opens in the new tab or
39:08 - are the external links
39:12 - so first is the LinkedIn
39:18 - then
39:19 - Twitter
39:22 - and GitHub and the last one
39:26 - is the
39:28 - triple you can add anyone you like
39:34 - for now let me just write example.com
39:46 - let's save this
39:48 - now instead of this names let's add the
39:51 - icons
39:53 - so you will find all the icons from the
39:56 - project files folder
39:58 - and the SVG folder
40:00 - now uh we are going to use a different
40:03 - approach to render the SVG files
40:06 - so in the components folder create one
40:10 - file called
40:12 - icons dot Js
40:16 - now in this file we will store all the
40:18 - svgs so first open the LinkedIn SVG
40:24 - copy this
40:25 - and in the browser open svgr playground
40:32 - and open this first link
40:35 - so this will convert this simple SVG to
40:39 - an react component so let's paste our
40:43 - SVG file and
40:46 - copy this whole component
40:50 - and paste it inside the icon start JS
40:53 - file
40:55 - let's export it
40:59 - let's name it as Link in icon
41:05 - and we can manipulate this SVG by
41:07 - passing different class name from this
41:09 - props so instead of props let's open the
41:12 - curly braces and write class name
41:19 - and the rest of the props so instead of
41:23 - props just write the rest
41:26 - and remove this field none
41:31 - and let's add the class name
41:36 - let's use CX utility
41:39 - inside the CX function
41:42 - we will pass we will add the class name
41:45 - that we have passed inside this
41:48 - component
41:49 - and with this class name let's add
41:52 - another class
41:53 - set width to full and height to auto
41:59 - and let's add the view box because uh it
42:05 - is important when you resize the SVG
42:08 - element
42:09 - just write 0 0
42:12 - width which is 42 and height which is 43
42:18 - let's save this
42:19 - and import it inside the header element
42:24 - so instead of this just import LinkedIn
42:27 - icon
42:29 - let's save this
42:37 - and it is not defined
42:49 - so its size is bit bigger
42:53 - let's add a class name inside this
42:55 - anchor tag
42:57 - set width to
43:00 - 6 height 2 6 as well margin right 2 4.
43:05 - let's save this
43:08 - and it's still bigger
43:10 - let's add the display to inline
43:14 - lock
43:18 - and it looks better
43:21 - so uh this way we are going to convert
43:25 - all the SVG files to a react component
43:28 - now uh instead of doing uh this for each
43:33 - and every icon I have already
43:35 - done that and you can get all the icons
43:39 - from this icons.js file which is in the
43:42 - project uh files folder let's copy all
43:46 - this
43:48 - and inside this components
43:51 - and inside this icons dot JS file
43:55 - paste everything so we have
43:59 - Sun icon Moon icon for the themes
44:02 - feature LinkedIn Twitter GitHub and
44:05 - dribble as well let's save it close the
44:08 - icons.js file
44:10 - and let's use this icons
44:17 - make sure you import it from the slash
44:20 - icons
44:30 - thank you
44:36 - and copy this class name add for each
44:40 - and every link
44:43 - let's save this
44:46 - and it looks great now we have this
44:50 - scale up and down animation so let's add
44:53 - it as well
44:56 - in each icon
44:58 - we are going to add the same glass so
45:01 - let's uh select this and press Ctrl d
45:06 - again and again
45:09 - this way we can write
45:11 - the class name in each line
45:14 - add class name
45:18 - Set uh on Hover
45:21 - we will use scale Dash
45:25 - zero five
45:27 - and set transition Dash all
45:32 - is and duration
45:35 - to
45:36 - 200.
45:39 - let's save it
45:47 - let's increase the scale
45:55 - to 125 let's save it
46:00 - and it looks much better
46:03 - now let's add the icon for this themes
46:06 - feature
46:08 - and this button let's add the sun icon
46:11 - for now later we will add the condition
46:14 - on a theme switch and add the moon icon
46:18 - as well let's save this
46:25 - and here we have the sun icon
46:29 - so our header part is completed now
46:31 - let's see how we can use content layer
46:34 - to render the MDX blogs in this Nexus
46:37 - application
46:38 - now let's uh open the content layer
46:41 - website
46:45 - go to the content layer dot dot Dave
46:50 - now uh why we are using the content
46:53 - layer to render the markdown files if
46:56 - you directly use the markdown in your
46:58 - Nexus project then you might have to do
47:01 - more configurations but if you use the
47:04 - content layer it will directly transform
47:06 - the markdown content into reusable data
47:09 - objects that can be imported in the
47:13 - JavaScript files and content layer makes
47:16 - it easy to edit the markdown file since
47:18 - you don't need to reload the page to you
47:22 - know see these changes now as mentioned
47:24 - here content layer is a Content SDK that
47:28 - validates and transform your content
47:30 - into typesafe Json data that you can
47:33 - easily import into your application now
47:36 - if you want to know more about the
47:39 - content layer you can just go through
47:41 - this website and read more about it for
47:44 - now let's go to the documentation
47:46 - section
47:47 - and in this environment select next.js
47:52 - so we have already installed the next
47:55 - Dash content layer and content layer as
47:57 - well now uh as mentioned here we have to
48:01 - make some change in the next dot
48:04 - config.js file
48:06 - let me close this
48:09 - open the ABS code
48:11 - let's close each tab
48:14 - and open the
48:16 - next.js.config file now if you want to
48:19 - directly open any file in the vs code
48:20 - just write Ctrl p and
48:24 - type the file name
48:26 - and here is the next dot config.js now
48:30 - let's
48:32 - go here copy this
48:36 - and
48:37 - paste it right here
48:39 - now we are already exporting uh using
48:44 - this but instead
48:46 - let's import like this
48:50 - and any Nexus configuration can be
48:55 - uh in exported from here
48:59 - let's save this
49:03 - now uh whenever we edit the
49:06 - index.config.js file we have to restart
49:08 - our development server
49:11 - let's start it by using npm run Dev
49:17 - and there is some error
49:20 - so this is a simple module related uh
49:24 - issue
49:25 - uh let's change this import statement to
49:29 - something like this const
49:32 - let's get
49:35 - let's get with content layer
49:38 - from the
49:40 - next content layer using require
49:46 - let's copy this and paste it right here
49:50 - and instead of this let's just write
49:53 - module
49:55 - dot exports
49:58 - equal to with content layer
50:00 - and let's use the spread operator
50:06 - uh so that any configuration we pass
50:09 - here can be exported from here
50:12 - let's save this and
50:15 - start the development server
50:23 - let's reload this
50:26 - now uh
50:29 - Let's uh go to right here
50:33 - so we have done this configuration
50:37 - let's go to the source files
50:41 - and
50:44 - as mentioned here this module provides
50:46 - the method for working with the local
50:47 - files as your current content Source uh
50:51 - now for this tutorial we are going to
50:53 - use the locally stored blocks
50:56 - so
50:57 - as a engineer there are three primary
51:01 - functions in the content layer first is
51:03 - the make Source uh second is a defined
51:06 - document type and third is the Define
51:07 - nested type so let's click on this make
51:10 - source
51:12 - now as mentioned here make Source
51:14 - provides the content layer with the
51:17 - schema and configuration for your
51:18 - replica application
51:20 - the code calling make Source should be
51:23 - placed in
51:24 - contentlayer.config.js file so let's uh
51:27 - copy this name and create one file
51:32 - let's close this
51:36 - now uh in the root directory create
51:40 - one file called contentlayer.config.js
51:47 - now let's copy this code
51:50 - and paste it right here
51:52 - now let's uh add the required option in
51:56 - this make Source function
51:59 - so first is the content directory path
52:02 - so let's uh copy this
52:06 - and paste it right here
52:09 - uh we are also going to use the content
52:12 - folder to you know store the blocks
52:15 - let's just make one create one four in
52:19 - the root directory called content and
52:22 - inside the content let's add one more
52:25 - folder
52:26 - and let's name it as Vlog dash one now
52:30 - block dash one is going to be the title
52:32 - of that blog so
52:34 - press enter and create one file called
52:37 - index Dot
52:40 - MDX file now MDX stands for the markdown
52:44 - uh uh actually there are two formats one
52:48 - is MD and MDX is the newer form uh of
52:54 - the markdown MDX lets you include the
52:57 - jsx uh into the markdown so that you can
53:00 - use the react components inside the
53:03 - markdown files
53:05 - uh now uh those of you who don't know uh
53:08 - how to write in markdown it is uh really
53:12 - easy I mean uh let's say for uh admin
53:15 - tag you just have to write hash and type
53:19 - this is the H1 element same for the H2
53:24 - just write two hash and this is the
53:28 - H2
53:29 - element so uh there are multiple uh
53:32 - different markdown uh techniques that
53:35 - you can use create a different content
53:37 - content now there are different ways you
53:40 - can import the images in the background
53:42 - as well let's just uh save this file and
53:45 - go to the
53:46 - contentlayer.config.js file
53:49 - so after the content let's check the
53:52 - documentation
53:55 - now this is the content
53:59 - it will include we don't need this
54:05 - this is for the exclude
54:08 - uh now let's check this document types
54:12 - click on this uh Define document type
54:17 - now as mentioned here uh Define document
54:20 - type defines the schema for one
54:22 - particular document type often referred
54:24 - to as a model or content type so let's
54:28 - copy this
54:30 - and paste it before this make source and
54:34 - make sure to import this from the
54:37 - content layer slash source files
54:40 - now instead of Doc let's write blog
54:44 - for the name uh let's keep the blog now
54:49 - for the file path pattern we have slight
54:52 - different pattern because in the content
54:54 - folder uh first we'll go to the block
54:57 - dash one folder and then we will get the
55:00 - index dot MDX file so let's add
55:04 - one more and Slash
55:07 - and add one more so this is the pattern
55:11 - that is suitable for our content Android
55:15 - MDX
55:17 - now uh in this fields we will add all
55:20 - the required fields that we are going to
55:22 - render on the website and that we are
55:24 - going to need in our blog
55:28 - so let's go to the documentation so
55:31 - there are
55:32 - multiple options
55:35 - first is the name and second is the
55:38 - fields
55:40 - and if you click on this field type
55:44 - so there are different fields available
55:46 - that you can use
55:48 - so first we are going to use the string
55:51 - like this one so title with the type
55:55 - string
55:56 - we already have one
55:59 - now let's uh go to the date
56:03 - because we are going to need this
56:05 - published date
56:08 - let's paste it right here paste it for
56:11 - one more time here we will
56:14 - uh use the updated
56:18 - at
56:20 - on so whenever you update your blog then
56:24 - uh you also want to update this date as
56:27 - well uh let's uh
56:30 - keep it required fill so just write
56:33 - required to true
56:36 - let's do the same for the title and the
56:39 - updated ad as well
56:42 - now let's add one more field for the
56:46 - block description that uh you want to
56:49 - display somewhere or you want to add it
56:51 - in the SEO so just add
56:54 - description
56:56 - keep the type to string and require to
56:58 - true
56:59 - now let's say for the cover image we are
57:03 - going to use the image
57:09 - for now I don't think there is any type
57:12 - for the image
57:15 - let's search it
57:24 - let's click on this
57:27 - row local files
57:30 - and
57:33 - as mentioned here we can use this field
57:36 - to store the URL of the image
57:40 - so let's copy this
57:43 - and paste it right here let's uh
57:48 - keep it as a required field now after
57:51 - the image uh let's add
57:55 - one more field call the Boolean
57:59 - copy this
58:02 - and paste it after this
58:05 - let's rename it to is published so
58:10 - whenever this is true that means the
58:12 - blog should be rendered on the website
58:15 - and if it is false that means the blog
58:17 - can be a draft or it can be old so you
58:21 - can just make this field false and
58:24 - that's how you don't have to delete the
58:26 - whole block file
58:28 - let's set the default to true
58:32 - let's copy this
58:34 - and paste it for one more time here we
58:37 - will add one field called author
58:41 - so uh for this project I'm going to
58:45 - include only one author that's why I
58:47 - kept it it's a field to string but uh if
58:52 - uh you have a Blog uh where uh there are
58:55 - multiple authors then you can uh keep
58:57 - this type to list
59:00 - and let's uh add the list type for the
59:04 - tags so go to right here
59:08 - copy this
59:10 - and paste it here so the tags
59:15 - are the type of the tags is list and and
59:18 - each element in this list is uh of type
59:22 - string
59:24 - so I guess uh this is it this are the
59:27 - all fields that we are going to need for
59:30 - this project let's uh save this now uh
59:34 - let's go to this Define document type
59:37 - and check out
59:39 - one more option called computed Fields
59:42 - now as mentioned here computed Fields
59:44 - can be calculated on the Fly rather than
59:47 - being read directly from the content
59:49 - source so let's say you want uh any
59:53 - other fields that that required some
59:56 - data from the blog and then you can
59:59 - calculate something out of that data and
60:01 - you want to display that so uh for
60:04 - example here is the URL path so uh the
60:09 - type of this computed field is going to
60:11 - be string and this is one is the resolve
60:14 - function that
60:16 - that passes the document uh markdown
60:19 - document and from that document you can
60:21 - get the data and you know manipulate
60:24 - that data and return it to this resolve
60:27 - function
60:28 - so in our case uh let's uh create one
60:32 - completed file for the URL so let's copy
60:36 - this
60:38 - and after the fields paste it here
60:43 - so instead of URL underscore path let's
60:45 - just write URL now so in this resolve
60:49 - function we will get the whole markdown
60:52 - document now as mentioned here they have
60:57 - used the flattened path
61:00 - so let's copy this
61:04 - and
61:05 - remove this now we are going to render
61:09 - our blogs at slash blog slash blog title
61:12 - so just uh write the back text right
61:16 - slash blogs slash and the
61:21 - uh currencies uh symbol and curly braces
61:26 - paste the talk dot underscore row dot
61:31 - underscore flattened path and let's say
61:34 - this I think there is some error let's
61:38 - add the curly brackets
61:44 - let's save this now here
61:47 - we have to pass this Define document
61:49 - type
61:50 - so just click on the enter
61:53 - and write document
61:59 - types
62:01 - and add
62:04 - vlog
62:05 - that's it just save this
62:09 - and let's go to the
62:12 - here
62:14 - I think there is some error I guess it
62:16 - is because we change this import
62:22 - here we have made some changes so before
62:26 - uh there was an SRC so let's go to the
62:31 - layout file and here just write SRC
62:35 - slash utils
62:38 - and do the same for this header as well
62:41 - slash SRC slash components let's save
62:45 - this
62:49 - and here is our website now uh
62:55 - let me restart this development server
63:00 - now if you see uh there will be some
63:03 - details about the content layer
63:10 - now you will get this warning that
63:12 - content layer might not work as expected
63:14 - on Windows
63:18 - so there is some reference error that
63:20 - string is not defined because we have no
63:23 - any information uh defined in this blog
63:27 - so let's uh
63:30 - do that now if you want to add the
63:33 - information about the blog such as blog
63:35 - title tags Etc then you can add it
63:39 - inside the section of the block called
63:41 - front matter so for that you have to go
63:44 - right here
63:46 - write dash for the three times press
63:49 - enter and let's add the title
63:52 - uh let's add blog
63:56 - one title
63:58 - and next is the description so this is
64:03 - the description for Vlog one
64:08 - next is the image
64:11 - uh for this image
64:13 - we are going to use any image available
64:15 - in the public folder so let's open this
64:19 - project files go to the blog images
64:23 - let's copy this folder inside the public
64:28 - directory and rename it to
64:33 - vlogs
64:35 - enter
64:37 - so let's import the image
64:43 - let's
64:45 - open the public folder slash blog slash
64:49 - select any image you like
64:57 - after this let's uh add the published
65:03 - add date now these are all the fields
65:07 - that we have declared right here so we
65:10 - have to fill all these fields so copy
65:14 - this paste it here
65:19 - Let's uh change it to published at
65:27 - and let's add the
65:30 - date
65:31 - today is 2023
65:36 - 0 8.
65:38 - 28.
65:41 - let's copy this and same for the
65:47 - updated at
65:51 - next is the
65:54 - is published let's keep it to true
65:59 - and next one is the tags so for tags we
66:04 - are using list so press enter and to add
66:08 - the list items you have to write a dash
66:11 - write the
66:13 - tag name such as productivity
66:17 - all right C CSS so these are the two
66:21 - tags and now close this front matter
66:25 - now after this you can start writing
66:28 - your blog from here so let's save this
66:31 - and check this
66:35 - right here
66:38 - and we are getting this reference error
66:41 - called the string is not different let's
66:43 - see that let's check all the fields one
66:46 - more time type string required to type
66:51 - date date
66:53 - string
66:55 - out here there is a mistake
66:58 - we have to add string
67:01 - and double quotes let's save this
67:06 - and now
67:09 - it says missing required field for one
67:13 - document
67:15 - so it will skip the document
67:17 - we have author is missing
67:20 - so let's go right here
67:23 - and after the updated add add author
67:26 - just write your name
67:29 - save this
67:34 - and as uh as you can see here it says
67:37 - generated when documents in the dot
67:39 - content layer
67:44 - now if you go up and here is the folder
67:48 - that is generated and this folder
67:50 - contains all the generated documents in
67:53 - this generated folder
67:55 - so in the blog here you will find this
67:58 - block dash one dot Json file now this
68:02 - Json file contains all the details about
68:05 - this blog
68:06 - so let's see how we can render this
68:22 - let me close this
68:24 - and this as well
68:26 - now let's open the page.js file and so
68:31 - now we uh want uh
68:34 - we want to get this blocks that are
68:37 - generated from here
68:39 - so
68:41 - open this index dot MJS
68:44 - file
68:46 - and as you can see here it is exporting
68:49 - all the blogs files as in all blogs so
68:53 - let's import it import all logs
69:00 - from
69:05 - let's go out and click on dot content
69:08 - layer slash
69:10 - generated
69:14 - Let's uh log this all blocks
69:18 - save this
69:23 - and let's open the console
69:27 - this component is server side component
69:29 - so it will log all the values in here so
69:34 - uh here is an array that contains this
69:38 - one blog
69:40 - and all its details such as title
69:42 - published ad updated at
69:44 - and the body of this blog in the body
69:48 - there is two of formats one is the raw
69:52 - format and other is the HTML format
69:55 - now uh here are multiple information
69:58 - now we have already used this underscore
70:01 - raw and flattened path to generate the
70:03 - URL field which is right here so it is
70:06 - slash blog slash block title uh in this
70:09 - case it is block dash one
70:11 - so this is how we can generate uh
70:14 - different uh blogs now let's see how we
70:17 - can render this
70:19 - so
70:21 - so in the documentation
70:23 - go to the
70:26 - files and click on this generated data
70:35 - so as mentioned here this is the file
70:37 - location
70:39 - and this is the data structure that we
70:41 - uh we already saw this
70:50 - let's click on the MDX
70:55 - and here is the usage index.js
71:00 - so this is how uh we will render the all
71:04 - all the blogs
71:06 - all right so
71:08 - let me go right here
71:12 - go to the project files and that is
71:14 - already a lot of blogs available so just
71:18 - copy all this into the content folder
71:24 - select one by one
71:30 - copy
71:32 - and paste it inside the content folder
71:44 - now as you can see the content layer has
71:46 - generated the required files for all the
71:49 - blogs
71:54 - each block will contain this
71:56 - informations such as title and Etc so
72:00 - and we will use this poly tag and all
72:04 - the content inside this body tag so
72:06 - there are different types such as Raw
72:10 - and HTML
72:13 - and that's it
72:16 - now instead of writing this uh we can
72:19 - shorten this import so let's uh open the
72:24 - Json
72:26 - copy this and paste it right here
72:30 - let's write
72:32 - content layer slash generated
72:36 - and instead of this let's write in
72:40 - double quotes dot slash dot content
72:44 - layer
72:45 - slash generated
72:49 - so we just have to write this and note
72:53 - the
72:54 - whole thing let's save this and instead
72:58 - of this just write the content layers
73:00 - less generated let's save this
73:04 - and we are getting the log
73:08 - so let's uh create the cover section
73:15 - now this blog uh we have three sections
73:18 - one is this cover section next is the
73:22 - feature post and last one is the recent
73:25 - post so let's create this
73:28 - uh go to the components folder let me
73:33 - close all this in the components folder
73:36 - create one more folder called home
73:40 - and in this home folder let's create a
73:44 - home cover
73:46 - section file
73:49 - let's use rafce to create this component
73:54 - and let's import it in the
73:58 - this page.js file so instead of hello
74:02 - world let's import this and let's uh
74:05 - pass all these blocks
74:07 - so just write blogs
74:10 - and
74:12 - just like this let's save it and
74:17 - from here
74:18 - let's get all the blogs
74:21 - and uh we are going to render the latest
74:24 - blog in the cover section so for that we
74:28 - have to short all the generated blogs so
74:31 - let's create one function in the utils
74:34 - so open the
74:38 - index.js file from this utilities folder
74:42 - and let's create one more function let's
74:45 - use export
74:47 - const short blogs
74:52 - pass the blogs
74:56 - and this will
74:58 - return
75:00 - logs
75:01 - first let's use the slice and then we
75:05 - will use the short now in this short or
75:10 - let's pass to elements of an array let's
75:13 - pass to block log a Block B
75:17 - and let's compare its uh
75:20 - date
75:22 - so for that we are going to use the
75:25 - compare
75:27 - descending from the date Dash FNS
75:30 - library that we have already installed
75:32 - so in this function
75:35 - we have to pass the dates
75:37 - so this function will compare the dates
75:40 - uh
75:42 - let's use parse ISO
75:47 - and
75:49 - for the blogs date for the blog a date
75:52 - just write a DOT published at
75:58 - and then
76:00 - fires
76:03 - ISO
76:05 - B dot published at
76:11 - so this function uh
76:13 - will return an array
76:16 - which are shorted from latest date to
76:21 - the oldest one
76:23 - so let's copy this
76:26 - go to the Home Cover section
76:29 - let's create one more variable called
76:31 - shorted
76:35 - logs
76:36 - equal to Let's paste the short blocks
76:39 - function
76:40 - make sure to import it
76:43 - from the utils let's pass all the blogs
76:51 - now for this cover section we are going
76:53 - to uh select uh the first log so create
76:57 - one more variable called The Log and
77:01 - from the shorter blocks select the first
77:04 - block
77:06 - now let's see how we can render this
77:08 - blog so we will use the
77:11 - article element
77:14 - now let's uh render the image so before
77:17 - that uh first let's see how we are
77:19 - getting the image from the log
77:24 - so here is the image so uh here we are
77:28 - getting the URL of an image
77:31 - but instead of this string uh let's get
77:35 - more data of the image such as a width
77:39 - height
77:40 - etc for that we have to change the type
77:43 - of the image
77:45 - from the content layer dot config.js
77:48 - file so instead of string just write
77:51 - image
77:53 - Let's uh remove this required to
77:56 - let's save this and check the logs
78:08 - let's find the image
78:11 - element
78:14 - and here it is so uh as you can see
78:18 - there are multiple uh information that
78:21 - we are getting from this image type uh
78:24 - such as a file path relative file path
78:26 - format height width aspect ratio uh blur
78:30 - hash data URL Etc so uh for this uh
78:36 - image we are going to use the uh file
78:39 - path this one and uh as you know
78:43 - anything that is in the public folder
78:45 - can be accessed by just a slash so we
78:49 - will replace this dot slash public and
78:51 - just keep this rest URL as it is
78:55 - so let's add the image make sure you
78:59 - import this image from the next slash
79:01 - image
79:03 - and in the SRC let's write block blog
79:08 - dot image
79:10 - Dot
79:12 - file path
79:14 - and from this file part we will replace
79:18 - the dot dot
79:20 - slash
79:21 - public string
79:23 - do
79:25 - uh nothing
79:28 - and
79:30 - let's add
79:32 - blur in the placeholder or for the more
79:35 - props of this image component you can
79:38 - visit the next.js documentation
79:40 - uh let's add the blur data URL
79:47 - just write blog dot image Dot
79:53 - here it is blur hash data URL
79:56 - so this blur data URL I will get this
79:59 - blur hash data URL and it will help help
80:03 - to uh you know load the
80:06 - blurry effect whenever you load the
80:09 - website for the first time
80:11 - and for the alt
80:14 - let's just use the block title
80:19 - and let's use fill so that image will
80:22 - fill out the whole container
80:27 - let's close this and add the class name
80:31 - set width to full height to full since
80:35 - we want to expand the whole image for uh
80:39 - for the whole div
80:41 - let's set object position to Center
80:46 - and set object to cover
80:52 - set
80:54 - its radius to rounded uh 2 3 XL
81:01 - that's it
81:02 - now inside this article let's add a
81:06 - class name
81:08 - set display to Flags Flex direction to
81:11 - column items start justify at the end
81:17 - because uh at the end of this whole
81:19 - component we want to show the block
81:21 - title Etc
81:23 - set
81:25 - margin left and right to 10.
81:30 - and
81:31 - set position to relative
81:34 - height to let's keep
81:38 - it D5 viewport height
81:42 - so let's write with to full
81:47 - and we are getting this whole image
81:51 - instead of this let's create one more
81:53 - div
81:54 - and
81:56 - and for this do let's give it width to
82:00 - full and set its display to inline block
82:04 - and remove this width
82:07 - let's save this
82:09 - and now it looks great
82:12 - now let's add uh overlay on the half
82:16 - side of this blog so that whenever we
82:19 - add the you know title like this so it
82:21 - can be visible
82:23 - for that for that inside the article
82:26 - let's create one div and close this div
82:31 - add a class name
82:33 - set display to Absolute
82:37 - top to zero
82:39 - left
82:41 - to zero as well
82:43 - bottom to zero and right to zero Now set
82:48 - height to full
82:50 - and
82:52 - let's add the gradient so uh for that we
82:57 - will use BG Dash
83:00 - gradient
83:01 - to
83:03 - bottom
83:05 - and from we will start from the
83:08 - transparent color
83:09 - and from
83:12 - zero percent position
83:15 - to dark
83:19 - and let's set its uh radius to rounded
83:23 - 3XL as well
83:26 - and let's save this
83:28 - Let's uh add this add index to 0 minus a
83:34 - dash 10 let's save this
83:38 - and here is the overlap
83:41 - now as you can see the uh lower part is
83:45 - a bit darker than the upper one
83:48 - let's add the block title
83:51 - after the image let's create one do
83:57 - and let's add the class name set width
84:00 - to full
84:03 - R for now
84:05 - set width to three by four
84:08 - that means width is 75 percent
84:12 - let's set padding to 16. display Flex
84:17 - Flex Dash column items
84:20 - from the start and justify to Center
84:25 - and let's keep this add index to zero
84:30 - first let's uh render the category
84:34 - for that we will use the link element
84:37 - and inside this lecturer
84:40 - let's write
84:45 - first let's open the backtex then write
84:48 - slash categories
84:51 - slash
84:54 - we will add blog dot tags
85:00 - and let's select the first tag
85:05 - that's it now close
85:10 - now close this link and inside this link
85:13 - Let's uh
85:15 - add the name of the tag so just copy
85:20 - this and paste it right here
85:24 - make sure to import the link from the
85:26 - next
85:28 - and let's do let's add the text color to
85:32 - text dash light let's save it
85:36 - and here is the category
85:39 - uh let's uh
85:41 - add the title
85:43 - so after this link let's add title in H1
85:47 - tag so just write blog blog dot title
85:52 - and after the title let's use a P tag to
85:56 - add the block description so just write
85:59 - blog dot description
86:02 - let's save this
86:04 - and here it is now uh we are going to
86:07 - use this category in uh different
86:10 - components so let's create uh one
86:12 - separate component for that
86:14 - so just
86:17 - go to the components folder
86:19 - and create one folder called
86:22 - elements
86:23 - inside this elements let's create one
86:26 - file called tag dot Js
86:29 - let's create the tag component
86:33 - and let's copy this link
86:36 - and paste it right here
86:38 - make sure to import the link
86:41 - now instead of this href
86:44 - let me
86:46 - get the link from the props
86:50 - let's see if uh no uh nothing is passed
86:54 - we will use the hash
86:56 - then the name
86:58 - and
86:59 - rest of the props
87:02 - inside this href
87:05 - remove this add link
87:12 - and instead of this blog dot tags just
87:16 - to write name
87:20 - and in the class name
87:23 - let's use the CX
87:27 - so first we will add the display to
87:31 - inline Dash block and let's pass props
87:36 - dot class name if we pass any class name
87:39 - to this Tech component let's save this
87:43 - and instead of this link
87:45 - let's import the
87:47 - tag component
87:49 - for the link we will pass this
87:57 - and for the name we will pass this one
88:06 - let's remove this
88:09 - and save it
88:11 - and here is the link let's style this
88:16 - let me minimize
88:18 - go to the tag
88:22 - now
88:24 - let's add more class names
88:29 - set padding top and bottom to three
88:32 - adding left and right
88:34 - to 10.
88:37 - background to dark
88:40 - and text to light let's save this
88:45 - all right
88:47 - let's make it full rounded so just write
88:51 - down it down date Dash full
88:54 - capitalize it
88:56 - increase your font weight to font semi
88:59 - bold
89:01 - let's add the Border
89:03 - border Dash solid and border Dash
89:08 - light
89:11 - now let's increase the Border width so
89:14 - just write powder Dash 2. and it looks
89:17 - great
89:18 - let's add the animation on Hover
89:22 - let's scale it to
89:26 - 125
89:30 - let's keep it to one zero five
89:33 - and add
89:34 - transition all
89:37 - ease with duration
89:41 - 200
89:47 - and it looks great
89:52 - that's it now let's uh
89:55 - add siding for this H1 element
89:59 - set font way to font dashboard
90:01 - capitalize
90:04 - text Dash light
90:09 - text
90:11 - Dash
90:12 - 4XL let's save this
90:15 - all right
90:17 - let's add H1 tag inside this link
90:21 - so that whenever someone click on the
90:24 - log title it will open the blog
90:28 - uh in the href
90:31 - let's add the blog link
90:34 - by using
90:36 - log dot URL
90:40 - now in the link let's add one class
90:44 - let's add margin top to six
90:48 - and on Hover on of this title Let's uh
90:52 - add
90:54 - the effect the underline
90:57 - for that
90:58 - let's use the spawn tag so just copy
91:02 - this add spawn and inside this Pawn add
91:05 - the blog.title let's add the class name
91:10 - so first we will use the gradient
91:15 - so just write BG Dash
91:17 - gradient
91:19 - Dash 2 Dash right so gradient to write
91:22 - from the accent color which is purple
91:27 - to
91:29 - accent color
91:31 - now let's uh change the background size
91:33 - by just writing BG Dash
91:38 - length
91:40 - to 0 pixel and 6 pixel
91:45 - let's save this actually that should be
91:48 - underscore between 0 pixel and 6 pixel
91:52 - now as you can see here
91:54 - the background size is 0 pixel and 6
91:56 - pixel now on Hover let's change this
92:01 - background size so just copy this
92:05 - paste it right here and instead of 0
92:07 - pixel Let's uh change it to the 100
92:10 - percent
92:14 - let's add BG Dash left Dash bottom
92:20 - so now this class is for the background
92:22 - position to left bottom
92:24 - so this will start animating from the
92:26 - left
92:27 - let's add BG no repeat
92:31 - let's add transition
92:35 - this time we will not use the all but
92:38 - instead we will use uh
92:40 - background size because we are animating
92:43 - the background of the spawn element
92:46 - and set the duration to
92:49 - 500
92:51 - let's save this
92:55 - and as you can see it looks much better
93:04 - now let's uh add The Styling for the
93:07 - description
93:10 - set display to inline block margin top
93:14 - to four
93:16 - text to text Dash base
93:20 - Let's uh
93:22 - text to text Dash large
93:25 - let's keep it to extra large and font uh
93:30 - to enter so just write font i n let's
93:34 - save this and it looks great now uh this
93:38 - uh this is rendering the first blog and
93:40 - the first block does not have much data
93:42 - so instead of that let's render the
93:45 - another block so just change it this
93:48 - index from 0 to 1.
93:51 - and this looks great
93:56 - let's reduce the overlay
94:00 - so for that go to right
94:02 - here
94:04 - and add the opacity to 90
94:10 - and now it looks almost the same
94:13 - now let's uh create this featured post
94:16 - section
94:17 - so let's open the components folder
94:22 - and inside this home
94:25 - let's add one component called featured
94:29 - post dot Js
94:32 - let's create a simple component and
94:35 - render it inside the page.js file
94:39 - same as we did for the Home Cover
94:41 - section
94:45 - and we are going to pass a blogs same as
94:49 - this
94:50 - let's save it
94:54 - let's get uh
94:56 - all the logs from the props
95:01 - and as we did for the Home Cover section
95:04 - let's use the
95:07 - short blogs function
95:10 - make sure you import this function
95:16 - let's start with the section element
95:25 - now inside this section let's set width
95:28 - to full margin top to 16. let's keep it
95:33 - to 32.
95:35 - and padding left and right to
95:39 - 32 as well set display to flex
95:42 - direction to column
95:45 - items to
95:47 - Center and justify
95:50 - to Center as well
95:54 - now inside the section let's add the H2
95:57 - element and just write featured post
96:03 - Let's uh increase the text size
96:07 - first let's set width to full
96:10 - set display to inline block and font to
96:15 - fold
96:17 - let's capitalize it and set text to for
96:22 - excel let's save this and check it out
96:27 - so here is the featured post section
96:30 - let me close the steps
96:37 - now in this feature post section we have
96:40 - two layouts of the blog uh one as this
96:45 - layout one let's call this layout two
96:47 - and in the recent post uh in this column
96:50 - manner we have third layout so let's
96:53 - create all these layouts
96:56 - so after this H2 element let's create
96:59 - one new
97:00 - and in this still we will use the
97:03 - display grid
97:05 - Let's uh keep the grid
97:10 - calls to two
97:12 - and grid
97:15 - Rows 2 2 as well
97:19 - set cap to 6 and margin top to 16.
97:25 - now in this table
97:27 - let's add one article element
97:31 - here we will use the log layout one
97:37 - let's add the class to this article
97:40 - element
97:40 - uh this article element will use two
97:44 - columns so write call
97:47 - sorry it will use one column and two
97:52 - rows so row spawn
97:54 - Dash to set the position to relative
97:58 - let's copy this article and paste it
98:01 - again for two more times
98:03 - now uh
98:06 - uh both of these blocks will cover one
98:09 - column and one row
98:11 - so let's just replace this to one and
98:16 - one is well so this will be layout 2 and
98:19 - here it is layout 2 as well let's save
98:22 - this
98:25 - so this will cover the blog layout one
98:27 - and here is block layout 2 and 2.
98:32 - so let's create all the layouts
98:39 - inside the component let's create one
98:41 - folder called blog
98:44 - and inside this blog let's add one
98:47 - component called log
98:49 - out one dot shares
98:53 - let's import
98:56 - the blog layout one right here
99:01 - now we will pass the uh
99:04 - next blog
99:05 - so in the blog
99:08 - pass the blog as sorted blocks and in
99:11 - the arrow blogs uh let's keep the index
99:14 - to 2.
99:18 - let's save this
99:21 - and from the blog layout one
99:24 - let's deconstruct the blog
99:30 - let's set set the class name to
99:35 - inline block
99:39 - set overflow to Hidden
99:43 - and rounded
99:45 - to excel
99:47 - now inside this do
99:51 - uh we will use the overlay that we have
99:55 - already used in the Home Cover section
99:57 - so just go to the Home Cover section and
100:01 - copy this overlay
100:03 - uh
100:05 - let's copy this whole thing
100:10 - copy this
100:14 - and up to the article
100:17 - and paste it right here now uh in the
100:20 - image uh
100:22 - instead of fill let's use height and
100:25 - width so right width
100:30 - right log dot image Dot
100:33 - width and do the same for the height as
100:36 - well
100:39 - let's import the tag
100:42 - let's import the link as well
100:46 - and we won't be needing the paragraph
100:50 - tag because we will not display the
100:53 - description
100:55 - let's save this uh also let's import the
101:00 - image first and let's save this
101:04 - now let's make this absolute
101:07 - so go here
101:11 - and remove all these classes
101:15 - let's set display to Absolute bottom two
101:19 - zero and padding two
101:23 - uh let's keep it to 10 and set set index
101:28 - to 20 let's keep its width to full as
101:32 - well let's save this
101:36 - and it looks uh
101:39 - bit strange
101:42 - let's change the radius
101:46 - so rounded 3XL to just Excel
101:54 - now let's change the color of this text
101:58 - so in the H1 let's replace it with H2
102:03 - and instead of text Dash 4XL will keep
102:07 - it to 2XL
102:10 - change the
102:12 - text color to text dash light
102:19 - let's add margin margin top to four
102:24 - now let's uh change the style of this
102:27 - tag as well so let's add the last name
102:32 - foreign
102:33 - left and right to let's set it to
102:39 - six
102:41 - text to small
102:44 - ing top and bottom to two
102:48 - and instead of water Dash 2 set it to
102:52 - border so it will set the border to one
102:56 - pixel instead of two now uh this will
102:59 - override this this class should override
103:02 - the Border Dash 2 class that we have
103:04 - defined in the tag component so for that
103:06 - let's add the important keyword and in
103:09 - Tailwind you just have to write the
103:11 - exclamation mark
103:13 - so it will add the important keyword
103:16 - let's save this
103:19 - and looks much better
103:26 - now let's uh
103:28 - remove this we don't need it instead let
103:32 - let's set set index to 10 for this
103:36 - overlay and for this do let's keep this
103:40 - at 2 20.
103:47 - now similar to this let's create a
103:50 - the blog layout number two
103:59 - let's save this and
104:02 - import it right here
104:04 - just like this
104:12 - and in the blog let's change the index
104:15 - number
104:19 - let's deconstruct the block
104:26 - now let's use the grid
104:30 - so grid grid calls to 12
104:35 - set cap to 4
104:38 - items to Center and text to dark
104:45 - so there will be two part one is for the
104:48 - image and we will add the image inside
104:51 - this link
104:52 - so in the link uh let's uh add the blog
104:57 - dot URL
105:00 - for the class name
105:03 - let's
105:06 - let's add the image
105:08 - make sure to import it from the next and
105:11 - import this link as well
105:15 - and the image SRC
105:17 - let's copy it from the first layout
105:21 - just copy this image
105:24 - and paste it right here
105:28 - now let's add
105:29 - [Music]
105:31 - different classes set aspect ratio
105:35 - to square
105:36 - with two full height 2 full object to
105:41 - cover set object position to Center
105:48 - so we have 12 columns and this image
105:50 - will take the four columns so right call
105:53 - Dash spawn Dash four
105:56 - and set height to full rounded to Excel
106:02 - and overflow to Hidden let's save it
106:07 - and it looks better
106:10 - now after this link we will add all the
106:13 - other information
106:15 - let's copy it from the log layout one
106:19 - just copy this div
106:22 - and paste it right here
106:25 - let's change the class names
106:30 - set it to cold as 1-8
106:36 - width to
106:38 - full now instead of this tag we will use
106:41 - the spawn element and inside this one
106:45 - let's add this
106:47 - tag
106:54 - let's remove this tag element
106:57 - now for this one set the text to upper
107:02 - case
107:04 - and text color to text Dash accent
107:09 - font to semi bold
107:17 - text size text Dash SM
107:21 - now for the link class let's remove the
107:24 - margin top 6.
107:27 - instead add the display to inline block
107:35 - and set margin top and bottom to one
107:43 - let's keep the font to
107:47 - semi bold
107:52 - and text to
107:54 - LG
107:58 - let's remove this classes
108:04 - and looks better
108:09 - now for this let's decrease the opacity
108:12 - so go to the spawn
108:15 - and in the from accent
108:18 - add the opacity of 50 do the same for
108:21 - the two dash excellent
108:25 - now it looks much better
108:28 - let's add the date
108:31 - so after the link add this one inside
108:35 - this pan we will use the
108:38 - format function from the date Dash FNS
108:41 - Library so make sure you import it
108:45 - now in this function write new date
108:50 - so we will use a Blog
108:52 - Dot
108:54 - published at date
108:59 - let's add the format of the date
109:05 - so we want the whole month
109:08 - date and whole year
109:12 - let's save it
109:20 - I think this here should be in small
109:23 - letters
109:25 - let's save it
109:29 - and here it is
109:32 - let's add the class names
109:37 - capitalize
109:40 - set text color to
109:42 - bit Gray
109:47 - font to semi bold
109:51 - and text to base
109:56 - and looks much better
109:58 - we can also try the
110:01 - gray color
110:03 - well it looks more darker so let's keep
110:07 - the dark slash 50.
110:10 - now let's create this recent post
110:13 - section
110:18 - copy this
110:20 - close all
110:22 - in the home folder create one section
110:25 - called reset post dot JS and paste it
110:29 - right here instead of featured post
110:31 - let's keep the
110:35 - recent
110:37 - post
110:39 - let's remove this this whole div and
110:42 - instead of featured post just write
110:45 - recent post
110:50 - let's remove this import
110:53 - let's save it and go to the page.js file
110:59 - and let's import the recent post
111:02 - make sure you pass the Vlog as well
111:07 - let's check it out
111:12 - so here is the recent post
111:15 - now here uh with the recent post title
111:18 - we have this view all uh link that uh
111:22 - goes to the slash category slash all
111:25 - let's add this and add all these blogs
111:33 - let's copy this create one div and paste
111:36 - a H2 element along with the link
111:41 - set href to slash categories
111:46 - slash all
111:49 - and right view all
111:54 - in the class name
111:56 - let's add
111:58 - display to inline block
112:01 - font to
112:03 - medium text color to text accent
112:07 - underline
112:10 - and underline offset 2.
112:14 - to
112:15 - and set text to text Dash LG
112:20 - now in this div let's add the display to
112:23 - flex width to full and justify to space
112:28 - between
112:34 - let's import this link
112:45 - let's remove this with full
112:49 - save it
112:50 - and it looks much better
112:54 - after this leave
112:55 - let's create one more dough
112:58 - in this day we will use the display grid
113:02 - and set grid
113:05 - calls to 3 set Gap to
113:10 - 16 and margin top to 16 as well
113:14 - now in this div let's display all blocks
113:19 - so
113:21 - we will display only six blocks so we
113:25 - have already displayed four blogs so we
113:28 - are left with the rest of the blogs
113:33 - so let's use the sorted blocks
113:36 - dot slice now uh the first Vlog was the
113:42 - block dash one and after that we have
113:44 - displayed four blog so we will slice
113:47 - this array from 5 to 11 to get the uh
113:51 - five uh sorry six blocks
113:54 - so dot map so this last method will give
113:57 - us the
113:58 - 5 6 7 8 9 and 10th block slice method
114:04 - will not consider this last boundary
114:07 - let's use map
114:10 - get the plug and index
114:19 - let's return the article
114:25 - and here we will use the blog layout
114:29 - three
114:32 - let's add the class name to this article
114:35 - element
114:36 - set cold spawn dash one and row that's
114:40 - fun dash one as well
114:43 - and set the position to relative
114:47 - Also let's add the
114:51 - rows as well
114:53 - so three rows
114:56 - and save it
115:00 - so we have one two and three four five
115:03 - and six blocks
115:06 - let's create the third layout
115:10 - let's add blog layout
115:14 - three dot Js
115:18 - let's save it
115:21 - and import this right here
115:29 - make sure to import it
115:31 - in the blog
115:34 - let's pass the log element
115:40 - let's deconstruct the blog
115:44 - now this layout will be almost the same
115:48 - as the layout too so let's go to the
115:51 - layout 2.
115:53 - copy the whole thing and paste it right
115:56 - here just change the names
116:00 - and let's uh change some classes
116:04 - so now uh let's not use the grid
116:10 - instead we will use flex Flex Dash
116:14 - column items to Center
116:19 - now let's remove this call spawn-4
116:22 - keep everything as it is
116:25 - let's change this aspect Square
116:29 - two four by three
116:35 - and after in this do let's remove this
116:39 - and set Flex to flex Dash call
116:43 - with two full and margin top to four
116:48 - let's save this
116:54 - and it looks much better
117:01 - now as you can see this header is
117:05 - going under this blogs so let's add the
117:08 - set index
117:10 - go to the header
117:14 - now in this header element let's go to
117:17 - this new
117:19 - set Z to 50
117:25 - and it looks much better now
117:28 - let's add the hover animation
117:31 - let's go to block layout 3 and in this
117:36 - image
117:40 - first let's add one class called group
117:44 - right here
117:46 - and
117:47 - and this image
117:50 - let's write group Dash hover we'll scale
117:54 - this image to 105
117:57 - set
117:59 - transition
118:01 - to all is and
118:04 - duration to
118:07 - 300 let's save this
118:11 - and looks much better
118:15 - now for this one
118:18 - Let's uh
118:20 - add the group over instead of just hover
118:24 - so in the spawn
118:28 - let's add the group Dash over
118:34 - now it looks much better
118:45 - let's do the same for this elements as
118:48 - well
118:51 - copy
118:53 - this
118:58 - copy this
119:01 - and open the layout to
119:05 - add in the image at the
119:09 - group class
119:11 - and let's add group Dash hover in this
119:15 - part
119:20 - and it looks great
119:25 - let's do the same for the layout one as
119:27 - well
119:29 - close all this open layout one
119:32 - add the image
119:35 - let's add the
119:37 - group class
119:39 - and group Dash hover
119:48 - let's add cursor
119:51 - to pointer for the image
119:58 - and this looks much better
120:05 - looks great let's compare this with
120:08 - the
120:10 - demo
120:13 - I think we have to add a little bit
120:15 - padding here
120:17 - go to the header
120:22 - so we have MR2 MX2 let's add the MX2
120:27 - instead of MR2
120:38 - and looks almost same
120:46 - now let's add the footer
120:49 - now same as we did for the header let's
120:52 - create
120:54 - one more folder called
120:57 - footer and add
121:00 - index.js file
121:05 - let's name it as footer
121:09 - let's save it and import it in the
121:12 - layout
121:13 - after this
121:15 - children component
121:26 - so here is the footer
121:29 - now let's
121:31 - use the footer element
121:37 - inside this footer let's add text in the
121:41 - H3 and another text in the
121:45 - paragraph
121:46 - now go to the project files and open
121:50 - this website content.txt file here you
121:54 - will find the text for the footer copy
121:57 - this paste it right here
121:59 - and copy this paste in the paragraph tag
122:05 - so after the paragraph We have one form
122:09 - now for this form we are going to use
122:12 - the reactor hook form
122:15 - so let's go to that website react hook
122:19 - form
122:21 - open this website
122:24 - now react to form as mentioned here is a
122:27 - performance flexible and extensible
122:29 - forms with easy to use validations so
122:32 - this is really create Library if you are
122:36 - dealing with forms in react
122:40 - for now just go to the tools and click
122:43 - on this form Builder
122:45 - and let's see how many fields we will
122:48 - require so for this we will only
122:51 - required input and this submit button
122:55 - so let's delete all the other fields
123:06 - let's edit this it's not the first name
123:10 - it is an email
123:14 - and type select it to email
123:18 - if you want any other validations you
123:21 - can write it from here let's update
123:25 - and here is the code
123:28 - first let's copy this and import it
123:31 - right here
123:34 - copy the form
123:37 - and after this paragraph tag
123:41 - and copy
123:43 - all this
123:46 - and paste it right here
123:48 - for now let's
123:50 - save this and check it out
123:57 - so as mentioned here here create context
123:59 - only works in client components
124:02 - so we have to make it as a client
124:05 - component and to convert any server
124:08 - component to client component we just
124:10 - have to use this use client
124:13 - and save it
124:19 - so here are all the text and the form
124:22 - let me just type anything code box at
124:25 - gmail.com
124:27 - let's click on the submit let's check
124:31 - the log so we are getting the object
124:39 - and this object will contain the email
124:47 - first let's style this and then we will
124:50 - see how this form is working
124:56 - I had class to footer
124:59 - set margin
125:01 - top
125:03 - to
125:04 - 16.
125:06 - rounded to 2XL VG dark
125:12 - margin to
125:15 - then
125:17 - Flex Flex direction to column items
125:22 - Center
125:24 - text light
125:28 - let's save this
125:34 - now for the H3
125:36 - let's add margin top to 16 font
125:41 - medium text to
125:43 - Center capitalize and text size to 4
125:49 - Excel padding left and right to four
125:52 - save it
125:54 - and looks great
125:57 - now for the paragraph tag
126:01 - let's set margin top to 5 pairing left
126:05 - and right to 4 text to Center width to
126:09 - full let's set width two three by five
126:14 - font to
126:16 - light
126:20 - set text size to base
126:25 - looks better
126:28 - now for the form
126:30 - let's add the class name
126:33 - set
126:34 - is in top to six
126:39 - let's set minimum width
126:41 - to at least
126:44 - 384 pixel
126:49 - set display to Flags items to
126:54 - stretch
126:55 - VG to light
127:00 - padding Dash 2
127:03 - set rounded
127:07 - and margin left and right to 4.
127:11 - let's save it
127:14 - and looks much better
127:17 - now let's use the Tailwinds form plugin
127:22 - for that let's open the railway in CSS
127:26 - plugins
127:33 - let's scroll down
127:36 - click on this forms
127:40 - so we have already downloaded this forms
127:42 - plugin we just have to add it in the
127:46 - tailwind.config.js file so copy this
127:52 - open the Tailwind
127:55 - and in the plugins
127:57 - let's add it
127:59 - let's save this
128:04 - so this will apply the basic
128:09 - style to this form
128:12 - that is uh
128:15 - let's add class to this input
128:19 - let's set width to full
128:24 - set background to transparent
128:30 - set text to dark
128:36 - now on Focus
128:39 - we want the border to be dark
128:43 - and on Focus
128:48 - set ring to zero we don't want any
128:52 - border
128:53 - now
128:55 - set border to zero and set border to
128:59 - bottom which is only want the bottom
129:03 - border set margin right to
129:06 - 2
129:07 - padding bottom to one
129:10 - and let's save this
129:14 - and it looks better
129:17 - let's change this placeholder to enter
129:22 - your email
129:27 - let's save it
129:29 - and add the glass for the submit button
129:33 - right down to the dark
129:35 - text to light
129:38 - cursor to
129:40 - pointer
129:42 - font cited to medium
129:45 - rounded
129:48 - pairing left and right to Phi padding
129:51 - top and bottom to one
129:53 - and let's save this
129:58 - and it looks much better
130:01 - so let me tell you how this form works
130:05 - first let's see what is this use form
130:08 - hook so this use form Hook is to manage
130:12 - the forms uh and it gives us different
130:15 - uh functions and values such as a
130:19 - register now this register method allows
130:22 - you to register an input or select an
130:25 - element and apply different valuation
130:27 - Rules to This input like this we have
130:31 - used register method to register the
130:34 - email input and here are some validation
130:37 - rules
130:38 - now next is the handle submit method
130:41 - now this function will receive the form
130:43 - data a form validation is successful now
130:47 - this form state is an object that
130:49 - contains information about the entire
130:51 - form such as errors and it also gives us
130:55 - different values such as is loading or
130:58 - is submitting it's submitted Etc so that
131:01 - you can create interactive forms and
131:04 - this is simple on submit
131:07 - function
131:08 - that gives us the data now as you can
131:13 - see here this handle submit function
131:15 - will take the under on submit function
131:20 - so once the validation is done then it
131:22 - will call this function and Returns the
131:25 - data so there are lots of function in
131:28 - this react hook form then we are
131:31 - currently using but I suggest you to go
131:34 - to the API and check all this different
131:37 - functions and methods
131:40 - let's add the social media links for
131:43 - that let's go to the header
131:48 - and let's copy this whole div
131:52 - and paste it after the form
131:57 - so in this do let's add the class name
132:01 - set display to flex items to Center and
132:04 - margin top to eight
132:07 - let's save it
132:10 - we have to import all these icons
132:13 - let's import it
132:16 - import LinkedIn
132:19 - Twitter icon
132:21 - GitHub icon and
132:24 - triple icon
132:29 - so here are all the icons let's change
132:31 - the color of this GitHub let's add
132:35 - one more class called
132:40 - fill
132:44 - dash light
132:48 - and now it looks much better
132:52 - now after this do let's add one more
132:55 - dough
132:57 - add one more spawn
132:59 - right
133:00 - Ampersand copy for the copy symbol go to
133:05 - the website content
133:07 - and copy this
133:09 - paste here
133:13 - let's use the link
133:16 - set href to slash sitemap dot XML
133:22 - and write
133:24 - sitemap dot XML
133:28 - after this link add one more div
133:31 - and right made
133:34 - with
133:36 - right Ampersand hearts
133:40 - bye let's use the finger tag and inside
133:45 - this anchor title
133:47 - let's write code box
133:50 - for now let's add the link of my blog
133:54 - website called Dave dreaming.com
133:59 - let's save this
134:02 - and here it is
134:05 - so in this do let's add the class name
134:09 - set with to full margin top two
134:13 - uh 32 or let's say
134:16 - 24
134:20 - position to relative font to medium
134:25 - let's set the powder
134:28 - top
134:29 - border Dash solid and Border color to
134:33 - border dash light
134:38 - set padding left and right two
134:42 - sorry top and bottom two six
134:45 - running left and right to eight
134:48 - set display to flex Flex Direction too
134:52 - row
134:54 - items to
134:57 - Center
134:58 - and justify
135:01 - face between
135:05 - let's save it
135:07 - now for this this one
135:11 - let's
135:12 - use text Dash Center and for this link
135:17 - let's add the class name
135:20 - set text Dash Center underline and
135:25 - that's it
135:27 - for the still let's add class name text
135:31 - Dash Center
135:34 - in the anchor tag
135:37 - let's keep the underline
135:43 - and that's it
135:45 - let's remove this padding left
135:48 - so just write opening left to zero
135:51 - and this input
135:55 - and now it looks much better
135:57 - let's remove this extra white space
136:11 - open the
136:13 - recent post
136:15 - so instead of this three by three grid
136:18 - let's write
136:21 - three by two let's save this
136:25 - now it looks much
136:28 - better
136:30 - so our homepage is completed now let's
136:33 - uh create this blog page
136:37 - let me close all this
136:41 - close this as well
136:45 - thank you
136:47 - let's open the blog page
136:52 - now in this URL as you can see
136:56 - there is slash blog and slash blog title
137:00 - Now to create a such URL and to create
137:04 - uh all the pages for all the blogs we
137:07 - are going to use the dynamic routing so
137:10 - let's write Dynamic routing next Js
137:15 - click on this Dynamic routes
137:18 - make sure you are in the app router
137:21 - now as mentioned here Dynamic segment
137:24 - can be created by wrapping a folder's
137:27 - name in square brackets for example ID
137:30 - or slug so Dynamic segments are passed
137:34 - as the params prop to layout page route
137:37 - and generate metadata functions so let's
137:40 - see how this works
137:43 - let's open the
137:45 - app folder
137:47 - and inside this app folder create one
137:50 - more folder called vlogs
137:55 - and inside the blogs let's create one
137:57 - more folder called slug for the blog
138:01 - slug
138:03 - now inside the slug create one more file
138:08 - called page dot Js
138:11 - now uh whatever we passed after this URL
138:15 - so slash blog slash Blog name this Blog
138:18 - name will be passed as a slug to this
138:21 - page.js file and we will use the use
138:24 - that slug to display uh the data for
138:27 - that particular block
138:28 - so let's see how we can get this log go
138:33 - to this documentation and let's copy
138:36 - this
138:40 - instead of page let's just write blog
138:43 - page
138:44 - and remove this part
138:50 - and let's save this
138:54 - open the website click on this blog
139:00 - as you can see in the my post it will
139:03 - give us the slug
139:05 - which says building Progressive web apps
139:08 - bringing the gap between web and mobile
139:10 - so it is same as this part of the URL
139:13 - let's click on the another blog
139:17 - and here is the same as the URL
139:22 - so let's see how we can use this lug to
139:25 - render the blog so in this blog page
139:29 - let's get the log
139:34 - first let's import the all blocks from
139:37 - the content layer slash generated
139:43 - so all blogs
139:45 - dot find
139:47 - let's pass each block
139:50 - and
139:52 - let's compare it with vlog
139:56 - dot underscore Raw
139:59 - dot flat in path
140:01 - which will be the URL
140:04 - is equal to the
140:07 - params dot slug
140:10 - let's see this flattened path go to the
140:14 - CMD
140:16 - and here you can see the flattened path
140:19 - is the slug of the blog
140:28 - now uh how this
140:31 - is this going to be the slug of the
140:33 - block because
140:35 - this is the file name for this
140:37 - particular blog
140:39 - open the content folder and as you can
140:41 - see all these file names are working as
140:45 - the slug so make sure that this file
140:48 - names are unique and not the same
140:55 - so this will give us the blog uh that
140:58 - has this same slug as the flattened path
141:02 - now let's
141:03 - render this blog
141:06 - add the article element
141:08 - let's add one more div and this div we
141:12 - will add the tag
141:16 - make sure to import this tag component
141:20 - and the tag name let's
141:23 - add the tag so blog dot tags
141:28 - first element
141:31 - then link
141:35 - add vectrix
141:38 - slash categories
141:41 - slash
141:44 - long
141:45 - dot tags
141:47 - and 0.
141:53 - let's add the
141:56 - class name as well
142:00 - set padding left and right to six
142:04 - text to small
142:06 - and padding top and bottom two two
142:10 - let's close this tag
142:14 - so after this tag let's add the H1
142:17 - element which contains the blog
142:20 - dot title
142:23 - let's add class name
142:26 - set display to
142:29 - inline block
142:32 - margin top
142:34 - two six point semi bold
142:39 - capitalize
142:41 - text
142:43 - dash light
142:46 - text size to 5 XL
142:50 - leading
142:53 - to normal
142:55 - leading that means the line height
143:01 - set position to relative and width to
143:06 - let's keep it as 5 by 6.
143:10 - so it does not span the whole uh area
143:14 - let's save this
143:19 - so we have this H1 tag right here
143:24 - let's add all the other classes
143:28 - so in this first day we have text but in
143:31 - the second view let's add the image
143:35 - add one do
143:37 - and let's add the class name
143:40 - now this uh will be the absolute one so
143:45 - write position to Absolute
143:48 - top 0 left
143:51 - 0 right 0
143:56 - bottom 0 as well height to pull
144:01 - PG dark slash 6C opacity
144:07 - and inside this do let's add the image
144:09 - for image you can use layout to
144:15 - copy this whole image and paste it right
144:18 - here
144:20 - make sure to import the image from next
144:22 - slash image
144:27 - we don't need any animation here
144:34 - that's it let's save it
144:38 - let's decrease its height
144:42 - so let's uh
144:44 - go to the first div and add the classes
144:47 - set margin bottom to 8
144:51 - text to Center relative width to full
144:56 - and height to
144:59 - 70 VH
145:02 - set VG to dark let's save it
145:07 - and it looks much better
145:10 - now for the second deal let's add the
145:13 - class name
145:17 - set width to full set index to 10
145:20 - display Flex Flex direction to column
145:24 - items two
145:25 - Center
145:27 - justify to Center as well
145:30 - and set absolute
145:33 - and let's set it to the center so top
145:36 - dash 1 by 2 left dash 1 by 2 that means
145:41 - left 50 percent
145:42 - and negative translate X to 1 by 2 and
145:48 - negative Translate Y
145:52 - 2 1 by 2 as well
145:57 - let's save this
146:00 - as you can see this div is in the center
146:02 - as well
146:05 - let's check for the other blocks as well
146:14 - and it looks great
146:16 - actually we have to close this div
146:18 - because it will work as an overlay let's
146:22 - delete this and save this
146:27 - and now it looks much better
146:30 - let's add this block details
146:36 - so in the blog folder create one
146:38 - component called log details dot Js
146:46 - now this blog details will have blog
146:50 - slug
146:56 - let's import it right after this do
147:04 - pass the blog
147:06 - and the slug as well
147:16 - let's remove this
147:18 - and add
147:20 - time
147:26 - so inside this time element we will
147:28 - render the date
147:31 - so just write format make sure to import
147:33 - this function from date Dash FNS Library
147:37 - and use parse ISO
147:43 - add blog dot published
147:48 - published
147:49 - [Music]
147:51 - at
147:53 - and for the format
147:56 - let's format it
147:58 - right l
148:00 - D for the date and Y for the year
148:07 - let's import this blog details
148:20 - and we have to pass slug as params.slug
148:28 - so here is the date
148:34 - now next is the view
148:38 - so for now let's just write spawn and
148:40 - just write 10 views
148:46 - next
148:47 - let's add one more do
148:50 - to add the reading time
148:53 - now we have to compute compute this
148:56 - reading Time by using the library called
148:58 - reading dash time which we already have
149:01 - installed right here
149:04 - so let's go to the contentlayer.config
149:08 - in the computed Fields after the URL
149:11 - let's add reading time
149:16 - and set its type to Json
149:22 - and let's use the resolve this function
149:25 - will give us the dock
149:28 - and let's call reading time function
149:32 - from the reading dash time Library
149:35 - and in this function we will pass the
149:38 - talk dot body
149:40 - dot dot Raw
149:43 - let's save this
149:46 - and check it out
149:52 - let me just lock this blog
149:58 - now if you check right here that is this
150:00 - reading time so it has different format
150:03 - it has text which says 10 minutes read
150:06 - in minutes in time and in words so there
150:10 - are
150:11 - 1882 words
150:14 - so let's render this so just write blog
150:18 - dot reading
150:20 - time dot text
150:23 - and after this do
150:25 - let's use the link element
150:29 - this will link to
150:33 - slash categories
150:36 - slash
150:39 - log
150:42 - dot slug
150:44 - zero
150:47 - let's close this link
150:50 - and use this
150:53 - variable
150:55 - let's add hash before this
151:02 - let's add
151:05 - class name set margin to 3
151:09 - let's do the same for
151:13 - this div as well
151:16 - this Pawn
151:18 - and for the time
151:24 - now for this div
151:27 - and let's set padding left and right to
151:29 - dash 10 background to Accent color text
151:34 - to light
151:37 - padding top and bottom to two display
151:40 - Flex items
151:43 - Center justify space around
151:48 - Flex
151:49 - wrap
151:51 - and text size to extra large font
151:56 - medium
151:58 - and set margin left and right to Phi
152:04 - let's set it to 10 let's make it rounded
152:08 - up to LG
152:16 - now it should be
152:19 - tags not slug
152:22 - let's save this
152:34 - and looks much better
152:37 - so after this uh block details we have
152:41 - two elements one is the table of content
152:44 - and another is the blog details
152:47 - so let's render them
152:57 - so after the blog details let's create
153:00 - one more div
153:01 - let's add the class name set display to
153:04 - grid grid calls to 12.
153:10 - set cap to
153:12 - 16 margin top two
153:15 - eight and padding left and right to 10.
153:20 - so next one is the div for the table of
153:24 - content
153:25 - let's use the
153:29 - call spawn
153:32 - Dash 4
153:35 - and another do
153:37 - for the log details this will use
153:40 - correspond Dash 8
153:43 - let's create another component to render
153:47 - the block details so inside the blog
153:49 - folder create one component called
153:52 - render
153:54 - MDX dot Js
153:58 - let's
153:59 - import this MDX component
154:03 - let's remove this and instead we will
154:06 - render this component so this component
154:09 - will
154:11 - use the blog prop
154:13 - so make sure you pass the blog let's
154:16 - save this
154:18 - and deconstruct the block from here
154:21 - and as we have seen
154:25 - right here we'll use this use MDX
154:28 - component
154:29 - copy this
154:31 - paste it right here
154:38 - copy this as well
154:45 - and copy this
154:59 - let's save this
155:02 - and check it
155:05 - we have yet to import this
155:16 - it should be blog not the post
155:20 - let's check this
155:25 - all right
155:32 - I think we are not getting the
155:36 - uh blog.body.code
155:39 - let me check the content layout.config
155:44 - I think uh there is one more field that
155:46 - we have to add that is called the
155:49 - content type
155:51 - now let's set it to MDX
155:57 - let's save this
156:02 - all right now in this blogs I have used
156:05 - the Nexus image so it is uh telling me
156:09 - that there is no image component is
156:12 - imported so let's uh go to the
156:15 - render.mdx
156:17 - and let's create
156:19 - one uh variable
156:22 - called MDX components
156:30 - and here we will add the image component
156:33 - let's pass this as
156:37 - the components inside this MDX content
156:41 - make sure you import the image
156:45 - from the next Js
156:50 - let's save this
156:54 - now it says cannot access image.prop
156:57 - Types on server so we have to convert
156:59 - this component into a client component
157:03 - so let's use use client
157:07 - let's save this
157:09 - and as you can see it is rendering this
157:13 - uh log details
157:17 - let's add the class to this div
157:20 - set call
157:21 - spawn two eight
157:25 - and font to enter
157:29 - let's save this
157:33 - as you can see we are getting all this
157:35 - content
157:37 - so how we can style this so for that we
157:42 - have to open the Italian CSS plugins
157:45 - again
157:49 - go to this typography plugin
157:54 - and we have already installed it so
157:57 - let's import this in the tailwind.config
158:00 - file
158:05 - let's save this
158:14 - now uh let's apply the class name
158:18 - now in here
158:20 - uh as I mentioned here we can use the
158:23 - pros classes to add sensible typography
158:26 - styles to any vanilla HTML so we have to
158:30 - write just prose class
158:33 - so let's just write pros and Save
158:39 - and here it is it will apply all the
158:42 - necessary classes to the block elements
158:46 - H1 tags H2 tags Etc
158:51 - and by just adding one class it looks
158:53 - really great
158:57 - now let's set its width
159:00 - to full
159:02 - and also increase the pros class to Pros
159:07 - Dash LG let's save this
159:11 - now it will increase the font uh size
159:16 - let's set width to Max
159:21 - so max with to Max content
159:25 - and now it looks much better
159:33 - now still there is some format is
159:36 - required so for that you can visit this
159:39 - website and
159:42 - and there are multiple classes available
159:44 - multiple themes you can use
159:48 - now if you want to change any element
159:51 - we can use this class let's say you want
159:54 - to change the style of the H1 element
159:57 - then you can use Pros Dash H1 class so
160:01 - let's use it for the block code so just
160:05 - copy
160:06 - this
160:08 - and paste it right here
160:14 - now for this block code I want to change
160:17 - its background
160:18 - to purple and set opacity to 20
160:23 - let's save this
160:27 - and as you can see in this block code
160:29 - element
160:30 - that is purple in the background let's
160:32 - add the
160:35 - padding
160:36 - set clock or padding two two
160:44 - and padding left and right two
160:47 - six let's save this
160:50 - looks much better
160:54 - now let's change the Border color of
160:57 - this block code element
160:59 - to border Dash accent
161:04 - and now it looks much better
161:08 - Also let's make this uh normal fonts
161:13 - instead of this italic
161:17 - so in the block code
161:19 - changed to not
161:24 - italic class
161:29 - and this looks much better
161:34 - foreign
161:40 - for that you can use
161:42 - rounded
161:44 - for the right side to LG so this will
161:50 - add the powdered top right radius to 0.5
161:52 - RAM and Border bottom right radius to
161:55 - 0.5 M as well
161:58 - now as you can see both of these Corners
162:00 - are rounded
162:07 - let's change the color of this Ally
162:10 - markers
162:12 - for that you can use froze Dash Ally
162:17 - and use the marker
162:20 - change the color to text Dash accent
162:24 - and now it looks great
162:40 - now this is the table but it is not
162:45 - formatted well
162:46 - so for this we have to add a remark and
162:51 - re-hype plugins so what is remark and
162:54 - re-hype so remark is a markdown
162:57 - processor while the G hype is an HTML
163:00 - processor so let's see which plugins we
163:03 - are going to use
163:05 - but before that let's uh go to this
163:10 - documentation and click on the make
163:11 - source
163:14 - and click the MDX
163:17 - now here we can add different plugins
163:21 - for the rehype and remark as well
163:25 - so let's open the content layer
163:31 - go right here type MDX
163:35 - and let's add the
163:39 - remark plugin
163:42 - and inside this array
163:45 - let's add remark gfm make sure you
163:49 - import remark gfm from remark gfm let's
163:53 - save this
163:55 - and check this blog now we can see this
163:58 - table and very formatted way
164:02 - so how this happened let's check what is
164:05 - remark gfm
164:08 - let's click on this link
164:12 - now let's scroll to the Bottom now as
164:15 - mentioned here this remark plugin is
164:18 - support the gfm that means the it
164:20 - supports Auto Link literals footnotes
164:23 - strikethrough tables task list Etc that
164:27 - are written in the markdown files like
164:29 - as you can see in this example uh for
164:33 - footnotes you can write like this
164:37 - and for the strikethrough you can use
164:39 - this till this
164:42 - this is the table format in the markdown
164:44 - and this is the task list
164:49 - now let's uh add the rehire plugins
164:58 - let's add re-hype plugins
165:02 - and in here
165:04 - first we will use the re-high slug
165:08 - so let's see what is this and make sure
165:11 - you import this rehive slug from this
165:13 - rehype Dash slug
165:25 - let's open this
165:29 - so this rehab plugin adds an IDs to the
165:33 - headings
165:34 - so let's open the inspect element
165:38 - click on any heading
165:42 - as you can see there is an ID
165:44 - about this plugin now we will use this
165:47 - ID to Target this heading
165:50 - now let's add one more plugin
165:55 - this plugin called
165:57 - V hype Auto Link headings
166:02 - make sure you import it
166:04 - like this Import rehive Auto Link
166:07 - headings from rehab Auto Link headings
166:10 - let me remove this let's save this
166:14 - and let's uh check this heading again
166:21 - now as you can see here inside this H3
166:25 - there is a link
166:28 - and in this link there is an href that
166:32 - that is the ID of this element so uh
166:36 - this plugin will create a automatic
166:38 - links to to The Heading so let's say
166:43 - we go to the
166:45 - URL and add this ID and press enter so
166:51 - it will scroll down to this heading so
166:54 - whenever you want to share this blog or
166:57 - part of this blog too and even you can
166:59 - share this URL so this will start from
167:01 - this heading
167:06 - let's see more details about this plugin
167:17 - let's see the options
167:22 - so uh we have different type of behavior
167:25 - option in prepend it will inject the
167:28 - link before the heading text a pen will
167:31 - inject the link after the heading text
167:36 - wrap will wrap the whole heading text
167:38 - and before and after will insert the
167:42 - link before the heading or after the
167:44 - heading so we will use the append
167:46 - Behavior so to add this option go to the
167:49 - content layer
167:51 - let's import
167:52 - this in an array and let's create one
167:56 - empty object
167:58 - let's add the
168:01 - Behavior option and set its value to
168:04 - append
168:05 - let's save this
168:08 - and
168:10 - check this heading element
168:13 - now here is the link after the heading
168:17 - text now let's add smaller hash for this
168:21 - so this link has a spawn element and it
168:24 - has icon space icon Dash link last names
168:27 - so let's open the
168:29 - global.css file
168:31 - first let's set the HTML scroll Behavior
168:35 - to smooth
168:37 - then let's use H1
168:41 - to link
168:43 - to dot icon
168:46 - dot icon Dash link
168:49 - so we are going to Target this spawn
168:52 - element
168:55 - now let's use the
168:57 - V4 sudo class
169:01 - we're going to do this for the H1 H2 H3
169:06 - that's it
169:10 - let's write H2 H3
169:16 - and add the content
169:18 - to hash
169:22 - and font size to
169:25 - 0.8 Ram
169:27 - let's save this
169:30 - now as you can see there is this small
169:32 - hash for each H1 H2 and H3 tags
169:38 - on click on this it will scroll to this
169:40 - element
169:42 - and also it will change the ID
169:45 - of this URL now let's remove this
169:48 - underline
169:49 - for that we have to do
169:53 - H2
169:57 - a link then H3
170:00 - a link
170:04 - and set text decoration
170:08 - to none
170:12 - let's add
170:15 - important keyword
170:18 - and now it looks great
170:23 - now let's see uh
170:26 - how to add different code themes for
170:29 - this code blocks
170:31 - so let's uh open the
170:34 - free hype
170:36 - pretty code
170:39 - go to this website
170:41 - now as mentioned here rehi pretty code
170:43 - is a rehi plugin powered by the Shiki
170:46 - syntax highlighter that provides
170:48 - beautiful code blocks for markdown or
170:51 - MDX and it's fast since it avoids
170:54 - runtime syntax highlighting by executing
170:57 - it build time
170:58 - so this is a really good plugin to
171:01 - highlight the code syntax
171:05 - let's see how we can use it
171:09 - so go to the installation we have
171:12 - already installed this plugin and the
171:15 - Shiki syntax highlighter as well and
171:18 - let's use this go to the content layer
171:24 - and here
171:27 - let's use this
171:30 - foreign
171:35 - pretty code
171:38 - and
171:39 - let's write code options
171:44 - so just write const code options
171:48 - and inside this code options we will
171:50 - pass the theme
171:56 - let's see the options
172:03 - so we have theme option
172:05 - so the default theme is GitHub dark
172:07 - dimmed and Shiki has a bunch of
172:09 - pre-packaged theme which can be
172:11 - specified as plain text let's go to this
172:15 - pre-pack themes
172:17 - so here are all the themes that you can
172:20 - use you just have to write in the plain
172:24 - text so we will use the GitHub theme so
172:27 - which is
172:29 - right here GitHub Dash dark
172:31 - so just write GitHub Dash dark let's
172:36 - save this
172:42 - and as you can see uh now it has a color
172:53 - now there are a lot of options that you
172:55 - can use such as Showing Line highlighted
172:59 - lines
173:00 - are line numbers or word highlighting
173:04 - inline code highlighting
173:07 - let's use this now as mentioned here CSS
173:11 - counter can be used to add line numbers
173:13 - so let's copy this and paste it inside
173:17 - the
173:20 - global.css file
173:24 - let's save this
173:26 - now to show the line numbers on the blog
173:30 - we have to add an option
173:35 - now to show the line numbers we have to
173:37 - add an option like this
173:42 - let's open
173:44 - right
173:46 - here now as you can see there are line
173:49 - numbers let's open this part in the
173:51 - markdown file so we are in the building
173:53 - process Progressive web apps blog
173:57 - go to the content and open
174:01 - building Progressive web apps
174:03 - let's go to the code part so this is the
174:07 - code so I just have to add the show line
174:10 - numbers right here
174:12 - now let's say if we want to highlight
174:14 - any line
174:16 - let's check out
174:18 - so highlight any specific line so this
174:22 - should highlight line one two three and
174:24 - fourth
174:26 - let's add this option let's save this
174:31 - and that is nothing because we have to
174:35 - add the CSS
174:37 - let's open the inspect element
174:40 - click on this line one
174:43 - now as you can see uh in the first four
174:47 - line there is one data attribute called
174:49 - Data Dash highlighted dash line so for
174:52 - that we have to add the CSS
174:54 - so let's go to the global dot css4 file
175:00 - and after this
175:03 - let's add this attribute
175:05 - and add the required styling so for the
175:08 - background color
175:10 - I will use rgba
175:14 - 2.55255255 and set the opacity to point
175:18 - one
175:19 - and add the important keyword let's save
175:22 - this
175:24 - now as you can see uh background color
175:26 - is changed for this four lines
175:32 - Let's uh add the padding
175:35 - to 2 pixel
175:38 - padding left to zero
175:42 - padding
175:44 - right
175:46 - to 4 pixel
175:49 - and
175:51 - border radius
175:53 - to 2 pixel
175:55 - let's add
175:56 - bottle left so border
176:00 - left
176:01 - to 2 pixel solid and let's copy the
176:05 - accent color from Tailwind config
176:09 - copy this and paste it right here
176:14 - let's save this
176:18 - and as you can see
176:22 - there is this
176:24 - accent color on the left
176:27 - now let's see uh how we can highlight
176:31 - the characters for that we have to use
176:34 - just slash
176:37 - let's go to the blog
176:42 - let's highlight this signs
176:45 - let's highlight this science word
176:48 - save this
176:51 - and
176:53 - let's check this one
176:56 - now as you can see in the inside the
176:58 - spawn element there is new attribute
177:01 - called Data Dash highlighted Dash
177:03 - characters so let's copy this attribute
177:06 - and add the styling
177:14 - now let's increase the opacity
177:18 - to
177:19 - do
177:22 - pairing to 2 pixel
177:24 - and Border Radius 2 2 pixel as well
177:27 - let's save this
177:30 - and as you can see it is highlighted
177:34 - now let's see what other features it has
177:39 - it has group highlighted characters by
177:41 - ID
177:42 - highlighting inline code
177:48 - it also has the titles
177:54 - let's add the title
177:58 - let's go to
178:00 - this
178:02 - let's add the title
178:05 - let's keep it as
178:07 - index dot HTML and let's save this
178:15 - now here is the title of this code block
178:20 - let's style this before that
178:23 - let's get its attribute which is right
178:27 - here data dash rehype dash pretty code
178:29 - title
178:31 - so let's go to the global.css file
178:37 - and let's style this
178:39 - set position to
178:42 - absolute
178:46 - right zero
178:50 - background color
178:53 - to the accent color
178:57 - set text color to
179:00 - White
179:03 - padding
179:05 - to 4 pixel from the top
179:09 - eight from the left
179:12 - and right
179:15 - font size to 1 Ram
179:19 - and border and
179:22 - start radius to 4 pixel let me show this
179:27 - to you
179:29 - so here is the title it is not exactly
179:33 - at the right position so let's
179:38 - open the
179:40 - code block element
179:43 - so in this div we have one uh data
179:46 - attribute called Data rehab critical
179:48 - fragment so let's add relative position
179:51 - to this attribute
179:54 - before this let's add the data attribute
179:58 - set position to
180:02 - relative let's save this
180:06 - now as you can see this title is inside
180:09 - the code block and it looks great
180:15 - now let's see what next we have the
180:17 - caption
180:18 - so let's style this as well go to the
180:22 - blog and add caption
180:25 - so
180:28 - this file contains HTML code
180:33 - let's save this
180:38 - here is the caption
180:41 - let's get the data attribute for this
180:43 - caption which is right here
180:46 - and let's style this
180:53 - set the position to Absolute
181:02 - top to 100 percent
181:07 - width to 100 as well
181:11 - text align
181:14 - Center
181:16 - font size 2.
181:19 - 1
181:21 - and let's set its color to gray so it is
181:26 - 7 4 7 4 7 4 let's save this
181:32 - and looks much better
181:37 - that's it so this rehype pretty code has
181:40 - a lot of features that you can show such
181:44 - as highlight title you can change the
181:47 - language as well and show the line
181:49 - numbers and this caption as well
181:53 - so this is pretty good for your blog
181:56 - let's close this
182:02 - so I think uh this block part is almost
182:05 - completed let's see how we can create
182:08 - the table of content component
182:12 - now let's check this Toc component from
182:15 - this blog now in this table of contents
182:19 - we have different labels of this heading
182:23 - elements so this one is the H1 but this
182:27 - is the H2 now H2 is the subheading of
182:30 - this H1 so it is uh
182:33 - as the child of this H1 tag same for
182:37 - this
182:40 - now on click on this it will uh it will
182:44 - scroll the page to that certain heading
182:47 - because of this ID
182:49 - which is uh in this link now uh we are
182:53 - using the content layer and the
182:55 - structure of content layer is a bit
182:58 - different so we are going to use
183:00 - computed field to compute the whole
183:03 - table of contents and for that I found a
183:08 - really good solution from one of the
183:10 - blog so let me share that link with you
183:15 - right table of content from content
183:17 - layer and this one
183:20 - is the link which is by Yusuf
183:25 - and the solution is really great so
183:29 - let's implement this
183:31 - for now we don't require this blog let
183:35 - me close all these tabs
183:41 - now let's go to the
183:45 - content layer let's close all this
183:48 - open the content layer dot config.js
183:51 - file
183:53 - and right here
183:55 - after the reading time let's write the
183:58 - TOC
184:01 - let's keep its type to Json and let's
184:06 - change this resolve function
184:09 - let's make it async
184:17 - for now let's return
184:19 - true
184:22 - now let's uh check how this headings
184:26 - looks in the Raw format
184:34 - so if you check right here what if we
184:38 - stack headings so uh this uses the two
184:42 - hash that means this is the H2 element
184:44 - and this heading uses the three hash
184:47 - that means it should be the H3 element
184:51 - so from this whole raw data we have to
184:56 - extract such headings now there is a
184:59 - common pattern between these headings
185:01 - such as it can have hasher hashes space
185:06 - or new line characters
185:08 - Etc so for that we are going to
185:10 - construct the our regular expression
185:14 - so let me
185:16 - do that
185:18 - create
185:21 - const
185:23 - regular EXP
185:27 - and let's start with the slash first
185:32 - let's do this for the
185:35 - new line
185:41 - let me write the whole regular
185:43 - expression then I will explain each each
185:46 - and every part of that expression
186:02 - so let me explain this a regular
186:05 - expression
186:07 - now this slash it marks the beginning of
186:11 - the expression and slash n which matches
186:15 - the new line
186:16 - and now this bracket
186:20 - is the named capturing group named Flag
186:23 - where it matches the hash character
186:27 - and this one to six that means it
186:30 - specifies that there should be between 1
186:33 - and 6 hash characters uh now same as
186:36 - this flag this is also another name
186:39 - capturing group called content at the
186:44 - DOT
186:45 - matches any character except the new
186:48 - line and plus specifies that there
186:51 - should be at least one or more
186:53 - characters so this is at the end of the
186:57 - exploration
186:58 - and in between this name capturing
187:00 - groups we have a slash S backslash s
187:05 - that matches one or more white space
187:07 - characters
187:08 - so let's see if this regular expression
187:11 - can grab this type of content
187:17 - so let me just copy
187:21 - it's from here up to this
187:25 - and let's go to the browser
187:28 - let me open a new tab
187:31 - and in the console first let's uh create
187:35 - one variable called post
187:37 - and paste all the strings
187:43 - now in the post as you can see here is
187:45 - the whole string now let's uh try to use
187:49 - the regular expression to grab this
187:51 - headings
187:53 - so let's use post dot match
187:57 - first let's
187:59 - declare the regular expiration
188:05 - paste it right here now let's write post
188:08 - dot match all
188:12 - sorry post dot match
188:16 - all and inside this
188:19 - function let's pass the
188:21 - regular expression
188:26 - so we got this iterator let's use the
188:31 - array
188:33 - let's use array
188:35 - Dot from
188:37 - this iterator
188:40 - and now we got array within two elements
188:43 - so first element contains the
188:47 - content that we got using this regular
188:52 - expression and that is this groups
188:55 - and in this group there is flag
188:59 - it has two hashes and in the content we
189:02 - got the content of the uh of the heading
189:07 - and in the next element
189:09 - we have three hashes inside this group
189:13 - and the content for the third H3 heading
189:17 - as well so this is how we will capture
189:19 - the groups for each heading
189:23 - and then we will decide the depth of
189:25 - this heading
189:28 - so let me close this
189:36 - Let's uh Define the
189:39 - headings
189:42 - array
189:43 - Dot from
189:46 - post dot body dot Raw
189:49 - dot match
189:52 - all
189:54 - with this regular expression
189:57 - and then we will use the map
190:00 - now inside this map we will
190:04 - deconstruct the groups from this array
190:15 - first let's uh get the flag value from
190:19 - the group
190:21 - dot flag
190:24 - now this question mark is an operator
190:26 - which checks if group exists and if it
190:30 - exists then it will check the flag value
190:35 - do the same for the content group
190:41 - and let's return
190:46 - first we will return the label so if
190:49 - there is
190:52 - flag
190:54 - then
190:55 - check the length of the flag
190:58 - if it is one
191:01 - then it should be the one label
191:05 - if the
191:07 - flag dot length is 2 then it should be
191:16 - two
191:18 - else it should be three so this will uh
191:22 - create the table of content for H1 H2
191:24 - and H3 tags
191:29 - now for the text set the content
191:35 - and for this log
191:37 - let's use the GitHub Slugger to generate
191:40 - this log from the content
191:42 - for that we have to import it
191:45 - so import
191:48 - GitHub
191:50 - Slugger
191:56 - from
191:58 - GitHub Dash Slugger
192:01 - now to use this
192:03 - first
192:05 - let's define it right here right cons
192:09 - Slugger equal to new GitHub Slugger
192:15 - and let's create this log from this
192:18 - content so use
192:21 - Slugger dot Slug and pass the content
192:27 - now before that let's uh put a condition
192:30 - if there is content then create this log
192:32 - else it should be undefined
192:36 - so that's it it Returns the
192:39 - headings
192:41 - now instead of this post
192:43 - let's use the dock let's save this
192:49 - now we got an error it says group is not
192:52 - defined
192:53 - let's say it should be
192:57 - groups let's save this
193:03 - and here is the TOC component as you can
193:06 - see there are different heading with the
193:08 - label such as 2 3
193:11 - 2 3 1
193:15 - Etc so let's uh see how we can render
193:18 - this Toc
193:22 - so open the block page
193:27 - we will use the details HTML tag
193:31 - now in this details
193:34 - let's use this summary to show the table
193:39 - of content heading
193:42 - after the summary
193:44 - let's use another list
193:47 - and let's uh map the blog
193:51 - dot doc
193:54 - dot map
193:56 - so here we are getting heading so let's
194:00 - get the heading
194:06 - now we will return the
194:09 - Ally element
194:11 - in this alloy element let's use the
194:14 - anchor tag
194:16 - in the anchor tag let's add one span
194:20 - and this one right
194:24 - heading dot text
194:28 - and in the href
194:32 - let's add the ID
194:35 - so add back text
194:37 - hash
194:39 - then use a currency sign and brackets to
194:43 - add heading
194:45 - dot slug
194:51 - let's save this
194:57 - now as you can see we have all the
195:00 - headings listed here
195:02 - let's go to this and it's working great
195:08 - uh now let's see how we can style this
195:11 - first let's add the class name to this
195:14 - details
195:18 - set border to one pixel
195:26 - order solid border dark
195:33 - set text to dark
195:36 - rounded to LG
195:39 - pairing two four
195:42 - keep it sticky
195:44 - and top to six Let's uh set max height
195:52 - to
195:54 - 80 VH
195:58 - overflow
196:00 - hidden
196:01 - and overflow y
196:05 - to
196:06 - Auto
196:13 - Also let's keep this table of content to
196:17 - open so in the details uh element just
196:21 - write open prop
196:23 - let's add class for the summary
196:27 - set text size to text LG font to semi
196:32 - bold
196:34 - capitalize
196:36 - and set cursor to pointer
196:41 - let's save this
196:43 - and it looks much better
196:49 - now for the UL let's add class name
196:53 - set margin top to 4 font two enter
196:58 - text to base
197:03 - now in the alignments let's
197:07 - add the key first
197:10 - write back text then hash
197:14 - then inside the braces right heading
197:18 - dot slug
197:21 - and add class name set py finding top
197:24 - and bottom to one
197:28 - and looks much better
197:33 - now let's uh use the data attribute to
197:36 - style uh different depth of this
197:39 - headings
197:40 - so just write data Dash label
197:46 - and write heading dot level
197:50 - let's add the class name now if data
197:54 - Dash label
197:56 - equal to 2
197:58 - then
198:00 - set the padding left to
198:03 - 0 if data dash level 2
198:09 - then set pairing top to two if data
198:14 - label are equal to 2 then set the Border
198:18 - top
198:23 - HD
198:26 - let's add border solid
198:29 - border Dash dark to
198:32 - 40. let's save this
198:37 - now as you can see uh it will uh create
198:40 - Parts between the uh whole uh headings
198:45 - so now if data label
198:49 - is three
198:53 - then set padding left to 4 let's save
198:56 - this
198:58 - now as you can see that is space on the
199:01 - left of this child label headings
199:05 - let's add more space up to six
199:09 - and display Flex items to Center and
199:13 - justify to start let's save this
199:18 - and it looks much better
199:22 - now let's see how we can add this dots
199:31 - let's put condition before the spawn
199:33 - element if heading Dot
199:37 - level
199:38 - is equal to
199:40 - 3
199:43 - then
199:46 - add one span element
199:51 - else display null
199:54 - so inside the spawn just write Ampersand
199:56 - and PSP this will add one
200:00 - this will add one space
200:03 - and in the class name write flags with
200:06 - to 1 High 2 1 rounded to full and BG 2
200:12 - dark
200:13 - set margin right to two let's save this
200:19 - and now it looks much great
200:22 - now let's uh underline this heading on
200:26 - Hover for that go to the spawn and class
200:29 - name
200:30 - on Hover set underline
200:40 - and this looks great
200:48 - so this blog page is completed now let's
200:51 - create the pages for the categories
200:55 - now uh same as the slash blog we will
200:59 - create the dynamic routes for the slash
201:01 - categories so for that uh go to the
201:06 - app folder and create one more folder
201:10 - called categories
201:17 - inside this category
201:19 - let's add one more folder called slug
201:25 - now in the slug
201:28 - let's create the page dot JS file
201:36 - so now
201:38 - let's create the const category page
201:44 - and here we will get the params
201:48 - which stands for the parameters
201:51 - and let's return the
201:56 - category name
201:58 - here it is
202:00 - parents dot slug
202:03 - so let's save this
202:07 - and click on this link
202:14 - fold export is not react component let's
202:18 - export this
202:20 - export
202:22 - default
202:24 - category page
202:28 - so here we have web development category
202:31 - now uh there is this space so
202:35 - let's check this out
202:37 - now if you see in this link
202:41 - there is a space in the category so we
202:44 - have to slugify this category as well so
202:47 - go to the
202:48 - blog page
202:55 - and here is the tag so go to the tag
203:03 - here we are using the link passed from
203:06 - the prop so we have to modify this link
203:10 - we can use slug
203:13 - from the GitHub Slugger
203:16 - and just
203:18 - pass the blog dot tags
203:22 - copy this paste here
203:26 - let's not paste here
203:29 - just keep it in the link
203:35 - so now it is web Dash development Let's
203:39 - uh check for the home component
203:42 - there is also space so we have to do
203:45 - this
203:47 - for the
203:49 - Home Cover section
203:54 - make sure you import this lug from the
203:57 - GitHub Dash Slugger
204:04 - and we have this in the log layout one
204:10 - log layout one
204:17 - let's paste this
204:30 - now in this Vlog there is also another
204:33 - tag right here let's change it as well
204:39 - let's open the log details
204:44 - let's change
204:46 - this
204:48 - and make sure you import the
204:50 - slug
204:52 - actually there is similar names so let's
204:56 - change this to log slug
205:04 - let's save this
205:09 - and it is working
205:12 - so let's click on this web Dash
205:14 - development it will give us the category
205:17 - name
205:19 - so let's see how to render the category
205:22 - name and all the list of categories
205:24 - along with the blogs
205:27 - go to the
205:32 - categories page.js file
205:35 - now here first let's get all the
205:38 - categories available so create one
205:40 - variable call all
205:43 - categories
205:45 - equal to an array that contains one
205:49 - category called all that will uh display
205:53 - all the blogs
205:55 - and let's
205:58 - get all the blogs
206:01 - all blogs dot filter
206:07 - so let's get individual blog
206:09 - and let's return
206:12 - a Blog
206:16 - right
206:18 - dot tags
206:22 - dot sum
206:24 - and for some tag
206:28 - first we will slugify the tag so just
206:33 - write cons logified
206:36 - equal to slug
206:39 - tag
206:41 - then if
206:44 - all categories
206:46 - does not include
206:50 - sluggify tag
206:52 - then we will push this slugify tag to
206:56 - this all categories array so all
206:58 - categories dot push
207:01 - this sluggified
207:04 - tag now if params Dot slug is
207:11 - all
207:14 - then return to for all the blogs so uh
207:19 - it will return it will filter all the
207:22 - blogs
207:27 - else return sluggified
207:31 - equal to parents dot slug so let me
207:34 - explain this again so uh we want to
207:37 - filter all the blogs as per the
207:40 - params.log and also we want to create
207:44 - the array
207:46 - for all the categories so here uh in all
207:50 - blogs first we will filter each blog and
207:53 - uh for each tag uh we will use this some
207:58 - function
207:59 - now uh for each tag we will uh first we
208:04 - will slugify this tag using the slug
208:07 - function and then we will see if this
208:10 - sluggify tag is already in the all
208:13 - categories Aries or not if it is not
208:16 - then we will push it and if the
208:18 - params.slug equal to all then let's
208:21 - return true
208:22 - else we will return sluggified equal to
208:26 - penance.log so let's say if the Penance
208:29 - dot slug is web development and
208:31 - slugified uh tag is also web development
208:35 - so it will filter all the blogs that has
208:38 - the web development tag
208:40 - so uh the process is same for all the uh
208:44 - tags except the all now for the all it
208:48 - will return true so it will display all
208:50 - blocks
208:53 - that's it
208:54 - so let's create
208:57 - an article
208:59 - tag
209:01 - and inside this article let's create one
209:03 - do this day will contain H1 tag
209:06 - with the
209:09 - params
209:11 - dot slug that represents the category
209:14 - name
209:15 - and after the H1 there is one spawn tag
209:18 - that will display the text called
209:21 - discover
209:25 - more
209:27 - categories
209:29 - and X1
209:31 - your
209:33 - knowledge
209:36 - now after this do
209:39 - we will display all the categories
209:42 - so for that let's uh create one
209:44 - component called categories inside this
209:47 - blog folder create get a
209:51 - queries.js
209:57 - let's import this component right here
210:01 - and also pass the categories
210:08 - so pass the all categories as a prop
210:11 - now also create one more prop called
210:15 - active
210:16 - which you which will have the current
210:20 - slug
210:25 - make sure to import this
210:29 - let's deconstruct the categories
210:33 - and
210:36 - active
210:38 - so let's uh keep this device as it is
210:42 - inside this div
210:43 - uh we will render the category
210:46 - now let's create an individual component
210:49 - for the category as well same as we did
210:51 - for the tag so just copy this
210:55 - and inside the blog create one more
210:58 - component called category dot JS paste
211:03 - it instead of tag let's change its name
211:06 - to category that is uh one thing that we
211:09 - will add
211:11 - which is the active prop
211:15 - now let's uh add one class
211:20 - so now let's add one
211:22 - conditional class name so when active
211:29 - the background should be dark
211:33 - text should be light
211:37 - otherwise
211:39 - the background should be light and text
211:42 - should be dark
211:47 - remove the background from here and
211:52 - text color as well let's save this for
211:54 - now
211:56 - and inside the categories let's import
211:59 - it so let's map the categories dot map
212:05 - so we have category
212:09 - which will return this component
212:13 - first let's write the key
212:17 - then link
212:20 - use backticks slash get a curries
212:26 - slash
212:29 - cat
212:31 - then for the name
212:34 - pass the get and for the active now here
212:39 - we will check uh
212:41 - to match the current uh Slug and the
212:46 - this category
212:48 - now let's add the active
212:52 - let's change its name from active to
212:55 - let's just write current slug
213:00 - save it and let's change it here as well
213:04 - so let's uh compare so current slog it
213:08 - should be equal to
213:10 - sluggified
213:12 - category so if this matches it will
213:15 - change the style of the active category
213:18 - otherwise it will keep all the category
213:20 - as the same let's uh
213:25 - save this
213:31 - category is not defined let's define it
213:37 - so here are all the categories Let's uh
213:40 - change its style in the categories view
213:43 - let's add the class names set pairing
213:47 - left and right to
213:49 - 20 margin top 2. 10
213:53 - border top to two text dark
213:58 - border bottom to two
214:02 - border solid and border
214:05 - color to dark
214:07 - let's set pairing top and bottom to four
214:10 - display Flex items
214:14 - start Flex wrap
214:17 - and font to medium
214:22 - set margin left and right to 10. let's
214:26 - save this
214:29 - and it looks better
214:32 - let's add The Styling for this category
214:35 - let's change
214:38 - this py2 to let's change the Border
214:42 - color to border Dash dark
214:45 - let's save this
214:48 - let's add margin M Dash 2
215:01 - let's open the category pages and
215:03 - compare it
215:05 - looks
215:07 - great
215:10 - let's not capitalize and add the hash
215:19 - now it looks much better
215:24 - so as you can see here it is changing
215:26 - the URL
215:29 - let's add The Styling for this
215:34 - foreign
215:39 - set margin top
215:42 - to
215:43 - 12 display
215:45 - S Flex direction to column text Dash
215:50 - dark
215:51 - now for this blue
215:54 - let's set padding left and right to 10.
215:58 - let's set it to 32 display Flex Flex
216:03 - direction to column
216:05 - now for this H1
216:08 - set margin top to six
216:12 - font to semi bold
216:17 - text to
216:21 - Phi XL
216:25 - let's save this
216:29 - and it looks great
216:31 - now for this Pawn element
216:34 - let's add margin top to 2
216:37 - and set display to inline block
216:46 - now it looks much better
216:56 - Let's uh let's change the font weight
217:00 - from font semi bold
217:03 - to font Dash medium
217:07 - or let's just keep the
217:10 - font as it is font Dash normal
217:14 - now it looks much better
217:19 - now let's uh render this blogs as per
217:22 - the uh category name
217:25 - so after this category create one div
217:29 - and Let's do let's add the display to
217:33 - grid
217:34 - grid
217:35 - calls to to
217:39 - let's set it to three let's set grid
217:42 - rows to two
217:45 - set cap to
217:48 - 16
217:50 - and set margin top
217:53 - to
217:56 - 24
217:57 - set padding left and right to 32.
218:01 - now in here let's map the blocks
218:05 - so blogs.map
218:08 - blog and index
218:13 - return the
218:15 - article element
218:19 - and inside this article let's use the
218:22 - log layout
218:24 - 3
218:25 - make sure you pass the
218:27 - blog
218:32 - in the article let's add the class name
218:35 - to call that spawn
218:38 - dash one call Dash
218:40 - sorry row Dash spawn
218:45 - dash one and set the position to
218:49 - relative
218:51 - also don't forget to add the key
218:57 - let's save this
219:02 - and
219:04 - is displaying all the blogs
219:08 - let's go to the productivity code
219:10 - quality CSS
219:15 - web development
219:18 - JavaScript
219:21 - and it looks much better
219:24 - now let's uh delete this block one
219:27 - so go to the
219:30 - content and there it is block dash one
219:38 - now it looks much better
219:42 - so the categories page is completed now
219:45 - let's create the about page
219:50 - now before we create about and contact
219:53 - page I want to uh show you something uh
219:57 - let's check this generate static params
219:59 - function
220:00 - from the next.js documentation
220:03 - now as mentioned here the general static
220:06 - params function can be used in
220:09 - combination with Dynamic route or
220:10 - segments to statically generate routes
220:13 - at a build time instead of on-demand at
220:15 - request time so uh in our blog we have
220:19 - static data so there is no need to
220:21 - generate any page on demand we can
220:24 - statically generate all these routes so
220:26 - it is better to use this function so
220:30 - let's copy this
220:33 - and go to the
220:36 - categories page
220:38 - and before this page let's paste this
220:41 - function now uh
220:44 - this function generates uh different
220:47 - routes as per this log that you pass
220:50 - right here
220:52 - so let's remove this
220:57 - now let's create
220:59 - one more one array called
221:02 - categories
221:06 - and one array called paths
221:10 - now path will have one params
221:14 - with slug all
221:17 - now
221:20 - from the all blogs
221:23 - Let's uh map each blog
221:32 - now for each block let's put a condition
221:36 - if
221:37 - block dot is published is true then
221:44 - we will check the uh tags for the blogs
221:49 - so write blog dot text Dot map
221:55 - for each tag
221:58 - let's slugify the tag
222:02 - now here we will use the Slugger so let
222:06 - me just open its documentation
222:17 - now instead of using slug directly we
222:20 - should use uh like this because this way
222:23 - uh the Slugger will uh keep an eye on
222:28 - each slug so uh there is no same slug
222:30 - generated so let's uh use this
222:36 - import the GitHub Slugger
222:46 - then we will use Slugger Dot
222:50 - slug
222:52 - inside this log let's pass the tag
222:58 - now uh we will check if categories does
223:03 - not include
223:05 - the sluggify tag
223:10 - if it does not include it and
223:13 - let's push it
223:18 - now this logic is almost same as we done
223:22 - here
223:24 - but instead we we will return the paths
223:27 - from this function
223:29 - so paths dot push
223:33 - arms
223:36 - slug
223:38 - sluggified let's replace this to slug
223:44 - all and instead of this let's return the
223:48 - paths so this will eventually generate
223:51 - routes for each slug such as all web
223:55 - development Etc so if you have a static
223:58 - data in your website then it is better
223:59 - to use the generic generator setting
224:02 - params function to generate the all the
224:04 - roots at a build time so it will load
224:06 - the website much more faster
224:08 - so let's do the same uh for the blogs as
224:12 - well let's copy this function open the
224:16 - blogs
224:18 - page
224:20 - and here let's paste it
224:27 - now here we just have to use this
224:33 - inside the return paste this
224:36 - and inside of fine we will use the map
224:39 - function
224:40 - copy this
224:43 - and here
224:45 - we will return the
224:49 - slug with the
224:52 - this value now in the categories
224:55 - actually
224:57 - we should just pass the slug
225:00 - not the paramps
225:03 - so let's remove this
225:06 - and this as well so let's save this
225:12 - now we are on the development server so
225:14 - for the development server it will
225:16 - always create the on-demand request but
225:20 - whenever we build our website it will
225:22 - create all the routes and then sell the
225:25 - website more faster
225:29 - that's it now let's create the about
225:31 - page
225:34 - open the
225:37 - app folder
225:38 - create one more folder
225:41 - called the about
225:44 - and inside this about folder create one
225:46 - file called page dot JS let's create the
225:51 - function
225:53 - export default function
225:57 - called about
226:01 - this will return let's use the fragments
226:08 - about details
226:22 - now in this about page first uh
226:26 - let's Design This cover page
226:31 - so and the components folder create one
226:35 - more folder called about
226:38 - here let's create one file called about
226:41 - cover section dot Js
226:46 - let's import this
226:56 - make sure to import
226:59 - this one this component
227:06 - let's add a section element set class
227:10 - names set with to full
227:14 - and height to
227:16 - 75 VH
227:20 - set border Dash bottom two
227:24 - powder solid
227:26 - and Border color to dark
227:29 - set display to flex Flex direction to
227:32 - column
227:34 - let's skip Row for the desktop size and
227:39 - set items
227:41 - to Center
227:43 - so I'll justify to Center as well
227:48 - set text color to text Dash dark
227:53 - now after this section element Let's uh
227:57 - add one div
227:59 - this day will contain one image
228:04 - let's use the SRC
228:07 - Alt
228:08 - now for this image
228:10 - I have generated this using the binge
228:13 - search
228:14 - and daily 2 so you can generate a
228:19 - different image you like
228:22 - for now let's use this
228:26 - go to the project files and here is the
228:30 - character dot PNG
228:32 - copy this paste it in the public folder
228:39 - let me import this
228:41 - import profile
228:44 - character from
228:48 - slash
228:53 - public slash
228:57 - character dot PNG
229:02 - let's use this on the alt just write
229:06 - your name
229:10 - foreign
229:13 - add width
229:16 - to full height to pull object to
229:22 - contain
229:24 - object position to
229:26 - Center
229:28 - now in this div
229:31 - let's add a class now set the width to 1
229:35 - by 2.
229:36 - H2 full
229:41 - set border Dash right dash 2
229:45 - model that's solid
229:48 - border Dash dark
229:51 - display to flex and justify to
229:57 - Center let's save this
230:04 - there is some issue in the Imports
230:11 - let's directly import it
230:18 - go to the
230:20 - public slash
230:22 - character dot PNG
230:26 - and it looks nice
230:29 - now after this do let's add the text
230:33 - content
230:35 - create one more div
230:37 - and h2 tag
230:39 - and next is the paragraph tag
230:44 - open the web website content
230:48 - copy this for the H2
230:53 - and this paragraph for the
230:56 - paragraph tag
230:58 - now in this new let's add class name
231:02 - set width to 1 by 2
231:05 - let's play Flags Flex direction to
231:07 - column
231:08 - text to
231:10 - left
231:13 - items to
231:15 - start
231:16 - and justify
231:17 - to
231:19 - Center
231:20 - set padding left and right to 16.
231:24 - now for the H2
231:27 - let's set font to bold capitalize
231:32 - set text size to text Dash 6xl
231:37 - now in the paragraph tag
231:39 - add font way to medium
231:45 - capitalize
231:48 - and set margin top to 4 and text to base
231:54 - let's check the width again
231:58 - here it is 1 by 2 and here is the typo
232:02 - let's save this
232:05 - and it looks better
232:10 - now let's add the skills
232:16 - for that let's create one component
232:18 - inside this about folder called skills
232:21 - dot Js
232:25 - let's import the skills
232:34 - now first let's get the skill list from
232:37 - this website content.txt file
232:41 - copy this
232:42 - paste it right here
232:48 - now let's use the
232:50 - section add class name set width to full
232:54 - Flex
232:56 - Direction 2 Flex Dash column
233:01 - padding to
233:05 - 20
233:07 - modern
233:10 - Dash bottom Dash 2 order Dash solid
233:14 - border Dash dark
233:17 - and text Dash dark as well
233:24 - let's add one spawn tag
233:27 - that's right I'm
233:30 - comfortable in
233:36 - let's add class name
233:38 - set font to semi bold text to
233:44 - 4 XL
233:47 - text color to text accent
233:52 - after this one let's use the another
233:55 - list
233:57 - now there's another list
234:00 - let's add the class name display to flex
234:04 - Flex wrap
234:07 - margin top to eight
234:10 - justify
234:12 - to start
234:15 - now here we will map this skills from
234:19 - the skills list
234:21 - skill list dot map
234:25 - get the item
234:27 - and index
234:33 - so let's return the Ally element
234:37 - inside this all element right item
234:42 - let's add the class names
234:45 - font to say my bold
234:48 - display to inline block
234:50 - capitalize
234:52 - and set text size to text Dash to excel
234:59 - set padding top and bottom two
235:02 - let's set it to
235:06 - Phi and pairing left and right too
235:10 - 12.
235:12 - set border to
235:16 - order Dash solid and border
235:19 - Dash dark
235:23 - set rounded
235:25 - margin right dash six
235:28 - and margin bottom dash six as well and
235:31 - on Hover
235:33 - let's scale it
235:35 - to one zero five
235:37 - add transition
235:40 - all is
235:42 - and duration to
235:45 - 200 and add cursor
235:50 - Dash pointer let's save this
235:53 - Also let's add the key
236:01 - let's save this
236:08 - let's add more padding on left and right
236:13 - so we have adding two
236:16 - let's keep it 12.
236:22 - and now it looks much better
236:28 - after this skills let's write this
236:31 - message
236:36 - open the about page after the skills
236:39 - let's add H2
236:42 - and go to the website content
236:46 - copy this
236:49 - paste here
236:52 - and instead of this here
236:55 - let's add a link
236:59 - which sends the user to slash contact
237:06 - let's add the class name
237:10 - set margin top to eight
237:13 - onto
237:14 - semi bold
237:17 - text to
237:19 - to excel
237:23 - self start and not in the center
237:27 - margin left and right
237:30 - do
237:31 - 20
237:33 - text Dash dark
237:36 - that's it
237:40 - now for the link
237:43 - let's add the class name
237:47 - set the underline
237:52 - and line offset two two
237:55 - let's save this
238:00 - and it looks great there is no underline
238:03 - let's add the important tag
238:10 - and here it is
238:13 - now this looks much better so the about
238:16 - Pages completed
238:19 - we will add this after creating the
238:22 - contact page so let's open the contact
238:25 - page
238:30 - right now we don't have this page
238:34 - so let's uh
238:35 - go to the app
238:37 - create one folder called Contact and add
238:42 - the
238:43 - page dot JS file
238:47 - let's create one function
238:50 - write export default
238:54 - function contact
238:59 - return one section
239:03 - that says the contact
239:10 - here it is
239:16 - now in this contact
239:19 - in the first view we will render the
239:21 - Lottie animation
239:27 - and the second deal we'll use the
239:31 - contact form
239:34 - so let's add the class name to this
239:37 - section set width to full H2 Auto
239:42 - let's keep it to 75 viewport height
239:48 - set border Dash bottom Dash 2 2
239:52 - border Dash solid order Dash dark set
239:57 - display to Flags set Flags direction to
240:00 - flex Dash row items to Center justify
240:06 - to
240:07 - Center as well
240:10 - set text color to text Dash dark
240:17 - let's save this
240:20 - and here we have audio animation and
240:22 - contact form
240:24 - so first let's create one component
240:29 - for that in the components folder create
240:31 - one more folder called Contact
240:34 - and here let's create
240:37 - Lottie animation dot JS file
240:42 - now before this let me give you the link
240:46 - if you open the website content.txt file
240:50 - there is this link for the Lottie
240:53 - animation that I have used
240:56 - so open this link
241:06 - now I have downloaded this dot Lottie it
241:10 - is a compressed format that works with
241:12 - the dollar players so make sure you
241:15 - download it from here
241:18 - then
241:20 - we are going to use
241:22 - this Dot Low T
241:25 - slash react dash player
241:29 - so let's open it as well
241:34 - go to this GitHub repo
241:43 - now click on this
241:51 - let's copy this code
241:57 - and paste it right here let's change
242:00 - this app to
242:01 - Lottie animation
242:04 - now uh once you download the
242:07 - animation.json file uh send it to the
242:11 - public folder so here it is
242:14 - copy this and send it to the public
242:17 - folder
242:26 - so on slash it can access this Lottie
242:31 - file so just copy the name
242:35 - thank you
242:37 - and paste after the slash
242:42 - let's remove the controls we won't be
242:45 - needing that
242:47 - let's remove this div as well
242:50 - save this
242:52 - let's import this
243:01 - let's add some class name
243:07 - set the display to inline
243:10 - block
243:15 - with two
243:18 - Let's uh set it to
243:21 - 2 by 5
243:23 - . and set height to full
243:28 - border
243:31 - let's write to to model solid and Border
243:36 - color to dark
243:39 - let's save this
243:45 - so uh
243:47 - for this Lottie animation we have to use
243:50 - the use Clan directive
243:56 - let's save this
243:59 - and it looks great
244:06 - now for the second div let's add the
244:08 - class name set width to full
244:12 - set width to three by five
244:16 - display Flex Flex direction to column
244:20 - items to start
244:23 - and justify to
244:25 - Center
244:27 - set padding left and right to 16 and
244:31 - padding bottom to 8.
244:36 - first let's uh add the H2
244:40 - and write let's connect
244:50 - set font to fold
244:54 - capitalize it
244:56 - text size to 4XL
245:01 - and let's save this
245:04 - looks great now let's create the form
245:07 - component
245:09 - now for this form component we'll be
245:12 - needing one text email phone number and
245:16 - one text area so let's close
245:20 - all of this
245:23 - and open the react
245:26 - hook form.com
245:29 - go to the tools open the form Builder
245:33 - and here instead of email
245:37 - Let's uh write the name
245:41 - type select text
245:45 - and update
245:48 - let's add one more
245:50 - for the email
245:54 - set its type to
245:57 - email
245:59 - let's create
246:01 - let's create one more
246:03 - for the telephone
246:07 - you can just write phone number
246:11 - and set its type to tell
246:14 - create
246:16 - now for the last one let's create uh for
246:21 - the text area let's name it as a project
246:24 - details
246:27 - and select the text area and click on
246:31 - the create
246:34 - now let's copy this code
246:39 - and create the
246:42 - contact form component inside this
246:44 - contact folder
246:46 - contact form dot Js
246:50 - and paste the code
246:52 - now here we are going to use this use
246:55 - form hook
246:57 - so we have to convert this component
246:59 - into a client component so write use
247:02 - client directive
247:05 - and also change this name to contact
247:08 - form
247:12 - let's save this and import this contact
247:15 - form right here
247:18 - after the h2 tag
247:28 - so here is the form let's style this
247:34 - foreign
247:39 - let's write all the text
247:45 - so before the first input right
247:47 - hello
247:49 - my name is
247:52 - then keep the one space
247:56 - and before the second input right and I
248:00 - want
248:01 - to discuss
248:05 - a potential
248:09 - yeah
248:11 - project
248:14 - you can email me at
248:18 - so this is the email and before the
248:22 - phone number right
248:24 - or
248:25 - reach out to me on
248:33 - this phone number then before the text
248:36 - area right
248:37 - here are some
248:41 - details about my
248:44 - project
248:46 - that's it
248:50 - let's save this
248:57 - now let's style this input
249:04 - now inside this form let's add the class
249:07 - name set margin top to 12.
249:11 - text size to excel
249:14 - font to medium and
249:18 - leading to relaxed
249:23 - and set font to font enter
249:33 - now for this first input
249:36 - let's add the class name
249:38 - set outline
249:42 - to none
249:43 - border to zero padding to 0 as well
249:49 - set margin left and right to
249:53 - on Focus Let's uh
249:57 - keep ring to zero and for the
250:00 - placeholder
250:03 - set text to
250:04 - Center let's save this
250:08 - now this looks much better
250:13 - let's increase the placeholder text size
250:18 - set text to LG
250:21 - then add border bottom
250:25 - watercolor to border Dash Gray
250:29 - let's save this
250:32 - and it looks great now on focus it is
250:34 - converting the color to Blue so let's
250:37 - change this
250:42 - set Focus
250:46 - order Dash Gray
250:49 - and background to transparent
250:52 - let's copy this class name and add
250:55 - in the email
250:58 - as well as the
251:00 - phone number and in the text area let's
251:04 - save this
251:07 - now we have to change some classes for
251:11 - the text area
251:16 - let's add
251:20 - rows and keep it to three
251:25 - set width to full
251:28 - and after this project add one
251:33 - VR
251:37 - now this is much better
251:39 - Let's uh add the placeholder
251:43 - that says
251:46 - my project is about
251:51 - Dot
251:53 - let's remove the text Dash Center
251:59 - for the placeholder
252:13 - let's change the placeholder for the
252:17 - name as well
252:19 - your name
252:23 - you're at email
252:27 - thank you
252:31 - your phone
252:34 - and let's save this
252:37 - and this looks much better
252:43 - now let's uh style this submit button
252:48 - and the class name
252:49 - let's add margin top to eight
252:52 - font wait to font Dash medium display to
252:57 - inline block
253:00 - capitalize it
253:03 - text size to let's keep it to excel
253:09 - padding top and bottom two
253:12 - three
253:13 - padding left and right two
253:16 - uh let's skip it
253:19 - border to two powder solid and Border
253:24 - color to dark
253:26 - let's keep it rounded and set cursor
253:31 - to pointer
253:34 - that's it
253:41 - let's change its value to send request
253:44 - instead of submit
253:47 - foreign
253:49 - so after the type add value and write
253:53 - send request
254:03 - now this looks much better
254:09 - now let's create this inside role that
254:13 - goes from right to left
254:16 - now this inside rule uh does not change
254:19 - even though I change the about page but
254:22 - it gives the animation State the same
254:26 - because uh it is uh shared by the about
254:30 - and contact page so let's see how we can
254:33 - leverage the layout functionality and
254:36 - share share this same component in both
254:38 - of these pages so that it will not
254:41 - re-render whenever we change this page
254:44 - so for that let's check out the next JS
254:48 - groups
254:50 - route groups
254:57 - now let's scroll down
255:00 - as mentioned here a raw group can be
255:02 - created by wrapping folders name in
255:04 - parenthesis
255:06 - so uh as mentioned here even though
255:10 - routes inside marketing and Shop share
255:13 - the same URL hierarchy you can create a
255:16 - different layout for each group by
255:18 - adding layout.js file inside their
255:20 - folders
255:22 - now here this layout.js file is shared
255:26 - with account and card pages
255:30 - so let's do something similar like this
255:34 - first let's close this
255:39 - and inside this app folder
255:43 - let's create one more folder called
255:47 - about
255:50 - make sure you use the parenthesis
255:52 - and in this group we will add the about
255:57 - and move this contact as well
256:01 - and inside this about let's create one
256:04 - file called layout dot chess
256:08 - now let's export
256:11 - default function called
256:15 - about layout
256:18 - make sure you don't use a root layout
256:20 - because root layout is uh for the app
256:23 - folder only
256:27 - now this layout
256:29 - will have the children prop
256:33 - ER let's return
256:36 - main element
256:40 - here we will
256:43 - display the insights
256:47 - and then that is this children
256:50 - and the main let's add the class name
256:52 - set with to full display Flex direction
256:57 - to column
256:58 - items two
257:01 - Center and justify
257:04 - space between
257:06 - save this and
257:08 - check this out
257:11 - as you can see here that is insights
257:14 - right here and in this
257:17 - about page as well
257:20 - so let's create this role for that let's
257:23 - create one more component inside this
257:26 - about called insight
257:30 - row dot Js
257:34 - let's import this
257:37 - right here
257:45 - now let's go to the website content
257:50 - copy this insights
257:54 - and paste it inside the layout
258:00 - let's pass this and the inside role
258:03 - component
258:06 - now from this component let's
258:08 - deconstruct it
258:12 - now in this insights you can add any
258:14 - information about yourself such as years
258:17 - of experience uh multiple number of
258:22 - clients
258:24 - and any achievements that you have
258:27 - achieved in recent years
258:29 - and this
258:31 - now in this do let's add the class name
258:34 - set width to full
258:36 - background to
258:39 - accent
258:40 - set text to light and white space too
258:47 - no rap
258:49 - set overflow to Hidden
258:53 - and that's it
258:56 - after this do let's create another view
259:02 - this div will contain all the text
259:08 - set width to full padding top and bottom
259:11 - to three
259:12 - Flex display to flex
259:15 - items Center
259:18 - justify to
259:20 - Center as well and capitalize
259:24 - set font weight to semi bold
259:27 - and
259:29 - tracking to wider
259:32 - here the dragging that means lattice
259:35 - spacing
259:37 - between the letters
259:46 - set text to
259:48 - base
259:52 - here let's map the insights so inside
259:56 - start map
259:59 - text
260:02 - return one live
260:09 - and write the text
260:14 - also with the text
260:17 - add
260:18 - one span
260:20 - and in this one we will add the pipe
260:23 - symbol
260:25 - add the class name set button left and
260:28 - right 2 4
260:32 - that's it
260:33 - let's save this
260:38 - and this looks great now let's uh
260:41 - animate this for animation we can
260:44 - customize the keyframes in the
260:46 - tailwind.config file
260:51 - so go to the
260:54 - tailwind.config.js file
260:56 - now after this font family
261:00 - let's add animation
261:04 - and create one animation called roll
261:10 - we will use roll keyframes
261:14 - for 24 seconds
261:16 - linear manner and for finite time
261:21 - now let's uh add the keyframe
261:26 - the name of the keyframe is row
261:31 - now for the zero percent
261:35 - Let's uh
261:37 - use
261:38 - transform
261:42 - translate X
261:44 - to 100 percent
261:49 - copy this and paste it right here
261:52 - and for the
261:54 - hundred percent let's transform it to
261:58 - minus 100 percent
262:01 - let's
262:02 - save this and use this animation
262:07 - uh to use that animation you just have
262:09 - to write
262:10 - animate and name of the animation which
262:13 - is roll
262:15 - let's save this
262:18 - and here it is
262:25 - you can see that whenever I change the
262:28 - page but uh inside role is same
262:34 - so this is a really great benefit of
262:38 - next Js
262:39 - you don't need to re-render every
262:41 - component
262:44 - let me close all this website
262:48 - and that's it uh our website is almost
262:52 - completed for the desktop version
262:55 - let's change the index of this blog
262:58 - go to the Home Cover section
263:02 - change
263:03 - from 1 to 0
263:06 - save this and in the featured post
263:11 - change this to one
263:14 - two
263:16 - three save this and in recent post
263:21 - change from
263:23 - 4 to 10.
263:27 - now uh we have to do this because we
263:30 - have removed the block dash one
263:32 - let's add the key right here
263:37 - let's save this
263:41 - now let's see how we can store the total
263:46 - view numbers for each blog now for this
263:49 - we are going to use the supervis now if
263:51 - you don't know Super Bass it's okay
263:54 - uh you don't have to learn more about it
263:56 - because we are going to use only a
263:59 - simple function and one table to show
264:01 - The View count
264:03 - so let's go to the supervised.com and
264:07 - create your account and login
264:11 - so after the login you should see a
264:14 - screen like this
264:16 - now let's create one project by clicking
264:19 - on this new project and if you don't
264:22 - have any organization
264:24 - create organization let's name it as
264:27 - code bugs
264:34 - now here you can add the project name
264:37 - let's write
264:41 - developer log
264:45 - now for the password let's generate the
264:48 - password
264:49 - let's just copy this and store it
264:51 - somewhere safe
264:53 - for the region I'm in India so I will
264:56 - select South Asia
264:59 - and create new project
265:05 - now this will take
265:08 - few seconds to initialize the project in
265:11 - the meantime you can copy this and on
265:14 - public key
265:17 - now this key will be used to
265:20 - authenticate each and every request from
265:22 - your application to the super base
265:25 - and if you don't want to copy it right
265:26 - now we can copy it later from the
265:28 - project settings
265:33 - and the project is initiated
265:37 - so let's uh go to this table editor I
265:42 - think there is some problem with the
265:45 - super base for this particular page
265:47 - Let's ignore that and create a new table
265:51 - now let's write the name of the table
265:54 - let's write fuse
265:55 - the description you can just say
265:58 - this table contains log views
266:03 - uh let's skip this check
266:08 - and these are the columns uh keep the ID
266:12 - and created at as it is
266:15 - add one column let's name it as slug
266:19 - and for the data type let's select text
266:27 - let's keep it as null and let's add
266:30 - another column
266:32 - write count
266:34 - and here we will store the total counts
266:37 - and let's keep its type to integer 4.
266:42 - and let's save this
266:47 - so here is our table now let's go to the
266:51 - SQL editor now here we will create one
266:55 - function in postgresql
266:58 - so before that we have to
267:02 - Grant the permission so that we can
267:04 - create such a function and different
267:06 - schema
267:09 - so for that uh just write
267:11 - Grant
267:14 - Grant create on
267:18 - schema
267:20 - public to Anon
267:24 - that's it and let's run this
267:27 - and it is Success so after this grant
267:32 - access we can create the function so
267:34 - let's write create or replace function
267:38 - called
267:40 - increment increment is the name of the
267:43 - function
267:44 - let's write it now we will pass the slug
267:49 - uh the last part of the URL for any blog
267:52 - into this function so uh in the table we
267:56 - will store that Slug and we will
267:57 - increment the counter so in the argument
268:00 - type slug underscore text and type of
268:04 - this argument will be text
268:06 - and this function will returns nothing
268:10 - since uh we don't want anything from
268:12 - this function this function should only
268:14 - increment the number in the views table
268:18 - and write void as
268:21 - dollar sign
268:23 - so this line declares the function named
268:27 - increment that takes a single parameter
268:30 - that is this log text of type tags and
268:32 - returns void
268:35 - so the function definition starts with
268:37 - this double currency sign indicating the
268:41 - beginning of a block of postgresql now
268:44 - press enter and let's declare one
268:47 - variable
268:49 - called view underscore ID and type of
268:52 - the variable is integer
268:55 - now this line declares a local variable
268:57 - named view ID of type integer
269:01 - and let's begin now this begin marks the
269:06 - beginning of the function's main block
269:08 - let's write select
269:11 - ID
269:14 - into
269:15 - view underscore ID variable from
269:21 - views table
269:23 - where
269:25 - slug
269:27 - uh
269:29 - remember that column we have defined it
269:32 - is a slug
269:33 - equal to slug
269:36 - text and let's limit it to one
269:39 - let me explain this line
269:43 - so uh this statement retries the ID from
269:47 - views table where the slug is equal to
269:50 - the slug text so let's say uh there is a
269:54 - Blog which has a slug which is ABCD and
269:58 - it has five counts so uh let's say if
270:01 - you want to increment that view for that
270:04 - particular block so we'll call increment
270:06 - by passing the ABCD as a slug text and
270:09 - now this line will first compare if
270:12 - there is any blog available with the
270:14 - slug ABCD and if there is then it will
270:19 - get that ID of that particular row and
270:22 - store it into the view underscore ID
270:24 - variable
270:27 - now let's add a condition so if view
270:31 - underscore ID is not null
270:36 - then
270:38 - we will update the view count so write
270:41 - update
270:43 - view stable and set
270:46 - count column to
270:50 - count Plus 1.
270:56 - now where
270:58 - ID of that row
271:01 - it should be same as the view underscore
271:04 - ID
271:05 - so uh let me summarize this
271:09 - so first we have declared this variable
271:11 - and we will select the ID of that row
271:15 - which has this slug for any particular
271:18 - Blog then if there is ID available that
271:23 - means the row is available in the table
271:25 - then we will update at that particular
271:28 - row so we have write update views table
271:31 - where set column named count to count
271:34 - plus 1 and where ID is equal to view
271:38 - underscore ID so this this is how we
271:41 - will update the particular row
271:45 - else
271:48 - now code runs into the as block because
271:50 - view ID is null that means there is no
271:54 - row available with this particular
271:56 - particular blog slug so for that we will
271:59 - create new row so write insert
272:03 - into views table
272:07 - for the slug and count column
272:12 - and we will add the values
272:16 - the past slug text
272:22 - and now for the count column let's add
272:24 - one
272:26 - that's it let's end the if statement so
272:29 - n if
272:33 - and let's end this main block of this
272:36 - function
272:39 - and let's end the function definition
272:43 - and let's write language PL
272:49 - ql now uh this last line
272:53 - that marks the end of this function
272:55 - definition block and specifies that this
272:58 - function is written in the postgresql
273:00 - language
273:02 - so let's uh format this
273:06 - now let's run this function
273:11 - and it has some error
273:13 - let's add semicolon in here let's add
273:17 - semicolon here as well let's run this
273:21 - and we have a success
273:23 - so this will create a one function
273:25 - called increment and you can see that in
273:30 - here click on this database
273:33 - and if you go to these functions
273:37 - so we have this increment function
273:40 - and you can edit function or check the
273:42 - API Docs
273:45 - so let's uh check if this function works
273:48 - or not go to the SQL editor
273:52 - let me create a new query
273:56 - and to run any function you have to
273:59 - write select
274:01 - function name which is increment
274:04 - and here let's write slug ABCD
274:10 - let me use single quotes
274:14 - let's run this
274:16 - and we have no result but let's check
274:19 - the table
274:21 - and as you can see here there is a one
274:24 - row with the slug ABCD and count to one
274:26 - now let's run this function again
274:31 - let's keep the slug to ABCD let's run
274:35 - this Let's uh run this query again
274:43 - and let's uh
274:45 - run it for one more time
274:49 - let's open the table
274:53 - and as you can see account is increasing
274:59 - so let's see how we can connect the
275:02 - super base to our blog
275:04 - and you can also refer to this uh API
275:08 - Docs
275:09 - you can click on this views table and
275:12 - this is how you can select edit update
275:16 - or delete any row
275:19 - and here is the function
275:22 - now this is how we can call the function
275:26 - so let's open the vs code let me close
275:29 - everything
275:40 - now if you open this dot ene dot example
275:43 - you will see there are two way variables
275:45 - that we are going to use one is the
275:47 - supervised URL and one is the Anon key
275:51 - so let's copy this or just change
275:55 - it's a name from Envy dot example to EnV
276:00 - dot local
276:02 - and let's add uh values to this
276:05 - variables
276:07 - go to the settings
276:13 - and click on this API
276:15 - now here is the project URL so let's
276:18 - copy this
276:20 - and paste it right here
276:24 - let's copy this and on public keys
276:28 - and paste it right here
276:31 - so let's save this
276:33 - now open the SRC components folder and
276:38 - go to the blog and let's create one more
276:40 - component called view counter dot Js
276:47 - let's write one save this and go to the
276:52 - blog details
276:54 - and instead of this 10 views
276:59 - let's add the
277:02 - view counter
277:05 - let's save this
277:11 - you can say it says one
277:15 - so first uh we are going to update this
277:18 - uh counts on the client side so let's
277:20 - make it a client component for that
277:22 - let's add use client directive
277:27 - now here
277:28 - to connect the super base we are going
277:30 - to use super bass slash auth helper
277:33 - slash uh Dash nextges
277:36 - so if you open the package.json file and
277:42 - here is the library that we are going to
277:44 - use
277:46 - so first uh let's uh create the Super
277:50 - Bass instance for that create const
277:54 - super base equal to create client
277:58 - component client
278:01 - make sure you import that from this
278:04 - Library
278:06 - now uh here we are going to get
278:10 - slow of the blog then let's uh add one
278:15 - more which says no count
278:17 - so if you don't want to increment the
278:21 - account uh let's say you want to display
278:24 - this view counter component in the home
278:27 - page or to show the total account or
278:30 - total views of any Blog then you just
278:33 - have to pass no count equal to false
278:36 - so that it does not increment the
278:38 - counter whenever it reloads
278:41 - and let's add one more prop called show
278:44 - count
278:45 - and let's keep it to true
278:49 - Let's uh add one more state
278:53 - so just write you state
278:56 - make sure to import that from the react
278:59 - let's name it as
279:01 - views
279:05 - for now let's skip it to zero
279:11 - now uh if
279:14 - show count
279:16 - is true then we will return this else we
279:21 - will return null
279:25 - now in this do let's render this dates
279:29 - called views and write views let's save
279:33 - this
279:38 - and here it is
279:40 - so for now there is zero views
279:43 - now let's uh create one
279:46 - use effect
279:49 - make sure you import that from the react
279:52 - now in this use effect let's create one
279:56 - function
279:57 - call const
279:59 - increment View
280:02 - let's make it async
280:06 - now we are creating this function inside
280:08 - this use effect because we are not going
280:11 - to use this function anywhere out
280:13 - outside of this use effect
280:15 - so let's first write the try block
280:19 - inside this try block let's get the code
280:22 - to call the function
280:29 - let's open this
280:32 - API Docs
280:34 - click on this increment function and
280:37 - let's copy this code
280:42 - and paste it right here
280:45 - now after this try block let's add catch
280:51 - pass the error and
280:54 - we will
280:56 - use cons console
280:59 - dot error
281:02 - and let's write an error
281:07 - occurred while
281:10 - incrementing The View count
281:14 - let's pass the error
281:20 - now let me explain this code so this
281:23 - will uh call this function increment and
281:27 - if it passes the slug underscore text
281:30 - which in this case it is
281:33 - Slug and then if this function returns
281:37 - anything that it will store into data
281:39 - and if there is an error then it will
281:41 - store this that message into this
281:43 - variable so if uh there is any error we
281:49 - will
281:49 - log it so if there is any error
281:55 - let's use
281:56 - console.error
281:58 - and let's write
282:00 - error
282:01 - incrementing view count inside try block
282:14 - we don't need this data so let's remove
282:17 - it
282:21 - let's copy this function
282:25 - and if
282:28 - no count is true
282:32 - so just write exclamation mark
282:35 - right no count
282:39 - and then we will call this
282:41 - function
282:45 - and in this use effect dependency let's
282:49 - write slug
282:51 - and no count
282:54 - uh before we save that let's go to the
282:58 - blog details
283:00 - and pass the slug
283:04 - so here is the blogs log
283:08 - let's save this and save this as well
283:15 - let's reload this
283:20 - and we are getting the error it says
283:23 - incrementing you count inside try block
283:30 - new row violets row level security
283:32 - policy for the table views
283:35 - so for that we have to add a different
283:38 - policy in this database so go to this
283:42 - Authentication
283:43 - and click on this policies so we have no
283:46 - policies created for this views table
283:49 - let's create the new policy
283:53 - click on this get started quickly
283:57 - now this is the template to enable read
284:00 - access to everyone let's use this
284:02 - template now uh we are going to
284:05 - enable the read access not for all users
284:08 - but for Anon users that uses that public
284:11 - key that we have stored in the EnV
284:14 - variable
284:15 - so for the Target rules let's select
284:18 - Anon
284:20 - and let's keep this expression to true
284:24 - let's review this
284:26 - looks great click on the save policy
284:31 - now let's create another policy
284:33 - to
284:35 - edit or insert
284:37 - select this enable insert
284:40 - use this template
284:41 - now enable insert for
284:45 - and on users only
284:48 - instead of authenticated select and on
284:53 - and review let's save this now let's uh
284:57 - add one more policy
285:00 - for the update
285:03 - click here
285:04 - let's use this template
285:07 - and let's change it to
285:10 - and on
285:11 - users
285:14 - let's select the Anon
285:17 - now let's remove this expression and
285:20 - just write true
285:22 - and true
285:23 - let's review this
285:26 - and save the policy
285:28 - so we have three policy insert read and
285:31 - update for all and on users
285:35 - Let's uh refresh this
285:40 - let's refresh this again
285:44 - let's check the table
285:50 - and here it is now as you can see here
285:54 - we have two counts for this blog and
285:58 - here is here is the slug now let's try
286:01 - for the another blog
286:07 - let's click on this
286:11 - and as you can see here it has uh
286:14 - created one row for the JS Frameworks
286:17 - comparison blog
286:19 - now let's see how we can get this views
286:22 - so go to the API Docs
286:28 - and click on the views table
286:30 - now let's see how we can get the view
286:32 - count so this is the code
286:37 - let's create a almost same use effect
286:41 - let's change this function name to get
286:45 - views
286:47 - and instead of that
286:49 - let's copy this
287:02 - so uh here we are first selecting the
287:06 - table from table let's select the count
287:08 - column now let's use uh another
287:11 - condition
287:13 - and after that we will use dot match
287:17 - let's match the
287:20 - slug column with the given slug value
287:25 - if there is a match let's return the
287:29 - single row
287:33 - and once we get this views
287:36 - Let's uh
287:39 - set this date so right side views
287:43 - and pass the
287:45 - views
287:46 - now before this first let's log it
287:54 - let's remove this views and keep the
287:56 - data
287:58 - let's log the data save this
288:07 - and instead of calling this
288:10 - let's call get views
288:13 - we don't need this condition
288:17 - and no count as well let's save this
288:24 - now here is the data we are getting four
288:26 - count
288:28 - so let's set the state
288:34 - if there is data
288:37 - then set data dot count otherwise
288:42 - set 0.
288:44 - let's remove this log save this
288:49 - and as you can see here it says four
288:51 - views
288:52 - let me reload this
288:54 - and it says five views so it is working
288:57 - great
288:59 - now let me close this tab so this is how
289:02 - you can create a view counter and store
289:05 - its value to the supervised
289:09 - you can use supervised to add different
289:12 - functionalities as well
289:14 - now let's learn one of the important
289:16 - part of this blog that is the SEO now
289:20 - before that let's open the next.js docs
289:26 - make sure you are in the app router
289:30 - and go to the optimization
289:35 - click on the metadata
289:37 - now there are two ways by which you can
289:41 - add the SEO a one is by defining this
289:45 - metadata object and in this object you
289:48 - can add different information such as
289:50 - title description Etc
289:53 - and you can add this metadata in the
289:56 - layout.js file as well so that this SEO
290:00 - will be shared across all the pages all
290:02 - the routes
290:04 - and next is the dynamic metadata that
290:07 - uses the generate metadata function
290:10 - so uh this function is uh usable for the
290:15 - dynamic Pages such as blogs and
290:18 - categories for blogs and categories we
290:20 - are not creating Pages individually for
290:23 - each and every blog instead we are using
290:25 - the page.js file and we are using the
290:28 - dynamic routes so for that we are going
290:31 - to use the generate metadata function so
290:34 - let's add this metadata constant
290:40 - foreign
290:42 - let me close this
290:44 - now go to the app directory
290:47 - and open the layout.js file well there
290:51 - is already one constant called metadata
290:55 - so let's uh add the required SEO inside
290:59 - this metadata so that it will be shared
291:01 - across all the routes now let's edit
291:04 - this metadata
291:06 - so first let's add the URL now before we
291:10 - add any data into this metadata object
291:13 - first let's create one file called site
291:17 - metadata
291:21 - so go to the utils
291:25 - and create one file called site meta
291:30 - data dot JS now in this file we will
291:33 - create one constant called
291:36 - site
291:38 - metadata
291:43 - here we will add all the required data
291:45 - that that are important for our blog
291:50 - you can go to the project files and open
291:54 - the site metadata.js and just copy this
292:00 - and paste it right here now in the side
292:02 - method data we have title of this blog
292:06 - other Adder title uh description
292:09 - language theme site URL uh for me it is
292:14 - this URL that I have hosted on the
292:17 - virtual so you can change this whenever
292:19 - you host your blog we have a logo social
292:22 - Banner now this logo and social winner
292:26 - you should have uh both of this PNG
292:29 - files inside the public directory so in
292:33 - the project files
292:35 - let's copy the social banner.png
292:38 - and this is just a screenshot of the
292:41 - website
292:42 - and paste it inside the public folder
292:50 - now I already have this profile Dash
292:53 - image so let me copy this and paste it
292:56 - inside the public directory again let me
292:59 - change its name to logo
293:04 - let me close all this
293:07 - and then we have email Social Links and
293:10 - local
293:11 - so we are going to use this site
293:13 - metadata
293:14 - for the SEO let's close this open the
293:18 - layout
293:21 - now let me open the next.js docs
293:26 - click on the static metadata object
293:30 - so here are all the fields that we can
293:33 - add into this metadata so first let's
293:37 - add the metadata base now as mentioned
293:42 - here it is an option to set the base URL
293:46 - so let's copy this
293:50 - and paste it right here
293:53 - now inside this we will add the URL
293:57 - first import the site metadata
294:00 - object then write site URL
294:04 - make sure to import that
294:07 - it should not be from the project file
294:09 - so let me import this again
294:13 - from YouTube's
294:16 - let's save this now let's open the title
294:25 - so here is the title you can uh add the
294:29 - title as simply as that or we can use
294:32 - the template
294:34 - so uh
294:36 - click on the template
294:38 - as you can see uh
294:40 - template has percentage s for the string
294:43 - and Acme is the website's name so uh
294:46 - whenever we pass let's say in the blog
294:50 - route we will write the blog title and
294:53 - at the end it will add this website's
294:56 - name
294:58 - so let's use this template copy this
295:04 - and instead of this
295:07 - let's
295:09 - use the template and default in the
295:14 - default
295:16 - let's get this site metadata Dot
295:21 - title
295:24 - and in the template as well copy this
295:28 - and instead of Acme write the currency
295:31 - symbol and parenthesis and paste this
295:34 - make sure uh these are the backticks
295:41 - so in different routes whenever we pass
295:44 - the title it will be right here and
295:47 - after that title there will be a site
295:49 - title
295:54 - let's save this
295:57 - and we load this
295:59 - now as you can see here we have the site
296:01 - title
296:07 - now after this we will add the
296:10 - description
296:12 - let's use the site metadata again
296:15 - dot description
296:19 - now let's add the open graph images so
296:22 - that it will help social media to
296:25 - preview our blog
296:28 - let's click on this open graph
296:32 - let's copy this
296:36 - and paste it right here now in this open
296:39 - graph
296:41 - let's add site metadata dot title
296:44 - in this title
296:48 - and for the description as well for the
296:51 - URL we will use this
296:58 - now for the site name let's keep the
297:01 - title
297:06 - now for this images
297:09 - let's just pass
297:12 - site
297:14 - metadata dot social Banner
297:21 - which you can see
297:22 - that is this URL
297:29 - let's keep local a as it is and type 2
297:32 - as it is as well
297:35 - now let's go to the robots
297:38 - let's copy this
297:43 - paste it right here now uh it says false
297:47 - but if you
297:48 - write true it will it will enable your
297:51 - blog to be indexed by other search
297:54 - engines
297:56 - and this is for the Google board
298:02 - let's delete this
298:08 - you can add or update any settings you
298:11 - want from this
298:13 - and let's scroll down
298:18 - the viewport is automatically set with
298:21 - the following default value so we don't
298:23 - have to add this
298:30 - let's add Twitter
298:33 - copy this
298:35 - and paste it after this robots
298:44 - for the title we will use site metadata
298:47 - dot title
298:50 - let's keep the card type 2 as it is
298:54 - let's remove the description site ID
298:57 - creator
298:59 - Creator ID and for the image we will use
299:03 - social Banner
299:09 - let's save this
299:11 - and let's open this
299:15 - now inside the inspect elements open the
299:19 - head
299:20 - now you will see all the metadata that
299:24 - we have added
299:26 - now here is the OG URL site name local
299:29 - image type and Twitter card title
299:33 - description
299:33 - [Music]
299:35 - and here is the description of this page
299:37 - and title as well
299:41 - so this metadata will be common across
299:44 - all the routes
299:48 - so this is completed now let's see how
299:52 - we can add the metadata for dynamic
299:55 - routes let's go to the documentation
299:59 - and
300:01 - click on this
300:04 - generate metadata function
300:10 - let's just copy this
300:14 - and let me close all this open the
300:18 - blog page
300:23 - after generate generate static params
300:26 - let's paste this
300:28 - and here we will add all the SEO related
300:31 - to the blog so first let's get the data
300:34 - for individual blog we can
300:38 - copy this
300:41 - and paste it inside this function so
300:43 - this is how we will get the block data
300:46 - now this function will have params
300:48 - object so that it can access this log
300:49 - and all other information
300:52 - and
300:53 - let's say if there is no blog
300:59 - return
301:02 - nothing
301:07 - now first uh let's add the log dot title
301:14 - then
301:16 - the description as well
301:21 - now let's uh
301:24 - copy the opening graph
301:28 - let's go to the
301:31 - open graph
301:36 - let's copy this
301:40 - and paste it right here
301:43 - now for the title let's use
301:46 - block Dot
301:49 - title and description as well
301:52 - for the URL we will use
301:56 - site metadata make sure to import that
301:58 - from the utils
302:00 - Plus
302:02 - add slash blogs
302:05 - Plus
302:07 - add params Dot
302:11 - slug that's it or you can just write
302:15 - blog
302:17 - dot URL
302:20 - that we are getting
302:23 - from here
302:26 - and this is the URL but this will start
302:29 - from the slash blogs so we have to
302:31 - eventually add the site metadata Dot
302:35 - site URL
302:40 - oops it should be
302:42 - here
302:47 - all right now for the site name
302:51 - let's add the site metadata
302:55 - Dot
302:57 - title
302:59 - now let's add local and type right here
303:02 - and type set article
303:06 - now for the article there is a more
303:10 - Fields such as published
303:14 - time
303:16 - so let's calculate this publish time and
303:19 - date
303:22 - create one variable called const
303:25 - published at and let's
303:29 - use new date pass the blog Dot
303:33 - published
303:36 - at
303:39 - and let's convert this to to ISO string
303:43 - let's do the same for the updated as
303:46 - well let's change this name to modified
303:51 - add
303:54 - and here change it to updated at
304:00 - r
304:01 - let's just write
304:03 - blog dot date
304:08 - do we have that field
304:11 - let me check this once again
304:16 - we have blog dot image author text body
304:20 - we don't have a date instead we can use
304:23 - this publish date if there is no updated
304:27 - add date
304:29 - so let's copy this paste it right here
304:32 - and next field is the
304:35 - modified
304:37 - time
304:41 - let's copy this and paste it right here
304:44 - now there is one more field for the
304:47 - image so let's create uh one variable to
304:51 - store the image list
304:54 - so in this array first pass the site
304:57 - metadata Dot
304:59 - social Banner
305:01 - and let's check if this Blog has the
305:04 - cover image so okay let's put a
305:06 - condition says if log dot image
305:13 - then
305:14 - let's add it to the image list
305:18 - image list equal to first we will check
305:22 - the type of blog dot image Dot
305:27 - file path
305:32 - So eventually we are checking this it
305:35 - should be string
305:38 - file path if it is string
305:42 - and let's add
305:45 - the this image URL so for that we will
305:49 - use site metadata Dot site URL
305:55 - Plus
305:57 - log dot image dot file path
306:04 - and let's replace
306:05 - uh this dot dot slash public
306:12 - dot replace
306:15 - dot dot slash public
306:18 - Within empty string
306:22 - so this will add the log image
306:25 - else let's just
306:27 - set the image list to blog dot image now
306:31 - in this images we have to pass the URLs
306:35 - of each image
306:37 - so let's create one more variable called
306:40 - OG
306:42 - images equal to
306:45 - image list
306:47 - dot map
306:49 - this will give us the image
306:52 - and let's return
306:54 - the URL
306:56 - so return one object
306:59 - write URL and let's add a condition if
307:03 - this image
307:06 - includes
307:09 - http
307:13 - then return the image as will create
307:17 - this
307:19 - URL
307:20 - with using site metadata Dot site URL
307:25 - plus the image
307:28 - actually we don't have to do this
307:31 - condition but
307:33 - still it is better to be safe than sorry
307:36 - let's copy this
307:39 - and
307:41 - instead of this array let's add the OG
307:44 - images
307:46 - now let's add the author
307:51 - so for the author let's create one
307:54 - variable called authors equal to
307:58 - let's say if block has the author
308:02 - then return one added and add block dot
308:06 - author as
308:08 - we will use the author from the site
308:12 - metadata
308:15 - dot author
308:18 - in our case it is code bugs
308:21 - let's copy this
308:25 - and add one more field called authors
308:29 - if authors dot length is greater than
308:33 - zero
308:36 - it should be authors
308:38 - and then others else
308:42 - add site metadata
308:46 - dot author
308:50 - that's it now let's add the Twitter card
308:53 - go to the layout
308:57 - and
308:59 - let's copy this
309:02 - and paste it right here
309:04 - we have card
309:06 - and state outside metadata.title at blog
309:09 - dot title
309:10 - and let's add the discussion as well
309:16 - now for the images
309:19 - let's add
309:23 - image list uh
309:26 - this OG images
309:34 - let's save this and let's check it out
309:44 - let's open this blog
309:51 - now as you can see on this tab it has
309:55 - the title of the blog
309:57 - let's open the
309:59 - elements
310:03 - open the head
310:05 - and here are all the meta tags
310:08 - here is the publish date and modified
310:12 - date
310:14 - and here is the published time and
310:16 - modified Time author
310:20 - let's check if it has the OG image and
310:24 - here is the Twitter image
310:26 - so first we have the site URL from the
310:30 - site metadata then slash blog slash this
310:33 - image which is the cover image of this
310:36 - blog
310:37 - so everything looks great
310:40 - let me close this let's add SEO for this
310:44 - categories page
310:47 - let's open the categories page.js
310:54 - let's copy
310:58 - this
311:01 - and paste it right
311:03 - after the generate static params
311:11 - let's remove this we don't need this as
311:15 - well let's move
311:17 - everything
311:19 - accept title and description
311:23 - if you want different images for the
311:26 - social media you can just modify this
311:30 - for the title let's use
311:34 - backdicks
311:36 - and right
311:39 - currency symbol and parenthesis
311:42 - let's add the category name which is
311:44 - parents dot slug
311:47 - then just write
311:49 - vlogs
311:51 - and in the description
311:53 - let's add back text
311:56 - let's write learn more
311:59 - about
312:03 - let's add params
312:06 - dot slug that is the category name
312:09 - learn more about XYZ category
312:14 - through our
312:16 - collection of expert
312:20 - blogs and tutorials
312:23 - let's save this
312:26 - and here is the category name and blogs
312:31 - now let's remove this Dash
312:35 - so dot slug
312:37 - dot replace all
312:42 - replace steel Dash
312:44 - with once
312:46 - space
312:47 - let's save this
312:51 - let's reload it again and
312:54 - actually I should do this
312:57 - and the title
313:01 - and it looks much better
313:05 - now uh
313:07 - for the all category this does not
313:11 - look much better for the description
313:16 - now as mentioned it says learn more
313:18 - about all through our collection so
313:21 - let's add one condition here
313:29 - let's say if firearm starts lug
313:32 - equal to
313:34 - all then just write web
313:37 - development
313:40 - else let's pass the category name that
313:44 - is params Dot
313:46 - slug so let's save this
313:50 - and now it says learn more about web
313:53 - development through our collection of of
313:55 - expert blogs and tutorials now this
313:58 - looks much better now let's uh add the
314:01 - metadata for the
314:03 - contact and about page let's open the
314:07 - contact page
314:11 - open the layout
314:15 - let's just copy this now in this contact
314:19 - page we don't need to use the generate
314:21 - metadata function because this is not
314:23 - dynamic
314:24 - let me remove this Twitter
314:27 - open graph
314:29 - and this title as well
314:32 - let's remove this
314:35 - now in the title let's just write
314:38 - contact me
314:40 - and in the description
314:43 - let's just write
314:45 - this
314:47 - contact me through
314:51 - this form
314:54 - are
314:56 - email me at
314:59 - Let's uh just write your email instead
315:02 - of this
315:04 - let's use backdicks paste this and
315:08 - let's get the email from site metadata
315:11 - which is right here
315:13 - so just write
315:15 - site metadata
315:21 - let's import this from the utils DOT
315:25 - email
315:26 - that's it let's save this
315:29 - copy this and open the about page
315:34 - and paste it right
315:37 - here
315:42 - or the title
315:44 - let's just use about me
315:51 - here are
315:55 - some details about myself
316:00 - that's it let's save this and check it
316:03 - out go to the contact
316:10 - and here is the title and in the
316:12 - description it says contact me through
316:14 - this form or the email email me at uh
316:19 - codebox27 gmail.com let's open the about
316:26 - and this looks great
316:29 - let me change
316:31 - this like contact me through this
316:36 - through
316:39 - the form
316:41 - available on this page or email me at
316:45 - this
316:47 - and much better let me close all this
316:57 - now our website is almost completed now
317:01 - for this social media links let's get
317:03 - the URL from the site metadata so open
317:06 - the header
317:09 - and here are all the URLs so instead of
317:13 - this
317:16 - open curly braces
317:18 - import site metadata from utils Dot
317:24 - first let's write LinkedIn
317:26 - then there is Twitter
317:30 - then we have GitHub and
317:33 - retriever
317:36 - so if you open the site metadata here
317:39 - are all the social media links
317:46 - let's copy this and do the same for the
317:50 - footer links
318:00 - so instead of example
318:04 - let's replace this with this
318:07 - change this to Twitter
318:11 - GitHub
318:14 - and
318:16 - triple let's save this
318:22 - we should import the site metadata
318:25 - from utils
318:30 - and this is pointing to the right URL
318:36 - all right now let's implement the theme
318:40 - switcher button let's go to the
318:44 - components folder
318:48 - and create one folder called
318:50 - hooks
318:52 - and let's start creating the
318:54 - use theme switch hook
318:56 - right use then switch make sure to add
319:01 - use keyword before you create any react
319:04 - hooks
319:06 - let's write
319:08 - choose Clan directive
319:13 - and let's export one function called use
319:18 - theme
319:19 - switch
319:23 - and this function first let's uh get the
319:26 - preferred dark query
319:29 - so let's write
319:31 - prefer
319:33 - dark
319:34 - query
319:35 - or we can also say preference theme or
319:40 - something like that
319:43 - so this is one of the median queries
319:48 - that prefers color schema
319:53 - to dark
319:56 - we will use this media query if there
320:00 - are no user preference available
320:02 - and we will use the local storage to
320:05 - store the theme
320:07 - so for that just write storage key
320:14 - and set it to
320:16 - Tim
320:18 - that's it now let's create a function to
320:21 - toggle the theme so const
320:25 - toggle theme
320:27 - let's pass the theme
320:32 - if
320:33 - theme is equal to equal to dark
320:37 - then
320:39 - we will add the dark class
320:42 - in the HTML so just write document Dot
320:46 - document element which is the HTML and
320:51 - let's add dot class list
320:53 - dot add and add the dark class
320:59 - now else we will remove this dark class
321:03 - so just change this add to remove
321:09 - now after that let's uh
321:12 - add the theme in the local storage so
321:14 - just writing window
321:16 - dot local storage dot set item
321:23 - storage key that is the theme and
321:27 - for the value use the past theme
321:31 - so after this function let's initialize
321:34 - the theme
321:36 - so let's uh
321:38 - create one function that check if there
321:41 - is any user preference or not
321:43 - so const get user
321:47 - preference
321:51 - so in this function
321:53 - pause let's create one variable called
321:55 - user pref
321:57 - and
321:59 - first let's uh get the theme from the
322:02 - local storage so just write window dot
322:04 - local storage dot get item
322:09 - and pass the
322:10 - storage key
322:14 - now if
322:16 - there is something in the local storage
322:18 - so that means the user has some
322:21 - preference
322:23 - then
322:25 - return the user preference it can be
322:29 - dark or light
322:31 - as let's return the system preference so
322:35 - for that we are going to use this media
322:38 - query so just write window dot match
322:41 - media
322:43 - and let's add this query
322:48 - dot matches if this query uh that says
322:53 - prefers color a schema to Dart that
322:55 - means the system uh preferred color
322:57 - schema is dark
322:59 - then we will return the Target also we
323:03 - will return the light
323:05 - now
323:07 - after this functions let's
323:10 - initialize one use State make sure to
323:12 - import that from the react
323:14 - let's name it as a mode you can also set
323:19 - its name to theme
323:22 - let's set this to
323:25 - dark
323:30 - now let's use both of this function in
323:33 - an use effect so
323:36 - Let's uh import this from react
323:41 - okay
323:44 - now in this use effect
323:47 - first let's get the media query
323:52 - we will use this media query to check
323:54 - the system preference
323:56 - right match media
323:59 - and
324:00 - copy this query and paste it right here
324:05 - now after that let's create one function
324:07 - called handle change
324:12 - and let's get the user preference using
324:15 - this function
324:16 - copy this
324:18 - let's write one variable
324:22 - called new mode
324:24 - this variable will store the user
324:26 - preference
324:28 - so after that let's uh set this mode
324:33 - pass the new mode
324:35 - and after this let's toggle the theme
324:41 - let's copy this new mode right here
324:45 - and let's call this function
324:48 - so now whenever this page reloads it
324:51 - will run this use effect and first it
324:55 - will run this function and get the
324:58 - preference of the user then it will set
325:01 - the mode and toggle the theme as well
325:03 - now after that when the page is already
325:07 - loaded and let's say user click on the
325:09 - theme switch button then we have to
325:12 - detect that change and make a change in
325:14 - the theme as well so for that we will
325:16 - add one event listener
325:18 - on this query so just write
325:21 - media query dot add event listener
325:27 - write change
325:30 - on any change
325:32 - we will call the handle change function
325:36 - so that's it now let's uh
325:39 - close this event listener on return
325:45 - so right media query let's just copy
325:49 - this
325:50 - paste it right here and just add remove
325:54 - event listener
325:56 - let's remove this
326:00 - after this user file let's return the
326:03 - mode and set mode function
326:07 - let's save this and let's use this hook
326:11 - inside the header
326:14 - now we are going to use this user in
326:17 - this header so we have to make it as a
326:20 - client component
326:24 - so let's use mode and set mode
326:29 - from the use sim switch hook
326:35 - make sure to import it
326:42 - now in this button
326:45 - let's create one function called on
326:48 - click
326:51 - on click on this button Let's uh use a
326:57 - set mode function
326:59 - so if mode is equal to the current mode
327:03 - is equal to
327:04 - light
327:06 - then set the value to Dart I'll skip the
327:10 - value to light that's it let's save this
327:14 - and test this hook
327:18 - let me click on this
327:21 - actually let's go to the layout
327:26 - and let's add uh one class for the dark
327:30 - mode
327:30 - click on the dark set the bg2 DOT
327:35 - let's save this
327:38 - and as you can see it is working great
327:41 - let me click again and it is not working
327:46 - let's check the hook
327:49 - so we have on use effect uh when the
327:52 - page reloads
327:54 - but we don't have anything that handles
327:56 - the change in the mode state
328:00 - so let's create one more use effect
328:05 - now in this use effect this will run
328:07 - whenever any change happens in the mode
328:09 - and calls the toggle theme function by
328:13 - passing the value of this mode let's
328:17 - save this now let's go to the
328:21 - Tailwind config
328:23 - here we have to add the dark mode
328:27 - let's open
328:29 - Tailwind CSS
328:35 - click on the dark mode
328:40 - and here it is
328:42 - now we have to
328:45 - set this configuration
328:47 - right here
328:51 - let's save this
328:53 - and check this
328:58 - and it's working great
329:01 - let's reload it it is uh changing from
329:04 - light to dark so that is not good
329:08 - now let's scroll down
329:10 - and we have to add the script on the
329:13 - page load
329:15 - so let's copy this
329:18 - go to the layout
329:22 - and before the header and inside this
329:24 - body let's use the script tag to add the
329:28 - script
329:30 - make sure you import that from the next
329:33 - slide script
329:38 - Let's uh add one curly braces
329:43 - and Matrix and add the script now
329:48 - it will check if the theme is dark and
329:50 - that is theme in or that is theme in
329:53 - local storage and mesh media query and
329:57 - if this all matches then it will add the
329:59 - dark class as it will remove the dark
330:01 - class now this script is necessary
330:04 - because whenever we reload the page this
330:07 - should run and check the local storage
330:09 - before it loads all the elements
330:12 - so let me just modify this let's just
330:16 - write local storage.get item
330:20 - theme and it should be dark
330:25 - let's add one more single code let's
330:29 - let's save this
330:31 - and we format it
330:35 - and it looks great now let's uh make
330:39 - this website responsive and add the dark
330:42 - dark class whenever required first let's
330:45 - start with the logo
330:55 - thank you
330:59 - now here it is text Dash dog now for the
331:02 - dark set text to light
331:06 - let's save this
331:09 - and this looks much better
331:12 - let's change the Border dark to border
331:15 - light for the Dark theme
331:17 - change border to light
331:20 - let's save this
331:23 - and much better
331:26 - thank you
331:28 - let's decrease the font weight for this
331:31 - code books
331:34 - for the dark set font weight to
331:37 - semi bold
331:40 - and looks great
331:43 - let's make it responsive
331:50 - now we are going to use the minimum
331:52 - width query if you
331:54 - search the responsive design
331:57 - here it is
331:59 - now this Tailwind use minimum width
332:03 - for the SM it is 640 and for the 2XL it
332:07 - is a 1536 pixel let's use all this
332:13 - now in the logo
332:16 - Let's uh decrease the width to width
332:20 - dash 12 for the medium screen so just
332:23 - write MD
332:25 - set with 212.