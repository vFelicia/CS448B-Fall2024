00:29 - you
00:57 - well what's up everybody uh glad to be
01:00 - back this week so what we're going to be
01:02 - doing is we're going to be working with
01:06 - open file that kind of came up last week
01:09 - hey there jan how are you doing i'm glad
01:12 - to see everybody glad everybody's back
01:15 - today
01:16 - all right so
01:18 - the reason why this shopping list
01:19 - exercise is a good one is
01:23 - it takes in to account a lot of
01:27 - different
01:29 - aspects so let's just go ahead and get
01:31 - into it because we got our file object
01:33 - we got a plan we got a
01:35 - air handle
01:37 - we have to learn a little bit more about
01:40 - files
01:41 - and a couple other things
01:45 - i'm doing pretty good i don't know if
01:46 - you've heard my voice
01:48 - i had a
01:50 - with all this
01:52 - mask wearing i've realized that i'm
01:53 - having to yell a lot more so i'm gonna
01:55 - try to hang in there as long as we can
01:58 - we'll get at least through the shopping
02:00 - list i promise you that and uh we'll see
02:03 - how i'm doing after that but i tried to
02:05 - rest my voice yesterday and uh
02:08 - did not do a lot of recovering so
02:12 - let's just go ahead and jump into it so
02:13 - we got we got a we got a ton of people
02:16 - here right now so let's just get after
02:17 - it so
02:19 - file and file object and open and things
02:21 - like that so
02:23 - let's learn about open first
02:27 - so if you guys are
02:29 - new here i am
02:32 - sam from python basics and being
02:36 - afforded the wonderful opportunity to
02:38 - live stream with you guys on tuesdays so
02:40 - this is
02:42 - i told myself i would look and make sure
02:45 - i think this is the seventh
02:47 - stream
02:48 - it it may be the eighth actually you
02:51 - know what i'll click over to the
02:52 - playlist and beau has done an awesome
02:54 - job bo and quincy and i appreciate the
02:57 - opportunity to get to be here here let's
02:59 - go ahead and look
03:00 - uh
03:01 - today is the seventh today is the
03:03 - seventh live stream so
03:06 - we did four took a week off and then are
03:08 - back so yes this is our fourth one and
03:11 - they have all of them in their own
03:12 - playlist so
03:14 - uh in just a little bit of a history if
03:16 - you are just joining us
03:18 - these are a conglomerate of all of the i
03:22 - don't think i've left the first hundred
03:24 - videos that i have on my channel so if
03:26 - there's ever something that you saw here
03:28 - and you don't wanna
03:29 - and you may have a hard time going to
03:31 - find it you can go back and search it
03:33 - it's my channel is down in the
03:34 - description below but all right
03:37 - open
03:38 - all right so this is how you handle a
03:41 - file so we're going to go through this
03:42 - because because th this can get blurry
03:46 - really really quickly
03:48 - so i think we've talked about what these
03:50 - are
03:51 - these are
03:53 - so here i'll show you
03:55 - if it has an equal sign in the function
03:57 - it's an optional argument
03:59 - also
04:00 - default argument so it's already
04:02 - assigned to a certain parameter
04:05 - mode
04:06 - r is for read
04:08 - so by default it is going to
04:11 - read
04:12 - the file and you'll just see and we'll
04:16 - just jump into it
04:17 - so let's
04:19 - uh
04:20 - shoot i think i already created that so
04:22 - we will do
04:24 - um
04:25 - i think i have that in here too
04:29 - so we're going to make this f so it does
04:31 - not mess with our head about this
04:34 - argument right here file
04:37 - so we're going to do
04:40 - open
04:41 - then
04:43 - i know this isn't here
04:46 - test
04:47 - underscore
04:49 - 1
04:51 - then txt
04:53 - txt
04:55 - now
04:57 - here
04:58 - let's just let's just leave this so
04:59 - we're going to run this we're going to
05:01 - go through everything all right
05:04 - so it fails right now
05:07 - because
05:11 - it defaults to r
05:14 - and r is going to read the file
05:16 - so if the file doesn't exist it can't
05:19 - read it
05:20 - so that's why
05:22 - if we want to create a file and write to
05:24 - it or create a brand new file we need to
05:26 - make sure we do
05:28 - w
05:29 - for write to open
05:33 - and we're going to start deal
05:35 - dealing with this so now
05:37 - we bring this in we have no error
05:39 - so now let's look at what we can do with
05:43 - file
05:49 - ah here we go
05:52 - this is a lot
05:54 - of methods and
05:56 - attributes so let's pull up help on file
06:01 - this is centered right okay you guys can
06:02 - see this
06:05 - now here's a file input output text
06:07 - input output wrapper
06:09 - file object
06:11 - and
06:12 - here are all of the
06:14 - methods
06:16 - that we have
06:18 - excuse me sorry guys
06:21 - now
06:22 - we've touched on this before
06:25 - where you can have a mix
06:27 - of
06:28 - methods and arguments mixed in
06:32 - so
06:33 - always go down here
06:36 - and the ones that jump
06:39 - out
06:40 - these are
06:43 - these are the attributes so we're gonna
06:46 - we're gonna look at this
06:48 - so this is all we've done so far and
06:50 - we're going to deal with this so right
06:51 - now the file is open
06:53 - and i can confirm this
06:55 - by
06:59 - file closed
07:00 - and i don't have to pass it parentheses
07:02 - because it's not a method
07:04 - because it is sitting
07:06 - right here closed
07:08 - so
07:09 - is the file closed
07:11 - no false
07:14 - so right now now i'm going to go
07:17 - file close
07:19 - now i call file closed
07:22 - is it closed yes it's true
07:24 - so this is one of the things
07:26 - that is very important
07:32 - when you're managing files
07:34 - once you open them
07:36 - do whatever you want to with them then
07:38 - make sure you close them same thing with
07:40 - databases but we'll deal with that at a
07:42 - later time all right
07:50 - that might be a very good idea with the
07:52 - with the honey and lemon yes
07:54 - uh
07:55 - that thank you that is a very good that
07:57 - is a very good point so all right
08:01 - now
08:03 - so now i'm writing here so we're going
08:04 - to open this up so
08:06 - before
08:08 - i still have my file object
08:11 - and
08:13 - dir on file
08:16 - helps if you get your parentheses going
08:17 - the right way
08:19 - we have
08:20 - write
08:22 - so help
08:25 - file
08:26 - right
08:29 - okay
08:31 - write string to stream
08:34 - hmm
08:35 - stream what is what is the stream
08:39 - it's basically the
08:40 - stream of information that is either
08:42 - going in or coming out
08:44 - from your
08:46 - from your object
08:47 - so if i were to
08:49 - let's leave this back let's get rid of
08:51 - this
08:52 - open this back up
08:54 - and then i go
08:57 - file dot right
08:59 - and i just pass in the text
09:02 - and write string
09:06 - hello
09:11 - oh
09:12 - well here's something interesting
09:14 - what is this
09:16 - well this is the length of the stream
09:19 - that i just put in and we're going to
09:21 - jump into this and we're going to see
09:23 - where all this goes
09:25 - so now we need to close this
09:29 - so we have file
09:31 - close
09:36 - what was the name of our file
09:42 - and let's see where did i put this
09:45 - this is right here
09:49 - so i have hello right here in my text
09:51 - file well that's kind of cool
09:54 - so now
09:57 - now let's do this
09:58 - and i want to show you
10:00 - because there's a problem
10:03 - um well actually why don't we look at
10:05 - reading it
10:06 - so we comment this out
10:08 - file
10:10 - dot open
10:12 - dot
10:14 - i guess i could have just nope you know
10:16 - what we're not doing anymore
10:19 - except under extreme situations will we
10:22 - will we copy so now i don't have to do
10:24 - anything because it defaults to read
10:25 - right
10:26 - okay
10:29 - so now i have my file object and what
10:31 - can i can i read can i read my f
10:33 - can i read
10:35 - let's see if i can do my alphabet read
10:38 - fast read
10:40 - okay
10:42 - i have to read
10:46 - hello
10:47 - okay well that's kind of cool
10:50 - let's get this closed f
10:52 - close
10:55 - um
10:56 - all right
10:58 - f dot
11:01 - right
11:05 - hi
11:06 - how are
11:08 - you
11:10 - now this is going to cause a problem
11:13 - and let's see if anybody has seen or
11:16 - experienced this f dot
11:19 - close
11:25 - all right
11:26 - so we're opening it we're writing to it
11:29 - then let's
11:31 - f dot
11:33 - open
11:36 - i already have a problem
11:39 - not right
11:44 - test
11:46 - underscore one
11:47 - text
11:50 - then print
11:52 - f dot read
12:00 - all right so let's see we open it we
12:02 - write to it we close it we open it we
12:04 - read it we close it all right
12:08 - wait a second
12:10 - so we got a problem
12:13 - where'd our hello go
12:15 - right
12:16 - so this is a problem with w
12:20 - it will overwrite the entire file so
12:22 - basically it is
12:24 - it just opens it and goes ahead and
12:27 - writes
12:27 - wherever it starts and we're going to
12:29 - learn how to look at that see it check
12:32 - it and work around it
12:36 - so that's just one mode
12:38 - or two we just looked at two
12:40 - r
12:41 - and
12:43 - uh w but let's get over here
12:47 - uh do
12:49 - no
12:50 - there
12:51 - all right so let's get with uh help
12:55 - help
12:56 - dot
13:00 - open
13:00 - so how in the world can we solve this
13:03 - because there's got to be there's got to
13:04 - be a way around this
13:06 - and there is don't don't don't
13:09 - so
13:11 - all right
13:14 - every time w is utilized it goes to the
13:18 - top and just starts
13:20 - now
13:23 - a
13:25 - and we know you know we know about
13:26 - appending with our use of
13:28 - list
13:30 - so a
13:31 - opens it up
13:33 - and goes to the end of the file
13:35 - and then begins writing so that's that's
13:38 - what we're going to be utilizing for our
13:41 - for for our shopping list
13:44 - so let's go ahead and get started on
13:45 - that
13:46 - so my
13:49 - def
13:50 - my
13:51 - list
13:52 - we're just going to open it
13:55 - and we're going to go from there and we
13:56 - already know
13:59 - that
14:00 - we need to use oh oh before we get
14:04 - before we get into this
14:06 - so let's look
14:11 - pass
14:17 - this is what's this is this is really
14:18 - cool
14:20 - so all right
14:21 - we have this open and closed and you
14:23 - have to remember and don't forget and
14:24 - it's super important right
14:26 - well guess what
14:28 - python has taken care of this for us
14:30 - with a context manager
14:33 - and it is literally
14:35 - this easy and this simple
14:38 - so with
14:41 - with open so use open
14:45 - what is your file
14:47 - test
14:48 - one
14:50 - dot txt
14:53 - then we are
14:55 - uh writing to it
15:00 - actually let's just read it right now
15:03 - oh
15:04 - and i forgot
15:05 - as
15:06 - f
15:08 - then f
15:10 - print f
15:13 - dot
15:14 - read
15:16 - so this context manager handles all of
15:18 - this for you so you're aliasing this so
15:20 - here's your file object you're going to
15:21 - turn it into this so this is basically
15:24 - the
15:24 - same as this line right here and then
15:27 - also whenever you get done with
15:31 - this
15:32 - go ahead and close it out for us
15:36 - so boom there we are right there so this
15:39 - is the
15:40 - this is one of the things that is very
15:42 - handy and you need to
15:44 - get comfortable with this and we're
15:46 - going to build upon it and we'll go from
15:47 - there but to just understand
15:50 - what it does for now so you can build
15:52 - upon it and uh because you this this is
15:55 - also a wonderful tool and best practice
15:58 - for working with databases
16:00 - so all right
16:02 - you don't need that anymore so let's get
16:04 - this in here so
16:07 - uh let's get this
16:09 - let's get this file up and running
16:14 - so right now
16:16 - let's just let's just figure out how to
16:18 - write to it
16:21 - so width
16:23 - and we're going to call this our
16:24 - shopping list
16:25 - so with uh
16:27 - and we also learned that we're going to
16:29 - be using
16:32 - a
16:33 - we're going to append to it because
16:35 - every time we open this we're going to
16:37 - we're going to want to add to it
16:39 - i just add to it but later we're going
16:40 - to want to be able to delete things but
16:42 - right now
16:43 - we'll deal with that we'll deal with
16:45 - that soon enough
16:46 - so open
16:48 - then
16:50 - shopping
16:52 - list dot txt
16:54 - and i said we were going to use a
16:57 - for append as f
17:00 - actually let's just do file because
17:01 - apparently i have that and i don't want
17:04 - to make a ton of mistakes and drive you
17:06 - guys nuts with the fixing of the typing
17:09 - but i hope everybody has had a good week
17:11 - and if we have anybody joining us right
17:12 - now what we are doing is we are going
17:15 - through and we are we are using the
17:17 - skills that we have so far to date to
17:20 - build us a shopping list and we're
17:22 - sprinkling in some
17:24 - context manager right here with our with
17:27 - then
17:30 - then we are going to be learning how to
17:32 - delete and uh
17:35 - learn how to work with our file object
17:38 - and then we need to air handle then we
17:40 - need to
17:42 - learn about two interesting
17:44 - um methods
17:47 - associated with a file object
17:49 - so all right first we need to
17:53 - have something that tells something to
17:55 - the
17:56 - end user
17:57 - enter
18:00 - item
18:04 - nope
18:05 - we don't want this right now we're going
18:06 - to do
18:08 - uh
18:09 - item
18:11 - equals input
18:13 - because we're taking input from the user
18:15 - enter
18:18 - item we're going to handle that issue
18:20 - next so right now
18:23 - all right
18:26 - so right now we're going to take this
18:27 - item
18:28 - and then we're going to
18:30 - add this
18:31 - add this to our list right
18:35 - so file
18:40 - dot right
18:42 - and then we're going to input
18:45 - item
18:48 - wow
18:49 - all right
18:51 - okay so let's see where we are
18:54 - have i lost anybody everybody good
19:00 - okay
19:02 - oh i just saw you can't you can't be at
19:04 - the office okay
19:09 - all right
19:10 - and i only have one kid on uh azuma
19:13 - eating today so hopefully the um
19:16 - the quality is a little bit better
19:21 - all right so we have a built-in flaw
19:24 - right now and we're gonna we're gonna
19:25 - solve this but
19:27 - i want you to understand the a uh the
19:30 - append and then we'll go from there
19:32 - so we got
19:34 - my
19:36 - my
19:39 - list
19:41 - all right
19:42 - enter item
19:45 - red
19:48 - oh
19:50 - hmm
19:54 - all right let's run this again
19:56 - uh
19:58 - milk
20:00 - well this this is a little
20:03 - tedious
20:04 - so let's just one check and see
20:19 - here hang on a second i just realized
20:23 - uh
20:23 - [Music]
20:26 - all right
20:30 - let's do w
20:32 - first because i just realized i had
20:34 - partial of another item so let's get
20:37 - this spread
20:39 - all right so now we need to change this
20:41 - to a
20:43 - because we'll see all right so milk
20:46 - and then uh eggs i need to run this one
20:49 - more time and we're going to see the
20:51 - problem that we're solving we need to
20:53 - solve two problems
20:54 - eggs
20:55 - because i will tell you right now
21:00 - the user will not ugh
21:04 - what are we doing right here
21:06 - the user
21:07 - went will
21:09 - will not tolerate having to call
21:13 - the the function over and over and over
21:15 - and over again
21:16 - so what tools and skills do we have at
21:19 - our disposal right now first how about
21:21 - we solve this problem right here
21:24 - so
21:25 - like i said
21:28 - a
21:29 - the the append mode
21:32 - it will just go
21:34 - to the append of the file the the end of
21:36 - the file
21:37 - and we'll look and see how to handle
21:38 - this in a minute
21:40 - and
21:42 - it will just continue on from there so
21:44 - what skills do we have in our back
21:46 - pocket to get this to go
21:49 - down a line
22:02 - okay solves problem
22:05 - solves problem one
22:06 - okay
22:10 - so let's get this going so let's check
22:12 - and make sure we got bread
22:16 - then let's run this again
22:18 - and then we got milk
22:20 - all right let's get this up
22:25 - okay
22:26 - bingo
22:27 - ah
22:29 - great question
22:31 - so
22:32 - and this is what i love
22:34 - all right
22:35 - so in python
22:38 - this
22:48 - is a new line
22:50 - let's look at print
22:52 - right here
22:55 - this is the new line this is how python
22:57 - handles new line
23:00 - it is
23:01 - line
23:03 - and i will explain
23:06 - you know i looked at escape characters a
23:08 - little bit ago and i was like no you
23:10 - know what i don't know if we'll get into
23:12 - that
23:13 - so now if i print
23:15 - new line
23:19 - so python already defaults
23:21 - on print
23:24 - at the end to go to a new line so i just
23:27 - told python to
23:29 - assign new line
23:31 - to
23:32 - this so i'm printing
23:35 - new line
23:36 - and
23:37 - python is already putting a new line
23:40 - now while we're here let's just look at
23:42 - this
23:43 - this is tab
23:49 - so python tabs over
24:05 - python tats so you have your new line in
24:07 - your tab
24:08 - and the reason why this
24:10 - because this is an escape character so
24:13 - this is how
24:14 - if you're doing something
24:16 - and python needs to understand because
24:19 - it had to differentiate between in
24:21 - so it got assigned
24:23 - um
24:24 - and how to handle and read this and
24:26 - maybe we'll do a whole lesson on
24:29 - uh
24:31 - escape characters that might be
24:32 - something cool if i'm uh
24:34 - if my voice hangs in there
24:36 - so
24:37 - problem
24:38 - one
24:40 - solved oops
24:42 - apparently i have a couple of these open
24:46 - all right
24:47 - problem one solved but now
24:50 - we need to keep this open
24:53 - repeating
24:54 - and checking
24:56 - for
24:59 - while
25:01 - true
25:07 - oops
25:10 - i can't even remember if it's open or
25:11 - closed
25:12 - bracket
25:14 - okay
25:16 - it's the close bracket so what i did is
25:18 - to put this in a loop
25:22 - i
25:24 - moved everything over so now my list
25:27 - will
25:29 - hopefully close it out
25:32 - my list will stay open
25:34 - so we got what do we have on our list
25:36 - what do we have on our list
25:40 - bread milk let's add
25:42 - let's add uh
25:46 - eggs
25:49 - eggs
25:51 - butter
25:52 - oh shoot
25:54 - we don't have a way to get out do we so
25:57 - caused
25:59 - solved one problem caused another i love
26:02 - it so now let's get out
26:05 - restart shell
26:07 - now let's see what that did to our list
26:10 - oh
26:11 - still there because it still wrote and
26:12 - it was just sitting so now we have to
26:14 - have a way to
26:16 - exit
26:17 - so let's deal with this
26:21 - all right so that always writes
26:25 - so let's come up here
26:28 - so
26:30 - if
26:32 - let me just keep this really really easy
26:35 - if item
26:36 - equals
26:38 - i doubt we'll need
26:40 - all caps exit
26:47 - then
26:49 - all right let me click back over here i
26:50 - haven't seen chat in a while
26:54 - how do we get
26:56 - out of a loop anybody seen that yet i
26:58 - can't remember if we've talked about it
27:00 - so you guys will have to forgive me
27:03 - have we talked anything
27:05 - bingo break
27:09 - and you have continue as well so if
27:11 - you're coming from another language
27:14 - if i were to want to
27:17 - go back up to a certain spot
27:20 - especially like a while loop
27:22 - and not continue down
27:25 - i would just continue back through my
27:27 - loop i would use continue but here
27:30 - oops
27:32 - i want to break
27:34 - out of
27:35 - this
27:37 - and jump out and move on
27:40 - all right
27:43 - let me check my notes here we go here we
27:45 - go
27:47 - so now i have my if
27:50 - now i need my else
27:55 - and boom
27:58 - if else so all right so now let's check
28:00 - this so we got
28:02 - um
28:04 - we got bread
28:05 - now we need uh
28:08 - jelly
28:10 - and what else now we need uh some
28:13 - lettuce
28:14 - okay now i'm gonna exit
28:17 - all right
28:18 - okay we've made
28:21 - we've made some pretty good progress
28:24 - we good so far everybody good
28:28 - how are we going to read this
28:32 - so
28:33 - right now i have this as append
28:36 - i know
28:38 - that i could
28:40 - put a
28:41 - put a read
28:47 - you could do that
28:49 - you you could actually
28:50 - uh
28:53 - how however you'd like
28:55 - if you'd like no
28:57 - no space entered
28:59 - you you could completely uh do however
29:03 - however you'd like it to exit
29:05 - you can exit if you don't want anything
29:07 - in the string if you want to if you want
29:09 - an empty string that works too
29:13 - so
29:14 - we need to learn how to solve
29:18 - how to be able to read
29:20 - and write
29:22 - at the same time and this is like the
29:24 - coolest thing well i think it's the
29:26 - coolest thing ever
29:28 - let's get in help
29:30 - let's get capslock off first help
29:32 - open
29:34 - yes i know it's 122 lines
29:39 - this is literally the neatest thing
29:43 - plus so basically it's
29:46 - this
29:47 - and the other
29:49 - so all i have to do is come up here
29:52 - and add a plus sign
29:54 - and now this is readable and writeable
29:58 - but we got a problem
30:00 - what you'll notice is that every problem
30:02 - we solve
30:03 - creates a new one and we have to deal
30:05 - with it
30:06 - so now i can read and write it
30:10 - i can read and write to it but
30:13 - where does this start
30:18 - so if i want to read
30:21 - now i need to figure out a way
30:24 - to read the file
30:27 - so i'm going to throw in an lf here
30:33 - but
30:34 - let's get out of here
30:37 - now i want to show you the problem first
30:40 - elif
30:42 - uh let's
30:44 - let's do list
30:46 - so if i want if i if they type in
30:49 - list
30:50 - well we need to be consistent
30:53 - sorry guys i just realized that i'm not
30:55 - being consistent with my quotation marks
31:02 - list
31:06 - so then
31:08 - file
31:11 - file dot
31:16 - print
31:17 - file dot read
31:20 - is that going to be right because yeah
31:22 - we're going to have a
31:25 - so we're going to do this so let's and i
31:27 - need to close that out
31:30 - all right this megan did i lose anybody
31:35 - exit thank you
31:38 - all right
31:43 - ah
31:45 - caps lock off
31:47 - item
31:51 - so let's see how i do here
31:54 - all right so
31:56 - right now
31:58 - huh i got i got nothing
32:04 - but i know let's close this i can't
32:07 - remember
32:08 - but i know there's something there right
32:12 - okay i have everything there
32:15 - and
32:16 - let's see if this is still working
32:20 - um
32:21 - let's add uh
32:23 - grapes
32:26 - my kids have been eating a lot of grapes
32:28 - all right so then exit
32:34 - all right so we got
32:37 - we got a little bit of a dilemma here
32:39 - but it's actually quite simple and
32:41 - elegant so there's two things we need to
32:43 - learn about is it file is it showing is
32:45 - it still file
32:47 - awesome okay
32:48 - so
32:49 - f
32:51 - equals open
32:53 - dot
32:57 - shopping
32:58 - list
32:59 - txt
33:03 - all right
33:04 - der
33:05 - on f
33:09 - seek and tell
33:18 - so f dot
33:20 - seek
33:22 - help f dot seek
33:27 - okay cookie change stream position ahaha
33:32 - okay
33:33 - zero start a stream
33:35 - one current stream position offset by a
33:38 - negative and two end of stream offset by
33:42 - unusual negative
33:44 - hmm
33:46 - all right
33:47 - and what does tell do
33:51 - help
33:53 - dot f dot tell
33:57 - returns the current position
34:01 - all right so
34:06 - let's look at something
34:08 - l if
34:12 - so
34:14 - actually
34:17 - let's look at
34:18 - something right
34:22 - here
34:24 - print
34:25 - file dot tell
34:28 - right because it's going to tell us
34:29 - where it is
34:32 - and then
34:37 - let's let's put it right here as well
34:43 - print dot file dot tell
34:46 - this all makes sense in a second
34:54 - 51
35:00 - peanut butter
35:04 - 66
35:07 - huh
35:08 - um
35:10 - potatoes
35:17 - okay wait a second wait a second
35:19 - as i'm moving through my file my current
35:22 - position
35:24 - my current position in the stream the
35:26 - stream of data going into my file is
35:28 - moving down the file so when i want to
35:31 - read this
35:34 - i'm at the end of the file there's
35:35 - nothing to read
35:37 - right so let's exit this
35:40 - so we're gonna let's make sure we have
35:42 - this closed
35:49 - all right
35:50 - so now
35:52 - let's bring this open
35:54 - so f equals
35:57 - f equals
35:59 - open
36:00 - dot
36:02 - shopping list
36:04 - shoppinglist.txt
36:08 - already defaults to read right
36:10 - okay read so then f dot tell
36:16 - zero the beginning of the file
36:20 - so then if i do file
36:22 - dot read
36:26 - i have all of this so if i do print
36:28 - file.i read
36:34 - i do this on purpose
36:36 - so this already read through this once
36:40 - so we can't read through it again
36:41 - because it's sitting down at the bottom
36:43 - so now where's my tell
36:47 - 75 there's nothing more to read but if i
36:51 - come up here and go
36:53 - dot seek
36:55 - what does seek do change my position
36:58 - zero start of stream
37:01 - so if i reset this to zero
37:07 - okay
37:08 - then i go
37:12 - now
37:12 - let's let's look at this for just a
37:14 - second this is the actual string
37:17 - with all of my new line characters i
37:20 - printed it print
37:22 - understands new line
37:24 - formats it very nicely
37:27 - so when we want to read this file
37:30 - we need to change the seek
37:33 - we need to change the tell and we use
37:35 - seek
37:36 - to change tell
37:38 - make sense
37:40 - everybody got that
37:41 - so if i do list
37:44 - i need to go
37:45 - and do
37:49 - so we're going to change this
37:51 - actually let's comment it out so you can
37:53 - go back and look at it
37:55 - so
37:57 - file
37:58 - dot
37:59 - seek
38:01 - back to the
38:02 - beginning save run
38:06 - all right
38:08 - then list
38:10 - boom there i am now i also don't need
38:14 - this either
38:16 - so let's uh
38:18 - let's go exit
38:21 - let's run this
38:25 - list
38:26 - cool so i got
38:28 - i got bread milk eggs butter jelly
38:31 - lettuce grapes peanut butter potatoes
38:33 - and let's add a chicken one more
38:37 - and then let's exit
38:40 - so cool now we're going to verify
38:42 - that everything is functioning and
38:44 - working very cool
38:46 - now
38:47 - okay
38:48 - so we've done
38:50 - we've done a lot of stuff here
38:53 - how's everybody doing with this
38:56 - this seemed to make sense everybody like
38:57 - it
39:02 - all right
39:03 - i think i need to refresh
39:05 - this because
39:06 - it's showing and i'm not seeing any chat
39:12 - all right so
39:18 - okay okay that that's everything all
39:19 - right let's get that off here
39:23 - now we've got to figure out a way to
39:25 - delete an item and this is where it gets
39:30 - this is where it gets fun
39:33 - all right so we've got to figure out a
39:36 - way
39:37 - to remove
39:40 - any opportunities for people to misspell
39:43 - so numbers are a perfect way to do this
39:46 - so we're going to
39:48 - i didn't even check my mic am i coming
39:50 - through loud and clear
39:53 - i usually do that
39:55 - i was a little frazzled today uh of
39:58 - course right before the stream uh my
40:00 - smoke one of my smoke alarms was going
40:02 - off and of course my daughter was
40:05 - laughing because i pulled it out from
40:06 - the ceiling first i tried the battery
40:08 - then then i did the uh
40:10 - then it kept chirping then i unplugged
40:13 - it
40:14 - from this from the ceiling
40:16 - and it kept chirping it was a reference
40:18 - to one of her favorite television shows
40:20 - and she was dying laughing while i was
40:21 - running around trying to get ready and
40:23 - she was supposed to be on her zoom
40:24 - anyway too so all right i digress but if
40:27 - you're just joining us we are working in
40:29 - building a shopping list working with a
40:32 - file context manager how to have a file
40:36 - opened
40:37 - readable and editable because i don't
40:39 - even know is that a word editable able
40:41 - to edit able to read and edit at the
40:44 - exact same time and we are using
40:46 - utilizing the a plus
40:48 - mode
40:50 - append
40:51 - with plus
40:52 - so
40:54 - being able to do both
40:55 - because a opens a file if it already
40:58 - exists
40:59 - and goes to the end of it
41:01 - and then now we just learned
41:04 - how to change the location
41:07 - of basically our cursor in the position
41:09 - of the stream the stream of data to then
41:12 - read the file
41:13 - so now the reason why this works nice
41:16 - and neat is it goes once you read it
41:19 - goes to the end of the file you can
41:20 - continue editing
41:21 - so let's just jump back to where we are
41:25 - so now
41:27 - now we have
41:28 - another dilemma
41:31 - so
41:32 - what we need to do is while
41:35 - in the midst of
41:37 - and pull this over because we're going
41:38 - to have lots of stuff right here
41:41 - so
41:42 - i'm going to save you guys a little bit
41:44 - of pain and i'll just show you
41:46 - i'll give you give you a little a little
41:48 - bit but but not a lot
41:51 - so we need to know how to
41:56 - get rid of one so we need to wrap this
41:58 - up
41:59 - and what skills we have so far is we
42:02 - know how to link
42:04 - to display a number and a list
42:06 - so right now
42:08 - why don't we take our file
42:11 - throw it into a
42:14 - throw it into a list
42:16 - wrap it up
42:18 - and then um
42:20 - enumerate with it
42:22 - so items oops
42:25 - items
42:26 - equals list
42:28 - enumerate
42:32 - file.read now check this out this was so
42:34 - cool
42:36 - all right so then we want to split it
42:38 - oops now that split
42:40 - and
42:41 - how does split work anybody remember
42:45 - everybody remember how split works
42:50 - so that was the one is for enumerate
42:53 - because people are not going to tolerate
42:54 - you
42:55 - we know zero indexing the end user does
42:59 - not care they want to know item one
43:02 - they're not going to go item zero why is
43:03 - it on item zero so we're gonna enumerate
43:06 - we're gonna start at item one
43:08 - all right
43:11 - let's see let's see let's see
43:15 - all right
43:17 - so then now oops i did not wrap list up
43:20 - so the reason why we're wrapping this in
43:22 - list is because you're you just created
43:24 - a enumerator
43:26 - object and then we want to put these
43:28 - into a list to build our tuples
43:32 - all right we did touch on
43:36 - a numerate i believe one time before
43:40 - i think i saw a comment coming through
43:47 - splits a string using the identifier uh
43:50 - identifier you mean delimiter
43:54 - because right now split is going to
43:56 - split on the white space
44:00 - any sort of any new line any tab any
44:03 - space
44:04 - so it's going to automatically go and
44:06 - read read each each item and split that
44:09 - out
44:10 - cool
44:12 - i
44:14 - i misspeak all the time i just i will
44:17 - always just
44:18 - yes no you no you're
44:20 - you're absolutely correct it will split
44:22 - on the delimiter delimiter is a weird
44:24 - word i get it
44:25 - i don't i don't blame anybody for not
44:28 - choosing uh the right word if if the
44:31 - whole thought process is correct it's
44:34 - the same thing you know what you meant
44:38 - no you're absolutely fine
44:39 - i knew what you meant it's just uh the
44:42 - how to identify where to split it i knew
44:45 - which i knew exactly what you meant i
44:46 - just wanted to make sure
44:47 - i just wanted to make sure that uh we
44:49 - were talking about the same thing no
44:50 - that was great
44:53 - so now we got to get this
44:55 - out printed
44:57 - then take more input from the user to
44:59 - get it out of the list
45:01 - and then be able to
45:03 - ensure
45:05 - where the placement is because this gets
45:08 - this gets fun
45:10 - pretty quickly
45:12 - so now now we need to look and get this
45:15 - printed much much more
45:17 - neatly
45:19 - so count so we're going to split our
45:21 - we're going to iterate through our items
45:23 - which is now a list of tuples
45:25 - so
45:26 - count
45:28 - item
45:30 - and
45:30 - items
45:32 - and print
45:35 - f
45:37 - and
45:37 - bracket
45:40 - count
45:41 - and we're going to give this three
45:42 - spaces
45:48 - uh what's in there
45:51 - oh that's what i was doing to really
45:53 - make this clear
45:55 - and then item
45:58 - so what i'm doing here is
46:04 - so now let's
46:07 - let's get this going
46:09 - uh list
46:13 - and
46:20 - ah
46:21 - this needs to be indented
46:26 - there we go
46:31 - all right
46:33 - let me see
46:37 - why this isn't working so we're
46:39 - splitting our line
46:41 - and we're going through
46:42 - file.read.split.one
46:46 - [Music]
46:49 - for count and item
46:52 - items
46:55 - that should have
46:56 - enumerated
47:04 - okay this
47:12 - all right
47:17 - and let me check
47:23 - this right here what is the difference
47:26 - between these two
47:31 - let me uncomment this and figure out
47:39 - oh
47:40 - aha
47:42 - so this needs to be
47:44 - because i'm already reading the file
47:46 - there we go
47:49 - okay
47:50 - so now oh
47:52 - now we got a problem check this out
47:54 - there's a new problem right
47:58 - i forgot about this
47:59 - this one so what just happened
48:05 - should be count
48:22 - oh no i only have one parentheses here
48:25 - i only have
48:26 - so
48:27 - here look i just have this output to
48:31 - kind of get the attention
48:32 - of
48:34 - it's it's something that i did a long
48:36 - time ago i used to do a dot
48:39 - and then uh somebody showed me a nice
48:41 - little parenthesis to just have this sit
48:44 - here at the end to just kind of clean it
48:45 - up and have your have your eyes jump to
48:47 - it so i have this space three
48:50 - and going through now i could do a
48:52 - parenthesis over here but it just looks
48:54 - too busy i just like this nice clean
48:57 - structure of that one little parenthesis
49:00 - to go hey here's your place in your list
49:02 - here's your number on the list so we can
49:04 - have a point of reference
49:06 - now
49:07 - here's this dilemma
49:09 - i just called list
49:11 - and it put list
49:13 - in the list but i don't want that so we
49:16 - need to
49:18 - figure out how to solve this
49:23 - we'll deal with that in a minute because
49:24 - i think that's further down
49:26 - but
49:27 - we have got so we have
49:30 - we have that going
49:32 - and we have this printing so now we've
49:34 - got to figure out how to remove
49:39 - how to remove
49:42 - remove equals int
49:45 - input
49:47 - then
49:49 - enter
49:51 - number
49:53 - to
49:55 - delete
49:59 - now
50:00 - for the sake of uh
50:02 - for the sake of saving a little bit of
50:04 - time
50:05 - now
50:07 - just like we learned that when we got
50:09 - into entering our list
50:12 - we got into that and it was just going
50:15 - over and over and over and over again so
50:18 - we need to figure and plan for a way to
50:20 - get out of our deletion right
50:23 - so
50:25 - enter number do to delete
50:27 - or
50:28 - 0
50:30 - to
50:31 - continue
50:35 - and i'm already
50:38 - mixing and matching
50:45 - all right so and i don't think i have
50:47 - enough parentheses
50:51 - there we go
50:52 - all right so that's
50:55 - that's we're taking the input if
50:58 - remove
50:59 - equals zero
51:03 - break
51:04 - jump out
51:07 - jump out and uh
51:09 - continue on
51:10 - oops
51:12 - that's for next step sorry
51:14 - i didn't do that
51:20 - continue
51:23 - sorry i've ruined
51:25 - ruined our
51:26 - edition because i realized only
51:29 - about a year after this i
51:31 - had a bug that i didn't even know
51:33 - so continue
51:37 - because you always have to be prepared
51:40 - for the user
51:44 - just just to
51:46 - have areas of
51:48 - possibilities of mistakes
51:50 - so then else
51:52 - is where it gets fine
51:54 - all right
51:57 - so we're going to delete
51:59 - items
52:01 - i'm going to remove
52:07 - minus one
52:11 - then
52:12 - now here's where it gets fun
52:14 - okay
52:15 - are you
52:16 - ready uh we're going to do another
52:19 - context manager
52:25 - because this is how
52:26 - we're going to handle
52:37 - where to go
52:41 - item dot
52:46 - as
52:49 - as file
52:51 - and for
52:54 - item
52:55 - in
52:56 - items
52:57 - because that variable is still currently
53:00 - working
53:01 - file.right
53:06 - then item
53:10 - one
53:18 - then we need to
53:19 - add so what we're doing is we're going
53:21 - and deleting the item but then we need
53:22 - to because each item has a return put at
53:25 - the end of it right
53:27 - so then now we need to add
53:31 - the return back
53:35 - all right
53:36 - so let's
53:38 - let's see if i have everything here
53:40 - because now we're going to have a new
53:42 - error
53:44 - we solved a problem
53:46 - we solved another one of them but
53:50 - we have not airproofed this
53:53 - to have let's just jump into it
53:56 - so list
53:57 - and i need to click over
53:59 - list
54:01 - all right
54:06 - all right any questions right now
54:12 - [Applause]
54:14 - all right
54:29 - now
54:30 - we need to solve
54:33 - so let's get
54:35 - zero to continue
54:37 - list
54:39 - then i want to delete
54:41 - one
54:43 - then list
54:44 - so it didn't quite go through so let's
54:48 - let's look and see
54:50 - where i am
54:51 - and
54:52 - what the
54:54 - issue is
54:56 - all right so now i need to bring in
55:00 - we need
55:01 - we need one more little tidbit right
55:03 - here because right now we got inner item
55:06 - and they don't know what they don't know
55:08 - about list
55:10 - they don't really know what to do
55:12 - so we need we need to handle something
55:15 - right here
55:16 - so please
55:19 - print
55:22 - and we're going to do this type
55:25 - anytime
55:30 - exit
55:33 - to quit
55:35 - and list
55:39 - to read
55:43 - read and
55:45 - delete
55:48 - and then
55:49 - one two three
55:51 - close this out
55:54 - all right
55:56 - so here we are oh at any time press exit
55:59 - to quit or list
56:03 - all right
56:05 - let's see where
56:08 - where i am
56:13 - seek zero
56:16 - all right
56:21 - all right
56:23 - because now
56:35 - oops
56:41 - so let's see where i am
56:50 - list
56:54 - apparently i cannot remember the bug to
56:56 - get this off the list right now
57:00 - so i'll need to work on that
57:02 - but
57:03 - if i were to hit zero here hit
57:07 - hit uh oh i think i got a comment
57:09 - shopping list is missing a g
57:16 - sharpening this is missing a g
57:18 - ooh uh
57:23 - what line
57:25 - all right
57:27 - okay uh let's go and solve this because
57:30 - um
57:31 - my voice is
57:33 - very very uncomfortable so
57:36 - it was you fixed it okay all right cool
57:39 - now
57:40 - so we need to
57:42 - have an issue
57:44 - of
57:45 - right here how to delete
57:48 - and solve this dilemma because right now
57:51 - uh i thought i'd tested this multi time
57:54 - so i need to when we get done we will
57:57 - wrap up our uh we'll wrap this fix up
58:01 - this
58:02 - this issue right here and i remember
58:04 - having it vaguely and
58:06 - all the tests i did this morning but all
58:08 - right we need to handle we need to have
58:10 - a try and accept right here
58:13 - and it needs to go
58:23 - all right
58:24 - so it needs to go
58:27 - right here so
58:29 - this is where so while
58:32 - while true
58:37 - while true
58:39 - try
58:41 - so what i'm doing
58:44 - now i want you to think about this
58:47 - control bracket
58:48 - control bracket so the reason why i had
58:50 - it indent twice is because i gave two
58:52 - headers
58:53 - now
58:56 - this actually needs to be
58:58 - down here so we'll
59:01 - copy
59:03 - and the reason why it goes down here
59:06 - because the reason so let let's look at
59:08 - this
59:10 - let's bring this here so we can see it
59:12 - so the reason why this is failing
59:15 - is this fails
59:19 - once you hit enter
59:21 - and you want to have your try block
59:24 - wherever the possible failures are
59:26 - and the reason why
59:29 - you want to be in here you want this to
59:32 - be going over and over and over again
59:34 - that
59:37 - and then if that is a zero they jump out
59:40 - of here and come back up to here
59:42 - does that make sense because
59:44 - you want this loop
59:46 - to come through and give them the error
59:48 - and then send them back up here and have
59:50 - the opportunity hey did you mean
59:53 - did you mean to hit zero do you still
59:55 - want to delete or do you want to go on
59:58 - and continue
59:59 - on the list all right
60:02 - so let's do this
60:05 - okay so now i get boom boom boom boom
60:09 - there we go and i'm in alignment with my
60:11 - try and i have a value error so i'm
60:14 - going to do accept
60:19 - accept
60:22 - value
60:23 - error so the value v and the e
60:27 - our
60:30 - our r
60:32 - are capitalized so then
60:37 - print
60:39 - what did i say because i think i think i
60:41 - came up with something very handy
60:46 - if you
60:48 - don't
60:50 - want to
60:54 - delete please
60:59 - enter 0.
61:01 - now
61:02 - i want you to think about this
61:04 - i'm doing a horrible job with my
61:05 - quotation marks today
61:07 - oh that was why that one is is because
61:11 - i have you know what let's look at an
61:13 - escape character
61:16 - so while we're talking about escape
61:18 - characters
61:33 - so if i hit
61:35 - list
61:37 - and then
61:44 - and then i'm up here
61:48 - to remember to delete
61:54 - so then now
61:58 - now this needs to be changed to
62:01 - break
62:03 - because i'm inside this loop i need to
62:06 - come back up to this loop
62:14 - so then boom i'm back up to be able to
62:17 - then
62:18 - add and edit
62:20 - and
62:21 - i will
62:23 - so we're about we're just a little over
62:25 - an hour by like a minute so an hour so
62:27 - yeah guys i really thought my
62:30 - voice would be rested and i will use
62:31 - some tea and honey but actually before
62:34 - we go
62:35 - i realized that we had a dilemma
62:39 - last time
62:41 - and
62:42 - it alluded me
62:45 - to y
62:47 - so there's my list
62:49 - and i know it's on the tip of my tongue
62:53 - on the tip of my fingers so all right
62:56 - this is how you handle so i was talking
62:57 - about no spaces between files this is
63:00 - how you handle
63:02 - um
63:03 - spaces between files you'd put it in
63:06 - quotation marks so it's free
63:09 - code
63:11 - camp
63:12 - dot
63:13 - py
63:15 - so then it runs oops
63:17 - why not right inside this
63:21 - i just did this the other day
63:24 - pre-code python
63:35 - well i'm just not doing a very good job
63:37 - today
63:38 - i just did this earlier today so i guess
63:41 - i have two things to clean up
63:43 - for uh for now next week sorry exit
63:47 - and that's also why you don't do
63:49 - lowercase exit
63:51 - so that's another keyword that python
63:53 - has
63:55 - but yes this is a great exercise and
63:57 - like i said oops and then continue on
64:00 - and then
64:02 - exit
64:04 - so just a very little
64:06 - handy
64:07 - experiment where you can learn about all
64:10 - these file objects and modes
64:13 - and workflow because this is a
64:15 - phenomenal one where you then have this
64:17 - problem and you have to go through and
64:19 - the reason why this works is because i'm
64:21 - escaping out from this
64:25 - i'm saying hey
64:27 - when i get rid of this
64:29 - it's stopping the string right here but
64:31 - now i'm escaping out of it and saying no
64:34 - i literally want this quotation mark
64:36 - right here i want that to stay because i
64:38 - have these two so i think that's what i
64:41 - was thinking today
64:43 - sorry guys
64:44 - um as always i really enjoy these
64:47 - streams i really enjoy the interaction i
64:50 - have a good time
64:51 - thanks for spending your time with me
64:53 - you guys could go
64:54 - anywhere i want to thank bo and quincy
64:56 - for this wonderful opportunity to get to
64:59 - share my knowledge and experience
65:01 - because i really truly love
65:02 - python very much i've been studying it
65:05 - for
65:06 - uh
65:07 - seven years now i guess i just passed
65:09 - seven years and i just truly enjoy
65:11 - sharing this and um the things that i've
65:13 - had to fight through and learn
65:16 - and even as you can see right here got a
65:18 - got a bug that i could have sworn had it
65:21 - solved and then then another one so i'll
65:23 - make notes uh oh and we need to uh we're
65:26 - going to work on pointers and
65:28 - is and um id and all of those things uh
65:33 - next week
65:34 - so like you hear on my other channel
65:37 - always guys please leave any comments
65:39 - questions video requests uh i've gotten
65:42 - into a pretty good habit of not closing
65:44 - this out all this all this is going to
65:46 - be on github
65:48 - you can go and check that out and delete
65:50 - it and we will
65:54 - well i really hope you guys get
65:56 - something out of this because i truly
65:58 - love teaching and love i'm constantly
66:01 - learning the stuff that i'm working the
66:03 - stuff that i'm working on i'm always
66:04 - finding a newer and better way to do it
66:07 - because about a year ago like i said
66:10 - had a young young man i was showing and
66:13 - he said well how do we handle this if
66:14 - they if they don't enter anything i said
66:17 - that's a great question so we had to
66:19 - change the whole workflow
66:21 - but you have the tools to do it so as
66:24 - always guys
66:25 - thanks for watching and we will see you
66:27 - guys next week
66:29 - alright bye