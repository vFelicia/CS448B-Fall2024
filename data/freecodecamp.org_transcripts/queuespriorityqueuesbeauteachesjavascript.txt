00:00 - the q data structure is a way to hold
00:02 - data it's similar to a stack while a
00:05 - stack is first in last out a queue is
00:08 - first in first out
00:11 - an example in real life is when you were
00:12 - waiting in line to buy something at a
00:14 - store the first person to get in the
00:16 - line is the first person to get to the
00:17 - cash register
00:18 - another example is a print queue when a
00:20 - lot of people are printing documents at
00:22 - the same printer the documents are
00:24 - printed in the order they were sent to
00:26 - the print queue in javascript just like
00:28 - a stack you can implement a cue with
00:30 - just an array if you want to limit an
00:32 - array to just the traditional q methods
00:34 - you must create it yourself let me show
00:36 - you one such implementation so we have
00:39 - the queue right here and we're going to
00:41 - have a collection that's going to
00:42 - collect all the items in the queue and
00:44 - this is just kind of a helper function
00:46 - to
00:47 - print or to console.log the collection
00:50 - and here are the main main methods of a
00:52 - queue we have enqueue which is going to
00:55 - push
00:56 - the first item onto the queue
00:58 - and then we have dq which is going to
01:01 - take an item off the queue
01:03 - so there's two ways to do it with an
01:05 - array items can go into the array at the
01:08 - beginning of the array or items can go
01:10 - in the array at the end of the array in
01:13 - this implementation items are going into
01:16 - the array at the end of the array
01:18 - and then they come off of the array at
01:21 - the beginning of the array to put an
01:23 - item onto the queue we're just going to
01:25 - push
01:26 - that item that element onto the queue
01:29 - then to dq we're going to use um the
01:33 - array.shift dot shift just pulls off the
01:37 - first item of the array it removes the
01:39 - first item of the array and returns it
01:41 - another q method is front this is just
01:43 - going to return what item is at the
01:46 - front of the array without removing the
01:48 - item off of the array so we're just
01:50 - going to do collection
01:52 - just going to return what items at the
01:54 - at the zero index of the correct
01:57 - collection array
01:58 - and size we just try to figure out the
02:00 - size of the queue pretty straightforward
02:03 - just collection.length and then is empty
02:06 - check if it's empty uh if there's no
02:08 - items on the queue
02:10 - so let's see how that was going to work
02:12 - down here
02:14 - i'm just going to uncomment that
02:16 - and run the code
02:17 - so
02:18 - we enqueue we created a new queue then
02:21 - we and we enqueued abc so the line the
02:24 - end of the line is the end of the array
02:27 - the beginning of the line is the
02:28 - beginning of the array
02:30 - so it's going to print a b c here
02:33 - and then dq means that the the item at
02:36 - the beginning of the array is going to
02:38 - be removed so the a is going to be
02:42 - removed and then we're going to do um q
02:44 - dot front which i forgot to put the
02:47 - console.log
02:48 - here if i run that again you'll see that
02:51 - it's going to check what what elements
02:54 - at the front of the array which is b and
02:56 - they're going to print the array again
02:58 - it's just going to be b and c because we
02:59 - dequeued a another way to create a cue
03:02 - is a priority queue
03:04 - in a priority queue not only do you pass
03:07 - the element into the queue you also pass
03:10 - the priority of the element so if all
03:14 - the priorities are the same number it's
03:17 - going to behave just like a normal cue
03:19 - but when you pass in elements at
03:21 - different priorities the elements that
03:23 - are passed in with a higher priority are
03:25 - sent to the beginning of the queue so
03:28 - all elements with priority five are
03:31 - ahead of elements with priority four but
03:34 - if elements have the same priority it
03:36 - just behaves like a normal queue so let
03:38 - me explain how the priority queue works
03:40 - first let me show you an example of this
03:43 - code down here where we're using the
03:45 - priority queue so we're going to create
03:47 - the priority queue and then we're going
03:48 - to enqueue something
03:51 - and so we're going to pass in an array
03:53 - the first element in the array is the
03:56 - item we want to put on to the priority
03:59 - queue the second thing in the array is
04:02 - the priority so you can see i'm not
04:05 - pushing them on in the same order two
04:08 - three
04:08 - one
04:09 - but if i run this when we the print the
04:13 - collection it's going to print in the
04:16 - order of the priority and just to show
04:18 - another example let me add an item with
04:20 - the same priority as an item we already
04:22 - have
04:25 - and if i run that
04:27 - you can see
04:28 - these two items have the same priority
04:30 - so they're in the queue in the order
04:32 - that they were pushed on to the queue so
04:35 - everything's the same on a priority
04:38 - queue except the enqueue function so in
04:42 - the nq function first we're going to
04:44 - check if the queue is empty if it's
04:46 - empty you're just going to push on the
04:48 - element but if it's not empty you're
04:50 - going to have to check the priorities to
04:52 - see where to put the element on so we're
04:55 - going to create a variable just to check
04:57 - whether we've added the item to the
04:59 - queue or not and it's false it starts at
05:01 - false and now we're going to have to run
05:03 - through each element in the the
05:06 - collection or the queue to check what
05:08 - the priorities are so we have this for
05:10 - loop that's going to run through each
05:12 - item in the collection and we're going
05:13 - to check is the element at index 1
05:16 - remember the element that we pass into
05:18 - the queue is an array index 0 is the
05:21 - item you want to put into the queue and
05:23 - index one is the priority so is the
05:26 - priority of the element we're passing
05:28 - into the queue
05:29 - less than the priority of the item in
05:33 - the collection that we're checking and
05:35 - see we're using this i from the for loop
05:38 - we're gonna go through and check every
05:39 - item in the collection and we're gonna
05:40 - check the index one which is the
05:42 - priority of that item and then if the
05:45 - priority is less than the item we're
05:48 - going to add that item or the element to
05:52 - the collection array that's what this
05:54 - splice is doing and then we're going to
05:56 - say add it equals true we're going to
05:58 - break out of the the loop here
06:00 - and then we're going to be done except
06:03 - if the element hasn't been added we are
06:06 - going to then push the element to the
06:08 - array and the only thing that's slightly
06:10 - different is this dq method and this the
06:12 - way i did is kind of optional you could
06:14 - return the entire
06:16 - element with the item and the priority
06:19 - or you can do what i did where i just um
06:22 - return the the item without the priority
06:25 - here that's just index zero of this
06:27 - value which is the item that we got off
06:30 - the beginning of the array well those
06:32 - are cues and priority queues thanks for
06:34 - watching don't forget to subscribe and
06:37 - remember use your code for good