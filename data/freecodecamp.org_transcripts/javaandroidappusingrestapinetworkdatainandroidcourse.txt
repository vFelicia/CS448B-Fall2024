00:00 - hi in this video we're going to talk
00:01 - about network data and how it works in
00:04 - android and then i'll prepare you for a
00:06 - tutorial that's to follow
00:07 - [Music]
00:15 - so there are three things that we're
00:16 - going to examine in this video we're
00:17 - going to talk about what a rest api is
00:20 - then we're going to talk about how to
00:21 - program what's called asynchronous code
00:24 - and then finally we'll talk about the
00:25 - volley library
00:27 - so rest api is a term that you'll see in
00:30 - programming languages everywhere it's
00:33 - really about clients and servers the api
00:36 - stands for something called an
00:38 - application program interface and really
00:41 - in plain english it means that there's a
00:43 - server somewhere that's providing data
00:45 - to the client so that way you have
00:47 - either phones computers or watches or
00:50 - something out there that is relying on a
00:53 - service on the internet
00:55 - in the following videos we're going to
00:56 - create a tutorial in android using a
00:58 - rest api from the service called
01:01 - metaweather.com
01:03 - and so we're going to have a service
01:05 - that looks like this where it provides
01:06 - you with a weekly forecast and it will
01:09 - be up to us to design the user interface
01:12 - so that that data comes out and looks
01:13 - good
01:15 - so a rest api is a service that lets you
01:18 - look at specific urls such as the
01:21 - address that you see listed here and
01:24 - instead of responding with an html page
01:26 - a web page you get a back a a pure data
01:29 - form so it looks something like this
01:31 - here where it says london city and an id
01:33 - number so rest apis and microservices
01:36 - are two terms that often appear together
01:38 - so sometimes a development team will
01:40 - break up an application into pieces into
01:43 - micro pieces you might say and they use
01:45 - apis to talk between those pieces so a
01:48 - server can usually be split up into
01:51 - tasks so this is a traditional model you
01:53 - might see so we have at the bottom we
01:55 - have a database we have a data interface
01:57 - we have a business logic and then the
01:59 - user interface a multi-tiered approach
02:02 - well in microservices you might say well
02:04 - that one data interface is actually
02:07 - could be split up into multiple pieces
02:09 - and we'll call them microservices
02:10 - microservices can talk directly to the
02:13 - user interface or they might provide
02:15 - data to other microservices so that way
02:17 - you can have a modular approach to
02:19 - building your program the link between
02:22 - those is the api so the text messages
02:24 - that are traded between clients and
02:26 - servers are usually done in two
02:28 - different languages one is json and the
02:31 - other is xml there are others but those
02:34 - are the two most common so this is what
02:36 - json data looks like you can see that
02:38 - this is a weather report and you can
02:41 - also see that it is very easily
02:43 - understood when you look at it tells you
02:45 - what the id number is the type of
02:48 - weather that's for the day you can see
02:49 - the minimum temperatures the maximums
02:52 - it's pretty much readable as a human
02:54 - would be able to see it but you can also
02:56 - see that there are
02:57 - specific quotations and colons and so
03:00 - it's a very data
03:02 - delimited piece of text now the same
03:05 - data could have been created in an xml
03:07 - format and so the xml format looks a
03:10 - little bit like
03:11 - you just expect a web page it's a
03:13 - hypertext it's got these brackets and an
03:15 - open and enclosed tag
03:17 - and so they're not exactly doing the
03:19 - exact same process xml has a little bit
03:22 - more functions to it
03:24 - and it's not as popular either so most
03:26 - people are working on the left side here
03:28 - with json data in their apis
03:31 - so json stands for javascript object
03:33 - notation and it can be configured to
03:36 - send messages in not just json formats
03:39 - apis can be in others but usually json
03:42 - is the type of data that you would
03:44 - expect to see it's really common
03:46 - and despite its name json is not limited
03:49 - to javascript so json can be used in
03:52 - many different programming languages
03:54 - so if rest is associated with json then
03:57 - the terminology soap is usually
04:00 - associated with xml so soap stands for
04:02 - simple object access protocol it it's
04:05 - very similar to rest but you can only
04:07 - see xml data when it comes to soap so
04:09 - you could see json being used with rest
04:12 - and
04:13 - xml being used with soap
04:15 - but they're both pretty much producing
04:18 - the same results here they're both
04:19 - trying to communicate text messages to a
04:21 - client
04:23 - so let's talk a minute about the client
04:25 - and the server so the client's job is
04:27 - usually the one that says i will
04:29 - initiate the request i will ask for some
04:31 - data and the results will be sent back
04:34 - into the the format that the client can
04:36 - understand so we're going to follow this
04:38 - video with a tutorial that will show you
04:40 - how to use the client for android so
04:43 - your client could be a phone it could be
04:45 - a desktop it could be a watch it could
04:47 - be another server but the client and
04:49 - server is just kind of a generic way to
04:51 - think about it so that we will use a
04:53 - phone here in our example but in other
04:55 - cases we could just as easily have
04:57 - programmed this as a web page so what
05:00 - does an api look like
05:02 - so the rest service usually have some
05:04 - kind of an end point that provides
05:06 - access to the client so in this example
05:09 - we have a url from the website
05:12 - metaweather.com api location and then a
05:15 - location number and then what follows
05:17 - from that is the weather report for that
05:19 - specific id number which happens to be
05:21 - the city of london and so in a
05:24 - traditional web page you would at the
05:26 - green part of the stack of items you
05:28 - would have said this is the web page in
05:31 - a
05:31 - rest service we would say the url
05:34 - endpoint is not a web page it's just
05:36 - pure text and then the client is
05:38 - responsible to format that text into the
05:40 - proper user interface
05:42 - so how much work does it take to create
05:44 - a back end
05:45 - does it have to be written in android is
05:48 - have to be written in java what's the
05:49 - language well the truth is it doesn't
05:51 - matter what the language is and server
05:54 - applications can be written in php
05:56 - c-sharp they could be written in java
05:58 - node they could be written in ruby
06:00 - python
06:01 - pretty much any language that can create
06:03 - text files and call and communicate with
06:06 - a network is going to be eligible to
06:08 - make rest services
06:10 - so the middle part here in the business
06:12 - logic can be any language that you
06:14 - choose it's pretty much irrelevant and
06:17 - so your team sometimes are split up as a
06:19 - back-end developer and a front-end
06:21 - developer and that's thanks to the
06:22 - ability to create these apis that can
06:25 - bridge the gap between the front and the
06:27 - back end
06:28 - now since there is such a nice standard
06:30 - with json you can format the data to be
06:33 - output no matter what language that
06:35 - you're working with and so we have no
06:37 - idea what metaweather.com used as their
06:40 - backend whether it was java c-sharp or
06:43 - something else
06:46 - now think about the amount of effort so
06:48 - the ui the user interface in the front
06:50 - end approximately takes about half of
06:52 - the amount of effort that it would take
06:54 - in the back end of course that
06:56 - determines that's determined by the
06:58 - complexity of your application sometimes
07:00 - the back end is really the secret sauce
07:02 - of an app and that's what would take the
07:03 - majority of the time
07:05 - so if you're interested in learning how
07:07 - to create the back end i have other
07:08 - tutorials classes on php classes on java
07:12 - classes on c sharp and all of those
07:14 - using their frameworks and their full
07:17 - stack will allow you to see how to
07:19 - create the database and then the urls
07:22 - that are providing these services to you
07:25 - but for the sake that's going to follow
07:27 - here we're going to create an android
07:29 - application that is going to use a
07:31 - pre-existing
07:33 - free open source api so we will only do
07:36 - half the work really for this weather
07:38 - app
07:39 - another feature that you're going to see
07:41 - in this application tutorial is that
07:43 - there is the idea of asynchronous code
07:47 - now in most examples of coding you're
07:49 - probably used to seeing synchronous code
07:52 - that means
07:53 - one line follows the other you can trace
07:56 - through exactly the order of statements
07:58 - in a program however with callbacks or
08:02 - asynchronous code we have an external
08:06 - process going on and that's why in
08:08 - network programming here the idea of
08:11 - asynchronous or callbacks is going to be
08:13 - super important so let's take an example
08:16 - here so i have some code in this gray
08:18 - box and its function says
08:20 - get me some data
08:22 - and it says i want to go to a website a
08:25 - url an api let's say and i want to get
08:28 - some user data so it looks like we're
08:30 - looking for user number 99
08:33 - now that's going to take some time
08:34 - because of the network traffic and it's
08:36 - kind of could be on the other side of
08:38 - the world it might take the couple of
08:39 - seconds for that response to happen and
08:42 - so we're not going to sit around and
08:43 - wait for it we're going to jump right
08:45 - into the next item in the in the program
08:48 - so we're going to continue running
08:50 - that's the synchronous mode and we're
08:52 - going to just forget about our network
08:53 - request and let him catch up later now
08:56 - that catch-up later process is called
08:58 - the callback
09:00 - and so when the process is done there
09:02 - will be an alert sent to your
09:03 - application that says hey data's arrived
09:06 - and what do you want to do with it so
09:08 - the callback function will have a
09:09 - parameter
09:10 - like a list or some kind of a string or
09:13 - something and that will say hey i got
09:15 - the data back from the server and now in
09:17 - this green or in the sorry in this red
09:19 - processing box here you can go ahead and
09:22 - process process that data it means you
09:24 - can save it to the database or display
09:26 - it to the user or whatever your choice
09:28 - is but the callback is going to occur at
09:31 - some later time and we're not sure if
09:33 - it's going to be a millisecond later or
09:35 - a minute later but it will be a delay
09:37 - so let's take a look at actually some of
09:39 - the code that we're going to develop
09:40 - here so we are going to define a
09:42 - callback function and it will run after
09:45 - a set of data has successfully been
09:47 - retrieved from an online service and so
09:50 - here's what it's going to look like
09:51 - we're going to have a button click for
09:53 - get weather by name
09:56 - and we are going to call this a service
09:58 - called the weather service
10:00 - and it's going to get the forecast so
10:02 - it's some function and it's an
10:04 - asynchronous function so following that
10:06 - we're going to have two options so when
10:09 - this is done we are going to have a on
10:12 - error that's a possibility that nothing
10:14 - came back or it was badly formatted or
10:17 - we're going to have a response and you
10:19 - can see in the response that i am
10:21 - updating an arrayadapter so i'm showing
10:23 - a list on my ui so this is the actual
10:26 - java code that we're going to be coding
10:27 - in a tutorial in the next video
10:30 - so this asynchronous process is going to
10:33 - help us with what's called
10:35 - non-blocking code
10:37 - so non-blocking code is to allow other
10:40 - tasks in an application to continue
10:43 - running
10:44 - and not block up the user interface so
10:47 - you can see in the example in this
10:49 - timeline here that we in the first
10:51 - example would be a synchronous execution
10:54 - so we stop all processing and wait for
10:57 - our response however in the second
10:59 - example below you can see that we are
11:01 - going to
11:03 - start the external process the network
11:05 - request but then we're going to go on
11:07 - and do other things we're going to keep
11:09 - processing the threads you might say
11:12 - and uh we're gonna have things going in
11:14 - parallel and so it'll prevent the
11:17 - application from freezing up so the
11:20 - first process will continue executing
11:22 - and then the other code will work in the
11:24 - background
11:26 - in android and in all applications the
11:28 - user interface thread is important not
11:31 - to block
11:32 - so we have a task list here you can see
11:35 - i've got four applications running on my
11:37 - application we don't want them to stop
11:40 - there is a literal loop or a looper they
11:43 - call it an infinite loop a while loop
11:45 - that continually checks on each task and
11:49 - gives each task a little bit of
11:50 - processing power so it's the scheduler
11:52 - in the operating system now if we were
11:55 - to stop one of those tasks and it had to
11:58 - sit and wait for a response
12:00 - then your whole phone will freeze and
12:03 - it'll appear like your application is
12:05 - dead you might get an application alert
12:07 - that says the process isn't responding
12:09 - what do you want to do close the app you
12:11 - might want to
12:12 - and if the user does that then you'll
12:14 - probably never come back to your app
12:15 - they'll call it a buggy app and you
12:17 - don't want that to happen so in instead
12:19 - what we're going to do is we're going to
12:21 - use this interface thread
12:23 - which is responsible to keep the user
12:26 - interface running we're not going to
12:27 - mess that up instead we're going to
12:29 - offload this to a background task and
12:32 - we'll let that handle the retrieval of
12:34 - network information and that way the
12:36 - looper can continue to go on and the
12:39 - user can continue to choose menus and
12:41 - buttons
12:42 - and just wait for the weather to get
12:44 - updated in the uh in the second app
12:46 - now to do all this network requests and
12:49 - all this looping and background
12:50 - processing there are libraries that are
12:53 - built to help handle these kind of
12:54 - things so android has several libraries
12:57 - available to us there's one called
12:59 - volley and another one called retrofit
13:02 - so volley is the official documented
13:04 - library that you would find on the
13:06 - android tutorials and that's the one
13:08 - we're going to use it's been around for
13:09 - a long time however there's another one
13:12 - called retrofit and it's actually
13:14 - probably more
13:15 - feature-fold it might be a little bit
13:17 - easier to use and it's actually shown up
13:20 - recently in the process called the
13:22 - jetpack so jetpack is a as a collection
13:25 - of libraries that are considered best
13:27 - practices by google and so even though
13:30 - we're not going to use retrofit it might
13:33 - be a better choice for future
13:35 - programming but they they work very
13:36 - similarly so the concepts will be the
13:38 - same in either library
13:40 - so here's what's ahead of us we're going
13:42 - to create a weather application using an
13:44 - api and an android so we're going to
13:46 - install the volley library
13:48 - we're going to parse a json data feed
13:51 - and then we're going to use asynchronous
13:52 - methods using callbacks to update our
13:55 - user interface and so all of that stuff
13:57 - is just ahead of us so let's take a look
14:00 - at how to build a weather app using
14:02 - android
14:03 - hey welcome to a new series of videos
14:05 - we're going to do for android
14:07 - development as you can see i have an app
14:08 - on the screen and i'm going to show you
14:10 - what it does so if i type in the word of
14:12 - a city like phoenix and choose use city
14:14 - name as my button i should see a list of
14:18 - temperatures weather reports and so
14:20 - that's what we're going to make in this
14:22 - next few videos
14:23 - [Music]
14:28 - so this weather app is going to
14:29 - demonstrate how to use rest api services
14:33 - and so you can see that i've got the
14:35 - current temperature and the current
14:37 - forecast for my city you can see the
14:39 - phoenix weather is pretty boring it's
14:40 - clear clear clear clear clear and some
14:43 - showers perhaps it gets pretty hot here
14:46 - so we're up to that's celsius that's 43
14:48 - degrees
14:50 - so the type of data that i'm going to
14:51 - get looks like here so for instance if i
14:54 - do a search for the query of the city of
14:56 - london i'm going to get back a json
15:00 - report that looks like this it's going
15:01 - to have an array and an object and then
15:04 - you can see i have london and then this
15:06 - important number here which is the id
15:09 - number for this city so i'm going to
15:11 - copy that number and we're going to use
15:12 - it in another api endpoint so let's
15:16 - scroll down here and see what what this
15:18 - would do
15:18 - so for instance here i'm going to choose
15:20 - this example for london
15:23 - and you can see the number 44418 is for
15:26 - london
15:27 - and the weather report then shows up as
15:29 - a series of text really it's json and
15:33 - then some other things that tell us
15:35 - about where we got the information from
15:37 - and what we're going to do is turn this
15:39 - into an application that runs on android
15:41 - and so you can make your own weather
15:43 - report app
15:45 - so let's see what some of the other
15:46 - things that i've programmed are so if i
15:48 - type in the name phoenix again
15:50 - and choose get city id you're going to
15:52 - see a pop-up that says the id number
15:55 - down here so let's go back and try what
15:57 - they gave us as an example here london
16:00 - so london england i assume and we'll
16:01 - choose get city id and you can see 44418
16:05 - is the number so now i'm going to choose
16:07 - 44418 as my entry and the second button
16:11 - says use the city id
16:13 - and now you can see that i'm going to
16:14 - get a report for the london weather so
16:17 - that looks like it's probably correct
16:18 - light clouds heavy clouds showers
16:21 - that's not phoenix
16:22 - and then finally the last part where it
16:24 - says city name if i change this to
16:26 - london
16:27 - it's going to use this api twice it's
16:30 - going to first of all look up the id
16:32 - number and then it will re-submit the id
16:36 - number in and give us the weather report
16:38 - so we're going to go from simple to more
16:41 - complex you're going to see some things
16:43 - in this tutorial that will teach you
16:45 - about rest services how to consume apis
16:49 - and how to do some callbacks because
16:52 - this is like an asynchronous function so
16:55 - this is a little bit more advanced
16:56 - programming when we've got
16:58 - online services involved so i'm going to
17:01 - take you through step by step on how to
17:02 - build this application we'll start with
17:04 - showing how to create the layout and
17:06 - then we'll install the volley library
17:09 - which is used for getting online data
17:11 - like we have here and then we're going
17:13 - to program each of these buttons so the
17:15 - first one is simple the second one one's
17:17 - a little more complex
17:18 - and then the third one is a double call
17:20 - to the service so
17:22 - go simple to more complex and by the
17:24 - time you're done you'll understand how
17:26 - to use rest api services in your android
17:29 - application
17:31 - hi in this video we're going to go
17:32 - through the process of creating the
17:34 - layout for the application you can see
17:36 - here it's a rest api service that will
17:38 - turn into a weather app
17:42 - [Music]
17:47 - so the first steps that we're going to
17:48 - do is create a new project we're going
17:50 - to create three buttons a data entry
17:52 - line and then a list and so that's just
17:55 - a hit
17:56 - so i'm going to start a new project so
17:58 - you can see everything straight from the
18:00 - very beginning so let's go to android
18:02 - studio i'm going to choose an empty
18:05 - activity project and let's give it a
18:07 - name
18:08 - so i'm going to name mine as weather api
18:11 - app you can see the package name is the
18:13 - name of where i work which is grand
18:15 - canyon university my name and then
18:17 - weather app so this has to be a unique
18:18 - string this is usually the format that
18:20 - people work with
18:22 - the location you can save to any point
18:24 - on your hard drive likely in your
18:26 - documents folder make sure that you
18:28 - choose java kotlin is the more
18:30 - up-to-date language but java still is by
18:32 - far the more popular and i'm not quite
18:34 - sure what the minimum sdk is for java so
18:38 - i'm choosing 21 which is pretty much
18:40 - covering everybody out there so 94
18:43 - and then i'm ready to click finish
18:50 - all right you can see that
18:52 - the little time has passed and the
18:54 - project is up and running so just to
18:56 - refresh your memory we've got ourselves
18:58 - two files that are important when you
19:00 - start a new project there's the activity
19:01 - main i'll double click and you can see
19:03 - that's the layout and then the main
19:06 - activity java file is where we do the
19:08 - coding so in this video we're going to
19:11 - modify the layout and we're going to
19:13 - create something that will look like
19:15 - the final product so the first thing i
19:17 - need to do is just delete the text
19:19 - that's there so i will select hello
19:21 - world and press delete
19:22 - now i'm going to put in three buttons
19:24 - across the top
19:26 - all right so now the tricky part of
19:27 - getting these three buttons spaced out
19:30 - is to manage their constraints properly
19:32 - so for the first button we're going to
19:34 - put the constraint to the top of the
19:35 - screen and to the left for the second
19:38 - button we're going to have the top of
19:40 - the constraint match the top of the
19:42 - first button
19:43 - and then we're going to do the same
19:45 - thing for the third so now i've got
19:48 - i'm trying to adjust these so i'm
19:50 - changing the margins to zero so there's
19:52 - no extra padding but i'm having trouble
19:55 - linking them left and right so they're
19:57 - all lined up at the top
19:58 - but i think i need to go into the text
20:01 - area so instead of looking at the
20:02 - graphical view i'm going to switch to
20:04 - the code view so this brings up the xml
20:08 - and i can manually put in the things
20:10 - that i need to do here so let's see
20:12 - button one is which guy the first one
20:15 - right here this is button
20:17 - and let's make sure we got the
20:18 - constraints right so the start of
20:21 - the button is to the start of the parent
20:24 - now the end of the button goes to button
20:26 - two that's correct
20:28 - now let's go to button two and let's see
20:31 - so his
20:32 - doesn't have a beginning constraint so
20:34 - i'm going to manually add that so i'm
20:36 - going to type in the word
20:37 - start
20:39 - of
20:40 - and you can see that it automatically
20:42 - provides me with a type ahead so i want
20:44 - to do the first choice that can the
20:47 - start of this button is going to match
20:49 - the end of the previous button so i'll
20:51 - select the first one
20:53 - and now it says which button do you want
20:54 - to select so this first one
20:57 - all right so now the end of the button
20:59 - is going to be constrained to the start
21:00 - of the pre of the the third button
21:03 - that's correct
21:04 - and the top should match the top of the
21:07 - first button
21:08 - okay so i believe button two is in the
21:10 - right spot let's check the graphics
21:12 - there you can see the button one and
21:13 - button two are evenly spaced and this uh
21:17 - kind of wavy line says this is there's a
21:19 - two-way constraint going on now we need
21:21 - to add the constraints for the third
21:23 - button to spread him out so let's go
21:24 - back to code
21:26 - and i'm going to do the same so let's
21:28 - see let's check the constraints
21:30 - so the end of this button goes to the
21:33 - end of the parent which is the right
21:35 - margin that's correct
21:37 - the top of the sky matches the top of
21:39 - button two so yes they're horizontally
21:42 - uh
21:43 - they're going to be the same vertical
21:44 - distance down now i want to change the
21:47 - constraint to be the start of this is
21:49 - going to be
21:50 - to the end of the previous buttons so
21:53 - i'm looking for start
21:55 - to end
21:56 - of and now it says the end of who
22:00 - that would be the end of button two
22:02 - which is the center button
22:04 - all right so now
22:06 - we have a end
22:07 - start and top
22:10 - that looks good to me let's check the
22:12 - view in graphics now and they are now
22:15 - all evenly spaced so that's kind of a
22:16 - tricky thing how to get these spaced
22:18 - across
22:19 - evenly
22:21 - all right so now i want to rename these
22:23 - instead of button button two and button
22:25 - three i'm going to give them names that
22:27 - match the purpose for which i'm going to
22:29 - program them so i'm going to switch to
22:31 - this middle button which is called split
22:33 - and you can see the xml code and the
22:36 - layout here on the right
22:38 - so i want to modify this first button
22:41 - here and his name is currently button so
22:45 - i want to change his id to btn
22:47 - underscore and then his purpose which is
22:50 - get
22:51 - city id
22:53 - and you can see that all of the
22:54 - constraints just fell apart
22:56 - that's because down here in the second
22:59 - button
23:00 - you can see it's still thinking that
23:02 - button is the guy he's supposed to be
23:04 - attached to so that doesn't work
23:06 - obviously so i'm going to copy and paste
23:09 - this
23:10 - id number over top of those
23:12 - and now the constraints are back to
23:14 - normal good okay so now let's change the
23:16 - id number for button two so he is going
23:18 - to be btn
23:20 - and his job is to get the weather
23:23 - by
23:24 - city id so when you click this we're
23:27 - going to have the ability to translate
23:29 - an id number to a city uh weather report
23:33 - so that's why we get get weather by city
23:36 - id
23:37 - and you can see i'm going to copy this
23:39 - and the
23:41 - reference down here needs to change so
23:42 - paste over top of that
23:44 - and paste over top the second one and
23:46 - they're back good
23:48 - all right so what happens this one needs
23:49 - to be pasted
23:51 - so i'm
23:52 - replacing the id numbers let's see the
23:54 - third one is button three
23:56 - and so here is going to be btn and we're
23:58 - going to say get weather
24:00 - by city name so you can see the
24:03 - difference this one was city id
24:05 - we're going to provide the name of the
24:06 - city here to get the weather report
24:08 - all right so let's copy him
24:11 - and replace this reference here to
24:12 - button three
24:14 - and i believe that is now balancing out
24:17 - correctly so that was a little tricky
24:19 - but we got all of our buttons in a row
24:22 - and we changed their id numbers all
24:24 - right so now we've got to give the
24:25 - button text something better than what
24:27 - we have here so
24:29 - the text is there anything in here about
24:31 - the text
24:33 - there is not a property
24:35 - listed in the xml for text so let's go
24:37 - back to the graphical view
24:39 - and i'm going to select the first
24:41 - and let's go check the properties so
24:44 - here is a text property it says button
24:46 - so we're going to say get
24:48 - city
24:49 - id is his name
24:51 - all right so that changed the text
24:52 - property
24:53 - this one here is going to be
24:56 - get
24:57 - weather
24:58 - by id number
25:01 - and then the last one is going to be the
25:03 - same it's get weather by name
25:08 - and let's see they are not quite fitting
25:11 - so
25:12 - let's change this
25:14 - and i'll just say
25:16 - get gets out of the way and we'll say
25:18 - whether by id and the other one will be
25:21 - weather
25:22 - by
25:23 - name
25:24 - and there's just barely enough space so
25:26 - that probably will work now that's the
25:29 - buttons let's go to the next part which
25:30 - is a
25:32 - text edit so plain text is what i'm
25:35 - looking for
25:36 - and i'm going to drag him in
25:38 - and you can see why i called it edit
25:40 - text because that's the default name or
25:42 - the id
25:43 - let's put the constraints in so i want
25:45 - this to be attached to the left margin
25:48 - and the other end to the right margin
25:51 - and now i want the width to be the full
25:53 - width so let's change the width to 0dp
25:57 - which is also known as match constraints
26:00 - so it spreads out to the full width now
26:02 - the top of this thing let's match it to
26:04 - the bottom of the first button so let's
26:07 - see we want the top
26:09 - to the get city by id bottom
26:12 - and then it says i'm automatically going
26:14 - to leave you an 88
26:15 - pixels margin let's just change that to
26:18 - 8 so it's pretty close
26:19 - that looks pretty good now let's give
26:21 - this a name so instead of edit text
26:23 - we're going to say et underscore
26:26 - data input so it's a generic data input
26:29 - we're going to use it to capture names
26:31 - and numbers so i'm just going to call it
26:33 - et
26:35 - data input
26:36 - now let's see down in the bottom we're
26:38 - going to see a text area so it says name
26:40 - i'm going to delete that
26:42 - and for hint i'm going to say
26:44 - city name is a good hint
26:47 - and now we've got city name listed all
26:49 - right so the last one is a is a list so
26:53 - i need to go to
26:54 - the common area and you can see that
26:56 - recyclerview
26:58 - is the common most recommended thing if
27:02 - you want to use a list view if you want
27:03 - to display
27:05 - a list of any items and scroll through
27:07 - it recyclerview is the recommended way
27:10 - now you can do that if you like however
27:11 - there's a lot of extra code and steps
27:13 - that are involved compared to a legacy
27:16 - option
27:17 - so even though this is legacy i'm
27:19 - choosing list view because it's so
27:21 - simple
27:22 - now the advantages of list view are its
27:25 - simplicity but the disadvantage is
27:27 - if you start adding hundreds of items to
27:30 - a list it will run very slowly and
27:32 - consume all kinds of resources on your
27:34 - app well i know that on my list i'm only
27:36 - going to have five items and it's so
27:39 - simple to program i'm going with list
27:41 - view all right so let's do the
27:42 - constraints here so the top of this has
27:44 - to match to the bottom of the
27:47 - data input
27:49 - and let's leave a little space here
27:50 - let's go 8 pixels
27:52 - let's go with the left side to match the
27:55 - left here
27:56 - and the right side equally drag to the
27:58 - right
28:00 - alright so you can see the constraints
28:01 - are here the start is the start of the
28:03 - parent end to the end of the parent
28:04 - bottom
28:06 - top is to the bottom of the data input
28:08 - and i'm going to leave off the bottom
28:09 - constraint now because it might just
28:11 - fall off the edge of the screen without
28:12 - any trouble
28:14 - all right we give it an id let's call
28:15 - this thing lview for list view and i'm
28:18 - going to call it weather report or
28:20 - weather
28:22 - yeah weather reports i'm going to use
28:24 - the the plural for more than one
28:27 - all right so that gives us a idea of
28:29 - what's coming
28:31 - now let's just run this and see what it
28:33 - looks like
28:35 - all right you can see that the it says
28:37 - gradle is finished
28:38 - my
28:39 - rest api changes to the new app
28:43 - and it says weather api app so you can
28:45 - see that i have three different buttons
28:47 - i have a city name so i can type in
28:49 - something here
28:50 - and then when we're done we're going to
28:51 - be able to generate the city's weather
28:54 - report down in the list view below so
28:56 - that's the first step now this is kind
28:58 - of a tedious process so i'm going to
29:00 - provide you with the xml file which is
29:03 - this code right here so you don't have
29:05 - to retype everything like i did and that
29:08 - will adjust any for errors if you've got
29:10 - any so under the next video we're going
29:11 - to start creating some button listeners
29:14 - so that way when these buttons are
29:15 - clicked they do something so that's
29:17 - coming up soon
29:18 - hey welcome to the third video of our
29:20 - application for doing a weather report
29:23 - as you can see in the previous video we
29:24 - created a layout in this video we're
29:26 - going to create some button listeners so
29:28 - that each of these buttons are now
29:30 - active
29:31 - [Music]
29:37 - so let's get started with creating some
29:38 - code that makes these buttons work so i
29:41 - don't need to look at the xml file
29:44 - anymore so i'm going to just close that
29:46 - and let's get into the code here which
29:48 - is main activity java you can find that
29:50 - here in the folder called java and then
29:52 - the first project folder and main
29:54 - activity so the first thing we need to
29:56 - do is get the values of all the buttons
29:58 - and their id numbers
30:00 - so the first three things that i'm going
30:02 - to capture are the button names so let's
30:05 - put in the button class
30:06 - and then i'm going to assign a value for
30:09 - each of these buttons so we can program
30:11 - it so btn underscore city id
30:14 - get weather by id and get weather by
30:16 - name i think those are pretty close to
30:18 - what i named them in the layout they
30:19 - don't have to be exact but it certainly
30:21 - helps if they are almost exact
30:24 - the other two controls on the screen are
30:26 - the lists view and the edit text so edit
30:29 - text is et data input and list view i'm
30:32 - going to call lv weather report
30:35 - all right so i've got those three uh
30:36 - categories here and it just occurred to
30:38 - me that these are all in the wrong
30:40 - location notice i typed them inside of
30:42 - where it says on create so i'm going to
30:44 - control x to cut them out and move them
30:47 - up so that they are now
30:49 - class member variables they're called so
30:51 - these are accessible for all of the code
30:53 - that will appear in the main activity so
30:56 - that makes it much more
30:58 - easy to program all right so now when
31:00 - the oncreate method is called we're
31:02 - going to assign these things a value so
31:05 - let's go one by one
31:07 - all right so let's get the first three
31:09 - buttons so btn
31:11 - underscore city id equals and we're
31:13 - going to find its id number so we use
31:15 - the word find
31:17 - view by id and r dot i id gives us the
31:22 - resource value so that's what r stands
31:23 - for resource id number and then the name
31:26 - that i assigned it in the layout and the
31:29 - other two are just the same so we're
31:30 - going to use find view by id and try to
31:33 - match up the values in the in the layout
31:36 - and give them a value here in the
31:37 - program
31:39 - the same holds true for the edit text
31:41 - and for the list view so we use find
31:43 - view by id to capture the actual number
31:46 - that's assigned to these so this is an
31:48 - integer that is it is stored into the
31:51 - actual button variable and the edit text
31:54 - variable and the list view variable
31:56 - so it's a good idea to comment your code
31:58 - just in case there's somebody looking at
32:00 - it that doesn't understand it as well as
32:01 - you do so i'll just say this is
32:03 - assigning values to each control in the
32:05 - layout
32:06 - this is pretty standard ideas so
32:08 - hopefully you've seen this before but if
32:09 - it's your first app
32:11 - maybe not the best choice for your first
32:13 - stat but i'll help you along the best we
32:14 - can all right let's move on to the next
32:16 - part where we're going to actually now
32:19 - create some listeners
32:21 - so the next section is going to be click
32:23 - listeners for each button so that way
32:24 - when we click them we know we have
32:26 - something going on
32:28 - so the next section we are going to
32:30 - create the set on click listener for the
32:33 - button and you can see there's type
32:35 - ahead code that makes us much easier so
32:37 - we'll have a new on click listener that
32:39 - comes out of this this is a what they
32:41 - call an anonymous function where it
32:43 - doesn't have a name it just has the
32:44 - inline definition
32:46 - and inside of this code we can create
32:48 - events now if the button is clicked
32:51 - so the best way to test a control is
32:53 - sometimes just to put in a toast
32:56 - let's test this one out to say you
32:58 - clicked me i'm going to check the rest
33:00 - of these the same way
33:02 - so for each of these buttons i'm going
33:04 - to do the same process i'm going to add
33:07 - the method called onclicklistener or set
33:09 - unclick listener
33:11 - and then inside of the parentheses we'll
33:13 - create a new listener event and for each
33:15 - of these i'm going to create a toast
33:16 - message so that way it tells me that
33:18 - i've been clicked
33:19 - and you can see that i'm going to now
33:21 - modify the actual text so we can
33:23 - distinguish between
33:25 - each of these items
33:27 - so i'm going to run the app again so
33:29 - i'll click this little circle arrow
33:31 - it'll restart the app and then we'll
33:33 - test out each button
33:35 - so let's test this out if i click the
33:37 - first button
33:39 - nothing happened if i click the second
33:40 - button
33:41 - it says you clicked b2 that seems to be
33:43 - working and third seems to be working so
33:46 - this is why you test out your code as
33:47 - you run something went wrong with button
33:49 - one what was the matter with it
33:51 - something didn't happen correctly let's
33:52 - just double check everything and make
33:54 - sure we got the name so the button name
33:57 - is called get weather by id
34:00 - and that is also down here so that is
34:03 - the incorrect name so let's try that
34:04 - again btn let's do by city id
34:08 - and let's save that i think that might
34:10 - be better because
34:12 - we had two click listeners for the same
34:15 - button
34:16 - and obviously the second one wins the
34:17 - first one was ignored let's uh let's try
34:19 - that again
34:27 - all right so we're up and running let's
34:28 - go and choose get by id
34:31 - and what happens now so now we have a
34:33 - you clicked me one you clicked me two
34:35 - hopefully comes up and three
34:38 - got all of them now let's do one more
34:40 - thing i'm going to put in the city name
34:41 - here and then we're going to echo out
34:43 - the name of the city as we try each of
34:45 - these buttons so let's go and grab the
34:47 - value
34:49 - from the weather by name let's see this
34:51 - would be a good one the third button
34:54 - we're going to add in some new code so
34:56 - instead of
34:57 - you clicked me 3
34:59 - i'm going to put in this
35:01 - you typed and then i'm going to put in
35:03 - the value that comes from the edit text
35:06 - so let's do et
35:08 - input data dot get text
35:12 - and then i'm going to use a tostring
35:13 - method
35:14 - so that should get the text that was
35:17 - entered into
35:18 - the edit text
35:20 - and then re-displays it on the toast
35:22 - let's see what that does
35:25 - okay so we're up and running now let's
35:27 - put in the word kansas city how about
35:30 - and let's then if i could type correctly
35:33 - and let's try the third one that says
35:35 - get by name
35:37 - and it says you typed kansas city so
35:39 - that seems to be working so we've got
35:41 - ourselves button listeners we have the
35:43 - value of text that comes from the data
35:45 - input and now we're going to actually go
35:47 - and do some coding that will get the
35:49 - values from the weather report service
35:52 - hi and welcome to the fourth video of
35:54 - our series on using api services with
35:56 - android studio we're going to translate
35:58 - the text that's over here on the left
36:00 - side and put it into the app that's over
36:02 - here on the right side
36:04 - [Music]
36:11 - so in order to get actually produce a
36:14 - something that's sensible from the data
36:15 - on the left side we're going to have to
36:17 - get some tutorial information on how to
36:19 - use a library called volley so to help
36:22 - us through this process of using volley
36:24 - i'm going to the actual
36:26 - developer
36:28 - documentation from google so
36:30 - developers.android.com
36:32 - training volley that's what we're
36:33 - looking at so the section that we're in
36:36 - right now is called transmitting data
36:38 - over the network using volley there's
36:40 - actually something previous to this if
36:42 - you're interested how to handle general
36:45 - network traffic so
36:46 - this is kind of the overview of the old
36:49 - way or the pre-volley
36:52 - way that was done things and this this
36:54 - will work if you want to go through this
36:56 - process however google is recommending
36:58 - that we use a library called volley and
37:00 - it's right in their official
37:02 - documentation so let's go see what it
37:04 - says about what we're going to do
37:06 - so volley what is volley
37:08 - volley is an http library
37:11 - okay translate what that means is
37:14 - we can take a library extra software
37:17 - install it into into our project
37:19 - it will handle http traffic or let's say
37:24 - it will be able to handle text that
37:26 - comes in this format this json text and
37:29 - then it will translate it into something
37:31 - that we can use in the app
37:32 - so it is it's it they work they use the
37:35 - word easier and faster easier and faster
37:38 - than what
37:40 - it's easier and faster than the previous
37:42 - section called network operations
37:44 - and it says volley is available on
37:45 - github well we don't actually have to go
37:47 - to github to get it
37:49 - we can use it right in our dependency
37:51 - manager so come down to this section
37:54 - that says implementation
37:56 - and it says we're going to copy version
37:59 - 1.1.1
38:01 - nice number there now we're going to put
38:03 - that somewhere let's go back into our
38:05 - android studio
38:07 - so to put in any dependencies we go down
38:09 - to the section called gradle scripts so
38:12 - what is gradle gradle is a dependency
38:15 - manager and we want the second option
38:18 - double click here
38:19 - so a dependency manager takes a look at
38:22 - the code that you see at the bottom of
38:24 - the screen you can see i just pasted in
38:26 - the new volley library
38:28 - everything that is in this list called
38:30 - dependencies is automatically downloaded
38:33 - from their source which is probably
38:35 - github
38:36 - and it copies all the files to your
38:38 - project that you need and then those
38:41 - libraries magically are usable in your
38:44 - code so there's a lot of work done
38:45 - behind the scenes you don't have to
38:47 - download and install files the
38:49 - dependency manager does that for you
38:51 - so it's going to say go to this website
38:54 - find volley version 1.1.1 now there
38:57 - might be newer versions out there but
38:59 - google documentations are using this so
39:01 - let's let's choose that as soon as you
39:03 - add anything to the dependencies list
39:06 - you'll get a message at the top of the
39:07 - screen that says
39:08 - gradle files have changed since the last
39:10 - project sync a project sync may be
39:13 - necessary well maybe is kind of a
39:15 - strange word it will be necessary so
39:17 - let's go ahead and click the button that
39:19 - says
39:20 - sync now
39:21 - now at the bottom you will see
39:23 - a message that says your status is
39:25 - finished
39:26 - so something
39:27 - was just installed on our program all
39:29 - right so everything looks uh green
39:31 - there's no problems so let's move back
39:33 - to our documentation so it says now
39:36 - we've done this uh you can also okay
39:39 - we're not gonna have to do that okay we
39:40 - have some lessons in here how to create
39:42 - a simple request
39:44 - a request queue
39:45 - a standard request and a custom request
39:48 - all right so looks like we'll start at
39:50 - the simple
39:51 - and then we'll build up from there so
39:54 - the process that you're going to see in
39:55 - the next few videos is we're going to
39:57 - create things a simple way
39:59 - and then refactor it to be a little bit
40:01 - better for
40:03 - more scalable programs so some of our
40:05 - code is going to start to look like
40:06 - spaghetti code and then we're going to
40:08 - separate it into its appropriate classes
40:11 - and when we're done we'll have a pretty
40:12 - decent looking app that is modular and
40:16 - that way all the pieces are kind of in
40:18 - their own place let's start with the
40:20 - first one that says
40:21 - send a simple request let's try that
40:24 - so a simple request means we're going to
40:27 - go and get a weather report
40:29 - so here is some code that we're going to
40:31 - work with
40:32 - now
40:34 - we're going to modify most of this but
40:36 - we will have a pretty good idea of how
40:38 - this works by the time
40:40 - the video is over
40:41 - so before we get to that it says you
40:44 - need to add the internet permission to
40:46 - your app's manifest
40:48 - so android permission internet let's go
40:50 - check that out so i'm back into my
40:52 - project
40:54 - and the manifests are up here in the
40:55 - folder called manifest let's go and open
40:57 - that xml file
40:59 - so we're ready to add the permission
41:01 - into our manifest file so right up here
41:03 - before the word application i'm going to
41:05 - start typing i'm going to use an open
41:08 - bracket
41:09 - so like the less than sign
41:11 - and immediately the type of heads helps
41:13 - telling me there's things that you can
41:15 - put here what are you looking for
41:17 - and what i'm looking for is the first
41:18 - one that says uses permission
41:21 - and isn't that nice it provides me some
41:23 - type of head code that says
41:25 - what do you want to make this
41:27 - application access well internet is the
41:30 - key because we are going to be looking
41:33 - at data that's online so let's close the
41:36 - tag
41:37 - and we could use the tag closing as it's
41:40 - here or i could just put in a
41:43 - slash and that's a self-closing tag so
41:45 - either one of those is acceptable so now
41:48 - we will automatically get permissions
41:50 - this doesn't require the user to click
41:52 - anything so there's no special code to
41:54 - see if they've approved or denied the
41:56 - permissions so
41:57 - internet permissions is pretty standard
41:59 - so there's just one line of code okay so
42:01 - now we've got ourselves the permissions
42:04 - now we're going to come down to the
42:06 - request queue and let's see what all
42:08 - this is going to do
42:10 - so we need to have what they're going to
42:12 - ask to fill in a text view we don't have
42:14 - a text view we're just going to use a
42:16 - toast
42:17 - but it's almost the same
42:19 - i'm going to copy all of this
42:21 - right down to the last line so i'm
42:22 - leaving out text view and i'm going to
42:24 - copy
42:26 - and bring this right into my project
42:29 - and where am i going to put it well i'm
42:30 - going to put it in the first button so
42:33 - the button here
42:35 - has got the first click listener and i'm
42:38 - just going to paste everything inside
42:40 - there
42:41 - alright so a whole bunch of stuff just
42:42 - turned redline
42:44 - we're going to have to add some new
42:45 - libraries it looks like
42:47 - so when we click the button
42:49 - the first thing that happens is we are
42:51 - going to initiate something called
42:54 - a request queue
42:56 - a request to what a request to the
42:59 - service online
43:01 - and so the queue means that you can't
43:04 - like have simultaneous requests they
43:06 - have to get in line they have to take
43:08 - terms so the request queue is this
43:11 - object that's going to be like a a
43:13 - lineup so it says here if you want to
43:15 - import the class we'll do that
43:17 - so we just imported it there should be
43:20 - something new under the imports
43:22 - so do we have a request queue yeah line
43:24 - 12 says we just imported this from the
43:26 - volley library so remember we have
43:29 - volley as one of our dependencies
43:31 - if we didn't put in
43:33 - the dependency down here in gradle then
43:35 - this
43:37 - exercise would have not worked right now
43:39 - so we've got ourselves the first line
43:41 - fixed
43:42 - now the next item says we're going to
43:44 - use an object called volley
43:46 - and that also needs to be imported so
43:48 - let's see if i can press alt enter
43:51 - and it says we've got a new request
43:54 - now what's going on here it says
43:56 - the
43:58 - context
43:59 - context says this doesn't work
44:02 - so what's the matter with it it says
44:05 - your context is supposed to be of the
44:09 - main activity context
44:11 - okay so context is real confusing if you
44:13 - want to see a previous video on context
44:16 - look in the playlist here i've created
44:17 - some android tutorials on understanding
44:20 - context
44:21 - anyway the context tells you where is
44:23 - this thing in the program so i'm going
44:25 - to type in the word main activity which
44:27 - is this class file
44:29 - and then dot this so that is the context
44:32 - of where this is being called from it's
44:34 - being called from main activity all
44:36 - right so what's the string
44:38 - well it's not from google.com let's
44:40 - delete that
44:41 - and let's go get a string from somewhere
44:44 - else so i'm going to go back into my
44:46 - browser
44:47 - and i want to get this string from one
44:50 - of these api services so let's go
44:54 - find out what that would be up here so
44:59 - i want a string to look like this here
45:01 - the one that says query equals london
45:04 - and so i want to get the id number of
45:06 - the city so this is the one that's going
45:07 - to work
45:08 - so i'm going to copy
45:10 - this whole url so let's do right-click
45:12 - and copy
45:13 - and we're going to trim off the last
45:15 - part that says london
45:17 - but we'll use most of it so let's go
45:19 - back into our code here and for it says
45:21 - string url we're going to keep it as
45:23 - london for now just to make it simple
45:26 - so this will only work for the city of
45:28 - london
45:29 - all right so now we've got ourselves a
45:32 - request and a url
45:34 - so the first thing it says is we're
45:36 - going to get a string request now there
45:39 - are different types of requests that we
45:40 - can use string request is the one that
45:42 - we will probably not use what we're
45:44 - going to ask for is called a json object
45:48 - request or a json array request because
45:50 - as you look at this data this is clearly
45:53 - json formatted data which is java object
45:57 - notation and so we're going to skip this
46:01 - string thing in just a minute but for
46:02 - right now let's keep with the code as
46:04 - they've given it to us so string request
46:06 - let's do alt enter
46:08 - and we'll import the class
46:10 - okay so
46:12 - we also have to do this other alt enter
46:15 - keep importing these things
46:18 - okay
46:19 - got it
46:20 - all right so here's the part that says
46:22 - text view let's get that out of the way
46:25 - and the response of the substring so
46:28 - let's just take
46:30 - let's take we know that the response is
46:32 - coming back
46:34 - and it's going to provide the first 500
46:36 - characters well i'm going to just delete
46:37 - all that
46:38 - and the comments so what i want to do is
46:40 - just display the whole thing so i'm
46:41 - going to put it into a toast so i'm
46:42 - going to use toast again
46:45 - and let's go to the text here and say
46:48 - instead of the string i'm just going to
46:49 - put in the word response so what comes
46:52 - back from the response will be texted
46:54 - out in a toast
46:56 - all right so now we have an error
46:58 - listener
47:00 - so let's go and
47:03 - import these it looks like we have to do
47:04 - more alt enter
47:06 - import the class
47:09 - and instead of using the text view i'm
47:10 - going to put in a toast
47:13 - and i'm going to say something like a
47:14 - problem occurred or error
47:23 - all right so then
47:24 - we get to the end
47:26 - so this request object is all bundled up
47:28 - from
47:30 - line 49 to 60.
47:32 - and then once we're done it doesn't
47:35 - actually occur until we add it to this
47:38 - queue so what's the queue
47:40 - and where did where did we assign that
47:42 - so the queue was assigned up here a
47:44 - request queue
47:46 - and then we added the request to the
47:48 - queue so that means we could add more
47:50 - than one request and it will take them
47:52 - in sequential order
47:54 - and then we're done we're going to have
47:55 - another text so let's uh let's just
47:58 - comment that out i don't want to see
47:59 - that all i care to see is what was given
48:02 - back from our london query
48:04 - okay let's cross our fingers and run the
48:06 - app again
48:08 - all right the app's up and running and
48:10 - so it doesn't matter what we type in
48:11 - here remember we're hard coding the word
48:13 - london in here so let's choose get city
48:15 - id
48:16 - and look at there let's hide that
48:18 - keyboard and try it again
48:20 - here is our here's our response it says
48:22 - title london let's look at that again
48:25 - all of that is the same thing that came
48:27 - through from our code here so it says
48:30 - title london location type city
48:32 - let's run it again compare the two side
48:35 - by side
48:36 - you can see that they are the same thing
48:39 - so this is formatted nicely and this is
48:41 - just a straight old text but the concept
48:44 - is there
48:46 - now we're going to change some of the
48:47 - code here and we're going to make this
48:50 - into a json object so you can see that
48:52 - there are two different types of
48:54 - brackets here this is the curly bracket
48:56 - this is a json object
48:58 - and this is the square bracket which
49:00 - means this is a json array
49:03 - so what we want to do is get a json
49:06 - array object just because that's the
49:08 - type of data that's printed on the
49:10 - screen if we were to look at a different
49:12 - one of these requests such as one of
49:14 - these down below here let's get london
49:17 - and let's look at the data you can see
49:19 - that the first character in the json
49:22 - is a curly bracket
49:23 - so this would be a json object that
49:26 - we're trying to to collect and then
49:28 - inside that json object you can see that
49:30 - there is a new array and that array
49:32 - contains like six or seven different
49:34 - days of weather
49:35 - so two different types of json data that
49:38 - we're looking at here either a json
49:40 - object or json array so let's go back to
49:43 - where we were which was this london
49:46 - query
49:47 - and we are going to be looking for a
49:49 - json array object so let's go back into
49:51 - the code and modify a little bit
49:54 - all right so i'm going to probably
49:56 - delete all of this here
49:58 - and uh let's comment it out first of all
50:00 - so
50:01 - put in a control
50:03 - forward slash to put a comment from
50:05 - everybody
50:06 - all right i'm going to type in a capital
50:07 - j
50:08 - now look what we have for options
50:10 - what i want are one of these two right
50:13 - here so json object requests that's if
50:16 - you were expecting to get a json object
50:18 - in this case though we're expecting a
50:20 - json array so i'm going to choose json
50:23 - array request
50:24 - i'm going to call it request
50:26 - and just like i had before i'm going to
50:28 - use the same model so you can see that
50:31 - the
50:32 - the text here is a good pattern to
50:34 - follow so we're going to have a new
50:37 - and this time i'm going to have json
50:39 - array request what are the things that
50:40 - we're going to fill in for the
50:42 - parameters
50:44 - so the first parameter we need is
50:46 - request.method.get so let's just type in
50:47 - the request
50:49 - dot method
50:50 - let's see capital m and then get so
50:53 - that's the type of request so in in apis
50:56 - you can have gets posts deletes puts and
51:00 - updates those those are all things that
51:01 - are that are different types so get and
51:03 - post are the obviously the most common
51:05 - ones if you've seen those in any kind of
51:07 - programming before okay so the next item
51:09 - is the url so the url is the string
51:12 - that's above us so i'm going to just
51:13 - retype url
51:15 - and now the the next part is the
51:17 - response
51:19 - so
51:20 - i'm going to type in a new
51:22 - and then the word response
51:28 - and i'm looking for a response listener
51:31 - so i'm going to type in response
51:33 - listener
51:35 - and what kind of item am i supposed to
51:37 - put between these brackets you can see
51:40 - before it was expecting a string
51:42 - well i'm expecting now a json
51:44 - array so let's type in json
51:48 - array all right so you can see that we
51:51 - now have a semicolon at the end and i'm
51:54 - supposed to have more code to help me
51:56 - out here so let's uh let's go down to
51:58 - this helpful hint that says implement
52:01 - methods
52:02 - so listener is going to have a
52:05 - two two items it's supposed to be a
52:06 - response with a success and also down
52:09 - here a error
52:11 - so let's see if that'll generate that
52:13 - for us i'm going to choose implement
52:14 - methods
52:16 - and sure enough there is a response so
52:18 - let's click ok
52:20 - all right so the first one was created
52:22 - for us
52:23 - okay so it generated the first results
52:25 - okay but i think what we need
52:27 - is another result which is on failure so
52:30 - let's put in a comma right before the
52:33 - end
52:34 - and let's put in the word new response
52:38 - and i want to do a response error
52:40 - listener
52:42 - there we go
52:43 - and the error listener needs to have its
52:46 - methods man i wish this would give me
52:48 - some more type ahead automatically but
52:50 - i'm going to go through the steps one at
52:52 - a time
52:53 - all right so i've got myself what looks
52:55 - a lot like the previous code that we
52:57 - coded but we've got an error
52:59 - so let's uh hover and see what the
53:01 - problem is
53:02 - okay it says here in your json request
53:05 - it says i cannot resolve the constructor
53:09 - so the constructor
53:11 - is
53:12 - obviously missing a parameter
53:14 - that's what a constructor does it takes
53:16 - all the parameters and creates an object
53:18 - so i've got get url and the request
53:20 - listener so something's different than
53:23 - what it's expecting i'm not sure what it
53:25 - is so let's go look at the documentation
53:26 - and find out so i'm going to switch back
53:28 - into my code now i did a simple request
53:31 - and let's let's take a look here at the
53:33 - what's called the standard request
53:35 - so a standard request instead of using a
53:38 - string request like we did before
53:40 - we're going to use a json object and
53:42 - let's scroll down here it says
53:45 - here's what you need to do
53:46 - your json this one's called an object
53:48 - request we did the array request almost
53:51 - the same
53:52 - and look at the look at the parameters
53:54 - here so the first parameter is get
53:57 - that's what we have
53:58 - url
54:00 - then there's something called null i
54:02 - actually don't remember what null is for
54:04 - and then the rest of it is what kind of
54:06 - a thing that you're actually trying to
54:08 - request
54:09 - so null is probably some kind of a
54:11 - parameter that
54:13 - maybe if i read the instructions more
54:15 - closely it would tell me
54:17 - but i don't see it in here but i'm i'm
54:19 - going to take the word for it and put
54:20 - the word null in
54:22 - okay so let's go look here and put in
54:25 - null
54:27 - and now it looks good
54:29 - so the parameter was called json
54:31 - requests no
54:34 - i'd have to go look at more details to
54:35 - know what that was
54:37 - anyway the problem seems to have
54:39 - disappeared
54:40 - now we can go to the response and add
54:43 - something now so let's put in a toast
54:46 - so i put in a toast create a new one
54:48 - and what i'm interested is is to know
54:50 - what comes back from the response
54:52 - so let's uh let's take the word response
54:54 - then and instead of the text here let's
54:56 - paste it
54:57 - it doesn't like that so the response is
55:00 - not a string it's a it's something
55:01 - called a json array so we can just turn
55:03 - it into a string with a two string
55:04 - method and that's good
55:07 - okay for the next item the error
55:09 - listener let's put in a toast again and
55:12 - let's put in a message that says
55:14 - something wrong
55:17 - all right so we've changed our data from
55:20 - a string request to a json array request
55:24 - and let's let's hopefully make this work
55:27 - okay down at the bottom
55:29 - this turned red
55:31 - i'm just going to cut that out and move
55:32 - it up to the top here
55:34 - so why doesn't it like string requests
55:37 - our request was called something else
55:40 - it's called here it's request so let's
55:42 - just copy this
55:44 - and put it over top
55:46 - okay all ever is gone let's see what
55:49 - happens
55:50 - okay so the app's gonna run here and
55:53 - before it gets started i'm gonna switch
55:54 - over to the data that we
55:56 - are expecting this this screen here
55:59 - and uh let's put in get city id
56:03 - there it is
56:05 - so that was the same
56:07 - text that we have listed here and you
56:10 - can see if you look carefully it starts
56:11 - with a little square bracket
56:14 - so we've got ourselves the get city id
56:19 - so we can do better than just getting
56:21 - the entire json array i mean the string
56:24 - did that the advantage of using json
56:26 - data is that you can split it up into
56:28 - pieces
56:29 - so what i want to do first is get the
56:30 - entire array and then get one piece of
56:32 - that array so let's go with this so i
56:35 - want to get a
56:36 - the first item in the array so this is a
56:39 - json object and we're going to call it
56:41 - city info
56:43 - and it's going to be
56:44 - from the response so the response
56:48 - is going to be the get json object
56:52 - and you can see that it's expecting an
56:54 - index so the first item in the list so
56:56 - the first item in the list is the as
56:58 - obviously it's an array of one item so
57:01 - item zero is the first item now we got
57:03 - an error it says uh you have an
57:05 - exception that needs to be handled
57:06 - because you're not guaranteed to
57:08 - actually get valid data so let's
57:10 - surround it with a try catch
57:13 - okay so we're going to try and do this
57:14 - and if something goes wrong we'll print
57:16 - the error
57:18 - all right so now when we're done we
57:20 - should be able to get
57:22 - get the actual json object well i'm not
57:24 - interested in the json object let's look
57:26 - at it again
57:28 - the information that i'm looking at is
57:30 - this this is the key that i'm looking in
57:32 - this is the target so w-o-e-i-d so i got
57:35 - the object which is this item
57:38 - now i need the key value which is
57:40 - w-o-e-i-d so let's let's copy him and
57:43 - we'll bring him to the four
57:45 - so let's go to
57:47 - the next line
57:48 - so we got the json object
57:50 - now i want a string and i'm going to
57:52 - call this thing the city id
57:55 - and so we're going to do the city info
57:58 - dot get string
58:00 - and now i'm going to paste in the name
58:02 - of the string
58:03 - isn't that cool so
58:05 - if that string exists this try catch
58:07 - will succeed and we will have a new
58:09 - string called city id
58:12 - so
58:13 - that's the target that we're looking for
58:14 - on this function so we're going to call
58:16 - it city id equals and then i'm going to
58:18 - type in city id oops
58:21 - let's try that again
58:23 - city
58:25 - id
58:26 - okay so now i won't let me use city id
58:30 - in two places
58:32 - all right so you're getting to see all
58:33 - the errors that are coding as they as
58:36 - they occur
58:37 - so it says i can't figure out what city
58:39 - id is that's because we declared city id
58:41 - inside the try catch and as soon as we
58:43 - left tri-catch
58:45 - the scope of that variable is now gone
58:47 - so what i have to do is define city id
58:50 - further out so let's go and put it right
58:53 - above the try
58:55 - and let's say by default it's an empty
58:57 - string
58:58 - and i don't need to redeclare it
59:00 - and then down here it works okay so
59:02 - we're going to have city ids defined
59:04 - then it's redefined as whatever comes
59:06 - from the value and then we print it here
59:09 - all right let's see if that works we've
59:11 - gone a long ways we're going to run this
59:13 - i'm going to bring up the web page so we
59:15 - can see the id that we're expecting
59:18 - and then finally what happens here so i
59:21 - click here
59:22 - the city id is 44418
59:25 - beautiful
59:26 - all right does that work for all cities
59:29 - let's go and check so instead of london
59:32 - let's change the url now so let's put in
59:34 - a new city so i'm going to put in
59:35 - phoenix
59:36 - and save it relaunch the app
59:40 - and away we go
59:43 - let's uh let's come over to here and
59:45 - instead of london i'm going to type in
59:47 - phoenix
59:49 - so the id number is now this one 247
59:52 - 1390.
59:54 - let's see if we get the same results
59:55 - over here so i'm going to choose get id
59:58 - and there it is 247 1390. okay so it
60:01 - seems to be getting the id number
60:03 - correctly
60:04 - now i would like to be able to put in
60:06 - the city name here and then get the id
60:09 - so that's the final step that we're
60:10 - trying to get to there's been a long
60:12 - video but i'm showing you all the steps
60:14 - that go into
60:15 - trying to figure out the the code and
60:18 - the documentation
60:20 - so the query
60:22 - let's just take off the city name
60:25 - and now
60:26 - in the url
60:28 - we're going to add to it a new value so
60:32 - let's go with plus
60:34 - and let's get the value from the data
60:36 - input field
60:37 - get text
60:39 - and then i'm going to change that to a
60:41 - tostring method
60:43 - so now we should see
60:44 - whatever value here is attached to the
60:46 - query
60:48 - one more run
60:49 - data that we're expecting and then the
60:51 - app shows up here so now if i type in
60:53 - the word phoenix
60:55 - and let's get rid of the keyboard choose
60:57 - get city id
60:59 - we see 247 1390.
61:02 - let's try somebody else
61:04 - let's try miami everyone wants to know
61:06 - what the weather in miami is so let's
61:08 - check that out there's this the
61:11 - ideas245022 let's go and see what miami
61:14 - brings up on our app
61:16 - miami i assume that's florida
61:18 - and what do we get
61:20 - we got an id number they seem to be
61:22 - working so test this out with various
61:24 - cities now the reason why we did this
61:26 - one first is because we're going to then
61:29 - get the weather report by that city id
61:33 - and so that'll be the next phase of our
61:35 - video here so this is a great stopping
61:38 - point we've got ourselves one item from
61:40 - our list
61:41 - and that is an important id number
61:44 - hi welcome to another video in our
61:46 - weather app
61:47 - in this video we're going to do some
61:49 - refactoring so in this current state we
61:51 - have a lot of code inside a button it's
61:54 - kind of uh
61:56 - complex and we're going to have to make
61:57 - more buttons and so the code will get
61:59 - longer so we're going to try to do some
62:02 - refactoring to make this actually a
62:03 - little bit more well designed
62:07 - [Music]
62:10 - so i'm going to go to the
62:12 - documentation that we were looking at
62:14 - here so
62:15 - this was google's page we skipped over a
62:18 - section called request queue we're going
62:20 - to go back to that down here it says use
62:22 - a singleton pattern so the singleton
62:25 - pattern is common to lots of things in
62:28 - not just java but all applications and a
62:31 - singleton
62:32 - is a class that can only be instantiated
62:36 - a single time one time so the name
62:38 - singleton
62:39 - and all singletons are pretty much coded
62:41 - the same way if you haven't seen one
62:43 - this is a great introduction to why
62:44 - they're important
62:46 - so first of all
62:47 - what do we care about for singleton and
62:50 - why do we only need one instance
62:53 - let's go look at our code here and
62:54 - figure out where this would be
62:56 - so the line that's important to us in
62:58 - this singleton lesson is on line 50. so
63:02 - we're creating a cue called a request
63:04 - queue
63:05 - and then at the end of the
63:07 - code here we are adding a new request so
63:11 - if you were to click the button multiple
63:13 - times
63:14 - it would
63:15 - multiply put in requests and each
63:17 - request as you can see takes a few
63:19 - seconds
63:20 - now we don't want to have multiple cues
63:22 - running in our program one queue is good
63:25 - we just can only handle so much network
63:27 - traffic and so the idea of a singleton
63:29 - says we're going to make a single class
63:32 - that will be listening for button clicks
63:34 - anywhere in our application and it'll
63:36 - handle them in the order that they're
63:37 - given so that's where we're going with
63:39 - this refactoring
63:42 - all right so we're going to take their
63:44 - code that they've given us here and copy
63:46 - and paste it and then modify it a little
63:48 - bit to match our program there's a few
63:51 - things here that we don't need but
63:53 - we will delete them so let's go ahead
63:55 - and we're going to click we're going to
63:57 - create a class called my singleton but
63:58 - before we do that i'm just going to copy
64:00 - here
64:01 - and it copies the entire gray box
64:04 - and then we're going to make a new class
64:05 - called my singleton so let's go back
64:07 - into the project here
64:09 - right click in the java area
64:11 - and we'll call it my singleton
64:15 - now we're going to rename that later to
64:17 - something like data service signal
64:19 - singleton or the request single content
64:22 - okay so we got ourselves the code i'm
64:24 - going to
64:24 - overwrite it so i'm going to delete that
64:26 - and paste
64:28 - and we've got ourselves all of the code
64:30 - here so request queue
64:33 - is the important part we're going to
64:35 - have to import some things here so let's
64:37 - do
64:38 - import the class let's see i'll try alt
64:41 - enter
64:42 - image loader now we're not going to use
64:44 - the image loader so i'm going to get rid
64:46 - of him context is important so we'll do
64:48 - alt enter again
64:52 - all right so the next section down here
64:53 - is called image loader so i'm going to
64:55 - just come down to this line here where
64:57 - it's got image loader
64:59 - don't delete this curly let's just
65:01 - delete the image loader part
65:04 - and let's see a couple more lines will
65:05 - be gone
65:07 - now we have
65:08 - we have a constructor it looks like
65:11 - so the constructor
65:12 - is important because it sets up a uh
65:16 - the ability for only one of these
65:18 - classes to exist
65:20 - so it'll take a parameter called context
65:23 - and then the request queue
65:25 - is the important part says when you're
65:27 - going to create the the this singleton
65:30 - it's going to create one version of the
65:32 - request queue
65:33 - okay then the next part is the singleton
65:36 - classic
65:37 - setup so all languages would probably
65:39 - use singletons this way
65:41 - there's a there's a variable called
65:43 - instance
65:44 - the instance is does this thing exist
65:46 - already has there been a version of this
65:49 - program or this module
65:51 - is it in the memory
65:53 - and this is a check to see
65:54 - if the instance is null
65:56 - means it hasn't been instantiated yet
65:58 - then we're going to make a new instance
66:02 - and if it is already existing then we
66:04 - will just return the one that's already
66:06 - there
66:07 - so this is the key part this is what a
66:09 - singleton does it only allows one
66:12 - instance of the class to be instantiated
66:15 - created
66:17 - all right so now let's go look at the uh
66:19 - the rest of it so the get request queue
66:22 - is important it says if the request you
66:24 - doesn't exist
66:26 - then we're going to invent it or we're
66:28 - going to make it come into a bean so
66:29 - let's use volley again
66:32 - do an import
66:34 - and then down here the request looks
66:36 - like that needs to be imported
66:38 - and then image loader we're going to
66:40 - take out so whatever the image loader
66:41 - was for we don't care
66:43 - now we've got ourselves an entire
66:45 - singleton
66:46 - and there's no errors okay so this is
66:49 - this is the way to handle the cue let's
66:51 - go back into here
66:52 - and so i'm going to comment out the
66:54 - existing queue and we're going to create
66:56 - a new one let's go look at the
66:57 - documentation to see how to do that
67:01 - okay so we're back to this page here
67:02 - that shows us how to do this code
67:04 - and now it says here if you're going to
67:06 - make a request queue
67:08 - we can do it two ways we can get the
67:10 - queue
67:11 - or we can simply
67:13 - add the cue right now so
67:15 - let's uh let's just use this line this
67:17 - one's simpler so i'm going to copy
67:20 - and let's go back to our code
67:23 - so i don't want to instantiate it up
67:25 - here instead i'm going to come down here
67:27 - and delete
67:28 - the line that was there
67:30 - and let's uh let's put in instead of
67:33 - string requests what was the name of the
67:34 - request it's called
67:37 - right up here it's just called request
67:39 - so request
67:41 - all right so the
67:43 - problem here is what kind of a
67:47 - context are we supposed to send so we
67:49 - need to put in the word
67:51 - main activity
67:53 - dot this
67:55 - so this is where it's being run
67:58 - all right so we've got ourselves
68:00 - pretty much the same kind of code i'm
68:03 - going to delete the original
68:04 - not a lot of changes in main activity
68:07 - but the singleton gives us the ability
68:09 - to manage this through
68:12 - central locations so let's
68:14 - delete all the stuff that we had before
68:19 - clean it up a bit
68:23 - and hopefully i haven't wrecked anything
68:24 - i've just done some refactoring to use
68:27 - the what the documentation is
68:28 - recommending so let's run the app
68:33 - so let's see i'll bring up the
68:35 - bring up the weather
68:36 - miami and let's make sure that this is
68:39 - still working so
68:41 - we'll get the same code here if i type
68:43 - in miami
68:45 - miami and then the button
68:49 - and look at there it worked
68:51 - by the way what happens if you don't put
68:53 - in something so if i put in a a city
68:55 - that doesn't exist does it do anything
68:58 - and it says city id is blank so it just
69:00 - gets nothing all right so it doesn't
69:02 - crash but i don't get any value either
69:05 - so that was a refactoring lesson so we
69:09 - did this singleton request and now
69:12 - if we were to have multiple things
69:14 - happening at the same time the singleton
69:16 - will handle them in sequential order
69:19 - hey welcome to part five of our video on
69:21 - weather api app so we're going to turn
69:24 - this code that you see here
69:26 - into a more
69:28 - componentized or modularized type of a
69:31 - refactoring
69:33 - so instead of having a button that has a
69:35 - lot of code inside of it we're going to
69:36 - have a button with a little bit of code
69:38 - and then an external class with some
69:40 - helper code to go with it so we're
69:42 - refactoring here to make our design
69:44 - better
69:47 - [Music]
69:51 - okay so let's get started on this
69:53 - refactoring part we're going to create a
69:55 - separate class that will handle all of
69:57 - the items that are currently listed in
70:00 - the highlighted section so what i want
70:02 - to do is make a class and put it in the
70:05 - java class area so i think a good name
70:08 - for this service is weather data service
70:10 - it's sort of a database access object
70:13 - but it's really for online
70:15 - so the first thing i want to do is
70:16 - define the types of methods that this
70:19 - class will provide
70:20 - so the first one here is going to be
70:23 - return a string called city id
70:26 - so we are going to get the city name and
70:30 - then go through the api process and
70:32 - return a string which will be the city's
70:35 - id so all the code that we did in the
70:37 - previous videos will be
70:39 - reproduced here or copied and pasted
70:41 - here and then refactored we've also got
70:43 - two other things that are in the future
70:45 - so i'm going to put them in now even
70:47 - though they're not quite quite defined
70:49 - properly so the list that we're going to
70:52 - get for the weather report is going to
70:54 - be a list of type weather report models
70:57 - so a model is a class that's going to
70:59 - contain things like the city name the
71:00 - high temperature the low temperature the
71:02 - forecast
71:03 - description
71:05 - and other items that we'll find in our
71:07 - data service and so we're going to have
71:09 - two options for this we can provide an
71:12 - id for the city
71:13 - and then get the weather report and then
71:15 - i'm going to refactor that one to have a
71:18 - simpler method called
71:20 - get the city forecast using the name or
71:23 - by name and so it'll translate a name of
71:26 - a city directly into a forecast and so
71:29 - that's what's ahead of us now as you can
71:31 - see the last two methods here don't have
71:34 - some things defined that we need to
71:35 - define so
71:36 - i'm going to simply comment these out
71:39 - for now and just leave that as things
71:41 - that we're going to have to do in the
71:42 - future
71:43 - so we're going to encounter some
71:46 - problems but we are going to get this
71:48 - one here called city id working
71:51 - so we're going to return a value
71:53 - hopefully with a string now the return
71:55 - part is going to be tricky because this
71:58 - is not going to work like i expect but
72:00 - i'm going to show you the process of
72:02 - learning so that way you can figure out
72:04 - some of the required work arounds that
72:07 - are ahead of us
72:09 - so the first thing i'm going to do is an
72:10 - attempt to copy and paste all of the
72:13 - code that's inside of the button click
72:16 - and then we're going to reproduce it
72:18 - inside of the other class so let's see
72:21 - i've got to get this highlighted
72:22 - correctly
72:23 - i'm going to
72:25 - cut this out
72:27 - and then we're going to replace it in
72:30 - the weather service so let's go ahead
72:31 - and paste everything here
72:34 - as soon as i paste it says wow you've
72:36 - got a lot of things that you're working
72:37 - on for dependencies let's click ok and
72:40 - import all those classes
72:43 - let's start at the very first line so
72:45 - we've got this
72:46 - string url
72:48 - and then it depends on a text item and
72:51 - so we don't have a reference to the the
72:54 - edit text item so we're gonna first of
72:57 - all delete this and change it to a
72:59 - parameter
73:02 - so we're gonna call this thing city name
73:05 - and so you can see that city name is
73:07 - being passed in as a parameter so that's
73:10 - good
73:11 - so let's just uh see what we would do if
73:13 - we were to use this right now so the
73:15 - goal here is to get the
73:17 - city id number and it's going to come
73:20 - from our new class called weather data
73:22 - service dot
73:24 - get
73:25 - city
73:26 - id and then we're going to provide the
73:28 - string which is from our edit text
73:31 - data input
73:33 - get text to string
73:35 - so
73:36 - this here has got some issues we've got
73:38 - a problem here that says
73:41 - get city id doesn't work
73:43 - so so really rather than just talk about
73:45 - the class itself i need to make an
73:47 - instance of it so let's copy
73:49 - and paste that and we'll call it a lower
73:52 - case thing and we're going to have a new
73:55 - weather service weather data service
73:58 - and then for here we put in the
73:59 - lowercase
74:01 - and everything's good so the instance is
74:03 - created
74:04 - and now we uh can get to the methods
74:07 - so
74:07 - so far so this makes this makes sense uh
74:10 - it's not going to work yet there's still
74:12 - problems ahead but this is the goal that
74:14 - i would like to do is a normal java
74:16 - class
74:17 - so let's start with this first line here
74:19 - we've got a string here that's encoded
74:22 - right into our
74:24 - in into our method so i'm going to make
74:25 - this an extraction so let's see if we
74:27 - can refract refactor extract into a
74:31 - constant so here's a trick that you can
74:33 - do
74:34 - and it
74:36 - puts this constant name in there that's
74:38 - kind of a long name let's just call it
74:40 - uh
74:42 - query
74:44 - for
74:45 - city id
74:47 - i like that
74:48 - and let's press enter
74:51 - okay so now you can see the new constant
74:54 - declaration is here so it's a public
74:56 - static final string
74:58 - and then it just copies that string up
75:00 - there
75:00 - so it's just replacing one string with
75:02 - another so the constant is got capital
75:04 - letters by by a convention and then if
75:07 - we have to use that again we don't have
75:09 - to use a second copy of the actual
75:11 - string so it's a good idea to have one
75:14 - source of truth all right for now let's
75:16 - let's keep going down so we're going to
75:18 - do a new request we're going to do a
75:20 - response query
75:21 - and then we come down to a problem here
75:25 - so
75:25 - we've got an issue this was the context
75:28 - of main activity
75:30 - well we don't have main activity anymore
75:33 - this is no longer accessible
75:36 - so what we want to do is have a value of
75:39 - the con of the context here is part of
75:42 - our
75:43 - our class values so let's let's come up
75:44 - here and put in something called context
75:47 - and i'll make a lowercase context
75:51 - let's import the class
75:53 - now how am i going to assign that that's
75:55 - going to come in the form of a
75:56 - constructor so
75:58 - let's make a generate a constructor here
76:00 - so let's go to generate
76:03 - constructor
76:04 - and you can see it says you've got a
76:06 - member variable called context
76:08 - and let's make that a very a parameter
76:11 - that we pass in and then we'll assign it
76:13 - here
76:14 - so
76:15 - this
76:16 - constructor is going to modify something
76:18 - back in mainactivity
76:21 - so what did we do in main activity we
76:23 - created a weather data service and you
76:25 - can see now
76:26 - it says you're missing a parameter
76:29 - well we can get that
76:30 - mainactivity.this
76:32 - is the context
76:34 - so we're sending our context of main
76:36 - activity
76:37 - back to here
76:39 - all right so since we now have a member
76:41 - variable we'll just put in the word
76:43 - context down here
76:45 - all right so
76:47 - does this all work
76:49 - let's see not quite we've got another
76:50 - issue
76:51 - let's change this to context as well
76:55 - and finally
76:57 - the last one
77:01 - all right so now we've got everything uh
77:04 - fixed up here but we've got one error at
77:05 - the end what's what's it say here
77:08 - it says you've created a
77:10 - return type of string and you're
77:13 - there's no return here
77:15 - so we want to return
77:17 - this the city id so this is where we're
77:19 - going to have problems if i type in city
77:23 - id
77:25 - we are going to have issues and it's not
77:27 - just the fact that it's out of scope
77:29 - this literally will not work and we're
77:30 - going to have to create what's called a
77:32 - callback but we'll get to that we'll
77:33 - demonstrate first that it doesn't work
77:35 - so what's the matter here city id
77:39 - where was it defined it was defined up
77:41 - here inside of this uh response
77:45 - so i would like to change this as well
77:47 - so i'm going to
77:49 - move this to a higher scope i'm going to
77:53 - cut copy this
77:56 - and let's let's just put it up here as a
77:58 - member variable
78:00 - and then down in
78:01 - here we're going to take out the string
78:03 - definition
78:05 - so now the scope says we have
78:07 - a city id here it's referenced here it's
78:10 - referenced here and then hopefully
78:12 - returned here
78:14 - so it's not going to return it but we
78:16 - should be able to at least get the same
78:18 - kind of a toast message
78:21 - that we did before
78:23 - okay so back to here notice how short
78:26 - then our code is
78:28 - so our string is going to
78:30 - come back from the data service
78:34 - and let's try toast to see if it
78:35 - actually works
78:37 - so i'm going to say
78:41 - returned and i d of
78:45 - and then we're going to have the city id
78:49 - so hopefully we're going to get the
78:51 - response from the weather data service
78:53 - and then redisplay it here so there's
78:55 - going to be two toasts
78:57 - this toast here is the second one inside
78:58 - here was the first so when we first get
79:01 - the city id from the api it'll toast it
79:04 - here
79:05 - or something wrong one of those two will
79:08 - happen
79:09 - and then finally
79:10 - we'll get here now i believe that this
79:12 - is going to come out as empty it won't
79:14 - work and then we'll have to solve that
79:16 - problem but let's test it
79:18 - we're going to run here and let's go get
79:20 - ourselves to
79:22 - the data that we're expecting let's try
79:24 - miami again
79:26 - and run the app
79:31 - okay so here we are let's type miami
79:35 - and
79:36 - hide the keyboard
79:37 - so the first toast will come from inside
79:40 - the
79:42 - program so the city id equals that
79:46 - and we got we got a quick message there
79:48 - that said
79:50 - returned a null did you see that i'm
79:52 - going to show it again it says
79:54 - no
79:55 - but then city id equals
79:58 - a number so one of the toasts got the id
80:01 - the other one does not let's go check it
80:03 - out where was that
80:05 - so the one that said returned an id of
80:07 - null was here
80:09 - so i'm going to put in here
80:12 - this didn't return anything
80:16 - why not that's kind of unfortunate
80:20 - i told it to return something but it
80:22 - didn't
80:23 - however inside of the weather data
80:25 - service
80:27 - it actually showed me a city id so i'm
80:30 - going to say
80:32 - this worked
80:34 - but it didn't return
80:47 - okay so the comments here show me that
80:49 - this part works
80:50 - and it didn't return it to the uh to the
80:52 - main
80:58 - activity okay so how are we going to
81:00 - solve this problem
81:02 - so we have just uh introduced ourselves
81:05 - to an asynchronous issue
81:08 - what has what is happening is that
81:11 - the
81:12 - first toast shows that there's a null
81:14 - value getting returned it like
81:16 - immediately
81:18 - skipped down to return id
81:20 - and all of this process
81:22 - was kind of like left in the dirt it was
81:25 - left in the dust
81:26 - it skipped over it
81:28 - that's because we are running a
81:30 - background process uh the
81:33 - volley
81:34 - library automatically
81:37 - puts in a cue kind of a background
81:39 - request because it takes a little while
81:41 - for
81:42 - an api to return
81:44 - some data a couple of seconds that's all
81:47 - it takes but we're not going to wait
81:48 - around and freeze up the app and make
81:51 - the user wait
81:52 - we don't want to
81:54 - make things run on what's called the the
81:56 - ui thread
81:58 - which is the user interface thread so we
82:01 - put it this we put this process in the
82:02 - background and we just kind of let it go
82:05 - and it takes its time because we know
82:07 - it's
82:09 - er slow
82:09 - the unfortunate result is that the city
82:12 - id doesn't get assigned anything
82:15 - while this is in the in the process
82:17 - so by the time we get to this line
82:20 - you know we've skipped over and we never
82:23 - came back to wait for it
82:24 - so the the solution here one of the
82:27 - solutions that we can use it's called
82:28 - the callback
82:30 - so let's let's see if we can get a
82:32 - callback to work correctly
82:34 - call back is a way to notify the program
82:37 - that when this process is finished run
82:39 - another method so you can take your time
82:42 - but when you're finished i will be here
82:44 - waiting so that's what a callback is now
82:46 - in most languages there's some things
82:49 - that have gone beyond callbacks
82:51 - so callbacks get messy they start to get
82:54 - nested
82:55 - brackets until you get two three four
82:57 - levels deep and you lose track of your
83:01 - parentheses and so that's called
83:03 - callback hell if you get too deep and so
83:06 - unfortunately developing apps in android
83:08 - and java with callbacks is still working
83:11 - in that method other languages such as
83:13 - javascript and c-sharp and things like
83:15 - that have
83:17 - async and a weight for a newer way to
83:20 - manage things so there's probably ways
83:23 - to do async and await with libraries in
83:26 - java but i'm just going to show you the
83:27 - callback method because it's built right
83:29 - into the language
83:31 - so let's go look in some google
83:34 - queries about how to do this so i'm
83:36 - looking for the phrase android callback
83:38 - with volley
83:40 - now you'd expect the first thing to come
83:42 - up would be a documentation from
83:44 - google's developer
83:46 - tutorials and i scroll through here and
83:49 - i i'm not seeing it
83:51 - so
83:52 - there is something in here but this is
83:54 - not about uh volley i looked at that one
83:57 - so i'm going to just go with my stack
83:59 - overflow friends here and see what this
84:01 - does now i already checked in here and i
84:03 - know that there is a good explanation
84:05 - for how we're trying to handle this
84:08 - so i'm coming down to the first answer
84:10 - here it says there are three answers for
84:12 - this guy's problem
84:13 - and this is this is a good code to
84:15 - follow
84:16 - so it works uh i tested it out
84:19 - so here is here's the guy's issue he is
84:21 - using a json object request very similar
84:25 - to ours we're using a json array request
84:28 - but the principle applies
84:30 - and what he did then
84:32 - is he first of all defined a volley
84:35 - response listener
84:37 - so this here is some code that we're
84:40 - just going to copy
84:43 - and we're going to paste it right into
84:44 - our example
84:46 - and then make a little tweak here that
84:49 - like he did
84:50 - okay so the first thing that i'm going
84:53 - to do up here is
84:55 - before my
84:56 - actual event i'm going to
84:58 - put in this interface a volley response
85:02 - listener
85:04 - so you can see that the the goal here
85:06 - for this response listener is to have
85:08 - two different methods one's called on
85:10 - error and it's going to have a string
85:12 - message and the other one is an object
85:15 - response so what kind of response are we
85:17 - expecting out of this thing so
85:19 - out of our
85:21 - our response here we are pretty much
85:23 - getting the city id
85:25 - the city id in this case is a string so
85:28 - for my
85:29 - return type here i'm going to change
85:31 - this to a string and i'm going to call
85:33 - it actually
85:34 - city id just so i know what i'm
85:37 - expecting to come back
85:39 - so the volley response listener is
85:41 - specific to this method for right now
85:44 - so now i'm going to insert this
85:47 - response listener into my parameters
85:49 - here so let's look at the the calling
85:52 - definition here so i'm expecting one
85:54 - parameter but i'm going to add a second
85:56 - one
85:57 - all right so this one here i'm going to
85:58 - put in as a volley response listener so
86:01 - remember volley is the library we're
86:02 - working with
86:03 - and then when we get back to main
86:06 - activity we can implement these two
86:08 - methods called on error and on response
86:11 - now before we get to the response we
86:13 - need to actually make it happen so come
86:16 - down into my code to where the comment
86:19 - said this worked this is where we know
86:22 - that the city id has a valid number in
86:24 - it
86:25 - so we are going to use the volley
86:28 - response listener
86:30 - and we have two choices we have on
86:32 - response
86:34 - and on error see that's the two first
86:36 - two items here those are the exact same
86:38 - names as were defined up in this
86:40 - interface
86:41 - so we're going to choose on response and
86:44 - then
86:45 - provide the city id
86:47 - as the value that's coming back to the
86:50 - main
86:51 - main activity
86:53 - now let's uh also put in the error so
86:56 - we're going to do the same process here
86:58 - we're going to put in a volley response
86:59 - listener dot and this time on error
87:03 - and we'll say
87:04 - something wrong that's what's going to
87:06 - come back instead of a city id
87:08 - it's going to return something wrong
87:10 - okay so this is the key to link
87:14 - the correct values
87:16 - to our main activity as a matter of fact
87:19 - since this was useless this return i'm
87:21 - going to comment it out and i'm going to
87:23 - change the return type from string to
87:25 - void
87:27 - it doesn't seem to work doesn't work
87:28 - actually so we don't even need it
87:30 - but this response
87:33 - listener is going to help us so back to
87:35 - main activity we got to add a new item
87:38 - see we got a red line
87:39 - it says your weather data service get id
87:42 - has now two parameters
87:44 - the second parameter
87:46 - is a new we're going to call it new
87:49 - volley
87:54 - response
87:56 - listener
87:57 - look at there so you can see it's giving
87:59 - some type of head help i'm going to
88:00 - press enter
88:02 - and beautiful it now
88:04 - implements two different methods for us
88:07 - on error
88:08 - and on response
88:10 - so we are going to take the toast
88:13 - message
88:14 - cut that out and put it inside of our
88:18 - response
88:19 - and instead see city id is coming out
88:22 - here city id and then we're going to put
88:24 - another message in here and just say
88:27 - text is that something's wrong
88:30 - something wrong okay i put a comma
88:33 - and what do we got we got an error still
88:37 - all right so the error says
88:40 - you have expected the weather data
88:42 - service to return a string oh okay i'm
88:44 - going to delete that part
88:46 - we didn't actually
88:48 - uh
88:48 - implement that anymore okay so now
88:51 - careful let's make sure we got
88:52 - everything right here now the get city
88:54 - id method is going to
88:57 - have this link called the response
89:00 - listener which gives us an error message
89:02 - or response message
89:04 - and one of those two should come out
89:07 - so that is a callback let's see if a
89:11 - callback actually works
89:13 - so i want to remove the toast from
89:16 - inside
89:18 - of the
89:19 - data service so nothing more
89:22 - from there that's just getting the data
89:25 - and the toasts now that are exist are
89:27 - here and here
89:29 - okay let's run this
89:31 - okay let's switch back into the weather
89:33 - id and
89:35 - get the app up and running
89:37 - and let's see if we can get a valid id
89:40 - to text out in front of us so let's go
89:43 - to miami again
89:45 - and remove the keyboard
89:47 - and choose get city id
89:50 - okay it says it returned a value
89:52 - it seems to be working let's try london
89:55 - and let's minimize the keyboard and
89:58 - choose get the id
89:59 - looks like we got four four four one
90:01 - eight
90:02 - so the process of doing a callback is a
90:06 - little complex it's a little awkward but
90:09 - it works
90:10 - so we have now successfully created a
90:13 - weather data service and it has the
90:16 - method called
90:17 - get city id and we found out that we if
90:20 - we actually want to get that value we
90:22 - can't just return it as a string we have
90:24 - to wait for it so we use a callback
90:27 - method
90:28 - all right one final
90:30 - refactoring is this here is going to be
90:32 - used in the other buttons so there's no
90:34 - sense in creating a new one each time i
90:36 - click a button so i'm going to cut this
90:38 - and move it up
90:40 - and so it now sits at the class level
90:44 - and now what's the problem here it says
90:46 - it must be declared as final let's let's
90:49 - just put as final there
90:51 - and so now
90:53 - it should be working okay so the next
90:55 - video we're going to do is we're going
90:57 - to take this
90:59 - nice
91:00 - pattern that we've developed here and
91:02 - apply it to the other two buttons and so
91:04 - that's just ahead
91:06 - hi welcome back to another video in our
91:08 - weather app we're using an api service
91:10 - as you can see on the left side and
91:12 - we're trying to get the api to display a
91:15 - weather report over on the right side
91:18 - so
91:18 - we're going to create this button here
91:20 - called give me a weather report by id
91:22 - that'll be coming right up
91:23 - [Music]
91:28 - so in the previous videos we were able
91:30 - to get just the id of the london uh city
91:33 - as four four four one eight now we want
91:36 - to take this four four four one eight
91:39 - and put it into our input field and then
91:42 - choose this button called get weather by
91:44 - id
91:45 - and that will produce a weather report
91:47 - and then in a future video we're going
91:49 - to take the word london and then go for
91:52 - get weather by name but in the
91:54 - intermediate we're going to just be
91:55 - happy if we can get it by the id number
91:57 - so that's what's coming next all right
91:59 - so let's go and take a look at the code
92:02 - and see where we're going to go with
92:04 - that
92:04 - so this here right now is the button
92:07 - click listener and all it does is tell
92:10 - me a toast that says you clicked me too
92:13 - so we want to get rid of that and change
92:15 - it to some real code
92:17 - now we're going to use this weather
92:20 - service id so let's
92:22 - copy and paste all of this code here and
92:25 - hopefully just not have to do a whole
92:28 - lot of changes to it so i'm going to
92:29 - copy him
92:30 - and paste him down here
92:32 - so we obviously don't want to do get
92:34 - city id we want to
92:37 - get weather
92:38 - by id i think that is the method that's
92:41 - coming up so let's double check here we
92:43 - commented it out
92:45 - and let's see this was called get
92:47 - forecast by id i'm sorry let's
92:50 - comment this back in
92:53 - and i'm going to use get forecast by id
92:57 - as my next item
93:00 - all right
93:01 - and then there's a bunch of junk that's
93:03 - not working yet
93:04 - because this obviously has not been
93:06 - coded
93:07 - let's come back and fix these errors but
93:09 - first of all we have to make sure that
93:10 - our weather service is working
93:13 - so
93:14 - what is the first error it says i
93:16 - promised it that we would be using a
93:18 - list of weather report model
93:21 - well that's that's true but we don't
93:23 - have one of these called the weather
93:24 - report model yet
93:26 - so let's uh cut this out and
93:30 - put it into here and call this report
93:33 - and we're going to make it a new list
93:37 - and let's see we can't use list it's
93:39 - going to be array lists
93:42 - there
93:44 - and we have to import array lists okay
93:46 - now here's the issue with weather report
93:48 - model the weather report model is
93:50 - supposed to be a class that saves a
93:52 - whole bunch of data fields
93:54 - and we haven't defined it yet so let's
93:56 - create it
93:58 - and it's going to be
93:59 - in this package right here and click ok
94:03 - there it is so we have a weather report
94:05 - model
94:06 - now what kind of properties does it need
94:08 - well to answer that question we have to
94:10 - go look at the data that's been provided
94:12 - to us so i'm going to go back to my api
94:16 - and let's back up a few
94:18 - until we get down to
94:20 - one of these so we're going to do a re
94:23 - forecast
94:24 - so the forecast is going to look like
94:26 - this it's going to have all these
94:28 - properties in it
94:29 - so i could probably just copy one of
94:32 - these
94:33 - and start using my weather model based
94:36 - on
94:37 - the names here
94:38 - so let's just copy that and let's paste
94:42 - it here
94:44 - and i'm going to use that as a starting
94:46 - point
94:48 - so using the list of properties that i
94:50 - got from the api
94:52 - i am going to create all the properties
94:55 - that will go into this object called the
94:57 - weather report model
94:59 - so each one of them has its own data
95:01 - property so you can see that the int for
95:03 - id matches the type that's listed in the
95:06 - strings above so it's an int now most of
95:08 - these are strings so the weather state
95:10 - name the weather state abbreviation
95:13 - and the wind direction compass the
95:15 - created date all of these are strings
95:18 - now some of these are decimals so i'm
95:20 - going to use the word float as the
95:22 - property for the number and so we got
95:25 - floats for the max temperature the temp
95:27 - the min temperature the wind speed the
95:28 - wind direction
95:30 - the air pressure doesn't have a decimal
95:31 - point so it looks like that's an integer
95:33 - humidity also is an integer visibility
95:36 - we go back to float and predictability
95:38 - looks like an integer so i'm making
95:40 - estimations on which of these properties
95:42 - apply but things with a decimal point
95:43 - get floats and things that don't have
95:45 - decimal points are ins all right so
95:47 - we've got all these properties now
95:49 - created i can now just delete all of
95:52 - this helper code that i had put in
95:54 - earlier now what should we do with the
95:56 - rest of this we've got the properties we
95:58 - need some extra helpers
96:01 - so let's make a constructor first of all
96:03 - so let's go to
96:04 - generate a constructor
96:07 - and let's select all of the properties
96:08 - and click ok
96:10 - and there's a lot of properties but
96:12 - fortunately they're all defined for us
96:14 - that saves a lot of typing we need
96:16 - getters and setters for all these guys
96:17 - so let's do a generate and do getters
96:20 - and setters
96:23 - and let's select everybody
96:27 - okay now there's one other thing that
96:28 - we're going to use later it's the two
96:30 - string method
96:32 - so let's uh let's define one of these
96:34 - maybe at the let's see probably should
96:36 - go right here let's define the tostring
96:39 - method
96:40 - we can define that using generate as
96:42 - well
96:44 - and let's see tostring
96:46 - now i'm going to
96:48 - click ok and select all of these it's
96:50 - going to create one really long string
96:53 - we're probably going to come back and
96:54 - eliminate some of these later because
96:56 - this is a lot of information but for
96:58 - right now that's a good valid tostring
97:00 - method okay so that defines a weather
97:03 - report model so how are we going to make
97:06 - that work
97:08 - let's see we've got ourselves a
97:10 - list problem
97:12 - and we need to make this thing void i'm
97:15 - getting rid of all these errors
97:17 - so we have now defined ourselves the
97:20 - weather report model and we know that
97:22 - it's going to be a list of
97:24 - we're going to call it report
97:26 - so now the next goal is to untangle this
97:29 - rest service data
97:31 - and we want to be able to assign each
97:33 - one of these properties into one of the
97:35 - values of our weather report model
97:38 - so let's first of all figure out what
97:40 - kind of request we're going to ask for
97:42 - this very first line here has a curly
97:46 - bracket so that indicates that this is a
97:48 - json object
97:49 - the first property of a json object is
97:51 - called consolidated weather
97:54 - that's the property and this happens to
97:56 - be
97:57 - a list or an array we'll call it
98:00 - so we'll collapse this and we can see
98:02 - that
98:03 - each
98:04 - item each item in our list has 15
98:07 - properties
98:09 - and that's the end of the list so how
98:11 - many items are there it looks like one
98:13 - two three four five six so there's a six
98:16 - day forecast you notice that so that the
98:18 - first day
98:19 - shows today's current date which is may
98:22 - 25th
98:23 - and then let's open the second item in
98:25 - the list and you can see that that date
98:27 - is may 26th
98:29 - and i bet you 27th is coming up next
98:32 - let's check and sure enough so this is a
98:35 - forecast for the next six days for the
98:39 - city of london
98:40 - now we're going to only be interested in
98:44 - this property called consolidated
98:46 - weather we are expecting an array
98:49 - so this is two requests that we're going
98:51 - to have to get we're going to have to
98:53 - get the object the first object and then
98:55 - the property of that object is an array
98:58 - so let's see how this will go
99:01 - all right so now let's let's attack the
99:03 - problem here so we know that we're
99:05 - expecting to get a an
99:07 - object and then we're going to get
99:09 - an
99:10 - array all right so let's pencil out what
99:13 - we're going to do because
99:15 - we need a road map this is getting a
99:17 - little complex
99:18 - so the first thing we need to do is get
99:19 - the json object from the request
99:23 - and then we know that the item in that
99:25 - json object is called the consolidated
99:28 - weather
99:29 - which is an array
99:31 - and then each item in that array is an
99:33 - object that is going to give us all the
99:36 - properties of a weather report
99:38 - so it will become a new object called
99:40 - weather report model so that's where
99:42 - we're going
99:43 - so first of all let's get the json
99:45 - object and then we can start from there
99:48 - so let's uh let's take a look at what we
99:49 - did up here so we have a request that
99:52 - looks like like this here so i'm going
99:55 - to start with a json
99:57 - array request and modify it so let's
99:59 - just copy the first line
100:02 - and since we are looking for an object
100:04 - i'm going to modify here so instead of
100:06 - json array request it's supposed to be a
100:08 - json
100:09 - object request
100:11 - and let's modify this so json object
100:13 - request
100:15 - and the results are going to be a json
100:18 - object not a json array
100:21 - okay we're going to put a close bracket
100:23 - there
100:24 - so what's the problem it says we're
100:26 - going to have an issue that says you
100:28 - probably haven't implemented your
100:30 - methods so let's choose that
100:32 - and we want the on response
100:34 - so that comes out and it says we are
100:37 - expecting a response of a json object so
100:40 - compared to what we had before
100:42 - this was a json array response
100:46 - so we got one of each
100:48 - all right so we got an issue with the
100:50 - url so the url is undefined
100:53 - and let's let's fix the url
100:56 - so earlier we created a constant
100:59 - for the url up here we're going to make
101:02 - a new constant so let's copy and paste
101:04 - this one
101:06 - and let's call this thing
101:08 - query
101:10 - for
101:12 - city
101:13 - weather
101:14 - by
101:16 - id
101:17 - and then we're going to delete this and
101:19 - replace it with whatever comes from the
101:21 - documentation
101:23 - so the the uh the url that we're looking
101:26 - for it looks like this up here so i'm
101:28 - going to copy and paste
101:30 - from the address bar
101:32 - so that's going to come into our new
101:34 - constant
101:35 - now the value here is the city's id so
101:39 - 44418 as i recall was from london so i'm
101:42 - going to just take that out
101:43 - and one of the slashes
101:46 - so the url now needs to have a
101:48 - definition so let's type in a string
101:50 - here and call it url
101:52 - and that's going to be the query for
101:54 - city by weather id
101:56 - and then we're going to have a plus
101:58 - and we need to define it as an addition
102:01 - to this value here the city id
102:04 - so concatenate those two together and
102:06 - you get yourself a url
102:09 - okay what do we got going here this
102:13 - it's is to have no parentheses there
102:18 - okay so this is looking like pretty good
102:22 - we got ourselves uh the jason response
102:26 - all right so we've got ourselves the uh
102:28 - response now up above here you notice we
102:31 - had this error listener thing and we
102:33 - haven't implemented that down here so
102:34 - let's add that
102:36 - we're going to put in a comma
102:37 - and put in a new uh what's it called
102:39 - response error listener and that's the
102:42 - first suggestion so i'll just press
102:43 - enter
102:44 - and we still have something left over
102:46 - here we need to
102:49 - close off this parentheses and then a
102:52 - semicolon
102:53 - okay so all these callbacks really are
102:55 - difficult to keep track of that's why
102:57 - people are trying to get away from so
102:58 - many nested events like this
103:01 - but we've got ourselves a
103:03 - looks like an event here that might be
103:05 - successful
103:07 - we're going to at least get the
103:09 - consolidated weather now
103:11 - from the uh
103:13 - the property in here so
103:15 - let's uh let's check this out we can
103:17 - probably get it so
103:18 - let's make a toast for right now just to
103:20 - test it out
103:22 - and we are going to
103:24 - do the response
103:28 - dot to string
103:30 - and i'm going to ignore the error part
103:33 - and let's see what happens
103:36 - this isn't complete but we can at least
103:37 - test it come back into our main activity
103:40 - uh what did we do wrong here okay yeah
103:42 - so this was
103:45 - i'm going to just uh delete that and try
103:48 - again so i'm going to try a weather data
103:50 - service dot
103:52 - get forecast by id
103:56 - and we're going to just put in the
103:57 - string 44418
104:00 - because we know
104:01 - that is london
104:04 - okay so that's simpler to test than what
104:07 - i was trying to do earlier
104:09 - let's see if it works i'm going to run
104:10 - the app
104:12 - all right so the app starts starting to
104:14 - start up i'm going to come back into
104:15 - here so what we're expecting is we're
104:18 - going to get a long list of items and
104:21 - let's see what happens
104:23 - so come on app we're ready to go
104:25 - and i don't have to put anything in here
104:26 - i've got 44418 as my default id
104:31 - and
104:33 - nothing
104:34 - nothing nothing at all
104:36 - okay so i forgot something obviously
104:38 - let's go check it out and i think i know
104:40 - what it is
104:41 - so in the data weather service
104:44 - i created a request
104:47 - now what's supposed to happen to that
104:48 - request after it was made does it
104:50 - automatically run
104:51 - no it doesn't
104:52 - so just just like up here i have this
104:55 - get instance and add the request to the
104:57 - queue i need to do that
104:59 - as well down at the bottom here so i'm
105:01 - going to expect that to be the last
105:02 - thing i do
105:03 - and rerun the app
105:06 - okay so you're getting to see how
105:08 - troubleshooting happens you're probably
105:09 - going to commit the same errors that i'm
105:11 - making so it's good to see the solutions
105:14 - as well as just a good code
105:17 - okay we running yet here we go let's
105:18 - check the weather by id
105:21 - and
105:22 - anything whoa
105:23 - look at that we had a toast of a quite a
105:26 - lot of text
105:28 - so that to me looks like consolidated
105:30 - weather it's showing all of the items
105:33 - that are in there
105:35 - so that's it's producing the data we
105:37 - expect but
105:38 - we're still not there so i think maybe
105:41 - in the next video i'm going to show you
105:42 - how to make a single
105:45 - request show only today's date because i
105:49 - really don't want to show the entire
105:50 - forecast for the week that's a little
105:53 - overwhelming so we'll do that next
105:56 - hey welcome back to our weather app
105:58 - we're using api services from a weather
106:00 - service and we're making an android
106:02 - application so if you're just joining us
106:04 - go back and check out some of the
106:05 - previous videos in this video we're
106:07 - going to actually convert from this
106:10 - horrible looking toast as you can see
106:12 - coming up here it's got a lot of text so
106:16 - this huge thing in this text is going to
106:18 - be changed into a list that shows up in
106:21 - our list view so that's where we're
106:23 - going
106:26 - [Music]
106:31 - all right so let's uh let's see if we
106:32 - can tame this thing so we're trying to
106:34 - get the weather by id and we've got this
106:36 - long list of data
106:38 - we're going to modify our request here
106:41 - so
106:41 - we're into this weather data service
106:44 - class
106:45 - and up until now we've been able to get
106:47 - the uh the string here for
106:49 - the response so this response here gave
106:52 - us the entire json object now i'm
106:55 - interested in just the first item which
106:57 - is the
106:59 - the class called the consolidated
107:01 - weather
107:02 - so what i'm going to do is just pick out
107:04 - one of those things from the object and
107:07 - it's we know it's a list of json things
107:10 - json object things so i'm going to
107:12 - define a list of json object
107:14 - and i'm going to call it exactly the
107:16 - property that was in the api it's called
107:18 - consolidated weather list
107:20 - now to get that i'm going to have to go
107:21 - to the response
107:23 - and i want to get a what get a json
107:26 - something
107:27 - sure enough there is one that we can
107:29 - pick from called the json array
107:32 - and the name of that is called
107:34 - consolidated weather
107:40 - so hopefully that works now the
107:42 - hopefully part is where the computer
107:44 - says no you're not going to just hope
107:45 - for it you have to surround this with a
107:48 - try catch because if it doesn't work i'm
107:50 - going to produce an error
107:53 - all right so now what do we got
107:56 - okay so it didn't convert well here so
107:59 - the problem is that it says you are
108:01 - requiring a list and i found a json
108:04 - array well maybe we can do this we can
108:06 - just change this to a
108:09 - json array type so let's go json
108:13 - array is that in there json array
108:17 - okay good so now i've got the right data
108:18 - types i've got json array coming here
108:21 - and the type that we're getting is a
108:22 - json array
108:24 - beautiful
108:25 - now i only care about uh each item
108:27 - individually so we're going to go loop
108:30 - through this and pull it out but before
108:33 - we do the loop let's just pull out the
108:34 - first item
108:36 - all right so what i'd like to do is
108:37 - create a new
108:39 - instance of the weather report model
108:41 - remember that model that has all the
108:43 - properties and so i'm going to just say
108:44 - hey make me a new one now i've got an
108:47 - error that says you can't make me a new
108:49 - one unless you provide me with all of
108:51 - these properties
108:53 - oh my goodness that's a long constructor
108:55 - well it could be done
108:57 - and uh it would be one long line
109:00 - so i'm going to cheat i'm going to make
109:02 - another constructor that has no
109:04 - parameters
109:05 - so let's go back to the weather report
109:07 - model
109:08 - and i'm going to generate another
109:09 - constructor so slip it in right here
109:11 - below the first constructor generate a
109:14 - constructor and this time i'm going to
109:16 - not select anything so let's see just
109:18 - select the first item
109:20 - and there it is this isn't a null
109:22 - constructor or an empty constructor
109:24 - let's see if that will work now
109:26 - so now it's happy it says
109:28 - you can create basically an empty
109:30 - weather report model and then one by one
109:33 - i'm going to fill those items in
109:35 - so i need to know the list of all of
109:37 - those items so uh wow this is a lot
109:43 - so i might also just copy the list here
109:47 - and i'm going to dump it in
109:49 - right in this section even though it's
109:51 - going to cause some errors it's going to
109:53 - say hey i have no idea what those
109:54 - properties are all right so now i need
109:56 - an object that i can pull all these
109:58 - properties off of
110:00 - so i have so far been able to
110:03 - get the json object response and then i
110:06 - was able to get the consolidated weather
110:08 - list
110:09 - so i know that the first item in the
110:10 - consolidated weather list is a
110:13 - is a json object so
110:16 - let's do that let's go json
110:18 - object
110:21 - and we'll call this thing
110:23 - first day
110:24 - from api
110:27 - and he is going to be the
110:30 - consolidated weather list
110:32 - and we're going to get
110:34 - item zero
110:38 - okay did it work
110:40 - so i know that i'm supposed to get the
110:41 - first item out of the list and it's
110:43 - going to be a json object but
110:46 - it isn't guaranteed to be a json object
110:48 - so it says
110:50 - do you want to cast this if i put in the
110:51 - cast it says i'm going to convert this
110:53 - into a json object i think that'll work
110:56 - because
110:57 - in my in my service the first item
111:00 - let's take a check again
111:02 - this is definitely the first item in the
111:04 - list is a json object so the cast should
111:07 - have no problem at all
111:10 - all right so now how are we going to get
111:11 - all of these properties so i'm trying to
111:13 - get first a to get a bunch of properties
111:15 - so let's do first day
111:17 - dot set
111:18 - and the first property is that i'm going
111:20 - to set is the id now we're going to get
111:22 - the id
111:23 - what's going to come from the first
111:25 - day from the api dot get
111:28 - and i'm going to choose the get item
111:31 - and its value is
111:33 - id
111:35 - okay this is going to take a while so
111:36 - just watch me type
111:54 - all right so this next process is quite
111:56 - tedious we have to go and get all of the
111:58 - properties from the first day from api
112:02 - object and we're going to assign those
112:04 - to one of the properties in our model
112:06 - which is called first day that's the
112:08 - instance so you can see i'm going to say
112:10 - we're going to set the id
112:12 - and we're going to get it from the
112:14 - integer called id in our api
112:17 - and then they're going to set the
112:18 - weather state name which is also from
112:20 - weather state name so we're going to get
112:22 - these as mostly strings so it's get
112:25 - string get string get string get string
112:27 - however when we get down to the set min
112:30 - temperature we are going to encounter a
112:33 - float
112:34 - and it doesn't have an option apparently
112:36 - to get a float
112:38 - so you could use probably get double
112:40 - or get long either one of those and it
112:43 - will correctly parse the value which is
112:45 - a decimal number
112:46 - and then we're going to assign it to our
112:49 - property which is a float so java does
112:51 - allow you to cast a
112:53 - double or a long into a
112:56 - float now when we're all done here we're
112:59 - going to have all the properties with
113:01 - the correct spelling so make sure that
113:03 - they're all spelled exactly right
113:05 - if they're one of them spelled wrong
113:07 - it'll crash and we'll find the error but
113:09 - it's better not to have that error of
113:11 - course now since i've got all of these
113:13 - things typed in now and hopefully you do
113:15 - too i'm going to then delete all of
113:17 - these different properties that came
113:19 - from the class
113:21 - and when we're done we're going to have
113:22 - first day as the proper thing that's
113:25 - going to be returned
113:27 - so to return it that's the catch we need
113:29 - to come up with another uh return type
113:32 - so let's go and look at the volley
113:35 - response listener i'm going to copy that
113:37 - and i'm going to now use it in the next
113:40 - item so i'm going to create another
113:41 - interface
113:43 - and so the response listener now for the
113:46 - forecast so we're going to call this
113:47 - thing maybe a
113:49 - forecast
113:52 - forecast by id
113:55 - response
113:57 - and that is what's going to come down as
114:00 - my
114:01 - reti time to return so instead of
114:04 - returning a string i'm expecting it to
114:06 - return a single value called a
114:09 - weather report model
114:11 - and let's just put him in there as the
114:13 - return type that we're going to
114:15 - hopefully
114:16 - play with at the end
114:18 - let's see we have to tell it that we're
114:20 - going to expect this so we're going to
114:22 - put in here the
114:23 - forecast
114:25 - response let's see for
114:27 - cast
114:29 - by id response
114:32 - and let's see
114:34 - forecast by id response
114:37 - very good
114:38 - and now here we can do forecast by id
114:41 - response dot
114:42 - on response we're going to send back our
114:45 - first day
114:47 - man that was a lot of work to get to
114:48 - there but this will hopefully return it
114:50 - to our main activity
114:52 - okay so the goal here is to uh send this
114:55 - uh first day response back
114:57 - uh let's check a few of things up here
114:59 - so here is a toast
115:01 - that responds it sends the entire
115:04 - object so i'm going to just comment that
115:06 - out we don't need him anymore that was
115:07 - for testing let's go to the main
115:09 - activity
115:10 - and we need to now put in the response
115:13 - listener so that's a new
115:15 - forecast
115:18 - there it is
115:20 - response
115:22 - so let's uh check to see if we on the
115:24 - response here i want to do a toast here
115:27 - and i want to
115:28 - bring back the what was the object there
115:31 - it's called weather report model
115:34 - let's see weather report model and we're
115:35 - going to do a two string
115:37 - so for lucky we're going to get a
115:40 - weather report and if we're not so lucky
115:42 - we'll put an error in so let's put in a
115:43 - toast here
115:45 - and we'll say something wrong here
115:47 - and we'll have to figure out what that
115:49 - is in the error logs let's let's run it
115:51 - and
115:52 - see what happens so i started up here
115:56 - and
115:58 - run
115:59 - and let's try get weather by id
116:02 - and
116:05 - looks like i get nothing
116:07 - so something didn't go well so i'm going
116:10 - to come back into the code here i'm
116:11 - going to switch to logcat let's see
116:13 - where the log header there it is
116:15 - and we've got an issue
116:19 - line number 89 and 83 and here is a
116:22 - message
116:23 - no value for consol consolidated so i
116:26 - spelled this wrong let's let's fix that
116:29 - let's see click on line 89 there it is
116:32 - line 89
116:33 - which is this here so consolidated
116:35 - weather i obviously spelled wrong let's
116:38 - uh
116:39 - let's copy consolidated weather from the
116:42 - code right there
116:43 - and over over write my spelling error
116:46 - okay let's try again okay rerun
116:49 - and try it again
116:55 - okay so all of this here it is
116:57 - get weather by id
116:59 - and we got a toast that shows all of the
117:01 - properties of that weather
117:04 - so that's a lot of stuff but it appears
117:07 - to be working correctly
117:08 - now there's one more thing i'm going to
117:10 - change here before we're done and this
117:12 - city id city id and
117:15 - we hard coded a city id and where was
117:17 - that at
117:18 - so right here we're going to do the city
117:21 - id is not from four four four one eight
117:25 - i'm going to get it from the edit text
117:27 - data input
117:28 - and get the text and change it to a
117:30 - string
117:31 - so now we should be able to get weather
117:33 - for anybody
117:34 - and anyone that the service knows about
117:38 - so let's check it out i'm going to try
117:41 - putting in
117:42 - london and i'm going to try to put in
117:44 - some other names let's see
117:45 - 44418
117:47 - get the weather by the id
117:50 - and sure enough there it is
117:52 - now i wanted to know what the uh
117:55 - let's try some other city let's go with
117:57 - phoenix again
117:59 - and get the id number
118:01 - oh man i don't remember how to copy that
118:04 - so
118:04 - let's uh let's come back into our api
118:09 - and see if we can get an id number so
118:11 - let's see london
118:14 - let's change that to phoenix so we can
118:16 - get an id number there it is
118:18 - so i'm going to copy this 247 1390
118:23 - and put it right into my
118:26 - id there see can i paste it
118:29 - no i can't let's try it 2 4 7
118:32 - 1
118:33 - and nine zero i got that right
118:35 - and what do we have there it is i've got
118:38 - ourselves a number that seems to be
118:40 - valid if i put in an invalid number i'm
118:42 - gonna add a nine
118:43 - what do we get
118:45 - and
118:47 - anything
118:49 - anything at all
118:52 - appears that it doesn't work so it's
118:54 - causing an error anyway if i put in a
118:56 - correct number
118:57 - i've got myself a weather report
118:59 - okay we're getting further along we're
119:01 - going to now create a list of stuff here
119:03 - and we'll show not just the first day
119:05 - but all of the days of the weather
119:07 - but this video is already long enough so
119:09 - we'll save that for the next next up is
119:11 - to create a list of the forecasts
119:14 - hey welcome back to another part for our
119:16 - weather api app in the last video we
119:18 - were able to create a service that would
119:20 - give us the weather id for the first
119:24 - day of the report so you can see that
119:26 - this list here is for phoenix and when i
119:29 - choose get weather by id i get one day
119:32 - so the first thing says light clouds and
119:35 - that's what it says here so what our
119:37 - goal is now is to take the
119:39 - report here and show all of these
119:41 - reports
119:43 - and put them in a list
119:45 - [Music]
119:52 - okay so to create this list we're going
119:53 - to have to modify the type of data that
119:55 - is sent back from our service so let's
119:58 - go look at the service that was created
120:00 - called the weather data service
120:02 - and this thing is supposed to get an
120:03 - entire list and right now it just does
120:06 - something called first day as you can
120:08 - see from our code here this line here
120:11 - says just get me the first day so what
120:13 - i'd like to do now is to get the entire
120:15 - loop of the list of things
120:18 - so first date is rather misleading i'm
120:20 - going to name this as one day so let's
120:22 - do a refactor and rename and i'm going
120:26 - to call this thing
120:27 - one
120:28 - day let's see if i can get it right one
120:31 - day
120:33 - let's call it one day weather all right
120:36 - now
120:37 - instead of zero we're going to do the
120:39 - loop
120:41 - all right so i want to make a for loop
120:43 - that's going to go from zero to the
120:45 - length of the list and remember the
120:47 - length of the list is consolidated
120:49 - weatherlist dot length
120:51 - and then instead of getting just one
120:53 - item we're going to go through all the
120:55 - lists
120:56 - all right so let's do a couple of
120:57 - changes here
120:59 - i have a problem with spelling
121:00 - consolidated weather so i'm going to
121:04 - change this
121:05 - to the word consolidated spelled
121:07 - correctly
121:09 - and then paste over the others
121:12 - okay instead of item zero it should be
121:14 - item i
121:15 - so if you remember up at the top of my
121:18 - class here i have a list already it's
121:20 - called a mod it's called report
121:23 - and so let's let's change that maybe to
121:25 - the word report
121:27 - so i'm going to rename that and let's
121:28 - call it weather report models something
121:30 - plural so we know it's a list
121:32 - now down at the end of the list we're
121:33 - going to add one
121:35 - all right so we're going to add one day
121:36 - weather to the weather report models
121:39 - now when we get to the callback instead
121:41 - of responding with just one item we're
121:43 - going to
121:44 - talk to the entire list
121:47 - okay so that's going to break something
121:48 - it's going to say that your
121:50 - your callback is not designed for a list
121:53 - it was designed for a single item
121:55 - so let's go and change our
121:58 - list up here so our callback is supposed
122:00 - to give us a
122:02 - list of weather report models
122:06 - all right so it's going to do weather
122:07 - report models
122:08 - and then the response here is going to
122:11 - hopefully match with that
122:13 - now let's go back into change in the
122:15 - main activity let's fix it as well here
122:17 - so this is supposed to
122:19 - capture a an entire list of things
122:22 - so let's change this to a list
122:25 - of weather report models
122:28 - and
122:29 - let's call this thing our
122:31 - same idea so weather
122:34 - report
122:35 - models
122:36 - and then we're going to import the class
122:44 - okay so now we have ourselves
122:47 - the list here instead of doing a toast
122:49 - we are going to now
122:50 - include this as part of our list view
122:54 - so we need a layout adapter
122:57 - okay so now we have to create two things
122:58 - first of all we have to create an
122:59 - arrayadapter and then assign that
123:02 - arraylap adapter to the list view so the
123:05 - arrayadapter is a class that contains a
123:08 - few properties first of all the
123:10 - context has to be set so we'll use
123:12 - mainactivity.this for the context
123:14 - and then we're going to dig into a
123:16 - predefined arrayadapter type so
123:20 - type in
123:23 - android.r.layout.simplelist item1
123:25 - so there are other different types of
123:27 - simple list adapters we can pick but i
123:29 - always go to this one it seems to work
123:31 - fine
123:32 - this is not something that i defined
123:33 - it's something that was pre-defined
123:35 - as something given to us in android the
123:38 - last item in the list is the
123:40 - actual list that's going to be chosen
123:43 - for the values
123:45 - and then we simply set the adapter here
123:47 - into
123:48 - so let's switch back into the
123:50 - consolidated weather page where we can
123:51 - see the actual number come up
123:53 - and i'm going to type in a number here
123:55 - so let's use the exact same number that
123:56 - was given to us so this is a 2 4 7
124:01 - 1 3 9 0 which is phoenix and choose get
124:03 - weather by id
124:05 - and there it is so this is a
124:08 - one item in the list that's two items
124:10 - three
124:12 - so it's not very easy to read but we do
124:15 - have a list
124:16 - let's fix it up so it's easier to read
124:18 - i'm gonna go back and change the model
124:20 - to string
124:23 - so let's go into the model here so the
124:24 - weather report model
124:26 - so let's just fix this up a little bit
124:28 - let's uh get rid of some of these things
124:30 - so like the
124:32 - id we can get that out of the way
124:35 - and let's see the weather state
124:41 - i'm seriously just going to remove most
124:43 - of this stuff here so we'll get the
124:44 - weather state name
124:46 - and then what else do we want let's
124:49 - create i don't really care let's get
124:51 - let's the date is important
124:53 - so let's put in the word um
124:56 - date and a colon
124:59 - and let's see the
125:00 - maximum temperature and let's just go
125:02 - with those so
125:04 - take everybody else out
125:10 - and that shortens things up quite a bit
125:14 - so
125:16 - instead of min i'm going to change it to
125:18 - low
125:19 - for max i'm going to change it to high
125:20 - so i'm shortening things down you can
125:23 - make this say pretty much
125:25 - whatever style you want
125:27 - it's just a string
125:29 - and let's uh let's fix it
125:39 - all right so let's see what that does uh
125:40 - see if it's any better let's run it
125:42 - and uh we'll get a shorter view for each
125:45 - item in the list
125:55 - okay so let's bring this back up again
125:57 - so i can see this number
125:58 - let's type in a number for 2 4 7
126:01 - one three nine zero
126:03 - and get the weather
126:06 - so i'm getting six different weather
126:08 - reports but they're all showing uh for
126:10 - the day five
126:13 - thirty
126:14 - and so that doesn't seem quite right
126:15 - let's go check it out 5 30.
126:19 - sure enough it says heavy clouds
126:21 - and i don't understand why it's showing
126:24 - just the last one okay coming back into
126:26 - the code here i realized i did something
126:28 - a little bit odd so this here was left
126:30 - over from the previous iteration of my
126:32 - program i created the object and then i
126:35 - started the for loop so i'm going to cut
126:36 - this out and put it inside the for loop
126:39 - so we recreate a new one each time we go
126:41 - through the loop
126:43 - so we create a new object and then at
126:46 - the end we add it so let's see if that
126:47 - helps at all
126:49 - and the weather report model i'm going
126:51 - to
126:51 - fix up a little bit here so
126:54 - the
126:56 - so i'm going to change we don't need to
126:58 - have this
127:00 - listed here like
127:02 - like that let's
127:04 - take that out and let's see if that
127:06 - works any better
127:28 - all right so it looks like this is
127:29 - working better i put in the id number
127:31 - for phoenix
127:32 - and i get the report
127:34 - so it could probably be formatted a
127:36 - little bit better i need a space in here
127:39 - so the two-string method isn't that
127:40 - pretty but it could be improved upon so
127:43 - what we're going to do next then is
127:45 - instead of just showing the number here
127:47 - which is impossible for me to remember
127:49 - except for the one
127:50 - i think was 444 118 which was london and
127:54 - then beyond those two cities i don't
127:56 - remember any of them so for the last
127:58 - video or the last section we're going to
127:59 - have to do is create this button here
128:01 - called weather by name and so we'll put
128:04 - in the name of the city such as london
128:06 - and that will generate the list of data
128:09 - that we have in front of us here instead
128:10 - of trying to remember the city's id
128:12 - number so that's coming up next
128:15 - hey welcome back to another video for
128:16 - our weather api demo in the previous
128:19 - videos we were able to get a list of
128:22 - data from the cities now instead of
128:24 - typing in the city number i'm going to
128:26 - actually be able to create this view by
128:28 - looking at the city name
128:32 - [Music]
128:36 - so in this section we're going to modify
128:39 - the function here or the method for get
128:41 - city name right now it just tells me
128:44 - what i typed so let's uh fix that
128:47 - so let's go back into the code here and
128:49 - we are going to add a new item into the
128:52 - report
128:54 - so in a previous video we created a
128:57 - promise down here i'm going to uncomment
128:59 - that promise
129:00 - and here's what we're going to do we're
129:02 - going to change this to void and we are
129:04 - going to get the city forecast if the
129:07 - person gives us the city name
129:09 - so we were able to get the values out of
129:12 - this thing if we were using the id
129:15 - number so that's not very convenient so
129:17 - we're going to have to change this to
129:19 - get the by the city name
129:22 - so here's the strategy we're going to
129:24 - call twice to the api to get our values
129:27 - so the first is we are going to get the
129:29 - city id given the name we were able to
129:32 - do that earlier then we're going to
129:34 - fetch the city forecast if we have the
129:36 - city id
129:38 - so we're basically combining the two
129:40 - functions that we've already created
129:44 - all right so to start off here we're
129:45 - going to call the function called
129:48 - getcityid
129:49 - and we can provide it with the city name
129:52 - because that's given to us in the
129:53 - parameter above here
129:55 - now the
129:57 - response that is given from this
129:59 - function is a
130:00 - volley response listener and so we'll
130:03 - create a new instance of that
130:05 - and so we'll have two different
130:06 - responses to handle one is on error and
130:09 - the other is on response
130:12 - so inside of response we can now claim
130:14 - that we have the city id so that's what
130:17 - this function just got to us
130:19 - now we're going to turn around and call
130:21 - a second function which is get forecast
130:23 - by id
130:25 - this method also has a response it's
130:28 - called forecast by id response
130:31 - so this callback is also going to happen
130:34 - and then when we get to the on response
130:37 - item we have a promise that we can make
130:40 - that says we have the weather report and
130:42 - we can send that back to the main
130:44 - activity
130:46 - so we're starting to see nested
130:47 - callbacks here this is where people
130:49 - start calling it callback hell because
130:51 - we can lose track of the parentheses and
130:54 - brackets very easily it's confusing
130:58 - all right so now we have this claim here
131:00 - that we have the weather report now we
131:02 - have to create another response and a
131:04 - callback to make this work so let's
131:06 - define one at the top here
131:08 - all right so we're going to create the
131:10 - interface that's going to define the
131:11 - callback so i'm just going to use it a
131:13 - name that matches closely to this
131:15 - function call it getcityforecast by
131:18 - name callback
131:19 - and the same two different types of
131:22 - things are promised in here in the
131:23 - interface we're going to have an on
131:25 - error and a non-response the response of
131:27 - course is the important one we want to
131:29 - respond with a list of weather report
131:32 - models
131:33 - now that we have the callback defined we
131:35 - can go add it to our function so we're
131:38 - going to say that we're expecting to see
131:40 - a
131:41 - callback called
131:41 - getcityforecastbynamecallback
131:44 - once that's defined we can come down
131:46 - into our method on the response from the
131:48 - previous callback and call this one so
131:50 - we're going to do get
131:51 - callback
131:52 - and we're going to say on response
131:54 - and we are going to then reply with this
131:57 - thing called weather report models
132:00 - okay that should reply correctly so now
132:03 - let's go back into our main activity and
132:05 - we can probably duplicate a lot of the
132:07 - things that we did from the previous
132:10 - guys so let's just copy
132:11 - and paste
132:12 - and we will modify
132:15 - so we got ourselves here
132:17 - instead of get by id we're going to say
132:19 - get city
132:20 - by name
132:22 - and we're expecting
132:24 - a different
132:26 - reply
132:31 - and so we've got ourselves here the list
132:35 - and i think the weather report models
132:37 - should come back as we expect them to
132:40 - wow that was
132:42 - a lot of code but let's see if it works
132:48 - okay we're up and running so let's put
132:49 - in a city and let's hide the keyboard
132:53 - and choose get by name
132:55 - so hopefully london will now populate a
132:57 - list of items
132:59 - and we're getting nothing
133:01 - so oh it did come up so it just took a
133:04 - little while so why was it so slow well
133:07 - it's slow because we're calling the api
133:09 - twice
133:10 - let's see if it's just as slow if we
133:13 - type in another city and
133:15 - see what happens so that one came up
133:17 - quite a bit faster so they're getting
133:19 - light rain in kansas city
133:21 - and let's see what's going on in lima
133:24 - down there in south america
133:27 - looks to me like it's running so we've
133:29 - got ourselves get by id
133:31 - or get the city ids you can see it shows
133:33 - up
133:34 - and if i try to get the id i have to
133:36 - actually put in the number here so let's
133:38 - put in four four four one
133:41 - eight
133:41 - let's see one more extra four there so
133:44 - we can show london
133:47 - that seems to work
133:48 - and then finally we're able to put in a
133:50 - number
133:51 - or name here so let's try new york
133:54 - and see what the weather is in new york
133:56 - and there it is they have clouds so
133:58 - we've got ourselves a finished app
134:01 - this here is quite complex it shows us
134:04 - how to use the api service shows us how
134:07 - to use callbacks
134:09 - and it shows us how to work with a
134:11 - singleton so several
134:13 - different things that are now new to
134:15 - your toolbox in your java programming
134:17 - kit
134:18 - so please uh leave your comments below
134:20 - to see if there's uh any criticisms or
134:23 - any suggestions which you would have to
134:24 - make this look better so i think the
134:27 - first thing that i would do is instead
134:28 - of using a simple list adapter i would
134:30 - create more of a complex one
134:33 - in the api instructions they're strongly
134:35 - encouraging us to use icons and so if
134:37 - you look back
134:39 - at their page here you can see
134:41 - they've got all these icons that you
134:43 - should probably put into your app and
134:44 - you can show them as pictures instead of
134:46 - just text in your forecast so there's
134:49 - lots of things that you can improve but
134:50 - this is a good start so thanks for
134:52 - watching and if you like the channel go
134:54 - ahead and subscribe and look at some of
134:55 - the other items there's not only android
134:57 - programming here but there's c-sharp
134:59 - there's php a lot of work with databases
135:01 - and computer security so a lot of things
135:04 - to learn here and if you're interested
135:05 - in studying at grand canyon university
135:08 - look us up online and you can see some
135:10 - of these activities are actually taught
135:12 - in the classroom so we'll see you soon