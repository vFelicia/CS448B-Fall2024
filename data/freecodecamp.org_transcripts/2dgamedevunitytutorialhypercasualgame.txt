00:00 - what is up guys fah here here with
00:03 - another cool tutorial this time is a
00:05 - small hyper casual game and as always
00:08 - before we start coding and creating and
00:10 - doing all the magic we're going to take
00:11 - a look at what game we're going to
00:12 - create but before we do that hit that
00:15 - subscribe button hit that notification
00:17 - button and smash that like button i feel
00:20 - like those like those vloggers you know
00:22 - smash a like anyways but seriously
00:26 - subscribe hit that notification button
00:28 - and smash the like button so now let's
00:29 - take a look at what game we are going to
00:31 - create so when i hit the play button you
00:33 - will see that we have these platformers
00:35 - they are going up our our background is
00:37 - going down we hear the background music
00:39 - and we have different platforms here you
00:41 - see you hear the sound effects now we
00:43 - are dead and the game will restart so
00:45 - again let's try to beat the game and
00:48 - here we will also land on one of the
00:50 - breakable platforms which eventually
00:52 - will break and bam you see it broke and
00:54 - we fell down and notice how our cube our
00:58 - game player is like rotating and stuff
01:00 - so yeah that is also a cool effect you
01:02 - will also have you see these moving
01:04 - platforms that are moving us to the side
01:06 - we will see how we can create that and
01:07 - we will see how we can randomize all of
01:09 - this and bam we are dead and the game
01:11 - will restart
01:13 - pretty simple game i mean it looks
01:14 - pretty simple but
01:16 - it is not very easy to create we will
01:19 - see that we will
01:20 - add some smart code to randomize these
01:23 - platforms so on and so forth we will
01:25 - learn a lot so uh yeah stick with me and
01:28 - you will have a lot of assignments in
01:30 - this video so if you truly want to learn
01:31 - i'm giving you assignments to complete
01:33 - and i'm giving you hints how to complete
01:35 - that and everything that you finish
01:37 - you'll show me that in the facebook
01:39 - group and then i will grade it like you
01:40 - know in school you have a plus but
01:42 - probably will get a minus anyways
01:44 - well let's start and dive into the
01:46 - tutorial and before we do that you can
01:48 - download the asset and the complete
01:50 - project from
01:52 - www.austrians.com or link is in the
01:54 - description below so uh yeah have fun
01:56 - and enjoy the tutorial i am in a new
01:59 - project and this is a 2d project and as
02:02 - always we are going to start by
02:03 - importing the assets so we have the
02:05 - sounds and we have the sprite simply
02:07 - drag and drop them right here and voila
02:10 - unity will import and by the way the
02:12 - assets and this complete project you can
02:14 - download it link will be in the
02:16 - description below
02:18 - so now the first thing that we're going
02:20 - to do is create our background and this
02:22 - is going to be a portrait game so we're
02:25 - gonna go here and change our view now
02:27 - this is really important so bookmark it
02:29 - write it down on your notepad on your i
02:32 - don't know piece of paper
02:33 - where you write down your notes because
02:35 - a lot of people have issues with this
02:37 - and that is because they don't pay
02:38 - attention how can you change this screen
02:41 - size well it's really really simple for
02:44 - that let me take my highlight tool here
02:47 - it is
02:48 - so you see here i'm in the game tab and
02:51 - right here
02:52 - where the game tab is you have this
02:54 - where it says full hd now for you maybe
02:57 - it will not say full hd well not maybe
02:58 - but surely because i created this
03:01 - you can click on this and voila you see
03:03 - here you can have some
03:05 - already predefined resolution such as
03:08 - 5.4 or 4.3 or 32 or 1610 169 so and so
03:14 - forth you get my point
03:15 - but here at the bottom you have this
03:17 - plus circle so you see this well i
03:20 - cannot use my highlight tool when i'm
03:22 - clicking on this anyways you see this
03:24 - plus circle here you can click on it it
03:27 - will open this pop-up when the label
03:29 - here is the name of that resolution so
03:32 - name of your resolution for example full
03:34 - hd
03:36 - hd so on and so forth and here you can
03:39 - set the width and the height so for this
03:42 - example
03:43 - or for this tutorial i chose 480 by 800
03:48 - so you're gonna type width 480
03:51 - height 800 and you're gonna press okay
03:53 - when you do that you will see that
03:55 - resolution right here here it is and i
03:57 - can click on it now and bam so i have
04:00 - changed the view so now my camera
04:04 - is also changed you see here how the
04:06 - camera is now
04:07 - like a rectangle or actually it's not a
04:10 - rectangle i think it is yeah rectangle
04:12 - and if i go here and if i change it to
04:14 - full hd you see
04:15 - it is in landscape bone when i go back
04:18 - here and change it to 4800 it is in
04:21 - portrait mode so this is how you change
04:24 - the screen in unity and this is how
04:27 - would you create a game for a portrait
04:31 - resolution or for a portrait mode
04:34 - okay so moving forward we are going to
04:36 - create a quad so i'm going to right
04:38 - click here and go under 3d object and
04:41 - create a quad now
04:43 - if you followed my tutorial about the
04:45 - space shooter and hopefully i've
04:47 - published that before this one because i
04:49 - already have them created anyways and if
04:51 - you watched also my parallax scrolling
04:54 - tutorial you will know what i'm gonna do
04:56 - so i would encourage you to try this on
04:58 - your own try creating that parallax
05:00 - effect on the y-axis
05:03 - so that well you can practice
05:06 - and then you can come back to the video
05:08 - and see if you did it correctly so i'm
05:10 - gonna change the quad name to bg
05:13 - and i'm gonna go and right click here in
05:16 - the project and create a folder i'm
05:18 - going to call it material and i am going
05:20 - to go here and create a new
05:24 - material i almost created a script and
05:26 - this one is going to be our bg material
05:29 - and attach it right here on the bg game
05:32 - object so it is attached
05:34 - did i attach it actually no so now it's
05:37 - attached okay the next thing that we are
05:39 - going to do is change the shader from
05:41 - standard here to unlit texture so voila
05:45 - simple like that so now i can click on
05:46 - the drop down list we can attach a
05:48 - texture here which is our sprite so we
05:50 - can go here in our sprites and i can
05:52 - select the background here it is so
05:54 - select the bg and now drag and drop this
05:56 - background right here and the bam here
05:59 - is our background of course we are going
06:02 - to resize this bg so we need to set the
06:05 - scale for the x at six and add the y at
06:09 - ten and voila this is our background so
06:12 - we are in the game view and this is what
06:14 - we see and if we transfer
06:16 - this game on our phone this would be
06:19 - what we would see i'm also going to set
06:22 - the z at 10 because this is a quad
06:25 - and
06:26 - because of this it will be rendered
06:28 - behind all other game objects so set the
06:31 - z at 10 and of course we can change this
06:32 - later on if the background is obscuring
06:35 - some of the game objects so we can
06:37 - easily fix that anyways go here in the
06:40 - assets and right click and create a new
06:42 - folder for scripts and inside of that
06:45 - one i'm gonna right click and create a
06:47 - new folder for rbg script
06:51 - and inside right click and create a c
06:54 - sharp one this is going to be bg scroll
06:57 - and we're going to attach it on the bg
06:59 - game object so i'm gonna go here and
07:02 - attach it so simply drag it and drop it
07:05 - and double click here open it in visual
07:07 - studio now
07:09 - if you watch a couple of my previous
07:11 - tutorials you will probably notice that
07:14 - i'm testing you along the way and it's
07:16 - not going to be different in this one so
07:18 - prepare for a test pretty soon anyways
07:21 - we are going to have here a public float
07:24 - for our scroll underscore speed which by
07:27 - default i'm going to say 0.3 now of
07:30 - course you can change this you see i set
07:32 - it to be public so if the speed is not
07:34 - what we want we can change it easily we
07:37 - are also going to get a reference to the
07:38 - private mesh render that i'm going to
07:40 - call mesh renderer
07:43 - and i would encourage you to try to do
07:45 - this on your own as i already said try
07:47 - to scroll it on your own and if you
07:49 - watch my space shooter tutorial you will
07:51 - see one problem that you're gonna get
07:53 - same as what we did in our space shooter
07:55 - tutorial so here we're going to say mesh
07:58 - render is equal to get component and
08:01 - that's going to be our mesh renderer
08:03 - component
08:04 - so simply now here below the update we
08:07 - are going to create void scroll
08:09 - and inside of this function first of all
08:11 - we're going to call it in the update so
08:13 - we're going to say here scroll not
08:15 - scroll speed but scroll this one right
08:18 - here so scroll
08:20 - and we are going to inside of this
08:22 - function we're going to program our
08:24 - functionality for scrolling and what
08:26 - we're simply going to do is we're going
08:27 - to say here vector 2 offset we're going
08:30 - to get the offset of the texture which
08:32 - is going to be equal to
08:34 - mesh renderer
08:36 - dot get texture or actually shared
08:39 - material excuse me dot get texture
08:42 - offset and we need to pass the name of
08:44 - the texture
08:46 - and the texture name in quotes is
08:49 - underscore
08:50 - main text
08:52 - this is the name of the texture so
08:55 - underscore
08:56 - main text with capital m capital t
08:59 - now you know that i don't like this hard
09:02 - coding so your first assignment for this
09:04 - video is to create a common script or a
09:08 - shared script that has
09:10 - all the names tags and so on and so
09:14 - forth that we are going to use that we
09:16 - write as strings so i want you to do
09:18 - that because i'm not going to do it here
09:20 - that's your job i'm testing you out
09:22 - anyways here we're going to say offset
09:25 - dot y so the y axis we're going to say
09:27 - plus equals time dot delta time
09:30 - multiplied with the scroll speed and
09:34 - voila after that we simply need to call
09:36 - our mesh render dot share material dot
09:39 - set texture offset so set
09:42 - texture offset and again we need to pass
09:45 - the name which is the same right here
09:46 - and this is
09:48 - why i don't like hard coding and here we
09:50 - are going to set the offset now this is
09:52 - one reason why i don't like hard coding
09:55 - you see here we're using this and here
09:57 - we are using this it is better to
09:59 - declare that variable first
10:01 - in a common script if you're going to
10:04 - use it on multiple places in case of
10:06 - this script you can declare it right
10:08 - here so you can simply declare it here
10:10 - as a private string
10:11 - but i'm not going to do that that's your
10:12 - job so you need to fix that
10:15 - anyways if i go inside of unity and if i
10:20 - clear first the console for some reason
10:22 - i like clearing the console i don't know
10:23 - why don't judge me and if i hit the play
10:26 - button the script is attached and we
10:28 - should see that our background will
10:29 - start to scroll and voila in indeed our
10:33 - background started to scroll but where
10:35 - is our background we don't see it
10:37 - anymore
10:38 - well let me go here and set the offset y
10:41 - back to one
10:43 - so what is wrong here
10:45 - what did we do and let me set the offset
10:47 - here
10:48 - actually offset here zero zero so yeah
10:52 - what did we do and why isn't it
10:55 - scrolling it is scrolling but it's not
10:57 - scrolling how we
10:59 - intended it to scroll and as i said this
11:03 - is the same issue we had in the space
11:05 - shooter tutorial in the 2d space shooter
11:07 - the same exact issue if you follow that
11:09 - you would know what we need to do is go
11:11 - back here inside of our sprites and
11:14 - select the background and i like this
11:16 - approach really because
11:18 - it is beneficial for you i first show
11:20 - you the problem that you will have and
11:22 - how you can fix it so you're going to
11:24 - select the background and here in the
11:27 - options you see here with the options
11:29 - that we have we have this advanced right
11:32 - here if it's folded you're going to
11:34 - unfold it so if it's folded like this
11:36 - actually it's below excuse me if we set
11:38 - the texture like this to default then it
11:40 - would be in the advanced but here is
11:42 - actually below where it says this wrap
11:45 - mode you see this let me just go here
11:47 - and clear it you see this wrap mode
11:50 - right here this is a drop down list
11:53 - currently it is set to clamp we need to
11:55 - click here and we need to set to repeat
11:57 - and then we need to hit apply at the
11:59 - bottom right corner here for this
12:02 - texture or for this sprite for this to
12:05 - take effect for this change to take
12:06 - effect so hit apply on repeat and now
12:10 - if i go here and hit the play button we
12:12 - will see that the bg will scroll and
12:14 - scroll and scroll and it will repeat so
12:17 - the texture will repeat itself and this
12:21 - is what we need to do so when these
12:24 - textures are not working they are not
12:26 - scrolling how they supposed to be in
12:28 - your code and you did this right here
12:31 - then the issue is simply going here
12:33 - selecting the background and setting the
12:36 - wrap mode to repeat
12:38 - and voila that will fix the issue moving
12:41 - forward the next thing that we are going
12:42 - to do is prepare our platforms because
12:45 - we're going to have different platforms
12:47 - so first of all i'm going to go into the
12:48 - sprites and platforms folder and then
12:51 - into the standard platform so this one
12:54 - standard platform you're going to put it
12:56 - here and voila this is our platform so
12:58 - what i'm going to do is simply name it
13:00 - platform
13:01 - and if you remember a few moments ago
13:04 - when i said that we're going to set the
13:05 - z-axis of our bg because it's a quad at
13:07 - 10. well pay attention what happens if i
13:09 - if i set it
13:11 - at for example negative 11
13:13 - or if i set it a negative 7 you see it
13:16 - obscures our platform that's why i'm
13:18 - going to set it simply a 10 and voila
13:20 - here it is our platform is in front of
13:23 - it now the next thing that i'm going to
13:24 - do is set the order in layer for the
13:28 - platform at one so you see this right
13:31 - here well basically here where it's
13:33 - circled it says order in layer and i set
13:36 - it here to one
13:38 - that's the order that we're going to use
13:40 - to draw the platform so
13:42 - the game object or the element that has
13:44 - a sprite left render and it's on order
13:47 - in layer 0 it will be rendered behind if
13:50 - you don't know 100 what i'm talking
13:52 - about go and watch my video about orders
13:55 - or rendering layers and so on and so
13:58 - forth now of course this is too large
14:00 - for a platform for so what i'm gonna do
14:02 - is set 0.5.5 for x and y
14:07 - scale that is so scale x and scale y
14:09 - point 5.5 i'm also going to take here
14:12 - box collider 2d
14:13 - and attach that box collider to the on
14:16 - our platform i am also going to click
14:20 - here add component and add a rigid body
14:23 - component and this is going to be a
14:24 - rigid body 2d so please pay attention i
14:27 - say always i say this all the time
14:30 - it's a rigid body 2d when we cover a 2d
14:33 - game so you have here two choices a
14:36 - rigid body and rigid body 2d i think
14:38 - unity should put here rigid body 3d
14:41 - so that we know well i know and you know
14:44 - now but somebody can get confused about
14:46 - using the rigid body what i'm also going
14:48 - to do is because if we run the game now
14:50 - if i press the play button pay attention
14:53 - you see the platform simply fell down we
14:55 - don't want that what we need to do is
14:57 - set the body type from dynamic to
14:59 - kinematics so let me go here clear the
15:02 - pencil you see here the body type for
15:04 - the rigid body this one right here we
15:07 - are going to set that so click on the
15:09 - drop down list to kinematic what is
15:11 - kinematic kinematic is
15:13 - not affected by gravity we can affect it
15:16 - by velocity or add force and so on and
15:19 - so forth
15:20 - but gravity will not affect this rigid
15:22 - body whereas dynamic is affected by
15:26 - gravity so this is for our platform
15:31 - now we also have a breakable platform so
15:32 - i'm going to take another standard
15:34 - platform or actually i'm just going to
15:36 - duplicate this one and i'm going to
15:38 - rename this one to breakable platform
15:42 - so platform like this and let me just
15:45 - lower it below a little bit so here it
15:47 - is we are going to have everything here
15:49 - so same components box collider so on
15:51 - and so forth but i'm also going to click
15:52 - here on add component and add an
15:54 - animator so animator and hit enter and
15:58 - i'm going to put this animator here no
16:00 - particular reason why i'm reordering the
16:02 - component so it's not like your game is
16:05 - going to run better or you're going to
16:06 - be a better game developer if you do
16:08 - this my personal preference
16:10 - so now that we have this animator what
16:12 - i'm going to do is go here and right
16:14 - click and create a folder for animations
16:18 - and this is in the assets folder so
16:20 - create the animations folder and inside
16:22 - i'm going to create another one
16:25 - so this one is going to be breakable
16:28 - breakable plaid form
16:31 - animations animations like this
16:34 - inside i'm simply going to right click
16:36 - and create an animator controller and
16:39 - this one's going to be breakable
16:41 - controller
16:42 - and select the breakable platform and
16:45 - attach the controller so simply drag and
16:47 - drop it right here i'm also going to set
16:49 - the animation tab here
16:51 - and selecting the breakable platform
16:54 - click here create and it's going to
16:56 - prompt us to create an animation the
16:58 - first one is going to be the idle
17:00 - animation so simply name it idle and
17:03 - then well simply name it like that
17:06 - name it idle so what is the next thing
17:08 - to do the next thing is to click here
17:10 - where it says idle and if you don't see
17:13 - where that is that is here in the
17:15 - animation tab you see and here you will
17:17 - have the idle you see the animation now
17:19 - that we have created this is a clickable
17:21 - button so you can click on that and it
17:23 - will open this drop down list showing
17:25 - all the animations that we have and
17:27 - currently we only have idle so i'm going
17:29 - to click here create a new clip and this
17:31 - one is going to be break animations i'm
17:33 - simply going to name it break and hit
17:35 - enter to save
17:36 - now in the break animation i'm going to
17:39 - go quickly in sprites platforms and
17:42 - standard platform in the break animation
17:44 - select these crack zero one two and
17:46 - three and if i preview it you see what
17:48 - happens you see simply if i pay
17:51 - attention in the bottom right corner by
17:53 - the way so you will see it has its
17:55 - simulating cracks
17:57 - it's not crack like the way you think it
17:59 - is it's crack when somebody when
18:01 - something cracks okay
18:03 - not the way naughty naughty boys with
18:05 - their naughty
18:07 - whatever anyways so you see here
18:10 - platform crack zero one two and three
18:12 - simply drag and drop it here and this is
18:14 - for the breakable but for the idle we
18:16 - are simply going to put the standard
18:18 - platform and voila we're good to go now
18:20 - before we proceed and do anything we can
18:22 - preview this so i can go here and select
18:25 - the break and i can zoom in here and pay
18:27 - attention see it is breaking you see
18:29 - this is the animation you see
18:31 - it's fast when i simply hit the play
18:33 - button we will change the speed of this
18:35 - animation inside so if i go now so let
18:38 - me go here actually no we cannot do that
18:40 - because let me select the breakable
18:43 - platform yeah the idle one is the
18:45 - default one so let's set the default one
18:47 - the break one and if i go here we'll see
18:50 - you see how it is breaking so what i'm
18:53 - gonna do is let's set the speed of the
18:55 - break to 0.2 maybe point one
19:00 - yeah point one can do even point zero
19:03 - five
19:05 - yeah point zero five or point i don't
19:08 - know zero eight that's enough
19:11 - i think
19:12 - what we also need to do is double click
19:14 - on the break animation here the orange
19:16 - one now so double click on it uncheck
19:18 - the loop time so click here and uncheck
19:20 - the loop time now let me
19:22 - click on this again so the play button
19:25 - and yeah this is totally fine this is
19:27 - totally fine
19:29 - what i'm gonna do is i'm going to right
19:31 - click on the idle and set it back as a
19:34 - layer default stand which means the idle
19:36 - will be the animation the default one
19:38 - that's going to be played now this is
19:40 - for our platforms the breakable and the
19:42 - platform regular now we also have a
19:45 - spike platform so i'm going to simply
19:46 - drag and drop it here here it is and by
19:49 - the way let me just lower it here and
19:51 - i'm going to set the order in layer to
19:54 - one and this is what i was talking about
19:56 - did you see if i set the order in layer
19:58 - 0 pay attention how the spike platform
20:01 - will be rendered behind you see it's
20:02 - rendered behind this one if i set the
20:05 - order in layer to one now they are on
20:08 - the same
20:09 - order layer which means sometimes one
20:12 - element can be rendered first and
20:13 - sometimes another element can be
20:14 - rendered first but if i set it at two
20:16 - you see now the blue platform is behind
20:19 - the spike platform so this is that order
20:22 - and i have a separate tutorial for that
20:24 - anyways
20:26 - moving forward our spike platform set
20:29 - the scale 0.5.5 for x and y
20:32 - attach a box collider and this box
20:34 - collider is going to be a trigger and
20:36 - actually excuse me here it's a box
20:38 - collider 2d and let me check here if i
20:40 - attach a box collider 2d on these boat
20:42 - too yeah so it's a box collider 2d
20:45 - and check it to be a trigger and let me
20:47 - just go here in the game to see
20:49 - well we can resize it a little bit we
20:52 - don't want it to be like this you see
20:53 - because now this is circling or actually
20:57 - i don't know how you can say that this
20:59 - is a rectangle so it's rectangling
21:02 - this spike platform anyways we want to
21:04 - resize a little bit so on the x simply
21:07 - resize a little bit like this on the y
21:09 - just a little bit maybe like this yeah
21:11 - we are good to go now pay attention here
21:14 - we have the size x 2.4 and size y
21:17 - 0.61 this is for the size of the box
21:21 - collider again we are going to attach a
21:24 - component which is going to be a rigid
21:26 - body 2d
21:28 - and we are going to change the body type
21:30 - to kinematic from dynamic
21:34 - so voila we are good to go now this is
21:37 - for these platforms we also have the
21:39 - speed platform so simply what we are
21:41 - going to do is first of all go into
21:43 - animations and right click here
21:45 - folder and this is going to be our
21:48 - moving platform
21:51 - and what we're simply going to do is go
21:53 - here inside
21:55 - so sprites and platforms and speed
21:59 - platform this is the folder so go here
22:01 - and we have eight of these so select
22:04 - eight so select all of them select all
22:06 - of these eight
22:08 - and drag and drop them right here in the
22:10 - scene when you do that it will prompt
22:13 - this window for us to create an
22:14 - animation what i'm going to do is go in
22:16 - the animations folder moving platforms
22:18 - and simply here i'm going to say move
22:20 - and this is going to be that animation
22:22 - and voila and i'm going to name this one
22:25 - how am i going to name it speed platform
22:27 - or moving platform yeah speed
22:30 - platform and it's going to be speed
22:32 - platform left
22:34 - because we're also going to have a right
22:35 - one we will see in a moment how we're
22:37 - going to create that
22:38 - set the order in layer to one and if i
22:42 - run the game now we will see the
22:44 - animation so pay attention you see now
22:46 - voila this is the animation of the speed
22:48 - platform which will move our player to
22:51 - the left side now again we are going to
22:53 - also have a platform that's going to
22:54 - move him to the right side but first of
22:56 - all
22:56 - let me set the scale to 0.5.5 because we
22:59 - want it to be smaller
23:01 - let me attach a box collider 2d and make
23:04 - it a trigger actually no excuse me this
23:06 - one will not be a trigger only the spike
23:08 - platform others are not triggers they're
23:11 - going to be solid game objects so here
23:14 - add component a rigid body 2d
23:17 - make it kinematic
23:19 - and we are good to go so yeah this is
23:24 - for the platform now this is for the
23:25 - left one what i'm gonna do is duplicate
23:28 - it command d or shift or actually ctrl d
23:30 - on windows
23:32 - and you can also go here under edit and
23:35 - duplicate that also works so what i'm
23:37 - going to do is take the speed platform
23:39 - and change this from left to right and
23:42 - i'm going to move it up a little bit so
23:44 - here
23:44 - and simply here in the sprite component
23:48 - we have this flip you see we have the
23:51 - flip and what we can do is
23:53 - simply check the x for the flip and pay
23:56 - attention what's gonna happen to this
23:57 - one when i check the x bam you see now
24:00 - it is pointing to the right side and if
24:03 - i run the game we will see that one is
24:06 - playing the animation left you see and
24:08 - another one is playing the animation to
24:10 - the right side
24:12 - voila
24:13 - now that we have prepared all of our
24:15 - platforms i can go here in assets and
24:18 - right click and create in a folder and
24:20 - prefabs well name the folder prefabs and
24:23 - go here right click and create another
24:26 - folder this is going to be our platform
24:29 - prefabs
24:31 - and before we proceed to do anything i'm
24:35 - going to create a platform script so
24:37 - that we can attach it so we can attach
24:39 - the platform script and then we can save
24:41 - them as prefab so let's go here in the
24:44 - scripts and right click and folder and
24:47 - plot form scripts like this
24:50 - and right click here and see sharp
24:53 - script and this one's going to be the
24:54 - plot form script
24:57 - select all of them so all of them
25:00 - platform breakable platform so on and so
25:02 - forth and go at the bottom on add
25:04 - component and click there
25:06 - and search for platform script this way
25:08 - you will attach the script on every
25:10 - single one of these game objects so you
25:12 - see every single one of them
25:14 - has now a platform script and if you
25:17 - scroll you will see that all have a
25:19 - platform script
25:21 - so now let me just open the platform
25:23 - script here and add some
25:25 - variables that we will need for every
25:27 - platform so that we can check them
25:30 - and then we will be able to
25:33 - well continue with our game so what do
25:35 - we need well first of all we need a
25:37 - public
25:38 - float move underscore speed by default
25:42 - let's say it's equal to two we are also
25:45 - going to see here public float bound y
25:48 - which is going to be equal to six now
25:50 - what is this well because our platforms
25:52 - are going to move from down to bottom
25:55 - eventually they will get out of screen
25:58 - so if you see here if i take any
26:00 - platform if i take this one and i start
26:02 - moving it you see it's gonna move and
26:03 - eventually it's gonna go out of screen
26:05 - well when it gets to the point of six
26:08 - you see here so this is the six and i've
26:10 - measured this in the game while i was
26:13 - preparing it so i simply moved the
26:15 - platform and i said okay here the
26:17 - platform is out of screen it will not be
26:18 - visible visible it will not be visible
26:22 - when i deactivate it because what do i
26:25 - mean by this well i don't want the
26:26 - platform to get up to here it's still in
26:28 - our game and then i simply turn it off
26:29 - like this bam no we want the platform to
26:32 - let me go here we want the platform to
26:34 - move above here so it's out of sight and
26:37 - then we are going to deactivate it but
26:40 - for that
26:41 - we need to know where that bound is
26:43 - going to be and that bound is number six
26:45 - as you just saw me demonstrate that
26:48 - now here we are also going to have a
26:50 - public bull
26:53 - moving platform underscore
26:57 - left
26:58 - and you can assume that we are also
27:00 - going to have a moving platform right
27:03 - right
27:05 - and we're also going to have is
27:07 - breakable and we're also going to have
27:10 - is spike and we're also going to have is
27:13 - platform this is how we are going to
27:16 - determine which platform is using this
27:18 - script and now we're going to check
27:19 - these check boxes but before that let me
27:21 - simply also add here a private animator
27:23 - adam
27:24 - and then we can continue with everything
27:27 - so now before we save them as prefabs
27:29 - select every platform and denote which
27:32 - platform it is so if i go here this
27:35 - platform is a regular platform so we're
27:37 - going to check the checkbox is platform
27:40 - breakable platform is a breakable one so
27:43 - we're going to check is breakable for
27:45 - the checkbox the spike platform
27:48 - selected and we're going to check is
27:50 - spike
27:52 - for the speed platform left we're going
27:55 - to check moving platform left and
27:58 - actually we can rename that to speed but
28:00 - that's up to you anyways you get my
28:02 - point this is the left one and speed
28:04 - platform right check the checkbox for
28:07 - that one as well
28:08 - and voila
28:10 - now we have prepared our platforms and
28:11 - we can safely go now into the prefabs
28:13 - folder and drag and drop them one by one
28:15 - so this one and all of them make sure
28:18 - that you don't delete one of these that
28:20 - you didn't save as a prefab prior to
28:23 - this because if you do
28:25 - you will lose it then we will need to go
28:27 - again and add a component a box collider
28:30 - a rigid body a script an animator
28:32 - depending on which platform you deleted
28:34 - and now i can delete them because i have
28:36 - them as prefabs and we're only left with
28:38 - our regular platform and we can continue
28:42 - with the script so let's get back here
28:44 - in visual studio the first thing that
28:46 - we're going to do here in awake function
28:48 - so create awake function i'm going to
28:50 - test if
28:52 - is breakable which means if the platform
28:55 - holding this script is the breakable
28:57 - platform we are going to say anime is
28:59 - equal to get component animator we will
29:02 - deal with this later but i'm just going
29:04 - to put it here so that we don't forget
29:07 - it so what is the next thing to do well
29:10 - i can simply remove the start function
29:13 - we can leave only the update and we can
29:16 - create below
29:17 - uh function so void move not on
29:20 - animation move only move
29:23 - and in the update here i'm going to say
29:25 - move
29:26 - and what we're going to do here simply
29:28 - is we're going to move the platform
29:30 - we're going to say vector 2 is temp or
29:34 - well the name of that variable is equal
29:36 - to transform that position which is the
29:37 - current position
29:39 - of the platform then we're simply going
29:41 - to say temp dot y plus equals to the
29:44 - move speed
29:45 - multiply that with time dot delta time
29:50 - voila and below we are simply going to
29:52 - say transform position is equal to
29:54 - temporary position and since this is
29:56 - moving
29:58 - inside of the update we can go here and
30:00 - we can test it out and i'm going to show
30:01 - you what that bound means for us because
30:05 - if i go here in the in the scene you see
30:09 - now the platform is out of the view but
30:10 - it's still there and here we don't see
30:13 - it in the game but you see it's there
30:14 - it's up it's going
30:16 - so we need to add an extra line of code
30:18 - here
30:19 - we need to test if our temp so if our
30:23 - temp
30:24 - dot y
30:25 - is greater than or equal to the bound y
30:30 - so bound y like this
30:32 - then we're simply going to say game
30:34 - object set active is equal to false
30:37 - voila and we are good to go so now it
30:40 - will deactivate itself
30:43 - and we can test that out now so i can go
30:45 - here in unity and let me just take a
30:48 - look at the scene view so you will see
30:50 - now when it gets somewhere around here
30:52 - pay attention let me just switch to the
30:54 - scene view right away pay attention now
30:57 - bam it is deactivated so this is what we
31:00 - need
31:01 - so far this is what we need for our
31:04 - platform to make them move now later on
31:06 - when we add our player we will detect
31:08 - what we're gonna do with him but for now
31:11 - i'm gonna right click here in the
31:12 - hierarchy and i'm going to go and create
31:14 - an empty game object
31:16 - and i'm going to set x y and z to zero
31:19 - zero zero and this one is going to be
31:21 - our platform spawner
31:24 - i'm also going to go back in the scripts
31:26 - folder in platform scripts and right
31:28 - click here and create a c sharp script
31:30 - and this one's going to be platform
31:33 - script
31:34 - now actually excuse me no it's platform
31:37 - sponsor so i deleted this one right
31:39 - click again and go here and this one's
31:42 - going to be platform
31:44 - spawner so platform spawner now what are
31:48 - we going to do with this platform
31:50 - spawner well he is going to be
31:52 - responsible for spawning our platforms
31:55 - and we are simply going to reposition
31:57 - him somewhere around here let me just
31:59 - tag him
32:00 - so this is our platform spawner let's
32:02 - say at negative eight this is where his
32:06 - initial position is going to be and from
32:08 - within there we are going to spawn the
32:11 - platforms so let's attach this platform
32:14 - spawner script on him
32:16 - and of course we need variables to make
32:19 - this happen so let me just do my thing
32:21 - here
32:22 - and class give a little bit of space you
32:25 - know the drill don't even judge me don't
32:28 - even think about judging me
32:30 - so what we need well first of all here
32:32 - we're going to say
32:34 - public
32:35 - game object is going to be our plat
32:38 - form prefab this is the regular
32:40 - platform we are also going to have a
32:44 - public spike
32:46 - platform prefab we are also going to
32:49 - have a public game object array and this
32:52 - is going to be moving
32:54 - platforms
32:57 - like this
32:58 - in public
33:00 - game object breakable
33:02 - platform so breakable
33:06 - plat
33:07 - form now i can also omit here the
33:09 - underscore we have the platform spike
33:12 - moving platforms and breakable platform
33:15 - as you can assume what we're going to do
33:17 - with these is that we are going to spawn
33:19 - them now for that we need to to have a
33:21 - spawn timer so we're going to see here
33:24 - public float platform
33:27 - spawn timer so spawn timer is going to
33:31 - be equal to two apps every two seconds
33:33 - and we're also going to have here a
33:35 - private float
33:37 - so float current so current
33:41 - flat form
33:43 - spawn timer this one we are now going to
33:46 - declare and we are also going to have a
33:48 - private int
33:50 - plat
33:51 - form spawn
33:53 - count
33:56 - count
33:57 - and we also need to have a public
34:00 - float minimum underscore x which is
34:02 - going to be equal to and maximum
34:05 - underscore x which is gonna be equal to
34:08 - now what are they what are they going to
34:10 - be equal to well if i take now the
34:13 - platform this one right here and if i
34:15 - move it till to the bounds where it's
34:18 - well near the end but it's not outside
34:21 - so it's something like this here i think
34:24 - two so this is negative two this is
34:26 - where the minimum is going to be so
34:29 - negative two and maximum is going to be
34:32 - positive voila simple like that so if i
34:35 - go back here
34:36 - the minimum is going to be negative 2f
34:39 - and the maximum is going to be 2. so we
34:42 - are going to spawn them between these
34:45 - two
34:46 - bounds now inside of the start the first
34:50 - thing that we are going to do is we are
34:51 - going to set the current platform
34:54 - spawner
34:55 - timer or current platform spawn timer to
34:58 - be equal to platform
35:00 - so platform spawn timer why are we going
35:04 - to do it like this we will see in a
35:05 - second
35:07 - for that we need to create here a
35:08 - function so void
35:10 - spawn platform splat
35:13 - forms like this and in the update we are
35:16 - going to call this function so spawn
35:19 - platforms which is going to start
35:21 - spawning all the platforms now what we
35:24 - are going to do is the following we are
35:26 - going to see current platform spawn
35:28 - timer plus equals time dot delta time we
35:31 - did this in the various of my previous
35:33 - tutorials we did this in the first
35:35 - person shooter we did this in the beat
35:37 - em up game we did this in the 2d space
35:39 - shooter
35:40 - we are simply going to use this variable
35:42 - to denote when the value is larger so
35:46 - here we're going to test if our current
35:49 - so current platform spawn timer is
35:53 - greater or equal to the platform spawn
35:56 - timer
35:57 - so the current time if it's greater than
35:59 - this time and this time here we set it a
36:01 - two but it's a public variable we can
36:02 - also change it so if we think that we
36:05 - need to put a lower value i don't know
36:08 - something like
36:09 - let's say 1.8 for example so i can copy
36:12 - this and i can go here and select the
36:16 - platform spawner and you can put here
36:19 - 1.8 so that works as well and while we
36:22 - are here let me quickly go here in the
36:26 - prefabs and attach the prefabs so here
36:29 - platform prefab is the platform one the
36:31 - regular one spike here it is spike one
36:35 - this is for the moving so the size is
36:36 - going to be two we have the left
36:38 - here it is left we have the right here
36:41 - it is right and the breakable platform
36:44 - so here it is breakable platform make
36:46 - sure that you add all of these or it
36:48 - will not work if you don't do that now
36:50 - going back here we set the timer to 1.8
36:53 - now and
36:54 - here we're setting the current platform
36:56 - spawn timer to be equal to that value
36:59 - which means as soon as we hit this in
37:01 - the update we are adding to this value
37:03 - time dot delta 10 which is a very small
37:05 - number but over time because it's called
37:07 - in the update which is called every
37:09 - frame which means 60 times in a second
37:12 - we are going to add this value and
37:16 - it will over time get to the point where
37:18 - it will have a greater value than this
37:20 - one when that happens we're going to
37:22 - spawn a platform so here spawn platform
37:26 - okay so what's gonna happen here first
37:29 - of all we are going to say our platform
37:32 - count or spawn count plus plus so we are
37:35 - going to increase it and we are going to
37:37 - do the following we are going to see
37:39 - here vector 3 temporary position is
37:42 - equal to transform that position
37:44 - and we are going to say temp dot x is
37:46 - going to be equal to a random arrange
37:50 - between minimum x
37:52 - and the maximum x voila so that is going
37:56 - to be the temporary or actually excuse
37:58 - me this is the x not the y so x will be
38:02 - between minimum x and the maximum x okay
38:05 - now below we are going to see game
38:08 - object and we're going to say new
38:10 - platform which by default is equal to
38:13 - null
38:13 - but now remove this animator what am i
38:16 - doing here
38:17 - but now we are going to test here so we
38:21 - are going to type here if our platform
38:25 - spawn count this one right here that we
38:27 - are incrementing
38:29 - if that value and let me just do it
38:31 - again platform spawn count if the value
38:33 - is lower than two
38:35 - we are going to do what we are going to
38:37 - say new platform
38:39 - so new platform is equal to instantiate
38:42 - and we're going to instantiate the
38:43 - platform prefab
38:45 - and we're going to use the temp as the
38:47 - position and we're going to use
38:49 - quaternion.identity for the rotation
38:51 - this is if the value
38:53 - is less or actually if it's less than
38:56 - two so that will be when the value is
38:59 - one and two because two is not less than
39:00 - two
39:01 - else if our platform
39:05 - so else if
39:07 - platform spawn count is equal to two so
39:10 - if it's equal to two
39:12 - we're going to randomize we're going to
39:14 - either spawn a spike or actually a
39:17 - moving platform so let me do do my thing
39:19 - here we're going to say if random dot y
39:22 - run if
39:23 - random.range between zero and two if
39:26 - it's greater than zero
39:28 - so if it is greater than zero we're
39:32 - again going to do this right here so
39:33 - we're simply going to spawn a new
39:35 - platform which is the regular platform
39:39 - else
39:40 - if that is not the case if random range
39:43 - here between zero and two is not greater
39:45 - than zero we're going to say new
39:47 - platform is equal to instantiate
39:51 - and here i'm going to use the moving
39:53 - platform so moving platforms and the
39:56 - element that's at the random
39:59 - range between zero and moving platforms
40:02 - dot length like this
40:04 - and we need to say comma and we need to
40:07 - say temp and we need to say quaternion
40:09 - identity so you see here what we're
40:11 - doing
40:12 - we are randomizing things based on the
40:15 - platform spawn count so we are
40:17 - incrementing it so we're incrementing
40:19 - its value
40:21 - and when that value is less than two
40:25 - we're going to spawn a regular platform
40:27 - so platform prefab when that value is
40:29 - equal to two we are going to randomize
40:31 - either we will spawn the regular
40:33 - platform or we will spawn a new platform
40:36 - which action new platform we will spawn
40:38 - a moving platform and we're using here
40:40 - random range between zero and moving
40:42 - platforms length to randomize that and
40:44 - again random range between zero and two
40:46 - will return zero and one it will not
40:48 - return two
40:50 - because if i hover over you will see
40:53 - that it will return an integer and when
40:55 - we use integers with a random range
40:58 - it will
41:00 - not include the last number so the last
41:02 - number is exclusive which means it can
41:05 - either return zero or one but if we use
41:07 - f so if we add here f and f that means
41:09 - it will either return zero one or two or
41:12 - any number in between
41:13 - so moving forward here we are going to
41:16 - test else if our current platform or
41:19 - platform spawn count is equal to number
41:21 - three now if it's equal to number three
41:24 - again we are going to randomize things
41:25 - so we're going to do exactly the same
41:27 - thing here but instead of spawning the
41:31 - moving platform so if the random range
41:34 - is greater than zero we will spawn the
41:36 - platform prefab the length the regular
41:39 - platform prefab if it is not then we are
41:43 - going to instantiate here and what i'm
41:45 - going to do is simply remove this we're
41:47 - going to instantiate the spike
41:50 - so if it's not then instantiate the
41:53 - spike platform prefab
41:55 - again this is randomized and again i'm
41:57 - going to copy these lines of code here
42:00 - so copy and simply paste them here again
42:02 - else if platform spawn count is equal to
42:06 - number four
42:07 - and here instead of spawning the spike
42:10 - we're going to spawn the breakable
42:12 - platform voila and at the end here for
42:15 - our platform spawn count number four
42:18 - this is really really really important
42:20 - to do we need to call this platform
42:23 - spawn count is equal to zero to reset it
42:26 - so that we can again go back through all
42:28 - this iteration if we don't do this right
42:30 - here if we don't reset it
42:33 - then
42:34 - we will have issues we will never go
42:37 - again through this iteration and
42:38 - probably will not i did not test it out
42:40 - but i believe that we will not spawn
42:42 - platforms anymore and at the end outside
42:45 - of all of these if else statements at
42:47 - the bottom we need to say new platform
42:50 - that transform that parent is equal to
42:53 - transform now i will demonstrate in a
42:55 - moment why we are going to do this but
42:57 - for now i'm going to comment this out
42:58 - and at the bottom as well we are going
43:00 - to say
43:01 - current platform spawn timer is equal to
43:04 - zero reset the timer you see here reset
43:07 - this timer because we are only going to
43:10 - allow it to spawn once then go again
43:12 - from zero and spawn again and go again
43:14 - from zero sun and
43:16 - so
43:17 - forth so let's go and take a look at
43:20 - what we have here so if i close
43:23 - the
43:24 - clear the console that is if i hit the
43:26 - play button we will see now that the
43:27 - platform spawner will start spawning so
43:29 - you see we have the platform now we have
43:31 - the speed platform you see now we have
43:33 - the platform breakable platform
43:36 - platform again so again platform clone
43:39 - we will have a spike eventually
43:41 - breakable so on and so forth now also
43:44 - you see that all of these are simply
43:47 - being spawned in the hierarchy and you
43:50 - see how the hierarchy can get messed up
43:53 - well for that we can do this we can
43:55 - simply go here and we can set the parent
43:57 - of the new platform transform parent is
44:00 - equal to the transform which is the
44:02 - transform of the platform spawner so pay
44:05 - attention now every new platform that's
44:07 - going to be spawned will be a child of
44:09 - the platform spawner so now our
44:11 - hierarchy will not get clustered it will
44:13 - not get you see now they are all under
44:15 - the platform spawner they're being
44:16 - spawned and you see now we have the
44:18 - spike we have a regular platform we have
44:21 - again a regular one now we have the
44:23 - moving one we have again the regular
44:26 - actually probably some of these are
44:27 - breakable i don't see so this one is the
44:30 - speed right so on and so forth so you
44:32 - see how we are randomizing and all these
44:35 - platforms are getting a chance to be
44:36 - spawned so we have the moving platforms
44:38 - we have the spike ones we have the
44:40 - breakable ones we have the regular ones
44:43 - of course the regular ones are being
44:45 - spawned the most because if we spawn all
44:47 - others then the player will have no
44:49 - chance
44:50 - if we go back here again and analyze the
44:52 - code what we're simply doing we're using
44:54 - this to control the spawning this right
44:56 - here is clear if not
44:58 - put a comment below this video
45:00 - and i will answer simple as that anyways
45:04 - anyways i'm using the platform spawn
45:07 - count to control the spawning you see
45:09 - plus plus which means incrementing it
45:11 - when that value for as long as that
45:13 - value is less than two
45:15 - we are going to spawn a regular platform
45:17 - when that value gets to
45:19 - be equal to two we are going to either
45:21 - spawn a regular platform or
45:23 - a
45:24 - moving platform when that value gets to
45:27 - three we will either spawn a regular
45:28 - platform or a spike platform you get the
45:31 - point so based on this increment and at
45:33 - the last increment here we need to set
45:35 - it equal to zero if we don't do that
45:37 - let's check it out i did not test it out
45:40 - but i believe it will stop spawning the
45:42 - platforms so let's see if that is the
45:44 - case
45:45 - so yeah we have one platform we have
45:47 - another platform three
45:50 - four platforms and let's see if we're
45:52 - going to yeah no you see here bam bam
45:55 - bam bam zero you see actually we get a
45:58 - null reference exception so yeah we get
46:01 - a null reference exception right here
46:04 - because we are using new platform parent
46:06 - and as you can see here we set it to be
46:08 - equal to null
46:09 - and we're not spawning any more
46:10 - platforms one way to fix this of course
46:13 - is to well uncomment this but
46:16 - when you have a null you see here when
46:18 - you have a null game object what you can
46:20 - do is you can do this you can say if new
46:23 - platform is not equal to null or simply
46:26 - if new platform
46:28 - and simply paste this here so if new
46:30 - platform meaning if it's not equal to
46:32 - null if we have a reference and if you
46:34 - don't know what a reference is if you
46:36 - don't know classes and objects you don't
46:37 - understand that concept i have a video
46:39 - for that i will put it in the link put
46:42 - it in the link put the link in the
46:43 - description below if you don't find the
46:44 - link please remind me it can happen that
46:46 - i forget to put it anyways you see when
46:49 - we don't reset the platform spawn count
46:51 - we did not get a chance to spawn new
46:53 - platforms and we got a no reference
46:55 - exception here because of that so we
46:57 - need to reset it back here to zero for
47:00 - this iteration again to work and go
47:03 - through all of these platforms now we
47:07 - tested it out so i'm not gonna test it
47:08 - out again you can do that on your own
47:10 - test it and if you have any issues post
47:12 - a comment below or better yet post a
47:14 - comment on my facebook group and i or
47:16 - somebody else there will respond okay
47:19 - now we can add the player in our game so
47:22 - for that i'm going gonna go into the
47:24 - project and sprites and voila here is
47:26 - our player here is the crazy dude here
47:28 - is the crazy cube here is the crazy well
47:31 - here is the player
47:32 - anyway it is i'm going to say 0.5.5
47:36 - for x actually i think we need to resize
47:39 - the player a little bit more so let's go
47:41 - here at point three point three yeah
47:43 - point three will do now for the initial
47:46 - platform so the first one that is here
47:48 - i'm going to set that a negative four so
47:50 - let's take it here negative four
47:52 - negative four not four and here is going
47:55 - to be the initial platform now let me
47:56 - take the player he is at the middle we
47:58 - are going to attach a box collider 2d
48:02 - so not make it a trigger do not make the
48:04 - player a trigger we are also going to
48:06 - attach a rigid body 2d
48:09 - now we are going to leave a dynamic for
48:11 - the player now for the mass i'm going to
48:14 - set here zero but it cannot be zero it
48:16 - will be zero zero point zero point blah
48:18 - blah blah one
48:19 - for the gravity scale i'm going to set
48:22 - that at 3 and voila i'm not going to set
48:25 - the constraints because that is going to
48:27 - allow us to roll the player as you saw
48:29 - in the preview vdo
48:32 - and now we can first create the player
48:34 - movement so we can go in the assets and
48:36 - scripts and right click here go under
48:39 - folder and the
48:41 - player script
48:43 - and inside of this one i'm going to
48:45 - right click and create a new c sharp
48:48 - script and this one's going to be player
48:50 - movement okay so the player movement and
48:53 - attach it on the player so let's go here
48:55 - attach it on the player can add script
48:57 - now don't worry about this this is i
48:59 - don't know why because it probably did
49:01 - not get a chance to create i was so
49:02 - quick to attach the script that unity
49:04 - did not manage to create it before i
49:06 - tried to attach it anyways let me go
49:08 - here into the prefabs and quickly drag
49:10 - and drop the player in the prefabs and
49:13 - i'm going to open the script in visual
49:16 - studio
49:17 - and let's go here
49:19 - so what is the next thing to do so here
49:22 - i'm going to say class and hold enter to
49:25 - give a little bit of space
49:28 - so what do we need to move the player
49:30 - well simply we need private rigid body
49:32 - so private rigid body 2d which i'm going
49:35 - to call my body we are going to use the
49:37 - rigid body to move the player opposed to
49:39 - the platforms which we are using their
49:41 - transform to move them so this is
49:43 - another way to do it
49:45 - and we need a public
49:47 - float move
49:49 - speed which by default i'm going to say
49:52 - it's equal to one of course we set it to
49:55 - be public which means that we can change
49:58 - it i don't know if you want to change it
49:59 - to two you can change it in the
50:01 - inspector so don't worry about that
50:03 - so in the awake first of all change
50:05 - start to awake and inside of this one we
50:08 - are going to say my body is equal to get
50:11 - component rigid body 2d
50:14 - now when you have components like these
50:15 - rigid body or i don't know audio source
50:18 - or whatever
50:19 - make sure that every single time
50:22 - you
50:23 - use get component so don't forget to do
50:25 - that because you will get an old
50:26 - reference exception and if you have
50:28 - components in your script
50:31 - and you get an all reference exception
50:32 - if the error is pointing to some of the
50:34 - components so for example if i try to
50:36 - use rigid body like this so if i see
50:38 - here void move
50:40 - not on animation move or on animator
50:42 - move simply move and if i try to do
50:44 - something like my body dot velocity that
50:47 - blah blah blah and the air points here
50:50 - to this line that means you did not use
50:51 - get component to get a reference to the
50:53 - component
50:54 - okay what we're going to do in our move
50:57 - and by the way we're going to call the
50:58 - move in the fixed update not update but
51:01 - fixed update so change the update into
51:04 - fixed update and i know i said fixed
51:06 - update four times already anyways fixed
51:09 - update is used to move game objects with
51:11 - the rigid body if we were to use the
51:14 - transform like we're using here for our
51:16 - platforms then we would use the update
51:18 - which is a better or more suitable for
51:21 - that purpose but using the rigid body
51:23 - use the fixed update so what we're going
51:25 - to do here we're going to test if our
51:27 - input get axis raw
51:30 - so get axis raw and here we're going to
51:32 - say horizontal
51:34 - and if that value is greater than zero
51:37 - we are going to do what we are going to
51:39 - say my body velocity is equal to a new
51:42 - vector too
51:44 - and here we're going to say move speed
51:46 - for the x and my body velocity dot y for
51:50 - the y velocity and below
51:53 - i'm simply going to copy this line and
51:55 - here i'm going to test if it's lower
51:56 - than zero and here i'm going to say
51:58 - negative move speed again your
52:01 - assignment is to have a separate script
52:03 - which holds these variables like this
52:05 - horizontal you can call it from that i
52:07 - already did this in couple of my
52:08 - tutorials so now it's up to you to test
52:11 - your knowledge and see
52:12 - if you actually learn something even if
52:14 - you're paying attention to your teacher
52:15 - here okay pay attention okay anyways
52:18 - moving forward you're not being me
52:19 - enough being me enough about me being
52:21 - silly so the horizontal get axe is raw
52:23 - if we press
52:25 - the right arrow key or the d key this
52:27 - value will be greater than zero which
52:29 - means it will be equal to one if we
52:32 - press the left arrow key and we press
52:34 - the a key this value will be negative
52:36 - one which means lower than zero now i
52:38 - did this in numerous examples what
52:41 - you're going to do is use the print
52:42 - statement like this and you're going to
52:44 - print input get axis and horizontal and
52:48 - then start pressing these keys that i
52:50 - already said and then you will
52:53 - you will see the difference so here i'm
52:55 - going to say move before we proceed to
52:57 - test this out i'm also going to create
52:59 - here a public void
53:01 - platform move with the float x
53:06 - and here what i'm going to simply do is
53:09 - take all of this and i'm going to say
53:12 - my body velocity is equal to and here
53:15 - i'm going to pass x
53:17 - because we are going to use this one
53:20 - in our moving platforms so in our moving
53:24 - platforms we are going to use this one
53:26 - in order to in order to move the player
53:29 - so let's test it out to see if this
53:31 - actually works so let's go here and
53:33 - first of all clear the console i'm going
53:35 - to hit the play button so now the player
53:37 - will fall on the platform as you can see
53:40 - and yeah we can also go like this you
53:42 - see now when we fall on these so when we
53:45 - fall on that one it will supposed to be
53:47 - if it would
53:49 - move us and bam we died
53:51 - anyways
53:52 - this works now one thing that it does
53:54 - not work if i go here the bounds don't
53:57 - work so if i go outside of the bounce up
54:00 - it does not work so i'm up and i can go
54:02 - like this down
54:04 - and below well we need to detect that
54:06 - but also the bounds on the left and the
54:08 - right side don't work
54:10 - so let me try to do that let's hopefully
54:12 - one of these platforms will be closer to
54:15 - the left or right side so pay attention
54:16 - now i can go outside you see bam i went
54:19 - outside of the left side
54:21 - so for that we're gonna go here and in
54:24 - the scripts player scripts that is right
54:26 - click and create a new c sharp script
54:28 - and this one is going to be player
54:30 - bounds
54:32 - and we are going to attach it on the
54:33 - player so select the player game object
54:36 - drag and drop the player bounce and go
54:39 - here overrides and apply all
54:41 - let me double click this and open it in
54:43 - visual studio and let's go here quickly
54:47 - voila
54:48 - and below here let me just tag the class
54:52 - and
54:53 - give a little bit of space so what do we
54:56 - need for our bounds we need the bounds
54:57 - on the x and the y are actually on the x
55:01 - left and right so we're going to say
55:02 - public float minimum underscore x is
55:05 - going to be equal to negative 2.6 f
55:08 - don't ask me how i got this you already
55:10 - saw i just measured it's same as what i
55:13 - did with our platform so i took the
55:15 - player moved it to the left side saw
55:18 - the bounds and i simply took that value
55:22 - and voila for the maximum x it's going
55:24 - to be equal to 2.6 f and for the minimum
55:28 - y is going to be equal to negative 5.6 f
55:32 - what is the minimum y well the minimum y
55:35 - will determine how far can the player
55:37 - fall down here you see here below our
55:42 - camera below the platforms and when that
55:45 - value is hit then the player will simply
55:48 - die and we're going to remove this
55:50 - because we don't need it i am going to
55:52 - remove this comment as well and in the
55:55 - update we are going to call check
55:59 - bounce function that we still did not
56:01 - create so below we are going to say void
56:03 - check bounds
56:05 - and inside of this one we are simply
56:07 - going to say vector 2 temporary position
56:11 - is equal to transform that position
56:14 - and here we're going to test if our temp
56:16 - dot x is greater than the maximum x
56:19 - value then our temp x is going to be
56:22 - equal to the maximum value we're not
56:24 - going to allow it to go above you see
56:27 - what i'm doing here it means if our
56:29 - current value of the transform position
56:31 - x is greater than the maximum value then
56:34 - we are not going to allow it to go above
56:36 - that value so we are going to set it to
56:38 - be equal to that value so it will not
56:41 - allow it basically it is something like
56:43 - this let's see this is the maximum axle
56:46 - max
56:47 - x
56:48 - is this point right here if we try to go
56:51 - outside and we are here where i'm
56:53 - pointing with the x
56:55 - we will detect that by using this which
56:58 - means we will reset to here where this
57:00 - point is we will reset to this point not
57:03 - going outside of these bounds this is
57:06 - what i'm doing here and simply here i'm
57:08 - going to test if
57:11 - so if our temp x
57:13 - is lower than the minimum x then our
57:16 - temp x is equal to minimum x same
57:19 - principle is except for the minimum
57:21 - value same principle if we try to go
57:23 - below that value we will not allow it we
57:26 - will reset it back
57:28 - and here we're going to say if our temp
57:31 - dot y is less than or equal to the
57:34 - minimum y
57:36 - that means we fell down so we fell down
57:38 - and we are going to do what we are
57:40 - simply going to test if we are out of
57:43 - bounds and for that here above we are
57:45 - going to create a private bull which is
57:48 - going to be out of
57:50 - out of underscore downs
57:53 - so for that we need to test it so here
57:55 - i'm going to say if with an exclamation
57:58 - mark if we are not outside of bounds
58:00 - what is an exclamation mark doing here
58:03 - an exclamation mark used with a boolean
58:05 - will make the boolean the opposite which
58:08 - means if this out of bounds has a value
58:10 - of false this will make it true if it
58:13 - has a value of true this will make it
58:14 - false so it will make it the opposite so
58:16 - essentially here we are asking if we are
58:18 - not out of bounds when we reach this
58:21 - point
58:22 - then we are going to go out of bounds so
58:24 - we are going to say out of bounds is now
58:26 - true we are out of bounds and we are
58:28 - going to call our sound manager so
58:30 - soundmanager.instance.that
58:34 - sound we will create this later and also
58:36 - here we're going to call our game
58:39 - manager dot
58:40 - instance
58:42 - dot restart game and voila we are good
58:46 - to go
58:49 - basically this is for our players moving
58:52 - so we can go back here and let me hit
58:54 - the play button
58:56 - and now if i try to go out of bounds for
58:59 - example if i try to go here it well i we
59:01 - could not see that because the movement
59:04 - was slow and i could not get till the
59:06 - end or to the right side so let's try to
59:09 - do it here okay on the left side you see
59:11 - now i cannot go and actually what did we
59:14 - do let me go here where's my player
59:18 - where did the player go
59:21 - did we attach the script on the player
59:23 - so minimum x maximum x let me go here
59:27 - oh yeah yeah of course of course why why
59:31 - shouldn't i be stupid like that
59:34 - one thing that i did forget to do here
59:37 - is that we need to do this we need to
59:38 - say transform that position is equal to
59:41 - temp to reset these values back to our
59:45 - current position that's why our player
59:48 - went out of bounds anyways so let's test
59:51 - it out right now so let's go here and
59:54 - hit the play button so let's hopefully
59:56 - wait for one of these platforms to be
59:58 - closer to one of the edges okay let's
60:00 - try to go out of bounds you see now i
60:02 - cannot go out of bounds you saw well you
60:04 - saw i don't need to repeat that
60:06 - okay the next thing to do is finally
60:09 - detect what will happen when we start
60:12 - landing on the platform so we need to do
60:15 - that now we are going to do that for the
60:17 - player and we are going to do that as
60:19 - well
60:20 - for
60:21 - our
60:22 - well platforms so in order to do that
60:25 - first of all i'm going to create the top
60:27 - spikes let me just select the bg
60:29 - here it is
60:30 - and i'm going to do something like this
60:32 - i'm going to go and create an empty game
60:34 - object it's going to be our top spikes
60:38 - and here here here zero zero zero i'm
60:41 - also going to go under tags and add a
60:43 - tag so one is going to be a top spike
60:48 - tag so i believe this is the only one
60:49 - that we need we will see in a moment so
60:51 - simply add the top spike and select the
60:54 - top spikes
60:55 - and tag them with the top spike tag so
60:59 - now let's go here in our sprites and
61:02 - here is our spike here it is i'm going
61:05 - to put it here in our scene voila this
61:07 - is our spike let me set the order in
61:09 - layer 2
61:11 - and set the
61:13 - spike as a child of the top spike and we
61:16 - need to move it here up so this is where
61:19 - we want to put it right here
61:22 - now i'm also going to duplicate it and
61:24 - move this one so let me move it like
61:27 - this and this one's going to be here why
61:29 - don't i see the arrows correctly
61:31 - apparently i zoomed in that
61:34 - let me just
61:35 - reset the layout so that i can actually
61:38 - see this and go back here
61:40 - so now i believe i can zoom however how
61:43 - much i want to zoom in i can see yeah
61:45 - that was unity lagging don't worry about
61:46 - that
61:48 - so let's duplicate it again and move it
61:50 - here hold the v key not the wb key
61:53 - and hold it you see now how this
61:56 - moves with the mouse and this i mean you
61:59 - see the arrows and the rectangles so
62:01 - selected hold the b key
62:04 - come on what am i doing here so it's
62:06 - spike two not important
62:09 - why is this not working okay okay now
62:12 - it's working so v key and you see how
62:15 - the arrows are moving
62:17 - depending on where my mouse is so i'm
62:19 - going to go here and snap it you see
62:22 - holding the v key will snap it right
62:23 - next to each other so again i'm going to
62:25 - duplicate it and the v key and snap it
62:28 - so come on why are you playing with me
62:31 - so wiki snap it duplicate it move it
62:34 - over here v key snap it
62:37 - and you get the drill this is what we
62:39 - need to do so simply move it and snap it
62:41 - so again let me select it correctly move
62:43 - it here and snap it again move it and
62:46 - snap it and one more
62:48 - move it and snap it now duplicate the
62:51 - duplicates so don't duplicate the
62:53 - original one only the duplicates and
62:55 - move them here and
62:57 - holding the v key i'm going to snap them
62:59 - and voila you see voila here are our top
63:03 - spikes
63:04 - of course it would not be smart or va or
63:08 - wise or however you want to call it
63:10 - to put a collider on every single one of
63:12 - these spikes instead what i'm going to
63:14 - do is take those top spikes game object
63:17 - and go here and add the box collider 2d
63:19 - this one is going to be a trigger and
63:21 - i'm going to resize it first of all on
63:23 - the y-axis something like this
63:26 - and on the x-axis something like this
63:29 - and voila so now when we collide with
63:31 - the player the player will be killed
63:35 - and
63:36 - let's
63:38 - let's
63:38 - let's program that so let's go here
63:40 - first of all in the platform script so
63:42 - for the platforms what do we need right
63:44 - here below our move we need a couple of
63:47 - more variables actually a couple of more
63:48 - functions the first one is going to be
63:50 - void
63:51 - breakable
63:53 - the deactivate so deactivate the
63:56 - breakable game object and simply here
63:58 - we're going to say invoke
64:00 - and we're going to invoke a function and
64:02 - that function's name is going to be void
64:05 - breakable or deactivate
64:08 - game object like this this is the name
64:11 - of the function and here we're simply
64:12 - going to say game object set active
64:15 - false
64:16 - and here we're going to call our sound
64:18 - manager dot instance dot ice break sound
64:23 - we will do this later don't worry but
64:25 - simply take the name of this function
64:27 - and put it here and we are going to
64:29 - invoke this after 0.3 seconds after 0.3
64:34 - seconds we are going to invoke this
64:37 - okay this is for the breakable we will
64:38 - see we will add this by the way since we
64:41 - are already here let's quickly go in our
64:44 - breakable so go into the project
64:47 - and let me go into the prefabs and
64:50 - platform prefabs take the breakable
64:52 - open it
64:53 - and go in the animation
64:56 - and select the break animation and then
64:58 - go on the last frame
65:01 - add an animation event
65:03 - and go here and select breakable
65:05 - deactivate this is the one that we need
65:08 - to call and voila it will then
65:10 - deactivate the breakable after 0.3 of a
65:12 - second so simply go here click this
65:14 - button to add an animation and we did
65:16 - this numerators of time so i expect you
65:18 - to know this
65:20 - so what is the next thing to do the next
65:22 - thing is to create void on trigger enter
65:25 - 2d so in the on trigger enter 2d and i'm
65:30 - going to change the collision name to
65:31 - target we are going to test if our
65:34 - target.tag is equal to player so if we
65:37 - have collided with the player
65:40 - and immediately when you do something
65:41 - like this go here and make sure that the
65:44 - player is tagged with the player tag so
65:46 - select the player here it is player go
65:49 - here under tags and tag him with the
65:52 - player tag just so that we make sure and
65:54 - go here and override and apply all we
65:57 - need to make sure that this is the case
65:58 - or otherwise we will have problems
66:01 - so in our ontrigger enter what we're
66:04 - gonna do if we are colliding with the
66:06 - player and if is spike so if the game
66:10 - object that is holding the script is the
66:12 - spike game object we are simply going to
66:14 - do what we are going to say target dot
66:17 - game object or actually target
66:20 - transform position is equal to new
66:23 - vector 2 and i'm going to reset the
66:25 - player's position at 1 000 1000 so that
66:27 - i can remove it from the view then we
66:30 - are going to call our sound manager so
66:33 - sound
66:34 - manager instance dot
66:37 - game over sound
66:40 - and we are going to call our game
66:41 - manager dot instance dot restart
66:46 - game of course we still did not create
66:48 - this but this is what we are going to do
66:50 - what is the next thing that's going to
66:52 - happen right below we are also going to
66:55 - have on collision enter so on
66:57 - collision enter 2d
67:01 - what is the what is the reason what is
67:03 - the difference between on trigger enter
67:05 - 2d and on collision enter 2d when we go
67:09 - here
67:10 - for example for the top spikes we set
67:13 - the box collider to be a trigger if you
67:16 - pay attention here you see
67:18 - the is trigger checkbox is checked as
67:21 - you can see
67:22 - now
67:23 - when we check that checkbox
67:26 - for the trigger if we want to detect
67:28 - collision between two game objects we
67:30 - need to use on trigger enter on trigger
67:34 - enter this is what we need to use if we
67:35 - checked the checkbox for
67:39 - is trigger if we didn't check that check
67:41 - box so it's not checked and we want to
67:43 - check for collisions we will use on
67:46 - collision enter so here i'm also going
67:48 - to name collision to target and what i'm
67:51 - going to test here is if our
67:53 - target.gameobject tag is equal to player
67:56 - of course your assignment here is to put
67:58 - the player in a single script and then
68:01 - call it from that script and also use
68:03 - another way to compare game objects if
68:06 - you don't know you're not sure search
68:08 - online
68:09 - but this also works by the way so here
68:11 - if target game object tag is the player
68:14 - and if is breakable so that means we
68:17 - landed on the breakable game object or
68:19 - the breakable
68:21 - platform and the player is the one who
68:23 - landed we are simply going to call here
68:25 - our sound manager so sound manager
68:29 - instance dot land sound
68:33 - and below we are going to call our anim
68:35 - dot play to play the animation and the
68:38 - animation is break we will be able to
68:40 - see to hear this
68:42 - and i'm just going to copy this and
68:44 - below if is platform which means we only
68:47 - landed on the platform we are going to
68:49 - call this sound manager instance to play
68:53 - the land music voila this is what we
68:56 - need to do
68:58 - the before lasting so we will also have
69:01 - in our player bounce to the tech
69:02 - collision but here this is on collision
69:06 - enter and this one is on trigger enter
69:09 - so on trigger enter okay this is when we
69:12 - enter what we are going to do
69:15 - for the moving platforms because
69:17 - ontrigger enter and uncollision enter
69:19 - will not work there
69:21 - well for them
69:23 - we need to use on collision state
69:25 - and here we're going to see void on
69:28 - collision stay 2d you see here
69:31 - called once per frame for every collider
69:35 - rigid body 2d that is touching the rigid
69:37 - body 2d collider so it will call and
69:40 - here i'm also going to change to target
69:42 - so this is and here i'm going to say not
69:44 - class on collision state
69:48 - this is going to be called every single
69:51 - frame
69:52 - as long as the player is standing on the
69:55 - moving platforms and simply here i'm
69:57 - going to test if target game object tag
70:01 - is equal to the player which means the
70:03 - player landed on the moving
70:07 - the player landed on the moving
70:08 - platforms i'm going to test if the
70:10 - moving platform left then we're going to
70:13 - move the player to the left and we're
70:14 - simply going to say target game object
70:18 - get component and we're going to get the
70:20 - player movement and if you remember our
70:23 - platform platform move and here i'm
70:26 - going to say negative 1 f if you
70:28 - remember in our player movement i
70:30 - created this platform move i said we're
70:31 - going to use it for the moving platforms
70:34 - the reason for that is this one because
70:35 - now we're simply going to call here
70:37 - platform move passing the negative one
70:40 - and if we
70:41 - if we need to move to the right side so
70:44 - all right moving platform right we're
70:45 - going to call plus one of course you can
70:48 - create a separate variable holding this
70:51 - movement variable for the platform so
70:53 - that is up to your action that is your
70:55 - assignment not up to you that is your
70:56 - assignment you're not even asked here
70:58 - you need to do that or otherwise i i
71:00 - will i i don't know what i will do i
71:03 - cannot do anything
71:04 - okay
71:07 - i have so much fun creating these
71:08 - tutorials
71:10 - we can test this out but before we do
71:12 - that i'm gonna go here in our player
71:14 - bounce and below and this one is for the
71:16 - check about so check
71:18 - bounce instead of me creating a separate
71:20 - script detects to test collision with
71:23 - the top spikes i'm simply going to
71:24 - create here on trigger enter 2d
71:28 - and this one is going to be target and
71:31 - if
71:32 - so if target tag is equal to top
71:35 - spike
71:36 - did i
71:37 - did i tag it with the top spike or top
71:41 - spikes we need to test that out too we
71:43 - need to go back here and see select the
71:45 - top spike yeah top spike that is the
71:47 - name make sure that the names match or
71:49 - otherwise it will not work
71:51 - so if the target tag is equal to the top
71:54 - spike what we're going to do
71:56 - first of all we're going to say
71:57 - transform position is equal to new
71:59 - vector 2 for our player
72:02 - and we're going to set the player at
72:04 - 1000 1000 to move him away from the
72:06 - screen
72:07 - then we are going to call our sound
72:10 - manager instance dot
72:13 - death
72:14 - so death
72:15 - sound
72:17 - and our game
72:19 - manager
72:20 - instance dot a re
72:23 - start game voila this is all we need to
72:26 - do
72:27 - and uh basically we are done with this
72:30 - and we can test this out so i can go
72:33 - back here in unity and wait for unity to
72:35 - take mercy upon me and
72:38 - for unity to well compile all the
72:40 - scripts i can go here in console and
72:42 - clear everything i'm going to try first
72:45 - to land on the moving platform so that
72:46 - we can see what's going to happen
72:48 - so this is a regular platform i'm hoping
72:51 - this one is a regular one yeah a regular
72:53 - one and this one is alright and yeah we
72:56 - are gone
72:57 - we are dead
72:58 - and by the way let me go quickly here in
73:01 - our visual studio what did we do for our
73:03 - player bounds yes he here we are out of
73:05 - bounds it's true and we need to call
73:07 - this to restart the game so that's why
73:09 - nothing happened so let's go here again
73:12 - and uh let's try it out now so let's try
73:14 - to land okay here is the moving platform
73:16 - pay attention i'm not doing anything and
73:18 - it's moving me slowly to the right side
73:19 - you saw that you saw that i mean you're
73:21 - not blind you saw that
73:23 - let's try to land on a breakable
73:26 - platform so let's hope that somewhere
73:28 - here we have a breakable platform
73:29 - regular platform regular one come on do
73:32 - we have a breakable and this is a
73:34 - breakable you see bam and it break it
73:36 - broke you see
73:37 - and let's go here again what happened
73:39 - for the breakable platform well it
73:41 - happened that the animation was playing
73:44 - and when the animation hit the last
73:45 - frame so if i go here
73:47 - select the breakable and open it here
73:50 - we were playing the animation so in the
73:53 - break we played animation bam bam bam
73:55 - and when it reached here it simply
73:58 - called the animation event which called
74:00 - this breakable the activate function
74:02 - which is here
74:05 - here is breakable deactivate which
74:06 - invoked this one and it broke maybe we
74:09 - can set it at 0.5 so it does not break
74:11 - right away we can wait a moment or two
74:15 - now before we continue or actually well
74:18 - we're going to
74:19 - finish our game in two scripts so let's
74:22 - go here and we see that everything is
74:25 - working but we cannot test things like
74:27 - when we
74:28 - touch our top spikes i mean we can i can
74:31 - select the player and you will see that
74:32 - he will be positioned and one thousand
74:34 - one thousand for the position you see
74:36 - bam he's gone his position is one
74:38 - thousand one thousand but uh
74:41 - yeah that is that what we need to do is
74:44 - and the player will fall down soon you
74:45 - see and he fell down
74:47 - because well because
74:50 - anyways we need to restart the game when
74:52 - that happens first of all let me go here
74:54 - in the scenes and change this sample
74:57 - scene to gameplay scene
74:59 - and go here in files and build settings
75:02 - and we need to click this add open
75:05 - scenes which will add the current scene
75:06 - to the build you see now we have the
75:08 - scenes gameplay inside now we can use
75:11 - now we can deact or actually load that
75:13 - scene so let's go here in the scripts
75:14 - and i'm going to right click here and a
75:16 - folder and this is going to be helper
75:19 - scripts
75:21 - and we're going to have two helpers so
75:22 - first one is going to be
75:24 - game
75:26 - manager and another one is going to be
75:28 - sound
75:30 - manager
75:31 - and what i'm going to do is reset their
75:33 - positions to zero zero starting with the
75:36 - game manager so create a c-sharp script
75:39 - game manager this one is going to be
75:41 - very simple we're not going to
75:42 - complicate things we're simply going to
75:44 - restart the game so go here attach it
75:47 - and right click here and see sharp
75:49 - script sound manager and attach the
75:52 - sound manager on the sound manager game
75:55 - object so like this
75:57 - first of all open the game manager and
75:59 - as i said we're not going to complicate
76:01 - anything i'm going to say here class and
76:03 - why why i need to restart my visual
76:06 - studio
76:07 - i hate it when this happens man
76:10 - i really do i really do and uh this
76:13 - happens i'm assuming because
76:15 - i have probably in my google chrome 30
76:18 - tabs opened i did not turn off my
76:20 - computer for i don't know how long
76:22 - and my unity has been running for
76:25 - some time as well so i'm assuming that
76:27 - is the case or unity has a bug hey i'm
76:30 - not perfect so
76:31 - yeah
76:32 - so what are we going to do in the game
76:34 - manager first of all we're going to say
76:35 - public game manager so public game
76:39 - manager instance like this
76:43 - in the awake function we are going to
76:45 - say if our instance is equal to null
76:49 - we're going to say here instance is
76:51 - equal to this
76:53 - and basically that is that we only need
76:56 - two more functions one is going to be
76:58 - public void restart game which is going
77:02 - to invoke a function and the function is
77:04 - going to be invoked is void restart
77:07 - after time
77:10 - and simply here we are going to say
77:12 - unity engine
77:14 - dot scene management dot scene manager
77:18 - dot load scene and we are going to load
77:21 - the game play scene simple as that so
77:24 - let's go here i'm going to simply call
77:27 - it actually no
77:28 - no
77:29 - we need to do this we need to say here
77:31 - invoke
77:32 - and passing the name which is the
77:34 - restart time and we can say two seconds
77:38 - now
77:39 - this will happen after we call our game
77:42 - manager and we are going to call our
77:44 - game manager after our player dies that
77:46 - is the only reason
77:48 - when our game manager is going to be
77:51 - called and when we are going to restart
77:53 - our game we can test it out right now
77:55 - but i would prefer that first we finish
77:57 - our sound manager script which is this
77:59 - one right here and with it we will be
78:02 - done so let's go here and let me just go
78:05 - and hit the class or tag the class
78:09 - and the principle is going to be the
78:10 - same we are first going to create a
78:12 - public
78:14 - static sound manager instance if you're
78:17 - not familiar what an instance is i did
78:19 - not set that here explain it i have a
78:22 - video 30 minute video explaining what is
78:24 - an instance what are singletons i will
78:26 - put the link in the description below if
78:28 - i don't please remind me it can happen
78:30 - that i will forget so here i'm going to
78:32 - say awake and the reason why i will
78:34 - forget is because i'm not going to
78:36 - publish this tutorial today i will
78:38 - publish this tutorial probably 10 or 15
78:40 - days after the recording that's why so
78:42 - we're going to see here if instance is
78:44 - equal to null meaning it does not have a
78:46 - reference we're going to say instance is
78:48 - equal to this pointing to this class or
78:50 - this is the reference
78:52 - now below we are going to have a private
78:55 - or actually above excuse me
78:58 - we are going to have a private audio
79:00 - source which is going to be our sound fx
79:04 - and for the sound fx we are going to
79:06 - have here serialize fields private
79:10 - audio clips and also our sound effects
79:14 - is also going to be a serialized field
79:17 - so these clips are going to be the land
79:19 - clip
79:20 - we are also going to have the depth
79:22 - clip
79:24 - like this we're also going to have the
79:26 - ice break clip
79:28 - and the game over clip voila simple as
79:32 - that
79:33 - now in order to play all of these we
79:36 - need to create public functions so here
79:38 - we're going to say public void the first
79:41 - one is going to be land
79:43 - sound
79:45 - and simply what we're going to do is
79:46 - we're going to call
79:47 - soundfx.clip is going to be equal to
79:50 - land clip and
79:52 - sound fx dot play
79:54 - simple as that nothing else
79:57 - now i can
79:58 - copy these lines and we're going to
79:59 - create a public
80:02 - public void and this one is going to be
80:05 - ice break
80:07 - sound
80:09 - for the ice break sound we're simply
80:11 - going to say here ice break clip and
80:14 - voila call then play and we're good to
80:16 - go
80:17 - then we're going to have a public void
80:20 - death
80:21 - sound
80:23 - and you can assume where this is going
80:24 - we're going to see here that clip and
80:26 - voila
80:28 - and the last thing is our public void
80:31 - game over sound so game over sound
80:35 - like this
80:37 - paste this here and here i'm going to
80:40 - say game over clip in the play
80:44 - and voila we are good to go before we
80:47 - test this out we do need to go here in
80:49 - unity
80:50 - select the sound manager
80:53 - and we are going to have an audio source
80:54 - component
80:56 - this one is going to be for the
80:57 - background music so we are going to make
80:59 - sure display on awake is turned on and
81:01 - loop is turned on and for the clip i'm
81:04 - going to click here so let's go
81:06 - here you see where we need to add an
81:08 - audio clip i'm going to click on this
81:09 - little circle and filter for the clips
81:12 - so i'm going to click on the circle and
81:13 - we're going to filter for the bg music
81:15 - here it is
81:17 - and i'm also going to set the volume for
81:18 - the bg music to 0.2 because i want these
81:21 - other sound effects such as landing and
81:23 - game over and that sound i want that to
81:26 - be heard so that's why i'm putting the
81:28 - background music to 0.2 this is for the
81:31 - bg music now here i'm going to have
81:33 - another audio source and we're going to
81:35 - turn off this play on awake and we're
81:37 - going to drag and drop that audio source
81:40 - here in the sound effects so drag and
81:42 - drop the second not the first one not
81:44 - this one holding the bg music not the
81:46 - folded one this one that's not folded
81:48 - drag and drop it here and yes we can
81:50 - drag and drop components in scripts that
81:53 - can work as well because we have two
81:55 - audio sources attached on this game
81:57 - object if we use get component here
82:01 - we don't know which one will be returned
82:03 - so we can return the bg sound and then
82:05 - we will stop playing the bg music
82:07 - and here let's filter for these land
82:10 - that ice breaking game over clip so here
82:12 - i'm going to filter for the
82:14 - land here it is this one is the dead
82:16 - clip so let's find it here that this one
82:19 - is the ice break here it is and the last
82:22 - one is the game over so click on this
82:24 - one game over here it is game over so
82:27 - make sure that you attach all of these
82:28 - to the appropriate slots again you see
82:32 - here sounds you also have a readme file
82:34 - make sure that you read it for the
82:35 - sounds
82:36 - so here you see bg music we have the
82:39 - death over son so we have the star as
82:41 - well but i'm not going to do that that's
82:42 - your assignment and with this we are
82:45 - done programming everything what we need
82:47 - to do is simply go here player bounce we
82:50 - need to turn this off you see or
82:52 - actually uncomment this
82:54 - so
82:55 - instance what did i game manager
82:58 - instance public static game manager
83:02 - instance this is what we need to do so
83:03 - public static game manager instance so
83:06 - now i can call it here see simply
83:08 - uncomment everywhere where we comment
83:10 - these lines of code uncomment them also
83:13 - here for our platformer scripts
83:15 - uncommented here
83:18 - and here
83:20 - i don't think we don't have anywhere
83:22 - else and here
83:24 - and here
83:27 - and voila and also i think for the
83:28 - player bounce
83:29 - yeah we did that
83:32 - yeah everything is okay literally we are
83:35 - done this is our game so let's try it
83:37 - out so if i go here we will now hear the
83:39 - player sounds every time we hit a spike
83:41 - or fall out of bounds we will restart
83:44 - the game
83:45 - so
83:46 - let's hit that play button and see that
83:49 - in action
83:50 - you hear the sound
83:53 - and do you hear when we fall on a
83:54 - platform
83:55 - yes you do for the spike or actually for
83:57 - the moving platform i remove the fall
83:59 - down sound so let's go again
84:02 - and game over and now we're going to
84:04 - restart you see
84:05 - and by the way i think this is too much
84:08 - for the breakable platform where it is
84:10 - where is it
84:11 - platform script where is the breakable i
84:13 - think this is too much
84:15 - maybe 35 or i don't know 0.35
84:19 - this is okay this is okay
84:21 - so let's go back and again i'm going to
84:23 - turn off
84:24 - turn off run the the game so make sure
84:27 - that we listen to these sound effects
84:29 - when we fall
84:30 - on a platform when the platform breaks
84:32 - and uh also when we go out of bounds and
84:36 - when we restart the game maybe i should
84:37 - go in the sound manager and for the
84:39 - audio source for the bg music set it at
84:42 - 0.1 so that we can hear it even louder
84:44 - or actually don't hear the bg music
84:46 - louder but hear the effects louder this
84:49 - is what i meant so let's go here and hit
84:50 - the play button
84:53 - so you heard that so pay attention
84:56 - you hear that
84:58 - and let's try to die
85:00 - and bam we did we did we did
85:03 - okay so let's go here again and on the
85:07 - moving platforms i did not put that and
85:09 - you see it's moving us and bam we died
85:11 - and the game is restarting again over
85:13 - and over again until we quit playing it
85:15 - so let's go here
85:18 - and let's try to land here and bam we
85:21 - fell down you see
85:22 - and bam you see again we are restarting
85:25 - the game so it's an endless game let's
85:26 - try to go here and we cannot
85:29 - so uh congratulations to getting till
85:32 - the end i still have a star if we go
85:35 - here in the sprites you will see
85:37 - and assets and sprites you see that we
85:39 - have a star
85:40 - and what you can do is and this is your
85:42 - assignment
85:43 - you can
85:44 - add the star make it a collectible item
85:46 - and pick it up in the game and you can
85:48 - also make a score out of the stars so
85:50 - this is your assignment for the game so
85:52 - that you can practice i have plenty
85:54 - tutorials showing you how to add
85:55 - collectable items on and so forth so
85:57 - this one is up to you congratulations to
86:00 - again until the end this is a small
86:01 - hyper casual games
86:04 - games it's a plural nah it's actually a
86:06 - singular not a plural it's a small
86:09 - hyper-casual game congratulations to
86:11 - finishing this game even though it looks
86:13 - small we had a lot of things to think
86:16 - about how can we spawn these platforms
86:17 - how can we code this so on and so forth
86:20 - anyways download this tutorial link is
86:23 - in the description below the project the
86:25 - complete project and finished project
86:27 - and the tutorial assets link is in the
86:28 - description below and uh here here again
86:31 - thank you for watching i will see you
86:33 - guys in another video