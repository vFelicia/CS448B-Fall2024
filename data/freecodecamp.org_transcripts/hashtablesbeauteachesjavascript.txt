00:00 - a hash table is used to implement
00:02 - associative arrays or mappings of key
00:05 - value pairs hash tables are a common way
00:08 - to implement the map data structure or
00:10 - objects they are widely used because of
00:13 - how efficient they are the average time
00:15 - for each lookup is not tied to the
00:17 - number of elements stored in the table
00:20 - in fact the average time complexity of
00:22 - hash tables in big notation is O of one
00:25 - for search insert and delete that's very
00:29 - fast
00:30 - the way a hash table works is that it
00:32 - takes a key input and then runs it
00:35 - through a hash function a hash function
00:38 - basically just Maps strings to numbers
00:40 - and usually the numbers just correspond
00:42 - to indexes in an array so for example
00:46 - here are the strings we pass through the
00:48 - hash function and then we get the
00:50 - numbers over here a hash function needs
00:53 - to be consistent so when you run a key
00:56 - through the hash function it always
00:58 - gives the same number and and it should
01:00 - map different words to different numbers
01:03 - if two words get hashed to the same
01:06 - number this is called a collision you
01:08 - can see in this example John Smith gets
01:10 - hashed to two Lisa Smith gets hased to
01:14 - 01 um s do for and then Sandra d also
01:18 - gets hashed to two so this is a
01:20 - collision because both of these names
01:22 - once they run through the hash function
01:24 - get turned into the same number or the
01:27 - same index for the array one way to
01:30 - handle collisions is just to store both
01:33 - key value pairs at that index then upon
01:36 - lookup of either you would have to
01:38 - iterate through the bucket of items to
01:40 - find the key you were looking for this
01:42 - could take a little extra time because
01:44 - of the iteration so here's another
01:47 - example where it's showing that the
01:49 - names are going through the hash
01:50 - function and then it's showing basically
01:53 - the information that's being stored in
01:55 - the bucket so this will be the array
01:57 - index and in that that in that array IND
01:59 - index or the bucket we would store the
02:02 - phone number so this would be like a
02:04 - phone book the numerical value from the
02:06 - hash function is then used as the index
02:10 - to store that information then if you
02:12 - try to access the same key again the
02:15 - hashing function will process the key
02:17 - and return the same numerical result
02:19 - which will then be used to look up the
02:21 - associated value which just means that
02:24 - once you store all these things in the
02:26 - array once you want to get the number
02:28 - again you would just pick pass in the
02:31 - key John Smith into the has function it
02:33 - would give you the exact same array
02:35 - index too and then you would get the
02:37 - information return to you which is the
02:39 - phone number now you'll probably never
02:42 - have to implement hash tables yourself
02:44 - because most languages including
02:46 - JavaScript already have them built in in
02:49 - JavaScript hash tables are usually used
02:51 - to implement objects however it can be
02:54 - helpful to see how they are implemented
02:55 - just to gain a better understanding so
02:58 - I'm going to show you the code for a
02:59 - hash table so you can see how they work
03:02 - first of all we have our hash function
03:05 - where we're going to pass in the string
03:07 - that we want a hash and then the max max
03:10 - is the number of buckets that we're
03:12 - using in our hash table to store values
03:15 - we're going to start with hash being
03:18 - zero and we are going to for each
03:20 - character in the string string that
03:22 - length for as long as the string is we
03:24 - are going to add the care code of each
03:29 - character each string character has a
03:31 - numerical value associated with it so
03:34 - basically we're just adding up the
03:36 - character codes for each character in
03:38 - the string and putting into the hash now
03:41 - instead of returning the hash we're
03:43 - going to return hash modulus Max that
03:46 - just means we are going to divide by the
03:50 - number of buckets and then return the
03:52 - remainder so if we had five buckets if
03:55 - we're dividing by five the remainder is
03:57 - either going to be 0 1 2 3 or four and
04:00 - then that would be the index that we
04:02 - were going to place the item into the
04:04 - array now this is a very simple hash
04:06 - function just for an example but they
04:09 - can get much more complicated now let's
04:12 - go into the hash table function so in
04:15 - the hashtable function we're going to
04:16 - have our storage array which is where
04:18 - we're going to store all the the data
04:20 - we're putting into it and the storage
04:23 - limit now this is the number of buckets
04:26 - in the array at first I'm just going to
04:27 - show you with just four different
04:29 - buckets but normally actually this
04:31 - number will be much higher and this is
04:33 - just a utility function just for this
04:35 - example so I can easily print all the
04:39 - items in the storage array I can easily
04:41 - log them so here's where the real
04:42 - methods come in for the hash table if we
04:45 - want to add some information so first
04:48 - you're going to pass in a key and a
04:49 - value we're going to figure out the
04:51 - index of the array by running it through
04:54 - the hash function so we created this
04:56 - hash function where we're going to pass
04:57 - in the key and the storage limit then
04:59 - number of buckets that we're going to
05:01 - have in our hash table and that's going
05:04 - to return an index that we went over
05:07 - before if there's nothing in that index
05:09 - in the storage array if it's undefined
05:12 - we're just going to set that index to be
05:15 - this key value pair array else if it's
05:19 - not undefined that means there's already
05:20 - something in that bucket so first we're
05:23 - going to set inserted to false and then
05:25 - we're going to go through each index to
05:28 - see if the key already exists if the key
05:32 - already exists we're going to set the
05:34 - new value
05:35 - here and set insert the true if the key
05:39 - does not exist then inserted is still
05:42 - going to be equal to false so we're
05:44 - going to push in the new item that's
05:47 - where we'll get multiple entries into
05:50 - one bucket so the next thing is if we're
05:52 - going to remove an item from the hash
05:55 - table so if we're going to remove you
05:57 - just pass in the key of what you want to
05:59 - remove and now we're going to look up
06:01 - the index by passing it into the hash
06:02 - function if the index. length equals 1
06:06 - that means there's only going to be one
06:08 - item in that bucket and the item in that
06:11 - bucket equals the key that you passed in
06:15 - then you can just delete that index you
06:17 - can just delete that item but if it does
06:20 - not equal one that means there's
06:22 - probably a few different items at that
06:25 - index and we want to only delete the
06:28 - item associated with that key so we're
06:30 - going to go through each item in that
06:32 - bucket or in that index and if the key
06:36 - equals the key we passed in then we can
06:38 - delete that item the zero index is the
06:42 - key the one index is the value so let's
06:46 - go how we would look up an item again
06:49 - we're going to set the index using our
06:50 - hash function with the key that we
06:52 - passed in and the storage limit if the
06:54 - index there is undefined we just return
06:56 - undefined it's not the item is not in
06:59 - the hash table else we are going to go
07:02 - through each element in that bucket if
07:05 - the element equals the key then we can
07:07 - return that element so let's look up a
07:10 - few examples first I'm going to show you
07:11 - an example of the has function here if
07:14 - we run that it's going to be three and
07:16 - every time I run that you'll see in the
07:18 - console three three three every time I
07:20 - put bow it's going to put three but if I
07:23 - put a different name here and I run that
07:27 - you can see on the console it's going to
07:28 - be five and now every time time I run
07:29 - that's going to be five so with this H
07:31 - function it's going to always be a
07:34 - number between 0o and nine because we're
07:36 - passing in 10 as the number of buckets
07:39 - so now let's actually see the hash table
07:43 - so here we're going to create a new hash
07:45 - table called HT for hash table we're
07:48 - going to add B who's a person add phto
07:51 - who's a dog Rex who's a dinosaur tux
07:53 - who's a penguin then we're going to look
07:55 - up tux and then we're just going to
07:57 - print the entire thing so let's see what
08:00 - happens in the console so we saw that
08:03 - tux is a penguin now let me bring this
08:06 - over a little bit it's going to show our
08:09 - entire hash table now normally you're
08:12 - never going to print out the hash table
08:14 - like I did to the console but I just did
08:16 - that just for learning purposes if you
08:19 - remember up
08:21 - here we have the storage limit set up
08:24 - four so we only have four buckets the
08:27 - reason why I had it set up four is so we
08:30 - will see what it looks like when there's
08:31 - a collision when there's two things in
08:33 - one bucket just by coincidence the first
08:36 - bucket is undefined that means none of
08:38 - these words hased to zero and then if we
08:43 - look at the second bucket that's right
08:45 - here there's actually two key value
08:47 - pairs in the second bucket so both B and
08:50 - Tux both gave one when it went through
08:54 - the hash function and then you can see
08:57 - in this bucket right here
08:59 - we just have one item and then this
09:02 - bucket right here we just have one item
09:03 - so when we pass in Rex to the H function
09:05 - we got three returned but if we go up
09:08 - here and we change the number of buckets
09:11 - to something like 14 now I'm going to
09:14 - try running that again if you look right
09:17 - here now there's a lot more undefined
09:19 - because most of the buckets are now
09:20 - empty but this bucket only has one
09:23 - item the that buck has one item and then
09:27 - the last two bucks have one item and
09:28 - there are no collisions now each bucket
09:31 - only has one item now this has just been
09:34 - a pretty simple example of a hash table
09:37 - implementation but it's enough to give
09:39 - you a basic idea of the hash table
09:42 - thanks for watching my name is Bo KS
09:45 - don't forget to subscribe and remember
09:47 - use your code for good