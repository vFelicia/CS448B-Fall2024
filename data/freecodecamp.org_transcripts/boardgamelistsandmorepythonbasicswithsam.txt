00:00 - foreign
00:18 - almost ready how's everybody doing today
00:22 - all right what's up everybody uh i am
00:25 - sam from python basics uh we are going
00:28 - to be continuing on with our little
00:31 - series of uh studying python an
00:34 - introduction to python
00:36 - a really in-depth all-encompassing glad
00:39 - to have everybody here today sorry about
00:42 - throwing everybody a curveball
00:44 - last week had uh
00:47 - life going on
00:49 - and uh couldn't um
00:52 - couldn't really get back quite in time
00:54 - and get all or uh in order but we got
00:57 - some admins uh in place
01:01 - uh we do have open chat today so this is
01:04 - gonna be
01:06 - uh
01:07 - a little bit different than the last
01:08 - ones but super excited so all right
01:11 - let's just go ahead and jump into it so
01:14 - today we're going to be looking at a
01:17 - little board game i'm really going to be
01:19 - focusing on lists and a couple of
01:23 - yep
01:24 - i that's that's one of the things is if
01:27 - you want to you want to make a joke tell
01:30 - tell life you have a plan
01:32 - okay but here here's the little layout
01:35 - that we're going to do and so basically
01:39 - a little board of circles or zeros
01:42 - i think it's o's it's actually o's and
01:44 - then there are some hidden x's
01:47 - and we have
01:49 - a two-dimensional choices
01:51 - so we have a lot to do here but some
01:54 - little cleanup work that i want to do
01:58 - is there were some questions hanging out
02:01 - there about any
02:03 - and
02:04 - all so i thought
02:06 - now would be a good time before we got
02:08 - into that to go ahead and handle that
02:10 - and also then in turn
02:13 - that is going to lead us into some
02:15 - list comprehension with conditions and i
02:18 - realized that i did not go over
02:21 - how to really handle conditions and list
02:24 - comprehension
02:25 - if anybody can remind me jan or
02:30 - cardinal did we
02:31 - did we do those
02:35 - i don't remember and then we also need
02:36 - to
02:37 - uh
02:39 - talk a little bit about strings
02:41 - because we're going to use that in our
02:42 - board
02:44 - all right
02:46 - so
02:50 - all right
02:51 - all right
02:52 - so list comprehension with conditions
02:54 - now this is where it gets a little odd
02:57 - so we're going to look at
02:59 - this right here
03:02 - and when we bring this in and we look at
03:04 - it so we have
03:09 - a list
03:10 - then it has
03:13 - some a string okay an ant another string
03:17 - in string
03:18 - and a string
03:20 - all right
03:21 - now let's just say that this got handled
03:24 - wrong
03:25 - i want to also show you this about
03:28 - uh strings
03:31 - i don't think we looked at is numeric
03:34 - so
03:35 - python has handled this for us
03:38 - actually i you know i may make my kid
03:41 - laugh and
03:44 - yes thank thank you cardinal if uh if
03:46 - anybody's look if anybody's acting up uh
03:51 - because we have open chat we just want
03:52 - to be having
03:54 - uh
03:55 - a discussion and making sure that
03:56 - everybody is uh on
03:59 - on task with python so like i said we
04:01 - have some admins here to clean up clean
04:04 - up anything
04:05 - all right so
04:06 - all right so like i was saying string uh
04:09 - python has handled some things for um
04:12 - strings to be able to tell if it is
04:14 - numeric
04:15 - so let's just look at it
04:17 - is
04:19 - str dot
04:22 - is
04:23 - is lower is numeric here we go
04:26 - numeric
04:29 - boom return true
04:31 - return true if the string is
04:33 - a numeric string so basically
04:36 - python can
04:38 - understand
04:39 - that
04:40 - here we go so
04:44 - that
04:46 - minus
04:48 - one
04:50 - is
04:51 - numeric
04:54 - boom true so python is able to look and
04:57 - see and realize that this is a value
05:01 - and it is a number so now now let's look
05:05 - at some
05:07 - list comprehension
05:10 - with some conditions and this took me
05:12 - forever to really wrap my head around so
05:14 - if you give it one condition
05:16 - you have to lay it out a certain way and
05:18 - then if it's two conditions you can lay
05:20 - it out a separate way sorry name
05:28 - false but i hope everybody has been
05:30 - doing good it has been now two weeks
05:32 - since we've been together
05:34 - in x
05:35 - if
05:38 - str
05:40 - i
05:43 - dot is
05:45 - numeric
05:47 - boom
05:48 - boom so all right what did i do so i did
05:50 - my
05:51 - normal loop
05:52 - i just need to bring chat up
05:55 - so we can see how everybody's doing
05:57 - today
06:02 - all right for i
06:04 - for i and x
06:06 - then i'm wanting to return
06:10 - false
06:11 - if
06:14 - i
06:15 - analyzing i string
06:18 - is that right
06:20 - yeah is numeric so let's run this
06:24 - oops
06:28 - and
06:31 - yeah that doesn't need to be right there
06:33 - there we go
06:35 - all right so name
06:38 - yeah name
06:40 - boom
06:41 - so false false false
06:43 - now
06:45 - let's say
06:47 - i wanted
06:49 - two conditions so like i said if you're
06:52 - passing one
06:53 - the condition needs to be at the end
06:56 - now if i were to be
07:00 - cut
07:03 - actually
07:05 - i don't want to do that
07:08 - name
07:12 - false
07:17 - if
07:19 - str dot i dot is
07:23 - numeric
07:27 - else
07:30 - true
07:33 - for i and x
07:35 - all right
07:36 - so let's see the difference so if it's
07:38 - one condition
07:40 - the f goes at the end
07:42 - but
07:43 - this is if you look at this here's my
07:46 - eye
07:47 - for i and x
07:50 - do
07:50 - either one of these and you can put
07:52 - these at the beginning so
07:55 - if
07:56 - this
07:57 - do this else do this
08:00 - all right
08:01 - so we can comment that out or not
08:03 - because this will be the last
08:05 - thing
08:07 - that name will be so now we have our
08:09 - true
08:11 - false true false true false
08:14 - so
08:18 - there and there so now
08:20 - now we're going to take into account and
08:22 - now we want to look at
08:25 - any
08:26 - and all so basically these are two more
08:30 - functions
08:32 - from let's do any
08:35 - built-in function module uh from
08:37 - built-ins from the built-in module
08:40 - return true if boolean x
08:43 - is true
08:44 - for any of the iterable for any so
08:48 - basically
08:49 - remember how we had and or so this is a
08:52 - function for an iterable
08:54 - so
08:55 - if you had two conditions
08:57 - true and false
09:01 - true
09:02 - or
09:04 - false
09:06 - you got true but if it was true
09:10 - and
09:12 - false
09:14 - it's false
09:16 - any and all is the same for a group all
09:18 - right
09:19 - so now name
09:24 - any
09:25 - name
09:26 - is true are any of them true
09:30 - yes true
09:31 - are all of them true
09:34 - false
09:35 - so now
09:36 - i think if
09:41 - so if we were to go and change
09:43 - that scenario but
09:46 - actually yeah
09:48 - let's do this
09:50 - let's get
09:52 - true
09:54 - and then all
09:56 - so names should be all true right so all
10:01 - name
10:02 - now that's true so all right does that
10:04 - make sense to everybody
10:09 - all right
10:11 - we do have a lot of comments we got a
10:12 - lot of folks here today
10:14 - um
10:16 - so all right
10:17 - that was that now
10:19 - all right so we looked a little bit more
10:21 - into some strings um
10:24 - cardinal and jan have we done join
10:28 - for string
10:29 - uh the function uh the join method i
10:33 - can't remember
10:35 - all right
10:36 - so let's look at help
10:39 - str dot
10:44 - join
10:45 - so all right this one was a little odd
10:48 - for me to wrap my head around
10:50 - of why
10:51 - why this wasn't
10:53 - in the um
10:55 - list
10:56 - or iterable function or things like this
10:59 - so all right
11:04 - so
11:05 - join
11:06 - is a method it is it concatenates any
11:09 - number of strings
11:12 - so the reason why
11:14 - it is a string method is whatever you
11:17 - pass it is the glue
11:20 - so
11:22 - actually i'm getting ahead of myself we
11:23 - need to first look at the difference
11:25 - between list and split
11:27 - so like i said we got we got a lot to do
11:30 - so
11:31 - hello
11:36 - hello everyone
11:39 - how are you
11:41 - so all right
11:42 - so i just made
11:44 - took a simple string and assigned it to
11:47 - uh
11:48 - to hello
11:50 - now
11:53 - if i
11:54 - do hello dot split
11:59 - i get a list
12:01 - of everything
12:06 - it is splitting on whatever
12:09 - i pass it typically without anything
12:12 - being passed
12:20 - yes split
12:24 - the delimiter what it separates on
12:26 - is a
12:28 - is a white space
12:31 - there it is any white space so now i can
12:34 - pass it a value and go through but this
12:35 - automatically
12:37 - it splits
12:38 - typically into whole words
12:44 - awesome okay so we we will go over
12:49 - okay
12:50 - we did use zip all right so join is the
12:52 - glue of how it's basically the reverse
12:56 - of split
12:58 - so
12:59 - split goes it operates on a list excuse
13:02 - me uh on a string to go to a list then
13:05 - you pass in a iterable typically a list
13:08 - to join
13:10 - with the glue so all right so now the
13:12 - glue
13:13 - so we have
13:15 - uh
13:16 - let's let's change
13:21 - here we go hello
13:26 - split
13:28 - all right cardinal is has everybody
13:30 - calmed down with the spamming
13:35 - and
13:41 - yes this is for beginners
13:44 - so when this is our
13:46 - and jan and cardinal you'll have to
13:48 - remind me
13:49 - uh this is our what ninth one
13:53 - i think so so there are the this is our
13:57 - ninth video in the series and beau has
13:59 - done an awesome job
14:03 - and yes
14:04 - this will be posted immediately right
14:06 - after uh bo with free code camp does an
14:09 - awesome job and we have our own playlist
14:12 - so you can go back and watch all of
14:14 - these in consecutive order and for just
14:18 - admin purposes
14:20 - all of these videos are redone
14:23 - of the first videos on my channel so
14:27 - this is basically a recap with some
14:29 - different variations and some different
14:31 - consolidations that i've learned to make
14:33 - sure we group things together so all
14:35 - right
14:36 - hello
14:37 - dot
14:40 - split
14:42 - so then
14:45 - hello split
14:47 - so all right
14:48 - so now i have this and it was separated
14:51 - on my on our white spaces
14:54 - so now here's where the glue comes
14:58 - and since this is a
15:04 - [Music]
15:06 - so since our glue is a string this is
15:09 - why join
15:11 - is a
15:13 - string method
15:21 - so now
15:22 - when i pass
15:23 - i use the glue
15:25 - use the join
15:27 - then i pass it our iterable
15:29 - i get
15:31 - this
15:36 - we are we are i just want to make sure
15:38 - we go over because we're going to be
15:39 - using all of these things here
15:42 - momentarily and that was just something
15:45 - that we needed to go over that that was
15:48 - asked about with any and all so all
15:50 - right
15:50 - uh
15:51 - we'll we'll expand upon this shortly so
15:55 - let's just go ahead and
15:57 - get
15:59 - get to it all right
16:02 - so we have
16:04 - we have quite a few challenges to to
16:07 - overcome first
16:09 - we need to build an array here a list of
16:12 - lists so we're actually going to use a
16:15 - nested list comprehension so let's just
16:18 - go ahead and
16:20 - get into it
16:23 - so we're gonna we got our array
16:26 - and
16:27 - just like
16:28 - i like to say we're gonna go for
16:30 - [Music]
16:32 - i
16:33 - in range so we got what one two three
16:36 - four five six range
16:39 - six
16:42 - close this out
16:46 - so our i
16:48 - all right
16:52 - now
16:53 - we want
16:56 - that six times but now we want
16:59 - six across
17:01 - so guess what
17:11 - for i in range
17:16 - six and then we just want
17:22 - letter o's capital letter o's all right
17:28 - anybody lost so far
17:43 - yeah i i think will be
17:45 - maybe a touch over
17:48 - uh an hour i think that's about
17:50 - uh as much time as all this will take
17:53 - and all this stuff can be pretty
17:55 - complicated and i don't want to
17:56 - overwhelm anybody so all right
17:59 - does everybody see what i did here
18:06 - all right so
18:11 - so let's print this out for i in
18:16 - array
18:17 - print i
18:19 - boom okay
18:23 - so i just made
18:25 - that six yeah boom six six
18:29 - six by six
18:31 - now
18:34 - that doesn't look like this
18:36 - so now what i need to do is i need to
18:39 - line this up
18:42 - yes you can do this in pycharm i just
18:45 - know for beginners i don't want this to
18:47 - be anything over complicated that's why
18:50 - i still use
18:53 - the shell in the script because it is
18:56 - satisfactory for what we're doing we're
18:58 - not bringing in
18:59 - complicated modules and we're not
19:02 - doing anything sophisticated enough to
19:04 - need that so that's why we're still here
19:06 - because i don't want to scare anybody
19:08 - away that's the whole point of
19:09 - everything that i do
19:11 - so we need to
19:13 - neaten this up we need to put this
19:17 - we need to put this together
19:20 - so all right
19:23 - so we need to go print
19:28 - uh did to do to do
19:31 - dot join
19:34 - well first we need to go through one at
19:35 - a time for in array
19:41 - print
19:42 - so we're going to use our join
19:45 - and then we're going to pass it i right
19:50 - cool
19:51 - all right
19:52 - so building blocks and that's one of the
19:54 - things that you'll hear me talk a lot
19:57 - about
19:59 - is that to go very very slow incremental
20:02 - at a time
20:03 - and um
20:12 - and make sure we can do this so now now
20:15 - we need to handle our
20:18 - our uh i guess our equivalent of our x
20:22 - and our y
20:23 - so are because this is map coordinates
20:27 - a
20:28 - and a numeric value
20:30 - so now we're going to use the tools that
20:33 - we have at hand
20:35 - all right so we have
20:37 - string import
20:40 - string everybody remember this i think
20:42 - we touched on this
20:44 - a while ago
20:46 - so we're just going to use the as key
20:48 - strings
20:49 - so der
20:51 - string
20:53 - because
20:54 - excuse me
20:55 - so as key lower
20:58 - as key
20:59 - so str
21:07 - for loops go a certain number of time
21:11 - the length of an iterable a
21:14 - a range function
21:16 - but an iterable while is until
21:20 - that condition changes and we're going
21:22 - to be using a while loop in our example
21:24 - and as you can see here
21:26 - the length of this is six times so it
21:29 - comes down here until it's exhausted
21:31 - until the iterable
21:34 - is exhausted that's basically the
21:36 - difference between the two good question
21:38 - all right
21:40 - string
21:40 - [Music]
21:42 - dot as
21:46 - key
21:47 - dot lower case
21:53 - oops
21:56 - boom
21:57 - forgot that's an attribute you're very
21:59 - welcome
22:00 - uh was that sebastian
22:04 - i love it thanks john all right so now
22:06 - we're just gonna use the first six
22:10 - so then we're not going to import
22:11 - everything from string
22:14 - import
22:17 - as key
22:21 - lowercase
22:25 - as i think what i think i think i like
22:27 - doing this as letters yep
22:30 - as letters
22:32 - all right
22:34 - so then letters
22:39 - oh yeah we're just going to use a
22:40 - through f
22:42 - equals so then since this is going to be
22:45 - a string we're just going to chop this
22:46 - off right here first
22:48 - six
22:49 - so letters
22:54 - then
22:56 - yep six
22:58 - so we'll bring this in and i'll show you
23:01 - so a underscore f
23:05 - f
23:06 - boom just like this so then if i
23:10 - wanted to
23:12 - just like we learned
23:16 - a little bit ago
23:22 - because so the difference between split
23:25 - and list
23:27 - is split changes it splits it on the
23:30 - white spaces or whatever the delimiter
23:33 - we choose
23:34 - list
23:35 - changes everything so let's do hello
23:38 - again
23:41 - uh list
23:43 - equals
23:44 - oh yeah
23:47 - hello everyone
23:49 - this is good enough so when i do list on
23:53 - hello
23:57 - every single
24:00 - item
24:01 - in the iterable
24:03 - is broken out and that will become handy
24:06 - and we will use that
24:08 - very soon in our example so now
24:11 - so now a underscore f which is our first
24:14 - six letters
24:15 - we're gonna wrap this in list
24:26 - so now a underscore f
24:35 - so now i have my abcd
24:39 - efg
24:42 - stopping at f sorry
24:45 - all right
24:46 - everybody good
24:49 - you want to print hello okay
24:57 - boom
24:58 - well i just ran that up here so
25:02 - that's hello
25:04 - just makes it nice and pretty and
25:06 - there's actually a
25:09 - uh way to print things even prettier in
25:12 - python but those are the awesome skills
25:14 - that we have
25:16 - all right
25:17 - so now we have
25:19 - this so we are getting
25:22 - very very slow so now we need to take
25:25 - and get our numbers over here
25:29 - so now we need to set this up
25:33 - so num equals
25:36 - list
25:37 - range dot six
25:41 - now
25:42 - is that right
25:46 - how's this out
25:48 - so we got num right
25:50 - 0 through 5.
25:53 - that's not going to be right because we
25:54 - want one through six because we know
25:57 - we could have it be zero through five
25:59 - but the user will probably not want to
26:01 - tolerate
26:03 - that
26:04 - and i don't know why i keep doing that
26:07 - so
26:09 - start stop
26:11 - exclusive
26:13 - so now let's run this again let's call
26:16 - num
26:17 - there we go one through six
26:21 - so now now let's see if we can get this
26:24 - board
26:26 - to get the letters and the numbers at
26:29 - the top
26:35 - so right now
26:37 - we just need the letters first okay so
26:40 - print
26:43 - we have our list
26:46 - okay print
26:48 - a underscore f let's just start here
26:52 - all right so that's not right
26:56 - so
26:56 - [Music]
26:58 - oh yeah we need to put this in a string
27:02 - that's right we're using join
27:10 - oh
27:10 - here we go
27:13 - but now why why don't we make that's not
27:15 - that's not pretty we need to make that
27:17 - capital don't we shouldn't we don't we
27:18 - want to
27:21 - so
27:22 - uh
27:23 - how do we do that
27:25 - anybody remember
27:27 - how do we take a letter and make it
27:29 - capitalized
27:32 - any takers
27:38 - oop
27:45 - so
28:01 - let's see
28:04 - to be honest i guess i can't find out
28:06 - where i did this do i have this all in
28:08 - upper
28:11 - i wonder if i have this in upper
28:12 - somewhere else
28:15 - ah why don't we do this
28:19 - this will change it right here
28:22 - let's get rid of this
28:25 - i thought i found all this
28:27 - there we go
28:28 - so let's see what i did here
28:31 - so this brings this string in
28:34 - as letters right
28:39 - so all these are lowercase i slap an
28:41 - upper at the end of it
28:42 - converts all of it and then i'm slicing
28:45 - it so that's why this
28:47 - works right here
28:50 - and like i said i can't find this
28:53 - anywhere else in my main program to see
28:55 - where i convert all those
29:01 - ah
29:03 - i had this as upper case so let me show
29:05 - you two ways to do this
29:07 - so all right
29:09 - let's make sure i didn't lose anybody
29:10 - all right is everybody okay with this
29:14 - right so that's
29:18 - uh
29:19 - no when i had it down here because
29:20 - that's working on a list
29:23 - so
29:25 - i did this here but i did not look at my
29:28 - notes
29:29 - so all right you can have this is upper
29:33 - and then also and inside uh
29:37 - let's see
29:38 - import string
29:41 - dir on string
29:44 - it has upper upper case right here
29:48 - so
29:51 - upper
29:53 - oops clean that up
29:56 - there we are so you have one of two
29:58 - options so it's if you want two if you
30:02 - want to have them base is lowercase
30:04 - and then you want to come back
30:06 - or you can also come and pull this in uh
30:10 - i guess i thought i
30:14 - yeah but we probably won't get the flask
30:16 - for a very long time we have we have
30:19 - months before we'll get to that and then
30:22 - you could argue that django's better
30:23 - than flask because then you don't have
30:25 - to do as much
30:27 - setting up because flask is
30:29 - very very
30:31 - very very bare bones very very
30:33 - lightweight django
30:34 - has a little bit more you have to do a
30:36 - little bit more heavy lifting but boy
30:38 - does it take care of a lot of stuff for
30:39 - you all right we can have that
30:41 - discussion later
30:43 - all right uh so now we have now we need
30:47 - to handle our
30:49 - numbers on the side
30:51 - so all right
30:52 - i want to show you something
30:55 - remember how we did uh
30:58 - iterables and
31:03 - iterators
31:05 - so all right we're going to turn this
31:07 - into an iter
31:09 - and you might ask why
31:11 - so we don't have to deal and count and
31:14 - do things and
31:16 - we can just
31:17 - interject
31:19 - so we got num
31:21 - and we don't have to overthink this
31:24 - so we can literally just drop in
31:29 - this and we don't have to fight and we
31:31 - don't have to change this and do
31:33 - anything over complicated we can just go
31:34 - grab our next
31:36 - drop it in
31:37 - and not overthink and not have to count
31:39 - and have an index and do anything crazy
31:44 - so we can just go num
31:47 - now we do have to handle
31:50 - an issue here
31:52 - all right
31:55 - all right so now we caused another
31:56 - problem
31:58 - so we have our one through six
32:00 - but we're off a little bit here
32:04 - so we got boom boom
32:08 - let's see if that solved it
32:11 - off a little bit
32:15 - perfect
32:16 - so here we go
32:25 - yes absolutely
32:26 - [Music]
32:27 - you can go back
32:33 - and search for
32:36 - inside free code camp and type in python
32:38 - basics or you can go to the playlist and
32:42 - you you can see
32:43 - um
32:45 - all the other videos all right enter
32:48 - let's let's go over that real slow again
32:52 - so if
32:53 - the reason why i changed that that list
32:57 - to
32:58 - a
32:59 - iter
33:03 - is because if you're trying to go
33:05 - through two functions excuse me two
33:08 - iterables at the same time because i'm
33:10 - using this as a marker i would have to
33:12 - then take this as an index
33:15 - and i would have to change and go
33:16 - through and have some count
33:19 - but
33:20 - when i turned it into an iter
33:23 - i can just go
33:24 - and grab each of these next one at a
33:28 - time
33:29 - and i don't know where
33:33 - okay great great question we probably
33:35 - have a lot of new people here today so
33:42 - so right here inside the print function
33:48 - shoot is this at the bottom
33:50 - all right i think i have this scaled
33:52 - right okay good all right
33:55 - so
33:56 - end
33:57 - what does it do at the end of the print
34:01 - it defaults
34:04 - to new line
34:05 - this character right here
34:07 - backslash n is newline
34:10 - what i'm doing is i'm reassigning it
34:14 - and i'm suppressing
34:16 - that newline function
34:18 - so see right here
34:20 - i have
34:21 - end is get a new line
34:24 - i'm telling python suppress go to a new
34:27 - line
34:27 - and conti stay on that same line that's
34:30 - why
34:31 - this
34:32 - basically is on this line right here
34:37 - then after this line is executed then a
34:40 - new line happens
34:42 - on my channel in the link down below
34:44 - there's a link to my channel you can go
34:47 - and look at number shapes
34:48 - triangle uh triangle numbers reverse
34:51 - triangle there's a whole series they're
34:52 - just about five videos on number shapes
34:55 - and it goes real in depth of what this
34:58 - end
34:59 - uh suppression does right here the end
35:03 - argument inside the print function so
35:05 - all right
35:06 - it is very handy
35:07 - to do a variety of things so great
35:10 - question i love having a bunch of new
35:12 - folks here and i'm glad we have chat
35:14 - open so i want to tell bo and quincy
35:17 - thank you for doing that
35:20 - all right
35:21 - so we are getting
35:23 - very very close
35:24 - now we need to handle some logic of
35:28 - how to go about
35:30 - doing this
35:32 - so we're going to need to put this in a
35:34 - while loop
35:36 - so
35:37 - let's
35:39 - come up with
35:42 - a true
35:45 - and then we also need to then
35:47 - take in some input
35:49 - oh and i think my favorite part
35:52 - is this right here
35:54 - well actually we also need to come up
35:55 - with some hidden values so all right
35:57 - there's a variety of ways to do it but
35:59 - i'm a very
36:01 - excuse me i'm a very simple guy
36:04 - so what our goal is is we're gonna when
36:06 - we guess
36:08 - where an x is we're going to have the o
36:12 - get removed
36:14 - then show that x in location then if the
36:18 - guess is not
36:19 - a
36:21 - has an x it goes
36:23 - and just becomes a blank space
36:25 - so we need to we have we need to handle
36:28 - a lot of things
36:29 - right here
36:31 - all right so first we need to indent
36:34 - this so i'm going to show you oops
36:38 - and boom boom
36:43 - all right
36:46 - so what i did and i did not do tab
36:49 - uh i did indent region because if you
36:52 - get into the tab
36:53 - issue you will have all kinds
36:56 - of
36:58 - uh
37:00 - all kinds of issues don't ever
37:02 - pick one do it i'm not going to sit here
37:05 - and be
37:06 - just do spaces just do tabs
37:08 - whatever your preference is but don't
37:10 - mix them you will have a headache and
37:12 - you'll want to you'll go nuts so all
37:14 - right
37:15 - uh let's see we have our
37:18 - we have our um
37:22 - everything right here but now
37:24 - we need to come up with our guesses
37:27 - so now we're going to
37:29 - randomly
37:30 - so we need to we need to look at random
37:33 - import
37:35 - random because we want the game
37:38 - and it's just a simple game and yes it's
37:40 - 100
37:42 - um
37:43 - uh true all this is is to get you to
37:46 - think about how to do how to handle the
37:48 - things that we already know
37:51 - all right
37:52 - so we're going to
37:54 - look at choice inside random so well
37:58 - first let's look at it let's see what
37:59 - our choices are for random
38:02 - random
38:03 - all right
38:04 - and we have choice right here so what
38:07 - does random choice do
38:10 - random.
38:13 - choice
38:16 - choose a random element from a non-empty
38:18 - sequence
38:22 - so basically
38:24 - that's going to go but now
38:26 - we're actually literally going to mix
38:29 - and match we're going gonna take a
38:31 - choice out of each of these and we're
38:32 - gonna come up with four
38:34 - so now we need to go through
38:37 - four times and pick
38:41 - four
38:42 - hidden
38:43 - so we're gonna have a list of we're
38:46 - going to have a list of choices here
38:49 - and this is going to determine how many
38:52 - we have left so i know it's really
38:54 - simple but i remember the first time i
38:56 - learned how to take
38:59 - basically examine and have this change
39:01 - each time you guess correctly i don't
39:03 - know like i said i'm uh i'm a pretty
39:06 - simple guy all right so now we need to
39:08 - look at some more list comprehension
39:12 - so for i in range four we just want four
39:16 - guesses
39:18 - so now
39:20 - now let's throw this
39:22 - inside of a list
39:24 - so we have our
39:27 - list of letters
39:29 - and our iterable
39:31 - of numbers
39:35 - our iter right there iterator our
39:37 - iterator of functions our iterator of
39:39 - numbers excuse me
39:41 - so we have choice
39:43 - and then we're just going to go
39:45 - a underscore f because we want that one
39:47 - to be first
39:49 - now and then we're going to do let's see
39:52 - choice
39:53 - we need to handle another problem here
39:55 - if i can type today sorry everybody
40:00 - and
40:08 - oh i know what i did here
40:10 - helps if i spell correctly
40:13 - let's bring this over just a touch so we
40:16 - can see everything
40:19 - and we are just going to clean this up
40:21 - so
40:24 - we can have complete control because you
40:26 - cannot choose because you have a
40:28 - iterator you cannot pull out
40:31 - that was
40:32 - and
40:34 - do
40:36 - all right
40:39 - and we have one more problem here
40:42 - so if this is a number so if i wanted to
40:44 - concatenate
40:45 - a string
40:47 - because this is a this is a list of
40:49 - letters that's a string and this is
40:51 - going to be a number we can't
40:53 - concatenate
40:59 - we cannot concatenate a string and a
41:02 - number
41:14 - all right everybody good with this
41:18 - uh yes there's actually yes there is a
41:21 - seed function
41:22 - in um
41:24 - and there's a there's actually a video
41:27 - on my channel that is actually quite
41:30 - popular it's very interesting seed is
41:32 - repeatability for random numbers so
41:34 - basically if i were to tell you
41:37 - that um i made a random list of 50 000
41:41 - numbers and i started with the seed of
41:43 - two random dot seed two you and i could
41:45 - have the same list of random numbers
41:47 - it's actually one of the very cool
41:49 - things about
41:51 - uh-oh am i buffering
41:53 - did i just drop out
41:57 - all right am i back up
42:01 - okay looks like i'm back up
42:08 - so
42:09 - if you were to concatenate
42:13 - and i would want to have
42:15 - a
42:17 - letter and a
42:19 - number like string a is numeric
42:23 - string i have to convert it
42:26 - to a string
42:28 - and there's two ways to do this
42:32 - longhand and
42:35 - shorthand so you wrap it in the string
42:37 - function
42:39 - so now i'm going to come over here
42:40 - str
42:41 - [Music]
42:42 - and wrap this up
42:44 - so basically i'm we're going to look at
42:46 - this
42:47 - yes this is a lot here
42:50 - but i want you to look at this so that
42:51 - over here is my for i and range
42:54 - that's our
42:55 - our regular
42:56 - uh for loop
42:58 - and then right here is a concatenated
43:02 - very simple
43:04 - see how i did oops
43:12 - and what did i forget
43:18 - i left something out let's see where it
43:19 - is
43:21 - i have an extra suppress set of
43:22 - parentheses
43:25 - i need one more there we go
43:37 - and i forgot a while play there we go
43:46 - we don't need this right now
43:54 - all right
43:55 - so now let's look at hidden
43:57 - i don't know why everything is
43:59 - freezing up on me
44:04 - forgive me guys
44:09 - all right
44:10 - that go through
44:12 - oh no is it messing up the stream
44:22 - i don't think i have too much running
44:24 - but it i maybe
44:27 - let me close some stuff down sorry guys
44:36 - whoa
44:40 - i don't have the best computer but i
44:42 - also don't have the absolute slowest
44:44 - computer either
44:52 - i thought i shut everything down but
44:53 - guys i am so so sorry i am in the dark
44:56 - right now
44:57 - with what i have running
45:00 - i can't see you
45:02 - i have no idea
45:05 - if you can see me
45:07 - i can't get to
45:10 - x
45:16 - it appears that the stream is good
45:19 - i can't see chat
45:21 - so
45:22 - i'm just going to keep going
45:27 - all right i'm shutting this down
45:30 - all right let's rerun this
45:39 - okay
45:45 - from random
45:47 - import choice
45:49 - all right
45:51 - let's get this resized
45:56 - so i usually restart my
45:58 - modem before the stream looks like i'm
46:01 - going to be restarting
46:04 - my computer before the stream too
46:06 - all right there we go
46:11 - okay
46:19 - we're good
46:21 - okay good
46:22 - all right yeah sorry guys everything was
46:24 - just locking up i guess
46:26 - i don't know what i had running in the
46:28 - background
46:29 - all right
46:31 - okay so now here are my random choices
46:35 - we're going to instead of so this is
46:38 - what i want you to think about
46:39 - instead of us over complicating this and
46:42 - going okay we're going to assign and
46:43 - then have it hidden and this and that
46:46 - nope
46:47 - we don't care
46:49 - what this is we're just going to see if
46:51 - they type in values that match these so
46:54 - we're going to take input so we're going
46:56 - to the board is going to look like this
46:58 - and then when
47:00 - these are either met or not met then
47:02 - we're going to do something does that
47:04 - make sense
47:07 - if these conditions are met or not met
47:10 - all right so now
47:13 - now we need to come in here and we need
47:16 - to do
47:17 - handle our while loop oops
47:23 - so basically
47:28 - uh because we don't we if we were to
47:30 - just let this if we were to do this
47:32 - right now run this what would happen
47:35 - it would just run over and over and over
47:36 - and over and over and over again
47:40 - oh no it wouldn't i forgot that was the
47:42 - also built up back in so you run out of
47:45 - next it stops
47:46 - but we can also control this
47:50 - by
47:50 - our
47:52 - um
47:57 - let's see
48:02 - and now the other thing is is then we
48:05 - need to run this
48:07 - down here
48:09 - each time through
48:12 - so numer
48:14 - then range
48:18 - one through seven
48:20 - there we go
48:22 - all right and then we need to take input
48:25 - from the user after we print
48:29 - our little our little map
48:31 - so move guess
48:33 - so we're just going to do move
48:35 - input
48:38 - 1 2 3 because we want multiple
48:41 - multiple lines q to quit enter move and
48:44 - then just like that
48:46 - so q2
48:51 - quit
48:53 - and come down here
48:56 - enter
48:56 - [Music]
48:58 - move
49:00 - eg
49:02 - example
49:04 - of
49:06 - a
49:07 - five
49:10 - one two three
49:13 - all right
49:16 - and i forgot to close that out
49:18 - all right so now we need to handle this
49:21 - if
49:22 - move dot lower
49:26 - equals
49:29 - q
49:31 - then we take
49:34 - then we change play
49:36 - to false to kick out
49:42 - false and to a dyslexic person that
49:44 - looked exactly right all right so let's
49:47 - see how close we're getting okay
49:50 - here we go
49:52 - all right everybody follow along along
49:53 - so far
49:55 - all right cool
49:57 - so we have our top coordinate
50:00 - we have we have our uh
50:02 - x coordinate we have our y coordinate
50:05 - and then if we type in q
50:07 - we get out
50:09 - so all right so now we need to handle
50:11 - how we are going to
50:16 - handle
50:18 - the guesses and what we're going to do
50:23 - so now we need to do a lot of a little
50:25 - thinking so we covered indexing with
50:28 - lists
50:34 - jan cardinal can you remember
50:36 - if we've done
50:39 - if we've done that before because i
50:41 - don't want to jump directly into it if
50:43 - we haven't
50:44 - so it's actually some pretty
50:47 - oh
50:49 - we need to handle this right here
50:52 - so that is going to print each time
50:55 - through our while loop
50:58 - and to test this we're going to
51:00 - we're going to put our
51:02 - hidden
51:02 - so we can test and make sure
51:08 - right
51:10 - okay
51:11 - so here are hidden here's our hidden
51:14 - information because we do want to see it
51:17 - so that we can test and make sure that
51:18 - it's working properly that is probably
51:20 - the biggest thing that i can
51:24 - i can say
51:25 - is that you also want to test the
51:27 - positive scenario or the scenarios that
51:29 - you're expecting
51:30 - i always love teaching young people when
51:33 - they say
51:35 - it didn't work or it didn't do it right
51:37 - because they're expecting something and
51:40 - something else came out and they
51:42 - couldn't dare be wrong so it has to get
51:45 - uh it has to be the computer
51:47 - it couldn't be the program that they
51:49 - wrote so
51:52 - all right
51:53 - so we're going to work off this in a
51:55 - minute all right let's get let's get out
51:56 - of here
52:05 - no no no no i'm sorry
52:08 - let's go over lower and low and lower
52:10 - case for just a second
52:13 - lowercase
52:16 - is from lower case and upper case is
52:19 - from the string module as key lower
52:23 - and
52:25 - what i did with
52:28 - lower lower is a method
52:32 - from as a string
52:34 - and it's right
52:37 - here so i run dur
52:39 - on my object and i get a list of all the
52:41 - methods
52:44 - and
52:45 - then i come in here and i do str lower i
52:48 - run help
52:49 - on str lower
52:51 - and
52:52 - it returns a and it tells me what it
52:54 - actually does
52:56 - and how to use it so return a copy of
52:58 - the string converting to lower case
53:01 - and
53:02 - this is vital
53:08 - if it's in place returns none or what it
53:11 - returns
53:12 - if you haven't seen me talk about that
53:15 - this is very important to understand the
53:17 - actual functionality of the method so
53:19 - this
53:20 - this one returns a copy so it will not
53:23 - do it in place
53:25 - so
53:26 - right here
53:30 - we'll do sam
53:32 - then i go lower
53:35 - so here let's just go let's
53:40 - let's m
53:44 - all right name
53:45 - so all right so now i go name.lower
53:53 - all came out but it did not change name
53:56 - so if i were to go lower
53:58 - then name dot lower
54:02 - name still same stays capital
54:06 - lower because i'm returning something
54:08 - i'm creating something return is a very
54:10 - important word in python i cannot say
54:13 - that enough
54:14 - so this creates something return creates
54:17 - something so now if i'm creating
54:18 - something i have something to assign
54:20 - something to so i'm taking this return
54:22 - value which is a copy of the lower of
54:25 - the original string assigning it so
54:27 - that's why now i have two variables
54:30 - right there
54:31 - all right
54:33 - all right is that good
54:35 - okay
54:36 - so all right we're almost an hour in so
54:40 - let's see if we can
54:41 - run through this real fast so
54:43 - we have our if
54:46 - so now let's do an else
54:51 - so now
54:52 - basically what we're wanting to do
54:56 - uh pass let's bring this in
54:58 - not to scroll up
55:00 - so we are wanting to go and take
55:05 - let's in
55:06 - this over i guess we don't need
55:09 - to be able to see that anymore we know
55:11 - what that did
55:14 - there we have all that all right
55:18 - so now we're going to take and we want
55:19 - to check and see so right now
55:23 - well that that's going to change in a
55:25 - minute
55:26 - but the hidden will stay the same once
55:28 - once we're in our for loop
55:30 - so
55:32 - oh i guess we can do this right here so
55:36 - all right
55:38 - so
55:39 - what the goal is is if i match one of
55:41 - these
55:43 - i want something to change
55:46 - and also if i don't match it so if i
55:48 - match it i want it to change to an x and
55:51 - if i do not match it i want it to change
55:52 - to a blank space
55:54 - so
55:55 - we got some stuff to do so now actually
55:58 - we need to talk about n
55:59 - we know n is in our
56:03 - um
56:05 - when we do our range
56:07 - uh when we do our for loop have i
56:09 - explicitly talked about in
56:12 - jan uh cardinal have i talked about
56:15 - those
56:19 - you guys uh if i explicitly talked about
56:22 - that
56:25 - all right so right now i have hidden
56:28 - right so i have f f4 c6
56:34 - c6
56:35 - ooh
56:38 - do i handle this i got i got c6 twice
56:41 - and a4
56:44 - so let's see
56:48 - if i handle that
56:51 - to see if
56:56 - oh that would be later at another date
56:59 - because we are going to handle
57:01 - this guesses in a minute so let's rerun
57:04 - this
57:05 - all right
57:06 - we'll use
57:10 - we use this hidden
57:12 - i did not think about that when i was
57:14 - building this originally
57:16 - so all right let's look at in the in the
57:18 - end keyword anybody remember how to get
57:21 - to
57:22 - keywords
57:24 - because especially since we got a lot of
57:25 - new people here today
57:27 - help
57:29 - in
57:31 - all right so let's look at
57:33 - what n does
57:41 - well it'd be
57:43 - 30
57:45 - would it be 36 to 1
57:48 - i guess to repeat would that be 36 times
57:50 - 36
57:52 - to 1 all right so n basically is a
57:55 - keyword
57:57 - it's a membership test operation
58:00 - is it a member
58:05 - so
58:06 - let's rerun this and get one back in
58:08 - here
58:09 - so i have no way check that out f's all
58:12 - the way across
58:16 - so just like when i did name
58:23 - sam
58:27 - stay consistent sam
58:29 - in
58:31 - name
58:38 - all right
58:39 - so
58:40 - is
58:42 - basically whenever you see
58:45 - something like this i always
58:47 - like to tell
58:49 - new people to
58:51 - put the word
58:52 - put the question is in front of it is s
58:55 - in name
58:56 - true
58:58 - so now
59:00 - let's go
59:04 - f2
59:06 - in
59:09 - in
59:10 - hidden
59:11 - true
59:13 - f
59:14 - lowercase f2
59:16 - in
59:17 - hidden
59:19 - false
59:20 - so we're going to be doing a comparison
59:22 - so we're going to be taking user
59:23 - information user input right here
59:28 - and are we going to and we're going to
59:29 - match it so is it in this and if it is
59:33 - do one thing if it's not do another
59:36 - that's basically what our comparison our
59:38 - membership test is
59:40 - and anytime
59:42 - you
59:44 - can't remember exactly because i hated
59:47 - that it it took me probably two years
59:49 - and not a lot of places well i stumbled
59:51 - across it i don't think i've ever
59:52 - written seen anybody you can run help on
59:56 - any function and method
59:59 - but the only way to get to a keyword is
60:01 - through the help prompt
60:03 - all right
60:04 - and the as you can see with the help
60:07 - prompt
60:08 - it is
60:10 - you can end up
60:11 - going down a rabbit hole
60:14 - so there is a ton
60:16 - of information and like i s and then you
60:19 - can lead to
60:21 - other
60:23 - you end up going down a rabbit hole
60:27 - keywords
60:30 - boom
60:31 - so just like this
60:33 - and you can just start and you can go
60:35 - from there
60:44 - all right so let's quit out of here so
60:47 - now we have our two scenarios that we
60:48 - need to handle if it is in and if it's
60:51 - not in
60:54 - so let's get after this
61:00 - so
61:01 - we're actually gonna have
61:03 - like i said two
61:05 - if move in
61:07 - hidden
61:13 - pass
61:14 - then else
61:17 - pass
61:18 - it's all right
61:19 - and the reason why you use pass is you
61:21 - know it's going to be there but you
61:22 - don't want it to throw up while you're
61:23 - kind of looking at it
61:25 - so now
61:26 - now we need to and maybe at a later time
61:29 - we can go in and we can
61:31 - uh
61:33 - look at how to handle
61:35 - and only have certain guesses because
61:36 - i'm going to give you
61:38 - a hint
61:40 - of how to handle this so again like i
61:43 - was talking about we're going to start
61:44 - doing more with lists
61:47 - um
61:48 - pop the pop method for a list have we
61:52 - done that yet i don't think we have
61:59 - all right so we're going to do help
62:03 - list
62:04 - dot pop
62:05 - it's a very interesting method
62:08 - i think we did do it so it does
62:11 - and if you and i think we have a lot of
62:13 - new people here today so we're going to
62:15 - go over it real slow does two things and
62:18 - you know it does two things because it
62:19 - tells you it does two things right here
62:21 - remove and return
62:24 - so basically
62:27 - we did do it in the horse example
62:28 - awesome
62:29 - thank you jose
62:32 - so and you guys are this is why i love
62:35 - doing uh these live streams especially
62:37 - with chat and everybody coming and going
62:40 - um
62:43 - awesome
62:44 - and for you guys who are hanging out
62:46 - here and have been around a long time
62:48 - thank you
62:50 - you guys make my life a lot easier and i
62:53 - appreciate you guys being admins
62:55 - too
62:56 - all right so it does two things it's
62:58 - going to remove it from the list
63:01 - and if necessary you can then assign
63:03 - that value because it returns it
63:06 - so you can have it come so as you pull
63:09 - it out
63:10 - that that method is removing it
63:13 - and then
63:16 - that that that value that popped value
63:18 - can be assigned to a new value if you
63:20 - want it to move someplace else
63:22 - especially
63:24 - moving from one list to another
63:26 - that is uh
63:29 - i can't remember
63:31 - there's a good example i have some
63:32 - somewhere floating around but yes this
63:34 - is probably one of the coolest ones
63:36 - because it can do two things at a time
63:38 - and it defaults to the last item so all
63:41 - right let's keep moving like i said
63:43 - we're already an hour in i don't want to
63:44 - go over too long because uh you guys are
63:48 - you guys are up late i think
63:51 - okay
63:52 - so if it matches
63:54 - we want to
63:56 - have it convert the
63:59 - zero
64:01 - o to an x
64:03 - and if it does not match we're going to
64:05 - convert the capital o to a blank space
64:10 - uh shoot that just made me think of
64:11 - something that i don't think i handled
64:13 - ah
64:14 - we need to talk about this this array
64:17 - so the array is this
64:21 - for i in
64:22 - array
64:24 - and we need to talk about this for a
64:25 - minute
64:28 - if i can type
64:30 - all right
64:32 - so i want to change
64:34 - this
64:35 - one
64:36 - right
64:37 - here
64:38 - so it is the first
64:43 - uh row
64:46 - and then the one two three
64:50 - column so i want you to think about that
64:52 - so python goes
64:54 - zero one two three four five
64:58 - zero one two
65:01 - so zero and zero one two
65:05 - so since we know that lists are mutable
65:08 - because this is a list of lists i can
65:11 - change lists
65:12 - so i'm going to change this one right
65:14 - here to a blank space
65:17 - so what i say
65:19 - 0
65:21 - 0 1 2.
65:31 - for i in
65:33 - array print i
65:38 - so i said i wanted this one right here
65:40 - to be a blank space
65:43 - and i did it
65:45 - alright does everybody follow that
65:54 - okay everybody good with that
65:56 - because this is our building block of
65:58 - how we're going to go about doing this
66:01 - so it's my it's a list of lists
66:03 - so i have my first
66:07 - my first list
66:09 - index
66:10 - first one and then my second one
66:14 - all right
66:15 - when we go over that again
66:19 - all right so
66:23 - if i index my zero index is my first row
66:29 - and then
66:31 - zero one
66:32 - two three
66:35 - four five so now
66:40 - zero
66:41 - i'm going to change the last item the
66:43 - fifth one
66:44 - to a x
66:53 - boom
66:56 - so because
67:00 - this is a list of lists right
67:03 - so my type for array
67:05 - is a list
67:06 - then type for array index 0
67:12 - is also a list
67:15 - then
67:17 - my type
67:21 - array
67:23 - zero and really any item but we'll just
67:25 - do zero zero
67:27 - type is a string
67:30 - so
67:31 - whole thing
67:33 - list
67:35 - first index
67:38 - list
67:40 - second layer of indexing
67:43 - string
67:45 - all right
67:51 - all we're doing is kind of just laying
67:53 - out a very simple
67:56 - i mean it is a very very rudimentary uh
68:00 - battleship
68:02 - but the reason why i like this example
68:04 - is because you have to use um
68:08 - lists of lists list comprehension
68:11 - uh choice from the random library uh
68:15 - a little bit of logic a little bit of
68:17 - planning
68:18 - throwing in some uh
68:21 - some
68:22 - new line suppression and uh things like
68:25 - this it is just a huge conglomerate
68:29 - of everything that we've been learning
68:31 - so far
68:32 - so all right
68:38 - i love that find a game of finding uh
68:40 - hidden nexus i love that
68:42 - oh we could call it treasure hunt there
68:44 - we go i guess it's like uh what an old
68:46 - version i'll really show my age here in
68:48 - a minute uh uh minesweeper
68:51 - that but it's also uh
68:53 - not as complicated so all right first
68:56 - all right so we have hidden right here
69:00 - now we need to get this i love that f2 5
69:03 - f2 f5 f6 f4 so now we need this each
69:08 - time through
69:10 - we need to get this to print out how
69:12 - many
69:13 - how many are left
69:15 - how many x's are left so let's do that
69:19 - so print
69:21 - f
69:23 - dot
69:24 - find
69:26 - the
69:28 - when of hidden
69:31 - oops
69:32 - bracket
69:34 - and
69:36 - hidden
69:42 - hidden
69:44 - x's
69:46 - so all right
69:47 - let's go over what i did here
69:50 - so i have a string
69:54 - and each time through i'm having this
69:58 - count
69:59 - how many
70:00 - how many do we have in here
70:03 - so each time we find one of course our
70:06 - hidden list will get smaller and this
70:08 - number will change so the user will know
70:12 - how many two
70:14 - that he's got that they have to find
70:16 - left all right
70:19 - now we need to deal with this
70:22 - so
70:22 - if the guess if the move if your move is
70:26 - in this list
70:28 - so if that move is in the list
70:30 - hidden
70:32 - dot pop
70:35 - hidden
70:37 - dot index that we need to look at index
70:41 - all right
70:46 - we looked at pop i did not i can't
70:48 - remember if i asked you guys if we did
70:50 - index
70:52 - so hidden what that does
70:54 - is
70:56 - then help
71:00 - on list
71:02 - dot
71:04 - index
71:06 - okay return
71:07 - first index
71:09 - of value
71:10 - so basically what this is
71:15 - is so i want to find
71:19 - where this
71:20 - is
71:26 - all right and then i want to
71:30 - take that and i want to remove it
71:37 - all right
71:41 - uh let's see
71:50 - because i want to
71:54 - there we go
71:57 - take that out and then
72:00 - i'm gonna then slice
72:03 - i need to slice up my array so this work
72:06 - right here this is our building block
72:13 - let's see then move
72:16 - equals list because remember how we took
72:18 - our
72:19 - information
72:24 - and if i pass
72:30 - oops
72:34 - a5
72:37 - i separate it
72:40 - because this is important because then
72:42 - i'm going to match these and pull these
72:44 - out because i have my
72:47 - row and my column
72:50 - all right
72:51 - and then my array
72:54 - and here's my location right
72:56 - int
72:58 - move
73:00 - one
73:07 - now why am i going to need to subtract i
73:09 - need to tweak this a little bit
73:12 - and why and we'll go over this in just a
73:15 - second
73:16 - i need to type and concentrate
73:19 - move
73:22 - zero
73:26 - and wrap that up
73:29 - equals
73:31 - x
73:33 - all right
73:35 - now you remember how we adjusted this we
73:37 - know in python
73:39 - that it's a zero index
73:41 - so when we wanted to change
73:44 - our first
73:47 - our first one
73:49 - but it's the zero index
73:51 - zero
73:53 - and what we changed
73:57 - that one right
73:59 - there
74:03 - zero and then zero one two
74:06 - and that was the one we changed so we
74:08 - are subtracting one
74:09 - because
74:10 - of the zero indexing effect the user
74:14 - won't tolerate
74:16 - this being zero
74:18 - they want it one through six so they
74:20 - know it's the sixth row they're not
74:22 - going to put up with going so we need to
74:24 - adjust our logic and our planning
74:28 - and so we subtract one
74:32 - now
74:34 - all right
74:37 - let's test this
74:39 - and we're gonna go
74:40 - a
74:41 - five
74:44 - so see that
74:48 - i don't know why i typed a5 it clearly
74:50 - says a4
74:53 - boom
74:55 - so two things happened
74:58 - we removed actually i guess three
75:01 - because we have this self
75:05 - so here's our hidden list it was a4 i
75:08 - typed a5 because apparently i can't read
75:10 - so then we redid it it
75:13 - jumped back out
75:15 - so i typed in a4
75:17 - removed that from the list
75:20 - then adjusted this and said hey you have
75:22 - three more left which all that is taking
75:24 - the len then changed our
75:27 - zero to an x
75:29 - all right
75:30 - so let's make sure that
75:33 - that works
75:34 - all right so now i'm just going to guess
75:36 - wrong
75:37 - b6
75:40 - okay but that didn't
75:43 - do
75:44 - anything so now we need to quit
75:47 - and now we need to handle what happens
75:50 - when
75:55 - oops
76:04 - all right now we need to handle what
76:07 - happens when
76:08 - the move is wrong
76:11 - move equals list
76:13 - move
76:16 - so say same thing
76:20 - exact same thing
76:29 - and then what happens is we go
76:33 - and you know i'm not a big fan of
76:35 - copying
76:36 - because too many things can go wrong
76:39 - all right
76:43 - so here we are
76:44 - so we're going to test
76:46 - b
76:47 - two
76:49 - b two
76:51 - cool
76:52 - now let's do b1
76:55 - okay
76:56 - good
76:58 - f6
77:00 - okay good so it's just going blank
77:03 - then
77:04 - let's do this one c4
77:07 - oh no it's on our list let's do c3
77:10 - c3
77:12 - okay now c4
77:15 - awesome
77:16 - so there we go guys
77:18 - this is just
77:20 - a wonderful little tool
77:22 - for us to really start
77:24 - laying these out
77:26 - and you can take this and you can make
77:28 - this more sophisticated less
77:30 - sophisticated whatever you want to do so
77:33 - we're about
77:34 - uh 77 minutes in
77:37 - a great little stream back so glad to be
77:40 - back
77:42 - love the uh love the help and the
77:44 - support
77:46 - from you guys
77:48 - ooh that is a much bigger delay than i
77:50 - thought
77:51 - so i am
77:53 - i am very
77:58 - so well either battleship or i think
78:00 - somebody commented back uh fine find the
78:03 - four x's i i love that treasure hunt or
78:06 - however but just a wonderful little tool
78:09 - of the things that we have learned
78:12 - and in a small little span of time that
78:15 - it just really gets you thinking
78:18 - uh the one with all the indexing
78:21 - uh
78:23 - oh sure the one with all the indexing
78:25 - all right
78:26 - so
78:28 - what i'm doing
78:30 - absolutely so right
78:33 - right here
78:34 - is that the one
78:40 - yeah absolutely
78:42 - all right so the indexing so what i'm
78:45 - doing
78:46 - is i'm finding the location
78:50 - so move zero
78:52 - let's look at some move
78:54 - let's go over this again real slow
78:57 - oops
78:58 - so i
78:59 - i just quit so up here
79:02 - move c
79:04 - so we have a underscore f
79:07 - let's bring this over
79:10 - great question
79:13 - so what i'm doing
79:15 - is right now so
79:17 - move so i kind of have this in reverse
79:20 - because again we have to handle these
79:22 - issues that the user
79:28 - yes i have it over on my
79:31 - github i have
79:33 - this continued all of the code
79:36 - all right two things i'll jump back
79:45 - i'm just using shell and the the
79:48 - the idol from uh from from python so all
79:52 - of this so i i add to this every time
79:55 - and then i've actually gotten to where i
79:57 - saved the shell
79:59 - in its own file with today's date so all
80:02 - right that was uh
80:04 - that was a little admin there so all
80:06 - right so let's go over this
80:08 - a little bit
80:10 - so i take move and it's
80:13 - c
80:16 - equals c4
80:18 - all right
80:20 - so then i
80:22 - take move
80:23 - let's go over this real slow great
80:25 - question
80:26 - list
80:27 - move
80:30 - so now move is a list of two items
80:35 - two strings
80:37 - and i'm doing them in reverse here
80:40 - because
80:43 - this
80:44 - is
80:45 - this way python goes rows then columns
80:50 - so that's why i'm going in reverse
80:52 - so row
80:54 - then column and you're more specifically
80:56 - asking
80:58 - um
80:58 - about the indexing so
81:01 - i'm finding the index i'm having to
81:03 - adjust this by one to find the proper
81:08 - because in python that's zero index so
81:10 - if the user's
81:13 - this is actually 0 1 2 3.
81:16 - that's why i subtract 1. now the index
81:19 - effect
81:20 - i'm not having to do any adjustment i'm
81:23 - using the tools that i have
81:25 - i'm using my second index
81:28 - and allowing python to find that for me
81:30 - and fill it in
81:32 - so i'm taking my underscore
81:37 - dot index
81:40 - and i'm passing it c
81:43 - let's be consistent
81:44 - passing at c
81:46 - and that's where i'm getting my two so i
81:49 - know that this is
81:51 - zero one
81:54 - two so that's filling in so it's row
81:57 - then column
81:59 - so that's what i'm doing there with the
82:01 - index
82:05 - all right did that answer that but that
82:07 - was a fantastic question that's again
82:10 - very much why i like these streams and
82:12 - especially with the chats
82:14 - but fantastic everybody
82:16 - so all right a great stream today we
82:19 - will
82:20 - be continuing on and if you guys ever
82:23 - want to review anything that we've gone
82:25 - over of course
82:27 - uh there are all the previous streams
82:29 - and then over on my channel which is in
82:31 - the link down below
82:33 - each
82:34 - video each one of these topics has its
82:36 - own micro video very small
82:39 - the average video um
82:42 - uh is and again it's the github link is
82:46 - on every single one of my
82:48 - uh videos over on my channel you can
82:50 - just jump over there and get right to it
82:54 - but we are right
82:55 - here with this
82:59 - all these are micro videos three to four
83:01 - minute videos you can just go buy
83:04 - search any of them i think today's video
83:07 - will be 780 so there are there are tons
83:10 - of things for you to be able to go and
83:12 - get caught up on but i just want to
83:14 - always take a minute to say thank you to
83:16 - everybody who spends their time here
83:17 - today to bow and quincy i really
83:19 - appreciate the opportunity and to jan
83:22 - and cardinal i appreciate you guys being
83:24 - admins and uh taking the time to help
83:27 - and keep us on task so as always guys
83:29 - appreciate you watching
83:31 - don't forget to hit that subscribe
83:32 - button and the notification bell and the
83:35 - like button give this video a thumbs up
83:37 - and uh we'll see you guys next week
83:40 - bye guys