00:00 - improve your django skills by building a
00:02 - digital resume website
00:04 - bobby stearman teaches this course he
00:07 - provides a free resume website template
00:10 - and will teach you how to program the
00:11 - back end using django hey everyone it's
00:13 - bobby from dudecoding here and i've put
00:15 - this course together today because if
00:16 - you're anything like me you've applied
00:18 - for numerous developer roles over the
00:20 - years and you've been successful some of
00:22 - the time but you've missed out on most
00:24 - now this is because there are so many
00:26 - talented developers out there so you
00:29 - must stand out in a crowd it's
00:31 - absolutely paramount that you do so i'll
00:33 - show you today how to digitize your
00:36 - resume using django now the reason we're
00:38 - using django is twofold firstly with
00:41 - django you have a built-in admin page
00:43 - which allows you to create read update
00:45 - delete objects
00:47 - so this will avoid the need to
00:50 - update the source code in your project
00:53 - so we can add objects in the admin page
00:55 - and it gets rendered straight into the
00:57 - html which is fantastic and secondly it
01:00 - gives us a chance to
01:02 - polish up on our django skills so we
01:05 - will be
01:06 - firstly
01:08 - finding a template we've got a template
01:10 - that you can download for free we'll be
01:12 - then
01:13 - creating a django project we'll be
01:15 - building out the back end the front end
01:16 - and then we'll be stringing it all
01:18 - together so this will take just over an
01:21 - hour so let's jump straight into it
01:27 - [Music]
01:33 - this is the template that we're going to
01:35 - be using so this has been designed by
01:37 - james granger design a colleague of mine
01:40 - um
01:42 - it's fantastic he's put this together
01:44 - we're not charging anybody you can
01:45 - access this template in our github
01:48 - repository which is github.com bobby
01:51 - dash decoding slash decoding underscore
01:54 - resume underscore template so decoding
01:56 - resume template like i say completely
01:59 - free all you need to do is clone a
02:01 - repository and you will have access to
02:02 - it i will show you today how to then
02:06 - string that template into a django
02:08 - project okay
02:09 - this is what the template looks like at
02:11 - the very top here you have an avatar you
02:13 - have a bio or it will be a bio
02:16 - we then got a link to download a resume
02:18 - so we'll need a pdf version of your
02:20 - resume and we'll attach that to a user
02:22 - profile we have key skills coding skills
02:25 - with a slide bar we have some
02:27 - certificates that we can scroll through
02:29 - we have portfolio section
02:32 - we have a testimonial section and we
02:34 - also have recent posts
02:37 - that's the index page we have a
02:38 - portfolio list view
02:41 - okay
02:42 - we have a blog list view which is almost
02:44 - the same and a contact page the
02:46 - portfolio and blog pages will also have
02:48 - detailed pages as well and they will be
02:50 - rendered to the front end with a rich
02:53 - text editor which we will also add to
02:56 - django admin so what we add in a rich
02:58 - text editor will be rendered directly as
03:01 - it's
03:02 - seen in admin to the front end which is
03:05 - fantastic like i say we will be creating
03:07 - objects in django admin without the need
03:10 - to change the source code for the
03:12 - project
03:13 - okay in this contact us form allows
03:16 - potential employers to contact you add
03:19 - the name email and a message and submit
03:21 - great so that is the template that is
03:24 - what we will be building today in django
03:27 - so
03:28 - first thing that we need to do is
03:30 - use a text editor
03:33 - i'll be using visual code studio today
03:36 - and this is opened up in development so
03:38 - the first thing i've got a terminal open
03:40 - here as well first thing that we need to
03:42 - do
03:43 - is create a virtual environment now i'm
03:46 - using a virtual environment wrapper so i
03:49 - can
03:51 - just use the command make virtual env
03:54 - and we will call this
03:57 - resume
03:58 - demo okay and that will go ahead and it
04:01 - will create a virtual environment on my
04:03 - machine and it will fire it up the
04:05 - reason i know it's fired up is because
04:07 - we've got this in brackets here so
04:09 - resume demo
04:10 - so now that's there we now need to
04:13 - we have now have access to pip
04:15 - so we can pip install
04:18 - django
04:19 - we will also pip install
04:22 - pillow
04:23 - and we'll also pip install um
04:26 - django ck
04:29 - editor
04:32 - okay they're the three that we will need
04:35 - straight off the bat okay once that's
04:37 - finished installing all of that we will
04:39 - then start a django project
04:43 - and we will call it again same as the
04:46 - virtual environment we'll call this
04:47 - resume demo okay
04:50 - don't worry if you have this come up
04:52 - it's just telling you that you need to
04:53 - update pip just simply
04:56 - paste that in there
05:00 - bob's your uncle that's installed the
05:02 - latest version of pip so we're all good
05:03 - to go right so now we need to cd no we
05:07 - don't we need to start a project so
05:09 - because we've installed django we can
05:11 - now access django admin
05:15 - and
05:17 - we say start project and we'll call this
05:20 - resume
05:22 - demo okay that will start project we can
05:25 - now cd into
05:28 - resume
05:30 - demo
05:35 - there we have it and let's open that up
05:38 - in my
05:40 - browser here
05:42 - right
05:44 - there we have it it's there do you know
05:46 - what let's open up a new
05:49 - open a
05:50 - folder development
05:53 - we'll just open that up here so we
05:54 - haven't got
05:56 - all of the other stuff
05:59 - let's open up terminal
06:02 - and we will go work on
06:05 - again that's another command from a
06:07 - virtual emv rapper
06:10 - so we've got these pop-ups so we'll call
06:13 - we'll run
06:15 - resume demo well we've got the
06:18 - virtual envy up and running again and
06:20 - this is the project directory so when
06:22 - you um
06:24 - start a new project you get the
06:25 - manage.py file and then you'll also have
06:28 - the resume
06:29 - resume demo directory with the dunder
06:32 - init file we've got the ascii settings
06:34 - urls and
06:36 - um whiskey
06:38 - okay so what we'll do now we can access
06:41 - the manage.py what we can do we can
06:44 - python
06:45 - manage dot
06:46 - py
06:48 - will start an app and we'll call this
06:51 - main
06:53 - okay
06:54 - and
06:55 - now we will go about so what i'm
06:58 - what i'm going to do is i'm going to be
07:00 - referencing my other screen because i've
07:02 - built this project in a um
07:05 - previously just to make sure it all
07:06 - works and it speeds things up rather
07:10 - than having to watch me do typos and and
07:13 - i have to debug all of my code so i'm
07:15 - going to move this through
07:16 - from a from another screen copy and
07:18 - pasting it across so it's nice and
07:20 - smooth and we aren't going to be too
07:22 - clunky
07:24 - so the first thing we're going to do is
07:27 - we're going to open up settings.py
07:31 - okay and this is what it looks like when
07:33 - you first
07:35 - install the django project so right at
07:37 - the top here
07:39 - import os
07:40 - so that allows us to access the
07:42 - operating system this project will
07:44 - require the use of static files so and
07:48 - the reason we have os is because we'll
07:49 - be using that in a second to
07:52 - join the base directory to the new
07:54 - static file directories
07:56 - we have this is the base dir which will
07:58 - be referencing that's the secret key
08:01 - now in a production environment you
08:02 - would secure that maybe in an emv of
08:05 - some sort but we won't in this tutorial
08:07 - debug is true allowed host is all good
08:10 - what we need to do is we need to add
08:13 - main
08:15 - into our installed apps we also
08:18 - need to add ck
08:20 - editor
08:24 - there we go
08:28 - that will allow us to use a rich text
08:30 - editor in the admin page
08:32 - middleware we don't need any middleware
08:36 - that i know of just double check
08:40 - no we don't but we will
08:42 - be adding a context processor
08:46 - so the context processor will go in here
08:53 - processors dot py
08:56 - and the context process py
08:59 - will be looking like this so we'll be um
09:02 - importing the user model here so that's
09:04 - the built-in user model and we'll be
09:06 - just adding um a keyword argument called
09:09 - me
09:10 - to the context process and it'll all
09:12 - come um you'll understand what's
09:14 - happening soon enough uh we're going to
09:16 - settings.py we can now add that context
09:20 - processor to
09:22 - the
09:24 - context processor here
09:28 - so we'll have
09:31 - resume
09:32 - demo
09:34 - there's context processors dot
09:37 - project context and we don't need that
09:39 - last one there
09:41 - okay so now this
09:43 - um context here so this keyword me will
09:46 - be accessible in the templates that
09:48 - we're building out later on in this demo
09:51 - so whiskey application we don't need to
09:53 - do anything there we're just going to
09:54 - use the built-in sqlite 3 database now
09:57 - you could upgrade that to post sql or
09:59 - mysql but we won't in this
10:02 - so when we make the migrations there'll
10:03 - be a db sq light
10:06 - uh file that appears but don't worry too
10:08 - much about that
10:09 - we'll change the
10:11 - en to gb
10:14 - and what we'll then do is we will add
10:17 - the static
10:20 - files
10:21 - does and the static route the media
10:24 - route and what have you
10:25 - okay so i won't go through what we're
10:27 - trying to do here but essentially
10:30 - we need to access static files so static
10:32 - files are like css files javascript
10:34 - files and and and images that just don't
10:37 - change right so they sit in a static
10:38 - directory we will be accessing them
10:40 - things like logos things like cascading
10:43 - style sheets so these settings here
10:45 - allow us to or it tells the system where
10:48 - those directories are going to be and
10:49 - how they're going to be managed okay
10:52 - so that is it we don't need to do
10:53 - anything else to settings but we do need
10:56 - another file file in here called urls.py
11:01 - oh it's already in there sorry
11:03 - um
11:04 - yeah we don't need that so i'm getting
11:06 - carried away so in the urls
11:08 - py file
11:10 - i will then
11:13 - copy all of this across so we need to
11:16 - add
11:17 - include to path
11:20 - we need to bring in settings from
11:22 - django.conf and we need static from
11:24 - conf.urls.static
11:27 - and we will be adding the path
11:30 - mains.url so we haven't even created
11:32 - that file yet but we'll do that in a
11:34 - second
11:35 - but we're adding this to the url pattern
11:38 - so all of the urls in the main.urls file
11:41 - that we'll create in a second
11:43 - will then become part of our url
11:46 - patterns okay we could call it main
11:48 - namespace equals main so that is what
11:51 - we'll call it in the app in a few
11:52 - seconds
11:53 - and then we've got this here
11:56 - so
11:57 - if settings.debug we then add
12:00 - the static url
12:03 - and the static route to the url patterns
12:06 - and we also do it the same for media url
12:08 - and media root so in development
12:10 - environment we will simply have a static
12:12 - directory in here and we'll have a media
12:16 - it'll be called media file so as we save
12:18 - an avatar or an image it will add a
12:21 - directory and i'll add the image or the
12:23 - file to the directory within the media
12:27 - files directory okay so that is the urls
12:29 - there
12:30 - main what we need to do is straight away
12:33 - we need
12:34 - urls.py right so we will
12:39 - have that file
12:42 - and we will create that we'll be
12:43 - referencing views that we haven't
12:45 - created yet but we'll add it in there
12:47 - anyway
12:48 - okay and the reason we're doing that is
12:49 - because
12:50 - trying to do this in in in a good order
12:53 - normally you would add this after you
12:54 - create the views and you wouldn't create
12:55 - the views until you added the models but
12:57 - we're referencing this file in this
12:59 - urls.py file so um we're bringing in
13:02 - path and views okay which we haven't
13:05 - created yet the app name is main
13:07 - okay
13:08 - in fact what we could do because we
13:10 - might need to make some migrations
13:12 - before we do this so i will
13:15 - uh comment those out
13:17 - okay because we haven't we haven't
13:19 - created those yet anyway so we'll start
13:21 - in order so where you start with you
13:23 - start with models okay
13:25 - so models
13:27 - models are um translate to
13:30 - um
13:31 - database tables okay
13:33 - so um
13:34 - we will create a model uh the name
13:37 - becomes the table name and fields become
13:40 - the rows sorry the columns and then for
13:42 - each object that we save becomes each
13:44 - row in that table so that's basically
13:47 - what a um django model represents copy
13:52 - and we'll paste okay
13:56 - so
13:57 - bringing in models and we're bringing in
13:58 - a built-in user model that is in contrib
14:01 - or models we need that because we're
14:03 - going to extend that for the
14:06 - user profile
14:07 - okay
14:08 - we'll be extending it using something
14:10 - called signals but we'll go through that
14:11 - in a second we then bring in sluggify
14:14 - because we need a slug for our blog and
14:16 - our portfolio we're then bringing in ck
14:18 - editor so this is django ck editor it's
14:20 - a rich text field so this we can add
14:23 - this rich text field to the blog and
14:25 - portfolio so let's create a skill
14:29 - model
14:30 - we have a meta class
14:32 - and i always add these
14:34 - not necessarily needed by default it
14:36 - will it'll pluralize the name
14:40 - but i add it in there anyway it's not
14:41 - the end of the world okay so name equals
14:44 - this is a chart field
14:46 - so these will be the skills so we go
14:49 - back in here
14:50 - these will be these skills here okay
14:52 - this is what we're trying to replicate
14:54 - so we want coding skills and we want key
14:56 - skills okay
15:00 - so we've got name of the of the skill
15:03 - the score so if this was a key skill or
15:05 - sorry a coding skill we'd want to score
15:07 - it because we want the sliding bars
15:10 - on here to
15:12 - um represent 95 or 80 percent of the
15:14 - skill or the not your expertise in a
15:17 - certain skill we then have an image the
15:18 - reason we've got an image or file filled
15:20 - because this is an svg so these images
15:23 - here are svgs so for each key skill
15:26 - we want an image okay so we'll do that
15:29 - and then is key skill which is a boolean
15:31 - so it's true or false so if this is true
15:34 - then this
15:35 - object would represent a key skill if
15:37 - it's false it would represent a coding
15:39 - skill so we then have a
15:41 - string function and it just returns
15:44 - self.name okay so that's our skill model
15:47 - we then have a user profile so this is
15:49 - what extends the built-in user model
15:51 - that's why we've got a one-to-one field
15:52 - here on delete cascade will only be be
15:56 - producing or creating one user profile
15:59 - so that would be us as a super user we
16:01 - have an avatar which is an image field
16:03 - this is why we brought in pillow
16:07 - upload two and this will create a
16:08 - directory in media files called avatar
16:11 - and when we save a file in there that is
16:13 - where that avatar will go we've got a
16:15 - title a bio so the idea of a bio is this
16:18 - bit here so that'll appear there when we
16:20 - add it to the templates
16:22 - we then have skills which is many to
16:24 - many
16:25 - okay so it would be many to many of
16:27 - these skills here
16:29 - uh and then we have a cv which is a five
16:30 - fill this will be uploaded to a cv cv
16:33 - directory so each time you update your
16:36 - cv on your paper copy you'll update this
16:39 - or upload it to this field here and it
16:41 - will save the new copy in the uh
16:43 - directory
16:45 - and then the string function or method
16:47 - here just
16:49 - returns first name and last name of
16:51 - their user model
16:53 - we've then got a contact profile
16:55 - which is a time stamp which that gets
16:58 - added automatically okay so it's a date
17:00 - time field then a name email message so
17:03 - if we look back on here going to contact
17:05 - name email message that's what we're
17:07 - trying to capture here
17:10 - testimonial
17:11 - we have a thumbnail this is for the
17:14 - testimonial on home
17:16 - so what we're trying to do is just
17:17 - replicate all of these elements right so
17:19 - this is we need a thumbnail we need a
17:22 - in here we're going to have uh the name
17:24 - of the person who's actually given a
17:26 - testimonial and the role and then we
17:28 - have the quote itself
17:30 - so in here we've got name roll quote and
17:32 - is active we're adding this is active
17:35 - boolean field to all of these models or
17:37 - the testimonial the portfolio in the
17:39 - blog because
17:41 - although we want to add a testimonial we
17:43 - want to be able to quickly switch it on
17:44 - and off so if it's inactive we don't
17:46 - want it to be shown up on the website so
17:48 - that's why we've got an active field
17:50 - there
17:51 - media so the reason we're doing this is
17:53 - because if we can add an image to a
17:56 - media
17:58 - model that image gets saved into
18:01 - the media file
18:04 - the media directory within the media
18:05 - files directory and we then have access
18:08 - to that url when we're creating the rich
18:11 - text editor image
18:13 - it'll all make sense a little bit later
18:14 - but um that's just an easy way of
18:17 - accessing stacked files in a template um
18:20 - when we're messing around in admin which
18:21 - i'll show you what that means soon
18:23 - so is image the reason with this because
18:25 - we're doing this is because you could
18:27 - technically add a url here
18:30 - for a video and then if this was a false
18:32 - it would be a video url it's safe saving
18:35 - huge
18:36 - mp4s in your database
18:38 - save function so
18:40 - um
18:42 - so if the url is blank then sorry if
18:46 - sorry self url is
18:48 - not blank then is image becomes false
18:50 - okay so programmatically adjust this is
18:53 - image depending on the url field
18:56 - and then we've got a portfolio
18:58 - so a date so this is the date in which
19:01 - the the
19:02 - job was done
19:03 - name description body so this is
19:05 - important this is the rich text field
19:08 - this is what uh this is the rich text
19:11 - editor that will be updating in the
19:13 - admin page what you see is what you get
19:15 - rendered in html or in the browser so
19:19 - that is really important that you have
19:20 - that there so rich text field there is
19:22 - being referenced right at the top of the
19:23 - page here so it's part of ck editor dot
19:25 - fields
19:28 - then got an image which would be the
19:29 - thumbnail if you like gets uploaded to
19:31 - portfolio
19:33 - but then got a slug which is a slug
19:35 - field and is active see the slug field
19:37 - is populated here with the save method
19:41 - so
19:42 - if not self id so basically if it's a
19:44 - new new object we sluggify the self.name
19:48 - which what it does it um
19:51 - all of the uh the the characters become
19:54 - lower case and all spaces are then
19:56 - underscored so it becomes a slug
19:59 - we've then got the get absolute url
20:02 - here so it's portfolio slash slugs
20:06 - we do exactly the same for blog okay so
20:08 - blog is basically the same as portfolio
20:10 - then lastly we've got certificate which
20:12 - is a date name title description is
20:14 - active nothing fancy going on in in
20:16 - certificate there so that's models what
20:18 - we'll then do we will register all of
20:21 - those into our admin
20:25 - so we can access them this is
20:28 - one of the most important parts of it we
20:29 - want to be able to access all of those
20:30 - models in our admin page okay so what
20:34 - we're doing we're importing all of them
20:35 - from.models all of the new models here
20:37 - and then we're using a decorator
20:39 - admin.register
20:41 - we're registering the user profile but
20:43 - then we're adding a class under that
20:44 - called user profile admin what this does
20:46 - this will allow us to display
20:50 - this will allow us to display um the
20:53 - fields that we want in the admin page
20:55 - okay so let's display id user we've then
20:58 - got timestamp name and then also on here
21:00 - we've got read-only fields so the slug
21:03 - we cannot change we don't really want to
21:05 - be changing that because a slug could be
21:06 - used you could send a blog link
21:10 - you could have a backlink somewhere for
21:11 - a blog page and you don't really want to
21:13 - be changing the slug because then that
21:15 - link becomes inactive so when the slug
21:16 - is produced
21:18 - that remains the same no matter what so
21:20 - we have a read only field so that's
21:22 - what's going on in admin
21:24 - we then want a way of creating the user
21:27 - profile using signals so we'll go in
21:30 - main new file
21:32 - signals dot py
21:35 - and we will add
21:37 - this code to signals
21:39 - what it's doing it's
21:41 - important post save the built-in user
21:43 - model
21:45 - importing receiver which is a decorator
21:47 - and then we're bringing in the user
21:48 - profile which we've just created now
21:50 - what this signal is it's a receiver so
21:52 - when
21:53 - a object is created when a user object
21:56 - is created it fires a signal to this
21:58 - signals
22:00 - py file there's a receiver that picks up
22:02 - that signal
22:03 - and then
22:04 - this function is called right so it's
22:06 - create profile so we bring in as
22:08 - keywords
22:10 - sorry argument sender instance created
22:13 - and then some keyword arguments so if
22:15 - created so if the user object is created
22:18 - then we want to create user profile
22:21 - and that will become
22:23 - userprofile.objects.create and then the
22:25 - user which is a one-to-one field if you
22:27 - remember equals the instance
22:30 - that is what's going to be used to
22:32 - create the user profile so when we
22:34 - create a super user uh in a few moments
22:38 - that user will be created the signal
22:40 - will be fired this will receive the
22:42 - signal bob's your anchor will have a
22:43 - user profile
22:45 - but we need to wire this signals.py file
22:48 - in to the apps.py and how we do that is
22:52 - we
22:53 - uh overwrite the ready
22:57 - method
23:00 - i am right
23:02 - here we just haven't
23:04 - bought himself
23:07 - brilliant okay and then we need to
23:09 - import
23:11 - main
23:12 - dot
23:13 - signals
23:15 - that's all we need to do so when this
23:17 - will fire up the app itself the main app
23:19 - and it will just say right when ready
23:21 - then we need to bring in the signals and
23:23 - now these signals will all work so
23:25 - when the when the app is running signals
23:27 - is all
23:29 - working okay
23:31 - what we then need to do is create some
23:33 - model forms so our a model form for our
23:36 - contact form
23:39 - forms dot py
23:42 - oh have i added the i have that's fine
23:45 - and what we'll do
23:47 - go in forms
23:49 - oh
23:51 - let's delete
23:52 - delete that
23:54 - when i go in here
23:55 - and we want a new file not a new
23:57 - directory so
23:59 - forms dot py
24:03 - paste everything in oh sorry i do
24:05 - apologize copy
24:08 - and paste
24:11 - importing forms and we're also importing
24:13 - contact profile which is the model that
24:15 - we made in the models.py file so this
24:17 - will be a model form okay
24:19 - so we'll be
24:22 - we don't actually need these i never
24:24 - took these out when i was playing
24:26 - earlier
24:27 - actually it's worthwhile showing you
24:30 - so let's save that so
24:33 - this is a model form and this represents
24:35 - a form against the model that we just
24:37 - created contact form so what you need to
24:39 - do is we you need to create these
24:41 - variables one for each field that we
24:43 - want in the form itself okay so we've
24:45 - got name and then we want to this here
24:48 - is the representation of
24:50 - uh this is what will be rendered
24:53 - in the html on the front end okay
24:56 - so forms this is a character field max
24:58 - length equals 100 so the reason that's
25:00 - 100 is because in the models file
25:04 - where is it let's go into contacts
25:08 - there we go
25:09 - name max length 100 okay
25:12 - so that's why we're doing that
25:14 - we then have required so this is a field
25:17 - that is true so this will render an
25:19 - input element and it will be required
25:22 - true okay
25:24 - widget equals forms dot text input so
25:27 - this is a text so the input will be
25:30 - type equals text
25:32 - then we have some attributes so we have
25:34 - a placeholder and in this case it will
25:35 - be star which will be rendered in the
25:38 - actual input itself would be start full
25:40 - name dot dot and then you can add class
25:43 - now we don't actually need class if you
25:45 - were to buy a template the forms that
25:48 - you have in the template may have
25:50 - certain classes this is where you would
25:52 - add those classes to make sure that the
25:54 - form that gets rendered on the front end
25:56 - is exactly the same as what is in your
25:57 - template okay so that's what we've got
25:59 - there we don't actually need them
26:02 - because we're not using form control in
26:05 - our template so i'll remove them
26:07 - so we've got email email field max
26:09 - length is 254 which is completely
26:11 - standard for an email field and then
26:12 - we've got a placeholder but then got a
26:14 - message now this is slightly different
26:15 - it's not a text input it's a text area
26:18 - now we want rows six now this all
26:20 - depends on your template in my template
26:23 - we have six rows okay so that's why
26:25 - we've got row six
26:27 - but you might have ten or whatever
26:29 - placeholder is message then we have a
26:30 - class meta model which this represents
26:34 - is contact profile and the fields that
26:36 - we want to render is name email message
26:39 - that is our forms.py file
26:42 - then what we need to do is add our views
26:46 - so
26:47 - let me copy all of that
26:51 - i'll go in here
26:52 - in our views dot py file
26:54 - and i'll dump them all in there
26:57 - okay so right at the top here
27:00 - i've added import messages the reason we
27:02 - want import messages is when a form
27:05 - when a form is valid and when a form is
27:07 - saved we will then want to render a
27:09 - message so that the message pops up and
27:12 - says thank you very much for submitting
27:13 - the form or what have you so i'm
27:14 - bringing in messages to do that
27:17 - from dot models import and then we want
27:19 - to import all of these different models
27:23 - from django.views import generic we're
27:25 - going to be using the generic views
27:27 - template view list view form view so on
27:29 - and so forth they're great these
27:31 - built-in form views they're all
27:33 - class-based views but they're they're
27:35 - built specifically for
27:37 - um tasks that happen regularly so for
27:40 - instance a list view you're rendering a
27:42 - list of objects so it just does all the
27:45 - hard graft in the background so you've
27:46 - got you can render
27:49 - you you can render a a web page they say
27:52 - a form view with only two or three lines
27:54 - of code
27:55 - which is great you can also do function
27:56 - based views but i like to use these
27:58 - built-in built-in views they're
28:00 - fantastic so we've got index view this
28:02 - will be our home page okay so we're
28:04 - using generic.templateview so we need we
28:08 - in a template view you need to add the
28:10 - template name so what name what template
28:12 - are we using to render this view in this
28:15 - case it's going to be main index so what
28:17 - we'll do is we need a directory in main
28:21 - called
28:22 - templates
28:24 - and within that directory we need
28:25 - another one called
28:27 - main
28:28 - okay
28:29 - within there
28:31 - that is where we will add our templates
28:33 - we'll do that shortly we don't need to
28:35 - do that just yet
28:37 - we then call the method get context data
28:39 - um and we call a super call there and
28:42 - then context we can then add keywords to
28:45 - context here so testimonials so we want
28:48 - testimonials certificates blogs and
28:50 - portfolio these are objects sorry these
28:54 - are
28:56 - these will be added to context and we
28:58 - can reference them in templates uh so
29:01 - that we can actually render a list and
29:04 - do a for loop using uh template filters
29:06 - and things like that
29:09 - so we're calling testimonial objects and
29:11 - we're filtering everything where is
29:13 - active equals true this is where that
29:15 - field in models comes in really handy so
29:19 - in testimonial okay isaac
29:22 - is active defaults to true but if in
29:25 - admin we click it to be untrue or false
29:29 - then it will not appear
29:31 - in
29:32 - the context because we're filtering out
29:35 - everything that's
29:36 - sorry filtering out everything that's
29:38 - untrue so is active equals true so only
29:41 - true
29:42 - objects
29:43 - live objects active objects we then have
29:46 - certificates same again blog same again
29:48 - portfolio same again and then we're
29:50 - adding those keywords to context and
29:52 - then we return context so now in index
29:54 - we can reference
29:56 - testimonials and that will be a list of
29:59 - objects that we can
30:00 - render
30:02 - contact view this is a form view so you
30:04 - name the template
30:06 - you name the form class and then a
30:08 - success url this is where the user will
30:10 - be redirected when the form is valid so
30:14 - we then call the
30:15 - form valid method
30:18 - password self and form so this is the
30:19 - form which we're passing through which
30:21 - is a contact form
30:23 - form.save so we save the form instance
30:25 - and then we send this message here which
30:27 - is message.success and the text is thank
30:29 - you we will be in touch soon and that is
30:32 - what will be shown on the front end
30:35 - we then have a portfolio view which is a
30:36 - list view the model is portfolio you do
30:39 - have to have a page name by so this will
30:42 - only show 10 or the first 10 objects
30:44 - and then the template name the query set
30:48 - what we're doing there is we're
30:49 - filtering the query set is active true
30:51 - okay so only true portfolios
30:54 - detail view
30:56 - same again
30:58 - except for and this will be the slug so
31:00 - we'll add this in the url so it will
31:02 - show the detail so it'll show the object
31:06 - that has the slug in the url itself
31:10 - blog view identical to the portfolio
31:12 - view and the blog detail view is
31:14 - identical to the portfolio detail view
31:17 - the only difference is we're looking at
31:18 - different html files okay so they are
31:20 - the views we will save that
31:24 - just looking at my
31:27 - what we have not done is we have not
31:30 - created a requirements
31:33 - file so we will go pip freeze
31:37 - requirements
31:40 - dot txt
31:43 - and that's just created this so these
31:45 - are all the requirements for the project
31:46 - we've got django like you can see django
31:48 - ck editor we've got pillow because we're
31:51 - messing around with uh images
31:53 - and that's all the um requirements happy
31:57 - days so what we now need to do is we
32:01 - need to
32:02 - make migrations
32:04 - so
32:05 - python
32:06 - manage dot py
32:08 - make migrations
32:12 - we then need to python manage.py
32:15 - migrate
32:18 - and then we need to go python
32:20 - manage.py
32:24 - create
32:25 - super user
32:30 - that will then allow us to create and
32:32 - move this up a little bit that will then
32:34 - allow us to create a super user see that
32:36 - will default to bobby bob put that in
32:37 - there anyway
32:38 - bobby at didcoding.com
32:43 - password
32:45 - it'll ask you twice it won't
32:47 - look like you're typing but it will pick
32:48 - up the keystrokes there you go so super
32:51 - user created successfully so what we now
32:53 - do is we'll go python manage.py
32:58 - run
32:58 - server
33:02 - i'll tell you what we haven't done we
33:03 - haven't uncommented out
33:06 - the urls so
33:08 - we've wired in the um the views
33:12 - but we haven't uncommented these out so
33:13 - i'll do that quickly so back on the urls
33:16 - here
33:16 - um
33:18 - remember we wired this main app into our
33:20 - url comp file so everything that appears
33:23 - here are urls specific to main so path
33:26 - is blank this will be our home page so
33:28 - this will be
33:29 - um
33:30 - you know localhost port 8000 this will
33:33 - be your index as view because we're
33:35 - using class based views you must use
33:36 - this dot as view if it was a function
33:38 - based view you wouldn't need that
33:40 - name is home so that's how we reference
33:42 - it in the template so it would be main
33:45 - um
33:46 - home that's how we would reference it
33:48 - i'll show you when we work through that
33:49 - shortly contact view same again we've
33:52 - got um portfolio view it's portfolios
33:55 - just pluralized um then we've got this
33:58 - is important so this is the detail view
34:00 - so this is portfolio slash slug okay so
34:03 - the url will have the slug of that
34:05 - object in it and that's how we're
34:06 - capturing it in the detail view same
34:08 - again for blog and blog slug okay so
34:10 - they are the urls so if we now
34:13 - go back in our terminal
34:16 - and we've got that up i should just be
34:17 - able to double click that
34:20 - there we have it
34:25 - that is not
34:28 - one second
34:30 - just because i've got the server running
34:32 - on something else okay
34:35 - there we have it right okay you just had
34:37 - a sneak peek so i had a server running
34:39 - on the previous project or the project
34:41 - that i'm copying from so what you saw
34:42 - there is what i built earlier okay so
34:44 - nothing's working so we haven't got a
34:46 - template there right we'd expect that so
34:47 - if we go to admin which is the built-in
34:49 - admin page
34:50 - and then sign in with the user
34:52 - credentials we've just added
34:56 - there we have it okay so we've got the
34:58 - authentication
35:00 - models this is the one that we've just
35:01 - created okay
35:03 - so we'll give me a
35:05 - first name
35:07 - we could have done that in the terminal
35:09 - but there we go so we now got an email
35:11 - first name last name
35:13 - that signal
35:14 - should have produced a user profile
35:16 - which it has great so this is the user
35:18 - profile now okay
35:20 - so let's uh choose uh avatar
35:25 - so what we'll do is let's go into
35:28 - desktop development i'll go into
35:32 - this is the one i was playing with
35:33 - earlier
35:34 - media files avatar let's use that
35:38 - title
35:40 - is um
35:42 - back end
35:44 - developer
35:46 - bio
35:47 - this is just a demo bio
35:52 - and
35:53 - what we'll then do
35:55 - is we will add a skill so this can be
36:00 - django
36:03 - and i'll put that on why not let's go
36:05 - 100
36:06 - it's not a key skill this is my coding
36:08 - skills
36:09 - save
36:11 - will have
36:13 - html
36:15 - and we'll have this as 95
36:19 - save
36:20 - we'll have
36:22 - css
36:24 - we'll have this as 90
36:29 - save
36:32 - and then what we'll do we'll add another
36:33 - one which will be
36:35 - javascript uh let's just
36:39 - just change things up let's put 75
36:42 - save let's have a key skill this time so
36:44 - we'll have
36:46 - people
36:47 - person
36:49 - we'll have uh it doesn't really matter
36:51 - on a number there
36:53 - key skill but what we'll do we will add
36:56 - media files
36:57 - skills
37:00 - open save
37:04 - team
37:06 - player i mean you can put whatever you
37:08 - want in yours
37:10 - this is just me building it out is a key
37:12 - skill save
37:14 - and we'll have um
37:18 - um self starter
37:22 - we'll have that as key scale icon these
37:25 - all come in their template by the way
37:26 - all of these images
37:28 - and cv so if i go into there
37:32 - these are all ones i've added earlier so
37:33 - there we go
37:35 - save so what i'm doing is i'm building
37:38 - out the the admin page so this is the
37:41 - benefit of using django right so this
37:43 - built-in
37:45 - admin page allows us to create so at any
37:47 - point we could change the avatar at any
37:50 - point we can change the bio so
37:52 - um
37:54 - i am
37:55 - adding to the
37:57 - bio
38:00 - yeah so and if you save it that will
38:02 - then become the new bio so you don't
38:04 - have to when you get this in a
38:06 - production environment you don't have to
38:07 - go into source code all you need to do
38:09 - is change the back end that's the
38:10 - benefit of doing this okay so
38:13 - we've added
38:15 - let's add a testimonial
38:17 - so choose a thumbnail
38:19 - media files
38:22 - uh
38:24 - use that one
38:26 - name
38:27 - bobby
38:28 - roll manager
38:30 - this is a test
38:36 - quote
38:37 - that'll do
38:38 - save and add another or you know i'll
38:40 - just quickly flash through this
38:43 - name
38:44 - bobby two
38:47 - manager
38:51 - two
38:54 - quote two
38:59 - and i won't do this to all of them
39:00 - because it'll be a waste of your time
39:03 - bobby three
39:04 - manager three and quote three
39:08 - they're now the three objects so what we
39:11 - can do we can make that inactive that
39:14 - won't appear you see is active okay so
39:16 - that wouldn't
39:17 - be rendered on the front end but let's
39:19 - keep that in there see the benefit there
39:21 - so we've done user profile testimonials
39:22 - skills they're all in there that's when
39:24 - when we were adding them here
39:27 - all you had to do click add and it adds
39:29 - it to the skill because it's a
39:30 - many-to-many field okay
39:32 - again you can change these at any point
39:34 - change that to you know or not in a key
39:39 - change css to 2 92 for instance save and
39:43 - that becomes 92 okay
39:45 - media files let's add one of these
39:48 - images
39:52 - we'll add that
39:53 - that's just a thumbnail from another
39:54 - video that i've produced
39:57 - random
39:58 - image
40:00 - save
40:02 - contact profiles we don't need that
40:04 - certificates we'll just add one
40:05 - certificate shall we so now now
40:09 - name um would be
40:13 - um let's go
40:15 - advanced
40:17 - django
40:18 - course
40:20 - um
40:22 - free code camp
40:25 - description
40:26 - this is
40:28 - a
40:29 - test
40:31 - description
40:37 - that will do we won't add three
40:39 - certificates you'll get the gist and
40:41 - then what we need to do is add a blog
40:44 - profile so this is where the rich text
40:46 - editor comes into it okay
40:48 - so author we can have bobby stearman
40:51 - name we can have this as test blog
40:54 - description
40:55 - test description
40:59 - and then what you can do is you can have
41:03 - um
41:05 - you can just have header two
41:08 - this is a header
41:10 - and whatever we put in here is what will
41:12 - be rendered what you see is what you get
41:13 - right so
41:14 - this is
41:16 - a
41:18 - uh random
41:22 - description and then this is what i
41:25 - wanted to show you the the media file
41:27 - so
41:29 - let's go open up another browser okay
41:32 - go back in the media files this here
41:34 - will give us access to this url okay did
41:38 - you get that that is the url of the
41:39 - image we've just saved into our database
41:42 - sorry into our static files okay if we
41:44 - go into blog
41:47 - and add an image to here
41:57 - just toy around with this um it
41:59 - sometimes won't render right on the
42:00 - front end but if you toy around with the
42:01 - rich text editor you can get it to work
42:03 - so if we add an image
42:06 - the url just paste the url that we just
42:08 - added in there
42:09 - alt text
42:10 - test
42:12 - image
42:16 - admin main media oh what we're done
42:19 - there that's not right i want that
42:22 - let's copy that
42:25 - there we go
42:27 - right width we'll have these are these
42:29 - are linked so if you just put 800
42:31 - you can stick a border on there if you
42:33 - want um we'll align it left
42:36 - there's a whole bunch of other bits you
42:38 - can do on there
42:40 - link advanced so click ok
42:42 - ok and then we'll choose an image this
42:44 - will be the thumbnail for the image so
42:45 - you can you can
42:46 - pick the same one if you like is active
42:49 - save
42:50 - and for google's we'll add a portfolio
42:52 - as well we'll do exactly the same again
42:53 - right so now now
42:56 - name is test description test
43:00 - description
43:01 - and then we'll have um
43:04 - header 2
43:06 - header
43:08 - this is a description
43:13 - this is the end
43:15 - and in between that we will add an image
43:19 - same again don't need to get too fancy
43:22 - width would put 800 i think
43:25 - stick a border on there we'll put four
43:26 - on this time and left
43:29 - okay choose a thumbnail
43:32 - happy
43:34 - days okay i think we've now got all of
43:36 - the bits and pieces so that took a
43:38 - little bit of jiggery pokery to get that
43:39 - all up and running in the back end but
43:41 - that's all we now need to do see i
43:43 - really i could could now um duplicate
43:45 - these blog
43:47 - these blogs so we've got um blog two
43:49 - blog three whatever but it's it's
43:51 - no biggie you can do that in your own
43:53 - time i've just constructed the back end
43:54 - in a way that i know this is going to
43:56 - work
43:57 - and just
43:58 - if you're following along get this done
44:00 - get three blogs get three portfolios and
44:02 - it will look fantastic on the front end
44:04 - so that is the back end basically done
44:06 - what we now need to do is wire in the
44:08 - front end
44:10 - so
44:11 - we have got the templates here
44:14 - the directory for the resume is here so
44:16 - what we need to do is we need our static
44:18 - files so we will take these we'll copy
44:22 - them
44:23 - and we'll dump them into this is our
44:26 - this is the project by the way
44:28 - so new folder we'll call this
44:34 - static and we will paste them so we
44:37 - paste them in there okay
44:39 - so they are all of us static files that
44:41 - we need
44:44 - go back into the resume and we then want
44:48 - all of these so
44:51 - keep your finger on control just select
44:53 - all of them you don't need the license
44:54 - to read me copy them
44:57 - i'm going to add them to
45:00 - main
45:02 - templates main or paste
45:06 - okay
45:06 - they're all of the templates we now need
45:08 - to wire them in okay if i just opened
45:11 - one of these now it's gonna look
45:12 - terrible right okay because it just
45:13 - doesn't know where the static files are
45:15 - it just doesn't know what's going on
45:17 - okay because they're now in a django
45:18 - project if i open up
45:20 - them in the
45:22 - original
45:23 - it'll work because that's just the way
45:24 - it's wired up okay
45:26 - so we don't need that let's close that
45:29 - let's close that let's close that
45:33 - let's go back in a visual uh studio
45:35 - right so these are now the um templates
45:38 - that were put together
45:40 - we'll bring our terminal we don't need
45:42 - to see the terms you know what
45:44 - i'll close that down for now we don't
45:46 - need that so this is the
45:50 - index file okay
45:52 - so um it's a standard html file okay
45:55 - you've got a head
45:56 - you've got body
45:58 - and within that body then got a
46:00 - navigation so we've we've tried to be as
46:02 - detailed as we can or helpful as we can
46:04 - on the documentation of these html files
46:07 - so this is the navigation bar this is
46:09 - the content for this particular page
46:11 - there's loads of sections
46:13 - a bit further down actually let's just
46:14 - hide them it'd be a lot easier a bit
46:16 - further down we've then got
46:19 - um the footer
46:21 - okay and then we've got the scripts
46:22 - these are the body these are the scripts
46:23 - here okay nothing's going to work
46:26 - because it's referencing files that
46:28 - django just doesn't know where to find
46:29 - them so if i was to render this this
46:31 - index page so in fact let's go ahead and
46:34 - do it so new terminal
46:37 - work on uh
46:39 - resume
46:40 - demo
46:42 - python manage dot py run server
46:48 - and what i'll do i will
46:51 - just
46:52 - open up
46:53 - that browser there right so it this is
46:55 - this is the home page right so it's
46:57 - found the index.html as per the views
47:01 - it's found the template but it just
47:03 - looks terrible it's because it doesn't
47:04 - know what a css is it doesn't know where
47:06 - the javascript is and all of the links
47:08 - are all swift so we need to
47:12 - load static files and we need to wire
47:14 - all of this in so that's what we're
47:15 - going to go and do and the way you do
47:17 - this is we need a base html
47:21 - so we will save index as
47:26 - base dot html
47:30 - and what we then need to do is create
47:33 - another
47:35 - directory in main
47:38 - we'll call this
47:39 - partials
47:42 - and within
47:44 - here we'll need a new file called
47:48 - messages
47:49 - dot html
47:51 - we need another one in here called
47:55 - nav dot html that'll be the navigation
47:58 - element
48:01 - new file and we'll call this
48:04 - butter.html okay
48:06 - so what we need to do is we need to
48:08 - dissect up this html
48:10 - so that
48:11 - um
48:13 - we can then use template tags so django
48:15 - has a range of template tags that allow
48:17 - you to easily
48:19 - include other parts of html which you
48:21 - need to do is just reference the path
48:24 - so we'll go ahead and do that so right
48:26 - at the top of the page
48:28 - i need to open up my
48:30 - other project here
48:32 - and go my base html
48:34 - what you need to do you need to do this
48:35 - on most of them actually is
48:39 - load static okay so that template tags
48:42 - allows us to access static files which
48:46 - are all the files that are now in this
48:48 - directory here okay the css images
48:51 - javascript
48:52 - okay
48:54 - we then go down we'll go down this all
48:56 - the way from the top here so we've got
48:57 - author which is decoding and james
48:59 - granger design
49:01 - we've then got canonical which we need
49:04 - to add
49:06 - the context processor if you remember in
49:09 - settings.py
49:11 - where is it
49:12 - so we added the contact processor here
49:14 - but if you see here all
49:16 - you always have access to request okay
49:21 - so that's what we need to get hold of
49:23 - here so it's
49:25 - request dot path okay so that is what
49:28 - you add in canonical in fact i'm just
49:30 - going to copy this across to save me
49:32 - messing about
49:34 - we then have a link which is home
49:37 - and then what what we're using here is a
49:41 - template tag called url so relationship
49:43 - home this is main so this is the app
49:46 - main
49:47 - and it's called home which is our index
49:49 - page
49:50 - we then in description these are all seo
49:52 - tags really uh in the head of the html
49:55 - file this is how i always manage them i
49:56 - add a block template tag
49:59 - and i call it description and this
50:01 - allows me to have a description of a
50:03 - html page
50:05 - in the actual
50:07 - i'll show you what i mean in a second
50:08 - and then i have another one for keywords
50:11 - we've got the icon this little icon that
50:13 - appears at the top of the web browser
50:15 - and this is trying to find images
50:18 - but it can't find images because images
50:21 - um
50:22 - whereas what is the path for that we
50:23 - need to reference the static file so
50:26 - what we'll do we'll
50:28 - link
50:31 - there we have it so we're using the
50:32 - static template tag we're loading static
50:34 - at the top here
50:37 - and then we're referencing the static
50:39 - here so now we're looking in the static
50:41 - directory in a directory called images
50:44 - and we're looking for icon.jpg
50:47 - now
50:48 - in static we don't we have images okay
50:52 - so we'll be looking for icon which is
50:55 - icon jpg okay so we'll be looking for
50:57 - that that's what we're looking for
51:02 - happy days and we've got static so
51:04 - static again we're looking for css
51:07 - we haven't got the path so we need to
51:08 - reference static
51:10 - and again with style css
51:12 - so what we'll do is we will add
51:18 - all of these
51:19 - okay
51:21 - and i always have a block uh template
51:23 - tag here and i always call it extend
51:24 - header this allows us to use css
51:26 - specific to a certain page within that
51:29 - template rather than having it loaded on
51:32 - every page it's very very handy doing
51:34 - that
51:35 - okay we've then got the body
51:38 - okay so what we're going to do here
51:40 - is
51:43 - i'm going to
51:45 - copy that
51:48 - and i'm going to remove
51:51 - the header element so actually this is
51:52 - what i'm going to do right okay so this
51:54 - is the header the header remains the
51:55 - same on all of these pages it's not like
51:58 - we have a if a page is active then it is
52:00 - highlighted we don't do that in this
52:01 - template so you don't need to worry so
52:03 - all of this here
52:05 - can be cut
52:06 - and can be dumped in the nav.html so
52:09 - first off we'll have
52:12 - load
52:13 - static
52:16 - and then we'll dump all of that
52:17 - navigation in here okay
52:22 - and then in the base html what we need
52:25 - to do is
52:27 - include it so we use another html tag
52:30 - that was include so we're now including
52:32 - main so that's the main app partial
52:34 - sorry the main directory partials
52:37 - nav.html so we don't need all that html
52:40 - there it says repeating ourselves we
52:42 - also need to add
52:45 - some code which isn't in the template i
52:47 - don't believe one second
52:50 - no it's here right okay so there's an if
52:53 - template tag i can add in here so this
52:55 - is just some code that i use
52:56 - occasionally
52:57 - so if messages are rendered to the
53:01 - html document so for messaging messages
53:04 - so if this is a messages
53:06 - dictionary or list so for each message
53:09 - it will
53:12 - render a script so this is javascript
53:14 - there'll be a script and it'll be an
53:15 - alert so this will pop up with a little
53:17 - alert at the top of the screen with the
53:18 - actual message in that case it'll be
53:20 - thank you for contacting us we'll get
53:22 - back to you soon so that is our messages
53:24 - html if we go back in a base
53:28 - we can then import
53:30 - or include messages into the body so it
53:33 - always appears
53:35 - in the html
53:37 - then we need to do the same for all of
53:40 - the content and all of the footer so
53:43 - we go back to the footer stage foot
53:45 - sorry the footer element we'll cut that
53:48 - we'll dump that in footer
53:50 - again load static don't forget to do
53:52 - this
53:54 - because you will run into an error and
53:57 - we'll just uh tidy it up a little bit
53:59 - bring it all back
54:01 - oh
54:03 - there we go save
54:05 - and
54:06 - the base we will then include that
54:12 - copy
54:15 - that's the footer
54:17 - and then with the
54:18 - content what we're going to do is we're
54:20 - going to have a block
54:22 - so we'll have
54:24 - block
54:25 - content
54:28 - and then we'll have
54:30 - n block
54:31 - okay so this is important right that
54:33 - little block there is what we're going
54:35 - to be using
54:36 - when we render the index html so in the
54:39 - index.html it will contain all of this
54:42 - um html the content essentially and we
54:46 - will use a different con
54:47 - template tag in index to extend base so
54:51 - index will then be a combination of this
54:53 - html and the base html okay so we will
54:57 - cut that
54:58 - we're going to index
55:00 - we'll highlight
55:03 - so we'll go into index we'll highlight
55:05 - everything and we'll paste it
55:09 - and we will bring that back to tidy it
55:11 - up a little bit
55:13 - there we have it
55:15 - okay so now at the top of this page
55:19 - we will need
55:22 - a whole bunch of stuff which i'll show
55:23 - you what we're going to do here
55:25 - copy
55:27 - and we'll paste that in
55:29 - and i'll walk you through what i'm doing
55:31 - section
55:34 - gonna have one at the bottom there just
55:35 - closing off the block
55:40 - end block save and i'll just go from the
55:42 - top right
55:45 - okay so we're extending main base okay
55:47 - so when we render the home page it's
55:49 - looking for index html
55:51 - and it's slotting in all of the
55:53 - information in this html in the blocks
55:56 - that we're stating okay so everything
55:58 - that's in block content will be
56:00 - interjected or injected into this block
56:04 - that's how it works okay so we'll save
56:06 - that
56:07 - actually before we move on let's just
56:08 - update these remember it's looking for
56:10 - javascript
56:12 - those javascript files are in a static
56:13 - directory so we will
56:16 - add
56:19 - the static
56:20 - path
56:21 - so this one becomes static js static js
56:24 - and then we add a footer here again it
56:27 - allows us to add javascript to certain
56:28 - html files that we don't necessarily
56:30 - want to load
56:31 - into the entire
56:34 - template
56:36 - okay or in all templates should i say so
56:38 - this block content is what will be
56:40 - rendered into
56:42 - this block
56:43 - okay
56:45 - this block title is what will be
56:46 - rendered into
56:49 - where is it
56:50 - i can't see what through the trees
56:54 - did i even add that in there one second
56:57 - i might not have done
57:00 - i did i just didn't copy it across i do
57:03 - apologize
57:05 - so title will be block title okay so the
57:08 - title here
57:10 - anything we put here which we could put
57:13 - did
57:15 - coding
57:16 - dash home
57:17 - that will be rendered into
57:19 - that block there okay
57:22 - description that'll be rendered into
57:23 - that block and so on and so forth css if
57:26 - we had a special css file that we wanted
57:27 - on this particular page we'd add it here
57:30 - we wanted javascript we'd add it there
57:33 - content would have it here okay oh we've
57:35 - got two start contents i don't want that
57:40 - okay save
57:42 - now the last thing we need to do is we
57:45 - need to change all of the images
57:48 - that this is referencing okay so this is
57:51 - all looking for images here so what
57:53 - we'll do we'll control h
57:55 - and what we need to do is
58:01 - static
58:03 - images slash what that would do that
58:05 - will replace all of everywhere it finds
58:08 - speech marks images forward slash it
58:10 - will replace with this code here which
58:12 - is what we want there's nine occurrences
58:15 - and then with the jpeg.jpg part of it we
58:18 - will just go
58:20 - jpg and we'll do that okay so we're
58:24 - we're just we just want to replace it
58:25 - all
58:28 - save and i think we've also got an svg
58:33 - yeah there we go svgs as well
58:38 - dot svg
58:42 - and replace all and if we save that i
58:45 - think that's it i think that's all we
58:46 - need to do for this
58:48 - index page now we won't go through every
58:50 - page well
58:51 - so what we're doing for index is exactly
58:53 - what we need to do for every single page
58:56 - okay
58:57 - so contact for instance and i'll show
58:59 - you what i mean on contact and i won't
59:00 - do all of the others because you know
59:01 - you can do that yourself
59:03 - i'll just copy those that code across
59:05 - from my other screen but i'll show you
59:07 - what to do with contact in a second but
59:08 - if i now it looks like it's still the
59:11 - the
59:12 - server is still up and running so if i
59:14 - now update this it should there we go
59:17 - it's looking for logo it can't find that
59:19 - because we haven't changed or we haven't
59:22 - um updated the images in the nav
59:24 - and it's probably the same at the bottom
59:26 - here we haven't done it in the footer
59:27 - either
59:28 - but everything else is rendering okay
59:30 - okay except it's not linked to the back
59:33 - end yet which would do that in a second
59:37 - so footer i won't mess around with the
59:40 - footer i'll literally just go a
59:43 - copy
59:45 - paste
59:47 - okay
59:48 - so what i've done this is now the footer
59:50 - so i've changed all of the links to
59:52 - static you can see that static images
59:55 - but then at the bottom here rather than
59:56 - saying 2001 i've used another template
59:59 - tag called now so that will always have
60:01 - the most recent year so if when when we
60:04 - hit the first of january 2022
60:08 - um it would just show 2022 rather than
60:10 - 21. okay save that
60:13 - nav will do exactly the same i will a
60:16 - copy
60:20 - again you will have access to this
60:21 - project from github so don't worry too
60:23 - much you'll have access to all of this
60:24 - code
60:26 - or when i haven't changed that this
60:27 - index.html needs to actually change to
60:31 - url
60:34 - main
60:35 - home otherwise that link won't work but
60:38 - it's looking for logo which is in the
60:40 - static directory
60:43 - and it's adding a url link to all of
60:45 - this so the home link at the top of the
60:47 - page will now be main home portfolio
60:49 - will be portfolios blogs and contact so
60:52 - that all of those links will now work
60:55 - go back into the browser update this now
60:57 - works if you click it it will take you
60:59 - back home if you click contact it will
61:01 - take us to the contact page which looks
61:03 - beautiful so let's fix that quickly but
61:06 - as the home page is working but we'll do
61:08 - exactly the same as what we just did on
61:09 - con on the index page okay so all of
61:12 - this is exactly the same we don't need
61:14 - that in the contact page right the css
61:17 - can't find it we need to change all of
61:19 - that but save me doing all of that again
61:22 - all i really need is the contact section
61:24 - right
61:25 - content section
61:28 - i don't need any any of the footer or
61:30 - anything like that all i need is the
61:32 - content
61:33 - and if i go index and if i just copy
61:37 - everything from here
61:39 - up
61:40 - go into contact
61:43 - and dump it here
61:46 - that should i don't need that
61:51 - that can all go back a little bit i like
61:53 - that to be nice and tidy
61:55 - again exactly the same as index we're
61:57 - extending the base html we're loading
61:59 - static and then we can change all of
62:01 - this but
62:02 - again this is why i like block
62:04 - block
62:05 - template tags so we can add whatever we
62:07 - want in here
62:09 - and that will be the new title for this
62:11 - particular page okay css scripts
62:15 - and this section here right so let's
62:17 - focus on this a little bit because it's
62:18 - quite important so contact us below
62:21 - this is the form
62:22 - that we've currently got
62:24 - okay but we need to make this a django
62:26 - form right so
62:28 - what we need to do is add a method
62:32 - equals and this is a post
62:34 - and the action
62:37 - is the url that we want to be
62:39 - referencing so this is contact
62:41 - so
62:42 - the reason we're putting that is because
62:43 - in our urls
62:45 - this is our url so it's contact okay
62:49 - then we need to use because this is a
62:51 - post not a get request or anything like
62:53 - that we need in here
62:55 - csrf token
62:58 - that will add a hidden element with a
63:00 - csrf token which uh will then work
63:04 - then instead of these
63:07 - inputs
63:08 - what we need
63:09 - is
63:11 - you know i'll just copy it across but
63:13 - it's just form
63:14 - and then reference the name
63:18 - so if i
63:19 - take those
63:21 - if i dump those in here
63:28 - okay so rather than being inputs we're
63:30 - now rendering the form now the form is
63:32 - contact form that's what we produced in
63:34 - there in this forms.py and we're
63:36 - bringing in the name field the email
63:38 - field the message field
63:40 - we need to change that to
63:42 - message sorry that's an error on my part
63:46 - and that is it that's all we need to do
63:48 - but we need to close off the block which
63:50 - don't forget to do that because there
63:52 - will be an error
63:54 - end block
63:58 - that is the contact form done okay
64:01 - don't need to do that all we need to do
64:03 - is just double check the
64:04 - there we have it okay so technically now
64:06 - if i was to put
64:08 - bobby
64:09 - stearman
64:11 - bobby
64:12 - did coding.com
64:16 - message this is a
64:19 - test message
64:20 - now click submit hopefully
64:24 - thank you we'll be in touch soon okay
64:28 - that worked if we go into the database
64:32 - and go into contact profiles there we
64:34 - have it okay that's very very useful
64:36 - that just means that you and this is
64:38 - another reason why we're using django
64:40 - any employer anyone who wants to contact
64:42 - you using your contact form you have a
64:43 - record of the timestamp and who it was
64:46 - what the message was
64:48 - in the database okay fantastic so let's
64:51 - go back into
64:53 - our project we've done index we've done
64:55 - contact now let's focus on
65:00 - let's go on to portfolio
65:03 - same again don't need any of this gum
65:06 - above content in fact all we need is
65:13 - all of this copy
65:15 - portfolio
65:17 - paste that in there
65:19 - we'll close the block off at the bottom
65:20 - of the page oh no no we will once we
65:24 - find the bottom of the content
65:28 - scripts
65:29 - i think that's that there no that's the
65:31 - footer i don't know for either
65:38 - end block
65:40 - save okay so if we now just bring that
65:43 - back a little bit
65:46 - and that
65:48 - doesn't really matter
65:50 - um that's all good uh the only thing is
65:53 - we've got some images who's here
65:55 - um but i'm not gonna change all of those
65:57 - that's not that's not a problem
65:59 - um and we're not wiring this into the
66:01 - back end just yet so i'm just making the
66:03 - templates like they are so that's what
66:05 - you would do to each of them but don't
66:07 - get too carried away because you need to
66:08 - add some django template tags like for
66:10 - loops so we can actually render real
66:12 - information so we'll do that but i'm not
66:14 - going to do the detail for the one and
66:16 - the um blogs i'll do that right at the
66:19 - end i'll just copy and paste and walk
66:20 - you through it but let's focus on the
66:23 - index page
66:24 - so at the minute
66:26 - we have got uh this here so we've
66:29 - changed this image so yeah it's showing
66:30 - a picture of me but that's because that
66:32 - image is in the static files what we
66:35 - need to do is we want to reference the
66:36 - avatar that we've saved against the user
66:38 - profile and how you do that is
66:43 - you don't need to reference static now
66:45 - you just need to use
66:47 - me which is in the context
66:52 - context processor so that's me
66:54 - okay
66:56 - but that's the user profile so we now
66:58 - sort of use a model so we now go
67:00 - user profile
67:03 - dot
67:04 - avatar which is the field and you want
67:07 - the url of that
67:09 - save
67:10 - if we now go back into the home page
67:14 - here go home that will still show it's
67:16 - just now what it's doing
67:18 - we go inspect
67:20 - is now picking up um
67:23 - media avatar so this is the actual image
67:25 - that we saved against the profile rather
67:27 - than the file list in a static file
67:29 - which is exactly what we want so i can
67:31 - now change this
67:33 - in the user profile to
67:35 - another image
67:37 - let's choose a file do you know what
67:38 - i'll just stick that in there
67:40 - and save if i go back in here
67:43 - there we go it's not ideal but
67:45 - it gives you an idea what we're doing
67:47 - here so choose file
67:48 - go back in here go into
67:51 - avatar change that and save again
67:55 - bob's your uncle there you go happy days
67:59 - so what we then need to do we need to
68:00 - wire up all of this all of this the csv
68:04 - file here and that's what we'll do now
68:06 - okay so
68:08 - hi i'm
68:09 - you can go
68:12 - me
68:13 - dot
68:15 - first name because this is the user
68:17 - profile and then you can use a filter
68:20 - called title
68:21 - now if i put bobby all lower case in the
68:24 - back end in the database that would
68:26 - render a capital letter followed by all
68:28 - lowercase
68:30 - um hey
68:31 - what would this be i think this is
68:34 - title
68:37 - me dot
68:38 - user profile
68:40 - dot title
68:42 - i think
68:44 - i won't go for all of these because
68:45 - you'll get the gist of it right so
68:49 - this will be
68:51 - me dot
68:53 - user
68:54 - profile dot bio
68:56 - so if we now go back in here and click
68:59 - update there you have it so hi i'm bobby
69:01 - a back-end developer this is just a demo
69:04 - bio go back in the database
69:07 - go back in the bio
69:09 - dot dot dot dot dot loaded gobbledygook
69:11 - press enter
69:13 - or save
69:15 - and update there we go that's how that
69:17 - works it's really really handy so if we
69:20 - then go into the button so download so
69:24 - what we need here we want a link to the
69:26 - csv file which is linked to our user
69:29 - profile
69:30 - so this will be me dot user profile
69:36 - dot cv dot url
69:39 - and that should now
69:41 - because it's got a download attribute if
69:43 - i click that it will then download my
69:44 - csv
69:46 - cv sorry you open it and that's the cv
69:49 - that i've got on that profile okay which
69:51 - is really handy contact
69:53 - that's currently saying contact html we
69:56 - want that as a
69:58 - see i hope you understand what i'm doing
70:00 - here i'm just going through and i'm
70:02 - adding django template tags to
70:05 - allow us to programmatically change this
70:07 - and render information from a database
70:09 - which is really good
70:12 - really handy so that's contact
70:16 - now that link
70:18 - i'm saving it as i go that link will now
70:20 - take us to the contact page
70:22 - okay and then what we'll do we'll
70:24 - quickly do this and then i'll copy
70:26 - everything across from my other screen
70:27 - because it will take too long
70:30 - so we'll go into um
70:33 - [Music]
70:35 - yeah we'll do this one
70:37 - in fact i'll copy it you know what i'm
70:38 - going to copy across and walk you
70:40 - through what i've done
70:41 - so
70:49 - if i take everything from my index
70:53 - now i go into here
70:55 - and go everything from there so all of
70:58 - that work i just done i'm just going to
70:59 - copy and paste over anyway because it's
71:01 - already done on the other screen
71:03 - okay so
71:06 - do you know what
71:08 - let me go back quickly
71:09 - before i do that because i want to show
71:12 - you what we're actually replacing
71:16 - so in this section no let's go into
71:21 - this section here certificates right so
71:23 - this is a slider so this is a slider
71:25 - outer and then we've got a classier
71:27 - certificate slider that's being
71:28 - referenced in the javascript that's what
71:30 - allows that javascript is what moves
71:32 - these sliders across right so
71:35 - that's what we're looking at
71:37 - we've then got a swiper slide okay so
71:40 - these are the elements so that's one
71:42 - certificate that's two
71:45 - and that's three okay well i don't want
71:48 - those three i want the ones that are in
71:50 - the database okay so i don't want them
71:52 - to at all but i want this
71:54 - but rather than showing what it's got in
71:56 - here i want it to render what's in the
71:59 - database so to do that we would use a
72:01 - for loop
72:03 - for
72:04 - c
72:05 - in
72:06 - sir tiff here cuts there we go so tiff
72:10 - it cuts
72:14 - and then we want an if
72:17 - if c dot is
72:19 - active
72:23 - then render this if not don't render
72:25 - anything right so we'll then close off
72:27 - the if
72:28 - and if
72:33 - and i'll close off the four
72:37 - and four okay so this is now a for loop
72:40 - right
72:41 - but what is rendering is a load of
72:42 - gobbledygook so what we want is
72:45 - uh there's no link for the certificates
72:47 - but you'd put you could if that was a
72:48 - blog you'd put um the url template tag
72:52 - so we want
72:55 - this to be
72:57 - c dots
72:58 - just check the field
73:02 - certificates i think at the bottom here
73:03 - certificate so this could be title
73:10 - that'll be
73:13 - title
73:16 - this would be
73:19 - c dot date dot date
73:25 - c dot
73:27 - what is this going to be i
73:29 - needed to
73:34 - name title okay
73:40 - so this is title
73:42 - that'll be in this case for my example
73:44 - would be free camp and then you have
73:46 - this would be description
73:49 - c dot description
73:51 - okay
73:52 - save so now rather than rendering
73:54 - gobbledygook is rendering actually
73:56 - something from the back end certificates
73:58 - the reason i'm accessing that is because
73:59 - it's in the context i added it in the
74:01 - context in views okay so if you go here
74:04 - that's what i'm accessing okay
74:06 - so it's all active certificates
74:10 - go back into index
74:13 - and save that
74:14 - i'm hoping i haven't buggered anything
74:17 - up
74:18 - no right so that's now showing one okay
74:20 - because we've only got one in the
74:21 - database but if i go to certificates and
74:23 - click inactive save that won't render
74:26 - anything yeah
74:30 - so can you see what i'm trying to do
74:32 - here
74:34 - that's that's that so every refresh done
74:36 - okay so i'm not going to go through and
74:38 - do everything else because
74:40 - um you can see what we're trying to
74:41 - achieve you need to add for loops and if
74:44 - template tags to render the right
74:46 - information against this template okay
74:49 - so we'll go about and i will
74:53 - add this content
74:54 - here paste
74:57 - save
75:00 - and then render it
75:02 - oh
75:05 - emblem we've got two end blocks don't
75:06 - want to end blocks save
75:09 - go back
75:12 - oh i've got two block contents as well
75:14 - okay that's that's always fun
75:16 - sorry i'm racing through i'm trying to
75:18 - there we go let's delete that one save
75:20 - that should now work
75:22 - there we go right okay so this is now
75:26 - all rendered
75:27 - from the back end
75:29 - so we're going to certificate if we're
75:31 - kind of skills
75:32 - final change
75:35 - html to
75:37 - 98
75:40 - save that
75:41 - update 98
75:43 - okay
75:44 - and these these will change as well so
75:47 - if i change that to 50 you'll probably
75:49 - see what i mean actually so i'll go 50
75:54 - save
75:55 - there we go okay
75:57 - team players self starter is looking at
76:00 - different images certificates we've got
76:01 - one in database featured work i've got
76:03 - one testimonials i'll put three in there
76:06 - if you remember
76:07 - but if we
76:09 - was to make one inactive for instance
76:12 - save that
76:14 - and update
76:15 - there we go we've only got two in there
76:16 - okay
76:17 - test blog okay and if you were to click
76:20 - view all what it will then do it will
76:22 - then take you to the blog page but we
76:25 - haven't done that yet okay so
76:27 - i will quickly um add all of these
76:31 - blog details so
76:34 - copy if i'm going to blog details
76:39 - paste
76:41 - so what we're doing here blog deep oh
76:43 - actually and we'll do a blog
76:46 - copy and we're going to blog just the
76:48 - normal blog list page
76:52 - save and if we go and render this now it
76:55 - should look good there we go okay so
76:57 - this is rendering my one blog that i've
76:59 - got so this is a list view if i added
77:01 - another blog it would appear there it
77:02 - looks really really good so if i click
77:04 - on this it'll open up the blog details
77:06 - view
77:07 - okay and right okay that doesn't that
77:09 - didn't render too well so
77:11 - this when i say you need to mess around
77:13 - with the ck editor because it does um
77:15 - some reason it renders some of the
77:17 - information incorrectly but that's fine
77:19 - you know this is just
77:20 - playing playing with the information
77:22 - there
77:23 - so we're going to blogs
77:25 - blog profile
77:29 - what i do is i just
77:37 - i wonder what that looks like that might
77:41 - help
77:43 - this is the end right you can see what
77:44 - i've done now i've just added some bits
77:46 - it's because the image is probably too
77:48 - small for the for the actual screen if i
77:50 - was to make it a bit bigger
77:52 - let's go back in there make this
77:56 - uh image properties
77:58 - change that to what a thousand let's
78:00 - have a look
78:02 - okay
78:04 - save
78:06 - there we go it's starting to do
78:08 - something different now okay so
78:10 - tinker play around with it what you see
78:12 - is what you get with a rich text editor
78:14 - but it just allows you to design a
78:15 - different blog so all of your blogs
78:17 - don't need to look the same but you can
78:19 - use the same template which is great and
78:21 - a really good benefit of using django
78:23 - here so if i now open this all we've
78:25 - done is
78:27 - in the blog detail page
78:31 - we have got yeah the object.name author
78:34 - so this has always been pulled through
78:35 - from the back end
78:37 - um but this is what's important okay so
78:39 - the object.body if i was to remove safe
78:42 - all it renders is raw html
78:46 - like that so this is the html that the
78:48 - rich text editor is creating but because
78:50 - we're using the safe
78:51 - template filter it actually renders the
78:54 - html into something tangible that we can
78:56 - actually see and it's rendered well on
78:57 - the front end so if i change that now
79:00 - back to safe
79:04 - save
79:06 - there we go and i'll quickly just for
79:08 - google's i will change
79:11 - the details page copy
79:14 - this one where is it there we go
79:18 - save
79:20 - portfolio
79:22 - copy and portfolio
79:28 - save so if i now go into here i'm going
79:31 - to portfolio there we go and clicking
79:33 - portfolio that remember this is get
79:36 - again it's because the image that we've
79:38 - got in here portfolio
79:44 - let's change this image properties so
79:47 - let's put that as a thousand and that'll
79:49 - probably work now
79:54 - there we go uh again have a tinker
79:57 - uh again but then look if we were to
79:59 - mark this as inactive
80:04 - and portfolio it won't work okay
80:07 - um to be honest that might still work
80:10 - yeah you
80:11 - you could also put in the uh view that
80:14 - if
80:16 - that if the queer so if the object is
80:18 - marked as inactive then you can do a
80:20 - render redirect so you can redirect back
80:22 - to the portfolios list so it will never
80:24 - show
80:25 - a url but i haven't done that in this
80:26 - instance so that is it that is the
80:28 - template done
80:30 - so we have now got a digitized
80:34 - resume
80:35 - that is entirely
80:38 - um
80:39 - that is entirely made in django and we
80:42 - can change every single key element of
80:44 - this resume without having to change any
80:48 - of the core any of the um
80:52 - code in the background so
80:55 - that's brilliant
80:56 - that is more or less the end of this i
80:59 - will just recap right so
81:01 - what have we done we've just digitized a
81:03 - resume right so we've built a whole
81:05 - project in django we've digitized our
81:08 - word or pdf
81:09 - cv or resume and we've put it online so
81:12 - you would make this website you put it
81:15 - in production and then you'll be able to
81:16 - send that link to an employer that will
81:18 - help you stand out in a crowd the good
81:20 - thing is because we've used django we
81:22 - are able to use the built-in admin page
81:24 - and we are able to create read update
81:26 - and delete all elements of the resume so
81:29 - you never have to change the source code
81:32 - now that that is fantastic right so let
81:35 - me change it so you can actually see me
81:36 - again
81:37 - okay so that that is really really good
81:39 - i have really enjoyed putting this video
81:41 - together
81:42 - again my name is bobby stearman and i am
81:45 - from did coding
81:47 - please subscribe to my channel i do
81:48 - videos like this all of the time
81:50 - before i close the video off i just like
81:52 - to say thank you to my colleague james
81:54 - granger who helped me put this template
81:56 - together he designed it and
81:59 - without him we wouldn't be able to give
82:00 - it away for free again it can be found
82:03 - on my github which is github.com bobby
82:07 - dash did coding slash decoding
82:10 - underscore resume underscore
82:12 - template
82:13 - thank you very much for watching i have
82:15 - enjoyed creating it i hope it's useful
82:17 - and i'll see you in the next video thank
82:20 - you bye