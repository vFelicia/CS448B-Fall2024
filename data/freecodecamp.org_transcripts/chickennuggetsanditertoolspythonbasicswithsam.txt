00:00 - [Music]
00:11 - all right this should be
00:13 - let me mute everything else that we
00:16 - don't need
00:18 - all right
00:21 - this should be up let's see
00:23 - got a good light streaming
00:28 - all right i forget how much of a delay
00:29 - there is
00:32 - all right everything looks good
00:36 - cardinal you hear in chat
00:38 - let me know all right so i gotta click
00:40 - over
00:42 - here here we go all right
00:44 - look i got my shirt i was able to meet
00:46 - up with uh quincy a couple weeks ago we
00:49 - chatted had an awesome chat
00:51 - so want to say thank you to him and he
00:53 - got me a
00:55 - shirt and i told him i would wear it
00:57 - every stream but i realized i just have
00:59 - this zoomed in so apparently i'm gonna
01:01 - have to work with my webcam but hey all
01:03 - right everybody
01:04 - uh we have all these awesome
01:06 - contributors uh
01:09 - uh i spend uh all my time as volunteers
01:12 - so
01:13 - if you guys could go down below and grab
01:17 - something a shirt a cup a hat
01:20 - should ask for a hat i should have
01:21 - thought about that
01:23 - maybe maybe i'll go on and buy a hat but
01:25 - uh just go down and support free code
01:27 - camp uh quincy and bo and his group are
01:29 - doing
01:30 - an amazing job all these everything here
01:33 - is uh
01:36 - 100 free and they are doing a great job
01:38 - and uh
01:40 - i want to help out as much as i can
01:42 - because like i said with the chat with
01:44 - quincy uh really kind of see
01:46 - what he's thinking and got going and i
01:49 - just
01:50 - i think the organization is great so
01:51 - there we go
01:53 - all right
01:55 - so what in the world am i talking about
01:57 - about chicken nuggets and itter tools
02:02 - is uh is everything let's see
02:05 - is chat back up and running i know i
02:07 - restarted everything
02:09 - let's see
02:11 - all right good cardinal is everything
02:13 - good
02:16 - i should probably have discord open so i
02:17 - could see you just one on one that might
02:19 - be an idea for next week
02:23 - all right okay cool
02:25 - so chicken nuggets so actually i stole
02:28 - this uh project from uh someplace else
02:33 - but the idea of the chicken nuggets is
02:35 - you have and it's from a very well-known
02:39 - organization
02:40 - they have combination of chicken nuggets
02:42 - of 6 9 and 20.
02:45 - and the challenge is the problem is uh
02:48 - for you to write a
02:50 - function
02:52 - to take
02:53 - it started with started at least 50 and
02:56 - what we'll find out is we'll
02:58 - use the skills that we have um
03:05 - uh you guys can just put in chat and uh
03:07 - we have uh some awesome moderators and
03:10 - they'll make sure that what
03:12 - um
03:14 - uh
03:17 - uh what needs to get through
03:19 - gets through um so all right
03:22 - but i digress so the challenge was
03:24 - take i want 50 chicken nuggets
03:28 - what combinations of our six nine and 20
03:31 - to get 50 and then really even
03:34 - sophisticated what happens if i wanted
03:36 - 53 chicken nuggets how would we go about
03:38 - that so let's just get into it and then
03:41 - what we'll find out is we'll we'll write
03:42 - a little bit more
03:44 - and we'll see how in the world
03:48 - can we get basically every combination
03:50 - and then we're going to look at a very
03:52 - awesome module uh itter tools all right
03:54 - so i got about an hour so let's just
03:56 - jump into it
03:58 - so if you guys are new here i'm sam from
04:00 - python basics uh supporting
04:03 - free code camp so make sure you're going
04:05 - to get something today
04:07 - and uh
04:08 - we're going through all the videos that
04:10 - i've already done so you can see down in
04:12 - the uh description below
04:14 - um
04:16 - anything that we're we've done here and
04:18 - you didn't quite get it there is a video
04:21 - for it alright
04:23 - so let's get at it nuggets
04:26 - i get
04:28 - all right
04:31 - pass
04:32 - so let's just kind of think about this
04:34 - first
04:35 - so we have
04:38 - oh i didn't even check
04:40 - can we see this i need to shrink that
04:45 - didn't think about that
04:48 - boom
04:49 - so we have our combination we have six
04:53 - we have nine
04:54 - and we have 20.
04:56 - so how in the world are we going to do
04:58 - this we need to think about this
05:00 - like a
05:02 - did i keep the picture of the odometer
05:05 - i did
05:06 - or the flipping clock
05:09 - so this is the way i want you to think
05:10 - about this and how we're going to solve
05:12 - it and how we're going to lay it out and
05:14 - then how we need to
05:16 - design it let me make sure you can see
05:18 - this okay
05:19 - so we have 6
05:21 - we have 9 and 20. so we need to revolve
05:26 - through and as we get back to a certain
05:29 - number of combinations of one then we
05:31 - need to flip it over i was thinking
05:33 - about an odometer but then i was hard to
05:36 - find a
05:37 - flippy
05:38 - old-timey odometer than i thought about
05:40 - a bunch of things but i'm a lot older
05:41 - than most of you guys so um
05:44 - found this image of a clock so this is
05:47 - what
05:49 - we're going to do we gonna we're going
05:51 - to start with six so we go one two three
05:54 - four
05:55 - five
05:56 - six seven eight nine ten then we're
05:59 - going to flip over to nine and then
06:01 - we're gonna and then we have to reset
06:03 - then we're gonna come through and go one
06:05 - two three four five six seven eight nine
06:06 - ten
06:07 - flip over
06:09 - and then another one so what does that
06:11 - sound like the tools that we already
06:14 - have does anybody have any
06:17 - i have way too many
06:20 - um
06:25 - all right
06:26 - let's see
06:31 - no this is not our first
06:34 - video
06:36 - this is
06:37 - cardinal you might be able to help me
06:39 - this is our 9th or 10th but you can also
06:42 - click down in the description
06:46 - the playlist has every single playlist
06:49 - that
06:50 - of all these videos bo has done an
06:52 - awesome job of consolidating them but
06:54 - all right so basically this is how i
06:56 - want you to think about this this is
06:58 - nested for loops so we're just gonna
07:00 - pick an arbitrary 10
07:02 - and we're just going to hack through
07:03 - this at first
07:05 - we're going to go
07:07 - 10 6 combinations then flip over to 9.
07:10 - then we're going to do 10 more 6
07:12 - combinations flip over to 9. then once
07:14 - we get to 10 9 combinations we're going
07:17 - to flip over to 20. then as we're doing
07:19 - this we're going to
07:22 - check and see if this total
07:26 - are total because y is going to be our
07:28 - total number of chicken nuggets
07:30 - let's just do total let's change that
07:33 - i had y in my
07:35 - in my experiment so i probably need to
07:38 - change that to
07:40 - two
07:44 - there we go
07:48 - and then where's my other y
07:51 - i got a couple y's in here
07:54 - because that will be confusing to you it
07:55 - makes perfect sense to me
07:57 - all right
07:59 - total and one more total so then we need
08:02 - to think about our challenge with our
08:04 - loop and then how to get in and out of
08:06 - it
08:06 - so we're gonna i'm gonna just kind of
08:08 - walk you through
08:11 - so we're going to be taking all of these
08:13 - combinations and a lot of them aren't
08:15 - going to work
08:16 - a lot of them as we go through these
08:18 - at one point we're going to have one two
08:21 - three four
08:22 - so four
08:24 - if we have four combinations of six
08:26 - that's 24 and then two more
08:29 - uh 18s
08:31 - or two more nine which is 18. so 6 times
08:34 - 4
08:35 - is 24 and then 9 times 2 is 18
08:39 - 18 and 24 that may not be any
08:42 - combination we want so we're gonna let
08:44 - our program sort through all of these
08:47 - for loops
08:48 - and go from there so
08:50 - all right let's get
08:52 - our let's get our layout
08:56 - so then we're going to need to collect
08:57 - these and see
08:59 - and it's good
09:00 - good practice and experience so
09:02 - basically our first general idea
09:05 - is we want to know how many combinations
09:07 - of these different chicken nugget
09:10 - packages to get 50 chicken nuggets
09:12 - that's our starting point
09:15 - all right
09:16 - so we need to get some variables going
09:19 - so we got 10 or excuse me uh 20
09:23 - 9 and 6.
09:25 - so 20
09:27 - 9
09:28 - and 6. let me flip over here to chat
09:30 - make sure i'm not missing anything
09:32 - global
09:34 - great question all right
09:37 - this means that
09:39 - a
09:40 - variable inside a function
09:42 - can be moved in and out
09:46 - and um
09:48 - because
09:50 - a variable by by default
09:53 - is a local variable if it's inside a
09:57 - a function and it typically cannot be
09:59 - pulled out so i wanted to do global so
10:01 - that when we are going and we want to
10:03 - test and look at our dictionary that has
10:05 - all these combinations we can just pull
10:08 - it out so that's what i'm doing right
10:09 - now
10:15 - but yes that is absolutely true cardinal
10:17 - thank thank you very much it is the 10th
10:20 - all right
10:21 - so cardinal is uh our mod
10:25 - um cardinal's been around a while uh
10:28 - been very helpful and has moved up and
10:31 - is
10:32 - actually
10:34 - an admin on uh the python basics discord
10:38 - and also a moderator on this free code
10:41 - camp stream so just want to say
10:44 - thank you as always to cardinal
10:48 - okay so we need to get a for loop going
10:51 - so we have
10:53 - three different
10:54 - combination
10:56 - values
10:58 - so we need to have three
11:00 - for loops
11:04 - yes that is the absolute idea so we need
11:08 - to then go through and set up a function
11:10 - so each time through this iteration
11:13 - that
11:14 - we need to then
11:15 - so um
11:18 - that
11:19 - math uh formula right there is
11:22 - absolutely it except we're just gonna
11:24 - use these
11:25 - because that variable's gonna just go
11:28 - through so that is exactly it
11:30 - so let's just get at it
11:32 - and then we're gonna look at some pretty
11:34 - cool stuff but this is just a great
11:38 - just a great thinking problem how in the
11:41 - world
11:42 - can i go through
11:43 - and move through all of these
11:45 - combinations to test it so for i
11:48 - in range
11:50 - 10
11:51 - and this this was just my first hack my
11:54 - first attempt at checking this
11:56 - there are
11:58 - tons of better ways to do this i haven't
12:00 - looked at this since i first solved it
12:03 - and i've wanted to wait years to go back
12:05 - because
12:06 - i know there's better ways but i have
12:09 - not wanted to test it until um we got
12:12 - together and to do this to see what
12:15 - actually comes out of it because there
12:17 - are much better ways all right
12:19 - so this is going to be
12:21 - our
12:23 - 20 nugget combination
12:26 - so that's our
12:27 - that's our outer that's like our um on
12:30 - our ring going around
12:32 - just like this
12:34 - so this we're going to cycle through our
12:36 - sixes
12:37 - all the time
12:38 - we're gonna cycle through our
12:41 - nine loop
12:43 - every 10 times through and then we're
12:46 - going to cycle through our 20s every 100
12:49 - times through does that make sense every
12:52 - time through so 10 10 go arounds then
12:55 - move up to here so basically this is our
12:57 - singles our tens and our 100s place
13:00 - all right
13:01 - okay
13:02 - so now then we go
13:05 - and we're just nesting all of these
13:09 - for range 10
13:10 - should get chat open
13:14 - all right
13:16 - that's just our test right now we're
13:18 - going to test for 50 to kind of wrap our
13:20 - head around it because there is a
13:22 - threshold where below
13:23 - that a combination of these will not
13:26 - work but
13:27 - in the original instructions for this
13:29 - problem 50 and up works for every single
13:32 - one and then i'm gonna we're actually
13:34 - gonna use our skills that we have about
13:37 - um try and accept to see how low it can
13:40 - go to go from there so all right
13:43 - here is our that's our
13:45 - um
13:47 - nine combination and then now we're
13:49 - gonna do our
13:51 - hijk
13:53 - in range
13:56 - but yeah our first mental starting point
13:58 - is 50 so we know it'll work
14:03 - all right
14:07 - but yeah guys this is not for spamming
14:09 - cardinal has instructions to just uh
14:12 - remove and then boot because we are here
14:16 - um
14:18 - uh
14:19 - for learning purposes light like i said
14:22 - um all this is free um and we have best
14:25 - intentions in mind and we just wanna
14:28 - have a good clean supportive community
14:31 - all right
14:32 - thanks thanks cardinal
14:34 - all right so
14:37 - now we need to test
14:38 - and see
14:39 - how in the world we need to do this
14:43 - so
14:44 - this is a little junky because again
14:47 - the i wanted to show you exactly my
14:50 - first attempt at this
14:53 - all right so
14:54 - [Music]
14:55 - and that function that
14:57 - mathematical function actually has to
14:59 - keep saying function but if we look over
15:01 - here
15:02 - i think
15:03 - somebody already threw it up but
15:06 - it's going to be
15:09 - k
15:11 - so if we go i think i changed it around
15:13 - so it's
15:14 - in in order
15:17 - so this is our 20 this is our nine this
15:21 - is our six so we're going to stay
15:23 - consistent
15:24 - so
15:26 - i
15:28 - times
15:30 - t plus
15:33 - j
15:35 - times
15:38 - n
15:39 - plus
15:41 - k
15:42 - times
15:45 - let's see k times
15:48 - s
15:51 - so this is our loop right here here's
15:53 - our variable
15:54 - every time through i
15:56 - i times 20
15:59 - j times n
16:01 - k times s
16:03 - all right so now we want to test this
16:07 - and i actually have this here and i was
16:09 - going back and i i peaked a little bit
16:10 - and i was like i need to exactly know so
16:14 - we're throwing in into into the
16:16 - dictionary
16:17 - because i remember this was very similar
16:19 - to my first way that i solved
16:22 - our primes oh my goodness if you haven't
16:24 - seen that attempt at how to find a prime
16:27 - number on my first example
16:31 - it was horrid
16:33 - yes tt is the total number of chicken
16:35 - nuggets that we are t
16:37 - ttl that we are wanting so we're going
16:40 - to input so
16:41 - our first attempt is going to be 50. so
16:44 - we are going to input nuggets 50 and we
16:47 - want to
16:48 - get out the number of
16:53 - each combination how many 20s how many
16:55 - nines how many sixes
16:58 - because i think what i originally did in
17:00 - this go round was i let it go through
17:02 - every single combination and then i
17:06 - sought out and then you could actually
17:08 - then see
17:09 - because you're going to see
17:13 - well the editor i don't want anybody to
17:15 - be over
17:17 - overloaded all this is is the python
17:20 - editor because i know that it can be
17:21 - challenging
17:23 - uh for new people to find the right
17:25 - editor and feel like they're overwhelmed
17:27 - i just use shell when i'm doing when
17:29 - every single one of my tutorials it's
17:31 - the it's the python editor script
17:34 - and
17:36 - and then um the shell because that's
17:38 - sufficient
17:41 - thank you cardinal
17:45 - yeah
17:46 - cook if we're not we're not gonna spam
17:48 - here
17:52 - all right
17:53 - okay
17:55 - so now here's my
17:58 - thank you cardinal all right
18:02 - because in my experience um there can be
18:04 - some uh issues for
18:07 - um
18:08 - where programs are and files are laid
18:10 - out for new people and pride charm can
18:12 - be very overwhelming and frustrating so
18:15 - if you have experience with pycharm
18:17 - you're very easily
18:18 - able to put this into your
18:22 - pycharm program
18:24 - so that that's that all right
18:27 - so then i'm making so right here is i
18:31 - have my key value i'm putting these in
18:34 - and i want you then to be able to go
18:35 - back and look at all the combinations
18:37 - that are here so far
18:39 - so here's my key and then i'm going to
18:41 - be assigning the value
18:43 - and it's going to be my k
18:45 - where did i change this nope let's stay
18:47 - consistent i
18:50 - j
18:52 - k
18:53 - so what am i doing here so each time
18:55 - through
18:57 - it's going to get the total
18:59 - it's then going to write this key to
19:02 - this dictionary and we're going to see
19:05 - the values
19:07 - again i know this doesn't really have a
19:10 - purpose right now but i have no problem
19:14 - showing you the absolute
19:17 - really ugly stuff that i did
19:20 - when i was first learning to program so
19:22 - now what
19:23 - in the world am i doing here
19:26 - so then we got to come out
19:29 - here
19:30 - break
19:33 - actually did i
19:35 - yep
19:36 - then if
19:39 - ttl equals total
19:42 - then break
19:45 - then
19:49 - no
19:51 - all right for those of you who don't
19:53 - know
19:54 - you can de-indent a region
20:00 - boom
20:05 - yeah that works
20:10 - let's do that and then yeah here we go
20:13 - and if
20:14 - total
20:16 - equals tote
20:18 - anybody see my mistake i missed a equal
20:21 - sign so let's go through this real slow
20:24 - because i think we have probably quite a
20:26 - few new people
20:31 - yes we are going to print um
20:34 - but all right so
20:38 - break only moves you out one for loop so
20:41 - as we come through
20:42 - we need to kick out each single time
20:47 - so
20:48 - all right
20:52 - so here we go
20:54 - one two three one two three
20:56 - all right so now i need to now we're
20:59 - gonna
21:00 - now we're gonna get
21:02 - some printing
21:04 - and this is yep
21:06 - all right
21:09 - one two three
21:19 - y
21:24 - then
21:30 - x
21:32 - y
21:34 - and
21:43 - two
21:46 - sorry i just realized off the top of my
21:47 - head that i rearranged these and i
21:49 - didn't change it
21:50 - six piece
21:56 - then
22:00 - you know i don't i know you guys are i
22:02 - want you bored out of your
22:03 - mind
22:05 - so this is one
22:07 - this is zero
22:10 - and this is nine
22:13 - and this is 20. all right so i just
22:15 - realized i changed that last part didn't
22:17 - catch that so now when this
22:20 - reaches
22:21 - when this is reached our total
22:24 - our tote
22:25 - of our combinations of each of these
22:28 - matches this
22:30 - stop stop stop and then print out the
22:33 - combinations and i need to
22:36 - then come here
22:38 - and one two three close this out so why
22:41 - am i doing this
22:43 - like
22:44 - this
22:46 - because i want this on multi lines
22:49 - so when i use my three quotation marks
22:52 - this is it's a multi-line
22:55 - um
22:56 - control of a print statement so this is
22:59 - my f string formatting and i want this
23:02 - to come go in to my
23:05 - that needs to be sorry ttl
23:09 - when this is here then out of my
23:11 - dictionary
23:13 - grab my key
23:16 - and that needs to be ttl as well
23:26 - so you could change this where once this
23:29 - total
23:30 - happens
23:32 - again
23:33 - this i wanted to show you how ugly my
23:35 - first attempt at this was sorry let's
23:37 - just run it
23:38 - uh oh actually we need to pass in
23:42 - uh nuggets
23:46 - 50.
23:51 - okay so the way that i had this come out
23:54 - is i said
23:56 - i want the total
23:57 - so there's my total that i pass in
24:00 - then i want to see
24:02 - how many combinations is six so that's
24:04 - what
24:05 - this placement is because i'm writing
24:07 - this to my dictionary
24:10 - i need five six piece
24:13 - and i need zero nine piece and i need
24:16 - one t one one t one twenty piece
24:22 - now
24:23 - all right
24:24 - so let's pass in
24:28 - let's pass in a test
24:31 - to see
24:32 - so right now i told you 50 works
24:35 - about 49.
24:38 - oh okay so i get 220 piece one nine
24:41 - piece okay that's
24:43 - pretty
24:45 - pretty uh
24:51 - uh what 40
24:54 - hang on let me see if i remember
24:56 - all right
24:58 - uh
24:58 - 47
25:01 - how do we get that how do we get 47 so
25:04 - three
25:04 - three by s so three sixes a nine and a
25:07 - twenty piece all right so now we're just
25:09 - kind of hitting and missing
25:12 - so now let's let's change this up
25:17 - so
25:19 - we know
25:24 - we have skills to do some things like
25:27 - this
25:28 - so right now if i go and i change
25:33 - let's just see
25:36 - combo
25:38 - so now i just want to test a bunch of
25:40 - range of numbers
25:42 - for i in
25:45 - range
25:46 - let's go
25:49 - 0 through 100.
25:51 - now we know 0 is going to throw an error
25:54 - so let's just let's just try this
25:58 - nuggets
26:00 - i
26:01 - and
26:03 - humble append
26:06 - i
26:08 - then accept
26:13 - print
26:15 - i
26:17 - no results
26:21 - and i think i just changed that up on
26:22 - you guys so now
26:26 - bam that was fast
26:29 - so let's see
26:31 - where does this so of course zero zero
26:34 - zero so we can't find one two three four
26:38 - five but we can find six
26:40 - then we can't get seven eight nine
26:43 - so as you can see we can go through and
26:45 - i'll just show you
26:46 - but from if memory serves 44
26:50 - literally
26:51 - from 44
26:53 - chicken nuggets
26:55 - to the end of time
26:57 - you can find any number of combinations
27:00 - so as you can see right here
27:02 - no results is the first
27:04 - as the last one at 43. you could even
27:06 - find 40 was it 39 blew me away so yeah
27:10 - you can have 39
27:12 - and of course 36 is
27:15 - uh
27:16 - really simple it's just 6x6 but this was
27:19 - an absolutely awesome
27:21 - example
27:25 - well
27:26 - yeah i wish i could speak uh other
27:28 - foreign languages my
27:31 - my
27:32 - younger son is doing spanish and my
27:34 - older son
27:36 - he's he's been talking about trying to
27:38 - learn russian
27:41 - so all right
27:43 - now let's get on to some cool very cool
27:45 - stuff we got 30 minutes
27:48 - and
27:49 - if if if
27:51 - this gets buried um you can always just
27:53 - click over to my channel from the
27:54 - description down below
27:56 - and check this video out and i think i
27:59 - am probably going to redo it but hey
28:00 - just to remind you guys it's been 30
28:02 - minutes since i've done this make sure
28:04 - you're going to buy
28:05 - a shirt or a hat i should i think i'm
28:07 - going to buy a hat so i can have it on
28:10 - to buy a hat and sorry about the the dot
28:12 - on my face i'd forget it the time of
28:15 - year is changing
28:16 - i usually don't film this time of day so
28:19 - i need to hang something in front of
28:21 - hope it's not too disturbing for
28:23 - everybody
28:24 - other than my normal face being being
28:27 - being on the screen but all right uh
28:29 - let's see
28:32 - okay
28:34 - uh
28:35 - itter tools
28:37 - let's just get after it so what
28:40 - what is ittertools let's get down to the
28:43 - bottom
28:45 - um
28:46 - import iter tools
28:50 - enter
28:51 - iter tools
28:54 - so here is
28:56 - a bunch of methods from itter tools so
28:59 - let's run help on
29:02 - iter
29:03 - tools
29:05 - 692 lines
29:08 - let's bring this over just a touch so
29:10 - we're going to go through some of them
29:13 - uh i think the one you'll like the most
29:16 - we're going to skip accumulate because i
29:19 - wasn't sure what our next
29:21 - topic was going to be but we are going
29:23 - to do operators because but we need to
29:26 - learn about operators before we can do
29:27 - accumulate that is a perfect example
29:30 - but um
29:31 - uh count we're going to do what we're
29:34 - going to do today
29:35 - uh if we do have if we have time we're
29:37 - going to look at chain
29:39 - we're going to look at
29:41 - a chain from iterable
29:45 - combination
29:47 - count
29:48 - and then we're going to use the tools
29:49 - that we have to go over a suggested
29:51 - video that i had that i was able to tie
29:54 - these all together but if you guys are
29:56 - new here um
30:00 - i thought that this would work because
30:01 - there was a lot of chatter about
30:04 - how to practice for loops and all of
30:06 - these things
30:09 - make sure you check out my video from
30:10 - yesterday about filling up your toolbox
30:13 - so that's why i'm probably most excited
30:15 - about this video or this stream today
30:18 - about itter tools because once you learn
30:21 - learn these things
30:28 - uh
30:29 - if you you you when you have a problem
30:32 - you want to make sure that you have a
30:33 - variety of tools instead of just walking
30:35 - around with one tool that you have and
30:37 - you keep trying to just use that hammer
30:39 - because everything will start to look
30:41 - like a nail that's an old old-timey
30:44 - carpenter saying
30:48 - okay
30:49 - so yeah here we go
30:51 - uh chain
30:53 - um
30:54 - count yeah i i think count is probably
30:56 - one of the coolest and then we'll just
30:58 - head on so let's
30:59 - let's comment
31:01 - all this out
31:03 - there's our stuff from two weeks ago
31:06 - all right
31:08 - so from
31:12 - like i said we're gonna do chain
31:14 - first
31:15 - so from
31:17 - itter tools
31:19 - import
31:21 - chain
31:22 - so chain is a very cool one so does
31:24 - anybody not know what i just typed
31:27 - from intertools import chain
31:30 - so durr on
31:33 - editor tools
31:35 - so now so here's my module
31:37 - iter tools then here is
31:40 - mine let's see if i can do my alphabet
31:44 - um there's chain so now once i run so if
31:49 - i wanted to run help on
31:52 - if i wanted to see the documentation for
31:54 - chain in my shell environment right here
31:58 - i have to do it or tools dot
32:02 - chain
32:03 - now with this keyword from
32:06 - i jump into itter tools and i pull out
32:10 - just chain
32:11 - so now when i run this
32:13 - i come over here
32:15 - so here's the documentation for
32:18 - itertools.change so the chain method in
32:20 - inside editor tools
32:22 - chain class
32:24 - inside module itertools
32:26 - now that i've done this
32:28 - i can just run help on
32:31 - chain
32:32 - so i've grabbed chain pulled this out
32:35 - and now this is a function
32:39 - method sorry
32:41 - boom
32:42 - just like this
32:44 - all right
32:44 - so now what let's see what in the world
32:47 - this does
32:50 - so x equals abc
32:55 - y equals
32:57 - d e f
32:58 - e f
33:00 - z equals
33:02 - g h i had to cheat on my alphabet so for
33:05 - i in
33:07 - chain
33:10 - x y
33:12 - z
33:14 - and print i
33:16 - so chain will literally link all these
33:19 - together
33:22 - boom and then make a new
33:27 - iterable
33:28 - and as we know we can iterate through an
33:30 - iterable and this just
33:33 - uh kick them straight out
33:36 - to
33:36 - wherever you'd like them to go
33:38 - now
33:40 - now let's say
33:41 - we had these in
33:44 - a
33:46 - list
33:48 - so we got
33:50 - x
33:50 - y and z
33:53 - throw this in a list
33:55 - now let's look at
33:59 - um
34:03 - yeah so now i have chain here right i
34:05 - have chain
34:07 - and i run dir on chain
34:10 - so i'm one level inside of chain now
34:15 - from iterable
34:16 - this is one of the
34:18 - rare ones where a method then has a a
34:21 - method
34:22 - all right
34:24 - is everybody following that
34:33 - so
34:38 - yep
34:39 - very nice
34:42 - very very nice somebody already caught
34:43 - the um
34:46 - uh args
34:54 - and that means
34:56 - it can take
34:57 - an endless amount we use this on our uh
35:02 - oh i can't remember but that is a very
35:04 - good
35:04 - very good checks
35:06 - very good catch
35:08 - so now now that we throw this in
35:13 - now we go
35:15 - now i throw it in an iterable
35:17 - a list
35:19 - so for
35:21 - i
35:23 - in chain
35:25 - dot
35:28 - from
35:30 - iterable
35:32 - i could have just hit but i don't want
35:33 - to do that so then i pass it
35:37 - this and i go print i i get the same
35:40 - result
35:41 - but if you already have a
35:46 - list and you don't need to go through
35:48 - you can just slap that in there
35:50 - all right
35:51 - now
35:52 - we're getting close
35:55 - to some of my favorite ones all right
36:00 - i don't need that anymore let's just
36:04 - and again if you are new what i have
36:07 - been doing and i've been
36:08 - i'd like to say that i'm very successful
36:10 - so i've been adding so uh down over on
36:14 - my page what you'll see is um i know the
36:17 - more recent ones
36:18 - the older ones are not but the more
36:20 - current ones
36:21 - um
36:23 - no it's not better than pycharm it's
36:25 - just
36:27 - you don't need to do anything to it to
36:29 - run a
36:32 - because actually pycharm then pulls in
36:34 - the interpreter
36:35 - and runs it off here this is the bare
36:37 - bones i am here for
36:40 - new new new people to remove any
36:44 - concerns any fear any
36:47 - i'm i'm here to tear down the um
36:51 - the the any any any any fear
36:54 - or any um
36:56 - anything that can scare new people away
36:58 - because
37:00 - a new person learning programming
37:02 - the likelihood of them running into a
37:04 - challenge
37:05 - of any type slows them down from
37:07 - learning i want to show them how they
37:10 - can start solving and writing code with
37:12 - the littlest of
37:14 - of challenges you don't have to go and
37:15 - get other software
37:17 - i'm here to teach them
37:19 - how to learn
37:20 - how to learn to program how to get
37:22 - success under their belt
37:24 - then they can go off and solve other
37:26 - problems and learn about what
37:27 - interpreter they want or what editor
37:30 - they want to use okay
37:32 - all right so
37:34 - sorry about that little tangent i just
37:36 - saw
37:37 - but no i'm not going to get into a
37:39 - discussion about what editor to use
37:42 - did it's that i'm here to show you guys
37:45 - um
37:46 - uh how to program
37:48 - all right
37:49 - uh combinations
37:51 - combinations
37:52 - from
37:54 - iter tools
37:56 - import
37:58 - combinations
38:02 - mnations as
38:07 - co b
38:08 - so now now what now what did i do so now
38:11 - i got
38:12 - now i just told you what this was
38:14 - now i changed it and added this all
38:17 - right so i've thrown up another keyword
38:19 - called as that's called alias aliasing
38:22 - so i'm bringing this in
38:24 - but before we had chain brought in chain
38:27 - right here
38:28 - well now i don't have to type like if i
38:31 - did this and do it as c
38:33 - chain would be called c so now
38:35 - combinations is called
38:38 - com okay so now when i do c o and b
38:43 - it has been aliased referred to
38:46 - nicknamed
38:48 - c-o-m-b
38:49 - all right so cool that's what that is
38:52 - so now letters
38:55 - a b c d e f
38:58 - g
38:59 - all right
39:02 - okay
39:03 - that caused a all-out war
39:05 - saying that i'm not going to talk about
39:06 - editors
39:08 - i'll see a few people left
39:12 - all right
39:18 - okay
39:19 - all right
39:22 - so oh i got sidetracked i know where i
39:25 - was talking about github so i know on my
39:28 - very on my current videos that get
39:30 - published it has a link to my github
39:33 - i have a running file of the free code
39:35 - camp dot p y
39:37 - and then i also
39:39 - throw in the notes of the day from the
39:41 - shell so you can see everything that we
39:44 - typed live or ran
39:46 - it will be dated today's date always the
39:49 - current date and then the free code camp
39:51 - dot p y it might be just fcc
39:54 - dot p y it that is the running um
39:58 - extension and i add to it and i edit it
40:01 - every time after class
40:04 - uh right now what we're doing is we're
40:07 - running through um
40:12 - we're running through the module itter
40:13 - tools we just did we got done earlier uh
40:16 - this morning going through
40:18 - a how to write a function to capture
40:22 - um uh chicken nugget combinations if i
40:26 - wanted 50 chicken nuggets
40:28 - how many combinations of each packaging
40:30 - quantity would i need so there we go
40:32 - that's that and then now we're on our
40:35 - third example or excuse me our third
40:37 - method
40:39 - for um
40:41 - intertools we're looking at combination
40:43 - right now
40:44 - and what we're going to do with
40:45 - combination is i want to see
40:49 - well i don't want to misspeak too fast
40:51 - all right x
40:52 - i want to run combinations
40:55 - of letters
40:59 - and if i spell right it's even my
41:01 - variable
41:03 - 3
41:04 - so all right so what am i doing
41:07 - should probably run
41:09 - help
41:10 - on commv
41:12 - okay
41:14 - very good documentation here
41:17 - all right so it takes in
41:20 - two
41:22 - two arguments
41:25 - an iterable
41:27 - and
41:28 - the quantity
41:30 - of the combinations from that interval
41:33 - so if i were to pass range
41:36 - three excuse me range four so that's
41:39 - zero one two three right
41:43 - then i want
41:45 - all i want all the combinations
41:48 - of three of those
41:50 - all right
41:53 - and
41:55 - there we go so now to kind of
41:57 - that is can be a little
42:00 - much to see from in my experience so
42:02 - that's why our example is going to be
42:05 - for
42:06 - uh letters
42:07 - so
42:08 - i want here's my
42:10 - here's my iterable it's seven letters
42:13 - and i want all the combinations of
42:17 - it's going to be this this this so let's
42:20 - just let's just do it so why and i'm
42:22 - going to print these out
42:25 - we're going to do list comprehension
42:27 - join
42:30 - i
42:31 - for i and x
42:34 - boom so this is making then another
42:38 - iterable of all the and i want to then
42:40 - join them and that's supposed to be dot
42:42 - uh now let's run this and see what in
42:45 - the world we get
42:52 - let's bring this in so we can see it
42:58 - and this is the example that i love to
43:00 - do
43:02 - there are 35 combinations so i want you
43:04 - to look at this
43:05 - so abc
43:09 - boom
43:10 - then
43:11 - a b
43:12 - d
43:15 - a b
43:16 - e
43:18 - a b so we're here we're here right here
43:21 - a b
43:22 - f then a b g
43:25 - then it moves over ac
43:28 - and it's a c d
43:30 - then a c e so all right does everybody
43:31 - see that
43:32 - so i have all i have this
43:36 - string
43:37 - i have an i have a string i have an
43:39 - interval and this iterable is a string
43:41 - and i want
43:44 - three of those with all the combinations
43:47 - and python has this wonderful algorithm
43:50 - that goes through and goes okay you just
43:52 - want three of these and you want all the
43:55 - combinations of
43:57 - an assortment of these three
44:00 - which happens to be strings
44:02 - so it's that's the first one and then it
44:04 - moves over
44:05 - and does the first two
44:07 - then it comes through
44:09 - and it skips over to
44:11 - c and d so then a
44:13 - c
44:14 - a and c say stay
44:16 - stay
44:17 - stationary then d e f and g as we can
44:20 - see we got
44:22 - here's here's a great example
44:24 - so i want to show you so it's a c
44:28 - and g
44:29 - so a
44:31 - c
44:33 - and g
44:34 - then it moves over to a
44:37 - d
44:39 - a d and e
44:41 - so boom
44:43 - boom boom
44:45 - so as it's going through because if it
44:47 - were to do any combination any other
44:50 - pattern than this it would have
44:51 - duplicates right so this shows you how
44:55 - to logically think about an assortment
44:58 - just like our combination and our wheel
45:01 - of flipping around like an odometer or a
45:04 - clock so all right
45:06 - it is 47 minutes after so it's time to
45:09 - make sure we're going down
45:11 - and buying a shirt a hat a cup i think
45:14 - there's a mouse pad something make sure
45:16 - we're supporting uh free code camp
45:20 - it is they're doing an absolutely
45:22 - awesome job all right
45:24 - so let's see
45:26 - all right
45:27 - okay we got 13 minutes let's see if we
45:30 - can fly through this because you guys
45:32 - i remember when i saw this one so now
45:34 - we're gonna do count
45:36 - who remembers next
45:39 - who remembers next
45:41 - yes you can watch this video after beau
45:43 - has this set up awesome thank thank you
45:46 - cardinal
45:47 - all right so from
45:51 - editor tools
45:53 - import
45:55 - count
45:56 - all right
45:58 - what in the world does count do
46:00 - it's so cool
46:03 - oh yeah let's just look at it count it
46:05 - or tools count help
46:08 - count
46:10 - it's so neat
46:14 - oh
46:15 - wait a second
46:17 - what is this
46:20 - okay
46:21 - first
46:22 - first value zero it's equivalent start
46:26 - step
46:27 - so oh
46:29 - look at this
46:31 - we know a double underscore
46:34 - next means this means that when we
46:36 - create an object a count object
46:39 - we can use next on it
46:41 - and here is the awesome thing about
46:44 - count
46:46 - every other time we have a generator
46:48 - object and we use we use next it is
46:50 - exhausted right it has a stopping point
46:53 - so
46:55 - a generator object has limitations count
46:59 - does not it literally just starts
47:02 - you will never run out so all right
47:04 - let's just let's just look at this
47:06 - so count equals one
47:11 - so now i put in
47:13 - i call
47:15 - i call x right
47:19 - so i still call x right
47:22 - x count stays one until i call
47:26 - next on it
47:28 - call next on x
47:31 - one but then it's done something
47:33 - now it's two
47:35 - they work together
47:37 - so if i want something to be counted and
47:40 - i don't want to have to keep up with it
47:42 - and i don't and i know i need to use
47:44 - next on it but i don't know where that
47:47 - ending is going to be
47:48 - like a list of
47:50 - customers a list of accounts
47:54 - i don't need it to end i don't want to
47:56 - have to go back and go oh my goodness
47:58 - kind of like what we did
48:00 - i doubt i doubt any of you remember but
48:02 - in 2000
48:04 - uh we had an issue
48:06 - where all of the
48:09 - birthdays nobody thought we'd ever ever
48:11 - run into um 2000 so all of the birthdays
48:15 - were basically built into 1900s
48:19 - so we had to go back and change
48:22 - everything so we set a limitation so now
48:26 - everything has been removed so this next
48:29 - is just like that
48:31 - so now when i call let's call x again x
48:35 - stays there until i call next on it
48:40 - and now
48:41 - x
48:42 - x is three and it just it just sits
48:44 - there and these work
48:46 - hand in hand so all right i think i got
48:48 - i got nine minutes let's see
48:50 - and then i gotta go i gotta i gotta get
48:52 - moving i got
48:54 - i got a lot i got a lot to do today so i
48:57 - hate that i hate that we only get an
48:58 - hour today but still and also probably
49:01 - gonna we're probably gonna be going to
49:03 - two weeks
49:04 - um
49:10 - okay
49:11 - chicken nugget problem
49:16 - many
49:16 - okay
49:17 - christian let's see for the chicken
49:19 - nugget problem uh we'll have to
49:22 - cardinal make a note of that question
49:24 - right there from christian and see and
49:28 - help me remember to look at it because
49:29 - we got nine minutes i want to try to do
49:31 - this
49:32 - different ascending so i was going
49:34 - through all the notes
49:35 - whenever i have
49:37 - so this
49:39 - was an awesome question that came up
49:42 - and it worked perfect
49:44 - for inter tools if i remember yeah
49:49 - so how in the world could you do a
49:51 - number pyramid because here's a perfect
49:53 - i love
49:54 - number shapes
49:56 - especially uh pyramids triangles
50:00 - uh diamonds it's an outstanding exercise
50:03 - for for loop understanding
50:07 - okay
50:08 - so how
50:11 - how in the world
50:12 - could we do this using the tools that we
50:14 - have
50:16 - very simply it's all right
50:18 - start
50:20 - equals oh we got to bring in our
50:23 - awesome toolkit
50:28 - all right
50:30 - so from iter tools
50:34 - import count
50:37 - so then count
50:41 - 1 by 2.
50:43 - so what what did
50:46 - did anybody notice what count does
50:49 - help
50:51 - help
50:52 - count all right
51:01 - okay
51:08 - so start or count it takes a start and
51:12 - step step is the iteration so we want to
51:16 - go every two so we don't have to handle
51:19 - we don't have to handle the spaces we're
51:21 - going to use the tools that we just
51:23 - added another tool to our toolbox
51:25 - then our num
51:27 - is going to be count
51:29 - we're going to start at 1
51:31 - count 1.
51:33 - all right
51:34 - so 4 i in range
51:38 - four
51:40 - then print
51:42 - this is one two three okay
51:45 - that looks right
51:48 - times 3 minus i
51:53 - i forgot how
51:54 - convoluted this was
51:58 - excuse me
52:00 - and
52:02 - all right so what does n do
52:05 - anybody remember
52:08 - all right i know i'm flying through a
52:09 - lot
52:10 - so what does inside the print oh that's
52:13 - not right and that's ugly
52:16 - that is absolutely not right this needs
52:18 - another parenthesis
52:21 - there we go and we check that yep i got
52:23 - it
52:24 - so what is my end equals
52:26 - uh empty string who wants to comment
52:29 - that puts it on the same line absolutely
52:32 - more correct it suppresses the ret the
52:36 - new line
52:37 - because the default for print
52:41 - right here
52:42 - shoot let me see
52:44 - yeah i think i got this sized right
52:48 - the default argument for end is a new
52:51 - line every time python runs
52:53 - unless we change it
52:55 - it's going to return to a new line
52:58 - didn't pass anything new line moved down
53:02 - so when i do
53:04 - this
53:09 - i get two lines
53:10 - so
53:12 - actually i've never done this so this is
53:13 - why i love
53:15 - if i then suppress it
53:18 - i'm back to getting one line
53:21 - so this automatically gives me an empty
53:23 - line so when i pass it a empty line i
53:26 - get two because the default is so i pass
53:29 - an empty line new line and i suppress a
53:31 - new line i'm back to one line so cool
53:34 - this is why i like doing these same
53:36 - examples over and over and over again
53:38 - because it makes me think it makes me
53:40 - better so you guys
53:42 - the question is look this is super
53:44 - important if you guys have a question
53:45 - ask it even if you kinda or if it's
53:48 - something you just learned ask that same
53:49 - question
53:51 - because somebody else doesn't know
53:53 - that
53:54 - that information
53:56 - all right
53:58 - how do do for
54:00 - j in
54:02 - range
54:04 - next this is where it gets cool
54:06 - next start
54:10 - boom
54:11 - boom
54:13 - print
54:14 - oops
54:17 - print
54:19 - next
54:21 - num
54:23 - then
54:24 - end
54:26 - and i need a space
54:29 - and i think there's one mistake in here
54:31 - i think it there i left it on purpose
54:33 - all right
54:35 - so we need to go
54:38 - this is it right here assume
54:42 - awesome
54:43 - so let's see what this does why why does
54:46 - this just run and
54:47 - taper off
54:49 - because i'm running through and i need
54:52 - to make sure that i have a starting
54:53 - point
54:56 - so there we go
54:57 - so all right
55:00 - well i think that is a great stopping
55:02 - point and but look you guys are asking a
55:06 - ton of good questions
55:09 - and i just want to again we got another
55:11 - 15 minutes went by just make sure we're
55:14 - supporting free code camp but look i
55:16 - just can't tell you guys this enough
55:19 - just keep programming just keep writing
55:23 - just keep asking questions
55:26 - there are a ton of ways and a ton of
55:28 - resources free code camp is a perfect
55:31 - example
55:32 - my channel fills a gap of the micro
55:36 - video if you can't find something i
55:38 - promise you
55:40 - it it has a simple small video on my
55:43 - channel every single one of these topics
55:46 - has its own video the chicken nugget
55:49 - example it's its own video you can go
55:52 - through
55:53 - some people uh love these long formats
55:56 - other folks want these small things when
55:58 - they're working on a project and they
56:00 - can't remember or don't know and it's
56:02 - fine but don't ever delete anything if i
56:05 - can tell you that i wish i would have
56:07 - heard that forever ago when i was
56:09 - starting to learn to program
56:11 - don't ever delete anything comment it
56:14 - out
56:15 - save it
56:16 - archive it however and also make notes
56:20 - in the side when i'm off here
56:23 - i go okay uh
56:25 - it's
56:30 - it's the starting
56:33 - point
56:34 - because look you're gonna come back a
56:35 - year later five months later two months
56:38 - later and go what in the world was i
56:40 - doing what did that mean
56:42 - make notes over here because look when
56:44 - you get skilled up and you're passing
56:45 - this on to somebody else you know what
56:47 - that variable means somebody else is not
56:50 - going to
56:52 - that's very clear if i were to have that
56:53 - as x
56:55 - nobody knows what does x do
57:00 - start is very clear it's the starting
57:02 - point and then you have a comment over
57:04 - here
57:05 - make sure you're making notes for
57:07 - yourself don't ever delete anything
57:09 - reach out ask questions be part of a
57:12 - group look
57:14 - this is already hard enough don't be on
57:16 - an island don't do this by yourself and
57:19 - always always always make sure you're
57:22 - filling up your toolbox with new skills
57:25 - new problems
57:28 - and then
57:29 - here's the thing that i love
57:30 - after you've solved a problem you're
57:32 - like i'm so big and bad i've done this
57:35 - i've done
57:36 - look
57:37 - this is garbage
57:39 - but it worked
57:40 - okay get it to work get some success
57:42 - under your belt i used to love hearing
57:44 - well you need to go get some confidence
57:46 - how do you go get confidence
57:49 - you go get successes i want you to go
57:51 - get successes i want you to go learn how
57:53 - to do a problem solve the problem
57:56 - go back
57:57 - do it a month later solve it again you
58:00 - know what you're going to write better
58:01 - code
58:02 - i remember if you guys haven't seen the
58:04 - ones that i showed you about prime
58:05 - numbers go go look at the live stream
58:07 - that i did on free code camp i showed
58:10 - you the iteration of how i did it the
58:12 - first one that i did
58:13 - was disgusting
58:15 - but it worked
58:17 - but it was what the skills that i had at
58:19 - the time
58:20 - i used what i had at the time
58:23 - and then
58:24 - then i got more skills
58:26 - then i filled up my toolbox and i went
58:28 - from there so all right
58:30 - that's my little rant for
58:32 - the day
58:34 - but
58:34 - two weeks i don't think i'll be able to
58:36 - be back in town for next tuesday uh does
58:40 - not look that way right now so i don't
58:41 - want to i don't want to set it up and
58:43 - cancel it because we might be going to
58:45 - one every other week so let's plan on
58:47 - that
58:48 - but
58:49 - please please please guys make sure
58:50 - you're going and checking out my channel
58:52 - down below seeing if there's anything
58:54 - there that i can help you with uh join
58:57 - our discord buy some free code camp
59:00 - merch make sure you're helping them out
59:02 - make sure you're subscribed
59:05 - and join their awesome organization i
59:07 - love
59:08 - the opportunity to be able to do this
59:10 - it really truly
59:11 - is is an honor so i appreciate beau and
59:14 - quincy
59:15 - they are doing some phenomenal work
59:17 - all right guys i'm heading out today
59:20 - uh thanks as always make sure you're
59:22 - liking subscribing sharing um and
59:25 - helping out somebody look if you want to
59:27 - get to be a better programmer
59:30 - go go show somebody something you've
59:32 - learned
59:34 - it'll
59:35 - it'll cement your understanding sorry
59:37 - guys thank you as always and uh i will
59:40 - see you in two weeks bye everybody