00:00 - Florian from neuro nine has a popular software 
YouTube channel. And in this course he will  
00:04 - teach you how to use the VIM code editor. What is 
going on guys? Welcome to this vim course on Free  
00:09 - Code Camp. In today's video, I want to guide you 
through a full vim course from beginning to end  
00:13 - step by step. And I want to start out with some 
basic motivation, talking about why to use Vim,  
00:18 - what vim actually is, and also showing you a 
preview of what vim can look like if you have some  
00:23 - plugins installed and all that. And I want to do 
so because I think for a lot of people out there,  
00:27 - VIM is this boring feature list text editor that 
you have. In the Linux command line. If you don't  
00:31 - have any alternatives on a server, for example, 
you use Vim, otherwise, you don't use Vim,  
00:36 - and a lot of people don't even know how to exit 
Vim and all that. So we're going to talk about all  
00:40 - this why you should use Vim, why learning vim can 
be important and interesting. And then we're going  
00:45 - to move on to the installation to finding the 
installation that you already have to installing  
00:51 - vim on Windows. For example, if you don't have 
it installed natively, we're going to talk about  
00:54 - that. And then we're going to get into some basic 
key bindings commands into more intermediate key  
00:59 - bindings commands to more advanced key bindings, 
commands and so on. Then we're going to talk about  
01:04 - macros and registers. And in the end, we're going 
to wrap up with plugins and neovim. So we're going  
01:08 - to talk about how to build an actual sort of 
IDE or at least an advanced editor something  
01:13 - approximating VS code, or even better using 
plugins and Neo Vim. So let us get right into it.  
01:20 - Alright, so let us get started with the 
motivational part where I'm going to show you  
01:23 - or explain to you why using vim can be interesting 
to you. And I'm not going to talk too much here,  
01:28 - I'm just going to show you my setup and what I can 
do with it. And then you can decide if you think  
01:32 - that's interesting or not. But before we get into 
that, I want to mention that this box down here  
01:37 - is showing you what keys I pressed. So right now 
I'm in the terminal, and I can type ABC, and you  
01:41 - can see that I'm typing ABC up here. But you can 
also see what I'm typing down here. And you can  
01:46 - also see that if I press backspace, for example, 
this is also locked here. And if I press Enter,  
01:52 - it is also locked. So whatever I press, whatever 
I type, you can see down here on the right,  
01:56 - this is important because a lot of times when 
I do something in Vim, you're going to see  
02:00 - certain effects, but you don't really see what I'm 
pressing. So here on the right, you can see what  
02:04 - kind of keys I'm pressing in order to do certain 
things. And I want to show you first of all, would  
02:10 - probably most of you know VIM is or no vim looks 
like or think about when they think about Vim,  
02:16 - and this is essentially just a VI command. So VI 
and opening a file, I have prepared a C file here  
02:22 - clients dot c. And when I opened this, this is 
what probably most of you know s Vim, just a basic  
02:27 - text editor here, you don't even know how to leave 
it, probably, you don't know what to do with it,  
02:32 - you don't know how to type with it, maybe you 
know how to type in how to leave. But that's  
02:36 - it. This is not what I'm using on a daily basis. 
When I talk about using vim on a daily basis,  
02:42 - what I'm using is new vim with a couple 
of plugins. And with my custom settings,  
02:46 - indented can look like that. So in vim clients see 
in this is what it can look like. In the end, this  
02:53 - is just a motivation. Whatever I show you, you 
don't need to understand to get I'm going to show  
02:57 - you maybe some key bindings, I'm going to show you 
some plugins, you don't need to understand them,  
03:01 - I'm just showing you what you can do here. So 
first of all, you can see a different theme,  
03:04 - you can see a different airline on the bottom 
here. So status bar, you could say I can open  
03:09 - up a file tree on the left here, I can navigate 
through directories here, I can go back here and  
03:16 - I can open up the tag bar, which is essentially 
showing me the functions, I can use my mouse to  
03:20 - jump to certain functions. And since this is C, I 
think I'm also able to open up the manpages here,  
03:28 - not sure if that works or how that works. 
There you go, you have the manpages up here.  
03:33 - So this actually doesn't look like a terminal 
editor anymore. DISA looks like VS code in a  
03:38 - different style. And the difference here is, 
of course, also that this is not, this is not  
03:44 - one editor to to download, and it always looks 
like that. And you can change the theme. This  
03:48 - is my custom editor, I decided that I want to 
have a tab bar, I decided that I want to have  
03:53 - this file tree here, I decided that I want to be 
able to open up terminals by typing terminal split  
03:59 - bash, I decided that I want to be able to do that. 
There you go. And I can also decide to uninstall  
04:06 - these plugins and I can decide how I want to 
have my editor. It's completely customizable.  
04:11 - And I do all of that. So that's the editor itself. 
That's the customization. What I can do now is I  
04:18 - can use so called vim bindings, which we're going 
to learn about to do things more efficiently. For  
04:22 - example, let's say I want to delete everything 
that's in between this, this curly bracket  
04:27 - here and this curly bracket. How I would do it in 
ordinary text editors. I would go select that and  
04:33 - delete this. What I can do here in VIM is I can 
let's say I'm here, for example, at this point,  
04:38 - what I can do is I can just say delete inner, and 
then we're actually in this case, we need to do it  
04:45 - here, delete inner curly brackets, and then it 
does that. Again, you don't need to understand  
04:50 - the key bindings yet. We're going to learn about 
them. I just show you what I can do here. Well,  
04:54 - let's say I'm here I don't I want to delete 
for example the next three words so static int  
04:59 - get in Next, I want to delete them, I can just 
type D, three W, there you go. I can undo here,  
05:06 - I can do all sorts of things, I can just 
cut and paste using using the keyboard  
05:11 - without using the mouse in any complicated 
ways here, I can also do something like  
05:18 - I'm here, I want to change everything inside 
of the parentheses, I can do it like that.  
05:22 - So a couple of small things that you might 
think first of all, are maybe complicated or  
05:28 - not really relevant, because who cares if 
I can delete the word by typing ci w, or  
05:34 - by by just selecting it with a mouse, but the 
fact is that I personally can say for my for  
05:38 - my experience that I have enjoyed a huge speed up 
in my coding speed. So I think that I'm at least  
05:45 - 300% faster, because you don't have to 
use the mouse most of the time. And even  
05:52 - when using the keyboard, you can do things so 
efficiently. And right now you might think,  
05:56 - okay, but typing certain characters to change. For 
example, text inside of parentheses, isn't this  
06:02 - kind of confusing. And it isn't in the beginning 
in the first place. It's confusing, but then as as  
06:07 - you train using vim minutes, you use it on a daily 
basis, at least the key bindings, you get used  
06:12 - to it, and then all of a sudden, things get quite 
quickly. So for example, I want to change the loop  
06:17 - here. I'm working right now, I don't even think 
about it. I just typed CI parentheses, of course,  
06:22 - not in the insert mode, ci parentheses, and there 
you go, I changed this. Or, I don't know I want  
06:29 - to change the line here. CC, I changed the whole 
line. I typed something else, whatever it is. So  
06:35 - using Vim, first of all allows you to create your 
own Neo vim setup if you want to stick with Vim,  
06:40 - but you can also use Vim, not only in Vim. Vim 
bindings are supported by a lot of different  
06:45 - tools. So you can use Vim bindings via plugins 
in the JetBrains IDE, so you can use it in  
06:50 - or use Vim bindings in VS code. You can use them 
in Jupyter Notebooks, you can use them in Overleaf  
06:56 - in our studio in all sorts of applications. You 
can use Vim bindings, they're supported, you don't  
07:01 - have to stick to the terminal. If you don't like 
using Terminal editors, you can go with PI charm,  
07:05 - IntelliJ, whatever you want to use, and you can 
use Vim bindings, and I guarantee you, if you  
07:10 - train them, they're going to speed up your coding 
speed, or they're going to increase your coding  
07:14 - speed. So this is my motivation for now. And 
now we're going to talk about the installation.  
07:19 - Now when it comes to the installation, it all 
depends on what kind of operating system you're  
07:23 - working on. If you're working on Linux or Mac, 
you probably have them installed already. Or  
07:27 - at least you have the eye. The differences 
in vim means vi improved. So it's a more  
07:31 - recent version, a more improved version, and 
you can see if you have it by just typing VI.  
07:36 - And if you see here, vim vi improved, you have 
them installed and also bound to VI. Otherwise,  
07:42 - you can try to type Vim, and maybe then it says 
Vim, and then you know we have it installed,  
07:47 - if it only has VI and it doesn't show you that 
it's vi improved. So Vim, what you want to do on  
07:53 - Linux and Mac is you want to use your package 
installer to install Vim, so on Debian based  
07:58 - distributions, for example, sudo, apt install, 
and then Vim, or on Arch based distributions,  
08:04 - Pac, man, s, Vim, and so on, and so forth, 
depending on your operating system, and then  
08:10 - you have it in your terminal. Now on Windows, 
things are a little bit different. So you can  
08:15 - go to the PowerShell. For example, you can 
install it via the PowerShell and inside of the  
08:18 - PowerShell. So then you have an actual terminal 
editor, Vim, you can install it via G Vim, so  
08:25 - just download the graphical user interface to 
Vim, or my preferred way of doing it is using  
08:30 - the Windows subsystem for Linux. So actually 
running Linux inside of Windows, not with a  
08:34 - virtual box, but with a Windows subsystem 
for Linux, which is provided by Microsoft.  
08:39 - So you just go to the store, you download it, 
you install it, you can watch a tutorial on  
08:42 - that I'm not going to make one here because 
this is about Vim. But you basically install  
08:46 - the Windows subsystem for Linux, and then you 
follow the Linux steps. So just sudo apt install.  
08:52 - And then Vim. So this is how you install it. 
That's it for the installation part. Now we're  
08:57 - going to start with the basics. Alright, so let 
us start working with Vim, the first thing we  
09:02 - want to do is we want to open a file. And for that 
we just type VI or vim depending on your aliases,  
09:08 - and then a file name, for example, clients dot c, 
which is the file from before. Now in this case,  
09:13 - VIM is going to open the file for editing, we 
can change some stuff, we can save it, we can  
09:18 - dismiss changes, and so on. If we type some 
file name or some file path that does not exist,  
09:23 - what's going to happen is that we're going to 
create a new file. So if I type not client C,  
09:28 - but something like test dot txt, this is going 
to create a new file, this is going to open a  
09:32 - blank file, and once I write the changes to the 
file, this file is going to be created by Vim. So  
09:38 - let us start now with client dot c, and the first 
question that most people have when they enter VIM  
09:43 - is how do I get out of it? So I'm going 
to tell you that right away, all you need  
09:47 - to do is you need to type colon, Q, and then 
enter. Now the problem is that most people try  
09:55 - a lot of things before actually being able to 
to get some help. or someone who tells them  
10:01 - how to leave Vim, so they open up a new file 
test dot txt, and they just press 1000 keys,  
10:08 - they don't know what to do, and all 
that. And then someone tells them, okay,  
10:14 - press colon Q, and then you're going to leave 
Vim. However, this is not going to work here,  
10:18 - because if I press colon, Q, enter, you can 
see that it says no rights since last change  
10:23 - at exclamation mark to overwrite. So essentially, 
all you need to do in this case is you need to say  
10:29 - Q and then exclamation mark. And this is because 
you want to say, with this exclamation mark,  
10:34 - you're saying quit, but also dismiss any 
changes that I make. So if you make any changes,  
10:39 - you cannot just quit them, it's not going to 
allow that you have to say, Okay, I ignore all the  
10:44 - changes. Just forget about those. There you go. 
The important thing is here, that you don't type  
10:50 - exclamation mark Q, but Q exclamation mark. 
And reason for that is that when you type  
10:56 - exclamation mark, and then something this is 
a terminal command. So for example, I can say,  
11:02 - I don't know what can I do ls, for example, 
this is going to give me the ls command  
11:07 - from the terminal. And if I type exclamation mark 
Q, this is not going to quit. This is just going  
11:13 - to execute a command that is not known because 
Q is not a command. So if you want to leave you  
11:18 - just type Q and then exclamation mark, if you want 
to dismiss the changes. What if you don't want to  
11:23 - dismiss the changes? Let's say I want to open 
a test dot txt, and I want to write something.  
11:27 - First of all, how do I write something because 
by default, if I press for example, the key D,  
11:33 - we don't write ds, and also C, we don't write C's. 
Okay, now we write C's. But if I press C once we  
11:39 - don't write C's. So why is that? And how can we 
start typing some text. In order to understand  
11:45 - this, you need to understand that vim works with 
so called modes. So when we open a new file, we  
11:50 - are in the normal mode, or when when we enter Vim, 
we are in the normal mode. And in the normal mode,  
11:56 - every key has its functionality. For example, the 
colon key starts a command. So if I want to type a  
12:02 - command, like quit, for example, or write or doing 
something, or setting something, I need to type  
12:08 - colon and then whatever I want to execute, and 
then I press enter to execute that vim command.  
12:13 - So the colon, the colon is actually what I press 
in order to execute a command in the normal mode,  
12:20 - because if you're in a different mode, keys have 
different functionalities. But in a normal mode,  
12:24 - if you type colon in something, you execute a 
command, once you press enter, and other key,  
12:30 - like D, for example, is for deleting or A is for 
appending, and so on, and so forth. We're going  
12:35 - to talk about those. But the first thing you 
need to know is that I enters the insert mode,  
12:41 - if you press the letter i or the character I, what 
happens is you get into insert mode, you can see  
12:47 - here down on the right I pressed I am now in the 
insert mode, which you can see here on the bottom  
12:52 - left. Insert mode means that whatever I press now 
doesn't have a functionality, but it's just text.  
12:57 - So I can write stuff here. I can also press I 
don't get into another insert mode, I can press  
13:04 - colon, I don't get into command mode, insert 
mode means that I can type text. Now if I want  
13:09 - to leave the insert mode again into the normal 
mode, I press escape. So by pressing Escape,  
13:14 - we leave the insert mode, and we get into 
normal mode. And now again, if I type colon,  
13:19 - I have a command. And if I type I enter the 
insert mode escape, get out of it again,  
13:24 - and so on. And now we have some text, let's say 
I want to save this. First of all, if I'm in the  
13:29 - insert mode, I need to get out of it by pressing 
Escape. And then I can say colon W, which is four,  
13:35 - right. So if I want to write changes into 
a file, I press W and I can press enter,  
13:41 - like that. And you can see that these 
characters were written into the file.  
13:46 - However, I can also do right and quit. So for 
example, let's say I change something here.  
13:51 - And I want to say quit and it says no, right 
since last change, I can override it with the  
13:55 - exclamation mark again, I can also do wq so 
write and quit. And this case it writes the  
14:01 - changes into the file, it also quits so I can go 
ahead now and open the file again. And you can see  
14:08 - that all the changes are still in the file. So 
this is how you can do basic stuff in vim this  
14:13 - is how you get into the insert mode and this 
is how you get out of the insert mode into the  
14:18 - normal mode. Now, each character as I already said 
has different functionality or has a different  
14:25 - functionality. So the insert mode basically means 
or I basically means I enter the insert mode,  
14:30 - but there are multiple keys that entered the 
insert mode for example another one would be eight  
14:34 - eight also insert enters the insert mode or oh oh 
can also enter the insert mode. The difference is  
14:41 - how they entered the insert mode for 
example, let's say I have here 123456789  
14:50 - And I'm focusing on a five here my cursor is above 
the five and I press I would you can see is that  
14:56 - I if I type a now the eight is placed between 
Forehand five. So when I press, I go before the  
15:03 - cursor before the actual focused number, if I'm 
focusing to five, and now I press a instead of I,  
15:11 - I focus on a six. So if I type an A now, you 
can see that the A ends up between five and six.  
15:18 - And if I type, oh, I open a new line below that 
line, and then I enter the insert mode. So for  
15:26 - example, I'm up here, and I press O, this creates 
a new line, and I'm in insert mode. And I don't  
15:31 - have to be at the end of the line. So it's not 
like saying enter. Because when you say enter,  
15:36 - you just go to the end of the line, whatever. 
Press enter, you also open a new line.  
15:41 - It's not the case here, what's the case, here's 
the wherever I am in the line. So even here,  
15:47 - I press O, it opens a new line, 
and I'm in the insert mode.  
15:51 - So we have i for inserting before the cursor a 
for inserting after the cursor, so appending,  
15:57 - an O for opening a new line or for creating a new 
line below the line. Now, these three characters  
16:03 - can also be used with the shift key in order to 
have a capital letter. So capital I capital A and  
16:09 - capital O. And the functionality here is a little 
bit different. So for example, if I'm focusing  
16:15 - to five, and I type shift I or a press Shift I, 
this enters the insert mode at the beginning of  
16:23 - at the beginning of this light, so the A 
is here, no matter where I am. So even if  
16:29 - I have multiple words here with spaces and all 
that, if I'm somewhere in the middle here and I  
16:34 - press capital I, what you see is I jumped to the 
beginning of the line, and then I typed here, the  
16:40 - opposite happens with capital a capital A goes to 
the end of the line pens to the end of the line,  
16:48 - and enters D insert mode. And capital O doesn't 
open a line below the current line, but above like  
16:54 - that. So if I'm here at this line, and I press 
capital O, it opens the line above and enters  
17:00 - the insert mode. So those are the very basic 
changes how you can change from the normal mode  
17:05 - into the insert mode. And from the insert mode. 
Normal mode, you always press escape, basically,  
17:10 - this is how you can do that. Now before we 
move on to other key bindings, I want to  
17:15 - talk a little bit about settings here because 
you can see that this is really not an attractive  
17:19 - editor. And it's not going to be without plugins, 
it's not going to be an attractive editor. But  
17:24 - what can make it more attractive. So first of 
all, what I like to have is some line numbers,  
17:28 - if you want to have some line numbers in them, 
which do is your type colon set, and then blank or  
17:35 - whitespace number. Set number basically activates 
line numbers. So if I press enter, now you can see  
17:42 - that we have line numbers on the left. Now, one 
thing that you're going to see in vim as we go on  
17:49 - over time, is that line numbers are actually not 
line numbers. But numbers can be used to combine  
17:56 - key bindings, a very basic example we're going 
to talk about more examples. A very basic example  
18:01 - is that each action can be repeated x times. So 
for example, if I press the key down so that the  
18:06 - arrow key down, I move one line down. But if I 
type five, and then arrow key down, I move five  
18:13 - lines down, I can do the same thing with up. So 
seven up goes seven lines up. And in this line,  
18:19 - I can do it with left and right. So let's say 
I'm here, I can say 15, right, and a jumps 15  
18:24 - characters to the right. By the way, one thing 
that I want to mention here as well is that and  
18:28 - this is something where I'm not actually doing the 
usual thing that you do as a vim user, especially  
18:34 - as a hardcore vim user. This is the part where 
I'm probably too soft. I'm using the arrow keys,  
18:40 - just because I don't type with 10 fingers yet. But 
what you can do in VIM is you can use the h, j,  
18:47 - k and l key instead of the arrow 
key. So k goes up, J goes down,  
18:53 - H goes left and L goes right. So essentially, 
the idea behind that is not some arbitrary keys,  
18:59 - those are four keys in a line. And essentially, 
the reason for using those keys instead of using  
19:05 - the arrow keys is that you don't have 
to leave the main keyboard space. So  
19:11 - VIM is all about optimizing your typing speed 
your coding speed. So you want to type as fast as  
19:16 - possible, you want to use 10 fingers up optimally, 
I'm not doing it but you want to use 10 fingers.  
19:21 - And you want to leave this space as Selim least 
possible, you don't want to go to the mouse,  
19:26 - you don't want to go to the arrow keys, you want 
to stay there. And this means that you're going  
19:30 - to have to use J, K, L and H in order to move 
around instead of the arrow keys. But again,  
19:34 - I'm not doing that usually. So you can do that 
better. But again, these numbers can be combined  
19:43 - also with the J and K. So if I go if I type 
K It goes one up. If I type for K it goes for  
19:49 - up. So you can combine numbers with key 
bindings in order to to repeat them.  
19:54 - Now why am I telling you that because this 
happens quite often and a setting there is  
20:00 - certain settings that you can use in order 
to make this easier. With some key bindings  
20:04 - in this setting is called relative number. And 
not everyone is going to like it, I'm probably  
20:10 - I'm pretty sure that most of you who don't use 
Vim or haven't used them yet, you're not going to  
20:14 - like the setting, but it is quite useful in this 
setting is set relative number. And essentially,  
20:22 - instead of getting the absolute line numbers, you 
get the relative line numbers to the current line.  
20:26 - So for the current line, you see that you have the 
line number for so you get the actual line number.  
20:31 - But for the other lines, you get the 
relative line numbers. So you can see this  
20:35 - line number here or this line here, it's 
five lines away. So if I type five, down,  
20:41 - I jump to that line. And this can be quite useful 
because this can be combined with deletion, this  
20:46 - can be combined with with pasting, with copying, 
and so on. And we're going to talk about this  
20:53 - as we go on here. But this is just something that 
you can activate if you want to you don't have to.  
20:58 - But you can use the Set relative number setting 
here. Or you can just use the set number setting  
21:03 - without the set relative number setting. And 
we can do a couple of different things. So  
21:07 - by default, for example, I cannot use the mouse 
here, if I want to use the mouse, I have to set  
21:11 - the mouse to active so set mouse equals a. And 
then I can press around here I can also scroll.  
21:18 - Other things would be for example, setting the tab 
stop to four, setting the shift with to four and  
21:26 - so on or choosing a color scheme. So color schemes 
late for example, you can just type color scheme  
21:32 - and then tap to see the different color schemes 
that we have here. And then you can pick one,  
21:37 - enter, and you can change the color scheme. 
Now, before I show you too many commands here,  
21:43 - what happens when I close this year, what's right 
and close. What happens is I open them up again.  
21:50 - And all the settings are gone. So you can type 
whatever you want, you don't have the settings.  
21:54 - So if I type set number, and I leave and I open 
it up again, I don't have the numbers anymore.  
22:00 - And of course, if you have like 20 settings, you 
don't want to set them all the time every time you  
22:05 - open them. So you want to have a settings file a 
configuration file that does it for you. And for  
22:10 - that you have the VIM rc file, which is located 
at the following place you go to, or actually I'm  
22:16 - not going to see D there. I'm going to I'm going 
to vim there, so I'm going to go with vim there,  
22:20 - which is the user directory and then slash dot 
vim RC. Now, this is the file, this is the path.  
22:28 - So vim recognizes that path User Directory slash 
dot vim RC. If the file is there, vim loads it,  
22:34 - or VIM is going to open it. If it's not there, you 
created in VIM is still going to load it. So we're  
22:40 - going to open up the VIM rc file, in this case, 
we don't have it, it's a new file, we're going  
22:44 - to enter the insert mode. And I'm just going to 
right here a couple of settings, Set number, set,  
22:52 - relative number, set, tap stop equal to 
four cent shift with equal to four set auto  
23:04 - in dents. Um, I think most of them, except for 
the for the first two are self explanatory,  
23:12 - then set mouse equal to a and color scheme, slate, 
for example. So colon, W, colon, wq, whatever.  
23:23 - And then I can open up now again, the VIM 
dots or the test dot txt file. And you can  
23:29 - see that I have the settings loaded, I have the 
relative line numbers, I have the line numbers,  
23:33 - I have the color scheme. And I have also the shift 
with and the tabs tab, which we cannot see here.  
23:39 - But this is how you do it. You can create this vim 
rc file or change this vim rc file every time you  
23:43 - want to change and change something. For example, 
if I say I don't want to use this anymore,  
23:47 - I want to use something else. I can delete the 
color scheme and go with what do we have here  
23:53 - was Delic? Was that a color scheme? I'm not 
sure. Yeah, or No, actually not color scheme.  
24:02 - Delock, it was a color scheme. Okay. Whatever, you 
can change this conflict file however you want.  
24:08 - I like to use slate from the default themes. Later 
on, we can install some with plugins. But those  
24:13 - are the very basics, opening files, closing files, 
writing to files, entering into the insert mode,  
24:19 - leaving the insert mode back into the normal 
mode, and then also having some basic settings  
24:23 - moving around. And those are the very, very basics 
of them. Alright, so what we're going to do now is  
24:29 - we're going to look at a lot of vim key bindings 
and vim key functions. And this can be quite a  
24:33 - lot of information to digest for a beginner. 
And it might be frustrating and confusing,  
24:37 - because you're not going to remember everything at 
once. I'm going to show a lot here. You don't have  
24:42 - to remember everything at once. What I recommend 
you do is you watch the whole video and then once  
24:47 - you start training them, you go to Google and you 
type vim cheat sheets, or BIM cheat sheet and then  
24:53 - you look for a cheat sheet that has a couple of 
the things that you want to train for example,  
24:58 - I think this one is quite good here. from Phoenix 
and AP, we're not affiliated. And essentially,  
25:04 - you can see here moving, inserting, editing, 
copying, cutting, pasting, marking, and so on.  
25:09 - You have the basic commands two basic key 
bindings here and you can train them you don't  
25:13 - have to remember them here from the video, this 
video was for an overview you can play around,  
25:17 - you can learn the things, but you don't have 
to remember everything by watching this video.  
25:22 - So we're going to start out with the key 
bindings here, let's open a file again,  
25:26 - not in Vim, we're going to use the eye test dot 
txt again. And now we have the text that we have  
25:32 - here. First of all, let me show you some basic 
keys like undoing and redoing, let's say you write  
25:38 - something, we're going to use o to open a new 
line here in the insert mode. And I type hello,  
25:43 - world, for example, I use Escape to go back to 
normal mode. If I want to undo this right now,  
25:48 - what I have to do is I cannot do Ctrl Z because 
Ctrl Z in the terminal gets you out of out of  
25:56 - the process. So it puts it into the background. So 
you don't want to do that you want to type you so  
26:01 - just pressing the key you in normal mode uninduced 
that. So you can see down here it says okay, this  
26:07 - happened 23 seconds ago, we have two fewer lines 
now. And this basically undid the action. Now if I  
26:14 - want to repeat the action, so if I want to redo 
the action, what I do is I press Ctrl R Ctrl R  
26:21 - reduce, and you undo, so Ctrl R redo. Now let's 
add a couple of things here, a low then maybe what  
26:32 - then inserting again here is going to 
normal again, up question mark going  
26:38 - into normal again. Now I can press u u, u u 
u, or Ctrl R R or Ctrl R Ctrl R Ctrl R Ctrl R.  
26:48 - And what I can also do is remember we can combine 
numbers and commands I can also say three you to  
26:53 - go three, undo back or three reduce. You can see 
again here what I'm typing. Or I can say five you  
27:02 - for five undo. And of course, if there are no 
undo to do any more, you can see already at all  
27:07 - this change. And I can do Ctrl R already newest 
change. So this is basic undoing and redoing.  
27:16 - Now what's also interesting is, this is now not 
related to undoing and redoing is this is a third  
27:21 - mode we introduced here because this can be quite 
useful. We know now that we have an insert mode,  
27:26 - and we also know that we have a normal mode. 
So insert again, we entered with either a or  
27:31 - O. And we can leave that with escape. But there's 
also a third mode called the visual mode in the  
27:37 - visual mode is for selecting. Now let's say for 
example, I'm here now and I want to select this  
27:43 - this second word here, even though it's 
not a word, what I can do is I can press  
27:46 - V for visual mode, you can see down here it says 
visual. And now if I go right, I select the word.  
27:53 - And now I can do certain things with that word, I 
can delete it, I can copy it, I can cut it, I can,  
27:59 - I can do a couple of things with that word. So 
now I have selected it. If I want to delete it,  
28:04 - what I do is I press d, d is the deletion key. So 
if I press D, it deletes something, I can undo it  
28:12 - again now with you. And I can also of course, if 
I'm in the visual mode, I can just press escape,  
28:17 - in this case twice, to to leave the visual 
mode. So again, selecting this D deletes it.  
28:25 - And I can also select just a couple 
of characters use D deletes dopes.  
28:30 - Now if I want to copy, so I can also take 
that and press Y, Y is the key that we use  
28:36 - for yanking this is what it's called in 
Vim. And yanking means copies of a press  
28:41 - why it says or doesn't say anything, but 
it copied them. And now I can go down here,  
28:46 - for example, I can press P, and it enters or it 
inserts it pastes basically what I yank before  
28:53 - and I can do that a couple of times, I can press 
P, P, P, P, P, or I can also press of course  
28:59 - 1010 P, there you go. And I can undo all that 
again. So every command almost every command,  
29:08 - every key can be combined with a number and 
then it's going to be repeated. So again,  
29:12 - let's select this here with visual mode, live for 
yanking and then for P for pasting it four times.  
29:20 - And then again, I can also select all of this 
year and just press D in order to remove it.  
29:26 - Now, these commands here or DS key bindings can 
be used in different ways. So y is for yanking  
29:33 - D is for deleting and P is for pasting. And I 
can use them in different ways. So for example,  
29:39 - I can select something and I 
can say D as we did before,  
29:43 - or I can just press D D to delete the whole line. 
So undo again, DD deletes the whole line dd,  
29:51 - dd dd. And of course again, if I go up here, for 
example, and I say five DD, it deletes five lines.  
29:59 - There you go. same can be done with copying in 
this case doesn't make a lot of sense to to copy  
30:05 - multiple times, but I can copy full line. So not 
just selecting and copying, I can yank a full line  
30:11 - by going, why why and why why yanks to 
full line, I can go down here and say  
30:15 - p. And then I can say also five p and it 
adds these five lines with line breaks,  
30:21 - because I yank the whole line. So also the line 
break. That is that, what else do we have, I can  
30:30 - use paste in the uppercase way. So I can also this 
is the same as Oh, uppercase O and lowercase o,  
30:36 - if I copy, let's say this line here, and I now say 
P, it's pasted below the one if I say uppercase p,  
30:44 - it goes above that. And of course also, if 
I if I copy just a word without, without  
30:50 - these newline characters, I can press P to paste 
at the end of the setup at the end of the of the  
30:58 - cursor and I can paste I can press capital P to go 
before that. So same thing as I in a essentially.  
31:08 - So that is that now sometimes would want to do 
is we don't want to delete a line, we want to  
31:14 - change a line. So the difference between deleting 
and changing is not too much. It's essentially  
31:19 - the same thing. But the difference is that we 
entered the insert mode when we change. So if  
31:24 - I just want to delete this line, I press DD and 
the line is gone. If I want to delete the line,  
31:29 - but also change it, so I want to change what 
the line is I press C C. And this changes the  
31:35 - line so you can see the lines not vanished. I'm 
in insert mode. And I can type some stuff here.  
31:39 - So CC enters the insert mode, and doesn't delete 
the line. Whereas DD deletes default line here.  
31:46 - And C can also be used in the visual mode. 
So I can select for example, here the world.  
31:51 - And I can press C. And you can see I'm still in 
insert mode, and I can type. Whereas if I select  
31:56 - this and I type D, I leave the visual mode, 
I'm in normal mode and not in insert mode.  
32:01 - So those are the differences. And we can also 
use the uppercase characters so I can type.  
32:09 - For example, if I'm here now and I press uppercase 
D, this deletes the rest of the line, not the full  
32:15 - line if you want to delete the full line again, 
dd, if you want to delete just a part of the line,  
32:19 - namely the last part from this cursor up until the 
end, capital D deletes the rest of the line. And  
32:26 - capital C changes the rest of the line. That is 
that, but I think uppercase Y as far as I know,  
32:33 - copies the full line. Yeah, uppercase Y doesn't 
copy the rest of the line, but the full line. So  
32:38 - uppercase Y is essentially the same as why 
why that is Dan dat and last but not least  
32:44 - when it comes or last, last but not least for the 
deletion. And replacing is actually the replacing  
32:51 - character, which is r. So let's say I'm here with 
hello and I want to change the H what I can do is  
32:56 - I can just press R and R means replace. And if I 
now press K, you can see that it says Kelo instead  
33:03 - of Hello. Now what's what's what's the purpose of 
that the purpose is just that I can use the R key  
33:09 - and I don't have to delete and then enter a new 
character because an ordinary editor's would you  
33:14 - do is you go into the insert mode, or you don't 
go into the insert insert mode, you already have  
33:18 - the insert mode, you delete one character and 
you replace it. So I delete the H and I press  
33:23 - the key to enter it in Vim, I can just press R and 
then H to change the key to an H. So that's that.  
33:32 - Now all these things like deleting, changing, 
copying, and so on can be used more efficiently if  
33:38 - we have some keys, or some key functions that 
allow us to move in an advanced way. And this  
33:43 - is what we're going to introduce next. Let's say 
we have a simple sentence here. Low I am a simple  
33:50 - sentence period. What I can do now is of course I 
can use the arrow keys or H J K L to move around  
33:57 - here. But what I can also do is I can jump words 
for example. So this is this is something I can do  
34:04 - in in vim I can jump words forwards and backwards. 
So if I'm here, I can just press W to jump to the  
34:10 - next word, I can press W again to jump to the next 
word, and so on and so forth. I press W and it  
34:16 - jumps to the next word. Essentially word meaning 
I'm not sure what the exact definition is, but as  
34:21 - far as I know word means either a space or some 
special character in between. So I think if you  
34:26 - have something like Hello, I am a simple sentence 
even though we don't have a blank here does should  
34:36 - I think no in this case it doesn't consider 
that as multiple words but I think if we have  
34:43 - now I'm using by the way the are to change 
the individual characters here. I think that  
34:48 - if I use hyphens as hyphens as you can see, 
those are considered to be individual words.  
34:54 - However, if I go into use uppercase w, this 
is one word. So if I have something here.  
35:02 - Uppercase W says this is one word. And those are 
individual words. So the basic difference is that  
35:08 - if you use uppercase w you jump, or a word is 
considered to be something that is separated by  
35:15 - by spaces. So if there's no space, it's considered 
to be one word, whereas the lowercase w considers  
35:22 - also stuff like hyphens to be separators for 
words. Now, the same thing can be done backwards.  
35:29 - So if I'm here, and I want to go back a word, I 
basically just type B. So BBB, or if I want to  
35:35 - consider this a full word, I can type uppercase 
B, so uppercase B, there you go. This is one  
35:41 - word. So the same thing that W does forwards, 
B does backwards. Now why is this useful? This  
35:49 - is useful because we can use it together with the 
things that we'll learn about already. And this is  
35:55 - where with vim gets very, very interesting. 
Now, for example, the D key is the deletion key,  
36:01 - and what exactly I delete can be specified. 
So for example, again, if I marked something  
36:06 - individual mode, this is what I'm deleting. If I 
press d, d, I'm deleting the whole line. But what  
36:11 - I can also do is I can say d w delete a word, DW 
deletes a word. And of course, I can say to d w,  
36:20 - delete two words. Or in this in this case, it was 
basically two times delete a word I can also say  
36:26 - D to w, for delete two words. Essentially, this 
means that where am I when I say two w, it jumps  
36:33 - there, everything up until this point is deleted. 
So D, two w delete two words. Or also, if I'm  
36:41 - at this point here, I can say delete to be to go 
towards backwards and delete the respective words.  
36:50 - However, you will notice that if I'm in the middle 
of a word, and I say dw, it won't delete the full  
36:56 - word, but just the remaining part of the word. 
If I want to delete the full word, I have to  
37:00 - type delete in a word, so de IW, delete in a word. 
And same goes for change. So for example, if I'm  
37:09 - somewhere here, and I want to say, Okay, I 
want to change this here to something else,  
37:12 - the rest is okay, I just type ci w change in 
a word, and I can type something instead. Now,  
37:19 - you may, you may see now that this is not really 
useful, because who needs that and all all that.  
37:24 - But this is actually quite useful. I use it on an 
everyday basis, when I use JetBrains environment,  
37:30 - when I use VS code, when I use Neo vim doesn't 
really matter. I constantly use these key bindings  
37:35 - because they really speed up your code, 
or they really increase your coding speed.  
37:41 - So remember, you can specify the movements using w 
and b, or also, one thing that I didn't introduce  
37:48 - yet yet is he, he jumps to the end of a word. So 
if I type E, it jumps to the end of a word. And  
37:55 - also, we have the same thing for the line. So 
if I want to jump to the beginning of the line,  
38:00 - as a movement, not as inserting, so remember, 
with capital, I can go to the beginning of a line  
38:05 - into the insert mode. But if I just want to jump 
there to specify, for example, for delete command,  
38:10 - I press 00 goes to the beginning of a line, and 
the dollar symbol goes to the end of the line.  
38:16 - Again, all this you don't have to remember it 
right now. Just hear about this, and then you  
38:20 - can look it up in a cheat sheet again. But what's 
the interesting part here is that if I'm here,  
38:25 - for example, on type D zero, everything 
up until or everything to the beginning,  
38:30 - or everything until the beginning, is 
being deleted from the current point.  
38:34 - And same thing goes if I'm here, for example, and 
I say D dollar D dollar basically means delete  
38:41 - until the end of the line. And I can do the same 
thing with the end of the word. So I can see D  
38:46 - E, which is actually the same thing as saying DW 
in this case. But this is what we can do here.  
38:54 - And with with a capital E, we can do the same 
thing with words only considered to be words, if  
39:00 - they have spaces around them. We're actually not 
accepting any other separators except for spaces.  
39:08 - So again, a lot of information to digest your so 
I'm going to repeat it, you can jump around with  
39:13 - w you can jump around with B and you can combine 
these jumps, you can also jump around with E.  
39:18 - You can combine all of these jumps with deletion 
with copying, and with changing and all sorts of  
39:26 - things. So for example, let's say I want to copy 
this word here, and I'm in the middle of the word,  
39:30 - what I do is I say why I w Yank enter word. 
And then I can go down here for example,  
39:38 - P and I now have the word copied here. Again, 
this is very useful because oftentimes,  
39:46 - you are coding right now you don't want to 
leave the keyboard and you're here now and  
39:49 - you want to change this okay, just CIW There you 
go. I don't have to do the D. Okay, let's select  
39:55 - all this here and let's press delete the delete 
key here and Let's type something else I can just  
40:02 - while I'm in the middle of the word, 
I can just type something like,  
40:06 - I don't have to jump to the word, I can just type 
ci w and I change it right. Now, where this gets  
40:12 - really interesting is when we go into parentheses 
and brackets and other symbols. So for example,  
40:18 - you might have some Python function print, 
hello, world, this is my stupid message.  
40:25 - And since the message is stupid, you want to 
delete it, you want to change it, and you're  
40:28 - inside of these parentheses. Now, what you usually 
do is, first of all, you go to the beginning,  
40:33 - then you use the, the shift key and the arrow 
keys to mark all of that, or maybe you use  
40:38 - the mouse to select all of this year, and 
then you're deleted, which you can do here  
40:42 - with VIM is you can just go somewhere in 
into the middle, and you type C i and then  
40:48 - quotation marks, change inner quotation 
marks, and you can type something else,  
40:52 - right? Change, enter quotation marks. So if 
you don't want to change it, you can also say,  
40:58 - delete inner quotation marks without entering 
the insert mode. Or you can also say, yank inner  
41:05 - quotations, and then you can paste it somewhere. 
Right. So this is just very convenient. And you  
41:13 - can do the same thing with, with parentheses 
with square brackets with curly brackets. So  
41:18 - for example, if I want to, if I want to change 
everything here inside of the parentheses,  
41:22 - I just type C, I change inner parentheses, and 
I can use the opening or closing parentheses  
41:29 - or bracket, it doesn't really matter. So 
again, hello world, then maybe we have  
41:35 - multiple parameters, ABC, 123, whatever, 
I want to change all this here, just see i  
41:41 - and then opening bracket. So this can be very, 
very useful. And I use this quite often. What  
41:48 - else do we have here? Now we can combine all of 
this again, with numbers, I think I mentioned  
41:52 - this already. But everything that I show you 
here can be combined with numbers. So I delete  
41:57 - five words. And I can also five times delete five 
fourths, you can do whatever you want, actually.  
42:04 - And you can also copy five lines. So you 
can say five, why, why, then P and you have  
42:09 - copied five lines, and so on. All this can 
be combined with numbers. Now let's look at  
42:15 - a couple of different things. And for this, 
maybe let's go to the to the client C file.  
42:22 - Here, we can see how this is useful. I showed it 
already in the motivation. Now let's say I want  
42:27 - to change the function signature here. I'm not, 
I'm not going to do anything meaningful here.  
42:30 - But let's say I want to change the parameters 
here. See I parentheses, there you go. Now also,  
42:36 - there's another operator that we haven't talked 
about yet, or another key that we can press your,  
42:41 - if I'm at this, if I'm focusing on this curly 
bracket here, so here, and I want to know,  
42:48 - Okay, where is the closing one, first of all, it's 
displayed here, you can see that it's highlighted.  
42:52 - But also I can jump to it by using the percentage 
sign. So I can type percent to jump to that place.  
42:59 - And of course, if I have a huge functions, like 
I should have one down here, here, this is the  
43:05 - opening bracket. And if I type percent, I go 
to the closing bracket. And if I type it again,  
43:09 - I jumped up again. So this is very, very useful 
for jumping. And of course, guess what happens  
43:15 - when I type D percent? It deletes everything, 
including the brackets that we have down there.  
43:23 - Yeah, so another jump that we can do is we can 
jump not a word or not to a certain certain  
43:32 - bracket that is closing, but to a certain 
character. So for example, you might say,  
43:36 - Okay, I'm here. And I want to delete everything 
until the next star symbol comes. So I just type,  
43:43 - or actually, before we start deleting, let's jump 
to the next star symbol. How do I do that I say T  
43:50 - star, T star gets me to the position before the 
symbol that I specified. So if I'm somewhere here  
43:57 - in the same line by in same line, by the way, so 
if I say T star, I jumped one position before the  
44:03 - star, if I say f star, this is find it jumps to 
that position. So that's a difference. Why is that  
44:12 - important? Because let's say I want to delete this 
switch here. Now in this case, it's just a word.  
44:18 - Let's say we have a couple of more things. I have 
some nonsense here, whatever. And I want to delete  
44:22 - everything up until the opening bracket, what I 
can do is I can say D, T, and opening bracket,  
44:30 - and then it deletes everything up until this 
point, if I do the same thing with F, it's a  
44:35 - problem because then it's going to also delete 
the bracket. So I can say, d f, opening bracket,  
44:40 - and then we don't have the bracket anymore. So 
maybe that's not what to do. But T and F are for  
44:45 - finding or jumping one position before that so 
T jumps one position before the specified symbol  
44:51 - before the next current occurrence in the same 
line of the specified symbol and F jumps on to  
44:55 - that. That's the difference here. Now I think 
what capital T does, what does capital T do?  
45:06 - Our capital T goes backwards. So capital T and 
capital F do the same thing, just backwards. So T,  
45:13 - or lowercase t and start jumps to the next star 
and uppercase T and star jumps before to the, or  
45:20 - after the previous star, you can say. So you can 
see one position after that. And if I type capital  
45:24 - F star, it jumps to the star that comes before the 
current cursor. That's that. And again, this can  
45:31 - be combined with with deleting with yanking, I can 
also say for example, I want to copy everything  
45:37 - up until the opening curly bracket that goes so I 
basically typed in this case, oh, by the way, you  
45:46 - see here, I just noticed that you see here, Ctrl, 
Alt, D seven, this is just because on my keyboard,  
45:52 - I'm using a German layout. This was just a curly 
bracket. So if I type switch, if I if I type, yank  
46:00 - T and then curly bracket, and I paid and I press 
P now this copied exactly what I want it to copy.  
46:08 - So this is how we can use that. And one last thing 
for this section here that I want to show you is  
46:14 - how to jump to the beginning of a file to the end 
of a file into a certain line number. So we're  
46:20 - somewhere here right now 291. If I want to jump to 
the beginning of the file, I type GG, so lowercase  
46:26 - GG, like good game. And if I want to jump to the 
end of the line, or to the end of the font, I type  
46:32 - shift G and it goes to the end. And if I want to 
jump to a specific line, I can type that line. So  
46:38 - for example, 123 and uppercase G, then I jump 
to that, or I can use a command. So I can type  
46:45 - colon 406, enter and a jumps a bad line. So I 
would say that what we have covered up until  
46:53 - now are the basics of vim sort of fundamental 
key bindings to fundamental commands, and so on.  
46:57 - And now we're going to move to some more 
intermediate stuff. Now once you start  
47:01 - actually practicing Vim, so actually using 
them on a daily basis to practice it,  
47:07 - I would recommend focusing on fundamentals 
first and then moving on to the intermediate  
47:10 - stuff. But for this video, you can keep watching 
to get an overview. But once you start training,  
47:15 - focus on the fundamentals first. So for the 
intermediate stuff, we're going to cover a  
47:19 - quite diverse set of things. So we're going to 
talk about some indentation formatting stuff,  
47:24 - we're going to talk about searching, 
we're going to talk about replacing,  
47:28 - and I want to start here with the indentation. 
So with the shifting offline. So for example,  
47:32 - let's say I'm in this line here, line, line 
number 400, I want to shift it to the right,  
47:37 - or I want to indent it to the right. Now before 
I show you the command, I want to mention that  
47:43 - the program here on the bottom right doesn't 
translate these keys correctly. So I hope that  
47:48 - this is not too confusing. Essentially, what I'm 
pressing here is in order to shift a line that I'm  
47:53 - currently at to the right, I use two times the 
closing bracket. Now this translates properly,  
47:59 - but the opening bracket doesn't translate 
properly. So this is the opening bracket for me.  
48:04 - So look here, not here to the bottom right. 
And if I use this year, so the first line,  
48:12 - this indents to the right, as you can see, and 
this year indents to the left. So if I do this  
48:18 - all the time, it indents to the left. And these 
things now, so you have to press twice, if you're  
48:23 - just add the line, if you have selected the line, 
you can just press it once. So if I use the visual  
48:29 - mode to select this here, I think I just have 
to press once, and then it's going to indent it,  
48:35 - and I can select it again and I press once 
back to put it to the left. Now, at this point,  
48:41 - I also want to mention that there are multiple 
visual modes. Now up until now we have only used  
48:45 - just the normal visual mode, just pressing 
V and selecting some some area here. We can  
48:50 - also use the visual line mode into visual block 
mode, the visual line mode, I think it's quite  
48:55 - self self explanatory, we press Shift V, and we 
select line so we can not select parts of lines,  
49:02 - we select Full lines like that. And then we can 
just press Y and then press P and paste that part  
49:09 - and all that. But essentially, that that is 
the visual line mode. The visual block mode  
49:16 - is something that I have to admit don't use too 
often. But it can be quite useful if you need it.  
49:20 - It's essentially the same thing as align mode, 
but column y so I can press Ctrl V to go into the  
49:28 - in this case, I think okay, this doesn't work 
in this case because I have overwritten it.  
49:33 - Alright, so the problem was with 
the Windows terminal, not with Vim,  
49:37 - so I open up another terminal here and I'm 
going to open another file here. When you are  
49:42 - in a file in normal mode, and you press ctrl 
v you enter the visual block mode and you can  
49:48 - select column whites like that and then you can 
press D to delete the columns and so on. This  
49:53 - is not what you do in a visual mode and this 
is not what you do in the visual line mode.  
49:57 - This is what you do in the visual block mode 
which is controlled All v. And then you select  
50:03 - all these lines here. As you can see, now we can 
change them. And we can, we can delete them. And  
50:10 - yeah, in this case, we changed them. So we 
entered also cat, all these lines something,  
50:15 - right? So back in the previous editor, we can not 
only shift lines manually by shifting them left  
50:20 - and right, we can also automatically indent. 
And this works better with languages like C  
50:26 - or Java that have brackets around their code. It 
doesn't work too well with Python, because then  
50:31 - again, you don't know. Okay, what's the proper 
indentation? Do I have to indent your or not? But  
50:36 - in this case, let's say we have a badly formatted 
code. So let's say this is somewhere here,  
50:41 - which is still correct code, right? But it's, 
it's just ugly. And maybe we have something here.  
50:48 - How can I do this year, like that. 
And maybe we have something like that,  
50:53 - like that. Now, if I want to auto indent a line, 
I just have to go to that line and type the equal  
50:59 - sign. So not less than not greater than 
just equal twice. So if I type equal twice,  
51:07 - this is indented correctly, there you go. And let 
me just reverse this here. This can also be done  
51:15 - for an area. So let me just repeat the mess 
here. And I can just use the visual line mode  
51:22 - to select a section. And then once I have 
selected the section, I just type, I just  
51:29 - press the equal sign, and you can see everything 
is indented. And this also works with the full  
51:33 - file. So I can combine now a couple of things 
here, let me just mess up the code a little bit.  
51:40 - And let's remember the line here, where all 
of this starts here 406. Now in order to auto  
51:47 - indent to full file, what I do is I type G G to 
move to the beginning of the file, then I type  
51:53 - equals, and then capital G to move to the end of 
the file. So indent until the end of the file. And  
52:00 - now this was what was it 406 G, they go, 
everything is indented properly here.  
52:08 - So this worked. This is auto indentation. Now let 
us move to searching. Searching is basically like  
52:15 - jumping. But instead of just jumping to the next 
character that you find, you jump to the next  
52:20 - search term and searching in VIM is done using 
the slash characters. So it's done like a colon,  
52:25 - you will see that something pops up down in the 
bottom. If you type slash, and t, you can type  
52:30 - for example, hello. And if I press Enter, in this 
case, it doesn't find Hello, because in this code,  
52:35 - we don't have Hello. But maybe if I type URL, 
it finds URL in this case. Now this is one URL,  
52:43 - if I want to jump to the next URL that it finds, 
I press N. So N jumps to the next. And I can  
52:49 - do this a couple of times, I can jump through 
all the URLs here. There you go, there you go,  
52:55 - there you go. And I can also go back. So if 
I want to go to the previous I go capital and  
53:01 - capital and to go back up, and then just escape, 
or actually doesn't really matter escape because  
53:08 - URL stays saved here. Now in some color schemes, 
this is going to stay marked, you just type slash  
53:16 - again and you enter some nonsense. There are some 
fancy ways to reset it. But this is basically  
53:20 - how everyone does it. If you want to search 
backwards, so not the next occurrence. But the  
53:25 - previous occurrence, you use the question mark, so 
question mark URL, and you basically the normal n  
53:31 - basically moves up now and the capital n moves 
down now. So this is just the reverse of that.  
53:37 - What we can also do is we can select a token. How 
does this work? Let me just type something else  
53:43 - here so that we reset it. So if I press Scan, we 
don't find URL now. Now I can select URL and I can  
53:48 - type hashtag. Actually, this is still individual 
mode. Now I have this token, I type hash tag to  
53:54 - find the next occurrence of that token. So hashtag 
goes up in this case, again, this this doesn't  
54:01 - translate properly. It says that I'm pressing 
question mark. So don't be confused by that. But  
54:06 - this hashtag basically means moving up. And 
if I go with star star goes to the next one.  
54:13 - So star goes to the next occurrence of the token. 
So here if I go to length and I press star,  
54:18 - it goes to the next length, length length that 
you got. And hashtag goes up again. Again,  
54:24 - hashtag what I'm actually typing here is 
this character here. Not the question mark.  
54:32 - So that is that what do we have else now we 
can we can do something quite interesting,  
54:36 - which is marking locations and jumping to 
those locations. So let's say for example,  
54:42 - I frequently re visit a function for some reason, 
for example, extract hostname here, and especially  
54:48 - this line 130 This chord cursor here I come here 
quite often, what I can do is I can mark that as  
54:54 - a waypoint. So I can set a waypoint by typing 
M and I can now choose a character for example,  
55:00 - M A, which would mark this as being the Mark A. 
And if I now am at a certain different position  
55:07 - here, and I want to jump to a certain way point, 
I just press this single quotation mark here,  
55:14 - and then a and then jumps there. And I can 
also go to a different point here, for example,  
55:18 - extract full status to the string copy here, 
m, and I can type G, so, mg in this case,  
55:25 - now I go somewhere else, and I can type 
single quotation, a single quotation G.  
55:31 - And this can be used to mark important sections in 
the code to jump through them and to not have to  
55:35 - scroll all the time or remember line numbers, you 
can just say, Okay, jump to the waypoint a there,  
55:41 - I have a certain piece of code, jump to waypoint 
K, there, I have a certain code section and so on,  
55:47 - you can navigate through large code files using 
these waypoints. Now, another little thing we  
55:53 - can do is we can center the current selection. So 
if I'm down here, you can see it doesn't scroll  
55:57 - necessarily, just because I move my mouse here, 
or move my cursor here. If I want to center the  
56:03 - current line, so I want to move it up into the 
screen, I just typed ZZ. So two times lowercase z,  
56:08 - and then it's centered is and this can be quite 
useful, especially if you have something like  
56:13 - a new found. Let's just remove all this here. And 
now let's say I go down somewhere. And I don't  
56:23 - really have anything to scroll down to, what I 
can do is I can type z z to still center that  
56:29 - even though there are no lines below that. So let 
us move back to the C file. The last two things  
56:34 - that I want to show you here for the intermediate 
category are searching and replacing. So basically  
56:39 - just substituting and repeating a command, so 
substituting strings and repeating commands.  
56:45 - And for that, let's take some string that 
occurs quite often, for example, character here,  
56:50 - you can see character occurs quite often. Let's 
take that and replace each occurrence with another  
56:56 - string. How do we do that in vim with a command, 
so we need to type colon, and then percent to make  
57:02 - it into full file, not just in the selection, not 
just in the current line, but in the full file.  
57:06 - And then we type S for substitute slash for 
character, and then slash, and let's replace  
57:15 - character with symbol for example, a synonym and 
then slash G. And once we do that, I press Enter,  
57:21 - and you can see all the occurrences here have 
changed across all lines in the full file.  
57:27 - Now let's say I want to do something similar. 
But just in a selection, let's say I want to  
57:32 - select this area here. And let's say Do we 
have a word that occurs a couple of times.  
57:41 - Let's just take symbol again and do it and rename 
it to something else. Now, we select that and then  
57:48 - we type again, colon, and this time, we don't 
use percent, we just use S, we don't want to  
57:53 - do it in the full file, we just want to do it in 
a selection. So s slash symbol, slash something,  
58:00 - slash Jeep, there you go. Here, it changed. Here, 
it didn't change. So this is how you do that.  
58:06 - And the last thing that I want to show you here 
for the intermediate category is repeating a  
58:10 - command is actually quite simple. Let's say I 
delete a line by typing DD. All I need to do  
58:16 - in order to delete another line is to press 
the period or the.so. The point basically,  
58:22 - this executes the command that I just executed. 
So this just repeats the command. But this is  
58:28 - not a macro. This is just the last command. So 
this is just a single command, not a sequence of  
58:33 - commands. So also, for example, if I say, change 
until or let's let's go here, for example, yeah,  
58:42 - let's do it here. Delete until the quotation, 
I do it here. And now I can go somewhere else,  
58:52 - maybe we have some similar. Let's say here, for 
example, I just press period, and it does the same  
59:00 - thing. So this is just repeating the command. So 
the last thing that I want to talk about when it  
59:05 - comes to vim bindings, and vim commands is macros 
and registers. And this is quite an interesting  
59:10 - topic because essentially, whenever we delete 
something, or whenever we we copy something,  
59:16 - whenever we Yank something, you could say this is 
stored into a register, and we can see the list  
59:21 - of registers in vim by typing the command colon 
Rec. So colon rec, enter, and you can see here  
59:27 - the individual registers you can see the name of 
the register, and you can see the content of that  
59:32 - specific register. Now one thing I'm not sure if I 
mentioned that whenever you delete something using  
59:38 - D is also copied. So if I say if I if I go to a 
certain line here, for example, return negative  
59:44 - one, and I say DD, I delete that line, but I can 
also paste it again, because it is also copied.  
59:50 - So deleting in vim means copying at the same time. 
So basically, deleting means cutting you could say  
59:57 - and if you want to have multiple clipboards, 
in In Vim, you basically have that because  
60:01 - if I delete something, if I copy something, I 
have the different registers that store these  
60:06 - things. Now I can also let's let's go ahead again 
and see wreck here, I can also choose a certain  
60:12 - registered to paste from. So for example, 
if I want to paste this here, the registers  
60:17 - seven returned to false status length. This is a 
comment. If I want to do that, all I have to do is  
60:22 - not just press P in order to paste but before that 
press quotation mark seven p. So take the register  
60:30 - quotation mark seven and paste from that, I can 
do the same thing with copying, I can go to that  
60:36 - line and see quotation marks seven y y to yank 
the line into seven. register that go seven get  
60:44 - hostname Link function. So this is how that works. 
Oh, actually didn't want to leave that file.  
60:50 - And there's some special registers. For example, 
the register with with a named quotation mark plus  
60:56 - essentially means that or essentially represents 
the clipboard whenever you copy something in your  
61:01 - system, provided the name is integrated with your 
system, of course. But when you copy something,  
61:07 - it is stored in a register, which is 
quotation mark plus, this is a register.  
61:13 - So you can use that to copy into the clipboard 
from vim or to paste from the clipboard in Vim.  
61:19 - This is something you can do. And also something 
that's quite interesting is again, when you delete  
61:24 - something, you already have it ready for pasting. 
But what for example, if I want to just copy this  
61:31 - line here, sort of static in I just typed y y to 
yank that line, so I can paste it, as you can see,  
61:37 - but I also want to delete that line and still 
paste what I just copied. So I want to delete  
61:42 - your if I just pay if I just press P, I just 
press P and I and I paste what I just deleted.  
61:50 - If I want to paste the last thing 
that I copied that I actually yanked,  
61:54 - I have to use the zero registers. So I 
type what was it, quotation mark, zero P,  
62:01 - and it pastes. The last thing that I actually 
yanked. Not that was copied by cutting or deleting  
62:08 - is important. Now, when it comes to Macros, macros 
are actually also stored in registers, and we can  
62:15 - store them in registers manually. So a macro is 
essentially just a sequence of vim bindings of vim  
62:22 - actions, you could say, for example, what could be 
such a thing, I could go here to a certain line,  
62:28 - and a macro would be delete the lead three 
words that go and then go to the end of the line  
62:36 - and add 100, for example, whatever this is, a 
stupid macro doesn't have any value. But if I  
62:42 - want to record that macro, what I do is I press 
Q, to define that I want to start recording a Q  
62:50 - A means record the macro, as you can see down here 
recording a, and now I can do whatever I want to  
62:55 - do. So every action I take now is going to be part 
of the macro, for example, the lead three words,  
63:02 - capital A to jump at the end of the line 
into insert mode, and then 100 escape.  
63:09 - Now I want to quit the macro cue, quit 
recording. Now the macro is stored in a  
63:14 - and I think we should also see that in the 
registry here, you can see that the macro  
63:19 - that register a has d3, w a 100 as a macro 
This is those are the keys that I just typed.  
63:27 - And they're now stored in the macro eight. If I 
want to execute that macro, all I need to do is  
63:33 - I need to use the Add symbol. So the male symbol, 
I hope this is translated correctly here. Okay,  
63:38 - it isn't in my case. But essentially, this is what 
you get on American keyboards by pressing shift  
63:44 - in two. So essentially just this at 
sign here, this is what you press. And  
63:51 - what you do in order to execute the macro is 
you go to a line where you want to execute it,  
63:55 - for example, this line here and you type at A and 
as you can see the leader three words and added  
64:00 - 100 At the end of the line, again at a at a and 
so on. And I think we should even be able to use  
64:09 - the point now. Yeah, we can 
use even the period now.  
64:12 - No, actually not this is just repeating the 
last character forget about a set just at a  
64:20 - at a this executes the macro and of course what 
you can do here is you can also define a macro B  
64:25 - that does something else and then you can define 
a macro C that executes macro A and B. So you  
64:30 - can you can combine them you can you can have a 
so called you could say composite pattern where  
64:34 - you have one macro using five other macros that 
again use five other macro. So you can make pretty  
64:41 - complicated things here. And this can be quite 
useful. I have used it a couple of times already.  
64:47 - And those are I would say the basic intermediate 
and advanced things that you need to know about  
64:52 - vim itself. Now finally, last but not least, 
I want to show you how you can take the simple  
64:56 - primitive Vim and turn it into an actual advanced 
editor. into something maybe even approximating  
65:01 - an IDE with a lot of plugins. And before you do 
that though, keep in mind that if you're starting  
65:08 - out with Vim, if you're learning it for the first 
time, I recommend you stick to the Manila version  
65:11 - for the first couple of weeks. So you just learn 
the basic vim stuff, the basic vim key bindings,  
65:16 - the basic vim functions and settings and commands 
and all that. And you don't bother using some  
65:21 - plugins because those themselves have different 
commands and different key bindings and different  
65:26 - settings, and so on. So focus on the basics in 
once you have the basics down, you can you can  
65:32 - install some plugins you can you can customize 
your setup. Now, in order to do this, what we need  
65:38 - to do first here, or just recommended to do first 
year is to install niobium instead of Vim, new VIM  
65:43 - is just better faster, and it supports more 
plugins that vim does not support. So if you want  
65:48 - to have a better experience, and you still want to 
keep using vim in the terminal, I recommend to use  
65:54 - Neo Vim, and for that we type sudo apt install 
Neo vim on Linux, I have this installed already.  
66:01 - And in my case, if I now type Neo Vim, it opens 
a NEO vim full of plugins you can see here  
66:06 - in a second it opens dashboard, it opens a couple 
of things. Your new vim when you install, it will  
66:11 - look probably like the basic vim just it's going 
to say Neo vim instead of Vim. So in order to  
66:18 - install plugins, what you need to do is you need 
to go to the browser, you need to go to Google  
66:22 - and you need to type vim plug or you can just go 
to the link here, get up at comm slash June gun  
66:28 - slash vim dash pluck. And then you can read the 
instructions here. All you need to do once you  
66:34 - have nuvem installed is you copy this year on Unix 
and Linux. So also on Windows, if you're using the  
66:40 - Windows subsystem for Linux, you're copying that, 
pasting it running it, and that's it, then you  
66:45 - have vim plugin installed, basically. And one 
thing that you need to know is that the Neo vim  
66:50 - config is not a vim rc file. So it's not using the 
same conflict as the basic vim installation. The  
66:56 - Neo vim config is located in the User Directory 
slash dot config. And then here, I think it was  
67:06 - was it new Vim? Or was it in Vim? I think it was 
in them right? There you go. In here, we have a  
67:11 - file called or usually you don't have a file, you 
need to create one called init dot Vim, so can't  
67:18 - in it, dump him. This is my file. This is 
the content of my file here. So usually,  
67:23 - you don't have the end of directory and you also 
don't have the init dot bin file. So you created  
67:28 - you create both of them, you create the directory, 
and you create the init dot WIM file in this  
67:32 - actually want is going to be used. Now you can 
see that my file here is quite comprehensive,  
67:37 - you don't need to understand anything that's 
written here. This is my config. But the basic  
67:42 - structure is quite simple. So first of all, what 
you see up here is the commands we already talked  
67:49 - about, you know, tap, stop, smart, tap, auto, and 
then now we didn't talk about smart tap, whatever  
67:54 - number relative number all that. Then down here, 
you can see a bunch of settings that you don't  
67:59 - need to understand the they are plugin specific. 
For example, here I have a plugin called vim tax,  
68:04 - and has some certain parameters or settings that 
I want to pass here, I have set certain icons up  
68:10 - here all details that don't matter to you right 
now, what you need to understand is that there  
68:15 - is this section here, once you have been plug 
installed, what you can do is you can type call,  
68:19 - pluck, hashtag begin, and then call plug hashtag 
end. And in between. Now this is actually  
68:29 - not on the right place here. So ignore that. 
But in between those two commands, we install  
68:35 - the plugins by typing pluck, and then the link 
to the GitHub repository. That's literally all  
68:41 - we need to do in order to install or to actually 
to say that we want to install them plugins,  
68:46 - in order to actually install them, we need 
to type colon plug installed, like that  
68:51 - colon plug install, and then it's going to open up 
on the left here, the plugin installation. In my  
68:55 - case, it says already installed already installed 
already installed. And all these things here, all  
69:02 - these plugins are just get up repositories. Vim 
surround is a git repository nerd tree, which is  
69:08 - the thing you see on the left here. This is nerd 
tree, just a GitHub repository. So all you need  
69:14 - to do is you need to go to the repository, which 
is a vim plugin. You copy the link, you type plug,  
69:20 - there you go. And then so you have this section 
called plug begin, called plug and in between  
69:25 - plug in and the link, and then essentially you go 
in and you say plug install, and it's installed  
69:32 - the plugin, then maybe you have to rerun and 
then the plugins are activated. And what you  
69:38 - do with the individual plugins, so which color 
schemes you choose what settings the plugins have,  
69:43 - I cannot make a tutorial on that because each 
plugin is unique. So nerdery has certain things to  
69:48 - set up. Vim commentary has different things to set 
up. But all these plugins have functionalities,  
69:53 - for example, with vim commentary, I can just 
go to a couple of lines. I can mark them and  
69:58 - I can type DC to comment. them out. And this is 
across multiple different programming languages.  
70:04 - So this is not a default vim key binding. This is 
an advanced thing this that is introduced with vim  
70:09 - commentary, the airline's would you see down here, 
so I don't want to talk too much about specific  
70:14 - plugins here. Those are my plugins. And I also 
have on my GitHub repository, I can show you that  
70:20 - for those of you who are interested on my 
GitHub I have so on github.com/neural, nine,  
70:28 - I have my conflict files for those of you who want 
to have my installation, but keep in mind that  
70:35 - so you go to conflict fonts and go to it Vim. Keep 
in mind, this is a pretty advanced setup, oh, this  
70:40 - is actually an outdated version. So maybe pick 
this one, it's it's a little bit more lightweight.  
70:45 - But you're going to have to go through some 
installation steps, maybe you have to install  
70:48 - Node, maybe you have to install a language server 
and all that. But those are the plugins I use,  
70:53 - you can just go online type, top 10 vim plugins 
to install, install those in, that's it.  
71:00 - And the good thing is that this is not one IDE 
or one editor that you download, like VS code,  
71:06 - and then install some plugins. This is your thing, 
this is how you designed. So with those plugins in  
71:12 - my settings, I have a unique setup that no one 
else has, unless of course, they copy my config,  
71:18 - but you can have your setup the way you want it. 
And this is very awesome. This is how you can set  
71:23 - up Neo vim to be actually something approximating 
an IDE. Now using vim or new VIM is your actual  
71:30 - editor is fine. But oftentimes, you're going 
to make use of pi trami going to use IntelliJ,  
71:34 - you're going to use our studio, you're going 
to use a Jupyter Notebook, you're going to use  
71:38 - Overleaf and so on. And most tools out there, 
since VIM is really an awesome tool, and a lot  
71:43 - of people like it support vim bindings, either 
natively or through a plugin. So for example,  
71:49 - in pi term here, for Python development, you can 
go to File to settings, and you can go to plugins,  
71:55 - and you can download the idea of in plugin, 
you can install the idea of in plugin. And  
72:00 - once you have that in PI charm, you can use Vim 
key bindings. Now of course, you cannot install  
72:05 - 1000 plugins here because this is pi charm. This 
is not Vim, you cannot install nerd tree and all  
72:10 - that. But you can use the VIM bindings, so I'm 
here in PI charm. And I can say for example,  
72:14 - change inner parentheses, there you go. Undo with 
you. I can use visual mode here, I can press C  
72:23 - in order to change and all that. So all these 
things work here, all the basic key bindings  
72:28 - work also in PI charm, also in Overleaf, also in 
our studio, and Jupyter Notebook, all that. And  
72:34 - for the intelligent products or for the JetBrains 
products, so IntelliJ pi term and so on.  
72:39 - You also have an actual vim rc file, which is 
called Idea RC. So you go to your users directory,  
72:47 - and then you go to idea vim RC. And they 
offer actually two plugins. So they offer  
72:54 - surround in commentary surrounding commentary 
are actually vim plugins. And you cannot use  
72:59 - plug install here. So you cannot use Vim plug in 
pi charm, but you can use surround and commentary.  
73:04 - So commentaries, basically, what I told you, you 
select a couple of lines, and you type GC and it  
73:09 - comments them out. Or you just go to a single 
line, just type GCC to comment the line out.  
73:14 - This works also in Python by setting. Setting the 
commentary and surround is basically surrounding a  
73:21 - word. So for example, if I picked this one here, 
I think it was y SW are actually y s, inner W,  
73:29 - quotation marks like that. This basically 
for surrounding, not too important,  
73:35 - but this is what I do on a regular basis. 
I use Neo vim sometimes if I just edit some  
73:39 - some small scripts or something. But if I use 
an IDE, if I use PI charm, if I use IntelliJ,  
73:45 - whatever I do, unless maybe Microsoft Office, 
so unless unless I do some word stuff,  
73:50 - I always use use Vim bindings everywhere. And this 
speeds up your code, so you don't have to use Vim.  
73:56 - Even if you don't like the terminal. Even 
if you don't want to use Vim in a terminal.  
74:00 - I recommend starting to use Vim bindings in your 
other IDE, including Visual Studio code. So that's  
74:06 - it for this vim course. I hope you enjoyed it and 
hope you learned something. If so let us know by  
74:09 - hitting the like button and leave a comment in the 
comment section down below. Besides that, don't  
74:13 - forget to subscribe to Free Code Camp and maybe 
you're also interested in checking out my channel,  
74:17 - neural nine. I make a lot of videos on data 
science, machine learning Python and so on.  
74:22 - So if you're interested, take a look. And 
besides that, thank you for watching SEO and bye