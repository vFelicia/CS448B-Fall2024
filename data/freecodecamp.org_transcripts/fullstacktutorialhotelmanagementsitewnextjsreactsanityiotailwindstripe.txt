00:00 - learn how to create a fully functional
00:01 - hotel management site with nextjs 13
00:04 - react sanity iio tailwind and stripe
00:08 - Larry brgh created this course he will
00:10 - help you understand how to fit all of
00:12 - these Technologies together in a real
00:13 - world full stack project Hello friends
00:17 - and welcome to another project video
00:20 - where we are going to be building and
00:23 - deploying this hotel management system
00:26 - so let's have a demo of the application
00:29 - we are going to be building this
00:31 - application is going to be using the
00:33 - sanity CMS so if I copy over this URL
00:37 - and I open the new tab in my browser and
00:40 - I just go to/ Studio you see that we
00:42 - load our CMS so our CMS is embedded
00:45 - inside of our front end code here and we
00:49 - have this navigation um section we have
00:52 - the header we have the user profile and
00:54 - you can also switch between the light
00:57 - and dark team here and our application
01:01 - is fully responsive for mobile devices
01:04 - and also for desktop
01:07 - devices all right so let's have a demo
01:10 - here so over here we can search through
01:13 - a room and we list out a room so let's
01:16 - actually start in our CMS here in our um
01:19 - content management
01:21 - system let's try to create a hotel room
01:23 - so we can click on this hotel room
01:25 - section and here we click on this
01:28 - tab all right so we need to give this
01:31 - hotel room a name I'll just call it test
01:33 - hotel for now and I'm going to generate
01:36 - a slug and for the description I'm just
01:40 - going to copy and paste this description
01:43 - in here and for the price we can give
01:46 - this a aot of price of 1,000 and say we
01:49 - are currently on a 10% discount and for
01:54 - images I will click here and I will just
01:57 - fast forward and add so um images from
02:01 - unsplash here okay so once we have added
02:04 - these images for the cover image I'm
02:07 - also going to copy this um add URL from
02:11 - Splash or you can as well add a file and
02:14 - you see by default the room type is
02:16 - basic we can choose the different room
02:18 - types I'm just going to choose luxur and
02:21 - we have the special note um I'll leave
02:24 - the dimension for number of beds I will
02:26 - just say two and for off amenities we
02:31 - can choose an an amenity for the icon
02:34 - the icon has to be um a font or some
02:38 - icon so I'm just going to come here and
02:41 - add this icon fa bir and for the amenity
02:45 - I would just say
02:47 - king king sized
02:50 - bread like this and that should be it so
02:54 - it's saved we can obviously add more all
02:58 - right so after this I'm not going to
03:01 - make this U is not booked so by default
03:03 - a hotel room isn't booked and I will not
03:05 - make it to be a featured hotel room and
03:08 - we can go on to publish this hotel room
03:11 - so we gave this hotel room uh name of
03:14 - test hotel and if we come over here to
03:19 - the to our application we come over to
03:22 - our rooms section we see that we have
03:25 - our hotel room here in real time so as
03:27 - we make changes to our sanity Studio you
03:30 - see it reflects in our application and
03:33 - we can go on to book this hotel room so
03:35 - I'm going to click on this book now and
03:37 - these are the images that I uploaded for
03:39 - this and we have this nice looking model
03:42 - over here for the different images so
03:45 - that's the user can swipe and see it in
03:47 - full screen all right so you see what we
03:50 - chose here the Kings siiz bird the City
03:52 - View and the coffee maker with the
03:54 - respective icon I just happen to choose
03:57 - the wrong icon for the City View with we
03:59 - see the description we see here they
04:01 - offered amenities safety and hygiene and
04:04 - this hotel room doesn't have a review so
04:07 - let's go and book this hotel room and
04:10 - you have to be authenticated so if we
04:12 - click here you see this comes the user
04:15 - profile page and we can obviously sign
04:18 - out of the application and we are
04:20 - redirected back to the homepage and we
04:22 - need to authenticate so we can
04:24 - authenticate via um email and password
04:27 - or we can use GitHub or we can also use
04:30 - Google I'm going to click on Google over
04:33 - here and I'll sign in with my Google
04:36 - account and I should be redirected back
04:38 - to the application great so let's go and
04:41 - and book this our test hotel room that
04:43 - we just added so you see here we have
04:45 - this um filter here and we can filter by
04:48 - luxury and we see the hotel room because
04:50 - this falls under that category and I'll
04:53 - just click on this book now and here
04:56 - I'll choose a checking date so I can
04:59 - choose today as a check-in date and you
05:01 - see a later day as a checkout date and
05:03 - you see the price updates accordingly
05:06 - because there's a 10% discount we see
05:09 - that the price here is 900 bucks and if
05:12 - we choose a date that is way ahead of
05:14 - our checkout date we have this error so
05:16 - that the user cannot book you know a
05:19 - date that is where iead our checkout
05:21 - date now I'm going to choose this
05:23 - checking date and I'm going to go and
05:25 - book this hotel room now once this loads
05:28 - up stripe because we are going to have
05:30 - stripe for payment if we come over here
05:33 - so we see sessions that we have used now
05:36 - because this hotel room is following a
05:38 - payment first approach a booking is only
05:41 - going to be made if payment is
05:43 - successful so I'm going to fast forward
05:45 - through and fill out these details over
05:47 - here and once you fill out these details
05:50 - you can go on and click on pay and this
05:52 - is processing payment now on successful
05:55 - payment we can just come back to our
05:58 - stripe dashboard and let's let's reload
06:00 - this um sessions that we have here I'm
06:02 - just going to reload this and you should
06:05 - see our new web hook now this web Hook
06:08 - is called because so this is our new web
06:10 - hook that we just triggered now now
06:13 - because this event is called we go on to
06:15 - create a booking and if we come over
06:18 - here to our sanity studio and we come
06:20 - over to our booking section you will see
06:23 - here that we just booked this hotel room
06:25 - so this test hotel room here the number
06:28 - of days and all the details that we
06:30 - filled out wise we were booking this now
06:33 - if we come back to our hotel application
06:35 - you see here that we are redirected to
06:37 - the user profile page and here the user
06:40 - can see the current bookings and the
06:42 - user can also see the amount spent so
06:45 - this is the test hotel which was the
06:47 - highest amount spent at 900 bucks so if
06:51 - we come back to the current bookings and
06:53 - we click on rate we shall be able to
06:56 - leave a rating on this hotel room so we
06:59 - you can say great
07:01 - experience like this and click on submit
07:05 - now this is going to go on and submit
07:07 - the review and we come back to the test
07:09 - hotel room we should see our review here
07:11 - we're just going to reload this and our
07:14 - review should pop up so this review that
07:16 - we just gave on this hotel room and you
07:18 - see this hotel room is booked and the
07:19 - user cannot go on to book this hotel
07:21 - room so we can come back to the user
07:24 - profile page and here where we have this
07:27 - hotel room we just booked if we want to
07:28 - leave on that rating here and we click
07:32 - on submit and we come back to the test
07:34 - hotel room so here I'm just going to
07:37 - reload this and you should see that the
07:39 - hotel room you know updates so we have
07:42 - this functionality to leave a review and
07:44 - to also update a review and only
07:47 - customers that have booked a hotel room
07:49 - can go on to leave reviews on that hotel
07:52 - room so this is the application we are
07:54 - going to be building and the application
07:56 - is fully responsive now we have this
07:59 - crazy looking parenthesis here because
08:01 - we didn't provide a dimension so if we
08:04 - come back here to the test hotel room
08:07 - and here where is it this test hotel if
08:10 - we just leave a dimension over here so
08:13 - we can just say 30 or whatever and
08:15 - publish and if we come back here we
08:17 - should see here the
08:20 - updated just reload this we should see
08:22 - here 1 so for the dimension so this is
08:25 - the application we have our review and
08:27 - all aspect of this application
08:29 - is fully much responsive as you would
08:32 - expect and to achieve this we are going
08:34 - to be using Tailwind CSS here so this is
08:38 - the application we are going to be
08:40 - building together if you like this
08:42 - project please do go on and leave a
08:45 - subscribe it helps the channel and don't
08:47 - forget to give it a thumbs up as well
08:50 - and I have already left time stamps in
08:53 - the description so in case you come back
08:54 - for later you should be able to continue
08:57 - with the project and the source code is
08:59 - already in the description so you can
09:01 - get it on GitHub now let's get started
09:04 - building out this project together let's
09:06 - start our project and I'm navigated to
09:09 - my desktop from my terminal and I'm
09:13 - going to run the command to create a new
09:14 - nextjs project and the command is MPX
09:18 - create next app and I'm going to be
09:21 - using a template of typescript so I'll
09:23 - zoom out a bit so you see the entire
09:26 - command so MPX create next app with a
09:29 - template of typescript I'll execute this
09:32 - we are prompted to give our application
09:34 - a name and for this project I'll just
09:36 - give it the name of hotel management
09:40 - like this so I'll just add e so hotel
09:44 - management and say yes to all these
09:47 - promts and say no to customizing default
09:52 - input now once next GS CLI is done
09:55 - building our project I'm going to CD
09:57 - into the created project project which I
09:59 - called hotel
10:01 - management and go into Visual Studio
10:05 - code so this is the default files and
10:09 - folders that we get by default and if we
10:13 - run mpm run there so that we can just
10:15 - preview the application that we get um
10:20 - from nextjs as you can see we are
10:22 - running on next GS
10:25 - 13.5.3 so this is the current version of
10:27 - next GS we are working with
10:29 - and we come over to
10:32 - the browser and we just go to Local Host
10:36 - 3,000 you'll see the file or our
10:39 - homepage so Local Host
10:41 - 3,000 so let's go and make changes
10:44 - already to our
10:46 - application and I'll get started in our
10:49 - layout our layout. TSX which controls
10:52 - the entire layout of our nextjs
10:55 - application and for the title I'll give
10:58 - it the title tool of hotel management
11:01 - app and also update the
11:05 - description you can give this any title
11:07 - or any description of your choice but in
11:10 - this case I'll just say discover the
11:11 - best hotel rooms like
11:14 - this and this is going to update our
11:17 - header title and description for the
11:20 - font I'll be making use of font Poppins
11:23 - so I'll import Poppins from next phon
11:26 - Google and use it over here we have an
11:29 - error but before we come to that the in
11:32 - variable here I'll change it to popins
11:35 - all right popins with uh lower case
11:38 - P okay so configurations we can pass to
11:41 - this Popin font is the font weight so it
11:44 - can be a string in this case I'm going
11:47 - to pass an ARA of strings for the
11:49 - different font weights where Us in the
11:51 - application so we're going to making use
11:53 - of a font weight of
11:54 - 400 also a font weight of 500
11:59 - and also a font weight of 700 and lastly
12:03 - you're going to make use of a font
12:05 - weight of 900 okay so I'll just type 900
12:09 - like
12:10 - this and for The Styling I'm going to
12:13 - give this a style of italic as well as a
12:16 - style of normal so this style over here
12:20 - normal and lastly we need to pass also a
12:23 - variable okay so we're going to pass a
12:25 - variable and the convention is to go
12:27 - with double hyphone like this and then
12:29 - font another hphone and I'll just go
12:32 - with font Poppins as the
12:34 - variable and to fix the error that we
12:38 - have in our body tag over here right and
12:42 - go with inter class names we are going
12:44 - to go with poins do class names like
12:47 - this so popping do class
12:49 - name all right
12:52 - and I'm going to cut this children here
12:55 - and I'm going to wrap our layout in a
12:57 - main tag like this in the main tag so
13:00 - here we have a main which we can give um
13:04 - class name and the class name I'm going
13:06 - to give to this main tag is font normal
13:09 - so font normal like this and lat room in
13:13 - our application we're going to have a
13:16 - header component as well as a footer
13:20 - component so here I'm going to have
13:23 - header so this is a placeholder and I'll
13:25 - comment it out and just after it we're
13:27 - going to have children
13:29 - and after which we are going to have our
13:32 - footer
13:33 - component all right but before we go on
13:36 - and have our header component so before
13:38 - we go on and have the layout for our
13:41 - header component I would just like us to
13:44 - you know discuss briefly about the meta
13:47 - description so let's go over to the
13:49 - browser and here in the browser if I
13:52 - just reload and you see here we have
13:54 - hotel management app if I open the
13:57 - elements um tab over here so here where
14:00 - we have the elements Tab and I just
14:03 - collapsed the head so here if you check
14:06 - down so here you see here that we have
14:09 - the meta so description and we have the
14:11 - content and the same for the title so
14:15 - this object that we have over here so
14:18 - this uh metadata we just have the title
14:21 - and it renders it as we normally have in
14:24 - HTML in our head tag where we have the
14:27 - title and there we just write without
14:28 - the title of our application so this is
14:31 - the work of this meta data we can pass
14:34 - you know these headings that we would
14:36 - normal normally have in our
14:40 - HTML okay so I'm just going to rever the
14:43 - changes that I made
14:45 - here and we can go on and create a
14:48 - header component so in the source folder
14:51 - I'll create a new folder I'll call
14:55 - components and in here so inside here
14:58 - I'm going to create a folder I'll call
15:00 - header and then another file which I'll
15:02 - call header.
15:05 - TSX okay so I'm just going to boot strap
15:08 - this header
15:10 - component and remove the react
15:14 - input and we can already import this
15:17 - header component in our layout so here
15:19 - we have the placeholder I'll go and
15:22 - import
15:24 - header so header will be coming from
15:26 - component header header like this and
15:30 - I'll just rearrange the order of inputs
15:33 - here so for HTML semantics rather than
15:37 - use a div I'll be making use of um the
15:40 - header
15:42 - tag and obviously I'll be styling this
15:45 - header so I'll give it a padding on the
15:48 - Y AIS of 10 padding on the x- axis of
15:52 - four give it container and to position
15:55 - the items in the center I would use m XX
15:58 - auto text
16:01 - XL flex Flex wrap and on medium devices
16:05 - I'm going to go with flex no wrap so
16:09 - flex no wrap here and after that we are
16:13 - also going to use uh position the items
16:16 - in
16:17 - center and justify between so I'll zoom
16:20 - out a bit so hopefully you can see the
16:24 - entire class names uh styles that we
16:26 - have applied here
16:30 - and I'll Zoom back in okay so inside
16:32 - this header tag we are going to have a
16:34 - div okay two two sections actually sorry
16:37 - about that we're going to have a div and
16:39 - we're also going to have an on that list
16:41 - so let's start with the div and this div
16:44 - I'll give it a class name of flex give
16:47 - it item center with full and medium
16:51 - devices we won't take the full width
16:53 - we're just going to take two3 of the
16:55 - width like this all right and inside
16:59 - this div we are going to have a link so
17:01 - this is where we are going to have uh a
17:03 - link that we pointing to our homepage so
17:06 - this link component we are going to go
17:08 - on and import it from next link okay and
17:13 - for the h we are going to go to slash
17:16 - which is our
17:22 - homepage and for the class name I'll
17:24 - give this a class name of font black and
17:27 - also
17:29 - um text let's see this um hex code this
17:33 - color I provided this hex code before
17:35 - now so F2
17:38 - 745 which is more like a an orange color
17:42 - and here I'll just give you the name of
17:44 - hotels like this okay so after this link
17:48 - we are going to have an on that list
17:51 - where we will have the icon to take us
17:54 - to the authentication page and also
17:57 - another icon
17:59 - to tole the team so here I'll give this
18:01 - another list a class name of flex item
18:04 - Center and margin left of five for the
18:08 - icons we are going to be using react
18:09 - icons so mpm install react icons like
18:14 - this I'll wait for it to install and
18:16 - I'll restart the application so mpm run
18:21 - Dev all right so let's use the before we
18:24 - can apply the um icon we're actually
18:27 - going to have a link
18:29 - okay so this link will take us to the
18:31 - user authentication page to the off page
18:34 - and for the icon I'm just going to use
18:36 - fa user ccle so fa user
18:41 - CLE and for the h RI of this link I'll
18:45 - just take this off yeah and for the h
18:48 - this link is going to be pointing to
18:50 - slash
18:51 - off all right so let me import the
18:55 - fle and let me uh give it a class name
18:59 - so for the class name I'm just going to
19:01 - give this a class name of C pointer so I
19:04 - allow the IDE help me with this input
19:06 - Noe it doesn't so I would have to import
19:09 - it manually so let's
19:11 - import buot the structure every us
19:13 - Circle coming from react icons for/
19:18 - FAA great and actually this link that we
19:22 - have here we need to wrap it in the list
19:24 - item so in an Ali and this Ali needs
19:27 - some class names so I'm going to give
19:31 - this uh class name of flex items Center
19:35 - okay and then we're going to have
19:36 - another list item and the idea is for
19:39 - this other list item to hold the toggle
19:42 - so it's for our lights and dark team so
19:45 - I'll just give it a margin left of two
19:47 - to um have some space from the user
19:50 - Circle and for the icon I'll use this um
19:54 - MD dark mode like this okay
19:59 - okay and I'm just going to duplicate
20:02 - this so that I will D structure this
20:04 - coming from react icons MD okay for
20:08 - material
20:10 - design and also I'll give this a class
20:13 - name so I'm going to give this icon a
20:16 - class name of cross pointer
20:20 - here all right and for these other list
20:23 - items which would hold um links so I'll
20:26 - just give this a class name of flex over
20:30 - here also give it a class name of item
20:33 - Center justify between give it a width
20:36 - four and on medium devices I'll give
20:39 - this a width of 1/3 1/3 and then imine
20:44 - top of four and then we're going to have
20:46 - list items and for this AI I'm also
20:50 - going to give this um some animation on
20:53 - Hover so I'm going to translate this uh
20:56 - on the y axis so netive um 8 pixels and
21:02 - I'm also going to give this an animation
21:04 - duration of 500 and I'm going to
21:07 - transition all like
21:11 - this okay and inside this list item we
21:14 - are going to have a link so we already
21:16 - have this link component imported which
21:18 - will go to home so the hre is going to
21:21 - be pointing to
21:24 - slash okay and I'll bring this down
21:27 - let's say to more times we are going to
21:29 - have that link going to um slash rooms
21:33 - so we have this rooms here and the H
21:36 - will be pointing to slash rooms and this
21:39 - will just you go to the homepage is um
21:42 - contact so just have the link contact we
21:44 - don't have any contact page so we'll
21:46 - just leave it to go back to the home
21:49 - page like
21:50 - this and we going to save this file and
21:54 - then we can visit um the browser and I
21:58 - just quickly reload our application so
22:01 - that we can see our styling um take
22:04 - change our changes take place already
22:08 - yeah so we see our changes we see our
22:10 - link and we see our different icons you
22:13 - know and you see you see the animation
22:16 - that we have on this
22:18 - section okay so let's come back to the
22:22 - IDE and I'll just remove this so that we
22:26 - can take uh the full room and let's
22:29 - configure Tailwind CSS so I would come
22:33 - over to our Tailwind um config dots file
22:39 - and I'm going to get rid of this um
22:41 - background image we're not going to be
22:43 - configuring the background image we are
22:46 - going to configure first the different
22:49 - colors that we'll be using in our
22:52 - application okay so we're going to have
22:54 - our primary color and our primary color
22:58 - is going to be this hex code so
23:02 - hash
23:06 - 038 um
23:09 - c7f and this is our primary color and we
23:14 - are also going to have our secondary
23:16 - color okay and our secondary color is
23:20 - going to be this um hex code so F2
23:24 - [Music]
23:26 - c641 and then we are going to have our
23:29 - tary
23:31 - color and our tary color we are going to
23:34 - have different variants we're going to
23:36 - have the dark variant and also the Light
23:39 - variant and the dark variant is going to
23:43 - be the um has code so F2
23:48 - 745 and the light variant is going to be
23:52 - this hex code so F2 c64
23:58 - one okay so these for our colors and
24:03 - apart from the color we are also going
24:06 - to be configuring our font family and
24:09 - here we are going to use um Poppin
24:14 - name and we have this array and this
24:17 - variable has to match the variable we
24:21 - Define in our layout. TSX okay so this
24:25 - variable I'm going to copy it come to
24:28 - our layout it has to match you know this
24:31 - variable over here all right so come
24:35 - back to the T config and we also need to
24:38 - spread out the font family so I'm going
24:42 - to import the Fone family using the
24:46 - required statement so con Fone
24:50 - family is equal to require and this will
24:54 - come from telling CSS and default team
24:58 - so here we are going to spread out the
25:02 - fun family and access the sence
25:08 - property great so we can come back to
25:11 - our header.
25:13 - TSX and where we made use of
25:16 - the
25:18 - um the shary color so I'm just going to
25:21 - copy
25:22 - this and if we come over to our header.
25:25 - CSX I'll replace this so this this is
25:28 - going to be you know text and now we can
25:31 - use text T Shar DC and you see this U
25:36 - yellowish color this icon or we can use
25:39 - text tary light here we don't get the
25:42 - icon that means there should be you know
25:45 - a typo somewhere and we forgot to
25:49 - actually add the hash here so add this
25:51 - hash and there we see the preview great
25:55 - but I will go back to the dark um
25:57 - variant which we are using in this case
25:59 - and we see
26:00 - everything um works as
26:03 - fine so up next after the header we are
26:07 - going to be working on our footer
26:10 - component so I'm going to create another
26:12 - folder which I'll call footer and then
26:15 - another file for our
26:18 - footer.
26:20 - TSX okay so I'll get rid of the header
26:23 - and the telling
26:24 - config so I'll bootstrap uh put
26:28 - component and remove the react
26:33 - input and rather than us a div I'm going
26:36 - to make use of um the footer tag and let
26:40 - me style this um footer give it the
26:44 - class name and the class name is going
26:46 - to be margin top
26:49 - 16 okay and here we are going to have a
26:53 - div with the class name of container and
26:56 - MX Auto
26:58 - and for padding give it a padding of
27:00 - four on the x axis and then we're going
27:04 - to have a link which will import from
27:07 - next link and this link will still take
27:10 - us to the homepage so the hve is going
27:13 - to be
27:14 - slash and the class name is going to be
27:18 - font
27:20 - black and for the text we're going to go
27:24 - with text tary D here and we'll just
27:27 - have the makeup brand name
27:32 - hotels and then we're going to have a
27:34 - hphone a H4 that would say contact like
27:38 - this and for the class name of this um
27:42 - H4 I don't to give you the class name of
27:45 - font let's see
27:48 - font semi board and a text uh let's see
27:52 - I'm actually looking for 40 pixels do we
27:55 - have no so I'm going to use 40 PX like
27:59 - this and pattern on the Y AIS of six
28:04 - here okay so after this H4 we're going
28:07 - to have a div and this div I'll give
28:10 - with a class name of
28:12 - flex and give it um Flex wrap and give
28:17 - it a cap of
28:19 - 16 and position the items in center and
28:23 - justify between as well and inside this
28:27 - div we're going to have another div
28:30 - which we are just going to give Flex one
28:33 - with different paragraphs for this um
28:36 - madeup address which I'll give one two
28:39 - three Road and then we're going to have
28:42 - this div with a class name of
28:44 - flex and item Center give it a py of
28:51 - four and this div is going to have this
28:54 - icon so this icon BS f
28:58 - um send VI okay and after the icon we
29:02 - are going to have a
29:04 - paragraph and this paragraph would have
29:07 - a margin left of two and I'll just say
29:10 - code with Larry here and quickly import
29:15 - this BS send F BS F send F from react
29:21 - icons for slbs
29:25 - here okay so after
29:29 - this I'm actually going to copy and
29:32 - paste
29:33 - this um two more times we're going to
29:36 - have get rid of this
29:39 - py4 and for the icon we are going to use
29:43 - in this
29:44 - case another icon which is BS t phone um
29:51 - out Bond and I'll just have this made up
29:55 - um phone number here
29:59 - and after this we are going to have this
30:02 - and we'll still keep the brand name code
30:05 - with Larry but we are going to use uh a
30:08 - different icon so here we're going to
30:10 - use bi message detail and we need to
30:14 - import this from react icons
30:18 - forbi and I'll remove this BS send uh F
30:22 - send
30:24 - F okay and get rid of this um py rather
30:29 - use a p um padding top of four so after
30:34 - this div with this Flex one we're going
30:36 - to have another
30:39 - div and this other div we are still
30:42 - going to give Flex one and we are going
30:45 - to give uh from medium devices and above
30:47 - we're going to position the text to the
30:49 - right so align the text to the right and
30:53 - we're going to have a pattern a
30:55 - paragraph with a pattern bottom of for
30:58 - and here we see our story and I'll just
31:02 - bring it down and say get in touch and
31:04 - next we're going to have
31:06 - our um our privacy our privacy
31:10 - commitment I'll bring this down and next
31:13 - we're going to have our times of
31:16 - service and I'll bring it down one last
31:19 - time and here we are going to have uh
31:24 - customer assistant without any class
31:27 - name so this last one is not going to
31:29 - have um any class name here great okay
31:34 - so after this div we are going to have
31:37 - another div which we're going to give a
31:40 - class name of Flex
31:43 - one and on medium devices and above
31:46 - we're going to go with text right like
31:50 - this and this div we have different um
31:53 - paragraphs this paragraph we're going to
31:56 - give a pattern bottom of four and we
31:59 - just go with the text of dining
32:01 - experience and next we're going to have
32:03 - another text with
32:05 - Wellness bring it down for fitness and
32:09 - next we're going to have another with
32:11 - spots and we're going to have another
32:14 - one with events without any class
32:17 - name okay so after this div we are going
32:20 - to have another div this div actually is
32:23 - going to be um a self closing div
32:26 - because we're not going to have any
32:27 - content inside it's just for styling so
32:32 - I'll give this a background of
32:34 - background tary light give this a height
32:37 - of 10 and on medium devices and above
32:41 - I'll give this a height of 70 pixels and
32:45 - give it a margin to the top of 16 a
32:48 - width
32:49 - full and I'll give it a bottom of Zer
32:53 - left of
32:54 - Zer and we come over to the left layout
32:58 - I'm just going to import the footer
33:01 - component here okay so footer from our
33:05 - component footer footer go and save this
33:08 - file and we visit the browser we see our
33:13 - footer over here and let's see if our
33:17 - application is
33:19 - responsive I just going to you know test
33:23 - this out to see if it's responsive and
33:25 - use the response
33:28 - um points that we have here
33:32 - and we don't see our text that's
33:35 - because come over to our app and in our
33:38 - page. TSX I'm going to get rid of
33:41 - everything we have here okay so for now
33:45 - I'll just return return empty fragment
33:48 - with the text of home so I'll just type
33:51 - home in
33:53 - here and remove the input from next next
33:57 - image and I'm also going to use an arrow
34:01 - function so con home is going to be
34:04 - equal to this AR function so I'm going
34:06 - to save this and if we come back we have
34:09 - an error because we are not exporting
34:12 - this um home component actually we have
34:15 - to export it by default so export
34:17 - default home like
34:20 - this and if we come back to the browser
34:23 - we see our
34:24 - application and let's test out the
34:27 - responsiveness of the application and we
34:30 - see that our application is um
34:34 - responsive so we can just test this out
34:39 - here and I would also love to you know
34:42 - get rid of this background color that we
34:45 - have here and to get rid of it let's
34:48 - come over to our global. CSS and I'm
34:51 - just going to remove these predefined
34:53 - stylings that we got by default and yeah
34:57 - we have our white background up next we
35:00 - are going to be working on our teaming
35:03 - feature so I'm just going to close
35:06 - all and let's work on our teaming in the
35:09 - source folder I'll create a new folder
35:12 - I'll call
35:13 - context and here I'm going to create a
35:15 - new file for our team context so a file
35:21 - call it team contact. TS and let's
35:24 - import this patch from react
35:27 - we're also going to import set State
35:29 - action and we're also going to import
35:33 - the create
35:34 - context to create a context we're going
35:36 - to have this constant over here and
35:39 - we're going to call it team
35:41 - context and this is going to be equal to
35:44 - create context so to create a context we
35:47 - make use of create context from react
35:49 - and for typescript let's define the type
35:52 - that we are going to need for our
35:54 - context so the type for for our team
35:57 - context type is going to be equal to
36:00 - this object so we're going to have that
36:03 - team which is going to be of type
36:07 - bowling and we are also going to have
36:09 - set duct team and set du team is going
36:12 - to be of type dispatch so the type of
36:14 - action we're going to dispatch is a set
36:17 - State action which is of type bowling
36:20 - okay and I'm going to pass this type to
36:22 - create context we're going to have
36:24 - errors because now we have to Define
36:26 - some um um default values so for that
36:29 - team by default is going to be false and
36:32 - set that team the initial value is going
36:35 - to be this function that returns nothing
36:39 - all right so let's export our team
36:41 - context so we're going to export default
36:44 - this team context here so this is the
36:48 - first step we create our
36:50 - context and in the components folder I'm
36:53 - going to create another folder which
36:56 - I'll call
36:57 - team provider so we're going to wrap
37:00 - this team provider with our entire
37:03 - application and here we have our team
37:06 - provider. TSX so first I'll be making
37:10 - use of the use client directive that we
37:13 - get from
37:14 - nextjs and I will import use effect and
37:17 - I'll also import use state from
37:21 - react and I would also import the team
37:24 - context I actually want this to be
37:27 - and ope T So rename it here and also
37:31 - rename it in a team context file so this
37:36 - I'll use an uppercase t here and also
37:39 - export default team context like
37:42 - this and then I'll come back to the team
37:47 - provider okay so here let's have our
37:50 - component jsx so I'm going to have this
37:52 - Con team not context so team provide
37:56 - then which is going to be equal to this
37:59 - Arrow function here okay so for props
38:05 - this is going to receive children and
38:08 - the prop is going to be of type object
38:10 - where we have
38:12 - children and children is going to be of
38:14 - type react do react node like
38:19 - this okay so first we're going to have
38:22 - this Con where we set our state so t
38:26 - team
38:27 - and set du team which is going to be
38:29 - equal to UST
38:32 - State like this and UST state is a
38:34 - generic type that is going to hold a
38:37 - bulling value and for the initial value
38:40 - we're going to get this from local
38:42 - storage so we can call this team from
38:46 - local storage and first we need to check
38:49 - that we have local storage so we're
38:51 - going to check if type of local storage
38:54 - is not equal to undefined okay so if
38:57 - this is the case that local storage is
39:00 - set then we are going to get an item
39:03 - from local
39:04 - storage and local storage dog item the
39:07 - item we're going to get would have a
39:09 - name of Hotel team so Hotel team like
39:13 - this and we're going to check if we
39:16 - successfully get an item so if we have a
39:19 - value there then we are going to
39:22 - Json do pass that value okay cuz it will
39:26 - definitely be a string because we say
39:29 - string in local storage so we're going
39:31 - to pass json. get item Hotel team and
39:36 - I'm just going to have this exclamation
39:38 - sign here to tell typescript yes we are
39:40 - sure we're going to have this otherwise
39:43 - we are going to be using false okay so
39:47 - if um local storage is defined we get
39:49 - the hotel team and then we go to json.
39:52 - pass and once we json. pass we if we get
39:57 - it otherwise we use false so I'm going
39:59 - to pass this team from local storage and
40:03 - for typescript types this team. from
40:05 - local storage is going to be of type
40:08 - bowling and I'm going to pass this value
40:10 - as our default value to use States
40:15 - here okay so this is the first step in
40:18 - achieving our teaming and after this we
40:21 - are also going to go on and have our JSA
40:26 - for our team context and in our team
40:29 - context we access do provider okay and
40:33 - for values remember our team context
40:36 - will be holding a du te value which is
40:39 - the value from our set State and set du
40:42 - te which will be referencing this value
40:44 - from our use States sorry and in here
40:47 - we're going to have a div okay a div and
40:50 - we have um some conditions for the class
40:53 - name so we're going to be using uh uh
40:57 - brackets and then back tick so we're
40:59 - first of all going to check if D te so
41:02 - if D te is true then T CSS gives us this
41:06 - dark variant we're going to append it to
41:09 - this dark variant otherwise we are just
41:11 - going to use an empty string and then
41:15 - we're going to give this a minimum
41:17 - height of
41:19 - screen so in here we're going to have
41:21 - another div and this is the div where we
41:23 - check if D te is true we going to use uh
41:27 - apply some class names so here we're
41:28 - going to check if we have dark team
41:31 - we're going to give uh have a text white
41:35 - and if we have dark team so we have this
41:38 - dark variant we are going to give this a
41:41 - background of black and for the text by
41:45 - default it's going to be a black text
41:47 - okay so for the white team case where we
41:50 - don't have the black team so it's going
41:52 - to be 1 e 1 e one e
41:56 - and then in here we can just go on to
41:58 - return children that we receive from the
42:02 - props okay so this team provider let's
42:05 - go on and Export this as a default so
42:09 - export default team
42:11 - provider and we're going to add another
42:13 - state so we're going to have another
42:17 - state here and we're going to call this
42:19 - state um render component and this is
42:22 - useful so that we know we have some
42:25 - condition here for the class name so
42:26 - that nextjs will be able to pick this up
42:29 - on the client so we have render
42:31 - component set render component is going
42:34 - to be use state of
42:36 - false okay and I'll just close this off
42:40 - here and you're going to have our use
42:44 - effect okay so in our use effect we are
42:47 - sure that our component have been
42:49 - mounted to the screen we are going to go
42:52 - on to set um render component and set it
42:55 - to tr
42:56 - true okay so we're having this error
42:59 - because we forgot to have our return
43:02 - return statement so we're going to
43:03 - return return this and back in our use
43:06 - effect we're going to set render
43:09 - component and set it to a value of true
43:12 - like this so we can check over here if
43:16 - our component is not yet rendered we are
43:19 - going to go on end Reon and empty
43:23 - fragment great so we have our team
43:25 - provider now we are going to make use of
43:27 - this team provider in our layout so come
43:31 - over to the layout. TSX so in our app
43:35 - and here where we have layout. TSX we
43:38 - are going to wrap our entire application
43:41 - with this uh Team provider so I'll cut
43:43 - this and here we are going to have our
43:46 - team
43:47 - provider and we are going to return
43:49 - return our main
43:52 - tag okay so if we come over to the
43:54 - browser we would expect everything to
43:56 - work as know intended but actually it's
44:00 - not going to work okay I'll just reload
44:02 - the page and you know if we click on
44:04 - this button you see nothing happens so
44:06 - let's come back to our header because we
44:09 - haven't weared up the event yet so in
44:12 - our component header header.
44:15 - TSX here we're going to be
44:17 - importing um the D team and set that
44:21 - team from our context and to make it of
44:24 - our context we use the use context and
44:27 - here we are going to make use of our
44:30 - team context okay so I'll just bring
44:32 - this down
44:35 - here and we're going to D structure D
44:38 - team and also set D team here great so
44:43 - dark team we can use this um to
44:47 - configure the icon we're going to show
44:50 - so this icon here I'm going to cut this
44:53 - icon and here how first of all check if
44:57 - that te is
44:59 - true so if dtim is true
45:02 - here yep I have the question mark sign
45:05 - so if that is true actually want to
45:08 - return return a different icon so we are
45:11 - going to go and and import this icon and
45:14 - the icon is this
45:16 - MD outline light like this so light mode
45:22 - so I'll copy this and if do true I'm
45:26 - going to paste this otherwise I'll use
45:28 - this okay so we're actually going to use
45:31 - this as a self closing tag like
45:34 - this okay so next we're going to give
45:37 - this
45:38 - um class name of C pointer so I'll just
45:42 - paste this class name over
45:44 - here and next we need to wear up the
45:47 - click events so on
45:49 - click we're actually going to do two
45:52 - things so have this callback function
45:54 - you can Outsource it but I'll just write
45:57 - it in line here so on click we're going
46:00 - to first set um dark team to false and
46:04 - we also want to go and remove the from
46:07 - our local storage so we're going to
46:09 - remove item from our local storage Hotel
46:14 - team okay and I'll just copy this click
46:17 - event here on the dark mode we are going
46:20 - to do two things but this time around
46:21 - we're going to set dark team to true and
46:24 - rather than remove item
46:26 - you are going to be setting item okay
46:29 - and uh with this key of Hotel team and
46:32 - the value will be true but not like this
46:34 - as a string okay and to make our te
46:38 - feature to work we just need to go on to
46:41 - make this um header component uh use
46:43 - client component because now we are
46:45 - making use of context and not to have
46:47 - errors and lastly in uh taing config we
46:52 - just need to do one last thing so come
46:54 - over to our um TN config dots and just
46:58 - right above the content here we're going
47:01 - to check Set Dark
47:04 - mode yep so the dark mode we're going to
47:07 - set it to value of class okay so now if
47:12 - we come over to the
47:14 - browser so I'll just come over to the
47:17 - browser and if we click yep you see a
47:20 - teaming feature works as
47:24 - expected okay so up next if we click on
47:27 - this icon here you see that we are
47:29 - directed to SL off and for now this
47:32 - leads us to a 404 page so let's work on
47:37 - this page and in our app I'll create a
47:39 - new folder which I'll call off and then
47:42 - I'll create a file for page. TSX so in
47:46 - here I'm quickly going to bootstrap this
47:49 - component and I'll change from page to
47:52 - off and remove the react in
47:56 - and next I'm going to give this some
47:59 - class names and I'm going to give it a
48:02 - class name of container and then imagine
48:06 - on the x axis of Auto and I'll change
48:09 - this div to a section tag okay and in
48:13 - here we are going to have a
48:16 - div and this div is going to have uh a
48:19 - class name of pattern
48:21 - six and also a class name of space y4
48:27 - and on medium devices this is going to
48:29 - have uh space
48:31 - Y6 and then on small devices is going to
48:34 - have a padding of it like
48:38 - this and we also going to give this a
48:41 - width of 80 and on medium devices I'll
48:44 - give this a width of
48:46 - 70% and make sure that I also go with MX
48:49 - Auto so that the form is in the
48:54 - center and then next we're going to have
48:56 - a div and this div is going to have a
48:57 - class name of flex a imin bottom of
49:01 - eight give it Flex call and on medium
49:05 - devices I'm going to give it a flex roll
49:08 - items Center and justify
49:11 - between and this div we are going to go
49:14 - on to have a H1 now this H1 that just
49:17 - going to say create an account and let's
49:20 - start this H1 I'm going to give it a
49:22 - class name of um text
49:26 - XL and also font bold leading um tight
49:33 - and also give it uh a tracking tight
49:37 - like this and the medium devices I'll
49:39 - give it a text of two
49:42 - Excel now just after this H1 we are
49:45 - going to have a paragraph which is going
49:47 - to say
49:48 - or and after this paragraph we're going
49:50 - to have a
49:52 - span and for the class names of the span
49:55 - and we're going to give it a class name
49:57 - of inline Flex item
50:00 - Center and in this pan we're going to
50:02 - have two icons first is this for GitHub
50:05 - so AI feel GitHub and we're going to
50:08 - give this a class name and the class
50:10 - name of this is going to be uh margin to
50:13 - the right of let's say three and then
50:17 - I'll just give this a text of 4 XL and
50:20 - the C of
50:21 - pointer and then text um black like this
50:26 - and then on dark mode we're going to
50:28 - give it a white text so here we are
50:32 - going to go on and have this pipe which
50:34 - is going to differentiate it or separate
50:36 - it from the Google icon so here we're
50:40 - going to have this um FC Google with the
50:44 - class names of um margin to the left so
50:47 - margin to the left of three and also
50:50 - give it a text of
50:52 - 4XL give it a c pointer
50:56 - and next we can import these icons so
50:58 - first I'm going to
50:59 - import um this AI F GitHub which will
51:03 - come from react icons for/ a and next
51:07 - I'm going to import FC Google which will
51:10 - come from react icons for
51:14 - slfc all right so next we are going
51:17 - to reload and if we check the browser
51:20 - and you see that we have this um create
51:23 - an account and we have everything
51:25 - working as expected all right great so
51:29 - after this div now we are going to be
51:31 - having our form so our form but without
51:34 - any action okay so I'm going to take the
51:36 - action and provide it to the class name
51:39 - and the class name is going to be let me
51:42 - um see so the class name is going to be
51:44 - space
51:45 - y4 and on medium devices I'm going to
51:48 - give this uh space Y6 like this and
51:53 - inside this form we're going to have
51:54 - different input so for the email
51:57 - password and also for the name so this
52:00 - input is going to be of type
52:03 - email and then we are also going to give
52:06 - this
52:07 - um a name and the name is going to be
52:10 - email and we're going to give it an ID
52:13 - the ID is also going to be email and for
52:16 - placeholder you can just go with name at
52:19 - no company.com
52:21 - and we are also going to make this
52:24 - required like
52:26 - this okay I think that will be all for
52:29 - this um input okay so that would be all
52:34 - and let's just style it for the class
52:36 - name the class name is actually going to
52:38 - reference a variable so we're going to
52:40 - call this input styles and we can Define
52:44 - this input styles here which is going to
52:46 - be this constants so input styles is
52:48 - going to be the string we are going to
52:51 - go with border and also give it a border
52:55 - gray of
52:56 - 300 and on small devices give it a text
53:01 - SM and a text black like this and we're
53:05 - going to give it rounded LG I'm just
53:08 - going to fix this yep so rounded
53:11 - LG and give it block and
53:15 - also give it a width of
53:18 - full um a padn 2.5 and on the focus
53:22 - States I'm just going to take up the
53:24 - outline by um saying outline none so
53:28 - there will be no um outline on the focus
53:30 - state so this input stes you can see the
53:33 - complete um class names and that's the
53:36 - input St we are passing to this input
53:39 - over here all right so we're going to
53:41 - have um more inputs so actually I'm just
53:45 - going to you know copy this two more
53:48 - times so we're going to use this for uh
53:51 - password so that will be the type and
53:53 - the name of this uh input field is going
53:56 - to be
53:57 - password the ID as well is going to be
54:00 - password and for placeholder the
54:03 - placeholder is also going to be password
54:06 - so let's have um password here and for
54:09 - validation apart from making it required
54:12 - we're going to give it a minimum length
54:15 - so this um password is going to have a
54:16 - minimum length of
54:19 - six like this and this is going to be
54:21 - for the uh for the name so it's going to
54:23 - be of type X so this other input over
54:26 - here and the name is going to be name
54:29 - for the username the ID is also going to
54:32 - be um John do and for
54:36 - placeholder so actually um the IDE is
54:39 - going to be name okay and then
54:42 - placeholder you can give it any
54:43 - placeholder I'll just go with um John do
54:47 - like
54:51 - this and I will change the placement of
54:54 - this input I'll cut this for the name
54:57 - and just place it right above the email
55:01 - like
55:02 - this and if we reload the browser you
55:05 - see we have uh different inputs and it
55:08 - also works fine with our
55:10 - teaming okay great so after this input
55:14 - we are going to have a button to submit
55:16 - the form so this button is going to be
55:19 - of type submit like this and it's going
55:22 - to um have the text of sign up okay and
55:28 - let's style this button so I'm just
55:30 - going to bring this um quot a single
55:32 - quot back and for the class name of this
55:35 - button this button is going to have um a
55:38 - width of full like this and this button
55:41 - is also going to have um a background
55:44 - tary
55:46 - deck and on the focus state so we're
55:49 - going to give this button outline known
55:53 - and also front media
55:55 - rounded LG text SM and also pad to the
56:01 - xais of five which I think is 20 and py
56:05 - 2.5 and also give it um the text of
56:09 - Center like this so this is the class
56:13 - name that we have on this button okay
56:17 - and just after this button I think that
56:20 - should be after this form we have
56:21 - another button and this button is going
56:24 - to have um a class name of text blue so
56:29 - we're going to give it the class name of
56:30 - text blue 700 and on the line and the
56:34 - text should just say login like
56:38 - this so we come back to the browser you
56:41 - see that we have a form and everything
56:43 - works fine with our team we can also
56:46 - check the
56:48 - responsiveness on how this form adjust
56:50 - to the different um viewports okay so
56:55 - everything seems to be working fine so
56:58 - far and you see how the form adjust
57:02 - great so next let's make sure that we
57:04 - are able to retrieve the user inputs
57:07 - from this form and at least log it to
57:09 - the console for now so to en for us to
57:12 - do this on the different input okay I'm
57:17 - actually going to um let's
57:20 - see uh I'm going to go and make this uh
57:24 - a use client component because now we
57:27 - are going to be managing State okay so
57:29 - here we are just going to define a state
57:32 - for the form data so we're going to have
57:36 - const form data and then set form data
57:40 - and this is going to be use State like
57:44 - this and we're going to
57:47 - Define um a default value so here I'm
57:50 - going to have this con which I'll call
57:52 - the default form data
57:55 - which is going to be equal to this
57:56 - object and the email is going to be an
57:59 - empty string by default and also the
58:02 - name is going to be an empty string and
58:04 - then the password is also going to be an
58:07 - empty string by default and I'll pass
58:09 - this over to this um use State over here
58:13 - great so next we can go to our different
58:16 - inputs and wire up the value okay so we
58:19 - can start with our email get rid of the
58:22 - ID since we're using um name so I'll get
58:25 - rid of the ID on all inputs and wire up
58:28 - the value so the value for the email is
58:31 - going to go to our form data. email and
58:35 - I'll just copy this and use this for our
58:37 - name so I'll change this from email to
58:39 - form dat. name and also for the password
58:43 - the password is going to be form data.
58:45 - password you can also have an unchange
58:49 - and on change we're going to call this
58:50 - function which we have not defined yet
58:52 - so handle input change
58:55 - and I'll pass this function to other
58:57 - inputs that we have sorry this unchange
59:00 - and we can go up and Define this handle
59:04 - input change function so somewhere
59:07 - around here we're going to have this
59:09 - const which we call handle input change
59:12 - which is going to be this aror function
59:14 - this function is going to automat
59:16 - automatically get the event which is
59:18 - going to be of type change event and
59:20 - it's a generic type which is going to be
59:22 - of type HTML inut M so here we're going
59:26 - to destructure some properties from the
59:29 - event Target so remember we have the
59:32 - name so we're going to D structure name
59:35 - and we're also going to D structure
59:38 - value from event Target so with this we
59:41 - can go on and update our form data so we
59:44 - call set form data and this is an object
59:47 - where we spread form data so just going
59:51 - to spread form data and we're going to
59:53 - use square bracket okay so that we can
59:55 - dynamically update the name with the
59:58 - value of the object great so this is our
60:02 - handle input change and we can also um
60:06 - Define our unsubmit function so our form
60:09 - here we can Define our own submit and
60:13 - this is going to be equal to a function
60:16 - we don't have yet we call this function
60:19 - handle submit so I'm going to copy this
60:22 - and just after the handleing F change
60:24 - say handle submit which is which is
60:26 - going to be an asynchronous function we
60:29 - get the event and this this time around
60:31 - is going to be of type form event which
60:33 - is a generic type and we said it's going
60:34 - to be for HTML form element and then we
60:38 - have our function declaration completed
60:42 - the first thing we do we're going to
60:43 - prevent default so event. prevent
60:46 - default and then we can have our TR
60:49 - catch block so this is going to be TR
60:53 - catch and we can also have our finally
60:56 - block just after the catch okay so for
61:00 - the let's see so for the tribe block we
61:05 - are going to go on and just log to the
61:07 - console for now so we're going to
61:09 - console.log um the different form data
61:12 - that we have so cons. log form data
61:15 - later on we are going to be obviously
61:17 - submitting the form and in case of any
61:19 - errors we are just going to log the
61:21 - error to the console and finally we're
61:23 - going to reset our form so we're going
61:25 - to set form data to our default form
61:28 - data okay so we have this and we're
61:31 - going to save and let's try it out back
61:34 - to the browser open the console let's
61:36 - see if we're going to see the form
61:37 - values for name I'll just go with the
61:40 - name of uh for email sorry test test.com
61:43 - for name I just go with name of test and
61:46 - for password I'll just go with 1 2 3 4 5
61:49 - 6 click on submit and great we are
61:52 - seeing our form details so we are
61:54 - correctly retrieving our form details so
61:58 - now we have this let's make sure that we
61:59 - have um sanity studio in our project and
62:02 - to integrate sanity studio in a project
62:04 - first I'm going to quit the
62:06 - terminal I'll clear and then I'm going
62:09 - to open the Explorer here and the idea
62:12 - is to move these different front end
62:14 - files and folders into a separate folder
62:16 - so I'm going to mark all actually first
62:18 - I'm going to create the new folder which
62:20 - I would call front end and then I'm
62:23 - going to Mark and move move the folders
62:25 - inside the front end folder and then
62:27 - I'll get rid of the next folder this
62:30 - folder is generated automatically for
62:32 - caching purposes by nextjs then I'll
62:35 - create a new folder called CMS and I'll
62:38 - navigate into the CMS folder so CD CMS
62:42 - and to integrate sanity studio in our
62:44 - project it's important that we first log
62:46 - out so MPX sanity at latest log
62:51 - out and I'm going to chain on that
62:54 - command and using mpm Create
63:00 - sanity at latest like this all right so
63:05 - this one word I'm just going to close
63:07 - the Explorer and fix the typo I have
63:11 - over here so it's meant to be one t so
63:14 - MPX sanity at latest log out do go and
63:18 - execute this command and let's keep an
63:22 - eye on the CMS folder first the
63:25 - C is going to install the packages and
63:28 - then we are going to be signed out so
63:30 - it's going to sign us out and we will'll
63:32 - say okay to
63:33 - proceed and we need to authenticate
63:36 - ourselves let's give it a
63:39 - second and to authenticate ourself you
63:42 - can use the keyboard arrow keys to
63:45 - navigate in this case I'll authenticate
63:47 - with Google and this opened up on my
63:51 - other screen so I'm just going to
63:53 - authenticate myself over there and if
63:56 - you had any previously existing projects
63:59 - you would see them here I had one from
64:00 - previously you can use the arrow keys to
64:03 - navigate but in this case I'll be
64:07 - creating a new project and give this a
64:09 - name of hotel management like this and
64:12 - go on to execute this
64:16 - command all right so let's give it a
64:18 - second and I would say yes to use the
64:22 - name production so the names I ually
64:24 - production or development for common
64:27 - names and I would say okay for the
64:29 - output path and for schema we're going
64:32 - to start clean and then I say yes to use
64:36 - typescript so this going to generate the
64:39 - files and then we can use npm to install
64:42 - the files that uh that get generated all
64:46 - right so once this is installed we now
64:48 - have sanity Studio here we can test it
64:52 - by running npm run Dev so that we have a
64:56 - local preview on Local Host
65:01 - 3333 so let's give it a second to build
65:03 - yep so Local Host 3333 I'm just going to
65:06 - visit this on the browser and this is
65:10 - sanity studio so let's go on and
65:12 - authenticate via Google and we are going
65:15 - to give it a second for it to load and
65:18 - this is our project now we don't have
65:21 - any schemas we are going to be creating
65:22 - schemas in the later up next we are
65:26 - going to integrate this sanity studio in
65:29 - our next project so that we use the same
65:31 - common domain rather than use different
65:35 - domains so CD out and then CD into the
65:39 - front end and now I'm inside the front
65:42 - end folder here so I am going to run the
65:45 - command to install these packages so npm
65:47 - install sanity and also next sanity like
65:52 - this so to go on and install these
65:56 - packages and we'll just wait for it to
65:59 - install let's give it a second and once
66:02 - it's um done installing next we are
66:05 - going to come into our CMS and copy our
66:07 - schema folder so I'm going to copy this
66:10 - folder and paste it inside our front end
66:13 - folder and come back to the CMS folder
66:16 - we are going to copy the sanity config
66:19 - dots file so I'll copy this and paste it
66:23 - inside the front end here great so up
66:28 - next we are going to go on now and if we
66:32 - come
66:33 - into
66:35 - uh if we come into our sanity config in
66:39 - here we going to see uh we need to add a
66:43 - property and that property we need to
66:45 - add is the base URL so just after this
66:51 - um data set here I'm going to add this
66:54 - base path and this base path I would go
66:58 - to slash Studio okay so here/ studio so
67:03 - this is going to be Local Host 3000 SL
67:05 - Studio to load the sanity Studio we have
67:09 - an error here because we need to install
67:12 - this package so mpm install at sanity
67:16 - for/ Vision so to go on and install this
67:20 - package and the error should be
67:22 - gone all right we are not done yet we
67:25 - need to add the path in our Pages folder
67:29 - so that this is going to be loaded up
67:31 - when we go to localhost 3000 SL studio
67:34 - so in the source folder and then inside
67:36 - the app folder I'll create a new folder
67:39 - and this folder I would call Studio like
67:42 - this not with a square bracket so
67:45 - studio and then inside the studio folder
67:48 - I'm going to create a special folder
67:51 - using double brackets like this and then
67:53 - I'll spread out
67:56 - index okay so once you create this
67:59 - folder do go and create the page. TSX
68:03 - file so I'll just expand this so you see
68:06 - it fully is studio and then the square
68:08 - brackets index and then page. TS so
68:12 - we're going to use the use client
68:14 - directive to make this a client
68:17 - component and in here we are going to
68:19 - also go on to import something which
68:22 - will be coming from the next it package
68:25 - that we installed and then for/ studio
68:28 - and that is the package so the next
68:31 - Studio package and with this package
68:34 - imported we are also going to import
68:36 - config and that is our sanity config so
68:39 - this is going to be coming from we're
68:41 - going to go one level
68:42 - up and still go up again and go up and
68:47 - lastly into our sanity config okay so
68:51 - now we're going to Define our jsx we're
68:53 - going to sport this as default and this
68:56 - function we are going to call
68:58 - Studio and here we are going to return
69:01 - our next config like this which is going
69:04 - to be a self closing tag and this is
69:07 - going to take in the config and the
69:09 - config is going to be our configuration
69:12 - from our sanity
69:15 - config now this is all we have to do
69:18 - okay so let's start our application
69:22 - running npm run
69:24 - Dev and then we can see if we have set
69:27 - it up correctly so I'll just wait for
69:31 - this to
69:32 - build and you can see our application is
69:35 - done and we can visit Local Host 3000 so
69:39 - we're no longer going to be going to
69:41 - Local Host 3333 SL Studio we would go to
69:44 - Local Host 3000 /
69:47 - studio and it's compiling we can confirm
69:51 - this if we go over to the IDE you can
69:54 - see is compiling SL studio and then the
69:57 - index and then the
69:59 - page so we're going to wait for read to
70:02 - compile we'll just um
70:06 - wait so here in the IDE you can see is
70:09 - compiling the page so it's done
70:12 - compiling and this page should be loaded
70:14 - up so now we can see our sanity studio
70:19 - living in our next JS project on Local
70:22 - Host 3 ,000 which is great okay and we
70:28 - just wait for it to load up lastly we
70:30 - can click on continue so that we can add
70:32 - course so this is going to take us for
70:33 - our project and all we have to do here
70:36 - is to just add course origin and we are
70:39 - redirected back to our application and
70:42 - everything works fine great so we see
70:46 - but you see we have our layout so we
70:47 - have our header component and we have
70:49 - our footer and that's because the studio
70:52 - is sharing this same layout as our
70:55 - entire application we can easily fix
70:57 - this if we come into our app and we
71:00 - create this folder so with parenthesis
71:03 - CMS and another folder called studio now
71:06 - this is Route grouping in nextjs it
71:09 - doesn't affect the URL is used for
71:11 - purposes like this where you want to
71:13 - have different layouts so I move the
71:15 - Earth folder inside the web move the
71:18 - studio folder inside the CMS
71:22 - folder and also I'm going to move
71:25 - everything we have here so the five icon
71:27 - and the homepage which is the page. TSX
71:30 - I'll move it into the web like this and
71:35 - we can go over to our
71:38 - CMS and you see we automatically had a
71:41 - layout. TSX so you can see it here in
71:43 - green that your page will had um a root
71:47 - layout so one root layout was created
71:50 - for us by default which is this root
71:53 - layout out um that was created by nextjs
71:57 - so if we go back to application you see
71:59 - that we don't have any root layout in
72:02 - our studio and if we reload our next J
72:07 - application to be sure everything is
72:09 - still working fine over there we just
72:11 - give it a second and we see that
72:14 - everything still works as expected so
72:17 - now we've done this we come over here
72:19 - before we create our schemers so we can
72:23 - actually delete this CMS folder we no
72:25 - longer need it and I am also I also
72:30 - going to now CD out of the front end and
72:34 - actually move all these files so I'm
72:36 - going to move them let's see actually
72:39 - doesn't work like this so I am going to
72:43 - again delete the cache so the next
72:48 - folder and I'll just move this down so
72:51 - I'll try to move it down here
72:54 - and I'll move so we can go on to have
72:57 - the setup we had initially and we can
73:00 - even delete the front end
73:03 - folder great so let's restart our
73:06 - application using npm run
73:12 - Dev all right so we just wait for
73:19 - it okay seems it's um seems it's ready
73:24 - so we can go back to and refresh our
73:28 - application so we can reload the
73:31 - studio and we see the studio loads up
73:35 - fine no issues and we can also reload
73:41 - our
73:42 - nextjs application actually they are
73:45 - both our nextjs application but we have
73:47 - our studio leaving in our front end so
73:50 - our nextjs application loads up as well
73:54 - great so before we create our before we
73:57 - create our schemas I would like to let's
74:01 - see so before we create our schemas
74:02 - which would leave inside this index if
74:05 - we come over to our config so our sanity
74:09 - config here I would like to move these
74:12 - into environment variables and to move
74:15 - this to environment variables I am going
74:18 - to come over to root folder here and
74:21 - I'll create a new file which which I'll
74:23 - call
74:24 - EnV and first let's get start with the
74:27 - project ID I'm going to create this key
74:29 - so nextore public uncore sanity uncore
74:35 - projector ID equal to and I'll just
74:39 - duplicate this and next I'll change
74:42 - underscore project ID to be data set so
74:46 - next public sanity data set for the
74:49 - project ID we'll copy or cut this value
74:53 - here here and I'll paste it in here and
74:55 - for the data set which is production I
74:58 - will also
75:00 - cut and paste it in here so I'll copy
75:03 - this value so in our sanity config we
75:05 - can reference this value so project ID
75:09 - is going to be equal to process. EnV do
75:13 - this and then I'll say as string and
75:16 - same for the data set so process. EnV
75:20 - and then do I'll copy this from uh
75:25 - EnV so data set and I am going to paste
75:29 - it in here and say as
75:33 - string great so now we have this you see
75:36 - in the schema we have the schema types
75:38 - which comes from our schema folder and
75:41 - if we visit the index here you see here
75:44 - we are going to be importing our schema
75:47 - types but before we continue let's
75:48 - verify our application works fine you
75:51 - see it's crashed so I'll quit and
75:54 - restart mpm runev that because we made
75:57 - changes in our EnV and it's always a
75:59 - nice practice to restart your server
76:02 - whenever you make changes so once it
76:05 - starts let's come here and reload both
76:07 - the um our web and also our CMS and here
76:12 - you see that it is you know actually
76:15 - compiling our CMS Studio index page so
76:20 - I'll just wait for this to compile
76:26 - all right so it's building up the page
76:29 - and once it's done we can go back to the
76:32 - browser okay so it is done compiling and
76:36 - here you see uh studio is loading
76:39 - up and also our front end so our studio
76:42 - is done and our front end is done and
76:45 - everything works as fine great so now we
76:49 - have this I actually close the terminal
76:51 - here we can go on to PCD documentation
76:55 - so here next up sanity which is the
76:59 - library we are going to be making use of
77:01 - so we're going to install this later and
77:04 - here you see we're going to making use
77:06 - of the um sanity
77:09 - adapter and we have to create our sanity
77:12 - schemas okay so this is one schema so
77:16 - the user schema which is required or you
77:19 - know if you go up you can see another
77:21 - way but actually I going to Define my
77:24 - own schema so that I can configure to
77:26 - our needs and you see all these FS that
77:29 - are required the password is only
77:31 - required if you use credentials provider
77:33 - which is our case in this project and we
77:36 - also need to create an account
77:38 - schema with all these fields and we also
77:41 - need to create verification token
77:44 - because we are using the email provider
77:47 - and then we have ways to configure it so
77:50 - let's come back to the IDE and let's get
77:53 - started first we are going to create our
77:55 - user schema so our user. TS file here
78:00 - and this is going to be an object so
78:03 - we're going to say con
78:06 - user is going to be equal to this object
78:09 - and let's not forget to export this
78:12 - object as the default so export default
78:16 - user so a user the way to go about it is
78:20 - by giving it a name and this name is
78:22 - going to be a string user this this name
78:25 - is for queries and this title user is
78:27 - for Stan studio and the type is going to
78:31 - be a document type so the type of this
78:35 - file is a document the schema and it's
78:38 - going to take different fields so these
78:40 - are the properties that we expect a user
78:43 - to have and to define a field I'm going
78:45 - to use this defined field which I'll
78:48 - import from sanity so that we can get T
78:50 - script autho completion and also correct
78:53 - Direction so a user is going to have an
78:57 - e admin property so that is the name of
79:00 - this field so the name is going to be is
79:02 - admin and the title for our Stan studio
79:06 - is also going to be is admin and the
79:10 - type is going to be bulying and we can
79:13 - also give a description now this is
79:16 - optional you can Define your schemas
79:19 - Fields without adding description or you
79:22 - can go on to define the description and
79:25 - for initial value I would say false
79:27 - because initially a user is not an admin
79:30 - and this field is actually going to be
79:32 - required so validation rule which is a
79:35 - function where we going to return our
79:39 - validation we're going to return row do
79:42 - required like this which is a method so
79:44 - you have to call required so this is one
79:47 - field which our user is going to have we
79:50 - can also make this read only so I'm
79:52 - going to actually comment this out so if
79:55 - you don't want this property to be able
79:56 - to change in your sanity Studio you can
79:59 - make it read only you can also make it
80:02 - hidden so hidden true but I'll just
80:03 - comment it out to let you know these
80:06 - options exist so let's define another
80:10 - field that the user would have the name
80:12 - of this field is going to be name and
80:15 - the title is going to be name okay so
80:18 - user is going to have a name property
80:22 - and the type of this is going to be
80:24 - string which is needs to be string like
80:28 - this and the user is also going to have
80:32 - a description and this is going to you
80:36 - know you can give this description the
80:38 - name of the user it is not um required
80:41 - so this description is just for your
80:43 - sanity studio and I'll make this read
80:45 - only so that we cannot change the name
80:47 - of a user and we also going to define a
80:50 - field for image
80:53 - and the type here is going the title
80:56 - sorry is going to be image and then we
80:59 - are going to have the type so the type
81:01 - is actually going to be uh URL for the
81:05 - user image okay and then we are going to
81:09 - Define another field for our user
81:11 - property and the name of this field is
81:15 - going to be uh password so user is going
81:18 - to have a password and the type of this
81:21 - is going to be of type
81:25 - string and we are also going to go on to
81:28 - make sure that this password is hidden
81:30 - so that we cannot um see the password of
81:34 - a user that's registered to in our
81:37 - application and let's go on and Define
81:39 - more Fields so we're going to Define
81:41 - another field and the name of this field
81:45 - is going to be about so a user is going
81:49 - to have an
81:51 - about and the title of this field is
81:54 - going to be about like this and the type
81:58 - because it's going to be a longer um
82:00 - string we can say it's of type text okay
82:04 - like
82:05 - this okay so you see here we can also
82:09 - add the description it is not um
82:12 - mandatory and in other schema types I
82:14 - may not even add this description field
82:17 - you just see it in your sanity Studio
82:20 - okay so this is just a brief uh
82:22 - description about the user that's the
82:24 - description I left here and I copy this
82:27 - validation rule so that we can apply it
82:30 - to other fields so I'll copy this and
82:33 - apply it to a name so that a user will
82:37 - always have a name and you can make all
82:39 - Fields required if you wish
82:42 - so let's import this schema in our
82:45 - schema types like this and if we come
82:48 - over to the browser to have a preview of
82:51 - this you see that we have a user here
82:55 - great which which is you know for now
82:58 - there is no user and you can try to
83:00 - create one but this should be created
83:02 - whenever a new user
83:04 - registered in our application so let's
83:08 - go on and create another schema type and
83:12 - the schema type we are going to be
83:14 - creating this time around is for account
83:17 - we saw this from the documentation is
83:19 - actually mandatory we create this so we
83:22 - have const
83:24 - account and we can already export this
83:28 - as the default so export default account
83:32 - and the name is going to be account like
83:38 - this and the title is also going to be
83:42 - account and then the type of this is
83:45 - going to be a document so we're going to
83:48 - give this a type of
83:51 - document and then we are going to go on
83:54 - to give this the different fields that
83:56 - the account is going to have so I'm
83:59 - going to make use of the defined field
84:02 - function from sanity and the name of one
84:07 - field we are going to have is the
84:09 - provider type okay so an account is
84:13 - going to have the provider type because
84:15 - we are going to be using different
84:17 - providers GitHub provider and Google
84:20 - provider even credentials
84:23 - provider okay so we are going to have
84:26 - another um field which is going to be
84:28 - provider id and this is going to be
84:32 - provide uh provider account ID and this
84:35 - over here is going to be the refresh
84:39 - token and I'm going to just go on to
84:42 - duplicate this and the next field user
84:46 - is going to have is the assess
84:50 - token like this and lastly the next
84:54 - field the user is going to have is the
84:57 - assess token expired expires and this is
85:01 - going to be of type
85:03 - number okay and we can go on to Define
85:08 - one more field and this field let's just
85:11 - give this field a name and the name of
85:13 - this field is going to be user so that
85:15 - we can have a reference to the user
85:19 - schema and the title is going to be user
85:21 - the type is going to be of type
85:25 - reference like this okay and then it
85:28 - needs to point to the user so reference
85:30 - to and then we're going to have the type
85:32 - the type is going to be user like this
85:37 - so this is the accounts and we are going
85:39 - to import this inside of our schema
85:42 - types so our accounts will come from our
85:46 - do/ account okay and let's create on the
85:49 - schema and this schema type is going to
85:51 - be book booking because we are going to
85:54 - be booking hotels and we want to have a
85:56 - booking type okay so the concept booking
86:00 - is going to be equal to object and we
86:02 - can already export this as the
86:06 - default so the name of this is going to
86:09 - be
86:11 - booking and also the title of this is
86:14 - going to be equal to
86:17 - booking and then we have the type which
86:20 - is going to be of type
86:25 - document and now let's go on to describe
86:27 - the different fields that uh booking is
86:31 - going to have in our application so we
86:33 - use the defined field method and this U
86:38 - the the name of one field the booking is
86:40 - going to have is user and then the title
86:43 - also is going to be user the type is
86:46 - going to be
86:50 - reference and then we need to add two so
86:53 - that this reference points to the user
86:56 - schema okay so two is an array of
86:59 - objects where it takes the type and the
87:01 - type is going to be user so a booking
87:05 - will also the user would also have this
87:07 - validation where we say the rule and
87:10 - here we say it is actually required like
87:14 - this so we're going to Define another
87:16 - field so Define field like this and the
87:19 - name of this field is going to be hotel
87:22 - room so I'm actually going to cut this
87:24 - and then add the name hotel room like
87:27 - this and also the title so the title is
87:32 - going to be equal to hotel
87:35 - room and the type of this is going to be
87:38 - a reference
87:39 - type and which is going to be pointing
87:42 - to the hotel room schema and we haven't
87:45 - created this um schema type yet it's
87:49 - okay we are going to be um creating this
87:51 - type type soon so we have an error and
87:56 - that's um let's see we'll come back to
87:58 - it for validation we just going to say
88:01 - this is required okay so Rule and here
88:04 - we say ru. required like this so let's
88:09 - inspect our error and let's see yeah so
88:13 - that's because it's meant to be an
88:15 - object so I'm going to cut this and put
88:18 - it in an object like
88:20 - this cool so let's duplicate this type
88:24 - and the next type you're going to have
88:26 - is for our checking
88:29 - date and the title is going to be
88:32 - checking date because the booking we
88:34 - want to keep track of when the user
88:36 - checks in and also when the user is
88:38 - going to check out and the type of this
88:41 - is going to be a type of date okay and
88:45 - I'm going to duplicate this for our
88:47 - checkout date so rather than checking
88:50 - this time around a checkout date and the
88:52 - title is also going to be checkout date
88:56 - and every other property Remains the
88:58 - Same so apart from checkout date uh
89:01 - booking is also going to have the number
89:05 - of um days so the number of days we
89:07 - expect the user to book this room and
89:11 - the title is also going to be number of
89:15 - days and the type is going to be of type
89:18 - number and the initial value is going to
89:20 - be one so once you create a booking
89:22 - you're going to have number of days
89:24 - which is minimum one and we we can
89:27 - change that mean here to be one like
89:31 - this and I'll duplicate this and here we
89:34 - can go on to add the discount so in case
89:38 - um a user booked a room that had a
89:41 - discount okay so this is going to be a
89:44 - title discount type number initial value
89:47 - zero and minimum zero like this and I'll
89:52 - just bring this down again and we're
89:54 - going to have another field to keep
89:57 - track of the number of adults so the
89:59 - title is going to be adults the name
90:01 - adults initial value is one and the
90:04 - minimum value is one for creating a
90:09 - booking okay and apart from adults we
90:11 - also need to keep track of the children
90:14 - and the title is going to be children
90:18 - type um number initial value zero the
90:21 - minimum also zero like
90:25 - this and let's um duplicate this and
90:29 - another field we want to keep track of
90:32 - is the total price so the name is total
90:36 - price the value is total price and the
90:39 - type remains of type number no initial
90:43 - value great so I'll zoom out a bit so
90:45 - that we can see the different fields
90:49 - here so for a booking
90:52 - hope and if you need more clarification
90:54 - please do make reference to the GitHub
90:57 - repo okay so in case you made a mistake
91:00 - please do reference the GitHub and here
91:03 - in index I'm going to import the
91:07 - booking okay so let's go on and create
91:10 - uh more schemers and the schema we're
91:13 - going to create is a hotel room now this
91:17 - is actually you know going to take a lot
91:19 - of schema so I ADV again that you go to
91:23 - the GitHub in case you know to just make
91:26 - sure everything works fine and the title
91:29 - of this hotel room is going to be hotel
91:33 - room and the type is also going to be of
91:37 - type document and then we can have the
91:41 - different fields okay so to get that
91:45 - script Auto completion I would make use
91:47 - of this defined field from sanity
91:52 - okay so let's uh a hotel room we
91:55 - definitely have a name so the name is
91:58 - name and the title is equal to title and
92:02 - the type of this hotel U the name sorry
92:05 - is going to be of type
92:08 - string and also for validation you can
92:11 - have more you know validation that than
92:14 - we have seen so far so we have a
92:16 - validation room and here we can go on to
92:19 - say that this is required and we can
92:22 - also go on to say that this should have
92:25 - um a maximum of let's just say 50
92:28 - characters like
92:30 - this and while we having an
92:34 - error um actually let's see why we have
92:40 - okay yeah so we forgot to call the
92:43 - required like this so we have to call
92:45 - required and then we can go on to add
92:48 - our own custom error so like this and
92:51 - here we we can just go on to write any
92:54 - error message that we want to see in our
92:55 - sanity studio so maximum 50 characters
93:01 - okay so we have more Fields um for the
93:04 - hotel room so hotel room will will also
93:08 - have a
93:09 - slug and this doesn't actually no it
93:12 - doesn't have a title so I'll take this
93:14 - off and the type is going to be of type
93:18 - Slug and I will take off this um other
93:23 - validation Rule and we can have options
93:26 - so for slog and options is an
93:31 - object okay so options is an object
93:33 - where we can specify this source so this
93:37 - uh slug we want the source to be from
93:40 - the name field which we defined um above
93:45 - okay so let's define another
93:48 - field for our hotel room and a we have a
93:53 - description and the title is going to be
93:56 - equal to
93:59 - description and the type of this is
94:03 - going to be text because it's going to
94:05 - be u a much more longer
94:11 - um string and here we have this
94:14 - validation where we can make use of 100
94:17 - characters 100 but rather than maximum
94:20 - you can SC with mean and update text to
94:24 - minimum 100
94:27 - characters for the description so let's
94:30 - copy this here and Define another field
94:35 - for the price and the title is going to
94:38 - be price the type is going to be of type
94:43 - number and this is going to have a
94:45 - minimum of 100 so maybe 100 USD for our
94:48 - price everything Remains the Same and
94:52 - next we have a discount so that we can
94:54 - leave discounts on our various hotel
94:57 - rooms so the type is going to be number
95:01 - and the minimum this time around so
95:03 - we're going to have row. mean the
95:06 - minimum is zero so zero like
95:09 - this okay and we can also add add an
95:13 - initial value of zero so by default um a
95:16 - hotel room doesn't have a discount so
95:19 - the discount is zero
95:22 - and let's continue let's define more
95:25 - Fields so we're going to have this field
95:27 - for images and the title is going to be
95:31 - equal to images okay so the type this
95:35 - time around is going to differ it's
95:36 - going to be an array type and next we
95:40 - are going to have an array of what so
95:42 - it's an array again where we have an
95:44 - object here we can customize the type
95:47 - and say the type is going to be object
95:50 - like this okay and we have Fields
95:54 - actually this Fields needs to be defined
95:57 - inside this subject so erase it and come
96:00 - inside this object and Define the fields
96:02 - great so it's going to have fields which
96:04 - is an array we can pass the name and
96:07 - here the name needs to be in an object
96:10 - like this yep so we have the name which
96:12 - is going to be URL and we can also pass
96:15 - a type the type is going to be of type
96:18 - URL as well and then we can pass the
96:22 - title the title is also going to be
96:27 - URL great so I'm actually going to copy
96:30 - this object we have in here and I'll
96:33 - duplicate it this time around for file
96:36 - so the name is going to be file the type
96:39 - also is going to be file the title is
96:44 - going to be file like
96:46 - this we can also add validation rule to
96:50 - this um images which is an array so we
96:54 - have our rule function and here we are
96:57 - going to return return Ru do
97:02 - required okay and we can also go to um
97:05 - add a mean of three and also a costume
97:09 - error so this is an array that means it
97:11 - needs to be an array of minimum length
97:14 - of three okay so minimum of three so
97:19 - minimum of three images requ ired like
97:22 - this and then we can go on to Define
97:25 - more fields for our hotel room
97:29 - okay so let's add more the name of this
97:34 - field is going to be equal to the um
97:39 - cover image like this and the title is
97:44 - also going to be equal to cover
97:50 - image and the type is going to be of
97:53 - type
97:54 - object and next we have the field
97:58 - because it's an object so it's an array
98:01 - where we have the name and the name is
98:03 - going to be URL and the type is also
98:06 - going to be URL like this and then we
98:09 - have the title and the title is going to
98:13 - be URL so I'm just going to duplicate
98:16 - this where we are going to have the
98:20 - name
98:22 - so the name here and the name is going
98:24 - to be file and the type is going to be
98:29 - file as
98:31 - well and for the title we will also give
98:34 - it a title of
98:38 - file okay so let's add more uh let's add
98:42 - a validation before we continue and
98:45 - let's just go on to say that this cover
98:47 - image is required so we can have our
98:50 - rule
98:52 - and we are going to return our rule here
98:57 - and just say it's
98:58 - required and then let's not forget to
99:01 - call and also add our error we have our
99:05 - message and say cover image is required
99:09 - here next we're going to Define another
99:12 - field okay and this is an object so we
99:15 - have to add an object we have a name and
99:18 - the name of this field is going to be
99:20 - type
99:21 - and the title is also going to be room
99:24 - type but now just fix this typo in
99:30 - here like this and now we're going to
99:33 - have the type the type is going to be of
99:37 - type string okay but when it comes to
99:41 - options we need to Define these options
99:44 - because now we have list we're going to
99:46 - define the list up here okay so let's
99:50 - define the list by having this constant
99:52 - what that we call room
99:55 - types which is going to be equal to an
99:58 - array okay for title we're going to have
100:01 - our first room type which is going to be
100:03 - basic and then the value is going to be
100:06 - basic with a lower case b so
100:10 - basic like this and this has to be in an
100:14 - object so cut and wrap it around an
100:16 - object and then I'll bring this down two
100:19 - more times and the next type we're going
100:21 - to have is
100:23 - luxury for the
100:26 - title and also for the value but with a
100:30 - lower case
100:32 - L and the next is suit and the value is
100:36 - also going to be suit like this so we
100:38 - can pass the um room types as a value to
100:43 - this list over here so we're going to
100:45 - have a list and for validation we can
100:49 - have a validation ru
100:52 - rule so we have our function and here we
100:55 - are going to Reon our Ru that makes this
100:58 - required we can also add an initial
101:00 - value so the initial value is going to
101:03 - be basic so when we create a room it's
101:06 - going to be a basic room by default so
101:09 - I'll duplicate
101:11 - this and the next type um is going to be
101:15 - special notes that is the next field
101:17 - sorry and the title is going to be shall
101:21 - note the type is going to be of type
101:24 - text I'll get rid of the
101:26 - options and for initial value I'll just
101:29 - paste in this text over here not room
101:32 - types just paste in this text and zoom
101:34 - out so it just um a normal string you
101:38 - know just giving the user some
101:41 - information so this is the initial value
101:45 - and it is also um required so that's not
101:50 - all for the hotel room we still have
101:52 - more fields and the next field is going
101:55 - to have the name of Dimension this field
101:58 - is not going to be required the title is
102:02 - going to be
102:04 - Dimension and the type of this is going
102:07 - to be of type string so it's not going
102:09 - to be required and this configuration is
102:12 - actually okay for the dimension and
102:16 - let's define more Fields the next field
102:19 - is going to be number of um
102:23 - beds and the title is going to be number
102:26 - of
102:27 - bread the type is going to be of type
102:32 - number and here next we are going to let
102:35 - me just fix this up our validation where
102:39 - we have our validation Rule and we are
102:41 - going to return return a rule that makes
102:45 - this um required and have a minimum of
102:49 - one okay we can also give it an initial
102:52 - value in that case and give it an
102:54 - initial value of one as
102:57 - well and let's define more Fields the
103:00 - hotel room is going to go to have uh an
103:05 - offered
103:07 - amenities like
103:09 - this and the
103:11 - title is going to be equal to offer
103:19 - amenities and now let's have the type
103:22 - the type is going to be equal to where
103:25 - is it it's going to be of type
103:27 - array and next we're going to have an
103:30 - array off so we're going to have the off
103:33 - value which is also an array and we can
103:36 - configure it with this OB U object so
103:39 - the type is going to be
103:42 - object and then it's also going to have
103:45 - the different
103:47 - fields okay so the field is an array and
103:51 - we can also give it a
103:53 - name and the name is going to be icon so
103:56 - we intend to use Font aome icon so that
103:59 - we can integrate this seamlessly in our
104:02 - front end we'll get to that when we
104:05 - start fetching data and when we start
104:07 - creating a room so this is going to have
104:10 - another object and the name this time
104:12 - around is going to be the
104:15 - amenity okay no worries we will see how
104:18 - this works and this is going to have a
104:21 - title of
104:23 - amenity and it's also going to have a
104:26 - type and the type is going to be you
104:29 - know of type string
104:32 - here I'm not actually going to copy that
104:36 - we are going to Define another field for
104:39 - our hotel room and the next field for
104:42 - our hotel room is to find out if the
104:45 - auor room is booked and the title is
104:48 - going to be is booked like this
104:51 - the type is going to be of type
104:54 - bowling and we're going to have an
104:56 - initial value of false because initially
104:59 - this room is not booked so I'll bring
105:02 - this down I think two more times where
105:04 - we have the next one is
105:06 - featured so the name of this field is
105:09 - going to be featured and the title is
105:12 - also going to be is featured and every
105:15 - other values can remain the same so next
105:18 - we're going to have reviews because
105:21 - a hotel room is going to have
105:24 - reviews and the title is going to be
105:27 - reviews the type is not going to be
105:30 - bullying the type is going to be of type
105:33 - array and we are going to configure so
105:36 - we're going to have an array of words so
105:39 - I'm going to fix this typo here and it's
105:42 - going to be an array of type review so
105:45 - of type our review schema which we have
105:47 - not defined yet so let's put this hotel
105:51 - room schema in our index here actually
105:55 - we need to export it first so let's
105:57 - export default uh hotel room like this
106:01 - and now we can import it in our
106:06 - index.ts so let's take one last look of
106:09 - the hotel schema in case you missed
106:11 - anything please do refer to the GitHub
106:14 - where you would see um the code which we
106:18 - just wrote out together
106:21 - okay so this is the hotel schema let's
106:23 - create more
106:26 - schemas the next schema we're going to
106:28 - have is going to be a review schema okay
106:32 - so it's going to be pretty much
106:34 - straightforward so we have con review
106:37 - the name here is going to be a name of
106:43 - review title is going to be review and
106:47 - the type is going to be of type document
106:50 - docment like this and then we have the
106:53 - different fields for our review so this
106:56 - review needs to be linked to a hotel
106:58 - room and also to a user so one field we
107:01 - are going to have is the name user and
107:05 - also
107:08 - the the title is going to be equal to
107:13 - user and the type is going to be of type
107:19 - reference we are not getting Auto
107:22 - completion so I'm going to cut this
107:25 - object and make sure that I have it in
107:27 - the
107:28 - defined um the defined field method that
107:32 - comes from sanity then I'll past in this
107:36 - field and we have this error already
107:38 - because a reference type needs to point
107:40 - to a document so we're going to have
107:42 - this two and this two is going to be an
107:45 - array and this array of object here I
107:48 - will say the type is is going to be type
107:53 - user can have a validation room and here
107:57 - we are just going to receive our
107:59 - validation Rule and return return not
108:03 - here so we're going to return return the
108:05 - rule that make sure that this field is
108:08 - required like
108:11 - this so let's copy and paste it because
108:14 - next looks similar because next is also
108:16 - going to be a reference type that will
108:18 - be pointing to the hotel room and the
108:20 - title is going to be hotel room the type
108:24 - is um reference the type here is going
108:28 - to be hotel room like this and then our
108:32 - review just has um some more couple of
108:35 - fields so let's bring this down two more
108:38 - times and this is going to have a name
108:41 - of text which is the actual review text
108:45 - and the title is going to be review text
108:48 - the type is going to be text
108:50 - and the type here is sorry going to be
108:54 - reference and the type here sorry I'm
108:58 - just going to R this to text and get rid
109:01 - of this to here great so that fixes it
109:05 - and next is the user rating so this is
109:09 - the user rating which should be between
109:11 - 1 to five the title is going to be user
109:14 - rating the type is going to be of type
109:18 - number and I'll get rid of this two and
109:21 - apart from required I'm going to chain
109:24 - mean it's going to have a minimum of one
109:27 - and also a maximum of
109:32 - five and we can just have our costume
109:35 - eror so we just telling the user rating
109:39 - must be between not a so rating must be
109:41 - between one and
109:47 - five so this is our review schema let's
109:50 - not forget to export this as a default
109:53 - so export default
109:55 - review and we can already import this
109:58 - inside of our schema types so I'm just
110:02 - going to remove every other tabes that
110:04 - we have open and save this we are not
110:07 - done creating our schema actually we
110:09 - have one last schema to create and this
110:12 - is our
110:14 - verification um token so this is the
110:16 - last schema we will be creating and this
110:18 - is because we are making of the email
110:21 - provider so we have this con which is
110:24 - going to be we call verification token
110:27 - and let's not forget to export this
110:29 - already so the verification token schema
110:33 - is going to be um pretty much
110:36 - straightforward okay and this
110:38 - verification is going verification token
110:41 - is going to have a name of verification
110:44 - token like
110:46 - this and next is also going to have a
110:49 - title and the title is going to be equal
110:51 - to verification
110:54 - token okay and the type is going to be
110:58 - of type document okay like this and now
111:02 - let's have the different fields so field
111:05 - is an array we're going to use our
111:07 - defined Fields method and one field we
111:10 - are going to have is going to have the
111:11 - name of identifier so it token is going
111:15 - to have the name of identifier and the
111:18 - title is is going to be equal to
111:21 - identifier like
111:23 - this and the type is going to be of type
111:32 - string and I'll just bring this down two
111:35 - more times and next we are going to have
111:38 - a token so a sply token and the title is
111:43 - going to be equal to token and the type
111:47 - remains string and the next is expires
111:51 - and the title is going to be expires and
111:53 - the type is going to be date time like
111:57 - this and this is for our verification
112:00 - token so pretty straightforward and I'll
112:02 - fix this typo over here should be
112:04 - verification token like this and this is
112:07 - our verification token schema so we can
112:10 - import it inside of our index. TS so
112:15 - verification token and that's it for
112:18 - creating our schema pretty intense you
112:21 - can verify in the GitHub and we miss our
112:25 - verification token here so let's see the
112:28 - type if it's actually of type
112:30 - document yeah it's of type document so
112:33 - let's come back to the
112:34 - browser and we see our verification
112:37 - token so everything is fine pretty
112:39 - intense if you missed any please do
112:41 - check the GitHub now we can proceed with
112:44 - our
112:45 - authentication using next off so get
112:48 - started with next off here we are in the
112:51 - documentation and we see the command to
112:54 - install next or
112:56 - sanity but let's scroll further down to
112:59 - the example usage so here you see to use
113:02 - the GitHub provider you need the GitHub
113:04 - client ID and the client secret so what
113:08 - you do next you come over to your GitHub
113:11 - profile and click on your profile Avatar
113:14 - over here and you click on
113:18 - settings so once here you can click on
113:21 - developer settings and then click on or
113:26 - apps you create a new app I had an app
113:29 - from previous and you could give this um
113:32 - application name hotel management and
113:36 - the homepage URL we can take this from
113:39 - our application and paste it in
113:43 - here and same for the authorization
113:46 - callback URL so Local Host 3,000 and
113:50 - register
113:51 - application so here we have our client
113:54 - ID I'm going to copy our client ID and
113:58 - come over to the IDE and in our EnV I'll
114:02 - create a new key which I'll call GitHub
114:07 - uncore client _
114:10 - ID and also create um GitHub client
114:14 - secret so GitHub uncore client andore
114:19 - Secret
114:20 - secret and we can get this from our repo
114:24 - so here we are going to generate a new
114:26 - client secret and you provide your
114:31 - password and then you click on
114:35 - confirm so now you have the client
114:37 - secret you can copy and before you go
114:39 - back to the uh IDE click on update
114:43 - application and next you can now P this
114:47 - in the IDE over here okay so we also
114:50 - need our Google client ID and our Google
114:54 - client secret so here we going to say
114:57 - Google client ID and equal to then we
115:01 - can also type our Google
115:04 - clients
115:07 - secret so let's go over for our Google
115:10 - client ID so come over to
115:12 - cloud.google.com
115:14 - and go over to the
115:18 - console
115:22 - okay so let's wait for this to load
115:27 - up and you would have to agree to the
115:30 - times of service and click on agree and
115:38 - continue okay so come over to this tab
115:41 - here where we have this drop down to
115:43 - select the
115:44 - project and we're going to click on new
115:48 - project
115:52 - so you can give this project a name I'm
115:54 - going to give this um project a name of
115:57 - hotel management like this and click on
116:02 - create okay to create this new
116:04 - application so take note of this Bell
116:07 - icon here so once the application is
116:09 - created we are going to be notified yep
116:12 - it's done and you can select the project
116:16 - now we in the project dashboard let's
116:18 - create our a AP keys so to do that you
116:21 - can come over to apis and services and
116:25 - here click on all off consent
116:30 - screen yeah so we click on off consent
116:32 - screen and it brings us to this um
116:36 - dashboard we'll just wait for it to load
116:40 - up and here for the user type please
116:43 - select external so that is available for
116:46 - anyone with a Google account and click
116:48 - on create
116:50 - and we need to give this application a
116:53 - name I would also give it the name of
116:55 - hotel management and this name is a name
116:57 - that is going to be visible on the um UI
117:00 - when Google is asking the user to
117:03 - authenticate so this could be your brand
117:05 - name and give the supports email and
117:09 - come down
117:11 - here and for developer address I will
117:15 - also go on to provide um the same email
117:18 - address over here so bright 2 which is
117:21 - the email address for this project sorry
117:25 - the Google account I created for this
117:27 - project so P Library 2 and click on Save
117:30 - and continue so the next step is copes
117:34 - we can actually skip this so just say
117:36 - save and continue for test users we
117:39 - would also say save and continue and
117:42 - here you can see the summary of the
117:45 - information you
117:47 - provided okay so this is the the summary
117:50 - and for us to proceed you can now come
117:53 - over to
117:58 - credentials and here in credentials tab
118:01 - you just click on create credentials and
118:03 - you choose all of client
118:07 - ID and for application type we'll choose
118:10 - web application you can leave every
118:14 - other thing
118:16 - here and then we come down here we are
118:18 - going to click cck on ADD URI for
118:21 - authorized redirect
118:23 - URI and this URI is going to be HTTP
118:27 - colum for/ localhost colum and then here
118:32 - we have 3,000 for/ API for/ off for/
118:37 - callback for/ Google like
118:40 - this and you can okay I'll just delete
118:44 - this water one here so that's the
118:46 - URI and then once you have this URI you
118:49 - can come down and click on
118:54 - create so this has been created we have
118:56 - our client ID I'll copy this client ID
119:00 - and P this in the IDE and go over to
119:03 - copy our client secret so this client
119:06 - secret and I'll paste it in here as
119:10 - well and I'll just say okay over here so
119:14 - this is all we need at least to get
119:16 - started with uh authentication Google
119:19 - and
119:20 - GitHub okay so now we have all of this
119:22 - we can come over to next sanity and copy
119:25 - this installation command open our
119:27 - terminal and I'm going to create our
119:31 - terminal and paste this in here so mpm
119:36 - install next off sanity and we also need
119:38 - to install another package which is the
119:42 - next off package like this please do go
119:45 - on and install these packages
119:50 - and I'll just wait for it to install and
119:52 - once installation is completed we are
119:55 - going to start our development server
119:57 - with npm run
119:59 - Dev okay so in our source
120:02 - folder here in our source folder we are
120:05 - going to create an API folder which is a
120:07 - special folder in
120:09 - nextjs and here we're going to create an
120:12 - off and inside the off we are going to
120:15 - create this special folder with next off
120:17 - like this and here we are going to
120:20 - create a route.
120:25 - TSX sorry a route. TS so here it is API
120:29 - off next off and route. TS you can also
120:32 - see it over here okay and to create this
120:36 - we need to import the next off not from
120:40 - next off off so next off is just going
120:43 - to come from next off like
120:46 - this and here we are going to create our
120:50 - Handler so we say con Handler is going
120:53 - to be equal to next off so I will remove
120:57 - this inputs we have here and make this
121:01 - to be an uppercase
121:03 - n and we call this and you see it takes
121:07 - in some options we don't have yet and
121:10 - let's go on and Export this already so
121:13 - we export this as an object like this so
121:16 - we export Handler as get it all has to
121:18 - be open case and we'll also export
121:23 - Handler as post like this and we need to
121:27 - provide the options for this we are
121:29 - going to create a new folder in our
121:33 - source folder which will call lebs for
121:36 - library and here we are going to create
121:39 - our off. TS
121:44 - file okay and this off. TS file we can
121:48 - go on and export ort this constant which
121:51 - will call off options off options is
121:54 - going to be of type next off
121:58 - options which needs to be imported from
122:00 - next off and equal to this object so we
122:04 - can already import this other options
122:07 - inside of this uh route Handler
122:11 - here and I'll just rearrange the
122:15 - order so now we have this let's have our
122:18 - options defined in here so the first
122:20 - options we are going to provide is the
122:23 - providers which is an array and for
122:25 - GitHub we are going to have our
122:29 - GitHub provider like this which we need
122:32 - to import okay so this GitHub
122:35 - provider we are going to import this um
122:38 - GitHub provider coming from next
122:44 - off so next off for slash providers and
122:48 - for Slash GitHub okay and we can already
122:51 - import the Google provider coming from
122:54 - providers for/ Google and we're going to
122:58 - change the name here to Google
123:01 - provider so this GitHub provider as we
123:04 - saw documentation it takes in the client
123:10 - ID and this is going to come from our
123:13 - process.
123:15 - EnV and then do um let's go back to our
123:19 - NV file and copy this key so GitHub
123:23 - client
123:25 - ID and you say as string to avoid any
123:30 - errors and then for the client secret it
123:33 - will also be coming from our process EnV
123:38 - and then do we copy this GitHub client
123:41 - secret
123:42 - key and we use it in here and we say as
123:46 - string like this
123:50 - okay so now we have this we have this
123:53 - error so I'm just going to fix this typo
123:55 - here it should be string like this and
123:58 - next we can have our Google provider so
124:00 - I'll duplicate this and I'm going to use
124:05 - actually copy this Google provider and
124:08 - use here so I'll copy the client ID from
124:12 - EnV and replace this as well as the
124:16 - client
124:17 - secret so place this value over here
124:21 - okay so after this we also need to go on
124:25 - and provide
124:28 - the
124:30 - not this so we're going to provide the
124:33 - sanity credentials which needs to be
124:35 - imported from next of Sanity like
124:38 - this and this sanity credentials is
124:41 - going to take the client so we don't
124:44 - have the client yet we are going to
124:47 - create the client in a second and here
124:49 - the session is an object and we say the
124:52 - strategy is
124:54 - JWT like
124:56 - this okay so the next configuration is
124:59 - the adapter and the adapter we're going
125:01 - to be using is going to be our sanity
125:04 - adapter which also needs to be imported
125:07 - from next of sanity and we call this and
125:11 - it also needs a client we are going to
125:12 - provide the client in a second and next
125:16 - we want to get useful the buug consoles
125:19 - so here we're going to set this only if
125:22 - not EnV is equal to development so that
125:26 - means the bug is going to be true in
125:28 - that case and for the secret we can
125:31 - Define this in our process. EnV so here
125:36 - in our EMV file we're going to call this
125:38 - next oore
125:40 - secret and I'll just go in um word
125:44 - secrets you provide um much more hard
125:47 - word to guessing in your case and this
125:50 - secret would be coming from our
125:52 - process.env and then with this next of
125:56 - secret
125:58 - key and we also need to provide more
126:00 - configuration for now the Callback I
126:03 - will just leave this empty object we are
126:05 - going to revisit this callback so let's
126:09 - create our um let's create our
126:12 - credentials our sanity client to pass to
126:14 - our sanity
126:16 - credentials and to do this still in our
126:18 - lips folder I'm going to create a new
126:21 - file and this new file I would call
126:24 - sanity Dots
126:27 - here and let's go on and import the
126:31 - create client method which comes from
126:34 - next sanity here and we can have our
126:38 - sanity client variable which is going to
126:40 - be equal to this create
126:43 - client and this needs the project ID
126:46 - which we are going to get from our
126:47 - process
126:49 - and it also needs the data set we will
126:51 - come back to these and it also needs
126:54 - this use CDN all right so this ucn we
126:58 - are going to set it to be true only if
127:00 - we are in production so if process. env.
127:04 - notore EMV is equal to production like
127:08 - this okay and next we need to pass the
127:11 - token and for the token let's do that
127:14 - later and next we need to pass the API
127:17 - version and the API version is going to
127:19 - be
127:19 - 2021 iPhone 10 iPhone 21 like this so
127:24 - for the project ID we can copy this from
127:27 - uh EnV so next off sanity project ID so
127:33 - project. EnV and I'll P this key same
127:35 - for our data set which also be coming
127:39 - from our process.
127:41 - EnV next public sanity data set and for
127:45 - the token we can come to our application
127:49 - and here I'll just click on this Avatar
127:52 - and go over to manage
127:56 - project okay so now we are here we just
128:00 - wait for this to load up you can come
128:02 - over to the API section so click on the
128:05 - API section and click on token and we're
128:08 - going to click on ADD API token and we
128:11 - can give this API token and name we see
128:14 - some example names that we have up here
128:17 - and I'm just going to give this a name
128:19 - of read and write assess like
128:24 - this and I think we can space this okay
128:27 - read and WR access and most importantly
128:30 - you should make this editor like this so
128:32 - click on this checkbox and you see you
128:34 - need to have read and right access to
128:36 - our
128:37 - database our data set so I'm going to
128:40 - copy this
128:42 - token and come back to the ID here come
128:47 - to the EnV and I'll create a new EnV key
128:50 - for this
128:52 - token and this I'm going to call
128:55 - sanity like this underscore Studio
128:59 - underscore
129:02 - token and then I'm going to paste in
129:04 - this our token and copy
129:07 - this and come over to our sanity TS and
129:11 - the token is going to be coming from our
129:13 - process EnV and then sanity Studio token
129:18 - like this
129:19 - let's export our sanity client so we're
129:22 - going to export this as a default
129:26 - export so we can pass our San client to
129:30 - the San credentials and San adapter and
129:33 - I will let the IDE import this from our
129:37 - sanity
129:39 - file okay so this is what we have going
129:42 - in our off. TS file over
129:46 - here so these are the
129:49 - settings and now we are done with this I
129:51 - will just close all these tabs that we
129:53 - have here and we can come over to our
129:56 - components and in here I'm going to
129:58 - create an O provider so that we can
130:02 - provide this to our component so we have
130:04 - our off
130:06 - provider.
130:07 - TSX and I can already make this uh
130:11 - client component making of This use
130:13 - client
130:14 - directive and next I'm going to import
130:17 - session Provider from next o
130:20 - react and this is the jsx so I'll call
130:24 - this next o
130:26 - provider and this is going to be equal
130:28 - to this aror function and we're going to
130:30 - receive props so Props is an object
130:33 - where we dist structure children and we
130:36 - say this is going to be of type um props
130:39 - and we can Define the props up here so
130:42 - type props is going to be equal to this
130:44 - object where we take children and
130:46 - children is going to be of type react.
130:49 - react node like this and come down here
130:53 - we can have our return return where we
130:55 - return return the session
130:57 - provider and in here we are just going
131:00 - to wrap it with this children that we
131:02 - get from our props like this so we have
131:05 - this provider we need to make use of it
131:08 - in our layout
131:11 - okay so come over to the app and in here
131:14 - to the web and in here to the layout.
131:17 - TSX
131:18 - and I'm just going to
131:21 - cut and wrap everything with our next o
131:25 - provider which needs to be imported from
131:28 - our components Earth provider and Earth
131:32 - provider so this import over here so
131:36 - everything is
131:37 - fine um for now and now we have this we
131:41 - can go on and come over to uh o and then
131:47 - uh sign up our page so I come back to
131:51 - our app and here our Earth page. TSS and
131:56 - this is the handle submit
131:58 - function first I'm going to quit our
132:01 - terminal I'm going to restart our server
132:04 - okay so before we actually continue this
132:07 - page we are going to be sending some
132:09 - toast
132:10 - notification so for that I'll come over
132:13 - to our components and create a new
132:15 - folder which I'll call Toast TSX
132:20 - toast and create a new file which I'll
132:23 - call toast. TSX so in here we are going
132:27 - to import the react hot toast package so
132:31 - mpm install react hyphone hot hyphone
132:34 - toast like this and I'm going to make
132:37 - this a client component making use of
132:41 - the use client directive and then I'm
132:44 - going to import toaster which comes from
132:46 - react hot toast
132:48 - so this is pretty straightforward we are
132:50 - just going to have this toast GSX and
132:53 - here we are going to Reon toaster like
132:57 - this and we're going to export default
133:02 - toast now to make use of this Library we
133:05 - are going to first restart our
133:08 - development server and then come back to
133:11 - our layout where we import this um toast
133:15 - so
133:16 - here come over to the web and in the
133:19 - layout. TSX so just right above the main
133:24 - I'm going to import to that will come
133:26 - from our components toast SL toast and
133:30 - this file this component
133:33 - here okay so now in the page. TSX I'm
133:36 - just going to make sure that you know we
133:39 - are still getting our console.log so
133:43 - here I'm just going to open up the
133:45 - terminal and here I'll visit the off
133:52 - page so I'll click on this Avatar and
133:55 - this is going to take us to the
133:56 - authentication page and I don't see the
133:59 - bother around the input and to fix that
134:03 - I'm just going to Y have this hphone
134:07 - here and I'm just going to reload the
134:11 - page okay so that's we see our
134:16 - changes
134:18 - and once it reloads we get an error
134:21 - actually so if we see this error is
134:25 - because we have uh you see we have this
134:30 - uh where is it so you see Local Host
134:34 - 3000 API off is not found and if we come
134:38 - back to the IDE that means our API
134:41 - folder is outside of our app folder okay
134:46 - so you see our API folder actually this
134:49 - folder needs to be inside of our app
134:52 - folder and that's why we get this error
134:54 - message that this F for that that page
134:58 - canot be found okay and to fix this
135:01 - error we are just going to drag the API
135:04 - folder inside the app folder like this
135:07 - we're going to move it and this is the
135:11 - API folder actually inside the app
135:14 - folder okay so inside the app folder
135:17 - like this and if we come back to the
135:19 - browser and just reload this
135:23 - page now we don't get any errors so
135:26 - let's be sure that we are getting the
135:29 - values to the console so I'll just give
135:32 - it a name of test and give the password
135:35 - of one to six click on sign up and yep
135:38 - we are still retrieving so now let's
135:41 - work on this form
135:45 - submission and the first thing I'm going
135:47 - to do actually really rather than have
135:49 - this log to the console let's come here
135:52 - and have this
135:56 - user user we are going to await sign up
136:00 - and sign up needs to be
136:03 - imported so import sign up from next of
136:07 - Sanity for slash like this
136:14 - client so let's also import uh um sign
136:18 - in like this and also the use session
136:22 - hook and this will be coming from next
136:25 - off react so we're going to import this
136:28 - from next off for slash react like
136:34 - this and then we can come down here and
136:37 - call this sign up method and pass our
136:40 - form data which we just saw on the
136:43 - console not quite long and here we're
136:46 - going to check if we have a
136:49 - user like this then we are going to send
136:52 - a toast notification to the user using
136:56 - toast do success where we just go with
136:58 - the text of
137:00 - sign success and then tell the user to
137:03 - please sign in this is actually going to
137:06 - fail so by want us to say this error
137:09 - because we have not yet implemented one
137:12 - route Handler so we're not going to see
137:14 - the success over here in the conso log
137:18 - error we are going to set the error and
137:20 - let's to. error and say something went
137:24 - wrong so it's actually going to fail but
137:26 - I would like us to see it because we
137:28 - need to implement one last
137:32 - route and if we come over to the
137:35 - browser I'm just going to provide an
137:37 - email so test at test.com and uh
137:41 - username is going to be test and the
137:44 - password is going to be one to6 so we
137:46 - click on sign up yep so we see our
137:50 - error and let's inspect this here you
137:53 - see that we get this 404 not found so/
137:57 - API SL sanity SL signup we don't have
138:01 - this API route implemented and that's
138:05 - why we get this error so next Earth
138:08 - sanity
138:09 - actually makes needs this API route so
138:12 - so inside of the API folder here we are
138:16 - going to create a new folder and this
138:19 - folder would call sanity so this sanity
138:22 - needs to be directly inside the API
138:26 - folder like
138:27 - this okay so inside here we are going to
138:30 - create a sign up
138:33 - folder and in here a sign up route so
138:36 - for request coming to/ API SL sanity SL
138:40 - signup okay so here we're going to
138:43 - import the sign up
138:45 - Handler and this sign up Handler needs
138:48 - to be coming from next Earth sanity and
138:50 - next we're going to export our post
138:52 - Handler so we're going to say export con
138:55 - post and this is going to be equal to
138:57 - sign up Handler like this and we're
139:00 - going to pass our sanity client okay so
139:04 - go on and save this file and actually
139:06 - this is all we need to do now for this
139:09 - to work so I will reload our
139:13 - browser and here for the email let's go
139:16 - again let's give there an email of test
139:18 - at
139:20 - test.com and for the name I'll just go
139:22 - to the name of test and provide the
139:24 - password of one to six so click on sign
139:27 - up and if sign up is successful yep we
139:30 - see success please sign in and if we
139:33 - come over to our sanity Studio we see
139:36 - the user here so this test user we just
139:39 - created and with those with these
139:42 - details so wait for this to
139:46 - load so we'll just give it a
139:50 - second and it actually crashes okay so
139:54 - nothing wrong here we are just going to
139:57 - inspect the terminal we see the terminal
139:59 - is fine we're just going to reload this
140:02 - um our studio okay we made changes to it
140:06 - and we haven't refreshed the studio in a
140:09 - while
140:12 - now so once the studio reloads you'll
140:15 - see that everything actually works fine
140:19 - okay and this is the user we just
140:21 - created so with this name with this
140:24 - image and we don't actually get the
140:28 - field email defined in our
140:31 - schema so let's visit our schema perhaps
140:34 - we missed out the user
140:36 - email so here inside of our schemas and
140:40 - go over to user.
140:42 - TS Let's see we actually missed the user
140:46 - email and know if it's also verified so
140:49 - the verified field so just after uh I'm
140:54 - going to create the email field and I'll
140:57 - Define this field just after our
141:00 - password so here Define
141:04 - field and the name of this field is
141:07 - going to be
141:08 - email so the name is going to be email
141:12 - and the type is also going to be
141:16 - email
141:18 - and then
141:20 - the
141:24 - title the title is going to be email and
141:27 - the type actually is going to be string
141:30 - so not email so the type is going to be
141:33 - string and I'll just duplicate this so
141:36 - that we know if the email is verified so
141:39 - here we're going to have email
141:43 - verified the type is going to be date
141:46 - time
141:48 - and it's actually not going to have a
141:50 - title because we are going to set this
141:53 - property as hidden so hidden through
141:56 - like this so let's come back to the
141:59 - browser and I'll just reload our sanity
142:03 - Studio to pick up the latest schema
142:11 - changes and now everything works as fine
142:14 - so you see we cannot type inside the to
142:17 - change the email the name and I'll just
142:20 - make this admin to be true and publish
142:22 - it was actually
142:24 - published um when we created a user so
142:28 - let's try um let's go back to the IDE
142:33 - and in the ID we are going to have all
142:36 - our login provider so somewhere here we
142:41 - have this signning imported already and
142:44 - this use session okay so let's get the
142:48 - data from our use session so we're going
142:51 - to D structure data and rame it to
142:53 - session coming from the use session hook
142:57 - and in here I would like us to
142:59 - console.log the
143:02 - session okay so I want to do this so
143:04 - that we can see how the session object
143:07 - changes as we log the user in so here
143:11 - we're going to have this login Handler
143:14 - which is going to be an async function
143:16 - like this and we're going to have our
143:19 - try catch block so in case of Errors we
143:22 - are going to log the error to the
143:26 - console so we're going to console. log
143:28 - error and next we're going to have this
143:31 - to. error and then we say something went
143:35 - wrong like this and in the tri block we
143:38 - are just going to await the sign in like
143:43 - this without passing any provider here
143:46 - okay and once we sign in upon successful
143:49 - signning we want to go on and push the
143:51 - user to the homepage so here I'll just
143:54 - leave a comment and say push the user to
143:57 - the homepage I want do this now so that
144:00 - we can see this uh console.log and the
144:03 - sign in the login Handler I'm going to
144:06 - pass it to the GitHub
144:09 - icon and I'll just copy this click on
144:12 - click here and pass this also to the
144:15 - Google and also pass this to our login
144:19 - button which is this button over
144:23 - here so let's save this and let's go on
144:26 - to try this out and we we expect to see
144:30 - our session and how our session updates
144:33 - so here I'll just close
144:36 - this and you see we see a bunch of null
144:39 - I'll just reload the
144:42 - application and now we have application
144:45 - reloaded let's try to to sign in the
144:48 - user so click on
144:50 - login and I'm going to log in with um
144:55 - credentials we already have the GitHub
144:56 - and Google wired up but first let's try
144:59 - to sign in with this user that we just
145:02 - created and once we click on signing
145:04 - with credentials let's keep an eye on
145:06 - this console and you see how we get the
145:10 - user object so this is our session
145:13 - object so we have our user email and our
145:16 - us user name so let's try to
145:19 - authenticate via
145:22 - Google I'll just clear this and now
145:25 - click on the Google
145:30 - icon and we're going to click on sign
145:33 - with Google
145:38 - here and I'm going to choose my email
145:42 - address okay so let's keep an eye on the
145:45 - console
145:49 - and over here you see we still get our
145:51 - user from our session object and if we
145:54 - come over to
145:55 - the um our studio I'll just reload
145:59 - because we still see the test
146:04 - user and actually we still see the test
146:07 - user because we we don't have any
146:10 - functionality to sign out yet so we have
146:14 - to just do this manually and but you
146:17 - come over to the account so if you just
146:20 - come over to the account you see we have
146:22 - a new property o and you see the
146:25 - provider id is Google and we see all
146:27 - these properties but the user is still
146:30 - the test user because we we didn't sign
146:32 - out that user okay so we still use um
146:37 - the same credentials as
146:39 - before but we see everything here so
146:42 - what I'm going to do actually I'm going
146:43 - to manually sign out by deleting the
146:46 - this um property we have
146:50 - here and come back to the user I'm
146:53 - actually going to delete uh this user as
146:56 - well so just come here and delete this
147:02 - user okay so come back to application I
147:05 - would come over to the application tab
147:08 - so that I just clear all
147:10 - the um storage that we cut from next off
147:14 - so clear the local storage
147:18 - and also clear the session storage in
147:21 - case we have any um things St there and
147:24 - come back to cookies and I'll also clear
147:28 - the
147:29 - cookies okay so now let's try this out
147:31 - I'll reload the our application and then
147:35 - I'll click
147:38 - on GitHub let's try sending in with
147:42 - GitHub and here I'll just click on
147:44 - authorize myself
147:49 - and if this is successful we should be
147:52 - redirected back to our application so
147:56 - let's wait for
148:03 - this and we are redirected back to our
148:06 - application and we see that we get our
148:09 - user and this time around you see the
148:11 - name ofd to my user name and I'll just
148:15 - make this user me to be null we see the
148:18 - image we see the email and I'll publish
148:21 - so if you come over to the accounts
148:25 - again you see we have o off and we still
148:29 - have our users so everything is working
148:32 - fine so we can click on the back to our
148:37 - application and I'm just going to sign
148:39 - out again
148:43 - manually I'll clear all the storage that
148:45 - we have
148:48 - and reload our application come back
148:51 - here and I'll delete this user so that
148:53 - we can try our Google
148:58 - authentication so delete anyway and is
149:02 - not successful because first this o we
149:05 - need to delete it so you see here this
149:09 - GitHub o we are just going to delete and
149:13 - now delete the user as well
149:19 - all right so next we can now try to sign
149:22 - in with Google I'll click on the
149:24 - signning with Google and you know we
149:27 - have already given this application
149:29 - permission and we should be sign in
149:33 - automatically so here we see our user
149:35 - object and now you see my
149:38 - name and we see the user property so
149:42 - everything is working fine and you see
149:43 - it was actually published and I'll just
149:46 - set this admin property to
149:49 - false okay and everything works fine
149:51 - even if we come over to the account tab
149:54 - over here so now we are making sure that
149:58 - the we are getting the session we can
150:00 - now make use of this to navigate the
150:03 - user to the homepage so in our use
150:06 - effect let's not forget to add our
150:08 - dependency array we need to push the
150:10 - user to the
150:12 - homepage and to do this first I'm going
150:14 - to just quickly have
150:17 - router which is going to be equal to the
150:19 - use router hook that the next GS team
150:23 - gives us so import use router from next
150:27 - navigation okay and here we can push the
150:30 - user to the homepage so router. push to
150:35 - slash and I'll copy this and come over
150:37 - to our use effect and first I'll going
150:40 - to check if we have session if that is
150:42 - true then push the user to the homepage
150:45 - and add our dependent array where we
150:47 - need to pass router and session like
150:50 - this so now we should be redirected to
150:53 - the homepage because we have a session
150:56 - great and we are redirected to the
150:59 - homepage so we have this page um done we
151:03 - see I'm just going to remove any
151:06 - console. logs that we have so all these
151:08 - I'll leave in case of any errors and now
151:11 - let's take a look at this callback
151:13 - object that we have here okay so this SC
151:16 - back object out come over to the
151:20 - header so here in the header
151:23 - component I'm just going to get access
151:26 - to the session as we did in the sign up
151:29 - page so somewhere here I'm going to have
151:32 - this Con right structure
151:34 - data which are rename to session and
151:37 - this is going to be equal to the use
151:39 - session hook which comes from next off
151:43 - react
151:45 - and I'll just re rearrange this and here
151:48 - I'm going to console.log
151:52 - session and if we come back to the
151:55 - browser you see the property that we
151:58 - have in our session so we have this user
152:01 - with email image and name we want to add
152:04 - an extra property to this session so if
152:07 - we come over to Earth TS we have this
152:10 - callback object have the session which
152:13 - can be an asynchronous function and here
152:16 - I'm just going to D structure session
152:19 - and token like
152:21 - this so inside this function I'll going
152:24 - to get the user email from our token so
152:28 - this is going to be equal to token.
152:30 - email like
152:32 - this and I'm going to have this user
152:35 - coming from our sanity client so I'm
152:37 - going to await sanity client. fetch
152:40 - let's try to f a user via this email so
152:44 - here I'm going to provide a query we're
152:46 - going to go more into this when we go
152:48 - over to data fetching but the query
152:51 - actually works like this with the star
152:53 - and then the cracket and we say theore
152:56 - type is equal to user and we want to get
153:00 - the user by email so where the email is
153:03 - equal to like this and there we have the
153:05 - dollar
153:07 - sign email so this dollar
153:10 - sign is to inject uh a parameter so we
153:14 - get to this and we want to structure the
153:17 - ID so we added this Z here because this
153:19 - returns an array and we want to just get
153:22 - the first matching elements and we can
153:25 - say this fetch is going to return an
153:28 - object so an object with the underscore
153:31 - ID property which is going to be of type
153:33 - string so remember here we are just
153:36 - getting the underscore ID now we have
153:39 - this user what we are going to do next
153:41 - we are going to return this object where
153:43 - we spread all the session and come down
153:47 - here where we update our user so in our
153:50 - user property we're going to have this
153:51 - object where we spread the session do
153:54 - user and most importantly now we want to
153:58 - add this ID property and the value is
154:00 - going to come from our user doore ID we
154:05 - are now making use of this email so this
154:07 - fetch takes in a second argument and the
154:10 - second argument is the query parameter
154:14 - so comea here and you say we have param
154:16 - of type Cod parameter and we'll pass
154:19 - email to be user email so this email
154:22 - needs to be this email with this dollar
154:24 - sign here so this
154:27 - email okay so now if we we get the user
154:31 - and we update I'm just going to log this
154:35 - this user to the console and check our
154:39 - terminal everything still works fine and
154:42 - we get our user so if we open this up
154:45 - now you see wa we have the user email
154:48 - the ID and other properties so from
154:52 - previously we didn't have the ID but now
154:55 - we have the ID of the user and here we
154:58 - have it on the console the user so I
155:01 - think we should update that because that
155:03 - is not actually the user that is the
155:06 - user ID so I'm going to change this to
155:08 - user
155:11 - ID and I would use it here so rather
155:14 - than user ID I actually call it user ID
155:17 - object and use this
155:20 - here okay so that's great now we're sure
155:24 - we have the ID we can make use of this
155:27 - in our header to correctly navigate the
155:29 - user to the user profile page okay so
155:34 - this link where we that goes to SL off
155:37 - I'm going to cut
155:39 - this and I'll have a check to check if
155:42 - we have session. user if that is true
155:46 - then I'll paste this link otherwise I
155:50 - would paste this link again I'll still
155:53 - repace the
155:55 - link but the navigation is going to be
155:58 - different so this link would go to the
155:59 - user profile and this link will go to
156:02 - the authentication page if we don't have
156:05 - uh an an authenticated user so the H is
156:09 - going to be dynamic I'm going to delete
156:12 - this and so that we can use this object
156:15 - here and back tick so we're going to go
156:17 - to/ users and then I'm going to use the
156:21 - last sign bracket session. user.
156:26 - ID now we get this error that we don't
156:28 - see the user property so user ID doesn't
156:31 - exist we know it actually exist because
156:34 - you know we just saw this in the console
156:37 - so to fix this error we are going to
156:39 - have another types so in our root folder
156:43 - I'm going to create another file and
156:46 - this file out call next hyphone off.
156:49 - types.
156:52 - TS like this so in here I'm going to
156:56 - import a type A type that will come from
156:59 - the next or Library which is the default
157:02 - session
157:05 - type so here we're going to declare a
157:12 - module in this module we're going to
157:15 - call
157:16 - the next alt module and here we have our
157:19 - bracket so we're going to have an
157:20 - interface for the session object and in
157:24 - here
157:25 - user and user is going to be coming from
157:27 - the default session we're going to D
157:29 - structure user like
157:33 - this so like this we are going to D
157:36 - structure user and we want to add an
157:38 - extra property so we say end here and we
157:41 - have this object where we add the ID and
157:43 - the ID is going to be of typ string so
157:46 - now you see this gets rid of the error
157:48 - that we had in our header and now um the
157:52 - property ID property has been added to
157:54 - our session and here I'm going to have
157:57 - another change so to show the user
158:01 - profile image so we're going to check if
158:04 - session. user.
158:07 - image if that is true we're going to
158:09 - return return a
158:11 - div not um fragment we're actually going
158:14 - to return return a div
158:17 - and here we say otherwise we'll just
158:19 - return this Avatar so in the case where
158:22 - the user doesn't have uh an image so
158:25 - we're going to give this a width of 10 a
158:27 - height of
158:30 - 10 rounded full and overflow
158:34 - hidden and inside this div we are going
158:37 - to have an image come from next
158:40 - image and inside this image we are going
158:42 - to have the source property which is
158:44 - going to come from our session
158:46 - do user. image and then we're going to
158:49 - have our art
158:52 - property which is going to come from our
158:54 - session. user.name
158:57 - okay and now just add this exclamation
159:00 - sign
159:02 - here all right so we're going to give
159:05 - this a width of 40 and a height of 40
159:08 - like
159:10 - this okay so this is the settings we
159:14 - need if we save this and we come back to
159:16 - our
159:17 - application you see our application
159:20 - reloads and we have an error so we have
159:23 - an error for the host name so for the
159:26 - image host name so actually I'm going to
159:28 - copy this error and come over to our
159:32 - next config dots file so here I'm just
159:36 - going to come over to our next config.js
159:39 - and inside this object here I'm going to
159:42 - have images and images is an object
159:45 - where I have domains and domains is an
159:47 - array of string where I provide the
159:49 - string so if we open the terminal you
159:51 - see next off is trying to restart our
159:54 - server I'm actually going to quit it and
159:56 - restart it
159:58 - ourselves using npm
160:01 - runev and we come back to the
160:06 - browser I will just reload this okay
160:10 - I'll reload this and wait for our
160:13 - application to build so it loads up and
160:18 - we should see the aatar update great so
160:21 - now we s we see the user Avatar update
160:25 - to the user image which in this case is
160:28 - just this um a we have here so for
160:30 - GitHub if we have the errors do go on
160:32 - and have add the GitHub image in the
160:36 - domain so now we have this
160:39 - avat I want to add the um an animation
160:43 - and I'm going to do this inside of
160:46 - uh
160:48 - global. CSS file so first I'm going to
160:51 - give this a class name and in the app AP
160:55 - not API web and global. CSS I want to
160:59 - add a
161:01 - costume um class name for our image and
161:04 - also a scale animation so IMG I'm going
161:07 - to use the at apply
161:10 - directive and give this class name of
161:13 - object cover
161:16 - with full H full like this and I'll have
161:21 - this um styling for scale animation
161:25 - making use of the apply directive by
161:28 - taing
161:29 - CSS and on H like this I'm going to
161:33 - scale and I'm going to scale this by one
161:36 - to five and then I'm going to transition
161:38 - all and I'm going to give this a
161:40 - duration of 700 like this so I'm going
161:44 - to copy this scale animation class name
161:47 - we can now use it in our header and also
161:50 - the IMG class name okay so now those
161:54 - classes we wrote out here in the global.
161:56 - CSS is going to be applied and we come
161:59 - back to application you see we get this
162:01 - um hover animation on the image so this
162:06 - is the authentication in our application
162:10 - next let's continue with our hero
162:12 - section so back to uh app and in our
162:17 - page so web page. TSX here we are going
162:21 - to have a hero section okay so I'll just
162:24 - have this placeold here where I would
162:27 - have hero
162:29 - section and then we can go over to
162:32 - create the components so in the
162:34 - components folder I'll create a new
162:36 - folder called hero
162:38 - section and in here I'll create a new
162:41 - file heror section.
162:43 - TSX so let's Bo P STP this hero section
162:47 - and get rid of the
162:49 - reactjs input so import react from react
162:52 - we get rid of it and we can already
162:54 - import this hero section over here in
162:58 - our homepage so here I'm going to um
163:02 - import the hero section and we are going
163:04 - to be working in this
163:06 - file all right so I'll change this div
163:09 - to section and give it class names
163:12 - already so give it a display of flex I
163:15 - would also give this uh padding on the
163:17 - xaxis of four item Center and give it a
163:21 - capap of 12 and a container and then
163:25 - I'll position the items in the center
163:27 - using MX
163:29 - atho and inside this um section we are
163:33 - going to have this div with a py of 10
163:36 - and the height of
163:38 - full and in here we are going to have
163:41 - what I would call The Heading so we're
163:44 - going to have more like like the heading
163:46 - inside this div and also inside this div
163:50 - we are going to have another section and
163:53 - this section I'm going to have this
163:55 - placeholder that I would just call the
163:58 - room
163:59 - description okay so here we just have
164:02 - the heading and inside this div we have
164:05 - the room description and outside we'll
164:07 - have the images okay so in let's get
164:11 - started with the heading so here we're
164:13 - going to have this H1
164:15 - and I'll will give this a class name of
164:18 - font heading we don't have this costume
164:21 - font yet we are going to create it in a
164:23 - second and I'll give it a margin bottom
164:25 - of six and this text of
164:29 - explore just explore our Exquisite
164:34 - hotel and after this hron I would have
164:37 - this paragraph and this paragraph is
164:40 - going to have this um text color of # 4
164:44 - a not 41 actually so 4 a 4 a 4 a and on
164:49 - that team I'll would give this uh text
164:52 - of this # FFF up to six places and then
164:57 - add this EA like this and I'm also going
165:02 - to give this a margin bottom of
165:04 - 12 and here I'll give this a Max width
165:08 - of
165:09 - LG and inside this paragraph We are
165:12 - going to have this text of x experience
165:16 - and exquisite like this so experience
165:19 - and exquisite Hotel immersed in Rich
165:26 - history immer in Rich
165:29 - history and also Timeless Elegance like
165:35 - this so I'll just have this text inside
165:38 - here and then I'll have this button that
165:40 - says get started this button is going to
165:43 - have the class name of button primary
165:45 - another
165:47 - custume um class that we haven't defined
165:50 - yet we're going to Define this font
165:53 - heading and button
165:55 - primary okay
165:58 - so if we have a look on the browser this
166:01 - is what we have going on okay so what we
166:04 - can do next we can come over to this uh
166:08 - to
166:10 - uh
166:13 - um Global do CSS and in here where we
166:17 - have the this class name I'm actually
166:19 - going to paste these other class names
166:22 - so we have new class names for the
166:24 - button primary the button tertiary the
166:26 - font heading and font noral so we're
166:29 - using this at apply directive and we
166:31 - apply these classes you can obviously
166:35 - find this class in the GitHub repo which
166:38 - I attached to the description okay so
166:41 - that's where you get these classes I
166:42 - don't just want to see you to see see me
166:45 - type all these classes from scratch and
166:48 - take our time so that's why I just
166:50 - provided these um classes here which
166:53 - you'll find again in the GitHub attached
166:57 - to this video so go on and save this
167:00 - file and if we have a preview of what we
167:03 - have now this is what we have updated
167:06 - with our heading and also our primary
167:10 - button so now we can write for our room
167:14 - description I'm going to get rid of this
167:16 - heading tag here and I'll also get rid
167:19 - of this room description okay and I'll
167:22 - give this have a div here which I'll
167:25 - display Flex justify
167:29 - between and I would also give this a
167:31 - margin top of 12 so inside this div we
167:35 - are going to have another div like
167:40 - this and this div I'll give it a class
167:43 - name of flex
167:46 - and I would also give this a gap of
167:50 - three give this a flex coal like this
167:55 - position the items in the center and
167:57 - justify
167:58 - Center all right so inside this div we
168:01 - are going to have a paragraph and the
168:04 - paragraph that would say basic room here
168:08 - and this class name for this paragraph
168:10 - is going to be Tex SM Xs
168:16 - and on large devices and above this is
168:19 - going to have a text
168:21 - LG and our position the text in the
168:24 - center So Below this paragraph we're
168:27 - going to have what I would call a
168:31 - counter so more like showing how many
168:34 - basic rooms that we have in our
168:36 - application and this is going to have a
168:38 - class name from medium devices I'm going
168:41 - to position this I'm going going to
168:45 - position give this a font bold and a
168:48 - font medium by default give it a text
168:53 - LG and on larger extra large devices
168:56 - I'll give a text of five XEL so in here
169:00 - we can have a count as I said we just go
169:04 - with plus
169:06 - 20 I'm just going to bring this down
169:10 - twice like this so after basic room next
169:14 - so we're going to have luxury
169:17 - room and after the luxury room we are
169:20 - going to have suits which are the three
169:22 - main kinds of room that we are
169:24 - supporting the application and this is
169:26 - what we have going for preview so next
169:30 - for the images we are going to have this
169:34 - um div and let's style this div by
169:38 - giving it these class names and on
169:40 - medium devices we are going to display
169:43 - this as a grid and this is going to be
169:45 - hidden on smaller devices by default and
169:50 - this is going to have a cap of
169:52 - eight and we're going to give this a
169:55 - grid Coe of one so inside here we are
169:59 - going to have this first div where which
170:02 - would give rounded 2
170:05 - XL and give overflow of hidden we're
170:09 - going to give this a height of 48 and
170:12 - inside here we are going to render an
170:15 - image so we import image from next image
170:19 - and we get this image a source so this
170:22 - image source is going to be a
170:26 - string and we also give it an ALT which
170:29 - will be a string and we're going to give
170:31 - this a width of 300 and a height of 300
170:36 - like this so for class name I'm just
170:38 - going to use our IMG class name and give
170:41 - it our scale animation remember all
170:44 - these are coming from our global. CSS
170:49 - and after this we are going to have an
170:51 - another div that will hold two images
170:55 - and this would have a class name of grid
170:58 - and now we're going to give this grid
170:59 - code to remember the first one was grid
171:01 - call
171:02 - one and we are going to give this u a
171:07 - height of
171:08 - 48 so we're going to give this um inner
171:12 - div arounded to excel overlow hidden
171:16 - like this and here I'm going to have an
171:19 - image I think we can actually copy this
171:22 - um image that we have from up here so
171:25 - I'm just going to copy this and paste
171:27 - this over here we have two images
171:30 - because we have grid code too so I'm
171:32 - going to copy this div and duplicate so
171:35 - if we go to the browser let's have a
171:37 - quick preview this is what we have for
171:40 - now okay so this is what we have and for
171:43 - the images I have actually provided us
171:46 - with images to use in our project so if
171:49 - you come over to the public which is
171:51 - where we save static asset I'll create
171:54 - an images folder and in here I'll paste
171:57 - these images which I got from on Splash
172:00 - so these are the three images which
172:03 - we'll be using in this
172:05 - project so let's um point to those
172:08 - images so here to point to it we don't
172:11 - go with SLU we actually go to slash
172:14 - images automatically nextjs is going to
172:16 - look in the public folder and the name
172:19 - of the file is hero one.
172:22 - JPEG and for the alt I would also go
172:25 - with the with an ALT of hero one so I'll
172:28 - copy this and use this here so the next
172:31 - image has a name of Hero
172:34 - 2 and the alt is hero2 and same for the
172:39 - third image so I'm going to paste it
172:41 - here and go with Hero 3 for the name and
172:45 - same for the O So once we have this
172:47 - let's save this and have a preview so
172:50 - this is what we have now for our
172:54 - application great so we have this and it
172:57 - works as fine with our teaming feature
173:01 - great so let's animate this counter that
173:04 - we have here so I'll zoom out a bit
173:06 - actually and this other section for the
173:08 - images is the section on the right where
173:12 - we display these images
173:15 - okay so and we have these images here
173:20 - okay and we have this first image and we
173:22 - have this D for the two images and in
173:25 - this other place the same thing applies
173:28 - so I would like us to animate the text
173:31 - and for that I'll create another
173:34 - component which I would call count so
173:37 - I'll zoom in a bit and call this count
173:40 - up number okay so I'll copy this and
173:44 - create a file count up number.
173:48 - TSX so let's have the jsx for this
173:51 - component I would first remove the
173:54 - reactjs input and this is going to be FC
173:59 - for functional component and we are
174:02 - going to be receiving props so but first
174:05 - I would like us to go on and manage
174:08 - state that is the count State and set
174:11 - count which is going to be equal to you
174:13 - states that we import from react and
174:16 - we're going to start at zero and this FC
174:19 - is going to be receiving props so here
174:23 - we are going to define a type for our
174:25 - props and this is going to be equal to
174:27 - this object and we have the N value
174:30 - which is of type number and we also have
174:32 - the duration this duration is going to
174:35 - be in
174:36 - MCS okay so this is going to be of type
174:41 - number okay so here we are going to be
174:44 - receiving the props or we can D
174:46 - structure directly that is the duration
174:50 - as well as the end value all right so
174:55 - here just below this our set State let's
174:59 - have our use effect that we UT from
175:02 - react and our use effect we have this um
175:06 - callback function and we should not
175:09 - forget our array of
175:11 - dependency okay so let's go and have
175:14 - this um function this update count
175:17 - function which is going to help us to
175:20 - achieve this animation so this update
175:22 - count is going to be called with a Tim
175:24 - stamp which is going to be of type
175:28 - number okay so to achieve this animation
175:31 - we are going to have this start time
175:34 - which is of type number like this so we
175:37 - are going to update this start time
175:40 - based on the time stamp that we have
175:43 - here so first we're going to check if
175:46 - there is no start time then the start
175:49 - time isal going to be equal to the time
175:52 - stamp that we pass across to this
175:55 - function and we're going to get um keep
175:58 - track of the progress and we're going to
176:00 - say this is equal to the Tim stamp do
176:03 - the start time so this is going to give
176:05 - um track of the progress we have and we
176:09 - say if progress is now less than the
176:12 - duration the duration that comes in Via
176:15 - props we are going to update our account
176:18 - and we're going to update our account by
176:20 - getting the minimum value so making use
176:23 - of math. mean we takes in the values and
176:27 - the value we are going to pass in here
176:30 - is going to be the N value and we're
176:32 - going to have this mathematical
176:34 - mathematical operation here here we say
176:36 - the progress divided by the duration and
176:40 - we multiply this by the end value okay
176:44 - okay so this is we going on to update
176:47 - our set count our count property and
176:51 - let's keep track of the animation and
176:53 - the reason we are keeping track of this
176:55 - animation frame ID here is so that we
176:58 - can unsubscribe and do some clean up
177:01 - okay so we have this animation frame ID
177:04 - and we are going to say this is going to
177:06 - be equal to request animation frame
177:09 - provided by JavaScript and we pass this
177:11 - function so this update count function
177:15 - here and that's the Callback we pass
177:18 - else we are just going to go on and say
177:21 - set our account to the end value okay
177:25 - that we get from
177:27 - props so let's pass our dependency
177:31 - arrays so in this array of dependency we
177:33 - are making use of the N value and also
177:36 - the
177:37 - duration okay so let's update our
177:40 - animation frame ID just after this
177:44 - update count so our animation frame ID
177:47 - is going to be equal to request
177:49 - animation frame ID and the Callback is
177:51 - going to be our update
177:54 - count okay like this and let's not
177:56 - forget our cleanup so we are going to
177:59 - Reon here and this return is going to
178:03 - take this callback function and this
178:05 - callback function we can cancel the
178:08 - animation frame and pass the animation
178:10 - frame ID okay they hand that to it
178:14 - so I'll just zoom out so you see the
178:17 - complete implementation and here we are
178:19 - not actually going to have a div we're
178:21 - going to have a paragraph and this
178:22 - paragraph needs to be the count so
178:24 - actually I'm going to copy this from the
178:26 - hero section so this paragraph we have
178:30 - here just copy one of these
178:32 - paragraphs and I'll use it in here I'll
178:36 - replace what we have here and we need to
178:38 - round it up so the counts I'm just going
178:41 - to have this brackets and we are going
178:44 - to use the
178:46 - math. round like this and we are going
178:49 - to pass the count to
178:52 - it okay so this is the implementation
178:55 - for this count of number
178:58 - functionality and we can already use
179:01 - this in our hero section remember we are
179:04 - managing States here so making use of
179:06 - this is going to give us errors but no
179:09 - worries I would just like us to see the
179:11 - error and we're going to fix the error
179:13 - so I'm going to import this component
179:15 - and in here we're going to pass the
179:17 - duration remember it's in milliseconds
179:19 - Out Pass 3,000 which means 3 seconds and
179:23 - the end value I'll just pass two U 200
179:26 - you can play around with these figures
179:30 - okay so I'll pass it here like this and
179:33 - if we save and we go back we should see
179:36 - our error yeah so we see our error
179:39 - because we're using you state in this
179:41 - count up number component but to surpass
179:45 - or to suppress the error we can make
179:47 - this client component making of that use
179:49 - client directive we would come back to
179:51 - this okay so if we reload our
179:54 - application now you see the counter
179:56 - animation you can you know play with the
180:00 - different values so you can play with
180:02 - the duration maybe give it 5,000 for 5
180:05 - seconds and also play with the you know
180:08 - with a different end values to just fit
180:11 - your application needs
180:14 - so we have this but I want to see
180:16 - something actually let's copy this text
180:18 - and if we right click and we view the
180:21 - page source so I'm just going to wrap
180:23 - this and we find this text we don't see
180:26 - it because this is a client component we
180:29 - made this of the use client directive if
180:31 - we copy this other text and we come back
180:33 - to the page Source we don't see this
180:35 - text in here okay and that is an issue
180:39 - that's an issue for SEO and we sometimes
180:42 - need this because this is our hero
180:44 - section you might need to you know
180:46 - render some part of your application on
180:48 - the on the server and some part on the
180:50 - client now to fix this first we can
180:55 - comment this out because this is what
180:56 - broke the code and get rid of this use
180:59 - client directive here and you see our
181:02 - application works as expected okay but
181:05 - now we don't have our animation and if
181:07 - we copy this and we view the P Source
181:11 - I'll wrap this again and find here you
181:14 - see we see our explor text because now
181:16 - this is a server component and it is
181:19 - rendered on the server but once we
181:22 - attach our use client directive it
181:24 - becomes a client um component and it's
181:26 - no longer rendered on the server so I
181:30 - actually want to render part of my
181:32 - application on the
181:34 - server and I'll get rid of the use
181:36 - client directive and this brings us back
181:39 - to our error and I'll come back and zoom
181:41 - out here okay so now now how do we
181:44 - achieve this so what's going to happen
181:47 - is I'm going to create two new
181:49 - components here I'm going to create a
181:52 - client component. TSX and I'm also going
181:56 - to create a server component. TSX so the
182:01 - client component can take in server
182:03 - components as props and this is what I
182:06 - want to do here so I want to pass props
182:09 - to this client component and these props
182:12 - are going to be the server component so
182:15 - the part of the application I want to
182:16 - render on the server so here in the
182:19 - server component we are going to
182:20 - bootstrap this component and I'll get
182:22 - rid of the react input and in the hero
182:26 - section I'm going to copy everything we
182:28 - have here so in here I'm just going to
182:31 - copy this entire
182:33 - section and we are going to paste it in
182:37 - into of our client component in here
182:40 - like this I'll get rid of the react
182:43 - input
182:44 - and make this a use client component
182:46 - like this we have the errors would fix
182:48 - it so I want to render this section
182:51 - where we have the H1 paragraph and
182:53 - button I actually want to render it on
182:56 - this server side if you want to handle
182:58 - click events on this button you have to
183:00 - handle it on the client because there's
183:03 - no clicking on the server so here I want
183:06 - to render this section on the
183:08 - server side and I'll cut it and here in
183:11 - the server component I'm actually going
183:13 - to change the structure here so I'll
183:15 - remove everything and I will export this
183:18 - constant and this constant I'm going to
183:20 - call heading one and it is going to be
183:23 - equal to this jsx here so it has to be
183:26 - this uh self closing tag like this so
183:31 - header one is going to be equal to this
183:34 - jsx and this header one is going to be
183:38 - passed down to this um component as prop
183:42 - so you can say this of type FC for
183:44 - functional components which is a generic
183:47 - type let's create a prop so we're going
183:50 - to say type prop is going to be equal to
183:52 - this object so we have heading one and
183:54 - heading one is going to be of type
183:56 - react. react
183:58 - node all right so we're going to pass
184:00 - props in here and here we can go on to
184:04 - receive props and here the structure The
184:07 - Heading one from the
184:09 - props so let's bring in the heading one
184:13 - and this heading one we are going to
184:15 - have it in the place where we had that
184:17 - text so in here we are going to have the
184:20 - heading one like this so this is a
184:23 - server component that we are expecting
184:25 - via props and I'll just import this
184:28 - count up number for the counter
184:32 - animation and I also want to render this
184:35 - section where we have these images so
184:38 - you know one of the advantage of having
184:40 - um a server component is is fast load
184:44 - time so I just want this images to be
184:46 - coming from the server so I'll call it
184:49 - section two and I will paste this and we
184:52 - have errors so I will try to import the
184:56 - image component okay so maybe I'll just
185:00 - import it manually I would import image
185:03 - from next image like this okay and the
185:08 - error should go away so this section two
185:10 - which contains our images we going to
185:14 - also receive it at props in this client
185:17 - component okay so in here let's go on
185:20 - and
185:22 - um customize our propes so that it
185:25 - expects this section two which is also
185:28 - going to be your type react. react
185:34 - node all right so here we are going to
185:37 - pass the section two over here where we
185:39 - had the section two previously like this
185:43 - so this section two doesn't have to come
185:45 - from our server component let's bring in
185:47 - bring it in Via props so here we are
185:50 - going to bring it in from the props so
185:53 - this is the setup we have now this is
185:55 - our client component and in our hero
185:57 - section we are going to import the
186:00 - client
186:01 - component like this so go on and import
186:04 - the client component and I'll remove
186:06 - these other inputs we have here now this
186:09 - client component needs the props so it
186:12 - needs the section two which is going to
186:14 - be equal to section two which will be
186:16 - coming from the server component and it
186:19 - also needs the heading one which is
186:20 - going to be called to this heading one
186:22 - from the server component so if we
186:26 - reload our application you see that our
186:28 - application works as fine and we get the
186:31 - best of both words so we have our client
186:34 - component which renders this counter
186:37 - over here so this section and we have
186:40 - this heading section coming from the
186:44 - server component and we can prove it if
186:46 - I copy this and I right click and view
186:49 - the page Source this time around and I
186:51 - find it you see that it is there so we
186:55 - have this text it wasn't there before
186:56 - when we made use of the use client
186:58 - directive but it is there now and then
187:01 - if we copy this other text and we
187:05 - check we are going to see it there so we
187:08 - have the section of our application
187:10 - rendered on the server side and we just
187:14 - have this
187:15 - counter section rendered on the
187:18 - client okay so you can play around with
187:20 - these figures this um counter animation
187:23 - we have here you can just play around
187:26 - with it give them different values just
187:29 - give this a value of 50 120 you know 60
187:33 - you can change the duration anyhow as
187:36 - you wish all right so next we can go to
187:40 - have our other components so we can
187:43 - have our search component next so for
187:47 - our search feature our search feature is
187:49 - just going to be below this our hero
187:52 - section and let's come back to the
187:54 - application I'm going to close all these
187:57 - other sections and let's come over to
188:00 - our page so which is our homepage I'm
188:03 - just going to collapse all of these and
188:06 - in our page. CSX here we are going to
188:09 - have a page search section okay
188:13 - and we obviously have other sections
188:15 - next we're going to have our featured
188:18 - room section and next we are going to
188:20 - have our gallery and lastly we are going
188:23 - to have our newsletter section so let's
188:27 - get started with our page search um
188:31 - section so this section over here and
188:34 - I'm going to come over to the components
188:36 - and create a new component which I call
188:38 - Page search and inside um this folder I
188:43 - create another file which I'll call Page
188:46 - search. TSX like this so let's boostrap
188:50 - this page search component I'll get rid
188:52 - of the react input and this page search
188:56 - component is going to take a search
188:58 - component so in the components folder
189:00 - I'll create another um component for
189:03 - search and create a search. TSX and the
189:06 - reason why is because this search is
189:08 - going to be reusable across pages so
189:11 - that's why I'm putting in its own
189:13 - component rather than the Page search so
189:15 - we're going to import this search
189:17 - component inside the Page search
189:18 - component so that it can be customizable
189:21 - so we import the P search components
189:23 - inside the homepage like this and we can
189:26 - come to the browser to have a preview so
189:29 - this our search component let's come
189:31 - back to the browser and let's test the
189:33 - responsiveness of our application we
189:35 - didn't actually test this after working
189:38 - on the hero section so we see how
189:41 - responsive our our application is and
189:44 - everything works fine with our dark and
189:47 - white team
189:49 - feature okay so you see we can um scale
189:54 - and see how our application adjust to
189:57 - the different view Parts all right so we
190:00 - can go back and work on our search
190:04 - um component and this search components
190:07 - I'm going to change this to user section
190:11 - and the class name is going to have a
190:13 - background of tary Light which is our
190:16 - own tary light color this is going to
190:18 - have a px of four and the py of six and
190:22 - it's going to have a rounded LG and
190:25 - inside here we are going to have a div
190:28 - this div is going to have a class name
190:29 - of container and MX Auto we're going to
190:33 - display it as a flex give it a gap of
190:36 - four and give it Flex wrap and also
190:40 - justify between items Center like this
190:44 - and inside this div we are going to have
190:46 - another div this div is going to hold
190:48 - our um drop down so we're going to give
190:50 - it a width full and on medium devices
190:53 - we're going to give it 1/3 of the width
190:57 - and on large devices we are going to
190:59 - give the width Auto like this and give
191:02 - it a margin bottom of four and also on
191:06 - medium devices give it a margin bottom
191:09 - of zero so here we're going to have a B
191:13 - okay but there's not going to be any
191:16 - HTML 4 this is going to have a class
191:19 - name of block I'm going to display this
191:22 - as block and give this a text SM a font
191:27 - medium uh maging bottom of two and not
191:31 - to Black we are going to give this a
191:34 - text of black and in here we are going
191:37 - to go with the room type for the
191:40 - labo all right so after this label we
191:43 - are going to have this div we give the
191:46 - class name of
191:47 - relative and then we're going to have a
191:49 - select without any name or without any
191:53 - ID okay but we're going to style it
191:55 - obviously give this a class name of with
191:58 - full give this a padding X of four a
192:02 - padding y of two give this
192:05 - capitalize and give this rounded and
192:09 - give it leading tight and also not data
192:12 - Al the on on the dark mode like this I'm
192:16 - going to give this uh background of
192:19 - black and give this uh a font on the
192:23 - focus State give this an outline of
192:27 - none so that is class names for our
192:30 - select so a select always have options
192:33 - but first we are going to handle the
192:36 - give this the unchange Handler so in
192:39 - this select I'm going to pass this
192:41 - unchange
192:43 - and this unchange is going to be called
192:45 - to a function we haven't defined yet so
192:47 - we're going to reference this handle
192:50 - room name room type change function
192:53 - which we don't have yet okay and here
192:56 - for the value we are going to give this
192:59 - value of room type
193:02 - filter all this will be coming from
193:05 - props and this select is going to have
193:08 - these options okay and this option is
193:11 - going to have the text all and I will
193:14 - just bring this down and the next option
193:17 - is going to be for our different room so
193:20 - this is going to be basic for our basic
193:23 - room and this is going to be luxury I'll
193:26 - just copy this luxury and use this over
193:30 - here and the last one is going to have
193:33 - the tag of Suits which is the last type
193:36 - of our room like
193:39 - this okay so this is what we have going
193:42 - on and after this first section if we
193:46 - save yeah we get these errors So to
193:49 - avoid these errors I'm just going to
193:50 - comment these out until we have them
193:53 - from propes and this is what we have
193:56 - going
193:58 - on so after this we are going to have
194:00 - another section for our search
194:04 - input so we can style this we're going
194:07 - to give it all with our full hand on
194:10 - medium devices we're going to give it
194:12 - 1/3 of the width and on large devices
194:17 - I'm just going to give this a Max like
194:19 - this give this a with
194:22 - Auto and margin bottom of four and the
194:26 - medium devices a margin bottom of
194:29 - zero so here we're going to have the
194:31 - label without any HTML 4 and the class
194:35 - name for this is going to be display of
194:39 - block okay we're going to display this
194:41 - label as a block
194:43 - text font medium imagine bottom of two a
194:48 - text black and here we give this label
194:52 - search so outside this label we're going
194:54 - to have our input and the input type is
194:57 - not going to be text it is going to be
195:01 - search like this and here we are going
195:04 - to give this an ID of search and we are
195:08 - also going to come here and give this a
195:11 - placeholder of search dot dot dot just
195:14 - like this and here we can go on to
195:17 - handle the class
195:21 - name and before we continue with the
195:23 - class name let's give this a value which
195:26 - also come from prop so we're going to
195:28 - comment this out and the value is going
195:30 - to be search query and on change event
195:34 - which is going to point to a function we
195:36 - don't also have yet we're going to just
195:38 - call this handle search query
195:43 - like this change so handle set query
195:46 - change and I'll just comment them out
195:48 - since we don't have them to avoid errors
195:51 - now we can starty our input give it a
195:54 - with full a px of four a py of three
195:58 - give it rounded leading tight like this
196:02 - and on the dark mode I'm going to give
196:04 - this a background color of
196:09 - black and I'm going on the focus stage
196:12 - I'm going to remove the Outline by
196:14 - saying outline none like this and give
196:18 - this uh a place holder a text of black
196:22 - and also on the dark team we can style
196:25 - the placeholder and give this a text of
196:32 - white okay so this is the second section
196:35 - and next is going to be our button so
196:38 - we're going to have this button and this
196:40 - class name is going to be our button
196:42 - primary like this and the type is going
196:45 - to be equal to button okay and on click
196:49 - we are going to have a function which we
196:51 - don't have yet so handle filter click
196:55 - and I'll comment it out and give this
196:58 - button um the text of search like this
197:01 - so we can save this and this primary
197:04 - button remember is coming from uh um
197:08 - global. CSS that's why we have this
197:10 - button primier
197:12 - all right so I'm just going
197:16 - to close this off global. CSS and if we
197:20 - come back to the browser this is what we
197:23 - have going so we have this drop down we
197:25 - have our search and we over here we have
197:28 - our button and there's a typo there in
197:30 - our button which we can just quickly fix
197:34 - like
197:37 - this okay so I'm going to bring this
197:40 - back in because because now we are going
197:43 - to customize this search component by
197:46 - receiving props so here we are going to
197:50 - import FC from react like this and let's
197:55 - make this a client component so making
197:58 - use of the use client directive and this
198:02 - FC is a generic type which will Define
198:05 - up here so this type called props is
198:07 - going to be equal to this
198:09 - object and we going to rece the room
198:13 - type filter and this is going to be a
198:16 - string and then we are going to go and
198:18 - receive our search query like this and
198:22 - the sech query is also going to be of
198:25 - type string like this okay we also going
198:29 - to receive the function that would
198:32 - update these properties so the Set uh
198:35 - set room filter type
198:38 - filter and this is going to be a
198:40 - function that gets the value which is of
198:42 - type string and returns void like this
198:47 - and up next we are going to have the
198:50 - other function which we called set
198:52 - search
198:54 - query like this and now we can pass our
198:58 - prop to FC and we can just destructure
199:01 - these values from the prop so set room
199:06 - type filter and set search query like
199:11 - this
199:13 - so we have these types and we are going
199:15 - to Define some other functions here so
199:19 - this handle room type change which will
199:22 - make use of these properties coming in
199:24 - from props so handle room type change
199:27 - going to take the event remember this is
199:29 - a select drop down so if we see here it
199:34 - is a select and select is going to have
199:37 - the event the type of this event is
199:40 - going to be of type change event but
199:43 - this change event is a generic type and
199:46 - here we're going to say this is a type
199:48 - of
199:49 - HTML select
199:52 - element like this and what happens on
199:55 - change we are going to call set room
199:57 - typee filter and we're going to pass the
200:00 - event Target value like
200:05 - this okay so next prop that's this next
200:09 - function is this handle search query
200:12 - change which is being called on this
200:14 - input element okay so here I going to
200:18 - have this function that we call handle
200:21 - search query um change which is going to
200:24 - take the event which is also a change
200:26 - event but this time around is a change
200:28 - event on the HTML input element and in
200:32 - here we are going to update our query so
200:36 - we're going to set search query to the
200:38 - event Target value like this
200:43 - and lastly for this button so handle
200:45 - filter click we're going to have this
200:48 - Con here where we call handle filter
200:50 - click and this is just going to be this
200:53 - Arrow
200:54 - function and in here we are going to go
200:57 - and and call and navigate the user to
201:01 - the rooms page like this so with the
201:05 - query so in order for us to do this we
201:07 - need to import the
201:10 - router so here just up here I'm going to
201:12 - say con router is going to be equal to
201:16 - use
201:17 - router and use router needs to be
201:20 - imported from next navigation and you
201:22 - call this use router like this so here
201:25 - when the user clicks on the search we're
201:27 - going to call this router and we're
201:30 - going to push the user to the rooms page
201:33 - so the path is going to be dynamic and
201:35 - we use back th to go to/ rooms and we
201:38 - are going to construct a query where the
201:40 - room type is is going to be equal to the
201:43 - room type filter and we're going to add
201:47 - another property to this query where the
201:50 - search query is going to be equal to
201:53 - this Dynamic search query here like
201:58 - this and in Page search we are going to
202:01 - handle these props so we're going to say
202:03 - the search and also the set query we're
202:07 - also going to pass the set room type
202:10 - filter and all these props here so we're
202:14 - going to go on and set our state so
202:17 - we're going to set the
202:20 - room type filter and function so set
202:24 - room type filter is going to be equal to
202:27 - use state which calls from react and by
202:30 - default it's going to be an empty string
202:33 - so let's not forget to make this uh
202:35 - client component making use of the use
202:38 - client directive like this and we can
202:42 - set another state value here we're going
202:44 - to set another state value for the sech
202:46 - query and here we have set sech query is
202:49 - going to be equal to UST State and an
202:53 - empty string by default so the room type
202:55 - filter is going to be equal to this room
202:58 - type filter from States also the sech
203:01 - query and also the set room filter we're
203:05 - going to pass it here and then the set
203:07 - search query function is going to be
203:10 - passed here so if we save this and let's
203:13 - try this out already I'll just reload
203:15 - the application to see how it works on
203:18 - the light and dark team we can also test
203:21 - the responsiveness of this application
203:25 - and everything you know is working fine
203:28 - in that regards so let's try out the
203:30 - query and I'll just add any Dom search
203:34 - here and click on set so let's take a
203:36 - look at the URL so you see we are
203:39 - redirected to SL rooms and we have the
203:41 - query over here great we're going to
203:43 - make use of that information when we
203:45 - work on the rooms page so this is what
203:49 - we have going I just get rid of these
203:52 - components and next for the featured
203:53 - room we would come back to this because
203:56 - it involves some data fetching we can
203:58 - already work on the gallery components
204:01 - so here in the component folder I will
204:04 - create a new folder for the
204:08 - gallery like this and in here how to
204:12 - create a new file gallery. TSX so in
204:16 - here I'm going to paste this component
204:18 - that I already provided for us so I'm
204:21 - just going to paste this get rid of the
204:24 - react
204:26 - input and just you know I'm just going
204:29 - to remove everything we have here so the
204:32 - reason why again is because this is just
204:35 - a static component no data fetching or
204:39 - anything special going here and I don't
204:41 - just want you you to watch me type out
204:43 - all these class names and waste your
204:46 - time so see we're using the IMG and we
204:50 - are just using our hero images that we
204:52 - imported in our public folder so that's
204:55 - all that is going on in this Gallery
204:58 - page so come back to public images you
205:01 - will see there images where they are
205:04 - being referenced so that's all is going
205:06 - on here we can go on to make use of this
205:09 - Gallery component
205:12 - already and I'm going to import it in
205:14 - our page. TSX so here I will import the
205:19 - gallery component and if we go back to
205:21 - the browser we see our Gallery component
205:24 - and we can test the responsiveness of
205:27 - this component as well and we see that
205:31 - this component is equally
205:34 - responsive okay so it's
205:38 - responsive like this so we see the
205:42 - component is responsive and it works
205:44 - fine with our dark and white
205:47 - team okay so this is our application
205:50 - next let's go over to the newsletter
205:53 - component okay so over here we are going
205:56 - to paste in this components so come over
205:59 - to the components folder and I'll create
206:03 - a new folder for news
206:06 - letter and I'll create a new file for
206:10 - newsletter
206:13 - TSX and I'll paste it in again please
206:16 - you can find this code in the GitHub
206:19 - this is just static data and I don't
206:20 - want to waste your time for you to see
206:23 - me typ in all these H um jsx with all
206:26 - these class names but you can just copy
206:29 - and paste this code from the GitHub
206:31 - there's nothing special going on inside
206:35 - of this component it's just styling
206:38 - purposes okay so this is what is going
206:41 - on on in here so you can go on and save
206:44 - this component and please once again get
206:46 - a code from GitHub and I'm going to um
206:50 - import this newsletter component from
206:54 - the components we just created so this
206:57 - is the newsletter component with this
206:59 - input and we can go on to test that it
207:02 - is responsive as
207:05 - well so we see that the newsletter
207:08 - component is equally um
207:13 - responsive all right so we have this
207:15 - going on in our application now we can
207:17 - go into Data fretting and work on our
207:21 - featured room section okay so let's come
207:25 - over to our components and in here I'll
207:28 - create a new folder called featured room
207:31 - and I'll create a new file that I call
207:34 - featured room. TSX and have this react
207:38 - component here I also get rid of the
207:42 - react input and import this component
207:45 - inside of our page. TSX like this we can
207:49 - come over to the browser and here in the
207:51 - browser I'll just scroll down and you
207:53 - see our featured room so for us to
207:57 - continue we need some room rooms that we
207:59 - are going to play around with and let's
208:02 - come over to our sanity studio and I'll
208:05 - just reload this San
208:08 - studio all right so now we are here we
208:11 - can see this user which we created
208:14 - earlier and we are going to go over to
208:17 - the hotel room section so in here we are
208:21 - going to create a hotel
208:24 - room and we need to fill in all these
208:27 - details so I'm going to fill in the name
208:30 - and the name I'm going to call Deluxe
208:34 - suit which is a name I just made up and
208:38 - for the slog we can generate a slog
208:40 - based on of the name and the description
208:44 - I will paste in this description here
208:47 - and description needs to be minimum 100
208:49 - S so in case you're having an error you
208:52 - can fix it and same for the price
208:54 - minimum 100 characters you see here if
208:57 - we choose 19 we have an error and the
209:00 - error says minimum 100 so the minimum
209:03 - cost follow room is 100 we set this
209:05 - together and discount I'll just go with
209:08 - a discount of eight and for images I'll
209:12 - come to unsplash.com and in unsplash.com
209:16 - I'm going to search for rooms
209:21 - here so sech for room and here I'm going
209:25 - to um copy the image address so any of
209:30 - these rooms I'll copy and use in our
209:33 - project so for every other room I'm just
209:36 - going to fast forward through so here
209:39 - I'll copy the image address and add item
209:42 - I will paste in the URL index it so next
209:46 - I'm going to fast
210:04 - forward and now for the cover image I'll
210:07 - would come back to Splash and choose an
210:11 - image here so maybe this image I'll copy
210:13 - the image address and I'll paste it in
210:17 - here the room type so by default we
210:20 - chose basic which is okay I'll change it
210:23 - to
210:24 - suit and in the dimension I'll give this
210:28 - a dimension of let's say 600 square ft
210:32 - you can give this any dimension of your
210:35 - choice for number of beds I would just
210:37 - go with
210:39 - two and for offer the many face let's
210:42 - add an icon so this has to be font
210:44 - awesome icon like this so fa and then
210:48 - bed and for the amenity you can give it
210:51 - any name so I'll just give this name of
210:53 - king sideb bird to match and I would add
210:57 - two more amenities okay so this is going
211:00 - to have an icon of fa Wi-Fi so fonts
211:03 - awesome and The Amity we can just use a
211:06 - text like free Wi-Fi or anything like
211:09 - that
211:12 - and I'm going to add one more so I'll
211:15 - add an icon and this icon is going to be
211:18 - f a coffee and the amenity is going to
211:22 - be coffee maker like this so by default
211:27 - it is not booked I will make this
211:29 - featured like this and go on to publish
211:33 - this hotel room so if we click on this
211:37 - um right hand corner here where we have
211:39 - these three dots
211:41 - just here we can inspect this and we're
211:44 - going to see all the properties the
211:46 - hotel room has so it has discover image
211:49 - this discover image has the URL it has
211:52 - the
211:53 - description it has these images so I
211:56 - added five images and I can just
211:59 - collapse them and each each image has it
212:01 - key and DRL okay and you can see here is
212:05 - featured and the offered amenities that
212:09 - comes with this room you can see the
212:11 - priz the slug has the underscore type
212:14 - and the current and then the special
212:16 - notes I am going to fast forward and Out
212:19 - Create four more hotel rooms at the
212:23 - background I have created these hotel
212:24 - rooms and now that we have this hotel
212:26 - rooms it's time for us to go into the
212:28 - world of data fetching so I created four
212:32 - more and we can see the H rooms here so
212:35 - let's come back to code and now we in
212:37 - the IDE I am going to create two new
212:40 - file
212:41 - okay so I'm going to create these files
212:43 - in our leaps folder and the first file
212:46 - I'm going to create is a sanity queries
212:49 - file so I'm going to call this file
212:51 - sanity queries. TS and our queries would
212:54 - leave inside of this file we would come
212:56 - back to this file we are going to create
212:59 - another file and this file we would call
213:01 - apis. TS and this is the file that will
213:05 - be discussing to our sanity client so
213:08 - let's export a function that we are
213:10 - going to use to fetch our featured um
213:14 - room so we'll call this function get
213:17 - featured room like
213:20 - this and here we are going to have a con
213:24 - which will call result and this result
213:27 - is going to await our sanity client and
213:30 - in sanity client we have this fetch
213:33 - method you see Tak in the query for now
213:35 - I will just pass in this empty string
213:39 - and I'm going to also pass an empty
213:42 - object for params because we don't have
213:44 - any params so we can create this query
213:48 - so let's come over to our sanity
213:50 - queries. TS file and in this file I'm
213:54 - going to export a constant which I would
213:57 - call get featured room
214:00 - query now this is going to be equal to
214:02 - Gro so Gro from santic L it has no spe
214:06 - special use case rather than maybe for
214:09 - AO completion or SS like that so we have
214:12 - the star and we have our Gro query here
214:15 - and we want to fetch a room where the
214:18 - type is equal to hotel room now if we
214:21 - come back to our sanity studio and we
214:24 - inspect one of these rooms here you see
214:26 - that theore type is hotel room that's
214:29 - why we can query by this type of hotel
214:32 - room and we see his featured is false so
214:35 - if I check the first room we both
214:37 - created we created together and I ECT
214:41 - you see here that is featured is true
214:44 - okay so this query is going to return an
214:46 - array and that's why we're going to take
214:47 - the first element so we're going to
214:49 - change it featured property and say
214:52 - Where It's featured is equal to true and
214:55 - I have this um array this structure here
214:58 - something like that where I taken the
215:00 - first element and here corly brackets
215:04 - I'm going to just take the properties
215:06 - that we need and we need the underscore
215:09 - ID we also need need the description we
215:12 - also need the discounts of the room we
215:16 - need the images and we need the is
215:19 - featured property we also need the name
215:23 - we need the price as
215:26 - well and we need a slug so this query we
215:29 - are going to import it in our API uh
215:33 - file so here just after this sanity um
215:37 - import I'm going to import everything so
215:40 - so using star like this as queries and
215:44 - this is going to be coming from the
215:46 - sanity queries file so this file
215:51 - Here and Now rather than an empty string
215:54 - we are going to pass our queries and
215:56 - then we can access the get featured room
215:58 - query like this now this fetch can take
216:01 - in an extra object for configuration and
216:04 - one configuration we can pass is cach
216:07 - and we see the options one option is no
216:10 - cash and and this just says we want to
216:11 - go on end disable any caching mechanism
216:15 - and always fetch data on every request
216:18 - now apart from this um from this cache
216:21 - we can also pass another configuration
216:23 - which is next and next is an object
216:26 - where we pass revalidate and we pass a
216:28 - number now this number is in seconds so
216:32 - for
216:33 - 1,800 we mean 30 minutes okay so 1,800
216:38 - seconds and this validate is going to go
216:42 - on and fetch data on this interval so in
216:45 - this case every 30 minutes this function
216:48 - is going to get called automatically and
216:51 - refresh so this might be the use case in
216:53 - your application where you know your
216:55 - data doesn't change as often but in this
216:58 - case because I'm in development and I
217:00 - would like to see my changes happen I
217:03 - would just go back to cash no cash
217:06 - that's um this function gets called on
217:08 - every request and let's forget to also
217:12 - Reon the result that we get from our
217:15 - sanity client like
217:17 - this okay so now we have this query you
217:20 - you see fetch fetch is of type any so
217:24 - fetch is a generic type and we can pass
217:26 - in the type so in our app here I'm going
217:29 - to create a new folder which I would
217:32 - call models so here I'm going to create
217:36 - this folder which out call models like
217:39 - this and I'm going to create a room
217:42 - model so that we can um map how a room
217:46 - looks like in our application all right
217:49 - so let's export this type I would call
217:51 - it room equal to this object and the
217:54 - room is going to have an underscore ID
217:56 - which is of type string and it's also
217:58 - going to have a cover image a cover
218:00 - image is going to be its own type so
218:03 - here I'm going to have this type of
218:05 - cover
218:07 - image which is going to be equal to this
218:09 - object
218:11 - okay and here I'll just have the URL
218:13 - which is going to be of type string and
218:15 - pass this over to cover image and next
218:19 - uh room is going to have a description
218:21 - which is a string and the room is also
218:24 - going to have Dimension and dimension is
218:27 - going to be of type string we also have
218:29 - this discount which is of type number
218:32 - not string and we also have this images
218:37 - images is its own unique type so here I
218:40 - would have this type for images like
218:43 - this which is going to be equal to this
218:45 - object where each image will have the
218:47 - underscore key property which is a
218:49 - string and also have the URL which is a
218:52 - string like
218:54 - this and we can pass this image to this
218:58 - images so an array of this image
219:00 - property like this and next apart from
219:03 - images we can also have this is booked
219:05 - property which is of type Bing and we
219:09 - also have his feature
219:10 - which is also of type buing and we also
219:14 - have the name of the room the name of
219:17 - the room is a string and we have the
219:19 - number of
219:21 - beds that we have in the room which is
219:23 - of type
219:26 - number and we also have the offered
219:29 - amenities so offered amenities it is its
219:32 - own unique type so we're going to define
219:35 - a type for our amenity here so our
219:38 - amenity is going to be equal to this
219:41 - object and here we have the underscore
219:43 - key property and the underscore key is
219:46 - going to be of type string and here we
219:48 - also have the amenity the amenity is
219:51 - going to be of type string and we also
219:54 - have the icon which is also of type
219:57 - string so this amenity we are going to
219:59 - pass it here as an array of amenity like
220:04 - this and we also have the price of the
220:07 - room the price is of type number and we
220:10 - have the slog the slog is is its own
220:13 - unique type and here we can Define the
220:16 - type so all these types we saw it in our
220:18 - sanity Studio when we inspected a room
220:22 - so this log is of type uh the type is of
220:25 - type string and we also have the current
220:27 - property which is the actual slug of
220:29 - type string so I'm going to pass the
220:31 - slug to the slug over here like this and
220:35 - then we also have the special note the
220:38 - special note is of also a string and we
220:43 - have the type so the type of this
220:45 - property which is a string like this we
220:47 - have this room type we can now import it
220:50 - inside here and pass it over to fetch so
220:53 - if we go over to get featured room query
220:56 - if we come over here you see these
220:57 - properties are part of the properties
221:00 - that we are um expecting a room to have
221:03 - and fetch is going to be of type room
221:05 - and also this function resolves to a
221:08 - room okay so now we have this function
221:11 - we need to make use of this function in
221:14 - our page. TSX so in our homepage we are
221:17 - going to go on to make use of this and
221:20 - fetch a room so just here I'm going to
221:23 - have this called featured room this
221:26 - variable and this featured room variable
221:29 - like this is going to be equal to the
221:32 - result of awaiting our get featured room
221:36 - call from our lips we have an error
221:38 - because we can go on to mark this
221:41 - component as an async component so home
221:45 - here is going to be equal to this async
221:47 - component and already we can console.
221:50 - log this featured room so that we are
221:52 - sure of um if our query actually works
221:56 - as expected so let's open the terminal
221:58 - right here in the IDE because this is a
222:01 - server
222:02 - component and I am just going to save
222:06 - and here we see our featured room so we
222:09 - see our featured room with these
222:11 - properties here so with the price and
222:14 - all these properties that we set in our
222:17 - sanity studio so this is our featured
222:19 - room I will collapse the terminal and
222:22 - actually exit from this terminal so this
222:25 - featured room we are going to pass it as
222:28 - prop to our featured room
222:31 - component and this is going to lead to
222:34 - an error because in the featured room
222:35 - component we are not yet accepting the
222:38 - prope now is the time to change it
222:40 - we're going to mark this component as a
222:42 - functional component and here we're
222:44 - going to receive props so this prop type
222:47 - where let's define it here so we say
222:49 - type props is going to be equal to this
222:51 - object where we're going to get that
222:54 - featured room and we have seing this
222:56 - featured room is going to be of type
222:58 - room so let's import this room here and
223:02 - I'll just separate it from the react FC
223:05 - input so we have this end next this div
223:08 - I'm going to rename it to a section so
223:12 - just here I'm going to rename this to a
223:15 - section and I'll copy and paste it over
223:17 - to the closing div so let's style this
223:21 - component I'm going to give it a class
223:24 - name of flex so I'll display it as a
223:26 - flex and on medium devices I would say
223:28 - Flex roll and by default I would go with
223:32 - flex column give this a padding on the x
223:35 - axis of four and I also give us a
223:37 - padding on the Y AIS of 10
223:40 - and give this item Center and give this
223:44 - a gap of 12 I would also give this
223:47 - container styling and then give it a
223:50 - margin on the x-axis of Auto Now inside
223:53 - this featured room we are going to have
223:55 - another div so another div with the
223:58 - class name on medium devices we display
224:01 - it as a gried and uh give this a gap of
224:05 - eight give this grid code one and in
224:09 - here we are going to have another div so
224:11 - this is div that holds one image okay it
224:14 - has a column of one and I'll give this
224:18 - um rounded 2XL overflow hidden give this
224:21 - a height of
224:23 - 48 like this and I'll also give this a
224:26 - margin bottom of
224:30 - four and on medium devices I will take
224:33 - off the margin button so in here we're
224:35 - going to have an image so we would
224:38 - import this image from from next image
224:41 - like this and in here this image
224:44 - property we're going to give it a source
224:46 - and the source we can already now get
224:49 - our props so that we are going to
224:51 - destructure the feature Dr from our
224:54 - props so here I'm going to destructure
224:57 - the featured
224:58 - room all right and now this image source
225:01 - is going to be pointing to the cover
225:03 - image of the featured room so here we're
225:05 - going to go with featured room and here
225:08 - do cover image
225:11 - URL okay and then we have the alt and
225:14 - the alt is going to go to the name so
225:17 - alt is going to be called to featured Dr
225:20 - do name like
225:22 - this okay so we can also pass the width
225:26 - and the width is going to be 300 same as
225:28 - the height so the height also is going
225:30 - to be equal to 300 pixel and we can give
225:35 - this our image class name and also our
225:37 - scale animation which we Define in our
225:40 - global.
225:43 - CSS so let's save this and let's see a
225:46 - first preview of what we have going on
225:49 - so come over to the browser and we have
225:52 - an error okay now this error is because
225:56 - we are not getting the cover image from
225:58 - the API so if we go back to our query
226:00 - get feature Dr query here we are not
226:04 - actually receiving the cover image so
226:06 - add this property and that should fix
226:08 - our error if we come back to the
226:11 - browser so I just come back to the
226:13 - browser here and let's see we have a
226:16 - different error and that's because
226:18 - images. unsplash is not configured so
226:20 - let's copy this host name and here we're
226:24 - going to come over to our sity config
226:26 - sorry we will come to our where is it so
226:30 - our next config and in here we are going
226:33 - to add this URL like this we would save
226:36 - this and we are going to quit our termin
226:38 - down and restart so I didn't actually
226:41 - save so I'll save I'll quit the terminal
226:44 - again and restart npm run Dev so this
226:49 - should fix our
226:51 - error let's just wait for it to load and
226:55 - let let's preview I'll just refresh our
227:04 - application and wait for it to load okay
227:07 - so this should fix our error so if we
227:10 - scroll down to take a look at our
227:13 - featured room so yeah so we now see um
227:17 - the cover image great so I'm going to
227:19 - close this and let's have um another div
227:23 - where we display two images Okay so this
227:26 - other div is going to be having a grid
227:29 - code to property so here in this div I'm
227:32 - going to give this div a class name of
227:35 - grid and give this grid grid C to
227:40 - and give this a gap of eight and I'll
227:43 - also give this a height of 48 so inside
227:46 - this div we are going to map through our
227:50 - featured image images so featured images
227:53 - we're going to First Slice spli sorry so
227:57 - spli we want to just get two so we're
227:59 - going to start from one two as our count
228:01 - and now we can map through the images
228:04 - and we'll get each image not room so
228:07 - I'll change this to image
228:11 - and I'm going to return return a div
228:14 - like this we have an error because in a
228:17 - map we need to provide a key so I'm
228:19 - going to provide a
228:21 - key and this key is going to be equal to
228:24 - the image
228:26 - URL so this image we have
228:30 - here dot key sorry not the URL and here
228:35 - I'm going to give this a class name and
228:37 - I'm going to give this rounded
228:40 - um
228:41 - 2XL I would also give it a class name of
228:44 - overflow hidden so here we're going to
228:47 - have a image component and the source
228:51 - property is going to be our
228:54 - image do um URL so our image. URL and
229:00 - the alt is going to be our image. key so
229:04 - I'll just use the key as the alt and
229:08 - let's also give this a we of
229:10 - 300 and the height of 300
229:15 - pixel okay so copy this class name and
229:19 - attach it to this image
229:22 - here so let's have a preview and let's
229:25 - wait for it to load we have our two
229:29 - images okay so now let's have this other
229:32 - section where we display the text okay
229:35 - so the name and some other um
229:37 - information about our feat room so here
229:41 - I'm going to have this
229:43 - div and this div is going to have this
229:46 - class names so first I'm going to
229:49 - display on medium devices give this div
229:52 - uh padding y of 10 and on medium devices
229:56 - also give it a width of
230:00 - 50% and give this text of
230:05 - left so we're going to have this heading
230:08 - and here we'll just go with that
230:10 - featured room like this and the class
230:12 - name is going to be our font like this
230:16 - so our font heading okay and give it a
230:20 - margin bottom of 12 so after this
230:23 - heading we are going to have a paragraph
230:26 - So this paragraph is going to contain
230:28 - the description and we can style it
230:30 - already and here I'm going to give this
230:33 - a font normal so our font
230:36 - normal and give this a Max WI wi of
230:42 - MD and here I will just have a featured
230:45 - room
230:47 - description okay so after this we're
230:50 - going to have another div and this div
230:53 - is going to have the class name of flex
230:56 - Flex call um medium device 6 position it
231:00 - as a flex row and also medium devices
231:04 - give item and justify between and
231:07 - imagine top of five
231:10 - and in here we're going to have another
231:12 - div and this div is going to have the
231:14 - class name of flex a imin bom of three
231:17 - and medium devices no margin
231:20 - button and in here we are going to have
231:22 - this div and this div is going to have
231:26 - the class name of flex give it a gap of
231:29 - three and give this a flex
231:34 - coal and also give this items Center and
231:39 - justify the content
231:41 - Center and give this a margin right of
231:44 - four okay so in here we are going to
231:46 - have two paragraphs and the first
231:49 - paragraph is going to have these class
231:51 - names so text
231:54 - SS can I find it here so text not SM I'm
231:59 - looking for XS so extra small y so I'm
232:02 - looking for this and here on large um
232:06 - devices and above I'll give this uh text
232:08 - uh
232:10 - Excel position the text Center and I'll
232:13 - will say start
232:15 - Fir and in here I'm going to next I'm
232:18 - going to display the price so the price
232:21 - of the room in this paragraph so I'm
232:24 - going to give this a class name of um MD
232:28 - font
232:30 - B give this Flex give this font
232:35 - medium and give this a text of LG and on
232:39 - extra large devices I give this a text
232:42 - of 5
232:44 - XL and in here I will have this dollar
232:47 - sign where will display the price so
232:50 - here we're going to display our featured
232:53 - room do price so I'm going to copy this
232:58 - so not this div I'm just going to copy
233:01 - this div here I'll duplicate it because
233:05 - next I want to show the discount of the
233:07 - hotel room so so here I'm going to have
233:10 - the text of
233:12 - discount and in here featured room do
233:15 - discount so let's save this and next
233:19 - we're going to have the link so just
233:22 - outside this div we're going to have a
233:23 - link that will take us to the featured
233:27 - room page so to the rooms page and here
233:30 - we just have the text more details and
233:33 - this link is going to be dynamic so the
233:35 - hre sorry I'll get rid of the class name
233:38 - and we start to the H so the HRA is
233:40 - going to go to backtick for slash rooms
233:44 - and here for slash we can inject the
233:47 - room slug so the featured room do slug
233:51 - like this and here we have the current
233:53 - property so now we can style this and
233:57 - this is going to have a class name of
234:01 - B and this is going to have a height of
234:04 - feet and it's also going to have the
234:08 - class name of text
234:10 - Center and we're going to give this
234:13 - border test of dck and also give it uh
234:18 - text tary of dck
234:22 - okay again give this a padding on the x
234:25 - axis of three and the padding on the y
234:28 - axis of two and on large devices give us
234:32 - a padding y of five and also on large
234:35 - devices give theel padding X of
234:40 - seven like this okay so we are also
234:44 - going to give this uh rounded to
234:49 - XL and I'll give it a font B so for the
234:54 - font weight and on large devices I'll
234:57 - give this a text of extra
235:00 - large so I'm going to save this and
235:03 - let's have a preview
235:05 - so yeah so first we see at uh link is
235:09 - out of place and actually the link needs
235:13 - to be inside of this so I zoom out
235:17 - and the the link needs to be inside of
235:20 - this div so this div just below the
235:23 - description so let's move it in I'm
235:27 - going to copy everything we have here
235:29 - and cut it actually so highlight and cut
235:33 - and I'll collapse this div so that I can
235:36 - have our link just in inside this
235:41 - div okay so let's save this and our
235:45 - styling is still um somewhat off let's
235:50 - see what we have going let's make this
235:52 - uh client component I think it has to do
235:54 - with the way we fetch data because we're
235:56 - fetching data from the server component
235:58 - and passing it here let's save this and
236:02 - let's
236:03 - reload and if we come here you see our
236:06 - component now renders uh as it should so
236:10 - here we have our featured room we have
236:12 - these
236:14 - images and we are displaying the
236:16 - description so we are done with our
236:20 - featured
236:21 - room and this is uh our first test of
236:24 - data fetching and I'll just zoom back in
236:27 - and this is the component and if we just
236:30 - uh have a few for everything we've done
236:33 - the code is in the GitHub if we go to
236:36 - the more details link We Go go to the to
236:39 - a 404 page you see so everything is
236:43 - working fine we don't have that page yet
236:45 - we will be working on it so up next I
236:48 - would like to add a loading State
236:51 - because if we are fetching data is
236:53 - likely to have some time where that data
236:56 - is been fetched so nextjs gives us a
236:58 - loading component we can use so in the
237:01 - web folder here I'm going to create a
237:03 - new file which I'll call loading.
237:06 - TSX so in here I'm going to show a
237:09 - spinner so let's Bo strap this react
237:12 - component I would say con loading
237:16 - spinner like this and loading spinner is
237:18 - going to be equal to this Arrow
237:21 - function and here I would WR a div and
237:24 - the class name is going to be Flex item
237:27 - Center justify Center and give this a
237:31 - height of
237:32 - screen okay so in here we're going to
237:35 - have the actual loading animation so
237:37 - we're going to have this div and I'll
237:39 - give this div a class name of Animation
237:42 - spin give this a rounded of full give
237:46 - this a height of
237:48 - 16 give it a width of 16 and also give
237:53 - it a b top width of Two and a border
237:57 - bottom width of two like
238:01 - this and I'll also give this a b gray
238:06 - 900 and this is our styling we can also
238:09 - go on to just make this a self closing
238:12 - tag like this and we should not forget
238:15 - to export this loaded spinner so I'm
238:18 - going to export it as the default export
238:23 - so we can already try it out if we
238:25 - reload our
238:27 - application we don't see it yet but I'm
238:30 - sure we're going to see cases where
238:32 - we're going to show the um loading
238:34 - animation and when fetching data you can
238:38 - also have have errors so I'm going to
238:40 - create another file here which I'll call
238:43 - error. TSX and these are actually
238:46 - special files that nextjs will call so
238:49 - this is an error boundary so this error.
238:51 - TSX and it has to be a client
238:54 - component okay so I'm going to export
238:56 - this as the default so export default
238:59 - function I'll call it
239:01 - error like this and this error component
239:04 - is going to receive some props so we're
239:06 - going to D structure error and we also
239:08 - going to the structure reset now for
239:12 - typescript to be happy let's set the
239:14 - types so this error property here is
239:17 - going to be of type error
239:20 - and it can also have uh an optional
239:24 - digest property which is of type
239:27 - string so string like this and then for
239:31 - reset reset is going to be of type
239:34 - function so let's spell reset correctly
239:37 - it's going to be of type function that
239:39 - return returns
239:41 - void okay so here let's have our jsx so
239:45 - we're going to return and here I'm going
239:47 - to have a div this div I'll give the
239:50 - class name of
239:53 - container like this and then margin to
239:55 - the x-axis of
239:57 - Auto so inside the div I'll have another
240:00 - div which I'll give the class name of
240:02 - font heading and I'll give this a text
240:06 - let's say red 800 now you can start this
240:09 - anyhow and I also give this a margin
240:12 - bottom of 10 so in here I would just say
240:15 - something went
240:19 - wrong like this okay so if we have an
240:22 - error this is going to show and actually
240:24 - I'll change this div to a H2 to so to a
240:28 - secondary heading and after this we're
240:31 - going to have a button and this button
240:34 - is going to have the class name of
240:36 - button primary like this
240:39 - and for the text I'll just tell the user
240:41 - to try again like this and on click of
240:43 - this button we're going to call a
240:45 - function the reset function and this
240:48 - reset function is just going to help the
240:50 - user to recover from the error and just
240:53 - going to go on to uh we render a
240:55 - particular segment of our application so
240:58 - where we have the error and if this
241:01 - reloads we don't see the error but we
241:04 - can actually create an error so we come
241:06 - over to our featured room I think I
241:08 - actually create this error in our
241:11 - homepage so here in our page. TSX I'm
241:13 - going to just throw an
241:15 - error so I'll throw a new error and this
241:19 - error I'm just going to say unable to
241:22 - fetch okay so that we see this um error
241:25 - boundary file come into action so now if
241:29 - we reload the application we see
241:31 - something went wrong okay and then we
241:34 - see the button try again okay so here
241:38 - this is the text something went wrong
241:40 - and the button here and if we click on
241:43 - this error here you see unable to fetch
241:46 - so this unable to fetch is coming from
241:49 - our page so here this unable to fetch we
241:52 - defined it like this so I'll take it off
241:55 - and I save and reload our
241:59 - application and now we are sure that
242:01 - whenever we have errors we are going to
242:02 - be catching the errors gracefully so up
242:05 - next let's go on and um try our query so
242:08 - I'm going to try this
242:10 - query and click on search which is
242:13 - obviously going to fail but you see we
242:15 - are redirected to the rooms page so the
242:17 - rooms page is the page we are going to
242:20 - be working on next so let's stop going
242:23 - to a 44 and let's go on and work on this
242:26 - rooms
242:30 - page okay so I'll come over to the IDE
242:33 - and here I will just close all of the
242:37 - tabs that I've got
242:38 - open and next I'm going to create this
242:41 - page so here in the web folder I'll
242:44 - create a new folder for rooms and then
242:48 - I'll create the page. TSX
242:52 - file now I'll boost STP the react
242:55 - component get rid of the page and rather
242:59 - name this rooms and then get rid of the
243:03 - react input and I can already make this
243:05 - uh client component making use of the
243:08 - use client
243:09 - directive now we've got this let's
243:12 - manage some states and I'm going to
243:15 - manage two states so the first is the
243:17 - room type
243:19 - filter and here set room type filter is
243:22 - going to be equal to you state with an
243:25 - empty
243:27 - string and next I'm going to set another
243:31 - state and this state is going to be the
243:34 - search query because I want to keep
243:35 - track of this search query to to apply
243:38 - my filter so con search query and here I
243:43 - have set search
243:46 - query is going to be equal to UST state
243:49 - with a default value of an empty string
243:53 - and also I'm going to initialize this
243:55 - constant and this constant I'm going to
243:57 - call search params so this is going to
244:01 - give me access to the sech params that
244:03 - the user is going to use and I'm making
244:06 - use of your States like this so next I
244:08 - would have the use effect and this use
244:12 - effect I would pass in the Callback
244:14 - function and the empty dependency array
244:18 - like this and first I want to go on and
244:22 - have this constant where I can have the
244:24 - different values of the search parameter
244:27 - so call this search query is going to be
244:29 - called to search par like this and we
244:32 - have do get all right so sorry this
244:36 - isn't your state this is use search
244:39 - param okay so use search param should be
244:41 - imported from next
244:43 - navigation and now if we come back here
244:46 - you see the dot get and we have atho
244:49 - completion so we want to get a value and
244:52 - the value name is search query okay so
244:55 - this name over here the search quy if we
244:57 - come over to the
244:59 - browser and let's try to fetch data so
245:02 - basic and I'll just give this test and
245:05 - search so up here the you aware but you
245:08 - see we have this rooms which is the
245:10 - rooms page and we have this query where
245:13 - we have the sech query and the value is
245:15 - test and we also have the room type and
245:18 - the value is basic so I want to get
245:20 - access to the test and basic and this
245:22 - gives me access to those values and
245:25 - apart from the search query I want to
245:27 - also have access to the room type and
245:30 - this is going to come from search pars
245:33 - doget and I'm going to get the with the
245:36 - key of room type like this
245:40 - okay so let's log these values to the
245:42 - console so I console. log the set query
245:47 - and also console.log the room type like
245:52 - this okay um let's see so search query
245:55 - not search params so I I would save this
245:59 - and come over to the
246:01 - browser and I will just reload the page
246:05 - and this is our rooms page so open the
246:09 - console and in here you see we are
246:11 - currently getting the values so basic
246:14 - and also test so we are correctly
246:17 - getting these values okay so let's come
246:20 - back to the browser to the IDE sorry and
246:23 - I'll get rid of these console. logs and
246:26 - have this if check so I'm going to check
246:28 - if we have room type then let's update
246:31 - the value here so I'm going to set room
246:33 - type filter to room type like this
246:38 - okay and we can also do the same for our
246:41 - search query so here I'm going to check
246:44 - if we have um search query then let's go
246:47 - and set search query to the set um
246:51 - search query value
246:56 - okay all right so let's um update the
246:59 - dependency
247:02 - array okay so now in our use effect if
247:06 - we have a value for
247:09 - our um typon filter and search query it
247:12 - will be updated accordingly okay so we
247:16 - can go into the world of data fetching
247:19 - and inside here actually I'm going to
247:22 - move our models fold out of the app and
247:25 - inside the source folder it's just a
247:27 - practice that I prefer and to fetch data
247:31 - for uh rooms I will come into the API
247:35 - folder not here actually so our lebs
247:38 - api. TS now we're going to have a
247:41 - function that will help us to get a room
247:45 - so let's export an async
247:49 - function and this function I'm going to
247:52 - call get
247:57 - room like this and we can have our
248:01 - result so const result is going to be
248:04 - equal to await our sanity CLI
248:08 - do
248:09 - Fetch and we'll call this method it
248:12 - needs a query now we can Define the
248:15 - query if we go into the sanity queries.
248:18 - TS file so I'm going to define a
248:20 - constant here which I would call get
248:23 - rooms query like this and this is going
248:26 - to be equal to groc and we're going to
248:30 - have a query so let's go get the hotel
248:33 - room so we're going to get room where
248:35 - the type soore type is equal to hotel
248:41 - room like this so no extra um check and
248:45 - let's get the parameters so we're going
248:47 - to get underscore ID we're also going to
248:50 - get the cover image we're also going to
248:53 - get the
248:55 - description let's also get the dimension
248:58 - of the room we're also going to get if
249:01 - the room is booked and also if it's a
249:03 - featured room so it's featured so all
249:06 - these properties also going to get the
249:08 - room name the room price the
249:12 - slug let's also get the type so these
249:16 - are the um parameters we'll be getting
249:19 - now we can call
249:21 - queries. get room query like this and
249:24 - the API
249:26 - folder and this should be all okay so
249:29 - let's return return our
249:31 - results now we have this get room
249:34 - function we can make use of this in a
249:37 - page so in our rooms page so I'm just
249:40 - going to come into the rooms page so
249:43 - here I'm going to create the server and
249:46 - run npm install s SWR and this is a hook
249:51 - that helps us handle things like errors
249:53 - loading State
249:55 - optimizations and stuff like that so
249:58 - let's restart our development s all
250:01 - right so let's have a look on how this s
250:04 - SW Arrow hook works so here I'm going to
250:06 - have the cons and we're going to
250:08 - destructure out some properties and we
250:10 - call the used s SW AR hook and this used
250:14 - s SW you see it's imported from s SWR
250:17 - and we call this
250:19 - hook like this and it needs a key so
250:22 - this is a unique key that it can use for
250:24 - caching data okay so it's a unique key
250:27 - and it's actually up to you what name
250:29 - you would give it here so I'm going to
250:31 - give this a name of get and then have
250:34 - this for/ hotel rooms like this and and
250:37 - next it needs a fetcher so see it needs
250:40 - a fetcher and the fetcher is a function
250:42 - okay so it's a function that is going to
250:45 - WR on the data so here we're going to
250:48 - have such function so it's an async
250:51 - function so let's have this asnc
250:54 - function and we can call it um fetch
250:57 - data you know any name of your choice
251:00 - like this and this is going to wron the
251:03 - call for our sanity studio so the
251:06 - function that we just wrote out our get
251:08 - rooms function like this which will be
251:10 - coming from our lebs and API
251:14 - folder okay so this get rooms function
251:17 - and see over here it Returns the result
251:20 - so in here let's not forget to call the
251:22 - get rooms function so it's going to
251:24 - return return our data and now we can
251:26 - take this fetch data function and pass
251:28 - it as the fetcher to this s SW hook so
251:32 - this is going to handle the loading
251:34 - State and we can get access to it here
251:36 - so we can get access to the data error
251:38 - and every other property so I'm going to
251:40 - D structure data error and it's loading
251:43 - and you know we still have more but
251:45 - these are the most commonly used um
251:50 - parameters so here let's first of all
251:52 - check if we have an error we are going
251:55 - to throw a new error like this which is
251:57 - going to be CAU by our error boundary
252:01 - and this new error we just going to make
252:03 - use of the text so say cannot fetch data
252:07 - and we are going to have another check
252:09 - so in case it is done loading and we
252:12 - don't have uh data so we're going to
252:14 - check if type of data is equal to
252:18 - undefined and like this we are not
252:21 - fetching so have this is is loading like
252:25 - this is false so if it's loading is
252:27 - false and we don't have any data we want
252:30 - to also go on and throw this error
252:32 - cannot fetch
252:35 - data so now we should have data and
252:38 - let's log data to the console so
252:40 - console. log data I'm going to save this
252:44 - and let's see what we have going so if
252:46 - we reload our browser and open the
252:49 - terminal we actually get an error so use
252:54 - effects change size so I think I think
252:56 - we can actually do without the
252:59 - dependency array and here the search
253:01 - params I'm actually going to take this
253:03 - off okay CU we're not going to be
253:05 - needing it and we can refresh our
253:08 - browser to see if everything works fine
253:11 - now so this was actually a warning not
253:13 - an error but I think we can just um do
253:17 - without the dependency
253:19 - array okay so we get on the find and
253:23 - yeah so we get our data okay so we get
253:26 - our data which is our rooms and if we
253:29 - expand this you see we have the
253:31 - different rooms with the property that
253:33 - we are quering from our sanity studio so
253:37 - so we have all these types over here for
253:39 - our rooms and it's great so now we have
253:41 - our room we can now make use of this
253:44 - data okay so here I'm first I'm going to
253:48 - get rid of the console. log and I have
253:51 - this function which is going to help us
253:53 - to apply our filters so this function
253:56 - I'm going to call filters room and it's
253:58 - going to take the rooms and this room is
254:00 - going to be a room array so an array of
254:03 - room and we're going to have our
254:06 - function body
254:08 - all right so if we come back to our apis
254:12 - and if we h on rooms you see it returns
254:15 - um any let's define the type for fetch
254:18 - so this fetch let's say is going to
254:19 - return return our room type so an array
254:23 - of room like this and re Over You See It
254:25 - returns our room array now we know that
254:28 - data is going to be of type room array
254:30 - like this rather than just of type any
254:33 - and we see it can also be
254:35 - undefined okay so we're going to have
254:37 - handle the undefined case later but now
254:39 - we want to filter through the rooms that
254:42 - we are going to receive so let's have
254:45 - all rooms and then we say filter and
254:48 - filter is a
254:50 - JavaScript method where we can apply to
254:52 - arrays an array method which we need to
254:54 - be done through a false Upon A Certain
254:57 - condition and then the rooms that
255:00 - reaches those condition is going to be
255:01 - written just going to leave these
255:03 - comments over here and then the second
255:05 - comment for our search
255:09 - query and these filter rooms we going to
255:12 - get in the end are the rooms we going to
255:14 - map through right than map through the
255:15 - room that we get because you know the
255:17 - room that we get from c. is the
255:20 - unfiltered room so we're going to have
255:22 - couple of checks first we're going to
255:24 - check if the room type filter so if we
255:27 - actually have a room type filter and
255:29 - then we're going to convert that room
255:31 - type filter to lower case like this and
255:34 - we're going to check if is not equal to
255:36 - the text of all so if this room type
255:39 - filter is not equal to all if that is
255:41 - true then we're going to go on and check
255:43 - again if the rooms do type so now the
255:47 - type that we have to lower case because
255:49 - now we know the F the user want to
255:52 - filter but the user doesn't want to
255:54 - actually filter all so if it's not equal
255:56 - to the room type filter to lower case
256:00 - again to avoid any casing confusion we
256:02 - are just going to go on and return
256:05 - false
256:07 - okay so room type filter is true then we
256:10 - are checking if the room type filter to
256:13 - lowercase if it's not equal to all now
256:16 - if that is true we want to also go and
256:18 - check if the room type lowercase is not
256:21 - equal to the room type filter to
256:24 - lowercase okay so if this doesn't match
256:26 - we are going to go on and Ron false like
256:30 - this so this is the filter for the room
256:34 - type we need to also apply the filter
256:36 - for the
256:37 - search query so again we're going to
256:40 - check if search query is true they want
256:42 - to check if the room name so if the room
256:45 - name doesn't include so if the room.
256:48 - name do to lowercase like this do
256:51 - includes so we're going to have this
256:53 - include and if it doesn't include the
256:55 - search query so this search query that
256:58 - the user provides from the URL and we
257:00 - shouldn't forget to also convert this to
257:03 - lower case so if this is the case we are
257:06 - also going to to return
257:09 - false and after all of these we
257:11 - shouldn't forget to return true okay so
257:15 - now we have this we have our function
257:18 - our filter room function we are going to
257:20 - use it and pass our rooms so up here we
257:23 - are going to have this Con filtered
257:26 - rooms because that's what we're going to
257:27 - get in the end we're going to get our
257:29 - filtered rooms so we'll call our filter
257:31 - rooms and we pass data so you know data
257:34 - data can be undefined so we'll pass or
257:37 - empty area like this so we are going to
257:40 - be mapping to our filter room let's log
257:43 - it to the console to sure that to be
257:45 - sure that our Filter Works as
257:48 - expected and here I need to get a valid
257:51 - room name so I'm going to come over to
257:54 - our sanity Studio rather than test I
257:56 - want to get a valid room room name so
257:59 - this room Delux suit I'm just going to
258:01 - copy Deluxe to use it as search query
258:05 - and let's also verify the type because
258:07 - here we have basic so you see let scroll
258:11 - down you see the type is suit okay so
258:15 - let's also filter by this room type like
258:19 - this and if we run this query take a
258:21 - look at the console for the data we get
258:23 - back so you see over here we get back
258:26 - this data so our filter is working with
258:28 - the name of the loog suit and all other
258:30 - properties now we are sure our Filter
258:33 - Works as
258:35 - expected we need to render this filter
258:37 - on the UI okay so I'll get rid of this
258:41 - console.log and map through our filtered
258:43 - rooms so first I'm going to give this
258:46 - some styling and here I'm going to give
258:48 - this the container styling and give it
258:51 - an MX Auto give it a pattern to the top
258:54 - of 10 and first I'm all just going to
258:57 - return our setch
259:00 - um components which will be coming from
259:02 - our components folder so this search
259:04 - over here and we already have the
259:07 - parameters that it needs so it needs
259:09 - this Prop Room type filter and room type
259:12 - filter is going to be equal to the room
259:14 - type filter and we're also going to pass
259:16 - the search query so the search query is
259:19 - going to be equal to the search query
259:22 - here and it also needs the room type
259:25 - filter so set room type filter is going
259:28 - to be equal to set room type filter and
259:32 - lastly it needs the set search query so
259:36 - we're going to set it to search search
259:38 - query so here we can now go on to map
259:41 - through our filtered rooms so this is
259:44 - what we have for our search
259:46 - component okay so I'm going to have this
259:48 - div and this div let's style it I'm
259:52 - going to give this a class name of flex
259:54 - imagin top of 20 and I'll also give it
259:57 - justify between I'm going to give this
260:00 - Flex wrap like this so in here we have
260:03 - the corly brackets and then our filter
260:07 - rooms map and map is going to map
260:10 - through each room so here we're going to
260:12 - have our room and that will just return
260:15 - return an empty fragment here at least
260:18 - for now we're going to return a card
260:20 - component but we'll come to that we are
260:23 - having this errors map okay all right so
260:27 - that's because this is I think because
260:29 - it's filter room it needs to be filtered
260:31 - rooms sorry about that so we need to
260:33 - match our filtered rooms that we just
260:35 - saw moments ago
260:37 - and now everything is working fine so
260:38 - rather than with on empty fragments I'm
260:40 - going to create a new component for our
260:43 - room card so in the component folder
260:46 - let's create a new folder I'll call this
260:49 - folder rooms card and create the jsx so
260:54 - room card. TSX file so I would make this
260:58 - a react component get rid of the react
261:02 - input and also go on to say this is an
261:05 - type FC and FC that will take in some
261:08 - props we don't have these prop types yet
261:11 - so let's quickly Define it here so type
261:15 - RS is going to be equal to object and
261:17 - this is going to take the room which is
261:19 - going to be our type room that comes
261:21 - from our model
261:23 - folder like this and here we are going
261:27 - to receive the
261:28 - props and we can go on to the structure
261:31 - the room from the props so the structure
261:35 - from the props like this this so here we
261:37 - get the
261:38 - room okay so in room we have different
261:42 - properties we're going to come back to
261:43 - those properties to the structure later
261:46 - and let's style this uh room card so I'm
261:49 - going to give it the class name of red
261:51 - XL also give it a width of let's say 72
261:55 - which is 18 R give this a margin bottom
261:59 - of 10 give this an MX Auto I'm going to
262:03 - give this on medium devices a margin X
262:06 - of
262:07 - zero and an overflow of hidden give this
262:10 - a text of black like
262:13 - this and in here we are going to go to
262:16 - have another div and this is for more
262:18 - like our image container so I'm going to
262:20 - give this a height of 60 uh overflow of
262:24 - hidden like this and in here we are
262:26 - going to render our image component from
262:29 - next image so I'll just move this to the
262:31 - top like
262:34 - this just close that to the f input and
262:37 - this image is going to take in some
262:39 - properties we know so it's going to take
262:42 - in the image source and this source is
262:45 - going to come from our room so which is
262:47 - our cover image so remember our cover
262:50 - image has the URL property so it's going
262:53 - to be our cover image. URL and the out
262:56 - we can now go on to the structure the
262:58 - name also from our room so just after
263:02 - the cover image I'll bring in the name
263:04 - so let's also give this more properties
263:07 - for the width I'll just give this a
263:09 - width of 250 and the same for the height
263:12 - so also give this a height of 250 pixels
263:17 - let's not forget to style this image
263:19 - I'll just go with the IMG which is our
263:21 - own
263:22 - costume
263:24 - um class name and the scale animation so
263:28 - that we just have the scale when we
263:29 - overover on it all right so after this
263:32 - image we are going to have another div
263:34 - now this div is going to hold the the
263:37 - name of the room and also the price so
263:41 - this div over here and inside this div
263:44 - we are going to have another div so I'll
263:46 - give this div a class name of flex
263:49 - justify between and for the text I'll
263:52 - give it a text of 2XL and give this a
263:55 - font of semi bold like this and in here
263:58 - we're going to have paragraphs so this
264:00 - paragraph is more like for the name and
264:02 - the next paragraph is going to be for
264:04 - the price we don't have this price yet
264:07 - we are going to bring it in we're going
264:09 - to destructure it from the room so let's
264:12 - do that quickly let's just come over
264:14 - here and let's bring in the
264:18 - price so after this div which will show
264:21 - the name and the price we can go on to
264:23 - show the room type so let's have this
264:26 - paragraph I'm going to give you some
264:28 - padding to the top just to shift it
264:30 - slightly away from the name and the
264:31 - price and I'm just going to give this a
264:34 - very small text so text EXT extra small
264:37 - and in here we're going to have the type
264:40 - and then the room so inside this
264:43 - brackets let's have the type and we need
264:45 - to bring in this type from the room like
264:49 - this so I'm going to bring in the type
264:52 - all right and after the type we have the
264:55 - description okay so here I'm just going
264:57 - to have another paragraph which I'll
264:59 - give a pattern top of three and give
265:02 - this a pattern bottom of six and here I
265:05 - just want to show the description of the
265:08 - room and I would also destructure the
265:11 - description from the room like
265:14 - this and if we come down after the
265:17 - description we are going to have a
265:19 - button so this button is actually going
265:23 - to be a link so a link that will take us
265:25 - to the um page where we can see more
265:29 - about the room so the room Details page
265:32 - and for that we need to bring in this
265:34 - log so don't forget this log has the
265:36 - current property and one also bring in
265:39 - the is booked so here we're going to
265:42 - have this href and this HF is going to
265:45 - be dynamic so it's going to go to slash
265:47 - rooms and then the SL log. current so
265:51 - the um slug of the room which is the
265:54 - room Details page and inside this link
265:56 - we are going to have a check so if it's
265:58 - booked you want to display another text
266:01 - so we're going to display the text of
266:03 - booked in all
266:05 - uppercase and if it's not booked we are
266:07 - just going to display the text of book
266:09 - now like this
266:12 - okay so let's startle this text I'm
266:15 - going to give this text um this link
266:17 - sorry a class name of BG primary and
266:20 - then I'll give it an inline block like
266:23 - this position the text in the center and
266:26 - give this a withd full so we still have
266:29 - more class names I'll give it a pattern
266:31 - to the Y of four give it some border red
266:34 - so rounded XL give this a text of white
266:39 - so we have a white text in the in our
266:41 - green background and then I'm going to
266:44 - give this a text XL also give it a font
266:47 - bold and on over I just want to
266:49 - translate this to the Y AIS so Y2 I
266:54 - think is going to be perfect in this
266:56 - case all right so we also need to give
266:59 - this um Shadow so I'll give it a shadow
267:03 - LG on Hover and I'm going to trans all
267:06 - and give it some animation duration so
267:09 - give this a duration of 500 like this
267:14 - and this is what we have going so now we
267:16 - are going to use this component in here
267:19 - so rather than we turn empty fragments
267:21 - I'm going to return return that room
267:23 - card that we just um defined and we're
267:26 - going to pass in the key because we're
267:28 - in the map and the key is going to be
267:30 - the room ID so room doore ID and the
267:33 - room is going to be equal to this room
267:35 - room like this let's see what we have
267:38 - going I'm going to save and if we come
267:40 - back to the IDE we see this room which
267:43 - is looking good so we get this H
267:46 - animation and we have this book now we
267:48 - have the type we have the description I
267:51 - think the description is quite large we
267:53 - can you know try to reduce it if we come
267:56 - here to the room card component I will
267:58 - just try to slice it and get the first
268:00 - 50
268:01 - characters so here I'm going to say the
268:05 - description slice so slice and or slice
268:09 - from 1 to 50 and just add dot dot dots
268:13 - yeah and let's preview what it looks
268:15 - like um I think that's quite small so
268:17 - I'll just Ram it up to 100 characters
268:21 - and I think this this makes more sense
268:24 - so we have our do Dot and then we have
268:25 - the first 100 so let's go back to the um
268:28 - homepage so that we don't have any
268:30 - queries we see our spner which is
268:33 - looking good and let's come over to the
268:35 - room space page so I'll come here and we
268:37 - see all other rooms here so the images
268:40 - are loading up like this um I think the
268:43 - name is quite distorted for some but
268:46 - it's looking good and let's fix this so
268:49 - let's fix the name and the price which
268:52 - is looking distorted so for fixing this
268:55 - I'll just
268:57 - come I'll just come back to the IDE and
269:00 - here this D where we have the name and
269:03 - the price so here in our room card
269:06 - not here where is it so here so I just
269:10 - missed it here so here I'm going to
269:12 - change it right than go with two XL I'll
269:14 - just go with XL okay so text XL like
269:18 - this let's save this and let's see what
269:20 - it looks like I think this looks way
269:22 - better than what we had
269:24 - previously okay so I think this looking
269:26 - good we see the different links you know
269:30 - and here we see this so if we try to
269:32 - filter you see we get suit already so we
269:36 - can also filter luxury we don't have any
269:39 - luxury room okay so let's go back to
269:43 - basic and I will just take this um
269:47 - executive room so I'll take this
269:49 - executive room I'll come over to our
269:51 - studio and I'll make this a LX room so
269:54 - that we just have one room of that type
269:56 - so let's look for where we have the room
269:59 - type I'm just going to scroll and check
270:02 - for where we have the room
270:04 - type
270:06 - where is it so this I'm going to choose
270:08 - Lux and
270:10 - publish and we can already come back to
270:12 - our application and give it a Reload so
270:14 - you see it's already left without even
270:16 - reloading so if we come over to luxur
270:19 - you see the luxur room here which is the
270:22 - executive room that we just added if we
270:24 - go to basic you see we now have three
270:27 - basic rooms so everything is working
270:29 - fine let's try to search so let's try to
270:32 - search by executive you see we don't get
270:33 - any search result but if we go to all
270:36 - you see we have our executive room and
270:37 - even if we go to suit we don't have any
270:40 - if we come to luxury you see the
270:42 - executive room here so everything seems
270:45 - to be working fine and if we cancel our
270:47 - search we see all other room results we
270:51 - can go to the
270:52 - homepage and now up next let's try to
270:56 - search here so we try to search basic
270:59 - and we just click search you see the
271:01 - basic is populated here but we don't
271:04 - have any search so you see set quer is
271:06 - empty and we have the different rooms
271:09 - okay so this is what we have going if we
271:13 - click on one of these rooms here we are
271:17 - redirected to a 4 for page so let's fix
271:20 - this room Details page and here where we
271:24 - have rooms I'm going to create this slug
271:27 - like this and in here I'm going to
271:30 - create this page. TSX so request coming
271:33 - to/ rooms SL log is going to come into
271:37 - this page so here we can have our jsx
271:40 - and I'll get rid of the react inputs and
271:44 - rather than page I'll call this room
271:49 - details and this room details is going
271:52 - to be receiving some props here and the
271:56 - props is going to be of type
271:58 - params now param is another object where
272:01 - we receive the slog property and this
272:03 - slog is going to be of type string and
272:07 - so that we see our console um this log
272:10 - in the console I'm going to make this uh
272:12 - client
272:13 - component making use of the use client
272:16 - directive and here let's D structure the
272:21 - slug from the
272:24 - props and to do that here we are going
272:27 - to first of all get params and from
272:29 - params we are going to get Slug and we
272:32 - can
272:33 - console.log slug
272:36 - here I'm going to save this and we have
272:40 - this errors are we spotting yep we are
272:44 - so now we see our hotel rooms component
272:46 - and if we open the terminal we should
272:49 - see the family suit so I just reload
272:52 - which is this slog SL SL rooms and this
272:54 - slog and here we see the slog great now
272:57 - we sure we getting this slog let's fetch
273:01 - data so to fetch data would come to our
273:04 - leavs a pi. TS and in here we are going
273:08 - to fetch our data so I'm going to export
273:13 - this async
273:17 - function like
273:20 - this and this function I'm going to call
273:23 - get
273:26 - room and it's going to be called with
273:28 - this slog because now we need to fetch a
273:30 - room that belongs to a specific
273:33 - Slug and we get our
273:36 - results and our results we're going to
273:39 - await our sanity client and here we call
273:43 - Fetch and fetch is going to return us a
273:48 - room like this and we can get it from
273:51 - our queries and we don't have such query
273:54 - yet so let's come to sanity
273:57 - queries and let's export this Con get
274:00 - rooms like this which is going to be
274:04 - equal to this Gro
274:06 - query so we want to get a
274:10 - room where the underscore type is equal
274:15 - to hotel
274:18 - room sorry hotel
274:22 - room and where the slog do current
274:25 - remember the slog has the current
274:28 - property is equal to the slug so use
274:31 - dollar sign slug here this will return
274:34 - an array so so we take the first element
274:37 - and here we can request the parameters
274:39 - that we need now this log is going to be
274:42 - passed as params so this log here it
274:45 - will come to api. TS and here we call
274:48 - the gets room and here you see when we
274:51 - pass params so this params we are going
274:54 - to pass this slug
274:58 - here and now this log is going to be
275:01 - used in here like this okay so let's
275:04 - continue here and in here we're going to
275:07 - receive the underscore ID the
275:10 - cover
275:12 - image we're also going to receive the
275:14 - description we're going to receive the
275:17 - dimension the discounts also the images
275:22 - is booked is
275:26 - featured we're also going to receive the
275:28 - name of the room the number of
275:34 - beds
275:38 - we're also going to receive the
275:42 - offer
275:44 - amenities the price the
275:48 - slug the special
275:55 - notes and we're going to reive the type
275:58 - so I'm going to save this and come back
276:01 - to
276:02 - uh apis I'm going to copy this cash no
276:06 - cash and actually use it
276:12 - here like this and also use it here like
276:16 - this we have our result we should not
276:19 - forget to return our results so I'm
276:23 - going to save this and let's be sure
276:26 - everything has been done properly so
276:28 - here in our page.
276:31 - TSX first I'm going to go on and have
276:35 - this um that we call our s SW AR
276:40 - hook so I use S SWR hook like this and
276:46 - it needs the key for the key I'll just
276:48 - pass SL API slash room and then it need
276:52 - the fetcher which I'll just Define up
276:54 - here as
276:56 - fetch
277:00 - room so I'll copy this fetro and Define
277:03 - it in here so fetro is going to be equal
277:05 - to this function I can make it a sync
277:10 - and here we're going to call get uh room
277:12 - that we just def find in our
277:16 - Libs and to this get room I'll pass in
277:19 - our Slug and now we can get data I'll
277:22 - just rename data to room we can also
277:28 - get error and we can also get is loading
277:33 - and then out come over to our page so
277:36 - our room page.
277:38 - TSX and I'm going to copy this check
277:41 - that we have over here and I will paste
277:45 - it in here like this sorry about that
277:48 - and rather than data I call this room
277:51 - and here we are just going to check if
277:54 - there is no room we are going to return
277:57 - return our loading spinner
278:02 - component okay and here we can just
278:05 - console. log room like this so if we
278:09 - save this and here we should see our
278:12 - room if we did everything fine and here
278:15 - we see our room so we see this family
278:17 - suit room we are currently looking at
278:21 - now we are sure we are having our room
278:23 - I'm going to get rid of this
278:25 - console.log and in here we are going to
278:28 - have our hotel Gallery component so
278:31 - let's define this component first in the
278:34 - component
278:36 - we're going to call this hotel
278:39 - photo gallery like
278:43 - this and I'm going to copy this and have
278:47 - the typescript file
278:50 - here and quickly have this here so get
278:55 - rid of the react input and import our
279:00 - hotel photo gallery from here and we can
279:04 - already pass the photos prop which is
279:06 - going to be to our room do images here
279:10 - I'm going to save this and now we are
279:12 - going to be working in here so we can
279:15 - already say this is going to be of type
279:17 - FC and here it's going to receive
279:20 - props and the props is going to be this
279:23 - object we would have
279:27 - photos and photos is going to be of type
279:30 - an array of
279:32 - images now we don't have this image Imes
279:35 - yet here we come all we do in so models
279:38 - room. TSX is over here we have this
279:41 - image type so let's export this type so
279:45 - we can make use of it so I'm going to
279:48 - save and here out export so this will be
279:52 - coming from our models like this so in
279:57 - here we are going to have this class
279:59 - name a class name of container and
280:03 - you're also going to give this MX
280:05 - Auto and in here we're going to have
280:08 - another
280:09 - div and the class name of this div is
280:11 - going to be greed and MD we're going to
280:14 - give it
280:15 - grid uh where is it grid call
280:20 - two give it position relative give it a
280:23 - cap of five and give it a px of three
280:27 - like this and inside this div we are
280:30 - going to have another div a div that
280:33 - will give the height of
280:35 - 540 pixels get this relative rounded to
280:41 - XL overflow hidden like
280:44 - this and in here we are going to have
280:47 - this div another
280:49 - div and I just give this D A Class name
280:52 - of
280:53 - hidden MD
280:59 - Flex give this justify Center item
281:02 - Center withth full and the height four
281:06 - like
281:07 - this so in here we are going to have
281:09 - this image now the idea of this div um
281:13 - is to have this section okay so we're
281:16 - going to have two sections here this is
281:18 - where we display other photo images and
281:20 - this is where we display more like the
281:22 - first image okay so inside this div we
281:26 - are going to have this image so import
281:28 - image from next image this will give an
281:30 - error so I'll change this to as image
281:35 - type over here and use this
281:39 - here now this image we are going to give
281:41 - it the source and the source is going to
281:43 - be equal to
281:44 - photos we haven't getting it here yet so
281:48 - I'm going to D structure photos like
281:50 - this and now we can make use of photos
281:53 - and take the first photo
281:57 - URL and for the alt the alt is going to
282:00 - be dynamic so here we're going to have
282:03 - the
282:06 - room
282:08 - photo and we're going to save some value
282:11 - in state so here we're going to have
282:15 - this um current photo
282:18 - index and here Set current
282:22 - photo index which is going to be equal
282:25 - to use
282:27 - State and have the default value of
282:30 - zero so it's important we do it like
282:33 - this and and I will not forget to make
282:36 - this a client component
282:38 - already isn't that use client
282:41 - directive so we're doing like this
282:43 - because we are going to be having a
282:45 - model and we want to keep track of the
282:47 - current photo we have so I'm just pass
282:50 - the current photo index plus
282:52 - one and we need the class name I'll give
282:55 - it a IMG class name with our scale
282:59 - animation class name and that also give
283:02 - this a c pointer
283:06 - yeah and for the width this will have a
283:09 - width of 150 pixels and the height of
283:13 - 150
283:15 - pixels all right it will also have an
283:19 - unclick Handler and then click we uh
283:23 - once we click on this image so this
283:25 - image we have here we want to show a
283:27 - model so we're going to have this open
283:32 - model um function that is going to take
283:35 - in the index so here open model which is
283:39 - going to take in the index and here we
283:42 - can call do
283:45 - bind like this and we'll pass this and
283:49 - then we'll pass zero so as the index so
283:52 - the first image that's why we're passing
283:54 - zero here all right so we don't have
283:57 - this function let's define this function
284:00 - so here comes open model is going to
284:03 - take in the index which is going to be
284:05 - of type
284:09 - number like this and now we have this
284:12 - index we are going to use it in here to
284:14 - set the current photo index to this
284:22 - index and here we going to have this
284:26 - const that will say show model and here
284:30 - set show model like
284:33 - this which is going to be equal to use
284:36 - State and by
284:38 - default it's going to be false and here
284:41 - when we open the model we're going to
284:43 - set show
284:47 - model to
284:50 - true all right so after this image just
284:54 - here we are going to have another div
284:56 - now you see this div is going to be
284:58 - hidden by default and this is a div that
285:00 - shows on uh large devices and this are
285:04 - that div is for mobile devices so I'm
285:07 - actually going to duplicate this because
285:09 - they are very much alike and this other
285:11 - div is going to show the photo with the
285:14 - current photo index and URL like this
285:18 - this Remains the Same since we on mobile
285:21 - we're not going to have the C pointer
285:22 - and the um scale animation and this is
285:26 - going to call open model so if we save
285:29 - this and we have a first preview we see
285:32 - this image and we go on mo mobile we are
285:36 - going to see the other image so we don't
285:39 - see because we still have this hidden so
285:42 - we want it to be hidden from mum devices
285:45 - and on mobile is going to show now so
285:49 - this div over here all right so now we
285:52 - are done with this if we click on this
285:54 - you know we don't see our model we are
285:57 - going to be fixing that
285:59 - next but we can now come on to collapse
286:03 - this div so this div that we just worked
286:05 - on and to show the user count we're
286:08 - going to have this other
286:10 - div and this is only going to be visible
286:13 - on um mobile devices so here we're going
286:17 - to say empty
286:19 - hidden and display this as Flex justify
286:24 - between like this items
286:27 - Center and in here we are going to have
286:30 - this other
286:32 - div going give it a class name of flex
286:36 - space X2 like this and in here we're
286:40 - going to have fa Arrow
286:43 - left that we import from react icons
286:47 - for/ fa and we can already import fa
286:52 - Arrow
286:56 - right
286:59 - sorry like this and here we are going to
287:04 - make use of the fa
287:08 - AR right like this so for the click
287:12 - event here I'm going to give this a
287:14 - class name of C
287:18 - pointer and now for the click event
287:21 - we're going to have two
287:23 - functions so handle
287:26 - previous for the backward image so for
287:29 - the one that goes left and this is going
287:32 - to be handle next
287:36 - I'll come back to this um shortly
287:39 - because these are just going to help us
287:40 - to slide through the different images
287:43 - but here I'm going to have this span
287:46 - tag and here we want to display the
287:48 - current image count so here we're going
287:50 - to display our current photo index plus
287:53 - one and we're just going to have this
287:56 - where we display the
287:57 - photos that
287:59 - length like
288:01 - this okay
288:05 - just like this and here we can go on to
288:07 - define the handle previous and the
288:10 - handle next so that we can swipe through
288:13 - the different um images so here I'm
288:16 - going to have this Con handle
288:20 - previous which is going to be equal to
288:22 - this aror function here and in here
288:26 - we're going to set current photo index
288:30 - then we get the previous
288:33 - index
288:34 - and we're going to check our previous
288:37 - index that is equal to zero so we're
288:41 - going to say our
288:43 - photos. length minus
288:46 - one otherwise we minus one from the
288:50 - previous index so this is going to
288:53 - update our previous index okay and then
288:57 - we can have a handle next function to go
289:01 - to the next image so this is going to be
289:05 - equal to this AR function and here we're
289:07 - going to set our current photo index
289:09 - where we have the previous index we're
289:13 - going to return our previous index if
289:16 - this is equal to our photos.
289:21 - length minus
289:24 - one we use zero okay so we're going to
289:28 - set it to zero otherwise we have our
289:30 - previous
289:31 - index plus one
289:34 - so this is going to help us to navigate
289:37 - to the next photo and you see here this
289:40 - is going to be visible only on mobile
289:44 - devices so if we come here we don't see
289:47 - it yet and if we open and go to mobile
289:51 - you see here we now see this and if we
289:53 - click you see we are going to the
289:56 - different photo images so this is
289:58 - working great and that's expected so we
290:02 - need to we need to show show this other
290:05 - section on desktop I think we should
290:07 - work on it next so displaying this other
290:10 - section and we are going to map through
290:12 - the different images that we have so the
290:15 - rest of the photo images to display here
290:18 - and we want to also keep track of the
290:20 - counts so before we start um
290:25 - mapping we're going to have this Con
290:28 - here and this Con we're going to call it
290:30 - display
290:32 - photos
290:34 - and this is going to be equal to
290:38 - photos do slice not slice do slice and
290:43 - from one we need to know the maximum
290:46 - visible photos that we want to show so
290:48 - con we can have this
290:51 - Maxum visible
290:54 - photos and this is going to be let's say
291:01 - two like this and here we're going to
291:04 - start splicing from one to the maximum
291:07 - visible photos minus one just like this
291:13 - okay so actually I'm just going to make
291:14 - this
291:15 - three and here we're going to have our
291:18 - remaining photos
291:21 - count here which is going to be equal to
291:24 - our total photos and our total
291:28 - photos is just going to be our photos
291:32 - length
291:34 - here so here is going to be equal to our
291:37 - total
291:39 - photos and we're going to minus our
291:42 - maximum visible photos here so now we
291:44 - are going to show sorry now we're going
291:47 - to show
291:48 - our display photos so we're going to map
291:51 - through our display photos and this will
291:53 - show the remaining photos
291:56 - count so if we come down here we're
291:59 - going to have another
292:01 - div and let's Di itate we're going to
292:04 - give it a class name of hidden because
292:05 - we don't want it to show on mobile
292:07 - devices and on medium devices we will
292:09 - display it as a grid we also have grid C
292:13 - to here give it a height full and give
292:17 - this a gap of
292:19 - five so inside this div now we're going
292:22 - to go and map to our display photos do
292:25 - map where we get each
292:28 - photo and let's just have this call back
292:31 - because we also need the index and we
292:34 - are going
292:35 - to return this
292:39 - div like this because we are mapping we
292:43 - need to give this div a key and the key
292:45 - is going to be the index and let's style
292:48 - it I'll give the class name of C pointer
292:51 - give it a height of
292:54 - 64 give this red 2
292:57 - XL and give this a overflow of
293:02 - hidden so now inside this div we can
293:05 - have our image component from next
293:08 - image to show the remaining images so
293:12 - this is going to have a width of
293:14 - 150 a height of
293:19 - 150 a source of uh
293:23 - photo. URL like this it's going to also
293:27 - have an alt and the alt is going to be
293:30 - dynamic so we're going to have a room
293:33 - for
293:36 - photos uh room photo and then we have
293:38 - our the last sign back tick where we
293:40 - display the index plus two like this and
293:45 - let's give it a class name so we're
293:47 - going to give it class name which is
293:49 - going to be IMG and
293:52 - scale
293:55 - animation all right so this is for the
293:57 - image and for the remaining photo counts
294:00 - just here so just after this here but
294:04 - still inside this div we have so here
294:08 - we're going to have our remaining photos
294:09 - count we want to check if this remaining
294:12 - photo count is greater than zero so if
294:15 - that is true we are going to show this
294:17 - div and this div is going to have the
294:20 - class name of C pointer relative a
294:24 - height of
294:25 - 64 rounded to XL and overflow of hidden
294:30 - like
294:32 - this and it's also going to have an
294:34 - onclick to open the model so here on
294:37 - click we're going to call open model and
294:41 - we use do
294:45 - bind and we'll just pass this and then
294:47 - we're going to pass the maximum visible
294:50 - photos
294:52 - here okay so now inside this div we can
294:55 - go on to show our
294:58 - image from next
295:02 - image and let's give this a width of
295:06 - 150 let's also give it a height of
295:09 - 150 let's give it the source and the
295:11 - source is going to be equal to our
295:13 - photos and here we have our maximum
295:16 - visible photos minus one and we can
295:20 - assess the URL property and for the alt
295:24 - we're going to give it this alt where we
295:26 - say uh room
295:29 - photo and here we have a maximum visible
295:34 - photos like
295:35 - this and let's give us a class name of
295:40 - IMG now this is the image but we don't
295:43 - just want to show the image so let's see
295:46 - if we have something like that let's go
295:49 - for a room where we have more images so
295:53 - let's see if we have more images
295:57 - here and let's check on
296:01 - room let's check
296:04 - executive we don't let's check the
296:06 - family
296:09 - suit we maybe don't let's check our
296:12 - featured room so it looks distorted here
296:15 - I just
296:18 - reload okay so let's check
296:26 - this and we wait for it to load um Let
296:31 - me let me just reload
296:36 - this okay so these are the images and
296:40 - let's see so let me change this to
296:44 - two and we see this okay so now we want
296:47 - to see this image but we don't want to
296:49 - actually see um just the image like this
296:52 - we want to show the count so to show the
296:55 - count just after this image we're going
296:59 - to have this div where will say plus uh
297:02 - remaining photos count so we just have
297:06 - the plus here and inside this div we're
297:09 - going to have this class name of
297:11 - absolute give it a c
297:15 - pointer give it a text of white give it
297:18 - insert Zer give it Flex justify
297:25 - Center give it a this background where
297:28 - we give it this R
297:30 - GBA and
297:32 - then
297:34 - 0 z0
297:37 - 0.5 give it a item Center and give it a
297:41 - text of two Excel so now if we save this
297:46 - and we come back here you see we see
297:48 - plus three okay so we see we have plus
297:52 - three images and we can say here so
297:56 - maximum visible images it we say four
298:00 - let's see what we have now we see plus
298:02 - one so one 1 two 3 and four okay so this
298:06 - is working as
298:09 - expected all right so after this we want
298:12 - to show the model because clicking on
298:15 - this now doesn't show any model and also
298:18 - clicking on you know this doesn't show
298:20 - any model all right so to fix this let's
298:24 - come just after this div I'm going to
298:28 - collapse and here we are going to have
298:31 - this div so it's more model
298:35 - open uh or what we call it show model so
298:39 - show model if show model is true then we
298:42 - want to have this div so this is going
298:45 - to have a class name of
298:47 - fixed a top of
298:49 - zero uh a width
298:53 - full uh height full uh
298:59 - Flex justify center items Center a BG
299:05 - black like this a BG opacity of
299:08 - 90 and a z index of
299:13 - 55 okay and inside this div we would
299:16 - have this other
299:18 - div and now this is the div that would
299:21 - have the image so let's give it a height
299:22 - of 75 viewport height and a width of
299:28 - let's say
299:30 - 320
299:32 - pixels
299:37 - and on medium
299:40 - devices like this I'm going to give this
299:43 - a width of
299:46 - 700
299:48 - pixels and give it position
299:52 - relative so now inside this div we are
299:55 - going to have our
299:58 - image and the source is going to
300:01 - be from our
300:04 - photos and here our current photo
300:08 - index. URL like
300:11 - this and the alt is going to be equal to
300:16 - uh room
300:18 - photo and here we have the current photo
300:22 - index plus one like
300:26 - this and it's going to have a width of
300:30 - 150 and the height of of 150 like this
300:36 - and we just give it a IMG class name
300:38 - because this is the model we not just
300:39 - add the scale
300:41 - animation so this is what we have next
300:45 - and after this we want to show two
300:48 - arrows and uh count so I think we had
300:52 - that before so where did we have it
300:55 - let's
300:56 - see so I want to show this so I want to
300:59 - show these two arrows and they count so
301:01 - I'm actually going to copy
301:03 - this div so I'll copy this div over
301:09 - here and I will use it
301:12 - here so it's not going to be hidden like
301:16 - this so I'll just give it Flex because
301:18 - we want to show the model on both um
301:21 - desktop and mobile and we're going to
301:24 - give item Center and just give it to
301:27 - pattering y of three and here we're
301:30 - going to give it Flex space X2 we can
301:33 - also position the items in the center
301:35 - and get this a text white like this and
301:39 - we have this Arrow now we have this
301:41 - other arrow and we have the span okay so
301:44 - this span we can style
301:47 - it and give it a text
301:50 - white okay and give it a text SM like
301:56 - this so we need to have a way to close
301:59 - the model and just outside this div so
302:03 - outside this div here here we're going
302:06 - to have another div sorry not on that
302:10 - div we are going to have a button and
302:12 - the div should be
302:14 - here and this button is just going to
302:16 - show the MD cancel from Material
302:20 - design okay react icons MD and for class
302:24 - name I'm going to give this a class name
302:26 - of font medium give it a text 2 XL and
302:30 - give it a text tertiary
302:34 - dark like
302:36 - this and on click of this button we are
302:39 - just going to call close
302:44 - model what did we call it so let's see
302:48 - model do we call this show
302:52 - model we don't have the close model
302:55 - functionality so let's define it so cons
302:58 - close model it's just going to be this
303:01 - function
303:04 - like this so we set show model to
303:09 - for and now we can call close model here
303:13 - like this and let's start this button I
303:16 - give it a class name of absolute give it
303:19 - a top of two a right of
303:22 - two not
303:24 - ring give this sorry give this a right
303:29 - of two give it a text white and give
303:32 - this set Tex LG like this and if we come
303:36 - back here now I'm just going to reload
303:39 - our
303:41 - application and if we click any of these
303:43 - images we should see our model
303:46 - displaying so I'll click on this we see
303:48 - a model it's a little bit distorted but
303:51 - let's see the functionality works yeah
303:54 - so it's a little bit distorted and let's
303:57 - fix that so here where do we have it so
304:01 - this our show model fix top zero and we
304:05 - should give it left zero like
304:08 - this so let's see if that fixes it we
304:11 - try again and yeah so this fixes it and
304:14 - we see our model but now the image isn't
304:18 - correctly positioned because this is
304:20 - should be 75
304:22 - VH okay and now we see our model works
304:27 - fine so we can close our model and if we
304:30 - go to mobile device device and we click
304:34 - on this we see our model great and it's
304:38 - working fine and we can come over to
304:41 - other rooms so you see our rooms over
304:44 - here and if we click on another room so
304:47 - if we just click on this room we come to
304:49 - the room Details page and we see this
304:52 - the room images now we are done with
304:54 - this let's continue and next we are
304:57 - going to add more life to this section
305:00 - where we can Now show some deson or some
305:03 - details about this hotel
305:06 - room all right so and for this section
305:09 - let's come back to code and I'll get rid
305:14 - of everything we've got
305:17 - here and we can come over to our app web
305:21 - rooms the slug and then the slug page so
305:26 - this page over here and after this we
305:28 - are going to have this div and this is
305:31 - going to have the class name name of
305:34 - container and MX
305:37 - Auto and also Imagine to the top of 20
305:40 - like
305:42 - this so inside here we're going to have
305:45 - this div and this div on medium devices
305:48 - we are going to display it as grid and
305:51 - the medium devices we are going to give
305:53 - this grid Cod 12 give this a gap of
305:57 - 10 and give it a p on the x-axis of
306:01 - three so now inside this div remember we
306:04 - gave this div um grid Cod 12 so now
306:09 - inside here we are going to have this
306:12 - div okay and this is going to have a
306:14 - class name of on medium devices we're
306:17 - going to go co span
306:20 - 8 and then on medium devices I would
306:23 - also give it the full width okay now
306:26 - this is going to have the hotel
306:31 - information
306:34 - and after this we are going to have
306:36 - another div and this other div here
306:38 - let's style it so this div is
306:41 - the is going to be our book room C here
306:45 - so our book room call to action
306:47 - component and we can already styled it
306:49 - so medium devices I'm going to give
306:51 - this uh Co span 4 so this is going to
306:56 - span eight and then this is going to
306:58 - span four giving a total of
307:01 - 12 okay and we're going to give it red
307:04 - XL
307:06 - Shadow
307:07 - LG and on du we'll just give it a lower
307:10 - Shadow so Shadow like
307:14 - this and on dark let's color the give
307:17 - the shadow a color of white so Shadow
307:21 - white like this we position it STI and
307:25 - then 10 pixels not 10 pixels I think
307:27 - that's 40 pixels so top 10 like this yep
307:31 - so that's 4 40 pixels from the top give
307:33 - it a height of feet to fit the content
307:36 - and an overflow of
307:38 - Auto all right so now we are going to be
307:41 - working in this hotel information
307:43 - section we don't see anything yet but
307:46 - this is where we are going to be working
307:48 - in so in here let's have this div so
307:51 - without any class name and now we're
307:53 - going to display the room name and the
307:55 - dimension so this
307:56 - H2 is going to have this class name of
308:00 - font bold text left and text LG and on
308:06 - medium devices text to XL like this and
308:10 - inside here we are going to have a room.
308:13 - name and just in parenthesis we are
308:16 - going to have our room do description
308:19 - and we save and we come back to
308:21 - application not description sorry uh
308:25 - Dimension so room. Dimension so we save
308:28 - and we come back to application now we
308:30 - see the room name and we see the
308:33 - dimension okay so here we're going to
308:35 - display the amenities next so after this
308:38 - H2 we are going to have this div and
308:40 - we're going to give the class name of
308:43 - flex and imagine y of 11 like this and
308:47 - in here we're going to have a room.
308:50 - offer amenities and we're going to map
308:52 - through each and then we get each
308:54 - amenity and we're going to return
308:57 - return this
309:01 - div
309:03 - here okay because we're in the map we
309:05 - need to provide a key and the key is
309:07 - going to be equal to The Amity doore key
309:12 - and for styling on medium devices I
309:15 - would give this uh width of
309:20 - 44 uh width sorry so a width of 44 like
309:25 - this I'm just trying to create more like
309:27 - a box where we can display a font aesome
309:30 - icon and also the Amity name then I'll
309:33 - give this width of
309:35 - fet give it a text
309:38 - Center give it a padding on the xaxis of
309:41 - two give it on medium devices a padding
309:45 - on the x-axis of zero give this a height
309:48 - of 20 and medium devices a height of 40
309:53 - give this some margin on the right Axis
309:55 - of three and give it this BG so this
309:59 - slight gray color like this with this
310:01 - head code # e ff0
310:05 - F2 and on that mode we are going to get
310:10 - this a BG gray of
310:12 - 800 we're going to give this red LG like
310:17 - this display this as a greed and place
310:20 - content Center like this so first we are
310:24 - going to have this
310:26 - icon it's not going to show up because
310:28 - we don't have the font aome CDN but the
310:31 - class name is going to be dynamic like
310:33 - this and here we're going to display fa
310:35 - a solid so font awesome solid and here
310:40 - we have our amenity do
310:42 - icon okay and we're also going to give
310:44 - this on medium devices a text to
310:49 - Excel and that's all for the icon and
310:52 - here we're going to have this
310:53 - paragraph where we are going to display
310:56 - the amenity name so I think we call it
310:58 - amenity so it's also going to be this an
311:02 - amenity we receive here and then we're
311:04 - going to assess the amenity property and
311:08 - we should also style this paragraph So
311:10 - this is going to have a class name of
311:13 - text extra small and the medium devices
311:17 - text base and give it a pattern to the
311:20 - top of three so if we check go back to
311:23 - application we're not going to see this
311:25 - font awesome icon so let's see if we
311:28 - come back here you see we don't see the
311:31 - font or some icon and in order for us to
311:34 - see it we will just come here and we
311:37 - need to add this CDN link so it we come
311:40 - to web and we come to our layout. TSX so
311:44 - in here we're just going to have the
311:46 - head tag and in the head tag we're going
311:49 - to add a link to point to
311:52 - CSS okay so the H I'm just going to
311:56 - replace this H here with this link that
311:59 - goes
312:00 - to um this link that goes to font
312:04 - awesome like this and we can also
312:06 - already have the cross origin and send
312:09 - this to Anonymous like this so if we
312:11 - save this and we come back here now we
312:15 - see we display the icons we don't see
312:18 - this icon for the private Garden so
312:20 - perhaps we must have you know missed
312:23 - this icon somewhere but at least we see
312:26 - our icon shop so why do we have because
312:30 - you see this actually look looks
312:32 - distorted so let's see what we are
312:35 - missing so we give the
312:37 - width um withd fet Tex Center PX of two
312:44 - and M medium devices PX of Z give a
312:48 - height of
312:49 - 20 and height M3 we give it this
312:53 - background yeah so this should be great
312:56 - like
312:57 - this now if we save this and we come
313:00 - back yeah so this looks better we don't
313:02 - see the icon here so maybe we chose the
313:05 - wrong icon so that's why I said it's
313:07 - always important to choose the correct
313:09 - icon so that you have the icons display
313:13 - okay so let's continue and after this
313:17 - section here we are going to have
313:19 - another section for the description okay
313:22 - so after this div just here we are going
313:25 - to have another that div and I'm going
313:28 - to give this a class name of margin
313:29 - botom 11 and in here we can have the
313:33 - H2 and this H2 we're going to give a
313:36 - class name of font bold we're also going
313:40 - to give a text 3 Excel and then imine
313:43 - bottom of two like this and here we can
313:47 - display the the text
313:50 - description like this so after this um
313:54 - H2 we are going to have this B tag where
313:56 - we then go to display the room do
314:00 - description so let's save and let's see
314:03 - if we see our description shop so this
314:07 - is our description like this and this is
314:09 - the text okay so after this so I'm just
314:13 - going to collapse this or maybe we just
314:16 - continue all right so after this div
314:19 - we're going to have this other div and
314:20 - we just give it a class of maging bottom
314:23 - 11 so just like this div here actually
314:26 - I'm going to collapse this div and also
314:28 - collapse this for the description and
314:30 - now we have this where we show the
314:32 - different amenities so here inside this
314:35 - div we are going to have this H2 and
314:38 - inside this H2 we say they
314:41 - offered amenities like
314:46 - this and in here I'm going to give this
314:49 - a class name of font bold and give this
314:52 - a text 3 XL like this and give us a imin
314:56 - bottom of
314:58 - two all right so inside this H2 we are
315:01 - going to have this div and I'm going to
315:04 - give this a class name of grid and give
315:06 - this grid code to like this and here I'm
315:09 - going to say our room do amenities off
315:14 - amenities and map just as we did
315:16 - previously and here we have each
315:23 - amenity and we are going to Reon this
315:27 - div here like
315:29 - this and we should give this a key and
315:32 - the key is going to be equal to the
315:34 - amenity doore
315:37 - key so inside this div we can display
315:42 - the icon and the amenity as we had
315:44 - before so I'm going to give this a class
315:46 - name of on medium devices I'll give this
315:50 - a class of text
315:51 - base sorry I just give it the class of
315:54 - flex as we had previously items Center
315:58 - and on medium devices I'll give this
316:00 - some margin y of Z
316:02 - and give it a margin y of one so in here
316:06 - we are going to display the icon as well
316:09 - as the text so I'm just going to copy
316:12 - this and paste it in here like
316:17 - this so this should be 1 M so that means
316:21 - we had the typo over this I'm going to
316:23 - save this and fix the typo that we just
316:26 - saw
316:27 - here okay so it should be one M like
316:30 - this
316:32 - and if we save let's see if we see this
316:35 - section okay we see this section and our
316:38 - styling looks to be off again so where
316:41 - did I miss the styling so here we
316:44 - display GD grid code to and then inside
316:48 - this div we give class Flex item
316:52 - Center so everything seems to be fine
316:56 - I'll get rid of
316:59 - this text size here
317:02 - and give this uh medium devices text
317:04 - base
317:06 - text uh right pattern top I'm going to
317:09 - give it a margin left of two so if I
317:12 - save this and we have another preview I
317:15 - think this looks better now we having
317:17 - this error with the cing because we
317:20 - don't have any icon so let's try to see
317:24 - another room just see the executive room
317:27 - and here we don't have this other icon
317:30 - so I chose icons that were not you know
317:33 - F awesome that's why we don't see the
317:36 - icons display so it's important to
317:38 - choose font a some icons so that it
317:41 - display okay so this room has you know
317:43 - all the icons great so we can continue
317:46 - working and after the offered amenities
317:49 - we can just go into display another
317:51 - section for safety and hygiene okay so
317:55 - I'm going to collapse this div and here
317:58 - I'll have another div and I'll give this
318:00 - a class name name of Marin bottom
318:03 - 11 and here I would have a H2 I say
318:09 - safety and
318:14 - hyene like this and quickly sty this
318:17 - font
318:19 - Bard and giv us a text 3
318:23 - Excel and give this a imin bottom of two
318:27 - so after this we are going to have this
318:29 - div and I'll give you the class name of
318:31 - of grid and grid call two like this and
318:36 - in here I'm going to have this other
318:38 - div and the class name is going to be
318:41 - Flex item
318:43 - Center my of one and then on medium
318:46 - devices my Z like this and here we're
318:51 - going to have this MD
318:55 - outline um
318:57 - cleaning services like this and just
319:02 - after this we are going to have this
319:04 - paragraph so
319:06 - here we're going to have this
319:09 - paragraph okay just like this and inside
319:14 - this paragraph We just say daily
319:18 - cleaning okay so let's starty this
319:21 - paragraph I'm going to give this a class
319:24 - name
319:26 - of
319:27 - ml2 on medium devices get text base
319:31 - and give this
319:34 - uh text extra
319:37 - small like
319:39 - this text extra
319:42 - small okay so if we save this and we
319:46 - have a quick preview we should see this
319:48 - section here so our safety and hygiene
319:52 - and I'm just going to duplicate this so
319:56 - just this I'm going to bring it down
319:58 - couple of
320:00 - times
320:02 - and next we're going to have
320:04 - after um daily cleaning we can change
320:07 - this to fire extinguisher so I'm going
320:10 - to use this l i a and f i r e going to
320:15 - take this off so that I can get Auto
320:17 - comption so l i a f i r e we don't get
320:23 - so let's import it manually and this the
320:25 - opportunity to rearrange our order of
320:28 - inputs
320:30 - here so I'm going to import this coming
320:33 - from react
320:35 - icons for/ L A like this and this is
320:41 - going to be L
320:43 - fire extinguisher solid and we can also
320:47 - import from react icons for/
320:51 - aai and this is going to be the AI
320:56 - outline medicine box and we can already
321:00 - import
321:02 - the from GI so here we're going to have
321:05 - this GI
321:07 - smoke um bomb great so let's come back
321:11 - here and now we're going to have our
321:14 - Auto completion so this is going to be L
321:18 - fire still don't get the auto comption
321:21 - so I have to copy it manually okay and
321:24 - paste it in here all right so this is
321:28 - for this and here I'm going to to have
321:31 - the text
321:34 - of
321:37 - fire
321:41 - gous okay so that's for that and this is
321:44 - going to be the AI outline medicine box
321:49 - and here we're going to have the
321:52 - text this infections and
321:59 - sterilizations steril
322:03 - iations like this l i a
322:08 - yeah r i
322:12 - sterilizations okay so after this we're
322:14 - going to have this where we just display
322:16 - the GI smoke bomb and this is going to
322:19 - go with the text of
322:23 - smoke
322:28 - detectors okay so let's save and let's
322:31 - see if everything came out
322:34 - clean did we save it yes we did and here
322:38 - we don't see so let's um reload our
322:42 - application to be sure that everything
322:45 - works fine it's taking some time to
322:49 - build okay yeah so this is it for this
322:52 - section and after this section next we
322:55 - are going to have a review section
322:59 - okay so I'm going to collapse this and
323:02 - now after this we are going to have a
323:05 - review section so we're not going to you
323:08 - know have this review but we can already
323:10 - map out the components we're going to
323:12 - have this div which I'll give the class
323:15 - name of
323:16 - Shadow give it uh on dark
323:19 - mode
323:21 - here give this a shadow white and give
323:25 - this red LG and give it a padding of six
323:29 - and in here we're going to have this
323:30 - this div and I'll give this class name
323:32 - of item
323:34 - Center and give it a margin bottom of
323:38 - four and in here we're going to have
323:40 - this
323:41 - text which we're going to just style and
323:43 - say on medium devices give it a large
323:46 - text and font semi bold like this and
323:50 - here we have customer
323:54 - reviews okay so after this div so after
323:57 - this we are going to have another div
324:00 - and this is a that is going to display
324:02 - the review component so I'll give this a
324:04 - class name of grid a grid calls let's
324:07 - say one and a medum devices get this
324:10 - grid C
324:12 - two and get this a capap of four so in
324:16 - here we are going to have our reviews so
324:18 - I'm going to cut this and paste this in
324:22 - here like this so if we save and we come
324:25 - back we should see the text yeah so we
324:27 - see this customiz reviews and we see
324:30 - this Shadow over here so I'm just going
324:32 - to go to our dark team and we see our
324:36 - customer review section here which is
324:40 - going now going to contain the different
324:42 - reviews but we don't have this yet so
324:45 - now we can focus on the booking section
324:49 - of our
324:50 - application we are going to first start
324:52 - with
324:54 - the we're going to first start with the
324:56 - component and then we're going to
324:58 - proceed to integrate strip
325:01 - payment so we can already create this
325:04 - component if we come to our component
325:08 - folder so here let's have this book room
325:13 - CTA
325:15 - component and have the jsx
325:19 - file and have
325:22 - this so I'm going to remove the react
325:25 - input and already make this a client
325:29 - component
325:32 - and then import this inside here so here
325:36 - uh book room C
325:39 - here should be
325:42 - imported so here all right so let's come
325:45 - back to this we check the browser now we
325:49 - see our book room sit here like this and
325:52 - we see the little Shadow we have and you
325:55 - see it's already sticky okay so you see
325:58 - because of the position sticky that we
326:01 - set on this book room all right so now
326:04 - we have
326:05 - this rest style it more so we're going
326:09 - to give this a class name of
326:12 - px7 and uh py of
326:16 - six and then we're going to have this
326:20 - heading so this heading isn't going to
326:22 - have any class name and then we're going
326:24 - to have this span now this span is going
326:27 - to have some class names and we need to
326:30 - have access to the discount to be able
326:33 - to style this properly so we need to
326:36 - calculate the discount and to calculate
326:39 - discount we need to also you know have
326:42 - the price so you're going to say this is
326:45 - an FC for functional component and we
326:48 - can have the
326:51 - props which is going to be equal to an
326:54 - object and we are just going to ask for
326:56 - the price at least for now which is of
326:59 - type number and we also going to add for
327:02 - ask for the discount which is of type
327:06 - number so I'm going to pass this props
327:09 - over to
327:11 - this
327:13 - here and here I'm going to get the
327:19 - props okay so we're going to D structure
327:21 - these
327:22 - values from our props like
327:26 - this and we are going to get our price
327:30 - and and also get our discount from here
327:33 - so to calculate our discount price so
327:36 - let's have our discount price is going
327:39 - to be equal to our price and here we're
327:42 - going to subtract our price divided by
327:47 - 100 and we're going to multiply this by
327:52 - the
327:53 - discount so this is going to give us our
327:56 - discount price and now inside the span
328:00 - we can show the discount price somewhere
328:03 - here but for styling purposes we are
328:06 - going to say if we have discount so
328:10 - here if discount is
328:13 - true if it's a true the value then we're
328:16 - going to have this text grade
328:21 - 400 otherwise we are just going to have
328:24 - an empty
328:28 - string like this
328:31 - and we
328:33 - always we always want to have this fonts
328:36 - B and then text extra
328:39 - LGE all right so now inside this pan we
328:43 - can go on to display the price so I'm
328:45 - going to have the the sign here and we
328:48 - would have the price
328:52 - here and after this we want to also show
328:56 - the discount so here we're going to
328:59 - check if discount is true then we're
329:02 - going to show this
329:04 - span and
329:06 - otherwise we would show nothing we'll
329:08 - just show an empty string so now this
329:11 - pan is going to show our discount price
329:15 - that we have
329:16 - calculated so here we are going to show
329:18 - our discount price and we're going to
329:22 - style this so this is going to have this
329:26 - font
329:27 - bold and it's going to have this text XL
329:31 - not left text X um LG sorry not LG extra
329:37 - large like
329:38 - this and we're going to have this text
329:42 - so after this P here we're going to have
329:44 - this pipe and then have
329:47 - discounts and display our
329:50 - discounts like
329:52 - this and show the
329:54 - percentage okay and then we can have
329:57 - some full stop and then we have
329:59 - now
330:00 - and in this now I'm just going to have
330:03 - another
330:05 - span okay and now inside the span that's
330:09 - where we are going to have this discount
330:12 - price okay I think it's going to make
330:14 - more sense when we interpret it so text
330:18 - test shary deck so this is more like
330:21 - showing the user the price in this pan
330:24 - and then if discount is true we want to
330:26 - then tell the user you know the discount
330:28 - price so the discount
330:31 - and then the price now we have errors
330:34 - because we need to provide the necessary
330:36 - props and for now it needs the discount
330:39 - and discount is going to be equal to uh
330:42 - room.
330:44 - discount and it also needs the price
330:47 - which is going to be called room. price
330:50 - like this so let's save come back to the
330:55 - browser and we see this so $100 and then
330:59 - we see the discount which was 8% and now
331:02 - is
331:04 - $92 so I want to give a gap between
331:06 - these dollars and this uh percentage
331:09 - this pipe here so where do we have the
331:12 - pipe um in our book room CTA just here
331:17 - so I'm going to give this space like
331:19 - this and save this and if we come back
331:23 - now we have the space so this $100 and
331:26 - now discount
331:27 - 8% is now 92 perc so if we check some
331:31 - other
331:33 - rooms I'll just check this family suit
331:37 - 300 it doesn't have a discount and we
331:39 - can confirm if Rec did we call it um I
331:43 - think we have an error here so let's
331:44 - reload this this is family suit so let's
331:47 - wait for our studio to
331:51 - reload Okay
331:59 - so
332:05 - let's
332:07 - see so family suit if we check we don't
332:12 - have any discount and that's why we
332:14 - don't see the discount TCH so it's
332:17 - already working and if we check this we
332:19 - have a discount yeah we have a 20%
332:21 - discount and that's why the price is now
332:25 - $400 so great it's working as expected
332:30 - so after this H3 we are going to have we
332:33 - going to have this div which is actually
332:36 - going to be self
332:40 - closing and now we can style this I'll
332:43 - give it to with P give this a border
332:47 - bottom so border
332:49 - bottom two give this a border bottom
332:53 - secondary and give a margin y of
332:56 - two and let's see what it looks like so
333:00 - so this over here and after this we are
333:03 - going to have our special notes so I
333:06 - have this div and here we'll just
333:08 - display our
333:10 - special
333:13 - notes which we need to bring in so
333:15 - rather than I think I'll use a
333:18 - H4 and I'll get this NY
333:22 - of8 so let's bring in this special notes
333:25 - so bring it in
333:28 - here and bring it in here which is going
333:31 - to be of type string and we can now
333:34 - request it from here so the special
333:37 - notes which is going to be equal to the
333:39 - room does special notes like
333:43 - this and let's have a
333:46 - preview so we see the special notes here
333:49 - and let's be sure this application is
333:52 - responsive and yes our application is
333:56 - fully
333:58 - responsive okay
334:02 - so after this special notes we are going
334:05 - to have a div where we display some date
334:08 - Piers so here we're going to give this
334:11 - uh class name of flex like this and in
334:15 - here we're going to have another div and
334:17 - this div is for the checkin date so to
334:20 - have a label and the HTML 4 is going to
334:24 - be check in
334:27 - dates and this D is going to have the
334:31 - styling so the class name of this div is
334:33 - going to be with
334:36 - 50% and it's going to have a pattern to
334:38 - the right of two and this label is going
334:42 - to display the text check in date like
334:46 - this and let's style this we are going
334:49 - to give this a class name of block give
334:53 - this a text
334:55 - xsm give this a font medium give a text
334:59 - Gray 9
335:01 - 100 yeah and on dark mode I'm going to
335:04 - give this a text Gray of 400 like this
335:09 - and here we display the check in date so
335:12 - now we need our date pier and I would
335:14 - open the terminal and I'll quit
335:16 - determiner now and
335:20 - npm install react date Pier like this so
335:25 - we will just wait for it to install or
335:28 - we could use it already so I would come
335:30 - here and in here I would import date
335:37 - Pier that would come from react date
335:41 - Pier Library we just installed since we
335:43 - need to install the types so mpm install
335:47 - save Dev this type out copy and paste
335:50 - this in here like
335:53 - this okay so while that's installing we
335:55 - can already import okay it's done so
335:58 - let's restart the application
336:00 - using npm rund Dev so we can already
336:03 - import the CSS file in here I'm just
336:07 - going to import the react date pier and
336:12 - there we have the this folder and there
336:14 - we have the react date
336:17 - picker. CSS file
336:20 - here so now this date picker we are
336:23 - going to use it here so after this label
336:27 - we are going to have this um so in in
336:29 - here we are going to display the date
336:32 - Pier component and it needs a prop and
336:36 - now it needs so many props so first
336:38 - selected we are going to come back to
336:40 - this it also needs the unchange we are
336:43 - going to come back to this and we can
336:45 - pass the date format so the date format
336:47 - Al go is day and here month and then the
336:52 - year and you we can also pass
336:56 - the disabled prop cuz I actually wanted
336:59 - to be disabled you know
337:04 - and so I'll get rid of disabled prop
337:08 - okay and we can also pass the minimum
337:12 - date okay we want the minimum date to be
337:15 - the current date so I'll set this to new
337:19 - date like
337:20 - this and here we can already give it an
337:23 - ID and the ID is going to be this
337:26 - checking date from the label so that
337:29 - that's going to be our
337:31 - ID and let's style it I'll give it a
337:34 - with
337:36 - full and give this a border and give
337:39 - this a text black give this a border
337:42 - gray
337:43 - 300 like this get this red LG give this
337:48 - speed
337:49 - 2.5 and focus like this give this ring
337:53 - primary
337:56 - 600
337:58 - ring
338:01 - primary like
338:04 - this and on
338:07 - forus I'll give this border
338:13 - primary border primary like this I don't
338:17 - know we can have a variant no we can't
338:20 - so put that primary like this and we're
338:23 - going to have an error because we need
338:25 - to pass the unchange and we need to pass
338:28 - the select selected prop so selected is
338:32 - going to be the check in
338:35 - date okay and on change we need a
338:38 - function to update the setting um
338:41 - checking date so we can call uh we're
338:44 - going to get the date from this function
338:48 - and then we can call a function so set
338:51 - check in date like this and we're going
338:54 - to pass the
338:58 - date
338:59 - gosh okay so now we need to receive all
339:03 - of these uh from props as
339:07 - well so the checking date I am going to
339:11 - receive it here and this is going to be
339:13 - of type date or null like
339:20 - this okay and then we have the set check
339:23 - in dates which is going to be of type
339:28 - dispatch because it's going to be coming
339:30 - from State and here we're going to have
339:33 - the set State
339:37 - action and we're going
339:39 - to know have a type of date or null in
339:43 - our state that's the type of action
339:45 - we're going to dispatch and here we can
339:48 - now bring in check-in date and then
339:51 - set checkin date like this and let's
339:55 - save this and now we need to pass the
339:57 - props to this book now C here so so we
339:59 - need to handle them instead so I would
340:02 - just come just after this props and here
340:06 - I would have
340:08 - the checkin date and then I would have
340:11 - the set checkin date like this this is
340:15 - going to be equal to UST
340:17 - State and UST state is imported from
340:20 - react I'll just rearrange this and UST
340:23 - state is going to have a default value
340:26 - of
340:27 - null and for typescript this is going to
340:29 - be of type date or null like this okay
340:34 - so we can already have the state for the
340:36 - checkout date so check out
340:43 - dates like
340:46 - this and here we have set check out
340:52 - dates and every other value Remains the
340:55 - Same okay so let's pass the props here
340:59 - going to pass the checkin date to be
341:00 - called to checkin date and here the set
341:04 - checkin date to be called to set checkin
341:07 - dates like this so we can save and let's
341:11 - have a
341:13 - preview we don't see anything is the
341:16 - application up and running yes it is so
341:19 - I'm just going to reload the browser and
341:22 - we wait for it to reload let's be sure
341:25 - yep so application is up and running and
341:29 - now it loads
341:31 - up and nothing shows okay yeah so this
341:35 - is our application and we have our
341:37 - checkin dates okay and in user clicks
341:40 - here we have this okay so now we have
341:44 - this component
341:47 - here like this okay so next we can have
341:52 - a checkout date so just after this
341:55 - check-in date we are going to have our
341:58 - checkout date so I think I can just
342:00 - duplicate
342:02 - this here and bring this down so these
342:06 - are checkout dates and rather than give
342:08 - it a pattern um right of two this is
342:12 - going to have a pattern left of two and
342:15 - the HTML 4 is going to be checkout date
342:19 - and The Styling here Remains the Same
342:21 - and we're going to update this text to
342:24 - check out date and here we have the date
342:27 - picker so selected is going to to be
342:30 - check out
342:33 - date which we're going to bring in from
342:35 - props and on change is going to be set
342:39 - check out um date and this is the date
342:43 - format it's going to be
342:46 - disabled and it's going to be disabled
342:48 - if uh if there is no checking date so if
342:52 - the user hasn't provided any checking
342:53 - date the checkout date is going to be
342:56 - disabled and now we for the minimum date
342:59 - we are going to have a function that is
343:01 - going to calculate the
343:03 - minimum um checkout date so we're going
343:06 - to come back to
343:07 - this and for the ID I'm just going to
343:10 - copy this ID
343:12 - here and use it in here like
343:16 - this and for this other section I think
343:20 - everything you know Remains the Same
343:23 - okay so let's have this checkout date
343:26 - and set checkout date so here
343:29 - I think I'm going to duplicate this CU
343:31 - it's very much iik so just change the
343:34 - name to check out date and here set
343:38 - checkout date and then we can break it
343:41 - in from the props so checkout date and
343:45 - also set checkout date so we have an
343:49 - error to calculate the minimum date
343:51 - we'll come back to read let's just pass
343:53 - the prop so check out date is going to
343:56 - be called to check out date and then set
344:00 - checkout date is going to be equal to
344:03 - set checkout date so let's save this and
344:07 - here in the book room CTA let's have
344:09 - this function to calculate the minimum
344:12 - date so we can call this
344:14 - C minimum um checkout date like this and
344:20 - let's define this function and
344:23 - here this receive the
344:27 - function and here
344:29 - let's define it so this calculate
344:31 - minimum checkout date is going to be
344:34 - this
344:35 - function that is going to return the
344:38 - date or it's going to return no like
344:42 - this okay so here we are going to have
344:46 - the function so
344:48 - calculate minimum check out date is
344:50 - going to be equal to calculate minimum
344:54 - checkout
344:55 - date so let's define it somewhere where
344:59 - here um where so I think I'm just going
345:02 - to Define it here so going to have this
345:06 - Con calculate minimum check out date
345:09 - which is going going to be equal to this
345:11 - function and here we're going to check
345:13 - if we have a checkin date then we are
345:17 - going to calculate um the checkout date
345:21 - otherwise we would return M like
345:25 - this
345:27 - okay so so here we are going to first of
345:31 - all get access to the next day so the
345:34 - next day is going to be equal to new
345:39 - dates and then we we passing the checkin
345:43 - dates okay and then we want to set the
345:48 - day so we want to set the date of the
345:50 - next day so call the next
345:53 - day like this and then we want to set
345:55 - date and this date is going to be the
345:58 - next day and then do get date like this
346:03 - and we want to add
346:04 - one so we go and return return the next
346:09 - day like
346:11 - this so if there's no checking date we
346:14 - will just going to return null okay so
346:18 - they will calculate the minimum checkout
346:20 - date and we are going to use it here so
346:23 - let's see what we have now we have our
346:25 - checkout dates and you see is disabled
346:28 - okay so it disabled until we select uh
346:31 - checkin date so I'll select let's say
346:34 - tomorrow and you see I chose 11 and if
346:38 - we see the checkout date it starts at 12
346:42 - okay so it starts at 12 and this you
346:44 - know starts at 11 now we enabled it the
346:46 - user can still now go on and select you
346:49 - know let's say 20 which is not um
346:53 - doesn't make sense so you can't check in
346:55 - on the 20 and then check out some days
346:57 - behind we are going to handle
346:59 - the logic to restrict such operation but
347:02 - for now everything is looking good let's
347:05 - continue so after this so after this um
347:09 - div we are going to have another div so
347:13 - after this here so here we're going to
347:16 - have this div and we're going to give a
347:19 - class name of flex and then Marin top of
347:24 - four and here let's have this other div
347:27 - I'll give the class name of we with um
347:31 - 1/2 and give this sub pattern to the
347:33 - right of two like
347:35 - this and in here we have this
347:38 - label and HTML for
347:40 - adults and let's give it this class name
347:43 - of
347:44 - block text
347:46 - SM font
347:50 - medium text Gray
347:54 - 900 like this and adducting text G
348:05 - 400 okay so inside this label we are
348:08 - just going to have the text of
348:12 - adults okay because the user would also
348:15 - have the chance to choose the number you
348:17 - know of adults and after this we're
348:19 - going to have this
348:22 - input and this input is going to be of
348:25 - type
348:27 - number and is going to have the ID of
348:30 - adults to match with the
348:33 - label and for
348:35 - Value this going to have the value of
348:38 - adults which we don't have yet we would
348:41 - come back to that and on
348:45 - change now we're going to have this
348:47 - function which takes the event and set
348:51 - adult which we don't have
348:53 - yet and we're going to set adult to
348:57 - the event do
348:59 - Target do
349:03 - value
349:05 - okay and we are going to give this a
349:09 - minimum of one so let's say we want to
349:11 - you know have minimum of one by default
349:14 - and let's want to have a maximum of five
349:17 - so give this a width
349:20 - full give this a border you just say B
349:23 - grade
349:25 - 300 like this get this run
349:29 - LG give this spe
349:32 - 2.5 and on Focus State get this
349:35 - ring I think we don't even need this on
349:37 - the focus State and all of that so I'll
349:40 - just get rid of it okay so we need the
349:43 - adult and set adults so here I'm just
349:47 - going to have
349:48 - const adults and also set adults is
349:54 - going to be equal to use State and have
349:56 - a default value of one we're also going
349:59 - to have for children so has a default
350:01 - value of
350:02 - zero children and here we can have
350:06 - set children like
350:09 - this and we can ask for this from the
350:12 - props so
350:14 - adults and also children like
350:19 - this okay and we
350:23 - can have this so I'll bring this down
350:26 - twice so this is going to be for set set
350:29 - adults and here we're going to dispatch
350:32 - type number and for this we're going to
350:34 - have set
350:36 - children and here we're going to
350:38 - dispatch of type number like this and to
350:42 - get rid of the errors we just bring it
350:44 - bring in these for our props so set
350:48 - adults set
350:51 - children and adults and also children
350:54 - because we're going to be needing
350:55 - children soon so here
351:00 - here we have set adults to event Target
351:03 - value we're having this error because
351:05 - this is going to be a string and we need
351:07 - number can just add a plus here and it
351:10 - gets rid of the error so I'll save this
351:13 - and here we can pass the
351:15 - prop so here we can pass um adults equal
351:19 - to adults we can pass children which is
351:23 - going to be equal to Children you can
351:26 - also pass set adults which is going to
351:27 - be called to to set set adults we can
351:31 - also pass set children which is going to
351:33 - be equal to
351:36 - set children like this so we have an
351:41 - error
351:42 - here um do not pass children as props
351:45 - instead n children okay so it doesn't
351:49 - know
351:51 - um okay so let's see we're just going to
351:55 - rename it to rather than children I just
351:59 - say number of
352:01 - children like this and here I would say
352:05 - set
352:06 - number of
352:10 - children okay so children is going to be
352:14 - number of children and here set number
352:18 - of children I'll use this here and I
352:23 - would use this here like this and update
352:26 - our book room CS so rather than children
352:30 - I'll call it number of
352:32 - children and use it here and then rather
352:37 - than set children I would say set number
352:42 - of children like
352:44 - this and bring this in here okay so this
352:49 - fixes it and we should see our input so
352:53 - if we check now we see
352:55 - adults and we don't see for children yet
352:58 - so let's add
353:01 - it so I will actually duplicate this so
353:05 - I will just duplicate
353:07 - this and this is going to have P to the
353:10 - left of two a label for
353:16 - children and the class name is actually
353:19 - going to remain the same and here I have
353:23 - the text of children the type is going
353:25 - to the number the ID is going to be
353:29 - children like this it's going to have
353:31 - the value
353:32 - of
353:34 - children so number of children and on
353:38 - change we're going to set um number of
353:41 - children like this to PR taret value the
353:45 - minimum is going to be zero and let's
353:47 - say the maximum is going to be three for
353:49 - our
353:50 - application and everything should be
353:53 - fine now so if we reload we see children
353:56 - here okay so that's working fine next
354:00 - let's have um this section that helps us
354:04 - to display the price to the user
354:08 - so we're going to have a function to
354:11 - calculate the number of days so
354:14 - somewhere here let's have this function
354:17 - I'm going to call c number of
354:22 - days like this and this is going to be
354:25 - equal to this function so we want to
354:29 - want to return return if there is no
354:30 - checkin date or there is no checkout
354:36 - dates okay so if there's none we are
354:39 - going to return return zero like
354:43 - this so first to calculate the number of
354:46 - days we're going to have the time
354:48 - difference and the time difference is
354:50 - going to be check out
354:52 - date going to Beal to check out date.
354:56 - get time and we're going to subtract
354:59 - this from our check in date like this do
355:04 - get time here and now we have the time
355:07 - difference we can now convert the time
355:10 - difference to days and here you can call
355:13 - this number of days and this is going to
355:15 - be called to
355:17 - mat.
355:19 - se and we're going to pass our time
355:22 - difference divided by 24 multip by 60
355:28 - and multiply by 60 and multiply by
355:32 - 1,000 so this is going to give us the
355:34 - number of days and now we
355:37 - can return return the number of this so
355:40 - return return number
355:43 - of days like
355:46 - this so here I'm going to copy this and
355:49 - we can come below here and after this
355:53 - div so after this that displays the
355:58 - adults and children I'm going to
355:59 - collapse this so after this we are going
356:02 - to have this section where we call this
356:05 - calculate number of days it returns a
356:07 - number and we check if the number is
356:09 - zero then we want to go on and display
356:13 - this um P tag okay so we're going to
356:18 - display this paragraph
356:19 - tag and otherwise we are just going to
356:23 - display an empty fragment like this so
356:27 - let's start this I'm going to give this
356:29 - paragraph class name of margin top of
356:32 - three and in here I'll just have total
356:35 - price and the total price in dollars is
356:38 - going to be this
356:40 - calculate number of days like this and
356:44 - multiply it by a discount
356:49 - price so if we save this and we come
356:52 - over to the
356:53 - browser we don't see anything because we
356:56 - haven't chose the number of days so here
357:00 - I'll choose 10 and say I want to check
357:03 - out um on 13th and now we see our total
357:07 - price like this okay so we have 400 and
357:11 - we stay 3 days so that gives
357:14 - 1,200 all right so now let's have our
357:17 - book Now button so just after this we
357:20 - can have our
357:22 - button and this button is going to be
357:26 - having this class names so but Buton
357:29 - primary and it's going to have a width
357:32 - full a margin top of six and it's going
357:36 - to be disabled you know have this um
357:39 - color on the disabled States so BG gray
357:43 - uh
357:44 - 500 and if it's disabled we're going to
357:46 - have this
357:47 - cursor not
357:50 - allowed like this so this button if this
357:54 - hotel room is booked so we also need to
357:56 - receive this Pro so if it's booked we
357:59 - are going to display the text
358:03 - of
358:05 - booked like this otherwise we are going
358:07 - to show the text of book now like
358:13 - this so we have this error because we
358:16 - don't have this is booked property and
358:19 - it's going to be disabled if this room
358:22 - is booked like this and on click we're
358:25 - going to call a function
358:28 - the handle
358:30 - book now
358:32 - click like
358:34 - this all right so now we need to pass
358:37 - this is booked and also the handle book
358:40 - now click
358:44 - function so here we are going to receive
358:47 - is booked which is going to be of type
358:50 - bowling and we can bring it here to our
358:55 - props and we also need to bring in the
358:59 - handle book now
359:03 - click and this is going to be equal to a
359:06 - function that returns void so we can
359:10 - take this function and pass it in here
359:14 - so I'm going to save this and we come
359:17 - here we need to pass the two props so
359:20 - it's
359:20 - booked is going to be equal to Rooms or
359:24 - room do is booked like this
359:28 - and the handle book now click is going
359:30 - to be equal to handle book now click we
359:34 - don't have this yet and this is for our
359:37 - booking so just somewhere here I'm just
359:40 - going to have this function and it's not
359:43 - going to be doing anything at least for
359:45 - now okay so let's come back to the
359:48 - application and we see the textbook now
359:51 - because this room isn't booked so you
359:55 - see we have this um sticky and we can
359:59 - come to other rooms to test out the
360:03 - functionality let's see if our Filter
360:05 - Works so a basic room maybe this
360:08 - one and it doesn't have a discount so if
360:11 - we want to stay for you know two days
360:14 - the room should be 600 so because the
360:18 - unit price is 300 so everything is okay
360:22 - now we can work
360:24 - on before work on the booking Fe fature
360:28 - let's just test that when we call these
360:30 - functions we to to create a booking that
360:34 - we are getting the correct values so
360:36 - once we click on this function we are
360:39 - displaying the values that we need to
360:40 - create a booking so we don't have the
360:42 - API yet so for our sanity Studio we are
360:46 - going to be creating all of that so what
360:48 - we can do first is to just do some
360:51 - validation so if there is no checking
360:54 - date or if there is no check out date
360:59 - then we're going to wron a
361:01 - toast. error and then we can just say
361:05 - please
361:06 - provide um
361:08 - checkin slash
361:11 - checkouts
361:14 - dates like
361:16 - this okay and let's also check so now
361:21 - we're going to check if the checkin date
361:24 - is greater than the checkout date so so
361:27 - if that the case we're going to return
361:30 - toast.
361:32 - error and we're going to tell the
361:35 - user please
361:37 - choose a valid check in
361:42 - Period like
361:44 - this okay so after this check so this
361:48 - other check
361:49 - here we are going to calculate number of
361:53 - days again so
361:55 - con um number
362:00 - of
362:04 - days and number of days is going to be
362:07 - equal to a function that would calculate
362:10 - the number of days so we can have this c
362:16 - number I could just say C nor days like
362:20 - this and we already have the function so
362:24 - I'm just going to copy this function you
362:26 - know we can pass it via
362:28 - props but let's just Define
362:31 - here and I'll just get calculate nor
362:35 - days and here right than return zero
362:38 - I'll just return and here we have we get
362:42 - a time difference like this we get the
362:44 - number of days and we with so here we
362:47 - just calculate number of days and next
362:50 - we can get the hotel
362:52 - room
362:56 - slug and the hotel room slug is going to
362:59 - be the room do slug do
363:03 - current okay and next we can now
363:07 - integrate
363:14 - stripe okay so before we integrate
363:18 - stripe I won't talk about middle ways
363:21 - but before we get to Middle ways I also
363:24 - want to make sure that we have the API
363:28 - uh from sanity Studio ready to help us
363:31 - to create a booking so in our lebs and
363:34 - in our API folder now we're going to
363:37 - export this so export this constants and
363:41 - then we can call it create
363:47 - booking like this which is going to be
363:50 - equal to this asnc
363:54 - function like this okay so here we are
363:58 - going to um
364:01 - receive properties that we're going to
364:04 - use to create the booking and this
364:06 - properties is going to be of type so we
364:08 - don't have this type yet but we can call
364:11 - this create
364:13 - booking dto which stands for data
364:17 - transfer
364:18 - object and where do we have a models
364:22 - rooms so do we put it in
364:26 - here I'm just going to put it in here
364:28 - because it's related to a room even
364:30 - though it's now related to
364:32 - creating um a room okay and I'm going to
364:36 - export this type create booking D which
364:39 - is going to be equal to this function to
364:42 - create a booking we need the user which
364:44 - is of type string so the user ID we need
364:48 - the hotel room which is also of type
364:51 - string we need a check in
364:54 - dates and the checkin dates
364:57 - is going to be of type
364:59 - string we also need to check out
365:03 - dates and this is going to be of type
365:06 - string we need the number of
365:10 - days and the number of days is going to
365:12 - be of type number we need the adults
365:16 - which is going to be of type
365:19 - number we need the
365:23 - children which is going to be of type
365:25 - number like this
365:27 - we need the total
365:30 - price total price is going to be of type
365:34 - number and then we need the
365:38 - discount which is going to be of type
365:40 - number so we need to
365:43 - spell
365:45 - discount so to confirm if you come over
365:48 - to the schemas booking TS you would see
365:51 - the fields we need so we need the user
365:54 - ID we need the h hotel room ID so where
365:59 - is it that we show we pass the hotel
366:01 - room ID here so you see we need the
366:05 - hotel room we need the check-in date we
366:08 - need the checkout date we need the
366:10 - number of days we need the discount we
366:12 - need the adults children and the total
366:15 - price and that's all the field that are
366:18 - defined in here okay so now we are going
366:21 - to import this create booking dto coming
366:25 - from our models
366:28 - and in here we can now assess these
366:31 - properties so we can assess adult um the
366:35 - check-in date we can assess checkout
366:38 - date you can assess children um
366:42 - discounts hotel room number of days
366:46 - total price and user so these are the um
366:51 - values we need to create a booking and
366:54 - then we can have our mutation
366:58 - and our mutation is going to be an
366:59 - object we have mutations like this
367:03 - mutations is going to be an
367:05 - array okay so an array and here we have
367:08 - an
367:09 - object so we're going to have a create
367:14 - mutation and to be sure not to be sure I
367:17 - just want to show you where I'm getting
367:18 - it from so let's visit the
367:21 - documentation so I just Googled sanity
367:24 - mutation and we click on M
367:27 - mutations just wait for it to load and
367:30 - here if you click on create you see here
367:33 - you have mutations you have create and
367:36 - then you pass the values okay so this is
367:39 - what we're doing here so we create using
367:41 - a create mutation and then you see the
367:44 - URL so https the product ID API
367:49 - sanity.io you give the version data
367:51 - mutate and your data set name okay so
367:56 - this is the
367:57 - create mutation that we are know
368:00 - currently doing here in our
368:03 - application so we have this create and
368:06 - create is an object so it's an object so
368:08 - pass underscore type so the type of
368:12 - mutation or the type of where is it
368:16 - again if we come over to our schema
368:19 - booking the type of schema is booking so
368:22 - this booking schema and that's what we
368:24 - have here so apart from a type we're
368:26 - going to have the user so remember it
368:28 - needs the user and here theore type is
368:32 - going to be of type
368:34 - reference so please make sure there's no
368:37 - typo here else is not going to you know
368:39 - work as
368:40 - expected and we just have the underscore
368:43 - ref and the underscore ref is going to
368:45 - be this user so it's going to be this
368:48 - user
368:49 - ID here okay so after this um user so
368:55 - after this we are going to have another
368:57 - property which is a hotel
368:59 - room so hotel room like this and it's
369:02 - going to be an
369:03 - object so an object where we have the
369:06 - same underscore type and the type is
369:08 - going to
369:09 - be
369:11 - reference like
369:13 - this and we have the underscore R which
369:16 - is going to now point to hotel room okay
369:20 - so after this hotel room now we can have
369:24 - the other values so the check-in date
369:28 - the checkout
369:30 - date and the number of
369:34 - days also adults and then
369:40 - children and then we also have the total
369:43 - price and then we also have the
369:48 - discounts like this and after our
369:51 - mutation so after this our mutation
369:54 - constant we can now have or send the API
369:57 - request so we're going to be using ex I
370:00 - don't know if we have Exel installed so
370:02 - let's mpm install Exel like this and
370:08 - we're going to get our data which is
370:09 - going to be equal to our weight XS so
370:13 - I'm just going to restart our server so
370:17 - here we're going to await
370:20 - XS which we need to import so just
370:24 - here I'm going to import
370:27 - XS from XS like
370:31 - this and here we're going to await x.
370:37 - poost and the URL is going to be so we
370:41 - have backtick
370:43 - https and then we need to go to our
370:47 - project ID which is going to come from
370:49 - process. EnV and then
370:52 - do we just come to our
370:54 - EnV and we're going to copy our next
370:58 - public um next public sanity project
371:02 - ID I'll paste it here and then we also
371:05 - go to
371:06 - API
371:09 - sanity.io and we then specify the API
371:11 - version so V and then
371:14 - 2021 then 21 like this and then we go to
371:18 - slash dat
371:20 - slate and then we go to the data set so
371:25 - process
371:27 - EnV and then we come and copy this so
371:30 - net public sanity data set like
371:33 - this okay so after this we are going to
371:36 - pass another argument and the data is
371:40 - going to be our
371:41 - mutation and then we need to pass
371:43 - headers okay so here we're going to have
371:46 - headers and headers is an object like
371:50 - this then we have
371:52 - authorization and the authorization is
371:54 - going to be our BR token
371:57 - so BR and then the token is going to
371:59 - come from our
372:01 - process.
372:02 - EnV and then we have our sanity Studio
372:07 - token and that's why it was important to
372:09 - give read and write assess because now
372:11 - we want to write to our sanity studio
372:14 - and here we get our data we can
372:17 - now return our data
372:22 - here so we have our
372:24 - endpoint we have our p page setup now
372:28 - we're going to
372:29 - discuss um we are going to discuss
372:32 - middle ways okay because we only want
372:36 - authenticated users to be able to book a
372:39 - room okay by the way let's you know
372:41 - authenticate
372:44 - ourselves so I'll click
372:47 - here and it doesn't load up so I'll just
372:50 - reload our application you know we
372:52 - restarted our server so let's be sure
372:55 - it's up and running so is actually
372:57 - compiling and it was compiling our art
372:59 - page before we refreshed our page so
373:03 - let's just for it to compile and as
373:06 - we're saying we're going to integrate
373:09 - stripe so we're going to be integrating
373:11 - stripe next but I just want us to
373:14 - discuss about middleway a bit because we
373:17 - only want
373:19 - users that are authenticated to be able
373:22 - to call the rout okay so here let's
373:27 - authenticate so I'm just going to
373:30 - authenticate
373:34 - myself using the Google
373:39 - provider and that should be
373:42 - authenticated okay so we
373:45 - authenticated and we can come back to a
373:49 - room so any room we
373:51 - do and if we are not authenticated we
373:54 - don't want the user to go on and book um
373:58 - a hotel room so we don't want this book
374:01 - now to actually make a call okay so
374:05 - let's discuss middle ways now and the
374:08 - way middle Ways
374:09 - work if we come here so we come to the
374:14 - root of our source
374:16 - folder here and we create a file called
374:21 - middleware
374:23 - dots like this and we just just need to
374:27 - export
374:31 - theault like this and then we're going
374:33 - to export this from next off at least
374:37 - next off middleway for/ middleway now
374:40 - with just this line of code we are going
374:43 - to be blocking all our pages from
374:45 - request so we don't have a way to
374:48 - manually log out so we can't see this um
374:53 - working in action because we are
374:55 - currently
374:56 - authenticated but if we are not
374:58 - authenticated we would not have been
375:00 - able to visit this page we don't have
375:02 - the ability to log out yet so we can't
375:06 - you know test our functionality but we
375:08 - get this page cannot be
375:10 - found
375:12 - okay so we want to block two pages I
375:15 - want to block two routes actually so I
375:18 - want to block the user profile route and
375:21 - I also want to block the API route so
375:24 - I'm going to support conf fig which is
375:27 - going to be equal to this object and
375:30 - this object takes in the
375:33 - matcher and this match can be a string
375:36 - it can be a reject expression or it can
375:39 - be an array of path so I want to block
375:42 - request going to slash users and then
375:45 - slash the user route like this so any
375:49 - request going to SL users and then any
375:52 - other route is going to be protected if
375:55 - the user is not
375:57 - authenticated and same I want to do for
375:59 - our API folder so request going to SL
376:02 - API slash and then the path like this is
376:06 - not going to
376:08 - be um allowed to pass unless the user is
376:13 - authenticated so now we have this in
376:16 - place we can now work on
376:19 - our to make sure that we integrate our
376:22 - stripe payment to integrate stripe in
376:24 - our project first we need to install the
376:27 - stripe package I'm going to quit the
376:29 - development server and we we are going
376:31 - to start from the back end route so mpm
376:34 - install stripe like this and this is
376:37 - going to go on to install the stripe
376:39 - library and if we come up to our folder
376:43 - and in our app uh leaves and here not
376:47 - here sorry so our app and where we have
376:50 - our where is it our API folder and here
376:53 - we're going to create a new route for
376:56 - stripe so let's have our stripe route so
376:59 - we have stripe and here we have the
377:01 - stripe. TS so this is our stripe route
377:04 - and let me just restart our server here
377:09 - okay so what the first thing we need to
377:11 - do let's have this stripe constants so
377:13 - stripe is going to be equal to a new
377:16 - instance of
377:18 - stripe yep so we're going to import this
377:21 - Stripe from this stripe here and this
377:24 - stripe this new is going to need
377:28 - um an API key all right so we don't have
377:31 - that yet we are going to get it in a
377:33 - second but we can already reference it
377:35 - so process. EnV and we can call it
377:39 - stripe uncore
377:41 - secret and underscore key like this okay
377:45 - we still having error but we can say a
377:47 - string here and the other is an object
377:50 - so a config and here we're going to pass
377:52 - the API version and it already has an
377:55 - API version so this API version so let's
377:59 - get our secret key so our stripe secret
378:02 - key if you come to your
378:04 - browser and here this is the stripe
378:07 - dashboard you already um should create
378:09 - an account for stripe and then you come
378:11 - back to your dashboard you see that you
378:13 - have to be in test mode and even to
378:15 - activate um to go live you need to
378:18 - activate your account so in test mode
378:20 - you come here so you see we have our
378:22 - publishable key and we have our secret
378:25 - key but for now we need our secret key
378:27 - so I'm going to copy this secret key and
378:30 - if we come to application here in our
378:32 - EnV um first I'm just going to paste in
378:36 - the secret key here and for the value
378:40 - for the key I'm going to copy this and
378:43 - use here so our stripe secret key is
378:46 - going to be equal to this key we just
378:48 - copied okay so let's save this and next
378:51 - we are going to have our function so
378:53 - let's export a const
378:57 - function Asing
379:01 - function like this we're going to call
379:04 - it
379:07 - post this is going to be called the
379:10 - request which is going to be of type
379:12 - request and here we have our response
379:15 - which is going to be of type response
379:18 - like this so this is our function body
379:20 - and we're going to have some data that
379:22 - we're expecting from the front end okay
379:24 - so here let's have Co so we're going to
379:27 - get access to those data which is going
379:29 - to be equal to await request. Json like
379:33 - this and we can already Define the types
379:36 - for data so we're going to have our
379:38 - request data here and our request data
379:41 - is going to be this object so we have
379:42 - the checkin
379:45 - date and checkin date is going to be of
379:48 - type string and we're also going to have
379:51 - the checkout
379:52 - date which is going to be of type string
379:55 - and then we're going to have the adults
379:58 - which is going to be of type
380:01 - number
380:07 - children which is also going to be of
380:10 - type number we're going to have the
380:12 - number of
380:15 - days which is also going to be of type
380:17 - number and lastly we need a hotel rooms
380:21 - slog this is going to be of type
380:24 - string
380:29 - string like this so we have our request
380:32 - data we are going to use it here and say
380:34 - this is going to be of type request data
380:37 - like this and here we can get the
380:39 - check-in date we can also get the adults
380:44 - checkout date children hotel room log
380:47 - and also the number of days so we're
380:50 - going to get all of these from the
380:53 - request so the request like this and we
380:56 - need to call this like this all right so
381:00 - up next we can have some validation so
381:03 - we can check if these properties are not
381:06 - there then we're going to return a new
381:08 - next
381:10 - response and we're going to say please
381:12 - all
381:15 - fields are
381:19 - required like this and then we can set a
381:22 - status of 400
381:26 - so what are we going to check here we're
381:28 - going to check if there's no checkin
381:30 - date or there's no checkout
381:35 - date if there is no checkout date if
381:38 - there is no
381:40 - other or hotel rooms
381:43 - slog or there is no number of days then
381:46 - we're going to return return this error
381:48 - so we meant to use all like
381:50 - this I not this so if there's no this or
381:55 - know this
381:58 - or we don't have
382:02 - adults or there are no hotel rooms like
382:06 - this and or you know number of days so
382:10 - if this properties are not set then we
382:12 - are going to Reon this error now we're
382:16 - not checking for children because
382:17 - children you know can be zero if the
382:19 - user don't pass know that's default that
382:22 - we are using in our page so here
382:24 - children is zero
382:26 - there is it so number of children is
382:28 - zero so if we check for children and you
382:30 - know we get zero value which we actually
382:33 - allow in our database then we're going
382:35 - to have an error so that's why I'm not
382:36 - checking for children here okay so after
382:39 - this we can go on and get to the request
382:41 - origin so C origin is going to be equal
382:45 - to our request. headers and here we can
382:50 - get and we're going to get with the key
382:52 - of origin like this so this is going to
382:56 - give us the request origin and after
382:58 - that let's have access to the session so
383:00 - session is going to be equal to await
383:02 - and then we await our get server session
383:06 - and this needs the O options so we're
383:08 - going to pass our
383:09 - o options here coming from our leaps
383:13 - folder so where is it so our Au
383:18 - options and here we're going to have our
383:20 - session we can have a check if there is
383:24 - no session
383:28 - then we are going to return return a new
383:30 - next response like
383:33 - this and we're going to
383:35 - say authentication
383:41 - required okay so now you know because of
383:44 - our middleway so this middle way we have
383:46 - here you know that only authenticated
383:48 - users would be able to visit this route
383:50 - so this check is not needed but I
383:52 - actually want to go and get access to
383:54 - the user ID
383:56 - okay so const user ID and we're going to
383:59 - get it from our
384:01 - session do user. ID like this so this
384:06 - gives us the user ID and we can also
384:09 - format the checkout date the date so
384:12 - formatted checkout date and this is
384:16 - going to be equal to our checkout date
384:19 - so not checking here our check out date
384:24 - and then we can split
384:26 - by T this capital T and get the first
384:29 - index now if you're not show these
384:31 - values please just log these to the
384:32 - console and you'll see the format of the
384:35 - checkout date and I'm just going to
384:36 - change this to formatted checkin date
384:40 - and then this is going to be our
384:41 - checking date do split all right so here
384:45 - after all of these let's have our TR
384:47 - catch
384:49 - block and in our catch Block in case of
384:52 - any errors let's first look to the
384:54 - console so we're just going going to
384:56 - have this um payment
385:01 - fied and have the error okay so let's WR
385:05 - on a new next
385:08 - response and the body is going to be
385:11 - empty and we can set the status of 500
385:15 - like this or we can just send the error
385:19 - like this we have this error say this is
385:22 - going to be of type any and the error is
385:24 - gone now our Tri block let's try to
385:27 - first of all get a room because we want
385:29 - to get all the details about the room
385:32 - from our sanity Studio the only thing we
385:34 - want to get is the number of days okay
385:36 - so we need the hotel room slog to get
385:38 - the room and then the number of days
385:40 - we're going to use this number of days
385:42 - to then calculate the price ourselves
385:45 - okay and not um allow the user send any
385:48 - data to the front end so how do we go
385:51 - about it we are first going to get our
385:53 - room in our Tri block so here we're
385:56 - going to get our room and this is going
385:59 - to be equal to we await get room
386:01 - remember the get room from our leavs if
386:04 - we visit this get room you see here that
386:07 - this gets a room so it gets this query
386:10 - this get room query and it Returns the
386:12 - results okay so we are making use of
386:15 - this get room it needs this log and
386:17 - we're going to pass the hotel room
386:21 - slog so this hot room slog Okay so after
386:25 - getting the room let's get the discount
386:27 - price because you know we are leaving
386:29 - discount on some of the hotel rooms and
386:32 - this is going to be equal to the
386:36 - room
386:38 - price
386:39 - minus the room. price divided by 100 and
386:45 - we're going to multiply this value by
386:47 - the room
386:48 - discount so this is going to give us the
386:51 - discount price now okay so after this
386:54 - let's get the total price the total
386:56 - price is going to be the discount price
386:59 - which is the discount price per unit
387:01 - we're going to multiply it by the number
387:03 - of days so once we multiply the unit
387:05 - price by the number of days we are going
387:07 - to get the total price and now we are
387:10 - going to come over here and create a
387:13 - stripe
387:16 - payment okay so we're sure we have all
387:18 - that we need now to create a stripe
387:21 - payment so we're going to have this
387:23 - stripe session
387:26 - and this is going to be equal to a
387:27 - weight
387:30 - stripe that is the stripe instance that
387:33 - we formed here so this so we're going to
387:36 - await stripe and then we can call
387:39 - checkout and here we have sessions and
387:42 - then we have the create method and this
387:45 - is going to take a mode and the mode is
387:47 - payment it also takes the line items and
387:50 - the line items is this
387:53 - array okay so an array of
387:57 - object and first we're going to pass the
388:00 - quantity the quantity is one so the
388:02 - quantity is a mandatory field and here
388:04 - let's have the price data the price data
388:07 - is going to be this object so we can
388:08 - specify the currency and the currency
388:10 - will support is USD we going to have the
388:14 - product data the product data is this
388:16 - object where the name of the product is
388:19 - the hotel room name so I think it's the
388:23 - room. name
388:25 - okay and we need to provide images and
388:29 - images
388:31 - sorry images like this images is an
388:34 - array so you know that um our room
388:37 - images has the URL property so we're
388:40 - going to have our room and then have
388:41 - images we're going to map through each
388:46 - image like this and then this is going
388:48 - to give us each image and then we're
388:50 - going to return the image URL so map
388:53 - returns an array and automatically
388:55 - images is going to be an array all right
388:58 - so after the line items next we are
389:00 - going to send the payment method
389:03 - types so underscore payment underscore
389:06 - meore types and we support card payment
389:10 - and after this we have this we need the
389:11 - sucess URL and the success URL is going
389:15 - to be dynamic remember we have the
389:17 - origin which is where is it this origin
389:20 - over
389:21 - here so we're going to go to our origin
389:24 - and and here slash users and we want to
389:27 - go to the user ID so user ID like this
389:32 - remember this user ID is coming from our
389:34 - session here okay so now we have all of
389:37 - these we still have all these fields to
389:40 - create a booking we are not going to be
389:42 - creating a booking here all right
389:45 - because we want to only create a booking
389:47 - when this payment is successful so
389:49 - that's why we are not calling this route
389:51 - stripe gives us access to web hooks
389:53 - which is more like subscription events
389:56 - that we can subscribe to and these
389:58 - events are going to be called for us
389:59 - automatically by stripe when they occur
390:02 - so we're going to be looking at web
390:04 - hooks functionality next and how we can
390:06 - create an order only when a payment is
390:08 - successful but for now let's just test
390:10 - that our payment is working okay so
390:13 - after this we need to return a response
390:15 - so we're going to return a next
390:19 - response do Json and here we have the
390:22 - stripe
390:23 - session and we are going to have this
390:26 - side the status to 200 and then we can
390:30 - have a status
390:32 - text status text like this and the
390:35 - status text is just going to be
390:37 - payment say
390:39 - payment um session
390:44 - created okay so we can for us to test
390:48 - this out we need to wire up stripe on
390:51 - our front end so we just did the back
390:53 - end now we need to to have stripe in our
390:56 - front end and let's come over to uh
391:01 - Libs so we're going to have a for a file
391:04 - here for stripe.
391:07 - TS and to continue let's quit our
391:10 - development server and we need to import
391:13 - the stripe for the front end SL stripe
391:16 - for/ stripe
391:19 - hjs so we need to install this Library
391:22 - all right so we're going to import some
391:25 - properties from it so import all of
391:27 - these from at
391:31 - stripe stripe JS like this and let me
391:34 - restart sorry let me restart uh
391:37 - development server all right so what are
391:40 - we going to take we're going to take the
391:41 - stripe class and then we're also going
391:43 - to take the load stripe like this and
391:47 - we're going to have this variable which
391:48 - will call stripe promise which is going
391:51 - to be of type
391:52 - promise and This Promise can resolve to
391:55 - two values so sorry it's had to be here
391:59 - this per can resolve to stripe or it can
392:02 - resolve to null like
392:05 - this so here we are going to have this
392:09 - function that is going to help us to get
392:11 - stripe so we're going to export this con
392:15 - which we call get stripe and get stripe
392:18 - is going to be equal to this
392:21 - function and we are going to return this
392:24 - G get stripe
392:26 - function all right so what we want to do
392:29 - here first want to check if there is no
392:30 - stripe
392:32 - promise then we going to say our stripe
392:35 - promise is going to be equal to load
392:38 - stripe so this package that we import
392:40 - like this we're not going to return
392:42 - return here I'm sorry we already
392:45 - exporting and we need to return return
392:50 - inside so we're going to return return
392:53 - inside and that's here so call L stripe
392:56 - and L stripe is going to need a
392:57 - publishable key so we don't have this
393:00 - yet but we can say this is going to come
393:02 - from our process.
393:04 - env.
393:06 - nextcore public
393:10 - underscore stripe publishable key stripe
393:15 - publish
393:18 - shable key like this and we can say a
393:23 - string all right so so I'm going to copy
393:25 - this and load it in our
393:29 - EnV and get it from our stripe so this
393:32 - is the publishable key just copy this
393:35 - and I'll past this in here and save so
393:37 - whenever we make changes to our EnV it's
393:40 - always nice to restart our server so I'm
393:44 - going to create this and restart our
393:47 - development server okay so now we are
393:50 - done with this we would come back to our
393:52 - page so this room Details page
393:55 - and in here we have this function so to
393:58 - handle book now click this handle book
394:00 - now click function okay so what we can
394:03 - do here we have the number of days here
394:07 - where we are going to be integrating
394:09 - stripe I'm going to take this off and we
394:12 - have our TR catch block so first we're
394:15 - going to use exus to send our data so
394:19 - this is going to be equal to we're going
394:22 - to await exos do getet and we need to
394:27 - import exos from exos like
394:32 - this and here we are going to call
394:36 - A.G and the API is going the endpoint is
394:39 - going to be/ API slash strip so this
394:43 - Endo if you open this up sorry not this
394:47 - if we come to our API stripe this so
394:51 - this route over here and it has to be a
394:54 - get request sorry post request not get
394:58 - so this has to be
395:01 - post like this all right so after this
395:04 - because the post request we need to pass
395:06 - data and what data we need to pass the
395:08 - checkin date we also need to pass the
395:11 - checkout
395:13 - date we also need to pass
395:16 - adults we need to pass
395:20 - children and children is going to be a
395:22 - number of children like this
395:25 - we need to pass the number of days and
395:28 - we need to pass the hotel room slog like
395:31 - this having this error because we need
395:33 - to make this
395:37 - async all right so from this we are
395:40 - going to get our
395:42 - data and we can name this rame this to
395:45 - be stripe
395:46 - session okay so after this we're going
395:50 - to check if we have
395:53 - stripe that means we need to import our
395:57 - load stripe function like
396:00 - this and somewhere here we can just say
396:03 - con stripe is going to be equal to
396:07 - AWA get
396:09 - stripe and this is this get stripe here
396:13 - so we're going to import this to help us
396:15 - load stripe here and let's see so this
396:19 - is it okay so once we await this gu
396:22 - stripe we now have stripe like this and
396:26 - why we why are we having an error why do
396:29 - we have this
396:30 - error
396:33 - okay can have con
396:37 - results we have an error here which is
396:39 - saying an expression of type void cannot
396:41 - be tested for Trace it's a typescript
396:44 - issue and if we come back here to this
396:47 - um get stripe
396:49 - function that's because here we forgot
396:52 - to return
396:55 - we forgot to return our stripe promise
396:57 - and that's why I love typescript because
396:59 - it helps us to catch errors like this so
397:01 - we forgot to return a stripe promise and
397:04 - that's why we're having error here see
397:05 - the error is gone because it knows it's
397:07 - going to return stripe or no so comes
397:10 - result is going to be equal to we
397:13 - await
397:18 - stripe we always stripe like this and
397:21 - then we call redirect to to check
397:25 - out redirect to checkout here and this
397:30 - is going to take the session
397:32 - ID and the session ID is going to be
397:36 - what we get back as data so stripe
397:41 - session do
397:43 - ID okay and this strip session we are
397:46 - getting back here if we come to our
397:48 - route see here we are sending this back
397:51 - as a response so this strip session and
397:55 - there it has the ID property all right
397:57 - so here we have our
398:02 - results we can have to check so if
398:05 - inside here so if
398:07 - results.
398:09 - error we're just going to have a toast
398:11 - so we going to toast. error and
398:16 - say payment
398:21 - field and here if we have an error let
398:24 - let's log it to the
398:26 - console so we can cons that log
398:30 - error and here we have our error like
398:34 - this and then we can also toast.
398:37 - error and say and error or code
398:49 - here all right so this is the time that
398:52 - we going to test it out this is our page
398:55 - and we are calling this post request we
398:58 - pass the data so checkin date check out
399:00 - date adults children number of days
399:03 - which are all these data checking the
399:05 - check out the adult this children number
399:08 - of days and here even though we not
399:11 - making of um these properties yet
399:14 - because we're not creating a booking we
399:17 - are just um creating a payment and here
399:20 - we're not making of the total price and
399:23 - that that's because just here so in our
399:28 - price data so after product data we are
399:31 - going to add the unit amount so we
399:33 - forgot to add the unit amount so the
399:36 - unit amount we're going to pass
399:39 - in like
399:42 - this and we're going to have our total
399:45 - price and multiply by 100 because it has
399:50 - to be in sents and we can call to string
399:53 - like this
399:54 - and like this all right so let's try
399:57 - this out I save open the terminal to be
399:59 - sure everything is still up and running
400:02 - I'll just quit and reload so that we are
400:05 - just double double show I'll close this
400:08 - panel and if we come back to the browser
400:11 - here where we have our
400:13 - application let's just reload so let's
400:16 - see if our application is building so
400:19 - it's compiling the slog so that page and
400:22 - remember we have Middle where in place
400:24 - so if a user is not authenticated or if
400:27 - you're not authenticated maybe you're
400:29 - clicking on the book Now button and
400:32 - nothing is working you just have to
400:34 - authenticate yourself so if you're not
400:37 - authenticated you'll not be able to
400:39 - visit the API route we don't have a way
400:42 - to manually log in log out yet so you
400:46 - know once we Implement log out
400:48 - functionality you would see how this
400:50 - works so our page is compiling
400:54 - and I think it is ready
401:07 - now all right so this is our page let's
401:10 - choose a checkin date I'm going to
401:11 - choose 12 and a checkout date I'll just
401:14 - choose the next day you see the price is
401:16 - 92 because of the 8% discount and let's
401:20 - click on book now so let's see if this
401:22 - goes on to load
401:24 - uh
401:26 - stripe
401:29 - okay okay Sims is loading up stripe so
401:32 - great everything is working fine for now
401:35 - we have 92 we have the product image you
401:39 - can give this same name email I'll just
401:41 - go with test test.com for card
401:44 - information 42
401:46 - 424242 is the default that stripe gives
401:49 - us and for the month I'll just say
401:52 - 1123 and and you see I'll just say test
401:55 - name and click on
402:01 - pay so wait for this to load up it's
402:04 - successful and it should redirect us to
402:06 - the user so 44 page and you know we
402:09 - created this page here so if you come
402:11 - over to the routes here you have the
402:14 - success URL so it's origin which is for
402:16 - now our Local Host SL users and the user
402:19 - ID and that's how we get redirected to
402:22 - this page so for now we say 44 page but
402:25 - we'll be fixing that so if we come back
402:27 - to our local host and let's also come to
402:32 - our stripe and here if we click on
402:35 - payments so that we see our payments we
402:39 - should see this payment so this is it so
402:41 - we just did this payment now and payment
402:44 - is complete so a user is successfully
402:46 - booking a hotel room so fine now we need
402:50 - to create a booking so it's is paying
402:54 - but you know we are not actually
402:56 - creating a booking and that's where web
402:59 - hooks come into play so if we come back
403:02 - to home and here in home um where is it
403:06 - you come over to web
403:09 - hooks here you would see how web hook
403:12 - web hooks work so you can click on this
403:15 - link I'll just open this in a new tab
403:18 - and over here you're going to see an API
403:20 - documentation on how to go about using
403:23 - web hooks so let's scroll down and let's
403:26 - visit this it's going to give us uh a
403:28 - way to go about this and in here you see
403:32 - the first thing we need to do is to
403:34 - identify the event to monitor I already
403:37 - identified the event that we going to
403:39 - monitor for this web Hook and the web
403:42 - Hook is the checkout session completed
403:45 - so the checkout session completed is the
403:48 - web hook that I have identified or that
403:50 - we need to call whenever a checkout
403:52 - session is completed okay so we need to
403:56 - identify the stripe event so you can
403:58 - open this events in a new tab to see a
404:00 - list of the different events that stripe
404:03 - offers okay and here I'm going to search
404:05 - for
404:06 - stripe um sorry for
404:10 - checkout do
404:13 - session. completed like this and this is
404:17 - it so this event here where is
404:21 - it um where is it do
404:26 - completed I thought it's to C there
404:29 - let's
404:30 - see so checkout. session.
404:35 - completed okay checkout. session do yeah
404:38 - so this this web hook here it occurs
404:41 - when a checkout session has been
404:43 - completed so this is the um event we are
404:45 - going to be listening to like that and
404:48 - now we need to create a web hook
404:50 - endpoint function so this web hook
404:54 - endpoint function stripe is going to
404:56 - call for us okay so let's do this next
405:00 - and come back to see the next
405:03 - implementation and this gives us a
405:05 - sample code if you go back to the nodejs
405:07 - to see how it works injs so this/ web
405:11 - hook and all these things so let's do
405:14 - this um let's create this web hook
405:17 - endpoint function and to create this
405:20 - here so in our API route I'm going to
405:24 - create a new route and this route I'm
405:27 - going to call Web
405:29 - hook like this and here we are going to
405:32 - have sorry where is it we are going to
405:35 - have the
405:37 - route do TS file just inside the web
405:41 - hook okay so how is this going to work
405:44 - let's first of all have
405:46 - a checkout session completed so checkout
405:50 - underscore session underscore complete
405:54 - and this is going to be equal to check
406:00 - out
406:02 - underscore check out the session.
406:04 - completed we just saw this in the
406:07 - documentation so this is the event we
406:09 - are going to be listening to the
406:11 - checkout. session. completed event and
406:14 - we're going to get stripe again so I
406:17 - just come back here and copy this so
406:20 - here we are going to get stripe again
406:24 - and we need to import Stripe from stripe
406:27 - like this so after this let's we can now
406:31 - go on to export our async
406:34 - function async
406:37 - function and this is going to be a post
406:44 - request like
406:47 - this and this post request is going to
406:49 - be called with the request which is of
406:51 - type
406:52 - request
406:56 - and here we have the response which is
406:59 - going to be of
407:00 - type response like
407:03 - this and in here first we going to get
407:06 - access to the request body so con
407:09 - request body and request body is going
407:12 - to be equal to
407:14 - await like this request.
407:19 - text and next we need to get the
407:22 - signature and and this is going to be
407:24 - equal to request.
407:28 - headers do get and we're going to get
407:31 - the
407:33 - stripe
407:36 - signature okay so where am I seeing all
407:38 - of these from the documentation and if
407:41 - you scroll down you will see best
407:43 - practices where is it um I think that's
407:47 - the last step so after number four let's
407:52 - see
407:54 - somewhere here we should have for Best
407:59 - Practices let's
408:01 - see um test your web hook function
408:04 - register and secure your web hook okay
408:07 - so here we have best
408:09 - practices and you have um let's see SEC
408:15 - web hooks yeah so the web hooks best
408:17 - practices you can up this link and here
408:20 - you're going to see best practices to to
408:23 - integrate stripe inside of your project
408:26 - and here you see only listen to event
408:28 - types your integration requires that is
408:31 - one best practice and here you see you
408:34 - need to verify events that are sent from
408:36 - SC stripe and here you see ways to go
408:40 - about it having the signature getting
408:42 - from the request headers and here having
408:45 - the stripe web hooks construct event you
408:48 - pass the request body you pass the
408:50 - signature and you pass the end point
408:53 - secret okay so we're going to be doing
408:55 - all of this which is just best practices
408:58 - for us to secure our event listeners
409:02 - okay so for now we are still in the
409:04 - second step to create a web hook
409:07 - endpoint function all right so after the
409:10 - signature we are going to have our web
409:12 - hook
409:16 - secret which we don't have yet okay so
409:19 - we're going to get this when we
409:20 - integrate the um web hook but for now
409:24 - this is going to come from uh
409:28 - process. EnV and here we can call it
409:32 - stripe
409:33 - uncore web
409:36 - hook underscore
409:38 - secret like this and I'm going to copy
409:42 - this and have it in our EnV for now
409:45 - which is going to be
409:47 - empty and after getting our web hook
409:50 - secret we're going to have our event and
409:52 - this event is going to be of type
409:54 - stripe.
409:57 - event like this and after this we can
410:00 - have our TR catch block so in the catch
410:03 - Block in case of any error let's copy
410:10 - this and use here so the next response
410:14 - needs to be imported from next server
410:18 - and the error we can just say web
410:21 - hook error like like
410:25 - this and this is going to make it of
410:28 - back
410:29 - tick and we are going to have uh error
410:34 - do
410:34 - message like
410:36 - this and this is going to be of Type n
410:41 - so in our Tri block let's get our let's
410:45 - verify so if there's know signature or
410:49 - there is no web hook Secrets then the go
410:53 - on and return so if we have all these
410:55 - properties we're going to assign our
410:57 - event to be equal to
410:59 - stripe. web hook like this and here we
411:03 - have the construct event and this is
411:06 - going to take the request
411:09 - body and this also needs the
411:13 - signature and it needs the web hook
411:16 - secret so you see here need the secret
411:20 - and we pass the web hook secret here all
411:23 - right so we have
411:26 - this we
411:28 - can come over next after this try catch
411:31 - and this is where we um load our
411:37 - events load our event okay so in here
411:41 - we're going to have a switch
411:44 - case and we're going to switch by the
411:47 - event.
411:49 - type like
411:51 - this and we're going to hand do this
411:53 - case so this our case check out session
411:58 - completed like this and we're going to
412:01 - have our con session and this session is
412:05 - going to be the event data so event do
412:09 - data doob like this all right so for now
412:14 - we just going to
412:16 - console.log the session
412:19 - here so we are just going to log this um
412:23 - session to the console we can already
412:27 - have um a default case so we can already
412:31 - have a default and we we just con that
412:34 - log you know on
412:39 - handled event
412:41 - type and here we're going
412:44 - to send back the event do type like
412:49 - this okay so what do we do next we Lo
412:53 - the session to the console and after
412:56 - which we can go on to create a
413:00 - booking like this so we going to create
413:03 - a booking and we need to return a
413:06 - response so we're going to return a next
413:08 - response that Json and this response is
413:11 - just going to say
413:13 - booking
413:16 - successful and we set a status of
413:20 - 200 and a status text of booking
413:28 - successful so this return is under this
413:31 - case okay and this should be it
413:36 - so so we are going to try um this
413:39 - session type and let's come back to the
413:43 - you know to the documentation we have
413:45 - created a web hook endpoint so we have
413:47 - done this and you see here you have this
413:50 - switch and you have this case which is
413:52 - what we did we handle this case for when
413:56 - our session is
413:57 - completed and you see here there's a
414:00 - this default that we just log to the
414:02 - console and this
414:04 - response
414:06 - okay so I think we have't forgetting
414:09 - this so we need to return a response to
414:12 - acknowledge the receipt are we doing
414:14 - that we are not doing that okay so this
414:18 - needs to
414:19 - be copied and returned outside of of
414:22 - this switch here we need to make sure we
414:27 - return return this okay regardless and
414:30 - we need to return this while this
414:32 - whatever code we write inside here
414:34 - whatever logic is being um worked on
414:38 - okay we need to return return this which
414:41 - is what we have done and everything
414:45 - here um is fine we can change this
414:47 - status text rather than booking
414:49 - successful which isn't what happened you
414:51 - can just
414:54 - send event received like this okay so
414:58 - let's come back and after this we need
415:00 - to test our web hook function and how do
415:03 - we test this um we need to use the CLI
415:08 - so I'll just open this in a new tab and
415:11 - come over here so here we need to first
415:15 - of all install so I'm on the Mac and I
415:17 - installed with Brew you see you have
415:20 - different options for Windows in you
415:22 - know this is the way you would go about
415:24 - it you just need to download the file
415:26 - and you know follow this to download the
415:28 - stripe CLI so you can test this locally
415:31 - or Linux if you're on Mac you can you
415:33 - know have different ways to go about it
415:36 - but I just use Homebrew to install I
415:38 - advise if you're on Mac you should try
415:40 - this out it's just very much
415:42 - straightforward and when you install you
415:45 - need to log into your stripe
415:48 - dashboard and we should be doing this
415:51 - already so we going to go to our
415:53 - dashboard our terminal sorry and run
415:56 - this stripe
415:58 - login and where is it
416:05 - um
416:07 - okay so this is it okay so this is just
416:10 - all we need to do we need to log in so
416:13 - I'm going to open up my terminal and I
416:15 - will zoom in quite a bit so I'll paste
416:18 - this stripe login and this should be
416:20 - after you have um installed the stripe
416:23 - CLI all right the parent please enter
416:26 - the browser or visit
416:29 - this okay so I'm going to enter to open
416:32 - the browser and this opens up in the
416:35 - browser here and in here we should be
416:39 - authenticated let's just wait for this
416:43 - to
416:47 - load okay so we need to verify so let's
416:51 - come back to the IDE this s
416:53 - Valor know text and we need to verify so
416:57 - this is it so this is the pairing code
416:59 - so Snappy follow and here you just allow
417:02 - access like this and you
417:07 - know okay so once you authenticate I'm
417:10 - going to clear this and after that we
417:13 - need to listen to event to a local
417:18 - endpoint so I'm going to copy this
417:20 - stripe listen and fold to to here and we
417:24 - are going to add this Das Das skip
417:26 - verify flag here like
417:29 - this so inside here I'm going to paste
417:33 - this and we need to change the first let
417:37 - me add the D Dash
417:39 - skip uh
417:41 - verify flag let me be
417:43 - sure uh skip hyphone verify as one word
417:49 - like
417:51 - this and the end point is going to be
417:54 - Local Host
417:56 - 3000 slash API SL web hooks like
418:01 - this this is our end point and I'm going
418:05 - to enter this this is going to load and
418:09 - we have our stripe secret so you can
418:12 - copy your stripe secret and come in your
418:16 - EnV and paste this secret here and save
418:21 - okay since we have have changes in our
418:23 - EnV we are going to restart our server
418:26 - like
418:28 - this and you see if we come to this web
418:31 - hook section so this
418:34 - route we take the request body we take
418:37 - the signature from the header we have
418:40 - our web hook
418:41 - secret and we have our event and if
418:44 - there is no web signature
418:47 - or web hook secrets we return We assign
418:51 - a event and here we switch the event
418:56 - type and we just log to the console and
419:00 - here we send this
419:02 - response of events received so I'm going
419:05 - to change this
419:07 - to event received like
419:11 - this and for now here we are just
419:14 - logging this to the console so open up
419:17 - the console in case we see any logs and
419:21 - come back back to the browser and next
419:25 - we are going to trigger the web hook so
419:29 - if we come
419:31 - down you see here to forward events you
419:35 - know from the Endo you already reged on
419:39 - stripe use the load from web hooks API
419:43 - optional flag okay so if we come here
419:48 - you see this is the web hook that we
419:50 - have registered um and stripe so this
419:54 - web hook over here this
419:57 - endo and you see it's listening so if we
420:01 - come here we are going
420:03 - to
420:06 - um run this from our command line so
420:10 - where is it so listen to events I'm
420:13 - going to copy
420:17 - this um sorry this is what we just did
420:21 - so we need to forward
420:24 - and yeah so we need to trigger stripe
420:27 - trigger and we need to trigger
420:30 - the web hook so I'm going to copy this
420:34 - and I would open up another terminal I'm
420:36 - going to split um this terminal okay I
420:40 - did go on to split the terminal and here
420:44 - I'm going to paste this we're going to
420:46 - trigger our
420:49 - own we're going to trigger our own
420:52 - event and the event is this so check out
420:57 - session completed you can copy this
420:59 - event and if we come back here I'm going
421:03 - to paste in the event and send this so
421:08 - we should keep an eye here okay you see
421:11 - here we get this um
421:14 - 307 okay we get all of these and you see
421:18 - here that this was actually called okay
421:22 - so you see here we got trigger suceed
421:25 - and if we come back here we don't see
421:29 - our console.log to for the session which
421:33 - we are logging to the console
421:37 - here and we don't see this response
421:41 - here okay so let's see we are switching
421:45 - the event. type I'll do it again but
421:49 - here I'm just going to
421:50 - console.log the event going to save this
421:55 - and so we can have a look here and to be
421:59 - sure our application is still up and
422:01 - running I am just going to reload this
422:07 - page okay let's give it another shot I'm
422:10 - going to come
422:12 - here um I'm just waiting for this to
422:15 - load
422:18 - up
422:20 - okay okay seems it's done and I am going
422:27 - to come
422:29 - here actually before this I'm going to
422:35 - disable this middleware remember we have
422:37 - this middleware for the you know API
422:41 - route so I'm just going to duplicate
422:46 - this and comment this out and also get
422:50 - rid of this no because this go to the
422:53 - API route so that we're not blocking
422:55 - ourselves from that request even though
422:58 - we
422:58 - authenticated but we'll just end it and
423:01 - here I'm going to trigger this again and
423:04 - we should expect to
423:06 - see this here we get
423:10 - 44 so we get
423:12 - 44 and why are we having 44 SL web hooks
423:18 - okay so is it what we name it no that's
423:21 - what we're getting for for is meant to
423:22 - be web hook so that's the
423:26 - route and we're going to quate this yeah
423:30 - because we made a mistake in our
423:32 - endpoint is meant to be slash web hook
423:35 - like
423:36 - this okay and we'll send this okay we
423:40 - are going to get a new um I don't know
423:43 - if it's new but we going to get this
423:46 - secret we're going to copy it and use
423:49 - that here so I'll quit this again
423:52 - and paste this here in the
423:56 - EnV our offense was we were targeting
424:00 - this route but we added an S so it's
424:03 - meant to be SL API SL web hook like
424:08 - this and if we come back to our stripe
424:11 - the end point should have updated see it
424:14 - has updated as well and we can reload
424:18 - our
424:20 - application all right all right so
424:22 - without all way let's
424:24 - trigger this again so stripe trigger
424:28 - checkout. session do
424:31 - completed and let's see what happens
424:34 - next we get 200 which is good news and
424:38 - it means that we are sending back our
424:41 - response and we get this so this is the
424:44 - event that was triggered and now if we
424:47 - come back here great we see our
424:50 - console.log
424:52 - okay so we see our cons. log we actually
424:55 - logging two things to the console and
424:57 - that's why we are
424:58 - seeing quite a lot I'm going to get rid
425:01 - of the event because I don't need the
425:04 - event I'll save
425:07 - this and this time around in this other
425:10 - console. log I just want us to see this
425:14 - session object so I'm going to have this
425:17 - session name here so that we see that we
425:20 - are calling um this is the console. log
425:23 - for the actual session okay so let's try
425:27 - this again so we come here and we are
425:29 - going to trigger the event again we get
425:34 - our
425:35 - 200 and if we come to uh conso log in
425:39 - application now we should see
425:43 - this
425:46 - okay we see the session here which is
425:48 - good so this is the session ID we get
425:50 - the object and we got we get all these
425:55 - information great so we have all this
425:58 - information and I want you to take a
426:01 - look at this metadata so you see this
426:03 - metadata is going to be very much
426:06 - important and for now you see it is an
426:09 - empty object okay so we are successfully
426:14 - calling this so next let's continue to
426:16 - now create a booking the the question is
426:20 - when we want to to create a booking we
426:23 - are going to await our create
426:26 - booking function that is going to come
426:29 - from our lips okay so this um function
426:35 - here and if we just visit this function
426:38 - one last time you see this is it takes
426:41 - an
426:41 - argument and which is of this type and
426:44 - it goes on to create this uh mutation
426:46 - for us now the issue is stripe is the
426:49 - one that is calling this endpoint point
426:52 - so we need to pass this so the adults
426:56 - and all other information to this end
426:58 - points but how do we get it because
427:02 - stripe is calling this Endo so how do we
427:05 - get this information to create a booking
427:07 - now it's very much
427:09 - easy because I'll just remove this
427:13 - remember I told you to take a look at
427:15 - this metadata object this which is for
427:19 - now an empty string okay so it's very
427:22 - much useful for us to insert um metadata
427:26 - so here when we are
427:28 - creating this um payment so so when we
427:33 - are creating this payment in this um I'm
427:36 - just going to take this off in this um
427:39 - create stripe payment we have access to
427:42 - what stripe calls metadata and this
427:45 - metadata is an object and in here we can
427:49 - go to include metadata that we are going
427:52 - to use here so we're going to be able to
427:54 - destructure them here as you saw the
427:56 - metadata is an empty object we want to
427:58 - change it and we can have adults like
428:01 - this which is the metadata that we need
428:04 - so the checkin dates remember we have
428:06 - created all of these
428:08 - already and we can also pass the
428:11 - checkout date you can also pass the
428:15 - children can also pass the hotel room
428:20 - slug I think it's just
428:23 - um I think it's just
428:26 - the hotel room so if we come here like
428:32 - this to uh where is
428:36 - it where do we have the function so this
428:39 - create booking function if we come here
428:41 - you see we need adults checking date
428:43 - children hotel room user total priz and
428:47 - all of these so this is hotel room which
428:49 - is the ID and this is going to be our
428:52 - room
428:53 - ID and next it needs the number of days
428:57 - and it needs
428:59 - the what else it needs the user
429:05 - ID and the user ID is going to point to
429:08 - the user ID and it needs the
429:12 - discount not the discount price it needs
429:16 - the
429:19 - discount okay and discount is going to
429:21 - going to be the room do
429:24 - discount let's be sure if this is user
429:27 - ID or user actually I'm going to split
429:29 - this to avoid mistakes and that would
429:32 - also zoom out a bit and here where where
429:36 - is it
429:39 - um where do we have the create payment
429:42 - function so create booking function so
429:46 - we need the adults we need the checkin
429:48 - date they check out date the children we
429:51 - need a discount and the discount is the
429:54 - room discount we need the hotel room we
429:56 - need a number of days we also need a
430:02 - user so this is meant to be user like
430:05 - this and this is going to be pointing to
430:07 - our user
430:11 - ID we need
430:14 - the we need a total price like
430:20 - this so here we have total price and
430:23 - this should be it so adults checking
430:25 - dates children
430:27 - discounts hotel room number of
430:31 - days total price and user okay so we can
430:38 - save this and I'll just get rid of
430:41 - this and come back here so you see here
430:46 - we have added all of these um metadata
430:50 - here so we have added of these and if we
430:52 - come back here and we trigger this again
430:57 - so I'm going to trigger this again I'll
431:00 - just cleck this and call this stripe
431:03 - trigger and Trigger this we get out 200
431:06 - but this time around if we come
431:09 - here and we take a look at our
431:12 - console.log our
431:14 - metadata object is still empty now I
431:18 - understand it's still empty and the
431:19 - reason why is because
431:21 - stripe is calling this for us and we are
431:23 - not calling it ourselves so we're going
431:25 - to call this ourselves in a second and
431:29 - we should see our metadata populated I
431:32 - think we can already call it by now call
431:34 - the Endo by
431:36 - ourself and to do that I will just try
431:38 - to create a payment and watch the Endo
431:43 - being triggered for us to buy stripe so
431:47 - I'm going to click on this
431:50 - room
431:52 - and in here just wait for this to load
431:58 - up I'm going to just choose a check-in
432:01 - date and choose a checkout date and book
432:04 - now so the idea is for this to call the
432:08 - web hook function on our behalf and then
432:12 - we can you know have this populated so
432:14 - I'm just going
432:15 - to quickly fill this all
432:20 - out
432:23 - say
432:24 - 1123 any cpv give a test name and this
432:28 - time around once payment is
432:31 - successful we should come back here and
432:34 - this end point should be
432:36 - triggered this Endo should be triggered
432:39 - for us by
432:41 - stripe and let's come here we see this
432:45 - we don't know if it was the previous or
432:47 - the latest but one way to know if we
432:50 - come here and take a look at this
432:53 - metadata now you see this metadata has
432:56 - been populated so we have adults which
432:59 - you you should take notice everything
433:01 - here is a string so we would need to
433:05 - convert this back to use an application
433:08 - but we have um the adults the hotel room
433:11 - the discount and every other property
433:13 - that we need to create a booking great
433:16 - so now in this web hook we are going to
433:19 - have access to those properties
433:22 - and I'll just get of this console.log
433:24 - and it's in the session object so we are
433:27 - going to have
433:29 - this where we say this is going to be
433:32 - equal to
433:35 - session and here we want to go and get
433:38 - the metad
433:40 - data like this this metadata is also an
433:44 - object now we're having this error okay
433:48 - it's compa typescript comp ability
433:51 - issues it doesn't know but we know it's
433:53 - there so we can just TS ignore and we
433:56 - don't have any errors and for this we
433:58 - want to get all the properties we just
434:00 - saw so the
434:01 - adults and basically all these
434:04 - properties that we added to our metadata
434:06 - so I'm going to copy
434:08 - this and bring them in here like
434:13 - this we're going to get the hotel room
434:17 - and we are also going to get the
434:19 - discount like this is all from uh
434:23 - metadata and we're also going to get the
434:26 - user okay so now we have this we can now
434:29 - call this um create
434:33 - booking and the adult remember this is
434:36 - going to be a string but we need to
434:38 - store of type number so this is going to
434:41 - be number adult like this we have the
434:45 - check-in date and next we're going to
434:47 - pass the checkout date we are also going
434:51 - to pass the
434:55 - children and this children also needs to
434:58 - be a
434:59 - number so we pass it like this we also
435:03 - need to pass the hotel room and this
435:06 - hotel room will just be like that we
435:09 - need to pass the number of days and this
435:12 - also needs to be a number and here we
435:15 - have our number of days we also need to
435:17 - pass our discount and discount is just
435:20 - going to to be a number like this and we
435:23 - have our discount and next we need to
435:26 - pass our total price which also needs to
435:28 - be a number and here we have our total
435:32 - price and lastly we need to pass our
435:35 - user so with all of these we are going
435:38 - to come
435:41 - here and we are going
435:44 - to ref our next
435:48 - responsejson okay which we have over
435:51 - here so booking
435:52 - successful and now we should go on to
435:55 - create a
435:58 - booking and not just creating a booking
436:01 - we want to also update a hotel room and
436:04 - change the status of that room to booked
436:07 - so here we need to update um hotel room
436:11 - and to do this we are going to come back
436:13 - to our apis folder and apart from
436:16 - creating a
436:18 - booking I'm going to zoom out so we see
436:21 - everything clearly and apart from
436:24 - creating a booking this we are going to
436:27 - be updating a hotel so you can export
436:30 - this Con and we call this um update
436:34 - hotel room like
436:37 - this which is going to be
436:40 - equal to this async
436:47 - function you're going to make yourself a
436:51 - our function like this and this is going
436:54 - to take the hotel
436:56 - room here and in here we are just going
437:00 - to have our
437:02 - mutation and our mutation is going to be
437:05 - equal to this object where we have our
437:08 - mutations and mutations is going to be
437:11 - this AA and here we are going to be
437:13 - using a patch mutation and this patch
437:16 - mutation is going to be this object we
437:18 - need to pass the ID and the ID is going
437:21 - to be this hotel room so we can actually
437:24 - call it hotel room ID which is going to
437:27 - be of type string so here the ID is
437:30 - going to be this hotel room ID and we
437:33 - want to go on and set like this is
437:38 - booked property to true so we want to go
437:41 - and set this to be true and every other
437:44 - thing we can copy from here so this data
437:48 - and we're going to return the data so
437:52 - I'm going to copy this and use this in
437:55 - here so this goes on to send the request
437:59 - and goes on to update our hotel room so
438:02 - we can save this and here we are going
438:05 - to call that function to update the
438:08 - hotel room so here we're going to await
438:12 - our update hotel room
438:14 - function and this needs the room ID and
438:17 - the room ID is our hotel room that we
438:21 - get from
438:22 - our metadata all right so now we are
438:26 - going to try out this booking and see if
438:30 - we have a booking here in uh just come
438:33 - back to Local Host
438:37 - 3,000 and see if we're going to have
438:39 - this booking in our sanity studio so I'm
438:43 - going to reload our sanity studio and
438:46 - wait for it to build okay so we can come
438:50 - here so let's say we try
438:52 - to book this featured room so I'm just
438:55 - going to come into this room and wait
438:57 - for it to
439:00 - load and I know our server is
439:04 - still if I bring this here you see it's
439:07 - still compiling our CMS and it's not
439:11 - done compiling our CMS and that's why
439:13 - perhaps it's blocking you know uh hotel
439:18 - management application that's why it's
439:19 - blocking or some Local Host
439:22 - 3,000 so we'll just wait for the CMS for
439:26 - the studio
439:28 - to build up and then we can resit this
439:33 - route here okay since it is now
439:38 - compiled and in
439:41 - here we are going to visit
439:45 - the booking
439:47 - section so in here we are going to
439:51 - come over to
439:53 - booking and here in Booking we don't
439:55 - have any booking yet so we are going to
439:59 - try and create one now so I'm going to
440:01 - choose my check-in date and let's say my
440:05 - checkout date here and number of adults
440:10 - one I'll just increase this checkout
440:13 - date and we see the price updates and
440:15 - let's say two adults maybe one children
440:19 - one child and and click on this book Now
440:23 - function okay so with this it should
440:26 - help us to connect to stripe and once we
440:31 - are connected to stripe I'm going to fit
440:34 - these details so test at
440:37 - test.com and
440:39 - uh
440:41 - email and this is going to just say 23
440:45 - 2 and I'll just say test and click on
440:49 - this now so with this we should create a
440:52 - booking once it is
440:54 - successful so everything successful like
440:57 - this and one way to be sure everything
441:00 - went well if we come here we should say
441:02 - booked so this hotel room should show
441:05 - booked and it should not show us the
441:08 - book now on the CTA great so we see
441:12 - booked because we see booked if we come
441:15 - here you see that our booking was
441:18 - successful and you you already see that
441:20 - this hotel room was updated so if we
441:23 - click on this booking let's see if it
441:25 - has everything so it say it has a user
441:28 - and has a checkin date everything is
441:30 - fine except for our date now why do we
441:33 - have issues with our date if
441:37 - we we don't get any errors but you know
441:41 - it was successful I don't know why we
441:42 - have this error um with our date perhaps
441:45 - is the
441:47 - format so is the format maybe we need to
441:50 - get rid of this and you
441:53 - know format the date properly so if we
441:57 - come back here to this web hook so our
442:02 - check-in date and our checkout date so
442:05 - we need to format it and I think we have
442:07 - done that already in this uh application
442:11 - I'm just going to look for where
442:15 - we for where we formatted our check in
442:19 - date and so so this is it we actually
442:21 - needed to make use of this format
442:23 - checkout date and checkin date which we
442:26 - didn't use so that's why we having those
442:29 - errors so for checkout date we are going
442:31 - to use our formatted checkout date and
442:34 - for checking date we are going to use
442:36 - our
442:37 - formatted uh check in date here so this
442:40 - should solve our problem and everything
442:43 - should be fine so for this we can get
442:46 - rid of
442:47 - this so we can you know delete this
442:51 - booking I'll just come here and delete
442:54 - this so that we try it um one more
442:58 - time and we would update we shouldn't
443:01 - forget to update the hotel room and
443:04 - which room is this um this is this
443:07 - Deluxe suit so here I'm going to come
443:11 - here and change
443:14 - the is booked property to false and
443:19 - publish this so now we're going to come
443:21 - over to our booking and we're going to
443:22 - create our booking so we see the book
443:24 - Now functionality here I'm going to
443:27 - choose the checkin and the checkout date
443:31 - and just say to adults and go on to book
443:35 - now okay so we shouldn't forget to bring
443:38 - in uh middleware after
443:41 - this so I'm going to give the email so
443:44 - test
443:46 - test.com and give this
443:49 - the
443:51 - this and this
443:53 - 1123 CV and give it test name and going
443:58 - to book this room again and once we're
444:01 - done we're going to be redirected to the
444:03 - user page which we don't have yet we're
444:06 - going to go to the 4 four page come back
444:08 - to Local Host 3000 we see our booking
444:12 - here and everything should be fine so
444:14 - everything is fine this time around we
444:17 - get our total price and if we come back
444:20 - to this room we should see that this
444:23 - room has been booked so we just wait for
444:26 - this
444:27 - to upload and you see this room has been
444:30 - booked so
444:32 - great now with all of this done we can
444:35 - come back to this page so the user
444:38 - profile page and we are going to be
444:40 - working on this page
444:45 - next so let's come back here first if we
444:48 - come back I'm just going to get rid of
444:51 - this so everything seems to be fine here
444:54 - so we have a web hook
444:58 - here and when we host rather than listen
445:02 - to Local Host 3000 we should don't
445:05 - forget to add uh end point here so they
445:08 - will end point for uh you know this URL
445:12 - so we're going to add this URL and
445:14 - everything should be fine but for now we
445:17 - are just going to be using Local Host
445:19 - and this should be up and running so
445:21 - this here listening for the request
445:24 - should always be up and running so now
445:28 - we are done with all of these we can go
445:30 - on to create the user slug page so
445:34 - openness I will get rid of everything we
445:37 - have here I'll just close all and here
445:41 - let me get rid of everything we have
445:43 - here and to have our page up and running
445:47 - here where we have our web I'm going to
445:51 - create a new page for our
445:53 - users and here the ID so this is going
445:57 - to be here where we have the ID like
446:00 - this and here we are going to have the
446:03 - page. TSX file and this is our component
446:09 - and I'll just call this page um user
446:14 - details all user Details page and get
446:17 - rid of this so if we save this now we
446:20 - shouldn't have a for for page
446:24 - here this is our user Details page so in
446:28 - this page we are going to be fetching
446:30 - data that belongs to this user so here
446:34 - let's come to our lebs and in our api.
446:38 - TS let's have two new functions
446:44 - so we're going to export a sync
446:48 - function and this function we can call
446:51 - get user bookings to fetch the user or
446:54 - the bookings of the user this is going
446:56 - to need the user ID which is of type
447:00 - string and this we're going to get our
447:03 - results which is going to be equal to
447:06 - await we need to await our sanity
447:09 - client. Fetch and this fetch is going to
447:12 - return a booking type which we don't
447:14 - have yet so we're going to have that and
447:17 - here we're going to have our queries
447:20 - dot get book user booking which we don't
447:23 - also have yet and in here we need to
447:26 - pass parms so let's create uh queries
447:29 - because we are missing our queries so
447:34 - here let me export this cons get
447:39 - user get user bookings which is going to
447:43 - be equal to this Gro like
447:48 - this and want to fetch a user booking
447:53 - rore type is equal to
447:58 - booking like
448:01 - this
448:03 - and where the user
448:06 - doore ref so the user ref is going to be
448:10 - equal to a param we would receive and
448:12 - that param we can call user ID so this
448:15 - user ID is going to be used here as Pam
448:20 - like this
448:22 - okay so here let's take in this elements
448:27 - where we have the underscore
448:30 - ID we also want the hotel room and from
448:34 - the hotel room we want to take these
448:37 - properties like this from the hotel room
448:39 - we want to take the hotel room ID we
448:42 - also want to get the name we also want
448:44 - to get the
448:45 - slug and the
448:48 - price okay and after this hotel room we
448:52 - are going to take the check in
448:57 - date and also the check out
449:02 - dates the number of
449:06 - days the
449:09 - adults
449:11 - children the total
449:14 - price and uh
449:18 - discounts Okay so so these are the
449:20 - properties we are going to take from the
449:23 - user so you know from the booking that
449:27 - is pointing to this user and the booking
449:30 - has all of these properties so now here
449:33 - our queries is going to go to get user
449:36 - bookings like this and we shouldn't
449:39 - forget to follow Convention of adding
449:42 - this query over here so get user booking
449:46 - query here okay so here we also
449:49 - let's we get our result I'm going to add
449:53 - this cach No cach Object so here I'm
449:58 - going to say
449:59 - cash and I will say no cash like
450:03 - this this is going to give us a result
450:07 - and we shouldn't forget to return
450:11 - return our
450:14 - result and here we're going to have a
450:16 - booking type so let's come over to our
450:20 - models and have one for our booking dots
450:24 - like this and we're going to export this
450:26 - type we call it booking which is going
450:28 - to be equal to this
450:30 - function where we get all these
450:32 - properties so all these properties from
450:35 - our sanity query so I'm going to copy
450:38 - them and use them
450:41 - here soore ID is going to be of type
450:48 - string so I'm going to copy this and our
450:51 - hotel room we are getting all these
450:53 - properties so it's going to be of type
450:56 - object like this where the ID is a
450:59 - string the
451:01 - name is a string remember this log is an
451:05 - object we have this current property
451:08 - which is a string like this and the
451:11 - price is going to be a
451:15 - number the checkin date is going to be a
451:17 - type string the check out out date is
451:21 - also going to be a string the number of
451:24 - days is going to be of type
451:26 - number and I'll just copy this because
451:29 - the rest of these is going to be of type
451:36 - number so this is our booking type and
451:39 - here in our API we can
451:42 - reference this booking type like this
451:45 - and apart from the user booking we also
451:48 - want to get the user data so here con
451:51 - export con export async
451:56 - function and we can call this get
452:00 - user data and the parms is going to just
452:04 - be the user
452:06 - ID and the type is going to be of type
452:09 - string like this so in here we're going
452:13 - to get our
452:14 - results which is going to be equal to we
452:17 - await sanity client and we call
452:22 - Fetch and here I don't pass the type so
452:25 - we have our queries and we don't have
452:27 - the query yet and after this for the
452:30 - parm we need to pass the user
452:34 - ID so let's go write out this query so
452:39 - here we're going to export const um get
452:44 - user data
452:47 - query let going to be equal to Gro like
452:51 - this and we want to get the type so the
452:55 - underscore type is equal to
453:00 - user like
453:03 - this so just user like this and this
453:07 - will return on average so we need to
453:08 - take the first matching element and here
453:11 - we have the underscore ID we also need
453:15 - the name we also need the email we also
453:18 - need a is admin
453:21 - property we also need uh about the user
453:24 - we also need the created ad which
453:27 - actually is going to be of type
453:29 - underscore we're going to have this
453:31 - image so these are the properties we are
453:34 - going to be getting from the user and we
453:38 - shouldn't forget so to add the ID so the
453:41 - type is going to be user and the ID is
453:44 - going to be equal
453:46 - to we have this param user
453:50 - ID like this all right so we can go
453:55 - into to save this and in the api. TS so
454:00 - get user where is it so get
454:05 - user data query like this and then we
454:08 - pass this and we can also say
454:13 - cash no cash like this all right so we
454:17 - have these two functions and now we are
454:19 - going to call these um end points so
454:24 - first if we come to the user page in
454:27 - here we are going to send the request so
454:29 - we're going to have this um I'm going to
454:33 - first make this uh client component
454:36 - making use of that use client hook like
454:39 - this and now we can fetch our data
454:42 - making of the use SW AR hook so this is
454:46 - going to be equal to use s
454:50 - WRR like this and it needs a key for key
454:54 - I'm going to call this go to
454:57 - slash API and slash user bookings like
455:03 - this and here we are going to have this
455:07 - fetcher so called Fetch user bookings
455:11 - and this is going to be equal to async
455:13 - Arrow function and here we are going to
455:16 - call get user booking
455:20 - it should be bookings like this I could
455:24 - be
455:26 - booking so get user bookings like this
455:30 - coming from our
455:33 - leaps and here we need to pass the user
455:37 - ID and the user ID is what we will be
455:40 - getting from the URL so here this is
455:44 - going to be receiving props props is
455:48 - going to be an object where we have a
455:49 - parms key and parms is an object where
455:51 - we have the ID and the ID is of type
455:55 - string so we can come here and
455:59 - destructure all of these from the props
456:02 - we can destructure params and inside
456:05 - prams we can D structure the user ID
456:08 - like this so we can rename this to be
456:11 - user ID so in here we are going to pass
456:14 - the user ID property and we going to
456:19 - pass this function over here to fetch
456:22 - user
456:23 - booking and here we are going to call
456:27 - this uh
456:28 - data we rename to user bookings like
456:33 - this and we're going to have error and
456:36 - is
456:37 - loading so as we did in our rooms here
456:41 - in our page. CSX I'm just going
456:45 - to I'm just going to
456:47 - sorry
456:53 - I am just going to copy this so where do
456:55 - we have it
456:57 - again yeah so I'm just going to copy
457:01 - this and we can use this over here like
457:05 - this so the data we renamed it to user
457:09 - bookings and if we l this to the console
457:12 - so user bookings which should see the
457:15 - bookings that belongs um to this user
457:18 - user so if we open up the terminal here
457:22 - we should see the user bookings here we
457:25 - don't see here we see on the find and
457:28 - here we see the user booking so this is
457:30 - the booking that was created by this
457:34 - user great so after this we want to F
457:38 - the user data as
457:41 - well so here I'm just going to have this
457:45 - Con and this I'm going
457:47 - to also make use of our use
457:52 - S W hook and I'm going to call this/ Api
457:56 - SL users because we are going to be
457:58 - fetching this in our back
458:00 - end and the
458:02 - fetcher can be defined
458:05 - here so con
458:07 - fetch user
458:11 - data and this is going to be equal to
458:15 - this async
458:17 - function
458:19 - we're going to use XS because we're
458:21 - going to send this to our API to Fred so
458:24 - we're going to AIT
458:26 - x.g and the URL is going to be
458:31 - slash
458:33 - API slash
458:36 - users like
458:41 - this and we have our data we are going
458:44 - to
458:45 - return this data here and we can already
458:49 - pass this over here like
458:53 - this and we can have data which will
458:56 - rename to user
458:58 - data and we can also get the is loading
459:03 - which we can name to loading user
459:07 - data and we can also get the error which
459:10 - is say
459:13 - error getting user data or
459:17 - anything
459:20 - like
459:21 - this okay so here we can
459:25 - still through if error so this
459:29 - error
459:31 - or we can just say if error or if you
459:35 - know error getting user
459:37 - data we would go to load
459:41 - this all right so now we should go
459:47 - to have this end points okay and we can
459:50 - also use um configure the type of data
459:54 - we are going to be receiving so if we
459:57 - come back to our models here going to
460:01 - create one for our user. TS like this we
460:06 - can export this type user and this is
460:08 - going to be called to this object theore
460:11 - ID is going to be of type string we also
460:16 - have the name which is going to be of
460:18 - type string string we have the email
460:20 - which is going to be of type string we
460:23 - have the is admin which is also going to
460:26 - be of type Bing we have the about and
460:30 - about is going to be of type string or
460:33 - null so you
460:35 - know a user is not mandatory to have an
460:38 - about and created that is going to be of
460:41 - type string is have an
460:44 - image which is going to be of type
460:47 - string so this is us type we are going
460:49 - to be using it here so we're going to
460:52 - import this from our Models All right so
460:57 - we can save this and now we need to have
460:59 - this API route SL API SL users I think
461:02 - we have that route
461:03 - already so where is it in our
461:07 - API no we don't so here going to have
461:11 - this SL users and we're going to have
461:14 - this
461:16 - route. CS like this
461:19 - okay so in here we're going to export a
461:21 - sync function and this function we just
461:25 - call get because say get request it's
461:27 - going to take the request which is of
461:30 - type
461:31 - request like this I also get the
461:34 - response which is of type response like
461:37 - this and let's get the
461:39 - session this is going to go to our get
461:43 - server session and this needs the Earth
461:47 - options like this
461:50 - I will just rearrange these
461:54 - inputs and we can say as always if there
461:57 - is no session we are going to return
462:00 - return a new next
462:04 - response and this new next
462:07 - response we are just going to say
462:12 - authentication
462:13 - required like this and pass a
462:16 - status of
462:19 - 500 so if we have a session we are going
462:21 - to continue we can get the user ID which
462:24 - is going to Beal to our session. user.
462:29 - ID and we can have our try
462:36 - catch like this and in case of Errors
462:40 - we're just going to return return a new
462:42 - next response that says unable to
462:47 - fetch
462:49 - and here we're going to have a status of
462:52 - let's say
462:53 - 400 and in the tri block we're going to
462:56 - have our data which is going to be equal
462:58 - to a get user
463:01 - data coming from our leavs it needs the
463:03 - user ID and we are going to pass the
463:07 - user ID so this is going to
463:12 - be con like this so if we have our data
463:16 - we're going to return a
463:20 - next
463:22 - response and we're going to pass our
463:24 - data we are going to have our
463:28 - status we're going to have our object we
463:30 - have our
463:31 - status why are we having
463:35 - error yeah because it needs to be next
463:38 - response adjacent like this here we pass
463:41 - the data and we have our object where we
463:44 - set the status to 200 and we can
463:48 - also set the status text
463:54 - to successful like this all right so
463:59 - let's try this out now we should have
464:02 - everything working fine and let's log
464:06 - user data to the conso so just after
464:10 - here I'm going to conso log um user data
464:17 - here
464:18 - all right so if we come back
464:22 - here um I'm just going to open this
464:26 - up okay and reload this all right and
464:31 - not forget to open the terminal and we
464:34 - get user data on the F so we are not
464:38 - actually able to fetch um user data and
464:42 - we having
464:47 - error
464:51 - and if we just reload this we are having
464:54 - errors fetching the user data all right
464:58 - so let's fix
464:59 - this
465:02 - um we have this where is it so here we
465:06 - have aing user
465:08 - data and it goes to/ API SL users and we
465:11 - come to this SL API SL users we have
465:15 - this get request which get the user ID
465:19 - and call this get user data so here we
465:24 - are not
465:25 - ronning our
465:28 - results okay so that was the issue we
465:31 - are not returning our results we have
465:33 - this
465:34 - queries do get user query we can just
465:37 - visit it one last time so where the type
465:39 - is
465:40 - user and the ID is going to be user ID
465:44 - like this okay so let's try this but now
465:49 - so let's
465:50 - reload and see if everything works fine
465:54 - now we get on the find and we get null
465:58 - okay this time around we are getting
466:00 - null and if we update our query to be
466:05 - sure that our query isn't the reason and
466:10 - we save
466:12 - this and we
466:17 - reload
466:23 - you see now we get this subject okay so
466:27 - we get this object and it had to be
466:30 - underscore ID not ID so here we need to
466:36 - bring this back in and change this to
466:39 - underscore ID okay so let's reload this
466:44 - and let's see if everything is fine this
466:47 - time around
466:49 - yeah so you see we now successfully
466:52 - fretch the user
466:55 - data so I'm going to come back to the
466:57 - page. TSX and here remove our
467:02 - console.log so now we are sure we are
467:04 - getting the user data we can have a jsx
467:09 - so this div I'll give it the class name
467:11 - of container MX
467:15 - or2 give this PX of two
467:18 - give this on medium devices a px of four
467:22 - and a py of 10 like
467:26 - this and inside here we are going to
467:28 - have this other
467:30 - div and we can display this as grid and
467:34 - um medium devices grid
467:37 - C 12 give this a gap of
467:43 - 10 and here we're going to have this
467:46 - addtive and give it this class name of
467:50 - hidden give this medium
467:53 - devices block like this and the medium
467:56 - devices go span
468:00 - four and here on large devices go span
468:05 - three like this give it Shadow
468:09 - LG give it a height of feet give it
468:12 - position sticky the top of
468:16 - 10
468:19 - not 10% 10 give it this dark um grayish
468:24 - background so e
468:26 - ff0
468:29 - F2 give it the test
468:32 - black uh Rand dead LG A
468:36 - px6 and A
468:38 - py4 like
468:40 - this okay so up next we are going to
468:43 - have this div for the user image and we
468:47 - can already import this image component
468:51 - from next
468:52 - image so here we are going to have this
468:56 - class name and give this on medium
468:59 - devices give this a width of let's say
469:03 - 43
469:05 - pixels it is a width of
469:10 - 28 a height of
469:13 - 28 and on medium devices give us a
469:16 - height of 143 PX
469:20 - again give this MX
469:24 - Auto imagine bottom of five uh rounded
469:29 - full and an overflow of hidden like this
469:33 - and inside here let's say just copy the
469:36 - user
469:38 - data uh and I'll duplicate this so if
469:41 - type of user data is equal to onine and
469:46 - loading user data like
469:49 - this we're going to say cannot
469:53 - Fetch and here I would also duplicate
469:56 - this so if we
469:58 - are sorry I'm going
470:00 - [Music]
470:03 - to say if you know we
470:09 - are loading user data I would just
470:12 - return return uh spinner so I loading
470:17 - spinner
470:19 - component and if we are also fetching
470:22 - our user booking so if this is loading
470:25 - is
470:26 - true just going to return this and so
470:30 - here our source is going to be your user
470:33 - data do
470:39 - image so where do we have this if there
470:43 - is no user
470:45 - data H so we don't have it so I'll just
470:48 - say if there is
470:49 - no user
470:52 - data so if there is no user data I'm
470:56 - going to draw a new
471:00 - error cannot fetch data
471:05 - here okay so here I'm going to get rid
471:08 - of this and we also need
471:11 - the and the alt is going to be uh user
471:15 - data do
471:18 - name give it the width of 143 pixels and
471:23 - the height of 143 like
471:27 - this and give it a class name so our
471:31 - image class name our
471:33 - scale animation class name get this
471:37 - rounded full like this and if we save
471:41 - this we should see this section over
471:44 - here with the user details
471:48 - so we see
471:49 - this um session over here great and it's
471:54 - quite large so 143
471:58 - pixels it's quite
472:00 - large okay and after this div we would
472:04 - have another div here to display the
472:07 - user details I'm going to give this a
472:10 - class name of font
472:13 - normal give it um py of four give this a
472:18 - text left like
472:20 - this and have this H6 here where we are
472:24 - going to display about the user so I'll
472:27 - give this a class name of text
472:30 - XL so text extra large this is a font
472:34 - bold and a pattern bottom of three like
472:37 - this and here we can have the text
472:41 - about so after this we would have this
472:43 - paragraph and here give this a class
472:47 - name of text SM like this and you know
472:51 - the user about can be undefined so we
472:53 - can just say
472:55 - user data doab if it's there it's going
472:58 - to use it
473:01 - otherwise we can just perhaps with an
473:04 - empty
473:06 - string okay so after this div we are
473:08 - going to have this other div and the
473:12 - class name is going to be
473:14 - front normal like this
473:18 - and text left we just want to display
473:21 - the user data do name so here we're
473:25 - going to have this
473:26 - H6 which would give text XL and
473:31 - also
473:35 - font
473:36 - B and we'll also give it a padding
473:40 - button of three and here we're going to
473:44 - have our user data do name like
473:50 - this and we can have our sign not
473:53 - functionality we have this
473:55 - div and this D we're going to give it a
473:57 - class name of flex items
474:01 - Center and here we are going to have
474:03 - this pattern with the text of sign
474:10 - out and just give this
474:14 - uh margin to the right of two
474:19 - and here we're going to have this fa
474:22 - sign out out like
474:27 - this and I'll get this a class
474:32 - name that's equal to text 3
474:36 - XL give this a CER
474:39 - pointer and
474:42 - here and click we want to call sign out
474:46 - so we don't have this function yet we
474:50 - are going to bring it in so here we are
474:54 - going to call sign
474:57 - out and just rearrange these inputs
475:04 - here and going to
475:07 - import sign
475:10 - out which will be coming from next o
475:14 - react so here we are going to call call
475:18 - sign
475:19 - out and this sign out we can give it the
475:23 - call
475:25 - back URL and the call back URL we are
475:29 - going to point to slash like this so
475:32 - let's save this and come back to the
475:34 - browser and we should see all other
475:37 - details about the user so we see about
475:41 - we see the username and we have this
475:43 - button to sign out the user so if we
475:46 - click on this
475:47 - we should sign out and go back to our
475:50 - homepage great and that makes sense
475:53 - because now we are going to bring in our
475:57 - middleway so we come back to our
475:59 - middleway I'm going to remove this that
476:01 - we set when we testing stripe sorry I'll
476:05 - bring it back in and I'll get rid of
476:07 - this one here so that we cannot create a
476:09 - booking unless we are you know
476:13 - redirected so we can go on and
476:15 - authenticate ourself
476:18 - if we click here it should bring up the
476:21 - authentication screen for
476:24 - us and we should now authenticate I'll
476:28 - just authenticate again with
476:33 - Google
476:35 - here and I would come back to the user
476:40 - profile page so this page here so we
476:43 - have about the user the name and the
476:45 - ability to sign out now we are going to
476:48 - have this section over here so remember
476:51 - this section this section had this call
476:55 - span 4 so this section here and this
476:58 - other section is going to have these
477:01 - class
477:02 - names because on medium devices we want
477:05 - this to call
477:07 - span it like this and on large devices
477:12 - SC span 9 like this because that's what
477:16 - we did so this un large device SC Co
477:20 - span three so in here we are going to
477:24 - have
477:26 - um different section so first we are
477:30 - going to have this
477:32 - div and this is going to have a class
477:34 - name of
477:37 - flex we are going to give this items
477:39 - Center like this and here we're going to
477:43 - have this H
477:44 - five and we're going to give this a
477:46 - class name of text to
477:49 - XL we're going to give this font bold
477:52 - and imagine right of
477:54 - three and in here we can just say hello
477:58 - and here have the user data. name so
478:02 - user data or data set so your user data
478:08 - do name like
478:09 - this and we should see that here so this
478:13 - other section so hello and we see the
478:17 - username so after this we are going to
478:19 - have this other
478:23 - div and this div we want it to be hidden
478:27 - on medium devices here so we are going
478:31 - to have this other div and this div we
478:35 - can give it this class
478:37 - name and the class name is going to be
478:39 - MD hidden sorry sorry class
478:45 - name is going to be
478:50 - MD
478:52 - hidden uh with 14 a height of 14 red
478:57 - full overflow
479:00 - hiding and in here we're going to have
479:02 - the image
479:07 - components and here we can give this uh
479:12 - a class name and the class name is going
479:15 - to be IMG scale
479:22 - animation like
479:25 - this and
479:29 - here you can give it a width of let's
479:32 - say
479:33 - 56 and give it a height of let's say
479:38 - 56 and for the source property this is
479:41 - going to go to slash
479:45 - images
479:49 - and here our hero
479:52 - one.
479:55 - JPEG and for the alt the alt is just
479:58 - going to go with username like
480:02 - this so This hero one. jpeg it says
480:06 - hidden earn medium devices so if we come
480:09 - to our public
480:11 - folder and in our public folder if we
480:15 - open images this image here so that's
480:18 - the image we are displaying
480:22 - here so let's come back to
480:25 - application and if we toggle this on
480:31 - mobile we have this image I'm just going
480:35 - to reload
480:39 - this rather than use
480:43 - um rather than use this let not forget
480:47 - to give this R Dead full just going to
480:50 - save
480:51 - this rather use this um image let's make
480:57 - use of
480:59 - the user data do IMG do image like this
481:05 - and we should have the user image right
481:09 - there okay so here we're going to have
481:13 - more details so after this div we are
481:17 - going to have this paragraph and this
481:19 - we're going to display as block we're
481:24 - going to give it a with fit uh medium
481:29 - devices give it hidden like this and
481:33 - text
481:36 - SM and give it a py of two like
481:45 - this
481:48 - so
481:49 - here we're going to have the user data
481:54 - do about like this so we know it can be
481:57 - null so if it's not there we can just
481:59 - have this for empty string and after
482:03 - this we are going to have this user this
482:05 - par graph we just say join
482:08 - in and here we can have the user data
482:12 - doore created at and we're going to
482:16 - split this this by T and we are going to
482:19 - take that first element
482:22 - here and we're going to give this a
482:24 - class name of text extra small give this
482:28 - a py of
482:30 - two and we are going to give this um a
482:34 - font media like this so we can save this
482:39 - have a preview and we should be seeing
482:42 - that
482:44 - here great so after this paragraph We
482:47 - are going
482:48 - to have a
482:52 - div like
482:54 - this and we're going to give it this
482:56 - class name of MD
482:59 - hidden uh Flex items Center and a margin
483:04 - y of
483:09 - two so in here we want to keep have this
483:15 - paragraph on medium devices or we tell
483:18 - sorry yep on small to medium devices I
483:22 - will give this um imagine right of two
483:24 - so that the user can can sign out so the
483:29 - same sign out functionality that we had
483:31 - here I'm going to copy this and paste
483:35 - this in here so inside of this div like
483:42 - this so after this div so still inside
483:46 - this uh where is it so inside this Cod
483:51 - span 8 so here so still inside here and
483:56 - first let's see if we you know show this
483:59 - yeah so medium devices this is what the
484:01 - user can see to use to sign out so after
484:05 - this inside here we are going to have
484:08 - this
484:09 - nav which is going to have so many class
484:12 - names so going to give a class name of
484:14 - sticky a top of
484:16 - zero give it um PX of two give this a
484:22 - width fet like this give this MX
484:28 - Auto here on medium devices give this a
484:31 - WID
484:34 - full and on medium devices get this a px
484:38 - of five give this a
484:41 - py3 a margin bottom
484:44 - of 8
484:47 - text Gray
484:50 - 700 give this border give this border
484:54 - grade 200 like this get this red LG get
485:00 - this LBG grade 50 like this and AAG top
485:05 - of seven like this so in here we are
485:09 - going to have an on that
485:13 - list okay and the idea is to show
485:17 - the current
485:18 - bookings and also show the you know the
485:23 - user spending so we're going to be
485:25 - managing some
485:27 - states and to manage the states here we
485:30 - are going to come let's say somewhere
485:33 - around
485:34 - here and we can have this
485:39 - property which is going to be called to
485:41 - you
485:42 - state and we're going to have this type
485:45 - for for our use State and we're going to
485:48 - have the default
485:50 - value so here we can call this current
485:53 - nav and here Set current nav like this
485:58 - and inside this UST State we going to
486:01 - have the type
486:03 - bookings and we also going to have the
486:07 - type amount like this and we're going to
486:11 - have the type of
486:15 - ratings
486:17 - like this and by default we want to give
486:20 - it bookings here so we can go back to
486:24 - our H that list so inside of this nav
486:29 - and for the class name we are going to
486:31 - have this backck the last
486:34 - sign so it's going to be
486:37 - dynamic here like
486:43 - this and in here we can say if current n
486:47 - is equal
486:49 - to and here we can check if it's equal
486:52 - to
486:53 - bookings then we are going to give this
486:55 - a text blue
487:01 - 600 otherwise we are going to give it a
487:04 - text Gray 700 so otherwise text
487:09 - Gray 700 like this so this should be
487:15 - text
487:17 - and that's not the only class name
487:20 - because we're going to give display this
487:21 - in line Flex imagine to the right of one
487:25 - and on medium devices and margin to the
487:27 - right of five item Center space x one so
487:33 - space X1 like
487:36 - this and on medium devices we're going
487:39 - to say space
487:42 - x three like
487:44 - this and now inside this on that list
487:49 - we're going to have some list items
487:56 - here and this list item let's give it
487:59 - the class name remember it's inside this
488:02 - nav and this class name is going to be
488:06 - inline
488:09 - Flex
488:11 - here items Center and cursor pointer
488:16 - like
488:17 - this and on click we are going to set
488:21 - our current
488:23 - nav and we're going to set our current
488:25 - nav to
488:27 - bookings and here we are going to have
488:30 - this
488:32 - function inside this Ali we're going to
488:35 - have an icon so this BS
488:40 - Journal bookmark fi
488:44 - icon and we're going to have this
488:47 - a tag here and this a tag is going to
488:52 - have this class name of inline
488:56 - Flex we're going to give it items
489:04 - Center like this and MX of one and then
489:08 - medium devices MX of three like this
489:12 - text extra
489:14 - small
489:17 - and medium devices text small like this
489:21 - and font
489:24 - medium and the text is just going to say
489:27 - current bookings so we want to display
489:30 - the current bookings you know of the
489:33 - user and we should see our navigation
489:37 - somewhere here so we see this uh current
489:41 - bookings like this looking good so after
489:45 - this
489:48 - um after this under list we are going to
489:53 - have another on that list so I'm just
489:56 - going to bring this down again and here
490:00 - now it's going to be if this is going to
490:02 - be equal to amount we're going to give
490:05 - this otherwise we would give this color
490:08 - and then we're going to set our current
490:10 - bookings to amount these class names
490:14 - remain the same and for the this um icon
490:18 - we are going to use this
490:20 - GI money stack like this which we need
490:23 - to import and this is going to have the
490:27 - class name
490:28 - of not the class name the text is going
490:30 - to say amount spent like this so if we
490:35 - come back we should see this other one
490:39 - displayed here for the amount
490:42 - spent so we don't see it yet
490:47 - y so we see it and if we click it now
490:50 - becomes the active one so I don't know
490:54 - if we're going to make use of the
490:57 - ratings so we're going to see if we need
491:00 - to add another tab from the ratings or
491:03 - if we just going to let the user book
491:06 - directly from
491:11 - here so just after this nav which you
491:15 - can move to another component but I'll
491:18 - just leave it in this component so after
491:21 - this nav we are going to have a table
491:24 - component that we only want to show if
491:27 - it's um if the current bookings is going
491:32 - to be the current nav is booking so here
491:35 - if current nav is equal to
491:40 - bookings like this if that's the
491:43 - case we want to have our user bookings
491:47 - so user bookings and want to check if it
491:49 - is
491:50 - true then if that's true for now we are
491:54 - going to have a table
491:56 - component could just say table like
492:00 - this otherwise we are just going to have
492:04 - an empty fragment so we check if current
492:07 - T is bookings I will just check if the
492:09 - user has some bookings then we are going
492:11 - to render this um component over here so
492:16 - this table component and we can go on to
492:19 - create the table
492:23 - component so I would come here and in
492:27 - our components folder I'm going to
492:30 - create a new component for table I'll
492:34 - copy this and here I'll create this
492:37 - table.
492:39 - CSX file and here have a reactjs
492:44 - component
492:48 - so this table is going to be receiving
492:50 - some props and it's going to be a client
492:54 - component so I'm going to mark it as
492:58 - such using the use client
493:01 - directive and here let's have the type
493:04 - props which is going to be equal to this
493:06 - object and we want to get the booking
493:09 - details like this which is going to be
493:12 - of type booking so do we have the book
493:15 - type yet if we come to a model this type
493:19 - over here so we are going to be making
493:21 - use of it so it's going to be of this
493:25 - booking type coming from our
493:29 - models like
493:32 - this we're going to handle rating and we
493:35 - would need to keep track of the room ID
493:39 - so we can already have this set room ID
493:42 - which is going to be of type thisp
493:47 - and this patch needs to come
493:50 - from um
493:52 - react and this not this this dispatch
493:57 - from react here and I'm just going to
494:02 - rearrange this order of input and here
494:06 - we have our set State action which is
494:08 - going to return of type string or no
494:14 - like this
494:16 - and in here we can say this F uh this
494:19 - table is going to be of type FC which we
494:22 - import from react and it's going to take
494:25 - in these props and
494:28 - here we can destructure the booking
494:32 - details and also the set room ID from
494:37 - the
494:39 - props so
494:44 - here
494:46 - we are going to have a div and this div
494:48 - is going to have this class name of
494:52 - overflow overflow X of Auto we going to
494:57 - have this Max width and this Max width
495:00 - is going to be
495:03 - 340 pixels we're going to have red LG MX
495:10 - Auto U medium devices give it a Max
495:13 - width of full
495:18 - give it Shadow
495:20 - MD and on small devices out go banded LG
495:25 - like this so here we have a
495:30 - table and for class
495:34 - names I'm going to give this a with
495:38 - full also give this a
495:41 - text SM give this a text left
495:46 - like this and give it a text grade
495:52 - 500 and inside this table we are going
495:55 - to have t
495:56 - head and give it a class name of text
496:00 - extra small text Gray
496:03 - 700 upper case like this and a BG gray
496:07 - of
496:07 - 50 and inside this T head we are going
496:10 - to have the
496:12 - TR and here we're going to have a CH for
496:16 - table
496:17 - headens and here let's give this some
496:21 - class names of PX
496:24 - um
496:26 - six and give it a py of three like this
496:31 - and we can have a room
496:35 - name okay and I'm just going to bring
496:39 - this down and here we have our unit
496:44 - price and here we would have our
496:48 - price we would have our discount and
496:52 - display in number of
496:54 - this
496:59 - books and here we would have a days left
497:03 - so that user can know um how many days
497:06 - left so after this T head we are going
497:10 - to have
497:11 - um our table body so our T body
497:16 - body and we want to map through our
497:19 - booking details so here we have our
497:21 - booking
497:22 - details map and here we have each
497:27 - booking and we are going to return a
497:30 - table R so here we're going to return
497:34 - this TR like this we have errors because
497:37 - first we need to have our ID sorry our
497:41 - key and the key is going to be the
497:44 - booking do
497:45 - _
497:46 - ID and we can get this a BG
497:50 - white give this a
497:53 - border uh
497:57 - B bottom width and on Hover can get this
498:01 - a BG
498:03 - gray of 50 like
498:06 - this and inside here we can have this T
498:12 - heading and I'll give this a class name
498:14 - of PX six under line text blue
498:20 - 600 give is a cursor pointer like this a
498:25 - py4 of font
498:29 - medium and y space no WP like
498:34 - this and this T heading we can have a
498:39 - bin do hotel
498:41 - room. name to display the name of the
498:45 - hotel
498:48 - room and here when the user clicks on
498:52 - this we want to push the user to the
498:56 - hotel room slug okay so here we can have
499:00 - a
499:01 - router so inside this component we can
499:04 - have a router which is going to be
499:06 - called to use router that comes from
499:09 - next navigation so this use router hook
499:14 - and we can take this up top so here when
499:18 - the user clicks on this we're going to
499:20 - have a callor router and we'll push the
499:22 - user to these slash
499:25 - rooms and here go to
499:28 - slash and we are going to go to slash
499:34 - um
499:36 - booking do hotel room. slug do current
499:40 - so this is going to take us to the hotel
499:44 - room when the user clicks on this and
499:47 - after this we are going to
499:49 - have another table
499:53 - data so this TD and this is going to
499:57 - have this class name not class so this
500:00 - class
500:01 - name and this class name is going to be
500:04 - px6 and py4 like
500:09 - this and in here we are going to show
500:13 - the booking
500:16 - dot hotel room.
500:20 - price and I'll just bring this down and
500:24 - next is going to be booking do total
500:28 - price I'll bring this down and next is
500:31 - going to be booking do discount the next
500:35 - is going to be booking do number of
500:38 - days and this is going to be the
500:41 - checkout date uh we don't have this yet
500:45 - for now I'm just going to have this um
500:49 - zero because we want to calculate the
500:51 - number of days left so that the user can
500:54 - you know have an idea and we are going
500:56 - to have this
500:58 - CD same with this class name of px6 and
501:04 - py4 and this is going to have a
501:09 - button now this is going to display the
501:11 - text of rate room because we want these
501:14 - to be able to rate a room and this is
501:17 - going to have font medium and text blue
501:21 - 600 like this and on Hover we are going
501:25 - to underline this
501:27 - rate and inside this um this button we
501:32 - are going to have this on
501:34 - click and here we are going to do two
501:37 - things but for now we are going to set
501:39 - the room ID to the booking do hotel room
501:45 - do ID so I'm going to save this and
501:49 - import this table component if you
501:51 - missed out anything please do check the
501:55 - GitHub okay so inside this page here
501:59 - rather than show return table like this
502:02 - I'm going to bring in the table
502:05 - component coming from our component
502:09 - folder over
502:11 - there and in here we are going to pass
502:14 - the prop so booking details is going to
502:16 - be equal to the user bookings like
502:20 - this and where we have
502:25 - error type
502:28 - booking
502:30 - is so user bookings is of type booking
502:34 - okay and here let's not forget to also
502:37 - pass the set room
502:39 - ID and why are we having this
502:43 - error if we have on user bookings so
502:46 - where is
502:47 - it um user
502:51 - bookes it can be of type booking or
502:54 - undefined so I think that's why we are
502:56 - having the error but here we are
503:00 - training a new error if we don't have a
503:03 - user booking so I don't know why we
503:05 - still having that error but let's do the
503:08 - same here and see if we pass this do we
503:11 - still have our error we do so type
503:14 - booking is missing from type oh an array
503:19 - of
503:19 - booking okay so
503:22 - this is meant to be an array of booking
503:26 - and I'll just control Z this change we
503:28 - did here and that's because if
503:32 - we come
503:34 - here we see we are returning booking
503:37 - like this so this needs to be an array
503:40 - of booking and that's where the error is
503:43 - coming from so fetch user
503:45 - booking so if we come here so get user
503:47 - booking you know we are saying this is
503:50 - going to just Reon a booking so actually
503:54 - it's going to return the
503:56 - bookings that belong to a user so that's
503:59 - why we have this blue ra over here now
504:02 - the error should be gone yep the error
504:04 - is gone and we are getting this now for
504:08 - the set room ID so we're going to have
504:12 - this in state a state where we set the
504:16 - room ID so
504:18 - here where do we manage our state so
504:21 - here I'm going to have this other state
504:24 - we have our room ID and here set room ID
504:29 - is going to be equal to you state which
504:32 - by default is going to be
504:35 - null and this can be of
504:39 - type
504:41 - string or null like this so let's save
504:45 - this and go back here to see if we're
504:48 - going to see our table component display
504:51 - without any errors great so our table
504:54 - component
504:55 - displays and we are having this you know
504:58 - if I go over to dark team you see we are
505:01 - having this not look great and if we
505:05 - come back to our table I'm just going to
505:07 - have this
505:09 - empty TR
505:12 - here and this should be for rating get
505:14 - rid of the class name or maybe I leave
505:17 - the class name and if we come back now
505:20 - it's fixed okay so I'll just rever back
505:23 - to the white them so we have the unit
505:26 - price of this 100 and the price is this
505:29 - because the user got a discount of eight
505:32 - so when the user booked this there was a
505:34 - discount and that was why the total
505:36 - price was you know
505:39 - 552 and the user had the number of days
505:42 - booked so 6 days and for now we just
505:46 - hardcoded this to be you know this left
505:50 - to be
505:53 - zero okay so after this we can go to
505:57 - display the amount spent so we want to
505:59 - have a graph where we can Now display
506:04 - the amount spent so the user can also
506:06 - keep track of the amount um spent so far
506:11 - so I'm going to get rid of the table
506:13 - components and and we are going to have
506:15 - a new component that we can call chat so
506:20 - here in the component folder I'm going
506:23 - to create a chat component so I'll copy
506:27 - this and paste this in here so our
506:31 - chat.
506:34 - TSX so I'm going to have
506:37 - this components
506:40 - here and here so if we come here I'm
506:44 - going to get rid of the react input and
506:48 - here I'm going to make this a client
506:51 - component making use of the use client
506:55 - directive and we need to install chat JS
506:59 - so I'm going to quit our server and npm
507:02 - install chat JS Library like this and
507:07 - we'll need to import some things from
507:09 - the library so all of these will be
507:12 - coming from chat JS so we can
507:17 - restart our application using npm run
507:22 - Dev and I will just reload our browser
507:27 - so here I'm going to import chat as chat
507:34 - JS chat as chat JS like this I would
507:38 - also import um to
507:41 - tip import the category
507:47 - scale bring in the linear scale as
507:54 - well and bring in the bar
507:57 - elements okay so all of these brought in
508:01 - we need to register them so
508:03 - here we are going
508:06 - to say so our
508:09 - chats so chats
508:13 - Js like this and then we have just
508:16 - register we want to register the tool
508:18 - tip the category scale the linear scale
508:24 - and the bar
508:25 - elements so we want to register all of
508:28 - these and now here I'm going to also
508:32 - import so somewhere
508:35 - here uh I'm going to import bar and this
508:39 - bar is going to be coming
508:42 - from this
508:45 - another Library we don't have so it's
508:48 - going to be coming
508:49 - from react
508:54 - hyphone chjs hyphone to like this so I'm
508:59 - going to save this
509:02 - and install this package so
509:05 - npm install react chartjs to library
509:11 - like this we're going to import the back
509:13 - comp component from it so now it's done
509:17 - I'm going to restart our application
509:20 - using npm run Dev okay so let's have our
509:26 - options so
509:29 - export con
509:32 - options and this options is going to be
509:35 - this object we're going to set
509:36 - responsive to true because we want the
509:39 - graph to be
509:43 - responsive and we can have this
509:48 - plugins and this is going to be an
509:51 - object where we say Legend and Legend is
509:54 - going to be an object and here we say
509:58 - position top at least as
510:03 - con okay and next we're going to have
510:06 - our
510:07 - title and the title we just say
510:13 - display display
510:18 - true like this and we're going to have
510:22 - this text and this text is going to say
510:30 - charts.js
510:32 - bar
510:35 - chat so this is the title you know we
510:38 - can change this if we don't want to
510:40 - display we're going to change this
510:42 - later and this is going to receive props
510:45 - so we can say this is going to be of
510:47 - type FC which we import from
510:50 - react and the prop I'm just going to
510:52 - Define it here so it's going to have
510:54 - this user bookings which is going to
510:57 - be a booking array and this booking will
511:00 - be coming from
511:02 - our models folder so going to import
511:06 - this from our models
511:09 - folder and here we can destructure the
511:12 - user bookings
511:16 - and this booking is going to need some
511:19 - options and label so labels is going to
511:23 - be equal to our user
511:27 - bookings and here we can map through it
511:30 - and we get each booking and we want the
511:32 - r name to be the booking okay and we are
511:36 - going to return return the booking do
511:39 - hotel room. name so that's going to be
511:42 - the label and to get the amount spent on
511:46 - that room so we're going to have this
511:48 - Con amount spent and amount spent is
511:51 - going to be equal
511:53 - to user bookings do map we get each
511:57 - booking and we're going to return return
511:59 - the booking do total price like this so
512:04 - now we can have our bar so our bar chart
512:06 - which is this from cha
512:09 - js2 so we're going to have our bar and
512:13 - make it uh self closing component the
512:17 - options is going to be these options we
512:20 - just defined up here so I'm going to
512:23 - change this to options so these are the
512:26 - options responsive true and all of these
512:29 - to get Auto completion you can Define
512:31 - them here so this
512:33 - object and
512:36 - here you can pass that's different so
512:39 - you see these are your options okay so
512:42 - for this case just have this options and
512:46 - next it needs data so data is an object
512:48 - like this and data need labels so we're
512:52 - going to pass this labels that we just
512:55 - defined here and here it means data set
512:58 - and data set is an array so an array of
513:02 - object and the label of that data set is
513:05 - going to
513:07 - be um amount
513:11 - spent like this and and here we have
513:14 - data and data is going to be amount
513:17 - spent like this we can have our border
513:21 - WID and this is going to be equal to one
513:23 - I'll just say this to one and we can
513:26 - have our backround color so this hasht
513:30 - F2 not the last sign
513:33 - hashtag
513:35 - f27
513:37 - 45 like
513:39 - this we can give this color on Hover so
513:42 - on Hover background
513:44 - color which is just going to be this # f
513:49 - 2
513:50 - C6
513:53 - 41 so let's save this and we need to
513:57 - make use of this chat component in our
514:00 - page so in here we need to make use of
514:04 - this chart component and give me a
514:09 - second and want to display it if our
514:12 - current
514:15 - now if our current na is equal to
514:20 - amount so if that is true then we want
514:23 - to display our chart
514:25 - component and our chart needs to be
514:28 - imported from our components like
514:31 - this and here we're going to pass the
514:33 - user bookings which is going to be
514:36 - the user bookings like this otherwise we
514:41 - are just going to pass an
514:45 - empty um string like this we having
514:49 - having error because type user booking
514:51 - or on the find okay so we can
514:56 - check just as we did here so have this
515:00 - extra check and if we have user
515:04 - bookings then to go to show our user
515:07 - booking components and this time
515:10 - around when application reloads if we
515:14 - come over to amount spend we should see
515:17 - our chat component so we don't see it
515:21 - yet okay our application is up and
515:24 - running we are just going to reload our
515:27 - application remember we installed some
515:30 - packages and you see our application
515:33 - just had to compile and once it's
515:37 - done we should now um see our chat
515:41 - component so here we have current
515:43 - booking and we see the amount spent we
515:47 - see that this was the amount the user
515:50 - spent on this now we see this because
515:53 - this is the you know only graph so here
515:56 - we see the amount spent and we see this
515:59 - theux suit here all right so this is
516:03 - working fine and we have this sticky we
516:05 - also have this sticky up here at the top
516:08 - where the user can switch to the you
516:10 - know current bookings and switch back to
516:13 - the amount spent so this is working fine
516:16 - and if we click on this we should go to
516:18 - the room page sorry yeah to the hotel
516:22 - room page so the
516:23 - user can see the hotel room that he
516:28 - booked okay so the hotel room that was
516:30 - booked and just give this a second to
516:33 - load and you see the user booked it
516:35 - that's why it had the label of booked
516:37 - and it's up to the admin to come back to
516:40 - this hotel room when the booking is done
516:44 - and update the is booked
516:48 - property to false so that other um
516:51 - customers can book this hotel room so
516:54 - now with these two functionality done we
516:57 - can go on to work on our rating
517:01 - feature okay so now for us to set up
517:06 - rating let's come back to our
517:08 - application and I am going
517:11 - to close all the these tabs and here in
517:15 - our table component that is where we
517:18 - have this button so this right button
517:22 - and which is here so on click of this
517:24 - button we are setting the room ID we
517:26 - want to also do something we want to
517:29 - toggle our rating model so here let's
517:32 - have in state we don't have any rating
517:35 - model yet we're going to create it in a
517:37 - second and we can say is rating
517:42 - visible like this and then set is
517:45 - rating visible it's going to Beal to US
517:49 - state and by default
517:52 - false so somewhere here so let's write
517:57 - it
517:59 - um maybe we can write it here and here
518:02 - comes toggle rating
518:07 - model is going to be equal to this
518:11 - function and here we are going to
518:15 - return set is rating visible we have the
518:20 - previous
518:23 - state and we want to return the inverse
518:27 - of this previous
518:30 - state so we can pass this over as
518:35 - prop to our table component so here we
518:40 - can receive this prop and this is going
518:42 - to be of type
518:44 - function that returns nothing so that
518:47 - returns
518:48 - void and here we can bring the toggle
518:52 - rating model from our
518:54 - prop and whenever we click on this
518:57 - button we are going to call this
519:01 - function I'm going to save this and come
519:04 - back here and over here I'm going to
519:07 - pass this toggle rating model is equal
519:11 - to toggle r in model like this so do go
519:15 - on and save now it's time for us
519:20 - to create the rating model so we're
519:23 - going to create a new component for
519:26 - that I we just collapse all of this so
519:29 - here we can have the rating model
519:34 - component and here we can have the type
519:37 - script
519:39 - definition so let's have our jsx I'm
519:42 - going to get get rid of
519:44 - this and obviously we are going to be
519:47 - receiving props so type props is going
519:50 - to be equal to this
519:51 - object and it's open is going to be of
519:54 - type bowling so this is one prop we need
519:58 - to toggle the visibility of this um
520:02 - model like this and we're going to pass
520:03 - the
520:04 - props here we receive
520:07 - props um sorry this needs to be props
520:10 - like this and so that we can dist
520:13 - structure these properties from our
520:16 - props so we can D structure is open like
520:21 - this okay so this is going to be dynamic
520:25 - here we're going to have this class
520:27 - name and here we're going to give it a
520:30 - position fixed give it a z index of
520:37 - 61 and then give it an inser of zero
520:41 - give it Flex it temps Center justify
520:45 - Center like
520:47 - this and in here we are going to say is
520:53 - open if this is true what do we have
520:56 - here is so if open is is open is true we
521:00 - are going to give this class names
521:02 - otherwise we would give this other class
521:04 - names so if this is open we want to give
521:06 - this an
521:08 - opacity of let's say
521:11 - 100 and P pointer event Auto like
521:17 - this and I will just copy this class
521:20 - name because it's similar so here the
521:25 - opacity is going to be zero and the
521:27 - pointer events is going to be known okay
521:31 - so this is this wrapping div we have
521:34 - here we can already um make use of
521:39 - this in
521:41 - uh page so somewhere
521:45 - here you know it doesn't matter where we
521:48 - place this so I'll just place this
521:49 - somewhere
521:51 - here and I would have the written model
521:56 - like this then we'll go and UT and it
522:00 - need is open prop which is going to be
522:04 - equal to is what did you call it is
522:07 - wrting visible like this so we can save
522:11 - this and if we we come here and once we
522:15 - click on the red button we expect to see
522:18 - this
522:19 - component so I'm going to come back here
522:22 - and once we click on this great so we
522:25 - see this rating model okay so it covers
522:28 - the whole screen we need a backdrop
522:31 - component for that so let's create it as
522:34 - well um here in the components we can
522:37 - have
522:38 - a backdrop
522:41 - components and here a backdrop. TSX
522:47 - file so I'm going to have this here and
522:51 - this also is going to be a functional
522:56 - component and here we going to receive
523:00 - props and props is going to be object
523:03 - and here you can also have the is open
523:05 - prop which is going to be of type
523:11 - bowling and we pass this prop over here
523:14 - this is the only prop this component we
523:16 - need so I will just D structure from
523:19 - here like
523:21 - this so let's go on to style this um
523:26 - backdrop in here I am just going to have
523:31 - this check so I'll check and we don't
523:35 - even need this um return return here so
523:38 - we can just select this if it's open
523:40 - it's
523:41 - true
523:43 - then we are going to show this div
523:45 - otherwise we return an empty
523:48 - fragment okay so let's starty this div
523:52 - it can be self closing because we're not
523:56 - going to have any um you know any word
524:01 - in between the div and this will have a
524:04 - class name of
524:06 - fixed I need to have a z index of 60
524:10 - because we gave a Model A Z index of 60
524:12 - 61 I want the model to be on top why
524:16 - this deep is below I'm going to give
524:18 - this a top of zero give this a left of
524:21 - zero this is a width of screen a height
524:24 - of
524:25 - screen and give this background so this
524:28 - BG R
524:30 - GBA and here 0
524:33 - z0
524:35 - 0.8 like
524:37 - this all right so I'm going to uh that's
524:40 - all for this um backdrop components and
524:43 - we can make it of it already here so I
524:46 - will just display the backdrop
524:49 - components here like this and it's also
524:53 - going to take this is open which is
524:54 - going to be equal to is rating visible
524:58 - like this so now we come back we should
525:01 - see our backdrop so we see our Dr
525:04 - backdrop show up here and we see our
525:06 - rating model great so let's define our
525:10 - rating model so let's continue
525:14 - here and after this we are going to have
525:17 - another div it is a class name of BG
525:23 - white a width of 96 a pattern of
525:28 - four and rounded LG Shadow LG like
525:34 - this and here we can just have this H2
525:37 - which is going to say um rate your
525:42 - experi
525:47 - and for the class theme I'm going to
525:49 - give this a text XL so an extra large
525:54 - and on dark team I'm going to give this
525:56 - a text Gray
525:59 - 800 a font semi
526:02 - bold a margin bottom of two like
526:07 - this and then after this div this H2 we
526:11 - are going to have another div
526:13 - and this div we give it a margin bottom
526:17 - of
526:18 - four all right so this div is going to
526:20 - have the label and it's also going to
526:22 - have the input so if we save and we come
526:25 - back to our application we see this Tex
526:29 - experience so here we're going to have a
526:34 - label and it's not going to have this
526:36 - HTML 4 the class name is going to be
526:39 - block text SM give this a f
526:43 - medium and a text
526:45 - Gray of 700 like this and we can have
526:50 - the text
526:52 - rating after this label we are going to
526:55 - have this div and the class name is
526:57 - going to be
526:59 - Flex items Center like
527:04 - this and inside this div we are going to
527:06 - map through the different star values
527:09 - because we want to show the star value
527:12 - which is going to be um the rating so
527:16 - here you can have this cost we call Star
527:20 - values and star values is going to be
527:23 - equal to 1 2 3 4 5 like
527:27 - this this star values we are going to
527:31 - map through it so inside here we are
527:35 - going to have our star
527:36 - values map which is going to be our
527:39 - rating value like this and we're going
527:43 - to get each value and we want to return
527:46 - return a
527:53 - button inside this button we are going
527:56 - to show the BS St F like
528:01 - this and because we are in a map we need
528:04 - to give this a
528:05 - key and the key is going to be equal to
528:08 - the value we're just going to use the
528:11 - value as the
528:13 - key and what else we can give this uh
528:18 - button a click event
528:22 - so on
528:25 - click of this
528:28 - button we want to go and and call the
528:33 - this function so here we want to have
528:36 - this function I think we defined it
528:39 - already so set written
528:43 - value we don't have it so we want to set
528:46 - the rating value which is the value that
528:49 - are the Chooser chose for now I'll set
528:52 - this to null we are going to come back
528:54 - to this and let's give this some class
528:58 - name and the class name is going to
529:00 - width of six we're going to give this
529:03 - uh height of six and we have this
529:08 - so we need to use back tick here for the
529:12 - class
529:15 - name like
529:18 - this okay so we're going to update some
529:21 - value based on the rating value now if
529:25 - the rating value so here I'm just going
529:27 - to for now put um I'm just going to take
529:30 - this off so we see if we come back to
529:33 - the
529:34 - browser we should see our rating value
529:36 - update so these TS here so once we click
529:40 - on one of these TS we want to give it a
529:43 - color or something like that so here to
529:46 - keep track of
529:48 - the value which the user is clicking on
529:52 - I'm going to have this Con here call it
529:54 - um written
529:57 - value and then set written value is
530:02 - going to be called to US state and by
530:05 - default it's going to be
530:07 - zero so this is going to need a written
530:11 - value
530:12 - which is of type number and here set
530:16 - written
530:18 - value which is going to be of type
530:20 - dispatch and we're going to dispatch a
530:23 - set State
530:27 - action like this and this is going to
530:30 - dispatch of type
530:32 - number all right so we're going to pass
530:35 - this to this prop now so rating value is
530:39 - going to be rating value and then set
530:42 - written value is going to be equal to
530:44 - set written value so we can save this
530:49 - and now we can bring in these values so
530:52 - the rting value and also the set written
530:57 - value and in here we can now unclick
531:01 - we're going to set the written
531:03 - value to the value not value error to
531:07 - this value so now we are sure we are
531:10 - updating the value we can now update the
531:13 - style and here we're just going to check
531:16 - if the rating
531:19 - value is equal to the value so the
531:22 - current value we are looking at if that
531:25 - is true we are going to give it this
531:27 - text
531:31 - yellow
531:34 - 500 otherwise we will just give it an
531:36 - empty
531:37 - string so this is our check here and if
531:41 - we save this we come over to the
531:46 - browser we don't see anything yet if we
531:49 - click on rate this should
531:51 - update and rather than give nothing by
531:55 - default I'll just give it a
531:58 - text grade
532:01 - 300 so text grade 300 and now if you
532:05 - click on one of these you see the values
532:08 - update
532:10 - accordingly all right so that's what we
532:12 - have going on for that and now after
532:15 - this we are going to have another
532:17 - div and this div we're just going to
532:20 - give it a margin bottom of
532:22 - four and here we're going to have the
532:26 - label and I think the class names are
532:30 - like before so we can just
532:32 - copy these class names and reuse over
532:37 - here and in here we are going to have
532:40 - the text review
532:43 - text like
532:45 - this so this is going to be a text
532:50 - area not template a text area like
532:55 - this and I'm going to get rid of all
532:59 - these properties for
533:01 - now just leave rows and I'll set rows to
533:07 - four okay so this also needs a value and
533:10 - it needs um the unchange to set the
533:14 - value so we can call this um rating text
533:18 - so here in states where did we have the
533:22 - previous so we can call this wrting
533:26 - text and set
533:29 - rating text but by default it's going to
533:32 - be an empty
533:33 - string so here we
533:37 - can duplicate this and ask for the
533:40 - rating text which is going to be of type
533:44 - string and here set rating text which is
533:49 - going to be this type but not a number
533:52 - now it's going to be a
533:53 - string and we can bring in the rating
533:56 - text and the set rating text so here we
534:00 - shouldn't forget to give this component
534:03 - the props so the rating text is going to
534:06 - be called to the rating text and then
534:10 - set rating text is going to be call to
534:12 - set rating text like this so now if we
534:17 - come back
534:19 - here and here so in the text area the
534:23 - value is going to be equal to
534:27 - the wrting
534:30 - text
534:32 - and we also need to
534:35 - unchange we are going to call this
534:39 - function which gets called automatically
534:42 - with the
534:43 - event and we can set rating text to the
534:48 - event. target.
534:54 - value okay so let's style this I'll give
534:57 - you this class name of with
535:01 - full uh PX of two uh py of three border
535:09 - rounded MD and that should be it so here
535:15 - let's save and let's have a quick
535:19 - preview just click on this and we see
535:22 - our text area so that's looking good and
535:25 - after our text area so after this div we
535:29 - are going to have this other
535:31 - div and this div is going to have the
535:33 - class name of flex and justify
535:39 - end like this and here we going to have
535:42 - this
535:43 - button the class name is going to be
535:46 - PX4 py
535:49 - 2 uh PG primary text white and rounded
535:56 - MD so this button is going to have the
535:59 - unclick and this unclick is going to be
536:01 - the review submit Handler we don't have
536:05 - this yet
536:09 - but we can have this review sub MIT
536:12 - Handler and here let's define it so we
536:17 - can Define it somewhere on up here this
536:21 - is going to be called to an async
536:25 - function like
536:27 - this
536:30 - um yeah like this for now we don't do
536:33 - anything what will be coming here and if
536:35 - we over on this we can just copy this so
536:38 - it's a promise that returns void
536:42 - and we can assign it type here so review
536:45 - submit Handler and we can already bring
536:48 - this in like this so here we call this
536:52 - uh review submit
536:54 - Handler and we also want to disable this
536:57 - button if we are submitting the review
537:00 - so disabled is going to be equal
537:03 - to submitting review and this also has
537:07 - to come from the propes why are we
537:10 - having an error because we haven't
537:11 - passed that Pro it's fine so if we come
537:15 - here we can have this other one for
537:17 - submitting review and here is
537:21 - set is submitting review like this which
537:26 - is going to be
537:27 - false okay so here are we expecting the
537:31 - prop so here we should expect the prop
537:34 - so is submitting
537:37 - review which is going to be of type uh
537:44 - Bing like this so here let's pass these
537:48 - props so his submitting review is going
537:50 - to be equal to
537:52 - his um submitting
537:56 - review set is submitting review so did
537:59 - we make a mistake here so this should be
538:04 - um okay we can go with submitting review
538:06 - I just say is submitting since we are
538:08 - working with that
538:10 - already
538:12 - so we'll pass this here and next it
538:14 - needs the review submit Handler which is
538:17 - going to be called to the review submit
538:19 - Handler so everything should be fine and
538:23 - we'll just bring in this is submitting
538:26 - review from the props and we would
538:29 - update this to be is submitting
538:32 - review so inside this button if we have
538:35 - submitting the review is submitting
538:38 - review is true want to show the text of
538:40 - submitting
538:42 - otherwise we will show the text
538:45 - of
538:51 - submit and then we want to have another
538:54 - button and this button is for
538:56 - cancel cancellation of the model so when
539:00 - we want to get rid of the model and this
539:03 - is going to have this class name of ml2
539:09 - PX4 give it a p y of two uh BG gray of
539:15 - 300 give us a text Gray of
539:19 - 700 rounded MD and on Hover I'll give
539:23 - this a BG grade 400 like this and here
539:28 - we will just have the text
539:31 - cancel so for
539:35 - the on
539:37 - click we are going to call our toggle
539:40 - rating
539:42 - model I don't think we have that here so
539:45 - toggle rtin
539:47 - model we are going to call it do we have
539:50 - it no so here we are going to bring this
539:54 - from the props and this is going to be a
539:57 - function that will return nothing so
540:00 - that returns
540:01 - void but here I'm sure we have the
540:03 - toggle written model so this we are now
540:07 - going to pass it as a prop here so to
540:10 - model
540:12 - is going to be called to toggle rating
540:14 - model so if we come back to application
540:18 - and everything um reloads correctly do
540:21 - we have any
540:23 - errors nope so I'm just going to reload
540:27 - our
540:29 - application and it should come
540:31 - up okay
540:33 - so let's wait for it so once we click on
540:38 - rate we see this so we see our cancel
540:40 - button which toles the model and we see
540:43 - this um submit that does nothing for now
540:47 - okay so we have uh created this and if
540:52 - we click on
540:54 - submit so where is the submit
540:59 - button here we come over to our rating
541:02 - model and we click on submit we call
541:05 - submit review Handler so let's log
541:08 - details to be to the console to be sure
541:10 - that we we are getting the details so
541:14 - we're going to look the
541:17 - review the rating value and uh so the
541:22 - rating text and the written value we're
541:25 - going to L this to the
541:28 - console and let's try it out to see if
541:31 - we are getting the values okay so I'm
541:35 - going to choose five
541:37 - star and say
541:39 - hello and click on submit great so we
541:43 - are currently getting this value here
541:47 - great and you see our application works
541:50 - as fine also on mobile and on desktop
541:55 - all right so next we are going
541:59 - to create our API to be able to create
542:05 - this review okay so to create this
542:09 - review we are going to come to our API
542:13 - folder and in here where we have users
542:16 - um the user route. TS we already have
542:21 - this get to get user data now we want to
542:24 - create a review that belongs to a user
542:28 - so we're going to export this async
542:31 - function and this function we can call
542:33 - it post it's going to be called with the
542:35 - request which is of type
542:39 - request and is also going to be called
542:42 - with the response which is of type
542:46 - response so again we are going to get
542:48 - our session I think we have done this
542:50 - here great so here we are just going to
542:54 - copy these and use this here so we get
542:58 - our session and then we check if there's
543:00 - no session we return return like that so
543:04 - we are going to request some properties
543:06 - from the request Json so here we need to
543:10 - await
543:11 - request.
543:13 - Json and what do we need to create a
543:15 - review we need a room ID we need the
543:20 - review text and we need a written value
543:25 - so once again we can just quickly take a
543:29 - look at our schemas and here our review
543:33 - so you see this is of
543:35 - type um has a name of review and it
543:39 - needs this user ID the hotel room ID the
543:43 - review text and the user rating so it
543:46 - needs this and we're going to get the
543:47 - user ID from our session okay so now we
543:52 - have all of these we can go on
543:55 - to get the user ID so Curr user ID is
543:59 - going to be equal to
544:02 - session do
544:06 - user do
544:09 - ID so this gives us the user ID you can
544:12 - go to apply validation you know for all
544:15 - of these values but just continue I'm
544:18 - sure is pretty straightforward to you
544:22 - know apply some validation we can just
544:24 - copy this and use this here so we can
544:28 - say if there is no you room ID or if
544:32 - there is no review text or if there is
544:36 - no rating value we can go and return
544:40 - return this text so all
544:45 - fields are
544:51 - required like this and with a status of
544:56 - 400 so all of these and now we have our
544:59 - user
545:00 - ID great so let's have our try catch
545:03 - block and before we create the review we
545:05 - want to check first I think I should
545:08 - just handle the error case I'll say this
545:10 - error is of typee
545:12 - any and I'll just cons that log the
545:15 - error so error
545:18 - updating and cons. log the error like
545:22 - this and here how return a new not to
545:28 - try return return a new next
545:31 - response which will say um
545:34 - unable so
545:37 - creates
545:39 - review
545:41 - and give this a status of
545:47 - 400 okay so let's have have all Tri
545:50 - block the first thing we want to do we
545:52 - want to check so check
545:56 - if um a review already exist so I want
546:00 - to check if a user has already left a
546:03 - review on that room so check if already
546:09 - exist all right I need to check this we
546:12 - we need to create um a
546:15 - function in our API folder that is in
546:19 - our lebs sanity TS so in our
546:23 - API we have these two update hotel room
546:27 - from previous we have this to get user
546:29 - bookings to get user
546:31 - data we are going to export an asnc
546:37 - function and then we can call this check
546:42 - VI
546:45 - exist like
546:56 - this and what do we need we need a user
546:59 - ID which is going to be of type
547:02 - string and we also need a hotel room ID
547:07 - which is going to be of type
547:09 - string so so in here we can also say
547:12 - this um is going to return a
547:15 - premise that is going to resolve to null
547:19 - or it can resolve to an object where we
547:22 - have the underscore ID property which is
547:25 - going to be of type
547:29 - string okay so for now we are not
547:31 - returning anything that's why we're
547:33 - having errors okay so this check is
547:37 - going to return null or it can return
547:39 - this object with the
547:41 - found
547:43 - um review so let's have our
547:48 - query and this is going to be equal to
547:51 - we can make it of back tick and we use
547:55 - St like this underscore type is going to
547:58 - be equal to
548:00 - review
548:03 - and the user doore R is going to be
548:07 - equal to now we can use param to inject
548:10 - the user
548:13 - ID and we have here so for the hotel
548:16 - room doore R this going to be equal to
548:20 - the ReUse perm again to have the hotel
548:24 - room ID and here we take the first
548:27 - matching element and here we can request
548:29 - for theore ID property so this is our
548:32 - query where the type is equal to review
548:35 - the user ref is going to be the user ID
548:38 - and the hotel room ref is going be the
548:41 - hotel room
548:42 - ID okay so we have our query we can also
548:45 - have our
548:46 - params which is going to be equal to
548:48 - this user ID and hotel room ID so here
548:53 - we're going to have our user ID which
548:55 - will get from this
548:58 - function and also our hot
549:01 - ID so we can get our results so con
549:06 - results and result is going to be equal
549:09 - to AWA our sanity client and we call
549:14 - fetch we get the
549:16 - query not
549:18 - queries query and we pass our pars here
549:23 - so this results for now we S type any
549:26 - but our function knows is going to be of
549:29 - type null
549:32 - or an object to the ID so if result is
549:35 - true we want to return return the result
549:37 - which is going to be this ID object
549:41 - otherwise you know we're just going to
549:43 - return
549:44 - null okay so now we have this function
549:47 - to perform the check if we come back to
549:50 - our route we can now check if uh a user
549:53 - already exist so we can call this
549:56 - already exist and this is going to be
549:58 - equal to await check review exist and
550:03 - here we pass the user
550:05 - ID and we also pass the room ID like
550:09 - this
550:11 - okay so what are we going to do next
550:13 - we're going to L to the console already
550:16 - exist to be sure everything is working
550:19 - fine at least up until this
550:21 - point so in our page. TSX here we're no
550:25 - longer going to be logging these values
550:28 - to the console we are going to have this
550:30 - check and check if there is no review
550:34 - text like this where is
550:37 - it uh rating text
550:43 - so if there is no written text.
550:47 - stream do length
550:50 - or there is no rate um ritten
550:56 - value like this in that case we are
550:58 - going to wron a
551:02 - toast do error and the error is going to
551:05 - say please provide uh review or WR test
551:12 - X and a string and the
551:18 - rating okay so why are we having this
551:21 - error review submit
551:24 - Handler okay because we are not string
551:27 - undefined is notable to type void okay
551:32 - it's because of the return type okay
551:35 - that's what rning so we are rning a
551:38 - string and that's why it is
551:41 - um complaining if we have on this now it
551:45 - can return string or undefined so copy
551:48 - this and if we come back to our rating
551:51 - model I'm just going to update this
551:54 - right than say return void we'll say
551:57 - return return promise or on the find
552:00 - like that okay so now we also going to
552:03 - check if there is no room
552:06 - ID we also want to toast an error so so
552:10 - we're going to copy this and tost an
552:13 - error if the user doesn't or if in some
552:16 - case there is no room ID we can just
552:18 - say ID not provided like this and now we
552:24 - sure we have our properties we can have
552:26 - uh try
552:29 - catch okay so in case of any error we
552:32 - can just log it to the
552:34 - console and have it toast so
552:38 - toast. and say
552:41 - you
552:45 - failed like this and in the tri block we
552:48 - can get
552:51 - our we can get our
552:54 - data by
552:56 - ating xs.
553:00 - poost and this is going to go to/
553:03 - API slash
553:05 - users like this and it needs the
553:09 - data so it needs the
553:13 - data so let's verify if we come here
553:16 - what do we need we need the room
553:20 - ID the review text and the written value
553:24 - so copy
553:25 - this and here have the review
553:29 - text and we are going to have the
553:32 - written
553:34 - value I would also paste this in here
553:38 - and we also need the
553:41 - room
553:42 - ID and I will paste it in
553:45 - here we're having a um because this is
553:49 - rating test so revie test is going to be
553:53 - rating text like
553:56 - this okay so here we just going to log
553:59 - our data to the
554:00 - console and we going to toast do
554:04 - success let's say review
554:08 - submitted and and we need to do some
554:11 - clean up so in the finally
554:13 - block we are going to set a
554:18 - review where is it is it set our rating
554:23 - text I'm going to set it to an empty
554:25 - string to reset the values and then
554:28 - we're going to set written
554:32 - value to
554:34 - null we're also going to we have an
554:37 - error I'll will come back to that also
554:40 - set the room ID to
554:44 - n and also need to set the
554:48 - is set
554:50 - is is submitting review to
554:56 - false and what else we're going to set
554:59 - our rate close
555:01 - our backdrop and also uh model so we
555:06 - will set this to false like this so
555:09 - while having an error in set ready model
555:12 - because this can be of type number or
555:17 - no the error is gone but we have new
555:20 - errors here because you know if we hover
555:25 - on
555:26 - this so this can be number or null and
555:30 - this same can be number or null so let's
555:33 - quickly update here where is
555:36 - it so set written
555:38 - value can be number or null and written
555:42 - value can be number or
555:45 - null okay so now we can come back to our
555:48 - route and if we send this I just want to
555:50 - be sure that already exist is been
555:53 - printed so now remember this is going to
555:55 - be called on the server side so let's
556:00 - look out for for this on the server so
556:03 - I'm going to save
556:06 - this and I'm going to try to submit a
556:09 - review view I'll click on this and we
556:13 - already have this from
556:15 - previous and I'll just say hello again
556:18 - and
556:19 - submit and if we come here you see the
556:24 - review failed and the you know we see
556:27 - here the form got reset and everything
556:29 - which works fine we have an error which
556:31 - is okay but now you see already exist is
556:34 - null so you see the user hasn't left uh
556:38 - a rating on this great so since already
556:42 - exist is there I will just get rid of
556:44 - this and we show our logic is working we
556:47 - can have data so let data like this and
556:51 - now we want to be sure so if already
556:53 - exist is
556:54 - truthy we are going to do something so
556:57 - we want to go on in that case and update
556:59 - a review otherwise we want to create a
557:02 - new
557:03 - review so here we don't have these
557:06 - functions to update a review and to also
557:09 - create create a review now we are going
557:11 - to create them so backing our leaves
557:15 - api. TS here so after check review exist
557:20 - we're going to export another con to
557:23 - update review and this is going to be
557:26 - equal to a
557:28 - sync we're going to have
557:31 - the properties that we are going to need
557:33 - here so the
557:38 - review
557:40 - the review ID so also going to have the
557:44 - review
557:46 - text and we also need a user rating like
557:51 - this and this is going to be of type so
557:54 - a type that we don't have yet but we can
557:57 - already call this update um
558:01 - review
558:03 - dto so we don't have this type yet let's
558:08 - go on and Define it but before before we
558:10 - do let's complete our function
558:13 - body so let's define this update review
558:17 - dto here in our
558:21 - models we would have this review.
558:24 - TS and here I'm going to export this
558:28 - type and this is going to be update
558:31 - review
558:33 - dto this is going to be C to object we
558:36 - have the review
558:37 - ID which is going to be type
558:42 - string we also need a review
558:47 - text which is also going to be of type
558:49 - string and we need a user rating which
558:53 - is going to be of type number so now we
558:56 - are here let's also export on type
558:59 - create review
559:02 - D this is equal to this object so we
559:05 - have the hotel room
559:08 - ID this of type type
559:11 - string we need to review
559:14 - text which is also of type string the
559:19 - user rating which is of type
559:22 - number and we also need the user
559:25 - ID which is of type string so now we
559:30 - have all these values we can come back
559:33 - here and we can just
559:36 - import this from our models
559:40 - great so now we have these values let's
559:42 - have our mutation con
559:45 - mutation and mutation is going to be
559:47 - this object and in here we're going to
559:50 - have
559:51 - mutations which is an array of objects
559:55 - and here we want to have a patch
559:58 - operation and this patch is an object
560:00 - where we provide the ID and the ID needs
560:03 - to be the review
560:06 - ID and we're going to
560:08 - set the text to be the review
560:14 - text and we are also going to set the
560:17 - user rating which is going to be the
560:21 - user um rating so we don't actually need
560:24 - this like this okay so this is our
560:28 - mutation and I am just going to copy one
560:32 - of
560:33 - these uh where do we yeah this create
560:36 - booking I'll just copy one of these that
560:39 - we have here uh we collapse this and
560:43 - here just after this
560:45 - mutation I'm going to paste it in here
560:47 - so we have our x. post where we target
560:51 - our Endo every other Thing Remains the
560:53 - Same and we go on to with on our data so
560:57 - this is for you know updating every view
561:01 - so let's also have for
561:03 - creating um a review so here I'm going
561:08 - to export
561:10 - AC call this create review which is
561:14 - going to be equal to this async
561:18 - function like this which is going to be
561:21 - of type uh create review
561:26 - dto and we can have our function body so
561:30 - here we're going to get the hot room ID
561:33 - the review text the user ID and the user
561:37 - rating so all these typ type should
561:40 - match here so if we come to our
561:43 - schema and in our review schema it needs
561:47 - this so the
561:50 - user and if we come here we are going to
561:53 - have it as
561:56 - um um user okay where the ID so the ref
562:00 - is going to be pointing where is it the
562:03 - ref is going to be pointing to this to
562:06 - the user
562:07 - ID and same for for the hotel room which
562:11 - is of type reference and here we are
562:13 - going to have this um text so it's not
562:17 - going to be review text it's going to be
562:18 - of this name text and this is going to
562:21 - be of the name um user rating okay so we
562:26 - should make sure here we are using this
562:29 - um and this should be create
562:33 - review this should be user rating just
562:36 - as here and we're going to use text
562:39 - okay so let's create this we're going to
562:42 - have a
562:44 - mutation and mutation in this object so
562:46 - we have
562:48 - mutations mutations is an array of
562:50 - object and here we want to create um a
562:53 - create mutation which takes in thisor
562:57 - type and the type is going to be
563:00 - review and it needs the user which is
563:03 - going to have this underscore
563:06 - type which is of type reference
563:09 - and it needs the ref so where is it
563:11 - pointing to or what is it pointing to
563:13 - it's pointing to this user ID and after
563:17 - this user we also need a hotel
563:22 - room and the hotel room is going to be
563:24 - this object where we have the underscore
563:28 - type and the type is going to
563:31 - be reference like this and we also need
563:35 - the underscore ref and this is going to
563:37 - be pointing to the hotel room ID and
563:41 - after this we'll pass the user
563:46 - rating and we're going to pass the text
563:49 - and the text is going to be the
563:52 - review text like this so we have our
563:55 - mutation and we are just going to use
563:57 - this thing so this Remains the Same so
564:01 - after our
564:03 - mutation just here we are going to call
564:07 - this and return our data so so let's
564:09 - save this and then let's come back to
564:12 - our route and in here so if it already
564:15 - exist then we want to update we're going
564:17 - to assign data to be equal to our weight
564:20 - and then we call update
564:23 - review and update review need this
564:26 - object where will pass the review
564:30 - ID and this review ID is going to be
564:33 - already exist doore
564:36 - ID we are also going to pass the review
564:40 - text and we also need a user
564:43 - rating so this user rating what did we
564:46 - call
564:48 - it not get
564:51 - here written text do we have written
564:54 - text so written value like this so user
564:59 - rating is going to be written
565:01 - value okay but if it doesn't exist then
565:05 - we need to create we're going to assign
565:07 - data to await create
565:11 - review and create review we take this
565:14 - object so we have the hotel room ID
565:17 - which is going to be the room ID like
565:21 - this so this room ID is coming from our
565:25 - query parameter and we need a review
565:30 - text we need the user ID which is going
565:33 - from our session and the user rating
565:36 - which is a rating value you like
565:41 - this so after all of this we shouldn't
565:44 - forget
565:45 - to you know return return a response so
565:49 - we're going to return return uh next
565:51 - response do
565:53 - Json and this is going to be the
565:57 - data and we can have a status of
566:01 - 200 and the status text
566:06 - of successful like this
566:09 - okay so let's hit this and see if
566:13 - everything is working fine up until now
566:16 - so let's try to create this
566:20 - review okay so I will just um reload the
566:24 - application and I'll reload uh sanity
566:28 - studio so our review you see we don't
566:31 - have any review yet so we are going to
566:34 - try to create one review so in here
566:39 - I'm going to click on rate and let's say
566:42 - give this three star and say um normal
566:50 - experience and I submit so let's see
566:53 - what happens I don't see the text it's
566:55 - is submitting but we get review
566:57 - submitted so let's quickly take a look
567:00 - at that logic so here where we have our
567:05 - page um the we set is submitting to true
567:08 - we done
567:10 - so here we need to set is submitting to
567:14 - True okay so maybe somewhere here set is
567:18 - submit review to true and here we should
567:22 - set it to false okay so that will fix it
567:25 - for next time and we come back
567:28 - here and you know we left a review let's
567:31 - come back here and see if this updates
567:35 - great so we see this here and let's see
567:38 - if it's three St and everything that we
567:41 - defined so let's wait for it to load
567:47 - up okay so it's actually taking time I
567:51 - don't know okay so this is it uh this is
567:55 - the user this is the hotel room and this
567:57 - is our review text and we give it a
567:59 - three star rating so this is working
568:02 - fine as we expect so now let's rate
568:05 - again and see if our update is working
568:08 - I'll give this five star and say great
568:11 - like this and if I submit now we see
568:14 - it's submitting and if it's done it's
568:17 - cleared and if we come here we see great
568:19 - and we see five star so fantastic we are
568:22 - now able to write a review and if we
568:25 - come here to this um to the room so this
568:30 - room that the user just left a rating on
568:33 - let's see if we are able
568:37 - to um obviously we cannot see the review
568:41 - because we haven't wired up that
568:44 - connection but now we should be able to
568:46 - fetch the review so let's work on that
568:50 - I'm going to remove all of these so that
568:52 - I have some space and
568:54 - just easy for my eyes to know where I am
568:58 - looking at I'm just going to collapse
569:00 - all of these and next we are going to be
569:04 - working in our web our rooms this log
569:08 - and the page.
569:11 - TS so here what do we need we have this
569:16 - um reviews component so we actually need
569:19 - to work in that um review component so
569:23 - I'm going to create a new components so
569:27 - in the components folder I'm going to
569:29 - call this room
569:31 - review like this and I'll create this
569:37 - file so let's wire this up now I'm going
569:41 - to get rid of
569:44 - this and this is going to be of type FC
569:47 - because we are going to request for prop
569:50 - and that prop is going to be single we
569:52 - want to fetch the data the review that
569:56 - belongs to a particular room so here
569:58 - we're going to have room ID which is of
570:00 - type
570:01 - string and here we are going to maybe
570:04 - just D structure the room ID from the
570:07 - props like this so we are going to use
570:11 - our ex to fetch our room
570:15 - review so we can have this Con fetch
570:19 - room reviews and this is going to be
570:21 - equal to this
570:23 - async
570:27 - function like
570:31 - this and in here we're going to get our
570:34 - data from ating X
570:42 - dog and we are going to be going to SL
570:45 - API slash room review we don't have this
570:48 - yet we're going to create this and here
570:51 - slash Let's uh pass the room ID and once
570:56 - we're done we return data so here we are
571:00 - going to return data and data will be
571:03 - coming from
571:06 - here all right so after this we're going
571:09 - to be fetching our data making use of
571:12 - the US s SW Arrow
571:16 - hook and this is going to need a key so
571:19 - the key will be/ API SLR
571:22 - Infuse and now we're going to pass the
571:25 - fetch room
571:27 - reviews so here we're going to get data
571:30 - which we can rename
571:31 - to room
571:36 - reviews and also error and also is
571:39 - loading like
571:41 - this so for all these properties I will
571:44 - copy what we had in our web rooms in
571:48 - know room here I will copy
571:50 - this and make use of this here so if
571:54 - there's an error we try error if type of
571:57 - room
571:58 - reviews is undefined and it's not
572:01 - loading or also through this
572:04 - error okay so we haven't set up this API
572:08 - end points and then here we can cons
572:11 - that log data we don't have any data we
572:15 - actually named it um room
572:18 - reviews so here we log to the console so
572:22 - this is going to fail because we haven't
572:23 - set up this Endo so let's set it up now
572:30 - here in
572:32 - our API
572:35 - folder I'm going to create a new folder
572:39 - and this folder will we call room
572:42 - reviews so this room reviews to match
572:45 - with this not this sorry so to match
572:49 - with this is actually room reviews so
572:52 - here we shouldn't forget our
572:54 - s okay so here we are going to have our
572:59 - route. TS file and here is going to be
573:02 - pretty much straightforward we're going
573:04 - to have this async
573:06 - function we call it get
573:08 - and
573:12 - here we are going to have our request
573:16 - which is going to be of
573:18 - type
573:21 - request and we want to take the ID from
573:24 - the
573:25 - param okay so I want to take the ID from
573:27 - the param and to do that first this room
573:31 - review we need to have this uh ID
573:36 - here and have the route defined inside
573:40 - here like this so we're going to have
573:42 - the route inside this
573:45 - ID okay so I'll take this off and here
573:49 - we can have
573:52 - parms I think T script will comp play
573:54 - but we can say this is of type object so
573:56 - would have PMS and BMS is also going to
573:59 - be an object so have ID and ID is going
574:02 - to be of type
574:04 - string so now in here we can have a room
574:08 - ID which is going to be equal to params
574:12 - do
574:14 - ID and we can have our TR catch
574:18 - block and in case of error just L it to
574:21 - the
574:22 - console and say get
574:26 - in revie
574:30 - fi and here have the
574:36 - error and we a new next response not
574:41 - next request
574:42 - next
574:44 - response say
574:46 - unable to
574:48 - fetch and with State status of 400 like
574:54 - this so now in our Tri block we want to
574:57 - call a function to get a review so we
575:00 - can have here con
575:04 - reviews andews is going to be a function
575:06 - we are going to Define in our sity
575:09 - studio and we're going to return our
575:13 - next response. Json we return return the
575:18 - reviews can call it room
575:24 - reviews so here we are going to return
575:26 - return our room reviews and here we can
575:30 - set the status of
575:32 - 200 and we can also set the status text
575:37 - of let's
575:38 - um
575:41 - successful okay so let's go on to Define
575:44 - this function to get um the room review
575:49 - and if we come over to our leavs and in
575:53 - our api. TS it's going to be pretty much
575:57 - straightforward we're going to have this
576:00 - um export this async
576:04 - function we can call it get uh
576:09 - room
576:11 - reviews and this is going to take in the
576:14 - room
576:17 - ID which is of type
576:21 - string and
576:24 - here we can have a
576:27 - result and our result is going to be AWA
576:30 - our sanity client.
576:35 - fretch and we don't have the review type
576:37 - yet
576:38 - I'll come back to that in a second and
576:41 - here we are going to pass the
576:44 - query and we don't also have the query
576:47 - so we need to define the query and we
576:50 - also need to define
576:52 - the we also need to define the type so
576:56 - let's come over to our queries so our
576:59 - sanity queries
577:01 - here and we are going to export con
577:07 - get
577:11 - room
577:13 - reviews and this is going to be called
577:15 - to this Gro query we have our backtick
577:19 - and here we have the star where we set
577:23 - the called type so the type is going to
577:26 - be equal to
577:29 - review
577:33 - and the
577:36 - hotel room room doore R is
577:42 - the and here we
577:44 - have our room ID like this and in here
577:49 - we can take theore created
577:52 - at you can take the
577:56 - ID the
577:59 - text and the user who created this
578:02 - review and the user we just need a name
578:05 - you just need a name to display uh in
578:08 - our UI and after this we just need the
578:11 - user rating so the value so this is what
578:15 - we need and if we come back
578:17 - to our apis. Ts for the query we can
578:22 - have our queries dot um since we forgot
578:25 - to add query so get room
578:28 - reviews query like
578:32 - this so I will save this and here I'm
578:35 - going to have our reviews. get room
578:39 - reviews
578:40 - query and after that it's going to need
578:43 - this object for par so if we come back
578:47 - here you see we are having this
578:50 - par where is it yeah for the room ID
578:55 - okay so here we are going to pass the
578:58 - room ID as a param and after that we are
579:02 - going to pass another object for cache
579:05 - and here we say no cash like like this
579:09 - and once we're done we should go and
579:12 - return return the results so very much
579:16 - straightforward but for this we haven't
579:18 - defined the type of review so here we
579:23 - come to our models so in our models
579:26 - folder and here for our
579:30 - review we're going to export another
579:33 - type and this is going to be a type
579:36 - review and the you would have a text
579:39 - which is of type
579:40 - string we also have a user which is an
579:44 - object with a name property and the name
579:47 - is going to be a string we'll need a
579:50 - user rating the user rating is going to
579:53 - be a number we're going to need the
579:56 - underscore created at which is going to
579:59 - be of type dates and we need the
580:03 - underscore ID that's the review
580:05 - ID which is going to to be of type
580:09 - string so here we are going to say this
580:13 - is going
580:14 - to return like this an array of
580:20 - rating and we can come back to our
580:23 - route.
580:26 - TS so in our route here where we have
580:29 - our room
580:31 - reviews we are going to
580:33 - await uh get room reviews that's we just
580:38 - defined now in our
580:39 - lebs and it needs the room ID we just
580:43 - pass in the room
580:46 - ID okay so we are fetching the review so
580:51 - now we should see data because if we
580:53 - come to/ API SL room reviews SL ID we
580:57 - are going to be hitting this end point
580:59 - so SL API um room
581:03 - reviews and you know the ID in here we
581:07 - are going to to hit this
581:09 - route and here is going to get the
581:11 - params so the room ID and it's going to
581:14 - pass it to our get room
581:16 - reviews it receives the ID here and it
581:20 - passes it here as a par and we have no
581:24 - cash here so if you feel if you visit
581:27 - this get room review sare you see here
581:29 - we have the room ID so now if we come
581:33 - back to our
581:35 - application and I would open up the
581:38 - browser we see this object and if we
581:42 - open up this object we see we have
581:45 - results and this so we need to fetch
581:48 - data so are we loging this to the
581:51 - console I'm just going to reload and why
581:53 - does
581:54 - reloading I will come back to the room
581:57 - review and I don't expect it to work and
582:01 - why don't I expect it to work we are not
582:04 - mounting this in our page so if we come
582:07 - over to
582:09 - our web our rooms slog page we are not
582:14 - mounting it here so we need to have our
582:17 - room review
582:20 - components and now it should work what
582:23 - does it need it needs a room ID and the
582:26 - room ID is going to be the room no let's
582:31 - see here so let's see here so we are
582:35 - fetching the data from the room and here
582:38 - we'll just give it the room ID so room
582:42 - doore ID property so now we we save this
582:47 - and we come back to
582:48 - application we see an empt
582:52 - array okay so we see Mt let's just um
582:57 - let's go on to reload this to be sure
583:00 - you know everything works
583:03 - fine because we saw in our sanity Studio
583:07 - that this room you know the deluxe suit
583:10 - that's if the room if that's the room we
583:12 - are looking at let's verify yeah so we
583:15 - verify and we see our review so with is
583:20 - the user so now we are sure we are
583:23 - fetching our review we just need to
583:26 - display it here okay so what are we
583:30 - going to do we are displaying it
583:35 - here we have the text room review and
583:38 - that's because in the review component
583:41 - that's what we're showing room review so
583:44 - we need to go on and map okay so what
583:47 - we're going to do here I'm going to
583:50 - return fragment like this and in here
583:54 - I'm going to say if
583:57 - um room reviews so if this is true we
584:01 - going to have our room
584:05 - reviews and we're going to map through
584:08 - the
584:08 - review and this is going to give us each
584:14 - review and we are going to return
584:19 - return we are going to return this
584:23 - div okay so whatever is this um it has
584:26 - type
584:27 - any now if we over here we can come over
584:32 - here and say this is going to give
584:34 - us an array of room so a room area like
584:39 - this and I will just bring this down so
584:42 - if we come back here it should be fine
584:45 - yeah so it's fine and we can just need
584:47 - we just need to pass a
584:49 - key and we can say the key is going to
584:51 - be the review doore
584:56 - ID so let's stle this div let's give it
585:00 - some class names we're going to give
585:02 - this a
585:03 - BG
585:05 - um a BG G gray of let's say
585:10 - 100 I'm also going to give this on dark
585:13 - mode uh PG gray of
585:17 - 900 just give us some padding and lastly
585:21 - rounded LG like this and inside this div
585:25 - we have a H2 where we display the
585:29 - username so we can style it and say this
585:32 - is going to be font semi
585:35 - bold and mag bottom of
585:38 - two and display Flex like
585:43 - this so here we can have this
585:49 - um paragraph So having a paragraph
585:53 - inside the H2 I'll change this to a div
585:57 - and inside this paragraph I'm going to
585:59 - display
586:00 - the review do
586:05 - name like this
586:08 - um no so it's meant to be the
586:11 - username so why are we having this so
586:15 - you do user that name so what type did
586:18 - we set here we set room sorry it wasn't
586:22 - meant to be room it was meant to
586:25 - be
586:28 - review okay so it was meant to be review
586:31 - and now everything should be fine yep
586:35 - everything is fine and after this we're
586:37 - going to have another
586:39 - div and here we want to display the
586:42 - actual rating so
586:45 - here we're going to get this margin left
586:47 - of
586:48 - four
586:50 - Flex item
586:52 - Center text the sh
586:57 - lights um
586:59 - text sh lights and text LG like this and
587:05 - here we want to display the user rating
587:08 - we're going to display that in uh
587:10 - another component which we are going to
587:12 - create but for now we can just display
587:15 - the outright rating and after this div
587:18 - we are going to have this div and here
587:22 - we are just going to display the review
587:26 - text so now let's save this and let's
587:29 - come back to
587:31 - the
587:32 - browser and over here we see this so we
587:37 - see the username and we see the rating
587:40 - number okay so we don't see the text I
587:43 - think it's actually loading up so we can
587:47 - reload this and we should be
587:49 - seeing um the user
587:52 - text so we can just wait for this to
587:55 - load and here we should see the user
587:58 - text we don't see the user text so why
588:02 - don't we see the user text I'm just
588:04 - going to log this
588:08 - um console. log
588:10 - this room reviews I just log it to the
588:14 - console so that we will be sure of what
588:17 - property we used so this we sted it as
588:22 - um let's see so
588:24 - review
588:27 - dot text so this
588:30 - isn't this is text so we have an error
588:34 - here okay and did we what did we use
588:37 - here so we use if we inspect
588:43 - this so this is text okay so that's why
588:47 - we are having the issue to fix this I
588:50 - don't know where we made this issue
588:53 - where we had that typo maybe you noticed
588:55 - I will just search for it here and this
588:58 - should help so here we made a mistake
589:01 - this should be
589:04 - text and now we save it we should see
589:07 - the
589:09 - user we should see the user text I'm
589:12 - actually going to close all to have more
589:16 - room and this time around great we see
589:19 - the text which is also great so let's
589:22 - have this review component the rating
589:26 - components and if we come back to
589:29 - our just leave this open if we come back
589:33 - to our where is it leaves no our
589:37 - component we can have this
589:40 - rating and in here we can have this
589:42 - rating. TSX
589:45 - file okay so I will rename
589:50 - this and here we can have our react
589:55 - components I will get rid of this so
589:59 - This react component we'll need some
590:01 - props so I say this is of type
590:03 - FC and the prop is going to need
590:08 - even though is one you can still Define
590:10 - it here so type props is going to be
590:13 - this object so we take
590:15 - rating and rating is of type number so
590:18 - here we can bring in props and we can D
590:21 - structure rating like
590:24 - this and we need to know when to show a
590:28 - half star and when to show a fulla okay
590:33 - so before we return return we actually
590:35 - going to return return
590:37 - empty
590:38 - fragment here we are going to have this
590:41 - full
590:45 - Stars
590:48 - constants uh and this is going to be
590:50 - called to math.
590:53 - FL and rting like
590:57 - this and here we can have the
591:00 - decimal part this decimal part is going
591:04 - to be the rating we get minus full star
591:07 - so in casee there's any you know
591:09 - remainder so here we can have our full
591:12 - star
591:14 - elements and this is going to be an
591:19 - array so this array we are going to have
591:21 - our full stars and we want to fill it so
591:25 - what are we going to fill it with we're
591:26 - going to fill it with um a component so
591:30 - fa
591:31 - star where is it f star like this we
591:36 - going to import
591:38 - that so now we have our full
591:41 - element here I'm just going to render it
591:45 - so here full star
591:49 - elements like that and we can already
591:52 - have
591:53 - a half star
591:58 - elements and this is going to be equal
592:01 - to
592:02 - null and we can check if decimal if
592:07 - decimal part is greater than
592:10 - zero then our halfer element is no
592:13 - longer going to be n it's going to be
592:16 - our fa star half like
592:20 - this and here after this we are going to
592:24 - render
592:26 - uh half star element just in here all
592:31 - right so let's save this and now we're
592:34 - going to use this rating in uh room
592:37 - review component here where we just have
592:40 - this review. user rating we are going to
592:44 - have our
592:46 - own rating component and here we're
592:50 - going to pass the rating which is going
592:52 - to be equal to
592:54 - review dot user rating so now if we save
592:58 - this and we come back we should see five
593:00 - stars
593:01 - here so we just wait for this and we
593:05 - should see five Stars great so we see
593:09 - our five stars and everything is looking
593:13 - good both on our white and our dark team
593:16 - so this is the functionality we can go
593:19 - on to notbook this hotel and everything
593:23 - is working as expected and if we come
593:26 - back here and let's say we want to
593:29 - update
593:31 - the we want to update the review and
593:34 - actually this is quite loud why is it
593:37 - that big if we come back to
593:40 - the web users and page so where is it we
593:46 - have this and this should be 28 looking
593:51 - too big and there should be some padding
593:54 - button here so we save this and we come
593:58 - back we have our space and this is now
594:01 - little smaller so if we try to rate the
594:04 - room I'll just switch back to the light
594:07 - team and let's say we go back to two and
594:10 - then we say not so
594:12 - great and we click on submit it
594:16 - submits and once we come back to our
594:20 - room we should see this update
594:23 - automatically so not so great and we see
594:25 - this so that's it for this um
594:29 - functionality so this is the application
594:32 - we're building and congratulations if
594:35 - you've made it th far and now with this
594:38 - time we can go on to build to publish
594:41 - our application to the Internet so that
594:43 - we can share with our friends so far we
594:45 - have been working on our local machine
594:48 - on Local Host 3000 so let's go and
594:52 - publish our application and to do this
594:55 - I'm going to quate our terminal and we
594:57 - need to initialize git in our project so
595:01 - here let's just open this up we need to
595:04 - initialize get in our project we do that
595:06 - making of git in it so now git is
595:09 - initialized in our project and you see
595:12 - over here we have 76 changes okay but
595:15 - you see our EnV is not grade out the
595:18 - cach is grade out node modules this is
595:20 - grade out we want to also grade out gr
595:23 - out our EnV and that is or that means so
595:26 - that git is not tracking this file so to
595:29 - do that we can come to our G ignore and
595:32 - just somewhere here you can add en EnV
595:35 - like this and Save
595:37 - so take a look here you see that EnV is
595:39 - now grade out and git will not be
595:42 - tracking these files for changes and
595:44 - then we will not have all these our
595:46 - secret code pushed out all right so
595:49 - without out of the way let's configure
595:52 - our email so get config user. email I
595:56 - will put my email address
595:59 - here and get
596:03 - config user.name and and I will put my
596:08 - username okay so with this next we are
596:11 - going to add everything to staging so
596:14 - get add and Dot means add
596:17 - everything okay and after we need to
596:20 - commit our changes with take commit
596:22 - message and I'll just call this final
596:26 - build like this and now you see all our
596:30 - code file has been committed now we want
596:32 - to push this over to GitHub and to do
596:35 - that you see this doesn't mean anything
596:37 - actually if we reload you see our server
596:40 - is actually shut down we need to create
596:43 - uh new repository so here I will click
596:46 - on repositories like this and I'll click
596:50 - on new to create a new repo and I'll
596:52 - call this
596:54 - hotel management like this I'll make
596:58 - this public and
597:00 - create okay so once this is created we
597:03 - can come here so we have an already
597:05 - existing in repo from the command line
597:08 - we just need to get remote ad and push
597:11 - our changes so this we have done get in
597:14 - it get add but we added all so we added
597:17 - all our files we committed and this is
597:20 - where we at now and then we
597:22 - push so I'm going to come back here and
597:25 - paste this in so get remote add origin
597:29 - and then get push
597:31 - origin Master like this it access for my
597:35 - password I'll provide my password and
597:38 - this should push all our files to
597:42 - GitHub so once this is done if we come
597:45 - over to
597:47 - GitHub and we reload we should see all
597:50 - our files here all right we don't see
597:53 - yet so it's still right in and once it
597:57 - is done we should see all our files so
598:00 - it's done and now if we reload this we
598:04 - should see our file
598:06 - great now we have this we need to come
598:09 - over to Vel and here to go to log in or
598:13 - create a new project a new Vel um no
598:18 - sign up and here I'll click on add new I
598:21 - want to add a new project and I want to
598:24 - import this project so here you already
598:27 - see the project here if you don't see it
598:30 - you can configure Vel to sech for the
598:34 - product so here I'm just going to click
598:36 - on import I'll leave the name as
598:39 - theault and let's see what do we have
598:42 - here um do we have nextjs I would just
598:45 - choose
598:45 - nextjs as a framework and here I need to
598:49 - add environment variables so I would
598:51 - just come
598:53 - here and in the EnV I will copy
598:57 - everything we have here so I will just
599:00 - copy everything we have here so from
599:03 - here to here like this and if you copy
599:07 - this and you come back here and you just
599:09 - paste it here everything has been added
599:13 - automatically so that's great and next
599:15 - you can just click on deploy please take
599:19 - um a note of this stripe web hook okay
599:21 - because this is the this is the one we
599:25 - use for development and when we add this
599:28 - to our stripe we're going to get a new
599:29 - one so we need to come back and update
599:32 - but that's fine we can already go on to
599:35 - deploy our application and now you see
599:37 - our application is building and if you
599:40 - expand this we see the steps that the
599:43 - vasel CLI is
599:45 - running and first it went on to clone
599:47 - our project from GitHub so here you see
599:50 - it went to clone our project which is
599:52 - the master branch that was automatically
599:55 - synced to this Vel project that we
599:58 - created so this
600:00 - one and after cloning you it's now
600:03 - installing the dependencies by running
600:06 - Vel build this vasel build command goes
600:09 - on to install our
600:12 - dependencies and now you see it's
600:14 - running npm run build so next is running
600:18 - npm run
600:20 - build and now it's running next build so
600:23 - this mpm run build goes on to run the
600:26 - next build command and here we have
600:29 - couple of warning totally fine and once
600:33 - it is done we should see our application
600:37 - so we can just ignore this warning we
600:40 - see here and now it is finalizing page
600:44 - optimization and now it has successfully
600:48 - built our application and we should see
600:52 - the deployment summary so build
600:55 - completed here all right so we s our
600:58 - summary everything is fine and it's just
601:01 - completing the checks and it redirects
601:04 - us to this page okay so we see our
601:08 - application that we built so now we can
601:11 - continue to our
601:12 - dashboard and here in our dashboard we
601:15 - can visit our application this is
601:17 - definitely going to break because we
601:19 - need to add some things some files here
601:23 - so we can't even authenticate if we try
601:26 - to authenticate with Google we should
601:29 - have an error so if we try to
601:31 - authenticate with Google it should fail
601:33 - so you see this fail this fails
601:36 - all right so let's fix it I will copy
601:39 - this
601:39 - URL and come back here so where do we
601:43 - have let's start with uh sanity studio
601:47 - so I'll just open up a new tab and I'll
601:50 - p in this
601:51 - URL and I'll go to/ Studio which is
601:54 - where our CMS Lees so in the studio URL
602:00 - and this is going to open up next year
602:01 - so that we can add this to course else
602:03 - we're going to have issues and not
602:06 - working with this so I'll click on
602:07 - continue this will redirect us and here
602:10 - we are going to add course origin so
602:12 - once we do this we are going to have our
602:15 - project configured and you see we have
602:18 - all our hotel room and we can visit our
602:21 - application this is one we need to do
602:25 - more if we come over to Google so this
602:28 - is where we had our web client we can
602:33 - click here and if we do we need to add
602:36 - this authorized callback URL which for
602:38 - now just has Local Host so we're going
602:41 - to paste in our URL and we go to/ API
602:45 - slof SL callback SLG
602:48 - Google this so please do make sure you
602:50 - add this so this will be the domain you
602:53 - get from Vel and do attach API sl/
602:57 - callback SLG gooogle and go on to save
603:00 - this so once you have this saved you're
603:05 - done with Google and next we can go on
603:08 - to our
603:11 - stripe so here we need to add an
603:13 - endpoint okay we need to add an endpoint
603:16 - here and the endpoint URL is going to be
603:20 - this and then slash API slash web
603:26 - hook so these endpoints we have here if
603:29 - you come over here we are pointing to
603:33 - this so in our source in our app API SL
603:36 - web hook this route here which is our
603:39 - web hook route okay so make sure you
603:42 - don't have any typle here else is not
603:44 - going to work you can add a description
603:47 - and here we're not going to select all
603:49 - of event we're going to click on event
603:52 - and let's see the event we are listening
603:53 - to so we are listening to this checkout
603:55 - session completed I'll copy this and
603:58 - search here and I'll paste it here and
604:01 - you know check this checkbox here okay
604:04 - and this just gives an example which we
604:06 - have done all through this uh project so
604:08 - I'm going to add this event and that
604:11 - should be it so here we click on ADD
604:14 - endpoint great now we have added
604:16 - endpoint you see here where we have this
604:18 - sign in secret I'll click on review and
604:22 - now we need to copy this so we're going
604:24 - to copy this and come back to
604:28 - Vel so where do we have our Vel here
604:32 - okay so here we will come over to the
604:34 - settings tab
604:36 - and in settings tab where do we have um
604:39 - environment
604:40 - variables here if we come over to where
604:43 - is it our stripe web hook secret so this
604:48 - we can view this web hook secret and
604:51 - I'll just come here and click on edit so
604:54 - I'm going to remove this value and paste
604:56 - in this new value that comes from stripe
604:59 - and click on save so now once we have
605:02 - saved this we need to redeploy so come
605:04 - back to redeploy um deployments tab here
605:08 - and click here click on
605:10 - redeploy all right we're not going to
605:12 - use existing build cache we're just
605:15 - going to redeploy this like this and now
605:18 - we're going to wait for this to build
605:20 - all fast forward and I'll be back once
605:23 - this is done building because we have
605:26 - already gone through the different steps
605:29 - that Vel goes through to build our
605:31 - project so I'll see you once this build
605:34 - is completed
605:40 - or maybe I would I wouldn't fast forward
605:43 - because we are actually leaving out one
605:44 - thing so remember we have um GitHub
605:49 - authentication so if you come here where
605:52 - do we have our project so if we come
605:54 - here and we come over to the settings
605:57 - tab and we come over
606:00 - to whether we have a developer settings
606:03 - whether we have the developer settings
606:07 - have I missed it
606:08 - somewhere all right so let's come here
606:12 - and let's come
606:14 - to
606:16 - settings and here we can come over to
606:20 - developer
606:21 - settings and developer settings you come
606:24 - over to O apps and here hotel
606:27 - management you choose your project we
606:30 - need to update this so This points to
606:33 - Local Host that means gith up
606:34 - authentication real definitely fail I
606:36 - will update this but not to this I will
606:39 - copy this URL that we get from Vel and
606:43 - paste it in here and also paste the
606:45 - Callback URL like this and update this
606:48 - application great so now we are going to
606:51 - be pointing to the correct URL and I
606:54 - will just remove this and if we come
606:56 - back here and let's see how application
606:59 - is
607:00 - doing it's it is done and we'll just
607:03 - wait for the deployment output to be
607:05 - done so that we can now revisit our
607:08 - application and test our flow one last
607:12 - time so it is done we can click on
607:16 - visit and this is going to take us to
607:18 - our
607:19 - application so let me go back and look
607:22 - for this I think I would still work with
607:24 - this URL we have here so I would copy
607:27 - this URL and work with it rather than
607:30 - this um new URL that we get okay so you
607:34 - see this
607:35 - here I would work with this actually and
607:38 - let's come here and let's try it out
607:40 - we're going to try our web hook and be
607:42 - sure that everything is working fine so
607:45 - I'll paste in this URL and let's try to
607:48 - shop a hotel room let's try to book
607:51 - actually so we'll come
607:53 - here this was one we booked from
607:56 - previously and now I will come over to
607:59 - book this
608:01 - room and next something went wrong so
608:05 - what happened because we are not
608:08 - authenticated okay I think so so let's
608:11 - authenticate I will click here and click
608:15 - here our authenticates with
608:17 - Google and wait for this so that's one
608:20 - logic you can handle if you're not
608:21 - authenticated and trying to protect
608:23 - those routes so now I'm going to click
608:26 - here again and you see doesn't crash so
608:30 - it works just as fine so in this room
608:32 - you can update the logic to make sure if
608:34 - you're not at you cannot visit this this
608:38 - route and I think this issue is um
608:41 - coming from here so I think it's coming
608:45 - from our middleway so what we just
608:49 - noticed I think it's coming from here
608:51 - but no worries we would keep an eye on
608:53 - this middleway as we test out our
608:56 - application and let's choose a check-in
608:58 - date and also a checkout date I'll just
609:00 - choose the next day so the price is 400
609:03 - for the total price as we have a 20%
609:08 - discount okay and it's now 400 so if we
609:10 - choose to this it should be 800 great so
609:13 - the logic is working fine and if we
609:16 - choose um let's say if we come here and
609:19 - we choose you know a date that is way
609:21 - higher than the checkout date we should
609:22 - have this great so this is working fine
609:25 - and let's try to book now and we should
609:27 - be redirected over to stripe which we
609:31 - are and we have this eror check out
609:34 - session could not be found the error is
609:36 - usually caused by using the wrong API
609:38 - key so perhaps we using the wrong API
609:40 - key as tripe has told us so let's update
609:44 - our API key so to do that I will come
609:46 - back here and here if I come to
609:50 - developers and I come to API keys I'll
609:54 - copy this publishable key and I would
609:57 - have to edit this again and click here
610:01 - and where do I have to edit so I'll come
610:05 - here and here I'll click on settings
610:08 - click on environment
610:10 - variables and this is the publishable
610:13 - key so where do we have the stri
610:15 - publishable key this key over here if we
610:18 - visit this so publishable key I'm going
610:21 - to click on this click on edit and
610:26 - update this publishable key all right so
610:29 - I will save this and next we need to
610:32 - update the secret key to be sure we are
610:35 - using the correct Keys here so this is
610:39 - the stripe secret key I'll click here
610:42 - click on
610:43 - edit and I will also update that secret
610:47 - key and click on Save okay so if you
610:52 - didn't have the errors it's fine for
610:53 - some reason I got it so maybe I use the
610:55 - wrong keys and now I'll have to redeploy
610:59 - so come back to um
611:01 - deployment and in here I will redeploy
611:05 - and here click on redeploy all right so
611:09 - this is going to redeploy again so is
611:13 - totally fine when you're building
611:15 - application for production and you get
611:17 - one of these errors um you know missing
611:20 - keys and stuff like that so I would wait
611:23 - for this to build and once the build is
611:26 - complete I'll be back all right so our
611:29 - build is completed and now we can you
611:32 - know revisit our application so so this
611:35 - is the domain I'm going to copy this
611:38 - domain and let's try it out again so
611:42 - here so this is where we had error I'm
611:44 - just going to paste this back in and now
611:48 - let's see if everything works I'll come
611:49 - back to
611:51 - rooms
611:52 - and here I'll choose this room again and
611:56 - I'll try to book it like this and click
612:00 - on book now so we should be redirected
612:03 - back to stripe
612:05 - and now you see stripe doesn't crash so
612:08 - it was a case of using the wrong API
612:11 - keys I'll just provide a test
612:15 - email
612:16 - and this card
612:19 - information and give it this CVV and
612:22 - give it this test
612:26 - name and click on pay so let's keep an
612:30 - eye on where is it on web Hooks and see
612:34 - if if we have an event here that gets
612:36 - triggered so let's wait for this to
612:40 - process
612:41 - successfully and for now we don't have
612:44 - this yet let's see so this is done and
612:48 - we don't see the hotel that we booked
612:52 - all right so we see this is actually
612:54 - failing if we click on
612:56 - this and here I'm just going to reload
612:59 - this so that we you know we see if this
613:03 - was actually called and if we come over
613:05 - to our domain for/
613:10 - Studio here I think is this no so if we
613:14 - come to our domain and we come over to
613:16 - bookings do we have an extra booking no
613:18 - we don't and if we come here we have
613:21 - this so we have this 307 temporary
613:26 - redirect and I think this has to do with
613:28 - the issue that we had initially where we
613:31 - were blocked from here because 307 is
613:33 - usually every Direct
613:35 - and that should be this Middle Way
613:38 - causing the issue so we need to update
613:40 - this I'm going to duplicate this and
613:44 - here I'm going to change this I'm going
613:46 - to get rid of the API because we are
613:48 - actually authenticating our API Pages we
613:51 - don't we're not going to be doing it
613:52 - here so we just going to be blocking the
613:54 - user route so this might have some
613:57 - effect on the API folder which it
613:59 - definitely does but I'll just leave this
614:02 - here or maybe I take it off so you know
614:04 - you don't see was not working and now
614:08 - I'm going to rebuild rep push our
614:11 - application so I'm going to save
614:13 - this and get add dot again get commit
614:18 - iPhone M I will say fix Middle Way error
614:22 - like this and now we're going to push
614:25 - get push origin Master like this and
614:30 - once we have this change
614:32 - pushed Vel should build autom ially
614:35 - because it's connected to our current
614:37 - branch which is our Master Branch so
614:40 - let's see if that's the case okay so I'm
614:43 - going to come back to Vel and I'll come
614:46 - to
614:48 - deployment and I will come back to our
614:50 - function first and you see it's building
614:53 - so automatically it's just deploying our
614:57 - application and I'm going to click here
614:59 - so we can inspect the build to be sure
615:02 - everything works just as fine fine and
615:06 - if you click here it's just doing what
615:07 - it did before so you know running mpm
615:11 - run build which NE runs the next build
615:14 - command and we have this warning from
615:17 - our rooms page regarding use effect it's
615:21 - just a
615:22 - warning and now it's generating our
615:25 - static pages and it's done so I don't
615:27 - know it was super fast so perhaps it
615:30 - used cash to build or it just builds the
615:33 - middle way the section it found out that
615:36 - needed to be fixed which is this so fix
615:39 - middleware error so just this change and
615:42 - that's why it's super fast all right so
615:44 - it's done already and let's
615:47 - retry so I'll come here to the
615:50 - application and I'll copy this because I
615:53 - want to load it again and I'm going to
615:56 - update our URL like
615:59 - this so let's try to build um we can
616:02 - come to our rooms we
616:05 - take a look at this room again and here
616:08 - I'm going to choose this and choose this
616:10 - as a checkout dates and book this again
616:16 - so now we should still keep an eye on
616:18 - this U middleway so we have these two
616:21 - failing and I'm going to provide this
616:23 - test at test.com and
616:26 - provide this card
616:29 - information
616:31 - three CVV and give this set
616:35 - name I would just say code
616:38 - with lbrary like this and I'll click on
616:43 - pay and this time around let's see if
616:46 - everything works and we don't get the
616:48 - 301 redirect now this works and we don't
616:52 - see it here which might be bad news but
616:55 - let's check here good news actually so
616:57 - we see our booking so it means it works
617:00 - this time around and this is the hotel
617:02 - room we booked and if it had this
617:04 - discount and everything here great and
617:08 - we see it here it just needed to reload
617:11 - all right so if we come back here and we
617:13 - reload our
617:16 - stripe and let's wait for it to reload
617:20 - and let's see if our web Hook is
617:22 - actually working in
617:23 - production and this was successful this
617:26 - time around great and that's why we had
617:29 - a booking so users are not able to book
617:33 - um a hotel room unless a payment is
617:36 - successful and that's why we have this
617:38 - code this code here running in the
617:40 - background and let's leave a rating on
617:43 - this room so we have this log V if we
617:46 - visit the room now we don't see any
617:48 - rating all right so let's try to leave a
617:51 - rating I would come back here click on
617:53 - rate I'll give this a five star and say
617:56 - great
617:59 - experience and click on submit so once
618:03 - it's successful you see review submitted
618:06 - we are going to come here and great
618:08 - experience we see our review and we see
618:10 - that this is booked and we can you know
618:13 - try again and again so here I'll click
618:16 - on rate it'll give it a five star I'll
618:18 - give four star and say um androoid my
618:24 - stay androoid my
618:28 - stay like this and click on submit now
618:30 - this is going to update and if we come
618:33 - back here we should check take a look at
618:35 - this we don't see any review yet so
618:38 - let's just reload perhaps it hasn't
618:40 - updated and here we see it so enjoyed my
618:43 - stay and we see this so great our
618:45 - application is working fantastic and
618:47 - this is the build and you see everything
618:51 - works as we you know we coded it out
618:55 - fine in um production and also in
618:59 - development so everything has been fine
619:02 - uh and everything is working great so
619:05 - this is the build if you enjoyed it
619:08 - please to go on and subscribe and you
619:11 - know I look forward to building more of
619:13 - these projects with you you can try out
619:16 - these filters and everything is working
619:18 - fine and try to remove the console.log
619:20 - that we have here all right great so see
619:23 - you in the next one and take care until
619:26 - then iind your boy Cod it Larry do take
619:29 - care and bye-bye