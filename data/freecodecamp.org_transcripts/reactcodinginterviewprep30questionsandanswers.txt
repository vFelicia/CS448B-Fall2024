00:00 - do you have a react interview coming up
00:02 - do you just want to test your react
00:03 - skills
00:04 - this course is for you
00:06 - in this course nishant singh from
00:08 - cybernetico will teach you how to answer
00:10 - the most common react interview
00:12 - questions and if you know any other
00:14 - common react questions leave them in the
00:16 - comments to help other learners
00:19 - hello
00:20 - i am nishant and welcome to my video on
00:22 - which you will learn about react
00:24 - important concepts and interview
00:26 - questions
00:27 - provided by free code camp
00:29 - here we learned mostly about all the
00:31 - important concepts in react that are
00:33 - widely used
00:34 - in production and in development
00:37 - and also which are asked in an interview
00:40 - so let's get started now
00:46 - to use the map and filter we will
00:48 - display all the data from the api coming
00:51 - to this here from which api we will
00:55 - display all the data in this ui at the
00:58 - place of this one card which
01:01 - is returning my name and username
01:04 - fine
01:05 - so initially we are getting the data in
01:07 - the response in the console
01:09 - let me show you what i mean
01:11 - open the console
01:13 - let me have this
01:14 - let me show you this we are getting all
01:16 - this data here
01:18 - so first step is
01:19 - first step to do this here is to create
01:21 - a variable
01:23 - and in react
01:24 - variables are simply called states
01:27 - so
01:28 - i mean we call them states because they
01:31 - can change the property so let me create
01:33 - a state or variable called users which
01:36 - is a variable name
01:37 - and to set the data we will have this
01:39 - set users
01:40 - function
01:41 - and in this use state we will have to
01:43 - use an array because all the data is in
01:46 - an array
01:47 - see followed by objects
01:50 - so let me store them here
01:55 - save this and let me just
01:58 - now use the map
02:00 - so to use the map function we will just
02:03 - we can just use
02:04 - first the array name which is called
02:07 - users
02:08 - users dot map
02:11 - then it takes a parameter called user
02:14 - and
02:15 - from this parameter we have to return
02:17 - the html
02:19 - wait something is yes now fine
02:21 - which is called we have to turn some
02:23 - html called div or anything you want
02:27 - yes
02:28 - so see here we have the data like id
02:31 - name username email address all the data
02:34 - so this name username email they are
02:37 - called keys
02:38 - so to show the keys
02:40 - sorry so the values which are this
02:42 - lingaram
02:44 - bread
02:45 - all the data
02:46 - we have to use
02:48 - the value so to through the value we
02:51 - will just use user
02:53 - dot name
02:55 - but let me copy this
02:59 - card inner and paste it here
03:01 - then in the p tag i will just say
03:06 - user dot name
03:08 - and here we will just we will say
03:11 - user
03:13 - dot username
03:16 - username
03:17 - let me see the correct key this is small
03:20 - username find save
03:23 - and see all the data is now being
03:25 - displayed here from this api
03:28 - so this name is called the key and the
03:32 - lien graham and bit is called the value
03:35 - now
03:36 - because the object exists in key value
03:38 - pairs
03:39 - all right so that's how map works
03:43 - now let me give you another example
03:45 - of what we can do with map
03:47 - let me create a function here say
03:50 - map data
03:52 - data
03:55 - it's done it's a function
03:58 - then
03:58 - let's just multiply the id with two
04:02 - because it's a number
04:03 - so how to do that we will just first use
04:07 - the users first let me create one more
04:09 - array called
04:11 - let's say mapped array
04:15 - so in this array so i mean this
04:18 - this map
04:19 - if you are mapping any array it will
04:21 - return a new array not the previous one
04:24 - because it's transformed
04:26 - so let's say we want to multiply the
04:28 - users by two
04:30 - i mean the user id
04:32 - so we can do this
04:35 - user
04:36 - then we can say user dot id multiplied
04:39 - by two
04:40 - now in this area of mapped array
04:43 - all the ids will be multiplied by 2 so
04:46 - we will get
04:47 - 2
04:48 - then 2 into 4 then 6
04:51 - and 4 into it and so on
04:53 - let me console.log
04:56 - this
04:57 - mapped array
05:00 - let me create a function to trigger this
05:02 - so i need a function to but a button yes
05:05 - you see c
05:07 - map
05:08 - array
05:10 - so just assign the function to this
05:12 - button
05:13 - using on click event now if we click
05:16 - click this button
05:17 - it will
05:19 - run so let me remove this two first
05:24 - i think we don't need any other thing
05:27 - just this
05:28 - but let me leave it
05:30 - let me add the button outside
05:35 - here for your difference
05:37 - let me add it here
05:38 - fine
05:39 - if we click this button
05:41 - all the mapped array will be shown in
05:43 - the console
05:44 - all the items multiplied by two let me
05:47 - get it to bottom
05:50 - how to add it yes
05:52 - here
05:55 - click mapped array cmap ready
05:57 - and see
05:58 - on the line number 20 online number 14
06:01 - we are seeing all the mapped array
06:03 - multiplied memory ids
06:05 - multiplied by 2 like 2 4 6 8 and all so
06:10 - so that's how map works
06:12 - now let me show you how filter works
06:15 - so first of all
06:17 - let's say
06:20 - okay wait let me remove this
06:23 - save this
06:25 - let's say we want
06:27 - to see only those name
06:29 - whose name was first let's start from a
06:32 - so how do we do that we will filter the
06:34 - data
06:35 - from this users array
06:37 - so we will say let
06:39 - filtered data
06:41 - equals to use state
06:44 - and then we will add an empty array
06:47 - no wait what i'm doing
06:48 - it's wrong
06:50 - i am lost today
06:51 - yes so you will do users dot filter to
06:55 - filter data
06:56 - and same like the map it takes an user
06:59 - parameter
07:00 - then we will have to return something
07:03 - like this
07:04 - we will say
07:06 - return
07:08 - user dot wait sorry sorry
07:11 - user whatever
07:13 - user
07:14 - dot name
07:17 - equal to leanne graham
07:19 - so let me just control this now
07:23 - to check if we're right or not
07:28 - open the console
07:32 - click see mapped array
07:34 - we have an array here
07:35 - of
07:36 - only one item
07:38 - because
07:39 - the
07:40 - condition is we are only filling the
07:42 - name
07:43 - of the user which has the name of leon
07:45 - graham
07:46 - if we make an a here it will fetch all
07:49 - the data
07:50 - of the names starting from a
07:57 - now starting from not from a we will
07:59 - fetch all the data which has the
08:01 - username of a
08:03 - i think we will get an empty array
08:06 - c because none of the items have none of
08:09 - the names
08:10 - have a name name of a just a
08:14 - to check if all the items include a
08:17 - letter a we can do this
08:20 - return user
08:23 - return user.name
08:25 - to lower case includes
08:29 - our a
08:31 - this
08:32 - now let's try
08:34 - refresh
08:36 - into lowercase
08:38 - okay we don't need this
08:40 - point
08:41 - now let's try see mapped array
08:44 - we are selling an empty
08:47 - because
08:48 - none of the i okay i think none of the
08:52 - items have a big a
08:54 - all of them are having a small a
08:58 - yes so make it a small a
09:00 - then we will see
09:02 - all the items with a in them
09:05 - which have which are having seven items
09:07 - we have seven items
09:09 - so this and this and this
09:11 - so that's how it works
09:13 - we can also do
09:15 - other properties
09:16 - like
09:17 - this
09:20 - so we can say
09:22 - user
09:24 - dot id
09:25 - if it is less than
09:27 - five
09:28 - we will see only them
09:30 - so if the user not id is less than five
09:32 - so we will see
09:34 - one to four let me check now
09:39 - see mapped array
09:40 - and we are having only four data one two
09:43 - three and four
09:44 - if you want to see the fifth data from
09:46 - one to five we will have to make
09:48 - condition like this if returned
09:51 - user id is
09:53 - less than or equal to five
09:55 - now let's check
09:58 - c we now get all the data
10:01 - okay so this map and filter can work
10:04 - together also
10:05 - so let's say we filtered the data with
10:08 - all the items less than five all the ids
10:13 - less than five
10:14 - i mean less than equal to five so let's
10:17 - map them now in an array
10:19 - so how to do that
10:21 - we can simply set this set users
10:24 - then
10:25 - filter data
10:27 - let me remove
10:28 - the data from here okay leave it leave
10:31 - it
10:32 - we have certain data here first then
10:34 - we're filtering it if the user id is
10:36 - less than five or equal to five
10:38 - then let's check
10:40 - we having one two three four five ten
10:41 - items if we click the button this will
10:44 - be changed to five
10:45 - one two three four five or lean gram
10:48 - this
10:49 - this
10:50 - this and this
10:52 - click the mapped array
10:54 - and see the error has now been filtered
10:56 - to only five items
10:58 - if we make it
10:59 - more than or equal to five
11:02 - let's see what happens we will see
11:05 - last five items
11:07 - like from mr miss dennis
11:09 - screw list see mapped array
11:12 - okay yes we are seeing six items
11:15 - we have to remove
11:16 - equal to
11:17 - now let's try again
11:19 - see
11:20 - we are saying the last five items here
11:23 - okay so
11:24 - that's done
11:26 - okay now let me give you a simple
11:28 - example very simple example
11:32 - we will combine these two first
11:34 - i mean we will combine map and
11:36 - filter together so we will say let sorry
11:38 - const let's say
11:41 - numbers
11:42 - and set numbers let me have the numbers
11:45 - from 1 to 10
11:48 - 1 2 3 4 5 6
11:51 - 7
11:52 - 37
11:54 - 8
11:55 - 9
11:56 - and let me also add 10
11:58 - let me add them fine
12:01 - so here let me just comment it first
12:04 - here
12:05 - and then we will do it here
12:07 - so first let me console or let me just
12:10 - map these numbers here
12:13 - so
12:14 - to map the numbers we can simply do the
12:16 - thing like we did previously
12:18 - but this time
12:19 - we don't have the objects we have this
12:22 - just an array of 10 numbers
12:25 - so how do we show that
12:27 - so we can say
12:29 - this number dot map we will return the
12:31 - number
12:33 - and we can simply say diff dot give a
12:36 - number but we have a problem we need one
12:39 - small bracket also
12:41 - and all the numbers are here
12:43 - let me add the class name of card here
12:48 - save and this one card enter
12:51 - here
12:54 - we have all the numbers one to ten let
12:56 - me comment out this card this card
12:59 - and make this as
13:01 - numbers
13:03 - from one to ten
13:04 - so we have one to ten numbers in this
13:07 - array here
13:08 - of numbers
13:10 - now let me transform this array using
13:12 - map
13:13 - so first we will create an
13:16 - uh let variable which will be called
13:20 - square
13:22 - root
13:24 - point
13:25 - then i will simply map the numbers
13:28 - to get this square root square it's not
13:29 - square root sorry
13:32 - fine so numbers dot map we will use map
13:35 - function just like before and it will
13:37 - take a number param
13:39 - so this number is all the numbers like 1
13:43 - 2
13:43 - 3 to 10 like 1 to 10
13:46 - it will take a number param
13:49 - which is 1 to 10 and it will multiply
13:52 - each number 1 to 10
13:54 - as we want
13:56 - let's say in this function we having a
13:58 - square then it will return
14:00 - number into number that is mainly my
14:03 - that mainly becomes the square root
14:06 - we can console.log
14:08 - this number here
14:10 - sorry now number square
14:13 - let's check the console now
14:17 - we have an area of fire i think i need
14:19 - to refresh the page
14:22 - no not refresh we have to click this
14:23 - button
14:24 - click it
14:26 - and we have the square of all the items
14:28 - inside like 1 4 9 16 and all
14:32 - fine that's done
14:34 - so here we can have two cases
14:37 - so in this console we are seeing all the
14:39 - numbers from 1 to 800
14:41 - which are square of all the items
14:44 - so let's say we want the filter
14:47 - first let's say we want to filter
14:50 - or make the square root of one of those
14:51 - number which are less than five
14:53 - so how do we do that so let me remove
14:56 - and show you from the start it will
14:58 - select
15:00 - let's num let number
15:03 - less
15:04 - than
15:06 - 5 equal so i will say number let me turn
15:08 - off this github copilot
15:11 - disable for java globally fine you can
15:14 - say number
15:16 - or numbers what is it
15:18 - yes it's numbers
15:20 - dot filter first we have filter them
15:22 - first
15:24 - it will take up when i am called number
15:29 - i mean all the numbers just like before
15:32 - then we will return
15:34 - this
15:34 - we will return all the numbers we want
15:37 - which are less than or equal to 5
15:40 - it will return all the number numbers
15:43 - number this number we want here
15:46 - it will return all the numbers less than
15:48 - 5
15:50 - then
15:51 - if this function closes the filter
15:53 - function here
15:54 - we can say map
15:56 - then we want to store all the data in an
15:58 - array
16:00 - in this slit numbers array
16:02 - so we can say
16:04 - let's say
16:07 - mapped or filtered numbers
16:10 - say filtered
16:12 - fill
16:13 - third
16:14 - third
16:15 - yes spelling is now correct
16:18 - then again it will return us something
16:21 - it will return us
16:22 - all the data
16:24 - which is
16:26 - wait i am doing it wrong like this it
16:28 - will return something so they can say
16:30 - return
16:33 - what do we need to return
16:35 - the filtered
16:37 - fine
16:38 - now let me store this number less than
16:41 - five in the set numbers array
16:45 - set numbers we are having yes
16:48 - less than
16:49 - we have to set this here now yes
16:52 - like it
16:54 - now we are seeing all the numbers from
16:56 - one to five
16:58 - but now if we click the button
17:00 - it will first
17:01 - fill all the numbers less than five or
17:04 - equal to five
17:05 - then it will make a square root also yes
17:07 - we need this
17:09 - filtered into filtered to get the square
17:12 - root
17:13 - save
17:14 - let's try click the mapped array same
17:16 - amd button see we are seeing all the
17:20 - items less than or equal to five
17:24 - so we are saying five six
17:26 - not
17:27 - not more than less than yes sorry
17:29 - less than five we want refresh the page
17:33 - the mapped array
17:34 - now we're seeing all the numbers
17:37 - which are less than 5
17:38 - and the square roots so we have 1 so
17:41 - it's 1 we have 2 so it's 4
17:44 - 3 9
17:45 - 4 16 525
17:49 - fine
17:50 - so that's how we do it
17:51 - how map and filter works together so we
17:54 - have filter and then map
17:57 - now let's see to reverse the conditions
17:59 - of functions i mean
18:01 - so first we will do this so first we
18:03 - will list all the items all the square
18:05 - roots and then we will map or then we
18:08 - will filter them so let's say remove the
18:10 - filter here first
18:14 - here we will save all the square squares
18:16 - of all the numbers
18:17 - click the button
18:19 - and all the numbers have now been square
18:21 - squared so 1 is 1
18:24 - 2 is 4 3 9 16 and so on
18:27 - but now we want to see all the numbers
18:30 - which are less than 50
18:32 - so we will get till
18:33 - 49
18:35 - so we can do this
18:37 - so number less than 5
18:41 - here we will add
18:42 - filter
18:45 - then we will say
18:46 - it will take a it will take a parameter
18:48 - called let's say
18:50 - number again
18:52 - then it will return something like
18:54 - uh wait like this return
18:58 - you can say number
19:00 - less than five
19:02 - or maybe equal to
19:04 - fine save
19:06 - now click the button
19:08 - okay not five
19:09 - 50. sorry 50 yes
19:12 - now you will see
19:13 - all the numbers squared
19:16 - and then fill that
19:18 - on the condition that if it is less than
19:20 - 50 we will show it here
19:23 - see mapped array
19:25 - okay we only see two
19:27 - which are less than 50.
19:29 - wait something is wrong here
19:31 - refresh page see mapped array now it's
19:34 - fine
19:35 - we are seeing all the numbers less than
19:36 - 50 after mapping
19:39 - so on the previous case we were
19:40 - filtering before
19:42 - and mapping after that
19:44 - but in this case we are mapping it first
19:46 - and then we're filtering
19:48 - so that's how map and filter works
19:50 - together in both cases
19:53 - so that's all now
19:54 - i hope you learned how map and filter
19:57 - works
19:58 - in javascript and react
20:04 - here i have a simple example with a
20:07 - count variable let count equal to zero
20:10 - one function to increment it
20:12 - one h one tag and return to display the
20:15 - count value
20:16 - and one button to increment the count
20:18 - when we click it
20:20 - so let's try this example
20:25 - click the button
20:27 - see every time you click the button
20:28 - increment the count
20:30 - the value is getting increased by 1 1 2
20:33 - three four and five
20:34 - but our page is not getting updated this
20:37 - zero is still zero
20:39 - that is because when this count changes
20:41 - in this
20:42 - function
20:43 - it's not rendering our component this
20:46 - app.js component to solve this we have
20:49 - stated react
20:51 - so to create a state in the functional
20:53 - component we will have react hooks we
20:56 - have react hooks
20:57 - so our hook is called uninstead
21:00 - we have to import it first like this
21:02 - import use state from react
21:05 - so we have to create a state first
21:08 - so const
21:09 - arrow brackets sorry uh what is it
21:12 - array brackets
21:14 - so array
21:15 - we will have the value variable name
21:17 - which is count
21:19 - and one function to change it when we
21:21 - want to change
21:22 - so we will have to use set count
21:25 - you can use anything you want
21:27 - at the place of set count
21:30 - then
21:31 - followed by as you use state
21:34 - in this small bracket we will add the
21:36 - type of the state
21:39 - so it's a number because it's zero one
21:41 - two three
21:42 - so we'll use zero like this
21:45 - let me remove this count fine
21:47 - so that's done so if we save the file
21:50 - this count will be 0
21:53 - because now the count is coming from
21:54 - here
21:55 - if we change it to 1 they should this
21:57 - will be one
21:59 - see so let's make it zero
22:02 - now to change it
22:04 - we have to do this we don't need to use
22:06 - we don't have to use this
22:08 - so to change it we will just use set
22:11 - count
22:12 - and in the set count we will increase
22:14 - the value of count like this
22:16 - or let me modify this existing existing
22:19 - one
22:20 - so
22:22 - remove this stream of this count equal
22:23 - to countless one we will simply set
22:26 - the value let's say the count is getting
22:29 - incremented by one
22:31 - then we will save the value
22:33 - in the set count
22:35 - now let's try
22:37 - let's increment the count
22:39 - see now it's getting incremented
22:42 - properly
22:43 - like this
22:44 - fine
22:45 - so that's how we use states in react
22:48 - you can create any type of state you
22:50 - want like
22:51 - this is a number then we can have a
22:54 - string let's say name
22:56 - let's say set name
22:59 - equals to use state
23:00 - let me use the so this is our num name i
23:03 - mean it's a string
23:05 - so we'll use
23:07 - quotes
23:08 - fine
23:10 - then we can have other states like
23:13 - boolean let's say
23:15 - is visible
23:19 - and
23:21 - set it we will have
23:22 - set
23:24 - is which set
23:26 - is
23:27 - visible
23:29 - the new state so it's a boolean
23:32 - so
23:33 - let's say we want to make it false
23:35 - initially then we have to use false here
23:40 - fine
23:41 - let me give an example here of this
23:43 - boolean state
23:45 - let's say we have a button or this
23:47 - button
23:48 - we want to see this button only when
23:50 - the state sits the state is true
23:53 - so we'll use curly brackets
23:55 - so is visible if it is true
23:58 - i am using the ternary operator
24:01 - so if it is true
24:02 - then this first and small bracket will
24:04 - run or anything inside it
24:06 - it will return this
24:10 - this button but else if it is not
24:13 - okay let me just make it some
24:16 - h1 tag here and
24:18 - i will say
24:20 - visible
24:22 - and if it is not true we will say
24:27 - not
24:28 - visible save
24:30 - so now let's change it
24:33 - remove this or just after this
24:36 - we can have set it set is visible
24:39 - we will reverse the value using this
24:41 - thing
24:41 - so you can say
24:43 - not equal to
24:45 - is visible
24:46 - so let's say if it is false
24:48 - so if we click the button or this
24:50 - function will run
24:51 - it will be reverse false which is true
24:54 - then it's getting stored inside the set
24:57 - set is visible
24:58 - let's try we have not visible
25:02 - click the button to run the function
25:05 - see now it's visible
25:07 - click it again
25:09 - this would be invisible or not visible
25:12 - see
25:13 - that's how it works
25:15 - to use set name we can also use set name
25:18 - so let's say we want to set the name to
25:20 - nishant
25:23 - let me print it out here as well
25:27 - in h1
25:34 - so see initially it's nothing so we have
25:36 - not seen anything here
25:38 - click the button given the count
25:41 - or let me change the name of this button
25:43 - you can have
25:45 - change states
25:46 - much proper
25:48 - click
25:49 - now see the name is now here
25:52 - fine
25:53 - we can have array states as well and
25:55 - object sheets so we can say const let's
25:58 - say array
26:00 - and set array
26:06 - use state to use array state we will
26:08 - have to use
26:09 - this because this denotes an array we
26:12 - can have multiple objects inside array
26:15 - or multiple items like this
26:18 - or if we want objects we have to use
26:20 - this so let me create
26:22 - or just do this an object first
26:25 - let's say name
26:27 - which would be equal to nishant
26:30 - let's say age
26:31 - 26
26:33 - let me create one more object in this
26:36 - array
26:37 - to make this an array object array
26:39 - object
26:41 - sorry object in an array yes that's
26:44 - called any object
26:45 - so
26:46 - here we have to use name as something
26:48 - else like uday
26:50 - and make 25 or 26
26:54 - fine
26:55 - so it's an added state
26:57 - see
26:59 - we can also have an object state here
27:02 - we can say const
27:04 - object and
27:06 - that object
27:08 - impulse to use state
27:10 - let's say
27:12 - an object
27:13 - if you want to make it empty it will be
27:16 - empty like this but if you want to add
27:18 - some value initially we can add some
27:21 - things like name and h properties like
27:24 - this
27:25 - so this is the numeric state this is the
27:29 - string state boolean state array state
27:32 - and
27:32 - object state
27:34 - so that's how
27:36 - state works and react i mean
27:38 - mostly in
27:39 - functional component
27:41 - let's now change to class components
27:46 - so use the class components let me let
27:48 - me just remove all this and make rcc
27:51 - class component
27:53 - to make the class component state let me
27:55 - just remove this as well fine
27:58 - we have to use something called
28:00 - constructor first constructor
28:05 - i think that's right
28:06 - inside this we have to use super keyword
28:10 - then we need the state to create the
28:12 - state we have to use this keyword
28:15 - this dot state
28:17 - equals to let's say a name
28:19 - so name could be empty state
28:21 - or we can have default state like
28:23 - nissans
28:25 - fine so that's how we create in the last
28:27 - component
28:29 - let me print the state here
28:31 - so to print the state we will have to
28:32 - use
28:33 - this dot state dot name
28:37 - but let me wrap it in h1 tag
28:40 - h1
28:44 - save
28:45 - see the name is here okay
28:48 - let me add class name of
28:50 - fine
28:52 - this should be in center
28:53 - it's not
28:55 - let me okay
28:56 - need to import android css
28:59 - import
29:03 - app not css
29:06 - like this now it's in the center
29:10 - so if you want multiple states we have
29:12 - to use name
29:14 - then we can use let's say
29:16 - age
29:17 - we can have 0 initially
29:20 - or null also but we don't use i don't
29:23 - prefer to use null
29:24 - so to add the age state we can use age
29:28 - it's zero
29:29 - fine
29:30 - similarly in use state we have this
29:32 - state
29:33 - let's say we have an array of something
29:36 - let's say an array
29:37 - and just a colon
29:40 - and the
29:41 - array we can have one two three four
29:45 - five
29:46 - six like this
29:48 - so to
29:50 - view this we can just say
29:54 - this
29:56 - dot array dot
29:58 - map
29:59 - body this dot state dot error dot map
30:01 - desktop state dot
30:04 - array dot map
30:06 - to get the values from this array
30:09 - see
30:10 - so we have to use
30:12 - one
30:13 - property
30:15 - so if you want to see how map works you
30:16 - can see my previous video in the same
30:18 - playlist
30:20 - so we can say
30:21 - item
30:23 - so
30:24 - this map okay i will not explain this to
30:26 - you
30:27 - but basically
30:29 - this map will increment or it map this
30:32 - map will
30:33 - what is it called
30:34 - iterate over every item and do something
30:37 - so let's say we want to return something
30:39 - like this return
30:43 - let's say item multiplied by 2
30:49 - save
30:50 - see the all the data is now here
30:52 - i mean all the array items so
30:55 - one is multiplied by two then four then
30:58 - like this
31:00 - so that's
31:01 - an added state
31:03 - let me remove this
31:05 - all right
31:06 - so
31:08 - let me
31:10 - show you how to change the state
31:12 - so we can never vary a function say
31:16 - change okay here we don't use const
31:19 - keyword sorry
31:20 - we just use change state
31:23 - it's been so long since i used class
31:26 - component
31:28 - fine chain state
31:30 - let me add a button
31:33 - button
31:34 - let's make it as change
31:37 - date
31:40 - on click
31:43 - this
31:44 - dot
31:45 - change status
31:47 - see let's change the status to
31:50 - age of 0 to something
31:52 - we will have to use this dot
31:55 - set state
31:57 - and inside we will use
31:59 - a curly bracket
32:00 - the state name so let's say h we want to
32:03 - change
32:04 - and let's increment the edge
32:06 - to something
32:08 - so we can say this dot state dot is
32:13 - it by 2
32:14 - so now
32:15 - this state will be multiplied by 2 but
32:17 - let's make it 1
32:19 - because 0 to the 2 is will be 0
32:22 - this is how we change straighten class
32:24 - components
32:26 - now click the button this will be
32:27 - changed to
32:29 - 2
32:30 - c
32:31 - now it will be changed to 4
32:34 - then 8 16 so on
32:37 - to change the
32:39 - name state we can use this or we can
32:42 - also use in this as well
32:45 - so we have here we are setting state of
32:47 - the age
32:48 - let's change the name
32:50 - so we can say
32:51 - name will be
32:52 - this dot
32:54 - set state wait what was it
32:57 - this
32:58 - or just let's make it something like
33:00 - uday
33:03 - now click the button say change state
33:06 - it's there and this is changing as well
33:09 - so we have to use state like this change
33:12 - state like this
33:14 - so this is how
33:16 - set state works in class components
33:18 - setting states
33:20 - so
33:21 - that's done
33:23 - so we too we saw two examples in class
33:26 - component and in functional component
33:31 - so what are props
33:33 - props are simply states like this name
33:35 - that can be passed to other component
33:38 - so let me create one component here
33:40 - called
33:41 - child
33:42 - or children
33:44 - chilled
33:46 - okay just child.js
33:48 - fine
33:49 - let's make it functional component
33:52 - so we have a child component here
33:54 - so let me call this component in our
33:57 - main name.js so we can say import
34:00 - child from one step back child
34:04 - now let me render it here
34:07 - this
34:08 - so see
34:09 - okay let me make this an h1 tag first
34:12 - h1
34:13 - to make it bigger
34:17 - saves so we have this child here
34:20 - fine
34:21 - so this is a child component that we're
34:23 - rendering which is printing this h1 of
34:25 - child here
34:26 - but let's say we want to print the state
34:28 - of name here
34:30 - of nishant
34:32 - so how do we do that we cannot create a
34:34 - state here because it will not work we
34:36 - have to we will have two states and it
34:38 - will be useless
34:39 - so to use this state in this style
34:42 - component we will have to pass it
34:44 - so to pass it we have to use prop
34:47 - so we will have to use the prop
34:49 - name which is called simply name
34:52 - and then the value the state will be
34:54 - inside this curly bracket
34:56 - and this is the name
34:58 - or this is a value that we will use in
35:00 - the shell component to render this state
35:04 - so
35:05 - i will show you what i mean so let's say
35:08 - we are passing name here
35:10 - to call the name we will just use name
35:14 - and in this h1 remove this child and
35:17 - just say
35:19 - name here
35:21 - see it's called nishan now
35:23 - so this name
35:25 - that is here it's the first name
35:28 - so if we change it to let's say
35:32 - value
35:35 - of prop
35:37 - if we save this
35:40 - we will not see anything here because
35:42 - this name has not been this this name
35:45 - doesn't exist
35:46 - so we'll replace this
35:49 - see now it's rendering fine
35:51 - so the first value
35:53 - is this name that we are printing here
35:55 - and second is the value itself
35:58 - that we are getting it from here
36:00 - suppose now if we change the name to
36:02 - something so let me create a button
36:06 - say change name
36:09 - so on the button we will have one click
36:11 - event
36:13 - and then we will simply do this
36:16 - that name
36:19 - do something let's say
36:21 - that
36:23 - save
36:24 - now if we click click the button here
36:26 - change name this name nishant should be
36:28 - changed to udec because
36:30 - proper dynamic so let's check this
36:33 - change name
36:35 - see
36:36 - it's now there
36:38 - so props are mainly used to transfer
36:40 - data between parent component to child
36:42 - component
36:43 - so from parent to child
36:45 - we can also transfer function controls
36:48 - as well
36:49 - let me show you what i mean so let's say
36:51 - we have function
36:52 - called
36:53 - change name
36:59 - so this function will not run
37:01 - in this parent component it will run in
37:03 - child component
37:05 - so what will be what it will do it will
37:07 - simply change the name
37:10 - in this function set name this will be
37:15 - so
37:16 - we will pass the function as well like
37:18 - this
37:20 - save so here we are passing the value
37:23 - and the function this is the function
37:25 - and it's the value
37:27 - so
37:28 - similarly like this we have to receive
37:30 - it here
37:32 - change name function
37:33 - so to trigger it we can simply use
37:35 - button
37:37 - and on click first let me add
37:39 - change name
37:40 - label here on the button
37:42 - so on the button we will use only event
37:44 - just like previously we did in the ch in
37:47 - the parent component app.js
37:50 - then we will pass the function name that
37:52 - we are passing from here
37:55 - save
37:56 - now let me refresh to go back to nishant
37:59 - now this button is in the parent child
38:02 - component now
38:03 - click it
38:04 - and the name will be changed
38:05 - successfully
38:07 - so that's how prop works in react using
38:10 - functions
38:11 - one more thing that is to props is
38:13 - let's say we want to pass a value from
38:15 - here to
38:17 - the parent component
38:19 - let's say you want to pass something
38:21 - like
38:22 - hello
38:24 - this
38:25 - is
38:26 - nishant
38:27 - now this button will be clicked and it
38:29 - will pass the value this string to this
38:33 - function
38:34 - so we don't need this right now let me
38:36 - remove this
38:37 - and we can simply
38:39 - so see we are passing the value here in
38:41 - the change name
38:43 - so this function should accept a
38:44 - parameter so let's say
38:46 - some value
38:49 - so if we console the value in
38:51 - we will see it in the console
38:55 - value
38:56 - or else
38:57 - if we want to set it here
39:00 - it will be also work like that
39:02 - it will also work like that
39:04 - save
39:05 - but let me change it to something else
39:07 - like nishant
39:09 - fine
39:10 - now click the button
39:12 - see it's nishant and open the console
39:15 - now
39:17 - we will have the let me change it again
39:20 - we have the nissan one again because we
39:22 - are passing the
39:24 - name of nishant from
39:26 - child to parent that's a hack
39:29 - for props
39:31 - let me explain it again
39:33 - what is props so props is nothing but
39:36 - sample variables like states which will
39:39 - pass from parent component to child
39:40 - component like this value
39:43 - we can also pass functions
39:46 - that like this function
39:47 - and we can call the function using a
39:50 - button or anything we want
39:51 - like this here
39:53 - third thing we can also pass
39:56 - our or some value from child component
39:59 - to parent component via this function
40:02 - like a name or something
40:04 - so here
40:05 - we are passing this function change name
40:08 - so change name is bidding passed here
40:10 - using procs
40:11 - it's coming here
40:13 - and on click of this button we are
40:15 - passing some value
40:16 - so this value
40:18 - will go to here in this value
40:21 - and it will print in the console
40:23 - so it's like a hack
40:25 - so that's how props works in react
40:33 - so here we have a simple example of this
40:35 - if statement
40:37 - if the age is 20 smaller than 26 we'll
40:40 - print this
40:42 - then else if
40:43 - if both conditions are true we'll print
40:45 - this
40:46 - or if none is true we'll print the else
40:50 - so we should see these two because these
40:52 - conditions are true
40:54 - open the console and let's check
40:58 - okay see we are reading it two times but
41:00 - don't worry about that that's the word
41:02 - that the problem of this user vector
41:05 - in the react rating version we cannot
41:07 - solve this in this video because
41:09 - it's not in our scope of this current
41:11 - video topic
41:13 - so let's convert in inside into this
41:16 - inline condition
41:18 - expression it goes like this
41:21 - we have to check for h then
41:24 - first is if age is more than 26
41:27 - we will print
41:28 - console
41:30 - what is happening
41:32 - console.
41:35 - let's print
41:37 - you
41:37 - in this
41:39 - course you
41:41 - are
41:42 - now old
41:44 - see we are printing this
41:47 - then we have else if
41:49 - where we are checking these two
41:50 - statements
41:52 - so
41:53 - we can press enter
41:55 - or second line
41:57 - you can write in the same line
41:59 - but i am showing you for the clarity to
42:02 - show you the full code properly
42:04 - so here we are checking these two
42:06 - statements so let's check
42:09 - so
42:10 - then comes else if
42:12 - then again we have to check using
42:14 - question mark
42:15 - so again if this is true we will have to
42:18 - print something
42:20 - so we can say
42:22 - let me first add a
42:24 - fragment here
42:26 - then we can say console.log
42:31 - so
42:32 - first console is this if this is true
42:35 - let me add okay let me copy and paste it
42:37 - here simply
42:39 - okay just let me
42:41 - copy it manually here
42:43 - in quotes
42:45 - then we have one more console.log
42:49 - the second console
42:50 - nishant is my name
42:54 - save
42:55 - so see
42:56 - we are opening question mark here
42:59 - and this closing here
43:00 - so again after that we have to use the
43:02 - colon just like this colon before
43:06 - then we have to check for else
43:08 - so we will do the same thing
43:10 - we will use
43:11 - a small bracket
43:13 - then a
43:15 - fragment
43:16 - so for multiple form printing multiple
43:18 - lines we'll have to use this
43:20 - but if you have single line you can
43:22 - simply use directly like this
43:25 - then we have to print
43:27 - these two statements
43:28 - nishant is not my name
43:32 - let me copy it simply and paste it here
43:36 - nishanth is not my name
43:38 - and i am less than 26 years old
43:44 - um okay here
43:46 - what's happening what's happening
43:49 - now it's fine
43:50 - let me comment out this
43:54 - dave
43:55 - so
43:58 - let's check using the condition
44:00 - aj is 26
44:01 - fine
44:02 - name is nishant
44:04 - so it goes into this block
44:07 - it will check the age
44:09 - so it's under six so this one is not
44:12 - true
44:13 - this one is false so let's light false
44:16 - here
44:17 - then it goes inside the second block
44:19 - else if
44:20 - this one it will check name is nishant
44:24 - yes it's nishant
44:26 - age is this 26 yes it's 26.
44:30 - here we are using ampersand 2 ampersands
44:33 - it means
44:34 - it will check for both conditions
44:37 - both conditions
44:38 - so
44:39 - it will check for both it means
44:42 - it though both should be true
44:44 - so this will print this thing now open
44:47 - the console to check
44:49 - so this makes this as true so write it
44:52 - true here
44:54 - and
44:55 - then it will not glow inside this block
44:57 - so we can write it as false
45:00 - so open the console
45:02 - let's save this and check
45:05 - we refresh the page once
45:07 - we are getting this
45:09 - i am 26 years old and nishant is my name
45:13 - so this is getting fulfilled
45:16 - let's change the condition here
45:17 - obviously change the values
45:20 - so we can say
45:21 - let's say let's make this as
45:24 - let's make this name as uday
45:26 - fine
45:27 - and let's make the edge as something
45:29 - else
45:30 - or let's leave it at 26.
45:32 - so let's save and check what we get
45:35 - so
45:36 - start from the start meaning
45:39 - edge is more than a six no it's false
45:41 - still it's false
45:42 - second block
45:44 - it goes in it goes in it will check this
45:47 - name is nishant no it's not nishan
45:51 - it's uday
45:52 - and the age is 26
45:54 - this one is true
45:56 - but we are using and here
45:58 - so i said previously that if either of
46:00 - them is false it will not go inside this
46:02 - block
46:03 - the both should be true for this
46:06 - so again this should be this will be
46:08 - false
46:09 - then it goes inside here and will it
46:11 - will print this as true
46:13 - so now let's check
46:14 - so this one is false
46:16 - false third one will be true see we are
46:18 - getting this
46:20 - i am less than 26 years old and nishant
46:23 - is not my name
46:25 - so it's fine
46:26 - now let's see how to use or
46:31 - so this is condition
46:32 - this is checking for both conditions
46:35 - but what if you make it or
46:37 - so it will check either of them
46:39 - so if nishant is named and it is under
46:43 - six of either one of them as true is
46:45 - true it will print second one
46:47 - save
46:49 - refresh the page
46:51 - it will say it's printing this
46:53 - let's make it as true so it's true and
46:56 - this one is again false
46:58 - fine refresh once more i will explain
47:02 - it's
47:03 - not more than 26 so it's false
47:07 - then it will come here
47:08 - name is nishant not
47:10 - it's not nishant it's there but the age
47:13 - is 26
47:15 - so it will print this
47:17 - and it will not go inside this block
47:20 - so it will print second one
47:22 - so let's make the edge to be something
47:24 - like
47:25 - more than 26 let's make a 28
47:28 - then it will print this one you are now
47:31 - old
47:32 - save refresh
47:35 - so you have see we will get this message
47:37 - called even now world
47:39 - so now this first head band is getting
47:41 - fulfilled so it's true now
47:44 - then it will not go inside this else if
47:47 - or else block
47:48 - so both will be false
47:51 - see so that's how ternary operator or
47:55 - inline conditional expression works
47:58 - let's say we had a third condition or
47:59 - third statement let's say something
48:02 - is varied or something else
48:04 - then if you want to check it here you
48:06 - have to add it in this false block
48:08 - like this
48:09 - so let's say is married
48:12 - something
48:13 - if it is true we will have to print true
48:16 - or else
48:17 - we have to print or print what is
48:20 - whatever it is we have which is false
48:23 - i think i get a you get what i mean
48:26 - fine
48:28 - that's how ternary operator or inline
48:32 - conditional expression works and react
48:35 - we can also use in html or jsx also here
48:38 - so let's check whatsapp condition
48:41 - so
48:42 - just copy all these things
48:45 - and add it here in curly bracket
48:51 - paste it
48:52 - but instead of console.log we will print
48:56 - it in our h1 tag
48:58 - so we can say
48:59 - h1
49:02 - let's check or let's add this here
49:05 - remove console.log
49:08 - and leave the command
49:10 - then in second one we can print
49:13 - or remove this and we can print h1
49:17 - wait sorry we didn't have to remove this
49:20 - h1
49:22 - let's print this
49:28 - and for second one let's print
49:31 - this
49:33 - remove these things
49:35 - fine
49:38 - and the for the third one wait a sec
49:41 - we had
49:42 - two html tags
49:46 - okay and for the third one we have to
49:48 - print
49:50 - this
49:54 - so what can we do we have to print this
49:56 - fine so paste it here
50:04 - save and
50:05 - see
50:06 - the problem here is
50:08 - this age and name it's only inside the
50:11 - use effect hook scope but not coming
50:13 - here
50:14 - so let me move it outside also or just
50:17 - cut or copy and paste it here
50:20 - and then it will work
50:21 - c
50:23 - so
50:24 - ad78 and name is there
50:27 - so it will go inside this block
50:30 - it will print this as true because yes
50:32 - the age is more than 26 28 26
50:35 - 828
50:37 - let me reduce it to 286 then let's see
50:40 - what it prints
50:42 - it will print this
50:46 - so let me make it an end
50:49 - so it's printing i am okay where it's
50:57 - my name should be here
50:59 - fine
51:01 - we are printing same thing twice
51:03 - see
51:04 - now this is true
51:06 - so it's printing these two
51:09 - so this becomes true
51:11 - and this becomes
51:13 - false
51:14 - outside
51:15 - the user factor
51:17 - not inside there is effect hook
51:19 - so
51:20 - let me change the condition to something
51:21 - else let's make it as
51:24 - what is it the third condition is
51:26 - nissan okay let's make it an ampersand
51:29 - it will not follow because name is not
51:31 - mishan
51:32 - and this will now check for both
51:34 - conditions name and age save you will
51:37 - see this i am less than 26 years old
51:41 - we are printing this
51:42 - and nishant is not my name
51:44 - so this now becomes false and this now
51:47 - becomes true
51:48 - because the values have been changed
51:50 - here
51:51 - so that's how
51:53 - inline conditional expressions or
51:56 - trinity operator works in react
52:02 - so
52:03 - what is even handling first
52:05 - so event handling or functional handling
52:07 - is a method to call functions an event
52:10 - in react
52:11 - using some input or buttons
52:14 - on our using our actions so we can say
52:16 - cons let's create a function first let's
52:18 - say
52:19 - add nums
52:22 - we have a function
52:24 - that basically will add two numbers
52:27 - so
52:28 - let me create a button it will say add
52:32 - numbers
52:33 - save
52:35 - this button is there
52:36 - fine
52:38 - fine
52:39 - so
52:40 - we want to do something like we have to
52:42 - add two numbers let's say
52:44 - console.log let's add 2 n2 as 4 it will
52:48 - be 4.
52:49 - so let's say if this mercedes this was
52:52 - simple html and javascript we have done
52:54 - something like this
52:55 - so on click
52:57 - we have to open
52:59 - codes so downloads
53:02 - we have to call add nums
53:06 - and
53:07 - this bracket
53:08 - but
53:10 - this is not simple html and javascript
53:13 - it's jsx and react
53:15 - so this function will not add numbers
53:17 - let me show you
53:18 - what
53:19 - we have
53:20 - see
53:22 - this property is invalid we have to use
53:24 - this method
53:26 - so add once again so it will not work
53:29 - so instead of on click small on click we
53:31 - have to use this
53:33 - so let me remove this
53:35 - and let's use
53:37 - capital camel case on click
53:40 - opening and closing curly brackets
53:42 - then add the functions here which is add
53:45 - nums
53:46 - nothing else just this
53:49 - see now if you click the button we will
53:51 - see fold on the console
53:54 - see
53:54 - it's for now
53:56 - so that's how this works
53:58 - let me give you one more example using
54:00 - an input element
54:01 - let me create one input here
54:05 - input
54:08 - let's make the placeholder to be wait
54:10 - what i am doing
54:12 - this placeholder should be
54:17 - adds
54:19 - something
54:21 - save
54:22 - we have this input here
54:24 - now let's say we want a function to run
54:27 - every time we type something in the
54:29 - input
54:30 - so we can create a function to say const
54:33 - get input
54:38 - then we have to bind this function
54:40 - to this input
54:42 - if we are using html we will use
54:45 - on change event like this
54:47 - but not here this is not html we have
54:49 - jsx so we will use camel case on change
54:54 - and then we will simply pass get input
54:56 - here
54:57 - all the data that we type will be
54:59 - propagated here in this function
55:02 - get input so let me get the event from
55:04 - here so we can console
55:09 - dot log
55:10 - our event dot target just let's make
55:13 - first event first
55:15 - the event that we are passing
55:17 - you type something let's say one two
55:19 - three four
55:20 - see we are getting all the data from
55:22 - this event like
55:24 - all the data
55:25 - so we want the target
55:28 - so let's say event dot target dot value
55:32 - the value of the target for this input
55:35 - so let's type something like one two
55:37 - three four five
55:38 - then we will get this input here
55:41 - similarly we have other things
55:44 - like if we just add even target we will
55:47 - see something like this
55:49 - so
55:51 - let me add a name property here
55:53 - name of let's say input
55:59 - so we have three things placeholder
56:01 - on change and the name pro for this
56:04 - input
56:05 - fine
56:06 - so if we type something like one two
56:08 - three
56:09 - we will get the whole input here
56:12 - but we want
56:14 - the value
56:15 - so for the name so the value is you have
56:18 - seen how to get the value to get the
56:20 - name of this input we will say in
56:23 - event.target.name like this
56:26 - and if we type this input will be
56:29 - propagated here
56:30 - see
56:31 - this input
56:33 - so that's how event handling works in
56:35 - react
56:37 - so one more thing let's me let let me
56:39 - show you
56:40 - what do we want to pass some values to
56:42 - this add
56:43 - nums function dynamically from the
56:46 - button
56:47 - we will use this
56:49 - it will be a function here we will call
56:51 - a function then add num function
56:54 - then we have to pass some property or
56:57 - some data let's say we want to pass two
57:00 - para parameters 2 and 2
57:02 - then this will come here let's say
57:05 - num1
57:06 - and num2
57:07 - we are using comma to differentiate
57:10 - between them here also
57:12 - so this is one number eight second
57:14 - number let's make it three here
57:16 - so num1 and num2
57:18 - then we can simply pass it in the
57:20 - console num1 plus num2
57:23 - to get the input
57:26 - so let's
57:27 - add numbers and it's 5 see
57:31 - that's how we do it in react
57:34 - how to handle events
57:40 - so a highway 2 array is there of numbers
57:42 - and details
57:43 - number contains numbers from 1 to 10 and
57:46 - you see this detail contains
57:48 - the name and age of 4 people in an
57:50 - object
57:52 - so first let me map the numbers array
57:54 - and if you want to see how map works you
57:57 - have to see my previous videos
57:59 - in the same playlist
58:01 - so we will have numbers
58:03 - dot map
58:05 - let's say number
58:09 - it will return a list tag li
58:12 - and here you will have to print all the
58:14 - numbers
58:16 - so this map will go over each and every
58:18 - item and it will print the number like
58:20 - this
58:21 - but see if you open the console
58:24 - what will what let's see what we see we
58:27 - will see this error message
58:29 - that each child in the list should
58:31 - contain a key prop should have a key
58:33 - prop
58:34 - unique property so in this case all the
58:37 - items are unique from one to ten
58:40 - so to add keys here to re remove this
58:42 - error
58:43 - i will do key
58:45 - and then add the number
58:47 - here so now this key will take the
58:50 - number
58:50 - which is 1 to 10
58:52 - so it will be unique and this message
58:54 - will not be here anymore
58:56 - so refresh the page
58:58 - see it is not here anymore
59:00 - so see this is the first scenario let me
59:03 - enter the second scenario where all the
59:06 - items
59:07 - or all the elements
59:09 - should be
59:10 - should be not unique should be same
59:13 - so in that case what can we do
59:15 - so let me map this details first
59:19 - and
59:20 - we have a detail we will have a detail
59:22 - here
59:23 - let me remove the key from here and this
59:25 - number and
59:27 - num add detail and place the number
59:30 - see
59:31 - refresh the page
59:33 - we will see this error that
59:35 - objects in objects are not valid as
59:37 - react child
59:39 - so we have to render it using keys
59:41 - okay fine the problem is
59:44 - we have to use the name first also
59:45 - that's this error
59:48 - name
59:50 - so this name is also key
59:52 - this name has a key
59:54 - let me add one more list here
59:58 - but we have to wrap them in a fragment
60:01 - because
60:02 - two jsx elements cannot
60:05 - exist without the parent
60:07 - so
60:08 - add it here
60:10 - add one more list tag
60:12 - this should be not name and age now we
60:14 - will see all the edges here
60:16 - let me comment this temporarily
60:19 - see we have all the names and ages open
60:22 - the console and i will see the same
60:23 - error
60:24 - for the keys
60:26 - refresh the page
60:28 - see we are saying this
60:30 - each child in a list should have a
60:31 - unique key prop
60:33 - but we don't have anything that's unique
60:34 - here
60:35 - let's say we have a name but name can be
60:38 - same for two people
60:40 - we have a age and this could be same as
60:42 - same as well
60:43 - so let me demonstrate this to you
60:46 - let me add
60:47 - a property one more property with the
60:49 - same name and h of challenge
60:51 - then we will try to add a key using the
60:54 - age let's see what we get
60:56 - so
60:57 - first make this a div
61:00 - and
61:01 - copy and paste here
61:04 - then let's add the key prop
61:07 - and the key should be the age
61:10 - so
61:11 - detail dot age
61:15 - see we will see that
61:17 - warning encountered two children with
61:19 - same key 29 k should be unique
61:23 - so that the components maintain their
61:25 - identity and all so we are getting this
61:27 - error
61:28 - so in this case we have two options
61:31 - first we can add one ids here so id
61:35 - let's say one
61:37 - then here should we add ids 2
61:40 - and then
61:41 - 3
61:43 - then
61:44 - 4
61:46 - and then there at the last we'll have 5
61:50 - then we can print the key as simply
61:52 - detail.id detail.id
61:55 - now this error won't be here
61:57 - see it's not here anymore
61:59 - second scenario is that if we don't have
62:01 - the ids let me revert it back or leave
62:03 - it let's say we don't have the ids let
62:06 - me comment this
62:11 - alt
62:12 - alt alt
62:13 - alt
62:15 - let me
62:16 - move it alt alt alt alt
62:20 - shift alt alt
62:22 - again
62:23 - alt alt alt alt
62:27 - alt
62:28 - shift
62:29 - aerospace back remove all the ids
62:32 - now see
62:34 - let's say we don't have the ids in this
62:36 - current scenario
62:38 - therefore we can use an index property
62:40 - here
62:40 - so this map also returns one index that
62:43 - we can use as the key which will be
62:46 - unique
62:46 - throughout the
62:48 - array
62:50 - see not the error has been disappeared
62:52 - but this index thing is a last resort
62:55 - kind of thing
62:56 - so if we don't have the id only then we
62:58 - have to use index or else add the ids
63:00 - here in the array or in the object
63:03 - or in the api
63:04 - so that's how keys works in react and
63:07 - how to
63:08 - fix them so mainly
63:10 - the keys are called the name and age
63:13 - and in this case all the items are
63:15 - called keys
63:18 - fine so that's all about keys in react
63:23 - here i for input fields from name to it
63:26 - name age hobbies and date
63:28 - and one empty error function
63:30 - first let's get data from the form
63:32 - inputs this is the first step
63:35 - so we will use an event called on change
63:37 - event
63:38 - that will run when the input field value
63:41 - changes or we type anything in the input
63:43 - field keep that in mind
63:45 - so we will use this get input function
63:47 - in the on change event
63:49 - this will pass an event
63:52 - argument here in the function
63:55 - then we can simply console this thing
63:58 - this event
64:01 - so open the console
64:05 - let me type my name in the name field
64:07 - called nishant
64:08 - see we are getting all this data here
64:11 - all the data
64:13 - most of which we don't need
64:15 - so to fix this or to like
64:18 - yes fix this
64:19 - we can only send the data we need
64:22 - directly so let's say event
64:24 - we can send let's say you want the value
64:27 - that we type lot which is target dot
64:30 - value
64:31 - value
64:33 - we can do this
64:34 - here let me make the event to value
64:38 - and here as well now we will only get
64:41 - the data that we're typing the text
64:43 - so we can add nishanth here
64:45 - and we will get that
64:48 - so let me repeat this all over
64:51 - the first step is
64:52 - done i mean the first lesson for forms
65:04 - now what can we do is let me so let i be
65:08 - added the unchanged event here
65:10 - let me also add the name property
65:13 - so each
65:15 - of the input fields will have a name so
65:17 - let's say this will be a name
65:19 - this should be the age
65:24 - this should be
65:26 - age
65:28 - sorry not age let's say name this should
65:30 - be
65:31 - hobbies
65:33 - and they should be uh date
65:38 - so all of these now have a name as you
65:40 - can see
65:42 - fine
65:43 - let me also pass the name
65:46 - this will be event dot
65:49 - target dot
65:51 - name
65:52 - like this
65:54 - so let me pass
65:56 - them all over
65:58 - so this name is also important
66:00 - i will show you why
66:04 - see
66:04 - now we have the name
66:06 - basically we are passing to values here
66:11 - okay we are passing to values like value
66:14 - and the name so we have to receive two
66:16 - values so name
66:20 - if we console the name here let's say
66:22 - what we get
66:23 - refresh the page
66:26 - we can say name as nishant
66:28 - and if we type even if you're typing in
66:30 - the name field this field we will get
66:33 - the corresponding name if it is age we
66:36 - will get the age
66:38 - age we are getting and same for hobbies
66:40 - and data
66:43 - let me make
66:44 - okay fine
66:45 - now let me
66:46 - show you the types of the input fields
66:48 - we will can have the type
66:50 - prop
66:51 - and we can add
66:53 - text
66:54 - for the alphabeticals like nishant or
66:57 - like if we want text here simply numbers
67:00 - and text i mean numbers and alphabets
67:04 - for the age which could they should only
67:07 - be a number
67:08 - so we can add the type as
67:10 - type as equal to
67:14 - number
67:15 - like this
67:16 - for the hobbies so now this is a number
67:20 - and refresh the page
67:22 - see
67:23 - we cannot type alphabets here we can
67:25 - only type a number
67:26 - like this fine so for third one we can
67:30 - also add
67:31 - the text as same as the name because
67:34 - there should be a text as well
67:35 - but for the first one we can add
67:38 - the date
67:40 - type so we have so many types like input
67:44 - date color so let me show you let me add
67:47 - or
67:48 - let me just make this type as
67:50 - input
67:51 - this now will be a file upload thing
67:54 - type is okay not input file file yes
67:58 - this should be a file upload thing
68:01 - so revert it back and let me remove this
68:03 - why
68:04 - so we have four fields and all of them
68:07 - have the type
68:08 - and the name
68:10 - with the on change events
68:12 - so now let me
68:15 - console the value
68:18 - so console.log
68:21 - the name and value
68:22 - small value i mean
68:25 - value
68:26 - open the console
68:29 - or let me do it like this to make sure
68:32 - we have name
68:34 - colon and the value
68:37 - wrap it in a very like thing then it
68:40 - will
68:40 - not work okay okay okay
68:44 - let me wrap it in an object like this
68:47 - then this should be an area like this
68:49 - like this so we will have
68:51 - the name
68:52 - paired with the value like uh
68:55 - key value pairs so this name will be the
68:58 - key that we will store and the valuable
69:00 - the value that we will have
69:03 - so refresh
69:05 - me add my name nishant and see
69:08 - the name is the key and this nishant is
69:11 - the value
69:12 - c
69:14 - fine
69:15 - now let me store them in an
69:17 - array sorry not an array let me store
69:19 - them in a object so if you want to show
69:23 - all the values or store the values in a
69:25 - state you can create multiple states
69:28 - for us we will have four states for name
69:30 - age hobbies and date but i will show you
69:33 - how to do it using only one state an
69:35 - object state
69:37 - you can because for example if you
69:39 - create four states
69:41 - then you have to assign all the four
69:43 - state and set state in all the on change
69:46 - events which will be lengthy so let me
69:48 - introduce you to a new method
69:52 - so we can say const
69:54 - let me create a state an object state so
69:56 - let's say
69:57 - obj data
69:59 - and set
70:00 - obj data in campbell case so you state
70:04 - this will be an object just like
70:07 - this
70:08 - so we will we will keep storing all the
70:11 - data in an object
70:14 - yes wait what happened okay yes we'll
70:17 - keep storing all the
70:18 - object properties in the set object in
70:21 - the object data state
70:23 - so we have to store
70:25 - this in an variable first so let's say
70:27 - let
70:28 - data equal to
70:30 - just copy
70:31 - this whole thing
70:33 - cut and paste
70:35 - remove this
70:36 - now this data will contain our
70:39 - data like this
70:40 - so for example if we console the data
70:42 - here clg
70:44 - console.log data
70:46 - let's see what we get
70:48 - refresh
70:50 - let me add the name called nishant
70:52 - we are reading the name and
70:55 - the value like well sorry we are getting
70:57 - the key
70:58 - name and the value nishant here like
71:00 - number eight
71:02 - if we type the age 26 we will get the
71:05 - age only
71:06 - like this
71:08 - we are not getting the name anymore
71:09 - because it has been overridden by the
71:11 - age
71:12 - so we have to store this data
71:16 - in this set
71:17 - in this object data state
71:19 - so we can do
71:21 - small bracket then curly bracket
71:24 - then we will have to merge them so for
71:26 - example
71:27 - let's say we are storing this data here
71:29 - using using spread operator like this
71:33 - now we can console data the data outside
71:37 - like this
71:38 - now let's see what we get it refresh the
71:40 - page
71:41 - so let me explain once more what i am
71:42 - doing here
71:44 - we are merging the data using key value
71:46 - pairs in the data variable let data then
71:49 - we are storing the data as object in the
71:51 - set object set
71:53 - in the object statistic i mean then we
71:55 - are consoling it here
71:57 - let me add my name called
72:00 - nishanth so it's here c
72:03 - so it's getting stored in the object
72:05 - data state successfully
72:07 - if we add the age
72:09 - the previous data will be overwritten
72:11 - like this we don't see the name anymore
72:14 - but we have a name in the input as well
72:18 - so to solve this we will have to add the
72:21 - data and then merge with the previous
72:24 - data
72:24 - so name will be the previous data so
72:27 - we'll merge it using like this
72:30 - triple dots then object data
72:33 - we will merge the both objects
72:36 - so the previous data now is called
72:38 - nishant and the new data is called this
72:41 - let me start from the beginning
72:44 - let me add the new data
72:46 - which is nishant
72:47 - and it's here in the console and the
72:50 - state of object data over the data
72:53 - now let's say we want to add the age
72:55 - now this nishant is now the previous
72:58 - data and the age is now the new data
73:01 - let me add the age
73:02 - 26 and see they have been both merged
73:06 - together
73:07 - the previous data and the new data
73:10 - now
73:11 - this both
73:12 - properties like agent name they are the
73:15 - old data previous data and if you write
73:18 - the hobbies
73:19 - this will be the new data
73:22 - so we can say
73:23 - let's say hobbies is
73:25 - creating
73:27 - videos
73:29 - like this so now this is the
73:33 - old data
73:34 - like this is the old state now
73:37 - and if we add the date
73:39 - here this will be the new state
73:41 - so all these three fields are in the
73:42 - world state and this one will be the new
73:45 - state let me choose some date here
73:48 - 20.
73:50 - now we have the data as well and all
73:52 - these four are now in the old data which
73:54 - is object data
73:57 - so that's how it works
73:59 - that how we can minimize
74:01 - the
74:02 - code
74:04 - so what can
74:06 - we do now so see
74:08 - let's try to submit the form or let me
74:11 - yes so we can they we can create a
74:12 - function called const submit
74:17 - so we can use the submit function in two
74:19 - ways
74:20 - let's say i want to sum in data and show
74:22 - in in the console or send the data to an
74:26 - api
74:27 - so we can say console.log
74:29 - this
74:30 - object data
74:32 - we have a button here that can run the
74:34 - function on click event
74:36 - using one click event so we can say
74:38 - on click
74:40 - submit button submit function
74:43 - now let me try from the start write the
74:46 - name nissan age 26 hobbies
74:50 - let's say recording videos
74:55 - and the date
74:57 - from today's date
74:59 - click submit
75:01 - the data will be here
75:02 - in the console line number 13
75:05 - here
75:06 - another method is
75:08 - not
75:08 - using this submit
75:11 - on not using this only given
75:14 - we can use
75:15 - onsubmit on a form tag here
75:18 - so wrap
75:20 - online puts in a form tag like this
75:23 - this will also work
75:26 - so
75:27 - make the button inside as well
75:29 - so now all of these inputs will be
75:32 - inside this form
75:34 - or what we can do we can add the form
75:36 - outside the div because the design is
75:39 - breaking
75:41 - so let's check
75:46 - so let's check if it is working or not
75:49 - yes it's working
75:51 - so now in the form we have to use
75:54 - on submit
75:56 - one event on submit and let me assign
75:59 - submit function here
76:02 - but still now it will not work because
76:04 - this button has to be a submit type so
76:07 - type should be
76:10 - submit
76:12 - so if you open the console now
76:16 - let me type the name
76:19 - age
76:21 - hobbies and the date
76:23 - now click submit
76:25 - and see
76:26 - if you submit it's coming here but
76:29 - instantly it's getting disappeared
76:32 - so here what we have to do is we have to
76:34 - do
76:35 - a thing so let's say
76:37 - we have to send the
76:40 - okay
76:41 - so we have to do this so this should
76:43 - contain an event param
76:46 - or e
76:47 - then you can do event
76:50 - dot prevent diff
76:52 - prevent
76:55 - default to prevent the default
76:58 - function here so now click or just add
77:01 - the name
77:02 - the age
77:04 - hobbies
77:05 - and the date
77:07 - now click submit
77:09 - it's here now it's not getting refreshed
77:12 - automatically if we just comment this
77:15 - and now click submit the form will be
77:17 - refreshed
77:18 - see
77:19 - that we don't want fine
77:22 - all right
77:23 - so we can add one more button here that
77:26 - can be used to reset the form
77:28 - let me also show you that it is set
77:31 - and the button type will be reset
77:35 - if you click the button of reset the
77:37 - whole form will be reset
77:40 - add the name
77:41 - the age
77:43 - hobbies and
77:45 - some date
77:46 - now click submit
77:48 - it's here now let me click the reset
77:50 - button
77:52 - see all the data has now been reset so
77:54 - that was how to use react forms or forms
77:58 - in react
78:02 - so for example let's say we have three
78:04 - fields here
78:05 - name age years of experience
78:08 - these three are simple but let's say we
78:10 - had
78:11 - like 10 or 11 inputs
78:13 - in that case
78:15 - if we want to get data
78:17 - how to do that
78:18 - we have to create let's say we had 10
78:20 - inputs
78:22 - then we had to create
78:23 - 10 different states for 10 inputs for
78:27 - one for each input for example for name
78:29 - we have one state for age we have one
78:31 - state
78:32 - for this we have one state and so on but
78:34 - here we will show i will show
78:36 - how to do it using only one state and
78:38 - one function
78:40 - that's very simple
78:42 - first of all we will create a function
78:44 - called
78:45 - get input
78:48 - or let me make it get input value like
78:51 - this
78:53 - like this like this
78:55 - fine
78:56 - now let's add the name properties here
79:00 - that's very important so this input of
79:02 - name
79:03 - will be have a name of name
79:05 - this input we have this input of age
79:09 - will have the name of h and this one as
79:12 - years of experience we can say yoe
79:15 - like this
79:16 - so
79:18 - it's done all the three have names
79:20 - now let me assign
79:22 - the get input values function using on
79:25 - change event on these
79:27 - inputs like
79:29 - this
79:33 - or if you want you can also do directly
79:36 - call the whole function
79:38 - like this one change
79:41 - now
79:42 - this in this this this this this on
79:45 - change event let's say we type something
79:47 - in the here like nishant this will send
79:50 - some data to the well do the function
79:53 - here we can mark it as event
79:57 - let's mark it as data for your
79:59 - convenience
80:00 - and for mine
80:01 - fine
80:03 - if we console.log this data we will get
80:06 - all the information about the first form
80:08 - field if we type in the name
80:12 - so let me show you
80:13 - bring this down
80:16 - console
80:19 - let me add my name called nishant
80:21 - so we will have all these things here
80:25 - bubbles cancelable blah blah blah blah
80:27 - blah blah fine
80:28 - it's done but we need two things here
80:33 - so we need this a data dot
80:36 - target
80:38 - dot value
80:41 - so we need only the value first
80:44 - i will show more later
80:46 - but
80:47 - soon
80:48 - we have the name nishant because we're
80:50 - typing nishant here
80:52 - if we type page we will see the age
80:55 - from the second field years of
80:56 - experience let's say 2 it will show up
80:59 - here
81:00 - here
81:01 - here fine
81:02 - but as
81:04 - i did here we also need the name
81:07 - to get the value name or input name we
81:09 - can just make in turn into target name
81:13 - now if you type the name in the first
81:15 - field you will not get the value we will
81:17 - get the name this name if we type age we
81:21 - will get this age
81:23 - just like that
81:25 - so
81:26 - we have the name and the value
81:30 - we also have the id i think so let's try
81:32 - id
81:33 - refresh the page
81:35 - so let's say we add the name of nishant
81:37 - it's empty um
81:40 - so i think
81:40 - idn name works the same so let's say if
81:43 - we add the id of
81:45 - name
81:46 - let's see now what we get
81:49 - so let's add the name nishant and the
81:52 - ids name here so this id
81:54 - and name props works the same
81:58 - so we will use name here
82:00 - fine
82:01 - then
82:02 - what can we do um okay so we are getting
82:04 - the data but let's restructure this data
82:08 - and we will have to we have to extract
82:10 - the name
82:12 - and value from this data
82:14 - so we will do
82:15 - this let we will create
82:18 - two variables this is called structure
82:20 - in javascript
82:22 - we will create the name and value
82:25 - from this data
82:27 - like this
82:29 - and it's done now if we console
82:32 - the name
82:33 - we will get the name
82:36 - refresh
82:38 - and the name nishant okay we are getting
82:40 - undefined hmm
82:42 - okay data.target we need to do here yes
82:45 - because data is not sufficient now i'll
82:48 - get the
82:50 - name here
82:51 - so at the name nishant and we are
82:52 - writing the name here successfully
82:55 - let me draw value
82:58 - let me try value nishan and the name is
83:01 - here nishant
83:02 - we have to structure them properly
83:05 - now what we will have to do is we have
83:07 - to
83:08 - create
83:10 - a
83:11 - variable called let
83:13 - let's say input
83:15 - we have to mark
83:17 - these two inputs as key value pairs
83:20 - like
83:21 - this open curly brackets
83:23 - then in this array we'll have the name
83:26 - as the key
83:27 - and the value as the value
83:30 - so this is the key and value just like
83:32 - in an object we have key value pairs we
83:34 - have this here
83:36 - if we clg or console log
83:38 - this input let's see what we get
83:43 - so at the name nishant we are reading
83:46 - the name as key value players here if we
83:48 - add the h we will get the age like this
83:51 - fine
83:53 - now let's create a state just like we
83:56 - discussed one single state not three
83:58 - states
83:59 - for three different fields so we will
84:01 - have to import the use state hook first
84:04 - use state hook like this
84:08 - let me create a state here let's say
84:10 - cons
84:12 - data okay let's say
84:14 - inputs and set
84:18 - inputs
84:20 - equals to use state let me make this
84:22 - edge
84:23 - and
84:25 - what can we make this as object like
84:27 - this
84:29 - or we do we need an object or do we need
84:31 - an array um
84:35 - what we have to do here is we have to
84:37 - set it inside let's do with object it
84:39 - will work
84:41 - then we will set
84:43 - this
84:44 - set input
84:46 - then we will set this input in this
84:48 - input state
84:49 - like this but we will have to use like
84:52 - this
84:52 - this input is a
84:54 - object and they will we will merge it
84:57 - with the previous object
85:00 - so we'll merge
85:04 - the inputs with the input state like
85:06 - this
85:07 - now we have a dynamic field here dynamic
85:09 - input fields
85:11 - and we don't need to create 10 states
85:12 - because
85:14 - we have done it with only one
85:16 - so if we console.log
85:18 - the input state
85:20 - so initially it's empty because our
85:22 - three fields are now empty
85:26 - so let me add the age sorry we let me
85:28 - add the name
85:29 - then the age
85:30 - then the years of experience
85:33 - and now we are getting all of them in
85:35 - one single state
85:36 - so
85:37 - we can show them using this input state
85:40 - let's say you want to send data to an
85:42 - api we can simply send this input we
85:45 - don't have to send
85:47 - name as name ages age and years of
85:49 - experience as years of experience
85:52 - so that's how it works
85:54 - dynamic inputs in react
86:01 - so mainly we have three ways first way
86:03 - is called external styling the way we
86:06 - are using it right now and the commonly
86:07 - used way
86:09 - see we have this css file that's getting
86:11 - imported into app.js
86:14 - then we have a class name in this div
86:16 - of app
86:17 - and we are rendering the style here
86:19 - using app cue app class name
86:22 - let me demonstrate it from the beginning
86:24 - we can make an h1
86:27 - that will say hello world
86:31 - like this we will have h1 here one h1
86:34 - so
86:35 - let me make two more adjustments
86:38 - or let me just change the text here this
86:40 - should be
86:41 - external
86:44 - tile
86:46 - link
86:48 - copy this
86:50 - add it
86:51 - two more times this should be
86:54 - internal
86:55 - inter
86:57 - null
86:57 - this should be in line
87:00 - so these are the three types of styling
87:02 - external internal and inline in react
87:06 - so
87:08 - this external is clear i think we can
87:10 - simply add a class name of
87:12 - let's say
87:14 - external
87:18 - external copy the class
87:21 - add it here
87:22 - and then we can say
87:25 - we can say
87:26 - let's say
87:28 - color
87:29 - of red
87:30 - the color of the first
87:33 - h1 will change
87:34 - which is external styling
87:37 - right
87:38 - so the cache is we have to import our
87:40 - app.css file here so if we comment to
87:42 - this
87:44 - the starlight will not work
87:45 - because this yes and index.css sorry
87:49 - i've got cs file they are not linked
87:51 - together
87:53 - so this was the one type of styling
87:55 - external
87:56 - now let me talk about internal styling
87:58 - where we will write the styling in our
88:01 - app itself the js file
88:04 - we can create a const
88:05 - we will say
88:07 - styles
88:09 - equal to an object
88:11 - inside we can simply say this
88:14 - let me make
88:15 - the class name of internal then
88:19 - a colon then again opening object
88:21 - brackets
88:23 - let's say the color should be red here
88:25 - fine
88:26 - then
88:27 - here in the internal styling we can say
88:29 - style keyword we will use this
88:31 - we will use the styles const
88:34 - dot internal
88:36 - we need to target
88:38 - the color of red which is inside
88:40 - internal save
88:42 - and see second one is now red let me
88:44 - make it to
88:46 - blue
88:47 - to make it clear see it's now blue
88:50 - so this was internal styling
88:53 - third one is called inline
88:55 - where we write
88:56 - styles
88:58 - or the style fine
89:00 - and we write directly the styles inside
89:02 - for example let's say color
89:05 - we can say green
89:07 - save
89:08 - and it's now green
89:11 - like this
89:12 - we can have if you want to add multiple
89:14 - styling here let's say we have to change
89:16 - the background color of
89:17 - this third h1 we can say
89:20 - background color
89:23 - has
89:24 - black
89:26 - black let me type
89:29 - black
89:30 - and it's now black like this
89:32 - you must be asking why do you use
89:35 - the
89:36 - internal and inline stylings i will show
89:40 - you
89:41 - let me create a button first here
89:43 - button
89:45 - that will say
89:47 - toggle theme
89:49 - suppose we are making a app or maybe
89:52 - let's say we just
89:54 - we're just adding
89:55 - a function to change the theme of the
89:57 - page like from dark to white and to
90:00 - white to dark
90:01 - so
90:02 - we have to we have a button here of
90:04 - toggle theme
90:05 - let me create a function const
90:08 - toggle theme
90:10 - this will be an arrow function
90:13 - this button for a function will be on
90:15 - this button
90:17 - so on click
90:18 - this function will run when we click the
90:20 - button of toggle theme
90:22 - fine
90:23 - we also need one state so let me create
90:25 - it which will be toggled
90:27 - on the button click it will be called
90:31 - uh
90:32 - let's say
90:34 - theme
90:35 - and set
90:37 - theme you can choose any name you want
90:41 - equals to use state
90:42 - this will be a false value first
90:46 - false value
90:49 - okay use state is not defined we have to
90:52 - use
90:52 - react dot used
90:55 - so it will be a boolean state and on the
90:58 - button click
90:59 - this function this state name will
91:01 - revert so
91:03 - the state value will revert i mean so
91:05 - for example if it is
91:07 - false it will be true and vice versa
91:11 - now we will use this theme to change the
91:14 - styling of the
91:15 - page
91:16 - as per the theme
91:18 - so for example let me remove this
91:21 - or what can we do yes in the style
91:23 - we will do
91:25 - theme but first let me create one more
91:29 - internal css styling dark
91:32 - here it will be background color
91:34 - as not black white
91:37 - and color will be black color
91:40 - will be black
91:42 - we need one more light
91:46 - here it will be different
91:48 - background color will be black and color
91:50 - will be white
91:51 - opposite to dark
91:53 - same styles but it's not okay fine
91:56 - so
91:57 - let me remove this internal styling
92:00 - so i will implement the dark and light
92:03 - theme like this so if the theme
92:05 - is true
92:06 - okay let me
92:07 - okay if the theme is false initially
92:11 - we will show the light theme and how to
92:14 - shoot the light theme we can say style
92:17 - or styles dot
92:19 - light
92:22 - light
92:24 - l i g ht
92:26 - or else we can so we can show i mean
92:29 - styles dot
92:31 - dark
92:32 - fine
92:33 - it's done
92:35 - now on click of the button the theme
92:37 - will change it will
92:38 - toggle click the button
92:42 - okay it's only working in the second h1
92:45 - we have to make it
92:46 - outside the h1 i mean in the main app
92:49 - here so just add it here
92:52 - refresh the page so initially it's him
92:56 - not light
92:57 - fine
92:59 - so if it is false
93:01 - wait a second
93:03 - it is false initially fine
93:05 - so it's if it is false i will show this
93:07 - or this
93:09 - click the button toggle theme
93:12 - so now it's true
93:15 - wait a second i think we have to remove
93:18 - this let me check
93:20 - because this doesn't make any sense
93:22 - it falls
93:24 - so
93:25 - we are showing
93:29 - if it is true
93:30 - we can show
93:32 - this
93:33 - or this
93:34 - wait a second
93:36 - okay background color okay we did
93:38 - something wrong here they should be
93:40 - light
93:41 - and they should be dark we did opposite
93:44 - now initially
93:45 - it's black because
93:48 - this theme is false the value is false
93:51 - so we are showing this else one and if
93:53 - you want to know how this question mark
93:55 - works please see my video about
93:58 - inline conditional operators or ternary
94:01 - operator
94:02 - refresh the page once
94:04 - now toggle theme
94:06 - okay let me do this
94:08 - just remove these things first
94:11 - so
94:12 - we are having removing we remembered
94:14 - that and this one as well
94:17 - so h1s are now all white refresh
94:20 - see it's white
94:22 - now the h1 and the background is black
94:25 - if we click toggle theme it will revert
94:28 - the h1 is now black and the whole screen
94:31 - is now white
94:32 - so in that case we use
94:34 - the internal styling
94:36 - or inline
94:38 - so for inline we can do this as well
94:41 - so let's say
94:43 - in this same style we can do this remove
94:47 - all these things if theme is true then
94:49 - question mark
94:51 - then we can say
94:52 - um
94:54 - this
94:55 - add this
94:57 - fine but
94:59 - wait a second
95:04 - we have to do it like this so if the
95:06 - theme what is the theme
95:08 - this theme
95:11 - if it is true
95:14 - we can create one more curly bracket
95:16 - and we can write our styles inside it
95:19 - that will say like
95:21 - color
95:23 - if it is true it means
95:25 - so if it is false let me bring the color
95:28 - to black
95:30 - text color
95:32 - and
95:33 - background color
95:35 - as
95:37 - white
95:39 - and outside
95:40 - this style curly bracket we will add one
95:43 - more
95:44 - for
95:45 - white and black so
95:47 - this color will be white
95:50 - and the background color will be
95:52 - black
95:54 - save and now it will work
95:56 - let me
95:58 - remove this
96:00 - here
96:02 - and just get the style from here and add
96:05 - it in this main div
96:07 - now let's try
96:09 - toggle theme
96:11 - so it's now white see toggle them again
96:14 - it's now black so this is how it works
96:16 - in both scenarios for inline and
96:18 - internal
96:20 - so let me add it here
96:22 - get the
96:23 - things and i will push the code
96:25 - for you to read
96:27 - fine
96:30 - save it and that's all for now
96:33 - also remember don't forget to
96:36 - add the advert css
96:39 - import here
96:40 - or else it will not work
96:46 - what is the control component in there
96:48 - for example let's say we have two inputs
96:51 - and we are handling the data inside our
96:54 - component
96:55 - in the same component
96:57 - but in uncontrolled components we handle
96:59 - the data from the dom we get the data
97:02 - from the dom using a reference value
97:04 - so let me show you now how to do it
97:07 - first for uncontrolled components
97:10 - for example
97:11 - let's say we have to input name an h
97:13 - like this
97:16 - localhost okay we have name image like
97:18 - this let's say we want to
97:21 - add reference to the both
97:23 - we will create a name variable called
97:25 - name
97:26 - equal to then we will use
97:28 - we'll create a reference for the name we
97:30 - will use react dot
97:32 - create ref
97:34 - like this
97:36 - then we can say for age we can say let
97:38 - age
97:40 - equals to react dot create ref
97:43 - create ref
97:45 - so this will create the reference for
97:46 - name and age
97:48 - fine
97:49 - now i will assign this references to
97:52 - the inputs
97:54 - using the ref keyword ref equals to
97:56 - here will be the name
97:58 - and in second one here will be the age
98:01 - sorry age
98:02 - yes
98:04 - now
98:05 - let me now show you to console
98:07 - now let's console the log name
98:10 - console.log
98:12 - name
98:14 - dot current dot value
98:17 - and here console.log
98:20 - name dot current dot age
98:24 - let's try to see what we get
98:26 - we should get an error
98:27 - because we don't have any data inside
98:29 - them
98:30 - if we check in the inspect element
98:33 - we will something like
98:34 - this
98:35 - cannot treat properties of null reading
98:38 - value
98:39 - so
98:40 - if we remove them
98:42 - wait okay i think
98:46 - let's just add niman age first
98:51 - age
98:52 - this should work now yes
98:54 - now refresh the page we will get empty
98:57 - current values here
98:59 - so we can say name dot current that will
99:02 - be null
99:03 - so it doesn't matter
99:04 - i'm just gonna type my name here in the
99:06 - nishanth
99:07 - see
99:08 - we are not getting anything
99:10 - if we type some edge
99:12 - still nothing
99:13 - we are not getting the console up
99:14 - because
99:15 - our state is not getting refreshed sorry
99:18 - our component is not getting refreshed
99:20 - and then we cannot see the name image
99:24 - to do that we can simply create a
99:25 - function if you want to see the name
99:27 - image
99:28 - let's say submit
99:33 - and add a function put them inside here
99:36 - this name images
99:38 - then on this button we can simply on
99:40 - click event this
99:42 - one click the submit button function i
99:45 - mean
99:46 - now if we close if we just click submit
99:48 - button only then we can see a manage
99:50 - because only then our dom is getting
99:52 - refreshed click submit
99:55 - and see we are getting these two
99:57 - so
99:58 - we have to do name dot current
100:01 - dot value
100:03 - and h dot current not value
100:06 - okay
100:08 - value
100:10 - now let's check
100:11 - click submit
100:13 - now we're reading the values of nishanth
100:14 - and 25 so my like the main point here is
100:18 - in the unknown components
100:21 - we don't have or we don't have the
100:23 - privilege
100:25 - to
100:25 - get our states updated or component
100:28 - updated automatically
100:30 - if we are creating a reference like this
100:32 - but now let me show you control
100:34 - components that we generally use
100:38 - okay
100:39 - so we will create a use statement first
100:42 - or wait a second
100:44 - okay yes let me create i use statehook
100:48 - or do we need it no we don't need let me
100:50 - create a function so const
100:53 - get input
100:56 - or let's say git name
100:59 - get name equal to an arrow function
101:03 - fine
101:04 - now
101:05 - we will not use this okay let me just
101:08 - copy and
101:09 - paste it once more
101:11 - so this will be
101:13 - on
101:14 - let me just try it and
101:16 - uncontrolled
101:21 - component
101:23 - is that component
101:26 - component
101:28 - spelling is wrong
101:29 - components
101:31 - let me commend this
101:36 - then inside the second one let's write
101:39 - control
101:42 - come
101:42 - [Music]
101:44 - in let me comment this also because
101:48 - here we having we are having
101:50 - uncontrolled components that we showed
101:52 - before
101:53 - and here control components remove this
101:55 - rift
101:56 - and this edge
101:58 - we can also command this temporarily for
102:00 - now here fine
102:02 - now we have only one name image
102:04 - here inputs fine
102:07 - so for the get name
102:09 - or uh okay we can use on change event
102:12 - here for control components we use on
102:15 - change event
102:16 - so if we type something this git name
102:19 - function will run
102:21 - and it will pass the value so we can say
102:23 - event
102:25 - here we can simply console.log the event
102:30 - event.target.value
102:32 - target
102:35 - dot value like this
102:38 - okay fine now let's check
102:40 - refresh the page type something in a
102:43 - name like say nishant
102:45 - so see
102:46 - here we are reading that name
102:49 - if we type n and we'll come here then
102:51 - and i such so it's getting appended
102:53 - every time we type inside it and the
102:56 - same thing is for
102:58 - the age
103:00 - so we can say get age
103:03 - here should we
103:04 - add on change
103:08 - on change
103:12 - event get h
103:14 - now in the age we will see the age if we
103:16 - type the age let's say we type
103:18 - 2 6
103:20 - so now we're getting the h
103:22 - now in this case our component is
103:24 - getting
103:25 - refreshed or what is it called
103:29 - here it should be the word our component
103:32 - is getting um updated
103:35 - where is it where is it where is it
103:37 - okay this is not here okay okay
103:39 - okay
103:41 - okay
103:42 - it's not here so you have to believe me
103:44 - in this case our component is getting
103:47 - refreshed but in the previous case of
103:50 - create riff our component will not be
103:52 - refreshed because we are just getting
103:54 - the value
103:55 - from the dom
103:57 - so that's what
103:59 - that's what is
104:01 - controlled and uncontrolled components
104:04 - in react
104:09 - first of all what is what's well done
104:11 - the virtual dom or v dom is a concept
104:13 - where the entire ui
104:15 - is being kept in the memory
104:17 - and it's being synced with a real dom
104:20 - now how it works
104:22 - let's say we have some state and it
104:24 - changes
104:26 - then the component will render again
104:28 - and again
104:29 - every time some state changes
104:32 - if the state is changing and the
104:34 - component is getting red ended
104:36 - the virtual dom will be updated as well
104:39 - now if the virtual dom is getting
104:40 - updated it will be compared to the
104:42 - real-time
104:44 - like this
104:45 - we have the blue nodes the previous
104:47 - nodes on the left
104:49 - the left is the entire virtual dome and
104:52 - on the right we have the real talk
104:54 - so this blue nodes are the data what is
104:57 - the ui
104:58 - before
104:59 - state updation or before we're rendering
105:01 - the component
105:03 - let's say we change something and saved
105:06 - the component will be rendered again
105:09 - and we have we will have this grey nodes
105:11 - here
105:12 - the new nodes after state
105:14 - update now
105:16 - the entire virtual dom will be updated
105:19 - or will be compared to the real dom
105:22 - like this
105:24 - so it will check we already have the
105:26 - blue nodes here in the real dom
105:28 - we don't need to change the blue nodes
105:31 - we only need to change the gray nodes
105:33 - also called updated new nodes
105:36 - then it will append the gray nodes to
105:39 - the real dom like this
105:41 - now this becomes the new real dome
105:44 - and
105:45 - nothing else will change only the
105:47 - updated nodes will change
105:49 - this grey nodes updated new nodes
105:52 - and the entire process is called
105:55 - reconciliation in react
105:57 - so that's virtual dom and how it works
106:04 - so first of all let's see what is in an
106:06 - html
106:07 - so in html is a property
106:10 - that that prints or displays all the
106:13 - contents of a element
106:16 - with the tags html tags
106:18 - let's say for example we have a let
106:20 - variable
106:21 - it has a data let we have let a time in
106:25 - let's add
106:27 - this this is called string literals
106:30 - fine
106:31 - so inside the data
106:33 - we have p tags
106:35 - that says this is
106:38 - my home save this
106:41 - see now if we print data
106:43 - in this div
106:45 - we will see
106:46 - with the p tags here
106:48 - with the p tags
106:50 - so let's say we want to remove the p
106:52 - tags from here
106:54 - and just print this this is my home
106:57 - or let's say we have some styling here
107:00 - div style sorry p style equal to
107:03 - quotes
107:05 - and let's say we had something like font
107:08 - size
107:10 - colon
107:11 - 20 pixels
107:15 - this will show up here
107:17 - instead of applying the styles
107:20 - fine
107:21 - so how do we do that how will we print
107:23 - the speed tag with the font size of 20
107:25 - pixels
107:27 - in the
107:28 - text of this is my home
107:30 - so it's very simple we will not use the
107:33 - data variable inside the div let me make
107:36 - one more div here
107:39 - we will not write anything inside the
107:41 - div
107:42 - in the area we write
107:44 - we will simply do this we will use
107:47 - dangerously set in html we will use this
107:50 - keyword
107:52 - we will have two opening brackets sorry
107:53 - look two curly brackets
107:55 - inside we will use
107:58 - two
107:59 - underscores
108:01 - then we will type html because we are
108:03 - printing html
108:05 - then we will add the variable that we
108:07 - want to print which is data
108:10 - save and now see
108:12 - we are reading this is my home text
108:15 - here
108:16 - if we change the font size to 25 pixels
108:19 - this will increase the size
108:21 - let's also add the color color should be
108:25 - red
108:26 - see now it's in the red color fine
108:29 - one more thing let me show you this
108:32 - data this like this tag p
108:35 - this is not jsx this is html
108:39 - for example let's say we have i want to
108:41 - print the same thing here
108:43 - in
108:44 - the return we will not use it like this
108:47 - way we will use
108:49 - like this
108:51 - which is if let's say font size
108:54 - 25
108:56 - and color
108:58 - red
109:00 - see this will print the same thing here
109:02 - but instead of
109:04 - here we have html i mean this is html
109:07 - and this one is called
109:08 - jsx let me
109:10 - comment jsx
109:14 - this is
109:15 - this is html
109:18 - and this one is called
109:19 - jsx fine
109:22 - in html we are printing like a string
109:24 - in quotes
109:26 - but in
109:27 - the jsx we have seen camel case inside
109:31 - two curly brackets like this
109:33 - let's add one more
109:36 - example
109:37 - data 2
109:39 - but not p tag we will use b tags bold
109:42 - attacks
109:44 - fine
109:45 - let's add data to inside one more
109:47 - variable here let me just copy and paste
109:49 - it
109:52 - so data two
109:54 - it will print the same thing but in bold
109:57 - if you make the color to let's say blue
110:01 - this will be now in blue color
110:03 - so this is html printing inside
110:06 - the data and data too then we are
110:08 - displaying the contents using inner html
110:12 - for react we don't have any html we have
110:15 - this
110:16 - dangerously set in html like this
110:20 - so that's how we do it now let me give
110:22 - you one more tip
110:24 - let me open one what is it uh ndm
110:28 - package
110:29 - it's called react quill
110:36 - see
110:37 - let me stall this first
110:39 - it will take some time but
110:41 - not much
110:46 - so
110:47 - this thing is mainly used for
110:50 - like
110:51 - markup for example okay wait
110:54 - ports we have to use every time
110:56 - okay let's say we are writing a blog
110:59 - or we are making you are making a
111:01 - website on a writing blog website
111:04 - so in that case we can use
111:06 - this
111:07 - quill package and then generally set in
111:10 - html i will show you why
111:13 - so we have installed the package here
111:16 - let me do one additional thing let me
111:18 - remove
111:20 - okay let me remove
111:23 - wait in the index.js right let me remove
111:26 - stick mode
111:31 - save this
111:32 - now
111:33 - come over to app.js here same thing
111:36 - really same
111:37 - let me import this
111:39 - react wheel from react
111:41 - then we need to import the css
111:44 - the same way we did
111:46 - in es6 like this
111:49 - then we have to
111:50 - open or render the react query layer
111:54 - save this
111:56 - and refresh
111:58 - we don't need these two right now
111:59 - because we don't have the functions
112:02 - no see
112:04 - we have this text area where we can type
112:06 - anything
112:07 - fine
112:08 - let me create a function here
112:13 - okay okay
112:15 - const get cool
112:19 - data equals to something
112:24 - so this function will run when we on
112:26 - change this react way
112:28 - just like this so on change
112:31 - the function
112:33 - so we also need one state so let me
112:35 - import react first
112:38 - import
112:39 - react from react
112:42 - let me create a state
112:44 - const let's say
112:47 - quill and set
112:50 - coil
112:52 - use state use state this will be an
112:55 - string because we will type text now in
112:58 - the function we will simply have a value
113:01 - our argument arg
113:03 - given
113:04 - and i will set
113:05 - the value inside the set query state
113:09 - now in this quill we have some data if
113:12 - we type something here okay
113:14 - use state is not defined so we can add
113:17 - react.edu state
113:18 - like this
113:20 - now if we type something this data will
113:23 - be stored inside the sql state
113:26 - if we console dot log
113:29 - the sql let's see what we get
113:32 - open the console
113:35 - clear the console now okay just type
113:37 - something like
113:38 - nishant see we are getting the text in
113:42 - the p tags
113:44 - if we just render the quill
113:47 - here wait a second where is it
113:49 - if we render the quill in this html let
113:53 - me remove this one fine we will see that
113:56 - same text here
113:58 - refresh the page
113:59 - we don't see anything
114:02 - also remove this one
114:05 - or just comment it out fine
114:07 - we are not saying anything let's type
114:09 - something called
114:11 - and i guess a chain t nishant
114:13 - so this text is directly getting
114:16 - rendered to this html in the inner html
114:19 - also called
114:21 - dangerously set in a html it's getting
114:24 - rendered
114:25 - and here also in the console line number
114:28 - 15 14.
114:30 - if we make this as bold
114:33 - this one will be bold as well see we are
114:35 - having this p and strong text
114:37 - and it's getting rendered here at the
114:39 - top
114:40 - we want to change the color
114:42 - or the font size let's make as heading
114:44 - one
114:45 - now the font size has now been increased
114:48 - in h1 and strong tags previously it was
114:51 - p tag and now it's h1 tag
114:53 - let's change it to
114:55 - list
114:56 - okay let me just make some list here
114:58 - first
114:59 - we can say one
115:00 - it will automatically be in list
115:03 - in the ol
115:04 - order list and then li
115:06 - we will have
115:08 - item
115:09 - 1 enter
115:11 - item 2 and the items are getting
115:13 - rendered at the top
115:15 - with the tags directly
115:20 - let's take an example first let me
115:23 - print an h1 in the return
115:25 - called hello
115:28 - hello hello
115:30 - it will work we can say hello on the
115:31 - screen
115:33 - if we print another h1 let's say world
115:37 - it will give it an error that says
115:39 - adjacent jsx tags must be wrapped in an
115:43 - enclosing tag
115:44 - or this fragment
115:47 - so the workaround to this is using a div
115:50 - here
115:52 - like this
115:54 - let me add one more closing div at the
115:56 - last
115:57 - okay not here
116:01 - okay what a sec
116:05 - save this
116:07 - all right
116:12 - we shouldn't get this here
116:16 - so let me wrap it in and what is
116:18 - happening here yeah
116:21 - so we have h1 let me add a div
116:25 - and add the last here
116:28 - see if now it will work fine it's
116:30 - working we have hello and world
116:33 - now we will not get that error
116:35 - because we have a diff parent element
116:38 - that is enclosing this two h ones
116:42 - fine but we have a disadvantage of using
116:44 - this div
116:46 - because
116:47 - this div creates a new node in the
116:50 - react dom element
116:52 - that's not preferable
116:56 - only preferable or we can only use this
116:58 - div in one case
116:59 - when we have the
117:01 - like the arrangement of a grid
117:04 - like this let me show at the class name
117:06 - grid here
117:07 - and dot grid
117:09 - if we have this display of grid here
117:13 - like this and or other things
117:16 - so
117:17 - and one more example let's say flex
117:22 - so this div can only be used when we
117:25 - have to use the class name like div or
117:27 - like uh graderflex or any class name
117:30 - here
117:31 - let's say app
117:34 - now
117:35 - yes if we don't have app here let me
117:37 - bring app
117:38 - and we will simply text align a center
117:42 - so we will only use this div in only one
117:45 - case when we have
117:47 - to use the class name here
117:50 - but let's say we don't have to use a
117:51 - class name
117:52 - we can simply use
117:55 - this
117:56 - a called a fragment
117:59 - or we have one more item here
118:01 - let me import react first import react
118:04 - from react
118:05 - then inside we can simply say react dot
118:08 - fragment
118:12 - and add this here
118:16 - so see
118:17 - it's the same so we can either use
118:19 - reacted fragment
118:20 - or its short form
118:23 - simply an opening angle brackets and
118:25 - closing one at the last
118:27 - so that's how
118:29 - we do
118:30 - fragmenting in react
118:32 - now this becomes a fragment and if we
118:35 - repeat it once more
118:37 - we will get the same merit because now
118:39 - this fragment and this fragment
118:42 - is now
118:43 - adjacent x
118:44 - and we have to use one more
118:47 - fragment to enclose the both
118:52 - so if we add one more fragment this will
118:54 - work
118:54 - see you will see hello world and hello
118:56 - world four times
118:59 - you can also use regular fragment here
119:03 - i am just showing for your clarification
119:06 - so add it here
119:08 - and it's done
119:11 - so that was react fragment or
119:13 - fragment in react remember
119:16 - we cannot use class names here so if we
119:18 - add
119:19 - class names we will see there is no
119:21 - option
119:22 - of class names here
119:24 - if we add the app
119:26 - it will not work
119:27 - we will still see the same thing that we
119:30 - are saying that we were saying before
119:33 - so if you want to use class name you
119:35 - will have to use div
119:37 - but
119:38 - the div creates additional notes
119:41 - in the
119:43 - reactor
119:45 - that means only use diff when it's
119:48 - necessary otherwise use reactive
119:50 - fragment
119:51 - or its short
119:53 - form
119:54 - and that's all about react fragments in
119:57 - react
120:00 - so what is the status component
120:03 - stateless component means with no states
120:06 - for example this component here is
120:08 - called stateless
120:10 - we have nothing but a div and one h1
120:13 - that makes us stateless
120:15 - stateless means triple equal to no
120:18 - states
120:21 - but what about stateful
120:23 - let me add one state here so stateful
120:27 - means
120:28 - the component which states
120:31 - for example
120:33 - if we add a state of name
120:36 - and set
120:37 - name
120:38 - equals to u state
120:41 - let me add the
120:42 - initial value of nishanth
120:45 - and add the hello so i replace the hello
120:47 - with name
120:50 - it will print my name here
120:52 - now
120:53 - this will become stateful component
120:56 - it
120:57 - pull
120:59 - or which states
121:03 - if
121:05 - fine
121:06 - so simply put stateless means with no
121:09 - states
121:10 - stateful means which states this
121:12 - component is now stateful because we
121:15 - have a set of name here
121:17 - one more tip
121:18 - before the react 16.8 version
121:21 - if we wanted to use stateless component
121:24 - we would have used function component
121:28 - because
121:29 - we don't we didn't have any method to
121:32 - create states
121:33 - for function component before this
121:35 - version
121:36 - but after the version
121:38 - we had react hooks that allowed us to
121:40 - create states
121:42 - just like we did now using your state
121:44 - hook
121:45 - so that's all now
121:47 - that was the route that's what that was
121:49 - all about stateless versus structural
121:51 - component in react
121:55 - so mainly we'll use a library called
121:57 - axios so let me install it we can say
122:00 - npm i x use
122:03 - and my app is not running so let's start
122:06 - the app and then start
122:09 - fine
122:10 - so this api requests wait a second
122:15 - of course
122:19 - like this yes
122:21 - so mainly
122:22 - the requests are of four types
122:25 - post request to add data in the database
122:30 - post then we have read
122:33 - or we can say get to get it on the
122:36 - database
122:37 - we have put our pass to update and we
122:40 - have delete to delete the
122:42 - document from the database from the api
122:45 - so we have four
122:47 - api request types we can say
122:51 - post request
122:53 - get request
122:56 - put request put or patch
122:58 - anything okay let me make capital put
123:01 - our patch
123:02 - and delete
123:05 - let me make the post to the capital like
123:07 - this fine save
123:09 - post put get and delete we have this
123:12 - four types of requests in
123:17 - what is this
123:19 - okay so we have four times the request
123:20 - mainly that we
123:22 - normally use
123:24 - so
123:25 - i have a mock api and here we can send
123:27 - our data or request first let me create
123:30 - the mock api we can say the project name
123:33 - as api
123:35 - requests
123:36 - re
123:38 - quests
123:40 - then
123:41 - leave all these things click create
123:44 - it will create a api request project
123:47 - we can say new resource
123:50 - let me add the end point of
123:53 - let's say
123:54 - users we don't need all of these things
123:57 - just leave that user id
123:59 - then click create
124:02 - and here you see we have all the
124:03 - endpoints
124:04 - for get for post put and delete
124:08 - so 48 we can simply we have simply pass
124:10 - the id like this
124:12 - for update rd
124:14 - post we just have to post using slash
124:16 - users and
124:17 - forget we can have two endpoints to get
124:20 - all the users
124:22 - and to get one user so click create
124:24 - first i will show you later
124:26 - what is all these things
124:28 - now we have received that same point
124:29 - here if you open this
124:31 - you will see it here
124:33 - it's currently empty with no data inside
124:37 - so xcos has been installed now
124:40 - let's import the library here
124:42 - we can simply say import
124:46 - import axios
124:49 - from
124:50 - axios like this
124:52 - right
124:54 - let me create a function
124:56 - the const
124:57 - pose data
125:00 - it will be an arrow function
125:02 - fine
125:03 - so in the post data
125:05 - we will add this so we will have xcos
125:08 - dot post method
125:10 - because we are using post data i mean we
125:13 - are posting data
125:15 - or sending data to the database
125:17 - then we will copy the end point and we
125:20 - will simply add it here
125:22 - this url
125:24 - we got is the end point for posting data
125:26 - to the
125:28 - uh here to mock api is this database
125:32 - then second thing it takes is
125:35 - one
125:36 - curly bracket we will have to open and
125:38 - the thing it takes is the data itself
125:40 - first
125:41 - is the link or the end point
125:44 - second is the
125:46 - data itself so let's say we post some
125:49 - name called
125:50 - nissan
125:53 - let's say have some age called
125:56 - 26
125:58 - let's say some hobbies
126:00 - so we can make an array here
126:02 - always will contain
126:04 - let's say
126:06 - poetry
126:07 - [Music]
126:08 - then second thing it will contain will
126:10 - be
126:12 - cooking
126:14 - then third thing let's add traveling
126:18 - traveling fourth thing let's add
126:21 - programming or let's say coding
126:25 - that's what i'm doing right now
126:27 - oh let's add one more which is
126:33 - piano
126:34 - fine so we have all this
126:36 - things like name string
126:38 - this one is number and this one is an
126:40 - array
126:41 - fine
126:42 - so
126:43 - when this function runs
126:45 - it will post the data to the smog api
126:48 - so we need one button to trigger the
126:51 - function
126:53 - so we can say
126:55 - post
126:56 - data
126:58 - on click of this button we will have
127:01 - this post data function
127:04 - and as soon as we click the button of
127:06 - post data
127:07 - it will send data to this api
127:10 - let's try this and one more thing let me
127:12 - show you open the network tab
127:15 - open the console
127:16 - i mean the
127:18 - inspect and the network tab
127:20 - so whatever we are having the call
127:22 - whatever call we are having api call
127:24 - this will show up in the networks tab
127:26 - in the chrome web tools
127:29 - or chrome dev tools okay yes
127:31 - now click post data
127:34 - see this api has been called and it's
127:38 - sending the payload means the data we
127:40 - are sending
127:42 - which is
127:43 - the which has the age all the hobbies
127:45 - that we wrote
127:46 - statically and the name nishant
127:50 - if we check the preview we will see the
127:52 - same thing but with id
127:54 - so the payload where is it okay
127:57 - this payload it means
128:00 - payload this payload is means the
128:02 - payload means
128:03 - the data we are sending to the api call
128:06 - this preview means the data we are
128:08 - receiving from the call reviewer
128:10 - response
128:11 - they are same
128:13 - okay see now we are adding we are
128:15 - getting one id also here this is a
128:18 - response
128:19 - and the payload is the request
128:23 - so request we sent and it is pawns we
128:26 - got if we refresh the api here
128:29 - we should see the data here
128:31 - in an array like this
128:33 - so you can make all of this dynamic by
128:36 - using a form field for example let's say
128:38 - i have input
128:41 - placeholder of
128:43 - name
128:46 - let's add a state here let me create a
128:48 - state first
128:50 - if you know what is states they are
128:52 - simply variables
128:54 - in react we have to import use statehook
128:57 - from react sorry
128:58 - used it from react
129:00 - then let's create a state called
129:03 - let's say
129:04 - state of name
129:06 - and set name
129:08 - currently we don't need set name but
129:10 - let's just create it
129:12 - let it be empty
129:14 - and first
129:16 - then
129:17 - on okay we need we don't need set name i
129:20 - was wrong
129:21 - so on change of the input we will simply
129:23 - call set name
129:25 - or we can simply set the
129:28 - target.value in the set name or name
129:31 - variable
129:32 - name state using event dot target
129:36 - dot value
129:38 - not validation message value
129:41 - if
129:42 - now whatever we type in this name it
129:44 - will be
129:45 - stored inside the name state let me
129:47 - bring the button after the input
129:50 - and
129:51 - in the name we can simply add the name
129:53 - property like this
129:55 - now let's try to add some data let's say
129:58 - name should be chalice
130:01 - shall is click post data
130:04 - so it has been sent and see now the same
130:06 - has been changed to sales
130:08 - it's not static now it's dynamic
130:11 - depending on the input
130:12 - and here also we will get the same thing
130:15 - but the name will be challenged
130:18 - see
130:19 - that's all for post method
130:22 - now let's check the get method how it
130:24 - works
130:26 - get means
130:27 - getting all the data from
130:29 - the users
130:31 - so let me store or well let me show you
130:34 - one more thing
130:35 - see
130:37 - if i add this then block here
130:40 - and response
130:45 - in the post we can use
130:48 - what is it we can say a promise
130:51 - so console.log we can check our promise
130:55 - using this it means when the post api
130:58 - call is complete we will have some input
131:01 - in the console
131:02 - or in our ui
131:04 - or if it is an error if the post method
131:06 - fails it will show us an error
131:10 - so we can simply console.error
131:14 - this error like this
131:17 - now if you open the console
131:19 - click something like uder
131:22 - and click post data
131:29 - okay it's not coming here
131:31 - post name okay let
131:33 - check network
131:35 - okay this hasn't been called i think
131:38 - open console
131:40 - refresh the page okay now it's here
131:42 - see
131:43 - we can see all the data we can just
131:46 - simply call res dot data to get this
131:50 - data
131:51 - object inside
131:53 - save this
131:55 - and now it will
131:57 - return the data only
131:59 - click some else something else like avi
132:02 - shake
132:03 - click post data
132:07 - it will take some time but it will be
132:08 - here because i think
132:10 - it's a little bit slower
132:12 - see now we have this with hobbies that
132:14 - all the static values and the dynamic
132:16 - value of team
132:18 - so that's it and in case of any errors
132:20 - we will get an error in the console not
132:22 - this
132:24 - so that was promise after api call
132:27 - fine
132:29 - now what was i going to show you
132:32 - okay yes get request
132:35 - so in this api we have all the data
132:37 - like the way the data is sent here
132:40 - if we refresh we should get it
132:42 - now let's get them
132:44 - to get them we will use then use the
132:45 - fact hook here sorry yes use the fifth
132:48 - hook
132:49 - that will run when our page mounts
132:51 - for the first time only
132:53 - but now
132:55 - we can change it as per our needs
132:57 - so add an empty array here for it to
133:00 - work here we are calling axios.post
133:04 - but here we can simply call xcos.get
133:08 - already call the data
133:10 - so copy this endpoint user's endpoint
133:12 - and just simply paste it here
133:16 - fine and we can do the same thing here
133:18 - as well
133:19 - so when the post is complete it will
133:21 - return some promise then in cash block
133:24 - and in the get request as well it will
133:26 - return some promise like it like then in
133:29 - catch
133:30 - but in this case we will get all the
133:31 - data
133:32 - so save and let's try refresh the page
133:36 - see we are getting four arrays for four
133:39 - ready objects
133:41 - of all the data we're getting here
133:43 - forwarded objects let me store them in
133:46 - an
133:47 - array state so say const
133:49 - let's say um
133:52 - let's say
133:53 - data or say users
133:56 - and set
133:57 - users
134:00 - this u state this will be an array
134:03 - because
134:04 - this is the whole array
134:06 - we are getting we have to set this whole
134:08 - array in
134:10 - the state of users like this
134:13 - not in the post in the get
134:16 - so
134:17 - that's done that's how it is useful then
134:19 - catch block
134:21 - fine
134:22 - so now this users have our all the data
134:25 - when we load
134:26 - we can simply do this
134:29 - user dot map
134:31 - let's say user
134:36 - it will return something like
134:39 - let's say one fragment first
134:43 - then it will return us and h1
134:47 - that will have the user
134:49 - dot name
134:53 - let's only print the name for now
134:55 - so we have all the names here okay let
134:57 - me make this h2 equals because it's
135:00 - much bigger
135:01 - fine
135:03 - now we have all the names here like this
135:05 - fine
135:07 - so we are getting all the names and that
135:09 - was get request so we have done post and
135:12 - get
135:13 - now let's try
135:15 - updating the data
135:17 - how will we update the data
135:19 - so let's create a function
135:21 - to update the data
135:23 - updation is similarly similar to this
135:26 - post data
135:27 - but a few changes is needed
135:29 - so const
135:31 - update data
135:33 - equals to an error function like this
135:35 - fine
135:37 - now we have to create a button here
135:40 - in this
135:42 - fragment
135:43 - button
135:45 - say update
135:46 - so we will have to specify which
135:48 - document to update or which data like we
135:50 - have to update the nishant one
135:52 - challenge or the aura we say we have
135:55 - which we which field we have to update
135:58 - we will use the id
136:00 - because see we have this id and it's all
136:03 - unique we have one two three and four
136:05 - for each one this is one this is two
136:07 - three and four okay let me do this
136:10 - before this user dot name we can simply
136:12 - do user dot id
136:14 - let's print the id
136:17 - and let's add a dot here
136:19 - dot and a space
136:21 - we have the dot let's add the space but
136:24 - it will not work
136:25 - so we will do
136:27 - this
136:28 - wrap this in string literals
136:31 - like this and add a
136:33 - dollar i think i'm doing it wrong wait
136:36 - let me clear it out
136:38 - we can say string literals
136:41 - yes or wait i think it is like this
136:44 - string literals
136:45 - we can use again a string literal again
136:49 - sorry not string little curly bracket
136:50 - then we will have user
136:52 - dot id
136:54 - inside the string literals we will have
136:56 - one more curly bracket
136:58 - and we will use user dot name
137:01 - in this way we can give a space between
137:03 - them and one dot
137:05 - so
137:05 - one dot nissan two dot challenge three
137:08 - note to the end photo to be checked
137:10 - so all of these have an id one two three
137:12 - and four
137:13 - on base of this id we will update the
137:15 - data
137:17 - update the
137:18 - array object so we can say on click
137:21 - when we click the button
137:23 - we have to send this id
137:25 - to a function which will be this
137:27 - function update data
137:30 - so we will send the id or user.id
137:34 - like this
137:38 - let's
137:39 - uh get the id from
137:41 - the function here
137:43 - and if we console.log this id let's see
137:45 - what we get
137:48 - open the console
137:51 - clear it click any field like nishan
137:54 - we are heading one click challenge we
137:56 - will get two and so on now we have a
137:59 - unique parameter called id that can be
138:01 - used to update the
138:03 - records
138:04 - fine
138:05 - so for update
138:07 - method
138:08 - we will have to use x use
138:12 - dot put or patch
138:15 - so we have an output method then we will
138:17 - add the end point this end point
138:21 - add it
138:23 - thing it takes
138:25 - is the data
138:26 - which will be
138:28 - the new data so let's copy
138:30 - these things
138:32 - these three things
138:36 - and add it here
138:38 - so it has been added all these three
138:40 - things
138:41 - so
138:42 - let's alter some things
138:44 - see initially the age is 26 for all
138:47 - let's make the edge to be 27
138:52 - let me add one more
138:54 - object here or add a field here called
138:56 - let's say
138:58 - we have poetry cooking traveling coding
139:00 - piano let's say sleeping
139:03 - save
139:04 - and
139:05 - third parameter it will take will be the
139:08 - id itself
139:09 - so we can simply pass
139:11 - the id like this
139:14 - so we are getting all this giving it all
139:16 - the things that it needs
139:18 - then we will have to use this then and
139:20 - catch block
139:21 - so then will be called in case it is
139:24 - successful
139:25 - or catch in case if it fails
139:28 - so let's try remove this console log
139:32 - open the console
139:35 - so you can also use network type to see
139:37 - the request
139:38 - so
139:39 - let's add some name here called
139:42 - let's say
139:44 - what can we add the name here let's say
139:46 - sanji
139:49 - now click nishant update here
139:55 - okay
139:56 - console.error is not a function we have
139:58 - something wrong open the network tab see
140:02 - that through an error
140:03 - because
140:04 - we are having an error
140:06 - so actually we did a mistake here we
140:08 - don't have to send the id here like this
140:10 - because
140:11 - it's not in the query query it's in the
140:15 - path params so if we check
140:17 - this documentation let me let me click
140:19 - the project
140:21 - let me check
140:23 - how to do this
140:25 - new resource
140:27 - see if you check here
140:29 - in the put we have to pass the id like
140:31 - this after the end point
140:33 - so cancel it
140:35 - in this user so we can simply set uh one
140:37 - more forward slash
140:40 - uh curly brackets and before the clay
140:42 - brackets a dollar for rendering a
140:45 - variable like an id
140:47 - like a dynamic id now it will work it
140:50 - refresh the page
140:52 - type sanjeet here
140:55 - now click update
140:58 - open the console let's check what we are
141:01 - getting
141:02 - see we are reading this object here and
141:05 - the name has been changed to sanjeet for
141:06 - the id number one
141:08 - invest the page
141:10 - refresh the page
141:12 - and it will be changed sanjit is now at
141:15 - the first position
141:17 - in this api
141:19 - endpoint as well in the mock api i mean
141:22 - so let's see sanji is now here at the
141:25 - place of nishant
141:26 - we can do the same for others like we
141:28 - can add
141:29 - mayank here and click uday
141:33 - this will be changed to mayank
141:36 - refresh the page
141:37 - mine will be on third number
141:40 - refresh refresh refresh
141:43 - what's wrong
141:44 - refresh this
141:46 - i think netflix problem is now it's
141:48 - herman
141:50 - so that was
141:51 - about updating data so let me write some
141:54 - comments here for clarification
141:57 - this one is post request
142:02 - request this one is
142:05 - this one is
142:07 - put request
142:10 - put means updating data
142:13 - request
142:14 - the fourth one or this one is called
142:17 - let's say select comment let's comment
142:19 - it and then use the vector under the
142:22 - user vector
142:23 - so this will be
142:25 - get request
142:27 - and the last one is left which is called
142:29 - delete so let's do that as well
142:32 - create one more button for this
142:35 - we will
142:36 - add a delete text here for the button
142:38 - label
142:40 - and
142:40 - in the place of update data we will use
142:44 - the delete function
142:46 - so just copy this update for update data
142:49 - function and
142:50 - duplicate it
142:53 - delete data this will be called
142:56 - delete
142:58 - data
143:00 - everything will be the same but we don't
143:02 - have to use
143:03 - the second parameter
143:05 - we don't have to send the data we simply
143:07 - have to delete this
143:09 - let me now map the but function to this
143:11 - button
143:12 - and it will work
143:14 - let's try
143:17 - fine this is a delete method
143:19 - let me write
143:22 - delete
143:24 - method
143:26 - method
143:28 - now click delete in any one of them like
143:30 - sales
143:32 - if we refresh
143:34 - charge won't be here but it is here
143:38 - let me check this
143:40 - okay we have okay this should be not put
143:43 - delete method we have to add it here
143:45 - delete for delete
143:47 - now let's try click delete in challenge
143:51 - click here in the api endpoint page
143:54 - and see we don't have the challenge name
143:56 - here anymore
143:57 - we have nisha we have sanjit
144:01 - we can also do one more thing here we
144:03 - can simply call
144:05 - this user workbook or this get function
144:08 - in another function
144:10 - to render the updated data after
144:12 - deletion
144:13 - that's not for the scope or let's do
144:15 - that as well
144:17 - let me create one more function here
144:18 - sponsored
144:20 - get
144:21 - data
144:25 - and all the things here and simply we
144:27 - will call
144:28 - this git data function here
144:31 - get data
144:33 - and
144:34 - same function we will call here when we
144:36 - delete
144:37 - that way this delete function maybe get
144:40 - called
144:41 - and it will delete or it will refresh
144:43 - the page
144:44 - with the updated data click mayank
144:51 - okay not deleted
144:53 - let's try
144:55 - okay so now we're deleted
144:57 - we have only sanjeet and shake
144:59 - click sanjit delete button here
145:02 - it won't be anymore fine
145:05 - so that was
145:06 - all the four requests
145:09 - let me copy and
145:10 - party cut and paste to get here
145:13 - so we have seen
145:16 - post put
145:17 - patch and delete
145:19 - i mean post
145:21 - get
145:22 - put and delete the patch works the same
145:25 - way as
145:26 - put where does it put here
145:28 - but
145:30 - fine
145:31 - so what can we do
145:33 - else fine
145:34 - in the get request you see where is it
145:37 - here we have we are getting all the data
145:40 - so let me add one more called nishant
145:42 - click post data
145:45 - now it refresh
145:46 - this will be here
145:47 - let me add one more called uda
145:50 - postdata
145:53 - it will be here as well
145:55 - but in the documentation you will see
145:58 - let me open new resource
146:00 - we have two things forget we can either
146:02 - get one data
146:04 - or we can get all data so currently
146:06 - we're adding all the data let's try to
146:08 - get one data
146:10 - so in the users we can simply pass
146:13 - the id
146:15 - which is let's say
146:17 - we have four for a bit check so we don't
146:19 - use this just add four
146:22 - four now we will only see for a mishake
146:25 - but the problem is we will get an object
146:27 - not an array
146:29 - so we can console.log this to check
146:34 - open the console and refresh
146:37 - see now we are getting
146:39 - a object of abhishek like this
146:43 - fine so that was
146:45 - gate by id and directly get for all
146:50 - with no id param path params
146:52 - so that's all for now and that was all
146:55 - about axios or api requests
146:58 - i mean axios api request that's fine
147:03 - so
147:04 - what is the bouncing
147:06 - if we search it on google let's say what
147:08 - we get the
147:09 - bouncing
147:11 - it simply means delaying a function in
147:13 - javascript or
147:15 - like yes in javascript
147:17 - basically
147:18 - so see the bouncing instruments okay not
147:21 - this it's chemistry in
147:24 - javascript
147:26 - yes this one
147:28 - it is written here that
147:31 - the bouncing in javascript is a practice
147:33 - used to improve browser performance
147:36 - there might be some functionality in a
147:39 - web page which regula
147:41 - okay we don't need this it simply means
147:44 - telling a function
147:46 - where do i find a correct
147:50 - definition
147:51 - a debounce function makes your code only
147:54 - triggered once as per user input yes
147:57 - this is correct
147:58 - or if you want a more clear explanation
148:02 - okay let me open
148:04 - this
148:06 - my channel or my page and free code camp
148:08 - here
148:10 - fine there are some heavy tasks in
148:12 - software development like calling an api
148:15 - so here we have an api endpoint
148:18 - suppose
148:19 - the api
148:21 - searches a list of users and we cannot
148:23 - or can't afford to fire it too often
148:26 - we want to search it only when we have
148:28 - typed the whole query or whole input
148:32 - so
148:33 - let's implement this
148:35 - in react
148:36 - we will create a function const let's
148:39 - say
148:41 - okay we have to create a function so
148:43 - let's say um
148:44 - what can we say
148:46 - search
148:47 - pin
148:48 - and here i have a api that is that will
148:51 - search
148:53 - the pin code or like location details
148:55 - according to the pin code
148:57 - we also have axios installed so let's
148:59 - export xcos for import xeos
149:03 - import seos from axio
149:05 - here we will make the api call so
149:07 - xcos.get we will use get method
149:10 - then we will pass this pin api here
149:12 - endpoint
149:14 - let's also create one input tag
149:18 - of placeholder
149:21 - enter your
149:23 - pin
149:26 - code
149:28 - so it's done
149:29 - and it's here
149:31 - let me zoom this too much okay fine
149:34 - we have this input
149:37 - fine
149:38 - but let's do one more thing here
149:41 - let's bring it down so we have to just
149:45 - copy or cut this paste it in app
149:48 - or and then remove everything else
149:51 - that we don't need
149:53 - and it's here also remove the background
149:54 - color because that also we don't need
149:57 - we have enter your pin code
150:00 - now this function
150:02 - will run when we type something in the
150:04 - pin code input
150:06 - this input we can say on change event
150:10 - we can call this starchmen input
150:13 - then we have to pass the query
150:15 - so we can say event here
150:18 - it will take
150:22 - event
150:23 - let's do this
150:25 - let's just pass the target
150:28 - and value directly
150:30 - now this will take an event
150:33 - here
150:34 - and it will pass event dot target dot
150:37 - value
150:41 - let's take the value here
150:43 - and
150:45 - and and and and and we have to append
150:48 - the
150:49 - value here in this pin api
150:52 - so
150:53 - we will do a question mark
150:55 - um
150:56 - wait a second
150:58 - let's do this yes
151:00 - it will append the value like this so we
151:02 - can say console
151:04 - dot log it responds res
151:08 - and
151:09 - save if it fails we will simply catch it
151:13 - cache
151:14 - to get the error if any in the console
151:18 - console.log
151:21 - error
151:23 - we have one extra
151:25 - market let's try this open the console
151:32 - oh sorry not to console let's open the
151:34 - network tab first
151:35 - let me
151:36 - do it like this
151:38 - close this
151:40 - click settings here how do i remove this
151:45 - yes
151:46 - yes yes click settings
151:49 - but what about this
151:51 - we can't clear disable cache no
151:54 - just
151:55 - click this button it will not okay just
151:57 - bring it
151:58 - upwards a little bit
152:01 - now let's type the pin code
152:04 - see
152:05 - we can
152:06 - see the response here
152:08 - it's returning us
152:10 - this
152:11 - and it's a bending the pin code to this
152:13 - api
152:14 - using this value
152:16 - so in the preview in response we are
152:18 - getting the post offices
152:21 - so let's filter it out
152:23 - now if you now if you know if
152:26 - you now know the api call is getting
152:28 - called properly
152:30 - so let's refresh and try once more add
152:32 - the pin code
152:34 - okay undefined what about address
152:38 - let's try once more eight zero zero zero
152:40 - zero one
152:41 - one more zero extra i need to remove
152:43 - that
152:45 - open this response we have to keep the
152:47 - data
152:48 - for rds dot data
152:50 - and what's inside the data
152:53 - zeroth index we have to filter zero
152:55 - index
152:56 - dot post office
153:01 - so that's not important the data we are
153:03 - getting the data is not important the
153:05 - important is
153:07 - how we are reading the data so let's say
153:10 - if you are if you open the network tab
153:12 - clear it out everything
153:13 - type your pin code let's say eight zero
153:15 - zero zero zero one
153:17 - so
153:18 - let's start let's say you type the pin
153:20 - code six or five times
153:22 - you have to just
153:24 - how does
153:26 - how will it expand
153:29 - okay so we called api
153:32 - like six times
153:33 - because we have six numbers here
153:35 - so the api call has been called six
153:37 - times
153:38 - each with a different response and
153:40 - request
153:41 - so to avoid that we use debouncing and
153:44 - if you use the bouncing
153:46 - what will happen is the api call will be
153:48 - called only once
153:50 - and this whole data this whole query
153:52 - will be sent at once
153:54 - because currently if you see
153:55 - we are sending 8 then 8 0 then 800 8 000
153:59 - and then so on till the last letter
154:02 - so that's not preferable
154:04 - that causes abuse of the api and
154:07 - trust me you don't want that
154:09 - so what we can do is we can just
154:12 - refresh the page
154:14 - let's implement the balancing now so for
154:16 - the debouncing function we need a method
154:19 - which is called useful from react
154:22 - so let's import it import
154:25 - use effect
154:26 - from react
154:28 - also it's fine here but we need one more
154:32 - thing called states
154:33 - so we will import use state hook
154:36 - and we will create one state so cost
154:38 - let's say pin and set pin
154:42 - now if you type the pin it will be set
154:43 - inside
154:44 - this pin state using set pin method
154:48 - now let's create the hook of user effect
154:52 - all these things we have to do
154:56 - then it's simple
154:59 - now
155:00 - we have a dependency array
155:02 - so if we put the pin here or the state
155:04 - here this use effect hook will run
155:07 - and it will call anything that's inside
155:09 - it
155:10 - when
155:11 - like it will call everything inside it
155:13 - when the value changes
155:15 - so we will do this
155:17 - it will create a set timer function
155:20 - inside
155:21 - this
155:22 - user vector we will do
155:24 - const set
155:27 - or search pin let's do this
155:30 - equal to
155:31 - we will use set timeout
155:34 - set timeout
155:38 - or let's do set search pin or let's call
155:42 - the function
155:44 - the bouncing
155:46 - point we are creating a function called
155:48 - bouncing okay yes
155:50 - then we have to move this whole thing
155:52 - inside the set amount function but one
155:55 - more thing before moving it inside
155:57 - this takes the function that it will
156:00 - call
156:02 - and the interval so let's say we want to
156:04 - call the api after two seconds of typing
156:08 - so when we type
156:10 - and let's type eight four zeros and one
156:13 - the moment we finish typing one at the
156:15 - last
156:16 - after two seconds this function will run
156:19 - after tapping two seconds
156:21 - i will show you
156:22 - so in the balancing we have set timeout
156:24 - here
156:25 - let's cut
156:26 - the xus api called and we don't need it
156:29 - here
156:29 - remove this
156:31 - so
156:32 - the value becomes the pin now
156:34 - because we have the state here
156:37 - so pin api plus the pin it will append
156:40 - the pinning code to the api at the last
156:44 - fine and then we'll display the data
156:46 - so it's done the bouncing now we have to
156:49 - call the function
156:51 - so to call the function
156:53 - we can simply set
156:54 - we can simply do
156:57 - this
156:58 - so
156:59 - how to call the function
157:02 - let's do this so we will do return
157:06 - and inside this return we will do
157:09 - but wait a second okay um how to do this
157:13 - is in the return we will do this
157:17 - clear timeout
157:20 - player timeout and we will pass this
157:23 - demonstrating function
157:25 - so let's see if it works or not
157:27 - now what will happen is if we type in
157:29 - the pin code text the pin will change
157:32 - and this function will run
157:34 - but it will only run when
157:36 - we type the last letter
157:38 - and then after two seconds this api call
157:41 - will be displayed
157:42 - so now let's check clear the console
157:46 - now let's type the pin code eight zero
157:48 - zero zero zero one
157:51 - let's check
157:52 - see it works
157:54 - after like two seconds
157:57 - we are getting this
157:59 - call here api call with the data that is
158:02 - present in the database
158:04 - all this data
158:06 - let's try one more clear it out
158:09 - let's try
158:11 - six zero zero zero zero one
158:15 - see
158:16 - now we are writing the data of chennai
158:18 - because
158:19 - this input of 6
158:21 - this is the pin code of like from
158:23 - chennai i think
158:25 - if we
158:26 - add 5 it will fetch
158:30 - one more set of data
158:32 - after 2 seconds
158:34 - fine
158:35 - so that's how the bouncing works in
158:37 - react
158:41 - we have two components here home and
158:42 - profile
158:44 - both at the same level
158:46 - in the home we are passing a name
158:49 - a state called name
158:50 - in the profile we are passing the
158:52 - function to set the state of set name
158:55 - in the profile we have a button
158:58 - that will change the name to there when
159:00 - clicked
159:01 - then it will like if we change the name
159:04 - it will be passed here
159:07 - and the name will be passed in the home
159:09 - component like this
159:11 - so if you click the name change the name
159:12 - button
159:13 - the name will change to that like this
159:17 - let's
159:18 - remove the profile we don't need that
159:20 - all right fine
159:22 - change the name the name is there so
159:25 - basically we have a app that changes
159:27 - name
159:28 - using two components
159:30 - it is changing in profile
159:32 - using a button
159:33 - and it's getting displayed in the home
159:35 - component
159:36 - so where in the both components we are
159:38 - passing name and set name as props
159:42 - here we are saving it and declaring it
159:45 - but
159:46 - this can cause
159:47 - a lot of like clumsy code
159:50 - and it also causes one thing which is
159:52 - called prop delay
159:54 - for example let's say we have a
159:56 - component home in the app.js
159:58 - in the home we are calling another
160:00 - component as its child
160:02 - in that child component like lets child1
160:05 - we are calling
160:06 - subchild1 then we have to pass the name
160:09 - all over
160:10 - to avoid that we use something called
160:13 - context api in react
160:15 - so let's see how it works
160:17 - so the first step is we have to create a
160:19 - context here
160:21 - so let's do that let's create a folder
160:23 - first called
160:25 - context
160:27 - context
160:28 - in the folder let's create a file called
160:31 - global context global
160:34 - global
160:37 - context.s
160:38 - a javascript file
160:41 - let's import something called create
160:43 - context
160:44 - this will be used to create a context
160:47 - in the global context.js file
160:51 - let's create a const let's say
160:54 - let's say let's say let's say
160:57 - user data
161:00 - let's create the context using this
161:02 - then we have to
161:04 - pass this create context and an empty
161:06 - object here
161:08 - this user data will be our global object
161:11 - or global state
161:13 - so we will do an export here if you want
161:15 - to use this user data in other
161:17 - components
161:18 - basically we will import the user data
161:20 - in this component of app.js
161:23 - so import
161:26 - create not create context
161:28 - user data
161:31 - from
161:33 - context context
161:36 - and global context
161:38 - so now this chooser data will be
161:40 - imported from here
161:42 - we have to wrap
161:43 - the both components in the user data
161:47 - like this
161:49 - let's make the name as capital let's
161:51 - make it an snu
161:54 - same here
161:56 - and here save this then this
162:00 - fine
162:01 - then
162:02 - we don't need to like have our self
162:04 - closing tag yet
162:05 - we have to wrap our components in this
162:09 - user data tag
162:11 - like this
162:13 - so we are wrapping our home component
162:16 - and profile component
162:18 - in
162:19 - user data
162:20 - fine
162:21 - it was second this was the second step
162:24 - the next thing we have to do is we have
162:26 - to
162:27 - add a provider so we will add dot
162:29 - provider
162:30 - provider means we are sending data
162:33 - we have to do it in the both opening and
162:35 - posing tags like this
162:37 - it's done it's working perfectly
162:40 - now let's pass the data or the functions
162:44 - let's say we have to pass some value
162:46 - we have to pass the value using this
162:48 - value prop
162:49 - let's pass the name here
162:51 - because we want to pass the name and set
162:54 - name as well
162:56 - if we are adding the value here we don't
162:58 - have to add this here
163:00 - it will be automatically
163:02 - propagated to both components wrapped in
163:05 - user context
163:06 - i mean this is a data provider
163:09 - so it's done third step
163:12 - now let's come into the global context
163:15 - okay not in global context in let's say
163:18 - home.js
163:19 - fine we don't need to get this from here
163:22 - remove this and this as well
163:25 - so don't save it because you will get an
163:27 - error because name is not defined yet
163:30 - so now let's get data
163:33 - because here we are sending data to home
163:35 - and profile
163:37 - the both name and set name
163:39 - so this both will be available in
163:41 - home.js as well as in profile.js
163:43 - components
163:45 - so let's now get data that we're sending
163:48 - so we will import the same thing which
163:51 - is
163:52 - use context from
163:55 - react
163:57 - also we have to import
163:59 - the context name which is our data data
164:02 - so we will say import
164:05 - user data
164:06 - from
164:08 - profile not profile two steps back
164:12 - context
164:13 - and global context save this
164:16 - wait a second user data fine we are
164:18 - doing it right
164:20 - okay
164:22 - so in here
164:23 - we don't have the set name yet
164:26 - wait a second here we don't have the set
164:28 - name
164:28 - or name yet
164:30 - so to get the name we will simply
164:32 - destructure it
164:34 - to restructure it we will do
164:37 - const
164:38 - name equals to
164:41 - okay not like this we have this
164:42 - structure so we can say
164:45 - let
164:47 - name
164:48 - equals to
164:50 - we will have to use
164:52 - use context hook and have to pass
164:55 - the context name which is user data user
164:58 - data
165:00 - like this
165:01 - now it will work
165:04 - the same thing we have to do inside
165:06 - profile.js
165:08 - but
165:08 - we will have to get
165:10 - this thing
165:11 - set name not the name because we are
165:13 - setting it using the function of sick
165:15 - name
165:16 - also import these two things here
165:19 - and save enter and save
165:21 - now this should work
165:23 - now click change the name
165:26 - and it should work
165:28 - click it
165:29 - and see
165:30 - the name is with that
165:32 - if you make it to something else like a
165:34 - base shake
165:36 - and click it again
165:38 - it will change the name to a bishop
165:40 - and that's how
165:42 - the use context hook or context api
165:45 - works in react
165:46 - so it's a simple example but you can
165:49 - like
165:50 - do a lot of things with this oh sorry
165:53 - for example
165:54 - let's see we had one more component here
165:56 - called
165:57 - settings
165:59 - dot js
166:00 - make it functional component
166:03 - let's import settings component in
166:05 - home.js
166:07 - like this
166:08 - import
166:09 - settings
166:11 - let's render it out here
166:15 - also let me make it an h1 tag
166:19 - to display it
166:21 - properly
166:23 - save
166:24 - so it's here
166:26 - so let's say we want to pass the name as
166:29 - props
166:30 - so it is in the home component yes we
166:32 - have to pass
166:34 - if we are using props we have to pass
166:36 - like
166:37 - this
166:38 - like this i mean
166:40 - then
166:42 - we have to
166:43 - come to home.js
166:45 - we have to destructure it like this
166:48 - then again we have to pass the name
166:49 - again
166:51 - name as
166:53 - name
166:54 - then we have to get it again here so
166:56 - it's a lengthy process
166:58 - and this thing passing the state
167:01 - as props is called prop drilling
167:04 - so it's coming from
167:06 - app.js to home component it's coming
167:09 - from home to settings and so on
167:12 - so basically we don't need to do it here
167:14 - so remove this
167:16 - remove
167:17 - top
167:18 - here
167:19 - and remove this from here
167:22 - suppose we want to access the name here
167:24 - as well we will do the same thing
167:26 - we will import these things
167:30 - let me remove it from here as well
167:32 - we will import these two things like use
167:34 - context and user data come into settings
167:38 - and we have to change the route for this
167:43 - yes it's the same route we don't have to
167:46 - change it fine
167:48 - let's
167:49 - do this thing and structure the context
167:53 - now we can print the settings
167:57 - or simply the name here a b shape
168:00 - let's change a little bit
168:03 - a little bit say
168:05 - we have to pass one more state let's say
168:09 - const
168:12 - active and or let's say age
168:15 - let's pass the agent settings component
168:19 - set age
168:20 - use state let's say 51
168:24 - is a number
168:25 - so
168:27 - let's pass the edge as context here
168:30 - in the provider
168:32 - it's passed as a value
168:35 - let's also get the settings but wait a
168:37 - second
168:39 - this shouldn't we don't have to do it
168:41 - here
168:42 - it's wrong
168:43 - so
168:44 - okay i mean if we want the state in the
168:47 - settings we can pass it here
168:50 - in the value
168:51 - in the provider
168:53 - then let's come to the settings page
168:56 - we will create one more
168:59 - we will structure it
169:01 - and we will do
169:03 - this what is that age
169:06 - age
169:07 - let's print the edge
169:10 - let's try this
169:14 - see what we get see now we are reading
169:16 - the edge as well
169:17 - because we are passing the h as the
169:19 - global context here in the provider
169:22 - so that's all and that's how it works
169:25 - our use context api
169:30 - so let's see the difference between
169:32 - class and class names in react
169:35 - we are using a class component here
169:38 - of class of app
169:40 - let's add some styling in m.css
169:43 - so we use the class keyword to
169:46 - add a styling to our
169:49 - html elements
169:51 - or in our case we have jsx in react not
169:54 - html
169:55 - so we have an header here a class of
169:58 - header
169:59 - with a red color
170:00 - and this border
170:02 - in the css file
170:04 - now let's merge them
170:06 - so we will say h1 class
170:09 - this header
170:11 - because that's how we do in html right
170:14 - it's working also you see
170:17 - we have a red color
170:18 - text fh1 with the black border around it
170:23 - but the problem is
170:24 - we are using two class keywords here
170:27 - one is for creating the class
170:29 - that encapsulates or like
170:33 - it covers all these things
170:35 - like render return and all
170:37 - and in the return we are using one more
170:40 - class called this
170:42 - for
170:43 - rendering the css
170:45 - if you open the console
170:48 - what we will see is an error
170:51 - that says invalid term property
170:54 - determine class name
170:55 - because
170:56 - we cannot use class two times because
170:59 - it's a reserved keyword that is used to
171:01 - create a class
171:02 - in
171:03 - react or in javascript
171:06 - so if we search class in javascript we
171:08 - will see the same thing
171:10 - classes are used to create a class
171:12 - just like this
171:15 - so instead of the class we can use class
171:17 - name
171:18 - and it will work fine it will look the
171:21 - same way
171:22 - and we don't have the error now if you
171:24 - check
171:25 - we won't have it
171:27 - see no errors here
171:28 - refresh and save
171:31 - so that's how or that's why we use
171:34 - class
171:35 - name
171:36 - instead of class
171:38 - let me show the same in function
171:40 - component
171:42 - make an h1
171:43 - here that says something like
171:47 - a second h1
171:50 - that says hello
171:54 - now let me import css here
171:57 - import
172:00 - app
172:01 - dot
172:02 - tss save it
172:05 - now let's use class here
172:08 - class
172:09 - equals to wait
172:12 - header
172:14 - it will reflect here
172:16 - but you will see the error that we got
172:18 - previously in class component
172:20 - that class name is an invalid dom
172:22 - property
172:24 - need mean last name
172:26 - so the same thing is here
172:29 - so
172:30 - to fix this error or warning we can say
172:32 - class name here
172:34 - and it will work the same way
172:36 - but with no errors
172:38 - if you open the console let's see what
172:40 - we have we have no errors
172:44 - of using this class
172:47 - so that's how or that's why we use class
172:50 - name instead of class keyword in react
172:57 - first of all let me explain all this
172:59 - code here
173:00 - we are having two components users and
173:03 - photos sorry posts we are calling this
173:05 - both in app.js like this we are
173:07 - reporting this and calling this in this
173:10 - lift class name
173:12 - in the users we are fetching all these
173:14 - users here
173:15 - from jsonpress folder
173:17 - all the users
173:18 - and we are mapping it through
173:21 - this array and returning the name we
173:24 - have users
173:25 - similarly we have the posts
173:27 - we have having an array of post the
173:30 - state we have
173:31 - a function to get all the posts use the
173:33 - fact hook
173:34 - and
173:35 - the same thing we are returning
173:38 - the user title from the posts array
173:42 - fine we also have h2 here and we have
173:45 - this h2
173:46 - so the basic thing to know here is
173:49 - the both components users dot js and
173:52 - post dot js they are same i mean the
173:55 - logic is same
173:56 - for example we have same state
173:59 - we have the array state i mean
174:00 - only the name is different we have this
174:02 - gate posts and get users function the
174:05 - functionalities are same
174:07 - we are calling fetch api using the api
174:10 - in point and returning response then we
174:12 - are
174:13 - setting inside the state
174:15 - then in the use effect hook we have it
174:17 - here
174:18 - we are calling the function then we are
174:20 - returning the mapped array like this
174:23 - so
174:24 - we have two components users and posts
174:28 - we have to create
174:30 - let's create a hierarchical component
174:32 - that will solve our problem
174:35 - for example we don't have to use
174:37 - the function two times here
174:39 - we will write the logic only once it
174:42 - will run in the both components
174:44 - it will take some parameter and it will
174:46 - run
174:47 - same way it will be done here
174:49 - so let's see how to prove that in the
174:51 - react component
174:53 - so now what we have to do is we have to
174:55 - create a file here
174:57 - in the source folder called
175:00 - higher
175:01 - order
175:03 - dot js
175:05 - so make it a functional component like
175:07 - this
175:09 - in this return i mean in the function of
175:12 - higher order it will return one more
175:14 - return
175:15 - or one more thing we will return a
175:17 - function
175:18 - so return function let's say hoc
175:23 - in the host we will put this
175:27 - fine
175:27 - it's done remove this as well
175:30 - and
175:31 - fine
175:33 - so first
175:34 - now what we have to do is we have to
175:36 - remove
175:37 - this
175:38 - default export from here
175:41 - and do this
175:42 - let me import the component of higher
175:45 - order
175:46 - so import
175:48 - this component
175:49 - and simply
175:51 - do this const
175:54 - users
175:55 - comp
175:56 - equals to
175:58 - higher order
175:59 - then we will pass
176:01 - this user's component
176:04 - first let's pass the component
176:07 - title just users
176:09 - not the component
176:12 - so
176:13 - we have to export this as well so export
176:15 - default
176:17 - users com
176:18 - user comp or better make it users com
176:22 - save it
176:24 - also remove the posts from here
176:28 - save it save it save it
176:30 - so here's comp is here
176:33 - fine
176:34 - we are passing the title so let's get
176:36 - the title
176:37 - in this component
176:39 - so we can say title
176:42 - in this div
176:43 - we will simply make an h2
176:46 - and we will render out the title
176:50 - we can see we will see post sorry users
176:52 - now
176:53 - as the title layer if you make it this
176:56 - it will change dynamically
176:59 - let's do the same for posts
177:01 - we don't need all this now remove this
177:05 - effects
177:07 - this
177:08 - okay we don't we need this but later
177:12 - but here what we will do is see we are
177:15 - passing
177:17 - we are doing this so let's do it here as
177:19 - well
177:20 - remove this
177:22 - populist paste this
177:25 - make this as posts make this as
177:28 - posts
177:30 - comp and quote it
177:32 - defaultly
177:34 - nowadays fresh we will not see it here
177:37 - because we are not importing this
177:39 - component here so import it
177:41 - okay higher it is not undefined let's
177:44 - define it or import it
177:47 - go down to try it so tight
177:50 - refresh
177:51 - we will see posts but we are not seeing
177:55 - here why
177:57 - we can not see posts
178:01 - because there are personal
178:03 - find
178:04 - refresh
178:06 - why cannot we see posts
178:09 - users com
178:11 - put this
178:12 - goes
178:13 - export this
178:14 - higher order post okay
178:17 - call it here as well fine
178:19 - now it's working you can see the title
178:21 - say it successfully
178:23 - now let's
178:24 - just pause this function
178:28 - let me bring it here first we have users
178:30 - and posts
178:32 - so we have to just cut all the function
178:34 - and the state we don't need it here
178:37 - we just need this user's mapping here
178:40 - and here
178:41 - we have to paste here
178:43 - the paste and then import
178:46 - the use state hook and use effect hook
178:51 - simply like this
178:53 - change the users to data
178:56 - so it will be done here and
178:58 - here change the set user to set data
179:05 - and change it here
179:07 - then third thing to change
179:09 - is the function name this should be not
179:12 - get users get data
179:14 - change it here save all these things
179:17 - fine
179:18 - just like we passed the title
179:20 - we have to pass
179:22 - the component name called users
179:26 - so we don't need the s2 of users here
179:28 - and they post save
179:30 - and save so just pass
179:33 - this users here
179:35 - as
179:36 - arguments and here we will pass the
179:38 - function of posts
179:41 - we are passing two things here pose as a
179:44 - string and a
179:45 - function here as well users as a string
179:48 - and users as a function
179:51 - so here we don't need
179:53 - state and effects so remove it
179:57 - so we are passing it here
179:59 - so we have to receive it as well now so
180:01 - we will day we will say
180:03 - component
180:05 - so
180:06 - we will call it as a component
180:08 - so for example
180:09 - let's say we had it here
180:11 - how do we call it we can call it using
180:15 - this
180:17 - save
180:18 - and refresh the page
180:20 - we will see nothing
180:21 - because nothing is here in the div in
180:24 - the return
180:25 - so we can add an h1 in the users and say
180:29 - hello from users
180:32 - the same thing we can do in posts so
180:35 - let's make it an h2 not h1 we can say
180:38 - hello
180:39 - from posts
180:43 - here we are using adding users and here
180:45 - posts
180:46 - and we can see it here successfully
180:50 - but
180:51 - what about the data how will we pass the
180:53 - data to show it here
180:55 - it's very simple just pass it as props
180:58 - in the component like this
181:01 - let me receive it as props
181:04 - the way we do it and
181:07 - we can uncomment this
181:09 - then we can say data dot slides
181:12 - this map
181:14 - then we can see all this data
181:17 - which is
181:18 - user names for the component of posts
181:21 - same thing can be done
181:24 - so
181:25 - uncomment and make the posts
181:28 - wait sorry data. data.slice
181:31 - dot map and all
181:32 - refresh the page
181:36 - refresh and we can see all these things
181:38 - but see
181:40 - we are not seeing
181:41 - the title of the post posts because
181:45 - we have none
181:46 - instead of title we have this
181:49 - which is called sorry instead of
181:51 - with a secondary slice title we should
181:53 - get it here
181:55 - but we are not
181:57 - title
181:58 - wait a second
182:00 - yes we're not getting title because
182:04 - we don't have title
182:05 - in the users
182:07 - because
182:09 - see
182:10 - we are just calling the users
182:12 - so if you make this says name we should
182:15 - see all the names
182:17 - so same api is called
182:19 - for the both components users and posts
182:23 - so to change it we will do this
182:26 - so to change it how can we change it
182:29 - we will pass the third thing here in the
182:31 - component of higher order
182:34 - this will be
182:35 - a string called
182:37 - the last word of the api call for
182:39 - example we have the users
182:41 - so we have to pass this users
182:44 - in the posts we have to pass sorry pass
182:48 - posts
182:50 - now it will come up here
182:51 - let's say
182:53 - let's say let's say the source
182:56 - or response
182:59 - not response what is the better name for
183:01 - this we can say request
183:04 - so pass the request here
183:07 - dynamically so request
183:10 - and add a toilet to make it dynamic
183:14 - now we will don't we will not see the
183:16 - posts because
183:18 - it's dynamic
183:20 - we can only see the post sorry let me
183:22 - explain why
183:23 - we are not seeing posts
183:25 - because we are mapping the data
183:27 - this data
183:29 - user's data which has no
183:32 - name in it
183:34 - but sorry we are not mapping the data we
183:37 - are mapping these posts
183:40 - which has
183:41 - no users in it it has title instead
183:43 - so we can say user title
183:46 - and it will be here
183:48 - see
183:50 - we have this
183:51 - posts
183:53 - and we have this users
183:55 - let me differentiate or make an
183:58 - hr tag between them
184:00 - a horizontal line
184:02 - so here we have posts we have users
184:04 - sorry we have users here and post here
184:09 - all done
184:10 - with a single component called higher
184:13 - order
184:14 - so
184:16 - we are calling the component in both
184:18 - components i mean we are calling the
184:21 - higher order component in users
184:23 - component
184:24 - and main posts
184:26 - in the users we are passing the title
184:30 - the component function
184:32 - and the api last endpoint
184:35 - like
184:36 - this users
184:38 - or posts see
184:40 - both
184:41 - in both we are doing this
184:43 - it is coming in this component as title
184:47 - as title c the user is the title the
184:50 - component
184:51 - all the data component and the request
184:54 - is this request
184:57 - the api last word
185:00 - i don't know what is called because i'm
185:01 - not
185:02 - i'm very tired right now to think fine
185:05 - so we have request here
185:08 - so it's fetching the data according to
185:10 - request according to the
185:12 - posts or users
185:15 - fine
185:16 - then it's also getting stored inside
185:19 - this data that's been stored inside a
185:22 - data state
185:23 - this is the component that we're
185:25 - rendering
185:26 - and in the component we're passing the
185:28 - data as props
185:30 - it's coming here as data and then we are
185:32 - mapping it successfully in both
185:33 - components
185:35 - users and posts
185:37 - so it's like a full circle
185:41 - we are calling the higher order
185:43 - component here
185:44 - then exporting the component here
185:47 - it's coming here all these things were
185:49 - passing
185:51 - then again
185:52 - it's getting called like a function here
185:55 - we are having a state which contains all
185:57 - the data
185:58 - as per the api call
186:00 - we are passing the component
186:03 - again here with the data
186:05 - and now it's coming here and it's
186:06 - getting mapped
186:08 - so that's how or that's what is a
186:10 - hierarchy component in react and how to
186:13 - use it
186:16 - so what is lazy loading
186:19 - so lazy loading simply means to load a
186:21 - component when we really need it
186:24 - for example let's say we have a file
186:27 - that's too big
186:29 - like this file so many text here letters
186:32 - or a project
186:34 - with so many components like a admin
186:36 - panel or a
186:38 - user management portal so in those cases
186:40 - when the file or project structure is
186:43 - big
186:43 - we can use lazy loading to decrease
186:46 - the load time and increase the
186:48 - performance of the app
186:50 - so let me show you the current
186:51 - performance of
186:53 - these two components
186:55 - let me comment
186:57 - this and save let me refresh
187:00 - and bring this back
187:02 - so if we refresh it once more
187:05 - let me
187:06 - change this network close radio to no
187:09 - throttling
187:11 - refresh it
187:13 - so
187:14 - the bundle size is four over nine
187:16 - kilobytes
187:17 - default is in loading so i have already
187:19 - wrote it here these commands
187:21 - so bundles are this for 4.9 kilobytes
187:24 - and the time is 1 3
187:26 - 5
187:27 - ms milliseconds
187:29 - now let's check the load time and the
187:31 - size after lazy loading
187:34 - to implement lazy loading we will just
187:37 - do this
187:38 - const let's say lorem
187:41 - the component name
187:43 - then we will use react
187:45 - dot lazy
187:47 - l should be small
187:49 - followed by a fallback function callback
187:51 - function sorry
187:53 - not fallback callback
187:56 - in the callback we will simply import
187:59 - the component path so for lorem it's
188:04 - lorem
188:05 - lauren lauren lauren lauren
188:08 - then const
188:10 - home equals to react
188:13 - dot lazy
188:15 - we will add the path for home this will
188:17 - be
188:19 - aim not import what was that yes import
188:23 - the home
188:24 - route
188:26 - h4mb
188:28 - comment the
188:31 - routes before reloading save
188:34 - now let's check refresh the page
188:37 - now in the bundle the size is
188:40 - 375
188:42 - ms
188:44 - and
188:45 - the load time is
188:47 - 191 milliseconds which is
188:50 - wait a sec
188:52 - size 191 milliseconds that's much
188:55 - okay
188:56 - i think we recorded it wrong so let's
188:59 - comment this
189:00 - and bring back this
189:02 - the original imports
189:05 - we refresh the page
189:06 - in bundle.js
189:08 - we have 4.9 kilobytes
189:11 - and one for one millisecond
189:14 - one four one save
189:17 - now comment these two
189:19 - and bring back
189:21 - the
189:22 - lazy loaded routes
189:25 - refresh
189:27 - in the bundle it's three seven five
189:32 - three seven five yes
189:34 - okay three seven five and
189:37 - wait wait wait wait wait we move remove
189:39 - remove remove
189:41 - and one three one so it's smaller than
189:45 - the
189:46 - default loading imports
189:49 - so see it differs
189:52 - wait a second bundle.js it's 375
189:55 - kilobytes not ms
189:57 - kb
189:58 - small k in big b
190:00 - like this
190:01 - so
190:02 - that's lazy loading
190:04 - that decreases the load time and
190:06 - increases performance
190:08 - i mean it's not much
190:10 - but for a larger application
190:12 - it will be dramatic
190:14 - and it will drastically improve
190:16 - the performance
190:18 - if we use lazy loading
190:20 - so
190:21 - what if we make the network slow like
190:24 - through slow 3g refresh the page
190:29 - it will load very slowly and in our case
190:32 - if we load it
190:34 - let us load it open the
190:37 - network tab load it
190:40 - it will be very slow and we will see
190:42 - this blank screen
190:44 - when we are loading the components
190:46 - how to fix that
190:48 - so we use something called suspense from
190:50 - react
190:51 - so let's do this
190:53 - we can import suspense from react
190:56 - and
190:57 - then wrap the components in suspense
191:05 - save
191:07 - okay the suspense suspense will take a
191:10 - fallback
191:12 - this one is a callback and it's a
191:14 - fallback
191:15 - so it is rhyming equals to
191:18 - we have to add
191:19 - the component that will load here
191:22 - so we can either add direct
191:24 - jsx like a div
191:26 - and anything inside it
191:28 - that says
191:30 - loading
191:32 - please
191:33 - p l e s e wait
191:37 - save
191:38 - now if you refresh
191:40 - and close this you will see something
191:42 - called
191:43 - loading please wait
191:45 - for a small time
191:47 - for a brief moment of time see it's
191:50 - still here i don't know how to decrease
191:52 - the network speed
191:55 - uh before this let's add custom
191:58 - throttling custom profile
192:00 - let's say
192:01 - profile name
192:02 - is vvs
192:06 - and this is
192:09 - 3
192:12 - k b i t
192:15 - slash s
192:18 - what is the problem number one must be
192:19 - number one zero two
192:21 - ten
192:24 - kilo bytes i think between zero to ten
192:28 - let's make it ten
192:35 - you cancel this
192:37 - refresh this let's try offline
192:41 - refresh the page
192:44 - no internet okay that's something else
192:46 - fine
192:47 - so let's try slow 3g
192:50 - once more
192:51 - and you will see a loading text here
192:54 - loading please wait
192:55 - for a short moment of time
192:57 - so that's how we do suspense in react
193:01 - or else if you don't want to use this
193:03 - div directly
193:05 - you can simply import a component
193:08 - so i have one component here called
193:10 - loader
193:11 - let's import it so input loader
193:16 - from one step back loader
193:19 - and just
193:21 - add the
193:22 - loader in the fallback
193:25 - callback callback
193:26 - refresh now you will see the loader
193:28 - again
193:29 - see
193:30 - so let's try to increase the text
193:34 - a little bit more
193:36 - let's see what happens
193:39 - let's paste it a bunch of times in
193:42 - app.js
193:44 - but in home.js
193:46 - so just
193:48 - paste it keep pasting it
193:50 - you don't need github
193:53 - keep pasting it and save
193:55 - now it
193:56 - is
193:57 - now bigger
193:59 - we don't need to format it
194:00 - so refresh
194:03 - now the loading text will take some time
194:05 - before it disappears
194:07 - so we can call the home once more and
194:09 - once more and once more
194:11 - now let's check what we have
194:14 - now we see the loading text you see
194:16 - please wait and the loading will come
194:19 - when
194:20 - the
194:21 - component is loading
194:23 - when the vl is loading the component
194:26 - so that's about lazy routing and react
194:28 - and how it works
194:32 - as you see here
194:34 - we have a function called get users
194:36 - that's getting the users from this api
194:38 - call
194:39 - we are simply calling the
194:41 - function to get the users
194:44 - fine
194:45 - but let's suppose a case where
194:47 - this api call we have to do
194:50 - in 10 different files or like 50
194:52 - different files or components
194:54 - so we have to repeat this function all
194:57 - over directly we have to
194:59 - make an api call to this api endpoint
195:01 - using fetch api xeos
195:03 - then call this then post it and put it
195:06 - inside by use effect look like this
195:09 - but that's not proper
195:11 - so in this case we will create a helper
195:13 - function
195:14 - so let's create a folder called
195:16 - helpers
195:18 - and in the folder let's create a file
195:20 - called
195:21 - get
195:23 - users or get all users
195:26 - dot js
195:28 - copy this function const get users
195:32 - and add it here
195:36 - make it export
195:37 - and
195:38 - we don't need this console
195:40 - we will simply return this function
195:45 - c
195:47 - and that's all
195:49 - for now for the
195:51 - helper function
195:52 - now we have a helper function to get the
195:54 - users from this api call
195:56 - and we can call it in any file we want
195:59 - and that made our things easy
196:01 - so now now let's import this
196:04 - function
196:05 - we can say get users
196:07 - from
196:10 - helpers slash get all users
196:13 - and we are done
196:15 - but a few things before that
196:17 - we have to return it in a led variable
196:20 - so this is returning some value
196:23 - the data after fetching the results all
196:25 - these 10 array items
196:27 - so we have to store it inside a variable
196:29 - called data
196:30 - then we can simply console.log
196:33 - this data and if we refresh the page
196:36 - we will get this promise
196:39 - so we have to create another function
196:41 - we can use async of it here but it's not
196:43 - proper
196:44 - so make a function called const
196:47 - get users helper
196:50 - it will be an arrow function like this
196:53 - move these two things or cut things here
196:57 - and then call it here
197:01 - it will still be a promise
197:03 - so we have to use the async function
197:05 - make it as sync
197:06 - and get users will be await
197:11 - now let's check so refresh the page
197:14 - now we can get all the data here
197:15 - correctly without calling any api in our
197:18 - main file
197:19 - so that's make
197:20 - our app.js or any component in which we
197:24 - help use the helper function clean and
197:26 - easy to use and understand
197:29 - so the logic is separate from here and
197:31 - the ui is separate
197:35 - now let's take one more example
197:38 - let me create one more helper function
197:40 - here
197:41 - which will be called add to dot js
197:45 - this will add to numbers
197:47 - so we'll do export const let's say add
197:51 - nums
197:54 - make it an arrow function again
197:57 - okay what i am doing equals to this
198:00 - syntax
198:02 - then in this function we will simply
198:04 - turn
198:05 - the a plus b so this a plus b we have to
198:09 - get it somewhere from somewhere
198:12 - so we will get it from arguments
198:14 - then if we
198:16 - call the function we have to pass a and
198:18 - b here
198:19 - so copy this function name add nums
198:23 - come here
198:24 - we can simply call the function
198:26 - add nums
198:28 - from
198:29 - helpers
198:30 - slash
198:31 - add to
198:34 - so
198:35 - we can call the function so let's create
198:37 - one more
198:38 - so let's say const
198:41 - add to
198:44 - nums
198:45 - helper
198:51 - then we can simply call
198:53 - this function like this
198:55 - then let's add a button here
199:00 - say add
199:01 - and on the button we have an online
199:03 - event we can have
199:06 - and this function
199:08 - call
199:10 - now it will
199:12 - return this
199:13 - but we have to store it in some variable
199:16 - so we can select sum equals to this
199:21 - and
199:21 - we can simply
199:23 - console this sum
199:25 - console.log sum
199:27 - now click the button okay we can just
199:29 - comment this data console here
199:32 - now
199:33 - add click add
199:35 - we will see
199:36 - nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
199:37 - n means not a number
199:39 - because we are not passing any arguments
199:41 - or parameters because it's getting true
199:46 - so we can pass two numbers directly say
199:49 - two and three
199:53 - and now if we click add
199:55 - we give we will get five here
199:57 - in line number fourteen in app.js file
200:02 - so
200:03 - that was function a function to add two
200:05 - numbers using a helper function
200:08 - suppose we want to add one more function
200:10 - here called
200:12 - sum so we had some already we can say
200:14 - const
200:15 - multiply
200:21 - so we can do return
200:24 - a multiplied by b
200:27 - it will also take two things because c
200:29 - and b are not defined
200:31 - in add to
200:33 - wait a second
200:34 - in add to
200:36 - yes it's not defined
200:38 - so we have to define it
200:39 - then it will multiply and return us back
200:42 - the multiplied number
200:45 - so here we can do or
200:47 - simply import it first
200:49 - so it's multiply the function name
200:51 - and let's measure make it multiply nums
200:54 - so copy this function name and add it
200:57 - here input it first
201:00 - so we have the sum here
201:02 - we can also have let's let
201:05 - multipulse equals to
201:08 - multiply sums and let's add two numbers
201:11 - two and four
201:12 - then we can console
201:15 - the same thing
201:17 - so what is the problem multiply nums
201:20 - was not found in helpers add to save
201:22 - this then it will work
201:24 - let's add one more button
201:26 - for multiplication but we can use it as
201:29 - also so if we click we will get sum and
201:31 - multiplied numbers
201:34 - so 5
201:35 - 2 plus 3 5 and 2 into 4 equal to 8
201:39 - i think i'm correct
201:41 - so that's
201:43 - so
201:44 - let me show you one last thing here
201:46 - we are calling this get users helper
201:49 - function
201:51 - i mean we are having a function of get
201:53 - users helpers
201:54 - in this we are calling get users this
201:56 - function
201:58 - we can pass
201:59 - a param here as well
202:01 - so for example
202:03 - if you see we have something like
202:05 - posts comments albums all things
202:09 - so let's try to add the posts here
202:13 - pasta
202:14 - variable called posts
202:17 - i mean not a variable a string
202:21 - it will come
202:22 - in the get users function
202:25 - and we can receive the users
202:27 - we can receive it as
202:29 - params
202:31 - or parameter
202:34 - then
202:35 - let me convert this into string literals
202:39 - here
202:40 - then we can simply
202:42 - replace user with the param
202:44 - so if we pass anything
202:46 - here in this function of get users it
202:50 - will come up here
202:51 - it will append to the api endpoint and
202:53 - it will call so now i will get all the
202:55 - posts
202:56 - refresh
202:58 - comment uncomment this data
203:00 - and we are getting all the hundred posts
203:02 - see
203:04 - if you pass to do's we will get to do's
203:07 - so let's pass to do's
203:10 - so now it became just it just it became
203:13 - dynamic
203:15 - it just became dynamic
203:17 - yes
203:18 - now if it is refresh the page it will be
203:21 - to do's
203:22 - 200
203:24 - this
203:25 - we can check the network tab so let's
203:27 - open network
203:29 - refresh
203:32 - let me filter it to xhr and fetch api
203:36 - let me turn
203:38 - it network
203:41 - all settings where is the filter
203:45 - i think settings
203:50 - slow 3g to
203:51 - fast or no throttling
203:54 - now
203:54 - you will see we are reading to do there
203:57 - if you open headers this will be to do's
204:00 - if you make it as photos we will see
204:02 - photos
204:04 - in the console it refresh
204:06 - and we're reading photos
204:08 - so it just became dynamic
204:10 - so that is heart or that is what is a
204:13 - helper function in react and how to use
204:15 - it
204:18 - so as you see here
204:20 - i have an object a family tree which
204:22 - contains children's
204:24 - for example this john
204:26 - it's a grandfather
204:28 - and it contains these children called
204:30 - mary
204:31 - arthur and dolores
204:34 - it has his children
204:36 - so we're mapping the children from this
204:39 - this
204:41 - array
204:42 - yes so click this john
204:44 - it will show the name of history
204:45 - children's
204:47 - but this can become hectic if we have
204:49 - children inside children inside children
204:51 - like this that right that's right
204:54 - so see you have children inside children
204:57 - and it can go on and on and on
205:00 - in that case we cannot get
205:02 - or we cannot
205:03 - map each and every child
205:05 - statically like this we are doing right
205:07 - here we have to automate the process so
205:10 - that it maps itself
205:12 - so in that case we will use recursion
205:14 - so that the family function or component
205:17 - calls itself when it comes to mapping
205:20 - so let's do that we will call this
205:23 - family function again
205:25 - in the time of mapping
205:27 - so
205:28 - we will pass
205:29 - the same prop here family tree but in
205:32 - this case it will be child
205:34 - so for example let's say we are mapping
205:37 - this children first children
205:40 - it's returning us this thing
205:42 - and the child children inside it
205:45 - if it is true it will pass it up here
205:47 - again and it will like
205:49 - break it like it's going up here
205:52 - so let's pass
205:53 - the family tree
205:55 - prop as child
205:58 - so if it has a children
206:01 - array
206:02 - it will map it up if it is not have an
206:05 - array it will skip it
206:07 - so that's the power of recursion
206:09 - now let's try this
206:11 - click john
206:13 - it's open
206:15 - mary add serendoratus it's opening this
206:18 - then click the author it will open up
206:21 - because arthur has
206:23 - the children diary
206:25 - these two
206:26 - now click marry it will not open up
206:29 - because mary has no children
206:31 - now let's go into dollars
206:33 - same dollars has no children
206:36 - but in this arthur we have lillian billy
206:39 - if you click lily it will have two
206:41 - children because then it will open up
206:45 - but hank and henry have no children so
206:47 - it will not open up
206:49 - then again same with billy it will not
206:50 - open up
206:51 - so in a same way in a similar manner
206:55 - if the child if the child have some
206:57 - children
206:58 - it will open up or else it will not open
207:00 - up
207:02 - so that's recursion in react and how to
207:04 - use it
207:08 - so in this video let's see a question
207:10 - that says write a function which takes
207:12 - an array of multiple functions
207:14 - and
207:16 - executes them one by one in left to
207:18 - right manner
207:20 - and it has been asked by the matter
207:22 - in their intervention or questions
207:25 - so let's try to tackle this question
207:27 - our approach should be simple
207:29 - we will create an array first so let's
207:31 - create an array of this const
207:34 - fn array
207:36 - and it will be a
207:37 - array yes
207:39 - so step one that was
207:41 - and inside we will have some functions
207:43 - so it says
207:45 - it takes an error sorry array of
207:46 - multiple functions
207:48 - so let's create multiple functions so
207:50 - let's function key what we need
207:52 - fn
207:56 - that's how we write a function
207:58 - let's return
208:00 - return
208:02 - a plus b
208:05 - let's write the params here
208:07 - fine
208:08 - we have function to add two numbers
208:10 - let's repeat it three times
208:13 - this will be subtract so minus
208:15 - multiplication and this one should be
208:18 - division
208:19 - so we have an array of four functions
208:22 - so this part is done
208:24 - now let's execute it
208:27 - so let's create a function
208:29 - a main function that it says in the
208:31 - question so write a main function
208:34 - so const
208:36 - main
208:37 - fn
208:40 - we can make this an arrow function
208:42 - inside this we can call
208:44 - this
208:45 - array using map method simply
208:48 - but first we have to call this function
208:50 - in this effect as well
208:52 - if you want to run it on the page mounts
208:54 - on the page mount
208:58 - sorry not
208:59 - yes not here here sorry sorry here we
209:02 - have to write
209:03 - so we will simply map
209:05 - this
209:06 - different array so we can say map to get
209:09 - all the functions inside directly
209:11 - it takes a parameter called fn
209:14 - and we can simply return
209:17 - this fn function
209:20 - now let's store the data inside once
209:23 - variable because it's returning it so
209:25 - console.
209:28 - okay let's do this let's say let
209:31 - data
209:32 - or let's say relate result
209:35 - so whatever we get from all these
209:37 - function
209:38 - executions we will get inside this
209:41 - result the data will get inside this
209:43 - result so we will get addition
209:45 - subtraction multiplication division all
209:46 - these
209:47 - and then we can simply console it to
209:49 - check in the console
209:51 - so what is that
209:53 - let's open the console and check what we
209:55 - are getting right now it will be an
209:57 - error
209:58 - we are getting this array yes it's an
209:59 - error because all the four items are
210:01 - giving nine
210:02 - because we're not passing
210:04 - this
210:05 - values which is a and b so let's pass
210:08 - two and three
210:11 - so refresh
210:13 - now we are getting this so
210:15 - 2 and 3 we are passing so this will be
210:18 - 5
210:19 - minus 1 because 2 minus 3 equals to
210:21 - minus 1
210:22 - this should be 6 because multiplication
210:24 - and this should be
210:26 - this
210:27 - 0.6665
210:28 - we can make this as 4 or 6 and 3
210:32 - then we will get this
210:34 - 9 because we're writing them
210:37 - 3 we are subtracting them
210:39 - 18 multiplication and 2s division
210:42 - so that was how we do it in an array
210:46 - but we have one more option here to do
210:48 - this
210:49 - not in an array but in an added object
210:52 - so let me comment this and wrap this in
210:55 - an object
210:56 - like this
211:00 - we will make
211:01 - an add value here add key now this
211:04 - additive add this add will run
211:07 - when the function is running
211:09 - i mean this add will run
211:11 - when we call the ad
211:14 - so why don't we make this as something
211:15 - else called
211:17 - or make this function as add
211:19 - and this should be
211:20 - a
211:21 - simple key name which will be function
211:24 - now we have the add function
211:26 - similarly let's repeat it
211:28 - multiple times
211:30 - okay not this
211:32 - let's repeat
211:35 - let's make it minus
211:38 - multiplication
211:40 - and
211:41 - division
211:42 - division
211:44 - now this should be
211:45 - divide
211:47 - this should be what can we call it
211:49 - multiply
211:50 - or multiply multiply yes
211:53 - they should be
211:55 - subtract
211:58 - now we have now four different functions
212:00 - add subtract multiply and divide
212:04 - save we can remove this but let's leave
212:06 - it
212:06 - now we will call fn.fn because
212:09 - we have a key name here in this object
212:12 - because right now it will give an error
212:13 - if you refresh the page
212:16 - cannot try properties sorry fn is not a
212:17 - function
212:19 - so i will do fn dot
212:20 - fn and that will work now
212:23 - the same way refresh
212:25 - and we are writing all the four items
212:28 - after subtract after addition or sum
212:31 - subtraction division and multiplication
212:34 - so in both cases we can do it
212:37 - so
212:38 - i think that's all the question
212:40 - has been solved
212:42 - we have a function
212:44 - that takes array of multiple functions
212:47 - and executes them one by one left to
212:49 - right
212:50 - so left right means from top to bottom
212:53 - if you are saying this
212:55 - formatted code so add is that left
212:58 - then second left third left and fourth
213:00 - left
213:01 - so that was how we do it and it's done
213:06 - so let's say custom hook is a service
213:09 - we can say like in angular we have
213:11 - services
213:12 - the same way we can have a custom hook
213:14 - but with more
213:15 - functionalities
213:17 - so let's try to create a custom hook
213:19 - here that will call these two apis
213:22 - we will need a file here called let's
213:24 - create a file called
213:26 - hooks
213:27 - in the file let's create a sorry in a
213:29 - folder let's let's create a file called
213:32 - use
213:34 - json
213:36 - or use yes
213:37 - json
213:38 - place holder
213:41 - so if you want to create a hook you will
213:43 - use the name
213:44 - with hugos jsonpress filter like this
213:48 - here we will create
213:50 - these two things so let's
213:52 - copy and or cut and paste it here
213:55 - save
213:57 - now what we have to do is we have to
213:58 - just create and function like this
214:01 - like this function app
214:02 - so we'll do function
214:05 - let's say
214:07 - use data
214:08 - use data
214:11 - it will be in function like the app.js
214:14 - inside we will see we have these things
214:18 - all these use effect hooks and states
214:20 - so see we are having these two states
214:23 - and we are using it here so let's create
214:25 - this
214:26 - in our this hook
214:29 - inside this function
214:32 - yes so paste it and save but we need to
214:35 - use state from react so let's import it
214:38 - import
214:40 - use state from
214:44 - react
214:46 - save
214:47 - and these two functions
214:48 - we also need inside this use data
214:53 - at the last we need to export this so
214:55 - export
214:57 - default
215:00 - this use data work
215:02 - and we are done
215:04 - not done almost done
215:06 - we have two states use
215:08 - users and posts and we're calling the
215:10 - api
215:11 - we will note here that we will we also
215:13 - have this use effect hook so
215:16 - we need this here
215:17 - in order to run these two hooks
215:20 - these two methods i mean get users and
215:22 - get posts so let's import this as well
215:25 - here so use
215:27 - effect
215:29 - and it's done
215:31 - fine so save this file but we will get
215:33 - an error because we don't have the users
215:36 - here
215:37 - these states we don't have here
215:40 - so let's return them
215:41 - from this
215:42 - component
215:44 - just like we returned
215:45 - some jsx here
215:47 - this we will return it here so we can
215:50 - say
215:51 - in curly bracket we will do
215:54 - users comma posts
215:56 - and that's all
215:58 - so that's how that is our custom hook to
216:00 - fetch the users and posts
216:02 - from this apis
216:04 - but we have to call this new hook into
216:07 - our app.js so let's do it we can import
216:11 - use data from this address
216:13 - this
216:14 - navigation address
216:16 - then we can restructure the data here we
216:18 - can select
216:21 - users and comma posts
216:24 - equals to use not sorry note you use
216:27 - data yes we have to this
216:30 - and it will work it will fetch the data
216:32 - that it was fetching previously
216:35 - so here now i have a hook
216:38 - that fetches the users and
216:40 - get posts and its loads on the
216:44 - page load or page mount
216:46 - so basically we're doing this we are
216:48 - getting the posts and users from these
216:51 - apis
216:52 - and loading them on page mount
216:55 - which is in our custom home
216:57 - so we can use it anywhere we want
217:00 - because
217:01 - we don't need this here remove it fine
217:03 - yes we can use it any way we want
217:06 - in our file or project or component
217:09 - or our react app
217:12 - so that was all about how to create a
217:13 - custom hook
217:15 - for a custom
217:16 - singular group
217:19 - so let's take an example first of a
217:21 - real-life promise
217:23 - that says
217:25 - i promised someone to be my friend
217:28 - on one condition that i give him a
217:29 - chocolate every day
217:31 - if i fail to give him a chocolate even
217:34 - on our day or a single day or one day
217:37 - he will break the promise and he will
217:40 - not be my friend
217:42 - now let's implement this in react
217:45 - so what we will do is we can create a
217:48 - let friend
217:50 - function
217:51 - inside we will have a syntax for promise
217:53 - which will say
217:55 - new promise
217:59 - it will take two things which is resolve
218:03 - and reject
218:05 - so if the promise is complete done
218:09 - it will be dissolved
218:10 - or else if it fails it will be rejected
218:14 - now let's create a condition for promise
218:17 - so let's create a variable first so let
218:19 - is chocolate
218:23 - every day
218:24 - if it is true
218:26 - only then the promise will resolve
218:29 - so we have to do this
218:31 - so if this is true is chocolate every
218:33 - day
218:34 - if this is true
218:36 - we will call
218:37 - this
218:38 - resolve and we will pass
218:42 - some params which will say
218:44 - promise
218:47 - resolved
218:48 - if it fails
218:50 - so it means if this variable is false is
218:54 - chocolate every day
218:56 - we will reject it we can say reject
218:59 - and a message called
219:01 - promise
219:05 - broken
219:07 - so that's done
219:09 - now we have to call this function called
219:11 - trend
219:12 - so we can do it like this so a friend
219:15 - function
219:17 - then we will use then block
219:19 - so then for resolve statement
219:22 - which will return as a response
219:27 - if it is successful
219:29 - so in this then log we will call this
219:31 - response and we can simply console.log
219:34 - this response
219:36 - and we will get this message here
219:38 - promise result
219:40 - but if it fails we have to call a catch
219:42 - block
219:45 - which says an error
219:48 - or let's make this simply as dissolve
219:52 - to simplify things and this one has
219:54 - reject
220:00 - clg
220:02 - digit
220:03 - now open the console and let's see what
220:05 - we are getting in the console
220:08 - refresh
220:10 - okay something is wrong trend is not a
220:12 - function
220:14 - so what can we do here
220:17 - let friend okay fine make it as const
220:21 - then it will work
220:22 - okay the problem is this is not a
220:24 - function so let me clear this
220:26 - save and let me refresh the page now it
220:28 - will work
220:30 - so promise resolve because
220:32 - we are resolving the promise it's true
220:35 - then it's returning this thing
220:37 - or else if it fails it will return this
220:39 - so make it as
220:41 - false because
220:42 - we fail to give chocolate every day
220:45 - so it's broken
220:46 - we can add a customizer here as well
220:49 - like this so we can say or just wrap it
220:51 - in a
220:53 - template little string
220:55 - and we can add our text
220:58 - no
220:59 - dot add here do i dot here and say no
221:03 - more
221:06 - body not here
221:10 - do it here
221:12 - like this that will say
221:16 - no more
221:19 - f r i e n d ship
221:23 - no more friendship
221:25 - and now i will get the extended message
221:27 - here with
221:28 - this promised broken message
221:31 - no more friendship
221:32 - so that was
221:35 - promising react
221:37 - now let's take one more example for
221:40 - thomas here
221:42 - in this promise one it is a function and
221:45 - it's getting a parameter called prime
221:46 - one
221:48 - if the parameter may pass its nissan
221:51 - it resolve else it will reject
221:54 - in the second function we are passing
221:56 - param2
221:57 - and if param is promised resolved this
222:00 - resolve text
222:02 - it will be resolved and print this or
222:04 - else this
222:05 - basically we will link these promises
222:07 - together
222:08 - in a chain so we can call the promise
222:11 - one first so say promise one
222:16 - we will pass some parents let's say
222:18 - nishant
222:22 - then it will resolve because the
222:24 - parabola is nishant then as per
222:25 - condition it will dissolve
222:28 - it will return us some message
222:30 - in the then block say
222:32 - response
222:36 - we can control this response and let's
222:38 - see what we get
222:41 - let's also call the function in this
222:42 - effect
222:44 - to run when the page mounts
222:46 - so open the console
222:51 - it is a phrasal page
222:53 - we are saying promise resolve text
222:56 - line number 27 because
222:58 - the promise has been resolved
223:00 - and now see this promise 2 takes a param
223:03 - 2
223:04 - and if it is equal to this problem is
223:06 - resolved
223:07 - it will resolve this
223:09 - else it will reject this
223:11 - so we have to chain one more than here
223:14 - say then
223:17 - and here we can say uh
223:20 - response again
223:23 - response
223:28 - or we can say f response for first
223:31 - response and s response
223:33 - for second response
223:35 - then we can console dot log
223:38 - this s response
223:41 - but we are not calling this function
223:44 - if we save and run it will be undefined
223:46 - because the function is not getting
223:48 - called and this is null or undefined
223:52 - so we have to call promise 2 here and we
223:54 - have to pass this f response here
223:57 - so let's do it
223:58 - and pass
223:59 - this f response
224:02 - now it will work refresh the page
224:04 - we will see
224:05 - promise resolved and undefined wait s
224:08 - response
224:10 - is
224:11 - getting passed here
224:13 - promise resolved
224:15 - the text is right
224:22 - let me add one more block called l or
224:25 - catch error block
224:27 - so the catch if it isn't any error
224:31 - then we can say
224:34 - err error
224:36 - and
224:37 - console.log
224:39 - this error
224:41 - now we are reading this promise resolved
224:43 - again and undefined
224:46 - but we shouldn't get this
224:48 - then
224:49 - s response
224:51 - we are calling this promise to
224:54 - okay the problem is we have to return
224:56 - this function
224:57 - not simply call it like this it will not
224:59 - work so return promise to an f response
225:02 - now i will get these two both
225:04 - so let me
225:05 - console it or just go back
225:08 - and return this function
225:11 - now refresh it once
225:13 - we will get promise resolved and sean is
225:15 - a good boy
225:17 - so basically we are getting first
225:19 - response
225:20 - and second response
225:22 - if we make this
225:24 - promise rejected here or change the text
225:30 - we will get some errors
225:32 - you see we are getting promise resolve
225:34 - from the first response
225:36 - and sean is still a good boy from this
225:38 - reject statement
225:41 - but
225:41 - if we change
225:44 - this thing this should be let's say
225:47 - challenge
225:50 - so
225:51 - it will not go inside this then block
225:54 - because it will directly reject the
225:55 - first promise
225:57 - it will directly go inside this error so
225:59 - if we refresh and save
226:01 - we will get promise rejected let me
226:03 - refresh once more we will see promise
226:05 - rejected
226:07 - because in the first level we are not
226:10 - dissolving the promise so it will not
226:12 - get inside in this block
226:14 - it would literally go inside this block
226:17 - and it will reject the promise
226:20 - so that was promise in react and how to
226:22 - use it
226:24 - so now let's look into asynchronic part
226:26 - in react
226:27 - so what is the thing of it
226:29 - it's nothing but
226:31 - sync tactical sugar on our promises
226:35 - so what do i mean by that is
226:37 - let me show you what i mean by that
226:40 - so in order to make a function
226:42 - asynchronous we will have to use assign
226:43 - keyword here
226:46 - now the function is async
226:48 - we have to call await now so we have to
226:51 - call the function now this is promise
226:54 - one function
226:56 - so it simplifies the way we write
226:58 - promises that's all
227:00 - nothing else
227:02 - so we will await this function
227:05 - from this one and await means
227:08 - everything else in the promise or in
227:10 - this promisement function
227:12 - will wait until this function is
227:14 - finished executing
227:16 - so let me record the response in a
227:18 - variable called
227:20 - response or res
227:23 - now let me console
227:24 - this res
227:26 - let's see what we are getting
227:28 - we should say nothing or we should
227:35 - and it's not matching together
227:38 - so open the console
227:42 - console we will see promise rejected
227:44 - because the name is not matching
227:47 - so let's pass nishant here or make the
227:49 - param one equal to nishant
227:52 - now i will see promise result because
227:54 - it's getting resolved
227:56 - fine
227:58 - so it finishes then everything else will
228:01 - run because we have an event here
228:03 - now let me call promise to
228:07 - so let me call promise to using let
228:11 - res to response to equal to
228:14 - await promise to and we have to pass
228:18 - this response here
228:21 - because it's promise resolved it will it
228:24 - will come here
228:25 - and then it will print this
228:28 - if it dissolves
228:30 - so we can console.logs second one as
228:32 - well
228:34 - which will say ras2
228:38 - and we can save the file and check
228:41 - refresh it once and we will see promise
228:44 - resolved and nishant is a good boy
228:48 - fine
228:49 - but we cannot catch errors here but we i
228:52 - mean if we want to catch errors let's
228:54 - say we don't pass anything in the
228:57 - promise to where is it here
228:59 - let's say you pass something else called
229:01 - some random text
229:03 - we will get this message here so we
229:05 - cannot
229:07 - add a custom message we want in this
229:08 - async of it
229:10 - oh because but we can
229:12 - so what we have to do is we have to wrap
229:14 - it in a try clash try catch block so try
229:18 - all our code will go inside try
229:20 - that can fail
229:22 - and then if it fails
229:24 - you will call catch
229:26 - like this
229:29 - is that right do we have to call catch
229:31 - like this let's think or try
229:34 - so in the catch we can say console.log
229:41 - we can say promise
229:45 - rejected
229:47 - i think we don't have to use this
229:49 - save and now let's see yes that works
229:52 - tom is rejected because we are passing
229:54 - some random text here
229:56 - known the text that's here and being
229:58 - compared to param2
230:00 - so promise rejected because you know why
230:04 - if we add res here it will resolve again
230:07 - sorry
230:09 - r-e-s
230:10 - response
230:12 - refresh
230:13 - promise resolve and shan is a good boy
230:17 - so that was
230:19 - promise and asynchronic
230:21 - now let me okay let me just copy
230:25 - this
230:26 - let me make this
230:28 - a sync main
230:29 - thing the name
230:32 - and add it here
230:35 - fine
230:36 - now let me do this copy the function or
230:39 - the use effect hope together
230:41 - and go back
230:42 - to promises
230:44 - page or where we wrote the promise code
230:48 - and simply paste it here
230:52 - wait brothers sends okay
230:55 - challenge this should be not here
230:58 - should we make this
230:59 - yes
231:00 - let's add the function here
231:03 - we only need one use effect hook because
231:05 - we can call
231:06 - one user factor and two functions
231:09 - two birds with one stone so we have
231:11 - promise main
231:13 - this is the syntax of
231:17 - promises
231:19 - this is a syntax of s incoming
231:24 - async away
231:28 - so you can decide which one where do you
231:30 - want to use
231:31 - if you want to use promise or a think of
231:33 - it
231:34 - i prefer think of it because the code is
231:36 - shorter and simplified
231:38 - not this then and then in catch
231:41 - so that's up to you now and that was all
231:43 - about promises and async await in react
231:46 - the implementation
231:50 - so what is code splitting
231:52 - it says here that most react apps will
231:55 - have their files bundled
231:57 - using tools like webpack crawl up or
231:59 - browser
232:01 - e5
232:03 - bundling is the process of following
232:04 - imported files and merging them into a
232:06 - single file called a bundle
232:08 - and it can be loaded on a web page to
232:10 - load the app at once
232:12 - so it basically said that
232:15 - whatever thing we write in our apps
232:18 - in this project or in this react app
232:20 - it will be loaded inside a bundle
232:23 - let me show you that bundle and what is
232:24 - it open the network tab
232:27 - and
232:28 - you will see if you refresh the page
232:30 - this bundle bundle.js file we cannot
232:34 - this file let me show you like this
232:36 - bundle.js which contains everything so
232:41 - everything will be abundant
232:43 - even if we are not using the imported
232:45 - things here
232:47 - it will still bundle the app.js input
232:49 - and this
232:51 - or
232:52 - even if we use this or even if we want
232:55 - to load it like this it will bundle
232:57 - so in this case we can use something
232:59 - called code splitting in react which is
233:02 - me which means that
233:03 - we can create a smaller bundles this
233:06 - to avoid winding up with a large bundle
233:09 - it is good to get ahead of the problem
233:11 - and start splitting your bundle
233:14 - it is a feature supported by bundles
233:16 - like webpack and all
233:18 - which can create multiple bundles
233:20 - and it can be related loaded dynamically
233:23 - at runtime
233:25 - so
233:26 - one more thing we have here is loading
233:28 - that i showed in this playlist you can
233:31 - see the video
233:32 - but in this we will use dynamic imports
233:34 - to
233:35 - code split
233:37 - and
233:38 - we can do it like this
233:40 - so it's it says here that this is
233:42 - normally import we are using it here
233:46 - and this one is the
233:48 - part is it
233:49 - it was
233:51 - forward splitted dynamic input
233:53 - instead of using import here let me
233:55 - comment it
233:56 - we have to use it here
233:59 - so we can do it like this we can say
234:01 - import
234:03 - the path which is
234:05 - math
234:07 - and we can use a then function or a then
234:09 - keyword
234:11 - then it's simply a promise based or uh
234:14 - what is it yes promise based call
234:16 - and if you want to learn about this then
234:18 - you can see my previous videos
234:21 - on async await and
234:22 - promises and react
234:24 - online limitation will be there
234:27 - so then we can say math
234:31 - wait a second
234:33 - then
234:35 - we can say
234:36 - math
234:40 - and here we can say
234:43 - uh this thing so just copy or cut and
234:46 - paste
234:47 - but
234:48 - let me make this a small math
234:51 - this math will be a function
234:53 - that we are getting here
234:55 - if you console
234:57 - this math let me comment this sum and
234:59 - control this math let's see what waiting
235:02 - let's see what we're getting in the
235:03 - console
235:06 - open the console
235:07 - we will see this module basically a
235:09 - bundle
235:10 - now let me bring this back and we can do
235:14 - math
235:16 - dot add
235:19 - and we will pass five and six
235:21 - okay
235:22 - and then we can
235:24 - just do this as well replace add with
235:27 - this then we can control some
235:30 - let's say we will get 11.
235:32 - so it's working you can see
235:34 - open the network tab now
235:36 - and refresh the page
235:38 - we will see a bundle called
235:40 - src mac.js
235:42 - chunk
235:43 - so
235:44 - this thing in the user facebook
235:46 - is a dynamic import let me write it here
235:50 - dynamic
235:51 - import and it created
235:54 - import
235:55 - it created a small chunk
235:57 - a small bundle
235:59 - so we can use the bundle to improve
236:01 - performance
236:02 - and decrease load time
236:04 - fine
236:06 - fine so
236:07 - let me give you one more example here so
236:09 - if we refresh the page
236:11 - this bundle is loading
236:13 - see
236:14 - so let's say in a case when we only need
236:17 - this bundle when we click a button
236:20 - so we can create a button here first
236:23 - that says add
236:25 - let me quickly create a function so
236:26 - const
236:28 - sum or let's say const
236:33 - simply adds
236:35 - it doesn't matter
236:36 - add an arrow function this will be
236:39 - and we will move all this import in here
236:43 - including this
236:46 - let me remove user factbook and
236:49 - this as well
236:51 - something is wrong use effect also
236:54 - that's fine
236:57 - now this function will only run when we
236:59 - click the button of add
237:00 - so we can say on click
237:04 - on click this thing called
237:08 - add
237:11 - we have a button here called add let's
237:12 - click it and see what we're getting
237:14 - first let me open the network tab
237:17 - to see if the bundle is loading or not
237:23 - no we cannot see that math.js bundle
237:26 - but wait a second how to remove what
237:28 - happened
237:30 - what is this
237:31 - okay it's something else it's step tools
237:33 - so you see we are not saying this mac to
237:35 - js bundle
237:37 - we will see it only if we click the
237:38 - button of add
237:40 - see we are seeing it here and it's
237:42 - getting called
237:43 - a chunk file a small bundle
237:46 - so that's how we use dynamic imports in
237:49 - react to improve
237:51 - performance
237:52 - and it is one of the examples of code
237:55 - fitting in react
237:57 - we can use react dot is the import lazy
237:59 - loading i mean
238:01 - we can use
238:02 - fallbacks
238:04 - okay not this we can use this so it's
238:07 - just
238:08 - part of the lazy loading
238:10 - so that's how we do dynamic imports in
238:12 - react
238:16 - so first of all we need some data so
238:18 - let's go over to this website called
238:22 - jsonplaceholder.com
238:25 - we will get
238:26 - some
238:27 - apis from here that will feature some
238:29 - data like this to do
238:31 - or this posts comment and all
238:34 - so let's make the
238:35 - api call in the user effect
238:38 - or let's create a const method const
238:41 - let's say um
238:44 - get data
238:47 - and all of these then the switch api
238:50 - now let's import the effect
238:53 - use effect hook
238:57 - from react
238:59 - react
239:00 - like this
239:02 - fine
239:03 - but let's replace this to do's with uh
239:06 - let's say
239:09 - let's say
239:10 - users so make users here nmr1 fine
239:14 - so we can see all the users if we
239:17 - call it in user facebook and set the
239:19 - states and do all this so also we need
239:22 - the state
239:24 - so let's create it using your state hook
239:26 - so
239:28 - user set users equals to users for use
239:32 - effect and array
239:35 - now let's set it here
239:37 - instead of console.log then we have to
239:40 - call the function in the user book
239:43 - so render it here
239:48 - then call the function simply like this
239:51 - get data
239:52 - save
239:53 - now time to map
239:55 - this users to return the data inside so
239:57 - we can say users dot
240:00 - map
240:01 - let's say
240:02 - user
240:06 - then we can return
240:08 - some j6 that can be a div or a fragment
240:11 - first
240:12 - in the fragment let's make h2 of
240:19 - user not name you will get all the
240:23 - username here
240:24 - so if you open the users we have
240:27 - more things like
240:28 - username as well so let's render this as
240:30 - well
240:31 - we can make an p tag and then we can say
240:35 - user dot username
240:38 - what is it username
240:41 - if
240:43 - we have the username here
240:45 - this all
240:46 - let's make
240:48 - wait a second let me wrap this in a
240:51 - div
240:52 - this user's mapping
240:55 - then give it a class name of
240:57 - class
240:58 - grid main
241:02 - we will make a we will make a card here
241:04 - in the app.css
241:07 - so we can say grid
241:10 - mean
241:11 - in this function sorry in this class
241:13 - name
241:14 - we can say
241:16 - display of grid
241:20 - and all of these
241:23 - fine we will have
241:26 - this type of template so we don't need
241:28 - the margin top
241:30 - also let's try wait
241:33 - user name username what is happening
241:36 - remove template rows
241:41 - refresh the page one second i think this
241:43 - should be
241:45 - let's make it
241:47 - auto
241:49 - auto
241:50 - auto to auto adjust them
241:54 - but wait something is wrong
241:56 - here is
241:58 - we have to make it a div here
242:02 - let's try now now it's working
242:04 - we have the name and the username
242:07 - after the name
242:08 - so let's make one border also
242:11 - but we have to do it here in this day so
242:14 - we can say div class name
242:17 - grid
242:20 - child
242:21 - come to the app.css and say
242:25 - grid
242:26 - child here we can say
242:30 - border
242:32 - one pixel solid
242:38 - two one two one two one
242:40 - and we have a border here
242:43 - let's add a little bit padding
242:45 - 10 pixels
242:48 - not here
242:50 - here
242:51 - now they are
242:52 - fine let me decrease the color it's
242:55 - black let's make it
242:57 - a little bit gray
243:05 - grayer like
243:06 - this will be fine
243:09 - we can go more
243:18 - okay okay okay this one should be fine
243:21 - okay
243:23 - we have the name and the username
243:26 - fine
243:27 - now what we have to do is what we have
243:29 - to do
243:30 - so we can see all the users
243:32 - but let's create a search input first
243:35 - so we can say input
243:39 - placeholder should be
243:42 - search
243:45 - users
243:48 - we will have the input of search wizards
243:51 - a class name as well
243:53 - of
243:56 - search now let's come to about css and
243:59 - search
244:00 - then here we will be making
244:03 - these things
244:05 - also remove this border
244:09 - we don't need that
244:11 - okay it's too big so we can
244:14 - make the height of 20 pixels
244:17 - should be fine width to 80 percent
244:20 - too much 50 let's try 40
244:23 - okay 40 looks fine
244:25 - then let's say margin top
244:28 - and margin
244:30 - of
244:32 - margin top we need 20.
244:35 - fine
244:36 - also let's remove the outline
244:38 - of this
244:40 - to none
244:41 - make it none
244:43 - we have this
244:44 - also change the border to
244:47 - this color what is it
244:48 - this
244:51 - now we have this search we are giving
244:53 - the power query
244:55 - now let's get the query in a state so we
244:57 - need one state as well so const
245:01 - search
245:02 - query
245:04 - and set search
245:08 - equals to use state it will be an empty
245:11 - string empty string initially because
245:15 - we don't need to search initially
245:18 - so it's empty
245:19 - then we can change
245:21 - uncheck yes so on change event
245:24 - let's type it here
245:25 - on change event it will take
245:28 - then we will use set search function to
245:31 - set the query inside set the query
245:32 - inside
245:34 - let's search
245:35 - event dot target dot value
245:40 - save
245:42 - whatever type in
245:43 - this input will be stored inside the
245:46 - search query
245:47 - now comes the logic way to search
245:50 - let's create a use effect hook here
245:52 - simply like this
245:56 - it will run when our state of
245:58 - search query changes
246:00 - like this
246:02 - now let's try to
246:04 - do this
246:05 - what can we do
246:07 - we will use filter on the user's array
246:10 - filter function
246:11 - filter
246:13 - it will return a user to us
246:18 - then
246:20 - it will return us whatever condition we
246:22 - write i mean it will return us only the
246:24 - data according to the condition we write
246:26 - here
246:27 - not everything else
246:29 - so it will filter them
246:30 - so we can say users
246:33 - first let's convert this object into an
246:36 - array because we will use that function
246:38 - plot
246:39 - includes
246:40 - that only works on arrays not objects
246:43 - so object dot user sorry object.values
246:48 - first convert it into an array like this
246:52 - then join them
246:55 - and it means to
246:56 - make all the items in the array to be a
246:59 - string using this join
247:02 - fine
247:03 - then we will convert all of the strings
247:05 - that we have
247:07 - like this lee and graham arden novel
247:10 - into lower case
247:11 - using two lower case method
247:15 - so that we are having all the items in
247:17 - lower case
247:19 - then again
247:20 - we need to use include our last
247:24 - method here
247:26 - so we will
247:28 - find that if this search query
247:32 - is included inside this whole string or
247:35 - array string of arrays
247:37 - it will return it
247:39 - but what if we type something in
247:41 - lowercase 30 not lowercase
247:43 - in uppercase like this
247:45 - in this case we have to use
247:47 - to lowercase here as well to convert it
247:50 - into lowercase
247:52 - like this so make it to lowercase
247:55 - and the logic is written
247:58 - now what we have to do is we have to
248:00 - create a state to set this data so we
248:03 - can say const
248:05 - let's say
248:06 - searched
248:10 - s-e-a-r-c-h searched
248:13 - and
248:16 - set searched equal to use state
248:21 - this
248:23 - then we will set it here
248:25 - like
248:26 - this
248:28 - all the data i mean all the filtered
248:30 - data will be stored inside the state
248:32 - called searched
248:34 - let's also create one more check
248:37 - so if
248:38 - this
248:40 - query exists so what if it is empty
248:43 - so if it contains something
248:45 - we will set it all here
248:47 - so cut and paste
248:49 - else
248:51 - we will
248:52 - do this we will set users
248:56 - to this
248:58 - users just like that
249:01 - fine
249:03 - now what can we do
249:05 - so we are showing
249:06 - right now activate showing right now is
249:08 - the original array
249:10 - so
249:11 - let me comment this out first
249:16 - so if
249:18 - this
249:19 - not searched let's try this
249:22 - search query
249:23 - if the search for a dot length
249:26 - is more than zero
249:30 - we will return
249:32 - the searched array
249:34 - so
249:35 - we can say
249:37 - this
249:39 - let's do this so searched
249:42 - where is it
249:43 - we can say search dot map
249:47 - let's say search
249:51 - then we will return some jsx which will
249:53 - be
249:54 - just nothing but this
249:57 - so instead of this user we will use
249:59 - search
250:01 - and
250:02 - so it's the first one let's do it in
250:04 - second one
250:05 - just return
250:07 - this users dot map
250:09 - or simply cut it
250:13 - this
250:14 - and now if we check let's try to search
250:17 - something
250:18 - try to search
250:20 - l e a and and we will see the first one
250:24 - if we cancel the search or clear the
250:25 - search
250:26 - it will go back to the original array
250:29 - let's start search erwin hobble
250:32 - erv so it's showing up here and we're
250:34 - done
250:36 - so that's how we create a search filter
250:38 - in react using filter function
250:41 - now let's try to
250:43 - add one bonus feature here which is not
250:45 - just any search debunked search
250:48 - for example
250:50 - let's say we type something here it's
250:52 - searching one by one so it searches for
250:54 - l first
250:55 - then if you type e
250:57 - it will set for l e which can be
250:59 - inefficient
251:01 - so now let's try to implement the bound
251:03 - search
251:04 - for example
251:05 - if we type le it will not search
251:08 - initially
251:09 - or just
251:10 - when we search it will search after one
251:12 - second or two seconds
251:14 - or depending on the
251:15 - countdown we write
251:18 - so in this if we can do
251:22 - this
251:23 - let's create a function called
251:26 - searched equals to
251:29 - this so in this this we will use
251:33 - a
251:34 - function called set timeout
251:38 - so it will
251:39 - create a timeout for us
251:42 - and based on the timeout
251:44 - this function will run
251:46 - so the timeout is 1000 milliseconds
251:49 - which is one second
251:51 - so after the one second of typing here
251:53 - we will get our results not
251:56 - immediately
251:57 - now we have to return
251:59 - this and clean up do do clean up
252:02 - so return
252:05 - it
252:06 - return
252:08 - this so we can say clear timeout
252:12 - and put the function inside which is
252:14 - searched
252:15 - now let's try to demo this search for l
252:18 - e a
252:20 - and after one second it will be here so
252:22 - refresh the page
252:24 - let's try once more
252:26 - l e a
252:28 - so you see after one second it's coming
252:30 - here
252:32 - clear it out
252:33 - type l e
252:35 - after one second the data will be here
252:38 - so that's how we do the bound search in
252:41 - react
252:42 - make it 500 which will be 0.5 seconds or
252:45 - half seconds
252:47 - refresh it
252:48 - type le
252:50 - after 0.5 seconds this data will be here
252:54 - in the filter data
252:56 - after searching type lea
252:59 - it will be here after 0.5 seconds
253:02 - so that's how we implement the bound
253:04 - search in react
253:08 - so what is typescript first
253:10 - type typescript is a superset of
253:13 - javascript it means
253:15 - typescript can do everything javascript
253:17 - can but javascript cannot do everything
253:19 - that script can
253:21 - like the relation between css and scss
253:25 - or sas
253:27 - let me take an example of what can do we
253:29 - do we type script additional things
253:32 - see
253:33 - we have this cons user which contains
253:36 - first name last name and
253:38 - role
253:39 - but we are consoling the name here
253:42 - so this will
253:43 - cause an error on the compile time if it
253:46 - is javascript
253:47 - but in the type script we will get this
253:50 - error called property name does not
253:52 - exist on the type this and this
253:54 - so let's try to duplicate this so let's
253:57 - copy a paste it here
253:59 - can remove all this code
254:03 - so we have this user which contains
254:04 - first name last name and role
254:07 - but if we console the name which does
254:09 - not exist here let's see what we get so
254:11 - console
254:13 - not log
254:14 - name
254:15 - but user dot name
254:18 - user dot name
254:20 - if we hover this name we will get the
254:23 - same error that we are getting in the
254:25 - chrome window property name does not
254:27 - exist on the type
254:29 - first time string last time string and
254:31 - all
254:31 - but if we add the first name it will not
254:34 - throw an error because we already have
254:36 - the first name here
254:38 - so that is the power type script in
254:39 - react
254:40 - but how do we add typescript in react
254:44 - so the basic
254:46 - stuff is just open terminal
254:48 - we need to do this
254:50 - so if we are creating a react app
254:53 - we usually do nbx create react app and
254:57 - app name so let's make it app
255:00 - but in case of type script if you want
255:02 - to add it in react app we use the flag
255:05 - called template
255:07 - and the name which is typescript
255:10 - if you've seen the documentation of
255:12 - create react app you will see the same
255:14 - thing here
255:15 - template and the
255:16 - typescript we will get not js files but
255:20 - tsx file tsx which stands for typescript
255:24 - in jsx
255:26 - so
255:27 - and one more file we get is this file
255:29 - called ts config.json
255:31 - which determines how are we going to
255:32 - compile our code to type script
255:35 - from
255:36 - javascript because this browser does not
255:40 - does not understand the typescript code
255:43 - it needs to get compiled to javascript
255:47 - so that's what
255:48 - how do we create a test script app in
255:50 - react
255:51 - so let me rewind it once more
255:53 - what is javascript typescript is nothing
255:56 - but a superset of javascript it means
255:59 - everything javascript can do
256:01 - typescript can do
256:03 - and more but everything that script can
256:05 - do javascript cannot
256:08 - fine
256:09 - it has so many features like type
256:11 - checking interfaces and all you see all
256:14 - these things here error handling
256:16 - no interference windings in javascript
256:19 - but in typescript we have the editor
256:21 - warning
256:22 - if you make it a name it will throw an
256:24 - error that name does not exist in this
256:26 - user
256:27 - object
256:28 - like this
256:29 - so that is the benefit of using
256:30 - typescript
256:34 - for example let's say we have a state
256:37 - here of count
256:38 - and set count tested
256:40 - the value is 0 initially
256:42 - and we are putting the count value here
256:45 - and a button to increment the count so
256:48 - basically we will test
256:50 - these two things that the count value is
256:52 - 0 or not initially
256:54 - and this button
256:56 - when clicked is incrementing this count
256:59 - or not
257:00 - using this library called
257:02 - react testing library
257:04 - which is default
257:06 - in the
257:07 - create react app it comes with a package
257:09 - you don't have to install it externally
257:12 - but if you want to
257:14 - install it just use the command or just
257:17 - go to
257:18 - react testing library
257:21 - this first one
257:23 - then you have to install using this
257:25 - command and install
257:26 - save diff react testing library or
257:29 - testing library react
257:31 - so now let's start
257:33 - to test these apps
257:35 - not this app this operation yes
257:39 - so the first step here is to do
257:40 - something like this
257:42 - we have this file called app.test.js
257:46 - so let me create one component here
257:49 - that will be
257:50 - called
257:52 - dot js
257:53 - a file let me move all of these things
257:56 - like count and button click
257:58 - here make it a functional component
258:00 - first
258:01 - then let me move it here
258:04 - like this
258:05 - also we need to
258:06 - [Music]
258:08 - transfer the state
258:09 - count here
258:11 - and import the state
258:13 - i mean the use statement use state
258:17 - now let me
258:18 - import this component called count here
258:21 - so import count sorry counter
258:23 - from counter
258:25 - then simply render it here like this
258:29 - it will still run fine we can increment
258:32 - the count as we want so for app.js we
258:35 - have a file called app.test.js but let's
258:38 - say
258:39 - we have a counter
258:41 - component we want to test it for this
258:43 - component
258:44 - we will create a file the same way we
258:46 - have app.test.js we will name it
258:49 - counter dot
258:51 - test
258:52 - dot js
258:54 - you can name it anything you want but
258:56 - let's go with this counter test.js
258:59 - and if you open up
259:00 - app.js you will see
259:04 - these things render and screen
259:06 - that we need to import we also need to
259:08 - import the component like app
259:10 - so here let me import these two things
259:13 - let me remove screen for now we don't
259:15 - need it
259:16 - and this app will become
259:18 - counter
259:20 - from
259:22 - one step back counter
259:24 - save
259:26 - next thing we need is to use this test
259:28 - keyword
259:28 - so test means we are going to test
259:31 - something
259:32 - so let's do it
259:34 - we will write a test here a unit test
259:37 - in which we will run a description first
259:40 - so here it says renders
259:42 - learn react link but we will
259:45 - write something like
259:47 - check the
259:49 - initial
259:52 - value of
259:55 - increment sorry in not increment
259:58 - count
260:00 - then we have to use the callback
260:01 - function
260:03 - just like this
260:05 - let me write a callback here
260:08 - here
260:09 - we will write this render so render
260:12 - means we will render this app component
260:15 - but in place of app we will render this
260:18 - counter
260:19 - like this
260:20 - so now this counter will return
260:23 - something
260:24 - so we can say const
260:27 - const
260:28 - and object
260:31 - this equal to this we have to
260:33 - destructure
260:34 - the object here
260:36 - from this render
260:38 - one more thing
260:39 - if you come to this counter so we are
260:41 - just calculating the
260:43 - value of count initially so we have to
260:45 - pass
260:46 - an initial value here so initial
260:49 - value
260:53 - equals to something
260:55 - so let's say we have to pass 0
260:58 - only when it will succeed
261:00 - because if we check this counter.js
261:03 - the value is 0 initially this value so
261:06 - we have to check our test case against
261:08 - this
261:09 - and same here we have to do so pass it
261:13 - save at both places
261:15 - now
261:17 - as i said this
261:19 - render will return something
261:21 - and this will be
261:23 - this counter value this current value
261:26 - inside this h1 because let's say we
261:28 - change the count
261:30 - this will be changed as well
261:31 - so we need to pass or we need to assign
261:34 - a prop here which is called
261:36 - data
261:38 - test
261:39 - id
261:41 - i think that's it
261:42 - and we can say
261:44 - count
261:46 - and here we have to
261:48 - make or we have to grab this id using
261:50 - this function called
261:52 - get
261:53 - by test id
261:55 - i think that's it
261:57 - so now furthermore we have to grab our
262:00 - value of this count
262:02 - from this test get by test id we will do
262:06 - let
262:06 - create a variable called
262:08 - counter equals to
262:11 - this thing which is
262:13 - get by test id
262:16 - and it contains our id
262:19 - which is count so we have to pass count
262:21 - here i mean it contains our value
262:23 - so we have to pass count to filter that
262:25 - value
262:26 - of this count which is zero
262:29 - now we will
262:31 - we have the counter value but we have to
262:34 - make or get the text from there
262:37 - so we will use a function called or a
262:39 - prop called
262:41 - uh
262:42 - text content yes this
262:45 - now this counter contains our
262:47 - value of the account initial value 0.
262:50 - now
262:51 - but the problem is it's not a number
262:53 - it's a string
262:54 - so when we run the
262:56 - test script it will fail
262:59 - now we will use our thing called expect
263:02 - expect means
263:03 - what value we're expecting
263:05 - so we're expecting
263:07 - this count to be something
263:10 - which is
263:11 - equal to
263:12 - or equal to equal sorry
263:15 - uh to equal zero
263:17 - yes
263:18 - by the way we we should have counter red
263:21 - dot count
263:22 - and our script is written successfully
263:25 - now let's try to run it and see what
263:27 - happens
263:29 - open the new terminal
263:31 - and here we will simply type
263:33 - npm test
263:35 - we are testing i mean we are writing
263:37 - this nbm test because open the
263:39 - package.json file
263:41 - you will see in the scripts
263:44 - we have
263:45 - npm start to start the app similarly we
263:48 - have the test
263:49 - or npm test to test the app
263:51 - press enter
263:53 - it will test your application or mainly
263:55 - run the script
263:57 - let me
263:58 - zoom this
263:59 - or
264:00 - make it in the whole page so it's
264:02 - running the test
264:04 - the problem is we also have on test in
264:06 - app.test.js
264:09 - it will throw an error so we can delete
264:10 - it later
264:13 - see it will fail because here it's not
264:15 - getting
264:16 - this let me show you
264:18 - it's not getting all of these
264:20 - here
264:21 - where is the m.js
264:24 - this it's not getting all of these so
264:25 - let me remove
264:27 - test from app
264:29 - so delete it simply
264:33 - delete this file
264:35 - then in the setup tests okay we have to
264:37 - import this
264:39 - report web vitals index.js
264:43 - where do we import tests
264:45 - we have a vitals i think that's all
264:48 - now let's test it again
264:51 - clear this let me clear this
264:55 - and try again
264:57 - npm test
265:00 - let's see
265:01 - what we get
265:05 - so it's running now the first or only
265:07 - the one test that we have
265:09 - it's running it
265:13 - and it will fail
265:15 - because see expected is zero
265:18 - but we received
265:19 - the zero in quotes it means it's a
265:21 - string
265:22 - so it will not work here like this
265:25 - we have to wrap or we have to make
265:27 - this value
265:28 - or this value in a number or a numeric
265:31 - value
265:32 - so let's do it so just wrap
265:36 - this counter into a number to make a
265:38 - number
265:39 - not a string
265:41 - let me clear this once more
265:44 - or i think that is automatic
265:47 - so it's running the test now
265:49 - this should
265:50 - be
265:51 - successful
265:56 - it's a basic test to show you how do we
265:58 - do this
266:01 - so it's running now it's passed
266:03 - check the initial value of the count
266:05 - it's passed in 30 milliseconds
266:08 - or what is this point
266:10 - and time is this
266:13 - it has been passed so it means
266:16 - that our test has been passed and
266:19 - the value of count here
266:22 - is the way zero
266:23 - it means this has been passed okay
266:26 - now let's write one more test to check
266:29 - the increment
266:31 - functionality
266:32 - so we will copy this test
266:35 - once more then we will have
266:37 - check the
266:39 - increment
266:41 - button
266:43 - we have writers wrote this description
266:45 - and similarly like this gate is by ida
266:48 - function we will call one function
266:50 - called
266:50 - get by role
266:53 - so you see this button has a role
266:56 - it's a trigger event so it's the role
266:59 - that's why we are using this function
267:01 - let's create an instance of this
267:04 - button so let's say increment
267:07 - btn equals to
267:09 - get by role
267:11 - we will pass
267:12 - the
267:13 - role which is
267:15 - the button
267:17 - like this
267:18 - and the
267:19 - title
267:20 - i think that's right but
267:23 - yes button and the name
267:26 - so the name is
267:28 - this increment
267:30 - let me check here
267:32 - increment count is the name we have to
267:34 - grab the button from here like this
267:37 - so we are having this
267:39 - tape
267:40 - now we need a function to trigger this
267:42 - button from here
267:44 - which is called
267:46 - uh fire event i think yes this one
267:50 - we have to pass this fire sorry we have
267:53 - to pass
267:54 - this increment button
267:56 - in this fire event
267:59 - on click function so click
268:02 - when this fire event is clicked
268:04 - it will run this encryption button
268:07 - and all of these things
268:09 - so now this
268:12 - fire event
268:13 - or this test case
268:15 - should expect something just like we did
268:17 - it here it expected this counter to be
268:20 - equal to zero
268:21 - initial counter
268:23 - but in this case
268:24 - it will be expected to be the same c the
268:28 - problem here is
268:29 - we are incrementing the count here to 0
268:33 - but we are taking it here so it's
268:35 - already 0 and we are passing 0 here so
268:38 - it will pass
268:39 - this test case
268:41 - if we go to this test case and see
268:45 - two cases passed
268:47 - so if we make it as 1
268:49 - it will fail because
268:51 - we are sending
268:53 - something else but we are expecting
268:55 - something else
268:56 - it will be here soon see
268:59 - expected was 1 but it received 0. so it
269:02 - failed
269:03 - so what we have to do is we have to make
269:05 - this zero
269:08 - and put it here
269:13 - so basically
269:15 - counter is checking for zero it will be
269:17 - 0 then it will run
269:19 - true because both are 0
269:21 - then it will it will run this increment
269:24 - button feature or test
269:27 - and fire it it will fire the event
269:29 - then let's create one more counter which
269:32 - will be
269:34 - counter
269:37 - inc which is mean which means counter
269:39 - increment
269:40 - then we can expect
269:42 - the one value after increment so input
269:45 - will be clicked then it will be one not
269:47 - zero
269:49 - now save and pass this counter rank here
269:53 - say when let's test what we get
269:56 - this test should pass
269:58 - or it will pass
270:00 - i'm waiting yes
270:02 - both passed
270:04 - i mean both twists
270:05 - if you make this a zero it will fail
270:08 - because
270:10 - it was the row then the button clicked
270:13 - again it's still 0
270:15 - we are passing here so it will fail
270:17 - it's expecting 1 not 0
270:20 - see
270:23 - it failed
270:25 - so that was
270:26 - how we test a app in react or how we
270:29 - test our
270:32 - components in react using this testing
270:34 - library from react
270:39 - so basically i am calling an api here
270:41 - from this
270:43 - where this
270:44 - website
270:46 - and i am storing the data in the state
270:48 - called data state
270:50 - and we are mapping and all
270:52 - if the api is loading we will see
270:55 - loading text
270:56 - and if it is loaded we will see the data
270:59 - now let me make or let me just refresh
271:02 - the page first
271:05 - you will see what i mean
271:07 - you will see the loading text for a
271:08 - moment and then it disappears and then
271:11 - the data is coming
271:12 - but let's make the network request
271:14 - little bit slower
271:17 - so we will do it like this how do we do
271:20 - this
271:21 - slow 3g
271:23 - now refresh
271:25 - the page it's refreshing
271:28 - and we will see the loading text for
271:30 - some time and then the actual data that
271:32 - we need
271:33 - then we refresh again or let's say we've
271:36 - changed some pages
271:37 - this api call will be same it will call
271:40 - the api once more
271:41 - so to avoid that let's use
271:44 - this react query library to cache the
271:46 - api calls
271:48 - first of all we will install two
271:50 - libraries there which is react router
271:53 - and this react query so add this wait a
271:56 - second
271:59 - this and react
272:02 - query
272:04 - so this react router will be used to
272:06 - navigate building pages
272:08 - and this query react will be used to
272:11 - like
272:12 - cache our api call fetch and cache
272:16 - so is this it the command which is npmi
272:19 - react query let me check
272:22 - where is the command
272:23 - installation
272:25 - yes it's the same
272:26 - press enter it will install this both
272:29 - libraries in our reactor and let's wait
272:31 - for it
272:32 - so they have been installed and setup is
272:34 - also done
272:35 - setup is nothing but two routes
272:38 - normal call page and cached call page
272:41 - if we go to the cached call we will see
272:43 - the cached call text if we go to normal
272:45 - call we will see the loading text and
272:48 - the data after that
272:50 - go to cache call again
272:52 - come to normal call and it's loading
272:54 - again that's why we are going to cache
272:57 - this api so that
272:59 - if the data is the same it will not load
273:01 - again it will get it from the cache
273:04 - and for this we are going to use react
273:05 - query here
273:07 - this library so let's do it
273:10 - to set up this react query in our react
273:12 - app
273:13 - we need to import
273:15 - a thing called or two things called
273:17 - react query client provider and
273:20 - just the react query client
273:22 - so import
273:24 - this from react query
273:27 - we will say
273:30 - uh query
273:33 - client and
273:35 - query client provider
273:38 - then we need to wrap
273:40 - this div into this query client provider
273:46 - like this
273:47 - save
273:48 - and this will take a key called client
273:51 - and we have to pass this instance of
273:53 - this client so let's create an instance
273:56 - to create an instance we can just say
273:58 - let
274:00 - query
274:03 - client
274:05 - ent equals to
274:07 - let's say
274:08 - query client
274:10 - and then pass it here
274:13 - save
274:14 - and our app will load
274:17 - but it's not loading
274:19 - because
274:20 - i don't know because why
274:22 - because i have missed one keyword here
274:25 - it's called new
274:27 - that's how we create an instance
274:29 - so now save it
274:31 - and it will be fine
274:34 - so it's done
274:35 - the basic setup of react query now we
274:38 - have to
274:39 - call this api again in cached call
274:42 - so let's do it
274:44 - and in this component let's import a
274:47 - thing called use very from react query
274:50 - so we can say import
274:54 - from
274:57 - react query
274:59 - we will use something called
275:01 - what i said just
275:03 - right now you is use query like this
275:07 - so it will be a function that we need
275:10 - so we have imported it
275:12 - and then we have to do
275:14 - this
275:15 - so
275:16 - copy this us query
275:18 - and here let me create
275:20 - the use query function like this
275:23 - so it takes a query
275:25 - a key
275:26 - so the key could be anything you want
275:28 - but let me make it as
275:30 - data or yes data
275:32 - then second thing it takes wait a second
275:35 - yes data one parenthesis we need then
275:38 - second thing it takes is a callback
275:40 - function like this
275:41 - and in this callback function we will do
275:44 - the
275:45 - api call
275:48 - so this api call is here so let me get
275:51 - this
275:53 - and paste it
275:54 - save it
275:56 - and it's doing all the same all the
275:58 - things
275:59 - that it was doing before in the normal
276:01 - call.js
276:03 - now let's create the states here
276:05 - whatever we had in the normal call
276:08 - data and loading states so copyist and
276:11 - paste it here
276:13 - save
276:14 - now import the state or the use
276:16 - statement from react
276:19 - because we need to import it like this
276:22 - fine
276:23 - the next thing we need is to do is
276:25 - we have to map this api from this data
276:29 - just like we did in the normal call so
276:32 - we can just copy and paste it here
276:36 - after the cached call
276:37 - and save
276:39 - so instead of the data
276:42 - i mean instead of this normal api call
276:44 - in this user effect book we are calling
276:46 - it in the
276:47 - us query hook from react query
276:50 - also let me set up this loading text
276:53 - so if loading is true i will see loading
276:56 - or else we will see the result
276:59 - that's fine
277:00 - but as of right now the both pages are
277:03 - same the api calls
277:05 - click cached call
277:06 - we'll see loading
277:08 - click normal call you will still see the
277:10 - loading text even if the data is not
277:13 - changing from this api
277:16 - so what we have to do is to fix this or
277:18 - to manage this remove this then block
277:20 - and return this whole thing
277:23 - using return keyword
277:25 - then we will cache it in a response or
277:27 - run in a variable so say const
277:30 - let's say it is that
277:32 - equals to this
277:34 - and we don't need these two as well
277:35 - because we will structure it from this
277:37 - result
277:39 - directly
277:40 - so if we console
277:42 - this result
277:46 - you will get sorry not data result we
277:48 - will get the loading and the cached
277:51 - i am in the loading in the data so
277:54 - just command this and loading is not
277:56 - defined
277:57 - command this as well
278:00 - now open the console and let's check
278:06 - we are seeing all these things from this
278:07 - query which is
278:09 - data that we need
278:10 - we need the error if we have an error we
278:12 - will get the error here
278:14 - we can restructure it from this result
278:18 - is faced
278:19 - it is true because data has been fetched
278:21 - it is error is error because no edits we
278:24 - have
278:25 - is fetched after mount yes
278:28 - is fetching false
278:30 - it means
278:31 - if the data is still switching this will
278:32 - be true
278:34 - it is loading error so we have all of
278:36 - these things
278:37 - so we need loading
278:39 - so let me structure the data and loading
278:42 - from this result
278:43 - so we can say
278:47 - data and
278:49 - loading
278:50 - not loading is loading
278:52 - yes because it's false
278:54 - and
278:55 - if we comment or bring it back
278:59 - make the loading as is loading
279:03 - and
279:04 - bring back this thing
279:06 - we can
279:08 - have a result it's not defined okay
279:10 - result is not defined yes this one
279:13 - now it will work fine
279:14 - we will have the cached call properly
279:16 - called
279:17 - so
279:18 - now let's start from the start refresh
279:20 - the page once
279:22 - the cache file is here
279:24 - click normal call
279:26 - you will see loading text
279:28 - now click cast call again we will not
279:30 - see
279:31 - the loading text because
279:33 - the data is not changing
279:35 - it will simply call the api i will not
279:37 - call the api
279:38 - it will cache the api that you already
279:40 - did and it's displaying as the results
279:44 - we need to remove the state use network
279:47 - save
279:48 - and
279:49 - click normal call
279:51 - we will see loading text
279:52 - click cached call we will not see the
279:54 - loading text
279:56 - so now let me make it a little bit
279:58 - slower
279:59 - i mean the network
280:00 - make it as
280:02 - okay it's much slower okay
280:05 - now clear the console or clear the
280:07 - invert tab
280:09 - now click cached call
280:10 - so i did not click the normal call
280:13 - loading is here
280:15 - it's loading
280:17 - and now the data is there but if we
280:19 - click cached call we will not see
280:21 - loading because it has been cached
280:24 - see directly getting the results without
280:26 - loading text
280:28 - or loading h1
280:29 - so that's how we catch an api in react
280:32 - using this react query