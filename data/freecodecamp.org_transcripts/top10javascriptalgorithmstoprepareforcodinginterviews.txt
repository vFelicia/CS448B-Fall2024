00:00 - this course will prepare you for elite
00:01 - code style coding challenges you'll
00:04 - learn 10 important JavaScript algorithms
00:08 - interview questions to help you Ace your
00:10 - coding interviews mkar from coding
00:13 - monkey created this course he'll help
00:15 - you build a strong foundation in
00:17 - JavaScript algorithms and Tackle leak
00:19 - code problems with
00:22 - confidence hi welcome back to coding
00:25 - money in about 2 hours we'll work on top
00:27 - 10 JavaScript algorithms for beginners
00:30 - that will help you prepare for lead code
00:33 - problems these coding problems are for
00:36 - absolute beginners and these are meant
00:39 - to help you get better at coding and at
00:41 - the same time uh prepare you for your
00:44 - coding interview at Big tech companies
00:47 - like Google where the starting salary is
00:52 - $191,000 I have a bonus for you at the
00:54 - end of the video make sure you don't
00:56 - miss that so let's get
00:58 - started
01:00 - [Music]
01:01 - we'll be reversing a string and also an
01:04 - integer this is a very common coding
01:06 - interview question one way or the other
01:09 - you'll be required to reverse a string
01:11 - or integer as part of your coding
01:12 - interview challenge so let's get started
01:15 - all right so we got two coding
01:17 - challenges in this video we need to
01:19 - reverse a string and then later we'll
01:21 - reverse an integer we'll do the uh
01:24 - string first because once you know how
01:26 - to reverse the string you can easily
01:29 - reverse an integer all you would have to
01:31 - do is convert the uh integer into the
01:34 - string do the reversal and then convert
01:36 - back to the integer you'll have uh the
01:40 - solution uh so we are given a string we
01:43 - need to return a new string with the
01:44 - reverse order of the characters here are
01:47 - some of the
01:49 - examples uh pause the video right here
01:52 - and give it a try all right thank you
01:55 - for trying to solve this problem if you
01:56 - are not able to come up with a solution
01:59 - uh no worries at all I'll give you one
02:02 - possible solution to this problem I'll
02:04 - start off by creating a variable called
02:06 - reversed I'll set it to empty strings
02:10 - I'll do something with this uh variable
02:14 - and then uh return it at the
02:19 - end so what do you think I should be
02:21 - doing to this variable in order
02:25 - to uh reverse a string like coding
02:28 - money um
02:30 - so obviously uh you would have to Loop
02:33 - through each character of the string one
02:36 - by one and add each character to this
02:42 - reversed um variable but the next
02:47 - characters that you would insert you
02:49 - would insert before that so we will be
02:52 - doing something like this one by one to
02:56 - each
02:58 - character as you can see we'll have
03:02 - something like this at the end so to do
03:07 - that we need a loop and I'm sure you're
03:09 - all familiar with the for Loop so we'll
03:12 - do let I equals to zero I less than Str
03:17 - str.
03:19 - length I
03:22 - ++
03:24 - and all we have to do is set
03:28 - reversed equal to St Str
03:32 - DOI the current character plus add to
03:36 - the previous ones reversed
03:40 - reversed and at the end we're just going
03:43 - to re uh return the reverse let me run
03:45 - the code to see if it works so
03:50 - here I'm going to call the
03:54 - function coding
03:57 - money as you can see it is revers vers
04:00 - the string for us so this is a
04:03 - solution but as you can see for this uh
04:07 - traditional for Loop there are many
04:10 - moving pieces like you need to set a
04:13 - variable here you know you need to check
04:15 - for the condition and you need to set
04:17 - the incrementer here so there's uh there
04:20 - are many areas that things can go wrong
04:24 - so my suggestion would be to use the uh
04:29 - newer
04:30 - um JavaScript syntax you can do the same
04:33 - thing as
04:35 - let car of Str
04:40 - Str and all you have to do replace this
04:43 - with the car and if I save it and I try
04:47 - to run this again you see it does the
04:51 - same thing but this is much cleaner
04:54 - there's even an easier way uh to solve
04:57 - this problem the reason I gave you this
04:59 - solution
05:00 - uh because sometimes the interviewer
05:01 - might uh prevent you from using that
05:04 - built-in function people who have used
05:07 - JavaScript for some time they already
05:08 - know that there's a built-in reverse
05:11 - function why not use that sometimes the
05:15 - interviewer might not allow you to use
05:17 - that so I give you this solution in case
05:20 - that happens to you so let me copy this
05:26 - solution uh let me copy the whole
05:29 - function
05:32 - and save it here for your future
05:36 - reference uh by the way I've created a
05:38 - GitHub repository where I'll be posting
05:41 - a lot more coding um
05:43 - challenges um I'll post the link in the
05:46 - description so be sure to check that out
05:49 - and follow it because I'll be posting
05:51 - lead code problems and a lot of other
05:54 - coding interview challenges uh let me
05:57 - show you the mdn documentation for the
05:59 - build Buon reverse method as you can see
06:02 - uh this method is uh used on arrays we
06:06 - can only use this on
06:09 - arrays um however we are working with
06:12 - strings now so we need to find a way to
06:15 - convert the string into an array uh to
06:17 - do the reversal and then convert back
06:20 - the array into a
06:21 - string so let's do that okay let's
06:25 - create a variable
06:26 - called
06:28 - um uh Str to array so the way we convert
06:33 - a string to an array is by using uh
06:37 - method called
06:41 - split uh so if we don't pass anything
06:44 - it's going to uh split each character in
06:47 - the string into uh an element in an
06:51 - array so once uh we have that we can
06:56 - just call the reverse method on Str Str
06:59 - St R2 array we can call the reverse
07:03 - function this will reverse uh the array
07:06 - but we need uh to return uh a string so
07:11 - for that case Str
07:14 - str2 array we need to join it how do we
07:19 - join it the same way that we use the
07:22 - split we just join back the elements in
07:26 - the array into a string so if I wrun run
07:31 - this as you can see we'll get the same
07:34 - output we can even
07:37 - minimize uh this syntax this code we can
07:41 - write all of this in one line uh because
07:45 - of something called chaining in
07:47 - JavaScript so we can change chain the
07:50 - whole thing in one line so how can we do
07:52 - that so let me remove all of it and
07:57 - return so
08:00 - so I'll get the input string I'll call
08:03 - split onto it to convert it into an
08:06 - array then I can call
08:10 - reverse and then I can join it
08:14 - back and this is the reverse string and
08:18 - if I save it run
08:21 - it we get the same
08:23 - output so with this new knowledge that
08:26 - you have of a string reversal
08:29 - you can
08:31 - easily reverse
08:34 - integers uh
08:36 - so this should be very easy I highly
08:40 - recommend you pause the video right here
08:42 - and give it a try thank you for trying
08:45 - to solve this problem I hope you were
08:46 - able to find a solution I'm sure uh if
08:50 - you did try this uh problem you came
08:52 - across the edge case where you have a
08:55 - negative number as the input and you
08:57 - would have to return an negative
09:00 - reversed uh number so we're going to
09:03 - take care of that now there are many
09:04 - ways to solving this problem I'm going
09:06 - to give you one possible solution so I'm
09:09 - going to create a variable called
09:13 - reversed so um you already know how to
09:16 - convert a string uh so we need to
09:18 - convert the integer into a string and to
09:21 - do that we can use in. to string method
09:27 - and then pretty much do the same thing
09:30 - we did for the string split it into uh
09:34 - an array uh now run the reverse on the
09:39 - array why we're uh converting it into
09:41 - array because the reverse method only
09:44 - works on the arrays and then we will
09:46 - join it back
09:49 - join if I return
09:55 - this and I let me run this function
10:04 - um
10:07 - 15 as you can see we're reversing it and
10:11 - we returning a string this is not an
10:13 - integer we need to return an integer and
10:15 - also we need to uh for example if I run
10:18 - it
10:19 - with
10:21 - 15 uh you will see that the sign will
10:24 - come after the number uh this is not
10:26 - correct so we need to uh first of all
10:30 - convert at the string into an integer
10:34 - and the way we're going to do that is by
10:35 - using pars
10:39 - int okay and and then we need to
10:44 - multiply this with uh a a positive one
10:48 - if uh if it is uh a positive number and
10:52 - if it is a negative number we need to
10:54 - convert this into for example a -1 so uh
11:00 - we already have a function for that it's
11:03 - matt. sign and we need to provide the
11:06 - input string n so whatever the sign for
11:09 - this uh input is we're going to use that
11:12 - over here uh so I'm going to pass the
11:16 - input string over here and now if I run
11:20 - the code you should get uh the correct
11:23 - uh negative uh integer in the Reversed
11:27 - order
11:30 - we're given a string we need to return
11:32 - true if the string is a palindrome or
11:35 - false if it is not P what is a
11:37 - palindrome palindromes are strings that
11:40 - form the same word if it is reversed for
11:43 - example kayak if you reverse this word
11:45 - you'll get the same word so uh we need
11:48 - to return true in that case similarly
11:51 - Madam if you reverse it you'll get the
11:53 - same thing however for coding money if
11:55 - you reverse it you'll get something like
11:58 - this and this is not equal to this
12:00 - therefore we need to return false so we
12:04 - already know how to reverse a string um
12:07 - if you do not know how to do that you
12:09 - can watch the last video I uh would like
12:12 - you uh to solve this problem pause the
12:16 - video right here and then come back uh
12:20 - we will work on one possible
12:24 - solution all right I hope you were able
12:26 - to find the solution for this problem if
12:28 - if you didn't uh don't worry we'll uh
12:31 - work on it right now uh so first of all
12:35 - we need to uh find the reverse of the
12:38 - given uh input string so uh we'll create
12:41 - a variable called
12:43 - reversed and we'll reverse the uh input
12:48 - string Str Str
12:50 - um um
12:53 - we'll call the split function on it why
12:57 - because we we need to convert it into an
13:00 - array why because we uh need uh to run
13:05 - reverse function on it and this uh
13:08 - function only works on the arrays and
13:11 - once it's reversed we can join it uh
13:14 - like that uh turn it back into a string
13:19 - so now we have under reversed um of the
13:24 - input string and we need to check for it
13:28 - now so if the input string is equal to
13:36 - reversed then we need to
13:39 - return uh
13:42 - true
13:44 - um otherwise if it fails then we need to
13:48 - return false at the
13:50 - end let's run this function to check uh
13:54 - run the function to see if it works so
13:57 - I'm going to say
14:01 - pend
14:02 - Drome uh I run it with kayak
14:07 - first uh let me save it and
14:11 - then I'll
14:16 - run yeah so uh it's working fine I'm
14:20 - getting the desired result which is true
14:23 - let me try with uh coding money we
14:26 - should get false in this case as you can
14:31 - see uh this is working fine and it's a
14:35 - very easy um problem um and the videos
14:40 - that the future videos will build upon
14:43 - the knowledge from the previous videos
14:45 - so expect that the next videos to get U
14:50 - more
14:51 - difficult
14:53 - so we can
14:55 - um we can write all of this in one line
14:58 - line we can do the comparison right here
15:01 - we can get rid of this and do the
15:04 - comparison right here like
15:08 - this and this will still
15:11 - work let me run
15:17 - it see it's working fine uh I'm I'm
15:21 - going to give you an assignment homework
15:24 - uh you can come up with a
15:27 - solution um there's another technique
15:30 - called the two- pointers technique if
15:32 - you want to learn about that do some
15:35 - research uh find out what it does and
15:38 - try to solve this problem with the
15:40 - two-pointer technique or there's another
15:44 - uh JavaScript built-in method called
15:46 - every you can use that to solve this uh
15:50 - so when you do it just paste your result
15:52 - in the comment section and you'll get a
15:55 - thumbs up from
15:57 - me today we're going to work on a very
16:00 - common uh coding interview question uh
16:03 - given a string return the character that
16:05 - is most commonly used in the string uh
16:08 - example uh if you're given a a string
16:11 - like a b c c c d then we will return the
16:15 - character C because C is the most
16:17 - commonly used character in this string
16:20 - and as you can see in this uh second
16:22 - example you see one is repeated the most
16:25 - and this string therefore will return
16:26 - the character one uh not the number one
16:30 - so um once you um learn how to solve
16:35 - this problem using the technique that
16:37 - I'm going to give you in this video
16:38 - you'll be able to solve variety of other
16:41 - common string questions uh for example
16:44 - what is the most common characters in a
16:45 - string does a string a have the same
16:48 - characters as string B anagram questions
16:51 - does the given string have any repeated
16:53 - characters in it these are some examples
16:55 - of the uh problems that you would be
16:57 - able to solve
16:59 - uh by using the method that I'm going to
17:01 - teach you in this video but first I
17:03 - would like you to give this problem a
17:05 - try I'll be right here pause the
17:08 - video all right welcome back I hope you
17:11 - were able to find a solution um if not
17:15 - uh doesn't matter we'll work on it right
17:17 - now um just by looking at this problem
17:20 - um we uh know that we need some kind of
17:24 - a data structure to keep uh the count of
17:28 - uh each character in a given string so
17:31 - we would need a character map let me
17:35 - give you an example something like
17:38 - this
17:40 - A1 um
17:43 - B
17:45 - one and see not sure how many like about
17:49 - seven and
17:51 - D1 just um something like this we need
17:55 - something uh like this
17:59 - okay so to come up um with something
18:02 - like this we already have a data
18:04 - structure in JavaScript called um you
18:06 - know object JavaScript objects are like
18:10 - this um we can also use another data
18:14 - structure called Maps which is um
18:17 - something new um but um we'll use an
18:20 - object um in this um case so um but how
18:26 - to uh do this how how can we uh of
18:31 - course we would have to Loop over
18:33 - through each character like one by one
18:36 - in a given string and try to count it
18:41 - and then store the values in this
18:45 - object okay so let's get started uh of
18:48 - course we would need an object so we
18:51 - will create an object called character
18:54 - map car map and we'll set it to an empty
18:59 - object okay and now we need to Loop over
19:03 - the string we we need to Loop over uh
19:07 - each uh character in a
19:09 - string and um and add the value to the
19:14 - character map um so to Loop over a
19:19 - string or an array we use we can use the
19:22 - same syntax um
19:26 - for for uh let car
19:31 - of s Str uh Str Str is the
19:37 - input so we need to see uh we need to
19:41 - see if there's
19:45 - already a value in the character map if
19:49 - there is then we need to increment the
19:52 - value if for example if there's no entry
19:56 - for a we need to create an a new entry
19:58 - for a and set it to equal one I mean the
20:02 - first time we set the value we will set
20:04 - it to one and then um uh if we come
20:09 - across the same character we need to
20:11 - increment the value so to do that we
20:14 - we'll check the character map for that
20:23 - value if there's the if we have the
20:27 - character uh in the character map then
20:32 - we
20:39 - will we'll increment it by
20:48 - one if you don't have it then
20:56 - we'll we'll set the value as
20:59 - one okay like for example how how would
21:03 - this uh how this Loop would
21:06 - work um it's very easy so we're going to
21:10 - Loop over each string and
21:15 - so so for example when we are at a we'll
21:19 - see that if there is uh a in the
21:22 - character map no there is not so we'll
21:24 - set a equal to one
21:28 - all right then it goes to B uh do we
21:33 - have B in the character map no we don't
21:35 - have it so
21:37 - we'll set b equal to one so the else
21:41 - part will
21:42 - run um so when it comes to C do we have
21:47 - C in the character map no so we'll set
21:50 - it to one and then again it will come to
21:54 - C do we have C in the character map yes
21:57 - we we have so increment by one so it
22:01 - will become
22:04 - two and it will again come to C C do we
22:09 - have C yes we have so we will increment
22:12 - by one so it will be three it will keep
22:15 - on doing this and un unless until we
22:18 - have the character map with uh um with
22:22 - the count of each character in in our
22:25 - input string so we will have that right
22:29 - just um to be sure let me return
22:33 - it uh to say that our character map is
22:37 - working so let me save
22:41 - this um let me run
22:44 - this okay we need to call the function
22:47 - so let me call this
22:56 - one
22:59 - I need to save it and run
23:02 - it as you can see we have created uh our
23:06 - character map with the count of each
23:08 - character um in the input string so we
23:12 - have something like this as I was
23:14 - showing you in the example before now
23:17 - this this is object right we need to
23:19 - Loop through uh the
23:22 - object uh to
23:24 - find um which one uh is uh the most
23:30 - commonly used uh character in the string
23:34 - so I'll I'll show you two ways of uh
23:37 - looping the objects one way is uh old uh
23:42 - way of uh looping through an object um
23:46 - and I'll give you a newer way of looping
23:48 - through object which is much easier um
23:52 - so let me uh first of all give you um uh
23:58 - the older
24:00 - syntax and the way that we Loop through
24:02 - the object is by converting it into an
24:07 - array and how we can
24:10 - convert an object into an array is by
24:14 - using something called
24:17 - object. entries and
24:20 - passing uh the object in our case it is
24:24 - character map so to Loop over then we we
24:30 - we have uh it will return an array with
24:33 - the keys and value just like in our
24:37 - character map these are the keys and
24:40 - these are the values that we
24:43 - created earlier so um we need to use a
24:48 - for Loop to Loop through this array now
24:53 - so for that we say for const
25:01 - uh destructure it so I'll destructure
25:05 - and get the key and
25:08 - value
25:10 - from
25:12 - this array so of object.
25:18 - entries like this and
25:23 - then yeah so this is how we're going to
25:26 - Loop to through
25:29 - uh you know an object by convert
25:32 - converting it into a c let me show you H
25:36 - how it looks like so let me uh uh let me
25:40 - console like this so we get we get key
25:45 - and
25:48 - value so let me save
25:51 - this and run
25:54 - it
25:56 - see so we get the the key and the value
26:00 - this is uh this is the output from this
26:04 - loop as you can see so we get the keys
26:08 - and values okay all right so now what do
26:12 - we need to do we need to find which one
26:15 - is the
26:16 - maximum like we need to find uh you know
26:21 - uh give an instruction to the computer
26:23 - to find uh C like the the we can see
26:27 - like we humans we can see that this one
26:29 - is the most commonly used character but
26:31 - we need to tell the computer to find
26:33 - this one so to do that we need to um
26:37 - check each one we need to check each one
26:40 - of these to see which one is the maximum
26:43 - and to keep account for that one we need
26:45 - to create another variable called Max
26:50 - and uh set it to
26:53 - zero and also to get the character uh
26:57 - the max character we we we'll need to
27:00 - create
27:01 - another um variable and set this to uh
27:06 - an empty string so
27:11 - now now we'll just uh check for a
27:16 - condition like we'll see we'll say if
27:21 - if value oops if value is greater than
27:29 - Max so we'll see like the first one if
27:33 - is this greater than Max which is zero
27:36 - yes then we'll set this Max to the
27:43 - value
27:44 - and um and Max
27:49 - jar
27:51 - to the
27:53 - key right so this will Loop
27:58 - uh loop through each one like this will
28:00 - uh first of all it goes takes a see is
28:05 - this greater than uh zero yes then
28:09 - it updates the value for Max and Max CH
28:13 - to a it comes to B is this greater than
28:18 - uh one because it's been changed to one
28:22 - yes it is no it is not then it skips
28:25 - that it comes to C
28:28 - it see it sees that whether the
28:31 - value which is um seven greater than one
28:36 - yes then set the value to seven Max to
28:39 - seven and uh set max Char to the key
28:43 - which is uh what C and
28:48 - return
28:49 - what we need to return the max
28:53 - score let me save this and run it
29:00 - all right so we are getting the correct
29:01 - output from uh our code this is a
29:04 - working code but now we're going to try
29:07 - to uh optimize it a bit and I'll show
29:11 - you I said I'll show you a newer way uh
29:14 - an easier way to Loop through the
29:17 - objects all right so we can use uh a
29:20 - similar syntax that we used to Loop
29:23 - through the string we can use this uh
29:26 - syntax to Loop through arrays as well uh
29:30 - so we can use something like this for
29:32 - the objects as well so how uh can we do
29:36 - that there just a small little change so
29:41 - we can say
29:42 - let let key
29:47 - of
29:49 - um car
29:52 - map as you can see this is exactly same
29:55 - syntax but we can't use uh let key of uh
30:00 - uh object which is a car map we cannot
30:03 - use that for the objects the change that
30:06 - we need to bring is we need to change
30:09 - off with
30:11 - n uh so this is a bit uh opposite of
30:16 - each other so when you want to Loop
30:19 - through the arrays and strings you will
30:22 - um write off um and O starts like object
30:27 - starts with o so that's not what you're
30:30 - going to use for uh objects you will use
30:34 - n uh for the objects so now um here uh
30:41 - to check the value we need to say
30:45 - jart
30:49 - map
30:54 - key okay for the value this is how we're
30:57 - going
30:58 - to write
31:00 - it and so for the key we just write key
31:04 - over here uh let me save the code run it
31:10 - again okay we are having a problem here
31:14 - uh as you can see uh it's case sensitive
31:16 - so we need to be careful with naming um
31:21 - with um our code so let's run it again
31:26 - see we're getting the same output but
31:29 - this one is much nicer cleaner code and
31:33 - um you know you need you just need to
31:35 - remember very few things
31:37 - to um you know be able to Loop through
31:41 - the objects uh however the earlier
31:44 - example had like you need to do remember
31:47 - object do entries and then you need to
31:49 - remember to pass the object into that um
31:54 - method so this one is much easier this
31:57 - this is my personal
31:58 - opinion also we can refactor this code
32:02 - to make it much uh smaller um so we can
32:07 - convert the same code in just one line
32:09 - of code
32:11 - so here we can say if character
32:16 - map okay and if there is a character map
32:21 - then we will add one to it or if it does
32:26 - not exist exist then
32:30 - we'll what we will do is we'll just uh
32:36 - uh you know use one so let's
32:45 - see okay let me save it and run the code
32:49 - as you can
32:52 - see this looks much uh uh you know
32:56 - cleaner and short as you can see we just
32:59 - convert the F uh you know statement into
33:03 - one line of code uh you can do this like
33:07 - even uh if it is too much to do like
33:11 - plus one you can do something
33:14 - like Plus+ character map or one so if
33:21 - you save
33:22 - it and you see our code is working fine
33:26 - let's run the other test
33:31 - [Music]
33:39 - case should get one yes it's working
33:42 - just
33:44 - fine we are given an array and a chunk
33:48 - size divide the array into many
33:51 - subarrays where each sub array is of
33:53 - length size for example if you're given
33:56 - an array with elements of 1 2 3 4 then
34:00 - we need to divide this array into chunks
34:03 - of length two for example the output
34:07 - should be an array containing sub arrays
34:11 - of length two here are some other test
34:14 - cases and examples for better
34:17 - understanding of this problem I would
34:20 - suggest you to pause the video here give
34:22 - this problem a
34:25 - try
34:28 - all right thank you for trying to solve
34:29 - this problem uh we're going to work on
34:31 - one possible way of solving this uh
34:34 - coding challenge um the first thing uh
34:37 - that I do when I get a coding problem is
34:40 - that uh I use the divide in conquer
34:43 - technique where I get the problem and
34:45 - divide it into smaller problems so the
34:49 - first problem that I'm uh looking at is
34:52 - to be able to figure out how to get the
34:56 - first two ele elements from this array
34:58 - how to get the chunk of an array right
35:01 - so let me run uh the
35:05 - function uh and run this first test
35:08 - case over
35:10 - here so what I would like to do is to
35:14 - get the first two elements from this
35:16 - array and the way that we can do that uh
35:20 - is by using a buil-in array function
35:22 - called slice let me open up the mdn
35:26 - documentation
35:27 - it says the slice method returns a
35:29 - shallow copy of a portion of an array
35:32 - into a new array object selected from
35:35 - the start to the end end not included
35:39 - where start and end represent the index
35:42 - items in that array the original array
35:45 - is not modified so let's uh let's use
35:50 - this to get the first two elements so
35:53 - the way that we can do that is array do
35:57 - slice the arrays are um zero indexed
36:02 - which means the first element is zero
36:08 - then it is one 2 and three like this so
36:15 - to be able to get uh the first two we'll
36:20 - provide the first index which is zero
36:22 - and
36:23 - then um the second index
36:27 - is
36:28 - two so in this case we we have this two
36:34 - so this is great we can use the size
36:38 - here so uh let me return this and see
36:41 - what we get in the
36:46 - output yeah so we get the first two
36:49 - elements from the array so
36:52 - now we solved the small problem that
36:55 - will C and hand handy in solving the
36:57 - bigger problem right so now we know that
37:01 - we need to return an array right so we
37:05 - would uh need to create an
37:10 - empty
37:12 - um array here uh let let's call it
37:17 - result so and at the end we will return
37:22 - this result okay um we'll return this
37:26 - result but first we need to get the
37:29 - chunks from array and um push it in this
37:34 - array right so um so how we can do
37:40 - that we can do it like this result. push
37:47 - and we can put
37:54 - uh we can uh push uh this uh chunk
37:59 - inside of this array the empty array
38:02 - that we have
38:03 - created however this will only push uh
38:07 - the first two elements let me save this
38:10 - and if I run it you will see we only get
38:14 - the first chunk however we're not
38:16 - getting these other two so we need to
38:19 - repeat this and we need to a variable to
38:22 - keep track of the
38:24 - index right so
38:27 - Let's uh use a variable called index and
38:32 - set it uh to zero so instead of this
38:36 - zero we will use
38:38 - this variable okay
38:42 - and we need to repeat this code this
38:45 - line of
38:46 - code uh for all the elements of the
38:50 - array as long as there are elements in
38:54 - the array we need to keep on repeating
38:56 - this so for that we will use a loop uh
39:01 - so when you want to repeat a statement
39:05 - or code uh that's when you would use
39:08 - Loop so I'll use a while loop while
39:13 - index is less
39:16 - than the
39:18 - array.
39:19 - link as long as there are elements in
39:22 - our array we want to keep
39:28 - on
39:30 - executing this line of
39:33 - code
39:37 - right but this will run forever this
39:41 - will be an infinite Loop because we're
39:45 - not doing anything to make this uh stop
39:49 - right um and uh this will keep on
39:53 - running forever we will we need
39:57 - to increment the index we need to
40:01 - increment the index we need to make sure
40:05 - that when uh the index is greater than
40:10 - the array. length then it should uh exit
40:14 - the loop so how can we do that we will
40:17 - increment the index
40:20 - with
40:21 - size right and so this will start from
40:26 - zero
40:27 - to and the next time I would like to add
40:31 - a
40:33 - index with the size so that the next
40:37 - time it will get from
40:39 - two it will uh start from two to uh four
40:46 - right here but since in this example we
40:49 - don't have the uh fifth element which is
40:54 - going to be index of four we don't don't
40:56 - have that so it will um not this uh
41:01 - function will not take uh the slice
41:04 - function will not take the end as we
41:06 - read in the documentation so in that
41:08 - case we will have three and
41:12 - four so let's save this and run the
41:18 - code as you can see now we're getting
41:21 - the correct
41:22 - output so let me try to run it with this
41:25 - uh
41:29 - example and see if it is going to work
41:33 - for
41:35 - this yeah so we're getting the correct
41:38 - uh uh result and um that's the solution
41:41 - for this coding problem that's only one
41:44 - possible solution there are many ways of
41:46 - solving this problem if your solution is
41:48 - different than this then it's not a
41:51 - problem as long as you're getting the
41:54 - desired output
41:58 - we need to write a function that accepts
42:00 - a string the function should capitalize
42:02 - the first letter of each word in the
42:04 - string then return the capitalized
42:06 - string here are some examples I want you
42:09 - to open the five- tile case. JS exercise
42:13 - file and uh give this problem a try
42:16 - pause the video right
42:18 - here thank you for trying to solve this
42:20 - problem um every time I get a coding uh
42:23 - problem uh what I do is use the divide
42:26 - and concrete technique to divide the
42:28 - problem into very small uh problems so
42:31 - that it easier to find a solution so
42:34 - here the first thing that I think we
42:35 - need to figure out is uh to change uh
42:40 - the case for the strength to make it an
42:42 - uppercase so let me return um Str Str uh
42:48 - to upper case this is the function that
42:51 - we will call on the string to
42:57 - change the case so now you can see it's
42:59 - all capital letters right however we
43:02 - would need uh only the first letter of
43:07 - each word to be a capital not the whole
43:11 - sentence right so um what we need to do
43:15 - is to um to uh break this string to
43:21 - split this string into an array uh with
43:26 - each words and how can we do that so let
43:29 - me say const let me create a variable uh
43:35 - words and I will call uh split
43:40 - function on the string and I'll
43:43 - provide a space so what I will do is I
43:49 - will
43:50 - um split this string based on the spaces
43:54 - so this will
43:57 - uh
43:57 - become like something like
44:11 - this now that we have all the words what
44:15 - we can do is create
44:18 - um um create another variable called
44:24 - result right and set that into an empty
44:29 - array and we will capitalize each word
44:34 - and push it into this array and at the
44:36 - end we will just return this result okay
44:41 - and to do that we need to Loop over uh
44:45 - the
44:46 - words so we need to Loop over the string
44:49 - right with uh each word so uh we can use
44:54 - a for Loop for word of
44:58 - words so now we have access to each word
45:02 - and we want to push that result. push we
45:07 - want to push that word into this result
45:11 - array and so what do we want to do we
45:15 - want to get the first letter of the word
45:19 - and how can we do that like this so so
45:24 - for each word like the first time it uh
45:27 - Loops over you'll get this word
45:30 - so you'll get this word so the first
45:33 - letter that you can get it by you know
45:36 - like doing like this okay so this is the
45:38 - first word but we need the rest of this
45:42 - uh
45:44 - characters uh to be added to this word
45:48 - so how can we do that so we need to add
45:51 - that uh if you watched the last video
45:55 - you know how to use the slice function
45:58 - so what we will do is we will call A
46:01 - Slice on the word and we'll start from
46:06 - the first
46:07 - position all right as you can as you
46:10 - know that uh strings and arrays are zero
46:14 - index so so this would be 0 1 2 three so
46:21 - we got the first letter however we want
46:25 - to to add the rest of the letters so
46:32 - we'll start from the position one so it
46:34 - will take all of this and add it here
46:37 - right so once we um capitalize each word
46:42 - you will go the loop will go through
46:44 - each word each word like this one by one
46:49 - and capitalize the first letter and add
46:52 - the rest of the uh characters to the
46:55 - word and so we will have all the words
46:58 - in the array so let me save this and uh
47:04 - run the code you will see
47:06 - that okay so it's not been capitalized
47:11 - because we haven't called it to
47:16 - uppercase uh
47:18 - uppercase function on onto the first
47:20 - letter so let's do that and run the code
47:24 - again now as you you can see each word
47:28 - in this array is capitalized uh but this
47:33 - is inside of an array so we need to join
47:37 - join uh the elements in the array into
47:40 - the string based on the space right so
47:44 - I'll save this and run this
47:47 - again this is the correct output and
47:50 - this is how we capitalize the um
47:54 - sentence um and if you don't like
47:57 - creating a new array and adding it uh
48:02 - adding each word into that array and uh
48:05 - returning the result we can even uh
48:08 - minimize all of this work by using um uh
48:13 - map method um so we can call map on this
48:19 - words so uh we can get rid of all of
48:24 - this
48:26 - we can call the map
48:30 - function and we'll get access to each
48:33 - word right and the same way we will get
48:39 - access
48:40 - to um the word we'll get the first
48:44 - letter we'll change this to
48:47 - uppercase We'll add rest of uh
48:54 - whoops
48:56 - call the word we call Slice
48:59 - on on the word and add rest of the
49:04 - characters of the
49:06 - word and then we'll
49:11 - join with the space and return the
49:16 - result uh let's run
49:19 - it see this is another solution so you
49:23 - got two solution for this problem we no
49:26 - longer need this variable so we can
49:29 - remove
49:32 - this check to see if two provided
49:34 - strings are anagrams of each other one
49:37 - string is an anagram of another if it
49:40 - uses the same characters in the same
49:42 - quantity only consider characters not
49:46 - spaces or punctuation consider capital
49:48 - letters to be the same as lower case
49:51 - here are some examples if you provided
49:53 - two strings one coding money and the
49:55 - other money coding it should return true
49:58 - because it uses the same characters and
50:00 - the quantity of each character is the
50:02 - same therefore it returns true same is
50:04 - true for this other example rail safety
50:08 - and fairy tales are anagrams of each
50:10 - other because they use the same
50:12 - characters in the same quantity uh of
50:15 - characters are uh present in both of
50:19 - these uh strings we will not consider
50:21 - exclamation marks or um special
50:25 - characters or spaces um so uh this is
50:30 - the challenge for today uh pause the
50:33 - video and give this problem a try also
50:36 - if you want to follow along check out
50:38 - the GitHub repository at this
50:45 - URL all right so I'll give you two
50:47 - possible solutions to this coding
50:49 - problem um the first solution consists
50:52 - of three steps and the first step will
50:55 - build a character map for string a then
50:58 - we'll build a character map for string B
51:01 - and this in the third step we'll compare
51:03 - both of these character maps to see if
51:05 - they're equal to each other um if
51:07 - they're not we'll return false so let's
51:10 - start by building the character map for
51:12 - string a to do that we need an empty
51:15 - object let's create that let's call this
51:18 - car map a and set that to an empty
51:24 - object
51:27 - and also we need to remove uh space in
51:32 - uh punctuations uh exclamation marks and
51:35 - things like that so I'll do that now
51:39 - string a. to lower
51:43 - case and to remove
51:47 - the uh the punctuations in spaces we
51:50 - would we'll use a regular
51:54 - expression
51:55 - [Music]
52:08 - make sure to use uh backs slash capital
52:12 - W this will match um all the uh special
52:18 - characters um the space and
52:21 - punctuations um this is a a character
52:24 - set brackets represent the character set
52:27 - and this capital D represent anything
52:31 - that is not a word which is different
52:33 - than the small uh W if you use a small W
52:36 - it will match all uh the words that is
52:38 - in a character uh it will not match the
52:41 - punctuations so we'll use capital d to
52:44 - replace that okay so uh to show you um
52:50 - uh let's return uh this string a let me
52:55 - return it uh save this to see the output
52:59 - of um our clean
53:02 - [Music]
53:04 - uh string so as you can see um this is
53:08 - the string a it has space and
53:11 - exclamation marks uh but after this line
53:15 - of code it removed the exclamation mark
53:17 - in spaces and this is the output that we
53:20 - get all right so let's uh create uh now
53:25 - uh um the character map
53:28 - so um we'll use a for Loop so
53:34 - for
53:35 - let car
53:38 - of uh string
53:43 - a and uh
53:46 - so we'll say car map
53:50 - a.
53:53 - car let's see car map a if this
53:58 - character already
54:01 - exists if it exists then increment it by
54:06 - one if or if if it does not exist then I
54:12 - use one okay so this will create uh the
54:16 - character map for string a let me return
54:18 - it to see the output of what we get here
54:22 - so
54:23 - return C R map
54:27 - a save and
54:30 - run so you see we're getting the
54:34 - character map for string a uh so as you
54:37 - can see it's counting each characters
54:40 - for example we have one R 2 a 1 I one
54:45 - L so on so we created the character map
54:51 - um for string a we need to do the same
54:55 - thing the same exactly same steps uh
54:58 - there's a principle in uh software
55:00 - development uh do not repeat yourself so
55:04 - if I write the same code over here it's
55:06 - repeating myself writing the same code
55:09 - again and again so um at this point it
55:12 - is uh a good idea to create an hel uh
55:16 - method another function to uh um to
55:19 - create the character map so I'll call
55:21 - this new function function all call it
55:25 - character car map I'll call it car map
55:30 - um and it will have St
55:34 - strr and I'll just um what I'll do I'll
55:39 - copy this code I'll paste it
55:43 - here right so return car map uh so uh
55:50 - let's do something remove these things
55:53 - so that uh we can reuse use it with
55:56 - anything so I'm just going to uh change
56:00 - this to S strr because this is the
56:03 - variable that we're using here
56:05 - Str and then Str Str okay remove the a
56:11 - from
56:12 - here and so I'm going to save
56:17 - this uh what I'm going to do is here for
56:21 - correct map a I'm going to use Cor map
56:25 - and provide string a to this
56:29 - one string
56:31 - a and let me return
56:35 - this map a to to make sure it's working
56:39 - fine so yeah so this is working fine and
56:44 - the now the the best part is that we can
56:46 - reuse this to build a character map for
56:50 - string B so uh I can copy the the
56:53 - statement and paste it right here uh we
56:58 - I'll rename the variable call it B and
57:02 - here I'm just going to change string a
57:04 - to string B because this is what we're
57:08 - using as the parameter and now so we we
57:11 - have uh the character map uh we build
57:15 - the character map for both the uh string
57:18 - a and string B now we need to compare uh
57:23 - compare both of them first of all let's
57:25 - compare the length of uh um both the
57:29 - characters uh so to do that as you can
57:32 - see in an object we have keys and values
57:35 - as you can see R is the key and uh one
57:39 - is the value a is the key two is the
57:42 - value
57:43 - right um to um get the keys to get all
57:47 - the keys we can use um
57:51 - object. keys and we can provide
57:55 - U the
57:56 - string like that so let me return this
58:00 - return object. keys so that you see what
58:04 - would be the output now so if I return
58:07 - this uh object. Keys oh sorry I have to
58:11 - provide the car character map uh car map
58:15 - a so let me save
58:18 - it so so you see uh these are the keys
58:21 - it it returns all the keys uh for me
58:25 - from the uh object the character map of
58:28 - of string a so what I can do is I can uh
58:32 - compare both of them by using an F
58:34 - statement I can say
58:37 - object. keys provide
58:41 - car map
58:43 - a u uh and to find the length because
58:48 - this uh object. Keys
58:50 - convert uh into an array and then you
58:54 - get get uh the keys in an array so on
58:57 - the array we can use Link to to check
59:01 - the link and compare that with uh
59:05 - object.
59:07 - Keys car map
59:10 - B uh do
59:14 - length so if the length of these two um
59:20 - um keys do not
59:23 - match then then we'll return false
59:27 - right so if our uh character map a does
59:32 - not have the same uh Keys uh as the
59:36 - character map B then obviously we know
59:39 - that this is uh going to be false this
59:42 - is not going to be an anagram now we
59:45 - need to
59:47 - Loop uh both of these character Maps
59:52 - so we can Loop over over any of them we
59:56 - can either choose a or b it doesn't
59:58 - matter so I'll use um character map a so
60:02 - I'll say let key uh n uh car map a uh
60:09 - now you see that we're using n you see
60:13 - let key n uh when we working with
60:16 - objects and we want to Loop through the
60:18 - objects we use n and if it is an array
60:22 - then in that case we'll use off so now
60:24 - now we're using let key in character map
60:27 - a and then I'll use comparison I'll do
60:32 - if um car map
60:37 - a
60:39 - key is not equal to car map
60:46 - b
60:47 - key if the key in character map a is not
60:52 - equal to the key of the character map B
60:55 - uh for example if we have for example
60:59 - one R in character map a and we have two
61:02 - R in the character map a b and if they
61:05 - are not equal to each other then in in
61:07 - that case we know that this is not an
61:10 - anagram therefore we will return false
61:14 - right so if this check passes and this
61:17 - check passes and we can't find anything
61:21 - that is not equal to each other then it
61:24 - and it means that it is an anagram and
61:27 - both of the characters in character map
61:30 - A and B are equal uh so this means that
61:34 - we have an anagram so in that case um we
61:38 - will
61:39 - return true so let's save this and let's
61:44 - run the code to see if it is working or
61:48 - not as you can
61:50 - see this is not
61:53 - working uh
61:58 - why this should return
62:02 - true um why it is not working so it is
62:07 - returning false we have to find what is
62:10 - the reason so oh
62:14 - here this is a big mistake that I'm
62:17 - doing I am checking that if they're
62:19 - equal I should check if they're not
62:22 - equal so this should be like like
62:25 - this they should not be equal to this in
62:29 - in that case we would return
62:31 - false all right so let's uh save this
62:35 - and run the code it should give you the
62:37 - the correct output this time let's um
62:40 - try with another
62:42 - example so let me try with
62:53 - this
62:58 - all right let me save
63:00 - it this should return
63:02 - true the last test case let's try with
63:06 - this
63:08 - one
63:14 - copy paste save it okay and now it
63:20 - should return false this is uh working
63:23 - this is the first solution to the
63:24 - problem let's work on the the easier and
63:29 - and very intuitive uh solution to this
63:32 - problem all right let's work on the
63:34 - second solution I said I'll give you two
63:35 - solutions and the second solution is uh
63:38 - uh is much easier I'll show you one
63:41 - small little trick it will make it a
63:43 - piece of cake so let me copy this uh one
63:47 - for your future reference I'll copy the
63:49 - solution as well for you and
63:53 - I'll copy it I'll paste it here I'll
63:57 - comment it
64:01 - out okay
64:04 - and
64:06 - now let me get rid of
64:09 - this so now I'll
64:12 - just get rid of all of it
64:15 - right so now what we will do is we'll
64:19 - sort a string a and string B once it is
64:23 - sorted then we'll get the it will make
64:26 - it much easier right so let's do that uh
64:30 - so let's uh sort string a string
64:35 - a uh but you uh know that the S function
64:40 - is only possible on array it cannot be
64:45 - done in um on the string directly so we
64:49 - need to convert uh the string into an
64:52 - array but before doing doing that we
64:55 - need to uh change this to lowercase
64:58 - lower case and also we'll um do the
65:04 - regular expression the same regular
65:07 - expression uh that we
65:09 - did to get rid of
65:12 - the space and
65:15 - punctuations all right so once uh we got
65:19 - rid of that I will call split
65:23 - function
65:25 - split function on
65:26 - it and then once uh I have changed this
65:30 - to uh an array I can call the
65:35 - sort uh method and once it is sorted I
65:40 - will join it back like this so let me
65:45 - return this to see what we get let me
65:48 - save
65:50 - this return as you can see uh this is
65:54 - High there right so this is string
65:57 - a uh
65:59 - so we can do the same thing for string B
66:02 - so let's uh create another function to
66:05 - do this uh to make it easier because we
66:07 - know about the software development
66:09 - principle do not repeat yourself we do
66:11 - we will not repeat ourselves therefore
66:13 - we'll create a function uh I will call
66:16 - this function
66:18 - clean um Str Str and I'll provide this
66:23 - string
66:25 - uh as the parameter so what I'll do is
66:29 - I'll
66:30 - just uh cut this from here I'll paste it
66:34 - here return
66:37 - sorry return and instead of Str string
66:42 - we need to use the
66:43 - same uh input parameter name or the same
66:47 - thing like this okay so now we can do
66:51 - the same like we can return
66:55 - uh clean St Str provide a string a and
67:02 - compare this to clean Str
67:07 - Str string
67:10 - B
67:12 - so now when we do
67:15 - this uh we'll just compare this will
67:19 - this is a conditional uh statement um if
67:23 - it is true it will return true if it is
67:26 - false it will return false so let's also
67:29 - try with another example this
67:33 - one uh
67:41 - copy
67:42 - paste save run it we are getting the
67:47 - correct output uh this is uh the second
67:50 - solution as I as I promised to give you
67:55 - we need to write a function that returns
67:58 - number of vowels used in a string what's
68:01 - a vowel uh vs are the characters a e i o
68:06 - u here are some examples uh so we need
68:10 - to count the vowels um i e e so there
68:16 - are three vowels we need to return three
68:19 - and second example how are you we have
68:22 - five wows
68:24 - so we need to count the
68:26 - vowels uh in a given string uh pause the
68:30 - video give this problem a
68:32 - try all right so I'll give you two
68:34 - solutions to this problem uh I'll give
68:37 - you one solution with the regular
68:38 - Expressions that is the easiest and um a
68:42 - lot of interviewers might not like you
68:44 - to use the um uh the regular Expressions
68:48 - they may not allow you to do that so I'm
68:50 - going to give you another uh solution uh
68:53 - just in case
68:54 - so with the regular expression is very
68:56 - easy um so we have built-in function
69:01 - called match which we can call on string
69:06 - which is the provider string so we can
69:09 - call match and then we will provide a
69:13 - regular expression so what regular
69:14 - expression we will provide here we'll um
69:17 - use a character set of a e i o u right
69:22 - and then we need to provide two flags G
69:25 - and I why we providing G because uh by
69:28 - default if you do not have G over here
69:31 - it will stop at the first match that it
69:33 - finds for example if it finds a so it
69:36 - will only uh return the the first match
69:39 - when we have G it will not stop at the
69:42 - first match it will go for uh forward
69:44 - and it will find any character that
69:46 - matches uh the um letters in this
69:50 - character set and the I is for case
69:54 - insensitivity so it will become
69:56 - insensitive to the case even if it is a
70:00 - capital letter it will still work
70:03 - so so um this one the match uh method
70:09 - returns um null if uh there are no
70:13 - matches if uh there are any match it
70:16 - will return an array with all the
70:19 - matches so uh therefore what we'll do is
70:23 - create a uh variable called
70:26 - matches and
70:29 - uh and store the result of the matches
70:33 - inside this uh matches variable and
70:35 - we'll return
70:37 - matches if there are matches we will
70:40 - return the length we don't want to
70:43 - return the match because as you can see
70:45 - in the examples we just need to return
70:47 - the count of those vowels so we'll just
70:50 - use a length because on arrays we can
70:54 - run we have a property uh called length
70:57 - and it will return uh the length of that
71:01 - array and if there are no matches we can
71:05 - return zero so in that case uh uh I'll
71:09 - save this and I run it as you can see
71:12 - for coding money uh the in the example
71:15 - we have this is returning the correct
71:18 - result so this was the first solution
71:20 - with the regular expression all right
71:22 - let's work on the second solution to
71:24 - this problem uh so the idea is we'll
71:27 - create an array with all the vowels
71:29 - inside it so um then we will check the
71:34 - strength against uh the values in the
71:38 - array uh to see if we can find a match
71:42 - if there's a match we will use the
71:44 - counter variable to increment and then
71:46 - at the end we'll return that counter
71:48 - variable so uh let's try to do that so
71:52 - let's create
71:54 - um an array called uh
71:58 - um um vowel
72:01 - check
72:03 - and so what I'm going to do let's try to
72:07 - copy from
72:09 - here so I'm just going to
72:15 - copy the vowels and this array so now we
72:19 - have all the vowels uh right uh
72:24 - oops sorry I try to use the camel case
72:28 - uh okay so now I also need a variable
72:32 - called count and I'm going to set that
72:35 - to
72:37 - zero uh and then I'm going to uh run a
72:40 - loop
72:42 - for uh
72:44 - let um car of s
72:49 - strr okay I'm going to have a logic
72:51 - inside of this Loop and at the the end
72:54 - I'll return the
72:58 - count what I'll do inside of this loop I
73:01 - will check to see if the characters in
73:05 - The String is a vowel if it is a vowel
73:08 - I'm going to increment the count
73:10 - variable if it is not a Val it not do
73:13 - anything and so at the end we'll just
73:16 - return the count okay uh so the loop
73:20 - goes uh each character one by one like
73:23 - this
73:24 - right so in this example we have coding
73:27 - money it um the first uh iteration it
73:31 - will check for C then uh o d i n g so um
73:36 - I'll say um uh so the arrays have a
73:43 - built-in helper um function called
73:46 - includes um that's also available on
73:50 - this strength but in our case it's
73:52 - better to use an an array it's more
73:54 - structured and organized so we can say
73:59 - um if
74:01 - vowel
74:03 - check do
74:05 - includes okay if the vowel check
74:09 - includes the character from the string
74:12 - so if it includes
74:15 - character so in the first iteration C if
74:20 - is C inside of this array if it
74:25 - is uh um uh uh if it is not then it will
74:30 - just um skip uh this line if and the
74:34 - second iteration it will come to O So it
74:37 - will uh check to see if o is inside of
74:41 - the vowel check if it is then we will
74:45 - increment the count variable so at the
74:48 - end we will return the count so let me
74:50 - run it and the example we should get the
74:52 - four so let's
74:55 - see as you can see we're getting the
74:58 - correct result this is another solution
75:01 - to this problem uh one more thing before
75:04 - you go uh you can just add uh two lower
75:08 -  over
75:11 - here uh to make sure even if the
75:15 - provided string has uh capital letters
75:17 - or small letters it will still
75:21 - match our JavaScript training algorithms
75:24 - for beginners would not be complete
75:27 - without the classic fizzbuzz challenge
75:29 - you need to write a program that console
75:31 - logs the numbers from one to n but for
75:34 - the multiples of three print Fizz
75:37 - instead of the number and for the
75:39 - multiples of five print Buzz for the
75:41 - numbers which are multiples of both
75:43 - three and five print fiz Buzz here's an
75:46 - example uh I would like you to try this
75:50 - problem and pause the video right here
75:55 - thank you for trying to solve this
75:57 - problem I hope you were able to find a
75:58 - solution if you did not this doesn't
76:01 - matter we'll work on it together the
76:04 - whole trick to solving this problem is
76:06 - using the module operator if you haven't
76:09 - use that before we'll use it right away
76:12 - okay of course we need a loop right so
76:14 - we'll start from one I let let I equal
76:17 - to 1 because it's given in the
76:20 - directions and the condition that we
76:22 - need to satisfies I less than or equal
76:25 - to
76:26 - n and then I
76:30 - ++ okay so the first thing that we would
76:33 - need to do is to check for if the number
76:36 - is a multiple of five and three if it is
76:42 - uh so how to check if a number is a
76:44 - multiple of uh three we use the module
76:48 - operator so we can say I uh the module
76:52 - operator is the person sign um if I is
76:57 - um if I modu 3 equals
77:00 - to uh zero it means that if the um if I
77:06 - is divisible by three completely and it
77:09 - does not have any remainders then it
77:12 - means this number is a multiple of three
77:15 - okay and
77:17 - so I also need to check if I
77:21 - is um
77:23 - um a multiple of five if if I is
77:27 - divisible by five and it does not have
77:30 - any remainders then in that case we need
77:34 - to
77:35 - write phase Buzz right else if if I is
77:44 - um multiple of
77:46 - three
77:48 - and if I is divisible by three and it
77:51 - does not have any remainder after the
77:54 - division then it it means that this is
77:57 - also we use the module operator every
78:00 - time if you need to do like for example
78:04 - every third time or every second time in
78:07 - in a repetition uh so that's how like
78:10 - I'll show you uh now in the example okay
78:14 - so in that case if it is um multiple of
78:19 - three we need to print phase so console.
78:22 - line
78:25 - pH else if I is multiple
78:30 - of
78:32 - five we need
78:35 - to write Buzz console.
78:40 - [Music]
78:42 - L
78:44 - else console. L the number I okay let me
78:51 - save this and run the
78:57 - code as you can see I provided the
79:00 - number five here to the function and as
79:03 - you can see that I have the number one
79:05 - two and then it says phiz and then I
79:09 - have four and then it says Buzz okay let
79:12 - me try with a bigger number like 20 okay
79:15 - let me save it and run the code as you
79:19 - can see so like I said if a number is a
79:22 - m multiple of three then it means
79:29 - then it means that it will repeat every
79:33 - third time you see this is the third you
79:36 - know every third time we have fiz every
79:40 - fifth time we have buzz and every time
79:45 - that the number is
79:47 - divisible by three and five and there is
79:52 - no remainer to to that number like for
79:54 - example 15 we write fiz buuz okay that's
79:59 - the solution to the classic fbus
80:03 - challenge we need to write a function
80:05 - that accepts a positive number n the
80:07 - function should console log a step shape
80:10 - with n levels using the pound character
80:14 - make sure the step has spaces on the
80:16 - right hand side here are some
80:19 - examples the uh function accepts and
80:23 - number and if we provided with number
80:26 - two this should be the output okay so
80:29 - give this problem a try and uh pause the
80:32 - video right
80:34 - here all right thank you for trying to
80:36 - solve this problem if you were able to
80:38 - find a solution that's great if not it
80:41 - doesn't matter we will work on this
80:43 - problem together I think first uh we
80:46 - need to focus on printing something like
80:48 - this uh it would be easier for us to
80:50 - print something like this and then we
80:52 - will worry about the spaces later let's
80:55 - do this one and then we'll take it from
80:58 - there uh as you might have already
81:00 - guessed we need a loop so I'll write the
81:05 - for loop I uh equals to 1 I less than or
81:10 - equal to
81:11 - n
81:13 - i++ okay so one thing um I've noticed
81:16 - the beginners are confused about whether
81:19 - they should start from one or zero if
81:22 - they want to start from zero then I'll
81:24 - make sure that the condition is I less
81:26 - than n but if they want to start from
81:29 - one
81:31 - then the condition has to be I less than
81:35 - or equal to n so that's important to
81:38 - note uh for now I'm just going to
81:41 - console
81:42 - log the pound
81:45 - sign I'm going
81:47 - to save it and uh run
81:51 - it
81:54 - as you can see we get the three pounds
81:57 - uh but we need nine uh pound symbols
82:01 - three on each line okay so um to do that
82:08 - uh we would need to use a nested
82:11 - loop I noticed that the beginner
82:13 - developers find working with the um uh
82:16 - nested Loops uh difficult they struggle
82:20 - with it I'm going to give you way uh to
82:23 - make it easier if you visualize uh what
82:26 - you want to do in terms of uh a table
82:31 - containing rows in columns it makes it a
82:34 - lot easier uh so let's uh try to do that
82:39 - uh I'm going
82:41 - to rename my variable I'll change it to
82:47 - row and then I
82:50 - will create nested
82:55 - Loop
83:00 - and I'll make this a column so the
83:05 - nested Loop the outer loop will be
83:08 - responsible for the row and the enter
83:12 - Loop will be responsible for creating
83:15 - all the columns in that row so if you
83:18 - think about it this way then it would be
83:21 - much easier
83:23 - to work with the nested Loops from now
83:26 - on okay so let's console log here just
83:30 - to show you what you get as the
83:39 - output as you can see you're we're
83:42 - getting 8 pound symbols in the
83:45 - output uh but we would we need only uh
83:50 - three pounds on each line so it's it's
83:52 - going to be a
83:54 - 3X3 uh pound symbols um and we need that
83:58 - in the output okay so how to do that
84:01 - okay uh so I want to create all the
84:05 - columns I mean I will I want to
84:09 - create an empty variable called line I
84:14 - will set it to empty string and what I'm
84:18 - going to do I'm going to
84:21 - append app
84:23 - bend
84:25 - the pound symbol to this line so after
84:29 - it completes it adds the pound symbol
84:33 - for all of the columns for that row I
84:36 - want
84:38 - to um
84:40 - console
84:42 - log.
84:45 - line okay let me save this and
84:50 - run as you can see we're getting the
84:53 - desired output
84:56 - right all right so the best way to
84:59 - visualize the code that I've written
85:01 - here so far uh by debugging it so let me
85:04 - run the
85:09 - debugger I have set a breakpoint on the
85:12 - first Loop let me uh let me watch for
85:14 - some variables let me watch for
85:17 - row
85:20 - and call
85:24 - and line okay and let's run
85:29 - this okay so the outer loop starts at
85:33 - one and then we initialize the variable
85:37 - line to empty uh
85:40 - string and then it uh executes the enter
85:45 - Loop it starts the enter loop at uh one
85:48 - column one and then it appens the
85:52 - uh the pound symbol to the line
85:56 - variable uh then it will
85:59 - increment uh the column to two and
86:03 - then uh it will append another
86:06 - pound as you can see and then it
86:10 - increments to column three and since
86:12 - we're provided with a number n you see n
86:16 - is3 so now we know that the uh inner
86:22 - loop will
86:24 - break H and so the row will increment
86:29 - now we will working on the second row
86:32 - and then again we initialize the line to
86:35 - an empty strength and then the enter
86:38 - Loop will run three times to a pent
86:42 - three pound to the line and then we'll
86:47 - uh console log the second line now we're
86:49 - working with the third line in the loop
86:52 - and um and it initialize the line and
86:57 - then we're appending the pound
87:00 - sign to to the line and then once row is
87:06 - equal to four
87:08 - um it um the condition becomes false so
87:12 - it U you know exits the loop so this is
87:16 - uh the code when you have trouble
87:18 - understanding a code it's always a good
87:20 - idea to debug it okay so now we we have
87:24 - we know what this is doing now we need
87:27 - to take care of the spaces on the right
87:30 - side um we need to do what let's let me
87:36 - illustrate that what we need to do here
87:39 - so we need to
87:41 - remove replace the for the first line we
87:46 - need to have two spaces on the second
87:49 - line we need to have one space
87:52 - now we need to work on getting an
87:56 - output like this um it will be easier
87:59 - for me to explain this uh on the
88:02 - Blackboard uh so let's get on the
88:04 - Blackboard all right so whenever we're
88:06 - working with the nested Loops it's
88:09 - always best to visualize it in terms of
88:13 - a table in rows in columns it makes it
88:17 - much easier to work with the problem so
88:20 - let's see on which columns do we have
88:23 - the pound symbol right we need to figure
88:26 - that out we have a
88:29 - here column
88:32 - one row
88:34 - one we have
88:37 - it column
88:40 - one uh row
88:44 - two um as you can see this is 1 is equal
88:48 - to
88:49 - one um column
88:52 - one one is less than
88:55 - two let's see
88:58 - here uh
89:01 - column uh
89:04 - two
89:05 - um row two we know that 2 is equal to
89:11 - two
89:12 - right and let's see this one this
89:16 - column
89:18 - three row three we can see that 3 is
89:22 - equal to
89:24 - 3 um just by looking at this we know
89:30 - that all the columns that have the pound
89:33 - symbol satisfy this condition column is
89:37 - either less or equal to the
89:42 - row all right since we figured out the
89:45 - condition Logic the code is easy uh so
89:49 - here we'll say f
89:52 - [Music]
89:54 - column
89:55 - is less than or equal to
89:59 - row then append this line
90:05 - append pound to the
90:09 - line
90:12 - else append
90:17 - [Music]
90:19 - space let's save it and run the
90:25 - code as you can see we're getting the
90:28 - res desired output this is the solution
90:31 - to the problem let's try with another
90:33 - number like let's try with
90:39 - six
90:41 - [Music]
90:44 - oops as you can see we're getting the
90:47 - correct uh string
90:50 - pattern we need to write a function that
90:53 - accepts a positive number n the function
90:56 - should console log a paramed shape with
90:58 - n levels using the pound character make
91:02 - sure the paramid has spaces on both the
91:04 - left and the right hand side here are
91:07 - some of the examples as you as you can
91:10 - see that it has spaces on the right and
91:13 - left hand side of the pound symbol
91:16 - whenever there's needed okay so I would
91:19 - like you to give this problem a try
91:21 - pause the video right
91:25 - here as you might have probably guessed
91:27 - we need a loop right we as you can see
91:30 - if the number that's provided is three
91:31 - we need three rows right so we need to
91:36 - um uh write a loop um like I mentioned
91:40 - in the video uh before this one uh that
91:44 - whenever you're working with the nested
91:46 - Loops is best to visualize them in the
91:48 - form of a table consisting of rows and
91:50 - columns it makes the problem so much
91:53 - easy uh so let me write uh the for Loop
91:57 - let row equals to zero um row less than
92:03 - n um row Plus+ that's easy right so we
92:07 - need three rows and for each line you
92:10 - see this is one line uh I'm calling each
92:14 - row a line right so I'm going to need an
92:17 - empty string so I'm going to uh um
92:21 - create a variable called line and I'm
92:23 - going to set it to um an empty string
92:27 - now we need uh to Loop over the columns
92:31 - let column equal to zero and uh column
92:36 - uh less than okay so we need to figure
92:39 - out the number of columns because it's
92:43 - uh as you can see for if the number is
92:46 - three we need five columns so uh let's
92:50 - hop on to the black board real quick
92:53 - okay so what do we need to figure out is
92:56 - the number of columns because number of
92:58 - rows is clear for if n is equal to two
93:03 - we have two rows if n is equal to three
93:06 - we have three rows right the number of
93:09 - columns if it
93:12 - is 2 N - one does this satisfy the
93:17 - number of columns so if the number is
93:19 - three uh two multiply 3 is 6 - 1 is
93:24 - equal to 5 so this satisfy the number of
93:26 - columns so now we can easily write our
93:29 - Inner Loop and we can write it
93:33 - like um let me select the same
93:37 - color
93:40 - for
93:41 - let column equals to
93:44 - zero column is less than 2 N
93:50 - -1
93:52 - column
93:54 - Plus+ right so now we need to figure out
93:58 - which columns do we need to put the
94:02 - pound symbol in right so if you look at
94:07 - it uh we know that the midal column
94:13 - always has the pound symbol so let's
94:18 - figure out the formula to find the metal
94:22 - column so if we have five columns and we
94:28 - divide it divide that by two we get
94:31 - 2.5 and if we round down this number we
94:35 - get two right and you can see that the
94:38 - two column has all of it has the pound
94:43 - symbol okay we have a method called
94:47 - math.
94:50 - floor and and to get the number of
94:53 - columns we already know that it is 2
94:57 - n-1 and we divide that by two we get uh
95:03 - the mid
95:05 - point we figured out the midpoint now we
95:09 - know that there's a few of the pound
95:12 - sign on the right side of the midpoint
95:14 - and there are a few of the pound sign on
95:18 - the left side of the midpoint so
95:21 - if you see this uh carefully and You
95:25 - observe it you will figure out that uh
95:29 - all the columns that have the pound
95:33 - symbol satisfy this condition and the
95:36 - condition is column is either greater
95:40 - than or equal to
95:44 - Mid
95:46 - minus
95:48 - row
95:50 - and Callum column is less than or equal
95:54 - to Med
95:59 - Plus okay so now that we have figured
96:02 - that out it is so much easy to write the
96:06 - code so let's uh hop on the visual study
96:09 - code and write the code for this
96:11 - one all right so as I've explained to
96:14 - you on the Blackboard we now know the
96:17 - number of uh columns that is two n
96:23 - min-1 and then we get a column Plus+ all
96:28 - right and we also know the condition um
96:35 - to use uh for uh you know determining
96:39 - which column should have the pound
96:41 - symbol and that is if right if uh column
96:47 - is greater than or equal to uh
96:51 - mid uh
96:55 - midpoint minus
96:58 - row
97:00 - and column is less than
97:07 - midpoint uh less than or equal
97:11 - to midpoint plus row all right so we
97:16 - need to uh we don't have a variable mid
97:21 - uh
97:21 - we need to create
97:23 - that
97:26 - here I'm going
97:30 - to use the mad.
97:34 - floor
97:37 - and 2 N - 1 / 2 all right okay and now
97:48 - uh if um this condition is set satisfied
97:52 - we know that we need to
97:57 - append the pound
97:59 - symbol if
98:01 - not we need to
98:05 - append
98:07 - space okay and right after this enter
98:12 - Loop
98:15 - ends uh we need to console
98:19 - log uh the line
98:22 - let me save this and run
98:30 - it cannot mix big in in other types use
98:34 - explicit conversion so I'm getting an
98:37 - error let's see what error is this I
98:40 - know what the problem is we need to
98:42 - multiply 2 multiply by n minus one and
98:46 - that's the same thing we need to do over
98:48 - here we need to multiply this uh like
98:51 - like this 2 multip by n minus one right
98:54 - so let me save this and run this
99:05 - again as you can see I'm getting the
99:07 - correct output this time
99:10 - um and let me try with another let's try
99:14 - with nine let me save it and run it as
99:18 - you can see we're getting a bigger
99:20 - paramet this time time and this codee is
99:22 - working
99:25 - perfectly I've had dreams that weren't
99:28 - just
99:30 - dreams today we need to write a function
99:33 - that accepts an integer n and returns
99:35 - that n byn spiral metric here are some
99:38 - examples if you're provided with an
99:41 - input number three we need to return a
99:44 - two-dimensional array with the
99:47 - values uh in the same order as one 1 2 3
99:52 - 4 5 6 7 8
99:56 - 9 I'd like you to give this problem a
99:59 - try and pause the video right
100:06 - here this is not an easy problem I would
100:09 - say this is a medium to a hard problem
100:12 - uh if you were not able to find a
100:14 - solution to this problem that is very
100:16 - normal I was struggling with this
100:18 - problem the first time I tried
100:21 - uh but once you get the trick uh
100:24 - problems like this become so much
100:26 - easy um okay so as you can see we uh
100:30 - need to define a few variables like
100:33 - start row end row start column end
100:36 - column and we would need a counter
100:38 - variable and um also we would need to
100:42 - take care of the for side uh the top row
100:46 - we would need one Loop for the top row
100:48 - uh another loop for the right column the
100:50 - another loop for the bottom row and
100:52 - another loop for the left column once we
100:56 - so we we we would need at least four
100:59 - loops and once we take care of the outer
101:02 - uh you know the four sides outer sides
101:06 - uh we would need to put the four Loops
101:08 - inside a while loop to take care of all
101:11 - the inner uh four sides of the Matrix
101:16 - right
101:18 - so our first Loop would go from start
101:23 - column to end column and this would take
101:28 - care of the top R right and once we do
101:32 - this we would
101:34 - increment the start
101:38 - row by one so it will move down here um
101:44 - and then we would need another loop that
101:47 - would go from start row to end
101:52 - row and that would take care of the uh
101:56 - right
101:58 - side at the right column all right and
102:02 - once we do this we
102:05 - decrement the end
102:08 - column so we decrement the end
102:13 - column it will come over here and then
102:17 - we need another
102:19 - loop
102:21 - that would go from end column to start
102:25 - column and it would take care of the
102:29 - bottom uh
102:32 - row and once the bottom row is
102:39 - complete we would
102:45 - decrement the end
102:48 - row so it will come over here here and
102:52 - then we would uh
102:55 - finally run a loop from end row to start
103:00 - row that would take care of the left
103:04 - side uh the left
103:07 - column of uh The Matrix and then once we
103:11 - write this these four Loops we need to
103:14 - put them
103:16 - inside the Y Loop and the Y Loop would
103:21 - take care
103:22 - of the inner four
103:26 - sides so once you know this the coding
103:29 - becom so much
103:31 - easy so let's start
103:37 - coding I'll start off by creating a
103:40 - variable called result I'll set that to
103:43 - empty array and we need to return an uh
103:47 - multi-dimensional array so uh to create
103:50 - create that we need to run a for Loop
103:53 - for I equal to0 I less than
103:57 - n
104:02 - i++ result.
104:05 - push empty
104:11 - array return
104:14 - result let me run this code to say yes
104:18 - we are getting four empty arrays inside
104:21 - of this array because the number that is
104:24 - provided as the input is four okay so we
104:27 - need to have four rows in The
104:31 - Matrix we uh but these are empty we need
104:34 - to fill them with
104:35 - values and once we're done at the end we
104:39 - will return the result okay and so we
104:44 - need to take care of the four sides top
104:46 - right bottom
104:48 - left top
104:54 - right
105:00 - bottom
105:03 - left okay um to create this top row we
105:09 - need to run a loop uh
105:13 - from uh but first we need to create some
105:16 - uh variables the variables that we need
105:19 - to Define
105:23 - or counter I'll set that to
105:27 - one start row I'll set that to
105:32 - zero and
105:36 - row N
105:40 - minus1 start call equals to
105:45 - Zer and call is n minus
105:52 - one okay so for the top row we need to
105:59 - start for let I equals
106:03 - to start
106:06 - call
106:08 - I less than or equal to end
106:16 - call
106:19 - i++ make
106:21 - sure you have semic colums
106:28 - here
106:30 - and result okay so the first value that
106:34 - you'll provide will be for the row and
106:37 - the second values are going to be for
106:39 - the column okay since uh the the values
106:44 - for the columns are going to be dynamic
106:45 - and it will be coming from
106:48 - I but we know that the top row is start
106:52 - row so I'll do start
106:55 - row equal to the counter and then I will
107:01 - increment the
107:03 - counter like this let me save this and
107:07 - run
107:09 - it okay as you can see the top row is
107:12 - done so we need
107:15 - to increment the start row
107:21 - okay like it comes
107:25 - here okay let's do this the same thing
107:28 - for the right
107:32 - side this time it will be start row
107:36 - because it's going to be vertical comes
107:39 - from the
107:40 - top uh to the bottom row so it will be
107:46 - uh start
107:47 - row uh end
107:50 - row I ++ this time the value for the row
107:56 - will be
107:58 - dynamic but we know that the column that
108:01 - needs the values changed are going to be
108:04 - the end
108:06 - column we're going to be adding the
108:08 - values to the end column so and at the
108:12 - end
108:14 - once this end column is done we
108:17 - will uh decrement the end column so it's
108:21 - going to
108:22 - be end
108:24 - call minus minus I'll save it I'll run
108:30 - it as you can see the top row and the
108:35 - right column is done let's take care of
108:39 - the bottom row so for the bottom
108:44 - row let me copy this one so for the
108:48 - bottom row as you know that we will
108:50 - start from the end
108:53 - row uh end
108:56 - column and I is greater than or equal to
109:01 - greater than or equal
109:03 - to the start
109:08 - column and we need to decrement the
109:11 - value of
109:14 - I the values of the column is going to
109:17 - be dynamic but we know that since it's
109:20 - going to be the bottom row so it is
109:23 - going to be the end
109:25 - row and once that is
109:29 - done uh we will decrement the end row
109:34 - like
109:36 - that
109:38 - okay let me run this to see it's working
109:42 - fine so the top right side and the
109:46 - bottom uh row is done so we need to take
109:50 - care of the left
109:52 - side so for this
109:58 - one for this one we knew that it's going
110:02 - to go from end
110:07 - row end row it's uh start
110:15 - row uh we know that the values for the
110:18 - rows is going to be dynamic but the
110:20 - values
110:21 - for uh the column is going to be start
110:26 - call and once that is done we will
110:32 - increment the start column like
110:36 - this so let's run this
110:40 - one okay so the four sides are done one
110:43 - 2 3 4 5 6 7 8 9 10 11 12 right
110:50 - so we need to put these four Loops
110:53 - inside of a while loop to take care of
110:55 - all the inner uh four sides of the
110:59 - Matrix so let me copy the four Loops
111:03 - that we wrote over
111:05 - here I'm going to cut it and here I'm
111:09 - going to write a while
111:11 - loop
111:13 - while start row is less than or equal
111:17 - to end row
111:27 - and start column is less than or equal
111:32 - to end
111:35 - column while this condition is
111:40 - true you
111:42 - know execute this code within the body
111:46 - of the Y Loop which are the four Loops
111:49 - it will keep on looping until it reaches
111:51 - the end of the row and end of the column
111:56 - so let me save this and run the
112:00 - code as you can see we are getting the
112:04 - desired output and it's going into the
112:07 - right direction 1 2 3 4 5 6 7 8 9 10 11
112:15 - 12 13 14 15
112:18 - 16 let's try with another number
112:22 - like
112:25 - six and run the code we are getting the
112:29 - bigger Matrix with the correct values
112:32 - now you're ready to start my lead code
112:34 - video series you should find link
112:36 - somewhere on the screen to the
112:48 - playlist