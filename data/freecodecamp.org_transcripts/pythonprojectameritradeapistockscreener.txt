00:00 - hi everybody welcome to free code camp i
00:02 - am sam from python basics and this video
00:06 - we are going to be looking at the td
00:08 - ameritrade apis
00:11 - and
00:12 - we are going to be going from start to
00:15 - finish dropping in some
00:18 - pandas
00:19 - it has everything json objects how to
00:22 - dig into and build your own stock
00:25 - screener so what what is an api
00:29 - an api is an application programming
00:32 - interface so
00:34 - basically what that means is all right
00:37 - we know you
00:39 - are going to want information from us
00:41 - we're going to control how you get that
00:43 - information we're going to make it a
00:44 - little bit easier
00:46 - and then we're going to get it to you
00:47 - and we'll go through all these steps
00:50 - so first off i think i've made this a
00:54 - little challenging so behind me so for
00:56 - you
00:57 - the register is
00:59 - going to be where you're going to want
01:00 - to start and also it's
01:03 - developer.td ameritrade.com
01:06 - fill this in and of course then after
01:08 - you do it the login is right beside
01:11 - there
01:12 - so i'm going to go ahead and
01:15 - well actually we can even
01:18 - look at this
01:22 - so
01:23 - this is getting started so first you
01:24 - have to create an account then what
01:26 - you're going to do is you're going to
01:28 - create an app
01:30 - and we'll just
01:32 - uh just so
01:35 - my apps
01:37 - so i'm going to go ahead and log in
01:43 - sorry here we are getting started
01:46 - creating a developer account
01:48 - then
01:50 - new apps
01:51 - so right here
01:53 - when you go to
01:55 - my apps there's going to be add a button
01:57 - and you just name it the only thing that
02:00 - is very important
02:02 - right here is the callback you can just
02:04 - do the
02:06 - http local host
02:09 - colon 8000 and that's all you need
02:12 - not anything fancy
02:15 - so we get that set up
02:17 - and the verification process
02:20 - goes uh very quickly so if you saw that
02:23 - right there new app when you get to this
02:26 - place and here is
02:29 - mine and there's going to be a little
02:30 - bit a couple of blurred things out here
02:33 - but this is going to be your
02:35 - key
02:36 - right here
02:37 - and we're going to go through all of
02:39 - this
02:42 - and we have that set up yes right here
02:46 - http localhost 8000
02:49 - i'll have that down in the description
02:51 - below uh if you're not quite sure if
02:53 - you've not seen
02:55 - uh the django series and you have no
02:57 - idea what this is referring you can just
02:59 - copy this and place this in here
03:02 - so all right now
03:05 - the apis that we're going to be working
03:08 - with
03:09 - are
03:11 - instruments
03:12 - and
03:15 - this is
03:16 - how
03:17 - this data is going to be
03:19 - returned
03:20 - and we're going to go through all this
03:21 - but right now this is just a little warm
03:24 - up and then you can actually then choose
03:27 - and we'll go through
03:29 - all this type of data i know this can be
03:31 - overwhelming right now but real quick
03:34 - video today and actually tomorrow's
03:35 - video is going to be a challenge video
03:37 - that is
03:38 - a challenge that
03:40 - you'll run into
03:41 - uh when we do this so and then we'll
03:43 - pick back up
03:45 - uh tomorrow and then the following week
03:48 - and we'll just delve into this and we'll
03:49 - go
03:50 - slowly but surely like we always do and
03:52 - today we're going to be looking at all
03:54 - of the different apis that
03:57 - the td trade
03:59 - td ameritrade uh have to offer and also
04:03 - after that we're gonna have the answer
04:05 - for our challenge
04:07 - eight so if you're new here thanks for
04:08 - joining us make sure you hit that
04:10 - subscribe button
04:11 - uh notification bell and if this type of
04:13 - video you like go ahead and hit that
04:15 - like button for me and also make sure
04:16 - you stay in tune until the end to watch
04:18 - right here because uh
04:20 - over 800 videos there's a good chance
04:22 - that you may not have seen all of them
04:24 - so all right let's just get into it so
04:26 - the apis that ameritrade has for us are
04:31 - uh
04:32 - pretty impressive and
04:33 - after we get done i'll show you the one
04:35 - that we're going to be using
04:37 - next all right
04:39 - so accounts and trading so
04:43 - i'm only going to be showing you
04:45 - stock data but everything that i'm going
04:47 - to be showing you you can extrapolate
04:50 - out and use
04:52 - for any of these
04:53 - and i was posed the reason why i'm
04:55 - saying that specifically is i was posed
04:57 - the question am i going to be showing
04:59 - you how to make a trading bot
05:01 - no
05:02 - one i don't want to be liable for
05:04 - anything like that but two i want you to
05:07 - understand and see this and really kind
05:09 - of get you interested
05:10 - in investing
05:12 - not in
05:13 - um
05:14 - trading so there we go all right but
05:17 - here are the accounts uh here are the
05:19 - apis of how to trade place an order
05:22 - cancel an order uh you have your
05:25 - authentication
05:26 - token right there
05:28 - uh here's here's the uh
05:31 - instruments
05:32 - and most of these as you'll see
05:35 - especially like markets and i'll show
05:38 - you another way
05:40 - you're going to have a single
05:41 - you're going to have one for a single
05:43 - search
05:44 - and then
05:45 - multiple searches
05:47 - so you can have look at the multiple
05:50 - markets because there are many many
05:52 - markets around the globe not just the
05:55 - nyse and the nasdaq
05:58 - then you have the movers
06:00 - which are
06:02 - companies stocks that are moving making
06:04 - big moves in one day
06:07 - excuse me guys i'm sorry
06:10 - and also i am going to have the solution
06:13 - or
06:14 - a solution to our challenge 8 after we
06:17 - get done after i announce which api
06:19 - we're going to be using
06:20 - option chains
06:22 - so options are
06:26 - a tool that you can buy and it locks you
06:29 - in and gives you the option to purchase
06:32 - a share at a certain price
06:35 - price history that's pretty explanatory
06:38 - you can go back in time
06:40 - and any length of time in any interval
06:44 - quotes of course then you can go and get
06:47 - single quotes
06:48 - multiple quotes
06:50 - then you have your transaction history
06:53 - user information and watchlist so you
06:55 - can then create
06:57 - uh
06:58 - an actual lists of things that you want
07:00 - to watch that you don't then have to go
07:02 - and check every day
07:04 - this is
07:06 - very very handy
07:07 - and it can even go in and do multiple
07:09 - accounts so all right
07:11 - all right so the one that we are going
07:13 - to be begin using and interact with the
07:16 - most is going to be our
07:19 - uh search search instruments
07:22 - and we will and each api
07:25 - has its own
07:27 - address very very useful so
07:29 - now let's deal with our challenge eight
07:34 - so there is a limitation
07:36 - to our queries
07:38 - it is a max
07:40 - actually i found that 500 worked so i
07:43 - don't know what the max is i think i
07:45 - toyed around with it i think 600 fails
07:47 - so it's somewhere between
07:49 - uh 5 and 600 so 500 real easy round
07:53 - number so let's just go ahead and look
07:56 - at our
07:59 - solution
08:00 - so let's just say
08:02 - and then let me get my notes
08:06 - and so all right our dilemma was
08:09 - we have 5450
08:13 - so we're going to start at zero
08:16 - and end
08:19 - and
08:20 - end at 500 so we're going to cycle
08:22 - through 500
08:23 - so while
08:25 - end
08:26 - less than
08:28 - x
08:31 - then print
08:33 - start
08:34 - end
08:41 - hey is somebody in there
08:42 - okay good i want to make sure it wasn't
08:44 - calvin
08:46 - and then now here's the part
08:50 - so all that would happen is right now i
08:53 - would just
08:54 - go and it would print
08:56 - 0 and 500 repeatedly
08:59 - because i'm not changing so now after we
09:01 - print it this is this is the coolest one
09:04 - that i
09:05 - think i remember so i'm gonna just
09:07 - reassign
09:08 - that i'm going to add my to my endpoint
09:10 - i'm going to increment
09:12 - or in place
09:16 - all right so
09:18 - let's see how i did
09:20 - all right so now i'm close
09:24 - but i have a dilemma
09:26 - right here so now i'm outside the loop
09:31 - start
09:33 - equals end
09:36 - then i'm going to
09:38 - minus
09:39 - 500
09:41 - then my new end is x
09:44 - and
09:46 - print
09:48 - start
09:49 - and end
09:50 - saboom
09:52 - so here i go i have zero through 500 500
09:56 - to a thousand thousand to 1500 so on
09:59 - all the way through
10:01 - to the end
10:02 - it is literally
10:04 - that clean that simple and i will show
10:07 - you how to integrate this
10:09 - into our queries and we're going to use
10:11 - all of the tools that we've used so far
10:13 - and it's
10:15 - quite interesting and then we're going
10:17 - to really delve into some very cool
10:18 - stuff with pandas and we're continuing
10:21 - our series with
10:23 - the ameritrade api
10:26 - so i said last video on this subject
10:29 - that we are going to be using the
10:31 - instruments
10:32 - so let's just go ahead and familiarize
10:35 - ourselves with this
10:36 - so if you're new here thanks for joining
10:38 - us
10:39 - this is what we do we do micro videos
10:41 - one video upon a time micro videos and
10:44 - we build upon it so we are doing our
10:48 - series on the ameritrade apis and we are
10:51 - looking at the
10:53 - one api that we are going to be
10:55 - concentrating on so they search
10:58 - instruments
10:59 - and
11:00 - the way that this api works
11:03 - is here's actually the
11:06 - web address right here
11:09 - for it and the way that this works is
11:11 - you're going
11:12 - to pass in
11:16 - your your key
11:19 - oops here we go your key
11:22 - then the symbol that you might be
11:24 - interested in
11:29 - we'll just do boston scientific and then
11:31 - now
11:32 - here
11:34 - is
11:35 - the way in which you're going to
11:39 - look at it so let's just peek over here
11:44 - so for the bonds like this stocks
11:47 - fundamental data
11:50 - and then the the instrument search so in
11:54 - the projection
11:56 - we're going to type in
11:59 - fundamental
12:01 - and then oops
12:04 - i guess i spelled it wrong last time
12:06 - fundamental the actual returns the
12:08 - fundamental data of a single
12:10 - stock instrument and if we wanted to we
12:13 - could pass in
12:14 - a
12:16 - more than one but let's just go ahead
12:18 - send this off and look back at it
12:22 - so here we go here
12:25 - is
12:26 - all of the
12:27 - information
12:28 - associated that with this api returns
12:32 - it returns the symbol and as you can go
12:34 - through you can see all these tags
12:36 - um and as if you look very carefully
12:40 - this is a
12:42 - dictionary
12:44 - so key value pairs
12:47 - and it has a tremendous amount of data
12:50 - and
12:51 - uh in a couple videos we're gonna we're
12:53 - gonna touch on how the type of
12:56 - information this is and how to then
12:59 - begin to extract it and then place this
13:02 - into a pandas
13:04 - pandas data frame and really start
13:07 - crunching this stuff down today we're
13:09 - going to be continuing our series uh for
13:13 - the ameritrade api
13:15 - i'm going to be kind of branching a
13:17 - little bit off of it so
13:19 - we're beginning to build and
13:22 - uh our
13:24 - extend our knowledge and understanding
13:26 - and really our access so really what i
13:27 - want to do today
13:30 - is one so you don't have to have it
13:32 - around don't need to retype it copy it
13:35 - we're actually going to talk about how
13:36 - to handle keys so
13:38 - as you can see right here i have a keys
13:41 - dot py
13:43 - and that is actually because i don't
13:44 - want to have to blur and forget and go
13:46 - through and scroll and keep my key
13:50 - guarded so you can't see it
13:53 - and it's really a good practice so
13:56 - from
13:57 - keys but if you're new here thanks for
13:59 - joining us this is what we do we do
14:00 - micro videos one video
14:02 - upon another
14:04 - and i actually have the key
14:07 - just
14:08 - named ameritrade
14:09 - ameritrade
14:12 - and as you can see right there
14:16 - spider knew what i was doing and then
14:18 - now the only error i have is saying
14:20 - it's brought in but it's not used so now
14:23 - i don't have to worry about
14:25 - you guys seeing it i can place it in
14:28 - where i need to use it and move on from
14:30 - there this is an outstanding
14:33 - actually it's best practice
14:35 - so you're going to have multiple places
14:37 - that you're going to go and you just
14:40 - place it in the same file so you won't
14:42 - have to lose track now like i've always
14:44 - said don't ever delete anything now you
14:46 - can start organizing these things
14:49 - at a time because you're gonna you're
14:51 - gonna start spreading your wings out
14:53 - and going places and using multiple apis
14:56 - where you're going to have multiple keys
14:59 - so now you store them all in one place
15:01 - title it the
15:02 - tool that it is
15:03 - and place it in your keys.py or whatever
15:08 - config
15:10 - config py however you want to do it but
15:14 - this is best practice and i thought this
15:16 - was a perfect place to add this into our
15:19 - toolbox so there we go guys
15:22 - so
15:22 - all right let's just go ahead and get
15:25 - after it so if you're new here thanks
15:26 - for joining us this is what we do we do
15:29 - micro videos
15:31 - so last video
15:33 - actually i guess two videos ago we
15:35 - talked about
15:37 - uh which
15:38 - api we're going to be using and we're
15:40 - going to be using
15:42 - the
15:44 - instruments
15:46 - for
15:46 - multiple
15:50 - for multiple tickers but today we're
15:52 - just going to be doing doing one right
15:55 - now because what we're going to be
15:57 - focused on today is
15:59 - the actual response because we need to
16:02 - start unpacking that so if you're new
16:04 - here thanks for joining us this is what
16:05 - we do we do micro videos we do one video
16:09 - at a time and we build upon it
16:12 - so here is our dilemma symbol
16:16 - actually we'll leave that so all right
16:18 - here is our key right here
16:21 - here's our address
16:23 - and this is
16:25 - how it works
16:29 - so we're just gonna do our
16:33 - payload
16:37 - then
16:38 - here's our dictionary that we're going
16:39 - to be passing in
16:41 - so our api key
16:45 - then
16:46 - it's our ameritrade
16:51 - and then
16:54 - come down
16:56 - then our symbol
17:02 - and we're just going to pass it let's
17:04 - pass it google
17:10 - yeah let's see did i do that right is
17:11 - that google symbol yeah
17:13 - all right
17:14 - then
17:16 - and then wha how do we
17:19 - what were how do we want it how what
17:21 - kind of information we wanted and i said
17:22 - we were going to load the projection
17:26 - we want that to be
17:28 - the fundamental
17:30 - dementor
17:32 - and tell all right
17:35 - all right so we're done with this
17:37 - so now
17:42 - uh results and i just realized i have
17:44 - left out because
17:47 - we have left out a ton right here so
17:50 - import
17:51 - requests
17:55 - all right
17:56 - and that's all we need right
17:58 - now yep requests
18:01 - so then
18:02 - [Music]
18:06 - requests
18:08 - dot get
18:10 - then what are we going to use we're
18:11 - going to use our
18:14 - this is where we're going and what are
18:16 - we going to what are our params
18:21 - and we're going to pass it payload
18:25 - all right all right so now we need to
18:27 - really look at
18:29 - we haven't really delved into
18:32 - what in the world comes back and ways in
18:35 - which
18:36 - to look at it
18:38 - so here's our response so let's look at
18:40 - dur on results
18:43 - okay
18:45 - so what we're going to be looking at
18:46 - today
18:48 - is
18:49 - a json object
18:52 - and this is how we're going to begin to
18:54 - unpack this
18:56 - so you can what we can see
18:59 - results
19:02 - then dot
19:04 - what text
19:06 - okay so that's
19:08 - that's that so here it is as
19:12 - as a string
19:14 - okay then
19:17 - that's okay so then i got to go in and
19:19 - get stuff
19:20 - or i can turn this into
19:26 - aha
19:28 - so now
19:29 - i just get
19:31 - the
19:33 - whole object
19:34 - so now i use a json
19:37 - i pull the json object
19:39 - out
19:40 - and
19:42 - i can go through and i know how to
19:44 - unpack this dictionary right here so i
19:46 - have a dictionary
19:48 - then a dictionary inside that
19:51 - and then here we go with the symbols
19:54 - so
19:55 - and all of the information 52 week high
19:58 - 52 week low p e ratio
20:01 - peg ratio which is i am a
20:04 - huge believer in the peg ratio and we'll
20:07 - we'll break down the ones that i truly
20:09 - believe but there we go
20:12 - this is the building block
20:14 - of where we're going to go from here and
20:16 - we're going to add all of the things
20:19 - that
20:20 - we've done before especially our loop of
20:23 - how to handle 500 uh
20:25 - i can't remember if we're doing that one
20:27 - next or if we're doing
20:29 - uh no
20:30 - next video we're going to be handling um
20:34 - something very interesting it's going to
20:36 - become handy but we'll do that later so
20:38 - there we go guys please please please
20:40 - drop any comments
20:42 - questions video requests
20:45 - make sure you join in that discord
20:46 - server i don't if you're brand new here
20:48 - i don't want you feeling alone
20:50 - somebody's on over there at all times uh
20:53 - i have an admin and a moderator we are
20:55 - literally around the globe
20:58 - so
20:59 - join up there somebody's always on
21:01 - answering questions
21:03 - so all right um
21:05 - here's our main layout but we want to
21:08 - test
21:10 - all of the ticker symbols so let's just
21:12 - go ahead
21:13 - and bring this in so
21:15 - if you're new here thanks for joining us
21:16 - this is what we do we do micro videos
21:19 - um
21:20 - we
21:21 - break them down one at a time and build
21:23 - upon them and probably the reason why i
21:26 - love that
21:27 - so much is
21:29 - because
21:31 - that is one of the subscribers
21:33 - ways to describe it so we have a pretty
21:36 - large growing community uh especially
21:38 - over on discord
21:41 - um so if you are learning python
21:46 - alone
21:47 - go ahead and join the server and
21:50 - you will not be we have usually somebody
21:53 - on over there answering questions all
21:54 - the time
21:55 - so all right
21:57 - if you haven't seen before this
21:59 - uh is also the this file is on my github
22:04 - so you can go and grab it and pull it
22:06 - down
22:07 - let's see company list it's saying what
22:09 - is it saying i'm not using it
22:11 - oh all right
22:13 - i need to bring in oops
22:16 - import
22:17 - pandas as pd
22:20 - alright so what i'm going to do is i'm
22:21 - going to bring in this
22:24 - spreadsheet
22:25 - and then what i want to do is i want to
22:27 - then grab only these symbols so we're
22:30 - going to do this too symbols
22:37 - if i can spell today
22:41 - but i hope everybody is doing well all
22:44 - right so then in that
22:47 - in that uh file
22:49 - there is a column named symbol
22:52 - and we're just going to grab that
22:55 - and then what we're going to do is i
22:56 - only want the values
23:01 - of
23:02 - that and then i want that put into a
23:04 - list so we are covering
23:06 - a lot of things right now that pandas
23:09 - can do for us
23:10 - so
23:11 - i'm grabbing this and then i don't want
23:14 - this put into a pandas
23:17 - series
23:19 - i only want the values
23:21 - and then i only want that
23:23 - to be put into
23:26 - a a list and it's going to be assigned
23:29 - then to
23:30 - symbols
23:31 - so all right so now i have
23:35 - where i'm going now let's throw in
23:39 - all of this right here
23:42 - all right
23:46 - now
23:46 - we ran into a problem
23:49 - last time
23:50 - where
23:51 - we
23:53 - or i i had expressed that there is a
23:55 - problem where we can only screen
23:59 - 500
24:00 - at a time i've learned i don't know
24:03 - exactly what the number is but i know
24:04 - 500 works so we are just going to do
24:07 - that
24:08 - so now we need to do this in a loop
24:13 - and we've done this loop before
24:15 - so while oh yeah also
24:18 - let me get this around so we need our
24:20 - starting point
24:22 - equals zero
24:23 - our end
24:26 - equals 500.
24:29 - so
24:30 - whoa so while
24:34 - now there was also a flaw in the way in
24:36 - which i did this
24:38 - we could do this one more time outside
24:40 - the loop and print but we're going to
24:42 - use this while start
24:45 - is less than
24:48 - uh
24:50 - and we also need to do
24:52 - len
24:55 - of
24:56 - no we don't have it yeah
24:58 - len of
25:00 - symbols
25:01 - because what we're doing
25:04 - is here's our list here's our list of
25:06 - symbols and we're going to
25:08 - then iterate through these
25:11 - 500 at a time so as long as start
25:14 - is less
25:16 - than
25:17 - the end we're going to do this one more
25:19 - time
25:20 - so let's bring this all over
25:23 - and then now we're going to
25:24 - make a new one right here
25:27 - tickers because this is going to change
25:30 - so then we're going to symbols
25:34 - then our start
25:37 - through stop or excuse me end
25:42 - and
25:42 - [Music]
25:45 - and we're going to change this right
25:47 - here
25:48 - to
25:50 - tickers
25:52 - all right then when we get done
25:54 - we need to then
25:58 - increment up
26:00 - start is going to be now end
26:02 - and then
26:04 - end
26:07 - end is going to be
26:10 - 500
26:13 - larger than before
26:16 - all right let's do that again
26:19 - so i know i've just changed a lot so we
26:21 - brought in
26:22 - our symbols this is all
26:24 - of the symbols of all of the nasdaq and
26:28 - all of the
26:30 - nyse it's going to be 4 000 excuse me
26:33 - 5456.
26:35 - all right so we also know that there is
26:38 - a problem where
26:39 - this api will only well it will at least
26:42 - i don't know only it will at least
26:44 - search for 500 at a time
26:46 - so now we're going to check
26:48 - 500 at a time
26:52 - and this is how we're going to do it
26:55 - we're going to go through now i think
26:57 - we're about at a good stopping point
26:59 - right here and we'll pick up on this
27:01 - next video because i know i just dumped
27:03 - a lot on you so but right here we're
27:06 - going to iterate through
27:08 - and the reason why we chose
27:10 - start
27:12 - is so
27:13 - we don't have to do a loop because if we
27:15 - did end right here we would then have to
27:17 - do this one more time outside of this
27:21 - and i don't want you to have code here i
27:23 - remember the first time i tried this i
27:25 - ended up i had code here and then code
27:27 - here
27:28 - it's the same code but accomplishing the
27:31 - same task so then it dawned on me i
27:33 - could just change start
27:35 - from end because you can have your
27:37 - endpoint be larger
27:39 - than
27:40 - what are the choices you just can't have
27:42 - the start be out of index all right i'll
27:44 - say that one more time you can have your
27:45 - end out of index range it won't care but
27:48 - you cannot have your start be out of
27:51 - index range so there is a nice little
27:53 - tidbit so there we go guys so where we
27:56 - left off
27:57 - was we changed this over we brought in
28:00 - all our tickers right here we changed
28:03 - out our api
28:05 - to
28:06 - multiple because before it was google
28:10 - g-o-o-g
28:11 - but now we have this where we've also
28:15 - i've also shared you the pain that i
28:17 - know we can check 500 at a time so right
28:20 - now we are going to be looping through
28:22 - these
28:23 - in 500 we're going to increment
28:26 - we're going to iterate
28:27 - over
28:29 - our symbols
28:31 - and it's going to be tickers and we're
28:33 - going to be doing 500 at a time
28:36 - now
28:37 - we need to then capture this data
28:41 - and
28:42 - go through it and then come back and
28:44 - revisit it so
28:46 - we're going to pickle these responses
28:50 - and come back and touch them later so
28:52 - we're going to do this now
28:54 - then we kind of need to deal with
28:57 - a couple of things
28:59 - so we're going to add in
29:02 - time because we're going to need to
29:05 - pause this because if you have a
29:07 - fast computer
29:09 - when you
29:11 - we're gonna grab time
29:13 - and use that as our file name
29:16 - if you've seen how to handle changing
29:19 - multiple characters that's actually
29:21 - where this came to be
29:23 - and automating um
29:25 - file names that's also where this came
29:27 - to be these uh this problem that i have
29:30 - and then we're going to use regular
29:32 - expression
29:34 - if i can type correctly regular
29:36 - expression to
29:38 - change all of the problem characters
29:41 - for that windows does not like to have
29:42 - file names named all at one time so all
29:45 - right so let's just go ahead and
29:48 - get at it
29:50 - so we have our
29:54 - results
29:57 - now we also looked
29:59 - last time at how to look at
30:02 - json coming back
30:04 - so we're going to take our
30:07 - data
30:09 - then it's going to be results
30:13 - dot json
30:16 - all right
30:18 - then
30:19 - then now we need to then
30:21 - save this file
30:23 - so our file name
30:26 - file name is equal to
30:30 - time
30:31 - dot
30:35 - so what this is going to do is it's
30:37 - going to spit out
30:39 - uh the time down to the second because
30:42 - we don't want date
30:44 - uh because that's not differential a
30:47 - differential enough and then if you have
30:49 - a very fast computer
30:51 - it may have this took me a while to
30:53 - realize why i was missing data i was
30:55 - getting all these back so we're actually
30:57 - going to pause one second in just a
30:59 - minute
31:00 - all right so let's do that
31:02 - then we need to add our pickle file
31:05 - dot p k l
31:07 - and i just realized we also need to
31:08 - bring in pickle
31:12 - didn't do that yet so if you've not seen
31:14 - and you don't not sure exactly what any
31:17 - of these are you can go back and search
31:19 - all of these i've done videos on every
31:22 - single thing nothing
31:23 - is new here yet and actually i don't
31:27 - think anything is going to be new here
31:28 - at all we're just cramming it all
31:30 - together so now
31:33 - now we have
31:36 - all right let's see where we are so
31:38 - we've got our data we've got our file
31:41 - name
31:42 - now to save you a little bit of pain
31:44 - there's going to be two things that
31:46 - windows is not going to like it's not
31:48 - going to like the space in between the
31:50 - time and it's not going to like the
31:52 - colon in between the 9 the time so we're
31:55 - going to change this
31:57 - name
31:57 - [Music]
31:59 - equals re sub substitution
32:03 - then
32:05 - space
32:08 - then colon then close out
32:11 - and we're going to replace it with
32:13 - underscore
32:17 - and what are we going to be replacing
32:20 - file name
32:22 - there we go
32:23 - so all right
32:25 - so there we go let's go through this one
32:27 - more time so our data
32:30 - then that's our json object here's our
32:34 - automated file
32:36 - creation
32:38 - then we need to replace the space and
32:42 - the colon
32:43 - in
32:44 - the file name because windows will not
32:46 - like it
32:48 - and then now
32:49 - now we're going to
32:52 - create the file and then dump the data
32:56 - in so here we go
32:58 - with
33:00 - open
33:02 - file name
33:04 - oops
33:05 - there we go
33:08 - as oh no right i'm gonna
33:14 - close that out
33:15 - as file
33:17 - then pickle
33:19 - dot dump not jump
33:23 - data
33:25 - comma file
33:28 - all right
33:29 - now
33:31 - yeah file
33:32 - yes file
33:34 - all right so here we go
33:39 - let's just go ahead and get this running
33:43 - and let me just show you as this
33:46 - occurs
33:47 - we're going to be now having the files
33:49 - show up and come through oops
33:54 - ha ha
33:56 - if you add two t's
34:00 - it does not know what you're talking
34:01 - about
34:04 - all right so we need to fix this
34:07 - i did not reference this import
34:10 - pickle
34:12 - as pkl sorry guys
34:16 - hopefully that will be the last mistake
34:18 - that i've done but these are all the
34:20 - type of things that you're going to make
34:22 - mistakes on
34:23 - and you become very very proficient at
34:27 - understanding the code this is why
34:29 - typing is so very very important so all
34:32 - right
34:32 - oh man i meant to have these sitting
34:34 - here and popping so boom
34:37 - this worked out i think but let's just
34:40 - also make sure
34:42 - we do time dot
34:46 - sleep just for one second i forgot to
34:49 - have that in there
34:50 - just in case
34:52 - i think
34:53 - i'm a little bit slow today let's see
34:55 - yeah i got i'm eating up a lot of ram so
34:57 - let's just make sure i realized that we
34:59 - didn't i think i lucked out i got a lot
35:02 - of programs open so make sure you're
35:04 - putting
35:05 - sleep one second right here to make sure
35:08 - that you're not going to have and miss
35:11 - any
35:12 - any file names because that is exactly
35:15 - it as you can see right here
35:18 - boom each second apart and if i were to
35:21 - close some programs i got a lot of stuff
35:23 - running right now uh i could have missed
35:26 - some files but as you can see
35:28 - this is down to the second and that's
35:31 - what you want because you need all of
35:34 - the entire time or your files will have
35:36 - the same
35:38 - file name and we'll go and you'll have a
35:40 - problem and you'll start losing data so
35:43 - that is why time is very
35:45 - uh handy now if you want to do more and
35:48 - you want to come up with specific file
35:50 - names and increment that's great
35:53 - i wanted i always go the easiest route
35:57 - and time was the first thing that came
35:58 - to me so there we go guys
36:00 - so where we left off last time is
36:04 - we had a bunch of pickled
36:07 - files right here so now we need to
36:09 - figure out how to
36:12 - extract and merge
36:14 - all this information here so if we
36:16 - really think about it
36:18 - we need to find out what files we want
36:24 - or we could track
36:28 - the files that we are creating
36:31 - right here or right
36:34 - here and then we have our variable name
36:36 - right here so we could do something like
36:40 - this
36:42 - as we
36:44 - as we create them
36:47 - we could then add them to our
36:50 - files list
36:52 - and just append
36:55 - 5 f
36:58 - name
36:59 - the reason why is because then the next
37:02 - step that we're going to do
37:04 - is we need to look and see
37:06 - let's go ahead and rerun this
37:11 - we now need to see how in the world
37:13 - we're going to pull from all of this
37:16 - stuff
37:17 - that we have
37:19 - and how in the world are we going to use
37:21 - it
37:22 - and you'll see that yes it is a
37:26 - dictionary after we grab it as a json
37:30 - but it's not the most user-friendly
37:32 - dictionary that you may have seen before
37:36 - so i'm going to show you a little
37:38 - template so let's see len of results i
37:42 - think is
37:45 - that's right
37:46 - len of its data
37:50 - there we go
37:51 - so
37:53 - let's see is this uh
37:57 - all right
38:01 - so let's grab the
38:02 - keys data let's see
38:06 - you can see that
38:09 - all right so here are all the keys so
38:11 - let's just grab one of them
38:15 - data
38:19 - u-g-p
38:21 - i don't even recognize that ticker
38:22 - symbol
38:24 - all right so holy moly
38:28 - okay so we have
38:32 - inside this then we have our
38:36 - fundamental then inside that
38:40 - it then has a key of symbol
38:44 - aha okay so we need to then unpack
38:48 - the fundamental which all right so i
38:51 - will show you then what we need to do
38:53 - so then we need to we need to come down
38:55 - here
38:57 - so what we're going to do is then we're
38:58 - going to throw this into a list and then
39:01 - this has
39:03 - everything
39:05 - and then we're going to throw this into
39:07 - a data frame so we need to go and grab
39:10 - we need to grab every single we're going
39:12 - to go through each pickle file
39:14 - move everything over
39:16 - then throw it into a data frame and
39:18 - we're going to extract what we want so
39:20 - what we're going to look for
39:22 - is what i have found to be the most
39:24 - telling of what the way that i look at
39:26 - things is we're going to look at we're
39:27 - going to pull the symbol
39:30 - the net
39:31 - profit margin for the quarter
39:34 - then the pe then the peg
39:36 - p e ratio peg ratio and the
39:39 - 52 week high so those are all keys
39:44 - so let's just see
39:46 - how far we get
39:48 - in this
39:49 - so now we're gonna make a new
39:55 - list empty list data let's bring this up
39:58 - here
40:01 - and
40:02 - for
40:03 - file in files
40:07 - then with open
40:10 - and file
40:12 - rb
40:17 - as
40:19 - as file i have written this one in a
40:21 - while
40:23 - then we're going to call this info
40:28 - and we're just going to use our keep our
40:29 - pickle
40:31 - kl dot load
40:33 - and everything that we have done
40:35 - is there is a video on each specific
40:39 - thing that i am talking about that's why
40:41 - these are
40:43 - micro videos all right so now
40:48 - so now i'm going to pull all of my
40:51 - tickers
40:54 - because then i'm going to go through
40:57 - because each file
40:59 - has a key and i don't know exactly so
41:02 - i'm going to pull these all out so let's
41:04 - look at this
41:05 - to tickers
41:07 - equals list
41:10 - info
41:12 - then i'm going to go then i'm going to
41:14 - make my points
41:15 - of interest
41:19 - and these are
41:21 - the keys that are here
41:24 - see this is very specific
41:26 - symbols
41:29 - then net here i'm going to copy all this
41:34 - because i know i'm going to type this
41:35 - wrong
41:36 - and yes you're correct i don't like this
41:40 - but
41:41 - all right
41:43 - i will have this down in the description
41:45 - below
41:46 - for you guys to look at
41:48 - all right let's move that back over
41:50 - points then for
41:54 - ticker and tickers
42:07 - for point
42:09 - and points
42:12 - ticker dot append
42:16 - info now check this out
42:18 - i'm going to throw in ticker
42:23 - then
42:24 - this is always
42:28 - fundamental because it's the first
42:32 - layer
42:34 - let me make sure
42:37 - i typed that right so i'm going to cheat
42:43 - okay did not
42:45 - and then my point
42:48 - gonna grab that out
42:55 - then my
42:56 - data append
43:00 - each tick
43:02 - all right
43:04 - okay we did that in about seven and a
43:06 - half minutes
43:07 - so i'm going through
43:11 - each each pickle file
43:13 - 500 500 symbols at a time
43:16 - of a returned
43:19 - there we go
43:21 - of a returned
43:23 - uh fundamental of
43:25 - all of these
43:27 - market movers
43:29 - okay all of these market datas right
43:31 - here so
43:33 - you may like can you be you might like
43:36 - different markers so then you would have
43:38 - different points that was why i decided
43:40 - to use the the term the variable points
43:43 - you might want to be looking at volume i
43:46 - know i had a question uh not too many
43:49 - days ago
43:50 - about wanting to see change in volume
43:53 - this has
43:54 - average daily volume so i can show you
43:57 - how to merge and pull from different
43:59 - data frames we'll be doing that very
44:01 - soon but this is a great stopping point
44:04 - we are now we are about to merge and
44:06 - just dump this all i wanted to do this
44:09 - right here ah one last
44:12 - super important thing
44:14 - so now i just realized so if you do not
44:17 - do this
44:18 - you will have your system
44:20 - overrun with
44:24 - with files that just build up throughout
44:26 - the day so now we need to throw out
44:28 - throughout the day or weeks
44:30 - os
44:32 - so as we go through it as we pull out
44:34 - all the useful information for us we
44:36 - will then delete that file forgot that
44:39 - one last part so cool got through all
44:41 - this
44:42 - good okay so now like i said we have a
44:46 - we have a list of lists
44:48 - with this data right here it's going to
44:51 - look just just like that
44:55 - and it is literally
44:57 - this
44:58 - this simple right here
45:00 - so now
45:01 - we need to make
45:02 - our column titles
45:06 - so we're going to call those points
45:09 - all right and then literally it is just
45:13 - a
45:14 - we're just going to copy this
45:18 - boom right here so this is what we're
45:20 - going to call them this is what the keys
45:23 - are
45:24 - in the
45:26 - j json response but we're going to title
45:29 - them symbol margin p e peg and 52
45:33 - 52 high
45:34 - so because we know what that is
45:36 - and then literally it is this simple
45:39 - let's just start and go from here so df
45:43 - df results
45:44 - get this out of the way so you can see
45:46 - results
45:48 - mpd
45:51 - data frame the f is capital just two
45:55 - uh i always had a hard time with that
45:57 - and up here all
45:59 - the list of lists is data
46:03 - then we drop in
46:05 - i might have to stare at this i can't
46:07 - spell column
46:08 - columns
46:09 - and we get pass in points
46:14 - close that out
46:16 - and literally
46:19 - that is it so
46:21 - let's run this and as we can see over
46:23 - here oops i need to be right here
46:26 - run this
46:27 - and as that's going through we can
46:29 - literally just see but this this is
46:33 - this is one of the
46:35 - neatest things that i have
46:39 - seen that when i started learning to
46:41 - program
46:42 - that now
46:43 - because when i when i was doing it as
46:45 - you can see they're just building here
46:48 - that before
46:49 - i would put in to my computer and have
46:52 - stuff come out on the screen that was
46:53 - very cool now that then it got to the
46:56 - point where i'm now
46:58 - having criterium and i'm going out and
47:01 - i'm touching another computer and it's
47:04 - sending back information and i'm in
47:06 - control of the information that i'm
47:08 - getting
47:09 - and when i saw that i was i thought i
47:12 - was hooked before
47:13 - when when all these all of these things
47:16 - uh were happening but after after this
47:18 - it was
47:19 - it was uh
47:21 - no holds bar so then now we're going to
47:23 - have these
47:24 - as they were building so now they're
47:26 - going to go through now we're running
47:27 - through each of them and placing them in
47:32 - uh
47:32 - the list
47:34 - and they will start
47:36 - now going away
47:39 - boom there we go
47:41 - okay and it's literally done so now df
47:44 - results
47:47 - and here i go so now we don't need that
47:49 - so now we slide over so to remind you
47:52 - the way that if you've not seen any of
47:55 - the pandas pandas series again try we'll
47:58 - try not to take that personally you can
47:59 - go and see
48:01 - uh two playlists one
48:04 - one is a pandas and one is a pandas
48:06 - project but the way that this is
48:09 - is there's my index
48:12 - here's how big how this is this is a
48:15 - 5289
48:17 - 5289 rows by five columns and what that
48:21 - what this automatically does is it
48:22 - prints out the head and the tail of the
48:24 - data frame just so you can get an idea
48:27 - and we'll go from here uh we're going to
48:29 - be looking at how to slice
48:32 - a data frame with
48:35 - a pandas series
48:38 - and with multiple
48:40 - series so all right let's just go ahead
48:42 - and jump into it
48:45 - so if you're new here thanks for joining
48:46 - us
48:47 - this is what we do
48:48 - we do micro videos so as you can see
48:52 - we're going through and we're pulling
48:53 - down
48:55 - our
48:56 - our pickle our pickle files and then
48:59 - we're going to then go through them and
49:02 - we're going to then be building our data
49:04 - frame
49:05 - and
49:07 - as you can see down here we've we've
49:10 - dumped this in so if you have not seen
49:12 - in these other videos
49:14 - there are nine of course
49:16 - and everything that we've done
49:18 - here before there's been a micro video
49:21 - on but this is going to be something new
49:23 - that we've done so here's our standard
49:26 - that we have
49:27 - uh i'm going to delete this so i have a
49:32 - this is our standard i know how to
49:34 - now
49:35 - slice
49:37 - with we got
49:38 - data frame peg
49:41 - so now this is going to be so i've gone
49:43 - from
49:44 - my df results
49:47 - data frame which has
49:51 - 5288
49:52 - down to
49:54 - 450
49:56 - so i've i've gotten rid of i've sorted
50:00 - out i've sliced out
50:03 - a pretty significant amount
50:05 - but
50:06 - the issue is is
50:08 - i want to have
50:11 - a certain range of
50:14 - margin
50:15 - a certain range of pe
50:18 - a certain range of peg that i care about
50:22 - so
50:23 - there is a way that i have we've done a
50:27 - video on this and so we know and
50:31 - so we have the keyword the condition and
50:35 - but now we also
50:36 - learned about the bitwise operator
50:39 - the and sign
50:41 - so we have true and true so true
50:45 - and false
50:47 - so this is the technique that we're
50:49 - going to use
50:52 - to create
50:54 - what i prefer and what i have found over
50:57 - time
50:58 - is the best
51:00 - practice
51:02 - of how i sort so we'll just go ahead
51:05 - and look at this
51:08 - and it's going to look something just
51:10 - like this
51:12 - so i have my results so
51:15 - i'm going to do df
51:17 - boop i'm going to change this df
51:20 - dot
51:21 - peg we're going to change this out
51:23 - and then just like normal df
51:28 - results and i'll show you how to do this
51:32 - so then we open it up now these are
51:36 - uh
51:37 - these are tuples okay
51:40 - so df
51:45 - results
51:47 - then we pass it in just like this is how
51:49 - we're passing in our multiple series
51:52 - so then peg just it's it's these over
51:55 - here so capital i have my peg capital
51:59 - and then
52:00 - start then i have it i want i want the
52:03 - peg ratio to be less than one
52:06 - so to remind you what the peg ratio is
52:09 - is it is the p e ratio divided by growth
52:13 - so if you have a p e ratio of 12 but
52:15 - you're growing at 12 times your peg
52:17 - ratio will be one so you can have a high
52:20 - p e
52:22 - but
52:23 - as long as you're growing at the same
52:25 - rate
52:26 - you're basically
52:28 - back at zero so that's why i like less
52:30 - than one so now
52:32 - and
52:35 - and then so we'll do this
52:37 - and
52:40 - then df results oops whoa df
52:44 - results i don't know why i capitalized
52:47 - that
52:48 - so i want it between a range so i want
52:51 - it greater than zero but less than one
52:55 - so then
52:57 - peg again
53:00 - oops
53:02 - close that out
53:03 - and also
53:06 - greater than zero sorry
53:08 - greater than zero
53:10 - close this out
53:12 - another and
53:14 - then i want df
53:17 - results
53:22 - and then margin
53:28 - then
53:30 - close this out and i want this to be i
53:32 - want you to be making a substantial
53:34 - amount
53:35 - of uh margin so i have that as 20.
53:39 - then another one the last one
53:42 - is
53:44 - i think this is the last one
53:46 - yeah
53:50 - and then i want
53:54 - df
53:57 - results
53:59 - and i want the pe
54:04 - to be greater
54:06 - than 10.
54:08 - then i close this out then boom let's
54:10 - see if i typed all this right
54:13 - nope
54:13 - all right
54:15 - so we're just going to copy this
54:18 - and i'll show you
54:22 - let's see
54:29 - and i forgot some parentheses so all
54:31 - right
54:32 - i knew this was a long shot
54:36 - all right so here
54:39 - all right
54:40 - so yeah i didn't wrap
54:42 - so
54:43 - make sure each one of these is wrapped
54:46 - in a tuple and going forward so i think
54:48 - that's what i forgot right
54:51 - somewhere right there right there i
54:53 - didn't close that that one out so all
54:55 - right so
54:56 - peg less than one and peg
55:00 - greater than zero
55:01 - and
55:03 - margin greater than 20 and
55:06 - p e greater than 10
55:08 - so then now
55:11 - let's check this out
55:15 - boom 149
55:18 - different companies that then i can
55:21 - examine are they healthy
55:23 - and then there's ways that i sort this
55:26 - out but
55:28 - this is a very good starting point for
55:29 - you so there we go guys and
55:32 - we're going to be looking at two ways to
55:34 - view large data frames so if you're new
55:36 - here thanks for joining us
55:38 - this is what we do we do micro videos
55:41 - uh one video upon another
55:44 - and we build upon it so all right so i'm
55:47 - gonna show you one that
55:50 - one way i like to do it so we can see
55:53 - the
55:54 - um
55:55 - the column names
55:57 - and then i will show you another way
55:59 - that
56:00 - you guys will probably like because you
56:02 - won't need to remember the column names
56:04 - but i have a very short term memory and
56:06 - i like to be reminded so all right
56:10 - so we're going to make a function
56:12 - and basically it's going to be like a
56:14 - loop
56:16 - oops
56:18 - sorry i've been a little off today so i
56:21 - can already feel that the typing is
56:23 - going to go so basically we're going to
56:25 - kind of do a looping through but we're
56:28 - going to change this as the size of
56:31 - however large you have
56:33 - your little your little window right
56:35 - here
56:36 - so we're going to go our start oops
56:38 - start
56:41 - equals 0
56:42 - then stop is basically going to be the
56:45 - size
56:48 - then
56:50 - while stop
56:54 - oops
56:57 - less than length
57:00 - of
57:02 - our
57:03 - df
57:05 - peg
57:08 - then i'm also going to show you show you
57:10 - how to sort in place we've already done
57:13 - sorting by columns but i'm going to show
57:14 - you in place and how it's going to give
57:16 - you
57:17 - maybe a little bit of what's going to
57:19 - look like an error but it's not
57:22 - df
57:24 - df
57:27 - peg
57:28 - then we're going to go start
57:32 - and then
57:35 - stop
57:36 - close this out
57:40 - then start
57:42 - oops
57:43 - start becomes stop
57:46 - and
57:46 - [Music]
57:47 - stop is incremented by size
57:55 - and we could have changed this to
57:58 - uh ooh and i misspelled view
58:01 - and i haven't said this in a while but
58:05 - this is not a spelling channel and we
58:07 - could have used start and only done that
58:09 - once but i've already committed to the
58:11 - stop
58:12 - so df
58:14 - peg
58:16 - and then one more time start
58:21 - stop
58:23 - close and close
58:25 - so all right
58:26 - let's run this and it has another w i
58:30 - i apologize everybody like i said been a
58:32 - little off today
58:34 - so all right as we're going through this
58:36 - you can see
58:37 - wrong one there we go they are starting
58:40 - to build and we're building our but yes
58:43 - if you have are just joining if this is
58:45 - your first video of the api
58:49 - there are 10 previous or no's to today's
58:52 - 10. today's 10
58:53 - and um
58:56 - well now i want to check
59:00 - today's 11
59:02 - and uh we are now touching hey was it
59:05 - already done
59:07 - it's already done
59:08 - so now we have our so we have our
59:10 - results
59:12 - which is everything
59:14 - all 52
59:16 - 88 then our s our
59:19 - skimmed down are sliced
59:22 - with all our conditions now it's
59:24 - today it's
59:26 - 150
59:27 - so now
59:30 - now right now when you type this in you
59:32 - only have
59:36 - view
59:37 - let's see if 40 fit here
59:39 - all right oh okay
59:42 - so it looks like so the reason why i
59:44 - like this so i could have made it a
59:45 - little bit smaller
59:47 - the reason why i'm having this done in
59:49 - groups is so because
59:51 - i made the mistake one time where i go
59:53 - okay that was the peg
59:55 - but right now this is not sorted oh we
59:57 - didn't sort it yet
59:59 - so let's sort it
60:00 - so we
60:02 - we do
60:03 - uh df
60:05 - peg
60:07 - then we're sorting by
60:08 - this is what we're going to sort this is
60:10 - the method sort
60:12 - value
60:13 - then we're going to sort it by in
60:16 - ascending order
60:17 - by peg
60:19 - i want to know the lowest peg
60:22 - now you're going to see this and it's
60:23 - going to look like it's going to throw
60:26 - throw an error
60:29 - ah it's values
60:31 - i am so sorry everybody with all this
60:33 - wonderful typing so now i have it in
60:36 - ascending order
60:37 - and then so now you don't have to rerun
60:39 - the reason why i'm making a function out
60:41 - of this is you can do this so you don't
60:42 - have to run this script you can toy with
60:45 - this
60:46 - and then now you can go and view
60:49 - dfpeg or if you wanted to do this and
60:52 - you change
60:53 - change your data frames you can add that
60:55 - so this is why i like this so let's
60:57 - let's change this to 35
61:00 - and then now it fits right here so i
61:03 - only have to remember
61:05 - just a little bit then i have my
61:07 - reminder of my columns and i come
61:08 - through now for those of you who
61:11 - have exceptional memories
61:13 - and do not need
61:16 - that reminder there is a way so we have
61:19 - as as we have here we imported
61:23 - pandas as pd so there is a function pd
61:28 - dot set
61:30 - option
61:31 - then we're going to be displaying
61:34 - all the rows so
61:37 - display
61:39 - dot
61:40 - max
61:42 - underscore rows
61:44 - so we want
61:45 - as many so basically this is kind of
61:47 - arbitrary you could set this to 10 000
61:49 - but we know there's only 150 so i'm
61:51 - going to type in 200 so boom so now i'm
61:55 - saying every data frame that i call
61:57 - right now print print them 200 at a time
62:03 - all right
62:04 - um
62:06 - and then move on as as a head in the
62:08 - tail
62:09 - so this is going to encapsulate all of
62:12 - them
62:12 - and their data frame is yeah df
62:16 - dot
62:17 - peg so now i have all 150
62:22 - at one time without
62:24 - any of the columns being reprinted so
62:27 - there we go guys two separate ways
62:30 - to view very large
62:32 - data frames we have one more thing to do
62:35 - we're going to be looking at the pandas
62:38 - data frame is in method
62:40 - what this
62:42 - method is so very cool let's just go
62:45 - ahead
62:46 - and see so if you've heard about
62:49 - join in
62:51 - uh sql
62:53 - i was about to type join so we got
62:55 - uh our data frame peg
62:58 - i forgot it's still set on all of them
63:01 - so we have
63:03 - and then also we have our
63:11 - all right let's clear this out
63:16 - our data frame
63:19 - all right okay good
63:22 - so what we're gonna do
63:24 - is
63:26 - let's say this information that i've
63:29 - screened is proprietary and i don't want
63:33 - anybody to know about it
63:35 - but let's just say i'm making
63:38 - a
63:40 - um
63:41 - making a list
63:43 - and i have a newsletter and i'm sending
63:45 - these out but i only want to give you
63:47 - the symbol
63:49 - the company name the sector and the
63:51 - industry
63:53 - but right now my data frame only has the
63:55 - ticker
63:57 - and then
63:59 - let's see what else did it have so it
64:00 - has the peg the pe the profit margin
64:04 - and the 52 week high that's all our
64:08 - original
64:09 - data frame had or the one that we're
64:11 - most interested in
64:13 - and let's see
64:14 - and it's still there but our df
64:18 - so this is oh yeah because we have that
64:20 - only doing 200 at a time
64:23 - so this is where this is
64:26 - in method comes to be so i want to pass
64:29 - you this information i don't want you to
64:32 - know the other information so now i'm
64:35 - going to take
64:36 - since there is a similarity just like
64:39 - our join in sql
64:41 - we're going to use our symbol
64:44 - our symbol
64:46 - column
64:47 - and our symbol column and that's how
64:49 - we're going to associate and then this
64:52 - data this data frame
64:54 - only
64:55 - with this information will come out so
64:58 - let's just go ahead
64:59 - and do this
65:02 - so we need to
65:04 - pull out
65:08 - it needs to it takes it as a list
65:11 - so
65:13 - df
65:15 - symbols
65:20 - equals
65:22 - dfpeg
65:28 - symbol
65:32 - close this out then i'm going to put
65:34 - this into a list because like i said my
65:38 - my uh
65:39 - it
65:40 - is in method takes a list so now now i
65:43 - have
65:45 - from my
65:46 - here
65:47 - df symbols
65:49 - so boom
65:50 - here's my list of tickers
65:53 - and then i'm going to pass this
65:56 - into
65:59 - all right
66:00 - then i'm going to pass it into this
66:05 - and this is going to make a boolean
66:08 - just like all of our other series
66:11 - so i pass this
66:13 - and once you do this a couple times it
66:15 - makes sense
66:16 - so now this is my
66:19 - my my df my data frame is my
66:22 - data frame that has my symbol
66:24 - uh my company name
66:26 - my sector and my industry
66:30 - and that one was capital s
66:33 - capital s y
66:36 - and vote symbol
66:39 - close this out
66:41 - is in then i'm going to pass it the list
66:45 - and we call that
66:47 - df
66:48 - symbols this is just like our index
66:52 - indexing
66:53 - just like this over here
66:55 - so it's a little odd at first when you
66:59 - when you think about when you see it but
67:01 - once once you do it a few times it makes
67:03 - it makes a lot of sense
67:05 - so now new
67:07 - i just have true and false so is it in
67:09 - or is it not
67:10 - so then
67:12 - then i pass
67:14 - this
67:18 - and here's my new series
67:20 - excuse me data frame so then i'm going
67:22 - to pass this boolean just like if it's
67:25 - passing or failing just like this
67:28 - scenario just like here
67:35 - equals in my
67:36 - my data my df my data frame is my
67:40 - symbols
67:42 - uh name sector industry
67:45 - then i pass it new my boolean
67:48 - so now
67:50 - companies
67:53 - so now here i go
68:00 - i should have changed that setting so
68:02 - now
68:04 - unbeknownst to the recipients they have
68:07 - no idea
68:09 - how i've come up with this list all they
68:11 - know
68:12 - is that this list
68:15 - is
68:15 - highly qualified companies to
68:19 - move up higher they don't know the
68:20 - criterium that is i keep that on my end
68:25 - and there is no
68:26 - no extra work i don't have to touch but
68:29 - this is a perfect example of how you
68:32 - would go through
68:33 - and use
68:35 - that api to check
68:37 - for
68:38 - um
68:39 - anything moving that is perfect for what
68:42 - you deem
68:43 - is ideal for uh perfect movers if you're
68:46 - interested in
68:48 - i know i've gotten a question on
68:51 - volume so you compare these two
68:53 - databases excuse me data frames to each
68:57 - other and then you go the is in
69:00 - and these data frames
69:02 - act exactly like tables and you use the
69:06 - is in to do your joins so there we go
69:09 - guys